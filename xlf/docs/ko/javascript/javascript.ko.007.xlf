<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="9111bd3573dba091d610e4dfc729318dbcf0fa5d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[HasProperty]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '[[HasProperty]]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bc300ae4477f5475d87acdc216d24546fc897e09" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[IsExtensible]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '[[IsExtensible]]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="36484c7fa5da66234133f314efdd6c5ff2e00b36" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[OwnPropertyKeys]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '[[OwnPropertyKeys]]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="971a1f0e48bca42d75c8a54f72c26621777023c1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[PreventExtensions]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '[[PreventExtensions]]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d47bfc51d360125e5669f5c5bb05be59a7fe2f9c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[SetPrototypeOf]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '[[SetPrototypeOf]]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="04ba73cc01b4c8b37b24a64d1bda2a8f1dd14d6b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[Set]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '[[Set]]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="aa95d7bd0fb7333702cc1b8d0a3ac125810f3635" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'arguments object' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '인수 객체'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e17e329814218169b8a5db00fe0a1b38513dbde1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'async function' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '비동기 기능'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="69e21ca2c3a50567bb6902c7c4d979115c60faaa" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'async functions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '비동기 기능'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3a0bb0f26cffb012eaa61cf30ab8036ca1046c41" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'decodeURI' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'decodeURI'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3ac92eeee112737db03930ecfda94d920da86a89" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'decodeURIComponent' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'decodeURIComponent'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4593bd7b7d670522f11d4fed1a8c720269d0b718" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'do-while statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'do-while 문'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8ba11a53fd9748dc6116a980a402f8e859c24dd0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'encodeURI' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'encodeURI'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9528d04354bdee79e859028b6207f3b8402fed1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'encodeURIComponent' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'encodeURIComponent'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="54bed952d234920a486ccbfed760f99def19cc2e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'eval' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'eval'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="13dc2a86916e0132197ba7154abeeef46d219a1e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'extends' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '확장'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cd616c4ba73fe62662d5a5fab1f5a14aa019a04b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'for statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'for statement'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="becc50be4146c3dc1ee828f6d355b37b45e91b4f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'for...in statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'for ... in 문'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4aecaa60941f3c61d8178f74669a849dfb1b128c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'for...of statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'for ... of statement'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="375984877f565b875136f91d1bf0f056471f4d70" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'function*' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '함수 *'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3c8f1df74ddea143b98bb6d98d9eca3fe35fb634" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get Array [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'get array [@@ species]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2dd488497ac56128117793aac5ab95436db32b0f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get ArrayBuffer [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'get ArrayBuffer [@@ species]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="67cba4bfa395699bbf1ca627be6d6c7ed1088047" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get Map [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'get Map [@@ species]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7efe48cf4711551e2ff3484ab8c28aaca20a85de" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get RegExp [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'get RegExp [@@ species]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1d9d327dfee9cbf4d0cbdb83076626736614a63a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get Set [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'get Set [@@ species]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="203a9e5a6fa893ff7c437dbc1d61cfee092c35dc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'if statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'if 문'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="56d2b0a020136926b65ca1d561661ac25bb4c259" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'isFinite' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'isFinite'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="42fe87993ba80266c4883348667264562414938a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'isNaN' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'isNaN'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d1bdbac3aa7ec9b888b683eb4bb8bdf02c69db2e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'name' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '이름'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f56d2b40cfdcfc845cfebb60182bc34ccd7c2252" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'null value' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '널값'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fcb1d3bb2a0ecb2239ec4f53353e69f44cf7ae0f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'parseFloat' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'parseFloat'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="518059aca334c4b838a9f7d492159ac63ec21170" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'parseInt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'parseInt'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd7d4c6e892f4a5a65237b37587cc745ca68d60c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'super' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '슈퍼'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a0aa1f5563fdd84cfb61e18f28a6fecf3c41c081" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'switch statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '스위치 설명'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a47a621cb9903cbcdedaa9e5c4b88fddcbcf5dbc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'throw statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'throw statement'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8e9e3039d8ae448cb4710647dfd10723330bb0bb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'try statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'try statement'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0328e3a19f174b12604c2ea64636e23748582cf4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'undefined' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '정의되지 않음'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="38ef33a7df16a22ffac2e163b33bd845a8d7177e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'variable statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 '변수 설명'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f06a84b44c0f4cd2094c12e7420a23a4ca272182" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'while statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'while statement'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="886a4bd2b766d6989a8c99e842c495a13d437c63" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'with statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript 최신 초안 (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'with statement'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="319cb5b84263d677b53281f837665fe543259523" translate="yes" xml:space="preserve">
          <source>ES 5.1: generic array-like object as &lt;code&gt;arguments&lt;/code&gt;</source>
          <target state="translated">ES 5.1 : 일반 배열과 같은 객체를 &lt;code&gt;arguments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="366084ca917fc8b3421b6421c84c24e6b9a60661" translate="yes" xml:space="preserve">
          <source>ES Intl 2017 added the &lt;code&gt;locale&lt;/code&gt; parameter.</source>
          <target state="translated">ES Intl 2017은 &lt;code&gt;locale&lt;/code&gt; 매개 변수를 추가했습니다 .</target>
        </trans-unit>
        <trans-unit id="68d0144cd039daa1b1be92d7cf1dea0c53032a0f" translate="yes" xml:space="preserve">
          <source>ES2015 Implementation</source>
          <target state="translated">ES2015 구현</target>
        </trans-unit>
        <trans-unit id="b19178f11aca1b546e64d713a3f2c44a3f104e12" translate="yes" xml:space="preserve">
          <source>ES2015 behavior for non-object argument</source>
          <target state="translated">객체가 아닌 인수에 대한 ES2015 동작</target>
        </trans-unit>
        <trans-unit id="42186bb00dcd9183c0d58d4df894604281c36fdf" translate="yes" xml:space="preserve">
          <source>ES2015 generators</source>
          <target state="translated">ES2015 발전기</target>
        </trans-unit>
        <trans-unit id="e24794089e374c5bdbf892e899f05f15540c0c2f" translate="yes" xml:space="preserve">
          <source>ES2015 provides &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow function expressions&lt;/a&gt; with even shorter syntax.</source>
          <target state="translated">ES2015는 더 짧은 구문으로 &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;화살표 함수 표현식&lt;/a&gt; 을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="6fb992b2c855d919f4c60931e795d91a96cd5097" translate="yes" xml:space="preserve">
          <source>ES2015 says that if &lt;code&gt;shouldDefineZero&lt;/code&gt; is false, then &lt;code&gt;zero&lt;/code&gt; should never be defined, since the block never executes. However, it's a new part of the standard. Historically, this was left unspecified, and some browsers would define &lt;code&gt;zero&lt;/code&gt; whether the block executed or not.</source>
          <target state="translated">ES2015에 따르면 &lt;code&gt;shouldDefineZero&lt;/code&gt; 가 false이면 블록이 실행되지 않으므로 &lt;code&gt;zero&lt;/code&gt; 을 정의해서는 안됩니다. 그러나 이것은 표준의 새로운 부분입니다. 역사적으로 이것은 지정되지 않은 상태로 유지되었으며 일부 브라우저는 블록 실행 여부를 &lt;code&gt;zero&lt;/code&gt; 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="bee29154ab9fa90818a8d86dfd2b1f59a89e61e4" translate="yes" xml:space="preserve">
          <source>ES2015 version</source>
          <target state="translated">ES2015 버전</target>
        </trans-unit>
        <trans-unit id="4d2108462ce956680d3ccb18eed5060003361838" translate="yes" xml:space="preserve">
          <source>ES2016 behavior</source>
          <target state="translated">ES2016 행동</target>
        </trans-unit>
        <trans-unit id="1212f2500040ec8534cfc3f19859d28a9feb6168" translate="yes" xml:space="preserve">
          <source>ES2018 revision of illegal escape sequences</source>
          <target state="translated">불법 탈출 시퀀스의 ES2018 개정</target>
        </trans-unit>
        <trans-unit id="f5bb6ec1eafb3f8fd1eefdd21b0b2da7b90a64fe" translate="yes" xml:space="preserve">
          <source>ES5 Custom Error Object</source>
          <target state="translated">ES5 사용자 정의 오류 객체</target>
        </trans-unit>
        <trans-unit id="85f9ef4614017840809310753dd782db5979b72d" translate="yes" xml:space="preserve">
          <source>ES5 version</source>
          <target state="translated">ES5 버전</target>
        </trans-unit>
        <trans-unit id="fcde29ed9fdaf87cf2e0a4971e0fe66222320319" translate="yes" xml:space="preserve">
          <source>ES6 Custom Error Class</source>
          <target state="translated">ES6 사용자 정의 오류 클래스</target>
        </trans-unit>
        <trans-unit id="30628f83893b8c0a106c9fd953261e35d79064b3" translate="yes" xml:space="preserve">
          <source>ES6 In Depth: &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">깊이있는 ES6 : &lt;code&gt;let&lt;/code&gt; 과 &lt;code&gt;const&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="605293d0d73b48d8d5336d73fcabe830a4f15d8d" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions can have multiple &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; components.</source>
          <target state="translated">ESNext 이해력은 여러 &lt;code&gt;if&lt;/code&gt; 및 &lt;code&gt;for&lt;/code&gt; 구성 요소를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9965edc936d3809465606f02c7c160e073a441a1" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions create one scope per &quot;for&quot; node instead of the comprehension as a whole.</source>
          <target state="translated">ESNext 이해는 전체 이해 대신 &quot;for&quot;노드 당 하나의 범위를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ea4abbc564d29187e364b7931f8ae1bda7fa121a" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions only work with &lt;code&gt;&lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; and not with &lt;code&gt;&lt;a href=&quot;../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; iterations.</source>
          <target state="translated">ESNext 이해 &lt;code&gt;&lt;a href=&quot;../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 반복에 대한 것이 아니라 &lt;code&gt;&lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 대해서만 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="a1fe1fbcdf4d7b62a39fbe05ec1bf1daf3d1c4a7" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions start with &quot;for&quot; instead of the assignment expression.</source>
          <target state="translated">ESNext 이해는 대입 식 대신 &quot;for&quot;로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="d7c86a71815a34f2fa40ec5092a9660df3a61e40" translate="yes" xml:space="preserve">
          <source>Each argument can also be set or reassigned:</source>
          <target state="translated">각 인수는 다음과 같이 설정하거나 다시 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="90fef6634d1285ee6c9e820b05b924c2802dd22a" translate="yes" xml:space="preserve">
          <source>Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on.</source>
          <target state="translated">첫 번째 피연산자의 각 비트는 두 번째 피연산자의 해당 비트와 쌍을 이룹니다 : 첫 번째 비트에서 첫 번째 비트, 두 번째 비트에서 두 번째 비트 등.</target>
        </trans-unit>
        <trans-unit id="a2c2445e6bf70260fa646b290bfde12ba3769ead" translate="yes" xml:space="preserve">
          <source>Each iteration, the loop increments &lt;code&gt;n&lt;/code&gt; and adds it to &lt;code&gt;x&lt;/code&gt;. Therefore, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; take on the following values:</source>
          <target state="translated">각 반복에서 루프 는 &lt;code&gt;n&lt;/code&gt; 을 증가 시키고 &lt;code&gt;x&lt;/code&gt; 에 추가합니다 . 따라서 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;n&lt;/code&gt; 은 다음 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="13ff20305cbad3a9b28fee7aeb6474d07915a9c2" translate="yes" xml:space="preserve">
          <source>Each of these operators will call the &lt;code&gt;valueOf()&lt;/code&gt; function on each operand before a comparison is made.</source>
          <target state="translated">이러한 각 연산자는 비교하기 전에 각 피연산자 에서 &lt;code&gt;valueOf()&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="a4c510929a1ed4ced78f9a95c04616bd5e204b24" translate="yes" xml:space="preserve">
          <source>Each value is visited once, except in the case when it was deleted and re-added before &lt;code&gt;forEach()&lt;/code&gt; has finished. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is not invoked for values deleted before being visited. New values added before &lt;code&gt;forEach()&lt;/code&gt; has finished will be visited.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 가 완료 되기 전에 삭제되고 다시 추가 된 경우를 제외하고 각 값은 한 번 방문 합니다. 방문하기 전에 삭제 된 값에 대해서는 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 이 호출되지 않습니다. &lt;code&gt;forEach()&lt;/code&gt; 가 완료 되기 전에 추가 된 새 값 이 방문됩니다.</target>
        </trans-unit>
        <trans-unit id="5b64d83b590f0d83ea4cc47b642d4ecb7594f32e" translate="yes" xml:space="preserve">
          <source>Each value is visited once, except in the case when it was deleted and re-added before &lt;code&gt;forEach()&lt;/code&gt; has finished. &lt;code&gt;callback&lt;/code&gt; is not invoked for values deleted before being visited. New values added before &lt;code&gt;forEach()&lt;/code&gt; has finished will be visited.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 가 완료 되기 전에 삭제되고 다시 추가 된 경우를 제외하고 각 값은 한 번 방문 합니다. 방문하기 전에 삭제 된 값에 대해서는 &lt;code&gt;callback&lt;/code&gt; 이 호출되지 않습니다. &lt;code&gt;forEach()&lt;/code&gt; 가 완료 되기 전에 추가 된 새 값 이 방문됩니다.</target>
        </trans-unit>
        <trans-unit id="749f7d55174584e2c169fe33f7a74d97fa981873" translate="yes" xml:space="preserve">
          <source>Each value is visited once, except in the case when it was deleted and re-added before &lt;code&gt;forEach&lt;/code&gt; has finished. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is not invoked for values deleted before being visited. New values added before &lt;code&gt;forEach&lt;/code&gt; has finished will be visited.</source>
          <target state="translated">이전에 삭제하고 다시 추가 한 경우를 제외하고 각 값은 한 번 방문합니다. &lt;code&gt;forEach&lt;/code&gt; 가 완료 합니다. 방문하기 전에 삭제 된 값에 대해서는 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 이 호출되지 않습니다. &lt;code&gt;forEach&lt;/code&gt; 가 완료 되기 전에 추가 된 새로운 값 이 방문됩니다.</target>
        </trans-unit>
        <trans-unit id="3e968edb18e059adb91fdd108f6f75cc7872f8a9" translate="yes" xml:space="preserve">
          <source>Each value is visited once, except in the case when it was deleted and re-added before &lt;code&gt;forEach&lt;/code&gt; has finished. &lt;code&gt;callback&lt;/code&gt; is not invoked for values deleted before being visited. New values added before &lt;code&gt;forEach&lt;/code&gt; has finished will be visited.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; 가 완료 되기 전에 값을 삭제하고 다시 추가 한 경우를 제외하고 각 값은 한 번 방문 합니다. 방문하기 전에 삭제 된 값에 대해서는 &lt;code&gt;callback&lt;/code&gt; 이 호출되지 않습니다. &lt;code&gt;forEach&lt;/code&gt; 가 완료 되기 전에 추가 된 새 값 이 방문됩니다.</target>
        </trans-unit>
        <trans-unit id="21bf8dc0e77b407193bb531a5ea3e66e545655ad" translate="yes" xml:space="preserve">
          <source>Earlier parameters are available to later default parameters</source>
          <target state="translated">이전 매개 변수는 나중에 기본 매개 변수에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45b6e2c2608c97f1c299ccac34ca829676776480" translate="yes" xml:space="preserve">
          <source>Early termination may be accomplished with:</source>
          <target state="translated">조기 종료는 다음을 통해 달성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee9e0d0add9d9d71ab8905d21c6e324abe881ed9" translate="yes" xml:space="preserve">
          <source>Early versions of JavaScript did not allow named function expressions, and for this reason you could not make a recursive function expression.</source>
          <target state="translated">JavaScript의 초기 버전에서는 명명 된 함수 표현식이 허용되지 않았기 때문에 재귀 함수 표현식을 작성할 수 없었습니다.</target>
        </trans-unit>
        <trans-unit id="fedc433fa409cbc9c8c146d865ad7e3e089c12b2" translate="yes" xml:space="preserve">
          <source>Easier way would be using &lt;a href=&quot;from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">더 쉬운 방법은 &lt;a href=&quot;from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="60982772a3b941fa0d0b88783b4e0e2be11132a4" translate="yes" xml:space="preserve">
          <source>Edge 12 included Symbol properties in &lt;code&gt;JSON.stringify()&lt;/code&gt; output.</source>
          <target state="translated">Edge 12에는 &lt;code&gt;JSON.stringify()&lt;/code&gt; 출력 에 Symbol 속성이 포함되었습니다 .</target>
        </trans-unit>
        <trans-unit id="40943d342558e930e5fd4552c5671ad9d18db865" translate="yes" xml:space="preserve">
          <source>Edge Mobile</source>
          <target state="translated">엣지 모바일</target>
        </trans-unit>
        <trans-unit id="afc44b104f02b499cc7c61ae7a78c653927bbf0a" translate="yes" xml:space="preserve">
          <source>Edge mobile</source>
          <target state="translated">엣지 모바일</target>
        </trans-unit>
        <trans-unit id="add94fac827b3ed02fee4c1b72173331645c25b8" translate="yes" xml:space="preserve">
          <source>Edit this page on MDN</source>
          <target state="translated">MDN에서이 페이지 편집</target>
        </trans-unit>
        <trans-unit id="008363165bb78778efcb0dca85b814a955e2e4c9" translate="yes" xml:space="preserve">
          <source>Either the proxy or an object that inherits from the proxy.</source>
          <target state="translated">프록시 또는 프록시에서 상속되는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="e4b38e596f9fec7bf19c0bf4e8aa8e2495f84ef8" translate="yes" xml:space="preserve">
          <source>Element to begin at. The offset is inclusive. The whole array will be included in the new view if this value is not specified.</source>
          <target state="translated">시작할 요소. 오프셋이 포함됩니다. 이 값을 지정하지 않으면 전체 배열이 새보기에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="acb8402192e4fb921e99c5e800b0a74aca0e7536" translate="yes" xml:space="preserve">
          <source>Element to end at. The offset is exclusive. If not specified, all elements from the one specified by &lt;code&gt;begin&lt;/code&gt; to the end of the array are included in the new view.</source>
          <target state="translated">끝나는 요소. 오프셋은 배타적입니다. 지정하지 않으면 배열의 &lt;code&gt;begin&lt;/code&gt; 부터 끝까지 지정된 요소의 모든 요소 가 새보기에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="1f87f18bf82e7dbae16d9eb0650f3aae8bda7358" translate="yes" xml:space="preserve">
          <source>Element to locate in the array.</source>
          <target state="translated">배열에서 찾을 요소입니다.</target>
        </trans-unit>
        <trans-unit id="e425304ea5ec65f451cb0ba16e364adf2093e3f7" translate="yes" xml:space="preserve">
          <source>Element to locate in the typed array.</source>
          <target state="translated">유형이 지정된 배열에서 찾을 요소입니다.</target>
        </trans-unit>
        <trans-unit id="3fcf8d1c329b8253b505b459223fcce2eb650cc6" translate="yes" xml:space="preserve">
          <source>Elements of which to create the array.</source>
          <target state="translated">배열을 생성 할 요소</target>
        </trans-unit>
        <trans-unit id="4edeca08cc5462e94fa2a62326f82d8d7ada8bbb" translate="yes" xml:space="preserve">
          <source>Elements of which to create the typed array.</source>
          <target state="translated">유형이 지정된 배열을 만들 요소입니다.</target>
        </trans-unit>
        <trans-unit id="dbc342a9bf0ad8cdbf200a30f3d2802e631be8d3" translate="yes" xml:space="preserve">
          <source>Elements that are &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt; are still visited.</source>
          <target state="translated">&lt;a href=&quot;../../operators/delete&quot;&gt;삭제 된&lt;/a&gt; 요소 는 계속 방문합니다.</target>
        </trans-unit>
        <trans-unit id="13d5c3e7982745f9cb95d8f9dee316eb9b73ed6c" translate="yes" xml:space="preserve">
          <source>Elements that are &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/delete&quot;&gt;&lt;code&gt;deleted&lt;/code&gt;&lt;/a&gt; are still visited.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/delete&quot;&gt; &lt;code&gt;deleted&lt;/code&gt; &lt;/a&gt; 요소 는 계속 방문합니다.</target>
        </trans-unit>
        <trans-unit id="c11543de9425105d8ed2f048cdc090cff37f88a3" translate="yes" xml:space="preserve">
          <source>Elements that specify the parenthesized substring matches (if included) in the regular expression. The number of possible parenthesized substrings is unlimited.</source>
          <target state="translated">정규식에서 괄호로 묶인 부분 문자열 일치 (포함 된 경우)를 지정하는 요소입니다. 가능한 괄호로 묶인 부분 문자열의 수는 무제한입니다.</target>
        </trans-unit>
        <trans-unit id="a7088954728951df8c608621287119bdfafd903c" translate="yes" xml:space="preserve">
          <source>Elements used to create the array.</source>
          <target state="translated">배열을 만드는 데 사용되는 요소입니다.</target>
        </trans-unit>
        <trans-unit id="4f669dc718477856bed1799983b8c268355453b2" translate="yes" xml:space="preserve">
          <source>Eliminates some JavaScript silent errors by changing them to throw errors.</source>
          <target state="translated">오류를 발생 시키도록 일부 JavaScript 자동 오류를 변경하여 제거합니다.</target>
        </trans-unit>
        <trans-unit id="ad5a6692e816414d2d7c8a2c946ccbd2581e87e5" translate="yes" xml:space="preserve">
          <source>Else if the radix value (coerced if necessary) is not in range [2, 36] (inclusive) &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">기수 값 (필요한 경우 강제 됨)이 범위 [2, 36] (포함)에없는 경우 &lt;code&gt;parseInt&lt;/code&gt; 가 반환합니다. &lt;code&gt;NaN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="3159fe421b3221381b3c778dc1c3c26e4540be37" translate="yes" xml:space="preserve">
          <source>Empty</source>
          <target state="translated">Empty</target>
        </trans-unit>
        <trans-unit id="78efe4a229c5123ace12c505a6ee628609c158b7" translate="yes" xml:space="preserve">
          <source>Empty loop body</source>
          <target state="translated">빈 루프 본문</target>
        </trans-unit>
        <trans-unit id="8b06cc60a0faec1d34759ef80750c8485d2c77d7" translate="yes" xml:space="preserve">
          <source>Empty properties</source>
          <target state="translated">빈 속성</target>
        </trans-unit>
        <trans-unit id="2b24691d5c7080c808dedfcbf53bd3691b21adf9" translate="yes" xml:space="preserve">
          <source>Empty regular expressions and escaping</source>
          <target state="translated">빈 정규 표현식 및 이스케이프</target>
        </trans-unit>
        <trans-unit id="942d27c7af5f5f59f47387fe47c4d03fba2c4861" translate="yes" xml:space="preserve">
          <source>Empty statement</source>
          <target state="translated">빈 문장</target>
        </trans-unit>
        <trans-unit id="7dec06def452bd51a10212bd94b6380e98a3a343" translate="yes" xml:space="preserve">
          <source>Empty statement (&lt;code&gt;;&lt;/code&gt;)</source>
          <target state="translated">빈 문 ( &lt;code&gt;;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="6d2831e2da74f8095acdcfb04916b577e99a28bd" translate="yes" xml:space="preserve">
          <source>Emscripten</source>
          <target state="translated">Emscripten</target>
        </trans-unit>
        <trans-unit id="cc83d313611b2e46ae94b53ce46e3fa4cfe2b908" translate="yes" xml:space="preserve">
          <source>Emulating private members</source>
          <target state="translated">개인 회원 모방</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="baeb70a916acf9a2f5c994ff11c092e038555b3c" translate="yes" xml:space="preserve">
          <source>Encoding a lone high surrogate throws</source>
          <target state="translated">고독한 대리 던지기 인코딩</target>
        </trans-unit>
        <trans-unit id="47dd53cf4cae0c13282d2e27e20535d4ee221439" translate="yes" xml:space="preserve">
          <source>Encoding for Content-Disposition and Link headers</source>
          <target state="translated">Content-Disposition 및 Link 헤더 인코딩</target>
        </trans-unit>
        <trans-unit id="8b1ae4e6e21a5f63030e4e5188fb50a8e982294f" translate="yes" xml:space="preserve">
          <source>Encoding for IPv6</source>
          <target state="translated">IPv6 용 인코딩</target>
        </trans-unit>
        <trans-unit id="c6908437850b0a62847818edf8e745455743b14c" translate="yes" xml:space="preserve">
          <source>Encoding replaces each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character. An &lt;a href=&quot;../global_objects/urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; will be thrown if there is an attempt to encode a surrogate which is not part of a high-low pair, for example:</source>
          <target state="translated">인코딩은 특정 문자의 각 인스턴스를 문자의 UTF-8 인코딩을 나타내는 1, 2, 3 또는 4 개의 이스케이프 시퀀스로 대체합니다. &lt;a href=&quot;../global_objects/urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; 의는&lt;/a&gt; 예를 들어 높은 낮은 쌍 일부가 아닌 대리를 인코딩하기위한 시도가있을 경우 발생합니다 :</target>
        </trans-unit>
        <trans-unit id="32419401c0ce808c607cb1253b25a4474bd69cf4" translate="yes" xml:space="preserve">
          <source>End index, default &lt;code&gt;arr.length&lt;/code&gt;.</source>
          <target state="translated">끝 인덱스, 기본 &lt;code&gt;arr.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de376448a12190aa5365a62c74c46bef27f69f33" translate="yes" xml:space="preserve">
          <source>End index, defaults to &lt;code&gt;this.length&lt;/code&gt;.</source>
          <target state="translated">종료 색인, 기본값은 &lt;code&gt;this.length&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="08e6bb230ace6fe2dec5ddab148376adc14508a8" translate="yes" xml:space="preserve">
          <source>Engines implementing the &lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;well-formed JSON.stringify specfication&lt;/a&gt;, prevent returning ill-formed Unicode strings. Previously, &lt;code&gt;JSON.stringify&lt;/code&gt; would output lone surrogates if the input contained any lone surrogates, which is invalid UTF-8:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;올바르게 구성된 JSON.stringify specfication을&lt;/a&gt; 구현하는 엔진은 잘못된 형식의 유니 코드 문자열이 리턴되지 않도록합니다. 이전에는 &lt;code&gt;JSON.stringify&lt;/code&gt; 는 입력에 고독한 서로 게이트가 포함되어 있으면 고독한 대리자를 출력합니다 (UTF-8이 유효하지 않음).</target>
        </trans-unit>
        <trans-unit id="a0192da27a8b40fc374b05634dd7040bf0051b1c" translate="yes" xml:space="preserve">
          <source>Engines implementing the &lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;well-formed JSON.stringify specification&lt;/a&gt; will stringify lone surrogates, any code point from U+D800 to U+DFFF, using Unicode escape sequences rather than literally. Before this change &lt;code&gt;JSON.stringify&lt;/code&gt; would output lone surrogates if the input contained any lone surrogates; such strings could not be encoded in valid UTF-8 or UTF-16:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;잘 구성된 JSON.stringify 사양을&lt;/a&gt; 구현하는 엔진 은 문자 그대로가 아닌 유니 코드 이스케이프 시퀀스를 사용하여 U + D800에서 U + DFFF까지의 모든 코드 포인트 인 고독한 서로 게이트를 문자열 화합니다. 이 변경 전에 &lt;code&gt;JSON.stringify&lt;/code&gt; 는 입력에 고독한 대리가 포함 된 경우 고독 대리를 출력합니다. 이러한 문자열은 유효한 UTF-8 또는 UTF-16으로 인코딩 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8f749b957315320c5b9c6747e72a054e505d018b" translate="yes" xml:space="preserve">
          <source>Ensure you are importing the module correctly.</source>
          <target state="translated">모듈을 올바르게 가져오고 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="0a6a5a6f3f3e1c1e734d24998bd2ef1cd1b5f596" translate="yes" xml:space="preserve">
          <source>Enumerability and ownership of properties</source>
          <target state="translated">속성의 열거 및 소유권</target>
        </trans-unit>
        <trans-unit id="83df7a7ef8fa21dd3116045758d3e9407ca3149d" translate="yes" xml:space="preserve">
          <source>Enumerable</source>
          <target state="translated">Enumerable</target>
        </trans-unit>
        <trans-unit id="7f6250896c39159050f59ba1d3ff514f1bcce762" translate="yes" xml:space="preserve">
          <source>Enumerable attribute</source>
          <target state="translated">열거 가능한 속성</target>
        </trans-unit>
        <trans-unit id="9b49d0d70a1607c9fad8021e99f66e56a4991075" translate="yes" xml:space="preserve">
          <source>Equal as assign</source>
          <target state="translated">할당과 동일</target>
        </trans-unit>
        <trans-unit id="7a9900d84e1403f9c455cfd34c5bb3f62971e633" translate="yes" xml:space="preserve">
          <source>Equality</source>
          <target state="translated">Equality</target>
        </trans-unit>
        <trans-unit id="71362d979907adc60ba86d3ba17c25f003c8f56e" translate="yes" xml:space="preserve">
          <source>Equality (&lt;code&gt;a == b&lt;/code&gt;)</source>
          <target state="translated">평등 ( &lt;code&gt;a == b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="98b56faa4de659de77668e6fdb0c5048b62368de" translate="yes" xml:space="preserve">
          <source>Equality (==)</source>
          <target state="translated">평등 (==)</target>
        </trans-unit>
        <trans-unit id="dc4db08c00f772e9f4335f656a22b0169bb27868" translate="yes" xml:space="preserve">
          <source>Equality comparisons and sameness</source>
          <target state="translated">평등 비교 및 ​​동일성</target>
        </trans-unit>
        <trans-unit id="b5c034869b40f53ede32b69dcb310e3bc762dc36" translate="yes" xml:space="preserve">
          <source>Equality operator.</source>
          <target state="translated">평등 연산자.</target>
        </trans-unit>
        <trans-unit id="2a6aa35f8013684cff4ad26bb51395662e2921e2" translate="yes" xml:space="preserve">
          <source>Equality operators</source>
          <target state="translated">평등 연산자</target>
        </trans-unit>
        <trans-unit id="d89759b49addc473526624ebc89a42f2cd513170" translate="yes" xml:space="preserve">
          <source>Equivalent C type</source>
          <target state="translated">동등한 C 타입</target>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">오류 처리</target>
        </trans-unit>
        <trans-unit id="5da25ad570031cfc548ccf057713182fe2696bf6" translate="yes" xml:space="preserve">
          <source>Error Type</source>
          <target state="translated">오류 유형</target>
        </trans-unit>
        <trans-unit id="32311e30ab1fda529fa41564dc2917ee8c384012" translate="yes" xml:space="preserve">
          <source>Error description. Similar to &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">오류 설명. &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt; 와 유사 합니다 .</target>
        </trans-unit>
        <trans-unit id="882278ab4950cb9a4a1bc7b234091508ed44599c" translate="yes" xml:space="preserve">
          <source>Error description. Similar to &lt;a href=&quot;message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">오류 설명. &lt;a href=&quot;message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt; 와 유사 합니다 .</target>
        </trans-unit>
        <trans-unit id="ab66d40e43b787a9c62eb89b8c9d17b70a673d0d" translate="yes" xml:space="preserve">
          <source>Error instances</source>
          <target state="translated">오류 인스턴스</target>
        </trans-unit>
        <trans-unit id="93d7060cbfdc591a151db80cdf2519fe1a5363b9" translate="yes" xml:space="preserve">
          <source>Error message.</source>
          <target state="translated">에러 메시지.</target>
        </trans-unit>
        <trans-unit id="0723a3ada609dfca6e0b37961e51de874e64718b" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="e4c6cc4021c6b080a59bcaba117acf526da546dc" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="b75bd3b3dd9a49caba86743b4d47adbb43287e92" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="f7bea9550b074c1b4351cfb1950e0a7218577d08" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="6de471ad3ee173335365de7cf65af3098aeb08fc" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="eadff62eab5e661a68d0bbd5bbe23f56947a074c" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="c15c5727b4c88032cfd24648376397a6596b4029" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;../urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공해야한다고 지정하지만 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="a600c05632bc0fa5b1bf31e8f001f908404a8225" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="cc83699010f2697e2d3c6ccc27497708896537fc" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="5da0af4c7ec3a3542fddcaa142b9cff263b97517" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="a0551692c93834e9bdacb8df76af1525d5a3baa1" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="73668cb889f5c262a078fc53c3d032d7e1a36271" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="c8cc003dc5baa2ae36be3f3293fea9db2346c057" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에러 메시지. ECMA-262는 &lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt; 가 자체 &lt;code&gt;message&lt;/code&gt; 속성을 제공하도록 지정하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 에서는 &lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; 를&lt;/a&gt; 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="135a3e61de2bbd9c2bb5be2be57b4679f9cffd6b" translate="yes" xml:space="preserve">
          <source>Error name.</source>
          <target state="translated">오류 이름</target>
        </trans-unit>
        <trans-unit id="a4fb55bc74c7ea262716160fb8ddb3f98f3699d8" translate="yes" xml:space="preserve">
          <source>Error name. Inherited from &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">오류 이름 &lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 에서 상속되었습니다 .</target>
        </trans-unit>
        <trans-unit id="275aa09b2bc13bc23fb908aa783d6c9afd78a221" translate="yes" xml:space="preserve">
          <source>Error name. Inherited from &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">오류 이름 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 에서 상속되었습니다 .</target>
        </trans-unit>
        <trans-unit id="79273058d33f8067d58ee34f9e91e49d8799fc7e" translate="yes" xml:space="preserve">
          <source>Error number.</source>
          <target state="translated">오류 번호</target>
        </trans-unit>
        <trans-unit id="5f577c8bef8739558c43df8e8796bc8e5a825a61" translate="yes" xml:space="preserve">
          <source>Error objects</source>
          <target state="translated">오류 객체</target>
        </trans-unit>
        <trans-unit id="8ea045e280d8c28c9b5e6d95b6e882549507bbcd" translate="yes" xml:space="preserve">
          <source>Error type</source>
          <target state="translated">오류 유형</target>
        </trans-unit>
        <trans-unit id="8cae073c631a5c97ab8f95806233fa6d82faa290" translate="yes" xml:space="preserve">
          <source>Error type that is thrown whenever WebAssembly specifies a &lt;a href=&quot;http://webassembly.org/docs/semantics/#traps&quot;&gt;trap&lt;/a&gt;.</source>
          <target state="translated">WebAssembly가 &lt;a href=&quot;http://webassembly.org/docs/semantics/#traps&quot;&gt;트랩을&lt;/a&gt; 지정할 때마다 발생하는 오류 유형 .</target>
        </trans-unit>
        <trans-unit id="791a69f19a69a95d78745770545e8504ba8e369a" translate="yes" xml:space="preserve">
          <source>Error types</source>
          <target state="translated">오류 유형</target>
        </trans-unit>
        <trans-unit id="1d8bbcf33ba405b5f77d43f69b84de9111b514f4" translate="yes" xml:space="preserve">
          <source>Error.prototype</source>
          <target state="translated">Error.prototype</target>
        </trans-unit>
        <trans-unit id="18318b3c97276147519a683c71090a2f5b7059cb" translate="yes" xml:space="preserve">
          <source>Error: Permission denied to access property &quot;x&quot;</source>
          <target state="translated">오류 : &quot;x&quot;속성에 대한 액세스 권한이 거부되었습니다</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="4db7eca5c7a9917e762143fbbd7a62c91fbf6448" translate="yes" xml:space="preserve">
          <source>Errors about undeclared variable assignments occur in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt; only. In non-strict code, they are silently ignored.</source>
          <target state="translated">선언되지 않은 변수 할당에 대한 오류는 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드 코드&lt;/a&gt; 에서만 발생 합니다. 엄격하지 않은 코드에서는 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4dcd9d9083dbae3e558b8e7b5727cc6dd3026e08" translate="yes" xml:space="preserve">
          <source>Errors displayed in the Web console may include a link to the corresponding page below to help you quickly comprehend the problem in your code.</source>
          <target state="translated">웹 콘솔에 표시되는 오류에는 코드의 문제를 신속하게 이해하는 데 도움이되는 아래의 해당 페이지에 대한 링크가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0aeebd45aef869ba5e27890ea53004a2f442d8b" translate="yes" xml:space="preserve">
          <source>Errors thrown</source>
          <target state="translated">발생 된 오류</target>
        </trans-unit>
        <trans-unit id="3b2b5bd7079ac0554d62c9d1d8e70228a3ff1f7c" translate="yes" xml:space="preserve">
          <source>Errors: Already has pragma</source>
          <target state="translated">오류 : 이미 pragma가 있습니다</target>
        </trans-unit>
        <trans-unit id="8dd7e892cb81de4b6894c20a1e864c04c59e501f" translate="yes" xml:space="preserve">
          <source>Errors: Array sort argument</source>
          <target state="translated">오류 : 배열 정렬 인수</target>
        </trans-unit>
        <trans-unit id="352ee08916a7f706a4b99a44d7b2a801535c99e6" translate="yes" xml:space="preserve">
          <source>Errors: Bad octal</source>
          <target state="translated">오류 : 나쁜 8 진</target>
        </trans-unit>
        <trans-unit id="c82d315999f12151cb3bbbf40d74958365d0cdca" translate="yes" xml:space="preserve">
          <source>Errors: Bad radix</source>
          <target state="translated">오류 : 기수 불량</target>
        </trans-unit>
        <trans-unit id="bab6d129b3965a3b234aaf0731671983d443ba34" translate="yes" xml:space="preserve">
          <source>Errors: Bad regexp flag</source>
          <target state="translated">오류 : 잘못된 regexp 플래그</target>
        </trans-unit>
        <trans-unit id="a924e5d71cfa3facbaf269cdd9ca304e4a69b1f0" translate="yes" xml:space="preserve">
          <source>Errors: Bad return or yield</source>
          <target state="translated">오류 : 불량 반품 또는 수율</target>
        </trans-unit>
        <trans-unit id="a967564448e536cb4676271fdc49a5417cd39b14" translate="yes" xml:space="preserve">
          <source>Errors: Called on incompatible type</source>
          <target state="translated">오류 : 호환되지 않는 유형에서 호출</target>
        </trans-unit>
        <trans-unit id="38147040f226bcfc35f0f948e9f1ebcb8c8239f9" translate="yes" xml:space="preserve">
          <source>Errors: Cant access lexical declaration before init</source>
          <target state="translated">오류 : init 이전의 어휘 선언에 액세스 할 수 없음</target>
        </trans-unit>
        <trans-unit id="1d17ec91c09d7cf983d488735d71ca4d3dcb4a02" translate="yes" xml:space="preserve">
          <source>Errors: Cant access property</source>
          <target state="translated">오류 : 캔트 액세스 속성</target>
        </trans-unit>
        <trans-unit id="8fba88ecf30616b471c1a7b69853ec50c3baa76d" translate="yes" xml:space="preserve">
          <source>Errors: Cant define property object not extensible</source>
          <target state="translated">오류 : 캔트 정의 특성 오브젝트를 확장 할 수 없음</target>
        </trans-unit>
        <trans-unit id="b1b3de2016e6e218fed8372d24b8959caabffe25" translate="yes" xml:space="preserve">
          <source>Errors: Cant delete</source>
          <target state="translated">오류 : 캔트 삭제</target>
        </trans-unit>
        <trans-unit id="da7df18e62d81c1b83bf513798ca02b4054ad8d9" translate="yes" xml:space="preserve">
          <source>Errors: Cant redefine property</source>
          <target state="translated">오류 : 캔트 재정의</target>
        </trans-unit>
        <trans-unit id="9e83028ec26fc64dd2712ed06688c1c6cd2c75c4" translate="yes" xml:space="preserve">
          <source>Errors: Cyclic object value</source>
          <target state="translated">오류 : 순환 객체 값</target>
        </trans-unit>
        <trans-unit id="43ad51f7e26e811eaf7c5b9a34a92dcafe2deca5" translate="yes" xml:space="preserve">
          <source>Errors: Dead object</source>
          <target state="translated">오류 : 죽은 개체</target>
        </trans-unit>
        <trans-unit id="c3d2a18b6d0545e068335e31fbf94a02e98e7712" translate="yes" xml:space="preserve">
          <source>Errors: Delete in strict mode</source>
          <target state="translated">오류 : 엄격 모드에서 삭제</target>
        </trans-unit>
        <trans-unit id="b8d7d2f9099102c43481100835038e2190a5abe5" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated String generics</source>
          <target state="translated">오류 : 더 이상 사용되지 않는 문자열 제네릭</target>
        </trans-unit>
        <trans-unit id="be7396c46d09202770db4d277b642e4d393a60ce" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated caller or arguments usage</source>
          <target state="translated">오류 : 더 이상 사용되지 않는 호출자 또는 인수 사용법</target>
        </trans-unit>
        <trans-unit id="c0b93123cce76bb2386be590aa64ddbd88296c01" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated expression closures</source>
          <target state="translated">오류 : 더 이상 사용되지 않는 표현식 클로저</target>
        </trans-unit>
        <trans-unit id="13f293adaf92361b577a264fefcf84b419105ac4" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated octal</source>
          <target state="translated">오류 : 더 이상 사용되지 않는 8 진</target>
        </trans-unit>
        <trans-unit id="07e8c7ae109c22ef9c4d33e0f81d5688ede2fe8a" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated source map pragma</source>
          <target state="translated">오류 : 더 이상 사용되지 않는 소스 맵 pragma</target>
        </trans-unit>
        <trans-unit id="ed7a5a08a3a3eb4466a75097a5fcfab4cb0bd6c2" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated toLocaleFormat</source>
          <target state="translated">오류 : 더 이상 사용되지 않는 LocaleFormat</target>
        </trans-unit>
        <trans-unit id="10a3595cbcf8de8758c23e623a2ea8604884326c" translate="yes" xml:space="preserve">
          <source>Errors: Equal as assign</source>
          <target state="translated">오류 : 할당과 동일</target>
        </trans-unit>
        <trans-unit id="94ce4265de80952855df9a0737dcaa3a7fe89f85" translate="yes" xml:space="preserve">
          <source>Errors: For-each-in loops are deprecated</source>
          <target state="translated">오류 : For-each-in 루프는 더 이상 사용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="6f2391fd0f24d7e2a6bbad2155842637cb9560be" translate="yes" xml:space="preserve">
          <source>Errors: Getter only</source>
          <target state="translated">오류 : 게터 만</target>
        </trans-unit>
        <trans-unit id="a4018e9494a60acaf2a6d79f0a42b17939fa9cae" translate="yes" xml:space="preserve">
          <source>Errors: Identifier after number</source>
          <target state="translated">오류 : 숫자 뒤에 식별자</target>
        </trans-unit>
        <trans-unit id="09607ffaa1e42677d295cb3d2118135ca3780723" translate="yes" xml:space="preserve">
          <source>Errors: Illegal character</source>
          <target state="translated">오류 : 불법 문자</target>
        </trans-unit>
        <trans-unit id="4260b0719e659d5aafb5cc60590d1a0ebe928843" translate="yes" xml:space="preserve">
          <source>Errors: Invalid array length</source>
          <target state="translated">오류 : 유효하지 않은 배열 길이</target>
        </trans-unit>
        <trans-unit id="8dc23f11124b41445ae1860151f5f6f4f0c098d1" translate="yes" xml:space="preserve">
          <source>Errors: Invalid assignment left-hand side</source>
          <target state="translated">오류 : 잘못된 할당 왼쪽</target>
        </trans-unit>
        <trans-unit id="41bd742f3b588608e547c5de15519c28a07a053d" translate="yes" xml:space="preserve">
          <source>Errors: Invalid const assignment</source>
          <target state="translated">오류 : 유효하지 않은 const 할당</target>
        </trans-unit>
        <trans-unit id="09e0d3004f116466dc1e29cf856fa83630f3482e" translate="yes" xml:space="preserve">
          <source>Errors: Invalid date</source>
          <target state="translated">오류 : 유효하지 않은 날짜</target>
        </trans-unit>
        <trans-unit id="9bca24ca2fed1d96762735562d814ec0bfa861f9" translate="yes" xml:space="preserve">
          <source>Errors: Invalid for-in initializer</source>
          <target state="translated">오류 : 잘못된 초기화 프로그램</target>
        </trans-unit>
        <trans-unit id="b9fbd4c50f44dd361494c113ef2fede40ea2538c" translate="yes" xml:space="preserve">
          <source>Errors: Invalid for-of initializer</source>
          <target state="translated">오류 : 잘못된 초기화 프로그램</target>
        </trans-unit>
        <trans-unit id="5efcff2ea024b4062bd794e9616fbbbc1ba0280d" translate="yes" xml:space="preserve">
          <source>Errors: JSON bad parse</source>
          <target state="translated">오류 : JSON 잘못된 구문 분석</target>
        </trans-unit>
        <trans-unit id="02a12b1ad44a38a628a993c2697638031a9d9127" translate="yes" xml:space="preserve">
          <source>Errors: Malformed URI</source>
          <target state="translated">오류 : 잘못된 URI</target>
        </trans-unit>
        <trans-unit id="f36f27cd04200e137ab075f007038d3770524f46" translate="yes" xml:space="preserve">
          <source>Errors: Malformed formal parameter</source>
          <target state="translated">오류 : 잘못된 형식 매개 변수</target>
        </trans-unit>
        <trans-unit id="6e3cfab42d0b6474a1327b97813d1eef55e939d6" translate="yes" xml:space="preserve">
          <source>Errors: Missing bracket after list</source>
          <target state="translated">오류 : 목록 뒤에 괄호가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f0f7f1ea490cf0f7a3f9b1e982653a6038ff96bb" translate="yes" xml:space="preserve">
          <source>Errors: Missing colon after property id</source>
          <target state="translated">오류 : 속성 ID 뒤에 콜론 누락</target>
        </trans-unit>
        <trans-unit id="c9a0aa796797661ecf1cba64ed842a32af03dbcc" translate="yes" xml:space="preserve">
          <source>Errors: Missing curly after function body</source>
          <target state="translated">오류 : 함수 본문 다음에 곱슬 머리 누락</target>
        </trans-unit>
        <trans-unit id="55aea59258979ead636d948b8d52f086170ba80c" translate="yes" xml:space="preserve">
          <source>Errors: Missing curly after property list</source>
          <target state="translated">오류 : 속성 목록 뒤에 곱슬이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d942fe3513297e1c7820a942c4cc8fc23e9d0274" translate="yes" xml:space="preserve">
          <source>Errors: Missing formal parameter</source>
          <target state="translated">오류 : 공식 매개 변수 누락</target>
        </trans-unit>
        <trans-unit id="d18ac5484216e16730653f291b5b2f443a67007d" translate="yes" xml:space="preserve">
          <source>Errors: Missing initializer in const</source>
          <target state="translated">오류 : const에서 초기화 프로그램이 누락되었습니다.</target>
        </trans-unit>
        <trans-unit id="197d55ef59577929cad5d6376fff53cc538ea2da" translate="yes" xml:space="preserve">
          <source>Errors: Missing name after dot operator</source>
          <target state="translated">오류 : 도트 연산자 뒤에 이름이 없습니다.</target>
        </trans-unit>
        <trans-unit id="af9553ff72e3e49e09130a11396020d732e68887" translate="yes" xml:space="preserve">
          <source>Errors: Missing parenthesis after argument list</source>
          <target state="translated">오류 : 인수 목록 뒤에 괄호가 없습니다</target>
        </trans-unit>
        <trans-unit id="ef2e83ba64f717ffdd586359a48a04c1133ecfd9" translate="yes" xml:space="preserve">
          <source>Errors: Missing parenthesis after condition</source>
          <target state="translated">오류 : 조건 후 괄호 누락</target>
        </trans-unit>
        <trans-unit id="723bb5456ca90f92354a8d7bc46d7999b8465f9a" translate="yes" xml:space="preserve">
          <source>Errors: Missing semicolon before statement</source>
          <target state="translated">오류 : 명령문 앞에 세미콜론이 없습니다.</target>
        </trans-unit>
        <trans-unit id="54ad9cd1eb80c216fb4be88acf39104b14ba11de" translate="yes" xml:space="preserve">
          <source>Errors: More arguments needed</source>
          <target state="translated">오류 : 더 많은 인수가 필요합니다</target>
        </trans-unit>
        <trans-unit id="e4ab555dce80dab9a1d2c08fc72edc9e295f9330" translate="yes" xml:space="preserve">
          <source>Errors: Negative repetition count</source>
          <target state="translated">오류 : 음의 반복 횟수</target>
        </trans-unit>
        <trans-unit id="7d3721063573df07d41d902bf150bae76356cbcb" translate="yes" xml:space="preserve">
          <source>Errors: No non-null object</source>
          <target state="translated">오류 : 널이 아닌 오브젝트 없음</target>
        </trans-unit>
        <trans-unit id="865a7f8f4a964d2b8dba16fdd62ca28085c7b069" translate="yes" xml:space="preserve">
          <source>Errors: No properties</source>
          <target state="translated">오류 : 속성 없음</target>
        </trans-unit>
        <trans-unit id="5a4af7cb628f98d88531f89b07e9613fc531f3d6" translate="yes" xml:space="preserve">
          <source>Errors: No variable name</source>
          <target state="translated">오류 : 변수 이름 없음</target>
        </trans-unit>
        <trans-unit id="01f47511f37b5c2cab0ffae3977d63557d1f07ce" translate="yes" xml:space="preserve">
          <source>Errors: Non configurable array element</source>
          <target state="translated">오류 : 구성 할 수없는 배열 요소</target>
        </trans-unit>
        <trans-unit id="7d97377314874c0e2b4c161b04a2e02188392543" translate="yes" xml:space="preserve">
          <source>Errors: Not a codepoint</source>
          <target state="translated">오류 : 코드 포인트가 아님</target>
        </trans-unit>
        <trans-unit id="18b71c635f26729510093b45d7ba8c0d9cfe8f86" translate="yes" xml:space="preserve">
          <source>Errors: Not a constructor</source>
          <target state="translated">오류 : 생성자가 아님</target>
        </trans-unit>
        <trans-unit id="1807c63c40225996463390a67c1107301996cecd" translate="yes" xml:space="preserve">
          <source>Errors: Not a function</source>
          <target state="translated">오류 : 기능이 아님</target>
        </trans-unit>
        <trans-unit id="df583a0032a705cbf07f39560b1be5d2e522e145" translate="yes" xml:space="preserve">
          <source>Errors: Not defined</source>
          <target state="translated">오류 : 정의되지 않음</target>
        </trans-unit>
        <trans-unit id="850b3c1318990348afa7485c8e84bbc24088739f" translate="yes" xml:space="preserve">
          <source>Errors: Precision range</source>
          <target state="translated">오류 : 정밀 범위</target>
        </trans-unit>
        <trans-unit id="0ad541e2ca59c434fb84fad273af1ec5cf1380eb" translate="yes" xml:space="preserve">
          <source>Errors: Property access denied</source>
          <target state="translated">오류 : 속성 액세스 거부</target>
        </trans-unit>
        <trans-unit id="b9d85b0f31e5ac0d8bcd26d038de2f927d1962b4" translate="yes" xml:space="preserve">
          <source>Errors: Read-only</source>
          <target state="translated">오류 : 읽기 전용</target>
        </trans-unit>
        <trans-unit id="0b0933a70e1f0cc36a342a702fac3de417649fec" translate="yes" xml:space="preserve">
          <source>Errors: Redeclared parameter</source>
          <target state="translated">오류 : 매개 변수 재 선언</target>
        </trans-unit>
        <trans-unit id="791fa694a5b25c86cf4af00f885cbc3b9fa535f1" translate="yes" xml:space="preserve">
          <source>Errors: Reduce of empty array with no initial value</source>
          <target state="translated">오류 : 초기 값없이 빈 배열 감소</target>
        </trans-unit>
        <trans-unit id="84e9a716eba40d72473ee0b4b978ec33a70fab2b" translate="yes" xml:space="preserve">
          <source>Errors: Reserved identifier</source>
          <target state="translated">오류 : 예약 식별자</target>
        </trans-unit>
        <trans-unit id="255b375f86ab31e5bdd941152881b816f3bffdcd" translate="yes" xml:space="preserve">
          <source>Errors: Resulting string too large</source>
          <target state="translated">오류 : 결과 문자열이 너무 큼</target>
        </trans-unit>
        <trans-unit id="eb140b3f8d93e82c0e940c59df8e9c6aa42a3cff" translate="yes" xml:space="preserve">
          <source>Errors: Stmt after return</source>
          <target state="translated">오류 : 반환 후 Stmt</target>
        </trans-unit>
        <trans-unit id="475feff930f4eac1749e7004777854fc1d75adb9" translate="yes" xml:space="preserve">
          <source>Errors: Strict Non Simple Params</source>
          <target state="translated">오류 : 엄격한 비 간단 매개 변수</target>
        </trans-unit>
        <trans-unit id="02cf343eae0a237e207a41e1f46212ff6d985b14" translate="yes" xml:space="preserve">
          <source>Errors: Too much recursion</source>
          <target state="translated">오류 : 너무 많은 재귀</target>
        </trans-unit>
        <trans-unit id="15c10369ec385ff8bbc27a9edb32cb6e9fd0d35b" translate="yes" xml:space="preserve">
          <source>Errors: Typed array invalid arguments</source>
          <target state="translated">오류 : 입력 한 배열 유효하지 않은 인수</target>
        </trans-unit>
        <trans-unit id="d04fe42d4ea52f842650123be2d83444d39ea461" translate="yes" xml:space="preserve">
          <source>Errors: Undeclared var</source>
          <target state="translated">오류 : 선언되지 않은 var</target>
        </trans-unit>
        <trans-unit id="f6319b6c1706c0e54a4137f4e3da02cbe325e462" translate="yes" xml:space="preserve">
          <source>Errors: Undefined prop</source>
          <target state="translated">오류 : 정의되지 않은 소품</target>
        </trans-unit>
        <trans-unit id="8949d938da3922fbe4f602b02e9af1a800a8e027" translate="yes" xml:space="preserve">
          <source>Errors: Unexpected token</source>
          <target state="translated">오류 : 예기치 않은 토큰</target>
        </trans-unit>
        <trans-unit id="259d0fbcd47abe2d4520c2c796874574de06feb2" translate="yes" xml:space="preserve">
          <source>Errors: Unexpected type</source>
          <target state="translated">오류 : 예기치 않은 유형</target>
        </trans-unit>
        <trans-unit id="e02adf217f0d3e0bd942ea5726d08df68419d07a" translate="yes" xml:space="preserve">
          <source>Errors: Unnamed function statement</source>
          <target state="translated">오류 : 이름이없는 함수 명령문</target>
        </trans-unit>
        <trans-unit id="131c182d6290c1b4ec9f3f031f5e482bd739af37" translate="yes" xml:space="preserve">
          <source>Errors: Unterminated string literal</source>
          <target state="translated">오류 : 종료되지 않은 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="7bb906ebfd794bbe515da4b53d1f4c6e2751b3ff" translate="yes" xml:space="preserve">
          <source>Errors: Var hides argument</source>
          <target state="translated">오류 : Var은 인수를 숨 깁니다</target>
        </trans-unit>
        <trans-unit id="f76bf9d24aa458e29292c5d323e9909b289f7e5f" translate="yes" xml:space="preserve">
          <source>Errors: in operator no object</source>
          <target state="translated">오류 : 연산자에서 개체 없음</target>
        </trans-unit>
        <trans-unit id="bc7859be9d1081aa5153e7411a415bee20afa739" translate="yes" xml:space="preserve">
          <source>Errors: invalid right hand side instanceof operand</source>
          <target state="translated">오류 : 피연산자의 잘못된 오른쪽 인스턴스</target>
        </trans-unit>
        <trans-unit id="59419d70e04beb57aeb1b313429871b8c786db40" translate="yes" xml:space="preserve">
          <source>Errors: is not iterable</source>
          <target state="translated">오류 : 반복 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="288e9e074adac987d562d2b357137fa4c58378eb" translate="yes" xml:space="preserve">
          <source>Escape notation</source>
          <target state="translated">탈출 표기법</target>
        </trans-unit>
        <trans-unit id="0db72e172d24bd8ce3e4907133558b491951978e" translate="yes" xml:space="preserve">
          <source>Escape sequence</source>
          <target state="translated">탈출 순서</target>
        </trans-unit>
        <trans-unit id="bf7fb4efc8e300ba9c57d5146ecaab144ececb80" translate="yes" xml:space="preserve">
          <source>Escape sequences allowed in tagged template literals</source>
          <target state="translated">태그가 지정된 템플릿 리터럴에서 허용되는 이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="75abb1c73bbc05d1116b39c290363013448c26fe" translate="yes" xml:space="preserve">
          <source>Euler's constant and the base of natural logarithms, approximately 2.718.</source>
          <target state="translated">오일러의 상수와 자연 로그의 기초, 약 2.718</target>
        </trans-unit>
        <trans-unit id="d10b8941c4381f1021d57c8427cb7f8781f11fb6" translate="yes" xml:space="preserve">
          <source>Euler's constant and the base of natural logarithms; approximately &lt;code&gt;2.718&lt;/code&gt;.</source>
          <target state="translated">오일러 상수 및 자연 로그의 밑; 약 &lt;code&gt;2.718&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfd2a1c097181f5e294de23293bba96e87ebd8c0" translate="yes" xml:space="preserve">
          <source>EvalError</source>
          <target state="translated">EvalError</target>
        </trans-unit>
        <trans-unit id="c82151df8aa8ffd53f4c7c3adeab5bf787c8c006" translate="yes" xml:space="preserve">
          <source>EvalError instances</source>
          <target state="translated">EvalError 인스턴스</target>
        </trans-unit>
        <trans-unit id="6fa30b29960ec8ea70f1e8f6d40186139a86c0f7" translate="yes" xml:space="preserve">
          <source>EvalError.prototype</source>
          <target state="translated">EvalError.prototype</target>
        </trans-unit>
        <trans-unit id="c36ff9398efc01b04e4d0f34d966eb17595e83c4" translate="yes" xml:space="preserve">
          <source>Evaluated at call time</source>
          <target state="translated">통화 시간에 평가</target>
        </trans-unit>
        <trans-unit id="9a33d91cba8210a61815be383769a3188e4afae6" translate="yes" xml:space="preserve">
          <source>Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.</source>
          <target state="translated">표현식의 값을 case 절과 일치시키는 표현식을 평가하고 해당 케이스와 연관된 명령문을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="974086a8daaea90fc8fb074858e38fdfecd28f34" translate="yes" xml:space="preserve">
          <source>Even strings may be used as input; to achieve the filter and map actions (under Array-like objects) above:</source>
          <target state="translated">문자열조차도 입력으로 사용될 수 있습니다. 위의 배열과 같은 객체 아래에서 필터 및 맵 작업을 수행하려면</target>
        </trans-unit>
        <trans-unit id="0363c5af4f1684401bc99ff28d665cc13e01573a" translate="yes" xml:space="preserve">
          <source>Even though older Opera versions don't support &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; yet, Opera supports the non-standard &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt; property since Opera 10.50.</source>
          <target state="translated">이전 Opera 버전은 &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; 아직 지원하지 않지만 Opera 10.50부터 비표준 &lt;a href=&quot;proto&quot;&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;/a&gt; 속성을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="ada9a62bff902273af1992bea678f54c04e457ab" translate="yes" xml:space="preserve">
          <source>Even though the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators can be used with operands that are not Boolean values, they can still be considered Boolean operators since their return values can always be converted to Boolean values.</source>
          <target state="translated">비록 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 와 &lt;code&gt;||&lt;/code&gt; 부울 값이 아닌 피연산자와 함께 연산자를 사용할 수 있으며 반환 값을 항상 부울 값으로 변환 할 수 있으므로 부울 연산자로 간주 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a2474eaa661b7cd3c27c48fde88a3027610361e" translate="yes" xml:space="preserve">
          <source>Every JavaScript function is actually a &lt;code&gt;Function&lt;/code&gt; object. This can be seen with the code &lt;code&gt;(function(){}).constructor === Function&lt;/code&gt; which returns true.</source>
          <target state="translated">모든 JavaScript 함수는 실제로 &lt;code&gt;Function&lt;/code&gt; 객체입니다. 이것은 코드 &lt;code&gt;(function(){}).constructor === Function&lt;/code&gt; true를 반환 하여 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="22732ba86b67ab4bff492459b506e2c6b150fc36" translate="yes" xml:space="preserve">
          <source>Every JavaScript function is actually a &lt;code&gt;Function&lt;/code&gt; object. This can be seen with the code &lt;code&gt;(function(){}).constructor === Function&lt;/code&gt;, which returns true.</source>
          <target state="translated">모든 JavaScript 함수는 실제로 &lt;code&gt;Function&lt;/code&gt; 객체입니다. 이는 true를 반환 하는 코드 &lt;code&gt;(function(){}).constructor === Function&lt;/code&gt; 에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e0a8e77b4ee1840bb063aeb135c8b4676d988a4" translate="yes" xml:space="preserve">
          <source>Every function in JavaScript is a &lt;code&gt;Function&lt;/code&gt; object. See &lt;a href=&quot;global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; for information on properties and methods of &lt;code&gt;Function&lt;/code&gt; objects.</source>
          <target state="translated">JavaScript의 모든 함수는 &lt;code&gt;Function&lt;/code&gt; 객체입니다. &lt;code&gt;Function&lt;/code&gt; 객체 의 속성 및 메서드에 대한 내용 은 &lt;a href=&quot;global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c56700ea968195a5a9d16c57d30355f44dfc38c" translate="yes" xml:space="preserve">
          <source>Every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; inherits the &lt;code&gt;hasOwnProperty&lt;/code&gt; method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, this method does not check down the object's prototype chain.</source>
          <target state="translated">후손 모든 개체 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 상속 &lt;code&gt;hasOwnProperty&lt;/code&gt; 의 방법을. 이 메소드는 객체에 지정된 속성이 해당 객체의 직접 속성으로 있는지 여부를 확인하는 데 사용할 수 있습니다. &lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자 와 달리이 방법은 객체의 프로토 타입 체인을 검사하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f40889b6c0cc900f9d46901255cc5334d14b30b3" translate="yes" xml:space="preserve">
          <source>Every object has a &lt;code&gt;propertyIsEnumerable&lt;/code&gt; method. This method can determine whether the specified property in an object can be enumerated by a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">모든 객체에는 &lt;code&gt;propertyIsEnumerable&lt;/code&gt; 메소드가 있습니다. 이 메소드는 프로토 타입 체인을 통해 상속 된 특성을 제외 하고 &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 루프 로 오브젝트의 지정된 특성을 열거 할 수 있는지 여부를 판별 할 수 있습니다 . 객체에 지정된 속성이 없으면이 메서드는 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="059515a700d8be405c55ee46e7b5d37a89e8cfef" translate="yes" xml:space="preserve">
          <source>Every object has a &lt;code&gt;toString()&lt;/code&gt; method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the &lt;code&gt;toString()&lt;/code&gt; method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;. If this method is not overridden in a custom object, &lt;code&gt;toString()&lt;/code&gt; returns &quot;&lt;code&gt;[object &lt;var&gt;type&lt;/var&gt;]&lt;/code&gt;&quot;, where &lt;code&gt;&lt;var&gt;type&lt;/var&gt;&lt;/code&gt; is the object type. The following code illustrates this:</source>
          <target state="translated">모든 객체에는 객체가 텍스트 값으로 표시되거나 문자열이 예상되는 방식으로 참조 될 때 자동으로 호출 되는 &lt;code&gt;toString()&lt;/code&gt; 메서드가 있습니다. 기본적으로 &lt;code&gt;toString()&lt;/code&gt; 메서드는 &lt;code&gt;Object&lt;/code&gt; 의 자손 인 모든 객체에 상속됩니다 . 이 메서드가 사용자 정의 객체에서 재정의되지 않으면 &lt;code&gt;toString()&lt;/code&gt; 은 &quot; &lt;code&gt;[object &lt;var&gt;type&lt;/var&gt;]&lt;/code&gt; &quot;을 반환 합니다. 여기서 &lt;code&gt;&lt;var&gt;type&lt;/var&gt;&lt;/code&gt; 은 객체 유형입니다. 다음 코드는이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9ee05ce8b14dd8b93ed62d53c6fae35fee2934ac" translate="yes" xml:space="preserve">
          <source>Every object has a &lt;code&gt;toString()&lt;/code&gt; method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the &lt;code&gt;toString()&lt;/code&gt; method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;. If this method is not overridden in a custom object, &lt;code&gt;toString()&lt;/code&gt; returns &quot;[object &lt;em&gt;type&lt;/em&gt;]&quot;, where &lt;code&gt;&lt;em&gt;type&lt;/em&gt;&lt;/code&gt; is the object type. The following code illustrates this:</source>
          <target state="translated">모든 객체에는 객체가 텍스트 값으로 표시되거나 문자열이 예상되는 방식으로 객체가 참조 될 때 자동으로 호출 되는 &lt;code&gt;toString()&lt;/code&gt; 메서드가 있습니다. 기본적으로 &lt;code&gt;toString()&lt;/code&gt; 메소드는 &lt;code&gt;Object&lt;/code&gt; 의 하위 오브젝트로 상속됩니다 . 이 메소드가 사용자 정의 오브젝트에서 대체되지 않으면 &lt;code&gt;toString()&lt;/code&gt; 은 &quot;[object &lt;em&gt;type&lt;/em&gt; ]&quot;을 리턴 합니다. 여기서 &lt;code&gt;&lt;em&gt;type&lt;/em&gt;&lt;/code&gt; 은 오브젝트 유형입니다. 다음 코드는이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7dce79ae7d813bf824ea4fe59f92fbd870361bb8" translate="yes" xml:space="preserve">
          <source>Every object will inherit &lt;code&gt;objCustom&lt;/code&gt; property and every object that is an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; will inherit &lt;code&gt;arrCustom&lt;/code&gt; property because of adding those properties to &lt;a href=&quot;../global_objects/object/prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. The object &lt;code&gt;iterable&lt;/code&gt; inherits properties &lt;code&gt;objCustom&lt;/code&gt; and &lt;code&gt;arrCustom&lt;/code&gt; because of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">모든 객체는 &lt;code&gt;objCustom&lt;/code&gt; 속성 을 상속 하고 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; 인&lt;/a&gt; 모든 객체는 해당 속성을 &lt;a href=&quot;../global_objects/object/prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../global_objects/array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt; 에 추가하기 때문에 &lt;code&gt;arrCustom&lt;/code&gt; 속성 을 상속 합니다. &lt;code&gt;iterable&lt;/code&gt; 객체 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;상속 및 프로토 타입 체인으로&lt;/a&gt; 인해 &lt;code&gt;objCustom&lt;/code&gt; 및 &lt;code&gt;arrCustom&lt;/code&gt; 속성 을 상속합니다 .</target>
        </trans-unit>
        <trans-unit id="9db61bfe9d72556bf8f53441f578c8b44eeb3f12" translate="yes" xml:space="preserve">
          <source>Every object will inherit the &lt;code&gt;objCustom&lt;/code&gt; property and every object that is an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; will inherit the &lt;code&gt;arrCustom&lt;/code&gt; property since these properties have been added to &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;, respectively. The object &lt;code&gt;iterable&lt;/code&gt; inherits the properties &lt;code&gt;objCustom&lt;/code&gt; and &lt;code&gt;arrCustom&lt;/code&gt; because of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">모든 객체는 &lt;code&gt;objCustom&lt;/code&gt; 속성 을 상속하고 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; 인&lt;/a&gt; 모든 객체는 이러한 속성이 &lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt; 에 각각 추가 &lt;code&gt;arrCustom&lt;/code&gt; 속성 을 상속합니다 . &lt;code&gt;iterable&lt;/code&gt; 객체 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;상속 및 프로토 타입 체인으로&lt;/a&gt; 인해 &lt;code&gt;objCustom&lt;/code&gt; 및 &lt;code&gt;arrCustom&lt;/code&gt; 속성을 상속합니다 .</target>
        </trans-unit>
        <trans-unit id="c46e3a55ca8ade0ed7849050d72708177e8ecdfd" translate="yes" xml:space="preserve">
          <source>Every symbol value returned from &lt;code&gt;Symbol()&lt;/code&gt; is unique. A symbol value may be used as an identifier for object properties; this is the data type's only purpose. Some further explanation about purpose and usage can be found in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;glossary entry for Symbol&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 에서 반환 된 모든 심볼 값 은 고유합니다. 심볼 값은 객체 속성의 식별자로 사용될 수 있습니다. 이것이 데이터 유형의 유일한 목적입니다. 목적 및 사용법에 대한 추가 설명은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;Symbol 용어집 항목&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="798bcd87540d1ddb90c0f410fa1ef7cb60f09c71" translate="yes" xml:space="preserve">
          <source>Every symbol value returned from &lt;code&gt;Symbol()&lt;/code&gt; is unique. A symbol value may be used as an identifier for object properties; this is the data type's primary purpose, although other use-cases exist, such as enabling opaque data types, or serving as an implementation-supported unique identifier in general. Some further explanation about purpose and usage can be found in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;glossary entry for Symbol&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 에서 반환 된 모든 기호 값 은 고유합니다. 객체 속성의 식별자로 심볼 값을 사용할 수 있습니다. 불투명 데이터 유형을 활성화하거나 일반적으로 구현에서 지원되는 고유 식별자 역할을하는 것과 같은 다른 사용 사례가 존재하지만 이것이 데이터 유형의 주요 목적입니다. 목적 및 사용에 대한 추가 설명은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;Symbol&lt;/a&gt; 의 용어집 항목 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="a374c2dbd4e1ac574cac1ee15dc3b91506d49eda" translate="yes" xml:space="preserve">
          <source>Example &lt;var&gt;replacer&lt;/var&gt;, as a function</source>
          <target state="translated">함수로서의 &lt;var&gt;replacer&lt;/var&gt; 예제</target>
        </trans-unit>
        <trans-unit id="bafa2dab89bc4dccad242be9dfb9c017aa1dc9f8" translate="yes" xml:space="preserve">
          <source>Example &lt;var&gt;replacer&lt;/var&gt;, as an array</source>
          <target state="translated">배열 인 &lt;var&gt;replacer&lt;/var&gt; 예제</target>
        </trans-unit>
        <trans-unit id="422445b132a0ddb86add309db860ce13ab867af6" translate="yes" xml:space="preserve">
          <source>Example Code</source>
          <target state="translated">예제 코드</target>
        </trans-unit>
        <trans-unit id="fb903849014d52641a3ffc7db73f43574d560760" translate="yes" xml:space="preserve">
          <source>Example JSON</source>
          <target state="translated">JSON 예</target>
        </trans-unit>
        <trans-unit id="32f213aa4f0ea9e9398d23fcce147266f0c86ee2" translate="yes" xml:space="preserve">
          <source>Example of using &lt;code&gt;JSON.stringify()&lt;/code&gt; with &lt;code&gt;localStorage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localStorage&lt;/code&gt; 와 함께 &lt;code&gt;JSON.stringify()&lt;/code&gt; 를 사용하는 예</target>
        </trans-unit>
        <trans-unit id="68ffd6870dc52aa36ddf10bb22d0a25ab5ef0d38" translate="yes" xml:space="preserve">
          <source>Example of using JSON.stringify() with localStorage</source>
          <target state="translated">localStorage와 함께 JSON.stringify ()를 사용하는 예</target>
        </trans-unit>
        <trans-unit id="e69566779cd1dd44a49537131dbb7f8ddc6066e9" translate="yes" xml:space="preserve">
          <source>Example replacer, as a function</source>
          <target state="translated">함수로서의 대체자 예</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">사용법 예 :</target>
        </trans-unit>
        <trans-unit id="c2ed1938621114d5c7134aa1303eb87270e9556e" translate="yes" xml:space="preserve">
          <source>Example with diverse situations</source>
          <target state="translated">다양한 상황의 예</target>
        </trans-unit>
        <trans-unit id="fc8c01410a17dc95f19aad8ef81162093e5c7c67" translate="yes" xml:space="preserve">
          <source>Example with yield*</source>
          <target state="translated">수율이있는 예 *</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="c5f36059a65056444f92027e3a107484e5c3d4a3" translate="yes" xml:space="preserve">
          <source>Examples of correct behavior:</source>
          <target state="translated">올바른 행동의 예 :</target>
        </trans-unit>
        <trans-unit id="7431bcad988714e6fec0d7af7fd0453b288120a0" translate="yes" xml:space="preserve">
          <source>Examples of expressions that can be converted to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;false&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;false&lt;/a&gt; 로 변환 할 수있는 표현식의 예 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5085e9cffcff50e78151198e39d1a6ade980c6cf" translate="yes" xml:space="preserve">
          <source>Examples using the iteration protocols</source>
          <target state="translated">반복 프로토콜을 사용하는 예</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="a145277353fc42785db4d1fd58fae1ba37e5b3a5" translate="yes" xml:space="preserve">
          <source>Exceptions will interrupt the ongoing copying task</source>
          <target state="translated">예외는 진행중인 복사 작업을 중단시킵니다.</target>
        </trans-unit>
        <trans-unit id="6c9018ae3043c702753ed63c89a0f4dfcd9fa192" translate="yes" xml:space="preserve">
          <source>Executes a search for a match in its string parameter.</source>
          <target state="translated">문자열 매개 변수에서 일치하는 검색을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="a6f201fddd38c3438dc16b0c68100cb5b75bc1f3" translate="yes" xml:space="preserve">
          <source>Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.</source>
          <target state="translated">지정된 조건이 true 인 경우 명령문을 실행합니다. 조건이 거짓이면 다른 명령문을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf501fe4746a0e0f9382f56ed40175026c863168" translate="yes" xml:space="preserve">
          <source>Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a &lt;code&gt;this&lt;/code&gt; value and a list containing the arguments passed to the function by a call expression.</source>
          <target state="translated">이 개체와 관련된 코드를 실행합니다. 함수 호출 표현식을 통해 호출됩니다. 내부 메서드에 대한 인수는 &lt;code&gt;this&lt;/code&gt; 값과 호출 식에 의해 함수에 전달 된 인수를 포함하는 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e25f2f2d66e365cd2db8e2b9291d3e52cffba918" translate="yes" xml:space="preserve">
          <source>Executes the search for a match between a regular expression and a specified string.</source>
          <target state="translated">정규식과 지정된 문자열이 일치하도록 검색을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="38419b404788bcf5fd9019711c7433aa41eebd1d" translate="yes" xml:space="preserve">
          <source>Executing the above function without the &lt;code&gt;void&lt;/code&gt; keyword will result in an &lt;strong&gt;Uncaught SyntaxError&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 키워드 없이 위의 함수를 실행하면 &lt;strong&gt;Uncaught SyntaxError가 발생&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="b687c26f5ce46495b20b486f34459c9b7beed83c" translate="yes" xml:space="preserve">
          <source>Existing properties in objects frozen with &lt;a href=&quot;freeze&quot;&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt; are made immutable. Objects sealed with &lt;code&gt;Object.seal()&lt;/code&gt; can have their existing properties changed.</source>
          <target state="translated">&lt;a href=&quot;freeze&quot;&gt; &lt;code&gt;Object.freeze()&lt;/code&gt; &lt;/a&gt; 로 고정 된 객체의 기존 속성 은 변경할 수 없습니다. &lt;code&gt;Object.seal()&lt;/code&gt; 봉인 된 객체 는 기존 속성을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34533450ac1f4cb8a131c86d48accad539bed843" translate="yes" xml:space="preserve">
          <source>Exponential</source>
          <target state="translated">Exponential</target>
        </trans-unit>
        <trans-unit id="d165ee97f26b031b938fc12621899c47ca3e7175" translate="yes" xml:space="preserve">
          <source>Exponentiation</source>
          <target state="translated">Exponentiation</target>
        </trans-unit>
        <trans-unit id="cb4e0aa1acc069da2bfcaf4ad0b0b148c6d99e82" translate="yes" xml:space="preserve">
          <source>Exponentiation (**)</source>
          <target state="translated">지수 (**)</target>
        </trans-unit>
        <trans-unit id="4ce1e1b52f6bd1af104e523df31584b44ac04ecf" translate="yes" xml:space="preserve">
          <source>Exponentiation (&lt;code&gt;**&lt;/code&gt;)</source>
          <target state="translated">지수 ( &lt;code&gt;**&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="de0433c71ffaa7b9e55995e55af2210d618cf05b" translate="yes" xml:space="preserve">
          <source>Exponentiation assignment</source>
          <target state="translated">지수 할당</target>
        </trans-unit>
        <trans-unit id="f170aec10bac78f0ad0443256a34b162228825a6" translate="yes" xml:space="preserve">
          <source>Exponentiation assignment (&lt;code&gt;x **= y&lt;/code&gt;)</source>
          <target state="translated">지수 할당 ( &lt;code&gt;x **= y&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="4598c7b8a329040314a386875a5d7a22807da510" translate="yes" xml:space="preserve">
          <source>Exponentiation operator</source>
          <target state="translated">지수 연산자</target>
        </trans-unit>
        <trans-unit id="d53d5d4319e68fd43449b36bcd501e342e38cc1b" translate="yes" xml:space="preserve">
          <source>Exponentiation operator.</source>
          <target state="translated">지수 연산자.</target>
        </trans-unit>
        <trans-unit id="3c32226b7077e03be4f4c20383b6de84210c3cce" translate="yes" xml:space="preserve">
          <source>Exported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The export statement cannot be used in embedded scripts.</source>
          <target state="translated">내 보낸 모듈은 선언 여부에 관계없이 &lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict mode&lt;/code&gt; &lt;/a&gt; 입니다. 내장 된 스크립트에서는 내보내기 문을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="2677c7f49f809545a5401bb4b94e3e88f59fb6bc" translate="yes" xml:space="preserve">
          <source>Exported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; whether you declare them as such or not. The export statement cannot be used in embedded scripts.</source>
          <target state="translated">내 보낸 모듈은 선언 여부에 관계없이 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드에&lt;/a&gt; 있습니다. 내보내기 문은 포함 된 스크립트에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8c05ac4c4f75d588f9d0744fb608804a04253db1" translate="yes" xml:space="preserve">
          <source>Expression closures</source>
          <target state="translated">식 클로저</target>
        </trans-unit>
        <trans-unit id="2d0696153dd2fb58b4e351fc1c4fedb61daed2ba" translate="yes" xml:space="preserve">
          <source>Expression closures can also be found with getter and setter, like this:</source>
          <target state="translated">다음과 같이 getter 및 setter를 사용하여 표현식 클로저를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="581a7a95b4e312c821cdf7a863b5c199c2d3c33c" translate="yes" xml:space="preserve">
          <source>Expression closures omit curly braces or return statements from function declarations or from method definitions in objects.</source>
          <target state="translated">표현식 클로저는 중괄호를 생략하거나 함수의 선언 또는 객체의 메서드 정의에서 명령문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fa16152754c1f4658d7ae3ca9f9623621e4a316c" translate="yes" xml:space="preserve">
          <source>Expression expected</source>
          <target state="translated">표현 예상</target>
        </trans-unit>
        <trans-unit id="7dff6c99287ca9df1ed3e9bb493350ccf3e23d7f" translate="yes" xml:space="preserve">
          <source>Expression interpolation</source>
          <target state="translated">식 보간</target>
        </trans-unit>
        <trans-unit id="2b5114c8925fb54156ac1f2a96e3e3efaabcda19" translate="yes" xml:space="preserve">
          <source>Expression statement</source>
          <target state="translated">표현 문</target>
        </trans-unit>
        <trans-unit id="185116746a776538580388835627883dc105b866" translate="yes" xml:space="preserve">
          <source>Expressions and operators</source>
          <target state="translated">식과 연산자</target>
        </trans-unit>
        <trans-unit id="f2a7081fd365d6e3bba8a240ffe6f818bab9cf08" translate="yes" xml:space="preserve">
          <source>Expressions with values of any type.</source>
          <target state="translated">모든 유형의 값이있는 표현식.</target>
        </trans-unit>
        <trans-unit id="8fe87e42cb5c52af14065a5aa3d0a913ff11e6c4" translate="yes" xml:space="preserve">
          <source>Extending &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 연장</target>
        </trans-unit>
        <trans-unit id="a460597693640f31a8e009214a2742ebf0ebd8a8" translate="yes" xml:space="preserve">
          <source>Extending constructor</source>
          <target state="translated">생성자 확장</target>
        </trans-unit>
        <trans-unit id="14831e5f4bdf4799f1493cdad25d550a2bc5c8b2" translate="yes" xml:space="preserve">
          <source>Extending from &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; works like with a normal class, except that the prototype object does not inherit from &lt;a href=&quot;../global_objects/object/prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">프로토 타입 객체가 &lt;a href=&quot;../global_objects/object/prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; 을&lt;/a&gt; 상속하지 않는다는 점을 제외하고 &lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 에서 확장 하는 것은 일반 클래스와 마찬가지로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="451b62a75fcf61f8ce703d7d9a0414c926ed8849" translate="yes" xml:space="preserve">
          <source>Extending the &lt;code&gt;Math&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Math&lt;/code&gt; 객체 확장</target>
        </trans-unit>
        <trans-unit id="2794af9f9e739cf27a26b3cff6032ebe65e775f7" translate="yes" xml:space="preserve">
          <source>Extends the scope chain for a statement.</source>
          <target state="translated">명령문의 범위 체인을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="55cbe18000bc3995734c638d5fff67be25bb8d2c" translate="yes" xml:space="preserve">
          <source>Extracting sub-domain name from URL</source>
          <target state="translated">URL에서 하위 도메인 이름 추출</target>
        </trans-unit>
        <trans-unit id="889e35c91beeadf592fd1ba3654f0cc858ffb920" translate="yes" xml:space="preserve">
          <source>Extracts a section of a string and returns a new string.</source>
          <target state="translated">문자열의 섹션을 추출하여 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="df4b0c79746a06eb98d7408844aa41898aef8947" translate="yes" xml:space="preserve">
          <source>Extracts a section of an array and returns a new array.</source>
          <target state="translated">배열의 섹션을 추출하여 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="db20b3f83ce4a09595255f23025cbf85910b5380" translate="yes" xml:space="preserve">
          <source>Extracts a section of an array and returns a new array. See also &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 섹션을 추출하여 새 배열을 반환합니다. &lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0821e2567464bf6b8a613fc22f3b8976305b6ac4" translate="yes" xml:space="preserve">
          <source>Extracts a section of an array and returns a new array. See also &lt;a href=&quot;array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 섹션을 추출하여 새 배열을 반환합니다. &lt;a href=&quot;array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d51bd65def7d49eefe081667d0350f7c713ed5bb" translate="yes" xml:space="preserve">
          <source>Extracts a section of the calling array and returns a new array.</source>
          <target state="translated">호출 배열의 섹션을 추출하고 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f288167cd8a86d379b8230e12c5595015bcaea3a" translate="yes" xml:space="preserve">
          <source>Fall-back to implementation-specific date formats</source>
          <target state="translated">구현 별 날짜 형식으로 대체</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="7b717fd6982b71bdce3578ef5ddfad4343e09f5f" translate="yes" xml:space="preserve">
          <source>Features of comparisons:</source>
          <target state="translated">비교의 특징 :</target>
        </trans-unit>
        <trans-unit id="7aeec736a846ee67fe0ca583dedc36bf36ae5012" translate="yes" xml:space="preserve">
          <source>Field declarations</source>
          <target state="translated">필드 선언</target>
        </trans-unit>
        <trans-unit id="f08ab394a08fab914fec4dcbe3d645010ddc09f8" translate="yes" xml:space="preserve">
          <source>Field name</source>
          <target state="translated">분야 명</target>
        </trans-unit>
        <trans-unit id="9ae0e3dd3acd9ddcea2077b275750a4318ea4457" translate="yes" xml:space="preserve">
          <source>Fields and public/private class properties proposal (stage 3)</source>
          <target state="translated">현장 및 공공 / 민간 부동산 속성 제안 (3 단계)</target>
        </trans-unit>
        <trans-unit id="007e19d07edc411fe1c45dc85daa2867631904e5" translate="yes" xml:space="preserve">
          <source>Fifth, strict mode requires that function parameter names be unique. In normal code the last duplicated argument hides previous identically-named arguments. Those previous arguments remain available through &lt;code&gt;arguments[i]&lt;/code&gt;, so they're not completely inaccessible. Still, this hiding makes little sense and is probably undesirable (it might hide a typo, for example), so in strict mode duplicate argument names are a syntax error:</source>
          <target state="translated">다섯째, 엄격 모드에서는 함수 매개 변수 이름이 고유해야합니다. 일반 코드에서 마지막으로 복제 된 인수는 이름이 같은 이전 인수를 숨 깁니다. 이전의 인수는 &lt;code&gt;arguments[i]&lt;/code&gt; 통해 사용할 수 있으므로 완전히 액세스 할 수 없습니다. 그럼에도 불구하고,이 숨기는 것은 의미가 없으며 아마도 바람직하지 않을 것입니다 (예를 들어 오타를 숨길 수 있습니다). 엄격 모드에서 중복 인수 이름은 구문 오류입니다.</target>
        </trans-unit>
        <trans-unit id="666530553fb96c3d3f109d33bd5edf92e7a691be" translate="yes" xml:space="preserve">
          <source>Fills all the elements of an array from a start index to an end index with a static value.</source>
          <target state="translated">배열의 모든 요소를 ​​시작 색인에서 종료 색인으로 정적 값으로 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="a75dc31a95b4aef25c62308ffa41873cdd738b6c" translate="yes" xml:space="preserve">
          <source>Fills all the elements of an array from a start index to an end index with a static value. See also &lt;a href=&quot;../array/fill&quot;&gt;&lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 모든 요소를 ​​시작 색인에서 종료 색인으로 정적 값으로 채 웁니다. &lt;a href=&quot;../array/fill&quot;&gt; &lt;code&gt;Array.prototype.fill()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a88e2cbf4276d97cdcd6785e30735a92976ef5ce" translate="yes" xml:space="preserve">
          <source>Fills all the elements of an array from a start index to an end index with a static value. See also &lt;a href=&quot;array/fill&quot;&gt;&lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 모든 요소를 ​​시작 색인에서 종료 색인으로 정적 값으로 채 웁니다. &lt;a href=&quot;array/fill&quot;&gt; &lt;code&gt;Array.prototype.fill()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6860113c7c642332fc3a3e6ee6e30d1c1a272f7" translate="yes" xml:space="preserve">
          <source>Filtering invalid entries from JSON</source>
          <target state="translated">JSON에서 유효하지 않은 항목 필터링</target>
        </trans-unit>
        <trans-unit id="ee122d421f92b5a541bb734a1884e2423de65f5b" translate="yes" xml:space="preserve">
          <source>Filtering out all small values</source>
          <target state="translated">모든 작은 값 필터링</target>
        </trans-unit>
        <trans-unit id="1cf2ac565bca4aae2d61b8d2f04600693a8f2e35" translate="yes" xml:space="preserve">
          <source>Filtering typed array elements using arrow functions</source>
          <target state="translated">화살표 함수를 사용하여 유형이 지정된 배열 요소 필터링</target>
        </trans-unit>
        <trans-unit id="8eff77368816ca8f6830d079e8160e3aaf2d243b" translate="yes" xml:space="preserve">
          <source>Finally, an extension using the letter &lt;code&gt;&quot;x&quot;&lt;/code&gt; may appear, followed by one or one- to eight-letter or digit tags. This extension allows applications to encode information for their own private use, that will be ignored by all &lt;code&gt;Intl&lt;/code&gt; operations.</source>
          <target state="translated">마지막으로 문자 &lt;code&gt;&quot;x&quot;&lt;/code&gt; 를 사용하는 확장자 가 나타날 수 있으며 그 뒤에 하나 또는 1-8 자 또는 숫자 태그가 올 수 있습니다. 이 확장을 통해 응용 프로그램은 모든 &lt;code&gt;Intl&lt;/code&gt; 작업에서 무시되는 개인 용도로 정보를 인코딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f0e76bf51b873113068f8f593d2933136ea08b3" translate="yes" xml:space="preserve">
          <source>Finally, the flags can all be flipped with the NOT operator:</source>
          <target state="translated">마지막으로 NOT 연산자를 사용하여 플래그를 뒤집을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="628605832bc367bee6262e25c4437200962e153f" translate="yes" xml:space="preserve">
          <source>Finally, the following encodes &lt;code&gt;-314,&lt;/code&gt; i.e. the two's complement of &lt;code&gt;314&lt;/code&gt;:</source>
          <target state="translated">마지막으로, 다음은 &lt;code&gt;-314,&lt;/code&gt; 즉 2의 보수 &lt;code&gt;314&lt;/code&gt; 를 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="a246a9ac2cfd54b3eddd6fb83323484dc6ff1963" translate="yes" xml:space="preserve">
          <source>Finally, we load and instantiate a wasm module (table2.wasm) using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt;, log the table length, and invoke the two referenced functions that are now stored in the table (the table2.wasm module (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/text-format-examples/table2.was&quot;&gt;text representation&lt;/a&gt;) adds two function references to the table, both of which print out a simple value):</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; )을 사용하여 wasm 모듈 (table2.wasm)을로드 및 인스턴스화 하고 테이블 길이를 기록한 후 테이블에 저장된 두 개의 참조 된 함수 (table2.wasm 모듈)를 호출합니다 ( &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/text-format-examples/table2.was&quot;&gt;텍스트 표현&lt;/a&gt; 참조). )는 테이블에 두 개의 함수 참조를 추가하며 둘 다 간단한 값을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="7e9117458065674a0eecb3d57bba0c408743ab31" translate="yes" xml:space="preserve">
          <source>Finally, we load and instantiate a wasm module (table2.wasm) using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method. The table2.wasm module contains two functions (one that returns 42 and another that returns 83) and stores both into elements 0 and 1 of the imported table (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat&quot;&gt;text representation&lt;/a&gt;). So after instantiation, the table still has length 2, but the elements now contain callable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly Functions&lt;/a&gt; which we can call from JS.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 wasm 모듈 (table2.wasm)을로드하고 인스턴스화합니다 . table2.wasm 모듈에는 두 개의 함수 (하나는 42를 리턴하고 다른 하나는 83을 리턴)를 포함하며 가져온 테이블의 요소 0과 1에 모두 저장합니다 ( &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat&quot;&gt;텍스트 표현&lt;/a&gt; 참조 ). 따라서 인스턴스화 후에도 테이블의 길이는 2이지만 요소는 이제 호출 가능한 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly Functions&lt;/a&gt; 를 포함 하며 JS에서 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31e89790ed067f15fc779bdf78553256ba3aab23" translate="yes" xml:space="preserve">
          <source>Finally, we load and instantiate a wasm module (table2.wasm) using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method. The table2.wasm module contains two functions (one that returns 42 and another that returns 83) and stores both into elements 0 and 1 of the imported table (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat&quot;&gt;text representation&lt;/a&gt;). So after instantiation, the table still has length 2, but the elements now contain callable &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly Functions&lt;/a&gt; which we can call from JS.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 wasm 모듈 (table2.wasm)을로드하고 인스턴스화합니다 . table2.wasm 모듈에는 두 개의 함수 (하나는 42를 반환하고 다른 하나는 83을 반환)가 포함되어 있으며 가져온 테이블의 요소 0과 1에 모두 저장합니다 ( &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat&quot;&gt;텍스트 표현&lt;/a&gt; 참조 ). 따라서 인스턴스화 후에도 테이블의 길이는 2이지만 요소에는 이제 JS에서 호출 할 수 있는 호출 가능한 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly 함수&lt;/a&gt; 가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="58226a61a67596d98ffaf70454df59f83e7ced23" translate="yes" xml:space="preserve">
          <source>Find a prime number in a typed array</source>
          <target state="translated">유형이 지정된 배열에서 소수를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="8f37072c3608cc003b157f71c30a248c4c6a51d0" translate="yes" xml:space="preserve">
          <source>Find a prime number in an array</source>
          <target state="translated">배열에서 소수를 찾습니다</target>
        </trans-unit>
        <trans-unit id="1b1978142bbdd3875f8fe42c54102e8b12f9c15d" translate="yes" xml:space="preserve">
          <source>Find all prime numbers in an array</source>
          <target state="translated">배열에서 모든 소수 찾기</target>
        </trans-unit>
        <trans-unit id="d1e19d6ab5daafbde74e561a3b1d7b21263755a6" translate="yes" xml:space="preserve">
          <source>Find an object in an array by one of its properties</source>
          <target state="translated">속성 중 하나를 사용하여 배열에서 객체 찾기</target>
        </trans-unit>
        <trans-unit id="f1cd6ffa1b3c8ec0dd4e6be716a92ec8f1f9f551" translate="yes" xml:space="preserve">
          <source>Find index using arrow function</source>
          <target state="translated">화살표 기능을 사용하여 색인 찾기</target>
        </trans-unit>
        <trans-unit id="649e3d1f411a5e5672ada99d3cf70186333f3b9a" translate="yes" xml:space="preserve">
          <source>Find the index of a prime number in a typed array</source>
          <target state="translated">유형이 지정된 배열에서 소수의 인덱스 찾기</target>
        </trans-unit>
        <trans-unit id="0ef588b9c44899f7675e9204a55cffc17d81dd89" translate="yes" xml:space="preserve">
          <source>Find the index of a prime number in an array</source>
          <target state="translated">배열에서 소수의 인덱스 찾기</target>
        </trans-unit>
        <trans-unit id="3369b31757a96f3618528e5e64fc701055fe1935" translate="yes" xml:space="preserve">
          <source>Finding all the occurrences of an element</source>
          <target state="translated">요소의 모든 항목 찾기</target>
        </trans-unit>
        <trans-unit id="8d83f670084be5d612b46adf91f8088c24bb7e21" translate="yes" xml:space="preserve">
          <source>Finding an array item object by its property</source>
          <target state="translated">속성별로 배열 항목 객체 찾기</target>
        </trans-unit>
        <trans-unit id="92acdda72f8e36c379793e467f70c0ae3a1224ea" translate="yes" xml:space="preserve">
          <source>Finding if an element exists in the array or not and updating the array</source>
          <target state="translated">배열에 요소가 있는지 확인하고 배열 업데이트</target>
        </trans-unit>
        <trans-unit id="7e1007aaa70de53e880a3535d978eaf43256864e" translate="yes" xml:space="preserve">
          <source>Finding successive matches</source>
          <target state="translated">연속적인 경기 찾기</target>
        </trans-unit>
        <trans-unit id="bb3bc4ab22c6f54427b5ca14af39756cc239a13b" translate="yes" xml:space="preserve">
          <source>Finding symbol properties on objects</source>
          <target state="translated">객체에서 심볼 속성 찾기</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="b9e5aaa5ef8341eacc819710d9436cfc5853e41c" translate="yes" xml:space="preserve">
          <source>Firefox (SpiderMonkey)</source>
          <target state="translated">Firefox (스파이더 몽키)</target>
        </trans-unit>
        <trans-unit id="4d1521feafccc55ae3eb0b7fe412c31a18c24f85" translate="yes" xml:space="preserve">
          <source>Firefox (SpiderMonkey) also implemented an earlier version of generators in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7&quot;&gt;JavaScript 1.7&lt;/a&gt;, where the star (*) in the function declaration was not necessary (you just use the &lt;code&gt;yield&lt;/code&gt; keyword in the function body). However, legacy generators support has been removed since Firefox 58 (released on January 23, 2018) (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083482&quot;&gt;bug 1083482&lt;/a&gt;).</source>
          <target state="translated">Firefox (SpiderMonkey)는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7&quot;&gt;JavaScript 1.7&lt;/a&gt; 에서 이전 버전의 생성기를 구현 했으며, 함수 선언의 별표 (*)가 필요하지 않았습니다 ( 함수 본문에서 &lt;code&gt;yield&lt;/code&gt; 키워드 만 사용함 ). 그러나 레거시 생성기 지원은 Firefox 58 (2018 년 1 월 23 일 릴리스) ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083482&quot;&gt;버그 1083482&lt;/a&gt; ) 이후 제거되었습니다 .</target>
        </trans-unit>
        <trans-unit id="79564b98bb5b81c590c23d2688cdc61c3e394cea" translate="yes" xml:space="preserve">
          <source>Firefox 4 through 22 will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; on any attempt whatsoever (whether permitted or not) to redefine the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of an array.</source>
          <target state="translated">Firefox 4에서 22 까지는 (허용 여부에 관계없이) 배열 의 &lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성 을 재정의하려는 시도 에서 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 를 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="6a5d9ecf354d6740bdcdb7f53a41cac2ba32a87f" translate="yes" xml:space="preserve">
          <source>Firefox 49 (Firefox 49 / Thunderbird 49 / SeaMonkey 2.46) changed the parsing of 2-digit years to be aligned with the Google Chrome browser instead of Internet Explorer. Now, 2-digit years that are less than &lt;code&gt;50&lt;/code&gt; are parsed as 21st century years. For example, &lt;code&gt;04/16/17&lt;/code&gt;, previously parsed as April 16, 1917, will be April 16, 2017 now. To avoid any interoperability issues or ambiguous years, it is recommended to use the ISO 8601 format like &quot;2017-04-16&quot; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1265136&quot;&gt;bug 1265136&lt;/a&gt;).</source>
          <target state="translated">Firefox 49 (Firefox 49 / Thunderbird 49 / SeaMonkey 2.46)는 Internet Explorer 대신 Google Chrome 브라우저와 일치하도록 2 자리 연도 구문 분석을 변경했습니다. 이제 &lt;code&gt;50&lt;/code&gt; 보다 작은 2 자리 연도는 21 세기 연도로 구문 분석됩니다. 예를 들어, 이전에 1917 년 4 월 16 &lt;code&gt;04/16/17&lt;/code&gt; 구문 분석 된 04/16/17 은 이제 2017 년 4 월 16 일입니다. 상호 운용성 문제 또는 모호한 연도를 피하려면 &quot;2017-04-16&quot;( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1265136&quot;&gt;버그 1265136&lt;/a&gt; ) 과 같은 ISO 8601 형식을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="efe418dc93c59a541ee601a5ab303072e2c80ea9" translate="yes" xml:space="preserve">
          <source>Firefox 49 changed the parsing of 2-digit years to be aligned with the Google Chrome browser instead of Internet Explorer. Now, 2-digit years that are less than &lt;code&gt;50&lt;/code&gt; are parsed as 21&lt;sup&gt;st&lt;/sup&gt; century years. For example, &lt;code&gt;04/16/17&lt;/code&gt;, previously parsed as April 16, 1917, will be April 16, 2017 now. To avoid any interoperability issues or ambiguous years, it is recommended to use the ISO 8601 format like &quot;&lt;code&gt;2017-04-16&lt;/code&gt;&quot; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1265136&quot;&gt;bug 1265136&lt;/a&gt;).</source>
          <target state="translated">Firefox 49는 Internet Explorer 대신 Google Chrome 브라우저에 맞춰 2 자리 연도의 구문 분석을 변경했습니다. 이제 덜보다 2 자리 연도 &lt;code&gt;50&lt;/code&gt; 21로 구문 분석 &lt;sup&gt;번째&lt;/sup&gt; 세기의 년. 예를 들어 이전에 1917 년 4 월 16 &lt;code&gt;04/16/17&lt;/code&gt; 파싱 ​​된 04/16/17 은 현재 2017 년 4 월 16 일이됩니다. 상호 운용성 문제 나 모호한 연도를 피하려면 &quot; &lt;code&gt;2017-04-16&lt;/code&gt; &quot;( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1265136&quot;&gt;bug 1265136)&lt;/a&gt; 과 같은 ISO 8601 형식을 사용하는 것이 좋습니다. ) .</target>
        </trans-unit>
        <trans-unit id="db908b00f13b43b864c634abccfc04620ec44717" translate="yes" xml:space="preserve">
          <source>Firefox 54 adds support of &lt;code&gt;let&lt;/code&gt; in workers.</source>
          <target state="translated">Firefox 54는 작업자 에게 &lt;code&gt;let&lt;/code&gt; 지원을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a45270edbc762154a6f271f3eb4960596f0ef424" translate="yes" xml:space="preserve">
          <source>Firefox &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1222552&quot;&gt;bug 1222552&lt;/a&gt; tracks the removal of String generic methods.</source>
          <target state="translated">Firefox &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1222552&quot;&gt;버그 1222552&lt;/a&gt; 는 문자열 일반 메소드 제거를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="35e08ebaf6a034e084ac621e4a8de400a08ba9e7" translate="yes" xml:space="preserve">
          <source>Firefox for Android</source>
          <target state="translated">안드로이드 용 Firefox</target>
        </trans-unit>
        <trans-unit id="74f9047b6c6fa8c499975106dfc6e802ca444bdf" translate="yes" xml:space="preserve">
          <source>Firefox provided a non-standard destructuring implementation from Firefox 2 to 40.</source>
          <target state="translated">Firefox는 Firefox 2에서 40까지 비표준 구조화 구현을 제공했습니다.</target>
        </trans-unit>
        <trans-unit id="479561c747d08a6c5a06f978b23d08262fd29f10" translate="yes" xml:space="preserve">
          <source>Firefox-specific notes</source>
          <target state="translated">Firefox 관련 노트</target>
        </trans-unit>
        <trans-unit id="343ed92e59bf4112144f44a78b87fe8a07807593" translate="yes" xml:space="preserve">
          <source>First example: Appending a chain to a prototype</source>
          <target state="translated">첫 번째 예 : 프로토 타입에 체인 추가</target>
        </trans-unit>
        <trans-unit id="29fd4edccdecf77bd7c10cb34e0754a2ea1c38d1" translate="yes" xml:space="preserve">
          <source>First number.</source>
          <target state="translated">첫 번째 숫자.</target>
        </trans-unit>
        <trans-unit id="82bfd1c53da65ebf30035357da255d6d94c2ef18" translate="yes" xml:space="preserve">
          <source>First overload example</source>
          <target state="translated">첫 번째 과부하 예</target>
        </trans-unit>
        <trans-unit id="466d85d781b7db06275166930a81e0dca37c49b3" translate="yes" xml:space="preserve">
          <source>First standardisation of the format.</source>
          <target state="translated">형식의 첫 번째 표준화.</target>
        </trans-unit>
        <trans-unit id="5f8d5d74742a7c65db7afa4dd24ca0b51105a2a6" translate="yes" xml:space="preserve">
          <source>First three letters of the month name</source>
          <target state="translated">월 이름의 처음 세 글자</target>
        </trans-unit>
        <trans-unit id="f7dd14228eb9e7b21753912ee7c6629ab156e55d" translate="yes" xml:space="preserve">
          <source>First three letters of the week day name</source>
          <target state="translated">요일 이름의 처음 세 글자</target>
        </trans-unit>
        <trans-unit id="5b93748b0a3a681253a74743394a120c7a6fa7b9" translate="yes" xml:space="preserve">
          <source>First, in strict mode, a short list of identifiers become reserved keywords. These words are &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;. In strict mode, then, you can't name or use variables or arguments with these names.</source>
          <target state="translated">먼저, 엄격 모드에서는 짧은 식별자 목록이 예약 키워드가됩니다. 이 단어는 &lt;code&gt;implements&lt;/code&gt; , &lt;code&gt;interface&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;package&lt;/code&gt; , &lt;code&gt;private&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; , &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;static&lt;/code&gt; 및 &lt;code&gt;yield&lt;/code&gt; 입니다. 엄격 모드에서는 이러한 이름으로 변수 또는 인수를 명명하거나 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e8c4a0e634f6c21877c0422c33f30601e6bc1d22" translate="yes" xml:space="preserve">
          <source>First, let's see what happens with this:</source>
          <target state="translated">먼저, 어떻게되는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="d7e4ecada8c173592514cb716614c0fb6feafa19" translate="yes" xml:space="preserve">
          <source>First, strict mode makes it impossible to accidentally create global variables. In normal JavaScript mistyping a variable in an assignment creates a new property on the global object and continues to &quot;work&quot; (although future failure is possible: likely, in modern JavaScript). Assignments, which would accidentally create global variables, instead throw an error in strict mode:</source>
          <target state="translated">첫째, 엄격 모드를 사용하면 실수로 전역 변수를 만들 수 없습니다. 일반적인 JavaScript에서 할당에서 변수를 잘못 입력하면 전역 객체에 새 속성이 만들어지고 계속 작동합니다 (미래의 JavaScript에서는 아마도 실패 할 수 있지만). 실수로 전역 변수를 생성하는 할당은 대신 엄격 모드에서 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="93661d5eef74f0e969085b8ecfcc54aebce0fe81" translate="yes" xml:space="preserve">
          <source>First, strict mode prohibits &lt;code&gt;with&lt;/code&gt;. The problem with &lt;code&gt;with&lt;/code&gt; is that any name inside the block might map either to a property of the object passed to it, or to a variable in surrounding (or even global) scope, at runtime: it's impossible to know which beforehand. Strict mode makes &lt;code&gt;with&lt;/code&gt; a syntax error, so there's no chance for a name in a &lt;code&gt;with&lt;/code&gt; to refer to an unknown location at runtime:</source>
          <target state="translated">먼저, 엄격 모드는로 금지 &lt;code&gt;with&lt;/code&gt; . 의 문제 &lt;code&gt;with&lt;/code&gt; 블록 내부에 이름을 런타임에 (또는 전역) 범위를 주변에, 또는 변수에 전달 된 객체의 속성 중 하나에 매핑 할 수 있다는 점이다 : 그것을 미리 알고하는 것은 불가능하다. 엄격한 모드 수 &lt;code&gt;with&lt;/code&gt; 그렇게에서 이름에 대한 기회가 없다, 구문 오류 &lt;code&gt;with&lt;/code&gt; 런타임에 알 수없는 위치를 참조하는이 :</target>
        </trans-unit>
        <trans-unit id="0bc0f2deeb40670137ee5e7fce77f88441850542" translate="yes" xml:space="preserve">
          <source>First, the names &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; can't be bound or assigned in language syntax. All these attempts to do so are syntax errors:</source>
          <target state="translated">먼저, &lt;code&gt;eval&lt;/code&gt; 과 &lt;code&gt;arguments&lt;/code&gt; 라는 이름 은 언어 구문으로 묶거나 할당 할 수 없습니다. 이러한 모든 시도는 구문 오류입니다.</target>
        </trans-unit>
        <trans-unit id="ddd18856e490741983da8a014f3d4fda001f883a" translate="yes" xml:space="preserve">
          <source>First, the value passed as &lt;code&gt;this&lt;/code&gt; to a function in strict mode is not forced into being an object (a.k.a. &quot;boxed&quot;). For a normal function, &lt;code&gt;this&lt;/code&gt; is always an object: either the provided object if called with an object-valued &lt;code&gt;this&lt;/code&gt;; the value, boxed, if called with a Boolean, string, or number &lt;code&gt;this&lt;/code&gt;; or the global object if called with an &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;&lt;code&gt;this&lt;/code&gt;. (Use &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; to specify a particular &lt;code&gt;this&lt;/code&gt;.) Not only is automatic boxing a performance cost, but exposing the global object in browsers is a security hazard because the global object provides access to functionality that &quot;secure&quot; JavaScript environments must restrict. Thus for a strict mode function, the specified &lt;code&gt;this&lt;/code&gt; is not boxed into an object, and if unspecified, &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;:</source>
          <target state="translated">먼저, 엄격 모드의 함수 &lt;code&gt;this&lt;/code&gt; 값을 전달 하면 객체 (일명 &quot;박스형&quot;)가되지 않습니다. 정상적인 함수의 경우, &lt;code&gt;this&lt;/code&gt; 항상 객체입니다 : 객체 값 &lt;code&gt;this&lt;/code&gt; 호출 된 경우 제공된 객체 ; 값, 박스, 부울, 문자열, 또는 번호로 호출하는 경우 &lt;code&gt;this&lt;/code&gt; ; 또는 전역 객체 호출하면 &lt;code&gt;undefined&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; . (사용의 &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt; &lt;code&gt;call&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt; &lt;code&gt;apply&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt; 특정 지정 &lt;code&gt;this&lt;/code&gt; .) 자동 boxing은 성능 비용뿐만 아니라 브라우저에서 전역 객체를 노출하는 것은 보안 상 위험합니다. 전역 객체는 &quot;안전한&quot;JavaScript 환경이 제한해야하는 기능에 대한 액세스를 제공하기 때문입니다. 따라서, 엄격한 기능 모드의 경우, 지정된 &lt;code&gt;this&lt;/code&gt; 목적으로 박스형되지 않고, 지정되지 않은 경우 것은 &lt;code&gt;this&lt;/code&gt; 될 것이다 &lt;code&gt;undefined&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f7d023808f174ab8e9ea16e2a95b38e5b17ecf73" translate="yes" xml:space="preserve">
          <source>Five ways to trigger the getPrototypeOf trap</source>
          <target state="translated">getPrototypeOf 트랩을 트리거하는 5 가지 방법</target>
        </trans-unit>
        <trans-unit id="ed7968c7ecff9092eb7e2c0d715b0cc909d90dd8" translate="yes" xml:space="preserve">
          <source>Fixed width string number conversion</source>
          <target state="translated">고정 너비 문자열 번호 변환</target>
        </trans-unit>
        <trans-unit id="ec78f5797be806c8fb7d55e2cb1cd7c9c178dc49" translate="yes" xml:space="preserve">
          <source>Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode.</source>
          <target state="translated">JavaScript 엔진이 최적화를 수행하기 어려운 실수를 수정합니다. 엄격 모드 코드는 엄격 모드가 아닌 동일한 코드보다 더 빠르게 실행될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fb3a7472b9e38ce89982c734b3407ebd8795a29" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;charAt()&lt;/code&gt; to support non-Basic-Multilingual-Plane (BMP) characters</source>
          <target state="translated">기본이 아닌 다국어-비행기 (BMP) 문자를 지원하도록 &lt;code&gt;charAt()&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="11507ac95dca3feb2b8c4bb287993517917f67b9" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;charCodeAt()&lt;/code&gt; to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known</source>
          <target state="translated">문자열의 앞에 존재하는 것이 알려진 경우 기본이 아닌 다국어-비평면 문자를 처리하도록 &lt;code&gt;charCodeAt()&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="a7ded16d6380cdd3e6576df896aefa0771f62887" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;charCodeAt()&lt;/code&gt; to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown</source>
          <target state="translated">문자열의 앞에 존재하지 않는 경우 기본이 아닌 다국어-비평면 문자를 처리하도록 &lt;code&gt;charCodeAt()&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="2e89dff31c07cb2e1222562e89dab65cd50f935f" translate="yes" xml:space="preserve">
          <source>Fixing the error</source>
          <target state="translated">오류 수정</target>
        </trans-unit>
        <trans-unit id="27c496f6d390ee9de934635b46bf75430ba5520d" translate="yes" xml:space="preserve">
          <source>Fixing the issue</source>
          <target state="translated">문제 해결</target>
        </trans-unit>
        <trans-unit id="a774409a00c21de377cf8ed5c6a56b8547973042" translate="yes" xml:space="preserve">
          <source>Flag</source>
          <target state="translated">Flag</target>
        </trans-unit>
        <trans-unit id="24ae54aa123f1e9b4344ecb937d6d2afe72643b5" translate="yes" xml:space="preserve">
          <source>Flags and bitmasks</source>
          <target state="translated">플래그와 비트 마스크</target>
        </trans-unit>
        <trans-unit id="402c310f773a2f54c4f79cd3b5e281e5bd324200" translate="yes" xml:space="preserve">
          <source>Flags can be cleared by ANDing them with a bitmask, where each bit with the value zero will clear the corresponding flag, if it isn't already cleared. This bitmask can be created by NOTing primitive bitmasks. For example, the bitmask 1010 can be used to clear flags A and C:</source>
          <target state="translated">비트 마스크로 AND를 AND하여 플래그를 지울 수 있습니다. 값이 0 인 각 비트는 해당 플래그가 지워지지 않은 경우 지 웁니다. 이 비트 마스크는 기본 비트 마스크를 NOT으로 작성하여 작성할 수 있습니다. 예를 들어, 비트 마스크 (1010)는 플래그 A 및 C를 소거하는데 사용될 수있다 :</target>
        </trans-unit>
        <trans-unit id="8be35b5435b7b61382c9f1f05c9391b546149731" translate="yes" xml:space="preserve">
          <source>Flags can be set by ORing them with a bitmask, where each bit with the value one will set the corresponding flag, if that flag isn't already set. For example, the bitmask 1100 can be used to set flags C and D:</source>
          <target state="translated">비트 마스크로 OR을 지정하여 플래그를 설정할 수 있습니다. 여기서 플래그가 설정되어 있지 않은 경우 값이 1 인 각 비트가 해당 플래그를 설정합니다. 예를 들어, 비트 마스크 (1100)는 플래그 C 및 D를 설정하는데 사용될 수있다 :</target>
        </trans-unit>
        <trans-unit id="6b192ec50adb695094e9ea8e3074cdf0cab908bc" translate="yes" xml:space="preserve">
          <source>Flags can be toggled by XORing them with a bitmask, where each bit with the value one will toggle the corresponding flag. For example, the bitmask 0110 can be used to toggle flags B and C:</source>
          <target state="translated">비트 마스크를 사용하여 플래그를 XOR하여 플래그를 토글 할 수 있습니다. 여기서 값이 1 인 각 비트는 해당 플래그를 토글합니다. 예를 들어 비트 마스크 0110을 사용하여 플래그 B와 C를 토글 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e400ec462e3c1148dedd7e965a23ac2c6bce2696" translate="yes" xml:space="preserve">
          <source>Flags in constructor</source>
          <target state="translated">생성자의 플래그</target>
        </trans-unit>
        <trans-unit id="1f68c4fc194f559038ed96fbde48cb046892f782" translate="yes" xml:space="preserve">
          <source>Flags in the &lt;code&gt;flags&lt;/code&gt; property are sorted alphabetically (from left to right, e.g. &lt;code&gt;&quot;gimsuy&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 속성 의 플래그 는 알파벳순으로 정렬됩니다 (왼쪽에서 오른쪽으로, 예 : &lt;code&gt;&quot;gimsuy&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="93561e04ebf9722b05b722a676a059de1cd150b6" translate="yes" xml:space="preserve">
          <source>Flags in the &lt;code&gt;flags&lt;/code&gt; property are sorted alphabetically (from left to right, e.g. &lt;code&gt;&quot;gimuy&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 속성 의 플래그 는 알파벳순으로 정렬됩니다 (예 : &lt;code&gt;&quot;gimuy&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="676c9d599201070a621a595435185bbb156398c0" translate="yes" xml:space="preserve">
          <source>Flatten an array</source>
          <target state="translated">배열 평면화</target>
        </trans-unit>
        <trans-unit id="c74be1a6e28386bf4303b024e8247e94f690663b" translate="yes" xml:space="preserve">
          <source>Flatten an array of arrays</source>
          <target state="translated">배열의 배열을 평탄화</target>
        </trans-unit>
        <trans-unit id="d7cd24bf280532f4f898959db20c74b3ccc8b2ae" translate="yes" xml:space="preserve">
          <source>Flattening and array holes</source>
          <target state="translated">평탄화 및 배열 구멍</target>
        </trans-unit>
        <trans-unit id="c2f19e1b80d5b2df4e3edb0bdb33cbdeb5eed7a6" translate="yes" xml:space="preserve">
          <source>Flattening nested arrays</source>
          <target state="translated">중첩 배열 병합</target>
        </trans-unit>
        <trans-unit id="1cbcea917c60692fe6c69a4151dd7e5bcc9da555" translate="yes" xml:space="preserve">
          <source>Float32Array</source>
          <target state="translated">Float32Array</target>
        </trans-unit>
        <trans-unit id="5ff19b16982cfa6758e365cf413637891bed2071" translate="yes" xml:space="preserve">
          <source>Float32Array.length</source>
          <target state="translated">Float32Array.length</target>
        </trans-unit>
        <trans-unit id="42ae0e778d4c2ca3c83ff2f30eea14a7dfba5a83" translate="yes" xml:space="preserve">
          <source>Float64Array</source>
          <target state="translated">Float64Array</target>
        </trans-unit>
        <trans-unit id="8c08f72095752842331f617ad40382c52a79be64" translate="yes" xml:space="preserve">
          <source>Float64Array.length</source>
          <target state="translated">Float64Array.length</target>
        </trans-unit>
        <trans-unit id="38fb7d13eea1d3aa6fea21b45d143f96020357b9" translate="yes" xml:space="preserve">
          <source>Floating point numbers cannot represent all decimals precisely in binary which can lead to unexpected results such as &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; returning &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">부동 소수점 수는 정확히 같은 예상치 못한 결과가 발생할 수있는 모든 이진 소수점을 나타낼 수 &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; 복귀 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2b43243fdd89b16da4288d445ddfe79d321b593e" translate="yes" xml:space="preserve">
          <source>Following example describes how &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; property can modify the primitive value converted from an object.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; 속성이 개체에서 변환 된 기본 값을 수정하는 방법을 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="966878c5409ed6d292a9c669e87f5165b94fba89" translate="yes" xml:space="preserve">
          <source>Following example uses &lt;code&gt;filter()&lt;/code&gt; to filter array content based on search criteria.</source>
          <target state="translated">다음 예제는 &lt;code&gt;filter()&lt;/code&gt; 를 사용 하여 검색 기준에 따라 배열 내용을 필터링합니다.</target>
        </trans-unit>
        <trans-unit id="f922c692de8b242cb40eacde64bca978c1ca3adf" translate="yes" xml:space="preserve">
          <source>Following example uses filter() to filter array content based on search criteria</source>
          <target state="translated">다음 예제는 filter ()를 사용하여 검색 기준에 따라 배열 내용을 필터링합니다.</target>
        </trans-unit>
        <trans-unit id="73b9316c019823619b5646cb777484856c64691b" translate="yes" xml:space="preserve">
          <source>Following, an example to demonstrate the asynchronicity of the &lt;code&gt;then&lt;/code&gt; method.</source>
          <target state="translated">다음은 &lt;code&gt;then&lt;/code&gt; 메소드 의 비동기 성을 설명하는 예제 입니다.</target>
        </trans-unit>
        <trans-unit id="f7880600348a091a43e2a84906d6002820643108" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">For</target>
        </trans-unit>
        <trans-unit id="623e359639c2507e409472f334210a239dd0487a" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects and values, the built-in &lt;code&gt;toString()&lt;/code&gt; method returns the string &quot;&lt;code&gt;true&lt;/code&gt;&quot; or &quot;&lt;code&gt;false&lt;/code&gt;&quot; depending on the value of the boolean object.</source>
          <target state="translated">들어 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체와 값, 내장 &lt;code&gt;toString()&lt;/code&gt; 메소드가 반환 문자열 &quot; &lt;code&gt;true&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;false&lt;/code&gt; &quot;부울 객체의 값에 따라 달라집니다.</target>
        </trans-unit>
        <trans-unit id="d963f5da0cdbd62bc6ea76588ca83a2bc87e9956" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects and values, the built-in &lt;code&gt;toString&lt;/code&gt; method returns the string &quot;&lt;code&gt;true&lt;/code&gt;&quot; or &quot;&lt;code&gt;false&lt;/code&gt;&quot; depending on the value of the boolean object.</source>
          <target state="translated">들어 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체와 값, 내장 &lt;code&gt;toString&lt;/code&gt; 메서드가 반환하는 문자열 &quot; &lt;code&gt;true&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;false&lt;/code&gt; Boolean 객체의 값에 따라&quot;.</target>
        </trans-unit>
        <trans-unit id="78f02d508180d333d3bdf9c4b73f513109cd92ab" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm&quot;&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/a&gt;, spaces are to be replaced by '+', so one may wish to follow a &lt;code&gt;encodeURIComponent&lt;/code&gt; replacement with an additional replacement of &quot;%20&quot; with &quot;+&quot;.</source>
          <target state="translated">내용 &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm&quot;&gt; &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; &lt;/a&gt; 공백 하나가 수행하고자하는 수 있으므로, '+'로 대체되어야 &lt;code&gt;encodeURIComponent&lt;/code&gt; &quot;+&quot;와 &quot;20 %&quot;의 추가 여분으로 교체.</target>
        </trans-unit>
        <trans-unit id="041f114d245bc8f8fdded7112c29f915d3ec9c28" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm&quot;&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/a&gt;, spaces are to be replaced by &lt;code&gt;+&lt;/code&gt;, so one may wish to follow a &lt;code&gt;encodeURIComponent()&lt;/code&gt; replacement with an additional replacement of &lt;code&gt;%20&lt;/code&gt; with &lt;code&gt;+&lt;/code&gt;.</source>
          <target state="translated">내용 &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm&quot;&gt; &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; &lt;/a&gt; , 공간으로 대체한다 &lt;code&gt;+&lt;/code&gt; 하나가 따라야 할 수도 있으므로, &lt;code&gt;encodeURIComponent()&lt;/code&gt; 의 추가로 여분의 여분을 &lt;code&gt;%20&lt;/code&gt; 와 &lt;code&gt;+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74f996f5b480f3db3c63d2cda7dde03ef77b71ed" translate="yes" xml:space="preserve">
          <source>For &lt;var&gt;&lt;code&gt;fromIndex&lt;/code&gt;&lt;/var&gt; values lower than &lt;code&gt;0&lt;/code&gt;, or greater than &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, the search starts at index &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, respectively.</source>
          <target state="translated">들면 &lt;var&gt;&lt;code&gt;fromIndex&lt;/code&gt;&lt;/var&gt; 의 값보다 낮은 &lt;code&gt;0&lt;/code&gt; 또는 이상 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 인덱스에서 검색 개시 &lt;code&gt;0&lt;/code&gt; 및 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 각각.</target>
        </trans-unit>
        <trans-unit id="061571ea1caa05ee81cca89c921d28e4a25fa61e" translate="yes" xml:space="preserve">
          <source>For Firefox code, see also the &lt;code&gt;XPCOMUtils.jsm&lt;/code&gt; code module, which defines the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()&quot;&gt;defineLazyGetter()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">파이어 폭스 코드는 또한 참조 &lt;code&gt;XPCOMUtils.jsm&lt;/code&gt; 의 define 명령 코드 모듈 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()&quot;&gt;defineLazyGetter()&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="0150c094f814b58e502257f3320b5c178ae8e57b" translate="yes" xml:space="preserve">
          <source>For Firefox code, see also the XPCOMUtils.jsm code module, which defines the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()&quot;&gt;defineLazyGetter()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">Firefox 코드의 경우 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()&quot;&gt;defineLazyGetter()&lt;/a&gt;&lt;/code&gt; 함수 를 정의하는 XPCOMUtils.jsm 코드 모듈도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2fdf1fe4f234564d8ddd7f113915a6ea790b4215" translate="yes" xml:space="preserve">
          <source>For Numbers and BigInts &lt;code&gt;toString()&lt;/code&gt; takes an optional parameter &lt;code&gt;radix&lt;/code&gt; the value of radix must be minimum 2 and maximum 36.</source>
          <target state="translated">Numbers 및 BigInts의 경우 &lt;code&gt;toString()&lt;/code&gt; 은 선택적 매개 변수 &lt;code&gt;radix&lt;/code&gt; 를 사용 합니다. radix 값은 최소 2에서 최대 36이어야합니다.</target>
        </trans-unit>
        <trans-unit id="57f5f364c1d4bcfb269d6829f845d1f8c23e69db" translate="yes" xml:space="preserve">
          <source>For a beginner's introductory tutorial on fixing JavaScript errors, see &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong&quot;&gt;What went wrong? Troubleshooting JavaScript&lt;/a&gt;.</source>
          <target state="translated">JavaScript 오류 수정에 대한 초보자 입문 자습서 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong&quot;&gt;는 무엇이 잘못 되었습니까?를&lt;/a&gt; 참조하십시오 . JavaScript 문제 해결 .</target>
        </trans-unit>
        <trans-unit id="b832d618cf12c1a73162030f221ede9c32df8567" translate="yes" xml:space="preserve">
          <source>For a more concrete example of iterating over an async generator using &lt;code&gt;for await...of&lt;/code&gt;, consider iterating over data from an API.</source>
          <target state="translated">&lt;code&gt;for await...of&lt;/code&gt; 사용하여 비동기 생성기를 반복하는보다 구체적인 예 는 API의 데이터 반복을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="210a879a4b2aa0d95ec9da37fe5892d29b8a79a9" translate="yes" xml:space="preserve">
          <source>For a simple Browser Polyfill, see &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;Javascript - Object.keys Browser Compatibility&lt;/a&gt;.</source>
          <target state="translated">간단한 브라우저 폴리 필은 &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;Javascript-Object.keys 브라우저 호환성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="26d543752d3033acdaff2d8e6bd73b179d9e0b29" translate="yes" xml:space="preserve">
          <source>For adding and removing items during a &lt;code&gt;map()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map()&lt;/code&gt; 중 항목 추가 및 제거 ()</target>
        </trans-unit>
        <trans-unit id="6eed66056ef285fe12b8fd7635a096bba84ab196" translate="yes" xml:space="preserve">
          <source>For all</source>
          <target state="translated">모든</target>
        </trans-unit>
        <trans-unit id="a37a1adcb69a9fd41ca6383d2e475cccb64b3ed8" translate="yes" xml:space="preserve">
          <source>For an alphabetical listing see the sidebar on the left.</source>
          <target state="translated">알파벳순 목록은 왼쪽의 사이드 바를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1be6e4c4961c1505f420c1021f909ec3aa651732" translate="yes" xml:space="preserve">
          <source>For an empty string, &lt;code&gt;length&lt;/code&gt; is 0.</source>
          <target state="translated">빈 문자열의 경우 &lt;code&gt;length&lt;/code&gt; 는 0입니다.</target>
        </trans-unit>
        <trans-unit id="59b2abd13b3c51e0458897a7926919a7cea6ff8d" translate="yes" xml:space="preserve">
          <source>For an introduction to regular expressions, read the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;Regular Expressions chapter&lt;/a&gt; in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;JavaScript Guide&lt;/a&gt;.</source>
          <target state="translated">정규 표현식에 대한 소개 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;JavaScript 안내서&lt;/a&gt; 의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;정규 표현식 장&lt;/a&gt; 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="dc2f422b6b7a4e76ecff0b1265a311c238657e3c" translate="yes" xml:space="preserve">
          <source>For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN&lt;/code&gt;&lt;/a&gt; function to determine if the result of &lt;code&gt;parseFloat&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation results will also be &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">산술 목적으로 &lt;code&gt;NaN&lt;/code&gt; 값은 기수의 숫자가 아닙니다. &lt;code&gt;parseFloat&lt;/code&gt; 결과 가 &lt;code&gt;NaN&lt;/code&gt; 인지 확인하기 위해 &lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN&lt;/code&gt; &lt;/a&gt; 함수를 호출 할 수 있습니다 . 경우 &lt;code&gt;NaN&lt;/code&gt; 의 연산으로 전달되며, 연산 결과는 것이다 &lt;code&gt;NaN&lt;/code&gt; 이 .</target>
        </trans-unit>
        <trans-unit id="ce5da2a4929f96c2da4de4263470b913439793b3" translate="yes" xml:space="preserve">
          <source>For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN&lt;/code&gt;&lt;/a&gt; function to determine if the result of &lt;code&gt;parseInt&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation result will also be &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">산술을 위해 &lt;code&gt;NaN&lt;/code&gt; 값은 기수로 된 숫자가 아닙니다. &lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN&lt;/code&gt; &lt;/a&gt; 함수를 호출하여 &lt;code&gt;parseInt&lt;/code&gt; 결과 가 &lt;code&gt;NaN&lt;/code&gt; 인지 확인할 수 있습니다 . 경우 &lt;code&gt;NaN&lt;/code&gt; 의 연산으로 전달되며, 연산 결과는 것이다 &lt;code&gt;NaN&lt;/code&gt; 이 .</target>
        </trans-unit>
        <trans-unit id="81f69a3c9b1dad06d544f28881400c339201a899" translate="yes" xml:space="preserve">
          <source>For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN&lt;/code&gt;&lt;/a&gt; function to determine if the result of &lt;code&gt;parseInt&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation results will also be &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">산술 목적으로 &lt;code&gt;NaN&lt;/code&gt; 값은 기수의 숫자가 아닙니다. &lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN&lt;/code&gt; &lt;/a&gt; 함수를 호출하여 &lt;code&gt;parseInt&lt;/code&gt; 의 결과 가 &lt;code&gt;NaN&lt;/code&gt; 인지 확인할 수 있습니다 . 경우 &lt;code&gt;NaN&lt;/code&gt; 의 연산으로 전달되며, 연산 결과는 것이다 &lt;code&gt;NaN&lt;/code&gt; 이 .</target>
        </trans-unit>
        <trans-unit id="e014e579d555536cf34d483834677b42bd983ecb" translate="yes" xml:space="preserve">
          <source>For array literals or strings:</source>
          <target state="translated">배열 리터럴 또는 문자열의 경우 :</target>
        </trans-unit>
        <trans-unit id="d60d1f5640b0dfe178b8712fb24c3a7983774b1f" translate="yes" xml:space="preserve">
          <source>For array objects, the default behavior is to spread (flatten) elements. &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; can avoid flattening in these cases.</source>
          <target state="translated">배열 객체의 경우 기본 동작은 요소를 분산 (평평하게)하는 것입니다. 이러한 경우 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 은 병합을 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5669a9934fcde12871e529e3db4e75c726235832" translate="yes" xml:space="preserve">
          <source>For array-like objects, the default behavior is no spreading or flattening. &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; can force flattening in these cases.</source>
          <target state="translated">배열과 유사한 객체의 경우 기본 동작은 펼치거나 병합되지 않습니다. 이러한 경우 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 은 강제로 병합을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ea296a3a7670c5a8a211c5e999d00233eacd04f" translate="yes" xml:space="preserve">
          <source>For array-like objects, the default is to not spread. &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; needs to be set to &lt;code&gt;true&lt;/code&gt; in order to get a flattened array:</source>
          <target state="translated">배열과 유사한 객체의 경우 기본값은 확산되지 않습니다. 평평한 배열을 얻으려면 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 을 &lt;code&gt;true&lt;/code&gt; 로 설정해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="33c38a2e18db9c66b1471f76b75c402d86a467fb" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt;, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">두 경우 모두 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; , &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 가가&lt;/a&gt; 로 처리됩니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4ebd17ee6524394d68de55d71267a3a2129d421" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;, NaN is treated as 0.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;length&lt;/code&gt; 모두 NaN은 0으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="26aabe4f640dee6e21eddc2167826f78cdca41f3" translate="yes" xml:space="preserve">
          <source>For certain methods, you have to provide a (callback) function and it will work on specific objects only. In this example, &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt; is used, which will work with &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects only.</source>
          <target state="translated">특정 방법의 경우 (콜백) 기능을 제공해야하며 특정 객체에서만 작동합니다. 이 예제에서는 &lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt; 이 사용되며 이는 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 객체에서만 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="e0e1751073e5970c64bca2f757d1c623e86bb3c0" translate="yes" xml:space="preserve">
          <source>For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See &lt;a href=&quot;object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; for more information.)</source>
          <target state="translated">대괄호 표기법을 사용한 문자 액세스의 경우 이러한 속성에 값을 삭제하거나 할당하려고 시도하면 성공하지 못합니다. 관련된 속성은 쓰기 가능하거나 구성 가능하지 않습니다. 자세한 내용은 &lt;a href=&quot;object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="99044996f4e427d6809e09a478ce8eac0722235a" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.</source>
          <target state="translated">일반적으로 문자 그대로 처리되는 문자의 경우 다음 문자가 특수하며 문자 그대로 해석되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a748d10a4ab866b8eb98e9cd6ef0ff7546d5f266" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.</source>
          <target state="translated">일반적으로 특수하게 취급되는 문자의 경우 다음 문자가 특별하지 않으며 문자 그대로 해석되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="85db0ab8b5ed013f390f3a080dd3cfc842bb264d" translate="yes" xml:space="preserve">
          <source>For checking non-existent variables that would otherwise throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;typeof nonExistentVar&amp;nbsp;=== 'undefined'&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt; 를 발생시킬 수있는 존재하지 않는 변수를 확인 하려면 &lt;code&gt;typeof nonExistentVar&amp;nbsp;=== 'undefined'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b13759ba937d4a7dfd20fa0a292bf064a8452b9" translate="yes" xml:space="preserve">
          <source>For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods &lt;a href=&quot;getfullyear&quot;&gt;&lt;code&gt;getFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;setfullyear&quot;&gt;&lt;code&gt;setFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcfullyear&quot;&gt;&lt;code&gt;getUTCFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setutcfullyear&quot;&gt;&lt;code&gt;setUTCFullYear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">밀레니엄 계산과의 호환성 (즉, 2000 년을 고려)하려면 항상 연도를 전체적으로 지정해야합니다. 예를 들어 98이 아닌 1998을 사용하십시오. 전체 연도를 지정하는 데 도움이되도록 JavaScript에는 &lt;a href=&quot;getfullyear&quot;&gt; &lt;code&gt;getFullYear()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;setfullyear&quot;&gt; &lt;code&gt;setFullYear()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;getutcfullyear&quot;&gt; &lt;code&gt;getUTCFullYear()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;setutcfullyear&quot;&gt; &lt;code&gt;setUTCFullYear()&lt;/code&gt; &lt;/a&gt; 메소드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3404e5bf70a885865d212605712da9b2b525a7d4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padend&quot;&gt;&lt;code&gt;String.prototype.padEnd&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimEnd&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimRight&lt;/code&gt; remains as an alias to &lt;code&gt;trimEnd&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padend&quot;&gt; &lt;code&gt;String.prototype.padEnd&lt;/code&gt; &lt;/a&gt; 와 같은 함수와 일관성을 유지하기 위해 표준 메소드 이름은 &lt;code&gt;trimEnd&lt;/code&gt; 입니다. 그러나, 웹 호환성을 위해, &lt;code&gt;trimRight&lt;/code&gt; 는 별칭으로 남아 &lt;code&gt;trimEnd&lt;/code&gt; . 일부 엔진에서는 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f18d1ae2a3eb146497e18d6828d80707fdde7cf4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padstart&quot;&gt;&lt;code&gt;String.prototype.padStart&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimStart&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimLeft&lt;/code&gt; remains as an alias to &lt;code&gt;trimStart&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padstart&quot;&gt; &lt;code&gt;String.prototype.padStart&lt;/code&gt; &lt;/a&gt; 와 같은 함수와 일관성을 유지하기 위해 표준 메소드 이름은 &lt;code&gt;trimStart&lt;/code&gt; 입니다. 그러나 웹 호환성을 위해 &lt;code&gt;trimLeft&lt;/code&gt; 는 trimStart 의 별칭으로 &lt;code&gt;trimStart&lt;/code&gt; 있습니다. 일부 엔진에서는 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e8af3d83a48402e400f35cfeec3c1af710d38b6f" translate="yes" xml:space="preserve">
          <source>For copying property definitions (including their enumerability) into prototypes, use &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">속성 정의 (열거 가능성 포함)를 프로토 타입으로 복사하려면 대신 &lt;a href=&quot;getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f9918cac41143b821348744973cb230ce45c39e6" translate="yes" xml:space="preserve">
          <source>For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value). Note that values that are objects can still be modified, unless they are also frozen. As an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added to or removed from the array.</source>
          <target state="translated">고정 된 객체의 데이터 속성의 경우 값을 변경할 수 없으며 쓰기 가능 및 구성 가능 속성이 false로 설정됩니다. 접근 자 속성 (getter 및 setter)은 동일하게 작동하며 여전히 값을 변경하고 있다는 착각을줍니다. 객체 인 값도 동결되지 않는 한 여전히 수정할 수 있습니다. 객체는 배열을 고정시킬 수 있습니다. 그렇게 한 후에는 해당 요소를 변경할 수 없으며 배열에 요소를 추가하거나 제거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="10a18c2526932f22e98b63c9cadb43418dd3bf51" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use alternatives, because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values.</source>
          <target state="translated">딥 클로닝의 경우 &lt;code&gt;Object.assign()&lt;/code&gt; 속성 값을 복사 하기 때문에 대안을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="3fc009100b3e934d5118774a507a120144dc3f88" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use other alternatives because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values. If the source value is a reference to an object, it only copies that reference value.</source>
          <target state="translated">딥 클로닝의 경우 &lt;code&gt;Object.assign()&lt;/code&gt; 속성 값을 복사 하므로 다른 대안을 사용해야 합니다. 소스 값이 객체에 대한 참조 인 경우 해당 참조 값만 복사합니다.</target>
        </trans-unit>
        <trans-unit id="a872f9cc20d8e834dae1ca1ebcab116bbe0ba998" translate="yes" xml:space="preserve">
          <source>For derived classes, the default constructor is:</source>
          <target state="translated">파생 클래스의 경우 기본 생성자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5ae3d3d29fc3be84e49f8896de494e2a5bc4e77f" translate="yes" xml:space="preserve">
          <source>For didactic purpose only (since there is the &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; method), we show how it is possible to modify the &lt;code&gt;arrayFromMask&lt;/code&gt; algorithm in order to create a &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; containing the binary representation of a &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;, rather than an &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">합니다 (이 있기 때문에 단지 교훈적인 목적을 위해 &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; 방법), 우리는 그것이 수정할 수 방법을 보여 &lt;code&gt;arrayFromMask&lt;/code&gt; 의 생성하기 위해 알고리즘을 &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; a의 바이너리 표현을 포함한 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; 오히려보다, &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3be8fcb6f27956cba103591a38605bc08e18e6ee" translate="yes" xml:space="preserve">
          <source>For each variable declared, you may optionally specify its initial value to any legal JavaScript expression.</source>
          <target state="translated">선언 된 각 변수에 대해 선택적으로 올바른 JavaScript 표현식에 초기 값을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c660e337b7d93bed6e13f9f0a73344500d5771b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;work as expected with Traditional functions, because we establish the scope for each of the methods:</source>
          <target state="translated">예를 들어 각 메서드의 범위를 설정하기 때문에 기존 함수에서 예상대로 &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; 및 &lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt; 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="af9424dff50db5cffee05db82f14e282e8a7ffab" translate="yes" xml:space="preserve">
          <source>For example checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;</source>
          <target state="translated">예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;노드&lt;/a&gt; 가 다른 컨텍스트에서 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; 인지 확인하는 경우 &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1921efdfed6a87b6e5c50e8a40d2c7e77f411a0" translate="yes" xml:space="preserve">
          <source>For example, &quot;*&quot; is a special character that means 0 or more occurrences of the preceding character should be matched; for example, &lt;code&gt;/a*/&lt;/code&gt; means match 0 or more &quot;a&quot;s. To match &lt;code&gt;*&lt;/code&gt; literally, precede it with a backslash; for example, &lt;code&gt;/a\*/&lt;/code&gt; matches &quot;a*&quot;.</source>
          <target state="translated">예를 들어, &quot;*&quot;는 특수 문자로, 앞의 문자가 0 번 이상 일치해야 함을 의미합니다. 예를 들어, &lt;code&gt;/a*/&lt;/code&gt; 는 0 개 이상의 &quot;a&quot;와 일치 함을 의미합니다. 문자 그대로 &lt;code&gt;*&lt;/code&gt; 를 일치 시키려면 백 슬래시를 앞에 두십시오. 예를 들어, &lt;code&gt;/a\*/&lt;/code&gt; 는 &quot;a *&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="06a8a96f44d115ddf9235c827e88879b5a516490" translate="yes" xml:space="preserve">
          <source>For example, &quot;&lt;code&gt;2011-10-10&lt;/code&gt;&quot; (&lt;em&gt;date-only&lt;/em&gt; form), &quot;&lt;code&gt;2011-10-10T14:48:00&lt;/code&gt;&quot; (&lt;em&gt;date-time&lt;/em&gt; form), or &quot;&lt;code&gt;2011-10-10T14:48:00.000+09:00&lt;/code&gt;&quot; (&lt;em&gt;date-time&lt;/em&gt; form with milliseconds and time zone) can be passed and will be parsed. When the time zone offset is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.</source>
          <target state="translated">예 : &quot; &lt;code&gt;2011-10-10&lt;/code&gt; &quot;( &lt;em&gt;날짜 전용&lt;/em&gt; 형식), &quot; &lt;code&gt;2011-10-10T14:48:00&lt;/code&gt; &quot;( &lt;em&gt;날짜-시간&lt;/em&gt; 형식) 또는 &quot; &lt;code&gt;2011-10-10T14:48:00.000+09:00&lt;/code&gt; &quot;( &lt;em&gt;날짜-시간&lt;/em&gt; 밀리 초 및 시간대가있는 형식)을 전달할 수 있으며 구문 분석됩니다. 표준 시간대 오프셋이 없으면 날짜 전용 형식은 UTC 시간으로 해석되고 날짜-시간 형식은 현지 시간으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="bea3e1a01ebe6de98dcc04169dd3576954076ff3" translate="yes" xml:space="preserve">
          <source>For example, /&lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; matches &quot;Jack&quot; only if it is followed by &quot;Sprat&quot;.</source>
          <target state="translated">예를 들어, / &lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; 은 &quot;Sprat&quot;뒤에 오는 경우에만 &quot;Jack&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="f7e97cc7164eebed5ae5d22dd9b94a3bbd85996a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;'hello world'.indexOf('o', -5)&lt;/code&gt; will return &lt;code&gt;4&lt;/code&gt;, as it starts at position &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;o&lt;/code&gt; is found at position &lt;code&gt;4&lt;/code&gt;. On the other hand, &lt;code&gt;'hello world'.indexOf('o', 11)&lt;/code&gt; (and with any &lt;code&gt;fromIndex&lt;/code&gt; value greater than &lt;code&gt;11&lt;/code&gt;) will return &lt;code&gt;-1&lt;/code&gt;, as the search is started at position &lt;code&gt;11&lt;/code&gt;, a position &lt;em&gt;after&lt;/em&gt; the end of the string.</source>
          <target state="translated">예를 들어 &lt;code&gt;'hello world'.indexOf('o', -5)&lt;/code&gt; 는 위치 &lt;code&gt;0&lt;/code&gt; 에서 시작 하고 &lt;code&gt;o&lt;/code&gt; 는 위치 &lt;code&gt;4&lt;/code&gt; 에서 발견 되므로 &lt;code&gt;4&lt;/code&gt; 를 반환 합니다. 한편, &lt;code&gt;'hello world'.indexOf('o', 11)&lt;/code&gt; (및 함께 &lt;code&gt;fromIndex&lt;/code&gt; 와의 보다 값보다 &lt;code&gt;11&lt;/code&gt; ) 반환 &lt;code&gt;-1&lt;/code&gt; 검색 위치에서 시작되면, &lt;code&gt;11&lt;/code&gt; , 위치를 &lt;em&gt;후&lt;/em&gt; 문자열의 끝에 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f996f230c5ba69cacb722a4b28f7baf9a2451188" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt;&quot; in &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;, whereas &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; 는 &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;의 &quot;&amp;lt;foo&amp;gt;&quot;와 일치하고 &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; 는 &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="27e4be0ac9808621eb5d1917ee74c672f0b47394" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/(foo)/&lt;/code&gt; matches and remembers &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/(foo)/&lt;/code&gt; 는 &quot;foo bar&quot;에서 &quot;foo&quot;와 일치하고 기억합니다.</target>
        </trans-unit>
        <trans-unit id="731dc4cf5c8a54fbcbc2af314a327d088d98638c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/.y/&lt;/code&gt; matches &quot;my&quot; and &quot;ay&quot;, but not &quot;yes&quot;, in &quot;yes make my day&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/.y/&lt;/code&gt; 는 &quot;yes make my day&quot;에서 &quot;my&quot;및 &quot;ay&quot;와 일치하지만 &quot;yes&quot;와 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2ecf141ae7a336698fb8c2752ab124b962f13e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\Bon/&lt;/code&gt; matches &quot;on&quot; in &quot;at noon&quot;, and &lt;code&gt;/ye\B/&lt;/code&gt; matches &quot;ye&quot; in &quot;possibly yesterday&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\Bon/&lt;/code&gt; 은 &quot;정오&quot;의 &quot;on&quot;과 일치하고 &lt;code&gt;/ye\B/&lt;/code&gt; 는 &quot;어제&quot;의 &quot;ye&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ba512b360907fd081a5c8d7d957c6b35edbcd627" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\D/&lt;/code&gt; or &lt;code&gt;/[^0-9]/&lt;/code&gt; matches &quot;B&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\D/&lt;/code&gt; 또는 &lt;code&gt;/[^0-9]/&lt;/code&gt; 는 &quot;B2는 제품군 번호입니다&quot;의 &quot;B&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="72c8f4c13713a783b774b36799e9b95d4b11c727" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\S\w*/&lt;/code&gt; matches &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\S\w*/&lt;/code&gt; 는 &quot;foo bar&quot;의 &quot;foo&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a10d7b5dd4f43f12c1a090ad22713c68343dbcce" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\W/&lt;/code&gt; or &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; matches &quot;%&quot; in &quot;50%&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\W/&lt;/code&gt; 또는 &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; 는 &quot;50 %&quot;의 &quot;%&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="58a7325cb42e0955f08d3fb78805a675633c686c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\cM/&lt;/code&gt; matches control-M in a string.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\cM/&lt;/code&gt; 은 문자열의 control-M과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="54379d80b8754985be2df6f32cd7b59e7b5d22b6" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; matches a number only if it is not followed by a decimal point.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; 는 뒤에 소수점이없는 경우에만 숫자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2f99f6f3b6617e0baeab0f498629bf696685e7c5" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d/&lt;/code&gt; or &lt;code&gt;/[0-9]/&lt;/code&gt; matches &quot;2&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\d/&lt;/code&gt; 또는 &lt;code&gt;/[0-9]/&lt;/code&gt; 는 &quot;B2는 제품군 번호&quot;의 &quot;2&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b666bd4de97017a6096dee7ee40ac60fc051d1ad" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\s\w*/&lt;/code&gt; matches &quot; bar&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\s\w*/&lt;/code&gt; 는 &quot;foo bar&quot;의 &quot;bar&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="c081fbd7f9e8826910cd2ba54069a078d1643b1f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\w/&lt;/code&gt; matches &quot;a&quot; in &quot;apple&quot;, &quot;5&quot; in &quot;$5.28&quot;, and &quot;3&quot; in &quot;3D&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\w/&lt;/code&gt; 는 &quot;apple&quot;의 &quot;a&quot;, &quot;$ 5.28&quot;의 &quot;5&quot;및 &quot;3D&quot;의 &quot;3&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="04e47940435de007ee6bfc72f9ee144bd618626f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/^A/&lt;/code&gt; does not match the &quot;A&quot; in &quot;an A&quot;, but does match the first &quot;A&quot; in &quot;An A&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/^A/&lt;/code&gt; 는 &quot;an A&quot;의 &quot;A&quot;와 일치하지 않지만 &quot;An A&quot;의 첫 번째 &quot;A&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d8627b8a39beff2d023b9ce420d597267ed2aac7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a+/&lt;/code&gt; matches the &quot;a&quot; in &quot;candy&quot; and all the &quot;a&quot;'s in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a+/&lt;/code&gt; 는 &quot;candy&quot;의 &quot;a&quot;및 &quot;caaaaaaandy&quot;의 모든 &quot;a&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="77f98d5935fe226c6d759c07f102de18c3583fba" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; matches &quot;apple, orange,&quot; in &quot;apple, orange, cherry, peach&quot;. A complete example follows this table.</source>
          <target state="translated">예를 들어, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; 은 &quot;apple, orange, cherry, peach&quot;의 &quot;apple, orange&quot;와 일치합니다. 이 테이블 다음에 완전한 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="08296657ebef91f76b34b0de5567df76b6e97cb4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{1,3}/&lt;/code&gt; matches nothing in &quot;cndy&quot;, the &quot;a&quot; in &quot;candy&quot;, the two &quot;a&quot;'s in &quot;caandy&quot;, and the first three &quot;a&quot;'s in &quot;caaaaaaandy&quot;. Notice that when matching &quot;caaaaaaandy&quot;, the match is &quot;aaa&quot;, even though the original string had more &quot;a&quot;'s in it.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a{1,3}/&lt;/code&gt; 은 &quot;cndy&quot;, &quot;candy&quot;의 &quot;a&quot;, &quot;a&quot;는 &quot;caandy&quot;, &quot;a&quot;는 &quot; caaaaaaandy &quot;. &quot;caaaaaaandy&quot;와 일치 할 때 원래 문자열에 &quot;a&quot;가 더 있어도 일치는 &quot;aaa&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="a90f3faff5967d1b354e84aa4ba89dec44e6af85" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2,}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but matches all of the a's in &quot;caandy&quot; and in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a{2,}/&lt;/code&gt; 는 &quot;candy&quot;의 &quot;a&quot;와 일치하지 않지만 &quot;caandy&quot;및 &quot;caaaaaaandy&quot;의 모든 a와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a4af36d397a8b981ed8a1d428eaa0a51abce8c20" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but it matches all of the &quot;a&quot;'s in &quot;caandy&quot;, and the first two &quot;a&quot;'s in &quot;caaandy&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a{2}/&lt;/code&gt; 는 &quot;candy&quot;의 &quot;a&quot;와 일치하지 않지만 &quot;caandy&quot;의 &quot;a&quot;와 &quot;caaandy의 첫 번째&quot;a &quot;와 모두 일치합니다. &quot;.</target>
        </trans-unit>
        <trans-unit id="3616762289f2ad86d25dbe81ba9ff555c4b706e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/b/&lt;/code&gt; matches the character &quot;b&quot;. By placing a backslash in front of &quot;b&quot;, that is by using &lt;code&gt;/\b/&lt;/code&gt;, the character becomes special to mean match a word boundary.</source>
          <target state="translated">예를 들어, &lt;code&gt;/b/&lt;/code&gt; 는 문자 &quot;b&quot;와 일치합니다. &quot;b&quot;앞에 백 슬래시를 배치하면 (즉, &lt;code&gt;/\b/&lt;/code&gt; 를 사용하여) 문자가 단어 경계와 일치하도록 특별 해집니다.</target>
        </trans-unit>
        <trans-unit id="8e340ac6bd33c408c1574b00399d8080044c2819" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/bo*/&lt;/code&gt; matches &quot;boooo&quot; in &quot;A ghost booooed&quot; and &quot;b&quot; in &quot;A bird warbled&quot;, but nothing in &quot;A goat grunted&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/bo*/&lt;/code&gt; 는 &quot;A Ghost warbled&quot;의 &quot;A ghost booooed&quot;에서 &quot;boooo&quot;및 &quot;b&quot;와 일치하지만 &quot;A goat grunted&quot;에서는 아무것도 없습니다.</target>
        </trans-unit>
        <trans-unit id="ee70c325b7fda48a36f20806ce19cd350a23827a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/e?le?/&lt;/code&gt; matches the &quot;el&quot; in &quot;angel&quot; and the &quot;le&quot; in &quot;angle.&quot;</source>
          <target state="translated">예를 들어, &lt;code&gt;/e?le?/&lt;/code&gt; 는 &quot;angel&quot;의 &quot;el&quot;및 &quot;angle&quot;의 &quot;le&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="0890428ef6f4a779e8ee5f7ad1dcddbac728b190" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/green|red/&lt;/code&gt; matches &quot;green&quot; in &quot;green apple&quot; and &quot;red&quot; in &quot;red apple&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/green|red/&lt;/code&gt; 는 &quot;green apple&quot;의 &quot;green&quot;및 &quot;red apple&quot;의 &quot;red&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="8133255e243f3bc7a528482f8249e11e97cbc601" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/t$/&lt;/code&gt; does not match the &quot;t&quot; in &quot;eater&quot;, but does match it in &quot;eat&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/t$/&lt;/code&gt; 는 &quot;eater&quot;의 &quot;t&quot;와 일치하지 않지만 &quot;eat&quot;에서는 일치합니다.</target>
        </trans-unit>
        <trans-unit id="5cc5b6d1d137d8d2cc001b6a446910cfa7fb6b4f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a safe integer: it can be exactly represented in IEEE-754, but the integer &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; can't be directly represented in IEEE-754 but instead rounds to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; under round-to-nearest and round-to-zero rounding. The safe integers consist of all integers from &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; inclusive to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; inclusive (&amp;plusmn; &lt;code&gt;9007199254740991&lt;/code&gt; or &amp;plusmn; 9,007,199,254,740,991).</source>
          <target state="translated">예를 들어, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; 안전한 정수 : 정확히 표현하지, 및 IEEE-754 둥근 모드 아래에 다른 정수 라운드 할 수있다. 대조적으로, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; 은 안전한 정수 가 &lt;em&gt;아닙니다&lt;/em&gt; : IEEE-754로 정확하게 표현 될 수 있지만, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; 의 정수 는 IEEE-754로 직접 표현 될 수 없지만 대신 가장 가까운 라운드에서 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; 으로 반올림됩니다. 그리고 0에서 반올림. 안전한 정수 모든 정수 구성 &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; 을 포함한 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; (&amp;plusmn; 포함 &lt;code&gt;9007199254740991&lt;/code&gt; 또는 &amp;plusmn; 9,007,199,254,740,991).</target>
        </trans-unit>
        <trans-unit id="1468820736d3768571efe41dbb75777077dfdee4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; yields 2:</source>
          <target state="translated">예를 들어, &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; 2 :</target>
        </trans-unit>
        <trans-unit id="43017361c6ef1192dc85fc698a7f5457aa051e32" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; yields 36:</source>
          <target state="translated">예를 들어, &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; 36을 산출합니다.</target>
        </trans-unit>
        <trans-unit id="d40cd50395c60e958fd69dd0d91559fbae320fed" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[^abc]&lt;/code&gt; is the same as &lt;code&gt;[^a-c]&lt;/code&gt;. They initially match &quot;o&quot; in &quot;bacon&quot; and &quot;h&quot; in &quot;chop&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;[^abc]&lt;/code&gt; 는 &lt;code&gt;[^a-c]&lt;/code&gt; 와 동일 합니다. 초기에는 &quot;베이컨&quot;에서 &quot;o&quot;, &quot;chop&quot;에서 &quot;h&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3e34984e389a74734f82bae79350f3d5f1e65463" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[abcd]&lt;/code&gt; is the same as &lt;code&gt;[a-d]&lt;/code&gt;. They match the &quot;b&quot; in &quot;brisket&quot; and the &quot;c&quot; in &quot;chop&quot;.</source>
          <target state="translated">예를 들어 &lt;code&gt;[abcd]&lt;/code&gt; 는 &lt;code&gt;[a-d]&lt;/code&gt; 와 같습니다 . &quot;브래킷&quot;의 &quot;b&quot;및 &quot;chop&quot;의 &quot;c&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2d4c70a562d592dc4b4f50eca2763191f11d3182" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;slice(1,4)&lt;/code&gt; extracts the second element through the fourth element (elements indexed 1, 2, and 3).</source>
          <target state="translated">예를 들어 &lt;code&gt;slice(1,4)&lt;/code&gt; 는 네 번째 요소 (인덱스 1, 2 및 3)를 통해 두 번째 요소를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="866a7c2ace957888375af096e8b401b5012bea84" translate="yes" xml:space="preserve">
          <source>For example, [\w-] is the same as [A-Za-z0-9_-]. They match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;n&quot; in &quot;non-profit&quot;.</source>
          <target state="translated">예를 들어 [\ w-]는 [A-Za-z0-9_-]와 동일합니다. &quot;브래킷&quot;의 &quot;b&quot;, &quot;chop&quot;의 &quot;c&quot;및 &quot;비영리&quot;의 &quot;n&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="1b85b07b0e9d23ce4d536e495de0c011cfeb1892" translate="yes" xml:space="preserve">
          <source>For example, [abcd-] and [-abcd] match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;-&quot; (hyphen) in &quot;non-profit&quot;.</source>
          <target state="translated">예를 들어, [abcd-] 및 [-abcd]는 &quot;브래킷&quot;의 &quot;b&quot;, &quot;chop&quot;의 &quot;c&quot;및 &quot;비영리&quot;의 &quot;-&quot;(하이픈)과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d534024361a43e9b767937a323c46e5884274247" translate="yes" xml:space="preserve">
          <source>For example, a bitwise AND of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0001&lt;/code&gt; which is 1 in decimal.</source>
          <target state="translated">예를 들어, 비트 AND &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 의 &lt;code&gt;0001&lt;/code&gt; 은 10의 1입니다.</target>
        </trans-unit>
        <trans-unit id="35dfc44891ed2854f3701d280c936b920ff7097c" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">예를 들어, 비트 단위 OR &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 은 &lt;code&gt;0101&lt;/code&gt; ( 10 진수 5)입니다.</target>
        </trans-unit>
        <trans-unit id="7323a4bc05d149bad307094ed612a35fbc241715" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 | 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">예를 들어, 비트 OR &lt;code&gt;5 | 1&lt;/code&gt; 결과 &lt;code&gt;0101&lt;/code&gt; 진수 5이다.</target>
        </trans-unit>
        <trans-unit id="ff16bc0ecdfd4fb29f2ad2e161dd9ad9ab4eaa13" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">예를 들면, 비트 단위 XOR &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 결과 &lt;code&gt;0100&lt;/code&gt; 진수 4이다.</target>
        </trans-unit>
        <trans-unit id="d1c2cefbc98e7cccd6aa2ad1f5d4474b54e230e7" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 ^ 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">예를 들면, 비트 단위 XOR &lt;code&gt;5 ^ 1&lt;/code&gt; 결과 &lt;code&gt;0100&lt;/code&gt; 진수 4이다.</target>
        </trans-unit>
        <trans-unit id="18a0c77ee8e8d786fbaa02174f49d557f339c981" translate="yes" xml:space="preserve">
          <source>For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPath&lt;/a&gt; instead of JavaScript code.</source>
          <target state="translated">예를 들어, 웹 페이지의 내용을 긁기 위해 설계된 확장 프로그램 은 JavaScript 코드 대신 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPath에&lt;/a&gt; 긁기 규칙이 정의되어있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30d78476f415ba39dfea6fce2e88c0a1b1289345" translate="yes" xml:space="preserve">
          <source>For example, assume you have this script:</source>
          <target state="translated">예를 들어,이 스크립트가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="bb063a9af9663d39a47eb4d1e7486590fe3ad853" translate="yes" xml:space="preserve">
          <source>For example, check if &lt;code&gt;baz&lt;/code&gt; object descends from &lt;code&gt;Foo.prototype&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;baz&lt;/code&gt; 객체가 &lt;code&gt;Foo.prototype&lt;/code&gt; 에서 내려 오는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="28f481915e88904767cd8c7e2eaf0055f62e4a76" translate="yes" xml:space="preserve">
          <source>For example, checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context, you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;노드&lt;/a&gt; 가 다른 컨텍스트 의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; 인지 확인하는 경우 &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e88872bda7dcb80ad8bdf7d45a7fe8e4824839d7" translate="yes" xml:space="preserve">
          <source>For example, dividing zero by zero results in a &lt;code&gt;NaN&lt;/code&gt; &amp;mdash; but dividing other numbers by zero does not.</source>
          <target state="translated">예를 들어, 0을 0으로 나누면 &lt;code&gt;NaN&lt;/code&gt; 이 발생 하지만 다른 숫자를 0으로 나누지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="69c55058ffebb896925e6bc270d2df44eabd3997" translate="yes" xml:space="preserve">
          <source>For example, if 0 is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt;, the date will be set to the last day of the previous month.</source>
          <target state="translated">예를 들어 &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; 에 0이 제공 되면 날짜는 이전 달의 마지막 날로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="34ab198aa4b01ccc2fc1e99847d64c05bdafb92c" translate="yes" xml:space="preserve">
          <source>For example, if a function is passed 3 arguments, you can access them as follows:</source>
          <target state="translated">예를 들어, 함수에 3 개의 인수가 전달되면 다음과 같이 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="937d79a6cfd454f4894cee8f40a83443bcd6a1f3" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &quot;Jack &amp;amp; Jill&quot;, the text may get encoded as &quot;Jack &amp;amp;amp; Jill&quot;. Without &lt;code&gt;encodeURIComponent&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">예를 들어, 사용자가 &quot;Jack &amp;amp; Jill&quot;을 작성하면 텍스트가 &quot;Jack &amp;amp; Jill&quot;로 인코딩 될 수 있습니다. &lt;code&gt;encodeURIComponent&lt;/code&gt; 가 없으면 앰퍼샌드는 서버에서 새 필드의 시작으로 해석되어 데이터 무결성을 위협 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2a4384a07fe7bac3504b23df1745b8a2d2a4643" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &lt;code&gt;Jack &amp;amp; Jill&lt;/code&gt;, the text may get encoded as &lt;code&gt;Jack &amp;amp;amp; Jill&lt;/code&gt;. Without &lt;code&gt;encodeURIComponent()&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">예를 들어 사용자가 &lt;code&gt;Jack &amp;amp; Jill&lt;/code&gt; 을 작성 하면 텍스트가 &lt;code&gt;Jack &amp;amp;amp; Jill&lt;/code&gt; . &lt;code&gt;encodeURIComponent()&lt;/code&gt; 없이는 앰퍼샌드가 서버에서 새 필드의 시작으로 해석되어 데이터의 무결성을 위협 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5799cfe8931ec98fb88c4a0444b5af94210cf13a" translate="yes" xml:space="preserve">
          <source>For example, if the buffer is 16 bytes long, the &lt;code&gt;byteOffset&lt;/code&gt; is 8, and the &lt;code&gt;byteLength&lt;/code&gt; is 10, this error is thrown because the resulting view tries to extend 2 bytes past the total length of the buffer.</source>
          <target state="translated">예를 들어, 버퍼 길이가 16 바이트이고 &lt;code&gt;byteOffset&lt;/code&gt; 이 8이고 &lt;code&gt;byteLength&lt;/code&gt; 가 10이면 결과 뷰가 버퍼의 전체 길이를 지나서 2 바이트를 확장하려고하기 때문에이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f667de28c6f09dc72511b3c72cdbcf9a60a30c1b" translate="yes" xml:space="preserve">
          <source>For example, if you had an object with a property named &lt;code&gt;3d&lt;/code&gt;, it can only be referenced using bracket notation.</source>
          <target state="translated">예를 들어, 속성이 &lt;code&gt;3d&lt;/code&gt; 인 객체가있는 경우 대괄호 표기법을 사용해서 만 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9623036ffbe9cadc02b09fb197118440205870ef" translate="yes" xml:space="preserve">
          <source>For example, if you have &lt;strong&gt;multiple arguments&lt;/strong&gt; or &lt;strong&gt;no arguments&lt;/strong&gt;, you'll need to re-introduce parentheses around the arguments:</source>
          <target state="translated">예를 들어 &lt;strong&gt;여러 인수가&lt;/strong&gt; 있거나 &lt;strong&gt;인수가 &lt;/strong&gt;&lt;strong&gt;없는 경우 인수를&lt;/strong&gt; 괄호로 다시 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="244a2aa8b9cb3ab3a65881329256b99f1e2c5386" translate="yes" xml:space="preserve">
          <source>For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt;; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 생성자 와 함께 사용할 다음과 같은 배열이 있다고 가정합니다 . &lt;code&gt;[2012, 11, 4]&lt;/code&gt; ; 이 경우 다음과 같이 작성해야합니다. &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bbc03761f9eac4f5b7dd03a95b3ade42914f7efb" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; block it is not required to initialize variables:</source>
          <target state="translated">예를 들어 &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; 블록에서는 변수를 초기화 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b02fbdba4483319e083506a278688555164aea94" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;em&gt;initialization&lt;/em&gt; block it is not required to initialize variables:</source>
          <target state="translated">예를 들어, &lt;em&gt;초기화&lt;/em&gt; 블록 에서 변수를 초기화 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="b10d4f788c270734ca92e90166633502ba4bbfb4" translate="yes" xml:space="preserve">
          <source>For example, in the following code an unhandled promise rejection error will be thrown, even if a &lt;code&gt;.catch&lt;/code&gt; handler has been configured further along the promise chain. This is because &lt;code&gt;p2&lt;/code&gt; will not be &quot;wired into&quot; the promise chain until control returns from &lt;code&gt;p1&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 다음 코드에서는 &lt;code&gt;.catch&lt;/code&gt; 핸들러가 promise 체인을 따라 추가로 구성 되었더라도 처리되지 않은 promise 거부 오류가 발생 합니다. 이는 제어가 &lt;code&gt;p1&lt;/code&gt; 에서 반환 될 때까지 &lt;code&gt;p2&lt;/code&gt; 가 promise 체인에 &quot;연결&quot;되지 않기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="99ec1dd0889b0f7d806f56f4eb1bb18db712b1fb" translate="yes" xml:space="preserve">
          <source>For example, suppose a script does &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt;, and &lt;code&gt;obj&lt;/code&gt; is not a proxy, and has no own property &lt;code&gt;.name&lt;/code&gt;, but it has a proxy on its prototype chain. That proxy's &lt;code&gt;set&lt;/code&gt; handler will be called, and &lt;code&gt;obj&lt;/code&gt; will be passed as the receiver.</source>
          <target state="translated">예를 들어, 스크립트가 &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt; 을 수행하고 &lt;code&gt;obj&lt;/code&gt; 가 프록시가 아니며 자체 속성 &lt;code&gt;.name&lt;/code&gt; 이 없지만 프로토 타입 체인에 프록시가 있다고 가정하십시오. 해당 프록시의 &lt;code&gt;set&lt;/code&gt; 핸들러가 호출되고 &lt;code&gt;obj&lt;/code&gt; 가 수신자로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="71916a917e381d9f4baa72eb7d0f481b27298684" translate="yes" xml:space="preserve">
          <source>For example, the following are equivalent:</source>
          <target state="translated">예를 들어 다음은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="cf3c80207a4428c3e01d80e5b0a5f1cb417b40ef" translate="yes" xml:space="preserve">
          <source>For example, the following syntax is often seen in many scripts.</source>
          <target state="translated">예를 들어 다음 구문은 많은 스크립트에서 자주 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0104484cd72318de837fc950dcc5c74b5243acc3" translate="yes" xml:space="preserve">
          <source>For example, the following two examples return same result.</source>
          <target state="translated">예를 들어 다음 두 예는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2467e34ebb06a05a1bf1438ed09bb680f3c3c652" translate="yes" xml:space="preserve">
          <source>For example, the following two functions are equivalent.</source>
          <target state="translated">예를 들어, 다음 두 기능은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0a5e19a07f0f940d54dbc5e573ed269580925a99" translate="yes" xml:space="preserve">
          <source>For example, the following:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="088fad1989d603ce1394ef481901b076020a1abe" translate="yes" xml:space="preserve">
          <source>For example, this code defines a simple target with just two properties, and an even simpler handler with no properties:</source>
          <target state="translated">예를 들어이 코드는 속성이 두 개 뿐인 단순한 대상과 속성이없는 더 단순한 처리기를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8762ede52d7e131b7a89f66401e61b7b5608dc17" translate="yes" xml:space="preserve">
          <source>For example, this syntax worked:</source>
          <target state="translated">예를 들어이 구문은 다음과 같이 작동했습니다.</target>
        </trans-unit>
        <trans-unit id="86aa87dc02431531a1951cc0ccafa84c378749c8" translate="yes" xml:space="preserve">
          <source>For example, when chaining expressions, trailing commas are not allowed.</source>
          <target state="translated">예를 들어, 식을 연결하는 경우 후행 쉼표는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="202acdf71c225449c011c82d77563f9f789c506e" translate="yes" xml:space="preserve">
          <source>For example, when using methods such as &lt;a href=&quot;global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; that returns the default constructor, you want these methods to return a parent &lt;code&gt;Array&lt;/code&gt; object, instead of the &lt;code&gt;MyArray&lt;/code&gt; object. The &lt;a href=&quot;global_objects/symbol/species&quot;&gt;&lt;code&gt;Symbol.species&lt;/code&gt;&lt;/a&gt; symbol lets you do this:</source>
          <target state="translated">예를 들어, 기본 생성자를 반환하는 &lt;a href=&quot;global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 과 같은 메서드를 사용하는 경우 이러한 메서드가 &lt;code&gt;MyArray&lt;/code&gt; 개체 대신 부모 &lt;code&gt;Array&lt;/code&gt; 개체 를 반환하려고 합니다. &lt;a href=&quot;global_objects/symbol/species&quot;&gt; &lt;code&gt;Symbol.species&lt;/code&gt; 의&lt;/a&gt; 기호는이 작업을 수행 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="72cf8e5e4e01454d7bd5aec5a5d5f1e02a408d12" translate="yes" xml:space="preserve">
          <source>For example, with the following HTML:</source>
          <target state="translated">예를 들어 다음 HTML을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="528dfe874f4c6aa065144a48883f47780d348e68" translate="yes" xml:space="preserve">
          <source>For example, you can use it on a single line:</source>
          <target state="translated">예를 들어 한 줄에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01a23d9503be041aca2248747ff63b7c2a66fcbb" translate="yes" xml:space="preserve">
          <source>For function calls:</source>
          <target state="translated">함수 호출의 경우 :</target>
        </trans-unit>
        <trans-unit id="4899d05a52dfbdd8e893cffe81a4b7588cd8afd5" translate="yes" xml:space="preserve">
          <source>For greater specificity in checking types, a &lt;code&gt;typeof&lt;/code&gt; wrapper for usage in production-level code would be as follows (provided &lt;code&gt;obj&lt;/code&gt; exists):</source>
          <target state="translated">유형 검사의 특이성을 높이기 위해 프로덕션 수준 코드에서 사용하기위한 &lt;code&gt;typeof&lt;/code&gt; 래퍼는 다음과 같습니다 ( &lt;code&gt;obj&lt;/code&gt; 가 존재하는 경우).</target>
        </trans-unit>
        <trans-unit id="f9351ecb7139ba4a292947d12e3373f477026a84" translate="yes" xml:space="preserve">
          <source>For instance, if another exception occurs inside a try's catch-block, any remaining code in the same outer try-block enclosing that try..catch (or in the main flow, if not in an outer try-block) , will not get executed, since control is immediately transferred to the outer try's catch-block (or the internal error-generator, if not in a try-block).</source>
          <target state="translated">예를 들어 try의 catch-block 내에서 다른 예외가 발생하면 try..catch를 포함하는 동일한 외부 try-block (또는 외부 try-block에없는 경우 주 흐름)에 남아있는 코드는 얻을 수 없습니다. 제어는 즉시 외부 try의 catch-block (또는 try-block에없는 경우 내부 오류 생성기)으로 전송되므로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e5c59bc69ad175064d7452caaf3a7309c82376dd" translate="yes" xml:space="preserve">
          <source>For instance, if condition a is &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;return&lt;/code&gt; this templated literal.</source>
          <target state="translated">예를 들어, 조건 a가 &lt;code&gt;true&lt;/code&gt; 이면 이 템플릿 화 된 리터럴 을 &lt;code&gt;return&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="3d6c2ff5aafe8379fafb6af50138a5bbb4622c48" translate="yes" xml:space="preserve">
          <source>For instance, the following example adds a method to the &lt;code&gt;Math&lt;/code&gt; object for calculating the &lt;em&gt;greatest common divisor&lt;/em&gt; of a list of arguments.</source>
          <target state="translated">예를 들어 다음 예제에서는 인수 목록의 &lt;em&gt;최대 공약수&lt;/em&gt; 를 계산 하기 위해 &lt;code&gt;Math&lt;/code&gt; 객체에 메서드를 추가합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1868c7d85f9039bc5f29a9b5c60931981ac4943c" translate="yes" xml:space="preserve">
          <source>For larger integers, consider using &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">더 큰 정수의 경우 &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="b0b6c7680b4411889f316e62858715f52104323d" translate="yes" xml:space="preserve">
          <source>For larger integers, consider using the &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">더 큰 정수의 경우 &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 유형 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="21711d63e992ed5c39c7e55a8b4160a3ddd59a3e" translate="yes" xml:space="preserve">
          <source>For migrating away from String generics, see also &lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;Warning: String.x is deprecated; use String.prototype.x instead&lt;/a&gt;.</source>
          <target state="translated">String 제네릭에서 마이그레이션하려면 &lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;경고 : String.x는 더 이상 사용되지 않습니다.를&lt;/a&gt; 참조하십시오 . 대신 String.prototype.x를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb079a75ce78aeb8e4751ad38cdd82e4e1931681" translate="yes" xml:space="preserve">
          <source>For more details and examples, see the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; reference page.</source>
          <target state="translated">자세한 내용과 예제는 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 참조 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e5c537fbbdfb46a6df802c4196646c039b2d58aa" translate="yes" xml:space="preserve">
          <source>For more details see the</source>
          <target state="translated">자세한 내용은</target>
        </trans-unit>
        <trans-unit id="565399faf193cd242082c77a9136a91023cacc82" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="537acebfecc5ae5d569fe9aa4cc7353d681d905f" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;../global_objects/date/parse&quot;&gt;&lt;code&gt;Date.parse()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../global_objects/date/parse&quot;&gt; &lt;code&gt;Date.parse()&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ec7bb7f7f306725bc0cc8d0a9596c029c14e67e" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">더 많은 예제와 설명 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;은 함수에 대한 JavaScript 안내서&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="29d5f8519fba312b94a2d3d21282946efe02f428" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">더 많은 예제와 설명 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;은 함수에 대한 JavaScript 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8c75dccfa7bff0491d015e11249ba2e60cb980b" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">더 많은 예제를 보려면 &lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt; 메서드 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b1d54ba61f44c6833dff7ca5a653708fc668d09" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../intl/numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../intl/datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">더 많은 예제는 &lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../intl/numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../intl/datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd469e9a34419903e864c6e6bb0279a91ed2b956" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">더 많은 예제는 &lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 페이지 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0de23395c0de08f95a240914e3c72a06c77acc1" translate="yes" xml:space="preserve">
          <source>For more information (but slower execution) use &lt;a href=&quot;match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; (similar to the regular expression &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">자세한 정보 (하지만 실행 속도가 느림)를 보려면 &lt;a href=&quot;match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 (정규 표현식 &lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 메서드 와 유사 ).</target>
        </trans-unit>
        <trans-unit id="2b2a62fa06a569a4e71db2218e5ef99dea39c4d2" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;BigInt&lt;/code&gt;, see also &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#BigInt_type&quot;&gt;JavaScript data structures&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;BigInt&lt;/code&gt; 에 대한 자세한 내용은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#BigInt_type&quot;&gt;JavaScript 데이터 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa45aa826bc67e52c3699e8add9da78f080b141c" translate="yes" xml:space="preserve">
          <source>For more information about the constructor syntax and the parameters, see &lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">생성자 구문 및 매개 변수에 대한 자세한 정보는 &lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray를&lt;/a&gt;&lt;/em&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb077bcb1697973ae809872951b88bd50d47f865" translate="yes" xml:space="preserve">
          <source>For more information and examples about methods, see &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definitions&lt;/a&gt;.</source>
          <target state="translated">메소드에 대한 자세한 정보 및 예제는 메소드 &lt;a href=&quot;../functions/method_definitions&quot;&gt;정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4147ffff788ad6e8dd732f25c8f44303ca5eff09" translate="yes" xml:space="preserve">
          <source>For more information on ES2015 generators, see &lt;a href=&quot;statements/function*&quot;&gt;the function* documentation&lt;/a&gt;.</source>
          <target state="translated">ES2015 생성기에 대한 자세한 내용 &lt;a href=&quot;statements/function*&quot;&gt;은 function * 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c20f6816b01b03bef7066dc636a8fdc827e288d4" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@replace&quot;&gt;&lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../regexp/@@replace&quot;&gt; &lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1d249c0c1e1c5c8d53c7694847144936b46861ae" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@search&quot;&gt;&lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../regexp/@@search&quot;&gt; &lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="22a55ca163b96bcc1e7fca930dc6fbd5e236d8e6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@split&quot;&gt;&lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../regexp/@@split&quot;&gt; &lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6e8482902bcbc4ca1024b1b563c87452c280bc6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;classes/private_class_fields&quot;&gt;private class fields&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;classes/private_class_fields&quot;&gt;개인 클래스 필드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cadad1fb936cd59a173ee4ad751226d192504b1" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">자세한 내용은 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c3d3fb5e56a0795c1d85cbb417c634f7eb2a1bef" translate="yes" xml:space="preserve">
          <source>For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">대부분의 언어에서 이것은 &lt;a href=&quot;string/tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="c0607794d251fdce700dc8d89c0e7d5e6e11c20f" translate="yes" xml:space="preserve">
          <source>For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">대부분의 언어에서 이것은 &lt;a href=&quot;string/touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="0ff1246a9ef90a722598fb1022139c892f34d135" translate="yes" xml:space="preserve">
          <source>For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 2, the same as &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt;:</source>
          <target state="translated">음수가 아닌 숫자의 경우 제로 채우기 오른쪽 이동 및 부호 전파 오른쪽 이동은 동일한 결과를 생성합니다. 예를 들어, &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; 는 &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; 와 같은 2를 산출합니다 .</target>
        </trans-unit>
        <trans-unit id="6d9507377b2f2c62fec727a5e7ce33f88d4c131d" translate="yes" xml:space="preserve">
          <source>For object &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">개체 &lt;code&gt;slice&lt;/code&gt; 개체 참조를 새 배열로 복사합니다. 원래 배열과 새 배열은 모두 동일한 객체를 참조합니다. 객체가 변경되면 변경 사항이 새 배열과 원래 배열 모두에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="948269bcb1af5d5bc928b45a45c3946fc9810b7e" translate="yes" xml:space="preserve">
          <source>For object literals (new in ECMAScript 2018):</source>
          <target state="translated">객체 리터럴 (ECMAScript 2018의 새로운 기능) :</target>
        </trans-unit>
        <trans-unit id="934a86b954c8fa55f872d6a94658543d7acf642d" translate="yes" xml:space="preserve">
          <source>For object references (and not the actual object), &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">실제 객체가 아닌 객체 참조의 경우 &lt;code&gt;slice&lt;/code&gt; 는 객체 참조를 새 배열에 복사합니다. 원래 배열과 새 배열은 모두 동일한 객체를 나타냅니다. 참조 된 객체가 변경되면 변경 사항이 새 배열과 원래 배열 모두에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f2ef7c7562983cf61dc4f265a8e5904aee8958ff" translate="yes" xml:space="preserve">
          <source>For octal &lt;code&gt;BigInt&lt;/code&gt; numbers, always use zero followed by the letter &quot;o&quot; (uppercase or lowercase):</source>
          <target state="translated">8 진수 &lt;code&gt;BigInt&lt;/code&gt; 숫자의 경우 항상 0 다음에 문자 &quot;o&quot;(대문자 또는 소문자)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5af6e6762708ddaa2c5f00a451db70105ec9d12f" translate="yes" xml:space="preserve">
          <source>For octal escape sequences, you can use hexadecimal escape sequences instead:</source>
          <target state="translated">8 진 이스케이프 시퀀스의 경우 16 진수 이스케이프 시퀀스를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9f59cbb942a8e1a9e18f6e55a2b55245320287c" translate="yes" xml:space="preserve">
          <source>For of iteration and destructuring</source>
          <target state="translated">반복 및 파괴</target>
        </trans-unit>
        <trans-unit id="68d3d4aadf2af6b1d406267a65a2761e6a41bcd2" translate="yes" xml:space="preserve">
          <source>For radices above &lt;code&gt;10&lt;/code&gt;, letters of the English alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt;. For example, for hexadecimal numbers (base &lt;code&gt;16&lt;/code&gt;), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</source>
          <target state="translated">기수가 &lt;code&gt;10&lt;/code&gt; 이상인 경우 영문자는 &lt;code&gt;9&lt;/code&gt; 보다 큰 숫자를 나타냅니다 . 예를 들어 16 진수 (기본 &lt;code&gt;16&lt;/code&gt; )의 경우 &lt;code&gt;A&lt;/code&gt; 에서 &lt;code&gt;F&lt;/code&gt; 까지 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ec534dca289b00a3b54f4910479eff1332f34eb9" translate="yes" xml:space="preserve">
          <source>For several versions, Firefox's SpiderMonkey engine had &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;a bug&lt;/a&gt; with regard to the &lt;code&gt;^&lt;/code&gt; assertion and the sticky flag which allowed expressions starting with the &lt;code&gt;^&lt;/code&gt; assertion and using the sticky flag to match when they shouldn't. The bug was introduced some time after Firefox 3.6 (which had the sticky flag but not the bug) and fixed in 2015. Perhaps because of the bug, the ES2015 specification &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;specifically calls out&lt;/a&gt; the fact that:</source>
          <target state="translated">여러 버전의 파이어 폭스의 SpiderMonkey를 엔진은 있었다 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;버그&lt;/a&gt; 받는 관한 &lt;code&gt;^&lt;/code&gt; 표현이로 시작 허용 주장과 스티키 플래그 &lt;code&gt;^&lt;/code&gt; 주장하고 때해야하지 일치하도록 스티키 플래그를 사용합니다. 이 버그는 Firefox 3.6 (스티커 플래그는 있지만 버그는 아님) 이후에 소개되어 2015 년에 수정되었습니다. 버그로 인해 ES2015 사양은 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;구체적으로&lt;/a&gt; 다음과 같은 사실을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="93c92034cd1eb47a40c418b73dd2c65b5a95c260" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English, use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">비 ASCII 문자가있는 문자열, 즉 악센트 부호가있는 문자 (e, ​​&amp;eacute;, &amp;egrave;, a, &amp;auml; 등)가있는 문자열, 영어가 아닌 언어의 문자열을 정렬하려면 &lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 이 함수는 해당 문자를 비교하여 올바른 순서로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b46591f15bdd7e9992fad829386c92aad2d66b7" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English: use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">ASCII가 아닌 문자가 포함 된 문자열, 즉 악센트 부호가있는 문자열 (e, &amp;eacute;, &amp;egrave;, a, &amp;auml; 등)을 정렬하려면 영어 이외의 언어 문자열 : &lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 이 기능을 사용하면 해당 문자를 올바른 순서로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="540a56d0783c49dbe2c11278be8b492feebaf797" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number or boolean in one array do not affect the other array.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체가 아닌 문자열 , 숫자 및 부울의 경우 &lt;code&gt;slice&lt;/code&gt; 는 값을 새 배열에 복사합니다. 한 배열에서 문자열, 숫자 또는 부울을 변경해도 다른 배열에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d444bd84437a0b6fcee2a95864c95e882927697" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number, or boolean in one array do not affect the other array.</source>
          <target state="translated">문자열, 숫자 및 부울 ( &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체가 아님)의 경우 &lt;code&gt;slice&lt;/code&gt; 는 값을 새 배열에 복사합니다. 한 배열에서 문자열, 숫자 또는 부울을 변경해도 다른 배열에는 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06785c7ab3ceabe53e023cc803f4cbcf0a2ea208" translate="yes" xml:space="preserve">
          <source>For that reason, it is recommended to always declare variables at the top of their scope (the top of global code and the top of function code) so it's clear which variables are function scoped (local) and which are resolved on the scope chain.</source>
          <target state="translated">따라서 항상 변수의 범위 맨 위 (글로벌 코드의 맨 위와 함수 코드의 맨 위)에 변수를 선언하는 것이 좋습니다. 따라서 어떤 변수가 함수 범위 (로컬)이고 범위 체인에서 해결되는지 명확하게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a8ab842102daf5a75a62664fc4cef78325333c6" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE &amp;lt; 9, then you will also need an Object.keys polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">위의 폴리 필 코드 스 니펫의 경우 IE &amp;lt;9를 지원해야하는 경우 Object.keys 폴리 필 (예 : &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; 페이지 에있는 폴리 필)도 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="2ff286ee9816975926ad2df5b818bca27d4aa4f3" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE&amp;lt;9, then you will also need an &lt;code&gt;Object.keys()&lt;/code&gt; polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">위의 폴리 필 코드 스 니펫의 경우 IE &amp;lt;9에 대한 지원이 필요하면 &lt;code&gt;Object.keys()&lt;/code&gt; 폴리 필 (예 : &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; 페이지 에있는 것)도 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="e86c69e41d5578c8ab620467b118befa7b4c82a3" translate="yes" xml:space="preserve">
          <source>For these reasons, the code may break when it encounters &lt;code&gt;String&lt;/code&gt; objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.</source>
          <target state="translated">이러한 이유로 인해 원시 문자열을 기대할 때 &lt;code&gt;String&lt;/code&gt; 객체를 만나면 코드가 손상 될 수 있지만 일반적으로 작성자는 구분에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e795205d3a92bb247c9c7bd22a188d11d61d947e" translate="yes" xml:space="preserve">
          <source>For this example we need either to stay parent constructor to continue to work properly or reassign static properties to child's constructor:</source>
          <target state="translated">이 예제에서는 부모 생성자를 유지하여 계속 제대로 작동하거나 정적 속성을 자식 생성자에 다시 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="a80fbe0f90b18884c38de565a55619dfc8eef409" translate="yes" xml:space="preserve">
          <source>For this example we need to stay parent constructor to continue to work properly.</source>
          <target state="translated">이 예제에서는 계속 제대로 작동하려면 부모 생성자를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="623d1636d2cb82911dcfaa1f03be33571ed68e0b" translate="yes" xml:space="preserve">
          <source>For this reason, you cannot expect to be able to compare the results of &lt;code&gt;toLocaleString()&lt;/code&gt; to a static value:</source>
          <target state="translated">이러한 이유로 &lt;code&gt;toLocaleString()&lt;/code&gt; 의 결과를 정적 값과 비교할 수는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d60021b97245913ab5c4645ab6423ee66b339bfc" translate="yes" xml:space="preserve">
          <source>For top-level documents, two headers will need to be set to cross-origin isolate your site:</source>
          <target state="translated">최상위 문서의 경우 사이트 간 격리를 위해 두 개의 헤더를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="7e72d021a9c7dcee914ef4ae15b51fa929f6676a" translate="yes" xml:space="preserve">
          <source>For values greater than 1 or less than -1, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">1보다 크거나 -1보다 작은 값의 경우 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="87dff4f71b0ce96c7e09b920f635128236b8af67" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.acos()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1보다 작거나 1보다 큰 값의 경우 &lt;code&gt;Math.acos()&lt;/code&gt; 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="07875d85c183bca60211acd95bc562b6d1f1151b" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.asin()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1보다 작거나 1보다 큰 값의 경우 &lt;code&gt;Math.asin()&lt;/code&gt; 은 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="dbccb44e1ad1d9938a16b005939cd9587366d68f" translate="yes" xml:space="preserve">
          <source>For values less than 1 &lt;code&gt;Math.acosh()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1보다 작은 값의 경우 &lt;code&gt;Math.acosh()&lt;/code&gt; 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9b6b3c574ade47a62c108d529c0e430d70e98212" translate="yes" xml:space="preserve">
          <source>For very small values of &lt;em&gt;x&lt;/em&gt;, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.</source>
          <target state="translated">매우 작은 &lt;em&gt;x&lt;/em&gt; 값의 경우 1을 추가하면 정밀도를 줄이거 나 없앨 수 있습니다. JS에서 사용되는 이중 부동 소수점은 약 15 자리의 정밀도를 제공합니다. 1 + 1e-15 = 1.000000000000001이지만 1 + 1e-16 = 1.000000000000000이므로 15에서 지난 자릿수가 반올림되므로 해당 산술에서 정확히 1.0입니다.</target>
        </trans-unit>
        <trans-unit id="04e11fb6d3be3c51b3a94e7dbcd6c14d6c2cfa81" translate="yes" xml:space="preserve">
          <source>For-each-in loops are deprecated</source>
          <target state="translated">For-each-in 루프는 더 이상 사용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="af0e67684b1c4abe6fb7b9901318f2329739aabd" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: Promises and Generators: control flow utopia -- JSConf EU 2013</source>
          <target state="translated">Forbes Lindesay : 약속 및 생성기 : 제어 흐름 유토피아-JSConf EU 2013</target>
        </trans-unit>
        <trans-unit id="7b32fb1f943493003851f2d112058fd52282df82" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: promisejs.org</source>
          <target state="translated">포브스 린데 세이 : promisejs.org</target>
        </trans-unit>
        <trans-unit id="a053925e9cf7d7a90e5b988e023b63f45b8b1600" translate="yes" xml:space="preserve">
          <source>Forgotten characters</source>
          <target state="translated">잊혀진 캐릭터</target>
        </trans-unit>
        <trans-unit id="a6261dda713480f61e179215417e7e8c9ea57961" translate="yes" xml:space="preserve">
          <source>Forgotten closing curly bracket</source>
          <target state="translated">잊혀진 닫는 중괄호</target>
        </trans-unit>
        <trans-unit id="736612168ad4b2ebbdea7fc60c97a690632ed1ff" translate="yes" xml:space="preserve">
          <source>Forgotten comma</source>
          <target state="translated">잊혀진 쉼표</target>
        </trans-unit>
        <trans-unit id="55550d89e7ca43740394fa9c2e706f8405aa15d0" translate="yes" xml:space="preserve">
          <source>Form feed</source>
          <target state="translated">용지 공급</target>
        </trans-unit>
        <trans-unit id="150d9f841097f64a42b925806fe3290abd9bc35d" translate="yes" xml:space="preserve">
          <source>Format String</source>
          <target state="translated">형식 문자열</target>
        </trans-unit>
        <trans-unit id="c9564ba8c76d4110b57b41baba092e3a50ad181e" translate="yes" xml:space="preserve">
          <source>Format of Date.prototype.toString is standardised.</source>
          <target state="translated">Date.prototype.toString의 형식이 표준화되었습니다.</target>
        </trans-unit>
        <trans-unit id="d885ea1814e7b1a55728852a1261e55f94c3db14" translate="yes" xml:space="preserve">
          <source>Formatting dates and numbers</source>
          <target state="translated">날짜 및 숫자 서식 지정</target>
        </trans-unit>
        <trans-unit id="98fa7137d9a2d748fcbbbfd8b1e23d8f46f9b4f2" translate="yes" xml:space="preserve">
          <source>Formatting dates: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt;&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">서식 날짜 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt; &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac8fc42d2b96064f7447761abb1d6b2a1cc4fe6c" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="d61bb5d1708bc7b38517ac71a7df63c26e5057f7" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="425c654a6ac340d691d752960a9e7f52569afd68" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="14546609f361e44ca966512a77290cf12a63fa3e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="60db126691b5722582058185268706c6e85661e3" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99164b3e66d1fe611117c5f5c408c48a0336e80b" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="0a7997ac147da1feac14077729de0f0f06e382f0" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="787212c5a9c84503f45356ae7e6124bb9b8bca71" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">전 비표준 버전 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="229f398e7f83b0bbc501b9d259ec99c5eadbf00e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전의 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9dc5fa3b4b962f46918bf70fff9a0ed4d0005fe6" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="61573e9050bbc7f9716c65c5a5be5d32c4b6dd10" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="01f10e37c5790e1fbab7120f2426462069f625d0" translate="yes" xml:space="preserve">
          <source>Fortunately, there's a very good alternative to &lt;code&gt;eval()&lt;/code&gt;: simply using &lt;a href=&quot;function&quot;&gt;&lt;code&gt;window.Function()&lt;/code&gt;&lt;/a&gt;. See this example of how to convert code using a dangerous &lt;code&gt;eval()&lt;/code&gt; to using &lt;code&gt;Function()&lt;/code&gt;, see below.</source>
          <target state="translated">다행히도 &lt;code&gt;eval()&lt;/code&gt; 대한 아주 좋은 대안이 있습니다 : 단순히 &lt;a href=&quot;function&quot;&gt; &lt;code&gt;window.Function()&lt;/code&gt; &lt;/a&gt; 사용하는 것입니다 . 위험한 &lt;code&gt;eval()&lt;/code&gt; 을 사용 하는 코드 를 &lt;code&gt;Function()&lt;/code&gt; 으로 변환하는 방법에 대한이 예제를 참조하십시오. 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0accbe68619f41f048c00252dd5cd3de52b67409" translate="yes" xml:space="preserve">
          <source>Four digit year (at least), padded on the left with zeros if necessary</source>
          <target state="translated">4 자리 연도 (최소), 필요한 경우 왼쪽이 0으로 채워짐</target>
        </trans-unit>
        <trans-unit id="48a73d90ee5399219a2b26ba8bbeaddc97c358c8" translate="yes" xml:space="preserve">
          <source>Fourth, strict mode prior to Gecko 34 requires that all properties named in an object literal be unique. The normal code may duplicate property names, with the last one determining the property's value. But since only the last one does anything, the duplication is simply a vector for bugs, if the code is modified to change the property value other than by changing the last instance. Duplicate property names are a syntax error in strict mode:</source>
          <target state="translated">넷째, Gecko 34 이전의 엄격 모드에서는 객체 리터럴로 명명 된 모든 속성이 고유해야합니다. 일반 코드는 속성 이름을 복제 할 수 있으며 마지막 이름은 속성 값을 결정합니다. 그러나 마지막 인스턴스 만 변경하기 때문에 코드가 마지막 인스턴스를 변경하는 것 이외의 속성 값을 변경하도록 수정되면 복제는 단순히 버그의 벡터입니다. 엄격한 모드에서 중복 속성 이름은 구문 오류입니다.</target>
        </trans-unit>
        <trans-unit id="4ca9f0aa5fd010590c2d9a5b1b7f430707dde52b" translate="yes" xml:space="preserve">
          <source>Freeing the contents of a variable</source>
          <target state="translated">변수 내용 해제</target>
        </trans-unit>
        <trans-unit id="342be9907aff8d146abb693da5c5fbdf10b3bfd4" translate="yes" xml:space="preserve">
          <source>Freezes an object. Other code cannot delete or change its properties.</source>
          <target state="translated">개체를 고정합니다. 다른 코드는 속성을 삭제하거나 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c12396c0b31eb0d4a22472ff15863783b40b01cf" translate="yes" xml:space="preserve">
          <source>Freezes an object: other code can't delete or change any properties.</source>
          <target state="translated">객체를 고정합니다. 다른 코드는 속성을 삭제하거나 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dda8928286e33df7e9ce870b122f4032e106574b" translate="yes" xml:space="preserve">
          <source>Freezing arrays</source>
          <target state="translated">배열 동결</target>
        </trans-unit>
        <trans-unit id="fff69c46ec0f3f13c6b9d6db7e3128d82b5edef7" translate="yes" xml:space="preserve">
          <source>Freezing objects</source>
          <target state="translated">객체 고정</target>
        </trans-unit>
        <trans-unit id="f845f4e8f7b96ac0598f032fd671c668cddf0fe3" translate="yes" xml:space="preserve">
          <source>From Chrome 42 to 48 strict mode is required. Non-strict mode support can be enabled using the flag &quot;Enable Experimental JavaScript&quot;.</source>
          <target state="translated">Chrome 42에서 48까지 엄격 모드가 필요합니다. &quot;실험용 JavaScript 활성화&quot;플래그를 사용하여 엄격하지 않은 모드 지원을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a74d82ca6d704d6a1739c2f0ba541b688f9663fa" translate="yes" xml:space="preserve">
          <source>From ES2015 onwards, a non-object argument will be coerced to an object.</source>
          <target state="translated">ES2015부터는 객체가 아닌 인수가 객체로 강제 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="c25679ace478e563cd698a280a119eebace2f598" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Map.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13에서 Firefox 18까지 &lt;code&gt;size&lt;/code&gt; 속성은 &lt;code&gt;Map.prototype.size()&lt;/code&gt; 메서드 로 구현 되었으며 이후 버전의 ECMAScript 2015 사양에 따라 속성으로 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="0e0b399dc9eebfc7d1990373abc52e0d61c10f38" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Set.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13에서 Firefox 18까지 &lt;code&gt;size&lt;/code&gt; 속성은 &lt;code&gt;Set.prototype.size()&lt;/code&gt; 메서드 로 구현 되었으며 이후 버전의 ECMAScript 2015 사양에 따라 속성으로 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="551d3389162532e90e92d427f16e210eab0145b2" translate="yes" xml:space="preserve">
          <source>From Internet Explorer 5.5 through 8, all elements of the array will not be deleted if &lt;code&gt;deleteCount&lt;/code&gt; is omitted. This behavior was fixed in Internet Explorer 9.</source>
          <target state="translated">Internet Explorer 5.5에서 8까지는 &lt;code&gt;deleteCount&lt;/code&gt; 를 생략 해도 배열의 모든 요소가 삭제되지 않습니다 . 이 동작은 Internet Explorer 9에서 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="ee3161c209cb087ce7f1ec61b18e678d56621e54" translate="yes" xml:space="preserve">
          <source>From a Base64 string</source>
          <target state="translated">Base64 문자열에서</target>
        </trans-unit>
        <trans-unit id="e9fcc3ba0dacb2c33f5572d6513c46ec1f51af44" translate="yes" xml:space="preserve">
          <source>From a local file</source>
          <target state="translated">로컬 파일에서</target>
        </trans-unit>
        <trans-unit id="59ccfc107d86a4ba03bdf450f5345eccf7570e45" translate="yes" xml:space="preserve">
          <source>From a string</source>
          <target state="translated">문자열에서</target>
        </trans-unit>
        <trans-unit id="3c0ab59efded56b63f6b9de125b17bebffc0ee1c" translate="yes" xml:space="preserve">
          <source>From an iterable object (Set)</source>
          <target state="translated">반복 가능한 객체 (Set)에서</target>
        </trans-unit>
        <trans-unit id="95b25b855817858fdde0a383b9816b0ebbbd9c77" translate="yes" xml:space="preserve">
          <source>From another static method</source>
          <target state="translated">다른 정적 메소드에서</target>
        </trans-unit>
        <trans-unit id="cdc7d2920f0a75374a2c82187a3825b5b375d499" translate="yes" xml:space="preserve">
          <source>From arguments to an array</source>
          <target state="translated">인수에서 배열로</target>
        </trans-unit>
        <trans-unit id="edb7e13687c4fd064af515ae57c789b549d14b28" translate="yes" xml:space="preserve">
          <source>From class constructor and other methods</source>
          <target state="translated">클래스 생성자 및 기타 메소드에서</target>
        </trans-unit>
        <trans-unit id="1ab51c50144aa0f901d80f0ccd25700a9ed4ce50" translate="yes" xml:space="preserve">
          <source>From the JavaScript Guide:</source>
          <target state="translated">JavaScript 가이드에서 :</target>
        </trans-unit>
        <trans-unit id="3ce37f1321a1df7acda07b02703feaf9ec4a6639" translate="yes" xml:space="preserve">
          <source>Fulfillment</source>
          <target state="translated">Fulfillment</target>
        </trans-unit>
        <trans-unit id="c72c051b28b8c78171bcbcf2fd4fcfe0b74f3d7a" translate="yes" xml:space="preserve">
          <source>Fulfillment:</source>
          <target state="translated">Fulfillment:</target>
        </trans-unit>
        <trans-unit id="9b556da9671d8001f81148151b0a6bfa6ee1ec5c" translate="yes" xml:space="preserve">
          <source>Full JSON syntax</source>
          <target state="translated">전체 JSON 구문</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="94666812ce5866cd1a15db937596988239737375" translate="yes" xml:space="preserve">
          <source>Function Call</source>
          <target state="translated">함수 호출</target>
        </trans-unit>
        <trans-unit id="c17d72a13ca98610038debcb2b1acf449da4ad6e" translate="yes" xml:space="preserve">
          <source>Function Properties of the &lt;code&gt;Module&lt;/code&gt; Constructor</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 생성자 의 함수 속성</target>
        </trans-unit>
        <trans-unit id="5bfbcebae9458d0af9e37589048c8edd93acdcad" translate="yes" xml:space="preserve">
          <source>Function body</source>
          <target state="translated">기능 바디</target>
        </trans-unit>
        <trans-unit id="11a9b2d4161e5ad9ec54d8d926e757e2efe309de" translate="yes" xml:space="preserve">
          <source>Function call overhead is minimal, making the far smaller code size well worth the benefit</source>
          <target state="translated">함수 호출 오버 헤드가 최소화되어 훨씬 작은 코드 크기로도 혜택을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6f490406ad4b3c4986a489d476e2a16ce80e13b" translate="yes" xml:space="preserve">
          <source>Function called on the wrong object</source>
          <target state="translated">잘못된 객체에서 호출 된 함수</target>
        </trans-unit>
        <trans-unit id="b00de2862aa946dfc63f1e8f57701a7ce09a0278" translate="yes" xml:space="preserve">
          <source>Function composition enabling piping</source>
          <target state="translated">배관 가능한 기능 구성</target>
        </trans-unit>
        <trans-unit id="d1af7f91669f189668c5eb3a09479b4ab49a0508" translate="yes" xml:space="preserve">
          <source>Function constructor name</source>
          <target state="translated">함수 생성자 이름</target>
        </trans-unit>
        <trans-unit id="ec3a38ff47b4e9447d9b4167f95723643ee1edca" translate="yes" xml:space="preserve">
          <source>Function context</source>
          <target state="translated">기능 문맥</target>
        </trans-unit>
        <trans-unit id="371cd61240f0b649474e4841824d099d52b4a785" translate="yes" xml:space="preserve">
          <source>Function declaration hoisting</source>
          <target state="translated">기능 선언 게양</target>
        </trans-unit>
        <trans-unit id="964604cea11cd6874a8ee2a3a7585807e1d95455" translate="yes" xml:space="preserve">
          <source>Function declarations in JavaScript are hoisted to the top of the enclosing function or global scope. You can use the function before you declared it:</source>
          <target state="translated">JavaScript에서 함수 선언은 묶는 함수 또는 전역 범위의 맨 위에 있습니다. 선언하기 전에 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0882844bfef9215bf1252619621dc4233118aee9" translate="yes" xml:space="preserve">
          <source>Function expression</source>
          <target state="translated">함수 표현</target>
        </trans-unit>
        <trans-unit id="17fb59f0733689ed2045be8aa3262ce6ec9a7435" translate="yes" xml:space="preserve">
          <source>Function expression hoisting</source>
          <target state="translated">함수식 게양</target>
        </trans-unit>
        <trans-unit id="daae0e7952ba89448f51a03b65028ea3105791cd" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;&lt;code&gt;function declarations&lt;/code&gt;&lt;/a&gt;. You can't use function expressions before you define them:</source>
          <target state="translated">JavaScript의 함수 표현식은 &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt; &lt;code&gt;function declarations&lt;/code&gt; &lt;/a&gt; 과 달리 게양되지 않습니다 . 함수 표현식은 정의하기 전에 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c255ed20dadf629d5459965af68b505c200db729" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;function declarations&lt;/a&gt;. You can't use function expressions before you create them:</source>
          <target state="translated">JavaScript의 함수 표현식은 &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;함수 선언&lt;/a&gt; 과 달리 호이스트되지 않습니다 . 함수 표현식을 생성하기 전에는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dc209ae9e238f3c0aff47d37bc404c3e7a2be0ad" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise. It accepts three arguments:</source>
          <target state="translated">함수는 배열의 각 요소를 테스트하는 술어입니다. 요소를 유지하려면 &lt;code&gt;true&lt;/code&gt; 를, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴하십시오 . 세 가지 주장을 받아들입니다.</target>
        </trans-unit>
        <trans-unit id="5127dd5f27f6c6a6d5f0d78ec539e5213cae7cca" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return a value that coerces to &lt;code&gt;true&lt;/code&gt; to keep the element, or to &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">함수는 배열의 각 요소를 테스트하는 술어입니다. 요소를 유지하려면 &lt;code&gt;true&lt;/code&gt; 로, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 로 강제 변환하는 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5a44c442ae585c40fccbf2f6faa786a10212d74f" translate="yes" xml:space="preserve">
          <source>Function names for getters and setters</source>
          <target state="translated">게터 및 세터의 함수 이름</target>
        </trans-unit>
        <trans-unit id="708c1dbb97c63bf19d7f91be53f2b8467bf5e2e1" translate="yes" xml:space="preserve">
          <source>Function names in classes</source>
          <target state="translated">클래스의 함수 이름</target>
        </trans-unit>
        <trans-unit id="fd9bc7843bf061faafecc018aa83931d7818ecba" translate="yes" xml:space="preserve">
          <source>Function object (implements [[Call]] in ECMA-262 terms)</source>
          <target state="translated">함수 객체 (ECMA-262 용어에서 [[Call]] 구현)</target>
        </trans-unit>
        <trans-unit id="1e0d99529d66efa9e16b2a37d29fa7405450d6fd" translate="yes" xml:space="preserve">
          <source>Function parameters</source>
          <target state="translated">기능 매개 변수</target>
        </trans-unit>
        <trans-unit id="672b8daa03c25145e5097f1862c9ef31387136fa" translate="yes" xml:space="preserve">
          <source>Function parameters must be identifiers when setting up a function. All these function declarations fail, as they are providing values for their parameters:</source>
          <target state="translated">기능을 설정할 때 기능 매개 변수는 식별자 여야합니다. 이러한 모든 함수 선언은 매개 변수의 값을 제공하므로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="5600fe54b54a8b636f91ef1623504e92aeaf1ae6" translate="yes" xml:space="preserve">
          <source>Function properties</source>
          <target state="translated">기능 속성</target>
        </trans-unit>
        <trans-unit id="6b465d97d33508de4883b2ea2aacf42b30c0c590" translate="yes" xml:space="preserve">
          <source>Function properties of the Global constructor</source>
          <target state="translated">글로벌 생성자의 함수 속성</target>
        </trans-unit>
        <trans-unit id="96d13c4b058b0e3603f90420cc0657996a50eabb" translate="yes" xml:space="preserve">
          <source>Function scope in the JavaScript Guide</source>
          <target state="translated">JavaScript 안내서의 기능 범위</target>
        </trans-unit>
        <trans-unit id="ab4bd9f09183936227e630a7c7b39b941aaf5590" translate="yes" xml:space="preserve">
          <source>Function shares a name with a pre-existing property</source>
          <target state="translated">함수가 기존 속성과 이름을 공유합니다</target>
        </trans-unit>
        <trans-unit id="bd3b89a4a10cf13f1260aab66f1be84bb80af97e" translate="yes" xml:space="preserve">
          <source>Function statement</source>
          <target state="translated">기능 설명</target>
        </trans-unit>
        <trans-unit id="eafea940d1e511a0a2f1cebf6796b3477ec72210" translate="yes" xml:space="preserve">
          <source>Function statement name</source>
          <target state="translated">함수명</target>
        </trans-unit>
        <trans-unit id="4cf12e2d177115edaad5e51ea329fbaa9987ccad" translate="yes" xml:space="preserve">
          <source>Function syntax</source>
          <target state="translated">함수 구문</target>
        </trans-unit>
        <trans-unit id="ea4d890dd16623c5c8446dce95b5a932109c776b" translate="yes" xml:space="preserve">
          <source>Function that is called for every element of &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt;. Each time &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; executes, the returned value is added to &lt;code&gt;&lt;var&gt;new_array&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt; 의 모든 요소에 대해 호출되는 함수입니다 . &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 실행될 때마다 반환 된 값이 &lt;code&gt;&lt;var&gt;new_array&lt;/var&gt;&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="3d8ee8398d60cc1a5f5c35466d2a76d13621895a" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new Array, taking three arguments:</source>
          <target state="translated">세 개의 인수를 사용하여 새 배열의 요소를 생성하는 함수 :</target>
        </trans-unit>
        <trans-unit id="e6f81952ca9f35c640c03b5be0a1ea2ca810fee4" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new typed array, taking three arguments:</source>
          <target state="translated">세 가지 인수를 사용하여 새로운 형식의 배열 요소를 생성하는 함수 :</target>
        </trans-unit>
        <trans-unit id="e0aaa783b56f46ef91a7fcf55d33b81a0f903750" translate="yes" xml:space="preserve">
          <source>Function to execute for each element, taking three arguments:</source>
          <target state="translated">세 가지 인수를 사용하여 각 요소에 대해 실행할 함수 :</target>
        </trans-unit>
        <trans-unit id="0a9a09fba73beb71e3ec6b2f4fced16c535d8900" translate="yes" xml:space="preserve">
          <source>Function to execute for each element.</source>
          <target state="translated">각 요소에 대해 실행할 기능.</target>
        </trans-unit>
        <trans-unit id="8245e0a7fd1fb6820a2bdc6134a7f51effa836cd" translate="yes" xml:space="preserve">
          <source>Function to execute for each element. See &lt;a href=&quot;#Description&quot;&gt;Description&lt;/a&gt; for details.</source>
          <target state="translated">각 요소에 대해 실행할 기능. 자세한 내용은 &lt;a href=&quot;#Description&quot;&gt;설명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="789b91b805025c1abb9b41a09ad7531dd443b8fd" translate="yes" xml:space="preserve">
          <source>Function to execute for each entry of &lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt;. It takes the following arguments:</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt; 의 각 항목에 대해 실행할 함수 입니다. 다음 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e59e92aca05dfc3936638050c64046f21a70c72f" translate="yes" xml:space="preserve">
          <source>Function to execute on each element in the array, taking four arguments:</source>
          <target state="translated">배열의 각 요소에서 실행되는 함수로 다음과 같은 네 가지 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8b0874ca6973cf3a686ef74edf9eb2c5aa9496a2" translate="yes" xml:space="preserve">
          <source>Function to execute on each element. It accepts between one and three arguments:</source>
          <target state="translated">각 요소에서 실행할 함수입니다. 1 ~ 3 개의 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="70dcfc2e124f327fc9032cb2b97496b173d1c660" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking 3 arguments:</source>
          <target state="translated">3 개의 인수를 사용하여 배열의 각 값에 대해 실행할 함수 :</target>
        </trans-unit>
        <trans-unit id="d9c16d36fcae4e723d177e4453f6bedf0139948a" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking four arguments:</source>
          <target state="translated">배열의 각 값에 대해 실행하는 함수로 4 개의 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e6195e252567d35a10d21eb1e04df6a69d8cfbdf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking three arguments:</source>
          <target state="translated">세 개의 인수를 사용하여 배열의 각 값에서 실행하는 함수 :</target>
        </trans-unit>
        <trans-unit id="06ab7f94fc517f961f4f408b0c5f87cd008986bf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking four arguments:</source>
          <target state="translated">타입이 지정된 배열의 각 값에서 실행되는 함수로, 네 개의 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5f6b934406be9d6249cdc1b3a19e92f08c41af81" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking three arguments:</source>
          <target state="translated">유형이 지정된 배열의 각 값에서 실행되는 함수로 세 가지 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d0399838948b85571daab359e55567d43009c4e7" translate="yes" xml:space="preserve">
          <source>Function to test against</source>
          <target state="translated">테스트 할 기능</target>
        </trans-unit>
        <trans-unit id="3675e65254805019fa03ca3bbd0a78cd966d0b59" translate="yes" xml:space="preserve">
          <source>Function to test each element of the typed array. Invoked with arguments &lt;code&gt;(element, index, typedarray)&lt;/code&gt;. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">형식화 된 배열의 각 요소를 테스트하는 함수입니다. 인수 &lt;code&gt;(element, index, typedarray)&lt;/code&gt; 와 함께 호출됩니다 . 요소를 유지하려면 &lt;code&gt;true&lt;/code&gt; 를, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e7473d030993e2d6eb3f57687483d5d690862bd" translate="yes" xml:space="preserve">
          <source>Function to test for each element, taking three arguments:</source>
          <target state="translated">세 가지 인수를 사용하여 각 요소를 테스트하는 함수 :</target>
        </trans-unit>
        <trans-unit id="ec0042429e084ef113ff136b415ef99aef55e4ca" translate="yes" xml:space="preserve">
          <source>Function.length</source>
          <target state="translated">Function.length</target>
        </trans-unit>
        <trans-unit id="fdbbb1ee0fc1df9dbe0f5ce2283603d07adf60ad" translate="yes" xml:space="preserve">
          <source>Function.name</source>
          <target state="translated">Function.name</target>
        </trans-unit>
        <trans-unit id="61048c595732199c0b042fcddcb8a4147d570f28" translate="yes" xml:space="preserve">
          <source>Function.prototype</source>
          <target state="translated">Function.prototype</target>
        </trans-unit>
        <trans-unit id="e8db8cd46941a2c6cb8556f8f50bea337d34209b" translate="yes" xml:space="preserve">
          <source>Function.prototype.toString result</source>
          <target state="translated">Function.prototype.toString 결과</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="c3b29c6be0b6a24a1feb33b3fab2c4f7ffa22f5d" translate="yes" xml:space="preserve">
          <source>Functions and classes</source>
          <target state="translated">함수와 클래스</target>
        </trans-unit>
        <trans-unit id="a993a7d52a753df1bbff39ffb1b6921b25fde081" translate="yes" xml:space="preserve">
          <source>Functions and function scope</source>
          <target state="translated">기능 및 기능 범위</target>
        </trans-unit>
        <trans-unit id="6673418c5f8022362be941a6c397594c4ab43b3a" translate="yes" xml:space="preserve">
          <source>Functions can be conditionally declared, that is, a function statement can be nested within an &lt;code&gt;if&lt;/code&gt; statement, however the results are inconsistent across implementations and therefore this pattern should not be used in production code. For conditional function creation, use function expressions instead.</source>
          <target state="translated">함수를 조건부로 선언 할 수 있습니다. 즉, 함수 명령문을 &lt;code&gt;if&lt;/code&gt; 문 내에 중첩 할 수 있지만 구현에서 결과가 일치하지 않으므로이 패턴을 프로덕션 코드에서 사용해서는 안됩니다. 조건부 함수 작성의 경우 함수 표현식을 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7a375adfd2b106044376f7940f10595ea47f0544" translate="yes" xml:space="preserve">
          <source>Functions created with the &lt;code&gt;Function&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;Function&lt;/code&gt; constructor was created. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a function expression.</source>
          <target state="translated">Function 생성자로 작성된 &lt;code&gt;Function&lt;/code&gt; 는 작성 컨텍스트에 대한 클로저를 작성하지 않습니다. 그들은 항상 글로벌 범위에서 만들어집니다. 그것들을 실행할 때, &lt;code&gt;Function&lt;/code&gt; 생성자가 작성된 범위의 변수가 아니라 자신의 로컬 변수 및 전역 변수에만 액세스 할 수 있습니다 . 이것은 함수 표현식을 위해 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 을 코드와 함께 사용하는 것과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="59d73efc9d6d784f8d7600d608f8c956ab9681d7" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...) create&lt;/code&gt;&lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">구문 구문 &lt;code&gt;new Function(...)&lt;/code&gt; 또는 그냥 &lt;code&gt;Function(...) create&lt;/code&gt; 작성된 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 객체를 생성 하며 이름은 &quot;익명&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="bd8f3ed7e9cf62bb2ef8799057f7ef8ed53c6712" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...)&lt;/code&gt; create &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">구문으로 생성 기능 &lt;code&gt;new Function(...)&lt;/code&gt; 하거나 &lt;code&gt;Function(...)&lt;/code&gt; 생성 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 객체를 자신의 이름이 &quot;익명&quot;이다.</target>
        </trans-unit>
        <trans-unit id="767b81b474f513e1ae3378489bb47b34cbac169b" translate="yes" xml:space="preserve">
          <source>Functions defined by function expressions and function declarations are parsed only once, while those defined by the &lt;code&gt;Function&lt;/code&gt; constructor are not. That is, the function body string passed to the &lt;code&gt;Function&lt;/code&gt; constructor must be parsed each and every time the constructor is called. Although a function expression creates a closure every time, the function body is not reparsed, so function expressions are still faster than &quot;&lt;code&gt;new Function(...)&lt;/code&gt;&quot;. Therefore the &lt;code&gt;Function&lt;/code&gt; constructor should generally be avoided whenever possible.</source>
          <target state="translated">함수 표현식과 함수 선언으로 정의 된 함수는 한 번만 구문 분석되지만 &lt;code&gt;Function&lt;/code&gt; 생성자에서 정의 된 함수는 분석 되지 않습니다. 즉, &lt;code&gt;Function&lt;/code&gt; 생성자에 전달 된 함수 본문 문자열 은 생성자가 호출 될 때마다 파싱해야합니다. 함수 표현식은 매번 클로저를 작성하지만 함수 본문은 재분석되지 않으므로 함수 표현식은 여전히 ​​&quot; &lt;code&gt;new Function(...)&lt;/code&gt; &quot; 보다 빠릅니다 . 따라서 &lt;code&gt;Function&lt;/code&gt; 생성자는 일반적으로 가능할 때마다 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="fea71cda87d91c331ea7710f6b634b839573601d" translate="yes" xml:space="preserve">
          <source>Functions defined inside function body</source>
          <target state="translated">함수 본문 내에 정의 된 함수</target>
        </trans-unit>
        <trans-unit id="edd7fcd1cb74de67d317175dfdbe9485ebef1286" translate="yes" xml:space="preserve">
          <source>Functions in the JavaScript Guide</source>
          <target state="translated">JavaScript 안내서의 함수</target>
        </trans-unit>
        <trans-unit id="bfa76ec20828c5499231c7f6de98463a13153ffb" translate="yes" xml:space="preserve">
          <source>Functions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed.</source>
          <target state="translated">자신을 재귀 적으로 호출하는 함수에는 이미 처리 된 개체를 추적하여 순환 데이터 구조를 보호하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="808e29a2e402297441116279af3d78e2c5812556" translate="yes" xml:space="preserve">
          <source>Functions which are part of an object (apart from the global scope) can be deleted with &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">객체의 일부인 (전역 범위를 제외하고) 함수는 &lt;code&gt;delete&lt;/code&gt; 로 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="519b03d9cd4fe17b24fdac2c2c1f48f9d5d19463" translate="yes" xml:space="preserve">
          <source>Fundamental objects</source>
          <target state="translated">기본 객체</target>
        </trans-unit>
        <trans-unit id="af96cb6cb2cb8bbbf404180840dbd3f203d28b86" translate="yes" xml:space="preserve">
          <source>Further calls to &lt;code&gt;test(&lt;var&gt;str&lt;/var&gt;)&lt;/code&gt; will resume searching &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; starting from &lt;code&gt;lastIndex&lt;/code&gt;. The &lt;code&gt;lastIndex&lt;/code&gt; property will continue to increase each time &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;test(&lt;var&gt;str&lt;/var&gt;)&lt;/code&gt; 대한 추가 호출 은 &lt;code&gt;lastIndex&lt;/code&gt; 에서 시작하여 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 검색을 다시 시작 합니다. &lt;code&gt;lastIndex&lt;/code&gt; 속성마다 계속 증가 할 것 &lt;code&gt;test()&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f56da1ac0eed73b36f6abe8c31e7f536f9ed32f4" translate="yes" xml:space="preserve">
          <source>Further, this technique could be extended to create jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to erase all higher set bits so that clz can then be used.</source>
          <target state="translated">또한이 기술을 확장하여 아래에서 볼 수있는 것처럼 점프없는 &quot;후행 0 계수&quot;및 &quot;후행 1 계수&quot;기능을 만들 수 있습니다. &lt;code&gt;ctrz&lt;/code&gt; 아래 함수는 가장 낮은 채워진 비트로 모든 상위 비트를 채운 다음 비트를 부정하여 모든 상위 세트 비트를 지워 clz를 사용할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="e0f4637b5c4a3036a3d75ea225910b8db3ffab0a" translate="yes" xml:space="preserve">
          <source>Further, this teqnique could be extended to creating jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to earase all higher set bits so that clz can then be used.</source>
          <target state="translated">또한이 teqnique는 아래에서 볼 수 있듯이 점프없는 &quot;Count Trailing Zeros&quot;및 &quot;Count Trailing Ones&quot;기능을 생성하도록 확장 될 수 있습니다. 아래 의 &lt;code&gt;ctrz&lt;/code&gt; 함수는 모든 채워진 비트를 가장 낮은 채움 비트로 채운 다음 비트를 무효화하여 모든 더 높은 세트의 비트를 이어 잡아서 clz를 사용할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="028e83b088bd223b83541d60f46f27cfb73bef3a" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;substr()&lt;/code&gt; is considered a &lt;strong&gt;legacy feature in ECMAScript&lt;/strong&gt; and could be removed from future versions, so it is best to avoid using it if possible.</source>
          <target state="translated">또한 &lt;code&gt;substr()&lt;/code&gt; 은 &lt;strong&gt;ECMAScript&lt;/strong&gt; 의 &lt;strong&gt;레거시 기능으로&lt;/strong&gt; 간주 되며 향후 버전에서 제거 될 수 있으므로 가능하면 사용하지 않는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e95bc397d4ac052736cf87b758eeb2c07cff1cb8" translate="yes" xml:space="preserve">
          <source>Future ECMAScript versions will likely introduce new syntax, and strict mode in ECMAScript 5 applies some restrictions to ease the transition. It will be easier to make some changes if the foundations of those changes are prohibited in strict mode.</source>
          <target state="translated">향후 ECMAScript 버전은 새로운 구문을 도입 할 것으로 예상되며 ECMAScript 5의 엄격 모드는 전환을 쉽게하기 위해 몇 가지 제한 사항을 적용합니다. 엄격 모드에서 이러한 변경의 기초가 금지 된 경우 일부 변경이 더 쉬울 것입니다.</target>
        </trans-unit>
        <trans-unit id="c206106a39358ac1d296043204ca34946d2e58c3" translate="yes" xml:space="preserve">
          <source>Future reserved keywords</source>
          <target state="translated">향후 예약 된 키워드</target>
        </trans-unit>
        <trans-unit id="b493f1c7f16fd418270a7c7b36ea4521bd5a8305" translate="yes" xml:space="preserve">
          <source>Future reserved keywords in older standards</source>
          <target state="translated">이전 표준의 향후 예약 키워드</target>
        </trans-unit>
        <trans-unit id="eeec35195b8fa6e3f75a2d7f1965493078ca0bf3" translate="yes" xml:space="preserve">
          <source>GMT and UTC are considered equivalent. The local time zone is used to interpret arguments in &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt; format that do not contain time zone information.</source>
          <target state="translated">GMT와 UTC는 동등한 것으로 간주됩니다. 현지 시간대는 시간대 정보를 포함하지 않는 &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 섹션 3.3&lt;/a&gt; 형식의 인수를 해석하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="48b5cf380b98788e6ec261d8df907dfa694f80ed" translate="yes" xml:space="preserve">
          <source>Gecko-specific notes</source>
          <target state="translated">도마뱀 관련 메모</target>
        </trans-unit>
        <trans-unit id="bf536d82538e3716aa45f22ff44fd02408c927f0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a function is a &quot;subprogram&quot; that can be &lt;em&gt;called&lt;/em&gt; by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the &lt;em&gt;function body&lt;/em&gt;. Values can be &lt;em&gt;passed&lt;/em&gt; to a function, and the function will &lt;em&gt;return&lt;/em&gt; a value.</source>
          <target state="translated">일반적으로 함수는 함수의 외부 (또는 재귀의 경우 내부) 코드 로 &lt;em&gt;호출&lt;/em&gt; 할 수있는 &quot;서브 프로그램&quot;입니다 . 프로그램 자체와 마찬가지로 함수는 &lt;em&gt;함수 body&lt;/em&gt; 라고하는 일련의 명령문으로 구성 됩니다. 값은 함수에 &lt;em&gt;전달&lt;/em&gt; 될 수 있으며 함수는 값 을 &lt;em&gt;반환&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="73d6b75809b724848c64268de10f6d2bb1d9bed7" translate="yes" xml:space="preserve">
          <source>Generally, if you don't know if a value is a promise or not, &lt;a href=&quot;promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve(value)&lt;/code&gt;&lt;/a&gt; it instead and work with the return value as a promise.</source>
          <target state="translated">일반적으로 값이 약속인지 여부를 모르는 경우 &lt;a href=&quot;promise/resolve&quot;&gt; &lt;code&gt;Promise.resolve(value)&lt;/code&gt; &lt;/a&gt; 대신 반환 값을 약속으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="65a78dd223dd91fcaee9d90ee9beff7dff817351" translate="yes" xml:space="preserve">
          <source>Generally, in most code it's very rare to see &lt;code&gt;new&lt;/code&gt; used on a bound function, so it is generally best to go with the first option.</source>
          <target state="translated">일반적으로 대부분의 코드 에서 바인딩 된 함수에 &lt;code&gt;new&lt;/code&gt; 가 사용되는 것은 매우 드물기 때문에 일반적으로 첫 번째 옵션을 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="37dfbd51d44cf4644175611088cd71ca34038f22" translate="yes" xml:space="preserve">
          <source>Generate a sequence of numbers</source>
          <target state="translated">일련의 숫자 생성</target>
        </trans-unit>
        <trans-unit id="1d20de03126b297e05c13a7d280f33e24c72c537" translate="yes" xml:space="preserve">
          <source>Generator</source>
          <target state="translated">Generator</target>
        </trans-unit>
        <trans-unit id="d3f2061539e543a51091b4d970d40aa70534574d" translate="yes" xml:space="preserve">
          <source>Generator Functions enable writing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;iterators&lt;/a&gt; more easily.</source>
          <target state="translated">생성기 함수를 사용하면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;반복자를&lt;/a&gt; 보다 쉽게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e142f1d86c6a656c893b034d595c0a2c316a2572" translate="yes" xml:space="preserve">
          <source>Generator as a computed property</source>
          <target state="translated">계산 된 속성으로서의 생성기</target>
        </trans-unit>
        <trans-unit id="94dba629617954b87149624231d0b9c8c8add564" translate="yes" xml:space="preserve">
          <source>Generator as an object method</source>
          <target state="translated">객체 메서드로서의 생성기</target>
        </trans-unit>
        <trans-unit id="046b63f03e98ea467eac58a8c9e48fd5a3dbef60" translate="yes" xml:space="preserve">
          <source>Generator as an object property</source>
          <target state="translated">객체 속성으로서의 생성기</target>
        </trans-unit>
        <trans-unit id="3e6c1576c99e691366d463b6cc7261f52436128a" translate="yes" xml:space="preserve">
          <source>Generator comprehensions</source>
          <target state="translated">발전기 이해</target>
        </trans-unit>
        <trans-unit id="ea618cb70bb6a900ab6754a69ae6cc8b7800d1ae" translate="yes" xml:space="preserve">
          <source>Generator comprehensions.</source>
          <target state="translated">발전기 이해력.</target>
        </trans-unit>
        <trans-unit id="760f7f62ed1bb4c4df9cae1aeb12d6e6a7d3cff3" translate="yes" xml:space="preserve">
          <source>Generator defined in an expression</source>
          <target state="translated">식에 정의 된 생성기</target>
        </trans-unit>
        <trans-unit id="8147ce33fc30c02f837dbffc168db88b0d2bb485" translate="yes" xml:space="preserve">
          <source>Generator example</source>
          <target state="translated">발전기 예</target>
        </trans-unit>
        <trans-unit id="e794b11cba8f11ca654cb29060aa1e3ce3e6b0fd" translate="yes" xml:space="preserve">
          <source>Generator methods</source>
          <target state="translated">발전기 방법</target>
        </trans-unit>
        <trans-unit id="c1435d362ab37b4b01f1069647bcc8d8375e7adc" translate="yes" xml:space="preserve">
          <source>Generator methods are not constructable (ES2016)</source>
          <target state="translated">생성기 방법을 구성 할 수 없음 (ES2016)</target>
        </trans-unit>
        <trans-unit id="6048aba4df24c5f501add490c86e5a00ceca6ecf" translate="yes" xml:space="preserve">
          <source>GeneratorFunction</source>
          <target state="translated">GeneratorFunction</target>
        </trans-unit>
        <trans-unit id="2a0186662d51266237099d799c6ba09ec8791ee4" translate="yes" xml:space="preserve">
          <source>GeneratorFunction.prototype</source>
          <target state="translated">GeneratorFunction.prototype</target>
        </trans-unit>
        <trans-unit id="19b9eb24b04f641254c53a3e7f692e1ee1738460" translate="yes" xml:space="preserve">
          <source>Generators and iterators in Firefox versions before 26</source>
          <target state="translated">Firefox 버전 26 이전의 생성기 및 반복기</target>
        </trans-unit>
        <trans-unit id="598e59e5777c5d9c20fe8167bf445d2664315ae7" translate="yes" xml:space="preserve">
          <source>Generators are functions that can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">생성기는 종료했다가 나중에 다시 입력 할 수있는 기능입니다. 해당 컨텍스트 (변수 바인딩)는 재진입시 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="efc1c21247260851933d4a582e95a94e6b02af01" translate="yes" xml:space="preserve">
          <source>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">생성기는 종료하고 나중에 다시 입력 할 수있는 기능입니다. 그들의 문맥 (가변 바인딩)은 재진입에 걸쳐 저장 될 것이다.</target>
        </trans-unit>
        <trans-unit id="869d87770dc1b9354d4e10914b5250ec24707455" translate="yes" xml:space="preserve">
          <source>Generators are not constructable</source>
          <target state="translated">발전기는 구성 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="4f0cd84055f0e4e5bb70077c4ce1a3815d964046" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;.</source>
          <target state="translated">JavaScript의 생성기 (특히 Promises와 결합 된 경우)는 &lt;a href=&quot;http://callbackhell.com/&quot;&gt;콜백 지옥 (Callback Hell)&lt;/a&gt; 및 &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;제어 반전 (Inversion of Control)&lt;/a&gt; 과 같은 콜백 문제를 완전히 제거하지는 않지만 완화시키는 비동기식 프로그래밍을위한 매우 강력한 도구입니다 .</target>
        </trans-unit>
        <trans-unit id="289f27e87bbd62506b66c91bc83fb45e1ac1646b" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;. However, an even simpler solution to these problems can be achieved with &lt;a href=&quot;async_function&quot;&gt;async functions&lt;/a&gt;.</source>
          <target state="translated">JavaScript의 제너레이터 (특히 Promises와 결합 된 경우)는 &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; 및 &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt; 과 같은 콜백 문제를 완전히 제거하지는 못하더라도 완화하므로 비동기 프로그래밍을위한 매우 강력한 도구입니다 . 그러나 이러한 문제에 대한 더 간단한 솔루션은 &lt;a href=&quot;async_function&quot;&gt;비동기 함수를&lt;/a&gt; 통해 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="50585588be2138822abbe8f8b1df2809a6a3a359" translate="yes" xml:space="preserve">
          <source>Generators should not be re-used, even if the &lt;code&gt;for...of&lt;/code&gt; loop is terminated early, for example via the &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; keyword. Upon exiting a loop, the generator is closed and trying to iterate over it again does not yield any further results.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; 루프가 예를 들어 &lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt; 키워드 를 통해 조기에 종료 된 경우에도 생성기를 재사용해서는 안됩니다 . 루프를 종료하면 생성기가 닫히고 다시 반복하려고 시도해도 더 이상 결과가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="19ff32cabc04ec23eb1a5aec10de0239f6e32924" translate="yes" xml:space="preserve">
          <source>Generic function</source>
          <target state="translated">일반 기능</target>
        </trans-unit>
        <trans-unit id="857bc90faf0413b73759698277c41331ae085628" translate="yes" xml:space="preserve">
          <source>Generic methods (non-standard)</source>
          <target state="translated">일반적인 방법 (비표준)</target>
        </trans-unit>
        <trans-unit id="469e0788e79d852a9a805ea846c580f27362cc2a" translate="yes" xml:space="preserve">
          <source>Gentle explanation of 'this' keyword in JavaScript</source>
          <target state="translated">JavaScript에서 'this'키워드에 대한 부드러운 설명</target>
        </trans-unit>
        <trans-unit id="f83d0b54329e66f173582e1190480dc976e5939b" translate="yes" xml:space="preserve">
          <source>Get Non-Enumerable Only</source>
          <target state="translated">숫자 만 허용</target>
        </trans-unit>
        <trans-unit id="96d7d9996736514d94d8665c714bc88031c21a2e" translate="yes" xml:space="preserve">
          <source>Get non-enumerable properties only</source>
          <target state="translated">열거 할 수없는 속성 만 가져 오기</target>
        </trans-unit>
        <trans-unit id="ac8081883e1d5686a080039aa13ba3a61df7e4fb" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since Unix Epoch</source>
          <target state="translated">Unix Epoch 이후의 시간 (초)을 가져옵니다</target>
        </trans-unit>
        <trans-unit id="cc48a219b2e420c26d82a0a469611fa88424b57a" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since the ECMAScript Epoch</source>
          <target state="translated">ECMAScript Epoch 이후의 시간 (초) 가져 오기</target>
        </trans-unit>
        <trans-unit id="24c89d564893863a779b5a6e9bbe9934dfe48687" translate="yes" xml:space="preserve">
          <source>Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 16 비트 정수 (short)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7c5b0df8b04a0c459aba5cd19fee72b7324990e0" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 32 비트 부동 소수점 (float)을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d609650bbdb5e336c7b9bb56379a37b51538aeea" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 32 비트 정수 (길이)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0e5cc6ced115c2b184167e3f8f66963001ef368a" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 64 비트 부동 소수점 (double)을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1dcff3ef5fec7543be1f9816175abb10166b11a3" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit integer (long long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작에서 지정된 바이트 오프셋에서 부호있는 64 비트 정수 (long long)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="81db90d6ffde9b6412bbe66c68c47ef4e7743159" translate="yes" xml:space="preserve">
          <source>Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 8 비트 정수 (바이트)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8fc72f256d25a90c98cdb40cba94a8871282ad94" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호없는 16 비트 정수 (부호없는 short)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d7f4131283bcadf677ce4db2eedf7e688f79ab97" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호없는 32 비트 정수 (부호없는 long)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="9e9ab26b9ed9c46b2c8810613671bb1eff49aa86" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 64-bit integer (unsigned long long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작에서 지정된 바이트 오프셋에서 부호없는 64 비트 정수 (부호없는 long long)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d5b761248a23b47f9e33c7eae9b8dc3f30519d6b" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호없는 8 비트 정수 (부호없는 바이트)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="96857c88cebeabc578d887e01fbcb2fd02cbcdb7" translate="yes" xml:space="preserve">
          <source>Getter</source>
          <target state="translated">Getter</target>
        </trans-unit>
        <trans-unit id="f2e54c330cdd01c6d47ab5b44eb43fb8cf8f5947" translate="yes" xml:space="preserve">
          <source>Getter and setter functions</source>
          <target state="translated">게터와 세터 함수</target>
        </trans-unit>
        <trans-unit id="cb65abe3705de84bc96c85c734723746cfaff77d" translate="yes" xml:space="preserve">
          <source>Getter only</source>
          <target state="translated">게터 만</target>
        </trans-unit>
        <trans-unit id="b82e2aa4437224c3ce65ca8da908b4469c7c2482" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 객체 의 정렬 순서에 따라 두 문자열을 비교하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c22fac77c009059affb217382c064ececfc99ac0" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 객체 의 정렬 순서에 따라 두 문자열을 비교하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b3bbfe3f0cad3780f6ed32aa64f5415f3f02b3ea" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 날짜의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="101493502c3dabb33abe624e85075b4278d7088d" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 날짜의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="0d595a3294f368cb93ba183d5cf3d0d933407b9a" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 숫자의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="d32338c2f6c2e1ff3f7f292dd7d93f2f42a2385e" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 숫자의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f51c7283f5fc0d078770fc5011a7b53470280401" translate="yes" xml:space="preserve">
          <source>Getters give you a way to &lt;em&gt;define&lt;/em&gt; a property of an object, but they do not &lt;em&gt;calculate&lt;/em&gt; the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.</source>
          <target state="translated">Getter 는 객체의 속성 을 &lt;em&gt;정의&lt;/em&gt; 하는 방법을 제공 하지만 액세스 할 때까지 속성의 값을 &lt;em&gt;계산&lt;/em&gt; 하지 않습니다 . 게터는 값이 필요할 때까지 값 계산 비용을 연기합니다. 필요하지 않은 경우 비용을 지불하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8ea8a70e0c66dbc7cdb18bf43206be829e1c2b4" translate="yes" xml:space="preserve">
          <source>Getters give you a way to define a property of an object, but they do not calculate the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed, and if it is never needed, you never pay the cost.</source>
          <target state="translated">Getter는 객체의 속성을 정의하는 방법을 제공하지만 속성에 액세스 할 때까지 속성 값을 계산하지 않습니다. 게터는 값이 필요할 때까지 값을 계산하는 비용을 연기하며, 필요하지 않은 경우 절대 비용을 지불하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b65d9b412c6df59f988b1cc08ddee0764855c0ac" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values</source>
          <target state="translated">두 값 사이의 임의의 정수 얻기</target>
        </trans-unit>
        <trans-unit id="e006e97377ead1206e5712837e81f4c8008e48bd" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values, inclusive</source>
          <target state="translated">두 값 사이의 임의의 정수 가져 오기</target>
        </trans-unit>
        <trans-unit id="a7aaee129f91cb0de88f607c96a13e02b3eadf9e" translate="yes" xml:space="preserve">
          <source>Getting a random number between 0 (inclusive) and 1 (exclusive)</source>
          <target state="translated">0 (포함)과 1 (제외) 사이의 난수 얻기</target>
        </trans-unit>
        <trans-unit id="e7e9b5402b7c69e9cfcf0a3dc0c6734f74f10e42" translate="yes" xml:space="preserve">
          <source>Getting a random number between two values</source>
          <target state="translated">두 값 사이의 난수 구하기</target>
        </trans-unit>
        <trans-unit id="9cdb6a445dbcaa1ef224574cb3e4c4af50c03c03" translate="yes" xml:space="preserve">
          <source>Getting an array buffer from existing data</source>
          <target state="translated">기존 데이터에서 배열 버퍼 가져 오기</target>
        </trans-unit>
        <trans-unit id="0c5070744f1dae1186acd94d2236210213d9a650" translate="yes" xml:space="preserve">
          <source>Getting it to work with higher values</source>
          <target state="translated">더 높은 값으로 작동하도록하기</target>
        </trans-unit>
        <trans-unit id="95954ee87db9f0acbfea36a4c6b6016a61fd3d3e" translate="yes" xml:space="preserve">
          <source>Getting the global context: &lt;a href=&quot;../global_objects/globalthis&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">글로벌 컨텍스트 얻기 : &lt;a href=&quot;../global_objects/globalthis&quot;&gt; &lt;code&gt;globalThis&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93fa8562e2ad496efa70d8d322f9289d62409ab4" translate="yes" xml:space="preserve">
          <source>Getting the maximum element of an array</source>
          <target state="translated">배열의 최대 요소 얻기</target>
        </trans-unit>
        <trans-unit id="159afb1c4f6c9a04181e9922b1f6ba14fa8bf7f4" translate="yes" xml:space="preserve">
          <source>Getting whole characters</source>
          <target state="translated">전체 문자 얻기</target>
        </trans-unit>
        <trans-unit id="c7b80d1da362b36bfdf86ed39ef7c4eb5beb6a45" translate="yes" xml:space="preserve">
          <source>Github - Proposal-pipeline-operator</source>
          <target state="translated">Github-제안 파이프 라인 연산자</target>
        </trans-unit>
        <trans-unit id="1ccf04e9757d71b593670b6503b8dfb8626fea28" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns 'border-top'.</source>
          <target state="translated">&lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; 이 주어지면 'border-top'을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1cbcc3faa93f2d068c8c5e13ce1cbe4bbad1c49e" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns &lt;code&gt;'border-top'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; 이 주어지면 &lt;code&gt;'border-top'&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8cf85e175fcc3bf8d435c791b50a25d2626fc4d0" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt; and string, returns a copy of the contents of all custom sections in the module with the given string name.</source>
          <target state="translated">주어진 &lt;code&gt;Module&lt;/code&gt; 및 문자열, 지정된 문자열 이름을 가진 모듈의 모든 사용자 정의 섹션의 내용의 카피를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="71816309ab49deddc634406a637aa5de13c077ff" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared exports.</source>
          <target state="translated">주어진 &lt;code&gt;Module&lt;/code&gt; 은 선언 된 모든 내보내기에 대한 설명이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f856fccf3beb4cca4ef1ea953cc00f8bd48e12ac" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared imports.</source>
          <target state="translated">주어진 &lt;code&gt;Module&lt;/code&gt; 은 선언 된 모든 가져 오기에 대한 설명이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dd5ae485e18c7c0ddc8083d7c7bb31df74e1088c" translate="yes" xml:space="preserve">
          <source>Given a date string of &lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given an ISO format such as &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">날짜 문자열이 &lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt; 이면 &lt;code&gt;parse()&lt;/code&gt; 는 현지 시간대를 가정하지만 &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; 과 같은 ISO 형식을 사용하면 UTC (ES5 및 ECMAScript 2015)의 시간대를 가정합니다. 따라서 해당 문자열을 사용하여 생성 된 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체는 시스템이 현지 시간대 UTC로 설정되어 있지 않으면 지원되는 ECMAScript 버전에 따라 다른 시점을 나타낼 수 있습니다. 이는 동등한 것으로 보이는 두 개의 날짜 문자열이 변환되는 문자열의 형식에 따라 두 개의 다른 값을 초래할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f9c73621eb8378bc40ca8b96e5182b675e0b3c0c" translate="yes" xml:space="preserve">
          <source>Given a module &lt;code&gt;my-module.js&lt;/code&gt;</source>
          <target state="translated">모듈 &lt;code&gt;my-module.js&lt;/code&gt; 가 주어짐</target>
        </trans-unit>
        <trans-unit id="f6e9202ed4a0bee0090059436feae9f4d70aaff5" translate="yes" xml:space="preserve">
          <source>Given a non-standard date string of &quot;&lt;code&gt;March 7, 2014&lt;/code&gt;&quot;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given a simplification of the ISO 8601 calendar date extended format such as &quot;&lt;code&gt;2014-03-07&lt;/code&gt;&quot;, it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">&quot;의 표준이 아닌 날짜 문자열을 감안할 때 &lt;code&gt;March 7, 2014&lt;/code&gt; ,&quot; &lt;code&gt;parse()&lt;/code&gt; , 로컬 시간대 가정하지만, 같은 &quot;로 ISO 8601 달력 날짜 확장 형식의 단순화를 부여 &lt;code&gt;2014-03-07&lt;/code&gt; &quot;, 그것은을 가정합니다 UTC 표준 시간대 (ES5 및 ECMAScript 2015). 따라서 이러한 문자열을 사용하여 생성 된 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체는 시스템이 UTC의 로컬 시간대로 설정되지 않는 한 지원되는 ECMAScript의 버전에 따라 다른 시점을 나타낼 수 있습니다. 즉, 동일하게 표시되는 두 개의 날짜 문자열이 변환되는 문자열의 형식에 따라 두 개의 다른 값이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35be346396e126b3b89b1cd82cc0c32b468472ae" translate="yes" xml:space="preserve">
          <source>Given a shared &lt;code&gt;Int32Array&lt;/code&gt;:</source>
          <target state="translated">공유 된 &lt;code&gt;Int32Array&lt;/code&gt; 가 주어진 경우 :</target>
        </trans-unit>
        <trans-unit id="d6fd3993d58d86b8a2d1b9dacc8bf0a3179cf150" translate="yes" xml:space="preserve">
          <source>Given a string representing a time, &lt;code&gt;parse()&lt;/code&gt; returns the time value. It accepts the RFC2822 / IETF date syntax (&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt;), e.g. &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt;. It understands the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian).</source>
          <target state="translated">시간을 나타내는 문자열이 주어지면 &lt;code&gt;parse()&lt;/code&gt; 는 시간 값을 반환합니다. RFC2822 / IETF 날짜 구문 ( &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 섹션 3.3&lt;/a&gt; )을 수락합니다 ( 예 : &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt; . 미국 대륙 표준 시간대 약어를 이해하지만 일반적으로 사용하려면 &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; (그리니치 자오선에서 동쪽으로 4 시간 30 분)과 같은 시간대 오프셋을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="95e6727da6ca58f8c51ff5196575c2e7fcac3248" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example counts the number of items that passes all the tests.</source>
          <target state="translated">항목 배열과 테스트 배열이 주어지면이 예제는 모든 테스트를 통과 한 항목 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="ed0e87792cb402fa5496b2410e4f2a4d126225e0" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example determines whether all items pass all tests.</source>
          <target state="translated">항목 배열과 테스트 배열이 주어지면이 예제는 모든 항목이 모든 테스트를 통과하는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="ce988ebc4e75168602f3d1de0e938f1b059ff589" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">모듈 &lt;code&gt;my-module&lt;/code&gt; 에서 내 보낸 (내부 전체 모듈을 내보내므로) 또는 명시 적으로 ( &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; 문을 사용하여) &lt;code&gt;myExport&lt;/code&gt; 라는 객체 또는 값을 지정 하면 &lt;code&gt;myExport&lt;/code&gt; 가 현재 범위에 삽입 됩니다.</target>
        </trans-unit>
        <trans-unit id="69376498e6019aa34656f953a77822cfbd1dc255" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported, for example using &lt;code&gt;export * from 'another.js'&lt;/code&gt;) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">&lt;code&gt;my-module&lt;/code&gt; 모듈에서 내 보낸 &lt;code&gt;myExport&lt;/code&gt; 라는 이름의 개체 또는 값 이 암시 적으로 (예 &lt;code&gt;export * from 'another.js'&lt;/code&gt; 사용하여 전체 모듈이 내보내지기 때문에 ) 또는 명시 적으로 ( &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; 문 사용) 다음이 삽입됩니다. 현재 범위로 &lt;code&gt;myExport&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffa489942e5ce90ee9348d67bca34bc046d3d1a8" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;for...in&lt;/code&gt; is built for iterating object properties, not recommended for use with arrays, and options like &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; exist, what might be the use of &lt;code&gt;for...in&lt;/code&gt; at all?</source>
          <target state="translated">감안할 &lt;code&gt;for...in&lt;/code&gt; 개체 속성을 반복 위해 구축 같은 배열 및 옵션을 사용하지 않는 것이 좋습니다 &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; 와 &lt;code&gt;for...of&lt;/code&gt; 존재, 무엇의 사용 될 수 &lt;code&gt;for...in&lt;/code&gt; 조금도?</target>
        </trans-unit>
        <trans-unit id="57777d79c2c7fcb95a77d48ba531eb7fb132081d" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">감안할 때 &lt;code&gt;this&lt;/code&gt; 주변 어휘 문맥에서 온다, &lt;a href=&quot;../strict_mode&quot;&gt;엄격한 모드&lt;/a&gt; 에 관한 규칙 &lt;code&gt;this&lt;/code&gt; 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="118a8602658c501cc841b17b0c4e058cb5605a35" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;code&gt;&lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/code&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">감안할 때 &lt;code&gt;this&lt;/code&gt; 주변 어휘 문맥에서 온다, &lt;code&gt;&lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/code&gt; 에 관한 규칙 &lt;code&gt;this&lt;/code&gt; 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="54f2ff8a238acabb2079588d5c2033656ef069ee" translate="yes" xml:space="preserve">
          <source>Given the following code:</source>
          <target state="translated">다음 코드가 주어진다 :</target>
        </trans-unit>
        <trans-unit id="66cc8f0aba96a51c396c49f13e7a6a7e2cfea340" translate="yes" xml:space="preserve">
          <source>Global Context</source>
          <target state="translated">글로벌 컨텍스트</target>
        </trans-unit>
        <trans-unit id="b5cdadeb82c625264f87984cdb7712780b8ec0e8" translate="yes" xml:space="preserve">
          <source>Global Objects</source>
          <target state="translated">글로벌 객체</target>
        </trans-unit>
        <trans-unit id="9c1d41d613e2de602e0cfbbc37dd6fb38c9598e2" translate="yes" xml:space="preserve">
          <source>Global context</source>
          <target state="translated">글로벌 컨텍스트</target>
        </trans-unit>
        <trans-unit id="d1a3f442a9873910f12738a060cce503718a5808" translate="yes" xml:space="preserve">
          <source>Global instances</source>
          <target state="translated">글로벌 인스턴스</target>
        </trans-unit>
        <trans-unit id="6c1092b384c391c235bf0f03a6b067bc9829d4dd" translate="yes" xml:space="preserve">
          <source>Global objects</source>
          <target state="translated">글로벌 객체</target>
        </trans-unit>
        <trans-unit id="8a4af69f1f63429ee0c62b75219b583716fe311b" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;global and ignore case flags&lt;/a&gt; which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of &lt;code&gt;'apples'&lt;/code&gt; in the string with &lt;code&gt;'oranges'&lt;/code&gt;.</source>
          <target state="translated">전역 바꾸기는 정규식으로 만 수행 할 수 있습니다. 다음 예제에서 정규 표현식에는 문자열에서 &lt;code&gt;'apples'&lt;/code&gt; 의 각 항목을 &lt;code&gt;'oranges'&lt;/code&gt; 로 바꾸는 &lt;code&gt;replace()&lt;/code&gt; 를 허용 하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;전역 및 대소 문자 무시 플래그가&lt;/a&gt; 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="20c3687f785130a94e95b82635515a9bed2f11aa" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of 'apples' in the string with 'oranges'.</source>
          <target state="translated">전역 바꾸기는 정규식으로 만 수행 할 수 있습니다. 다음 예제에서 정규식에는 global 및 ignore case 플래그가 포함되어 있으며, &lt;code&gt;replace()&lt;/code&gt; 는 문자열에서 'apples'의 각 항목을 'oranges'로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcd2f358507f46dacf4e333df045d970161f3961" translate="yes" xml:space="preserve">
          <source>Global search.</source>
          <target state="translated">글로벌 검색.</target>
        </trans-unit>
        <trans-unit id="167937e0f76150c8fbf7b4c427c862e86b880570" translate="yes" xml:space="preserve">
          <source>Global symbol registry</source>
          <target state="translated">글로벌 심볼 레지스트리</target>
        </trans-unit>
        <trans-unit id="2d42c9982fdb6c0ca28b87b881b760533f39e3bf" translate="yes" xml:space="preserve">
          <source>Glossary: &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt;</source>
          <target state="translated">용어 : &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;생성자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b29ffb55e0badb65375a434cf64ab1147fe24e3" translate="yes" xml:space="preserve">
          <source>Glossary: Symbol data type</source>
          <target state="translated">용어집 : 기호 데이터 유형</target>
        </trans-unit>
        <trans-unit id="3ed7f82aff7c093f6dce93e01e74889c131e51f5" translate="yes" xml:space="preserve">
          <source>Good variable names</source>
          <target state="translated">좋은 변수 이름</target>
        </trans-unit>
        <trans-unit id="693f74831dc013209e1555b1f5c7cc96e6a7244c" translate="yes" xml:space="preserve">
          <source>Google Chrome will accept a numerical string as a valid &lt;code&gt;&lt;em&gt;dateString&lt;/em&gt;&lt;/code&gt; parameter. This means that, for instance, while &lt;code&gt;!!Date.parse(&quot;42&quot;)&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; in Firefox, it evaluates to &lt;code&gt;true&lt;/code&gt; in Google Chrome because &quot;&lt;code&gt;42&lt;/code&gt;&quot; is interpreted as January 1&lt;sup&gt;st&lt;/sup&gt;, 2042.</source>
          <target state="translated">Google 크롬은 유효한 &lt;code&gt;&lt;em&gt;dateString&lt;/em&gt;&lt;/code&gt; 매개 변수 로 숫자 문자열을 허용합니다 . 예를 들어, 동안,이 수단 &lt;code&gt;!!Date.parse(&quot;42&quot;)&lt;/code&gt; 로 평가 &lt;code&gt;false&lt;/code&gt; 파이어 폭스에서, 그것은 평가 &lt;code&gt;true&lt;/code&gt; &quot;때문에 구글 크롬 &lt;code&gt;42&lt;/code&gt; &quot;1월 1일로 해석됩니다 &lt;sup&gt;일&lt;/sup&gt; , 2042.</target>
        </trans-unit>
        <trans-unit id="18e43c184811802315da94a97ea03158c2b342c5" translate="yes" xml:space="preserve">
          <source>Gotchas when throwing errors</source>
          <target state="translated">오류가 발생했을 때 발생하는 문제</target>
        </trans-unit>
        <trans-unit id="755f5dc8338fdd2b9f3422f770363e935afd3aac" translate="yes" xml:space="preserve">
          <source>Gradual transition</source>
          <target state="translated">점진적 전환</target>
        </trans-unit>
        <trans-unit id="7be07c875cfba8e109b4abbd611ba4cce5fd4c77" translate="yes" xml:space="preserve">
          <source>Greater Than</source>
          <target state="translated">보다 큰</target>
        </trans-unit>
        <trans-unit id="661a1cf195498e4d5ef48d28086f549d7a9f9e52" translate="yes" xml:space="preserve">
          <source>Greater Than Or Equal</source>
          <target state="translated">크거나 같음</target>
        </trans-unit>
        <trans-unit id="acaff83628aa9c951c9c96ec4a78d05b5903c181" translate="yes" xml:space="preserve">
          <source>Greater than (&lt;code&gt;a &amp;gt; b&lt;/code&gt;)</source>
          <target state="translated">보다 큼 ( &lt;code&gt;a &amp;gt; b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="19339cbb3bf9612b2d425533788b474fc71b7fc8" translate="yes" xml:space="preserve">
          <source>Greater than operator (&amp;gt;)</source>
          <target state="translated">연산자보다 큼 (&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="ba00f24f428c5c797c9c1a02fe3126b504dc367c" translate="yes" xml:space="preserve">
          <source>Greater than operator.</source>
          <target state="translated">연산자보다 큽니다.</target>
        </trans-unit>
        <trans-unit id="ce9ce28c1418e4236454c52dcc54f02f5b21530f" translate="yes" xml:space="preserve">
          <source>Greater than or equal (&lt;code&gt;a &amp;gt;= b&lt;/code&gt;)</source>
          <target state="translated">크거나 같음 ( &lt;code&gt;a &amp;gt;= b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="49067406979e72aabf504916a7dbce98a5bea221" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator (&amp;gt;=)</source>
          <target state="translated">크거나 같은 연산자 (&amp;gt; =)</target>
        </trans-unit>
        <trans-unit id="4aeb184a334e8273aa73cf8c81481065f24bf2f2" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator.</source>
          <target state="translated">크거나 같음 연산자.</target>
        </trans-unit>
        <trans-unit id="2ae6967b07a45b63c8543a6c5e34052414ba32af" translate="yes" xml:space="preserve">
          <source>Grouping</source>
          <target state="translated">Grouping</target>
        </trans-unit>
        <trans-unit id="a558ecadea6e7417651ffb43f2ee9ca2c34b30f4" translate="yes" xml:space="preserve">
          <source>Grouping and back references</source>
          <target state="translated">그룹화 및 역 참조</target>
        </trans-unit>
        <trans-unit id="2cef99738d01030fced8fc7aad3f62156b1e6acd" translate="yes" xml:space="preserve">
          <source>Grouping objects by a property</source>
          <target state="translated">속성별로 개체 그룹화</target>
        </trans-unit>
        <trans-unit id="915853015f3b98ee479d01ab7ae275510ea0172b" translate="yes" xml:space="preserve">
          <source>Grouping operator &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">그룹화 연산자 &lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="527e76a146b1b5490208a09d5b54bffbd071c7e6" translate="yes" xml:space="preserve">
          <source>Grouping operator.</source>
          <target state="translated">그룹화 연산자.</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="af3b3fd4e5a91be3c9ae24e7f9f2b199db3bc273" translate="yes" xml:space="preserve">
          <source>HTML Living Standard&lt;br/&gt;&lt;small&gt;The definition of 'import.meta' in that specification.&lt;/small&gt;</source>
          <target state="translated">HTML Living Standard &lt;br/&gt;&lt;small&gt;해당 사양에서 'import.meta'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4c41038188894303cbb976481fb1aa9e2a5e355e" translate="yes" xml:space="preserve">
          <source>HTML content</source>
          <target state="translated">HTML 내용</target>
        </trans-unit>
        <trans-unit id="bcbc9616d000628a0c49e8fdf2dae8519b74150b" translate="yes" xml:space="preserve">
          <source>HTML wrapper methods</source>
          <target state="translated">HTML 래퍼 메소드</target>
        </trans-unit>
        <trans-unit id="046b1a2a2d5f0690114e58492ae64eaf9df91f47" translate="yes" xml:space="preserve">
          <source>Hacks blog post by Jason Orendorff: &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 in Depth: Modules&lt;/a&gt;</source>
          <target state="translated">Jason Orendorff의 Hacks 블로그 게시물 : &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 in Depth : Modules&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef7049864e420c4deb0c6720a77f740d5c1d6f31" translate="yes" xml:space="preserve">
          <source>Hacks blog post by Lin Clark: &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive&lt;/a&gt;</source>
          <target state="translated">Lin Clark의 Hacks 블로그 게시물 : &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES 모듈 : 만화 심층 분석&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c6ade9cd7521f0bda3a7985cfe1fbb3d2ca278a4" translate="yes" xml:space="preserve">
          <source>Handle rejected &lt;code&gt;Promise&lt;/code&gt; without try block.</source>
          <target state="translated">시도 차단없이 거부 된 &lt;code&gt;Promise&lt;/code&gt; 을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="6049f9c7ffa20764b4ab263789591f7465a81e57" translate="yes" xml:space="preserve">
          <source>Handler functions are sometimes called &lt;em&gt;traps&lt;/em&gt;, presumably because they trap calls to the target object. The very simple trap in &lt;code&gt;handler2&lt;/code&gt; above redefines all property accessors:</source>
          <target state="translated">핸들러 함수는 &lt;em&gt;트랩&lt;/em&gt; 이라고도 &lt;em&gt;합니다&lt;/em&gt; . 아마도 대상 객체에 대한 호출을 트랩하기 때문입니다. 위의 &lt;code&gt;handler2&lt;/code&gt; 에 있는 매우 간단한 트랩은 모든 속성 접근 자를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="8609bae83f23d806c7b6766e0836ddbd278c693c" translate="yes" xml:space="preserve">
          <source>Handling a rejected promise too early has consequences further down the promise chain. Sometimes there is no choice because an error must be handled immediately; in such cases we must &lt;code&gt;throw&lt;/code&gt; something, even if it is a dummy error message like &lt;code&gt;throw -999&lt;/code&gt;, to maintain error state down the chain. On the other hand, in the absence of an immediate need it is simpler to leave out error handling until a final &lt;code&gt;.catch()&lt;/code&gt; statement.</source>
          <target state="translated">거부 된 Promise를 너무 일찍 처리하면 Promise 체인 아래로 내려가는 결과가 발생합니다. 오류는 즉시 처리해야하기 때문에 선택의 여지가없는 경우가 있습니다. 그러한 경우에 우리는 &lt;code&gt;throw&lt;/code&gt; &lt;code&gt;throw -999&lt;/code&gt; 와 같은 더미 오류 메시지라도 무언가 를 던져야 체인 아래로 오류 상태를 유지해야합니다. 반면에 즉각적인 필요가 없으면 최종 &lt;code&gt;.catch()&lt;/code&gt; 문 까지 오류 처리를 생략하는 것이 더 간단 합니다.</target>
        </trans-unit>
        <trans-unit id="05be078b093d3d7249de3afe5aeea8df03ebd38b" translate="yes" xml:space="preserve">
          <source>Handling a specific error</source>
          <target state="translated">특정 오류 처리</target>
        </trans-unit>
        <trans-unit id="7d0fe42db132d1f32eb7831f4f5dfd3df8464a0c" translate="yes" xml:space="preserve">
          <source>Handling null values</source>
          <target state="translated">null 값 처리</target>
        </trans-unit>
        <trans-unit id="b559965568e49e7ef2cb356360355aff78f4b4ad" translate="yes" xml:space="preserve">
          <source>Handling rejected promises</source>
          <target state="translated">거부 된 약속 처리</target>
        </trans-unit>
        <trans-unit id="0f0511546a2fd284a7b7e7b3e0c83c8b0aa321c0" translate="yes" xml:space="preserve">
          <source>Handling values larger or smaller than ~9 quadrillion with full precision requires using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;arbitrary precision arithmetic library&lt;/a&gt;. See &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;What Every Programmer Needs to Know about Floating Point Arithmetic&lt;/a&gt; for more information on floating point representations of numbers.</source>
          <target state="translated">완전 정밀도로 ~ 9 조보다 크거나 작은 값을 처리하려면 &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;임의의 정밀 산술 라이브러리를&lt;/a&gt; 사용해야합니다 . 부동 소수점 숫자에 대한 자세한 내용 &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;은 모든 프로그래머가 부동 소수점 산술&lt;/a&gt; 에 대해 알아야 할 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c4f14b0be5232bf7b6a4a221e3c77e209ae1957e" translate="yes" xml:space="preserve">
          <source>Has a value of 1.</source>
          <target state="translated">값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="6769a17273095a460a5770629c83ce2f07e68f73" translate="yes" xml:space="preserve">
          <source>Has the same functionality as &lt;a href=&quot;arraybuffer/slice&quot;&gt;&lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;arraybuffer/slice&quot;&gt; &lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt; &lt;/a&gt; 와 기능이 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="086c9aa87eb5a88c029b61d7a7132c3c214e334a" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. (This is equivalent to not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.)</source>
          <target state="translated">반복자가 시퀀스에서 다음 값을 생성 할 수있는 경우 값이 &lt;code&gt;false&lt;/code&gt; 입니다. (이것은 &lt;code&gt;done&lt;/code&gt; 속성을 모두 지정하지 않는 것과 같습니다 .)</target>
        </trans-unit>
        <trans-unit id="3842628d6ffd70cf6c89393a3508b1bc7fbb2c25" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.</source>
          <target state="translated">반복자가 시퀀스에서 다음 값을 생성 할 수 있으면 값이 &lt;code&gt;false&lt;/code&gt; 입니다. 이것은 &lt;code&gt;done&lt;/code&gt; 속성을 모두 지정하지 않는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8a395a560e0f4b02cb4707fbf65de88414505b92" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator has completed its sequence. In this case, &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">반복기가 시퀀스를 완료 한 경우 &lt;code&gt;true&lt;/code&gt; 값을 갖습니다. 이 경우 &lt;code&gt;value&lt;/code&gt; 는 선택적으로 반복기의 반환 값을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f160378fa42521846caacc333df5e6d0e7f03987" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the &lt;em&gt;return value&lt;/em&gt; of the iterator.</source>
          <target state="translated">반복자가 반복 된 시퀀스의 끝을 지났 으면 값이 &lt;code&gt;true&lt;/code&gt; 입니다. 이 경우 &lt;code&gt;value&lt;/code&gt; 는 선택적으로 반복자 의 &lt;em&gt;리턴 값&lt;/em&gt; 을 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="706e860c1a9505d02f07d336b066f2bf2d9d2bb4" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">반복자가 반복 된 시퀀스의 끝을 지났 으면 값이 &lt;code&gt;true&lt;/code&gt; 입니다. 이 경우 &lt;code&gt;value&lt;/code&gt; 는 선택적으로 반복자의 리턴 값을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="eb04312cb7765c6aeb622507d89de37f07bd7570" translate="yes" xml:space="preserve">
          <source>Hashbang (&lt;code&gt;#!&lt;/code&gt;) comment syntax</source>
          <target state="translated">Hashbang ( &lt;code&gt;#!&lt;/code&gt; ) 주석 구문</target>
        </trans-unit>
        <trans-unit id="c95ada6418643a8e50ee540a13b76604f7c0d069" translate="yes" xml:space="preserve">
          <source>Hashbang comments</source>
          <target state="translated">해시 방 댓글</target>
        </trans-unit>
        <trans-unit id="dff380fb452861e60226e0ba7e56afc16a92aaf9" translate="yes" xml:space="preserve">
          <source>Hence &lt;code&gt;encodeURI()&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, &lt;code&gt;encodeURI()&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">따라서 &lt;code&gt;encodeURI()&lt;/code&gt; &lt;strong&gt;는&lt;/strong&gt; 완전한 URI를 구성하는 데 필요한 문자를 인코딩 &lt;strong&gt;하지 않습니다&lt;/strong&gt; . 또한 &lt;code&gt;encodeURI()&lt;/code&gt; &lt;strong&gt;는&lt;/strong&gt; 예약 된 목적은 없지만 URI에서 &quot;있는 그대로&quot;허용되는 &quot;예약되지 않은 마크&quot;라고하는 몇 가지 추가 문자를 인코딩하지 않습니다. ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="89a512c7a0d8eebcc121926b32d2b19cb2392d47" translate="yes" xml:space="preserve">
          <source>Hence encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">따라서 encodeURI &lt;strong&gt;는&lt;/strong&gt; 완전한 URI를 공식화하는 데 필요한 문자를 인코딩 &lt;strong&gt;하지 않습니다&lt;/strong&gt; . 또한 encodeURI &lt;strong&gt;는&lt;/strong&gt; 예약되지 않은 URI를 &quot;있는 그대로&quot;사용할 수있는 &quot;예약되지 않은 표시&quot;라고하는 몇 가지 추가 문자를 인코딩하지 않습니다. ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="cfa8a8d1543f550fd84beae6436f9ccfae0853b0" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;++&lt;/code&gt; 는 &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;++&lt;/code&gt; 사이에 줄 종결자가 발생하기 때문에 변수 &lt;code&gt;b&lt;/code&gt; 에 적용 되는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment&quot;&gt;접미사 연산자&lt;/a&gt; 로 취급되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="06a53efe4443b193ea939246d0bee3605e739beb" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;++&lt;/code&gt; 는 &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;++&lt;/code&gt; 사이에 줄 종결자가 있기 때문에 변수 &lt;code&gt;b&lt;/code&gt; 에 적용 되는 &lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;접미사 연산자&lt;/a&gt; 로 처리되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b316f1fcc81d86f5ec38af0adc62588474cb39dc" translate="yes" xml:space="preserve">
          <source>Here JavaScript thinks that you meant to have &lt;code&gt;);&lt;/code&gt; inside the string and ignores it, and it ends up not knowing that you meant the &lt;code&gt;);&lt;/code&gt; to end the function &lt;code&gt;console.log&lt;/code&gt;. To fix this, we could put a&lt;code&gt;'&lt;/code&gt; after the &quot;Script&quot; string:</source>
          <target state="translated">여기 JavaScript는 당신이 가지고 있다고 생각합니다 &lt;code&gt;);&lt;/code&gt; 문자열 내부에서 그것을 무시하고, 당신이 &lt;code&gt;);&lt;/code&gt; 을 의미한다는 것을 알지 못하게됩니다 . &lt;code&gt;console.log&lt;/code&gt; 기능을 종료합니다 . 이 문제를 해결하기 위해 &quot;스크립트&quot;문자열 뒤에 &lt;code&gt;'&lt;/code&gt; 를 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c196a482f6e0ba5b36fd2d7f104c322d2271fc25" translate="yes" xml:space="preserve">
          <source>Here is a concise example of the iteration steps:</source>
          <target state="translated">다음은 반복 단계의 간결한 예입니다.</target>
        </trans-unit>
        <trans-unit id="24a2c42eadaee1c238dcb34a8a11541d3566436b" translate="yes" xml:space="preserve">
          <source>Here is a correct implementation:</source>
          <target state="translated">다음은 올바른 구현입니다.</target>
        </trans-unit>
        <trans-unit id="6b78dc499efcb3a2e64d5a1d08544b298bfb6496" translate="yes" xml:space="preserve">
          <source>Here is an example of an &lt;strong&gt;anonymous&lt;/strong&gt; function expression (the &lt;code&gt;name&lt;/code&gt; is not used):</source>
          <target state="translated">다음은 &lt;strong&gt;익명&lt;/strong&gt; 함수 표현식 의 예입니다 ( &lt;code&gt;name&lt;/code&gt; 은 사용되지 않음).</target>
        </trans-unit>
        <trans-unit id="3165612e15dd81d081ad2ea3bdee303a0e8cef7a" translate="yes" xml:space="preserve">
          <source>Here is the output:</source>
          <target state="translated">출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a25458ba1519e52ca3b4eba3bb4f22092fc95ae9" translate="yes" xml:space="preserve">
          <source>Here is the same &quot;Conditional catch clauses&quot; using code that conforms to ECMAScript specification (obviously it's verbose, but works everywhere):</source>
          <target state="translated">다음은 ECMAScript 사양을 준수하는 코드를 사용하는 동일한 &quot;조건부 캐치 절&quot;입니다 (분명히 자세하지만 모든 곳에서 작동).</target>
        </trans-unit>
        <trans-unit id="2b981861ba4dd1afcb8302d8db5d56f4e3e89e1e" translate="yes" xml:space="preserve">
          <source>Here it counts forwards from the start by &lt;code&gt;11&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;7&lt;/code&gt; to find the end index.</source>
          <target state="translated">여기서는 시작 인덱스를 찾기 위해 처음부터 &lt;code&gt;11&lt;/code&gt; 씩 앞으로 세고 끝 인덱스를 찾기 위해 끝에서 &lt;code&gt;7&lt;/code&gt; 만큼 뒤로 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="f0d1bc6ef7a193898558dcd4287addc94cb7eb24" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;code&gt;Square&lt;/code&gt; class is changed&amp;mdash;but the constructor of its base class &lt;code&gt;Polygon&lt;/code&gt;is still called when a new instance of a square is created.</source>
          <target state="translated">여기에서 &lt;code&gt;Square&lt;/code&gt; 클래스 의 프로토 타입 이 변경되었지만 기본 클래스 &lt;code&gt;Polygon&lt;/code&gt; 의 생성자 는 사각형의 새 인스턴스가 생성 될 때 계속 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b6ddfd08130fdd41064ead403ecc7771b756bd7a" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;strong&gt;Square&lt;/strong&gt; class is changed but still the constructor of the previous base class &lt;strong&gt;Polygon &lt;/strong&gt;is called when a new instance of a square is being created.</source>
          <target state="translated">여기에서 &lt;strong&gt;Square&lt;/strong&gt; 클래스 의 프로토 타입 이 변경되었지만 여전히 사각형의 새 인스턴스가 생성 될 때 이전 기본 클래스 &lt;strong&gt;Polygon&lt;/strong&gt; 의 생성자 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="5e9eaf917eac3048ca5292e8791a5a553b13c8df" translate="yes" xml:space="preserve">
          <source>Here we've provided an implementation of the &lt;a href=&quot;proxy/proxy/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; handler, which intercepts attempts to access properties in the target.</source>
          <target state="translated">여기 에서 대상의 속성에 액세스하려는 시도를 가로채는 &lt;a href=&quot;proxy/proxy/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 핸들러 의 구현을 제공했습니다 .</target>
        </trans-unit>
        <trans-unit id="90b6aaa340bd0ee0aff948f94fa41abe49107e85" translate="yes" xml:space="preserve">
          <source>Here's an external resource for getting the complete Unicode block range for different scripts: &lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt;.</source>
          <target state="translated">다른 스크립트에 대한 완전한 유니 코드 블록 범위를 얻기위한 외부 리소스는 다음과 같습니다. &lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7857a46a59cc12380ddb853b6b9f402e6c55d9ef" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are declared before any code is executed, but the assignments occur later. At the time &quot;&lt;code&gt;x = y&lt;/code&gt;&quot; is evaluated, &lt;code&gt;y&lt;/code&gt; exists so no &lt;code&gt;ReferenceError&lt;/code&gt; is thrown and its value is &lt;code&gt;undefined&lt;/code&gt;. So, &lt;code&gt;x&lt;/code&gt; is assigned the undefined value. Then, &lt;code&gt;y&lt;/code&gt; is assigned the value &lt;code&gt;'A'&lt;/code&gt;. Consequently, after the first line, &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt;, hence the result.</source>
          <target state="translated">여기서 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 는 코드가 실행되기 전에 선언되지만 할당은 나중에 발생합니다. &quot; &lt;code&gt;x = y&lt;/code&gt; &quot;가 평가 될 때 &lt;code&gt;y&lt;/code&gt; 가 존재하므로 &lt;code&gt;ReferenceError&lt;/code&gt; 가 발생 하지 않으며 그 값은 &lt;code&gt;undefined&lt;/code&gt; 입니다. 따라서 &lt;code&gt;x&lt;/code&gt; 에는 정의되지 않은 값이 할당됩니다. 그런 다음 &lt;code&gt;y&lt;/code&gt; 에는 &lt;code&gt;'A'&lt;/code&gt; 값이 할당됩니다 . 결과적으로 첫 번째 줄 다음에 &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt; 이므로 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="c6bb89830625753d156ab93a0373ccd6a9471aee" translate="yes" xml:space="preserve">
          <source>Here, a &lt;code&gt;WeakSet&lt;/code&gt; is created on the first run, and passed along with every subsequent function call (using the internal &lt;code&gt;_refs&lt;/code&gt; parameter).</source>
          <target state="translated">여기서 &lt;code&gt;WeakSet&lt;/code&gt; 은 첫 번째 실행에서 생성되고 모든 후속 함수 호출과 함께 전달됩니다 (내부 &lt;code&gt;_refs&lt;/code&gt; 매개 변수 사용).</target>
        </trans-unit>
        <trans-unit id="f2c3bff61e26f4963cd35a7ab991589ba7008419" translate="yes" xml:space="preserve">
          <source>Here, accessing the exports means using the module name (&quot;myModule&quot; in this case) as a namespace. For example, if the module imported above includes an export &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt;, you would call it like this:</source>
          <target state="translated">여기서 내보내기에 액세스한다는 것은 모듈 이름 (이 경우 &quot;myModule&quot;)을 네임 스페이스로 사용하는 것을 의미합니다. 예를 들어, 위에서 가져온 모듈에 &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt; 내보내기가 포함되어 있으면 다음 과 같이 호출합니다.</target>
        </trans-unit>
        <trans-unit id="15fbcc06494476e024486f2e5d0653c7309b6c60" translate="yes" xml:space="preserve">
          <source>Here, for example, &lt;code&gt;const {p: foo} = o&lt;/code&gt; takes from the object &lt;code&gt;o&lt;/code&gt; the property named &lt;code&gt;p&lt;/code&gt; and assigns it to a local variable named &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;const {p: foo} = o&lt;/code&gt; 는 객체 &lt;code&gt;o&lt;/code&gt; 에서 &lt;code&gt;p&lt;/code&gt; 라는 속성을 가져 와서 &lt;code&gt;foo&lt;/code&gt; 라는 지역 변수에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="51f81ae1558077795df8fc0042020be94e3ff570" translate="yes" xml:space="preserve">
          <source>Here, the method named &quot;createElement&quot; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">여기서 &quot;createElement&quot;라는 메소드가 &lt;code&gt;document&lt;/code&gt; 에서 검색되어 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="40d821e94b177f191399f4c6848c0999525332fe" translate="yes" xml:space="preserve">
          <source>Here, the method named &lt;code&gt;createElement&lt;/code&gt; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">여기서 &lt;code&gt;createElement&lt;/code&gt; 라는 메서드 가 &lt;code&gt;document&lt;/code&gt; 에서 검색되어 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="0a2f21efe45a597d0c5e08f0bcf4197917ea15a9" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences</source>
          <target state="translated">16 진수 이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="9b58c9bceb1fb4cd00c1b0d68cba9a880adb6196" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences (&lt;code&gt;'\0xA9'&lt;/code&gt;)</source>
          <target state="translated">16 진 이스케이프 시퀀스 ( &lt;code&gt;'\0xA9'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d77a4d628bd253cb9d7796f35659fc6bb4dc2dfa" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences consist of &lt;code&gt;\x&lt;/code&gt; followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF.</source>
          <target state="translated">16 진 이스케이프 시퀀스는 &lt;code&gt;\x&lt;/code&gt; 와 0x0000에서 0x00FF 범위의 코드 포인트 또는 코드 포인트를 나타내는 정확히 2 개의 16 진수 로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="8a582ad8df25c5d47dfed0df5132809e7d6d15eb" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;&lt;code&gt;\x&lt;/code&gt;&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">&quot; &lt;code&gt;\x&lt;/code&gt; &quot;로 시작되는 16 진수 이스케이프 ( 예 : &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4bd87c365a900dd5094579ce438c4cfe544351c" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;\x&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">&quot;\ x&quot;로 시작한 16 진 이스케이프 (예 : &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9924bfb13046ed8f8cebb38c6e636ffefd5cb02" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">16 진수 구문은 &lt;code&gt;0x&lt;/code&gt; 오는 0과 소문자 또는 대문자 라틴 문자 &quot;X&quot;( 0x 또는 &lt;code&gt;0X)&lt;/code&gt; 를 사용 합니다. 0x 뒤의 숫자가 범위 (0123456789ABCDEF)를 벗어나면 다음 &lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. &quot;식별자는 숫자 리터럴 바로 뒤에서 시작됩니다.&quot;</target>
        </trans-unit>
        <trans-unit id="e066ca26a734b38a5a274a8d41c70f6df347e59e" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">16 진 숫자 구문은 &lt;code&gt;0x&lt;/code&gt; 0을 사용하고 소문자 또는 대문자 라틴 문자 &quot;X&quot;( 0x 또는 &lt;code&gt;0X)&lt;/code&gt; 를 사용 합니다. 0x 이후의 숫자가 범위 (0123456789ABCDEF)를 벗어나면 다음 &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; 가 발생합니다. &quot;숫자 리터럴 직후 식별자가 시작됩니다&quot;.</target>
        </trans-unit>
        <trans-unit id="a69413db5aeb0efb2c0b65dd4800effb756f3189" translate="yes" xml:space="preserve">
          <source>Hexadecimal numeric literals (&lt;code&gt;0xAF&lt;/code&gt;)</source>
          <target state="translated">16 진 숫자 리터럴 ( &lt;code&gt;0xAF&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ed159796c6374be3a3a7fcdf94ff47de9417b532" translate="yes" xml:space="preserve">
          <source>Hidden characters</source>
          <target state="translated">숨겨진 캐릭터</target>
        </trans-unit>
        <trans-unit id="ba8e27ee7970ed22acceee3b123e2ed01cfef7b9" translate="yes" xml:space="preserve">
          <source>Hiding Implementation Details with ECMAScript 6 WeakMaps</source>
          <target state="translated">ECMAScript 6 WeakMaps로 구현 세부 사항 숨기기</target>
        </trans-unit>
        <trans-unit id="48c7f05df7a5b55b6867d43de9a4ff0ca135540e" translate="yes" xml:space="preserve">
          <source>Historically &lt;code&gt;eval()&lt;/code&gt; had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was definitely removed from Firefox 4. See &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;bug 531675&lt;/a&gt;.</source>
          <target state="translated">역사적으로 &lt;code&gt;eval()&lt;/code&gt; 에는 선택적인 두 번째 인수가 있었으며 평가를 수행 할 컨텍스트에서 객체를 지정했습니다. 이 주장은 표준이 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;아니며&lt;/a&gt; Firefox 4에서 완전히 제거되었습니다 . 버그 531675를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d0556094a79057d9c2ab59684cc5203152ab3bf" translate="yes" xml:space="preserve">
          <source>Historically, JSON was &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;not a completely strict subset of JavaScript&lt;/a&gt;. The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text, only using Unicode escapes as &lt;code&gt;\u2028&lt;/code&gt; and &lt;code&gt;\u2029&lt;/code&gt;. This recently changed: now both code points may appear literally in strings in JSON and JavaScript both.</source>
          <target state="translated">역사적으로 JSON은 &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;JavaScript의 완전히 엄격한 하위 집합&lt;/a&gt; 이 아닙니다 . 리터럴 코드 포인트 U + 2028 LINE SEPARATOR 및 U + 2029 PARAGRAPH SEPARATOR는 JSON 텍스트의 문자열 리터럴 및 속성 이름에 문자 그대로 나타날 수 있습니다. 그러나 그들은 JavaScript 텍스트에서 문자 그대로 비슷한 맥락에서 나타날 수 없었으며 유니 코드 이스케이프를 &lt;code&gt;\u2028&lt;/code&gt; 및 &lt;code&gt;\u2029&lt;/code&gt; 로만 사용했습니다 . 이것은 최근에 변경되었습니다. 이제 두 코드 포인트가 문자 그대로 JSON과 JavaScript의 문자열에 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bcaf634e9dbfa99922f815d7eb0b950882fbc2c" translate="yes" xml:space="preserve">
          <source>Hoisting</source>
          <target state="translated">Hoisting</target>
        </trans-unit>
        <trans-unit id="5f27b866d76e39ba378b955e78eb58dfdd94f6f6" translate="yes" xml:space="preserve">
          <source>Horizontal tabulation</source>
          <target state="translated">가로 도표</target>
        </trans-unit>
        <trans-unit id="3adb95f9912f2091bd36deb307c797f8d4c2f8ed" translate="yes" xml:space="preserve">
          <source>Host object (provided by the JS environment)</source>
          <target state="translated">호스트 객체 (JS 환경에서 제공)</target>
        </trans-unit>
        <trans-unit id="05d832afb150e6d6cee536a5366db6a39f98f7aa" translate="yes" xml:space="preserve">
          <source>Hour cycle. Possible values include: &lt;code&gt;&quot;h11&quot;&lt;/code&gt;, &lt;code&gt;&quot;h12&quot;&lt;/code&gt;, &lt;code&gt;&quot;h23&quot;&lt;/code&gt;, &lt;code&gt;&quot;h24&quot;&lt;/code&gt;.</source>
          <target state="translated">시간주기. 가능한 값은 다음과 같습니다 : &lt;code&gt;&quot;h11&quot;&lt;/code&gt; , &lt;code&gt;&quot;h12&quot;&lt;/code&gt; , &lt;code&gt;&quot;h23&quot;&lt;/code&gt; , &lt;code&gt;&quot;h24&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee3e1dbb726eba3df0ad73f985155dde4b677d93" translate="yes" xml:space="preserve">
          <source>Hour, as two digits with leading zero if required</source>
          <target state="translated">시간 (필요한 경우 앞에 0이있는 2 자리 숫자)</target>
        </trans-unit>
        <trans-unit id="f4d808298af4e3a344801b330a4f9fdcd1165517" translate="yes" xml:space="preserve">
          <source>Hour: 2 digit hour of day, e.g. &quot;14&quot;</source>
          <target state="translated">시간 : 2 자리 시간 (예 : &quot;14&quot;)</target>
        </trans-unit>
        <trans-unit id="2f6aca7c8ed3e78d7b2ca4654ff033cbca51140c" translate="yes" xml:space="preserve">
          <source>How a static member (method or property) is defined on a class.</source>
          <target state="translated">클래스에서 정적 멤버 (메서드 또는 속성)를 정의하는 방법.</target>
        </trans-unit>
        <trans-unit id="170fd3a12359241b63d931c864e00d0ebab3ff77" translate="yes" xml:space="preserve">
          <source>How a static member can and cannot be called.</source>
          <target state="translated">정적 멤버를 호출 할 수있는 방법과 호출 할 수없는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="02b8a9b69ed5e801a258f6ff432668b197dc1977" translate="yes" xml:space="preserve">
          <source>How a static method can and cannot be called.</source>
          <target state="translated">정적 메소드를 호출 할 수있는 방법과 호출 할 수없는 방법</target>
        </trans-unit>
        <trans-unit id="9212bc0bac3b7334165992d907eff590f2d58bf7" translate="yes" xml:space="preserve">
          <source>How a static method is implemented on a class.</source>
          <target state="translated">정적 메소드가 클래스에서 구현되는 방법</target>
        </trans-unit>
        <trans-unit id="3c942ed885b162688cb9195ae45a134e9665a26b" translate="yes" xml:space="preserve">
          <source>How reduce() works</source>
          <target state="translated">reduce () 작동 방식</target>
        </trans-unit>
        <trans-unit id="590c269c92635e56c357d9c996f7ebd80cef25ce" translate="yes" xml:space="preserve">
          <source>How to display the currency in currency formatting. Possible values are &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; to use a localized currency symbol such as &amp;euro;, &lt;code&gt;&quot;code&quot;&lt;/code&gt; to use the ISO currency code, &lt;code&gt;&quot;name&quot;&lt;/code&gt; to use a localized currency name such as &lt;code&gt;&quot;dollar&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;symbol&quot;&lt;/code&gt;.</source>
          <target state="translated">통화를 통화 형식으로 표시하는 방법 가능한 값은 &amp;euro;와 같은 현지 통화 기호를 사용하는 &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; , ISO 통화 코드를 사용하는 &lt;code&gt;&quot;code&quot;&lt;/code&gt; , &lt;code&gt;&quot;dollar&quot;&lt;/code&gt; 와 같은 현지 통화 이름을 사용하는 &lt;code&gt;&quot;name&quot;&lt;/code&gt; &quot; ; 기본값은 &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="317cebfb06712b03449e83ae5a1cfac238766c01" translate="yes" xml:space="preserve">
          <source>How to use a source map &amp;ndash; Firefox Tools documentation</source>
          <target state="translated">소스 맵을 사용하는 방법 &amp;ndash; Firefox 도구 설명서</target>
        </trans-unit>
        <trans-unit id="3cd53a529a6d6f543acf35035d0de8d5fea99843" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;const {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">그러나 &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; 는 &lt;code&gt;const {a, b} = {a: 1, b: 2}&lt;/code&gt; 와 마찬가지로 유효 합니다.</target>
        </trans-unit>
        <trans-unit id="72c36f97b9d3ec431e2384db73310aeb72ab6819" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">그러나 &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt; 와 같이 &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; 는 유효 합니다.</target>
        </trans-unit>
        <trans-unit id="6ca0de76b3b99b8b56c8d7af288735c24f70c1f3" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;eval()&lt;/code&gt; is not necessary here. In fact, its use here is discouraged. Instead, use the &lt;a href=&quot;../operators/property_accessors&quot;&gt;property accessors&lt;/a&gt;, which are much faster and safer:</source>
          <target state="translated">그러나 여기서는 &lt;code&gt;eval()&lt;/code&gt; 이 필요하지 않습니다. 실제로 여기서는 사용하지 않는 것이 좋습니다. 대신 훨씬 빠르고 안전한 &lt;a href=&quot;../operators/property_accessors&quot;&gt;속성 접근&lt;/a&gt; 자를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b921fc32f59289040086bb44d7385dce3af7b6ca" translate="yes" xml:space="preserve">
          <source>However, a function can access all variables and functions defined inside the scope in which it is defined. In other words, a function defined in the global scope can access all variables defined in the global scope.</source>
          <target state="translated">그러나 함수는 정의 된 범위 내에 정의 된 모든 변수 및 함수에 액세스 할 수 있습니다. 즉, 전역 범위에 정의 된 함수는 전역 범위에 정의 된 모든 변수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1344ff6ea20d410b0de6c7bf7acfe1eadf51dcfb" translate="yes" xml:space="preserve">
          <source>However, adding non-standard methods to the array object can cause issues later, either with your own code, or when &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;adding features to JavaScript&lt;/a&gt;.</source>
          <target state="translated">그러나 비표준 메소드를 배열 객체에 추가하면 나중에 자체 코드에서 또는 &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;JavaScript에 기능을 추가&lt;/a&gt; 할 때 문제가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e2fc3da3ae9c154becb2bd8619ed5afc981767c4" translate="yes" xml:space="preserve">
          <source>However, as it is widely implemented and used on the Web, it is very unlikely that browsers will stop implementing it.</source>
          <target state="translated">그러나 웹에서 광범위하게 구현되고 사용되기 때문에 브라우저가 웹 사이트를 구현하지 않을 가능성은 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="f9600d456633eb4645e65e56ab2737fa05e32c69" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using &lt;code&gt;apply&lt;/code&gt; and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">그러나 배열에 요소가 너무 많으면 spread ( &lt;code&gt;...&lt;/code&gt; ) 및 &lt;code&gt;apply&lt;/code&gt; 가 실패하거나 잘못된 결과를 반환합니다. 배열 요소를 함수 매개 변수로 전달하려고하기 때문입니다. 참조 &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;하여 &lt;code&gt;apply&lt;/code&gt; 하고 기능을 내장&lt;/a&gt; 자세한 내용은. &lt;code&gt;reduce&lt;/code&gt; 솔루션은이 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a8f4a701bba3d52df404267d8b38008d653efd94" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using apply and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">그러나 spread ( &lt;code&gt;...&lt;/code&gt; )와 &lt;code&gt;apply&lt;/code&gt; 는 모두 실패하거나 배열에 요소가 너무 많은 경우 잘못된 결과를 반환합니다. 이는 배열 요소를 함수 매개 변수로 전달하려고하기 때문입니다. 자세한 내용은 &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;적용 및 내장 함수 사용&lt;/a&gt; 을 참조하십시오. &lt;code&gt;reduce&lt;/code&gt; 솔루션은이 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="155f9210fb274769199d9d6e37fb1cb3e08415b0" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN():&lt;/code&gt; the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN:&lt;/code&gt;</source>
          <target state="translated">그러나 &lt;code&gt;isNaN()&lt;/code&gt; 과 &lt;code&gt;Number.isNaN():&lt;/code&gt; 의 차이점에 유의하십시오 . 값이 현재 &lt;code&gt;NaN&lt;/code&gt; 이거나 숫자로 강제 변환 된 후 &lt;code&gt;NaN&lt;/code&gt; 이 될 경우 전자는 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 후자는 반환합니다 값이 현재 &lt;code&gt;NaN:&lt;/code&gt; 경우에만 &lt;code&gt;true&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1a05afbdfaaafa830031102e2b9809905ecfa0f3" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN()&lt;/code&gt;: the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">그러나 사이의 차이에 유의 할 &lt;code&gt;isNaN()&lt;/code&gt; 및 &lt;code&gt;Number.isNaN()&lt;/code&gt; : 전자가 반환 &lt;code&gt;true&lt;/code&gt; 값이 현재의 경우 &lt;code&gt;NaN&lt;/code&gt; 의 , 또는 될 것입니다 경우 &lt;code&gt;NaN&lt;/code&gt; 이를 이 숫자로 강제 후, 후자의 뜻을 반환하면서 값이 현재 &lt;code&gt;NaN&lt;/code&gt; 인 경우에만 &lt;code&gt;true&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bb5955412c243802f624c3fcc726fa95ed764470" translate="yes" xml:space="preserve">
          <source>However, if a feature is part of the language, the burden of implementing that feature performantly is on the engine developers (ideally).</source>
          <target state="translated">그러나 기능이 언어의 일부인 경우 해당 기능을 구현하는 부담은 엔진 개발자에게 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="7d0e9166cc3877049fade8de88ba8526c9f995c0" translate="yes" xml:space="preserve">
          <source>However, if the string is recognized as an ISO format string and it contains invalid values, it will return &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; in all browsers compliant with ES5 and later:</source>
          <target state="translated">그러나 문자열이 ISO 형식 문자열로 인식되고 잘못된 값이 포함 된 경우 ES5 이상을 준수하는 모든 브라우저에서 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="022c3ab98768670bbf1933120325adce314d4bb1" translate="yes" xml:space="preserve">
          <source>However, if you are more interested in all the little technical bits defined by the ECMA standard, and are less concerned about performance or conciseness, then you may find this more descriptive polyfill to be more useful.</source>
          <target state="translated">그러나 ECMA 표준에 의해 정의 된 모든 작은 기술 비트에 더 관심이 있고 성능이나 간결성에 대해 덜 염려한다면이 설명적인 폴리 필이 더 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc57e792d30fa7d983982bc737c871ec52c8ca4c" translate="yes" xml:space="preserve">
          <source>However, if you provide your own constructor, and your class derives from some parent class, then you must explicitly call the parent class constructor using &lt;code&gt;super&lt;/code&gt;. For example:</source>
          <target state="translated">그러나 자체 생성자를 제공하고 클래스가 일부 부모 클래스에서 파생되는 경우 &lt;code&gt;super&lt;/code&gt; 를 사용하여 부모 클래스 생성자를 명시 적으로 호출해야합니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="e8b64102d1a72628622132dccbb3c2f213dbfead" translate="yes" xml:space="preserve">
          <source>However, if you set &lt;code&gt;Symbol.match&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;isRegExp&lt;/code&gt; check (that uses the &lt;code&gt;match&lt;/code&gt; property) will indicate that the object is not a regular expression object. The methods &lt;code&gt;startsWith&lt;/code&gt; and &lt;code&gt;endsWith&lt;/code&gt; won't throw a &lt;code&gt;TypeError&lt;/code&gt; as a consequence.</source>
          <target state="translated">사용자가 설정 한 경우, &lt;code&gt;Symbol.match&lt;/code&gt; 을 에 &lt;code&gt;false&lt;/code&gt; 의 &lt;code&gt;isRegExp&lt;/code&gt; 검사 (즉, 사용하는 &lt;code&gt;match&lt;/code&gt; 속성) 개체가 정규 표현식 객체가 아닌 것을 나타냅니다. 그 결과 &lt;code&gt;startsWith&lt;/code&gt; 및 &lt;code&gt;endsWith&lt;/code&gt; 는 &lt;code&gt;TypeError&lt;/code&gt; 를 발생 시키지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="31f1e2bdac94b098b9f877ce5da8857a1ad83361" translate="yes" xml:space="preserve">
          <source>However, illegal escape sequences must still be represented in the &amp;ldquo;cooked&amp;rdquo; representation. They will show up as &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; element in the &amp;ldquo;cooked&amp;rdquo; array:</source>
          <target state="translated">그러나 불법 이스케이프 시퀀스는 여전히 &quot;요리 된&quot;표현으로 표현되어야합니다. &quot;cooked&quot;배열에 &lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 요소 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="03a698f36d60dc84adc893e9fc94c9f9a1a121dc" translate="yes" xml:space="preserve">
          <source>However, in a case like the following, there are not alternatives to &lt;code&gt;arguments.callee&lt;/code&gt;, so its deprecation could be a bug (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;bug 725398&lt;/a&gt;):</source>
          <target state="translated">그러나 다음과 같은 경우 &lt;code&gt;arguments.callee&lt;/code&gt; 의 대안이 없으므로 사용 중단이 버그 일 수 있습니다 ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;버그 725398&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="4589d67aea24a69292bd71d7b10227587745cfc4" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;DateTimeFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">그러나 많은 사용자 인터페이스에서이 문자열의 형식을 사용자 정의하려고합니다. &lt;code&gt;formatToParts&lt;/code&gt; 의 방법에 의해 생산 된 문자열의 로케일 인식 포맷 할 수 &lt;code&gt;DateTimeFormat&lt;/code&gt; 의 당신에게 부분 문자열을 제공하여 포맷터 :</target>
        </trans-unit>
        <trans-unit id="8022b3b7bd063cb56b7912845f1a0f26bce01df9" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;NumberFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">그러나 많은 사용자 인터페이스에서이 문자열의 형식을 사용자 정의하려고합니다. &lt;code&gt;formatToParts&lt;/code&gt; 의 방법에 의해 생산 된 문자열의 로케일 인식 서식 수 &lt;code&gt;NumberFormat&lt;/code&gt; 당신에게 부분 문자열을 제공하여 포맷터 :</target>
        </trans-unit>
        <trans-unit id="f669417c4db529251f3383ce99a11f4abe560111" translate="yes" xml:space="preserve">
          <source>However, invalid values in date strings not recognized as simplified ISO format as defined by ECMA-262 may or may not result in &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, depending on the browser and values provided, e.g.:</source>
          <target state="translated">그러나 ECMA-262에서 정의한대로 날짜 문자열의 유효하지 않은 값이 단순화 된 ISO 형식으로 인식되지 않으면 브라우저 및 제공된 값에 따라 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; 발생할 수도 있고 그렇지 않을 수도 있습니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="ef074962521111d0da446df3606b66ac6041432b" translate="yes" xml:space="preserve">
          <source>However, it can be converted to a real &lt;code&gt;Array&lt;/code&gt;:</source>
          <target state="translated">그러나 실제 &lt;code&gt;Array&lt;/code&gt; 로 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a74265a92b19fdffe551a7aa2ab8d023b875e39a" translate="yes" xml:space="preserve">
          <source>However, it is important to consider the following scenarios:</source>
          <target state="translated">그러나 다음 시나리오를 고려하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="84cb019d3ebd3521eafb6da4bfd6f75dae35c17b" translate="yes" xml:space="preserve">
          <source>However, it's important to point out that a block nested inside a case clause will create a new block scoped lexical environment, which will not produce the redeclaration errors shown above.</source>
          <target state="translated">그러나 case 절 안에 중첩 된 블록은 새로운 블록 범위 어휘 환경을 작성하여 위에 표시된 재 선언 오류를 생성하지 않음을 지적하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="baa6aadd1c660682617a1e4f8bf27000cbc1c4f7" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">그러나 예외가 여기에 객체 리터럴 표기법입니다 만든 개체 : 프로토 타입이 있지만 &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;instanceof Object&lt;/code&gt; 를 반환 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb206323f2e15d213b5f0f56c363d1864f9a048d" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is undefined, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">그러나 객체 리터럴 표기법으로 생성 된 객체는 예외입니다. 프로토 타입이 정의되지 않았지만 &lt;code&gt;instanceof Object&lt;/code&gt; 는 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="cb8b548450bac1315df5f50eded94022c2cca6c2" translate="yes" xml:space="preserve">
          <source>However, oftentimes, this error is only a consequence of another error, like not escaping strings properly, or using &lt;code&gt;var&lt;/code&gt; wrongly. You might also have too many parenthesis somewhere. Carefully check the syntax when this error is thrown.</source>
          <target state="translated">그러나 종종이 오류는 문자열을 올바르게 이스케이프하지 않거나 &lt;code&gt;var&lt;/code&gt; 를 잘못 사용하는 것과 같은 다른 오류의 결과 일뿐 입니다. 어딘가에 괄호가 너무 많을 수도 있습니다. 이 오류가 발생하면 구문을주의해서 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="75c2f10e5aa796faf9bc362b9bd19e6e889e4841" translate="yes" xml:space="preserve">
          <source>However, provided arguments are still prepended to the constructor call:</source>
          <target state="translated">그러나 제공된 인수는 여전히 생성자 호출 앞에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="97e2c5535a759168412becefdd1bf3e1815503f4" translate="yes" xml:space="preserve">
          <source>However, setting the generic &lt;strong&gt;prototype&lt;/strong&gt; as the new object's prototype works even better:</source>
          <target state="translated">그러나 일반 &lt;strong&gt;프로토 타입&lt;/strong&gt; 을 새 객체의 프로토 &lt;strong&gt;타입&lt;/strong&gt; 으로 설정하면 훨씬 더 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="1e11e841387ec0c6e1a4dbc05297c9f5c95dcde4" translate="yes" xml:space="preserve">
          <source>However, since the code points are different, string comparison will not treat them as equal. And since the number of code points in each version is different, they even have different lengths.</source>
          <target state="translated">그러나 코드 포인트가 다르기 때문에 문자열 비교는 이들을 동일하게 취급하지 않습니다. 그리고 각 버전의 코드 포인트 수가 다르기 때문에 길이도 다릅니다.</target>
        </trans-unit>
        <trans-unit id="8a1264969786c794608eb6828a419e597ec032e7" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;await&lt;/code&gt; calls still run in series, which means the second &lt;code&gt;await&lt;/code&gt; will wait for the first one to finish. In this case, the result of the fastest timer is processed after the slowest.</source>
          <target state="translated">그러나 &lt;code&gt;await&lt;/code&gt; 호출은 여전히 ​​직렬로 실행되므로 두 번째 &lt;code&gt;await&lt;/code&gt; 는 첫 번째 await 가 완료 될 때까지 기다립니다. 이 경우 가장 빠른 타이머의 결과는 가장 느린 이후에 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="a979c19b10bb900d27fa12f6bd72e17ef4663d95" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by comma. The following code creates an object with three properties and the keys are &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, &lt;code&gt;&quot;age&quot;&lt;/code&gt; and &lt;code&gt;&quot;baz&quot;&lt;/code&gt;. The values of these keys are a string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;, a number &lt;code&gt;42&lt;/code&gt;, and another object.</source>
          <target state="translated">그러나 &lt;em&gt;리터럴&lt;/em&gt; 또는 &lt;em&gt;이니셜 라이저&lt;/em&gt; 표기법 의 장점은 중괄호 안에 속성이있는 객체를 빠르게 만들 수 있다는 것입니다. &lt;code&gt;key: value&lt;/code&gt; 목록을 쉼표로 구분 된 값 쌍으로 간단히 알려 줍니다 . 다음 코드는 세 가지 속성을 가진 객체를 만들고 키는 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; , &lt;code&gt;&quot;age&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;baz&quot;&lt;/code&gt; 입니다. 이 키의 값은 문자열 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; , 숫자 &lt;code&gt;42&lt;/code&gt; 및 다른 객체입니다.</target>
        </trans-unit>
        <trans-unit id="842b6087386cc39e29d6f9f778642f041abe2fd9" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by commas.</source>
          <target state="translated">그러나 &lt;em&gt;리터럴&lt;/em&gt; 또는 &lt;em&gt;이니셜 라이저&lt;/em&gt; 표기법 의 장점은 중괄호 안에 속성이있는 개체를 빠르게 만들 수 있다는 것입니다. 쉼표로 구분 된 &lt;code&gt;key: value&lt;/code&gt; 쌍 목록을 기록하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="90eb6b0644af78d5b428ee0a62bbaacec5e664a7" translate="yes" xml:space="preserve">
          <source>However, the following expressions are not equivalent due to &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence&lt;/a&gt; and stresses the importance of requiring the right-hand operand to be a single expression (grouped if needed by parentheses).</source>
          <target state="translated">그러나 다음 식은 &lt;a href=&quot;operator_precedence&quot;&gt;연산자 우선 순위&lt;/a&gt; 로 인해 동일하지 않으며 오른쪽 피연산자가 단일 식 (괄호로 묶인 경우 그룹화)이어야한다는 중요성을 강조합니다.</target>
        </trans-unit>
        <trans-unit id="30b34a0bab1e094dcb3cefc2509d153860c7d52c" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in JavaScript, instead using floating points for all numbers.</source>
          <target state="translated">그러나 다음 함수는이 폴리 필이 사용되는 브라우저가 모든 숫자에 부동 소수점을 사용하는 대신 JavaScript에서 내부 정수 유형으로 최적화하지 않을 가능성이 높기 때문에 더 성능이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5502e7d43a8615c92869746e5397dde33bba4059" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in javascript, instead using floating points for all numbers.</source>
          <target state="translated">그러나 다음 함수는이 polyfill을 사용하는 브라우저가 모든 숫자에 대해 부동 소수점을 사용하는 대신 자바 스크립트에서 내부 정수 유형으로 최적화하지 않을 가능성이 높기 때문에 성능이 뛰어납니다.</target>
        </trans-unit>
        <trans-unit id="cb6b6a8647000d55f54a8880aa12a2276fcbbc59" translate="yes" xml:space="preserve">
          <source>However, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 32-bit and 64-bit:</source>
          <target state="translated">그러나 이진수 시스템에서는 숫자 1.337을 정확하게 표현할 수 없으므로 32 비트와 64 비트가 다릅니다.</target>
        </trans-unit>
        <trans-unit id="755d9f766b888cb8715a1a08914fb46649ab701f" translate="yes" xml:space="preserve">
          <source>However, the third argument, &lt;code&gt;manyMoreArgs&lt;/code&gt;, will be an array that contains the 3&lt;sup&gt;rd&lt;/sup&gt;, 4&lt;sup&gt;th&lt;/sup&gt;, 5&lt;sup&gt;th&lt;/sup&gt;, 6&lt;sup&gt;th&lt;/sup&gt; ... &lt;var&gt;n&lt;/var&gt;&lt;sup&gt;th&lt;/sup&gt; &amp;mdash; as many arguments that the user includes.</source>
          <target state="translated">그러나, 제 3 인자는 &lt;code&gt;manyMoreArgs&lt;/code&gt; 는 , 3 포함한 배열 될 것이다 &lt;sup&gt;(RD)는&lt;/sup&gt; 4 &lt;sup&gt;번째&lt;/sup&gt; , 5 &lt;sup&gt;번째&lt;/sup&gt; , 6 &lt;sup&gt;번째&lt;/sup&gt; ... &lt;var&gt;n&lt;/var&gt; &lt;sup&gt;번째는&lt;/sup&gt; 사용자가 많은 인자로 포함하고 있음 -.</target>
        </trans-unit>
        <trans-unit id="3a937a7caf1d4996fe3ff6dfb753bac4db8bb380" translate="yes" xml:space="preserve">
          <source>However, there are important differences that make &lt;code&gt;Map&lt;/code&gt; preferable in certain cases:</source>
          <target state="translated">그러나 특정 경우에 &lt;code&gt;Map&lt;/code&gt; 선호 하는 중요한 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="66ed0c333ad51c15ca60e48fe30cb7b8328df4a7" translate="yes" xml:space="preserve">
          <source>However, there is another alternative. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context.</source>
          <target state="translated">그러나 다른 대안이 있습니다. JavaScript는 정적으로 범위가 지정된 언어이므로 변수가 선언되었는지 여부는 둘러싸는 컨텍스트에서 선언되었는지 여부를 확인하여 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="471ebf7edf48600abd0f6d54e5ea534330273953" translate="yes" xml:space="preserve">
          <source>However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.</source>
          <target state="translated">그러나 이것은 화살표 뒤에 줄 바꿈을 두거나 아래에서 볼 수 있듯이 괄호 / 중괄호를 사용하여 코드가 예쁘고 푹신하게 유지되도록 수정할 수 있습니다. 인수 사이에 줄 바꿈을 둘 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf3c21d43997f2e38fde291780ac2373d6107bbd" translate="yes" xml:space="preserve">
          <source>However, this combination of &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; declaration below is a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; due to &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; being hoisted to the top of the block. This results in an implicit re-declaration of the variable.</source>
          <target state="translated">그러나,이 조합 &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; 및 &lt;code&gt;let&lt;/code&gt; A는 아래의 선언을 &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 로 인해 &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; 블록의 상단에 게양되는가. 그 결과 변수의 암시 적 재 선언이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5eb7c1d2404c8192a9680a075b13909caf70856d" translate="yes" xml:space="preserve">
          <source>However, this is not the case for negative numbers. For example, &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 1073741821, which is different than &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; (which yields &lt;code&gt;-3&lt;/code&gt;):</source>
          <target state="translated">그러나 음수의 경우에는 해당되지 않습니다. 예를 들어, &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; 는 1073741821을 생성하며, 이는 &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; 와 다릅니다 ( &lt;code&gt;-3&lt;/code&gt; 생성 ).</target>
        </trans-unit>
        <trans-unit id="14dcb2bd120f90b22199060ec27ba9fae6eef4eb" translate="yes" xml:space="preserve">
          <source>However, this kind of technique should be avoided. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context. The only exception is the global scope, but the global scope is bound to the global object, so checking the existence of a variable in the global context can be done by checking the existence of a property on the &lt;em&gt;global object&lt;/em&gt; (using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, for instance).</source>
          <target state="translated">그러나 이런 종류의 기술은 피해야합니다. JavaScript는 정적으로 범위가 지정된 언어이므로 변수가 선언되어 있는지 아는 것은 둘러싼 컨텍스트에서 선언되어 있는지 확인할 수 있습니다. 유일한 예외는 전역 범위이지만 전역 범위는 전역 객체에 바인딩되므로 전역 컨텍스트에서 변수의 존재를 확인하려면 &lt;em&gt;전역 객체&lt;/em&gt; 의 속성 존재 여부를 확인하여 수행 할 수 있습니다 ( &lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자, 예를 들어).</target>
        </trans-unit>
        <trans-unit id="2730f9b7a2f6ab7900a8832f3fabf4b290a2468e" translate="yes" xml:space="preserve">
          <source>However, this was actually a really bad solution as this (in conjunction with other &lt;code&gt;arguments&lt;/code&gt;, &lt;code&gt;callee&lt;/code&gt;, and &lt;code&gt;caller&lt;/code&gt; issues) make inlining and tail recursion impossible in the general case (you can achieve it in select cases through tracing, etc., but even the best code is suboptimal due to checks that would not otherwise be necessary.) The other major issue is that the recursive call will get a different &lt;code&gt;this&lt;/code&gt; value, e.g.:</source>
          <target state="translated">그러나,이 (다른과 함께이 같은 정말 나쁜 솔루션 실제로이었다 &lt;code&gt;arguments&lt;/code&gt; , &lt;code&gt;callee&lt;/code&gt; 및 &lt;code&gt;caller&lt;/code&gt; 일반적인 경우에 인라인과 꼬리 재귀 불가능 (당신은 등 추적을 통해 선택의 경우에 그것을 달성 할 수 있는지 확인 문제), 그러나도 다른 방법으로는 필요하지 않은 검사로 인해 최상의 코드가 차선책 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e63c447862c1a00700022089166c5e9918e6d125" translate="yes" xml:space="preserve">
          <source>However, when possible, it's better for &lt;code&gt;iterable[Symbol.iterator]&lt;/code&gt; to return different iterators that always start from the beginning, like &lt;code&gt;&lt;a href=&quot;global_objects/set/@@iterator&quot;&gt;Set.prototype[@@iterator]()&lt;/a&gt;&lt;/code&gt; does.</source>
          <target state="translated">그러나 가능하면 &lt;code&gt;iterable[Symbol.iterator]&lt;/code&gt; 가 항상 처음부터 시작하는 다른 반복자를 반환하는 것이 &lt;code&gt;&lt;a href=&quot;global_objects/set/@@iterator&quot;&gt;Set.prototype[@@iterator]()&lt;/a&gt;&lt;/code&gt; 처럼.</target>
        </trans-unit>
        <trans-unit id="2c7f6b4de6ca0412e32fe91b98df7b3eb953a189" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">그러나 최종 결과는 동일하지만 프로세스에는 한 가지 중요한 차이점이 있습니다. 사용시 &lt;code&gt;Object.create()&lt;/code&gt; 및 &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; 상기 &lt;code&gt;new.target&lt;/code&gt; 의 연산자를 가리 &lt;code&gt;undefined&lt;/code&gt; 때문에, 생성자로서 사용 된 함수 내에 &lt;code&gt;new&lt;/code&gt; 키워드가 객체를 생성하는 데 사용되는 것은 아니다.</target>
        </trans-unit>
        <trans-unit id="f70a9726f7f1c9df802ece4459bb5ec212f9dbd6" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">그러나 최종 결과는 동일하지만 프로세스에는 한 가지 중요한 차이점이 있습니다. 사용시 &lt;code&gt;Object.create()&lt;/code&gt; 및 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 상기 &lt;code&gt;new.target&lt;/code&gt; 의 연산자를 가리 &lt;code&gt;undefined&lt;/code&gt; 때문에, 생성자로서 사용 된 함수 내에 &lt;code&gt;new&lt;/code&gt; 키워드가 객체를 생성하는 데 사용되는 것은 아니다.</target>
        </trans-unit>
        <trans-unit id="44a5203eb3853d077adb7930e82ede4e77c6e086" translate="yes" xml:space="preserve">
          <source>However, with any &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; value equal to or greater than the string's &lt;code&gt;length&lt;/code&gt;, the returned value &lt;em&gt;is&lt;/em&gt; the string's &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">그러나 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 값이 문자열의 &lt;code&gt;length&lt;/code&gt; 보다 크거나 같은 경우 반환되는 값 &lt;em&gt;은&lt;/em&gt; 문자열의 &lt;code&gt;length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d665da1be9c5139e8b9c230d03e2c075c39ac725" translate="yes" xml:space="preserve">
          <source>However, you can easily polyfill this method:</source>
          <target state="translated">그러나이 메서드는 쉽게 폴리 필 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92b2e22e1dbe601387214c0563f125b87f989255" translate="yes" xml:space="preserve">
          <source>Human-readable description of the error</source>
          <target state="translated">사람이 읽을 수있는 오류 설명</target>
        </trans-unit>
        <trans-unit id="774702501a96f9f0360fe3448d0861eb6e5a1874" translate="yes" xml:space="preserve">
          <source>Human-readable description of the error.</source>
          <target state="translated">사람이 읽을 수있는 오류 설명.</target>
        </trans-unit>
        <trans-unit id="448a81285c534cff1a1840023fec38448070a6b1" translate="yes" xml:space="preserve">
          <source>IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;timeZone&lt;/code&gt; 옵션의 IANA 시간대 이름</target>
        </trans-unit>
        <trans-unit id="a21d59a5661c2ebdd093c152333c7379faae31bd" translate="yes" xml:space="preserve">
          <source>IE-specific notes</source>
          <target state="translated">IE 관련 노트</target>
        </trans-unit>
        <trans-unit id="60b82a5cb94fb01631398c058b59f037ae77f375" translate="yes" xml:space="preserve">
          <source>IIFE</source>
          <target state="translated">IIFE</target>
        </trans-unit>
        <trans-unit id="5b708885213e869006690316087909daafe502c3" translate="yes" xml:space="preserve">
          <source>IIFE are function expressions that are invoked as soon as the function is declared.</source>
          <target state="translated">IIFE는 함수가 선언 되 자마자 호출되는 함수 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="1cfaaf83b26c6843fa3671116defdf1614fa45fb" translate="yes" xml:space="preserve">
          <source>ISO 8601 format</source>
          <target state="translated">ISO 8601 형식</target>
        </trans-unit>
        <trans-unit id="cf8e6bee03070b3dc40f512e498ab2c7e3c95539" translate="yes" xml:space="preserve">
          <source>ISO-8859-1 character / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+00FF&lt;/code&gt;</source>
          <target state="translated">ISO-8859-1 문자 / &lt;code&gt;U+0000&lt;/code&gt; 과 &lt;code&gt;U+00FF&lt;/code&gt; 사이의 유니 코드 코드 포인트</target>
        </trans-unit>
        <trans-unit id="662d84aac50b0d7e6987ea1c9fc03b1a8ce495d6" translate="yes" xml:space="preserve">
          <source>Ideally, an integer between 0 and 23, representing the hour. If a value greater than 23 is provided, the datetime will be incremented by the extra hours.</source>
          <target state="translated">시간을 나타내는 0에서 23 사이의 정수가 이상적입니다. 23보다 큰 값을 제공하면 날짜 시간이 추가 시간만큼 증가합니다.</target>
        </trans-unit>
        <trans-unit id="2afda55b08fab9ecb1a05641c3479447864735a5" translate="yes" xml:space="preserve">
          <source>Identifier after number</source>
          <target state="translated">숫자 다음의 식별자</target>
        </trans-unit>
        <trans-unit id="847e3311b1908b59346f71c4d71a8ffa62245c5d" translate="yes" xml:space="preserve">
          <source>Identifier associated with the label of the statement.</source>
          <target state="translated">명령문의 레이블과 연관된 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="eb00410628b8bc6a2a83e41c14565e4b8c6ef408" translate="yes" xml:space="preserve">
          <source>Identifier associated with the label of the statement. If the statement is not a loop or &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, this is required.</source>
          <target state="translated">명령문의 레이블과 연관된 식별자입니다. 문이 루프 또는 &lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 필수입니다.</target>
        </trans-unit>
        <trans-unit id="48da5a75972beaa5c2cdb9f750d86967381f2555" translate="yes" xml:space="preserve">
          <source>Identifier to be exported (so that it can be imported via &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; in another script).</source>
          <target state="translated">내보낼 식별자 ( 다른 스크립트에서 &lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; 를 통해 가져올 수 있도록 )</target>
        </trans-unit>
        <trans-unit id="ce4aea56ef53c9d0e88aee0e538775cd2f579600" translate="yes" xml:space="preserve">
          <source>Identifiers with special meanings</source>
          <target state="translated">특별한 의미를 가진 식별자</target>
        </trans-unit>
        <trans-unit id="d51a0c29dcde247f2c5fa07087cd7413f54881c7" translate="yes" xml:space="preserve">
          <source>Identity (&lt;code&gt;a === b&lt;/code&gt;)</source>
          <target state="translated">동일성 ( &lt;code&gt;a === b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b6ee669ffc2f6225a3fb2a4731a3e560ea59a0b1" translate="yes" xml:space="preserve">
          <source>Identity / strict equality (===)</source>
          <target state="translated">동일성 / 엄격한 평등 (===)</target>
        </trans-unit>
        <trans-unit id="e31d1e49c9c1b5219f967fd5909aabf716932429" translate="yes" xml:space="preserve">
          <source>Identity operator.</source>
          <target state="translated">신원 연산자.</target>
        </trans-unit>
        <trans-unit id="37706df937348636f41c4367505b2b1bf3c7bdc7" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; is encountered during conversion it is either omitted (when it is found in an object) or censored to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; (when it is found in an array). &lt;code&gt;JSON.stringify()&lt;/code&gt; can also just return &lt;code&gt;undefined&lt;/code&gt; when passing in &quot;pure&quot; values like &lt;code&gt;JSON.stringify(function(){})&lt;/code&gt; or &lt;code&gt;JSON.stringify(undefined)&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 하는 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; (이 개체에서 발견 될 때)이나 검열을가하거나 생략 변환시 발생 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; (이 배열에서 볼 때). &lt;code&gt;JSON.stringify()&lt;/code&gt; 는 &lt;code&gt;JSON.stringify(function(){})&lt;/code&gt; 또는 &lt;code&gt;JSON.stringify(undefined)&lt;/code&gt; 와 같은 &quot;순수한&quot;값을 전달할 때 &lt;code&gt;undefined&lt;/code&gt; 반환 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0830366e44ca860573514c10a22740499f87aeaa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;begin&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;begin&lt;/var&gt;&lt;/code&gt; 정의되지, &lt;code&gt;slice&lt;/code&gt; 인덱스에서 시작 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ee01d9cf0fc88d1b48492c445ed087ead9d9db5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, an empty string is returned.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; 가 같거나보다 큰 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , 빈 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="cf2a71f8aad1d69fb27e2edb72ffdca7718b8575" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or negative, no elements are removed. In this case, you should specify at least one new element (see below).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; 에이 인 &lt;code&gt;0&lt;/code&gt; 또는 음의 어떤 요소는 제거되지 않는다. 이 경우 하나 이상의 새 요소를 지정해야합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="493249ea5a30d91075fe23609561379fb3cfc61a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is omitted, or if its value is equal to or larger than &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; (that is, if it is equal to or greater than the number of elements left in the array, starting at &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt;), then all the elements from &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; to the end of the array will be deleted.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; 에가 생략되거나, 그 값과 같거나 초과하는 경우에 &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; (그것이 시작되는 배열의 좌측 요소의 개수보다 크거나 같으면하다 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; , 모든 요소) 에서 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 배열의 마지막에 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="0db5b6ced976a6ac58bdc41473dd0de476e98846" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; 가 너무 작거나 너무 큽니다. &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;100&lt;/code&gt; 사이의 값은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 일으키지 않습니다 . 구현은 선택한 더 크고 더 작은 값을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d616a57339402e501cabfc684de039bd2e7d84e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence (&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 시퀀스의 길이보다 긴, &lt;code&gt;slice&lt;/code&gt; 서열의 끝까지 추출물 ( &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b1146ef210942a5665073aedf95f5b545cec3a64" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 서열의 끝까지 추출물 ( &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21d843701dc6ae4dccacff84635f2767354ca7d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;sab.byteLength&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;sab.byteLength&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0ed5ac3600cda1d212d5c69ad6c4d2b72f2bce4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;typedarray.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;typedarray.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5aa89169f61bf8a0b59192f2c6adc83e482b095e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is omitted or undefined, or greater than &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, &lt;code&gt;slice()&lt;/code&gt; extracts to the end of the string. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt;. (For example, if &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt;, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt;.) If it is not undefined and not a number after &lt;code&gt;Number(&lt;var&gt;endIndex&lt;/var&gt;)&lt;/code&gt;, an empty string is returned.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 생략되거나 정의되지 않은, 또는보다 큰 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , &lt;code&gt;slice()&lt;/code&gt; 는 문자열의 끝 추출물. 음수이면 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 로 처리됩니다 . (예를 들어 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 가 &lt;code&gt;-3&lt;/code&gt; 이면 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt; 으로 처리됩니다 .) 정의되지 않았고 &lt;code&gt;Number(&lt;var&gt;endIndex&lt;/var&gt;)&lt;/code&gt; 뒤에 숫자 가 없으면 빈 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4acb01293c9ebc96050277ec4ecea3d16d5d902c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be negative, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-3, 0)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.)</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 지정되고 &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; 부의 경우, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 로는 그렇지 않으면 빈 문자열이 반환되고, 음수가 될 것이다. (예를 들어 &lt;code&gt;slice(-3, 0)&lt;/code&gt; 는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 반환합니다 .)</target>
        </trans-unit>
        <trans-unit id="8878d32eee2cef239c9db5973a9f340fcbb26f81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified, and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; are both positive or negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be greater than &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt;, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-1, -3)&lt;/code&gt; or &lt;code&gt;slice(3, 1)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.)</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 지정되어 &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 에이 양 또는 음의 모두, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 에는 보다 커야 &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; , 그렇지 않으면 빈 문자열이 반환됩니다. (예를 들어 &lt;code&gt;slice(-1, -3)&lt;/code&gt; 또는 &lt;code&gt;slice(3, 1)&lt;/code&gt; 는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 반환합니다 .)</target>
        </trans-unit>
        <trans-unit id="8d99b93b549e170bd47548fe7639c9d43ffa3b25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt;, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 너무 작거나 너무 큽니다. &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;20&lt;/code&gt; 사이의 값 ( 포함)은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 일으키지 않습니다 . 구현은 더 크고 작은 값도 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66544d3874ce4edf9eae7f1ef1fc6624550a1bd4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 의 경우 보다 크거나 어레이의 길이와 동일한 경우, &lt;code&gt;false&lt;/code&gt; 반환된다. 어레이는 검색되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3da6648a80a1cefb8dd16cb0d291276bb874d4ee" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt;. If the computed index is less or equal than &lt;code&gt;-1 * &lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;, the entire array will be searched.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 의 경우 제외하고, 계산 된 인덱스 검색을 시작하는 상기 어레이 내의 위치로서 사용되는 계산 &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt; . 계산 된 인덱스가 &lt;code&gt;-1 * &lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; 보다 작거나 같으면 전체 배열이 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="487c67ed27fb656d12527f75dab2874199fb2c3b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;hint&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;hint&lt;/var&gt;&lt;/code&gt; 입니다 &lt;code&gt;string&lt;/code&gt; 또는 &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 부르는 시도 &lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; 방법. 는 IF &lt;code&gt;toString&lt;/code&gt; 속성이 존재하지 않습니다, 그것은 호출하려고 &lt;a href=&quot;../object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt; 방법과 경우 &lt;code&gt;valueOf&lt;/code&gt; 가 존재하지 않습니다 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 발생 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0f5efa3659e939cb61d75f409dbc397e5dfd4f0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; 이 생략 &lt;code&gt;substring()&lt;/code&gt; 문자열의 끝에 문자를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="74661abc79fb28575922d95466c74870f72fbf49" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;substring()&lt;/code&gt; returns an empty string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; 이 동일 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; , &lt;code&gt;substring()&lt;/code&gt; 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="84c11d6a40baa8e63817b8454dc5cce38f79ac98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is greater than &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; 가 보다 큰 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; 다음의 효과 &lt;code&gt;substring()&lt;/code&gt; 두 인수 교환 것처럼이고; 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4a1188d27acd2c85324f5dbe55ce141e568b561d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 됩니다 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="5b7e60e3ac0d123fc54358e5f55ea9dba862cec9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is a negative number, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 음의 수이며, 이는로서 취급된다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="130c6593a9b08fcf958e0b432ebefd8329c78064" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="ebb546c2adf4b19ea6847ce51502abf3f40c22af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt; is returned.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; 인 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;[]&lt;/code&gt; 반환된다.</target>
        </trans-unit>
        <trans-unit id="12844bd10cfb1aad475650759ba13047e670ffb9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is a non-&lt;code&gt;RegExp&lt;/code&gt; object, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; 비이다 &lt;code&gt;RegExp&lt;/code&gt; 객체 그것은 암시 적으로 변환된다 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40d9a3e2e0e4ac01cd08feafbb23aaa11cbf2888" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; 배열이며, 배열의 값은 결과 JSON 문자열에 포함되어야하는 객체의 속성의 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ffed4cc806e515983ab47d40601f3fb95e4df288" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; appears at the beginning (or end) of the string, it still has the effect of splitting. The result is an empty (i.e. zero length) string, which appears at the first (or last) position of the returned array.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 문자열의 시작 부분 (또는 단부)에 표시 여전히 분할의 효과를 갖는다. 결과는 반환 된 배열의 첫 번째 (또는 마지막) 위치에 나타나는 빈 (즉, 길이가 0 인) 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="68e199d99c252fd48e1f805263f62e2034604071" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; contains multiple characters, that entire character sequence must be found in order to split.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 에 여러 문자가 포함 된 경우 분할하려면 전체 문자 시퀀스를 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="5b60c088d78a681e73c91c163ad39c4f7b653fc5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, matched results are included in the array.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 가 캡처 링 괄호 &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; 를 포함하는 정규식 인 경우 일치하는 결과가 배열에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6a59ad5deb2302a9520d8bf6c2c307e8389d3d22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression with capturing parentheses, then each time &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; matches, the results (including any &lt;code&gt;undefined&lt;/code&gt; results) of the capturing parentheses are spliced into the output array.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 캡처 괄호 정규식이고, 각 시간 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 일치가 (임의의 결과를 포함하는 &lt;code&gt;undefined&lt;/code&gt; 캡처 괄호의 결과)의 출력 배열에 접합된다.</target>
        </trans-unit>
        <trans-unit id="dd5410db2a9d04127c7025a228a8e52b90759641" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; is converted to an array of each of its UTF-16 &quot;characters&quot;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 빈 문자열이다 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 문자 &quot;UTF-16의 각각의 배열로 변환된다.&quot;</target>
        </trans-unit>
        <trans-unit id="15b494b90462f7791f44743fe53dc8f69ae000e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is omitted or does not occur in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;, the returned array contains one element consisting of the entire string.</source>
          <target state="translated">경우에 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 를 생략 또는 발생하지 않는다 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; , 반환 된 배열은 전체 스트링으로 구성된 하나 개의 요소를 포함한다.</target>
        </trans-unit>
        <trans-unit id="8fab622fa90718e949282abdba7d384b53a7b0ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 음의 번호입니다, 인덱스가 문자열의 끝에서 계산을 시작합니다. 이 값이 상한선입니다 &lt;code&gt;-&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd3655fbe616d69829dde2d91c2c3cbc32cae520" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 양수이며, 인덱스는 문자열의 시작에서 계산을 시작합니다. 값은 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 로 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="62a6623bb0673ca48812684ca8a1b3785951570f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is greater than the index range of the sequence, an empty array is returned.</source>
          <target state="translated">경우에 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 시퀀스의 인덱스 범위보다 큰 빈 어레이가 반환된다.</target>
        </trans-unit>
        <trans-unit id="518b8100637a518349d561e5c0006da27418be4d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; starts from the index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 정의되어 있지, &lt;code&gt;slice&lt;/code&gt; 인덱스에서 시작 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27f8a986dabc90f3ed0ff5a4753f1d7845a6539b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 숫자가 아닌, 다음 우선, 다음 32 비트의 부호없는 정수로 변환 숫자로 변환한다.</target>
        </trans-unit>
        <trans-unit id="64b63b25d9e84effd29498fdf2a885d5484eb8c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IPOdate&lt;/code&gt; is an existing &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object, it can be set to August 9, 1995 (local time) as follows:</source>
          <target state="translated">경우 &lt;code&gt;IPOdate&lt;/code&gt; 가 기존이다 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 개체가 다음과 같이, 그것은 1995년 8월 9일 (현지 시간)로 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="eed1125bbd1b5a051850eabf9e5873d34704e7da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OP&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt; and &lt;code&gt;OP&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt; have different precedence levels (see the table below), the operator with the highest precedence goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code.</source>
          <target state="translated">&lt;code&gt;OP&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt; 과 &lt;code&gt;OP&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt; 우선 순위 수준이 서로 다른 경우 (아래 표 참조) 우선 순위가 가장 높은 연산자가 먼저 표시되고 연관성은 중요하지 않습니다. 코드에서 덧셈이 먼저 작성되었지만 곱셈이 덧셈보다 우선 순위가 높고 먼저 실행되는 방법을 관찰하십시오.</target>
        </trans-unit>
        <trans-unit id="c8a241ffd2138d21f32a5fee3d772c309c3fb36c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment &lt;code&gt;i&lt;/code&gt; and decrement &lt;code&gt;j&lt;/code&gt; at once.</source>
          <target state="translated">경우 &lt;code&gt;a&lt;/code&gt; 양쪽에 10 개 엘리먼트와 2 차원 배열이며, 다음 코드는 증가하는 콤마 연산자를 사용하여 &lt;code&gt;i&lt;/code&gt; 및 감량 &lt;code&gt;j&lt;/code&gt; 한 번.</target>
        </trans-unit>
        <trans-unit id="eb85c26fba31d1a9441d0eb6dbc46b2aea5b80a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment two variables at once.</source>
          <target state="translated">경우 &lt;code&gt;a&lt;/code&gt; 양쪽에 10 개 엘리먼트와 2 차원 배열이며, 다음의 코드는 한 번에 두 개의 변수를 증가 콤마 연산자를 이용한다.</target>
        </trans-unit>
        <trans-unit id="e4b027b1b24fc7bb8b04abb0cb7a08da1bf2616b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;begin&lt;/code&gt; is greater than the length of the sequence, an empty array is returned.</source>
          <target state="translated">경우 &lt;code&gt;begin&lt;/code&gt; 시퀀스의 길이보다 큰 경우, 하늘의 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="1dc400567ab75269215a8320aa1d021ca5028205" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;begin&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; 이 정의되어 있지 않으면 &lt;code&gt;slice&lt;/code&gt; 는 인덱스 &lt;code&gt;0&lt;/code&gt; 에서 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="70ac2a72695a74d8e8f6b33ca1a725afc2199df0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c105983c489170e4e720a825176c1cbbe0a9eafe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1a5537e2caa6ceac829f312a0e5008c342f283b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3ccdf435ee7864d06931191b2056c8e2ed7a8c22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4e89c55d2f78906b0dcf24470198719184ae2ae3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is greater than 0, sort &lt;code&gt;b&lt;/code&gt; to an index lower than &lt;code&gt;a&lt;/code&gt;, i.e. &lt;code&gt;b&lt;/code&gt; comes first.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 종류, 0보다 큰 &lt;code&gt;b&lt;/code&gt; 를 보다 낮은 인덱스에 , 즉 &lt;code&gt;b&lt;/code&gt; 먼저 다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5d2bff07568b6c90bcc417bf4d0e753a3bcc19f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is less than 0, sort &lt;code&gt;a&lt;/code&gt; to an index lower than &lt;code&gt;b&lt;/code&gt;, i.e. &lt;code&gt;a&lt;/code&gt; comes first.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 종류 0보다 작은입니다 보다 낮은 인덱스에 &lt;code&gt;b&lt;/code&gt; , 즉 먼저 다. &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="223405fddc558bc5f7143526ce03de9f76e4808f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0, leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behavior, thus, not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0을 반환 떠나 와 &lt;code&gt;b&lt;/code&gt; 를 서로에 대해 변경을하지만, 모든 다른 요소에 대한 분류. 참고 : ECMAscript 표준은이 동작을 보장하지 않으므로 모든 브라우저 (예 : 최소 2003 년으로 거슬러 올라가는 Mozilla 버전)가이를 존중하지는 않습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa305bceeb386390b56ee72977e5735d91c97853" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0, leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0을 반환 떠나 와 &lt;code&gt;b&lt;/code&gt; 를 서로에 대해 변경을하지만, 모든 다른 요소에 대한 분류. 참고 : ECMAscript 표준은 이러한 동작을 보증하지 않으므로 모든 브라우저 (예 : 2003 년 이전의 Mozilla 버전)가이를 존중하지는 않습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0225b42f9d41db4959457c9bc952359283745d0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns greater than 0, sort &lt;code&gt;b&lt;/code&gt; to an index lower than &lt;code&gt;a&lt;/code&gt; (i.e. &lt;code&gt;b&lt;/code&gt; comes first).</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 종류, 0보다 큰 반환 &lt;code&gt;b&lt;/code&gt; 를 보다 낮은 인덱스에 (즉, &lt;code&gt;b&lt;/code&gt; 먼저). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="517740eb24e4a25aeecf7184e1a227c9c3fcbfed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns less than 0, sort &lt;code&gt;a&lt;/code&gt; to an index lower than &lt;code&gt;b&lt;/code&gt; (i.e. &lt;code&gt;a&lt;/code&gt; comes first).</source>
          <target state="translated">만약 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 이하 0이 아닌 반환, 일종의 인덱스보다 낮은에 &lt;code&gt;b&lt;/code&gt; (즉, &lt;code&gt;a&lt;/code&gt; 먼저). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed385a756462543affcbb15ce05a2a5778a35f22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, &quot;Banana&quot; comes before &quot;cherry&quot;. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, &quot;80&quot; comes before &quot;9&quot; in Unicode order. All &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction&lt;/code&gt; 공급되지 않고, 모든 비 &lt;code&gt;undefined&lt;/code&gt; 배열 요소들은 UTF-16 코드 유닛 위하여 문자열을 문자열로 변환과 비교하여 정렬된다. 예를 들어 &quot;Banana&quot;는 &quot;cherry&quot;앞에옵니다. 숫자 정렬에서 9는 80보다 먼저 나오지만 숫자는 문자열로 변환되므로 &quot;80&quot;은 유니 코드 순서로 &quot;9&quot;보다 먼저 나타납니다. &lt;code&gt;undefined&lt;/code&gt; 모든 요소는 배열 끝에 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="b76b7a0aeafaa087aee6bc8d316aa1cc0301c1a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, &quot;banana&quot; comes before &quot;cherry&quot;. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, &quot;80&quot; comes before &quot;9&quot; in the Unicode order. All &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction&lt;/code&gt; 공급되지 않고, 모든 비 &lt;code&gt;undefined&lt;/code&gt; 배열 요소들은 UTF-16 코드 유닛 위하여 문자열을 문자열로 변환과 비교하여 정렬된다. 예를 들어, &quot;banana&quot;는 &quot;cherry&quot;앞에옵니다. 숫자 정렬에서 9는 80 앞에옵니다. 그러나 숫자는 문자열로 변환되기 때문에 &quot;80&quot;은 유니 코드 순서에서 &quot;9&quot;앞에옵니다. &lt;code&gt;undefined&lt;/code&gt; 모든 요소는 배열의 끝으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="2d2c5c13a8881bbff4667bdffbd6ad348b6e379a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted according to the return value of the compare function (all &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array, with no call to &lt;code&gt;compareFunction&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are two elements being compared, then:</source>
          <target state="translated">경우 &lt;code&gt;compareFunction&lt;/code&gt; 공급되고, 모든 비 &lt;code&gt;undefined&lt;/code&gt; 배열 요소가 비교 함수의 리턴 값에 따라 분류된다 (모든 &lt;code&gt;undefined&lt;/code&gt; 요소없이 호출 어레이의 끝에 정렬 &lt;code&gt;compareFunction&lt;/code&gt; ). 경우 및 &lt;code&gt;b&lt;/code&gt; 두 개의 요소는, 비교되는 : &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="130adca0f52b183426249a215e0d0abe632aa26e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;condition&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt; (it is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;), the operator returns the value of &lt;code&gt;exprT&lt;/code&gt;; otherwise (when &lt;code&gt;condition&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;) it returns the value of &lt;code&gt;exprF&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;condition&lt;/code&gt; 으로 변환 될 수있는 &lt;code&gt;true&lt;/code&gt; (그것이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; ), 작업자의 반환 값 &lt;code&gt;exprT&lt;/code&gt; 을 ; 그렇지 않으면 ( &lt;code&gt;condition&lt;/code&gt; 이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;거짓 인 경우&lt;/a&gt; ) &lt;code&gt;exprF&lt;/code&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="81390427ea93c90575169e03eabf59e8dba53feb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;continue&lt;/code&gt; had a label of &lt;code&gt;checkiandj&lt;/code&gt;, the program would continue at the top of the &lt;code&gt;checkiandj&lt;/code&gt; statement.</source>
          <target state="translated">경우 &lt;code&gt;continue&lt;/code&gt; 의 레이블했다 &lt;code&gt;checkiandj&lt;/code&gt; 을 , 프로그램은 상단에 계속 &lt;code&gt;checkiandj&lt;/code&gt; 의 문.</target>
        </trans-unit>
        <trans-unit id="0669233d4672aaeccf93a7f396024d752c9f52d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;deleteCount&lt;/code&gt; is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).</source>
          <target state="translated">경우 &lt;code&gt;deleteCount&lt;/code&gt; 에가 0 또는 음수 어떠한 요소는 제거되지 않는다. 이 경우 하나 이상의 새 요소를 지정해야합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="4c76efae73e4cb264a24f14a2cd58259099138f9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;deleteCount&lt;/code&gt; is omitted, or if its value is larger than &lt;code&gt;array.length - start&lt;/code&gt; (that is, if it is greater than the number of elements left in the array, starting at &lt;code&gt;start&lt;/code&gt;), then all of the elements from &lt;code&gt;start&lt;/code&gt; through the end of the array will be deleted.</source>
          <target state="translated">경우 &lt;code&gt;deleteCount&lt;/code&gt; 에가 생략 값보다 큰 경우, 또는 &lt;code&gt;array.length - start&lt;/code&gt; (그것이 시작되는 배열에 남아 소자의 수보다 큰 경우이며, 그 &lt;code&gt;start&lt;/code&gt; 모두의 요소의 다음) &lt;code&gt;start&lt;/code&gt; 끝까지 배열 중 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="70a2b4d9d3b36ae4510ef7245f5f535ff3ce5084" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;digits&lt;/code&gt; is too small or too large. Values between 0 and 100, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</source>
          <target state="translated">경우 &lt;code&gt;digits&lt;/code&gt; 가 너무 작거나 너무 큽니다. 0에서 100 사이의 값은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 발생시키지 않습니다 . 구현시 선택한대로 더 크고 작은 값을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4580b6fff4be8bc33c435f043a3c4fea2f3c3e85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence (&lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 시퀀스의 길이보다 더 큰 &lt;code&gt;slice&lt;/code&gt; 서열 (의 끝까지 추출 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f53aeed879b131ebf52a47532e5ca0f2980fae0c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is negative, it is treated as &lt;code&gt;array.length + end&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 부의 경우, 그것은로 취급 &lt;code&gt;array.length + end&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="622cb32152550c51b1ec138f2a6a7f8d94aa6205" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy until the end (default to &lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;copyWithin&lt;/code&gt; 는 말 (기본적 때까지 복사합니다 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="732b6a679d4cc00072a8041a727498042ab37315" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy until the last index (default to &lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;copyWithin&lt;/code&gt; 는 마지막 인덱스 (기본적 때까지 복사합니다 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b66c532602a6b4b7f541db03b69a714e5a2b76a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8a30a0de12206cc82d1d8300d6d97b1aabb83b4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;sab.byteLength&lt;/code&gt;)&lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;sab.byteLength&lt;/code&gt; ) &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8d10f38ed7b5214cddef84203097e400579f986" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;typedarray.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;typedarray.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f24f8d2a77b27c491ed6280ed52670147ab0b196" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fractionDigits&lt;/code&gt; is too small or too large. Values between 0 and 20, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</source>
          <target state="translated">경우 &lt;code&gt;fractionDigits&lt;/code&gt; 너무 작거나 너무 큽니다. 0에서 20 사이의 값은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 발생시키지 않습니다 . 구현은 더 크고 작은 값도 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3a08523a482bf8b3d61cb286205ca75f1674f55" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</source>
          <target state="translated">경우 &lt;code&gt;fromIndex&lt;/code&gt; 의 경우 보다 크거나 어레이의 길이와 동일한 경우, &lt;code&gt;false&lt;/code&gt; 반환된다. 배열은 검색되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5df6396fcd29ff991a9e14ea494b1556385ed2d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fromIndex&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;searchElement&lt;/code&gt;. If the computed index is less or equal than &lt;code&gt;-1 * array.length&lt;/code&gt;, the entire array will be searched.</source>
          <target state="translated">경우 &lt;code&gt;fromIndex&lt;/code&gt; 의 경우 제외하고, 계산 된 인덱스 검색을 시작하는 상기 어레이 내의 위치로서 사용되는 계산 &lt;code&gt;searchElement&lt;/code&gt; . 계산 된 인덱스가 &lt;code&gt;-1 * array.length&lt;/code&gt; 보다 작거나 같은 경우 전체 배열이 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="0c13c1e9ad0c6b9a449ebb75ebc92f5c906c3f07" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;g&lt;/code&gt; is absent, this will always be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;g&lt;/code&gt; 이 결석이 항상있을 것입니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c6c46a41fb76b9e0e681e95a66aa79b8f042960" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;&quot;number&quot;&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; first tries to call &lt;code&gt;valueOf&lt;/code&gt;, and if that fails, it calls &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">경우에 &lt;code&gt;hint&lt;/code&gt; 있다 &lt;code&gt;&quot;number&quot;&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 첫 번째 시도는 호출 &lt;code&gt;valueOf&lt;/code&gt; 하고, 실패 할 경우, 그것은 호출 &lt;code&gt;toString&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="df85462510e04f2f839a7631bf941f80c7953f6c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;&quot;string&quot;&lt;/code&gt; or &lt;code&gt;&quot;default&quot;&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우에 &lt;code&gt;hint&lt;/code&gt; 있다 &lt;code&gt;&quot;string&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;default&quot;&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 시도는 호출 &lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; 방법. 는 IF &lt;code&gt;toString&lt;/code&gt; 속성이 존재하지 않습니다, 그것은 호출하려고 &lt;a href=&quot;../object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt; 방법과 경우 &lt;code&gt;valueOf&lt;/code&gt; 가 존재하지 않습니다 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 발생 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c761509807341dc52703b81421a4a131e809acc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; first tries to call &lt;code&gt;valueOf&lt;/code&gt;, and if that fails, it calls &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;hint&lt;/code&gt; 입니다 &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 첫 번째 시도는 호출 &lt;code&gt;valueOf&lt;/code&gt; 하고, 실패 할 경우, 그것은 호출 &lt;code&gt;toString&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="2b21616d26fe4a78293d088842e2969994ff5f28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indexEnd&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;indexEnd&lt;/code&gt; 이 생략 &lt;code&gt;substring()&lt;/code&gt; 문자열의 끝에 문자를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="11187126c129f39c22041af784cef8d066d040df" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indexStart&lt;/code&gt; is greater than &lt;code&gt;indexEnd&lt;/code&gt;, then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</source>
          <target state="translated">경우 &lt;code&gt;indexStart&lt;/code&gt; 가 보다 큰 &lt;code&gt;indexEnd&lt;/code&gt; 다음의 효과 &lt;code&gt;substring()&lt;/code&gt; 두 인수 교환 것처럼이고; 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d95177eda65034248451a49cc0f1e66632749edd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to or less than the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting from &lt;code&gt;lastIndex&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 행 이하 문자열의 길이보다 같으며 정규식 빈 문자열과 일치하는 경우, 정규 표현부터 입력 일치 &lt;code&gt;lastIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b33670f984535e0b59f902eaf191c404eb48715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and &lt;code&gt;lastIndex&lt;/code&gt; is reset to 0.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 문자열의 길이와 동일하고, 정규 표현식은 빈 문자열, 다음 정규 표현식 불일치 입력과 일치하지 않는 경우 &lt;code&gt;lastIndex&lt;/code&gt; 0으로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="5bf25365ce1d6a9d04df754837052ef1438d40ea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at &lt;code&gt;lastIndex&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 문자열의 길이와 동일하고, 정규 표현식은 빈 문자열과 일치하는 경우, 다음 정규 표현식에 입력 시작 일치 &lt;code&gt;lastIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f431551312059047b6d1f0177bad8d497d6b2ecd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is greater than the length of the string, &lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; fail, then &lt;code&gt;lastIndex&lt;/code&gt; is set to 0.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 문자열의 길이보다 클 &lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 실패 후 &lt;code&gt;lastIndex&lt;/code&gt; 속성은 0으로 설정된다.</target>
        </trans-unit>
        <trans-unit id="5422b869ba1037ff1cca0689e54f83d4ea561a1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;length&lt;/code&gt; 됩니다 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="083906d99f8ee5dd58fa1d2cf691d55abc86cda6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is a negative number, it is treated as 0.</source>
          <target state="translated">경우 &lt;code&gt;length&lt;/code&gt; 음의 수이고, 그것은 0으로 간주된다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
