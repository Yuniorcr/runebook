<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="twig">
    <body>
      <group id="twig">
        <trans-unit id="d6e73a9ab58564b6c6f9d89b412dfc49be175ef0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;country_name&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baae1e705722afd6d9de4f70375ee459d79aedad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;country_name&lt;/code&gt; filter returns the country name given its ISO-3166 two-letter code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb4708ec7a7d053da724118296fe14e3d88ce0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;country_timezones&lt;/code&gt; function is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451b2fa6b1745235608ec04bc0edd95ca7fc98e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;country_timezones&lt;/code&gt; function returns the names of the timezones associated with a given country code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17da35633b02f3f8923db8a9dfa3abd9e3824453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;currency_name&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ad337be122897576f1c7c8442e62aa0d974c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;currency_name&lt;/code&gt; filter returns the currency name given its three-letter code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818320d720aef2849eabeb71c3785eb4fd6eaf90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;currency_symbol&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff7e0ffb17750ed274919bc55639c448757fb36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;currency_symbol&lt;/code&gt; filter returns the currency symbol given its three-letter code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1e20413f0e5c32410d548c8841be407e164367" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cycle&lt;/code&gt; function cycles on an array of values:</source>
          <target state="translated">&lt;code&gt;cycle&lt;/code&gt; 값의 배열에서 작동 사이클 :</target>
        </trans-unit>
        <trans-unit id="06e9455d37b0946337aa055c91f455c2e6afc222" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data_uri&lt;/code&gt; filter generates a URL using the data scheme as defined in RFC 2397:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d313cb8c9ffa91a76c5949b9bca037ca98f955" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data_uri&lt;/code&gt; filter is part of the &lt;code&gt;HtmlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77eb234d788844ca1f03526d092faaf1a5cab09c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date&lt;/code&gt; filter accepts strings (it must be in a format supported by the &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime&lt;/a&gt; function), &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;DateTime&lt;/a&gt; instances, or &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval&lt;/a&gt; instances. For instance, to display the current date, filter the word &quot;now&quot;:</source>
          <target state="translated">&lt;code&gt;date&lt;/code&gt; 필터 (가 지원하는 포맷이어야 문자열을 수락 &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;한 strtotime의&lt;/a&gt; 함수) &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;날짜 시간&lt;/a&gt; 인스턴스 또는 &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval의&lt;/a&gt; 인스턴스. 예를 들어, 현재 날짜를 표시하려면 &quot;지금&quot;이라는 단어를 필터링하십시오.</target>
        </trans-unit>
        <trans-unit id="a6595d850d802161e5946a6f1a03ba21090d9378" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date&lt;/code&gt; filter accepts strings (it must be in a format supported by the &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime&lt;/a&gt; function), &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;DateTime&lt;/a&gt; instances, or &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval&lt;/a&gt; instances. For instance, to display the current date, filter the word &amp;ldquo;now&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7796966e97e4813e1f2e13803584baaed805c901" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date&lt;/code&gt; filter formats a date to a given format:</source>
          <target state="translated">&lt;code&gt;date&lt;/code&gt; 필터는 주어진 형식으로 날짜를 포맷 :</target>
        </trans-unit>
        <trans-unit id="c85f8b701a4fc4c98a64bf1b9ada081cc2ccc938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date_modify&lt;/code&gt; filter accepts strings (it must be in a format supported by the &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime&lt;/a&gt; function) or &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;DateTime&lt;/a&gt; instances. You can combine it with the &lt;a href=&quot;date&quot;&gt;date&lt;/a&gt; filter for formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a1b9c27397952f9eb08576ec6b53480c103632" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date_modify&lt;/code&gt; filter accepts strings (it must be in a format supported by the &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime&lt;/a&gt; function) or &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;DateTime&lt;/a&gt; instances. You can easily combine it with the &lt;a href=&quot;date&quot;&gt;date&lt;/a&gt; filter for formatting.</source>
          <target state="translated">&lt;code&gt;date_modify&lt;/code&gt; 필터 문자열을 수락 (이는 지원되는 형식이어야 &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime으로의&lt;/a&gt; 또는 함수) &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;날짜 시간&lt;/a&gt; 인스턴스. &lt;a href=&quot;date&quot;&gt;날짜&lt;/a&gt; 필터 와 쉽게 결합하여 서식을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c133f2c7161b16391bb7e622b23faee600ae8b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date_modify&lt;/code&gt; filter modifies a date with a given modifier string:</source>
          <target state="translated">&lt;code&gt;date_modify&lt;/code&gt; 필터는 주어진 수식 문자열로 날짜를 수정합니다 :</target>
        </trans-unit>
        <trans-unit id="c46107f2fa75538d6f369cb980d446e862b995a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;default&lt;/code&gt; filter returns the passed default value if the value is undefined or empty, otherwise the value of the variable:</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 값이 정의되지 않았거나 비어있는 경우 필터는 변수의 다른 값을 전달 기본 값을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="1b145beb33958c6428a1246aa85b0387d0e2bbac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;display()&lt;/code&gt; method is a shortcut to output the rendered template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df01a343602c9310d484d4698a78c13186a546a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;display()&lt;/code&gt; method is a shortcut to output the template directly.</source>
          <target state="translated">&lt;code&gt;display()&lt;/code&gt; 메소드는 서식을 직접 출력하는 지름길이다.</target>
        </trans-unit>
        <trans-unit id="692781c0b9584a9043a42e010e10ebe0dd72cc91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; tag works exactly like the regular variable expression (&lt;code&gt;{{ ...
}}&lt;/code&gt;) just that it doesn&amp;rsquo;t print anything:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948e3b0df1dec5c2763406af28cb197981dba3d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; tag works exactly like the regular variable expression (&lt;code&gt;{{ ...
}}&lt;/code&gt;) just that it doesn't print anything:</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 태그가 정확히 일반 변수의 표현처럼 작동 ( &lt;code&gt;{{ ... }}&lt;/code&gt; )는 아무것도 인쇄되지 않습니다 단지 :</target>
        </trans-unit>
        <trans-unit id="0c171a70d9a57ca5304be00a542f3215b6e32c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dump&lt;/code&gt; function dumps information about a template variable. This is mostly useful to debug a template that does not behave as expected by introspecting its variables:</source>
          <target state="translated">&lt;code&gt;dump&lt;/code&gt; 기능은 템플릿 변수에 대한 정보를 덤프합니다. 변수를 검사하여 예상대로 작동하지 않는 템플릿을 디버깅하는 데 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="60eac5692d6576266e138dcf1a9ab556960e564e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dump&lt;/code&gt; function is not available by default. You must add the &lt;code&gt;Twig_Extension_Debug&lt;/code&gt; extension explicitly when creating your Twig environment:</source>
          <target state="translated">&lt;code&gt;dump&lt;/code&gt; 기능은 기본적으로 사용할 수 없습니다. Twig 환경을 작성할 때 &lt;code&gt;Twig_Extension_Debug&lt;/code&gt; 확장을 명시 적으로 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="911372f463777c2743a1992c910fe5992fbab3f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dump&lt;/code&gt; function is not available by default. You must add the &lt;code&gt;\Twig\Extension\DebugExtension&lt;/code&gt; extension explicitly when creating your Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f348cc4aaa6d73bc36bb534cab74eee413e23103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag combines the behavior of &lt;a href=&quot;include&quot;&gt;include&lt;/a&gt; and &lt;a href=&quot;extends&quot;&gt;extends&lt;/a&gt;. It allows you to include another template&amp;rsquo;s contents, just like &lt;code&gt;include&lt;/code&gt; does. But it also allows you to override any block defined inside the included template, like when extending a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6624dfe9784454b6c556591ff6373a4d0feb76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag combines the behaviour of &lt;a href=&quot;include&quot;&gt;include&lt;/a&gt; and &lt;a href=&quot;extends&quot;&gt;extends&lt;/a&gt;. It allows you to include another template's contents, just like &lt;code&gt;include&lt;/code&gt; does. But it also allows you to override any block defined inside the included template, like when extending a template.</source>
          <target state="translated">&lt;code&gt;embed&lt;/code&gt; 의 태그는 동작을 겸비한 &lt;a href=&quot;include&quot;&gt;포함&lt;/a&gt; 및 &lt;a href=&quot;extends&quot;&gt;확장&lt;/a&gt; . 그것은 단지처럼 다른 템플릿의 내용을 포함 할 수 있습니다 &lt;code&gt;include&lt;/code&gt; 한다. 그러나 템플릿을 확장 할 때와 같이 포함 된 템플릿 내에 정의 된 블록을 재정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c39a2c1665a60532d4beca89d0c0ac1d98bf11b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag takes the exact same arguments as the &lt;code&gt;include&lt;/code&gt; tag:</source>
          <target state="translated">&lt;code&gt;embed&lt;/code&gt; (가)로 태그는 동일한 인수를 &lt;code&gt;include&lt;/code&gt; 태그 :</target>
        </trans-unit>
        <trans-unit id="e21db1b726db4b05a28f478595fb7adb621dfddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag takes the idea of template inheritance to the level of content fragments. While template inheritance allows for &quot;document skeletons&quot;, which are filled with life by child templates, the &lt;code&gt;embed&lt;/code&gt; tag allows you to create &quot;skeletons&quot; for smaller units of content and re-use and fill them anywhere you like.</source>
          <target state="translated">&lt;code&gt;embed&lt;/code&gt; 태그는 컨텐츠 조각의 수준에 템플릿 상속의 개념을합니다. 템플릿 상속을 통해 자식 템플릿으로 가득 찬 &quot;문서 뼈대&quot;를 사용할 수 있지만 &lt;code&gt;embed&lt;/code&gt; 태그를 사용하면 더 작은 단위의 콘텐츠에 대한 &quot;골격&quot;을 만들어 원하는 곳 어디에서나 재사용하고 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cd64e128274e0b3a8b8bd9c697b0271f97e0e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag takes the idea of template inheritance to the level of content fragments. While template inheritance allows for &amp;ldquo;document skeletons&amp;rdquo;, which are filled with life by child templates, the &lt;code&gt;embed&lt;/code&gt; tag allows you to create &amp;ldquo;skeletons&amp;rdquo; for smaller units of content and re-use and fill them anywhere you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157e33f77b4422d38f7d255c2607c6b805cf5182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter can also be used in other contexts than HTML thanks to an optional argument which defines the escaping strategy to use:</source>
          <target state="translated">&lt;code&gt;escape&lt;/code&gt; 필터는 사용에 탈출 전략을 정의하는 선택적 인수에 HTML 덕분 이외의 상황에서 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="4b054688f3b6d5e5d45b3d622daf62124750c2ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter escapes a string for safe insertion into the final output. It supports different escaping strategies depending on the template context.</source>
          <target state="translated">&lt;code&gt;escape&lt;/code&gt; 필터는 최종 출력에 안전하게 삽입하는 문자열을 탈출. 템플릿 컨텍스트에 따라 다른 이스케이프 전략을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f6ccb56d36596943c0f81f78c72b183256ee769e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter escapes a string using strategies that depend on the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8329a9fc207d1d41231886266f6716c10a2f9586" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter supports the following escaping strategies for HTML documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d7328582ac96c6d97cef791b4d7806906c198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter supports the following escaping strategies:</source>
          <target state="translated">&lt;code&gt;escape&lt;/code&gt; 필터는 다음과 같은 탈출 전략을 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="bde417128526d71fede9fb78614f2a447ea32142" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escaper&lt;/code&gt; extension adds automatic output escaping to Twig. It defines a tag, &lt;code&gt;autoescape&lt;/code&gt;, and a filter, &lt;code&gt;raw&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;escaper&lt;/code&gt; 확장에 나뭇 탈출 자동 출력을 추가한다. 태그 &lt;code&gt;autoescape&lt;/code&gt; 및 필터 &lt;code&gt;raw&lt;/code&gt; 를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="bffba75408b4ea4103cc0fde4ba7531e9090e1b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag can be used to extend a template from another one.</source>
          <target state="translated">가 &lt;code&gt;extends&lt;/code&gt; 태그가 다른 하나로부터 템플릿을 확장하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="817d160418c5d5d0f0b110915bfd12116b87f7a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag is the key here. It tells the template engine that this template &quot;extends&quot; another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</source>
          <target state="translated">은 &lt;code&gt;extends&lt;/code&gt; 태그 여기 열쇠입니다. 이 템플릿은 다른 템플릿을 &quot;확장&quot;한다고 템플릿 엔진에 알려줍니다. 템플릿 시스템은이 템플릿을 평가할 때 먼저 부모를 찾습니다. 확장 태그는 템플릿의 첫 번째 태그 여야합니다.</target>
        </trans-unit>
        <trans-unit id="f3ca2beb2d3b306051f8818f3c54a99aab29b80a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag is the key here. It tells the template engine that this template &amp;ldquo;extends&amp;rdquo; another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99de059f2b885c80521e786d9ef5666b41c6e75a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; filter filters elements of a sequence or a mapping using an arrow function. The arrow function receives the value of the sequence or mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f5632df3f44be1b9cb73c817fec2a161f90776" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;first&lt;/code&gt; filter returns the first &quot;element&quot; of a sequence, a mapping, or a string:</source>
          <target state="translated">첫 &lt;code&gt;first&lt;/code&gt; 필터는 시퀀스, 매핑 또는 문자열의 첫 번째 &quot;요소&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3cb4fa6aa3c6157efb1d37b3ea85c3d13b05f9dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;first&lt;/code&gt; filter returns the first &amp;ldquo;element&amp;rdquo; of a sequence, a mapping, or a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361510c9c5bdc43866136662fe460a8219f82b32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; tag tells Twig to flush the output buffer:</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 태그 출력 버퍼를 플러시 나뭇 말한다 :</target>
        </trans-unit>
        <trans-unit id="a3dc5950d236340577fe0c9778a003f1c3084766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; filter formats a given string by replacing the placeholders (placeholders follows the &lt;a href=&quot;https://secure.php.net/sprintf&quot;&gt;sprintf&lt;/a&gt; notation):</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 필터는 플레이스 홀더 (자리는 다음과 교체하여 주어진 문자열 포맷 &lt;a href=&quot;https://secure.php.net/sprintf&quot;&gt;의 sprintf의&lt;/a&gt; 표기법) :</target>
        </trans-unit>
        <trans-unit id="0060cb576773b132102229089c4804de694b1753" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_currency&lt;/code&gt; filter formats a number as a currency:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54823fa3f9db56a155f604d6568c8081b17ce1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_currency&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924c0128027d6c80c551f84acad682db10dfbdc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_date&lt;/code&gt; filter formats a date. It behaves in the exact same way as the &lt;a href=&quot;format_datetime&quot;&gt;format_datetime&lt;/a&gt; filter, but without the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbb69ff9d600765de4e689d2381ab00aedfef8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_date&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6f96d8e94e19c6ce618e9ad891ee9830b98b2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_datetime&lt;/code&gt; filter formats a date time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7275e000fb9d7d41ad05c1b68128f866f1e0f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_datetime&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a5689fe3b702246b7ed020014de49d5bb63cc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_number&lt;/code&gt; filter formats a number:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0097e17be14b2da96decd67a2aa93f473dade443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_number&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4820684caa952278e280437707403bdb8d02a029" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_time&lt;/code&gt; filter formats a time. It behaves in the exact same way as the &lt;a href=&quot;format_datetime&quot;&gt;format_datetime&lt;/a&gt; filter, but without the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9a5249645d4df2c2b76464f7ebf5a754a4d314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format_time&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb417d50ceb0df7bcca0fa55a5c0aa697ce98f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; tag imports &lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt; names into the current namespace. The tag is documented in detail in the documentation for the &lt;a href=&quot;import&quot;&gt;import&lt;/a&gt; tag.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; 태그 수입 &lt;a href=&quot;macro&quot;&gt;매크로&lt;/a&gt; 현재 네임 스페이스에 이름. 태그는 &lt;a href=&quot;import&quot;&gt;가져 오기&lt;/a&gt; 태그 설명서에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8355c81f93233fe31e28e4e640c2645bc38654a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; tag imports &lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt; names into the current namespace. The tag is documented in detail in the documentation for the &lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68801fb748ab295cba3984228f16e6c585c011f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOperators()&lt;/code&gt; methods lets you add new operators. Here is how to add &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators:</source>
          <target state="translated">&lt;code&gt;getOperators()&lt;/code&gt; 메서드를 사용하면 새 운영자를 추가 할 수 있습니다. 추가하는 방법은 다음과 같습니다 &lt;code&gt;!&lt;/code&gt; , &lt;code&gt;||&lt;/code&gt; 및 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 연산자 :</target>
        </trans-unit>
        <trans-unit id="9e56a14901c16daf98e275363a9a7f3315ddd506" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOperators()&lt;/code&gt; methods lets you add new operators. Here is how to add the &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168a76bbaa0bf4b00f9b4ae6503fd3417b7cbf84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getSourceContext()&lt;/code&gt; method must return an instance of &lt;code&gt;Twig_Source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getSourceContext()&lt;/code&gt; 메소드의 인스턴스를 반환해야 &lt;code&gt;Twig_Source&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="becc57326f9e95644fc8740dccbc7102dd8aca99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getSourceContext()&lt;/code&gt; method must return an instance of &lt;code&gt;\Twig\Source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4d775157865531855cbaeed2a36af803a54709" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTag()&lt;/code&gt; method must return the tag we want to parse, here &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getTag()&lt;/code&gt; 메소드는, 우리가 여기, 구문 분석 할 태그를 반환해야합니다 &lt;code&gt;set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="661164ace9ec8a163d8ad3363886805db865b969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTests()&lt;/code&gt; method lets you add new test functions:</source>
          <target state="translated">&lt;code&gt;getTests()&lt;/code&gt; 메소드는 새로운 테스트 기능을 추가 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c30f13a8ea9131d21bf3ea67fba131af55743841" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;html_classes&lt;/code&gt; function is part of the &lt;code&gt;HtmlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcb9d090c981f211f73528acbee0d89e89712f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;html_classes&lt;/code&gt; function returns a string by conditionally joining class names together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1518e27ca83e2ff692f50d32593dce7647c25e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;html_to_markdown&lt;/code&gt; filter converts a block of HTML to Markdown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1dc2bbe7af75563fb2b86c6885882ce786301d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;html_to_markdown&lt;/code&gt; filter is part of the &lt;code&gt;MarkdownExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f0fb6d7b36b47835b1e9599edddae47fa30542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement in Twig is comparable with the if statements of PHP.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 나뭇 가지에 문은 PHP의 경우 문장으로 비교합니다.</target>
        </trans-unit>
        <trans-unit id="89194f8c3490cb4f1adc0e5f2f2255ace6817113" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; tag imports &lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt; names in a local variable. The tag is documented in detail in the documentation for the &lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b1df8387204cf8851a30a6541a8dc4600e4c96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator performs containment test.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 조작을 수행 수납 시험.</target>
        </trans-unit>
        <trans-unit id="3f3d783345e5374e19ae95f57e346fc7bc1d501d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator performs containment test. It returns &lt;code&gt;true&lt;/code&gt; if the left operand is contained in the right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9391393f4882addd5a8576922a42fdc0e1eba2c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; function does not impose any specific order for arguments thanks to &lt;a href=&quot;../templates#named-arguments&quot;&gt;named arguments&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac2fc3431937c9388da35b8a5224aedcf9615b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; function is more &amp;ldquo;composable&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afac8fc85353ccff7bf2a26abd2b9666ee6399c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; function is semantically more &amp;ldquo;correct&amp;rdquo; (including a template outputs its rendered contents in the current scope; a tag should not display anything);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d22f5f290a7b8a1fed18d253ad4143ebaac31e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; function returns the rendered content of a template:</source>
          <target state="translated">는 &lt;code&gt;include&lt;/code&gt; 함수가 반환 템플릿의 렌더링 된 내용 :</target>
        </trans-unit>
        <trans-unit id="cb164c17be978baed8f58aa5c67568ca8e6c522d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; statement includes a template and outputs the rendered content of that file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d520db4926c547e24c082c125ff4393aaebbe16c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; statement includes a template and returns the rendered content of that file into the current namespace:</source>
          <target state="translated">는 &lt;code&gt;include&lt;/code&gt; 문 템플릿을 포함하고 현재 네임 스페이스에 해당 파일의 렌더링 된 내용을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="72c4ace811779f218f846ba9f0a2898c3009ab4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inky_to_html&lt;/code&gt; filter is part of the &lt;code&gt;InkyExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb78d563c084f28fb7f59d9a2d6ad7efc83285a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inky_to_html&lt;/code&gt; filter processes an &lt;a href=&quot;https://github.com/zurb/inky&quot;&gt;inky email template&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fe7990852f029d3efc327a4ffc8d29309bee00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline_css&lt;/code&gt; filter inline CSS styles in HTML documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdb7312d2a51a37c90ee29017c426224ef76a45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline_css&lt;/code&gt; filter is part of the &lt;code&gt;CssInlinerExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00dccd11bc69f2a5a916c034205674c6f1358b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is&lt;/code&gt; operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test:</source>
          <target state="translated">는 &lt;code&gt;is&lt;/code&gt; 운전자 수행 시험. 테스트는 공통 표현식에 대해 변수를 테스트하는 데 사용할 수 있습니다. 올바른 피연산자는 테스트 이름입니다.</target>
        </trans-unit>
        <trans-unit id="5700677a49b4856951fe1d2ce4a31213a0d614bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isFresh()&lt;/code&gt; method must return &lt;code&gt;true&lt;/code&gt; if the current cached template is still fresh, given the last modification time, or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;isFresh()&lt;/code&gt; 메서드는 반환해야 &lt;code&gt;true&lt;/code&gt; 현재 캐시 된 템플릿 신선한 여전히 경우 최종 수정 시간, 또는 주어진 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="9a7e7afd97cb725f93cbf08db598c05fb380f854" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;join&lt;/code&gt; filter returns a string which is the concatenation of the items of a sequence:</source>
          <target state="translated">는 &lt;code&gt;join&lt;/code&gt; 필터 반환 시퀀스의 항목의 연결이 문자열을 :</target>
        </trans-unit>
        <trans-unit id="ac64c5d2ed1087cc55710a50424e31d04536a2a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json_encode&lt;/code&gt; filter returns the JSON representation of a value:</source>
          <target state="translated">&lt;code&gt;json_encode&lt;/code&gt; 필터는 값의 JSON 표현을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="37df48f92877e1a150fda994b1de24710042dd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys&lt;/code&gt; filter returns the keys of an array. It is useful when you want to iterate over the keys of an array:</source>
          <target state="translated">&lt;code&gt;keys&lt;/code&gt; 필터 어레이의 키를 반환한다. 배열의 키를 반복 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6a30638b3df0a57a3a3b8845ed5c9b6d873e1cb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;language_name&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e722fa7032519007f6542f4474f51c8938b02e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;language_name&lt;/code&gt; filter returns the language name given its two-letter code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410b6b2171eacc088a408761d4c973c89b3f4ba9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; filter returns the last &quot;element&quot; of a sequence, a mapping, or a string:</source>
          <target state="translated">&lt;code&gt;last&lt;/code&gt; 필터 순서, 매핑, 또는 문자열의 마지막 &quot;요소&quot;를 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="27930bdf4903abfff32b55ace816ef82a536fdf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; filter returns the last &amp;ldquo;element&amp;rdquo; of a sequence, a mapping, or a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49bb3b8bd12457ee5a65655af737d8407cd41f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; filter returns the number of items of a sequence or mapping, or the length of a string.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 필터는 시퀀스 또는 매핑, 또는 문자열의 길이의 항목 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="19ebd86e7657c8651fbcf339bdb91206d1f0cc5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locale_name&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6e568424b7c42821f4cd482419eae7c543b1f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locale_name&lt;/code&gt; filter returns the locale name given its two-letter code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a593ec9ffe8950082afd494d3f5e6d12179c055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop.length&lt;/code&gt;, &lt;code&gt;loop.revindex&lt;/code&gt;, &lt;code&gt;loop.revindex0&lt;/code&gt;, and &lt;code&gt;loop.last&lt;/code&gt; variables are only available for PHP arrays, or objects that implement the &lt;code&gt;Countable&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9fa90530366866598478026d28321914ae37c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop.length&lt;/code&gt;, &lt;code&gt;loop.revindex&lt;/code&gt;, &lt;code&gt;loop.revindex0&lt;/code&gt;, and &lt;code&gt;loop.last&lt;/code&gt; variables are only available for PHP arrays, or objects that implement the &lt;code&gt;Countable&lt;/code&gt; interface. They are also not available when looping with a condition.</source>
          <target state="translated">&lt;code&gt;loop.length&lt;/code&gt; , &lt;code&gt;loop.revindex&lt;/code&gt; , &lt;code&gt;loop.revindex0&lt;/code&gt; 및 &lt;code&gt;loop.last&lt;/code&gt; 변수는 PHP 배열에서만 사용할 수 있습니다, 또는 구현하는 객체 &lt;code&gt;Countable&lt;/code&gt; 인터페이스를. 조건을 반복 할 때는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="af30b7d5c04220a7b0351843917a0618ce56493c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lower&lt;/code&gt; filter converts a value to lowercase:</source>
          <target state="translated">&lt;code&gt;lower&lt;/code&gt; 필터 소문자 변환 값 :</target>
        </trans-unit>
        <trans-unit id="03d3a02a3aba840f84cd1d025e8a9a83e779e657" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;map&lt;/code&gt; filter applies an arrow function to the elements of a sequence or a mapping. The arrow function receives the value of the sequence or mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2445badf381fb02e5af078d1de30c125378a28d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markdown_to_html&lt;/code&gt; filter converts a block of Markdown to HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8577ae8ec7265d95e363163f46f13fcadebd10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markdown_to_html&lt;/code&gt; filter is part of the &lt;code&gt;MarkdownExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6164aabc73042acc10266f499c62d5afc3bd0012" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge&lt;/code&gt; filter also works on hashes:</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; 필터는 해시에서 작동합니다 :</target>
        </trans-unit>
        <trans-unit id="ce5234404419a5c9c04df93914f8d9afd3be17c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge&lt;/code&gt; filter merges an array with another array:</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; 필터는 다른 배열로 배열 병합 :</target>
        </trans-unit>
        <trans-unit id="12f2049de90207e2d4a3203b1fac4d18b74a11c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nl2br&lt;/code&gt; filter inserts HTML line breaks before all newlines in a string:</source>
          <target state="translated">&lt;code&gt;nl2br&lt;/code&gt; 의 필터 삽입 문자열의 모든 줄 바꿈 앞에 줄 바꿈을 HTML :</target>
        </trans-unit>
        <trans-unit id="cbd8572e3e73141f20f341c09b33e9288bb5a5fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nl2br&lt;/code&gt; filter pre-escapes the input before applying the transformation.</source>
          <target state="translated">&lt;code&gt;nl2br&lt;/code&gt; 의 필터 변환을 적용하기 전에 입력은 프리 - 탈출.</target>
        </trans-unit>
        <trans-unit id="a8da1ff778152ee852452db2ee78e5cda54e0c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;node&lt;/code&gt; sub-node will contain an expression of &lt;code&gt;my_value&lt;/code&gt;. Node-based tests also have access to the &lt;code&gt;arguments&lt;/code&gt; node. This node will contain the various other arguments that have been provided to your test.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 하위 노드의 표현 포함 &lt;code&gt;my_value&lt;/code&gt; 을 . 노드 기반 테스트는 &lt;code&gt;arguments&lt;/code&gt; 노드에 액세스 할 수도 있습니다 . 이 노드에는 테스트에 제공된 다양한 다른 인수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="1f7ed5fdfcdbfb2be11afe2121d283fb1f18207a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;number_format&lt;/code&gt; filter formats numbers. It is a wrapper around PHP&amp;rsquo;s &lt;a href=&quot;https://secure.php.net/number_format&quot;&gt;number_format&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81837a441e58e822553187f0220f2b6c83aa26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;number_format&lt;/code&gt; filter formats numbers. It is a wrapper around PHP's &lt;a href=&quot;https://secure.php.net/number_format&quot;&gt;number_format&lt;/a&gt; function:</source>
          <target state="translated">&lt;code&gt;number_format&lt;/code&gt; 필터를 포맷. PHP를 감싸는 래퍼입니다.&lt;a href=&quot;https://secure.php.net/number_format&quot;&gt; number_format&lt;/a&gt; 함수를 .</target>
        </trans-unit>
        <trans-unit id="dfeb5f43cc45c37204ec8585d5e11935374b82af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimizer&lt;/code&gt; extension optimizes the node tree before compilation:</source>
          <target state="translated">그만큼 &lt;code&gt;optimizer&lt;/code&gt; 확장은 컴파일하기 전에 노드 트리를 최적화 :</target>
        </trans-unit>
        <trans-unit id="95416bcddf7dbb8bce6fbbf66b623d07eab4af1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent()&lt;/code&gt; call will return the content of the &lt;code&gt;sidebar&lt;/code&gt; block as defined in the &lt;code&gt;base.html&lt;/code&gt; template.</source>
          <target state="translated">&lt;code&gt;parent()&lt;/code&gt; 호출의 콘텐츠 반환 &lt;code&gt;sidebar&lt;/code&gt; 에 정의 블록으로서 &lt;code&gt;base.html&lt;/code&gt; 의 템플릿입니다.</target>
        </trans-unit>
        <trans-unit id="57ddeedd18626f308f64505bbac8ead769095428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent()&lt;/code&gt; function automatically determines the correct inheritance tree, so it can be used when overriding a block defined in an imported template:</source>
          <target state="translated">그만큼 &lt;code&gt;parent()&lt;/code&gt; 임포트 된 템플릿에 정의 된 블록을 대체 할 때 사용할 수 있도록 기능이 자동으로 정확한 상속 트리를 결정</target>
        </trans-unit>
        <trans-unit id="941dcd9d7e54290385f7acb95f98b200c398b476" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method is invoked whenever the parser encounters a &lt;code&gt;set&lt;/code&gt; tag. It should return a &lt;code&gt;Twig_Node&lt;/code&gt; instance that represents the node (the &lt;code&gt;Project_Set_Node&lt;/code&gt; calls creating is explained in the next section).</source>
          <target state="translated">&lt;code&gt;parse()&lt;/code&gt; 분석기가 발견 될 때마다 호출 방법이 &lt;code&gt;set&lt;/code&gt; 태그. 노드 ( &lt;code&gt;Project_Set_Node&lt;/code&gt; ) 를 나타내는 &lt;code&gt;Twig_Node&lt;/code&gt; 인스턴스를 반환해야합니다. 호출 작성에 대해서는 다음 섹션에서 설명).</target>
        </trans-unit>
        <trans-unit id="d783ecf905422db277fa6b76351416b6b3f3dfab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method is invoked whenever the parser encounters a &lt;code&gt;set&lt;/code&gt; tag. It should return a &lt;code&gt;\Twig\Node\Node&lt;/code&gt; instance that represents the node (the &lt;code&gt;Project_Set_Node&lt;/code&gt; calls creating is explained in the next section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92cd61d4593f13bb123e2f225dcda2c9ffc1ba5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;profiler&lt;/code&gt; extension enables a profiler for Twig templates; it should only be used on your development machines as it adds some overhead:</source>
          <target state="translated">&lt;code&gt;profiler&lt;/code&gt; 확장 나뭇 가지 템플릿에 대한 프로파일을 가능하게; 오버 헤드가 추가되므로 개발 시스템에서만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c724d762472523da2c71275d9198ed9b88f76d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;random&lt;/code&gt; function returns a random value depending on the supplied parameter type:</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; 함수는 제공된 파라미터 타입에 따라 랜덤 값을 반환</target>
        </trans-unit>
        <trans-unit id="a0ff25b1e3325b2af1618c52320802cb0e0caa67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; function works as the native PHP &lt;a href=&quot;https://secure.php.net/range&quot;&gt;range&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 기능은 기본 PHP의로 작동 &lt;a href=&quot;https://secure.php.net/range&quot;&gt;범위&lt;/a&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="3b3020ecc8382592217b30aa4ee4d2cdbf681fb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw&lt;/code&gt; filter marks the value as being &quot;safe&quot;, which means that in an environment with automatic escaping enabled this variable will not be escaped if &lt;code&gt;raw&lt;/code&gt; is the last filter applied to it:</source>
          <target state="translated">&lt;code&gt;raw&lt;/code&gt; 자동 탈출하는 환경에있는 경우,이 변수는 이스케이프되지 활성화되는 것을 의미 &quot;안전한&quot;있다고 필터 마크 값을 &lt;code&gt;raw&lt;/code&gt; 마지막 필터가 적용된다 :</target>
        </trans-unit>
        <trans-unit id="1bb0ad3e6ee4b60e0d7ab9f7ceb54f8ffe8903ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw&lt;/code&gt; filter marks the value as being &amp;ldquo;safe&amp;rdquo;, which means that in an environment with automatic escaping enabled this variable will not be escaped if &lt;code&gt;raw&lt;/code&gt; is the last filter applied to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcd565db52e703f2cbf138be69de9fd7225be35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduce&lt;/code&gt; filter iteratively reduces a sequence or a mapping to a single value using an arrow function, so as to reduce it to a single value. The arrow function receives the return value of the previous iteration and the current value of the sequence or mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e6c43407acf6eb9bda5ccfd91f894567c1c9a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduce&lt;/code&gt; filter takes an &lt;code&gt;initial&lt;/code&gt; value as a second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002e6c25f1fb886ce85399d06f84ed7db62d819a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; method loads the template passed as a first argument and renders it with the variables passed as a second argument.</source>
          <target state="translated">&lt;code&gt;render()&lt;/code&gt; 메소드로드 템플릿은 첫 번째 인수로서 전달 번째 인수로서 전달 된 변수를 렌더링한다.</target>
        </trans-unit>
        <trans-unit id="33b18b18c7e998d2b22f6ae7f3f9b06a88dd4811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace&lt;/code&gt; filter formats a given string by replacing the placeholders (placeholders are free-form):</source>
          <target state="translated">는 &lt;code&gt;replace&lt;/code&gt; (자리는 자유 형식입니다) 자리 표시자를 대체하여 필터 형식에게 주어진 문자열을 :</target>
        </trans-unit>
        <trans-unit id="5c8b33cdb67049edeed7d2e788399637cd72f3e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse&lt;/code&gt; filter reverses a sequence, a mapping, or a string:</source>
          <target state="translated">&lt;code&gt;reverse&lt;/code&gt; 필터는 시퀀스, 매핑, 또는 문자열을 반전 :</target>
        </trans-unit>
        <trans-unit id="ceba2e6341ca087afd7ed560d216b7fb2232d6b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;round&lt;/code&gt; filter rounds a number to a given precision:</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; 필터는 주어진 정밀도 숫자를 반올림합니다 :</target>
        </trans-unit>
        <trans-unit id="30b57d8d2f1a7e8a766c55994dbda6df8b66c4da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;round&lt;/code&gt; filter takes two optional arguments; the first one specifies the precision (default is &lt;code&gt;0&lt;/code&gt;) and the second the rounding method (default is &lt;code&gt;common&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; 필터는 두 개의 선택적 인수를; 첫 번째는 정밀도 (기본값은 &lt;code&gt;0&lt;/code&gt; )를 지정하고 두 번째는 반올림 방법 (기본값은 &lt;code&gt;common&lt;/code&gt; )을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="210e8b05c762c417ea9b258603b5f4f419ff0e50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; extension can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited. The sandbox security is managed by a policy instance. By default, Twig comes with one policy class: &lt;code&gt;Twig_Sandbox_SecurityPolicy&lt;/code&gt;. This class allows you to white-list some tags, filters, properties, and methods:</source>
          <target state="translated">&lt;code&gt;sandbox&lt;/code&gt; 확장은 신뢰할 수없는 코드를 평가하는 데 사용할 수 있습니다. 안전하지 않은 속성 및 방법에 대한 액세스는 금지되어 있습니다. 샌드 박스 보안은 정책 인스턴스에 의해 관리됩니다. 기본적으로 Twig는 &lt;code&gt;Twig_Sandbox_SecurityPolicy&lt;/code&gt; 라는 하나의 정책 클래스와 함께 제공됩니다 . 이 클래스를 사용하면 일부 태그, 필터, 속성 및 메서드를 허용 목록에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e7d5f479148d34fba5e0a4d8aec738a2455903c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; extension can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited. The sandbox security is managed by a policy instance. By default, Twig comes with one policy class: &lt;code&gt;\Twig\Sandbox\SecurityPolicy&lt;/code&gt;. This class allows you to white-list some tags, filters, properties, and methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4920ea5c29b5be966292f879030a9762560d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag can be used to enable the sandboxing mode for an included template, when sandboxing is not enabled globally for the Twig environment:</source>
          <target state="translated">&lt;code&gt;sandbox&lt;/code&gt; 태그는 샌드 박싱이 나뭇 가지 환경에 전역 적으로 활성화되지 않은 포함 된 템플릿의 샌드 박스 모드를 활성화하는 데 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f8e41fba1638a3ae4743e9b43ff272714b0a6287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag can only be used to sandbox an include tag and it cannot be used to sandbox a section of a template. The following example won&amp;rsquo;t work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb517d481dd15e34b020a9ac6ce5715295d2e3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag can only be used to sandbox an include tag and it cannot be used to sandbox a section of a template. The following example won't work:</source>
          <target state="translated">&lt;code&gt;sandbox&lt;/code&gt; 태그는 샌드 박스에 사용되는 태그를 포함하며 샌드 박스에 템플릿의 섹션을 사용할 수 없습니다 수 있습니다. 다음 예제는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="87d56e5c630766ca43c12a09991d8fec6cc7ae96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag is only available when the sandbox extension is enabled (see the &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; chapter).</source>
          <target state="translated">&lt;code&gt;sandbox&lt;/code&gt; 샌드 박스 확장합니다 (볼을 사용하는 경우 태그에만 사용할 수 있습니다 &lt;a href=&quot;../api&quot;&gt;개발자에 대한 나뭇 가지&lt;/a&gt; 장).</target>
        </trans-unit>
        <trans-unit id="03f11a9d9e0a6b0e4727502d09eaafec4b00c3af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; tag can also be used to &amp;lsquo;capture&amp;rsquo; chunks of text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e756734f4349287443f7deba06e83b4c2d7235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; tag can also be used to 'capture' chunks of text:</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 태그는 텍스트의 '캡처'청크로 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="564e12fb8952aa16adba44fd29140d6c57bbddf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; tag is part of the Core extension and as such is always available. The built-in version is slightly more powerful and supports multiple assignments by default (cf. the template designers chapter for more information).</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 태그는 코어 확장의 일부이며 등은 항상 사용할 수 있습니다. 기본 제공 버전은 약간 더 강력하며 기본적으로 여러 할당을 지원합니다 (자세한 내용은 템플릿 디자이너 장 참조).</target>
        </trans-unit>
        <trans-unit id="7cca2ccfbc66932e00029933dfb7ba524b37444d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; tag is part of the Core extension and as such is always available. The built-in version is slightly more powerful and supports multiple assignments by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d038055268623eb1d19ae195f5096858fe1711" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; filter extracts a slice of a sequence, a mapping, or a string:</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 필터는 시퀀스, 매핑, 또는 문자열의 조각을 추출합니다</target>
        </trans-unit>
        <trans-unit id="3a21681f738ead2d68b63c3ffc9b79c83c255cfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; filter works as the &lt;a href=&quot;https://secure.php.net/array_slice&quot;&gt;array_slice&lt;/a&gt; PHP function for arrays and &lt;a href=&quot;https://secure.php.net/mb-substr&quot;&gt;mb_substr&lt;/a&gt; for strings with a fallback to &lt;a href=&quot;https://secure.php.net/substr&quot;&gt;substr&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 필터는로 작동 &lt;a href=&quot;https://secure.php.net/array_slice&quot;&gt;array_slice의&lt;/a&gt; 배열과에 대한 PHP 함수 &lt;a href=&quot;https://secure.php.net/mb-substr&quot;&gt;mb_substr&lt;/a&gt; 에 대체와 문자열 &lt;a href=&quot;https://secure.php.net/substr&quot;&gt;SUBSTR&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b8eb8880699963f4b7f528dff66dfd967f79df38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; filter sorts an array:</source>
          <target state="translated">&lt;code&gt;sort&lt;/code&gt; 필터 배열을 정렬 :</target>
        </trans-unit>
        <trans-unit id="6a6f98b9c71cee8034cf1a2020ff737bee65cc3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; function returns the content of a template without rendering it:</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 함수는 렌더링하지 않고 템플릿의 내용을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="25c42306f4cfeac4b2375f9073a9b4fe7cdc343d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split&lt;/code&gt; filter splits a string by the given delimiter and returns a list of strings:</source>
          <target state="translated">&lt;code&gt;split&lt;/code&gt; 필터는 주어진 구분자로 문자열을 분할하고 문자열의 목록을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="0221d7c22463f0c39fab986796b3b00150bf70bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;striptags&lt;/code&gt; filter strips SGML/XML tags and replace adjacent whitespace by one space:</source>
          <target state="translated">&lt;code&gt;striptags&lt;/code&gt; 의 필터는 SGML / XML 태그를 제거합니다 하나 개의 공간으로 인접한 공백을 대체 :</target>
        </trans-unit>
        <trans-unit id="d629c45ce826a8e656be118f509c51936f367177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template_from_string&lt;/code&gt; function is not available by default. You must add the &lt;code&gt;Twig_Extension_StringLoader&lt;/code&gt; extension explicitly when creating your Twig environment:</source>
          <target state="translated">&lt;code&gt;template_from_string&lt;/code&gt; 의 기능은 기본적으로 사용할 수 없습니다. Twig 환경을 작성할 때 &lt;code&gt;Twig_Extension_StringLoader&lt;/code&gt; 확장을 명시 적으로 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="cfb9a09f2c03418e55004812c69f58ada9f3be92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template_from_string&lt;/code&gt; function is not available by default. You must add the &lt;code&gt;\Twig\Extension\StringLoaderExtension&lt;/code&gt; extension explicitly when creating your Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbb569095312224e89ee037de9e4b2116a3f71f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template_from_string&lt;/code&gt; function loads a template from a string:</source>
          <target state="translated">&lt;code&gt;template_from_string&lt;/code&gt; 의 함수는 문자열에서 템플릿을로드합니다 :</target>
        </trans-unit>
        <trans-unit id="a0744a84f55faf9ae372619ff0fc085498665a50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timezone_name&lt;/code&gt; filter is part of the &lt;code&gt;IntlExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f13d43dd7b31609ce3c8f6bd991c1f7691763ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timezone_name&lt;/code&gt; filter returns the timezone name given a timezone identifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e4be597fd5bd22bd6bfb07c087eda23e318e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;title&lt;/code&gt; filter returns a titlecased version of the value. Words will start with uppercase letters, all remaining characters are lowercase:</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; 필터는 값의 제목 격 버전을 반환합니다. 단어는 대문자로 시작하고 나머지 문자는 모두 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="895eb83c406f96a86bfcbf154a9737c4ac38e383" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim&lt;/code&gt; filter strips whitespace (or other characters) from the beginning and end of a string:</source>
          <target state="translated">&lt;code&gt;trim&lt;/code&gt; 문자열의 시작과 끝에서 필터 스트립 공백 (또는 다른 문자) :</target>
        </trans-unit>
        <trans-unit id="906114cf04f4c639d657a505a8335535e293b788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;truncate&lt;/code&gt; method also accepts a third argument to preserve whole words:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4669f2c1135ef852b1d9ca687a0dc924f73b32f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; filter is part of the &lt;code&gt;StringExtension&lt;/code&gt; which is not installed by default. Install it first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d2cdc76db496a3d00ac7425104a55ec58ca20b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; filter wraps a text in a Unicode object (a &lt;a href=&quot;https://symfony.com/doc/current/components/string.html&quot;&gt;Symfony UnicodeString instance&lt;/a&gt;) that exposes methods to &amp;ldquo;manipulate&amp;rdquo; the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0070319a10a5241532916999018023aef08d7429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upper&lt;/code&gt; filter converts a value to uppercase:</source>
          <target state="translated">&lt;code&gt;upper&lt;/code&gt; 필터를 대문자로 변환 값 :</target>
        </trans-unit>
        <trans-unit id="6413d3c0b9555adf8ef85a36003c89c957f8e091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url_encode&lt;/code&gt; filter percent encodes a given string as URL segment or an array as query string:</source>
          <target state="translated">&lt;code&gt;url_encode&lt;/code&gt; 의 필터 %는 URL 세그먼트 또는 쿼리 문자열 배열로 주어진 문자열을 인코딩 :</target>
        </trans-unit>
        <trans-unit id="1bfab91fdd5bcd3f8979bf9e97fb3e0461e03796" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; statement tells Twig to import the blocks defined in &lt;code&gt;blocks.html&lt;/code&gt; into the current template (it&amp;rsquo;s like macros, but for blocks):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7936890c536201493543868801518da19d18fac6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; statement tells Twig to import the blocks defined in &lt;code&gt;blocks.html&lt;/code&gt; into the current template (it's like macros, but for blocks):</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 문에 정의 된 블록을 가져 나뭇 가지를 알려줍니다 &lt;code&gt;blocks.html&lt;/code&gt; 현재 템플릿 (가 블록 매크로처럼,하지만)로를 :</target>
        </trans-unit>
        <trans-unit id="eaadc7bc4aabf29fa095c1fd0b1b415a5c0ab9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; tag only imports a template if it does not extend another template, if it does not define macros, and if the body is empty. But it can &lt;em&gt;use&lt;/em&gt; other templates.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 이 매크로를 정의하지 않는 경우는, 다른 템플릿을 연장하지 않는 경우 태그는 템플릿을 가져, 몸이 비어있는 경우. 그러나 다른 템플릿을 &lt;em&gt;사용할&lt;/em&gt; 수 &lt;em&gt;있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b6d3bfe65fc1f76559b5c728ee42ff72e5b6d25b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbatim&lt;/code&gt; tag marks sections as being raw text that should not be parsed. For example to put Twig syntax as example into a template you can use this snippet:</source>
          <target state="translated">&lt;code&gt;verbatim&lt;/code&gt; 해석되어서는 안되는 원시 텍스트로 태그 마크 섹션. 예를 들어 Twig 구문을 예제로 템플릿에 넣으려면이 스 니펫을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3715b8091ee0166bf63e86dfa81bdf94b5fe55cd" translate="yes" xml:space="preserve">
          <source>The Compiler</source>
          <target state="translated">컴파일러</target>
        </trans-unit>
        <trans-unit id="58223a5b31b2b0984995c927c2253b2fb623cc7e" translate="yes" xml:space="preserve">
          <source>The Core, Escaper, and Optimizer extensions are registered by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2653f51b9af961513d55ee8d6255738294c4bc9" translate="yes" xml:space="preserve">
          <source>The Lexer</source>
          <target state="translated">렉서</target>
        </trans-unit>
        <trans-unit id="01b5106be745c239227fc77fa5ae7d35debe59ca" translate="yes" xml:space="preserve">
          <source>The Parser</source>
          <target state="translated">파서</target>
        </trans-unit>
        <trans-unit id="4aa531182510623b9eca298e680cd9095de3f1c4" translate="yes" xml:space="preserve">
          <source>The Twig built-in &lt;code&gt;..&lt;/code&gt; operator is just syntactic sugar for the &lt;code&gt;range&lt;/code&gt; function (with a step of &lt;code&gt;1&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; if the start is greater than the end):</source>
          <target state="translated">Twig 내장 &lt;code&gt;..&lt;/code&gt; 연산자는 &lt;code&gt;range&lt;/code&gt; 함수의 구문 설탕입니다 ( &lt;code&gt;1&lt;/code&gt; 단계 또는 시작이 끝보다 큰 경우 &lt;code&gt;-1&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ee2bef423b1321304ef8bc4277dfe49ba3918560" translate="yes" xml:space="preserve">
          <source>The Twig core extensions are great examples of how extensions work.</source>
          <target state="translated">Twig 핵심 확장은 확장이 작동하는 방법의 좋은 예입니다.</target>
        </trans-unit>
        <trans-unit id="f8d7560db836c961304fd1fc1b510de4c324573f" translate="yes" xml:space="preserve">
          <source>The Twig logo is &amp;copy; 2010&amp;ndash;2018 Symfony</source>
          <target state="translated">나뭇 가지 로고는 &amp;copy; 2010&amp;ndash;2018 Symfony</target>
        </trans-unit>
        <trans-unit id="35abc1742727ff51ffbb8e30b7160596f18fdd52" translate="yes" xml:space="preserve">
          <source>The Twig logo is &amp;copy; 2010&amp;ndash;2020 Symfony</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6910e410325efbaa3a6f01140b886fac5d854aa4" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;import&lt;/code&gt; call imports the &quot;forms.html&quot; file (which can contain only macros, or a template and some macros), and import the functions as items of the &lt;code&gt;forms&lt;/code&gt; variable.</source>
          <target state="translated">위의 &lt;code&gt;import&lt;/code&gt; 호출은 &quot;forms.html&quot;파일 (매크로 또는 템플리트 및 일부 매크로 만 포함 할 수 있음)을 가져오고 함수를 &lt;code&gt;forms&lt;/code&gt; 변수의 항목으로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="3e0bddf384569b4317b5bbcd39554c4a0e2c3870" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;import&lt;/code&gt; call imports the &lt;code&gt;forms.html&lt;/code&gt; file (which can contain only macros, or a template and some macros), and import the macros as items of the &lt;code&gt;forms&lt;/code&gt; local variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a7364c525627057337b80e1098dc4d0e6644e2" translate="yes" xml:space="preserve">
          <source>The above example shows how you can create tests that use a node class. The node class has access to one sub-node called 'node'. This sub-node contains the value that is being tested. When the &lt;code&gt;odd&lt;/code&gt; filter is used in code such as:</source>
          <target state="translated">위의 예는 노드 클래스를 사용하는 테스트를 작성하는 방법을 보여줍니다. 노드 클래스는 'node'라는 하나의 하위 노드에 액세스 할 수 있습니다. 이 하위 노드에는 테스트중인 값이 포함되어 있습니다. 때 &lt;code&gt;odd&lt;/code&gt; 필터 코드에 사용되는 등 :</target>
        </trans-unit>
        <trans-unit id="25f3a4bcaf8b3b99bc3d225fac9accada1525259" translate="yes" xml:space="preserve">
          <source>The above example shows how you can create tests that use a node class. The node class has access to one sub-node called &lt;code&gt;node&lt;/code&gt;. This sub-node contains the value that is being tested. When the &lt;code&gt;odd&lt;/code&gt; filter is used in code such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c378881b0e512398e8db2c4814815ef008a9ffc9" translate="yes" xml:space="preserve">
          <source>The above example will be rendered as:</source>
          <target state="translated">위의 예는 다음과 같이 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="bc1f748312fb14ba7531d73812530d6f72dd4170" translate="yes" xml:space="preserve">
          <source>The above sample shows the default whitespace control modifier, and how you can use it to remove whitespace around tags. Trimming space will consume all whitespace for that side of the tag. It is possible to use whitespace trimming on one side of a tag:</source>
          <target state="translated">위의 샘플은 기본 공백 제어 수정 자와이를 사용하여 태그 주위의 공백을 제거하는 방법을 보여줍니다. 트리밍 공간은 태그의 해당 측면에 대한 모든 공백을 소비합니다. 태그의 한쪽에 공백 트리밍을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8c35b5b10b134bd0cd94e3750670f5c9ee5b97c" translate="yes" xml:space="preserve">
          <source>The above snippet of code would print all numbers from 0 to 10.</source>
          <target state="translated">위의 코드 조각은 0에서 10까지의 모든 숫자를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="08428d17cf82e612a5c47958cda8b6ca3d575aaa" translate="yes" xml:space="preserve">
          <source>The advantage is that the special loop variable will count correctly thus not counting the users not iterated over. Keep in mind that properties like &lt;code&gt;loop.last&lt;/code&gt; will not be defined when using loop conditions.</source>
          <target state="translated">장점은 특수 루프 변수가 올바르게 계산되므로 반복되지 않은 사용자를 계산하지 않는다는 것입니다. 루프 조건을 사용할 때는 &lt;code&gt;loop.last&lt;/code&gt; 와 같은 속성 이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c4d982256c3cdae4fe94cfe18ac1e970c60e736d" translate="yes" xml:space="preserve">
          <source>The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it.</source>
          <target state="translated">응용 프로그램은 템플릿 조작을 위해 템플릿에 변수를 전달합니다. 변수에는 액세스 할 수있는 속성이나 요소가있을 수 있습니다. 변수의 시각적 표현은 변수를 제공하는 응용 프로그램에 따라 크게 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d54bfffb112e10817fd1518e43290261ac533d03" translate="yes" xml:space="preserve">
          <source>The argument must be in one of PHP&amp;rsquo;s supported &lt;a href=&quot;https://secure.php.net/manual/en/datetime.formats.php&quot;&gt;date and time formats&lt;/a&gt;.</source>
          <target state="translated">인수는 PHP가 지원하는 &lt;a href=&quot;https://secure.php.net/manual/en/datetime.formats.php&quot;&gt;날짜 및 시간 형식&lt;/a&gt; 중 하나 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="a1caf45b85089c639905dd78cd0e8fbbe9f115fa" translate="yes" xml:space="preserve">
          <source>The array can contain any number of values:</source>
          <target state="translated">배열은 여러 값을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bde1ee32e57d32f6cc92eab3d56e83da0a82659" translate="yes" xml:space="preserve">
          <source>The arrow function also receives the key as a second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e31028b618ce860f4d94456a400bde813ddd5ea" translate="yes" xml:space="preserve">
          <source>The assigned value can be any valid &lt;a href=&quot;../templates#twig-expressions&quot;&gt;Twig expression&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93dff14b467666990c56a9cb4fab5610c8a7a8b" translate="yes" xml:space="preserve">
          <source>The assigned value can be any valid &lt;a href=&quot;../templates#twig-expressions&quot;&gt;Twig expressions&lt;/a&gt;:</source>
          <target state="translated">지정된 값은 유효한 &lt;a href=&quot;../templates#twig-expressions&quot;&gt;Twig 표현식 일&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="946773ce8aab10de068321e15269b1bddacf9779" translate="yes" xml:space="preserve">
          <source>The automatic escaping strategy can be configured via the &lt;a href=&quot;api#environment-options&quot;&gt;autoescape&lt;/a&gt; option and defaults to &lt;code&gt;html&lt;/code&gt;.</source>
          <target state="translated">자동 이스케이프 전략은 &lt;a href=&quot;api#environment-options&quot;&gt;autoescape&lt;/a&gt; 옵션을 통해 구성 할 수 있으며 기본값은 &lt;code&gt;html&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="33d8627a43ed2cce4d479c40339634c89efe8989" translate="yes" xml:space="preserve">
          <source>The base template class to use for generated templates.</source>
          <target state="translated">생성 된 템플릿에 사용할 기본 템플릿 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="4f847d2c722947336e4d6a55582603d95e1e31ac" translate="yes" xml:space="preserve">
          <source>The chapter &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; gives more information about when and how automatic escaping is applied.</source>
          <target state="translated">&lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; 장에서는 자동 이스케이프 적용시기 및 방법에 대한 자세한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="94f896c527ca0da05bda1f21cf43aa560cd6af04" translate="yes" xml:space="preserve">
          <source>The charset used by the templates.</source>
          <target state="translated">템플릿에서 사용하는 문자 집합입니다.</target>
        </trans-unit>
        <trans-unit id="e0683062f4f3db674163014c49b61054695302ba" translate="yes" xml:space="preserve">
          <source>The compiler implements a fluid interface and provides methods that helps the developer generate beautiful and readable PHP code:</source>
          <target state="translated">컴파일러는 유동적 인 인터페이스를 구현하고 개발자가 아름답고 읽을 수있는 PHP 코드를 생성하는 데 도움이되는 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e485849b9935dbc80376c4fd4020360cdd89d525" translate="yes" xml:space="preserve">
          <source>The context is passed by default to the template but you can also pass additional variables:</source>
          <target state="translated">컨텍스트는 기본적으로 템플릿에 전달되지만 추가 변수를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8401445a147ae259c702f51dcb47455d24f6ea8" translate="yes" xml:space="preserve">
          <source>The core, escaper, and optimizer extensions do not need to be added to the Twig environment, as they are registered by default.</source>
          <target state="translated">코어, 이스케이프 및 옵티 마이저 확장은 기본적으로 등록되어 있으므로 Twig 환경에 추가 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="translated">루프의 현재 반복 (0 인덱스)</target>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="translated">루프의 현재 반복 (1 색인)</target>
        </trans-unit>
        <trans-unit id="ae7b5e2210fb962eaed4c6b2c3ce02ff6483fe06" translate="yes" xml:space="preserve">
          <source>The default compiler (&lt;code&gt;Twig_Compiler&lt;/code&gt;) can be changed by calling the &lt;code&gt;setCompiler()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;setCompiler()&lt;/code&gt; 메소드를 호출하여 기본 컴파일러 ( &lt;code&gt;Twig_Compiler&lt;/code&gt; )를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="689c1556dc99fb7461256f03acca37fe431130e8" translate="yes" xml:space="preserve">
          <source>The default compiler (&lt;code&gt;\Twig\Compiler&lt;/code&gt;) can be changed by calling the &lt;code&gt;setCompiler()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1337a952abcbae566b8e83ec6f422c97918f1993" translate="yes" xml:space="preserve">
          <source>The default lexer (&lt;code&gt;Twig_Lexer&lt;/code&gt;) can be changed by calling the &lt;code&gt;setLexer()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;setLexer()&lt;/code&gt; 메소드를 호출하여 기본 어휘 분석기 ( &lt;code&gt;Twig_Lexer&lt;/code&gt; )를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="09cbcd6938e6f18c58264dbd5be94a02c4ed8dfb" translate="yes" xml:space="preserve">
          <source>The default lexer (&lt;code&gt;\Twig\Lexer&lt;/code&gt;) can be changed by calling the &lt;code&gt;setLexer()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc40acbce05be030b05bcf8f913176956352470" translate="yes" xml:space="preserve">
          <source>The default parser (&lt;code&gt;Twig_TokenParser&lt;/code&gt;) can be changed by calling the &lt;code&gt;setParser()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;setParser()&lt;/code&gt; 메소드를 호출하여 기본 구문 분석기 ( &lt;code&gt;Twig_TokenParser&lt;/code&gt; )를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d26c7a2c9fe83a738a7b9abad78112e6c8260b4e" translate="yes" xml:space="preserve">
          <source>The default parser (&lt;code&gt;\Twig\TokenParser\AbstractTokenParser&lt;/code&gt;) can be changed by calling the &lt;code&gt;setParser()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e4faa4acd0a6c2b7bacdf0bf279a1b394101f0" translate="yes" xml:space="preserve">
          <source>The default timezone can also be set globally by calling &lt;code&gt;setTimezone()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;setTimezone()&lt;/code&gt; 을 호출하여 기본 시간대를 전역 적으로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="626342b14315e9f248083458c04ae2b58c149b44" translate="yes" xml:space="preserve">
          <source>The defaults set for &lt;code&gt;number_format&lt;/code&gt; can be over-ridden upon each call using the additional parameters.</source>
          <target state="translated">&lt;code&gt;number_format&lt;/code&gt; 에 설정된 기본값 은 추가 매개 변수를 사용하여 각 호출마다 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efeb65cba867482b5ada38208846cd82dca68aeb" translate="yes" xml:space="preserve">
          <source>The documentation page for the &lt;a href=&quot;tags/extends&quot;&gt;extends&lt;/a&gt; tag describes more advanced features like block nesting, scope, dynamic inheritance, and conditional inheritance.</source>
          <target state="translated">&lt;a href=&quot;tags/extends&quot;&gt;extends&lt;/a&gt; 태그 의 설명서 페이지 에는 블록 중첩, 범위, 동적 상속 및 조건부 상속과 같은 고급 기능이 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7333baa1058271fcbaa17d5ac64f7ac1678e428" translate="yes" xml:space="preserve">
          <source>The easiest and most flexible is importing the whole module into a variable. That way you can access the attributes:</source>
          <target state="translated">가장 쉽고 유연한 방법은 전체 모듈을 변수로 가져 오는 것입니다. 이렇게하면 속성에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b788ceae4ae9f783bbeb47a7d912da0d56e084b" translate="yes" xml:space="preserve">
          <source>The easiest way is to output the variable delimiter (&lt;code&gt;{{&lt;/code&gt;) by using a variable expression:</source>
          <target state="translated">가장 쉬운 방법은 변수 표현식을 사용하여 변수 구분 기호 ( &lt;code&gt;{{&lt;/code&gt; ) 를 출력하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="1a3663987e5f711fc8bba0f3d61ad82ecaffcea1" translate="yes" xml:space="preserve">
          <source>The escaping rules are implemented as follows:</source>
          <target state="translated">탈출 규칙은 다음과 같이 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="7a56689b9c35ebbbcc2772b31e4a4dcb595bdcdd" translate="yes" xml:space="preserve">
          <source>The filesystem loader also supports namespaced templates. This allows to group your templates under different namespaces which have their own template paths.</source>
          <target state="translated">파일 시스템 로더는 네임 스페이스 템플릿도 지원합니다. 따라서 고유 한 템플릿 경로가있는 다른 네임 스페이스 아래에서 템플릿을 그룹화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f06a14947add56204b6cfc9f988a2c71b50df09" translate="yes" xml:space="preserve">
          <source>The filter does not perform any length validation on purpose (limits depends on the usage context), validation should be done before calling this filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882c80cd2258f6b71d153af8aff99c1acfc710d5" translate="yes" xml:space="preserve">
          <source>The filter receives all dynamic part values before the normal filter arguments, but after the environment and the context. For instance, a call to &lt;code&gt;'foo'|a_path_b()&lt;/code&gt; will result in the following arguments to be passed to the filter: &lt;code&gt;('a', 'b', 'foo')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f6a40483ad9ac1f341a0971ee09d160adc287b" translate="yes" xml:space="preserve">
          <source>The filter will receive all dynamic part values before the normal filter arguments, but after the environment and the context. For instance, a call to &lt;code&gt;'foo'|a_path_b()&lt;/code&gt; will result in the following arguments to be passed to the filter: &lt;code&gt;('a', 'b', 'foo')&lt;/code&gt;.</source>
          <target state="translated">필터는 일반 필터 인수 이전, 그러나 환경 및 컨텍스트 이후에 모든 동적 부품 값을받습니다. 예를 들어, &lt;code&gt;'foo'|a_path_b()&lt;/code&gt; 호출하면 &lt;code&gt;('a', 'b', 'foo')&lt;/code&gt; 와 같은 인수가 필터에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="b0f6b794ddb26e904320ee5020edce6046e5531e" translate="yes" xml:space="preserve">
          <source>The first argument passed to the &lt;code&gt;Twig_Filter&lt;/code&gt; constructor is the name of the filter you will use in templates and the second one is the PHP callable to associate with it.</source>
          <target state="translated">&lt;code&gt;Twig_Filter&lt;/code&gt; 생성자에 전달 된 첫 번째 인수 는 템플릿에 사용할 필터의 이름이고 두 번째 인수는 이와 관련하여 호출 할 PHP입니다.</target>
        </trans-unit>
        <trans-unit id="55ab714f2583c920feefe578165e1972b5dce7a6" translate="yes" xml:space="preserve">
          <source>The first argument passed to the &lt;code&gt;\Twig\TwigFilter&lt;/code&gt; constructor is the name of the filter you will use in templates and the second one is the PHP callable to associate with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d012f3dec8f179cf80cda3fe4fa06259e86d53" translate="yes" xml:space="preserve">
          <source>The first newline after a template tag is removed automatically (like in PHP). Whitespace is not further modified by the template engine, so each whitespace (spaces, tabs, newlines etc.) is returned unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b14df30f46d92e75dbaa41948d383844c76801" translate="yes" xml:space="preserve">
          <source>The first newline after a template tag is removed automatically (like in PHP.) Whitespace is not further modified by the template engine, so each whitespace (spaces, tabs, newlines etc.) is returned unchanged.</source>
          <target state="translated">템플릿 태그 후 첫 번째 줄 바꿈이 자동으로 제거됩니다 (PHP 에서처럼). 공백은 템플릿 엔진에 의해 더 이상 수정되지 않으므로 각 공백 (공백, 탭, 줄 바꿈 등)은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a5ac5bb1e5d2d56c45815ca12d1c104b632182f" translate="yes" xml:space="preserve">
          <source>The first section of this chapter describes how to extend Twig easily. If you want to reuse your changes in different projects or if you want to share them with others, you should then create an extension as described in the following section.</source>
          <target state="translated">이 장의 첫 번째 섹션에서는 나뭇 가지를 쉽게 확장하는 방법을 설명합니다. 다른 프로젝트에서 변경 사항을 재사용하거나 다른 프로젝트와 변경 사항을 공유하려면 다음 섹션에 설명 된대로 확장을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="c670eb21f6aa2ef36d65d794362b31ad1a67d644" translate="yes" xml:space="preserve">
          <source>The first section of this chapter describes how to extend Twig. If you want to reuse your changes in different projects or if you want to share them with others, you should then create an extension as described in the following section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea95c296545f1347ce8eabac7b9c002b497ff4dd" translate="yes" xml:space="preserve">
          <source>The first solution may indeed work for this simplified example. But imagine we add a sidebar, which may again contain different, recurring structures of content. Now we would need to create intermediate base templates for all occurring combinations of content structure and sidebar structure&amp;hellip; and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16567a2a5f2f0181293e258acdb167ab9f0567c1" translate="yes" xml:space="preserve">
          <source>The first solution may indeed work for this simplified example. But imagine we add a sidebar, which may again contain different, recurring structures of content. Now we would need to create intermediate base templates for all occurring combinations of content structure and sidebar structure... and so on.</source>
          <target state="translated">첫 번째 솔루션은이 단순화 된 예에서 실제로 효과가있을 수 있습니다. 그러나 사이드 바를 추가한다고 가정 해보십시오. 사이드 바에는 다시 반복되는 다른 컨텐츠 구조가 포함될 수 있습니다. 이제 콘텐츠 구조와 사이드 바 구조 등의 모든 조합에 대한 중간 기본 템플릿을 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="8d08a5f0510c148121acba15829a11ed98a53e38" translate="yes" xml:space="preserve">
          <source>The first ternary statement is not escaped: &lt;code&gt;hello&lt;/code&gt; is marked as being safe and Twig does not escape static values (see &lt;a href=&quot;../tags/autoescape&quot;&gt;escape&lt;/a&gt;). In the second ternary statement, even if &lt;code&gt;hello&lt;/code&gt; is marked as safe, &lt;code&gt;hola&lt;/code&gt; remains unsafe and so is the whole expression. The third ternary statement is marked as safe and the result is not escaped.</source>
          <target state="translated">첫 번째 원 문은 탈출하지 않습니다 : &lt;code&gt;hello&lt;/code&gt; 안전한 것으로 표시되어 있고 나뭇 가지가 (참조 정적 값을 탈출하지 않습니다 &lt;a href=&quot;../tags/autoescape&quot;&gt;탈출&lt;/a&gt; ). 두 번째 삼항 진술에서, &lt;code&gt;hello&lt;/code&gt; 가 안전하다고 표시 되더라도 , &lt;code&gt;hola&lt;/code&gt; 는 안전하지 않은 상태로 유지되며 전체 표현도 마찬가지입니다. 세 번째 삼진 진술은 안전하다고 표시되어 결과가 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a92d6691ff4d57bf9000b437e140c0936a7eac0" translate="yes" xml:space="preserve">
          <source>The following comparison operators are supported in any expression: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;lt;=&lt;/code&gt;.</source>
          <target state="translated">다음 비교 연산자는 표현식에서 지원됩니다 : &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; 및 &lt;code&gt;&amp;lt;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8e4157f683171782d1eda1124f6096441356e08" translate="yes" xml:space="preserve">
          <source>The following example removes all HTML tags from the &lt;code&gt;name&lt;/code&gt; and title-cases it:</source>
          <target state="translated">다음 예제는 &lt;code&gt;name&lt;/code&gt; 에서 모든 HTML 태그를 제거 하고 제목에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="1c064e461177e8eca79776322b93823eea330a4b" translate="yes" xml:space="preserve">
          <source>The following filters are matched by the above defined dynamic filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16b7008a9692110f1fa6e35b3176621a1908aed" translate="yes" xml:space="preserve">
          <source>The following filters will be matched by the above defined dynamic filter:</source>
          <target state="translated">다음 필터는 위에서 정의한 동적 필터와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="910183fb1cddf1e3d2367c47dd8c613aa9cc0534" translate="yes" xml:space="preserve">
          <source>The following operators don&amp;rsquo;t fit into any of the other categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac279778ea8ebc8ca1a2612798290960dbc2872a" translate="yes" xml:space="preserve">
          <source>The following operators don't fit into any of the other categories:</source>
          <target state="translated">다음 연산자는 다른 범주에 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">다음과 같은 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6571118dc0ea8666d12be6ef5c03078a6db3b49" translate="yes" xml:space="preserve">
          <source>The following variables are always available in templates:</source>
          <target state="translated">템플릿에서 다음 변수를 항상 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="773ec5e3fd78e37009d77619523442f212da7c0f" translate="yes" xml:space="preserve">
          <source>The format specifier is the same as supported by &lt;a href=&quot;https://secure.php.net/date&quot;&gt;date&lt;/a&gt;, except when the filtered data is of type &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval&lt;/a&gt;, when the format must conform to &lt;a href=&quot;https://secure.php.net/DateInterval.format&quot;&gt;DateInterval::format&lt;/a&gt; instead.</source>
          <target state="translated">형식 지정자는 형식이 &lt;a href=&quot;https://secure.php.net/DateInterval.format&quot;&gt;DateInterval :: format을&lt;/a&gt; 대신 준수해야하는 경우 필터링 된 데이터가 &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval&lt;/a&gt; 유형 인 경우를 제외하고 는 &lt;a href=&quot;https://secure.php.net/date&quot;&gt;date&lt;/a&gt; 에서 지원되는 것과 동일 합니다 .</target>
        </trans-unit>
        <trans-unit id="28cfa2cf2683aecfcabe0faf80363cea4f3e45d2" translate="yes" xml:space="preserve">
          <source>The function uses the same template loaders as the ones used to include templates. So, if you are using the filesystem loader, the templates are looked for in the paths defined by it.</source>
          <target state="translated">이 함수는 템플릿을 포함하는 데 사용 된 것과 동일한 템플릿 로더를 사용합니다. 따라서 파일 시스템 로더를 사용하는 경우 템플리트가 정의한 경로에서 템플리트를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="76f07d6136fe6a0251e0cf40140475c3c70f3874" translate="yes" xml:space="preserve">
          <source>The generated template for a &lt;code&gt;Hello {{ name }}&lt;/code&gt; template reads as follows (the actual output can differ depending on the version of Twig you are using):</source>
          <target state="translated">&lt;code&gt;Hello {{ name }}&lt;/code&gt; 템플리트에 대해 생성 된 템플리트는 다음과 같습니다 (실제 출력은 사용중인 Twig 버전에 따라 다를 수 있음).</target>
        </trans-unit>
        <trans-unit id="68b9b9687e6fadedb57a8e704d9aea7510573ccc" translate="yes" xml:space="preserve">
          <source>The goal of the &lt;code&gt;vertical_boxes_skeleton.twig&lt;/code&gt; template being to factor out the HTML markup for the boxes.</source>
          <target state="translated">&lt;code&gt;vertical_boxes_skeleton.twig&lt;/code&gt; 템플릿 의 목표 는 상자의 HTML 마크 업을 제거하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d3ec7fa62db972a7d113d6329bf7c14361ed082a" translate="yes" xml:space="preserve">
          <source>The included template &lt;code&gt;render_box.html&lt;/code&gt; is able to access the &lt;code&gt;box&lt;/code&gt; variable.</source>
          <target state="translated">포함 된 템플릿 &lt;code&gt;render_box.html&lt;/code&gt; 은 &lt;code&gt;box&lt;/code&gt; 변수 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5c244412946bdca0cfb1d2e30f2901b9e323e306" translate="yes" xml:space="preserve">
          <source>The key-features are&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2142ed5c914046b44b4e6ee51dee1a0740846ff" translate="yes" xml:space="preserve">
          <source>The key-features are...</source>
          <target state="translated">주요 특징은 ...</target>
        </trans-unit>
        <trans-unit id="4350e31bd1bcfca74d1195d7be9ce832e884de3d" translate="yes" xml:space="preserve">
          <source>The last step is done by the compiler. It takes a node tree as an input and generates PHP code usable for runtime execution of the template.</source>
          <target state="translated">마지막 단계는 컴파일러에 의해 수행됩니다. 노드 트리를 입력으로 사용하여 템플릿의 런타임 실행에 사용할 수있는 PHP 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7e4c8f6e9c1c90fbd784bf935a1323945a0e100c" translate="yes" xml:space="preserve">
          <source>The lexer tokenizes a template source code into a token stream (each token is an instance of &lt;code&gt;Twig_Token&lt;/code&gt;, and the stream is an instance of &lt;code&gt;Twig_TokenStream&lt;/code&gt;). The default lexer recognizes 13 different token types:</source>
          <target state="translated">어휘 분석기는 템플릿 소스 코드를 토큰 스트림으로 토큰 화합니다 (각 토큰은 &lt;code&gt;Twig_Token&lt;/code&gt; 의 인스턴스이고 스트림은 &lt;code&gt;Twig_TokenStream&lt;/code&gt; 의 인스턴스입니다 ). 기본 어휘 분석기는 13 가지 다른 토큰 유형을 인식합니다.</target>
        </trans-unit>
        <trans-unit id="e14bb239ccf17b9941a6d77b21039a8adad0ec11" translate="yes" xml:space="preserve">
          <source>The lexer tokenizes a template source code into a token stream (each token is an instance of &lt;code&gt;\Twig\Token&lt;/code&gt;, and the stream is an instance of &lt;code&gt;\Twig\TokenStream&lt;/code&gt;). The default lexer recognizes 13 different token types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3e180db5b00bf0db7d4df946d2528020bba4b8" translate="yes" xml:space="preserve">
          <source>The list of supported options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812ab14218b47381617a949ea1d724c7aeb946cd" translate="yes" xml:space="preserve">
          <source>The list of supported styles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b363acbbfa4e5d24f22616535518c19270ac8fd" translate="yes" xml:space="preserve">
          <source>The macro can then be called at will:</source>
          <target state="translated">그런 다음 매크로를 마음대로 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e85a06baf3f8044443aa5da13ddd1233e4ea86b" translate="yes" xml:space="preserve">
          <source>The macros can then be called at will in the &lt;em&gt;current&lt;/em&gt; template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861680efe60d8f9fff591116da01bc4f2e1f81a8" translate="yes" xml:space="preserve">
          <source>The main motivation for writing an extension is to move often used code into a reusable class like adding support for internationalization. An extension can define tags, filters, tests, operators, functions, and node visitors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c808dab61aa2c1413b6a9789b8f73fdb1f7113" translate="yes" xml:space="preserve">
          <source>The main motivation for writing an extension is to move often used code into a reusable class like adding support for internationalization. An extension can define tags, filters, tests, operators, global variables, functions, and node visitors.</source>
          <target state="translated">확장을 작성하는 주된 동기는 자주 사용되는 코드를 국제화 지원 추가와 같은 재사용 가능한 클래스로 옮기는 것입니다. 확장은 태그, 필터, 테스트, 연산자, 전역 변수, 함수 및 노드 방문자를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b20ae2ab298f893eea70b6e719d27ca7c00f701" translate="yes" xml:space="preserve">
          <source>The main template can also override any imported block. If the template already defines the &lt;code&gt;sidebar&lt;/code&gt; block, then the one defined in &lt;code&gt;blocks.html&lt;/code&gt; is ignored. To avoid name conflicts, you can rename imported blocks:</source>
          <target state="translated">기본 템플릿은 가져온 블록을 무시할 수도 있습니다. 템플릿이 &lt;code&gt;sidebar&lt;/code&gt; 블록을 이미 정의한 경우 &lt;code&gt;blocks.html&lt;/code&gt; 에 정의 된 것이 무시됩니다. 이름 충돌을 피하기 위해 가져온 블록의 이름을 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b476dab8449b4a8b72baaeb17e864ecc245459dd" translate="yes" xml:space="preserve">
          <source>The modifiers can be used on either side of the tags like in &lt;code&gt;{%-&lt;/code&gt; or &lt;code&gt;-%}&lt;/code&gt; and they consume all whitespace for that side of the tag. It is possible to use the modifiers on one side of a tag or on both sides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57df31c6d47c78e99c3d0e5645e2ae4906c69b8f" translate="yes" xml:space="preserve">
          <source>The most powerful part of Twig is template inheritance. Template inheritance allows you to build a base &quot;skeleton&quot; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="translated">Twig의 가장 강력한 부분은 템플릿 상속입니다. 템플릿 상속을 사용하면 사이트의 모든 공통 요소를 포함 하고 하위 템플릿이 무시할 수있는 &lt;strong&gt;블록&lt;/strong&gt; 을 정의하는 기본 &quot;골격&quot;템플릿을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="315b0ebb7fa2b6d22e0490661c70f4f5738422a2" translate="yes" xml:space="preserve">
          <source>The most powerful part of Twig is template inheritance. Template inheritance allows you to build a base &amp;ldquo;skeleton&amp;rdquo; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ae71e03e841e47ac1f9239e08fed4f8f7f1033" translate="yes" xml:space="preserve">
          <source>The name of the template depends on the template loader. For instance, the &lt;code&gt;Twig_Loader_Filesystem&lt;/code&gt; allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</source>
          <target state="translated">템플릿 이름은 템플릿 로더에 따라 다릅니다. 예를 들어 &lt;code&gt;Twig_Loader_Filesystem&lt;/code&gt; 을 사용하면 파일 이름을 지정하여 다른 템플릿에 액세스 할 수 있습니다. 슬래시를 사용하여 서브 디렉토리의 템플리트에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de0842dcd3de8ad25232ac69f83a54176fb9c8c3" translate="yes" xml:space="preserve">
          <source>The name of the template depends on the template loader. For instance, the &lt;code&gt;\Twig\Loader\FilesystemLoader&lt;/code&gt; allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addc305d15e7077a30488beca9ad7fe5dd8d2645" translate="yes" xml:space="preserve">
          <source>The number of items in the sequence</source>
          <target state="translated">시퀀스의 항목 수</target>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="translated">루프 끝부터 반복 횟수 (0 인덱스)</target>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="translated">루프 끝에서 반복 횟수 (1 인덱스)</target>
        </trans-unit>
        <trans-unit id="d7c03fe0b71fb7bfec02b7b8fdfe10a7c98a5c92" translate="yes" xml:space="preserve">
          <source>The operator precedence is as follows, with the lowest-precedence operators listed first: &lt;code&gt;?:&lt;/code&gt; (ternary operator), &lt;code&gt;b-and&lt;/code&gt;, &lt;code&gt;b-xor&lt;/code&gt;, &lt;code&gt;b-or&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;matches&lt;/code&gt;, &lt;code&gt;starts with&lt;/code&gt;, &lt;code&gt;ends with&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt; (tests), &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;??&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt; (filters), &lt;code&gt;[]&lt;/code&gt;, and &lt;code&gt;.&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bc6ac3ffefb69fa5a9d53de83bd329eaec89f9" translate="yes" xml:space="preserve">
          <source>The operator precedence is as follows, with the lowest-precedence operators listed first: &lt;code&gt;b-and&lt;/code&gt;, &lt;code&gt;b-xor&lt;/code&gt;, &lt;code&gt;b-or&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;matches&lt;/code&gt;, &lt;code&gt;starts with&lt;/code&gt;, &lt;code&gt;ends with&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, and &lt;code&gt;.&lt;/code&gt;:</source>
          <target state="translated">운영자 우선 순위가 같은 낮은 우선 순위를 연산자 다음된다 &lt;code&gt;b-and&lt;/code&gt; , &lt;code&gt;b-xor&lt;/code&gt; , &lt;code&gt;b-or&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;in&lt;/code&gt; , &lt;code&gt;matches&lt;/code&gt; , &lt;code&gt;starts with&lt;/code&gt; , &lt;code&gt;ends with&lt;/code&gt; , &lt;code&gt;..&lt;/code&gt; . , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;~&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;//&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;is&lt;/code&gt; , &lt;code&gt;**&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; , &lt;code&gt;[]&lt;/code&gt; 및 &lt;code&gt;.&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4e5f774c81db74dce3749cbfa6c413108a7708fb" translate="yes" xml:space="preserve">
          <source>The output will be similar to:</source>
          <target state="translated">출력은 다음과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="673abb75de556e0885cff50b28e5a9cae662ebae" translate="yes" xml:space="preserve">
          <source>The parent context</source>
          <target state="translated">부모 컨텍스트</target>
        </trans-unit>
        <trans-unit id="612ced3f56e7cfeac2917746ea7fba6d6eab800d" translate="yes" xml:space="preserve">
          <source>The parser converts the token stream into an AST (Abstract Syntax Tree), or a node tree (an instance of &lt;code&gt;Twig_Node_Module&lt;/code&gt;). The core extension defines the basic nodes like: &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, ... and the expression nodes.</source>
          <target state="translated">파서는 토큰 스트림을 AST (Abstract Syntax Tree) 또는 노드 트리 ( &lt;code&gt;Twig_Node_Module&lt;/code&gt; 인스턴스)로 변환 합니다. 핵심 확장은 &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , ... 및 expression node와 같은 기본 노드를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="db132e074d1e44d840963fc70b6e0e2638217f67" translate="yes" xml:space="preserve">
          <source>The parser converts the token stream into an AST (Abstract Syntax Tree), or a node tree (an instance of &lt;code&gt;\Twig\Node\ModuleNode&lt;/code&gt;). The core extension defines the basic nodes like: &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &amp;hellip; and the expression nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5655ed1ff8aed24268a1afb344a9c125842ef305" translate="yes" xml:space="preserve">
          <source>The parsing process is simplified thanks to a bunch of methods you can call from the token stream (&lt;code&gt;$this-&amp;gt;parser-&amp;gt;getStream()&lt;/code&gt;):</source>
          <target state="translated">토큰 스트림 ( &lt;code&gt;$this-&amp;gt;parser-&amp;gt;getStream()&lt;/code&gt; ) 에서 호출 할 수있는 많은 메소드 덕분에 구문 분석 프로세스가 단순화되었습니다 .</target>
        </trans-unit>
        <trans-unit id="f3574d65109403c2cb81586702c761af2d0ad345" translate="yes" xml:space="preserve">
          <source>The policy object is the first argument of the sandbox constructor:</source>
          <target state="translated">정책 객체는 샌드 박스 생성자의 첫 번째 인수입니다.</target>
        </trans-unit>
        <trans-unit id="476b1568969ccc06c6d3438260ae7806fade3fe9" translate="yes" xml:space="preserve">
          <source>The recommended way to install Twig is via Composer:</source>
          <target state="translated">Twig를 설치하는 권장 방법은 Composer를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5aa8f413f50516f554d66069df8fd0a454a1c75c" translate="yes" xml:space="preserve">
          <source>The rendering of a Twig template can be summarized into four key steps:</source>
          <target state="translated">나뭇 가지 템플릿의 렌더링은 4 가지 주요 단계로 요약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0805c8022dee59c0d1d0f8ba4a500510f262ee9b" translate="yes" xml:space="preserve">
          <source>The resolution algorithm is the same as the one used for the &lt;code&gt;.&lt;/code&gt; notation, except that the item can be any valid expression.</source>
          <target state="translated">해상도 알고리즘은에 사용 된 것과 동일합니다 &lt;code&gt;.&lt;/code&gt; 항목이 유효한 표현식 일 수 있다는 점을 제외하고</target>
        </trans-unit>
        <trans-unit id="e6c5f1e9e032fae94b06416d0874435a647e4649" translate="yes" xml:space="preserve">
          <source>The rules to determine if an expression is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; are the same as in PHP; here are the edge cases rules:</source>
          <target state="translated">표현식이 &lt;code&gt;true&lt;/code&gt; 인지 &lt;code&gt;false&lt;/code&gt; 인지를 결정하는 규칙 은 PHP와 동일합니다. 다음은 가장 중요한 사례 규칙입니다.</target>
        </trans-unit>
        <trans-unit id="5667fb50053afafdfed7bf9387c671b584ebccd2" translate="yes" xml:space="preserve">
          <source>The scoping rules are the same whether you imported macros via &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;from&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed34948a81970e240357513831102e2a671eb87" translate="yes" xml:space="preserve">
          <source>The second solution involves duplication of common code with all its negative consequences: any change involves finding and editing all affected copies of the structure, correctness has to be verified for each copy, copies may go out of sync by careless modifications etc.</source>
          <target state="translated">두 번째 솔루션은 모든 부정적인 결과와 함께 공통 코드를 복제하는 것입니다. 모든 변경에는 영향을받는 구조의 모든 사본을 찾아 편집하는 것이 포함되며 각 사본에 대한 정확성을 확인해야하며 부주의 한 수정으로 인해 사본이 동기화되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28f59f1aaed7ee9b4d5d01401a14b713526c2294" translate="yes" xml:space="preserve">
          <source>The separator between elements is an empty string per default, but you can define it with the optional first parameter:</source>
          <target state="translated">요소 사이의 구분 기호는 기본적으로 빈 문자열이지만 선택적 첫 번째 매개 변수를 사용하여 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c26d2b17c16e7bdfb2f6cff610f9b02b3dcb587" translate="yes" xml:space="preserve">
          <source>The simplest form of expressions are literals. Literals are representations for PHP types such as strings, numbers, and arrays. The following literals exist:</source>
          <target state="translated">가장 간단한 표현 형식은 리터럴입니다. 리터럴은 문자열, 숫자 및 배열과 같은 PHP 유형을 나타냅니다. 다음과 같은 리터럴이 존재합니다.</target>
        </trans-unit>
        <trans-unit id="8bc546a32b1a826afc5723deeed49d9fe549ac18" translate="yes" xml:space="preserve">
          <source>The simplest way to configure Twig to load templates for your application looks roughly like this:</source>
          <target state="translated">응용 프로그램의 템플릿을로드하도록 Twig를 구성하는 가장 간단한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5950f218b5e82f58b716b595186a9cd89b310099" translate="yes" xml:space="preserve">
          <source>The simplest way to use methods is to define them on the extension itself:</source>
          <target state="translated">메소드를 사용하는 가장 간단한 방법은 확장 자체에서 메소드를 정의하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="935a6993e4dbedb42b8a75c15f45ed186cb819a6" translate="yes" xml:space="preserve">
          <source>The tag is not flexible as you cannot use it in an expression:</source>
          <target state="translated">표현식에서 태그를 사용할 수 없으므로 태그가 유연하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="570c7975cafae6b1fc10dda241e66146d26a496e" translate="yes" xml:space="preserve">
          <source>The tag outputs something;</source>
          <target state="translated">태그는 무언가를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="fb9f43c9283804263a29fbd1d4b14bfba3d67d59" translate="yes" xml:space="preserve">
          <source>The template name can be any valid Twig expression:</source>
          <target state="translated">템플릿 이름은 유효한 Twig 식일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cf8636f7d382a7639257ade415410c8c320316d" translate="yes" xml:space="preserve">
          <source>The typical way to configure Twig to load templates for an application looks roughly like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd076a0bfe9a72011fe9f978aa7103ba995f3c1f" translate="yes" xml:space="preserve">
          <source>Then, add the filter to the Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bcd4837a06c852bffe5d7e7bbe04297acc58ed" translate="yes" xml:space="preserve">
          <source>Then, add the filter to your Twig environment:</source>
          <target state="translated">그런 다음 Twig 환경에 필터를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="4ddf49563b69a5ffb88c7c6ecffd187bc79ffc70" translate="yes" xml:space="preserve">
          <source>Then, the &lt;strong&gt;parser&lt;/strong&gt; converts the token stream into a meaningful tree of nodes (the Abstract Syntax Tree);</source>
          <target state="translated">그런 다음 &lt;strong&gt;파서&lt;/strong&gt; 는 토큰 스트림을 의미있는 노드 트리 (Abstract Syntax Tree)로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e710debb8ca9ec4095842606119799e685a51289" translate="yes" xml:space="preserve">
          <source>Then, use the &lt;code&gt;twig/extra-bundle&lt;/code&gt; on Symfony projects or add the extension explicitly on the Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c9c61b30124f9fde334fc87f9ef4f7280170ea" translate="yes" xml:space="preserve">
          <source>There are two kinds of delimiters: &lt;code&gt;{% ... %}&lt;/code&gt; and &lt;code&gt;{{ ... }}&lt;/code&gt;. The first one is used to execute statements such as for-loops, the latter outputs the result of an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54045c78156842fb4a2d2b71f752119954a2c76a" translate="yes" xml:space="preserve">
          <source>There are two kinds of delimiters: &lt;code&gt;{% ... %}&lt;/code&gt; and &lt;code&gt;{{ ... }}&lt;/code&gt;. The first one is used to execute statements such as for-loops, the latter prints the result of an expression to the template.</source>
          <target state="translated">구분 기호에는 &lt;code&gt;{% ... %}&lt;/code&gt; 및 &lt;code&gt;{{ ... }}&lt;/code&gt; 두 종류가 있습니다 . 첫 번째는 for-loops와 같은 명령문을 실행하는 데 사용되며 후자는 표현식의 결과를 템플리트에 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="d2d925bc84fedb7bd3c0ff8cef00565e6c94128b" translate="yes" xml:space="preserve">
          <source>There are two ways to import macros. You can import the complete template containing the macros into a local variable (via the &lt;code&gt;import&lt;/code&gt; tag) or only import specific macros from the template (via the &lt;code&gt;from&lt;/code&gt; tag).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d6b5aac9cf1e2f97301f786b8e656e193b37c2" translate="yes" xml:space="preserve">
          <source>There are two ways to import templates. You can import the complete template into a variable or request specific macros from it.</source>
          <target state="translated">템플릿을 가져 오는 방법에는 두 가지가 있습니다. 전체 템플릿을 변수로 가져 오거나 특정 매크로를 요청할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9a7700bf3f3a7f17d04c860ce312e5d3a03b627" translate="yes" xml:space="preserve">
          <source>These defaults can be changed through the core extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f4085a7a27e0a51ed63ecc74013b50005df7fd" translate="yes" xml:space="preserve">
          <source>These defaults can be easily changed through the core extension:</source>
          <target state="translated">코어 확장을 통해 이러한 기본값을 쉽게 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c98f2a0bf2c292d3c91d370c544ce89ecac34e16" translate="yes" xml:space="preserve">
          <source>These two solutions do not scale well because they each have a major drawback:</source>
          <target state="translated">이 두 솔루션은 각각 큰 결점이 있기 때문에 확장 성이 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="23f6955d23835bd73fbc69e62d45469c1ec33446" translate="yes" xml:space="preserve">
          <source>Think of an embedded template as a &quot;micro layout skeleton&quot;.</source>
          <target state="translated">포함 된 템플릿을 &quot;마이크로 레이아웃 스켈레톤&quot;이라고 생각하십시오.</target>
        </trans-unit>
        <trans-unit id="906f4540b9b418ae1dcc1f292920e51df75408ed" translate="yes" xml:space="preserve">
          <source>Think of an embedded template as a &amp;ldquo;micro layout skeleton&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6a6eec4d428662641f8d3c2820dfb951d81a46" translate="yes" xml:space="preserve">
          <source>This behavior depends on the application embedding Twig.</source>
          <target state="translated">이 동작은 Twig를 포함하는 응용 프로그램에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="aacd43e82fe743bc45f3661b7e03e79e613e518c" translate="yes" xml:space="preserve">
          <source>This can be achieved with the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38683bc182c9b9e9a72b8cf1d5d34761b07fee44" translate="yes" xml:space="preserve">
          <source>This can be easily achieved with the following code:</source>
          <target state="translated">다음 코드를 사용하면 쉽게 달성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd75a429027769005ca3c431661e9140bda2b034" translate="yes" xml:space="preserve">
          <source>This chapter describes the API to Twig and not the template language. It will be most useful as reference to those implementing the template interface to the application and not those who are creating Twig templates.</source>
          <target state="translated">이 장에서는 템플릿 언어가 아닌 Twig API를 설명합니다. Twig 템플릿을 만드는 사람이 아니라 응용 프로그램에 대한 템플릿 인터페이스를 구현하는 사람에 대한 참조로 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2030e6ed0803a3c954599e63b05bc1d979a3941b" translate="yes" xml:space="preserve">
          <source>This creates a template environment with a default configuration and a loader that looks up templates in the &lt;code&gt;/path/to/templates/&lt;/code&gt; directory. Different loaders are available and you can also write your own if you want to load templates from a database or other resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0dcaa483477b7fec5f6edb94f4eaad2cbf30698" translate="yes" xml:space="preserve">
          <source>This document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Twig templates.</source>
          <target state="translated">이 문서는 템플릿 엔진의 구문과 의미를 설명하며 Twig 템플릿을 만드는 데 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5ddf705d4692f11943f0857eb819f6ccc94d0258" translate="yes" xml:space="preserve">
          <source>This extension does nothing for now. We will customize it in the next sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace843964eff2ec15ebad79cc831cd3cf1cb8441" translate="yes" xml:space="preserve">
          <source>This filter relies on the &lt;a href=&quot;https://secure.php.net/iconv&quot;&gt;iconv&lt;/a&gt; extension.</source>
          <target state="translated">이 필터는 &lt;a href=&quot;https://secure.php.net/iconv&quot;&gt;iconv&lt;/a&gt; 확장자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="83d4e7381cf870e644b158bfaa0519c6dbf2e670" translate="yes" xml:space="preserve">
          <source>This is the documentation for Twig, the flexible, fast, and secure template engine for PHP.</source>
          <target state="translated">유연하고 빠르며 안전한 PHP 용 템플릿 엔진 인 Twig에 대한 문서입니다.</target>
        </trans-unit>
        <trans-unit id="2a4e79c5da9275c422612b015b496b8e6044ddb6" translate="yes" xml:space="preserve">
          <source>This is very convenient but not recommended as it makes template compilation depend on runtime dependencies even if they are not needed (think for instance as a dependency that connects to a database engine).</source>
          <target state="translated">이는 템플릿 컴파일이 런타임 종속성에 필요하지 않더라도 런타임 종속성에 따라 달라 지므로 매우 편리하지만 권장하지는 않습니다 (예 : 데이터베이스 엔진에 연결하는 종속성으로 생각하십시오).</target>
        </trans-unit>
        <trans-unit id="ea23bac535d13b11eb65c1ae34222ac10317e809" translate="yes" xml:space="preserve">
          <source>This loader is very useful for unit testing. It can also be used for small projects where storing all templates in a single PHP file might make sense.</source>
          <target state="translated">이 로더는 단위 테스트에 매우 유용합니다. 또한 모든 템플릿을 단일 PHP 파일로 저장하는 것이 적합한 소규모 프로젝트에도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78b68d9999fdf3afa7ce0e71f640505ca1182c5b" translate="yes" xml:space="preserve">
          <source>This method won&amp;rsquo;t catch any sandbox policy violations because the policy is enforced during template rendering (as Twig needs the context for some checks like allowed methods on objects).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa9f2240361a3ee4fb58fc704cdf516a783509a" translate="yes" xml:space="preserve">
          <source>This method won't catch any sandbox policy violations because the policy is enforced during template rendering (as Twig needs the context for some checks like allowed methods on objects).</source>
          <target state="translated">이 방법은 템플릿 렌더링 중에 정책이 시행되기 때문에 샌드 박스 정책 위반을 포착하지 않습니다 (Twig는 오브젝트에 허용 된 메소드와 같은 일부 검사에 대한 컨텍스트가 필요하므로).</target>
        </trans-unit>
        <trans-unit id="d987f80afc8f1be0bae0a1b1849b1101459785c6" translate="yes" xml:space="preserve">
          <source>This recipe is the continuation of the previous one. Even if you store the contributed templates in a database, you might want to keep the original/base templates on the filesystem. When templates can be loaded from different sources, you need to use the &lt;code&gt;Twig_Loader_Chain&lt;/code&gt; loader.</source>
          <target state="translated">이 레시피는 이전 레시피의 연속입니다. 컨트 리뷰 션 된 템플리트를 데이터베이스에 저장하더라도 파일 시스템에 원본 /베이스 템플리트를 유지하려고 할 수 있습니다. 다른 소스에서 템플릿을로드 할 수있는 경우 &lt;code&gt;Twig_Loader_Chain&lt;/code&gt; 로더 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7c4cd5b51d80c5953871d8b5bab107c0f52f3e59" translate="yes" xml:space="preserve">
          <source>This recipe is the continuation of the previous one. Even if you store the contributed templates in a database, you might want to keep the original/base templates on the filesystem. When templates can be loaded from different sources, you need to use the &lt;code&gt;\Twig\Loader\ChainLoader&lt;/code&gt; loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5a70f22e0e3943bf23733efd34809e13affed5" translate="yes" xml:space="preserve">
          <source>This recipe was inspired by the following Django wiki page: &lt;a href=&quot;https://code.djangoproject.com/wiki/ExtendingTemplates&quot;&gt;https://code.djangoproject.com/wiki/ExtendingTemplates&lt;/a&gt;</source>
          <target state="translated">이 레시피는 다음 Django 위키 페이지에서 영감을 얻었습니다. &lt;a href=&quot;https://code.djangoproject.com/wiki/ExtendingTemplates&quot;&gt;https://code.djangoproject.com/wiki/ExtendingTemplates&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b9272055aa356bf24d7aa3c56d2da8a6b08cdd6" translate="yes" xml:space="preserve">
          <source>This section describes the features added by the built-in extensions.</source>
          <target state="translated">이 섹션에서는 내장 확장 기능으로 추가 된 기능에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="ae100f2d3f02efd9269340625f673bbda6624380" translate="yes" xml:space="preserve">
          <source>This section gives you a brief introduction to the PHP API for Twig.</source>
          <target state="translated">이 섹션에서는 Twig 용 PHP API에 대해 간략하게 소개합니다.</target>
        </trans-unit>
        <trans-unit id="2e8614a3c8387d696228897b403a0066bd8f7cf3" translate="yes" xml:space="preserve">
          <source>This section gives you a brief introduction to the PHP API for Twig:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5736e92ed139d7ba64706ce677dfca132f14d10d" translate="yes" xml:space="preserve">
          <source>This tag is not meant to &quot;optimize&quot; the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances.</source>
          <target state="translated">이 태그는 생성 된 HTML 내용의 크기를 &quot;최적화&quot;하기위한 것이 아니라 일부 상황에서 브라우저 렌더링 문제를 피하기 위해 HTML 태그 사이에 추가 공백을 피하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="42892fea5067faea90e6f237403b49af12d3a4e2" translate="yes" xml:space="preserve">
          <source>This tag is not meant to &amp;ldquo;optimize&amp;rdquo; the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ae559a1a3118598da1ab09690c171423c4f14f" translate="yes" xml:space="preserve">
          <source>This will create a template environment with the default settings and a loader that looks up the templates in the &lt;code&gt;/path/to/templates/&lt;/code&gt; folder. Different loaders are available and you can also write your own if you want to load templates from a database or other resources.</source>
          <target state="translated">그러면 기본 설정과 &lt;code&gt;/path/to/templates/&lt;/code&gt; 폴더 에서 템플릿을 찾는 로더가있는 템플릿 환경이 만들어 집니다. 다른 로더를 사용할 수 있으며 데이터베이스 나 다른 리소스에서 템플릿을로드하려는 경우 직접 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4eb832eb02fec68d1c91369120b18a5908b9e34a" translate="yes" xml:space="preserve">
          <source>Three steps are needed to define a new tag:</source>
          <target state="translated">새 태그를 정의하려면 세 단계가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d1f7dc891b5e5d1797163b556e805123c9369e4f" translate="yes" xml:space="preserve">
          <source>Timezone</source>
          <target state="translated">Timezone</target>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="1c3a3f99b4f351a3a56c5bdac3c697d5452fc289" translate="yes" xml:space="preserve">
          <source>To add a filter to an extension, you need to override the &lt;code&gt;getFilters()&lt;/code&gt; method. This method must return an array of filters to add to the Twig environment:</source>
          <target state="translated">확장에 필터를 추가하려면 &lt;code&gt;getFilters()&lt;/code&gt; 메소드 를 대체해야합니다 . 이 메소드는 Twig 환경에 추가 할 필터 배열을 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="9838487cbd27f08cc48dea1a0411c383a932b2c8" translate="yes" xml:space="preserve">
          <source>To apply a filter on a section of code, wrap it in the &lt;a href=&quot;tags/filter&quot;&gt;filter&lt;/a&gt; tag:</source>
          <target state="translated">코드 섹션에 필터를 적용하려면 &lt;a href=&quot;tags/filter&quot;&gt;필터&lt;/a&gt; 태그로 감싸십시오 .</target>
        </trans-unit>
        <trans-unit id="5f516d15c533049381a3900a4183b6190f5b4d01" translate="yes" xml:space="preserve">
          <source>To apply a filter on a section of code, wrap it with the &lt;a href=&quot;tags/apply&quot;&gt;apply&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c58be64438c26f383a66eb2663df1846bfacfa" translate="yes" xml:space="preserve">
          <source>To change the block delimiters, you need to create your own lexer object:</source>
          <target state="translated">블록 구분 기호를 변경하려면 고유 한 lexer 객체를 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="f2738ba060aad383469ea8d0b84018026dac0e9d" translate="yes" xml:space="preserve">
          <source>To comment-out part of a line in a template, use the comment syntax &lt;code&gt;{# ...
#}&lt;/code&gt;. This is useful for debugging or to add information for other template designers or yourself:</source>
          <target state="translated">템플리트에서 행의 일부를 주석 처리하려면 주석 구문 &lt;code&gt;{# ... #}&lt;/code&gt; . 이는 다른 템플릿 디자이너 나 자신에게 정보를 디버깅하거나 추가 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b7668a039080c1019dbebd84d210fb85089eb2e6" translate="yes" xml:space="preserve">
          <source>To ease debugging, you can also give the template a name that will be part of any related error message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a733121523112e760a7e8b29885945c210de2ed" translate="yes" xml:space="preserve">
          <source>To easily remove all deprecated feature usages from your templates, write and run a script along the lines of the following:</source>
          <target state="translated">더 이상 사용되지 않는 기능 사용을 템플릿에서 쉽게 제거하려면 다음 줄을 따라 스크립트를 작성하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="6f36cfc4945a0a2add9986f0f898b2a2812f78da" translate="yes" xml:space="preserve">
          <source>To escape words and characters in the date format use &lt;code&gt;\\&lt;/code&gt; in front of each character:</source>
          <target state="translated">날짜 형식의 단어와 문자를 이스케이프하려면 각 문자 앞에 &lt;code&gt;\\&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8f5657aa5d8abd52a0bf4c6e7b998777489fbfa" translate="yes" xml:space="preserve">
          <source>To format negative numbers or math calculation, wrap the previous statement with parentheses (needed because of Twig&amp;rsquo;s &lt;a href=&quot;../templates#twig-expressions&quot;&gt;precedence of operators&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef5c2a4e82dd6e65b0e553cfd760b57830b2a95" translate="yes" xml:space="preserve">
          <source>To format negative numbers, wrap the number with parentheses (needed because of Twig's &lt;a href=&quot;../templates#twig-expressions&quot;&gt;precedence of operators&lt;/a&gt;:</source>
          <target state="translated">음수를 포맷하려면 숫자를 괄호로 묶으십시오 (Twig의 &lt;a href=&quot;../templates#twig-expressions&quot;&gt;연산자 우선 순위&lt;/a&gt; 때문에 필요합니다) .</target>
        </trans-unit>
        <trans-unit id="6a255173ad218eef9e3a68f248639c71623fa06b" translate="yes" xml:space="preserve">
          <source>To get around this, force Twig to invalidate the bytecode cache:</source>
          <target state="translated">이 문제를 해결하려면 Twig가 바이트 코드 캐시를 무효화하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="c2d4b350ed889a5a0fdd9e9b1ce8d07a438ea841" translate="yes" xml:space="preserve">
          <source>To import all macros from a template into a local variable, use the &lt;code&gt;import&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf2ee0ccfeea5c7bdd512b697ea8994f7ee5507" translate="yes" xml:space="preserve">
          <source>To import macros from the current file, use the special &lt;code&gt;_self&lt;/code&gt; variable for the source.</source>
          <target state="translated">현재 파일에서 매크로를 가져 오려면 소스에 특수 &lt;code&gt;_self&lt;/code&gt; 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9ab79ef335d639be5bce9016c153dca02225911" translate="yes" xml:space="preserve">
          <source>To keep your extension class clean and lean, inherit from the built-in &lt;code&gt;Twig_Extension&lt;/code&gt; class instead of implementing the interface as it provides empty implementations for all methods:</source>
          <target state="translated">확장 클래스를 깨끗하고 간결하게 유지하려면 모든 메소드에 대해 빈 구현을 제공하므로 인터페이스를 구현하는 대신 내장 &lt;code&gt;Twig_Extension&lt;/code&gt; 클래스 에서 상속하십시오 .</target>
        </trans-unit>
        <trans-unit id="41bda8c2f65a04e5f9122ffada3a99df4c4af7ee" translate="yes" xml:space="preserve">
          <source>To keep your extension class clean and lean, inherit from the built-in &lt;code&gt;\Twig\Extension\AbstractExtension&lt;/code&gt; class instead of implementing the interface as it provides empty implementations for all methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74cd98f71e3ffe850527fbdcd6d2efe7a52be44" translate="yes" xml:space="preserve">
          <source>To learn more about the other installation methods, read the &lt;a href=&quot;installation&quot;&gt;installation&lt;/a&gt; chapter; it also explains how to install the Twig C extension.</source>
          <target state="translated">다른 설치 방법에 대한 자세한 내용은 &lt;a href=&quot;installation&quot;&gt;설치&lt;/a&gt; 장을 읽으십시오 . 또한 Twig C 확장을 설치하는 방법도 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8d1cb0a16ca06335afadc2386fc99e9bb9cdbd7a" translate="yes" xml:space="preserve">
          <source>To load a template from a Twig environment, call the &lt;code&gt;load()&lt;/code&gt; method which returns a &lt;code&gt;Twig_TemplateWrapper&lt;/code&gt; instance:</source>
          <target state="translated">Twig 환경에서 템플릿을로드하려면 &lt;code&gt;Twig_TemplateWrapper&lt;/code&gt; 인스턴스 를 반환하는 &lt;code&gt;load()&lt;/code&gt; 메서드를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="cdc32be03f489ef63efd3305fa3aa95d9ad4f292" translate="yes" xml:space="preserve">
          <source>To load a template from a Twig environment, call the &lt;code&gt;load()&lt;/code&gt; method which returns a &lt;code&gt;\Twig\TemplateWrapper&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb5f8b42eda99730a573de29ee992445a309dcb" translate="yes" xml:space="preserve">
          <source>To overload an already defined filter, test, operator, global variable, or function, re-define it in an extension and register it &lt;strong&gt;as late as possible&lt;/strong&gt; (order matters):</source>
          <target state="translated">이미 정의 된 필터, 테스트, 연산자, 전역 변수 또는 함수를 오버로드하려면 확장에서 필터를 재정의 &lt;strong&gt;하고 가능한 한 늦게&lt;/strong&gt; 등록하십시오 (주문 사항).</target>
        </trans-unit>
        <trans-unit id="911dbd69004ee28591d95d7b288601a9d2ab8182" translate="yes" xml:space="preserve">
          <source>To perform a negative test, use the &lt;code&gt;not in&lt;/code&gt; operator:</source>
          <target state="translated">부정 테스트를 수행하려면 &lt;code&gt;not in&lt;/code&gt; 연산자를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8aab6e501b9db0e42854320958ab1985eabb7e0c" translate="yes" xml:space="preserve">
          <source>To remove all deprecated feature usages from your templates, write and run a script along the lines of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b501a90a5f2a926fd44a55ef63d7b59c067cf0" translate="yes" xml:space="preserve">
          <source>To render the template with some variables, call the &lt;code&gt;render()&lt;/code&gt; method:</source>
          <target state="translated">변수를 사용하여 템플릿을 렌더링하려면 render &lt;code&gt;render()&lt;/code&gt; 메서드를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc2a7ce0c3e0556f8e1b9c78f7106463998c2739" translate="yes" xml:space="preserve">
          <source>To understand why Twig exposes so many extension points, let&amp;rsquo;s see how to implement a &lt;em&gt;Lorem ipsum&lt;/em&gt; generator (it needs to know the number of words to generate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f9895d451a4d20595cb005970fb96bb73773c6" translate="yes" xml:space="preserve">
          <source>To understand why Twig exposes so many extension points, let's see how to implement a &lt;em&gt;Lorem ipsum&lt;/em&gt; generator (it needs to know the number of words to generate).</source>
          <target state="translated">Twig가 너무 많은 확장 점을 노출하는 이유를 이해하려면 &lt;em&gt;Lorem ipsum&lt;/em&gt; 생성기 를 구현하는 방법을 살펴 보겠습니다 (생성 할 단어 수를 알아야 함).</target>
        </trans-unit>
        <trans-unit id="6d1582619e7c90204a94f7ffe028afe72341fb11" translate="yes" xml:space="preserve">
          <source>True if first iteration</source>
          <target state="translated">첫 번째 반복 인 경우 참</target>
        </trans-unit>
        <trans-unit id="b6aaca4860d1d53183300670b36edc55b429809a" translate="yes" xml:space="preserve">
          <source>True if last iteration</source>
          <target state="translated">마지막 반복 인 경우 참</target>
        </trans-unit>
        <trans-unit id="4aaddde62bcecb33c76dd8d63402229b2439754b" translate="yes" xml:space="preserve">
          <source>Truncating a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfe01d64b287e79f43278660cdb5bdf82bd0ed1" translate="yes" xml:space="preserve">
          <source>Twig</source>
          <target state="translated">Twig</target>
        </trans-unit>
        <trans-unit id="acb9042547094d0a949cdb10ed5aa49133eb16b2" translate="yes" xml:space="preserve">
          <source>Twig 3.x needs at least &lt;strong&gt;PHP 7.2.5&lt;/strong&gt; to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac92d1c41baa1bf0d0db6d3d73e5eea6bc02e2b8" translate="yes" xml:space="preserve">
          <source>Twig Internals</source>
          <target state="translated">나뭇 가지 내부</target>
        </trans-unit>
        <trans-unit id="056dc0ef607f59cea5a4b0ee3ffaccc10f0957eb" translate="yes" xml:space="preserve">
          <source>Twig allows expressions everywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b469ccab7205877c1f839d055ff0bc0d9a6473de" translate="yes" xml:space="preserve">
          <source>Twig allows expressions everywhere. These work very similar to regular PHP and even if you're not working with PHP you should feel comfortable with it.</source>
          <target state="translated">나뭇 가지는 어디에서나 표현할 수 있습니다. 이것들은 일반 PHP와 매우 유사하며 PHP로 작업하지 않더라도 편안하게 느낄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9349376a5d61330189fbb788a769e54ee084b3d3" translate="yes" xml:space="preserve">
          <source>Twig allows some syntax customization for the block delimiters. It&amp;rsquo;s &lt;strong&gt;not&lt;/strong&gt; recommended to use this feature as templates will be tied with your custom syntax. But for specific projects, it can make sense to change the defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3460799cc39f1a188e2a0c7ac9c6618151563e7d" translate="yes" xml:space="preserve">
          <source>Twig allows some syntax customization for the block delimiters. It's not recommended to use this feature as templates will be tied with your custom syntax. But for specific projects, it can make sense to change the defaults.</source>
          <target state="translated">Twig를 사용하면 블록 구분 기호에 대한 구문 사용자 정의가 가능합니다. 템플릿은 사용자 지정 구문과 연결되므로이 기능을 사용하지 않는 것이 좋습니다. 그러나 특정 프로젝트의 경우 기본값을 변경하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8c20363039f76d4051e12f2f37af9a9db00a3bd8" translate="yes" xml:space="preserve">
          <source>Twig allows you to calculate with values. This is rarely useful in templates but exists for completeness' sake. The following operators are supported:</source>
          <target state="translated">나뭇 가지를 사용하면 값으로 계산할 수 있습니다. 이것은 템플릿에서 거의 유용하지 않지만 완전성을 위해 존재합니다. 다음과 같은 연산자가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="61c06208011d96f0ece37dbb2c79481d45293c04" translate="yes" xml:space="preserve">
          <source>Twig allows you to do math in templates; the following operators are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e4b46150cd575d2c8addd9c2ed121f0aaf33ed" translate="yes" xml:space="preserve">
          <source>Twig allows you to put the name of the block after the end tag for better readability (the name after the &lt;code&gt;endblock&lt;/code&gt; word must match the block name):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03191eefd0493914679a1488834d1c1c7b0a2dce" translate="yes" xml:space="preserve">
          <source>Twig allows you to put the name of the block after the end tag for better readability:</source>
          <target state="translated">나뭇 가지를 사용하면 가독성을 높이기 위해 종료 태그 뒤에 블록 이름을 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49ac8159e03f7fa73abfce55022578cdf217481d" translate="yes" xml:space="preserve">
          <source>Twig allows you to put the name of the macro after the end tag for better readability (the name after the &lt;code&gt;endmacro&lt;/code&gt; word must match the macro name):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c03d0b26a90d03143a63ac69fdcb62f5927a79" translate="yes" xml:space="preserve">
          <source>Twig allows you to put the name of the macro after the end tag for better readability:</source>
          <target state="translated">나뭇 가지를 사용하면 가독성을 높이기 위해 종료 태그 뒤에 매크로 이름을 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01bf3b68c727a71e746a731f5298fdfceeeffd1e" translate="yes" xml:space="preserve">
          <source>Twig also support bitwise operators (&lt;code&gt;b-and&lt;/code&gt;, &lt;code&gt;b-xor&lt;/code&gt;, and &lt;code&gt;b-or&lt;/code&gt;).</source>
          <target state="translated">Twig는 비트 연산자 ( &lt;code&gt;b-and&lt;/code&gt; , &lt;code&gt;b-xor&lt;/code&gt; 및 &lt;code&gt;b-or&lt;/code&gt; )도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ad6a9d8fc2bc53bb6c8c45abd31ee8b4e3ebda99" translate="yes" xml:space="preserve">
          <source>Twig also supports a specific syntax for accessing items on PHP arrays, &lt;code&gt;foo['bar']&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cbf01d445d3d0267697ee94f4474b5a5e21945" translate="yes" xml:space="preserve">
          <source>Twig also supports bitwise operators (&lt;code&gt;b-and&lt;/code&gt;, &lt;code&gt;b-xor&lt;/code&gt;, and &lt;code&gt;b-or&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2135085cc8aae1970b986def0e5df7479a00b404" translate="yes" xml:space="preserve">
          <source>Twig also supports multiple inheritance via &amp;ldquo;horizontal reuse&amp;rdquo; with the help of the &lt;a href=&quot;tags/use&quot;&gt;use&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41175d1a7a58715c75dfcd87a79bddcd7cd3a9c0" translate="yes" xml:space="preserve">
          <source>Twig also supports multiple inheritance with the so called horizontal reuse with the help of the &lt;a href=&quot;tags/use&quot;&gt;use&lt;/a&gt; tag. This is an advanced feature hardly ever needed in regular templates.</source>
          <target state="translated">Twig는 또한 &lt;a href=&quot;tags/use&quot;&gt;use&lt;/a&gt; 태그를 사용 하여 소위 수평 재사용으로 다중 상속을 지원합니다 . 일반 템플릿에서는 거의 필요하지 않은 고급 기능입니다.</target>
        </trans-unit>
        <trans-unit id="71ec2dc82e34a07e453b5afdb20205a245f4212a" translate="yes" xml:space="preserve">
          <source>Twig can be easily extended.</source>
          <target state="translated">나뭇 가지를 쉽게 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b71f7b5a80f36e4804a2e876c2900b47f2590d9b" translate="yes" xml:space="preserve">
          <source>Twig can be extended in many ways; you can add extra tags, filters, tests, operators, global variables, and functions. You can even extend the parser itself with node visitors.</source>
          <target state="translated">나뭇 가지는 여러 가지 방법으로 확장 될 수 있습니다. 태그, 필터, 테스트, 연산자, 전역 변수 및 함수를 추가 할 수 있습니다. 노드 방문자로 파서 자체를 확장 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f81bad1168e830f33104d65b44458b1a9609ba13" translate="yes" xml:space="preserve">
          <source>Twig can be extended. If you want to create your own extensions, read the &lt;a href=&quot;advanced#creating-extensions&quot;&gt;Creating an Extension&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015e2e2a6b2d148dd643f55fc94c1f90feaf6958" translate="yes" xml:space="preserve">
          <source>Twig can throw exceptions:</source>
          <target state="translated">나뭇 가지가 예외를 던질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c172fdd1a94faa174e6af82f652b98ea6867fd19" translate="yes" xml:space="preserve">
          <source>Twig comes bundled with the following extensions:</source>
          <target state="translated">나뭇 가지에는 다음 확장이 번들로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="584e4509c561852513b8a0ff441a21cc5d9ecae9" translate="yes" xml:space="preserve">
          <source>Twig comes with a PSR-11 compatible runtime loader (&lt;code&gt;Twig_ContainerRuntimeLoader&lt;/code&gt;).</source>
          <target state="translated">Twig는 PSR-11 호환 런타임 로더 ( &lt;code&gt;Twig_ContainerRuntimeLoader&lt;/code&gt; ) 와 함께 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="4fa25309c207e6765130e8cc6eddf49f783e6d80" translate="yes" xml:space="preserve">
          <source>Twig comes with a PSR-11 compatible runtime loader (&lt;code&gt;\Twig\RuntimeLoader\ContainerRuntimeLoader&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93b38faadcc36bf71c8dbbe019a2de3c1268304" translate="yes" xml:space="preserve">
          <source>Twig does not care where you save your extension on the filesystem, as all extensions must be registered explicitly to be available in your templates.</source>
          <target state="translated">Twig는 템플릿에서 사용 가능한 모든 확장명을 명시 적으로 등록해야하므로 파일 시스템에서 확장명을 저장하는 위치는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f18b75e9b419f4e36105e76ac128cb2ab458d76d" translate="yes" xml:space="preserve">
          <source>Twig does not escape static expressions:</source>
          <target state="translated">Twig는 정적 표현식을 이스케이프하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="46d081ec3db4983ad3ed33d126f6e4e1eadc276b" translate="yes" xml:space="preserve">
          <source>Twig extensions are packages that add new features to Twig. Register an extension via the &lt;code&gt;addExtension()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d4453e1c07f63e7f7f7a7639d5781bdc23f05e" translate="yes" xml:space="preserve">
          <source>Twig extensions are packages that add new features to Twig. Using an extension is as simple as using the &lt;code&gt;addExtension()&lt;/code&gt; method:</source>
          <target state="translated">나뭇 가지 확장은 나뭇 가지에 새로운 기능을 추가하는 패키지입니다. &lt;code&gt;addExtension()&lt;/code&gt; 메소드 를 사용하는 것만 큼 확장을 사용하는 것은 간단합니다 .</target>
        </trans-unit>
        <trans-unit id="d8f7e1fda203acba66c3e075f651eccd9a4706fc" translate="yes" xml:space="preserve">
          <source>Twig filters, functions, and tests runtime implementations can be defined as any valid PHP callable:</source>
          <target state="translated">나뭇 가지 필터, 함수 및 테스트 런타임 구현은 유효한 PHP 호출 가능으로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ac699ffed5dc30e9aef04e3f1b4199b5986c1e4" translate="yes" xml:space="preserve">
          <source>Twig for Developers</source>
          <target state="translated">개발자를위한 나뭇 가지</target>
        </trans-unit>
        <trans-unit id="25e854d014f922d2149249c37f331a1d0c48a31e" translate="yes" xml:space="preserve">
          <source>Twig for Template Designers</source>
          <target state="translated">템플릿 디자이너를위한 나뭇 가지</target>
        </trans-unit>
        <trans-unit id="d71ee8988717e2a63ab250feb19606bebbc37ae5" translate="yes" xml:space="preserve">
          <source>Twig generates a deprecation notice (via a call to the &lt;code&gt;trigger_error()&lt;/code&gt; PHP function) where the &lt;code&gt;deprecated&lt;/code&gt; tag is used in a template:</source>
          <target state="translated">Twig는 더 이상 사용되지 &lt;code&gt;deprecated&lt;/code&gt; 태그가 템플리트에서 사용 되는 경우 사용 &lt;code&gt;trigger_error()&lt;/code&gt; 알림 ( trigger_error () PHP 함수 호출을 통해)을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="fa49cd1b48ab460b90d97045df15e0845d33c602" translate="yes" xml:space="preserve">
          <source>Twig is both designer and developer friendly by sticking to PHP&amp;rsquo;s principles and adding functionality useful for templating environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e919d373ca9bc1c86a0c1150e2ce34cd7a68d8c" translate="yes" xml:space="preserve">
          <source>Twig is smart enough to not escape an already escaped value by the &lt;a href=&quot;../filters/escape&quot;&gt;escape&lt;/a&gt; filter.</source>
          <target state="translated">Twig는 &lt;a href=&quot;../filters/escape&quot;&gt;이스케이프&lt;/a&gt; 필터에 의해 이미 이스케이프 된 값을 이스케이프하지 않을 정도로 똑똑 합니다.</target>
        </trans-unit>
        <trans-unit id="c54a915b0d7cd1f339979101b694d9987d92dc28" translate="yes" xml:space="preserve">
          <source>Twig is used by many Open-Source projects like Symfony, Drupal8, eZPublish, phpBB, Matomo, OroCRM; and many frameworks have support for it as well like Slim, Yii, Laravel, and Codeigniter &amp;mdash; just to name a few.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cb446a38a34831df32b35bce3699037b5566da" translate="yes" xml:space="preserve">
          <source>Twig is used by many Open-Source projects like Symfony, Drupal8, eZPublish, phpBB, Piwik, OroCRM; and many frameworks have support for it as well like Slim, Yii, Laravel, Codeigniter and Kohana &amp;mdash; just to name a few.</source>
          <target state="translated">Twig는 Symfony, Drupal8, eZPublish, phpBB, Piwik, OroCRM과 같은 많은 오픈 소스 프로젝트에서 사용됩니다. Slim, Yii, Laravel, Codeigniter 및 Kohana와 같이 많은 프레임 워크에서 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4587cc8860ed1aa1998dcacdba57df03165ec085" translate="yes" xml:space="preserve">
          <source>Twig is very extensible and you can easily hack it. Keep in mind that you should probably try to create an extension before hacking the core, as most features and enhancements can be handled with extensions. This chapter is also useful for people who want to understand how Twig works under the hood.</source>
          <target state="translated">나뭇 가지는 매우 확장 가능하며 쉽게 해킹 할 수 있습니다. 확장 기능으로 대부분의 기능과 향상 기능을 처리 할 수 ​​있으므로 코어를 해킹하기 전에 확장 기능을 만들어야합니다. 이 장은 또한 Twig가 어떻게 작동하는지 이해하려는 사람들에게도 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b317c1850fca0e3ec7ad640bebc29a200aebcbfd" translate="yes" xml:space="preserve">
          <source>Twig is very extensible and you can hack it. Keep in mind that you should probably try to create an extension before hacking the core, as most features and enhancements can be handled with extensions. This chapter is also useful for people who want to understand how Twig works under the hood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743739118f78c9e8b5bbbd535fbf128921ac4de5" translate="yes" xml:space="preserve">
          <source>Twig needs at least &lt;strong&gt;PHP 7.0.0&lt;/strong&gt; to run.</source>
          <target state="translated">나뭇 가지 를 실행하려면 &lt;strong&gt;PHP 7.0.0&lt;/strong&gt; 이상이 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="195a95702149919e3680976695bf08526af00348" translate="yes" xml:space="preserve">
          <source>Twig supports both, automatic escaping is enabled by default.</source>
          <target state="translated">Twig는 두 가지 모두를 지원하며 자동 이스케이프는 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a21475a969c585df94f2a3eb1362ee4b147be5c5" translate="yes" xml:space="preserve">
          <source>Twig supports dynamic inheritance by using a variable as the base template:</source>
          <target state="translated">Twig는 변수를 기본 템플릿으로 사용하여 동적 상속을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c2450652f7e62084ab8da4b43bd8c55f7a24b7d5" translate="yes" xml:space="preserve">
          <source>Twig supports putting often used code into &lt;a href=&quot;macro&quot;&gt;macros&lt;/a&gt;. These macros can go into different templates and get imported from there.</source>
          <target state="translated">Twig는 자주 사용되는 코드를 &lt;a href=&quot;macro&quot;&gt;매크로에&lt;/a&gt; 넣는 것을 지원 합니다 . 이 매크로는 다른 템플릿으로 이동하여 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="edf1d34dad678b09f43d91344a032e1441aac3a0" translate="yes" xml:space="preserve">
          <source>Twig supports the following optimizations:</source>
          <target state="translated">Twig는 다음 최적화를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f4a9e894bc933972d0e187cc01586dff40006d7b" translate="yes" xml:space="preserve">
          <source>Twig supports two modifiers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf43da01704e7bdd07c8957453fd7a773c3d040" translate="yes" xml:space="preserve">
          <source>Twig uses a central object called the &lt;strong&gt;environment&lt;/strong&gt; (of class &lt;code&gt;Twig_Environment&lt;/code&gt;). Instances of this class are used to store the configuration and extensions, and are used to load templates from the file system or other locations.</source>
          <target state="translated">Twig는 &lt;strong&gt;환경&lt;/strong&gt; 이라는 중앙 객체 ( &lt;code&gt;Twig_Environment&lt;/code&gt; 클래스 )를 사용합니다. 이 클래스의 인스턴스는 구성 및 확장을 저장하는 데 사용되며 파일 시스템 또는 다른 위치에서 템플릿을로드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="09cbc10c700f80a98d4224f85c4bd6acf889d1e6" translate="yes" xml:space="preserve">
          <source>Twig uses a central object called the &lt;strong&gt;environment&lt;/strong&gt; (of class &lt;code&gt;\Twig\Environment&lt;/code&gt;). Instances of this class are used to store the configuration and extensions, and are used to load templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0278d71819b6454e8ee529ca0b1e4dbdca7e0d70" translate="yes" xml:space="preserve">
          <source>Twig uses a loader (&lt;code&gt;Twig_Loader_Array&lt;/code&gt;) to locate templates, and an environment (&lt;code&gt;Twig_Environment&lt;/code&gt;) to store the configuration.</source>
          <target state="translated">Twig는 로더 ( &lt;code&gt;Twig_Loader_Array&lt;/code&gt; )를 사용하여 템플리트를 찾고 환경 ( &lt;code&gt;Twig_Environment&lt;/code&gt; )을 사용하여 구성을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="0ac33ace0c12326e55d701998d1b1c7fdd612fd1" translate="yes" xml:space="preserve">
          <source>Twig uses a loader (&lt;code&gt;\Twig\Loader\ArrayLoader&lt;/code&gt;) to locate templates, and an environment (&lt;code&gt;\Twig\Environment&lt;/code&gt;) to store its configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cef831d3600ddb7a5cadf6a78bcb0bea768c022" translate="yes" xml:space="preserve">
          <source>Twig's bitwise operators</source>
          <target state="translated">나뭇 가지의 비트 연산자</target>
        </trans-unit>
        <trans-unit id="fd09847544b0fce90c8bc8f12aa38c07d451c76b" translate="yes" xml:space="preserve">
          <source>Unlike in PHP, it's not possible to &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; in a loop. You can however filter the sequence during iteration which allows you to skip items. The following example skips all the users which are not active:</source>
          <target state="translated">PHP와 달리 루프 를 &lt;code&gt;break&lt;/code&gt; 거나 &lt;code&gt;continue&lt;/code&gt; 수는 없습니다 . 그러나 반복하는 동안 시퀀스를 필터링하여 항목을 건너 뛸 수 있습니다. 다음 예제는 활성화되지 않은 모든 사용자를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="f667c863793c22bc59dadb9fc056933bece3c557" translate="yes" xml:space="preserve">
          <source>Upload the profile to visualize it (create a &lt;a href=&quot;https://blackfire.io/signup&quot;&gt;free account&lt;/a&gt; first):</source>
          <target state="translated">프로파일을 업로드하여 시각화합니다 ( 먼저 &lt;a href=&quot;https://blackfire.io/signup&quot;&gt;무료 계정&lt;/a&gt; 생성 ).</target>
        </trans-unit>
        <trans-unit id="a4c04dea610d55450863275c7d31bc59661fcd55" translate="yes" xml:space="preserve">
          <source>Upload the profile to visualize it (create a &lt;a href=&quot;https://blackfire.io/signup?utm_source=twig&amp;amp;utm_medium=doc&amp;amp;utm_campaign=profiler&quot;&gt;free account&lt;/a&gt; first):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d45580ff64b3985f7a3adb7b6bace05bc2569c" translate="yes" xml:space="preserve">
          <source>Use a dot (&lt;code&gt;.&lt;/code&gt;) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999b8c7b76a5be29accac3307a3e2b3e9f4fea9d" translate="yes" xml:space="preserve">
          <source>Use lower cased and underscored variable names:</source>
          <target state="translated">소문자와 밑줄이있는 변수 이름을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="54541ac160ad82d686ccfffb622a60a2cbfe7f04" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;defined&lt;/code&gt; test to check if a block exists in the context of the current template:</source>
          <target state="translated">&lt;code&gt;defined&lt;/code&gt; 테스트를 사용하여 현재 템플릿의 컨텍스트에 블록이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="185f69fccc3e5e5a792110da641b27534f42a4f3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;defined&lt;/code&gt; test to check if a constant is defined:</source>
          <target state="translated">&lt;code&gt;defined&lt;/code&gt; 테스트를 사용하여 상수가 정의되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="b31b96bb4f018bc81a194a57253b67da86c2929c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spaceless&lt;/code&gt; filter to remove whitespace &lt;em&gt;between HTML tags&lt;/em&gt;, not whitespace within HTML tags or whitespace in plain text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccff04da6396a6cb9bdc87e32a2e41394a0afc2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spaceless&lt;/code&gt; tag to remove whitespace &lt;em&gt;between HTML tags&lt;/em&gt;, not whitespace within HTML tags or whitespace in plain text:</source>
          <target state="translated">사용 &lt;code&gt;spaceless&lt;/code&gt; 공백을 제거하는 태그를 &lt;em&gt;HTML 태그 사이&lt;/em&gt; 되지 공백 HTML 태그 또는 일반 텍스트 공백 내 :</target>
        </trans-unit>
        <trans-unit id="aee37d92efbd59c9807c5afdfea157dc37c28287" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spaceless&lt;/code&gt; tag to remove whitespace &lt;em&gt;between HTML tags&lt;/em&gt;:</source>
          <target state="translated">사용 &lt;code&gt;spaceless&lt;/code&gt; 제거 공백에 태그를 &lt;em&gt;HTML 태그 사이&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="e8f08a60e60db6e1cafe0bdbfd15c1ffc4e4fcb3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;with&lt;/code&gt; tag to create a new inner scope. Variables set within this scope are not visible outside of the scope:</source>
          <target state="translated">를 사용 &lt;code&gt;with&lt;/code&gt; 새로운 내부 범위를 만드는 태그입니다. 이 범위 내에서 설정된 변수는 범위 외부에서 볼 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fa10774d0e271ce1daa32ba7d67741dff0dd4dd8" translate="yes" xml:space="preserve">
          <source>Using Extensions</source>
          <target state="translated">확장 사용</target>
        </trans-unit>
        <trans-unit id="9dfb73d7df2c7ae0665e6da00571e99a1aed9b42" translate="yes" xml:space="preserve">
          <source>Using Twig and AngularJS in the same Templates</source>
          <target state="translated">동일한 템플릿에서 Twig 및 AngularJS 사용</target>
        </trans-unit>
        <trans-unit id="5631369b3cafb1ab2618e4fce6b9bb17107628f4" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;pre&lt;/code&gt; tag is not needed when &lt;a href=&quot;https://xdebug.org/docs/display&quot;&gt;XDebug&lt;/a&gt; is enabled and &lt;code&gt;html_errors&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt;; as a bonus, the output is also nicer with XDebug enabled.</source>
          <target state="translated">사용 &lt;code&gt;pre&lt;/code&gt; 때 태그가 필요하지 않습니다 &lt;a href=&quot;https://xdebug.org/docs/display&quot;&gt;XDebug가이&lt;/a&gt; 활성화되고 &lt;code&gt;html_errors&lt;/code&gt; 가 이다 &lt;code&gt;on&lt;/code&gt; ; 보너스로 XDebug를 활성화하면 출력도 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6f6269cb50e92da95e085556f5a1f67078a12942" translate="yes" xml:space="preserve">
          <source>Using a Database to store Templates</source>
          <target state="translated">데이터베이스를 사용하여 템플릿 저장</target>
        </trans-unit>
        <trans-unit id="dae32036cadc9f0ad2ca66b6584488e32ca4021b" translate="yes" xml:space="preserve">
          <source>Using different Template Sources</source>
          <target state="translated">다른 템플릿 소스 사용</target>
        </trans-unit>
        <trans-unit id="0441c9c98c577243b761b5d5436cd31ae685d15a" translate="yes" xml:space="preserve">
          <source>Using double-quoted or single-quoted strings has no impact on performance but &lt;a href=&quot;#templates-string-interpolation&quot;&gt;string interpolation&lt;/a&gt; is only supported in double-quoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a83ead92315bfecdc76fd804841dde87b29f4d1" translate="yes" xml:space="preserve">
          <source>Using double-quoted or single-quoted strings has no impact on performance but string interpolation is only supported in double-quoted strings.</source>
          <target state="translated">큰 따옴표 또는 작은 따옴표로 묶인 문자열을 사용하더라도 성능에는 영향을 미치지 않지만 큰 따옴표로 묶인 문자열에서만 문자열 보간이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="339be1963c4861b48823da4f869f80c4e4f4716e" translate="yes" xml:space="preserve">
          <source>Using dynamic Object Properties</source>
          <target state="translated">동적 객체 속성 사용</target>
        </trans-unit>
        <trans-unit id="8b38f87881208fed16c581c24013b3d36ee3d1d9" translate="yes" xml:space="preserve">
          <source>Using named arguments makes your templates more explicit about the meaning of the values you pass as arguments:</source>
          <target state="translated">명명 된 인수를 사용하면 인수로 전달한 값의 의미에 대해 템플릿이보다 명확 해집니다.</target>
        </trans-unit>
        <trans-unit id="72aed553c5fd1b03524d3ec1a62a5994f4530d43" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;default&lt;/code&gt; filter on a boolean variable might trigger unexpected behavior, as &lt;code&gt;false&lt;/code&gt; is treated as an empty value. Consider using &lt;code&gt;??&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ed30ab73af00c4d2314335c5ab18cdc3421807" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;loop&lt;/code&gt; variable within the condition is not recommended as it will probably not be doing what you expect it to. For instance, adding a condition like &lt;code&gt;loop.index &amp;gt; 4&lt;/code&gt; won't work as the index is only incremented when the condition is true (so the condition will never match).</source>
          <target state="translated">조건 내 에서 &lt;code&gt;loop&lt;/code&gt; 변수를 사용 하면 예상 한대로 수행되지 않으므로 권장되지 않습니다. 예를 들어 조건이 true 일 때만 인덱스가 증가 &lt;code&gt;loop.index &amp;gt; 4&lt;/code&gt; 와 같은 조건을 추가하면 작동하지 않습니다 (조건이 일치하지 않음).</target>
        </trans-unit>
        <trans-unit id="813701b498ea9df393b5878a24b378d3c992a65f" translate="yes" xml:space="preserve">
          <source>Validating the Template Syntax</source>
          <target state="translated">템플릿 구문 확인</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="2893d9417f93894e75018f6819e871d5763d35a0" translate="yes" xml:space="preserve">
          <source>Value transformation</source>
          <target state="translated">가치 변환</target>
        </trans-unit>
        <trans-unit id="1df09f064e1cb457e364d04da1bba4eaf1883b1c" translate="yes" xml:space="preserve">
          <source>Values transformation</source>
          <target state="translated">값 변환</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="ee1f96ac809548e8406325e875bc67e8e0a29f8e" translate="yes" xml:space="preserve">
          <source>Variables can be modified by &lt;strong&gt;filters&lt;/strong&gt;. Filters are separated from the variable by a pipe symbol (&lt;code&gt;|&lt;/code&gt;) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</source>
          <target state="translated">변수는 &lt;strong&gt;필터&lt;/strong&gt; 로 수정할 수 있습니다 . 필터는 파이프 기호 ( &lt;code&gt;|&lt;/code&gt; )로 변수와 구분 되며 괄호 안에 선택적 인수가있을 수 있습니다. 여러 필터를 연결할 수 있습니다. 한 필터의 출력이 다음 필터에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="160650b69302dc93a5de39d73ddc38bc725d715a" translate="yes" xml:space="preserve">
          <source>Variables can be modified by &lt;strong&gt;filters&lt;/strong&gt;. Filters are separated from the variable by a pipe symbol (&lt;code&gt;|&lt;/code&gt;). Multiple filters can be chained. The output of one filter is applied to the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5477bb5a9c73aa709fca03cdf7969bda85eb31" translate="yes" xml:space="preserve">
          <source>Variadic Filters</source>
          <target state="translated">가변 필터</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="1a4d39da402271e2b553763e2e54f301da0b88aa" translate="yes" xml:space="preserve">
          <source>We have created a simple &lt;code&gt;templates&lt;/code&gt; table that hosts two templates: &lt;code&gt;base.twig&lt;/code&gt; and &lt;code&gt;index.twig&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;base.twig&lt;/code&gt; 및 &lt;code&gt;index.twig&lt;/code&gt; 의 두 가지 템플릿을 호스팅 하는 간단한 &lt;code&gt;templates&lt;/code&gt; 테이블을 만들었습니다 .</target>
        </trans-unit>
        <trans-unit id="e32a99de9bee1d7080008ee153ec38f9732e4218" translate="yes" xml:space="preserve">
          <source>Welcome to the documentation for Twig, the flexible, fast, and secure template engine for PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be65b9e347375f6ab4dbf58f66fa0a0b73735783" translate="yes" xml:space="preserve">
          <source>What?</source>
          <target state="translated">What?</target>
        </trans-unit>
        <trans-unit id="1e28bea7913ae56c97c990aeb29bb8fd5fc3e40b" translate="yes" xml:space="preserve">
          <source>When Twig encounters a variable like &lt;code&gt;article.title&lt;/code&gt;, it tries to find a &lt;code&gt;title&lt;/code&gt; public property in the &lt;code&gt;article&lt;/code&gt; object.</source>
          <target state="translated">Twig는 &lt;code&gt;article.title&lt;/code&gt; 과 같은 변수 를 발견 하면 &lt;code&gt;article&lt;/code&gt; 객체 에서 &lt;code&gt;title&lt;/code&gt; public 속성 을 찾으려고 시도 합니다.</target>
        </trans-unit>
        <trans-unit id="c185021af47e3a8eb1d7dae9ad44b34b63e28a42" translate="yes" xml:space="preserve">
          <source>When a filter is deprecated, Twig emits a deprecation notice when compiling a template using it. See &lt;a href=&quot;recipes#deprecation-notices&quot;&gt;Displaying Deprecation Notices&lt;/a&gt; for more information.</source>
          <target state="translated">필터가 더 이상 사용되지 않으면 Twig는이를 사용하여 템플릿을 컴파일 할 때 더 이상 사용되지 않음을 표시합니다. 자세한 내용은 &lt;a href=&quot;recipes#deprecation-notices&quot;&gt;사용 중단 알림 표시&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8040832347234e04d62fcf869ba270e0f73de843" translate="yes" xml:space="preserve">
          <source>When a filter should accept an arbitrary number of arguments, set the &lt;code&gt;is_variadic&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;; Twig will pass the extra arguments as the last argument to the filter call as an array:</source>
          <target state="translated">필터가 임의의 수의 인수를 허용해야하는 경우 &lt;code&gt;is_variadic&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 . Twig는 추가 인수를 필터 인수의 마지막 인수로 배열로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="b13bc67d3920b4e94b3daf093ac7d9a5d7f43449" translate="yes" xml:space="preserve">
          <source>When a function (or a filter) is not defined, Twig defaults to throw a &lt;code&gt;Twig_Error_Syntax&lt;/code&gt; exception. However, it can also call a &lt;a href=&quot;https://secure.php.net/manual/en/function.is-callable.php&quot;&gt;callback&lt;/a&gt; (any valid PHP callable) which should return a function (or a filter).</source>
          <target state="translated">함수 (또는 필터)가 정의되지 않은 경우 Twig는 기본적으로 &lt;code&gt;Twig_Error_Syntax&lt;/code&gt; 예외를 발생시킵니다. 그러나 함수 (또는 필터)를 반환해야하는 &lt;a href=&quot;https://secure.php.net/manual/en/function.is-callable.php&quot;&gt;콜백&lt;/a&gt; (유효한 PHP 호출 가능)을 호출 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05820cc3aba98cd4e746a094db4cd6dc9556ccb7" translate="yes" xml:space="preserve">
          <source>When a function (or a filter) is not defined, Twig defaults to throw a &lt;code&gt;\Twig\Error\SyntaxError&lt;/code&gt; exception. However, it can also call a &lt;a href=&quot;https://secure.php.net/manual/en/function.is-callable.php&quot;&gt;callback&lt;/a&gt; (any valid PHP callable) which should return a function (or a filter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876bdba9df3ee981a36134302ecbe5fa45aa05cf" translate="yes" xml:space="preserve">
          <source>When a template uses inheritance and if you want to print a block multiple times, use the &lt;code&gt;block&lt;/code&gt; function:</source>
          <target state="translated">템플릿이 상속을 사용하고 블록을 여러 번 인쇄하려면 &lt;code&gt;block&lt;/code&gt; 기능을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f291c4ad44f610ded014feddff4ca61f02d15330" translate="yes" xml:space="preserve">
          <source>When a template uses inheritance, it&amp;rsquo;s possible to render the contents of the parent block when overriding a block by using the &lt;code&gt;parent&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b5c9cf1582b0f15177236c2060bd6f1bdb1d56" translate="yes" xml:space="preserve">
          <source>When a template uses inheritance, it's possible to render the contents of the parent block when overriding a block by using the &lt;code&gt;parent&lt;/code&gt; function:</source>
          <target state="translated">템플릿이 상속을 사용하는 경우 &lt;code&gt;parent&lt;/code&gt; 함수 를 사용하여 블록을 재정의 할 때 부모 블록의 내용을 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="213fd294c634b58e4fcb5c928941722e4fd7274c" translate="yes" xml:space="preserve">
          <source>When attaching a visitor to a &lt;code&gt;Twig_Environment&lt;/code&gt; instance, Twig uses it to visit &lt;em&gt;all&lt;/em&gt; templates it compiles. If you need to keep some state information around, you probably want to reset it when visiting a new template.</source>
          <target state="translated">&lt;code&gt;Twig_Environment&lt;/code&gt; 인스턴스에 방문자를 연결할 때 Twig는이를 사용 하여 컴파일하는 &lt;em&gt;모든&lt;/em&gt; 템플릿 을 방문 합니다. 일부 상태 정보를 유지해야하는 경우 새 템플릿을 방문 할 때 해당 상태 정보를 재설정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fad47e5e933eec6bcafaadbdbb030167193a2a9" translate="yes" xml:space="preserve">
          <source>When attaching a visitor to a &lt;code&gt;\Twig\Environment&lt;/code&gt; instance, Twig uses it to visit &lt;em&gt;all&lt;/em&gt; templates it compiles. If you need to keep some state information around, you probably want to reset it when visiting a new template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03a1b18f5d4e91cb8389dc0f980f77e2d76915d" translate="yes" xml:space="preserve">
          <source>When automatic escaping is enabled everything is escaped by default except for values explicitly marked as safe. Those can be marked in the template by using the &lt;a href=&quot;../filters/raw&quot;&gt;raw&lt;/a&gt; filter:</source>
          <target state="translated">자동 이스케이프가 활성화되면 명시 적으로 안전한 것으로 표시된 값을 제외하고 모든 것이 기본적으로 이스케이프됩니다. &lt;a href=&quot;../filters/raw&quot;&gt;원시&lt;/a&gt; 필터 를 사용하여 템플릿에 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a14c3207406c248c355b713cfe404d6f1c24cbe6" translate="yes" xml:space="preserve">
          <source>When called by Twig, the PHP callable receives the left side of the filter (before the pipe &lt;code&gt;|&lt;/code&gt;) as the first argument and the extra arguments passed to the filter (within parentheses &lt;code&gt;()&lt;/code&gt;) as extra arguments.</source>
          <target state="translated">Twig에 의해 호출되면, PHP 호출 가능 은 첫 번째 인수로 필터의 왼쪽 (파이프 &lt;code&gt;|&lt;/code&gt; )을 받고 추가 인수는 괄호 &lt;code&gt;()&lt;/code&gt; 안에 필터에 전달 된 추가 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="6338a9bbc3e89df3ba162fe30f6271d7034b68fc" translate="yes" xml:space="preserve">
          <source>When called by Twig, the callable receives the Twig environment instance, the string to escape, and the charset.</source>
          <target state="translated">Twig에 의해 호출되면, 호출 가능 객체는 Twig 환경 인스턴스, 이스케이프 할 문자열 및 문자셋을받습니다.</target>
        </trans-unit>
        <trans-unit id="bcbb60a30372718ca8a0dd7295b6478ae6d43b57" translate="yes" xml:space="preserve">
          <source>When called with a mapping, max ignores keys and only compares values:</source>
          <target state="translated">맵핑과 함께 호출되면 max는 키를 무시하고 값만 비교합니다.</target>
        </trans-unit>
        <trans-unit id="7b295ae779f6c765908c9cf2cd92a106fd786381" translate="yes" xml:space="preserve">
          <source>When called with a mapping, min ignores keys and only compares values:</source>
          <target state="translated">매핑으로 호출하면 min은 키를 무시하고 값만 비교합니다.</target>
        </trans-unit>
        <trans-unit id="e83916e652bcf4cf1cb14ba0e3b995c88c9f57f4" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;from&lt;/code&gt; from a &lt;code&gt;block&lt;/code&gt; tag, the imported macros are only defined in the current block and they override macros defined at the template level with the same names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00050245100bd5db64626168b4e292aa771ccb7e" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;from&lt;/code&gt; from a &lt;code&gt;macro&lt;/code&gt; tag, the imported macros are only defined in the current macro and they override macros defined at the template level with the same names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4430627788e9d9f3c682651983553fd65806d196" translate="yes" xml:space="preserve">
          <source>When creating a new &lt;code&gt;Twig_Environment&lt;/code&gt; instance, you can pass an array of options as the constructor second argument:</source>
          <target state="translated">새 &lt;code&gt;Twig_Environment&lt;/code&gt; 인스턴스를 만들 때 생성자 두 번째 인수로 옵션 배열을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f12ed9dc408b7f54229032607cbb9e252b50def4" translate="yes" xml:space="preserve">
          <source>When creating a new &lt;code&gt;\Twig\Environment&lt;/code&gt; instance, you can pass an array of options as the constructor second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bc5f7d8c1bc1e711e264e69548c9fc6527c3d3" translate="yes" xml:space="preserve">
          <source>When creating tests you can use the &lt;code&gt;node_class&lt;/code&gt; option to provide custom test compilation. This is useful if your test can be compiled into PHP primitives. This is used by many of the tests built into Twig:</source>
          <target state="translated">테스트를 작성할 때 &lt;code&gt;node_class&lt;/code&gt; 옵션을 사용하여 사용자 정의 테스트 컴파일을 제공 할 수 있습니다 . 테스트를 PHP 프리미티브로 컴파일 할 수있는 경우에 유용합니다. 이것은 Twig에 내장 된 많은 테스트에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f6d6dea0cfb3c10a74028151fd62af41ba99725e" translate="yes" xml:space="preserve">
          <source>When creating the escaper extension, you can switch on or off the global output escaping strategy:</source>
          <target state="translated">이스케이프 확장을 작성할 때 글로벌 출력 이스케이프 전략을 켜거나 끌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85f84c5d2385bb8e4dbfbb2f0eb4c9b80c6de580" translate="yes" xml:space="preserve">
          <source>When developing with Twig, it&amp;rsquo;s useful to recompile the template whenever the source code changes. If you don&amp;rsquo;t provide a value for the &lt;code&gt;auto_reload&lt;/code&gt; option, it will be determined automatically based on the &lt;code&gt;debug&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90742c29d3efa52a9e898846e168bd362bed25f" translate="yes" xml:space="preserve">
          <source>When developing with Twig, it's useful to recompile the template whenever the source code changes. If you don't provide a value for the &lt;code&gt;auto_reload&lt;/code&gt; option, it will be determined automatically based on the &lt;code&gt;debug&lt;/code&gt; value.</source>
          <target state="translated">Twig로 개발할 때 소스 코드가 변경 될 때마다 템플릿을 다시 컴파일하는 것이 좋습니다. &lt;code&gt;auto_reload&lt;/code&gt; 옵션에 값을 제공하지 않으면 &lt;code&gt;debug&lt;/code&gt; 값 에 따라 자동으로 결정됩니다 .</target>
        </trans-unit>
        <trans-unit id="c913932cf48f96cf4f0baf48e5d585652425a644" translate="yes" xml:space="preserve">
          <source>When extending Twig without creating an extension, Twig won&amp;rsquo;t be able to recompile your templates when the PHP code is updated. To see your changes in real-time, either disable template caching or package your code into an extension (see the next section of this chapter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1016ce95a3964b38f34407da6de6c0b83d4513b1" translate="yes" xml:space="preserve">
          <source>When extending Twig without creating an extension, Twig won't be able to recompile your templates when the PHP code is updated. To see your changes in real-time, either disable template caching or package your code into an extension (see the next section of this chapter).</source>
          <target state="translated">확장을 만들지 않고 Twig를 확장하면 PHP 코드가 업데이트 될 때 Twig에서 템플릿을 다시 컴파일 할 수 없습니다. 실시간으로 변경 사항을 보려면 템플릿 캐싱을 비활성화하거나 코드를 확장으로 패키지하십시오 (이 장의 다음 섹션 참조).</target>
        </trans-unit>
        <trans-unit id="c4871e77e0bb31423b46de7da34857a63c01200a" translate="yes" xml:space="preserve">
          <source>When generating HTML from templates, there&amp;rsquo;s always a risk that a variable will include characters that affect the resulting HTML. There are two approaches: manually escaping each variable or automatically escaping everything by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfbf84506b26665c4b871cdaa357986fdfc6dd7" translate="yes" xml:space="preserve">
          <source>When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. There are two approaches: manually escaping each variable or automatically escaping everything by default.</source>
          <target state="translated">템플릿에서 HTML을 생성 할 때 변수에 결과 HTML에 영향을주는 문자가 포함될 위험이 항상 있습니다. 각 변수를 수동으로 이스케이프 처리하거나 기본적으로 모든 것을 자동으로 이스케이프 처리하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb5f62e4c7f9faafc22ee2d0642bf5307757b8b" translate="yes" xml:space="preserve">
          <source>When including a template created by an end user, you should consider sandboxing it. More information in the &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; chapter and in the &lt;a href=&quot;sandbox&quot;&gt;sandbox&lt;/a&gt; tag documentation.</source>
          <target state="translated">최종 사용자가 만든 템플릿을 포함 할 때는 샌드 박싱을 고려해야합니다. 자세한 내용은 &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; 장 및 &lt;a href=&quot;sandbox&quot;&gt;샌드 박스&lt;/a&gt; 태그 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46cf04daa0cc353312a64e7dea74a7bef6eee37a" translate="yes" xml:space="preserve">
          <source>When including a template created by an end user, you should consider sandboxing it:</source>
          <target state="translated">최종 사용자가 만든 템플릿을 포함 할 때 샌드 박싱을 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="569b9643621919d6a183cf57134ad1c0526c1b1b" translate="yes" xml:space="preserve">
          <source>When including a template, its name does not need to be a string. For instance, the name can depend on the value of a variable:</source>
          <target state="translated">템플릿을 포함 할 때 이름은 문자열 일 필요는 없습니다. 예를 들어, 이름은 변수 값에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="214e491cc7434bce9d841d5e659cfcf5891f2de3" translate="yes" xml:space="preserve">
          <source>When looking for a template, Twig tries each loader in turn and returns as soon as the template is found. When rendering the &lt;code&gt;index.html&lt;/code&gt; template from the above example, Twig will load it with &lt;code&gt;$loader2&lt;/code&gt; but the &lt;code&gt;base.html&lt;/code&gt; template will be loaded from &lt;code&gt;$loader1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e08145c5206f662564c94379550125799c600c" translate="yes" xml:space="preserve">
          <source>When looking for a template, Twig will try each loader in turn and it will return as soon as the template is found. When rendering the &lt;code&gt;index.html&lt;/code&gt; template from the above example, Twig will load it with &lt;code&gt;$loader2&lt;/code&gt; but the &lt;code&gt;base.html&lt;/code&gt; template will be loaded from &lt;code&gt;$loader1&lt;/code&gt;.</source>
          <target state="translated">템플릿을 찾을 때 Twig는 각 로더를 차례로 시도하고 템플릿을 찾 자마자 반환합니다. 위 예제에서 &lt;code&gt;index.html&lt;/code&gt; 템플릿을 렌더링 할 때 Twig는 &lt;code&gt;$loader2&lt;/code&gt; 와 함께로드 하지만 &lt;code&gt;base.html&lt;/code&gt; 템플릿은 &lt;code&gt;$loader1&lt;/code&gt; 에서로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="4783968e5e6f0d9701f69822a9cff3a9381fc645" translate="yes" xml:space="preserve">
          <source>When macro usages and definitions are in the same template, you don&amp;rsquo;t need to import the macros as they are automatically available under the special &lt;code&gt;_self&lt;/code&gt; variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5150536dee0facc6bda84f4f472762d42c4115" translate="yes" xml:space="preserve">
          <source>When not passing the root path as a second argument, Twig uses &lt;code&gt;getcwd()&lt;/code&gt; for relative paths.</source>
          <target state="translated">루트 경로를 두 번째 인수로 전달하지 않으면 Twig는 상대 경로에 &lt;code&gt;getcwd()&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="aad3d86408a5fe77b7cc931344047db39ee94048" translate="yes" xml:space="preserve">
          <source>When packaging your code into an extension, Twig is smart enough to recompile your templates whenever you make a change to it (when &lt;code&gt;auto_reload&lt;/code&gt; is enabled).</source>
          <target state="translated">코드를 확장으로 패키징 할 때 Twig는 템플릿을 변경할 때마다 ( &lt;code&gt;auto_reload&lt;/code&gt; 가 활성화 된 경우) 템플릿을 다시 컴파일 할 수있을 정도로 똑똑합니다 .</target>
        </trans-unit>
        <trans-unit id="344b231c232ff20731604fe0107747d40a2ce459" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, the generated templates have a &lt;code&gt;__toString()&lt;/code&gt; method that you can use to display the generated nodes (default to &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정되면 생성 된 템플리트에는 생성 된 노드를 표시하는 데 사용할 수 있는 &lt;code&gt;__toString()&lt;/code&gt; 메소드가 있습니다 (기본값은 &lt;code&gt;false&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d094b4172baac13f4f02bb1a99aff27c14668624" translate="yes" xml:space="preserve">
          <source>When step is given (as the third parameter), it specifies the increment (or decrement for negative values):</source>
          <target state="translated">단계가 주어지면 (세번째 매개 변수로) 증분 (또는 음수 값의 감소)을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="c4f30798a0ce3f97baa06aafbcb63621a5d4dd63" translate="yes" xml:space="preserve">
          <source>When template code is provided by a third-party (through a web interface for instance), it might be interesting to validate the template syntax before saving it. If the template code is stored in a</source>
          <target state="translated">타사에서 템플릿 코드를 제공하는 경우 (예 : 웹 인터페이스를 통해) 템플릿 구문을 저장하기 전에 유효성을 검사하는 것이 흥미로울 수 있습니다. 템플릿 코드가</target>
        </trans-unit>
        <trans-unit id="e17273d04ce8d0b5d66b81722bdaf7e6ad6e1e3a" translate="yes" xml:space="preserve">
          <source>When template code is provided by a third-party (through a web interface for instance), it might be interesting to validate the template syntax before saving it. If the template code is stored in a &lt;code&gt;$template&lt;/code&gt; variable, here is how you can do it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e42e707e0e0568b95fd864d8efc7fa0982d436" translate="yes" xml:space="preserve">
          <source>When the attribute contains special characters (like &lt;code&gt;-&lt;/code&gt; that would be interpreted as the minus operator), use the &lt;code&gt;attribute&lt;/code&gt; function instead to access the variable attribute:</source>
          <target state="translated">속성에 특수 문자가 포함 된 경우 (같은 &lt;code&gt;-&lt;/code&gt; 즉 마이너스 연산자로 해석됩니다), 사용 &lt;code&gt;attribute&lt;/code&gt; 대신 액세스 변수의 속성 기능 :</target>
        </trans-unit>
        <trans-unit id="d7de9253c392095c50442fe669505af044745e25" translate="yes" xml:space="preserve">
          <source>When using OPcache with &lt;code&gt;opcache.validate_timestamps&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; or APC with &lt;code&gt;apc.stat&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; and Twig cache enabled, clearing the template cache won&amp;rsquo;t update the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0813e5c10c5f1c009971ad784eda73a785b69db1" translate="yes" xml:space="preserve">
          <source>When using OPcache with &lt;code&gt;opcache.validate_timestamps&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; or APC with &lt;code&gt;apc.stat&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; and Twig cache enabled, clearing the template cache won't update the cache.</source>
          <target state="translated">와 OPcache 사용하는 경우 &lt;code&gt;opcache.validate_timestamps&lt;/code&gt; 로 설정 &lt;code&gt;0&lt;/code&gt; 또는 APC &lt;code&gt;apc.stat&lt;/code&gt; 로 설정 &lt;code&gt;0&lt;/code&gt; 과 나뭇 가지 캐시하면 캐시를 업데이트하지 않습니다 템플릿 캐시를 삭제, 활성화.</target>
        </trans-unit>
        <trans-unit id="752ab74beaab9317cd15548434043fa98c9d2e1d" translate="yes" xml:space="preserve">
          <source>When using a variable as the escaping strategy, you should disable automatic escaping:</source>
          <target state="translated">이스케이프 전략으로 변수를 사용하는 경우 자동 이스케이프를 비활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="2708246fbc077f8eb2388f50aa89636c00df5471" translate="yes" xml:space="preserve">
          <source>When using automatic escaping, Twig tries to not double-escape a variable when the automatic escaping strategy is the same as the one applied by the escape filter; but that does not work when using a variable as the escaping strategy:</source>
          <target state="translated">자동 이스케이프를 사용할 때 Twig는 자동 이스케이프 전략이 이스케이프 필터에 의해 적용된 전략과 동일 할 때 변수를 이중 이스케이프하지 않습니다. 그러나 탈출 전략으로 변수를 사용할 때는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0ac34962d9f0ad38b6ebdc99a6b1e9c63868a759" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;Array&lt;/code&gt; loader with a cache mechanism, you should know that a new cache key is generated each time a template content &quot;changes&quot; (the cache key being the source code of the template). If you don't want to see your cache grows out of control, you need to take care of clearing the old cache file by yourself.</source>
          <target state="translated">캐시 메커니즘과 함께 &lt;code&gt;Array&lt;/code&gt; 로더를 사용하는 경우 템플리트 컨텐츠가 &quot;변경 될 때마다 (캐시 키가 템플리트의 소스 코드 임) 새 캐시 키가 생성된다는 것을 알아야합니다. 캐시가 제어되지 않는 것을보고 싶지 않다면 이전 캐시 파일을 직접 지워야합니다.</target>
        </trans-unit>
        <trans-unit id="6f7aff27a122e26d1afc754b09c7c81de17dbcd2" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;Array&lt;/code&gt; loader with a cache mechanism, you should know that a new cache key is generated each time a template content &amp;ldquo;changes&amp;rdquo; (the cache key being the source code of the template). If you don&amp;rsquo;t want to see your cache grows out of control, you need to take care of clearing the old cache file by yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda849c54f0b38bf7080d01a2fdfab411f3e7a09" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;default&lt;/code&gt; filter on an expression that uses variables in some method calls, be sure to use the &lt;code&gt;default&lt;/code&gt; filter whenever a variable can be undefined:</source>
          <target state="translated">사용하는 경우 &lt;code&gt;default&lt;/code&gt; 식에 필터를 일부 메소드 호출에 사용하는 변수는 사용해야하는 것이 &lt;code&gt;default&lt;/code&gt; 변수가 정의 할 수 있습니다 때마다 필터를 :</target>
        </trans-unit>
        <trans-unit id="19fa26972d88f178e441a8de21417fc9ac8adc94" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;defined&lt;/code&gt; test on an expression that uses variables in some method calls, be sure that they are all defined first:</source>
          <target state="translated">일부 메소드 호출에서 변수를 사용하는 표현식 에서 &lt;code&gt;defined&lt;/code&gt; 테스트를 사용하는 경우 모두 먼저 정의되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3fa5d75856aefd54283671f167f3e9b8d722a578" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;setPaths()&lt;/code&gt;, &lt;code&gt;addPath()&lt;/code&gt;, and &lt;code&gt;prependPath()&lt;/code&gt; methods, specify the namespace as the second argument (when not specified, these methods act on the &quot;main&quot; namespace):</source>
          <target state="translated">사용하는 경우 &lt;code&gt;setPaths()&lt;/code&gt; , &lt;code&gt;addPath()&lt;/code&gt; , 및 &lt;code&gt;prependPath()&lt;/code&gt; 메서드를, 두 번째 인수로 네임 스페이스를 (지정되지 않은 경우,이 방법은 &quot;기본&quot;네임 스페이스에 따라 행동)을 지정합니다 :</target>
        </trans-unit>
        <trans-unit id="0fb799b6ab2d2fed0cd4b41761e0de31565c1bda" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;setPaths()&lt;/code&gt;, &lt;code&gt;addPath()&lt;/code&gt;, and &lt;code&gt;prependPath()&lt;/code&gt; methods, specify the namespace as the second argument (when not specified, these methods act on the &amp;ldquo;main&amp;rdquo; namespace):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5351bfd037ab168b88a735d12ed5587d5b219c" translate="yes" xml:space="preserve">
          <source>When using the whitespace control character, do not put any spaces between it and the delimiter:</source>
          <target state="translated">공백 제어 문자를 사용하는 경우 공백 문자와 구분 기호 사이에 공백을 두지 마십시오.</target>
        </trans-unit>
        <trans-unit id="c60b7ed3fc6247cac50401e3fd4744947d88ad6b" translate="yes" xml:space="preserve">
          <source>When writing Twig templates, we recommend you to follow these official coding standards:</source>
          <target state="translated">Twig 템플릿을 작성할 때는 다음과 같은 공식 코딩 표준을 따르는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="973964216de0a31861f2d1c1d3895c5ff82b3519" translate="yes" xml:space="preserve">
          <source>When you set the &lt;code&gt;ignore_missing&lt;/code&gt; flag, Twig will return an empty string if the template does not exist:</source>
          <target state="translated">&lt;code&gt;ignore_missing&lt;/code&gt; 플래그 를 설정하면 템플릿이 없으면 Twig에서 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e88cdb1d85d8ae245d732495a6b5c645b610b3dc" translate="yes" xml:space="preserve">
          <source>When you want to use a macro in another macro from the same file, you need to import it locally:</source>
          <target state="translated">동일한 파일의 다른 매크로에서 매크로를 사용하려면 로컬로 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="b2028cfcc78f7fd44821aacab16481a32f1dfc70" translate="yes" xml:space="preserve">
          <source>When?</source>
          <target state="translated">When?</target>
        </trans-unit>
        <trans-unit id="8dd37894d1b63b621628f1a41fd39383129c1435" translate="yes" xml:space="preserve">
          <source>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the &lt;a href=&quot;tags/autoescape&quot;&gt;autoescape&lt;/a&gt; tag:</source>
          <target state="translated">자동 이스케이프 사용 여부에 관계없이 &lt;a href=&quot;tags/autoescape&quot;&gt;autoescape&lt;/a&gt; 태그 를 사용하여 템플릿의 섹션이 이스케이프되도록 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="07f5308cc3a8a56183bb8085f502d4928e9d6aa7" translate="yes" xml:space="preserve">
          <source>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the &lt;code&gt;autoescape&lt;/code&gt; tag:</source>
          <target state="translated">자동 이스케이프 사용 여부에 관계없이 &lt;code&gt;autoescape&lt;/code&gt; 태그 를 사용하여 템플릿의 섹션이 이스케이프되도록 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5dd3fc91fe8f6c82594a680c7bccd3efc08235e6" translate="yes" xml:space="preserve">
          <source>While other pages (&quot;boom&quot; and &quot;baz&quot;) share a different content structure - two boxes side by side:</source>
          <target state="translated">다른 페이지 ( &quot;boom&quot;및 &quot;baz&quot;)는 서로 다른 콘텐츠 구조를 공유하지만 두 상자는 나란히 있습니다.</target>
        </trans-unit>
        <trans-unit id="05db1be9b935313891ad6432e0f55984efe204c9" translate="yes" xml:space="preserve">
          <source>While other pages (&amp;ldquo;boom&amp;rdquo; and &amp;ldquo;baz&amp;rdquo;) share a different content structure - two boxes side by side:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="translated">공백 제어</target>
        </trans-unit>
        <trans-unit id="ecf33dfffe1d472b018bba2411263f34cfaf0df9" translate="yes" xml:space="preserve">
          <source>Will be rendered &quot;&amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt; &lt;strong&gt;world&lt;/strong&gt;&quot;.</source>
          <target state="translated">&quot;&amp;lt;strong&amp;gt; Hello &amp;lt;/ strong&amp;gt; &lt;strong&gt;세계&lt;/strong&gt; &quot; 로 렌더링됩니다 .</target>
        </trans-unit>
        <trans-unit id="433cc9d44eaaf82401c06c689824aa1c7b8a3dfa" translate="yes" xml:space="preserve">
          <source>Will be rendered &amp;ldquo;&amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt; &lt;strong&gt;world&lt;/strong&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0aa810573f73fcb5f1bd47880002f3d77512ca9" translate="yes" xml:space="preserve">
          <source>With such a configuration, Twig will first look for templates in &lt;code&gt;$templateDir1&lt;/code&gt; and if they do not exist, it will fallback to look for them in the &lt;code&gt;$templateDir2&lt;/code&gt;.</source>
          <target state="translated">이러한 구성으로, 나뭇 가지 먼저 템플릿을 찾을 것이다 &lt;code&gt;$templateDir1&lt;/code&gt; 그들이 존재하지 않는 경우, 그것은 그들을 찾기 위해 폴백합니다 &lt;code&gt;$templateDir2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="183f1a5810276b796abfb434f208acb31cb83dc4" translate="yes" xml:space="preserve">
          <source>With the previous configuration, the security policy will only allow usage of the &lt;code&gt;if&lt;/code&gt; tag, and the &lt;code&gt;upper&lt;/code&gt; filter. Moreover, the templates will only be able to call the &lt;code&gt;getTitle()&lt;/code&gt; and &lt;code&gt;getBody()&lt;/code&gt; methods on &lt;code&gt;Article&lt;/code&gt; objects, and the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; public properties. Everything else won&amp;rsquo;t be allowed and will generate a &lt;code&gt;\Twig\Sandbox\SecurityError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a261091bc12477bdf201132db7e19681961115" translate="yes" xml:space="preserve">
          <source>With the previous configuration, the security policy will only allow usage of the &lt;code&gt;if&lt;/code&gt; tag, and the &lt;code&gt;upper&lt;/code&gt; filter. Moreover, the templates will only be able to call the &lt;code&gt;getTitle()&lt;/code&gt; and &lt;code&gt;getBody()&lt;/code&gt; methods on &lt;code&gt;Article&lt;/code&gt; objects, and the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; public properties. Everything else won't be allowed and will generate a &lt;code&gt;Twig_Sandbox_SecurityError&lt;/code&gt; exception.</source>
          <target state="translated">이전 구성에서 보안 정책은 &lt;code&gt;if&lt;/code&gt; 태그 및 &lt;code&gt;upper&lt;/code&gt; 필터의 사용 만 허용합니다 . 또한 템플릿은 &lt;code&gt;Article&lt;/code&gt; 개체 의 &lt;code&gt;getTitle()&lt;/code&gt; 및 &lt;code&gt;getBody()&lt;/code&gt; 메서드 와 &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;body&lt;/code&gt; 공용 속성 만 호출 할 수 있습니다. 다른 모든 것은 허용되지 않으며 &lt;code&gt;Twig_Sandbox_SecurityError&lt;/code&gt; 예외를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="8e3006cae4f5c258364302cbb40c3749f1e0b048" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;embed&lt;/code&gt; tag, you have two ways to design your templates:</source>
          <target state="translated">&lt;code&gt;embed&lt;/code&gt; 태그가 없으면 템플릿을 디자인하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc84de10a09d95ec9c9220b502b9d9fb9bbf0755" translate="yes" xml:space="preserve">
          <source>Working with Ajax means that the same content is sometimes displayed as is, and sometimes decorated with a layout. As Twig layout template names can be any valid expression, you can pass a variable that evaluates to &lt;code&gt;true&lt;/code&gt; when the request is made via Ajax and choose the layout accordingly:</source>
          <target state="translated">Ajax로 작업한다는 것은 동일한 컨텐츠가 때때로 그대로 표시되고 때로는 레이아웃으로 장식되어 있음을 의미합니다. Twig 레이아웃 템플릿 이름은 유효한 표현식이 될 수 있으므로 Ajax를 통해 요청이 이루어질 때 &lt;code&gt;true&lt;/code&gt; 로 평가되는 변수를 전달하고 그에 따라 레이아웃을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da90ccd243d299c65a2697d5ea61cdc25d4bcb15" translate="yes" xml:space="preserve">
          <source>Working with Automatic Escaping</source>
          <target state="translated">자동 이스케이프 작업</target>
        </trans-unit>
        <trans-unit id="426206ad1379d0ba97fdb478fba1088b1e8604e3" translate="yes" xml:space="preserve">
          <source>Working with Manual Escaping</source>
          <target state="translated">수동 이스케이프 작업</target>
        </trans-unit>
        <trans-unit id="1b7805563350b95944d8bbf569bfbddef299cbd1" translate="yes" xml:space="preserve">
          <source>Wrapping a text to a given number of characters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2e3ecce537f9ffac3ab9d0847565705767efd0" translate="yes" xml:space="preserve">
          <source>You can add additional variables by passing them after the &lt;code&gt;with&lt;/code&gt; keyword:</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 키워드 다음에 변수를 전달하여 추가 변수를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29021213a03eb7bb62b7f93809ab6447fa4d6382" translate="yes" xml:space="preserve">
          <source>You can add or prepend paths via the &lt;code&gt;addPath()&lt;/code&gt; and &lt;code&gt;prependPath()&lt;/code&gt; methods:</source>
          <target state="translated">&lt;code&gt;addPath()&lt;/code&gt; 및 &lt;code&gt;prependPath()&lt;/code&gt; 메소드 를 통해 경로를 추가하거나 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d9d64a7c06c89a8728c28dd460685680a194b49" translate="yes" xml:space="preserve">
          <source>You can also access both keys and values:</source>
          <target state="translated">키와 값 모두에 액세스 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="744055768ba741d0f8a97bc63a4a46519ce07159" translate="yes" xml:space="preserve">
          <source>You can also add loaders via the &lt;code&gt;addLoader()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;addLoader()&lt;/code&gt; 메소드 를 통해 로더를 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4df95231d583cf64eb401087a78532c3dd146017" translate="yes" xml:space="preserve">
          <source>You can also add some stylesheets by passing them as arguments to the filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991fdc2761e1416e3f5f2b539227ec2046dac22f" translate="yes" xml:space="preserve">
          <source>You can also chain filters and pass arguments to them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c85ef3103f54de82aefc407306b88b27d64421" translate="yes" xml:space="preserve">
          <source>You can also chain filters:</source>
          <target state="translated">필터를 체인으로 연결할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="26168adc4ca27c8e2017fb5862f500c0a9dea5f8" translate="yes" xml:space="preserve">
          <source>You can also chain methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed5b7fff1c4ad3d3c0eb865290606e141f9530c" translate="yes" xml:space="preserve">
          <source>You can also change the escaping mode locally by using the &lt;code&gt;autoescape&lt;/code&gt; tag:</source>
          <target state="translated">&lt;code&gt;autoescape&lt;/code&gt; 태그 를 사용하여 이스케이프 모드를 로컬로 변경할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4232664a77febfd864fec44f04a15aa06b2a807" translate="yes" xml:space="preserve">
          <source>You can also check if a string &lt;code&gt;starts with&lt;/code&gt; or &lt;code&gt;ends with&lt;/code&gt; another string:</source>
          <target state="translated">문자열 &lt;code&gt;starts with&lt;/code&gt; 다른 문자열로 시작 하거나 다른 문자열로 &lt;code&gt;ends with&lt;/code&gt; 확인할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5e4b841248df8631f3e0c1c72b7b8edccf9d7c95" translate="yes" xml:space="preserve">
          <source>You can also control whitespace on a per tag level. By using the whitespace control modifiers on your tags, you can trim leading and or trailing whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d655e1c5d2f4233dfb72114871900c8aabc9ee81" translate="yes" xml:space="preserve">
          <source>You can also dump the data in a &lt;a href=&quot;https://blackfire.io/&quot;&gt;Blackfire.io&lt;/a&gt; compatible format:</source>
          <target state="translated">&lt;a href=&quot;https://blackfire.io/&quot;&gt;Blackfire.io&lt;/a&gt; 호환 형식으로 데이터를 덤프 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91dbc986860d74942d4f200cc3e13bbed5036746" translate="yes" xml:space="preserve">
          <source>You can also load and render the template in one fell swoop:</source>
          <target state="translated">한 번의 실패로 템플릿을로드하고 렌더링 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb4878faacdeb475115989a82d7c77566af2c847" translate="yes" xml:space="preserve">
          <source>You can also pass a &lt;code&gt;limit&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; 인수를 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ee755ffe35e5f2617bcf948aefa36fab832cabd0" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be included:</source>
          <target state="translated">포함 전에 존재 여부를 확인하는 템플릿 목록을 제공 할 수도 있습니다. 존재하는 첫 번째 템플릿이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d2c4cdc8f33df1ab318ca9558b9b27fd01226dc7" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be rendered:</source>
          <target state="translated">포함 전에 존재 여부를 확인하는 템플릿 목록을 제공 할 수도 있습니다. 존재하는 첫 번째 템플릿이 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="5594aabe2a908b695a983e99b8999ad83d83d844" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence. The first template that exists will be used as a parent:</source>
          <target state="translated">존재 여부가 확인 된 템플릿 목록을 제공 할 수도 있습니다. 존재하는 첫 번째 템플릿은 부모로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6898ebf6346a2760e9226b31f9760ceddba6c4ea" translate="yes" xml:space="preserve">
          <source>You can also provide tags which should not be stripped:</source>
          <target state="translated">벗겨서는 안되는 태그를 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9bc30c9614c2a625e757dc33f34a40ae71ec0bc" translate="yes" xml:space="preserve">
          <source>You can also test if an array is not empty:</source>
          <target state="translated">배열이 비어 있지 않은지 테스트 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f777e8afcd333f96ea24faa3b8a9bfa41f9681c" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;not&lt;/code&gt; to check for values that evaluate to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 평가되는 값을 확인 &lt;code&gt;not&lt;/code&gt; 데 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bddf06289de4e2d3aa497bb7248d5a7adaed995c" translate="yes" xml:space="preserve">
          <source>You can also use both positional and named arguments in one call, in which case positional arguments must always come before named arguments:</source>
          <target state="translated">한 번의 호출에서 위치 인수와 명명 된 인수를 모두 사용할 수 있습니다.이 경우 위치 인수는 항상 명명 된 인수 앞에 와야합니다.</target>
        </trans-unit>
        <trans-unit id="fecc43715e0bcbd03147933235a8d4ecc55736db" translate="yes" xml:space="preserve">
          <source>You can also use the filter on an entire template which you &lt;code&gt;include&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d0694ddae8ec8a4ce21885e13b75cb032ba4ce" translate="yes" xml:space="preserve">
          <source>You can also use the filter on an included file or a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc988216dfc842a88aba04d594b841eadcb25f5" translate="yes" xml:space="preserve">
          <source>You can also use the filter on an included file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08289bc84bb98b8c8cc12e888425eba0c86fc9e8" translate="yes" xml:space="preserve">
          <source>You can assign values to variables inside code blocks. Assignments use the &lt;a href=&quot;tags/set&quot;&gt;set&lt;/a&gt; tag:</source>
          <target state="translated">코드 블록 내의 변수에 값을 할당 할 수 있습니다. 과제는 &lt;a href=&quot;tags/set&quot;&gt;set&lt;/a&gt; 태그를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="baaacded40ba2f14df2d4a9b319343cdcabaa1a5" translate="yes" xml:space="preserve">
          <source>You can check if a macro is defined via the &lt;code&gt;defined&lt;/code&gt; test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c215e6ecff07f3201ff2121f05cb3e9ff339627" translate="yes" xml:space="preserve">
          <source>You can combine &lt;code&gt;spaceless&lt;/code&gt; with the &lt;code&gt;apply&lt;/code&gt; tag to apply the transformation on large amounts of HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b730796f435431ad683b561b7ff6b43fdfc2e89f" translate="yes" xml:space="preserve">
          <source>You can combine multiple expressions with the following operators:</source>
          <target state="translated">여러 표현식을 다음 연산자와 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9454e5f5a90acd04f414e8f766e5e1f3a3c514ea" translate="yes" xml:space="preserve">
          <source>You can control the number of decimal places, decimal point, and thousands separator using the additional arguments:</source>
          <target state="translated">추가 인수를 사용하여 소수점 이하 자릿수, 소수점 및 천 단위 구분 기호를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e2c08c89c838b68bf6f38d6358b1d07335dbc49" translate="yes" xml:space="preserve">
          <source>You can create functional tests for extensions by creating the following file structure in your test directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98f954507f65201281ae89512276fc98247e81e" translate="yes" xml:space="preserve">
          <source>You can create functional tests for extensions simply by creating the following file structure in your test directory:</source>
          <target state="translated">테스트 디렉토리에 다음 파일 구조를 작성하여 확장에 대한 기능 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9ebeee9759534393bcd5a00faecd0e47d610141" translate="yes" xml:space="preserve">
          <source>You can debug several variables by passing them as additional arguments:</source>
          <target state="translated">추가 인수로 여러 변수를 전달하여 디버깅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a2caadfac3dbe65d10d1ddd70e99a16e71324cf" translate="yes" xml:space="preserve">
          <source>You can decouple the extension definitions from their runtime implementations by registering a &lt;code&gt;\Twig\RuntimeLoader\RuntimeLoaderInterface&lt;/code&gt; instance on the environment that knows how to instantiate such runtime classes (runtime classes must be autoload-able):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae0b0755f10e915d2b236229a98f7e621e2a24f" translate="yes" xml:space="preserve">
          <source>You can define custom escapers by calling the &lt;code&gt;setEscaper()&lt;/code&gt; method on the &lt;code&gt;core&lt;/code&gt; extension instance. The first argument is the escaper name (to be used in the &lt;code&gt;escape&lt;/code&gt; call) and the second one must be a valid PHP callable:</source>
          <target state="translated">&lt;code&gt;core&lt;/code&gt; 확장 인스턴스 에서 &lt;code&gt;setEscaper()&lt;/code&gt; 메소드를 호출하여 사용자 정의 이스케이프를 정의 할 수 있습니다 . 첫 번째 인수는 &lt;code&gt;escape&lt;/code&gt; 이름 ( 이스케이프 호출에 사용)이며 두 번째 인수는 유효한 PHP 호출 가능이어야합니다.</target>
        </trans-unit>
        <trans-unit id="d899bd41c17eda1f20463b4b5da9f44d68041952" translate="yes" xml:space="preserve">
          <source>You can define custom escapers by calling the &lt;code&gt;setEscaper()&lt;/code&gt; method on the escaper extension instance. The first argument is the escaper name (to be used in the &lt;code&gt;escape&lt;/code&gt; call) and the second one must be a valid PHP callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8722fec221f5acb70a892d491c5904c2be6c817a" translate="yes" xml:space="preserve">
          <source>You can disable access to the context by appending the &lt;code&gt;only&lt;/code&gt; keyword:</source>
          <target state="translated">&lt;code&gt;only&lt;/code&gt; 키워드 를 추가하여 컨텍스트에 대한 액세스를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="653fe6c0e6ed3a6e6cdbe517e89a0b5a4125edf8" translate="yes" xml:space="preserve">
          <source>You can disable access to the context by setting &lt;code&gt;with_context&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;with_context&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 컨텍스트에 대한 액세스를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ced3b2e2517a5803d7a298565585388b8c4f1f01" translate="yes" xml:space="preserve">
          <source>You can easily decouple the extension definitions from their runtime implementations by registering a &lt;code&gt;Twig_RuntimeLoaderInterface&lt;/code&gt; instance on the environment that knows how to instantiate such runtime classes (runtime classes must be autoload-able):</source>
          <target state="translated">런타임 클래스를 인스턴스화하는 방법을 알고있는 환경 에서 &lt;code&gt;Twig_RuntimeLoaderInterface&lt;/code&gt; 인스턴스를 등록하여 런타임 구현에서 확장 정의를 쉽게 분리 할 수 ​​있습니다 (런타임 클래스는 자동로드 가능해야 함).</target>
        </trans-unit>
        <trans-unit id="6dea39f294b5df26c2da2cc1bb03aee5828c0cb7" translate="yes" xml:space="preserve">
          <source>You can manually compile a node tree to PHP code with the &lt;code&gt;compile()&lt;/code&gt; method of an environment:</source>
          <target state="translated">환경 의 &lt;code&gt;compile()&lt;/code&gt; 메소드를 사용하여 노드 트리를 PHP 코드로 수동 컴파일 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f944556c85a57c16374179e605ecc68390cc44c9" translate="yes" xml:space="preserve">
          <source>You can manually convert a source code into a token stream by calling the &lt;code&gt;tokenize()&lt;/code&gt; method of an environment:</source>
          <target state="translated">환경 의 &lt;code&gt;tokenize()&lt;/code&gt; 메소드를 호출하여 소스 코드를 토큰 스트림으로 수동으로 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1aa929721913a822ae54009478f98e310dc36ca9" translate="yes" xml:space="preserve">
          <source>You can manually convert a token stream into a node tree by calling the &lt;code&gt;parse()&lt;/code&gt; method of an environment:</source>
          <target state="translated">환경 의 &lt;code&gt;parse()&lt;/code&gt; 메소드를 호출하여 토큰 스트림을 노드 트리로 수동으로 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6614c3d201949247dbf4580db46ae68d4c4e6e76" translate="yes" xml:space="preserve">
          <source>You can mark a filter as being deprecated by setting the &lt;code&gt;deprecated&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;. You can also give an alternative filter that replaces the deprecated one when that makes sense:</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하여 필터가 사용되지 않는 것으로 표시 할 수 있습니다 . 더 이상 사용되지 않는 필터를 대체하는 대체 필터를 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e15776b646d78d53f2fc8c89896bc0c27e632b31" translate="yes" xml:space="preserve">
          <source>You can mark an include with &lt;code&gt;ignore missing&lt;/code&gt; in which case Twig will ignore the statement if the template to be included does not exist. It has to be placed just after the template name. Here some valid examples:</source>
          <target state="translated">포함을 &lt;code&gt;ignore missing&lt;/code&gt; 표시하면 포함 할 템플리트가 존재하지 않는 경우 Twig에서 명령문을 무시합니다. 템플릿 이름 바로 뒤에 배치해야합니다. 다음은 몇 가지 유효한 예입니다.</target>
        </trans-unit>
        <trans-unit id="84c7c4336471ee9e9b18ca6b538983ed5ac43452" translate="yes" xml:space="preserve">
          <source>You can pass a timezone as the second argument:</source>
          <target state="translated">시간대를 두 번째 인수로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e73cb963aab02bddaed29fabbab2bd6c2ebfb25" translate="yes" xml:space="preserve">
          <source>You can pass an arrow function to sort the array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8a82e7cab730188087edbc650b7e51019b8bf2" translate="yes" xml:space="preserve">
          <source>You can pass attributes to tweak the output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1417762b9eca3a670bc8b4f41658d2fe94c558" translate="yes" xml:space="preserve">
          <source>You can pass the whole context as an argument by using the special &lt;code&gt;_context&lt;/code&gt; variable.</source>
          <target state="translated">특수한 &lt;code&gt;_context&lt;/code&gt; 변수를 사용하여 전체 컨텍스트를 인수로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3d8a72bba54521e2705fbbbed7c3aaecd6910fa" translate="yes" xml:space="preserve">
          <source>You can read constants from object instances as well:</source>
          <target state="translated">객체 인스턴스에서도 상수를 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e17b8ab245c674bdb58d8d2d15e7a18bb49c17be" translate="yes" xml:space="preserve">
          <source>You can register an extension by using the &lt;code&gt;addExtension()&lt;/code&gt; method on your main &lt;code&gt;Environment&lt;/code&gt; object:</source>
          <target state="translated">기본 &lt;code&gt;Environment&lt;/code&gt; 오브젝트 에서 &lt;code&gt;addExtension()&lt;/code&gt; 메소드를 사용하여 확장을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2454154985f03a6a1ab77a807641233526d7a03c" translate="yes" xml:space="preserve">
          <source>You can replace this template by putting a file with the same name in &lt;code&gt;.../templates/mysite&lt;/code&gt;. And if you want to extend the original template, you might be tempted to write the following:</source>
          <target state="translated">&lt;code&gt;.../templates/mysite&lt;/code&gt; 에 같은 이름의 파일을 넣어이 템플릿을 바꿀 수 있습니다 . 원본 템플릿을 확장하려는 경우 다음을 작성하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5af45c7898083fafe96603ad763d000e629744e6" translate="yes" xml:space="preserve">
          <source>You can sandbox all templates by passing &lt;code&gt;true&lt;/code&gt; as the second argument of the extension constructor:</source>
          <target state="translated">확장 생성자의 두 번째 인수로 &lt;code&gt;true&lt;/code&gt; 를 전달하여 모든 템플릿을 샌드 박스로 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="add734ebc5fb9c21fc7b48db7ae7cc330d571a42" translate="yes" xml:space="preserve">
          <source>You can save your extension anywhere on the filesystem, as all extensions must be registered explicitly to be available in your templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7685bbda3bc84e65a81b841f252a680150cd52" translate="yes" xml:space="preserve">
          <source>You can set the default timezone globally by calling &lt;code&gt;setTimezone()&lt;/code&gt; on the &lt;code&gt;core&lt;/code&gt; extension instance:</source>
          <target state="translated">&lt;code&gt;core&lt;/code&gt; 확장 인스턴스 에서 &lt;code&gt;setTimezone()&lt;/code&gt; 을 호출하여 기본 시간대를 전역 적으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="143d2994f269bdb8ad0cf03bd2289e63d6745b01" translate="yes" xml:space="preserve">
          <source>You can test constants from object instances as well:</source>
          <target state="translated">객체 인스턴스에서도 상수를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="216b9bf39de3cdc56ce26093f9fb0cc002f0f1a1" translate="yes" xml:space="preserve">
          <source>You can then use the &lt;code&gt;text&lt;/code&gt; variable anywhere in a template:</source>
          <target state="translated">그런 다음 템플릿 어디에서나 &lt;code&gt;text&lt;/code&gt; 변수 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe772cff66eef96b2a91d4199aeca955205e5431" translate="yes" xml:space="preserve">
          <source>You can tweak the output for the date part and the time part:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9796bd10ca04ccb136765358fc9eb764b710bd1" translate="yes" xml:space="preserve">
          <source>You can use a &lt;code&gt;lipsum&lt;/code&gt;&lt;em&gt;tag&lt;/em&gt;:</source>
          <target state="translated">당신은 &lt;code&gt;lipsum&lt;/code&gt; &lt;em&gt;태그를&lt;/em&gt; 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b20b9abec33c3f5b71e354fee02a15658749e7a6" translate="yes" xml:space="preserve">
          <source>You can use a dot (&lt;code&gt;.&lt;/code&gt;) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array), or the so-called &quot;subscript&quot; syntax (&lt;code&gt;[]&lt;/code&gt;):</source>
          <target state="translated">점을 사용할 수 있습니다 ( &lt;code&gt;.&lt;/code&gt; )을 사용하여 변수의 속성 (PHP 객체의 메서드 또는 속성 또는 PHP 배열의 항목) 또는 소위 &quot;첨자&quot;구문 ( &lt;code&gt;[]&lt;/code&gt; )에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="938d2d8f696bd3bf1a0fca7c9b5d42d664ea99c7" translate="yes" xml:space="preserve">
          <source>You can use any valid expression for both the start and the length:</source>
          <target state="translated">시작과 길이 모두에 유효한 표현식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f0d86dd462199b3f244bb7e0e54fb5f579246e1" translate="yes" xml:space="preserve">
          <source>You can use as many &lt;code&gt;use&lt;/code&gt; statements as you want in any given template. If two imported templates define the same block, the latest one wins.</source>
          <target state="translated">당신은 많은 것을 사용할 수 있습니다 &lt;code&gt;use&lt;/code&gt; 주어진 템플릿에서 원하는만큼 사용 문을 . 가져온 두 템플릿이 동일한 블록을 정의하면 최신 템플릿이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="15bcb85ac8e6cb36e0e2b288cd2678e8d0214397" translate="yes" xml:space="preserve">
          <source>You can use this filter to perform a containment test on strings, arrays, or objects implementing the &lt;code&gt;Traversable&lt;/code&gt; interface.</source>
          <target state="translated">이 필터를 사용하여 문자열, 배열 또는 객체를 구현하는 객체에 대한 포함 테스트를 수행 할 수 있습니다 &lt;code&gt;Traversable&lt;/code&gt; 인터페이스를 .</target>
        </trans-unit>
        <trans-unit id="790578c5be55b2d5b046c84de9323022baaf5fd9" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t define multiple &lt;code&gt;block&lt;/code&gt; tags with the same name in the same template. This limitation exists because a block tag works in &amp;ldquo;both&amp;rdquo; directions. That is, a block tag doesn&amp;rsquo;t just provide a hole to fill - it also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;code&gt;block&lt;/code&gt; tags in a template, that template&amp;rsquo;s parent wouldn&amp;rsquo;t know which one of the blocks&amp;rsquo; content to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46dd32ce3f7d767d816f8b044faea4e54b5daa5" translate="yes" xml:space="preserve">
          <source>You can't define multiple &lt;code&gt;block&lt;/code&gt; tags with the same name in the same template. This limitation exists because a block tag works in &quot;both&quot; directions. That is, a block tag doesn't just provide a hole to fill - it also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;code&gt;block&lt;/code&gt; tags in a template, that template's parent wouldn't know which one of the blocks' content to use.</source>
          <target state="translated">동일한 템플릿에서 같은 이름으로 여러 &lt;code&gt;block&lt;/code&gt; 태그를 정의 할 수 없습니다 . 이 제한은 블록 태그가 &quot;양방향&quot;으로 작동하기 때문에 존재합니다. 즉, 블록 태그는 채울 구멍을 제공 할뿐만 아니라 &lt;em&gt;부모&lt;/em&gt; 의 구멍을 채우는 내용도 정의합니다 . 비슷한 이름의 두 개가 있다면 &lt;code&gt;block&lt;/code&gt; 템플릿에 태그 해당 템플릿의 부모는 사용할 블록 내용 중 하나를 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="22cac4f49871943beb67e5c6d3d91f573a484496" translate="yes" xml:space="preserve">
          <source>You might want to iterate over a subset of values. This can be achieved using the &lt;a href=&quot;../filters/slice&quot;&gt;slice&lt;/a&gt; filter:</source>
          <target state="translated">값의 서브 세트를 반복 할 수 있습니다. &lt;a href=&quot;../filters/slice&quot;&gt;슬라이스를&lt;/a&gt; 사용하여 달성 할 수 있습니다 필터를 .</target>
        </trans-unit>
        <trans-unit id="799b60e2bdca781629f31da3e6069d06c75928bb" translate="yes" xml:space="preserve">
          <source>[erusev/parsedown](&lt;a href=&quot;https://github.com/erusev/parsedown&quot;&gt;https://github.com/erusev/parsedown&lt;/a&gt;)</source>
          <target state="translated">[erusev/parsedown](&lt;a href=&quot;https://github.com/erusev/parsedown&quot;&gt;https://github.com/erusev/parsedown&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="6be834665b37e5e5459c24a8ea3c5076dfa1e7a5" translate="yes" xml:space="preserve">
          <source>[michelf/php-markdown](&lt;a href=&quot;https://github.com/michelf/php-markdown&quot;&gt;https://github.com/michelf/php-markdown&lt;/a&gt;)</source>
          <target state="translated">[michelf/php-markdown](&lt;a href=&quot;https://github.com/michelf/php-markdown&quot;&gt;https://github.com/michelf/php-markdown&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="1bdbae49be9dadb1da41d07c43456994bcf8772b" translate="yes" xml:space="preserve">
          <source>[thephpleague/html-to-markdown](&lt;a href=&quot;https://github.com/thephpleague/html-to-markdown&quot;&gt;https://github.com/thephpleague/html-to-markdown&lt;/a&gt;)</source>
          <target state="translated">[thephpleague/html-to-markdown](&lt;a href=&quot;https://github.com/thephpleague/html-to-markdown&quot;&gt;https://github.com/thephpleague/html-to-markdown&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="70f9a4cb05a8f4494873842e70c1cfa4fab2fa52" translate="yes" xml:space="preserve">
          <source>a random character from a string;</source>
          <target state="translated">문자열에서 임의의 문자;</target>
        </trans-unit>
        <trans-unit id="4f5fc54474755a9e8a5b05d2e8d6a284b045c660" translate="yes" xml:space="preserve">
          <source>a random integer between 0 and the integer parameter (inclusive).</source>
          <target state="translated">0과 정수 매개 변수 사이의 임의의 정수 (포함)</target>
        </trans-unit>
        <trans-unit id="3dd0ee4a74d71fcea3b6d5890ca1e5dc49461a1e" translate="yes" xml:space="preserve">
          <source>a random integer between the first integer and the second integer parameter (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dab0268fd983e4b740e2eb9437e6022281c60a" translate="yes" xml:space="preserve">
          <source>a random integer between the integer parameter (when negative) and 0 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21d83cd12e5129ad7da99a46f8fbab23f50453b" translate="yes" xml:space="preserve">
          <source>a random item from a sequence;</source>
          <target state="translated">시퀀스로부터의 랜덤 아이템;</target>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="translated">apply</target>
        </trans-unit>
        <trans-unit id="2c317cd0735d9046d7675c475fa1c6dce647953f" translate="yes" xml:space="preserve">
          <source>attribute</source>
          <target state="translated">attribute</target>
        </trans-unit>
        <trans-unit id="177a744414283b05d8b122b94f6f0e8fc54eca42" translate="yes" xml:space="preserve">
          <source>autoescape</source>
          <target state="translated">autoescape</target>
        </trans-unit>
        <trans-unit id="7f01fe787c49e4adbe32533279699f08494c6472" translate="yes" xml:space="preserve">
          <source>batch</source>
          <target state="translated">batch</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="fc39b18f287d8bbfaceae020f4a4eb32ac5c1e70" translate="yes" xml:space="preserve">
          <source>both</source>
          <target state="translated">both</target>
        </trans-unit>
        <trans-unit id="d01a341706c2a5c67a30eb227bba3d0fd7ace906" translate="yes" xml:space="preserve">
          <source>capitalize</source>
          <target state="translated">capitalize</target>
        </trans-unit>
        <trans-unit id="2cf3010522d927f05c835ad06f16007c84f138dd" translate="yes" xml:space="preserve">
          <source>check if &lt;code&gt;foo&lt;/code&gt; is an array and &lt;code&gt;bar&lt;/code&gt; a valid element;</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 가 배열과 &lt;code&gt;bar&lt;/code&gt; 인지 확인하십시오. 하고 유효한 요소를 하십시오.</target>
        </trans-unit>
        <trans-unit id="d0a87463a5da3a529959582ae7965dbc217195be" translate="yes" xml:space="preserve">
          <source>class Project_Twig_Extension extends Twig_Extension { }</source>
          <target state="translated">Project_Twig_Extension 클래스는 Twig_Extension {}을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="aa60230ab00282b5a1f3f1993b2d1c503e7d15a5" translate="yes" xml:space="preserve">
          <source>column</source>
          <target state="translated">column</target>
        </trans-unit>
        <trans-unit id="6ff16b36dc77810e63bda254427a1d6965fa127a" translate="yes" xml:space="preserve">
          <source>complex</source>
          <target state="translated">complex</target>
        </trans-unit>
        <trans-unit id="d810ca965a236c6f46a932efff918a4b3a191918" translate="yes" xml:space="preserve">
          <source>constant</source>
          <target state="translated">constant</target>
        </trans-unit>
        <trans-unit id="1f6b6676540ba69ffa0f1e9f5245486098bc2798" translate="yes" xml:space="preserve">
          <source>convert_encoding</source>
          <target state="translated">convert_encoding</target>
        </trans-unit>
        <trans-unit id="2c5aa339240c0c3ae97fcc9dc4ccf574c54bd9a0" translate="yes" xml:space="preserve">
          <source>country_name</source>
          <target state="translated">country_name</target>
        </trans-unit>
        <trans-unit id="073f6daaddab44779157014b510cf3d1b645a428" translate="yes" xml:space="preserve">
          <source>country_timezones</source>
          <target state="translated">country_timezones</target>
        </trans-unit>
        <trans-unit id="77f11186dd58a8d87ad5fff02464f8b7402f5d2f" translate="yes" xml:space="preserve">
          <source>currency_name</source>
          <target state="translated">currency_name</target>
        </trans-unit>
        <trans-unit id="25fd91050301f15e352646105d34cc9adea5de15" translate="yes" xml:space="preserve">
          <source>currency_symbol</source>
          <target state="translated">currency_symbol</target>
        </trans-unit>
        <trans-unit id="5d2432d4636d257e92c0918095f31735825405c3" translate="yes" xml:space="preserve">
          <source>cycle</source>
          <target state="translated">cycle</target>
        </trans-unit>
        <trans-unit id="eb3309815b50f5b910f7cfb43fa014bce2372865" translate="yes" xml:space="preserve">
          <source>data_uri</source>
          <target state="translated">data_uri</target>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="0375b9aa6be553ecd1b87e02fb4bfff2bc3fbe99" translate="yes" xml:space="preserve">
          <source>date_modify</source>
          <target state="translated">date_modify</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">default</target>
        </trans-unit>
        <trans-unit id="9bc79382610417cb19c15d3e65015f8a7d7b36bc" translate="yes" xml:space="preserve">
          <source>defined</source>
          <target state="translated">defined</target>
        </trans-unit>
        <trans-unit id="513b28ad3810ae4846ec6bb58921d48892ceb662" translate="yes" xml:space="preserve">
          <source>deprecated</source>
          <target state="translated">deprecated</target>
        </trans-unit>
        <trans-unit id="3df24216e2026e64b661d856c019ca1a82e0532a" translate="yes" xml:space="preserve">
          <source>divisible by</source>
          <target state="translated">~로 나눌 수있는</target>
        </trans-unit>
        <trans-unit id="3ba1a76c3742c595303023507125306e74c51571" translate="yes" xml:space="preserve">
          <source>divisibleby</source>
          <target state="translated">divisibleby</target>
        </trans-unit>
        <trans-unit id="eadcd9bd2a09c75aef04954e6799e50278ee124a" translate="yes" xml:space="preserve">
          <source>do</source>
          <target state="translated">do</target>
        </trans-unit>
        <trans-unit id="9567d1547e105470e4e53c1568f07a209e82a161" translate="yes" xml:space="preserve">
          <source>dump</source>
          <target state="translated">dump</target>
        </trans-unit>
        <trans-unit id="ae050f5b7fb8d383d62139276081853b47e7a03e" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="translated">else</target>
        </trans-unit>
        <trans-unit id="cfff27c96089b93150f3553b6ffdd39d0d5d8e78" translate="yes" xml:space="preserve">
          <source>embed</source>
          <target state="translated">embed</target>
        </trans-unit>
        <trans-unit id="ad87109bfff0765f4dd8cf4943b04d16a4070fea" translate="yes" xml:space="preserve">
          <source>empty</source>
          <target state="translated">empty</target>
        </trans-unit>
        <trans-unit id="79cc112e9b671aeea9119eee68c74b3f2fbeaa70" translate="yes" xml:space="preserve">
          <source>empty array</source>
          <target state="translated">빈 배열</target>
        </trans-unit>
        <trans-unit id="6b3f8803e110dc659aa6186ce6aba70d8e52b81a" translate="yes" xml:space="preserve">
          <source>empty string</source>
          <target state="translated">빈 문자열</target>
        </trans-unit>
        <trans-unit id="cdecabe1520a398e4e46deff9d55b19bed6d6457" translate="yes" xml:space="preserve">
          <source>escape</source>
          <target state="translated">escape</target>
        </trans-unit>
        <trans-unit id="04b8c80bb78edbc4f2742dedfab5f5bddf895cd1" translate="yes" xml:space="preserve">
          <source>even</source>
          <target state="translated">even</target>
        </trans-unit>
        <trans-unit id="2b781ff8e3327e3e897ec571fa02fec12242e7dd" translate="yes" xml:space="preserve">
          <source>extends</source>
          <target state="translated">extends</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="9f8a9950a99ea4e23f0c97da4201341828eae28b" translate="yes" xml:space="preserve">
          <source>filter should only be used at the end of the filter chain:</source>
          <target state="translated">필터는 필터 체인 끝에서만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e0996a37c13d44c3b06074939d43fa3759bd32c1" translate="yes" xml:space="preserve">
          <source>first</source>
          <target state="translated">first</target>
        </trans-unit>
        <trans-unit id="e4706359fc4117d0efea7adb012984601954e2af" translate="yes" xml:space="preserve">
          <source>flush</source>
          <target state="translated">flush</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="785987648f85190cfde9eadc69fc7c46fe8a7433" translate="yes" xml:space="preserve">
          <source>format</source>
          <target state="translated">format</target>
        </trans-unit>
        <trans-unit id="20f17d50b4eb27e59e614001aaecb4b6785ff8e5" translate="yes" xml:space="preserve">
          <source>format_currency</source>
          <target state="translated">format_currency</target>
        </trans-unit>
        <trans-unit id="6f4a1ad82ec90c91fe3c64ba4e9637a4eb315f70" translate="yes" xml:space="preserve">
          <source>format_date</source>
          <target state="translated">format_date</target>
        </trans-unit>
        <trans-unit id="50cc4089b2f517c7e3af2f5144fafbc83093391a" translate="yes" xml:space="preserve">
          <source>format_datetime</source>
          <target state="translated">format_datetime</target>
        </trans-unit>
        <trans-unit id="4c10ca3c7849e6acf901543261e9e352c7a521de" translate="yes" xml:space="preserve">
          <source>format_number</source>
          <target state="translated">format_number</target>
        </trans-unit>
        <trans-unit id="cd6757e0e531a59f84238019742bbe373c1e4890" translate="yes" xml:space="preserve">
          <source>format_time</source>
          <target state="translated">format_time</target>
        </trans-unit>
        <trans-unit id="79eb183e04b1523bd17785c4ffa9dc1ee345d968" translate="yes" xml:space="preserve">
          <source>frequent</source>
          <target state="translated">frequent</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="c68a53701aa13dbe013e31658f7334743b555236" translate="yes" xml:space="preserve">
          <source>function to allow loading templates from string in a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d2c6aeec6f62cfbd111c5e8ad2d9d8611597a1" translate="yes" xml:space="preserve">
          <source>html_classes</source>
          <target state="translated">html_classes</target>
        </trans-unit>
        <trans-unit id="d747e0adf84082a97d77116c165aa8188742a34b" translate="yes" xml:space="preserve">
          <source>html_to_markdown</source>
          <target state="translated">html_to_markdown</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="4ca36229f1aade3dd1b230aea952384f754bbb8b" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;bar&lt;/code&gt; is a valid method (even if &lt;code&gt;bar&lt;/code&gt; is the constructor - use &lt;code&gt;__construct()&lt;/code&gt; instead);</source>
          <target state="translated">그렇지 않으면 경우, 그리고 &lt;code&gt;foo&lt;/code&gt; 는이 대상이며, 확인 &lt;code&gt;bar&lt;/code&gt; 유효한 방법은 (경우에도입니다 &lt;code&gt;bar&lt;/code&gt; 생성자입니다 - 사용 &lt;code&gt;__construct()&lt;/code&gt; 대신에);</target>
        </trans-unit>
        <trans-unit id="a10ecf2cdab1ff42e7ad747f6e3bde95e855d564" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;bar&lt;/code&gt; is a valid property;</source>
          <target state="translated">그렇지 않은 경우 그리고 &lt;code&gt;foo&lt;/code&gt; 가 객체 인 경우 &lt;code&gt;bar&lt;/code&gt; 가 유효한 특성인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6596eed4ae4059448e0853306bef725b034792d8" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;getBar&lt;/code&gt; is a valid method;</source>
          <target state="translated">그렇지 않은 경우 그리고 &lt;code&gt;foo&lt;/code&gt; 가 객체 인 경우 &lt;code&gt;getBar&lt;/code&gt; 가 유효한 메소드 인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="c498e5f27b0a869081d6fde35321037f7b4c649b" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;hasBar&lt;/code&gt; is a valid method;</source>
          <target state="translated">그렇지 않은 경우, &lt;code&gt;foo&lt;/code&gt; 가 객체 인 경우 &lt;code&gt;hasBar&lt;/code&gt; 가 유효한 메소드 인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="01a43c200a380cf92db7d2ae1376fa68b98bc943" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;isBar&lt;/code&gt; is a valid method;</source>
          <target state="translated">그렇지 않은 경우, &lt;code&gt;foo&lt;/code&gt; 가 객체 인 경우 &lt;code&gt;isBar&lt;/code&gt; 가 유효한 메소드 인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed17d9ee197b9ce5e4b5c98c8a238b212b43354a" translate="yes" xml:space="preserve">
          <source>if not, return a &lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;null&lt;/code&gt; 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="62fdfbd55d19b2a4671102ad7bca17d875f8207a" translate="yes" xml:space="preserve">
          <source>import</source>
          <target state="translated">import</target>
        </trans-unit>
        <trans-unit id="d3ecb0d890368d7659ee54010045b835dacb8efe" translate="yes" xml:space="preserve">
          <source>include</source>
          <target state="translated">include</target>
        </trans-unit>
        <trans-unit id="207ec161130c9728917963da48db342b0393ada9" translate="yes" xml:space="preserve">
          <source>inky_to_html</source>
          <target state="translated">inky_to_html</target>
        </trans-unit>
        <trans-unit id="a0b8633d592d5ce1b166afd478b734e71d94e81f" translate="yes" xml:space="preserve">
          <source>inline_css</source>
          <target state="translated">inline_css</target>
        </trans-unit>
        <trans-unit id="a4232aa69e44a8d57375e3eb2456dacd95b18c0d" translate="yes" xml:space="preserve">
          <source>is compiled to something like the following:</source>
          <target state="translated">다음과 같이 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="9dd94c6934186333a00e635592ff461c9140c174" translate="yes" xml:space="preserve">
          <source>iterable</source>
          <target state="translated">iterable</target>
        </trans-unit>
        <trans-unit id="c455b38e076228392d1c751d14fe95da50519334" translate="yes" xml:space="preserve">
          <source>join</source>
          <target state="translated">join</target>
        </trans-unit>
        <trans-unit id="9fcd0bfe0868c9806b0bd00dba22225d3282d85b" translate="yes" xml:space="preserve">
          <source>json_encode</source>
          <target state="translated">json_encode</target>
        </trans-unit>
        <trans-unit id="5944ae25418ceabcf285dca1d721b77888dac89b" translate="yes" xml:space="preserve">
          <source>keys</source>
          <target state="translated">keys</target>
        </trans-unit>
        <trans-unit id="7df7d1e250ea2a416f078a631fb8caef5d6ad080" translate="yes" xml:space="preserve">
          <source>language_name</source>
          <target state="translated">language_name</target>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="translated">last</target>
        </trans-unit>
        <trans-unit id="12c0f1fbadc4046b5f2bb9e063b227ef8750d9d6" translate="yes" xml:space="preserve">
          <source>left</source>
          <target state="translated">left</target>
        </trans-unit>
        <trans-unit id="3d54973f528b01019a58a52d34d518405a01b891" translate="yes" xml:space="preserve">
          <source>length</source>
          <target state="translated">length</target>
        </trans-unit>
        <trans-unit id="a228fc2e2eea07da9355df2690a2ef778a15c360" translate="yes" xml:space="preserve">
          <source>locale_name</source>
          <target state="translated">locale_name</target>
        </trans-unit>
        <trans-unit id="1df823e482339eb6067f4134408b0b8b28411a78" translate="yes" xml:space="preserve">
          <source>loop</source>
          <target state="translated">loop</target>
        </trans-unit>
        <trans-unit id="346e3ee198e98146993894d3de8ecab1a86c3e80" translate="yes" xml:space="preserve">
          <source>lower</source>
          <target state="translated">lower</target>
        </trans-unit>
        <trans-unit id="78f3a3d9d6e4d907a7d12e475d0a751d6b7e256b" translate="yes" xml:space="preserve">
          <source>macro</source>
          <target state="translated">macro</target>
        </trans-unit>
        <trans-unit id="37745ed7a0f005fb14522c5cc7c1ba3d9e0df579" translate="yes" xml:space="preserve">
          <source>map</source>
          <target state="translated">map</target>
        </trans-unit>
        <trans-unit id="05bb76f1e435db71754a65f9e8acec7dfdd4c65d" translate="yes" xml:space="preserve">
          <source>markdown_to_html</source>
          <target state="translated">markdown_to_html</target>
        </trans-unit>
        <trans-unit id="0706025b2bbcec1ed8d64822f4eccd96314938d0" translate="yes" xml:space="preserve">
          <source>max</source>
          <target state="translated">max</target>
        </trans-unit>
        <trans-unit id="14091a9f2461267ee7e02525b4f1f2923f1c9849" translate="yes" xml:space="preserve">
          <source>merge</source>
          <target state="translated">merge</target>
        </trans-unit>
        <trans-unit id="b6c935d4f3c7b220fa038613a1f9c1b56b255a86" translate="yes" xml:space="preserve">
          <source>min</source>
          <target state="translated">min</target>
        </trans-unit>
        <trans-unit id="6834c74997e8995bac010b6d8fa062688b176994" translate="yes" xml:space="preserve">
          <source>nl2br</source>
          <target state="translated">nl2br</target>
        </trans-unit>
        <trans-unit id="db85006aed50f7ba21c540a4033fd7451f321db5" translate="yes" xml:space="preserve">
          <source>non-empty array</source>
          <target state="translated">비어 있지 않은 배열</target>
        </trans-unit>
        <trans-unit id="2be88ca4242c76e8253ac62474851065032d6833" translate="yes" xml:space="preserve">
          <source>null</source>
          <target state="translated">null</target>
        </trans-unit>
        <trans-unit id="5dd136c52cf302163a05e7cafa3693a7179fe74b" translate="yes" xml:space="preserve">
          <source>number_format</source>
          <target state="translated">number_format</target>
        </trans-unit>
        <trans-unit id="6877adbecf3e276a79f96e540d9d0f418fc64532" translate="yes" xml:space="preserve">
          <source>numeric zero</source>
          <target state="translated">숫자 0</target>
        </trans-unit>
        <trans-unit id="1615307cc4523f183e777df67f168c86908e8007" translate="yes" xml:space="preserve">
          <source>object</source>
          <target state="translated">object</target>
        </trans-unit>
        <trans-unit id="60f7a51208a50e4639fc53af2d60b808f4429a1e" translate="yes" xml:space="preserve">
          <source>odd</source>
          <target state="translated">odd</target>
        </trans-unit>
        <trans-unit id="d8fd39d0bbdd2dcf322d8b11390a4c5825b11495" translate="yes" xml:space="preserve">
          <source>parent</source>
          <target state="translated">parent</target>
        </trans-unit>
        <trans-unit id="4397a54dc2413cd0815c38c0fe9f4b8d24715ce4" translate="yes" xml:space="preserve">
          <source>public function formatDateTime(Environment $env, $date, ?string $dateFormat = &amp;lsquo;medium&amp;rsquo;, ?string $timeFormat = &amp;lsquo;medium&amp;rsquo;, string $pattern = &amp;lsquo;&amp;rsquo;, $timezone = null, string $calendar = &amp;lsquo;gregorian&amp;rsquo;, string $locale = null): string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="4d55af37dbbb6a42088d917caa1ca25428ec42c9" translate="yes" xml:space="preserve">
          <source>range</source>
          <target state="translated">range</target>
        </trans-unit>
        <trans-unit id="d5e62fc1fc3b3a64ea4fc20d640432c8bd216663" translate="yes" xml:space="preserve">
          <source>rare</source>
          <target state="translated">rare</target>
        </trans-unit>
        <trans-unit id="ce15802a8c5e8e9db0ffaf10130ef265296e9ea4" translate="yes" xml:space="preserve">
          <source>raw</source>
          <target state="translated">raw</target>
        </trans-unit>
        <trans-unit id="48c3689f6dd5e9e952f925b7ebebf64d7c43fc56" translate="yes" xml:space="preserve">
          <source>reduce</source>
          <target state="translated">reduce</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="75470a3076d8da06e21a0f542f3a535af3f72e94" translate="yes" xml:space="preserve">
          <source>reverse</source>
          <target state="translated">reverse</target>
        </trans-unit>
        <trans-unit id="d27a1f11771200949714b1af99f048a416f5d6f4" translate="yes" xml:space="preserve">
          <source>right</source>
          <target state="translated">right</target>
        </trans-unit>
        <trans-unit id="f0590a6dd3663be108ff31f58d16b829a1284be6" translate="yes" xml:space="preserve">
          <source>round</source>
          <target state="translated">round</target>
        </trans-unit>
        <trans-unit id="ac3a5e8e42ecd5cec06569abf86321a3c130988b" translate="yes" xml:space="preserve">
          <source>same as</source>
          <target state="translated">와 동일</target>
        </trans-unit>
        <trans-unit id="7f73a2ab85efd2733199f6dfe4bc70aa0d8b69db" translate="yes" xml:space="preserve">
          <source>sameas</source>
          <target state="translated">sameas</target>
        </trans-unit>
        <trans-unit id="9ed037b84943c4caa3a520e48a5540181c46c98c" translate="yes" xml:space="preserve">
          <source>sandbox</source>
          <target state="translated">sandbox</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="0f7d0d088b6ea936fb25b477722d734706fe8b40" translate="yes" xml:space="preserve">
          <source>simple</source>
          <target state="translated">simple</target>
        </trans-unit>
        <trans-unit id="0a5228e66df38e2f27ca61b901edf86f7ef97fb8" translate="yes" xml:space="preserve">
          <source>slice</source>
          <target state="translated">slice</target>
        </trans-unit>
        <trans-unit id="98c4b8f6e2d770a0f2b54233669d65ff6eddc472" translate="yes" xml:space="preserve">
          <source>sort</source>
          <target state="translated">sort</target>
        </trans-unit>
        <trans-unit id="828d338a9b04221c9cbe286f50cd389f68de4ecf" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="translated">source</target>
        </trans-unit>
        <trans-unit id="5ecd294ae7c5dfd951350294152cbf1e7e2c4bba" translate="yes" xml:space="preserve">
          <source>spaceless</source>
          <target state="translated">spaceless</target>
        </trans-unit>
        <trans-unit id="94d5cab6f5fe3422a447ab15436e7a672bc0c09a" translate="yes" xml:space="preserve">
          <source>split</source>
          <target state="translated">split</target>
        </trans-unit>
        <trans-unit id="1fa14e850fba8e8028bfa7aae314967903bfd25f" translate="yes" xml:space="preserve">
          <source>string &quot;0&quot; or '0'</source>
          <target state="translated">문자열 &quot;0&quot;또는 '0'</target>
        </trans-unit>
        <trans-unit id="65256061c7ddc3d25b28e67bdaf74bcb3d4d7550" translate="yes" xml:space="preserve">
          <source>string &amp;ldquo;0&amp;rdquo; or &amp;lsquo;0&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab84ef96b894ad194b0eab95e2e28bd9f60a85ad" translate="yes" xml:space="preserve">
          <source>striptags</source>
          <target state="translated">striptags</target>
        </trans-unit>
        <trans-unit id="60bbb09c0cec106baf068ba77f089201972495a9" translate="yes" xml:space="preserve">
          <source>template_from_string</source>
          <target state="translated">template_from_string</target>
        </trans-unit>
        <trans-unit id="416ff1a8aedc587a4b907606f1cea21e81a3ec84" translate="yes" xml:space="preserve">
          <source>timezone_name</source>
          <target state="translated">timezone_name</target>
        </trans-unit>
        <trans-unit id="3c6de1b7dd91465d437ef415f94f36afc1fbc8a8" translate="yes" xml:space="preserve">
          <source>title</source>
          <target state="translated">title</target>
        </trans-unit>
        <trans-unit id="7ab4b0a80acc6ac1e45dd17da3810e3e8beb829e" translate="yes" xml:space="preserve">
          <source>trim</source>
          <target state="translated">trim</target>
        </trans-unit>
        <trans-unit id="f2fc8123700c95880a53d4a1576282f2ca68c4b0" translate="yes" xml:space="preserve">
          <source>trivial</source>
          <target state="translated">trivial</target>
        </trans-unit>
        <trans-unit id="5ffe533b830f08a0326348a9160afafc8ada44db" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="translated">true</target>
        </trans-unit>
        <trans-unit id="51e69892ab49df85c6230ccc57f8e1d1606caccc" translate="yes" xml:space="preserve">
          <source>u</source>
          <target state="translated">u</target>
        </trans-unit>
        <trans-unit id="c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7" translate="yes" xml:space="preserve">
          <source>upper</source>
          <target state="translated">upper</target>
        </trans-unit>
        <trans-unit id="ca4ca6ff0749feaa735a423d62ba79cbfc879aa8" translate="yes" xml:space="preserve">
          <source>url_encode</source>
          <target state="translated">url_encode</target>
        </trans-unit>
        <trans-unit id="04489a12bbaa6aebffb61ed2f524424ba8e1147e" translate="yes" xml:space="preserve">
          <source>use</source>
          <target state="translated">use</target>
        </trans-unit>
        <trans-unit id="b46d0172433dd6895dac7544b9dacbb87b361e9f" translate="yes" xml:space="preserve">
          <source>variable</source>
          <target state="translated">variable</target>
        </trans-unit>
        <trans-unit id="03dbc04c745751f563cb64f734008bc0006b6c9f" translate="yes" xml:space="preserve">
          <source>variable, here is how you can do it:</source>
          <target state="translated">변수, 수행 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d99a2118f45121587f2aa88f0bbe3e6a0222afec" translate="yes" xml:space="preserve">
          <source>verbatim</source>
          <target state="translated">verbatim</target>
        </trans-unit>
        <trans-unit id="9b3d9037b0bc87627042c509134a61cfec13c10a" translate="yes" xml:space="preserve">
          <source>whitespace-only string</source>
          <target state="translated">공백 전용 문자열</target>
        </trans-unit>
        <trans-unit id="a471d315045b2ea8fbb81be598ec9f27291d9d7d" translate="yes" xml:space="preserve">
          <source>will strip from either the left side or right side only</source>
          <target state="translated">왼쪽 또는 오른쪽 중 하나만 제거합니다</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
        <trans-unit id="afbfa864d26d82e251db9ca353c23c11eb75a69a" translate="yes" xml:space="preserve">
          <source>with a style:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
