<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="composer">
    <body>
      <group id="composer">
        <trans-unit id="8a1618493b82666d4905c803521a15cd408bb2b3" translate="yes" xml:space="preserve">
          <source>Manual inline http-basic</source>
          <target state="translated">수동 인라인 http-basic</target>
        </trans-unit>
        <trans-unit id="5be956986c4830f5634e408f4cfe5ffbf79bac49" translate="yes" xml:space="preserve">
          <source>Manually editing global authentication credentials</source>
          <target state="translated">글로벌 인증 자격 증명 수동 편집</target>
        </trans-unit>
        <trans-unit id="0e3208cc90c5a8b00dbfe1054149e5acf7c59632" translate="yes" xml:space="preserve">
          <source>Manually editing this file instead of using the command line may result in invalid json errors. To fix this you need to open the file in an editor and fix the error. To find the location of your global &lt;code&gt;auth.json&lt;/code&gt;, execute:</source>
          <target state="translated">명령 줄을 사용하는 대신이 파일을 수동으로 편집하면 잘못된 json 오류가 발생할 수 있습니다. 이 문제를 해결하려면 편집기에서 파일을 열고 오류를 수정해야합니다. 전역 &lt;code&gt;auth.json&lt;/code&gt; 위치를 찾으려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="1c3f45515cc28f74919408ffa9ca1a39a38b78f1" translate="yes" xml:space="preserve">
          <source>Memory limit errors</source>
          <target state="translated">메모리 제한 오류</target>
        </trans-unit>
        <trans-unit id="8752821c95f2b75d4dc8449c22b28ade8698a073" translate="yes" xml:space="preserve">
          <source>Minimum Stability</source>
          <target state="translated">최소 안정성</target>
        </trans-unit>
        <trans-unit id="3ea0c857ba165aef26712171a2a706b53b8a0468" translate="yes" xml:space="preserve">
          <source>Modifying Extra Values</source>
          <target state="translated">추가 값 수정</target>
        </trans-unit>
        <trans-unit id="91e2a3d97529d7420f188c7aaf45493ca9ec4280" translate="yes" xml:space="preserve">
          <source>Modifying Repositories</source>
          <target state="translated">리포지토리 수정</target>
        </trans-unit>
        <trans-unit id="f76fee3286f84871a39a5e5f7f2503a3abf7f498" translate="yes" xml:space="preserve">
          <source>Must be in &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;YYYY-MM-DD&lt;/code&gt; 또는 &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; 형식 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="4025b616f677202a7be84eb179a61bc894d1cd18" translate="yes" xml:space="preserve">
          <source>Namespace prefixes must end in &lt;code&gt;\\&lt;/code&gt; to avoid conflicts between similar prefixes. For example &lt;code&gt;Foo&lt;/code&gt; would match classes in the &lt;code&gt;FooBar&lt;/code&gt; namespace so the trailing backslashes solve the problem: &lt;code&gt;Foo\\&lt;/code&gt; and &lt;code&gt;FooBar\\&lt;/code&gt; are distinct.</source>
          <target state="translated">네임 스페이스 접두사는 유사한 접두사 간의 충돌을 피하기 위해 &lt;code&gt;\\&lt;/code&gt; 로 끝나야합니다 . 예를 들어 &lt;code&gt;Foo&lt;/code&gt; 는 &lt;code&gt;FooBar&lt;/code&gt; 네임 스페이스의 클래스와 일치 하므로 후행 백 슬래시로 문제가 해결됩니다. &lt;code&gt;Foo\\&lt;/code&gt; 및 &lt;code&gt;FooBar\\&lt;/code&gt; 는 고유합니다.</target>
        </trans-unit>
        <trans-unit id="fc3e4b461b8b1cf9a32915e44b9c1d726c407755" translate="yes" xml:space="preserve">
          <source>Need to override a package version</source>
          <target state="translated">패키지 버전을 재정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="28ee11c63fdc46b8c878bc353cf5dfd2cbbb147d" translate="yes" xml:space="preserve">
          <source>Next Significant Release Operators</source>
          <target state="translated">다음 주요 릴리스 운영자</target>
        </trans-unit>
        <trans-unit id="54ea81a3dd00894f2088f7303589726960cbd771" translate="yes" xml:space="preserve">
          <source>Normally, Composer deals with tags (as opposed to branches -- if you don't know what this means, read up on &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_terminology&quot;&gt;version control systems&lt;/a&gt;). When you write a version constraint, it may reference a specific tag (e.g., &lt;code&gt;1.1&lt;/code&gt;) or it may reference a valid range of tags (e.g., &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt;, or &lt;code&gt;~4.0&lt;/code&gt;). To resolve these constraints, Composer first asks the VCS to list all available tags, then creates an internal list of available versions based on these tags. In the above example, composer's internal list includes versions &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.0.2&lt;/code&gt;, the beta release of &lt;code&gt;1.1&lt;/code&gt;, the first and second release candidates of &lt;code&gt;1.1&lt;/code&gt;, the final release version &lt;code&gt;1.1&lt;/code&gt;, etc.... (Note that Composer automatically removes the 'v' prefix in the actual tagname to get a valid final version number.)</source>
          <target state="translated">일반적으로 Composer는 태그를 다룹니다 (브랜치가 아니라-이것이 의미하는 바를 모르는 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_terminology&quot;&gt;버전 제어 시스템&lt;/a&gt; 에서 읽어보십시오 ). 버전 제약을 작성할 때 특정 태그 (예 : &lt;code&gt;1.1&lt;/code&gt; )를 참조하거나 유효한 태그 범위 (예 : &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt; 또는 &lt;code&gt;~4.0&lt;/code&gt; )를 참조 할 수 있습니다. 이러한 제약을 해결하기 위해 Composer는 먼저 VCS에 사용 가능한 모든 태그를 나열하도록 요청한 다음 이러한 태그를 기반으로 사용 가능한 버전의 내부 목록을 만듭니다. 위의 예에서 composer의 내부 목록에는 버전 &lt;code&gt;1.0&lt;/code&gt; , &lt;code&gt;1.0.1&lt;/code&gt; , &lt;code&gt;1.0.2&lt;/code&gt; , 베타 릴리스 &lt;code&gt;1.1&lt;/code&gt; , 첫 번째 및 두 번째 릴리스 후보 &lt;code&gt;1.1&lt;/code&gt; 이 포함됩니다., 최종 릴리스 버전 &lt;code&gt;1.1&lt;/code&gt; 등 ... (Composer는 유효한 최종 버전 번호를 얻기 위해 실제 태그 이름에서 'v'접두사를 자동으로 제거합니다.)</target>
        </trans-unit>
        <trans-unit id="39c736c92084eab192eb0796662a0f1c7f600808" translate="yes" xml:space="preserve">
          <source>Normally, Composer deals with tags (as opposed to branches -- if you don't know what this means, read up on &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_vocabulary&quot;&gt;version control systems&lt;/a&gt;). When you write a version constraint, it may reference a specific tag (e.g., &lt;code&gt;1.1&lt;/code&gt;) or it may reference a valid range of tags (e.g., &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt;, or &lt;code&gt;~4.0&lt;/code&gt;). To resolve these constraints, Composer first asks the VCS to list all available tags, then creates an internal list of available versions based on these tags. In the above example, composer's internal list includes versions &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.0.2&lt;/code&gt;, the beta release of &lt;code&gt;1.1&lt;/code&gt;, the first and second release candidates of &lt;code&gt;1.1&lt;/code&gt;, the final release version &lt;code&gt;1.1&lt;/code&gt;, etc.... (Note that Composer automatically removes the 'v' prefix in the actual tagname to get a valid final version number.)</source>
          <target state="translated">일반적으로 Composer는 브랜치와 달리 태그를 처리합니다 (이 의미가 무엇인지 모르는 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_vocabulary&quot;&gt;버전 관리 시스템을&lt;/a&gt; 읽어보십시오 ). 버전 제약 조건을 작성할 때 특정 태그 (예 : &lt;code&gt;1.1&lt;/code&gt; )를 참조하거나 유효한 태그 범위 (예 : &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt; 또는 &lt;code&gt;~4.0&lt;/code&gt; )를 참조 할 수 있습니다. 이러한 제약 조건을 해결하기 위해 Composer는 먼저 VCS에 사용 가능한 모든 태그를 나열하도록 요청한 다음이 태그를 기반으로 사용 가능한 버전의 내부 목록을 만듭니다. 위의 예에서 작곡가의 내부 목록에는 버전 &lt;code&gt;1.0&lt;/code&gt; , &lt;code&gt;1.0.1&lt;/code&gt; , &lt;code&gt;1.0.2&lt;/code&gt; , 베타 릴리스 &lt;code&gt;1.1&lt;/code&gt; , 첫 번째 및 두 번째 릴리스 후보 &lt;code&gt;1.1&lt;/code&gt; 이 포함됩니다, 최종 출시 버전 &lt;code&gt;1.1&lt;/code&gt; 등 ... (Composer는 유효한 최종 버전 번호를 얻기 위해 실제 태그 이름에서 'v'접두사를 자동으로 제거합니다.)</target>
        </trans-unit>
        <trans-unit id="66ec2e93672c49b92fb864b93b03dba5a399c1ee" translate="yes" xml:space="preserve">
          <source>Note that all packages set as abandoned in their own &lt;code&gt;composer.json&lt;/code&gt; file will be marked abandoned as well.</source>
          <target state="translated">자체 &lt;code&gt;composer.json&lt;/code&gt; 파일에 버려진 것으로 설정된 모든 패키지도 버려진 것으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="21967d75d7258073c7e7e8056ae0005a275d4501" translate="yes" xml:space="preserve">
          <source>Note that if your private packages are hosted on GitHub, your server should have an ssh key that gives it access to those packages, and then you should add the &lt;code&gt;--no-interaction&lt;/code&gt; (or &lt;code&gt;-n&lt;/code&gt;) flag to the command to make sure it falls back to ssh key authentication instead of prompting for a password. This is also a good trick for continuous integration servers.</source>
          <target state="translated">개인 패키지가 GitHub에서 호스팅되는 경우 서버에 해당 패키지에 액세스 할 수있는 ssh 키가 있어야 하며 명령에 &lt;code&gt;--no-interaction&lt;/code&gt; (또는 &lt;code&gt;-n&lt;/code&gt; ) 플래그를 추가 해야합니다. 암호를 묻지 않고 ssh 키 인증으로 돌아갑니다. 이것은 지속적인 통합 서버에 대한 좋은 트릭입니다.</target>
        </trans-unit>
        <trans-unit id="26f4af5bfb5878d8a90894bd633cb7df99683610" translate="yes" xml:space="preserve">
          <source>Note that this can not be used to check whether platform packages are installed.</source>
          <target state="translated">이것은 플랫폼 패키지가 설치되었는지 확인하는 데 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="eb8ff490b71790f9c09f4f22c1a128673037a74b" translate="yes" xml:space="preserve">
          <source>Note that this will still need to pull and scan all of your VCS repositories because any VCS repository might contain (on any branch) one of the selected packages.</source>
          <target state="translated">VCS 리포지토리에는 선택한 패키지 중 하나가 포함되어 있기 때문에 모든 VCS 리포지토리를 가져 와서 스캔해야합니다.</target>
        </trans-unit>
        <trans-unit id="f01bc369850f21ecb0b302f70e46cf0c42088b86" translate="yes" xml:space="preserve">
          <source>Note that when specifying ranges like &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; in a &lt;code&gt;conflict&lt;/code&gt; link, this will state a conflict with all versions that are less than 1.0 &lt;em&gt;and&lt;/em&gt; equal or newer than 1.1 at the same time, which is probably not what you want. You probably want to go for &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; in this case.</source>
          <target state="translated">지정 범위이 좋아하는 때주의 &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; A의 &lt;code&gt;conflict&lt;/code&gt; 링크이 1.0 이하 모든 버전과 충돌 상태 것이다 &lt;em&gt;및&lt;/em&gt; 당신이 원하는 아마 인 동시에,에서와 동일하거나 1.1보다 최신 버전입니다. 아마도 &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; 이 경우 &amp;gt; = 1.1 입니다.</target>
        </trans-unit>
        <trans-unit id="349b8b2d44121046ce03f6a242ab3742d620205a" translate="yes" xml:space="preserve">
          <source>Note that you can also specify platform requirements, for example to check whether you can upgrade your server to PHP 8.0:</source>
          <target state="translated">예를 들어 서버를 PHP 8.0으로 업그레이드 할 수 있는지 확인하기 위해 플랫폼 요구 사항을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8d858dc9f61c771e304c17678cf573f732e62b5" translate="yes" xml:space="preserve">
          <source>Note that you should not rename the package unless you really intend to fork it in the long term, and completely move away from the original package. Composer will correctly pick your package over the original one since the custom repository has priority over packagist. If you want to rename the package, you should do so in the default (often master) branch and not in a feature branch, since the package name is taken from the default branch.</source>
          <target state="translated">실제로 장기적으로 포크하려는 경우가 아니라면 패키지 이름을 바꾸지 말고 원래 패키지에서 완전히 옮기십시오. 사용자 정의 저장소가 packagist보다 우선하므로 Composer가 패키지를 원래 패키지보다 올바르게 선택합니다. 패키지 이름을 바꾸려면 패키지 이름이 기본 분기에서 가져 오기 때문에 기능 분기가 아닌 기본 (종종 마스터) 분기에서 이름을 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="65627b96ba23d8784652148c698d095d8aa281c4" translate="yes" xml:space="preserve">
          <source>Note: This can not be combined with Level 2/A optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">참고 : 레벨 2 / A 최적화와 함께 사용할 수 없습니다. 서로 다른 방식으로 동일한 문제를 해결하므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="a5ff623c6e03990dd6b7700d8d7c9f6a47910f9d" translate="yes" xml:space="preserve">
          <source>Note: This can not be combined with Level 2/B optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">참고 : 레벨 2 / B 최적화와 함께 사용할 수 없습니다. 서로 다른 방식으로 동일한 문제를 해결하므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="99765c98ad1c326ebe43566431acdd28e253564b" translate="yes" xml:space="preserve">
          <source>Note: This cannot be combined with Level 2/A optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">참고 : 이것은 레벨 2 / A 최적화와 결합 할 수 없습니다. 동일한 문제를 다른 방식으로 해결하므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="e16b03437154c681ff4e14d39417c7ab96b91e6d" translate="yes" xml:space="preserve">
          <source>Note: This cannot be combined with Level 2/B optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">참고 : 이것은 레벨 2 / B 최적화와 결합 할 수 없습니다. 동일한 문제를 다른 방식으로 해결하므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="387af04d85e51dc7c42b167c7882a89f1e6dcdb8" translate="yes" xml:space="preserve">
          <source>Now Composer should install/update without asking for authentication.</source>
          <target state="translated">이제 Composer는 인증을 요구하지 않고 설치 / 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="9263c718ae240bde8332cbe309524bedf436eeb2" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;composer&lt;/code&gt; in order to run Composer instead of &lt;code&gt;php composer.phar&lt;/code&gt;.</source>
          <target state="translated">이제 실행 &lt;code&gt;composer&lt;/code&gt; 실행 작곡가 대신하기 위해 &lt;code&gt;php composer.phar&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4e7cc9974d34dfe545130531200e0ad3cd778a8" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;php bin/composer&lt;/code&gt; in order to run Composer.</source>
          <target state="translated">이제 Composer를 실행하기 위해 &lt;code&gt;php bin/composer&lt;/code&gt; 를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7e592a51014fd9c1cdc6d0842c0a3d7115a7ee5d" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;php composer.phar&lt;/code&gt; in order to run Composer.</source>
          <target state="translated">이제 Composer를 실행하려면 &lt;code&gt;php composer.phar&lt;/code&gt; 를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2fab28bb5852f336cde499074da143417cfa4131" translate="yes" xml:space="preserve">
          <source>Now that you have an idea of how Composer sees versions, let's talk about how to specify version constraints for your project dependencies.</source>
          <target state="translated">이제 Composer가 버전을 보는 방법에 대한 아이디어를 얻었으므로 프로젝트 종속성에 대한 버전 제약 조건을 지정하는 방법에 대해 설명하겠습니다.</target>
        </trans-unit>
        <trans-unit id="3fe810793472cdd189145b4ace481ad873c4b2f7" translate="yes" xml:space="preserve">
          <source>Now that you've installed Composer, you are ready to use it! Head on over to the next chapter for a short and simple demonstration.</source>
          <target state="translated">이제 Composer를 설치 했으므로 사용할 준비가되었습니다! 짧고 간단한 데모를 위해 다음 장으로 넘어가십시오.</target>
        </trans-unit>
        <trans-unit id="eba7310629e2fefca3ef479c0c68d2398634ff45" translate="yes" xml:space="preserve">
          <source>Now that you've installed Composer, you are ready to use it! Head on over to the next chapter for a short demonstration.</source>
          <target state="translated">이제 Composer를 설치 했으므로 사용할 준비가되었습니다! 짧은 데모를 위해 다음 장으로 넘어가십시오.</target>
        </trans-unit>
        <trans-unit id="2bd3a570efb4d8c629a0ee8a6d69ac026d9eacac" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;custom-plugin-command&lt;/code&gt; is available alongside Composer commands.</source>
          <target state="translated">이제 &lt;code&gt;custom-plugin-command&lt;/code&gt; 를 Composer 명령과 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9e6eca78d466b159aa78053709e4ad719a70c6b" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;php-cs-fixer&lt;/code&gt; binary is available globally. Make sure your global &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;vendor binaries&lt;/a&gt; directory is in your &lt;code&gt;$PATH&lt;/code&gt; environment variable, you can get its location with the following command :</source>
          <target state="translated">이제 &lt;code&gt;php-cs-fixer&lt;/code&gt; 바이너리는 전 세계적으로 사용 가능합니다. 글로벌 &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;벤더 바이너리&lt;/a&gt; 디렉토리가 &lt;code&gt;$PATH&lt;/code&gt; 환경 변수에 있는지 확인하십시오 . 다음 명령으로 해당 위치를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1476aa89b57099f5cad68b9f9cf684fc7a4f638e" translate="yes" xml:space="preserve">
          <source>Now we need to tell the blog app where to find the &lt;code&gt;hello-world&lt;/code&gt; dependency. We do this by adding a package repository specification to the blog's &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">이제 블로그 앱에 &lt;code&gt;hello-world&lt;/code&gt; 종속성 을 찾을 수있는 위치를 알려줘야합니다 . 블로그의 &lt;code&gt;composer.json&lt;/code&gt; 에 패키지 저장소 사양을 추가하면됩니다 :</target>
        </trans-unit>
        <trans-unit id="32ce30c25194aacb1ca0174ad92a44bfeacc8bf6" translate="yes" xml:space="preserve">
          <source>Now, to test installing the &lt;code&gt;acme/hello-world&lt;/code&gt; package, we create a new project locally. We will call it &lt;code&gt;acme/blog&lt;/code&gt;. This blog will depend on &lt;code&gt;acme/hello-world&lt;/code&gt;, which in turn depends on &lt;code&gt;monolog/monolog&lt;/code&gt;. We can accomplish this by creating a new &lt;code&gt;blog&lt;/code&gt; directory somewhere, containing a &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;acme/hello-world&lt;/code&gt; 패키지 설치를 테스트하기 위해 로컬로 새 프로젝트를 만듭니다. 우리는 그것을 &lt;code&gt;acme/blog&lt;/code&gt; 라고 부를 것 입니다. 이 블로그는 &lt;code&gt;acme/hello-world&lt;/code&gt; 에 의존하며, &lt;code&gt;monolog/monolog&lt;/code&gt; 에 의존합니다 . &lt;code&gt;composer.json&lt;/code&gt; 을 포함하는 새로운 &lt;code&gt;blog&lt;/code&gt; 디렉토리 를 작성하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4587b368346a74605e0d40b442bfdf26f03c54d5" translate="yes" xml:space="preserve">
          <source>On PHP 5.6+, the class map is also cached in opcache which improves the initialization time greatly. If you make sure opcache is enabled, then the class map should load almost instantly and then class loading is fast.</source>
          <target state="translated">PHP 5.6 이상에서는 클래스 맵이 opcache에 캐시되어 초기화 시간이 크게 향상됩니다. opcache가 활성화되어 있으면 클래스 맵이 거의 즉시로드되고 클래스 로딩이 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="ae3c3db6d2a031bc3ad36779c6b3e1cdc1fa2c2a" translate="yes" xml:space="preserve">
          <source>On linux, it seems that running this command helps to make ipv4 traffic have a higher prio than ipv6, which is a better alternative than disabling ipv6 entirely:</source>
          <target state="translated">Linux에서이 명령을 실행하면 ipv4 트래픽이 ipv6보다 높은 prio를 갖는 데 도움이되는 것으로 보입니다. ipv6를 완전히 비활성화하는 것보다 더 나은 대안입니다.</target>
        </trans-unit>
        <trans-unit id="4cfae3e0baae856236b797ca3f70b48ef9740a1d" translate="yes" xml:space="preserve">
          <source>On windows the only way is to disable ipv6 entirely I am afraid (either in windows or in your home router).</source>
          <target state="translated">Windows에서 유일한 방법은 ipv6을 완전히 비활성화하는 것입니다 (Windows 또는 홈 라우터에서).</target>
        </trans-unit>
        <trans-unit id="f4caa5db27c7bbfc7acf3e76298574742a7900d8" translate="yes" xml:space="preserve">
          <source>Once enabled, all downloads (include those from GitHub and BitBucket) will be replaced with a &lt;em&gt;local&lt;/em&gt; version.</source>
          <target state="translated">활성화되면 모든 다운로드 (GitHub 및 BitBucket의 다운로드 포함)가 &lt;em&gt;로컬&lt;/em&gt; 버전 으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="3c8ecb0a49d67dfd20f0c2a0a5ec46c497e69fbc" translate="yes" xml:space="preserve">
          <source>Once you have a VCS repository (version control system, e.g. git) containing a &lt;code&gt;composer.json&lt;/code&gt; file, your library is already composer-installable. In this example we will publish the &lt;code&gt;acme/hello-world&lt;/code&gt; library on GitHub under &lt;code&gt;github.com/username/hello-world&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 파일을 포함하는 VCS 저장소 (버전 제어 시스템 (예 : git))가 있으면 라이브러리는 이미 작곡가 설치 가능합니다. 이 예에서는 GitHub의 &lt;code&gt;github.com/username/hello-world&lt;/code&gt; 에 &lt;code&gt;acme/hello-world&lt;/code&gt; 라이브러리를 게시합니다 .</target>
        </trans-unit>
        <trans-unit id="2be4082b951f4b0fec0a31f2ad0abe0239fad5f2" translate="yes" xml:space="preserve">
          <source>Once you've done this, you run:</source>
          <target state="translated">이 작업을 완료하면 다음을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="8041e10b705dc85b075554596c8ea75b31b23844" translate="yes" xml:space="preserve">
          <source>One limitation of this is that you can not call multiple commands in a row like &lt;code&gt;@php install &amp;amp;&amp;amp; @php foo&lt;/code&gt;. You must split them up in a JSON array of commands.</source>
          <target state="translated">이것의 한 가지 제한은 &lt;code&gt;@php install &amp;amp;&amp;amp; @php foo&lt;/code&gt; 와 같은 여러 명령을 연속해서 호출 할 수 없다는 것 입니다. JSON 배열의 명령으로 분할해야합니다.</target>
        </trans-unit>
        <trans-unit id="09f49662c505ecd16b312d8170a9b9c8b2a7367b" translate="yes" xml:space="preserve">
          <source>One limitation of this is that you can not call multiple composer commands in a row like &lt;code&gt;@composer install &amp;amp;&amp;amp; @composer foo&lt;/code&gt;. You must split them up in a JSON array of commands.</source>
          <target state="translated">이것의 한 가지 제한은 &lt;code&gt;@composer install &amp;amp;&amp;amp; @composer foo&lt;/code&gt; 와 같은 행에서 여러 개의 composer 명령을 호출 할 수 없다는 것 입니다. JSON 배열의 명령으로 분할해야합니다.</target>
        </trans-unit>
        <trans-unit id="88a71808a6e53aa8ac0a7288de26ea1f6ebb9c6c" translate="yes" xml:space="preserve">
          <source>Only use a custom type if you need custom logic during installation. It is recommended to omit this field and have it default to &lt;code&gt;library&lt;/code&gt;.</source>
          <target state="translated">설치 중에 사용자 정의 논리가 필요한 경우에만 사용자 정의 유형을 사용하십시오. 이 필드를 생략하고 기본값을 &lt;code&gt;library&lt;/code&gt; 로 설정하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="5ca29842b6366a87b12b2dfc5e1f8ba42909a4e8" translate="yes" xml:space="preserve">
          <source>Open regedit.</source>
          <target state="translated">regedit를여십시오.</target>
        </trans-unit>
        <trans-unit id="35064de80e652d77dcded899337a2daf36a48c6a" translate="yes" xml:space="preserve">
          <source>Operation timed out (IPv6 issues)</source>
          <target state="translated">작업 시간 초과 (IPv6 문제)</target>
        </trans-unit>
        <trans-unit id="e98a8860ae41df2f164bc4524d7707c1fa03e9cb" translate="yes" xml:space="preserve">
          <source>Optimization Level 1: Class map generation</source>
          <target state="translated">최적화 레벨 1 : 클래스 맵 생성</target>
        </trans-unit>
        <trans-unit id="b88ba88fdefd32d130d14691f8cd9af2d80e4300" translate="yes" xml:space="preserve">
          <source>Optimization Level 2/A: Authoritative class maps</source>
          <target state="translated">최적화 수준 2 / A : 신뢰할 수있는 클래스 맵</target>
        </trans-unit>
        <trans-unit id="374cf1c74f6c9b8b61c87ca0039a7ef67526d9ae" translate="yes" xml:space="preserve">
          <source>Optimization Level 2/B: APCu cache</source>
          <target state="translated">최적화 레벨 2 / B : APCu 캐시</target>
        </trans-unit>
        <trans-unit id="dcb8c77ab80793f9f37a1a328a3f0f9842d229c7" translate="yes" xml:space="preserve">
          <source>Optimizing the autoloader</source>
          <target state="translated">오토로더 최적화</target>
        </trans-unit>
        <trans-unit id="ff1450379f5e57929e363c8b2643a47a4501cc42" translate="yes" xml:space="preserve">
          <source>Optional if the package repository can infer the version from somewhere, such as the VCS tag name in the VCS repository. In that case it is also recommended to omit it.</source>
          <target state="translated">패키지 저장소가 VCS 저장소의 VCS 태그 이름과 같은 다른 곳에서 버전을 유추 할 수있는 경우 선택 사항입니다. 이 경우 생략하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5d05d2dd7183d099b1103019a900abd314417d7a" translate="yes" xml:space="preserve">
          <source>Optional, but highly recommended.</source>
          <target state="translated">선택 사항이지만 적극 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="5a6e381addee65c08c090c3ca7506df2c0160b90" translate="yes" xml:space="preserve">
          <source>Optional, but it is highly recommended to supply this. More identifiers are listed at the &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX Open Source License Registry&lt;/a&gt;.</source>
          <target state="translated">선택 사항이지만이를 제공하는 것이 좋습니다. &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX Open Source License Registry에&lt;/a&gt; 더 많은 식별자가 나열되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4149a55fc8e55fc8490190fca6fd327f9a538b3" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="debe6f39ae1c4b3cf5d5b85436ee9ae9c53b497c" translate="yes" xml:space="preserve">
          <source>Options explained</source>
          <target state="translated">옵션 설명</target>
        </trans-unit>
        <trans-unit id="b0a85adf308424bc26224008cff29d5723289ca4" translate="yes" xml:space="preserve">
          <source>Or let composer add it for you with:</source>
          <target state="translated">또는 작곡가가 당신을 위해 그것을 추가하도록하십시오 :</target>
        </trans-unit>
        <trans-unit id="920735b63b1ba85cdd5521f7e488d6c682247074" translate="yes" xml:space="preserve">
          <source>Or, you can increase the limit with a command-line argument:</source>
          <target state="translated">또는 명령 행 인수를 사용하여 한계를 늘릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d291165f3e48fa04de2df661e5577d3237e36a86" translate="yes" xml:space="preserve">
          <source>Other options</source>
          <target state="translated">다른 옵션</target>
        </trans-unit>
        <trans-unit id="7c4bcdf19c07367e085db3c2d0ddc529436b907b" translate="yes" xml:space="preserve">
          <source>Out of the box, Composer supports four types:</source>
          <target state="translated">기본적으로 Composer는 다음 네 가지 유형을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="145c01c620170c3ab3ab1215a0dfe84a56338dba" translate="yes" xml:space="preserve">
          <source>PEAR</source>
          <target state="translated">PEAR</target>
        </trans-unit>
        <trans-unit id="b6e0d0c69cff41f30dce51b7b05962b13a29ec59" translate="yes" xml:space="preserve">
          <source>PHP classes containing defined callbacks must be autoloadable via Composer's autoload functionality.</source>
          <target state="translated">정의 된 콜백을 포함하는 PHP 클래스는 Composer의 자동로드 기능을 통해 자동로드 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="7b85166b23e4fdb8a3f3d6707be258197c2f05da" translate="yes" xml:space="preserve">
          <source>PSR-0</source>
          <target state="translated">PSR-0</target>
        </trans-unit>
        <trans-unit id="68e25a577a611f4f331ecea46a4359c671d2e74e" translate="yes" xml:space="preserve">
          <source>PSR-4</source>
          <target state="translated">PSR-4</target>
        </trans-unit>
        <trans-unit id="52d9c7a80cbf6e9fceabf8a3117045a2cd4cbe6c" translate="yes" xml:space="preserve">
          <source>PSR-4 is the recommended way since it offers greater ease of use (no need to regenerate the autoloader when you add classes).</source>
          <target state="translated">PSR-4는 사용 편의성이 뛰어나므로 클래스를 추가 할 때 오토로더를 재생성 할 필요가 없으므로 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes" xml:space="preserve">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="d7e71fb265e121afa484cb13fc09323bdb91f3e1" translate="yes" xml:space="preserve">
          <source>Package 'A' has been added</source>
          <target state="translated">패키지 'A'가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="9a667517c8b326864c27274f7bc979b19403c775" translate="yes" xml:space="preserve">
          <source>Package 'B' has been removed and package 'C' is added.</source>
          <target state="translated">패키지 'B'가 제거되고 패키지 'C'가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="d73077614a8918bcc7ab02c45fb25c2c3ea664b3" translate="yes" xml:space="preserve">
          <source>Package Events</source>
          <target state="translated">패키지 이벤트</target>
        </trans-unit>
        <trans-unit id="9cd2dccd7cba2c30aa43f6a4a27d8a1ba63796dd" translate="yes" xml:space="preserve">
          <source>Package Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/PackageEvent.html&quot;&gt;&lt;code&gt;Composer\Installer\PackageEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">패키지 이벤트 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/PackageEvent.html&quot;&gt; &lt;code&gt;Composer\Installer\PackageEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7ee708da2b2b4ac2f2b6dc1f83560afdbaa61c3" translate="yes" xml:space="preserve">
          <source>Package links</source>
          <target state="translated">패키지 링크</target>
        </trans-unit>
        <trans-unit id="7808007c934c54e5e8c20cde242071f3de2b4543" translate="yes" xml:space="preserve">
          <source>Package names</source>
          <target state="translated">패키지 이름</target>
        </trans-unit>
        <trans-unit id="9b6676118da40f238ed9660264a2908784ef4d5f" translate="yes" xml:space="preserve">
          <source>Package not found</source>
          <target state="translated">패키지를 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="65bf5a7cd4916964c223ea4dc17425667807c1c9" translate="yes" xml:space="preserve">
          <source>Package not found in a Jenkins-build</source>
          <target state="translated">Jenkins 빌드에서 패키지를 찾을 수 없음</target>
        </trans-unit>
        <trans-unit id="cf7ada2ffe27de5fe65906b47c96e5bf9be8d26c" translate="yes" xml:space="preserve">
          <source>Package not found on travis-ci.org</source>
          <target state="translated">travis-ci.org에 패키지가 없습니다</target>
        </trans-unit>
        <trans-unit id="9d66039c4da8ed7be8986cbc17aef4f92c7e728d" translate="yes" xml:space="preserve">
          <source>Package types are used for custom installation logic. If you have a package that needs some special logic, you can define a custom type. This could be a &lt;code&gt;symfony-bundle&lt;/code&gt;, a &lt;code&gt;wordpress-plugin&lt;/code&gt; or a &lt;code&gt;typo3-cms-extension&lt;/code&gt;. These types will all be specific to certain projects, and they will need to provide an installer capable of installing packages of that type.</source>
          <target state="translated">패키지 유형은 사용자 정의 설치 로직에 사용됩니다. 특별한 로직이 필요한 패키지가있는 경우 사용자 정의 유형을 정의 할 수 있습니다. 이것은 &lt;code&gt;symfony-bundle&lt;/code&gt; , &lt;code&gt;wordpress-plugin&lt;/code&gt; 또는 &lt;code&gt;typo3-cms-extension&lt;/code&gt; 일 수 있습니다. 이러한 유형은 모두 특정 프로젝트에 따라 다르며 해당 유형의 패키지를 설치할 수있는 설치 프로그램을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="b1148d2ffb47e8ac173078f14c3968dd49a99de0" translate="yes" xml:space="preserve">
          <source>Package version constraints</source>
          <target state="translated">패키지 버전 제약</target>
        </trans-unit>
        <trans-unit id="7795b2a652dd3647020427af8e59a1a34d64b2c1" translate="yes" xml:space="preserve">
          <source>Packages &lt;strong&gt;not coming from &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;&lt;/strong&gt; should always be &lt;strong&gt;defined in the root package&lt;/strong&gt; (the package depending on all vendors).</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; 에서 제공되지 않는&lt;/strong&gt; 패키지 는 항상 &lt;strong&gt;루트 패키지&lt;/strong&gt; (모든 공급 업체에 따라 패키지)에 &lt;strong&gt;정의&lt;/strong&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f2f1d4136f717c17ab1127fb36edacfeb63c693f" translate="yes" xml:space="preserve">
          <source>Packages can supply either of these, or even both. Depending on certain factors, such as user-supplied options and stability of the package, one will be preferred.</source>
          <target state="translated">패키지는 이들 중 하나 또는 둘 다를 제공 할 수 있습니다. 사용자 제공 옵션 및 패키지의 안정성과 같은 특정 요소에 따라 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="880f5abce3a48ec9c69994966d82b07c36f2c125" translate="yes" xml:space="preserve">
          <source>Packages managed entirely by Composer do not &lt;em&gt;need&lt;/em&gt; to contain any &lt;code&gt;.bat&lt;/code&gt; files for Windows compatibility. Composer handles installation of binaries in a special way when run in a Windows environment:</source>
          <target state="translated">Composer가 전적으로 관리하는 패키지 는 Windows 호환성을 위해 &lt;code&gt;.bat&lt;/code&gt; 파일 을 포함 하지 &lt;em&gt;않아도&lt;/em&gt; 됩니다. Composer는 Windows 환경에서 실행될 때 특별한 방법으로 바이너리 설치를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="26055ee12e3b8d847d880cd6592b032b9f872d9a" translate="yes" xml:space="preserve">
          <source>Packages that need to support workflows that may not include Composer are welcome to maintain custom &lt;code&gt;.bat&lt;/code&gt; files. In this case, the package should &lt;strong&gt;not&lt;/strong&gt; list the &lt;code&gt;.bat&lt;/code&gt; file as a binary as it is not needed.</source>
          <target state="translated">Composer가 포함되지 않은 워크 플로를 지원해야하는 패키지는 사용자 지정 &lt;code&gt;.bat&lt;/code&gt; 파일 을 유지 관리 할 수 있습니다. 이 경우 패키지는 &lt;code&gt;.bat&lt;/code&gt; 파일을 필요하지 않은 바이너리로 나열 해서는 &lt;strong&gt;안됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c6250cdaf320b82f3e5a0d36976d129cdc787296" translate="yes" xml:space="preserve">
          <source>Packagist</source>
          <target state="translated">Packagist</target>
        </trans-unit>
        <trans-unit id="2f4831d117e9d70eb059538b163468d2567d16f0" translate="yes" xml:space="preserve">
          <source>Partial Updates</source>
          <target state="translated">부분 업데이트</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="ad2829254401108e3844a1de487b4372c115fc25" translate="yes" xml:space="preserve">
          <source>Performance wise, it is more efficient to stop looking for a package once it has been found somewhere. It also avoids loading duplicate packages in case the same package is present in several of your repositories.</source>
          <target state="translated">성능면에서 패키지가 어딘가에서 발견되면 검색을 중지하는 것이 더 효율적입니다. 또한 여러 리포지토리에 동일한 패키지가있는 경우 중복 패키지로드를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="0d9776d65bb139d77461c1b341dbd407269c2727" translate="yes" xml:space="preserve">
          <source>Platform check</source>
          <target state="translated">플랫폼 확인</target>
        </trans-unit>
        <trans-unit id="70bff551342eea6aa8f97b6fb1a2dd9985b39fe4" translate="yes" xml:space="preserve">
          <source>Platform packages</source>
          <target state="translated">플랫폼 패키지</target>
        </trans-unit>
        <trans-unit id="96d94578c257f290e0c3f650c9d7c1b66632be47" translate="yes" xml:space="preserve">
          <source>Please note namespace declarations should end in &lt;code&gt;\\&lt;/code&gt; to make sure the autoloader responds exactly. For example &lt;code&gt;Foo&lt;/code&gt; would match in &lt;code&gt;FooBar&lt;/code&gt; so the trailing backslashes solve the problem: &lt;code&gt;Foo\\&lt;/code&gt; and &lt;code&gt;FooBar\\&lt;/code&gt; are distinct.</source>
          <target state="translated">오토로더가 정확하게 응답하도록 네임 스페이스 선언은 &lt;code&gt;\\&lt;/code&gt; 로 끝나야 합니다. 예를 들어 &lt;code&gt;Foo&lt;/code&gt; 는 &lt;code&gt;FooBar&lt;/code&gt; 에서 일치 하므로 후행 백 슬래시는 문제를 해결합니다. &lt;code&gt;Foo\\&lt;/code&gt; 와 &lt;code&gt;FooBar\\&lt;/code&gt; 는 고유합니다.</target>
        </trans-unit>
        <trans-unit id="b092b192a4d648e172b4a375b0666e778cde5015" translate="yes" xml:space="preserve">
          <source>Please note:</source>
          <target state="translated">참고 사항 :</target>
        </trans-unit>
        <trans-unit id="dc8572ee2a167aa3f336a06359c0636a878ee8b8" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;articles/versions.md&quot;&gt;versions&lt;/a&gt; for more in-depth information on versions, how versions relate to each other, and on version constraints.</source>
          <target state="translated">버전, 버전 간의 관계 및 버전 제약에 대한 자세한 정보는 &lt;a href=&quot;articles/versions.md&quot;&gt;버전&lt;/a&gt; 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="2727c3578f91631c9e0a5c09bb235062be698f63" translate="yes" xml:space="preserve">
          <source>Plugin Class</source>
          <target state="translated">플러그인 클래스</target>
        </trans-unit>
        <trans-unit id="fbdd2cb4c3815c09ac6f353fde19990df0b826d0" translate="yes" xml:space="preserve">
          <source>Plugin Events</source>
          <target state="translated">플러그인 이벤트</target>
        </trans-unit>
        <trans-unit id="1df4349176f4606f4b4fc1a4c20f4de9c5fe741c" translate="yes" xml:space="preserve">
          <source>Plugin Events:</source>
          <target state="translated">플러그인 이벤트 :</target>
        </trans-unit>
        <trans-unit id="b3ad04f22d54df0016ba8be7060e98cded71cf05" translate="yes" xml:space="preserve">
          <source>Plugin Extra Attributes</source>
          <target state="translated">플러그인 추가 속성</target>
        </trans-unit>
        <trans-unit id="3479aa3f4d328ba5454caec581088ea0b3b96289" translate="yes" xml:space="preserve">
          <source>Plugin Helpers</source>
          <target state="translated">플러그인 도우미</target>
        </trans-unit>
        <trans-unit id="f2d09e4541ac1902ecf8252c0d5a538540c73aee" translate="yes" xml:space="preserve">
          <source>Plugin Package</source>
          <target state="translated">플러그인 패키지</target>
        </trans-unit>
        <trans-unit id="e1e8cb868c4b032adc5e4c82f96fadede05e328f" translate="yes" xml:space="preserve">
          <source>Plugin capabilities</source>
          <target state="translated">플러그인 기능</target>
        </trans-unit>
        <trans-unit id="939e4feaf4b53fdc5c48d1d3c8e2c6206d42b692" translate="yes" xml:space="preserve">
          <source>Plugin packages are automatically loaded as soon as they are installed and will be loaded when Composer starts up if they are found in the current project's list of installed packages. Additionally all plugin packages installed in the &lt;code&gt;COMPOSER_HOME&lt;/code&gt; directory using the Composer global command are loaded before local project plugins are loaded.</source>
          <target state="translated">플러그인 패키지는 설치되는 즉시 자동으로로드되며 현재 프로젝트의 설치된 패키지 목록에있는 경우 Composer가 시작될 때로드됩니다. 또한 Composer 전역 명령을 사용하여 &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 디렉토리에 설치된 모든 플러그인 패키지 는 로컬 프로젝트 플러그인이로드되기 전에로드됩니다.</target>
        </trans-unit>
        <trans-unit id="a53d056c00a56390bd56f3c78f912907c666bd3c" translate="yes" xml:space="preserve">
          <source>Plugin packages are automatically loaded as soon as they are installed and will be loaded when composer starts up if they are found in the current project's list of installed packages. Additionally all plugin packages installed in the &lt;code&gt;COMPOSER_HOME&lt;/code&gt; directory using the composer global command are loaded before local project plugins are loaded.</source>
          <target state="translated">플러그인 패키지는 설치되는 즉시 자동으로로드되며 현재 프로젝트의 설치된 패키지 목록에서 컴포저가 시작될 때로드됩니다. 또한 composer global 명령을 사용하여 &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 디렉토리에 설치된 모든 플러그인 패키지 는 로컬 프로젝트 플러그인이로드되기 전에로드됩니다.</target>
        </trans-unit>
        <trans-unit id="b7c6ef4a80a2bb0071c2036b48d6fd0521467b1a" translate="yes" xml:space="preserve">
          <source>Plugins for an event can be run manually by the &lt;code&gt;run-script&lt;/code&gt; command. This works the same way as &lt;a href=&quot;scripts.md#running-scripts-manually&quot;&gt;running scripts manually&lt;/a&gt;.</source>
          <target state="translated">이벤트 용 플러그인은 &lt;code&gt;run-script&lt;/code&gt; 명령 으로 수동으로 실행할 수 있습니다 . 이것은 &lt;a href=&quot;scripts.md#running-scripts-manually&quot;&gt;스크립트를 수동으로 실행&lt;/a&gt; 하는 것과 같은 방식으로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="17141dcfb65c0d75c4b8fa523d332056f8473365" translate="yes" xml:space="preserve">
          <source>Prefixing the URL with another host is especially helpful if the downloads end up in a private Amazon S3 bucket or on a CDN host. A CDN would drastically improve download times and therefore package installation.</source>
          <target state="translated">다운로드가 개인 Amazon S3 버킷 또는 CDN 호스트에있는 경우 다른 호스트에 URL을 접두어로 사용하면 특히 유용합니다. CDN은 다운로드 시간을 대폭 향상시켜 패키지 설치를 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="3dbe65a0c8818c614259574a8fd951bbed420749" translate="yes" xml:space="preserve">
          <source>Private Packagist</source>
          <target state="translated">개인 팩커 지스트</target>
        </trans-unit>
        <trans-unit id="0b2b487a5d607bb7624863de43f47569bd855362" translate="yes" xml:space="preserve">
          <source>Private Packagist is available as a hosted SaaS solution or as an on-premise self-hosted package, providing an easy interactive set up experience.</source>
          <target state="translated">Private Packagist는 호스팅 된 SaaS 솔루션 또는 온-프레미스 자체 호스팅 패키지로 제공되어 대화식 설정 환경을 쉽게 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5275553dcbbff9ce7afe4e381bf1e55a09ac3c82" translate="yes" xml:space="preserve">
          <source>Private Packagist is available as a hosted SaaS solution or as an on-premise self-hosted package, providing an interactive set up experience.</source>
          <target state="translated">Private Packagist는 호스팅 된 SaaS 솔루션 또는 온 프레미스 자체 호스팅 패키지로 제공되어 대화 형 설정 경험을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="27ffe1daea0160bc5786db4606d8a83b60d8853e" translate="yes" xml:space="preserve">
          <source>Process Exit Codes</source>
          <target state="translated">프로세스 종료 코드</target>
        </trans-unit>
        <trans-unit id="cf2d7e79920f5805b436bb910c9b0246a2e2d54d" translate="yes" xml:space="preserve">
          <source>Projects with multiple developers can use this feature to bootstrap the initial application for development.</source>
          <target state="translated">여러 개발자가있는 프로젝트는이 기능을 사용하여 개발을 위해 초기 응용 프로그램을 부트 스트랩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="51d00bce44383befa1de652a2c9d7a4923aa0aa3" translate="yes" xml:space="preserve">
          <source>Publishing to a VCS</source>
          <target state="translated">VCS에 게시</target>
        </trans-unit>
        <trans-unit id="42996cc0d06a03dc418669f81467080a796b0d5a" translate="yes" xml:space="preserve">
          <source>Publishing to packagist</source>
          <target state="translated">packagist에 게시</target>
        </trans-unit>
        <trans-unit id="90648a9b69d6e473de40f812b8e2311c4bc465c2" translate="yes" xml:space="preserve">
          <source>Read more about publishing packages and package naming &lt;a href=&quot;02-libraries.md&quot;&gt;here&lt;/a&gt;. (Note that you can also specify &quot;platform packages&quot; as dependencies, allowing you to require certain versions of server software. See &lt;a href=&quot;#platform-packages&quot;&gt;platform packages&lt;/a&gt; below.)</source>
          <target state="translated">패키지 게시 및 패키지 이름 지정에 대한 자세한 내용은 &lt;a href=&quot;02-libraries.md&quot;&gt;여기를 참조하십시오&lt;/a&gt; . (또한 &quot;플랫폼 패키지&quot;를 종속성으로 지정할 수 있으므로 특정 버전의 서버 소프트웨어가 필요할 수 있습니다. 아래 &lt;a href=&quot;#platform-packages&quot;&gt;플랫폼 패키지를&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="681d40c1d15168cc59415bffa0703c0b2c2a59fc" translate="yes" xml:space="preserve">
          <source>Reason for failing is similar to the problem which can occur on travis-ci.org: The git-clone / checkout within Jenkins leaves the branch in a &quot;detached HEAD&quot;-state. As a result, Composer is not able to identify the version of the current checked out branch and may not be able to resolve a cyclic dependency. To solve this problem, you can use the &quot;Additional Behaviours&quot; -&amp;gt; &quot;Check out to specific local branch&quot; in your Git-settings for your Jenkins-job, where your &quot;local branch&quot; shall be the same branch as you are checking out. Using this, the checkout will not be in detached state any more and cyclic dependency is recognized correctly.</source>
          <target state="translated">실패 이유는 travis-ci.org에서 발생할 수있는 문제와 유사합니다. Jenkins의 git-clone / checkout은 분기를 &quot;분리 된 HEAD&quot;상태로 둡니다. 결과적으로 Composer는 현재 체크 아웃 된 분기의 버전을 식별 할 수 없으며 주기적 종속성을 해결할 수 없습니다. 이 문제를 해결하기 위해 Jenkins 작업에 대한 Git 설정에서 &quot;추가 행동&quot;-&amp;gt; &quot;특정 지역 지점을 체크 아웃&quot;을 사용할 수 있습니다. 여기서 &quot;로컬 지점&quot;은 체크 아웃하는 지점과 동일합니다. . 이를 사용하면 체크 아웃이 더 이상 분리 상태가 아니고 주기적 종속성이 올바르게 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="e65b862a7b98484b46ff204d10dc79c7f23dbb75" translate="yes" xml:space="preserve">
          <source>Referencing scripts</source>
          <target state="translated">스크립트 참조</target>
        </trans-unit>
        <trans-unit id="658a9348d9a36546995e485b083535db9c64517f" translate="yes" xml:space="preserve">
          <source>Release date of the version.</source>
          <target state="translated">버전의 출시일.</target>
        </trans-unit>
        <trans-unit id="c91e6e6a538a5087a64a99718ae975966b761c1e" translate="yes" xml:space="preserve">
          <source>Repositories</source>
          <target state="translated">Repositories</target>
        </trans-unit>
        <trans-unit id="605e324dd79c33933203988a504354e6dc37d2e2" translate="yes" xml:space="preserve">
          <source>Repositories are not resolved recursively. You can only add them to your main &lt;code&gt;composer.json&lt;/code&gt;. Repository declarations of dependencies' &lt;code&gt;composer.json&lt;/code&gt;s are ignored.</source>
          <target state="translated">리포지토리는 재귀 적으로 해결되지 않습니다. 메인 &lt;code&gt;composer.json&lt;/code&gt; 에만 추가 할 수 있습니다 . 의존성 &lt;code&gt;composer.json&lt;/code&gt; 의 저장소 선언 은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b677b0048a64154830ece638e2fb27b8f835437b" translate="yes" xml:space="preserve">
          <source>Repositories are only available to the root package and the repositories defined in your dependencies will not be loaded. Read the &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;FAQ entry&lt;/a&gt; if you want to learn why.</source>
          <target state="translated">리포지토리는 루트 패키지에서만 사용할 수 있으며 종속성에 정의 된 리포지토리는로드되지 않습니다. 이유를 배우려면 &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;FAQ 항목을&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="312386841084261c610413fa4de8b7505f469407" translate="yes" xml:space="preserve">
          <source>Repository</source>
          <target state="translated">Repository</target>
        </trans-unit>
        <trans-unit id="44f131c5603e41419832bde00b1a2ea7e3c8989a" translate="yes" xml:space="preserve">
          <source>Repository priorities</source>
          <target state="translated">저장소 우선 순위</target>
        </trans-unit>
        <trans-unit id="0e55ca59eef1f33d943a8c14fb2edc1bffd9bc99" translate="yes" xml:space="preserve">
          <source>Require inline alias</source>
          <target state="translated">인라인 별칭 필요</target>
        </trans-unit>
        <trans-unit id="636bb9b3d34f25b03a23fc4011cb6c5b95c66512" translate="yes" xml:space="preserve">
          <source>Required for published packages (libraries).</source>
          <target state="translated">게시 된 패키지 (라이브러리)에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="67e63d91858ebf302948af233d78d205f3631584" translate="yes" xml:space="preserve">
          <source>Resolving dependencies</source>
          <target state="translated">의존성 해결</target>
        </trans-unit>
        <trans-unit id="7df340696239be071a6387a173de98047fbbf300" translate="yes" xml:space="preserve">
          <source>Resolving merge conflicts</source>
          <target state="translated">병합 충돌 해결</target>
        </trans-unit>
        <trans-unit id="bf3c723943afb10b30be5099934d0061dde1b3a0" translate="yes" xml:space="preserve">
          <source>Root Package</source>
          <target state="translated">루트 패키지</target>
        </trans-unit>
        <trans-unit id="40a11bc6f420df54a1cc6ac2f27779f1a22bcf02" translate="yes" xml:space="preserve">
          <source>Run composer ...</source>
          <target state="translated">작곡가 실행 ...</target>
        </trans-unit>
        <trans-unit id="02c176abc5d53a5cddcb7db60b388f7f2db17a9f" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will look at all of project-a's binaries and install them to &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;composer.json&lt;/code&gt; 에 대해 &lt;code&gt;composer install&lt;/code&gt; 을 실행 하면 project-a의 모든 바이너리를보고 &lt;code&gt;vendor/bin&lt;/code&gt; 에 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="77d6c9754e9d79e4c035466336d20ed9c56cf340" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will not do anything with &lt;code&gt;bin/project-a-bin&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;composer.json&lt;/code&gt; 에 대해 &lt;code&gt;composer install&lt;/code&gt; 을 실행 하면 &lt;code&gt;bin/project-a-bin&lt;/code&gt; 으로 아무것도 수행하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2c66496e4b8a83692d805b42d3fb10a45cf55a2b" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will result in all of the vendor binaries being installed in &lt;code&gt;scripts/&lt;/code&gt; instead of &lt;code&gt;vendor/bin/&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;composer.json&lt;/code&gt; 에 대해 &lt;code&gt;composer install&lt;/code&gt; 를 실행 하면 모든 공급 업체 바이너리가 &lt;code&gt;vendor/bin/&lt;/code&gt; 대신 &lt;code&gt;scripts/&lt;/code&gt; 에 설치됩니다 .</target>
        </trans-unit>
        <trans-unit id="462d1db361dd2705327cbd57e61bc116206a5b83" translate="yes" xml:space="preserve">
          <source>Running plugins manually</source>
          <target state="translated">플러그인 수동 실행</target>
        </trans-unit>
        <trans-unit id="63661918ff1f46e010610418f83ba15536a0edad" translate="yes" xml:space="preserve">
          <source>Running scripts manually</source>
          <target state="translated">수동으로 스크립트 실행</target>
        </trans-unit>
        <trans-unit id="8861341a898eeb91230e3b848a71f1a26a30d2d8" translate="yes" xml:space="preserve">
          <source>Runtime Composer utilities</source>
          <target state="translated">Runtime Composer 유틸리티</target>
        </trans-unit>
        <trans-unit id="69ae939a6e24536ac11cc6467262835c9ffe1ab4" translate="yes" xml:space="preserve">
          <source>Satis</source>
          <target state="translated">Satis</target>
        </trans-unit>
        <trans-unit id="afa4ca2e1dad5257bc45bcb2ae3345ecd9520e05" translate="yes" xml:space="preserve">
          <source>Satis is a static &lt;code&gt;composer&lt;/code&gt; repository generator. It is a bit like an ultra- lightweight, static file-based version of packagist.</source>
          <target state="translated">Satis는 정적 &lt;code&gt;composer&lt;/code&gt; 저장소 생성기입니다. 그것은 초경량의 정적 파일 기반 버전의 packagist와 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="0ade51e1e159b2e3e7fa56b4472a1503e5ac6f7d" translate="yes" xml:space="preserve">
          <source>Satis on the other hand is open source but only a static &lt;code&gt;composer&lt;/code&gt; repository generator. It is a bit like an ultra-lightweight, static file-based version of packagist and can be used to host the metadata of your company's private packages, or your own. You can get it from &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;GitHub&lt;/a&gt; or install via CLI:</source>
          <target state="translated">반면 Satis는 오픈 소스이지만 정적 &lt;code&gt;composer&lt;/code&gt; 저장소 생성기입니다. 이것은 초경량의 정적 파일 기반 버전의 packagist와 비슷하며 회사의 개인 패키지 또는 자체 패키지의 메타 데이터를 호스팅하는 데 사용할 수 있습니다. &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;GitHub&lt;/a&gt; 에서 가져 오거나 CLI를 통해 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3085f6884448b8a839b11cdf3feb5ca13ee5f95f" translate="yes" xml:space="preserve">
          <source>Say package &lt;code&gt;my-vendor/project-a&lt;/code&gt; has binaries setup like this:</source>
          <target state="translated">&lt;code&gt;my-vendor/project-a&lt;/code&gt; 패키지에 다음과 같은 바이너리 설정이 있다고 가정 해보십시오.</target>
        </trans-unit>
        <trans-unit id="876d059b9d11b42563fa49538d722751048969b4" translate="yes" xml:space="preserve">
          <source>Say project &lt;code&gt;my-vendor/project-b&lt;/code&gt; has requirements setup like this:</source>
          <target state="translated">말은 프로젝트 &lt;code&gt;my-vendor/project-b&lt;/code&gt; 이 같은 요구 사항 설정이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="141f05a2d444aedb2a416b6f6aa967c248a38bdb" translate="yes" xml:space="preserve">
          <source>Script definition example:</source>
          <target state="translated">스크립트 정의 예 :</target>
        </trans-unit>
        <trans-unit id="381e3298b2b8f6caeb2208b57d805ada38402f0b" translate="yes" xml:space="preserve">
          <source>Scripts</source>
          <target state="translated">Scripts</target>
        </trans-unit>
        <trans-unit id="8c20810320df84c5a3a66b73a1a4a6799911bd24" translate="yes" xml:space="preserve">
          <source>Scripts execute in the order defined when their corresponding event is fired.</source>
          <target state="translated">스크립트는 해당 이벤트가 실행될 때 정의 된 순서대로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bca27a084b31f7d5711e8aa95a27580b07d7ceb8" translate="yes" xml:space="preserve">
          <source>Search for an &lt;code&gt;AutoRun&lt;/code&gt; key inside &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor&lt;/code&gt;, &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt; or &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Command Processor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor&lt;/code&gt; , &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt; 또는 &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Command Processor&lt;/code&gt; 에서 &lt;code&gt;AutoRun&lt;/code&gt; 키를 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="6a93cc0baff4a93688d827f28c6b489d9d7ef140" translate="yes" xml:space="preserve">
          <source>Security wise, it is safer to treat them canonically as it means that packages you expect to come from your most important repositories will never be loaded from another repository instead. Let's say you have a private repository which is not canonical, and you require your private package &lt;code&gt;foo/bar ^2.0&lt;/code&gt; for example. Now if someone publishes &lt;code&gt;foo/bar 2.999&lt;/code&gt; to packagist.org, suddenly Composer will pick that package as it has a higher version than your latest release (say 2.4.3), and you end up installing something you may not have meant to. If the private repository is canonical however, that 2.999 version from packagist.org will not be considered at all.</source>
          <target state="translated">보안 측면에서는 가장 중요한 리포지토리에서 가져올 것으로 예상되는 패키지가 다른 리포지토리에서로드되지 않기 때문에이를 정식으로 처리하는 것이 더 안전합니다. 정식이 아닌 개인 저장소가 있고 예를 들어 개인 패키지 &lt;code&gt;foo/bar ^2.0&lt;/code&gt; 이 필요하다고 가정 해 보겠습니다 . 이제 누군가가 &lt;code&gt;foo/bar 2.999&lt;/code&gt; 를 packagist.org에 게시하면 갑자기 Composer가 해당 패키지가 최신 릴리스 (예 : 2.4.3)보다 높은 버전을 가지고 있기 때문에 해당 패키지를 선택하고 의도하지 않은 것을 설치하게됩니다. 그러나 개인 저장소가 표준 인 경우 packagist.org의 2.999 버전은 전혀 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2f2e0cfb9b921677358c2029c8aa562157bb4028" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;aliases.md&quot;&gt;aliases&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;aliases.md&quot;&gt;별명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9fa3e83b7d0fca52d3747da12efee577c92ff227" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;articles/scripts.md&quot;&gt;Scripts&lt;/a&gt; for events details and examples.</source>
          <target state="translated">이벤트 세부 사항 및 예제는 &lt;a href=&quot;articles/scripts.md&quot;&gt;스크립트&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d620fa0ce1b37fe9dd7ba9d411ab04a43133094" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;공급 업체 바이너리&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="559b72f77032e67604dc874b9a392a115d181b4e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://github.com/composer/composer/issues/4180&quot;&gt;https://github.com/composer/composer/issues/4180&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/composer/composer/issues/4180&quot;&gt;https://github.com/composer/composer/issues/4180&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0de267ef8a389c1e7998354eba22473decbeb28f" translate="yes" xml:space="preserve">
          <source>See also the docs on &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;optimizing the autoloader&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;오토로더 최적화에&lt;/a&gt; 대한 문서도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="40a90c87b8f1bab04a3544adc01bea2e0e9bce45" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; chapter for more details on declaring dependencies.</source>
          <target state="translated">종속성 선언에 대한 자세한 내용 은 &lt;a href=&quot;01-basic-usage.md&quot;&gt;기본 사용법&lt;/a&gt; 장을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2575ba8fbc7c125e927fe44e94d8db132d3a6adb" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; chapter for valid configuration options.</source>
          <target state="translated">유효한 구성 옵션에 대해서는 &lt;a href=&quot;06-config.md&quot;&gt;구성&lt;/a&gt; 장을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4650020b4ad72f5700c979161041d4ed54e1267" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;apcu-autoloader&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">composer.json의 구성 키 내에서 &lt;code&gt;&quot;apcu-autoloader&quot;: true&lt;/code&gt; 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="214a7a23d5f78ae506afcb7b0713b0f632fd1c5f" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;classmap-authoritative&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">설정 &lt;code&gt;&quot;classmap-authoritative&quot;: true&lt;/code&gt; composer.json의 설정 키 내부에</target>
        </trans-unit>
        <trans-unit id="5c0a92c54590466a677967f926d1748729dcfdaf" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;optimize-autoloader&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">composer.json의 구성 키 내에서 &lt;code&gt;&quot;optimize-autoloader&quot;: true&lt;/code&gt; 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8874dcc81d1b0c7d334d5272e38e9accbd8eeb3" translate="yes" xml:space="preserve">
          <source>Set up a virtual-host that points to that &lt;code&gt;web/&lt;/code&gt; directory, let's say it is &lt;code&gt;packages.example.org&lt;/code&gt;. Alternatively, with PHP &amp;gt;= 5.4.0, you can use the built-in CLI server &lt;code&gt;php -S localhost:port -t satis-output-dir/&lt;/code&gt; for a temporary solution.</source>
          <target state="translated">해당 &lt;code&gt;web/&lt;/code&gt; 디렉토리 를 가리키는 가상 호스트를 설정하십시오 ( &lt;code&gt;packages.example.org&lt;/code&gt; ) . 또는 PHP&amp;gt; = 5.4.0 인 경우 임시 솔루션으로 내장 CLI 서버 &lt;code&gt;php -S localhost:port -t satis-output-dir/&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c941b4a056dfd347db1b82a72750653e6336d12d" translate="yes" xml:space="preserve">
          <source>Setting environment variables</source>
          <target state="translated">환경 변수 설정</target>
        </trans-unit>
        <trans-unit id="ad1bd84f8db19260d4b3be58ad221bf7fd52b6ac" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;bin-dir&lt;/code&gt; configuration setting in &lt;code&gt;composer.json&lt;/code&gt;</source>
          <target state="translated">설정 &lt;code&gt;bin-dir&lt;/code&gt; 에 구성 설정 &lt;code&gt;composer.json&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="e60dbf0bbeb4c51b8c1fb230befbe410040e5635" translate="yes" xml:space="preserve">
          <source>Setting the environment variable &lt;code&gt;COMPOSER_BIN_DIR&lt;/code&gt;</source>
          <target state="translated">환경 변수 &lt;code&gt;COMPOSER_BIN_DIR&lt;/code&gt; 설정</target>
        </trans-unit>
        <trans-unit id="af23ae56582131e07f436b39f455d9b7d1775c48" translate="yes" xml:space="preserve">
          <source>Setting up and using custom installers</source>
          <target state="translated">사용자 정의 설치 프로그램 설정 및 사용</target>
        </trans-unit>
        <trans-unit id="f9f484fe084b559575d6a474fc363c8262aa4d5b" translate="yes" xml:space="preserve">
          <source>Setting up and using plugins</source>
          <target state="translated">플러그인 설정 및 사용</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="4226ac02b9051f1d88c8061a46bff4b36feed5e3" translate="yes" xml:space="preserve">
          <source>Should I commit the dependencies in my vendor directory?</source>
          <target state="translated">공급 업체 디렉토리에서 종속성을 커밋해야합니까?</target>
        </trans-unit>
        <trans-unit id="fed63dbe315e1977317e6b4cf10f84a0bfa8ebac" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;run-script&lt;/code&gt; command you can give additional arguments to scripts, e.g. &lt;code&gt;composer test -- --filter &amp;lt;pattern&amp;gt;&lt;/code&gt; will pass &lt;code&gt;--filter &amp;lt;pattern&amp;gt;&lt;/code&gt; along to the &lt;code&gt;phpunit&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;run-script&lt;/code&gt; 명령 과 유사하게 스크립트에 추가 인수를 제공 할 수 있습니다 (예 : &lt;code&gt;composer test -- --filter &amp;lt;pattern&amp;gt;&lt;/code&gt; 는 &lt;code&gt;--filter &amp;lt;pattern&amp;gt;&lt;/code&gt; 을 &lt;code&gt;phpunit&lt;/code&gt; 스크립트 와 함께 전달 함) .</target>
        </trans-unit>
        <trans-unit id="505c2aef95bc2765ce09ae92a6ca5a4a2e326f2b" translate="yes" xml:space="preserve">
          <source>Similarly when multiple licenses need to be applied (&quot;conjunctive license&quot;), they should be separated with &quot;and&quot; and enclosed in parenthesis.</source>
          <target state="translated">마찬가지로 여러 라이센스를 적용해야하는 경우 ( &quot;연관 라이센스&quot;) &quot;and&quot;로 분리하고 괄호로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="04a36be54f0e4eea3117a8a4a9ed6aba54589989" translate="yes" xml:space="preserve">
          <source>Similarly, when multiple licenses need to be applied (&quot;conjunctive license&quot;), they should be separated with &quot;and&quot; and enclosed in parentheses.</source>
          <target state="translated">마찬가지로 여러 라이선스를 적용해야하는 경우 ( &quot;결합 라이선스&quot;) &quot;and&quot;로 구분하고 괄호로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="07757201e1834f1bb8a3143e05ba241fefdc3d8b" translate="yes" xml:space="preserve">
          <source>Since Subversion has no native concept of branches and tags, Composer assumes by default that code is located in &lt;code&gt;$url/trunk&lt;/code&gt;, &lt;code&gt;$url/branches&lt;/code&gt; and &lt;code&gt;$url/tags&lt;/code&gt;. If your repository has a different layout you can change those values. For example if you used capitalized names you could configure the repository like this:</source>
          <target state="translated">Subversion에는 기본 분기 및 태그 개념이 없으므로 Composer는 기본적으로 코드가 &lt;code&gt;$url/trunk&lt;/code&gt; , &lt;code&gt;$url/branches&lt;/code&gt; 및 &lt;code&gt;$url/tags&lt;/code&gt; 있다고 가정 합니다 . 저장소에 다른 레이아웃이있는 경우 해당 값을 변경할 수 있습니다. 예를 들어 대문자를 사용한 경우 다음과 같이 저장소를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1bed418fe5291e542f2bb5af84238985d583150" translate="yes" xml:space="preserve">
          <source>Some of Private Packagist's revenue is used to pay for Composer and Packagist.org development and hosting so using it is a good way to support the maintenance of these open source projects financially. You can find more information about how to set up your own package archive on &lt;a href=&quot;https://packagist.com&quot;&gt;Packagist.com&lt;/a&gt;.</source>
          <target state="translated">Private Packagist의 수익 중 일부는 Composer 및 Packagist.org 개발 및 호스팅 비용을 지불하는 데 사용되므로이를 사용하면 이러한 오픈 소스 프로젝트의 유지 관리를 재정적으로 지원할 수 있습니다. &lt;a href=&quot;https://packagist.com&quot;&gt;Packagist.com&lt;/a&gt; 에서 자체 패키지 아카이브를 설정하는 방법에 대한 자세한 정보를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5d81a8f8c1036267fdfca0f8435abe72c266686" translate="yes" xml:space="preserve">
          <source>Some of those libraries depend on other libraries.</source>
          <target state="translated">이러한 라이브러리 중 일부는 다른 라이브러리에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="d6761d5d17e468b8fd34c9bb7b904495907fde23" translate="yes" xml:space="preserve">
          <source>Some special plugins need to update package download URLs before they get downloaded.</source>
          <target state="translated">일부 특수 플러그인은 다운로드하기 전에 패키지 다운로드 URL을 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="ad4df69ade7f1fc9693932011f1486d5afeace2b" translate="yes" xml:space="preserve">
          <source>Sometimes automatic authentication is not possible, or you may want to predefine authentication credentials.</source>
          <target state="translated">경우에 따라 자동 인증이 불가능하거나 인증 자격 증명을 미리 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b30dbe525612c195de526698180ebf74ae6ec09" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;{&quot;extra&quot;: {&quot;plugin-modifies-downloads&quot;: true}}&lt;/code&gt; in your composer.json will hint to Composer that the plugin should be installed on its own before proceeding with the rest of the package downloads. This slightly slows down the overall installation process however, so do not use it in plugins which do not absolutely require it.</source>
          <target state="translated">지정 &lt;code&gt;{&quot;extra&quot;: {&quot;plugin-modifies-downloads&quot;: true}}&lt;/code&gt; 당신의 composer.json에하면 플러그인이 패키지 다운로드의 나머지를 진행하기 전에 자체에 설치해야한다는 작곡가로 암시합니다. 그러나 이것은 전체 설치 프로세스를 약간 느리게하므로 절대적으로 필요하지 않은 플러그인에서는 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="649119b21d03b499ab15c3122932cfbf10621769" translate="yes" xml:space="preserve">
          <source>Specifying one of the words &lt;code&gt;mirrors&lt;/code&gt;, &lt;code&gt;lock&lt;/code&gt;, or &lt;code&gt;nothing&lt;/code&gt; as an argument has the same effect as specifying the option &lt;code&gt;--lock&lt;/code&gt;, for example &lt;code&gt;composer update mirrors&lt;/code&gt; is exactly the same as &lt;code&gt;composer update --lock&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mirrors&lt;/code&gt; , &lt;code&gt;lock&lt;/code&gt; 중 하나를 지정 하거나 인수로 &lt;code&gt;nothing&lt;/code&gt; 을 지정하면 &lt;code&gt;--lock&lt;/code&gt; 옵션을 지정하는 것과 동일한 효과 가 있습니다. 예를 들어 &lt;code&gt;composer update mirrors&lt;/code&gt; 는 &lt;code&gt;composer update --lock&lt;/code&gt; 과 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="ce09e2a04d1ee91f7c193aa30ccee69c0962bbb6" translate="yes" xml:space="preserve">
          <source>Stability Constraints</source>
          <target state="translated">안정성 제약</target>
        </trans-unit>
        <trans-unit id="b500adbbebfd71b34fddb37de3e62913e7c37fbd" translate="yes" xml:space="preserve">
          <source>Stack Overflow has a growing collection of &lt;a href=&quot;https://stackoverflow.com/questions/tagged/composer-php&quot;&gt;Composer related questions&lt;/a&gt;.</source>
          <target state="translated">스택 오버플로에는 점점 더 많은 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/composer-php&quot;&gt;Composer 관련 질문이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fc3578f9d49c8b0cad651c3dd63878f9b611d5e" translate="yes" xml:space="preserve">
          <source>Subversion Options</source>
          <target state="translated">서브 버전 옵션</target>
        </trans-unit>
        <trans-unit id="c0b6128dc969b8189931a29860ad74c7707de85e" translate="yes" xml:space="preserve">
          <source>Suggested packages that can enhance or work well with this package. These are informational and are displayed after the package is installed, to give your users a hint that they could add more packages, even though they are not strictly required.</source>
          <target state="translated">이 패키지를 향상 시키거나 잘 사용할 수있는 제안 된 패키지. 정보 제공 용이며 패키지 설치 후 표시되므로 사용자가 패키지를 엄격하게 요구하지 않아도 추가 할 수 있다는 힌트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="28d1a6decd2e638f2e207094e4022a81f85e33b1" translate="yes" xml:space="preserve">
          <source>Support information includes the following:</source>
          <target state="translated">지원 정보는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="178e128d3e0c743ef84dc31fd34744e94560d958" translate="yes" xml:space="preserve">
          <source>Suppose at a later time you wish to migrate your PEAR packages to a Composer repository and naming scheme, and adopt the vendor name of &lt;code&gt;foobar&lt;/code&gt;. Projects using your PEAR packages would not see the updated packages, since they have a different vendor name (&lt;code&gt;foobar/IntermediatePackage&lt;/code&gt; vs &lt;code&gt;pear-pear.foobar.repo/IntermediatePackage&lt;/code&gt;).</source>
          <target state="translated">나중에 PEAR 패키지를 Composer 저장소 및 이름 지정 체계로 마이그레이션하고 공급 업체 이름 &lt;code&gt;foobar&lt;/code&gt; 를 채택하려고한다고 가정하십시오 . PEAR 패키지를 사용하는 프로젝트는 다른 공급 업체 이름 ( &lt;code&gt;foobar/IntermediatePackage&lt;/code&gt; vs &lt;code&gt;pear-pear.foobar.repo/IntermediatePackage&lt;/code&gt; ) 을 갖기 때문에 업데이트 된 패키지를 볼 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b7151b24f20e3570c88fe771b993984180a7026e" translate="yes" xml:space="preserve">
          <source>Suppose that your project already has a Custom Installer for specific modules then invoking that installer is a matter of defining the correct &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; in your package file.</source>
          <target state="translated">프로젝트에 특정 모듈에 대한 사용자 정의 설치 프로그램이 이미 있다고 가정하고 해당 설치 프로그램을 호출하는 것은 패키지 파일에서 올바른 &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 을 정의하는 문제입니다 .</target>
        </trans-unit>
        <trans-unit id="e52bd5474aee7c47125d6c88e627d38304399a38" translate="yes" xml:space="preserve">
          <source>Suppose you have a private PEAR repository and wish to use Composer to incorporate dependencies from a VCS. Your PEAR repository contains the following packages:</source>
          <target state="translated">개인 PEAR 저장소가 있고 Composer를 사용하여 VCS의 종속성을 통합하려고한다고 가정하십시오. PEAR 저장소에는 다음 패키지가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b130631fc1a052b53e9b573c6a35c3793ee28509" translate="yes" xml:space="preserve">
          <source>Suppose:</source>
          <target state="translated">Suppose:</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="0e1642f6a15ccf097e1cdabd2a2cd6876eb2a2b4" translate="yes" xml:space="preserve">
          <source>System Requirements</source>
          <target state="translated">시스템 요구 사항</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b70c6eaf1355459ee9b2792678e48b364ac7a92a" translate="yes" xml:space="preserve">
          <source>Testing Version Constraints</source>
          <target state="translated">버전 제약 조건 테스트</target>
        </trans-unit>
        <trans-unit id="38971f840464aad791a1ca6172cba81ab073a153" translate="yes" xml:space="preserve">
          <source>That said, if this fixes your problem, please talk to your ISP about it to try and resolve the routing errors. That's the best way to get things resolved for everyone.</source>
          <target state="translated">즉, 문제가 해결되면 ISP에 문의하여 라우팅 오류를 해결하십시오. 이것이 모든 사람에게 문제를 해결하는 가장 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="0cf9c170058ae7fe4ac78ba8a0f70a5c525899ab" translate="yes" xml:space="preserve">
          <source>That will fetch the &lt;code&gt;dev-bugfix&lt;/code&gt; version of &lt;code&gt;monolog/monolog&lt;/code&gt; from your GitHub and alias it to &lt;code&gt;1.0.x-dev&lt;/code&gt;.</source>
          <target state="translated">GitHub에서 &lt;code&gt;dev-bugfix&lt;/code&gt; 버전의 &lt;code&gt;monolog/monolog&lt;/code&gt; 를 가져 와서 &lt;code&gt;1.0.x-dev&lt;/code&gt; 로 별칭을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="1ae72273043859b4044f98f451fcae97261be08a" translate="yes" xml:space="preserve">
          <source>That will store it in the current directory's auth.json, but if you want it available globally you can use the &lt;code&gt;--global&lt;/code&gt; (&lt;code&gt;-g&lt;/code&gt;) flag.</source>
          <target state="translated">현재 디렉토리의 auth.json에 저장되지만, 전 세계에서 사용 가능하게하려면 &lt;code&gt;--global&lt;/code&gt; ( &lt;code&gt;-g&lt;/code&gt; ) 플래그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="38ca4f78e527bb3cb8fc5615d830b1cad2faef41" translate="yes" xml:space="preserve">
          <source>That's all. You can now install the dependencies by running Composer's &lt;a href=&quot;03-cli.md#install&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt; command!</source>
          <target state="translated">그게 다야. 이제 Composer의 &lt;a href=&quot;03-cli.md#install&quot;&gt; &lt;code&gt;install&lt;/code&gt; &lt;/a&gt; 명령 을 실행하여 종속성을 설치할 수 있습니다 !</target>
        </trans-unit>
        <trans-unit id="6f7a7ff242bfd8b5c67a5855a5c9da8aeb28993f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#extra&quot;&gt;extra&lt;/a&gt; attribute must contain an element &lt;code&gt;class&lt;/code&gt; defining the class name of the plugin (including namespace). If a package contains multiple plugins, this can be array of class names.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#extra&quot;&gt;추가&lt;/a&gt; 속성은 요소의 메시지 있어야합니다 &lt;code&gt;class&lt;/code&gt; (네임 스페이스 포함) 플러그인의 클래스 이름을 정의합니다. 패키지에 여러 개의 플러그인이 포함 된 경우 클래스 이름 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e63d949c881e513c359946a15964fc66ca3a9f38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; configuration property is defined as &lt;a href=&quot;../04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;. It is not inherited. You can read more about the reasons behind this in the &quot;&lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;why can't composer load repositories recursively?&lt;/a&gt;&quot; article. The simplest work-around to this limitation, is moving or duplicating the &lt;code&gt;repositories&lt;/code&gt; definition into your root composer.json.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt; 구성 등록 정보는 다음과 같이 정의된다 &lt;a href=&quot;../04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; . 상속되지 않습니다. &quot;구성자가 &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;로드 저장소를 재귀 적으로로드 할 수없는 이유&lt;/a&gt; &quot;기사 에서이 이유에 대한 자세한 내용을 읽을 수 있습니다 . 이 제한에 대한 가장 간단한 해결 방법은 &lt;code&gt;repositories&lt;/code&gt; 정의를 루트 composer.json으로 옮기거나 복제하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="7e648472e86fccaf7b5a0d4f0178fcbf7990ea9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; attribute must be &lt;code&gt;composer-plugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#type&quot;&gt;유형의&lt;/a&gt; 속성은해야 &lt;code&gt;composer-plugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c0c186b57848575cfd467a57c175faa35ce67c4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt;&lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt;&lt;/a&gt; capability allows to register additional commands for Composer :</source>
          <target state="translated">&lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt; &lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt; &lt;/a&gt; 기능은 작곡가에 대한 추가 명령을 등록 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="23c67a10129af478cab11c486ff532d107288e34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt;&lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt;&lt;/a&gt; capability allows to register additional commands for Composer:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt; &lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt; &lt;/a&gt; 기능은 작곡가에 대한 추가 명령을 등록 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="325c906fcb1706b6d31de5f9aea2d2c7863feee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;package&quot;&lt;/code&gt; key in a &lt;code&gt;package&lt;/code&gt; repository may be set to an array to define multiple versions of a package:</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; 저장소 의 &lt;code&gt;&quot;package&quot;&lt;/code&gt; 키는 패키지의 여러 버전을 정의하기 위해 배열로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d194afcac512a2852d1eb7e545166d274d4dfcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@composer.json&lt;/code&gt; marker would be the contents of the &lt;code&gt;composer.json&lt;/code&gt; from that package version including as a minimum:</source>
          <target state="translated">&lt;code&gt;@composer.json&lt;/code&gt; 마커의 내용이 될 것 &lt;code&gt;composer.json&lt;/code&gt; 최소로 포함하는 패키지 버전 :</target>
        </trans-unit>
        <trans-unit id="7971e0aa5c9a4165d1f5cb15ed4686c68f4554fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_AUTH&lt;/code&gt; var allows you to set up authentication as an environment variable. The contents of the variable should be a JSON formatted object containing &lt;a href=&quot;articles/authentication-for-private-packages.md&quot;&gt;http-basic, github-oauth, bitbucket-oauth, ... objects as needed&lt;/a&gt;, and following the &lt;a href=&quot;06-config.md&quot;&gt;spec from the config&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;COMPOSER_AUTH&lt;/code&gt; 의 VAR은 환경 변수로 인증을 설정할 수 있습니다. 변수의 내용은 필요에 따라 &lt;a href=&quot;articles/authentication-for-private-packages.md&quot;&gt;http-basic, github-oauth, bitbucket-oauth, ... 개체 &lt;/a&gt;&lt;a href=&quot;06-config.md&quot;&gt;를 포함하고 config&lt;/a&gt; 의 사양을 따르는 JSON 형식의 개체 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="bd712f3b81992c5860b40a6b5ab839dc7e577f9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_AUTH&lt;/code&gt; var allows you to set up authentication as an environment variable. The contents of the variable should be a JSON formatted object containing http-basic, github-oauth, bitbucket-oauth, ... objects as needed, and following the &lt;a href=&quot;06-config.md#gitlab-oauth&quot;&gt;spec from the config&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;COMPOSER_AUTH&lt;/code&gt; 의 VAR은 환경 변수로 인증을 설정할 수 있습니다. 변수의 내용은 필요에 따라 http-basic, github-oauth, bitbucket-oauth, ... 객체 &lt;a href=&quot;06-config.md#gitlab-oauth&quot;&gt;를 포함하고 config&lt;/a&gt; 의 스펙을 따르는 JSON 형식의 객체 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="3ed00a9880a9e50789f89e7aab7d95b03db98829" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_CACHE_DIR&lt;/code&gt; var allows you to change the Composer cache directory, which is also configurable via the &lt;a href=&quot;06-config.md#cache-dir&quot;&gt;&lt;code&gt;cache-dir&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">&lt;code&gt;COMPOSER_CACHE_DIR&lt;/code&gt; 의 VAR은 또한을 통해 구성 할 합성기 캐시 디렉토리, 변경할 수있는 &lt;a href=&quot;06-config.md#cache-dir&quot;&gt; &lt;code&gt;cache-dir&lt;/code&gt; &lt;/a&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="7bc49fec4bcc895b60c5179e29c54bb2670855e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_HOME&lt;/code&gt; var allows you to change the Composer home directory. This is a hidden, global (per-user on the machine) directory that is shared between all projects.</source>
          <target state="translated">&lt;code&gt;COMPOSER_HOME&lt;/code&gt; 의 VAR는 합성기의 홈 디렉토리를 변경할 수 있습니다. 이것은 모든 프로젝트간에 공유되는 숨겨진 전역 (시스템의 사용자 별) 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="e041cfbe9bb1437b512da0ba6bc16c640c5d064f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^&lt;/code&gt; operator behaves very similarly but it sticks closer to semantic versioning, and will always allow non-breaking updates. For example &lt;code&gt;^1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; as none of the releases until 2.0 should break backwards compatibility. For pre-1.0 versions it also acts with safety in mind and treats &lt;code&gt;^0.3&lt;/code&gt; as &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 운영자 동작합니다 매우 유사하지만, 의미 론적 버전에 가까운 스틱, 항상 비 분리 업데이트를 허용합니다. 예를 들어 &lt;code&gt;^1.2.3&lt;/code&gt; 은 2.0보다 이전 버전과의 호환성이 없어야 하기 때문에 &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; 과 같습니다. 1.0 이전 버전의 경우 안전을 염두에두고 &lt;code&gt;^0.3&lt;/code&gt; 을 &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt; 으로 취급합니다 .</target>
        </trans-unit>
        <trans-unit id="f9dc8084f42f62a2ec382aab0e4dd6343b101b44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^&lt;/code&gt; operator behaves very similarly, but it sticks closer to semantic versioning, and will always allow non-breaking updates. For example &lt;code&gt;^1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; as none of the releases until 2.0 should break backwards compatibility. For pre-1.0 versions it also acts with safety in mind and treats &lt;code&gt;^0.3&lt;/code&gt; as &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 운영자 동작합니다 매우 유사하지만 더 가까운 의미 버전에 스틱, 항상 비 분리 업데이트를 허용합니다. 예를 들어 &lt;code&gt;^1.2.3&lt;/code&gt; 은 2.0까지의 릴리스가 이전 버전과의 호환성을 깨지 않기 때문에 &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; 과 동일합니다 . 1.0 이전 버전의 경우 안전을 염두에두고 작동하며 &lt;code&gt;^0.3&lt;/code&gt; 을 &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt; 으로 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="015e5b54a0eec0b1d03e7f482cd6462e60215bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browse&lt;/code&gt; (aliased to &lt;code&gt;home&lt;/code&gt;) opens a package's repository URL or homepage in your browser.</source>
          <target state="translated">&lt;code&gt;browse&lt;/code&gt; (별칭 &lt;code&gt;home&lt;/code&gt; ) 브라우저에서 패키지의 저장소 URL 또는 홈페이지를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="e24a601ed15c83838a05734062b36f958f6fe9aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classmap&lt;/code&gt; references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_classmap.php&lt;/code&gt;. This map is built by scanning for classes in all &lt;code&gt;.php&lt;/code&gt; and &lt;code&gt;.inc&lt;/code&gt; files in the given directories/files.</source>
          <target state="translated">&lt;code&gt;classmap&lt;/code&gt; 에서 생성 된 파일에서 발견 될 수있는 하나의 키 =&amp;gt; 값의 배열 / 업데이트를 설치할 때 참조는 모든 결합 &lt;code&gt;vendor/composer/autoload_classmap.php&lt;/code&gt; . 이 맵은 주어진 디렉토리 / 파일에있는 모든 &lt;code&gt;.php&lt;/code&gt; 및 &lt;code&gt;.inc&lt;/code&gt; 파일에서 클래스를 스캔하여 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="21bbbda97714f24cc525ea7078e6201890999863" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; command allows you to edit composer config settings and repositories in either the local &lt;code&gt;composer.json&lt;/code&gt; file or the global &lt;code&gt;config.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; 명령은 로컬 하나로 편집 작곡가의 구성 설정 및 저장소에 당신을 수 있습니다 &lt;code&gt;composer.json&lt;/code&gt; 의 파일 또는 글로벌 &lt;code&gt;config.json&lt;/code&gt; 의 파일.</target>
        </trans-unit>
        <trans-unit id="c6c37718b606670d0260bf58b8957a8aa19464e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depends&lt;/code&gt; command tells you which other packages depend on a certain package. As with installation &lt;code&gt;require-dev&lt;/code&gt; relationships are only considered for the root package.</source>
          <target state="translated">&lt;code&gt;depends&lt;/code&gt; 명령이 다른 패키지가 어떤 패키지에 의존을 알려줍니다. 설치와 마찬가지로 &lt;code&gt;require-dev&lt;/code&gt; 관계는 루트 패키지에만 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="cd8cb2da2827dbba6abaedf322dadfb22ed9c77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dev-master&lt;/code&gt; branch is one in your main VCS repo. It is rather common that someone will want the latest master dev version. Thus, Composer allows you to alias your &lt;code&gt;dev-master&lt;/code&gt; branch to a &lt;code&gt;1.0.x-dev&lt;/code&gt; version. It is done by specifying a &lt;code&gt;branch-alias&lt;/code&gt; field under &lt;code&gt;extra&lt;/code&gt; in &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dev-master&lt;/code&gt; 분기 주요 VCS의 환매 특약의 하나입니다. 누군가가 최신 마스터 개발 버전을 원할 것입니다. 따라서 Composer를 사용하면 &lt;code&gt;dev-master&lt;/code&gt; 분기의 별칭 을 &lt;code&gt;1.0.x-dev&lt;/code&gt; 버전 으로 지정할 수 있습니다 . 그것은 지정하여 수행되는 &lt;code&gt;branch-alias&lt;/code&gt; 에서 필드 &lt;code&gt;extra&lt;/code&gt; 에 &lt;code&gt;composer.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3ffd5faf0b39f88ce9eee783d1d943fc47e2604b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; command reads the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory, resolves the dependencies, and installs them into &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; 명령은 읽기 &lt;code&gt;composer.json&lt;/code&gt; 의 현재 디렉토리에서 파일을 종속성을 해결하고로 설치 &lt;code&gt;vendor&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f774533682957100a16d42c9b2905ad80d2df57c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property is required for published packages (libraries).</source>
          <target state="translated">게시 된 패키지 (라이브러리) 에는 &lt;code&gt;name&lt;/code&gt; 속성이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="af9d00ff9fc127804bb95896f7496fcf274263e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notify-batch&lt;/code&gt; field allows you to specify a URL that will be called every time a user installs a package. The URL can be either an absolute path (that will use the same domain as the repository) or a fully qualified URL.</source>
          <target state="translated">는 &lt;code&gt;notify-batch&lt;/code&gt; 필드는 사용자가 패키지를 설치 할 때마다 호출되는 URL을 지정할 수 있습니다. URL은 절대 경로 (저장소와 동일한 도메인을 사용함) 또는 완전한 URL 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3669b742119a5a005a77a35a608ab174f7ff28ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notify-batch&lt;/code&gt; field allows you to specify a URL that will be called every time a user installs a package. The URL can be either an absolute path (that will use the same domain as the repository), or a fully qualified URL.</source>
          <target state="translated">는 &lt;code&gt;notify-batch&lt;/code&gt; 필드는 사용자가 패키지를 설치 할 때마다 호출되는 URL을 지정할 수 있습니다. URL은 절대 경로 (저장소와 동일한 도메인을 사용함)이거나 정규화 된 URL 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5dc0d928853964ca3fd6729ac78fc54fe7baf249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outdated&lt;/code&gt; command shows a list of installed packages that have updates available, including their current and latest versions. This is basically an alias for &lt;code&gt;composer show -lo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;outdated&lt;/code&gt; 명령 쇼 현재 최신 버전을 포함하여 사용 가능한 업데이트를 가지고 설치된 패키지의 목록을 표시합니다. 기본적으로 &lt;code&gt;composer show -lo&lt;/code&gt; 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="1fc3b3ae8a67c22d97268e322bf22ea6082ae19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;packages.json&lt;/code&gt; file is loaded using a PHP stream. You can set extra options on that stream using the &lt;code&gt;options&lt;/code&gt; parameter. You can set any valid PHP stream context option. See &lt;a href=&quot;https://php.net/manual/en/context.php&quot;&gt;Context options and parameters&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;packages.json&lt;/code&gt; 의 파일은 PHP 스트림을 사용하여로드됩니다. &lt;code&gt;options&lt;/code&gt; 매개 변수를 사용하여 해당 스트림에서 추가 옵션을 설정할 수 있습니다 . 유효한 PHP 스트림 컨텍스트 옵션을 설정할 수 있습니다. 자세한 정보는 &lt;a href=&quot;https://php.net/manual/en/context.php&quot;&gt;컨텍스트 옵션 및 매개 변수&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="71efcc29e40b42abc0b13e32c0ea8a45315fc701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prohibits&lt;/code&gt; command tells you which packages are blocking a given package from being installed. Specify a version constraint to verify whether upgrades can be performed in your project, and if not why not. See the following example:</source>
          <target state="translated">&lt;code&gt;prohibits&lt;/code&gt; 명령은 패키지가 설치되는 특정 패키지를 차단하는 방법을 알려줍니다. 버전 제약 조건을 지정하여 프로젝트에서 업그레이드를 수행 할 수 있는지 여부를 확인하십시오. 다음 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f4fb232cdcc4af02a2a6fc8964c4e4e68c3772b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provider-includes&lt;/code&gt; field allows you to list a set of files that list package names provided by this repository. The hash should be a sha256 of the files in this case.</source>
          <target state="translated">&lt;code&gt;provider-includes&lt;/code&gt; 필드는 목록 패키지 이름이 저장소에 의해 제공되는 파일 세트를 나열 할 수 있습니다. 이 경우 해시는 파일의 sha256이어야합니다.</target>
        </trans-unit>
        <trans-unit id="99a72339c9fbd5f71d239e716a19d3ef78a99394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers-url&lt;/code&gt; describes how provider files are found on the server. It is an absolute path from the repository root. It must contain the placeholders &lt;code&gt;%package%&lt;/code&gt; and &lt;code&gt;%hash%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;providers-url&lt;/code&gt; 제공 파일이 서버에서 찾을 수있는 방법에 대해 설명합니다. 저장소 루트로부터의 절대 경로입니다. 플레이스 홀더 &lt;code&gt;%package%&lt;/code&gt; 및 &lt;code&gt;%hash%&lt;/code&gt; 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="28b5498e54a0d27ed7d7003af00bb9c9ef721186" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove&lt;/code&gt; command removes packages from the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory.</source>
          <target state="translated">&lt;code&gt;remove&lt;/code&gt; 명령에서 패키지를 제거 &lt;code&gt;composer.json&lt;/code&gt; 의 현재 디렉토리에서 파일.</target>
        </trans-unit>
        <trans-unit id="a2a826c2fb4b4f08c3a69b19718facb4884e979c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; command adds new packages to the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory. If no file exists one will be created on the fly.</source>
          <target state="translated">이 &lt;code&gt;require&lt;/code&gt; 명령은 새로운 패키지를 추가 &lt;code&gt;composer.json&lt;/code&gt; 의 현재 디렉토리에서 파일. 파일이 없으면 즉시 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="3ab1e58fb4e10f7b6b5e0e76a52020bdc4252e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; key</source>
          <target state="translated">은 &lt;code&gt;require&lt;/code&gt; 키를</target>
        </trans-unit>
        <trans-unit id="346d1272d0323d4c3803e8e8e133e5fcf9d5248b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true&lt;/code&gt; value indicates that the package is truly abandoned while the &lt;code&gt;&quot;company/newpackage&quot;&lt;/code&gt; value specifies that the package is replaced by the &lt;code&gt;company/newpackage&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 값은 패키지가 진정으로 포기되는 것을 나타내는 반면 &lt;code&gt;&quot;company/newpackage&quot;&lt;/code&gt; 패키지가 대체되는 값을 지정 &lt;code&gt;company/newpackage&lt;/code&gt; 패키지로 제공된다.</target>
        </trans-unit>
        <trans-unit id="c56cadbd66f034c7c3ee76e3d00211e36a3d21e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; operator is best explained by example: &lt;code&gt;~1.2&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2 &amp;lt;2.0.0&lt;/code&gt;, while &lt;code&gt;~1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/code&gt;. As you can see it is mostly useful for projects respecting &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;. A common usage would be to mark the minimum minor version you depend on, like &lt;code&gt;~1.2&lt;/code&gt; (which allows anything up to, but not including, 2.0). Since in theory there should be no backwards compatibility breaks until 2.0, that works well. Another way of looking at it is that using &lt;code&gt;~&lt;/code&gt; specifies a minimum version, but allows the last digit specified to go up.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; 연산자 가장 예에 의해 설명된다 : &lt;code&gt;~1.2&lt;/code&gt; 당량되는 &lt;code&gt;&amp;gt;=1.2 &amp;lt;2.0.0&lt;/code&gt; 반면 &lt;code&gt;~1.2.3&lt;/code&gt; 동등 &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/code&gt; . 당신이 볼 수 있듯이 그것은 &lt;a href=&quot;https://semver.org/&quot;&gt;의미 버전 관리와&lt;/a&gt; 관련된 프로젝트에 주로 유용합니다 . 일반적인 사용법은 &lt;code&gt;~1.2&lt;/code&gt; 와 같이 의존하는 최소 부 버전을 표시하는 것입니다 (2.0까지는 포함하지 않음). 이론적으로 2.0까지는 이전 버전과의 호환성 중단이 없어야하므로 잘 작동합니다. &lt;code&gt;~&lt;/code&gt; 를 사용 하면 최소 버전을 지정하지만 지정된 마지막 숫자가 올라갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f025912d98018c171a9e7aa4c512d6735e081304" translate="yes" xml:space="preserve">
          <source>The BitBucket driver uses OAuth to access your private repositories via the BitBucket REST APIs and you will need to create an OAuth consumer to use the driver, please refer to &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Atlassian's Documentation&lt;/a&gt;. You will need to fill the callback url with something to satisfy BitBucket, but the address does not need to go anywhere and is not used by Composer.</source>
          <target state="translated">BitBucket 드라이버는 OAuth를 사용하여 BitBucket REST API를 통해 개인 리포지토리에 액세스하므로 드라이버를 사용하려면 OAuth 소비자를 만들어야합니다 . &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Atlassian 's Documentation을&lt;/a&gt; 참조하십시오 . 콜백 URL을 BitBucket을 만족시키기 위해 무언가로 채워야하지만 주소는 어디든 갈 필요가 없으며 Composer에서 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cec923521306780ceeeaec203439388881f9443f" translate="yes" xml:space="preserve">
          <source>The BitBucket driver uses OAuth to access your private repositories via the BitBucket REST APIs, and you will need to create an OAuth consumer to use the driver, please refer to &lt;a href=&quot;https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/&quot;&gt;Atlassian's Documentation&lt;/a&gt;. You will need to fill the callback url with something to satisfy BitBucket, but the address does not need to go anywhere and is not used by Composer.</source>
          <target state="translated">BitBucket 드라이버는 OAuth를 사용하여 BitBucket REST API를 통해 개인 리포지토리에 액세스하며 드라이버를 사용하려면 OAuth 소비자를 만들어야합니다 . &lt;a href=&quot;https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/&quot;&gt;Atlassian 문서&lt;/a&gt; 를 참조하세요 . 콜백 URL을 BitBucket을 만족시키는 것으로 채워야하지만 주소는 어디로 든 갈 필요가 없으며 Composer에서 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8325f01cfc89ecc5834c22272e499dc2a35975d" translate="yes" xml:space="preserve">
          <source>The Custom Installer class</source>
          <target state="translated">커스텀 인스톨러 클래스</target>
        </trans-unit>
        <trans-unit id="9ffda155dc61c6b7fc0c53c17b097166f828397f" translate="yes" xml:space="preserve">
          <source>The Installer class, e.g.: &lt;code&gt;My\Project\Composer\Installer.php&lt;/code&gt;, containing a class that implements &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; 를 구현하는 클래스를 포함하는 Installer 클래스 (예 : &lt;code&gt;My\Project\Composer\Installer.php&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="40980219df2f4506ac88e5c28f53b42bdd97d1a6" translate="yes" xml:space="preserve">
          <source>The InstallerInterface class defines the following methods (please see the source for the exact signature):</source>
          <target state="translated">InstallerInterface 클래스는 다음 메소드를 정의합니다 (정확한 서명은 소스를 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="6a8be988f00a6babc58dafb4dd2328cbd191b0a7" translate="yes" xml:space="preserve">
          <source>The PSR-0 references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_namespaces.php&lt;/code&gt;.</source>
          <target state="translated">PSR-0 참조는 설치 / 업데이트 중에 생성 된 파일 &lt;code&gt;vendor/composer/autoload_namespaces.php&lt;/code&gt; 에서 찾을 수있는 단일 키 =&amp;gt; 값 배열로 모두 결합 됩니다.</target>
        </trans-unit>
        <trans-unit id="e895bca51e7dbca56269fca833da7d53335b08ce" translate="yes" xml:space="preserve">
          <source>The PSR-0 style is not limited to namespace declarations only but may be specified right down to the class level. This can be useful for libraries with only one class in the global namespace. If the php source file is also located in the root of the package, for example, it may be declared like this:</source>
          <target state="translated">PSR-0 스타일은 네임 스페이스 선언에만 국한되지 않고 클래스 수준까지 바로 지정할 수 있습니다. 전역 네임 스페이스에 클래스가 하나 뿐인 라이브러리에 유용 할 수 있습니다. 예를 들어, PHP 소스 파일이 패키지의 루트에있는 경우 다음과 같이 선언 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbb9bada46ef9caab4f699c77fb22360668e31ba" translate="yes" xml:space="preserve">
          <source>The PSR-4 references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_psr4.php&lt;/code&gt;.</source>
          <target state="translated">PSR-4 참조는 설치 / 업데이트 동안 생성 된 파일 &lt;code&gt;vendor/composer/autoload_psr4.php&lt;/code&gt; 에서 찾을 수있는 단일 키 =&amp;gt; 값 배열로 모두 결합 됩니다.</target>
        </trans-unit>
        <trans-unit id="ea8afc8984ffee8650e20f4736a1022091c847c6" translate="yes" xml:space="preserve">
          <source>The Plugin class</source>
          <target state="translated">플러그인 클래스</target>
        </trans-unit>
        <trans-unit id="b068549699c4405448400cc7e68c4a937ff32939" translate="yes" xml:space="preserve">
          <source>The Plugin class, e.g.: &lt;code&gt;My\Project\Composer\Plugin.php&lt;/code&gt;, containing a class that implements &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;.</source>
          <target state="translated">플러그인 클래스 (예 : &lt;code&gt;My\Project\Composer\Plugin.php&lt;/code&gt; ) . &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; 를 구현하는 클래스가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9837d2cfdfe1047f666926235fe851440587ed9" translate="yes" xml:space="preserve">
          <source>The VCS driver to be used is detected automatically based on the URL. However, should you need to specify one for whatever reason, you can use &lt;code&gt;git-bitbucket&lt;/code&gt;, &lt;code&gt;hg-bitbucket&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;perforce&lt;/code&gt;, &lt;code&gt;fossil&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;svn&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; as the repository type instead of &lt;code&gt;vcs&lt;/code&gt;.</source>
          <target state="translated">사용할 VCS 드라이버는 URL을 기반으로 자동 감지됩니다. 그러나 어떤 이유로 든 하나를 지정 &lt;code&gt;gitlab&lt;/code&gt; 경우 &lt;code&gt;vcs&lt;/code&gt; 대신 저장소 유형으로 &lt;code&gt;git-bitbucket&lt;/code&gt; , &lt;code&gt;hg-bitbucket&lt;/code&gt; , &lt;code&gt;github&lt;/code&gt; , gitlab , &lt;code&gt;perforce&lt;/code&gt; , &lt;code&gt;fossil&lt;/code&gt; , &lt;code&gt;git&lt;/code&gt; , &lt;code&gt;svn&lt;/code&gt; 또는 &lt;code&gt;hg&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c420979637a5530647ac1a7b4bf05aaac4a2eb2" translate="yes" xml:space="preserve">
          <source>The alias must be a comparable dev version, and the &lt;code&gt;branch-alias&lt;/code&gt; must be present on the branch that it references. For &lt;code&gt;dev-master&lt;/code&gt;, you need to commit it on the &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">별명은 비슷한 dev 버전 이어야하며, &lt;code&gt;branch-alias&lt;/code&gt; 은 참조하는 지점에 있어야합니다. 들어 &lt;code&gt;dev-master&lt;/code&gt; , 당신은 그것을 커밋 할 필요가 &lt;code&gt;master&lt;/code&gt; 지점입니다.</target>
        </trans-unit>
        <trans-unit id="c2cac23aeb2cc9f6f9a5c06f625e856aa7411284" translate="yes" xml:space="preserve">
          <source>The authors of the package. This is an array of objects.</source>
          <target state="translated">패키지 작성자. 이것은 객체의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="7eb0326398d1c95d61a67bf85374074040d3aaf6" translate="yes" xml:space="preserve">
          <source>The autoloader can have quite a substantial impact on your request time (50-100ms per request in large frameworks using a lot of classes). See the &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;article about optimizing the autoloader&lt;/a&gt; for more details on how to reduce this impact.</source>
          <target state="translated">오토로더는 요청 시간 (많은 클래스를 사용하는 대규모 프레임 워크에서 요청 당 50-100ms)에 상당한 영향을 줄 수 있습니다. 이 영향을 줄이는 방법에 대한 자세한 내용 &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;은 오토로더 최적화에 관한 기사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3cf994a98f5fb06f3f9fa5aeb7c3855a5c1ea70" translate="yes" xml:space="preserve">
          <source>The autoloader is the most used one, and is already covered in our &lt;a href=&quot;01-basic-usage.md#autoloading&quot;&gt;basic usage guide&lt;/a&gt;. It is available in all Composer versions.</source>
          <target state="translated">오토로더는 가장 많이 사용되며 &lt;a href=&quot;01-basic-usage.md#autoloading&quot;&gt;기본 사용 가이드&lt;/a&gt; 에서 이미 다루었습니다 . 모든 Composer 버전에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6edc136191c54700a29b49ad70fd35ef21540920" translate="yes" xml:space="preserve">
          <source>The check-platform-reqs command checks that your PHP and extensions versions match the platform requirements of the installed packages. This can be used to verify that a production server has all the extensions needed to run a project after installing it for example.</source>
          <target state="translated">check-platform-reqs 명령은 PHP 및 확장 버전이 설치된 패키지의 플랫폼 요구 사항과 일치하는지 확인합니다. 예를 들어, 프로덕션 서버에 프로젝트를 설치 한 후 프로젝트를 실행하는 데 필요한 모든 확장이 있는지 확인하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7214bc8cd5c44f89fec9925261db070ce7d274d6" translate="yes" xml:space="preserve">
          <source>The class defining the Composer plugin must implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt;&lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;&lt;/a&gt;. It can then register the Custom Installer in its &lt;code&gt;activate()&lt;/code&gt; method.</source>
          <target state="translated">Composer 플러그인을 정의하는 클래스는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt; &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; &lt;/a&gt; 구현해야합니다 . 그런 다음 &lt;code&gt;activate()&lt;/code&gt; 메소드 에서 사용자 정의 설치 프로그램을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="78950139234e498468b2a4ae5ec9d8e2bc496990" translate="yes" xml:space="preserve">
          <source>The class may be placed in any location and have any name, as long as it is autoloadable and matches the &lt;code&gt;extra.class&lt;/code&gt; element in the package definition.</source>
          <target state="translated">클래스는 자동로드 가능하고 패키지 정의 의 &lt;code&gt;extra.class&lt;/code&gt; 요소 와 일치하는 한 어떤 위치 에나 이름을 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56dd19048623d8951439a67803c703f7d2bdaa57" translate="yes" xml:space="preserve">
          <source>The class that executes the custom installation should implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt;&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;&lt;/a&gt; (or extend another installer that implements that interface). It defines the &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; string as it will be recognized by packages that will use this installer in the &lt;code&gt;supports()&lt;/code&gt; method.</source>
          <target state="translated">사용자 정의 설치를 실행하는 클래스는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt; &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; &lt;/a&gt; 를 구현하거나 해당 인터페이스를 구현하는 다른 설치 프로그램을 확장해야합니다. &lt;code&gt;supports()&lt;/code&gt; 메소드 에서이 설치 프로그램을 사용하는 패키지가 인식 할 &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 문자열을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="8131e8038e7a59be229bcd80fa0d944009da9be3" translate="yes" xml:space="preserve">
          <source>The classmap generator will ignore all files in the paths configured here. The paths are absolute from the package root directory (i.e. composer.json location), and support &lt;code&gt;*&lt;/code&gt; to match anything but a slash, and &lt;code&gt;**&lt;/code&gt; to match anything. &lt;code&gt;**&lt;/code&gt; is implicitly added to the end of the paths.</source>
          <target state="translated">클래스 맵 생성기는 여기에 구성된 경로의 모든 파일을 무시합니다. 경로는 패키지 루트 디렉토리 (예 : composer.json 위치)에서 절대적이며 슬래시 이외의 항목과 일치하려면 &lt;code&gt;*&lt;/code&gt; 를 지원 하고, 무엇이든 일치하려면 &lt;code&gt;**&lt;/code&gt; 를 지원하십시오. &lt;code&gt;**&lt;/code&gt; 는 경로 끝에 암시 적으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="c8aa46cca88981162bd728fbbc3eec19ff704de5" translate="yes" xml:space="preserve">
          <source>The color coding is as such:</source>
          <target state="translated">색상 코딩은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3406243459548a65cba91c96d7498aeca9791af0" translate="yes" xml:space="preserve">
          <source>The composer.json Schema</source>
          <target state="translated">composer.json 스키마</target>
        </trans-unit>
        <trans-unit id="c4ef1dd0d59a879a7e360aa022298c6401b1a743" translate="yes" xml:space="preserve">
          <source>The composer.json schema</source>
          <target state="translated">composer.json 스키마</target>
        </trans-unit>
        <trans-unit id="a61349b347fd5443a848a94267d7ed493322773b" translate="yes" xml:space="preserve">
          <source>The current Composer plugin API version is &lt;code&gt;2.0.0&lt;/code&gt;.</source>
          <target state="translated">현재 Composer 플러그인 API 버전은 &lt;code&gt;2.0.0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f7d96ecd6ebde5fd4e1ab5d82811712e5da91ffa" translate="yes" xml:space="preserve">
          <source>The current composer plugin API version is 1.1.0.</source>
          <target state="translated">현재 작성기 플러그인 API 버전은 1.1.0입니다.</target>
        </trans-unit>
        <trans-unit id="06ad6f56bd0956d7911c263228a4772fb9d3544b" translate="yes" xml:space="preserve">
          <source>The custom constraint has to be a subset of the existing constraint you have, and this feature is only available for your root package dependencies.</source>
          <target state="translated">사용자 지정 제약 조건은 기존 제약 조건의 하위 집합이어야하며이 기능은 루트 패키지 종속성에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e11cbbb09c0ca65a8dd4a02c0c684bedae13af1" translate="yes" xml:space="preserve">
          <source>The default file Satis looks for is &lt;code&gt;satis.json&lt;/code&gt; in the root of the repository.</source>
          <target state="translated">Satis가 찾는 기본 파일 은 저장소 루트에있는 &lt;code&gt;satis.json&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="95fedbf01afafd82bd68908b58b230643f7dc841" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;php-only&lt;/code&gt; which only checks the PHP version.</source>
          <target state="translated">기본값 은 PHP 버전 만 확인하는 &lt;code&gt;php-only&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9c569e9330e95055860a89cd6bb7a1005c0d8a0a" translate="yes" xml:space="preserve">
          <source>The descriptions are used in &lt;code&gt;composer list&lt;/code&gt; or &lt;code&gt;composer run -l&lt;/code&gt; commands to describe what the scripts do when the command is run.</source>
          <target state="translated">설명은 &lt;code&gt;composer list&lt;/code&gt; 또는 &lt;code&gt;composer run -l&lt;/code&gt; 명령에서 명령이 실행될 때 스크립트가 수행하는 작업을 설명하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="abc92330ba7d4489dae7ca56a23c07eaff4520aa" translate="yes" xml:space="preserve">
          <source>The dots indicate array nesting, a max depth of 3 levels is allowed though. The above would set &lt;code&gt;&quot;extra&quot;: { &quot;foo&quot;: { &quot;bar&quot;: &quot;value&quot; } }&lt;/code&gt;.</source>
          <target state="translated">점은 배열 중첩을 나타내며 최대 수준은 3 수준입니다. 위에서 &lt;code&gt;&quot;extra&quot;: { &quot;foo&quot;: { &quot;bar&quot;: &quot;value&quot; } }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74881a8aac37fc93dea5343409e2d729aa3c5f0c" translate="yes" xml:space="preserve">
          <source>The env var accepts domains, IP addresses, and IP address blocks in CIDR notation. You can restrict the filter to a particular port (e.g. &lt;code&gt;:80&lt;/code&gt;). You can also set it to &lt;code&gt;*&lt;/code&gt; to ignore the proxy for all HTTP requests.</source>
          <target state="translated">env var는 CIDR 표기법으로 도메인, IP 주소 및 IP 주소 블록을 허용합니다. 필터를 특정 포트로 제한 할 수 있습니다 (예 &lt;code&gt;:80&lt;/code&gt; ). 모든 HTTP 요청에 대한 프록시를 무시 하도록 &lt;code&gt;*&lt;/code&gt; 로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56026558ef4f20a6fe91ce4862f665827754603a" translate="yes" xml:space="preserve">
          <source>The example above has Composer itself in its require-dev, which allows you to use the Composer classes in your test suite for example.</source>
          <target state="translated">위의 예제는 require-dev에 Composer 자체를 가지고있어 예를 들어 테스트 스위트에서 Composer 클래스를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc66c9457e7fb686fa5b8206125dd79538da6a38" translate="yes" xml:space="preserve">
          <source>The example demonstrates that it is possible to extend the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt;&lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt;&lt;/a&gt; class to strip a prefix (&lt;code&gt;phpdocumentor/template-&lt;/code&gt;) and use the remaining part to assemble a completely different installation path.</source>
          <target state="translated">이 예제는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt; &lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt; &lt;/a&gt; 클래스 를 확장하여 접두어 ( &lt;code&gt;phpdocumentor/template-&lt;/code&gt; ) 를 제거 하고 나머지 부분을 사용하여 완전히 다른 설치 경로를 어셈블 할 수 있음을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e055753e0d7efaac55d01e0c0c7e3200bf65f47f" translate="yes" xml:space="preserve">
          <source>The example demonstrates that it is quite simple to extend the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt;&lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt;&lt;/a&gt; class to strip a prefix (&lt;code&gt;phpdocumentor/template-&lt;/code&gt;) and use the remaining part to assemble a completely different installation path.</source>
          <target state="translated">이 예제 는 접두사를 제거하기 위해 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt; &lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt; &lt;/a&gt; 클래스를 확장하는 것이 매우 간단하다는 것을 보여줍니다 ( &lt;code&gt;phpdocumentor/template-&lt;/code&gt; ) 하고 나머지 부분을 사용하여 완전히 다른 설치 경로를 조립하는 .</target>
        </trans-unit>
        <trans-unit id="81ae7fa842663d4675156a0236029004afaad470" translate="yes" xml:space="preserve">
          <source>The example will include &lt;code&gt;/dir/foo/bar/file&lt;/code&gt;, &lt;code&gt;/foo/bar/baz&lt;/code&gt;, &lt;code&gt;/file.php&lt;/code&gt;, &lt;code&gt;/foo/my.test&lt;/code&gt; but it will exclude &lt;code&gt;/foo/bar/any&lt;/code&gt;, &lt;code&gt;/foo/baz&lt;/code&gt;, and &lt;code&gt;/my.test&lt;/code&gt;.</source>
          <target state="translated">이 예제에는 &lt;code&gt;/dir/foo/bar/file&lt;/code&gt; , &lt;code&gt;/foo/bar/baz&lt;/code&gt; , &lt;code&gt;/file.php&lt;/code&gt; , &lt;code&gt;/foo/my.test&lt;/code&gt; 가 포함 되지만 &lt;code&gt;/foo/bar/any&lt;/code&gt; , &lt;code&gt;/foo/baz&lt;/code&gt; 및 &lt;code&gt;/my.test&lt;/code&gt; 는 제외됩니다 .테스트 .</target>
        </trans-unit>
        <trans-unit id="1a0f3bc9bad979ddd627af3051a98ef3a26f4b7d" translate="yes" xml:space="preserve">
          <source>The file above declares that acme/foo and acme/bar can be found in this repository, by loading the file referenced by &lt;code&gt;providers-url&lt;/code&gt;, replacing &lt;code&gt;%package%&lt;/code&gt; by the vendor namespaced package name and &lt;code&gt;%hash%&lt;/code&gt; by the sha256 field. Those files themselves contain package definitions as described &lt;a href=&quot;#packages&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">위의 파일은 &lt;code&gt;providers-url&lt;/code&gt; 참조하는 파일을로드 하여 &lt;code&gt;%package%&lt;/code&gt; 를 공급 업체 네임 스페이스 패키지 이름으로 대체 하고 sha256 필드로 &lt;code&gt;%hash%&lt;/code&gt; 를 대체하여 acme / foo 및 acme / bar를이 저장소에서 찾을 수 있음을 선언 합니다. 이러한 파일 자체에는 &lt;a href=&quot;#packages&quot;&gt;위에서&lt;/a&gt; 설명한 패키지 정의가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d04c87c83c5973964832e301e5817c17e04115c" translate="yes" xml:space="preserve">
          <source>The file should contain a set of hostnames followed each with their own username/password pairs, for example:</source>
          <target state="translated">파일에는 호스트 이름 세트와 그 뒤에 고유 한 사용자 이름 / 암호 쌍이 있어야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="502d74a957d0a2c88f964635896197c7127378c1" translate="yes" xml:space="preserve">
          <source>The final option to supply Composer with credentials is to use the &lt;code&gt;COMPOSER_AUTH&lt;/code&gt; environment variable. These variables can be either passed as command line variables or set in actual environment variables. Read more about the usage of this environment variable &lt;a href=&quot;../03-cli.md#COMPOSER_AUTH&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Composer에 자격 증명을 제공하는 마지막 옵션은 &lt;code&gt;COMPOSER_AUTH&lt;/code&gt; 환경 변수 를 사용하는 것입니다. 이러한 변수는 명령 줄 변수로 전달되거나 실제 환경 변수에 설정 될 수 있습니다. &lt;a href=&quot;../03-cli.md#COMPOSER_AUTH&quot;&gt;여기&lt;/a&gt; 에서이 환경 변수의 사용법에 대해 자세히 읽어보십시오 .</target>
        </trans-unit>
        <trans-unit id="091badbd3ca13442d4996bee76cff03f2295613e" translate="yes" xml:space="preserve">
          <source>The first (and often only) thing you specify in &lt;code&gt;composer.json&lt;/code&gt; is the &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; key. You are simply telling Composer which packages your project depends on.</source>
          <target state="translated">당신이 지정하는 첫 번째 (그리고 종종) 일 &lt;code&gt;composer.json&lt;/code&gt; 이 (가)입니다 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt; 키를. 프로젝트에 의존하는 패키지를 Composer에 알리는 것입니다.</target>
        </trans-unit>
        <trans-unit id="19c7aa3f32bdd13d0e34f5df3a83ff6b824c5e25" translate="yes" xml:space="preserve">
          <source>The first (and often only) thing you specify in &lt;code&gt;composer.json&lt;/code&gt; is the &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; key. You are telling Composer which packages your project depends on.</source>
          <target state="translated">당신이 지정하는 첫 번째 (그리고 종종) 일 &lt;code&gt;composer.json&lt;/code&gt; 이 (가)입니다 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt; 키를. 프로젝트가 의존하는 패키지를 Composer에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="4068eb0da4bab0dfa6227d4ca7a2283c9ce6189b" translate="yes" xml:space="preserve">
          <source>The following options are available with every command:</source>
          <target state="translated">모든 명령에 다음 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="translated">다음과 같은 옵션이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="688e77612c7849c6eb5d4e0fbd7cfa158fa310b2" translate="yes" xml:space="preserve">
          <source>The following repository types are supported:</source>
          <target state="translated">다음 저장소 유형이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="38c69aebc2faf396ee7792986c5789b23a388455" translate="yes" xml:space="preserve">
          <source>The format is like package links above, except that the values are free text and not version constraints.</source>
          <target state="translated">형식은 값이 자유 텍스트이며 버전 제약 조건이 아니라는 점을 제외하면 위의 패키지 링크와 같습니다.</target>
        </trans-unit>
        <trans-unit id="576aa3666a88d5083d4ea7e2b38f285df4a4c92c" translate="yes" xml:space="preserve">
          <source>The generated lock file will use the same name: &lt;code&gt;composer-other.lock&lt;/code&gt; in this example.</source>
          <target state="translated">생성 된 잠금 파일은 이 예에서 &lt;code&gt;composer-other.lock&lt;/code&gt; 과 같은 이름을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="fe31ec4a7957f674f8ecc0410e91ef85456dc028" translate="yes" xml:space="preserve">
          <source>The global command allows you to run other commands like &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; as if you were running them from the &lt;a href=&quot;#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; directory.</source>
          <target state="translated">글로벌 명령을 사용하면 마치 &lt;a href=&quot;#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; 디렉토리 에서 마치 마치 마치 &lt;code&gt;install&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; , &lt;code&gt;require&lt;/code&gt; 또는 &lt;code&gt;update&lt;/code&gt; 같은 다른 명령을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="09296591caac805b00e1c7c545308983c42db440" translate="yes" xml:space="preserve">
          <source>The installer will check a few PHP settings and then download &lt;code&gt;composer.phar&lt;/code&gt; to your working directory. This file is the Composer binary. It is a PHAR (PHP archive), which is an archive format for PHP which can be run on the command line, amongst other things.</source>
          <target state="translated">설치 프로그램은 몇 가지 PHP 설정을 확인한 다음 &lt;code&gt;composer.phar&lt;/code&gt; 를 작업 디렉토리에 다운로드 합니다. 이 파일은 Composer 바이너리입니다. PHAR (PHP 아카이브)이며, 다른 것들 중에서도 명령 행에서 실행할 수있는 PHP의 아카이브 형식입니다.</target>
        </trans-unit>
        <trans-unit id="6ab73b5d5179ad996c84e68defcb2f4641ccefde" translate="yes" xml:space="preserve">
          <source>The license of the package. This can be either a string or an array of strings.</source>
          <target state="translated">패키지의 라이센스. 문자열이거나 문자열 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b254b0f71f0fb069aac1d74943b185fdca724e6" translate="yes" xml:space="preserve">
          <source>The local package will be symlinked if possible, in which case the output in the console will read &lt;code&gt;Symlinking from ../../packages/my-package&lt;/code&gt;. If symlinking is &lt;em&gt;not&lt;/em&gt; possible the package will be copied. In that case, the console will output &lt;code&gt;Mirrored from ../../packages/my-package&lt;/code&gt;.</source>
          <target state="translated">로컬 패키지는 가능한 경우 &lt;code&gt;Symlinking from ../../packages/my-package&lt;/code&gt; 콘솔의 출력은 ../../packages/my-package의 심볼릭 링크를 읽습니다 . 심볼릭 링크 인 경우 &lt;em&gt;하지&lt;/em&gt; 가능 패키지가 복사됩니다. 이 경우 콘솔은 &lt;code&gt;Mirrored from ../../packages/my-package&lt;/code&gt; 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="36c3a0eac5c63bf1776205e5e15f95251c900625" translate="yes" xml:space="preserve">
          <source>The main advantage of the auth.json file is that it can be gitignored so that every developer in your team can place their own credentials in there, which makes revocation of credentials much easier than if you all share the same.</source>
          <target state="translated">auth.json 파일의 주요 장점은 팀의 모든 개발자가 자신의 자격 증명을 거기에 배치 할 수있어 모두 공유 할 때보 다 자격 증명을 쉽게 취소 할 수 있다는 점입니다.</target>
        </trans-unit>
        <trans-unit id="b2b50340cec6e7494bab2a7c9baceb0ae86d69c9" translate="yes" xml:space="preserve">
          <source>The main repository type is the &lt;code&gt;composer&lt;/code&gt; repository. It uses a single &lt;code&gt;packages.json&lt;/code&gt; file that contains all of the package metadata.</source>
          <target state="translated">기본 저장소 유형은 &lt;code&gt;composer&lt;/code&gt; 저장소입니다. 모든 패키지 메타 데이터가 포함 된 단일 &lt;code&gt;packages.json&lt;/code&gt; 파일을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="e6c16c3f22602946185936c376b7597c59592a2b" translate="yes" xml:space="preserve">
          <source>The main use cases for this class are the following:</source>
          <target state="translated">이 클래스의 주요 사용 사례는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b01653678cda20fc0c117160c90d6002cd325fef" translate="yes" xml:space="preserve">
          <source>The most important guidelines are described as follows:</source>
          <target state="translated">가장 중요한 지침은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="930e60a16608d07722acb1ffaed843cdbd3adf2d" translate="yes" xml:space="preserve">
          <source>The name can contain any character, including white spaces, and it's case insensitive (&lt;code&gt;foo/bar&lt;/code&gt; and &lt;code&gt;Foo/Bar&lt;/code&gt; are considered the same package). In order to simplify its installation, it's recommended to define a short and lowercase name that doesn't include non-alphanumeric characters or white spaces.</source>
          <target state="translated">이름은 공백을 포함하여 모든 문자를 포함 할 수 있으며 대소 문자를 구분하지 않습니다 ( &lt;code&gt;foo/bar&lt;/code&gt; 및 &lt;code&gt;Foo/Bar&lt;/code&gt; 는 동일한 패키지로 간주 됨). 설치를 단순화하려면 영숫자가 아닌 문자 나 공백을 포함하지 않는 짧은 소문자 이름을 정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="849e1cb65b29df6c38c3d54f0b1a2aced5623dfc" translate="yes" xml:space="preserve">
          <source>The name is not needed in this case, since we don't want to publish the blog as a library. It is added here to clarify which &lt;code&gt;composer.json&lt;/code&gt; is being described.</source>
          <target state="translated">이 경우에는 블로그를 라이브러리로 게시하지 않기 때문에이 이름은 필요하지 않습니다. 설명 되어있는 &lt;code&gt;composer.json&lt;/code&gt; 을 명확하게하기 위해 여기에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8038614c75260a72b5dac13fbb6180174f7704c0" translate="yes" xml:space="preserve">
          <source>The name must be lowercased and consist of words separated by &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt;. The complete name should match &lt;code&gt;^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9](([_.]?|-{0,2})[a-z0-9]+)*$&lt;/code&gt;.</source>
          <target state="translated">이름은 소문자 여야하며 &lt;code&gt;-&lt;/code&gt; ,로 구분 된 단어로 구성되어야합니다 &lt;code&gt;.&lt;/code&gt; 또는 &lt;code&gt;_&lt;/code&gt; . 전체 이름은 &lt;code&gt;^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9](([_.]?|-{0,2})[a-z0-9]+)*$&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21a28c12c78a7a980608fbf55ebe4bc3f11426f8" translate="yes" xml:space="preserve">
          <source>The name of the package. It consists of vendor name and project name, separated by &lt;code&gt;/&lt;/code&gt;. Examples:</source>
          <target state="translated">패키지 이름 벤더 이름과 프로젝트 이름으로 구성되며 &lt;code&gt;/&lt;/code&gt; 로 구분됩니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="9e83e0a707056f1f3aed4b1277097820936e9e4f" translate="yes" xml:space="preserve">
          <source>The only issue is it does not keep track of autoload misses (i.e. when it can not find a given class), so those fallback to PSR-4 rules and can still result in slow filesystem checks. To solve this issue two Level 2 optimization options exist, and you can decide to enable either if you have a lot of class_exists checks that are done for classes that do not exist in your project.</source>
          <target state="translated">유일한 문제는 자동로드 누락을 추적하지 않기 때문에 (예 : 주어진 클래스를 찾을 수없는 경우) PSR-4 규칙으로 대체되어 파일 시스템 검사 속도가 느려질 수 있다는 것입니다. 이 문제를 해결하기 위해 두 가지 레벨 2 최적화 옵션이 존재하며 프로젝트에 존재하지 않는 클래스에 대해 수행되는 class_exists 검사가 많은 경우 사용하도록 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c592e54d9bd0ef8cca02cdff2681bf6fd4b82b81" translate="yes" xml:space="preserve">
          <source>The only issue is it does not keep track of autoload misses (i.e. when it cannot find a given class), so those fallback to PSR-4 rules and can still result in slow filesystem checks. To solve this issue two Level 2 optimization options exist, and you can decide to enable either if you have a lot of class_exists checks that are done for classes that do not exist in your project.</source>
          <target state="translated">유일한 문제는 자동로드 미스 (즉, 주어진 클래스를 찾을 수없는 경우)를 추적하지 않기 때문에 PSR-4 규칙으로 대체되어 파일 시스템 검사가 느려질 수 있다는 것입니다. 이 문제를 해결하기 위해 두 개의 레벨 2 최적화 옵션이 있으며 프로젝트에없는 클래스에 대해 수행되는 class_exists 검사가 많은 경우 둘 중 하나를 사용하도록 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16c62e2def03ee209edb02b97829ea111a8582bd" translate="yes" xml:space="preserve">
          <source>The only required field is &lt;code&gt;packages&lt;/code&gt;. The JSON structure is as follows:</source>
          <target state="translated">필수 필드는 &lt;code&gt;packages&lt;/code&gt; 입니다. JSON 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0288cb9d7001bf0c4de735aa730ff40b8463658" translate="yes" xml:space="preserve">
          <source>The only requirement is the installation of SSH keys for a git client.</source>
          <target state="translated">유일한 요구 사항은 git 클라이언트를위한 SSH 키 설치입니다.</target>
        </trans-unit>
        <trans-unit id="0b60cb58c1e534bf73daea4446a36c691016fbdf" translate="yes" xml:space="preserve">
          <source>The other thing that you may have noticed is that we did not specify a package repository for &lt;code&gt;monolog/monolog&lt;/code&gt;. How did that work? The answer is Packagist.</source>
          <target state="translated">주목 &lt;code&gt;monolog/monolog&lt;/code&gt; 다른 것은 monolog / monolog에 대한 패키지 저장소를 지정하지 않았다는 것 입니다. 어떻게 작동 했습니까? 답은 Packagist입니다.</target>
        </trans-unit>
        <trans-unit id="5c0ffd52ad63aba62f31f23534ea0ba800471d36" translate="yes" xml:space="preserve">
          <source>The package file is the same as any other package file but with the following requirements:</source>
          <target state="translated">패키지 파일은 다른 패키지 파일과 동일하지만 다음 요구 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cee130cdcde39fdbc52dcdaddb645cc6e97568d" translate="yes" xml:space="preserve">
          <source>The package name consists of a vendor name and the project's name. Often these will be identical - the vendor name only exists to prevent naming clashes. For example, it would allow two different people to create a library named &lt;code&gt;json&lt;/code&gt;. One might be named &lt;code&gt;igorw/json&lt;/code&gt; while the other might be &lt;code&gt;seldaek/json&lt;/code&gt;.</source>
          <target state="translated">패키지 이름은 공급 업체 이름과 프로젝트 이름으로 구성됩니다. 벤더 이름은 이름 충돌을 방지하기 위해 존재하는 경우가 종종 있습니다. 예를 들어 두 사람이 &lt;code&gt;json&lt;/code&gt; 이라는 라이브러리를 만들 수 있습니다 . 하나는 이름이 될 수 &lt;code&gt;igorw/json&lt;/code&gt; , 다른 하나는 될 수있는 반면 &lt;code&gt;seldaek/json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="877765edac8eb9a4c4dd77c78b194bef02ca3352" translate="yes" xml:space="preserve">
          <source>The problem however is in production you generally want things to happen as fast as possible, as you can rebuild the configuration every time you deploy and new classes do not appear at random between deploys.</source>
          <target state="translated">그러나 문제는 배포 할 때마다 구성을 다시 빌드 할 수 있고 배포 사이에 새 클래스가 무작위로 나타나지 않기 때문에 일반적으로 가능한 한 빨리 일이 발생하기를 원한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ba596824f1c9acc03aaff3d0c5e89492d0cd2855" translate="yes" xml:space="preserve">
          <source>The problem however is in production you generally want things to happen as fast as possible, as you can simply rebuild the configuration every time you deploy and new classes do not appear at random between deploys.</source>
          <target state="translated">그러나 프로덕션 환경에서는 배포 할 때마다 단순히 구성을 다시 빌드 할 수 있고 배포간에 새 클래스가 무작위로 표시되지 않으므로 일반적으로 가능한 빨리 작업을 수행하려고합니다.</target>
        </trans-unit>
        <trans-unit id="c87a1f6667b6fbfc7ca6e4a469a9bfb7e7b3f98e" translate="yes" xml:space="preserve">
          <source>The reason for this is a SSH Bug: &lt;a href=&quot;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&quot;&gt;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&lt;/a&gt;</source>
          <target state="translated">그 이유는 SSH 버그입니다. &lt;a href=&quot;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&quot;&gt;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e74616579e50eeeb9751aedeec38881aa124c977" translate="yes" xml:space="preserve">
          <source>The recommended notation for the most common licenses is (alphabetical):</source>
          <target state="translated">가장 일반적인 라이센스에 대한 권장 표기법은 다음과 같습니다 (알파벳).</target>
        </trans-unit>
        <trans-unit id="de24bbb3808896de508a6007a1810c68fd60abf9" translate="yes" xml:space="preserve">
          <source>The required version of the &lt;code&gt;composer-plugin-api&lt;/code&gt; follows the same &lt;a href=&quot;../01-basic-usage.md#package-versions&quot;&gt;rules&lt;/a&gt; as a normal package's.</source>
          <target state="translated">&lt;code&gt;composer-plugin-api&lt;/code&gt; 의 필수 버전은 동일한 &lt;a href=&quot;../01-basic-usage.md#package-versions&quot;&gt;규칙을&lt;/a&gt; 따릅니다. 일반 패키지 을 .</target>
        </trans-unit>
        <trans-unit id="ead450eac9213288d85fbad78ce563549cc55707" translate="yes" xml:space="preserve">
          <source>The root JSON object in &lt;code&gt;composer.json&lt;/code&gt; should have a property called &lt;code&gt;&quot;scripts&quot;&lt;/code&gt;, which contains pairs of named events and each event's corresponding scripts. An event's scripts can be defined as either a string (only for a single script) or an array (for single or multiple scripts.)</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 의 루트 JSON 객체에는 &lt;code&gt;&quot;scripts&quot;&lt;/code&gt; 라는 속성이 있어야합니다. 에는 이름이 지정된 이벤트 쌍과 각 이벤트의 해당 스크립트가 포함 된 . 이벤트 스크립트는 문자열 (단일 스크립트의 경우에만) 또는 배열 (단일 또는 여러 스크립트의 경우)로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdcbfae32d396cb43f2cd781106c9a0b37fc97d7" translate="yes" xml:space="preserve">
          <source>The root package is the package defined by the &lt;code&gt;composer.json&lt;/code&gt; at the root of your project. It is the main &lt;code&gt;composer.json&lt;/code&gt; that defines your project requirements.</source>
          <target state="translated">루트 패키지는 프로젝트 루트에서 &lt;code&gt;composer.json&lt;/code&gt; 에 의해 정의 된 패키지입니다 . 주요 &lt;code&gt;composer.json&lt;/code&gt; 프로젝트 요구 사항을 정의 입니다.</target>
        </trans-unit>
        <trans-unit id="1102143d07f591ff1fd93043021ac13b67e6ab90" translate="yes" xml:space="preserve">
          <source>The safest method to merge Composer files is to accept the version from one branch and apply the changes from the other branch.</source>
          <target state="translated">Composer 파일을 병합하는 가장 안전한 방법은 한 분기의 버전을 수락하고 다른 분기의 변경 사항을 적용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="032d7410bc5b6e2ae478d269c5bbbe037af44517" translate="yes" xml:space="preserve">
          <source>The search command allows you to search through the current project's package repositories. Usually this will be packagist. You pass it the terms you want to search for.</source>
          <target state="translated">search 명령어를 사용하면 현재 프로젝트의 패키지 저장소를 검색 할 수 있습니다. 보통 이것은 패 키스트가 될 것입니다. 검색하려는 용어를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="0d27a084f3c58557e3e5085f03343451a07fd268" translate="yes" xml:space="preserve">
          <source>The search command allows you to search through the current project's package repositories. Usually this will be packagist. You simply pass it the terms you want to search for.</source>
          <target state="translated">검색 명령을 사용하면 현재 프로젝트의 패키지 리포지토리를 검색 할 수 있습니다. 보통 이것은 packagist입니다. 검색하려는 용어를 전달하면됩니다.</target>
        </trans-unit>
        <trans-unit id="07b2379a00bfbef1eb7b642be0c8481fce4a3906" translate="yes" xml:space="preserve">
          <source>The simplest way to provide your credentials is providing your set of credentials inline with the repository specification such as:</source>
          <target state="translated">신임 정보를 제공하는 가장 간단한 방법은 다음과 같은 저장소 스펙과 함께 신임 정보 세트를 제공하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1ba576ae3a9813a0abcc5f206da578a7509b0735" translate="yes" xml:space="preserve">
          <source>The storage can be done either globally in the &lt;code&gt;COMPOSER_HOME/auth.json&lt;/code&gt; file (&lt;code&gt;COMPOSER_HOME&lt;/code&gt; defaults to &lt;code&gt;~/.composer&lt;/code&gt; or &lt;code&gt;%APPDATA%/Composer&lt;/code&gt; on Windows) or also in the project directory directly sitting besides your composer.json.</source>
          <target state="translated">저장은 &lt;code&gt;COMPOSER_HOME/auth.json&lt;/code&gt; 파일 ( &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 의 기본값은 &lt;code&gt;~/.composer&lt;/code&gt; 또는 Windows의 &lt;code&gt;%APPDATA%/Composer&lt;/code&gt; 설정 됨) 또는 composer.json 바로 옆에있는 프로젝트 디렉토리에서 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3786eab82b9ee0f5de6dcefa0f28d49776190b9f" translate="yes" xml:space="preserve">
          <source>The third way if you want to pre-configure it is via an &lt;code&gt;auth.json&lt;/code&gt; file located in your &lt;code&gt;COMPOSER_HOME&lt;/code&gt; or besides your &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">사전 구성하려는 세 번째 방법은 &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 또는 &lt;code&gt;composer.json&lt;/code&gt; 옆에 있는 &lt;code&gt;auth.json&lt;/code&gt; 파일 을 사용하는 것입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="caa380ccd2b7df5644a55fb951b3298bca1d2639" translate="yes" xml:space="preserve">
          <source>The timeout in seconds for process executions, defaults to 300 (5mins). The duration processes like git clones can run before Composer assumes they died out. You may need to make this higher if you have a slow connection or huge vendors.</source>
          <target state="translated">프로세스 실행에 대한 제한 시간 (초), 기본값은 300 (5 분)입니다. git 클론과 같은 기간 프로세스는 Composer가 종료되었다고 가정하기 전에 실행할 수 있습니다. 연결 속도가 느리거나 공급 업체가 큰 경우이 값을 높여야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b6194f3afae6f2fec456c59d1ca44bcc1adfe0c" translate="yes" xml:space="preserve">
          <source>The type of the package. It defaults to &lt;code&gt;library&lt;/code&gt;.</source>
          <target state="translated">패키지의 유형입니다. 기본적으로 &lt;code&gt;library&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a6bfcf684e60dd5d9c5f5bcf4f2c4807e77e41f3" translate="yes" xml:space="preserve">
          <source>The version field will contain the normalized representation of the version number.</source>
          <target state="translated">버전 필드에는 버전 번호의 정규화 된 표현이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="759f1b8c12e0341f925afc594e02cedcaa6edd3b" translate="yes" xml:space="preserve">
          <source>The version of the package. In most cases this is not required and should be omitted (see below).</source>
          <target state="translated">패키지 버전. 대부분의 경우 이것은 필요하지 않으므로 생략해야합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="dc6bb75a3bde978c138e77546ac0a039cc2e4f64" translate="yes" xml:space="preserve">
          <source>The warning in the section above does not apply in this case as you are sure the package is present and not being replaced if your code is running.</source>
          <target state="translated">위 섹션의 경고는 패키지가 있고 코드가 실행중인 경우 교체되지 않는다는 것을 확신하므로이 경우에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c81b86dba2727cfdc2b29ee77c508d88ad12aa77" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;composer show -s&lt;/code&gt; will give you &lt;code&gt;versions : * dev-latest-testing&lt;/code&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;composer show -s&lt;/code&gt; 는 다음과 같은 &lt;code&gt;versions : * dev-latest-testing&lt;/code&gt; 을 제공합니다 . * dev-latest-testing .</target>
        </trans-unit>
        <trans-unit id="b092304faf36cff4452c050742f05ab3dc1a2890" translate="yes" xml:space="preserve">
          <source>Then, to add the package &lt;code&gt;my/package&lt;/code&gt; as a dependency, in your &lt;code&gt;apps/my-app/composer.json&lt;/code&gt; file, you can use the following configuration:</source>
          <target state="translated">그런 다음, &lt;code&gt;my/package&lt;/code&gt; 패키지 를 종속성 으로 추가하려면 &lt;code&gt;apps/my-app/composer.json&lt;/code&gt; 파일에서 다음 구성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2caac88b27f73705cd4b2896e5a18514677a502c" translate="yes" xml:space="preserve">
          <source>There are a few options to enable this:</source>
          <target state="translated">이를 가능하게하는 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e82b97b9e6d27e56f324e53ecc6647a8c47d70e" translate="yes" xml:space="preserve">
          <source>There are a few tools that can help you create a &lt;code&gt;composer&lt;/code&gt; repository.</source>
          <target state="translated">&lt;code&gt;composer&lt;/code&gt; 저장소 를 작성하는 데 도움이되는 몇 가지 도구가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69b0e43cefa9085ad5aa1a739c43bbe536ecc32a" translate="yes" xml:space="preserve">
          <source>There are a few use cases for this. The most common one is maintaining your own fork of a third party library. If you are using a certain library for your project and you decide to change something in the library, you will want your project to use the patched version. If the library is on GitHub (this is the case most of the time), you can simply fork it there and push your changes to your fork. After that you update the project's &lt;code&gt;composer.json&lt;/code&gt;. All you have to do is add your fork as a repository and update the version constraint to point to your custom branch. In &lt;code&gt;composer.json&lt;/code&gt;, you should prefix your custom branch name with &lt;code&gt;&quot;dev-&quot;&lt;/code&gt;. For version constraint naming conventions see &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; for more information.</source>
          <target state="translated">이에 대한 몇 가지 사용 사례가 있습니다. 가장 일반적인 것은 타사 라이브러리의 포크를 유지 관리하는 것입니다. 프로젝트에 특정 라이브러리를 사용하고 라이브러리에서 무언가를 변경하기로 결정한 경우, 프로젝트가 패치 된 버전을 사용하도록 할 것입니다. 라이브러리가 GitHub에있는 경우 (대부분의 경우), 단순히 라이브러리를 포크하여 변경 사항을 포크로 푸시 할 수 있습니다. 그런 다음 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 을 업데이트하십시오 . 포크를 리포지토리로 추가하고 사용자 지정 분기를 가리 키도록 버전 제약 조건을 업데이트하기 만하면됩니다. 에서 &lt;code&gt;composer.json&lt;/code&gt; , 당신은 귀하의 사용자 정의 지점 이름 앞에해야한다 &lt;code&gt;&quot;dev-&quot;&lt;/code&gt; . 버전 제약 조건 명명 규칙은 &lt;a href=&quot;02-libraries.md&quot;&gt;라이브러리를&lt;/a&gt; 참조하십시오. 대한 자세한 내용 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1233d502c9730c34620b96d595dc1c1b775653f5" translate="yes" xml:space="preserve">
          <source>There are a few use cases for this. The most common one is maintaining your own fork of a third party library. If you are using a certain library for your project, and you decide to change something in the library, you will want your project to use the patched version. If the library is on GitHub (this is the case most of the time), you can fork it there and push your changes to your fork. After that you update the project's &lt;code&gt;composer.json&lt;/code&gt;. All you have to do is add your fork as a repository and update the version constraint to point to your custom branch. In &lt;code&gt;composer.json&lt;/code&gt;, you should prefix your custom branch name with &lt;code&gt;&quot;dev-&quot;&lt;/code&gt;. For version constraint naming conventions see &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; for more information.</source>
          <target state="translated">이에 대한 몇 가지 사용 사례가 있습니다. 가장 일반적인 방법은 타사 라이브러리의 포크를 유지하는 것입니다. 프로젝트에 특정 라이브러리를 사용하고 있고 라이브러리의 내용을 변경하기로 결정한 경우 프로젝트에서 패치 된 버전을 사용하기를 원할 것입니다. 라이브러리가 GitHub에있는 경우 (대부분의 경우) 여기에서 포크하고 변경 사항을 포크로 푸시 할 수 있습니다. 그 후 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 을 업데이트합니다 . 포크를 저장소로 추가하고 사용자 정의 브랜치를 가리 키도록 버전 제약 조건을 업데이트하기 만하면됩니다. &lt;code&gt;composer.json&lt;/code&gt; 에서는 커스텀 브랜치 이름에 &lt;code&gt;&quot;dev-&quot;&lt;/code&gt; 접두사를 붙여야합니다 . 버전 제약 이름 지정 규칙에 대한 자세한 내용 은 &lt;a href=&quot;02-libraries.md&quot;&gt;라이브러리&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="89e81f0478390ee653634a9fb1e63def657536df" translate="yes" xml:space="preserve">
          <source>There are however a few cases where you may want to specifically load some packages from a given repository, but not all. Or you may want a given repository to not be canonical, and to be only preferred if it has higher package versions than the repositories defined below.</source>
          <target state="translated">그러나 특정 리포지토리에서 일부 패키지를로드하고 싶은 경우가 있지만 전부는 아닙니다. 또는 주어진 저장소가 정식이 아니고 아래에 정의 된 저장소보다 높은 패키지 버전이있는 경우에만 선호되도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2510892334769e69dac24f517418c47cbf7273d5" translate="yes" xml:space="preserve">
          <source>There are in short, two ways to install Composer. Locally as part of your project, or globally as a system wide executable.</source>
          <target state="translated">Composer를 설치하는 두 가지 방법이 있습니다. 프로젝트의 일부 또는 로컬 시스템 전체 실행 파일</target>
        </trans-unit>
        <trans-unit id="e311c75c677569dd2679ee1ac2316e004cb296c7" translate="yes" xml:space="preserve">
          <source>There are many people using Composer already, and quite a few of them are contributing.</source>
          <target state="translated">이미 Composer를 사용하는 사람이 많으며 상당수가 기여하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ef7a17bcf1322d5df05ace80c02af5fff7d59b7" translate="yes" xml:space="preserve">
          <source>There are no real trade-offs with this method. It should always be enabled in production.</source>
          <target state="translated">이 방법과의 실질적인 상충 관계는 없습니다. 프로덕션 환경에서는 항상 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="71b78b7b768e6a18ce5d199234ffc433eae124f8" translate="yes" xml:space="preserve">
          <source>There are several applications for this:</source>
          <target state="translated">이를위한 몇 가지 응용 프로그램이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4a855512a3173775422c90cda3e6b70678917cd" translate="yes" xml:space="preserve">
          <source>There are some cases, when there is no ability to have one of the previously mentioned repository types online, even the VCS one. A typical example could be cross-organisation library exchange through build artifacts. Of course, most of the time these are private. To use these archives as-is, one can use a repository of type &lt;code&gt;artifact&lt;/code&gt; with a folder containing ZIP or TAR archives of those private packages:</source>
          <target state="translated">이전에 언급 한 저장소 유형 중 하나를 온라인으로 사용할 수없는 경우가 있습니다. VCS 유형도 마찬가지입니다. 전형적인 예는 빌드 아티팩트를 통한 조직 간 라이브러리 교환이 될 수 있습니다. 물론 대부분의 경우 비공개입니다. 이러한 아카이브를있는 그대로 사용하려면 해당 개인 패키지의 ZIP 또는 TAR 아카이브가 포함 된 폴더가있는 &lt;code&gt;artifact&lt;/code&gt; 유형의 저장소를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="146d9f32104343cdde0c248efaa6c6eab0c03fb4" translate="yes" xml:space="preserve">
          <source>There are some cases, when there is no ability to have one of the previously mentioned repository types online, even the VCS one. Typical example could be cross-organisation library exchange through built artifacts. Of course, most of the times they are private. To simplify maintenance, one can simply use a repository of type &lt;code&gt;artifact&lt;/code&gt; with a folder containing ZIP archives of those private packages:</source>
          <target state="translated">앞에서 언급 한 리포지토리 유형 중 하나를 온라인으로 보유 할 수있는 능력이 없거나 VCS를 포함하는 경우도 있습니다. 일반적인 예는 빌드 된 아티팩트를 통한 조직 간 라이브러리 교환 일 수 있습니다. 물론, 대부분의 경우 그들은 사적입니다. 유지 보수를 단순화하기 위해 &lt;code&gt;artifact&lt;/code&gt; 유형의 저장소를 간단히 사용할 수 있습니다. 개인 패키지의 ZIP 아카이브가 포함 된 폴더에 됩니다.</target>
        </trans-unit>
        <trans-unit id="b9382ece759da34331e7d022e1aa4b31eaf1289b" translate="yes" xml:space="preserve">
          <source>There is no simple work-around to this limitation. It is therefore strongly recommended that you do not use it.</source>
          <target state="translated">이 제한에 대한 간단한 해결 방법은 없습니다. 따라서 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e1bf0ee9d75d3527b40d7428cc9cbb253ae2c7ea" translate="yes" xml:space="preserve">
          <source>There's one more thing that will affect which files are checked out of a library's VCS and added to your project: Composer allows you to specify stability constraints to limit which tags are considered valid. In the above example, note that the library released a beta and two release candidates for version &lt;code&gt;1.1&lt;/code&gt; before the final official release. To receive these versions when running &lt;code&gt;composer install&lt;/code&gt; or &lt;code&gt;composer update&lt;/code&gt;, we have to explicitly tell Composer that we are ok with release candidates and beta releases (and alpha releases, if we want those). This can be done using either a project-wide &lt;code&gt;minimum-stability&lt;/code&gt; value in &lt;code&gt;composer.json&lt;/code&gt; or using &quot;stability flags&quot; in version constraints. Read more on the &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;schema page&lt;/a&gt;.</source>
          <target state="translated">라이브러리의 VCS에서 체크 아웃되어 프로젝트에 추가되는 파일에 영향을 미치는 또 다른 사항이 있습니다. Composer를 사용하면 어떤 태그가 유효한 것으로 간주되는지 제한하기 위해 안정성 제약 조건을 지정할 수 있습니다. 위의 예에서, 라이브러리 는 최종 공식 릴리스 이전 에 버전 &lt;code&gt;1.1&lt;/code&gt; 에 대한 베타 및 2 개의 릴리스 후보를 릴리스했습니다. &lt;code&gt;composer install&lt;/code&gt; 또는 &lt;code&gt;composer update&lt;/code&gt; 를 실행할 때 이러한 버전을 받으려면 릴리스 후보 및 베타 릴리스 (및 원하는 경우 알파 릴리스)에 대해 Composer에 명시 적으로 명시해야합니다. 이 작업 은 &lt;code&gt;composer.json&lt;/code&gt; 의 프로젝트 전체 &lt;code&gt;minimum-stability&lt;/code&gt; 값 또는 버전 제약 조건의 &quot;안정성 플래그&quot;를 사용하여 수행 할 수 있습니다 . 에 대한 자세한 내용&lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;스키마 페이지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9dc4585f91b0cc271803a8203abaea09219bca94" translate="yes" xml:space="preserve">
          <source>Therefore if you use this it is recommended, and safer, to also run the &lt;a href=&quot;03-cli.md#check-platform-reqs&quot;&gt;&lt;code&gt;check-platform-reqs&lt;/code&gt;&lt;/a&gt; command as part of your deployment strategy.</source>
          <target state="translated">따라서이를 사용하는 경우 배포 전략의 일부로 &lt;a href=&quot;03-cli.md#check-platform-reqs&quot;&gt; &lt;code&gt;check-platform-reqs&lt;/code&gt; &lt;/a&gt; 명령을 실행하는 것이 더 안전하고 권장 됩니다.</target>
        </trans-unit>
        <trans-unit id="2b031101637482ed2f5237dbf7cc920e749bcbfa" translate="yes" xml:space="preserve">
          <source>Therefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.</source>
          <target state="translated">따라서 단위 테스트를위한 전용 경로를 사용하여 autoload-dev 섹션에 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e796a89df7b8621655961a7bdef784f391a63353" translate="yes" xml:space="preserve">
          <source>These fields are optional. You probably don't need them for your own custom repository.</source>
          <target state="translated">이 필드는 선택 사항입니다. 사용자 정의 저장소에는 필요하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1db040d5c72d57c336ed3f20f9d2be23996a417" translate="yes" xml:space="preserve">
          <source>This brings us to the second scenario. If there is already a &lt;code&gt;composer.lock&lt;/code&gt; file as well as a &lt;code&gt;composer.json&lt;/code&gt; file when you run &lt;code&gt;composer install&lt;/code&gt;, it means either you ran the &lt;code&gt;install&lt;/code&gt; command before, or someone else on the project ran the &lt;code&gt;install&lt;/code&gt; command and committed the &lt;code&gt;composer.lock&lt;/code&gt; file to the project (which is good).</source>
          <target state="translated">이것은 두 번째 시나리오로 이어집니다. 이미있는 경우 &lt;code&gt;composer.lock&lt;/code&gt; 의 파일뿐만 아니라 &lt;code&gt;composer.json&lt;/code&gt; 의 파일을 실행할 &lt;code&gt;composer install&lt;/code&gt; , 당신이 실행 중 하나를 의미 &lt;code&gt;install&lt;/code&gt; 하기 전에 명령을하거나 프로젝트에 다른 사람은 실행 &lt;code&gt;install&lt;/code&gt; 명령을하고 최선을 다하고 &lt;code&gt;composer.lock&lt;/code&gt; 의 파일을 프로젝트에 (좋은).</target>
        </trans-unit>
        <trans-unit id="98a5199b6c6365a14d529d06e87a6a53eacade1d" translate="yes" xml:space="preserve">
          <source>This can be used to install CLI utilities globally. Here is an example:</source>
          <target state="translated">CLI 유틸리티를 전체적으로 설치하는 데 사용할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3c181fb8f0adf46849c28697563e3503acbdc7be" translate="yes" xml:space="preserve">
          <source>This can be virtually anything. To access it from within a script event handler, you can do:</source>
          <target state="translated">이것은 사실상 무엇이든 될 수 있습니다. 스크립트 이벤트 핸들러 내에서 액세스하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b56c5a93de6bdedea1c140ad3096ef36d7b8331d" translate="yes" xml:space="preserve">
          <source>This chapter will describe the &lt;code&gt;config&lt;/code&gt; section of the &lt;code&gt;composer.json&lt;/code&gt;&lt;a href=&quot;04-schema.md&quot;&gt;schema&lt;/a&gt;.</source>
          <target state="translated">이 장에서는 &lt;code&gt;config&lt;/code&gt; 대해 설명합니다 &lt;code&gt;composer.json&lt;/code&gt; 섹션에&lt;a href=&quot;04-schema.md&quot;&gt; 스키마&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7d01976617363a2b6ec0423ec033e7f422b5bc04" translate="yes" xml:space="preserve">
          <source>This chapter will explain all of the fields available in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">이 장에서는 사용 가능한 모든 필드에 대해 설명합니다 &lt;code&gt;composer.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ee395c5409a92c00e47933388323ebff1a9cb83" translate="yes" xml:space="preserve">
          <source>This chapter will explain the concept of packages and repositories, what kinds of repositories are available, and how they work.</source>
          <target state="translated">이 장에서는 패키지 및 리포지토리의 개념, 사용 가능한 리포지토리 종류 및 작동 방식에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="50e7d817ba1292d5bb989f2e5f69b6aee88f999a" translate="yes" xml:space="preserve">
          <source>This chapter will tell you how to make your library installable through Composer.</source>
          <target state="translated">이 장에서는 Composer를 통해 라이브러리를 설치하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5ce164f0d999844a661997833638cbecd8a1f82d" translate="yes" xml:space="preserve">
          <source>This command is used to generate a zip/tar archive for a given package in a given version. It can also be used to archive your entire project without excluded/ignored files.</source>
          <target state="translated">이 명령은 지정된 버전에서 지정된 패키지에 대한 zip / tar 아카이브를 생성하는 데 사용됩니다. 제외 / 무시 된 파일없이 전체 프로젝트를 보관하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b7ddc1c924639a6b818a41b1eff325460110731" translate="yes" xml:space="preserve">
          <source>This command will re-generate the &lt;code&gt;vendor/autoload.php&lt;/code&gt; file. See the &lt;a href=&quot;03-cli.md#dump-autoload-dumpautoload-&quot;&gt;&lt;code&gt;dump-autoload&lt;/code&gt;&lt;/a&gt; section for more information.</source>
          <target state="translated">이 명령은 &lt;code&gt;vendor/autoload.php&lt;/code&gt; 파일 을 다시 생성 합니다. 자세한 정보는 &lt;a href=&quot;03-cli.md#dump-autoload-dumpautoload-&quot;&gt; &lt;code&gt;dump-autoload&lt;/code&gt; &lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="269b801bb9ae4279065ae484b2bdaa0d3fbdfad3" translate="yes" xml:space="preserve">
          <source>This could be happening because the VPS runs out of memory and has no Swap space enabled.</source>
          <target state="translated">VPS에 메모리가 부족하고 스왑 공간이 활성화되어 있지 않기 때문에 이런 일이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b15770fca05fdf1570af15d77bad5b9faa32a161" translate="yes" xml:space="preserve">
          <source>This could be happening because you are working in a &lt;em&gt;OneDrive&lt;/em&gt; directory and using a version of PHP that does not support the file system semantics of this service. The issue was fixed in PHP 7.2.23 and 7.3.10.</source>
          <target state="translated">&lt;em&gt;OneDrive&lt;/em&gt; 디렉터리 에서 작업 하고이 서비스의 파일 시스템 의미 체계를 지원하지 않는 PHP 버전을 사용 하기 때문에 이러한 문제가 발생할 수 있습니다 . 이 문제는 PHP 7.2.23 및 7.3.10에서 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="02d7a82eed5d2736757e1227f97bc4cc007cbfa4" translate="yes" xml:space="preserve">
          <source>This defines the default behavior for filtering packages by stability. This defaults to &lt;code&gt;stable&lt;/code&gt;, so if you rely on a &lt;code&gt;dev&lt;/code&gt; package, you should specify it in your file to avoid surprises.</source>
          <target state="translated">안정성으로 패키지를 필터링하는 기본 동작을 정의합니다. 이것은 기본적으로 &lt;code&gt;stable&lt;/code&gt; 되어 있으므로 &lt;code&gt;dev&lt;/code&gt; 에게 의존한다면 패키지 놀라움을 피하기 위해 파일에 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="794cba34d07e2b9c98e2e3183c8e7cd5dde7a1c7" translate="yes" xml:space="preserve">
          <source>This does not work for everybody especially when you don't want to hard code your credentials into your composer.json. There is a second way to provide these details and it is via interaction. If you don't provide the authentication credentials composer will prompt you upon connection to enter the username and password.</source>
          <target state="translated">자격 증명을 composer.json에 하드 코딩하지 않으려는 경우 특히 모든 사람에게 적용되는 것은 아닙니다. 이러한 세부 사항을 제공하는 두 번째 방법이 있으며 상호 작용을 통한 것입니다. 인증 자격 증명을 제공하지 않으면 composer가 연결시 사용자 이름과 비밀번호를 입력하라는 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7aa3f6649111d9ed0d06f1d274e525d42297ac65" translate="yes" xml:space="preserve">
          <source>This env var controls the &lt;a href=&quot;06-config.md#discard-changes&quot;&gt;&lt;code&gt;discard-changes&lt;/code&gt;&lt;/a&gt; config option.</source>
          <target state="translated">이 환경 변수는 &lt;a href=&quot;06-config.md#discard-changes&quot;&gt; &lt;code&gt;discard-changes&lt;/code&gt; &lt;/a&gt; 제어합니다 구성 옵션을 .</target>
        </trans-unit>
        <trans-unit id="e32555553ed3e290e4a69cf09a33bacaf055a850" translate="yes" xml:space="preserve">
          <source>This env var controls the time Composer waits for commands (such as git commands) to finish executing. The default value is 300 seconds (5 minutes).</source>
          <target state="translated">이 env var는 Composer가 명령 (예 : git 명령)의 실행을 기다리는 시간을 제어합니다. 기본값은 300 초 (5 분)입니다.</target>
        </trans-unit>
        <trans-unit id="615ba59e0c3fdabd3227e4004465ce595349f96e" translate="yes" xml:space="preserve">
          <source>This field is optional.</source>
          <target state="translated">이 필드는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="25f773b45dc1d077eab23d12843ac204d4e7d0db" translate="yes" xml:space="preserve">
          <source>This file allows you to set &lt;a href=&quot;05-repositories.md&quot;&gt;repositories&lt;/a&gt; and &lt;a href=&quot;06-config.md&quot;&gt;configuration&lt;/a&gt; for the user's projects.</source>
          <target state="translated">이 파일을 사용하면 &lt;a href=&quot;05-repositories.md&quot;&gt;리포지토리&lt;/a&gt; 및 &lt;a href=&quot;06-config.md&quot;&gt;구성&lt;/a&gt; 을 설정할 수 있습니다 사용자 프로젝트의 .</target>
        </trans-unit>
        <trans-unit id="a61d6eb46f437a2039b1a891b447b6f83f8cb900" translate="yes" xml:space="preserve">
          <source>This idea is not new and Composer is strongly inspired by node's &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and ruby's &lt;a href=&quot;https://bundler.io/&quot;&gt;bundler&lt;/a&gt;.</source>
          <target state="translated">이 아이디어는 새로운 것이 아니며 Composer는 node의 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; 과 ruby의 &lt;a href=&quot;https://bundler.io/&quot;&gt;bundler&lt;/a&gt; 에서 영감을 얻었습니다 .</target>
        </trans-unit>
        <trans-unit id="f43d3360a516851b82c29541a27032cb10e71edc" translate="yes" xml:space="preserve">
          <source>This is a convenient way to expose useful scripts that would otherwise be hidden deep in the &lt;code&gt;vendor/&lt;/code&gt; directory.</source>
          <target state="translated">이것은 &lt;code&gt;vendor/&lt;/code&gt; 깊이 숨겨져있는 유용한 스크립트를 노출시키는 편리한 방법입니다. 디렉토리 입니다.</target>
        </trans-unit>
        <trans-unit id="a15fb1d5f318a791244ecf150eb9fe2a1c7a094e" translate="yes" xml:space="preserve">
          <source>This is a list of common pitfalls on using Composer, and how to avoid them.</source>
          <target state="translated">Composer 사용에 대한 일반적인 함정과이를 피하는 방법의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="71b37310b87747d8c2abedcf6ab82e79a6703a19" translate="yes" xml:space="preserve">
          <source>This is also the repository type that packagist uses. To reference a &lt;code&gt;composer&lt;/code&gt; repository, supply the path before the &lt;code&gt;packages.json&lt;/code&gt; file. In the case of packagist, that file is located at &lt;code&gt;/packages.json&lt;/code&gt;, so the URL of the repository would be &lt;code&gt;repo.packagist.org&lt;/code&gt;. For &lt;code&gt;example.org/packages.json&lt;/code&gt; the repository URL would be &lt;code&gt;example.org&lt;/code&gt;.</source>
          <target state="translated">이것은 또한 packagist가 사용하는 저장소 유형입니다. &lt;code&gt;composer&lt;/code&gt; 저장소 를 참조하려면 &lt;code&gt;packages.json&lt;/code&gt; 파일 앞에 경로를 제공 하십시오. packagist의 경우 해당 파일은 &lt;code&gt;/packages.json&lt;/code&gt; 에 있으므로 저장소의 URL은 &lt;code&gt;repo.packagist.org&lt;/code&gt; 입니다. 들어 &lt;code&gt;example.org/packages.json&lt;/code&gt; 저장소 URL은 &lt;code&gt;example.org&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="afc61b9ad0882a9a7d52f3937e6417517cfb1bd7" translate="yes" xml:space="preserve">
          <source>This is also useful for packages that contain sub-packages, for example the main symfony/symfony package contains all the Symfony Components which are also available as individual packages. If you require the main package it will automatically fulfill any requirement of one of the individual components, since it replaces them.</source>
          <target state="translated">서브 패키지를 포함하는 패키지에도 유용합니다. 예를 들어 기본 symfony / symfony 패키지에는 개별 패키지로도 제공되는 모든 Symfony 구성 요소가 포함되어 있습니다. 기본 패키지가 필요한 경우 개별 구성 요소 중 하나의 구성 요소를 대체하기 때문에 자동으로 개별 구성 요소 중 하나의 요구 사항을 충족시킵니다.</target>
        </trans-unit>
        <trans-unit id="cbe4aa68ca27a50043ea6e8b1b420a402bc0c559" translate="yes" xml:space="preserve">
          <source>This is merely a helper to manage a project stored in a central location that can hold CLI tools or Composer plugins that you want to have available everywhere.</source>
          <target state="translated">이것은 어디에서나 사용하고자하는 CLI 도구 또는 Composer 플러그인을 보유 할 수있는 중앙 위치에 저장된 프로젝트를 관리하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="630b87b3362d9dc01dbb3b7a5ccfaa781f3b0a0d" translate="yes" xml:space="preserve">
          <source>This is not really fun when you want to try a bugfix of some library that is a dependency of your local project.</source>
          <target state="translated">로컬 프로젝트의 종속성 인 일부 라이브러리의 버그 수정을 시도 할 때 이것은 실제로 재미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d285a58a6cf046380fb19cf8267b1f401561e541" translate="yes" xml:space="preserve">
          <source>This is really helpful when you have dependencies using &quot;self.version&quot;, so that not dev-master, but the same branch is installed (in the example: latest-testing).</source>
          <target state="translated">이것은 &quot;self.version&quot;을 사용하는 의존성이있어서 dev-master는 아니지만 동일한 브랜치 (예 : 최신 테스트)가 설치되어있을 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="297ef1064ecf692acaf43573dd7aad2404025743" translate="yes" xml:space="preserve">
          <source>This is the easiest way to get Composer set up on your machine.</source>
          <target state="translated">컴퓨터에서 Composer를 설정하는 가장 쉬운 방법입니다.</target>
        </trans-unit>
        <trans-unit id="19a6a900f69bd2cac4709641972987b0a41a40ca" translate="yes" xml:space="preserve">
          <source>This is the recommended operator for maximum interoperability when writing library code.</source>
          <target state="translated">라이브러리 코드를 작성할 때 최대의 상호 운용성을 위해 권장되는 연산자입니다.</target>
        </trans-unit>
        <trans-unit id="1ba711385f703e6f318e3d9fbed2b697acdf8ad6" translate="yes" xml:space="preserve">
          <source>This issue can also happen on cPanel instances, when the shell fork bomb protection is activated. For more information, see the &lt;a href=&quot;https://documentation.cpanel.net/display/68Docs/Shell+Fork+Bomb+Protection&quot;&gt;documentation&lt;/a&gt; of the fork bomb feature on the cPanel site.</source>
          <target state="translated">쉘 포크 폭탄 보호가 활성화 된 경우 cPanel 인스턴스에서도이 문제가 발생할 수 있습니다. 자세한 내용 은 cPanel 사이트에서 포크 폭탄 기능 &lt;a href=&quot;https://documentation.cpanel.net/display/68Docs/Shell+Fork+Bomb+Protection&quot;&gt;설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e15eadd50149eea941037db36653f24c06455188" translate="yes" xml:space="preserve">
          <source>This must follow the format of &lt;code&gt;X.Y.Z&lt;/code&gt; or &lt;code&gt;vX.Y.Z&lt;/code&gt; with an optional suffix of &lt;code&gt;-dev&lt;/code&gt;, &lt;code&gt;-patch&lt;/code&gt; (&lt;code&gt;-p&lt;/code&gt;), &lt;code&gt;-alpha&lt;/code&gt; (&lt;code&gt;-a&lt;/code&gt;), &lt;code&gt;-beta&lt;/code&gt; (&lt;code&gt;-b&lt;/code&gt;) or &lt;code&gt;-RC&lt;/code&gt;. The patch, alpha, beta and RC suffixes can also be followed by a number.</source>
          <target state="translated">이것은 선택적 접미어 &lt;code&gt;-dev&lt;/code&gt; , &lt;code&gt;-patch&lt;/code&gt; ( &lt;code&gt;-p&lt;/code&gt; ), &lt;code&gt;-alpha&lt;/code&gt; ( &lt;code&gt;-a&lt;/code&gt; ), &lt;code&gt;-beta&lt;/code&gt; ( &lt;code&gt;-b&lt;/code&gt; ) 또는 &lt;code&gt;-RC&lt;/code&gt; 와 함께 &lt;code&gt;X.Y.Z&lt;/code&gt; 또는 &lt;code&gt;vX.Y.Z&lt;/code&gt; 형식을 따라야합니다. . 패치, 알파, 베타 및 RC 접미사 뒤에 숫자가 올 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b17d4d8f8da8df5c76438be22277a7f04c52cab" translate="yes" xml:space="preserve">
          <source>This option adds an APCu cache as a fallback for the class map. It will not automatically generate the class map though, so you should still enable Level 1 optimizations manually if you so desire.</source>
          <target state="translated">이 옵션은 APCu 캐시를 클래스 맵의 폴백으로 추가합니다. 클래스 맵은 자동으로 생성되지 않으므로 원하는 경우 레벨 1 최적화를 수동으로 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="f91f2d80d3c41affb8e7d9f876bea35afb2af5a4" translate="yes" xml:space="preserve">
          <source>This option is very simple, it says that if something is not found in the classmap, then it does not exist and the autoloader should not attempt to look on the filesystem according to PSR-4 rules.</source>
          <target state="translated">이 옵션은 매우 간단합니다. 클래스 맵에서 무언가를 찾지 못하면 존재하지 않으며 오토로더가 PSR-4 규칙에 따라 파일 시스템을 보려고 시도해서는 안된다고 말합니다.</target>
        </trans-unit>
        <trans-unit id="274dc18099357a20062ba0f3d48a5c0ea15f7b3a" translate="yes" xml:space="preserve">
          <source>This option makes the autoloader always return very quickly. On the flipside it also means that in case a class is generated at runtime for some reason, it will not be allowed to be autoloaded. If your project or any of your dependencies does that then you might experience &quot;class not found&quot; issues in production. Enable this with care.</source>
          <target state="translated">이 옵션을 사용하면 오토로더가 항상 매우 빠르게 돌아옵니다. 반대로 어떤 이유로 런타임에 클래스가 생성되는 경우 자동로드 할 수 없다는 것을 의미합니다. 프로젝트 또는 종속성이 수행하는 경우 프로덕션에서 &quot;클래스를 찾을 수 없음&quot;문제가 발생할 수 있습니다. 주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c896278653b2ec22017fcc9989b8305dc926b070" translate="yes" xml:space="preserve">
          <source>This option requires APCu which may or may not be available to you. It also uses APCu memory for autoloading purposes, but it is safe to use and can not result in classes not being found like the authoritative class map optimization above.</source>
          <target state="translated">이 옵션에는 APCu가 필요하거나 사용하지 못할 수 있습니다. 또한 자동로드 목적으로 APCu 메모리를 사용하지만 사용하기에 안전하며 위의 권위있는 클래스 맵 최적화처럼 클래스를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fcc902e7540613e7a05c59350b3dd4782ee5ea1b" translate="yes" xml:space="preserve">
          <source>This option requires APCu which may or may not be available to you. It also uses APCu memory for autoloading purposes, but it is safe to use and cannot result in classes not being found like the authoritative class map optimization above.</source>
          <target state="translated">이 옵션을 사용하려면 APCu가 필요합니다. 또한 자동 로딩 목적으로 APCu 메모리를 사용하지만 사용하는 것이 안전하며 위의 권위있는 클래스 맵 최적화처럼 클래스를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="105fd86ca53ea796ed779102d789881e6fc7d061" translate="yes" xml:space="preserve">
          <source>This option says that if something is not found in the classmap, then it does not exist and the autoloader should not attempt to look on the filesystem according to PSR-4 rules.</source>
          <target state="translated">이 옵션은 클래스 맵에서 무언가가 발견되지 않으면 존재하지 않으며 오토로더가 PSR-4 규칙에 따라 파일 시스템을 조사하지 않아야한다고 말합니다.</target>
        </trans-unit>
        <trans-unit id="9d9a006fd0e828f9277a3a9e2168c6051f1ecae3" translate="yes" xml:space="preserve">
          <source>This section allows to define autoload rules for development purposes.</source>
          <target state="translated">이 섹션에서는 개발 목적으로 자동로드 규칙을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b239168a737045663c7caab49cfb1f6a48ba8c" translate="yes" xml:space="preserve">
          <source>This will basically teach composer how to authenticate automatically when reading packages from the provided composer repository.</source>
          <target state="translated">기본적으로 컴포저에게 제공된 컴포저 저장소에서 패키지를 읽을 때 자동으로 인증하는 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="03859845a00b9fec6aa87bac6a7c9309919a1c6b" translate="yes" xml:space="preserve">
          <source>This will make sure that no package requiring more than PHP 7.0.3 can be installed regardless of the actual PHP version you run locally. However it also means the dependencies are not checked correctly anymore, if you run PHP 5.6 it will install fine as it assumes 7.0.3, but then it will fail at runtime.</source>
          <target state="translated">이렇게하면 로컬에서 실행하는 실제 PHP 버전에 관계없이 PHP 7.0.3 이상이 필요한 패키지를 설치할 수 없습니다. 그러나 그것은 또한 종속성이 더 이상 올바르게 확인되지 않았 음을 의미합니다. PHP 5.6을 실행하면 7.0.3을 가정하여 정상적으로 설치되지만 런타임에 실패합니다.</target>
        </trans-unit>
        <trans-unit id="661392f81c79772cf9069aeb59d15b210c670b8e" translate="yes" xml:space="preserve">
          <source>This will resolve all dependencies of the project and write the exact versions into &lt;code&gt;composer.lock&lt;/code&gt;.</source>
          <target state="translated">이것은 프로젝트의 모든 의존성을 해결하고 &lt;code&gt;composer.lock&lt;/code&gt; 에 정확한 버전을 씁니다. .</target>
        </trans-unit>
        <trans-unit id="49c6fd3fb47ed5347be46209583f87cf01301576" translate="yes" xml:space="preserve">
          <source>This will return true if e.g. vendor/package is installed in a version matching &lt;code&gt;2.0.*&lt;/code&gt;, but also if the given package name is replaced or provided by some other package.</source>
          <target state="translated">예를 들어 공급 업체 / 패키지가 &lt;code&gt;2.0.*&lt;/code&gt; 과 일치하는 버전에 설치되어 있으면 true를 반환 하지만 지정된 패키지 이름이 다른 패키지로 대체되거나 제공되는 경우에도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="4e16df583a018d5f60aa740b6c7475dc1f4d7826" translate="yes" xml:space="preserve">
          <source>Those files contain lists of package names and hashes to verify the file integrity, for example:</source>
          <target state="translated">이러한 파일에는 파일 무결성을 확인하기위한 패키지 이름 및 해시 목록이 포함됩니다 (예 :</target>
        </trans-unit>
        <trans-unit id="ef545162be7790e8234882c5061b6a8f200dfcae" translate="yes" xml:space="preserve">
          <source>Tilde Version Range (&lt;code&gt;~&lt;/code&gt;)</source>
          <target state="translated">물결표 버전 범위 ( &lt;code&gt;~&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="081acf594e378c11c0e7eceb764c79548653b953" translate="yes" xml:space="preserve">
          <source>Tilde Version Range (~)</source>
          <target state="translated">틸드 버전 범위 (~)</target>
        </trans-unit>
        <trans-unit id="2616f608eef9ed1435bd0bf1c1dde0888dfeb753" translate="yes" xml:space="preserve">
          <source>To allow various stabilities without enforcing them at the constraint level however, you may use &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;stability-flags&lt;/a&gt; like &lt;code&gt;@&amp;lt;stability&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;@dev&lt;/code&gt;) to let composer know that a given package can be installed in a different stability than your default minimum-stability setting. All available stability flags are listed on the minimum-stability section of the &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;schema page&lt;/a&gt;.</source>
          <target state="translated">그러나 제약 수준에서 다양한 안정성을 적용하지 않고 허용하려면 &lt;code&gt;@&amp;lt;stability&amp;gt;&lt;/code&gt; (예 : &lt;code&gt;@dev&lt;/code&gt; ) 와 같은 &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;안정성 플래그를&lt;/a&gt; 사용 하여 지정된 패키지를 기본 최소 안정성과 다른 안정성으로 설치할 수 있음을 작곡가에게 알릴 수 있습니다 환경. 사용 가능한 모든 안정성 플래그는 시스템의 최소 안정성 섹션에 나열되어 있습니다&lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt; 스키마 페이지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc4e340e8e897ffba64e969236f36901e2211df7" translate="yes" xml:space="preserve">
          <source>To avoid an unexpected white page of death with some obscure PHP extension warning in production, you can run &lt;code&gt;composer check-platform-reqs&lt;/code&gt; as part of your deployment/build and if that returns a non-0 code you should abort.</source>
          <target state="translated">프로덕션에서 모호한 PHP 확장 경고와 함께 예기치 않은 화이트 페이지가 발생하지 않도록하려면 배포 / 빌드의 일부로 &lt;code&gt;composer check-platform-reqs&lt;/code&gt; 를 실행할 수 있으며 0이 아닌 코드를 반환하면 중단해야합니다.</target>
        </trans-unit>
        <trans-unit id="ab434362114d376359858c140ab5becd1aae2e0b" translate="yes" xml:space="preserve">
          <source>To call Composer commands, you can use &lt;code&gt;@composer&lt;/code&gt; which will automatically resolve to whatever composer.phar is currently being used:</source>
          <target state="translated">Composer 명령을 호출하려면 &lt;code&gt;@composer&lt;/code&gt; 를 현재 사용중인 composer.phar로 자동 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="dadeaa2cc5f073ac28a58ee0b6a999c692e32749" translate="yes" xml:space="preserve">
          <source>To create a new access token, head to your &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;token settings section on Github&lt;/a&gt; and &lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;generate a new token&lt;/a&gt;. For public repositories when rate limited, the &lt;code&gt;public_repo&lt;/code&gt; scope is required, for private repositories the &lt;code&gt;repo:status&lt;/code&gt; scope is needed. Read more about it &lt;a href=&quot;https://github.com/blog/1509-personal-api-tokens&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">당신에 대한 새로운 토큰 액세스, 머리 만들려면 &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Github에서의 토큰 설정 섹션을&lt;/a&gt; 하고 &lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;새로운 토큰을 생성&lt;/a&gt; . 속도가 제한된 공용 저장소의 경우 &lt;code&gt;public_repo&lt;/code&gt; 범위가 필요하고 개인 저장소의 경우 &lt;code&gt;repo:status&lt;/code&gt; 범위가 필요합니다. &lt;a href=&quot;https://github.com/blog/1509-personal-api-tokens&quot;&gt;여기에서&lt;/a&gt; 자세한 내용을 읽어보십시오 .</target>
        </trans-unit>
        <trans-unit id="703e69f23ffe2de3ee7ebc2d2e394653a8900a0b" translate="yes" xml:space="preserve">
          <source>To create a new project using Composer you can use the &lt;code&gt;create-project&lt;/code&gt; command. Pass it a package name, and the directory to create the project in. You can also provide a version as third argument, otherwise the latest version is used.</source>
          <target state="translated">Composer를 사용하여 새 프로젝트를 &lt;code&gt;create-project&lt;/code&gt; 사용할 수 있습니다 명령을 . 패키지 이름과 프로젝트를 생성 할 디렉토리를 전달하십시오. 버전을 세 번째 인수로 제공 할 수도 있습니다. 그렇지 않으면 최신 버전이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7259c7a6c7580039c811b3eb296df8c91fc1bacd" translate="yes" xml:space="preserve">
          <source>To disable the process timeout on a custom command under &lt;code&gt;scripts&lt;/code&gt;, a static helper is available:</source>
          <target state="translated">&lt;code&gt;scripts&lt;/code&gt; 에서 사용자 정의 명령에 대한 프로세스 시간 초과를 비활성화하려면 정적 도우미를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9445e3cb238e1a5215a782ee285f0e66cf327e3a" translate="yes" xml:space="preserve">
          <source>To disable the timeout for every script on a given project, you can use the composer.json configuration:</source>
          <target state="translated">주어진 프로젝트에서 모든 스크립트에 대해 시간 초과를 비활성화하려면 composer.json 구성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec2fc64193fca38f47ec7090f16f7a70b5618ba2" translate="yes" xml:space="preserve">
          <source>To disable the timeout for specific scripts with the static helper directly in composer.json:</source>
          <target state="translated">composer.json에서 직접 정적 헬퍼를 사용하여 특정 스크립트에 대한 시간 종료를 사용하지 않으려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="027be376e282e62845bebf47469f4f5d8bce3357" translate="yes" xml:space="preserve">
          <source>To disable the timeout of a single script call, you must use the &lt;code&gt;run-script&lt;/code&gt; composer command and specify the &lt;code&gt;--timeout&lt;/code&gt; parameter:</source>
          <target state="translated">단일 스크립트 호출의 시간 초과를 비활성화하려면 &lt;code&gt;run-script&lt;/code&gt; composer 명령을 사용하고 &lt;code&gt;--timeout&lt;/code&gt; 을 지정해야합니다 매개 변수를 .</target>
        </trans-unit>
        <trans-unit id="1968a3e1738c7fb42672587a3f09b6ee4e9de8b5" translate="yes" xml:space="preserve">
          <source>To do that, &lt;code&gt;autoload&lt;/code&gt; and &lt;code&gt;target-dir&lt;/code&gt; are defined as follows:</source>
          <target state="translated">이를 위해 &lt;code&gt;autoload&lt;/code&gt; 와 &lt;code&gt;target-dir&lt;/code&gt; 은 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="6172adec85941ab6181131f95d95a5ae796a8316" translate="yes" xml:space="preserve">
          <source>To enable script re-use and avoid duplicates, you can call a script from another one by prefixing the command name with &lt;code&gt;@&lt;/code&gt;:</source>
          <target state="translated">스크립트 재사용을 가능하게하고 중복을 피하기 위해 명령 이름 앞에 &lt;code&gt;@&lt;/code&gt; 를 붙여서 다른 스크립트에서 스크립트를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d772478e704a8fdc52f49fe648c3f5e2359e4964" translate="yes" xml:space="preserve">
          <source>To enable the swap you can use for example:</source>
          <target state="translated">스왑을 활성화하려면 예를 들어 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afe52e2b0307bc5e407fddc61ac8bcb755aac9b9" translate="yes" xml:space="preserve">
          <source>To enable your satis installation to create downloads for all (Git, Mercurial and Subversion) your packages, add the following to your &lt;code&gt;satis.json&lt;/code&gt;:</source>
          <target state="translated">satis 설치가 모든 패키지 (Git, Mercurial 및 Subversion)에 대한 다운로드를 작성하도록하려면 &lt;code&gt;satis.json&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="13f50946093bfe2d26454652e498f3d41b861d54" translate="yes" xml:space="preserve">
          <source>To enable your satis installation to indicate that some packages are abandoned, add the following to your &lt;code&gt;satis.json&lt;/code&gt;:</source>
          <target state="translated">satis 설치가 일부 패키지가 취소되었음을 표시하도록하려면 &lt;code&gt;satis.json&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="242b5ec99dbb948aeb8dc9862d907d518e32c63e" translate="yes" xml:space="preserve">
          <source>To ensure a consistent code base, you should make sure the code follows the &lt;a href=&quot;http://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2 Coding Standards&lt;/a&gt;.</source>
          <target state="translated">일관된 코드 기반을 보장하려면 코드가 &lt;a href=&quot;http://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2 코딩 표준을&lt;/a&gt; 준수해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b6255853eb6a889d49bd7379502052a2bb60347b" translate="yes" xml:space="preserve">
          <source>To ensure a consistent code base, you should make sure the code follows the &lt;a href=&quot;https://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2 Coding Standards&lt;/a&gt;.</source>
          <target state="translated">일관된 코드 기반을 보장하려면 코드가 &lt;a href=&quot;https://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2 코딩 표준을&lt;/a&gt; 따르는 지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2a835774cb3367a5c004dcde88461319572e8cbf" translate="yes" xml:space="preserve">
          <source>To execute PHP scripts, you can use &lt;code&gt;@php&lt;/code&gt; which will automatically resolve to whatever php process is currently being used:</source>
          <target state="translated">PHP 스크립트를 실행하려면 &lt;code&gt;@php&lt;/code&gt; 를 사용하면 현재 사용중인 PHP 프로세스로 자동 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="7f85737ea1928d2da931ccff015054c997fdaac4" translate="yes" xml:space="preserve">
          <source>To filter the list you can pass a package mask using wildcards.</source>
          <target state="translated">목록을 필터링하기 위해 와일드 카드를 사용하여 패키지 마스크를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5fad04a5ecd6fa587ffb78a9568fb8e76ae7c02" translate="yes" xml:space="preserve">
          <source>To get help from the command-line, call &lt;code&gt;composer&lt;/code&gt; or &lt;code&gt;composer list&lt;/code&gt; to see the complete list of commands, then &lt;code&gt;--help&lt;/code&gt; combined with any of those can give you more information.</source>
          <target state="translated">명령 줄에서 도움을 받으려면 &lt;code&gt;composer&lt;/code&gt; 또는 &lt;code&gt;composer list&lt;/code&gt; 를 호출 하여 전체 명령 목록 을 확인한 다음 &lt;code&gt;--help&lt;/code&gt; 와 함께 추가 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="572bb6f1e6b1166836f8fdbafac80ba19d63ad72" translate="yes" xml:space="preserve">
          <source>To get help from the command-line, simply call &lt;code&gt;composer&lt;/code&gt; or &lt;code&gt;composer list&lt;/code&gt; to see the complete list of commands, then &lt;code&gt;--help&lt;/code&gt; combined with any of those can give you more information.</source>
          <target state="translated">명령 줄에서 도움을 받으려면 &lt;code&gt;composer&lt;/code&gt; 또는 &lt;code&gt;composer list&lt;/code&gt; 를 호출 하여 전체 명령 목록 을 확인한 다음 &lt;code&gt;--help&lt;/code&gt; 와 함께 자세한 정보를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d454fbe7e425d3c1bd529a3e4dd18bddb25ced4" translate="yes" xml:space="preserve">
          <source>To get more information about a certain command, you can use &lt;code&gt;help&lt;/code&gt;.</source>
          <target state="translated">특정 명령에 대한 자세한 정보를 얻으려면 &lt;code&gt;help&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3ecff80894b40107e2c7b00bf96802c2e5e285e" translate="yes" xml:space="preserve">
          <source>To get packages from these systems you need to have their respective clients installed. That can be inconvenient. And for this reason there is special support for GitHub and BitBucket that use the APIs provided by these sites, to fetch the packages without having to install the version control system. The VCS repository provides &lt;code&gt;dist&lt;/code&gt;s for them that fetch the packages as zips.</source>
          <target state="translated">이러한 시스템에서 패키지를 가져 오려면 해당 클라이언트가 설치되어 있어야합니다. 불편할 수 있습니다. 이러한 이유로 버전 제어 시스템을 설치하지 않고도 패키지를 가져 오기 위해 이러한 사이트에서 제공하는 API를 사용하는 GitHub 및 BitBucket에 대한 특별한 지원이 있습니다. VCS 저장소는 패키지를 zip으로 가져 오는 &lt;code&gt;dist&lt;/code&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f6efa85ae7f550704cefdf0149a36e94c4f7bd21" translate="yes" xml:space="preserve">
          <source>To get the current &lt;code&gt;memory_limit&lt;/code&gt; value, run:</source>
          <target state="translated">현재 &lt;code&gt;memory_limit&lt;/code&gt; 값 을 얻으려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7cb4d25337915f2702feb6e9fd3ef11bbade7950" translate="yes" xml:space="preserve">
          <source>To handle non-numeric named branches as versions instead of searching for a parent branch with a valid version or special branch name like master, you can set patterns for branch names, that should be handled as dev version branches.</source>
          <target state="translated">마스터와 같은 유효한 버전 또는 특수 분기 이름을 가진 상위 분기를 검색하는 대신 숫자가 아닌 이름이 지정된 분기를 버전으로 처리하려면 분기 버전의 패턴을 설정하여 dev 버전 분기로 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="22f6627e0806084d95804590ef2cc1e0fa895237" translate="yes" xml:space="preserve">
          <source>To illustrate, the following example would get the &lt;code&gt;BasePackage&lt;/code&gt;, &lt;code&gt;TopLevelPackage1&lt;/code&gt;, and &lt;code&gt;TopLevelPackage2&lt;/code&gt; packages from your PEAR repository and &lt;code&gt;IntermediatePackage&lt;/code&gt; from a Github repository:</source>
          <target state="translated">설명을 위해 다음 예제는 PEAR 저장소에서 &lt;code&gt;BasePackage&lt;/code&gt; , &lt;code&gt;TopLevelPackage1&lt;/code&gt; 및 &lt;code&gt;TopLevelPackage2&lt;/code&gt; 패키지를 가져오고 Github 저장소에서 &lt;code&gt;IntermediatePackage&lt;/code&gt; 를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="59b049d7d7ef7ad4cd79dd63021b56fc4d014499" translate="yes" xml:space="preserve">
          <source>To improve performance when the Xdebug extension is enabled, Composer automatically restarts PHP without it. You can override this behavior by using an environment variable: &lt;code&gt;COMPOSER_ALLOW_XDEBUG=1&lt;/code&gt;.</source>
          <target state="translated">Xdebug 확장이 활성화 된 경우 성능을 향상시키기 위해 Composer는 자동으로 PHP를 다시 시작합니다. 환경 변수 &lt;code&gt;COMPOSER_ALLOW_XDEBUG=1&lt;/code&gt; 을 사용하여이 동작을 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db3fd7e71e49f48ddd62bece648f84f9d6a8659e" translate="yes" xml:space="preserve">
          <source>To improve performance when the xdebug extension is enabled, Composer automatically restarts PHP without it. You can override this behavior by using an environment variable: &lt;code&gt;COMPOSER_ALLOW_XDEBUG=1&lt;/code&gt;.</source>
          <target state="translated">xdebug 확장 기능이 활성화되어있을 때 성능을 향상시키기 위해 Composer는 자동으로 PHP를 다시 시작하지 않습니다. 환경 변수 &lt;code&gt;COMPOSER_ALLOW_XDEBUG=1&lt;/code&gt; 을 사용하여이 동작을 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="48b37746979d056aed7cdedde3fd6b05a3ccdd2c" translate="yes" xml:space="preserve">
          <source>To install Composer locally, run the installer in your project directory. See &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page&lt;/a&gt; for instructions.</source>
          <target state="translated">Composer를 로컬로 설치하려면 프로젝트 디렉토리에서 설치 프로그램을 실행하십시오. 지침 &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;은 다운로드 페이지&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a54c98dfdaede44af7b32ebe9d6d8968b67868a" translate="yes" xml:space="preserve">
          <source>To install packages from sources instead of plain zip archives, you will need git, svn, fossil or hg depending on how the package is version-controlled.</source>
          <target state="translated">일반 zip 아카이브 대신 소스에서 패키지를 설치하려면 패키지 버전 제어 방식에 따라 git, svn, fossil 또는 hg가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="6ba19c9fd60860b950815749c1573d6324e91d3b" translate="yes" xml:space="preserve">
          <source>To install packages from sources instead of simple zip archives, you will need git, svn, fossil or hg depending on how the package is version-controlled.</source>
          <target state="translated">간단한 zip 아카이브 대신 소스에서 패키지를 설치하려면 패키지가 버전 제어 방식에 따라 git, svn, fossil 또는 hg가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="88cc2d8ff198639815c94744e3b4bd84d8a915d5" translate="yes" xml:space="preserve">
          <source>To install the defined dependencies for your project, run the &lt;a href=&quot;03-cli.md#install&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">프로젝트에 정의 된 종속성을 &lt;a href=&quot;03-cli.md#install&quot;&gt; &lt;code&gt;install&lt;/code&gt; &lt;/a&gt; 명령을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="776a5dcec518c6d60a09d59020fe1b90643b77d6" translate="yes" xml:space="preserve">
          <source>To install the defined dependencies for your project, run the &lt;a href=&quot;03-cli.md#install-i&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">프로젝트에 정의 된 종속성을 &lt;a href=&quot;03-cli.md#install-i&quot;&gt; &lt;code&gt;install&lt;/code&gt; &lt;/a&gt; 명령어를 실행하세요 .</target>
        </trans-unit>
        <trans-unit id="3c0e4e6a7a0837b92f78ef009160482f432dba37" translate="yes" xml:space="preserve">
          <source>To list all of the available packages, you can use the &lt;code&gt;show&lt;/code&gt; command.</source>
          <target state="translated">사용 가능한 모든 패키지를 나열하려면 &lt;code&gt;show&lt;/code&gt; 명령을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5cdf98e6c3ebe238b756d522682f684043180ce4" translate="yes" xml:space="preserve">
          <source>To manually edit it, run:</source>
          <target state="translated">수동으로 편집하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="75f0a749b7c38173bf2107914ae468f71f17a6a5" translate="yes" xml:space="preserve">
          <source>To rebuild only particular packages, pass the package names on the command line like so:</source>
          <target state="translated">특정 패키지 만 다시 빌드하려면 다음과 같이 명령 행에서 패키지 이름을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="ff8c5f4a65cb057060e847b0f1f1d10793a19b9b" translate="yes" xml:space="preserve">
          <source>To register a method to an event, implement the method &lt;code&gt;getSubscribedEvents()&lt;/code&gt; and have it return an array. The array key must be the &lt;a href=&quot;scripts.md#event-names&quot;&gt;event name&lt;/a&gt; and the value is the name of the method in this class to be called.</source>
          <target state="translated">메소드를 이벤트에 등록하려면 &lt;code&gt;getSubscribedEvents()&lt;/code&gt; 메소드를 구현하고 배열을 리턴하십시오. 배열 키는 &lt;a href=&quot;scripts.md#event-names&quot;&gt;이벤트 이름&lt;/a&gt; 이어야하며 값은 호출 할이 클래스의 메소드 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f370353bd67d9979bea5ced6067f29d3809438bc" translate="yes" xml:space="preserve">
          <source>To resolve the conflict when we merge these two branches:</source>
          <target state="translated">이 두 가지를 병합 할 때 충돌을 해결하려면 :</target>
        </trans-unit>
        <trans-unit id="ce69b1a3c4007338262c2e5b1c97ce90dd3e2c93" translate="yes" xml:space="preserve">
          <source>To run &lt;a href=&quot;articles/scripts.md&quot;&gt;scripts&lt;/a&gt; manually you can use this command, give it the script name and optionally any required arguments.</source>
          <target state="translated">&lt;a href=&quot;articles/scripts.md&quot;&gt;스크립트를&lt;/a&gt; 수동으로 실행하려면 이 명령을 사용하여 스크립트 이름과 선택적으로 필요한 인수를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="3cd887e1fca448a5b99bd88daa6739ff5c6f7dc8" translate="yes" xml:space="preserve">
          <source>To secure your private repository you can host it over SSH or SSL using a client certificate. In your project you can use the &lt;code&gt;options&lt;/code&gt; parameter to specify the connection options for the server.</source>
          <target state="translated">개인 저장소를 보호하기 위해 클라이언트 인증서를 사용하여 SSH 또는 SSL을 통해 개인 저장소를 호스트 할 수 있습니다. 프로젝트에서 &lt;code&gt;options&lt;/code&gt; 매개 변수를 사용하여 서버의 연결 옵션을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="93203b50fcdb2f4a3279132d8d82f5368d3f9b2d" translate="yes" xml:space="preserve">
          <source>To set an environment variable in a cross-platform way, you can use &lt;code&gt;@putenv&lt;/code&gt;:</source>
          <target state="translated">크로스 플랫폼 방식으로 환경 변수를 설정하려면 &lt;code&gt;@putenv&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="84925e5c892f336c6988e794c40ec38b3f76ce1e" translate="yes" xml:space="preserve">
          <source>To start using Composer in your project, all you need is a &lt;code&gt;composer.json&lt;/code&gt; file. This file describes the dependencies of your project and may contain other metadata as well.</source>
          <target state="translated">프로젝트에서 Composer를 사용하려면 &lt;code&gt;composer.json&lt;/code&gt; 파일 만 있으면됩니다. 이 파일은 프로젝트의 종속성을 설명하며 다른 메타 데이터도 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1840785e68f761452c068f77138754e6917d43a2" translate="yes" xml:space="preserve">
          <source>To start using Composer in your project, all you need is a &lt;code&gt;composer.json&lt;/code&gt; file. This file describes the dependencies of your project and may contain other metadata as well. It typically should go in the top-most directory of your project/VCS repository. You can technically run Composer anywhere but if you want to publish a package to Packagist.org, it will have to be able to find the file at the top of your VCS repository.</source>
          <target state="translated">프로젝트에서 Composer 사용을 시작하려면 &lt;code&gt;composer.json&lt;/code&gt; 파일 만 있으면됩니다. 이 파일은 프로젝트의 종속성을 설명하며 다른 메타 데이터도 포함 할 수 있습니다. 일반적으로 프로젝트 / VCS 저장소의 최상위 디렉토리에 있어야합니다. 기술적으로 어디에서나 Composer를 실행할 수 있지만 Packagist.org에 패키지를 게시하려면 VCS 저장소의 맨 위에서 파일을 찾을 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6f8af01e9cf6738c02770816401951f38749c00a" translate="yes" xml:space="preserve">
          <source>To update Composer itself to the latest version, run the &lt;code&gt;self-update&lt;/code&gt; command. It will replace your &lt;code&gt;composer.phar&lt;/code&gt; with the latest version.</source>
          <target state="translated">Composer 자체를 최신 버전 &lt;code&gt;self-update&lt;/code&gt; 하려면 자체 업데이트 명령을 실행하십시오 . 그것은 당신 대체 할 &lt;code&gt;composer.phar&lt;/code&gt; 최신 버전을.</target>
        </trans-unit>
        <trans-unit id="dad674e48704a92597b8a13244ba1d8ca29324b7" translate="yes" xml:space="preserve">
          <source>Trade-offs</source>
          <target state="translated">Trade-offs</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="ba5ba156188d6c38183b0692a13e4a2d239701ea" translate="yes" xml:space="preserve">
          <source>Try clearing Composer's cache by running &lt;code&gt;composer clear-cache&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer clear-cache&lt;/code&gt; 를 실행하여 Composer 캐시를 지우십시오 .</target>
        </trans-unit>
        <trans-unit id="bf1cb9b16df4bf6c782208142821b3ebf71380e4" translate="yes" xml:space="preserve">
          <source>Try increasing the limit in your &lt;code&gt;php.ini&lt;/code&gt; file (ex. &lt;code&gt;/etc/php5/cli/php.ini&lt;/code&gt; for Debian-like systems):</source>
          <target state="translated">&lt;code&gt;php.ini&lt;/code&gt; 파일 에서 제한을 늘리십시오 (예 : 데비안 계열 시스템의 경우 &lt;code&gt;/etc/php5/cli/php.ini&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="d27377b209ceac276e7ef413902a27885fa67df7" translate="yes" xml:space="preserve">
          <source>Typically you would leave the source part off, as you don't really need it.</source>
          <target state="translated">일반적으로 실제로는 필요하지 않으므로 소스 부분을 그대로 두십시오.</target>
        </trans-unit>
        <trans-unit id="f36cf49730e2505825e116240404875fb59137f8" translate="yes" xml:space="preserve">
          <source>Typically, you would leave the source part off, as you don't really need it.</source>
          <target state="translated">일반적으로 소스 부분은 실제로 필요하지 않으므로 그대로 둡니다.</target>
        </trans-unit>
        <trans-unit id="e15dcaab87611b00bfeba9321311d1a520f34547" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;psr-0&lt;/code&gt; key you define a mapping from namespaces to paths, relative to the package root. Note that this also supports the PEAR-style non-namespaced convention.</source>
          <target state="translated">&lt;code&gt;psr-0&lt;/code&gt; 키 아래에서 패키지 루트를 기준으로 네임 스페이스에서 경로로의 맵핑을 정의합니다. 이것은 PEAR 스타일의 네임 스페이스가없는 규칙도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8909af9ce39584fecffbeb518314286c798a6e15" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;psr-4&lt;/code&gt; key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like &lt;code&gt;Foo\\Bar\\Baz&lt;/code&gt; a namespace prefix &lt;code&gt;Foo\\&lt;/code&gt; pointing to a directory &lt;code&gt;src/&lt;/code&gt; means that the autoloader will look for a file named &lt;code&gt;src/Bar/Baz.php&lt;/code&gt; and include it if present. Note that as opposed to the older PSR-0 style, the prefix (&lt;code&gt;Foo\\&lt;/code&gt;) is &lt;strong&gt;not&lt;/strong&gt; present in the file path.</source>
          <target state="translated">&lt;code&gt;psr-4&lt;/code&gt; 키 아래에서 패키지 루트를 기준으로 네임 스페이스에서 경로로의 매핑을 정의합니다. &lt;code&gt;Foo\\Bar\\Baz&lt;/code&gt; 와 같은 클래스를 자동로드 할 때 &lt;code&gt;src/&lt;/code&gt; 디렉토리를 가리키는 네임 스페이스 접두사 &lt;code&gt;Foo\\&lt;/code&gt; 는 오토로더가 &lt;code&gt;src/Bar/Baz.php&lt;/code&gt; 라는 파일을 찾고 존재하는 경우 포함 함을 의미합니다. 이전 PSR-0 스타일에 반대 참고 접두사 (즉, &lt;code&gt;Foo\\&lt;/code&gt; )는 &lt;strong&gt;없는&lt;/strong&gt; 파일 경로에 존재.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a49cd16ceb09068a661dbff4f47031cfb5b4444c" translate="yes" xml:space="preserve">
          <source>Unlike update/install, this command will ignore config.platform settings and check the real platform packages so you can be certain you have the required platform dependencies.</source>
          <target state="translated">업데이트 / 설치와 달리이 명령은 config.platform 설정을 무시하고 실제 플랫폼 패키지를 확인하여 필요한 플랫폼 종속성이 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a92a62891885f2e53e9342c26a0ad4295974f08e" translate="yes" xml:space="preserve">
          <source>Updating dependencies to their latest versions</source>
          <target state="translated">최신 버전으로 종속성 업데이트</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="d3d63a9ce5df435e6ed69f7ca95593227c85bd46" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&quot;abandoned&quot;: true&lt;/code&gt; to indicates this package is abandoned. Use &lt;code&gt;&quot;abandoned&quot;: &quot;monolog/monolog&quot;&lt;/code&gt; to indicates this package is abandoned and the recommended alternative is &lt;code&gt;monolog/monolog&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;&quot;abandoned&quot;: true&lt;/code&gt; 으로이 패키지는 포기 나타냅니다. 사용 &lt;code&gt;&quot;abandoned&quot;: &quot;monolog/monolog&quot;&lt;/code&gt; 에이 패키지가 포기 나타내고 권장 대안입니다 &lt;code&gt;monolog/monolog&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b10d2842acd5c90a60e62695f6d7d8f851d15b43" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&quot;abandoned&quot;: true&lt;/code&gt; to indicates this package is abandoned. Use &lt;code&gt;&quot;abandoned&quot;: &quot;monolog/monolog&quot;&lt;/code&gt; to indicates this package is abandoned, and the recommended alternative is &lt;code&gt;monolog/monolog&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;abandoned&quot;: true&lt;/code&gt; 사용 : 이 패키지가 폐기되었음을 나타내려면 true 입니다. 사용 &lt;code&gt;&quot;abandoned&quot;: &quot;monolog/monolog&quot;&lt;/code&gt; 에이 패키지가 포기 표시하고 권장되는 대안은 &lt;code&gt;monolog/monolog&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ace2c6a7e71ffad9af2b3049089beab50a6493d0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&quot;prefer-stable&quot;: true&lt;/code&gt; to enable.</source>
          <target state="translated">사용은 &lt;code&gt;&quot;prefer-stable&quot;: true&lt;/code&gt; 가능합니다.</target>
        </trans-unit>
        <trans-unit id="8c368e21d469f0d796a68d9c72f06fdc8fa19259" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--by-package&lt;/code&gt; (default) or &lt;code&gt;--by-suggestion&lt;/code&gt; flags to group the output by the package offering the suggestions or the suggested packages respectively.</source>
          <target state="translated">사용 &lt;code&gt;--by-package&lt;/code&gt; (기본값) 또는 &lt;code&gt;--by-suggestion&lt;/code&gt; 그룹에 각각 제안이나 제안 된 패키지를 제공하는 패키지로 출력을 플래그.</target>
        </trans-unit>
        <trans-unit id="742280ffccec92fc7be6a1da7f6dc250e81a7875" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--by-package&lt;/code&gt; or &lt;code&gt;--by-suggestion&lt;/code&gt; flags to group the output by the package offering the suggestions or the suggested packages respectively.</source>
          <target state="translated">사용 &lt;code&gt;--by-package&lt;/code&gt; 또는 &lt;code&gt;--by-suggestion&lt;/code&gt; 그룹에 각각 제안이나 제안 된 패키지를 제공하는 패키지로 출력을 플래그.</target>
        </trans-unit>
        <trans-unit id="201f8b94074409dd470fdeabf3fb52a7ccd6e5d4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--verbose (-v)&lt;/code&gt; flag to display the suggesting package and the suggestion reason. This implies &lt;code&gt;--by-package --by-suggestion&lt;/code&gt;, showing both lists.</source>
          <target state="translated">사용 &lt;code&gt;--verbose (-v)&lt;/code&gt; 제안 패키지와 제안 이유를 표시하는 플래그. 이는 &lt;code&gt;--by-package --by-suggestion&lt;/code&gt; 의미하며 두 목록을 모두 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2ed3705749e76b61ad5cfd5837c9b4dde3c52e3d" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;same vendor and package name&lt;/strong&gt; throughout all branches and tags of your repository, especially when maintaining a third party fork and using &lt;code&gt;replace&lt;/code&gt;.</source>
          <target state="translated">특히 써드 파티 포크를 유지 보수하고 &lt;code&gt;replace&lt;/code&gt; 를 사용할 때 저장소의 모든 브랜치 및 태그 에서 &lt;strong&gt;동일한 공급 업체 및 패키지 이름&lt;/strong&gt; 을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c43fec7130c3143dd208e30d026774272f70f676" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;http_proxy&lt;/code&gt; (lowercased) or even defining both might be preferable since some tools like git or curl will only use the lower-cased &lt;code&gt;http_proxy&lt;/code&gt; version. Alternatively you can also define the git proxy using &lt;code&gt;git config --global http.proxy &amp;lt;proxy url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;http_proxy&lt;/code&gt; (소문자) 또는 자식 또는 컬과 같은 몇 가지 도구 만 소문자로 사용하기 때문에 모두 바람직 수 있습니다 정의 &lt;code&gt;http_proxy&lt;/code&gt; 버전. 또는 &lt;code&gt;git config --global http.proxy &amp;lt;proxy url&amp;gt;&lt;/code&gt; 을 사용하여 git 프록시를 정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1e44c841547d59ef967c3267efa7b6061ba2ae39" translate="yes" xml:space="preserve">
          <source>Using Composer</source>
          <target state="translated">작곡가 사용하기</target>
        </trans-unit>
        <trans-unit id="9a02321539883e8133bd4d02625c38e89a365166" translate="yes" xml:space="preserve">
          <source>Using JSON object notation is also possible. However, JSON key/value pairs are to be considered unordered so consistent behaviour cannot be guaranteed.</source>
          <target state="translated">JSON 객체 표기법을 사용할 수도 있습니다. 그러나 JSON 키 / 값 쌍은 정렬되지 않은 것으로 간주되므로 일관된 동작을 보장 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="254550be6f0ce4335476259029c3eaa67808f04e" translate="yes" xml:space="preserve">
          <source>Using Plugins</source>
          <target state="translated">플러그인 사용</target>
        </trans-unit>
        <trans-unit id="d97204a9d9cf393b7eb9e6978bbc7d21c2bf5baa" translate="yes" xml:space="preserve">
          <source>Using PowerShell:</source>
          <target state="translated">PowerShell 사용 :</target>
        </trans-unit>
        <trans-unit id="ab6c0153aad94e280c7870ce5a5f682a489b307d" translate="yes" xml:space="preserve">
          <source>Using cmd.exe:</source>
          <target state="translated">cmd.exe 사용 :</target>
        </trans-unit>
        <trans-unit id="c8d87edb6c4ab530842c0ac12e169c901f657db7" translate="yes" xml:space="preserve">
          <source>Using private repositories</source>
          <target state="translated">개인 리포지토리 사용</target>
        </trans-unit>
        <trans-unit id="d2888aa3efb27aa4ff140c167ba1b7f70c498ced" translate="yes" xml:space="preserve">
          <source>Using the Installer</source>
          <target state="translated">설치 프로그램 사용</target>
        </trans-unit>
        <trans-unit id="58c5b050bab6a27cb80ed905445111f04c12465a" translate="yes" xml:space="preserve">
          <source>Using the previous definition example, here's the class &lt;code&gt;MyVendor\MyClass&lt;/code&gt; that might be used to execute the PHP callbacks:</source>
          <target state="translated">이전 정의 예제를 사용하여 PHP 콜백을 실행하는 데 사용할 수있는 &lt;code&gt;MyVendor\MyClass&lt;/code&gt; 클래스 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bcaf120949d1fdb5ff769615a5288ac9d7a6a755" translate="yes" xml:space="preserve">
          <source>VCS</source>
          <target state="translated">VCS</target>
        </trans-unit>
        <trans-unit id="4f0ac327d3aa6ce560f7c557e414bcebb84c4680" translate="yes" xml:space="preserve">
          <source>VCS Tags and Branches</source>
          <target state="translated">VCS 태그 및 브랜치</target>
        </trans-unit>
        <trans-unit id="4089e660c6fc2348e7aa62c7a7a4105550bf2bba" translate="yes" xml:space="preserve">
          <source>VCS Versioning</source>
          <target state="translated">VCS 버전 관리</target>
        </trans-unit>
        <trans-unit id="61ff0a3493213ff858da0bb2394d27cf346235e5" translate="yes" xml:space="preserve">
          <source>VCS stands for version control system. This includes versioning systems like git, svn, fossil or hg. Composer has a repository type for installing packages from these systems.</source>
          <target state="translated">VCS는 버전 제어 시스템을 나타냅니다. 여기에는 git, svn, fossil 또는 hg와 같은 버전 관리 시스템이 포함됩니다. Composer에는 이러한 시스템에서 패키지를 설치하기위한 저장소 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="01bd908eb27ffe104c5dc3ce74f6e9e2a3ecb35e" translate="yes" xml:space="preserve">
          <source>Various information to get support about the project.</source>
          <target state="translated">프로젝트에 대한 지원을 얻기위한 다양한 정보.</target>
        </trans-unit>
        <trans-unit id="079d2e77a839383b4c96080d870ab40f2a837923" translate="yes" xml:space="preserve">
          <source>Vendor binaries and the &lt;code&gt;vendor/bin&lt;/code&gt; directory</source>
          <target state="translated">공급 업체 바이너리 및 &lt;code&gt;vendor/bin&lt;/code&gt; 디렉토리</target>
        </trans-unit>
        <trans-unit id="176e77a5f55141683d98b2f3f28c4391a7352568" translate="yes" xml:space="preserve">
          <source>Vendor binaries and the vendor/bin directory</source>
          <target state="translated">공급 업체 바이너리 및 공급 업체 / bin 디렉토리</target>
        </trans-unit>
        <trans-unit id="612fee8b1bdb5ec96c3b958d20d963af408a8ba2" translate="yes" xml:space="preserve">
          <source>Version Range</source>
          <target state="translated">버전 범위</target>
        </trans-unit>
        <trans-unit id="506d7fa870c9e78d43affa11414f7f529217b768" translate="yes" xml:space="preserve">
          <source>Versions and constraints</source>
          <target state="translated">버전 및 제약</target>
        </trans-unit>
        <trans-unit id="3138c9f0d0acd95934c04d927ee6cae16fd9e821" translate="yes" xml:space="preserve">
          <source>We choose the branch that has the most changes, and accept the &lt;code&gt;composer.json&lt;/code&gt; and &lt;code&gt;composer.lock&lt;/code&gt; files from that branch. In this case, we choose the composer files from branch 2.</source>
          <target state="translated">가장 많이 변경된 분기를 선택하고 해당 분기에서 &lt;code&gt;composer.json&lt;/code&gt; 및 &lt;code&gt;composer.lock&lt;/code&gt; 파일을 수락합니다 . 이 경우 분기 2에서 작곡가 파일을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="1b9a07554388dd719a1d3c4bf2ac74092ca6a0a8" translate="yes" xml:space="preserve">
          <source>We have a &lt;a href=&quot;http://json-schema.org&quot;&gt;JSON schema&lt;/a&gt; that documents the format and can also be used to validate your &lt;code&gt;composer.json&lt;/code&gt;. In fact, it is used by the &lt;code&gt;validate&lt;/code&gt; command. You can find it at: &lt;a href=&quot;https://getcomposer.org/schema.json&quot;&gt;https://getcomposer.org/schema.json&lt;/a&gt;</source>
          <target state="translated">형식을 문서화하고 &lt;code&gt;composer.json&lt;/code&gt; 의 유효성을 검사하는 데 사용할 수 있는 &lt;a href=&quot;http://json-schema.org&quot;&gt;JSON 스키마&lt;/a&gt; 가 있습니다 . 실제로 &lt;code&gt;validate&lt;/code&gt; 명령에서 사용됩니다 . &lt;a href=&quot;https://getcomposer.org/schema.json&quot;&gt;https://getcomposer.org/schema.json&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5216f4ca9c72967379d58576636ee995c5dcc01" translate="yes" xml:space="preserve">
          <source>We have a &lt;a href=&quot;https://json-schema.org&quot;&gt;JSON schema&lt;/a&gt; that documents the format and can also be used to validate your &lt;code&gt;composer.json&lt;/code&gt;. In fact, it is used by the &lt;code&gt;validate&lt;/code&gt; command. You can find it at: &lt;a href=&quot;https://getcomposer.org/schema.json&quot;&gt;https://getcomposer.org/schema.json&lt;/a&gt;</source>
          <target state="translated">형식을 문서화 하는 &lt;a href=&quot;https://json-schema.org&quot;&gt;JSON 스키마&lt;/a&gt; 가 있으며 &lt;code&gt;composer.json&lt;/code&gt; 유효성을 검사하는 데 사용할 수도 있습니다 . 실제로 &lt;code&gt;validate&lt;/code&gt; 명령에서 사용됩니다 . &lt;a href=&quot;https://getcomposer.org/schema.json&quot;&gt;https://getcomposer.org/schema.json&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ac66df4fc010c1faaee8853a197295c7c17ef56" translate="yes" xml:space="preserve">
          <source>We reapply the changes from the other branch (branch 1). In this case we have to run &lt;code&gt;composer require package/A&lt;/code&gt; again.</source>
          <target state="translated">다른 분기 (분기 1)의 변경 사항을 다시 적용합니다. 이 경우 &lt;code&gt;composer require package/A&lt;/code&gt; 를 다시 실행 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0545cefb40375beb29cfce05880f2f5aa0c2ef09" translate="yes" xml:space="preserve">
          <source>We recommend you fix your IPv6 setup. If that is not possible, you can try the following workarounds:</source>
          <target state="translated">IPv6 설정을 수정하는 것이 좋습니다. 이것이 가능하지 않으면 다음 해결 방법을 시도 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ef44ed371e33c12478458267908e189b6452a18" translate="yes" xml:space="preserve">
          <source>Web outputs</source>
          <target state="translated">웹 출력</target>
        </trans-unit>
        <trans-unit id="695afd6c8786bf69afa75f24a2d07f7d0043fa14" translate="yes" xml:space="preserve">
          <source>What about Windows and .bat files?</source>
          <target state="translated">Windows 및 .bat 파일은 어떻습니까?</target>
        </trans-unit>
        <trans-unit id="30081f64586833b513d3f4b22f9ef791d92a10e2" translate="yes" xml:space="preserve">
          <source>What does defining a vendor binary in composer.json do?</source>
          <target state="translated">composer.json에서 공급 업체 바이너리를 정의하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="06b2c135c0cd5ad382fc2e7bf514ca2bf8828d46" translate="yes" xml:space="preserve">
          <source>What does it do?</source>
          <target state="translated">무엇을합니까?</target>
        </trans-unit>
        <trans-unit id="adc638faaaf87be7bc4cc0454f0eb509965039b9" translate="yes" xml:space="preserve">
          <source>What happens when Composer is run on a composer.json that defines vendor binaries?</source>
          <target state="translated">공급 업체 바이너리를 정의하는 composer.json에서 Composer를 실행하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="5184026197d912a695c49849fc6287f8e51aa72a" translate="yes" xml:space="preserve">
          <source>What happens when Composer is run on a composer.json that has dependencies with vendor binaries listed?</source>
          <target state="translated">공급 업체 바이너리와의 종속성이있는 composer.json에서 Composer를 실행하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="c1d17aa62a9f54da812f8ab902182f685fee5e31" translate="yes" xml:space="preserve">
          <source>What is a script?</source>
          <target state="translated">스크립트 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="54f357b9d455ab56fa552807330bc791b358f17f" translate="yes" xml:space="preserve">
          <source>What is a vendor binary?</source>
          <target state="translated">공급 업체 바이너리는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="db07c5e58f27b4b819c82d694edde0dbe4df252d" translate="yes" xml:space="preserve">
          <source>What to do after prompting for authentication, one of: &lt;code&gt;true&lt;/code&gt; (always store), &lt;code&gt;false&lt;/code&gt; (do not store) and &lt;code&gt;&quot;prompt&quot;&lt;/code&gt; (ask every time), defaults to &lt;code&gt;&quot;prompt&quot;&lt;/code&gt;.</source>
          <target state="translated">인증을 요구 한 후 수행 할 작업 : &lt;code&gt;true&lt;/code&gt; (항상 저장), &lt;code&gt;false&lt;/code&gt; (저장 안 함) 및 &lt;code&gt;&quot;prompt&quot;&lt;/code&gt; (매번 묻기) 중 하나는 기본적으로 &lt;code&gt;&quot;prompt&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bdd7b2932eef0cce336346f9c80055042ab8f8ab" translate="yes" xml:space="preserve">
          <source>When Composer finds the right package, either in Packagist or in a repo you have specified, it then uses the versioning features of the package's VCS (i.e., branches and tags) to attempt to find the best match for the version constraint you have specified. Be sure to read about versions and package resolution in the &lt;a href=&quot;articles/versions.md&quot;&gt;versions article&lt;/a&gt;.</source>
          <target state="translated">Composer가 Packagist 또는 지정한 저장소에서 올바른 패키지를 찾으면 패키지의 VCS (예 : 분기 및 태그)의 버전 관리 기능을 사용하여 지정한 버전 제약 조건에 가장 적합한 것을 찾습니다. &lt;a href=&quot;articles/versions.md&quot;&gt;버전 기사&lt;/a&gt; 에서 버전 및 패키지 확인에 대해 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="330bd29ed9bde50bbefed7841e77d3ddf9152ef0" translate="yes" xml:space="preserve">
          <source>When Composer has a complete list of available versions from your VCS, it then finds the highest version that matches all version constraints in your project (it's possible that other packages require more specific versions of the library than you do, so the version it chooses may not always be the highest available version) and it downloads a zip archive of that tag to unpack in the correct location in your &lt;code&gt;vendor&lt;/code&gt; directory.</source>
          <target state="translated">Composer가 VCS에서 사용 가능한 전체 버전 목록을 가지고 있으면 프로젝트의 모든 버전 제약 조건과 일치하는 가장 높은 버전을 찾습니다 (다른 패키지에는 사용자보다 더 구체적인 버전의 라이브러리가 필요할 수 있으므로 선택한 버전이 항상 사용 가능한 최고 버전은 아니며) 해당 태그의 zip 아카이브를 다운로드하여 &lt;code&gt;vendor&lt;/code&gt; 디렉토리 의 올바른 위치에 압축을 풉니 다 .</target>
        </trans-unit>
        <trans-unit id="379c8b0a55dfb40b786bfa68a000e66ed7743d3d" translate="yes" xml:space="preserve">
          <source>When Composer has finished installing, it writes all of the packages and the exact versions of them that it downloaded to the &lt;code&gt;composer.lock&lt;/code&gt; file, locking the project to those specific versions. You should commit the &lt;code&gt;composer.lock&lt;/code&gt; file to your project repo so that all people working on the project are locked to the same versions of dependencies (more below).</source>
          <target state="translated">Composer는 설치를 완료하면 모든 패키지와 패키지의 정확한 버전을 &lt;code&gt;composer.lock&lt;/code&gt; 파일에 기록하여 프로젝트를 해당 특정 버전으로 잠급니다. 프로젝트에서 작업하는 모든 사람이 동일한 버전의 종속성 (아래 참조)에 고정되도록 &lt;code&gt;composer.lock&lt;/code&gt; 파일을 프로젝트 저장소에 커밋해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0ac034bebe5138321718967847943c20f5880687" translate="yes" xml:space="preserve">
          <source>When Composer resolves dependencies, it will look up a given package in the topmost repository. If that repository does not contain the package, it goes on to the next one, until one repository contains it and the process ends.</source>
          <target state="translated">Composer가 종속성을 해결할 때 최상위 저장소에서 주어진 패키지를 찾습니다. 해당 저장소에 패키지가 없으면 한 저장소에 패키지가 포함되고 프로세스가 종료 될 때까지 다음 저장소로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="b2096ba9a24281e11e89594c2a5786ba0fd588c2" translate="yes" xml:space="preserve">
          <source>When GitHub, GitLab or BitBucket repositories are mirrored on your local satis, the build process will include the location of the downloads these platforms make available. This means that the repository and your setup depend on the availability of these services.</source>
          <target state="translated">GitHub, GitLab 또는 BitBucket 리포지토리가 로컬 satis에 미러링되면 빌드 프로세스에 이러한 플랫폼에서 제공하는 다운로드 위치가 포함됩니다. 즉, 리포지토리와 설정은 이러한 서비스의 가용성에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="2c38858ace81518601ebddaca363c41e0d18d440" translate="yes" xml:space="preserve">
          <source>When an event is fired, your PHP callback receives as first argument a &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; object. This object has a &lt;code&gt;getName()&lt;/code&gt; method that lets you retrieve the event name.</source>
          <target state="translated">이벤트가 발생하면 PHP 콜백은 첫 번째 인수로 &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; 객체를받습니다. 이 객체에는 이벤트 이름을 검색 할 수 있는 &lt;code&gt;getName()&lt;/code&gt; 메서드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="27e829a5a3a13d27b6ea68ddcc31dda0e8d8fb9a" translate="yes" xml:space="preserve">
          <source>When branch names look like versions, we have to clarify for composer that we're trying to check out a branch and not a tag. In the above example, we have two version branches: &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;. To get Composer to check out one of these branches, you must specify a version constraint that looks like this: &lt;code&gt;v1.x-dev&lt;/code&gt;. The &lt;code&gt;.x&lt;/code&gt; is an arbitrary string that Composer requires to tell it that we're talking about the &lt;code&gt;v1&lt;/code&gt; branch and not a &lt;code&gt;v1&lt;/code&gt; tag (alternatively, you can name the branch &lt;code&gt;v1.x&lt;/code&gt; instead of &lt;code&gt;v1&lt;/code&gt;). In the case of a branch with a version-like name (&lt;code&gt;v1&lt;/code&gt;, in this case), you append &lt;code&gt;-dev&lt;/code&gt; as a suffix, rather than using &lt;code&gt;dev-&lt;/code&gt; as a prefix.</source>
          <target state="translated">브랜치 이름이 버전처럼 보이면 작곡가가 태그가 아닌 브랜치를 체크하려고한다는 것을 명확히해야합니다. 위의 예에는 &lt;code&gt;v1&lt;/code&gt; 과 &lt;code&gt;v2&lt;/code&gt; 의 두 가지 버전 분기가 있습니다 . Composer가 이러한 분기 중 하나를 체크 아웃하도록하려면 &lt;code&gt;v1.x-dev&lt;/code&gt; 와 같은 버전 제한 조건을 지정해야합니다 . &lt;code&gt;.x&lt;/code&gt; 와는 작곡가가 우리가에 대해 얘기하고 있음을 이야기하는 데 필요한 임의의 문자열입니다 &lt;code&gt;v1&lt;/code&gt; 지점이 아닌 &lt;code&gt;v1&lt;/code&gt; 태그 (또는, 분기 이름을 지정할 수 있습니다 &lt;code&gt;v1.x&lt;/code&gt; 대신 &lt;code&gt;v1&lt;/code&gt; 이 ). 버전과 같은 이름을 가진 분기 ( 이 경우 &lt;code&gt;v1&lt;/code&gt; )의 경우 &lt;code&gt;-dev&lt;/code&gt; 를 추가합니다. &lt;code&gt;dev-&lt;/code&gt; 를 접두사로 사용하지 않고 접미사로 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8440eaaf3a9d4374b20a9fa8763056fa47e5c5f0" translate="yes" xml:space="preserve">
          <source>When creating a gitlab token manually, make sure it has either the &lt;code&gt;read_api&lt;/code&gt; or &lt;code&gt;api&lt;/code&gt; scope.</source>
          <target state="translated">gitlab 토큰을 수동으로 만들 때 &lt;code&gt;read_api&lt;/code&gt; 또는 &lt;code&gt;api&lt;/code&gt; 범위 가 있는지 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="ed76d851aef4697b0588c2b1b8ca05c64897d1a7" translate="yes" xml:space="preserve">
          <source>When facing any kind of problems using Composer, be sure to &lt;strong&gt;work with the latest version&lt;/strong&gt;. See &lt;a href=&quot;../03-cli.md#self-update&quot;&gt;self-update&lt;/a&gt; for details.</source>
          <target state="translated">Composer 사용시 문제가 발생 &lt;strong&gt;하면 최신 버전&lt;/strong&gt; 으로 &lt;strong&gt;작업&lt;/strong&gt; 하십시오 . 자세한 내용은 &lt;a href=&quot;../03-cli.md#self-update&quot;&gt;자체 업데이트&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="73286eb04372437b86cc26c49edbf5051768eae5" translate="yes" xml:space="preserve">
          <source>When resolving dependencies, packages are looked up from repositories from top to bottom, and by default, as soon as a package is found in one, Composer stops looking in other repositories. Read the &lt;a href=&quot;articles/repository-priorities.md&quot;&gt;repository priorities&lt;/a&gt; article for more details and to see how to change this behavior.</source>
          <target state="translated">종속성을 확인할 때 패키지는 리포지토리에서 위에서 아래로 조회되며 기본적으로 패키지가 하나에서 발견되면 Composer는 다른 리포지토리에서 검색을 중지합니다. 자세한 내용과이 동작을 변경하는 방법을 보려면 &lt;a href=&quot;articles/repository-priorities.md&quot;&gt;저장소 우선 순위&lt;/a&gt; 문서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="c97a65124bba7b583bf6dd8b25ef7b083d681222" translate="yes" xml:space="preserve">
          <source>When searching for packages, satis will attempt to resolve all the required packages from the listed repositories. Therefore, if you are requiring a package from Packagist, you will need to define it in your &lt;code&gt;satis.json&lt;/code&gt;.</source>
          <target state="translated">패키지를 검색 할 때 satis는 나열된 저장소에서 필요한 모든 패키지를 해결하려고 시도합니다. 당신이 Packagist에서 패키지를 필요로하는 경우 따라서, 당신은 그것을 정의해야합니다 &lt;code&gt;satis.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9270dfb938a9991922958926f5e5ba668613d2de" translate="yes" xml:space="preserve">
          <source>When the version cannot be inferred from the local VCS repository, you should use the special &lt;code&gt;branch-version&lt;/code&gt; entry under &lt;code&gt;extra&lt;/code&gt; instead of &lt;code&gt;version&lt;/code&gt;:</source>
          <target state="translated">로컬 VCS 저장소에서 버전을 유추 할 수없는 경우 에는 &lt;code&gt;version&lt;/code&gt; 대신 &lt;code&gt;extra&lt;/code&gt; 아래에 특수 &lt;code&gt;branch-version&lt;/code&gt; 항목을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4b89b27505fd76c037f49af242627e21ac55a5d9" translate="yes" xml:space="preserve">
          <source>When this is enabled, Composer will prefer more stable packages over unstable ones when finding compatible stable packages is possible. If you require a dev version or only alphas are available for a package, those will still be selected granted that the minimum-stability allows for it.</source>
          <target state="translated">이것이 활성화되면 Composer는 호환 가능한 안정적인 패키지를 찾을 수있을 때 불안정한 패키지보다 안정적인 패키지를 선호합니다. 개발자 버전이 필요하거나 패키지에 알파 만 사용할 수있는 경우 최소 안정성으로 허용되는 알파가 여전히 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="5b3f3f9864f122718c444babc71b844d1eb5d7ff" translate="yes" xml:space="preserve">
          <source>When working as a team on the same Composer project, you will eventually run into a scenario where multiple people added, updated or removed something in the &lt;code&gt;composer.json&lt;/code&gt; and &lt;code&gt;composer.lock&lt;/code&gt; files in multiple branches. When those branches are eventually merged together, you will get merge conflicts. Resolving these merge conflicts is not as straight forward as on other files, especially not regarding the &lt;code&gt;composer.lock&lt;/code&gt; file.</source>
          <target state="translated">동일한 Composer 프로젝트에서 팀으로 작업 할 때 결국 여러 사람 이 여러 브랜치 의 &lt;code&gt;composer.json&lt;/code&gt; 및 &lt;code&gt;composer.lock&lt;/code&gt; 파일에서 무언가를 추가, 업데이트 또는 제거하는 시나리오에 직면하게됩니다. 이러한 분기가 결국 함께 병합되면 병합 충돌이 발생합니다. 이러한 병합 충돌을 해결하는 것은 특히 &lt;code&gt;composer.lock&lt;/code&gt; 파일 에 관한 것이 아니라 다른 파일 에서처럼 간단하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="16c2acf657e1e7462fae363786252a003708539b" translate="yes" xml:space="preserve">
          <source>When you are using a VCS repository, you will only get comparable versions for branches that look like versions, such as &lt;code&gt;2.0&lt;/code&gt; or &lt;code&gt;2.0.x&lt;/code&gt;. For your &lt;code&gt;master&lt;/code&gt; branch, you will get a &lt;code&gt;dev-master&lt;/code&gt; version. For your &lt;code&gt;bugfix&lt;/code&gt; branch, you will get a &lt;code&gt;dev-bugfix&lt;/code&gt; version.</source>
          <target state="translated">VCS 리포지토리를 사용하는 경우 &lt;code&gt;2.0&lt;/code&gt; 또는 &lt;code&gt;2.0.x&lt;/code&gt; 와 같은 버전처럼 보이는 분기에 대한 비교 가능한 버전 만 제공됩니다 . 당신을 위해 &lt;code&gt;master&lt;/code&gt; 지점, 당신은 얻을 것이다 &lt;code&gt;dev-master&lt;/code&gt; 버전. 당신을 위해 &lt;code&gt;bugfix&lt;/code&gt; 지점, 당신은 얻을 것이다 &lt;code&gt;dev-bugfix&lt;/code&gt; 버전.</target>
        </trans-unit>
        <trans-unit id="578ff736765295027c32e5b458b5c8d3736147d8" translate="yes" xml:space="preserve">
          <source>When you ironed out that process, what you would typically do is run this command as a cron job on a server. It would then update all your package info much like Packagist does.</source>
          <target state="translated">해당 프로세스를 다룰 때 일반적으로 서버에서 크론 작업으로이 명령을 실행합니다. 그런 다음 Packagist와 마찬가지로 모든 패키지 정보를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="dfd16645311a952154d169843341b77074136f03" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;php composer.phar update&lt;/code&gt;, you should get your modified version of &lt;code&gt;monolog/monolog&lt;/code&gt; instead of the one from packagist.</source>
          <target state="translated">&lt;code&gt;php composer.phar update&lt;/code&gt; 를 실행할 때 , packagist가 아닌 수정 된 버전의 &lt;code&gt;monolog/monolog&lt;/code&gt; 를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="7d74443837a95b2fa9335f8d4442b1085516a7ce" translate="yes" xml:space="preserve">
          <source>When you run the command it will interactively ask you to fill in the fields, while using some smart defaults.</source>
          <target state="translated">명령을 실행할 때 일부 스마트 기본값을 사용하는 동안 대화식으로 필드를 채우도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="57fe5af39bff192c35cd0f7cda06f541982c4d26" translate="yes" xml:space="preserve">
          <source>When you run this command, one of two things may happen:</source>
          <target state="translated">이 명령을 실행하면 다음 두 가지 중 하나가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a797fa35e005d95509844e0d650216640084343c" translate="yes" xml:space="preserve">
          <source>When you try to install packages from a Git repository and you use the &lt;code&gt;ControlMaster&lt;/code&gt; setting for your SSH connection, Composer might hang endlessly and you see a &lt;code&gt;sh&lt;/code&gt; process in the &lt;code&gt;defunct&lt;/code&gt; state in your process list.</source>
          <target state="translated">Git 리포지토리에서 패키지를 설치하려고 할 때 SSH 연결에 &lt;code&gt;ControlMaster&lt;/code&gt; 설정을 사용하면 Composer가 끝없이 멈추고 프로세스 목록에서 &lt;code&gt;sh&lt;/code&gt; 프로세스가 작동 &lt;code&gt;defunct&lt;/code&gt; 상태로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afc682517d8479f6ff4e831f3be16bbfa871d292" translate="yes" xml:space="preserve">
          <source>When your private repositories are password protected, you can store the authentication details permanently. The first time Composer needs to authenticate against some domain it will prompt you for a username/password and then you will be asked whether you want to store it.</source>
          <target state="translated">개인 리포지토리가 암호로 보호 된 경우 인증 세부 정보를 영구적으로 저장할 수 있습니다. Composer가 처음으로 일부 도메인에 대해 인증해야하는 경우 사용자 이름 / 암호를 입력하라는 메시지가 표시되며 저장 여부를 묻는 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="39954177a52e7092dc3e5b1402f2cb601a414696" translate="yes" xml:space="preserve">
          <source>Whenever Composer encounters a protected Composer repository it will try to authenticate using already defined credentials first. When none of those credentials apply it will prompt for credentials and save them (or a token if Composer is able to retrieve one).</source>
          <target state="translated">Composer가 보호 된 Composer 저장소를 발견 할 때마다 먼저 이미 정의 된 자격 증명을 사용하여 인증을 시도합니다. 해당 자격 증명이 적용되지 않으면 자격 증명을 입력하라는 메시지가 표시되고 저장됩니다 (또는 Composer에서 검색 할 수있는 경우 토큰).</target>
        </trans-unit>
        <trans-unit id="6bddb0ff394caa8056ccde7e395df6f0f26be603" translate="yes" xml:space="preserve">
          <source>Whether a class is found or not, that fact is always cached in APCu so it can be returned quickly on the next request.</source>
          <target state="translated">클래스가 있는지 여부에 관계없이 해당 팩트는 항상 APCu에 캐시되므로 다음 요청에서 빠르게 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a53d32dcdc189ba7915a6b87f02a46371209fa4" translate="yes" xml:space="preserve">
          <source>Whether a class is found or not, that fact is always cached in APCu, so it can be returned quickly on the next request.</source>
          <target state="translated">클래스가 있는지 여부에 관계없이 해당 사실은 항상 APCu에 캐시되므로 다음 요청에서 빠르게 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0346f1fe4eefd78d63cd15b004c9fd23e3db6fcd" translate="yes" xml:space="preserve">
          <source>Which version numbering system does Composer itself use?</source>
          <target state="translated">Composer 자체는 어떤 버전 번호 체계를 사용합니까?</target>
        </trans-unit>
        <trans-unit id="0186f973d62d2fb41f702ae44dd1ba478c209c15" translate="yes" xml:space="preserve">
          <source>While Composer is mostly used around your project to install its dependencies, there are a few things which are made available to you at runtime.</source>
          <target state="translated">Composer는 대부분 프로젝트에서 종속성을 설치하는 데 사용되지만 런타임시 사용할 수있는 몇 가지 항목이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee75df82513d08f03fd8d6d641174c040cc42474" translate="yes" xml:space="preserve">
          <source>While Composer supports locking dependencies to a specific commit using the &lt;code&gt;#commit-ref&lt;/code&gt; syntax, there are certain caveats that one should take into account. The most important one is &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;documented&lt;/a&gt;, but frequently overlooked:</source>
          <target state="translated">Composer는 &lt;code&gt;#commit-ref&lt;/code&gt; 구문을 사용하여 특정 커밋에 대한 종속성 잠금을 지원하지만 고려해야 할 몇 가지주의 사항이 있습니다. 가장 중요한 것은 &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;문서화&lt;/a&gt; 되어 있지만 자주 간과됩니다.</target>
        </trans-unit>
        <trans-unit id="d6d799cb7768d153f8ca0f019e96c5e0141d360d" translate="yes" xml:space="preserve">
          <source>While you will probably want to put your packages on packagist most of the time, there are some use cases for hosting your own repository.</source>
          <target state="translated">대부분의 경우 패키지를 packagist에 배치하고 싶을 수도 있지만 자체 리포지토리를 호스팅하는 사용 사례가 있습니다.</target>
        </trans-unit>
        <trans-unit id="935e695892681c7f60fc9d678c9d7dcf3efcc0fc" translate="yes" xml:space="preserve">
          <source>Why aliases?</source>
          <target state="translated">왜 별칭입니까?</target>
        </trans-unit>
        <trans-unit id="942b319544623ce191f8e960337a39b9d36ea4ed" translate="yes" xml:space="preserve">
          <source>Why are unbound version constraints a bad idea?</source>
          <target state="translated">언 바운드 버전 제약이 나쁜 생각 인 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="b3a27a1e4cde9703469f9f8ccb701d8cf42b2310" translate="yes" xml:space="preserve">
          <source>Why are version constraints combining comparisons and wildcards a bad idea?</source>
          <target state="translated">비교와 와일드 카드를 결합한 버전 제약 조건이 나쁜 생각 인 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="4849bb86bdd0dff8d3574ff2f644dbbdede59860" translate="yes" xml:space="preserve">
          <source>Why can't Composer load repositories recursively?</source>
          <target state="translated">Composer가 저장소를 재귀 적으로로드 할 수없는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="7acb8e3d9d80fabb1c5a25eba5b8f0cc1519ec5b" translate="yes" xml:space="preserve">
          <source>Wildcard Version Range (.*)</source>
          <target state="translated">와일드 카드 버전 범위 (. *)</target>
        </trans-unit>
        <trans-unit id="d31576cbc0e7d37ac5965f17f826f68f0736ebc3" translate="yes" xml:space="preserve">
          <source>Wildcard Version Range (&lt;code&gt;.*&lt;/code&gt;)</source>
          <target state="translated">와일드 카드 버전 범위 ( &lt;code&gt;.*&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="1d66f059c441426ebd248bf3f78fc3211a7fa82f" translate="yes" xml:space="preserve">
          <source>Wildcards (&lt;code&gt;*&lt;/code&gt;) are also supported in a classmap paths, and expand to match any directory name:</source>
          <target state="translated">와일드 카드 ( &lt;code&gt;*&lt;/code&gt; )는 클래스 맵 경로에서도 지원되며 모든 디렉토리 이름과 일치하도록 확장합니다.</target>
        </trans-unit>
        <trans-unit id="4851296022cbf4ca37bbc835b38cf48f8392e4b3" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--verbose&lt;/code&gt; option you get some more information about what was changed:</source>
          <target state="translated">&lt;code&gt;--verbose&lt;/code&gt; 옵션을 사용하면 변경된 사항에 대한 추가 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b12b24cc6c213ab807bf803a23448ee364830c00" translate="yes" xml:space="preserve">
          <source>Without a vendor alias, Composer will use the PEAR channel name as the vendor portion of the package name:</source>
          <target state="translated">공급 업체 별명이 없으면 Composer는 PEAR 채널 이름을 패키지 이름의 공급 업체 부분으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f1152c338592a36794dba00a974a9b43e867023c" translate="yes" xml:space="preserve">
          <source>Writing Version Constraints</source>
          <target state="translated">버전 제약 조건 작성</target>
        </trans-unit>
        <trans-unit id="e8e72840c3bd313ca905e833526606f705fe9906" translate="yes" xml:space="preserve">
          <source>Writing custom commands</source>
          <target state="translated">사용자 정의 명령 작성</target>
        </trans-unit>
        <trans-unit id="89689e1a2576d8351d3455024a253e1be33852ef" translate="yes" xml:space="preserve">
          <source>Xdebug impact on Composer</source>
          <target state="translated">Composer에 대한 Xdebug 영향</target>
        </trans-unit>
        <trans-unit id="d13bb055de512c4c9634946174960030f1dfcb98" translate="yes" xml:space="preserve">
          <source>Yes, there are two ways an alternate vendor binary location can be specified:</source>
          <target state="translated">예, 대체 공급 업체 바이너리 위치를 지정할 수있는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="232a9479ae52b78bc139efa8d4abd9d73a572ed4" translate="yes" xml:space="preserve">
          <source>You are using &lt;code&gt;symfony/monolog-bundle&lt;/code&gt; which requires &lt;code&gt;monolog/monolog&lt;/code&gt; version &lt;code&gt;1.*&lt;/code&gt;. So you need your &lt;code&gt;dev-bugfix&lt;/code&gt; to match that constraint.</source>
          <target state="translated">&lt;code&gt;monolog/monolog&lt;/code&gt; 버전 &lt;code&gt;1.*&lt;/code&gt; 이 필요한 &lt;code&gt;symfony/monolog-bundle&lt;/code&gt; 을 사용하고 있습니다. 따라서 해당 제약 조건과 일치하도록 &lt;code&gt;dev-bugfix&lt;/code&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="a17e2091336e8745edeffa0ba91b2a82eb48de18" translate="yes" xml:space="preserve">
          <source>You can add the canonical option to any repository to disable this default behavior and make sure Composer keeps looking in other repositories, even if that repository contains a given package.</source>
          <target state="translated">이 기본 동작을 비활성화하고 해당 저장소에 지정된 패키지가 포함되어 있더라도 Composer가 다른 저장소를 계속 검색하도록 모든 저장소에 표준 옵션을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92d8aa0bd892994fe5cead64b812e1207b96563b" translate="yes" xml:space="preserve">
          <source>You can also call a shell/bash script, which will have the path to the PHP executable available in it as a &lt;code&gt;PHP_BINARY&lt;/code&gt; env var.</source>
          <target state="translated">쉘 / bash 스크립트를 호출 할 수도 있습니다.이 스크립트에는 PHP 실행 파일에 대한 경로가 &lt;code&gt;PHP_BINARY&lt;/code&gt; env var로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="47050eeb1ab6dba82e5504b026ca0279bd041182" translate="yes" xml:space="preserve">
          <source>You can also configure these by hand using the config command if you need to configure a production machine to be able to run non-interactive installs. For example to enter credentials for example.org one could type:</source>
          <target state="translated">비 대화식 설치를 실행할 수 있도록 프로덕션 시스템을 구성해야하는 경우 config 명령을 사용하여 직접 구성 할 수도 있습니다. 예를 들어 example.org에 대한 자격 증명을 입력하려면 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="b1d0c2f7f0fd5c31af27505d8741dd13f613349e" translate="yes" xml:space="preserve">
          <source>You can also edit the values of the following properties:</source>
          <target state="translated">다음 특성의 값을 편집 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e42918294c01c86d0966786f28d370862e2fc0f3" translate="yes" xml:space="preserve">
          <source>You can also filter packages which a repository will be able to load, either by selecting which ones you want, or by excluding those you do not want.</source>
          <target state="translated">원하는 패키지를 선택하거나 원하지 않는 패키지를 제외하여 리포지토리에서로드 할 수있는 패키지를 필터링 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f61da855975a7c0669e1a339ed328dae68568d1" translate="yes" xml:space="preserve">
          <source>You can also give additional arguments to the script handler by appending &lt;code&gt;--&lt;/code&gt; followed by the handler arguments. e.g. &lt;code&gt;composer run-script post-install-cmd -- --check&lt;/code&gt; will pass&lt;code&gt;--check&lt;/code&gt; along to the script handler. Those arguments are received as CLI arg by CLI handlers, and can be retrieved as an array via &lt;code&gt;$event-&amp;gt;getArguments()&lt;/code&gt; by PHP handlers.</source>
          <target state="translated">또한 핸들러 인수 뒤에 &lt;code&gt;--&lt;/code&gt; 를 추가하여 스크립트 핸들러에 추가 인수를 제공 할 수도 있습니다 . 예를 들어 &lt;code&gt;composer run-script post-install-cmd -- --check&lt;/code&gt; 는 &lt;code&gt;--check&lt;/code&gt; 를 스크립트 처리기에 전달 합니다. 이러한 인수는 CLI 핸들러에 의해 CLI 인수로 수신 되며 PHP 핸들러에 의해 &lt;code&gt;$event-&amp;gt;getArguments()&lt;/code&gt; 를 통해 배열로 검색 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="318fba6a4eb9d30d820aa00958f0a0efc84cb423" translate="yes" xml:space="preserve">
          <source>You can also refer a script and pass it new arguments:</source>
          <target state="translated">스크립트를 참조하여 새 인수를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f23a226bdf3ac7de179d20ef06e91398298bec68" translate="yes" xml:space="preserve">
          <source>You can also search for more than one term by passing multiple arguments.</source>
          <target state="translated">여러 인수를 전달하여 둘 이상의 용어를 검색 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e277031eed1b3ebd11ad64d6cb86fcc011e4a79a" translate="yes" xml:space="preserve">
          <source>You can also use wildcards to update a bunch of packages at once:</source>
          <target state="translated">와일드 카드를 사용하여 여러 패키지를 한 번에 업데이트 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc70b71ddbbc9db27ba6fb110e2c264c1454b235" translate="yes" xml:space="preserve">
          <source>You can check out any package and start developing on patches for example.</source>
          <target state="translated">예를 들어 모든 패키지를 체크 아웃하고 패치 개발을 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c989054b70bcc085a6cc0a500077648747980ec" translate="yes" xml:space="preserve">
          <source>You can define multiple ranges. Ranges separated by a space () or comma (&lt;code&gt;,&lt;/code&gt;) will be treated as a &lt;strong&gt;logical AND&lt;/strong&gt;. A double pipe (&lt;code&gt;||&lt;/code&gt;) will be treated as a &lt;strong&gt;logical OR&lt;/strong&gt;. AND has higher precedence than OR.</source>
          <target state="translated">여러 범위를 정의 할 수 있습니다. 공백 () 또는 쉼표 ( &lt;code&gt;,&lt;/code&gt; ) 로 구분 된 범위 는 &lt;strong&gt;논리 AND&lt;/strong&gt; 로 처리됩니다 . 이중 파이프 ( &lt;code&gt;||&lt;/code&gt; )는 &lt;strong&gt;논리 OR&lt;/strong&gt; 로 처리됩니다 . AND가 OR보다 우선 순위가 높습니다.</target>
        </trans-unit>
        <trans-unit id="d550a4be6c1d6ecf6c3187d977dbbadbbef60667" translate="yes" xml:space="preserve">
          <source>You can deploy application packages.</source>
          <target state="translated">응용 프로그램 패키지를 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25617ca19a07cc38bb9e4fbf40ca922966b9f2a8" translate="yes" xml:space="preserve">
          <source>You can disable Packagist.org globally by using the global config flag:</source>
          <target state="translated">전역 구성 플래그를 사용하여 Packagist.org를 전역 적으로 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="818ebdafb4698871127705adf6fc094348356a99" translate="yes" xml:space="preserve">
          <source>You can disable the default Packagist.org repository by adding this to your &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">당신은 당신이를 추가하여 기본 Packagist.org 저장소를 사용하지 않도록 설정할 수 있습니다 &lt;code&gt;composer.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="be4dcb1f385e4785fdaee3137b5b2d0d17d4e0a1" translate="yes" xml:space="preserve">
          <source>You can enable IPv6 again with:</source>
          <target state="translated">다음을 사용하여 IPv6을 다시 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23e2fc209445e06617cb36018112cb556e7e0d1a" translate="yes" xml:space="preserve">
          <source>You can even add your own code to the autoloader by adding an &lt;a href=&quot;04-schema.md#autoload&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; field to &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 에&lt;a href=&quot;04-schema.md#autoload&quot;&gt; &lt;code&gt;autoload&lt;/code&gt; &lt;/a&gt; 필드를 추가하여 자신의 코드를 자동 로더에 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d69b8155ec189620730e3daf1051489521808063" translate="yes" xml:space="preserve">
          <source>You can even pass the package version, which will tell you the details of that specific version.</source>
          <target state="translated">패키지 버전을 전달하면 해당 버전의 세부 정보를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e124e97a01fd07f19167a1cd6477ea415996804" translate="yes" xml:space="preserve">
          <source>You can fix this by aliasing version 0.11 to 0.1:</source>
          <target state="translated">앨리어스 버전 0.11 ~ 0.1을 사용하여이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a38e05f55669ad85d97016d74c8d3f2795944229" translate="yes" xml:space="preserve">
          <source>You can install Composer to a specific directory by using the &lt;code&gt;--install-dir&lt;/code&gt; option and additionally (re)name it as well using the &lt;code&gt;--filename&lt;/code&gt; option. When running the installer when following &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page instructions&lt;/a&gt; add the following parameters:</source>
          <target state="translated">&lt;code&gt;--install-dir&lt;/code&gt; 옵션 을 사용하여 Composer를 특정 디렉토리에 설치 하고 추가로 &lt;code&gt;--filename&lt;/code&gt; 옵션을 사용하여 이름을 바꿀 수 있습니다 . &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;다운로드 페이지 지시 사항을&lt;/a&gt; 따를 때 설치 프로그램을 실행할 때 다음 매개 변수를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="be5ff711194d3da4970dfdaa31fbc2f9ec96d666" translate="yes" xml:space="preserve">
          <source>You can make a permanent swap file following this &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;자습서에&lt;/a&gt; 따라 영구 스왑 파일을 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b4f2dfed1baaa2bac58bd92d69eddb44f4ab87ee" translate="yes" xml:space="preserve">
          <source>You can open this file in your favorite editor and fix the error.</source>
          <target state="translated">자주 사용하는 편집기에서이 파일을 열고 오류를 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="059e2a4ea7a2b57e8e95e25f4c1be4e4e855fc92" translate="yes" xml:space="preserve">
          <source>You can optionally specify a version constraint after the package to limit the search.</source>
          <target state="translated">선택적으로 패키지 다음에 버전 제한 조건을 지정하여 검색을 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44247cd92513b88c8690622827b1c538d8a672e5" translate="yes" xml:space="preserve">
          <source>You can place the Composer PHAR anywhere you wish. If you put it in a directory that is part of your &lt;code&gt;PATH&lt;/code&gt;, you can access it globally. On Unix systems you can even make it executable and invoke it without directly using the &lt;code&gt;php&lt;/code&gt; interpreter.</source>
          <target state="translated">원하는 곳에 Composer PHAR을 배치 할 수 있습니다. &lt;code&gt;PATH&lt;/code&gt; 의 일부인 디렉토리에 배치 하면 글로벌로 액세스 할 수 있습니다. 유닉스 시스템에서는 &lt;code&gt;php&lt;/code&gt; 인터프리터를 직접 사용하지 않고도 실행 가능하게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="66e6f726f4e93634057c9bc64f8e7412b4ccf33c" translate="yes" xml:space="preserve">
          <source>You can set &lt;code&gt;bin-dir&lt;/code&gt; to &lt;code&gt;./&lt;/code&gt; to put binaries in your project root.</source>
          <target state="translated">&lt;code&gt;bin-dir&lt;/code&gt; 을 &lt;code&gt;./&lt;/code&gt; 로 설정 하여 프로젝트 루트에 바이너리를 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1529802815269f9ccc9f98d7ed7ce8dc2265d3a0" translate="yes" xml:space="preserve">
          <source>You can set a number of environment variables that override certain settings. Whenever possible it is recommended to specify these settings in the &lt;code&gt;config&lt;/code&gt; section of &lt;code&gt;composer.json&lt;/code&gt; instead. It is worth noting that the env vars will always take precedence over the values specified in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">특정 설정을 재정의하는 여러 환경 변수를 설정할 수 있습니다. 가능하면 &lt;code&gt;composer.json&lt;/code&gt; 의 &lt;code&gt;config&lt;/code&gt; 섹션 에서 이러한 설정을 지정하는 것이 좋습니다 . env vars는 항상 &lt;code&gt;composer.json&lt;/code&gt; 에 지정된 값보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="11459ebfeb63e743171fd7e4cf5e5a1bc70fd3bf" translate="yes" xml:space="preserve">
          <source>You can set custom script descriptions with the following in your &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 에서 다음을 사용하여 사용자 정의 스크립트 설명을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31a7b3e235562ba59cb0ff9f6a273d0099fd6e4e" translate="yes" xml:space="preserve">
          <source>You can specify a pattern with a &lt;code&gt;*&lt;/code&gt; wildcard. &lt;code&gt;1.0.*&lt;/code&gt; is the equivalent of &lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt;.</source>
          <target state="translated">당신은과 패턴을 지정할 수 있습니다 &lt;code&gt;*&lt;/code&gt; 와일드 카드를. &lt;code&gt;1.0.*&lt;/code&gt; 는 &lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="df4750b176dc87d7120530cc24bccad70a6c661a" translate="yes" xml:space="preserve">
          <source>You can specify the exact version of a package. This will tell Composer to install this version and this version only. If other dependencies require a different version, the solver will ultimately fail and abort any install or update procedures.</source>
          <target state="translated">패키지의 정확한 버전을 지정할 수 있습니다. 이렇게하면 Composer에이 버전과이 버전 만 설치하도록 지시합니다. 다른 종속성에 다른 버전이 필요한 경우 솔버는 결국 실패하고 설치 또는 업데이트 절차를 중단합니다.</target>
        </trans-unit>
        <trans-unit id="66933a7f82f185e606bc5150c277062e4eba4e61" translate="yes" xml:space="preserve">
          <source>You can tell Satis to selectively update only particular packages or process only a repository with a given URL. This cuts down the time it takes to rebuild the &lt;code&gt;package.json&lt;/code&gt; file and is helpful if you use (custom) webhooks to trigger rebuilds whenever code is pushed into one of your repositories.</source>
          <target state="translated">Satis에게 특정 패키지 만 선택적으로 업데이트하거나 지정된 URL을 가진 저장소 만 처리하도록 지시 할 수 있습니다. 이렇게하면 &lt;code&gt;package.json&lt;/code&gt; 파일 을 다시 작성하는 데 걸리는 시간이 단축되고 코드를 리포지토리 중 하나로 푸시 할 때마다 (사용자 지정) webhook을 사용 하여 다시 작성 을 트리거 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="212d30ec5b49a0affbd51321e0d61f94172968ab" translate="yes" xml:space="preserve">
          <source>You can test version constraints using &lt;a href=&quot;https://semver.mwl.be&quot;&gt;semver.mwl.be&lt;/a&gt;. Fill in a package name and it will autofill the default version constraint which Composer would add to your &lt;code&gt;composer.json&lt;/code&gt; file. You can adjust the version constraint and the tool will highlight all releases that match.</source>
          <target state="translated">&lt;a href=&quot;https://semver.mwl.be&quot;&gt;semver.mwl.be를&lt;/a&gt; 사용하여 버전 제약 조건을 테스트 할 수 있습니다 . 패키지 이름을 입력하면 Composer가 &lt;code&gt;composer.json&lt;/code&gt; 파일에 추가 할 기본 버전 제약 조건을 자동으로 채 웁니다 . 버전 제약 조건을 조정할 수 있으며 도구는 일치하는 모든 릴리스를 강조 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b8b9e567af0efee531c02ff1ed84cdf8cdb63eb5" translate="yes" xml:space="preserve">
          <source>You can update all your dependencies in one command.</source>
          <target state="translated">하나의 명령으로 모든 종속성을 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f880b40e14dbe74ab6577c31e1cb939d9ef7403" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;03-cli.md#show&quot;&gt;&lt;code&gt;show --platform&lt;/code&gt;&lt;/a&gt; to get a list of your locally available platform packages.</source>
          <target state="translated">&lt;a href=&quot;03-cli.md#show&quot;&gt; &lt;code&gt;show --platform&lt;/code&gt; &lt;/a&gt; 을 사용 하여 로컬로 사용 가능한 플랫폼 패키지 목록을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c70b74b13c3da6aababb2305fe63db4c57b857b" translate="yes" xml:space="preserve">
          <source>You can use Composer to create new projects from an existing package. This is the equivalent of doing a git clone/svn checkout followed by a &lt;code&gt;composer install&lt;/code&gt; of the vendors.</source>
          <target state="translated">Composer를 사용하여 기존 패키지에서 새 프로젝트를 작성할 수 있습니다. 이것은 git clone / svn checkout 과 벤더 의 &lt;code&gt;composer install&lt;/code&gt; 를 수행하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7e0dbd29592dd6aaf01f3bbef96e2794758f6933" translate="yes" xml:space="preserve">
          <source>You can use the classmap generation support to define autoloading for all libraries that do not follow PSR-0/4. To configure this you specify all directories or files to search for classes.</source>
          <target state="translated">클래스 맵 생성 지원을 사용하여 PSR-0 / 4를 따르지 않는 모든 라이브러리에 대한 자동로드를 정의 할 수 있습니다. 이를 구성하려면 클래스를 검색 할 모든 디렉토리 또는 파일을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="edc081f399ca138529927a30617249f7dd8e5aa2" translate="yes" xml:space="preserve">
          <source>You define a mapping from namespaces to directories. The &lt;code&gt;src&lt;/code&gt; directory would be in your project root, on the same level as &lt;code&gt;vendor&lt;/code&gt; directory is. An example filename would be &lt;code&gt;src/Foo.php&lt;/code&gt; containing an &lt;code&gt;Acme\Foo&lt;/code&gt; class.</source>
          <target state="translated">네임 스페이스에서 디렉토리로의 맵핑을 정의합니다. &lt;code&gt;src&lt;/code&gt; 로 디렉토리는 동일한 수준에, 당신의 프로젝트 루트에있을 것입니다 &lt;code&gt;vendor&lt;/code&gt; 디렉토리입니다. 파일 이름의 예 는 &lt;code&gt;Acme\Foo&lt;/code&gt; 클래스를 포함하는 &lt;code&gt;src/Foo.php&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b5be00608cf1fdfcf4fae1cf04e361e548a437c6" translate="yes" xml:space="preserve">
          <source>You give it a &lt;code&gt;composer.json&lt;/code&gt; containing repositories, typically VCS and package repository definitions. It will fetch all the packages that are &lt;code&gt;require&lt;/code&gt;d and dump a &lt;code&gt;packages.json&lt;/code&gt; that is your &lt;code&gt;composer&lt;/code&gt; repository.</source>
          <target state="translated">저장소, 일반적으로 VCS 및 패키지 저장소 정의를 포함 하는 &lt;code&gt;composer.json&lt;/code&gt; 을 제공합니다 . d 가 &lt;code&gt;require&lt;/code&gt; 모든 패키지를 가져오고 &lt;code&gt;composer&lt;/code&gt; 저장소 인 &lt;code&gt;packages.json&lt;/code&gt; 을 덤프 합니다.</target>
        </trans-unit>
        <trans-unit id="7f3f9919240a9f9cefbca07f2401866024df7494" translate="yes" xml:space="preserve">
          <source>You have a project that depends on a number of libraries.</source>
          <target state="translated">많은 라이브러리에 의존하는 프로젝트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="706b15e3867b3e4477af11bdbadf3887218e7cb0" translate="yes" xml:space="preserve">
          <source>You may pass the &lt;code&gt;--no-plugins&lt;/code&gt; option to Composer commands to disable all installed plugins. This may be particularly helpful if any of the plugins causes errors and you wish to update or uninstall it.</source>
          <target state="translated">&lt;code&gt;--no-plugins&lt;/code&gt; 옵션을 Composer 명령에 전달하여 설치된 모든 플러그인을 비활성화 할 수 있습니다. 이는 플러그인 중 하나가 오류를 일으키고이를 업데이트하거나 제거하려는 경우 특히 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c6a8cc4f3cf7e82f808e84dfe803c4507f5d466" translate="yes" xml:space="preserve">
          <source>You may pass the &lt;code&gt;--no-plugins&lt;/code&gt; option to composer commands to disable all installed plugins. This may be particularly helpful if any of the plugins causes errors and you wish to update or uninstall it.</source>
          <target state="translated">설치된 모든 플러그인을 비활성화하기 위해 &lt;code&gt;--no-plugins&lt;/code&gt; 옵션을 composer 명령에 전달할 수 있습니다 . 이는 플러그인 중 하나에서 오류가 발생하여 업데이트하거나 제거하려는 경우 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a011ed0c983ca176dda6d1f7aab64b156b38e178" translate="yes" xml:space="preserve">
          <source>You may put a &lt;code&gt;config.json&lt;/code&gt; file into the location which &lt;code&gt;COMPOSER_HOME&lt;/code&gt; points to. Composer will merge this configuration with your project's &lt;code&gt;composer.json&lt;/code&gt; when you run the &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;COMPOSER_HOME&lt;/code&gt; 이 가리키는 위치에 &lt;code&gt;config.json&lt;/code&gt; 파일을 넣을 수 있습니다 . Composer는 &lt;code&gt;install&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; 명령 을 실행할 때이 구성을 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 과 병합 합니다.</target>
        </trans-unit>
        <trans-unit id="f06187869e01bb34fb096711889bc95109aa0fb2" translate="yes" xml:space="preserve">
          <source>You may run into errors if IPv6 is not configured correctly. A common error is:</source>
          <target state="translated">IPv6이 올바르게 구성되지 않으면 오류가 발생할 수 있습니다. 일반적인 오류는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d07a9667007cb39bf1fcc0966d043fa601e09d5c" translate="yes" xml:space="preserve">
          <source>You may wish to alter or expand Composer's functionality with your own. For example if your environment poses special requirements on the behaviour of Composer which do not apply to the majority of its users or if you wish to accomplish something with Composer in a way that is not desired by most users.</source>
          <target state="translated">Composer의 기능을 직접 변경하거나 확장 할 수 있습니다. 예를 들어 환경이 대부분의 사용자에게 적용되지 않는 Composer의 동작에 대한 특별한 요구 사항을 제기하거나 대부분의 사용자가 원하지 않는 방식으로 Composer로 무언가를 수행하려는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="acc8d3298fe776fc118a311a80b572321ff9bcc8" translate="yes" xml:space="preserve">
          <source>You may wish to alter or expand Composer's functionality with your own. For example if your environment poses special requirements on the behaviour of Composer which do not apply to the majority of its users or if you wish to accomplish something with composer in a way that is not desired by most users.</source>
          <target state="translated">자신 만의 Composer 기능을 변경하거나 확장 할 수 있습니다. 예를 들어, 사용자 환경에 대부분의 사용자에게 적용되지 않는 Composer의 동작에 대한 특별한 요구 사항이 있거나 대부분의 사용자가 원하지 않는 방식으로 Composer로 무언가를 달성하려는 경우.</target>
        </trans-unit>
        <trans-unit id="a2eb123c60238bf801143f7856b0c4a859b3649a" translate="yes" xml:space="preserve">
          <source>You might run into this if you are trying to require dev, alpha, beta, or RC versions of a package. Read more about stability flags and the &lt;code&gt;minimum-stability&lt;/code&gt; key on the &lt;a href=&quot;04-schema.md&quot;&gt;schema page&lt;/a&gt;.</source>
          <target state="translated">패키지의 개발자, 알파, 베타 또는 RC 버전이 필요한 경우이 문제가 발생할 수 있습니다. &lt;a href=&quot;04-schema.md&quot;&gt;스키마 페이지&lt;/a&gt; 에서 안정성 플래그 및 &lt;code&gt;minimum-stability&lt;/code&gt; 키에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="91dbe9ec5cd79625d01b966c2069ab7cd046b81a" translate="yes" xml:space="preserve">
          <source>You must require the special package called &lt;code&gt;composer-plugin-api&lt;/code&gt; to define which Plugin API versions your plugin is compatible with.</source>
          <target state="translated">플러그인이 호환되는 플러그인 API 버전을 정의하려면 &lt;code&gt;composer-plugin-api&lt;/code&gt; 라는 특수 패키지가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="a3c787e4dc597388705025c5f142ebed903b4b14" translate="yes" xml:space="preserve">
          <source>You must require the special package called &lt;code&gt;composer-plugin-api&lt;/code&gt; to define which Plugin API versions your plugin is compatible with. Requiring this package doesn't actually include any extra dependencies, it only specifies which version of the plugin API to use.</source>
          <target state="translated">플러그인이 호환되는 플러그인 API 버전을 정의하려면 &lt;code&gt;composer-plugin-api&lt;/code&gt; 라는 특수 패키지가 필요합니다 . 이 패키지를 요구하는 것은 실제로 추가 종속성을 포함하지 않으며 사용할 플러그인 API 버전 만 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3ef7fc7ea241fefdca20a7c63cce2e8af5f6f7e6" translate="yes" xml:space="preserve">
          <source>You should always run the &lt;code&gt;validate&lt;/code&gt; command before you commit your &lt;code&gt;composer.json&lt;/code&gt; file, and before you tag a release. It will check if your &lt;code&gt;composer.json&lt;/code&gt; is valid.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 파일 을 커밋 하기 전에 그리고 릴리스에 태그를 지정하기 전에 항상 &lt;code&gt;validate&lt;/code&gt; 명령을 실행해야합니다 . &lt;code&gt;composer.json&lt;/code&gt; 이 유효한지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="f102019ddc564e89c1f8d9dca4be6136cc8d4e2d" translate="yes" xml:space="preserve">
          <source>You simply visit &lt;a href=&quot;https://packagist.org&quot;&gt;Packagist&lt;/a&gt; and hit the &quot;Submit&quot; button. This will prompt you to sign up if you haven't already, and then allows you to submit the URL to your VCS repository, at which point Packagist will start crawling it. Once it is done, your package will be available to anyone!</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org&quot;&gt;Packagist&lt;/a&gt; 를 방문 하여 &quot;제출&quot;버튼을 누르기 만하면 됩니다. 이렇게하면 아직 가입하지 않은 경우 가입하라는 메시지가 표시되고 Vag 저장소에 URL을 제출하면 Packagist에서 크롤링을 시작합니다. 완료되면 패키지를 누구나 사용할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="a7531eb5a58f1d76d702e3a93dd7e3c7e5107882" translate="yes" xml:space="preserve">
          <source>You visit &lt;a href=&quot;https://packagist.org&quot;&gt;Packagist&lt;/a&gt; and hit the &quot;Submit&quot; button. This will prompt you to sign up if you haven't already, and then allows you to submit the URL to your VCS repository, at which point Packagist will start crawling it. Once it is done, your package will be available to anyone!</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org&quot;&gt;Packagist를&lt;/a&gt; 방문 하여 &quot;제출&quot;버튼을 누르십시오. 아직 가입하지 않은 경우 가입하라는 메시지가 표시되고 URL을 VCS 리포지토리에 제출할 수 있습니다. 그러면 Packagist가 크롤링을 시작합니다. 완료되면 누구나 패키지를 사용할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="52d92c0ecd016ee768f5b25dbb982bfd3c9a58c6" translate="yes" xml:space="preserve">
          <source>You've already learned how to use the command-line interface to do some things. This chapter documents all the available commands.</source>
          <target state="translated">이미 명령 행 인터페이스를 사용하여 몇 가지 작업을 수행하는 방법을 배웠습니다. 이 장에서는 사용 가능한 모든 명령에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="368c3339984e0203b3d641afa4d0d17024ae44e4" translate="yes" xml:space="preserve">
          <source>Your &lt;a href=&quot;handling-private-packages-with-satis.md&quot;&gt;Satis or Toran Proxy&lt;/a&gt; server could be secured with http basic authentication. In order to allow your project to have access to these packages you will have to tell composer how to authenticate with your credentials.</source>
          <target state="translated">귀하의 &lt;a href=&quot;handling-private-packages-with-satis.md&quot;&gt;Satis 또는 Toran 프록시&lt;/a&gt; 서버는 HTTP 기본 인증을 확보 할 수있다. 프로젝트가 이러한 패키지에 액세스 할 수 있도록하려면 작곡가에게 자격 증명으로 인증하는 방법을 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="dfc2b2f97da2fd8061fd2a71ef3ad9e704949477" translate="yes" xml:space="preserve">
          <source>Your &lt;a href=&quot;handling-private-packages.md&quot;&gt;private package server&lt;/a&gt; or version control system is probably secured with one or more authentication options. In order to allow your project to have access to these packages and repositories you will have to tell Composer how to authenticate with the server that hosts them.</source>
          <target state="translated">귀하의 &lt;a href=&quot;handling-private-packages.md&quot;&gt;개인 패키지 서버&lt;/a&gt; 또는 버전 제어 시스템은 아마도 하나 이상의 인증 옵션으로 보호됩니다. 프로젝트가 이러한 패키지 및 저장소에 액세스 할 수 있도록하려면 해당 패키지를 호스팅하는 서버에서 인증하는 방법을 Composer에 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="b17763c432428c5f9772ad0c796c1b29a3367780" translate="yes" xml:space="preserve">
          <source>Zip archives are not unpacked correctly.</source>
          <target state="translated">Zip 보관 파일의 압축이 제대로 풀리지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8f53ed0fec22d3282d0e70911e563402b8429cfc" translate="yes" xml:space="preserve">
          <source>abandoned</source>
          <target state="translated">abandoned</target>
        </trans-unit>
        <trans-unit id="9ae582b23b531c1886981c18fb9886e3c8a6f9bd" translate="yes" xml:space="preserve">
          <source>apcu-autoloader</source>
          <target state="translated">apcu-autoloader</target>
        </trans-unit>
        <trans-unit id="ebfb55f4432b592119a10592e4f26272cc72359e" translate="yes" xml:space="preserve">
          <source>archive</source>
          <target state="translated">archive</target>
        </trans-unit>
        <trans-unit id="055c81090cbea5d67cd6ed4abeb36df5a2f3bc7a" translate="yes" xml:space="preserve">
          <source>archive-dir</source>
          <target state="translated">archive-dir</target>
        </trans-unit>
        <trans-unit id="8fe2bd45f8242e0d091a36cc6ad7a46e16c0d1bb" translate="yes" xml:space="preserve">
          <source>archive-format</source>
          <target state="translated">archive-format</target>
        </trans-unit>
        <trans-unit id="90e3fd0f012c27834ea5ef3cf1dfef96e9190b40" translate="yes" xml:space="preserve">
          <source>authors</source>
          <target state="translated">authors</target>
        </trans-unit>
        <trans-unit id="4f25d09afc26355e099f60888cb6afb436cd27bf" translate="yes" xml:space="preserve">
          <source>autoload</source>
          <target state="translated">autoload</target>
        </trans-unit>
        <trans-unit id="5d86fcc7bef79bafe0a21734858458705a5f9693" translate="yes" xml:space="preserve">
          <source>autoload-dev</source>
          <target state="translated">autoload-dev</target>
        </trans-unit>
        <trans-unit id="85242461ce1877f7114296183a7e473e8d273561" translate="yes" xml:space="preserve">
          <source>autoload-dev (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">autoload-dev ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="327222f10160e1bb81490948a2dd1baea047f1e0" translate="yes" xml:space="preserve">
          <source>autoloader-suffix</source>
          <target state="translated">autoloader-suffix</target>
        </trans-unit>
        <trans-unit id="ddb2c93ebcf6098f6ccb08807ed66e02934248a5" translate="yes" xml:space="preserve">
          <source>bearer</source>
          <target state="translated">bearer</target>
        </trans-unit>
        <trans-unit id="9a5d56716d566997fa290054d161af96305aff9a" translate="yes" xml:space="preserve">
          <source>bin</source>
          <target state="translated">bin</target>
        </trans-unit>
        <trans-unit id="93d983b53c62ff28a837c77b44a432534d802bcd" translate="yes" xml:space="preserve">
          <source>bin-compat</source>
          <target state="translated">bin-compat</target>
        </trans-unit>
        <trans-unit id="2b4429c6887bb899ef8aad3f48b55459c5b98af8" translate="yes" xml:space="preserve">
          <source>bin-dir</source>
          <target state="translated">bin-dir</target>
        </trans-unit>
        <trans-unit id="4b7aa088aef6f332d19a788cfb842570aa91c4a4" translate="yes" xml:space="preserve">
          <source>bitbucket-oauth</source>
          <target state="translated">bitbucket-oauth</target>
        </trans-unit>
        <trans-unit id="99a8b99a0de81e36e0b13111a9714c176332cb4b" translate="yes" xml:space="preserve">
          <source>browse / home</source>
          <target state="translated">찾아보기 / 집</target>
        </trans-unit>
        <trans-unit id="8cedbd496e14ca16ade865c5c11677a9f7c27aef" translate="yes" xml:space="preserve">
          <source>cache-dir</source>
          <target state="translated">cache-dir</target>
        </trans-unit>
        <trans-unit id="3b6b533d2fd6fb07d10ed34695c805048c0d178f" translate="yes" xml:space="preserve">
          <source>cache-files-dir</source>
          <target state="translated">cache-files-dir</target>
        </trans-unit>
        <trans-unit id="9ed4ad56554221c2221d977b39973ef3597174c9" translate="yes" xml:space="preserve">
          <source>cache-files-maxsize</source>
          <target state="translated">cache-files-maxsize</target>
        </trans-unit>
        <trans-unit id="4481668f2f5aa14c06d4bc568dd437ee980c627d" translate="yes" xml:space="preserve">
          <source>cache-files-ttl</source>
          <target state="translated">cache-files-ttl</target>
        </trans-unit>
        <trans-unit id="6022dad53798bf5020be2ef697f0f906a40ee021" translate="yes" xml:space="preserve">
          <source>cache-read-only</source>
          <target state="translated">cache-read-only</target>
        </trans-unit>
        <trans-unit id="e0d5c77623a655b3050a7e8c6328d7f37528948f" translate="yes" xml:space="preserve">
          <source>cache-repo-dir</source>
          <target state="translated">cache-repo-dir</target>
        </trans-unit>
        <trans-unit id="7139f397cc749ba8edccdd098845c384ec690793" translate="yes" xml:space="preserve">
          <source>cache-vcs-dir</source>
          <target state="translated">cache-vcs-dir</target>
        </trans-unit>
        <trans-unit id="cbaf9cdda9b4ba6fc8fc74690f3d2a220a16b3c0" translate="yes" xml:space="preserve">
          <source>cafile</source>
          <target state="translated">cafile</target>
        </trans-unit>
        <trans-unit id="37236002e4f003af10f89f8d300f323e60d1b129" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;composer dump-autoload&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer dump-autoload&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="cf9f02fe07761d37cb2db74fef458c86cdf16fcb" translate="yes" xml:space="preserve">
          <source>capath</source>
          <target state="translated">capath</target>
        </trans-unit>
        <trans-unit id="018f840a6ce1cddc2366b9a7fe2ab131d2190bb4" translate="yes" xml:space="preserve">
          <source>check-platform-reqs</source>
          <target state="translated">check-platform-reqs</target>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">class</target>
        </trans-unit>
        <trans-unit id="70118a58a1cdb739363cbff6d862e5268db7e4ba" translate="yes" xml:space="preserve">
          <source>classmap-authoritative</source>
          <target state="translated">classmap-authoritative</target>
        </trans-unit>
        <trans-unit id="1bd6fa8543b8c66356480ecf1d62f0c9d743c473" translate="yes" xml:space="preserve">
          <source>clear-cache (clearcache)</source>
          <target state="translated">클리어 캐시 (clearcache)</target>
        </trans-unit>
        <trans-unit id="9657e15a3112bf134b8be256f74a544a79df0759" translate="yes" xml:space="preserve">
          <source>clear-cache / clearcache / cc</source>
          <target state="translated">클리어 캐시 / 클리어 캐시 / CC</target>
        </trans-unit>
        <trans-unit id="bbd287635462406836fa80e698517ab21a876004" translate="yes" xml:space="preserve">
          <source>command: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/CommandEvent.html&quot;&gt;&lt;code&gt;Composer\Plugin\CommandEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">명령 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/CommandEvent.html&quot;&gt; &lt;code&gt;Composer\Plugin\CommandEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d9a62aae0056fc7491eda4691723ce20fac43c34" translate="yes" xml:space="preserve">
          <source>composer-runtime-api 2.0 introduced a new &lt;code&gt;Composer\InstalledVersions&lt;/code&gt; class which offers a few static methods to inspect which versions are currently installed. This is automatically available to your code as long as you include the Composer autoloader.</source>
          <target state="translated">composer-runtime-api 2.0 은 현재 설치된 버전을 검사하는 몇 가지 정적 메서드를 제공하는 새로운 &lt;code&gt;Composer\InstalledVersions&lt;/code&gt; 클래스를 도입했습니다 . Composer 자동 로더를 포함하는 한 코드에서 자동으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4bea2f8f0027eefb70a0c9285e5269b574b57c9" translate="yes" xml:space="preserve">
          <source>composer-runtime-api 2.0 introduced a new &lt;code&gt;vendor/composer/platform_check.php&lt;/code&gt; file, which is included automatically when you include the Composer autoloader.</source>
          <target state="translated">composer-runtime-api 2.0 은 Composer 오토로더를 포함 할 때 자동으로 포함되는 새로운 &lt;code&gt;vendor/composer/platform_check.php&lt;/code&gt; 파일을 도입했습니다 .</target>
        </trans-unit>
        <trans-unit id="3957b91a0d8450cea0115cfd5af69eac90d75897" translate="yes" xml:space="preserve">
          <source>composer.json</source>
          <target state="translated">composer.json</target>
        </trans-unit>
        <trans-unit id="8f95aab906ec3991aef7aee55e388b8938bfe915" translate="yes" xml:space="preserve">
          <source>composer.json:</source>
          <target state="translated">composer.json:</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="a91fe9d1f33be78ac6ab16880c87955ca048ceca" translate="yes" xml:space="preserve">
          <source>config (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">구성 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ae214513a0d21125291c9566dfdb0fcb1fdd1d2b" translate="yes" xml:space="preserve">
          <source>conflict</source>
          <target state="translated">conflict</target>
        </trans-unit>
        <trans-unit id="7c5d7a31e7a5acd7ea4b8a47e52f12993497fd45" translate="yes" xml:space="preserve">
          <source>create-project</source>
          <target state="translated">create-project</target>
        </trans-unit>
        <trans-unit id="13a702251e3b61fcaa92cccf4856a8a570aa6f1b" translate="yes" xml:space="preserve">
          <source>custom header</source>
          <target state="translated">맞춤 헤더</target>
        </trans-unit>
        <trans-unit id="547ec7fc0cc222d522293be828612dcdcdd49c47" translate="yes" xml:space="preserve">
          <source>data-dir</source>
          <target state="translated">data-dir</target>
        </trans-unit>
        <trans-unit id="6d613a1ee01eec4c0f8ca66df0db71dca0c6e1cf" translate="yes" xml:space="preserve">
          <source>database</source>
          <target state="translated">database</target>
        </trans-unit>
        <trans-unit id="c24091201bc1fd018075abbd0d09f84221e3c74d" translate="yes" xml:space="preserve">
          <source>depends (why)</source>
          <target state="translated">(왜)에 달려있다</target>
        </trans-unit>
        <trans-unit id="cb329146a0dd0d566b0628744d67936558741ffa" translate="yes" xml:space="preserve">
          <source>description</source>
          <target state="translated">description</target>
        </trans-unit>
        <trans-unit id="77e720c8ee04722d29f0377684b9290260227c50" translate="yes" xml:space="preserve">
          <source>diagnose</source>
          <target state="translated">diagnose</target>
        </trans-unit>
        <trans-unit id="0323d8a2ecccc5952bb87bf6eb1cdce3f95f437c" translate="yes" xml:space="preserve">
          <source>disable it for all commands using the config key &lt;code&gt;process-timeout&lt;/code&gt;,</source>
          <target state="translated">config key &lt;code&gt;process-timeout&lt;/code&gt; 을 사용하여 모든 명령에 대해 비활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="30360370a8ceed6d302be3738394d5d65a38ef86" translate="yes" xml:space="preserve">
          <source>disable it for the current or future invocations of composer using the environment variable &lt;code&gt;COMPOSER_PROCESS_TIMEOUT&lt;/code&gt;,</source>
          <target state="translated">환경 변수 &lt;code&gt;COMPOSER_PROCESS_TIMEOUT&lt;/code&gt; 을 사용하여 작성기의 현재 또는 미래 호출에 대해 사용하지 않도록 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="835dca54c2d0bc785576623bc04e80192b1b03cd" translate="yes" xml:space="preserve">
          <source>disable-tls</source>
          <target state="translated">disable-tls</target>
        </trans-unit>
        <trans-unit id="7a079ff91226ca5573d093a59a116c8a1b21e961" translate="yes" xml:space="preserve">
          <source>discard-changes</source>
          <target state="translated">discard-changes</target>
        </trans-unit>
        <trans-unit id="8de30cd0d8b805c6ce7d572ab55e95c62835bcf7" translate="yes" xml:space="preserve">
          <source>dist or source</source>
          <target state="translated">dist 또는 source</target>
        </trans-unit>
        <trans-unit id="26e52103685e455fa9f1de2ed45e2e3c9c51e67c" translate="yes" xml:space="preserve">
          <source>dump-autoload (dumpautoload)</source>
          <target state="translated">덤프 자동로드 (dumpautoload)</target>
        </trans-unit>
        <trans-unit id="82d50d9042decb175894924272dd3b5a14cd3716" translate="yes" xml:space="preserve">
          <source>events</source>
          <target state="translated">events</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="b43c4b82570e182eb1c74072896167113d2c7345" translate="yes" xml:space="preserve">
          <source>extra</source>
          <target state="translated">extra</target>
        </trans-unit>
        <trans-unit id="4e0326bd72804f4980588cdf39b564b87ac9d9fd" translate="yes" xml:space="preserve">
          <source>for a specific invocation using the &lt;code&gt;--timeout&lt;/code&gt; flag of the &lt;code&gt;run-script&lt;/code&gt; command,</source>
          <target state="translated">&lt;code&gt;run-script&lt;/code&gt; 명령 의 &lt;code&gt;--timeout&lt;/code&gt; 플래그를 사용하는 특정 호출 의 경우</target>
        </trans-unit>
        <trans-unit id="e2d13ab78250e4a61b0a8f46c8cec23d265c3aa7" translate="yes" xml:space="preserve">
          <source>fund</source>
          <target state="translated">fund</target>
        </trans-unit>
        <trans-unit id="7f30b117b3d5029c23758a1ad02426f013163810" translate="yes" xml:space="preserve">
          <source>funding</source>
          <target state="translated">funding</target>
        </trans-unit>
        <trans-unit id="10d809ca7d757eb589c63fb32ca7d6e18a1cdda6" translate="yes" xml:space="preserve">
          <source>github-domains</source>
          <target state="translated">github-domains</target>
        </trans-unit>
        <trans-unit id="93be1ea6d8d97b1d49b836552dd82fc243330485" translate="yes" xml:space="preserve">
          <source>github-expose-hostname</source>
          <target state="translated">github-expose-hostname</target>
        </trans-unit>
        <trans-unit id="240f1e0db9e6aa64cf67b447f223eb951e1b56fa" translate="yes" xml:space="preserve">
          <source>github-oauth</source>
          <target state="translated">github-oauth</target>
        </trans-unit>
        <trans-unit id="51b514d92aeb757b44bd4e12b64d9c9c665692f5" translate="yes" xml:space="preserve">
          <source>github-protocols</source>
          <target state="translated">github-protocols</target>
        </trans-unit>
        <trans-unit id="99893843ef2e5c31a92b8d0a331beda109845774" translate="yes" xml:space="preserve">
          <source>gitlab-domains</source>
          <target state="translated">gitlab-domains</target>
        </trans-unit>
        <trans-unit id="0f20cc7bda31d9862bb4ed1108fcf489f8d935f4" translate="yes" xml:space="preserve">
          <source>gitlab-oauth</source>
          <target state="translated">gitlab-oauth</target>
        </trans-unit>
        <trans-unit id="ae95fb9318ac599e97a7fe080501ec43c70d8ac4" translate="yes" xml:space="preserve">
          <source>gitlab-token</source>
          <target state="translated">gitlab-token</target>
        </trans-unit>
        <trans-unit id="9027cc5a2c1321de60a2d71ccde6229d1152d6d3" translate="yes" xml:space="preserve">
          <source>global</source>
          <target state="translated">global</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="568be0fa2023d1a447e7bd150dda7068ece26898" translate="yes" xml:space="preserve">
          <source>homepage</source>
          <target state="translated">homepage</target>
        </trans-unit>
        <trans-unit id="b7fc6f6ebfb1800b292ce4e9c3a939c315741403" translate="yes" xml:space="preserve">
          <source>htaccess-protect</source>
          <target state="translated">htaccess-protect</target>
        </trans-unit>
        <trans-unit id="1f5c1190f82d07cfa4b34a72f44169a315284ff7" translate="yes" xml:space="preserve">
          <source>http-basic</source>
          <target state="translated">http-basic</target>
        </trans-unit>
        <trans-unit id="01b09fab98ba0a18dbfbc9091843663f4907f962" translate="yes" xml:space="preserve">
          <source>http_proxy or HTTP_PROXY</source>
          <target state="translated">http_proxy 또는 HTTP_PROXY</target>
        </trans-unit>
        <trans-unit id="934f9d916621b15ed7c4e99da5975c5f8461bf42" translate="yes" xml:space="preserve">
          <source>igorw/event-source</source>
          <target state="translated">igorw/event-source</target>
        </trans-unit>
        <trans-unit id="ee3300ddaa6621b0638a0e528a0677ff44f88b1d" translate="yes" xml:space="preserve">
          <source>include-path</source>
          <target state="translated">include-path</target>
        </trans-unit>
        <trans-unit id="fd62812fbd9ec4c7f99aa4f6253fead2388eb238" translate="yes" xml:space="preserve">
          <source>init</source>
          <target state="translated">init</target>
        </trans-unit>
        <trans-unit id="d16df61f06b493e5a4445e4f3667bbb6f89e8b3f" translate="yes" xml:space="preserve">
          <source>init: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt;&lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">초기화 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt; &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c17801265656bbca87203f4be43a089a06524ed4" translate="yes" xml:space="preserve">
          <source>install / i</source>
          <target state="translated">설치 / i</target>
        </trans-unit>
        <trans-unit id="88fc09e54b17679b0028556344b50c9fe169bdb5" translate="yes" xml:space="preserve">
          <source>keywords</source>
          <target state="translated">keywords</target>
        </trans-unit>
        <trans-unit id="23457129b871d690a3b4d86a51ded0c27ba29a9c" translate="yes" xml:space="preserve">
          <source>license</source>
          <target state="translated">license</target>
        </trans-unit>
        <trans-unit id="a39ea9c72a98de10375b0a35c2313971d6650fef" translate="yes" xml:space="preserve">
          <source>licenses</source>
          <target state="translated">licenses</target>
        </trans-unit>
        <trans-unit id="e117797422d35ce52f036963c7e9603e9955b5c7" translate="yes" xml:space="preserve">
          <source>lock</source>
          <target state="translated">lock</target>
        </trans-unit>
        <trans-unit id="42f7b07db92a254d70b2763520ccb302387e6d6e" translate="yes" xml:space="preserve">
          <source>logging</source>
          <target state="translated">logging</target>
        </trans-unit>
        <trans-unit id="c767fb4fa84edd9798347da2310e0dcb0cd0f193" translate="yes" xml:space="preserve">
          <source>minimum-stability</source>
          <target state="translated">minimum-stability</target>
        </trans-unit>
        <trans-unit id="c10ee804f3232c93d60adf95dd9590ea5c5f599d" translate="yes" xml:space="preserve">
          <source>minimum-stability (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">최소 안정성 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f2ddd99b797a2496337b5413b08e00153cd8c85a" translate="yes" xml:space="preserve">
          <source>monolog/monolog</source>
          <target state="translated">monolog/monolog</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="fd1286353570c5703799ba76999323b7c7447b06" translate="yes" xml:space="preserve">
          <source>no</source>
          <target state="translated">no</target>
        </trans-unit>
        <trans-unit id="fc074fd662296d860a152a292b4d7b6b312e8ce8" translate="yes" xml:space="preserve">
          <source>no_proxy or NO_PROXY</source>
          <target state="translated">no_proxy 또는 NO_PROXY</target>
        </trans-unit>
        <trans-unit id="bf6abd628c428e1da9dfce49bbba13496c0471e1" translate="yes" xml:space="preserve">
          <source>non-feature-branches</source>
          <target state="translated">non-feature-branches</target>
        </trans-unit>
        <trans-unit id="b15cd836785e50729f71533a80322f43daad079b" translate="yes" xml:space="preserve">
          <source>notify-batch</source>
          <target state="translated">notify-batch</target>
        </trans-unit>
        <trans-unit id="eaa9a3f45f81a52135877c3bd595d503a00bdcf5" translate="yes" xml:space="preserve">
          <source>notify-on-install</source>
          <target state="translated">notify-on-install</target>
        </trans-unit>
        <trans-unit id="789ac37f7e1ffba3c8b73f8c8318762a9ded2b3a" translate="yes" xml:space="preserve">
          <source>optimize-autoloader</source>
          <target state="translated">optimize-autoloader</target>
        </trans-unit>
        <trans-unit id="b85a5176d55923c3a5c736b9766e15c5b7392237" translate="yes" xml:space="preserve">
          <source>outdated</source>
          <target state="translated">outdated</target>
        </trans-unit>
        <trans-unit id="d8ae088aee969371bf4ed994e9106b5d3e799c35" translate="yes" xml:space="preserve">
          <source>packages</source>
          <target state="translated">packages</target>
        </trans-unit>
        <trans-unit id="1a421f6a0cb3266219ba462e3e3674b69b6dd95f" translate="yes" xml:space="preserve">
          <source>phpDocumentor features Templates that need to be installed outside of the default /vendor folder structure. As such they have chosen to adopt the &lt;code&gt;phpdocumentor-template&lt;/code&gt;&lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; and create a plugin providing the Custom Installer to send these templates to the correct folder.</source>
          <target state="translated">phpDocumentor 기능 기본 / vendor 폴더 구조 외부에 설치해야하는 템플릿. 따라서 그들은 &lt;code&gt;phpdocumentor-template&lt;/code&gt; &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 을 채택 하고 사용자 정의 설치 프로그램을 제공하는 플러그인을 생성하여 이러한 템플릿을 올바른 폴더로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3c72abbe626f27d174d80fc434b851cce7bde6d3" translate="yes" xml:space="preserve">
          <source>platform</source>
          <target state="translated">platform</target>
        </trans-unit>
        <trans-unit id="c723aaa0af24c3f260d09454e5dfc220852ca6a1" translate="yes" xml:space="preserve">
          <source>platform-check</source>
          <target state="translated">platform-check</target>
        </trans-unit>
        <trans-unit id="e5ef98a6322bd9aa7b394736681d180daca6bc36" translate="yes" xml:space="preserve">
          <source>plugin-modifies-downloads</source>
          <target state="translated">plugin-modifies-downloads</target>
        </trans-unit>
        <trans-unit id="5725848eeb332ef9f1d05ba3f1114d3026d6b3c6" translate="yes" xml:space="preserve">
          <source>post-file-download: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/PostFileDownloadEvent.html&quot;&gt;&lt;code&gt;Composer\Plugin\PostFileDownloadEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">파일 다운로드 후 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/PostFileDownloadEvent.html&quot;&gt; &lt;code&gt;Composer\Plugin\PostFileDownloadEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="91744c5e0ba404bce1bc3ed8b0be3ab1c518fbd3" translate="yes" xml:space="preserve">
          <source>pre-file-download: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/PreFileDownloadEvent.html&quot;&gt;&lt;code&gt;Composer\Plugin\PreFileDownloadEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">사전 파일 다운로드 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/PreFileDownloadEvent.html&quot;&gt; &lt;code&gt;Composer\Plugin\PreFileDownloadEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="473e34a40b0652558a7fb8f0df1beb0e67394b6b" translate="yes" xml:space="preserve">
          <source>prefer-stable</source>
          <target state="translated">prefer-stable</target>
        </trans-unit>
        <trans-unit id="564b0d4e5c910c11ec4a35aa8d5bd214fde5433b" translate="yes" xml:space="preserve">
          <source>prefer-stable (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">선호하는 안정 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="6513ee15882452ffb58bacbff36ed8d5723e7512" translate="yes" xml:space="preserve">
          <source>preferred-install</source>
          <target state="translated">preferred-install</target>
        </trans-unit>
        <trans-unit id="e8d7fd617b9d58831b69cea13695eb1c21519429" translate="yes" xml:space="preserve">
          <source>prefix-url</source>
          <target state="translated">prefix-url</target>
        </trans-unit>
        <trans-unit id="6b6ad03a3d1698f720295f07865869facecf773b" translate="yes" xml:space="preserve">
          <source>prepend-autoloader</source>
          <target state="translated">prepend-autoloader</target>
        </trans-unit>
        <trans-unit id="959f7c379f50b312a3e08b4bc677d39971fe3881" translate="yes" xml:space="preserve">
          <source>proc_open(): failed to open stream errors (Windows)</source>
          <target state="translated">proc_open () : 스트림 오류 열기 실패 (Windows)</target>
        </trans-unit>
        <trans-unit id="71a15af606715185b3c076b1de3a0f2392d64da5" translate="yes" xml:space="preserve">
          <source>proc_open(): fork failed errors</source>
          <target state="translated">proc_open () : 포크 실패 오류</target>
        </trans-unit>
        <trans-unit id="6711099b0aec6f81f966f94566884241b2409db5" translate="yes" xml:space="preserve">
          <source>process-timeout</source>
          <target state="translated">process-timeout</target>
        </trans-unit>
        <trans-unit id="1d02d01463f1c3c8ad149c2ded60c71233199d86" translate="yes" xml:space="preserve">
          <source>prohibits (why-not)</source>
          <target state="translated">금지 (왜)</target>
        </trans-unit>
        <trans-unit id="4ab69d1f449d0c975c87c5a03c3f2c332a210aaa" translate="yes" xml:space="preserve">
          <source>provide</source>
          <target state="translated">provide</target>
        </trans-unit>
        <trans-unit id="55b73469d9cdff569e2d9aa9ac33815bdeb7ff4c" translate="yes" xml:space="preserve">
          <source>provider-includes and providers-url</source>
          <target state="translated">공급자 포함 및 공급자 URL</target>
        </trans-unit>
        <trans-unit id="f78a71af8bbf8cc2f6f313549d4da14bd3771359" translate="yes" xml:space="preserve">
          <source>readme</source>
          <target state="translated">readme</target>
        </trans-unit>
        <trans-unit id="b840fc02d524045429941cc15f59e41cb7be6c52" translate="yes" xml:space="preserve">
          <source>redis</source>
          <target state="translated">redis</target>
        </trans-unit>
        <trans-unit id="db99845855b2ecbfecca9a095062b96c3e27703f" translate="yes" xml:space="preserve">
          <source>remove</source>
          <target state="translated">remove</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="ddbdf83535a3f4e3dcfd5ad43c56a0adcbb4a9b1" translate="yes" xml:space="preserve">
          <source>repositories</source>
          <target state="translated">repositories</target>
        </trans-unit>
        <trans-unit id="a5897fe3a13ff0d676f965e88fabd9840e3e1641" translate="yes" xml:space="preserve">
          <source>repositories (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">리포지토리 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="623e76c36aa2a886542011e28412cc761d7ceb01" translate="yes" xml:space="preserve">
          <source>require</source>
          <target state="translated">require</target>
        </trans-unit>
        <trans-unit id="ee08b76b89844c734f12d32265dedf7e565f4532" translate="yes" xml:space="preserve">
          <source>require-dev (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">require-dev ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="e7383e16bf1ba8f04f8e6f0a50106eb692433ebe" translate="yes" xml:space="preserve">
          <source>run-script</source>
          <target state="translated">run-script</target>
        </trans-unit>
        <trans-unit id="16728d18790deb58b3b8c1df74f06e536b532695" translate="yes" xml:space="preserve">
          <source>scripts</source>
          <target state="translated">scripts</target>
        </trans-unit>
        <trans-unit id="73c546e03e8d9cbf67ef134ea87bfe1ba28183ee" translate="yes" xml:space="preserve">
          <source>scripts (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">스크립트 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3559d7accf00360971961ca18989adc0614089c0" translate="yes" xml:space="preserve">
          <source>search</source>
          <target state="translated">search</target>
        </trans-unit>
        <trans-unit id="82d17e753f91d3265521b6398523031c0151b29b" translate="yes" xml:space="preserve">
          <source>secure-http</source>
          <target state="translated">secure-http</target>
        </trans-unit>
        <trans-unit id="a82db627112776a7fd62632195cf32a9a0f07474" translate="yes" xml:space="preserve">
          <source>self-update (selfupdate)</source>
          <target state="translated">자체 업데이트 (selfupdate)</target>
        </trans-unit>
        <trans-unit id="9fb29051f2217270a7b253a39f820310d85a78f0" translate="yes" xml:space="preserve">
          <source>show</source>
          <target state="translated">show</target>
        </trans-unit>
        <trans-unit id="433ecc2121668b2118424ea378bd0a61d2910c01" translate="yes" xml:space="preserve">
          <source>sort-packages</source>
          <target state="translated">sort-packages</target>
        </trans-unit>
        <trans-unit id="48a3661d846478fa991a825ebd10b78671444b5b" translate="yes" xml:space="preserve">
          <source>status</source>
          <target state="translated">status</target>
        </trans-unit>
        <trans-unit id="eb6fe53aa9be92a7647afcce3c5b531a63e1ba0d" translate="yes" xml:space="preserve">
          <source>store-auths</source>
          <target state="translated">store-auths</target>
        </trans-unit>
        <trans-unit id="2e3c643ac64dc53ab14a99ef3cb2e435752e196b" translate="yes" xml:space="preserve">
          <source>stream options</source>
          <target state="translated">스트림 옵션</target>
        </trans-unit>
        <trans-unit id="fd0a4950be7bdd9f8433220cd71f792adc9bacbe" translate="yes" xml:space="preserve">
          <source>suggest</source>
          <target state="translated">suggest</target>
        </trans-unit>
        <trans-unit id="3e829ab18fae1f2e02cebc9112af2ad19bb88b78" translate="yes" xml:space="preserve">
          <source>suggests</source>
          <target state="translated">suggests</target>
        </trans-unit>
        <trans-unit id="5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb" translate="yes" xml:space="preserve">
          <source>support</source>
          <target state="translated">support</target>
        </trans-unit>
        <trans-unit id="f6cefe460cd3a4027fc0e073d346c46039fa16fc" translate="yes" xml:space="preserve">
          <source>target-dir</source>
          <target state="translated">target-dir</target>
        </trans-unit>
        <trans-unit id="12d2f36657fd573ff3c6c4e79a585fb94314777b" translate="yes" xml:space="preserve">
          <source>templating</source>
          <target state="translated">templating</target>
        </trans-unit>
        <trans-unit id="9602df2b84b8a3f13a3de1b8029067b58fea71ce" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;../04-schema.md#extra&quot;&gt;extra&lt;/a&gt; attribute must contain an element &lt;code&gt;class&lt;/code&gt; defining the class name of the plugin (including namespace). If a package contains multiple plugins this can be array of class names.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#extra&quot;&gt;추가&lt;/a&gt; 속성은 요소의 메시지 있어야합니다 &lt;code&gt;class&lt;/code&gt; (네임 스페이스 포함) 플러그인의 클래스 이름을 정의합니다. 패키지에 여러 개의 플러그인이 포함되어 있으면 클래스 이름 배열이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a43dbecf2a05530c720fe393365dfccfc117b03" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; attribute must be &lt;code&gt;composer-plugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#type&quot;&gt;유형의&lt;/a&gt; 속성은해야 &lt;code&gt;composer-plugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00b638d9feda5f451b7e34767d86b4655ad7d2a1" translate="yes" xml:space="preserve">
          <source>the package file: composer.json</source>
          <target state="translated">패키지 파일 : composer.json</target>
        </trans-unit>
        <trans-unit id="714eea0f4c980736bde0065fe73f573487f08e3a" translate="yes" xml:space="preserve">
          <source>time</source>
          <target state="translated">time</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="4d8b74c810b03fe6071ccc079fb8099f73703e85" translate="yes" xml:space="preserve">
          <source>update / u</source>
          <target state="translated">업데이트 / U</target>
        </trans-unit>
        <trans-unit id="bca7cf7060de3870242d6195d66a4a00ca1d5d0d" translate="yes" xml:space="preserve">
          <source>use-github-api</source>
          <target state="translated">use-github-api</target>
        </trans-unit>
        <trans-unit id="df73151de4c111e43b53c3b40ea694ad9d6099ef" translate="yes" xml:space="preserve">
          <source>use-include-path</source>
          <target state="translated">use-include-path</target>
        </trans-unit>
        <trans-unit id="00c485e3ecdfd52691bbf649a917e7b69a67d27d" translate="yes" xml:space="preserve">
          <source>using a static helper for specific scripts.</source>
          <target state="translated">특정 스크립트에 정적 도우미 사용</target>
        </trans-unit>
        <trans-unit id="142e27c93a3712c33dafcf729bd2b0c0a590f46e" translate="yes" xml:space="preserve">
          <source>v2.0.4-p1</source>
          <target state="translated">v2.0.4-p1</target>
        </trans-unit>
        <trans-unit id="e204d28a2874f6123747650d3e4003d4357d75eb" translate="yes" xml:space="preserve">
          <source>validate</source>
          <target state="translated">validate</target>
        </trans-unit>
        <trans-unit id="101d465db1ef254ef87db52c31443088f5700194" translate="yes" xml:space="preserve">
          <source>vendor-dir</source>
          <target state="translated">vendor-dir</target>
        </trans-unit>
        <trans-unit id="c692273deb2772da307ffe37041fef77bf4baa97" translate="yes" xml:space="preserve">
          <source>version</source>
          <target state="translated">version</target>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
