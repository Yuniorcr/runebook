<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="composer">
    <body>
      <group id="composer">
        <trans-unit id="b2b50340cec6e7494bab2a7c9baceb0ae86d69c9" translate="yes" xml:space="preserve">
          <source>The main repository type is the &lt;code&gt;composer&lt;/code&gt; repository. It uses a single &lt;code&gt;packages.json&lt;/code&gt; file that contains all of the package metadata.</source>
          <target state="translated">기본 저장소 유형은 &lt;code&gt;composer&lt;/code&gt; 저장소입니다. 모든 패키지 메타 데이터가 포함 된 단일 &lt;code&gt;packages.json&lt;/code&gt; 파일을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="b01653678cda20fc0c117160c90d6002cd325fef" translate="yes" xml:space="preserve">
          <source>The most important guidelines are described as follows:</source>
          <target state="translated">가장 중요한 지침은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="930e60a16608d07722acb1ffaed843cdbd3adf2d" translate="yes" xml:space="preserve">
          <source>The name can contain any character, including white spaces, and it's case insensitive (&lt;code&gt;foo/bar&lt;/code&gt; and &lt;code&gt;Foo/Bar&lt;/code&gt; are considered the same package). In order to simplify its installation, it's recommended to define a short and lowercase name that doesn't include non-alphanumeric characters or white spaces.</source>
          <target state="translated">이름은 공백을 포함하여 모든 문자를 포함 할 수 있으며 대소 문자를 구분하지 않습니다 ( &lt;code&gt;foo/bar&lt;/code&gt; 및 &lt;code&gt;Foo/Bar&lt;/code&gt; 는 동일한 패키지로 간주 됨). 설치를 단순화하려면 영숫자가 아닌 문자 나 공백을 포함하지 않는 짧은 소문자 이름을 정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="849e1cb65b29df6c38c3d54f0b1a2aced5623dfc" translate="yes" xml:space="preserve">
          <source>The name is not needed in this case, since we don't want to publish the blog as a library. It is added here to clarify which &lt;code&gt;composer.json&lt;/code&gt; is being described.</source>
          <target state="translated">이 경우에는 블로그를 라이브러리로 게시하지 않기 때문에이 이름은 필요하지 않습니다. 설명 되어있는 &lt;code&gt;composer.json&lt;/code&gt; 을 명확하게하기 위해 여기에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="21a28c12c78a7a980608fbf55ebe4bc3f11426f8" translate="yes" xml:space="preserve">
          <source>The name of the package. It consists of vendor name and project name, separated by &lt;code&gt;/&lt;/code&gt;. Examples:</source>
          <target state="translated">패키지 이름 벤더 이름과 프로젝트 이름으로 구성되며 &lt;code&gt;/&lt;/code&gt; 로 구분됩니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="9e83e0a707056f1f3aed4b1277097820936e9e4f" translate="yes" xml:space="preserve">
          <source>The only issue is it does not keep track of autoload misses (i.e. when it can not find a given class), so those fallback to PSR-4 rules and can still result in slow filesystem checks. To solve this issue two Level 2 optimization options exist, and you can decide to enable either if you have a lot of class_exists checks that are done for classes that do not exist in your project.</source>
          <target state="translated">유일한 문제는 자동로드 누락을 추적하지 않기 때문에 (예 : 주어진 클래스를 찾을 수없는 경우) PSR-4 규칙으로 대체되어 파일 시스템 검사 속도가 느려질 수 있다는 것입니다. 이 문제를 해결하기 위해 두 가지 레벨 2 최적화 옵션이 존재하며 프로젝트에 존재하지 않는 클래스에 대해 수행되는 class_exists 검사가 많은 경우 사용하도록 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16c62e2def03ee209edb02b97829ea111a8582bd" translate="yes" xml:space="preserve">
          <source>The only required field is &lt;code&gt;packages&lt;/code&gt;. The JSON structure is as follows:</source>
          <target state="translated">필수 필드는 &lt;code&gt;packages&lt;/code&gt; 입니다. JSON 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0288cb9d7001bf0c4de735aa730ff40b8463658" translate="yes" xml:space="preserve">
          <source>The only requirement is the installation of SSH keys for a git client.</source>
          <target state="translated">유일한 요구 사항은 git 클라이언트를위한 SSH 키 설치입니다.</target>
        </trans-unit>
        <trans-unit id="0b60cb58c1e534bf73daea4446a36c691016fbdf" translate="yes" xml:space="preserve">
          <source>The other thing that you may have noticed is that we did not specify a package repository for &lt;code&gt;monolog/monolog&lt;/code&gt;. How did that work? The answer is Packagist.</source>
          <target state="translated">주목 &lt;code&gt;monolog/monolog&lt;/code&gt; 다른 것은 monolog / monolog에 대한 패키지 저장소를 지정하지 않았다는 것 입니다. 어떻게 작동 했습니까? 답은 Packagist입니다.</target>
        </trans-unit>
        <trans-unit id="5c0ffd52ad63aba62f31f23534ea0ba800471d36" translate="yes" xml:space="preserve">
          <source>The package file is the same as any other package file but with the following requirements:</source>
          <target state="translated">패키지 파일은 다른 패키지 파일과 동일하지만 다음 요구 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cee130cdcde39fdbc52dcdaddb645cc6e97568d" translate="yes" xml:space="preserve">
          <source>The package name consists of a vendor name and the project's name. Often these will be identical - the vendor name only exists to prevent naming clashes. For example, it would allow two different people to create a library named &lt;code&gt;json&lt;/code&gt;. One might be named &lt;code&gt;igorw/json&lt;/code&gt; while the other might be &lt;code&gt;seldaek/json&lt;/code&gt;.</source>
          <target state="translated">패키지 이름은 공급 업체 이름과 프로젝트 이름으로 구성됩니다. 벤더 이름은 이름 충돌을 방지하기 위해 존재하는 경우가 종종 있습니다. 예를 들어 두 사람이 &lt;code&gt;json&lt;/code&gt; 이라는 라이브러리를 만들 수 있습니다 . 하나는 이름이 될 수 &lt;code&gt;igorw/json&lt;/code&gt; , 다른 하나는 될 수있는 반면 &lt;code&gt;seldaek/json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba596824f1c9acc03aaff3d0c5e89492d0cd2855" translate="yes" xml:space="preserve">
          <source>The problem however is in production you generally want things to happen as fast as possible, as you can simply rebuild the configuration every time you deploy and new classes do not appear at random between deploys.</source>
          <target state="translated">그러나 프로덕션 환경에서는 배포 할 때마다 단순히 구성을 다시 빌드 할 수 있고 배포간에 새 클래스가 무작위로 표시되지 않으므로 일반적으로 가능한 빨리 작업을 수행하려고합니다.</target>
        </trans-unit>
        <trans-unit id="c87a1f6667b6fbfc7ca6e4a469a9bfb7e7b3f98e" translate="yes" xml:space="preserve">
          <source>The reason for this is a SSH Bug: &lt;a href=&quot;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&quot;&gt;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&lt;/a&gt;</source>
          <target state="translated">그 이유는 SSH 버그입니다. &lt;a href=&quot;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&quot;&gt;https://bugzilla.mindrot.org/show_bug.cgi?id=1988&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e74616579e50eeeb9751aedeec38881aa124c977" translate="yes" xml:space="preserve">
          <source>The recommended notation for the most common licenses is (alphabetical):</source>
          <target state="translated">가장 일반적인 라이센스에 대한 권장 표기법은 다음과 같습니다 (알파벳).</target>
        </trans-unit>
        <trans-unit id="de24bbb3808896de508a6007a1810c68fd60abf9" translate="yes" xml:space="preserve">
          <source>The required version of the &lt;code&gt;composer-plugin-api&lt;/code&gt; follows the same &lt;a href=&quot;../01-basic-usage.md#package-versions&quot;&gt;rules&lt;/a&gt; as a normal package's.</source>
          <target state="translated">&lt;code&gt;composer-plugin-api&lt;/code&gt; 의 필수 버전은 동일한 &lt;a href=&quot;../01-basic-usage.md#package-versions&quot;&gt;규칙을&lt;/a&gt; 따릅니다. 일반 패키지 을 .</target>
        </trans-unit>
        <trans-unit id="ead450eac9213288d85fbad78ce563549cc55707" translate="yes" xml:space="preserve">
          <source>The root JSON object in &lt;code&gt;composer.json&lt;/code&gt; should have a property called &lt;code&gt;&quot;scripts&quot;&lt;/code&gt;, which contains pairs of named events and each event's corresponding scripts. An event's scripts can be defined as either a string (only for a single script) or an array (for single or multiple scripts.)</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 의 루트 JSON 객체에는 &lt;code&gt;&quot;scripts&quot;&lt;/code&gt; 라는 속성이 있어야합니다. 에는 이름이 지정된 이벤트 쌍과 각 이벤트의 해당 스크립트가 포함 된 . 이벤트 스크립트는 문자열 (단일 스크립트의 경우에만) 또는 배열 (단일 또는 여러 스크립트의 경우)로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdcbfae32d396cb43f2cd781106c9a0b37fc97d7" translate="yes" xml:space="preserve">
          <source>The root package is the package defined by the &lt;code&gt;composer.json&lt;/code&gt; at the root of your project. It is the main &lt;code&gt;composer.json&lt;/code&gt; that defines your project requirements.</source>
          <target state="translated">루트 패키지는 프로젝트 루트에서 &lt;code&gt;composer.json&lt;/code&gt; 에 의해 정의 된 패키지입니다 . 주요 &lt;code&gt;composer.json&lt;/code&gt; 프로젝트 요구 사항을 정의 입니다.</target>
        </trans-unit>
        <trans-unit id="0d27a084f3c58557e3e5085f03343451a07fd268" translate="yes" xml:space="preserve">
          <source>The search command allows you to search through the current project's package repositories. Usually this will be packagist. You simply pass it the terms you want to search for.</source>
          <target state="translated">검색 명령을 사용하면 현재 프로젝트의 패키지 리포지토리를 검색 할 수 있습니다. 보통 이것은 packagist입니다. 검색하려는 용어를 전달하면됩니다.</target>
        </trans-unit>
        <trans-unit id="07b2379a00bfbef1eb7b642be0c8481fce4a3906" translate="yes" xml:space="preserve">
          <source>The simplest way to provide your credentials is providing your set of credentials inline with the repository specification such as:</source>
          <target state="translated">신임 정보를 제공하는 가장 간단한 방법은 다음과 같은 저장소 스펙과 함께 신임 정보 세트를 제공하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1ba576ae3a9813a0abcc5f206da578a7509b0735" translate="yes" xml:space="preserve">
          <source>The storage can be done either globally in the &lt;code&gt;COMPOSER_HOME/auth.json&lt;/code&gt; file (&lt;code&gt;COMPOSER_HOME&lt;/code&gt; defaults to &lt;code&gt;~/.composer&lt;/code&gt; or &lt;code&gt;%APPDATA%/Composer&lt;/code&gt; on Windows) or also in the project directory directly sitting besides your composer.json.</source>
          <target state="translated">저장은 &lt;code&gt;COMPOSER_HOME/auth.json&lt;/code&gt; 파일 ( &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 의 기본값은 &lt;code&gt;~/.composer&lt;/code&gt; 또는 Windows의 &lt;code&gt;%APPDATA%/Composer&lt;/code&gt; 설정 됨) 또는 composer.json 바로 옆에있는 프로젝트 디렉토리에서 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3786eab82b9ee0f5de6dcefa0f28d49776190b9f" translate="yes" xml:space="preserve">
          <source>The third way if you want to pre-configure it is via an &lt;code&gt;auth.json&lt;/code&gt; file located in your &lt;code&gt;COMPOSER_HOME&lt;/code&gt; or besides your &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">사전 구성하려는 세 번째 방법은 &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 또는 &lt;code&gt;composer.json&lt;/code&gt; 옆에 있는 &lt;code&gt;auth.json&lt;/code&gt; 파일 을 사용하는 것입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="9b6194f3afae6f2fec456c59d1ca44bcc1adfe0c" translate="yes" xml:space="preserve">
          <source>The type of the package. It defaults to &lt;code&gt;library&lt;/code&gt;.</source>
          <target state="translated">패키지의 유형입니다. 기본적으로 &lt;code&gt;library&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a6bfcf684e60dd5d9c5f5bcf4f2c4807e77e41f3" translate="yes" xml:space="preserve">
          <source>The version field will contain the normalized representation of the version number.</source>
          <target state="translated">버전 필드에는 버전 번호의 정규화 된 표현이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="759f1b8c12e0341f925afc594e02cedcaa6edd3b" translate="yes" xml:space="preserve">
          <source>The version of the package. In most cases this is not required and should be omitted (see below).</source>
          <target state="translated">패키지 버전. 대부분의 경우 이것은 필요하지 않으므로 생략해야합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="c81b86dba2727cfdc2b29ee77c508d88ad12aa77" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;composer show -s&lt;/code&gt; will give you &lt;code&gt;versions : * dev-latest-testing&lt;/code&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;composer show -s&lt;/code&gt; 는 다음과 같은 &lt;code&gt;versions : * dev-latest-testing&lt;/code&gt; 을 제공합니다 . * dev-latest-testing .</target>
        </trans-unit>
        <trans-unit id="b092304faf36cff4452c050742f05ab3dc1a2890" translate="yes" xml:space="preserve">
          <source>Then, to add the package &lt;code&gt;my/package&lt;/code&gt; as a dependency, in your &lt;code&gt;apps/my-app/composer.json&lt;/code&gt; file, you can use the following configuration:</source>
          <target state="translated">그런 다음, &lt;code&gt;my/package&lt;/code&gt; 패키지 를 종속성 으로 추가하려면 &lt;code&gt;apps/my-app/composer.json&lt;/code&gt; 파일에서 다음 구성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2caac88b27f73705cd4b2896e5a18514677a502c" translate="yes" xml:space="preserve">
          <source>There are a few options to enable this:</source>
          <target state="translated">이를 가능하게하는 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e82b97b9e6d27e56f324e53ecc6647a8c47d70e" translate="yes" xml:space="preserve">
          <source>There are a few tools that can help you create a &lt;code&gt;composer&lt;/code&gt; repository.</source>
          <target state="translated">&lt;code&gt;composer&lt;/code&gt; 저장소 를 작성하는 데 도움이되는 몇 가지 도구가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69b0e43cefa9085ad5aa1a739c43bbe536ecc32a" translate="yes" xml:space="preserve">
          <source>There are a few use cases for this. The most common one is maintaining your own fork of a third party library. If you are using a certain library for your project and you decide to change something in the library, you will want your project to use the patched version. If the library is on GitHub (this is the case most of the time), you can simply fork it there and push your changes to your fork. After that you update the project's &lt;code&gt;composer.json&lt;/code&gt;. All you have to do is add your fork as a repository and update the version constraint to point to your custom branch. In &lt;code&gt;composer.json&lt;/code&gt;, you should prefix your custom branch name with &lt;code&gt;&quot;dev-&quot;&lt;/code&gt;. For version constraint naming conventions see &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; for more information.</source>
          <target state="translated">이에 대한 몇 가지 사용 사례가 있습니다. 가장 일반적인 것은 타사 라이브러리의 포크를 유지 관리하는 것입니다. 프로젝트에 특정 라이브러리를 사용하고 라이브러리에서 무언가를 변경하기로 결정한 경우, 프로젝트가 패치 된 버전을 사용하도록 할 것입니다. 라이브러리가 GitHub에있는 경우 (대부분의 경우), 단순히 라이브러리를 포크하여 변경 사항을 포크로 푸시 할 수 있습니다. 그런 다음 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 을 업데이트하십시오 . 포크를 리포지토리로 추가하고 사용자 지정 분기를 가리 키도록 버전 제약 조건을 업데이트하기 만하면됩니다. 에서 &lt;code&gt;composer.json&lt;/code&gt; , 당신은 귀하의 사용자 정의 지점 이름 앞에해야한다 &lt;code&gt;&quot;dev-&quot;&lt;/code&gt; . 버전 제약 조건 명명 규칙은 &lt;a href=&quot;02-libraries.md&quot;&gt;라이브러리를&lt;/a&gt; 참조하십시오. 대한 자세한 내용 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2510892334769e69dac24f517418c47cbf7273d5" translate="yes" xml:space="preserve">
          <source>There are in short, two ways to install Composer. Locally as part of your project, or globally as a system wide executable.</source>
          <target state="translated">Composer를 설치하는 두 가지 방법이 있습니다. 프로젝트의 일부 또는 로컬 시스템 전체 실행 파일</target>
        </trans-unit>
        <trans-unit id="e311c75c677569dd2679ee1ac2316e004cb296c7" translate="yes" xml:space="preserve">
          <source>There are many people using Composer already, and quite a few of them are contributing.</source>
          <target state="translated">이미 Composer를 사용하는 사람이 많으며 상당수가 기여하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ef7a17bcf1322d5df05ace80c02af5fff7d59b7" translate="yes" xml:space="preserve">
          <source>There are no real trade-offs with this method. It should always be enabled in production.</source>
          <target state="translated">이 방법과의 실질적인 상충 관계는 없습니다. 프로덕션 환경에서는 항상 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="71b78b7b768e6a18ce5d199234ffc433eae124f8" translate="yes" xml:space="preserve">
          <source>There are several applications for this:</source>
          <target state="translated">이를위한 몇 가지 응용 프로그램이 있습니다.</target>
        </trans-unit>
        <trans-unit id="146d9f32104343cdde0c248efaa6c6eab0c03fb4" translate="yes" xml:space="preserve">
          <source>There are some cases, when there is no ability to have one of the previously mentioned repository types online, even the VCS one. Typical example could be cross-organisation library exchange through built artifacts. Of course, most of the times they are private. To simplify maintenance, one can simply use a repository of type &lt;code&gt;artifact&lt;/code&gt; with a folder containing ZIP archives of those private packages:</source>
          <target state="translated">앞에서 언급 한 리포지토리 유형 중 하나를 온라인으로 보유 할 수있는 능력이 없거나 VCS를 포함하는 경우도 있습니다. 일반적인 예는 빌드 된 아티팩트를 통한 조직 간 라이브러리 교환 일 수 있습니다. 물론, 대부분의 경우 그들은 사적입니다. 유지 보수를 단순화하기 위해 &lt;code&gt;artifact&lt;/code&gt; 유형의 저장소를 간단히 사용할 수 있습니다. 개인 패키지의 ZIP 아카이브가 포함 된 폴더에 됩니다.</target>
        </trans-unit>
        <trans-unit id="b9382ece759da34331e7d022e1aa4b31eaf1289b" translate="yes" xml:space="preserve">
          <source>There is no simple work-around to this limitation. It is therefore strongly recommended that you do not use it.</source>
          <target state="translated">이 제한에 대한 간단한 해결 방법은 없습니다. 따라서 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e1bf0ee9d75d3527b40d7428cc9cbb253ae2c7ea" translate="yes" xml:space="preserve">
          <source>There's one more thing that will affect which files are checked out of a library's VCS and added to your project: Composer allows you to specify stability constraints to limit which tags are considered valid. In the above example, note that the library released a beta and two release candidates for version &lt;code&gt;1.1&lt;/code&gt; before the final official release. To receive these versions when running &lt;code&gt;composer install&lt;/code&gt; or &lt;code&gt;composer update&lt;/code&gt;, we have to explicitly tell Composer that we are ok with release candidates and beta releases (and alpha releases, if we want those). This can be done using either a project-wide &lt;code&gt;minimum-stability&lt;/code&gt; value in &lt;code&gt;composer.json&lt;/code&gt; or using &quot;stability flags&quot; in version constraints. Read more on the &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;schema page&lt;/a&gt;.</source>
          <target state="translated">라이브러리의 VCS에서 체크 아웃되어 프로젝트에 추가되는 파일에 영향을 미치는 또 다른 사항이 있습니다. Composer를 사용하면 어떤 태그가 유효한 것으로 간주되는지 제한하기 위해 안정성 제약 조건을 지정할 수 있습니다. 위의 예에서, 라이브러리 는 최종 공식 릴리스 이전 에 버전 &lt;code&gt;1.1&lt;/code&gt; 에 대한 베타 및 2 개의 릴리스 후보를 릴리스했습니다. &lt;code&gt;composer install&lt;/code&gt; 또는 &lt;code&gt;composer update&lt;/code&gt; 를 실행할 때 이러한 버전을 받으려면 릴리스 후보 및 베타 릴리스 (및 원하는 경우 알파 릴리스)에 대해 Composer에 명시 적으로 명시해야합니다. 이 작업 은 &lt;code&gt;composer.json&lt;/code&gt; 의 프로젝트 전체 &lt;code&gt;minimum-stability&lt;/code&gt; 값 또는 버전 제약 조건의 &quot;안정성 플래그&quot;를 사용하여 수행 할 수 있습니다 . 에 대한 자세한 내용&lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;스키마 페이지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2b031101637482ed2f5237dbf7cc920e749bcbfa" translate="yes" xml:space="preserve">
          <source>Therefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.</source>
          <target state="translated">따라서 단위 테스트를위한 전용 경로를 사용하여 autoload-dev 섹션에 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e796a89df7b8621655961a7bdef784f391a63353" translate="yes" xml:space="preserve">
          <source>These fields are optional. You probably don't need them for your own custom repository.</source>
          <target state="translated">이 필드는 선택 사항입니다. 사용자 정의 저장소에는 필요하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1db040d5c72d57c336ed3f20f9d2be23996a417" translate="yes" xml:space="preserve">
          <source>This brings us to the second scenario. If there is already a &lt;code&gt;composer.lock&lt;/code&gt; file as well as a &lt;code&gt;composer.json&lt;/code&gt; file when you run &lt;code&gt;composer install&lt;/code&gt;, it means either you ran the &lt;code&gt;install&lt;/code&gt; command before, or someone else on the project ran the &lt;code&gt;install&lt;/code&gt; command and committed the &lt;code&gt;composer.lock&lt;/code&gt; file to the project (which is good).</source>
          <target state="translated">이것은 두 번째 시나리오로 이어집니다. 이미있는 경우 &lt;code&gt;composer.lock&lt;/code&gt; 의 파일뿐만 아니라 &lt;code&gt;composer.json&lt;/code&gt; 의 파일을 실행할 &lt;code&gt;composer install&lt;/code&gt; , 당신이 실행 중 하나를 의미 &lt;code&gt;install&lt;/code&gt; 하기 전에 명령을하거나 프로젝트에 다른 사람은 실행 &lt;code&gt;install&lt;/code&gt; 명령을하고 최선을 다하고 &lt;code&gt;composer.lock&lt;/code&gt; 의 파일을 프로젝트에 (좋은).</target>
        </trans-unit>
        <trans-unit id="98a5199b6c6365a14d529d06e87a6a53eacade1d" translate="yes" xml:space="preserve">
          <source>This can be used to install CLI utilities globally. Here is an example:</source>
          <target state="translated">CLI 유틸리티를 전체적으로 설치하는 데 사용할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3c181fb8f0adf46849c28697563e3503acbdc7be" translate="yes" xml:space="preserve">
          <source>This can be virtually anything. To access it from within a script event handler, you can do:</source>
          <target state="translated">이것은 사실상 무엇이든 될 수 있습니다. 스크립트 이벤트 핸들러 내에서 액세스하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b56c5a93de6bdedea1c140ad3096ef36d7b8331d" translate="yes" xml:space="preserve">
          <source>This chapter will describe the &lt;code&gt;config&lt;/code&gt; section of the &lt;code&gt;composer.json&lt;/code&gt;&lt;a href=&quot;04-schema.md&quot;&gt;schema&lt;/a&gt;.</source>
          <target state="translated">이 장에서는 &lt;code&gt;config&lt;/code&gt; 대해 설명합니다 &lt;code&gt;composer.json&lt;/code&gt; 섹션에&lt;a href=&quot;04-schema.md&quot;&gt; 스키마&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7d01976617363a2b6ec0423ec033e7f422b5bc04" translate="yes" xml:space="preserve">
          <source>This chapter will explain all of the fields available in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">이 장에서는 사용 가능한 모든 필드에 대해 설명합니다 &lt;code&gt;composer.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ee395c5409a92c00e47933388323ebff1a9cb83" translate="yes" xml:space="preserve">
          <source>This chapter will explain the concept of packages and repositories, what kinds of repositories are available, and how they work.</source>
          <target state="translated">이 장에서는 패키지 및 리포지토리의 개념, 사용 가능한 리포지토리 종류 및 작동 방식에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="50e7d817ba1292d5bb989f2e5f69b6aee88f999a" translate="yes" xml:space="preserve">
          <source>This chapter will tell you how to make your library installable through Composer.</source>
          <target state="translated">이 장에서는 Composer를 통해 라이브러리를 설치하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5ce164f0d999844a661997833638cbecd8a1f82d" translate="yes" xml:space="preserve">
          <source>This command is used to generate a zip/tar archive for a given package in a given version. It can also be used to archive your entire project without excluded/ignored files.</source>
          <target state="translated">이 명령은 지정된 버전에서 지정된 패키지에 대한 zip / tar 아카이브를 생성하는 데 사용됩니다. 제외 / 무시 된 파일없이 전체 프로젝트를 보관하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="269b801bb9ae4279065ae484b2bdaa0d3fbdfad3" translate="yes" xml:space="preserve">
          <source>This could be happening because the VPS runs out of memory and has no Swap space enabled.</source>
          <target state="translated">VPS에 메모리가 부족하고 스왑 공간이 활성화되어 있지 않기 때문에 이런 일이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02d7a82eed5d2736757e1227f97bc4cc007cbfa4" translate="yes" xml:space="preserve">
          <source>This defines the default behavior for filtering packages by stability. This defaults to &lt;code&gt;stable&lt;/code&gt;, so if you rely on a &lt;code&gt;dev&lt;/code&gt; package, you should specify it in your file to avoid surprises.</source>
          <target state="translated">안정성으로 패키지를 필터링하는 기본 동작을 정의합니다. 이것은 기본적으로 &lt;code&gt;stable&lt;/code&gt; 되어 있으므로 &lt;code&gt;dev&lt;/code&gt; 에게 의존한다면 패키지 놀라움을 피하기 위해 파일에 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="794cba34d07e2b9c98e2e3183c8e7cd5dde7a1c7" translate="yes" xml:space="preserve">
          <source>This does not work for everybody especially when you don't want to hard code your credentials into your composer.json. There is a second way to provide these details and it is via interaction. If you don't provide the authentication credentials composer will prompt you upon connection to enter the username and password.</source>
          <target state="translated">자격 증명을 composer.json에 하드 코딩하지 않으려는 경우 특히 모든 사람에게 적용되는 것은 아닙니다. 이러한 세부 사항을 제공하는 두 번째 방법이 있으며 상호 작용을 통한 것입니다. 인증 자격 증명을 제공하지 않으면 composer가 연결시 사용자 이름과 비밀번호를 입력하라는 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7aa3f6649111d9ed0d06f1d274e525d42297ac65" translate="yes" xml:space="preserve">
          <source>This env var controls the &lt;a href=&quot;06-config.md#discard-changes&quot;&gt;&lt;code&gt;discard-changes&lt;/code&gt;&lt;/a&gt; config option.</source>
          <target state="translated">이 환경 변수는 &lt;a href=&quot;06-config.md#discard-changes&quot;&gt; &lt;code&gt;discard-changes&lt;/code&gt; &lt;/a&gt; 제어합니다 구성 옵션을 .</target>
        </trans-unit>
        <trans-unit id="e32555553ed3e290e4a69cf09a33bacaf055a850" translate="yes" xml:space="preserve">
          <source>This env var controls the time Composer waits for commands (such as git commands) to finish executing. The default value is 300 seconds (5 minutes).</source>
          <target state="translated">이 env var는 Composer가 명령 (예 : git 명령)의 실행을 기다리는 시간을 제어합니다. 기본값은 300 초 (5 분)입니다.</target>
        </trans-unit>
        <trans-unit id="615ba59e0c3fdabd3227e4004465ce595349f96e" translate="yes" xml:space="preserve">
          <source>This field is optional.</source>
          <target state="translated">이 필드는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="25f773b45dc1d077eab23d12843ac204d4e7d0db" translate="yes" xml:space="preserve">
          <source>This file allows you to set &lt;a href=&quot;05-repositories.md&quot;&gt;repositories&lt;/a&gt; and &lt;a href=&quot;06-config.md&quot;&gt;configuration&lt;/a&gt; for the user's projects.</source>
          <target state="translated">이 파일을 사용하면 &lt;a href=&quot;05-repositories.md&quot;&gt;리포지토리&lt;/a&gt; 및 &lt;a href=&quot;06-config.md&quot;&gt;구성&lt;/a&gt; 을 설정할 수 있습니다 사용자 프로젝트의 .</target>
        </trans-unit>
        <trans-unit id="a61d6eb46f437a2039b1a891b447b6f83f8cb900" translate="yes" xml:space="preserve">
          <source>This idea is not new and Composer is strongly inspired by node's &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and ruby's &lt;a href=&quot;https://bundler.io/&quot;&gt;bundler&lt;/a&gt;.</source>
          <target state="translated">이 아이디어는 새로운 것이 아니며 Composer는 node의 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; 과 ruby의 &lt;a href=&quot;https://bundler.io/&quot;&gt;bundler&lt;/a&gt; 에서 영감을 얻었습니다 .</target>
        </trans-unit>
        <trans-unit id="f43d3360a516851b82c29541a27032cb10e71edc" translate="yes" xml:space="preserve">
          <source>This is a convenient way to expose useful scripts that would otherwise be hidden deep in the &lt;code&gt;vendor/&lt;/code&gt; directory.</source>
          <target state="translated">이것은 &lt;code&gt;vendor/&lt;/code&gt; 깊이 숨겨져있는 유용한 스크립트를 노출시키는 편리한 방법입니다. 디렉토리 입니다.</target>
        </trans-unit>
        <trans-unit id="a15fb1d5f318a791244ecf150eb9fe2a1c7a094e" translate="yes" xml:space="preserve">
          <source>This is a list of common pitfalls on using Composer, and how to avoid them.</source>
          <target state="translated">Composer 사용에 대한 일반적인 함정과이를 피하는 방법의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="71b37310b87747d8c2abedcf6ab82e79a6703a19" translate="yes" xml:space="preserve">
          <source>This is also the repository type that packagist uses. To reference a &lt;code&gt;composer&lt;/code&gt; repository, supply the path before the &lt;code&gt;packages.json&lt;/code&gt; file. In the case of packagist, that file is located at &lt;code&gt;/packages.json&lt;/code&gt;, so the URL of the repository would be &lt;code&gt;repo.packagist.org&lt;/code&gt;. For &lt;code&gt;example.org/packages.json&lt;/code&gt; the repository URL would be &lt;code&gt;example.org&lt;/code&gt;.</source>
          <target state="translated">이것은 또한 packagist가 사용하는 저장소 유형입니다. &lt;code&gt;composer&lt;/code&gt; 저장소 를 참조하려면 &lt;code&gt;packages.json&lt;/code&gt; 파일 앞에 경로를 제공 하십시오. packagist의 경우 해당 파일은 &lt;code&gt;/packages.json&lt;/code&gt; 에 있으므로 저장소의 URL은 &lt;code&gt;repo.packagist.org&lt;/code&gt; 입니다. 들어 &lt;code&gt;example.org/packages.json&lt;/code&gt; 저장소 URL은 &lt;code&gt;example.org&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="afc61b9ad0882a9a7d52f3937e6417517cfb1bd7" translate="yes" xml:space="preserve">
          <source>This is also useful for packages that contain sub-packages, for example the main symfony/symfony package contains all the Symfony Components which are also available as individual packages. If you require the main package it will automatically fulfill any requirement of one of the individual components, since it replaces them.</source>
          <target state="translated">서브 패키지를 포함하는 패키지에도 유용합니다. 예를 들어 기본 symfony / symfony 패키지에는 개별 패키지로도 제공되는 모든 Symfony 구성 요소가 포함되어 있습니다. 기본 패키지가 필요한 경우 개별 구성 요소 중 하나의 구성 요소를 대체하기 때문에 자동으로 개별 구성 요소 중 하나의 요구 사항을 충족시킵니다.</target>
        </trans-unit>
        <trans-unit id="cbe4aa68ca27a50043ea6e8b1b420a402bc0c559" translate="yes" xml:space="preserve">
          <source>This is merely a helper to manage a project stored in a central location that can hold CLI tools or Composer plugins that you want to have available everywhere.</source>
          <target state="translated">이것은 어디에서나 사용하고자하는 CLI 도구 또는 Composer 플러그인을 보유 할 수있는 중앙 위치에 저장된 프로젝트를 관리하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="630b87b3362d9dc01dbb3b7a5ccfaa781f3b0a0d" translate="yes" xml:space="preserve">
          <source>This is not really fun when you want to try a bugfix of some library that is a dependency of your local project.</source>
          <target state="translated">로컬 프로젝트의 종속성 인 일부 라이브러리의 버그 수정을 시도 할 때 이것은 실제로 재미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d285a58a6cf046380fb19cf8267b1f401561e541" translate="yes" xml:space="preserve">
          <source>This is really helpful when you have dependencies using &quot;self.version&quot;, so that not dev-master, but the same branch is installed (in the example: latest-testing).</source>
          <target state="translated">이것은 &quot;self.version&quot;을 사용하는 의존성이있어서 dev-master는 아니지만 동일한 브랜치 (예 : 최신 테스트)가 설치되어있을 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="297ef1064ecf692acaf43573dd7aad2404025743" translate="yes" xml:space="preserve">
          <source>This is the easiest way to get Composer set up on your machine.</source>
          <target state="translated">컴퓨터에서 Composer를 설정하는 가장 쉬운 방법입니다.</target>
        </trans-unit>
        <trans-unit id="19a6a900f69bd2cac4709641972987b0a41a40ca" translate="yes" xml:space="preserve">
          <source>This is the recommended operator for maximum interoperability when writing library code.</source>
          <target state="translated">라이브러리 코드를 작성할 때 최대의 상호 운용성을 위해 권장되는 연산자입니다.</target>
        </trans-unit>
        <trans-unit id="1ba711385f703e6f318e3d9fbed2b697acdf8ad6" translate="yes" xml:space="preserve">
          <source>This issue can also happen on cPanel instances, when the shell fork bomb protection is activated. For more information, see the &lt;a href=&quot;https://documentation.cpanel.net/display/68Docs/Shell+Fork+Bomb+Protection&quot;&gt;documentation&lt;/a&gt; of the fork bomb feature on the cPanel site.</source>
          <target state="translated">쉘 포크 폭탄 보호가 활성화 된 경우 cPanel 인스턴스에서도이 문제가 발생할 수 있습니다. 자세한 내용 은 cPanel 사이트에서 포크 폭탄 기능 &lt;a href=&quot;https://documentation.cpanel.net/display/68Docs/Shell+Fork+Bomb+Protection&quot;&gt;설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e15eadd50149eea941037db36653f24c06455188" translate="yes" xml:space="preserve">
          <source>This must follow the format of &lt;code&gt;X.Y.Z&lt;/code&gt; or &lt;code&gt;vX.Y.Z&lt;/code&gt; with an optional suffix of &lt;code&gt;-dev&lt;/code&gt;, &lt;code&gt;-patch&lt;/code&gt; (&lt;code&gt;-p&lt;/code&gt;), &lt;code&gt;-alpha&lt;/code&gt; (&lt;code&gt;-a&lt;/code&gt;), &lt;code&gt;-beta&lt;/code&gt; (&lt;code&gt;-b&lt;/code&gt;) or &lt;code&gt;-RC&lt;/code&gt;. The patch, alpha, beta and RC suffixes can also be followed by a number.</source>
          <target state="translated">이것은 선택적 접미어 &lt;code&gt;-dev&lt;/code&gt; , &lt;code&gt;-patch&lt;/code&gt; ( &lt;code&gt;-p&lt;/code&gt; ), &lt;code&gt;-alpha&lt;/code&gt; ( &lt;code&gt;-a&lt;/code&gt; ), &lt;code&gt;-beta&lt;/code&gt; ( &lt;code&gt;-b&lt;/code&gt; ) 또는 &lt;code&gt;-RC&lt;/code&gt; 와 함께 &lt;code&gt;X.Y.Z&lt;/code&gt; 또는 &lt;code&gt;vX.Y.Z&lt;/code&gt; 형식을 따라야합니다. . 패치, 알파, 베타 및 RC 접미사 뒤에 숫자가 올 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b17d4d8f8da8df5c76438be22277a7f04c52cab" translate="yes" xml:space="preserve">
          <source>This option adds an APCu cache as a fallback for the class map. It will not automatically generate the class map though, so you should still enable Level 1 optimizations manually if you so desire.</source>
          <target state="translated">이 옵션은 APCu 캐시를 클래스 맵의 폴백으로 추가합니다. 클래스 맵은 자동으로 생성되지 않으므로 원하는 경우 레벨 1 최적화를 수동으로 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="f91f2d80d3c41affb8e7d9f876bea35afb2af5a4" translate="yes" xml:space="preserve">
          <source>This option is very simple, it says that if something is not found in the classmap, then it does not exist and the autoloader should not attempt to look on the filesystem according to PSR-4 rules.</source>
          <target state="translated">이 옵션은 매우 간단합니다. 클래스 맵에서 무언가를 찾지 못하면 존재하지 않으며 오토로더가 PSR-4 규칙에 따라 파일 시스템을 보려고 시도해서는 안된다고 말합니다.</target>
        </trans-unit>
        <trans-unit id="274dc18099357a20062ba0f3d48a5c0ea15f7b3a" translate="yes" xml:space="preserve">
          <source>This option makes the autoloader always return very quickly. On the flipside it also means that in case a class is generated at runtime for some reason, it will not be allowed to be autoloaded. If your project or any of your dependencies does that then you might experience &quot;class not found&quot; issues in production. Enable this with care.</source>
          <target state="translated">이 옵션을 사용하면 오토로더가 항상 매우 빠르게 돌아옵니다. 반대로 어떤 이유로 런타임에 클래스가 생성되는 경우 자동로드 할 수 없다는 것을 의미합니다. 프로젝트 또는 종속성이 수행하는 경우 프로덕션에서 &quot;클래스를 찾을 수 없음&quot;문제가 발생할 수 있습니다. 주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c896278653b2ec22017fcc9989b8305dc926b070" translate="yes" xml:space="preserve">
          <source>This option requires APCu which may or may not be available to you. It also uses APCu memory for autoloading purposes, but it is safe to use and can not result in classes not being found like the authoritative class map optimization above.</source>
          <target state="translated">이 옵션에는 APCu가 필요하거나 사용하지 못할 수 있습니다. 또한 자동로드 목적으로 APCu 메모리를 사용하지만 사용하기에 안전하며 위의 권위있는 클래스 맵 최적화처럼 클래스를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9d9a006fd0e828f9277a3a9e2168c6051f1ecae3" translate="yes" xml:space="preserve">
          <source>This section allows to define autoload rules for development purposes.</source>
          <target state="translated">이 섹션에서는 개발 목적으로 자동로드 규칙을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b239168a737045663c7caab49cfb1f6a48ba8c" translate="yes" xml:space="preserve">
          <source>This will basically teach composer how to authenticate automatically when reading packages from the provided composer repository.</source>
          <target state="translated">기본적으로 컴포저에게 제공된 컴포저 저장소에서 패키지를 읽을 때 자동으로 인증하는 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="661392f81c79772cf9069aeb59d15b210c670b8e" translate="yes" xml:space="preserve">
          <source>This will resolve all dependencies of the project and write the exact versions into &lt;code&gt;composer.lock&lt;/code&gt;.</source>
          <target state="translated">이것은 프로젝트의 모든 의존성을 해결하고 &lt;code&gt;composer.lock&lt;/code&gt; 에 정확한 버전을 씁니다. .</target>
        </trans-unit>
        <trans-unit id="4e16df583a018d5f60aa740b6c7475dc1f4d7826" translate="yes" xml:space="preserve">
          <source>Those files contain lists of package names and hashes to verify the file integrity, for example:</source>
          <target state="translated">이러한 파일에는 파일 무결성을 확인하기위한 패키지 이름 및 해시 목록이 포함됩니다 (예 :</target>
        </trans-unit>
        <trans-unit id="081acf594e378c11c0e7eceb764c79548653b953" translate="yes" xml:space="preserve">
          <source>Tilde Version Range (~)</source>
          <target state="translated">틸드 버전 범위 (~)</target>
        </trans-unit>
        <trans-unit id="2616f608eef9ed1435bd0bf1c1dde0888dfeb753" translate="yes" xml:space="preserve">
          <source>To allow various stabilities without enforcing them at the constraint level however, you may use &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;stability-flags&lt;/a&gt; like &lt;code&gt;@&amp;lt;stability&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;@dev&lt;/code&gt;) to let composer know that a given package can be installed in a different stability than your default minimum-stability setting. All available stability flags are listed on the minimum-stability section of the &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;schema page&lt;/a&gt;.</source>
          <target state="translated">그러나 제약 수준에서 다양한 안정성을 적용하지 않고 허용하려면 &lt;code&gt;@&amp;lt;stability&amp;gt;&lt;/code&gt; (예 : &lt;code&gt;@dev&lt;/code&gt; ) 와 같은 &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;안정성 플래그를&lt;/a&gt; 사용 하여 지정된 패키지를 기본 최소 안정성과 다른 안정성으로 설치할 수 있음을 작곡가에게 알릴 수 있습니다 환경. 사용 가능한 모든 안정성 플래그는 시스템의 최소 안정성 섹션에 나열되어 있습니다&lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt; 스키마 페이지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ab434362114d376359858c140ab5becd1aae2e0b" translate="yes" xml:space="preserve">
          <source>To call Composer commands, you can use &lt;code&gt;@composer&lt;/code&gt; which will automatically resolve to whatever composer.phar is currently being used:</source>
          <target state="translated">Composer 명령을 호출하려면 &lt;code&gt;@composer&lt;/code&gt; 를 현재 사용중인 composer.phar로 자동 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="703e69f23ffe2de3ee7ebc2d2e394653a8900a0b" translate="yes" xml:space="preserve">
          <source>To create a new project using Composer you can use the &lt;code&gt;create-project&lt;/code&gt; command. Pass it a package name, and the directory to create the project in. You can also provide a version as third argument, otherwise the latest version is used.</source>
          <target state="translated">Composer를 사용하여 새 프로젝트를 &lt;code&gt;create-project&lt;/code&gt; 사용할 수 있습니다 명령을 . 패키지 이름과 프로젝트를 생성 할 디렉토리를 전달하십시오. 버전을 세 번째 인수로 제공 할 수도 있습니다. 그렇지 않으면 최신 버전이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7259c7a6c7580039c811b3eb296df8c91fc1bacd" translate="yes" xml:space="preserve">
          <source>To disable the process timeout on a custom command under &lt;code&gt;scripts&lt;/code&gt;, a static helper is available:</source>
          <target state="translated">&lt;code&gt;scripts&lt;/code&gt; 에서 사용자 정의 명령에 대한 프로세스 시간 초과를 비활성화하려면 정적 도우미를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9445e3cb238e1a5215a782ee285f0e66cf327e3a" translate="yes" xml:space="preserve">
          <source>To disable the timeout for every script on a given project, you can use the composer.json configuration:</source>
          <target state="translated">주어진 프로젝트에서 모든 스크립트에 대해 시간 초과를 비활성화하려면 composer.json 구성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec2fc64193fca38f47ec7090f16f7a70b5618ba2" translate="yes" xml:space="preserve">
          <source>To disable the timeout for specific scripts with the static helper directly in composer.json:</source>
          <target state="translated">composer.json에서 직접 정적 헬퍼를 사용하여 특정 스크립트에 대한 시간 종료를 사용하지 않으려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="027be376e282e62845bebf47469f4f5d8bce3357" translate="yes" xml:space="preserve">
          <source>To disable the timeout of a single script call, you must use the &lt;code&gt;run-script&lt;/code&gt; composer command and specify the &lt;code&gt;--timeout&lt;/code&gt; parameter:</source>
          <target state="translated">단일 스크립트 호출의 시간 초과를 비활성화하려면 &lt;code&gt;run-script&lt;/code&gt; composer 명령을 사용하고 &lt;code&gt;--timeout&lt;/code&gt; 을 지정해야합니다 매개 변수를 .</target>
        </trans-unit>
        <trans-unit id="1968a3e1738c7fb42672587a3f09b6ee4e9de8b5" translate="yes" xml:space="preserve">
          <source>To do that, &lt;code&gt;autoload&lt;/code&gt; and &lt;code&gt;target-dir&lt;/code&gt; are defined as follows:</source>
          <target state="translated">이를 위해 &lt;code&gt;autoload&lt;/code&gt; 와 &lt;code&gt;target-dir&lt;/code&gt; 은 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="6172adec85941ab6181131f95d95a5ae796a8316" translate="yes" xml:space="preserve">
          <source>To enable script re-use and avoid duplicates, you can call a script from another one by prefixing the command name with &lt;code&gt;@&lt;/code&gt;:</source>
          <target state="translated">스크립트 재사용을 가능하게하고 중복을 피하기 위해 명령 이름 앞에 &lt;code&gt;@&lt;/code&gt; 를 붙여서 다른 스크립트에서 스크립트를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d772478e704a8fdc52f49fe648c3f5e2359e4964" translate="yes" xml:space="preserve">
          <source>To enable the swap you can use for example:</source>
          <target state="translated">스왑을 활성화하려면 예를 들어 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afe52e2b0307bc5e407fddc61ac8bcb755aac9b9" translate="yes" xml:space="preserve">
          <source>To enable your satis installation to create downloads for all (Git, Mercurial and Subversion) your packages, add the following to your &lt;code&gt;satis.json&lt;/code&gt;:</source>
          <target state="translated">satis 설치가 모든 패키지 (Git, Mercurial 및 Subversion)에 대한 다운로드를 작성하도록하려면 &lt;code&gt;satis.json&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="13f50946093bfe2d26454652e498f3d41b861d54" translate="yes" xml:space="preserve">
          <source>To enable your satis installation to indicate that some packages are abandoned, add the following to your &lt;code&gt;satis.json&lt;/code&gt;:</source>
          <target state="translated">satis 설치가 일부 패키지가 취소되었음을 표시하도록하려면 &lt;code&gt;satis.json&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="242b5ec99dbb948aeb8dc9862d907d518e32c63e" translate="yes" xml:space="preserve">
          <source>To ensure a consistent code base, you should make sure the code follows the &lt;a href=&quot;http://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2 Coding Standards&lt;/a&gt;.</source>
          <target state="translated">일관된 코드 기반을 보장하려면 코드가 &lt;a href=&quot;http://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2 코딩 표준을&lt;/a&gt; 준수해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2a835774cb3367a5c004dcde88461319572e8cbf" translate="yes" xml:space="preserve">
          <source>To execute PHP scripts, you can use &lt;code&gt;@php&lt;/code&gt; which will automatically resolve to whatever php process is currently being used:</source>
          <target state="translated">PHP 스크립트를 실행하려면 &lt;code&gt;@php&lt;/code&gt; 를 사용하면 현재 사용중인 PHP 프로세스로 자동 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="7f85737ea1928d2da931ccff015054c997fdaac4" translate="yes" xml:space="preserve">
          <source>To filter the list you can pass a package mask using wildcards.</source>
          <target state="translated">목록을 필터링하기 위해 와일드 카드를 사용하여 패키지 마스크를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="572bb6f1e6b1166836f8fdbafac80ba19d63ad72" translate="yes" xml:space="preserve">
          <source>To get help from the command-line, simply call &lt;code&gt;composer&lt;/code&gt; or &lt;code&gt;composer list&lt;/code&gt; to see the complete list of commands, then &lt;code&gt;--help&lt;/code&gt; combined with any of those can give you more information.</source>
          <target state="translated">명령 줄에서 도움을 받으려면 &lt;code&gt;composer&lt;/code&gt; 또는 &lt;code&gt;composer list&lt;/code&gt; 를 호출 하여 전체 명령 목록 을 확인한 다음 &lt;code&gt;--help&lt;/code&gt; 와 함께 자세한 정보를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d454fbe7e425d3c1bd529a3e4dd18bddb25ced4" translate="yes" xml:space="preserve">
          <source>To get more information about a certain command, you can use &lt;code&gt;help&lt;/code&gt;.</source>
          <target state="translated">특정 명령에 대한 자세한 정보를 얻으려면 &lt;code&gt;help&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3ecff80894b40107e2c7b00bf96802c2e5e285e" translate="yes" xml:space="preserve">
          <source>To get packages from these systems you need to have their respective clients installed. That can be inconvenient. And for this reason there is special support for GitHub and BitBucket that use the APIs provided by these sites, to fetch the packages without having to install the version control system. The VCS repository provides &lt;code&gt;dist&lt;/code&gt;s for them that fetch the packages as zips.</source>
          <target state="translated">이러한 시스템에서 패키지를 가져 오려면 해당 클라이언트가 설치되어 있어야합니다. 불편할 수 있습니다. 이러한 이유로 버전 제어 시스템을 설치하지 않고도 패키지를 가져 오기 위해 이러한 사이트에서 제공하는 API를 사용하는 GitHub 및 BitBucket에 대한 특별한 지원이 있습니다. VCS 저장소는 패키지를 zip으로 가져 오는 &lt;code&gt;dist&lt;/code&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f6efa85ae7f550704cefdf0149a36e94c4f7bd21" translate="yes" xml:space="preserve">
          <source>To get the current &lt;code&gt;memory_limit&lt;/code&gt; value, run:</source>
          <target state="translated">현재 &lt;code&gt;memory_limit&lt;/code&gt; 값 을 얻으려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7cb4d25337915f2702feb6e9fd3ef11bbade7950" translate="yes" xml:space="preserve">
          <source>To handle non-numeric named branches as versions instead of searching for a parent branch with a valid version or special branch name like master, you can set patterns for branch names, that should be handled as dev version branches.</source>
          <target state="translated">마스터와 같은 유효한 버전 또는 특수 분기 이름을 가진 상위 분기를 검색하는 대신 숫자가 아닌 이름이 지정된 분기를 버전으로 처리하려면 분기 버전의 패턴을 설정하여 dev 버전 분기로 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="22f6627e0806084d95804590ef2cc1e0fa895237" translate="yes" xml:space="preserve">
          <source>To illustrate, the following example would get the &lt;code&gt;BasePackage&lt;/code&gt;, &lt;code&gt;TopLevelPackage1&lt;/code&gt;, and &lt;code&gt;TopLevelPackage2&lt;/code&gt; packages from your PEAR repository and &lt;code&gt;IntermediatePackage&lt;/code&gt; from a Github repository:</source>
          <target state="translated">설명을 위해 다음 예제는 PEAR 저장소에서 &lt;code&gt;BasePackage&lt;/code&gt; , &lt;code&gt;TopLevelPackage1&lt;/code&gt; 및 &lt;code&gt;TopLevelPackage2&lt;/code&gt; 패키지를 가져오고 Github 저장소에서 &lt;code&gt;IntermediatePackage&lt;/code&gt; 를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="db3fd7e71e49f48ddd62bece648f84f9d6a8659e" translate="yes" xml:space="preserve">
          <source>To improve performance when the xdebug extension is enabled, Composer automatically restarts PHP without it. You can override this behavior by using an environment variable: &lt;code&gt;COMPOSER_ALLOW_XDEBUG=1&lt;/code&gt;.</source>
          <target state="translated">xdebug 확장 기능이 활성화되어있을 때 성능을 향상시키기 위해 Composer는 자동으로 PHP를 다시 시작하지 않습니다. 환경 변수 &lt;code&gt;COMPOSER_ALLOW_XDEBUG=1&lt;/code&gt; 을 사용하여이 동작을 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="48b37746979d056aed7cdedde3fd6b05a3ccdd2c" translate="yes" xml:space="preserve">
          <source>To install Composer locally, run the installer in your project directory. See &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page&lt;/a&gt; for instructions.</source>
          <target state="translated">Composer를 로컬로 설치하려면 프로젝트 디렉토리에서 설치 프로그램을 실행하십시오. 지침 &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;은 다운로드 페이지&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ba19c9fd60860b950815749c1573d6324e91d3b" translate="yes" xml:space="preserve">
          <source>To install packages from sources instead of simple zip archives, you will need git, svn, fossil or hg depending on how the package is version-controlled.</source>
          <target state="translated">간단한 zip 아카이브 대신 소스에서 패키지를 설치하려면 패키지가 버전 제어 방식에 따라 git, svn, fossil 또는 hg가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="88cc2d8ff198639815c94744e3b4bd84d8a915d5" translate="yes" xml:space="preserve">
          <source>To install the defined dependencies for your project, run the &lt;a href=&quot;03-cli.md#install&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">프로젝트에 정의 된 종속성을 &lt;a href=&quot;03-cli.md#install&quot;&gt; &lt;code&gt;install&lt;/code&gt; &lt;/a&gt; 명령을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c0e4e6a7a0837b92f78ef009160482f432dba37" translate="yes" xml:space="preserve">
          <source>To list all of the available packages, you can use the &lt;code&gt;show&lt;/code&gt; command.</source>
          <target state="translated">사용 가능한 모든 패키지를 나열하려면 &lt;code&gt;show&lt;/code&gt; 명령을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75f0a749b7c38173bf2107914ae468f71f17a6a5" translate="yes" xml:space="preserve">
          <source>To rebuild only particular packages, pass the package names on the command line like so:</source>
          <target state="translated">특정 패키지 만 다시 빌드하려면 다음과 같이 명령 행에서 패키지 이름을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="ff8c5f4a65cb057060e847b0f1f1d10793a19b9b" translate="yes" xml:space="preserve">
          <source>To register a method to an event, implement the method &lt;code&gt;getSubscribedEvents()&lt;/code&gt; and have it return an array. The array key must be the &lt;a href=&quot;scripts.md#event-names&quot;&gt;event name&lt;/a&gt; and the value is the name of the method in this class to be called.</source>
          <target state="translated">메소드를 이벤트에 등록하려면 &lt;code&gt;getSubscribedEvents()&lt;/code&gt; 메소드를 구현하고 배열을 리턴하십시오. 배열 키는 &lt;a href=&quot;scripts.md#event-names&quot;&gt;이벤트 이름&lt;/a&gt; 이어야하며 값은 호출 할이 클래스의 메소드 이름입니다.</target>
        </trans-unit>
        <trans-unit id="ce69b1a3c4007338262c2e5b1c97ce90dd3e2c93" translate="yes" xml:space="preserve">
          <source>To run &lt;a href=&quot;articles/scripts.md&quot;&gt;scripts&lt;/a&gt; manually you can use this command, give it the script name and optionally any required arguments.</source>
          <target state="translated">&lt;a href=&quot;articles/scripts.md&quot;&gt;스크립트를&lt;/a&gt; 수동으로 실행하려면 이 명령을 사용하여 스크립트 이름과 선택적으로 필요한 인수를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="3cd887e1fca448a5b99bd88daa6739ff5c6f7dc8" translate="yes" xml:space="preserve">
          <source>To secure your private repository you can host it over SSH or SSL using a client certificate. In your project you can use the &lt;code&gt;options&lt;/code&gt; parameter to specify the connection options for the server.</source>
          <target state="translated">개인 저장소를 보호하기 위해 클라이언트 인증서를 사용하여 SSH 또는 SSL을 통해 개인 저장소를 호스트 할 수 있습니다. 프로젝트에서 &lt;code&gt;options&lt;/code&gt; 매개 변수를 사용하여 서버의 연결 옵션을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="84925e5c892f336c6988e794c40ec38b3f76ce1e" translate="yes" xml:space="preserve">
          <source>To start using Composer in your project, all you need is a &lt;code&gt;composer.json&lt;/code&gt; file. This file describes the dependencies of your project and may contain other metadata as well.</source>
          <target state="translated">프로젝트에서 Composer를 사용하려면 &lt;code&gt;composer.json&lt;/code&gt; 파일 만 있으면됩니다. 이 파일은 프로젝트의 종속성을 설명하며 다른 메타 데이터도 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f8af01e9cf6738c02770816401951f38749c00a" translate="yes" xml:space="preserve">
          <source>To update Composer itself to the latest version, run the &lt;code&gt;self-update&lt;/code&gt; command. It will replace your &lt;code&gt;composer.phar&lt;/code&gt; with the latest version.</source>
          <target state="translated">Composer 자체를 최신 버전 &lt;code&gt;self-update&lt;/code&gt; 하려면 자체 업데이트 명령을 실행하십시오 . 그것은 당신 대체 할 &lt;code&gt;composer.phar&lt;/code&gt; 최신 버전을.</target>
        </trans-unit>
        <trans-unit id="dad674e48704a92597b8a13244ba1d8ca29324b7" translate="yes" xml:space="preserve">
          <source>Trade-offs</source>
          <target state="translated">Trade-offs</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="ba5ba156188d6c38183b0692a13e4a2d239701ea" translate="yes" xml:space="preserve">
          <source>Try clearing Composer's cache by running &lt;code&gt;composer clear-cache&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer clear-cache&lt;/code&gt; 를 실행하여 Composer 캐시를 지우십시오 .</target>
        </trans-unit>
        <trans-unit id="bf1cb9b16df4bf6c782208142821b3ebf71380e4" translate="yes" xml:space="preserve">
          <source>Try increasing the limit in your &lt;code&gt;php.ini&lt;/code&gt; file (ex. &lt;code&gt;/etc/php5/cli/php.ini&lt;/code&gt; for Debian-like systems):</source>
          <target state="translated">&lt;code&gt;php.ini&lt;/code&gt; 파일 에서 제한을 늘리십시오 (예 : 데비안 계열 시스템의 경우 &lt;code&gt;/etc/php5/cli/php.ini&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="d27377b209ceac276e7ef413902a27885fa67df7" translate="yes" xml:space="preserve">
          <source>Typically you would leave the source part off, as you don't really need it.</source>
          <target state="translated">일반적으로 실제로는 필요하지 않으므로 소스 부분을 그대로 두십시오.</target>
        </trans-unit>
        <trans-unit id="e15dcaab87611b00bfeba9321311d1a520f34547" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;psr-0&lt;/code&gt; key you define a mapping from namespaces to paths, relative to the package root. Note that this also supports the PEAR-style non-namespaced convention.</source>
          <target state="translated">&lt;code&gt;psr-0&lt;/code&gt; 키 아래에서 패키지 루트를 기준으로 네임 스페이스에서 경로로의 맵핑을 정의합니다. 이것은 PEAR 스타일의 네임 스페이스가없는 규칙도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8909af9ce39584fecffbeb518314286c798a6e15" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;psr-4&lt;/code&gt; key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like &lt;code&gt;Foo\\Bar\\Baz&lt;/code&gt; a namespace prefix &lt;code&gt;Foo\\&lt;/code&gt; pointing to a directory &lt;code&gt;src/&lt;/code&gt; means that the autoloader will look for a file named &lt;code&gt;src/Bar/Baz.php&lt;/code&gt; and include it if present. Note that as opposed to the older PSR-0 style, the prefix (&lt;code&gt;Foo\\&lt;/code&gt;) is &lt;strong&gt;not&lt;/strong&gt; present in the file path.</source>
          <target state="translated">&lt;code&gt;psr-4&lt;/code&gt; 키 아래에서 패키지 루트를 기준으로 네임 스페이스에서 경로로의 매핑을 정의합니다. &lt;code&gt;Foo\\Bar\\Baz&lt;/code&gt; 와 같은 클래스를 자동로드 할 때 &lt;code&gt;src/&lt;/code&gt; 디렉토리를 가리키는 네임 스페이스 접두사 &lt;code&gt;Foo\\&lt;/code&gt; 는 오토로더가 &lt;code&gt;src/Bar/Baz.php&lt;/code&gt; 라는 파일을 찾고 존재하는 경우 포함 함을 의미합니다. 이전 PSR-0 스타일에 반대 참고 접두사 (즉, &lt;code&gt;Foo\\&lt;/code&gt; )는 &lt;strong&gt;없는&lt;/strong&gt; 파일 경로에 존재.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a49cd16ceb09068a661dbff4f47031cfb5b4444c" translate="yes" xml:space="preserve">
          <source>Unlike update/install, this command will ignore config.platform settings and check the real platform packages so you can be certain you have the required platform dependencies.</source>
          <target state="translated">업데이트 / 설치와 달리이 명령은 config.platform 설정을 무시하고 실제 플랫폼 패키지를 확인하여 필요한 플랫폼 종속성이 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a92a62891885f2e53e9342c26a0ad4295974f08e" translate="yes" xml:space="preserve">
          <source>Updating dependencies to their latest versions</source>
          <target state="translated">최신 버전으로 종속성 업데이트</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="d3d63a9ce5df435e6ed69f7ca95593227c85bd46" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&quot;abandoned&quot;: true&lt;/code&gt; to indicates this package is abandoned. Use &lt;code&gt;&quot;abandoned&quot;: &quot;monolog/monolog&quot;&lt;/code&gt; to indicates this package is abandoned and the recommended alternative is &lt;code&gt;monolog/monolog&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;&quot;abandoned&quot;: true&lt;/code&gt; 으로이 패키지는 포기 나타냅니다. 사용 &lt;code&gt;&quot;abandoned&quot;: &quot;monolog/monolog&quot;&lt;/code&gt; 에이 패키지가 포기 나타내고 권장 대안입니다 &lt;code&gt;monolog/monolog&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ace2c6a7e71ffad9af2b3049089beab50a6493d0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&quot;prefer-stable&quot;: true&lt;/code&gt; to enable.</source>
          <target state="translated">사용은 &lt;code&gt;&quot;prefer-stable&quot;: true&lt;/code&gt; 가능합니다.</target>
        </trans-unit>
        <trans-unit id="742280ffccec92fc7be6a1da7f6dc250e81a7875" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--by-package&lt;/code&gt; or &lt;code&gt;--by-suggestion&lt;/code&gt; flags to group the output by the package offering the suggestions or the suggested packages respectively.</source>
          <target state="translated">사용 &lt;code&gt;--by-package&lt;/code&gt; 또는 &lt;code&gt;--by-suggestion&lt;/code&gt; 그룹에 각각 제안이나 제안 된 패키지를 제공하는 패키지로 출력을 플래그.</target>
        </trans-unit>
        <trans-unit id="201f8b94074409dd470fdeabf3fb52a7ccd6e5d4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--verbose (-v)&lt;/code&gt; flag to display the suggesting package and the suggestion reason. This implies &lt;code&gt;--by-package --by-suggestion&lt;/code&gt;, showing both lists.</source>
          <target state="translated">사용 &lt;code&gt;--verbose (-v)&lt;/code&gt; 제안 패키지와 제안 이유를 표시하는 플래그. 이는 &lt;code&gt;--by-package --by-suggestion&lt;/code&gt; 의미하며 두 목록을 모두 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2ed3705749e76b61ad5cfd5837c9b4dde3c52e3d" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;same vendor and package name&lt;/strong&gt; throughout all branches and tags of your repository, especially when maintaining a third party fork and using &lt;code&gt;replace&lt;/code&gt;.</source>
          <target state="translated">특히 써드 파티 포크를 유지 보수하고 &lt;code&gt;replace&lt;/code&gt; 를 사용할 때 저장소의 모든 브랜치 및 태그 에서 &lt;strong&gt;동일한 공급 업체 및 패키지 이름&lt;/strong&gt; 을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c43fec7130c3143dd208e30d026774272f70f676" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;http_proxy&lt;/code&gt; (lowercased) or even defining both might be preferable since some tools like git or curl will only use the lower-cased &lt;code&gt;http_proxy&lt;/code&gt; version. Alternatively you can also define the git proxy using &lt;code&gt;git config --global http.proxy &amp;lt;proxy url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;http_proxy&lt;/code&gt; (소문자) 또는 자식 또는 컬과 같은 몇 가지 도구 만 소문자로 사용하기 때문에 모두 바람직 수 있습니다 정의 &lt;code&gt;http_proxy&lt;/code&gt; 버전. 또는 &lt;code&gt;git config --global http.proxy &amp;lt;proxy url&amp;gt;&lt;/code&gt; 을 사용하여 git 프록시를 정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1e44c841547d59ef967c3267efa7b6061ba2ae39" translate="yes" xml:space="preserve">
          <source>Using Composer</source>
          <target state="translated">작곡가 사용하기</target>
        </trans-unit>
        <trans-unit id="9a02321539883e8133bd4d02625c38e89a365166" translate="yes" xml:space="preserve">
          <source>Using JSON object notation is also possible. However, JSON key/value pairs are to be considered unordered so consistent behaviour cannot be guaranteed.</source>
          <target state="translated">JSON 객체 표기법을 사용할 수도 있습니다. 그러나 JSON 키 / 값 쌍은 정렬되지 않은 것으로 간주되므로 일관된 동작을 보장 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="254550be6f0ce4335476259029c3eaa67808f04e" translate="yes" xml:space="preserve">
          <source>Using Plugins</source>
          <target state="translated">플러그인 사용</target>
        </trans-unit>
        <trans-unit id="c8d87edb6c4ab530842c0ac12e169c901f657db7" translate="yes" xml:space="preserve">
          <source>Using private repositories</source>
          <target state="translated">개인 리포지토리 사용</target>
        </trans-unit>
        <trans-unit id="d2888aa3efb27aa4ff140c167ba1b7f70c498ced" translate="yes" xml:space="preserve">
          <source>Using the Installer</source>
          <target state="translated">설치 프로그램 사용</target>
        </trans-unit>
        <trans-unit id="58c5b050bab6a27cb80ed905445111f04c12465a" translate="yes" xml:space="preserve">
          <source>Using the previous definition example, here's the class &lt;code&gt;MyVendor\MyClass&lt;/code&gt; that might be used to execute the PHP callbacks:</source>
          <target state="translated">이전 정의 예제를 사용하여 PHP 콜백을 실행하는 데 사용할 수있는 &lt;code&gt;MyVendor\MyClass&lt;/code&gt; 클래스 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bcaf120949d1fdb5ff769615a5288ac9d7a6a755" translate="yes" xml:space="preserve">
          <source>VCS</source>
          <target state="translated">VCS</target>
        </trans-unit>
        <trans-unit id="4f0ac327d3aa6ce560f7c557e414bcebb84c4680" translate="yes" xml:space="preserve">
          <source>VCS Tags and Branches</source>
          <target state="translated">VCS 태그 및 브랜치</target>
        </trans-unit>
        <trans-unit id="4089e660c6fc2348e7aa62c7a7a4105550bf2bba" translate="yes" xml:space="preserve">
          <source>VCS Versioning</source>
          <target state="translated">VCS 버전 관리</target>
        </trans-unit>
        <trans-unit id="61ff0a3493213ff858da0bb2394d27cf346235e5" translate="yes" xml:space="preserve">
          <source>VCS stands for version control system. This includes versioning systems like git, svn, fossil or hg. Composer has a repository type for installing packages from these systems.</source>
          <target state="translated">VCS는 버전 제어 시스템을 나타냅니다. 여기에는 git, svn, fossil 또는 hg와 같은 버전 관리 시스템이 포함됩니다. Composer에는 이러한 시스템에서 패키지를 설치하기위한 저장소 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="01bd908eb27ffe104c5dc3ce74f6e9e2a3ecb35e" translate="yes" xml:space="preserve">
          <source>Various information to get support about the project.</source>
          <target state="translated">프로젝트에 대한 지원을 얻기위한 다양한 정보.</target>
        </trans-unit>
        <trans-unit id="079d2e77a839383b4c96080d870ab40f2a837923" translate="yes" xml:space="preserve">
          <source>Vendor binaries and the &lt;code&gt;vendor/bin&lt;/code&gt; directory</source>
          <target state="translated">공급 업체 바이너리 및 &lt;code&gt;vendor/bin&lt;/code&gt; 디렉토리</target>
        </trans-unit>
        <trans-unit id="176e77a5f55141683d98b2f3f28c4391a7352568" translate="yes" xml:space="preserve">
          <source>Vendor binaries and the vendor/bin directory</source>
          <target state="translated">공급 업체 바이너리 및 공급 업체 / bin 디렉토리</target>
        </trans-unit>
        <trans-unit id="612fee8b1bdb5ec96c3b958d20d963af408a8ba2" translate="yes" xml:space="preserve">
          <source>Version Range</source>
          <target state="translated">버전 범위</target>
        </trans-unit>
        <trans-unit id="506d7fa870c9e78d43affa11414f7f529217b768" translate="yes" xml:space="preserve">
          <source>Versions and constraints</source>
          <target state="translated">버전 및 제약</target>
        </trans-unit>
        <trans-unit id="1b9a07554388dd719a1d3c4bf2ac74092ca6a0a8" translate="yes" xml:space="preserve">
          <source>We have a &lt;a href=&quot;http://json-schema.org&quot;&gt;JSON schema&lt;/a&gt; that documents the format and can also be used to validate your &lt;code&gt;composer.json&lt;/code&gt;. In fact, it is used by the &lt;code&gt;validate&lt;/code&gt; command. You can find it at: &lt;a href=&quot;https://getcomposer.org/schema.json&quot;&gt;https://getcomposer.org/schema.json&lt;/a&gt;</source>
          <target state="translated">형식을 문서화하고 &lt;code&gt;composer.json&lt;/code&gt; 의 유효성을 검사하는 데 사용할 수 있는 &lt;a href=&quot;http://json-schema.org&quot;&gt;JSON 스키마&lt;/a&gt; 가 있습니다 . 실제로 &lt;code&gt;validate&lt;/code&gt; 명령에서 사용됩니다 . &lt;a href=&quot;https://getcomposer.org/schema.json&quot;&gt;https://getcomposer.org/schema.json&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0545cefb40375beb29cfce05880f2f5aa0c2ef09" translate="yes" xml:space="preserve">
          <source>We recommend you fix your IPv6 setup. If that is not possible, you can try the following workarounds:</source>
          <target state="translated">IPv6 설정을 수정하는 것이 좋습니다. 이것이 가능하지 않으면 다음 해결 방법을 시도 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ef44ed371e33c12478458267908e189b6452a18" translate="yes" xml:space="preserve">
          <source>Web outputs</source>
          <target state="translated">웹 출력</target>
        </trans-unit>
        <trans-unit id="695afd6c8786bf69afa75f24a2d07f7d0043fa14" translate="yes" xml:space="preserve">
          <source>What about Windows and .bat files?</source>
          <target state="translated">Windows 및 .bat 파일은 어떻습니까?</target>
        </trans-unit>
        <trans-unit id="30081f64586833b513d3f4b22f9ef791d92a10e2" translate="yes" xml:space="preserve">
          <source>What does defining a vendor binary in composer.json do?</source>
          <target state="translated">composer.json에서 공급 업체 바이너리를 정의하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="06b2c135c0cd5ad382fc2e7bf514ca2bf8828d46" translate="yes" xml:space="preserve">
          <source>What does it do?</source>
          <target state="translated">무엇을합니까?</target>
        </trans-unit>
        <trans-unit id="adc638faaaf87be7bc4cc0454f0eb509965039b9" translate="yes" xml:space="preserve">
          <source>What happens when Composer is run on a composer.json that defines vendor binaries?</source>
          <target state="translated">공급 업체 바이너리를 정의하는 composer.json에서 Composer를 실행하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="5184026197d912a695c49849fc6287f8e51aa72a" translate="yes" xml:space="preserve">
          <source>What happens when Composer is run on a composer.json that has dependencies with vendor binaries listed?</source>
          <target state="translated">공급 업체 바이너리와의 종속성이있는 composer.json에서 Composer를 실행하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="c1d17aa62a9f54da812f8ab902182f685fee5e31" translate="yes" xml:space="preserve">
          <source>What is a script?</source>
          <target state="translated">스크립트 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="54f357b9d455ab56fa552807330bc791b358f17f" translate="yes" xml:space="preserve">
          <source>What is a vendor binary?</source>
          <target state="translated">공급 업체 바이너리는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="db07c5e58f27b4b819c82d694edde0dbe4df252d" translate="yes" xml:space="preserve">
          <source>What to do after prompting for authentication, one of: &lt;code&gt;true&lt;/code&gt; (always store), &lt;code&gt;false&lt;/code&gt; (do not store) and &lt;code&gt;&quot;prompt&quot;&lt;/code&gt; (ask every time), defaults to &lt;code&gt;&quot;prompt&quot;&lt;/code&gt;.</source>
          <target state="translated">인증을 요구 한 후 수행 할 작업 : &lt;code&gt;true&lt;/code&gt; (항상 저장), &lt;code&gt;false&lt;/code&gt; (저장 안 함) 및 &lt;code&gt;&quot;prompt&quot;&lt;/code&gt; (매번 묻기) 중 하나는 기본적으로 &lt;code&gt;&quot;prompt&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bdd7b2932eef0cce336346f9c80055042ab8f8ab" translate="yes" xml:space="preserve">
          <source>When Composer finds the right package, either in Packagist or in a repo you have specified, it then uses the versioning features of the package's VCS (i.e., branches and tags) to attempt to find the best match for the version constraint you have specified. Be sure to read about versions and package resolution in the &lt;a href=&quot;articles/versions.md&quot;&gt;versions article&lt;/a&gt;.</source>
          <target state="translated">Composer가 Packagist 또는 지정한 저장소에서 올바른 패키지를 찾으면 패키지의 VCS (예 : 분기 및 태그)의 버전 관리 기능을 사용하여 지정한 버전 제약 조건에 가장 적합한 것을 찾습니다. &lt;a href=&quot;articles/versions.md&quot;&gt;버전 기사&lt;/a&gt; 에서 버전 및 패키지 확인에 대해 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="330bd29ed9bde50bbefed7841e77d3ddf9152ef0" translate="yes" xml:space="preserve">
          <source>When Composer has a complete list of available versions from your VCS, it then finds the highest version that matches all version constraints in your project (it's possible that other packages require more specific versions of the library than you do, so the version it chooses may not always be the highest available version) and it downloads a zip archive of that tag to unpack in the correct location in your &lt;code&gt;vendor&lt;/code&gt; directory.</source>
          <target state="translated">Composer가 VCS에서 사용 가능한 전체 버전 목록을 가지고 있으면 프로젝트의 모든 버전 제약 조건과 일치하는 가장 높은 버전을 찾습니다 (다른 패키지에는 사용자보다 더 구체적인 버전의 라이브러리가 필요할 수 있으므로 선택한 버전이 항상 사용 가능한 최고 버전은 아니며) 해당 태그의 zip 아카이브를 다운로드하여 &lt;code&gt;vendor&lt;/code&gt; 디렉토리 의 올바른 위치에 압축을 풉니 다 .</target>
        </trans-unit>
        <trans-unit id="379c8b0a55dfb40b786bfa68a000e66ed7743d3d" translate="yes" xml:space="preserve">
          <source>When Composer has finished installing, it writes all of the packages and the exact versions of them that it downloaded to the &lt;code&gt;composer.lock&lt;/code&gt; file, locking the project to those specific versions. You should commit the &lt;code&gt;composer.lock&lt;/code&gt; file to your project repo so that all people working on the project are locked to the same versions of dependencies (more below).</source>
          <target state="translated">Composer는 설치를 완료하면 모든 패키지와 패키지의 정확한 버전을 &lt;code&gt;composer.lock&lt;/code&gt; 파일에 기록하여 프로젝트를 해당 특정 버전으로 잠급니다. 프로젝트에서 작업하는 모든 사람이 동일한 버전의 종속성 (아래 참조)에 고정되도록 &lt;code&gt;composer.lock&lt;/code&gt; 파일을 프로젝트 저장소에 커밋해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b2096ba9a24281e11e89594c2a5786ba0fd588c2" translate="yes" xml:space="preserve">
          <source>When GitHub, GitLab or BitBucket repositories are mirrored on your local satis, the build process will include the location of the downloads these platforms make available. This means that the repository and your setup depend on the availability of these services.</source>
          <target state="translated">GitHub, GitLab 또는 BitBucket 리포지토리가 로컬 satis에 미러링되면 빌드 프로세스에 이러한 플랫폼에서 제공하는 다운로드 위치가 포함됩니다. 즉, 리포지토리와 설정은 이러한 서비스의 가용성에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="2c38858ace81518601ebddaca363c41e0d18d440" translate="yes" xml:space="preserve">
          <source>When an event is fired, your PHP callback receives as first argument a &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; object. This object has a &lt;code&gt;getName()&lt;/code&gt; method that lets you retrieve the event name.</source>
          <target state="translated">이벤트가 발생하면 PHP 콜백은 첫 번째 인수로 &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; 객체를받습니다. 이 객체에는 이벤트 이름을 검색 할 수 있는 &lt;code&gt;getName()&lt;/code&gt; 메서드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="27e829a5a3a13d27b6ea68ddcc31dda0e8d8fb9a" translate="yes" xml:space="preserve">
          <source>When branch names look like versions, we have to clarify for composer that we're trying to check out a branch and not a tag. In the above example, we have two version branches: &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;. To get Composer to check out one of these branches, you must specify a version constraint that looks like this: &lt;code&gt;v1.x-dev&lt;/code&gt;. The &lt;code&gt;.x&lt;/code&gt; is an arbitrary string that Composer requires to tell it that we're talking about the &lt;code&gt;v1&lt;/code&gt; branch and not a &lt;code&gt;v1&lt;/code&gt; tag (alternatively, you can name the branch &lt;code&gt;v1.x&lt;/code&gt; instead of &lt;code&gt;v1&lt;/code&gt;). In the case of a branch with a version-like name (&lt;code&gt;v1&lt;/code&gt;, in this case), you append &lt;code&gt;-dev&lt;/code&gt; as a suffix, rather than using &lt;code&gt;dev-&lt;/code&gt; as a prefix.</source>
          <target state="translated">브랜치 이름이 버전처럼 보이면 작곡가가 태그가 아닌 브랜치를 체크하려고한다는 것을 명확히해야합니다. 위의 예에는 &lt;code&gt;v1&lt;/code&gt; 과 &lt;code&gt;v2&lt;/code&gt; 의 두 가지 버전 분기가 있습니다 . Composer가 이러한 분기 중 하나를 체크 아웃하도록하려면 &lt;code&gt;v1.x-dev&lt;/code&gt; 와 같은 버전 제한 조건을 지정해야합니다 . &lt;code&gt;.x&lt;/code&gt; 와는 작곡가가 우리가에 대해 얘기하고 있음을 이야기하는 데 필요한 임의의 문자열입니다 &lt;code&gt;v1&lt;/code&gt; 지점이 아닌 &lt;code&gt;v1&lt;/code&gt; 태그 (또는, 분기 이름을 지정할 수 있습니다 &lt;code&gt;v1.x&lt;/code&gt; 대신 &lt;code&gt;v1&lt;/code&gt; 이 ). 버전과 같은 이름을 가진 분기 ( 이 경우 &lt;code&gt;v1&lt;/code&gt; )의 경우 &lt;code&gt;-dev&lt;/code&gt; 를 추가합니다. &lt;code&gt;dev-&lt;/code&gt; 를 접두사로 사용하지 않고 접미사로 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed76d851aef4697b0588c2b1b8ca05c64897d1a7" translate="yes" xml:space="preserve">
          <source>When facing any kind of problems using Composer, be sure to &lt;strong&gt;work with the latest version&lt;/strong&gt;. See &lt;a href=&quot;../03-cli.md#self-update&quot;&gt;self-update&lt;/a&gt; for details.</source>
          <target state="translated">Composer 사용시 문제가 발생 &lt;strong&gt;하면 최신 버전&lt;/strong&gt; 으로 &lt;strong&gt;작업&lt;/strong&gt; 하십시오 . 자세한 내용은 &lt;a href=&quot;../03-cli.md#self-update&quot;&gt;자체 업데이트&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c97a65124bba7b583bf6dd8b25ef7b083d681222" translate="yes" xml:space="preserve">
          <source>When searching for packages, satis will attempt to resolve all the required packages from the listed repositories. Therefore, if you are requiring a package from Packagist, you will need to define it in your &lt;code&gt;satis.json&lt;/code&gt;.</source>
          <target state="translated">패키지를 검색 할 때 satis는 나열된 저장소에서 필요한 모든 패키지를 해결하려고 시도합니다. 당신이 Packagist에서 패키지를 필요로하는 경우 따라서, 당신은 그것을 정의해야합니다 &lt;code&gt;satis.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b89b27505fd76c037f49af242627e21ac55a5d9" translate="yes" xml:space="preserve">
          <source>When this is enabled, Composer will prefer more stable packages over unstable ones when finding compatible stable packages is possible. If you require a dev version or only alphas are available for a package, those will still be selected granted that the minimum-stability allows for it.</source>
          <target state="translated">이것이 활성화되면 Composer는 호환 가능한 안정적인 패키지를 찾을 수있을 때 불안정한 패키지보다 안정적인 패키지를 선호합니다. 개발자 버전이 필요하거나 패키지에 알파 만 사용할 수있는 경우 최소 안정성으로 허용되는 알파가 여전히 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="16c2acf657e1e7462fae363786252a003708539b" translate="yes" xml:space="preserve">
          <source>When you are using a VCS repository, you will only get comparable versions for branches that look like versions, such as &lt;code&gt;2.0&lt;/code&gt; or &lt;code&gt;2.0.x&lt;/code&gt;. For your &lt;code&gt;master&lt;/code&gt; branch, you will get a &lt;code&gt;dev-master&lt;/code&gt; version. For your &lt;code&gt;bugfix&lt;/code&gt; branch, you will get a &lt;code&gt;dev-bugfix&lt;/code&gt; version.</source>
          <target state="translated">VCS 리포지토리를 사용하는 경우 &lt;code&gt;2.0&lt;/code&gt; 또는 &lt;code&gt;2.0.x&lt;/code&gt; 와 같은 버전처럼 보이는 분기에 대한 비교 가능한 버전 만 제공됩니다 . 당신을 위해 &lt;code&gt;master&lt;/code&gt; 지점, 당신은 얻을 것이다 &lt;code&gt;dev-master&lt;/code&gt; 버전. 당신을 위해 &lt;code&gt;bugfix&lt;/code&gt; 지점, 당신은 얻을 것이다 &lt;code&gt;dev-bugfix&lt;/code&gt; 버전.</target>
        </trans-unit>
        <trans-unit id="578ff736765295027c32e5b458b5c8d3736147d8" translate="yes" xml:space="preserve">
          <source>When you ironed out that process, what you would typically do is run this command as a cron job on a server. It would then update all your package info much like Packagist does.</source>
          <target state="translated">해당 프로세스를 다룰 때 일반적으로 서버에서 크론 작업으로이 명령을 실행합니다. 그런 다음 Packagist와 마찬가지로 모든 패키지 정보를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="dfd16645311a952154d169843341b77074136f03" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;php composer.phar update&lt;/code&gt;, you should get your modified version of &lt;code&gt;monolog/monolog&lt;/code&gt; instead of the one from packagist.</source>
          <target state="translated">&lt;code&gt;php composer.phar update&lt;/code&gt; 를 실행할 때 , packagist가 아닌 수정 된 버전의 &lt;code&gt;monolog/monolog&lt;/code&gt; 를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="7d74443837a95b2fa9335f8d4442b1085516a7ce" translate="yes" xml:space="preserve">
          <source>When you run the command it will interactively ask you to fill in the fields, while using some smart defaults.</source>
          <target state="translated">명령을 실행할 때 일부 스마트 기본값을 사용하는 동안 대화식으로 필드를 채우도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="57fe5af39bff192c35cd0f7cda06f541982c4d26" translate="yes" xml:space="preserve">
          <source>When you run this command, one of two things may happen:</source>
          <target state="translated">이 명령을 실행하면 다음 두 가지 중 하나가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a797fa35e005d95509844e0d650216640084343c" translate="yes" xml:space="preserve">
          <source>When you try to install packages from a Git repository and you use the &lt;code&gt;ControlMaster&lt;/code&gt; setting for your SSH connection, Composer might hang endlessly and you see a &lt;code&gt;sh&lt;/code&gt; process in the &lt;code&gt;defunct&lt;/code&gt; state in your process list.</source>
          <target state="translated">Git 리포지토리에서 패키지를 설치하려고 할 때 SSH 연결에 &lt;code&gt;ControlMaster&lt;/code&gt; 설정을 사용하면 Composer가 끝없이 멈추고 프로세스 목록에서 &lt;code&gt;sh&lt;/code&gt; 프로세스가 작동 &lt;code&gt;defunct&lt;/code&gt; 상태로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afc682517d8479f6ff4e831f3be16bbfa871d292" translate="yes" xml:space="preserve">
          <source>When your private repositories are password protected, you can store the authentication details permanently. The first time Composer needs to authenticate against some domain it will prompt you for a username/password and then you will be asked whether you want to store it.</source>
          <target state="translated">개인 리포지토리가 암호로 보호 된 경우 인증 세부 정보를 영구적으로 저장할 수 있습니다. Composer가 처음으로 일부 도메인에 대해 인증해야하는 경우 사용자 이름 / 암호를 입력하라는 메시지가 표시되며 저장 여부를 묻는 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6bddb0ff394caa8056ccde7e395df6f0f26be603" translate="yes" xml:space="preserve">
          <source>Whether a class is found or not, that fact is always cached in APCu so it can be returned quickly on the next request.</source>
          <target state="translated">클래스가 있는지 여부에 관계없이 해당 팩트는 항상 APCu에 캐시되므로 다음 요청에서 빠르게 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0346f1fe4eefd78d63cd15b004c9fd23e3db6fcd" translate="yes" xml:space="preserve">
          <source>Which version numbering system does Composer itself use?</source>
          <target state="translated">Composer 자체는 어떤 버전 번호 체계를 사용합니까?</target>
        </trans-unit>
        <trans-unit id="ee75df82513d08f03fd8d6d641174c040cc42474" translate="yes" xml:space="preserve">
          <source>While Composer supports locking dependencies to a specific commit using the &lt;code&gt;#commit-ref&lt;/code&gt; syntax, there are certain caveats that one should take into account. The most important one is &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;documented&lt;/a&gt;, but frequently overlooked:</source>
          <target state="translated">Composer는 &lt;code&gt;#commit-ref&lt;/code&gt; 구문을 사용하여 특정 커밋에 대한 종속성 잠금을 지원하지만 고려해야 할 몇 가지주의 사항이 있습니다. 가장 중요한 것은 &lt;a href=&quot;../04-schema.md#package-links&quot;&gt;문서화&lt;/a&gt; 되어 있지만 자주 간과됩니다.</target>
        </trans-unit>
        <trans-unit id="d6d799cb7768d153f8ca0f019e96c5e0141d360d" translate="yes" xml:space="preserve">
          <source>While you will probably want to put your packages on packagist most of the time, there are some use cases for hosting your own repository.</source>
          <target state="translated">대부분의 경우 패키지를 packagist에 배치하고 싶을 수도 있지만 자체 리포지토리를 호스팅하는 사용 사례가 있습니다.</target>
        </trans-unit>
        <trans-unit id="935e695892681c7f60fc9d678c9d7dcf3efcc0fc" translate="yes" xml:space="preserve">
          <source>Why aliases?</source>
          <target state="translated">왜 별칭입니까?</target>
        </trans-unit>
        <trans-unit id="942b319544623ce191f8e960337a39b9d36ea4ed" translate="yes" xml:space="preserve">
          <source>Why are unbound version constraints a bad idea?</source>
          <target state="translated">언 바운드 버전 제약이 나쁜 생각 인 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="b3a27a1e4cde9703469f9f8ccb701d8cf42b2310" translate="yes" xml:space="preserve">
          <source>Why are version constraints combining comparisons and wildcards a bad idea?</source>
          <target state="translated">비교와 와일드 카드를 결합한 버전 제약 조건이 나쁜 생각 인 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="4849bb86bdd0dff8d3574ff2f644dbbdede59860" translate="yes" xml:space="preserve">
          <source>Why can't Composer load repositories recursively?</source>
          <target state="translated">Composer가 저장소를 재귀 적으로로드 할 수없는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="7acb8e3d9d80fabb1c5a25eba5b8f0cc1519ec5b" translate="yes" xml:space="preserve">
          <source>Wildcard Version Range (.*)</source>
          <target state="translated">와일드 카드 버전 범위 (. *)</target>
        </trans-unit>
        <trans-unit id="4851296022cbf4ca37bbc835b38cf48f8392e4b3" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--verbose&lt;/code&gt; option you get some more information about what was changed:</source>
          <target state="translated">&lt;code&gt;--verbose&lt;/code&gt; 옵션을 사용하면 변경된 사항에 대한 추가 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b12b24cc6c213ab807bf803a23448ee364830c00" translate="yes" xml:space="preserve">
          <source>Without a vendor alias, Composer will use the PEAR channel name as the vendor portion of the package name:</source>
          <target state="translated">공급 업체 별명이 없으면 Composer는 PEAR 채널 이름을 패키지 이름의 공급 업체 부분으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f1152c338592a36794dba00a974a9b43e867023c" translate="yes" xml:space="preserve">
          <source>Writing Version Constraints</source>
          <target state="translated">버전 제약 조건 작성</target>
        </trans-unit>
        <trans-unit id="e8e72840c3bd313ca905e833526606f705fe9906" translate="yes" xml:space="preserve">
          <source>Writing custom commands</source>
          <target state="translated">사용자 정의 명령 작성</target>
        </trans-unit>
        <trans-unit id="89689e1a2576d8351d3455024a253e1be33852ef" translate="yes" xml:space="preserve">
          <source>Xdebug impact on Composer</source>
          <target state="translated">Composer에 대한 Xdebug 영향</target>
        </trans-unit>
        <trans-unit id="d13bb055de512c4c9634946174960030f1dfcb98" translate="yes" xml:space="preserve">
          <source>Yes, there are two ways an alternate vendor binary location can be specified:</source>
          <target state="translated">예, 대체 공급 업체 바이너리 위치를 지정할 수있는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="232a9479ae52b78bc139efa8d4abd9d73a572ed4" translate="yes" xml:space="preserve">
          <source>You are using &lt;code&gt;symfony/monolog-bundle&lt;/code&gt; which requires &lt;code&gt;monolog/monolog&lt;/code&gt; version &lt;code&gt;1.*&lt;/code&gt;. So you need your &lt;code&gt;dev-bugfix&lt;/code&gt; to match that constraint.</source>
          <target state="translated">&lt;code&gt;monolog/monolog&lt;/code&gt; 버전 &lt;code&gt;1.*&lt;/code&gt; 이 필요한 &lt;code&gt;symfony/monolog-bundle&lt;/code&gt; 을 사용하고 있습니다. 따라서 해당 제약 조건과 일치하도록 &lt;code&gt;dev-bugfix&lt;/code&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="92d8aa0bd892994fe5cead64b812e1207b96563b" translate="yes" xml:space="preserve">
          <source>You can also call a shell/bash script, which will have the path to the PHP executable available in it as a &lt;code&gt;PHP_BINARY&lt;/code&gt; env var.</source>
          <target state="translated">쉘 / bash 스크립트를 호출 할 수도 있습니다.이 스크립트에는 PHP 실행 파일에 대한 경로가 &lt;code&gt;PHP_BINARY&lt;/code&gt; env var로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="47050eeb1ab6dba82e5504b026ca0279bd041182" translate="yes" xml:space="preserve">
          <source>You can also configure these by hand using the config command if you need to configure a production machine to be able to run non-interactive installs. For example to enter credentials for example.org one could type:</source>
          <target state="translated">비 대화식 설치를 실행할 수 있도록 프로덕션 시스템을 구성해야하는 경우 config 명령을 사용하여 직접 구성 할 수도 있습니다. 예를 들어 example.org에 대한 자격 증명을 입력하려면 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="b1d0c2f7f0fd5c31af27505d8741dd13f613349e" translate="yes" xml:space="preserve">
          <source>You can also edit the values of the following properties:</source>
          <target state="translated">다음 특성의 값을 편집 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f61da855975a7c0669e1a339ed328dae68568d1" translate="yes" xml:space="preserve">
          <source>You can also give additional arguments to the script handler by appending &lt;code&gt;--&lt;/code&gt; followed by the handler arguments. e.g. &lt;code&gt;composer run-script post-install-cmd -- --check&lt;/code&gt; will pass&lt;code&gt;--check&lt;/code&gt; along to the script handler. Those arguments are received as CLI arg by CLI handlers, and can be retrieved as an array via &lt;code&gt;$event-&amp;gt;getArguments()&lt;/code&gt; by PHP handlers.</source>
          <target state="translated">또한 핸들러 인수 뒤에 &lt;code&gt;--&lt;/code&gt; 를 추가하여 스크립트 핸들러에 추가 인수를 제공 할 수도 있습니다 . 예를 들어 &lt;code&gt;composer run-script post-install-cmd -- --check&lt;/code&gt; 는 &lt;code&gt;--check&lt;/code&gt; 를 스크립트 처리기에 전달 합니다. 이러한 인수는 CLI 핸들러에 의해 CLI 인수로 수신 되며 PHP 핸들러에 의해 &lt;code&gt;$event-&amp;gt;getArguments()&lt;/code&gt; 를 통해 배열로 검색 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="318fba6a4eb9d30d820aa00958f0a0efc84cb423" translate="yes" xml:space="preserve">
          <source>You can also refer a script and pass it new arguments:</source>
          <target state="translated">스크립트를 참조하여 새 인수를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f23a226bdf3ac7de179d20ef06e91398298bec68" translate="yes" xml:space="preserve">
          <source>You can also search for more than one term by passing multiple arguments.</source>
          <target state="translated">여러 인수를 전달하여 둘 이상의 용어를 검색 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e277031eed1b3ebd11ad64d6cb86fcc011e4a79a" translate="yes" xml:space="preserve">
          <source>You can also use wildcards to update a bunch of packages at once:</source>
          <target state="translated">와일드 카드를 사용하여 여러 패키지를 한 번에 업데이트 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc70b71ddbbc9db27ba6fb110e2c264c1454b235" translate="yes" xml:space="preserve">
          <source>You can check out any package and start developing on patches for example.</source>
          <target state="translated">예를 들어 모든 패키지를 체크 아웃하고 패치 개발을 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c989054b70bcc085a6cc0a500077648747980ec" translate="yes" xml:space="preserve">
          <source>You can define multiple ranges. Ranges separated by a space () or comma (&lt;code&gt;,&lt;/code&gt;) will be treated as a &lt;strong&gt;logical AND&lt;/strong&gt;. A double pipe (&lt;code&gt;||&lt;/code&gt;) will be treated as a &lt;strong&gt;logical OR&lt;/strong&gt;. AND has higher precedence than OR.</source>
          <target state="translated">여러 범위를 정의 할 수 있습니다. 공백 () 또는 쉼표 ( &lt;code&gt;,&lt;/code&gt; ) 로 구분 된 범위 는 &lt;strong&gt;논리 AND&lt;/strong&gt; 로 처리됩니다 . 이중 파이프 ( &lt;code&gt;||&lt;/code&gt; )는 &lt;strong&gt;논리 OR&lt;/strong&gt; 로 처리됩니다 . AND가 OR보다 우선 순위가 높습니다.</target>
        </trans-unit>
        <trans-unit id="d550a4be6c1d6ecf6c3187d977dbbadbbef60667" translate="yes" xml:space="preserve">
          <source>You can deploy application packages.</source>
          <target state="translated">응용 프로그램 패키지를 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25617ca19a07cc38bb9e4fbf40ca922966b9f2a8" translate="yes" xml:space="preserve">
          <source>You can disable Packagist.org globally by using the global config flag:</source>
          <target state="translated">전역 구성 플래그를 사용하여 Packagist.org를 전역 적으로 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="818ebdafb4698871127705adf6fc094348356a99" translate="yes" xml:space="preserve">
          <source>You can disable the default Packagist.org repository by adding this to your &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">당신은 당신이를 추가하여 기본 Packagist.org 저장소를 사용하지 않도록 설정할 수 있습니다 &lt;code&gt;composer.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="be4dcb1f385e4785fdaee3137b5b2d0d17d4e0a1" translate="yes" xml:space="preserve">
          <source>You can enable IPv6 again with:</source>
          <target state="translated">다음을 사용하여 IPv6을 다시 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23e2fc209445e06617cb36018112cb556e7e0d1a" translate="yes" xml:space="preserve">
          <source>You can even add your own code to the autoloader by adding an &lt;a href=&quot;04-schema.md#autoload&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; field to &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 에&lt;a href=&quot;04-schema.md#autoload&quot;&gt; &lt;code&gt;autoload&lt;/code&gt; &lt;/a&gt; 필드를 추가하여 자신의 코드를 자동 로더에 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d69b8155ec189620730e3daf1051489521808063" translate="yes" xml:space="preserve">
          <source>You can even pass the package version, which will tell you the details of that specific version.</source>
          <target state="translated">패키지 버전을 전달하면 해당 버전의 세부 정보를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e124e97a01fd07f19167a1cd6477ea415996804" translate="yes" xml:space="preserve">
          <source>You can fix this by aliasing version 0.11 to 0.1:</source>
          <target state="translated">앨리어스 버전 0.11 ~ 0.1을 사용하여이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a38e05f55669ad85d97016d74c8d3f2795944229" translate="yes" xml:space="preserve">
          <source>You can install Composer to a specific directory by using the &lt;code&gt;--install-dir&lt;/code&gt; option and additionally (re)name it as well using the &lt;code&gt;--filename&lt;/code&gt; option. When running the installer when following &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page instructions&lt;/a&gt; add the following parameters:</source>
          <target state="translated">&lt;code&gt;--install-dir&lt;/code&gt; 옵션 을 사용하여 Composer를 특정 디렉토리에 설치 하고 추가로 &lt;code&gt;--filename&lt;/code&gt; 옵션을 사용하여 이름을 바꿀 수 있습니다 . &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;다운로드 페이지 지시 사항을&lt;/a&gt; 따를 때 설치 프로그램을 실행할 때 다음 매개 변수를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="be5ff711194d3da4970dfdaa31fbc2f9ec96d666" translate="yes" xml:space="preserve">
          <source>You can make a permanent swap file following this &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;자습서에&lt;/a&gt; 따라 영구 스왑 파일을 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="059e2a4ea7a2b57e8e95e25f4c1be4e4e855fc92" translate="yes" xml:space="preserve">
          <source>You can optionally specify a version constraint after the package to limit the search.</source>
          <target state="translated">선택적으로 패키지 다음에 버전 제한 조건을 지정하여 검색을 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44247cd92513b88c8690622827b1c538d8a672e5" translate="yes" xml:space="preserve">
          <source>You can place the Composer PHAR anywhere you wish. If you put it in a directory that is part of your &lt;code&gt;PATH&lt;/code&gt;, you can access it globally. On Unix systems you can even make it executable and invoke it without directly using the &lt;code&gt;php&lt;/code&gt; interpreter.</source>
          <target state="translated">원하는 곳에 Composer PHAR을 배치 할 수 있습니다. &lt;code&gt;PATH&lt;/code&gt; 의 일부인 디렉토리에 배치 하면 글로벌로 액세스 할 수 있습니다. 유닉스 시스템에서는 &lt;code&gt;php&lt;/code&gt; 인터프리터를 직접 사용하지 않고도 실행 가능하게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="66e6f726f4e93634057c9bc64f8e7412b4ccf33c" translate="yes" xml:space="preserve">
          <source>You can set &lt;code&gt;bin-dir&lt;/code&gt; to &lt;code&gt;./&lt;/code&gt; to put binaries in your project root.</source>
          <target state="translated">&lt;code&gt;bin-dir&lt;/code&gt; 을 &lt;code&gt;./&lt;/code&gt; 로 설정 하여 프로젝트 루트에 바이너리를 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1529802815269f9ccc9f98d7ed7ce8dc2265d3a0" translate="yes" xml:space="preserve">
          <source>You can set a number of environment variables that override certain settings. Whenever possible it is recommended to specify these settings in the &lt;code&gt;config&lt;/code&gt; section of &lt;code&gt;composer.json&lt;/code&gt; instead. It is worth noting that the env vars will always take precedence over the values specified in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">특정 설정을 재정의하는 여러 환경 변수를 설정할 수 있습니다. 가능하면 &lt;code&gt;composer.json&lt;/code&gt; 의 &lt;code&gt;config&lt;/code&gt; 섹션 에서 이러한 설정을 지정하는 것이 좋습니다 . env vars는 항상 &lt;code&gt;composer.json&lt;/code&gt; 에 지정된 값보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="11459ebfeb63e743171fd7e4cf5e5a1bc70fd3bf" translate="yes" xml:space="preserve">
          <source>You can set custom script descriptions with the following in your &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 에서 다음을 사용하여 사용자 정의 스크립트 설명을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31a7b3e235562ba59cb0ff9f6a273d0099fd6e4e" translate="yes" xml:space="preserve">
          <source>You can specify a pattern with a &lt;code&gt;*&lt;/code&gt; wildcard. &lt;code&gt;1.0.*&lt;/code&gt; is the equivalent of &lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt;.</source>
          <target state="translated">당신은과 패턴을 지정할 수 있습니다 &lt;code&gt;*&lt;/code&gt; 와일드 카드를. &lt;code&gt;1.0.*&lt;/code&gt; 는 &lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="df4750b176dc87d7120530cc24bccad70a6c661a" translate="yes" xml:space="preserve">
          <source>You can specify the exact version of a package. This will tell Composer to install this version and this version only. If other dependencies require a different version, the solver will ultimately fail and abort any install or update procedures.</source>
          <target state="translated">패키지의 정확한 버전을 지정할 수 있습니다. 이렇게하면 Composer에이 버전과이 버전 만 설치하도록 지시합니다. 다른 종속성에 다른 버전이 필요한 경우 솔버는 결국 실패하고 설치 또는 업데이트 절차를 중단합니다.</target>
        </trans-unit>
        <trans-unit id="66933a7f82f185e606bc5150c277062e4eba4e61" translate="yes" xml:space="preserve">
          <source>You can tell Satis to selectively update only particular packages or process only a repository with a given URL. This cuts down the time it takes to rebuild the &lt;code&gt;package.json&lt;/code&gt; file and is helpful if you use (custom) webhooks to trigger rebuilds whenever code is pushed into one of your repositories.</source>
          <target state="translated">Satis에게 특정 패키지 만 선택적으로 업데이트하거나 지정된 URL을 가진 저장소 만 처리하도록 지시 할 수 있습니다. 이렇게하면 &lt;code&gt;package.json&lt;/code&gt; 파일 을 다시 작성하는 데 걸리는 시간이 단축되고 코드를 리포지토리 중 하나로 푸시 할 때마다 (사용자 지정) webhook을 사용 하여 다시 작성 을 트리거 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="212d30ec5b49a0affbd51321e0d61f94172968ab" translate="yes" xml:space="preserve">
          <source>You can test version constraints using &lt;a href=&quot;https://semver.mwl.be&quot;&gt;semver.mwl.be&lt;/a&gt;. Fill in a package name and it will autofill the default version constraint which Composer would add to your &lt;code&gt;composer.json&lt;/code&gt; file. You can adjust the version constraint and the tool will highlight all releases that match.</source>
          <target state="translated">&lt;a href=&quot;https://semver.mwl.be&quot;&gt;semver.mwl.be를&lt;/a&gt; 사용하여 버전 제약 조건을 테스트 할 수 있습니다 . 패키지 이름을 입력하면 Composer가 &lt;code&gt;composer.json&lt;/code&gt; 파일에 추가 할 기본 버전 제약 조건을 자동으로 채 웁니다 . 버전 제약 조건을 조정할 수 있으며 도구는 일치하는 모든 릴리스를 강조 표시합니다.</target>
        </trans-unit>
        <trans-unit id="1f880b40e14dbe74ab6577c31e1cb939d9ef7403" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;03-cli.md#show&quot;&gt;&lt;code&gt;show --platform&lt;/code&gt;&lt;/a&gt; to get a list of your locally available platform packages.</source>
          <target state="translated">&lt;a href=&quot;03-cli.md#show&quot;&gt; &lt;code&gt;show --platform&lt;/code&gt; &lt;/a&gt; 을 사용 하여 로컬로 사용 가능한 플랫폼 패키지 목록을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c70b74b13c3da6aababb2305fe63db4c57b857b" translate="yes" xml:space="preserve">
          <source>You can use Composer to create new projects from an existing package. This is the equivalent of doing a git clone/svn checkout followed by a &lt;code&gt;composer install&lt;/code&gt; of the vendors.</source>
          <target state="translated">Composer를 사용하여 기존 패키지에서 새 프로젝트를 작성할 수 있습니다. 이것은 git clone / svn checkout 과 벤더 의 &lt;code&gt;composer install&lt;/code&gt; 를 수행하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7e0dbd29592dd6aaf01f3bbef96e2794758f6933" translate="yes" xml:space="preserve">
          <source>You can use the classmap generation support to define autoloading for all libraries that do not follow PSR-0/4. To configure this you specify all directories or files to search for classes.</source>
          <target state="translated">클래스 맵 생성 지원을 사용하여 PSR-0 / 4를 따르지 않는 모든 라이브러리에 대한 자동로드를 정의 할 수 있습니다. 이를 구성하려면 클래스를 검색 할 모든 디렉토리 또는 파일을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="edc081f399ca138529927a30617249f7dd8e5aa2" translate="yes" xml:space="preserve">
          <source>You define a mapping from namespaces to directories. The &lt;code&gt;src&lt;/code&gt; directory would be in your project root, on the same level as &lt;code&gt;vendor&lt;/code&gt; directory is. An example filename would be &lt;code&gt;src/Foo.php&lt;/code&gt; containing an &lt;code&gt;Acme\Foo&lt;/code&gt; class.</source>
          <target state="translated">네임 스페이스에서 디렉토리로의 맵핑을 정의합니다. &lt;code&gt;src&lt;/code&gt; 로 디렉토리는 동일한 수준에, 당신의 프로젝트 루트에있을 것입니다 &lt;code&gt;vendor&lt;/code&gt; 디렉토리입니다. 파일 이름의 예 는 &lt;code&gt;Acme\Foo&lt;/code&gt; 클래스를 포함하는 &lt;code&gt;src/Foo.php&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b5be00608cf1fdfcf4fae1cf04e361e548a437c6" translate="yes" xml:space="preserve">
          <source>You give it a &lt;code&gt;composer.json&lt;/code&gt; containing repositories, typically VCS and package repository definitions. It will fetch all the packages that are &lt;code&gt;require&lt;/code&gt;d and dump a &lt;code&gt;packages.json&lt;/code&gt; that is your &lt;code&gt;composer&lt;/code&gt; repository.</source>
          <target state="translated">저장소, 일반적으로 VCS 및 패키지 저장소 정의를 포함 하는 &lt;code&gt;composer.json&lt;/code&gt; 을 제공합니다 . d 가 &lt;code&gt;require&lt;/code&gt; 모든 패키지를 가져오고 &lt;code&gt;composer&lt;/code&gt; 저장소 인 &lt;code&gt;packages.json&lt;/code&gt; 을 덤프 합니다.</target>
        </trans-unit>
        <trans-unit id="7f3f9919240a9f9cefbca07f2401866024df7494" translate="yes" xml:space="preserve">
          <source>You have a project that depends on a number of libraries.</source>
          <target state="translated">많은 라이브러리에 의존하는 프로젝트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c6a8cc4f3cf7e82f808e84dfe803c4507f5d466" translate="yes" xml:space="preserve">
          <source>You may pass the &lt;code&gt;--no-plugins&lt;/code&gt; option to composer commands to disable all installed plugins. This may be particularly helpful if any of the plugins causes errors and you wish to update or uninstall it.</source>
          <target state="translated">설치된 모든 플러그인을 비활성화하기 위해 &lt;code&gt;--no-plugins&lt;/code&gt; 옵션을 composer 명령에 전달할 수 있습니다 . 이는 플러그인 중 하나에서 오류가 발생하여 업데이트하거나 제거하려는 경우 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a011ed0c983ca176dda6d1f7aab64b156b38e178" translate="yes" xml:space="preserve">
          <source>You may put a &lt;code&gt;config.json&lt;/code&gt; file into the location which &lt;code&gt;COMPOSER_HOME&lt;/code&gt; points to. Composer will merge this configuration with your project's &lt;code&gt;composer.json&lt;/code&gt; when you run the &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;COMPOSER_HOME&lt;/code&gt; 이 가리키는 위치에 &lt;code&gt;config.json&lt;/code&gt; 파일을 넣을 수 있습니다 . Composer는 &lt;code&gt;install&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; 명령 을 실행할 때이 구성을 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 과 병합 합니다.</target>
        </trans-unit>
        <trans-unit id="f06187869e01bb34fb096711889bc95109aa0fb2" translate="yes" xml:space="preserve">
          <source>You may run into errors if IPv6 is not configured correctly. A common error is:</source>
          <target state="translated">IPv6이 올바르게 구성되지 않으면 오류가 발생할 수 있습니다. 일반적인 오류는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="acc8d3298fe776fc118a311a80b572321ff9bcc8" translate="yes" xml:space="preserve">
          <source>You may wish to alter or expand Composer's functionality with your own. For example if your environment poses special requirements on the behaviour of Composer which do not apply to the majority of its users or if you wish to accomplish something with composer in a way that is not desired by most users.</source>
          <target state="translated">자신 만의 Composer 기능을 변경하거나 확장 할 수 있습니다. 예를 들어, 사용자 환경에 대부분의 사용자에게 적용되지 않는 Composer의 동작에 대한 특별한 요구 사항이 있거나 대부분의 사용자가 원하지 않는 방식으로 Composer로 무언가를 달성하려는 경우.</target>
        </trans-unit>
        <trans-unit id="a2eb123c60238bf801143f7856b0c4a859b3649a" translate="yes" xml:space="preserve">
          <source>You might run into this if you are trying to require dev, alpha, beta, or RC versions of a package. Read more about stability flags and the &lt;code&gt;minimum-stability&lt;/code&gt; key on the &lt;a href=&quot;04-schema.md&quot;&gt;schema page&lt;/a&gt;.</source>
          <target state="translated">패키지의 개발자, 알파, 베타 또는 RC 버전이 필요한 경우이 문제가 발생할 수 있습니다. &lt;a href=&quot;04-schema.md&quot;&gt;스키마 페이지&lt;/a&gt; 에서 안정성 플래그 및 &lt;code&gt;minimum-stability&lt;/code&gt; 키에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="91dbe9ec5cd79625d01b966c2069ab7cd046b81a" translate="yes" xml:space="preserve">
          <source>You must require the special package called &lt;code&gt;composer-plugin-api&lt;/code&gt; to define which Plugin API versions your plugin is compatible with.</source>
          <target state="translated">플러그인이 호환되는 플러그인 API 버전을 정의하려면 &lt;code&gt;composer-plugin-api&lt;/code&gt; 라는 특수 패키지가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="3ef7fc7ea241fefdca20a7c63cce2e8af5f6f7e6" translate="yes" xml:space="preserve">
          <source>You should always run the &lt;code&gt;validate&lt;/code&gt; command before you commit your &lt;code&gt;composer.json&lt;/code&gt; file, and before you tag a release. It will check if your &lt;code&gt;composer.json&lt;/code&gt; is valid.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 파일 을 커밋 하기 전에 그리고 릴리스에 태그를 지정하기 전에 항상 &lt;code&gt;validate&lt;/code&gt; 명령을 실행해야합니다 . &lt;code&gt;composer.json&lt;/code&gt; 이 유효한지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="f102019ddc564e89c1f8d9dca4be6136cc8d4e2d" translate="yes" xml:space="preserve">
          <source>You simply visit &lt;a href=&quot;https://packagist.org&quot;&gt;Packagist&lt;/a&gt; and hit the &quot;Submit&quot; button. This will prompt you to sign up if you haven't already, and then allows you to submit the URL to your VCS repository, at which point Packagist will start crawling it. Once it is done, your package will be available to anyone!</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org&quot;&gt;Packagist&lt;/a&gt; 를 방문 하여 &quot;제출&quot;버튼을 누르기 만하면 됩니다. 이렇게하면 아직 가입하지 않은 경우 가입하라는 메시지가 표시되고 Vag 저장소에 URL을 제출하면 Packagist에서 크롤링을 시작합니다. 완료되면 패키지를 누구나 사용할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="52d92c0ecd016ee768f5b25dbb982bfd3c9a58c6" translate="yes" xml:space="preserve">
          <source>You've already learned how to use the command-line interface to do some things. This chapter documents all the available commands.</source>
          <target state="translated">이미 명령 행 인터페이스를 사용하여 몇 가지 작업을 수행하는 방법을 배웠습니다. 이 장에서는 사용 가능한 모든 명령에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="368c3339984e0203b3d641afa4d0d17024ae44e4" translate="yes" xml:space="preserve">
          <source>Your &lt;a href=&quot;handling-private-packages-with-satis.md&quot;&gt;Satis or Toran Proxy&lt;/a&gt; server could be secured with http basic authentication. In order to allow your project to have access to these packages you will have to tell composer how to authenticate with your credentials.</source>
          <target state="translated">귀하의 &lt;a href=&quot;handling-private-packages-with-satis.md&quot;&gt;Satis 또는 Toran 프록시&lt;/a&gt; 서버는 HTTP 기본 인증을 확보 할 수있다. 프로젝트가 이러한 패키지에 액세스 할 수 있도록하려면 작곡가에게 자격 증명으로 인증하는 방법을 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="b17763c432428c5f9772ad0c796c1b29a3367780" translate="yes" xml:space="preserve">
          <source>Zip archives are not unpacked correctly.</source>
          <target state="translated">Zip 보관 파일의 압축이 제대로 풀리지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8f53ed0fec22d3282d0e70911e563402b8429cfc" translate="yes" xml:space="preserve">
          <source>abandoned</source>
          <target state="translated">abandoned</target>
        </trans-unit>
        <trans-unit id="9ae582b23b531c1886981c18fb9886e3c8a6f9bd" translate="yes" xml:space="preserve">
          <source>apcu-autoloader</source>
          <target state="translated">apcu-autoloader</target>
        </trans-unit>
        <trans-unit id="ebfb55f4432b592119a10592e4f26272cc72359e" translate="yes" xml:space="preserve">
          <source>archive</source>
          <target state="translated">archive</target>
        </trans-unit>
        <trans-unit id="055c81090cbea5d67cd6ed4abeb36df5a2f3bc7a" translate="yes" xml:space="preserve">
          <source>archive-dir</source>
          <target state="translated">archive-dir</target>
        </trans-unit>
        <trans-unit id="8fe2bd45f8242e0d091a36cc6ad7a46e16c0d1bb" translate="yes" xml:space="preserve">
          <source>archive-format</source>
          <target state="translated">archive-format</target>
        </trans-unit>
        <trans-unit id="90e3fd0f012c27834ea5ef3cf1dfef96e9190b40" translate="yes" xml:space="preserve">
          <source>authors</source>
          <target state="translated">authors</target>
        </trans-unit>
        <trans-unit id="4f25d09afc26355e099f60888cb6afb436cd27bf" translate="yes" xml:space="preserve">
          <source>autoload</source>
          <target state="translated">autoload</target>
        </trans-unit>
        <trans-unit id="5d86fcc7bef79bafe0a21734858458705a5f9693" translate="yes" xml:space="preserve">
          <source>autoload-dev</source>
          <target state="translated">autoload-dev</target>
        </trans-unit>
        <trans-unit id="85242461ce1877f7114296183a7e473e8d273561" translate="yes" xml:space="preserve">
          <source>autoload-dev (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">autoload-dev ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="327222f10160e1bb81490948a2dd1baea047f1e0" translate="yes" xml:space="preserve">
          <source>autoloader-suffix</source>
          <target state="translated">autoloader-suffix</target>
        </trans-unit>
        <trans-unit id="9a5d56716d566997fa290054d161af96305aff9a" translate="yes" xml:space="preserve">
          <source>bin</source>
          <target state="translated">bin</target>
        </trans-unit>
        <trans-unit id="93d983b53c62ff28a837c77b44a432534d802bcd" translate="yes" xml:space="preserve">
          <source>bin-compat</source>
          <target state="translated">bin-compat</target>
        </trans-unit>
        <trans-unit id="2b4429c6887bb899ef8aad3f48b55459c5b98af8" translate="yes" xml:space="preserve">
          <source>bin-dir</source>
          <target state="translated">bin-dir</target>
        </trans-unit>
        <trans-unit id="4b7aa088aef6f332d19a788cfb842570aa91c4a4" translate="yes" xml:space="preserve">
          <source>bitbucket-oauth</source>
          <target state="translated">bitbucket-oauth</target>
        </trans-unit>
        <trans-unit id="99a8b99a0de81e36e0b13111a9714c176332cb4b" translate="yes" xml:space="preserve">
          <source>browse / home</source>
          <target state="translated">찾아보기 / 집</target>
        </trans-unit>
        <trans-unit id="8cedbd496e14ca16ade865c5c11677a9f7c27aef" translate="yes" xml:space="preserve">
          <source>cache-dir</source>
          <target state="translated">cache-dir</target>
        </trans-unit>
        <trans-unit id="3b6b533d2fd6fb07d10ed34695c805048c0d178f" translate="yes" xml:space="preserve">
          <source>cache-files-dir</source>
          <target state="translated">cache-files-dir</target>
        </trans-unit>
        <trans-unit id="9ed4ad56554221c2221d977b39973ef3597174c9" translate="yes" xml:space="preserve">
          <source>cache-files-maxsize</source>
          <target state="translated">cache-files-maxsize</target>
        </trans-unit>
        <trans-unit id="4481668f2f5aa14c06d4bc568dd437ee980c627d" translate="yes" xml:space="preserve">
          <source>cache-files-ttl</source>
          <target state="translated">cache-files-ttl</target>
        </trans-unit>
        <trans-unit id="e0d5c77623a655b3050a7e8c6328d7f37528948f" translate="yes" xml:space="preserve">
          <source>cache-repo-dir</source>
          <target state="translated">cache-repo-dir</target>
        </trans-unit>
        <trans-unit id="7139f397cc749ba8edccdd098845c384ec690793" translate="yes" xml:space="preserve">
          <source>cache-vcs-dir</source>
          <target state="translated">cache-vcs-dir</target>
        </trans-unit>
        <trans-unit id="cbaf9cdda9b4ba6fc8fc74690f3d2a220a16b3c0" translate="yes" xml:space="preserve">
          <source>cafile</source>
          <target state="translated">cafile</target>
        </trans-unit>
        <trans-unit id="37236002e4f003af10f89f8d300f323e60d1b129" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;composer dump-autoload&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer dump-autoload&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="cf9f02fe07761d37cb2db74fef458c86cdf16fcb" translate="yes" xml:space="preserve">
          <source>capath</source>
          <target state="translated">capath</target>
        </trans-unit>
        <trans-unit id="018f840a6ce1cddc2366b9a7fe2ab131d2190bb4" translate="yes" xml:space="preserve">
          <source>check-platform-reqs</source>
          <target state="translated">check-platform-reqs</target>
        </trans-unit>
        <trans-unit id="70118a58a1cdb739363cbff6d862e5268db7e4ba" translate="yes" xml:space="preserve">
          <source>classmap-authoritative</source>
          <target state="translated">classmap-authoritative</target>
        </trans-unit>
        <trans-unit id="1bd6fa8543b8c66356480ecf1d62f0c9d743c473" translate="yes" xml:space="preserve">
          <source>clear-cache (clearcache)</source>
          <target state="translated">클리어 캐시 (clearcache)</target>
        </trans-unit>
        <trans-unit id="bbd287635462406836fa80e698517ab21a876004" translate="yes" xml:space="preserve">
          <source>command: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/CommandEvent.html&quot;&gt;&lt;code&gt;Composer\Plugin\CommandEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">명령 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/CommandEvent.html&quot;&gt; &lt;code&gt;Composer\Plugin\CommandEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3957b91a0d8450cea0115cfd5af69eac90d75897" translate="yes" xml:space="preserve">
          <source>composer.json</source>
          <target state="translated">composer.json</target>
        </trans-unit>
        <trans-unit id="8f95aab906ec3991aef7aee55e388b8938bfe915" translate="yes" xml:space="preserve">
          <source>composer.json:</source>
          <target state="translated">composer.json:</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="a91fe9d1f33be78ac6ab16880c87955ca048ceca" translate="yes" xml:space="preserve">
          <source>config (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">구성 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ae214513a0d21125291c9566dfdb0fcb1fdd1d2b" translate="yes" xml:space="preserve">
          <source>conflict</source>
          <target state="translated">conflict</target>
        </trans-unit>
        <trans-unit id="7c5d7a31e7a5acd7ea4b8a47e52f12993497fd45" translate="yes" xml:space="preserve">
          <source>create-project</source>
          <target state="translated">create-project</target>
        </trans-unit>
        <trans-unit id="547ec7fc0cc222d522293be828612dcdcdd49c47" translate="yes" xml:space="preserve">
          <source>data-dir</source>
          <target state="translated">data-dir</target>
        </trans-unit>
        <trans-unit id="6d613a1ee01eec4c0f8ca66df0db71dca0c6e1cf" translate="yes" xml:space="preserve">
          <source>database</source>
          <target state="translated">database</target>
        </trans-unit>
        <trans-unit id="c24091201bc1fd018075abbd0d09f84221e3c74d" translate="yes" xml:space="preserve">
          <source>depends (why)</source>
          <target state="translated">(왜)에 달려있다</target>
        </trans-unit>
        <trans-unit id="cb329146a0dd0d566b0628744d67936558741ffa" translate="yes" xml:space="preserve">
          <source>description</source>
          <target state="translated">description</target>
        </trans-unit>
        <trans-unit id="77e720c8ee04722d29f0377684b9290260227c50" translate="yes" xml:space="preserve">
          <source>diagnose</source>
          <target state="translated">diagnose</target>
        </trans-unit>
        <trans-unit id="0323d8a2ecccc5952bb87bf6eb1cdce3f95f437c" translate="yes" xml:space="preserve">
          <source>disable it for all commands using the config key &lt;code&gt;process-timeout&lt;/code&gt;,</source>
          <target state="translated">config key &lt;code&gt;process-timeout&lt;/code&gt; 을 사용하여 모든 명령에 대해 비활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="30360370a8ceed6d302be3738394d5d65a38ef86" translate="yes" xml:space="preserve">
          <source>disable it for the current or future invocations of composer using the environment variable &lt;code&gt;COMPOSER_PROCESS_TIMEOUT&lt;/code&gt;,</source>
          <target state="translated">환경 변수 &lt;code&gt;COMPOSER_PROCESS_TIMEOUT&lt;/code&gt; 을 사용하여 작성기의 현재 또는 미래 호출에 대해 사용하지 않도록 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="835dca54c2d0bc785576623bc04e80192b1b03cd" translate="yes" xml:space="preserve">
          <source>disable-tls</source>
          <target state="translated">disable-tls</target>
        </trans-unit>
        <trans-unit id="7a079ff91226ca5573d093a59a116c8a1b21e961" translate="yes" xml:space="preserve">
          <source>discard-changes</source>
          <target state="translated">discard-changes</target>
        </trans-unit>
        <trans-unit id="8de30cd0d8b805c6ce7d572ab55e95c62835bcf7" translate="yes" xml:space="preserve">
          <source>dist or source</source>
          <target state="translated">dist 또는 source</target>
        </trans-unit>
        <trans-unit id="26e52103685e455fa9f1de2ed45e2e3c9c51e67c" translate="yes" xml:space="preserve">
          <source>dump-autoload (dumpautoload)</source>
          <target state="translated">덤프 자동로드 (dumpautoload)</target>
        </trans-unit>
        <trans-unit id="82d50d9042decb175894924272dd3b5a14cd3716" translate="yes" xml:space="preserve">
          <source>events</source>
          <target state="translated">events</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="b43c4b82570e182eb1c74072896167113d2c7345" translate="yes" xml:space="preserve">
          <source>extra</source>
          <target state="translated">extra</target>
        </trans-unit>
        <trans-unit id="4e0326bd72804f4980588cdf39b564b87ac9d9fd" translate="yes" xml:space="preserve">
          <source>for a specific invocation using the &lt;code&gt;--timeout&lt;/code&gt; flag of the &lt;code&gt;run-script&lt;/code&gt; command,</source>
          <target state="translated">&lt;code&gt;run-script&lt;/code&gt; 명령 의 &lt;code&gt;--timeout&lt;/code&gt; 플래그를 사용하는 특정 호출 의 경우</target>
        </trans-unit>
        <trans-unit id="10d809ca7d757eb589c63fb32ca7d6e18a1cdda6" translate="yes" xml:space="preserve">
          <source>github-domains</source>
          <target state="translated">github-domains</target>
        </trans-unit>
        <trans-unit id="93be1ea6d8d97b1d49b836552dd82fc243330485" translate="yes" xml:space="preserve">
          <source>github-expose-hostname</source>
          <target state="translated">github-expose-hostname</target>
        </trans-unit>
        <trans-unit id="240f1e0db9e6aa64cf67b447f223eb951e1b56fa" translate="yes" xml:space="preserve">
          <source>github-oauth</source>
          <target state="translated">github-oauth</target>
        </trans-unit>
        <trans-unit id="51b514d92aeb757b44bd4e12b64d9c9c665692f5" translate="yes" xml:space="preserve">
          <source>github-protocols</source>
          <target state="translated">github-protocols</target>
        </trans-unit>
        <trans-unit id="99893843ef2e5c31a92b8d0a331beda109845774" translate="yes" xml:space="preserve">
          <source>gitlab-domains</source>
          <target state="translated">gitlab-domains</target>
        </trans-unit>
        <trans-unit id="0f20cc7bda31d9862bb4ed1108fcf489f8d935f4" translate="yes" xml:space="preserve">
          <source>gitlab-oauth</source>
          <target state="translated">gitlab-oauth</target>
        </trans-unit>
        <trans-unit id="ae95fb9318ac599e97a7fe080501ec43c70d8ac4" translate="yes" xml:space="preserve">
          <source>gitlab-token</source>
          <target state="translated">gitlab-token</target>
        </trans-unit>
        <trans-unit id="9027cc5a2c1321de60a2d71ccde6229d1152d6d3" translate="yes" xml:space="preserve">
          <source>global</source>
          <target state="translated">global</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="568be0fa2023d1a447e7bd150dda7068ece26898" translate="yes" xml:space="preserve">
          <source>homepage</source>
          <target state="translated">homepage</target>
        </trans-unit>
        <trans-unit id="b7fc6f6ebfb1800b292ce4e9c3a939c315741403" translate="yes" xml:space="preserve">
          <source>htaccess-protect</source>
          <target state="translated">htaccess-protect</target>
        </trans-unit>
        <trans-unit id="1f5c1190f82d07cfa4b34a72f44169a315284ff7" translate="yes" xml:space="preserve">
          <source>http-basic</source>
          <target state="translated">http-basic</target>
        </trans-unit>
        <trans-unit id="01b09fab98ba0a18dbfbc9091843663f4907f962" translate="yes" xml:space="preserve">
          <source>http_proxy or HTTP_PROXY</source>
          <target state="translated">http_proxy 또는 HTTP_PROXY</target>
        </trans-unit>
        <trans-unit id="934f9d916621b15ed7c4e99da5975c5f8461bf42" translate="yes" xml:space="preserve">
          <source>igorw/event-source</source>
          <target state="translated">igorw/event-source</target>
        </trans-unit>
        <trans-unit id="ee3300ddaa6621b0638a0e528a0677ff44f88b1d" translate="yes" xml:space="preserve">
          <source>include-path</source>
          <target state="translated">include-path</target>
        </trans-unit>
        <trans-unit id="fd62812fbd9ec4c7f99aa4f6253fead2388eb238" translate="yes" xml:space="preserve">
          <source>init</source>
          <target state="translated">init</target>
        </trans-unit>
        <trans-unit id="d16df61f06b493e5a4445e4f3667bbb6f89e8b3f" translate="yes" xml:space="preserve">
          <source>init: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt;&lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">초기화 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt; &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c17801265656bbca87203f4be43a089a06524ed4" translate="yes" xml:space="preserve">
          <source>install / i</source>
          <target state="translated">설치 / i</target>
        </trans-unit>
        <trans-unit id="88fc09e54b17679b0028556344b50c9fe169bdb5" translate="yes" xml:space="preserve">
          <source>keywords</source>
          <target state="translated">keywords</target>
        </trans-unit>
        <trans-unit id="23457129b871d690a3b4d86a51ded0c27ba29a9c" translate="yes" xml:space="preserve">
          <source>license</source>
          <target state="translated">license</target>
        </trans-unit>
        <trans-unit id="a39ea9c72a98de10375b0a35c2313971d6650fef" translate="yes" xml:space="preserve">
          <source>licenses</source>
          <target state="translated">licenses</target>
        </trans-unit>
        <trans-unit id="42f7b07db92a254d70b2763520ccb302387e6d6e" translate="yes" xml:space="preserve">
          <source>logging</source>
          <target state="translated">logging</target>
        </trans-unit>
        <trans-unit id="c767fb4fa84edd9798347da2310e0dcb0cd0f193" translate="yes" xml:space="preserve">
          <source>minimum-stability</source>
          <target state="translated">minimum-stability</target>
        </trans-unit>
        <trans-unit id="c10ee804f3232c93d60adf95dd9590ea5c5f599d" translate="yes" xml:space="preserve">
          <source>minimum-stability (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">최소 안정성 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f2ddd99b797a2496337b5413b08e00153cd8c85a" translate="yes" xml:space="preserve">
          <source>monolog/monolog</source>
          <target state="translated">monolog/monolog</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="fc074fd662296d860a152a292b4d7b6b312e8ce8" translate="yes" xml:space="preserve">
          <source>no_proxy or NO_PROXY</source>
          <target state="translated">no_proxy 또는 NO_PROXY</target>
        </trans-unit>
        <trans-unit id="bf6abd628c428e1da9dfce49bbba13496c0471e1" translate="yes" xml:space="preserve">
          <source>non-feature-branches</source>
          <target state="translated">non-feature-branches</target>
        </trans-unit>
        <trans-unit id="b15cd836785e50729f71533a80322f43daad079b" translate="yes" xml:space="preserve">
          <source>notify-batch</source>
          <target state="translated">notify-batch</target>
        </trans-unit>
        <trans-unit id="eaa9a3f45f81a52135877c3bd595d503a00bdcf5" translate="yes" xml:space="preserve">
          <source>notify-on-install</source>
          <target state="translated">notify-on-install</target>
        </trans-unit>
        <trans-unit id="789ac37f7e1ffba3c8b73f8c8318762a9ded2b3a" translate="yes" xml:space="preserve">
          <source>optimize-autoloader</source>
          <target state="translated">optimize-autoloader</target>
        </trans-unit>
        <trans-unit id="b85a5176d55923c3a5c736b9766e15c5b7392237" translate="yes" xml:space="preserve">
          <source>outdated</source>
          <target state="translated">outdated</target>
        </trans-unit>
        <trans-unit id="d8ae088aee969371bf4ed994e9106b5d3e799c35" translate="yes" xml:space="preserve">
          <source>packages</source>
          <target state="translated">packages</target>
        </trans-unit>
        <trans-unit id="1a421f6a0cb3266219ba462e3e3674b69b6dd95f" translate="yes" xml:space="preserve">
          <source>phpDocumentor features Templates that need to be installed outside of the default /vendor folder structure. As such they have chosen to adopt the &lt;code&gt;phpdocumentor-template&lt;/code&gt;&lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; and create a plugin providing the Custom Installer to send these templates to the correct folder.</source>
          <target state="translated">phpDocumentor 기능 기본 / vendor 폴더 구조 외부에 설치해야하는 템플릿. 따라서 그들은 &lt;code&gt;phpdocumentor-template&lt;/code&gt; &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 을 채택 하고 사용자 정의 설치 프로그램을 제공하는 플러그인을 생성하여 이러한 템플릿을 올바른 폴더로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3c72abbe626f27d174d80fc434b851cce7bde6d3" translate="yes" xml:space="preserve">
          <source>platform</source>
          <target state="translated">platform</target>
        </trans-unit>
        <trans-unit id="91744c5e0ba404bce1bc3ed8b0be3ab1c518fbd3" translate="yes" xml:space="preserve">
          <source>pre-file-download: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/PreFileDownloadEvent.html&quot;&gt;&lt;code&gt;Composer\Plugin\PreFileDownloadEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">사전 파일 다운로드 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Plugin/PreFileDownloadEvent.html&quot;&gt; &lt;code&gt;Composer\Plugin\PreFileDownloadEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="473e34a40b0652558a7fb8f0df1beb0e67394b6b" translate="yes" xml:space="preserve">
          <source>prefer-stable</source>
          <target state="translated">prefer-stable</target>
        </trans-unit>
        <trans-unit id="564b0d4e5c910c11ec4a35aa8d5bd214fde5433b" translate="yes" xml:space="preserve">
          <source>prefer-stable (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">선호하는 안정 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="6513ee15882452ffb58bacbff36ed8d5723e7512" translate="yes" xml:space="preserve">
          <source>preferred-install</source>
          <target state="translated">preferred-install</target>
        </trans-unit>
        <trans-unit id="e8d7fd617b9d58831b69cea13695eb1c21519429" translate="yes" xml:space="preserve">
          <source>prefix-url</source>
          <target state="translated">prefix-url</target>
        </trans-unit>
        <trans-unit id="6b6ad03a3d1698f720295f07865869facecf773b" translate="yes" xml:space="preserve">
          <source>prepend-autoloader</source>
          <target state="translated">prepend-autoloader</target>
        </trans-unit>
        <trans-unit id="71a15af606715185b3c076b1de3a0f2392d64da5" translate="yes" xml:space="preserve">
          <source>proc_open(): fork failed errors</source>
          <target state="translated">proc_open () : 포크 실패 오류</target>
        </trans-unit>
        <trans-unit id="6711099b0aec6f81f966f94566884241b2409db5" translate="yes" xml:space="preserve">
          <source>process-timeout</source>
          <target state="translated">process-timeout</target>
        </trans-unit>
        <trans-unit id="1d02d01463f1c3c8ad149c2ded60c71233199d86" translate="yes" xml:space="preserve">
          <source>prohibits (why-not)</source>
          <target state="translated">금지 (왜)</target>
        </trans-unit>
        <trans-unit id="4ab69d1f449d0c975c87c5a03c3f2c332a210aaa" translate="yes" xml:space="preserve">
          <source>provide</source>
          <target state="translated">provide</target>
        </trans-unit>
        <trans-unit id="55b73469d9cdff569e2d9aa9ac33815bdeb7ff4c" translate="yes" xml:space="preserve">
          <source>provider-includes and providers-url</source>
          <target state="translated">공급자 포함 및 공급자 URL</target>
        </trans-unit>
        <trans-unit id="f78a71af8bbf8cc2f6f313549d4da14bd3771359" translate="yes" xml:space="preserve">
          <source>readme</source>
          <target state="translated">readme</target>
        </trans-unit>
        <trans-unit id="b840fc02d524045429941cc15f59e41cb7be6c52" translate="yes" xml:space="preserve">
          <source>redis</source>
          <target state="translated">redis</target>
        </trans-unit>
        <trans-unit id="db99845855b2ecbfecca9a095062b96c3e27703f" translate="yes" xml:space="preserve">
          <source>remove</source>
          <target state="translated">remove</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="ddbdf83535a3f4e3dcfd5ad43c56a0adcbb4a9b1" translate="yes" xml:space="preserve">
          <source>repositories</source>
          <target state="translated">repositories</target>
        </trans-unit>
        <trans-unit id="a5897fe3a13ff0d676f965e88fabd9840e3e1641" translate="yes" xml:space="preserve">
          <source>repositories (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">리포지토리 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="623e76c36aa2a886542011e28412cc761d7ceb01" translate="yes" xml:space="preserve">
          <source>require</source>
          <target state="translated">require</target>
        </trans-unit>
        <trans-unit id="ee08b76b89844c734f12d32265dedf7e565f4532" translate="yes" xml:space="preserve">
          <source>require-dev (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">require-dev ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="e7383e16bf1ba8f04f8e6f0a50106eb692433ebe" translate="yes" xml:space="preserve">
          <source>run-script</source>
          <target state="translated">run-script</target>
        </trans-unit>
        <trans-unit id="16728d18790deb58b3b8c1df74f06e536b532695" translate="yes" xml:space="preserve">
          <source>scripts</source>
          <target state="translated">scripts</target>
        </trans-unit>
        <trans-unit id="73c546e03e8d9cbf67ef134ea87bfe1ba28183ee" translate="yes" xml:space="preserve">
          <source>scripts (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;)</source>
          <target state="translated">스크립트 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3559d7accf00360971961ca18989adc0614089c0" translate="yes" xml:space="preserve">
          <source>search</source>
          <target state="translated">search</target>
        </trans-unit>
        <trans-unit id="82d17e753f91d3265521b6398523031c0151b29b" translate="yes" xml:space="preserve">
          <source>secure-http</source>
          <target state="translated">secure-http</target>
        </trans-unit>
        <trans-unit id="a82db627112776a7fd62632195cf32a9a0f07474" translate="yes" xml:space="preserve">
          <source>self-update (selfupdate)</source>
          <target state="translated">자체 업데이트 (selfupdate)</target>
        </trans-unit>
        <trans-unit id="9fb29051f2217270a7b253a39f820310d85a78f0" translate="yes" xml:space="preserve">
          <source>show</source>
          <target state="translated">show</target>
        </trans-unit>
        <trans-unit id="433ecc2121668b2118424ea378bd0a61d2910c01" translate="yes" xml:space="preserve">
          <source>sort-packages</source>
          <target state="translated">sort-packages</target>
        </trans-unit>
        <trans-unit id="48a3661d846478fa991a825ebd10b78671444b5b" translate="yes" xml:space="preserve">
          <source>status</source>
          <target state="translated">status</target>
        </trans-unit>
        <trans-unit id="eb6fe53aa9be92a7647afcce3c5b531a63e1ba0d" translate="yes" xml:space="preserve">
          <source>store-auths</source>
          <target state="translated">store-auths</target>
        </trans-unit>
        <trans-unit id="2e3c643ac64dc53ab14a99ef3cb2e435752e196b" translate="yes" xml:space="preserve">
          <source>stream options</source>
          <target state="translated">스트림 옵션</target>
        </trans-unit>
        <trans-unit id="fd0a4950be7bdd9f8433220cd71f792adc9bacbe" translate="yes" xml:space="preserve">
          <source>suggest</source>
          <target state="translated">suggest</target>
        </trans-unit>
        <trans-unit id="3e829ab18fae1f2e02cebc9112af2ad19bb88b78" translate="yes" xml:space="preserve">
          <source>suggests</source>
          <target state="translated">suggests</target>
        </trans-unit>
        <trans-unit id="5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb" translate="yes" xml:space="preserve">
          <source>support</source>
          <target state="translated">support</target>
        </trans-unit>
        <trans-unit id="f6cefe460cd3a4027fc0e073d346c46039fa16fc" translate="yes" xml:space="preserve">
          <source>target-dir</source>
          <target state="translated">target-dir</target>
        </trans-unit>
        <trans-unit id="12d2f36657fd573ff3c6c4e79a585fb94314777b" translate="yes" xml:space="preserve">
          <source>templating</source>
          <target state="translated">templating</target>
        </trans-unit>
        <trans-unit id="9602df2b84b8a3f13a3de1b8029067b58fea71ce" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;../04-schema.md#extra&quot;&gt;extra&lt;/a&gt; attribute must contain an element &lt;code&gt;class&lt;/code&gt; defining the class name of the plugin (including namespace). If a package contains multiple plugins this can be array of class names.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#extra&quot;&gt;추가&lt;/a&gt; 속성은 요소의 메시지 있어야합니다 &lt;code&gt;class&lt;/code&gt; (네임 스페이스 포함) 플러그인의 클래스 이름을 정의합니다. 패키지에 여러 개의 플러그인이 포함되어 있으면 클래스 이름 배열이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a43dbecf2a05530c720fe393365dfccfc117b03" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; attribute must be &lt;code&gt;composer-plugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#type&quot;&gt;유형의&lt;/a&gt; 속성은해야 &lt;code&gt;composer-plugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00b638d9feda5f451b7e34767d86b4655ad7d2a1" translate="yes" xml:space="preserve">
          <source>the package file: composer.json</source>
          <target state="translated">패키지 파일 : composer.json</target>
        </trans-unit>
        <trans-unit id="714eea0f4c980736bde0065fe73f573487f08e3a" translate="yes" xml:space="preserve">
          <source>time</source>
          <target state="translated">time</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="4d8b74c810b03fe6071ccc079fb8099f73703e85" translate="yes" xml:space="preserve">
          <source>update / u</source>
          <target state="translated">업데이트 / U</target>
        </trans-unit>
        <trans-unit id="bca7cf7060de3870242d6195d66a4a00ca1d5d0d" translate="yes" xml:space="preserve">
          <source>use-github-api</source>
          <target state="translated">use-github-api</target>
        </trans-unit>
        <trans-unit id="df73151de4c111e43b53c3b40ea694ad9d6099ef" translate="yes" xml:space="preserve">
          <source>use-include-path</source>
          <target state="translated">use-include-path</target>
        </trans-unit>
        <trans-unit id="00c485e3ecdfd52691bbf649a917e7b69a67d27d" translate="yes" xml:space="preserve">
          <source>using a static helper for specific scripts.</source>
          <target state="translated">특정 스크립트에 정적 도우미 사용</target>
        </trans-unit>
        <trans-unit id="142e27c93a3712c33dafcf729bd2b0c0a590f46e" translate="yes" xml:space="preserve">
          <source>v2.0.4-p1</source>
          <target state="translated">v2.0.4-p1</target>
        </trans-unit>
        <trans-unit id="e204d28a2874f6123747650d3e4003d4357d75eb" translate="yes" xml:space="preserve">
          <source>validate</source>
          <target state="translated">validate</target>
        </trans-unit>
        <trans-unit id="101d465db1ef254ef87db52c31443088f5700194" translate="yes" xml:space="preserve">
          <source>vendor-dir</source>
          <target state="translated">vendor-dir</target>
        </trans-unit>
        <trans-unit id="c692273deb2772da307ffe37041fef77bf4baa97" translate="yes" xml:space="preserve">
          <source>version</source>
          <target state="translated">version</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
