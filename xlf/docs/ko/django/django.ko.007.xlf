<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="66c9ccae10ed2b23694f765b4228417a4924e330" translate="yes" xml:space="preserve">
          <source>Finally we combine the parts into an SQL expression with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, and supply all the parameters for the query. We then return a tuple containing the generated SQL string and the parameters.</source>
          <target state="translated">마지막으로 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 을 사용 하여 파트를 SQL 표현식으로 결합 하고 쿼리에 대한 모든 매개 변수를 제공합니다. 그런 다음 생성 된 SQL 문자열과 매개 변수가 포함 된 튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2eb2a2b36ade57b93d5586d25a607a90abeb603" translate="yes" xml:space="preserve">
          <source>Finally, &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;install Django&lt;/a&gt; on your system.</source>
          <target state="translated">마지막으로 시스템에 &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;Django&lt;/a&gt; 를 설치 하십시오.</target>
        </trans-unit>
        <trans-unit id="5484ec9866989dbfac8528bb6dd3db714dd1ddce" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;as_table()&lt;/code&gt; outputs the form as an HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. This is exactly the same as &lt;code&gt;print&lt;/code&gt;. In fact, when you &lt;code&gt;print&lt;/code&gt; a form object, it calls its &lt;code&gt;as_table()&lt;/code&gt; method behind the scenes:</source>
          <target state="translated">마지막으로 &lt;code&gt;as_table()&lt;/code&gt; 은 양식을 HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 로 출력합니다 . 이것은 &lt;code&gt;print&lt;/code&gt; 와 정확히 동일합니다 . 실제로 양식 객체 를 &lt;code&gt;print&lt;/code&gt; 할 때는 장면 뒤에서 &lt;code&gt;as_table()&lt;/code&gt; 메서드를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="f6603469a430fe7317c80ca09845bcdc21b75157" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;full_clean()&lt;/code&gt; will check any unique constraints on your model.</source>
          <target state="translated">마지막으로 &lt;code&gt;full_clean()&lt;/code&gt; 은 모델에 대한 고유 제약 조건을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="2019efad06892eaf93b5bf539df6adb0e0145d27" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;register.filter()&lt;/code&gt; also accepts three keyword arguments, &lt;code&gt;is_safe&lt;/code&gt;, &lt;code&gt;needs_autoescape&lt;/code&gt;, and &lt;code&gt;expects_localtime&lt;/code&gt;. These arguments are described in &lt;a href=&quot;#filters-auto-escaping&quot;&gt;filters and auto-escaping&lt;/a&gt; and &lt;a href=&quot;#filters-timezones&quot;&gt;filters and time zones&lt;/a&gt; below.</source>
          <target state="translated">마지막으로 &lt;code&gt;register.filter()&lt;/code&gt; 는 3 개의 키워드 인수 &lt;code&gt;is_safe&lt;/code&gt; , &lt;code&gt;needs_autoescape&lt;/code&gt; 및 &lt;code&gt;expects_localtime&lt;/code&gt; 도 허용 합니다. 이러한 인수는 &lt;a href=&quot;#filters-auto-escaping&quot;&gt;필터 및 자동 이스케이프&lt;/a&gt; 및 &lt;a href=&quot;#filters-timezones&quot;&gt;필터 및 시간대에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="306b5cee8ba18e692cafa08cb4f14f745f2e0c11" translate="yes" xml:space="preserve">
          <source>Finally, Django comes with a &amp;ldquo;dummy&amp;rdquo; cache that doesn&amp;rsquo;t actually cache &amp;ndash; it just implements the cache interface without doing anything.</source>
          <target state="translated">마지막으로 Django는 실제로 캐시하지 않는&amp;ldquo;더미&amp;rdquo;캐시와 함께 제공되며 아무 것도하지 않고 캐시 인터페이스 만 구현합니다.</target>
        </trans-unit>
        <trans-unit id="40267a26a72668706858d04af947447e24d778f6" translate="yes" xml:space="preserve">
          <source>Finally, Django uses the concept of &amp;ldquo;template inheritance&amp;rdquo;. That&amp;rsquo;s what the &lt;code&gt;{% extends &quot;base.html&quot; %}&lt;/code&gt; does. It means &amp;ldquo;First load the template called &amp;lsquo;base&amp;rsquo;, which has defined a bunch of blocks, and fill the blocks with the following blocks.&amp;rdquo; In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what&amp;rsquo;s unique to that template.</source>
          <target state="translated">마지막으로 Django는&amp;ldquo;템플릿 상속&amp;rdquo;이라는 개념을 사용합니다. 이것이 &lt;code&gt;{% extends &quot;base.html&quot; %}&lt;/code&gt; 역할입니다. &quot;먼저 블록을 정의한 'base'라는 템플릿을로드하고 다음 블록으로 블록을 채 웁니다.&quot; 즉, 템플릿의 중복성을 크게 줄일 수 있습니다. 각 템플릿은 해당 템플릿에 고유 한 항목 만 정의하면됩니다.</target>
        </trans-unit>
        <trans-unit id="82301c6099c024cf55f29af10873bbd58c163855" translate="yes" xml:space="preserve">
          <source>Finally, MySQL has relatively small limits on name lengths for columns, tables and indexes, as well as a limit on the combined size of all columns an index covers. This means that indexes that are possible on other backends will fail to be created under MySQL.</source>
          <target state="translated">마지막으로 MySQL에는 열, 테이블 및 인덱스의 이름 길이에 대한 제한이 비교적 작으며 인덱스가 포함하는 모든 열의 결합 된 크기에 대한 제한이 있습니다. 이는 다른 백엔드에서 가능한 인덱스가 MySQL에서 생성되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e1fe06beb5b184511b52b82db0d899291a197824" translate="yes" xml:space="preserve">
          <source>Finally, a word on using &lt;code&gt;get_or_create()&lt;/code&gt; in Django views. Please make sure to use it only in &lt;code&gt;POST&lt;/code&gt; requests unless you have a good reason not to. &lt;code&gt;GET&lt;/code&gt; requests shouldn&amp;rsquo;t have any effect on data. Instead, use &lt;code&gt;POST&lt;/code&gt; whenever a request to a page has a side effect on your data. For more, see &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;Safe methods&lt;/strong&gt;&lt;/a&gt; in the HTTP spec.</source>
          <target state="translated">마지막으로 Django 뷰에서 &lt;code&gt;get_or_create()&lt;/code&gt; 사용에 대한 단어 . 특별한 이유가없는 한 &lt;code&gt;POST&lt;/code&gt; 요청 에서만 사용해야합니다 . &lt;code&gt;GET&lt;/code&gt; 요청은 데이터에 영향을 미치지 않아야합니다. 대신 페이지 요청이 데이터에 부작용이있을 때마다 &lt;code&gt;POST&lt;/code&gt; 를 사용 하십시오. 자세한 내용 은 HTTP 사양의 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;안전한 방법&lt;/strong&gt;&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c40eaec225e59882f800eba203e6c05081d41e93" translate="yes" xml:space="preserve">
          <source>Finally, avoid aliasing your settings as module-level constants as &lt;code&gt;override_settings()&lt;/code&gt; won&amp;rsquo;t work on such values since they are only evaluated the first time the module is imported.</source>
          <target state="translated">마지막으로 &lt;code&gt;override_settings()&lt;/code&gt; 는 모듈을 처음 가져올 때만 평가되므로 이러한 값에는 작동하지 않으므로 모듈 수준 상수로 설정의 앨리어싱을 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="ff9baca2e992a0e98a104ea1b4ce704e7121cf14" translate="yes" xml:space="preserve">
          <source>Finally, before you deploy your application to production, you should run through our &lt;a href=&quot;checklist&quot;&gt;deployment checklist&lt;/a&gt; to ensure that your configurations are suitable.</source>
          <target state="translated">마지막으로 응용 프로그램을 프로덕션에 배포하기 전에 &lt;a href=&quot;checklist&quot;&gt;배포 검사 목록&lt;/a&gt; 을 통해 구성이 적합한 지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="12e5c631fd09eda57ca89fcce607cf3f3163a88e" translate="yes" xml:space="preserve">
          <source>Finally, browse to &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt;, and log in with the user you just created. Browse to any of the &lt;code&gt;WorldBorder&lt;/code&gt; entries &amp;ndash; the borders may be edited by clicking on a polygon and dragging the vertices to the desired position.</source>
          <target state="translated">마지막으로 &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt; 찾아서 방금 만든 사용자로 로그인하십시오. &lt;code&gt;WorldBorder&lt;/code&gt; 항목을 찾아 보십시오 &amp;ndash; 다각형을 클릭하고 정점을 원하는 위치로 드래그하여 테두리를 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75df61e6676393f69526cf860e9d09ffe21f5dcf" translate="yes" xml:space="preserve">
          <source>Finally, configure, make and install PROJ.4:</source>
          <target state="translated">마지막으로 PROJ.4를 구성, 제작 및 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="7a496304035024f7826ec5200acb03a7378bec7f" translate="yes" xml:space="preserve">
          <source>Finally, determine which of your application&amp;rsquo;s models should be editable in the admin interface. For each of those models, register them with the admin as described in &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마지막으로 관리자 인터페이스에서 편집 할 응용 프로그램 모델을 결정하십시오. 이러한 각 모델에 대해 &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 관리자에게 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="82548b98e5f57caa40011e280e83e68504a44c79" translate="yes" xml:space="preserve">
          <source>Finally, edit your WSGI script &lt;code&gt;mysite.wsgi&lt;/code&gt; to tie Apache&amp;rsquo;s authentication to your site&amp;rsquo;s authentication mechanisms by importing the &lt;code&gt;check_password&lt;/code&gt; function:</source>
          <target state="translated">마지막으로 &lt;code&gt;check_password&lt;/code&gt; 함수 를 가져 와서 Apache의 인증을 사이트의 인증 메커니즘에 연결하도록 WSGI 스크립트 &lt;code&gt;mysite.wsgi&lt;/code&gt; 를 편집하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4fbe23a0a4f1a1a7ad82d1bd5a261c78f914005" translate="yes" xml:space="preserve">
          <source>Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, add the following to your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">마지막으로 GeoDjango가 KyngChaos SpatiaLite 라이브러리를 찾을 수 있도록 &lt;code&gt;settings.py&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc4c9bcb1cd46b0188d3f07b8a9f37d4a11b76c8" translate="yes" xml:space="preserve">
          <source>Finally, for GeoDjango to be able to find the SpatiaLite library, add the following to your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">마지막으로 GeoDjango가 SpatiaLite 라이브러리를 찾을 수 있도록 &lt;code&gt;settings.py&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b144dd9ec36c070dc34d112ead2d5addb8133986" translate="yes" xml:space="preserve">
          <source>Finally, here&amp;rsquo;s an example of a fairly complex logging setup:</source>
          <target state="translated">마지막으로 상당히 복잡한 로깅 설정의 예입니다.</target>
        </trans-unit>
        <trans-unit id="855b6d5f1ccab213dc5b32608617816a33cf5443" translate="yes" xml:space="preserve">
          <source>Finally, if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting. Failing to do so will result in all requests being returned as &amp;ldquo;Bad Request (400)&amp;rdquo;.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 &lt;a href=&quot;#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt; 설정도 올바르게 설정해야 합니다. 그렇지 않으면 모든 요청이 &quot;잘못된 요청 (400)&quot;으로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d465d68a14cb885607a31e7005a4de85bcfdddcc" translate="yes" xml:space="preserve">
          <source>Finally, if you only need to have a simple syntax for your custom context-updating template tag, consider using the &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt;&lt;code&gt;simple_tag()&lt;/code&gt;&lt;/a&gt; shortcut, which supports assigning the tag results to a template variable.</source>
          <target state="translated">마지막으로, 사용자 정의 컨텍스트 업데이트 템플릿 태그에 대한 간단한 구문 만 필요한 경우 태그 결과를 템플릿 변수에 할당하는 것을 지원하는 &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt; &lt;code&gt;simple_tag()&lt;/code&gt; &lt;/a&gt; 바로 가기를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9fdd2ae212537eaacac0577eae9438d74381650f" translate="yes" xml:space="preserve">
          <source>Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use &lt;a href=&quot;#proxy-models&quot;&gt;Proxy models&lt;/a&gt;.</source>
          <target state="translated">마지막으로, 모델 필드를 변경하지 않고 모델의 Python 레벨 동작 만 수정하려는 경우 &lt;a href=&quot;#proxy-models&quot;&gt;프록시 모델을&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd4ebdb64c40e31366b0e2c24cb39052f3a86668" translate="yes" xml:space="preserve">
          <source>Finally, if you want complete control over of a field &amp;ndash; including its type, validators, required, etc. &amp;ndash; you can do this by declaratively specifying fields like you would in a regular &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="translated">마지막으로 유형, 유효성 검사기, 필수 등을 포함하여 필드를 완전히 제어하려면 일반 &lt;code&gt;Form&lt;/code&gt; 에서와 같이 필드를 선언적으로 지정하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dfcbb1d9824d6d47858c41668312ca8ed762220a" translate="yes" xml:space="preserve">
          <source>Finally, if you want to delete all the keys in the cache, use &lt;code&gt;cache.clear()&lt;/code&gt;. Be careful with this; &lt;code&gt;clear()&lt;/code&gt; will remove &lt;em&gt;everything&lt;/em&gt; from the cache, not just the keys set by your application.</source>
          <target state="translated">마지막으로 캐시에서 모든 키를 삭제하려면 &lt;code&gt;cache.clear()&lt;/code&gt; . 이것에 조심하십시오; &lt;code&gt;clear()&lt;/code&gt; 는 응용 프로그램에서 설정 한 키뿐만 아니라 캐시에서 &lt;em&gt;모든 것을&lt;/em&gt; 제거 합니다.</target>
        </trans-unit>
        <trans-unit id="c6f827384009b456965fe0958e5b184820f0454b" translate="yes" xml:space="preserve">
          <source>Finally, if your column requires truly complex SQL setup, return &lt;code&gt;None&lt;/code&gt; from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt;. This will cause Django&amp;rsquo;s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, but this gives you a way to tell Django to get out of the way.</source>
          <target state="translated">Finally, if your column requires truly complex SQL setup, return &lt;code&gt;None&lt;/code&gt; from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;. This will cause Django&amp;rsquo;s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, but this gives you a way to tell Django to get out of the way.</target>
        </trans-unit>
        <trans-unit id="4e79f320cb0240d33a245677392be00e0e634041" translate="yes" xml:space="preserve">
          <source>Finally, if your column requires truly complex SQL setup, return &lt;code&gt;None&lt;/code&gt; from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt;. This will cause Django&amp;rsquo;s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way.</source>
          <target state="translated">마지막으로 열에 복잡한 SQL 설정이 필요한 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;None&lt;/code&gt; 을 반환하십시오 . 이로 인해 Django의 SQL 생성 코드가이 필드를 건너 뜁니다. 그런 다음 오른쪽 테이블에서 다른 방법으로 열을 생성해야하지만 Django에 방해가되지 않도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b372199964e2fb24560340217adf39c6cb2e9b6" translate="yes" xml:space="preserve">
          <source>Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database:</source>
          <target state="translated">마지막으로, 업그레이드가 필요한 코드를 찾기 위해 Django는 순진한 날짜 시간을 데이터베이스에 저장하려고 할 때 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a8ceea170904d12a1b2a305076f5373f10971acf" translate="yes" xml:space="preserve">
          <source>Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping.</source>
          <target state="translated">마지막으로 위의 예에서 결과가 안전한 것으로 표시하여 HTML이 더 이상 이스케이프되지 않고 템플릿에 직접 삽입되도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="3b58b4fc0d37b0500904ca859d6f665a75001b2b" translate="yes" xml:space="preserve">
          <source>Finally, in the settings file, we add the following (substituting &lt;code&gt;path.to.&lt;/code&gt; with the actual Python path to the module(s) where the routers are defined):</source>
          <target state="translated">마지막으로 설정 파일에서 다음을 추가합니다 ( 경로가 정의 된 모듈에 실제 Python 경로를 사용하여 &lt;code&gt;path.to.&lt;/code&gt; 로 대체 ).</target>
        </trans-unit>
        <trans-unit id="18faf076ef353dea3341f0a68404cd92fe6d44d6" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s important to call &lt;code&gt;showPage()&lt;/code&gt; and &lt;code&gt;save()&lt;/code&gt; on the PDF file.</source>
          <target state="translated">마지막으로 PDF 파일에서 &lt;code&gt;showPage()&lt;/code&gt; 및 &lt;code&gt;save()&lt;/code&gt; 를 호출하는 것이 중요 합니다.</target>
        </trans-unit>
        <trans-unit id="d710d1ce0f9f49d4bfebd253087693a7db1b18cf" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there&amp;rsquo;s nothing Django-specific about your database.</source>
          <target state="translated">마지막으로 Django 데이터베이스 계층은 데이터베이스에 대한 인터페이스 일뿐입니다. 다른 도구, 프로그래밍 언어 또는 데이터베이스 프레임 워크를 통해 데이터베이스에 액세스 할 수 있습니다. 데이터베이스에 대해 장고 고유의 것은 없습니다.</target>
        </trans-unit>
        <trans-unit id="855182574bd0f55fdd45d0ca39998798d4c219a1" translate="yes" xml:space="preserve">
          <source>Finally, note a relationship is defined, using &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;. That tells Django each &lt;code&gt;Choice&lt;/code&gt; is related to a single &lt;code&gt;Question&lt;/code&gt;. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 를&lt;/a&gt; 사용하여 관계가 정의됩니다 . 그것은 장고에게 각각의 &lt;code&gt;Choice&lt;/code&gt; 이 하나의 &lt;code&gt;Question&lt;/code&gt; 과 관련이 있음을 알려줍니다 . Django는 다 대일, 다 대다 및 일대일과 같은 모든 공통 데이터베이스 관계를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="6314e42c3f9470281aa2864e7c7681c40b8c6ccf" translate="yes" xml:space="preserve">
          <source>Finally, note that you can call &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;order_by()&lt;/code&gt;, etc. after the &lt;code&gt;values()&lt;/code&gt; call, that means that these two calls are identical:</source>
          <target state="translated">마지막으로 &lt;code&gt;values()&lt;/code&gt; 호출 후에 &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;order_by()&lt;/code&gt; 등을 호출 할 수 있습니다 . 즉,이 두 호출은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="e9e0c432d4c1c0f324717c7c1003e36a61fecea4" translate="yes" xml:space="preserve">
          <source>Finally, note that you can override the form field used for a given model field. See &lt;a href=&quot;#overriding-the-default-fields&quot;&gt;Overriding the default fields&lt;/a&gt; below.</source>
          <target state="translated">마지막으로, 주어진 모델 필드에 사용 된 양식 필드를 대체 할 수 있습니다. 아래 &lt;a href=&quot;#overriding-the-default-fields&quot;&gt;의 기본 필드 재정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9743b898367474965ebf376aa3504c5be173f876" translate="yes" xml:space="preserve">
          <source>Finally, note that you can&amp;rsquo;t define multiple &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags with the same name in the same template. This limitation exists because a block tag works in &amp;ldquo;both&amp;rdquo; directions. That is, a block tag doesn&amp;rsquo;t just provide a hole to fill &amp;ndash; it also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags in a template, that template&amp;rsquo;s parent wouldn&amp;rsquo;t know which one of the blocks&amp;rsquo; content to use.</source>
          <target state="translated">마지막으로 같은 템플릿에서 같은 이름으로 여러 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 태그를 정의 할 수 없습니다 . 이 제한은 블록 태그가&amp;ldquo;양방향&amp;rdquo;으로 작동하기 때문에 존재합니다. 즉, 블록 태그는 채울 구멍을 제공 할뿐 아니라 &lt;em&gt;부모&lt;/em&gt; 의 구멍을 채우는 내용도 정의합니다 . 템플릿에 비슷한 이름의 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 태그 가 두 개 있으면 해당 템플릿의 부모는 사용할 블록 내용 중 하나를 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="09b7888ce3860953a8e97b5c6c5cb529ccb8ba65" translate="yes" xml:space="preserve">
          <source>Finally, note that you&amp;rsquo;ll probably want to keep a normal (non-site-specific) &lt;code&gt;Manager&lt;/code&gt; on your model, even if you use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;. As explained in the &lt;a href=&quot;../../topics/db/managers&quot;&gt;manager documentation&lt;/a&gt;, if you define a manager manually, then Django won&amp;rsquo;t create the automatic &lt;code&gt;objects = models.Manager()&lt;/code&gt; manager for you. Also note that certain parts of Django &amp;ndash; namely, the Django admin site and generic views &amp;ndash; use whichever manager is defined &lt;em&gt;first&lt;/em&gt; in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put &lt;code&gt;objects = models.Manager()&lt;/code&gt; in your model, before you define &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마지막으로, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 사용하더라도 모델에 일반 (사이트 별이 아닌) &lt;code&gt;Manager&lt;/code&gt; 를 유지하고 싶을 것입니다 . &lt;a href=&quot;../../topics/db/managers&quot;&gt;관리자 문서에&lt;/a&gt; 설명 된대로 관리자를 수동으로 정의하면 Django가 자동 &lt;code&gt;objects = models.Manager()&lt;/code&gt; 관리자를 만들지 않습니다 . 또한 Django의 특정 부분 (즉, Django 관리 사이트 및 일반보기) 은 모델에서 가장 &lt;em&gt;먼저&lt;/em&gt; 정의 된 관리자를 사용 하므로 관리 사이트가 모든 사이트 (사이트 별 관리가 아닌)에 액세스하려는 경우, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 정의하기 전에 모델 에 &lt;code&gt;objects = models.Manager()&lt;/code&gt; 를 넣습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="534f475f8e6621717cc2fd78375e942df9b8fef4" translate="yes" xml:space="preserve">
          <source>Finally, our calendar system contains interesting edge cases. For example, you can&amp;rsquo;t always subtract one year directly from a given date:</source>
          <target state="translated">Finally, our calendar system contains interesting edge cases. For example, you can&amp;rsquo;t always subtract one year directly from a given date:</target>
        </trans-unit>
        <trans-unit id="597d26c9a6435c4d3d729d8b833ba9daedca211d" translate="yes" xml:space="preserve">
          <source>Finally, our calendar system contains interesting traps for computers:</source>
          <target state="translated">마지막으로, 캘린더 시스템에는 컴퓨터를위한 흥미로운 함정이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c2802a46ddcce0d4a717df48b205688d98ef322" translate="yes" xml:space="preserve">
          <source>Finally, realize that &lt;code&gt;update()&lt;/code&gt; does an update at the SQL level and, thus, does not call any &lt;code&gt;save()&lt;/code&gt; methods on your models, nor does it emit the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals (which are a consequence of calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;). If you want to update a bunch of records for a model that has a custom &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method, loop over them and call &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="translated">마지막으로 &lt;code&gt;update()&lt;/code&gt; 는 SQL 수준에서 업데이트를 수행하므로 아무 것도 호출하지 않습니다. &lt;code&gt;save()&lt;/code&gt; 모델에서 save () 메서드를&lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt; 신호를 내 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; &lt;/a&gt; ). 사용자 정의 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드 가있는 모델의 레코드를 업데이트 하려면 해당 레코드를 반복하고 다음과 같이 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 호출 하십시오.</target>
        </trans-unit>
        <trans-unit id="cef327d837a6ebcf77f58945fc7da002005d28f4" translate="yes" xml:space="preserve">
          <source>Finally, register the tag with your module&amp;rsquo;s &lt;code&gt;Library&lt;/code&gt; instance, as explained in &lt;a href=&quot;#howto-writing-custom-template-tags&quot;&gt;writing custom template tags&lt;/a&gt; above. Example:</source>
          <target state="translated">마지막으로, 위의 &lt;a href=&quot;#howto-writing-custom-template-tags&quot;&gt;사용자 정의 템플릿 태그 작성에&lt;/a&gt; 설명 된대로 모듈의 &lt;code&gt;Library&lt;/code&gt; 인스턴스에 태그를 등록하십시오 . 예:</target>
        </trans-unit>
        <trans-unit id="8b84b5ca6b61dd7ec3e13cb87b04368b16c3e016" translate="yes" xml:space="preserve">
          <source>Finally, register your &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; models with the admin site:</source>
          <target state="translated">마지막으로, 관리 사이트에 &lt;code&gt;Person&lt;/code&gt; 및 &lt;code&gt;Group&lt;/code&gt; 모델을 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ae59f1cd4f96cc1501fbd570f2103e93dd7c909" translate="yes" xml:space="preserve">
          <source>Finally, specify the custom model as the default user model for your project using the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting in your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">마지막으로 &lt;code&gt;settings.py&lt;/code&gt; 에서 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt; 설정을 사용하여 사용자 정의 모델을 프로젝트의 기본 사용자 모델로 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1de580b6192d9e344a15d96680c32ba2b8d2caae" translate="yes" xml:space="preserve">
          <source>Finally, the Django-provided base translation in &lt;code&gt;django/conf/locale&lt;/code&gt; is used as a fallback.</source>
          <target state="translated">마지막으로 &lt;code&gt;django/conf/locale&lt;/code&gt; 의 Django 제공 기본 번역 이 폴백으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c63e577d01012c7cf8876a70c793515073c96915" translate="yes" xml:space="preserve">
          <source>Finally, the following forms are tied to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and need to be rewritten or extended to work with a custom user model:</source>
          <target state="translated">마지막으로, 다음 양식은 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 와 연결 되어 있으며 사용자 정의 사용자 모델을 사용하려면 다시 작성하거나 확장해야합니다.</target>
        </trans-unit>
        <trans-unit id="329cb001d49bddce33496c86e763e7caf7228133" translate="yes" xml:space="preserve">
          <source>Finally, the size of a cookie can have an impact on the &lt;a href=&quot;https://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot;&gt;speed of your site&lt;/a&gt;.</source>
          <target state="translated">마지막으로 쿠키의 크기는 &lt;a href=&quot;https://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot;&gt;사이트 속도에&lt;/a&gt; 영향을 줄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a9fb92891ed9e384c8c066d50ed2e6aa79110ed" translate="yes" xml:space="preserve">
          <source>Finally, there is the &lt;a href=&quot;#django.contrib.gis.geos.fromfile&quot;&gt;&lt;code&gt;fromfile()&lt;/code&gt;&lt;/a&gt; factory method which returns a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object from a file:</source>
          <target state="translated">마지막으로 파일에서 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체 를 반환하는 fromfile &lt;a href=&quot;#django.contrib.gis.geos.fromfile&quot;&gt; &lt;code&gt;fromfile()&lt;/code&gt; &lt;/a&gt; 팩토리 메소드 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e4bdea9995161777366d8c1c03e09daac66d940" translate="yes" xml:space="preserve">
          <source>Finally, to avoid repetitive fallback code, the framework provides a &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;django.contrib.sites.shortcuts.get_current_site()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">마지막으로 반복되는 대체 코드를 피하기 위해 프레임 워크는 &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt; &lt;code&gt;django.contrib.sites.shortcuts.get_current_site()&lt;/code&gt; &lt;/a&gt; 함수를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="ea48d70c9f2a1aeff3913cc638d5e4f3d64cde28" translate="yes" xml:space="preserve">
          <source>Finally, we hook these new views into the URLconf:</source>
          <target state="translated">마지막으로 이러한 새로운 뷰를 URLconf에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="554f9eb64d754ccae5e2a1ca7de1048bc404dc95" translate="yes" xml:space="preserve">
          <source>Finally, we implement the rest of the methods that allow our query expression to play nice with other query expressions:</source>
          <target state="translated">마지막으로, 쿼리 표현식이 다른 쿼리 표현식과 잘 작동 할 수 있도록 나머지 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="f96555ce97c75bd6adcf9e62917e490f288ab96b" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll add a &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt; 설정을합니다 :</target>
        </trans-unit>
        <trans-unit id="a88fe2f705ab58ff5303b4a2b755e83de2f7b0ff" translate="yes" xml:space="preserve">
          <source>Finally, you can also use a &lt;a href=&quot;../db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;. This is useful for example if you have a &lt;a href=&quot;../db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt;:</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;. 예를 들어&lt;a href=&quot;../db/managers#custom-managers&quot;&gt; 사용자 정의 관리자&lt;/a&gt; 가있는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c2a581eaa73c38481020b614fe636e3f569653d5" translate="yes" xml:space="preserve">
          <source>Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_actions&quot;&gt;&lt;code&gt;ModelAdmin.get_actions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마지막으로, 요청에 따라 (및 사용자별로) 작업을 조건부로 활성화하거나 비활성화 할 수 있습니다. &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_actions&quot;&gt; &lt;code&gt;ModelAdmin.get_actions()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="64e614e36dff5fc2ddcd15c0ac50da2771ffe25d" translate="yes" xml:space="preserve">
          <source>Finally, you can pass &lt;code&gt;HttpResponse&lt;/code&gt; an iterator rather than strings. &lt;code&gt;HttpResponse&lt;/code&gt; will consume the iterator immediately, store its content as a string, and discard it. Objects with a &lt;code&gt;close()&lt;/code&gt; method such as files and generators are immediately closed.</source>
          <target state="translated">마지막으로 문자열 대신 반복자를 &lt;code&gt;HttpResponse&lt;/code&gt; 에 전달할 수 있습니다 . &lt;code&gt;HttpResponse&lt;/code&gt; 는 반복자를 즉시 ​​사용하고 내용을 문자열로 저장 한 후 버립니다. 파일 및 생성기와 같은 &lt;code&gt;close()&lt;/code&gt; 메서드 가있는 객체 는 즉시 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="24082142a7bee0d7266eae78b1faddd1c1cc9fa6" translate="yes" xml:space="preserve">
          <source>Finally, you can use configured engines directly:</source>
          <target state="translated">마지막으로 구성된 엔진을 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e37d4b35a277a40229c7c1b83fd098e99922b7fa" translate="yes" xml:space="preserve">
          <source>Finally, you may run the test as follows:</source>
          <target state="translated">마지막으로 다음과 같이 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef950eb0217067af3f081ee9a17610cab8bc677b" translate="yes" xml:space="preserve">
          <source>Finally, you must specify a &lt;a href=&quot;settings#std:setting-DATABASE-ENGINE&quot;&gt;&lt;code&gt;DATABASE-ENGINE&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;settings.py&lt;/code&gt; file:</source>
          <target state="translated">마지막으로 &lt;code&gt;settings.py&lt;/code&gt; 에서 &lt;a href=&quot;settings#std:setting-DATABASE-ENGINE&quot;&gt; &lt;code&gt;DATABASE-ENGINE&lt;/code&gt; &lt;/a&gt; 을 지정해야합니다. 파일 합니다.</target>
        </trans-unit>
        <trans-unit id="9a832465bbf151d241d327e71e691160848f2552" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll have to actually set the header on your AJAX request, while protecting the CSRF token from being sent to other domains using &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;settings.crossDomain&lt;/a&gt; in jQuery 1.5.1 and newer:</source>
          <target state="translated">마지막으로 &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;settings.crossDomain을&lt;/a&gt; 사용하여 CSRF 토큰이 다른 도메인으로 전송되지 않도록 보호하면서 실제로 AJAX 요청에 헤더를 설정해야합니다. jQuery 1.5.1 이상에서 을 .</target>
        </trans-unit>
        <trans-unit id="ef7c278ab8519615bb5ecd8737b7187faccc3ca3" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You&amp;rsquo;ll need to create users as part of the test suite &amp;ndash; either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can&amp;rsquo;t set the user&amp;rsquo;s password by setting the password attribute directly &amp;ndash; you must use the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt; function to store a correctly hashed password. Alternatively, you can use the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt;&lt;code&gt;create_user()&lt;/code&gt;&lt;/a&gt; helper method to create a new user with a correctly hashed password.</source>
          <target state="translated">마지막으로이 방법을 사용하려면 먼저 사용자 계정을 만들어야합니다. 위에서 설명한 것처럼 테스트 러너는 기본적으로 사용자가없는 테스트 데이터베이스를 사용하여 실행됩니다. 결과적으로 프로덕션 사이트에서 유효한 사용자 계정은 테스트 조건에서 작동하지 않습니다. 테스트 스위트의 일부로 사용자를 수동으로 (Django 모델 API 사용) 또는 테스트 픽스처와 함께 작성해야합니다. 테스트 사용자가 비밀번호를 가지도록하려면 password 속성을 직접 설정하여 사용자 비밀번호를 설정할 수 없습니다. &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt; &lt;code&gt;set_password()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 올바르게 해시 된 비밀번호를 저장해야합니다. 또는 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt; &lt;code&gt;create_user()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 헬퍼 메소드를 사용하여 올바르게 해시 된 비밀번호로 새 사용자를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5592a50ac2b6ac4bb6dd2632a366dc7d1aac5b7" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll need to set the header on your AJAX request. Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;fetch()&lt;/a&gt; API:</source>
          <target state="translated">Finally, you&amp;rsquo;ll need to set the header on your AJAX request. Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;fetch()&lt;/a&gt; API:</target>
        </trans-unit>
        <trans-unit id="ca2f376257418ebbe42c6bba7c397875f4d0b018" translate="yes" xml:space="preserve">
          <source>Find all you need to know about the automated admin interface, one of Django&amp;rsquo;s most popular features:</source>
          <target state="translated">Django의 가장 인기있는 기능 중 하나 인 자동 관리 인터페이스에 대해 알아야 할 모든 것을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="83be5a14f83b93bd2f267cd5495799f028c405bd" translate="yes" xml:space="preserve">
          <source>Finders Module</source>
          <target state="translated">파인더 모듈</target>
        </trans-unit>
        <trans-unit id="10038fb951c11f2f94be750c35ea01b826bd98ad" translate="yes" xml:space="preserve">
          <source>Finding data from your production database when running tests?</source>
          <target state="translated">테스트를 실행할 때 프로덕션 데이터베이스에서 데이터를 찾으십니까?</target>
        </trans-unit>
        <trans-unit id="c719c26326806dda05be19d8dcf178818036ad21" translate="yes" xml:space="preserve">
          <source>Finding your first real ticket</source>
          <target state="translated">첫 번째 실제 티켓 찾기</target>
        </trans-unit>
        <trans-unit id="1f9e8d29ca99e765d9e5e9965a3b638f47f8c831" translate="yes" xml:space="preserve">
          <source>Fink</source>
          <target state="translated">Fink</target>
        </trans-unit>
        <trans-unit id="e427d7820cf1b8e5b50925cc386518036005e42d" translate="yes" xml:space="preserve">
          <source>Firebird</source>
          <target state="translated">Firebird</target>
        </trans-unit>
        <trans-unit id="6571073e23c4fa6e884ba21f0900816b1dbee48f" translate="yes" xml:space="preserve">
          <source>Firefox 3.6.9+</source>
          <target state="translated">Firefox 3.6.9 이상</target>
        </trans-unit>
        <trans-unit id="4dcec4af22f6f720c7f8f4e9497fe78324b1246c" translate="yes" xml:space="preserve">
          <source>First Django imports each item in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">먼저 Django는 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 각 항목을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="8ee7d23eafc97724f82981c3dc7c888430666917" translate="yes" xml:space="preserve">
          <source>First download the latest GDAL release version and untar the archive:</source>
          <target state="translated">먼저 최신 GDAL 릴리스 버전을 다운로드하고 아카이브를 압축 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="c88843d149751ca2a972950ccc6152817e00f53b" translate="yes" xml:space="preserve">
          <source>First is a question shortcut function, &lt;code&gt;create_question&lt;/code&gt;, to take some repetition out of the process of creating questions.</source>
          <target state="translated">먼저 질문 을 만드는 과정에서 반복 되는 질문 바로 가기 함수 인 &lt;code&gt;create_question&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="43035eab990cc69bcd9f23d2944f973548270b12" translate="yes" xml:space="preserve">
          <source>First of all, &lt;code&gt;headline&lt;/code&gt; is not indexed, which will make the underlying database fetch slower.</source>
          <target state="translated">우선, &lt;code&gt;headline&lt;/code&gt; 은 색인화되지 않으므로 기본 데이터베이스 반입 속도가 느려집니다.</target>
        </trans-unit>
        <trans-unit id="99290d59716a55c82e8b063db8bf7f05e1a4b00b" translate="yes" xml:space="preserve">
          <source>First steps</source>
          <target state="translated">첫 단계</target>
        </trans-unit>
        <trans-unit id="20699b2a5803a6e614a59a724943eb463171c0f3" translate="yes" xml:space="preserve">
          <source>First time contributors should also read Django&amp;rsquo;s &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/new-contributors/&quot;&gt;documentation for first time contributors&lt;/a&gt;. It has lots of good advice for those of us who are new to helping out with Django.</source>
          <target state="translated">최초 기고자는 또한 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/new-contributors/&quot;&gt;최초 기고자를위한&lt;/a&gt; Django의 문서를 읽어야 합니다. 장고를 처음 접하는 사람들에게 좋은 조언이 많이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe9b57599c86c951e4a7e1b5f1284430d8021d77" translate="yes" xml:space="preserve">
          <source>First time contributors should also read Django&amp;rsquo;s &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/new-contributors/&quot;&gt;documentation for first time contributors&lt;/a&gt;. It has lots of good advice for those of us who are new to helping out with Django.</source>
          <target state="translated">First time contributors should also read Django&amp;rsquo;s &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/new-contributors/&quot;&gt;documentation for first time contributors&lt;/a&gt;. It has lots of good advice for those of us who are new to helping out with Django.</target>
        </trans-unit>
        <trans-unit id="77213d5813b86668ea11f1f10608d43f8d41acba" translate="yes" xml:space="preserve">
          <source>First we need to add &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; to our &lt;code&gt;Author&lt;/code&gt; class:</source>
          <target state="translated">처음에 우리는 추가 할 필요가 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 우리에게 &lt;code&gt;Author&lt;/code&gt; 클래스 :</target>
        </trans-unit>
        <trans-unit id="bc39948ba4573e7943c3bf60f22272eb1d430136" translate="yes" xml:space="preserve">
          <source>First we&amp;rsquo;ll need to create a user who can login to the admin site. Run the following command:</source>
          <target state="translated">먼저 관리자 사이트에 로그인 할 수있는 사용자를 만들어야합니다. 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="b8fec17a2b622381f0a4b41161e6bbe4d8bdb609" translate="yes" xml:space="preserve">
          <source>First, Django looks for a matching &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, &lt;code&gt;'polls'&lt;/code&gt;). This will yield a list of instances of that application.</source>
          <target state="translated">먼저 Django는 일치하는 &lt;a href=&quot;#term-application-namespace&quot;&gt;응용 프로그램 네임 스페이스&lt;/a&gt; (이 예에서는 &lt;code&gt;'polls'&lt;/code&gt; )를 찾습니다 . 해당 응용 프로그램의 인스턴스 목록이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="ef70a6cfb1e8f430c465869e59c076034923c444" translate="yes" xml:space="preserve">
          <source>First, check if you can install SpatiaLite from system packages or binaries.</source>
          <target state="translated">먼저 시스템 패키지 또는 바이너리에서 SpatiaLite를 설치할 수 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="95251784875a5e4d20dd8450c9b80410ac635a7f" translate="yes" xml:space="preserve">
          <source>First, create a directory called &lt;code&gt;static&lt;/code&gt; in your &lt;code&gt;polls&lt;/code&gt; directory. Django will look for static files there, similarly to how Django finds templates inside &lt;code&gt;polls/templates/&lt;/code&gt;.</source>
          <target state="translated">먼저, &lt;code&gt;polls&lt;/code&gt; 디렉토리에 &lt;code&gt;static&lt;/code&gt; 디렉토리를 작성 하십시오 . Django는 Django가 &lt;code&gt;polls/templates/&lt;/code&gt; 내에서 템플릿을 찾는 방법과 유사하게 정적 파일을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="f96e5da4a1149d193b2bdcddd8b25aef2a1fc28b" translate="yes" xml:space="preserve">
          <source>First, create a directory called &lt;code&gt;templates&lt;/code&gt; in your &lt;code&gt;polls&lt;/code&gt; directory. Django will look for templates in there.</source>
          <target state="translated">먼저, &lt;code&gt;polls&lt;/code&gt; 디렉토리에 &lt;code&gt;templates&lt;/code&gt; 라는 디렉토리를 작성 하십시오 . Django는 거기에서 템플릿을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="1f90c2c681abf881963f9d053d00ec47ee328d19" translate="yes" xml:space="preserve">
          <source>First, create a parent directory for &lt;code&gt;polls&lt;/code&gt;, outside of your Django project. Call this directory &lt;code&gt;django-polls&lt;/code&gt;.</source>
          <target state="translated">먼저 Django 프로젝트 외부 에서 &lt;code&gt;polls&lt;/code&gt; 의 상위 디렉토리를 만듭니다 . 이 디렉토리를 &lt;code&gt;django-polls&lt;/code&gt; 로 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="07c0c655fdb6b481e371840e5383fd9133c1a098" translate="yes" xml:space="preserve">
          <source>First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:</source>
          <target state="translated">먼저 인수를 사용하여 결과에 대한 데이터 사전을 생성하는 함수를 정의하십시오. 여기서 중요한 점은 더 복잡한 것은 아니지만 사전 만 반환하면된다는 것입니다. 템플릿 조각에 대한 템플릿 컨텍스트로 사용됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="40a6ca6ac1151f0eec3cdc666ba2d0dcfb692276" translate="yes" xml:space="preserve">
          <source>First, download GEOS from the GEOS website and untar the source archive:</source>
          <target state="translated">먼저 GEOS 웹 사이트에서 GEOS를 다운로드하고 소스 아카이브를 압축 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="05ac470b0f07720d2a10c844d43976a668aacc11" translate="yes" xml:space="preserve">
          <source>First, download the PROJ.4 source code and datum shifting files &lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;:</source>
          <target state="translated">먼저 PROJ.4 소스 코드 및 데이텀 전환 파일 &lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;[1]을&lt;/a&gt; 다운로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e268d6f08ea9c850920ac60f90e7a12aac80aa6" translate="yes" xml:space="preserve">
          <source>First, download the latest &lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 9.x installer&lt;/a&gt; from the &lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt; website. After downloading, run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them.</source>
          <target state="translated">먼저 &lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt; 웹 사이트 에서 최신 &lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 9.x 설치 관리자&lt;/a&gt; 를 다운로드하십시오 . 다운로드 후 설치 프로그램을 실행하고 화면의 지시를 따르고 변경 결과를 알지 못하는 경우 기본 옵션을 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="da3b0283ec00b2d4fdd63bac9b59bf3e759edc72" translate="yes" xml:space="preserve">
          <source>First, follow the instructions in the &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos packages&lt;/a&gt; section.</source>
          <target state="translated">먼저 &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos 패키지&lt;/a&gt; 섹션 의 지침을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="64c0574de613a5a5d855304b6002948bbfb18e08" translate="yes" xml:space="preserve">
          <source>First, here&amp;rsquo;s a configuration which writes all logging from the &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; logger to a local file:</source>
          <target state="translated">먼저 &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; 로거의 모든 로깅을 로컬 파일에 기록하는 구성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4065a170cb0a7fcfc755d6ce0c9d5d28c68c14e5" translate="yes" xml:space="preserve">
          <source>First, invoke the Django shell:</source>
          <target state="translated">먼저 Django 쉘을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="72e9467116dd2961d61a735a8c47c0bc77e85890" translate="yes" xml:space="preserve">
          <source>First, it looks for the language prefix in the requested URL. This is only performed when you are using the &lt;code&gt;i18n_patterns&lt;/code&gt; function in your root URLconf. See &lt;a href=&quot;#url-internationalization&quot;&gt;Internationalization: in URL patterns&lt;/a&gt; for more information about the language prefix and how to internationalize URL patterns.</source>
          <target state="translated">먼저 요청 된 URL에서 언어 접두사를 찾습니다. 루트 URLconf에서 &lt;code&gt;i18n_patterns&lt;/code&gt; 함수를 사용하는 경우에만 수행됩니다 . 참조 &lt;a href=&quot;#url-internationalization&quot;&gt;국제화 : URL 패턴에&lt;/a&gt; 언어 접두사와 방법 URL 패턴을 국제화하는 방법에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="f6bfabb8d777bbdb47935b9c331aa5bdea0d0a3c" translate="yes" xml:space="preserve">
          <source>First, it tries to call a method, passing the &lt;code&gt;obj&lt;/code&gt; argument, where &lt;code&gt;obj&lt;/code&gt; is the object returned by &lt;code&gt;get_object()&lt;/code&gt;.</source>
          <target state="translated">먼저 &lt;code&gt;obj&lt;/code&gt; 인수를 전달하여 메소드를 호출하려고 시도합니다 . 여기서 &lt;code&gt;obj&lt;/code&gt; 는 &lt;code&gt;get_object()&lt;/code&gt; 반환 한 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="f1c355f311bddfd7d6f814d29cbf65fae7c521e3" translate="yes" xml:space="preserve">
          <source>First, make sure your template settings are checking inside app directories:</source>
          <target state="translated">먼저 템플릿 설정이 앱 디렉토리 내부를 확인하고 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4bbd700df3056ac3723d7fcd139048bbfde7bbcc" translate="yes" xml:space="preserve">
          <source>First, open the &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf and change it like so:</source>
          <target state="translated">먼저, &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf를 열고 다음 과 같이 변경하십시오 :</target>
        </trans-unit>
        <trans-unit id="43dd5d61895190dc15dd5b6148805d46a692e3ef" translate="yes" xml:space="preserve">
          <source>First, we import the class &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;../../ref/request-response#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module, along with Python&amp;rsquo;s &lt;code&gt;datetime&lt;/code&gt; library.</source>
          <target state="translated">먼저 &lt;a href=&quot;../../ref/request-response#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; &lt;/a&gt; 모듈 에서 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 클래스 를 파이썬의 &lt;code&gt;datetime&lt;/code&gt; 라이브러리 와 함께 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="145a1430fd08e0dbf0cb33c1604421f8f2437c3d" translate="yes" xml:space="preserve">
          <source>First, we need to define a receiver function. A receiver can be any Python function or method:</source>
          <target state="translated">먼저 리시버 함수를 정의해야합니다. 수신자는 모든 파이썬 함수 또는 메소드 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13baffa2f5f7de1c46ad5da632df46aaaa24a8de" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;d need to add an author detail bit in the URLconf to point to a custom view:</source>
          <target state="translated">먼저 사용자 정의보기를 가리 키기 위해 URLconf에 작성자 세부 사항 비트를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="8454a5ec130fde2ddf69d758a0b9cacddf54e6f8" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll add the custom hasher:</source>
          <target state="translated">먼저 커스텀 hasher를 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="c2a03644e55ef699e43555777f47af59c4cf407e" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll explore overriding templates by creating replacement templates in your project&amp;rsquo;s templates directory.</source>
          <target state="translated">먼저 프로젝트의 템플릿 디렉토리에 대체 템플릿을 만들어 템플릿 재정의에 대해 알아 봅니다.</target>
        </trans-unit>
        <trans-unit id="fdf45d6a678bfbb18d68f2f58940017b92430b08" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll need to write a function that gets called when the action is triggered from the admin. Action functions are regular functions that take three arguments:</source>
          <target state="translated">먼저 관리자로부터 작업이 트리거 될 때 호출되는 함수를 작성해야합니다. 액션 함수는 세 가지 인수를 취하는 일반 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4e7eccbd6c4b76c9e1f9ca2b9a2f55acb81f48d2" translate="yes" xml:space="preserve">
          <source>First, you can let the formset do most of the work:</source>
          <target state="translated">먼저 폼셋이 대부분의 작업을 수행하도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bf556882e52bc156e88cba7a5467001923ad11e" translate="yes" xml:space="preserve">
          <source>First, you must add the &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt; to the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting &lt;strong&gt;after&lt;/strong&gt; the &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">첫째, 당신은 추가해야합니다 &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.RemoteUserMiddleware&lt;/code&gt; 을&lt;/a&gt; 받는 &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정 &lt;strong&gt;후 &lt;/strong&gt;&lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="73abbbb12778e4c863b4cfddcc6f67ea55cc0130" translate="yes" xml:space="preserve">
          <source>First, you must get the CSRF token. How to do that depends on whether or not the &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; settings are enabled.</source>
          <target state="translated">먼저 CSRF 토큰을 얻어야합니다. 이를 수행하는 방법은 &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt; 설정의 사용 가능 여부에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="3436659d0b5e771764d4e0fb1222b0bbb9e16717" translate="yes" xml:space="preserve">
          <source>Firstly - the &lt;code&gt;MembershipInline&lt;/code&gt; class references &lt;code&gt;Group.members.through&lt;/code&gt;. The &lt;code&gt;through&lt;/code&gt; attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field.</source>
          <target state="translated">먼저 &lt;code&gt;MembershipInline&lt;/code&gt; 클래스는 &lt;code&gt;Group.members.through&lt;/code&gt; 를 참조 합니다 . &lt;code&gt;through&lt;/code&gt; 속성은 다 대다 관계를 관리하는 모델에 대한 참조입니다. 이 모델은 다 대다 필드를 정의 할 때 Django가 자동으로 작성합니다.</target>
        </trans-unit>
        <trans-unit id="47a2156582e62c3760eb7ba24dc66644c3150981" translate="yes" xml:space="preserve">
          <source>Firstly, in a real-life case you need to consider what is happening before and after your count to work out what&amp;rsquo;s an optimal way of doing it &lt;em&gt;in that particular context&lt;/em&gt;. The database optimization documents describes &lt;a href=&quot;db/optimization#overuse-of-count-and-exists&quot;&gt;a case where counting in the template would be better&lt;/a&gt;.</source>
          <target state="translated">첫째, 실제 &lt;em&gt;상황에서는 특정 전후 상황에서&lt;/em&gt; 최적의 방법으로 작업하기 위해 카운트 전후에 무슨 일이 일어나고 있는지 고려해야합니다 . 데이터베이스 최적화 문서 &lt;a href=&quot;db/optimization#overuse-of-count-and-exists&quot;&gt;는 템플릿의 계산이 더 나은 경우를&lt;/a&gt; 설명 합니다 .</target>
        </trans-unit>
        <trans-unit id="654babb9ef1f86c0cc82cbdc43ce71dd33c0363f" translate="yes" xml:space="preserve">
          <source>Firstly, in order to upload files, you&amp;rsquo;ll need to make sure that your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element correctly defines the &lt;code&gt;enctype&lt;/code&gt; as &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt;:</source>
          <target state="translated">먼저 파일을 업로드하려면 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소가 &lt;code&gt;enctype&lt;/code&gt; 을 &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt; 로 올바르게 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ceb459ef79103d51bc85693c0b6aa6118973366d" translate="yes" xml:space="preserve">
          <source>Firstly, you can set an &lt;code&gt;app_name&lt;/code&gt; attribute in the included URLconf module, at the same level as the &lt;code&gt;urlpatterns&lt;/code&gt; attribute. You have to pass the actual module, or a string reference to the module, to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;, not the list of &lt;code&gt;urlpatterns&lt;/code&gt; itself.</source>
          <target state="translated">첫째, 당신은 설정할 수 있습니다 &lt;code&gt;app_name&lt;/code&gt; 과 같은 수준에서 포함 된 URLconf 모듈의 속성을 &lt;code&gt;urlpatterns&lt;/code&gt; 의 속성. &lt;code&gt;urlpatterns&lt;/code&gt; 자체가 아닌 실제 모듈 또는 모듈에 대한 문자열 참조를 전달하여 &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt; 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="952d6d50050346e8e9fde3f473baa28e0cf1643d" translate="yes" xml:space="preserve">
          <source>Firstly, you can use the &lt;code&gt;send_messages()&lt;/code&gt; method. &lt;code&gt;send_messages()&lt;/code&gt; takes a list of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances (or subclasses), and sends them all using a single connection.</source>
          <target state="translated">먼저 &lt;code&gt;send_messages()&lt;/code&gt; 메소드를 사용할 수 있습니다 . &lt;code&gt;send_messages()&lt;/code&gt; 의 목록이 소요 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 의&lt;/a&gt; 인스턴스 (또는 서브 클래스), 단일 연결을 사용하여 그들 모두를 전송합니다.</target>
        </trans-unit>
        <trans-unit id="ddd5f3c43d46d2dd84100e4b9202c1e150515732" translate="yes" xml:space="preserve">
          <source>Firstly, your tests must be &lt;code&gt;async def&lt;/code&gt; methods on the test class (in order to give them an asynchronous context). Django will automatically detect any &lt;code&gt;async def&lt;/code&gt; tests and wrap them so they run in their own event loop.</source>
          <target state="translated">Firstly, your tests must be &lt;code&gt;async def&lt;/code&gt; methods on the test class (in order to give them an asynchronous context). Django will automatically detect any &lt;code&gt;async def&lt;/code&gt; tests and wrap them so they run in their own event loop.</target>
        </trans-unit>
        <trans-unit id="1d0e1d4e72315bbc94817bd7e1994f363c26f394" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;UnicodeEncodeError&lt;/code&gt; for file uploads</source>
          <target state="translated">파일 업로드를위한 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="8975443fcef2a9c2e02d4a2b02c41dba5c20d6fe" translate="yes" xml:space="preserve">
          <source>Fixing the bug</source>
          <target state="translated">버그 수정</target>
        </trans-unit>
        <trans-unit id="d580141077874f18b73dcfdda86434ddde71ab28" translate="yes" xml:space="preserve">
          <source>Fixture loading</source>
          <target state="translated">고정물 로딩</target>
        </trans-unit>
        <trans-unit id="93a9d4b62c49df4936d5f701755ab05d3a9187a5" translate="yes" xml:space="preserve">
          <source>Fixtures</source>
          <target state="translated">Fixtures</target>
        </trans-unit>
        <trans-unit id="649f72a93abda9c49a9ca63c86342bb63ae6a485" translate="yes" xml:space="preserve">
          <source>Fixtures are also used by the &lt;a href=&quot;../topics/testing/tools#topics-testing-fixtures&quot;&gt;testing framework&lt;/a&gt; to help set up a consistent test environment.</source>
          <target state="translated">또한 &lt;a href=&quot;../topics/testing/tools#topics-testing-fixtures&quot;&gt;테스트 프레임 워크&lt;/a&gt; 에서는 고정물을 사용 하여 일관된 테스트 환경을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="cc1b2f853c73dd2ef4af83d5cc672056528796fb" translate="yes" xml:space="preserve">
          <source>Fixtures generated with &lt;code&gt;USE_TZ = False&lt;/code&gt;, or before Django 1.4, use the &amp;ldquo;naive&amp;rdquo; format. If your project contains such fixtures, after you enable time zone support, you&amp;rsquo;ll see &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeWarning&quot;&gt;&lt;code&gt;RuntimeWarning&lt;/code&gt;&lt;/a&gt;s when you load them. To get rid of the warnings, you must convert your fixtures to the &amp;ldquo;aware&amp;rdquo; format.</source>
          <target state="translated">&lt;code&gt;USE_TZ = False&lt;/code&gt; 또는 Django 1.4 이전에 생성 된 픽스쳐 는&amp;ldquo;순진&amp;rdquo;형식을 사용합니다. 프로젝트에 그러한 조명기들이 포함되어 있다면, 시간대 지원을 활성화 한 후, 그것들을로드 할 때 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeWarning&quot;&gt; &lt;code&gt;RuntimeWarning&lt;/code&gt; &lt;/a&gt; 이 보일 것입니다. 경고를 없애려면 조명기를 &quot;인식&quot;형식으로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="31f4fad7b21527024016324c7145b53c88b4f070" translate="yes" xml:space="preserve">
          <source>Fixtures may be compressed in &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;gz&lt;/code&gt;, or &lt;code&gt;bz2&lt;/code&gt; format. For example:</source>
          <target state="translated">고정물은 &lt;code&gt;zip&lt;/code&gt; , &lt;code&gt;gz&lt;/code&gt; 또는 &lt;code&gt;bz2&lt;/code&gt; 형식 으로 압축 될 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0c5b989c2d6e6bdd59d22e11ad3c1993e41d8ac8" translate="yes" xml:space="preserve">
          <source>Flatpage templates</source>
          <target state="translated">플랫 페이지 템플릿</target>
        </trans-unit>
        <trans-unit id="ca8db34dc5820ff17af7ddc9a31f107d898dc72a" translate="yes" xml:space="preserve">
          <source>Flatpage templates are passed a single context variable, &lt;code&gt;flatpage&lt;/code&gt;, which is the flatpage object.</source>
          <target state="translated">Flatpage 템플릿은 하나의 컨텍스트 변수 전달 &lt;code&gt;flatpage&lt;/code&gt; flatpage 개체이다.</target>
        </trans-unit>
        <trans-unit id="7de6b24fcf1c2acb2cf38c3564995c617c021e83" translate="yes" xml:space="preserve">
          <source>Flatpages</source>
          <target state="translated">Flatpages</target>
        </trans-unit>
        <trans-unit id="1805c01f84a571eb39718db2b5c9de479ccb1b0b" translate="yes" xml:space="preserve">
          <source>Flatpages are represented by a standard &lt;a href=&quot;../../topics/db/models&quot;&gt;Django model&lt;/a&gt;, which lives in &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/flatpages/models.py&quot;&gt;django/contrib/flatpages/models.py&lt;/a&gt;. You can access flatpage objects via the &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django database API&lt;/a&gt;.</source>
          <target state="translated">Flatpages는 표준으로 표시됩니다 &lt;a href=&quot;../../topics/db/models&quot;&gt;장고 모델&lt;/a&gt; 에 살고, &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/flatpages/models.py&quot;&gt;장고 /있는 contrib / flatpages / models.py&lt;/a&gt; . &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django 데이터베이스 API&lt;/a&gt; 를 통해 플랫 페이지 객체에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="76bac1a4adf8a73eecc7c5cd6ace5a3ef38fbb8e" translate="yes" xml:space="preserve">
          <source>Flatpages will not apply view middleware</source>
          <target state="translated">플랫 페이지는 미들웨어보기를 적용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="be50bf019784d62df9e76ade29eac060efd356c2" translate="yes" xml:space="preserve">
          <source>Following relationships &amp;ldquo;backward&amp;rdquo;</source>
          <target state="translated">&quot;뒤로&quot;관계를 따라</target>
        </trans-unit>
        <trans-unit id="72a2f7f3de2f03aa6bed21060ae26fa0ec8ee75a" translate="yes" xml:space="preserve">
          <source>Following relationships backwards</source>
          <target state="translated">거꾸로 관계를 따라</target>
        </trans-unit>
        <trans-unit id="2962af366a6a17e326ab4f60b0fbf6a0f052eefd" translate="yes" xml:space="preserve">
          <source>Following these guidelines is particularly necessary if you write reusable forms, form fields, and model fields.</source>
          <target state="translated">재사용 가능한 양식, 양식 필드 및 모델 필드를 작성하는 경우 이러한 지침을 따르는 것이 특히 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8799db14a19349173c508b9e0760c066a41322c9" translate="yes" xml:space="preserve">
          <source>Follows symlinks to directories when looking for new translation strings.</source>
          <target state="translated">새 번역 문자열을 찾을 때 디렉토리에 대한 심볼릭 링크를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="4c9800d93f6eb82531c506a8502d3a682cbf8592" translate="yes" xml:space="preserve">
          <source>Foot, Foot (International)</source>
          <target state="translated">발, 발 (국제)</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="8778e38c267b25f48a4d77bf61008d34682f3180" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;default=date.today&lt;/code&gt; - from &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.today&quot;&gt;&lt;code&gt;datetime.date.today()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">들어 &lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; : &lt;code&gt;default=date.today&lt;/code&gt; -에서 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.today&quot;&gt; &lt;code&gt;datetime.date.today()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="110b4938ed9062f37b2508210c9e670f18a44565" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;default=timezone.now&lt;/code&gt; - from &lt;a href=&quot;../utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">대한 &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; : &lt;code&gt;default=timezone.now&lt;/code&gt; -에서 &lt;a href=&quot;../utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="741319df59ed93ce505c7c02877f25b3ed1aaea2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, the &lt;code&gt;bulk&lt;/code&gt; argument is passed on to &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">들어 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 개체의 &lt;code&gt;bulk&lt;/code&gt; 인수에 전달한다 &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c9651ca2921e2480cd0c28bb2f088f3b4e6a026c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, this method accepts a &lt;code&gt;bulk&lt;/code&gt; argument to control how to perform the operation. If &lt;code&gt;True&lt;/code&gt; (the default), &lt;code&gt;QuerySet.update()&lt;/code&gt; is used. If &lt;code&gt;bulk=False&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method of each individual model instance is called instead. This triggers the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals and comes at the expense of performance.</source>
          <target state="translated">들면 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 오브젝트,이 방법은 허용 &lt;code&gt;bulk&lt;/code&gt; 어떻게 동작을 수행하도록 제어 인자. 경우 &lt;code&gt;True&lt;/code&gt; (기본), &lt;code&gt;QuerySet.update()&lt;/code&gt; 사용됩니다. &lt;code&gt;bulk=False&lt;/code&gt; 인 경우 각 개별 모델 인스턴스 의 &lt;code&gt;save()&lt;/code&gt; 메소드가 대신 호출됩니다. 이렇게하면 &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt; 신호가 트리거되고 성능이 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="7b7f862e3c2a20b574e8eef35fee476492f18603" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, this method only exists if &lt;code&gt;null=True&lt;/code&gt;. If the related field can&amp;rsquo;t be set to &lt;code&gt;None&lt;/code&gt; (&lt;code&gt;NULL&lt;/code&gt;), then an object can&amp;rsquo;t be removed from a relation without being added to another. In the above example, removing &lt;code&gt;e&lt;/code&gt; from &lt;code&gt;b.entry_set()&lt;/code&gt; is equivalent to doing &lt;code&gt;e.blog = None&lt;/code&gt;, and because the &lt;code&gt;blog&lt;/code&gt;&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have &lt;code&gt;null=True&lt;/code&gt;, this is invalid.</source>
          <target state="translated">들어 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 객체 경우,이 메소드는 존재 &lt;code&gt;null=True&lt;/code&gt; . 관련 필드를 &lt;code&gt;None&lt;/code&gt; ( &lt;code&gt;NULL&lt;/code&gt; ) 으로 설정할 수 없으면 다른 오브젝트에 추가하지 않고 관계에서 오브젝트를 제거 할 수 없습니다. 위의 예 에서 &lt;code&gt;b.entry_set()&lt;/code&gt; 에서 &lt;code&gt;e&lt;/code&gt; 를 제거 하는 &lt;code&gt;e.blog = None&lt;/code&gt; 수행과 동일하며 , &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; &lt;code&gt;blog&lt;/code&gt; &lt;code&gt;null=True&lt;/code&gt; 가 없으므로 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ec8fef3dc57b8e1919c123ac5e02c80e887f7f1" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;UserAttributeSimilarityValidator&lt;/code&gt; and &lt;code&gt;CommonPasswordValidator&lt;/code&gt;, we&amp;rsquo;re using the default settings in this example. &lt;code&gt;NumericPasswordValidator&lt;/code&gt; has no settings.</source>
          <target state="translated">들어 &lt;code&gt;UserAttributeSimilarityValidator&lt;/code&gt; 및 &lt;code&gt;CommonPasswordValidator&lt;/code&gt; , 우리는이 예에서 기본 설정을 사용하고 있습니다. &lt;code&gt;NumericPasswordValidator&lt;/code&gt; 에는 설정이 없습니다.</target>
        </trans-unit>
        <trans-unit id="cbe7a4654f6563b054d500267f83512db264635c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;to_python()&lt;/code&gt;, if anything goes wrong during value conversion, you should raise a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">들어 &lt;code&gt;to_python()&lt;/code&gt; 아무것도 값 변환 중에 잘못가는 경우에, 당신은 인상해야 &lt;a href=&quot;../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 의&lt;/a&gt; 예외.</target>
        </trans-unit>
        <trans-unit id="9c6a88e5cfef39cc8e6590be619ddb6e98c6c41d" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;measuring&lt;/em&gt;, rather than querying on distances, use the &lt;a href=&quot;functions#django.contrib.gis.db.models.functions.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">들어 &lt;em&gt;측정&lt;/em&gt; 보다는 거리에 조회, 사용 &lt;a href=&quot;functions#django.contrib.gis.db.models.functions.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt; 기능을.</target>
        </trans-unit>
        <trans-unit id="ea0876de4dccf03bdae9009efcce83719085e5c0" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;text/*&lt;/em&gt; content-types, the character set (i.e. &lt;code&gt;utf8&lt;/code&gt;) supplied by the browser. Again, &amp;ldquo;trust but verify&amp;rdquo; is the best policy here.</source>
          <target state="translated">들어 &lt;em&gt;텍스트 / *&lt;/em&gt; 컨텐츠 유형, 문자 집합 (예 : &lt;code&gt;utf8&lt;/code&gt; 브라우저에 의해 제공). 여기서도 &quot;신뢰하지만 검증&quot;이 가장 좋은 정책입니다.</target>
        </trans-unit>
        <trans-unit id="32b317d6f38f95199b66a362e3f52af6e0ffa8d9" translate="yes" xml:space="preserve">
          <source>For AJAX requests, the fallback will be performed only if the &lt;code&gt;next&lt;/code&gt; parameter was set. Otherwise a 204 status code (No Content) will be returned.</source>
          <target state="translated">AJAX 요청의 경우 &lt;code&gt;next&lt;/code&gt; 매개 변수가 설정된 경우에만 폴 백이 수행됩니다 . 그렇지 않으면 204 상태 코드 (No Content)가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="fd8d1898b2475523fa3b4c8d7e783aaa6ca7a841" translate="yes" xml:space="preserve">
          <source>For MIME types starting with &lt;code&gt;text/&lt;/code&gt;, binary data is handled as in &lt;code&gt;attach()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;text/&lt;/code&gt; 시작하는 MIME 유형의 경우 이진 데이터는 &lt;code&gt;attach()&lt;/code&gt; 에서와 같이 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8c398c7d9b66e5e9d90421bc591bb2afebb6ef8" translate="yes" xml:space="preserve">
          <source>For MIME types starting with &lt;em&gt;text/&lt;/em&gt;, binary data is handled as in &lt;code&gt;attach()&lt;/code&gt;.</source>
          <target state="translated">For MIME types starting with &lt;em&gt;text/&lt;/em&gt;, binary data is handled as in &lt;code&gt;attach()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb31c5f02b352bb580243f60983f2e82fd5cdc95" translate="yes" xml:space="preserve">
          <source>For MyISAM tables, &lt;code&gt;SPATIAL INDEX&lt;/code&gt; creates an R-tree index. For storage engines that support nonspatial indexing of spatial columns, the engine creates a B-tree index. A B-tree index on spatial values will be useful for exact-value lookups, but not for range scans.</source>
          <target state="translated">MyISAM 테이블의 경우 &lt;code&gt;SPATIAL INDEX&lt;/code&gt; 는 R- 트리 인덱스를 만듭니다. 공간 열의 비 공간 색인화를 지원하는 스토리지 엔진의 경우 엔진은 B- 트리 색인을 작성합니다. 공간 값에 대한 B- 트리 인덱스는 정확한 값 조회에는 유용하지만 범위 스캔에는 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="114241fe165523586156c3d9b8b72468673e5a4e" translate="yes" xml:space="preserve">
          <source>For MySQL, this runs the &lt;code&gt;mysql&lt;/code&gt; command-line client.</source>
          <target state="translated">MySQL의 경우 &lt;code&gt;mysql&lt;/code&gt; 명령 줄 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="01e48f4df2874fe3eaa026122b760ee523ebd8e5" translate="yes" xml:space="preserve">
          <source>For OpenSolaris users, the system library path may be modified using the &lt;code&gt;crle&lt;/code&gt; utility. Run &lt;code&gt;crle&lt;/code&gt; with no options to see the current configuration and use &lt;code&gt;crle -l&lt;/code&gt; to set with the new library path. Be &lt;em&gt;very&lt;/em&gt; careful when modifying the system library path:</source>
          <target state="translated">OpenSolaris 사용자의 경우 &lt;code&gt;crle&lt;/code&gt; 유틸리티를 사용하여 시스템 라이브러리 경로를 수정할 수 있습니다 . 옵션없이 &lt;code&gt;crle&lt;/code&gt; 을 실행 하여 현재 구성을보고 &lt;code&gt;crle -l&lt;/code&gt; 을 사용하여 새 라이브러리 경로로 설정하십시오. 시스템 라이브러리 경로를 수정할 때 &lt;em&gt;매우&lt;/em&gt; 주의 하십시오 :</target>
        </trans-unit>
        <trans-unit id="3eeded676ad457b8d591af8ff3281ca437900ed1" translate="yes" xml:space="preserve">
          <source>For Oracle, this runs the &lt;code&gt;sqlplus&lt;/code&gt; command-line client.</source>
          <target state="translated">Oracle의 경우 &lt;code&gt;sqlplus&lt;/code&gt; 명령 행 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a982ff9d1e3163260b354c31d72394140bbcb2f3" translate="yes" xml:space="preserve">
          <source>For PostgreSQL, this runs the &lt;code&gt;psql&lt;/code&gt; command-line client.</source>
          <target state="translated">PostgreSQL의 경우 &lt;code&gt;psql&lt;/code&gt; 명령 줄 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd417a019713a6904e3b18dff92248c76cc5011c" translate="yes" xml:space="preserve">
          <source>For SQLite, this runs the &lt;code&gt;sqlite3&lt;/code&gt; command-line client.</source>
          <target state="translated">SQLite의 경우 &lt;code&gt;sqlite3&lt;/code&gt; 명령 줄 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd5567ff92e75db4f3301c5a20e84775b7c0a7eb" translate="yes" xml:space="preserve">
          <source>For Windows users</source>
          <target state="translated">Windows 사용자의 경우</target>
        </trans-unit>
        <trans-unit id="cd102962a99ab92625c89315dc500f0b617135ca" translate="yes" xml:space="preserve">
          <source>For Windows users, who do not have symlinking functionality available, you can copy &lt;code&gt;django-admin.exe&lt;/code&gt; to a location on your existing path or edit the &lt;code&gt;PATH&lt;/code&gt; settings (under &lt;code&gt;Settings - Control Panel - System - Advanced -
Environment...&lt;/code&gt;) to point to its installed location.</source>
          <target state="translated">기능을 사용할 심볼릭 링크가없는 윈도우 사용자의 경우 복사 할 수 있습니다 &lt;code&gt;django-admin.exe&lt;/code&gt; 기존 경로 또는 편집상의 위치에 &lt;code&gt;PATH&lt;/code&gt; 의 (아래 설정 &lt;code&gt;Settings - Control Panel - System - Advanced - Environment...&lt;/code&gt; 점) 설치된 위치로.</target>
        </trans-unit>
        <trans-unit id="d15786dfcbe8be325214a68d56dd2416df64952e" translate="yes" xml:space="preserve">
          <source>For Windows, you may find binaries on the &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/&quot;&gt;Gaia-SINS&lt;/a&gt; home page.</source>
          <target state="translated">Windows의 경우 &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/&quot;&gt;Gaia-SINS&lt;/a&gt; 홈페이지 에서 바이너리를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0e34ff26a96c16c70436cafdd6406725c407716" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt;&lt;code&gt;USERNAME_FIELD&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt;&lt;code&gt;REQUIRED_FIELDS&lt;/code&gt;&lt;/a&gt;, these methods receive the value of the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.to_field&quot;&gt;&lt;code&gt;to_field&lt;/code&gt;&lt;/a&gt; (the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key&lt;/code&gt;&lt;/a&gt; by default) of an existing instance.</source>
          <target state="translated">A의 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 에 &lt;a href=&quot;#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt; &lt;code&gt;USERNAME_FIELD&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt; &lt;code&gt;REQUIRED_FIELDS&lt;/code&gt; &lt;/a&gt; , 이러한 방법의 값을받을 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.to_field&quot;&gt; &lt;code&gt;to_field&lt;/code&gt; &lt;/a&gt; 합니다 ( &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key&lt;/code&gt; 와&lt;/a&gt; 기존 인스턴스의 기본값을).</target>
        </trans-unit>
        <trans-unit id="a7695186a713f16de82312fa1c5040b7c4108194" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;OneToOneField&lt;/code&gt;, you must duplicate the related object and assign it to the new object&amp;rsquo;s field to avoid violating the one-to-one unique constraint. For example, assuming &lt;code&gt;entry&lt;/code&gt; is already duplicated as above:</source>
          <target state="translated">A의 &lt;code&gt;OneToOneField&lt;/code&gt; , 당신은 관련 개체를 복제해야하고, 일대일 고유 제한 조건을 위반하지 않도록 새 개체의 필드에 할당합니다. 예를 들어, &lt;code&gt;entry&lt;/code&gt; 이 이미 위와 같이 복제 되었다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="9cc905172b60f8825495c9572f3c39b3a30f5ebc" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;mimetype&lt;/code&gt; starting with &lt;code&gt;text/&lt;/code&gt;, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to &lt;code&gt;application/octet-stream&lt;/code&gt; and the data will be attached unchanged.</source>
          <target state="translated">&lt;code&gt;text/&lt;/code&gt; 시작 하는 &lt;code&gt;mimetype&lt;/code&gt; 의 경우 content는 문자열이어야합니다. 이진 데이터는 UTF-8을 사용하여 디코딩되며, 실패하면 MIME 유형이 &lt;code&gt;application/octet-stream&lt;/code&gt; 으로 변경되고 데이터는 변경되지 않은 상태로 첨부됩니다.</target>
        </trans-unit>
        <trans-unit id="4005e99c87e962d0a2b4d387ab79eadd80869dc8" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;mimetype&lt;/code&gt; starting with &lt;em&gt;text/&lt;/em&gt;, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to &lt;em&gt;application/octet-stream&lt;/em&gt; and the data will be attached unchanged.</source>
          <target state="translated">For a &lt;code&gt;mimetype&lt;/code&gt; starting with &lt;em&gt;text/&lt;/em&gt;, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to &lt;em&gt;application/octet-stream&lt;/em&gt; and the data will be attached unchanged.</target>
        </trans-unit>
        <trans-unit id="aa5aa7c50d88712d846e66564756210e95dfb768" translate="yes" xml:space="preserve">
          <source>For a class to be a lookup, it must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Lookup&quot;&gt;&lt;code&gt;Lookup&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; naturally follow this API.</source>
          <target state="translated">클래스를 조회하려면 &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API를&lt;/a&gt; 따라야합니다 . &lt;a href=&quot;#django.db.models.Lookup&quot;&gt; &lt;code&gt;Lookup&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt; 자연스럽게이 API를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="82837fb615d6fc0b73c8eb4b55c29471490a59c4" translate="yes" xml:space="preserve">
          <source>For a complete discussion on the usage of the following see the &lt;a href=&quot;../topics/i18n/translation&quot;&gt;translation documentation&lt;/a&gt;.</source>
          <target state="translated">다음 사용법에 대한 자세한 내용은 &lt;a href=&quot;../topics/i18n/translation&quot;&gt;번역 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf48592cadcf03f73184b0bc732d907e2a1368ac" translate="yes" xml:space="preserve">
          <source>For a complete list of attributes and methods, see &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성과 메소드의 전체 목록은 &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="011f4946a4eac47d187c0cf11d388cc5cd400310" translate="yes" xml:space="preserve">
          <source>For a detailed description of how to create rasters using dictionary input, see &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;Creating rasters from data&lt;/a&gt;. For a detailed description of how to create rasters in the virtual filesystem, see &lt;a href=&quot;#gdal-raster-vsimem&quot;&gt;Using GDAL&amp;rsquo;s Virtual Filesystem&lt;/a&gt;.</source>
          <target state="translated">사전 입력을 사용하여 래스터를 만드는 방법에 대한 자세한 내용은 &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;데이터에서 래스터 만들기를&lt;/a&gt; 참조하십시오 . 가상 파일 시스템에서 래스터를 만드는 방법에 대한 자세한 설명은 &lt;a href=&quot;#gdal-raster-vsimem&quot;&gt;GDAL의 가상 파일 시스템 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0f2ca82bf7e80689578e1ccca6faf93f53a9e5f" translate="yes" xml:space="preserve">
          <source>For a full list of available settings, see the &lt;a href=&quot;../ref/settings&quot;&gt;settings reference&lt;/a&gt;.</source>
          <target state="translated">사용 가능한 설정의 전체 목록은 &lt;a href=&quot;../ref/settings&quot;&gt;설정 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b2bc5ac4a588fc66b6d4b867455953ec02cdd543" translate="yes" xml:space="preserve">
          <source>For a full list of options, refer to the commands own help by running:</source>
          <target state="translated">전체 옵션 목록은 다음을 실행하여 명령 자체 도움말을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="25df3eb01267dee01663d3ac00097ce51467a7f3" translate="yes" xml:space="preserve">
          <source>For a high-level overview of searching, see the &lt;a href=&quot;../../../topics/db/search&quot;&gt;topic documentation&lt;/a&gt;.</source>
          <target state="translated">검색에 대한 고급 개요는 &lt;a href=&quot;../../../topics/db/search&quot;&gt;주제 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9dd739b05280b0b463ac62a5aa753bebf48ca31" translate="yes" xml:space="preserve">
          <source>For a list of PostgreSQL-specific indexes, see &lt;a href=&quot;../contrib/postgres/indexes#module-django.contrib.postgres.indexes&quot;&gt;&lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL 관련 인덱스 목록은 &lt;a href=&quot;../contrib/postgres/indexes#module-django.contrib.postgres.indexes&quot;&gt; &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4891edfe9764d3a86746a95b02d8917cc69f1971" translate="yes" xml:space="preserve">
          <source>For a model which has a many-to-many relationship to itself through an intermediary model, two foreign keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many relationship. If there are &lt;em&gt;more&lt;/em&gt; than two foreign keys though, you must also specify &lt;code&gt;through_fields&lt;/code&gt; as above, or a validation error will be raised.</source>
          <target state="translated">중개 모델을 통해 자체와 다 대 다 관계를 갖는 모델의 경우 동일한 모델에 대한 두 개의 외래 키가 허용되지만 다 대 다 관계의 두 (다른) 측면으로 취급됩니다. 그래도 외래 키가 두 &lt;em&gt;개&lt;/em&gt; 이상인 경우 위와 같이 &lt;code&gt;through_fields&lt;/code&gt; 도 지정해야합니다. 그렇지 않으면 유효성 검사 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d4589e3c17ea70bbb0bb53aa9f87352a326c8e0e" translate="yes" xml:space="preserve">
          <source>For a more complete example, a query logger could look like this:</source>
          <target state="translated">보다 완전한 예제를 위해 쿼리 로거는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c2705e09efedad5461b1eac01061451c6e4e8c3b" translate="yes" xml:space="preserve">
          <source>For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc.</source>
          <target state="translated">그러나 프로덕션 환경의 경우 소스 코드 발췌, 로컬 변수, 설정, 사용 된 라이브러리 등 프로젝트에 대한 많은 정보가 유출되기 때문에 이것은 매우 나쁜 생각입니다.</target>
        </trans-unit>
        <trans-unit id="f9e4028e7889232ea20ffa255e19e88ae4589784" translate="yes" xml:space="preserve">
          <source>For a ton of examples, read the source code for Django&amp;rsquo;s default filters and tags. They&amp;rsquo;re in &lt;code&gt;django/template/defaultfilters.py&lt;/code&gt; and &lt;code&gt;django/template/defaulttags.py&lt;/code&gt;, respectively.</source>
          <target state="translated">많은 예제를 보려면 Django의 기본 필터 및 태그에 대한 소스 코드를 읽으십시오. 그것들은 각각 &lt;code&gt;django/template/defaultfilters.py&lt;/code&gt; 및 &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; defaulttags.py 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="245c192c3f0ca7c1f6c78ffc80a037f82e16bd32" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Daphne would look like:</source>
          <target state="translated">일반적인 Django 프로젝트의 경우 Daphne을 호출하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e9d03faed3bbf8f265eeb82e5681ec644ec4f4c7" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Hypercorn would look like:</source>
          <target state="translated">For a typical Django project, invoking Hypercorn would look like:</target>
        </trans-unit>
        <trans-unit id="c59fdc8b86b62e3b1b65f5e777983d4f7cbaa527" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Uvicorn would look like:</source>
          <target state="translated">일반적인 Django 프로젝트의 경우 Uvicorn을 호출하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="497b37841c09436a3f988aae8b8beb478ba72f8d" translate="yes" xml:space="preserve">
          <source>For a window frame, you can choose either a range-based sequence of rows or an ordinary sequence of rows.</source>
          <target state="translated">창 프레임의 경우 범위 기반 행 시퀀스 또는 일반 행 시퀀스를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01530861bb300440f6bf560ef6b0beca305c2166" translate="yes" xml:space="preserve">
          <source>For advanced usage you might want both a custom &lt;code&gt;Manager&lt;/code&gt; and a custom &lt;code&gt;QuerySet&lt;/code&gt;. You can do that by calling &lt;code&gt;Manager.from_queryset()&lt;/code&gt; which returns a &lt;em&gt;subclass&lt;/em&gt; of your base &lt;code&gt;Manager&lt;/code&gt; with a copy of the custom &lt;code&gt;QuerySet&lt;/code&gt; methods:</source>
          <target state="translated">고급 사용법의 경우 사용자 정의 &lt;code&gt;Manager&lt;/code&gt; 및 사용자 정의 &lt;code&gt;QuerySet&lt;/code&gt; 을 모두 원할 수 있습니다 . 사용자 정의 &lt;code&gt;QuerySet&lt;/code&gt; 메소드 의 사본으로 기본 &lt;code&gt;Manager&lt;/code&gt; 의 &lt;em&gt;서브 클래스&lt;/em&gt; 를 리턴하는 &lt;code&gt;Manager.from_queryset()&lt;/code&gt; 을 호출하여이를 수행 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="114718eb9675b5c8dfa5883eba3eeb3ec318f68e" translate="yes" xml:space="preserve">
          <source>For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings. These are triggered when using the &lt;a href=&quot;models/querysets#std:fieldlookup-iexact&quot;&gt;&lt;code&gt;iexact&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; filters in Querysets. The behavior splits into two cases:</source>
          <target state="translated">모든 SQLite 버전의 경우 일부 유형의 문자열과 일치하려고 할 때 약간 직관적이지 않은 동작이 있습니다. &lt;a href=&quot;models/querysets#std:fieldlookup-iexact&quot;&gt; &lt;code&gt;iexact&lt;/code&gt; 를&lt;/a&gt; 사용할 때 트리거 되거나 쿼리 세트 &lt;a href=&quot;models/querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 필터가 포함 됩니다. 동작은 두 가지 경우로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="7091b793897c8691205b09008506e6f08af46e43" translate="yes" xml:space="preserve">
          <source>For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the &amp;lsquo;csrfmiddlewaretoken&amp;rsquo; field must be present and correct. If it isn&amp;rsquo;t, the user will get a 403 error.</source>
          <target state="translated">HTTP GET, HEAD, OPTIONS 또는 TRACE를 사용하지 않는 모든 수신 요청의 경우 CSRF 쿠키가 존재해야하며 'csrfmiddlewaretoken'필드가 존재하고 정확해야합니다. 그렇지 않으면 403 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0536ba6b20984cd0e9e8b8216082fb8626aab8d" translate="yes" xml:space="preserve">
          <source>For an example see the section &lt;a href=&quot;#admin-custom-validation&quot;&gt;Adding custom validation to the admin&lt;/a&gt;.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;#admin-custom-validation&quot;&gt;관리자에 사용자 정의 유효성 검사 추가&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="433cfd366cb054017995f20d84b57630a94b2ff7" translate="yes" xml:space="preserve">
          <source>For an example using &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;, see &lt;a href=&quot;../howto/writing-migrations#changing-a-manytomanyfield-to-use-a-through-model&quot;&gt;Changing a ManyToManyField to use a through model&lt;/a&gt;.</source>
          <target state="translated">For an example using &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; , see &lt;a href=&quot;../howto/writing-migrations#changing-a-manytomanyfield-to-use-a-through-model&quot;&gt;Changing a ManyToManyField to use a through model&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cbd2efdcd0a5182eb99fe1c3c5af8e661cbb3c3b" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;../howto/static-files/deployment#staticfiles-from-cdn&quot;&gt;Serving static files from a cloud service or CDN&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../howto/static-files/deployment#staticfiles-from-cdn&quot;&gt;클라우드 서비스 또는 CDN에서 정적 파일 제공을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e877fbbeaae4ebb5d6aaa8f8b9c8ab1b4e07bde" translate="yes" xml:space="preserve">
          <source>For an in-depth discussion of aggregation, see &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;the topic guide on Aggregation&lt;/a&gt;.</source>
          <target state="translated">집계에 대한 자세한 내용은 집계에 &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;대한 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="57ec81e3704c6febf6a79630fa1ee31a957b3292" translate="yes" xml:space="preserve">
          <source>For an introduction to the static files app and some usage examples, see &lt;a href=&quot;../../howto/static-files/index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;. For guidelines on deploying static files, see &lt;a href=&quot;../../howto/static-files/deployment&quot;&gt;Deploying static files&lt;/a&gt;.</source>
          <target state="translated">정적 파일 앱 및 일부 사용 예에 ​​대한 소개는 정적 파일 &lt;a href=&quot;../../howto/static-files/index&quot;&gt;관리 (예 : 이미지, JavaScript, CSS)를 참조하십시오&lt;/a&gt; . 정적 파일을 배포하는 방법에 대한 지침을 참조 &lt;a href=&quot;../../howto/static-files/deployment&quot;&gt;정적 파일을 배포&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b6e366f307e30cbc012445b0d5d8194205dfaf5" translate="yes" xml:space="preserve">
          <source>For an introduction to the use of &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;.</source>
          <target state="translated">의 사용에 대한 소개 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt; 참조 &lt;a href=&quot;index&quot;&gt;(예 : 이미지, 자바 스크립트, CSS) 정적 파일을 관리&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff33af586de20dcc9dc963235e63d160e339357a" translate="yes" xml:space="preserve">
          <source>For an introduction, see &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;models and database queries documentation&lt;/a&gt;.</source>
          <target state="translated">소개는 &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;모델 및 데이터베이스 쿼리 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="91f45c0b4fdd79cf441093caaf95e3a639c7bf7e" translate="yes" xml:space="preserve">
          <source>For an introduction, see the &lt;a href=&quot;db-api#spatial-lookups-intro&quot;&gt;spatial lookups introduction&lt;/a&gt;. For an overview of what lookups are compatible with a particular spatial backend, refer to the &lt;a href=&quot;db-api#spatial-lookup-compatibility&quot;&gt;spatial lookup compatibility table&lt;/a&gt;.</source>
          <target state="translated">소개는 &lt;a href=&quot;db-api#spatial-lookups-intro&quot;&gt;공간 검색 소개를&lt;/a&gt; 참조하십시오 . 특정 공간 백엔드와 호환되는 조회에 대한 개요는 &lt;a href=&quot;db-api#spatial-lookup-compatibility&quot;&gt;공간 조회 호환성 표를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e566430cd1a2affb5f5c262cc70d975407c98c38" translate="yes" xml:space="preserve">
          <source>For an overview on performing distance queries, please refer to the &lt;a href=&quot;db-api#distance-queries&quot;&gt;distance queries introduction&lt;/a&gt;.</source>
          <target state="translated">거리 쿼리 수행에 대한 개요는 &lt;a href=&quot;db-api#distance-queries&quot;&gt;거리 쿼리 소개&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="032e1a321d9ffc6c2146932f576a128a8e65fa68" translate="yes" xml:space="preserve">
          <source>For any other case where you would like to delay the translation, but have to pass the translatable string as argument to another function, you can wrap this function inside a lazy call yourself. For example:</source>
          <target state="translated">번역을 지연하고 싶지만 번역 가능한 문자열을 인수로 다른 함수에 전달 해야하는 다른 경우에는이 함수를 게으른 호출 안에 래핑 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="085ed960d0740bd94ea40506cfce694cfddc0a2f" translate="yes" xml:space="preserve">
          <source>For application authors</source>
          <target state="translated">응용 프로그램 작성자</target>
        </trans-unit>
        <trans-unit id="7cec9e84482bc35d6c78faa794917c557d1e76eb" translate="yes" xml:space="preserve">
          <source>For application users</source>
          <target state="translated">응용 프로그램 사용자</target>
        </trans-unit>
        <trans-unit id="73f138ffe9108c4f660de4277273d1ef1b89e005" translate="yes" xml:space="preserve">
          <source>For backends that use cookies, the settings for the cookie are taken from the session cookie settings:</source>
          <target state="translated">쿠키를 사용하는 백엔드의 경우 쿠키 설정은 세션 쿠키 설정에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="57ad3cfd168ba96bdfced612c26a2ee2a767e407" translate="yes" xml:space="preserve">
          <source>For better performance, you may want to use a cache-based session backend.</source>
          <target state="translated">더 나은 성능을 위해 캐시 기반 세션 백엔드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91bce32b94c71f60016d6667344912312df9c907" translate="yes" xml:space="preserve">
          <source>For both string-based and non-string-based fields, you will also need to set &lt;code&gt;blank=True&lt;/code&gt; if you wish to permit empty values in forms, as the &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; parameter only affects database storage (see &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">문자열 기반 필드와 문자열이 아닌 필드의 경우, &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 매개 변수는 데이터베이스 스토리지에만 영향을주기 때문에 양식에서 빈 값을 허용하려면 &lt;code&gt;blank=True&lt;/code&gt; 를 설정해야합니다 ( &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3b0ab1dd7f1f1a3114560cdef94eeb046fe6b282" translate="yes" xml:space="preserve">
          <source>For building up fragments of HTML, you should normally be using &lt;a href=&quot;#django.utils.html.format_html&quot;&gt;&lt;code&gt;django.utils.html.format_html()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">HTML 조각을 만들려면 일반적으로 &lt;a href=&quot;#django.utils.html.format_html&quot;&gt; &lt;code&gt;django.utils.html.format_html()&lt;/code&gt; &lt;/a&gt; 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bd8eb4334d88a862d55ca5bac3a26a9a7a016bf0" translate="yes" xml:space="preserve">
          <source>For caches that don&amp;rsquo;t implement &lt;code&gt;close&lt;/code&gt; methods it is a no-op.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; 메소드를 구현하지 않는 캐시의 경우 no-op입니다.</target>
        </trans-unit>
        <trans-unit id="79ba2e8a0fe994e51d4c92f58e97e335cd098d33" translate="yes" xml:space="preserve">
          <source>For cases like this, Django exposes a low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)</source>
          <target state="translated">이런 경우 Django는 저수준 캐시 API를 노출합니다. 이 API를 사용하여 원하는 수준으로 세분화하여 캐시에 객체를 저장할 수 있습니다. 문자열, 사전, 모델 객체 목록 등 안전하게 선택할 수있는 모든 Python 객체를 캐시 할 수 있습니다. (대부분의 일반적인 Python 객체를 선택할 수 있습니다. 산세에 대한 자세한 내용은 Python 설명서를 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="1fb48d8079dbe45b84226c3cadf04b90ce81a61a" translate="yes" xml:space="preserve">
          <source>For cases like this, use the &lt;code&gt;django.utils.functional.keep_lazy()&lt;/code&gt; decorator. It modifies the function so that &lt;em&gt;if&lt;/em&gt; it&amp;rsquo;s called with a lazy translation as one of its arguments, the function evaluation is delayed until it needs to be converted to a string.</source>
          <target state="translated">이런 경우 &lt;code&gt;django.utils.functional.keep_lazy()&lt;/code&gt; 데코레이터를 사용하십시오 . 인수 중 하나로 게으른 변환으로 호출 되는 &lt;em&gt;경우&lt;/em&gt; 함수 평가가 문자열로 변환 될 때까지 지연되도록 함수를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="994ead3f1356d2b1dba54966dd67fa94889eed63" translate="yes" xml:space="preserve">
          <source>For common setups with multiple databases, it isn&amp;rsquo;t useful to have these objects in more than one database. Common setups include primary/replica and connecting to external databases. Therefore, it&amp;rsquo;s recommended to write a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that allows synchronizing these three models to only one database. Use the same approach for contrib and third-party apps that don&amp;rsquo;t need their tables in multiple databases.</source>
          <target state="translated">여러 데이터베이스가있는 공통 설정의 경우 이러한 개체를 둘 이상의 데이터베이스에 두는 것은 유용하지 않습니다. 일반적인 설정에는 기본 / 복제본 및 외부 데이터베이스 연결이 포함됩니다. 따라서이 세 가지 모델을 하나의 데이터베이스에만 동기화 할 수 있는 &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;데이터베이스 라우터&lt;/a&gt; 를 작성하는 것이 좋습니다 . 여러 데이터베이스에 테이블이 필요하지 않은 contrib 및 타사 앱에 대해 동일한 접근 방식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9008520a23cc5398ce6e6e03cb58a6c8452a5ef0" translate="yes" xml:space="preserve">
          <source>For complete details on all the settings, commands, template tags, and other pieces included in &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 에&lt;/a&gt; 포함 된 모든 설정, 명령, 템플릿 태그 및 기타 부분 에 대한 자세한 내용 &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;은 정적 파일 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1ab98fe2e9e6c5b8dac81734119f6a96694f9705" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides a &lt;code&gt;send()&lt;/code&gt; method for sending a single email. If you need to send multiple messages, the email backend API &lt;a href=&quot;#topics-sending-multiple-emails&quot;&gt;provides an alternative&lt;/a&gt;.</source>
          <target state="translated">편의상 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 는 단일 이메일을 보내기위한 &lt;code&gt;send()&lt;/code&gt; 메소드를 제공합니다 . 여러 메시지를 보내야하는 경우 전자 메일 백엔드 API &lt;a href=&quot;#topics-sending-multiple-emails&quot;&gt;가 대안을 제공합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dd6bc939b24142ba0e1fff49a7e3dd24af2f2dbe" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;code&gt;index_together&lt;/code&gt; can be a single list when dealing with a single set of fields:</source>
          <target state="translated">편의상 &lt;code&gt;index_together&lt;/code&gt; 는 단일 필드 집합을 처리 할 때 단일 목록이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce4cdf927e9d3f5bcc2a4d900ae3b68bcd958626" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;code&gt;unique_together&lt;/code&gt; can be a single list when dealing with a single set of fields:</source>
          <target state="translated">편의상 &lt;code&gt;unique_together&lt;/code&gt; 는 단일 필드 집합을 처리 할 때 단일 목록이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07080c385504623c0179d481408b47986bcaa26b" translate="yes" xml:space="preserve">
          <source>For convenience, Django offers different levels of cache granularity: you can cache the output of specific views, or only the pieces that are difficult to produce, or even an entire site.</source>
          <target state="translated">편의상 Django는 다양한 수준의 캐시 단위를 제공합니다. 특정 뷰의 출력 또는 생성하기 어려운 부분 또는 전체 사이트를 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a33658bc26b48121cd01e6c62ea8102f8c745111" translate="yes" xml:space="preserve">
          <source>For convenience, Django provides a &lt;code&gt;pk&lt;/code&gt; lookup shortcut, which stands for &amp;ldquo;primary key&amp;rdquo;.</source>
          <target state="translated">편의상 Django는 &quot;기본 키&quot;를 나타내는 &lt;code&gt;pk&lt;/code&gt; 조회 바로 가기를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="8ba2fecb762785a1f98e5db46660c8f03323d035" translate="yes" xml:space="preserve">
          <source>For convenience, and because it&amp;rsquo;s a good idea to have a consistent 404 error page across your site, Django provides an &lt;code&gt;Http404&lt;/code&gt; exception. If you raise &lt;code&gt;Http404&lt;/code&gt; at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404.</source>
          <target state="translated">편의상 Django는 사이트 전체에 일관된 404 오류 페이지를 갖는 것이 좋은 아이디어 &lt;code&gt;Http404&lt;/code&gt; 예외를 제공합니다 . 뷰 함수의 어느 시점에서 &lt;code&gt;Http404&lt;/code&gt; 를 올리면 장고는이를 잡아서 HTTP 오류 코드 404와 함께 응용 프로그램의 표준 오류 페이지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6f355d7307dc13d50c50cd78d6a431ad52fb3a16" translate="yes" xml:space="preserve">
          <source>For convenience, each model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; named &lt;code&gt;id&lt;/code&gt; by default unless you explicitly specify &lt;code&gt;primary_key=True&lt;/code&gt; on a field in your model. See the documentation for &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">편의상, 모델 의 필드에 &lt;code&gt;primary_key=True&lt;/code&gt; 를 명시 적으로 지정하지 않으면 각 모델에는 기본적으로 &lt;code&gt;id&lt;/code&gt; &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 이름 의 AutoField 가 있습니다. 자세한 내용은 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="00b6f399568caf034f2bd9baf36652b9633df6c5" translate="yes" xml:space="preserve">
          <source>For conversions, access the preferred unit attribute to get a converted distance quantity:</source>
          <target state="translated">변환의 경우 기본 단위 속성에 액세스하여 변환 된 거리 수량을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="17f5ab1e933cc3767d56d79b5fda1bc30762cc06" translate="yes" xml:space="preserve">
          <source>For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant.</source>
          <target state="translated">막대 차트 등을 생성하기 위해이 태그는 지정된 값과 최대 값의 비율을 계산 한 다음 해당 비율을 상수에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="9d659ee2de0bfab758a3c6297904c71bd25ed4d2" translate="yes" xml:space="preserve">
          <source>For databases other than SQLite</source>
          <target state="translated">SQLite 이외의 데이터베이스</target>
        </trans-unit>
        <trans-unit id="26b228b856ac1e345526c8b4f3d28d81b09acc58" translate="yes" xml:space="preserve">
          <source>For date and date/time fields, you can add or subtract a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object. The following would return all entries that were modified more than 3 days after they were published:</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt; 객체를 추가하거나 뺄 수 있습니다 . 다음은 게시 된 후 3 일 이상 수정 된 모든 항목을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c3ea98e4b4088a980b262038c9f53cd940a2574a" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, a &amp;lsquo;day of the week&amp;rsquo; match. Allows chaining additional field lookups.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 '요일'이 일치합니다. 추가 필드 조회 연결을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a59621a4297e6672557ed775eda5c37a1765e762" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, a &amp;lsquo;quarter of the year&amp;rsquo; match. Allows chaining additional field lookups. Takes an integer value between 1 and 4 representing the quarter of the year.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 '연중 1/4'이 일치합니다. 추가 필드 조회 연결을 허용합니다. 연중 분기를 나타내는 1에서 4 사이의 정수 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4202de970fe3340c6206e01e77e543ef6f13cc12" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact ISO 8601 day of the week match. Allows chaining additional field lookups.</source>
          <target state="translated">For date and datetime fields, an exact ISO 8601 day of the week match. Allows chaining additional field lookups.</target>
        </trans-unit>
        <trans-unit id="42dd2feb45b5f660ff3b9a6d4074634986a29ee0" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact ISO 8601 week-numbering year match. Allows chaining additional field lookups. Takes an integer year.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 ISO 8601 주 번호 연도가 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수 연도를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1593cffc96d622049ccdc42f7bb0f2a1ae8036b1" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact day match. Allows chaining additional field lookups. Takes an integer day.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 요일이 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수일이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="49d38ad7fe93c4540c3f229ec62ec695a94c44d4" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact month match. Allows chaining additional field lookups. Takes an integer 1 (January) through 12 (December).</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 월이 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수 1 (1 월)에서 12 (12 월)까지 사용합니다.</target>
        </trans-unit>
        <trans-unit id="606db62e280330ab2e78af535232722c97f0ff10" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact year match. Allows chaining additional field lookups. Takes an integer year.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 연도가 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수 연도를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5e7ddbc21aec55ccdb748d213426101dce95eb9c" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, return the week number (1-52 or 53) according to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;, i.e., weeks start on a Monday and the first week contains the year&amp;rsquo;s first Thursday.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt; 에 따라 주 번호 (1-52 또는 53)를 리턴하십시오 . 즉,주는 월요일에 시작하고 첫 번째 주에는 첫 번째 목요일이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="dcf2e4875fa50e3add0a11dd7c345c91e31164aa" translate="yes" xml:space="preserve">
          <source>For dates that are the current day or within one day, return &amp;ldquo;today&amp;rdquo;, &amp;ldquo;tomorrow&amp;rdquo; or &amp;ldquo;yesterday&amp;rdquo;, as appropriate. Otherwise, format the date using the passed in format string.</source>
          <target state="translated">현재 날짜 또는 하루 내에있는 날짜의 경우 &quot;오늘&quot;, &quot;내일&quot;또는 &quot;어제&quot;를 적절하게 반환하십시오. 그렇지 않으면 전달 된 형식 문자열을 사용하여 날짜를 형식화하십시오.</target>
        </trans-unit>
        <trans-unit id="522a331d5225fa66def9fc3bd2e8fac66fc5b772" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact hour match. Allows chaining additional field lookups. Takes an integer between 0 and 23.</source>
          <target state="translated">날짜 및 시간 필드의 경우 정확한 시간이 일치합니다. 추가 필드 조회 연결을 허용합니다. 0에서 23 사이의 정수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ac89f2c106463643fd9699cf90f5e9127b0da47c" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact minute match. Allows chaining additional field lookups. Takes an integer between 0 and 59.</source>
          <target state="translated">날짜 시간 및 시간 필드의 경우 정확히 분이 일치합니다. 추가 필드 조회 연결을 허용합니다. 0에서 59 사이의 정수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="cb253c63a93a7f34a17bfff1bcace0dc8609b145" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact second match. Allows chaining additional field lookups. Takes an integer between 0 and 59.</source>
          <target state="translated">날짜 시간 및 시간 필드의 경우 정확히 두 번째 일치합니다. 추가 필드 조회 연결을 허용합니다. 0에서 59 사이의 정수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="065ccdbf361bd445a3ea9b16f5af4220346cf69e" translate="yes" xml:space="preserve">
          <source>For datetime fields, casts the value as date. Allows chaining additional field lookups. Takes a date value.</source>
          <target state="translated">날짜 / 시간 필드의 경우 값을 날짜로 캐스트합니다. 추가 필드 조회 연결을 허용합니다. 날짜 값을받습니다.</target>
        </trans-unit>
        <trans-unit id="5cb754f1dcc8bef12a5572feace62cc16ce3e1ad" translate="yes" xml:space="preserve">
          <source>For datetime fields, casts the value as time. Allows chaining additional field lookups. Takes a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;datetime.time&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">날짜 시간 필드의 경우 값을 시간으로 캐스트합니다. 추가 필드 조회 연결을 허용합니다. 소요 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;datetime.time&lt;/code&gt; 의&lt;/a&gt; 값입니다.</target>
        </trans-unit>
        <trans-unit id="287a99b6d2ccfdfa613eb3ea97b6c9626d6505b7" translate="yes" xml:space="preserve">
          <source>For datetime values, returns a string representing how many seconds, minutes or hours ago it was &amp;ndash; falling back to the &lt;a href=&quot;../templates/builtins#std:templatefilter-timesince&quot;&gt;&lt;code&gt;timesince&lt;/code&gt;&lt;/a&gt; format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase.</source>
          <target state="translated">날짜 / 시간 값의 경우 몇 초, 몇 분 또는 몇 시간 전인지를 나타내는 문자열을 반환 합니다. 값이 하루 이상인 경우 &lt;a href=&quot;../templates/builtins#std:templatefilter-timesince&quot;&gt; &lt;code&gt;timesince&lt;/code&gt; &lt;/a&gt; 형식으로 돌아갑니다 . 날짜 / 시간 값이 미래인 경우 반환 값은 자동으로 적절한 문구를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ce8b44858ceebee50a15dccd632d32f06ba831f7" translate="yes" xml:space="preserve">
          <source>For debug purposes only!</source>
          <target state="translated">디버그 목적으로 만!</target>
        </trans-unit>
        <trans-unit id="1e5e8cc6373625d6ede780576c6909b6713e5dda" translate="yes" xml:space="preserve">
          <source>For definitions of the different versions of RSS, see: &lt;a href=&quot;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&quot;&gt;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&lt;/a&gt;</source>
          <target state="translated">다른 버전의 RSS에 대한 정의는 &lt;a href=&quot;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&quot;&gt;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0dc5d40b5d2ee131a558d783f74733735bef205e" translate="yes" xml:space="preserve">
          <source>For detailed description how names passed in &lt;code&gt;kwargs&lt;/code&gt; are resolved see &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;kwargs&lt;/code&gt; 에 전달 된 이름 이 분석 되는 방법에 대한 자세한 설명 은 &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt; &lt;code&gt;get_or_create()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f6c3c45c81cb288d50532a438e4c2e1de010cf9" translate="yes" xml:space="preserve">
          <source>For details on accessing backwards-related objects, see the &lt;a href=&quot;queries#backwards-related-objects&quot;&gt;Following relationships backward example&lt;/a&gt;.</source>
          <target state="translated">역방향 관련 개체에 액세스하는 방법에 대한 자세한 내용은 &lt;a href=&quot;queries#backwards-related-objects&quot;&gt;다음 관계 역방향 예를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="163379e03ba2cf1b5d26dfdc8ca39d2b4c17c2a4" translate="yes" xml:space="preserve">
          <source>For details on how to add your own checks and integrate them with Django&amp;rsquo;s system checks, see the &lt;a href=&quot;../topics/checks&quot;&gt;System check topic guide&lt;/a&gt;.</source>
          <target state="translated">자체 검사를 추가하고 Django의 시스템 검사와 통합하는 방법에 대한 자세한 내용은 &lt;a href=&quot;../topics/checks&quot;&gt;시스템 검사 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dc195be6c74605240dd1d253de36726e6d6d316" translate="yes" xml:space="preserve">
          <source>For details on how you&amp;rsquo;d write one of these backends, see &lt;a href=&quot;../custom-file-storage&quot;&gt;Writing a custom storage system&lt;/a&gt;. There are 3rd party apps available that provide storage backends for many common file storage APIs. A good starting point is the &lt;a href=&quot;https://djangopackages.org/grids/g/storage-backends/&quot;&gt;overview at djangopackages.org&lt;/a&gt;.</source>
          <target state="translated">이러한 백엔드 중 하나를 작성하는 방법에 대한 자세한 내용 &lt;a href=&quot;../custom-file-storage&quot;&gt;은 사용자 지정 스토리지 시스템 작성을&lt;/a&gt; 참조하십시오 . 많은 공통 파일 스토리지 API에 스토리지 백엔드를 제공하는 타사 앱이 있습니다. 좋은 출발점은 &lt;a href=&quot;https://djangopackages.org/grids/g/storage-backends/&quot;&gt;djangopackages.org&lt;/a&gt; 의 개요 입니다.</target>
        </trans-unit>
        <trans-unit id="52957ba84f98b1d5cee6b3fcf986ebb5e0aeef4b" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;#playing-with-context&quot;&gt;Playing with Context objects&lt;/a&gt; below.</source>
          <target state="translated">자세한 내용은 아래의 &lt;a href=&quot;#playing-with-context&quot;&gt;컨텍스트 객체로 재생을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ca13a30dff65815da18fa43605645bf867c1ee7" translate="yes" xml:space="preserve">
          <source>For each &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, Django instantiates an &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt; and adapts it to the common template backend API.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 의 각 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 백엔드에 대해 Django는 &lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt; 인스턴스를 생성합니다 . &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; 는&lt;/a&gt;&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt; 감싸서 공통 템플릿 백엔드 API에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="091dadf61f9a776beb554812fdfed65ad59f5923" translate="yes" xml:space="preserve">
          <source>For each action, you can supply either a list of values or a string. When the value already exists in the list, &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;prepend&lt;/code&gt; have no effect; neither does &lt;code&gt;remove&lt;/code&gt; when the value doesn&amp;rsquo;t exist.</source>
          <target state="translated">각 조치에 대해 값 목록 또는 문자열을 제공 할 수 있습니다. 값이 이미 목록에 있으면 &lt;code&gt;append&lt;/code&gt; 및 &lt;code&gt;prepend&lt;/code&gt; 하지 않습니다. 어느 쪽도 않습니다 &lt;code&gt;remove&lt;/code&gt; 값이 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="eb987d0190d5c3530e37b746933ad08afcfcfcbc" translate="yes" xml:space="preserve">
          <source>For each field, we describe the default widget used if you don&amp;rsquo;t specify &lt;code&gt;widget&lt;/code&gt;. We also specify the value returned when you provide an empty value (see the section on &lt;code&gt;required&lt;/code&gt; above to understand what that means).</source>
          <target state="translated">각 필드의 경우, 우리는 당신이 지정하지 않은 경우 기본 위젯 사용 설명 &lt;code&gt;widget&lt;/code&gt; . 또한 빈 값을 제공 할 때 반환되는 값을 지정합니다 ( 무엇을 의미하는지 이해 &lt;code&gt;required&lt;/code&gt; 위의 필수 섹션 참조 ).</target>
        </trans-unit>
        <trans-unit id="d87202ef729a6cdd9bbc8a5b5c66e91ce34e02ed" translate="yes" xml:space="preserve">
          <source>For each model field that has &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; set, Django will add a method to retrieve the human-readable name for the field&amp;rsquo;s current value. See &lt;a href=&quot;instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; in the database API documentation.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 설정된 각 모델 필드에 대해 Django는 필드의 현재 값에 대한 사람이 읽을 수있는 이름을 검색하는 방법을 추가합니다. 데이터베이스 API 설명서에서 &lt;a href=&quot;instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b819f24d3cbd85ac1143152ab6d80ae072da700c" translate="yes" xml:space="preserve">
          <source>For each page (response) that Django sends back from a view, it might provide two HTTP headers: the &lt;code&gt;ETag&lt;/code&gt; header and the &lt;code&gt;Last-Modified&lt;/code&gt; header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt; middleware to set the &lt;code&gt;ETag&lt;/code&gt; header.</source>
          <target state="translated">Django가 뷰에서 다시 보내는 각 페이지 (응답)에 대해 &lt;code&gt;ETag&lt;/code&gt; 헤더와 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더의 두 가지 HTTP 헤더를 제공 할 수 있습니다 . 이 헤더는 HTTP 응답에서 선택 사항입니다. 뷰 함수로 설정하거나 &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt; 미들웨어를 사용하여 &lt;code&gt;ETag&lt;/code&gt; 헤더 를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56f104ebb00413a98694e90de1856d9319998a8a" translate="yes" xml:space="preserve">
          <source>For each row in your CSV file, call &lt;code&gt;writer.writerow&lt;/code&gt;, passing it an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt;.</source>
          <target state="translated">CSV 파일의 각 행에 대해 &lt;code&gt;writer.writerow&lt;/code&gt; 를 호출 하여 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable을&lt;/a&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cab83a5a714010f9187f9c6425c8314cf762fc1" translate="yes" xml:space="preserve">
          <source>For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a &lt;code&gt;Node&lt;/code&gt; instance based on the contents of the tag.</source>
          <target state="translated">템플릿 파서가 만나는 각 템플릿 태그에 대해 태그 내용과 파서 객체 자체가 포함 된 Python 함수를 호출합니다. 이 함수는 태그의 내용을 기반으로 &lt;code&gt;Node&lt;/code&gt; 인스턴스 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ca1d72c8182315b714de1b3cc74b5c3db54b95aa" translate="yes" xml:space="preserve">
          <source>For empty bands (where all pixel values are &amp;ldquo;no data&amp;rdquo;), all statistics are returned as &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">빈 밴드 (모든 픽셀 값이 &quot;데이터 없음&quot;)의 경우 모든 통계는 &lt;code&gt;None&lt;/code&gt; 으로 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="86553258332baa0d4dd5dd4328d0faa7deb87755" translate="yes" xml:space="preserve">
          <source>For every &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; that does not have &lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;, the object will have &lt;code&gt;get_next_by_FOO()&lt;/code&gt; and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; methods, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This returns the next and previous object with respect to the date field, raising a &lt;a href=&quot;#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exception when appropriate.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; &lt;/a&gt; 가없는 모든 &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 에 대해 객체에는 &lt;code&gt;get_next_by_FOO()&lt;/code&gt; 및 &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; 메서드가 있습니다. 여기서 &lt;code&gt;FOO&lt;/code&gt; 는 필드의 이름입니다. 그러면 날짜 필드와 관련하여 다음 개체와 이전 개체가 반환되어 적절한 경우 &lt;a href=&quot;#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9772414f603012496ae23f0ba07a156e697088ca" translate="yes" xml:space="preserve">
          <source>For every &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; that does not have &lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;, the object will have &lt;code&gt;get_next_by_FOO()&lt;/code&gt; and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; methods, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This returns the next and previous object with respect to the date field, raising a &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exception when appropriate.</source>
          <target state="translated">For every &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; that does not have &lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; &lt;/a&gt;, the object will have &lt;code&gt;get_next_by_FOO()&lt;/code&gt; and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; methods, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This returns the next and previous object with respect to the date field, raising a &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt; exception when appropriate.</target>
        </trans-unit>
        <trans-unit id="c6af115638455b1658d0ace819b2ffe32487193f" translate="yes" xml:space="preserve">
          <source>For every field that has &lt;a href=&quot;fields#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; set, the object will have a &lt;code&gt;get_FOO_display()&lt;/code&gt; method, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This method returns the &amp;ldquo;human-readable&amp;rdquo; value of the field.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 설정된 모든 필드 에 대해 오브젝트에는 &lt;code&gt;get_FOO_display()&lt;/code&gt; 메소드가 있습니다. 여기서 &lt;code&gt;FOO&lt;/code&gt; 는 필드 이름입니다. 이 메소드는 &quot;사람이 읽을 수있는&quot;필드 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a9d8934a0281dff5b47483effb2b261b49b28dd4" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;Index(fields=['headline', '-pub_date'])&lt;/code&gt; would create SQL with &lt;code&gt;(headline, pub_date DESC)&lt;/code&gt;. Index ordering isn&amp;rsquo;t supported on MySQL. In that case, a descending index is created as a normal index.</source>
          <target state="translated">예를 들어 &lt;code&gt;Index(fields=['headline', '-pub_date'])&lt;/code&gt; 는 &lt;code&gt;(headline, pub_date DESC)&lt;/code&gt; SQL을 만듭니다 . 인덱스 순서는 MySQL에서 지원되지 않습니다. 이 경우, 내림차순 인덱스는 일반 인덱스로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="a28eb7a67fa4fb46ad0e0b99179060eb9054ee2d" translate="yes" xml:space="preserve">
          <source>For example if you have &lt;code&gt;first_name&lt;/code&gt; as a model field and as a &lt;code&gt;ModelAdmin&lt;/code&gt; attribute, the model field will be used.</source>
          <target state="translated">예를 들어 &lt;code&gt;first_name&lt;/code&gt; 을 모델 필드 및 &lt;code&gt;ModelAdmin&lt;/code&gt; 속성으로 사용하면 모델 필드가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="06db7318354368de96f4145dda37303d15869be2" translate="yes" xml:space="preserve">
          <source>For example if you wanted to customize the wording of all user facing strings for the &lt;code&gt;name&lt;/code&gt; field:</source>
          <target state="translated">예를 들어 &lt;code&gt;name&lt;/code&gt; 필드에 대해 모든 사용자 대면 문자열의 문구를 사용자 정의하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="7cdc6afd51e180f7d936e985484811415dc36686" translate="yes" xml:space="preserve">
          <source>For example if you wanted to display a particular inline only in the change view, you could override &lt;code&gt;get_formsets_with_inlines&lt;/code&gt; as follows:</source>
          <target state="translated">예를 들어 변경보기에서만 특정 인라인을 표시하려면 다음과 같이 &lt;code&gt;get_formsets_with_inlines&lt;/code&gt; 를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f77c456b474676c048010c32ab9b46790e583436" translate="yes" xml:space="preserve">
          <source>For example to attach &lt;code&gt;request.user&lt;/code&gt; to the object prior to saving:</source>
          <target state="translated">예를 들어 , 저장하기 전에 &lt;code&gt;request.user&lt;/code&gt; 를 오브젝트 에 첨부하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ad3936c55afd72b17f1bad1033bbc892e0fb5f4" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; middleware would need to distinguish caches by the &lt;code&gt;Accept-language&lt;/code&gt; header.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../topics/i18n/index&quot;&gt;국제화&lt;/a&gt; 미들웨어는 &lt;code&gt;Accept-language&lt;/code&gt; 헤더 로 캐시를 구별해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9f50938580412245d851907183f7cbae1c995a73" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; fields use a Python &lt;code&gt;datetime&lt;/code&gt; object to store data. Databases don&amp;rsquo;t store &lt;code&gt;datetime&lt;/code&gt; objects, so the field value must be converted into an ISO-compliant date string for insertion into the database.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 필드는 Python &lt;code&gt;datetime&lt;/code&gt; 객체를 사용하여 데이터를 저장합니다. 데이터베이스는 &lt;code&gt;datetime&lt;/code&gt; 객체를 저장하지 않으므로 데이터베이스 에 삽입하려면 필드 값을 ISO 호환 날짜 문자열로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a27bf38226ab7ff07f5623795efbd9cac29bd85" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; normalizes input into a Python &lt;code&gt;datetime.date&lt;/code&gt; object. Regardless of whether you pass it a string in the format &lt;code&gt;'1994-07-15'&lt;/code&gt;, a &lt;code&gt;datetime.date&lt;/code&gt; object, or a number of other formats, &lt;code&gt;DateField&lt;/code&gt; will always normalize it to a &lt;code&gt;datetime.date&lt;/code&gt; object as long as it&amp;rsquo;s valid.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 는 Python &lt;code&gt;datetime.date&lt;/code&gt; 객체 에 대한 입력을 정규화 합니다. &lt;code&gt;'1994-07-15'&lt;/code&gt; 형식의 문자열 , &lt;code&gt;datetime.date&lt;/code&gt; 객체 또는 기타 여러 형식 으로 문자열을 전달하는지 여부에 관계없이 &lt;code&gt;DateField&lt;/code&gt; 는 유효한 경우 항상 &lt;code&gt;datetime.date&lt;/code&gt; 객체로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="a7d3d035b67f52b99c390681f0df8036d9d1284d" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;i18n/translation#lazy-translations&quot;&gt;lazy translation&lt;/a&gt; can be used before the target language is even known, because it doesn&amp;rsquo;t take place until the translated string is actually required, such as in a rendered template.</source>
          <target state="translated">예를 들어, 렌더링 된 템플릿과 같이 번역 된 문자열이 실제로 필요할 때까지 수행되지 않기 때문에 대상 언어를 알기 전에 &lt;a href=&quot;i18n/translation#lazy-translations&quot;&gt;게으른 번역을&lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65626bcffc97252495c52e838ec35256fdf62bcb" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; uses the app registry to look up translation catalogs in applications. To translate at import time, you need &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead. (Using &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; would be a bug, because the translation would happen at import time, rather than at each request depending on the active language.)</source>
          <target state="translated">예를 들어 &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 는 앱 레지스트리를 사용하여 애플리케이션에서 번역 카탈로그를 찾습니다. 가져 오기 시간에 번역하려면 대신 &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 가 필요 합니다. ( &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 사용하면 버그가 발생합니다. 번역은 활성 언어에 따라 각 요청이 아닌 가져 오기 시간에 발생하기 때문입니다.)</target>
        </trans-unit>
        <trans-unit id="f5be2fd2ea1a9ec8e596aeedb6d085b373362255" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;CheckConstraint(check=Q(age__gte=18), name='age_gte_18')&lt;/code&gt; ensures the age field is never less than 18.</source>
          <target state="translated">예를 들어 &lt;code&gt;CheckConstraint(check=Q(age__gte=18), name='age_gte_18')&lt;/code&gt; 는 연령 필드가 18보다 작지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="12d159ad663a37fc7486d7d61ec051e5cf1aeeac" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;GinIndex(name='json_index', fields=['jsonfield'],
opclasses=['jsonb_path_ops'])&lt;/code&gt; creates a gin index on &lt;code&gt;jsonfield&lt;/code&gt; using &lt;code&gt;jsonb_path_ops&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;GinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops'])&lt;/code&gt; 는 &lt;code&gt;jsonfield&lt;/code&gt; 사용하여 &lt;code&gt;jsonb_path_ops&lt;/code&gt; 에 진 인덱스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8529ce07a1126b744d3c5ea07ee62908bb7f707a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;SELECT DISTINCT ON (a)&lt;/code&gt; gives you the first row for each value in column &lt;code&gt;a&lt;/code&gt;. If you don&amp;rsquo;t specify an order, you&amp;rsquo;ll get some arbitrary row.</source>
          <target state="translated">예를 들어, &lt;code&gt;SELECT DISTINCT ON (a)&lt;/code&gt; 는 열 &lt;code&gt;a&lt;/code&gt; 의 각 값에 대한 첫 번째 행을 제공합니다 . 주문을 지정하지 않으면 임의의 행이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="390b16cd2cf8e734568d834589997b24d4d5756d" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;UniqueConstraint(fields=['room', 'date'],
name='unique_booking')&lt;/code&gt; ensures each room can only be booked once for each date.</source>
          <target state="translated">예를 들어 &lt;code&gt;UniqueConstraint(fields=['room', 'date'], name='unique_booking')&lt;/code&gt; 하면 각 날짜에 대해 각 객실을 한 번만 예약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="daa52bee5674e99acfc849dbcff198f33e258e7e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;foo.com/bar&lt;/code&gt; will be redirected to &lt;code&gt;foo.com/bar/&lt;/code&gt; if you don&amp;rsquo;t have a valid URL pattern for &lt;code&gt;foo.com/bar&lt;/code&gt; but &lt;em&gt;do&lt;/em&gt; have a valid pattern for &lt;code&gt;foo.com/bar/&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;foo.com/bar&lt;/code&gt; 가 로 리디렉션됩니다 &lt;code&gt;foo.com/bar/&lt;/code&gt; 당신의 유효한 URL 패턴이없는 경우 &lt;code&gt;foo.com/bar&lt;/code&gt; 을 하지만 &lt;em&gt;않습니다&lt;/em&gt; 에 대한 유효한 패턴이 &lt;code&gt;foo.com/bar/&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="acda421e62fa57606e2437699da05abac72b152b" translate="yes" xml:space="preserve">
          <source>For example, Django uses the following method for its &lt;a href=&quot;../ref/models/fields#django.db.models.BinaryField&quot;&gt;&lt;code&gt;BinaryField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어 Django는 &lt;a href=&quot;../ref/models/fields#django.db.models.BinaryField&quot;&gt; &lt;code&gt;BinaryField&lt;/code&gt; 에&lt;/a&gt; 다음 방법을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8e172ef87663d0b86cc887111ff1dc787b57de3f" translate="yes" xml:space="preserve">
          <source>For example, Django was used at &lt;a href=&quot;http://www.kusports.com/&quot;&gt;kusports.com&lt;/a&gt; to generate customized, printer-friendly NCAA tournament brackets, as PDF files, for people participating in a March Madness contest.</source>
          <target state="translated">예를 들어, Django는 &lt;a href=&quot;http://www.kusports.com/&quot;&gt;kusports.com&lt;/a&gt; 에서 March Madness 공모전에 참가한 사람들을 위해 PDF 파일로 사용자 정의 된 프린터 친화적 인 NCAA 토너먼트 브래킷을 생성 하는 데 사용되었습니다 .</target>
        </trans-unit>
        <trans-unit id="80943883f7d984a6641475f505bdfdd86703d93d" translate="yes" xml:space="preserve">
          <source>For example, a JSON mixin might look something like this:</source>
          <target state="translated">예를 들어 JSON 믹스 인은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d622b054a138b10227a9f803d572d5e5a50d59f0" translate="yes" xml:space="preserve">
          <source>For example, a website could offer an RSS feed of recent crimes for every police beat in a city. It&amp;rsquo;d be silly to create a separate &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class for each police beat; that would violate the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#dry&quot;&gt;DRY principle&lt;/a&gt; and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; so feeds can output items based on information in the feed&amp;rsquo;s URL.</source>
          <target state="translated">예를 들어, 웹 사이트는 도시의 모든 경찰에 대해 최근 범죄에 대한 RSS 피드를 제공 할 수 있습니다. 각 경찰에 대해 별도의 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 를 만드는 것은 어리석은 일입니다 . 이는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#dry&quot;&gt;DRY 원칙을&lt;/a&gt; 위반하고 데이터를 프로그래밍 로직에 연결합니다. 대신 신디케이션 프레임 워크를 사용하면 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 에서 전달 된 인수에 액세스하여 피드가 피드 URL의 정보를 기반으로 항목을 출력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0570efa58b3d49a98020b20aef23d877304adeaa" translate="yes" xml:space="preserve">
          <source>For example, a website could offer an RSS feed of recent crimes for every police beat in a city. It&amp;rsquo;d be silly to create a separate &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class for each police beat; that would violate the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/misc/design-philosophies/#dry&quot;&gt;DRY principle&lt;/a&gt; and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; so feeds can output items based on information in the feed&amp;rsquo;s URL.</source>
          <target state="translated">For example, a website could offer an RSS feed of recent crimes for every police beat in a city. It&amp;rsquo;d be silly to create a separate &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; class for each police beat; that would violate the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/misc/design-philosophies/#dry&quot;&gt;DRY principle&lt;/a&gt; and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; so feeds can output items based on information in the feed&amp;rsquo;s URL.</target>
        </trans-unit>
        <trans-unit id="32c09ab0d99cab3d599659013ef2ae359d32fd04" translate="yes" xml:space="preserve">
          <source>For example, an attacker could log into &lt;code&gt;good.example.com&lt;/code&gt; and get a valid session for their account. If the attacker has control over &lt;code&gt;bad.example.com&lt;/code&gt;, they can use it to send their session key to you since a subdomain is permitted to set cookies on &lt;code&gt;*.example.com&lt;/code&gt;. When you visit &lt;code&gt;good.example.com&lt;/code&gt;, you&amp;rsquo;ll be logged in as the attacker and might inadvertently enter your sensitive personal data (e.g. credit card info) into the attacker&amp;rsquo;s account.</source>
          <target state="translated">예를 들어 공격자는 &lt;code&gt;good.example.com&lt;/code&gt; 에 로그인하여 자신의 계정에 유효한 세션을 얻을 수 있습니다. 공격자가 &lt;code&gt;bad.example.com&lt;/code&gt; 을 제어 할 경우 하위 도메인이 &lt;code&gt;*.example.com&lt;/code&gt; 에서 쿠키를 설정할 수 있으므로 세션 키를 보내는 데 사용할 수 있습니다 . &lt;code&gt;good.example.com&lt;/code&gt; 을 방문 하면 공격자로 로그인되어 실수로 민감한 개인 데이터 (예 : 신용 카드 정보)를 침입자의 계정에 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a246838b4dded87ebc8eaa300c816133a80d83cb" translate="yes" xml:space="preserve">
          <source>For example, assuming an Email model that has a &lt;code&gt;body&lt;/code&gt; attribute and a many-to-many relation to User, the following template code is optimal:</source>
          <target state="translated">예를 들어 &lt;code&gt;body&lt;/code&gt; 속성이 있고 User와 다 대다 관계 가있는 Email 모델을 가정 하면 다음 템플릿 코드가 최적입니다.</target>
        </trans-unit>
        <trans-unit id="1d722e1124a3a5f8ff5fb6e2d47961555ceb8107" translate="yes" xml:space="preserve">
          <source>For example, assuming the following class-based view:</source>
          <target state="translated">예를 들어 다음과 같은 클래스 기반 뷰를 가정합니다.</target>
        </trans-unit>
        <trans-unit id="f24493d60cc4ff3745f2d26d5246cb69bda1d13d" translate="yes" xml:space="preserve">
          <source>For example, assuming you have &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;'/static/'&lt;/code&gt;, the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command would collect the &amp;ldquo;stats&amp;rdquo; files in a &lt;code&gt;'downloads'&lt;/code&gt; subdirectory of &lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;'/static/'&lt;/code&gt; 로 설정 한 경우 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령은 &lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'downloads'&lt;/code&gt; 서브 디렉토리 에서&amp;ldquo;stats&amp;rdquo;파일을 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="b76b34053dc515346add887966fae4b47621b177" translate="yes" xml:space="preserve">
          <source>For example, both of these models use the same underlying database table:</source>
          <target state="translated">예를 들어,이 두 모델 모두 동일한 기본 데이터베이스 테이블을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="be04b24d7f1f643fa63e9892d175c3cc722c423b" translate="yes" xml:space="preserve">
          <source>For example, consider an author query that attempts to find out the average rating of books written by each author:</source>
          <target state="translated">예를 들어, 각 저자가 쓴 책의 평균 등급을 찾으려는 저자 쿼리를 생각해보십시오.</target>
        </trans-unit>
        <trans-unit id="4d41e3a123d0a71ac27a375044995f1535e74d7c" translate="yes" xml:space="preserve">
          <source>For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group.</source>
          <target state="translated">예를 들어, 음악가가 속한 음악 그룹을 추적하는 응용 프로그램의 경우를 고려하십시오. 개인과 구성원 인 그룹간에 다 대다 관계가 있으므로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 를 사용 하여이 관계를 나타낼 수 있습니다 . 그러나 개인이 그룹에 가입 한 날짜와 같이 수집하려는 멤버십에 대한 세부 사항이 많이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ee6868d72ee360f060d928e04a60f0b6da77184" translate="yes" xml:space="preserve">
          <source>For example, consider the following exchange between the client and server:</source>
          <target state="translated">예를 들어, 클라이언트와 서버 간의 다음 교환을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="fefa82ba367cd0c4e495f81beae9f409ac13e437" translate="yes" xml:space="preserve">
          <source>For example, consider the following models:</source>
          <target state="translated">For example, consider the following models:</target>
        </trans-unit>
        <trans-unit id="50dfca05afb0b864e6e367b2f5b53711b365f279" translate="yes" xml:space="preserve">
          <source>For example, for a GitHub-like website this would mean that if a logged-in user follows a link to a private GitHub project posted on a corporate discussion forum or email, GitHub will not receive the session cookie and the user won&amp;rsquo;t be able to access the project. A bank website, however, most likely doesn&amp;rsquo;t want to allow any transactional pages to be linked from external sites so the &lt;code&gt;'Strict'&lt;/code&gt; flag would be appropriate.</source>
          <target state="translated">예를 들어, GitHub와 유사한 웹 사이트의 경우, 로그인 한 사용자가 회사 토론 포럼 또는 이메일에 게시 된 비공개 GitHub 프로젝트에 대한 링크를 따르는 경우 GitHub가 세션 쿠키를 수신하지 않으며 사용자는 프로젝트에 액세스 할 수 있습니다. 그러나 은행 웹 사이트는 거래 페이지가 외부 사이트에서 연결되는 것을 원하지 않기 때문에 &lt;code&gt;'Strict'&lt;/code&gt; 플래그가 적합합니다.</target>
        </trans-unit>
        <trans-unit id="8b8d15a169d7dd783fadfe82b49729567dc09a23" translate="yes" xml:space="preserve">
          <source>For example, for this setting:</source>
          <target state="translated">예를 들어이 설정의 경우 :</target>
        </trans-unit>
        <trans-unit id="30bca72fc5eb012eefb4e2af9f75a79bc0ea52c8" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;MyModel&lt;/code&gt; with an &lt;code&gt;active&lt;/code&gt; field, this snippet ensures that the &lt;code&gt;if obj.active&lt;/code&gt; check at the end uses the correct value if updating &lt;code&gt;active&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; fails in the transaction:</source>
          <target state="translated">예를 들어, &lt;code&gt;active&lt;/code&gt; 필드 가있는 &lt;code&gt;MyModel&lt;/code&gt; 이 주어 지면 이 스 니펫은 트랜잭션에서 &lt;code&gt;active&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 업데이트하는 데 실패한 경우 끝에 &lt;code&gt;if obj.active&lt;/code&gt; 검사가 올바른 값을 사용 하도록합니다.</target>
        </trans-unit>
        <trans-unit id="8fca2e153a6817b31175cf122ed1bf76d7dbff22" translate="yes" xml:space="preserve">
          <source>For example, given an app &lt;code&gt;common/models.py&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &lt;code&gt;common/models.py&lt;/code&gt; 앱이 주어지면 :</target>
        </trans-unit>
        <trans-unit id="82c068a3348e9335855de4571fd3358289bf5be2" translate="yes" xml:space="preserve">
          <source>For example, given this stored procedure in an Oracle database:</source>
          <target state="translated">예를 들어,이 저장 프로 시저가 Oracle 데이터베이스에있는 경우</target>
        </trans-unit>
        <trans-unit id="5e0f6022b0d932e3ce9cc4127fab69a392204cda" translate="yes" xml:space="preserve">
          <source>For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:</source>
          <target state="translated">예를 들어, 다음은 두 개의 필수 필드 (생년월일 및 키)를 정의하는 사용자 모델에 대한 부분 정의입니다.</target>
        </trans-unit>
        <trans-unit id="f080380cc91321db18be0ed5e5b2815307b9d0ca" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s a custom template tag, &lt;code&gt;{% upper %}&lt;/code&gt;, that capitalizes everything between itself and &lt;code&gt;{% endupper %}&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 다음은 사용자 정의 템플릿 태그의 &lt;code&gt;{% upper %}&lt;/code&gt; , 그 자체 사이는 대문자로 모든 것을 &lt;code&gt;{% endupper %}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b9d735b9c5b8d870234e558bacbf34dd9c85bd5" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s a validator that only allows even numbers:</source>
          <target state="translated">예를 들어, 짝수 만 허용하는 유효성 검사기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd701cbfd16d3186e327aaf9b1f84400d53c091b" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s an attack scenario if you use &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; to serialize session data. If you&amp;rsquo;re using the &lt;a href=&quot;#cookie-session-backend&quot;&gt;signed cookie session backend&lt;/a&gt; and &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is known by an attacker (there isn&amp;rsquo;t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into their session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; leak immediately escalates to a remote code execution vulnerability.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt; 을 사용 하여 세션 데이터를 직렬화 하는 경우 공격 시나리오가 있습니다 . 당신이 사용하는 경우 &lt;a href=&quot;#cookie-session-backend&quot;&gt;서명 쿠키 세션 백엔드를&lt;/a&gt; 하고 &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; 이&lt;/a&gt; 공격자 (가 누출 원인이 장고 고유의 취약점이없는)로 알려져 있으며, 공격자는 자신의 세션에 캐릭터를 삽입 할 수있는 경우 unpickled 실행합니다 서버의 임의 코드. 그렇게하는 기술은 인터넷에서 간단하고 쉽게 구할 수 있습니다. 쿠키 세션 저장소는 변조를 방지하기 위해 쿠키 저장 데이터에 서명하지만 &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 누수는 즉시 원격 코드 실행 취약점으로 에스컬레이션됩니다.</target>
        </trans-unit>
        <trans-unit id="a9b99d628c1b69952232a27efb8b776dffa490e3" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s an excerpt of the URLconf for the &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django website&lt;/a&gt; itself. It includes a number of other URLconfs:</source>
          <target state="translated">예를 들어, 다음은 &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django 웹 사이트&lt;/a&gt; 자체 에 대한 URLconf의 일부입니다 . 여기에는 여러 다른 URLconf가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e64d241ee6301d9415a0df7e9b9bd01aead3c6f9" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s how sending our &lt;code&gt;pizza_done&lt;/code&gt; signal might look:</source>
          <target state="translated">예를 들어 &lt;code&gt;pizza_done&lt;/code&gt; 신호를 보내는 방법 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d11541a9d468d4cd46d6175644e9833e8b842148" translate="yes" xml:space="preserve">
          <source>For example, if &lt;a href=&quot;#std:setting-FORMAT_MODULE_PATH&quot;&gt;&lt;code&gt;FORMAT_MODULE_PATH&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;mysite.formats&lt;/code&gt;, and current language is &lt;code&gt;en&lt;/code&gt; (English), Django will expect a directory tree like:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;#std:setting-FORMAT_MODULE_PATH&quot;&gt; &lt;code&gt;FORMAT_MODULE_PATH&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;mysite.formats&lt;/code&gt; 하고, 현재 언어가 &lt;code&gt;en&lt;/code&gt; (영어), 장고는 디렉토리 트리를 같은 기대합니다 :</target>
        </trans-unit>
        <trans-unit id="6a2c4dfd529a15047ff27aa7ebeab7fae04103b1" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;path('users/&amp;lt;id&amp;gt;/', ...)&lt;/code&gt; is the matching pattern, &lt;code&gt;route&lt;/code&gt; will contain &lt;code&gt;'users/&amp;lt;id&amp;gt;/'&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;path('users/&amp;lt;id&amp;gt;/', ...)&lt;/code&gt; 가 일치하는 패턴 인 경우 &lt;code&gt;route&lt;/code&gt; 에는 &lt;code&gt;'users/&amp;lt;id&amp;gt;/'&lt;/code&gt; 가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="19d132541d20fc7bb2eb3a1a61268013dfbd96b2" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;substring&lt;/code&gt; is user-provided, this function is vulnerable to SQL injection:</source>
          <target state="translated">예를 들어, &lt;code&gt;substring&lt;/code&gt; 이 사용자 제공 인 경우이 함수는 SQL 삽입에 취약합니다.</target>
        </trans-unit>
        <trans-unit id="7160212d78e297bff74fb80841aa3967df415bb3" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Car&lt;/code&gt; model has a &lt;code&gt;Manufacturer&lt;/code&gt; &amp;ndash; that is, a &lt;code&gt;Manufacturer&lt;/code&gt; makes multiple cars but each &lt;code&gt;Car&lt;/code&gt; only has one &lt;code&gt;Manufacturer&lt;/code&gt; &amp;ndash; use the following definitions:</source>
          <target state="translated">예를 들어 &lt;code&gt;Car&lt;/code&gt; 모델에 &lt;code&gt;Manufacturer&lt;/code&gt; 가있는 경우 ( 즉, &lt;code&gt;Manufacturer&lt;/code&gt; 는 여러 대의 자동차를 만들지 만 각 &lt;code&gt;Car&lt;/code&gt; 에는 하나의 &lt;code&gt;Manufacturer&lt;/code&gt; 만 있음) 다음 정의를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="497cc39ebcbf9a72f2dc078c2f7c50e504273f18" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Pizza&lt;/code&gt; can have multiple &lt;code&gt;Topping&lt;/code&gt; objects, modeled like this:</source>
          <target state="translated">예를 들어 &lt;code&gt;Pizza&lt;/code&gt; 여러 &lt;code&gt;Topping&lt;/code&gt; 오브젝트 가있을 수있는 경우 다음 과 같이 모델링됩니다.</target>
        </trans-unit>
        <trans-unit id="88a926ad96f67f15047715985b0884ddf137184c" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Pizza&lt;/code&gt; has multiple &lt;code&gt;Topping&lt;/code&gt; objects &amp;ndash; that is, a &lt;code&gt;Topping&lt;/code&gt; can be on multiple pizzas and each &lt;code&gt;Pizza&lt;/code&gt; has multiple toppings &amp;ndash; here&amp;rsquo;s how you&amp;rsquo;d represent that:</source>
          <target state="translated">예를 들어 &lt;code&gt;Pizza&lt;/code&gt; 에 여러 개의 &lt;code&gt;Topping&lt;/code&gt; 개체 가 있는 경우 ( 즉, &lt;code&gt;Topping&lt;/code&gt; 은 여러 피자에있을 수 있고 각 &lt;code&gt;Pizza&lt;/code&gt; 에는 여러 개의 토핑이있는 경우) 다음과 같이 표현합니다.</target>
        </trans-unit>
        <trans-unit id="959fca095f33dfcfecd28d18457fa30c5abdbc45" translate="yes" xml:space="preserve">
          <source>For example, if a template &lt;code&gt;foo.html&lt;/code&gt; has &lt;code&gt;{% load humanize %}&lt;/code&gt;, a child template (e.g., one that has &lt;code&gt;{% extends &quot;foo.html&quot; %}&lt;/code&gt;) will &lt;em&gt;not&lt;/em&gt; have access to the humanize template tags and filters. The child template is responsible for its own &lt;code&gt;{% load humanize %}&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 템플릿 &lt;code&gt;foo.html&lt;/code&gt; 에 &lt;code&gt;{% load humanize %}&lt;/code&gt; 가 있으면 하위 템플릿 (예 : &lt;code&gt;{% extends &quot;foo.html&quot; %}&lt;/code&gt; 가있는 템플릿)은 humanize 템플릿 태그 및 필터에 액세스 할 수 &lt;em&gt;없습니다&lt;/em&gt; . 자식 템플릿은 자체 &lt;code&gt;{% load humanize %}&lt;/code&gt; 를 담당 합니다.</target>
        </trans-unit>
        <trans-unit id="cd0e16779d42e07a7aabddc148bbb9f4e659913c" translate="yes" xml:space="preserve">
          <source>For example, if a user requested the URL &amp;ldquo;/articles/2005/05/39323/&amp;rdquo;, Django would call the function &lt;code&gt;news.views.article_detail(request,
year=2005, month=5, pk=39323)&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 사용자가 &quot;/ articles / 2005 / 05 / 39323 /&quot;URL을 요청하면 Django는 &lt;code&gt;news.views.article_detail(request, year=2005, month=5, pk=39323)&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="3ad997f20e49acf7a66e8c036a9a971fcba2d02b" translate="yes" xml:space="preserve">
          <source>For example, if an article is only allowed on a single site, you&amp;rsquo;d use a model like this:</source>
          <target state="translated">예를 들어 기사가 단일 사이트에서만 허용되는 경우 다음과 같은 모델을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="73ec1fd7ebab8cecdff688bce69fda29e88b07f3" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;Article&lt;/code&gt; model looks like this:</source>
          <target state="translated">예를 들어 &lt;code&gt;Article&lt;/code&gt; 모델이 다음과 같은 경우</target>
        </trans-unit>
        <trans-unit id="7644c6b385544646926cd0a3a90e3256cdd6c0dd" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; for your application is set to &lt;code&gt;&quot;/minfo&quot;&lt;/code&gt;, then &lt;code&gt;path&lt;/code&gt; might be &lt;code&gt;&quot;/minfo/music/bands/the_beatles/&quot;&lt;/code&gt; and &lt;code&gt;path_info&lt;/code&gt; would be &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 애플리케이션 의 &lt;code&gt;WSGIScriptAlias&lt;/code&gt; 가 &lt;code&gt;&quot;/minfo&quot;&lt;/code&gt; 로 설정된 경우 &lt;code&gt;path&lt;/code&gt; 는 &lt;code&gt;&quot;/minfo/music/bands/the_beatles/&quot;&lt;/code&gt; 이고 &lt;code&gt;path_info&lt;/code&gt; 는 &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="77e90f3bf3275646db6a9c846ad34e0a66e6d861" translate="yes" xml:space="preserve">
          <source>For example, if the default ordering is by a non-unique &lt;code&gt;name&lt;/code&gt; field, then the changelist is sorted by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pk&lt;/code&gt;. This could perform poorly if you have a lot of rows and don&amp;rsquo;t have an index on &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pk&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 기본 순서가 고유하지 않은 &lt;code&gt;name&lt;/code&gt; 필드를 기준으로하는 경우 변경 목록은 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;pk&lt;/code&gt; 로 정렬됩니다 . 행이 많고 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;pk&lt;/code&gt; 에 대한 색인이없는 경우 성능이 저하 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4e149bd799a81643324e12a0b823ee09731d37e" translate="yes" xml:space="preserve">
          <source>For example, if the models for your application live in the module &lt;code&gt;myapp.models&lt;/code&gt; (the package structure that is created for an application by the &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;manage.py startapp&lt;/code&gt;&lt;/a&gt; script), &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; should read, in part:</source>
          <target state="translated">예를 들어, 애플리케이션의 모델이 &lt;code&gt;myapp.models&lt;/code&gt; 모듈 ( &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;manage.py startapp&lt;/code&gt; &lt;/a&gt; 스크립트에 의해 애플리케이션에 대해 작성된 패키지 구조 )에있는 경우 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 는 다음 부분을 읽어야합니다.</target>
        </trans-unit>
        <trans-unit id="b0c347e5fa8a57d3a7946043b8e71f27df336b80" translate="yes" xml:space="preserve">
          <source>For example, if we had a &lt;code&gt;Book&lt;/code&gt; model with a &lt;code&gt;ManyToManyField&lt;/code&gt; linking to &lt;code&gt;Author&lt;/code&gt;, we could add a through model &lt;code&gt;AuthorBook&lt;/code&gt; with a new field &lt;code&gt;is_primary&lt;/code&gt;, like so:</source>
          <target state="translated">For example, if we had a &lt;code&gt;Book&lt;/code&gt; model with a &lt;code&gt;ManyToManyField&lt;/code&gt; linking to &lt;code&gt;Author&lt;/code&gt; , we could add a through model &lt;code&gt;AuthorBook&lt;/code&gt; with a new field &lt;code&gt;is_primary&lt;/code&gt; , like so:</target>
        </trans-unit>
        <trans-unit id="a575ad3908796268e9301813f7ae313228b6b010" translate="yes" xml:space="preserve">
          <source>For example, if we have:</source>
          <target state="translated">예를 들어 다음과 같은 경우</target>
        </trans-unit>
        <trans-unit id="37ed5ab15784ebdc941be2c5c6bcc94f7a13da2b" translate="yes" xml:space="preserve">
          <source>For example, if we reverse the order of the &lt;code&gt;values()&lt;/code&gt; and &lt;code&gt;annotate()&lt;/code&gt; clause from our previous example:</source>
          <target state="translated">예를 들어, 이전 예제에서 &lt;code&gt;values()&lt;/code&gt; 및 &lt;code&gt;annotate()&lt;/code&gt; 절의 순서를 반대로 바꾸는 경우 :</target>
        </trans-unit>
        <trans-unit id="aaa31c7d83e5e9be08f7ea4cf3e1d382a5057f9c" translate="yes" xml:space="preserve">
          <source>For example, if we wanted to add a tool to the change list view for all the models in an app named &lt;code&gt;my_app&lt;/code&gt;, we would copy &lt;code&gt;contrib/admin/templates/admin/change_list.html&lt;/code&gt; to the &lt;code&gt;templates/admin/my_app/&lt;/code&gt; directory of our project, and make any necessary changes.</source>
          <target state="translated">예를 들어, &lt;code&gt;my_app&lt;/code&gt; 라는 앱의 모든 모델에 대한 변경 목록보기에 도구를 추가하려면 &lt;code&gt;contrib/admin/templates/admin/change_list.html&lt;/code&gt; 을 우리의 &lt;code&gt;templates/admin/my_app/&lt;/code&gt; 디렉토리에 복사 합니다. 프로젝트를 수정하고 필요한 사항을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="5206cd2a79a8ce28494c927b4f754f4f6ab560c0" translate="yes" xml:space="preserve">
          <source>For example, if you had &lt;code&gt;organic.py&lt;/code&gt; and &lt;code&gt;synthetic.py&lt;/code&gt; in the &lt;code&gt;models&lt;/code&gt; directory:</source>
          <target state="translated">예를 들어, &lt;code&gt;models&lt;/code&gt; 디렉토리 에 &lt;code&gt;organic.py&lt;/code&gt; 및 &lt;code&gt;synthetic.py&lt;/code&gt; 가 있는 경우 :</target>
        </trans-unit>
        <trans-unit id="ec78701bb6d07ca8380a8fb2def8939d712743f8" translate="yes" xml:space="preserve">
          <source>For example, if you have a Blog object &lt;code&gt;b&lt;/code&gt; with &lt;code&gt;id=5&lt;/code&gt;, the following three queries would be identical:</source>
          <target state="translated">당신이 블로그 객체가있는 경우 예를 들어, &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;id=5&lt;/code&gt; , 다음과 같은 세 가지 쿼리는 동일 할 것이다 :</target>
        </trans-unit>
        <trans-unit id="7c53aafc3c0c25befc980a17c0988fd3884989b3" translate="yes" xml:space="preserve">
          <source>For example, if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author:</source>
          <target state="translated">예를 들어 작성자가있는 블로그 항목이있는 경우 다음 정의는 작성자의 이메일 주소로 블로그 항목을 검색 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="95a33ccea96a9b29633c8c3693475d86bc4201f8" translate="yes" xml:space="preserve">
          <source>For example, if you have a field &lt;code&gt;title&lt;/code&gt; that has &lt;code&gt;unique_for_date=&quot;pub_date&quot;&lt;/code&gt;, then Django wouldn&amp;rsquo;t allow the entry of two records with the same &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;pub_date&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;unique_for_date=&quot;pub_date&quot;&lt;/code&gt; 인 필드 &lt;code&gt;title&lt;/code&gt; 이 있으면 Django는 &lt;code&gt;title&lt;/code&gt; 과 &lt;code&gt;pub_date&lt;/code&gt; 가 동일한 두 개의 레코드를 입력 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a451065bc00e41b11f720e0f717367308b091faf" translate="yes" xml:space="preserve">
          <source>For example, if you have a function called &lt;code&gt;get_notification_email()&lt;/code&gt; that returns a list of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages:</source>
          <target state="translated">당신이라는 함수가있는 경우 예를 들어, &lt;code&gt;get_notification_email()&lt;/code&gt; 반환의 목록 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 는&lt;/a&gt; 당신이 밖으로 보내려는 약간의주기적인 이메일을 나타내는 개체를, 당신은 send_messages 단일 호출을 사용하여 이러한 이메일을 보낼 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="17eafc2b5422a055d91b931d67499186a4200fbf" translate="yes" xml:space="preserve">
          <source>For example, if you have an app &lt;code&gt;bookstore&lt;/code&gt; (as created by &lt;code&gt;manage.py startapp bookstore&lt;/code&gt;), a model defined as &lt;code&gt;class Book&lt;/code&gt; will have a database table named &lt;code&gt;bookstore_book&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;manage.py startapp bookstore&lt;/code&gt; 에 의해 작성된 앱 &lt;code&gt;bookstore&lt;/code&gt; 이있는 경우 , &lt;code&gt;class Book&lt;/code&gt; 정의 된 모델 에는 &lt;code&gt;bookstore_book&lt;/code&gt; 이라는 데이터베이스 테이블이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="63fbca3270dc92aa2768b890a6cb1d33f7c76b6d" translate="yes" xml:space="preserve">
          <source>For example, if you only want users whose names begin with &amp;lsquo;J&amp;rsquo; to be able to delete objects in bulk:</source>
          <target state="translated">예를 들어 이름이 'J'로 시작하는 사용자 만 개체를 ​​대량으로 삭제할 수있게하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="dffc16ac6f5a1235e2ff5c1c9590e976974355a8" translate="yes" xml:space="preserve">
          <source>For example, if you operate a Web email system, then the contents of the &amp;ldquo;inbox&amp;rdquo; page depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have their user-specific inbox page cached for subsequent visitors to the site. That&amp;rsquo;s not cool.</source>
          <target state="translated">예를 들어, 웹 전자 메일 시스템을 운영하는 경우 &quot;받은 편지함&quot;페이지의 내용은 로그인 한 사용자에 따라 다릅니다. ISP가 사이트를 맹목적으로 캐시 한 경우 해당 ISP를 통해 처음 로그인 한 사용자는 해당 사용자를 갖습니다. 사이트의 후속 방문자를 위해 캐시 된 특정받은 편지함 페이지 멋지지 않아요.</target>
        </trans-unit>
        <trans-unit id="0318688c9cbfbc9a1af11ad338883da37e732245" translate="yes" xml:space="preserve">
          <source>For example, if you want the &lt;code&gt;CharField&lt;/code&gt; for the &lt;code&gt;name&lt;/code&gt; attribute of &lt;code&gt;Author&lt;/code&gt; to be represented by a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; instead of its default &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, you can override the field&amp;rsquo;s widget:</source>
          <target state="translated">예를 들어 &lt;code&gt;Author&lt;/code&gt; 의 &lt;code&gt;name&lt;/code&gt; 속성에 대한 &lt;code&gt;CharField&lt;/code&gt; 가 기본 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 대신 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 로 표시되도록 하려면 필드의 위젯을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3c8260ce0cd8a75ee9020cf48382605726d0d9d" translate="yes" xml:space="preserve">
          <source>For example, if you want to allow generic relations to models with either &lt;a href=&quot;../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; primary key fields, you can use &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for the &amp;ldquo;object_id&amp;rdquo; field on your model since integers can be coerced to strings by &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 기본 키 필드 가있는 모델에 일반 관계를 허용 하려면 &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt; &lt;code&gt;get_db_prep_value()&lt;/code&gt; &lt;/a&gt; 로 정수를 문자열로 강제 변환 할 수 있으므로 모델의 &quot;object_id&quot;필드에 &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0412d92da41464198926ae62a16c47b911add00" translate="yes" xml:space="preserve">
          <source>For example, if you want to catch the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; HTML elements created by the &lt;a href=&quot;#std:templatefilter-linebreaks&quot;&gt;&lt;code&gt;linebreaks&lt;/code&gt;&lt;/a&gt; filter:</source>
          <target state="translated">예를 들어 줄 &lt;a href=&quot;#std:templatefilter-linebreaks&quot;&gt; &lt;code&gt;linebreaks&lt;/code&gt; &lt;/a&gt; 필터로 만든 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; HTML 요소 를 찾으려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="287184b56a2079bc77936a467ffcb12bb2b8886c" translate="yes" xml:space="preserve">
          <source>For example, if you want to override &lt;code&gt;clean()&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;clean()&lt;/code&gt; 을 재정의하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="3efb9b9ef08765dd8e6f0b121687a407972caf70" translate="yes" xml:space="preserve">
          <source>For example, if you want to return a custom &lt;code&gt;QuerySet&lt;/code&gt; class from the &lt;code&gt;get_queryset&lt;/code&gt; method, you could do this:</source>
          <target state="translated">예를 들어 &lt;code&gt;get_queryset&lt;/code&gt; 메소드 에서 사용자 정의 &lt;code&gt;QuerySet&lt;/code&gt; 클래스 를 리턴 하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="063ebc3924841e6968434234faec07eb5ca9e33b" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field:</source>
          <target state="translated">예를 들어, 책당 평균 저자 수를 계산하려면 먼저 저자 수로 책 세트에 주석을 달고 주석 필드를 참조하여 해당 저자 수를 집계하십시오.</target>
        </trans-unit>
        <trans-unit id="bfc09bcbb025c7c07130736bf333d3d02ac80e5f" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to use &lt;code&gt;MySlugFormField&lt;/code&gt; for the &lt;code&gt;slug&lt;/code&gt; field, you could do the following:</source>
          <target state="translated">당신이 사용하고 싶었 예를 들어, &lt;code&gt;MySlugFormField&lt;/code&gt; 을 에 대한 &lt;code&gt;slug&lt;/code&gt; 필드, 다음을 수행 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c7aa460ec5e420ac634048bfa3fc527ceb63585d" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to validate that the contents of a &lt;code&gt;CharField&lt;/code&gt; called &lt;code&gt;serialnumber&lt;/code&gt; was unique, &lt;code&gt;clean_serialnumber()&lt;/code&gt; would be the right place to do this. You don&amp;rsquo;t need a specific field (it&amp;rsquo;s a &lt;code&gt;CharField&lt;/code&gt;), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data.</source>
          <target state="translated">예를 들어 &lt;code&gt;serialnumber&lt;/code&gt; 라는 &lt;code&gt;CharField&lt;/code&gt; 의 내용 이 고유 한지 확인하려는 경우 &lt;code&gt;clean_serialnumber()&lt;/code&gt; 가 올바른 위치입니다. 특정 필드 ( &lt;code&gt;CharField&lt;/code&gt; ) 는 필요하지 않지만 폼 필드 관련 유효성 검사 및 데이터 정리 / 정규화가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="812e0ac86e0af9354376f7614bdda8d6eaf87eef" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to write a custom filter called &lt;code&gt;urlize_and_linebreaks&lt;/code&gt; that combined the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-urlize&quot;&gt;&lt;code&gt;urlize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-linebreaksbr&quot;&gt;&lt;code&gt;linebreaksbr&lt;/code&gt;&lt;/a&gt; filters, the filter would look like:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-urlize&quot;&gt; &lt;code&gt;urlize&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-linebreaksbr&quot;&gt; &lt;code&gt;linebreaksbr&lt;/code&gt; &lt;/a&gt; 필터 를 결합한 &lt;code&gt;urlize_and_linebreaks&lt;/code&gt; 라는 사용자 정의 필터를 작성하려는 경우 필터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="62aa2739230ebf126047b21a8ee5eb70e0f6ad83" translate="yes" xml:space="preserve">
          <source>For example, if you were building a database of &amp;ldquo;places&amp;rdquo;, you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the &lt;code&gt;Restaurant&lt;/code&gt; model, you could make &lt;code&gt;Restaurant&lt;/code&gt; have a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Place&lt;/code&gt; (because a restaurant &amp;ldquo;is a&amp;rdquo; place; in fact, to handle this you&amp;rsquo;d typically use &lt;a href=&quot;#model-inheritance&quot;&gt;inheritance&lt;/a&gt;, which involves an implicit one-to-one relation).</source>
          <target state="translated">예를 들어,&amp;ldquo;장소&amp;rdquo;데이터베이스를 구축하는 경우 데이터베이스에 주소, 전화 번호 등과 같은 매우 표준적인 자료를 구축합니다. 대신 자신을 반복하고있는 해당 필드 복제하는 장소의 상단에 레스토랑의 데이터베이스를 구축하기를 원한다면 다음, &lt;code&gt;Restaurant&lt;/code&gt; 모델을, 당신이 만들 수있는 &lt;code&gt;Restaurant&lt;/code&gt; 이 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;Place&lt;/code&gt; (레스토랑이 장소 &quot;A는&quot;때문에;에서 사실, 이것을 처리하기 위해 일반적으로 암시 적 일대일 관계를 포함하는 &lt;a href=&quot;#model-inheritance&quot;&gt;상속을&lt;/a&gt; 사용합니다 ).</target>
        </trans-unit>
        <trans-unit id="ac564798e14976b158868774b55c30a2ce8047f9" translate="yes" xml:space="preserve">
          <source>For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog:</source>
          <target state="translated">예를 들어 블로그 목록을 조작하는 경우 각 블로그에서 작성된 항목 수를 판별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48b33e9a548fb4951086a93d4cccbb51cee21337" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;re migrating a user from the &lt;code&gt;legacy_users&lt;/code&gt; database to the &lt;code&gt;new_users&lt;/code&gt; database, you might use these commands:</source>
          <target state="translated">예를 들어 &lt;code&gt;legacy_users&lt;/code&gt; 데이터베이스에서 &lt;code&gt;new_users&lt;/code&gt; 데이터베이스 로 사용자를 마이그레이션하는 경우 다음 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25f618583a6cd0fc97af3000d8f1c63e4d2ec20e" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;ve written an S3 storage backend in &lt;code&gt;myproject.storage.S3Storage&lt;/code&gt; you could use it with:</source>
          <target state="translated">예를 들어 &lt;code&gt;myproject.storage.S3Storage&lt;/code&gt; 에 S3 스토리지 백엔드를 작성한 경우 다음 과 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7dec5e7f20c3fb00b261664622da3f6bfce814b" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is defined as &lt;code&gt;/media/&lt;/code&gt;, you can do this by adding the following snippet to your urls.py:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;/media/&lt;/code&gt; 로 정의 된 경우 urls.py에 다음 스 니펫을 추가하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="573973612596761249845c2b92e7229999296031" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is defined as &lt;code&gt;/static/&lt;/code&gt;, you can do this by adding the following snippet to your urls.py:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;/static/&lt;/code&gt; 으로 정의 된 경우 urls.py에 다음 스 니펫을 추가하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="382da25e234ff543ced0d60c81998fd1b64dec8a" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting has a &amp;lsquo;master&amp;rsquo; database defined, name the fixture &lt;code&gt;mydata.master.json&lt;/code&gt; or &lt;code&gt;mydata.master.json.gz&lt;/code&gt; and the fixture will only be loaded when you specify you want to load data into the &lt;code&gt;master&lt;/code&gt; database.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 설정에 '마스터'데이터베이스가 정의 된 경우, 조명기의 이름을 &lt;code&gt;mydata.master.json&lt;/code&gt; 또는 &lt;code&gt;mydata.master.json.gz&lt;/code&gt; 로 지정하고 &lt;code&gt;master&lt;/code&gt; 데이터베이스에 데이터를로드하도록 지정한 경우에만 조명 기가 로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="b38b053424f30ca9abf3de537773f7fbaf83bc53" translate="yes" xml:space="preserve">
          <source>For example, if your Django app contained a translation string for the text &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt;, like so:</source>
          <target state="translated">예를 들어 Django 앱에 &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt; 합니다 &quot; 라는 텍스트의 번역 문자열이 포함되어있는 경우 , 이렇게 :</target>
        </trans-unit>
        <trans-unit id="ba64113bb54dcbe956d54f2cdb1242079b313974" translate="yes" xml:space="preserve">
          <source>For example, if your custom tags/filters are in a file called &lt;code&gt;poll_extras.py&lt;/code&gt;, your app layout might look like this:</source>
          <target state="translated">예를 들어, 사용자 정의 태그 / 필터가 &lt;code&gt;poll_extras.py&lt;/code&gt; 파일 에 있으면 앱 레이아웃은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3ce9954afa977e8d25528c0d4c5d3e44545946e0" translate="yes" xml:space="preserve">
          <source>For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt;&lt;code&gt;@skipIf&lt;/code&gt;&lt;/a&gt;. Then, the test runner will report that the test wasn&amp;rsquo;t executed and why, instead of failing the test or omitting the test altogether.</source>
          <target state="translated">예를 들어 테스트에 성공하기 위해 특정 선택적 라이브러리가 필요한 경우 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt; &lt;code&gt;@skipIf&lt;/code&gt; 로&lt;/a&gt; 테스트 케이스를 장식 할 수 있습니다 . 그런 다음 테스트 실행자는 테스트가 실패했거나 테스트를 모두 생략하지 않고 테스트가 실행되지 않았다고보고합니다.</target>
        </trans-unit>
        <trans-unit id="d89c6f1f9c3485c512a5c12dbc88ece425a8d0a9" translate="yes" xml:space="preserve">
          <source>For example, in a request to &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="5c01bd511b40c972c539e07cb7adec6680d41f2c" translate="yes" xml:space="preserve">
          <source>For example, in our &lt;code&gt;HandField&lt;/code&gt; class we&amp;rsquo;re always forcibly setting max_length in &lt;code&gt;__init__()&lt;/code&gt;. The &lt;code&gt;deconstruct()&lt;/code&gt; method on the base &lt;code&gt;Field&lt;/code&gt; class will see this and try to return it in the keyword arguments; thus, we can drop it from the keyword arguments for readability:</source>
          <target state="translated">예를 들어 &lt;code&gt;HandField&lt;/code&gt; 클래스에서는 항상 &lt;code&gt;__init__()&lt;/code&gt; 에서 max_length를 강제 설정합니다 . 기본 &lt;code&gt;Field&lt;/code&gt; 클래스 의 &lt;code&gt;deconstruct()&lt;/code&gt; 메소드 는 이것을보고 키워드 인수로 반환하려고 시도합니다. 따라서 가독성을 위해 키워드 인수에서이를 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3982a7f971cb56decef776cf27f6c9f258416465" translate="yes" xml:space="preserve">
          <source>For example, in the default case, you might see:</source>
          <target state="translated">예를 들어, 기본 경우 다음이 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be8dcf1e5a2d50703a2c513aadf6082398124606" translate="yes" xml:space="preserve">
          <source>For example, in the filter &lt;code&gt;{{ var|foo:&quot;bar&quot; }}&lt;/code&gt;, the filter &lt;code&gt;foo&lt;/code&gt; would be passed the variable &lt;code&gt;var&lt;/code&gt; and the argument &lt;code&gt;&quot;bar&quot;&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;{{ var|foo:&quot;bar&quot; }}&lt;/code&gt; 필터에서 필터 &lt;code&gt;foo&lt;/code&gt; 에는 변수 &lt;code&gt;var&lt;/code&gt; 및 인수 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; 가 전달 됩니다.</target>
        </trans-unit>
        <trans-unit id="6bfaf4d814db0b662c240dee53377b51532d7b2c" translate="yes" xml:space="preserve">
          <source>For example, in the generic class-based views there is a mixin called &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; whose primary purpose is to define the method &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt;. When combined with the behavior of the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; base class, the result is a &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; class that will dispatch requests to the appropriate matching methods (a behavior defined in the &lt;code&gt;View&lt;/code&gt; base class), and that has a &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; method that uses a &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; attribute to return a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; object (a behavior defined in the &lt;code&gt;TemplateResponseMixin&lt;/code&gt;).</source>
          <target state="translated">예를 들어, 일반 클래스 기반 뷰에는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 메소드를 정의하는 것이 주 목적인 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 이라는 믹스 인이 있습니다. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 기본 클래스 의 동작과 결합되면 결과는 적절한 일치하는 메소드 ( &lt;code&gt;View&lt;/code&gt; 기본 클래스에 정의 된 동작)로 요청을 발송 하고 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 속성 을 사용하는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 메소드 가있는 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; 클래스입니다. 돌아갑니다 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 의&lt;/a&gt; 객체 (정의 행동 &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 을 ).</target>
        </trans-unit>
        <trans-unit id="bee7838323c7513cb8f79ec775b4a84e3faed67e" translate="yes" xml:space="preserve">
          <source>For example, it could be used for a tagging system like so:</source>
          <target state="translated">예를 들어, 태그 시스템에 다음과 같이 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f017e4860d5bdcebab0f0fb119e76168400ff70" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s add a natural key to the &lt;code&gt;Book&lt;/code&gt; model from the example above:</source>
          <target state="translated">예를 들어, 위의 예에서 &lt;code&gt;Book&lt;/code&gt; 모델에 자연스러운 키를 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="981e0acc47eeefb4090a6114b26b34b9a8900b87" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s consider the following model:</source>
          <target state="translated">예를 들어, 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="3f7ab8aab4e41f4721a9deee7d51f3b5b448fb6c" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a &lt;code&gt;SouthTexasCity&lt;/code&gt; model (from the &lt;a href=&quot;https://github.com/django/django/blob/master/tests/gis_tests/distapp/models.py&quot;&gt;GeoDjango distance tests&lt;/a&gt; ) on a &lt;em&gt;projected&lt;/em&gt; coordinate system valid for cities in southern Texas:</source>
          <target state="translated">예를 들어, 텍사스 남부 도시에 유효한 &lt;em&gt;투영&lt;/em&gt; 좌표계 에 대한 &lt;code&gt;SouthTexasCity&lt;/code&gt; 모델 ( &lt;a href=&quot;https://github.com/django/django/blob/master/tests/gis_tests/distapp/models.py&quot;&gt;GeoDjango 거리 테스트&lt;/a&gt; ) 이 있다고 가정 해 보겠습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6632db7f2d16495f99973c14b8ca361212c07908" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s write a filter that emphasizes the first character of a string:</source>
          <target state="translated">예를 들어 문자열의 첫 문자를 강조하는 필터를 작성해 봅시다.</target>
        </trans-unit>
        <trans-unit id="fd27f1d7a84788999d8f9705306d16767267018a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s write a full implementation of our template tag, &lt;code&gt;{% current_time %}&lt;/code&gt;, that displays the current date/time, formatted according to a parameter given in the tag, in &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; syntax. It&amp;rsquo;s a good idea to decide the tag syntax before anything else. In our case, let&amp;rsquo;s say the tag should be used like this:</source>
          <target state="translated">예를 들어, 태그에 지정된 매개 변수에 따라 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 구문으로 서식이 지정된 현재 날짜 / 시간을 표시하는 템플릿 태그 &lt;code&gt;{% current_time %}&lt;/code&gt; 의 전체 구현을 작성해 봅시다 . 태그 구문을 다른 항목보다 먼저 결정하는 것이 좋습니다. 이 경우 태그를 다음과 같이 사용해야한다고 가정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="faa7baeec61827390806b1f3bb4cccabe076d811" translate="yes" xml:space="preserve">
          <source>For example, notice the behavior when querying across a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 에서&lt;/a&gt; 쿼리 할 때의 동작에 주목하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac6f5569362b9037e98acf2f0c9ebe5969f083c9" translate="yes" xml:space="preserve">
          <source>For example, on Debian-based distributions that package SpatiaLite 4.2+, try to install the &lt;code&gt;libsqlite3-mod-spatialite&lt;/code&gt; package. For older releases install &lt;code&gt;spatialite-bin&lt;/code&gt;.</source>
          <target state="translated">예를 들어, SpatiaLite 4.2+를 패키지화하는 데비안 기반 배포판에서 &lt;code&gt;libsqlite3-mod-spatialite&lt;/code&gt; 패키지 를 설치하십시오 . 이전 릴리스의 경우 &lt;code&gt;spatialite-bin&lt;/code&gt; 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="cfd8c872d8f2916e92e073391899fa52d0e6b5c4" translate="yes" xml:space="preserve">
          <source>For example, repeatedly getting a certain index in a queryset object will query the database each time:</source>
          <target state="translated">예를 들어 queryset 객체에서 특정 인덱스를 반복적으로 가져 오면 매번 데이터베이스를 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="e8ada1817d3c3e6aea32546f2fc1f0f5b452cf40" translate="yes" xml:space="preserve">
          <source>For example, say you have a custom manager method that touches the database &amp;ndash; &lt;code&gt;User.objects.create_user()&lt;/code&gt;. Because &lt;code&gt;create_user()&lt;/code&gt; is a manager method, not a &lt;code&gt;QuerySet&lt;/code&gt; method, you can&amp;rsquo;t do &lt;code&gt;User.objects.using('new_users').create_user()&lt;/code&gt;. (The &lt;code&gt;create_user()&lt;/code&gt; method is only available on &lt;code&gt;User.objects&lt;/code&gt;, the manager, not on &lt;code&gt;QuerySet&lt;/code&gt; objects derived from the manager.) The solution is to use &lt;code&gt;db_manager()&lt;/code&gt;, like this:</source>
          <target state="translated">예를 들어, 데이터베이스 &lt;code&gt;User.objects.create_user()&lt;/code&gt; 를 터치하는 사용자 정의 관리자 메소드가 있다고 가정하십시오 . 때문에 &lt;code&gt;create_user()&lt;/code&gt; 관리자 방법이 아닌 것입니다 &lt;code&gt;QuerySet&lt;/code&gt; 방법, 당신이 할 수없는 &lt;code&gt;User.objects.using('new_users').create_user()&lt;/code&gt; . 합니다 ( &lt;code&gt;create_user()&lt;/code&gt; 메소드에서만 사용할 &lt;code&gt;User.objects&lt;/code&gt; , 매니저, 안 &lt;code&gt;QuerySet&lt;/code&gt; . 매니저로부터 유도 된 개체) 용액을 사용이다 &lt;code&gt;db_manager()&lt;/code&gt; 같이 :</target>
        </trans-unit>
        <trans-unit id="b12427337defaf610be79af10716c83a674c8723" translate="yes" xml:space="preserve">
          <source>For example, say you&amp;rsquo;re writing an inclusion tag that will always be used in a context that contains &lt;code&gt;home_link&lt;/code&gt; and &lt;code&gt;home_title&lt;/code&gt; variables that point back to the main page. Here&amp;rsquo;s what the Python function would look like:</source>
          <target state="translated">예를 들어, 메인 페이지를 가리키는 &lt;code&gt;home_link&lt;/code&gt; 및 &lt;code&gt;home_title&lt;/code&gt; 변수를 포함하는 컨텍스트에서 항상 사용되는 포함 태그를 작성한다고 가정 하십시오. 파이썬 함수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="837db34e268679acb26d08abc40f8ec66566edea" translate="yes" xml:space="preserve">
          <source>For example, say your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'/home/media'&lt;/code&gt;, and &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'photos/%Y/%m/%d'&lt;/code&gt;. The &lt;code&gt;'%Y/%m/%d'&lt;/code&gt; part of &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting; &lt;code&gt;'%Y'&lt;/code&gt; is the four-digit year, &lt;code&gt;'%m'&lt;/code&gt; is the two-digit month and &lt;code&gt;'%d'&lt;/code&gt; is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory &lt;code&gt;/home/media/photos/2007/01/15&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;'/home/media'&lt;/code&gt; 로 설정되어 있고 &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;'photos/%Y/%m/%d'&lt;/code&gt; 로 설정되어 있다고 가정하십시오 . &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'%Y/%m/%d'&lt;/code&gt; 부분 은 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 형식입니다. &lt;code&gt;'%Y'&lt;/code&gt; 는 네 자리 연도이고 &lt;code&gt;'%m'&lt;/code&gt; 은 두 자리 월이며 &lt;code&gt;'%d'&lt;/code&gt; 는 두 자리 일입니다. 2007 년 1 월 15 일에 파일을 업로드하면 &lt;code&gt;/home/media/photos/2007/01/15&lt;/code&gt; 디렉토리에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="efd483a59754f0aaac0b780515e3d32175b4ce1a" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a filter that adds the string &lt;code&gt;xx&lt;/code&gt; to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with &lt;code&gt;is_safe&lt;/code&gt;:</source>
          <target state="translated">예를 들어 입력 끝에 문자열 &lt;code&gt;xx&lt;/code&gt; 를 추가하는 필터가 있다고 가정합니다 . 이것은 결과에 위험한 HTML 문자를 도입하지 않기 때문에 (이미 존재하는 것을 제외하고) 필터를 &lt;code&gt;is_safe&lt;/code&gt; 로 표시해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f0b46b2ac3f51513f40f2ba0e075ad6daaca6f59" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a view, &lt;code&gt;app_views.client&lt;/code&gt;, whose URLconf takes a client ID (here, &lt;code&gt;client()&lt;/code&gt; is a method inside the views file &lt;code&gt;app_views.py&lt;/code&gt;). The URLconf line might look like this:</source>
          <target state="translated">예를 들어, URLconf가 클라이언트 ID를 취하는 보기 &lt;code&gt;app_views.client&lt;/code&gt; 가 있다고 가정합니다 (여기서 &lt;code&gt;client()&lt;/code&gt; 는보기 파일 &lt;code&gt;app_views.py&lt;/code&gt; 내의 메소드 ). URLconf 줄은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="75689940cb99e5a3c78be96bc95b910bb9da78b2" translate="yes" xml:space="preserve">
          <source>For example, suppose you have these models:</source>
          <target state="translated">예를 들어, 다음 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="adb68cda65641acffb5513c00ebc8792adf26e87" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to add a method to the &lt;code&gt;Person&lt;/code&gt; model. You can do it like this:</source>
          <target state="translated">예를 들어 &lt;code&gt;Person&lt;/code&gt; 모델에 메소드를 추가한다고 가정하십시오 . 다음과 같이 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="66b36bd8f3d737b326cd36b2698766934c40eb1b" translate="yes" xml:space="preserve">
          <source>For example, take the following form:</source>
          <target state="translated">예를 들어 다음 형식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4deafec385d3e444a3bb56c6350f690c558fa83f" translate="yes" xml:space="preserve">
          <source>For example, taking advantage of GitHub&amp;rsquo;s feature to expose repositories as zip files, you can use a URL like:</source>
          <target state="translated">예를 들어 리포지토리를 zip 파일로 표시하는 GitHub의 기능을 활용하면 다음과 같은 URL을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cee46bd342b10491add882e66c9a5b078ff05c4" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../intro/tutorial02&quot;&gt;tutorial&lt;/a&gt; has this line:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../intro/tutorial02&quot;&gt;튜토리얼&lt;/a&gt; 에는 다음 줄이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b4e2e42e3429923389b83d267729df072153c91" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app only prompts to create a superuser when &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt; 앱 은 &lt;code&gt;interactive&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 일 때만 수퍼 유저를 만들라는 메시지를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="cd52e2391a1ffb005e89afe37be49919c4cc5f22" translate="yes" xml:space="preserve">
          <source>For example, the filesystem loader may receive &lt;code&gt;'index.html'&lt;/code&gt; as a &lt;code&gt;template_name&lt;/code&gt; argument. This method would yield origins for the full path of &lt;code&gt;index.html&lt;/code&gt; as it appears in each template directory the loader looks at.</source>
          <target state="translated">예를 들어, 파일 시스템 로더는 &lt;code&gt;template_name&lt;/code&gt; 인수 로 &lt;code&gt;'index.html'&lt;/code&gt; 을 수신 할 수 있습니다 . 이 메소드는 로더가 보는 각 템플리트 디렉토리에 나타나는 &lt;code&gt;index.html&lt;/code&gt; 의 전체 경로에 대한 원점을 산출 합니다.</target>
        </trans-unit>
        <trans-unit id="c18b9843bc411dfbfe818e01049b0042cdba398b" translate="yes" xml:space="preserve">
          <source>For example, the following code tests that an &lt;code&gt;EmailField&lt;/code&gt; accepts &lt;code&gt;a@a.com&lt;/code&gt; as a valid email address, but rejects &lt;code&gt;aaa&lt;/code&gt; with a reasonable error message:</source>
          <target state="translated">예를 들어 다음 코드는 &lt;code&gt;EmailField&lt;/code&gt; 가 &lt;code&gt;a@a.com&lt;/code&gt; 을 유효한 전자 메일 주소로 허용 하지만 합리적인 오류 메시지로 &lt;code&gt;aaa&lt;/code&gt; 를 거부 하는지 테스트 합니다.</target>
        </trans-unit>
        <trans-unit id="f1cda75052ecec1422a69248d4438e2fd36432d8" translate="yes" xml:space="preserve">
          <source>For example, the following code will store uploaded files under &lt;code&gt;/media/photos&lt;/code&gt; regardless of what your &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; setting is:</source>
          <target state="translated">예를 들어 다음 코드는 &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 설정에 관계없이 업로드 된 파일을 &lt;code&gt;/media/photos&lt;/code&gt; 에 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="1575f645e5e256b758956ea48109588be928308b" translate="yes" xml:space="preserve">
          <source>For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened:</source>
          <target state="translated">예를 들어 다음 코드는 서로 다른 두 명의 수신자에게 두 개의 서로 다른 메시지를 보냅니다. 그러나 메일 서버에 대한 연결은 하나만 열립니다.</target>
        </trans-unit>
        <trans-unit id="0ea55980f6c3f2fe0c5f5dd2dbe9c6bb45a52f5d" translate="yes" xml:space="preserve">
          <source>For example, the following command nearly reproduces the &lt;code&gt;WorldBorder&lt;/code&gt; model and mapping dictionary created above, automatically:</source>
          <target state="translated">예를 들어 다음 명령은 위에서 만든 &lt;code&gt;WorldBorder&lt;/code&gt; 모델과 매핑 사전을 자동으로 거의 재현합니다 .</target>
        </trans-unit>
        <trans-unit id="0a4537dba183f7d976e59f5b36b50b496ec563e0" translate="yes" xml:space="preserve">
          <source>For example, the following model has &lt;em&gt;two&lt;/em&gt;&lt;code&gt;Manager&lt;/code&gt;s &amp;ndash; one that returns all objects, and one that returns only the books by Roald Dahl:</source>
          <target state="translated">예를 들어 다음 모델에는 &lt;em&gt;두 개의 &lt;/em&gt; &lt;code&gt;Manager&lt;/code&gt; 가 있습니다. 하나는 모든 개체를 반환하고 다른 하나는 Roald Dahl의 장부 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3f437de90816066d29eda0f176414d20e8975eda" translate="yes" xml:space="preserve">
          <source>For example, the following query would exclude blogs that contain &lt;em&gt;both&lt;/em&gt; entries with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline &lt;em&gt;and&lt;/em&gt; entries published in 2008:</source>
          <target state="translated">예를 들어, 다음 쿼리는 포함 된 블로그 제외 것 &lt;em&gt;모두&lt;/em&gt; 가있는 항목 &lt;em&gt;&quot;레논&quot;을&lt;/em&gt; 제목에 &lt;em&gt;와&lt;/em&gt; 2008 년에 출판 항목 :</target>
        </trans-unit>
        <trans-unit id="b5b1287469ae2ba4c652334e4068fe83b853d8c8" translate="yes" xml:space="preserve">
          <source>For example, the following router would direct all cache read operations to &lt;code&gt;cache_replica&lt;/code&gt;, and all write operations to &lt;code&gt;cache_primary&lt;/code&gt;. The cache table will only be synchronized onto &lt;code&gt;cache_primary&lt;/code&gt;:</source>
          <target state="translated">예를 들어 다음 라우터는 모든 캐시 읽기 작업을 &lt;code&gt;cache_replica&lt;/code&gt; 로 , 모든 쓰기 작업을 &lt;code&gt;cache_primary&lt;/code&gt; 로 보냅니다 . 캐시 테이블은 &lt;code&gt;cache_primary&lt;/code&gt; 에만 동기화 됩니다 .</target>
        </trans-unit>
        <trans-unit id="79e1b1c393dd6f3b661e294aa780e92c0b3536fe" translate="yes" xml:space="preserve">
          <source>For example, the following template would load all the tags and filters registered in &lt;code&gt;somelibrary&lt;/code&gt; and &lt;code&gt;otherlibrary&lt;/code&gt; located in package &lt;code&gt;package&lt;/code&gt;:</source>
          <target state="translated">예를 들어 다음 템플릿은 패키지 &lt;code&gt;package&lt;/code&gt; 에있는 &lt;code&gt;somelibrary&lt;/code&gt; 및 &lt;code&gt;otherlibrary&lt;/code&gt; 에 등록 된 모든 태그와 필터를로드 합니다 .</target>
        </trans-unit>
        <trans-unit id="e254385271ce9642568030d0572bce1569f1c2bf" translate="yes" xml:space="preserve">
          <source>For example, the following test will not be executed if the database supports transactions (e.g., it would &lt;em&gt;not&lt;/em&gt; run under PostgreSQL, but it would under MySQL with MyISAM tables):</source>
          <target state="translated">예를 들어, 데이터베이스가 트랜잭션을 지원하면 (예 : PostgreSQL에서는 실행 &lt;em&gt;되지&lt;/em&gt; 않지만 MyISAM 테이블이있는 MySQL 에서는) 다음 테스트가 실행 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="238a0a8d4bd6a5c30b094db9458da443a0c092e2" translate="yes" xml:space="preserve">
          <source>For example, the following test will only be executed if the database supports transactions (e.g., it would run under PostgreSQL, but &lt;em&gt;not&lt;/em&gt; under MySQL with MyISAM tables):</source>
          <target state="translated">예를 들어, 다음 테스트는 데이터베이스가 트랜잭션을 지원하는 경우에만 실행됩니다 (예 : MygreM 테이블이있는 MySQL 에서는 실행 &lt;em&gt;되지&lt;/em&gt; 않지만 PostgreSQL에서는 실행 됨 ).</target>
        </trans-unit>
        <trans-unit id="cf6d07ae81bf27d1e709cd3bef81b142bddcc252" translate="yes" xml:space="preserve">
          <source>For example, the following two statements are equivalent:</source>
          <target state="translated">예를 들어, 다음 두 문장은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="93dca967df9ba0db777acab0729765113692924a" translate="yes" xml:space="preserve">
          <source>For example, the following view returns a &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; with a template and a context containing a queryset:</source>
          <target state="translated">예를 들어 다음보기는 &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 과 쿼리 집합이 포함 된 컨텍스트가 포함 된 TemplateResponse 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c47df139280495e8df269df3e1b4e74bf5801cba" translate="yes" xml:space="preserve">
          <source>For example, the static definition for our Calendar Widget could also be defined in a dynamic fashion:</source>
          <target state="translated">예를 들어, 캘린더 위젯에 대한 정적 정의는 동적 방식으로 정의 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b0b8d26aca41acf8d85f36e90f98e284157926f" translate="yes" xml:space="preserve">
          <source>For example, the warp function can be used for aggregating a raster to the double of its original pixel scale:</source>
          <target state="translated">예를 들어, 워프 함수는 래스터를 원래 픽셀 스케일의 두 배로 집계하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c0b7b65cb4d16a3499472ddb5c49cea05342068" translate="yes" xml:space="preserve">
          <source>For example, these two URLconf sets are functionally identical:</source>
          <target state="translated">예를 들어,이 두 URLconf 세트는 기능적으로 동일합니다.</target>
        </trans-unit>
        <trans-unit id="198ddfca24c57bcb8381f0fb15818ed1720ccca5" translate="yes" xml:space="preserve">
          <source>For example, this &lt;code&gt;Q&lt;/code&gt; object encapsulates a single &lt;code&gt;LIKE&lt;/code&gt; query:</source>
          <target state="translated">예를 &lt;code&gt;LIKE&lt;/code&gt; &lt;code&gt;Q&lt;/code&gt; 객체는 단일 LIKE 쿼리를 캡슐화 합니다.</target>
        </trans-unit>
        <trans-unit id="0057a8ee0bb64c68400ed8799f51b27a995f23f2" translate="yes" xml:space="preserve">
          <source>For example, this command:</source>
          <target state="translated">예를 들어 다음 명령은</target>
        </trans-unit>
        <trans-unit id="89ae811713dbf8bd975a1e4c77bf78d1767f40c5" translate="yes" xml:space="preserve">
          <source>For example, this custom &lt;code&gt;Manager&lt;/code&gt; offers a method &lt;code&gt;with_counts()&lt;/code&gt;, which returns a list of all &lt;code&gt;OpinionPoll&lt;/code&gt; objects, each with an extra &lt;code&gt;num_responses&lt;/code&gt; attribute that is the result of an aggregate query:</source>
          <target state="translated">예를 &lt;code&gt;with_counts()&lt;/code&gt; 사용자 정의 &lt;code&gt;Manager&lt;/code&gt; 는 with_counts () 메소드를 제공합니다.이 메소드 는 모든 &lt;code&gt;OpinionPoll&lt;/code&gt; 오브젝트 의 목록을 리턴 합니다. 각 오브젝트 에는 집계 쿼리의 결과 인 추가 &lt;code&gt;num_responses&lt;/code&gt; 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f22f2bd76f33b6561d7fa95bb448809cc02b2670" translate="yes" xml:space="preserve">
          <source>For example, this deletes all &lt;code&gt;Entry&lt;/code&gt; objects with a &lt;code&gt;pub_date&lt;/code&gt; year of 2005:</source>
          <target state="translated">예를 들어 &lt;code&gt;pub_date&lt;/code&gt; 연도가 2005 인 모든 &lt;code&gt;Entry&lt;/code&gt; 객체를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="ffac3d5fcc4ac7fdba32bd4d758cba661acc1241" translate="yes" xml:space="preserve">
          <source>For example, this model has a few custom methods:</source>
          <target state="translated">예를 들어이 모델에는 몇 가지 사용자 지정 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b60ea9d897ff291cb7e66bcae7ca48541f5d15f3" translate="yes" xml:space="preserve">
          <source>For example, this returns the first 5 objects (&lt;code&gt;LIMIT 5&lt;/code&gt;):</source>
          <target state="translated">예를 들어, 처음 5 개의 객체 ( &lt;code&gt;LIMIT 5&lt;/code&gt; )를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="aa80cca3b9f5bf179795210ec6b98d06892e51ee" translate="yes" xml:space="preserve">
          <source>For example, this statement yields a single &lt;code&gt;Q&lt;/code&gt; object that represents the &amp;ldquo;OR&amp;rdquo; of two &lt;code&gt;&quot;question__startswith&quot;&lt;/code&gt; queries:</source>
          <target state="translated">예를 들어,이 명령문은 두 개의 &lt;code&gt;&quot;question__startswith&quot;&lt;/code&gt; 쿼리 의 &quot;OR&quot;을 나타내는 단일 &lt;code&gt;Q&lt;/code&gt; 오브젝트를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="4c1552c9853a63c8045ed1aecebca09d2f2bf272" translate="yes" xml:space="preserve">
          <source>For example, this template would render as &lt;code&gt;'hello'&lt;/code&gt;:</source>
          <target state="translated">예를 &lt;code&gt;'hello'&lt;/code&gt; 템플릿은 'hello' 로 렌더링됩니다 .</target>
        </trans-unit>
        <trans-unit id="9f1954b9d586a8adf777426824138b87bc609b37" translate="yes" xml:space="preserve">
          <source>For example, this use of &lt;code&gt;extra()&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &lt;code&gt;extra()&lt;/code&gt; 사용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="88fdaec3ea4b5e8da4ebc2790122624ba0f7e20c" translate="yes" xml:space="preserve">
          <source>For example, this would look for an app template in the given directory when creating the &lt;code&gt;myapp&lt;/code&gt; app:</source>
          <target state="translated">예를 들어, &lt;code&gt;myapp&lt;/code&gt; 앱을 만들 때 지정된 디렉토리에서 앱 템플릿을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="730023e6712c636f1e717e67432aca53f7486feb" translate="yes" xml:space="preserve">
          <source>For example, to allow all users to log in regardless of &amp;ldquo;active&amp;rdquo; status:</source>
          <target state="translated">예를 들어, &quot;활성&quot;상태에 관계없이 모든 사용자가 로그인 할 수있게하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="812ff44f9b0e37743f53c2bda9e76d7b8d794761" translate="yes" xml:space="preserve">
          <source>For example, to annotate each movie with the average rating for the movies by the same studio in the same genre and release year:</source>
          <target state="translated">예를 들어, 동일한 장르와 출시 연도에 동일한 스튜디오에서 영화의 평균 등급으로 각 영화에 주석을 달려면 :</target>
        </trans-unit>
        <trans-unit id="23c6e960f3c8f0a5c0df18b368143eaf3d0cabb1" translate="yes" xml:space="preserve">
          <source>For example, to annotate each post with the email address of the author of the newest comment on that post:</source>
          <target state="translated">예를 들어, 각 게시물에 해당 게시물에 대한 최신 의견 작성자의 이메일 주소를 주석으로 추가하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="279e76a8911e6175d2b1e0fca7ce722f066e2ec0" translate="yes" xml:space="preserve">
          <source>For example, to annotate each post with whether or not it has a comment from within the last day:</source>
          <target state="translated">예를 들어, 각 게시물에 마지막 날의 댓글이 있는지 여부에 주석을 달려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d8c72125990ce7483e08fa3c125e87d8e1d668ef" translate="yes" xml:space="preserve">
          <source>For example, to attach &lt;code&gt;request.user&lt;/code&gt; to each changed formset model instance:</source>
          <target state="translated">예를 들어, 변경된 각 formset 모델 인스턴스 에 &lt;code&gt;request.user&lt;/code&gt; 를 첨부하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="d48e4fdd0eb7ee0386a0d07a5b840f298a471364" translate="yes" xml:space="preserve">
          <source>For example, to create an Atom 1.0 feed and print it to standard output:</source>
          <target state="translated">예를 들어, Atom 1.0 피드를 작성하여 표준 출력으로 인쇄하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="fcfc47c401527a89154f8bea99232797453a3cb4" translate="yes" xml:space="preserve">
          <source>For example, to delete all the entries in a particular blog:</source>
          <target state="translated">예를 들어 특정 블로그의 모든 항목을 삭제하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="dd56ffbb096671a8ae0f457750a49dd814c8b644" translate="yes" xml:space="preserve">
          <source>For example, to find a list of all blog entries that have had more comments than pingbacks, we construct an &lt;code&gt;F()&lt;/code&gt; object to reference the pingback count, and use that &lt;code&gt;F()&lt;/code&gt; object in the query:</source>
          <target state="translated">예를 들어, 우리는 건설, 핑백보다 더 많은 코멘트를 한 모든 블로그 항목의 목록을 찾을 수 &lt;code&gt;F()&lt;/code&gt; 핑백 수 및 사용을 참조하는 객체를 그 &lt;code&gt;F()&lt;/code&gt; 쿼리에 개체 :</target>
        </trans-unit>
        <trans-unit id="8a79fb62038f478d20c970117065d25594b022ff" translate="yes" xml:space="preserve">
          <source>For example, to find restaurants that have vegetarian pizzas with &lt;code&gt;'mozzarella'&lt;/code&gt; in the name:</source>
          <target state="translated">예를 들어, 이름에 &lt;code&gt;'mozzarella'&lt;/code&gt; 가있는 채식 피자가있는 식당을 찾으 려면</target>
        </trans-unit>
        <trans-unit id="fa7ff9eaf20a9e7fd98ea20afd6e746161bd4331" translate="yes" xml:space="preserve">
          <source>For example, to find the price range of books offered in each store, you could use the annotation:</source>
          <target state="translated">예를 들어, 각 상점에서 제공되는 책의 가격 범위를 찾으려면 주석을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="767eb3d833b80709509cdaba33aea5c3576ef163" translate="yes" xml:space="preserve">
          <source>For example, to generate a list of books that have more than one author, you can issue the query:</source>
          <target state="translated">예를 들어, 저자가 둘 이상인 책 목록을 생성하려면 다음과 같이 쿼리를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="da85008b78879c5f2b184ab4252fe398f7632ac5" translate="yes" xml:space="preserve">
          <source>For example, to get a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of blog entries from the year 2006, use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; like so:</source>
          <target state="translated">예를 들어 2006 년부터 블로그 항목 의 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 가져 오려면 다음 과 같이 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2665b2f708b263f2e02ca156cd6a0c538de8c726" translate="yes" xml:space="preserve">
          <source>For example, to get a list of all additions done through the admin:</source>
          <target state="translated">예를 들어, 관리자를 통해 수행 된 모든 추가 목록을 가져 오려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b779ba41bdf093e3d6f0563f98ce89940d5ed6a9" translate="yes" xml:space="preserve">
          <source>For example, to order a &lt;code&gt;QuerySet&lt;/code&gt; of books by the number of authors that have contributed to the book, you could use the following query:</source>
          <target state="translated">예를 들어, 책에 기고 한 저자 수에 따라 책 의 &lt;code&gt;QuerySet&lt;/code&gt; 을 주문 하려면 다음 쿼리를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4432ed9491c6479c00d2785b98e20507109078c5" translate="yes" xml:space="preserve">
          <source>For example, to order by a &lt;code&gt;pub_date&lt;/code&gt; field ascending, use this:</source>
          <target state="translated">예를 들어, &lt;code&gt;pub_date&lt;/code&gt; 필드 오름차순으로 주문 하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e6b6b30b3df788764cc7082971ff432b4a48a992" translate="yes" xml:space="preserve">
          <source>For example, to prevent one or more columns from being sortable:</source>
          <target state="translated">예를 들어, 하나 이상의 열을 정렬 할 수 없도록하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="502100f7079ee748e529025258845a1b3a4df3cc" translate="yes" xml:space="preserve">
          <source>For example, to save an object to the &lt;code&gt;legacy_users&lt;/code&gt; database, you&amp;rsquo;d use this:</source>
          <target state="translated">예를 들어 &lt;code&gt;legacy_users&lt;/code&gt; 데이터베이스에 객체를 저장 하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2acf27ec57eb17ce1701c1357eaded68de2d5ad5" translate="yes" xml:space="preserve">
          <source>For example, to search by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;, you could use:</source>
          <target state="translated">예를 들어 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;age&lt;/code&gt; 로 검색 하려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddbd8cfaa0374b8b12582f667e5c4260e74a59ba" translate="yes" xml:space="preserve">
          <source>For example, to sort companies that haven&amp;rsquo;t been contacted (&lt;code&gt;last_contacted&lt;/code&gt; is null) after companies that have been contacted:</source>
          <target state="translated">예를 들어 연락 한 회사 에 연락하지 않은 회사를 정렬하려면 ( &lt;code&gt;last_contacted&lt;/code&gt; 가 null 임) :</target>
        </trans-unit>
        <trans-unit id="e7831aac7ce3cb060fd800aebb9b85cee2d01e5e" translate="yes" xml:space="preserve">
          <source>For example, to store numbers up to &lt;code&gt;999&lt;/code&gt; with a resolution of 2 decimal places, you&amp;rsquo;d use:</source>
          <target state="translated">예를 들어, 소수점 이하 자릿수 2 자리로 숫자를 &lt;code&gt;999&lt;/code&gt; 까지 저장 하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ac20e728f2f0f25bbef7107d0e2e92c0ef03c159" translate="yes" xml:space="preserve">
          <source>For example, to test that an &lt;code&gt;update()&lt;/code&gt; call resulted in the expected update, you could write a test similar to this:</source>
          <target state="translated">예를 들어, &lt;code&gt;update()&lt;/code&gt; 호출로 인해 예상되는 업데이트가 발생했는지 테스트하기 위해 다음과 유사한 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0197611ee48c7b267a7d6568cecc45562e3a8bb" translate="yes" xml:space="preserve">
          <source>For example, to translate the help text of the &lt;em&gt;name&lt;/em&gt; field in the following model, do the following:</source>
          <target state="translated">예를 들어, 다음 모델에서 &lt;em&gt;이름&lt;/em&gt; 필드 의 도움말 텍스트를 번역 하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="54c4b8ee2f7b75c7d52fae5c72cbcf7c30ccfdc3" translate="yes" xml:space="preserve">
          <source>For example, to turn comments off for all blog entries published in 2010, you could do this:</source>
          <target state="translated">예를 들어 2010 년에 게시 된 모든 블로그 항목에 대한 주석을 해제하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="f0b380f65a8622ee9c808ca11e22ef9b611130ca" translate="yes" xml:space="preserve">
          <source>For example, using the above &lt;code&gt;Place&lt;/code&gt; class again, let&amp;rsquo;s create another subclass with a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어 위의 &lt;code&gt;Place&lt;/code&gt; 클래스를 다시 사용하여 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 를&lt;/a&gt; 사용하여 다른 하위 클래스를 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="72f9b449e9e58bbd051ef1654ab12abf83f7812b" translate="yes" xml:space="preserve">
          <source>For example, we can ask for all publishers, annotated with their respective total book stock counters (note how we use &lt;code&gt;'book'&lt;/code&gt; to specify the &lt;code&gt;Publisher&lt;/code&gt; -&amp;gt; &lt;code&gt;Book&lt;/code&gt; reverse foreign key hop):</source>
          <target state="translated">예를 들어, 우리는 각각의 총 장부 재고 카운터로 주석이 달린 모든 출판사를 요청할 수 있습니다 ( &lt;code&gt;'book'&lt;/code&gt; 을 사용하여 &lt;code&gt;Publisher&lt;/code&gt; -&amp;gt; &lt;code&gt;Book&lt;/code&gt; 역 외래 키 홉 지정 방법 참고 ).</target>
        </trans-unit>
        <trans-unit id="eea4002354c2c1b943b967909d300e907d4041a2" translate="yes" xml:space="preserve">
          <source>For example, we can use &lt;code&gt;self&lt;/code&gt; to flash a message to the user informing her that the action was successful:</source>
          <target state="translated">예를 들어, &lt;code&gt;self&lt;/code&gt; 를 사용 하여 사용자에게 조치가 성공했음을 알리는 메시지를 플래시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dab03fdfe322eab9059b2f86a4724cd280a2574b" translate="yes" xml:space="preserve">
          <source>For example, we can use &lt;code&gt;self&lt;/code&gt; to flash a message to the user informing them that the action was successful:</source>
          <target state="translated">For example, we can use &lt;code&gt;self&lt;/code&gt; to flash a message to the user informing them that the action was successful:</target>
        </trans-unit>
        <trans-unit id="1acd4d7ad1ed66dba1c0cefd87c20a2d7472d4db" translate="yes" xml:space="preserve">
          <source>For example, we could look up the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델 의 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a8b1692e49384722e8905fb2cbb4fa05d20ef09" translate="yes" xml:space="preserve">
          <source>For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given day displays the day and month. Different locales have different formats. For example, U.S. English would say &amp;ldquo;January 1,&amp;rdquo; whereas Spanish might say &amp;ldquo;1 Enero.&amp;rdquo;</source>
          <target state="translated">예를 들어 Django 관리자 변경 목록 페이지를 날짜 드릴 다운으로 필터링하면 특정 요일의 헤더에 요일과 월이 표시됩니다. 로케일마다 형식이 다릅니다. 예를 들어 미국 영어는 &quot;1 월 1 일&quot;이고 스페인어는 &quot;1 Enero&quot;라고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8dc18b9983c5e73e9a4d6fb5ebe694cc177e142" translate="yes" xml:space="preserve">
          <source>For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given month displays the month and the year. Different locales have different formats. For example, U.S. English would say &amp;ldquo;January 2006,&amp;rdquo; whereas another locale might say &amp;ldquo;2006/January.&amp;rdquo;</source>
          <target state="translated">예를 들어 Django 관리자 변경 목록 페이지를 날짜 드릴 다운으로 필터링하면 주어진 달의 헤더에 월과 연도가 표시됩니다. 로케일마다 형식이 다릅니다. 예를 들어 미국 영어는 &quot;2006 년 1 월&quot;이라고 말하고 다른 로케일은 &quot;2006/1 월&quot;이라고 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e328d173ac5ec7f169e494ddd47a73938cf810d" translate="yes" xml:space="preserve">
          <source>For example, when configuring your application with &lt;code&gt;mod_wsgi&lt;/code&gt;, set the &lt;code&gt;WSGIDaemonProcess&lt;/code&gt; attribute &lt;code&gt;threads&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, unless Apache may crash when running your GeoDjango application. Increase the number of &lt;code&gt;processes&lt;/code&gt; instead.</source>
          <target state="translated">예를 들어 &lt;code&gt;mod_wsgi&lt;/code&gt; 로 애플리케이션을 구성 할 때 GeoDjango 애플리케이션을 실행할 때 Apache가 충돌하지 않는 한 &lt;code&gt;WSGIDaemonProcess&lt;/code&gt; 속성 &lt;code&gt;threads&lt;/code&gt; 를 &lt;code&gt;1&lt;/code&gt; 로 설정하십시오 . 대신 &lt;code&gt;processes&lt;/code&gt; 수를 늘리십시오 .</target>
        </trans-unit>
        <trans-unit id="f39be411ce21100d9f857b6a4f43b2db6d1961b7" translate="yes" xml:space="preserve">
          <source>For example, when using PostgreSQL:</source>
          <target state="translated">예를 들어 PostgreSQL을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="d801ed460f9666b79fe2663b1c3338bf1f54313b" translate="yes" xml:space="preserve">
          <source>For example, when you are working with blog entries, you may want to know the number of authors that have contributed blog entries:</source>
          <target state="translated">예를 들어 블로그 항목을 작업 할 때 블로그 항목을 제공 한 작성자 수를 알고 싶을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b79f03ac8c03a283c065d9796342d378859d632" translate="yes" xml:space="preserve">
          <source>For example, while our tests here have covered some of the internal logic of a model and the way our views publish information, you can use an &amp;ldquo;in-browser&amp;rdquo; framework such as &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; to test the way your HTML actually renders in a browser. These tools allow you to check not just the behavior of your Django code, but also, for example, of your JavaScript. It&amp;rsquo;s quite something to see the tests launch a browser, and start interacting with your site, as if a human being were driving it! Django includes &lt;a href=&quot;../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;LiveServerTestCase&lt;/code&gt;&lt;/a&gt; to facilitate integration with tools like Selenium.</source>
          <target state="translated">예를 들어 여기의 테스트에서는 모델의 일부 내부 논리와 뷰가 정보를 게시하는 방식을 다루었지만 &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; 과 같은 &quot;브라우저&quot;프레임 워크를 사용 하여 HTML이 브라우저에서 실제로 렌더링되는 방식을 테스트 할 수 있습니다. 이 도구를 사용하면 Django 코드의 동작뿐만 아니라 JavaScript의 동작도 확인할 수 있습니다. 테스트를 통해 브라우저가 실행되고 마치 마치 마치 마치 마치 마치 마치 사이트를 운영하는 것처럼 사이트와 상호 작용하는 것을 볼 수 있습니다. Django에는 Selenium과 같은 도구와 쉽게 통합 할 수있는 &lt;a href=&quot;../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt; &lt;code&gt;LiveServerTestCase&lt;/code&gt; &lt;/a&gt; 가 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a8d5ade2984d816b5ba35345366f0f5cdb5aed6" translate="yes" xml:space="preserve">
          <source>For example, you can apply &lt;code&gt;escape&lt;/code&gt; to fields when &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; is off:</source>
          <target state="translated">예를 들어, 적용 할 수있는 &lt;code&gt;escape&lt;/code&gt; 할 때 필드를 &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt; &lt;code&gt;autoescape&lt;/code&gt; 이&lt;/a&gt; 꺼져 :</target>
        </trans-unit>
        <trans-unit id="8bc687cb81bdb45486d590586550de931ed0c5e2" translate="yes" xml:space="preserve">
          <source>For example, you can change the file name by setting the file&amp;rsquo;s &lt;a href=&quot;../ref/files/file#django.core.files.File.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; to a path relative to the file storage&amp;rsquo;s location (&lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; if you are using the default &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">예를 들어, 파일의 설정하여 파일 이름을 변경할 수 있습니다 &lt;a href=&quot;../ref/files/file#django.core.files.File.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 파일 저장 위치 (상대 경로로 &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 기본 사용하는 경우 &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; 을&lt;/a&gt; ) :</target>
        </trans-unit>
        <trans-unit id="a64b2eae0f2e3122826d90162479de6db7d3a972" translate="yes" xml:space="preserve">
          <source>For example, you can create &lt;code&gt;myproject/jinja2.py&lt;/code&gt; with this content:</source>
          <target state="translated">예를 들어 다음 내용으로 &lt;code&gt;myproject/jinja2.py&lt;/code&gt; 를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="653060a437deca46c9784c2247d45d68a7488a98" translate="yes" xml:space="preserve">
          <source>For example, you can use &lt;code&gt;__file__&lt;/code&gt; to determine that all test classes in the same file that inherit from &lt;code&gt;SerializeMixin&lt;/code&gt; will run sequentially:</source>
          <target state="translated">예를 들어 &lt;code&gt;__file__&lt;/code&gt; 을 사용 하여 &lt;code&gt;SerializeMixin&lt;/code&gt; 에서 상속 된 동일한 파일의 모든 테스트 클래스가 순차적으로 실행 되는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fce9e67559c456c24bd95eaa2912a8a62168b7d6" translate="yes" xml:space="preserve">
          <source>For example, you can use this method to remove the built-in &amp;ldquo;delete selected objects&amp;rdquo; action:</source>
          <target state="translated">예를 들어,이 방법을 사용하여 내장 된 &quot;선택한 객체 삭제&quot;작업을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3c0833db9722f2012f8859bc587b79daf4a5f2b" translate="yes" xml:space="preserve">
          <source>For example, you can use this technique to add a custom logo to the &lt;code&gt;admin/base_site.html&lt;/code&gt; template:</source>
          <target state="translated">For example, you can use this technique to add a custom logo to the &lt;code&gt;admin/base_site.html&lt;/code&gt; template:</target>
        </trans-unit>
        <trans-unit id="66f7438bda04c7668c447a88a582dfeaace04a30" translate="yes" xml:space="preserve">
          <source>For example, you could register a callback in an &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">예를 들어 다음 과 같이 &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; 에&lt;/a&gt; 콜백을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d8c30e71ee2cc2a2bb4c4f8504db692a7e61d7cc" translate="yes" xml:space="preserve">
          <source>For example, you might start implementing an iTunes RSS feed generator like so:</source>
          <target state="translated">예를 들어 다음과 같이 iTunes RSS 피드 생성기를 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46c746d6fcc46e0acd37d896e4c4f63b43c64144" translate="yes" xml:space="preserve">
          <source>For example, your &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; might look like this:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd639e78a671d339c67b021cf0995153fafb1e13" translate="yes" xml:space="preserve">
          <source>For example, your company may already have an LDAP setup that stores a username and password for every employee. It&amp;rsquo;d be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications.</source>
          <target state="translated">예를 들어 회사에 모든 직원의 사용자 이름과 비밀번호를 저장하는 LDAP 설정이 이미있을 수 있습니다. 사용자가 LDAP 및 Django 기반 응용 프로그램에서 별도의 계정을 가지고 있다면 네트워크 관리자와 사용자 모두에게 번거 로움이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2ae3dc38163522a8032cf18284668e2d51924570" translate="yes" xml:space="preserve">
          <source>For examples, read the &lt;a href=&quot;https://github.com/django/django/blob/master/django/template/loaders&quot;&gt;source code for Django&amp;rsquo;s built-in loaders&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://github.com/django/django/blob/master/django/template/loaders&quot;&gt;장고 내장 로더의 소스 코드를&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="272a0b24158a86fc7beae49b7557b362b5df31da" translate="yes" xml:space="preserve">
          <source>For extra readability, you can optionally give a &lt;em&gt;name&lt;/em&gt; to your &lt;code&gt;{% endblock %}&lt;/code&gt; tag. For example:</source>
          <target state="translated">가독성을 높이기 위해 선택적으로 &lt;code&gt;{% endblock %}&lt;/code&gt; 태그에 &lt;em&gt;이름&lt;/em&gt; 을 지정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="30a4ee71ab009210385b0f7253fc8e8296d807be" translate="yes" xml:space="preserve">
          <source>For fields like &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; that map to model instances, defaults should be the value of the field they reference (&lt;code&gt;pk&lt;/code&gt; unless &lt;a href=&quot;#django.db.models.ForeignKey.to_field&quot;&gt;&lt;code&gt;to_field&lt;/code&gt;&lt;/a&gt; is set) instead of model instances.</source>
          <target state="translated">모델 인스턴스에 매핑되는 &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 와 같은 필드의 경우 기본값은 모델 인스턴스 대신 참조하는 필드의 값 ( &lt;a href=&quot;#django.db.models.ForeignKey.to_field&quot;&gt; &lt;code&gt;to_field&lt;/code&gt; &lt;/a&gt; 가 설정 되지 않은 경우 &lt;code&gt;pk&lt;/code&gt; ) 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="f78db508803596606e73e0d0a98b1dfa781a1d8a" translate="yes" xml:space="preserve">
          <source>For fine-grained control over the character encoding of your test database, use the &lt;a href=&quot;../../ref/settings#std:setting-TEST_CHARSET&quot;&gt;&lt;code&gt;CHARSET&lt;/code&gt;&lt;/a&gt; TEST option. If you&amp;rsquo;re using MySQL, you can also use the &lt;a href=&quot;../../ref/settings#std:setting-TEST_COLLATION&quot;&gt;&lt;code&gt;COLLATION&lt;/code&gt;&lt;/a&gt; option to control the particular collation used by the test database. See the &lt;a href=&quot;../../ref/settings&quot;&gt;settings documentation&lt;/a&gt; for details of these and other advanced settings.</source>
          <target state="translated">테스트 데이터베이스의 문자 인코딩을 세밀하게 제어하려면 &lt;a href=&quot;../../ref/settings#std:setting-TEST_CHARSET&quot;&gt; &lt;code&gt;CHARSET&lt;/code&gt; &lt;/a&gt; TEST 옵션을 사용하십시오 . MySQL을 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-TEST_COLLATION&quot;&gt; &lt;code&gt;COLLATION&lt;/code&gt; &lt;/a&gt; 옵션을 사용하여 테스트 데이터베이스에서 사용되는 특정 데이터 정렬을 제어 할 수도 있습니다 . 이러한 설정 및 기타 고급 설정에 대한 자세한 내용은 &lt;a href=&quot;../../ref/settings&quot;&gt;설정 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="36474a55d2c1798e1a7007aeb9803aa08abc73bf" translate="yes" xml:space="preserve">
          <source>For flexibility, the output does &lt;em&gt;not&lt;/em&gt; include the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt; tags, nor does it include the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; tags or an &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; tag. It&amp;rsquo;s your job to do that.</source>
          <target state="translated">유연성 출력 하는가 &lt;em&gt;하지&lt;/em&gt; 인클루드 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 와 &lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt; 태그 않으며 인클루드 않는 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; 태그 또는 &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; 태그. 그렇게하는 것이 당신의 일입니다.</target>
        </trans-unit>
        <trans-unit id="307bc0d9062e63004232297eb9326c743bf8ea6d" translate="yes" xml:space="preserve">
          <source>For full details on generic views, see the &lt;a href=&quot;../topics/class-based-views/index&quot;&gt;generic views documentation&lt;/a&gt;.</source>
          <target state="translated">일반보기에 대한 자세한 내용은 &lt;a href=&quot;../topics/class-based-views/index&quot;&gt;일반보기 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2cbdabb024a73903c71e4869d4c1a7e7454e9e0b" translate="yes" xml:space="preserve">
          <source>For full details on testing, see &lt;a href=&quot;../topics/testing/index&quot;&gt;Testing in Django&lt;/a&gt;.</source>
          <target state="translated">테스트에 대한 자세한 내용 &lt;a href=&quot;../topics/testing/index&quot;&gt;은 Django&lt;/a&gt; 에서 테스트를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc370485be81f4d5b9dc6275e4bf8fd187d0db71" translate="yes" xml:space="preserve">
          <source>For good measure, let&amp;rsquo;s also include the &lt;code&gt;was_published_recently()&lt;/code&gt; method from &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;:</source>
          <target state="translated">좋은 측정을 위해 &lt;a href=&quot;tutorial02&quot;&gt;튜토리얼 2&lt;/a&gt; 의 &lt;code&gt;was_published_recently()&lt;/code&gt; 메소드 도 포함시켜 보자 .</target>
        </trans-unit>
        <trans-unit id="45dc7c8b265d368652d0fd88b7904da9a61cc95a" translate="yes" xml:space="preserve">
          <source>For historical reasons, both the generic support for template engines and the implementation of the Django template language live in the &lt;code&gt;django.template&lt;/code&gt; namespace.</source>
          <target state="translated">역사적 이유로 템플릿 엔진에 대한 일반적인 지원과 Django 템플릿 언어의 구현은 &lt;code&gt;django.template&lt;/code&gt; 네임 스페이스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="de99d7f373c7b60840c2ac2264755119e7847202" translate="yes" xml:space="preserve">
          <source>For individual variables</source>
          <target state="translated">개별 변수</target>
        </trans-unit>
        <trans-unit id="234b2463d3262fe6585942096c146c09c2ffdabb" translate="yes" xml:space="preserve">
          <source>For information about serving the static files (images, JavaScript, and CSS) associated with the admin in production, see &lt;a href=&quot;../../../howto/deployment/wsgi/modwsgi#serving-files&quot;&gt;Serving files&lt;/a&gt;.</source>
          <target state="translated">정적 파일을 제공에 대한 자세한 내용 (이미지, 자바 스크립트, CSS) 생산 관리자와 연관는 참조 &lt;a href=&quot;../../../howto/deployment/wsgi/modwsgi#serving-files&quot;&gt;파일을 서빙&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3b99bcaecd02955383d58cab1f164fc0e3d49fe3" translate="yes" xml:space="preserve">
          <source>For information about unit-testing the sending of emails in your application, see the &lt;a href=&quot;testing/tools#topics-testing-email&quot;&gt;Email services&lt;/a&gt; section of the testing documentation.</source>
          <target state="translated">응용 프로그램에서 전자 메일 전송을 단위 테스트하는 방법에 대한 자세한 내용은 테스트 설명서 의 &lt;a href=&quot;testing/tools#topics-testing-email&quot;&gt;전자 메일 서비스&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd54b3b047434d8162788e4a6a248fdd5819fd87" translate="yes" xml:space="preserve">
          <source>For information on the &lt;code&gt;Vary&lt;/code&gt; header, see &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.4&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; 헤더 에 대한 자세한 내용 은 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231 # section-7.1.4를&lt;/strong&gt;&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="290116039acf1bacd476abe3a958e4a6fb6ea6e9" translate="yes" xml:space="preserve">
          <source>For information on writing your own custom tags and filters, see &lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;Custom template tags and filters&lt;/a&gt;.</source>
          <target state="translated">고유 한 사용자 정의 태그 및 필터 작성에 대한 정보는 &lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;사용자 정의 템플리트 태그 및 필터를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6424a9f5f542b33588d1226b07acb7eead968504" translate="yes" xml:space="preserve">
          <source>For instance, if your database connection is dropped because your process was killed without a chance to shut down gracefully, your rollback hook will never run.</source>
          <target state="translated">예를 들어, 프로세스가 정상적으로 종료되지 않고 프로세스가 종료되어 데이터베이스 연결이 끊어지면 롤백 후크가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="68e3a5785f60b6a48e4ba13601647820dd287426" translate="yes" xml:space="preserve">
          <source>For instance, suppose you have the following objects in your fixture:</source>
          <target state="translated">예를 들어, 조명기에 다음과 같은 오브젝트가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="26552709d9c194254fefe31b1351503fbe45c30a" translate="yes" xml:space="preserve">
          <source>For instance, suppose you&amp;rsquo;ve written a &lt;code&gt;ProgressBarUploadHandler&lt;/code&gt; that provides feedback on upload progress to some sort of AJAX widget. You&amp;rsquo;d add this handler to your upload handlers like this:</source>
          <target state="translated">예를 들어, 일종의 AJAX 위젯에 업로드 진행률에 대한 피드백을 제공 하는 &lt;code&gt;ProgressBarUploadHandler&lt;/code&gt; 를 작성했다고 가정하십시오 . 이 핸들러를 다음과 같이 업로드 핸들러에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="414de469af9e6bdec3a4931a955f107e92261403" translate="yes" xml:space="preserve">
          <source>For instance, the following &lt;code&gt;{% blocktrans %}&lt;/code&gt; tag:</source>
          <target state="translated">예를 들어, 다음 &lt;code&gt;{% blocktrans %}&lt;/code&gt; 태그 :</target>
        </trans-unit>
        <trans-unit id="dec22b9c84ee09af26eb5a650408fd484c6166d3" translate="yes" xml:space="preserve">
          <source>For instance, the following &lt;code&gt;{% blocktranslate %}&lt;/code&gt; tag:</source>
          <target state="translated">For instance, the following &lt;code&gt;{% blocktranslate %}&lt;/code&gt; tag:</target>
        </trans-unit>
        <trans-unit id="6b46d91dc6ffcc21985af173f6cc4f1f0a426295" translate="yes" xml:space="preserve">
          <source>For instance, to filter out &lt;a href=&quot;../ref/exceptions#django.http.UnreadablePostError&quot;&gt;&lt;code&gt;UnreadablePostError&lt;/code&gt;&lt;/a&gt; (raised when a user cancels an upload) from the admin emails, you would create a filter function:</source>
          <target state="translated">예를 들어 관리자 전자 메일에서 &lt;a href=&quot;../ref/exceptions#django.http.UnreadablePostError&quot;&gt; &lt;code&gt;UnreadablePostError&lt;/code&gt; &lt;/a&gt; (사용자가 업로드를 취소 할 때 발생)를 필터링하려면 필터 기능을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ba2af6015ca6f46f35561fed445489f2b6c6f7aa" translate="yes" xml:space="preserve">
          <source>For instance, you can fetch all the messages to return them in a &lt;a href=&quot;../../topics/class-based-views/mixins#jsonresponsemixin-example&quot;&gt;JSONResponseMixin&lt;/a&gt; instead of a &lt;a href=&quot;../class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어, 모든 메시지를 가져 와서 &lt;a href=&quot;../class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../../topics/class-based-views/mixins#jsonresponsemixin-example&quot;&gt;JSONResponseMixin&lt;/a&gt; 으로 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="cc39ed624666c7f7da40e46bbe2e48992146ded6" translate="yes" xml:space="preserve">
          <source>For introductory material, see the &lt;a href=&quot;../topics/migrations&quot;&gt;migrations topic guide&lt;/a&gt;.</source>
          <target state="translated">소개 자료는 &lt;a href=&quot;../topics/migrations&quot;&gt;마이그레이션 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e6e8a914b4cd4754faff872acedddbbbebed6ac3" translate="yes" xml:space="preserve">
          <source>For large amounts of text, use &lt;a href=&quot;#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">많은 양의 텍스트에는 &lt;a href=&quot;#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="887fa8d25ac98e1581cec62efb96cab221abb0ed" translate="yes" xml:space="preserve">
          <source>For macOS users building from source, the SpatiaLite library &lt;em&gt;and&lt;/em&gt; tools need to have their &lt;code&gt;target&lt;/code&gt; configured:</source>
          <target state="translated">소스에서 빌드하는 macOS 사용자의 경우 SpatiaLite 라이브러리 &lt;em&gt;및&lt;/em&gt; 도구에 &lt;code&gt;target&lt;/code&gt; 구성 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="646e8054ab0fca896879a33d04bc31e6303c296d" translate="yes" xml:space="preserve">
          <source>For macOS, follow the &lt;a href=&quot;#spatialite-macos&quot;&gt;instructions below&lt;/a&gt;.</source>
          <target state="translated">macOS의 경우 &lt;a href=&quot;#spatialite-macos&quot;&gt;아래 지침을&lt;/a&gt; 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="7981bb262d83ddad7517a39735875c26f39042b6" translate="yes" xml:space="preserve">
          <source>For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, while still only creating one database table per child model at the database level.</source>
          <target state="translated">많은 용도에서이 유형의 모델 상속은 정확히 원하는 것입니다. 파이썬 수준에서 공통 정보를 제외하고 데이터베이스 수준에서 하위 모델 당 하나의 데이터베이스 테이블 만 작성하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="720bd383fa98e00a3046b39acb659ac78e231328" translate="yes" xml:space="preserve">
          <source>For many-to-many relationships &lt;code&gt;add()&lt;/code&gt; accepts either model instances or field values, normally primary keys, as the &lt;code&gt;*objs&lt;/code&gt; argument.</source>
          <target state="translated">For many-to-many relationships &lt;code&gt;add()&lt;/code&gt; accepts either model instances or field values, normally primary keys, as the &lt;code&gt;*objs&lt;/code&gt; argument.</target>
        </trans-unit>
        <trans-unit id="dd9b78eede0a52b208932db0d75cc4ad68210818" translate="yes" xml:space="preserve">
          <source>For many-to-many relationships &lt;code&gt;remove()&lt;/code&gt; accepts either model instances or field values, normally primary keys, as the &lt;code&gt;*objs&lt;/code&gt; argument.</source>
          <target state="translated">For many-to-many relationships &lt;code&gt;remove()&lt;/code&gt; accepts either model instances or field values, normally primary keys, as the &lt;code&gt;*objs&lt;/code&gt; argument.</target>
        </trans-unit>
        <trans-unit id="7a8e463fb707934251ce68533845c259e15171ad" translate="yes" xml:space="preserve">
          <source>For many-to-many relationships &lt;code&gt;set()&lt;/code&gt; accepts a list of either model instances or field values, normally primary keys, as the &lt;code&gt;objs&lt;/code&gt; argument.</source>
          <target state="translated">For many-to-many relationships &lt;code&gt;set()&lt;/code&gt; accepts a list of either model instances or field values, normally primary keys, as the &lt;code&gt;objs&lt;/code&gt; argument.</target>
        </trans-unit>
        <trans-unit id="90c3793798204d7ec9cd509aa73f1dad9d1ba931" translate="yes" xml:space="preserve">
          <source>For many-to-many relationships, the &lt;code&gt;bulk&lt;/code&gt; keyword argument doesn&amp;rsquo;t exist.</source>
          <target state="translated">다 대다 관계의 경우 &lt;code&gt;bulk&lt;/code&gt; 키워드 인수가 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1bdb3d660cc3d32d0750ff6b772aa62cda1fcc57" translate="yes" xml:space="preserve">
          <source>For maximum flexibility you can use a &lt;a href=&quot;../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt; which doesn&amp;rsquo;t have a maximum length defined, however this may incur significant performance penalties depending on your database backend.</source>
          <target state="translated">최대 유연성을 위해 최대 길이가 정의되지 않은 &lt;a href=&quot;../models/fields#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있지만 데이터베이스 백엔드에 따라 상당한 성능 저하가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7df13100159bd891985f8503c5cf4765d9c91a6d" translate="yes" xml:space="preserve">
          <source>For maximum performance the chunk sizes should be divisible by &lt;code&gt;4&lt;/code&gt; and should not exceed 2 GB (2&lt;sup&gt;31&lt;/sup&gt; bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler.</source>
          <target state="translated">성능을 최대화하려면 청크 크기를 &lt;code&gt;4&lt;/code&gt; 로 나눌 수 있어야하며 크기가 2GB (2 &lt;sup&gt;31&lt;/sup&gt; 바이트)를 초과하지 않아야 합니다. 여러 핸들러에서 여러 청크 크기를 제공하면 Django는 모든 핸들러에서 정의한 가장 작은 청크 크기를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d61a6fa699444c95bc1a164ecde97b8625d9aecb" translate="yes" xml:space="preserve">
          <source>For maximum security, make sure database servers only accept connections from your application servers.</source>
          <target state="translated">보안을 극대화하려면 데이터베이스 서버가 응용 프로그램 서버의 연결 만 허용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e72d3d0d1fc526db06a844c569e485c559459803" translate="yes" xml:space="preserve">
          <source>For model methods, you can provide translations to Django and the admin site with the &lt;code&gt;short_description&lt;/code&gt; attribute:</source>
          <target state="translated">모델 메소드의 경우 &lt;code&gt;short_description&lt;/code&gt; 속성을 사용하여 Django 및 관리 사이트에 번역을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92461d6b7569ceb9d592fdcda46397f4b4800918" translate="yes" xml:space="preserve">
          <source>For models with &lt;a href=&quot;../../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;s, this difference makes it impossible to write a fixture that works both with and without time zone support.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 가있는&lt;/a&gt; 모델 의 경우이 차이로 인해 시간대 지원 유무에 관계없이 작동하는 조명기를 작성할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e582c3e06094fca676d29ee1ac180c26b5ee5489" translate="yes" xml:space="preserve">
          <source>For more advanced usage you may subclass &lt;code&gt;ModelChoiceIterator&lt;/code&gt; in order to customize the yielded 2-tuple choices.</source>
          <target state="translated">For more advanced usage you may subclass &lt;code&gt;ModelChoiceIterator&lt;/code&gt; in order to customize the yielded 2-tuple choices.</target>
        </trans-unit>
        <trans-unit id="c80e936be1f3c57e6fba12262a4187f0496b81c5" translate="yes" xml:space="preserve">
          <source>For more advanced usage, please read the &lt;a href=&quot;https://pgjones.gitlab.io/hypercorn/&quot;&gt;Hypercorn documentation&lt;/a&gt;.</source>
          <target state="translated">For more advanced usage, please read the &lt;a href=&quot;https://pgjones.gitlab.io/hypercorn/&quot;&gt;Hypercorn documentation&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="49b3de7edbebd211dd7ff278502ceb70044dbf4e" translate="yes" xml:space="preserve">
          <source>For more advanced usage, please read the &lt;a href=&quot;https://www.uvicorn.org/&quot;&gt;Uvicorn documentation&lt;/a&gt;.</source>
          <target state="translated">고급 사용법에 대해서는 &lt;a href=&quot;https://www.uvicorn.org/&quot;&gt;Uvicorn 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b80fa68cea99b15fffbc89201e3c467cd1b053fb" translate="yes" xml:space="preserve">
          <source>For more background on bulk deletion, see the documentation on &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-delete&quot;&gt;object deletion&lt;/a&gt;.</source>
          <target state="translated">대량 삭제에 대한 자세한 내용은 &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-delete&quot;&gt;객체 삭제&lt;/a&gt; 에 대한 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f69284f465eb1fba3979d3ff0d3c525b4a3ea0e3" translate="yes" xml:space="preserve">
          <source>For more complex filters, you can use &lt;code&gt;ModelForm.__init__()&lt;/code&gt; method to filter based on an &lt;code&gt;instance&lt;/code&gt; of your model (see &lt;a href=&quot;../../forms/fields#fields-which-handle-relationships&quot;&gt;Fields which handle relationships&lt;/a&gt;). For example:</source>
          <target state="translated">For more complex filters, you can use &lt;code&gt;ModelForm.__init__()&lt;/code&gt; method to filter based on an &lt;code&gt;instance&lt;/code&gt; of your model (see &lt;a href=&quot;../../forms/fields#fields-which-handle-relationships&quot;&gt;Fields which handle relationships&lt;/a&gt;). For example:</target>
        </trans-unit>
        <trans-unit id="0a1adcc239169ef12814a275fc30399f1c85dd83" translate="yes" xml:space="preserve">
          <source>For more complex layout needs, see the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">보다 복잡한 레이아웃 요구 사항은 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="32b5d1ffea64854e5dc114b7011626d822147b6b" translate="yes" xml:space="preserve">
          <source>For more complex matching requirements, you can define your own path converters.</source>
          <target state="translated">보다 복잡한 일치 요구 사항을 위해 고유 한 경로 변환기를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="927662c7cc1246dd8074042eda95f7d27a71dae2" translate="yes" xml:space="preserve">
          <source>For more complex uses, you can specify &lt;code&gt;queryset=None&lt;/code&gt; when declaring the form field and then populate the &lt;code&gt;queryset&lt;/code&gt; in the form&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method:</source>
          <target state="translated">보다 복잡한 사용을 위해 양식 필드를 선언 할 때 &lt;code&gt;queryset=None&lt;/code&gt; 을 지정한 다음 양식의 &lt;code&gt;__init__()&lt;/code&gt; 메소드 에서 &lt;code&gt;queryset&lt;/code&gt; 를 채울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c7a561c755b8b99014a324afed6b156256f214f" translate="yes" xml:space="preserve">
          <source>For more detail on email services during tests, see &lt;a href=&quot;#email-services&quot;&gt;Email services&lt;/a&gt; below.</source>
          <target state="translated">테스트 중 이메일 서비스에 대한 자세한 내용은 아래 &lt;a href=&quot;#email-services&quot;&gt;이메일 서비스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="58d93ccb14220145a2c6fca50940bafc44dcc747" translate="yes" xml:space="preserve">
          <source>For more details about &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;, see the Python documentation.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; 에&lt;/a&gt; 대한 자세한 내용은 Python 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="279c403bd9877b581693f60194f2a97a5ba59890" translate="yes" xml:space="preserve">
          <source>For more details about lazy translation objects, refer to the &lt;a href=&quot;../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; documentation.</source>
          <target state="translated">지연 번역 개체에 대한 자세한 내용은 &lt;a href=&quot;../topics/i18n/index&quot;&gt;국제화&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c91404f6c889c489cf3d003955f19ee00a527e9b" translate="yes" xml:space="preserve">
          <source>For more details check out the documentation for the &lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; option, which also lets you manually set the database table name.</source>
          <target state="translated">자세한 내용 은 데이터베이스 테이블 이름을 수동으로 설정할 수 있는 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt; 옵션에 대한 설명서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4d38d949517b0545a046291c4a15a26813a9aef" translate="yes" xml:space="preserve">
          <source>For more details on model managers see &lt;a href=&quot;../../topics/db/managers&quot;&gt;Managers&lt;/a&gt; and &lt;a href=&quot;../../topics/db/queries#retrieving-objects&quot;&gt;Retrieving objects&lt;/a&gt;.</source>
          <target state="translated">모델 관리자에 대한 자세한 내용은 &lt;a href=&quot;../../topics/db/managers&quot;&gt;관리자&lt;/a&gt; 및 &lt;a href=&quot;../../topics/db/queries#retrieving-objects&quot;&gt;객체 검색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4bc77db85f86d3d6fec4931aa2ff1b8ffdf631d6" translate="yes" xml:space="preserve">
          <source>For more details see the full &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="06b27c392cc30c92586b791b3ec5b50aecc9db68" translate="yes" xml:space="preserve">
          <source>For more details, including how to delete objects in bulk, see &lt;a href=&quot;../../topics/db/queries#topics-db-queries-delete&quot;&gt;Deleting objects&lt;/a&gt;.</source>
          <target state="translated">대량으로 객체를 삭제하는 방법을 포함하여 자세한 내용은 &lt;a href=&quot;../../topics/db/queries#topics-db-queries-delete&quot;&gt;객체 삭제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="58944a24a7ff7566b422852003d421341ec97e61" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;Using Python on Windows&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;은 Windows에서 Python 사용&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="37b106025ca0fc4e4f97a3dfdac7754b69b6a287" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation on &lt;a href=&quot;../../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;reversing namespaced URLs&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;네임 스페이스 URL 반전에&lt;/a&gt; 대한 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ea938600e698e46c90b0b325211f0c2d855ff0d" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation on &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; and their &lt;a href=&quot;../../topics/db/queries#topics-db-queries-update&quot;&gt;use in update queries&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt; 에 대한 설명서 및 &lt;a href=&quot;../../topics/db/queries#topics-db-queries-update&quot;&gt;업데이트 쿼리에서&lt;/a&gt; 의 사용법을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a621660b9ffadb4df494ab924cbcdfcef1860d1" translate="yes" xml:space="preserve">
          <source>For more direct control over message tags, you can optionally provide a string containing extra tags to any of the add methods:</source>
          <target state="translated">메시지 태그에 대한 직접적인 제어를 위해 추가 메소드에 추가 태그가 포함 된 문자열을 선택적으로 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="141974db682fbfc34db800660186aada5cbcbc3d" translate="yes" xml:space="preserve">
          <source>For more examples of complex rendering, see the source code of &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; and &lt;a href=&quot;../ref/templates/builtins#std:templatetag-if&quot;&gt;&lt;code&gt;{% if %}&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;django/template/smartif.py&lt;/code&gt;.</source>
          <target state="translated">복잡한 렌더링의 더 많은 예를 들어, 소스 코드를 참조 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;{% for %}&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; 및 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-if&quot;&gt; &lt;code&gt;{% if %}&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;django/template/smartif.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c4063c11b1c88b2cb8977a2db5a6f85a2224915" translate="yes" xml:space="preserve">
          <source>For more granular control over the generated markup, you can loop over the radio buttons in the template. Assuming a form &lt;code&gt;myform&lt;/code&gt; with a field &lt;code&gt;beatles&lt;/code&gt; that uses a &lt;code&gt;RadioSelect&lt;/code&gt; as its widget:</source>
          <target state="translated">생성 된 마크 업을보다 세밀하게 제어하려면 템플릿의 라디오 버튼을 반복 할 수 있습니다. &lt;code&gt;RadioSelect&lt;/code&gt; 를 위젯으로 사용하는 필드 &lt;code&gt;beatles&lt;/code&gt; 가 있는 양식 &lt;code&gt;myform&lt;/code&gt; 을 가정하면 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b494e2fa30daa12b2bd73081b7a08f5f69a79a3" translate="yes" xml:space="preserve">
          <source>For more information about the differences between the &lt;a href=&quot;#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; classes, please see &lt;a href=&quot;#floatfield-vs-decimalfield&quot;&gt;FloatField vs. DecimalField&lt;/a&gt;. You should also be aware of &lt;a href=&quot;../databases#sqlite-decimal-handling&quot;&gt;SQLite limitations&lt;/a&gt; of decimal fields.</source>
          <target state="translated">사이의 차이점에 대한 자세한 내용은 &lt;a href=&quot;#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; &lt;/a&gt; 클래스를 참조하시기 바랍니다 &lt;a href=&quot;#floatfield-vs-decimalfield&quot;&gt;DecimalField 대 FloatField을&lt;/a&gt; . 10 진 필드 의 &lt;a href=&quot;../databases#sqlite-decimal-handling&quot;&gt;SQLite 제한 사항&lt;/a&gt; 도 알고 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="2a1e4b92c4b1299cae94418ff1f466ba63e1902f" translate="yes" xml:space="preserve">
          <source>For more information creating &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects, refer to the &lt;a href=&quot;geos#geos-tutorial&quot;&gt;GEOS tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체 생성에 대한 자세한 내용 은 &lt;a href=&quot;geos#geos-tutorial&quot;&gt;GEOS 튜토리얼을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bee8a00911e8ae017f5711d9b8ada409c9899e9" translate="yes" xml:space="preserve">
          <source>For more information on how the &lt;code&gt;takes_context&lt;/code&gt; option works, see the section on &lt;a href=&quot;#howto-custom-template-tags-inclusion-tags&quot;&gt;inclusion tags&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;takes_context&lt;/code&gt; 옵션의 작동 방식 에 대한 자세한 내용 은 &lt;a href=&quot;#howto-custom-template-tags-inclusion-tags&quot;&gt;포함 태그&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4792337d74fb41aff8fd3fe24b774ed7a7075b39" translate="yes" xml:space="preserve">
          <source>For more information on how the minimum recorded level functions, see &lt;a href=&quot;#message-levels&quot;&gt;Message levels&lt;/a&gt; above.</source>
          <target state="translated">최소 녹음 수준의 기능에 대한 자세한 내용은 위의 &lt;a href=&quot;#message-levels&quot;&gt;메시지 수준을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64b1e8bbb3b4a7db0536ac5a57afad76d21f96bc" translate="yes" xml:space="preserve">
          <source>For more information on how to use the built in generic views, consult the next topic on &lt;a href=&quot;generic-display&quot;&gt;generic class-based views&lt;/a&gt;.</source>
          <target state="translated">기본 제공 일반보기를 사용하는 방법에 대한 자세한 정보는 &lt;a href=&quot;generic-display&quot;&gt;일반 클래스 기반보기&lt;/a&gt; 에 대한 다음 주제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad2faa17c504056bb79721f41478b5cf93ee8f17" translate="yes" xml:space="preserve">
          <source>For more information on model relations, see &lt;a href=&quot;../ref/models/relations&quot;&gt;Accessing related objects&lt;/a&gt;. For more on how to use double underscores to perform field lookups via the API, see &lt;a href=&quot;../topics/db/queries#field-lookups-intro&quot;&gt;Field lookups&lt;/a&gt;. For full details on the database API, see our &lt;a href=&quot;../topics/db/queries&quot;&gt;Database API reference&lt;/a&gt;.</source>
          <target state="translated">모델 관계에 대한 자세한 정보는 &lt;a href=&quot;../ref/models/relations&quot;&gt;관련 오브젝트 액세스를&lt;/a&gt; 참조하십시오 . API를 통해 필드의 조회를 수행하는 이중 밑줄을 사용하는 방법에 대한 자세한 내용은 참조 &lt;a href=&quot;../topics/db/queries#field-lookups-intro&quot;&gt;필드 조회를&lt;/a&gt; . 데이터베이스 API에 대한 자세한 내용은 &lt;a href=&quot;../topics/db/queries&quot;&gt;데이터베이스 API 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47742209ee4799ec64202e500131a5f0d472ae00" translate="yes" xml:space="preserve">
          <source>For more information on packaging, see Python&amp;rsquo;s &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/&quot;&gt;Tutorial on Packaging and Distributing Projects&lt;/a&gt;.</source>
          <target state="translated">패키징에 대한 자세한 내용은 &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/&quot;&gt;프로젝트 패키징 및 배포에&lt;/a&gt; 대한 Python의 자습서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b76778341e9f02ca90fe2cf2d88dfefa40bcc8d4" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; tag, read its documentation.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt; 태그 에 대한 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d49e90b5333ff6e7b10e9aa6b8723a99b2576658" translate="yes" xml:space="preserve">
          <source>For more information on these method properties, see &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 메소드 특성에 대한 자세한 정보는 &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ff6a17e4f7b67e13f5fdfcf8eaa8d0bded74b48" translate="yes" xml:space="preserve">
          <source>For more information on writing documentation, including an explanation of what the &lt;code&gt;versionadded&lt;/code&gt; bit is all about, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-documentation/&quot;&gt;Writing documentation&lt;/a&gt;. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated.</source>
          <target state="translated">&lt;code&gt;versionadded&lt;/code&gt; 비트에 대한 설명을 포함하여 문서 작성에 대한 자세한 내용은 문서 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-documentation/&quot;&gt;작성을&lt;/a&gt; 참조하십시오 . 이 페이지에는 문서 사본을 로컬로 빌드하는 방법에 대한 설명도 포함되어 있으므로 생성 될 HTML을 미리 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c08415d0d9256a449f5322a806321695e2a65e97" translate="yes" xml:space="preserve">
          <source>For more information on writing documentation, including an explanation of what the &lt;code&gt;versionadded&lt;/code&gt; bit is all about, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-documentation/&quot;&gt;Writing documentation&lt;/a&gt;. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated.</source>
          <target state="translated">For more information on writing documentation, including an explanation of what the &lt;code&gt;versionadded&lt;/code&gt; bit is all about, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-documentation/&quot;&gt;Writing documentation&lt;/a&gt;. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated.</target>
        </trans-unit>
        <trans-unit id="45eeaf25d42cc3ec94406a92208edd5d8c956951" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../../topics/files&quot;&gt;Managing files&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;../../topics/files&quot;&gt;파일 관리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="507910ab48efd1e93e0e343542bffdc9600bdabb" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../topics/i18n/translation#contextual-markers&quot;&gt;Contextual markers&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;../topics/i18n/translation#contextual-markers&quot;&gt;상황 별 마커를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f7819aec51ef804e62612079347d58584eacfda" translate="yes" xml:space="preserve">
          <source>For more information, the PostGIS documentation contains a helpful section on determining &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_GeographyVSGeometry&quot;&gt;when to use geography data type over geometry data type&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 PostGIS 문서 &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_GeographyVSGeometry&quot;&gt;에 지오메트리 데이터 유형에 대해 지리 데이터 유형을 사용할시기를&lt;/a&gt; 결정하는 데 유용한 섹션이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e11836e7ccec0efc67c0aecc25c8cf7c68e9aee0" translate="yes" xml:space="preserve">
          <source>For more on Vary headers, see the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;official Vary spec&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Vary 헤더에 대한 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;공식 Vary 사양을&lt;/strong&gt;&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f98a38a01f75e7ab202c7bd8b9f2425154d8e515" translate="yes" xml:space="preserve">
          <source>For more on middleware, read the &lt;a href=&quot;../../topics/http/middleware&quot;&gt;middleware docs&lt;/a&gt;.</source>
          <target state="translated">미들웨어에 대한 자세한 내용은 &lt;a href=&quot;../../topics/http/middleware&quot;&gt;미들웨어 문서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b267b1a01114ee31ea6d8b05c668877f539be841" translate="yes" xml:space="preserve">
          <source>For more on pagination, read the &lt;a href=&quot;../../topics/pagination&quot;&gt;pagination documentation&lt;/a&gt;.</source>
          <target state="translated">페이지 매김에 대한 자세한 내용은 페이지 &lt;a href=&quot;../../topics/pagination&quot;&gt;매김 문서를&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="2c64c486c65888eb52c7539f1424def530e76016" translate="yes" xml:space="preserve">
          <source>For more on sending email from Django, see &lt;a href=&quot;../email&quot;&gt;Sending email&lt;/a&gt;.</source>
          <target state="translated">Django에서 이메일을 보내는 방법에 대한 자세한 내용은 이메일 &lt;a href=&quot;../email&quot;&gt;보내기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c84dff282ea6b93fe47d293a1e314b08fecbd81" translate="yes" xml:space="preserve">
          <source>For more options like annotated HTML listings detailing missed lines, see the &lt;a href=&quot;https://coverage.readthedocs.io/&quot;&gt;coverage.py&lt;/a&gt; docs.</source>
          <target state="translated">누락 된 행을 자세히 설명하는 주석이 달린 HTML 목록과 같은 추가 옵션에 대해서는 &lt;a href=&quot;https://coverage.readthedocs.io/&quot;&gt;coverage.py&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6192f961c1d3c6a9a50f39fae25b2121f6bd5f5e" translate="yes" xml:space="preserve">
          <source>For more, see the &lt;a href=&quot;../ref/django-admin#django-admin-diffsettings&quot;&gt;&lt;code&gt;diffsettings&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../ref/django-admin#django-admin-diffsettings&quot;&gt; &lt;code&gt;diffsettings&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a80d5abe99712d4e4d9829a7ea208844f71d27f" translate="yes" xml:space="preserve">
          <source>For more, see the section &amp;ldquo;The database API&amp;rdquo; below.</source>
          <target state="translated">자세한 내용은 아래의&amp;ldquo;데이터베이스 API&amp;rdquo;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b54050c09bf8dd84ccee5cc3f84ec8431f97bae" translate="yes" xml:space="preserve">
          <source>For most Web applications, this overhead isn&amp;rsquo;t a big deal. Most Web applications aren&amp;rsquo;t &lt;code&gt;washingtonpost.com&lt;/code&gt; or &lt;code&gt;slashdot.org&lt;/code&gt;; they&amp;rsquo;re small- to medium-sized sites with so-so traffic. But for medium- to high-traffic sites, it&amp;rsquo;s essential to cut as much overhead as possible.</source>
          <target state="translated">대부분의 웹 응용 프로그램에서이 오버 헤드는 큰 문제가 아닙니다. 대부분의 웹 응용 프로그램은 &lt;code&gt;washingtonpost.com&lt;/code&gt; 또는 &lt;code&gt;slashdot.org&lt;/code&gt; 가 아닙니다 . 트래픽이 많은 중소 규모 사이트입니다. 그러나 트래픽이 많은 사이트에서 트래픽이 많은 사이트의 경우 가능한 한 많은 오버 헤드를 줄이는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="237201716598097e525fd6c1250b48cbeab9d611" translate="yes" xml:space="preserve">
          <source>For most aggregates, there is no way to avoid this problem, however, the &lt;a href=&quot;../../ref/models/querysets#django.db.models.Count&quot;&gt;&lt;code&gt;Count&lt;/code&gt;&lt;/a&gt; aggregate has a &lt;code&gt;distinct&lt;/code&gt; parameter that may help:</source>
          <target state="translated">대부분의 집계에는이 문제를 피할 수있는 방법이 없지만 &lt;a href=&quot;../../ref/models/querysets#django.db.models.Count&quot;&gt; &lt;code&gt;Count&lt;/code&gt; &lt;/a&gt; 집계에는 다음과 같은 &lt;code&gt;distinct&lt;/code&gt; 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2003ca8d7dc771b03d7546f025676603513b8695" translate="yes" xml:space="preserve">
          <source>For most backends, raw queries (&lt;code&gt;Manager.raw()&lt;/code&gt; or &lt;code&gt;cursor.execute()&lt;/code&gt;) can use the &amp;ldquo;pyformat&amp;rdquo; parameter style, where placeholders in the query are given as &lt;code&gt;'%(name)s'&lt;/code&gt; and the parameters are passed as a dictionary rather than a list. SQLite does not support this.</source>
          <target state="translated">대부분의 백엔드에서 원시 쿼리 ( &lt;code&gt;Manager.raw()&lt;/code&gt; 또는 &lt;code&gt;cursor.execute()&lt;/code&gt; )는&amp;ldquo;pyformat&amp;rdquo;매개 변수 스타일을 사용할 수 있습니다. 여기서 쿼리의 자리 표시자는 &lt;code&gt;'%(name)s'&lt;/code&gt; 되고 매개 변수는 목록이 아닌 사전. SQLite는 이것을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a9b961caae7339af9470bdb6ccaef50eae9ac7d1" translate="yes" xml:space="preserve">
          <source>For most extensions, this requires a database user with superuser privileges. If the Django database user doesn&amp;rsquo;t have the appropriate privileges, you&amp;rsquo;ll have to create the extension outside of Django migrations with a user that has them. In that case, connect to your Django database and run the query &lt;code&gt;CREATE EXTENSION IF NOT EXISTS hstore;&lt;/code&gt;.</source>
          <target state="translated">For most extensions, this requires a database user with superuser privileges. If the Django database user doesn&amp;rsquo;t have the appropriate privileges, you&amp;rsquo;ll have to create the extension outside of Django migrations with a user that has them. In that case, connect to your Django database and run the query &lt;code&gt;CREATE EXTENSION IF NOT EXISTS hstore;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0c24ff4760969777f23c45dfeee5f192e54f490c" translate="yes" xml:space="preserve">
          <source>For most of these add-ons &amp;ndash; specifically, the add-ons that include either models or template tags &amp;ndash; you&amp;rsquo;ll need to add the package name (e.g., &lt;code&gt;'django.contrib.redirects'&lt;/code&gt;) to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and re-run &lt;code&gt;manage.py migrate&lt;/code&gt;.</source>
          <target state="translated">이러한 부가 기능의 대부분, 특히 모델 또는 템플릿 태그를 포함하는 부가 기능의 경우 패키지 이름 (예 : &lt;code&gt;'django.contrib.redirects'&lt;/code&gt; )을 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 추가하고 다시 실행해야합니다. &lt;code&gt;manage.py migrate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5773200065e50b8ffe12fb94d74fc2c7ae73b54b" translate="yes" xml:space="preserve">
          <source>For much better performance on WGS84 distance queries, consider using &lt;a href=&quot;model-api#geography-type&quot;&gt;geography columns&lt;/a&gt; in your database instead because they are able to use their spatial index in distance queries. You can tell GeoDjango to use a geography column by setting &lt;code&gt;geography=True&lt;/code&gt; in your field definition.</source>
          <target state="translated">WGS84 거리 쿼리에서 훨씬 더 나은 성능을 얻으 려면 거리 쿼리에서 공간 인덱스를 사용할 수 있으므로 데이터베이스에서 &lt;a href=&quot;model-api#geography-type&quot;&gt;지리 열&lt;/a&gt; 을 대신 사용해보십시오. 필드 정의에서 &lt;code&gt;geography=True&lt;/code&gt; 를 설정하여 지리 열을 사용하도록 GeoDjango에 지시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6b394a2c0488d27e61669101145e755c23a05b0" translate="yes" xml:space="preserve">
          <source>For nearly all cases, Django&amp;rsquo;s built-in template language is perfectly adequate. However, if the bottlenecks in your Django project seem to lie in the template system and you have exhausted other opportunities to remedy this, a third-party alternative may be the answer.</source>
          <target state="translated">거의 모든 경우에 Django의 내장 템플릿 언어가 완벽하게 적합합니다. 그러나 Django 프로젝트의 병목 현상이 템플릿 시스템에있는 것 같고이를 해결할 수있는 다른 기회를 소진 한 경우 타사 대안이 답이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e4c6979b5930dafd8445167fefb3b15671217be" translate="yes" xml:space="preserve">
          <source>For nested loops, this is the loop surrounding the current one</source>
          <target state="translated">중첩 루프의 경우 현재 루프를 둘러싼 루프입니다.</target>
        </trans-unit>
        <trans-unit id="e7fb3dd6ecf24e63b43dbe6b3f6682455af38f1f" translate="yes" xml:space="preserve">
          <source>For non-AJAX requests, the fallback will always be performed.</source>
          <target state="translated">AJAX가 아닌 요청의 경우 대체가 항상 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="7e79ed355486bc2713b8435fdfa927d098abc733" translate="yes" xml:space="preserve">
          <source>For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style.</source>
          <target state="translated">숫자 1-9의 경우 철자가 표시된 숫자를 반환합니다. 그렇지 않으면 숫자를 반환합니다. 이것은 AP 통신 스타일을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="e7dad50022091ec1e5f0adb635e178d5aa50e5ee" translate="yes" xml:space="preserve">
          <source>For our &lt;code&gt;Hand&lt;/code&gt; example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a pre-determined order &amp;ndash; say, all the &lt;em&gt;north&lt;/em&gt; cards first, then the &lt;em&gt;east&lt;/em&gt;, &lt;em&gt;south&lt;/em&gt; and &lt;em&gt;west&lt;/em&gt; cards. So &lt;code&gt;Hand&lt;/code&gt; objects can be saved to text or character columns in the database.</source>
          <target state="translated">우리의 경우 &lt;code&gt;Hand&lt;/code&gt; 말하자면 모든 - 예를 들어, 우리는 미리 정해진 순서대로 함께 모든 카드를 연결하여 104 개 문자의 문자열로 카드 데이터를 변환 할 수 있습니다 &lt;em&gt;북쪽&lt;/em&gt; 첫번째 카드, 다음, &lt;em&gt;동쪽&lt;/em&gt; , &lt;em&gt;남쪽&lt;/em&gt; 과 &lt;em&gt;서쪽에&lt;/em&gt; 카드를. 따라서 &lt;code&gt;Hand&lt;/code&gt; 객체는 데이터베이스의 텍스트 또는 문자 열에 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c129b37c8b665fe90f9785807f4f5c5f296c1d9b" translate="yes" xml:space="preserve">
          <source>For performance reasons, &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; loads fixtures once for the entire test class, before &lt;a href=&quot;#django.test.TestCase.setUpTestData&quot;&gt;&lt;code&gt;setUpTestData()&lt;/code&gt;&lt;/a&gt;, instead of before each test, and it uses transactions to clean the database before each test. In any case, you can be certain that the outcome of a test will not be affected by another test or by the order of test execution.</source>
          <target state="translated">성능상의 이유로, &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 는 각 테스트 이전이 아닌 &lt;a href=&quot;#django.test.TestCase.setUpTestData&quot;&gt; &lt;code&gt;setUpTestData()&lt;/code&gt; &lt;/a&gt; 전에 전체 테스트 클래스에 대해 픽스처를 한 번로드 하고 트랜잭션을 사용하여 각 테스트 전에 데이터베이스를 정리합니다. 어쨌든 테스트 결과는 다른 테스트 나 테스트 실행 순서에 영향을받지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="2a4912a8f2e478cd373c6834ff23b62b982b832c" translate="yes" xml:space="preserve">
          <source>For performance reasons, &lt;code&gt;from_db_value&lt;/code&gt; is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call &lt;code&gt;super&lt;/code&gt; in your definition.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;from_db_value&lt;/code&gt; 는 필요하지 않은 필드 (모든 Django 필드)에서 no-op로 구현되지 않습니다. 결과적으로 당신은 당신의 정의에서 &lt;code&gt;super&lt;/code&gt; 를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="424ca8cab98f356a00ae4490061803f50b6ec450" translate="yes" xml:space="preserve">
          <source>For performance reasons, SQL logging is only enabled when &lt;code&gt;settings.DEBUG&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, regardless of the logging level or handlers that are installed.</source>
          <target state="translated">성능상의 이유로, SQL 로깅은 &lt;code&gt;settings.DEBUG&lt;/code&gt; 가 설치된 로깅 레벨 또는 핸들러에 관계없이 &lt;code&gt;True&lt;/code&gt; 로 설정된 경우에만 사용 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="42bb783ba8a3b6a8a71df6de2ff3296859069b89" translate="yes" xml:space="preserve">
          <source>For performance reasons, it&amp;rsquo;s preferable to do these redirects outside of Django, in a front-end load balancer or reverse-proxy server such as &lt;a href=&quot;https://nginx.org&quot;&gt;nginx&lt;/a&gt;. &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is intended for the deployment situations where this isn&amp;rsquo;t an option.</source>
          <target state="translated">성능상의 이유로 프론트 엔드로드 밸런서 또는 &lt;a href=&quot;https://nginx.org&quot;&gt;nginx&lt;/a&gt; 와 같은 리버스 프록시 서버에서 Django 외부에서 이러한 리디렉션을 수행하는 것이 좋습니다 . &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; &lt;/a&gt; 는 옵션이 아닌 배포 상황을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="d9e63810971473602af5d7b1f5a81aa41157752d" translate="yes" xml:space="preserve">
          <source>For performance reasons, the &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instances in &lt;code&gt;ModelState.fields&lt;/code&gt; are reused across migrations. You must never change the attributes on these instances. If you need to mutate a field in &lt;code&gt;state_forwards()&lt;/code&gt;, you must remove the old instance from &lt;code&gt;ModelState.fields&lt;/code&gt; and add a new instance in its place. The same is true for the &lt;a href=&quot;../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instances in &lt;code&gt;ModelState.managers&lt;/code&gt;.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;ModelState.fields&lt;/code&gt; 의 &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 인스턴스는 마이그레이션에서 재사용됩니다. 이 인스턴스의 속성을 절대 변경해서는 안됩니다. &lt;code&gt;state_forwards()&lt;/code&gt; 에서 필드를 변경해야하는 경우 &lt;code&gt;ModelState.fields&lt;/code&gt; 에서 이전 인스턴스를 제거하고 그 자리에 새 인스턴스를 추가 해야합니다 . &lt;code&gt;ModelState.managers&lt;/code&gt; 의 &lt;a href=&quot;../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 인스턴스도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="1a14665e6a70026da7b331f9bb19684d58424a07" translate="yes" xml:space="preserve">
          <source>For performance reasons, you shouldn&amp;rsquo;t perform queries in receivers of &lt;code&gt;pre_init&lt;/code&gt; or &lt;code&gt;post_init&lt;/code&gt; signals because they would be executed for each instance returned during queryset iteration.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;pre_init&lt;/code&gt; 또는 &lt;code&gt;post_init&lt;/code&gt; 신호의 수신기에서 쿼리를 수행하면 안됩니다. 쿼리 세트 반복 중에 반환 된 각 인스턴스에 대해 실행되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="38a5583dc5a79edcb838768762f15c7d4aaba0f4" translate="yes" xml:space="preserve">
          <source>For persistent, cached data, set &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.contrib.sessions.backends.cached_db&quot;&lt;/code&gt;. This uses a write-through cache &amp;ndash; every write to the cache will also be written to the database. Session reads only use the database if the data is not already in the cache.</source>
          <target state="translated">캐시 된 영구 데이터의 경우 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt; &lt;code&gt;SESSION_ENGINE&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;&quot;django.contrib.sessions.backends.cached_db&quot;&lt;/code&gt; 로 설정하십시오 . 이것은 write-through 캐시를 사용합니다. 캐시에 대한 모든 쓰기도 데이터베이스에 작성됩니다. 데이터가 캐시에없는 경우 세션 읽기는 데이터베이스 만 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c7b8cf00020c5d1fb45cd748de93524d6d79b7bb" translate="yes" xml:space="preserve">
          <source>For raster data there is no difference between a raster instance and its data source. Unlike for the Geometry objects, &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; objects are always a data source. Temporary rasters can be instantiated in memory using the corresponding driver, but they will be of the same class as file-based raster sources.</source>
          <target state="translated">래스터 데이터의 경우 래스터 인스턴스와 해당 데이터 소스간에 차이가 없습니다. Geometry 객체와 달리 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체는 항상 데이터 소스입니다. 임시 래스터는 해당 드라이버를 사용하여 메모리에서 인스턴스화 할 수 있지만 파일 기반 래스터 소스와 동일한 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d75c22989ab8a302b73b82bc433278f518a6e000" translate="yes" xml:space="preserve">
          <source>For sample code, see the &lt;a href=&quot;examples/many_to_one&quot;&gt;Many-to-one relationship model example&lt;/a&gt;.</source>
          <target state="translated">샘플 코드는 다 &lt;a href=&quot;examples/many_to_one&quot;&gt;대일 관계 모델 예제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb1ef97607904bce2dc6f3c32cc662efa95452e0" translate="yes" xml:space="preserve">
          <source>For security reasons, CSRF tokens are rotated each time a user logs in. Any page with a form generated before a login will have an old, invalid CSRF token and need to be reloaded. This might happen if a user uses the back button after a login or if they log in a different browser tab.</source>
          <target state="translated">보안상의 이유로 사용자가 로그인 할 때마다 CSRF 토큰이 순환됩니다. 로그인하기 전에 생성 된 양식이있는 페이지는 오래되고 유효하지 않은 CSRF 토큰을 가지므로 다시로드해야합니다. 사용자가 로그인 후 뒤로 버튼을 사용하거나 다른 브라우저 탭에 로그인 한 경우 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae97a0fe5932f690f89f83cec189c6b17b10fb0f" translate="yes" xml:space="preserve">
          <source>For security reasons, the value of the secret is changed each time a user logs in.</source>
          <target state="translated">보안상의 이유로 사용자가 로그인 할 때마다 비밀 값이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="c6ff78cacaaf23691d024d9a0c7b10a2a87d6fbc" translate="yes" xml:space="preserve">
          <source>For security reasons, these permissions aren&amp;rsquo;t applied to the temporary files that are stored in &lt;a href=&quot;#std:setting-FILE_UPLOAD_TEMP_DIR&quot;&gt;&lt;code&gt;FILE_UPLOAD_TEMP_DIR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">보안상의 이유로 이러한 권한은 &lt;a href=&quot;#std:setting-FILE_UPLOAD_TEMP_DIR&quot;&gt; &lt;code&gt;FILE_UPLOAD_TEMP_DIR&lt;/code&gt; 에&lt;/a&gt; 저장된 임시 파일에는 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d0ec9f02dce1101622a275e4df9d73b74bea9b32" translate="yes" xml:space="preserve">
          <source>For setting the &lt;code&gt;Cache-Control&lt;/code&gt; and &lt;code&gt;Vary&lt;/code&gt; header fields, it is recommended to use the &lt;a href=&quot;utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;utils#django.utils.cache.patch_vary_headers&quot;&gt;&lt;code&gt;patch_vary_headers()&lt;/code&gt;&lt;/a&gt; methods from &lt;a href=&quot;utils#module-django.utils.cache&quot;&gt;&lt;code&gt;django.utils.cache&lt;/code&gt;&lt;/a&gt;, since these fields can have multiple, comma-separated values. The &amp;ldquo;patch&amp;rdquo; methods ensure that other values, e.g. added by a middleware, are not removed.</source>
          <target state="translated">설정에 &lt;code&gt;Cache-Control&lt;/code&gt; 및 &lt;code&gt;Vary&lt;/code&gt; 헤더 필드, 사용을 권장 &lt;a href=&quot;utils#django.utils.cache.patch_cache_control&quot;&gt; &lt;code&gt;patch_cache_control()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;utils#django.utils.cache.patch_vary_headers&quot;&gt; &lt;code&gt;patch_vary_headers()&lt;/code&gt; &lt;/a&gt; 행 방법 &lt;a href=&quot;utils#module-django.utils.cache&quot;&gt; &lt;code&gt;django.utils.cache&lt;/code&gt; &lt;/a&gt; 이러한 필드 쉼표로 구분 된 여러 개의 값을 가질 수 있기 때문에. &quot;패치&quot;방법은 미들웨어에 의해 추가 된 다른 값이 제거되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="db395fce05fd519b1a5fb650233cfd3a114f39b6" translate="yes" xml:space="preserve">
          <source>For settings that are sequences, Django itself uses lists, but this is only a convention.</source>
          <target state="translated">시퀀스 설정 인 경우 장고 자체는 목록을 사용하지만 이는 단지 규칙입니다.</target>
        </trans-unit>
        <trans-unit id="83441c6a3b1b803a2a49949c9de44602cd36d751" translate="yes" xml:space="preserve">
          <source>For simplifying the selection of a generator use &lt;code&gt;feedgenerator.DefaultFeed&lt;/code&gt; which is currently &lt;code&gt;Rss201rev2Feed&lt;/code&gt;</source>
          <target state="translated">발전기 선택을 단순화하려면 &lt;code&gt;feedgenerator.DefaultFeed&lt;/code&gt; 를 사용 하십시오. 이는 현재 &lt;code&gt;Rss201rev2Feed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8ceee4f01a0611046492d3c5b9cf5e18c66b04e" translate="yes" xml:space="preserve">
          <source>For sites running on a subpath, the &lt;a href=&quot;#django.contrib.admin.AdminSite.each_context&quot;&gt;&lt;code&gt;each_context()&lt;/code&gt;&lt;/a&gt; method checks if the current request has &lt;code&gt;request.META['SCRIPT_NAME']&lt;/code&gt; set and uses that value if &lt;code&gt;site_url&lt;/code&gt; isn&amp;rsquo;t set to something other than &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">하위 경로에서 실행되는 사이트의 경우 &lt;a href=&quot;#django.contrib.admin.AdminSite.each_context&quot;&gt; &lt;code&gt;each_context()&lt;/code&gt; &lt;/a&gt; 메서드는 현재 요청에 &lt;code&gt;request.META['SCRIPT_NAME']&lt;/code&gt; 이 설정되어 있는지 확인하고 &lt;code&gt;site_url&lt;/code&gt; 이 &lt;code&gt;/&lt;/code&gt; 이외의 값으로 설정되어 있지 않으면 해당 값을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d88e7dbe5892b15588501cbdb78f954dbe55235a" translate="yes" xml:space="preserve">
          <source>For sites that should only be accessed over HTTPS, you can instruct modern browsers to refuse to connect to your domain name via an insecure connection (for a given period of time) by setting the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;&amp;ldquo;Strict-Transport-Security&amp;rdquo; header&lt;/a&gt;. This reduces your exposure to some SSL-stripping man-in-the-middle (MITM) attacks.</source>
          <target state="translated">HTTPS를 통해서만 액세스해야하는 사이트의 경우, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;&quot;Strict-Transport-Security&quot;헤더&lt;/a&gt; 를 설정하여 최신 브라우저가 안전하지 않은 연결을 통해 (지정된 시간 동안) 도메인 이름에 대한 연결을 거부하도록 지시 할 수 있습니다 . 이렇게하면 SSL을 사용하는 MITM (man-in-the-middle) 공격에 대한 노출이 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="060b3b6339590923baf49d02d89a5fd13364954d" translate="yes" xml:space="preserve">
          <source>For small projects, this isn&amp;rsquo;t a big deal, because you can keep the static files somewhere your web server can find it. However, in bigger projects &amp;ndash; especially those comprised of multiple apps &amp;ndash; dealing with the multiple sets of static files provided by each application starts to get tricky.</source>
          <target state="translated">소규모 프로젝트의 경우 웹 서버가 찾을 수있는 곳에 정적 파일을 보관할 수 있기 때문에 큰 문제가되지 않습니다. 그러나 더 큰 프로젝트, 특히 여러 앱으로 구성된 프로젝트에서는 각 응용 프로그램에서 제공하는 여러 정적 파일 세트를 처리하기가 까다로워지기 시작합니다.</target>
        </trans-unit>
        <trans-unit id="98244e053dd849bb49cb94789a244fc850fca33d" translate="yes" xml:space="preserve">
          <source>For subclasses of &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;, the password field will be marked as &amp;ldquo;dirty&amp;rdquo; when calling &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt; which triggers a call to &lt;code&gt;password_changed()&lt;/code&gt; after the user is saved.</source>
          <target state="translated">&lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; 의&lt;/a&gt; 서브 클래스의 경우 , 사용자가 저장된 후 &lt;code&gt;password_changed()&lt;/code&gt; 대한 호출을 트리거하는 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.set_password&quot;&gt; &lt;code&gt;set_password()&lt;/code&gt; &lt;/a&gt; 를 호출하면 비밀번호 필드가 &quot;더티&quot;로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="7d318e407a6068120e838ea61855cc437bf86be2" translate="yes" xml:space="preserve">
          <source>For template blocks</source>
          <target state="translated">템플릿 블록</target>
        </trans-unit>
        <trans-unit id="e232fed1b6bcfa5d4b03f84ef89534f5bc33dc67" translate="yes" xml:space="preserve">
          <source>For testing purposes it&amp;rsquo;s often useful to change a setting temporarily and revert to the original value after running the testing code. For this use case Django provides a standard Python context manager (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0343&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 343&lt;/strong&gt;&lt;/a&gt;) called &lt;a href=&quot;#django.test.SimpleTestCase.settings&quot;&gt;&lt;code&gt;settings()&lt;/code&gt;&lt;/a&gt;, which can be used like this:</source>
          <target state="translated">테스트 목적으로 테스트 코드를 실행 한 후 설정을 일시적으로 변경하고 원래 값으로 되 돌리는 것이 유용한 경우가 많습니다. 이 사용 사례를 위해 Django는 &lt;a href=&quot;#django.test.SimpleTestCase.settings&quot;&gt; &lt;code&gt;settings()&lt;/code&gt; &lt;/a&gt; 이라는 표준 Python 컨텍스트 관리자 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0343&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 343&lt;/strong&gt;&lt;/a&gt; 참조 )를 제공하며 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a3f172015e88c657224148a415ba18aa223013e" translate="yes" xml:space="preserve">
          <source>For tests involving models with &lt;code&gt;managed=False&lt;/code&gt;, it&amp;rsquo;s up to you to ensure the correct tables are created as part of the test setup.</source>
          <target state="translated">&lt;code&gt;managed=False&lt;/code&gt; 인 모델과 관련된 테스트의 경우 테스트 설정의 일부로 올바른 테이블을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="2f9c0332095ab8a71d4aec460d84e568f37e8252" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pre_add&lt;/code&gt; and &lt;code&gt;post_add&lt;/code&gt; actions, this is a set of primary key values that will be, or have been, added to the relation. This may be a subset of the values submitted to be added, since inserts must filter existing values in order to avoid a database &lt;code&gt;IntegrityError&lt;/code&gt;.</source>
          <target state="translated">를 들어 &lt;code&gt;pre_add&lt;/code&gt; 및 &lt;code&gt;post_add&lt;/code&gt; 행동이 관계에 추가 될 것입니다, 또는왔다 기본 키 값의 집합입니다. 삽입은 데이터베이스 &lt;code&gt;IntegrityError&lt;/code&gt; 를 피하기 위해 기존 값을 필터링해야하므로 추가 될 제출 된 값의 서브 세트 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a84d3af82f5a18d83c42438eac1f3056429345b" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pre_clear&lt;/code&gt; and &lt;code&gt;post_clear&lt;/code&gt; actions, this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">를 들어 &lt;code&gt;pre_clear&lt;/code&gt; 및 &lt;code&gt;post_clear&lt;/code&gt; 행동이 없다 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="329abb7b505a558db32777a7ff6f0809b6e12296" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pre_remove&lt;/code&gt; and &lt;code&gt;post_remove&lt;/code&gt; actions, this is a set of primary key values that was submitted to be removed from the relation. This is not dependent on whether the values actually will be, or have been, removed. In particular, non-existent values may be submitted, and will appear in &lt;code&gt;pk_set&lt;/code&gt;, even though they have no effect on the database.</source>
          <target state="translated">를 들어 &lt;code&gt;pre_remove&lt;/code&gt; 및 &lt;code&gt;post_remove&lt;/code&gt; 행동이 관계로부터 제거 될 제출 된 기본 키 값의 집합입니다. 값이 실제로 제거되는지 또는 제거되었는지 여부에 따라 달라지지 않습니다. 특히 존재하지 않는 값이 제출 될 수 있으며 데이터베이스에 영향을 미치지 않더라도 &lt;code&gt;pk_set&lt;/code&gt; 에 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="74408406b60615d45743eab1ddfc47c602695214" translate="yes" xml:space="preserve">
          <source>For the GeoJSON format, the SRID is set based on the &lt;code&gt;crs&lt;/code&gt; member. If &lt;code&gt;crs&lt;/code&gt; isn&amp;rsquo;t provided, the SRID defaults to 4326.</source>
          <target state="translated">GeoJSON 형식의 경우 SRID는 &lt;code&gt;crs&lt;/code&gt; 멤버를 기반으로 설정 됩니다. 경우 &lt;code&gt;crs&lt;/code&gt; 4326으로의 SRID 기본값으로 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f111011b98ce2f688d0ddb4f6a33b857e6e115a" translate="yes" xml:space="preserve">
          <source>For the best performance, we&amp;rsquo;re using the queryset&amp;rsquo;s &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-update&quot;&gt;update method&lt;/a&gt;. Other types of actions might need to deal with each object individually; in these cases we&amp;rsquo;d iterate over the queryset:</source>
          <target state="translated">최상의 성능을 위해 queryset의 &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-update&quot;&gt;update 메소드를&lt;/a&gt; 사용하고 있습니다. 다른 유형의 작업은 각 개체를 개별적으로 처리해야 할 수도 있습니다. 이 경우 쿼리 세트를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="4c23379d68f25c8a9acdf7f3ba3f8e6d99a624b7" translate="yes" xml:space="preserve">
          <source>For the case of building up small HTML fragments, this function is to be preferred over string interpolation using &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;str.format()&lt;/code&gt; directly, because it applies escaping to all arguments - just like the template system applies escaping by default.</source>
          <target state="translated">작은 HTML 조각을 작성하는 경우이 함수는 템플릿 시스템이 기본적으로 이스케이프를 적용하는 것처럼 모든 인수에 이스케이프를 적용하기 때문에 &lt;code&gt;%&lt;/code&gt; 또는 &lt;code&gt;str.format()&lt;/code&gt; 직접 사용하는 문자열 보간보다 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="f78e1588dfac1ec79444a4df142e4e4efb203d49" translate="yes" xml:space="preserve">
          <source>For the contents of &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;, Django tries calling the methods &lt;code&gt;item_title()&lt;/code&gt; and &lt;code&gt;item_description()&lt;/code&gt; on the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. They are passed a single parameter, &lt;code&gt;item&lt;/code&gt;, which is the object itself. These are optional; by default, the string representation of the object is used for both.</source>
          <target state="translated">&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; 의 내용을 위해 Django는 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 에서 &lt;code&gt;item_title()&lt;/code&gt; 및 &lt;code&gt;item_description()&lt;/code&gt; 메소드를 호출하려고 시도합니다 . 객체 자체 인 단일 매개 변수 &lt;code&gt;item&lt;/code&gt; 이 전달 됩니다. 이들은 선택 사항입니다. 기본적으로 객체의 문자열 표현은 두 가지 모두에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3a100b67f88e203f9dcb6a68b5070534af27c2cc" translate="yes" xml:space="preserve">
          <source>For the examples in this document, we&amp;rsquo;ll use the models defined in &lt;a href=&quot;../../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt;.</source>
          <target state="translated">이 문서의 예에서는 &lt;a href=&quot;../../../topics/db/queries&quot;&gt;쿼리 만들기에&lt;/a&gt; 정의 된 모델을 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="0de8894d683bc582fefb2e2661e012c06af647e2" translate="yes" xml:space="preserve">
          <source>For the minimalists</source>
          <target state="translated">미니멀리스트를 위해</target>
        </trans-unit>
        <trans-unit id="cef7fefd5112f5c97b053b255b193024fa56f694" translate="yes" xml:space="preserve">
          <source>For the most part though, this tutorial tries to explain as much as possible, so that it can be of use to the widest audience.</source>
          <target state="translated">그러나 대부분의 경우이 학습서는 가능한 많은 설명을 시도하여 광범위한 사용자에게 유용 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="4eda37e1e901383da0e9bcd8f2f89429a892e9c5" translate="yes" xml:space="preserve">
          <source>For the related lookup you can supply a primary key value or pass the related object explicitly:</source>
          <target state="translated">관련 조회의 경우 기본 키 값을 제공하거나 관련 객체를 명시 적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1c32504b6eeb2becd5604bc65d36c6e055e0d02" translate="yes" xml:space="preserve">
          <source>For the sake of clarity, this example contains only the bare minimum necessary to use the Django test runner. You may want to add command-line options for controlling verbosity, passing in specific test labels to run, etc.</source>
          <target state="translated">명확성을 기하기 위해이 예제에는 Django 테스트 러너를 사용하는 데 필요한 최소값 만 포함되어 있습니다. 자세한 제어, 실행을 위해 특정 테스트 레이블 전달 등을위한 명령 행 옵션을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f11d49a6aae49822b402265acef00a873377414" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, though, if you really want the local time in the current time zone, here&amp;rsquo;s how you can obtain it:</source>
          <target state="translated">그러나 완전성을 위해 현재 시간대의 현지 시간을 원한다면 다음과 같이 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da486ab20d9f226af43411c6fd7ef259674537fc" translate="yes" xml:space="preserve">
          <source>For the treatment of microseconds, see &lt;a href=&quot;#django.forms.DateTimeInput&quot;&gt;&lt;code&gt;DateTimeInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마이크로 초 처리에 대해서는 &lt;a href=&quot;#django.forms.DateTimeInput&quot;&gt; &lt;code&gt;DateTimeInput&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dbe5bec942d606e0b22e5c8723738bfa4f7ae50" translate="yes" xml:space="preserve">
          <source>For these reasons, time zone support is enabled by default in new projects, and you should keep it unless you have a very good reason not to.</source>
          <target state="translated">이러한 이유로 새 프로젝트에서는 표준 시간대 지원이 기본적으로 활성화되어 있으며, 적절한 이유가없는 한이를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="6bfb383b014941483feb63040fddc8352fc62beb" translate="yes" xml:space="preserve">
          <source>For these situations, Django allows you to specify the model that will be used to govern the many-to-many relationship. You can then put extra fields on the intermediate model. The intermediate model is associated with the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; argument to point to the model that will act as an intermediary. For our musician example, the code would look something like this:</source>
          <target state="translated">이러한 상황에서 Django를 사용하면 다 대다 관계를 관리하는 데 사용될 모델을 지정할 수 있습니다. 그런 다음 중간 모델에 추가 필드를 넣을 수 있습니다. 중간 모델은 중간 인수 역할을하는 모델을 가리 키기 위해 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt; 인수를 사용 하여 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 와 연관됩니다 . 음악가 예제의 경우 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1e718289bca18a5cf08106be68227bdbbc0cff38" translate="yes" xml:space="preserve">
          <source>For this example, we&amp;rsquo;ll migrate a collection of SHA1 hashes to use PBKDF2(SHA1(password)) and add the corresponding password hasher for checking if a user entered the correct password on login. We assume we&amp;rsquo;re using the built-in &lt;code&gt;User&lt;/code&gt; model and that our project has an &lt;code&gt;accounts&lt;/code&gt; app. You can modify the pattern to work with any algorithm or with a custom user model.</source>
          <target state="translated">이 예에서는 PBKDF2 (SHA1 (password))를 사용하도록 SHA1 해시 모음을 마이그레이션하고 사용자가 로그인시 올바른 비밀번호를 입력했는지 확인하기 위해 해당 비밀번호 걸쇠를 추가합니다. 기본 제공 &lt;code&gt;User&lt;/code&gt; 모델을 사용하고 있고 프로젝트에 &lt;code&gt;accounts&lt;/code&gt; 앱 이 있다고 가정 합니다. 모든 알고리즘 또는 사용자 정의 사용자 모델에서 작동하도록 패턴을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c82d36cbfcfb825dad80c2b48699e4cff79ce4f" translate="yes" xml:space="preserve">
          <source>For this reason, Django also provides a number of mixins that provide more discrete functionality. Template rendering, for instance, is encapsulated in the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt;. The Django reference documentation contains &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;full documentation of all the mixins&lt;/a&gt;.</source>
          <target state="translated">이러한 이유로 Django는 더 많은 기능을 제공하는 여러 믹스 인도 제공합니다. 예를 들어 템플릿 렌더링은 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 에&lt;/a&gt; 캡슐화되어 있습니다. Django 참조 문서에는 &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;모든 믹스 인에 대한 전체 문서가&lt;/a&gt; 들어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f36392b7c3c203f49f6a436c5f3171e9150a05e" translate="yes" xml:space="preserve">
          <source>For this reason, Django provides a helper class that lets you create a &lt;code&gt;Form&lt;/code&gt; class from a Django model.</source>
          <target state="translated">이러한 이유로 Django는 Django 모델에서 &lt;code&gt;Form&lt;/code&gt; 클래스 를 만들 수있는 도우미 클래스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="5892445e676a151c2605ebc83042a842018720fc" translate="yes" xml:space="preserve">
          <source>For this reason, it&amp;rsquo;s particularly important that all the models you&amp;rsquo;re using be defined in applications listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. Otherwise, backwards relations may not work properly.</source>
          <target state="translated">따라서 사용중인 모든 모델을 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 나열된 애플리케이션에서 정의해야 합니다. 그렇지 않으면 역방향 관계가 제대로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03b8a2a8f9a2165b5055263ab7201d440c952bd7" translate="yes" xml:space="preserve">
          <source>For this reason, you should use named-string interpolation (e.g., &lt;code&gt;%(day)s&lt;/code&gt;) instead of positional interpolation (e.g., &lt;code&gt;%s&lt;/code&gt; or &lt;code&gt;%d&lt;/code&gt;) whenever you have more than a single parameter. If you used positional interpolation, translations wouldn&amp;rsquo;t be able to reorder placeholder text.</source>
          <target state="translated">이러한 이유로 단일 매개 변수가 여러 개있을 때마다 위치 보간 (예 : &lt;code&gt;%s&lt;/code&gt; 또는 &lt;code&gt;%d&lt;/code&gt; ) 대신 명명 된 문자열 보간 (예 : &lt;code&gt;%(day)s&lt;/code&gt; )을 사용해야합니다. 위치 보간을 사용한 경우 번역에서 자리 표시 자 텍스트의 순서를 바꿀 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="58b0059d8e2444811f86ebb88bfabb7ef1ee4a71" translate="yes" xml:space="preserve">
          <source>For this to work, the &lt;code&gt;ForeignKey&lt;/code&gt; on the referencing model must have &lt;code&gt;null=True&lt;/code&gt;.</source>
          <target state="translated">이것이 작동 하려면 참조 모델 의 &lt;code&gt;ForeignKey&lt;/code&gt; 에 &lt;code&gt;null=True&lt;/code&gt; 가 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="a8f825ebd874543d22305c1bc6781ad3c861ff54" translate="yes" xml:space="preserve">
          <source>For this tutorial and the ticket we&amp;rsquo;re working on, testing against SQLite is sufficient, however, it&amp;rsquo;s possible (and sometimes necessary) to &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;run the tests using a different database&lt;/a&gt;.</source>
          <target state="translated">이 튜토리얼과 우리가 작업하는 티켓의 경우 SQLite에 대한 테스트는 충분하지만 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;다른 데이터베이스를 사용하여 테스트&lt;/a&gt; 를 실행할 수도 있습니다 (때로는 필요) .</target>
        </trans-unit>
        <trans-unit id="19c61fad811ab178452b311f893f15851eed93a4" translate="yes" xml:space="preserve">
          <source>For this tutorial and the ticket we&amp;rsquo;re working on, testing against SQLite is sufficient, however, it&amp;rsquo;s possible (and sometimes necessary) to &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;run the tests using a different database&lt;/a&gt;.</source>
          <target state="translated">For this tutorial and the ticket we&amp;rsquo;re working on, testing against SQLite is sufficient, however, it&amp;rsquo;s possible (and sometimes necessary) to &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;run the tests using a different database&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6bc5dc82579cf1e38bf802400f5653a407a69212" translate="yes" xml:space="preserve">
          <source>For this tutorial, we expect that you have at least a basic understanding of how Django works. This means you should be comfortable going through the existing tutorials on &lt;a href=&quot;tutorial01&quot;&gt;writing your first Django app&lt;/a&gt;. In addition, you should have a good understanding of Python itself. But if you don&amp;rsquo;t, &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt; is a fantastic (and free) online book for beginning Python programmers.</source>
          <target state="translated">이 튜토리얼에서는 최소한 장고의 작동 방식에 대한 기본적인 이해가 필요합니다. 이것은 당신이 &lt;a href=&quot;tutorial01&quot;&gt;첫 번째 장고 앱&lt;/a&gt; 을 작성 하는 것에 대한 기존의 튜토리얼을 편안하게 수행해야 함을 의미합니다 . 또한 파이썬 자체에 대해 잘 알고 있어야합니다. 그러나 그렇지 않다면 &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt; 은 Python 프로그래머를 시작하는 환상적인 온라인 책입니다.</target>
        </trans-unit>
        <trans-unit id="e3383d2cd67e4a5fda4c38dfc0426ba59217d3de" translate="yes" xml:space="preserve">
          <source>For this tutorial, we&amp;rsquo;ll work on a &amp;ldquo;fake ticket&amp;rdquo; as a case study. Here are the imaginary details:</source>
          <target state="translated">이 자습서에서는 사례 연구로 &quot;가짜 티켓&quot;에 대해 작업합니다. 상상의 세부 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="003691caf4ec5210cc2d137f90809630e129ddc7" translate="yes" xml:space="preserve">
          <source>For this tutorial, you&amp;rsquo;ll need Git installed to download the current development version of Django and to generate patch files for the changes you make.</source>
          <target state="translated">이 튜토리얼에서는 Django의 현재 개발 버전을 다운로드하고 변경 사항에 대한 패치 파일을 생성하려면 Git이 설치되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3ba7541a55fc9940dde992c1f6782e4722e85bb9" translate="yes" xml:space="preserve">
          <source>For this, Django provides full support for cookie- and session-based messaging, for both anonymous and authenticated users. The messages framework allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one). Every message is tagged with a specific &lt;code&gt;level&lt;/code&gt; that determines its priority (e.g., &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt;).</source>
          <target state="translated">이를 위해 Django는 익명 사용자와 인증 된 사용자 모두를 위해 쿠키 및 세션 기반 메시징을 완벽하게 지원합니다. 메시지 프레임 워크를 사용하면 한 요청에 메시지를 임시로 저장하고 후속 요청 (일반적으로 다음 요청)에 표시하기 위해 메시지를 검색 할 수 있습니다. 모든 메시지에는 우선 순위를 결정 하는 특정 &lt;code&gt;level&lt;/code&gt; (예 : &lt;code&gt;info&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; 또는 &lt;code&gt;error&lt;/code&gt; )이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0f6759276797b410a8844e478a10070c4aed5dcb" translate="yes" xml:space="preserve">
          <source>For those cases, it&amp;rsquo;s a good idea to write your own &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt;&lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt;&lt;/a&gt; implementation using a full-text indexed search.</source>
          <target state="translated">이러한 경우 전체 텍스트 인덱싱 된 검색을 사용하여 고유 한 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt; &lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt; &lt;/a&gt; 구현 을 작성하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="e0744e2ccd9373d4212b6ab0b38e803815456b58" translate="yes" xml:space="preserve">
          <source>For those templates that cannot be overridden in this way, you may still override them for your entire project by placing the new version in your &lt;code&gt;templates/admin&lt;/code&gt; directory. This is particularly useful to create custom 404 and 500 pages.</source>
          <target state="translated">이러한 방식으로 재정의 할 수없는 템플릿의 경우 새 버전을 &lt;code&gt;templates/admin&lt;/code&gt; 디렉토리 에 배치하여 전체 프로젝트에 대해 템플릿을 재정의 할 수 있습니다 . 이것은 사용자 정의 404 및 500 페이지를 작성하는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b208ce4d25990e2997ea3d38b9396df0cf665967" translate="yes" xml:space="preserve">
          <source>For use in, for example, Django templates, headers can also be looked up using underscores in place of hyphens:</source>
          <target state="translated">예를 들어 Django 템플릿에서 사용하기 위해 하이픈 대신 밑줄을 사용하여 헤더를 찾을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab0a4460c2bfb4fb22cd663d783472b3f97d3b37" translate="yes" xml:space="preserve">
          <source>For user projects wishing to patch the backend that they&amp;rsquo;re using, this code should live in an &lt;a href=&quot;../applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">사용중인 백엔드를 패치하려는 사용자 프로젝트의 경우이 코드는 &lt;a href=&quot;../applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;AppConfig.ready()&lt;/code&gt; &lt;/a&gt; 메서드 에 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="07063566677ca47cd9924e995ca5ba3cec95b3ab" translate="yes" xml:space="preserve">
          <source>For users familiar with &lt;code&gt;GDAL&lt;/code&gt;, this function has a similar functionality to the &lt;code&gt;gdalwarp&lt;/code&gt; command-line utility.</source>
          <target state="translated">&lt;code&gt;GDAL&lt;/code&gt; 에 익숙한 사용자 에게이 기능은 &lt;code&gt;gdalwarp&lt;/code&gt; 명령 줄 유틸리티 와 유사한 기능을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="06bdcf31ea0ff04912d506e7f82bc13ec5bb5e22" translate="yes" xml:space="preserve">
          <source>For users with JavaScript-enabled browsers, an &amp;ldquo;Add another&amp;rdquo; link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the &lt;code&gt;extra&lt;/code&gt; argument.</source>
          <target state="translated">JavaScript 가능 브라우저를 사용하는 사용자의 경우 &lt;code&gt;extra&lt;/code&gt; 인수 의 결과로 제공되는 인라인 외에 추가 인라인을 추가 할 수 있도록 &quot;다른 추가&quot;링크가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="ada8b1c0c7e4762ecd02cc10e6d34c709fb7333c" translate="yes" xml:space="preserve">
          <source>For words that don&amp;rsquo;t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma.</source>
          <target state="translated">단순 접미사로 복수형이 아닌 단어의 경우 쉼표로 구분하여 단수형과 복수형 접미사를 모두 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9189cf15c77477aa96788ff42bdc189cfdeeae3d" translate="yes" xml:space="preserve">
          <source>For words that require a suffix other than &lt;code&gt;'s'&lt;/code&gt;, you can provide an alternate suffix as a parameter to the filter.</source>
          <target state="translated">&lt;code&gt;'s'&lt;/code&gt; 이외의 접미사가 필요한 단어의 경우 대체 접미사를 매개 변수로 필터에 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b98fa36f3c1fac6c6c9fb6936769d4049b9c86d9" translate="yes" xml:space="preserve">
          <source>Forbids access to user agents in the &lt;a href=&quot;settings#std:setting-DISALLOWED_USER_AGENTS&quot;&gt;&lt;code&gt;DISALLOWED_USER_AGENTS&lt;/code&gt;&lt;/a&gt; setting, which should be a list of compiled regular expression objects.</source>
          <target state="translated">컴파일 된 정규식 객체의 목록이어야 하는 &lt;a href=&quot;settings#std:setting-DISALLOWED_USER_AGENTS&quot;&gt; &lt;code&gt;DISALLOWED_USER_AGENTS&lt;/code&gt; &lt;/a&gt; 설정 에서 사용자 에이전트에 대한 액세스를 금지 합니다.</target>
        </trans-unit>
        <trans-unit id="e9bb65c5b1c2c41fc169fe3b9894145c1c5118d6" translate="yes" xml:space="preserve">
          <source>Forces a single value to be printed without localization.</source>
          <target state="translated">현지화없이 단일 값을 강제로 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="3f04aae7964fff0403812c7d9880f99e05da0dca" translate="yes" xml:space="preserve">
          <source>Forces colorization of the command output if it would otherwise be disabled as discussed in &lt;a href=&quot;#syntax-coloring&quot;&gt;Syntax coloring&lt;/a&gt;. For example, you may want to pipe colored output to another command.</source>
          <target state="translated">&lt;a href=&quot;#syntax-coloring&quot;&gt;구문 색상 표시&lt;/a&gt; 에서 설명한대로 명령 출력이 비활성화 된 경우 명령 출력을 강제로 색상 화합니다 . 예를 들어, 컬러 출력을 다른 명령으로 파이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="822e3ae3ae56ada85c883e445685735f0bbbcec4" translate="yes" xml:space="preserve">
          <source>Forces conversion of a single value to UTC.</source>
          <target state="translated">단일 값을 UTC로 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="5caa08849dd0053ad328db7f9b3ff99f454470ea" translate="yes" xml:space="preserve">
          <source>Forces conversion of a single value to an arbitrary timezone.</source>
          <target state="translated">단일 값을 임의의 시간대로 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e426af8da5cef513c96ebd4f7c9bfa88a37b7b60" translate="yes" xml:space="preserve">
          <source>Forces conversion of a single value to the current time zone.</source>
          <target state="translated">단일 값을 현재 시간대로 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a07ffdebe3aa947ee8237843fa13c48509367e20" translate="yes" xml:space="preserve">
          <source>Forces localization of a single value.</source>
          <target state="translated">단일 값을 현지화합니다.</target>
        </trans-unit>
        <trans-unit id="9e0dd243e1a006f16098fbe2024ebd28fadc865e" translate="yes" xml:space="preserve">
          <source>Forces the result type of &lt;code&gt;expression&lt;/code&gt; to be the one from &lt;code&gt;output_field&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 의 결과 유형이 &lt;code&gt;output_field&lt;/code&gt; 의 결과 유형이 되도록합니다 .</target>
        </trans-unit>
        <trans-unit id="f2b3c637d3f8c4c084704e12352f97315c5d4107" translate="yes" xml:space="preserve">
          <source>Forcing an INSERT or UPDATE</source>
          <target state="translated">INSERT 또는 UPDATE 강제</target>
        </trans-unit>
        <trans-unit id="530998ad30299518dd632fa0a637000def19dde4" translate="yes" xml:space="preserve">
          <source>Foreign keys and other relational fields are treated a little bit differently:</source>
          <target state="translated">외래 키 및 기타 관계 필드는 약간 다르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="04c75ed6126142c00cbf64860dcf32223aa3747e" translate="yes" xml:space="preserve">
          <source>Foreign keys have the PK of the linked object as property value. ManyToMany-relations are serialized for the model that defines them and are represented as a list of PKs.</source>
          <target state="translated">외래 키에는 연결된 개체의 PK가 속성 값으로 있습니다. ManyToMany 관계는이를 정의하는 모델에 대해 직렬화되며 PK 목록으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="745daba0e4002e3d54aa9d6b189f69ba7c4cc16a" translate="yes" xml:space="preserve">
          <source>ForeignKeys which are set to &lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt;&lt;code&gt;DO_NOTHING&lt;/code&gt; do not prevent taking the fast-path in deletion.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt; &lt;code&gt;DO_NOTHING&lt;/code&gt; 으로 설정된 ForeignKey 는 빠른 경로의 삭제를 방해하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2489b02dae69de015f9de7cb4db5c89918c8cd7d" translate="yes" xml:space="preserve">
          <source>Form Assets (the &lt;code&gt;Media&lt;/code&gt; class)</source>
          <target state="translated">양식 자산 ( &lt;code&gt;Media&lt;/code&gt; 클래스)</target>
        </trans-unit>
        <trans-unit id="01a5a80fc4c5200a64766a92d4a28630919a7770" translate="yes" xml:space="preserve">
          <source>Form Assets (the Media class)</source>
          <target state="translated">양식 자산 (미디어 클래스)</target>
        </trans-unit>
        <trans-unit id="ec53fec3838c580c1606daf2ba913c19e7f397ef" translate="yes" xml:space="preserve">
          <source>Form and field validation</source>
          <target state="translated">양식 및 필드 검증</target>
        </trans-unit>
        <trans-unit id="09f0d1b7d7b094ba60d98ec9c162680471e8fcdb" translate="yes" xml:space="preserve">
          <source>Form data sent back to a Django website is processed by a view, generally the same view which published the form. This allows us to reuse some of the same logic.</source>
          <target state="translated">Django 웹 사이트로 다시 전송 된 양식 데이터는 일반적으로 양식을 게시 한보기와 ​​같은보기로 처리됩니다. 이를 통해 동일한 논리를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="132a07dcd88034f7872ce5ce9eeba14f9347a298" translate="yes" xml:space="preserve">
          <source>Form field</source>
          <target state="translated">양식 필드</target>
        </trans-unit>
        <trans-unit id="ca3178e6c90e7443b1f4979a04f5a830118e6a98" translate="yes" xml:space="preserve">
          <source>Form field classes</source>
          <target state="translated">양식 필드 클래스</target>
        </trans-unit>
        <trans-unit id="9b22fafbf6163cf73da647f5d6f7de7e69bb5b01" translate="yes" xml:space="preserve">
          <source>Form field default cleaning</source>
          <target state="translated">양식 필드 기본 청소</target>
        </trans-unit>
        <trans-unit id="1f6db618e80ce9357df221435126e47594b4defe" translate="yes" xml:space="preserve">
          <source>Form fields</source>
          <target state="translated">양식 필드</target>
        </trans-unit>
        <trans-unit id="06186bd1d81c2e104f10dd5dc873f3af209bd827" translate="yes" xml:space="preserve">
          <source>Form handling with class-based views</source>
          <target state="translated">클래스 기반 뷰를 사용한 양식 처리</target>
        </trans-unit>
        <trans-unit id="8b7e8e44aecc63eea58ade5e9e8e168e11c4b85f" translate="yes" xml:space="preserve">
          <source>Form inheritance</source>
          <target state="translated">양식 상속</target>
        </trans-unit>
        <trans-unit id="8b5ca657a23a71cab768e9a3681b5b2d4ab7ea4e" translate="yes" xml:space="preserve">
          <source>Form processing generally has 3 paths:</source>
          <target state="translated">양식 처리에는 일반적으로 3 가지 경로가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d23233f6cbe877e4c4d726618ca650d72fcebb80" translate="yes" xml:space="preserve">
          <source>Form rendering options</source>
          <target state="translated">양식 렌더링 옵션</target>
        </trans-unit>
        <trans-unit id="5f9b2b4c718c49d0b300d0a87b4e55a27a7053f3" translate="yes" xml:space="preserve">
          <source>Form submission</source>
          <target state="translated">양식 제출</target>
        </trans-unit>
        <trans-unit id="25e11f455fdefcd79d2329575ecb3c7c9746d479" translate="yes" xml:space="preserve">
          <source>Form validation happens when the data is cleaned. If you want to customize this process, there are various places to make changes, each one serving a different purpose. Three types of cleaning methods are run during form processing. These are normally executed when you call the &lt;code&gt;is_valid()&lt;/code&gt; method on a form. There are other things that can also trigger cleaning and validation (accessing the &lt;code&gt;errors&lt;/code&gt; attribute or calling &lt;code&gt;full_clean()&lt;/code&gt; directly), but normally they won&amp;rsquo;t be needed.</source>
          <target state="translated">데이터를 정리하면 양식 유효성 검사가 수행됩니다. 이 프로세스를 사용자 정의하려면 각기 다른 용도로 사용되는 다양한 변경 위치가 있습니다. 양식 처리 중에 세 가지 유형의 청소 방법이 실행됩니다. 이들은 일반적으로 폼 에서 &lt;code&gt;is_valid()&lt;/code&gt; 메서드 를 호출 할 때 실행됩니다 . 정리 및 유효성 검사 ( &lt;code&gt;errors&lt;/code&gt; 속성 액세스 또는 &lt;code&gt;full_clean()&lt;/code&gt; 직접 호출 )를 트리거 할 수있는 다른 방법도 있지만 일반적으로 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18ff0c843b5c4606dfbf89086c0062c96a51ee51" translate="yes" xml:space="preserve">
          <source>Form widgets</source>
          <target state="translated">양식 위젯</target>
        </trans-unit>
        <trans-unit id="69b17d1e5286bd4a97be2e001b1a1ed61189d9d0" translate="yes" xml:space="preserve">
          <source>FormView inherits &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; so &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; can be used here.</source>
          <target state="translated">FormView는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 을&lt;/a&gt; 상속 하므로 여기에서 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; 을&lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="f761dac6d61c3dab28b3202e4de799514d3abe49" translate="yes" xml:space="preserve">
          <source>Format character</source>
          <target state="translated">문자 형식</target>
        </trans-unit>
        <trans-unit id="2783ae4db40a146cdb58fa9a0e4c57e3159ff9f2" translate="yes" xml:space="preserve">
          <source>Format localization</source>
          <target state="translated">현지화 형식</target>
        </trans-unit>
        <trans-unit id="db9ee596ec25be3f524ab362d52ac677a6533537" translate="yes" xml:space="preserve">
          <source>Formats a date according to the given format.</source>
          <target state="translated">주어진 형식에 따라 날짜를 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="28c9a03c31eaadefb25c3d8a7eddaff4dda4cbfa" translate="yes" xml:space="preserve">
          <source>Formats a date as the time since that date (e.g., &amp;ldquo;4 days, 6 hours&amp;rdquo;).</source>
          <target state="translated">날짜를 그 날짜 이후의 시간으로 포맷합니다 (예 : &quot;4 일, 6 시간&quot;).</target>
        </trans-unit>
        <trans-unit id="6a86188cd1a56d88dcdc7bb13c27bc8b1c0b3dd0" translate="yes" xml:space="preserve">
          <source>Formats a time according to the given format.</source>
          <target state="translated">주어진 형식에 따라 시간을 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="93dc7127a492726376ff651ba9b34d2497d31b92" translate="yes" xml:space="preserve">
          <source>Formats and translates &lt;a href=&quot;#django.contrib.admin.models.LogEntry.change_message&quot;&gt;&lt;code&gt;change_message&lt;/code&gt;&lt;/a&gt; into the current user language. Messages created before Django 1.10 will always be displayed in the language in which they were logged.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.models.LogEntry.change_message&quot;&gt; &lt;code&gt;change_message&lt;/code&gt; &lt;/a&gt; 를 현재 사용자 언어로 형식화 하고 변환 합니다. Django 1.10 이전에 생성 된 메시지는 항상 기록 된 언어로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="953c2178bd89fc436574c8caeaf590cdaa172ee1" translate="yes" xml:space="preserve">
          <source>Formats the time to match the &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html#section-5.2.14&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1123#section-5.2.14&lt;/strong&gt;&lt;/a&gt; date format as specified by HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.1.1&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.1.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.1.1&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231 # section-7.1.1.1에&lt;/strong&gt;&lt;/a&gt; 지정된대로 &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html#section-5.2.14&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1123 # section-5.2.14&lt;/strong&gt;&lt;/a&gt; 날짜 형식과 일치하도록 시간을 형식화합니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28ba1c123ca93374d5c3f871a89409c3a8a7b027" translate="yes" xml:space="preserve">
          <source>Formats the time to match the &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html#section-5.2.14&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 1123#section-5.2.14&lt;/strong&gt;&lt;/a&gt; date format as specified by HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.1.1&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.1.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Formats the time to match the &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html#section-5.2.14&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 1123#section-5.2.14&lt;/strong&gt;&lt;/a&gt; date format as specified by HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.1.1&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.1.1&lt;/strong&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d6fd4bf74432ce4e2ddad669c637aa42be7e4983" translate="yes" xml:space="preserve">
          <source>Formats the value like a &amp;ldquo;human-readable&amp;rdquo; file size (i.e. &lt;code&gt;'13 KB'&lt;/code&gt;, &lt;code&gt;'4.1 MB'&lt;/code&gt;, &lt;code&gt;'102 bytes'&lt;/code&gt;, etc.). For example:</source>
          <target state="translated">값을 &quot;사람이 읽을 수있는&quot;파일 크기 (예 : &lt;code&gt;'13 KB'&lt;/code&gt; , &lt;code&gt;'4.1 MB'&lt;/code&gt; 4.1MB ' , &lt;code&gt;'102 bytes'&lt;/code&gt; 등)로 형식화합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5d20ce17b112270cc159f79b2633904b994c0e40" translate="yes" xml:space="preserve">
          <source>Formats the value like a &amp;lsquo;human-readable&amp;rsquo; file size (i.e. &lt;code&gt;'13 KB'&lt;/code&gt;, &lt;code&gt;'4.1 MB'&lt;/code&gt;, &lt;code&gt;'102 bytes'&lt;/code&gt;, etc.).</source>
          <target state="translated">'사람이 읽을 수있는'파일 크기 (예 : &lt;code&gt;'13 KB'&lt;/code&gt; , &lt;code&gt;'4.1 MB'&lt;/code&gt; 4.1MB ' , &lt;code&gt;'102 bytes'&lt;/code&gt; 등) 와 같은 값을 형식화 합니다.</target>
        </trans-unit>
        <trans-unit id="cc8ade43c35d4aa9d67e1a79527ff8a39de50a5f" translate="yes" xml:space="preserve">
          <source>Formats the variable according to the argument, a string formatting specifier. This specifier uses the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;printf-style String Formatting&lt;/a&gt; syntax, with the exception that the leading &amp;ldquo;%&amp;rdquo; is dropped.</source>
          <target state="translated">문자열 형식 지정자 인 인수에 따라 변수를 형식화합니다. 이 지정 자는 선행 &quot;%&quot;가 삭제되는 것을 제외 하고 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;printf 스타일 문자열 형식화&lt;/a&gt; 구문을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e235045d3159d9680e6b2ca8af0bb926f4f21e79" translate="yes" xml:space="preserve">
          <source>Formatters</source>
          <target state="translated">Formatters</target>
        </trans-unit>
        <trans-unit id="ae08568bf3e0252178af230ef89a5c406780c364" translate="yes" xml:space="preserve">
          <source>Formatting strings: &lt;code&gt;format_lazy()&lt;/code&gt;</source>
          <target state="translated">문자열 형식화 : &lt;code&gt;format_lazy()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="d89f0c64a4949e7005972d47aa88597204d94d1b" translate="yes" xml:space="preserve">
          <source>Forms and Cross Site Request Forgery protection</source>
          <target state="translated">양식 및 사이트 간 요청 위조 방지</target>
        </trans-unit>
        <trans-unit id="1a78423c2585a7306a030f845b72b53407d6a3d9" translate="yes" xml:space="preserve">
          <source>Forms and view tools for logging in users, or restricting content</source>
          <target state="translated">사용자 로그인 또는 컨텐츠 제한을위한 양식 및보기 도구</target>
        </trans-unit>
        <trans-unit id="abebd9a2b41a12ca79e7f50192b53b0dd9e36099" translate="yes" xml:space="preserve">
          <source>Forms and widgets can specify custom renderer classes.</source>
          <target state="translated">폼과 위젯은 커스텀 렌더러 클래스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3b9595e1333e8d116512ac45e4fceb8697fcd3f" translate="yes" xml:space="preserve">
          <source>Forms in Django</source>
          <target state="translated">장고 양식</target>
        </trans-unit>
        <trans-unit id="3924338526abac54edb63488cd56ed8868605157" translate="yes" xml:space="preserve">
          <source>Formset API reference. For introductory material about formsets, see the &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;Formsets&lt;/a&gt; topic guide.</source>
          <target state="translated">폼셋 API 참조. formsets에 대한 소개 자료를 들어, 참조 &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;Formsets&lt;/a&gt; 주제 가이드.</target>
        </trans-unit>
        <trans-unit id="5d33d2153056db97a572c779e328f56f62c0e59b" translate="yes" xml:space="preserve">
          <source>Formset Functions</source>
          <target state="translated">폼셋 함수</target>
        </trans-unit>
        <trans-unit id="70c7c64d1100244a0311cbea1b3c65a2aa139032" translate="yes" xml:space="preserve">
          <source>Formset validation</source>
          <target state="translated">폼셋 검증</target>
        </trans-unit>
        <trans-unit id="010e393a05ca880fc34de07a101163e70e23785d" translate="yes" xml:space="preserve">
          <source>Formsets</source>
          <target state="translated">Formsets</target>
        </trans-unit>
        <trans-unit id="f0a26bc3be8c85f51f36bd53b9f5be44b92cc34b" translate="yes" xml:space="preserve">
          <source>Formsets can also be indexed into, which returns the corresponding form. If you override &lt;code&gt;__iter__&lt;/code&gt;, you will need to also override &lt;code&gt;__getitem__&lt;/code&gt; to have matching behavior.</source>
          <target state="translated">양식 세트를 색인화하여 해당 양식을 리턴 할 수도 있습니다. &lt;code&gt;__iter__&lt;/code&gt; 을 재정의 하면 일치하는 동작을 갖도록 &lt;code&gt;__getitem__&lt;/code&gt; 을 재정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c1c960670c1e56575f03efb06db7b42a1a10af69" translate="yes" xml:space="preserve">
          <source>Formtools</source>
          <target state="translated">Formtools</target>
        </trans-unit>
        <trans-unit id="36ca1cdf4b812de1cd2a6206ed54566f2f58a310" translate="yes" xml:space="preserve">
          <source>Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct downstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We&amp;rsquo;ll look at some of these headers in the sections that follow.</source>
          <target state="translated">다행히 HTTP는이 문제에 대한 해결책을 제공합니다. 다운 스트림 캐시에 지정된 변수에 따라 캐시 내용이 달라 지도록 지시하고 캐싱 메커니즘에 특정 페이지를 캐시하지 않도록 지시하는 많은 HTTP 헤더가 있습니다. 다음 섹션에서 이러한 헤더 중 일부를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="da0de0fd7e1486d9a80baf7eaf4087001415bfa1" translate="yes" xml:space="preserve">
          <source>Fortunately, there&amp;rsquo;s a little bug in the &lt;code&gt;polls&lt;/code&gt; application for us to fix right away: the &lt;code&gt;Question.was_published_recently()&lt;/code&gt; method returns &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;Question&lt;/code&gt; was published within the last day (which is correct) but also if the &lt;code&gt;Question&lt;/code&gt;&amp;rsquo;s &lt;code&gt;pub_date&lt;/code&gt; field is in the future (which certainly isn&amp;rsquo;t).</source>
          <target state="translated">다행스럽게도 &lt;code&gt;polls&lt;/code&gt; 애플리케이션에 바로 문제를 해결 하는 데 약간의 버그가 있습니다. &lt;code&gt;Question.was_published_recently()&lt;/code&gt; 메소드는 &lt;code&gt;Question&lt;/code&gt; 이 마지막 날 (올바른) 내에 게시되었지만 &lt;code&gt;Question&lt;/code&gt; 의 &lt;code&gt;pub_date&lt;/code&gt; 필드가 다음과 같은 경우 &lt;code&gt;True&lt;/code&gt; 를 반환합니다. 미래에 (확실히 그렇지는 않습니다).</target>
        </trans-unit>
        <trans-unit id="ba4e72261283258434788542ba397135c10f39d8" translate="yes" xml:space="preserve">
          <source>Forward</source>
          <target state="translated">Forward</target>
        </trans-unit>
        <trans-unit id="e425397879f8bd866baafbd76513bb7fcb6a1d82" translate="yes" xml:space="preserve">
          <source>Forward access to one-to-many relationships is cached the first time the related object is accessed. Subsequent accesses to the foreign key on the same object instance are cached. Example:</source>
          <target state="translated">일대 다 관계에 대한 정방향 액세스는 관련 개체에 처음 액세스 할 때 캐시됩니다. 동일한 객체 인스턴스에서 외래 키에 대한 후속 액세스가 캐시됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="cfd2f8e5ac40daa45638695e2abc70d1935d60f3" translate="yes" xml:space="preserve">
          <source>Fractional seconds support for Time and DateTime fields</source>
          <target state="translated">시간 및 날짜 시간 필드에 대한 소수 초 지원</target>
        </trans-unit>
        <trans-unit id="e3e7a3833d19706ebf33b2c3baf8e05deeed7bca" translate="yes" xml:space="preserve">
          <source>Frames</source>
          <target state="translated">Frames</target>
        </trans-unit>
        <trans-unit id="2b70ec7fe162c7688570e8b7b07c45bad5b45c6a" translate="yes" xml:space="preserve">
          <source>Frames narrow the rows that are used for computing the result. They shift from some start point to some specified end point. Frames can be used with and without partitions, but it&amp;rsquo;s often a good idea to specify an ordering of the window to ensure a deterministic result. In a frame, a peer in a frame is a row with an equivalent value, or all rows if an ordering clause isn&amp;rsquo;t present.</source>
          <target state="translated">프레임은 결과 계산에 사용되는 행을 좁 힙니다. 일부 시작점에서 특정 종료점으로 이동합니다. 프레임은 파티션 유무에 관계없이 사용할 수 있지만 결정적인 결과를 보장하기 위해 창의 순서를 지정하는 것이 좋습니다. 프레임에서 프레임의 피어는 동등한 값을 가진 행이거나 ordering 절이없는 경우 모든 행입니다.</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="fcc787d7a7793eefb7e8d97ed3e0b42646c5a64e" translate="yes" xml:space="preserve">
          <source>From MySQL 5.7 onwards and on fresh installs of MySQL 5.6, the default value of the &lt;code&gt;sql_mode&lt;/code&gt; option contains &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt;. That option escalates warnings into errors when data are truncated upon insertion, so Django highly recommends activating a &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-mode.html#sql-mode-strict&quot;&gt;strict mode&lt;/a&gt; for MySQL to prevent data loss (either &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; or &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt;).</source>
          <target state="translated">MySQL 5.7부터 MySQL 5.6을 새로 설치할 때 &lt;code&gt;sql_mode&lt;/code&gt; 옵션 의 기본값 에는 &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; 가 포함 됩니다. 이 옵션은 삽입시 데이터가 잘릴 때 경고를 오류로 에스컬레이션하므로 Django는 데이터 손실을 방지하기 위해 MySQL에 대해 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-mode.html#sql-mode-strict&quot;&gt;엄격한 모드&lt;/a&gt; 를 활성화하는 것이 좋습니다 ( &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; 또는 &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="bc66434aa730a1acc6949077414a98d4f5a85ee6" translate="yes" xml:space="preserve">
          <source>From outward appearances, this looks like the query has retrieved both the first name and last name. However, this example actually issued 3 queries. Only the first names were retrieved by the raw() query &amp;ndash; the last names were both retrieved on demand when they were printed.</source>
          <target state="translated">외형 적으로 보면 쿼리에서 이름과 성을 모두 검색 한 것 같습니다. 그러나이 예제는 실제로 3 개의 쿼리를 발행했습니다. raw () 쿼리는 이름 만 검색했습니다. 성은 인쇄 할 때 요청시 검색되었습니다.</target>
        </trans-unit>
        <trans-unit id="a5490de1ed84545df48870ebcb4ef860e0011f37" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;: An instance of &lt;a href=&quot;settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; representing the currently logged-in user. If the user isn&amp;rsquo;t currently logged in, &lt;code&gt;user&lt;/code&gt; will be set to an instance of &lt;a href=&quot;contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;. You can tell them apart with &lt;a href=&quot;contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;is_authenticated&lt;/code&gt;&lt;/a&gt;, like so:</source>
          <target state="translated">로부터 &lt;a href=&quot;middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; :의 인스턴스 &lt;a href=&quot;settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 이&lt;/a&gt; (가) 현재 로그인 한 사용자 대표. 사용자가 현재 로그인되어 있지 않은 경우, &lt;code&gt;user&lt;/code&gt; 의 인스턴스로 설정됩니다 &lt;a href=&quot;contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; . 다음과 같이 &lt;a href=&quot;contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;is_authenticated&lt;/code&gt; 로&lt;/a&gt; 구별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4390d233b552a299b710cead7d140cf5b140794" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt;&lt;code&gt;SessionMiddleware&lt;/code&gt;&lt;/a&gt;: A readable and writable, dictionary-like object that represents the current session.</source>
          <target state="translated">로부터 &lt;a href=&quot;middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; &lt;/a&gt; : 사전 적 같은 현재 세션을 나타내는 개체, 읽기 및 쓰기.</target>
        </trans-unit>
        <trans-unit id="01c2533dcbf8d501ec5fbb5318b65a5832021da3" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt;&lt;code&gt;CurrentSiteMiddleware&lt;/code&gt;&lt;/a&gt;: An instance of &lt;a href=&quot;contrib/sites#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/sites#django.contrib.sites.requests.RequestSite&quot;&gt;&lt;code&gt;RequestSite&lt;/code&gt;&lt;/a&gt; as returned by &lt;a href=&quot;contrib/sites#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;get_current_site()&lt;/code&gt;&lt;/a&gt; representing the current site.</source>
          <target state="translated">로부터 &lt;a href=&quot;middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt; &lt;code&gt;CurrentSiteMiddleware&lt;/code&gt; &lt;/a&gt; 의 인스턴스 : &lt;a href=&quot;contrib/sites#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;contrib/sites#django.contrib.sites.requests.RequestSite&quot;&gt; &lt;code&gt;RequestSite&lt;/code&gt; &lt;/a&gt; 에 의해 반환 &lt;a href=&quot;contrib/sites#django.contrib.sites.shortcuts.get_current_site&quot;&gt; &lt;code&gt;get_current_site()&lt;/code&gt; &lt;/a&gt; 현재의 위치를 나타내는.</target>
        </trans-unit>
        <trans-unit id="28206f22cdc49d67262192e2ec75592be29e1e10" translate="yes" xml:space="preserve">
          <source>From the command line, &lt;code&gt;cd&lt;/code&gt; into a directory where you&amp;rsquo;d like to store your code, then run the following command:</source>
          <target state="translated">명령 행에서 코드를 저장하려는 디렉토리로 &lt;code&gt;cd&lt;/code&gt; 한 후 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e4203645cf245f13a9b5b7eef7c6236f37d97062" translate="yes" xml:space="preserve">
          <source>From then on, you can insert the current value of the cycle wherever you&amp;rsquo;d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original &lt;code&gt;cycle&lt;/code&gt; tag, you can use another &lt;code&gt;cycle&lt;/code&gt; tag and specify the name of the variable. So, the following template:</source>
          <target state="translated">그런 다음 사이클 이름을 컨텍스트 변수로 참조하여 템플릿에서 원하는 사이클의 현재 값을 삽입 할 수 있습니다. 원래 &lt;code&gt;cycle&lt;/code&gt; 태그와 독립적으로주기를 다음 값으로 이동 하려면 다른 &lt;code&gt;cycle&lt;/code&gt; 태그를 사용하고 변수 이름을 지정할 수 있습니다 . 따라서 다음 템플릿은</target>
        </trans-unit>
        <trans-unit id="abd4b62bdfa157a8de63903b441ea96244832915" translate="yes" xml:space="preserve">
          <source>From within the Application Stack Builder (to run outside of the installer, Start ‣ Programs ‣ PostgreSQL 9.x), select PostgreSQL Database Server 9.x on port 5432 from the drop down menu. Next, expand the Categories ‣ Spatial Extensions menu tree and select PostGIS X.Y for PostgreSQL 9.x.</source>
          <target state="translated">Application Stack Builder 내에서 (설치 프로그램 외부에서 실행하려면 시작 ‣ 프로그램 ‣ PostgreSQL 9.x) 드롭 다운 메뉴에서 포트 5432에서 PostgreSQL 데이터베이스 서버 9.x를 선택하십시오. 그런 다음 Categories ‣ Spatial Extensions 메뉴 트리를 확장하고 PostgreSQL 9.x에 대해 PostGIS XY를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="82e8ee228f3b66a73db0fd74571edb0fe23f9a95" translate="yes" xml:space="preserve">
          <source>From within the Stack Builder (to run outside of the installer, Start ‣ PostgreSQL 12 ‣ Application Stack Builder), select PostgreSQL 12 (x64) on port 5432 from the drop down menu and click next. Expand the Categories ‣ Spatial Extensions menu tree and select PostGIS X.Y for PostgreSQL 12.</source>
          <target state="translated">From within the Stack Builder (to run outside of the installer, Start ‣ PostgreSQL 12 ‣ Application Stack Builder), select PostgreSQL 12 (x64) on port 5432 from the drop down menu and click next. Expand the Categories ‣ Spatial Extensions menu tree and select PostGIS X.Y for PostgreSQL 12.</target>
        </trans-unit>
        <trans-unit id="1e91c62a82f35fb349a4fdae32a9501dc3b57fbe" translate="yes" xml:space="preserve">
          <source>Full DSN and Easy Connect</source>
          <target state="translated">완벽한 DSN 및 간편한 연결</target>
        </trans-unit>
        <trans-unit id="e86b3e585198c95bce6aef7747541d9f96bbd00d" translate="yes" xml:space="preserve">
          <source>Full Python path to the application, e.g. &lt;code&gt;'django.contrib.admin'&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램에 대한 모든 파이썬 경로, 예를 들어 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd23939c002b10cde0a26228db88f6c8b97d3213" translate="yes" xml:space="preserve">
          <source>Full URL: send the entire URL in the &lt;code&gt;Referer&lt;/code&gt; header. For example, if the user is visiting &lt;code&gt;https://example.com/page.html&lt;/code&gt;, the &lt;code&gt;Referer&lt;/code&gt; header would contain &lt;code&gt;&quot;https://example.com/page.html&quot;&lt;/code&gt;.</source>
          <target state="translated">전체 URL : 전체 URL을 &lt;code&gt;Referer&lt;/code&gt; 헤더 에 보냅니다 . 예를 들어 사용자가 &lt;code&gt;https://example.com/page.html&lt;/code&gt; 을 방문 하는 경우 &lt;code&gt;Referer&lt;/code&gt; 헤더에는 &lt;code&gt;&quot;https://example.com/page.html&quot;&lt;/code&gt; 이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="d57d832e96db7330b107b719df41920ebb9f9602" translate="yes" xml:space="preserve">
          <source>Full import path of a serializer class to use for serializing session data. Included serializers are:</source>
          <target state="translated">세션 데이터를 직렬화하는 데 사용할 직렬화 기 클래스의 전체 가져 오기 경로입니다. 포함 된 시리얼 라이저는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8ec461c73e449e432c7752507d77fd5cb2f69a4c" translate="yes" xml:space="preserve">
          <source>Full name or alias(es)</source>
          <target state="translated">성명 또는 별명</target>
        </trans-unit>
        <trans-unit id="24eafd34f2c5835ead6dd64dc0e0e76590fef7aa" translate="yes" xml:space="preserve">
          <source>Full text search</source>
          <target state="translated">전문 검색</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="ef8fc408c280b6c40a19f17f903d961ae3051464" translate="yes" xml:space="preserve">
          <source>Function&amp;rsquo;s summary:</source>
          <target state="translated">기능 요약 :</target>
        </trans-unit>
        <trans-unit id="157df04ee53dd9c987d0ba9575b50f982531a951" translate="yes" xml:space="preserve">
          <source>Functions and classes for working with &amp;ldquo;safe strings&amp;rdquo;: strings that can be displayed safely without further escaping in HTML. Marking something as a &amp;ldquo;safe string&amp;rdquo; means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. &amp;lsquo;&amp;lt;&amp;rsquo;) into the appropriate entities.</source>
          <target state="translated">&quot;안전한 문자열&quot;작업을위한 함수 및 클래스 : HTML에서 더 이상 벗어나지 않고 안전하게 표시 할 수있는 문자열. 무언가를 &quot;안전한 문자열&quot;로 표시한다는 것은 문자열 생성자가 이미 HTML 엔진 (예 : '&amp;lt;')으로 해석해서는 안되는 문자를 해당 엔티티로 변환했음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9bd77944f3068c168ecfbb2db948688c50c766c3" translate="yes" xml:space="preserve">
          <source>Functions for working with Python modules.</source>
          <target state="translated">파이썬 모듈 작업을위한 함수.</target>
        </trans-unit>
        <trans-unit id="2c588fee9a38a1178c2a3f53d498d3e8b92c5c75" translate="yes" xml:space="preserve">
          <source>Functions of particular interest are &lt;a href=&quot;../../ref/utils#django.utils.translation.get_language&quot;&gt;&lt;code&gt;django.utils.translation.get_language()&lt;/code&gt;&lt;/a&gt; which returns the language used in the current thread, &lt;a href=&quot;../../ref/utils#django.utils.translation.activate&quot;&gt;&lt;code&gt;django.utils.translation.activate()&lt;/code&gt;&lt;/a&gt; which activates a translation catalog for the current thread, and &lt;a href=&quot;../../ref/utils#django.utils.translation.check_for_language&quot;&gt;&lt;code&gt;django.utils.translation.check_for_language()&lt;/code&gt;&lt;/a&gt; which checks if the given language is supported by Django.</source>
          <target state="translated">특히 관심있는 함수는 &lt;a href=&quot;../../ref/utils#django.utils.translation.get_language&quot;&gt; &lt;code&gt;django.utils.translation.get_language()&lt;/code&gt; &lt;/a&gt; 는 현재 스레드에서 사용 된 언어를 리턴하고, &lt;a href=&quot;../../ref/utils#django.utils.translation.activate&quot;&gt; &lt;code&gt;django.utils.translation.activate()&lt;/code&gt; &lt;/a&gt; 는 현재 스레드에 대한 변환 카탈로그를 활성화하며, &lt;a href=&quot;../../ref/utils#django.utils.translation.check_for_language&quot;&gt; &lt;code&gt;django.utils.translation.check_for_language()&lt;/code&gt; &lt;/a&gt; 주어진 언어가 Django에서 지원되는지 확인하는 check_for_language () .</target>
        </trans-unit>
        <trans-unit id="fe29fa848ab0fa934dbf60165599b48d69a06c00" translate="yes" xml:space="preserve">
          <source>Functions which listen for &lt;a href=&quot;#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; should adjust what they output to the screen based on the value of this argument.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt; 를 수신하는 함수 는이 인수의 값에 따라 화면에 출력되는 내용을 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="58b8fc1c1c71c5176694d664f30ad4935c95c9a6" translate="yes" xml:space="preserve">
          <source>Functions which listen for &lt;a href=&quot;#django.db.models.signals.pre_migrate&quot;&gt;&lt;code&gt;pre_migrate&lt;/code&gt;&lt;/a&gt; should adjust what they output to the screen based on the value of this argument.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.pre_migrate&quot;&gt; &lt;code&gt;pre_migrate&lt;/code&gt; &lt;/a&gt; 를 수신하는 함수 는이 인수의 값에 따라 화면에 출력되는 내용을 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="347a2262f212625c348b335159dc10ebbb03ab9d" translate="yes" xml:space="preserve">
          <source>Furlong, Furrow Long</source>
          <target state="translated">펄롱</target>
        </trans-unit>
        <trans-unit id="4dc8b1c8149842f459402434eeff439ceb9a7810" translate="yes" xml:space="preserve">
          <source>Further examples are available in the &lt;a href=&quot;../../ref/models/fields#field-choices&quot;&gt;model field reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#field-choices&quot;&gt;모델 필드 참조&lt;/a&gt; 에서 추가 예제를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a30ede85430e26aa72ae0d45e1884ea49e582ee" translate="yes" xml:space="preserve">
          <source>Further filtering or ordering of a sliced queryset is prohibited due to the ambiguous nature of how that might work.</source>
          <target state="translated">슬라이스 된 쿼리 세트의 추가 필터링 또는 순서는 작동 방식의 모호한 특성으로 인해 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="cd7c6cb8f1b994293e0fffa5e0469c1773e35f5c" translate="yes" xml:space="preserve">
          <source>Further testing</source>
          <target state="translated">추가 테스트</target>
        </trans-unit>
        <trans-unit id="52ee768531207c58276c00530d02f15c716ccdcd" translate="yes" xml:space="preserve">
          <source>Further topics</source>
          <target state="translated">추가 주제</target>
        </trans-unit>
        <trans-unit id="e8b4f5234311830cfdfba453e178fa09d0bfe9a3" translate="yes" xml:space="preserve">
          <source>Furthermore, Python knows how to compare aware datetimes, taking into account UTC offsets when necessary. It&amp;rsquo;s much easier (and possibly faster) to write all your model and view code in UTC. So, in most circumstances, the datetime in UTC returned by &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt; will be sufficient.</source>
          <target state="translated">또한 Python은 필요한 경우 UTC 오프셋을 고려하여 인식 날짜 시간을 비교하는 방법을 알고 있습니다. 모든 모델을 작성하고 UTC로 코드를 보는 것이 훨씬 쉽고 빠릅니다. 따라서 대부분의 상황에서 &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt; 에서 반환 한 날짜 시간 (UTC ) 이면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="d3e8ced1a91ca1c95a75c48dbffda0726e15cbf4" translate="yes" xml:space="preserve">
          <source>Fuzzy entries</source>
          <target state="translated">Fuzzy entries</target>
        </trans-unit>
        <trans-unit id="8ea6d0ffdbdb6cea2b28d73945ccdfef0ae19531" translate="yes" xml:space="preserve">
          <source>GDAL</source>
          <target state="translated">GDAL</target>
        </trans-unit>
        <trans-unit id="2a26a644d47f1906e2de640e10ff9907286d34cd" translate="yes" xml:space="preserve">
          <source>GDAL API</source>
          <target state="translated">GDAL API</target>
        </trans-unit>
        <trans-unit id="02e0585320eb827c9ffabe229b79e4b65616c704" translate="yes" xml:space="preserve">
          <source>GDAL Interface</source>
          <target state="translated">GDAL 인터페이스</target>
        </trans-unit>
        <trans-unit id="cbec0c3b910411cfed3eedecc010ca9269f20bee" translate="yes" xml:space="preserve">
          <source>GDAL Pixel Type</source>
          <target state="translated">GDAL 픽셀 유형</target>
        </trans-unit>
        <trans-unit id="d39fe0a7c9d90595546f63f3c02dec03095f3dc6" translate="yes" xml:space="preserve">
          <source>GDAL has an internal memory-based filesystem, which allows treating blocks of memory as files. It can be used to read and write &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; objects to and from binary file buffers.</source>
          <target state="translated">GDAL에는 메모리 블록을 파일로 취급 할 수있는 내부 메모리 기반 파일 시스템이 있습니다. 이진 파일 버퍼에서 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체 를 읽고 쓰는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a9e794e2a979d5ba51533c108c06370dda08dde" translate="yes" xml:space="preserve">
          <source>GDT_Byte</source>
          <target state="translated">GDT_Byte</target>
        </trans-unit>
        <trans-unit id="124018333259823826d7cc111b4e0db2f7bc432f" translate="yes" xml:space="preserve">
          <source>GDT_Float32</source>
          <target state="translated">GDT_Float32</target>
        </trans-unit>
        <trans-unit id="00b98fc1bfd4aeb9ba37d5df113e3c40a369e8a9" translate="yes" xml:space="preserve">
          <source>GDT_Float64</source>
          <target state="translated">GDT_Float64</target>
        </trans-unit>
        <trans-unit id="0d00d4c137a19ecaa4f3bac851c7ea6c269fba00" translate="yes" xml:space="preserve">
          <source>GDT_Int16</source>
          <target state="translated">GDT_Int16</target>
        </trans-unit>
        <trans-unit id="bf4d610facd6e53aaadc48ed9351cca991b8266e" translate="yes" xml:space="preserve">
          <source>GDT_Int32</source>
          <target state="translated">GDT_Int32</target>
        </trans-unit>
        <trans-unit id="516d94f6f5e0777618ed61925b04c1640fd44690" translate="yes" xml:space="preserve">
          <source>GDT_UInt16</source>
          <target state="translated">GDT_UInt16</target>
        </trans-unit>
        <trans-unit id="1cc4d769f36ea1593d2e67458b1811587e6436b4" translate="yes" xml:space="preserve">
          <source>GDT_UInt32</source>
          <target state="translated">GDT_UInt32</target>
        </trans-unit>
        <trans-unit id="57549eddbbf46dfb920987eb38ac173931fba057" translate="yes" xml:space="preserve">
          <source>GEOS</source>
          <target state="translated">GEOS</target>
        </trans-unit>
        <trans-unit id="cf2921f1e8089a4fc3bf09367ef75c069782c7b8" translate="yes" xml:space="preserve">
          <source>GEOS API</source>
          <target state="translated">지오스 API</target>
        </trans-unit>
        <trans-unit id="9ba8d42dfcc9df2e351bca785d3dbcbb20d3cb86" translate="yes" xml:space="preserve">
          <source>GEOS distance calculations are linear &amp;ndash; in other words, GEOS does not perform a spherical calculation even if the SRID specifies a geographic coordinate system.</source>
          <target state="translated">GEOS 거리 계산은 선형 적입니다. 즉, SRID가 지리적 좌표 시스템을 지정하더라도 GEOS는 구형 계산을 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c104de6f391701c2366e299c7023455bf19608de" translate="yes" xml:space="preserve">
          <source>GEOS is a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it&amp;rsquo;s behind the &amp;ldquo;lazy&amp;rdquo; geometries). Specifically, the C API library is called (e.g., &lt;code&gt;libgeos_c.so&lt;/code&gt;) directly from Python using ctypes.</source>
          <target state="translated">GEOS는 지오메트리 작업을 수행하기위한 C ++ 라이브러리이며 GeoDjango에서 사용하는 기본 내부 지오메트리 표현입니다 ( &quot;지연 한&quot;지오메트리 뒤에 있습니다). 특히 C API 라이브러리는 ctypes를 사용하여 Python에서 직접 호출됩니다 (예 : &lt;code&gt;libgeos_c.so&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f552a71a8afc751655c25583e1e0ff952365b5eb" translate="yes" xml:space="preserve">
          <source>GEOS, GDAL</source>
          <target state="translated">지오스, GDAL</target>
        </trans-unit>
        <trans-unit id="67290db3486d847e5ecd1c83416a1bde2331c192" translate="yes" xml:space="preserve">
          <source>GEOS, GDAL, PROJ.4, PostGIS</source>
          <target state="translated">GEOS, GDAL, PROJ.4, PostGIS</target>
        </trans-unit>
        <trans-unit id="d54bb8615abfeaabf733c3a517bde1df52c7ae10" translate="yes" xml:space="preserve">
          <source>GEOS, GDAL, PROJ.4, SpatiaLite</source>
          <target state="translated">GEOS, GDAL, PROJ.4, SpatiaLite</target>
        </trans-unit>
        <trans-unit id="32df026aca6e37208988e80143a9f0fdbc8a748a" translate="yes" xml:space="preserve">
          <source>GIS QuerySet API Reference</source>
          <target state="translated">GIS QuerySet API 참조</target>
        </trans-unit>
        <trans-unit id="dc4060a6fe947895e29cdab9b844c92647dcdf2c" translate="yes" xml:space="preserve">
          <source>GIS data sources, like shapefiles, may be very large. If you find that &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; is using too much memory, set &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; in your settings. When &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;automatically logs&lt;/a&gt;&lt;em&gt;every&lt;/em&gt; SQL query &amp;ndash; and when SQL statements contain geometries, this may consume more memory than is typical.</source>
          <target state="translated">shapefile과 같은 GIS 데이터 소스는 매우 클 수 있습니다. 당신은 찾을 경우 &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; 가&lt;/a&gt; 너무 많은 메모리, 세트 사용 &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;False&lt;/code&gt; 설정합니다. &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 Django는 &lt;em&gt;모든&lt;/em&gt; SQL 쿼리를 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;자동으로 기록 &lt;/a&gt;&lt;em&gt;합니다.&lt;/em&gt; SQL 문에 형상이 포함되어 있으면 일반적인 것보다 많은 메모리를 소비 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0219dc6d205e4e9202852bb76fb50fb5ad3368c3" translate="yes" xml:space="preserve">
          <source>GIS data sources, like shapefiles, may be very large. If you find that &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; is using too much memory, set &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; in your settings. When &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/models/#faq-see-raw-sql-queries&quot;&gt;automatically logs&lt;/a&gt;&lt;em&gt;every&lt;/em&gt; SQL query &amp;ndash; and when SQL statements contain geometries, this may consume more memory than is typical.</source>
          <target state="translated">GIS data sources, like shapefiles, may be very large. If you find that &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt; is using too much memory, set &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; in your settings. When &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; , Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/models/#faq-see-raw-sql-queries&quot;&gt;automatically logs&lt;/a&gt;&lt;em&gt;every&lt;/em&gt; SQL query &amp;ndash; and when SQL statements contain geometries, this may consume more memory than is typical.</target>
        </trans-unit>
        <trans-unit id="f153081e8e18a0ac0dd3d4a18216a72f195ef4a7" translate="yes" xml:space="preserve">
          <source>GZip compression</source>
          <target state="translated">GZip 압축</target>
        </trans-unit>
        <trans-unit id="88756fa7a5403ed08666c0f7d1544a052a8a7758" translate="yes" xml:space="preserve">
          <source>GZip middleware</source>
          <target state="translated">GZip 미들웨어</target>
        </trans-unit>
        <trans-unit id="200410f62b44123ec4e7adbf21839d4447d18a4f" translate="yes" xml:space="preserve">
          <source>General approaches</source>
          <target state="translated">일반적인 접근법</target>
        </trans-unit>
        <trans-unit id="cc009d63c70477332d3b26a216df733ea65feb8d" translate="yes" xml:space="preserve">
          <source>General notes</source>
          <target state="translated">일반 사항</target>
        </trans-unit>
        <trans-unit id="9d25e59f9fe525c291ea22ff97d3ee08d153e3f5" translate="yes" xml:space="preserve">
          <source>General string handling</source>
          <target state="translated">일반적인 문자열 처리</target>
        </trans-unit>
        <trans-unit id="d5f448f0e52e9bd53410694159c4305fef042b26" translate="yes" xml:space="preserve">
          <source>General-purpose aggregation functions</source>
          <target state="translated">범용 집계 함수</target>
        </trans-unit>
        <trans-unit id="6d6f1be7da3659b77585286c84135bee6dca31ad" translate="yes" xml:space="preserve">
          <source>Generally one&amp;rsquo;s first concern is to write code that &lt;em&gt;works&lt;/em&gt;, whose logic functions as required to produce the expected output. Sometimes, however, this will not be enough to make the code work as &lt;em&gt;efficiently&lt;/em&gt; as one would like.</source>
          <target state="translated">일반적으로 하나의 첫 번째 관심은 그 코드를 작성하는 것입니다 &lt;em&gt;작품&lt;/em&gt; 누구의 논리 기능을 필요에 따라이 예상 출력을 생성 할 수 있습니다. 그러나 때로는 코드를 &lt;em&gt;효율적&lt;/em&gt; 으로 작동시키기에 충분하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2dc5a4b1cc3b7351074b95b062373b0aba4cd150" translate="yes" xml:space="preserve">
          <source>Generally speaking, it isn&amp;rsquo;t advisable to write to the database while generating a streaming response, since there&amp;rsquo;s no sensible way to handle errors after starting to send the response.</source>
          <target state="translated">일반적으로 스트리밍 응답을 생성하는 동안 데이터베이스에 쓰지 않는 것이 좋습니다. 응답을 보낸 후 오류를 처리 할 수있는 합리적인 방법이 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="24f6155965c97a61b3e2ca7acf1734368fae7c53" translate="yes" xml:space="preserve">
          <source>Generally speaking, it&amp;rsquo;s easiest to refer to the user model with the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting in code that&amp;rsquo;s executed at import time, however, it&amp;rsquo;s also possible to call &lt;code&gt;get_user_model()&lt;/code&gt; while Django is importing models, so you could use &lt;code&gt;models.ForeignKey(get_user_model(), ...)&lt;/code&gt;.</source>
          <target state="translated">일반적으로는와 사용자 모델을 참조하는 것이 가장 쉬운 방법이다, 말하기 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 의&lt;/a&gt; 수입시에 실행 코드에 설정하지만, 또한 전화로 가능 &lt;code&gt;get_user_model()&lt;/code&gt; 장고 모델을 가져 오는 동안 사용할 수 있도록, &lt;code&gt;models.ForeignKey(get_user_model(), ...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cce2ca7c7d11755b7d8fc24c859449f56b8fef65" translate="yes" xml:space="preserve">
          <source>Generally speaking, the most appropriate level for the job is the lowest-level one that it is comfortable to code for.</source>
          <target state="translated">일반적으로 작업에 가장 적합한 수준은 코딩하기에 가장 낮은 수준입니다.</target>
        </trans-unit>
        <trans-unit id="41b1e6b41a8481cab01f2d9475db7f4cc68d9fff" translate="yes" xml:space="preserve">
          <source>Generally speaking, you can&amp;rsquo;t mix dates and datetimes.</source>
          <target state="translated">일반적으로 날짜와 날짜 / 시간을 혼합 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="647ad5d5d9c98ce9c898d46505ef79c17373c595" translate="yes" xml:space="preserve">
          <source>Generally speaking, you should perform expensive tasks outside of the request-response cycle, rather than resorting to a streamed response.</source>
          <target state="translated">일반적으로 스트리밍 응답에 의존하기보다는 요청-응답주기를 벗어나는 비싼 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="9572adc989f39eaa9b2ba90d481456a7ec0a77df" translate="yes" xml:space="preserve">
          <source>Generally you can use &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; when you need their functionality. As shown above, with a bit of care you can even combine &lt;code&gt;SingleObjectMixin&lt;/code&gt; with &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;. However things get increasingly complex as you try to do so, and a good rule of thumb is:</source>
          <target state="translated">일반적으로 기능이 필요한 경우 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; 을&lt;/a&gt; 사용할 수 있습니다 . 위에 표시된 것처럼 약간의주의를 &lt;code&gt;SingleObjectMixin&lt;/code&gt; 을 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 와 결합 할 수도 있습니다 . 그러나 그렇게하려고하면 상황이 점점 더 복잡해지고 좋은 경험 법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="527756bcb892560130d98a9a313a05a11a3d384e" translate="yes" xml:space="preserve">
          <source>Generally, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; instances should go in the object that&amp;rsquo;s going to be edited on a form. In the above example, &lt;code&gt;toppings&lt;/code&gt; is in &lt;code&gt;Pizza&lt;/code&gt; (rather than &lt;code&gt;Topping&lt;/code&gt; having a &lt;code&gt;pizzas&lt;/code&gt;&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; ) because it&amp;rsquo;s more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it&amp;rsquo;s set up above, the &lt;code&gt;Pizza&lt;/code&gt; form would let users select the toppings.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 인스턴스는 양식에서 편집 할 객체로 이동해야합니다. 위의 예에서, &lt;code&gt;toppings&lt;/code&gt; 은 &lt;code&gt;Pizza&lt;/code&gt; ( &lt;code&gt;pizzas&lt;/code&gt; &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 가있는 &lt;code&gt;Topping&lt;/code&gt; 대신 )는 피자가 여러 피자에있는 토핑보다 토핑이있는 피자에 대해 생각하는 것이 더 자연 스럽기 때문입니다. 위에 설정된 방식으로 &lt;code&gt;Pizza&lt;/code&gt; 양식을 사용하면 토핑을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c75c67a262a34c0f2e38d35a45a89fab845848f8" translate="yes" xml:space="preserve">
          <source>Generally, &lt;code&gt;get_context_data&lt;/code&gt; will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call &lt;code&gt;get_context_data&lt;/code&gt; on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explicitly set it after super if they want to be sure to override all parents. If you&amp;rsquo;re having trouble, review the method resolution order of your view.</source>
          <target state="translated">일반적으로 &lt;code&gt;get_context_data&lt;/code&gt; 는 모든 상위 클래스의 컨텍스트 데이터를 현재 클래스의 컨텍스트 데이터와 병합합니다. 컨텍스트를 변경하려는 클래스에서이 동작을 유지하려면 수퍼 클래스에서 &lt;code&gt;get_context_data&lt;/code&gt; 를 호출해야합니다 . 두 클래스가 동일한 키를 정의하려고 시도하지 않으면 예상 된 결과가 제공됩니다. 그러나 부모 클래스가 키를 설정 한 후 (super 호출 후) 클래스가 키를 재정의하려고 시도하는 경우 해당 클래스의 모든 자식은 모든 부모를 재정의하려는 경우 super를 명시 적으로 설정해야합니다. 문제가 발생하면보기의 분석법 해결 순서를 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="c3d5b0cf1a6be796edc01b1a5da01e9211d76d6a" translate="yes" xml:space="preserve">
          <source>Generally, &lt;code&gt;string_if_invalid&lt;/code&gt; should only be enabled in order to debug a specific template problem, then cleared once debugging is complete.</source>
          <target state="translated">일반적으로 &lt;code&gt;string_if_invalid&lt;/code&gt; 는 특정 템플릿 문제를 디버깅하기 위해서만 활성화 한 다음 디버깅이 완료되면 지워집니다.</target>
        </trans-unit>
        <trans-unit id="443c04d1837565ab4b87d181a52fd743f9cae91a" translate="yes" xml:space="preserve">
          <source>Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here&amp;rsquo;s an example view for &lt;code&gt;year_archive&lt;/code&gt; from above:</source>
          <target state="translated">일반적으로보기는 매개 변수에 따라 데이터를 검색하고 템플리트를로드 한 후 검색된 데이터로 템플리트를 렌더링합니다. 위의 &lt;code&gt;year_archive&lt;/code&gt; 에 대한보기 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="0c77575814a624548a0f1612bf97578af76953c9" translate="yes" xml:space="preserve">
          <source>Generally, if a variable doesn&amp;rsquo;t exist, the template system inserts the value of the engine&amp;rsquo;s &lt;code&gt;string_if_invalid&lt;/code&gt; configuration option, which is set to &lt;code&gt;''&lt;/code&gt; (the empty string) by default.</source>
          <target state="translated">일반적으로 변수가 존재하지 않으면 템플릿 시스템은 엔진의 &lt;code&gt;string_if_invalid&lt;/code&gt; 구성 옵션 의 값을 삽입하며 기본적 으로 &lt;code&gt;''&lt;/code&gt; (빈 문자열)로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="92a32cd2b90c5fd5f36cf2640c5f30799c071ce2" translate="yes" xml:space="preserve">
          <source>Generally, it&amp;rsquo;s best to define choices inside a model class, and to define a suitably-named constant for each value:</source>
          <target state="translated">일반적으로 모델 클래스 내에서 선택 사항을 정의하고 각 값에 대해 적절한 이름의 상수를 정의하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7e4d313447d91008ef41337c3ee0b186df1484bc" translate="yes" xml:space="preserve">
          <source>Generally, slicing a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; returns a new &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; &amp;ndash; it doesn&amp;rsquo;t evaluate the query. An exception is if you use the &amp;ldquo;step&amp;rdquo; parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every &lt;em&gt;second&lt;/em&gt; object of the first 10:</source>
          <target state="translated">일반적으로, 슬라이스 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 새로운 반환 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 이 쿼리를 평가하지 않습니다 -. Python 슬라이스 구문의 &quot;step&quot;매개 변수를 사용하는 경우는 예외입니다. 예를 들어, 처음 10 의 모든 &lt;em&gt;두 번째&lt;/em&gt; 객체 목록을 반환하기 위해 실제로 쿼리를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="7bfc57bad218eacb80f36721cb04e3614e67e865" translate="yes" xml:space="preserve">
          <source>Generally, something like the above isn&amp;rsquo;t considered a great idea. Most of the time, the best practice will be to return an &lt;a href=&quot;../../request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; and redirect the user to a view you&amp;rsquo;ve written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you&amp;rsquo;d want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that redirects to your custom export view:</source>
          <target state="translated">일반적으로 위와 같은 것은 좋은 생각으로 간주되지 않습니다. 대부분의 경우 가장 좋은 방법은 &lt;a href=&quot;../../request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; &lt;/a&gt; 를 반환 하고 사용자가 작성한 뷰로 사용자를 리디렉션하고 GET 쿼리 문자열에서 선택한 객체 목록을 전달하는 것입니다. 이를 통해 중개 페이지에서 복잡한 상호 작용 논리를 제공 할 수 있습니다. 예를 들어,보다 완전한 내보내기 기능을 제공하려는 경우 사용자가 형식 및 내보내기에 포함 할 필드 목록을 선택할 수있게하려고합니다. 가장 좋은 방법은 사용자 지정 내보내기보기로 리디렉션되는 작은 작업을 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="56be6c441bd144d493f92171e1bc7712fc16427c" translate="yes" xml:space="preserve">
          <source>Generally, template authors don&amp;rsquo;t need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn&amp;rsquo;t be escaped, and mark data appropriately, so things Just Work in the template.</source>
          <target state="translated">일반적으로 템플릿 작성자는 자동 이스케이프에 대해 크게 걱정할 필요가 없습니다. 파이썬 측의 개발자 (보기 및 사용자 정의 필터를 작성하는 사람들)는 데이터를 이스케이프해서는 안되는 경우에 대해 생각하고 적절하게 데이터를 표시해야하므로 템플릿에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="27ed1f3562f09d7b3deaadb1e45e59d35ebcea77" translate="yes" xml:space="preserve">
          <source>Generally, the correct solution is to change your code to use an aware datetime instead.</source>
          <target state="translated">일반적으로 올바른 해결책은 대신 인식 날짜 시간을 사용하도록 코드를 변경하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="eb47639ff76881dfa64a9d2bdd365dbcf0e3fe65" translate="yes" xml:space="preserve">
          <source>Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages.</source>
          <target state="translated">일반적으로 기본값으로 충분합니다. 언어 선택을 Django 제공 언어의 하위 세트로 제한하려는 경우에만이 설정을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="6cef6ee0893a2489e91dd154fc9e7ee5cc0e3005" translate="yes" xml:space="preserve">
          <source>Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages. If you define a custom &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, the list of bidirectional languages may contain language codes which are not enabled on a given site.</source>
          <target state="translated">일반적으로 기본값으로 충분합니다. 언어 선택을 Django 제공 언어의 하위 세트로 제한하려는 경우에만이 설정을 설정하십시오. 사용자 정의 &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정 을 정의하면 양방향 언어 목록에 특정 사이트에서 사용하지 않는 언어 코드가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="319c714cbc952fc158b189c40cb203831d68b6c9" translate="yes" xml:space="preserve">
          <source>Generally, when working on a single Django project, it&amp;rsquo;s easier to use &lt;code&gt;manage.py&lt;/code&gt; than &lt;code&gt;django-admin&lt;/code&gt;. If you need to switch between multiple Django settings files, use &lt;code&gt;django-admin&lt;/code&gt; with &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;#cmdoption-settings&quot;&gt;&lt;code&gt;--settings&lt;/code&gt;&lt;/a&gt; command line option.</source>
          <target state="translated">일반적으로 단일 Django 프로젝트에서 작업 할 때는 &lt;code&gt;django-admin&lt;/code&gt; 보다 &lt;code&gt;manage.py&lt;/code&gt; 를 사용하는 것이 더 쉽습니다 . 여러 Django 설정 파일간에 전환해야하는 경우 &lt;code&gt;django-admin&lt;/code&gt; 을 &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#cmdoption-settings&quot;&gt; &lt;code&gt;--settings&lt;/code&gt; &lt;/a&gt; 명령 줄 옵션 과 함께 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f887d501c8d01a35b48d29631cb2040eeb658701" translate="yes" xml:space="preserve">
          <source>Generally, when writing a Django app, you&amp;rsquo;ll evaluate whether generic views are a good fit for your problem, and you&amp;rsquo;ll use them from the beginning, rather than refactoring your code halfway through. But this tutorial intentionally has focused on writing the views &amp;ldquo;the hard way&amp;rdquo; until now, to focus on core concepts.</source>
          <target state="translated">일반적으로 Django 앱을 작성할 때 일반 뷰가 문제에 적합한 지 평가하고 코드를 중간에 리팩토링하지 않고 처음부터 사용합니다. 그러나이 튜토리얼은 의도적으로 핵심 개념에 초점을 맞추기 위해 뷰를 &quot;어려운 방법&quot;으로 작성하는 데 중점을 두었습니다.</target>
        </trans-unit>
        <trans-unit id="d2cabdf30edfb04025f5c5d082a12b4e021f8810" translate="yes" xml:space="preserve">
          <source>Generally, you should avoid converting a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;. For instance, you can use the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter to only show the date part of a datetime. This filter will convert the datetime into the current time zone before formatting it, ensuring the results appear correctly.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 을 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 로 변환하지 않아야 합니다 . 예를 들어 &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 템플릿 필터를 사용하여 날짜 / 시간의 날짜 부분 만 표시 할 수 있습니다 . 이 필터는 날짜 시간을 포맷하기 전에 현재 시간대로 변환하여 결과가 올바르게 표시되도록합니다.</target>
        </trans-unit>
        <trans-unit id="0990f513d5c0effdf4a377d7f04ce84086b2d68d" translate="yes" xml:space="preserve">
          <source>Generally, you won&amp;rsquo;t need to inherit from multiple parents. The main use-case where this is useful is for &amp;ldquo;mix-in&amp;rdquo; classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won&amp;rsquo;t have to struggle to work out where a particular piece of information is coming from.</source>
          <target state="translated">일반적으로 여러 부모로부터 상속받을 필요가 없습니다. 이것이 유용한 주요 유스 케이스는 &quot;믹스 인&quot;클래스에 해당됩니다. 믹스 인을 상속하는 모든 클래스에 특정 추가 필드 또는 메소드 추가. 상속 계층 구조를 가능한 한 단순하고 간단하게 유지하여 특정 정보가 어디에서 나오는지 고민하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="002ec76556b82bbbbcb60321162dcb04354ff2b8" translate="yes" xml:space="preserve">
          <source>Generally, you&amp;rsquo;ll store templates in files on your filesystem rather than using the low-level &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; API yourself. Save templates in a directory specified as a &lt;strong&gt;template directory&lt;/strong&gt;.</source>
          <target state="translated">일반적으로 저수준 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; API를 직접 사용하지 않고 파일 시스템의 파일에 템플릿을 저장합니다 . A와 지정된 디렉토리에 저장 템플릿 &lt;strong&gt;템플릿 디렉토리&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="64c3678f265c4b6f9178283fbd7fc418e2ad8790" translate="yes" xml:space="preserve">
          <source>Generate migration files without Django version and timestamp header.</source>
          <target state="translated">Django 버전 및 타임 스탬프 헤더없이 마이그레이션 파일을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="c5825daab40bbc561a3ed313a76db995a0d8af36" translate="yes" xml:space="preserve">
          <source>Generate squashed migration file without Django version and timestamp header.</source>
          <target state="translated">Django 버전 및 타임 스탬프 헤더없이 스쿼시 된 마이그레이션 파일을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="37b0ace3843507d7ca5e2a84b3831e29036c762c" translate="yes" xml:space="preserve">
          <source>Generate two empty migration files for the same app by running &lt;code&gt;makemigrations myapp --empty&lt;/code&gt; twice. We&amp;rsquo;ve renamed the migration files to give them meaningful names in the examples below.</source>
          <target state="translated">&lt;code&gt;makemigrations myapp --empty&lt;/code&gt; 를 두 번 실행하여 동일한 앱에 대해 두 개의 빈 마이그레이션 파일을 생성하십시오 . 아래 예제에서 마이그레이션 파일의 이름을 변경하여 의미있는 이름을 지정했습니다.</target>
        </trans-unit>
        <trans-unit id="6ecdf7dadc0bc7b684b3bcd576a037fd41031280" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;__str__()&lt;/code&gt; method on the model that returns the given field name.</source>
          <target state="translated">주어진 필드 이름을 리턴하는 모델 에서 &lt;code&gt;__str__()&lt;/code&gt; 메소드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="a9a0484765197eb2305b98f6cd9fc6e71d1f3034" translate="yes" xml:space="preserve">
          <source>Generates the SQL for the database function.</source>
          <target state="translated">데이터베이스 기능에 대한 SQL을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="97469305be1d987a5209d9a384da92ab8de38e60" translate="yes" xml:space="preserve">
          <source>Generates the SQL for unapplying the migration. By default, the SQL created is for running the migration in the forwards direction.</source>
          <target state="translated">마이그레이션 적용을 취소하기위한 SQL을 생성합니다. 기본적으로 작성된 SQL은 정방향으로 마이그레이션을 실행하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="cdecb6b6aa19a312faa26c88a687d99f1eadaac3" translate="yes" xml:space="preserve">
          <source>Generates the SQL fragment for the database function. Returns a tuple &lt;code&gt;(sql, params)&lt;/code&gt;, where &lt;code&gt;sql&lt;/code&gt; is the SQL string, and &lt;code&gt;params&lt;/code&gt; is the list or tuple of query parameters.</source>
          <target state="translated">Generates the SQL fragment for the database function. Returns a tuple &lt;code&gt;(sql, params)&lt;/code&gt; , where &lt;code&gt;sql&lt;/code&gt; is the SQL string, and &lt;code&gt;params&lt;/code&gt; is the list or tuple of query parameters.</target>
        </trans-unit>
        <trans-unit id="caa0bcfdd5f9f4eb83783b1b5f46b80525e05350" translate="yes" xml:space="preserve">
          <source>Generates the SQL fragment for the expression. Returns a tuple &lt;code&gt;(sql, params)&lt;/code&gt;, where &lt;code&gt;sql&lt;/code&gt; is the SQL string, and &lt;code&gt;params&lt;/code&gt; is the list or tuple of query parameters. The &lt;code&gt;compiler&lt;/code&gt; is an &lt;code&gt;SQLCompiler&lt;/code&gt; object, which has a &lt;code&gt;compile()&lt;/code&gt; method that can be used to compile other expressions. The &lt;code&gt;connection&lt;/code&gt; is the connection used to execute the query.</source>
          <target state="translated">Generates the SQL fragment for the expression. Returns a tuple &lt;code&gt;(sql, params)&lt;/code&gt; , where &lt;code&gt;sql&lt;/code&gt; is the SQL string, and &lt;code&gt;params&lt;/code&gt; is the list or tuple of query parameters. The &lt;code&gt;compiler&lt;/code&gt; is an &lt;code&gt;SQLCompiler&lt;/code&gt; object, which has a &lt;code&gt;compile()&lt;/code&gt; method that can be used to compile other expressions. The &lt;code&gt;connection&lt;/code&gt; is the connection used to execute the query.</target>
        </trans-unit>
        <trans-unit id="63982e5335ffb2308b26af6c005f638092b3ea09" translate="yes" xml:space="preserve">
          <source>Generating &amp;ldquo;recover my account&amp;rdquo; URLs for sending to users who have lost their password.</source>
          <target state="translated">비밀번호를 잊어 버린 사용자에게 보내기 위해 &quot;내 계정 복구&quot;URL 생성</target>
        </trans-unit>
        <trans-unit id="7479ec37b32ba74fe2dad06103dd686c2a02418a" translate="yes" xml:space="preserve">
          <source>Generating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn&amp;rsquo;t require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.</source>
          <target state="translated">직원이나 클라이언트가 콘텐츠를 추가, 변경 및 삭제하기위한 관리 사이트를 생성하는 것은 많은 창의성을 요구하지 않는 지루한 작업입니다. 이런 이유로 Django는 모델 용 관리 인터페이스 생성을 완전히 자동화합니다.</target>
        </trans-unit>
        <trans-unit id="c188d3cb4928f6d0b6873ba0fe2f329a09ad77a4" translate="yes" xml:space="preserve">
          <source>Generating aggregates for each item in a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 에서 각 항목에 대한 집계 생성</target>
        </trans-unit>
        <trans-unit id="249a34757e80bf41675fd5092f7d9d1cafd85921" translate="yes" xml:space="preserve">
          <source>Generating aggregates over a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 에서 집계 생성</target>
        </trans-unit>
        <trans-unit id="f9c0b669418b95568aebff998fd28475a3840373" translate="yes" xml:space="preserve">
          <source>Generating one-time secret URLs for allowing temporary access to a protected resource, for example a downloadable file that a user has paid for.</source>
          <target state="translated">보호 된 리소스 (예 : 사용자가 지불 한 다운로드 가능한 파일)에 임시로 액세스 할 수 있도록 일회성 비밀 URL 생성</target>
        </trans-unit>
        <trans-unit id="57a711145988aff1f4c5baf8a2a956889bb3e41c" translate="yes" xml:space="preserve">
          <source>Generic date views</source>
          <target state="translated">일반적인 날짜보기</target>
        </trans-unit>
        <trans-unit id="1a969e34061b2510afad161402a65f214f5ce9c7" translate="yes" xml:space="preserve">
          <source>Generic display views</source>
          <target state="translated">일반 디스플레이 뷰</target>
        </trans-unit>
        <trans-unit id="82e089b93305d3c5e37400a98008314ffb3a857f" translate="yes" xml:space="preserve">
          <source>Generic editing views</source>
          <target state="translated">일반 편집 뷰</target>
        </trans-unit>
        <trans-unit id="c1472da43eb9fb9463431ec699f3ea11115b8c35" translate="yes" xml:space="preserve">
          <source>Generic relation in forms</source>
          <target state="translated">형태의 일반적인 관계</target>
        </trans-unit>
        <trans-unit id="7e709568eb3d50865428def64345bd0c2f85ed41" translate="yes" xml:space="preserve">
          <source>Generic relations</source>
          <target state="translated">일반적인 관계</target>
        </trans-unit>
        <trans-unit id="8b7efda9768e9d595d8fd92272959ad354f99b4e" translate="yes" xml:space="preserve">
          <source>Generic relations and aggregation</source>
          <target state="translated">일반 관계 및 집계</target>
        </trans-unit>
        <trans-unit id="2bd47084ada78ba1518e4110743b0bafb569f442" translate="yes" xml:space="preserve">
          <source>Generic relations in admin</source>
          <target state="translated">관리자의 일반적인 관계</target>
        </trans-unit>
        <trans-unit id="5501abd5185b3c6248d23e02a1ce2bfbd96f81c6" translate="yes" xml:space="preserve">
          <source>Generic views</source>
          <target state="translated">일반 뷰</target>
        </trans-unit>
        <trans-unit id="15919fc89293c3e5202f8b37a376f8b03e8dab06" translate="yes" xml:space="preserve">
          <source>Generic views abstract common patterns to the point where you don&amp;rsquo;t even need to write Python code to write an app.</source>
          <target state="translated">일반 뷰는 일반적인 패턴을 추상화하여 앱을 작성하기 위해 Python 코드를 작성할 필요조차 없습니다.</target>
        </trans-unit>
        <trans-unit id="df3e431d9c3a0b2572058f247141a08fa73367eb" translate="yes" xml:space="preserve">
          <source>Generic views of objects</source>
          <target state="translated">객체의 일반적인 뷰</target>
        </trans-unit>
        <trans-unit id="f884a81c2e23678106660b59e835282a2b0244e7" translate="yes" xml:space="preserve">
          <source>Generic views really shine when working with models. These generic views will automatically create a &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, so long as they can work out which model class to use:</source>
          <target state="translated">모델로 작업 할 때 일반 뷰가 실제로 빛납니다. 이 일반 뷰는 사용할 모델 클래스를 해결할 수 있는 한 &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 을 자동으로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="76b44973a843d3bcdd7b8f1a980cd4b03a025fb9" translate="yes" xml:space="preserve">
          <source>GeoDjango</source>
          <target state="translated">GeoDjango</target>
        </trans-unit>
        <trans-unit id="fb8d70b0b197a9acece10c07e4c7fdd557f1be8e" translate="yes" xml:space="preserve">
          <source>GeoDjango Database API</source>
          <target state="translated">GeoDjango 데이터베이스 API</target>
        </trans-unit>
        <trans-unit id="e8b7a06075e0a1b414b6c69d16be262829e002f4" translate="yes" xml:space="preserve">
          <source>GeoDjango Forms API</source>
          <target state="translated">GeoDjango Forms API</target>
        </trans-unit>
        <trans-unit id="bfae1f1236df0250ad2ce27a6481102c026c4cdd" translate="yes" xml:space="preserve">
          <source>GeoDjango Installation</source>
          <target state="translated">거장 고 설치</target>
        </trans-unit>
        <trans-unit id="94028033177f0a25ff8cb38b0aa2bbb9f98c96f5" translate="yes" xml:space="preserve">
          <source>GeoDjango Management Commands</source>
          <target state="translated">GeoDjango 관리 명령</target>
        </trans-unit>
        <trans-unit id="877a1bb2c6226b98095871dfb623f83abe458ba7" translate="yes" xml:space="preserve">
          <source>GeoDjango Model API</source>
          <target state="translated">GeoDjango 모델 API</target>
        </trans-unit>
        <trans-unit id="a20664c0b4bdfe6af8891c490a1ffdb9c5c615f6" translate="yes" xml:space="preserve">
          <source>GeoDjango Tutorial</source>
          <target state="translated">GeoDjango 튜토리얼</target>
        </trans-unit>
        <trans-unit id="4de4647b8b51ad2ab3a1c065a89ba222dd9856dc" translate="yes" xml:space="preserve">
          <source>GeoDjango Utilities</source>
          <target state="translated">GeoDjango 유틸리티</target>
        </trans-unit>
        <trans-unit id="71c062fc8ed04aae09d37692b07d1224332f91ae" translate="yes" xml:space="preserve">
          <source>GeoDjango adds spatial lookups to the Django ORM. For example, you can find the country in the &lt;code&gt;WorldBorder&lt;/code&gt; table that contains a particular point. First, fire up the management shell:</source>
          <target state="translated">GeoDjango는 Django ORM에 공간 검색을 추가합니다. 예를 들어 &lt;code&gt;WorldBorder&lt;/code&gt; 테이블에서 특정 지점이 포함 된 국가를 찾을 수 있습니다 . 먼저 관리 셸을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="1749a1cb1bb9c2f6ff6dd7bcf0cd20f0a7abeb48" translate="yes" xml:space="preserve">
          <source>GeoDjango also offers a set of geographic annotations to compute distances and several other operations (intersection, difference, etc.). See the &lt;a href=&quot;functions&quot;&gt;Geographic Database Functions&lt;/a&gt; documentation.</source>
          <target state="translated">GeoDjango는 거리 및 기타 여러 작업 (교차점, 차이 등)을 계산하기 위해 지리적 주석 세트를 제공합니다. &lt;a href=&quot;functions&quot;&gt;지리 데이터베이스 기능&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5fc82cd8e43f8819ca610e94617381d8c61b6275" translate="yes" xml:space="preserve">
          <source>GeoDjango also supplements the Django admin by allowing users to create and modify geometries on a JavaScript slippy map (powered by &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt;).</source>
          <target state="translated">GeoDjango는 또한 사용자가 JavaScript 미끄러운지도 ( &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers 제공&lt;/a&gt; ) 에서 도형을 작성하고 수정할 수 있도록하여 Django 관리자를 보완합니다 .</target>
        </trans-unit>
        <trans-unit id="3e011aaadd25f116aa5b636795a71dae045f10ff" translate="yes" xml:space="preserve">
          <source>GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and Christopher Schmidt.</source>
          <target state="translated">GeoDjango 기본 앱은 Dane Springmeyer, Josh Livni 및 Christopher Schmidt가 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="abd937d2340abf6ba15de6356c4aacb77d4b2142" translate="yes" xml:space="preserve">
          <source>GeoDjango currently provides the following spatial database backends:</source>
          <target state="translated">GeoDjango는 현재 다음과 같은 공간 데이터베이스 백엔드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="193f1930c783c95f77007577bf72364906fe021a" translate="yes" xml:space="preserve">
          <source>GeoDjango does not currently leverage any &lt;a href=&quot;https://postgis.net/docs/Topology.html&quot;&gt;PostGIS topology functionality&lt;/a&gt;. If you plan to use those features at some point, you can also install the &lt;code&gt;postgis_topology&lt;/code&gt; extension by issuing &lt;code&gt;CREATE EXTENSION
postgis_topology;&lt;/code&gt;.</source>
          <target state="translated">GeoDjango는 현재 &lt;a href=&quot;https://postgis.net/docs/Topology.html&quot;&gt;PostGIS 토폴로지 기능을 사용&lt;/a&gt; 하지 않습니다 . 특정 시점에 해당 기능을 사용하려는 경우 &lt;code&gt;CREATE EXTENSION postgis_topology;&lt;/code&gt; 를 실행 하여 &lt;code&gt;postgis_topology&lt;/code&gt; 확장을 설치할 수도 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="1682f728f18526e820eaadb4fadcdae630e84a84" translate="yes" xml:space="preserve">
          <source>GeoDjango extends &lt;a href=&quot;../admin/index&quot;&gt;Django&amp;rsquo;s admin application&lt;/a&gt; with support for editing geometry fields.</source>
          <target state="translated">GeoDjango는 지오메트리 필드 편집을 지원하여 &lt;a href=&quot;../admin/index&quot;&gt;Django의 관리 응용 프로그램&lt;/a&gt; 을 확장 합니다.</target>
        </trans-unit>
        <trans-unit id="e16764ce538d1743a7883a90a8a47d871b7df216" translate="yes" xml:space="preserve">
          <source>GeoDjango form widgets allow you to display and edit geographic data on a visual map. Note that none of the currently available widgets supports 3D geometries, hence geometry fields will fallback using a &lt;code&gt;Textarea&lt;/code&gt; widget for such data.</source>
          <target state="translated">GeoDjango 양식 위젯을 사용하면 시각적지도에 지리 데이터를 표시하고 편집 할 수 있습니다. 현재 사용 가능한 위젯 중 어느 것도 3D 지오메트리를 지원하지 않으므로 지오메트리 필드는 해당 데이터에 대해 &lt;code&gt;Textarea&lt;/code&gt; 위젯을 사용하여 대체 됩니다.</target>
        </trans-unit>
        <trans-unit id="891d521a99f30d373b9dbd444935c8ffc39cb360" translate="yes" xml:space="preserve">
          <source>GeoDjango has additional requirements beyond what Django requires &amp;ndash; please consult the &lt;a href=&quot;install/index&quot;&gt;installation documentation&lt;/a&gt; for more details.</source>
          <target state="translated">GeoDjango에는 Django에 필요한 것 이외의 추가 요구 사항이 있습니다. 자세한 내용 은 &lt;a href=&quot;install/index&quot;&gt;설치 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8980cfb9c1e99c6e3e7db0a490d95a1d8c44b809" translate="yes" xml:space="preserve">
          <source>GeoDjango has its own &lt;a href=&quot;#django.contrib.gis.feeds.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; subclass that may embed location information in RSS/Atom feeds formatted according to either the &lt;a href=&quot;http://georss.org/simple.html&quot;&gt;Simple GeoRSS&lt;/a&gt; or &lt;a href=&quot;https://www.w3.org/2003/01/geo/&quot;&gt;W3C Geo&lt;/a&gt; standards. Because GeoDjango&amp;rsquo;s syndication API is a superset of Django&amp;rsquo;s, please consult &lt;a href=&quot;../syndication&quot;&gt;Django&amp;rsquo;s syndication documentation&lt;/a&gt; for details on general usage.</source>
          <target state="translated">GeoDjango에는 &lt;a href=&quot;http://georss.org/simple.html&quot;&gt;Simple GeoRSS&lt;/a&gt; 또는 &lt;a href=&quot;https://www.w3.org/2003/01/geo/&quot;&gt;W3C Geo&lt;/a&gt; 표준 에 따라 형식화 된 RSS / Atom 피드에 위치 정보를 포함 할 수 있는 자체 &lt;a href=&quot;#django.contrib.gis.feeds.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 서브 클래스가 있습니다 . GeoDjango의 신디케이션 API는 Django의 상위 집합이므로 일반적인 사용법에 대한 자세한 내용은 &lt;a href=&quot;../syndication&quot;&gt;Django의 신디케이션 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ac4759afcd67a7889efe287968c488637e7e4154" translate="yes" xml:space="preserve">
          <source>GeoDjango implements a high-level Python wrapper for the GEOS library, its features include:</source>
          <target state="translated">GeoDjango는 GEOS 라이브러리를위한 고급 Python 래퍼를 구현하며 그 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8691a07ec4db590c21d008e1c7f51f869c746078" translate="yes" xml:space="preserve">
          <source>GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data.</source>
          <target state="translated">GeoDjango는 세계적인 지리적 웹 프레임 워크가 되고자합니다. 목표는 가능한 한 쉽게 GIS 웹 애플리케이션을 구축하고 공간적으로 활성화 된 데이터의 힘을 활용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="dc3067870d1f5805bbf4b0ad3a4048675cf2e61a" translate="yes" xml:space="preserve">
          <source>GeoDjango is an included contrib module for Django that turns it into a world-class geographic Web framework. GeoDjango strives to make it as simple as possible to create geographic Web applications, like location-based services. Its features include:</source>
          <target state="translated">GeoDjango는 Django에 포함 된 contrib 모듈로, 세계적 수준의 지리적 웹 프레임 워크로 변환됩니다. GeoDjango는 위치 기반 서비스와 같은 지리적 웹 응용 프로그램을 최대한 간단하게 만들기 위해 노력하고 있습니다. 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f79e051bc0b9bb1a9bb29e9666937dde2f48eaa1" translate="yes" xml:space="preserve">
          <source>GeoDjango loads geometries in a standardized textual representation. When the geometry field is first accessed, GeoDjango creates a &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object, exposing powerful functionality, such as serialization properties for popular geospatial formats:</source>
          <target state="translated">GeoDjango는 표준화 된 텍스트 표현으로 도형을로드합니다. 지오메트리 필드에 처음 액세스하면 GeoDjango는 &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체를 생성하여 널리 사용되는 지리 공간 형식의 직렬화 속성과 같은 강력한 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cddbaf21c073b2a21bf62f706b2d1a36600503f4" translate="yes" xml:space="preserve">
          <source>GeoDjango provides a high-level Python interface for some of the capabilities of OGR, including the reading and coordinate transformation of vector spatial data and minimal support for GDAL&amp;rsquo;s features with respect to raster (image) data.</source>
          <target state="translated">GeoDjango는 벡터 공간 데이터의 읽기 및 좌표 변환과 래스터 (이미지) 데이터에 대한 GDAL의 기능에 대한 최소 지원을 포함하여 OGR의 일부 기능을위한 고급 Python 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8ab177579f297197692478183f417ff98d86a3b9" translate="yes" xml:space="preserve">
          <source>GeoDjango provides a specific serializer for the &lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt; format. See &lt;a href=&quot;../../../topics/serialization&quot;&gt;Serializing Django objects&lt;/a&gt; for more information on serialization.</source>
          <target state="translated">GeoDjango는 &lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt; 형식을 위한 특정 시리얼 라이저를 제공 합니다. &lt;a href=&quot;../../../topics/serialization&quot;&gt;직렬화에&lt;/a&gt; 대한 자세한 내용은 Django 객체 직렬화를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6f946f97cdb6a58a41890ac734eee51f28851ab" translate="yes" xml:space="preserve">
          <source>GeoDjango provides some specialized form fields and widgets in order to visually display and edit geolocalized data on a map. By default, they use &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt;-powered maps, with a base WMS layer provided by &lt;a href=&quot;https://earthdata.nasa.gov/&quot;&gt;NASA&lt;/a&gt;.</source>
          <target state="translated">GeoDjango는 지역화 된 데이터를지도에 시각적으로 표시하고 편집 할 수 있도록 특수화 된 양식 필드와 위젯을 제공합니다. 기본적 으로 &lt;a href=&quot;https://earthdata.nasa.gov/&quot;&gt;NASA에서&lt;/a&gt; 제공하는 기본 WMS 계층과 함께 &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt; 기반 맵 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="98075c705db0a9e3c5b3b71dc6c87a9bcbadfa67" translate="yes" xml:space="preserve">
          <source>GeoDjango tests</source>
          <target state="translated">GeoDjango 테스트</target>
        </trans-unit>
        <trans-unit id="9c538087cb08785ef5d39189792a0d2ae13b7b4e" translate="yes" xml:space="preserve">
          <source>GeoDjango uses and/or provides interfaces for the following open source geospatial libraries:</source>
          <target state="translated">GeoDjango는 다음과 같은 오픈 소스 지리 공간 라이브러리를위한 인터페이스를 사용 및 / 또는 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e7fc3d592fa359935e1ebdcd77cec13e8dffc4dc" translate="yes" xml:space="preserve">
          <source>GeoDjango uses the &lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#ctypes.util.find_library&quot;&gt;&lt;code&gt;find_library()&lt;/code&gt;&lt;/a&gt; routine from &lt;code&gt;ctypes.util&lt;/code&gt; to locate shared libraries.</source>
          <target state="translated">GeoDjango는 사용 &lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#ctypes.util.find_library&quot;&gt; &lt;code&gt;find_library()&lt;/code&gt; &lt;/a&gt; 에서 루틴을 &lt;code&gt;ctypes.util&lt;/code&gt; 공유 라이브러리를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="0a0924509e0f06a4da5f90bc04f536663113ff96" translate="yes" xml:space="preserve">
          <source>GeoDjango uses the &lt;code&gt;find_library&lt;/code&gt; function (from the &lt;code&gt;ctypes.util&lt;/code&gt; Python module) to discover libraries. The &lt;code&gt;find_library&lt;/code&gt; routine uses a program called &lt;code&gt;objdump&lt;/code&gt; (part of the &lt;code&gt;binutils&lt;/code&gt; package) to verify a shared library on GNU/Linux systems. Thus, if &lt;code&gt;binutils&lt;/code&gt; is not installed on your Linux system then Python&amp;rsquo;s ctypes may not be able to find your library even if your library path is set correctly and geospatial libraries were built perfectly.</source>
          <target state="translated">GeoDjango는 &lt;code&gt;ctypes.util&lt;/code&gt; Python 모듈 의 &lt;code&gt;find_library&lt;/code&gt; 함수를 사용하여 라이브러리를 검색합니다. &lt;code&gt;find_library&lt;/code&gt; 루틴라는 프로그램 사용 &lt;code&gt;objdump&lt;/code&gt; 를 (의 일부 &lt;code&gt;binutils&lt;/code&gt; GNU / 리눅스 시스템에서 공유 라이브러리를 확인하기 위해 패키지). 따라서 &lt;code&gt;binutils&lt;/code&gt; 가 Linux 시스템에 설치되어 있지 않으면 라이브러리 경로가 올바르게 설정되어 있고 지형 공간 라이브러리가 완벽하게 빌드 된 경우에도 Python의 ctypes가 라이브러리를 찾지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b01014a3c4d84619b154a68ffd6fdcb1cf93cf08" translate="yes" xml:space="preserve">
          <source>GeoDjango uses the GDAL geospatial library which is not thread safe at this time. Thus, it is &lt;em&gt;highly&lt;/em&gt; recommended to not use threading when deploying &amp;ndash; in other words, use an appropriate configuration of Apache.</source>
          <target state="translated">GeoDjango는 현재 스레드 안전하지 않은 GDAL 지리 공간 라이브러리를 사용합니다. 따라서,이되어 &lt;em&gt;매우&lt;/em&gt; 배포 할 때 스레딩 사용하지 않는 것이 좋습니다 - 즉, 아파치의 적절한 구성을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="16ae67bb3fc772005f084defbf2e6db1d92d5719" translate="yes" xml:space="preserve">
          <source>GeoDjango widgets are template-based, so their attributes are mostly different from other Django widget attributes.</source>
          <target state="translated">GeoDjango 위젯은 템플릿 기반이므로 속성이 대부분 다른 Django 위젯 속성과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="9d8e7e09cdd6b3e40cc49012bdb226fb60c1266a" translate="yes" xml:space="preserve">
          <source>GeoDjango&amp;rsquo;s ORM will automatically wrap geometry values in transformation SQL, allowing the developer to work at a higher level of abstraction:</source>
          <target state="translated">GeoDjango의 ORM은 변환 SQL에서 형상 값을 자동으로 래핑하여 개발자가보다 높은 수준의 추상화에서 작업 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="136545a4948e28df9a4cfd41baae8bdacfa95501" translate="yes" xml:space="preserve">
          <source>GeoDjango&amp;rsquo;s admin site</source>
          <target state="translated">GeoDjango의 관리 사이트</target>
        </trans-unit>
        <trans-unit id="1cbe465617fb128d99a40591f1695db47635c221" translate="yes" xml:space="preserve">
          <source>GeoDjango&amp;rsquo;s lookup types may be used with any manager method like &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;exclude()&lt;/code&gt;, etc. However, the lookup types unique to GeoDjango are only available on spatial fields.</source>
          <target state="translated">GeoDjango의 조회 유형은 &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;exclude()&lt;/code&gt; 등과 같은 모든 관리자 메소드와 함께 사용될 수 있습니다 . 그러나 GeoDjango 고유의 조회 유형은 공간 필드에서만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e930c77fc593e1a3057029af0150f200e578a5f8" translate="yes" xml:space="preserve">
          <source>GeoDjango’s admin site</source>
          <target state="translated">GeoDjango의 관리 사이트</target>
        </trans-unit>
        <trans-unit id="98ee0730fa1ecffb4446df2cf10fd043d3f3523c" translate="yes" xml:space="preserve">
          <source>GeoIP</source>
          <target state="translated">GeoIP</target>
        </trans-unit>
        <trans-unit id="39ee39af2d2e3bf7b46140abbb7f4371a399a37f" translate="yes" xml:space="preserve">
          <source>GeoIP(R) is a registered trademark of MaxMind, Inc.</source>
          <target state="translated">GeoIP (R)는 MaxMind, Inc.의 등록 상표입니다.</target>
        </trans-unit>
        <trans-unit id="97eeda258d4d0c87a81a7741038e625eda23a2a6" translate="yes" xml:space="preserve">
          <source>GeoJSON</source>
          <target state="translated">GeoJSON</target>
        </trans-unit>
        <trans-unit id="34040826ec22e3299cf157468d8b0814d292c197" translate="yes" xml:space="preserve">
          <source>GeoJSON Serializer</source>
          <target state="translated">GeoJSON 시리얼 라이저</target>
        </trans-unit>
        <trans-unit id="4c3f8a1884337450687146c8287b49e38ea44373" translate="yes" xml:space="preserve">
          <source>Geographic Admin</source>
          <target state="translated">지리 관리자</target>
        </trans-unit>
        <trans-unit id="08a11adebd76ce7a843b8dca89cdaf9b00bb0144" translate="yes" xml:space="preserve">
          <source>Geographic Data</source>
          <target state="translated">지리 데이터</target>
        </trans-unit>
        <trans-unit id="0eda40b0a849adbdecdc0f612b3bd4d836c6e254" translate="yes" xml:space="preserve">
          <source>Geographic Database Functions</source>
          <target state="translated">지리 데이터베이스 기능</target>
        </trans-unit>
        <trans-unit id="a703edbf6881dafb5316d88af33048e916592325" translate="yes" xml:space="preserve">
          <source>Geographic Feeds</source>
          <target state="translated">지리 피드</target>
        </trans-unit>
        <trans-unit id="190944449613afbd7f9bd321a28222ea15fa1f9b" translate="yes" xml:space="preserve">
          <source>Geographic Models</source>
          <target state="translated">지리적 모델</target>
        </trans-unit>
        <trans-unit id="7a861886b376799d062ab3c6823b4d1c938a1308" translate="yes" xml:space="preserve">
          <source>Geographic Sitemaps</source>
          <target state="translated">지리적 사이트 맵</target>
        </trans-unit>
        <trans-unit id="021a323d2229cf60dd8130ccafa9464d9f895101" translate="yes" xml:space="preserve">
          <source>Geographic annotations</source>
          <target state="translated">지리적 주석</target>
        </trans-unit>
        <trans-unit id="2e8c2b4df8eeaac4252c5331e04802c9b86ab936" translate="yes" xml:space="preserve">
          <source>Geographic framework</source>
          <target state="translated">지리적 프레임 워크</target>
        </trans-unit>
        <trans-unit id="0079ff114abc2ccabd5e955bd2f167e7889a1687" translate="yes" xml:space="preserve">
          <source>Geographic queries with geometries take the following general form (assuming the &lt;code&gt;Zipcode&lt;/code&gt; model used in the &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt;):</source>
          <target state="translated">지오메트리가있는 지리적 쿼리는 다음과 같은 일반적인 형식을 취합니다 ( &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt; 에서 사용되는 &lt;code&gt;Zipcode&lt;/code&gt; 모델을 가정 ).</target>
        </trans-unit>
        <trans-unit id="0c0fac69cdfabd05c7df2017c1e01ab5627a45ab" translate="yes" xml:space="preserve">
          <source>Geography Type</source>
          <target state="translated">지리 유형</target>
        </trans-unit>
        <trans-unit id="fbe47565ebdb262717c7861ebf58e31b12c1414d" translate="yes" xml:space="preserve">
          <source>Geography support is limited to PostGIS and will force the SRID to be 4326.</source>
          <target state="translated">지리 지원은 PostGIS로 제한되며 SRID는 4326이됩니다.</target>
        </trans-unit>
        <trans-unit id="46250ca0dfb01ec701cd710565523f12ab685b09" translate="yes" xml:space="preserve">
          <source>Geolocation with GeoIP2</source>
          <target state="translated">GeoIP2를 사용한 지리적 위치</target>
        </trans-unit>
        <trans-unit id="35171d7fc44e44bbd149d79f68793a5f09307bb0" translate="yes" xml:space="preserve">
          <source>Geometries are Pythonic</source>
          <target state="translated">기하학은 파이썬입니다</target>
        </trans-unit>
        <trans-unit id="9a9e67d4b853d4bb48d8ab51f08cb7351bf0a8ff" translate="yes" xml:space="preserve">
          <source>Geometries support set-like operators:</source>
          <target state="translated">형상은 세트와 같은 연산자를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9d1226717c2fc305626512b0a1ae618fddfee0b9" translate="yes" xml:space="preserve">
          <source>Geometry</source>
          <target state="translated">Geometry</target>
        </trans-unit>
        <trans-unit id="6bf68521ba1b36c0e30717dcc5416290c2bd195a" translate="yes" xml:space="preserve">
          <source>Geometry Collections</source>
          <target state="translated">지오메트리 컬렉션</target>
        </trans-unit>
        <trans-unit id="634de25ba228f9fe855e233d1a73bb1e3624e2b2" translate="yes" xml:space="preserve">
          <source>Geometry Engine Open Source</source>
          <target state="translated">형상 엔진 오픈 소스</target>
        </trans-unit>
        <trans-unit id="d3262bc1ec3d4cb7ac4532f23997b4f04e17ee63" translate="yes" xml:space="preserve">
          <source>Geometry Factories</source>
          <target state="translated">지오메트리 팩토리</target>
        </trans-unit>
        <trans-unit id="7bd508896b5eca1c3e3ad0712513d474a8a12299" translate="yes" xml:space="preserve">
          <source>Geometry Field Options</source>
          <target state="translated">형상 필드 옵션</target>
        </trans-unit>
        <trans-unit id="a5d5114f7a773f987eb673d642d7f9de4967fe5d" translate="yes" xml:space="preserve">
          <source>Geometry Lookups</source>
          <target state="translated">형상 조회</target>
        </trans-unit>
        <trans-unit id="0c966cf1201e4037c0f25b2d0ce4de2ba27b4d5a" translate="yes" xml:space="preserve">
          <source>Geometry Objects</source>
          <target state="translated">형상 객체</target>
        </trans-unit>
        <trans-unit id="7c0ba0c8b987af42bc684ac9ce4f146c583a5ebc" translate="yes" xml:space="preserve">
          <source>Geometry conversion support &lt;code&gt;C&lt;/code&gt;. The lookup does not have native raster support, all raster data is automatically converted to geometries.</source>
          <target state="translated">형상 변환을 지원 &lt;code&gt;C&lt;/code&gt; . 조회에는 기본 래스터 지원이 없으며 모든 래스터 데이터가 자동으로 형상으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="08c06c630a3754e6edc49ddc9cd070ec64b0b09d" translate="yes" xml:space="preserve">
          <source>Geometry example:</source>
          <target state="translated">형상 예 :</target>
        </trans-unit>
        <trans-unit id="7a62c2c9bf321ceff5fae325eafc6d04db4cc6ff" translate="yes" xml:space="preserve">
          <source>Geospatial Data Abstraction Library</source>
          <target state="translated">지리 공간 데이터 추상화 라이브러리</target>
        </trans-unit>
        <trans-unit id="0dc2e5954c12f037f940d57ec5c9b7afe01ce77f" translate="yes" xml:space="preserve">
          <source>Geospatial libraries</source>
          <target state="translated">지리 공간 라이브러리</target>
        </trans-unit>
        <trans-unit id="99ed2c09261dfab0ea3ab6d07aae9b6d75fa093d" translate="yes" xml:space="preserve">
          <source>German legal metre</source>
          <target state="translated">독일 법률 미터</target>
        </trans-unit>
        <trans-unit id="69e57c40eaf705eec95814bf280b26be032b7fce" translate="yes" xml:space="preserve">
          <source>Get the latest SpatiaLite library source bundle from the &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/libspatialite-sources/&quot;&gt;download page&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/libspatialite-sources/&quot;&gt;다운로드 페이지&lt;/a&gt; 에서 최신 SpatiaLite 라이브러리 소스 번들을 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="f8219b39fc78d276a3e9eee050eeafc262ee63bc" translate="yes" xml:space="preserve">
          <source>Get the latest version of Python at &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt; or with your operating system&amp;rsquo;s package manager.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt; 또는 운영 체제의 패키지 관리자와 함께 최신 버전의 Python을 받으십시오 .</target>
        </trans-unit>
        <trans-unit id="349ffb96bafdf031de5166a9a6d08020c5ebd1ec" translate="yes" xml:space="preserve">
          <source>Get the list of items for this view. This must be an iterable and may be a queryset (in which queryset-specific behavior will be enabled).</source>
          <target state="translated">이 뷰의 아이템리스트를 가져옵니다. 이것은 iterable이어야하며 queryset 일 수 있습니다 (queryset 특정 동작이 활성화 될 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="c595045ec25964be60d78faa85d89371211ec4b1" translate="yes" xml:space="preserve">
          <source>Get things right from the start</source>
          <target state="translated">처음부터 바로 물건을 얻으십시오</target>
        </trans-unit>
        <trans-unit id="ddf2045ef69c7a12fcf93ada7af9c40769a94785" translate="yes" xml:space="preserve">
          <source>Get your database running</source>
          <target state="translated">데이터베이스 실행</target>
        </trans-unit>
        <trans-unit id="3cd928230f05d523f41f71e6df4e087feb93a4dd" translate="yes" xml:space="preserve">
          <source>Gettext utilities</source>
          <target state="translated">Gettext 유틸리티</target>
        </trans-unit>
        <trans-unit id="16bf3406ad6ebe10ef028b5b1dc22df2a8c7a781" translate="yes" xml:space="preserve">
          <source>Getting a copy of Django&amp;rsquo;s development version</source>
          <target state="translated">Django의 개발 버전 사본 받기</target>
        </trans-unit>
        <trans-unit id="3752376ac856de4d9f6ea65db547f68c6031974e" translate="yes" xml:space="preserve">
          <source>Getting a list of FlatPage objects in your templates</source>
          <target state="translated">템플릿에서 FlatPage 객체 목록 가져 오기</target>
        </trans-unit>
        <trans-unit id="060f712c74598ce01e86d56802d9344d8ed68bb7" translate="yes" xml:space="preserve">
          <source>Getting help</source>
          <target state="translated">도움을 받다</target>
        </trans-unit>
        <trans-unit id="095e7a3db06b22c5a52190502caa36691be8935e" translate="yes" xml:space="preserve">
          <source>Getting runtime help</source>
          <target state="translated">런타임 도움말 얻기</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="85846ce2a297da86bf6e7a51470a230994164cad" translate="yes" xml:space="preserve">
          <source>Getting the current domain for display</source>
          <target state="translated">표시 할 현재 도메인 얻기</target>
        </trans-unit>
        <trans-unit id="d5783cf876d18d2878f81129550d5945ce0679bf" translate="yes" xml:space="preserve">
          <source>Getting the current domain for full URLs</source>
          <target state="translated">전체 URL에 대한 현재 도메인 가져 오기</target>
        </trans-unit>
        <trans-unit id="03fb97db904d87ad00dad0da6fa0440ea4978bb4" translate="yes" xml:space="preserve">
          <source>Getting the current storage class</source>
          <target state="translated">현재 스토리지 클래스 얻기</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="a379f1c31915bf948dceb7774f0d0b06315610cf" translate="yes" xml:space="preserve">
          <source>Give &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; a list of objects, plus the number of items you&amp;rsquo;d like to have on each page, and it gives you methods for accessing the items for each page:</source>
          <target state="translated">부여 &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;Paginator&lt;/code&gt; &lt;/a&gt; 개체의 목록, 플러스 당신이 각 페이지에 가지고 싶은 아이템의 수를, 그리고 당신에게 각 페이지에 대한 항목을 액세스하기위한 방법을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="2d98907f33fa5c7e1fd2266881356efab899491c" translate="yes" xml:space="preserve">
          <source>Give Django your database parameters</source>
          <target state="translated">Django에 데이터베이스 매개 변수 제공</target>
        </trans-unit>
        <trans-unit id="6681947b2c88d7800dc6eec380b6e38b3d17b132" translate="yes" xml:space="preserve">
          <source>Give your model a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;, and pass it the names of the two fields described above. If these fields are named &amp;ldquo;content_type&amp;rdquo; and &amp;ldquo;object_id&amp;rdquo;, you can omit this &amp;ndash; those are the default field names &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; will look for.</source>
          <target state="translated">모델에 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; 를&lt;/a&gt; 제공 하고 위에서 설명한 두 필드의 이름을 전달하십시오. 이러한 필드의 이름이 &quot;content_type&quot;및 &quot;object_id&quot;인 경우이를 생략 할 수 있습니다.이 필드 는 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 가 찾는 기본 필드 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="942bc2871d4842b9f270c2479b3dd36378a861ad" translate="yes" xml:space="preserve">
          <source>Give your model a &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt;. The usual name for this field is &amp;ldquo;content_type&amp;rdquo;.</source>
          <target state="translated">모델에게 부여 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 에 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; . 이 필드의 일반적인 이름은&amp;ldquo;content_type&amp;rdquo;입니다.</target>
        </trans-unit>
        <trans-unit id="68438852373dfcf41a28180c2297d1cc31651229" translate="yes" xml:space="preserve">
          <source>Give your model a field that can store primary key values from the models you&amp;rsquo;ll be relating to. For most models, this means a &lt;a href=&quot;../models/fields#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;. The usual name for this field is &amp;ldquo;object_id&amp;rdquo;.</source>
          <target state="translated">관련 모델에서 기본 키 값을 저장할 수있는 필드를 모델에 제공하십시오. 대부분의 모델에서 이는 &lt;a href=&quot;../models/fields#django.db.models.PositiveIntegerField&quot;&gt; &lt;code&gt;PositiveIntegerField&lt;/code&gt; 를&lt;/a&gt; 의미합니다 . 이 필드의 일반적인 이름은&amp;ldquo;object_id&amp;rdquo;입니다.</target>
        </trans-unit>
        <trans-unit id="d83ce53d6e4a13ff9f676afe3335baa6383a5f2e" translate="yes" xml:space="preserve">
          <source>Give your model metadata by using an inner &lt;code&gt;class Meta&lt;/code&gt;, like so:</source>
          <target state="translated">내부 &lt;code&gt;class Meta&lt;/code&gt; 를 사용하여 모델 메타 데이터를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec0d34e7da73bbe49b892f918897ee31576ecbf5" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;files&lt;/code&gt; dictionaries and this widget&amp;rsquo;s name, returns whether or not there&amp;rsquo;s data or files for the widget.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; 및 &lt;code&gt;files&lt;/code&gt; 사전 및이 위젯의 ​​이름은 위젯에 대한 데이터 또는 파일이 있는지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0c2297fdd50dfa2cb53228dc47c397f2594f114b" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Blog&lt;/code&gt; instance &lt;code&gt;b5&lt;/code&gt; that has already been saved to the database, this example changes its name and updates its record in the database:</source>
          <target state="translated">데이터베이스에 이미 저장된 &lt;code&gt;Blog&lt;/code&gt; 인스턴스 &lt;code&gt;b5&lt;/code&gt; 가 주어지면 이 예제는 이름을 변경하고 데이터베이스에서 레코드를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="7517c0cbad9c754ae327298f888dae38e0a51a05" translate="yes" xml:space="preserve">
          <source>Given a contact form:</source>
          <target state="translated">연락 양식이 주어지면 :</target>
        </trans-unit>
        <trans-unit id="8b44975103a4bb30c311396e36118463fdf07d71" translate="yes" xml:space="preserve">
          <source>Given a dictionary of data and this widget&amp;rsquo;s name, returns the value of this widget. &lt;code&gt;files&lt;/code&gt; may contain data coming from &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;None&lt;/code&gt; if a value wasn&amp;rsquo;t provided. Note also that &lt;code&gt;value_from_datadict&lt;/code&gt; may be called more than once during handling of form data, so if you customize it and add expensive processing, you should implement some caching mechanism yourself.</source>
          <target state="translated">데이터 사전과이 위젯 이름이 주어지면이 위젯의 ​​값을 리턴합니다. &lt;code&gt;files&lt;/code&gt; 은 &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; 에서 오는 데이터를 포함 할 수 있습니다 . 값을 제공하지 않으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 . 또한 주 &lt;code&gt;value_from_datadict&lt;/code&gt; 는 당신이 그것을 사용자 정의하고 비용 처리를 추가하는 경우 그래서, 당신은 몇 가지 캐싱 메커니즘을 직접 구현해야합니다, 폼 데이터를 처리하는 동안 한 번 이상 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="119e6f39993a5ece4c0066d470355c216ce3f6c9" translate="yes" xml:space="preserve">
          <source>Given a distance (float), returns the point (or closest point) within the geometry (&lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.gis.geos.MultiLineString&quot;&gt;&lt;code&gt;MultiLineString&lt;/code&gt;&lt;/a&gt;) at that distance. The normalized version takes the distance as a float between 0 (origin) and 1 (endpoint).</source>
          <target state="translated">거리 (부동)가 주어진 경우 해당 거리의 형상 ( &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.gis.geos.MultiLineString&quot;&gt; &lt;code&gt;MultiLineString&lt;/code&gt; &lt;/a&gt; ) 내에서 점 (또는 가장 가까운 점)을 반환합니다 . 정규화 된 버전은 거리를 0 (원점)과 1 (종점) 사이의 부동 소수점으로 취합니다.</target>
        </trans-unit>
        <trans-unit id="a0116de099366db2ec64edadc7d21c2a59efd76d" translate="yes" xml:space="preserve">
          <source>Given a form field&amp;rsquo;s &lt;code&gt;initial&lt;/code&gt; value, returns whether or not the widget can be rendered with the &lt;code&gt;required&lt;/code&gt; HTML attribute. Forms use this method along with &lt;a href=&quot;fields#django.forms.Field.required&quot;&gt;&lt;code&gt;Field.required&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#django.forms.Form.use_required_attribute&quot;&gt;&lt;code&gt;Form.use_required_attribute&lt;/code&gt;&lt;/a&gt; to determine whether or not to display the &lt;code&gt;required&lt;/code&gt; attribute for each field.</source>
          <target state="translated">양식 필드의 &lt;code&gt;initial&lt;/code&gt; 값이 주어지면 위젯을 &lt;code&gt;required&lt;/code&gt; HTML 속성 으로 렌더링 할 수 있는지 여부를 리턴합니다 . 폼은이 메소드를 &lt;a href=&quot;fields#django.forms.Field.required&quot;&gt; &lt;code&gt;Field.required&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api#django.forms.Form.use_required_attribute&quot;&gt; &lt;code&gt;Form.use_required_attribute&lt;/code&gt; &lt;/a&gt; 와 함께 사용 하여 각 필드에 &lt;code&gt;required&lt;/code&gt; 속성 을 표시할지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="25ce09b71e61c136d2d9c17228b7872efdce4f9e" translate="yes" xml:space="preserve">
          <source>Given a middleware class, returns a view decorator. This lets you use middleware functionality on a per-view basis. The middleware is created with no params passed.</source>
          <target state="translated">미들웨어 클래스가 주어지면 뷰 데코레이터를 리턴합니다. 이를 통해 뷰별로 미들웨어 기능을 사용할 수 있습니다. 매개 변수가 전달되지 않은 미들웨어가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="365439c148a642d6a442b1b041f1b802323a613e" translate="yes" xml:space="preserve">
          <source>Given a model instance, the display value for a field with &lt;code&gt;choices&lt;/code&gt; can be accessed using the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; method. For example:</source>
          <target state="translated">모델 인스턴스가 주어지면 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 &lt;code&gt;choices&lt;/code&gt; 있는 필드의 표시 값에 액세스 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1b1e3dc1152220b4ff60c94af1d5193dc75aa0d2" translate="yes" xml:space="preserve">
          <source>Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.</source>
          <target state="translated">정수가 주어지면 요청 된 숫자를 반환합니다. 여기서 1은 가장 오른쪽 숫자이고 2는 가장 오른쪽 두 번째 숫자입니다. 잘못된 입력에 대한 원래 값을 반환합니다 (입력 또는 인수가 정수가 아닌 경우 또는 인수가 1보다 작습니다. 그렇지 않으면 출력은 항상 정수입니다.</target>
        </trans-unit>
        <trans-unit id="3a24cd0b9164167b8eb5ad888792e3a7b90dd361" translate="yes" xml:space="preserve">
          <source>Given format can be the predefined one &lt;a href=&quot;../settings#std:setting-TIME_FORMAT&quot;&gt;&lt;code&gt;TIME_FORMAT&lt;/code&gt;&lt;/a&gt;, or a custom format, same as the &lt;a href=&quot;#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; filter. Note that the predefined format is locale-dependent.</source>
          <target state="translated">주어진 형식은 사전 정의 된 &lt;a href=&quot;../settings#std:setting-TIME_FORMAT&quot;&gt; &lt;code&gt;TIME_FORMAT&lt;/code&gt; &lt;/a&gt; 형식이거나 &lt;a href=&quot;#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 필터 와 동일한 사용자 정의 형식 일 수 있습니다. 사전 정의 된 형식은 로케일에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="5ba0b76f9d8c9781c32b85d824833b69cc244a80" translate="yes" xml:space="preserve">
          <source>Given the above &lt;code&gt;'Cheddar Talk'&lt;/code&gt; blog example, this example would override the previous record in the database:</source>
          <target state="translated">위의 &lt;code&gt;'Cheddar Talk'&lt;/code&gt; 블로그 예제에서이 예제는 데이터베이스의 이전 레코드를 대체합니다.</target>
        </trans-unit>
        <trans-unit id="d37c78d85d3a7273f3922e688e66c694ac20f4ef" translate="yes" xml:space="preserve">
          <source>Given the above template error, &lt;code&gt;template_debug&lt;/code&gt; would look like:</source>
          <target state="translated">위의 템플릿 오류가 발생하면 &lt;code&gt;template_debug&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3714bdc37d70180c2c462d1df29b61921d28b425" translate="yes" xml:space="preserve">
          <source>Given the datetime &lt;code&gt;2015-06-15 14:30:50.000321+00:00&lt;/code&gt;, the built-in &lt;code&gt;kind&lt;/code&gt;s return:</source>
          <target state="translated">날짜 시간 &lt;code&gt;2015-06-15 14:30:50.000321+00:00&lt;/code&gt; 이면 기본 제공 &lt;code&gt;kind&lt;/code&gt; 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9a29688721ee0be91dd38356c46ff2c8ad421e5f" translate="yes" xml:space="preserve">
          <source>Given the datetime &lt;code&gt;2015-06-15 23:30:01.000321+00:00&lt;/code&gt;, the built-in &lt;code&gt;lookup_name&lt;/code&gt;s return:</source>
          <target state="translated">datetime &lt;code&gt;2015-06-15 23:30:01.000321+00:00&lt;/code&gt; 이면 내장 &lt;code&gt;lookup_name&lt;/code&gt; 은 다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="88b00b26884e185bb263dd1c872db086f631c7b3" translate="yes" xml:space="preserve">
          <source>Given this standard interface, an &lt;code&gt;HttpRequest&lt;/code&gt; instance can be passed directly to an XML parser such as &lt;a href=&quot;https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree&quot;&gt;&lt;code&gt;ElementTree&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 표준 인터페이스가 주어지면 &lt;code&gt;HttpRequest&lt;/code&gt; 인스턴스는 &lt;a href=&quot;https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree&quot;&gt; &lt;code&gt;ElementTree&lt;/code&gt; &lt;/a&gt; 와 같은 XML 파서로 직접 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4975cd64a92e88880758085eef7772db2bdb4f4d" translate="yes" xml:space="preserve">
          <source>Given:</source>
          <target state="translated">Given:</target>
        </trans-unit>
        <trans-unit id="9d05ac7a7d5e5cd76d141b9fe988215dfd520a74" translate="yes" xml:space="preserve">
          <source>Globalization (&lt;code&gt;i18n&lt;/code&gt;/&lt;code&gt;l10n&lt;/code&gt;)</source>
          <target state="translated">세계화 ( &lt;code&gt;i18n&lt;/code&gt; / &lt;code&gt;l10n&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ba172508be68719fa9795c5f2138b1035ec574a1" translate="yes" xml:space="preserve">
          <source>Go ahead and install the previously cloned copy of Django:</source>
          <target state="translated">이전에 복제 된 Django 사본을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="739cebceefdb523d7e9f5a9b6a934e37e2d1de98" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http://localhost:8000/polls/&lt;/a&gt; in your browser, and you should see the text &amp;ldquo;&lt;em&gt;Hello, world. You&amp;rsquo;re at the polls index.&lt;/em&gt;&amp;rdquo;, which you defined in the &lt;code&gt;index&lt;/code&gt; view.</source>
          <target state="translated">이동 &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;에 http : // localhost를 : 8000 / 여론 조사 /&lt;/a&gt; 브라우저와 텍스트를 볼 수 &quot; &lt;em&gt;안녕하세요, 세계. 당신은 여론 조사 색인에 있습니다. &lt;/em&gt;&amp;rdquo;, &lt;code&gt;index&lt;/code&gt; 보기 에서 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="e865850e7567ce4f66ee6883bb54c84fff0e9193" translate="yes" xml:space="preserve">
          <source>Gold Coast foot</source>
          <target state="translated">골드 코스트 발</target>
        </trans-unit>
        <trans-unit id="f179b6f36465b5aac2f67605586252775def9c70" translate="yes" xml:space="preserve">
          <source>Good:</source>
          <target state="translated">Good:</target>
        </trans-unit>
        <trans-unit id="77903aaddab038102d4549b08d4a2e68bdafb921" translate="yes" xml:space="preserve">
          <source>Good: &lt;code&gt;'/foo/bar/'&lt;/code&gt;</source>
          <target state="translated">좋음 : &lt;code&gt;'/foo/bar/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84cc7d32930e72c5b9fc5a877106db98126eb15c" translate="yes" xml:space="preserve">
          <source>Google PageSpeed</source>
          <target state="translated">Google PageSpeed</target>
        </trans-unit>
        <trans-unit id="e391eebe3da38bf188122fbc620ac8276e058db8" translate="yes" xml:space="preserve">
          <source>Greater than or equal to.</source>
          <target state="translated">크거나 같습니다.</target>
        </trans-unit>
        <trans-unit id="1a0cf2334e157e041cd80ecac674aacbdace7685" translate="yes" xml:space="preserve">
          <source>Greater than or equal to. Example:</source>
          <target state="translated">크거나 같습니다. 예:</target>
        </trans-unit>
        <trans-unit id="0bb5b098cc8f14ae1d23ed0bdc731dd64c4176ef" translate="yes" xml:space="preserve">
          <source>Greater than.</source>
          <target state="translated">보다 큰.</target>
        </trans-unit>
        <trans-unit id="d65a7235faec5e7686d204089dc0b355a23e4154" translate="yes" xml:space="preserve">
          <source>Greater than. Example:</source>
          <target state="translated">보다 큰. 예:</target>
        </trans-unit>
        <trans-unit id="4858407f7012787457799245e5f0bd3b83a5adc2" translate="yes" xml:space="preserve">
          <source>Grouping on other properties</source>
          <target state="translated">다른 속성으로 그룹화</target>
        </trans-unit>
        <trans-unit id="ae9629f4ebb82c6331c0809fa9a0e54b00e578e6" translate="yes" xml:space="preserve">
          <source>Groups</source>
          <target state="translated">Groups</target>
        </trans-unit>
        <trans-unit id="7dd43e46b89810a494974c2ea0f7a7775e008522" translate="yes" xml:space="preserve">
          <source>Groups: A generic way of applying labels and permissions to more than one user.</source>
          <target state="translated">그룹 : 둘 이상의 사용자에게 레이블 및 권한을 적용하는 일반적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="f88767387128fd81f27474f40a7e375537269897" translate="yes" xml:space="preserve">
          <source>Guides: How-tos</source>
          <target state="translated">가이드 : 사용법</target>
        </trans-unit>
        <trans-unit id="70cd7eb95746087d1d1f0e4c0e095606fcd9f55b" translate="yes" xml:space="preserve">
          <source>Guides: Intro</source>
          <target state="translated">가이드 : 소개</target>
        </trans-unit>
        <trans-unit id="550b6c2e449f5e1e62c195eae6c4b6fca172b664" translate="yes" xml:space="preserve">
          <source>HEX / HEXEWKB</source>
          <target state="translated">HEX / HEXEWKB</target>
        </trans-unit>
        <trans-unit id="c2f470b5eb2e1406be38abd6762532b112bbb2fd" translate="yes" xml:space="preserve">
          <source>HSTS is an HTTP header that informs a browser that all future connections to a particular site should always use HTTPS. Combined with redirecting requests over HTTP to HTTPS, this will ensure that connections always enjoy the added security of SSL provided one successful connection has occurred. HSTS may either be configured with &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS&quot;&gt;&lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt;&lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt;&lt;/a&gt;, or on the Web server.</source>
          <target state="translated">HSTS는 특정 사이트에 대한 모든 향후 연결에서 항상 HTTPS를 사용해야한다는 것을 브라우저에 알리는 HTTP 헤더입니다. HTTP를 통한 요청을 HTTPS로 리디렉션하는 것과 결합하면 하나의 연결이 성공한 경우 항상 SSL의 추가 보안을 누릴 수 있습니다. HSTS는 &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS&quot;&gt; &lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt; &lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt; &lt;/a&gt; 로 구성되거나 웹 서버에서 구성 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a307b98224835cb2929f0a670d5d37725809e298" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;id&lt;/code&gt; attributes on the form elements.</source>
          <target state="translated">양식 요소의 HTML &lt;code&gt;id&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="7803fb9ad97a390e5a19c56907c38525501a3225" translate="yes" xml:space="preserve">
          <source>HTML form submission is a tricky area. There&amp;rsquo;s no guarantee that the submission will include encoding information, which means the framework might have to guess at the encoding of submitted data.</source>
          <target state="translated">HTML 양식 제출은 까다로운 영역입니다. 제출에 인코딩 정보가 포함된다는 보장은 없습니다. 이는 프레임 워크가 제출 된 데이터의 인코딩을 추측해야 할 수도 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b06b171ed438d64895564aa6fdbd928c4e3f83e8" translate="yes" xml:space="preserve">
          <source>HTML forms</source>
          <target state="translated">HTML 양식</target>
        </trans-unit>
        <trans-unit id="b98947084aa9e08a220c89b11ad0490ed9829cdd" translate="yes" xml:space="preserve">
          <source>HTML5 input types and browser validation</source>
          <target state="translated">HTML5 입력 유형 및 브라우저 유효성 검사</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="dc5818160f0a79f1d8b7b37801c4d5d5f5e71152" translate="yes" xml:space="preserve">
          <source>HTTP Strict Transport Security</source>
          <target state="translated">HTTP 엄격한 전송 보안</target>
        </trans-unit>
        <trans-unit id="01fc6d102bf6376f0642cb6ab27bbd9ce1c99daf" translate="yes" xml:space="preserve">
          <source>HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a Web page (using an HTTP &lt;code&gt;GET&lt;/code&gt; request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, etc.).</source>
          <target state="translated">HTTP 클라이언트는 많은 헤더를 전송하여 서버가 이미 본 리소스의 사본에 대해 알릴 수 있습니다. 이것은 클라이언트가 이미 검색 한 것에 대한 모든 데이터를 전송하지 않기 위해 HTTP &lt;code&gt;GET&lt;/code&gt; 요청을 사용하여 웹 페이지를 검색 할 때 일반적으로 사용됩니다 . 그러나 모든 HTTP 메소드 ( &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; 등)에 동일한 헤더를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="766e6a6a6850f67b45994afcaa0fd166411b93fb" translate="yes" xml:space="preserve">
          <source>HTTP header fields cannot contain newlines. An attempt to set a header field containing a newline character (CR or LF) will raise &lt;code&gt;BadHeaderError&lt;/code&gt;</source>
          <target state="translated">HTTP 헤더 필드는 개행을 포함 할 수 없습니다. 개행 문자 (CR 또는 LF)를 포함하는 헤더 필드를 설정하려고하면 &lt;code&gt;BadHeaderError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3a7d6d24789915f29d0b4286e7264bdfafeb3eb9" translate="yes" xml:space="preserve">
          <source>HTTP performance</source>
          <target state="translated">HTTP 성능</target>
        </trans-unit>
        <trans-unit id="f52698c28f0d2036450e02a85451ee4f5be02442" translate="yes" xml:space="preserve">
          <source>HTTPS</source>
          <target state="translated">HTTPS</target>
        </trans-unit>
        <trans-unit id="775bc82c4bfbe164f204d0e6798621f0a7d5acfa" translate="yes" xml:space="preserve">
          <source>Handily, the &lt;code&gt;ListView&lt;/code&gt; has a &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt;&lt;code&gt;get_queryset()&lt;/code&gt;&lt;/a&gt; method we can override. By default, it returns the value of the &lt;code&gt;queryset&lt;/code&gt; attribute, but we can use it to add more logic.</source>
          <target state="translated">간단히, &lt;code&gt;ListView&lt;/code&gt; 에는 재정의 할 수 있는 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt; &lt;code&gt;get_queryset()&lt;/code&gt; &lt;/a&gt; 메서드가 있습니다. 기본적으로 &lt;code&gt;queryset&lt;/code&gt; 속성 의 값을 반환 하지만 더 많은 로직을 추가하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="362f233bfd36bbe9ffba21ece507104cececa24e" translate="yes" xml:space="preserve">
          <source>Handlers</source>
          <target state="translated">Handlers</target>
        </trans-unit>
        <trans-unit id="05ba8572a9a6792e3475e4e0412dc1a107795a7e" translate="yes" xml:space="preserve">
          <source>Handlers of this signal must not perform database schema alterations as doing so may cause the &lt;a href=&quot;django-admin#django-admin-flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; command to fail if it runs during the &lt;a href=&quot;django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">이 신호의 핸들러는 데이터베이스 스키마 변경을 수행해서는 안되며 , &lt;a href=&quot;django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령 중에 &lt;a href=&quot;django-admin#django-admin-flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt; 명령이 실행될 경우 flush 명령이 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="323e84376fdf3f635c78168388a0818a6dcc35a7" translate="yes" xml:space="preserve">
          <source>Handles conditional GET operations. If the response doesn&amp;rsquo;t have an &lt;code&gt;ETag&lt;/code&gt; header, the middleware adds one if needed. If the response has an &lt;code&gt;ETag&lt;/code&gt; or &lt;code&gt;Last-Modified&lt;/code&gt; header, and the request has &lt;code&gt;If-None-Match&lt;/code&gt; or &lt;code&gt;If-Modified-Since&lt;/code&gt;, the response is replaced by an &lt;a href=&quot;request-response#django.http.HttpResponseNotModified&quot;&gt;&lt;code&gt;HttpResponseNotModified&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">조건부 GET 작업을 처리합니다. 응답에 &lt;code&gt;ETag&lt;/code&gt; 헤더가 없으면 필요한 경우 미들웨어가 추가합니다. 응답에 &lt;code&gt;ETag&lt;/code&gt; 또는 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더가 있고 요청에 &lt;code&gt;If-None-Match&lt;/code&gt; 또는 &lt;code&gt;If-Modified-Since&lt;/code&gt; 가 있으면 응답은 &lt;a href=&quot;request-response#django.http.HttpResponseNotModified&quot;&gt; &lt;code&gt;HttpResponseNotModified&lt;/code&gt; &lt;/a&gt; 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="0b9f50ab5ace4fb669d21d51fe819de6624952c7" translate="yes" xml:space="preserve">
          <source>Handles responding to requests for the OPTIONS HTTP verb. Returns a response with the &lt;code&gt;Allow&lt;/code&gt; header containing a list of the view&amp;rsquo;s allowed HTTP method names.</source>
          <target state="translated">OPTIONS HTTP 동사 요청에 대한 응답을 처리합니다. 보기의 허용 된 HTTP 메소드 이름 목록을 포함하는 &lt;code&gt;Allow&lt;/code&gt; 헤더가 있는 응답을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="64e2085c860648c646aefde6c507cdb08da718af" translate="yes" xml:space="preserve">
          <source>Handling HTTP requests</source>
          <target state="translated">HTTP 요청 처리</target>
        </trans-unit>
        <trans-unit id="554f39c415dd6dfb6fd370063343bb301dbfb1c2" translate="yes" xml:space="preserve">
          <source>Handling an asterisk &lt;code&gt;'*'&lt;/code&gt; according to &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.4&lt;/strong&gt;&lt;/a&gt; was added.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231 # section-7.1.4&lt;/strong&gt;&lt;/a&gt; 에 따라 별표 &lt;code&gt;'*'&lt;/code&gt; 처리 가 추가되었습니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45c281fdcfaa935eff5cdec670aec151d0248a56" translate="yes" xml:space="preserve">
          <source>Handling authorization in custom backends</source>
          <target state="translated">사용자 정의 백엔드에서 권한 처리</target>
        </trans-unit>
        <trans-unit id="3f40bbcec32f150b1bf8b1b36828c6bcec2184c9" translate="yes" xml:space="preserve">
          <source>Handling errors in actions</source>
          <target state="translated">동작 오류 처리</target>
        </trans-unit>
        <trans-unit id="7549e355ea2bfbfff3483014ede4f6852fd36ec7" translate="yes" xml:space="preserve">
          <source>Handling exceptions within PostgreSQL transactions</source>
          <target state="translated">PostgreSQL 트랜잭션 내 예외 처리</target>
        </trans-unit>
        <trans-unit id="f4a45a24846f6ece0779cd7a39f0d28a6c76f7d1" translate="yes" xml:space="preserve">
          <source>Handling forms is a complex business. Consider Django&amp;rsquo;s admin, where numerous items of data of several different types may need to be prepared for display in a form, rendered as HTML, edited using a convenient interface, returned to the server, validated and cleaned up, and then saved or passed on for further processing.</source>
          <target state="translated">양식 처리는 복잡한 사업입니다. Django의 관리자를 고려하십시오. 여러 가지 유형의 여러 데이터 항목을 양식으로 표시하고 HTML로 렌더링하고 편리한 인터페이스를 사용하여 편집하고 서버로 반환하고 유효성 검사 및 정리 한 다음 저장하거나 전달해야 할 수도 있습니다 추가 처리를 위해.</target>
        </trans-unit>
        <trans-unit id="3556e4954f0ecaba30959568393e81f7c9148616" translate="yes" xml:space="preserve">
          <source>Handling forms with class-based views</source>
          <target state="translated">클래스 기반보기로 양식 처리</target>
        </trans-unit>
        <trans-unit id="c1c6055ec082f25b7c66ca247f1cdb50238e6a11" translate="yes" xml:space="preserve">
          <source>Handling object permissions</source>
          <target state="translated">객체 권한 처리</target>
        </trans-unit>
        <trans-unit id="5ecb35af693985a1c2688a53f9e642c39666465a" translate="yes" xml:space="preserve">
          <source>Handling uploaded files with a model</source>
          <target state="translated">모델로 업로드 된 파일 처리</target>
        </trans-unit>
        <trans-unit id="a5f397bd570e7e5ed6bb33e21e7f0f7f5a71a354" translate="yes" xml:space="preserve">
          <source>Has four optional arguments for validation:</source>
          <target state="translated">Has four optional arguments for validation:</target>
        </trans-unit>
        <trans-unit id="997e11fdb14bb8cc6b524263af1ed4c4a87a9091" translate="yes" xml:space="preserve">
          <source>Has one optional argument:</source>
          <target state="translated">하나의 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="90377fb788aaf30a9be110475bdb9a11af154e2e" translate="yes" xml:space="preserve">
          <source>Has three optional arguments &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;, and &lt;code&gt;empty_value&lt;/code&gt; which work just as they do for &lt;a href=&quot;#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Has three optional arguments &lt;code&gt;max_length&lt;/code&gt; , &lt;code&gt;min_length&lt;/code&gt; , and &lt;code&gt;empty_value&lt;/code&gt; which work just as they do for &lt;a href=&quot;#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3459f341331aa6f9d40b4d60725d7b3624f0c602" translate="yes" xml:space="preserve">
          <source>Has three optional arguments for validation:</source>
          <target state="translated">유효성 검사를위한 세 가지 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e020aad4feb9970fc6c0f84fb8135cbe7c10dc0" translate="yes" xml:space="preserve">
          <source>Has two &lt;strong&gt;required&lt;/strong&gt; arguments:</source>
          <target state="translated">두 가지 &lt;strong&gt;필수&lt;/strong&gt; 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="484c6880d03286f63a0d66e2e46613865e425dee" translate="yes" xml:space="preserve">
          <source>Has two optional arguments for validation, &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;allow_empty_file&lt;/code&gt;. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty.</source>
          <target state="translated">유효성 검사를위한 &lt;code&gt;max_length&lt;/code&gt; 및 &lt;code&gt;allow_empty_file&lt;/code&gt; 의 두 가지 선택적 인수가 있습니다. 제공된 경우 파일 이름이 지정된 길이 이하인지 확인하고 파일 내용이 비어 있어도 유효성 검사에 성공합니다.</target>
        </trans-unit>
        <trans-unit id="469a8ef52e3ab3e9a6514812244c507d7ec05ea2" translate="yes" xml:space="preserve">
          <source>Has two optional arguments for validation, &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;min_length&lt;/code&gt;. If provided, these arguments ensure that the string is at most or at least the given length.</source>
          <target state="translated">유효성 검사를위한 &lt;code&gt;max_length&lt;/code&gt; 및 &lt;code&gt;min_length&lt;/code&gt; 의 두 가지 선택적 인수가 있습니다. 제공되는 경우 이러한 인수는 문자열이 주어진 길이 이상인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="264a3599b3ad29f1d297113f7cd4afaced3b7737" translate="yes" xml:space="preserve">
          <source>Has two optional arguments:</source>
          <target state="translated">두 가지 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b41e2d6f603d2a71571bd9d692b4f8d60a8366a0" translate="yes" xml:space="preserve">
          <source>Hash indexes have been available in PostgreSQL for a long time, but they suffer from a number of data integrity issues in older versions.</source>
          <target state="translated">해시 인덱스는 PostgreSQL에서 오랫동안 사용할 수 있었지만 이전 버전에서는 많은 데이터 무결성 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="91890d73e80c785369a7ea02ab0ddba7e19304b9" translate="yes" xml:space="preserve">
          <source>Having problems? Try &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/admin/&quot;&gt;FAQ: The admin&lt;/a&gt;.</source>
          <target state="translated">문제가 있습니까? &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/admin/&quot;&gt;FAQ를&lt;/a&gt; 보십시오 : 관리자 .</target>
        </trans-unit>
        <trans-unit id="9720e639d765b87766827fab98468369b0574f5a" translate="yes" xml:space="preserve">
          <source>Having problems? Try &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/admin/&quot;&gt;FAQ: The admin&lt;/a&gt;.</source>
          <target state="translated">Having problems? Try &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/admin/&quot;&gt;FAQ: The admin&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="45a4bc095d0bc733108374317fb5064e125a7b9b" translate="yes" xml:space="preserve">
          <source>Having trouble? We&amp;rsquo;d like to help!</source>
          <target state="translated">문제가있다? 도와 드리겠습니다!</target>
        </trans-unit>
        <trans-unit id="51420c171b426fb3ca4149bcb1b000b6403b074b" translate="yes" xml:space="preserve">
          <source>Headers passed as &lt;code&gt;extra&lt;/code&gt; keyword arguments should not have the &lt;code&gt;HTTP_&lt;/code&gt; prefix required by the synchronous client (see &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;). For example, here is how to set an HTTP &lt;code&gt;Accept&lt;/code&gt; header:</source>
          <target state="translated">Headers passed as &lt;code&gt;extra&lt;/code&gt; keyword arguments should not have the &lt;code&gt;HTTP_&lt;/code&gt; prefix required by the synchronous client (see &lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;Client.get()&lt;/code&gt; &lt;/a&gt;). For example, here is how to set an HTTP &lt;code&gt;Accept&lt;/code&gt; header:</target>
        </trans-unit>
        <trans-unit id="144948321283311d1f121d6131d01f3e1df2bbe3" translate="yes" xml:space="preserve">
          <source>Height and width of the widget map (default is 400x600).</source>
          <target state="translated">위젯 맵의 높이와 너비 (기본값은 400x600)</target>
        </trans-unit>
        <trans-unit id="8a44990599fcb9b9ef1bde7d5b2e841ad8fe50c8" translate="yes" xml:space="preserve">
          <source>Height of the image in pixels.</source>
          <target state="translated">이미지의 높이 (픽셀)입니다.</target>
        </trans-unit>
        <trans-unit id="b87edbcbb5930772761d79031cd848eb2d7af371" translate="yes" xml:space="preserve">
          <source>Height of the map, in pixels. Defaults to 400.</source>
          <target state="translated">지도의 높이 (픽셀)입니다. 기본값은 400입니다.</target>
        </trans-unit>
        <trans-unit id="3ee07283650a0cb4b44aa4947760d241c8e6f3cc" translate="yes" xml:space="preserve">
          <source>Helper function to return a URL pattern for serving files in debug mode:</source>
          <target state="translated">디버그 모드에서 파일을 제공하기위한 URL 패턴을 리턴하는 헬퍼 함수 :</target>
        </trans-unit>
        <trans-unit id="934835a36e88b263f02948e4dbd8c5dd04401bc0" translate="yes" xml:space="preserve">
          <source>Helper functions</source>
          <target state="translated">도우미 기능</target>
        </trans-unit>
        <trans-unit id="e7e0ee4596bdf912596870e61bb537af15f86d4b" translate="yes" xml:space="preserve">
          <source>Here are a couple of example settings:</source>
          <target state="translated">다음은 몇 가지 예제 설정입니다.</target>
        </trans-unit>
        <trans-unit id="af2aab3ca1b544361f8802696567f67d6d16451c" translate="yes" xml:space="preserve">
          <source>Here are a few examples of downstream caches:</source>
          <target state="translated">다운 스트림 캐시의 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d6aaec63498fe45f8cd3ab0e87af9c76badc8226" translate="yes" xml:space="preserve">
          <source>Here are some common problems that you may encounter during initialization:</source>
          <target state="translated">초기화 중에 발생할 수있는 몇 가지 일반적인 문제는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f64ce4c75eb407df6aa68084739c0f1f18021f47" translate="yes" xml:space="preserve">
          <source>Here are some examples of other actions that will result in the entire queryset being evaluated and therefore populate the cache:</source>
          <target state="translated">다음은 전체 쿼리 세트가 평가되어 캐시를 채우는 다른 작업의 예입니다.</target>
        </trans-unit>
        <trans-unit id="491ee7352f4f9f29ec839a5598c81d428a1ed6b8" translate="yes" xml:space="preserve">
          <source>Here are some hints about the ordering of various Django middleware classes:</source>
          <target state="translated">다음은 다양한 Django 미들웨어 클래스 순서에 대한 힌트입니다.</target>
        </trans-unit>
        <trans-unit id="ba2e175dd531846eba4a04e3c9181479ab418b86" translate="yes" xml:space="preserve">
          <source>Here are some other terms that will help us to handle a common language:</source>
          <target state="translated">다음은 공통 언어를 처리하는 데 도움이되는 다른 용어입니다.</target>
        </trans-unit>
        <trans-unit id="279b401428b4665e30ae96bd57aa0062346328af" translate="yes" xml:space="preserve">
          <source>Here are some things to consider to help make your upgrade process as smooth as possible.</source>
          <target state="translated">업그레이드 프로세스를 최대한 원활하게 진행할 수 있도록 고려해야 할 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3082dc8a1f8a09d52854dc7df60d7f8d0596f804" translate="yes" xml:space="preserve">
          <source>Here are some tips for working with inheritance:</source>
          <target state="translated">상속 작업을위한 몇 가지 팁은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2e5c296dccce718bbac6d5246520ffb4ddd0e8b" translate="yes" xml:space="preserve">
          <source>Here are some useful attributes of &lt;code&gt;UploadedFile&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;UploadedFile&lt;/code&gt; 의 유용한 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="1121c2c786c30e498bed91da9475a4eb43a435a7" translate="yes" xml:space="preserve">
          <source>Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking beyond an &lt;code&gt;admin&lt;/code&gt; flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the user creation forms. This example illustrates how most of the components work together, but is not intended to be copied directly into projects for production use.</source>
          <target state="translated">다음은 관리자 호환 사용자 정의 사용자 앱의 예입니다. 이 사용자 모델은 이메일 주소를 사용자 이름으로 사용하며 필요한 생년월일이 있습니다. 사용자 계정 의 &lt;code&gt;admin&lt;/code&gt; 플래그 외에는 권한 검사를 제공하지 않습니다 . 이 모델은 사용자 작성 양식을 제외하고 모든 내장 인증 양식 및보기와 호환됩니다. 이 예는 대부분의 구성 요소가 함께 작동하는 방법을 보여 주지만 프로덕션 용도로 프로젝트에 직접 복사되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="faaf1f6ee70707befd7a6e1a47bdca0f7676f029" translate="yes" xml:space="preserve">
          <source>Here is an example of how to create a geometry object (assuming the &lt;code&gt;Zipcode&lt;/code&gt; model):</source>
          <target state="translated">다음은 지오메트리 객체를 생성하는 방법의 예입니다 ( &lt;code&gt;Zipcode&lt;/code&gt; 모델을 가정 ).</target>
        </trans-unit>
        <trans-unit id="680da33b32f3a235dc2ff1bf6ad9bc64c3b92144" translate="yes" xml:space="preserve">
          <source>Here is an example of how to create a raster object from a raster file &lt;code&gt;volcano.tif&lt;/code&gt; (assuming the &lt;code&gt;Elevation&lt;/code&gt; model):</source>
          <target state="translated">다음은 &lt;code&gt;volcano.tif&lt;/code&gt; 래스터 파일에서 래스터 객체를 만드는 방법의 예입니다 ( &lt;code&gt;Elevation&lt;/code&gt; 모델을 가정 ).</target>
        </trans-unit>
        <trans-unit id="271c67b646ba7ecbbb35f338144e45dcbe4ea62a" translate="yes" xml:space="preserve">
          <source>Here is an example of its usage:</source>
          <target state="translated">사용법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3f850bd99c6b6acb8b69bd061bcf9ba1698401b7" translate="yes" xml:space="preserve">
          <source>Here is an example of the difference between the three:</source>
          <target state="translated">다음은 세 가지 차이점의 예입니다.</target>
        </trans-unit>
        <trans-unit id="45863e4b7b474b663617efdf3777d740bb33a54d" translate="yes" xml:space="preserve">
          <source>Here is an example showing how you might go about implementing a form that works for AJAX requests as well as &amp;lsquo;normal&amp;rsquo; form POSTs:</source>
          <target state="translated">다음은 '일반'양식 POST뿐만 아니라 AJAX 요청에 적합한 양식을 구현하는 방법을 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="a86ee081359fd84dc5091ed8b284f2f2bc6150f3" translate="yes" xml:space="preserve">
          <source>Here is an example showing how you might go about implementing a form that works with an API-based workflow as well as &amp;lsquo;normal&amp;rsquo; form POSTs:</source>
          <target state="translated">Here is an example showing how you might go about implementing a form that works with an API-based workflow as well as &amp;lsquo;normal&amp;rsquo; form POSTs:</target>
        </trans-unit>
        <trans-unit id="67c3eea2bb5e1e5cc88e879e133f03209c76575f" translate="yes" xml:space="preserve">
          <source>Here is an example which subclasses from &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt;, which is a subclass of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; that runs each test inside a transaction to provide isolation:</source>
          <target state="translated">다음은 &lt;a href=&quot;tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 서브 클래스로 트랜잭션 내에서 각 테스트를 실행하여 격리를 제공 하는 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="be68f2f69f34764a921ed1578865dea88e621f01" translate="yes" xml:space="preserve">
          <source>Here the relation pattern is comprised of at least one of the nine relation strings: &lt;code&gt;TOUCH&lt;/code&gt;, &lt;code&gt;OVERLAPBDYDISJOINT&lt;/code&gt;, &lt;code&gt;OVERLAPBDYINTERSECT&lt;/code&gt;, &lt;code&gt;EQUAL&lt;/code&gt;, &lt;code&gt;INSIDE&lt;/code&gt;, &lt;code&gt;COVEREDBY&lt;/code&gt;, &lt;code&gt;CONTAINS&lt;/code&gt;, &lt;code&gt;COVERS&lt;/code&gt;, &lt;code&gt;ON&lt;/code&gt;, and &lt;code&gt;ANYINTERACT&lt;/code&gt;. Multiple strings may be combined with the logical Boolean operator OR, for example, &lt;code&gt;'inside+touch'&lt;/code&gt;. &lt;a href=&quot;#fnsdorelate&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; The relation strings are case-insensitive.</source>
          <target state="translated">다음은 관계의 패턴은 적어도 아홉 개 관계 문자열 중 하나로 구성되는 &lt;code&gt;TOUCH&lt;/code&gt; , &lt;code&gt;OVERLAPBDYDISJOINT&lt;/code&gt; , &lt;code&gt;OVERLAPBDYINTERSECT&lt;/code&gt; , &lt;code&gt;EQUAL&lt;/code&gt; , &lt;code&gt;INSIDE&lt;/code&gt; , &lt;code&gt;COVEREDBY&lt;/code&gt; , &lt;code&gt;CONTAINS&lt;/code&gt; , &lt;code&gt;COVERS&lt;/code&gt; , &lt;code&gt;ON&lt;/code&gt; 및 &lt;code&gt;ANYINTERACT&lt;/code&gt; . 여러 문자열을 논리 부울 연산자 OR (예 : &lt;code&gt;'inside+touch'&lt;/code&gt; ) 과 결합 할 수 있습니다 . &lt;a href=&quot;#fnsdorelate&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; 관계 문자열은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc9581120f126cad803e3aef1f13e74d034abada" translate="yes" xml:space="preserve">
          <source>Here we have created a &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; subclass with a method that creates a &lt;code&gt;Question&lt;/code&gt; instance with a &lt;code&gt;pub_date&lt;/code&gt; in the future. We then check the output of &lt;code&gt;was_published_recently()&lt;/code&gt; - which &lt;em&gt;ought&lt;/em&gt; to be False.</source>
          <target state="translated">여기서는 미래에 &lt;code&gt;pub_date&lt;/code&gt; 로 &lt;code&gt;Question&lt;/code&gt; 인스턴스 를 만드는 메소드를 사용 하여 &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스를 작성했습니다 . 우리는 다음의 출력을 확인 &lt;code&gt;was_published_recently()&lt;/code&gt; - 어떤이 &lt;em&gt;한다고&lt;/em&gt; 거짓으로.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f4789b90295bd5341c33ecad3b51a92734a1532" translate="yes" xml:space="preserve">
          <source>Here you&amp;rsquo;ll find short answers to &amp;ldquo;How do I&amp;hellip;.?&amp;rdquo; types of questions. These how-to guides don&amp;rsquo;t cover topics in depth &amp;ndash; you&amp;rsquo;ll find that material in the &lt;a href=&quot;../topics/index&quot;&gt;Using Django&lt;/a&gt; and the &lt;a href=&quot;../ref/index&quot;&gt;API Reference&lt;/a&gt;. However, these guides will help you quickly accomplish common tasks.</source>
          <target state="translated">여기에&amp;ldquo;어떻게&amp;hellip;.?&amp;rdquo;에 대한 간단한 답변이 있습니다. 질문 유형. 이 사용법 안내서는 주제에 대해 자세히 다루지 않습니다. &lt;a href=&quot;../topics/index&quot;&gt;Using Django&lt;/a&gt; 및 &lt;a href=&quot;../ref/index&quot;&gt;API Reference&lt;/a&gt; 에서 해당 자료를 찾을 수 있습니다. 그러나이 안내서는 일반적인 작업을 빠르게 수행하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="57abf4f6b26bfe37ae2b52796838f9dad7f76581" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a &amp;ldquo;Hello World&amp;rdquo; example:</source>
          <target state="translated">다음은 &quot;Hello World&quot;예입니다.</target>
        </trans-unit>
        <trans-unit id="6af217d2ecf2c889005dc55adc483fc40bea37cf" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a basic example of a validator, with one optional setting:</source>
          <target state="translated">다음은 하나의 선택적 설정이있는 유효성 검사기의 기본 예입니다.</target>
        </trans-unit>
        <trans-unit id="a7f2fb4ff05edbaaffa6c5b64c495c91809c5df5" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a common way you might handle an uploaded file:</source>
          <target state="translated">업로드 된 파일을 처리 할 수있는 일반적인 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6089abc2bdc4617ff68adaabb9f38bec622baa70" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a corrected rewrite:</source>
          <target state="translated">수정 된 재 작성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9a31abed80562773eced4639f5fa9797392c6b50" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example &lt;code&gt;Form&lt;/code&gt; that implements &lt;code&gt;help_text&lt;/code&gt; for two of its fields. We&amp;rsquo;ve specified &lt;code&gt;auto_id=False&lt;/code&gt; to simplify the output:</source>
          <target state="translated">다음 은 두 필드에 대해 &lt;code&gt;help_text&lt;/code&gt; 를 구현 하는 전체 예제 &lt;code&gt;Form&lt;/code&gt; 입니다 . 출력을 단순화하기 위해 &lt;code&gt;auto_id=False&lt;/code&gt; 를 지정 했습니다 .</target>
        </trans-unit>
        <trans-unit id="7f272870b019ad9bddc4996166ecbc9a519ba9f2" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example &lt;code&gt;Form&lt;/code&gt; that implements &lt;code&gt;label&lt;/code&gt; for two of its fields. We&amp;rsquo;ve specified &lt;code&gt;auto_id=False&lt;/code&gt; to simplify the output:</source>
          <target state="translated">다음 은 두 필드에 대한 &lt;code&gt;label&lt;/code&gt; 을 구현 하는 전체 예제 &lt;code&gt;Form&lt;/code&gt; 입니다 . 출력을 단순화하기 위해 &lt;code&gt;auto_id=False&lt;/code&gt; 를 지정 했습니다 .</target>
        </trans-unit>
        <trans-unit id="f50392c6b32afa62059d8c67b2c6c9d277cae558" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example model:</source>
          <target state="translated">전체 예제 모델은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="781008e5531c092c2f7f0d7b934ff37d338b4e30" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example:</source>
          <target state="translated">전체 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="06006db081b927a18b6c979513a3d400cf03b050" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a list of all possible &lt;code&gt;Media&lt;/code&gt; options. There are no required options.</source>
          <target state="translated">다음은 가능한 모든 &lt;code&gt;Media&lt;/code&gt; 옵션 목록입니다 . 필요한 옵션이 없습니다.</target>
        </trans-unit>
        <trans-unit id="1ca8264392471fa610baec4797392c75fff75e91" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a list of settings available in Django core and their default values. Settings provided by contrib apps are listed below, followed by a topical index of the core settings. For introductory material, see the &lt;a href=&quot;../topics/settings&quot;&gt;settings topic guide&lt;/a&gt;.</source>
          <target state="translated">Django core에서 사용 가능한 설정 목록과 기본값은 다음과 같습니다. contrib 앱에서 제공 한 설정은 다음과 같으며 핵심 설정의 주제별 색인이 이어집니다. 소개 자료는 &lt;a href=&quot;../topics/settings&quot;&gt;설정 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="86a3a0b1484511f938867feb013e0f2d51c5df2e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a more complete example of checking permissions in a template:</source>
          <target state="translated">템플릿에서 권한을 확인하는보다 완전한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2c698643dc874b748f012ddb3ea0313bfbfd2803" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample &lt;code&gt;flatpages/default.html&lt;/code&gt; template:</source>
          <target state="translated">다음은 샘플 &lt;code&gt;flatpages/default.html&lt;/code&gt; 템플릿입니다.</target>
        </trans-unit>
        <trans-unit id="ab1a707518b8dd479d3d6838c5928f7148dd6367" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample &lt;code&gt;registration/login.html&lt;/code&gt; template you can use as a starting point. It assumes you have a &lt;code&gt;base.html&lt;/code&gt; template that defines a &lt;code&gt;content&lt;/code&gt; block:</source>
          <target state="translated">다음 은 시작점으로 사용할 수 있는 샘플 &lt;code&gt;registration/login.html&lt;/code&gt; 템플릿입니다. &lt;code&gt;content&lt;/code&gt; 블록 을 정의하는 &lt;code&gt;base.html&lt;/code&gt; 템플릿 이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="0ae30bf679595ef7533cdd63b407f83f5f8f674a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample URLconf:</source>
          <target state="translated">다음은 샘플 URLconf입니다.</target>
        </trans-unit>
        <trans-unit id="fa6ae3e7aabdf62e419781fb8ac91fef7e4efcbc" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample configuration which uses a MySQL option file:</source>
          <target state="translated">다음은 MySQL 옵션 파일을 사용하는 샘플 구성입니다.</target>
        </trans-unit>
        <trans-unit id="1cb8cc1f47e98bd6b8bca615e0c892d2101a324e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample migration:</source>
          <target state="translated">샘플 마이그레이션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ae6541653add727b9d1b714886c5cb294eb66157" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample settings file:</source>
          <target state="translated">샘플 설정 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0a35ae241d211aecdcc854051ae6190c4718464a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a setup that tells the Django template engine to load templates from the &lt;code&gt;templates&lt;/code&gt; subdirectory inside each installed application:</source>
          <target state="translated">다음은 장고 템플릿 엔진에 설치된 각 응용 프로그램 의 &lt;code&gt;templates&lt;/code&gt; 하위 디렉토리 에서 템플릿을로드하도록 설정하는 설정입니다 .</target>
        </trans-unit>
        <trans-unit id="ef7c5cda6c9f776cf07508872a931615e59130bb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a typical usage example:</source>
          <target state="translated">일반적인 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1427d30cb4b280307f9c35fdcbbec639fc3c1999" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a view that returns the current date and time, as an HTML document:</source>
          <target state="translated">다음은 현재 날짜와 시간을 HTML 문서로 반환하는 뷰입니다.</target>
        </trans-unit>
        <trans-unit id="d3e2bddf8c963051b7303f539a2fd185abce31a7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example &lt;code&gt;babel.cfg&lt;/code&gt; configuration file:</source>
          <target state="translated">다음은 &lt;code&gt;babel.cfg&lt;/code&gt; 구성 파일 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="8aebe75987c46c90f1d219df0277567b236e3afb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example backend that authenticates against a username and password variable defined in your &lt;code&gt;settings.py&lt;/code&gt; file and creates a Django &lt;code&gt;User&lt;/code&gt; object the first time a user authenticates:</source>
          <target state="translated">다음은 &lt;code&gt;settings.py&lt;/code&gt; 파일에 정의 된 username 및 password 변수에 대해 인증하고 사용자 가 처음 인증 할 때 Django &lt;code&gt;User&lt;/code&gt; 객체를 생성 하는 예제 백엔드입니다 .</target>
        </trans-unit>
        <trans-unit id="cff630704065ec7b5de978b86e7c6b74b5e56dc7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example command to start a uWSGI server:</source>
          <target state="translated">다음은 uWSGI 서버를 시작하는 명령 예입니다.</target>
        </trans-unit>
        <trans-unit id="102ce3104838011837efe205bdd80f68de4dae95" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example configuration for a &lt;code&gt;pylibmc&lt;/code&gt; based backend that enables the binary protocol, SASL authentication, and the &lt;code&gt;ketama&lt;/code&gt; behavior mode:</source>
          <target state="translated">이진 프로토콜, SASL 인증 및 &lt;code&gt;ketama&lt;/code&gt; 동작 모드 를 활성화 하는 &lt;code&gt;pylibmc&lt;/code&gt; 기반 백엔드의 구성 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1b421c4f95aa496406a2e84c2f627a954ab2836f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example configuration for a &lt;code&gt;python-memcached&lt;/code&gt; based backend with an object size limit of 2MB:</source>
          <target state="translated">다음 은 객체 크기 제한이 2MB 인 &lt;code&gt;python-memcached&lt;/code&gt; 기반 백엔드의 구성 예 입니다.</target>
        </trans-unit>
        <trans-unit id="3a2a1317feb0953774732005f170e31c4c8a4bc7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example filter definition:</source>
          <target state="translated">필터 정의의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="80f83222987a04b9ecf23f2ea890140f555d567d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; using &lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt;&lt;code&gt;GenericSitemap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt; &lt;code&gt;GenericSitemap&lt;/code&gt; 을&lt;/a&gt; 사용 하는 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="ae6ef8ee4290c13f117dcdc7e703f627625867c0" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a URLconf using &lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt;&lt;code&gt;FlatPageSitemap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">여기에 사용 URLconf의 예 &lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt; &lt;code&gt;FlatPageSitemap&lt;/code&gt; 는&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3845b1b6e90ab1ee471ab4f454dadade8a8b37f6" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a non-atomic data migration that updates a large table in smaller batches:</source>
          <target state="translated">다음은 작은 테이블 단위로 큰 테이블을 업데이트하는 비 원자 데이터 마이그레이션의 예입니다.</target>
        </trans-unit>
        <trans-unit id="c1f9fb4911b88e50f96986953fce6ec7f1657b9d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of an async view:</source>
          <target state="translated">Here&amp;rsquo;s an example of an async view:</target>
        </trans-unit>
        <trans-unit id="2521f38c8dd57ccdb01aff93ad8b20bb89778958" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how to create a middleware function that supports both:</source>
          <target state="translated">Here&amp;rsquo;s an example of how to create a middleware function that supports both:</target>
        </trans-unit>
        <trans-unit id="e800a41196ea2c952c6cc78bf4125ea18f3b697e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how you might use this in a template:</source>
          <target state="translated">템플릿에서 이것을 사용하는 방법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6e261dac3e73be10b1f310f633c7e43bef1f8cbe" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of the search algorithm. For this example the &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting is:</source>
          <target state="translated">다음은 검색 알고리즘의 예입니다. 이 예에서 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d265334afc2a3a5deaa825a3e8d0c1dbc637509" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of what the form-handling view looks like:</source>
          <target state="translated">다음은 양식 처리보기의 예입니다.</target>
        </trans-unit>
        <trans-unit id="cab637454e1c6c1a9aee365744daf4493bf04463" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example test that examines &lt;code&gt;django.core.mail.outbox&lt;/code&gt; for length and contents:</source>
          <target state="translated">다음은 &lt;code&gt;django.core.mail.outbox&lt;/code&gt; 에서 길이와 내용 을 검사하는 테스트 예입니다 .</target>
        </trans-unit>
        <trans-unit id="aa48b04caa6f3240fde92f90c0ac9c55d609c649" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that disables Django&amp;rsquo;s logging configuration and then manually configures logging:</source>
          <target state="translated">Here&amp;rsquo;s an example that disables Django&amp;rsquo;s logging configuration and then manually configures logging:</target>
        </trans-unit>
        <trans-unit id="c77b97bfa6d759f92c704a63a66d8c15a6409803" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that stores the current timezone in the session. (It skips error handling entirely for the sake of simplicity.)</source>
          <target state="translated">다음은 현재 시간대를 세션에 저장하는 예입니다. (간단 성을 위해 오류 처리를 완전히 건너 뜁니다.)</target>
        </trans-unit>
        <trans-unit id="d8255f47bfef2f67ea1dd701782d89362832ca71" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example using &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; in a view function to paginate a queryset:</source>
          <target state="translated">다음 은 뷰 함수에서 &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;Paginator&lt;/code&gt; &lt;/a&gt; 를 사용하여 쿼리 세트 를 페이지 매김하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="864913de9e058af94181a7cf98e2330576120b66" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example view that takes a &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;from_email&lt;/code&gt; from the request&amp;rsquo;s POST data, sends that to &lt;a href=&quot;mailto:admin%40example.com&quot;&gt;admin@example.com&lt;/a&gt; and redirects to &amp;ldquo;/contact/thanks/&amp;rdquo; when it&amp;rsquo;s done:</source>
          <target state="translated">다음 은 요청의 POST 데이터에서 &lt;code&gt;subject&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; 및 &lt;code&gt;from_email&lt;/code&gt; 을 &lt;a href=&quot;mailto:admin%40example.com&quot;&gt;가져 와서 admin@example.com으로&lt;/a&gt; 전송하고 완료되면&amp;ldquo;/ contact / thanks /&amp;rdquo;로 리디렉션되는보기의 예입니다.</target>
        </trans-unit>
        <trans-unit id="34ffdaa4404e3fe833bd23cc3839e586225ae798" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example widget which subclasses &lt;a href=&quot;#django.forms.MultiWidget&quot;&gt;&lt;code&gt;MultiWidget&lt;/code&gt;&lt;/a&gt; to display a date with the day, month, and year in different select boxes. This widget is intended to be used with a &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; rather than a &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;, thus we have implemented &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;#django.forms.MultiWidget&quot;&gt; &lt;code&gt;MultiWidget&lt;/code&gt; &lt;/a&gt; 을 서브 클래 싱 하여 날짜, 월 및 연도가 포함 된 날짜를 다른 선택 상자에 표시하는 위젯 예 입니다. 이 위젯은 &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; 가&lt;/a&gt; 아닌 &lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 와 함께 사용되도록 만들어 &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt; &lt;code&gt;value_from_datadict()&lt;/code&gt; &lt;/a&gt; 구현했습니다 .</target>
        </trans-unit>
        <trans-unit id="bac37e9710dc9d2c74d9c1ed00e5b17d08cd6fb3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example with a test database configuration:</source>
          <target state="translated">테스트 데이터베이스 구성의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c288c1a6f737cba4e4dfe94d9e407d5ce00f2fe3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example with the &lt;code&gt;Count&lt;/code&gt; aggregate:</source>
          <target state="translated">&lt;code&gt;Count&lt;/code&gt; 집계 의 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="992e957c839d3d8d2abc225d337198ce96cd7ccb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example, which generates the same CSV file as above:</source>
          <target state="translated">위와 동일한 CSV 파일을 생성하는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc4ac14d2e7d339c7464837b69d59c85f014a9b2" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s another example with the &lt;code&gt;Avg&lt;/code&gt; aggregate:</source>
          <target state="translated">다음은 &lt;code&gt;Avg&lt;/code&gt; 집계 의 또 다른 예입니다 .</target>
        </trans-unit>
        <trans-unit id="5621dab2b1d22484b8fe971ff0acb8dea33dd71f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s example HTML template code:</source>
          <target state="translated">HTML 템플릿 코드의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9f9ad4a804c6ae4e272e944aaeea2d0deed1f424" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how Django handles custom managers and &lt;a href=&quot;models#model-inheritance&quot;&gt;model inheritance&lt;/a&gt;:</source>
          <target state="translated">Django가 커스텀 매니저와 &lt;a href=&quot;models#model-inheritance&quot;&gt;모델 상속을&lt;/a&gt; 처리하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="982d8786f08335dca1f604bcf8f2fbe3797a6051" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how Django uses the sites framework:</source>
          <target state="translated">Django가 사이트 프레임 워크를 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1aad681f3092909b52d4dd368c95d8a6868db25b" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how a simplified &lt;code&gt;{% comment %}&lt;/code&gt; tag might be implemented:</source>
          <target state="translated">단순화 된 &lt;code&gt;{% comment %}&lt;/code&gt; 태그를 구현 하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="d91d9e4962a8b0536d1b0745beac3f3e808bc67a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how the form data could be processed in the view that handles this form:</source>
          <target state="translated">이 양식을 처리하는보기에서 양식 데이터를 처리하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0e26c415b5e7fc6d2eaf6e0f623530bfce47a883" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to create a raster and return it as a file in an &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">래스터를 만들어 &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 에서 파일로 반환하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="af034e2b096c2303b99e1d44bd431bd0330becae" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to implement a custom template backend in order to use another template system. A template backend is a class that inherits &lt;code&gt;django.template.backends.base.BaseEngine&lt;/code&gt;. It must implement &lt;code&gt;get_template()&lt;/code&gt; and optionally &lt;code&gt;from_string()&lt;/code&gt;. Here&amp;rsquo;s an example for a fictional &lt;code&gt;foobar&lt;/code&gt; template library:</source>
          <target state="translated">다른 템플릿 시스템을 사용하기 위해 사용자 정의 템플릿 백엔드를 구현하는 방법은 다음과 같습니다. 템플릿 백엔드는 &lt;code&gt;django.template.backends.base.BaseEngine&lt;/code&gt; 을 상속하는 클래스입니다 . &lt;code&gt;get_template()&lt;/code&gt; 및 선택적으로 &lt;code&gt;from_string()&lt;/code&gt; 구현해야합니다 . 가상의 &lt;code&gt;foobar&lt;/code&gt; 템플릿 라이브러리 의 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8d36be0384837a6370f1ba02759b5af0d0f2c187" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to migrate a project that was started before Django supported time zones.</source>
          <target state="translated">Django가 표준 시간대를 지원하기 전에 시작된 프로젝트를 마이그레이션하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="66ec10b2a136d2c823468ba95c64eaaab44cdd82" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how you connect with the decorator:</source>
          <target state="translated">데코레이터와 연결하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="327bfd0c7d625202f1966273d60d8493e343ab93" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how you&amp;rsquo;d use this new version of the tag:</source>
          <target state="translated">이 새 버전의 태그를 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1a2bfaf566979ed7aedf0f669c54fbc0f46145bf" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s some examples of some of the general-purpose aggregation functions:</source>
          <target state="translated">다음은 일부 범용 집계 함수의 예입니다.</target>
        </trans-unit>
        <trans-unit id="da0a2fbae58195202e76fcd70bf31b97096b8406" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s specifically what will happen:</source>
          <target state="translated">구체적으로 다음과 같은 일이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="90cc1fba379d3079d864b75ec9a282dc9dd9df53" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the algorithm Django uses in compiling settings:</source>
          <target state="translated">Django가 컴파일 설정에서 사용하는 알고리즘은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4f6925d2fd7c87eb1fdea33977d87762ce059a90" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the code for these beat-specific feeds:</source>
          <target state="translated">이 비트 별 피드에 대한 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fee44b1e3d0f774cdd2a8c542296b97438ffc668" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the example URLconf from earlier, rewritten using regular expressions:</source>
          <target state="translated">다음은 정규 표현식을 사용하여 다시 작성된 이전 URLconf의 예입니다.</target>
        </trans-unit>
        <trans-unit id="e4c0b7baa1526900d2e4f4456095dc0e9ce72d6a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the formal declaration of a &lt;code&gt;QuerySet&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;QuerySet&lt;/code&gt; 의 공식 선언입니다 .</target>
        </trans-unit>
        <trans-unit id="1165f9724f1430ed525846674f31020cff0308a8" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the output of &lt;code&gt;{{ form.as_p }}&lt;/code&gt; for our &lt;code&gt;ContactForm&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;ContactForm&lt;/code&gt; 인스턴스에 대한 &lt;code&gt;{{ form.as_p }}&lt;/code&gt; 의 출력 결과는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="29c90eaa3b7ceff1a2a2ba24fcb3bda64c8c52b3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the same thing, with &lt;code&gt;my_view&lt;/code&gt; wrapped in &lt;code&gt;cache_page&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;my_view&lt;/code&gt; 가 &lt;code&gt;cache_page&lt;/code&gt; 에 싸여 있는 것과 같은 것입니다 .</target>
        </trans-unit>
        <trans-unit id="abcc0e54e5809432215e2f0949566ceb948498ed" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what &lt;code&gt;LoginView&lt;/code&gt; does:</source>
          <target state="translated">&lt;code&gt;LoginView&lt;/code&gt; 의 기능 은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7283b0cf7a571c7215c8f2bb4d8140cd4ffd2ed4" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what a URLconf might look like for the &lt;code&gt;Reporter&lt;/code&gt;/&lt;code&gt;Article&lt;/code&gt; example above:</source>
          <target state="translated">위 의 &lt;code&gt;Reporter&lt;/code&gt; / &lt;code&gt;Article&lt;/code&gt; 예제 에서 URLconf는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="bb1565e42c236a7f2831e8cfa57af03ea646f01a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what each of the built-in processors does:</source>
          <target state="translated">각 내장 프로세서의 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d5f00c1bab080be00911ca379dda11db29ab82a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what it looks like at this point:</source>
          <target state="translated">이 시점의 모습은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2b749a2a594c50741b94f0db598a875d6be8a1e8" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what the &amp;ldquo;base.html&amp;rdquo; template, including the use of &lt;a href=&quot;../howto/static-files/index&quot;&gt;static files&lt;/a&gt;, might look like:</source>
          <target state="translated">&lt;a href=&quot;../howto/static-files/index&quot;&gt;정적 파일&lt;/a&gt; 사용을 포함한&amp;ldquo;base.html&amp;rdquo;템플릿 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c16d5101a0891c5cbab072e90a5af67e887f73ba" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what the relevant URLconf lines would look like for the example above:</source>
          <target state="translated">위의 예에서 관련 URLconf 행은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1539f3d44308e23c6984798d63f494196479b7da" translate="yes" xml:space="preserve">
          <source>Here, &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; transformed the three geometries from the shapefile in their original spatial reference system (WGS84) to the spatial reference system of the GeoDjango model (NAD83). If no spatial reference system is defined for the layer, use the &lt;code&gt;source_srs&lt;/code&gt; keyword with a &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object to specify one.</source>
          <target state="translated">여기에서 &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt; 은 원래 공간 참조 시스템 (WGS84)의 쉐이프 파일에서 GeoDjango 모델의 공간 참조 시스템 (NAD83)으로 세 가지 형상을 변환했습니다. 계층에 대해 공간 참조 시스템이 정의되어 있지 않은 경우 &lt;code&gt;source_srs&lt;/code&gt; 키워드를 &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 오브젝트 와 함께 사용하여 하나를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="3e093c29faaea57896f80485222e377673d07e69" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;default_manager&lt;/code&gt; is the default. The &lt;code&gt;objects&lt;/code&gt; manager is still available, since it&amp;rsquo;s inherited, but isn&amp;rsquo;t used as the default.</source>
          <target state="translated">여기서 &lt;code&gt;default_manager&lt;/code&gt; 가 기본값입니다. &lt;code&gt;objects&lt;/code&gt; 관리자는 상속,하지만 기본값으로 사용되지 않기 때문에, 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bec468010f20ce37ac755447a7cacf1a6965b612" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;friends()&lt;/code&gt; will be called twice. Since the instance &lt;code&gt;person&lt;/code&gt; in the view and the template are the same, decorating the &lt;code&gt;friends()&lt;/code&gt; method with &lt;code&gt;@cached_property&lt;/code&gt; can avoid that:</source>
          <target state="translated">여기서 &lt;code&gt;friends()&lt;/code&gt; 가 두 번 호출됩니다. 뷰 의 인스턴스 &lt;code&gt;person&lt;/code&gt; 과 템플릿이 동일하기 때문에 &lt;code&gt;friends()&lt;/code&gt; 메서드를 &lt;code&gt;@cached_property&lt;/code&gt; 로 장식하면 다음 을 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0e804ebd96c0af9eec8dbdab01a73bdcc48afa7" translate="yes" xml:space="preserve">
          <source>Here, each model is represented by a class that subclasses &lt;a href=&quot;../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;. Each model has a number of class variables, each of which represents a database field in the model.</source>
          <target state="translated">여기에서 각 모델은 &lt;a href=&quot;../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt; 서브 클래스 인 클래스로 표시됩니다 . 각 모델에는 여러 클래스 변수가 있으며 각 변수는 모델의 데이터베이스 필드를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4d45cf61a6b273da8aee30ada7de9c9f80157840" translate="yes" xml:space="preserve">
          <source>Here, there could potentially be multiple ordering data for each &lt;code&gt;Event&lt;/code&gt;; each &lt;code&gt;Event&lt;/code&gt; with multiple &lt;code&gt;children&lt;/code&gt; will be returned multiple times into the new &lt;code&gt;QuerySet&lt;/code&gt; that &lt;code&gt;order_by()&lt;/code&gt; creates. In other words, using &lt;code&gt;order_by()&lt;/code&gt; on the &lt;code&gt;QuerySet&lt;/code&gt; could return more items than you were working on to begin with - which is probably neither expected nor useful.</source>
          <target state="translated">여기에는 각 &lt;code&gt;Event&lt;/code&gt; 마다 여러 개의 주문 데이터가있을 수 있습니다 . &lt;code&gt;children&lt;/code&gt; 이 여러 개인 각 &lt;code&gt;Event&lt;/code&gt; 는 &lt;code&gt;order_by()&lt;/code&gt; 가 생성 한 새 &lt;code&gt;QuerySet&lt;/code&gt; 에 여러 번 반환됩니다 . 다시 말해, &lt;code&gt;QuerySet&lt;/code&gt; 에서 &lt;code&gt;order_by()&lt;/code&gt; 를 사용 하면 작업을 시작하는 것보다 많은 항목을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="437ecb11cc4454ac0c7bcfeb26ef7fc4a9a9ab04" translate="yes" xml:space="preserve">
          <source>Here, we have a URLconf with a single captured group:</source>
          <target state="translated">여기에 하나의 캡처 그룹이있는 URLconf가 있습니다.</target>
        </trans-unit>
        <trans-unit id="59650799f9105f6fd46738d8d71c0649251d8fa3" translate="yes" xml:space="preserve">
          <source>Here, we have pulled the value of &lt;code&gt;reporter.stories_filed&lt;/code&gt; from the database into memory and manipulated it using familiar Python operators, and then saved the object back to the database. But instead we could also have done:</source>
          <target state="translated">여기에서 &lt;code&gt;reporter.stories_filed&lt;/code&gt; 값을 데이터베이스에서 메모리로 가져 와서 친숙한 Python 연산자를 사용하여 조작 한 다음 개체를 데이터베이스에 다시 저장했습니다. 그러나 대신 우리는 또한 할 수있었습니다 :</target>
        </trans-unit>
        <trans-unit id="82c135d3966be0eb9476ca12305ddc85cdd98f0d" translate="yes" xml:space="preserve">
          <source>Here, with concurrent requests, multiple attempts to save a &lt;code&gt;Person&lt;/code&gt; with the same parameters may be made. To avoid this race condition, the above example can be rewritten using &lt;code&gt;get_or_create()&lt;/code&gt; like so:</source>
          <target state="translated">여기서 동시 요청으로 동일한 매개 변수 를 사용하여 &lt;code&gt;Person&lt;/code&gt; 을 저장하려는 여러 번의 시도 가 이루어질 수 있습니다. 이 경쟁 조건을 피하기 위해 &lt;code&gt;get_or_create()&lt;/code&gt; 사용하여 위 예제를 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e1c1bebb97b3fac0f84e08c91f2ac346f29f05c" translate="yes" xml:space="preserve">
          <source>Here, you retrieved a &lt;code&gt;QuerySet&lt;/code&gt; with only one model: the border of the United States (exactly what you would expect).</source>
          <target state="translated">여기서는 하나의 모델, 즉 미국의 경계 (정확하게 예상되는 것) 만 있는 &lt;code&gt;QuerySet&lt;/code&gt; 을 검색했습니다 .</target>
        </trans-unit>
        <trans-unit id="26d877995327d903f9c9c849285e27201361d8cd" translate="yes" xml:space="preserve">
          <source>Hierarchy of Django unit testing classes</source>
          <target state="translated">장고 단위 테스트 클래스의 계층</target>
        </trans-unit>
        <trans-unit id="2284d040f5091f510de37a154536196310f9c02d" translate="yes" xml:space="preserve">
          <source>Hint</source>
          <target state="translated">Hint</target>
        </trans-unit>
        <trans-unit id="eef8e89aeb708a408921fec1b9e87c4d04faaced" translate="yes" xml:space="preserve">
          <source>Hints</source>
          <target state="translated">Hints</target>
        </trans-unit>
        <trans-unit id="01d2f9ecc0290276e414180f8fb91eaf80ea98c6" translate="yes" xml:space="preserve">
          <source>Historical models</source>
          <target state="translated">역사적 모델</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="3668d9fae13111a1cdd1c411a004c1830fac5d25" translate="yes" xml:space="preserve">
          <source>History consistency</source>
          <target state="translated">역사 일관성</target>
        </trans-unit>
        <trans-unit id="2db3c5543ab9e474cea4204fa6f705e4a5357492" translate="yes" xml:space="preserve">
          <source>Hitting the database multiple times for different parts of a single &amp;lsquo;set&amp;rsquo; of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:</source>
          <target state="translated">단일 데이터 집합의 서로 다른 부분에 대해 데이터베이스를 여러 번 두드리면 모든 부분이 필요하며 일반적으로 하나의 쿼리에서 모두 검색하는 것보다 효율성이 떨어집니다. 이것은 루프에서 실행되는 쿼리가있어 하나만 필요할 때 많은 데이터베이스 쿼리를 수행 할 수있는 경우에 특히 중요합니다. 그래서:</target>
        </trans-unit>
        <trans-unit id="b24cd4dd561003744f6839bba6f0b01af01e9c66" translate="yes" xml:space="preserve">
          <source>Homebrew</source>
          <target state="translated">Homebrew</target>
        </trans-unit>
        <trans-unit id="3db3ff2b4f95ac9d06bb8a36b004442519e2377c" translate="yes" xml:space="preserve">
          <source>Hooking &lt;code&gt;AdminSite&lt;/code&gt; instances into your URLconf</source>
          <target state="translated">&lt;code&gt;AdminSite&lt;/code&gt; 인스턴스를 URLconf에 연결</target>
        </trans-unit>
        <trans-unit id="377b52a12a2942982a776073a4c6fef720ab9361" translate="yes" xml:space="preserve">
          <source>Hooking into the current site from views</source>
          <target state="translated">뷰에서 현재 사이트에 연결</target>
        </trans-unit>
        <trans-unit id="a035ae36c0c60bda73442b7d15b2e8cbdae93b94" translate="yes" xml:space="preserve">
          <source>Host header validation</source>
          <target state="translated">호스트 헤더 검증</target>
        </trans-unit>
        <trans-unit id="7f9ea4fcf4a81bbcd92432dccf078570d76b403b" translate="yes" xml:space="preserve">
          <source>Hour, 12-hour format without leading zeros.</source>
          <target state="translated">앞에 0이없는 12 시간 형식</target>
        </trans-unit>
        <trans-unit id="3691f2c8d14a93defea1b98c76da99f673f7cc0b" translate="yes" xml:space="preserve">
          <source>Hour, 12-hour format.</source>
          <target state="translated">12 시간 형식</target>
        </trans-unit>
        <trans-unit id="05050dcb2cc031117aeab33205f5f0ebb56643f4" translate="yes" xml:space="preserve">
          <source>Hour, 24-hour format without leading zeros.</source>
          <target state="translated">앞에 0이없는 24 시간 형식</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
