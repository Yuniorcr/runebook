<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="d9363c35de0c24ed2e535f99e48aad5e18fa6e74" translate="yes" xml:space="preserve">
          <source>If you want to restrict the search to a particular template engine, pass the engine&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;using&lt;/code&gt; argument.</source>
          <target state="translated">검색을 특정 템플리트 엔진으로 제한 하려면 &lt;code&gt;using&lt;/code&gt; 인수 에서 엔진의 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 을 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a073b38a0044d193c0986f27e9a3dc2f7954430" translate="yes" xml:space="preserve">
          <source>If you want to return a formset that doesn&amp;rsquo;t include &lt;em&gt;any&lt;/em&gt; pre-existing instances of the model, you can specify an empty QuerySet:</source>
          <target state="translated">당신이 포함되지 않은 해당 formset 반환 할 경우 &lt;em&gt;모든&lt;/em&gt; 모델의 기존 인스턴스를, 당신은 빈 검색어 세트를 지정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="453b29d39fc22b0b231d1dc0e97ae3ca82e29dc7" translate="yes" xml:space="preserve">
          <source>If you want to reverse all migrations applied for an app, use the name &lt;code&gt;zero&lt;/code&gt;:</source>
          <target state="translated">앱에 적용된 모든 마이그레이션을 되돌리려면 이름 &lt;code&gt;zero&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae90359159ce2a046afee5fe8740de7f9eb423ea" translate="yes" xml:space="preserve">
          <source>If you want to revert all migrations applied for an app, use the name &lt;code&gt;zero&lt;/code&gt;:</source>
          <target state="translated">앱에 적용된 모든 마이그레이션을 되돌리려면 이름 &lt;code&gt;zero&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="458328755ac20bf1935dfcb1e46e0973d7fa75b0" translate="yes" xml:space="preserve">
          <source>If you want to select a language within a template, you can use the &lt;code&gt;language&lt;/code&gt; template tag:</source>
          <target state="translated">템플릿 내에서 언어를 선택하려면 &lt;code&gt;language&lt;/code&gt; 템플릿 태그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea255638cee3103be21ce078c6c8eb0e0a82aafb" translate="yes" xml:space="preserve">
          <source>If you want to serve your project in a subdirectory (&lt;code&gt;https://example.com/mysite&lt;/code&gt; in this example), you can add &lt;code&gt;WSGIScriptAlias&lt;/code&gt; to the configuration above:</source>
          <target state="translated">서브 디렉토리 ( 이 예제에서는 &lt;code&gt;https://example.com/mysite&lt;/code&gt; ) 에서 프로젝트를 제공하려는 경우 , 위 구성 에 &lt;code&gt;WSGIScriptAlias&lt;/code&gt; 를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="470d59534ec7120ebb7f43a0559ad898e0a6a691" translate="yes" xml:space="preserve">
          <source>If you want to serve your static files from the same server that&amp;rsquo;s already serving your site, the process may look something like:</source>
          <target state="translated">이미 사이트를 제공하는 동일한 서버에서 정적 파일을 제공하려는 경우 프로세스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d1f072200b67438fce5826bd23e1652372b64f96" translate="yes" xml:space="preserve">
          <source>If you want to specify a field&amp;rsquo;s validators, you can do so by defining the field declaratively and setting its &lt;code&gt;validators&lt;/code&gt; parameter:</source>
          <target state="translated">필드의 유효성 검사기를 지정하려면 필드를 선언적으로 정의하고 해당 &lt;code&gt;validators&lt;/code&gt; 매개 변수를 설정하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="2045cb8a545994f5940fdb8bb609edfefe504ffd" translate="yes" xml:space="preserve">
          <source>If you want to submit a form or access a session cookie within a frame or iframe, you may need to modify the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;CSRF_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-SESSION_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="translated">프레임 또는 iframe 내에서 양식을 제출하거나 세션 쿠키에 액세스하려면 &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_SAMESITE&quot;&gt; &lt;code&gt;CSRF_COOKIE_SAMESITE&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;settings#std:setting-SESSION_COOKIE_SAMESITE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt; &lt;/a&gt; 설정 을 수정해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f156652923d4a2867402c1c5d313ea25450f71ae" translate="yes" xml:space="preserve">
          <source>If you want to upload multiple files using one form field, set the &lt;code&gt;multiple&lt;/code&gt; HTML attribute of field&amp;rsquo;s widget:</source>
          <target state="translated">하나의 양식 필드를 사용하여 여러 파일을 업로드하려면 필드 위젯 의 &lt;code&gt;multiple&lt;/code&gt; HTML 속성을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="45963581a6022c16346e1c2ec6732c8d86176fe6" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;a href=&quot;https://docs.python.org/3/library/pdb.html#module-pdb&quot;&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt; while debugging tests, you must disable parallel execution (&lt;code&gt;--parallel=1&lt;/code&gt;). You&amp;rsquo;ll see something like &lt;code&gt;bdb.BdbQuit&lt;/code&gt; if you don&amp;rsquo;t.</source>
          <target state="translated">테스트를 디버깅하는 동안 &lt;a href=&quot;https://docs.python.org/3/library/pdb.html#module-pdb&quot;&gt; &lt;code&gt;pdb&lt;/code&gt; &lt;/a&gt; 를 사용 하려면 병렬 실행을 비활성화해야합니다 ( &lt;code&gt;--parallel=1&lt;/code&gt; ). 그렇지 않으면 &lt;code&gt;bdb.BdbQuit&lt;/code&gt; 과 같은 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09bf01b3a96c96f5b899be6fd6691dca94d0251d" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;raise_exception&lt;/code&gt; but also give your users a chance to login first, you can add the &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">&lt;code&gt;raise_exception&lt;/code&gt; 을 사용하고 싶지만 사용자에게 먼저 로그인 할 수있는 기회를 제공하려면 &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt; &lt;code&gt;login_required()&lt;/code&gt; &lt;/a&gt; 데코레이터를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5dc0b597e5d02af669c0e6dc95f1cbd74aafb742" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt; in your templates, add &lt;code&gt;'django.template.context_processors.media'&lt;/code&gt; in the &lt;code&gt;'context_processors'&lt;/code&gt; option of &lt;a href=&quot;#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플리트에서 &lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt; 을 사용하려면 &lt;a href=&quot;#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'context_processors'&lt;/code&gt; 옵션에 &lt;code&gt;'django.template.context_processors.media'&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="0c3dd032579f4df0a564516ab9f6887bed67602d" translate="yes" xml:space="preserve">
          <source>If you want to use Django on a production site, use &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; with &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt;. mod_wsgi operates in one of two modes: embedded mode or daemon mode. In embedded mode, mod_wsgi is similar to mod_perl &amp;ndash; it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security. The daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi.</source>
          <target state="translated">프로덕션 사이트에서 Django를 사용하려면 &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt; 와 함께 &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; 를 사용하십시오.. mod_wsgi는 내장 모드 또는 데몬 모드의 두 가지 모드 중 하나로 작동합니다. 임베디드 모드에서 mod_wsgi는 mod_perl과 유사합니다. &amp;ndash; Apache를 Python에 포함시키고 서버가 시작될 때 Python 코드를 메모리에로드합니다. 코드는 Apache 프로세스 수명 동안 메모리에 유지되므로 다른 서버 배열보다 성능이 크게 향상됩니다. 데몬 모드에서 mod_wsgi는 요청을 처리하는 독립적 인 데몬 프로세스를 생성합니다. 데몬 프로세스는 웹 서버와 다른 사용자로 실행될 수 있으므로 보안이 향상 될 수 있습니다. 전체 Apache 웹 서버를 다시 시작하지 않고 데몬 프로세스를 다시 시작할 수 있으므로 코드베이스를보다 원활하게 새로 고칠 수 있습니다. 설치에 적합한 모드를 확인하려면 mod_wsgi 설명서를 참조하십시오. mod_wsgi 모듈이 활성화 된 상태에서 Apache가 설치되어 있는지 확인하십시오.Django는 mod_wsgi를 지원하는 모든 버전의 Apache에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7c92963f8c898d1ccffd90cfaac208f60b5e5b47" translate="yes" xml:space="preserve">
          <source>If you want to use a custom &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; (for instance to add extra validation), set &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; on your view.</source>
          <target state="translated">사용자 지정 &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 을 사용하려면 (예 : 추가 유효성 검사 추가) 보기에서 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 를 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="316d41ea216f94382282cfe3b25a5c07e352a193" translate="yes" xml:space="preserve">
          <source>If you want to use a custom widget with a relation field (i.e. &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;), make sure you haven&amp;rsquo;t included that field&amp;rsquo;s name in &lt;code&gt;raw_id_fields&lt;/code&gt;, &lt;code&gt;radio_fields&lt;/code&gt;, or &lt;code&gt;autocomplete_fields&lt;/code&gt;.</source>
          <target state="translated">관계 필드 (예 : &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; ) 와 함께 사용자 정의 위젯을 사용하려면 &lt;code&gt;raw_id_fields&lt;/code&gt; , &lt;code&gt;radio_fields&lt;/code&gt; 또는 &lt;code&gt;autocomplete_fields&lt;/code&gt; 에 해당 필드 이름을 포함시키지 않았는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="72ff3767011b9eb84f053fc485cd959d42700e5b" translate="yes" xml:space="preserve">
          <source>If you want to use a database-backed session, you need to add &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; to your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">데이터베이스 기반 세션을 사용하려면 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; 를 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="c485b12671856cb3f97a146712ef453cc167eaf1" translate="yes" xml:space="preserve">
          <source>If you want to use a different &lt;code&gt;Client&lt;/code&gt; class (for example, a subclass with customized behavior), use the &lt;a href=&quot;#django.test.SimpleTestCase.client_class&quot;&gt;&lt;code&gt;client_class&lt;/code&gt;&lt;/a&gt; class attribute:</source>
          <target state="translated">다른 &lt;code&gt;Client&lt;/code&gt; 클래스 (예 : 사용자 정의 동작이있는 서브 클래스)를 사용하려면 &lt;a href=&quot;#django.test.SimpleTestCase.client_class&quot;&gt; &lt;code&gt;client_class&lt;/code&gt; &lt;/a&gt; class 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5db65e04d45386782928afe748f9d80b1e108065" translate="yes" xml:space="preserve">
          <source>If you want to use headers to disable caching altogether, &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;never_cache()&lt;/code&gt;&lt;/a&gt; is a view decorator that adds headers to ensure the response won&amp;rsquo;t be cached by browsers or other caches. Example:</source>
          <target state="translated">헤더를 사용하여 캐싱을 모두 비활성화하려는 경우 &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;never_cache()&lt;/code&gt; &lt;/a&gt; 는 브라우저 또는 다른 캐시에 의해 응답이 캐시되지 않도록 헤더를 추가하는 뷰 데코레이터입니다. 예:</target>
        </trans-unit>
        <trans-unit id="8361c5fa5bdf1c6b873a3e941b8993711b228a02" translate="yes" xml:space="preserve">
          <source>If you want to use the admin layout, extend from &lt;code&gt;admin/base_site.html&lt;/code&gt;:</source>
          <target state="translated">관리자 레이아웃을 사용하려면 &lt;code&gt;admin/base_site.html&lt;/code&gt; 에서 확장 하십시오 .</target>
        </trans-unit>
        <trans-unit id="186071bb932b421ca839f6a4ddf35ff070f60d16" translate="yes" xml:space="preserve">
          <source>If you want to use these, you will need to deploy Django using &lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGI&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;이것을&lt;/a&gt; 사용 하려면 대신 ASGI 를 사용하여 Django를 배포해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7a82fb0e4828be0c9686fdb58d8239454489f85b" translate="yes" xml:space="preserve">
          <source>If you want to work with model classes or model instances from the &lt;code&gt;from_state&lt;/code&gt; argument in &lt;code&gt;database_forwards()&lt;/code&gt; or &lt;code&gt;database_backwards()&lt;/code&gt;, you must render model states using the &lt;code&gt;clear_delayed_apps_cache()&lt;/code&gt; method to make related models available:</source>
          <target state="translated">&lt;code&gt;database_forwards()&lt;/code&gt; 또는 &lt;code&gt;database_backwards()&lt;/code&gt; 의 &lt;code&gt;from_state&lt;/code&gt; 인수에서 모델 클래스 또는 모델 인스턴스로 작업 하려면 관련 모델을 사용 가능하게 하려면 &lt;code&gt;clear_delayed_apps_cache()&lt;/code&gt; 메소드를 사용하여 모델 상태를 렌더링해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ddefbc21db307ddde4dcfed071042c3b03fd65a6" translate="yes" xml:space="preserve">
          <source>If you want your custom user model to also work with the admin, your user model must define some additional attributes and methods. These methods allow the admin to control access of the user to admin content:</source>
          <target state="translated">사용자 정의 사용자 모델이 관리자와도 작동하게하려면 사용자 모델이 몇 가지 추가 속성 및 메소드를 정의해야합니다. 이러한 방법을 통해 관리자는 콘텐츠를 관리하기위한 사용자 액세스를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="281b29199ee15df8030aeddb22d5e3ee5ba23b2d" translate="yes" xml:space="preserve">
          <source>If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;custom manager&lt;/a&gt; documentation: create a base class containing the new managers and inherit that after the primary base class:</source>
          <target state="translated">기존 기본값을 바꾸지 않고 프록시에 새 관리자를 추가하려면 &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;사용자 정의 관리자&lt;/a&gt; 문서에 설명 된 기술을 사용할 수 있습니다 . 새 관리자를 포함하는 기본 클래스를 작성하고 기본 기본 클래스 이후에 상속하십시오.</target>
        </trans-unit>
        <trans-unit id="ce151f538ddf72bffbb0e10083ffad1aba038cda" translate="yes" xml:space="preserve">
          <source>If you wanted to add checks to a model manager, you would take the same approach on your subclass of &lt;a href=&quot;db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모델 관리자에 검사를 추가하려면 하위 클래스 &lt;a href=&quot;db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 에서 동일한 접근 방식을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6cd0e76c2fef52fb36e48a577f2af1ba781eba5" translate="yes" xml:space="preserve">
          <source>If you wanted to display an inline on the &lt;code&gt;Person&lt;/code&gt; admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically:</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; admin 추가 / 변경 페이지 에 인라인을 표시 하려면 외래 키를 자동으로 정의 할 수 없으므로 외래 키를 명시 적으로 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="07539613b20b80f84b619ddd76722bd149b459aa" translate="yes" xml:space="preserve">
          <source>If you wanted to retrieve the uploaded file&amp;rsquo;s on-disk filename, or the file&amp;rsquo;s size, you could use the &lt;a href=&quot;../files/file#django.core.files.File.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../files/file#django.core.files.File.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; attributes respectively; for more information on the available attributes and methods, see the &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class reference and the &lt;a href=&quot;../../topics/files&quot;&gt;Managing files&lt;/a&gt; topic guide.</source>
          <target state="translated">업로드 된 파일의 디스크상의 파일 이름 또는 파일 크기를 검색하려면 &lt;a href=&quot;../files/file#django.core.files.File.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../files/file#django.core.files.File.size&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt; 속성을 각각 사용할 수 있습니다 . 사용 가능한 속성 및 메소드에 대한 자세한 정보는 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 클래스 참조 및 &lt;a href=&quot;../../topics/files&quot;&gt;파일 관리&lt;/a&gt; 주제 안내서를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b0b81a58992bc81d6e10a12990d5032b8172bb7a" translate="yes" xml:space="preserve">
          <source>If you wish to call a function with a &lt;code&gt;using&lt;/code&gt; parameter you can do it by wrapping the call with a &lt;code&gt;lambda&lt;/code&gt; to add an extra parameter:</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt; 매개 변수를 사용하여 함수를 호출 하려면 호출을 &lt;code&gt;lambda&lt;/code&gt; 로 묶어 추가 매개 변수를 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="f26de0b1fb03d0b7c3a7b0c5f5e0aa437ee3f542" translate="yes" xml:space="preserve">
          <source>If you wish to change the index, login or logout templates, you are better off creating your own &lt;code&gt;AdminSite&lt;/code&gt; instance (see below), and changing the &lt;a href=&quot;#django.contrib.admin.AdminSite.index_template&quot;&gt;&lt;code&gt;AdminSite.index_template&lt;/code&gt;&lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.AdminSite.login_template&quot;&gt;&lt;code&gt;AdminSite.login_template&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.AdminSite.logout_template&quot;&gt;&lt;code&gt;AdminSite.logout_template&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">인덱스, 로그인 또는 로그 아웃 템플릿을 변경하려면 고유 한 &lt;code&gt;AdminSite&lt;/code&gt; 인스턴스 (아래 참조)를 만들고 &lt;a href=&quot;#django.contrib.admin.AdminSite.index_template&quot;&gt; &lt;code&gt;AdminSite.index_template&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.AdminSite.login_template&quot;&gt; &lt;code&gt;AdminSite.login_template&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.admin.AdminSite.logout_template&quot;&gt; &lt;code&gt;AdminSite.logout_template&lt;/code&gt; &lt;/a&gt; 속성을 변경하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fd89bde5afb1b4ac48d534864f59e0b25319f574" translate="yes" xml:space="preserve">
          <source>If you wish to have separate templates for &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt;, you can set either &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; on your view class.</source>
          <target state="translated">당신이에 대해 별도의 템플릿이하고자하는 경우 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; 을&lt;/a&gt; , 당신도 설정할 수 있습니다 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt; &lt;code&gt;template_name_suffix&lt;/code&gt; &lt;/a&gt; 뷰 클래스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="bae671e1d4f3ce5d8ed5acdcbf7abf7fadef645d" translate="yes" xml:space="preserve">
          <source>If you wish to have separate templates for &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt;, you can set either &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; on your view class.</source>
          <target state="translated">당신이에 대해 별도의 템플릿이하고자하는 경우 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; 을&lt;/a&gt; , 당신도 설정할 수 있습니다 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt; &lt;code&gt;template_name_suffix&lt;/code&gt; &lt;/a&gt; 뷰 클래스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="c63c598798c3a61a008e5d7569767325195fe300" translate="yes" xml:space="preserve">
          <source>If you wish to override this behavior, you can override &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.delete_queryset&quot;&gt;&lt;code&gt;ModelAdmin.delete_queryset()&lt;/code&gt;&lt;/a&gt; or write a custom action which does deletion in your preferred manner &amp;ndash; for example, by calling &lt;code&gt;Model.delete()&lt;/code&gt; for each of the selected items.</source>
          <target state="translated">이 동작을 재정의하려는 경우 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.delete_queryset&quot;&gt; &lt;code&gt;ModelAdmin.delete_queryset()&lt;/code&gt; &lt;/a&gt; 재정의 하거나 원하는 방식으로 삭제하는 사용자 지정 작업을 작성할 수 있습니다 ( 예 : 선택한 각 항목에 대해 &lt;code&gt;Model.delete()&lt;/code&gt; 를 호출 ) .</target>
        </trans-unit>
        <trans-unit id="c81732d3ee4b9133691a67e4efeae93d3348110c" translate="yes" xml:space="preserve">
          <source>If you wish to perform arbitrary distance queries using non-point geometries in WGS84 in PostGIS and you want decent performance, enable the &lt;a href=&quot;#django.contrib.gis.db.models.GeometryField.geography&quot;&gt;&lt;code&gt;GeometryField.geography&lt;/code&gt;&lt;/a&gt; keyword so that &lt;a href=&quot;#geography-type&quot;&gt;geography database type&lt;/a&gt; is used instead.</source>
          <target state="translated">PostGIS의 WGS84에서 비점 지오메트리를 사용하여 임의의 거리 쿼리를 수행하고 적절한 성능을 원하면 &lt;a href=&quot;#geography-type&quot;&gt;지리 데이터베이스 유형&lt;/a&gt; 이 대신 사용 되도록 &lt;a href=&quot;#django.contrib.gis.db.models.GeometryField.geography&quot;&gt; &lt;code&gt;GeometryField.geography&lt;/code&gt; &lt;/a&gt; 키워드를 활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="d149fe0ba9386b629de5325bd32fff38e705d495" translate="yes" xml:space="preserve">
          <source>If you wish to protect a list, tuple or dictionary you can do so using the signing module&amp;rsquo;s &lt;code&gt;dumps&lt;/code&gt; and &lt;code&gt;loads&lt;/code&gt; functions. These imitate Python&amp;rsquo;s pickle module, but use JSON serialization under the hood. JSON ensures that even if your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format:</source>
          <target state="translated">리스트, 튜플 또는 사전을 보호하려면 서명 모듈의 &lt;code&gt;dumps&lt;/code&gt; 및 &lt;code&gt;loads&lt;/code&gt; 기능을 사용하면 됩니다. 이것들은 파이썬의 피클 모듈을 모방하지만 후드 아래에서 JSON 직렬화를 사용합니다. JSON은 &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 를 도난당한 경우에도 피클 형식을 악용하여 공격자가 임의의 명령을 실행할 수 없도록합니다.</target>
        </trans-unit>
        <trans-unit id="1a7ff6c29d67b18f351c6ef695f42316c70e46f0" translate="yes" xml:space="preserve">
          <source>If you wish to store information related to &lt;code&gt;User&lt;/code&gt;, you can use a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model:</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; 관련 정보를 저장하려는 경우 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 를 사용하여 추가 정보를위한 필드가 포함 된 모델을 사용할 수 있습니다 . 이 일대일 모델은 종종 사이트 사용자에 대한 인증되지 않은 관련 정보를 저장할 수 있으므로 프로필 모델이라고합니다. 예를 들어 직원 모델을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3163de4f64d0e6226c0693d4c28e0ff7be844ba" translate="yes" xml:space="preserve">
          <source>If you wish to store the CSRF token in the user&amp;rsquo;s session, use the &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">사용자 세션에 CSRF 토큰을 저장하려면 &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt; 설정을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="95ab3f31deb5e5844d6cefd4f6792b2923cdc1d0" translate="yes" xml:space="preserve">
          <source>If you wish to submit your site to the &lt;a href=&quot;https://hstspreload.org/&quot;&gt;browser preload list&lt;/a&gt;, set the &lt;a href=&quot;settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt;&lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt;. That appends the &lt;code&gt;preload&lt;/code&gt; directive to the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header.</source>
          <target state="translated">사이트를 &lt;a href=&quot;https://hstspreload.org/&quot;&gt;브라우저 &lt;/a&gt;&lt;a href=&quot;settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt; &lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt; &lt;/a&gt; 로드 목록 에 제출 하려면 SECURE_HSTS_PRELOAD 설정을 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 . 이는 &lt;code&gt;preload&lt;/code&gt; 지시문을 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; 헤더에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="530ae0cc38e2e42a905344acaf5f960f73fc3715" translate="yes" xml:space="preserve">
          <source>If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a &lt;code&gt;template_name&lt;/code&gt; parameter to the &lt;code&gt;sitemap&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; views via the URLconf:</source>
          <target state="translated">사이트에서 사용 가능한 사이트 맵 또는 사이트 맵 색인마다 다른 템플릿을 사용하려는 경우 URLconf를 통해 &lt;code&gt;template_name&lt;/code&gt; 매개 변수를 &lt;code&gt;sitemap&lt;/code&gt; 및 &lt;code&gt;index&lt;/code&gt; 보기 에 전달하여 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6909e16e21302fa3cec3921ce60357ae9b5838a2" translate="yes" xml:space="preserve">
          <source>If you wish to use another database, install the appropriate &lt;a href=&quot;../topics/install#database-installation&quot;&gt;database bindings&lt;/a&gt; and change the following keys in the &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'default'&lt;/code&gt; item to match your database connection settings:</source>
          <target state="translated">다른 데이터베이스를 사용하려면 적절한 &lt;a href=&quot;../topics/install#database-installation&quot;&gt;데이터베이스 바인딩을&lt;/a&gt; 설치하고 데이터베이스 연결 설정과 일치하도록 &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'default'&lt;/code&gt; 항목 에서 다음 키를 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6e2765329d13f9a756817f8148fc06ebd15e20d" translate="yes" xml:space="preserve">
          <source>If you would like to give translators hints about a translatable string, you can add a comment prefixed with the &lt;code&gt;Translators&lt;/code&gt; keyword on the line preceding the string, e.g.:</source>
          <target state="translated">번역자에게 번역 가능한 문자열에 대한 힌트를 제공 하려면 문자열 앞에있는 줄에 &lt;code&gt;Translators&lt;/code&gt; 키워드로 접두어를 추가 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ec10a212c4274c393a2dd780fbf91de455cc5cb9" translate="yes" xml:space="preserve">
          <source>If you would like to override the &lt;code&gt;clean()&lt;/code&gt; method and maintain this validation, you must call the parent class&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;clean()&lt;/code&gt; 메소드 를 대체 하고이 유효성 검증을 유지하려면 상위 클래스의 &lt;code&gt;clean()&lt;/code&gt; 메소드를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3f28065cea9d31fe5a0cfcc2e982ee60d5116348" translate="yes" xml:space="preserve">
          <source>If you would rather start from an empty database and re-run all migrations, you should drop and recreate the database and then run &lt;a href=&quot;#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">빈 데이터베이스에서 시작하여 모든 마이그레이션을 다시 실행하려면 데이터베이스를 삭제하고 다시 만든 다음 &lt;a href=&quot;#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 대신 실행해야 합니다.</target>
        </trans-unit>
        <trans-unit id="787d4b4a6adbad5e56e698fbb47e2f7227b1967b" translate="yes" xml:space="preserve">
          <source>If you write a custom filter that operates on &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects, you&amp;rsquo;ll usually register it with the &lt;code&gt;expects_localtime&lt;/code&gt; flag set to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체에서 작동하는 사용자 정의 필터를 작성하는 경우 일반적으로 &lt;code&gt;expects_localtime&lt;/code&gt; 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정하여 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="41a73fd1c496ecfedcbd96f35862caf467d2aa9d" translate="yes" xml:space="preserve">
          <source>If you write your own password hasher that contains a work factor such as a number of iterations, you should implement a &lt;code&gt;harden_runtime(self, password, encoded)&lt;/code&gt; method to bridge the runtime gap between the work factor supplied in the &lt;code&gt;encoded&lt;/code&gt; password and the default work factor of the hasher. This prevents a user enumeration timing attack due to difference between a login request for a user with a password encoded in an older number of iterations and a nonexistent user (which runs the default hasher&amp;rsquo;s default number of iterations).</source>
          <target state="translated">여러 반복 횟수와 같은 작업 요소가 포함 된 고유 한 암호 &lt;code&gt;harden_runtime(self, password, encoded)&lt;/code&gt; 를 작성하는 경우 &lt;code&gt;encoded&lt;/code&gt; 암호에 제공된 작업 요소 와 기본 작업 사이의 런타임 간격을 연결 하기 위해 harden_runtime (self, password, encode) 메소드를 구현해야 합니다. hasher의 요인. 이렇게하면 이전 반복 횟수로 인코딩 된 비밀번호를 가진 사용자의 로그인 요청과 존재하지 않는 사용자 (기본 hasher의 기본 반복 횟수를 실행 함)의 차이로 인해 사용자 열거 타이밍 공격이 방지됩니다.</target>
        </trans-unit>
        <trans-unit id="0874fbd3ce49447e25c47a3eeb9385b0739ec7b9" translate="yes" xml:space="preserve">
          <source>If you write your own similar functions and deal with translations, you&amp;rsquo;ll face the problem of what to do when the first argument is a lazy translation object. You don&amp;rsquo;t want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread&amp;rsquo;s locale setting will not be correct).</source>
          <target state="translated">비슷한 함수를 작성하고 번역을 다루는 경우 첫 번째 인수가 게으른 번역 객체 일 때 수행 할 작업의 문제에 직면하게됩니다. 뷰 외부에서이 함수를 사용하고 있기 때문에 즉시 문자열로 변환하고 싶지 않으므로 현재 스레드의 로케일 설정이 올바르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7404aaf8b678e2be0f5abe5634bc5b715f5e8c11" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like default values to come from somewhere other than &lt;code&gt;django.conf.global_settings&lt;/code&gt;, you can pass in a module or class that provides the default settings as the &lt;code&gt;default_settings&lt;/code&gt; argument (or as the first positional argument) in the call to &lt;code&gt;configure()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;django.conf.global_settings&lt;/code&gt; 가 아닌 다른 곳에서 기본값을 가져 오려면 &lt;code&gt;configure()&lt;/code&gt; 호출에서 기본 설정을 &lt;code&gt;default_settings&lt;/code&gt; 인수 (또는 첫 번째 위치 인수) 로 제공하는 모듈 또는 클래스를 전달할 수 있습니다. ) .</target>
        </trans-unit>
        <trans-unit id="87fbb560a0a7d5bfb6385760a929b01781e9247b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:</source>
          <target state="translated">최신 버그 수정 및 개선 사항으로 Django 코드를 가끔 업데이트하려면 다음 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="2e426d25005a653ab3104419888711627e40acb9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to customize the behavior of &lt;a href=&quot;../ref/middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt;&lt;code&gt;django.middleware.common.BrokenLinkEmailsMiddleware&lt;/code&gt;&lt;/a&gt; further (for example to ignore requests coming from web crawlers), you should subclass it and override its methods.</source>
          <target state="translated">&lt;a href=&quot;../ref/middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt; &lt;code&gt;django.middleware.common.BrokenLinkEmailsMiddleware&lt;/code&gt; &lt;/a&gt; 의 동작을 추가 로 사용자 정의하려면 (예 : 웹 크롤러에서 오는 요청을 무시하기 위해) 서브 클래 싱하고 해당 메소드를 대체해야합니다.</target>
        </trans-unit>
        <trans-unit id="40a45578a28fb495c1954bbd188030f39d58e346" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function &lt;a href=&quot;#django.contrib.auth.hashers.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt;. It takes two arguments: the plain-text password to check, and the full value of a user&amp;rsquo;s &lt;code&gt;password&lt;/code&gt; field in the database to check against, and returns &lt;code&gt;True&lt;/code&gt; if they match, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">데이터베이스의 일반 텍스트 비밀번호와 해시 된 비밀번호를 비교하여 사용자를 수동으로 인증하려면 편의 기능 &lt;a href=&quot;#django.contrib.auth.hashers.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; &lt;/a&gt; 사용하십시오 . 검사 할 일반 텍스트 암호와 데이터베이스에서 검사 할 사용자 &lt;code&gt;password&lt;/code&gt; 필드 의 전체 값이라는 두 가지 인수가 필요하며 일치하면 &lt;code&gt;True&lt;/code&gt; 를 , &lt;code&gt;False&lt;/code&gt; 않으면 False를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7032cf12cbd255835e52ce652c41252d70b15172" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a URL without displaying it, you can use a slightly different call:</source>
          <target state="translated">표시하지 않고 URL을 검색하려면 약간 다른 호출을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e6e1935ff1f8bbe3d9a10a3392b2aed18e77332" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a namespaced URL, specify the fully qualified name:</source>
          <target state="translated">네임 스페이스가 지정된 URL을 검색하려면 정규화 된 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="42574c0524ed457c65a64125a0ee03cde3ec0664" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a static URL without displaying it, you can use a slightly different call:</source>
          <target state="translated">정적 URL을 표시하지 않고 검색하려면 약간 다른 호출을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="782329d0998e5379bd00452f104bcc26d52e8259" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a translated string without displaying it, you can use the following syntax:</source>
          <target state="translated">번역 된 문자열을 표시하지 않고 검색하려면 다음 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a678c4aabe8ea3a89184137c4d4eb0cd0f145382" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to set up your own admin site with custom behavior, you&amp;rsquo;re free to subclass &lt;code&gt;AdminSite&lt;/code&gt; and override or add anything you like. Then, create an instance of your &lt;code&gt;AdminSite&lt;/code&gt; subclass (the same way you&amp;rsquo;d instantiate any other Python class) and register your models and &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses with it instead of with the default site. Finally, update &lt;code&gt;myproject/urls.py&lt;/code&gt; to reference your &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">사용자 지정 동작으로 자체 관리 사이트를 설정하려면 &lt;code&gt;AdminSite&lt;/code&gt; 를 하위 클래스로 분류 하고 원하는 항목을 재정의하거나 추가 할 수 있습니다. 그런 다음 &lt;code&gt;AdminSite&lt;/code&gt; 서브 클래스 의 인스턴스 (다른 Python 클래스를 인스턴스화하는 것과 같은 방법)를 작성하고 기본 사이트 대신 모델 및 &lt;code&gt;ModelAdmin&lt;/code&gt; 서브 클래스를 등록하십시오 . 마지막으로 &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt; 하위 클래스 를 참조하도록 &lt;code&gt;myproject/urls.py&lt;/code&gt; 를 업데이트 하십시오 .</target>
        </trans-unit>
        <trans-unit id="817d51330fc9dd66b1c2b0e80b8eed9e206bc902" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to specify a custom primary key, specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on one of your fields. If Django sees you&amp;rsquo;ve explicitly set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;Field.primary_key&lt;/code&gt;&lt;/a&gt;, it won&amp;rsquo;t add the automatic &lt;code&gt;id&lt;/code&gt; column.</source>
          <target state="translated">사용자 정의 기본 키를 지정하려면 필드 중 하나에 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; 를 지정 하십시오. Django가 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;Field.primary_key&lt;/code&gt; 를&lt;/a&gt; 명시 적으로 설정 했다면 자동 &lt;code&gt;id&lt;/code&gt; 열을 추가하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="59523cacb99089a63ab1f97cf8f948701988f18d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d prefer Django not to create a backwards relation, set &lt;code&gt;related_name&lt;/code&gt; to &lt;code&gt;'+'&lt;/code&gt; or end it with &lt;code&gt;'+'&lt;/code&gt;. For example, this will ensure that the &lt;code&gt;User&lt;/code&gt; model won&amp;rsquo;t have a backwards relation to this model:</source>
          <target state="translated">당신이 장고를 원하는 경우 이전 버전과의 관계 설정 작성하지 &lt;code&gt;related_name&lt;/code&gt; 에 &lt;code&gt;'+'&lt;/code&gt; 를 또는 그것을 종료 &lt;code&gt;'+'&lt;/code&gt; . 예를 들어 &lt;code&gt;User&lt;/code&gt; 모델이이 모델과 역방향 관계를 가지지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="1b20aacdd666251729295967fecf137a2c2099d5" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d prefer not to call the template &lt;code&gt;registration/login.html&lt;/code&gt;, you can pass the &lt;code&gt;template_name&lt;/code&gt; parameter via the extra arguments to the &lt;code&gt;as_view&lt;/code&gt; method in your URLconf. For example, this URLconf line would use &lt;code&gt;myapp/login.html&lt;/code&gt; instead:</source>
          <target state="translated">템플릿의 전화를 사용하지 않으려면 &lt;code&gt;registration/login.html&lt;/code&gt; , 당신은 통과 할 수 &lt;code&gt;template_name&lt;/code&gt; 받는 여분의 인수를 통해 매개 변수를 &lt;code&gt;as_view&lt;/code&gt; 의 당신의 URLconf의 방법. 예를 들어이 URLconf 줄은 &lt;code&gt;myapp/login.html&lt;/code&gt; 을 대신 사용합니다.</target>
        </trans-unit>
        <trans-unit id="48c682ae2cbd0afba4b4eae5274158bf92b45a13" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re after even more control, you can also cache template fragments using the &lt;code&gt;cache&lt;/code&gt; template tag. To give your template access to this tag, put &lt;code&gt;{% load cache %}&lt;/code&gt; near the top of your template.</source>
          <target state="translated">더 많은 제어를 수행 한 경우 &lt;code&gt;cache&lt;/code&gt; 템플릿 태그를 사용하여 템플릿 조각을 캐시 할 수도 있습니다 . 템플릿에이 태그에 대한 액세스 권한을 부여하려면 템플릿 상단 근처 에 &lt;code&gt;{% load cache %}&lt;/code&gt; 를 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="767eed5b450bd819bca83e5738282f4f7be2808f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building a database-driven app, chances are you&amp;rsquo;ll have forms that map closely to Django models. For instance, you might have a &lt;code&gt;BlogComment&lt;/code&gt; model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you&amp;rsquo;ve already defined the fields in your model.</source>
          <target state="translated">데이터베이스 기반 앱을 구축하는 경우 장고 모델과 밀접하게 매핑되는 양식이있을 수 있습니다. 예를 들어, &lt;code&gt;BlogComment&lt;/code&gt; 모델이 있고 사람들이 의견을 제출할 수있는 양식을 작성하려고 할 수 있습니다. 이 경우 모델에서 필드를 이미 정의 했으므로 양식에서 필드 유형을 정의하는 것이 중복됩니다.</target>
        </trans-unit>
        <trans-unit id="abfc88abce0b83f7179182a6de094082846b855c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building your own backend, you can use the standard cache backends as reference implementations. You&amp;rsquo;ll find the code in the &lt;code&gt;django/core/cache/backends/&lt;/code&gt; directory of the Django source.</source>
          <target state="translated">자체 백엔드를 구축하는 경우 표준 캐시 백엔드를 참조 구현으로 사용할 수 있습니다. Django 소스 의 &lt;code&gt;django/core/cache/backends/&lt;/code&gt; 디렉토리에 코드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b88de13d833c918273b8729f7bad182ac6ca7c85" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re connecting to a third-party database that stores datetimes in a local time rather than UTC, then you must set this option to the appropriate time zone. Likewise, if Django manages the database but third-party systems connect to the same database and expect to find datetimes in local time, then you must set this option.</source>
          <target state="translated">UTC가 아닌 현지 시간으로 날짜 시간을 저장하는 타사 데이터베이스에 연결하는 경우이 옵션을 적절한 시간대로 설정해야합니다. 마찬가지로 Django가 데이터베이스를 관리하지만 타사 시스템이 동일한 데이터베이스에 연결하고 현지 시간으로 datetimes를 찾으려면이 옵션을 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="cdde1ef1672874bcb82d804c53395d8d7aa1ed21" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re constructing SQL like &lt;code&gt;strftime('%W', 'date')&lt;/code&gt; and need a literal &lt;code&gt;%&lt;/code&gt; character in the query, quadruple it (&lt;code&gt;%%%%&lt;/code&gt;) in the &lt;code&gt;template&lt;/code&gt; attribute because the string is interpolated twice: once during the template interpolation in &lt;code&gt;as_sql()&lt;/code&gt; and once in the SQL interpolation with the query parameters in the database cursor.</source>
          <target state="translated">&lt;code&gt;strftime('%W', 'date')&lt;/code&gt; 와 같은 SQL을 생성 하고 쿼리에 리터럴 &lt;code&gt;%&lt;/code&gt; 문자 가 필요한 경우 문자열이 두 번 보간되므로 &lt;code&gt;template&lt;/code&gt; 속성 에서 문자를 % ( &lt;code&gt;%%%%&lt;/code&gt; ) 4 배로 늘리십시오 . &lt;code&gt;as_sql()&lt;/code&gt; 에서 템플릿 보간 , 데이터베이스 커서에서 쿼리 매개 변수를 사용하여 SQL 보간에서 한 번.</target>
        </trans-unit>
        <trans-unit id="ab456d418794c4d43bbff01956e9a7a76d213a8a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re constructing a URL manually (i.e., &lt;em&gt;not&lt;/em&gt; using the &lt;code&gt;reverse()&lt;/code&gt; function), you&amp;rsquo;ll need to take care of the encoding yourself. In this case, use the &lt;code&gt;iri_to_uri()&lt;/code&gt; and &lt;code&gt;quote()&lt;/code&gt; functions that were documented &lt;a href=&quot;#id1&quot;&gt;above&lt;/a&gt;. For example:</source>
          <target state="translated">URL을 수동으로 구성하는 경우 (즉, &lt;code&gt;reverse()&lt;/code&gt; 함수를 사용 &lt;em&gt;하지 않는&lt;/em&gt; 경우) 인코딩을 직접 관리해야합니다. 이 경우 &lt;a href=&quot;#id1&quot;&gt;위에 설명한 &lt;/a&gt; &lt;code&gt;iri_to_uri()&lt;/code&gt; 및 &lt;code&gt;quote()&lt;/code&gt; 함수를 사용하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d1f283bcbf28eac94ae688e9ec728c932159a38" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating a pluggable app called &amp;ldquo;Rock &amp;rsquo;n&amp;rsquo; roll&amp;rdquo;, here&amp;rsquo;s how you would provide a proper name for the admin:</source>
          <target state="translated">&quot;Rock 'n'roll&quot;이라는 플러그 가능 앱을 만드는 경우 관리자에게 적절한 이름을 제공하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="48483c8c5c77a7b69d1a11700c288faaa0c7a213" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating a template that might be used in situations where you&amp;rsquo;re not sure whether auto-escaping is enabled, then add an &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter to any variable that needs escaping. When auto-escaping is on, there&amp;rsquo;s no danger of the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter &lt;em&gt;double-escaping&lt;/em&gt; data &amp;ndash; the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter does not affect auto-escaped variables.</source>
          <target state="translated">자동 이스케이프가 활성화되어 있는지 확실하지 않은 상황에서 사용될 수있는 템플릿을 작성하는 경우 이스케이프가 필요한 변수에 &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터를 추가하십시오 . 자동 이스케이프가 설정되어 있으면 &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터 &lt;em&gt;이중 이스케이프&lt;/em&gt; 데이터 가 발생할 위험 이 없습니다 . &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터는 자동 이스케이프 변수에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb584f8f7f077e584c39783ffdb002ff86b811fe" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating an Atom feed, rather than an RSS feed, set the &lt;code&gt;subtitle&lt;/code&gt; attribute instead of the &lt;code&gt;description&lt;/code&gt; attribute. See &lt;a href=&quot;#publishing-atom-and-rss-feeds-in-tandem&quot;&gt;Publishing Atom and RSS feeds in tandem&lt;/a&gt;, later, for an example.</source>
          <target state="translated">RSS 피드 대신 Atom 피드를 작성하는 경우 &lt;code&gt;description&lt;/code&gt; 속성 대신 &lt;code&gt;subtitle&lt;/code&gt; 속성을 설정하십시오 . 예를 들어 나중에 &lt;a href=&quot;#publishing-atom-and-rss-feeds-in-tandem&quot;&gt;Atom 및 RSS 피드 게시를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cb96d8c5caf914260b393b1dfd4c0e8a90b35c9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re entirely happy with Django&amp;rsquo;s &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model, but you want to add some additional profile information, you could subclass &lt;a href=&quot;#django.contrib.auth.models.AbstractUser&quot;&gt;&lt;code&gt;django.contrib.auth.models.AbstractUser&lt;/code&gt;&lt;/a&gt; and add your custom profile fields, although we&amp;rsquo;d recommend a separate model as described in the &amp;ldquo;Model design considerations&amp;rdquo; note of &lt;a href=&quot;#specifying-custom-user-model&quot;&gt;Specifying a custom user model&lt;/a&gt;. &lt;code&gt;AbstractUser&lt;/code&gt; provides the full implementation of the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; as an &lt;a href=&quot;../db/models#abstract-base-classes&quot;&gt;abstract model&lt;/a&gt;.</source>
          <target state="translated">Django의 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델에 만족하지만 추가 프로파일 정보를 추가하려는 경우 &lt;a href=&quot;#django.contrib.auth.models.AbstractUser&quot;&gt; &lt;code&gt;django.contrib.auth.models.AbstractUser&lt;/code&gt; 를&lt;/a&gt; 서브 클래 싱 하고 사용자 정의 프로파일 필드를 추가 할 수 있지만 설명 된대로 별도의 모델을 권장합니다 의 &quot;모델 설계 고려 사항&quot;노트에 &lt;a href=&quot;#specifying-custom-user-model&quot;&gt;사용자 정의 사용자 모델을 지정&lt;/a&gt; . &lt;code&gt;AbstractUser&lt;/code&gt; 는 기본의 전체 구현을 제공합니다 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 가 AS &lt;a href=&quot;../db/models#abstract-base-classes&quot;&gt;추상 모델을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf98ea5e8ac10c40300863d754cd455a34023fde" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re getting this error, you can solve it by:</source>
          <target state="translated">이 오류가 발생하면 다음을 통해 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ff638989d7f1c32d1bc77a814ea175afb1ded83" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please head over to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/help/&quot;&gt;Getting Help&lt;/a&gt; section of the FAQ.</source>
          <target state="translated">이 자습서를 진행하는 데 문제가 있으면 FAQ의 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/help/&quot;&gt;도움말 얻기&lt;/a&gt; 섹션으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="ceb0491d3bf47c78b35f0501020327f9bb81577e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please head over to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/help/&quot;&gt;Getting Help&lt;/a&gt; section of the FAQ.</source>
          <target state="translated">이 자습서를 진행하는 데 문제 가있는 경우 FAQ의 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/help/&quot;&gt;도움말 얻기&lt;/a&gt; 섹션으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="6d2ac7f0ad5bbe9c9e5d4d66af481149008f986f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please post a message to &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django-developers&lt;/a&gt; or drop by &lt;a href=&quot;irc://irc.freenode.net/django-dev&quot;&gt;#django-dev on irc.freenode.net&lt;/a&gt; to chat with other Django users who might be able to help.</source>
          <target state="translated">이 튜토리얼을 진행하는 데 문제가있는 경우 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django 개발자&lt;/a&gt; 에게 메시지를 게시 하거나 &lt;a href=&quot;irc://irc.freenode.net/django-dev&quot;&gt;irc.freenode.net&lt;/a&gt; 에서 # django-dev 를 통해 도움을 줄 수있는 다른 Django 사용자와 채팅하십시오.</target>
        </trans-unit>
        <trans-unit id="2fbd5232b3c9f7f1aeca7f1f9b129639569a986d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please post a message to &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django-developers&lt;/a&gt; or drop by &lt;a href=&quot;https://webchat.freenode.net/#django-dev&quot;&gt;#django-dev on irc.freenode.net&lt;/a&gt; to chat with other Django users who might be able to help.</source>
          <target state="translated">이 튜토리얼을 진행하는 데 문제가있는 경우 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django-developers&lt;/a&gt; 에게 메시지를 게시 하거나 &lt;a href=&quot;https://webchat.freenode.net/#django-dev&quot;&gt;irc.freenode.net의 # django-dev에 방문&lt;/a&gt; 하여 도움을 줄 수있는 다른 Django 사용자와 채팅하십시오.</target>
        </trans-unit>
        <trans-unit id="7d98d87b390e8d3b15eb2355fe5039a0d87c9028" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add a database identifier into the names of your fixtures.</source>
          <target state="translated">다중 데이터베이스 설정 인 경우, 다른 데이터베이스가 아닌 한 데이터베이스에로드하려는 조명기 데이터가있을 수 있습니다. 이 상황에서, 조명기 이름에 데이터베이스 식별자를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36c3a9be516105bc13cecddbe3c1b10fd6b1043c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in changing the Python-level behavior of a model class, you &lt;em&gt;could&lt;/em&gt; use &lt;code&gt;managed=False&lt;/code&gt; and create a copy of an existing model. However, there&amp;rsquo;s a better approach for that situation: &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;Proxy models&lt;/a&gt;.</source>
          <target state="translated">모델 클래스의 Python 수준 동작을 변경하려는 경우 &lt;code&gt;managed=False&lt;/code&gt; 를 사용하고 기존 모델의 복사본을 만들 &lt;em&gt;수&lt;/em&gt; 있습니다 . 그러나 해당 상황에 대한 더 나은 접근 방식이 있습니다 : &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;Proxy models&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99f458dbd1df038441eb2681e7428cb82105b3e7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in the more advanced migration operations, or want to be able to write your own, see the &lt;a href=&quot;../ref/migration-operations&quot;&gt;migration operations reference&lt;/a&gt; and the &amp;ldquo;how-to&amp;rdquo; on &lt;a href=&quot;../howto/writing-migrations&quot;&gt;writing migrations&lt;/a&gt;.</source>
          <target state="translated">고급 마이그레이션 작업에 관심이 있거나 직접 작성하려면 &lt;a href=&quot;../ref/migration-operations&quot;&gt;마이그레이션 작업 참조&lt;/a&gt; 및 &lt;a href=&quot;../howto/writing-migrations&quot;&gt;마이그레이션 작성&lt;/a&gt; 방법을 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="90b9a4c5a91dd19aabaed1109072ba30aa990297" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested, you can also run &lt;a href=&quot;../ref/django-admin#django-admin-check&quot;&gt;&lt;code&gt;python manage.py check&lt;/code&gt;&lt;/a&gt;; this checks for any problems in your project without making migrations or touching the database.</source>
          <target state="translated">관심이 있다면 &lt;a href=&quot;../ref/django-admin#django-admin-check&quot;&gt; &lt;code&gt;python manage.py check&lt;/code&gt; &lt;/a&gt; ; 이것은 이주를하거나 데이터베이스를 건드리지 않고 프로젝트의 문제점을 점검합니다.</target>
        </trans-unit>
        <trans-unit id="254c1791d376774d686299aebfc8b6db7e292b89" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re just updating a record and don&amp;rsquo;t need to do anything with the model object, the most efficient approach is to call &lt;code&gt;update()&lt;/code&gt;, rather than loading the model object into memory. For example, instead of doing this:</source>
          <target state="translated">레코드를 업데이트하고 모델 객체로 아무것도 할 필요가없는 경우 가장 효율적인 방법은 모델 객체를 메모리에로드하는 대신 &lt;code&gt;update()&lt;/code&gt; 를 호출 하는 것입니다. 예를 들어, 이것을하는 대신 :</target>
        </trans-unit>
        <trans-unit id="6535bf89936e50d74084e2cbe76650a8f1162a35" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re manually laying out a form in a template, as opposed to relying on Django&amp;rsquo;s default form layout, you might want to treat &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; fields differently from non-hidden fields. For example, because hidden fields don&amp;rsquo;t display anything, putting error messages &amp;ldquo;next to&amp;rdquo; the field could cause confusion for your users &amp;ndash; so errors for those fields should be handled differently.</source>
          <target state="translated">Django의 기본 양식 레이아웃에 의존하는 대신 템플릿에 양식을 수동으로 배치하는 경우 &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; 필드를 숨겨지지 않은 필드와 다르게 취급 할 수 있습니다. 예를 들어, 숨겨진 필드에는 아무 것도 표시되지 않으므로 필드 옆에 오류 메시지를 넣으면 사용자에게 혼란을 줄 수 있으므로 해당 필드의 오류는 다르게 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="255a115dbc0b712cc68471c5b0157f7a05af4797" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to &lt;a href=&quot;https://python.org/&quot;&gt;Python&lt;/a&gt;, you might want to start by getting an idea of what the language is like. Django is 100% Python, so if you&amp;rsquo;ve got minimal comfort with Python you&amp;rsquo;ll probably get a lot more out of Django.</source>
          <target state="translated">당신이 새로운 경우 &lt;a href=&quot;https://python.org/&quot;&gt;파이썬&lt;/a&gt; , 당신은 언어가 어떤지의 아이디어를 얻어서 시작 할 수 있습니다. Django는 100 % Python이므로 Python에 대한 편안함이 거의 없다면 Django에서 더 많은 것을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57db89d44ba94f90db102a29f1cf186e18b0cf37" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to programming entirely, you might want to start with this &lt;a href=&quot;https://wiki.python.org/moin/BeginnersGuide/NonProgrammers&quot;&gt;list of Python resources for non-programmers&lt;/a&gt;</source>
          <target state="translated">완전히 프로그래밍에 익숙하지 않다면 프로그래머 &lt;a href=&quot;https://wiki.python.org/moin/BeginnersGuide/NonProgrammers&quot;&gt;가 아닌 사람을위한이 Python 리소스 목록으로&lt;/a&gt; 시작하는 것이 좋습니다</target>
        </trans-unit>
        <trans-unit id="bba0861efae0244d879fc8e8ed733fd3d426220f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with file modes, please note that the &lt;code&gt;0o&lt;/code&gt; prefix is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use &lt;code&gt;644&lt;/code&gt;, you&amp;rsquo;ll get totally incorrect behavior.</source>
          <target state="translated">파일 모드에 익숙하지 않은 경우 &lt;code&gt;0o&lt;/code&gt; 접두사가 매우 중요합니다. 이는 모드를 지정해야하는 방식 인 8 진수를 나타냅니다. &lt;code&gt;644&lt;/code&gt; 를 사용하려고 하면 완전히 잘못된 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a1b95c0b433ee48fc48a97069bddf9e2b101dfc4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with file modes, please note that the leading &lt;code&gt;0&lt;/code&gt; is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use &lt;code&gt;644&lt;/code&gt;, you&amp;rsquo;ll get totally incorrect behavior.</source>
          <target state="translated">파일 모드에 익숙하지 않은 경우 선행 &lt;code&gt;0&lt;/code&gt; 이 매우 중요합니다. 이는 8 진수를 나타내며 이는 모드를 지정해야합니다. &lt;code&gt;644&lt;/code&gt; 사용하려고 하면 완전히 잘못된 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fca79f66a708a64746ced9500efdfaadfc0da5f9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with the Python DB-API, note that the SQL statement in &lt;code&gt;cursor.execute()&lt;/code&gt; uses placeholders, &lt;code&gt;&quot;%s&quot;&lt;/code&gt;, rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically escape your parameters as necessary.</source>
          <target state="translated">Python DB-API에 익숙하지 않은 경우 &lt;code&gt;cursor.execute()&lt;/code&gt; 의 SQL 문 은 SQL 내에 직접 매개 변수를 추가하는 대신 자리 표시 자 &lt;code&gt;&quot;%s&quot;&lt;/code&gt; 사용합니다 . 이 기술을 사용하면 기본 데이터베이스 라이브러리가 필요에 따라 자동으로 매개 변수를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="5ac7649dee96e11a0e7f2a105899bc5b139a0a35" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not setting the &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-5&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable, you &lt;em&gt;must&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt; at some point before using any code that reads settings.</source>
          <target state="translated">&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-5&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 환경 변수를 설정하지 않는 경우 설정 을 읽는 코드를 사용하기 전에 어느 시점에서 &lt;code&gt;configure()&lt;/code&gt; 를 호출 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="69337c6de60600bc5976cb6685657eebda60402c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not setting the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable, you &lt;em&gt;must&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt; at some point before using any code that reads settings.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 환경 변수를 설정하지 않는 경우 설정 을 읽는 코드를 사용하기 전에 어느 시점에서 &lt;code&gt;configure()&lt;/code&gt; 를 호출 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="4fdba98bf4c4fe90941820a9cac473eb87b6acfa" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not that familiar with Git, you can always find out more about its commands (once it&amp;rsquo;s installed) by typing &lt;code&gt;git help&lt;/code&gt; into the command line.</source>
          <target state="translated">Git에 익숙하지 않다면 &lt;code&gt;git help&lt;/code&gt; 를 명령 행 에 입력하여 명령에 대해 더 많은 정보를 찾을 수있다 .</target>
        </trans-unit>
        <trans-unit id="8f2ea50eab7b004cc616e97a7e545f78a1430a05" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the Django test runner, you may need to also ensure that any console output is not captured which would hide deprecation warnings. For example, if you use &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt;:</source>
          <target state="translated">Django 테스트 러너를 사용하지 않는 경우 사용 중단 경고를 숨길 콘솔 출력이 캡처되지 않았는지 확인해야 할 수도 있습니다. 예를 들어, &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt; 를 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="336e08309a7a860fad0714de0146cb1df14fc063" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the default project template, here are the requirements:</source>
          <target state="translated">기본 프로젝트 템플릿을 사용하지 않는 경우 요구 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65ea4d648599b2fb37f6f7e76db2905fce405c7f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the vanilla sitemap view &amp;ndash; for example, if it&amp;rsquo;s wrapped with a caching decorator &amp;ndash; you must name your sitemap view and pass &lt;code&gt;sitemap_url_name&lt;/code&gt; to the index view:</source>
          <target state="translated">바닐라 사이트 맵보기를 사용하지 않는 경우 (예 : 캐싱 데코레이터로 랩핑 된 경우) 사이트 맵보기의 이름을 지정하고 &lt;code&gt;sitemap_url_name&lt;/code&gt; 을 색인보기에 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a8c1d92ca93227fb6dd5eeedd2d2fb7fc729ef48" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re on Windows, put the drive letter at the beginning of the path, like this:</source>
          <target state="translated">Windows를 사용하는 경우 다음과 같이 경로 시작 부분에 드라이브 문자를 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="4fae52cace337e4f280328a49b626c77ab0c7b45" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re overriding &lt;code&gt;get_queryset()&lt;/code&gt; on your manager, be sure to either call the method on the parent (using &lt;code&gt;super()&lt;/code&gt;) or do the appropriate handling of the &lt;code&gt;_db&lt;/code&gt; attribute on the manager (a string containing the name of the database to use).</source>
          <target state="translated">관리자에서 &lt;code&gt;get_queryset()&lt;/code&gt; 을 재정의 하는 경우 상위에서 메소드를 호출하거나 ( &lt;code&gt;super()&lt;/code&gt; ) 관리자 에서 &lt;code&gt;_db&lt;/code&gt; 속성을 적절히 처리해야합니다 (데이터베이스 이름이 포함 된 문자열). 사용하다).</target>
        </trans-unit>
        <trans-unit id="f1a843504a97e80d5cb600f4100e8e00a5e36193" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re registering &lt;a href=&quot;signals#module-django.db.models.signals&quot;&gt;&lt;code&gt;model signals&lt;/code&gt;&lt;/a&gt;, you can refer to the sender by its string label instead of using the model class itself.</source>
          <target state="translated">&lt;a href=&quot;signals#module-django.db.models.signals&quot;&gt; &lt;code&gt;model signals&lt;/code&gt; &lt;/a&gt; 등록 하는 경우 모델 클래스 자체를 사용하는 대신 문자열 레이블로 발신자를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ad1460f336e480b534127419cefa394fd978f41" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re saving a file on a &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, using a &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; makes this process much easier. The file object will be saved to the location specified by the &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; argument of the corresponding &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; when calling &lt;code&gt;form.save()&lt;/code&gt;:</source>
          <target state="translated">당신은에있는 파일에 저장하는 경우 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt; A를 &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; 와를&lt;/a&gt; 사용하여 A, &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; 를&lt;/a&gt; 이 과정이 훨씬 쉬워집니다. &lt;code&gt;form.save()&lt;/code&gt; 호출 할 때 파일 객체는 해당 &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt; 인수로 지정된 위치에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="bedad35c511cec1744a3555151947dfea12f66f1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re serializing data (for example, when generating &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase.fixtures&quot;&gt;&lt;code&gt;fixtures&lt;/code&gt;&lt;/a&gt;) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; objects. See &lt;a href=&quot;../../topics/serialization#topics-serialization-natural-keys&quot;&gt;natural keys&lt;/a&gt; and &lt;a href=&quot;../django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">일반 관계를 구현하는 모델에서 데이터를 직렬화하는 경우 (예 : &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase.fixtures&quot;&gt; &lt;code&gt;fixtures&lt;/code&gt; &lt;/a&gt; 생성 할 때 ) 관련 키를 사용하여 관련 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 객체 를 고유하게 식별해야 합니다. 자세한 정보는 &lt;a href=&quot;../../topics/serialization#topics-serialization-natural-keys&quot;&gt;자연 키&lt;/a&gt; 및 &lt;a href=&quot;../django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt; 자연 외부) 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="11eb2a40cd729d4d12c805c9535dc58c68ec956d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re starting a new project, it&amp;rsquo;s highly recommended to set up a custom user model, even if the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model is sufficient for you. This model behaves identically to the default user model, but you&amp;rsquo;ll be able to customize it in the future if the need arises:</source>
          <target state="translated">새 프로젝트를 시작하는 경우 기본 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델로 충분 하더라도 사용자 정의 사용자 모델을 설정하는 것이 좋습니다 . 이 모델은 기본 사용자 모델과 동일하게 작동하지만 필요에 따라 나중에 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48a25be3e80caa082a172422daae21775a104668" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, &lt;a href=&quot;#multi-table-inheritance&quot;&gt;Multi-table inheritance&lt;/a&gt; is the way to go.</source>
          <target state="translated">기존 모델 (아마도 다른 응용 프로그램에서 온 것)을 서브 클래 싱하고 각 모델에 고유 한 데이터베이스 테이블을 갖기를 원한다면 &lt;a href=&quot;#multi-table-inheritance&quot;&gt;다중 테이블 상속&lt;/a&gt; 이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="749f5754bf6064aeadce7af0aa572b7f5cd04a43" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re synchronizing content types to more than one database, be aware that their primary keys may not match across databases. This may result in data corruption or data loss.</source>
          <target state="translated">콘텐츠 형식을 둘 이상의 데이터베이스와 동기화하는 경우 기본 키가 데이터베이스간에 일치하지 않을 수 있습니다. 데이터가 손상되거나 데이터가 손실 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6fc2fe716bde4fb5cf0628226301f83349d64f4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re testing a multiple database configuration with primary/replica (referred to as master/slave by some databases) replication, this strategy of creating test databases poses a problem. When the test databases are created, there won&amp;rsquo;t be any replication, and as a result, data created on the primary won&amp;rsquo;t be seen on the replica.</source>
          <target state="translated">기본 / 복제본 (일부 데이터베이스에서는 마스터 / 슬레이브라고 함)을 사용하여 다중 데이터베이스 구성을 테스트하는 경우 테스트 데이터베이스 작성 전략에 문제가 있습니다. 테스트 데이터베이스를 만들면 복제가 수행되지 않으므로 기본 데이터베이스에서 생성 된 데이터는 복제본에 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7a5e6b4700226ab4c476a2e5c6dee860df741084" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re upgrading from South, this is basically the South pattern as an operation - one or two methods for forwards and backwards, with an ORM and schema operations available. Most of the time, you should be able to translate the &lt;code&gt;orm.Model&lt;/code&gt; or &lt;code&gt;orm[&quot;appname&quot;, &quot;Model&quot;]&lt;/code&gt; references from South directly into &lt;code&gt;apps.get_model(&quot;appname&quot;, &quot;Model&quot;)&lt;/code&gt; references here and leave most of the rest of the code unchanged for data migrations. However, &lt;code&gt;apps&lt;/code&gt; will only have references to models in the current app unless migrations in other apps are added to the migration&amp;rsquo;s dependencies.</source>
          <target state="translated">South에서 업그레이드하는 경우 이는 기본적으로 South 패턴이며, ORM 및 스키마 작업을 사용할 수있는 하나 또는 두 개의 앞뒤로 방법입니다. 대부분의 경우 &lt;code&gt;orm.Model&lt;/code&gt; 의 orm.Model 또는 &lt;code&gt;orm[&quot;appname&quot;, &quot;Model&quot;]&lt;/code&gt; 참조를 여기에서 &lt;code&gt;apps.get_model(&quot;appname&quot;, &quot;Model&quot;)&lt;/code&gt; 참조 로 직접 변환 하고 대부분을 남겨 둘 수 있습니다. 나머지 코드는 데이터 마이그레이션을 위해 변경되지 않았습니다. 그러나 &lt;code&gt;apps&lt;/code&gt; 다른 애플리케이션의 마이그레이션은 마이그레이션의 종속성을 추가하지 않는 한은 현재 응용 프로그램의 모델에 대한 참조를해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd100d30c9413b8bcf0a641346e7fe8e8d78916b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re upgrading through more than one feature version (e.g. 2.0 to 2.2), it&amp;rsquo;s usually easier to upgrade through each feature release incrementally (2.0 to 2.1 to 2.2) rather than to make all the changes for each feature release at once. For each feature release, use the latest patch release (e.g. for 2.1, use 2.1.15).</source>
          <target state="translated">둘 이상의 기능 버전 (예 : 2.0-2.2)을 통해 업그레이드하는 경우 각 기능 릴리스에 대한 모든 변경 사항을 한 번에 변경하지 않고 일반적으로 각 기능 릴리스를 통해 점진적으로 업그레이드하는 것이 더 쉽습니다 (2.0-2.1-2.2). 각 기능 릴리스마다 최신 패치 릴리스를 사용하십시오 (예 : 2.1의 경우 2.1.15 사용).</target>
        </trans-unit>
        <trans-unit id="c0a30d48cf1c939c8e9ed571529055414a3d67b6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &amp;ldquo;Rock &amp;rsquo;n&amp;rsquo; roll&amp;rdquo; in a project called &lt;code&gt;anthology&lt;/code&gt;, but you want it to show up as &amp;ldquo;Jazz Manouche&amp;rdquo; instead, you can provide your own configuration:</source>
          <target state="translated">&lt;code&gt;anthology&lt;/code&gt; 라는 프로젝트에서 &quot;Rock ' n'roll&quot;을 사용하지만 대신 &quot;Jazz Manouche&quot;로 표시하려는 경우 고유 한 구성을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="481f4f1b70a903de3297e01b947b9f2c4871b7fa" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;../topics/http/sessions#cached-sessions-backend&quot;&gt;cache-based session storage&lt;/a&gt;, this selects the cache to use.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;../topics/http/sessions#cached-sessions-backend&quot;&gt;캐시 기반의 세션 스토리지를&lt;/a&gt; ,이 선택은 캐시를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="aeeb2f9285f5f42da4ca38d644da7b9668702942" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using AngularJS 1.1.3 and newer, it&amp;rsquo;s sufficient to configure the &lt;code&gt;$http&lt;/code&gt; provider with the cookie and header names:</source>
          <target state="translated">AngularJS 1.1.3 이상을 사용하는 경우 쿠키 및 헤더 이름으로 &lt;code&gt;$http&lt;/code&gt; 공급자 를 구성하면 충분 합니다.</target>
        </trans-unit>
        <trans-unit id="b71dafc0a9ca6cc7e9afc06dfb5f48ffeac44f3e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Django&amp;rsquo;s &lt;a href=&quot;testing/index&quot;&gt;testing framework&lt;/a&gt; to test database queries, Django will need permission to create a test database.</source>
          <target state="translated">Django의 &lt;a href=&quot;testing/index&quot;&gt;테스트 프레임 워크&lt;/a&gt; 를 사용하여 데이터베이스 쿼리를 테스트하는 경우 Django는 테스트 데이터베이스를 만들 수있는 권한이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9944ee7dd34baf50152dd56fcdc484819ead5962" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Linux or MacOS and install both &lt;a href=&quot;https://pypi.org/project/pywatchman/&quot;&gt;pywatchman&lt;/a&gt; and the &lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; service, kernel signals will be used to autoreload the server (rather than polling file modification timestamps each second). This offers better performance on large projects, reduced response time after code changes, more robust change detection, and a reduction in power usage. Django supports &lt;code&gt;pywatchman&lt;/code&gt; 1.2.0 and higher.</source>
          <target state="translated">Linux 또는 MacOS를 사용하고 &lt;a href=&quot;https://pypi.org/project/pywatchman/&quot;&gt;pywatchman&lt;/a&gt; 과 &lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; 서비스를 모두 설치하는 경우 커널 신호를 사용하여 서버를 자동으로 다시로드합니다 (매초마다 파일 수정 타임 스탬프를 폴링하지 않음). 이를 통해 대규모 프로젝트에서 더 나은 성능, 코드 변경 후 응답 시간 단축,보다 강력한 변경 감지 및 전력 사용량 감소를 제공합니다. Django는 &lt;code&gt;pywatchman&lt;/code&gt; 1.2.0 이상을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="4e53baf0d0f56b77511625581c99cc7d9191b439" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Memcached, consider using &lt;a href=&quot;../../topics/http/sessions#cached-sessions-backend&quot;&gt;cached sessions&lt;/a&gt; to improve performance.</source>
          <target state="translated">Memcached를 사용하는 경우 &lt;a href=&quot;../../topics/http/sessions#cached-sessions-backend&quot;&gt;캐시 된 세션&lt;/a&gt; 을 사용하여 성능을 향상시키는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5123ae3f1eac47dcb57f53aa5e34a747a949d8e9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL and this value &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; start with a forward slash, then this value is assumed to be the host.</source>
          <target state="translated">MySQL을 사용 중이고이 값 &lt;em&gt;이&lt;/em&gt; 슬래시로 시작 &lt;em&gt;하지 않으면&lt;/em&gt; 이 값이 호스트 인 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="eaed7a6a6ad7f54113143af5fee4474f0a7b717f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL or MariaDB, the following checks will be performed:</source>
          <target state="translated">MySQL 또는 MariaDB를 사용하는 경우 다음 검사가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="5c1359456437f291b8b48eb0bceaeca46fd2af3d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL or MariaDB, you&amp;rsquo;ll need a &lt;a href=&quot;../ref/databases#mysql-db-api-drivers&quot;&gt;DB API driver&lt;/a&gt; like &lt;code&gt;mysqlclient&lt;/code&gt;. See &lt;a href=&quot;../ref/databases#mysql-notes&quot;&gt;notes for the MySQL backend&lt;/a&gt; for details.</source>
          <target state="translated">MySQL 또는 MariaDB를 사용하는 경우 &lt;code&gt;mysqlclient&lt;/code&gt; 와 같은 &lt;a href=&quot;../ref/databases#mysql-db-api-drivers&quot;&gt;DB API 드라이버&lt;/a&gt; 가 필요합니다 . 자세한 내용 &lt;a href=&quot;../ref/databases#mysql-notes&quot;&gt;은 MySQL 백엔드 노트를&lt;/a&gt; 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="bf9bdf3f5fa10aff2cab1f17aaffdcca0b623596" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL, the following checks will be performed:</source>
          <target state="translated">MySQL을 사용하는 경우 다음 검사가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="228adccc2a150114c8cffe4456bca9a36f683fa7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you&amp;rsquo;re using. (By &amp;ldquo;table types,&amp;rdquo; we mean something like &amp;ldquo;InnoDB&amp;rdquo; or &amp;ldquo;MyISAM&amp;rdquo;.) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-syntax-transactions.html&quot;&gt;information on MySQL transactions&lt;/a&gt;.</source>
          <target state="translated">MySQL을 사용하는 경우 테이블이 트랜잭션을 지원하거나 지원하지 않을 수 있습니다. MySQL 버전과 사용중인 테이블 유형에 따라 다릅니다. &quot;테이블 유형&quot;은 &quot;InnoDB&quot;또는 &quot;MyISAM&quot;과 같은 것을 의미합니다. MySQL 트랜잭션 특성은이 기사의 범위를 벗어나지 만 MySQL 사이트에는 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-syntax-transactions.html&quot;&gt;MySQL 트랜잭션에 대한 정보가 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a9a0fd540cf9eba9010f1a43a66ed09c582deee1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Oracle, you&amp;rsquo;ll need a copy of &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt;, but please read the &lt;a href=&quot;../ref/databases#oracle-notes&quot;&gt;notes for the Oracle backend&lt;/a&gt; for details regarding supported versions of both Oracle and &lt;code&gt;cx_Oracle&lt;/code&gt;.</source>
          <target state="translated">Oracle을 사용하는 경우 &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; 사본이 필요 하지만 지원되는 Oracle 및 &lt;code&gt;cx_Oracle&lt;/code&gt; 버전에 대한 자세한 내용 &lt;a href=&quot;../ref/databases#oracle-notes&quot;&gt;은 Oracle 백엔드&lt;/a&gt; 의 참고 사항을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="92d54d481c5d03a9b0ca88a5f50b8ed2498b6ef7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, Django provides &lt;a href=&quot;../../ref/contrib/postgres/search&quot;&gt;a selection of database specific tools&lt;/a&gt; to allow you to leverage more complex querying options. Other databases have different selections of tools, possibly via plugins or user-defined functions. Django doesn&amp;rsquo;t include any support for them at this time. We&amp;rsquo;ll use some examples from PostgreSQL to demonstrate the kind of functionality databases may have.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 Django는 보다 복잡한 쿼리 옵션을 활용할 수 &lt;a href=&quot;../../ref/contrib/postgres/search&quot;&gt;있는 다양한 데이터베이스 관련 도구&lt;/a&gt; 를 제공합니다. 다른 데이터베이스는 플러그인 또는 사용자 정의 함수를 통해 다른 도구를 선택할 수 있습니다. Django는 현재 해당 기능을 지원하지 않습니다. PostgreSQL의 몇 가지 예를 사용하여 데이터베이스가 가질 수있는 기능의 종류를 보여줄 것입니다.</target>
        </trans-unit>
        <trans-unit id="2740b6405cd59234c5607e21afdcdaccce94c79c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, by default (empty &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;), the connection to the database is done through UNIX domain sockets (&amp;lsquo;local&amp;rsquo; lines in &lt;code&gt;pg_hba.conf&lt;/code&gt;). If your UNIX domain socket is not in the standard location, use the same value of &lt;code&gt;unix_socket_directory&lt;/code&gt; from &lt;code&gt;postgresql.conf&lt;/code&gt;. If you want to connect through TCP sockets, set &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; to &amp;lsquo;localhost&amp;rsquo; or &amp;lsquo;127.0.0.1&amp;rsquo; (&amp;lsquo;host&amp;rsquo; lines in &lt;code&gt;pg_hba.conf&lt;/code&gt;). On Windows, you should always define &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;, as UNIX domain sockets are not available.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 기본적으로 (빈 &lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; ) 데이터베이스에 대한 연결은 UNIX 도메인 소켓 ( &lt;code&gt;pg_hba.conf&lt;/code&gt; 의 'local'줄)을 통해 수행됩니다 . 유닉스 도메인 소켓은 표준 위치에없는 경우, 동일한 값을 사용 &lt;code&gt;unix_socket_directory&lt;/code&gt; 을 에서 &lt;code&gt;postgresql.conf&lt;/code&gt; 의 . TCP 소켓을 통해 연결하려면 &lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; 를 'localhost'또는 '127.0.0.1'( &lt;code&gt;pg_hba.conf&lt;/code&gt; 의 'host'줄)로 설정 하십시오. Windows에서는 UNIX 도메인 소켓을 사용할 수 없으므로 항상 &lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; 를&lt;/a&gt; 정의해야 합니다.</target>
        </trans-unit>
        <trans-unit id="dd5ae27cbc04f18050df1d431f5fb25a9fbe2c53" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, the sequence associated with the primary key might need to be updated; see &lt;a href=&quot;../databases#manually-specified-autoincrement-pk&quot;&gt;Manually-specifying values of auto-incrementing primary keys&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 기본 키와 관련된 시퀀스를 업데이트해야 할 수 있습니다. &lt;a href=&quot;../databases#manually-specified-autoincrement-pk&quot;&gt;자동 증가 기본 키 값 수동 지정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17609ee45cfd691775da7000d116f264e7657fcb" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, you&amp;rsquo;ll need the &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; package. Refer to the &lt;a href=&quot;../ref/databases#postgresql-notes&quot;&gt;PostgreSQL notes&lt;/a&gt; for further details.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 패키지 가 필요합니다 . 자세한 내용은 &lt;a href=&quot;../ref/databases#postgresql-notes&quot;&gt;PostgreSQL 노트&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="81dfb5f0dc2391f3e82b1355d3ca6abc305f8d47" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level &amp;ndash; database level key constraints prevent the creation of relations that can&amp;rsquo;t be validated.</source>
          <target state="translated">InnoDB와 함께 Postgres, Oracle 또는 MySQL을 사용하는 경우 데이터베이스 무결성 수준에서 적용됩니다. 데이터베이스 수준 키 제약 조건으로 확인할 수없는 관계를 만들 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="65a65316c0bd24040960220c94a678789b0f6a2a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using SQLite you might want to read the &lt;a href=&quot;../ref/databases#sqlite-notes&quot;&gt;SQLite backend notes&lt;/a&gt;.</source>
          <target state="translated">SQLite를 사용하는 경우 &lt;a href=&quot;../ref/databases#sqlite-notes&quot;&gt;SQLite 백엔드 노트&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="334c33a340c62565a0dda48701d8cc481ae24464" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using SQLite, you don&amp;rsquo;t need to create anything beforehand - the database file will be created automatically when it is needed.</source>
          <target state="translated">SQLite를 사용하는 경우 사전에 아무것도 만들 필요가 없습니다. 데이터베이스 파일은 필요할 때 자동으로 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="dd02ebc4205a2c5d09b790615c39301f2afffdb4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Windows and need to install the GNU gettext utilities so &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; works see &lt;a href=&quot;#gettext-on-windows&quot;&gt;gettext on Windows&lt;/a&gt; for more information.</source>
          <target state="translated">Windows를 사용 &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; &lt;/a&gt; GNU gettext 유틸리티를 설치해야 django-admin compilemessages가 작동 하면 자세한 정보 &lt;a href=&quot;#gettext-on-windows&quot;&gt;는 Windows의 gettext&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7c2566945d2ca024ddf78f5b4ec709f5e3b7bae3" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Windows and need to install the GNU gettext utilities so &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; works, see &lt;a href=&quot;#gettext-on-windows&quot;&gt;gettext on Windows&lt;/a&gt; for more information.</source>
          <target state="translated">Windows를 사용 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 작동 하도록 GNU gettext 유틸리티를 설치해야하는 경우 자세한 정보 &lt;a href=&quot;#gettext-on-windows&quot;&gt;는 Windows의 gettext&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46eb70b42871e7bacf59440c3bae92eb1b4ae4ef" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a &lt;code&gt;QuerySet&lt;/code&gt; with a very large number of items, requesting high page numbers might be slow on some databases, because the resulting &lt;code&gt;LIMIT&lt;/code&gt;/&lt;code&gt;OFFSET&lt;/code&gt; query needs to count the number of &lt;code&gt;OFFSET&lt;/code&gt; records which takes longer as the page number gets higher.</source>
          <target state="translated">매우 많은 수의 항목과 함께 &lt;code&gt;QuerySet&lt;/code&gt; 을 사용하는 경우 결과 &lt;code&gt;LIMIT&lt;/code&gt; / &lt;code&gt;OFFSET&lt;/code&gt; 쿼리 는 페이지 번호가 높아질수록 시간이 오래 걸리는 &lt;code&gt;OFFSET&lt;/code&gt; 레코드 수를 계산해야하기 때문에 일부 데이터베이스에서 높은 페이지 번호를 요청하는 것이 느려질 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="70b3d5d4568f4fd39cfd395329f1734d8e532b16" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a cache, connection parameters may be different in development and in production. Django defaults to per-process &lt;a href=&quot;../../topics/cache#local-memory-caching&quot;&gt;local-memory caching&lt;/a&gt; which may not be desirable.</source>
          <target state="translated">캐시를 사용하는 경우 연결 매개 변수는 개발 및 프로덕션에서 다를 수 있습니다. Django 는 바람직하지 않은 프로세스 별 &lt;a href=&quot;../../topics/cache#local-memory-caching&quot;&gt;로컬 메모리 캐싱&lt;/a&gt; 을 기본값으로합니다 .</target>
        </trans-unit>
        <trans-unit id="fc3ed93f28f451dc5be072e0a09e76c785745981" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a database backend that uses a different SQL syntax for a certain function, you can add support for it by monkey patching a new method onto the function&amp;rsquo;s class.</source>
          <target state="translated">특정 함수에 대해 다른 SQL 구문을 사용하는 데이터베이스 백엔드를 사용하는 경우 함수의 클래스에 새 메소드를 패치하여 원숭이를 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42525c03b5426673012c5e443de921b7d2a48312" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a database besides SQLite, make sure you&amp;rsquo;ve created a database by this point. Do that with &amp;ldquo;&lt;code&gt;CREATE DATABASE database_name;&lt;/code&gt;&amp;rdquo; within your database&amp;rsquo;s interactive prompt.</source>
          <target state="translated">SQLite 이외의 데이터베이스를 사용하는 경우이 시점에서 데이터베이스를 작성했는지 확인하십시오. &amp;ldquo; &lt;code&gt;CREATE DATABASE database_name;&lt;/code&gt; &amp;rdquo;를 데이터베이스의 대화식 프롬프트에서</target>
        </trans-unit>
        <trans-unit id="3bfd941888efa436ecc6ede3006e996113f463ad" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend&amp;rsquo;s &lt;code&gt;authenticate()&lt;/code&gt; method.</source>
          <target state="translated">다른 인증 백엔드를 사용하는 경우이 방법에는 다른 자격 증명이 필요할 수 있습니다. 백엔드의 &lt;code&gt;authenticate()&lt;/code&gt; 메서드에 필요한 자격 증명이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="05764d13eeb945fede1a5e8927e7f8a5ab301058" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a hosting service and can&amp;rsquo;t change your server&amp;rsquo;s default storage engine, you have a couple of options.</source>
          <target state="translated">호스팅 서비스를 사용하고 있고 서버의 기본 저장소 엔진을 변경할 수없는 경우 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a353593d2d8e5b736818eb171577ee093269dde" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using an &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;CIText&lt;/code&gt; fields, you must add &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, otherwise field values will appear as strings like &lt;code&gt;'{thoughts,django}'&lt;/code&gt;.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;CIText&lt;/code&gt; 의 필드를, 당신은 추가해야합니다 &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; 당신의 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 그렇지 않으면 필드 값이 같은 문자열로 나타납니다, &lt;code&gt;'{thoughts,django}'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61e7c53b9fd063f957398fb1f4320dfd4e2a9584" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using an unofficial 3rd party backend, please consult the documentation provided for any additional requirements.</source>
          <target state="translated">비공식 타사 백엔드를 사용하는 경우 추가 요구 사항은 제공된 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fb1e7f7e52bbcd15afd7dc412eee86df9c3f70b8" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using components of Django &amp;ldquo;standalone&amp;rdquo; &amp;ndash; for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data &amp;ndash; there&amp;rsquo;s one more step you&amp;rsquo;ll need in addition to configuring settings.</source>
          <target state="translated">Django&amp;ldquo;독립형&amp;rdquo;구성 요소를 사용하는 경우 (예 : 일부 Django 템플릿을로드하고 렌더링하거나 ORM을 사용하여 데이터를 가져 오는 Python 스크립트 작성) 설정 구성 외에 추가 단계가 필요합니다. .</target>
        </trans-unit>
        <trans-unit id="6c2160405a6776b9843f65c896f4c6a76b70b42b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using file-based session storage, this sets the directory in which Django will store session data. When the default value (&lt;code&gt;None&lt;/code&gt;) is used, Django will use the standard temporary directory for the system.</source>
          <target state="translated">파일 기반 세션 스토리지를 사용하는 경우 Django가 세션 데이터를 저장할 디렉토리를 설정합니다. 기본값 ( &lt;code&gt;None&lt;/code&gt; )을 사용하면 Django는 시스템의 표준 임시 디렉토리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bdf2864962c6854deb565415dc128e418e85409e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using middleware, you can do that. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the response middleware, it&amp;rsquo;s guaranteed to execute after template rendering has taken place.</source>
          <target state="translated">미들웨어를 사용하는 경우 그렇게 할 수 있습니다. 미들웨어는보기 종료시 응답을 처리 할 수있는 여러 기회를 제공합니다. 응답 미들웨어에 동작을 넣으면 템플릿 렌더링이 실행 된 후에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="176b3e53bd5619ca954a6de51573ff4145217e13" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using pagination, you can adapt the &lt;a href=&quot;../../topics/pagination#using-paginator-in-view&quot;&gt;example template from the pagination docs&lt;/a&gt;. Change instances of &lt;code&gt;contacts&lt;/code&gt; in that example template to &lt;code&gt;page_obj&lt;/code&gt;.</source>
          <target state="translated">페이지 매김을 사용 &lt;a href=&quot;../../topics/pagination#using-paginator-in-view&quot;&gt;하는 경우 페이지 매김 문서에서 예제 템플릿을&lt;/a&gt; 조정할 수 있습니다 . 해당 예제 템플릿 의 &lt;code&gt;contacts&lt;/code&gt; 인스턴스 를 &lt;code&gt;page_obj&lt;/code&gt; 로 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="38126e95e0083d43b4efeedfd50bff85a4f91dfd" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; backend, each session is a normal Django model. The &lt;code&gt;Session&lt;/code&gt; model is defined in &lt;code&gt;django/contrib/sessions/models.py&lt;/code&gt;. Because it&amp;rsquo;s a normal model, you can access sessions using the normal Django database API:</source>
          <target state="translated">&lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; 백엔드를 사용하는 경우 각 세션은 일반적인 장고 모델입니다. &lt;code&gt;Session&lt;/code&gt; 모델에 정의되어 &lt;code&gt;django/contrib/sessions/models.py&lt;/code&gt; . 일반적인 모델이므로 일반적인 Django 데이터베이스 API를 사용하여 세션에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50d514d3dd0b830cdb2e92c3b229482ff305cf07" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the context processor, your template should be rendered with a &lt;code&gt;RequestContext&lt;/code&gt;. Otherwise, ensure &lt;code&gt;messages&lt;/code&gt; is available to the template context.</source>
          <target state="translated">컨텍스트 프로세서를 사용하는 경우 템플릿은 &lt;code&gt;RequestContext&lt;/code&gt; 로 렌더링되어야합니다 . 그렇지 않으면 템플릿 컨텍스트에서 &lt;code&gt;messages&lt;/code&gt; 를 사용할 수 있는지 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="526e48b58228f65bfc33a8bdc8a0463e6592108c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a &lt;code&gt;{% for %}&lt;/code&gt; loop:</source>
          <target state="translated">각 양식 필드에 동일한 HTML을 사용하는 경우 &lt;code&gt;{% for %}&lt;/code&gt; 루프 를 사용하여 각 필드를 차례로 반복하여 중복 코드를 줄일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71b2f6560e3b81f86c2f6fbf8c0b3fd58fd8164f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re wrestling with a particular problem, start with the &lt;a href=&quot;#time-zones-faq&quot;&gt;time zone FAQ&lt;/a&gt;.</source>
          <target state="translated">특정 문제로 씨름하고 있다면 &lt;a href=&quot;#time-zones-faq&quot;&gt;시간대 FAQ로&lt;/a&gt; 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="033bd6d75929d6d7705838d0e26ce74b89b3cf6f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a pluggable application that&amp;rsquo;s expected to work independently of the value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt;, you may find &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt; useful. This function returns the current date and time as a naive datetime when &lt;code&gt;USE_TZ = False&lt;/code&gt; and as an aware datetime when &lt;code&gt;USE_TZ = True&lt;/code&gt;. You can add or subtract &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;datetime.timedelta&lt;/code&gt;&lt;/a&gt; as needed.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 값과 독립적으로 작동 할 것으로 예상되는 플러그 가능 응용 프로그램을 작성하는 경우 &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt; 유용 할 수 있습니다 . 이 함수는 현재 날짜와 시간을 &lt;code&gt;USE_TZ = False&lt;/code&gt; 순진한 날짜 시간으로 그리고 &lt;code&gt;USE_TZ = True&lt;/code&gt; 경우 인식하는 날짜 시간으로 반환합니다 . 필요에 따라 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;datetime.timedelta&lt;/code&gt; &lt;/a&gt; 를 더하거나 뺄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b9ad3f8840feee3141c8778e1865bfb234bef75" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a reusable app (or other piece of code) and want to include messaging functionality, but don&amp;rsquo;t want to require your users to enable it if they don&amp;rsquo;t want to, you may pass an additional keyword argument &lt;code&gt;fail_silently=True&lt;/code&gt; to any of the &lt;code&gt;add_message&lt;/code&gt; family of methods. For example:</source>
          <target state="translated">재사용 가능한 앱 (또는 다른 코드)을 작성하고 메시징 기능을 포함하고 싶지만 사용자가 원하지 않는 경우이를 사용하도록 설정하지 않으려면 추가 키워드 인수 &lt;code&gt;fail_silently=True&lt;/code&gt; 전달할 수 있습니다 = &lt;code&gt;add_message&lt;/code&gt; 계열 메소드 중 하나에 해당 합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="84e127f1322ee32bfece7dc5d4283b6cce1c3d07" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a template filter that only expects a string as the first argument, you should use the decorator &lt;code&gt;stringfilter&lt;/code&gt;. This will convert an object to its string value before being passed to your function:</source>
          <target state="translated">문자열을 첫 번째 인수로만 예상하는 템플릿 필터를 작성하는 경우 데코레이터 &lt;code&gt;stringfilter&lt;/code&gt; 를 사용해야합니다 . 함수에 전달되기 전에 객체를 문자열 값으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="62e93f9276c7d2bf03dab03afbe7a0d01da88a4a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The &lt;code&gt;is_multipart()&lt;/code&gt; method tells you whether the form requires multipart encoding for submission:</source>
          <target state="translated">재사용 가능한보기 또는 템플릿을 작성하는 경우 양식이 여러 부분으로 구성된 양식인지 여부를 미리 알 수 없습니다. &lt;code&gt;is_multipart()&lt;/code&gt; 메소드는 양식을 제출 다중 인코딩을 필요로하는지 여부를 알려줍니다 :</target>
        </trans-unit>
        <trans-unit id="0b3ccbce78a9deb2e8380cbbbf0c3e8d425150d4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing some code that must handle an unknown model, for example, in a third-party app that implements a generic view, use this manager (or &lt;a href=&quot;#django.db.models.Model._base_manager&quot;&gt;&lt;code&gt;_base_manager&lt;/code&gt;&lt;/a&gt;) rather than assuming the model has an &lt;code&gt;objects&lt;/code&gt; manager.</source>
          <target state="translated">예를 들어 일반 뷰를 구현하는 타사 앱에서 알 수없는 모델을 처리해야하는 코드를 작성하는 경우 모델에 &lt;code&gt;objects&lt;/code&gt; 관리자 가 있다고 가정하는 대신 이 관리자 (또는 &lt;a href=&quot;#django.db.models.Model._base_manager&quot;&gt; &lt;code&gt;_base_manager&lt;/code&gt; &lt;/a&gt; )를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ffa49a02c217a153d3911b777d92a70dad025527" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve activated the automatic Django admin interface, you should see a &amp;ldquo;Flatpages&amp;rdquo; section on the admin index page. Edit flatpages as you edit any other object in the system.</source>
          <target state="translated">자동 Django 관리 인터페이스를 활성화 한 경우 관리자 색인 페이지에 &quot;Flatpages&quot;섹션이 표시됩니다. 시스템에서 다른 객체를 편집 할 때 플랫 페이지를 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="8c91814cc038e9087397b1c9d79e06cb53c2998e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve activated the automatic Django admin interface, you should see a &amp;ldquo;Redirects&amp;rdquo; section on the admin index page. Edit redirects as you edit any other object in the system.</source>
          <target state="translated">자동 Django 관리 인터페이스를 활성화 한 경우 관리자 색인 페이지에 &quot;리디렉션&quot;섹션이 표시됩니다. 시스템에서 다른 객체를 편집 할 때 리디렉션을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="746003a32ff1823f7c12c2c3009e4bcdbdada474" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt;&lt;code&gt;date()&lt;/code&gt;&lt;/a&gt; method. You also consider that a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; is a lot like a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;, except that it&amp;rsquo;s less accurate.</source>
          <target state="translated">항상 순진한 datetimes를 사용한 경우 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt; &lt;code&gt;date()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 datetime을 날짜로 변환 할 수 있다고 생각할 수 있습니다 . 또한 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 가 덜 정확하다는 점을 제외하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 는 datetime 과 매우 비슷 하다고 생각합니다 .</target>
        </trans-unit>
        <trans-unit id="510f1ae50ede1300d4b2693ad8c71631f7d7fb86" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve customized the &lt;a href=&quot;../../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, &lt;a href=&quot;../../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../middleware#django.contrib.messages.middleware.MessageMiddleware&quot;&gt;&lt;code&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/code&gt;&lt;/a&gt; must be included.</source>
          <target state="translated">&lt;a href=&quot;../../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정을 사용자 정의한 경우 &lt;a href=&quot;../../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../middleware#django.contrib.messages.middleware.MessageMiddleware&quot;&gt; &lt;code&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/code&gt; &lt;/a&gt; 가 포함되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="46537cc51b7d74f1917135d14f86f7f048e20457" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve never had to deal with tests before, they can look a little hard to write at first glance. Fortunately, testing is a &lt;em&gt;very&lt;/em&gt; big subject in computer programming, so there&amp;rsquo;s lots of information out there:</source>
          <target state="translated">이전에 테스트를 다뤄 본 적이 없다면 언뜻보기에는 조금 어려워 보일 수 있습니다. 다행히 테스트는 컴퓨터 프로그래밍에서 &lt;em&gt;매우&lt;/em&gt; 큰 주제이므로 많은 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1fcac0f08f188a490cc866525da1cb739eb8667" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve saved an instance to one database, it might be tempting to use &lt;code&gt;save(using=...)&lt;/code&gt; as a way to migrate the instance to a new database. However, if you don&amp;rsquo;t take appropriate steps, this could have some unexpected consequences.</source>
          <target state="translated">인스턴스를 하나의 데이터베이스에 저장 한 경우 인스턴스를 새 데이터베이스로 마이그레이션하는 방법으로 &lt;code&gt;save(using=...)&lt;/code&gt; 를 사용 하고 싶을 수 있습니다 . 그러나 적절한 단계를 수행하지 않으면 예기치 않은 결과가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e02d2ccf5c1a7f35c124bfd1c3140db6fcf906af" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve used the &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command you&amp;rsquo;ve probably already seen &lt;code&gt;dependencies&lt;/code&gt; in action because auto-created migrations have this defined as part of their creation process.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 명령을 사용한 경우 자동 생성 된 마이그레이션에서 생성 프로세스의 일부로 정의 되었기 때문에 이미 &lt;code&gt;dependencies&lt;/code&gt; 있는 것으로 보입니다 .</target>
        </trans-unit>
        <trans-unit id="57c4c61903f21939d1b79448096a5c411639cc93" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; inherits from &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; or implements its own &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt; method, authenticated sessions will include the hash returned by this function. In the &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; case, this is an HMAC of the password field. Django verifies that the hash in the session for each request matches the one that&amp;rsquo;s computed during the request. This allows a user to log out all of their sessions by changing their password.</source>
          <target state="translated">귀하의 경우 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 의&lt;/a&gt; 에서 상속 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt; 또는 구현 자체 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt; &lt;code&gt;get_session_auth_hash()&lt;/code&gt; &lt;/a&gt; 메소드는 인증 된 세션이 함수에 의해 반환되는 해시를 포함 할 것이다. 에서 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; 의&lt;/a&gt; 경우,이 암호 필드의 HMAC이다. Django는 각 요청에 대한 세션의 해시가 요청 중에 계산 된 해시와 일치하는지 확인합니다. 이를 통해 사용자는 비밀번호를 변경하여 모든 세션을 로그 아웃 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff6fb60a475d1cd1de37b15f96dc6b92a8c3143c" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;ModelForm&lt;/code&gt; and &lt;code&gt;ModelAdmin&lt;/code&gt; both define an &lt;code&gt;exclude&lt;/code&gt; option then &lt;code&gt;ModelAdmin&lt;/code&gt; takes precedence:</source>
          <target state="translated">귀하의 경우 &lt;code&gt;ModelForm&lt;/code&gt; 및 &lt;code&gt;ModelAdmin&lt;/code&gt; 가 정의 둘 모두는 &lt;code&gt;exclude&lt;/code&gt; 다음 옵션을 &lt;code&gt;ModelAdmin&lt;/code&gt; 이 우선합니다 :</target>
        </trans-unit>
        <trans-unit id="eaae8d7419df5dae5e0d1df980784410834abbbb" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;RunPython&lt;/code&gt; or &lt;code&gt;RunSQL&lt;/code&gt; operation only affects one model, it&amp;rsquo;s good practice to pass &lt;code&gt;model_name&lt;/code&gt; as a hint to make it as transparent as possible to the router. This is especially important for reusable and third-party apps.</source>
          <target state="translated">귀하의 경우 &lt;code&gt;RunPython&lt;/code&gt; 또는 &lt;code&gt;RunSQL&lt;/code&gt; 작업이 하나의 모델에 영향을 미치는, 그것을 전달하는 좋은 습관이다 &lt;code&gt;model_name&lt;/code&gt; 라우터에 가능한 한 투명하게 그것을 만들 수있는 힌트로는. 이는 재사용 가능한 타사 앱에 특히 중요합니다.</target>
        </trans-unit>
        <trans-unit id="17d97886edb51352b4b876638aac3d9f4f3ca528" translate="yes" xml:space="preserve">
          <source>If your Django app is behind a proxy, though, the proxy may be &amp;ldquo;swallowing&amp;rdquo; whether the original request uses HTTPS or not. If there is a non-HTTPS connection between the proxy and Django then &lt;code&gt;is_secure()&lt;/code&gt; would always return &lt;code&gt;False&lt;/code&gt; &amp;ndash; even for requests that were made via HTTPS by the end user. In contrast, if there is an HTTPS connection between the proxy and Django then &lt;code&gt;is_secure()&lt;/code&gt; would always return &lt;code&gt;True&lt;/code&gt; &amp;ndash; even for requests that were made originally via HTTP.</source>
          <target state="translated">그러나 Django 앱이 프록시 뒤에있는 경우 프록시는 원래 요청이 HTTPS를 사용하는지 여부를 &quot;삼키는&quot;것일 수 있습니다. 프록시와 Django간에 비 HTTPS 연결이있는 경우 &lt;code&gt;is_secure()&lt;/code&gt; 는 최종 사용자가 HTTPS를 통해 요청한 경우에도 항상 &lt;code&gt;False&lt;/code&gt; 를 반환 합니다. 반대로 프록시와 Django간에 HTTPS 연결이 있으면 &lt;code&gt;is_secure()&lt;/code&gt; 는 원래 HTTP를 통해 요청한 경우에도 항상 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5497b62e97032ff943fb4f10c5f320b8f45dac4e" translate="yes" xml:space="preserve">
          <source>If your GDAL library is in a non-standard location, or you don&amp;rsquo;t want to modify the system&amp;rsquo;s library path then the &lt;a href=&quot;../gdal#std:setting-GDAL_LIBRARY_PATH&quot;&gt;&lt;code&gt;GDAL_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt; setting may be added to your Django settings file with the full path to the GDAL library. For example:</source>
          <target state="translated">GDAL 라이브러리가 비표준 위치에 있거나 시스템의 라이브러리 경로를 수정하지 않으려는 경우 &lt;a href=&quot;../gdal#std:setting-GDAL_LIBRARY_PATH&quot;&gt; &lt;code&gt;GDAL_LIBRARY_PATH&lt;/code&gt; &lt;/a&gt; 설정이 GDAL 라이브러리의 전체 경로와 함께 Django 설정 파일에 추가 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6656b0bbfc9f0cf5bcaba4af9e2783f344122be3" translate="yes" xml:space="preserve">
          <source>If your GEOS library is in a non-standard location, or you don&amp;rsquo;t want to modify the system&amp;rsquo;s library path then the &lt;a href=&quot;../geos#std:setting-GEOS_LIBRARY_PATH&quot;&gt;&lt;code&gt;GEOS_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt; setting may be added to your Django settings file with the full path to the GEOS C library. For example:</source>
          <target state="translated">GEOS 라이브러리가 비표준 위치에 있거나 시스템의 라이브러리 경로를 수정하지 않으려 는 경우 GEOS C 라이브러리의 전체 경로와 함께 &lt;a href=&quot;../geos#std:setting-GEOS_LIBRARY_PATH&quot;&gt; &lt;code&gt;GEOS_LIBRARY_PATH&lt;/code&gt; &lt;/a&gt; 설정이 Django 설정 파일에 추가 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9503b6ac9885ede72752befeddae5b57e6923b42" translate="yes" xml:space="preserve">
          <source>If your MySQL setup does &lt;em&gt;not&lt;/em&gt; support transactions, then Django will always function in autocommit mode: statements will be executed and committed as soon as they&amp;rsquo;re called. If your MySQL setup &lt;em&gt;does&lt;/em&gt; support transactions, Django will handle transactions as explained in this document.</source>
          <target state="translated">MySQL 설정이 트랜잭션을 지원 하지 &lt;em&gt;않으면&lt;/em&gt; Django는 항상 자동 커밋 모드에서 작동합니다. 명령문은 호출되는 즉시 실행되고 커밋됩니다. MySQL 설정 &lt;em&gt;이&lt;/em&gt; 트랜잭션을 지원하는 경우 Django는이 문서에 설명 된대로 트랜잭션을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="7357f3c6b27ecc3b358d99481fc74b66e7e2445c" translate="yes" xml:space="preserve">
          <source>If your app already has models and database tables, and doesn&amp;rsquo;t have migrations yet (for example, you created it against a previous Django version), you&amp;rsquo;ll need to convert it to use migrations by running:</source>
          <target state="translated">앱에 이미 모델과 데이터베이스 테이블이 있고 아직 마이그레이션이없는 경우 (예 : 이전 Django 버전에 대해 생성 한 경우) 다음을 실행하여 마이그레이션을 사용하도록 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a6f0ecf7e5650fbc70efecf351f9f0234f1b8a8a" translate="yes" xml:space="preserve">
          <source>If your app is tested with multiple user models, using &lt;code&gt;@override_settings(AUTH_USER_MODEL=...)&lt;/code&gt; for example, and you cache the result of &lt;code&gt;get_user_model()&lt;/code&gt; in a module-level variable, you may need to listen to the &lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt;&lt;code&gt;setting_changed&lt;/code&gt;&lt;/a&gt; signal to clear the cache. For example:</source>
          <target state="translated">예를 들어 &lt;code&gt;@override_settings(AUTH_USER_MODEL=...)&lt;/code&gt; 를 사용하여 여러 사용자 모델로 앱을 테스트 한 후 &lt;code&gt;get_user_model()&lt;/code&gt; 결과를 모듈 수준 변수에 캐시하는 경우 &lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt; &lt;code&gt;setting_changed&lt;/code&gt; &lt;/a&gt; 신호를 듣고 지워야합니다. 캐시. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="19dcfebcbdd415cf375a630be2b6e427341d0dea" translate="yes" xml:space="preserve">
          <source>If your application connects to other systems &amp;ndash; for instance, if it queries a Web service &amp;ndash; make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!).</source>
          <target state="translated">응용 프로그램이 다른 시스템에 연결하는 경우 (예 : 웹 서비스를 쿼리하는 경우) 날짜 시간이 올바르게 지정되어 있는지 확인하십시오. 날짜 시간을 안전하게 전송하려면 해당 표현에 UTC 오프셋이 포함되거나 값이 UTC (또는 둘 다) 여야합니다.</target>
        </trans-unit>
        <trans-unit id="68eb798bc7d826d0f87acddbc39d34694074284b" translate="yes" xml:space="preserve">
          <source>If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can&amp;rsquo;t rely upon the fact that your views will be available at a particular URL. Decorate your test class or test method with &lt;code&gt;@override_settings(ROOT_URLCONF=...)&lt;/code&gt; for URLconf configuration.</source>
          <target state="translated">애플리케이션이보기를 제공하는 경우 테스트 클라이언트를 사용하여 해당보기를 실행하는 테스트를 포함 할 수 있습니다. 그러나 최종 사용자는 선택한 URL에 상관없이 응용 프로그램의보기를 자유롭게 배포 할 수 있습니다. 즉, 특정 URL에서 조회수를 볼 수 있다는 사실을 테스트에 의존 할 수 없습니다. URLconf 구성을 위해 @override_settings &lt;code&gt;@override_settings(ROOT_URLCONF=...)&lt;/code&gt; 로 테스트 클래스 또는 테스트 메소드를 장식하십시오 .</target>
        </trans-unit>
        <trans-unit id="35485f3524af2f43a59e170657765450ecc8c6f8" translate="yes" xml:space="preserve">
          <source>If your authentication mechanism uses a custom HTTP header and not &lt;code&gt;REMOTE_USER&lt;/code&gt;, you can subclass &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; and set the &lt;code&gt;header&lt;/code&gt; attribute to the desired &lt;code&gt;request.META&lt;/code&gt; key. For example:</source>
          <target state="translated">인증 메커니즘이 &lt;code&gt;REMOTE_USER&lt;/code&gt; 가 아닌 사용자 정의 HTTP 헤더를 사용하는 경우 &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; 를 서브 클래스 화 하고 &lt;code&gt;header&lt;/code&gt; 속성을 원하는 &lt;code&gt;request.META&lt;/code&gt; 키로 설정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9779f7ac3b7339bf4ea6d174741695fcb45580da" translate="yes" xml:space="preserve">
          <source>If your background is in plain old PHP (with no use of modern frameworks), you&amp;rsquo;re probably used to putting code under the Web server&amp;rsquo;s document root (in a place such as &lt;code&gt;/var/www&lt;/code&gt;). With Django, you don&amp;rsquo;t do that. It&amp;rsquo;s not a good idea to put any of this Python code within your Web server&amp;rsquo;s document root, because it risks the possibility that people may be able to view your code over the Web. That&amp;rsquo;s not good for security.</source>
          <target state="translated">배경이 평범한 오래된 PHP (현대 프레임 워크를 사용하지 않음) 인 경우 웹 서버의 문서 루트 ( &lt;code&gt;/var/www&lt;/code&gt; 와 같은 위치)에 코드를 배치하는 데 익숙 할 것 입니다. Django를 사용하면 그렇게하지 않습니다. 이 Python 코드를 웹 서버의 문서 루트에 넣는 것은 좋은 생각이 아닙니다. 사람들이 웹을 통해 코드를 볼 수있는 위험이 있기 때문입니다. 보안에 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ca388b1fedcaa5043ea95b9f8107592768d9f5dc" translate="yes" xml:space="preserve">
          <source>If your code attempts to access the database when its modules are compiled, this will occur &lt;em&gt;before&lt;/em&gt; the test database is set up, with potentially unexpected results. For example, if you have a database query in module-level code and a real database exists, production data could pollute your tests. &lt;em&gt;It is a bad idea to have such import-time database queries in your code&lt;/em&gt; anyway - rewrite your code so that it doesn&amp;rsquo;t do this.</source>
          <target state="translated">코드가 모듈을 컴파일 할 때 데이터베이스에 액세스하려고 하면 테스트 데이터베이스가 설정 &lt;em&gt;되기 전에&lt;/em&gt; 발생 하며 예상치 못한 결과가 발생할 수 있습니다. 예를 들어, 모듈 수준 코드에 데이터베이스 쿼리가 있고 실제 데이터베이스가 있으면 프로덕션 데이터가 테스트를 오염시킬 수 있습니다. 어쨌든 &lt;em&gt;코드에 이러한 가져 오기 시간 데이터베이스 쿼리&lt;/em&gt; 를 두는 것은 좋지 않습니다. 코드가 다시 작성되지 않도록 코드를 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="8b9eb50ad139972e07c5927be25959ddc8c43a98" translate="yes" xml:space="preserve">
          <source>If your code imports the application registry in an application&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt;, the name &lt;code&gt;apps&lt;/code&gt; will clash with the &lt;code&gt;apps&lt;/code&gt; submodule. The best practice is to move that code to a submodule and import it. A workaround is to import the registry under a different name:</source>
          <target state="translated">코드가 응용 프로그램의 &lt;code&gt;__init__.py&lt;/code&gt; 에서 응용 프로그램 레지스트리를 가져 오는 경우 이름 &lt;code&gt;apps&lt;/code&gt; 은 &lt;code&gt;apps&lt;/code&gt; 하위 모듈 과 충돌합니다 . 가장 좋은 방법은 해당 코드를 하위 모듈로 이동하고 가져 오는 것입니다. 해결 방법은 레지스트리를 다른 이름으로 가져 오는 것입니다.</target>
        </trans-unit>
        <trans-unit id="037c62c31dab165af710e06e5131c4b392f063c1" translate="yes" xml:space="preserve">
          <source>If your code only uses ASCII data, it&amp;rsquo;s safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8.</source>
          <target state="translated">코드에서 ASCII 데이터 만 사용하는 경우 ASCII는 UTF-8의 하위 집합이므로 일반 문자열을 마음대로 전달하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="e54e295adfb62bcb63529d5938619c752337731c" translate="yes" xml:space="preserve">
          <source>If your command defines mandatory positional arguments, you can customize the message error returned in the case of missing arguments. The default is output by &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; (&amp;ldquo;too few arguments&amp;rdquo;).</source>
          <target state="translated">명령이 필수 위치 인수를 정의하는 경우 인수가 누락 된 경우 리턴되는 메시지 오류를 사용자 정의 할 수 있습니다. 디폴트는 &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; 에&lt;/a&gt; 의해 출력됩니다 (&amp;ldquo;너무 적은 인수&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="8b66d0e6b2d3c34277e5351352f9e2d49c89f40f" translate="yes" xml:space="preserve">
          <source>If your custom &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class deals with data structures that are more complex than strings, dates, integers, or floats, then you may need to override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt;&lt;code&gt;from_db_value()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt;&lt;code&gt;to_python()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 클래스가 문자열, 날짜, 정수 또는 부동 소수점보다 복잡한 데이터 구조를 처리하는 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt; &lt;code&gt;from_db_value()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt; &lt;code&gt;to_python()&lt;/code&gt; &lt;/a&gt; 을 재정의해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="42459a545a83bcbb2b1a6c5d0c989d612ebefbcf" translate="yes" xml:space="preserve">
          <source>If your custom field uses the &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt; types for MySQL, you must make sure that &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt; always returns a string type. MySQL performs flexible and unexpected matching when a query is performed on these types and the provided value is an integer, which can cause queries to include unexpected objects in their results. This problem cannot occur if you always return a string type from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 필드가 MySQL에 대해 &lt;code&gt;CHAR&lt;/code&gt; , &lt;code&gt;VARCHAR&lt;/code&gt; 또는 &lt;code&gt;TEXT&lt;/code&gt; 유형을 사용하는 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 항상 문자열 유형을 리턴 하는지 확인해야합니다 . MySQL은 이러한 유형에 대해 쿼리를 수행 할 때 유연하고 예기치 않은 일치를 수행하며 제공된 값이 정수이므로 쿼리에 예기치 않은 개체가 결과에 포함될 수 있습니다. 항상 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 에서 문자열 유형을 리턴하면이 문제점이 발생할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="5f134f8d6891d13bafe02ccedf40254834ce3b1c" translate="yes" xml:space="preserve">
          <source>If your custom user model is a subclass of &lt;code&gt;AbstractUser&lt;/code&gt;, then you can extend these forms in this manner:</source>
          <target state="translated">사용자 정의 사용자 모델이 &lt;code&gt;AbstractUser&lt;/code&gt; 의 서브 클래스 인 경우 다음과 같은 방식으로 이러한 양식을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7489ac299b65b30e1fabb441ed4d0427d3e20fa3" translate="yes" xml:space="preserve">
          <source>If your data does &lt;em&gt;not&lt;/em&gt; validate, the &lt;code&gt;cleaned_data&lt;/code&gt; dictionary contains only the valid fields:</source>
          <target state="translated">데이터의 유효성이 검사 되지 &lt;em&gt;않으면 &lt;/em&gt; &lt;code&gt;cleaned_data&lt;/code&gt; 된 데이터 사전에 유효한 필드 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="66fee195a0e25a7f977bf0cd9ad9e712b37631fd" translate="yes" xml:space="preserve">
          <source>If your database column name is an SQL reserved word, or contains characters that aren&amp;rsquo;t allowed in Python variable names &amp;ndash; notably, the hyphen &amp;ndash; that&amp;rsquo;s OK. Django quotes column and table names behind the scenes.</source>
          <target state="translated">데이터베이스 열 이름이 SQL 예약어이거나 Python 변수 이름에 허용되지 않는 문자 (특히 하이픈)가 포함되어 있으면 괜찮습니다. Django는 장면 뒤의 열과 테이블 이름을 인용합니다.</target>
        </trans-unit>
        <trans-unit id="83b77d8f63e76cf58cc37344473b9afbbd464eed" translate="yes" xml:space="preserve">
          <source>If your database configuration requires a specific creation order, you can specify the dependencies that exist using the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; test setting. Consider the following (simplified) example database configuration:</source>
          <target state="translated">데이터베이스 구성에 특정 작성 순서가 필요한 경우 &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt; 테스트 설정을 사용하여 존재하는 종속성을 지정할 수 있습니다 . 다음과 같은 단순화 된 데이터베이스 구성 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="7805750627528231fb20224a0ae84ae501c12e42" translate="yes" xml:space="preserve">
          <source>If your database table name is an SQL reserved word, or contains characters that aren&amp;rsquo;t allowed in Python variable names &amp;ndash; notably, the hyphen &amp;ndash; that&amp;rsquo;s OK. Django quotes column and table names behind the scenes.</source>
          <target state="translated">데이터베이스 테이블 이름이 SQL 예약어이거나 Python 변수 이름에 허용되지 않는 문자 (특히 하이픈)가 포함 된 경우에는 문제가 없습니다. Django는 장면 뒤의 열과 테이블 이름을 인용합니다.</target>
        </trans-unit>
        <trans-unit id="b9f5f90e03e19a8bb4a87f8c1e61359a54e098f8" translate="yes" xml:space="preserve">
          <source>If your deployment situation allows, it&amp;rsquo;s usually a good idea to have your front-end Web server perform the functionality provided by the &lt;code&gt;SecurityMiddleware&lt;/code&gt;. That way, if there are requests that aren&amp;rsquo;t served by Django (such as static media or user-uploaded files), they will have the same protections as requests to your Django application.</source>
          <target state="translated">배포 상황에서 허용되는 경우 일반적으로 프런트 엔드 웹 서버가 &lt;code&gt;SecurityMiddleware&lt;/code&gt; 에서 제공하는 기능을 수행하도록하는 것이 좋습니다 . 이렇게하면 Django에서 제공하지 않는 요청 (예 : 정적 미디어 또는 사용자 업로드 파일)이 있으면 Django 응용 프로그램에 대한 요청과 동일한 보호 기능을 갖게됩니다.</target>
        </trans-unit>
        <trans-unit id="b1ce081d315c1a0717aefc66e3fbb209ac78a158" translate="yes" xml:space="preserve">
          <source>If your form includes a &lt;a href=&quot;../../ref/forms/fields#django.forms.URLField&quot;&gt;&lt;code&gt;URLField&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt; or any integer field type, Django will use the &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; HTML5 input types. By default, browsers may apply their own validation on these fields, which may be stricter than Django&amp;rsquo;s validation. If you would like to disable this behavior, set the &lt;code&gt;novalidate&lt;/code&gt; attribute on the &lt;code&gt;form&lt;/code&gt; tag, or specify a different widget on the field, like &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">양식에 &lt;a href=&quot;../../ref/forms/fields#django.forms.URLField&quot;&gt; &lt;code&gt;URLField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt; 또는 정수 필드 유형이 포함 된 경우 Django는 &lt;code&gt;url&lt;/code&gt; , &lt;code&gt;email&lt;/code&gt; 및 &lt;code&gt;number&lt;/code&gt; HTML5 입력 유형을 사용합니다. 기본적으로 브라우저는이 필드에 자체 검증을 적용 할 수 있으며 이는 Django의 검증보다 더 엄격 할 수 있습니다. 이 동작을 사용하지 않으 려면 &lt;code&gt;form&lt;/code&gt; 태그 에서 &lt;code&gt;novalidate&lt;/code&gt; 속성을 설정 하거나 필드에서 &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 과 같은 다른 위젯을 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e4e143f7d7dfb7b18d9cf7a1c3427090cb8e9a5" translate="yes" xml:space="preserve">
          <source>If your hasher doesn&amp;rsquo;t have a work factor, implement the method as a no-op (&lt;code&gt;pass&lt;/code&gt;).</source>
          <target state="translated">hasher에 작업 요소가없는 경우 메소드를 no-op ( &lt;code&gt;pass&lt;/code&gt; ) 로 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="b9f54aed909184fec0b6faab802c1ba2803adca8" translate="yes" xml:space="preserve">
          <source>If your middleware has both &lt;code&gt;sync_capable = True&lt;/code&gt; and &lt;code&gt;async_capable = True&lt;/code&gt;, then Django will pass it the request without converting it. In this case, you can work out if your middleware will receive async requests by checking if the &lt;code&gt;get_response&lt;/code&gt; object you are passed is a coroutine function, using &lt;a href=&quot;https://docs.python.org/3/library/asyncio-task.html#asyncio.iscoroutinefunction&quot;&gt;&lt;code&gt;asyncio.iscoroutinefunction()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">미들웨어에 &lt;code&gt;sync_capable = True&lt;/code&gt; 및 &lt;code&gt;async_capable = True&lt;/code&gt; 가 모두있는 경우 Django는 요청을 변환하지 않고 전달합니다. 이 경우 &lt;a href=&quot;https://docs.python.org/3/library/asyncio-task.html#asyncio.iscoroutinefunction&quot;&gt; &lt;code&gt;asyncio.iscoroutinefunction()&lt;/code&gt; &lt;/a&gt; 사용하여 전달 된 &lt;code&gt;get_response&lt;/code&gt; 객체가 코 루틴 함수 인지 확인하여 미들웨어가 비동기 요청을 수신하는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b352e31157863463daa5a9b2b4a00f05e691f6ce" translate="yes" xml:space="preserve">
          <source>If your model contains more than one foreign key to the same model, you&amp;rsquo;ll need to resolve the ambiguity manually using &lt;code&gt;fk_name&lt;/code&gt;. For example, consider the following model:</source>
          <target state="translated">모델에 동일한 모델에 대한 외래 키가 둘 이상 포함 된 경우 &lt;code&gt;fk_name&lt;/code&gt; 을 사용하여 모호성을 수동으로 해결해야합니다 . 예를 들어 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="6ca7a43d3ceacd8c83aa87a7c6008e8f5f3287d7" translate="yes" xml:space="preserve">
          <source>If your model has a &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method but you don&amp;rsquo;t want the &amp;ldquo;View on site&amp;rdquo; button to appear, you only need to set &lt;code&gt;view_on_site&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">모델에 &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 메소드가 있지만 &quot;사이트에서보기&quot;단추를 표시하지 않으려면 &lt;code&gt;view_on_site&lt;/code&gt; 만 &lt;code&gt;False&lt;/code&gt; 로 설정 하면 됩니다 .</target>
        </trans-unit>
        <trans-unit id="55784988b7d647b9df1a836203e5bf6b7c5dabc3" translate="yes" xml:space="preserve">
          <source>If your model has more than one &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;parent_model&lt;/code&gt;, you must specify a &lt;code&gt;fk_name&lt;/code&gt;.</source>
          <target state="translated">모델 에 &lt;code&gt;parent_model&lt;/code&gt; 에 대한 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가 둘 이상인 경우 &lt;code&gt;fk_name&lt;/code&gt; 을 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e6dc5086c9587c9e487ae0b9fdc36e7f3231fe93" translate="yes" xml:space="preserve">
          <source>If your model&amp;rsquo;s &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;Meta&lt;/a&gt; specifies &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt;, you can omit any arguments to &lt;code&gt;earliest()&lt;/code&gt; or &lt;code&gt;latest()&lt;/code&gt;. The fields specified in &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt; will be used by default.</source>
          <target state="translated">모델의 &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;메타가 &lt;/a&gt;&lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; 를&lt;/a&gt; 지정 하면 &lt;code&gt;earliest()&lt;/code&gt; 또는 &lt;code&gt;latest()&lt;/code&gt; 대한 인수를 생략 할 수 있습니다 . &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; 에&lt;/a&gt; 지정된 필드 가 기본적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="151f04ef6d26ef02a6f8f49d9494948ff5996818" translate="yes" xml:space="preserve">
          <source>If your project uses proxy models, you must either modify the proxy to extend the user model that&amp;rsquo;s in use in your project, or merge your proxy&amp;rsquo;s behavior into your &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">프로젝트에서 프록시 모델을 사용하는 경우 프로젝트에서 사용중인 사용자 모델을 확장하도록 프록시를 수정하거나 프록시 동작을 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 서브 클래스에 병합해야합니다 .</target>
        </trans-unit>
        <trans-unit id="44824388e510837cfa981ebd84a663ae9c830298" translate="yes" xml:space="preserve">
          <source>If your request used the &lt;code&gt;follow&lt;/code&gt; argument, the &lt;code&gt;expected_url&lt;/code&gt; and &lt;code&gt;target_status_code&lt;/code&gt; will be the url and status code for the final point of the redirect chain.</source>
          <target state="translated">귀하의 요청이 사용되는 경우 &lt;code&gt;follow&lt;/code&gt; 인수는 &lt;code&gt;expected_url&lt;/code&gt; 및 &lt;code&gt;target_status_code&lt;/code&gt; 는 리디렉션 체인의 최종 지점의 URL 및 상태 코드가 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="90e0da33d8c8d3ffe3995050565ede94840b1dd8" translate="yes" xml:space="preserve">
          <source>If your root URLconf uses &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;JavaScriptCatalog&lt;/code&gt; must also be wrapped by &lt;code&gt;i18n_patterns()&lt;/code&gt; for the catalog to be correctly generated.</source>
          <target state="translated">루트 URLconf를 사용하는 경우 &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;JavaScriptCatalog&lt;/code&gt; 은 또한 래핑해야 &lt;code&gt;i18n_patterns()&lt;/code&gt; 올바르게 생성되는 카탈로그.</target>
        </trans-unit>
        <trans-unit id="6df4fb6245e051b9d36fab3f466fa1d09ca7a5f9" translate="yes" xml:space="preserve">
          <source>If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt; directive.</source>
          <target state="translated">사이트에서 파일 업로드를 허용하는 경우 DOS (서비스 거부) 공격을 방지하기 위해 웹 서버 구성에서 이러한 업로드를 적절한 크기로 제한하는 것이 좋습니다. Apache에서는 &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt; 지시문을 사용하여 쉽게 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f8d605a5c50ad541297eddd5069d8164b968b86" translate="yes" xml:space="preserve">
          <source>If your site offers both HTTP and HTTPS connections, most users will end up with an unsecured connection by default. For best security, you should redirect all HTTP connections to HTTPS.</source>
          <target state="translated">사이트에서 HTTP 및 HTTPS 연결을 모두 제공하는 경우 대부분의 사용자는 기본적으로 보안되지 않은 연결로 끝납니다. 최상의 보안을 위해 모든 HTTP 연결을 HTTPS로 리디렉션해야합니다.</target>
        </trans-unit>
        <trans-unit id="d3c6bc1158a1e98cf03b8d846800ac77b1fa4b8a" translate="yes" xml:space="preserve">
          <source>If your site sends emails, these values need to be set correctly.</source>
          <target state="translated">사이트에서 이메일을 보내는 경우이 값을 올바르게 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="9aa8302c804c3a783e15d8c95fda308c718b94b7" translate="yes" xml:space="preserve">
          <source>If your site serves user-uploaded files, a malicious user could upload a specially-crafted file that would be interpreted as HTML or JavaScript by the browser when you expected it to be something harmless.</source>
          <target state="translated">사이트에서 사용자가 업로드 한 파일을 제공하는 경우 악의적 인 사용자가 특수하게 조작 된 파일을 업로드 할 수 있습니다.이 파일은 사용자가 무해한 것으로 예상 될 때 브라우저에서 HTML 또는 JavaScript로 해석합니다.</target>
        </trans-unit>
        <trans-unit id="0ad66de9dea62ec082b44fd754a56be3eb2434f8" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt; and you deal with logging in users, you can use the test client&amp;rsquo;s &lt;code&gt;login()&lt;/code&gt; method to simulate the effect of a user logging into the site.</source>
          <target state="translated">사이트에서 Django의 &lt;a href=&quot;../auth/index&quot;&gt;인증 시스템&lt;/a&gt; 을 사용하고 사용자 로그인을 처리하는 경우 테스트 클라이언트의 &lt;code&gt;login()&lt;/code&gt; 메소드를 사용하여 사용자가 사이트에 로그인하는 효과를 시뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d440a3cae88c7b38cb98393225850ee488a3a51c" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt;, the &lt;code&gt;logout()&lt;/code&gt; method can be used to simulate the effect of a user logging out of your site.</source>
          <target state="translated">사이트에서 Django의 &lt;a href=&quot;../auth/index&quot;&gt;인증 시스템&lt;/a&gt; 을 사용하는 경우 &lt;code&gt;logout()&lt;/code&gt; 메소드를 사용하여 사용자가 사이트에서 로그 아웃하는 효과를 시뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ae4efc81923d0d641f95a6dbd07af8563d1a6b5" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt;, you can use the &lt;code&gt;force_login()&lt;/code&gt; method to simulate the effect of a user logging into the site. Use this method instead of &lt;a href=&quot;#django.test.Client.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; when a test requires a user be logged in and the details of how a user logged in aren&amp;rsquo;t important.</source>
          <target state="translated">사이트에서 Django의 &lt;a href=&quot;../auth/index&quot;&gt;인증 시스템&lt;/a&gt; 을 사용하는 경우 &lt;code&gt;force_login()&lt;/code&gt; 메서드를 사용하여 사용자가 사이트에 로그인하는 효과를 시뮬레이션 할 수 있습니다. 테스트에서 사용자 의 &lt;a href=&quot;#django.test.Client.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 이 필요하고 사용자의 로그인 방법에 대한 세부 사항이 중요하지 않은 경우 login () 대신이 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="56c55021691d4a1273096fb3bde5d2de5ed1abf6" translate="yes" xml:space="preserve">
          <source>If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form&amp;rsquo;s loop in a standalone template and using the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag to reuse it in other templates:</source>
          <target state="translated">사이트가 여러 곳에있는 양식에 동일한 렌더링 논리를 사용하는 경우 양식의 루프를 독립형 템플릿에 저장하고 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt; 태그를 사용하여 다른 템플릿에서 재사용 함으로써 중복을 줄일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0462de7d96fe5e5014114972e806e852776e60fd" translate="yes" xml:space="preserve">
          <source>If your template tag needs to access the current context, you can use the &lt;code&gt;takes_context&lt;/code&gt; argument when registering your tag:</source>
          <target state="translated">템플릿 태그가 현재 컨텍스트에 액세스 &lt;code&gt;takes_context&lt;/code&gt; 경우 태그를 등록 할 때 take_context 인수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="131d5a32009bb9c3437d883a85b81cbab612c507" translate="yes" xml:space="preserve">
          <source>If your tests make any database queries, use subclasses &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">테스트에서 데이터베이스 쿼리를 작성하는 경우 &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="93b76f5f9b3d3f25cd25b34d9927950756431ed5" translate="yes" xml:space="preserve">
          <source>If your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">테스트가 모델 작성 또는 쿼리와 같은 데이터베이스 액세스에 의존 하는 경우 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; 가&lt;/a&gt; 아닌 &lt;a href=&quot;tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; 의&lt;/a&gt; 서브 클래스로 테스트 클래스를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ea04c1e37c45f0d4b469802f36772d32e7b6af6" translate="yes" xml:space="preserve">
          <source>If your view is not rendering a template containing the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt;&lt;code&gt;ensure_csrf_cookie()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">뷰에서 &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플릿 태그가 포함 된 템플릿을 렌더링 하지 않으면 Django가 CSRF 토큰 쿠키를 설정하지 않을 수 있습니다. 양식이 페이지에 동적으로 추가되는 경우에 일반적입니다. 이 경우 Django는 쿠키 설정을 &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt; &lt;code&gt;ensure_csrf_cookie()&lt;/code&gt; &lt;/a&gt; 하는 뷰 데코레이터를 제공합니다 : ensure_csrf_cookie () .</target>
        </trans-unit>
        <trans-unit id="100164bf62bbd4acd7334a3ab2e0db0ddfb29848" translate="yes" xml:space="preserve">
          <source>If, as in the second example above, you&amp;rsquo;ve left the &lt;code&gt;default&lt;/code&gt; database empty, you must provide a database name each time you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;. Omitting the database name would raise an error. For the second example:</source>
          <target state="translated">위의 두 번째 예에서와 같이 &lt;code&gt;default&lt;/code&gt; 데이터베이스를 비워 두었다면 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 를 실행할 때마다 데이터베이스 이름을 제공해야합니다 . 데이터베이스 이름을 생략하면 오류가 발생합니다. 두 번째 예의 경우 :</target>
        </trans-unit>
        <trans-unit id="05a2ca6c2742910df2490054ce0b70ad2788db45" translate="yes" xml:space="preserve">
          <source>If, for some reason, it was decided that the URLs where content for yearly article archives are published at should be changed then you would only need to change the entry in the URLconf.</source>
          <target state="translated">어떤 이유로 든 연간 기사 아카이브의 컨텐츠가 게시되는 URL을 변경하기로 결정한 경우 URLconf의 항목 만 변경하면됩니다.</target>
        </trans-unit>
        <trans-unit id="2bdda409711d05757642b136dd218873e3a28bc8" translate="yes" xml:space="preserve">
          <source>If, for some reason, you &lt;em&gt;want&lt;/em&gt; the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the &lt;code&gt;enforce_csrf_checks&lt;/code&gt; argument when you construct your client:</source>
          <target state="translated">어떤 이유로, 당신이 경우 &lt;em&gt;원하는&lt;/em&gt; 테스트 클라이언트는 CSRF 검사를 수행하려면이 강제 시행은 검사를 CSRF하는 테스트 클라이언트의 인스턴스를 만들 수 있습니다. 이렇게하려면 클라이언트를 구성 할 때 &lt;code&gt;enforce_csrf_checks&lt;/code&gt; 인수를 전달 하십시오.</target>
        </trans-unit>
        <trans-unit id="cd25f650a89f987a8ae9410f69052145579c8043" translate="yes" xml:space="preserve">
          <source>If, for some reason, you &lt;em&gt;want&lt;/em&gt; the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks:</source>
          <target state="translated">어떤 이유로, 당신이 경우 &lt;em&gt;원하는&lt;/em&gt; CSRF 검사를 수행하는 테스트 클라이언트를, 당신이 강제 시행은 검사를 CSRF하는 테스트 클라이언트의 인스턴스를 생성 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="919bf73ea026018730b49f5cba48431bbbf54fd7" translate="yes" xml:space="preserve">
          <source>If, for some reason, your custom management command must run without an active locale (for example, to prevent translated content from being inserted into the database), deactivate translations using the &lt;code&gt;@no_translations&lt;/code&gt; decorator on your &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">어떤 이유로 든 사용자 정의 관리 명령이 활성 로케일없이 실행되어야하는 경우 (예 : 번역 된 컨텐츠가 데이터베이스에 삽입되는 것을 방지하기 위해) &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 메소드 에서 &lt;code&gt;@no_translations&lt;/code&gt; 데코레이터를 사용하여 번역을 비활성화 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b07cc84bbd178c74aa2d9ca20dfcde5708a26518" translate="yes" xml:space="preserve">
          <source>If, however, you have no option but to serve media files on the same Apache &lt;code&gt;VirtualHost&lt;/code&gt; as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django.</source>
          <target state="translated">그러나 Django 와 동일한 Apache &lt;code&gt;VirtualHost&lt;/code&gt; 에서 미디어 파일 을 제공하는 것 외에 다른 옵션이 없다면 mod_wsgi 인터페이스를 사용하여 Django에 일부 URL을 정적 미디어로 제공하도록 Apache를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ce69c54fa4098f27900ed28ca0545fa9c86efee" translate="yes" xml:space="preserve">
          <source>If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your &lt;code&gt;ModelAdmin.actions&lt;/code&gt; list:</source>
          <target state="translated">그러나 특정 모델 하나에 대해 전체적으로 비활성화 된 작업을 다시 활성화해야하는 경우 &lt;code&gt;ModelAdmin.actions&lt;/code&gt; 목록에 명시 적으로 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="4e214bf4c073cee123e8fb348d379cb842d22670" translate="yes" xml:space="preserve">
          <source>Ignore files, directories, or paths matching this glob-style pattern. Use multiple times to ignore more. When specifying a path, always use forward slashes, even on Windows.</source>
          <target state="translated">이 glob 스타일 패턴과 일치하는 파일, 디렉토리 또는 경로를 무시하십시오. 더 많이 무시하려면 여러 번 사용하십시오. 경로를 지정할 때 Windows에서도 항상 슬래시를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b46ee8e1837971774646e299482d167d080ed7ef" translate="yes" xml:space="preserve">
          <source>Ignore the warning about unapplied database migrations for now; we&amp;rsquo;ll deal with the database shortly.</source>
          <target state="translated">현재 적용되지 않은 데이터베이스 마이그레이션에 대한 경고는 무시하십시오. 데이터베이스를 곧 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="37586d575c14722fe8807bc994aadfaef7495bc6" translate="yes" xml:space="preserve">
          <source>Ignores directories matching the given &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;-style pattern. Use multiple times to ignore more.</source>
          <target state="translated">주어진 &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt; 스타일 패턴과 일치하는 디렉토리를 무시합니다 . 더 많이 무시하려면 여러 번 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="26f58245e8a0d7451fc5c47ad810a8c64487bb47" translate="yes" xml:space="preserve">
          <source>Ignores everything between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.</source>
          <target state="translated">&lt;code&gt;{% comment %}&lt;/code&gt; 와 &lt;code&gt;{% endcomment %}&lt;/code&gt; 사이의 모든 것을 무시합니다 . 첫 번째 태그에는 선택적인 메모가 삽입 될 수 있습니다. 예를 들어, 코드가 비활성화 된 이유를 문서화하기 위해 코드를 주석 처리 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9ee48f68c602ee8c804d6234ef660c199f1fbe4a" translate="yes" xml:space="preserve">
          <source>Ignores fields and models that may have been removed since the fixture was originally generated.</source>
          <target state="translated">조명기가 원래 생성 된 이후에 제거되었을 수있는 필드와 모델을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="e6f657b51973a7ffa6d6443941085cb8d8492fd4" translate="yes" xml:space="preserve">
          <source>Ignores files or directories matching the given &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;-style pattern. Use multiple times to ignore more.</source>
          <target state="translated">주어진 &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt; 스타일 패턴과 일치하는 파일 또는 디렉토리를 무시합니다 . 더 많이 무시하려면 여러 번 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="323377a570864e3a1b26bdc4a63a300a0a6b5471" translate="yes" xml:space="preserve">
          <source>Ignoring &amp;ldquo;stop words&amp;rdquo; such as &amp;ldquo;a&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;and&amp;rdquo;.</source>
          <target state="translated">&quot;a&quot;, &quot;the&quot;, &quot;and&quot;와 같은 &quot;중지 단어&quot;를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="99b7a0e4a10dba5856b9ea510fa67c9bb35255e5" translate="yes" xml:space="preserve">
          <source>Imagine we had a &lt;code&gt;last_accessed&lt;/code&gt; field on our &lt;code&gt;Author&lt;/code&gt; model that we were using to keep track of the last time anybody looked at that author:</source>
          <target state="translated">우리가 &lt;code&gt;Author&lt;/code&gt; 모델 에 &lt;code&gt;last_accessed&lt;/code&gt; 필드를 가지고 있다고 가정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="7fc15e1eb128d4daccbe8c7ab2a5c5e128767d8e" translate="yes" xml:space="preserve">
          <source>Implement a &lt;code&gt;clean()&lt;/code&gt; method on your &lt;code&gt;Form&lt;/code&gt; when you must add custom validation for fields that are interdependent. See &lt;a href=&quot;validation#validating-fields-with-clean&quot;&gt;Cleaning and validating fields that depend on each other&lt;/a&gt; for example usage.</source>
          <target state="translated">상호 의존적 인 필드에 대한 사용자 지정 유효성 검사를 추가해야 할 때 &lt;code&gt;Form&lt;/code&gt; 에 &lt;code&gt;clean()&lt;/code&gt; 메서드를 구현 하십시오 . 사용 예 &lt;a href=&quot;validation#validating-fields-with-clean&quot;&gt;는 서로 의존하는 필드 정리 및 유효성 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6cfa7967295c6a6446e645b10a6097c50a71d8d" translate="yes" xml:space="preserve">
          <source>Implementation concerns</source>
          <target state="translated">구현 문제</target>
        </trans-unit>
        <trans-unit id="e0bf2dc952ab6d2617aa9b9ee013534f9eeb5b62" translate="yes" xml:space="preserve">
          <source>Implementation notes</source>
          <target state="translated">구현 노트</target>
        </trans-unit>
        <trans-unit id="3e3330bd2a361feb0240b1fddb979752ae17ea93" translate="yes" xml:space="preserve">
          <source>Implementing a constructor in a subclass</source>
          <target state="translated">서브 클래스에서 생성자 구현</target>
        </trans-unit>
        <trans-unit id="632f01fece5418e29e250528914dbf408f470600" translate="yes" xml:space="preserve">
          <source>Implementing caching should not be regarded as an alternative to improving code that&amp;rsquo;s performing poorly because it has been written badly. It&amp;rsquo;s one of the final steps towards producing well-performing code, not a shortcut.</source>
          <target state="translated">캐싱 구현은 코드가 잘못 작성되어 성능이 저하 된 코드를 개선하는 대안으로 간주되어서는 안됩니다. 바로 가기가 아닌 성능이 우수한 코드를 생성하기위한 마지막 단계 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="6c877258699b88d7b5575fdb8ca9aae3d8820bae" translate="yes" xml:space="preserve">
          <source>Implementing this yourself often results in a lot of repeated boilerplate code (see &lt;a href=&quot;../forms/index#using-a-form-in-a-view&quot;&gt;Using a form in a view&lt;/a&gt;). To help avoid this, Django provides a collection of generic class-based views for form processing.</source>
          <target state="translated">직접 구현하면 상용구 코드가 많이 반복됩니다 (보기 &lt;a href=&quot;../forms/index#using-a-form-in-a-view&quot;&gt;에서 양식 사용&lt;/a&gt; 참조 ). 이를 피하기 위해 Django는 양식 처리를위한 일반 클래스 기반 뷰 모음을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e5d8feee9c32a98e60e7043052deae37efa5b7c8" translate="yes" xml:space="preserve">
          <source>Implements cached database-backed session store.</source>
          <target state="translated">캐시 된 데이터베이스 기반 세션 저장소를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="57a7f9ee519c5b8d6227a97eb918c9e03394062f" translate="yes" xml:space="preserve">
          <source>Implements database-backed session store.</source>
          <target state="translated">데이터베이스 기반 세션 저장소를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="22e27035ac8e154d8d3e3995c4f857cc344cbb23" translate="yes" xml:space="preserve">
          <source>Implies setting &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;Field.db_index&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;Field.db_index&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="759987d88bd09dd553f257b758daf18ca5f14887" translate="yes" xml:space="preserve">
          <source>Import spatial reference from EPSG code.</source>
          <target state="translated">EPSG 코드에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f7080a194b706adfdf562e2d80373f6ad81a34c0" translate="yes" xml:space="preserve">
          <source>Import spatial reference from PROJ.4 string.</source>
          <target state="translated">PROJ.4 문자열에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="6fef6e94164d6d870390223dd3af1c7cb28c31ac" translate="yes" xml:space="preserve">
          <source>Import spatial reference from WKT.</source>
          <target state="translated">WKT에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8a4c58086cb4f68917fb1260e33f6c51036c8456" translate="yes" xml:space="preserve">
          <source>Import spatial reference from XML.</source>
          <target state="translated">XML에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="6c4b688b2ef86c7056f52a57bea61a8792c3849d" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;AbstractBaseUser&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AbstractBaseUser&lt;/code&gt; 가져 오기</target>
        </trans-unit>
        <trans-unit id="e7a5f39849f3fe8c1533fc46296d83c2841e8caa" translate="yes" xml:space="preserve">
          <source>Importing Spatial Data</source>
          <target state="translated">공간 데이터 가져 오기</target>
        </trans-unit>
        <trans-unit id="31deeb21a29c47ae89f038bc8341eaaeff7a09c5" translate="yes" xml:space="preserve">
          <source>Imports a dotted module path and returns the attribute/class designated by the last name in the path. Raises &lt;code&gt;ImportError&lt;/code&gt; if the import failed. For example:</source>
          <target state="translated">점으로 구분 된 모듈 경로를 가져 와서 경로에서 성으로 지정된 속성 / 클래스를 반환합니다. 발생시킵니다 &lt;code&gt;ImportError&lt;/code&gt; 를이 가져 오기가 실패합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="43d1c07c1e566ca2939141457a3c42159b8e891a" translate="yes" xml:space="preserve">
          <source>Improved speed might be the most obvious aim for a program, but sometimes other performance improvements might be sought, such as lower memory consumption or fewer demands on the database or network.</source>
          <target state="translated">속도 향상은 프로그램의 가장 확실한 목표 일 수 있지만 때로는 메모리 소비 감소 또는 데이터베이스 나 네트워크에 대한 수요 감소와 같은 다른 성능 향상이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8cb9b65545d67676e31319a8591f1bc9ef9938d" translate="yes" xml:space="preserve">
          <source>Improvements in one area will often bring about improved performance in another, but not always; sometimes one can even be at the expense of another. For example, an improvement in a program&amp;rsquo;s speed might cause it to use more memory. Even worse, it can be self-defeating - if the speed improvement is so memory-hungry that the system starts to run out of memory, you&amp;rsquo;ll have done more harm than good.</source>
          <target state="translated">한 영역의 개선은 종종 다른 영역의 개선 된 성능을 가져 오지만 항상 그런 것은 아닙니다. 때로는 한 사람이 다른 사람을 희생하기도한다 예를 들어, 프로그램 속도가 향상되면 더 많은 메모리를 사용할 수 있습니다. 더 나쁜 것은, 스스로를 물리 칠 수 있다는 것입니다. 속도 향상으로 인해 메모리가 부족하여 시스템에 메모리가 부족해지기 시작하면 좋은 것보다 더 많은 피해를 입게됩니다.</target>
        </trans-unit>
        <trans-unit id="b5e972a8024aea2ff5834415377894b0b1408dc1" translate="yes" xml:space="preserve">
          <source>Improving our view</source>
          <target state="translated">우리의 견해 개선</target>
        </trans-unit>
        <trans-unit id="423ee3d502d51a230964dcb05a5037a9723ba101" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, each middleware component is represented by a string: the full Python path to the middleware factory&amp;rsquo;s class or function name. For example, here&amp;rsquo;s the default value created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">에서 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 미들웨어 공장의 클래스 또는 함수 이름의 전체 파이썬 경로 : 각 미들웨어 구성 요소는 문자열로 표시됩니다. 예를 들어 &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt; 의해 생성 된 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0f98c9c44256324347c54d4de74bec56956bdb2a" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;tutorial04&quot;&gt;Tutorial 4&lt;/a&gt; we introduced a class-based view, based on &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;tutorial04&quot;&gt;튜토리얼 4&lt;/a&gt; 에서는 &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; 를&lt;/a&gt; 기반으로 클래스 기반 뷰를 소개했습니다 .</target>
        </trans-unit>
        <trans-unit id="061872dabbd882e65fed4448dcd75d033d42e91a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;&quot;nodelist = parser.parse(('endcomment',))&quot;&lt;/code&gt; in the above example, &lt;code&gt;nodelist&lt;/code&gt; is a list of all nodes between the &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;, not counting &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt; themselves.</source>
          <target state="translated">에서는 &lt;code&gt;&quot;nodelist = parser.parse(('endcomment',))&quot;&lt;/code&gt; 위의 예에서, &lt;code&gt;nodelist&lt;/code&gt; 간의 모든 노드들의 목록 &lt;code&gt;{% comment %}&lt;/code&gt; 및 &lt;code&gt;{% endcomment %}&lt;/code&gt; , 카운트되지 &lt;code&gt;{% comment %}&lt;/code&gt; 및 &lt;code&gt;{% endcomment %}&lt;/code&gt; 자신.</target>
        </trans-unit>
        <trans-unit id="980baa344e263cc001383a2be32c4e65f245ce93" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;template.html&lt;/code&gt;, the following paths would be valid:</source>
          <target state="translated">에서 &lt;code&gt;template.html&lt;/code&gt; , 다음 경로는 유효 할 것이다 :</target>
        </trans-unit>
        <trans-unit id="6ef78276f8e607837babb1b9074bcf132d9b67ef" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test_future_question&lt;/code&gt;, we create a question with a &lt;code&gt;pub_date&lt;/code&gt; in the future. The database is reset for each test method, so the first question is no longer there, and so again the index shouldn&amp;rsquo;t have any questions in it.</source>
          <target state="translated">&lt;code&gt;test_future_question&lt;/code&gt; 에서는 앞으로 &lt;code&gt;pub_date&lt;/code&gt; 로 질문을 만듭니다 . 데이터베이스는 각 테스트 방법마다 재설정되므로 첫 번째 질문은 더 이상 존재하지 않으므로 인덱스에 질문이 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="5f9cbf79cc52467baff9c100eb8928946f93b121" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test_past_question&lt;/code&gt;, we create a question and verify that it appears in the list.</source>
          <target state="translated">에서 &lt;code&gt;test_past_question&lt;/code&gt; , 우리는 질문을 만들고이 목록에 나타나는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="1ca0c441f71f0c9c390db046d94cf2f81905b41d" translate="yes" xml:space="preserve">
          <source>In Django 1.5 and earlier, Django did a &lt;code&gt;SELECT&lt;/code&gt; when the primary key attribute was set. If the &lt;code&gt;SELECT&lt;/code&gt; found a row, then Django did an &lt;code&gt;UPDATE&lt;/code&gt;, otherwise it did an &lt;code&gt;INSERT&lt;/code&gt;. The old algorithm results in one more query in the &lt;code&gt;UPDATE&lt;/code&gt; case. There are some rare cases where the database doesn&amp;rsquo;t report that a row was updated even if the database contains a row for the object&amp;rsquo;s primary key value. An example is the PostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; trigger which returns &lt;code&gt;NULL&lt;/code&gt;. In such cases it is possible to revert to the old algorithm by setting the &lt;a href=&quot;options#django.db.models.Options.select_on_save&quot;&gt;&lt;code&gt;select_on_save&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">Django 1.5 및 이전 버전에서 Django는 기본 키 속성이 설정되었을 때 &lt;code&gt;SELECT&lt;/code&gt; 를 수행했습니다. 경우 &lt;code&gt;SELECT&lt;/code&gt; 는 행을 찾은 후, 장고는 한 &lt;code&gt;UPDATE&lt;/code&gt; 를 그렇지가 않았다 &lt;code&gt;INSERT&lt;/code&gt; 를 . 이전 알고리즘은 &lt;code&gt;UPDATE&lt;/code&gt; 경우 에 하나 이상의 쿼리를 생성합니다 . 데이터베이스에 객체의 기본 키 값에 대한 행이 포함되어 있어도 행이 업데이트되었다고 데이터베이스가보고하지 않는 경우가 있습니다. 예로는 &lt;code&gt;NULL&lt;/code&gt; 을 반환 하는 PostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; 트리거가 있습니다. 이러한 경우 &lt;a href=&quot;options#django.db.models.Options.select_on_save&quot;&gt; &lt;code&gt;select_on_save&lt;/code&gt; &lt;/a&gt; 옵션을 &lt;code&gt;True&lt;/code&gt; 로 설정하여 이전 알고리즘으로 되돌릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e54c507b0c09f4f3df149d0a652096ad567f2ff" translate="yes" xml:space="preserve">
          <source>In Django, web pages and other content are delivered by views. Each view is represented by a Python function (or method, in the case of class-based views). Django will choose a view by examining the URL that&amp;rsquo;s requested (to be precise, the part of the URL after the domain name).</source>
          <target state="translated">Django에서는 웹 페이지 및 기타 컨텐츠가보기로 제공됩니다. 각 뷰는 Python 함수 (또는 클래스 기반 뷰의 경우 메소드)로 표시됩니다. Django는 요청한 URL (도메인 이름 뒤에있는 URL의 일부)을 검사하여보기를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="71d28781461f30c2ecb2b20559c2484c3f2780b6" translate="yes" xml:space="preserve">
          <source>In English, that means start with any non-&lt;code&gt;'defaults'&lt;/code&gt; keyword argument that doesn&amp;rsquo;t contain a double underscore (which would indicate a non-exact lookup). Then add the contents of &lt;code&gt;defaults&lt;/code&gt;, overriding any keys if necessary, and use the result as the keyword arguments to the model class. If there are any callables in &lt;code&gt;defaults&lt;/code&gt;, evaluate them. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you&amp;rsquo;re interested, read the code.</source>
          <target state="translated">영어에서는 이중 밑줄 (정확하지 않은 조회를 나타냄)을 포함하지 않는 &lt;code&gt;'defaults'&lt;/code&gt; 이외 의 키워드 인수로 시작합니다. 그런 다음 &lt;code&gt;defaults&lt;/code&gt; 의 컨텐츠를 추가하고 필요한 경우 키를 대체하고 결과를 모델 클래스의 키워드 인수로 사용하십시오. &lt;code&gt;defaults&lt;/code&gt; 에 호출 가능한 것이 있으면 평가하십시오. 위에서 암시 한 바와 같이, 이것은 사용되는 알고리즘을 단순화 한 것이지만 모든 관련 세부 사항을 포함합니다. 내부 구현에는 이것보다 더 많은 오류 검사가 있으며 일부 추가 에지 조건을 처리합니다. 관심이 있으시면 코드를 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="2325b2ee62df43500f1c00235b487a802857009c" translate="yes" xml:space="preserve">
          <source>In HTML, a form is a collection of elements inside &lt;code&gt;&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;&lt;/code&gt; that allow a visitor to do things like enter text, select options, manipulate objects or controls, and so on, and then send that information back to the server.</source>
          <target state="translated">HTML에서 양식은 방문자가 텍스트 입력, 옵션 선택, 객체 또는 컨트롤 조작 등의 작업을 수행 한 다음 해당 정보를 다시 보낼 수있게하는 &lt;code&gt;&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;&lt;/code&gt; 내의 요소 모음입니다. 서버에.</target>
        </trans-unit>
        <trans-unit id="530abed4adee655c3e3355fa9c58c011c506ea41" translate="yes" xml:space="preserve">
          <source>In MySQL, a database table&amp;rsquo;s &amp;ldquo;collation&amp;rdquo; setting determines whether &lt;code&gt;exact&lt;/code&gt; comparisons are case-sensitive. This is a database setting, &lt;em&gt;not&lt;/em&gt; a Django setting. It&amp;rsquo;s possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the &lt;a href=&quot;../databases#mysql-collation&quot;&gt;collation section&lt;/a&gt; in the &lt;a href=&quot;../databases&quot;&gt;databases&lt;/a&gt; documentation.</source>
          <target state="translated">MySQL에서 데이터베이스 테이블의 &quot;데이터 정렬&quot;설정 은 &lt;code&gt;exact&lt;/code&gt; 비교가 대소 문자를 구분 하는지 여부를 결정합니다 . 이것은 장고 설정이 &lt;em&gt;아닌&lt;/em&gt; 데이터베이스 설정입니다. 대소 문자 구분 비교를 사용하도록 MySQL 테이블을 구성 할 수 있지만 일부 절충이 수반됩니다. 이에 대한 자세한 내용은 &lt;a href=&quot;../databases&quot;&gt;데이터베이스&lt;/a&gt; 설명서 의 &lt;a href=&quot;../databases#mysql-collation&quot;&gt;데이터 정렬 섹션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="15bb2b94418927da4ddbebe62ad941621709c6f9" translate="yes" xml:space="preserve">
          <source>In MySQL, a database table&amp;rsquo;s &lt;a href=&quot;../databases#mysql-collation&quot;&gt;collation&lt;/a&gt; determines whether string comparisons (such as the &lt;code&gt;expression&lt;/code&gt; and &lt;code&gt;substring&lt;/code&gt; of this function) are case-sensitive. Comparisons are case-insensitive by default.</source>
          <target state="translated">MySQL에서 데이터베이스 테이블의 &lt;a href=&quot;../databases#mysql-collation&quot;&gt;데이터 정렬&lt;/a&gt; 은 문자열 비교 (예 : 이 함수 의 &lt;code&gt;expression&lt;/code&gt; 및 &lt;code&gt;substring&lt;/code&gt; )가 대소 문자를 구분 하는지 여부를 결정합니다 . 비교는 기본적으로 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8421ba54de371dd641a53fee1d33a332c1c91eef" translate="yes" xml:space="preserve">
          <source>In PostGIS, &lt;code&gt;ST_Distance_Sphere&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; limit the geometry types geographic distance queries are performed with. &lt;a href=&quot;#fndistsphere15&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; However, these queries may take a long time, as great-circle distances must be calculated on the fly for &lt;em&gt;every&lt;/em&gt; row in the query. This is because the spatial index on traditional geometry fields cannot be used.</source>
          <target state="translated">PostGIS에서 &lt;code&gt;ST_Distance_Sphere&lt;/code&gt; 는 지리적 거리 쿼리가 수행되는 형상 유형을 제한 하지 &lt;em&gt;않습니다&lt;/em&gt; . &lt;a href=&quot;#fndistsphere15&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; 그러나 쿼리의 &lt;em&gt;모든&lt;/em&gt; 행에 대해 원거리를 즉시 계산해야하므로 이러한 쿼리는 시간이 오래 걸릴 수 있습니다 . 이는 기존 지오메트리 필드의 공간 인덱스를 사용할 수 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="715bef95523b40746c6e2c01e2e5141dd1cef9e3" translate="yes" xml:space="preserve">
          <source>In Python code: Using the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Python 코드에서 : &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 함수 사용.</target>
        </trans-unit>
        <trans-unit id="bd51507af923505247bc61c0fb892385469fd543" translate="yes" xml:space="preserve">
          <source>In Python regular expressions, the syntax for named regular expression groups is &lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the name of the group and &lt;code&gt;pattern&lt;/code&gt; is some pattern to match.</source>
          <target state="translated">Python 정규식에서 명명 된 정규식 그룹의 구문은 &lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt; . 여기서 &lt;code&gt;name&lt;/code&gt; 은 그룹의 이름이고 &lt;code&gt;pattern&lt;/code&gt; 은 일치 할 패턴 입니다.</target>
        </trans-unit>
        <trans-unit id="ea7465a7cc3dd82a2d9fd7afc703bdeb0a931d30" translate="yes" xml:space="preserve">
          <source>In Python, deprecation warnings are silenced by default. You must turn them on using the &lt;code&gt;-Wa&lt;/code&gt; Python command line option or the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable. For example, to show warnings while running tests:</source>
          <target state="translated">Python에서는 사용 중단 경고가 기본적으로 사용되지 않습니다. &lt;code&gt;-Wa&lt;/code&gt; Python 명령 행 옵션 또는 &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt; 환경 변수 를 사용하여 설정해야합니다 . 예를 들어 테스트를 실행하는 동안 경고를 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="1b9dd68d5fb0091a5354cd74f43e44ab9d2220be" translate="yes" xml:space="preserve">
          <source>In SQL terms, that evaluates to:</source>
          <target state="translated">SQL 용어로 다음과 같이 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="b5219e196842cd49964f7f565faa02caa768e6fc" translate="yes" xml:space="preserve">
          <source>In a Django project where the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting defines a &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine, it&amp;rsquo;s possible to instantiate a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; directly. If more than one &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine is defined, the first one will be used.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정이 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 엔진을 정의 하는 Django 프로젝트에서 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 직접 인스턴스화 할 수 있습니다. 둘 이상의 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 엔진이 정의 된 경우 첫 번째 엔진이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="78dd68fff46c7f31d6d76f4f0ceba6a02a64543d" translate="yes" xml:space="preserve">
          <source>In a class-based view, this would become:</source>
          <target state="translated">클래스 기반의 관점에서 이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5a9a78ce7cfa61e948398641be09cee26a9431e5" translate="yes" xml:space="preserve">
          <source>In a given iterable; often a list, tuple, or queryset. It&amp;rsquo;s not a common use case, but strings (being iterables) are accepted.</source>
          <target state="translated">주어진 iterable에서; 종종 목록, 튜플 또는 쿼리 셋입니다. 일반적인 사용 사례는 아니지만 문자열 (반복 가능)이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="936002e8c54e8cd2138c3c4e13a6b879a99a297c" translate="yes" xml:space="preserve">
          <source>In a hurry? Here&amp;rsquo;s how to do common aggregate queries, assuming the models above:</source>
          <target state="translated">급히? 위의 모델을 가정하여 일반적인 집계 쿼리를 수행하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="95d5174861e60b5fbde4b2d21a30e9578bd91660" translate="yes" xml:space="preserve">
          <source>In a newly created &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, the cache is empty. The first time a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is evaluated &amp;ndash; and, hence, a database query happens &amp;ndash; Django saves the query results in the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s cache and returns the results that have been explicitly requested (e.g., the next element, if the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is being iterated over). Subsequent evaluations of the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; reuse the cached results.</source>
          <target state="translated">새로 작성된 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 에서 캐시가 비어 있습니다. &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 을&lt;/a&gt; 처음 평가할 때 ( 따라서 데이터베이스 쿼리가 발생하면) Django는 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 의 캐시 에 쿼리 결과를 저장하고 명시 적으로 요청 된 결과 (예 : &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 이 반복되는 경우 다음 요소)를 반환합니다. 위에). 이후의 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 평가 는 캐시 된 결과를 재사용합니다.</target>
        </trans-unit>
        <trans-unit id="66bad3b414c450ecef328dcf5b4fecbf454e6176" translate="yes" xml:space="preserve">
          <source>In a nutshell, you will need to subclass the widget and either &lt;a href=&quot;../../topics/forms/media#assets-as-a-static-definition&quot;&gt;define a &amp;ldquo;Media&amp;rdquo; inner class&lt;/a&gt; or &lt;a href=&quot;../../topics/forms/media#dynamic-property&quot;&gt;create a &amp;ldquo;media&amp;rdquo; property&lt;/a&gt;.</source>
          <target state="translated">간단히 말해서 위젯을 서브 클래 싱하고 &lt;a href=&quot;../../topics/forms/media#assets-as-a-static-definition&quot;&gt;&quot;미디어&quot;내부 클래스를 정의&lt;/a&gt; 하거나 &lt;a href=&quot;../../topics/forms/media#dynamic-property&quot;&gt;&quot;미디어&quot;속성을 만들어야합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1142528d124b30027cb2863e674b995be99f903d" translate="yes" xml:space="preserve">
          <source>In a request to &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="8c6e077cc1b0e75309e606ecc2180a3df1935d34" translate="yes" xml:space="preserve">
          <source>In a similar way that a model class&amp;rsquo;s fields map to database fields, a form class&amp;rsquo;s fields map to HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements. (A &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; maps a model class&amp;rsquo;s fields to HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements via a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;; this is what the Django admin is based upon.)</source>
          <target state="translated">모델 클래스의 필드가 데이터베이스 필드에 매핑되는 것과 유사한 방식으로 양식 클래스의 필드는 HTML 양식 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소에 매핑됩니다 . ( &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 은 모델 클래스의 필드를 &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; 을&lt;/a&gt; 통해 HTML 양식 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소에 매핑합니다 . 이것이 Django 관리자의 기반입니다.)</target>
        </trans-unit>
        <trans-unit id="9e280d0af372eabe0c94458ef4c152f0bbcae80b" translate="yes" xml:space="preserve">
          <source>In a way similar to &lt;a href=&quot;queries#lookups-that-span-relationships&quot;&gt;Lookups that span relationships&lt;/a&gt;, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing &amp;ldquo;reverse&amp;rdquo; relationships. The lowercase name of related models and double-underscores are used here too.</source>
          <target state="translated">&lt;a href=&quot;queries#lookups-that-span-relationships&quot;&gt;관계&lt;/a&gt; 에 걸쳐있는 조회 와 유사한 방식으로 , 쿼리하는 것과 관련된 모델 또는 모델의 필드에 대한 집계 및 주석에는 &quot;역순&quot;관계 탐색이 포함될 수 있습니다. 관련 모델의 소문자 이름과 이중 밑줄도 여기에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ab27628513f607e825e71ce210049162b75905a1" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, a model object might have some of the following methods:</source>
          <target state="translated">모델 객체에는 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 외에도 다음과 같은 메소드가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="751f7712ef19a124de333a44cc737e7ace3bfe24" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; style list of tuples, &lt;code&gt;{% get_language_info_list %}&lt;/code&gt; supports lists of language codes. If you do this in your view:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 스타일 튜플 목록 외에도 &lt;code&gt;{% get_language_info_list %}&lt;/code&gt; 는 언어 코드 목록을 지원합니다. 당신이보기에서 이것을하면 :</target>
        </trans-unit>
        <trans-unit id="acfdeca1bfa2723747c23831e1f6c72abb0244fc" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt;, the &lt;code&gt;Context&lt;/code&gt; object also defines an &lt;code&gt;update()&lt;/code&gt; method. This works like &lt;code&gt;push()&lt;/code&gt; but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one.</source>
          <target state="translated">이외에 &lt;code&gt;push()&lt;/code&gt; 및 &lt;code&gt;pop()&lt;/code&gt; 는 &lt;code&gt;Context&lt;/code&gt; 객체는 또한 정의 &lt;code&gt;update()&lt;/code&gt; 메소드. 이것은 &lt;code&gt;push()&lt;/code&gt; 처럼 작동 하지만 사전을 인수로 사용하여 빈 사전 대신 스택에 해당 사전을 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="d08bf980f90aa9d354ce9fe22f93944096aa983d" translate="yes" xml:space="preserve">
          <source>In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient while MySQL Connector/Python includes &lt;a href=&quot;https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html&quot;&gt;its own&lt;/a&gt;.</source>
          <target state="translated">Django는 DB API 드라이버 외에도 ORM에서 데이터베이스 드라이버에 액세스 할 수있는 어댑터가 필요합니다. Django는 mysqlclient 용 어댑터를 제공하고 MySQL Connector / Python에는 &lt;a href=&quot;https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html&quot;&gt;자체&lt;/a&gt; 어댑터가 포함 되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4446e8a7eb646fabe3c820b8fc45118f5b558932" translate="yes" xml:space="preserve">
          <source>In addition to a database backend, you&amp;rsquo;ll need to make sure your Python database bindings are installed.</source>
          <target state="translated">데이터베이스 백엔드 외에도 Python 데이터베이스 바인딩이 설치되어 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="c94ce8da528fb522992156b232a5ab6d1b86573f" translate="yes" xml:space="preserve">
          <source>In addition to being able to add custom command line options, all &lt;a href=&quot;../ref/django-admin&quot;&gt;management commands&lt;/a&gt; can accept some default options such as &lt;a href=&quot;../ref/django-admin#cmdoption-verbosity&quot;&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-traceback&quot;&gt;&lt;code&gt;--traceback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 지정 명령 줄 옵션을 추가 할 수있을뿐 아니라 모든 &lt;a href=&quot;../ref/django-admin&quot;&gt;관리 명령&lt;/a&gt; 은 &lt;a href=&quot;../ref/django-admin#cmdoption-verbosity&quot;&gt; &lt;code&gt;--verbosity&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/django-admin#cmdoption-traceback&quot;&gt; &lt;code&gt;--traceback&lt;/code&gt; &lt;/a&gt; 과 같은 일부 기본 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="576f5fcbdcf1b7fd7c6b93e9bbe9c209051c087d" translate="yes" xml:space="preserve">
          <source>In addition to creating the new model, the &lt;code&gt;from_db()&lt;/code&gt; method must set the &lt;code&gt;adding&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; flags in the new instance&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model._state&quot;&gt;&lt;code&gt;_state&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">새 모델을 만드는 것 외에도 &lt;code&gt;from_db()&lt;/code&gt; 메서드는 새 인스턴스의 &lt;a href=&quot;#django.db.models.Model._state&quot;&gt; &lt;code&gt;_state&lt;/code&gt; &lt;/a&gt; 속성 에 &lt;code&gt;adding&lt;/code&gt; 및 &lt;code&gt;db&lt;/code&gt; 플래그를 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f180ecdd9c92f470286413ff38ed940f9bbd38e7" translate="yes" xml:space="preserve">
          <source>In addition to creating the new model, the &lt;code&gt;from_db()&lt;/code&gt; method must set the &lt;code&gt;adding&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; flags in the new instance&amp;rsquo;s &lt;code&gt;_state&lt;/code&gt; attribute.</source>
          <target state="translated">새로운 모델을 만들뿐만 아니라, &lt;code&gt;from_db()&lt;/code&gt; 메소드는 설정해야합니다 &lt;code&gt;adding&lt;/code&gt; 및 &lt;code&gt;db&lt;/code&gt; 새 인스턴스의에 플래그를 &lt;code&gt;_state&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="aa82b6442e717c223b5e675d2e5b3acbf200def3" translate="yes" xml:space="preserve">
          <source>In addition to methods provided by the &lt;a href=&quot;../syndication#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt; base class, GeoDjango&amp;rsquo;s &lt;code&gt;Feed&lt;/code&gt; class provides the following overrides. Note that these overrides may be done in multiple ways:</source>
          <target state="translated">&lt;a href=&quot;../syndication#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; &lt;/a&gt; 기본 클래스에서 제공하는 메소드 외에도 GeoDjango의 &lt;code&gt;Feed&lt;/code&gt; 클래스는 다음과 같은 재정의를 제공합니다. 이러한 재정의는 여러 가지 방법으로 수행 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e71cd07f4ac2e62e0ecd7170c96df0e8a130dfc7" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods defined in &amp;ldquo;Retrieving objects&amp;rdquo; above, the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the &lt;a href=&quot;../../ref/models/relations&quot;&gt;related objects reference&lt;/a&gt;.</source>
          <target state="translated">받는 또한 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 정의 방법 위 &quot;객체를 찾는 중&quot;는 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 관련 개체들의 세트를 처리하기 위해 사용되는 추가의 방법이있다. 각각의 개요는 다음과 같으며 자세한 내용은 &lt;a href=&quot;../../ref/models/relations&quot;&gt;관련 객체 참조&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a87715969be2e401bffbf721c0b6e38e1c930533" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;'widget'&lt;/code&gt; key described in &lt;a href=&quot;#django.forms.Widget.get_context&quot;&gt;&lt;code&gt;Widget.get_context()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;MultiValueWidget&lt;/code&gt; adds a &lt;code&gt;widget['subwidgets']&lt;/code&gt; key.</source>
          <target state="translated">또한받는 &lt;code&gt;'widget'&lt;/code&gt; 에 기재된 키 &lt;a href=&quot;#django.forms.Widget.get_context&quot;&gt; &lt;code&gt;Widget.get_context()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;MultiValueWidget&lt;/code&gt; 는 추가 &lt;code&gt;widget['subwidgets']&lt;/code&gt; 키.</target>
        </trans-unit>
        <trans-unit id="ff5784549c9c0063d76c5ca8754372f0f0124d65" translate="yes" xml:space="preserve">
          <source>In addition to the API inherited from &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;, &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt; includes several methods that can be used to interact with the underlying file:</source>
          <target state="translated">로부터 상속 된 API 외에 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 과 같은 &lt;code&gt;read()&lt;/code&gt; 와 &lt;code&gt;write()&lt;/code&gt; , &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt; &lt;code&gt;FieldFile&lt;/code&gt; 는&lt;/a&gt; 기본 파일과 상호 작용하는 데 사용할 수있는 여러 가지 방법을 포함한다 :</target>
        </trans-unit>
        <trans-unit id="a10925da11c09a74be0bd8f4c1b6704fc5cb3520" translate="yes" xml:space="preserve">
          <source>In addition to the ability to query by key, there are a number of custom lookups available for &lt;code&gt;HStoreField&lt;/code&gt;.</source>
          <target state="translated">키별로 쿼리하는 기능 외에도 &lt;code&gt;HStoreField&lt;/code&gt; 에 사용할 수있는 여러 사용자 정의 조회가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d69ed98b07f3efe4289e6ef8ac1e34397081717a" translate="yes" xml:space="preserve">
          <source>In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field&amp;rsquo;s code.</source>
          <target state="translated">위의 세부 사항 외에도 필드 코드의 효율성과 가독성을 크게 향상시킬 수있는 몇 가지 지침이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c64e028bd2cea8a3b5c6e844c13dd01044496cd" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by &lt;code&gt;FileField&lt;/code&gt;, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file.</source>
          <target state="translated">위의 방법 외에도 파일을 다루는 필드에는 고려해야 할 몇 가지 다른 특수 요구 사항이 있습니다. 데이터베이스 저장 및 검색 제어와 같이 &lt;code&gt;FileField&lt;/code&gt; 가 제공하는 대부분의 메커니즘 은 변경되지 않은 상태로 유지 될 수 있으므로 서브 클래스는 특정 유형의 파일을 지원해야하는 문제를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="2e1bc480fcebe4ce8116912b2190e867237ad26c" translate="yes" xml:space="preserve">
          <source>In addition to the context provided by &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (via &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt;&lt;code&gt;BaseDateListView&lt;/code&gt;&lt;/a&gt;), the template&amp;rsquo;s context will be:</source>
          <target state="translated">&lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt; &lt;code&gt;BaseDateListView&lt;/code&gt; &lt;/a&gt; 를 통해 &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; 에서 제공하는 컨텍스트 외에도 템플릿의 컨텍스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="78146a6623f617f370bdbb7922a1a46c904a4d3e" translate="yes" xml:space="preserve">
          <source>In addition to the context provided by &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;django.views.generic.list.MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (via &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt;&lt;code&gt;django.views.generic.dates.BaseDateListView&lt;/code&gt;&lt;/a&gt;), the template&amp;rsquo;s context will be:</source>
          <target state="translated">&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;django.views.generic.list.MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt; &lt;code&gt;django.views.generic.dates.BaseDateListView&lt;/code&gt; &lt;/a&gt; 를 통해 ) 에서 제공하는 컨텍스트 외에도 템플리트의 컨텍스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9f847ce1f109048a1fb1aa3ac7bebe988e89f275" translate="yes" xml:space="preserve">
          <source>In addition to the following, all extracts for &lt;code&gt;DateField&lt;/code&gt; listed above may also be used on &lt;code&gt;DateTimeField&lt;/code&gt;s .</source>
          <target state="translated">다음에 추가하여 위에 나열된 &lt;code&gt;DateField&lt;/code&gt; 의 모든 추출을 &lt;code&gt;DateTimeField&lt;/code&gt; 에서 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cc163a8af460b22769a0a66d0e1689102a23ab92" translate="yes" xml:space="preserve">
          <source>In addition to the listed methods, &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; exposes the following attributes and methods of its &lt;code&gt;file&lt;/code&gt; object: &lt;code&gt;encoding&lt;/code&gt;, &lt;code&gt;fileno&lt;/code&gt;, &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;isatty&lt;/code&gt;, &lt;code&gt;newlines&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readinto&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;readlines&lt;/code&gt;, &lt;code&gt;seek&lt;/code&gt;, &lt;code&gt;tell&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;writelines&lt;/code&gt;, &lt;code&gt;readable()&lt;/code&gt;, &lt;code&gt;writable()&lt;/code&gt;, and &lt;code&gt;seekable()&lt;/code&gt;.</source>
          <target state="translated">나열된 메소드 외에도 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;file&lt;/code&gt; 오브젝트 의 다음 속성 및 메소드를 표시 합니다. &lt;code&gt;encoding&lt;/code&gt; , &lt;code&gt;fileno&lt;/code&gt; , &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;isatty&lt;/code&gt; , &lt;code&gt;newlines&lt;/code&gt; , &lt;code&gt;read&lt;/code&gt; , &lt;code&gt;readinto&lt;/code&gt; , &lt;code&gt;readline&lt;/code&gt; , &lt;code&gt;readlines&lt;/code&gt; , &lt;code&gt;seek&lt;/code&gt; , &lt;code&gt;tell&lt;/code&gt; , &lt;code&gt;truncate&lt;/code&gt; , &lt;code&gt;write&lt;/code&gt; , &lt;code&gt;writelines&lt;/code&gt; , &lt;code&gt;readable()&lt;/code&gt; , &lt;code&gt;writable()&lt;/code&gt; 및 &lt;code&gt;seekable()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d138f7de7bbc3af07a0fb71bb0320df5a1bd9111" translate="yes" xml:space="preserve">
          <source>In addition to the officially supported databases, there are &lt;a href=&quot;../ref/databases#third-party-notes&quot;&gt;backends provided by 3rd parties&lt;/a&gt; that allow you to use other databases with Django.</source>
          <target state="translated">공식적으로 지원되는 데이터베이스 외에도 Django와 함께 다른 데이터베이스를 사용할 수있는 &lt;a href=&quot;../ref/databases#third-party-notes&quot;&gt;타사에서 제공하는 백엔드&lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="38ffcb3817bbbd2551f77d39d51caba8b51562b9" translate="yes" xml:space="preserve">
          <source>In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:</source>
          <target state="translated">공식적으로 지원되는 데이터베이스 외에도 Django에서 다른 데이터베이스를 사용할 수있는 타사에서 제공하는 백엔드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1db79a28d08359b046f49991e77de295d5e703c7" translate="yes" xml:space="preserve">
          <source>In addition to the optional arguments of its parent &lt;a href=&quot;#django.core.validators.RegexValidator&quot;&gt;&lt;code&gt;RegexValidator&lt;/code&gt;&lt;/a&gt; class, &lt;code&gt;URLValidator&lt;/code&gt; accepts an extra optional attribute:</source>
          <target state="translated">부모의 선택적 인수 외에도 &lt;a href=&quot;#django.core.validators.RegexValidator&quot;&gt; &lt;code&gt;RegexValidator&lt;/code&gt; 의&lt;/a&gt; 클래스 &lt;code&gt;URLValidator&lt;/code&gt; 은 별도의 선택적 속성을 허용합니다</target>
        </trans-unit>
        <trans-unit id="0a4a0c3d6f62b599c6443f955946a232e25c4126" translate="yes" xml:space="preserve">
          <source>In addition to the options of the &lt;code&gt;json&lt;/code&gt; serializer, the &lt;code&gt;geojson&lt;/code&gt; serializer accepts the following additional option when it is called by &lt;code&gt;serializers.serialize()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt; serializer 의 옵션 외에도 &lt;code&gt;geojson&lt;/code&gt; serializer는 &lt;code&gt;serializers.serialize()&lt;/code&gt; 의해 호출 될 때 다음 추가 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="75907cde4d6071df1af2b10556dffed4d3fefdf2" translate="yes" xml:space="preserve">
          <source>In addition to the regular &lt;a href=&quot;../../forms/fields#core-field-arguments&quot;&gt;form field arguments&lt;/a&gt;, GeoDjango form fields take the following optional arguments.</source>
          <target state="translated">일반 &lt;a href=&quot;../../forms/fields#core-field-arguments&quot;&gt;양식 필드 인수&lt;/a&gt; 외에도 GeoDjango 양식 필드에는 다음과 같은 선택적 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fab30d8fa172502cea3f7aebdb228bfeb4d6d2f0" translate="yes" xml:space="preserve">
          <source>In addition to the regular &lt;a href=&quot;../../models/fields#common-model-field-options&quot;&gt;Field options&lt;/a&gt; available for Django model fields, spatial fields have the following additional options. All are optional.</source>
          <target state="translated">Django 모델 필드에 사용 가능한 일반 &lt;a href=&quot;../../models/fields#common-model-field-options&quot;&gt;필드 옵션&lt;/a&gt; 외에도 공간 필드에는 다음과 같은 추가 옵션이 있습니다. 모두 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="bcac2853c813ab81bdb91abe9b8fe01ccb15cb5c" translate="yes" xml:space="preserve">
          <source>In addition to the special attributes that are available for &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; also has &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; attributes.</source>
          <target state="translated">사용할 수있는 특별한 속성 외에도 &lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; 와&lt;/a&gt; , &lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; 는&lt;/a&gt; 또한이 &lt;code&gt;height&lt;/code&gt; 와 &lt;code&gt;width&lt;/code&gt; 속성을.</target>
        </trans-unit>
        <trans-unit id="14e5e76a34a70eeb072f8cbe5905434d81e71e1b" translate="yes" xml:space="preserve">
          <source>In addition to these configuration steps, you&amp;rsquo;ll also need to actually serve the static files.</source>
          <target state="translated">이러한 구성 단계 외에도 실제로 정적 파일을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2c243a6eca738bdaa3a92ec6f2b8a90ad5218f3" translate="yes" xml:space="preserve">
          <source>In addition to these, &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; always enables &lt;code&gt;'django.template.context_processors.csrf'&lt;/code&gt;. This is a security related context processor required by the admin and other contrib apps, and, in case of accidental misconfiguration, it is deliberately hardcoded in and cannot be turned off in the &lt;code&gt;context_processors&lt;/code&gt; option.</source>
          <target state="translated">이 외에도 &lt;a href=&quot;#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; 는&lt;/a&gt; 항상 &lt;code&gt;'django.template.context_processors.csrf'&lt;/code&gt; 를 활성화 합니다. 이것은 관리자 및 기타 contrib 앱에 필요한 보안 관련 컨텍스트 프로세서이며 실수로 잘못 구성한 경우 의도적으로 하드 코딩되어 있으며 &lt;code&gt;context_processors&lt;/code&gt; 옵션 에서 끌 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="09d1558db313d92c5461aa77b23628bc5f54ef5a" translate="yes" xml:space="preserve">
          <source>In addition to web links, &lt;code&gt;urlize&lt;/code&gt; also converts email addresses into &lt;code&gt;mailto:&lt;/code&gt; links. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Send questions to foo@example.com&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Send questions to &amp;lt;a href=&quot;mailto:foo@example.com&quot;&amp;gt;foo@example.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; 는 웹 링크 외에도 이메일 주소를 &lt;code&gt;mailto:&lt;/code&gt; 링크 로 변환 합니다. 경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Send questions to foo@example.com&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;Send questions to &amp;lt;a href=&quot;mailto:foo@example.com&quot;&amp;gt;foo@example.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb3cc5db265feffd76588b55bfe91ebe04db4bd8" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;LineString&lt;/code&gt; objects may also be created by passing in a single sequence of coordinate or &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">또한 &lt;code&gt;LineString&lt;/code&gt; 객체는 단일 좌표 시퀀스 또는 &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt; 객체 를 전달하여 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="092a2edd2b26995b6c73e6e9e9e504760cdc3b10" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;QueryDict&lt;/code&gt; has the following methods:</source>
          <target state="translated">또한 &lt;code&gt;QueryDict&lt;/code&gt; 에는 다음과 같은 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="003bc4accc874f1fef4668d4b87997f905b9b76e" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;manage.py&lt;/code&gt; is automatically created in each Django project. It does the same thing as &lt;code&gt;django-admin&lt;/code&gt; but also sets the &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable so that it points to your project&amp;rsquo;s &lt;code&gt;settings.py&lt;/code&gt; file.</source>
          <target state="translated">또한 각 장고 프로젝트에서 &lt;code&gt;manage.py&lt;/code&gt; 가 자동으로 생성됩니다. &lt;code&gt;django-admin&lt;/code&gt; 과 동일한 작업을 수행 하지만 프로젝트의 &lt;code&gt;settings.py&lt;/code&gt; 파일을 가리 키도록 &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 환경 변수도 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="42da778e8ed7bdaf3955ad5f72d2ff5536335b45" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;message/rfc822&lt;/code&gt; attachments will no longer be base64-encoded in violation of &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046#section-5.2.1&lt;/strong&gt;&lt;/a&gt;, which can cause issues with displaying the attachments in &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046 # section-5.2.1&lt;/strong&gt;&lt;/a&gt; 을 위반 하여 &lt;code&gt;message/rfc822&lt;/code&gt; 첨부 파일이 더 이상 base64로 인코딩되지 않으므로 &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; 및 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt; 에서 첨부 파일을 표시하는 데 문제가 발생할 수 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6af43c6d389d8d50b42845ec056449c2468a39d7" translate="yes" xml:space="preserve">
          <source>In addition, &lt;em&gt;message/rfc822&lt;/em&gt; attachments will no longer be base64-encoded in violation of &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046#section-5.2.1&lt;/strong&gt;&lt;/a&gt;, which can cause issues with displaying the attachments in &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;em&gt;메시지 / rfc822&lt;/em&gt; 첨부 파일은 &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046 # section-5.2.1&lt;/strong&gt;&lt;/a&gt; 을 위반하여 더 이상 base64 인코딩되지 않으므로 &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; 및 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt; 에서 첨부 파일을 표시하는 데 문제가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e4cb7c7a0731de3ea837edf11710dd02a514d0f" translate="yes" xml:space="preserve">
          <source>In addition, Django applies the following rule: if you set &lt;code&gt;editable=False&lt;/code&gt; on the model field, &lt;em&gt;any&lt;/em&gt; form created from the model via &lt;code&gt;ModelForm&lt;/code&gt; will not include that field.</source>
          <target state="translated">또한, 장고는 다음과 같은 규칙을 적용 : 사용자가 설정 한 경우 &lt;code&gt;editable=False&lt;/code&gt; 모델 필드에, &lt;em&gt;어떤&lt;/em&gt; 을 통해 모델에서 생성 된 형태 &lt;code&gt;ModelForm&lt;/code&gt; 는 해당 필드가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="30a99ac2f20a9d7ce513beb52192fea90a5cd0c6" translate="yes" xml:space="preserve">
          <source>In addition, Django provides enumeration types that you can subclass to define choices in a concise way:</source>
          <target state="translated">또한 Django는 서브 클래스로 간결한 방식으로 선택을 정의 할 수있는 열거 유형을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c8a09597939bdcb71e0faa18c3b3a20ccef0e692" translate="yes" xml:space="preserve">
          <source>In addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes.</source>
          <target state="translated">또한 MySQL은 거의 모든 스키마 작업에 대해 테이블을 완전히 다시 작성하며 일반적으로 테이블의 행 수에 비례하여 열을 추가하거나 제거하는 데 시간이 걸립니다. 느린 하드웨어에서는 백만 행당 1 분보다 나빠질 수 있습니다. 몇 백만 행으로 테이블에 몇 개의 열을 추가하면 사이트가 10 분 이상 잠길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80f1a60fae36c3742c0b6b4ed6f4684b7d6979d1" translate="yes" xml:space="preserve">
          <source>In addition, add the &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; setting so that the libraries can be found by Python:</source>
          <target state="translated">또한 Python에서 라이브러리를 찾을 수 있도록 &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; 설정을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d00c3d27b51ce30fb9025d5d42429ee3fad5033" translate="yes" xml:space="preserve">
          <source>In addition, as JSON supports only string keys, note that using non-string keys in &lt;code&gt;request.session&lt;/code&gt; won&amp;rsquo;t work as expected:</source>
          <target state="translated">또한 JSON은 문자열 키만 지원하므로 &lt;code&gt;request.session&lt;/code&gt; 에서 문자열이 아닌 키를 사용 하면 예상대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="193e94f351cba3a0360a6e545faac2e59e822fc0" translate="yes" xml:space="preserve">
          <source>In addition, coordinates/components of the geometry may added or modified, just like a Python list:</source>
          <target state="translated">또한 지오메트리의 좌표 / 구성 요소는 Python 목록과 같이 추가 또는 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ddf753e80872dd11269d2a3533531f2d9a256cc" translate="yes" xml:space="preserve">
          <source>In addition, each generated form field has attributes set as follows:</source>
          <target state="translated">또한 생성 된 각 양식 필드에는 다음과 같이 속성이 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0d877515ca9c31768db2b55639e4f4d3d64d88a" translate="yes" xml:space="preserve">
          <source>In addition, for HTTPS requests, strict referer checking is done by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;. This means that even if a subdomain can set or modify cookies on your domain, it can&amp;rsquo;t force a user to post to your application since that request won&amp;rsquo;t come from your own exact domain.</source>
          <target state="translated">또한 HTTPS 요청의 경우 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 가 엄격한 참조 검사를 수행합니다 . 이는 하위 도메인이 도메인에서 쿠키를 설정하거나 수정할 수있는 경우에도 요청이 사용자의 정확한 도메인에서 나오지 않기 때문에 사용자가 애플리케이션에 게시하도록 강제 할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="609772e6e1f8a2aa06a07103e8048bef77e6acf0" translate="yes" xml:space="preserve">
          <source>In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping.</source>
          <target state="translated">또한 템플릿 시스템을 사용하여 HTML 이외의 것을 출력하는 경우에는 이스케이프가 필요한 문자와 단어가 완전히 분리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="271507652d7f3c6c044a78d1ab9d1f40af16ab01" translate="yes" xml:space="preserve">
          <source>In addition, if your class provides local file storage, it must override the &lt;code&gt;path()&lt;/code&gt; method.</source>
          <target state="translated">또한 클래스가 로컬 파일 스토리지를 제공하는 경우 &lt;code&gt;path()&lt;/code&gt; 메소드를 대체해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f41a663166406e5affa41f624b0f5ba10f8271ea" translate="yes" xml:space="preserve">
          <source>In addition, modify the &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting to include &lt;a href=&quot;../admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;world&lt;/code&gt; (your newly created application):</source>
          <target state="translated">또한 &lt;a href=&quot;../admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;world&lt;/code&gt; (새로 만든 응용 프로그램) 를 포함 하도록 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0cf7f24ea8838462019e7f2d8be131526d91e9c" translate="yes" xml:space="preserve">
          <source>In addition, only &lt;code&gt;LIMIT&lt;/code&gt;, &lt;code&gt;OFFSET&lt;/code&gt;, &lt;code&gt;COUNT(*)&lt;/code&gt;, &lt;code&gt;ORDER BY&lt;/code&gt;, and specifying columns (i.e. slicing, &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#django.db.models.query.QuerySet.values_list&quot;&gt;&lt;code&gt;values_list()&lt;/code&gt;&lt;/a&gt;) are allowed on the resulting &lt;code&gt;QuerySet&lt;/code&gt;. Further, databases place restrictions on what operations are allowed in the combined queries. For example, most databases don&amp;rsquo;t allow &lt;code&gt;LIMIT&lt;/code&gt; or &lt;code&gt;OFFSET&lt;/code&gt; in the combined queries.</source>
          <target state="translated">또한, 오직 &lt;code&gt;LIMIT&lt;/code&gt; , &lt;code&gt;OFFSET&lt;/code&gt; , &lt;code&gt;COUNT(*)&lt;/code&gt; , &lt;code&gt;ORDER BY&lt;/code&gt; , 및 열을 지정 (즉, 슬라이싱, &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#django.db.models.query.QuerySet.values_list&quot;&gt; &lt;code&gt;values_list()&lt;/code&gt; &lt;/a&gt; ) 생성에 허용되는 &lt;code&gt;QuerySet&lt;/code&gt; . 또한 데이터베이스는 결합 된 쿼리에서 허용되는 작업에 제한을 둡니다. 예를 들어, 대부분의 데이터베이스는 결합 된 쿼리에서 &lt;code&gt;LIMIT&lt;/code&gt; 또는 &lt;code&gt;OFFSET&lt;/code&gt; 을 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="073651aeeb0daff1ea4b8f8b97a8fcd077d19c9e" translate="yes" xml:space="preserve">
          <source>In addition, shapefiles also support attribute fields that may contain additional data. Here are the fields on the World Borders layer:</source>
          <target state="translated">또한 shapefile은 추가 데이터를 포함 할 수있는 속성 필드도 지원합니다. World Borders 레이어의 필드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6182146b091f830549eb231420eb3ef3684d03ab" translate="yes" xml:space="preserve">
          <source>In addition, some objects are automatically created just after &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; creates a table to hold them in a database:</source>
          <target state="translated">또한 일부 오브젝트는 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 가 데이터베이스에 보유 할 테이블을 작성한 직후에 자동으로 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="602a62df0ea4d621c4bb672ddce2276a2ba75e0f" translate="yes" xml:space="preserve">
          <source>In addition, the concrete base classes of the model are stored as pointers, so you must always keep base classes around for as long as there is a migration that contains a reference to them. On the plus side, methods and managers from these base classes inherit normally, so if you absolutely need access to these you can opt to move them into a superclass.</source>
          <target state="translated">또한 모델의 구체적인 기본 클래스는 포인터로 저장되므로 참조를 포함하는 마이그레이션이있는 한 항상 기본 클래스를 유지해야합니다. 또한 기본 클래스의 메소드와 관리자는 정상적으로 상속되므로 절대적으로 액세스 해야하는 경우 수퍼 클래스로 옮길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc2eb2c3ab555cfa8732961afb123db30b159c9" translate="yes" xml:space="preserve">
          <source>In addition, there&amp;rsquo;s a utility function:</source>
          <target state="translated">또한 유틸리티 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cb0790e9c7133e4cc81702a5b48be8ffd4efd86" translate="yes" xml:space="preserve">
          <source>In addition, to allow Python template files that contain Django template language syntax while also preventing packaging systems from trying to byte-compile invalid &lt;code&gt;*.py&lt;/code&gt; files, template files ending with &lt;code&gt;.py-tpl&lt;/code&gt; will be renamed to &lt;code&gt;.py&lt;/code&gt;.</source>
          <target state="translated">또한 Django 템플릿 언어 구문이 포함 된 Python 템플릿 파일을 허용하면서 패키징 시스템이 잘못된 &lt;code&gt;*.py&lt;/code&gt; 파일 을 바이트 컴파일하지 못하게하기 위해 &lt;code&gt;.py-tpl&lt;/code&gt; 로 끝나는 템플릿 파일의 이름은 &lt;code&gt;.py&lt;/code&gt; 로 변경됩니다 .</target>
        </trans-unit>
        <trans-unit id="f39294b8048c718f8bb8084ffe106424b63a64a2" translate="yes" xml:space="preserve">
          <source>In addition, to cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which automates the process.</source>
          <target state="translated">또한 로딩 및 렌더링 템플릿의 반복적 인 특성을 줄이기 위해 Django는 프로세스를 자동화하는 바로 가기 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cb738cfe7b94bcd3750e995720f727d510812fe0" translate="yes" xml:space="preserve">
          <source>In addition, try to avoid returning values as positional arguments; where possible, return values as keyword arguments for maximum future compatibility. If you change the names of things more often than their position in the constructor&amp;rsquo;s argument list, you might prefer positional, but bear in mind that people will be reconstructing your field from the serialized version for quite a while (possibly years), depending how long your migrations live for.</source>
          <target state="translated">또한 위치 인수로 값을 반환하지 않도록하십시오. 가능한 경우 최대 향후 호환성을 위해 값을 키워드 인수로 반환합니다. 생성자의 인수 목록에서 위치보다 더 자주 사물의 이름을 변경하는 경우 위치 지정을 선호 할 수 있지만 사람들이 얼마나 오래 (아마도 몇 년) 직렬화 된 버전에서 필드를 재구성 할 것이라는 점을 명심하십시오. 당신의 마이그레이션이 살아 있습니다.</target>
        </trans-unit>
        <trans-unit id="be8f95e23db63b8ed19a44c8deba6d75e37d2dc0" translate="yes" xml:space="preserve">
          <source>In addition, try to avoid returning values as positional arguments; where possible, return values as keyword arguments for maximum future compatibility. Of course, if you change the names of things more often than their position in the constructor&amp;rsquo;s argument list, you might prefer positional, but bear in mind that people will be reconstructing your field from the serialized version for quite a while (possibly years), depending how long your migrations live for.</source>
          <target state="translated">또한 값을 위치 인수로 반환하지 않도록하십시오. 가능한 경우 미래의 호환성을 극대화하기 위해 값을 키워드 인수로 반환하십시오. 물론 생성자의 인수 목록에서 자신의 위치보다 사물의 이름을 더 자주 변경하는 경우 위치를 선호 할 수 있지만 사람들은 일련의 버전에서 필드를 꽤 오랫동안 (아마도 몇 년 동안) 재구성 할 것입니다. 마이그레이션 기간에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d3643c4f39cc7b043d095a8d10a730426bd124d2" translate="yes" xml:space="preserve">
          <source>In addition, you may run into a &lt;code&gt;CircularDependencyError&lt;/code&gt; when running your migrations as Django won&amp;rsquo;t be able to automatically break the dependency loop due to the dynamic dependency. If you see this error, you should break the loop by moving the models depended on by your user model into a second migration. (You can try making two normal models that have a &lt;code&gt;ForeignKey&lt;/code&gt; to each other and seeing how &lt;code&gt;makemigrations&lt;/code&gt; resolves that circular dependency if you want to see how it&amp;rsquo;s usually done.)</source>
          <target state="translated">또한 Django가 동적 종속성으로 인해 종속성 루프를 자동으로 중단 할 수 없으므로 마이그레이션을 실행할 때 &lt;code&gt;CircularDependencyError&lt;/code&gt; 가 발생할 수 있습니다 . 이 오류가 표시되면 사용자 모델이 의존하는 모델을 두 번째 마이그레이션으로 이동하여 루프를 끊어야합니다. ( &lt;code&gt;ForeignKey&lt;/code&gt; 가 서로 다른 두 개의 일반 모델을 만들고 일반적인 &lt;code&gt;makemigrations&lt;/code&gt; 방법을 확인하려는 경우 makemigrations 가 순환 종속성을 어떻게 해결하는지 확인할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="6c07cdf9206331466980546d8b1cf47350f9dec8" translate="yes" xml:space="preserve">
          <source>In all cases the name of the directory containing the translation is expected to be named using &lt;a href=&quot;index#term-locale-name&quot;&gt;locale name&lt;/a&gt; notation. E.g. &lt;code&gt;de&lt;/code&gt;, &lt;code&gt;pt_BR&lt;/code&gt;, &lt;code&gt;es_AR&lt;/code&gt;, etc. Untranslated strings for territorial language variants use the translations of the generic language. For example, untranslated &lt;code&gt;pt_BR&lt;/code&gt; strings use &lt;code&gt;pt&lt;/code&gt; translations.</source>
          <target state="translated">모든 경우에 번역을 포함하는 디렉토리의 이름은 &lt;a href=&quot;index#term-locale-name&quot;&gt;로케일 이름&lt;/a&gt; 표기법을 사용하여 명명 될 것으로 예상 됩니다. 예를 들어 &lt;code&gt;de&lt;/code&gt; , &lt;code&gt;pt_BR&lt;/code&gt; , &lt;code&gt;es_AR&lt;/code&gt; 등입니다. 영토 언어 변형의 번역되지 않은 문자열은 일반 언어의 번역을 사용합니다. 예를 들어, 번역되지 않은 &lt;code&gt;pt_BR&lt;/code&gt; 문자열은 &lt;code&gt;pt&lt;/code&gt; 변환을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="72cd5697475afea58d2e7c1ba3fcfc8ea3cf3530" translate="yes" xml:space="preserve">
          <source>In all other respects, the &lt;code&gt;InlineModelAdmin&lt;/code&gt; is exactly the same as any other. You can customize the appearance using any of the normal &lt;code&gt;ModelAdmin&lt;/code&gt; properties.</source>
          <target state="translated">다른 모든 측면에서 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 은 다른 것과 동일합니다. 일반적인 &lt;code&gt;ModelAdmin&lt;/code&gt; 속성을 사용하여 모양을 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9d5e238bac9efc00000ed6f69e2747cbb0fb9ac" translate="yes" xml:space="preserve">
          <source>In an &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object, the &lt;a href=&quot;#django.http.HttpRequest.GET&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; attributes are instances of &lt;code&gt;django.http.QueryDict&lt;/code&gt;, a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt;, pass multiple values for the same key.</source>
          <target state="translated">에서 &lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; 객체의 &lt;a href=&quot;#django.http.HttpRequest.GET&quot;&gt; &lt;code&gt;GET&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST&lt;/code&gt; 의&lt;/a&gt; 속성의 인스턴스 &lt;code&gt;django.http.QueryDict&lt;/code&gt; 는 , 사전과 같은 동일한 키에 대해 여러 값을 처리하는 사용자 정의 클래스입니다. &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; 과 같은 일부 HTML 양식 요소 는 동일한 키에 대해 여러 값을 전달 하기 때문에 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="125593a33b52de9b2649a843eba4f9a9f643a393" translate="yes" xml:space="preserve">
          <source>In any case, you should always be able to &lt;a href=&quot;#spatialite-source&quot;&gt;install from source&lt;/a&gt;.</source>
          <target state="translated">어쨌든 항상 &lt;a href=&quot;#spatialite-source&quot;&gt;source&lt;/a&gt; 에서 설치할 수 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="26372be3d62eb8474ab024118b757738445b8b1e" translate="yes" xml:space="preserve">
          <source>In any directory named in the &lt;a href=&quot;settings#std:setting-FIXTURE_DIRS&quot;&gt;&lt;code&gt;FIXTURE_DIRS&lt;/code&gt;&lt;/a&gt; setting</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-FIXTURE_DIRS&quot;&gt; &lt;code&gt;FIXTURE_DIRS&lt;/code&gt; &lt;/a&gt; 설정에 이름이 지정된 디렉토리에서</target>
        </trans-unit>
        <trans-unit id="c617f38771b04f4bc99f2332d1dc8deca3569a57" translate="yes" xml:space="preserve">
          <source>In any template that uses a POST form, use the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; tag inside the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element if the form is for an internal URL, e.g.:</source>
          <target state="translated">POST 양식을 사용하는 템플리트 에서 양식이 내부 URL &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소 안에 csrf_token 태그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3268f78806231ff9d52336b4daa2ccb81e4bcf58" translate="yes" xml:space="preserve">
          <source>In both ASGI and WSGI mode, you can still safely use asynchronous support to run code concurrently rather than serially. This is especially handy when dealing with external APIs or data stores.</source>
          <target state="translated">ASGI 및 WSGI 모드에서 모두 비동기 지원을 사용하여 직렬이 아닌 동시에 코드를 실행할 수 있습니다. 이것은 외부 API 또는 데이터 저장소를 다룰 때 특히 편리합니다.</target>
        </trans-unit>
        <trans-unit id="9584b79fc48ff0575ab4a3e73aa30d63351d2fd1" translate="yes" xml:space="preserve">
          <source>In both cases, &amp;ldquo;absolute path&amp;rdquo; means a URL that doesn&amp;rsquo;t include the protocol or domain. Examples:</source>
          <target state="translated">두 경우 모두 &quot;절대 경로&quot;는 프로토콜 또는 도메인을 포함하지 않는 URL을 의미합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="ad26be7567d5ea62f6cbf975fb69c51dd3b9c5ff" translate="yes" xml:space="preserve">
          <source>In case a template var (&lt;code&gt;myvar&lt;/code&gt; above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs.</source>
          <target state="translated">템플릿 var ( 위의 &lt;code&gt;myvar&lt;/code&gt; )가 태그에 전달되면 태그는 먼저 런타임에 이러한 변수를 문자열로 확인한 다음 메시지 카탈로그에서 해당 문자열을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="2ac2ff181891a9196cfcb6c36702ae8d31f48781" translate="yes" xml:space="preserve">
          <source>In case it is a callable, it accepts the model instance as a parameter. For example:</source>
          <target state="translated">호출 가능한 경우 모델 인스턴스를 매개 변수로 승인합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c754ae6f658d028d73d2c46131b5071580be6e76" translate="yes" xml:space="preserve">
          <source>In case you want to override a setting for a test method, Django provides the &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; decorator (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 318&lt;/strong&gt;&lt;/a&gt;). It&amp;rsquo;s used like this:</source>
          <target state="translated">테스트 방법에 대한 설정을 재정의하려는 경우 Django는 &lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt; 데코레이터를 제공합니다 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 318&lt;/strong&gt;&lt;/a&gt; 참조 ). 다음과 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="14bf4df5347afc16b3429fb63cb4de3162b6824c" translate="yes" xml:space="preserve">
          <source>In case you want to refer to files in one of the locations with an additional namespace, you can &lt;strong&gt;optionally&lt;/strong&gt; provide a prefix as &lt;code&gt;(prefix, path)&lt;/code&gt; tuples, e.g.:</source>
          <target state="translated">추가 네임 스페이스가있는 위치 중 하나에있는 파일을 참조하려는 경우 &lt;strong&gt;선택적&lt;/strong&gt; 으로 접두사 &lt;code&gt;(prefix, path)&lt;/code&gt; 튜플을 제공 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d992ed68ceac74ca140820c822217fa435f7818c" translate="yes" xml:space="preserve">
          <source>In case your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 필드를 저장할 때 일반 조회 매개 변수에 사용 된 변환과 동일하지 않은 특수 변환이 필요한 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_save&quot;&gt; &lt;code&gt;get_db_prep_save()&lt;/code&gt; &lt;/a&gt; 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7465849737f4a0d865ae26d03454c4d9bb925c5" translate="yes" xml:space="preserve">
          <source>In case your model defines a range using two fields, instead of the native PostgreSQL range types, you should write an expression that uses the equivalent function (e.g. &lt;code&gt;TsTzRange()&lt;/code&gt;), and use the delimiters for the field. Most often, the delimiters will be &lt;code&gt;'[)'&lt;/code&gt;, meaning that the lower bound is inclusive and the upper bound is exclusive. You may use the &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeBoundary&quot;&gt;&lt;code&gt;RangeBoundary&lt;/code&gt;&lt;/a&gt; that provides an expression mapping for the &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY&quot;&gt;range boundaries&lt;/a&gt;. For example:</source>
          <target state="translated">모델이 기본 PostgreSQL 범위 유형 대신 두 개의 필드를 사용하여 범위를 정의하는 경우 동등한 함수 (예 : &lt;code&gt;TsTzRange()&lt;/code&gt; ) 를 사용하는 표현식을 작성 하고 필드에 구분 기호를 사용해야합니다. 대부분의 경우 구분 기호는 &lt;code&gt;'[)'&lt;/code&gt; 이며, 하한이 포함되고 상한이 독점임을 의미합니다. &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY&quot;&gt;범위 경계에&lt;/a&gt; 대한 식 매핑을 제공하는 &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeBoundary&quot;&gt; &lt;code&gt;RangeBoundary&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="051cd6e750abe4a0440743fc7195e3b28df1345b" translate="yes" xml:space="preserve">
          <source>In cases 1 and 2, the value of the &lt;code&gt;backend&lt;/code&gt; argument or the &lt;code&gt;user.backend&lt;/code&gt; attribute should be a dotted import path string (like that found in &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;), not the actual backend class.</source>
          <target state="translated">경우 1과 2에서, &lt;code&gt;backend&lt;/code&gt; 인수 또는 &lt;code&gt;user.backend&lt;/code&gt; 속성 의 값은 실제 백엔드 클래스가 아닌 점으로 구분 된 가져 오기 경로 문자열이어야합니다 ( &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; 와 유사 ).</target>
        </trans-unit>
        <trans-unit id="d8468a1c5eceb7ad498210c570f09ce1a370656f" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; objects, which are created automatically by Django, &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects are your responsibility. Each view you write is responsible for instantiating, populating, and returning an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django에서 자동으로 생성되는 &lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 객체와 달리 &lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체는 사용자의 책임입니다. 작성하는 각 뷰는 &lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 인스턴스화, 채우기 및 리턴을 담당합니다 .</target>
        </trans-unit>
        <trans-unit id="f060f555e740ac3beb8b7312bc9eac7c1f9e16bd" translate="yes" xml:space="preserve">
          <source>In detail, Django automatically opens a connection to the database whenever it needs one and doesn&amp;rsquo;t have one already &amp;mdash; either because this is the first connection, or because the previous connection was closed.</source>
          <target state="translated">구체적으로, Django는 데이터베이스가 필요할 때마다 데이터베이스에 대한 연결을 자동으로 엽니 다. 첫 번째 연결이거나 이전 연결이 닫 혔기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="34d24d63eafec4abb1397d46acb8a0d53758ad7a" translate="yes" xml:space="preserve">
          <source>In each of these places, the language preference is expected to be in the standard &lt;a href=&quot;index#term-language-code&quot;&gt;language format&lt;/a&gt;, as a string. For example, Brazilian Portuguese is &lt;code&gt;pt-br&lt;/code&gt;.</source>
          <target state="translated">이러한 각 위치에서 언어 환경 설정은 표준 &lt;a href=&quot;index#term-language-code&quot;&gt;언어 형식&lt;/a&gt; 인 문자열로 예상됩니다 . 예를 들어 브라질 포르투갈어는 &lt;code&gt;pt-br&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8cd7c1e1e4252d27a4de97d1e3a8a42f6ba5b40c" translate="yes" xml:space="preserve">
          <source>In either case, using only one style within a given regex is recommended. When both styles are mixed, any unnamed groups are ignored and only named groups are passed to the view function.</source>
          <target state="translated">두 경우 모두 주어진 정규 표현식 내에서 하나의 스타일 만 사용하는 것이 좋습니다. 두 스타일이 혼합되면 명명되지 않은 그룹은 무시되고 명명 된 그룹 만보기 기능으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="eca740cfe82332cf351f75edde40f7eee9f36561" translate="yes" xml:space="preserve">
          <source>In fact if your form is going to be used to directly add or edit a Django model, a &lt;a href=&quot;modelforms&quot;&gt;ModelForm&lt;/a&gt; can save you a great deal of time, effort, and code, because it will build a form, along with the appropriate fields and their attributes, from a &lt;code&gt;Model&lt;/code&gt; class.</source>
          <target state="translated">실제로 Django 모델을 직접 추가하거나 편집하는 데 양식을 사용하는 경우 &lt;a href=&quot;modelforms&quot;&gt;ModelForm&lt;/a&gt; 을 사용하면 적절한 필드 및 해당 속성과 함께 양식을 작성하므로 많은 시간, 노력 및 코드를 절약 할 수 있습니다. 하는에서 &lt;code&gt;Model&lt;/code&gt; 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="7d9a9c622b4c3cad5652ef1faa625de607bb2ed0" translate="yes" xml:space="preserve">
          <source>In fact, most lookups with &lt;code&gt;__abs&lt;/code&gt; could be implemented as range queries like this, and on most database backends it is likely to be more sensible to do so as you can make use of the indexes. However with PostgreSQL you may want to add an index on &lt;code&gt;abs(change)&lt;/code&gt; which would allow these queries to be very efficient.</source>
          <target state="translated">실제로 &lt;code&gt;__abs&lt;/code&gt; 를 사용하는 대부분의 조회는 이와 같은 범위 쿼리로 구현 될 수 있으며 대부분의 데이터베이스 백엔드에서는 인덱스를 사용할 수 있으므로 그렇게하는 것이 더 합리적 일 수 있습니다. 그러나 PostgreSQL을 사용하면 &lt;code&gt;abs(change)&lt;/code&gt; 에 인덱스를 추가하여 이러한 쿼리를 매우 효율적으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="adba40a949f571c0432f75912f911cb4408c8a50" translate="yes" xml:space="preserve">
          <source>In general constraints are &lt;strong&gt;not&lt;/strong&gt; checked during &lt;code&gt;full_clean()&lt;/code&gt;, and do not raise &lt;code&gt;ValidationError&lt;/code&gt;s. Rather you&amp;rsquo;ll get a database integrity error on &lt;code&gt;save()&lt;/code&gt;. &lt;code&gt;UniqueConstraint&lt;/code&gt;s without a &lt;a href=&quot;#django.db.models.UniqueConstraint.condition&quot;&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/a&gt; (i.e. non-partial unique constraints) are different in this regard, in that they leverage the existing &lt;code&gt;validate_unique()&lt;/code&gt; logic, and thus enable two-stage validation. In addition to &lt;code&gt;IntegrityError&lt;/code&gt; on &lt;code&gt;save()&lt;/code&gt;, &lt;code&gt;ValidationError&lt;/code&gt; is also raised during model validation when the &lt;code&gt;UniqueConstraint&lt;/code&gt; is violated.</source>
          <target state="translated">일반적으로 제약에 &lt;strong&gt;없는&lt;/strong&gt; 동안 확인 &lt;code&gt;full_clean()&lt;/code&gt; 및 올리지 마십시오 &lt;code&gt;ValidationError&lt;/code&gt; 들. 오히려 &lt;code&gt;save()&lt;/code&gt; 에서 데이터베이스 무결성 오류가 발생합니다 . &lt;a href=&quot;#django.db.models.UniqueConstraint.condition&quot;&gt; &lt;code&gt;condition&lt;/code&gt; &lt;/a&gt; 없는 &lt;code&gt;UniqueConstraint&lt;/code&gt; (예 : 비 일부 고유 제약 조건)는 기존 &lt;code&gt;validate_unique()&lt;/code&gt; 논리 를 활용 하므로 2 단계 유효성 검사가 가능 하다는 점에서 다릅니다 . 뿐만 아니라 &lt;code&gt;IntegrityError&lt;/code&gt; 에 &lt;code&gt;save()&lt;/code&gt; , &lt;code&gt;ValidationError&lt;/code&gt; 이 경우에도 모델 유효성 검사 중 발생 &lt;code&gt;UniqueConstraint&lt;/code&gt; 를 위반된다.</target>
        </trans-unit>
        <trans-unit id="209edf2940165c6cc1a875e5298008997ec85e40" translate="yes" xml:space="preserve">
          <source>In general, &lt;code&gt;Q() objects&lt;/code&gt; make it possible to define and reuse conditions. This permits the &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;construction of complex database queries&lt;/a&gt; using &lt;code&gt;|&lt;/code&gt; (&lt;code&gt;OR&lt;/code&gt;) and &lt;code&gt;&amp;amp;&lt;/code&gt; (&lt;code&gt;AND&lt;/code&gt;) operators; in particular, it is not otherwise possible to use &lt;code&gt;OR&lt;/code&gt; in &lt;code&gt;QuerySets&lt;/code&gt;.</source>
          <target state="translated">일반적으로 &lt;code&gt;Q() objects&lt;/code&gt; 사용하면 조건을 정의하고 재사용 할 수 있습니다. 이것은 허용 &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;복잡한 데이터베이스 쿼리의 건축&lt;/a&gt; 사용을 &lt;code&gt;|&lt;/code&gt; ( &lt;code&gt;OR&lt;/code&gt; ) 및 &lt;code&gt;&amp;amp;&lt;/code&gt; ( &lt;code&gt;AND&lt;/code&gt; ) 연산자; 특히, 그렇지 않으면 &lt;code&gt;QuerySets&lt;/code&gt; 에서 &lt;code&gt;OR&lt;/code&gt; 을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a6c3985cf74933843dd741b4b15c88efa849cde0" translate="yes" xml:space="preserve">
          <source>In general, GeoDjango installation requires:</source>
          <target state="translated">일반적으로 GeoDjango 설치에는 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="509d11594c50dfe8712d4434d7a4afdf6b8e5098" translate="yes" xml:space="preserve">
          <source>In general, any cleaning method can raise &lt;code&gt;ValidationError&lt;/code&gt; if there is a problem with the data it is processing, passing the relevant information to the &lt;code&gt;ValidationError&lt;/code&gt; constructor. &lt;a href=&quot;#raising-validation-error&quot;&gt;See below&lt;/a&gt; for the best practice in raising &lt;code&gt;ValidationError&lt;/code&gt;. If no &lt;code&gt;ValidationError&lt;/code&gt; is raised, the method should return the cleaned (normalized) data as a Python object.</source>
          <target state="translated">일반적으로, 처리중인 데이터에 문제가 있으면 관련된 모든 정보를 &lt;code&gt;ValidationError&lt;/code&gt; 생성자에 전달하여 정리 방법에서 &lt;code&gt;ValidationError&lt;/code&gt; 가 발생할 수 있습니다 . &lt;code&gt;ValidationError&lt;/code&gt; 발생에 대한 모범 사례는 &lt;a href=&quot;#raising-validation-error&quot;&gt;아래&lt;/a&gt; 를 참조하십시오 . &lt;code&gt;ValidationError&lt;/code&gt; 가 발생 하지 않으면 메서드는 정리 된 (정규화 된) 데이터를 Python 객체로 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="aff7eda262832443cdc4cfd621b6e572d84270a0" translate="yes" xml:space="preserve">
          <source>In general, it is enough to define &lt;a href=&quot;#django.template.loaders.base.Loader.get_template_sources&quot;&gt;&lt;code&gt;get_template_sources()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.template.loaders.base.Loader.get_contents&quot;&gt;&lt;code&gt;get_contents()&lt;/code&gt;&lt;/a&gt; for custom template loaders. &lt;code&gt;get_template()&lt;/code&gt; will usually not need to be overridden.</source>
          <target state="translated">일반적으로 사용자 정의 템플리트 로더에 대해 &lt;a href=&quot;#django.template.loaders.base.Loader.get_template_sources&quot;&gt; &lt;code&gt;get_template_sources()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.template.loaders.base.Loader.get_contents&quot;&gt; &lt;code&gt;get_contents()&lt;/code&gt; &lt;/a&gt; 를 정의하면 충분합니다 . &lt;code&gt;get_template()&lt;/code&gt; 은 일반적으로 재정의 될 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b162efee794bcad06a96b812cb84dc6a654ea12a" translate="yes" xml:space="preserve">
          <source>In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system.</source>
          <target state="translated">일반적으로 라이브러리 경로는 환경 변수를 설정하거나 전체 시스템에 대한 라이브러리 경로를 구성하여 사용자별로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f02826e5404756fbfee9b9f4d13058259e858ef3" translate="yes" xml:space="preserve">
          <source>In higher level code related to handling of URLs of Django model instances: The &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Django 모델 인스턴스의 URL 처리와 관련된 상위 레벨 코드 : &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 메소드.</target>
        </trans-unit>
        <trans-unit id="0325acb3dd5bb25e96712e073ccf8beac6d4f214" translate="yes" xml:space="preserve">
          <source>In its simplest form &lt;code&gt;Prefetch&lt;/code&gt; is equivalent to the traditional string based lookups:</source>
          <target state="translated">가장 간단한 형태의 &lt;code&gt;Prefetch&lt;/code&gt; 는 전통적인 문자열 기반 조회와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="74628a3f6d1c7feffe7469a9ab6311bf142ff0b9" translate="yes" xml:space="preserve">
          <source>In larger templates, this technique helps you see which &lt;code&gt;{% block %}&lt;/code&gt; tags are being closed.</source>
          <target state="translated">큰 템플릿에서이 기술을 사용하면 어떤 &lt;code&gt;{% block %}&lt;/code&gt; 태그가 닫히는 지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5e38ef2b3710d00983de8113dd8ab5592914bbb" translate="yes" xml:space="preserve">
          <source>In lieu of the above approach which requires duplicating methods on both the &lt;code&gt;QuerySet&lt;/code&gt; and the &lt;code&gt;Manager&lt;/code&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt;&lt;code&gt;QuerySet.as_manager()&lt;/code&gt;&lt;/a&gt; can be used to create an instance of &lt;code&gt;Manager&lt;/code&gt; with a copy of a custom &lt;code&gt;QuerySet&lt;/code&gt;&amp;rsquo;s methods:</source>
          <target state="translated">양자의 요구 중복 방법 상기 방법 대신에 &lt;code&gt;QuerySet&lt;/code&gt; 및 &lt;code&gt;Manager&lt;/code&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt; &lt;code&gt;QuerySet.as_manager()&lt;/code&gt; &lt;/a&gt; 인스턴스 생성하는 데 사용할 수있는 &lt;code&gt;Manager&lt;/code&gt; 지정 사본 &lt;code&gt;QuerySet&lt;/code&gt; 의 방법 :</target>
        </trans-unit>
        <trans-unit id="892885cde16dca9d450a49f5544282693afce6a6" translate="yes" xml:space="preserve">
          <source>In models, a field is instantiated as a class attribute and represents a particular table column, see &lt;a href=&quot;../../topics/db/models&quot;&gt;Models&lt;/a&gt;. It has attributes such as &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;, and methods that Django uses to map the field value to database-specific values.</source>
          <target state="translated">모델에서 필드는 클래스 속성으로 인스턴스화되고 특정 테이블 열을 나타냅니다 ( &lt;a href=&quot;../../topics/db/models&quot;&gt;모델&lt;/a&gt; 참조) . &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt; 같은 속성과 Django가 필드 값을 데이터베이스 별 값에 매핑하는 데 사용하는 메서드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c049c4f3a733196872767a3d6e8373dbf1a9e8d8" translate="yes" xml:space="preserve">
          <source>In most cases it will be necessary to upgrade to the latest version of your Django-related dependencies as well. If the Django version was recently released or if some of your dependencies are not well-maintained, some of your dependencies may not yet support the new Django version. In these cases you may have to wait until new versions of your dependencies are released.</source>
          <target state="translated">대부분의 경우 최신 버전의 Django 관련 종속성으로 업그레이드해야합니다. Django 버전이 최근에 릴리스되었거나 일부 종속성이 잘 유지 관리되지 않은 경우 일부 종속성이 아직 새로운 Django 버전을 지원하지 않을 수 있습니다. 이러한 경우 새 버전의 종속성이 릴리스 될 때까지 기다려야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2553c57b09242581a803e6aacbe2b851d277b3d0" translate="yes" xml:space="preserve">
          <source>In most cases overriding or inheriting &lt;code&gt;get_FOO_display()&lt;/code&gt;, &lt;code&gt;get_next_by_FOO()&lt;/code&gt;, and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; should work as expected. Since they are added by the metaclass however, it is not practical to account for all possible inheritance structures. In more complex cases you should override &lt;code&gt;Field.contribute_to_class()&lt;/code&gt; to set the methods you need.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;get_FOO_display()&lt;/code&gt; , &lt;code&gt;get_next_by_FOO()&lt;/code&gt; 및 &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; 재정의하거나 상속 하면 예상대로 작동합니다. 그러나 메타 클래스에 의해 추가되기 때문에 가능한 모든 상속 구조를 설명하는 것은 실용적이지 않습니다. 더 복잡한 경우 &lt;code&gt;Field.contribute_to_class()&lt;/code&gt; 를 재정 의하여 필요한 메소드를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="46ee957bac7e253d4620f33ab4a0b3981905456a" translate="yes" xml:space="preserve">
          <source>In most cases when Django is dealing with strings, it will convert them to strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a string back in the result.</source>
          <target state="translated">Django가 문자열을 처리하는 경우 대부분의 경우 다른 작업을 수행하기 전에 문자열로 변환합니다. 따라서 일반적으로 바이트 문자열을 전달하는 경우 결과에서 문자열을 다시받을 수 있도록 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="acee6b59fd13a3ca3fe85dc3b662ea33a0c91494" translate="yes" xml:space="preserve">
          <source>In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass. In a few situations this is required; for instance if the app package is a &lt;a href=&quot;#namespace-package&quot;&gt;namespace package&lt;/a&gt; with multiple paths.</source>
          <target state="translated">대부분의 경우, Django는이를 자동으로 감지하고 설정할 수 있지만 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스 에서 클래스 속성으로 명시 적 대체를 제공 할 수도 있습니다 . 몇 가지 상황에서는 이것이 필요합니다. 예를 들어 앱 패키지가 여러 경로 가있는 &lt;a href=&quot;#namespace-package&quot;&gt;네임 스페이스 패키지 인 경우&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4e12dbf6f96ad8979888b66a156e04c3569721e6" translate="yes" xml:space="preserve">
          <source>In most cases, for a patch to be accepted into Django it has to include tests. For bug fix patches, this means writing a regression test to ensure that the bug is never reintroduced into Django later on. A regression test should be written in such a way that it will fail while the bug still exists and pass once the bug has been fixed. For patches containing new features, you&amp;rsquo;ll need to include tests which ensure that the new features are working correctly. They too should fail when the new feature is not present, and then pass once it has been implemented.</source>
          <target state="translated">대부분의 경우 Django에 패치를 적용하려면 테스트가 포함되어야합니다. 버그 수정 패치의 경우 이는 나중에 장고에 버그가 다시 도입되지 않도록 회귀 테스트를 작성하는 것을 의미합니다. 회귀 테스트는 버그가 여전히 존재하는 동안 실패하고 버그가 수정되면 통과하는 방식으로 작성해야합니다. 새로운 기능이 포함 된 패치의 경우 새로운 기능이 올바르게 작동하는지 확인하는 테스트를 포함해야합니다. 새 기능이 없으면 실패한 다음 구현 된 후에 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="d63a9dd51c8abf1805656df5834de22fb54d2d48" translate="yes" xml:space="preserve">
          <source>In most cases, inheriting from this mixin will be sufficient to make an old-style middleware compatible with the new system with sufficient backwards-compatibility. The new short-circuiting semantics will be harmless or even beneficial to the existing middleware. In a few cases, a middleware class may need some changes to adjust to the new semantics.</source>
          <target state="translated">대부분의 경우,이 믹스 인에서 상속하면 구식 미들웨어가 충분한 하위 호환성을 가진 새 시스템과 호환 될 수 있습니다. 새로운 단락 시맨틱은 기존 미들웨어에 무해하거나 심지어 유리할 것입니다. 경우에 따라 미들웨어 클래스에서 새 의미에 맞게 변경해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9d0c45a9a5c2988974b76f45606b7b5230c0954" translate="yes" xml:space="preserve">
          <source>In most cases, it&amp;rsquo;s best to use translated URLs only within a language code prefixed block of patterns (using &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern.</source>
          <target state="translated">대부분의 경우 부주의하게 번역 된 URL이 번역되지 않은 URL 패턴과 충돌 할 가능성을 피하기 위해 언어 코드 접두어 패턴 블록 ( &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt; ) 내에서만 번역 된 URL을 사용하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="53ae97a84b8d45f7667a00362e01147ed1582f6c" translate="yes" xml:space="preserve">
          <source>In most cases, the field will have a sensible default widget. For example, by default, a &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; will have a &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widget, that produces an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; in the HTML. If you needed &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; instead, you&amp;rsquo;d specify the appropriate widget when defining your form field, as we have done for the &lt;code&gt;message&lt;/code&gt; field.</source>
          <target state="translated">대부분의 경우 필드에는 적절한 기본 위젯이 있습니다. 예를 들어, &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 는 기본적으로 HTML에서 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 를 생성하는 &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 위젯 을 갖습니다 . &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 가 대신 필요한 경우 양식 필드를 정의 할 때 &lt;code&gt;message&lt;/code&gt; 필드 와 마찬가지로 적절한 위젯을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="6eb548d924e6f442368c56b8245c2ffe7a95f69e" translate="yes" xml:space="preserve">
          <source>In most cases, this object will not have been saved to the database yet, so if it uses the default &lt;code&gt;AutoField&lt;/code&gt;, &lt;em&gt;it might not yet have a value for its primary key field&lt;/em&gt;.</source>
          <target state="translated">대부분의 경우,이 객체는 기본 사용 그렇다면, 아직 데이터베이스에 저장되지 않았을 것이다 &lt;code&gt;AutoField&lt;/code&gt; 는 , &lt;em&gt;아직 기본 키 필드의 값을 가질 수 있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="553a3a820227d2b61d89c93a4f51644a0ad682a2" translate="yes" xml:space="preserve">
          <source>In most cases, you can send email using &lt;code&gt;django.core.mail.send_mail()&lt;/code&gt;.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;django.core.mail.send_mail()&lt;/code&gt; 사용하여 이메일을 보낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb9e461a8cfdfc6e585763268faa61b1594df5ef" translate="yes" xml:space="preserve">
          <source>In non-interactive mode, the &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt;&lt;code&gt;USERNAME_FIELD&lt;/code&gt;&lt;/a&gt; and required fields (listed in &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt;&lt;code&gt;REQUIRED_FIELDS&lt;/code&gt;&lt;/a&gt;) fall back to &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; environment variables, unless they are overridden by a command line argument. For example, to provide an &lt;code&gt;email&lt;/code&gt; field, you can use &lt;code&gt;DJANGO_SUPERUSER_EMAIL&lt;/code&gt; environment variable.</source>
          <target state="translated">비 대화식 모드에서 &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt; &lt;code&gt;USERNAME_FIELD&lt;/code&gt; &lt;/a&gt; 및 필수 필드 ( &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt; &lt;code&gt;REQUIRED_FIELDS&lt;/code&gt; 에&lt;/a&gt; 나열 됨 ) 는 명령 행 인수로 대체되지 않는 한 &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; 환경 변수로 대체됩니다. 예를 들어, &lt;code&gt;email&lt;/code&gt; 필드 를 제공하기 위해 &lt;code&gt;DJANGO_SUPERUSER_EMAIL&lt;/code&gt; 환경 변수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e811dedb04c04b0db2eb92ba335a09921c544b79" translate="yes" xml:space="preserve">
          <source>In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this isn&amp;rsquo;t usually permitted for model fields. If a non-abstract model base class has a field called &lt;code&gt;author&lt;/code&gt;, you can&amp;rsquo;t create another model field or define an attribute called &lt;code&gt;author&lt;/code&gt; in any class that inherits from that base class.</source>
          <target state="translated">일반적인 Python 클래스 상속에서는 자식 클래스가 부모 클래스의 모든 속성을 재정의 할 수 있습니다. 장고에서는 모델 필드에 일반적으로 허용되지 않습니다. 비추 상 모델 기본 클래스에 &lt;code&gt;author&lt;/code&gt; 라는 필드가있는 경우 해당 기본 클래스에서 상속되는 클래스에서 다른 모델 필드를 만들거나 &lt;code&gt;author&lt;/code&gt; 라는 속성을 정의 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9ba287b42f73a012193a36b795923c8fa6f96a7d" translate="yes" xml:space="preserve">
          <source>In older versions of Django, be careful when reusing Django&amp;rsquo;s built-in filters as &lt;code&gt;autoescape&lt;/code&gt; defaults to &lt;code&gt;None&lt;/code&gt;. You&amp;rsquo;ll need to pass &lt;code&gt;autoescape=True&lt;/code&gt; to get autoescaping.</source>
          <target state="translated">Django의 이전 버전에서는 &lt;code&gt;autoescape&lt;/code&gt; 기본값이 &lt;code&gt;None&lt;/code&gt; 이므로 Django의 내장 필터를 재사용 할 때주의 하십시오 . &lt;code&gt;autoescape=True&lt;/code&gt; 를 얻으려면 autoescape = True 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="48487eecdf3392dca8cdac3e20e02c45e851f71c" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;'&lt;/code&gt; is converted to its decimal code &lt;code&gt;&amp;amp;#39;&lt;/code&gt; instead of the equivalent hex code &lt;code&gt;&amp;amp;#x27;&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 &lt;code&gt;'&lt;/code&gt; 은 10 진수 코드 &lt;code&gt;&amp;amp;#39;&lt;/code&gt; 동등한 16 진 코드 대신 &lt;code&gt;&amp;amp;#x27;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad59f8bbf153ed815b532a2f6dd98471ff133b44" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;True&lt;/code&gt; was returned for &lt;a href=&quot;#django.forms.FileInput&quot;&gt;&lt;code&gt;FileInput&lt;/code&gt;&lt;/a&gt; when &lt;code&gt;initial&lt;/code&gt; was set.</source>
          <target state="translated">이전 버전에서는 &lt;code&gt;initial&lt;/code&gt; 설정 시 &lt;a href=&quot;#django.forms.FileInput&quot;&gt; &lt;code&gt;FileInput&lt;/code&gt; 에&lt;/a&gt; 대해 &lt;code&gt;True&lt;/code&gt; 가 반환되었습니다 .</target>
        </trans-unit>
        <trans-unit id="a594579463454aa6c5f1d126c4933adb9501ac81" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;s&lt;/code&gt; may be a bytestring.</source>
          <target state="translated">이전 버전에서 &lt;code&gt;s&lt;/code&gt; 는 바이트 열일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06abe09565f7ebaaa5a5a3e66eecce8b6a0e1ba2" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRContains&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRContains&lt;/code&gt; 를 사용 하고 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="86fdacbc12f0c3ada37ced324655c76230d31333" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRDisjoint&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRDisjoint&lt;/code&gt; 를 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a250c6c4d5ddf0ab4e264cb2589304887da56d37" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBREquals&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBREquals&lt;/code&gt; 를 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3d30b1f38b6febfe720406653832214a3cd66396" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRIntersects&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRIntersects&lt;/code&gt; 를 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a108605efc0a5748e8093c6df53458e3fc931cff" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBROverlaps&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBROverlaps&lt;/code&gt; 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6a423185ebb0542b517af591a286bdfe336b4ccb" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRTouches&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRTouches&lt;/code&gt; 를 사용 하며 바운딩 박스에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e454d7f81ea9b0f64b3dcee0ba1d27440f516a6e" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRWithin&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRWithin&lt;/code&gt; 을 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="8fd7673044991a0b322632f8e9ea866e0901e9d1" translate="yes" xml:space="preserve">
          <source>In older versions, a negative zero &lt;code&gt;-0&lt;/code&gt; was returned for negative numbers which round to zero.</source>
          <target state="translated">이전 버전에서는 &lt;code&gt;-0&lt;/code&gt; 으로 반올림되는 음수에 대해 음수 0 -0 이 반환되었습니다.</target>
        </trans-unit>
        <trans-unit id="04c471d6170a640a7f0b0a6b5d86ad526b15aeb8" translate="yes" xml:space="preserve">
          <source>In older versions, it returns a bytestring instead of a string.</source>
          <target state="translated">이전 버전에서는 문자열 대신 바이트 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e77f0794cc34eae167668fa46edcdb855f41b6ef" translate="yes" xml:space="preserve">
          <source>In older versions, permissions for proxy models use the content type of the concrete model rather than content type of the proxy model.</source>
          <target state="translated">이전 버전에서 프록시 모델에 대한 권한은 프록시 모델의 컨텐츠 유형이 아닌 구체적 모델의 컨텐츠 유형을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c3ee96d228df4d2c97001f389d45ba85fe666ff6" translate="yes" xml:space="preserve">
          <source>In older versions, proxy models use the content type of the concrete model.</source>
          <target state="translated">이전 버전에서 프록시 모델은 콘크리트 모델의 컨텐츠 유형을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="83f79b94fd4d38f0c3bbad3802efe29f7e0d5b34" translate="yes" xml:space="preserve">
          <source>In older versions, the &lt;code&gt;max-age&lt;/code&gt; directive from the &lt;code&gt;Cache-Control&lt;/code&gt; header had precedence over the cache timeout set by &lt;code&gt;cache_page&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서는 &lt;code&gt;Cache-Control&lt;/code&gt; 헤더 의 &lt;code&gt;max-age&lt;/code&gt; 지시문 이 &lt;code&gt;cache_page&lt;/code&gt; 로 설정된 캐시 제한 시간보다 우선했습니다 .</target>
        </trans-unit>
        <trans-unit id="fb39b75e03f33a4e72cf13d13c8cf8133f783eb6" translate="yes" xml:space="preserve">
          <source>In older versions, the &lt;code&gt;tzinfo&lt;/code&gt; attribute is a &lt;a href=&quot;#django.utils.timezone.FixedOffset&quot;&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">이전 버전에서 &lt;code&gt;tzinfo&lt;/code&gt; 속성은 &lt;a href=&quot;#django.utils.timezone.FixedOffset&quot;&gt; &lt;code&gt;FixedOffset&lt;/code&gt; &lt;/a&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="7fd83cf3fc3c18973ca72e95305a6b3f72906774" translate="yes" xml:space="preserve">
          <source>In older versions, the default is a list containing also date-only formats.</source>
          <target state="translated">이전 버전에서 기본값은 날짜 전용 형식도 포함 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="688ca5f2699bc44de7ce8a06a72f66e4061b7b2e" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f4239bf88dcd319d30aa682cbe4d3cde5d9664bc" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 기본값은 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ce7d5574bd6957ee81720c428d128a45952d2924" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;SAMEORIGIN&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 기본값은 &lt;code&gt;SAMEORIGIN&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6cc69bdce16d1e99c5ef8c352ab414ffc039ac15" translate="yes" xml:space="preserve">
          <source>In older versions, the distinction for the fallback is based on whether the &lt;code&gt;X-Requested-With&lt;/code&gt; header is set to the value &lt;code&gt;XMLHttpRequest&lt;/code&gt;. This is set by the jQuery &lt;code&gt;ajax()&lt;/code&gt; method.</source>
          <target state="translated">이전 버전에서 폴 백의 구분은 &lt;code&gt;X-Requested-With&lt;/code&gt; 헤더가 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 값으로 설정 되었는지 여부를 기반으로합니다 . 이것은 jQuery &lt;code&gt;ajax()&lt;/code&gt; 메소드에 의해 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="d0bfa731b6114bdaa19c99d0b74ff78b5af90d4f" translate="yes" xml:space="preserve">
          <source>In older versions, the first &lt;code&gt;value&lt;/code&gt; element in the choice tuple is the &lt;code&gt;field&lt;/code&gt; value itself, rather than a &lt;code&gt;ModelChoiceIteratorValue&lt;/code&gt; instance. In most cases this proxies transparently but, if you need the &lt;code&gt;field&lt;/code&gt; value itself, use the &lt;a href=&quot;#django.forms.ModelChoiceIteratorValue.value&quot;&gt;&lt;code&gt;ModelChoiceIteratorValue.value&lt;/code&gt;&lt;/a&gt; attribute instead.</source>
          <target state="translated">이전 버전 에서 선택 튜플 의 첫 번째 &lt;code&gt;value&lt;/code&gt; 요소 는 &lt;code&gt;ModelChoiceIteratorValue&lt;/code&gt; 인스턴스가 아니라 &lt;code&gt;field&lt;/code&gt; 값 자체 입니다. 대부분의 경우이 프록시는 투명하게 프록시되지만 &lt;code&gt;field&lt;/code&gt; 값 자체 가 필요한 경우 대신 &lt;a href=&quot;#django.forms.ModelChoiceIteratorValue.value&quot;&gt; &lt;code&gt;ModelChoiceIteratorValue.value&lt;/code&gt; &lt;/a&gt; 속성을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="66326a5c500f2e9b8f06b11645d2eb1a463f096a" translate="yes" xml:space="preserve">
          <source>In older versions, the keyword arguments with &lt;code&gt;None&lt;/code&gt; values are made up also for not provided named parts.</source>
          <target state="translated">이전 버전에서는 &lt;code&gt;None&lt;/code&gt; 값을 가진 키워드 인수가 제공되지 않은 명명 된 부분에 대해서도 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="be44bea554526db510067415e8c9fcb3f595c8bd" translate="yes" xml:space="preserve">
          <source>In older versions, you could set the language in the current session.</source>
          <target state="translated">이전 버전에서는 현재 세션에서 언어를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecde436d8369233ca2f3dcb9ab1ca79254f03cdf" translate="yes" xml:space="preserve">
          <source>In order for the &lt;code&gt;python manage.py migrate&lt;/code&gt; command to work, your Oracle database user must have privileges to run the following commands:</source>
          <target state="translated">위해서는 &lt;code&gt;python manage.py migrate&lt;/code&gt; 작업에 대한 명령, Oracle 데이터베이스 사용자는 다음 명령을 실행할 수있는 권한이 있어야합니다 :</target>
        </trans-unit>
        <trans-unit id="90fe772dd41ff482e0ce23d0eaa3b30a1fdefbce" translate="yes" xml:space="preserve">
          <source>In order for your filter to know the current auto-escaping state, set the &lt;code&gt;needs_autoescape&lt;/code&gt; flag to &lt;code&gt;True&lt;/code&gt; when you register your filter function. (If you don&amp;rsquo;t specify this flag, it defaults to &lt;code&gt;False&lt;/code&gt;). This flag tells Django that your filter function wants to be passed an extra keyword argument, called &lt;code&gt;autoescape&lt;/code&gt;, that is &lt;code&gt;True&lt;/code&gt; if auto-escaping is in effect and &lt;code&gt;False&lt;/code&gt; otherwise. It is recommended to set the default of the &lt;code&gt;autoescape&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt;, so that if you call the function from Python code it will have escaping enabled by default.</source>
          <target state="translated">필터가 현재 자동 이스케이프 상태를 알 수있게하려면 필터 기능을 등록 할 때 &lt;code&gt;needs_autoescape&lt;/code&gt; 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 . 이 플래그를 지정하지 않으면 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. 이 플래그는 필터 함수가 호출 추가 키워드 인수 전달하고 싶어 장고를 알려줍니다 &lt;code&gt;autoescape&lt;/code&gt; 이며, &lt;code&gt;True&lt;/code&gt; 자동 탈출이 적용하고있는 경우 &lt;code&gt;False&lt;/code&gt; , 그렇지. &lt;code&gt;autoescape&lt;/code&gt; 매개 변수 의 기본값 을 &lt;code&gt;True&lt;/code&gt; 로 설정하는 것이 좋습니다 . 따라서 Python 코드에서 함수를 호출하면 기본적으로 이스케이프가 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="11a387c8a9914108b9a7aabd974b6e6881a3bea5" translate="yes" xml:space="preserve">
          <source>In order to build a custom session engine or to customize an existing one, you may create a new class inheriting from &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt;&lt;code&gt;SessionBase&lt;/code&gt;&lt;/a&gt; or any other existing &lt;code&gt;SessionStore&lt;/code&gt; class.</source>
          <target state="translated">사용자 정의 세션 엔진을 작성하거나 기존 엔진을 사용자 정의하기 위해 &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt; &lt;code&gt;SessionBase&lt;/code&gt; &lt;/a&gt; 또는 다른 기존 &lt;code&gt;SessionStore&lt;/code&gt; 클래스 에서 상속되는 새 클래스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f48a9537ae495f429e0a574bc2641d48124286ad" translate="yes" xml:space="preserve">
          <source>In order to configure logging, you use &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have.</source>
          <target state="translated">로깅을 구성하려면 &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; 을 사용하여 로깅 설정 사전을 정의하십시오. 이 설정은 로깅 설정에서 원하는 로거, 처리기, 필터 및 포맷터와 해당 구성 요소에 원하는 로그 수준 및 기타 속성을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="42b3fc106c92756d794366455faac3a83dc515a5" translate="yes" xml:space="preserve">
          <source>In order to do that you can check the database connection&amp;rsquo;s alias inside a &lt;code&gt;RunPython&lt;/code&gt; operation by looking at the &lt;code&gt;schema_editor.connection.alias&lt;/code&gt; attribute:</source>
          <target state="translated">이를 위해 &lt;code&gt;schema_editor.connection.alias&lt;/code&gt; 속성 을보고 &lt;code&gt;RunPython&lt;/code&gt; 작업 내에서 데이터베이스 연결의 별칭을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="61d52591f027c8771ad5ddae66ce22631a8a19bc" translate="yes" xml:space="preserve">
          <source>In order to fully serialize your &lt;code&gt;Restaurant&lt;/code&gt; instances, you will need to serialize the &lt;code&gt;Place&lt;/code&gt; models as well:</source>
          <target state="translated">&lt;code&gt;Restaurant&lt;/code&gt; 인스턴스 를 완전히 직렬화하려면 &lt;code&gt;Place&lt;/code&gt; 모델도 직렬화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="814bf473789694253cf32579769ab02b74a9eb85" translate="yes" xml:space="preserve">
          <source>In order to guarantee atomicity, &lt;code&gt;atomic&lt;/code&gt; disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an &lt;code&gt;atomic&lt;/code&gt; block will raise an exception.</source>
          <target state="translated">원 자성을 보장하기 위해 &lt;code&gt;atomic&lt;/code&gt; 은 일부 API를 비활성화합니다. &lt;code&gt;atomic&lt;/code&gt; 블록 내에서 데이터베이스 연결의 자동 커밋 상태를 커밋, 롤백 또는 변경하려고 시도 하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2d184cd5980dd60fc335a14a8588be38002eadd0" translate="yes" xml:space="preserve">
          <source>In order to guarantee that all &lt;code&gt;TestCase&lt;/code&gt; code starts with a clean database, the Django test runner reorders tests in the following way:</source>
          <target state="translated">모든 &lt;code&gt;TestCase&lt;/code&gt; 코드가 깨끗한 데이터베이스로 시작되도록하기 위해 Django 테스트 러너는 다음과 같은 방식으로 테스트 순서를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="ebd5f1b685513a442ce3a791e86443cc357e3454" translate="yes" xml:space="preserve">
          <source>In order to handle this situation, you need to pass &lt;code&gt;handle_forward_references=True&lt;/code&gt; to &lt;code&gt;serializers.deserialize()&lt;/code&gt;. This will set the &lt;code&gt;deferred_fields&lt;/code&gt; attribute on the &lt;code&gt;DeserializedObject&lt;/code&gt; instances. You&amp;rsquo;ll need to keep track of &lt;code&gt;DeserializedObject&lt;/code&gt; instances where this attribute isn&amp;rsquo;t &lt;code&gt;None&lt;/code&gt; and later call &lt;code&gt;save_deferred_fields()&lt;/code&gt; on them.</source>
          <target state="translated">이 상황을 처리하려면 &lt;code&gt;handle_forward_references=True&lt;/code&gt; 를 &lt;code&gt;serializers.deserialize()&lt;/code&gt; 로 전달해야합니다 . &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스 에 &lt;code&gt;deferred_fields&lt;/code&gt; 속성 이 설정됩니다 . 이 속성이 &lt;code&gt;None&lt;/code&gt; 이 아닌 &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스를 추적 하고 나중에 &lt;code&gt;save_deferred_fields()&lt;/code&gt; 를 호출 해야합니다.</target>
        </trans-unit>
        <trans-unit id="8b2e79b4b6aa18a676e91499097aad9f8d4ed2dc" translate="yes" xml:space="preserve">
          <source>In order to make a Django project translatable, you have to add a minimal number of hooks to your Python code and templates. These hooks are called &lt;a href=&quot;index#term-translation-string&quot;&gt;translation strings&lt;/a&gt;. They tell Django: &amp;ldquo;This text should be translated into the end user&amp;rsquo;s language, if a translation for this text is available in that language.&amp;rdquo; It&amp;rsquo;s your responsibility to mark translatable strings; the system can only translate strings it knows about.</source>
          <target state="translated">Django 프로젝트를 번역 가능하게하려면 Python 코드와 템플릿에 최소한의 후크를 추가해야합니다. 이러한 후크를 &lt;a href=&quot;index#term-translation-string&quot;&gt;변환 문자열&lt;/a&gt; 이라고 합니다. 그들은 장고에게 다음과 같이 말합니다.&amp;ldquo;이 텍스트를 번역 할 수 있다면이 텍스트는 최종 사용자의 언어로 번역되어야합니다.&amp;rdquo; 번역 가능한 문자열을 표시하는 것은 귀하의 책임입니다. 시스템은 알고있는 문자열 만 번역 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd427f482c454b8a176992fb9016a46f9519bd6a" translate="yes" xml:space="preserve">
          <source>In order to make error messages flexible and easy to override, consider the following guidelines:</source>
          <target state="translated">오류 메시지를 유연하고 재정의하기 쉽게하려면 다음 지침을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4fbde88be4d3a61eb0fa9d81f26e60f25b7c967a" translate="yes" xml:space="preserve">
          <source>In order to meet the 30-char limitation Oracle has on table names, and match the usual conventions for Oracle databases, Django may shorten table names and turn them all-uppercase. To prevent such transformations, use a quoted name as the value for &lt;code&gt;db_table&lt;/code&gt;:</source>
          <target state="translated">Oracle이 테이블 이름에 대한 30 자 제한을 충족하고 Oracle 데이터베이스에 대한 일반적인 규칙과 일치시키기 위해 Django는 테이블 이름을 줄이고 대문자로 바꿀 수 있습니다. 이러한 변환을 방지하려면 인용 된 이름을 &lt;code&gt;db_table&lt;/code&gt; 의 값으로 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="09f9a7ab0865d01d87a2c3387c4322fa09399408" translate="yes" xml:space="preserve">
          <source>In order to obtain a prepared geometry, access the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.prepared&quot;&gt;&lt;code&gt;GEOSGeometry.prepared&lt;/code&gt;&lt;/a&gt; property. Once you have a &lt;code&gt;PreparedGeometry&lt;/code&gt; instance its spatial predicate methods, listed below, may be used with other &lt;code&gt;GEOSGeometry&lt;/code&gt; objects. An operation with a prepared geometry can be orders of magnitude faster &amp;ndash; the more complex the geometry that is prepared, the larger the speedup in the operation. For more information, please consult the &lt;a href=&quot;https://trac.osgeo.org/geos/wiki/PreparedGeometry&quot;&gt;GEOS wiki page on prepared geometries&lt;/a&gt;.</source>
          <target state="translated">준비된 형상을 얻으려면 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.prepared&quot;&gt; &lt;code&gt;GEOSGeometry.prepared&lt;/code&gt; &lt;/a&gt; 속성에 액세스하십시오 . 당신은 일단 &lt;code&gt;PreparedGeometry&lt;/code&gt; 의 인스턴스를 아래의 공간 술어 방법, 기타와 함께 사용될 수 &lt;code&gt;GEOSGeometry&lt;/code&gt; 의 객체. 지오메트리가 준비된 작업은 수십 배 더 빠를 수 있습니다. 지오메트리가 복잡할수록 작업 속도가 더 빨라집니다. 자세한 내용 &lt;a href=&quot;https://trac.osgeo.org/geos/wiki/PreparedGeometry&quot;&gt;은 준비된 형상에&lt;/a&gt; 대한 GEOS 위키 페이지 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="197304082f996b82afb0836da69efaacaa7a04c7" translate="yes" xml:space="preserve">
          <source>In order to override one or more of them, first create an &lt;code&gt;admin&lt;/code&gt; directory in your project&amp;rsquo;s &lt;code&gt;templates&lt;/code&gt; directory. This can be any of the directories you specified in the &lt;a href=&quot;../../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option of the &lt;code&gt;DjangoTemplates&lt;/code&gt; backend in the &lt;a href=&quot;../../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting. If you have customized the &lt;code&gt;'loaders'&lt;/code&gt; option, be sure &lt;code&gt;'django.template.loaders.filesystem.Loader'&lt;/code&gt; appears before &lt;code&gt;'django.template.loaders.app_directories.Loader'&lt;/code&gt; so that your custom templates will be found by the template loading system before those that are included with &lt;a href=&quot;#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">하나 이상을 재정의하려면 먼저 프로젝트의 &lt;code&gt;templates&lt;/code&gt; 디렉토리 에 &lt;code&gt;admin&lt;/code&gt; 디렉토리를 만듭니다 . &lt;a href=&quot;../../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;code&gt;DjangoTemplates&lt;/code&gt; 백엔드 의 &lt;a href=&quot;../../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 옵션에 지정한 디렉토리 중 하나 일 수 있습니다 . &lt;code&gt;'loaders'&lt;/code&gt; 옵션 을 사용자 정의한 경우 , 이전 에 템플리트로드 시스템에서 사용자 정의 템플리트를 찾을 수 있도록 &lt;code&gt;'django.template.loaders.filesystem.Loader'&lt;/code&gt; 가 &lt;code&gt;'django.template.loaders.app_directories.Loader'&lt;/code&gt; 앞에 표시 되는지 확인하십시오. &lt;a href=&quot;#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; 에 포함 된 것들 .</target>
        </trans-unit>
        <trans-unit id="6a3a6dec2c344fd808b8bba54d23e18d9e3ffaeb" translate="yes" xml:space="preserve">
          <source>In order to perform IP-based geolocation, the &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt;&lt;code&gt;GeoIP2&lt;/code&gt;&lt;/a&gt; object requires the &lt;a href=&quot;https://pypi.org/project/geoip2/&quot;&gt;geoip2 Python library&lt;/a&gt; and the GeoIP &lt;code&gt;Country&lt;/code&gt; and/or &lt;code&gt;City&lt;/code&gt;&lt;a href=&quot;https://dev.maxmind.com/geoip/geoip2/geolite2/&quot;&gt;datasets in binary format&lt;/a&gt; (the CSV files will not work!). Grab the &lt;code&gt;GeoLite2-Country.mmdb.gz&lt;/code&gt; and &lt;code&gt;GeoLite2-City.mmdb.gz&lt;/code&gt; files and unzip them in a directory corresponding to the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">IP 기반 지리적 위치를 수행하려면 &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt; &lt;code&gt;GeoIP2&lt;/code&gt; &lt;/a&gt; 객체에는 &lt;a href=&quot;https://pypi.org/project/geoip2/&quot;&gt;geoip2 Python 라이브러리&lt;/a&gt; 및 GeoIP &lt;code&gt;Country&lt;/code&gt; 및 / 또는 &lt;code&gt;City&lt;/code&gt; &lt;a href=&quot;https://dev.maxmind.com/geoip/geoip2/geolite2/&quot;&gt;데이터 세트가 이진 형식 &lt;/a&gt;이어야 합니다 (CSV 파일은 작동하지 않습니다!). &lt;code&gt;GeoLite2-Country.mmdb.gz&lt;/code&gt; 및 &lt;code&gt;GeoLite2-City.mmdb.gz&lt;/code&gt; 파일을 잡고 &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt; &lt;code&gt;GEOIP_PATH&lt;/code&gt; &lt;/a&gt; 설정에 해당하는 디렉토리에서 압축을 푸십시오 .</target>
        </trans-unit>
        <trans-unit id="95a595d960799ba8b0ca87e797be6ea493f08f8d" translate="yes" xml:space="preserve">
          <source>In order to perform URL reversing, you&amp;rsquo;ll need to use &lt;strong&gt;named URL patterns&lt;/strong&gt; as done in the examples above. The string used for the URL name can contain any characters you like. You are not restricted to valid Python names.</source>
          <target state="translated">URL 반전을 수행하려면 위의 예에서와 같이 &lt;strong&gt;이름이 지정된 URL 패턴&lt;/strong&gt; 을 사용해야 합니다. URL 이름에 사용 된 문자열은 원하는 문자를 포함 할 수 있습니다. 유효한 Python 이름으로 제한되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f9fa15e76160b1b71f6b34374f375a88fa1840a3" translate="yes" xml:space="preserve">
          <source>In order to protect against &lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; attacks, the token is not simply the secret; a random mask is prepended to the secret and used to scramble it.</source>
          <target state="translated">&lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; 공격 으로부터 보호하기 위해 토큰은 단순한 비밀이 아닙니다. 무작위 마스크가 비밀 앞에 추가되고 그것을 스크램블하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6a68fede8724820357864706cab00502d65622e6" translate="yes" xml:space="preserve">
          <source>In order to protect against &lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; attacks, the token is not simply the secret; a random salt is prepended to the secret and used to scramble it.</source>
          <target state="translated">&lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; 공격 으로부터 보호하기 위해 토큰은 단순한 비밀이 아닙니다. 무작위 소금이 비밀에 붙여지고 그것을 스크램블하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="655aa485065fe0aea8855d7ccc45fba32956ce48" translate="yes" xml:space="preserve">
          <source>In order to resolve this ticket, we&amp;rsquo;ll add a &lt;code&gt;make_toast()&lt;/code&gt; function to the top-level &lt;code&gt;django&lt;/code&gt; module. First we are going to write a test that tries to use the function and check that its output looks correct.</source>
          <target state="translated">이 티켓을 해결하기 위해 최상위 &lt;code&gt;django&lt;/code&gt; 모듈에 &lt;code&gt;make_toast()&lt;/code&gt; 함수를 추가 합니다. 먼저 함수를 사용하려고 시도하고 출력이 올바르게 보이는지 테스트하는 테스트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="f0a5f481c3502942e7d16bcd7a3cc304c2eefa6a" translate="yes" xml:space="preserve">
          <source>In order to restore the database state between tests for &lt;code&gt;TransactionTestCase&lt;/code&gt;s and database backends without transactions, Django will &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;serialize the contents of all apps&lt;/a&gt; when it starts the test run so it can then reload from that copy before running tests that need it.</source>
          <target state="translated">&lt;code&gt;TransactionTestCase&lt;/code&gt; 테스트와 트랜잭션이 없는 데이터베이스 백엔드 간의 데이터베이스 상태를 복원하기 위해 Django는 테스트 실행을 시작할 때 &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;모든 앱의 내용을 직렬화하여&lt;/a&gt; 필요한 테스트를 실행하기 전에 해당 복사본에서 다시로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0343766ff0b17d92d018f4427983d376ae25e60" translate="yes" xml:space="preserve">
          <source>In order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you&amp;rsquo;ll need to specify &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and possibly &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt;&lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt;&lt;/a&gt;, though other settings may be also required depending on your mail server&amp;rsquo;s configuration. Consult &lt;a href=&quot;../ref/settings&quot;&gt;the Django settings documentation&lt;/a&gt; for a full list of email-related settings.</source>
          <target state="translated">전자 메일을 보내려면 Django에서 메일 서버에 연결하는 방법을 알려주는 몇 가지 설정이 필요합니다. 적어도, 당신은 지정해야합니다 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; &lt;/a&gt; 가능성이 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt; &lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt; 을&lt;/a&gt; 다른 설정은 또한 당신의 메일 서버의 구성에 따라 요구 될 수 있지만,. 이메일 관련 설정의 전체 목록은 &lt;a href=&quot;../ref/settings&quot;&gt;Django 설정 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="26a276856b644a8829e847fabc786f7f950cbafe" translate="yes" xml:space="preserve">
          <source>In order to serialize objects other than &lt;code&gt;dict&lt;/code&gt; you must set the &lt;code&gt;safe&lt;/code&gt; parameter to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dict&lt;/code&gt; 이외의 객체를 직렬화 하려면 &lt;code&gt;safe&lt;/code&gt; 매개 변수를 &lt;code&gt;False&lt;/code&gt; 로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bef01765dc926124667e6f25f418d12592815fda" translate="yes" xml:space="preserve">
          <source>In order to serve different sites in production, you&amp;rsquo;d create a separate settings file with each &lt;code&gt;SITE_ID&lt;/code&gt; (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate &lt;a href=&quot;../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; for each site.</source>
          <target state="translated">프로덕션 환경에서 서로 다른 사이트를 제공하려면 각 &lt;code&gt;SITE_ID&lt;/code&gt; 로 별도의 설정 파일을 만들고 (공유 설정의 중복을 피하기 위해 공통 설정 파일에서 가져 오기) 각 사이트에 적절한 &lt;a href=&quot;../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="f1fc64af07066814f008513d76447706a68a9ba2" translate="yes" xml:space="preserve">
          <source>In order to show customized HTML when Django returns a 404, you can create an HTML template named &lt;code&gt;404.html&lt;/code&gt; and place it in the top level of your template tree. This template will then be served when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">Django가 404를 반환 할 때 사용자 정의 된 HTML을 표시하기 위해 &lt;code&gt;404.html&lt;/code&gt; 이라는 HTML 템플리트를 작성 하여 템플리트 트리의 최상위 레벨에 배치 할 수 있습니다 . 그런 다음 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 로 설정 되면이 템플리트가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="3409046afa59c093b23889795e8442232cd66efe" translate="yes" xml:space="preserve">
          <source>In order to test class-based views outside of the request/response cycle you must ensure that they are configured correctly, by calling &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; after instantiation.</source>
          <target state="translated">요청 / 응답주기 외부에서 클래스 기반보기를 테스트하려면 인스턴스화 후 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt; 을 호출하여 올바르게보기를 구성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8c0c7c490993a4b8206ebaa2bae3d78e513a3e92" translate="yes" xml:space="preserve">
          <source>In order to understand what happens in your query, consider inspecting the &lt;code&gt;query&lt;/code&gt; property of your &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">쿼리에서 어떤 일이 발생하는지 이해하려면 &lt;code&gt;QuerySet&lt;/code&gt; 의 &lt;code&gt;query&lt;/code&gt; 속성을 검사하십시오 .</target>
        </trans-unit>
        <trans-unit id="9facaa9d27d78e8f0b3bd821362b17138f116cfc" translate="yes" xml:space="preserve">
          <source>In order to use GeoDjango, you will need to add your OSGeo4W directories to your Windows system &lt;code&gt;Path&lt;/code&gt;, as well as create &lt;code&gt;GDAL_DATA&lt;/code&gt; and &lt;code&gt;PROJ_LIB&lt;/code&gt; environment variables. The following set of commands, executable with &lt;code&gt;cmd.exe&lt;/code&gt;, will set this up. Restart your device once this is complete for new environment variables to be recognized:</source>
          <target state="translated">GeoDjango를 사용하려면 Windows 시스템에 OSGeo4W 디렉토리를 추가해야합니다 &lt;code&gt;Path&lt;/code&gt; 뿐만 아니라 만들 때, &lt;code&gt;GDAL_DATA&lt;/code&gt; 및 &lt;code&gt;PROJ_LIB&lt;/code&gt; 환경 변수를. &lt;code&gt;cmd.exe&lt;/code&gt; 로 실행 가능한 다음 명령 세트가이를 설정합니다. 새 환경 변수가 인식되도록 완료되면 장치를 다시 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="c570b617951053ed3053b9d4c9a52cb627915e3e" translate="yes" xml:space="preserve">
          <source>In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system &lt;code&gt;Path&lt;/code&gt;, as well as create &lt;code&gt;GDAL_DATA&lt;/code&gt; and &lt;code&gt;PROJ_LIB&lt;/code&gt; environment variables. The following set of commands, executable with &lt;code&gt;cmd.exe&lt;/code&gt;, will set this up:</source>
          <target state="translated">GeoDjango를 사용하려면 Python 및 OSGeo4W 디렉토리를 Windows 시스템 &lt;code&gt;Path&lt;/code&gt; 에 &lt;code&gt;GDAL_DATA&lt;/code&gt; 하고 &lt;code&gt;PROJ_LIB&lt;/code&gt; 및 PROJ_LIB 환경 변수 를 작성 해야 합니다. &lt;code&gt;cmd.exe&lt;/code&gt; 로 실행 가능한 다음 명령 세트가이를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ded6a8537ff07979ac6a5c88d86c82670bed0de7" translate="yes" xml:space="preserve">
          <source>In order to use another client-side library to handle translations, you may want to take advantage of the &lt;code&gt;JSONCatalog&lt;/code&gt; view. It&amp;rsquo;s similar to &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt;&lt;code&gt;JavaScriptCatalog&lt;/code&gt;&lt;/a&gt; but returns a JSON response.</source>
          <target state="translated">다른 클라이언트 측 라이브러리를 사용하여 번역을 처리하기 위해 &lt;code&gt;JSONCatalog&lt;/code&gt; 보기를 활용할 수 있습니다. &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt; &lt;code&gt;JavaScriptCatalog&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 JSON 응답을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="68a8c6184d43fa10d946434ba4ead136463b3827" translate="yes" xml:space="preserve">
          <source>In order to use the &lt;code&gt;Hand&lt;/code&gt; class in our models, we &lt;strong&gt;do not&lt;/strong&gt; have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code.</source>
          <target state="translated">모델에서 &lt;code&gt;Hand&lt;/code&gt; 클래스 를 사용하기 위해이 클래스를 전혀 변경할 &lt;strong&gt;필요는 없습니다&lt;/strong&gt; . 소스 코드를 변경할 수없는 기존 클래스에 대한 모델 지원을 쉽게 작성할 수 있기 때문에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="482b7e02eb0c4ca18c3f11eba075a9c3cbab0ed5" translate="yes" xml:space="preserve">
          <source>In other words, if you set the name of the database in &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt;, this will take precedence over &lt;a href=&quot;settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;, which would override anything in a &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/option-files.html&quot;&gt;MySQL option file&lt;/a&gt;.</source>
          <target state="translated">즉, &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt; 에서 데이터베이스 이름을 설정하면 &lt;a href=&quot;settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 보다 우선하며 이는 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/option-files.html&quot;&gt;MySQL 옵션 파일의&lt;/a&gt; 모든 항목을 무시 합니다 .</target>
        </trans-unit>
        <trans-unit id="c32fe5f982b37fbd0b904bf96aa32ce7df76d8e2" translate="yes" xml:space="preserve">
          <source>In other words, the usual use is to examine the deserialized objects to make sure that they are &amp;ldquo;appropriate&amp;rdquo; for saving before doing so. If you trust your data source you can instead save the object directly and move on.</source>
          <target state="translated">즉, 일반적인 사용은 역 직렬화 된 개체를 검사하여 저장하기 전에 저장하기에 &quot;적절한 지&quot;확인하는 것입니다. 데이터 소스를 신뢰하는 경우 대신 개체를 직접 저장하고 계속 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="348e74db786d501ec367bbeb95b86df85b7e5a62" translate="yes" xml:space="preserve">
          <source>In other words, the usual use is to examine the deserialized objects to make sure that they are &amp;ldquo;appropriate&amp;rdquo; for saving before doing so. Of course, if you trust your data source you can instead save the object directly and move on.</source>
          <target state="translated">다시 말해, 일반적으로 역 직렬화 된 객체를 검사하여 저장하기 전에 &quot;적절한 지&quot;확인합니다. 물론 데이터 소스를 신뢰하는 경우 대신 객체를 직접 저장하고 계속 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87a0055fdb9b686309bb27e57a048438c7379179" translate="yes" xml:space="preserve">
          <source>In other words, to override a command, the new command must have the same name and its app must be before the overridden command&amp;rsquo;s app in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">즉, 명령을 재정의하려면 새 명령의 이름이 동일해야하며 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 재정의 된 명령의 앱 앞에 해당 앱이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b80ed963edad5d68b67324a7f70c9b908485886a" translate="yes" xml:space="preserve">
          <source>In other words, what&amp;rsquo;s needed is a DRY mechanism. Among other advantages it would allow evolution of the URL design without having to go over all the project source code to search and replace outdated URLs.</source>
          <target state="translated">다시 말해, 필요한 것은 DRY 메커니즘입니다. 다른 장점들 중에서도 오래된 프로젝트를 검색하고 교체하기 위해 모든 프로젝트 소스 코드를 거치지 않고도 URL 디자인을 발전시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="321459efe8129cd478ea12c0e5f6183e07ff2a01" translate="yes" xml:space="preserve">
          <source>In other words, your applications&amp;rsquo; root packages and the modules that define your application configuration classes shouldn&amp;rsquo;t import any models, even indirectly.</source>
          <target state="translated">즉, 응용 프로그램의 루트 패키지와 응용 프로그램 구성 클래스를 정의하는 모듈은 모델을 간접적으로 가져 와서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="87949143eea93ab9a8d8bacabc4b969b2cd76026" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;HandField&lt;/code&gt; class, we&amp;rsquo;re storing the data as a VARCHAR field in the database, so we need to be able to process strings and &lt;code&gt;None&lt;/code&gt; in the &lt;code&gt;from_db_value()&lt;/code&gt;. In &lt;code&gt;to_python()&lt;/code&gt;, we need to also handle &lt;code&gt;Hand&lt;/code&gt; instances:</source>
          <target state="translated">우리에 &lt;code&gt;HandField&lt;/code&gt; 의 우리가 공정 문자열을 할 수 있어야하고, 그래서 클래스, 우리는 데이터베이스의 VARCHAR 필드와 데이터를 저장하고 &lt;code&gt;None&lt;/code&gt; 에서 &lt;code&gt;from_db_value()&lt;/code&gt; . 에서 &lt;code&gt;to_python()&lt;/code&gt; , 우리는 또한 처리 할 필요가 &lt;code&gt;Hand&lt;/code&gt; 인스턴스를 :</target>
        </trans-unit>
        <trans-unit id="8ec59e4ab401ce0ece29fca3cb173154f5ebfc03" translate="yes" xml:space="preserve">
          <source>In our example, we&amp;rsquo;ll call our field &lt;code&gt;HandField&lt;/code&gt;. (It&amp;rsquo;s a good idea to call your &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass &lt;code&gt;&amp;lt;Something&amp;gt;Field&lt;/code&gt;, so it&amp;rsquo;s easily identifiable as a &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass.) It doesn&amp;rsquo;t behave like any existing field, so we&amp;rsquo;ll subclass directly from &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 예에서는 &lt;code&gt;HandField&lt;/code&gt; 필드를 호출합니다 . ( &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 서브 클래스 &lt;code&gt;&amp;lt;Something&amp;gt;Field&lt;/code&gt; 를 호출하는 것이 좋습니다 . 따라서 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 서브 클래스 로 쉽게 식별 할 수 있습니다 .) 기존 필드처럼 작동하지 않으므로 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 에서 직접 서브 클래스됩니다 :</target>
        </trans-unit>
        <trans-unit id="200d03f759a98a5f63a0cca6040dab99cbf456aa" translate="yes" xml:space="preserve">
          <source>In our first test, we focused closely on the internal behavior of the code. For this test, we want to check its behavior as it would be experienced by a user through a web browser.</source>
          <target state="translated">첫 번째 테스트에서는 코드의 내부 동작에 면밀하게 초점을 맞췄습니다. 이 테스트에서는 웹 브라우저를 통해 사용자가 경험할 수있는 동작을 확인하려고합니다.</target>
        </trans-unit>
        <trans-unit id="be3f232c87c2467fa6a724407cf4bb950c14ef61" translate="yes" xml:space="preserve">
          <source>In our poll app, we&amp;rsquo;ll create two models: &lt;code&gt;Question&lt;/code&gt; and &lt;code&gt;Choice&lt;/code&gt;. A &lt;code&gt;Question&lt;/code&gt; has a question and a publication date. A &lt;code&gt;Choice&lt;/code&gt; has two fields: the text of the choice and a vote tally. Each &lt;code&gt;Choice&lt;/code&gt; is associated with a &lt;code&gt;Question&lt;/code&gt;.</source>
          <target state="translated">설문 조사 앱에서는 &lt;code&gt;Question&lt;/code&gt; 과 &lt;code&gt;Choice&lt;/code&gt; 의 두 가지 모델을 만듭니다 . &lt;code&gt;Question&lt;/code&gt; 질문과 발행일을 가지고있다. &lt;code&gt;Choice&lt;/code&gt; 선택의 텍스트와 투표 집계 : 두 개의 필드가 있습니다. 각 &lt;code&gt;Choice&lt;/code&gt; 은 &lt;code&gt;Question&lt;/code&gt; 과 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c9571e16932b147d1f1c8511a5d04504310d27a" translate="yes" xml:space="preserve">
          <source>In our poll application, we&amp;rsquo;ll have the following four views:</source>
          <target state="translated">설문 조사 신청에는 다음과 같은 4 가지 견해가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf972e12a966ca6c6eecb8fe6283423f8ce689ac" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;d probably want to record the interest in a key-value store rather than in a relational database, so we&amp;rsquo;ve left that bit out. The only bit of the view that needs to worry about using &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; is where we want to look up the author we&amp;rsquo;re interested in, which it does with a call to &lt;code&gt;self.get_object()&lt;/code&gt;. Everything else is taken care of for us by the mixin.</source>
          <target state="translated">실제로 관계형 데이터베이스가 아닌 키-값 저장소에 관심을 기록하고 싶을 것이므로 그 부분을 생략했습니다. &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 사용에 대해 걱정해야 할 부분 은 &lt;code&gt;self.get_object()&lt;/code&gt; 호출로 관심있는 작성자를 찾는 것 입니다. 다른 모든 것은 mixin에 의해 우리를 위해 돌보아집니다.</target>
        </trans-unit>
        <trans-unit id="f5a8cc8880a64d6f073c4d7908bd6dba8d796910" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters.</source>
          <target state="translated">실제로 이것을 사용하여 템플릿의 여러 위치에서 사용할 수있는 문자열을 얻거나 출력을 다른 템플릿 태그 또는 필터의 인수로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b07696c8063df15fbf4c588d34e006df6dbe3901" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters:</source>
          <target state="translated">실제로 이것을 사용하여 템플릿의 여러 위치에서 사용할 수있는 문자열을 얻거나 출력을 다른 템플릿 태그 또는 필터의 인수로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d297ccfa88b8ebaa61778e3119442058ee0cb9c0" translate="yes" xml:space="preserve">
          <source>In practice, it&amp;rsquo;s often easiest to use &lt;code&gt;chunks()&lt;/code&gt; all the time. Looping over &lt;code&gt;chunks()&lt;/code&gt; instead of using &lt;code&gt;read()&lt;/code&gt; ensures that large files don&amp;rsquo;t overwhelm your system&amp;rsquo;s memory.</source>
          <target state="translated">실제로는 항상 &lt;code&gt;chunks()&lt;/code&gt; 를 사용하는 것이 가장 쉬운 방법 입니다. &lt;code&gt;read()&lt;/code&gt; &lt;code&gt;chunks()&lt;/code&gt; 대신 chunks () 를 반복 하면 큰 파일이 시스템 메모리를 압도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b8e788eb6f744c88e1daabbf412406627452a09" translate="yes" xml:space="preserve">
          <source>In practice, signal handlers are usually defined in a &lt;code&gt;signals&lt;/code&gt; submodule of the application they relate to. Signal receivers are connected in the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method of your application configuration class. If you&amp;rsquo;re using the &lt;a href=&quot;#django.dispatch.receiver&quot;&gt;&lt;code&gt;receiver()&lt;/code&gt;&lt;/a&gt; decorator, import the &lt;code&gt;signals&lt;/code&gt; submodule inside &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">실제로, 신호 처리기는 일반적으로 관련 응용 프로그램 의 &lt;code&gt;signals&lt;/code&gt; 하위 모듈에 정의 됩니다. 신호 수신기는 애플리케이션 구성 클래스 의 &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 메소드로 연결됩니다 . &lt;a href=&quot;#django.dispatch.receiver&quot;&gt; &lt;code&gt;receiver()&lt;/code&gt; &lt;/a&gt; 데코레이터를 사용하는 경우 &lt;code&gt;signals&lt;/code&gt; 하위 모듈을 &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 안에 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="5e303b3791ba00ba2f2730c84ffcba41b1b0fece" translate="yes" xml:space="preserve">
          <source>In practice, this feature wraps every view function in the &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; decorator described below.</source>
          <target state="translated">실제로이 기능은 아래에 설명 된 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 데코레이터 의 모든 뷰 함수를 래핑 합니다.</target>
        </trans-unit>
        <trans-unit id="807d6a79df3e61ec95aafb0098dd4efac1e3da72" translate="yes" xml:space="preserve">
          <source>In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; arithmetic. The only datetime that&amp;rsquo;s often created in application code is the current time, and &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;timezone.now()&lt;/code&gt;&lt;/a&gt; automatically does the right thing.</source>
          <target state="translated">실제로 이것은 거의 문제가되지 않습니다. Django는 모델과 폼에서 날짜 / 시간 객체를 인식하며, 대부분 새로운 날짜 / 시간 객체는 기존 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt; 에서 시간 델타 산술을 통해 생성됩니다 . 응용 프로그램 코드에서 자주 생성되는 유일한 날짜 시간은 현재 시간이며 &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;timezone.now()&lt;/code&gt; &lt;/a&gt; 자동으로 올바른 일을합니다.</target>
        </trans-unit>
        <trans-unit id="b637ff00ea296f5217d7753924c94e2a84bd6acf" translate="yes" xml:space="preserve">
          <source>In practice, you probably won&amp;rsquo;t need to use &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt; objects on your own, but they&amp;rsquo;re used by Web requests, as explained in the next section.</source>
          <target state="translated">실제로 &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; 개체를 직접 사용할 필요는 없지만 다음 섹션에서 설명하는 것처럼 웹 요청에 의해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="05f63b699e28cf435f1bb4b69860a1d658a1a201" translate="yes" xml:space="preserve">
          <source>In practice, you will usually specify &lt;code&gt;request.FILES&lt;/code&gt; as the source of file data (just like you use &lt;code&gt;request.POST&lt;/code&gt; as the source of form data):</source>
          <target state="translated">실제로, 일반적으로 &lt;code&gt;request.FILES&lt;/code&gt; 를 파일 데이터의 소스로 지정합니다 ( &lt;code&gt;request.POST&lt;/code&gt; 를 양식 데이터의 소스로 사용하는 것처럼).</target>
        </trans-unit>
        <trans-unit id="b18791ebd38e85110f995871c6815d3b19ab08ca" translate="yes" xml:space="preserve">
          <source>In previous parts of the tutorial, the templates have been provided with a context that contains the &lt;code&gt;question&lt;/code&gt; and &lt;code&gt;latest_question_list&lt;/code&gt; context variables. For &lt;code&gt;DetailView&lt;/code&gt; the &lt;code&gt;question&lt;/code&gt; variable is provided automatically &amp;ndash; since we&amp;rsquo;re using a Django model (&lt;code&gt;Question&lt;/code&gt;), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is &lt;code&gt;question_list&lt;/code&gt;. To override this we provide the &lt;code&gt;context_object_name&lt;/code&gt; attribute, specifying that we want to use &lt;code&gt;latest_question_list&lt;/code&gt; instead. As an alternative approach, you could change your templates to match the new default context variables &amp;ndash; but it&amp;rsquo;s a lot easier to tell Django to use the variable you want.</source>
          <target state="translated">학습서의 이전 부분에서 템플리트에는 &lt;code&gt;question&lt;/code&gt; 및 &lt;code&gt;latest_question_list&lt;/code&gt; 컨텍스트 변수 가 포함 된 컨텍스트가 제공되었습니다 . 들어 &lt;code&gt;DetailView&lt;/code&gt; &lt;code&gt;question&lt;/code&gt; 변수는 자동으로 제공됩니다 - 우리가 장고 모델 (사용하고 있기 때문에 &lt;code&gt;Question&lt;/code&gt; ), 장고는 컨텍스트 변수에 대한 적절한 이름을 결정할 수있다. 그러나 ListView의 경우 자동으로 생성 된 컨텍스트 변수는 &lt;code&gt;question_list&lt;/code&gt; 입니다. 이를 무시하기 위해 &lt;code&gt;context_object_name&lt;/code&gt; 속성 을 제공하여 &lt;code&gt;latest_question_list&lt;/code&gt; 를 사용하도록 지정합니다.대신에. 대안으로, 새로운 기본 컨텍스트 변수와 일치하도록 템플릿을 변경할 수 있습니다. 그러나 장고에게 원하는 변수를 사용하도록 지시하는 것이 훨씬 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="1f6f3aa09d467d54d4f032943cbd599296ba5ef5" translate="yes" xml:space="preserve">
          <source>In previous versions of Django, it was necessary to first annotate and then filter against the annotation. This resulted in the annotated value always being present in the query result, and often resulted in a query that took more time to execute.</source>
          <target state="translated">Django의 이전 버전에서는 먼저 주석을 달고 주석을 필터링해야했습니다. 이로 인해 어노테이션이있는 값이 항상 쿼리 결과에 나타나고 종종 쿼리 실행에 더 많은 시간이 걸렸습니다.</target>
        </trans-unit>
        <trans-unit id="857c7ad4641da7dfb7c6325f24baaa53cf1e388e" translate="yes" xml:space="preserve">
          <source>In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context.</source>
          <target state="translated">즉, 동일한 클라이언트의 여러 동시 요청이 관련된 경우 메시지를 생성 한 동일한 창으로 전달하거나 일부 경우에는 메시지가 전달되지 않을 수 있습니다. 이것은 일반적으로 대부분의 응용 프로그램에서 문제가되지 않으며 HTML5에서는 문제가되지 않으며 각 창 / 탭에는 고유 한 탐색 컨텍스트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1af56e92f61b1b8ed524de14c455aa50b0aab85" translate="yes" xml:space="preserve">
          <source>In some cases you may wish to dynamically change which &lt;code&gt;Transform&lt;/code&gt; or &lt;code&gt;Lookup&lt;/code&gt; is returned based on the name passed in, rather than fixing it. As an example, you could have a field which stores coordinates or an arbitrary dimension, and wish to allow a syntax like &lt;code&gt;.filter(coords__x7=4)&lt;/code&gt; to return the objects where the 7th coordinate has value 4. In order to do this, you would override &lt;code&gt;get_lookup&lt;/code&gt; with something like:</source>
          <target state="translated">경우 에 따라 전달 된 이름에 따라 반환 되는 &lt;code&gt;Transform&lt;/code&gt; 또는 &lt;code&gt;Lookup&lt;/code&gt; 수정하지 않고 동적으로 변경하려고 할 수 있습니다 . 예를 들어, 좌표 또는 임의의 차원을 저장하는 필드가 있고 &lt;code&gt;.filter(coords__x7=4)&lt;/code&gt; 와 같은 구문을 사용 하여 7 번째 좌표가 4 인 오브젝트를 리턴하도록 할 수 있습니다. &lt;code&gt;get_lookup&lt;/code&gt; 을 다음과 같이 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="5fdef86b13548e606f863fbd8e30806d3a23d8c0" translate="yes" xml:space="preserve">
          <source>In some cases you might want to capture the result of &lt;code&gt;widthratio&lt;/code&gt; in a variable. It can be useful, for instance, in a &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt;&lt;code&gt;blocktrans&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">경우 에 따라 변수에서 &lt;code&gt;widthratio&lt;/code&gt; 의 결과를 캡처 할 수 있습니다 . 예를 들어 &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt; &lt;code&gt;blocktrans&lt;/code&gt; &lt;/a&gt; 과 같은 블록 트랜스 에서 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a257d0b779896788b6d556ab5da17e01cbe8ff48" translate="yes" xml:space="preserve">
          <source>In some cases you might want to capture the result of &lt;code&gt;widthratio&lt;/code&gt; in a variable. It can be useful, for instance, in a &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktranslate&quot;&gt;&lt;code&gt;blocktranslate&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">어떤 경우 에는 변수 의 &lt;code&gt;widthratio&lt;/code&gt; 결과를 캡처 할 수 있습니다 . 예를 들어 &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktranslate&quot;&gt; &lt;code&gt;blocktranslate&lt;/code&gt; &lt;/a&gt; 과 같은 블록 번역 에서 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b575c3528640df48c24349d84fecc89450e51b0" translate="yes" xml:space="preserve">
          <source>In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the &lt;code&gt;{% cycle %}&lt;/code&gt; tag a name, using &amp;ldquo;as&amp;rdquo;, like this:</source>
          <target state="translated">경우에 따라 다음 값으로 진행하지 않고 사이클의 현재 값을 참조 할 수 있습니다. 이렇게하려면 다음 과 같이 &quot;as&quot;를 사용하여 &lt;code&gt;{% cycle %}&lt;/code&gt; 태그에 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="29c5cbea71be2c58cfaf5424459023b0c9686745" translate="yes" xml:space="preserve">
          <source>In some cases, such as strings with a percent sign followed by a space and a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;string conversion type&lt;/a&gt; (e.g. &lt;code&gt;_(&quot;10% interest&quot;)&lt;/code&gt;), &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; incorrectly flags strings with &lt;code&gt;python-format&lt;/code&gt;.</source>
          <target state="translated">퍼센트 부호가있는 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;문자열&lt;/a&gt; 과 공백 및 문자열 변환 유형 (예 : &lt;code&gt;_(&quot;10% interest&quot;)&lt;/code&gt; )이있는 경우와 같이 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 문자열에 &lt;code&gt;python-format&lt;/code&gt; 을 잘못 플래그 합니다 .</target>
        </trans-unit>
        <trans-unit id="99af10ea50e91cf8913d1a5d12cadaa7cb6b9da2" translate="yes" xml:space="preserve">
          <source>In some cases, you might want to bypass the &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable. For example, if you&amp;rsquo;re using the template system by itself, you likely don&amp;rsquo;t want to have to set up an environment variable pointing to a settings module.</source>
          <target state="translated">경우에 따라 &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 환경 변수 를 무시할 수 있습니다 . 예를 들어 템플릿 시스템을 단독으로 사용하는 경우 설정 모듈을 가리키는 환경 변수를 설정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0daf50f8b596a24cd4a4b70959499e29894a58dc" translate="yes" xml:space="preserve">
          <source>In some cases, you might want to bypass the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable. For example, if you&amp;rsquo;re using the template system by itself, you likely don&amp;rsquo;t want to have to set up an environment variable pointing to a settings module.</source>
          <target state="translated">경우에 따라 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 환경 변수 를 무시할 수도 있습니다 . 예를 들어, 템플릿 시스템 자체를 사용하는 경우 설정 모듈을 가리키는 환경 변수를 설정하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="8dbcdb94c1eff87b6c56ef91c1c4506628f40cf0" translate="yes" xml:space="preserve">
          <source>In some cases, you won&amp;rsquo;t need to register your check function &amp;ndash; you can piggyback on an existing registration.</source>
          <target state="translated">경우에 따라 확인 기능을 등록 할 필요가 없습니다. 기존 등록을 피기 백 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9070909be04c420a9eba7d62728aece4ca6ac3a2" translate="yes" xml:space="preserve">
          <source>In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called as many times for a signal event. For example, the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method may be executed more than once during testing. More generally, this occurs everywhere your project imports the module where you define the signals, because signal registration runs as many times as it is imported.</source>
          <target state="translated">경우에 따라 수신기를 신호에 연결하는 코드가 여러 번 실행될 수 있습니다. 이로 인해 수신기 함수가 두 번 이상 등록되어 신호 이벤트에 대해 여러 번 호출 될 수 있습니다. 예를 들어 &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 메서드는 테스트 중에 두 번 이상 실행될 수 있습니다. 일반적으로 신호 등록은 가져 오는 횟수만큼 실행되기 때문에 프로젝트가 신호를 정의하는 모듈을 가져 오는 모든 곳에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8a2f86e668a97029be624ec47a33ad2137608e0e" translate="yes" xml:space="preserve">
          <source>In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called multiple times for a single signal event.</source>
          <target state="translated">경우에 따라 수신기를 신호에 연결하는 코드가 여러 번 실행될 수 있습니다. 이로 인해 수신기 기능이 두 번 이상 등록되어 단일 신호 이벤트에 대해 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79d711a83ce7a924bc3594bf29585bfc7129050d" translate="yes" xml:space="preserve">
          <source>In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you don&amp;rsquo;t know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database.</source>
          <target state="translated">일부 복잡한 데이터 모델링 상황에서 모델에는 많은 필드가있을 수 있으며, 일부 필드에는 많은 데이터 (예 : 텍스트 필드)가 포함되거나 Python 객체로 변환하기 위해 고가의 처리가 필요할 수 있습니다. 데이터를 처음 가져올 때 특정 필드가 필요한지 알 수없는 상황에서 쿼리 세트의 결과를 사용하는 경우 데이터베이스에서 검색하지 않도록 Django에 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2774cd9614848bc838324a9f3925846c843cbd6c" translate="yes" xml:space="preserve">
          <source>In some rare cases, you might wish to pass parameters to the SQL fragments in &lt;code&gt;extra(select=...)&lt;/code&gt;. For this purpose, use the &lt;code&gt;select_params&lt;/code&gt; parameter.</source>
          <target state="translated">드문 경우이지만 &lt;code&gt;extra(select=...)&lt;/code&gt; 매개 변수를 SQL 조각에 전달할 수 있습니다 . 이를 위해 &lt;code&gt;select_params&lt;/code&gt; 매개 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b48e88bf410f2cba633c2cb412176cbfa3a3eb6" translate="yes" xml:space="preserve">
          <source>In some rare circumstances, it&amp;rsquo;s necessary to be able to force the &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method to perform an SQL &lt;code&gt;INSERT&lt;/code&gt; and not fall back to doing an &lt;code&gt;UPDATE&lt;/code&gt;. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the &lt;code&gt;force_insert=True&lt;/code&gt; or &lt;code&gt;force_update=True&lt;/code&gt; parameters to the &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method. Passing both parameters is an error: you cannot both insert &lt;em&gt;and&lt;/em&gt; update at the same time!</source>
          <target state="translated">드문 경우지만 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드가 SQL &lt;code&gt;INSERT&lt;/code&gt; 를 수행 하도록 강제 할 수 있어야 하며 &lt;code&gt;UPDATE&lt;/code&gt; 수행으로 넘어 가지 않아야 합니다. 또는 그 반대의 경우 : 가능한 경우 업데이트하지만 새 행을 삽입하지 마십시오. 이 경우 &lt;code&gt;force_insert=True&lt;/code&gt; 또는 &lt;code&gt;force_update=True&lt;/code&gt; 매개 변수를 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드에 전달할 수 있습니다 . 두 매개 변수를 모두 전달하면 오류가 발생합니다. 삽입 &lt;em&gt;과&lt;/em&gt; 업데이트를 동시에 수행 할 수 없습니다 !</target>
        </trans-unit>
        <trans-unit id="ce736764b432a2fae47c89320e8e9fd2392f9dd8" translate="yes" xml:space="preserve">
          <source>In some scenarios where views are of a generic nature, a many-to-one relationship might exist between URLs and views. For these cases the view name isn&amp;rsquo;t a good enough identifier for it when comes the time of reversing URLs. Read the next section to know about the solution Django provides for this.</source>
          <target state="translated">보기가 일반적인 특성 인 일부 시나리오에서는 URL과보기 사이에 다 대일 관계가 존재할 수 있습니다. 이 경우 URL을 되돌릴 때보기 이름이 충분하지 않습니다. 다음 섹션을 읽고 Django가 제공하는 솔루션에 대해 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="b1e5d19e9d9d33f10b0a69c92fa82b62a739e1d4" translate="yes" xml:space="preserve">
          <source>In statement 1, a new &lt;code&gt;Person&lt;/code&gt; object is saved to the &lt;code&gt;first&lt;/code&gt; database. At this time, &lt;code&gt;p&lt;/code&gt; doesn&amp;rsquo;t have a primary key, so Django issues an SQL &lt;code&gt;INSERT&lt;/code&gt; statement. This creates a primary key, and Django assigns that primary key to &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">명령문 1에서 새 &lt;code&gt;Person&lt;/code&gt; 오브젝트가 &lt;code&gt;first&lt;/code&gt; 데이터베이스에 저장 됩니다. 현재 &lt;code&gt;p&lt;/code&gt; 에는 기본 키가 없으므로 Django는 SQL &lt;code&gt;INSERT&lt;/code&gt; 문을 실행합니다. 그러면 기본 키가 생성되고 Django는 해당 기본 키를 &lt;code&gt;p&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="e064abd9ffdc8b00766db1b2b02b9688bf7b519c" translate="yes" xml:space="preserve">
          <source>In templates: Using the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="translated">템플릿에서 : &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 템플릿 태그 사용.</target>
        </trans-unit>
        <trans-unit id="cfdab87bc82efd3797239c4ba21d1d79e927c429" translate="yes" xml:space="preserve">
          <source>In that &lt;code&gt;register.inclusion_tag()&lt;/code&gt; line, we specified &lt;code&gt;takes_context=True&lt;/code&gt; and the name of the template. Here&amp;rsquo;s what the template &lt;code&gt;link.html&lt;/code&gt; might look like:</source>
          <target state="translated">그에서 &lt;code&gt;register.inclusion_tag()&lt;/code&gt; 라인, 우리는 지정된 &lt;code&gt;takes_context=True&lt;/code&gt; 및 템플릿의 이름입니다. &lt;code&gt;link.html&lt;/code&gt; 템플릿 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="67c01f0adefa1043d3003b730cd2f663f4b756b7" translate="yes" xml:space="preserve">
          <source>In that form, the &amp;ldquo;Question&amp;rdquo; field is a select box containing every question in the database. Django knows that a &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; should be represented in the admin as a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; box. In our case, only one question exists at this point.</source>
          <target state="translated">이 양식에서 &quot;질문&quot;필드는 데이터베이스의 모든 질문을 포함하는 선택 상자입니다. Django는 &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가 관리자에서 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 상자 로 표시되어야한다는 것을 알고 있습니다 . 우리의 경우,이 시점에서 단 하나의 질문 만 존재합니다.</target>
        </trans-unit>
        <trans-unit id="e16803d7e5444774cf1847606a924ea98fc0f9ff" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;#built-in-field-classes&quot;&gt;built-in Field classes&lt;/a&gt; section below, each &lt;code&gt;Field&lt;/code&gt; defines the error message keys it uses.</source>
          <target state="translated">아래의 &lt;a href=&quot;#built-in-field-classes&quot;&gt;내장 필드 클래스&lt;/a&gt; 섹션에서 각 &lt;code&gt;Field&lt;/code&gt; 는 사용하는 오류 메시지 키를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="4b8de39169c018ef000a9984f73650a25eb94d98" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;authentication framework&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;django.contrib.auth.views.LoginView&lt;/code&gt;&lt;/a&gt; passes the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; name to the template as &lt;code&gt;{{ site_name }}&lt;/code&gt;.</source>
          <target state="translated">에서 &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;authentication framework&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;django.contrib.auth.views.LoginView&lt;/code&gt; 가&lt;/a&gt; 현재 전달 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 로 템플릿에 이름을 &lt;code&gt;{{ site_name }}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f38cdaf92023e3d5b6ad536a62d5ac0850443cb2" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../ref/contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;django.contrib.admindocs&lt;/code&gt;&lt;/a&gt; display, the field description is interpolated with &lt;code&gt;field.__dict__&lt;/code&gt; which allows the description to incorporate arguments of the field. For example, the description for &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">에서 &lt;a href=&quot;../ref/contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;django.contrib.admindocs&lt;/code&gt; 의&lt;/a&gt; 표시 필드의 설명과 보간 &lt;code&gt;field.__dict__&lt;/code&gt; 필드 법인 (法人) 인자로 설명 할 수있다. 예를 들어 &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; 에&lt;/a&gt; 대한 설명 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="61a99f888da03252e37a49dc94b253027356d243" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;flatpages#module-django.contrib.flatpages&quot;&gt;&lt;code&gt;flatpages framework&lt;/code&gt;&lt;/a&gt;, each flatpage is associated with a particular site. When a flatpage is created, you specify its &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; checks the current site in retrieving flatpages to display.</source>
          <target state="translated">에서 &lt;a href=&quot;flatpages#module-django.contrib.flatpages&quot;&gt; &lt;code&gt;flatpages framework&lt;/code&gt; &lt;/a&gt; , 각 flatpage는 특정 사이트와 연결되어 있습니다. flatpage가 생성되면, 당신은 지정 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; 의&lt;/a&gt; 디스플레이에 flatpages를 검색 수표 현재 사이트.</target>
        </trans-unit>
        <trans-unit id="ab0e7037c1bb990ccc8f0010f58edfb9050005ab" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;redirects#module-django.contrib.redirects&quot;&gt;&lt;code&gt;redirects framework&lt;/code&gt;&lt;/a&gt;, each redirect object is associated with a particular site. When Django searches for a redirect, it takes into account the current site.</source>
          <target state="translated">에서 &lt;a href=&quot;redirects#module-django.contrib.redirects&quot;&gt; &lt;code&gt;redirects framework&lt;/code&gt; &lt;/a&gt; , 각 리디렉션 객체는 특정 사이트와 연결되어 있습니다. Django는 리디렉션을 검색 할 때 현재 사이트를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="e00c865684c73ed393c739c654ec70b0bd8e2997" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;syndication#module-django.contrib.syndication&quot;&gt;&lt;code&gt;syndication framework&lt;/code&gt;&lt;/a&gt;, the templates for &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; automatically have access to a variable &lt;code&gt;{{ site }}&lt;/code&gt;, which is the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object representing the current site. Also, the hook for providing item URLs will use the &lt;code&gt;domain&lt;/code&gt; from the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object if you don&amp;rsquo;t specify a fully-qualified domain.</source>
          <target state="translated">에서 &lt;a href=&quot;syndication#module-django.contrib.syndication&quot;&gt; &lt;code&gt;syndication framework&lt;/code&gt; &lt;/a&gt; 를위한 템플릿 &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;description&lt;/code&gt; 자동으로 변수에 액세스 할 수 있습니다 &lt;code&gt;{{ site }}&lt;/code&gt; 은 IS, &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 현재 위치를 나타내는 개체를. 또한 정규화 된 도메인을 지정하지 않으면 항목 URL을 제공하기위한 후크 에서 현재 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 개체 의 &lt;code&gt;domain&lt;/code&gt; 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="3cae9da1a42439d27f7e2fc7772d9140895ca585" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;as_p()&lt;/code&gt;, &lt;code&gt;as_ul()&lt;/code&gt; and &lt;code&gt;as_table()&lt;/code&gt; shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the &lt;code&gt;ContactForm&lt;/code&gt; example, the fields are defined in the order &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt;, &lt;code&gt;cc_myself&lt;/code&gt;. To reorder the HTML output, change the order in which those fields are listed in the class.</source>
          <target state="translated">에서 &lt;code&gt;as_p()&lt;/code&gt; , &lt;code&gt;as_ul()&lt;/code&gt; 및 &lt;code&gt;as_table()&lt;/code&gt; 바로 가기, 필드는 사용자가 양식 클래스를 정의하는 순서에 표시됩니다. 예를 들어, &lt;code&gt;ContactForm&lt;/code&gt; 예에서 필드는 order &lt;code&gt;subject&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; , &lt;code&gt;sender&lt;/code&gt; , &lt;code&gt;cc_myself&lt;/code&gt; 순서로 정의됩니다 . HTML 출력을 재정렬하려면 해당 필드가 클래스에 나열되는 순서를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="6ca61b57511e0384cfa193f4c62191a0072117aa" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;fixtures&lt;/code&gt; directory of every installed application</source>
          <target state="translated">설치된 모든 응용 프로그램 의 &lt;code&gt;fixtures&lt;/code&gt; 디렉토리</target>
        </trans-unit>
        <trans-unit id="c2e20542720527ab7cf07a8cbe445b23385b59fc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;polls/urls.py&lt;/code&gt; file include the following code:</source>
          <target state="translated">에서 &lt;code&gt;polls/urls.py&lt;/code&gt; 파일에 다음 코드를 포함 :</target>
        </trans-unit>
        <trans-unit id="7e79d1c3816db22dfa49e704e2e1e701d76541a2" translate="yes" xml:space="preserve">
          <source>In the GitHub scenario, the session cookie would be allowed when following a regular link from an external website and be blocked in CSRF-prone request methods (e.g. &lt;code&gt;POST&lt;/code&gt;).</source>
          <target state="translated">GitHub 시나리오에서 세션 쿠키는 외부 웹 사이트에서 일반 링크를 따라갈 때 허용되며 CSRF가 발생하기 쉬운 요청 방법 (예 : &lt;code&gt;POST&lt;/code&gt; ) 에서 차단됩니다 .</target>
        </trans-unit>
        <trans-unit id="a35e39704ca75e16ec151ec02bb8d09c5245b059" translate="yes" xml:space="preserve">
          <source>In the SQL standards, each SQL query starts a transaction, unless one is already active. Such transactions must then be explicitly committed or rolled back.</source>
          <target state="translated">SQL 표준에서 각 SQL 쿼리는 트랜잭션이 아직 활성화되어 있지 않으면 트랜잭션을 시작합니다. 그런 다음 이러한 트랜잭션을 명시 적으로 커밋하거나 롤백해야합니다.</target>
        </trans-unit>
        <trans-unit id="d85d9726aad9b5761b698a91a3fa752dcf0b2bef" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;{{ section.title }}&lt;/code&gt; will be replaced with the &lt;code&gt;title&lt;/code&gt; attribute of the &lt;code&gt;section&lt;/code&gt; object.</source>
          <target state="translated">위의 예에서 &lt;code&gt;{{ section.title }}&lt;/code&gt; 은 &lt;code&gt;section&lt;/code&gt; 객체 의 &lt;code&gt;title&lt;/code&gt; 속성 으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="c8e400b0450098c588ff1bf9ef3ced42847e2189" translate="yes" xml:space="preserve">
          <source>In the above example, both URL patterns point to the same view &amp;ndash; &lt;code&gt;views.page&lt;/code&gt; &amp;ndash; but the first pattern doesn&amp;rsquo;t capture anything from the URL. If the first pattern matches, the &lt;code&gt;page()&lt;/code&gt; function will use its default argument for &lt;code&gt;num&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;. If the second pattern matches, &lt;code&gt;page()&lt;/code&gt; will use whatever &lt;code&gt;num&lt;/code&gt; value was captured.</source>
          <target state="translated">위의 예에서 두 URL 패턴은 동일한보기 ( &lt;code&gt;views.page&lt;/code&gt; )를 가리 키지 만 첫 번째 패턴은 URL에서 아무것도 캡처하지 않습니다. 첫 번째 패턴이 일치하면 &lt;code&gt;page()&lt;/code&gt; 함수에 대한 기본 인수를 사용합니다 &lt;code&gt;num&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; . 두 번째 패턴이 일치하면 &lt;code&gt;page()&lt;/code&gt; 는 캡처 된 &lt;code&gt;num&lt;/code&gt; 값을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="fc33d28f955e8ad2642da30af478dafd323d4ae4" translate="yes" xml:space="preserve">
          <source>In the above example, only the fields &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; will be displayed, sequentially, in the form. &lt;code&gt;fields&lt;/code&gt; can contain values defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt;&lt;/a&gt; to be displayed as read-only.</source>
          <target state="translated">위의 예에서는 &lt;code&gt;url&lt;/code&gt; , &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;content&lt;/code&gt; 필드 만 양식으로 순차적으로 표시됩니다. &lt;code&gt;fields&lt;/code&gt; 는 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt; &lt;/a&gt; 에 정의 된 값을 포함 하여 읽기 전용으로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36256fe1165ee329fa178a898c6d788a746b521c" translate="yes" xml:space="preserve">
          <source>In the above example, the &amp;ldquo;age&amp;rdquo; field will be excluded but the &amp;ldquo;name&amp;rdquo; field will be included in the generated form.</source>
          <target state="translated">위의 예에서 &quot;나이&quot;필드는 제외되지만 &quot;이름&quot;필드는 생성 된 양식에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9b8e730b189037d720518429d06c01e1f5b80497" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception raised by &lt;code&gt;Model.clean()&lt;/code&gt; was instantiated with a string, so it will be stored in a special error dictionary key, &lt;a href=&quot;../exceptions#django.core.exceptions.NON_FIELD_ERRORS&quot;&gt;&lt;code&gt;NON_FIELD_ERRORS&lt;/code&gt;&lt;/a&gt;. This key is used for errors that are tied to the entire model instead of to a specific field:</source>
          <target state="translated">위 예제에서 &lt;code&gt;Model.clean()&lt;/code&gt; 에 의해 발생한 &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt; 예외 는 문자열로 인스턴스화되었으므로 특수 오류 사전 키 &lt;a href=&quot;../exceptions#django.core.exceptions.NON_FIELD_ERRORS&quot;&gt; &lt;code&gt;NON_FIELD_ERRORS&lt;/code&gt; 에&lt;/a&gt; 저장됩니다 . 이 키는 특정 필드 대신 전체 모델과 관련된 오류에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="054e7fb40fa8d67083dfe23cb23e8a33bd7f4a9d" translate="yes" xml:space="preserve">
          <source>In the above example, the captured &lt;code&gt;&quot;username&quot;&lt;/code&gt; variable is passed to the included URLconf, as expected.</source>
          <target state="translated">위의 예에서 캡처 한 &lt;code&gt;&quot;username&quot;&lt;/code&gt; 변수는 예상대로 포함 된 URLconf에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2e4675b3bb9d4b4002a375360f90bfba0c6f91a3" translate="yes" xml:space="preserve">
          <source>In the above example, the methods below will be available on the manager &lt;code&gt;reporter.article_set&lt;/code&gt;.</source>
          <target state="translated">위의 예에서 아래의 방법은 관리자 &lt;code&gt;reporter.article_set&lt;/code&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="65ad72df37c0389d2230e3f4d563d496af4f3eea" translate="yes" xml:space="preserve">
          <source>In the above example, the values for the &lt;code&gt;pass_word&lt;/code&gt; and &lt;code&gt;credit_card_number&lt;/code&gt; POST parameters will be hidden and replaced with stars (&lt;code&gt;**********&lt;/code&gt;) in the request&amp;rsquo;s representation inside the error reports, whereas the value of the &lt;code&gt;name&lt;/code&gt; parameter will be disclosed.</source>
          <target state="translated">위의 예에서 &lt;code&gt;pass_word&lt;/code&gt; 및 &lt;code&gt;credit_card_number&lt;/code&gt; POST 매개 변수 의 값은 오류 보고서 내의 요청 표시에서 숨겨지고 별표 ( &lt;code&gt;**********&lt;/code&gt; ) 로 대체되는 반면 &lt;code&gt;name&lt;/code&gt; 매개 변수 의 값 은 공개됩니다.</target>
        </trans-unit>
        <trans-unit id="bac0f6907fb81a767b7ad0760c5544c765493d0b" translate="yes" xml:space="preserve">
          <source>In the above example, the values for the &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;pw&lt;/code&gt; and &lt;code&gt;cc&lt;/code&gt; variables will be hidden and replaced with stars (&lt;code&gt;**********&lt;/code&gt;) in the error reports, whereas the value of the &lt;code&gt;name&lt;/code&gt; variable will be disclosed.</source>
          <target state="translated">위의 예에서 &lt;code&gt;user&lt;/code&gt; , &lt;code&gt;pw&lt;/code&gt; 및 &lt;code&gt;cc&lt;/code&gt; 변수 의 값은 오류 보고서에서 숨겨지고 별표 ( &lt;code&gt;**********&lt;/code&gt; ) 로 대체되는 반면 &lt;code&gt;name&lt;/code&gt; 변수 의 값은 공개됩니다.</target>
        </trans-unit>
        <trans-unit id="5c13e8f2b17b315a25d1911d4b412a00dfeed073" translate="yes" xml:space="preserve">
          <source>In the above example, we determined that a case insensitive lookup would be more useful. When dealing with non-English names, a further improvement is to use &lt;a href=&quot;../../ref/contrib/postgres/lookups#std:fieldlookup-unaccent&quot;&gt;&lt;code&gt;unaccented comparison&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">위의 예에서 대소 문자를 구분하지 않는 조회가 더 유용하다고 판단했습니다. 영어 이외의 이름을 다룰 때, 개선 &lt;a href=&quot;../../ref/contrib/postgres/lookups#std:fieldlookup-unaccent&quot;&gt; &lt;code&gt;unaccented comparison&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 더욱 개선되었습니다 .</target>
        </trans-unit>
        <trans-unit id="b96e1eae465a596d094ef282c8dc2860d32edcd6" translate="yes" xml:space="preserve">
          <source>In the above example, we set the Atom feed&amp;rsquo;s &lt;code&gt;subtitle&lt;/code&gt; to the RSS feed&amp;rsquo;s &lt;code&gt;description&lt;/code&gt;, because it&amp;rsquo;s quite short already.</source>
          <target state="translated">위의 예에서 Atom 피드의 &lt;code&gt;subtitle&lt;/code&gt; 을 RSS 피드의 &lt;code&gt;description&lt;/code&gt; 으로 설정했습니다. 이미 짧기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="b2be673a5dead01b36c94268ca913e0de459fc31" translate="yes" xml:space="preserve">
          <source>In the above, if &lt;code&gt;athlete_list&lt;/code&gt; is not empty, the number of athletes will be displayed by the &lt;code&gt;{{ athlete_list|length }}&lt;/code&gt; variable.</source>
          <target state="translated">위의 &lt;code&gt;athlete_list&lt;/code&gt; 가 비어 있지 않은 경우, &lt;code&gt;{{ athlete_list|length }}&lt;/code&gt; 변수에 의해 선수 수가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="036bce9d539c951de0462de6ee0b26a612693636" translate="yes" xml:space="preserve">
          <source>In the above, if &lt;code&gt;athlete_list&lt;/code&gt; is not empty, the number of athletes will be displayed by the &lt;code&gt;{{ athlete_list|length }}&lt;/code&gt; variable. Otherwise, if &lt;code&gt;athlete_in_locker_room_list&lt;/code&gt; is not empty, the message &amp;ldquo;Athletes should be out&amp;hellip;&amp;rdquo; will be displayed. If both lists are empty, &amp;ldquo;No athletes.&amp;rdquo; will be displayed.</source>
          <target state="translated">위의 &lt;code&gt;athlete_list&lt;/code&gt; 가 비어 있지 않은 경우, &lt;code&gt;{{ athlete_list|length }}&lt;/code&gt; 변수에 의해 선수 수가 표시됩니다 . 그렇지 않으면 &lt;code&gt;athlete_in_locker_room_list&lt;/code&gt; 가 비어 있지 않으면 &amp;ldquo;선수가 나와야합니다&amp;hellip;&amp;rdquo;라는 메시지가 표시됩니다. 두 목록이 모두 비어 있으면 &quot;선수가 없습니다.&quot; 가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="06c8c3e595ff8b1404a63e6217e0454048fc6f6a" translate="yes" xml:space="preserve">
          <source>In the above, the &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; tag loads the &lt;code&gt;humanize&lt;/code&gt; tag library, which then makes the &lt;code&gt;intcomma&lt;/code&gt; filter available for use. If you&amp;rsquo;ve enabled &lt;a href=&quot;../contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;django.contrib.admindocs&lt;/code&gt;&lt;/a&gt;, you can consult the documentation area in your admin to find the list of custom libraries in your installation.</source>
          <target state="translated">위의에서 &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt; 태그로드 &lt;code&gt;humanize&lt;/code&gt; 후하게 태그 라이브러리, &lt;code&gt;intcomma&lt;/code&gt; 에 사용할 수있는 필터를. &lt;a href=&quot;../contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;django.contrib.admindocs&lt;/code&gt; 를&lt;/a&gt; 활성화 한 경우 관리자의 설명서 영역을 참조하여 설치에서 사용자 정의 라이브러리 목록을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67157a0988cf8fa0ce4d5b9aaad093f942a5bcec" translate="yes" xml:space="preserve">
          <source>In the admin framework, the &amp;ldquo;view on site&amp;rdquo; link uses the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; to work out the domain for the site that it will redirect to.</source>
          <target state="translated">관리자 프레임 워크에서 &quot;사이트에서보기&quot;링크는 현재 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 를 사용하여 리디렉션 할 사이트의 도메인을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="08000b52dbe25a161a365d8c2d097c086b24d380" translate="yes" xml:space="preserve">
          <source>In the beginning there was only the view function contract, Django passed your function an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; and expected back an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. This was the extent of what Django provided.</source>
          <target state="translated">처음에는 뷰 함수 계약 만 있었으며 Django는 함수에 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 를&lt;/a&gt; 전달 하고 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 를&lt;/a&gt; 다시 기대했습니다 . 이것은 장고가 제공 한 정도입니다.</target>
        </trans-unit>
        <trans-unit id="89eb2f3613635899652ec376acd113c2fd5cfaa7" translate="yes" xml:space="preserve">
          <source>In the case of a model instance that contained no data, it would rarely if ever be useful to do anything with it in a template. On the other hand, it makes perfect sense to render an unpopulated form - that&amp;rsquo;s what we do when we want the user to populate it.</source>
          <target state="translated">데이터가 포함되지 않은 모델 인스턴스의 경우 템플릿에서 데이터를 처리하는 것이 유용한 경우는 거의 없습니다. 반면에 채워지지 않은 양식을 렌더링하는 것은 완벽합니다. 즉, 사용자가 양식을 채우려 고 할 때 수행하는 작업입니다.</target>
        </trans-unit>
        <trans-unit id="c4ab596a52e2082b97972eb72c42ac13c8c2757e" translate="yes" xml:space="preserve">
          <source>In the command prompt, ensure your virtual environment is active, and execute the following command:</source>
          <target state="translated">명령 프롬프트에서 가상 환경이 활성화되어 있는지 확인하고 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="1609a3c27d2c2842f190fe8992b4a57338c73380" translate="yes" xml:space="preserve">
          <source>In the contact form example above, &lt;code&gt;cc_myself&lt;/code&gt; will be a boolean value. Likewise, fields such as &lt;a href=&quot;../../ref/forms/fields#django.forms.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/forms/fields#django.forms.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; convert values to a Python &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; respectively.</source>
          <target state="translated">위의 문의 양식 예에서 &lt;code&gt;cc_myself&lt;/code&gt; 는 부울 값입니다. 마찬가지로 &lt;a href=&quot;../../ref/forms/fields#django.forms.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/forms/fields#django.forms.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; &lt;/a&gt; 와 같은 필드는 각각 값을 Python &lt;code&gt;int&lt;/code&gt; 및 &lt;code&gt;float&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="03eed8e02cbc009e5225da6ccd80e31e4e1d6836" translate="yes" xml:space="preserve">
          <source>In the context of a Web application, &amp;lsquo;form&amp;rsquo; might refer to that HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, or to the Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; that produces it, or to the structured data returned when it is submitted, or to the end-to-end working collection of these parts.</source>
          <target state="translated">웹 애플리케이션의 맥락에서 'form'은 해당 HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 또는이 를 생성 하는 Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 또는 제출시 리턴 된 구조화 된 데이터 또는 엔드 투 엔드 작업 콜렉션을 나타낼 수 있습니다. 이 부분의.</target>
        </trans-unit>
        <trans-unit id="5a34903ee3fddd98e21618e22c82cf3333e5c987" translate="yes" xml:space="preserve">
          <source>In the corresponding view functions, ensure that &lt;a href=&quot;templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; is used to render the response so that &lt;code&gt;{% csrf_token %}&lt;/code&gt; will work properly. If you&amp;rsquo;re using the &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; function, generic views, or contrib apps, you are covered already since these all use &lt;code&gt;RequestContext&lt;/code&gt;.</source>
          <target state="translated">해당보기 함수에서 &lt;a href=&quot;templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt; 를 사용하여 응답을 렌더링하여 &lt;code&gt;{% csrf_token %}&lt;/code&gt; 이 (가) 올바르게 작동 하는지 확인하십시오. 당신이 사용하는 경우 &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; 함수를 일반 뷰 또는있는 contrib 응용 프로그램을, 당신은이 모두 사용하기 때문에 이미 적용됩니다 &lt;code&gt;RequestContext&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb1af41ff9f27e5d9ab58cfab85994a63806adce" translate="yes" xml:space="preserve">
          <source>In the event that all the fields you&amp;rsquo;re querying on are contained within one particular model, you can create a functional index which matches the search vector you wish to use. The PostgreSQL documentation has details on &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX&quot;&gt;creating indexes for full text search&lt;/a&gt;.</source>
          <target state="translated">쿼리하는 모든 필드가 하나의 특정 모델에 포함 된 경우 사용하려는 검색 벡터와 일치하는 기능 인덱스를 만들 수 있습니다. PostgreSQL 문서에는 &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX&quot;&gt;전체 텍스트 검색을위한 인덱스 생성에 대한&lt;/a&gt; 세부 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6f92ce395efb837fbb0560e8eb518c73b6ff24f" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;Blog&lt;/code&gt; model, the primary key is the &lt;code&gt;id&lt;/code&gt; field, so these three statements are equivalent:</source>
          <target state="translated">&lt;code&gt;Blog&lt;/code&gt; 모델 예 에서 기본 키는 &lt;code&gt;id&lt;/code&gt; 필드 이므로이 세 명령문은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="04e4b5bcdcb35cbb0379b289fe1b7eece5458cac" translate="yes" xml:space="preserve">
          <source>In the example above, in the case of a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; relationship, &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;QuerySet.update()&lt;/code&gt;&lt;/a&gt; is used to perform the update. This requires the objects to already be saved.</source>
          <target state="translated">위의 예에서 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 관계의 경우 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;QuerySet.update()&lt;/code&gt; &lt;/a&gt; 가 업데이트를 수행하는 데 사용됩니다. 이를 위해서는 객체가 이미 저장되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="47ec93e0054e37a606f1e92a3f1d7cada5286c57" translate="yes" xml:space="preserve">
          <source>In the examples given so far, we have constructed filters that compare the value of a model field with a constant. But what if you want to compare the value of a model field with another field on the same model?</source>
          <target state="translated">지금까지 제공된 예에서는 모델 필드의 값을 상수와 비교하는 필터를 구성했습니다. 그러나 모델 필드의 값을 동일한 모델의 다른 필드와 비교하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="982c8f23176116f5070c7936c454b1f26af16ddc" translate="yes" xml:space="preserve">
          <source>In the first empty migration file, add a &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt; operation to generate a unique value (UUID in the example) for each existing row. Also add an import of &lt;code&gt;uuid&lt;/code&gt;. For example:</source>
          <target state="translated">첫 번째 빈 마이그레이션 파일에서 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt; 작업을 추가하여 기존의 각 행에 대해 고유 한 값 (예제에서 UUID)을 생성하십시오. 또한 &lt;code&gt;uuid&lt;/code&gt; 가져 오기를 추가하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e35fd9a39f1807a0c7d83b5f82b050cbd08213f6" translate="yes" xml:space="preserve">
          <source>In the first example, the UTF-8 characters are unquoted. In the second, the percent-encodings remain unchanged because they lie outside the valid UTF-8 range or represent a reserved character.</source>
          <target state="translated">첫 번째 예에서 UTF-8 문자는 인용되지 않습니다. 두 번째로, 퍼센트 인코딩은 유효한 UTF-8 범위 밖에 있거나 예약 문자를 나타 내기 때문에 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8efe90c94b3cf572dcc6da616bffdbfcdf129e44" translate="yes" xml:space="preserve">
          <source>In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. &lt;code&gt;distinct=True&lt;/code&gt; is required to avoid a &lt;a href=&quot;#combining-multiple-aggregations&quot;&gt;query bug&lt;/a&gt;.</source>
          <target state="translated">첫 번째 쿼리에서 주석은 필터보다 우선하므로 필터는 주석에 영향을 미치지 않습니다. &lt;code&gt;distinct=True&lt;/code&gt; 는 &lt;a href=&quot;#combining-multiple-aggregations&quot;&gt;버그&lt;/a&gt; 를 피하기 위해 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="0d275b5cb7fc4b1432c362be17f59a41994939ed" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;ChoiceAdmin&lt;/code&gt; has an autocomplete field for the &lt;code&gt;ForeignKey&lt;/code&gt; to the &lt;code&gt;Question&lt;/code&gt;. The results are filtered by the &lt;code&gt;question_text&lt;/code&gt; field and ordered by the &lt;code&gt;date_created&lt;/code&gt; field:</source>
          <target state="translated">다음 예제에서 &lt;code&gt;ChoiceAdmin&lt;/code&gt; 에는 &lt;code&gt;ForeignKey&lt;/code&gt; to the &lt;code&gt;Question&lt;/code&gt; 에 대한 자동 완성 필드가 있습니다. 결과는 &lt;code&gt;question_text&lt;/code&gt; 필드 로 필터링되고 &lt;code&gt;date_created&lt;/code&gt; 필드로 정렬됩니다 .</target>
        </trans-unit>
        <trans-unit id="d2b60a09350bb67bd6b7fee1bd06d1d2f6e595dc" translate="yes" xml:space="preserve">
          <source>In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213):</source>
          <target state="translated">다음 예에서 캐시는 IP 주소 172.19.26.240 (포트 11211), 172.19.26.242 (포트 11212) 및 172.19.26.244 (포트 11213)에서 실행되는 Memcached 인스턴스를 통해 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="774a14ff6afa3b15c21e0e0586425ba89b6281a2" translate="yes" xml:space="preserve">
          <source>In the following example, the distance from the city of Hobart to every other &lt;a href=&quot;model-api#django.contrib.gis.db.models.PointField&quot;&gt;&lt;code&gt;PointField&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;AustraliaCity&lt;/code&gt; queryset is calculated:</source>
          <target state="translated">다음 예제에서는 호바트시 에서 &lt;code&gt;AustraliaCity&lt;/code&gt; &lt;a href=&quot;model-api#django.contrib.gis.db.models.PointField&quot;&gt; &lt;code&gt;PointField&lt;/code&gt; &lt;/a&gt; 다른 모든 PointField 까지의 거리를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="c32f5b020a99c145d62d9c288e0593a7f2c0d978" translate="yes" xml:space="preserve">
          <source>In the following example, the field &lt;code&gt;identifier&lt;/code&gt; is used as the identifying field:</source>
          <target state="translated">다음 예에서 필드 &lt;code&gt;identifier&lt;/code&gt; 는 식별 필드로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0552e596b3c4142a0555d2a338ce81644b342ad7" translate="yes" xml:space="preserve">
          <source>In the following example, we have a migration in &lt;code&gt;app1&lt;/code&gt; which needs to use models in &lt;code&gt;app2&lt;/code&gt;. We aren&amp;rsquo;t concerned with the details of &lt;code&gt;move_m1&lt;/code&gt; other than the fact it will need to access models from both apps. Therefore we&amp;rsquo;ve added a dependency that specifies the last migration of &lt;code&gt;app2&lt;/code&gt;:</source>
          <target state="translated">다음 예제에서, 우리는에서 마이그레이션이 &lt;code&gt;app1&lt;/code&gt; 에서 모델을 사용할 필요가 &lt;code&gt;app2&lt;/code&gt; . 우리는 두 앱에서 모델에 액세스해야한다는 사실 이외 의 &lt;code&gt;move_m1&lt;/code&gt; 의 세부 사항에 대해서는 신경 쓰지 않습니다 . 따라서 &lt;code&gt;app2&lt;/code&gt; 의 마지막 마이그레이션을 지정하는 종속성을 추가했습니다 .</target>
        </trans-unit>
        <trans-unit id="66feb7cf13c927fdd790d1e911432061cb79c0af" translate="yes" xml:space="preserve">
          <source>In the last case of the above example, we can tell the session object explicitly that it has been modified by setting the &lt;code&gt;modified&lt;/code&gt; attribute on the session object:</source>
          <target state="translated">위 예제의 마지막 경우 세션 객체에서 &lt;code&gt;modified&lt;/code&gt; 속성을 설정 하여 세션 객체 가 수정되었음을 명시 적으로 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e66e10c8d1fea4f262f45d7c5ee1356b55e39416" translate="yes" xml:space="preserve">
          <source>In the literal path named by the fixture</source>
          <target state="translated">조명기에 의해 명명 된 리터럴 경로에서</target>
        </trans-unit>
        <trans-unit id="9418ed20fe28804d3d729bcecdb7de900f9ed0b8" translate="yes" xml:space="preserve">
          <source>In the meantime, for backwards compatibility, the datetime is considered to be in the default time zone, which is generally what you expect.</source>
          <target state="translated">그 동안 이전 버전과의 호환성을 위해 날짜 시간은 기본 시간대 인 것으로 간주되며 일반적으로 예상 한 것입니다.</target>
        </trans-unit>
        <trans-unit id="d4fb536c73b22ca7075047278fc28ffbc607d147" translate="yes" xml:space="preserve">
          <source>In the method of a class-based view:</source>
          <target state="translated">클래스 기반 뷰의 방법에서 :</target>
        </trans-unit>
        <trans-unit id="551cd425acfd8cfac753b72db2384c8e4518bc4e" translate="yes" xml:space="preserve">
          <source>In the multi-table inheritance situation, it doesn&amp;rsquo;t make sense for a child class to inherit from its parent&amp;rsquo;s &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class. All the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn&amp;rsquo;t exist in its own right).</source>
          <target state="translated">다중 테이블 상속 상황에서 자식 클래스가 부모의 &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; 클래스 에서 상속되는 것은 이치에 맞지 않습니다 . 모든 &lt;a href=&quot;#meta-options&quot;&gt;메타&lt;/a&gt; 옵션은 이미 상위 클래스에 적용되었으며 다시 적용하면 모순되는 동작 만 발생합니다 (이는 기본 클래스가 자체적으로 존재하지 않는 추상 기본 클래스의 경우와 대조적 임).</target>
        </trans-unit>
        <trans-unit id="bb58183bc0706efe78380abe5cb2057a726424ab" translate="yes" xml:space="preserve">
          <source>In the preceding example, the &lt;code&gt;ModelAdmin&lt;/code&gt; class doesn&amp;rsquo;t define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don&amp;rsquo;t need to define a &lt;code&gt;ModelAdmin&lt;/code&gt; object at all &amp;ndash; you can register the model class without providing a &lt;code&gt;ModelAdmin&lt;/code&gt; description. The preceding example could be simplified to:</source>
          <target state="translated">앞의 예제에서 &lt;code&gt;ModelAdmin&lt;/code&gt; 클래스는 아직 사용자 정의 값을 정의하지 않습니다. 결과적으로 기본 관리 인터페이스가 제공됩니다. 기본 관리 인터페이스에 만족하는 경우 &lt;code&gt;ModelAdmin&lt;/code&gt; 객체를 전혀 정의 할 필요가 없습니다 . &lt;code&gt;ModelAdmin&lt;/code&gt; 설명 을 제공하지 않고 모델 클래스를 등록 할 수 있습니다 . 앞의 예를 다음과 같이 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4e2b35778a30a864406e14b018f76e39bbabff2" translate="yes" xml:space="preserve">
          <source>In the previous example, &lt;code&gt;do_comment()&lt;/code&gt; discarded everything between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. Instead of doing that, it&amp;rsquo;s possible to do something with the code between block tags.</source>
          <target state="translated">이전 예에서 &lt;code&gt;do_comment()&lt;/code&gt; 는 &lt;code&gt;{% comment %}&lt;/code&gt; 와 &lt;code&gt;{% endcomment %}&lt;/code&gt; 사이의 모든 것을 버렸습니다 . 그렇게하는 대신 블록 태그 사이의 코드로 무언가를 수행하는 것이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="16349fd6d21ff8a2e6a4c0856997b30ec2b6e166" translate="yes" xml:space="preserve">
          <source>In the rendered HTML, formsets include a prefix on each field&amp;rsquo;s name. By default, the prefix is &lt;code&gt;'form'&lt;/code&gt;, but it can be customized using the formset&amp;rsquo;s &lt;code&gt;prefix&lt;/code&gt; argument.</source>
          <target state="translated">렌더링 된 HTML에서 양식 세트에는 각 필드 이름에 접두사가 포함됩니다. 기본적으로 접두사는 &lt;code&gt;'form'&lt;/code&gt; 이지만, formset의 &lt;code&gt;prefix&lt;/code&gt; 인수를 사용하여 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="200e10196ad98eae959477f8c80a67aaf04f93e7" translate="yes" xml:space="preserve">
          <source>In the resulting &lt;code&gt;.po&lt;/code&gt; file, the string will then appear as often as there are different contextual markers for the same string (the context will appear on the &lt;code&gt;msgctxt&lt;/code&gt; line), allowing the translator to give a different translation for each of them.</source>
          <target state="translated">결과 &lt;code&gt;.po&lt;/code&gt; 파일에서 문자열은 동일한 문자열에 대해 서로 다른 상황에 맞는 마커가있을 때마다 표시되며 (문맥은 &lt;code&gt;msgctxt&lt;/code&gt; 행에 표시됨) 번역가가 각각에 대해 다른 번역을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f86e54811f7e97ae54dd57549dcb8faa44a8dcb" translate="yes" xml:space="preserve">
          <source>In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view &lt;code&gt;django.views.defaults.permission_denied&lt;/code&gt;.</source>
          <target state="translated">404 및 500보기와 같은 맥락에서 Django는 403 Forbidden error를 처리 할 수 ​​있습니다. 뷰에서 403 예외가 발생하면 Django는 기본적으로 &lt;code&gt;django.views.defaults.permission_denied&lt;/code&gt; 뷰를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="f6f25c44dc9756ac574ee333e0116c1d550b05f1" translate="yes" xml:space="preserve">
          <source>In the second example, the first filter restricts the queryset to all those blogs linked to entries with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline. The second filter restricts the set of blogs &lt;em&gt;further&lt;/em&gt; to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the &lt;code&gt;Blog&lt;/code&gt; items with each filter statement, not the &lt;code&gt;Entry&lt;/code&gt; items.</source>
          <target state="translated">두 번째 예에서 첫 번째 필터 는 헤드 라인에서 &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;이&lt;/em&gt; 있는 항목에 연결된 모든 블로그로 쿼리 세트를 제한합니다 . 두 번째 필터는 블로그 세트를 2008 년에 게시 된 항목에 연결된 블로그로 &lt;em&gt;더&lt;/em&gt; 제한합니다. 두 번째 필터에 의해 선택된 항목은 첫 번째 필터의 항목과 동일하거나 동일하지 않을 수 있습니다. 우리는 필터링되어 &lt;code&gt;Blog&lt;/code&gt; 각 필터 문이 아닌있는 항목 &lt;code&gt;Entry&lt;/code&gt; 항목을.</target>
        </trans-unit>
        <trans-unit id="b14fb50e61cd86af2c3d8c9d512bc73616482c1e" translate="yes" xml:space="preserve">
          <source>In the simplest case, all these sections get lumped together into one &lt;code&gt;sitemap.xml&lt;/code&gt;, but it&amp;rsquo;s also possible to use the framework to generate a sitemap index that references individual sitemap files, one per section. (See &lt;a href=&quot;#creating-a-sitemap-index&quot;&gt;Creating a sitemap index&lt;/a&gt; below.)</source>
          <target state="translated">가장 간단한 경우, 이러한 모든 섹션은 하나의 &lt;code&gt;sitemap.xml&lt;/code&gt; 로 묶여 있지만 프레임 워크를 사용하여 섹션 당 하나씩 개별 사이트 맵 파일을 참조하는 사이트 맵 색인을 생성 할 수도 있습니다. 아래 &lt;a href=&quot;#creating-a-sitemap-index&quot;&gt;사이트 맵 색인 만들기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e1ac5a12917c8c24fac2334237392eba54ee1052" translate="yes" xml:space="preserve">
          <source>In the simplest case, if no custom pluralization is needed, this returns &lt;code&gt;false&lt;/code&gt; for the integer &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; for all other numbers.</source>
          <target state="translated">가장 간단한 경우, 어떤 사용자 정의 복수화가 필요하지 않은 경우,이 반환 &lt;code&gt;false&lt;/code&gt; 정수에 대한 &lt;code&gt;1&lt;/code&gt; 및 &lt;code&gt;true&lt;/code&gt; 다른 모든 숫자.</target>
        </trans-unit>
        <trans-unit id="8a3de0040189995be2cf2593da6e670d68408010" translate="yes" xml:space="preserve">
          <source>In the template &lt;code&gt;list.html&lt;/code&gt;, you can include navigation between pages in the same way as in the template for the &lt;code&gt;ListView&lt;/code&gt; above.</source>
          <target state="translated">템플릿 &lt;code&gt;list.html&lt;/code&gt; 에서는 위 의 &lt;code&gt;ListView&lt;/code&gt; 템플릿과 같은 방식으로 페이지 간 탐색을 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="112593952263d8950c97e9372f1328eef1054b9d" translate="yes" xml:space="preserve">
          <source>In the terminal, we can run our test:</source>
          <target state="translated">터미널에서 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1349bc91f2f8bcface3eb94b3617ded0896f7cda" translate="yes" xml:space="preserve">
          <source>In the usual initialization process, the &lt;code&gt;ready&lt;/code&gt; method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, &lt;code&gt;ready&lt;/code&gt; might be called more than once. In that case, either write idempotent methods, or put a flag on your &lt;code&gt;AppConfig&lt;/code&gt; classes to prevent re-running code which should be executed exactly one time.</source>
          <target state="translated">일반적인 초기화 과정에서 Django는 &lt;code&gt;ready&lt;/code&gt; 메소드를 한 번만 호출합니다. 그러나 일부 경우, 특히 설치된 응용 프로그램을 다루는 테스트에서 &lt;code&gt;ready&lt;/code&gt; 가 두 번 이상 호출 될 수 있습니다. 이 경우 dem 등원 (imdempotent) 메소드를 작성하거나 &lt;code&gt;AppConfig&lt;/code&gt; 클래스 에 플래그를 지정하여 정확히 한 번만 실행해야하는 코드가 다시 실행되지 않도록 하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6b1551e57f5bae10f916d69e9178bd6c7f54504" translate="yes" xml:space="preserve">
          <source>In the view, ensure that you don&amp;rsquo;t include &lt;code&gt;created_by&lt;/code&gt; in the list of fields to edit, and override &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; to add the user:</source>
          <target state="translated">보기에서 편집 할 필드 목록에 &lt;code&gt;created_by&lt;/code&gt; 를 포함하지 않았는지 확인하고 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt; &lt;code&gt;form_valid()&lt;/code&gt; &lt;/a&gt; 를 대체 하여 사용자를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="369aea273c56bb856861501dbf97173cbd5b7309" translate="yes" xml:space="preserve">
          <source>In these cases, Django&amp;rsquo;s admin lets you write and register &amp;ldquo;actions&amp;rdquo; &amp;ndash; functions that get called with a list of objects selected on the change list page.</source>
          <target state="translated">이 경우 Django의 관리자는 변경 목록 페이지에서 선택된 객체 목록으로 호출되는 함수 인 &quot;작업&quot;을 작성하고 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff28e3a2e690b47e59ebb25d9ed8baa34f438420" translate="yes" xml:space="preserve">
          <source>In these cases, you can always access the database directly, routing around the model layer entirely.</source>
          <target state="translated">이 경우 모델 계층을 완전히 라우팅하여 항상 데이터베이스에 직접 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbbd19f07f9cef20e603e35db722408992fae9b4" translate="yes" xml:space="preserve">
          <source>In these cases, you can configure Django&amp;rsquo;s settings manually. Do this by calling:</source>
          <target state="translated">이 경우 Django의 설정을 수동으로 구성 할 수 있습니다. 다음을 호출하여 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="704de23b31a120b2bba2d3638dd6200c1609b04d" translate="yes" xml:space="preserve">
          <source>In these cases, you can register to receive signals sent only by particular senders. In the case of &lt;a href=&quot;../ref/signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;django.db.models.signals.pre_save&lt;/code&gt;&lt;/a&gt;, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:</source>
          <target state="translated">이 경우 특정 발신자가 보낸 신호 만 수신하도록 등록 할 수 있습니다. &lt;a href=&quot;../ref/signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;django.db.models.signals.pre_save&lt;/code&gt; &lt;/a&gt; 의 경우 보낸 사람이 저장되는 모델 클래스가되므로 일부 모델에서 보낸 신호 만 원함을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7960a550f468b9dc5e94875f3e62a9969b92b99" translate="yes" xml:space="preserve">
          <source>In this above example, the &lt;code&gt;cleaned_data&lt;/code&gt; value for &lt;code&gt;nick_name&lt;/code&gt; is set to an empty string, because &lt;code&gt;nick_name&lt;/code&gt; is &lt;code&gt;CharField&lt;/code&gt;, and &lt;code&gt;CharField&lt;/code&gt;s treat empty values as an empty string. Each field type knows what its &amp;ldquo;blank&amp;rdquo; value is &amp;ndash; e.g., for &lt;code&gt;DateField&lt;/code&gt;, it&amp;rsquo;s &lt;code&gt;None&lt;/code&gt; instead of the empty string. For full details on each field&amp;rsquo;s behavior in this case, see the &amp;ldquo;Empty value&amp;rdquo; note for each field in the &amp;ldquo;Built-in &lt;code&gt;Field&lt;/code&gt; classes&amp;rdquo; section below.</source>
          <target state="translated">이 위의 예에서, &lt;code&gt;cleaned_data&lt;/code&gt; 가치 &lt;code&gt;nick_name&lt;/code&gt; 때문에, 빈 문자열로 설정 &lt;code&gt;nick_name&lt;/code&gt; 있다 &lt;code&gt;CharField&lt;/code&gt; 및 &lt;code&gt;CharField&lt;/code&gt; 빈 문자열의 치료 빈 값. 예를 들어, 위해 - 각 필드 타입은 &quot;빈&quot;값이 무엇인지 알고 &lt;code&gt;DateField&lt;/code&gt; , 그것의 &lt;code&gt;None&lt;/code&gt; 대신 빈 문자열. 이 경우 각 필드의 동작에 대한 자세한 내용은 아래 &quot;내장 &lt;code&gt;Field&lt;/code&gt; 클래스&quot;섹션의 각 필드에 대한 &quot;빈 값&quot;참고를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d643c703ff7b79f6479ff9521d4628ae8af455d8" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;poly&lt;/code&gt; is the geographic field, &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; is the spatial lookup type, &lt;code&gt;pnt&lt;/code&gt; is the parameter (which may be a &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object or a string of GeoJSON , WKT, or HEXEWKB), and &lt;code&gt;rst&lt;/code&gt; is a &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 경우, &lt;code&gt;poly&lt;/code&gt; 는 지리적 필드이고, &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 는 공간 조회 유형이며, &lt;code&gt;pnt&lt;/code&gt; 는 매개 변수 ( &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체 또는 GeoJSON, WKT 또는 HEXEWKB 문자열 일 수 있음)이며, &lt;code&gt;rst&lt;/code&gt; 는 &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="7445c15f895769d09cc852511696e2bbac4a2530" translate="yes" xml:space="preserve">
          <source>In this case, a caching mechanism (such as Django&amp;rsquo;s own cache middleware) will cache a separate version of the page for each unique user-agent.</source>
          <target state="translated">이 경우 캐싱 메커니즘 (예 : Django 자체 캐시 미들웨어)은 고유 한 각 사용자 에이전트에 대해 별도의 페이지 버전을 캐시합니다.</target>
        </trans-unit>
        <trans-unit id="dce53faed5d5616c30db50952cf57b2835a3fdb3" translate="yes" xml:space="preserve">
          <source>In this case, both the tag and the filter will see the translated string, so they don&amp;rsquo;t need to be aware of translations.</source>
          <target state="translated">이 경우 태그와 필터 모두 번역 된 문자열을 볼 수 있으므로 번역을 알 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e088f70ea4095e39b7329f3fd37bb777703e1375" translate="yes" xml:space="preserve">
          <source>In this case, migrations pertaining to the &lt;code&gt;blog&lt;/code&gt; app will be contained in the &lt;code&gt;blog.db_migrations&lt;/code&gt; package.</source>
          <target state="translated">이 경우 &lt;code&gt;blog&lt;/code&gt; 앱과 관련된 마이그레이션 이 &lt;code&gt;blog.db_migrations&lt;/code&gt; 패키지에 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="e0019695fe483255859741edb13cf942f6859d9f" translate="yes" xml:space="preserve">
          <source>In this case, the Apache configuration should look like this:</source>
          <target state="translated">이 경우 Apache 구성은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="08e37f4fa83a842b83cf7349cedf3295bb5c2ac3" translate="yes" xml:space="preserve">
          <source>In this case, the Oracle backend will use a separate &lt;code&gt;SELECT&lt;/code&gt; query to retrieve &lt;code&gt;AutoField&lt;/code&gt; values.</source>
          <target state="translated">이 경우 Oracle 백엔드는 별도의 &lt;code&gt;SELECT&lt;/code&gt; 쿼리를 사용하여 &lt;code&gt;AutoField&lt;/code&gt; 값 을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="2ec5cb6330ac92777b17bc2333657f1300336af6" translate="yes" xml:space="preserve">
          <source>In this case, the lazy translations in &lt;code&gt;result&lt;/code&gt; will only be converted to strings when &lt;code&gt;result&lt;/code&gt; itself is used in a string (usually at template rendering time).</source>
          <target state="translated">이 경우 &lt;code&gt;result&lt;/code&gt; 자체 의 지연 &lt;code&gt;result&lt;/code&gt; 는 결과 자체가 문자열에 사용될 때만 (일반적으로 템플릿 렌더링 시간에) 문자열로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="f80ae9b1fb32feea2c4dd344be42cee331d89abf" translate="yes" xml:space="preserve">
          <source>In this case, the subquery must only return a single column &lt;em&gt;and&lt;/em&gt; a single row: the email address of the most recently created comment.</source>
          <target state="translated">이 경우, 서브 쿼리는 하나의 열을 반환해야 &lt;em&gt;하고&lt;/em&gt; 가장 최근에 생성 된 주석의 이메일 주소 : 단일 행을.</target>
        </trans-unit>
        <trans-unit id="bbeb898add7eb688c2d43a04bafad361bbad9894" translate="yes" xml:space="preserve">
          <source>In this case, the subquery must use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; to return only a single column: the primary key of the post.</source>
          <target state="translated">이 경우 하위 쿼리는 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 단일 열, 즉 게시물의 기본 키만 반환 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="fd746e7696a4d17c8dc094df4d9ebfa894053b5d" translate="yes" xml:space="preserve">
          <source>In this case, what&amp;rsquo;s needed is something - and in practice, often a collection of things - to improve the code&amp;rsquo;s performance without, or only minimally, affecting its behavior.</source>
          <target state="translated">이 경우 필요한 것은 동작에 영향을 미치지 않거나 최소한으로 만 코드의 성능을 향상시키기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="881194f58bb0fde296017190a9bf68cd84e48df2" translate="yes" xml:space="preserve">
          <source>In this case, you could write the &lt;code&gt;post()&lt;/code&gt; method yourself, keeping &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; as the only generic functionality, although writing &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; handling code involves a lot of duplication.</source>
          <target state="translated">이 경우에, 당신은 쓸 수 &lt;code&gt;post()&lt;/code&gt; 유지 방법을 직접 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; 를&lt;/a&gt; 쓰고 있지만, 유일한 일반적인 기능으로 &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 처리 코드하는 것은 중복을 많이 포함한다.</target>
        </trans-unit>
        <trans-unit id="2fa3b713cccf7ea4ad5e0fd4a5c02eaa0d614140" translate="yes" xml:space="preserve">
          <source>In this case, you could write the &lt;code&gt;post()&lt;/code&gt; method yourself, keeping &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; as the only generic functionality, although writing &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; handling code involves a lot of duplication.</source>
          <target state="translated">이 경우 &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 처리 코드를 작성 하는 데 많은 중복이 포함 되지만 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 를 유일한 일반 기능으로 유지하면서 &lt;code&gt;post()&lt;/code&gt; 메서드를 직접 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6756abb4e1060efdbcbb43826dc10b83e3f6800" translate="yes" xml:space="preserve">
          <source>In this case, you should leave both &lt;a href=&quot;settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-PORT&quot;&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/a&gt; empty. However, if you don&amp;rsquo;t use a &lt;code&gt;tnsnames.ora&lt;/code&gt; file or a similar naming method and want to connect using the SID (&amp;ldquo;xe&amp;rdquo; in this example), then fill in both &lt;a href=&quot;settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-PORT&quot;&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/a&gt; like so:</source>
          <target state="translated">이 경우 &lt;a href=&quot;settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;settings#std:setting-PORT&quot;&gt; &lt;code&gt;PORT&lt;/code&gt; &lt;/a&gt; 모두 비워 두어야합니다 . 그러나 &lt;code&gt;tnsnames.ora&lt;/code&gt; 파일이나 유사한 이름 지정 방법을 사용하지 않고 SID (이 예에서는 &quot;xe&quot;)를 사용하여 연결하려면 다음 과 같이 &lt;a href=&quot;settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;settings#std:setting-PORT&quot;&gt; &lt;code&gt;PORT&lt;/code&gt; &lt;/a&gt; 를 모두 채우십시오 .</target>
        </trans-unit>
        <trans-unit id="f7de94b0d76d606f984d3f9448c8656b1164ffb9" translate="yes" xml:space="preserve">
          <source>In this case, you&amp;rsquo;d have to create &lt;code&gt;subject.txt&lt;/code&gt; and &lt;code&gt;message.txt&lt;/code&gt; template files for both the LJWorld.com and Lawrence.com template directories. That gives you more flexibility, but it&amp;rsquo;s also more complex.</source>
          <target state="translated">이 경우 LJWorld.com 및 Lawrence.com 템플리트 디렉토리 모두에 &lt;code&gt;subject.txt&lt;/code&gt; 및 &lt;code&gt;message.txt&lt;/code&gt; 템플리트 파일 을 작성해야합니다 . 그것은 당신에게 더 많은 유연성을 제공하지만 더 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="5fde808145c2d08c0cba263811b659a0d1ffcce9" translate="yes" xml:space="preserve">
          <source>In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem.</source>
          <target state="translated">이 코드에서 유효성 검사 오류가 발생하면 양식의 맨 위에 (일반적으로) 문제를 설명하는 오류 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="526cbb8057d25716d73655e57b33c0157d33b6a0" translate="yes" xml:space="preserve">
          <source>In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem. Such errors are non-field errors, which are displayed in the template with &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt;.</source>
          <target state="translated">이 코드에서 유효성 검사 오류가 발생하면 양식은 문제를 설명하는 오류 메시지를 양식 맨 위에 (일반적으로) 표시합니다. 이러한 오류는 &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; 와 함께 템플릿에 표시되는 비 필드 오류 입니다.</target>
        </trans-unit>
        <trans-unit id="ffce769628ac27f44d87f42df5862f24acc276dd" translate="yes" xml:space="preserve">
          <source>In this dictionary, the keys are the field names, and the values are lists of strings representing the error messages. The error messages are stored in lists because a field can have multiple error messages.</source>
          <target state="translated">이 사전에서 키는 필드 이름이고 값은 오류 메시지를 나타내는 문자열 목록입니다. 필드에 여러 개의 오류 메시지가있을 수 있으므로 오류 메시지가 목록에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a623564b4f28f417a216cea862c50164191f61c6" translate="yes" xml:space="preserve">
          <source>In this dictionary, the keys are the field names, which correspond to the attributes in your &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class. The values are the data you&amp;rsquo;re trying to validate. These will usually be strings, but there&amp;rsquo;s no requirement that they be strings; the type of data you pass depends on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;, as we&amp;rsquo;ll see in a moment.</source>
          <target state="translated">이 사전에서 키는 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 클래스 의 속성에 해당하는 필드 이름 입니다. 값은 확인하려는 데이터입니다. 이것들은 보통 문자열이지만 문자열 일 필요는 없습니다. 전달할 데이터 유형은 잠시 후에 볼 수 있듯이 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; 에&lt;/a&gt; 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="b1587bc0110b474aeaac0785a98f42c3c6c762ba" translate="yes" xml:space="preserve">
          <source>In this document we discuss how to activate, use, and customize Django&amp;rsquo;s admin interface.</source>
          <target state="translated">이 문서에서는 Django의 관리 인터페이스를 활성화, 사용 및 사용자 정의하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b0926719287aa421a1d56b0909a1fc7f781d1d2c" translate="yes" xml:space="preserve">
          <source>In this example the number of objects is passed to the translation languages as the &lt;code&gt;count&lt;/code&gt; variable.</source>
          <target state="translated">이 예제에서 개체 수는 &lt;code&gt;count&lt;/code&gt; 변수 로 번역 언어에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="656eac437a8a706f5a50f4706d81cd4556322bcc" translate="yes" xml:space="preserve">
          <source>In this example we specify that the &lt;code&gt;auth.Permission&lt;/code&gt; object with the PK 27 has a foreign key to the &lt;code&gt;contenttypes.ContentType&lt;/code&gt; instance with the PK 9.</source>
          <target state="translated">이 예에서는 PK 27 을 사용하는 &lt;code&gt;auth.Permission&lt;/code&gt; 객체 에 PK 9 가있는 &lt;code&gt;contenttypes.ContentType&lt;/code&gt; 인스턴스에 대한 외래 키를 갖도록 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="bf1663e1b601ad090c33e868ff2147fe08cffda3" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;ContactFormWithPriority&lt;/code&gt; contains all the fields from &lt;code&gt;ContactForm&lt;/code&gt;, plus an additional field, &lt;code&gt;priority&lt;/code&gt;. The &lt;code&gt;ContactForm&lt;/code&gt; fields are ordered first:</source>
          <target state="translated">이 예에서, &lt;code&gt;ContactFormWithPriority&lt;/code&gt; 는 모두의 필드가 들어 &lt;code&gt;ContactForm&lt;/code&gt; , 플러스 추가 필드, &lt;code&gt;priority&lt;/code&gt; . &lt;code&gt;ContactForm&lt;/code&gt; 필드는 첫번째 정렬 :</target>
        </trans-unit>
        <trans-unit id="2209b80ce38841507206cfe8aa0b119a7ec9da3b" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;a.save()&lt;/code&gt; will not be undone in the case where &lt;code&gt;b.save()&lt;/code&gt; raises an exception.</source>
          <target state="translated">이 예에서, &lt;code&gt;a.save()&lt;/code&gt; 경우 취소 없습니다 &lt;code&gt;b.save()&lt;/code&gt; 예외를 제기한다.</target>
        </trans-unit>
        <trans-unit id="c1edf53e67d2069bdbedbd1cbf50a2d693ff2e07" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;my_view&lt;/code&gt; will be accessed at &lt;code&gt;/admin/myapp/mymodel/my_view/&lt;/code&gt; (assuming the admin URLs are included at &lt;code&gt;/admin/&lt;/code&gt;.)</source>
          <target state="translated">이 예에서 &lt;code&gt;my_view&lt;/code&gt; 는 &lt;code&gt;/admin/myapp/mymodel/my_view/&lt;/code&gt; 에서 액세스됩니다 (관리 URL이 &lt;code&gt;/admin/&lt;/code&gt; 있다고 가정 ).</target>
        </trans-unit>
        <trans-unit id="051a23c85ac542ba06c65f27cebe7e4b3a60e68a" translate="yes" xml:space="preserve">
          <source>In this example, Django looks up the URL of the page to which the user will be redirected in the &lt;code&gt;redirect_to&lt;/code&gt; context variable.</source>
          <target state="translated">이 예에서 Django는 &lt;code&gt;redirect_to&lt;/code&gt; 컨텍스트 변수 에서 사용자가 리디렉션 될 페이지의 URL을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="d1d03cde60eb57ef15a12664d31c7a72da6e28c3" translate="yes" xml:space="preserve">
          <source>In this example, Memcached is available through a local Unix socket file &lt;code&gt;/tmp/memcached.sock&lt;/code&gt; using the &lt;code&gt;python-memcached&lt;/code&gt; binding:</source>
          <target state="translated">이 예에서 Memcached는 &lt;code&gt;python-memcached&lt;/code&gt; 바인딩을 사용하여 로컬 Unix 소켓 파일 &lt;code&gt;/tmp/memcached.sock&lt;/code&gt; 을 통해 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="433fbee087dcc328bf7db214b22efaf3bd50d02f" translate="yes" xml:space="preserve">
          <source>In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the &lt;code&gt;python-memcached&lt;/code&gt; binding:</source>
          <target state="translated">이 예에서 Memcached는 &lt;code&gt;python-memcached&lt;/code&gt; 바인딩을 사용하여 로컬 호스트 (127.0.0.1) 포트 11211에서 실행 중입니다 .</target>
        </trans-unit>
        <trans-unit id="84f133ecf9ca09837434e3890d3cef12ca4fed57" translate="yes" xml:space="preserve">
          <source>In this example, a 404 to any URL ending with &lt;code&gt;.php&lt;/code&gt; or &lt;code&gt;.cgi&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be reported. Neither will any URL starting with &lt;code&gt;/phpmyadmin/&lt;/code&gt;.</source>
          <target state="translated">이 예에서는 &lt;code&gt;.php&lt;/code&gt; 또는 &lt;code&gt;.cgi&lt;/code&gt; 로 끝나는 URL에 대한 404 는 보고 &lt;em&gt;되지 않습니다&lt;/em&gt; . &lt;code&gt;/phpmyadmin/&lt;/code&gt; 시작하는 URL도 없습니다 .</target>
        </trans-unit>
        <trans-unit id="195054f639f8e715f1022ab811617e165c16a511" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;code&gt;Place&lt;/code&gt; optionally can be a &lt;code&gt;Restaurant&lt;/code&gt;:</source>
          <target state="translated">이 예에서 &lt;code&gt;Place&lt;/code&gt; 선택적으로 &lt;code&gt;Restaurant&lt;/code&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6756ca7fc7c0d76c6fb4aabb06e2a4158f57b981" translate="yes" xml:space="preserve">
          <source>In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items:</source>
          <target state="translated">이 예에서 파일 시스템 백엔드는 60 초의 시간 초과 및 최대 용량 1000 개의 항목으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="03c005782eb9d896545ab46f7dff017dd668f6aa" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;code&gt;Article&lt;/code&gt; can be published in multiple &lt;code&gt;Publication&lt;/code&gt; objects, and a &lt;code&gt;Publication&lt;/code&gt; has multiple &lt;code&gt;Article&lt;/code&gt; objects:</source>
          <target state="translated">이 예에서 &lt;code&gt;Article&lt;/code&gt; 는 여러 &lt;code&gt;Publication&lt;/code&gt; 객체에 게시 될 수 있으며 &lt;code&gt;Publication&lt;/code&gt; 에는 여러 &lt;code&gt;Article&lt;/code&gt; 객체가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b684f5c5a6b44db149a6fc644abf91fa5ab5f261" translate="yes" xml:space="preserve">
          <source>In this example, default settings are taken from &lt;code&gt;myapp_defaults&lt;/code&gt;, and the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is set to &lt;code&gt;True&lt;/code&gt;, regardless of its value in &lt;code&gt;myapp_defaults&lt;/code&gt;:</source>
          <target state="translated">이 예제에서 기본 설정은 &lt;code&gt;myapp_defaults&lt;/code&gt; 에서 가져 오며 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정은 &lt;code&gt;myapp_defaults&lt;/code&gt; 의 값에 관계없이 &lt;code&gt;True&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b161f5e802b80cd394d6cf5bffa10986e5345e41" translate="yes" xml:space="preserve">
          <source>In this example, even if &lt;code&gt;generate_relationships()&lt;/code&gt; causes a database error by breaking an integrity constraint, you can execute queries in &lt;code&gt;add_children()&lt;/code&gt;, and the changes from &lt;code&gt;create_parent()&lt;/code&gt; are still there and bound to the same transaction. Note that any operations attempted in &lt;code&gt;generate_relationships()&lt;/code&gt; will already have been rolled back safely when &lt;code&gt;handle_exception()&lt;/code&gt; is called, so the exception handler can also operate on the database if necessary.</source>
          <target state="translated">이 예제에서 &lt;code&gt;generate_relationships()&lt;/code&gt; 가 무결성 제약 조건을 위반하여 데이터베이스 오류를 유발 하더라도 &lt;code&gt;add_children()&lt;/code&gt; 에서 쿼리를 실행할 수 있으며 &lt;code&gt;create_parent()&lt;/code&gt; 의 변경 사항 이 여전히 존재하며 동일한 트랜잭션에 바인딩됩니다. &lt;code&gt;generate_relationships()&lt;/code&gt; 에서 시도 된 모든 작업은 &lt;code&gt;handle_exception()&lt;/code&gt; 이 호출 될 때 이미 안전하게 롤백 되었으므로 필요한 경우 예외 처리기가 데이터베이스에서 작동 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4befaaa872f56a0fce53c6c75f7fb67a6d8c1ea" translate="yes" xml:space="preserve">
          <source>In this example, even if &lt;code&gt;generate_relationships()&lt;/code&gt; causes a database error by breaking an integrity constraint, you can execute queries in &lt;code&gt;add_children()&lt;/code&gt;, and the changes from &lt;code&gt;create_parent()&lt;/code&gt; are still there. Note that any operations attempted in &lt;code&gt;generate_relationships()&lt;/code&gt; will already have been rolled back safely when &lt;code&gt;handle_exception()&lt;/code&gt; is called, so the exception handler can also operate on the database if necessary.</source>
          <target state="translated">이 예에서는 무결성 제약 조건을 위반하여 &lt;code&gt;generate_relationships()&lt;/code&gt; 인해 데이터베이스 오류가 발생 하더라도 &lt;code&gt;add_children()&lt;/code&gt; 에서 쿼리를 실행할 수 있으며 &lt;code&gt;create_parent()&lt;/code&gt; 의 변경 사항 은 여전히 ​​존재합니다. &lt;code&gt;handle_exception()&lt;/code&gt; 을 호출 할 때 &lt;code&gt;generate_relationships()&lt;/code&gt; 에서 시도한 모든 조작 이 이미 안전하게 롤백 되므로 필요하면 예외 핸들러도 데이터베이스에서 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df6ab84b235e4d9ea5612f6a9d9413066aa77f02" translate="yes" xml:space="preserve">
          <source>In this example, every instance of &lt;code&gt;ProtectedView&lt;/code&gt; will have login protection. These examples use &lt;code&gt;login_required&lt;/code&gt;, however, the same behavior can be obtained by using &lt;a href=&quot;../auth/default#django.contrib.auth.mixins.LoginRequiredMixin&quot;&gt;&lt;code&gt;LoginRequiredMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 예에서 모든 &lt;code&gt;ProtectedView&lt;/code&gt; 인스턴스 에는 로그인 보호 기능이 있습니다. 이 예제는 &lt;code&gt;login_required&lt;/code&gt; 를 사용 하지만 &lt;a href=&quot;../auth/default#django.contrib.auth.mixins.LoginRequiredMixin&quot;&gt; &lt;code&gt;LoginRequiredMixin&lt;/code&gt; &lt;/a&gt; 을 사용하여 동일한 동작을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a8d54516eb2ddf93c0730193ef9e5ff2275ee15" translate="yes" xml:space="preserve">
          <source>In this example, for a request to &lt;code&gt;/blog/2005/&lt;/code&gt;, Django will call &lt;code&gt;views.year_archive(request, year=2005, foo='bar')&lt;/code&gt;.</source>
          <target state="translated">이 예에서 &lt;code&gt;/blog/2005/&lt;/code&gt; 에 대한 요청으로 Django는 &lt;code&gt;views.year_archive(request, year=2005, foo='bar')&lt;/code&gt; 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="b3417d8eb44afe1e1d939759264bc4ffae54889e" translate="yes" xml:space="preserve">
          <source>In this example, only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; attributes of each model will be serialized. The primary key is always serialized as the &lt;code&gt;pk&lt;/code&gt; element in the resulting output; it never appears in the &lt;code&gt;fields&lt;/code&gt; part.</source>
          <target state="translated">이 예에서는 각 모델 의 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;size&lt;/code&gt; 속성 만 직렬화됩니다. 기본 키는 항상 결과 출력에서 &lt;code&gt;pk&lt;/code&gt; 요소 로 직렬화됩니다 . &lt;code&gt;fields&lt;/code&gt; 부분 에는 나타나지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8067d8a8c40ae0f8c2ce14da99d61f4b9966a75a" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tag defines three blocks that child templates can fill in. All the &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tag does is to tell the template engine that a child template may override those portions of the template.</source>
          <target state="translated">이 예에서 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 태그는 하위 템플릿이 채울 수있는 세 개의 블록을 정의합니다. 모든 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 태그는 하위 템플릿이 템플릿의 해당 부분을 무시할 수 있음을 템플릿 엔진에 알리는 것입니다.</target>
        </trans-unit>
        <trans-unit id="42619477c811cd44cc02c9355df92668fd6ed4c7" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;/credit/reports/&lt;/code&gt; URL will be handled by the &lt;code&gt;credit_views.report()&lt;/code&gt; Django view.</source>
          <target state="translated">이 예에서 &lt;code&gt;/credit/reports/&lt;/code&gt; URL은 &lt;code&gt;credit_views.report()&lt;/code&gt; Django 뷰에 의해 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="ae3edfae11bb8f4437ccac4fa556cfddea017145" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;closepoll&lt;/code&gt; command will be made available to any project that includes the &lt;code&gt;polls&lt;/code&gt; application in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 예제에서 &lt;code&gt;closepoll&lt;/code&gt; 명령은 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;polls&lt;/code&gt; 애플리케이션 을 포함하는 모든 프로젝트에서 사용 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="6be3072a6fd735a0703698b0b6ac3a9cb0c9f9cc" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; fields will be linked on the change list page:</source>
          <target state="translated">이 예에서 &lt;code&gt;first_name&lt;/code&gt; 및 &lt;code&gt;last_name&lt;/code&gt; 필드는 변경 목록 페이지에서 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="1b687cca57779b68234d9c0e07d13e5c941f7615" translate="yes" xml:space="preserve">
          <source>In this example, the RSS feed uses a &lt;code&gt;description&lt;/code&gt; while the Atom feed uses a &lt;code&gt;subtitle&lt;/code&gt;. That&amp;rsquo;s because Atom feeds don&amp;rsquo;t provide for a feed-level &amp;ldquo;description,&amp;rdquo; but they &lt;em&gt;do&lt;/em&gt; provide for a &amp;ldquo;subtitle.&amp;rdquo;</source>
          <target state="translated">이 예에서 RSS 피드는 &lt;code&gt;description&lt;/code&gt; 을 사용하고 Atom 피드는 &lt;code&gt;subtitle&lt;/code&gt; 사용합니다 . Atom 피드는 피드 수준 &quot;설명&quot;을 제공 &lt;em&gt;하지&lt;/em&gt; 않지만 &quot;자막&quot; &lt;em&gt;은&lt;/em&gt; 제공하기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="8b326223d286d7752529ad59f11428b49a503034" translate="yes" xml:space="preserve">
          <source>In this example, the URLs &lt;code&gt;/basic-admin/&lt;/code&gt; and &lt;code&gt;/advanced-admin/&lt;/code&gt; feature separate versions of the admin site &amp;ndash; using the &lt;code&gt;AdminSite&lt;/code&gt; instances &lt;code&gt;myproject.admin.basic_site&lt;/code&gt; and &lt;code&gt;myproject.admin.advanced_site&lt;/code&gt;, respectively:</source>
          <target state="translated">이 예에서 URL &lt;code&gt;/basic-admin/&lt;/code&gt; 및 &lt;code&gt;/advanced-admin/&lt;/code&gt; 은 &lt;code&gt;AdminSite&lt;/code&gt; 인스턴스 &lt;code&gt;myproject.admin.basic_site&lt;/code&gt; 및 &lt;code&gt;myproject.admin.advanced_site&lt;/code&gt; 를 각각 사용하여 별도의 버전의 관리 사이트를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="a1064554cbb5e926b7642f639cedf3b4e19ccfaf" translate="yes" xml:space="preserve">
          <source>In this example, the authors will be grouped by name, so you will only get an annotated result for each &lt;em&gt;unique&lt;/em&gt; author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors.</source>
          <target state="translated">이 예에서 저자는 이름별로 그룹화되므로 각 &lt;em&gt;고유 한&lt;/em&gt; 저자 이름에 대해서만 주석이 달린 결과를 얻게됩니다 . 이는 동일한 이름을 가진 두 명의 저자가있는 경우 결과가 쿼리 출력에서 ​​단일 결과로 병합됨을 의미합니다. 평균은 두 저자가 쓴 책에 대한 평균으로 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="c26653b4dd28f60f5887d535fdd2c41a9be77e80" translate="yes" xml:space="preserve">
          <source>In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211:</source>
          <target state="translated">이 예에서 포트 11211의 IP 주소 172.19.26.240 및 172.19.26.242에서 실행되는 Memcached 인스턴스를 통해 캐시가 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="24eb635a0f8bca996272df8a1c655a9b31f6b71b" translate="yes" xml:space="preserve">
          <source>In this example, the cache table&amp;rsquo;s name is &lt;code&gt;my_cache_table&lt;/code&gt;:</source>
          <target state="translated">이 예에서 캐시 테이블의 이름은 &lt;code&gt;my_cache_table&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="c17ed15c449f1b9508d8419ce8642c1281f27a87" translate="yes" xml:space="preserve">
          <source>In this example, the call to &lt;code&gt;send_messages()&lt;/code&gt; opens a connection on the backend, sends the list of messages, and then closes the connection again.</source>
          <target state="translated">이 예에서 &lt;code&gt;send_messages()&lt;/code&gt; 호출 하면 백엔드에서 연결이 열리고 메시지 목록이 전송 된 다음 연결이 다시 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="2745c5bdedd912f241c4ebd64a703e901229f077" translate="yes" xml:space="preserve">
          <source>In this example, the change list page grid will have no links:</source>
          <target state="translated">이 예에서 변경 목록 페이지 그리드에는 링크가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c0da41921a43787015fac5f5e1c5d1dfecbbf48b" translate="yes" xml:space="preserve">
          <source>In this example, the current time zone is &lt;code&gt;&quot;Europe/Paris&quot;&lt;/code&gt;.</source>
          <target state="translated">이 예에서 현재 시간대는 &lt;code&gt;&quot;Europe/Paris&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="441f22ede30f09b22a95399dcf5b6f52537098a8" translate="yes" xml:space="preserve">
          <source>In this example, the methods below will be available both on &lt;code&gt;topping.pizza_set&lt;/code&gt; and on &lt;code&gt;pizza.toppings&lt;/code&gt;.</source>
          <target state="translated">이 예에서, 방법은 아래에 모두 사용할 수 &lt;code&gt;topping.pizza_set&lt;/code&gt; 및에 &lt;code&gt;pizza.toppings&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f5a332a5b08e40bbb5f2b850dee9e2b68a4e2cc" translate="yes" xml:space="preserve">
          <source>In this example, the tables generated by the &lt;code&gt;TablespaceExample&lt;/code&gt; model (i.e. the model table and the many-to-many table) would be stored in the &lt;code&gt;tables&lt;/code&gt; tablespace. The index for the name field and the indexes on the many-to-many table would be stored in the &lt;code&gt;indexes&lt;/code&gt; tablespace. The &lt;code&gt;data&lt;/code&gt; field would also generate an index, but no tablespace for it is specified, so it would be stored in the model tablespace &lt;code&gt;tables&lt;/code&gt; by default. The index for the &lt;code&gt;shortcut&lt;/code&gt; field would be stored in the &lt;code&gt;other_indexes&lt;/code&gt; tablespace.</source>
          <target state="translated">이 예에서 &lt;code&gt;TablespaceExample&lt;/code&gt; 모델 (예 : 모델 테이블 및 다 대다 테이블)에 의해 생성 된 &lt;code&gt;tables&lt;/code&gt; 은 테이블 테이블 스페이스에 저장됩니다 . 이름 필드에 대한 인덱스 및 다 대다 테이블의 &lt;code&gt;indexes&lt;/code&gt; 는 인덱스 테이블 스페이스에 저장됩니다 . &lt;code&gt;data&lt;/code&gt; 필드는 인덱스를 생성하는 것이지만,이 모델의 테이블에 저장 될 수 있도록 대한 테이블 스페이스가 지정되지 않은 &lt;code&gt;tables&lt;/code&gt; 기본적으로. &lt;code&gt;shortcut&lt;/code&gt; 필드 의 인덱스 는 &lt;code&gt;other_indexes&lt;/code&gt; 테이블 스페이스에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="4ca22a91ed71c67573ea882082b60373bebf9e7a" translate="yes" xml:space="preserve">
          <source>In this example, the text &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt; is marked as a translation string:</source>
          <target state="translated">이 예에서는 &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt; 텍스트가 있습니다. 번역 문자열로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6696a467b231cec398b49a1411c769bd9d20d750" translate="yes" xml:space="preserve">
          <source>In this example, the translation infrastructure will be passed the string &lt;code&gt;&quot;yes,no&quot;&lt;/code&gt;, not the individual strings &lt;code&gt;&quot;yes&quot;&lt;/code&gt; and &lt;code&gt;&quot;no&quot;&lt;/code&gt;. The translated string will need to contain the comma so that the filter parsing code knows how to split up the arguments. For example, a German translator might translate the string &lt;code&gt;&quot;yes,no&quot;&lt;/code&gt; as &lt;code&gt;&quot;ja,nein&quot;&lt;/code&gt; (keeping the comma intact).</source>
          <target state="translated">이 예에서 변환 인프라 에는 개별 문자열 &lt;code&gt;&quot;yes&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;no&quot;&lt;/code&gt; 가 아닌 &lt;code&gt;&quot;yes,no&quot;&lt;/code&gt; 문자열이 전달됩니다 . 변환 된 문자열은 필터 구문 분석 코드가 인수를 분할하는 방법을 알 수 있도록 쉼표를 포함해야합니다. 예를 들어, 독일어 번역기는 &lt;code&gt;&quot;yes,no&quot;&lt;/code&gt; 문자열 을 &lt;code&gt;&quot;ja,nein&quot;&lt;/code&gt; 으로 변환 할 수 있습니다 (쉼표는 그대로 유지).</target>
        </trans-unit>
        <trans-unit id="5fd9148aa6186298c2ad7e6285404bb429dd6b93" translate="yes" xml:space="preserve">
          <source>In this example, the verbose name is &lt;code&gt;&quot;first name&quot;&lt;/code&gt;:</source>
          <target state="translated">이 예에서 자세한 이름은 &lt;code&gt;&quot;first name&quot;&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="7e5ca5faa411e0bbd9bffe6ad8e33eefb0319f3a" translate="yes" xml:space="preserve">
          <source>In this example, the verbose name is &lt;code&gt;&quot;person's first name&quot;&lt;/code&gt;:</source>
          <target state="translated">이 예에서 자세한 이름은 &lt;code&gt;&quot;person's first name&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55078180e09b52184446a0c7fd9194404890895d" translate="yes" xml:space="preserve">
          <source>In this example, we have both the alternating odd/even rows and a &amp;ldquo;major&amp;rdquo; row every fifth row. Only the five-row cycle is reset when a category changes.</source>
          <target state="translated">이 예에서는 5 번째 행마다 교차 홀수 / 짝수 행과 &quot;주요&quot;행이 모두 있습니다. 카테고리가 변경되면 5 행 주기만 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9bd8c087e8aa79ac85b5531899e92178206616f9" translate="yes" xml:space="preserve">
          <source>In this example, we make full use of Python generators to efficiently handle the assembly and transmission of a large CSV file:</source>
          <target state="translated">이 예에서는 큰 CSV 파일의 어셈블리 및 전송을 효율적으로 처리하기 위해 Python 생성기를 최대한 활용합니다.</target>
        </trans-unit>
        <trans-unit id="5e94a874a9da7d1610ef213a9b49fa74682f884e" translate="yes" xml:space="preserve">
          <source>In this example, we register the default &lt;code&gt;AdminSite&lt;/code&gt; instance &lt;code&gt;django.contrib.admin.site&lt;/code&gt; at the URL &lt;code&gt;/admin/&lt;/code&gt;</source>
          <target state="translated">이 예에서는 기본 &lt;code&gt;AdminSite&lt;/code&gt; 인스턴스 &lt;code&gt;django.contrib.admin.site&lt;/code&gt; 를 URL &lt;code&gt;/admin/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba30e2bfdb84c3b1443dd255eac4c58fdcd1e451" translate="yes" xml:space="preserve">
          <source>In this example, you are outputting the week number. Keep in mind that week numbers computed by the &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter with the &lt;code&gt;'W'&lt;/code&gt; format character are not always the same as those computed by &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;'%W'&lt;/code&gt; format string. For year 2015, for example, week numbers output by &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; are higher by one compared to those output by &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt;. There isn&amp;rsquo;t an equivalent for the &lt;code&gt;'%U'&lt;/code&gt;&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format string in &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;. Therefore, you should avoid using &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; to generate URLs for &lt;code&gt;WeekArchiveView&lt;/code&gt;.</source>
          <target state="translated">이 예에서는 주 번호를 출력합니다. &lt;code&gt;'W'&lt;/code&gt; 형식 문자가 있는 &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 템플리트 필터로 계산 된 주 번호 가 &lt;code&gt;'%W'&lt;/code&gt; 형식 문자열이있는 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt; 의해 계산 된 주 번호 와 항상 동일하지는 않습니다 . 예를 들어 2015 년의 경우 &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 출력 주 수 는 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 출력에 비해 1 씩 증가합니다 . &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'%U'&lt;/code&gt; &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 형식 문자열에 해당하는 것이 없습니다 . 따라서 &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 를 사용하여 &lt;code&gt;WeekArchiveView&lt;/code&gt; 의 URL을 생성 하지 않아야 합니다.</target>
        </trans-unit>
        <trans-unit id="301b4eda5dbc41617be06964e971e23018f19d78" translate="yes" xml:space="preserve">
          <source>In this example:</source>
          <target state="translated">이 예에서 :</target>
        </trans-unit>
        <trans-unit id="2f888816d53389958e26323fa35763774e290599" translate="yes" xml:space="preserve">
          <source>In this particular case, we&amp;rsquo;re exploiting the fact that the query will already contain the &lt;code&gt;blog_blog&lt;/code&gt; table in its &lt;code&gt;FROM&lt;/code&gt; clause.</source>
          <target state="translated">이 특별한 경우에는 쿼리 의 &lt;code&gt;FROM&lt;/code&gt; 절 에 &lt;code&gt;blog_blog&lt;/code&gt; 테이블 이 이미 포함되어 있다는 사실을 이용하고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c635e25207802e9b8c1131ab72188412bc70493" translate="yes" xml:space="preserve">
          <source>In this respect Python is an excellent language to work with, because solutions that look elegant and feel right usually are the best performing ones. As with most skills, learning what &amp;ldquo;looks right&amp;rdquo; takes practice, but one of the most useful guidelines is:</source>
          <target state="translated">이 점에서 파이썬은 작업하기에 훌륭한 언어입니다. 우아하게 보이고 올바르게 느끼는 솔루션이 일반적으로 최고의 성능을 발휘하기 때문입니다. 대부분의 기술과 마찬가지로 &quot;올바르게 보이는 것&quot;을 배우는 것이 실용적이지만 가장 유용한 지침 중 하나는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="53881c3a8d3e6f6e56631aee12040a01b668caef" translate="yes" xml:space="preserve">
          <source>In this setup, we have two database servers: &lt;code&gt;dbprimary&lt;/code&gt;, described by the database alias &lt;code&gt;default&lt;/code&gt;, and &lt;code&gt;dbreplica&lt;/code&gt; described by the alias &lt;code&gt;replica&lt;/code&gt;. As you might expect, &lt;code&gt;dbreplica&lt;/code&gt; has been configured by the database administrator as a read replica of &lt;code&gt;dbprimary&lt;/code&gt;, so in normal activity, any write to &lt;code&gt;default&lt;/code&gt; will appear on &lt;code&gt;replica&lt;/code&gt;.</source>
          <target state="translated">이 설정 에는 데이터베이스 별명 &lt;code&gt;default&lt;/code&gt; 설명되는 &lt;code&gt;dbreplica&lt;/code&gt; 및 별명 &lt;code&gt;replica&lt;/code&gt; 으로 설명되는 &lt;code&gt;dbprimary&lt;/code&gt; 두 데이터베이스 서버가 있습니다 . 예상 &lt;code&gt;dbreplica&lt;/code&gt; 데이터베이스 관리자가 &lt;code&gt;dbprimary&lt;/code&gt; 의 읽기 전용 복제본으로 구성했습니다. 정상적인 활동에서는 &lt;code&gt;default&lt;/code&gt; 대한 모든 쓰기가 &lt;code&gt;replica&lt;/code&gt; 에 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="293973f48ca1c4c53c9792048ba09fe823f806d0" translate="yes" xml:space="preserve">
          <source>In this situation, configure your proxy to set a custom HTTP header that tells Django whether the request came in via HTTPS, and set &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; so that Django knows what header to look for.</source>
          <target state="translated">이 경우 Django가 HTTPS를 통해 들어오는 지 여부를 알려주는 사용자 정의 HTTP 헤더를 설정 하고 Django가 찾을 헤더를 알 수 있도록 &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; 를 설정하도록 프록시를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6f6d2dd48f330dbd09730efe37d7c3c65c3287e" translate="yes" xml:space="preserve">
          <source>In this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user&amp;rsquo;s time zone. To avoid this, you should use a &lt;code&gt;DateField&lt;/code&gt; as the &lt;code&gt;date_field&lt;/code&gt; attribute.</source>
          <target state="translated">이 상황에서 사용자 별 시간대 선택을 구현 한 경우 최종 사용자의 시간대에 따라 동일한 URL에 다른 개체 집합이 표시 될 수 있습니다. 이를 피하려면 &lt;code&gt;DateField&lt;/code&gt; 를 &lt;code&gt;date_field&lt;/code&gt; 속성으로 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="ef44d4c601df1f07d7990e5f9437d27dcc4746ed" translate="yes" xml:space="preserve">
          <source>In total, this code does either one or zero database queries. The only deliberate optimization performed is the use of the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; tag. Using &lt;code&gt;QuerySet.exists()&lt;/code&gt; or &lt;code&gt;QuerySet.count()&lt;/code&gt; at any point would cause additional queries.</source>
          <target state="translated">이 코드는 전체적으로 하나 또는 제로 데이터베이스 쿼리를 수행합니다. 유일하게 의도적 인 최적화는 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 태그를 사용하는 것 입니다 . 사용 &lt;code&gt;QuerySet.exists()&lt;/code&gt; 또는 &lt;code&gt;QuerySet.count()&lt;/code&gt; 임의의 지점에서 추가 쿼리를 일으킬 것이다.</target>
        </trans-unit>
        <trans-unit id="b2ea06b2718f0bb4f849e86d964c52e70ab6b065" translate="yes" xml:space="preserve">
          <source>In two lines:</source>
          <target state="translated">두 줄로 :</target>
        </trans-unit>
        <trans-unit id="0f07a5a9fed735706d534272971e4af57a8f3b8c" translate="yes" xml:space="preserve">
          <source>In your Django apps, use settings by importing the object &lt;code&gt;django.conf.settings&lt;/code&gt;. Example:</source>
          <target state="translated">Django 앱에서 객체를 가져와 설정을 사용하십시오. &lt;code&gt;django.conf.settings&lt;/code&gt; . 예:</target>
        </trans-unit>
        <trans-unit id="df4de0d6688c36d088f680cbb25430ee62bb48e4" translate="yes" xml:space="preserve">
          <source>In your custom &lt;code&gt;change_form.html&lt;/code&gt; template, extend the &lt;code&gt;admin_change_form_document_ready&lt;/code&gt; block and add the event listener code:</source>
          <target state="translated">사용자 정의 &lt;code&gt;change_form.html&lt;/code&gt; 템플리트에서 &lt;code&gt;admin_change_form_document_ready&lt;/code&gt; 블록을 확장 하고 이벤트 리스너 코드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b734d5cfc118650b81e270f434765a1beb09fa63" translate="yes" xml:space="preserve">
          <source>In your development environment, you might need to add a setting to your &lt;code&gt;~.bashrc&lt;/code&gt; analogous to::</source>
          <target state="translated">개발 환경에서 다음 과 유사한 &lt;code&gt;~.bashrc&lt;/code&gt; 설정을 추가해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c473b50e514d1dd908d309dc36f50c2ed8dddf5" translate="yes" xml:space="preserve">
          <source>In your live server environment, you&amp;rsquo;ll need to tell your WSGI application what settings file to use. Do that with &lt;code&gt;os.environ&lt;/code&gt;:</source>
          <target state="translated">라이브 서버 환경에서는 사용할 설정 파일을 WSGI 애플리케이션에 알려야합니다. &lt;code&gt;os.environ&lt;/code&gt; 으로 그렇게하십시오 :</target>
        </trans-unit>
        <trans-unit id="0ed392362647aff54ee6ac0528ce6f7de8014467" translate="yes" xml:space="preserve">
          <source>In your project, you might want to override a template in another Django application, whether it be a third-party application or a contrib application such as &lt;code&gt;django.contrib.admin&lt;/code&gt;. You can either put template overrides in your project&amp;rsquo;s templates directory or in an application&amp;rsquo;s templates directory.</source>
          <target state="translated">프로젝트에서 타사 애플리케이션이든 &lt;code&gt;django.contrib.admin&lt;/code&gt; 과 같은 contrib 애플리케이션이든 다른 Django 애플리케이션의 템플리트를 대체 할 수 있습니다 . 프로젝트의 템플릿 디렉토리 나 응용 프로그램의 템플릿 디렉토리에 템플릿 재정의를 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a12842b892881bad40426a045c5fad617b1bbe3" translate="yes" xml:space="preserve">
          <source>In your settings file, define &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt;, for example:</source>
          <target state="translated">설정 파일에서 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; 을 하십시오 (&lt;/a&gt; 예 :</target>
        </trans-unit>
        <trans-unit id="c75941c62fda2d7b35a20353a643b95a05c2b9c2" translate="yes" xml:space="preserve">
          <source>In your settings file, you&amp;rsquo;ll need to define &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; as the full path to a directory where you&amp;rsquo;d like Django to store uploaded files. (For performance, these files are not stored in the database.) Define &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; as the base public URL of that directory. Make sure that this directory is writable by the Web server&amp;rsquo;s user account.</source>
          <target state="translated">설정 파일에서 Django가 업로드 된 파일을 저장하도록하려는 디렉토리의 전체 경로로 &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 를 정의해야 합니다. (성능을 위해 이러한 파일은 데이터베이스에 저장되지 않습니다.) &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; 을&lt;/a&gt; 정의하십시오. 을 해당 디렉토리의 기본 공용 URL로 . 웹 서버의 사용자 계정으로이 디렉토리를 쓸 수 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="6cdcd1cc4d55dae56b1d2cfee7ef0cf20408b5e1" translate="yes" xml:space="preserve">
          <source>In your templates, use the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag to build the URL for the given relative path using the configured &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플릿에서 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt; 템플릿 태그를 사용하여 구성된 &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; 를&lt;/a&gt; 사용하여 지정된 상대 경로의 URL을 작성하십시오. .</target>
        </trans-unit>
        <trans-unit id="baa1f28d971ef9c1acfb8d6a41ab17e4a43cce39" translate="yes" xml:space="preserve">
          <source>In-memory backend</source>
          <target state="translated">인 메모리 백엔드</target>
        </trans-unit>
        <trans-unit id="79a0469d56bc9db66aaeb7ea407a1f6066a46182" translate="yes" xml:space="preserve">
          <source>Inches</source>
          <target state="translated">Inches</target>
        </trans-unit>
        <trans-unit id="92ae1c082857bc2359cef4eee3e9adb6e79930a9" translate="yes" xml:space="preserve">
          <source>Include a form in &lt;code&gt;template.html&lt;/code&gt; that will &lt;code&gt;POST&lt;/code&gt; to this view:</source>
          <target state="translated">에서 양식 포함 &lt;code&gt;template.html&lt;/code&gt; 그 뜻을 &lt;code&gt;POST&lt;/code&gt; 이보기에를 :</target>
        </trans-unit>
        <trans-unit id="b5bcd4f5af4af7b3e7b03ee3a5c43fdeabd48653" translate="yes" xml:space="preserve">
          <source>Include any other hashers that your site uses in this list.</source>
          <target state="translated">사이트에서 사용하는 다른 해시를이 목록에 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="13a6402e7816c5436da28e068f9dc91e58173dc8" translate="yes" xml:space="preserve">
          <source>Included Bookmarklets</source>
          <target state="translated">포함 된 북마크</target>
        </trans-unit>
        <trans-unit id="fce3d5524b93bea9ab2266460800f72716d9f859" translate="yes" xml:space="preserve">
          <source>Included hashers</source>
          <target state="translated">해시 포함</target>
        </trans-unit>
        <trans-unit id="393381a25f66cacae86f8855d0301ff3d118a3d0" translate="yes" xml:space="preserve">
          <source>Included in this documentation are some additional notes and settings for &lt;a href=&quot;#testing-postgis&quot;&gt;PostGIS&lt;/a&gt; users.</source>
          <target state="translated">이 문서에는 &lt;a href=&quot;#testing-postgis&quot;&gt;PostGIS&lt;/a&gt; 사용자를 위한 추가 정보 및 설정이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="416f36f3b39cfe3286b14fc7265572590f159142" translate="yes" xml:space="preserve">
          <source>Included validators</source>
          <target state="translated">포함 된 유효성 검사기</target>
        </trans-unit>
        <trans-unit id="05743cb3d3a2467dca3f8f904dc8d04225fa9b6a" translate="yes" xml:space="preserve">
          <source>Includes &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/html_node/Fuzzy-Entries.html&quot;&gt;fuzzy translations&lt;/a&gt; into compiled files.</source>
          <target state="translated">컴파일 된 파일에 &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/html_node/Fuzzy-Entries.html&quot;&gt;퍼지 번역&lt;/a&gt; 을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="5f73b9d45841efe90325f2d512a7445ae790a051" translate="yes" xml:space="preserve">
          <source>Includes fuzzy translations into compiled files.</source>
          <target state="translated">컴파일 된 파일로 퍼지 변환을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="7aa965cef09d97d1ef5c87655479174fe49cd105" translate="yes" xml:space="preserve">
          <source>Includes the following variables and values by default:</source>
          <target state="translated">기본적으로 다음 변수 및 값을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="db77cfa106b7fade03dd841cb10c3f59fd348141" translate="yes" xml:space="preserve">
          <source>Includes the single object associated with the &lt;code&gt;model&lt;/code&gt; specified in the &lt;code&gt;DateDetailView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DateDetailView&lt;/code&gt; 에 지정된 &lt;code&gt;model&lt;/code&gt; 과 연관된 단일 오브젝트를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="f672b003fa062b2ae7f24fd7e6d5b2f1fc8b02a7" translate="yes" xml:space="preserve">
          <source>Including other URLconfs</source>
          <target state="translated">다른 URLconf 포함</target>
        </trans-unit>
        <trans-unit id="cef652f3a03486091b244f2e5aba6969067fa768" translate="yes" xml:space="preserve">
          <source>Inclusion tags</source>
          <target state="translated">포함 태그</target>
        </trans-unit>
        <trans-unit id="ab18d470d5980c4f161e3f1dcdc1323336093e7e" translate="yes" xml:space="preserve">
          <source>Increase the default timeout value by setting the &lt;code&gt;timeout&lt;/code&gt; database option:</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 데이터베이스 옵션 을 설정하여 기본 제한 시간 값을 늘리십시오 .</target>
        </trans-unit>
        <trans-unit id="4da83a55765005fd8539cc415fb563b5f9f3b112" translate="yes" xml:space="preserve">
          <source>Increasing the work factor</source>
          <target state="translated">작업 요소 증가</target>
        </trans-unit>
        <trans-unit id="07ac801d123e5116aad23e6fa38a3f0dd730faee" translate="yes" xml:space="preserve">
          <source>Independent of the value of &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 의 값과 무관 :</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="a1a7b444d54f66bf3ef208aca5c08ddbf9243ac3" translate="yes" xml:space="preserve">
          <source>Index classes ease creating database indexes. They can be added using the &lt;a href=&quot;options#django.db.models.Options.indexes&quot;&gt;&lt;code&gt;Meta.indexes&lt;/code&gt;&lt;/a&gt; option. This document explains the API references of &lt;a href=&quot;#django.db.models.Index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt; which includes the &lt;a href=&quot;#index-options&quot;&gt;index options&lt;/a&gt;.</source>
          <target state="translated">인덱스 클래스는 데이터베이스 인덱스를 쉽게 만들 수 있습니다. &lt;a href=&quot;options#django.db.models.Options.indexes&quot;&gt; &lt;code&gt;Meta.indexes&lt;/code&gt; &lt;/a&gt; 옵션을 사용하여 추가 할 수 있습니다 . 이 문서의 API 참조 설명 &lt;a href=&quot;#django.db.models.Index&quot;&gt; &lt;code&gt;Index&lt;/code&gt; &lt;/a&gt; 포함 &lt;a href=&quot;#index-options&quot;&gt;인덱스 옵션을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="630cb288963201f389b4599b06017a143bbdff7d" translate="yes" xml:space="preserve">
          <source>Index concurrent operations</source>
          <target state="translated">인덱스 동시 작업</target>
        </trans-unit>
        <trans-unit id="eacf39e95bea2bf4d4bb9c3175a59647c4e609a3" translate="yes" xml:space="preserve">
          <source>Index lookups</source>
          <target state="translated">인덱스 조회</target>
        </trans-unit>
        <trans-unit id="36fe21e39f393b7292e040bfa5eeb5abc353fa3a" translate="yes" xml:space="preserve">
          <source>Index transforms</source>
          <target state="translated">인덱스 변환</target>
        </trans-unit>
        <trans-unit id="c66d20d479f4194c5828779ae5fb5b4e7ca288f0" translate="yes" xml:space="preserve">
          <source>Index transforms index into the array. Any non-negative integer can be used. There are no errors if it exceeds the &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; of the array. The lookups available after the transform are those from the &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField.base_field&quot;&gt;&lt;code&gt;base_field&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">인덱스는 인덱스를 배열로 변환합니다. 음이 아닌 정수를 사용할 수 있습니다. 배열 &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField.size&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt; 를 초과하면 오류가 없습니다 . 변환 후 사용 가능한 조회는 &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField.base_field&quot;&gt; &lt;code&gt;base_field&lt;/code&gt; &lt;/a&gt; 의 조회 입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1c791c51c23a4a229b636e01c1e218aea31fa64e" translate="yes" xml:space="preserve">
          <source>Indexes are defined in &lt;code&gt;django.db.models.indexes&lt;/code&gt;, but for convenience they&amp;rsquo;re imported into &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;. The standard convention is to use &lt;code&gt;from django.db import models&lt;/code&gt; and refer to the indexes as &lt;code&gt;models.&amp;lt;IndexClass&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">인덱스는 &lt;code&gt;django.db.models.indexes&lt;/code&gt; 에 정의되어 있지만 편의상 &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; &lt;/a&gt; 로 가져 옵니다 . 표준 규칙은 &lt;code&gt;from django.db import models&lt;/code&gt; 사용 하고 인덱스를 &lt;code&gt;models.&amp;lt;IndexClass&amp;gt;&lt;/code&gt; 로 참조하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="5492137803e97d2ec59c8b75ce29be484b74e635" translate="yes" xml:space="preserve">
          <source>Indexes for &lt;code&gt;varchar&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; columns</source>
          <target state="translated">&lt;code&gt;varchar&lt;/code&gt; 및 &lt;code&gt;text&lt;/code&gt; 열에 대한 인덱스</target>
        </trans-unit>
        <trans-unit id="9951861c21df18489a5872209655d6f9039b5e2a" translate="yes" xml:space="preserve">
          <source>Indexing</source>
          <target state="translated">Indexing</target>
        </trans-unit>
        <trans-unit id="ef8499031097e84decc8e22d2abe9aa002f4dcf0" translate="yes" xml:space="preserve">
          <source>Indexing these fields</source>
          <target state="translated">이 필드 인덱싱</target>
        </trans-unit>
        <trans-unit id="967ce367d89dccc133d71049f1197d29561b3726" translate="yes" xml:space="preserve">
          <source>India</source>
          <target state="translated">India</target>
        </trans-unit>
        <trans-unit id="ba45edb20cfadb09579c8b985c1073d4c123849c" translate="yes" xml:space="preserve">
          <source>Indian yard, Yard (Indian)</source>
          <target state="translated">야드 (인도)</target>
        </trans-unit>
        <trans-unit id="69785e2efdbe3fd9756a43b21d0ac286d349fbbb" translate="yes" xml:space="preserve">
          <source>Indicates how much information manage.py is printing on screen. See the &lt;a href=&quot;django-admin#cmdoption-verbosity&quot;&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/a&gt; flag for details.</source>
          <target state="translated">화면에 manage.py가 인쇄하는 정보의 양을 나타냅니다. 자세한 내용은 &lt;a href=&quot;django-admin#cmdoption-verbosity&quot;&gt; &lt;code&gt;--verbosity&lt;/code&gt; &lt;/a&gt; 플래그를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="805970dc362427509e5d3cf95b1051c9914c44de" translate="yes" xml:space="preserve">
          <source>Indicates if the widget supports edition of 3D data (default is &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">위젯이 3D 데이터 에디션을 지원하는지 여부를 나타냅니다 (기본값은 &lt;code&gt;False&lt;/code&gt; 입니다 ).</target>
        </trans-unit>
        <trans-unit id="46cbd279a17918dbd83258a502286ca2bd179058" translate="yes" xml:space="preserve">
          <source>Indicates which side of the relation is updated (i.e., if it is the forward or reverse relation that is being modified).</source>
          <target state="translated">관계의 어느 쪽이 업데이트되는지 나타냅니다 (즉, 수정중인 정방향 또는 역방향 관계인 경우).</target>
        </trans-unit>
        <trans-unit id="7dca5d33b20dad0ae7cbe0b7fa53af5a51dfd232" translate="yes" xml:space="preserve">
          <source>Inequality. Example:</source>
          <target state="translated">불평등. 예:</target>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="1816bd5301287d48b239d10b6147fb06b838101a" translate="yes" xml:space="preserve">
          <source>Information on handling HTTP requests in Django:</source>
          <target state="translated">Django에서 HTTP 요청 처리에 대한 정보 :</target>
        </trans-unit>
        <trans-unit id="4cea99f6c762632c4e20ad0abdccb5ad2c714eda" translate="yes" xml:space="preserve">
          <source>Information on how to test custom management commands can be found in the &lt;a href=&quot;../topics/testing/tools#topics-testing-management-commands&quot;&gt;testing docs&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 관리 명령을 테스트하는 방법에 대한 정보는 &lt;a href=&quot;../topics/testing/tools#topics-testing-management-commands&quot;&gt;테스트 문서&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2115a89831353cf02274f4bd272538f5346d1232" translate="yes" xml:space="preserve">
          <source>Informational messages for the user</source>
          <target state="translated">사용자를위한 정보 메시지</target>
        </trans-unit>
        <trans-unit id="46fa48661da126122dd9b3dfb56c3771a9fb032e" translate="yes" xml:space="preserve">
          <source>Informs all validators that the password has been changed. This can be used by validators such as one that prevents password reuse. This should be called once the password has been successfully changed.</source>
          <target state="translated">모든 검증 자에게 비밀번호가 변경되었음을 알립니다. 암호 재사용을 방지하는 유효성 검사기와 같은 유효성 검사기에서 사용할 수 있습니다. 암호가 성공적으로 변경되면 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="263eb8fac3089407415b3cdb49c8a9493a73a913" translate="yes" xml:space="preserve">
          <source>Inheritance and reverse relations</source>
          <target state="translated">상속과 역관계</target>
        </trans-unit>
        <trans-unit id="6878b79ae6a11c71f7d933df7a428440301d2cb7" translate="yes" xml:space="preserve">
          <source>Inherited models</source>
          <target state="translated">상속 된 모델</target>
        </trans-unit>
        <trans-unit id="6b7c24fac5cde31e70194fe1a4a3aa31f2b07c59" translate="yes" xml:space="preserve">
          <source>Inherits all attributes and methods from &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, but also validates that the uploaded object is a valid image.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt; 에서 모든 속성과 메소드를 상속 하지만 업로드 된 객체가 유효한 이미지인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="887fae0cd4b77c5cf1709af4daa6acafe51d7270" translate="yes" xml:space="preserve">
          <source>Initial GET (blank or prepopulated form)</source>
          <target state="translated">초기 GET (공백 또는 미리 채워진 양식)</target>
        </trans-unit>
        <trans-unit id="7721368c6a2dc340b98e95500c63c71237f0442f" translate="yes" xml:space="preserve">
          <source>Initial data is what drives the main usability of a formset. As shown above you can define the number of extra forms. What this means is that you are telling the formset how many additional forms to show in addition to the number of forms it generates from the initial data. Let&amp;rsquo;s take a look at an example:</source>
          <target state="translated">초기 데이터는 폼셋의 주요 유용성을 주도합니다. 위에 표시된대로 추가 양식 수를 정의 할 수 있습니다. 이것이 의미하는 바는 초기 데이터에서 생성 된 양식 수 외에 표시 할 추가 양식 수를 양식 세트에 알리는 것입니다. 예를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="b6c0a04d6df77feaf647ce05a50a0c853571c221" translate="yes" xml:space="preserve">
          <source>Initial migrations</source>
          <target state="translated">초기 마이그레이션</target>
        </trans-unit>
        <trans-unit id="4e03af3824bf96934c0a17f4b42352a2647e0dd2" translate="yes" xml:space="preserve">
          <source>Initial migrations are marked with an &lt;code&gt;initial = True&lt;/code&gt; class attribute on the migration class. If an &lt;code&gt;initial&lt;/code&gt; class attribute isn&amp;rsquo;t found, a migration will be considered &amp;ldquo;initial&amp;rdquo; if it is the first migration in the app (i.e. if it has no dependencies on any other migration in the same app).</source>
          <target state="translated">초기 마이그레이션은 마이그레이션 클래스에서 &lt;code&gt;initial = True&lt;/code&gt; 클래스 속성으로 표시됩니다 . 경우 &lt;code&gt;initial&lt;/code&gt; 클래스 속성이 발견되지는 응용 프로그램에서 처음으로 이동 (즉,이 같은 응용 프로그램의 다른 마이그레이션에 대한 종속성이없는 경우) 인 경우, 마이그레이션는 &quot;최초&quot;로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="92d116105843bf9003a7b0e9c5d9103920d28ee2" translate="yes" xml:space="preserve">
          <source>Initialization process</source>
          <target state="translated">초기화 과정</target>
        </trans-unit>
        <trans-unit id="5b82e76b7fa3fb4fd6420171df7d0206986bbce2" translate="yes" xml:space="preserve">
          <source>Initialize the feed with the given dictionary of metadata, which applies to the entire feed.</source>
          <target state="translated">지정된 메타 데이터 사전을 사용하여 피드를 초기화하십시오.이 피드는 전체 피드에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="b9480d541cf0f3d79a2ff605d8ca16ab4f5519d5" translate="yes" xml:space="preserve">
          <source>Initialize the feed with the given dictionary of metadata, which applies to the entire feed. Required keyword arguments are:</source>
          <target state="translated">지정된 메타 데이터 사전을 사용하여 피드를 초기화하십시오.이 피드는 전체 피드에 적용됩니다. 필수 키워드 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cbe2e11aaa3a8f997f74dd81ca8d4d6be58f2cd0" translate="yes" xml:space="preserve">
          <source>Initializes view instance attributes: &lt;code&gt;self.request&lt;/code&gt;, &lt;code&gt;self.args&lt;/code&gt;, and &lt;code&gt;self.kwargs&lt;/code&gt; prior to &lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; 전에 뷰 인스턴스 속성 &lt;code&gt;self.request&lt;/code&gt; , &lt;code&gt;self.args&lt;/code&gt; 및 &lt;code&gt;self.kwargs&lt;/code&gt; 를 초기화합니다 .</target>
        </trans-unit>
        <trans-unit id="118f0c3c3c959f831d4cc1d8d61816419873fce8" translate="yes" xml:space="preserve">
          <source>Initializing the application registry.</source>
          <target state="translated">응용 프로그램 레지스트리를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="a5071690b6f4d6be0ab39c8e9e4f4eeece380821" translate="yes" xml:space="preserve">
          <source>Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the &lt;code&gt;__init__()&lt;/code&gt; method of &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; (or your parent class).</source>
          <target state="translated">새 필드를 초기화하는 것은 일반적인 인수에서 사례와 관련된 모든 인수를 분리하고 후자를 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;__init__()&lt;/code&gt; 메소드 (또는 상위 클래스)로 전달하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d886046c9901e1b4b70275cfb11b733f494e6dcb" translate="yes" xml:space="preserve">
          <source>Initially, &lt;code&gt;token.split_contents()&lt;/code&gt; will return three values:</source>
          <target state="translated">처음에 &lt;code&gt;token.split_contents()&lt;/code&gt; 는 세 가지 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="529d4aa47626f4c94772e3b1b82467e2ef2eb6cd" translate="yes" xml:space="preserve">
          <source>Inline form events</source>
          <target state="translated">인라인 양식 이벤트</target>
        </trans-unit>
        <trans-unit id="2bf3973978eed4752c6694e9f74358e333071d2a" translate="yes" xml:space="preserve">
          <source>Inline formsets</source>
          <target state="translated">인라인 폼셋</target>
        </trans-unit>
        <trans-unit id="5f0d302d7df51da277cf03650b8f23cfec69c26b" translate="yes" xml:space="preserve">
          <source>Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models:</source>
          <target state="translated">인라인 폼셋은 모델 폼셋 위에있는 작은 추상화 계층입니다. 이것은 외래 키를 통해 관련 객체로 작업하는 경우를 단순화합니다. 다음 두 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="630cbac3ad3755357bd8db01e781e15971700af2" translate="yes" xml:space="preserve">
          <source>Input Type</source>
          <target state="translated">입력 유형</target>
        </trans-unit>
        <trans-unit id="3cf3025b06979938acb60abd72189ab0d9a5057f" translate="yes" xml:space="preserve">
          <source>Input provided as &lt;code&gt;bytes&lt;/code&gt; has to be a full binary representation of a file. For instance:</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; 제공된 입력 은 파일의 전체 이진 표현이어야합니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="82a1ada76fb843bfdb99e1335ae14865d2ac5754" translate="yes" xml:space="preserve">
          <source>Insert in bulk</source>
          <target state="translated">대량으로 삽입</target>
        </trans-unit>
        <trans-unit id="fd80c7060b33e0b1f9e0160fda71154e20942302" translate="yes" xml:space="preserve">
          <source>Inside a transaction, when a call to a PostgreSQL cursor raises an exception (typically &lt;code&gt;IntegrityError&lt;/code&gt;), all subsequent SQL in the same transaction will fail with the error &amp;ldquo;current transaction is aborted, queries ignored until end of transaction block&amp;rdquo;. While the basic use of &lt;code&gt;save()&lt;/code&gt; is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL.</source>
          <target state="translated">트랜잭션 내부에서 PostgreSQL 커서에 대한 호출에서 예외 (일반적으로 &lt;code&gt;IntegrityError&lt;/code&gt; )가 발생하면 동일한 트랜잭션의 모든 후속 SQL이 &quot;현재 트랜잭션이 중단되고 트랜잭션이 끝날 때까지 쿼리가 무시됩니다&quot;라는 오류와 함께 실패합니다. &lt;code&gt;save()&lt;/code&gt; 의 기본 사용으로 PostgreSQL에서 예외가 발생하지는 않지만 고유 한 필드로 객체 저장, force_insert / force_update 플래그를 사용하여 저장 또는 사용자 지정 SQL 호출과 같은 고급 사용 패턴이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fb0c4a6cb7cb3bb932f294d1a031cf85801a6f6" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The easiest is to use the &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/#installing-with-get-pip-py&quot;&gt;standalone pip installer&lt;/a&gt;. If your distribution already has &lt;code&gt;pip&lt;/code&gt; installed, you might need to update it if it&amp;rsquo;s outdated. If it&amp;rsquo;s outdated, you&amp;rsquo;ll know because installation won&amp;rsquo;t work.</source>
          <target state="translated">&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip를&lt;/a&gt; 설치하십시오 . 가장 쉬운 방법은 &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/#installing-with-get-pip-py&quot;&gt;독립형 pip 설치 프로그램&lt;/a&gt; 을 사용하는 것 입니다. 배포판에 이미 &lt;code&gt;pip&lt;/code&gt; 가 설치되어 있으면 구식 인 경우 업데이트해야 할 수 있습니다. 구식 인 경우 설치가 작동하지 않기 때문에 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbc29c34df2441baed48edcc90ffcebae7fe04ea" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;binutils&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;binutils&lt;/code&gt; 설치</target>
        </trans-unit>
        <trans-unit id="eac3c52fd90179ef647d10e226a176c33f103069" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;virtualenv&lt;/code&gt; 및 &lt;code&gt;virtualenvwrapper&lt;/code&gt; 설치</target>
        </trans-unit>
        <trans-unit id="bfb040b8cf2a6c6983deac2a0f9a6884c824aa78" translate="yes" xml:space="preserve">
          <source>Install Apache and &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="translated">Apache 및 &lt;code&gt;mod_wsgi&lt;/code&gt; 설치</target>
        </trans-unit>
        <trans-unit id="e5fc7c028097e404e54baa7df716c866ba3c3490" translate="yes" xml:space="preserve">
          <source>Install Django</source>
          <target state="translated">장고 설치</target>
        </trans-unit>
        <trans-unit id="7dde67d172e208f70974e16600e6965108e24dc5" translate="yes" xml:space="preserve">
          <source>Install Django and set up database</source>
          <target state="translated">Django 설치 및 데이터베이스 설정</target>
        </trans-unit>
        <trans-unit id="6a036bec2d3c0cc5544c8102734b803705b65558" translate="yes" xml:space="preserve">
          <source>Install Python</source>
          <target state="translated">파이썬 설치</target>
        </trans-unit>
        <trans-unit id="cf77b120c0a9fb034fd4d1bdf0132dbaea450adf" translate="yes" xml:space="preserve">
          <source>Install ReportLab</source>
          <target state="translated">ReportLab 설치</target>
        </trans-unit>
        <trans-unit id="8b71e7089fefe4efaea3b41d159cc3d5d4f07857" translate="yes" xml:space="preserve">
          <source>Install a 64 bit version of Python. See &lt;a href=&quot;../../../../howto/windows&quot;&gt;Install Python&lt;/a&gt; for further information.</source>
          <target state="translated">64 비트 버전의 Python을 설치합니다. 자세한 내용은 &lt;a href=&quot;../../../../howto/windows&quot;&gt;Python 설치를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="deb1dca81cfa61308cf3a3e61fdb90b4533b0e8c" translate="yes" xml:space="preserve">
          <source>Install a version of Django &lt;a href=&quot;../topics/install#installing-distribution-package&quot;&gt;provided by your operating system distribution&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/install#installing-distribution-package&quot;&gt;운영 체제 배포판에서 제공하는&lt;/a&gt; Django 버전을 설치 하십시오 .</target>
        </trans-unit>
        <trans-unit id="54f0f70c277d5e4aa7ee5a0a8452076bf3a2f640" translate="yes" xml:space="preserve">
          <source>Install gunicorn by running &lt;code&gt;python -m pip install gunicorn&lt;/code&gt;. For more details, see the &lt;a href=&quot;https://docs.gunicorn.org/en/latest/install.html&quot;&gt;gunicorn documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;python -m pip install gunicorn&lt;/code&gt; gunicorn을 실행 하여 gunicorn을 설치하십시오 . 자세한 내용은 &lt;a href=&quot;https://docs.gunicorn.org/en/latest/install.html&quot;&gt;gunicorn 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d28aa5c3f5f864624758280797d60a6e8cc60fb" translate="yes" xml:space="preserve">
          <source>Install it</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="e5e59b5b49091f6e3df772b3a0711c44291aac54" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://pypi.org/project/argon2_cffi/&quot;&gt;argon2-cffi library&lt;/a&gt;. This can be done by running &lt;code&gt;python -m pip install django[argon2]&lt;/code&gt;, which is equivalent to &lt;code&gt;python -m pip install argon2-cffi&lt;/code&gt; (along with any version requirement from Django&amp;rsquo;s &lt;code&gt;setup.cfg&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/argon2_cffi/&quot;&gt;argon2-cffi 라이브러리를&lt;/a&gt; 설치합니다 . 이것은 실행하여 수행 할 수 있습니다 &lt;code&gt;python -m pip install django[argon2]&lt;/code&gt; 와 등가 인 &lt;code&gt;python -m pip install argon2-cffi&lt;/code&gt; (장고의에서 모든 버전의 요구 사항과 함께 &lt;code&gt;setup.cfg&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="bcaca3d75e252ac3de7f251d6d46620471c66363" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://pypi.org/project/argon2_cffi/&quot;&gt;argon2-cffi library&lt;/a&gt;. This can be done by running &lt;code&gt;python -m pip install django[argon2]&lt;/code&gt;, which is equivalent to &lt;code&gt;python -m pip install argon2-cffi&lt;/code&gt; (along with any version requirement from Django&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/argon2_cffi/&quot;&gt;argon2-cffi 라이브러리를&lt;/a&gt; 설치하십시오 . &lt;code&gt;python -m pip install django[argon2]&lt;/code&gt; 를 실행 하면 &lt;code&gt;python -m pip install argon2-cffi&lt;/code&gt; (Django의 &lt;code&gt;setup.py&lt;/code&gt; 의 모든 버전 요구 사항과 동일 )에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="ab66b2f5e38a7cf480e9c023c360905d40bf321b" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://pypi.org/project/bcrypt/&quot;&gt;bcrypt library&lt;/a&gt;. This can be done by running &lt;code&gt;python -m pip install django[bcrypt]&lt;/code&gt;, which is equivalent to &lt;code&gt;python -m pip install bcrypt&lt;/code&gt; (along with any version requirement from Django&amp;rsquo;s &lt;code&gt;setup.cfg&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/bcrypt/&quot;&gt;bcrypt 라이브러리를&lt;/a&gt; 설치합니다 . 이는 &lt;code&gt;python -m pip install django[bcrypt]&lt;/code&gt; 를 실행하여 수행 할 수 있으며 , 이는 &lt;code&gt;python -m pip install bcrypt&lt;/code&gt; (Django의 &lt;code&gt;setup.cfg&lt;/code&gt; 의 모든 버전 요구 사항과 함께)와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="e210902fd89fea327be285ade2968e15f65d75d5" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://pypi.org/project/bcrypt/&quot;&gt;bcrypt library&lt;/a&gt;. This can be done by running &lt;code&gt;python -m pip install django[bcrypt]&lt;/code&gt;, which is equivalent to &lt;code&gt;python -m pip install bcrypt&lt;/code&gt; (along with any version requirement from Django&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/bcrypt/&quot;&gt;bcrypt 라이브러리를&lt;/a&gt; 설치하십시오 . &lt;code&gt;python -m pip install django[bcrypt]&lt;/code&gt; 를 실행 하면 &lt;code&gt;python -m pip install bcrypt&lt;/code&gt; (Django의 &lt;code&gt;setup.py&lt;/code&gt; 의 모든 버전 요구 사항과 동일)와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="00d2af2e61a464edd9e548eb900abf871a875685" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites framework&lt;/code&gt;&lt;/a&gt; by adding &lt;code&gt;'django.contrib.sites'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting, if it&amp;rsquo;s not already in there.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 &lt;code&gt;'django.contrib.sites'&lt;/code&gt; 를 추가 하여 &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;sites framework&lt;/code&gt; &lt;/a&gt; 를 설치하십시오 ( 아직없는 경우).</target>
        </trans-unit>
        <trans-unit id="1c4701e78d9d83a7d5493cab49cfea8bcd9ddd76" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;btree_gin&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;btree_gin&lt;/code&gt; 확장을 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="acd182d9015bfd8188202d1ecb60688d2939179f" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;btree_gist&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;btree_gist&lt;/code&gt; 확장을 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="a76f5145a32d184e1c7e9587ba465063c089609e" translate="yes" xml:space="preserve">
          <source>Install the Django code</source>
          <target state="translated">장고 코드 설치</target>
        </trans-unit>
        <trans-unit id="dc5ac4572b45ea1e5ec997132d5c1eedc83d7af8" translate="yes" xml:space="preserve">
          <source>Install the core Django tables</source>
          <target state="translated">핵심 장고 테이블 설치</target>
        </trans-unit>
        <trans-unit id="b80fff99394b213848b1958268f286bb48e71084" translate="yes" xml:space="preserve">
          <source>Install the docutils Python module (&lt;a href=&quot;https://docutils.sourceforge.io/&quot;&gt;https://docutils.sourceforge.io/&lt;/a&gt;).</source>
          <target state="translated">docutils Python 모듈 ( &lt;a href=&quot;https://docutils.sourceforge.io/&quot;&gt;https://docutils.sourceforge.io/&lt;/a&gt; )을 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="f16648ab97c10387117506d2197c88daefa2c596" translate="yes" xml:space="preserve">
          <source>Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them.</source>
          <target state="translated">GDAL 및 SQLite 패키지에는 패키지가 먼저 나열되어 있으므로 위에 나열된 순서대로 패키지를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="ff4f4a940ff19aa2436e69196999c53946b31122" translate="yes" xml:space="preserve">
          <source>Installation instructions are slightly different depending on whether you&amp;rsquo;re installing a distribution-specific package, downloading the latest official release, or fetching the latest development version.</source>
          <target state="translated">배포 관련 패키지를 설치하는지, 최신 공식 릴리스를 다운로드하는지 또는 최신 개발 버전을 가져 오는지에 따라 설치 지침이 약간 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ad3e3dab4a190abbebf78c92247b626a4d65febb" translate="yes" xml:space="preserve">
          <source>Installing Daphne</source>
          <target state="translated">다프네 설치</target>
        </trans-unit>
        <trans-unit id="f2bff20e97a1f081da9b80758818ca87edaadcdc" translate="yes" xml:space="preserve">
          <source>Installing Geospatial libraries</source>
          <target state="translated">지리 공간 라이브러리 설치</target>
        </trans-unit>
        <trans-unit id="08184aba9687051924cc110485a309cd3a9c8e10" translate="yes" xml:space="preserve">
          <source>Installing Git</source>
          <target state="translated">힘내 설치</target>
        </trans-unit>
        <trans-unit id="832f4a5393100d982e65d355980b754d3648ec27" translate="yes" xml:space="preserve">
          <source>Installing Git.</source>
          <target state="translated">힘내 설치.</target>
        </trans-unit>
        <trans-unit id="9b40ec12cc871a8d0e48f0c35c15978313555dda" translate="yes" xml:space="preserve">
          <source>Installing Gunicorn</source>
          <target state="translated">Gunicorn 설치</target>
        </trans-unit>
        <trans-unit id="eaeaa4aae87f13caa5fbef040077a281a1d15b42" translate="yes" xml:space="preserve">
          <source>Installing Hypercorn</source>
          <target state="translated">Hypercorn 설치</target>
        </trans-unit>
        <trans-unit id="4f56c15f76a3602ff2fe3028129cae40805d2891" translate="yes" xml:space="preserve">
          <source>Installing PostGIS</source>
          <target state="translated">PostGIS 설치</target>
        </trans-unit>
        <trans-unit id="7261454ff42d55ac3cee9a48a9a7074d622c284f" translate="yes" xml:space="preserve">
          <source>Installing Python packages with a virtual environment</source>
          <target state="translated">가상 환경으로 Python 패키지 설치</target>
        </trans-unit>
        <trans-unit id="927da6c1c36a09548ee8a0b09892380aaf33ca8a" translate="yes" xml:space="preserve">
          <source>Installing Python packages with virtualenv</source>
          <target state="translated">virtualenv를 사용하여 Python 패키지 설치</target>
        </trans-unit>
        <trans-unit id="961035f5074b37f06409829bca2e3c28cae1a5ad" translate="yes" xml:space="preserve">
          <source>Installing SpatiaLite</source>
          <target state="translated">SpatiaLite 설치</target>
        </trans-unit>
        <trans-unit id="8d11135f6e798b9505fe0f0f3c04f2d219d5a612" translate="yes" xml:space="preserve">
          <source>Installing Uvicorn</source>
          <target state="translated">Uvicorn 설치</target>
        </trans-unit>
        <trans-unit id="f7a34c08b51e2419fa7dc61778c3f2ca278331e1" translate="yes" xml:space="preserve">
          <source>Installing a distribution-specific package</source>
          <target state="translated">배포 판별 패키지 설치</target>
        </trans-unit>
        <trans-unit id="42cc33b9e752caf55863c3e0eb6e5deb696214b9" translate="yes" xml:space="preserve">
          <source>Installing a wrapper is done in a context manager &amp;ndash; so the wrappers are temporary and specific to some flow in your code.</source>
          <target state="translated">랩퍼 설치는 컨텍스트 관리자에서 수행되므로 랩퍼는 임시적이며 코드의 일부 플로우에 고유합니다.</target>
        </trans-unit>
        <trans-unit id="1cdd21443d12c68fe7d176e7e1d37cacee632f0f" translate="yes" xml:space="preserve">
          <source>Installing an official release with &lt;code&gt;pip&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; 로 공식 릴리스 설치</target>
        </trans-unit>
        <trans-unit id="8628a6e864a9e93f538b94578699641e3f734260" translate="yes" xml:space="preserve">
          <source>Installing as a user library</source>
          <target state="translated">사용자 라이브러리로 설치</target>
        </trans-unit>
        <trans-unit id="25698238529e36c36bbff9a1cf8864afeb7e862b" translate="yes" xml:space="preserve">
          <source>Installing from source</source>
          <target state="translated">소스에서 설치</target>
        </trans-unit>
        <trans-unit id="22e127126b29a4052ed7dc43993b38a6393e1246" translate="yes" xml:space="preserve">
          <source>Installing some prerequisites</source>
          <target state="translated">전제 조건 설치</target>
        </trans-unit>
        <trans-unit id="a9bda49ca5c84ac0371dfd0aa4aeead7cef32c9d" translate="yes" xml:space="preserve">
          <source>Installing the contenttypes framework</source>
          <target state="translated">contenttypes 프레임 워크 설치</target>
        </trans-unit>
        <trans-unit id="c2880c0c7b9f92a492fcc9e1562593a3e93bb68d" translate="yes" xml:space="preserve">
          <source>Installing the development version</source>
          <target state="translated">개발 버전 설치</target>
        </trans-unit>
        <trans-unit id="182550e5b6132a0ff75322e4ed32c21cd0985415" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;bloom&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;bloom&lt;/code&gt; 확장을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="2e055356ef136469cf4b9451661e20b8562826ab" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;btree_gin&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;btree_gin&lt;/code&gt; 확장을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="c62c03b65b8b64207ce0849b4a7b74e6211dcd27" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;btree_gist&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;btree_gist&lt;/code&gt; 확장을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="d3bf6d32afe746a4fa058c7c5dce82e85a778691" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;citext&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;citext&lt;/code&gt; 확장을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="0a5b8eef62a1408d8cc79afa5af9584ec14a4b58" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;hstore&lt;/code&gt; extension and also sets up the connection to interpret hstore data for possible use in subsequent migrations.</source>
          <target state="translated">&lt;code&gt;hstore&lt;/code&gt; 확장을 설치하고 후속 마이그레이션에서 사용할 수 있도록 hstore 데이터를 해석하도록 연결을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7101a42b2163ac751b481d457a5c8369b69d8e9e" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;pg_trgm&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;pg_trgm&lt;/code&gt; 확장을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="e31cfb0fb6c711d0656d19a5574b5d7240e78753" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;pgcrypto&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;pgcrypto&lt;/code&gt; 확장을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="8de17062b9cc6ceea7cfbe2b8e21f56dd155d43c" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;unaccent&lt;/code&gt; extension.</source>
          <target state="translated">설치 &lt;code&gt;unaccent&lt;/code&gt; 확장.</target>
        </trans-unit>
        <trans-unit id="3ba17ad27b23ed96d07cb286c9f28dee5d248c65" translate="yes" xml:space="preserve">
          <source>Instances can be assigned to the reverse relationship in the same way as you would assign the forward relationship:</source>
          <target state="translated">순방향 관계를 지정할 때와 같은 방법으로 인스턴스를 역관계에 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33a8466028f50993d00a3e49a884c73a7be30cbf" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; have methods for returning the model classes they represent and for querying objects from those models. &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; also has a &lt;a href=&quot;../../topics/db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt; that adds methods for working with &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; and for obtaining instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; for a particular model.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 의&lt;/a&gt; 인스턴스에는 자신이 나타내는 모델 클래스를 반환하고 해당 모델에서 객체를 쿼리하기위한 메서드가 있습니다. &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 이는&lt;/a&gt; 또한이 &lt;a href=&quot;../../topics/db/managers#custom-managers&quot;&gt;사용자 정의 관리자&lt;/a&gt; 작업을위한 방법을 추가 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 이&lt;/a&gt; 와의 인스턴스 얻는 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 특정 모델을.</target>
        </trans-unit>
        <trans-unit id="3ca2d03ef0213f868473b19d489c0a841c984cea" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; classes are views which can be used in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스의 인스턴스는 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 에서 사용할 수있는보기입니다 .</target>
        </trans-unit>
        <trans-unit id="34051ba4426c5e025165ef265738387f13ceb9b3" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;OuterRef&lt;/code&gt; may be used in conjunction with nested instances of &lt;code&gt;Subquery&lt;/code&gt; to refer to a containing queryset that isn&amp;rsquo;t the immediate parent. For example, this queryset would need to be within a nested pair of &lt;code&gt;Subquery&lt;/code&gt; instances to resolve correctly:</source>
          <target state="translated">인스턴스 &lt;code&gt;OuterRef&lt;/code&gt; 는 중첩 된 인스턴스와 함께 사용될 수있다 &lt;code&gt;Subquery&lt;/code&gt; 바로 상위가 아닌 포함의 검색어를 참조. 예를 들어,이 &lt;code&gt;Subquery&lt;/code&gt; 세트는 올바르게 해석하기 위해 중첩 된 서브 쿼리 인스턴스 쌍 내에 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="965f5a03cce86b0170feb9ce452f784fa702bfa6" translate="yes" xml:space="preserve">
          <source>Instantiate an instance of &lt;code&gt;form_class&lt;/code&gt; using &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_kwargs&quot;&gt;&lt;code&gt;get_form_kwargs()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;form_class&lt;/code&gt; isn&amp;rsquo;t provided &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_class&quot;&gt;&lt;code&gt;get_form_class()&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">인스턴스 인스턴스화 &lt;code&gt;form_class&lt;/code&gt; 사용 &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_kwargs&quot;&gt; &lt;code&gt;get_form_kwargs()&lt;/code&gt; &lt;/a&gt; . 경우 &lt;code&gt;form_class&lt;/code&gt; 가 제공되지 &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_class&quot;&gt; &lt;code&gt;get_form_class()&lt;/code&gt; &lt;/a&gt; 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bda3a125fe2fe7a55e269e5c944a131e88c730c7" translate="yes" xml:space="preserve">
          <source>Instantiates a &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; object with the given template, context, content type, HTTP status, and charset.</source>
          <target state="translated">지정된 템플릿, 컨텍스트, 내용 유형, HTTP 상태 및 문자 집합을 사용하여 &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt; 객체를 인스턴스화합니다 .</target>
        </trans-unit>
        <trans-unit id="b812b7e4f2492d34300d293c78fa87ed20e859f6" translate="yes" xml:space="preserve">
          <source>Instantiates a &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; object with the given request, template, context, content type, HTTP status, and charset.</source>
          <target state="translated">지정된 요청, 템플릿, 컨텍스트, 콘텐츠 유형, HTTP 상태 및 문자 집합을 사용하여 &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 객체를 인스턴스화합니다 .</target>
        </trans-unit>
        <trans-unit id="75e1e0c6a3602561b6ddda3e1aca0d8c160c34b0" translate="yes" xml:space="preserve">
          <source>Instantiates a &lt;code&gt;QueryDict&lt;/code&gt; object based on &lt;code&gt;query_string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;query_string&lt;/code&gt; 기반으로 &lt;code&gt;QueryDict&lt;/code&gt; 객체를 인스턴스화합니다 .</target>
        </trans-unit>
        <trans-unit id="83733746f9ce2ff985b0d7b6dd35d2bfeeaab86f" translate="yes" xml:space="preserve">
          <source>Instantiates an &lt;code&gt;HttpResponse&lt;/code&gt; object with the given page content and content type.</source>
          <target state="translated">주어진 페이지 컨텐츠 및 컨텐츠 유형으로 &lt;code&gt;HttpResponse&lt;/code&gt; 오브젝트를 인스턴스화합니다 .</target>
        </trans-unit>
        <trans-unit id="fc3b8f3c6151107514c4bf4eeca907ec5482a39c" translate="yes" xml:space="preserve">
          <source>Instantiating</source>
          <target state="translated">Instantiating</target>
        </trans-unit>
        <trans-unit id="cffabffc243a86e5e4fd4008f1711530d0497620" translate="yes" xml:space="preserve">
          <source>Instantiating, processing, and rendering forms</source>
          <target state="translated">양식 인스턴스화, 처리 및 렌더링</target>
        </trans-unit>
        <trans-unit id="22aeabb7dc852022ced533d52ff737b2b3613349" translate="yes" xml:space="preserve">
          <source>Instead of a constant, you can also pass any callable:</source>
          <target state="translated">상수 대신 호출 가능한 모든 항목을 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="72257cae811c35080fe1f5b3607be554b2133268" translate="yes" xml:space="preserve">
          <source>Instead of hardcoding the secret key in your settings module, consider loading it from an environment variable:</source>
          <target state="translated">설정 모듈에서 비밀 키를 하드 코딩하는 대신 환경 변수에서 비밀 키를로드하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fe3dc3e8adb7c023a6a4d986658465fea88d21ee" translate="yes" xml:space="preserve">
          <source>Instead of referring to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; directly, you should reference the user model using &lt;code&gt;django.contrib.auth.get_user_model()&lt;/code&gt;. This method will return the currently active user model &amp;ndash; the custom user model if one is specified, or &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 직접 참조하는 대신 &lt;code&gt;django.contrib.auth.get_user_model()&lt;/code&gt; 사용하여 사용자 모델을 참조해야합니다 . 사용자 정의 사용자 하나가 지정된 경우 모델 또는 -이 방법은 현재 활성화 된 사용자 모델 돌아갑니다 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="bba92e02d2c06f149da74f37d67460e937d8a168" translate="yes" xml:space="preserve">
          <source>Instead of sending out real emails the console backend just writes the emails that would be sent to the standard output. By default, the console backend writes to &lt;code&gt;stdout&lt;/code&gt;. You can use a different stream-like object by providing the &lt;code&gt;stream&lt;/code&gt; keyword argument when constructing the connection.</source>
          <target state="translated">실제 이메일을 보내지 않고 콘솔 백엔드는 표준 출력으로 보낼 이메일을 작성합니다. 기본적으로 콘솔 백엔드는 &lt;code&gt;stdout&lt;/code&gt; 에 씁니다 . 연결을 구성 할 때 &lt;code&gt;stream&lt;/code&gt; 키워드 인수 를 제공하여 다른 스트림 유사 오브젝트를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a20d35e04abc263b2085bd01850ef1fa676b80f" translate="yes" xml:space="preserve">
          <source>Instead, Django uses the &lt;code&gt;F()&lt;/code&gt; object to generate an SQL expression that describes the required operation at the database level.</source>
          <target state="translated">대신 Django는 &lt;code&gt;F()&lt;/code&gt; 객체를 사용하여 데이터베이스 수준에서 필요한 작업을 설명하는 SQL 식을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="63739a1702388d926c53a0de1d6e622a2ad61b70" translate="yes" xml:space="preserve">
          <source>Instead, you must create a new custom field class and update your models to reference it:</source>
          <target state="translated">대신 새 사용자 정의 필드 클래스를 작성하고 참조하도록 모델을 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="91490210e1a90ded8db45f1dc59077e81e981701" translate="yes" xml:space="preserve">
          <source>Instructs the browser to always send the full URL as the referrer.</source>
          <target state="translated">브라우저가 항상 전체 URL을 리퍼러로 보내도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="cfd51c30985320dbadc1a598127335712c56106c" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send a full URL as the referrer, but only when no protocol downgrade occurs.</source>
          <target state="translated">프로토콜 다운 그레이드가 발생하지 않는 경우에만 브라우저가 리퍼러로서 전체 URL을 보내도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="b636598035ca4d6177e3e6c9c903dcc3d8c1ef76" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send a full URL, but only for same-origin links. No referrer will be sent for cross-origin links.</source>
          <target state="translated">브라우저가 전체 URL을 보내도록 지시하지만 동일한 출처 링크에 대해서만 가능합니다. 교차 출처 링크에 대해서는 리퍼러가 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c0fb8de2583c8c8bae50209d5c64150e59b7871" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send no referrer for links clicked on this site.</source>
          <target state="translated">이 사이트에서 클릭 한 링크에 대해 리퍼러를 보내지 않도록 브라우저에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="b7ecd1ffca0fc0e4b0053ac06d1820f83756efd8" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send only the origin, not the full URL, and to send no referrer when a protocol downgrade occurs.</source>
          <target state="translated">프로토콜 다운 그레이드가 발생할 때 브라우저가 전체 URL이 아닌 원본 만 보내도록하고 리퍼러를 보내지 않도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="637d99a5fb685a12c3c6e4098633e5db47b9ba49" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send only the origin, not the full URL, as the referrer.</source>
          <target state="translated">브라우저가 전체 URL이 아닌 원본 만 리퍼러로 보내도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="18be72781eb1ccbaa5b15b5eddd01a77e00e6f66" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send the full URL as the referrer for same-origin links, and only the origin for cross-origin links.</source>
          <target state="translated">브라우저가 동일한 출처 링크의 참조 자로서 전체 URL을 보내도록하고, 출처 간 링크의 출처 만 보내도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="192e4032c9433119a1b8f523f5783c3815f7a2f6" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send the full URL when the link is same-origin and no protocol downgrade occurs; send only the origin when the link is cross-origin and no protocol downgrade occurs; and no referrer when a protocol downgrade occurs.</source>
          <target state="translated">링크가 동일 출처이고 프로토콜 다운 그레이드가 발생하지 않을 때 브라우저가 전체 URL을 보내도록 지시합니다. 링크가 교차 출처이고 프로토콜 다운 그레이드가 발생하지 않는 경우에만 원본을 보냅니다. 프로토콜 다운 그레이드가 발생할 때 리퍼러가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7b23bec4f6507d4cca8f5d60ec3bc51bc4831a7a" translate="yes" xml:space="preserve">
          <source>Integer representing the data type for all the bands. Defaults to &lt;code&gt;6&lt;/code&gt; (Float32). All bands of a new raster are required to have the same datatype. The value mapping is:</source>
          <target state="translated">모든 밴드의 데이터 형식을 나타내는 정수입니다. 기본값은 &lt;code&gt;6&lt;/code&gt; (Float32)입니다. 새로운 래스터의 모든 밴드는 동일한 데이터 유형을 가져야합니다. 값 매핑은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="931c94c24a1258cda59704dd26701d5f538121be" translate="yes" xml:space="preserve">
          <source>Integer representing the number of bands of the raster. A raster can be created without passing band data upon creation. If the number of bands isn&amp;rsquo;t specified, it&amp;rsquo;s automatically calculated from the length of the &lt;code&gt;bands&lt;/code&gt; input. The number of bands can&amp;rsquo;t be changed after creation.</source>
          <target state="translated">래스터의 밴드 수를 나타내는 정수입니다. 생성시 밴드 데이터를 전달하지 않고도 래스터를 생성 할 수 있습니다. 밴드 수를 지정하지 않으면 &lt;code&gt;bands&lt;/code&gt; 입력 길이에서 자동으로 계산됩니다 . 생성 후에는 밴드 수를 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="eda8d701f2e10496740d2917dbe2843f2ce3cae9" translate="yes" xml:space="preserve">
          <source>Integrating Django with a legacy database</source>
          <target state="translated">Django를 레거시 데이터베이스와 통합</target>
        </trans-unit>
        <trans-unit id="0b0ec2fc7e330a3d8a5e7db32ab4c2dc5da8dbb8" translate="yes" xml:space="preserve">
          <source>Integrating validation</source>
          <target state="translated">검증 통합</target>
        </trans-unit>
        <trans-unit id="01629819b333385e9c8b6238bf93b852412fec63" translate="yes" xml:space="preserve">
          <source>Integrating with django.contrib.sitemaps</source>
          <target state="translated">django.contrib.sitemaps와 통합</target>
        </trans-unit>
        <trans-unit id="611f4acd53244dba4ed5abdac3bc6b3f444bd766" translate="yes" xml:space="preserve">
          <source>Integration with &lt;code&gt;coverage.py&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;coverage.py&lt;/code&gt; 와 통합</target>
        </trans-unit>
        <trans-unit id="b71bc9a25badec542735b3baa9e3604b7bc84c68" translate="yes" xml:space="preserve">
          <source>Interaction with default ordering or &lt;code&gt;order_by()&lt;/code&gt;</source>
          <target state="translated">기본 순서 또는 &lt;code&gt;order_by()&lt;/code&gt; 와의 상호 작용</target>
        </trans-unit>
        <trans-unit id="bb6cfa8632d39cef2cb4c3ea3a83ee056e07d987" translate="yes" xml:space="preserve">
          <source>Interaction with model validation</source>
          <target state="translated">모델 검증과의 상호 작용</target>
        </trans-unit>
        <trans-unit id="ce3b3216035a4a5417f816e3184e425f57e7634e" translate="yes" xml:space="preserve">
          <source>Interested in giving back to the community a little? Maybe you&amp;rsquo;ve found a bug in Django that you&amp;rsquo;d like to see fixed, or maybe there&amp;rsquo;s a small feature you want added.</source>
          <target state="translated">지역 사회에 조금 돌려 주는데 관심이 있습니까? Django에서 버그를 발견했을 수도 있고, 수정하고 싶은 것이 있거나, 추가하고 싶은 작은 기능이있을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff69045749030dbdd4e91ddd52a7fa05a707a735" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;order_with_respect_to&lt;/code&gt; adds an additional field/database column named &lt;code&gt;_order&lt;/code&gt; and sets the model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; option to this field. Consequently, &lt;code&gt;order_with_respect_to&lt;/code&gt; and &lt;code&gt;ordering&lt;/code&gt; cannot be used together, and the ordering added by &lt;code&gt;order_with_respect_to&lt;/code&gt; will apply whenever you obtain a list of objects of this model.</source>
          <target state="translated">내부적으로 &lt;code&gt;order_with_respect_to&lt;/code&gt; 는 추가 필드 / 데이터베이스 열 이름을 추가 &lt;code&gt;_order&lt;/code&gt; 을 하고 모델의 설정 &lt;a href=&quot;#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt; 이 필드에 옵션을 선택합니다. 결과적으로 &lt;code&gt;order_with_respect_to&lt;/code&gt; 와 &lt;code&gt;ordering&lt;/code&gt; 을 함께 사용할 수 없으며 &lt;code&gt;order_with_respect_to&lt;/code&gt; 에 의해 추가 된 순서 는이 모델의 오브젝트 목록을 얻을 때마다 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="a53f9038dcc32cdab6d7c6e27dab10759972255d" translate="yes" xml:space="preserve">
          <source>Internally, Django uses a &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt; instance any time it needs to represent a file.</source>
          <target state="translated">내부적으로 Django는 파일을 나타내야 할 때마다 &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt; &lt;code&gt;django.core.files.File&lt;/code&gt; &lt;/a&gt; 인스턴스를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="7b010410ca6e72b4d0b168b164c7004c1438d2f5" translate="yes" xml:space="preserve">
          <source>Internally, a &lt;code&gt;QuerySet&lt;/code&gt; can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset.</source>
          <target state="translated">내부적으로 &lt;code&gt;QuerySet&lt;/code&gt; 은 실제로 데이터베이스에 충돌하지 않고 구성, 필터링, 슬라이스 및 전달 될 수 있습니다. 쿼리 세트를 평가할 때까지 실제로 데이터베이스 활동이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e6dd13d4fd26757d4a2c67a0952cec4935e89742" translate="yes" xml:space="preserve">
          <source>Internally, inline translations use an &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">내부적으로 인라인 변환은 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 호출을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="cc66677522f28534dcc0a16a7bab83d78d113263" translate="yes" xml:space="preserve">
          <source>Internally, these strings are of type &lt;a href=&quot;../ref/utils#django.utils.safestring.SafeString&quot;&gt;&lt;code&gt;SafeString&lt;/code&gt;&lt;/a&gt;. You can test for them using code like:</source>
          <target state="translated">내부적으로이 문자열은 &lt;a href=&quot;../ref/utils#django.utils.safestring.SafeString&quot;&gt; &lt;code&gt;SafeString&lt;/code&gt; &lt;/a&gt; 유형 입니다 . 다음과 같은 코드를 사용하여 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9840502f92536bda054c5b8b5b3b050903683be4" translate="yes" xml:space="preserve">
          <source>Internationalization and localization</source>
          <target state="translated">국제화 및 현지화</target>
        </trans-unit>
        <trans-unit id="e609ab9b7fe6379c805dbcbfe129b8b31dec62eb" translate="yes" xml:space="preserve">
          <source>Internationalization tags and filters</source>
          <target state="translated">국제화 태그 및 필터</target>
        </trans-unit>
        <trans-unit id="d8fc92b491eced77c0cc45a1a5338ff73ae08d59" translate="yes" xml:space="preserve">
          <source>Internationalization: in JavaScript code</source>
          <target state="translated">국제화 : JavaScript 코드</target>
        </trans-unit>
        <trans-unit id="c75f43d03d9fa742d9fb2c7d7873a7d5bc0ebf9d" translate="yes" xml:space="preserve">
          <source>Internationalization: in Python code</source>
          <target state="translated">국제화 : 파이썬 코드에서</target>
        </trans-unit>
        <trans-unit id="8fc3c49e3bc6b80c15d9568df95ee12b2b4ec66b" translate="yes" xml:space="preserve">
          <source>Internationalization: in URL patterns</source>
          <target state="translated">국제화 : URL 패턴</target>
        </trans-unit>
        <trans-unit id="093d237356c453f731e7c6a8c57c6018a7b3c174" translate="yes" xml:space="preserve">
          <source>Internationalization: in template code</source>
          <target state="translated">국제화 : 템플릿 코드</target>
        </trans-unit>
        <trans-unit id="23b1a5b17786a57e3a8fb5dfdf8cf77e5bfff51e" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8+</source>
          <target state="translated">Internet Explorer 8 이상</target>
        </trans-unit>
        <trans-unit id="4d8f4358c79e6f7a5ea439bdcb9825fcc3a2e838" translate="yes" xml:space="preserve">
          <source>Interpolation of &lt;code&gt;'%(app_label)s'&lt;/code&gt; and &lt;code&gt;'%(class)s'&lt;/code&gt; was added.</source>
          <target state="translated">&lt;code&gt;'%(app_label)s'&lt;/code&gt; 및 &lt;code&gt;'%(class)s'&lt;/code&gt; 보간 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="670d4bcb5c48156aee896dbdd2af0b12b43400b5" translate="yes" xml:space="preserve">
          <source>Interpretation of naive datetime objects</source>
          <target state="translated">순진한 datetime 객체의 해석</target>
        </trans-unit>
        <trans-unit id="ad5e7d5ae08e5cb2ed9acbf41f656da0c395f4bb" translate="yes" xml:space="preserve">
          <source>Introduce new views based on Django&amp;rsquo;s generic views.</source>
          <target state="translated">Django의 일반 뷰를 기반으로 새로운 뷰를 소개합니다.</target>
        </trans-unit>
        <trans-unit id="142d034c2e0110437de3729fc1ce5c2b7c38c50e" translate="yes" xml:space="preserve">
          <source>Introducing automated testing</source>
          <target state="translated">자동 테스트 소개</target>
        </trans-unit>
        <trans-unit id="de87d094c22de1337720d7b33816998f9929c20c" translate="yes" xml:space="preserve">
          <source>Introducing the Django Admin</source>
          <target state="translated">Django Admin 소개</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="2b73339f8aa842940195a89ffe993ba65c3d9dde" translate="yes" xml:space="preserve">
          <source>Introduction to class-based views</source>
          <target state="translated">클래스 기반 뷰 소개</target>
        </trans-unit>
        <trans-unit id="a82d8f28beb37bb1505deaf578ad2cbafb3ae7f0" translate="yes" xml:space="preserve">
          <source>Introductions to all the key parts of Django you&amp;rsquo;ll need to know:</source>
          <target state="translated">Django의 모든 주요 부분에 대해 소개해야합니다.</target>
        </trans-unit>
        <trans-unit id="c10d2f178e3c219ba32583ff1ed75ce35061d066" translate="yes" xml:space="preserve">
          <source>Introspects the database tables in the database pointed-to by the &lt;a href=&quot;settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; setting and outputs a Django model module (a &lt;code&gt;models.py&lt;/code&gt; file) to standard output.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 설정이 가리키는 데이터베이스의 데이터베이스 테이블을 검사하고 Django 모델 모듈 ( &lt;code&gt;models.py&lt;/code&gt; 파일)을 표준 출력으로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="e558f12b2fea5ada2ae33560ebbbda69b6b36bad" translate="yes" xml:space="preserve">
          <source>Is it a problem that Django&amp;rsquo;s CSRF protection isn&amp;rsquo;t linked to a session by default?</source>
          <target state="translated">Django의 CSRF 보호가 기본적으로 세션에 연결되어 있지 않은 문제입니까?</target>
        </trans-unit>
        <trans-unit id="689295ff3cb0af6e5ed4a1994a98fd53a5442ebe" translate="yes" xml:space="preserve">
          <source>Is posting an arbitrary CSRF token pair (cookie and POST data) a vulnerability?</source>
          <target state="translated">임의의 CSRF 토큰 쌍 (쿠키 및 POST 데이터)을 게시하는 것이 취약점입니까?</target>
        </trans-unit>
        <trans-unit id="46c6d6a6205743736d71d9cc8062c3a735fdd329" translate="yes" xml:space="preserve">
          <source>Isolation level</source>
          <target state="translated">격리 수준</target>
        </trans-unit>
        <trans-unit id="9c193045b5c55b9e3ed8d3e3e8a7b0a1f8cfd3eb" translate="yes" xml:space="preserve">
          <source>Isolation when using &lt;code&gt;QuerySet.iterator()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;QuerySet.iterator()&lt;/code&gt; 사용시 격리</target>
        </trans-unit>
        <trans-unit id="7a224f02cd37de1afa21b98fadb23b1f88a19283" translate="yes" xml:space="preserve">
          <source>Issues an SQL &lt;code&gt;DELETE&lt;/code&gt; for the object. This only deletes the object in the database; the Python instance will still exist and will still have data in its fields. This method returns the number of objects deleted and a dictionary with the number of deletions per object type.</source>
          <target state="translated">오브젝트에 대한 SQL &lt;code&gt;DELETE&lt;/code&gt; 를 발행 합니다. 데이터베이스의 오브젝트 만 삭제합니다. 파이썬 인스턴스는 여전히 존재하며 필드에 여전히 데이터가 있습니다. 이 메소드는 삭제 된 오브젝트 수와 오브젝트 유형 당 삭제 수가있는 사전을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7475fe4c0d244b8e0bfd059947833601ade2bebc" translate="yes" xml:space="preserve">
          <source>It accepts two lists of operations, and when asked to apply state will use the state list, and when asked to apply changes to the database will use the database list. Do not use this operation unless you&amp;rsquo;re very sure you know what you&amp;rsquo;re doing.</source>
          <target state="translated">두 가지 작업 목록을 허용하며 상태를 적용하라는 요청을 받으면 상태 목록을 사용하고 변경 사항을 데이터베이스에 적용하라는 요청을 받으면 데이터베이스 목록을 사용합니다. 수행중인 작업을 잘 모르면이 작업을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="41a4422a0925c7b4416e1d76c7cc32a51af230b3" translate="yes" xml:space="preserve">
          <source>It accepts two lists of operations. When asked to apply state, it will use the &lt;code&gt;state_operations&lt;/code&gt; list (this is a generalized version of &lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;state_operations&lt;/code&gt; argument). When asked to apply changes to the database, it will use the &lt;code&gt;database_operations&lt;/code&gt; list.</source>
          <target state="translated">두 가지 작업 목록을 허용합니다. 상태를 적용하라는 요청을 &lt;code&gt;state_operations&lt;/code&gt; 목록 ( &lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;state_operations&lt;/code&gt; 인수 의 일반화 된 버전 )을 사용합니다. 데이터베이스에 변경 사항을 적용하라는 요청을 받으면 &lt;code&gt;database_operations&lt;/code&gt; 목록 을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="5d336b8e808b2ce8e6bc0892a95ebcc857261a00" translate="yes" xml:space="preserve">
          <source>It allows developers and template authors to specify which parts of their apps should be translated or formatted for local languages and cultures.</source>
          <target state="translated">개발자와 템플릿 작성자는 현지 언어와 문화에 맞게 앱의 어느 부분을 번역하거나 형식을 지정할 것인지 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7dfc09caa336e0bf633e02009b185c91abc12fe9" translate="yes" xml:space="preserve">
          <source>It also handles the default permissions model as defined for &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.PermissionsMixin&quot;&gt;&lt;code&gt;PermissionsMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.PermissionsMixin&quot;&gt; &lt;code&gt;PermissionsMixin&lt;/code&gt; 에&lt;/a&gt; 대해 정의 된 기본 권한 모델을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="cdc1d84e127c6d08799ea2bc49fa76e2873146cb" translate="yes" xml:space="preserve">
          <source>It also has these methods:</source>
          <target state="translated">또한 다음과 같은 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="511ef7aa375efc4f8ed62f952d298be8e0b4f95c" translate="yes" xml:space="preserve">
          <source>It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django&amp;rsquo;s creators have used this technique to create strikingly different mobile versions of sites by only creating a new base template.</source>
          <target state="translated">또한 하위 템플릿을 재사용하면서 서로 다른 기본 템플릿을 사용하여 여러 버전의 사이트를 만들 수 있습니다. Django의 제작자는이 기술을 사용하여 새 기본 템플릿 만 만들어 매우 다른 모바일 버전의 사이트를 만들었습니다.</target>
        </trans-unit>
        <trans-unit id="34f7a089ecd79aa5a1bdbaa5daa9e3f24da1ed07" translate="yes" xml:space="preserve">
          <source>It also provides an additional method:</source>
          <target state="translated">또한 추가 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1daa4ac3ccf52ec1ffd7ad17d03466c814d3d12f" translate="yes" xml:space="preserve">
          <source>It also supports domain-only links ending in one of the original top level domains (&lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.edu&lt;/code&gt;, &lt;code&gt;.gov&lt;/code&gt;, &lt;code&gt;.int&lt;/code&gt;, &lt;code&gt;.mil&lt;/code&gt;, &lt;code&gt;.net&lt;/code&gt;, and &lt;code&gt;.org&lt;/code&gt;). For example, &lt;code&gt;djangoproject.com&lt;/code&gt; gets converted.</source>
          <target state="translated">또한 원래 최상위 도메인 중 하나 ( &lt;code&gt;.com&lt;/code&gt; , &lt;code&gt;.edu&lt;/code&gt; , &lt;code&gt;.gov&lt;/code&gt; , &lt;code&gt;.int&lt;/code&gt; , &lt;code&gt;.mil&lt;/code&gt; , &lt;code&gt;.net&lt;/code&gt; 및 &lt;code&gt;.org&lt;/code&gt; )로 끝나는 도메인 전용 링크도 지원합니다 . 예를 들어 &lt;code&gt;djangoproject.com&lt;/code&gt; 이 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="a096078e43f7fa4f663661c8b0fa7e65fb69edbb" translate="yes" xml:space="preserve">
          <source>It also tells the browser that the form data should be sent to the URL specified in the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;&amp;rsquo;s &lt;code&gt;action&lt;/code&gt; attribute - &lt;code&gt;/admin/&lt;/code&gt; - and that it should be sent using the HTTP mechanism specified by the &lt;code&gt;method&lt;/code&gt; attribute - &lt;code&gt;post&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 의 &lt;code&gt;action&lt;/code&gt; 속성- &lt;code&gt;/admin/&lt;/code&gt; -에 지정된 URL로 양식 데이터를 보내야하며 attribute- &lt;code&gt;post&lt;/code&gt; &lt;code&gt;method&lt;/code&gt; 지정된 HTTP 메커니즘을 사용하여 양식 데이터를 보내야한다는 것을 브라우저에 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="2a2a327dddd892e286db3b065802898e942c35e8" translate="yes" xml:space="preserve">
          <source>It assumes an understanding of templates, contexts, variables, tags, and rendering. Start with the &lt;a href=&quot;../../topics/templates#template-language-intro&quot;&gt;introduction to the Django template language&lt;/a&gt; if you aren&amp;rsquo;t familiar with these concepts.</source>
          <target state="translated">템플릿, 컨텍스트, 변수, 태그 및 렌더링에 대한 이해가 있다고 가정합니다. 이러한 개념에 익숙하지 않다면 &lt;a href=&quot;../../topics/templates#template-language-intro&quot;&gt;Django 템플릿 언어에&lt;/a&gt; 대한 소개부터 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="690d1365bfbf3fb0fa4c118b89f89d5b8366bb2e" translate="yes" xml:space="preserve">
          <source>It assumes middleware that&amp;rsquo;s compatible with the old style of Django 1.9 and earlier (having methods like &lt;code&gt;process_request()&lt;/code&gt;, &lt;code&gt;process_exception()&lt;/code&gt;, and &lt;code&gt;process_response()&lt;/code&gt;).</source>
          <target state="translated">이전 스타일의 Django 1.9 및 이전 버전과 호환되는 미들웨어를 가정합니다 ( &lt;code&gt;process_request()&lt;/code&gt; , &lt;code&gt;process_exception()&lt;/code&gt; 및 &lt;code&gt;process_response()&lt;/code&gt; 와 같은 메소드 사용 ).</target>
        </trans-unit>
        <trans-unit id="1ad1839af85eeb8a94e119c33ec2f05a3545b5e7" translate="yes" xml:space="preserve">
          <source>It boils down to this: Use exactly one of either &lt;code&gt;configure()&lt;/code&gt; or &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-8&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt;. Not both, and not neither.</source>
          <target state="translated">요약하면 다음과 같습니다. &lt;code&gt;configure()&lt;/code&gt; 또는 &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-8&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 중 정확히 하나를 사용하십시오 . 둘 다도 아니고 둘 다 아닙니다.</target>
        </trans-unit>
        <trans-unit id="adb59b85de0de778de68aecefe53c76f0de98f9c" translate="yes" xml:space="preserve">
          <source>It boils down to this: Use exactly one of either &lt;code&gt;configure()&lt;/code&gt; or &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;. Not both, and not neither.</source>
          <target state="translated">&lt;code&gt;configure()&lt;/code&gt; 또는 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 중 하나를 정확하게 사용하십시오 . 둘 다 아닙니다.</target>
        </trans-unit>
        <trans-unit id="56cf6839db62a78b3bd293b603fd6fb8dfbb0eb3" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 변환으로 등록 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eb23c5c9e3231d62a5810bd6a50cdfe7b6a5920f" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;. The default lookup name is &lt;code&gt;ord&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 변환으로 등록 할 수도 있습니다 . 기본 조회 이름은 &lt;code&gt;ord&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0ea67b801d1eaece4d265dba2ce2e38e5910e3a3" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;. The default lookup name is &lt;code&gt;reverse&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 변환으로 등록 할 수도 있습니다 . 기본 조회 이름은 &lt;code&gt;reverse&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9b83a041f76ddd9a3ab23ee010a83c03a9e951ed" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform. For example:</source>
          <target state="translated">변환으로 등록 할 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7bd0768970c34a1a29a145ed1522c59cc494bcb5" translate="yes" xml:space="preserve">
          <source>It can also be used as a context manager, which will automatically call &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; as needed:</source>
          <target state="translated">필요에 따라 &lt;code&gt;open()&lt;/code&gt; 및 &lt;code&gt;close()&lt;/code&gt; 를 자동으로 호출하는 컨텍스트 관리자로도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ed3fc307f28897d761a0063f6cf900a66eaaebe1" translate="yes" xml:space="preserve">
          <source>It can assign settings dynamically using normal Python syntax. For example:</source>
          <target state="translated">일반적인 Python 구문을 사용하여 설정을 동적으로 할당 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="57a589b7f3ed91b9ee61b7886d257dffc5695c89" translate="yes" xml:space="preserve">
          <source>It can be used as a context manager, e.g. &lt;code&gt;with file.open() as f:&lt;/code&gt;.</source>
          <target state="translated">예 &lt;code&gt;with file.open() as f:&lt;/code&gt; 들어 file.open ()을 f : 로 사용하여 컨텍스트 관리자로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0b2097031fa8fe10d38cffd390f98272e96a466e" translate="yes" xml:space="preserve">
          <source>It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django&amp;rsquo;s email library, you can do this using the &lt;code&gt;EmailMultiAlternatives&lt;/code&gt; class. This subclass of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; has an &lt;code&gt;attach_alternative()&lt;/code&gt; method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이메일에 여러 버전의 컨텐츠를 포함시키는 것이 유용 할 수 있습니다. 전형적인 예는 텍스트와 HTML 버전의 메시지를 보내는 것입니다. Django의 이메일 라이브러리에서는 &lt;code&gt;EmailMultiAlternatives&lt;/code&gt; 클래스를 사용하여 이를 수행 할 수 있습니다 . &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 의이 서브 클래스 는 이메일에 추가 버전의 메시지 본문을 포함하기위한 &lt;code&gt;attach_alternative()&lt;/code&gt; 메소드를 갖습니다 . 클래스 초기화를 포함한 다른 모든 메소드는 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 에서 직접 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c4198fb60ed49893bf1b7b15101a986fc314284" translate="yes" xml:space="preserve">
          <source>It can import values from other settings files.</source>
          <target state="translated">다른 설정 파일에서 값을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d14f9ff60b98c4d0c8826e092f3be2f126af5e32" translate="yes" xml:space="preserve">
          <source>It can prove unwieldy to redefine settings that contain a list of values. In practice, adding or removing values is often sufficient. Django provides the &lt;a href=&quot;#django.test.SimpleTestCase.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; context manager for easier settings changes:</source>
          <target state="translated">값 목록이 포함 된 설정을 재정의하기가 까다로울 수 있습니다. 실제로는 값을 추가하거나 제거하는 것으로 충분합니다. Django는 보다 쉬운 설정 변경을 위해 &lt;a href=&quot;#django.test.SimpleTestCase.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt; 컨텍스트 관리자를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="097608e43f341dbd5fc60aa8b784590fa3776b10" translate="yes" xml:space="preserve">
          <source>It can sometimes be worth checking whether different and better-performing versions of the software that you&amp;rsquo;re using are available.</source>
          <target state="translated">사용중인 소프트웨어 버전이 다르고 성능이 우수한지 여부를 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="020494bf079569c48d07f0e339eeaba2144e3978" translate="yes" xml:space="preserve">
          <source>It casts &lt;code&gt;objs&lt;/code&gt; to a list, which fully evaluates &lt;code&gt;objs&lt;/code&gt; if it&amp;rsquo;s a generator. The cast allows inspecting all objects so that any objects with a manually set primary key can be inserted first. If you want to insert objects in batches without evaluating the entire generator at once, you can use this technique as long as the objects don&amp;rsquo;t have any manually set primary keys:</source>
          <target state="translated">&lt;code&gt;objs&lt;/code&gt; 를 목록으로 캐스트 합니다. 생성기 인 경우 &lt;code&gt;objs&lt;/code&gt; 를 완전히 평가 합니다. 캐스트를 사용하면 수동으로 설정된 기본 키가있는 객체를 먼저 삽입 할 수 있도록 모든 객체를 검사 할 수 있습니다. 전체 생성기를 한 번에 평가하지 않고 배치로 객체를 삽입하려는 경우 객체에 수동으로 설정된 기본 키가없는 한이 기술을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ceb8f9445123da563549e25d61604338816d4379" translate="yes" xml:space="preserve">
          <source>It checks if the authentication backend stored in the session is present in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;. If so, it uses the backend&amp;rsquo;s &lt;code&gt;get_user()&lt;/code&gt; method to retrieve the user model instance and then verifies the session by calling the user model&amp;rsquo;s &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">세션에 저장된 인증 백엔드가 &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 에&lt;/a&gt; 있는지 확인합니다 . 그렇다면 백엔드의 &lt;code&gt;get_user()&lt;/code&gt; 메소드를 사용하여 사용자 모델 인스턴스를 검색 한 다음 사용자 모델의 &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt; &lt;code&gt;get_session_auth_hash()&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하여 세션을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="3944a69b3b8d5e875b158cbb7605a1481e03f1ee" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;'utf-8'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="610e7c05ff132aa7c98f9f01ec8dcc655f337645" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="623e5cad0209d1a8e190acf6c13089e4a56c233d" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3d209a528a103c486502ebe2e0181e7e90306575" translate="yes" xml:space="preserve">
          <source>It defaults to a list containing:</source>
          <target state="translated">기본값은 다음을 포함하는 목록입니다.</target>
        </trans-unit>
        <trans-unit id="3db0ca2305071d48e523540f02a1e4d4cdd92923" translate="yes" xml:space="preserve">
          <source>It defaults to an empty list.</source>
          <target state="translated">빈 목록이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="b54a841d858e6e9a9cdf3df9d4cd720e0e1979b8" translate="yes" xml:space="preserve">
          <source>It defaults to an empty string.</source>
          <target state="translated">기본값은 빈 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4086bf4e205c88779a9aaabba9fb09a7f47c9f8b" translate="yes" xml:space="preserve">
          <source>It defaults to the empty string.</source>
          <target state="translated">빈 문자열이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="28e917985102de2cb163734f6e066baeaa33a044" translate="yes" xml:space="preserve">
          <source>It defaults to the name of the module defining the engine class, i.e. the next to last piece of &lt;a href=&quot;#std:setting-TEMPLATES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt;, when it isn&amp;rsquo;t provided. For example if the backend is &lt;code&gt;'mypackage.whatever.Backend'&lt;/code&gt; then its default name is &lt;code&gt;'whatever'&lt;/code&gt;.</source>
          <target state="translated">엔진 클래스를 정의하는 모듈의 이름이 기본값입니다 (예 : &lt;a href=&quot;#std:setting-TEMPLATES-BACKEND&quot;&gt; &lt;code&gt;BACKEND&lt;/code&gt; 의&lt;/a&gt; 마지막 부분이 제공되지 않은 경우). 예를 들어 백엔드가 &lt;code&gt;'mypackage.whatever.Backend'&lt;/code&gt; 인 경우 기본 이름은 &lt;code&gt;'whatever'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f670820519da37f85de420992b3fd748290e4628" translate="yes" xml:space="preserve">
          <source>It defaults to the value of the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">기본값은 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정 값입니다 .</target>
        </trans-unit>
        <trans-unit id="d147afb5556d22db8ab3da32b2d02bdec93b0017" translate="yes" xml:space="preserve">
          <source>It deliberately ignores GET requests (and other requests that are defined as &amp;lsquo;safe&amp;rsquo; by &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt;). These requests ought never to have any potentially dangerous side effects, and so a CSRF attack with a GET request ought to be harmless. &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt; defines POST, PUT, and DELETE as &amp;lsquo;unsafe&amp;rsquo;, and all other methods are also assumed to be unsafe, for maximum protection.</source>
          <target state="translated">GET 요청 (및 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231 # section-4.2.1에&lt;/strong&gt;&lt;/a&gt; 의해 '안전한'으로 정의 된 다른 요청)을 의도적으로 무시합니다 . 이러한 요청에는 잠재적으로 위험한 부작용이 없어야하므로 GET 요청으로 인한 CSRF 공격은 무해해야합니다. &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 7231 # section-4.2.1&lt;/strong&gt;&lt;/a&gt; 은 POST, PUT 및 DELETE를 '안전하지 않은'것으로 정의하고 다른 모든 방법도 최대의 보호를 위해 안전하지 않은 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="c1df500b3fdcfe2bc743847338a819e8fc0de2b5" translate="yes" xml:space="preserve">
          <source>It does not support middleware. Session and authentication attributes must be supplied by the test itself if required for the view to function properly.</source>
          <target state="translated">미들웨어를 지원하지 않습니다. 보기가 제대로 작동하려면 테스트 자체에서 세션 및 인증 속성을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="c47f33f421faaf0d62ce5c333284b1b924733727" translate="yes" xml:space="preserve">
          <source>It does not work with child models in a multi-table inheritance scenario.</source>
          <target state="translated">다중 테이블 상속 시나리오에서는 하위 모델과 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8152d5b171a8766f9da5b542812132a92f7bc3a8" translate="yes" xml:space="preserve">
          <source>It does not work with many-to-many relationships.</source>
          <target state="translated">다 대다 관계에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8fc51282cf5ef3da5ced5304bc564e431c925d3c" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t allow for Python syntax errors.</source>
          <target state="translated">Python 구문 오류는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="067e9c9b65fffdb89e5ef4a000cf2df974c65535" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t matter which model has the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;, but you should only put it in one of the models &amp;ndash; not both.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 가있는 모델은 중요하지 않지만 둘 중 하나가 아닌 모델 중 하나에 만 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="36f56311955ef1f67fee06986862dbe095296993" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t save you from generating the response, which may be expensive.</source>
          <target state="translated">응답을 생성하지 않아도되므로 비용이 많이들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87a806c4922f40382d07fc0463c125f83ba7a5bc" translate="yes" xml:space="preserve">
          <source>It exposes all possible operations as methods, that should be called in the order you wish changes to be applied. Some possible operations or types of change are not possible on all databases - for example, MyISAM does not support foreign key constraints.</source>
          <target state="translated">가능한 모든 작업을 메서드로 표시하며 변경 사항을 적용하려는 순서대로 호출해야합니다. 일부 데이터베이스에서는 일부 작업 또는 변경 유형이 가능하지 않습니다. 예를 들어 MyISAM은 외래 키 제약 조건을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0c58c5a4e6116594807b291787a1f7990bcf8231" translate="yes" xml:space="preserve">
          <source>It has access to the following settings:</source>
          <target state="translated">다음 설정에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0a3475069a9ec716d0910e37c46be9d681e15d1" translate="yes" xml:space="preserve">
          <source>It has no &lt;code&gt;content&lt;/code&gt; attribute. Instead, it has a &lt;a href=&quot;#django.http.StreamingHttpResponse.streaming_content&quot;&gt;&lt;code&gt;streaming_content&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; 속성 이 없습니다 . 대신 &lt;a href=&quot;#django.http.StreamingHttpResponse.streaming_content&quot;&gt; &lt;code&gt;streaming_content&lt;/code&gt; &lt;/a&gt; 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa0dc2f03765869baa63c35bfcea12543db464d7" translate="yes" xml:space="preserve">
          <source>It has three fields: &lt;code&gt;username&lt;/code&gt; (from the user model), &lt;code&gt;password1&lt;/code&gt;, and &lt;code&gt;password2&lt;/code&gt;. It verifies that &lt;code&gt;password1&lt;/code&gt; and &lt;code&gt;password2&lt;/code&gt; match, validates the password using &lt;a href=&quot;passwords#django.contrib.auth.password_validation.validate_password&quot;&gt;&lt;code&gt;validate_password()&lt;/code&gt;&lt;/a&gt;, and sets the user&amp;rsquo;s password using &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">여기에는 &lt;code&gt;username&lt;/code&gt; (사용자 모델의), &lt;code&gt;password1&lt;/code&gt; 및 &lt;code&gt;password2&lt;/code&gt; 필드가 있습니다. &lt;code&gt;password1&lt;/code&gt; 과 &lt;code&gt;password2&lt;/code&gt; 가 일치 하는지 확인하고 &lt;a href=&quot;passwords#django.contrib.auth.password_validation.validate_password&quot;&gt; &lt;code&gt;validate_password()&lt;/code&gt; &lt;/a&gt; 사용하여 비밀번호를 유효성 검증 하고 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt; &lt;code&gt;set_password()&lt;/code&gt; &lt;/a&gt; 사용하여 사용자 비밀번호를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="7d779021d49b2c90161c17c331456b5b3068c78f" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;possible&lt;/em&gt; to write code that does all of this manually, but Django can take care of it all for you.</source>
          <target state="translated">이 모든 작업을 수동으로 수행하는 코드를 작성하는 것이 &lt;em&gt;가능&lt;/em&gt; 하지만 Django는 모든 것을 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="076bb76ff5ce930dc8437ad0f408044a3c975e80" translate="yes" xml:space="preserve">
          <source>It is a good idea to limit the accessibility of your caching system and database using a firewall.</source>
          <target state="translated">방화벽을 사용하여 캐싱 시스템 및 데이터베이스의 액세스 가능성을 제한하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e4bd508268912d6165f52fe9e95d58ac3654cc3c" translate="yes" xml:space="preserve">
          <source>It is also able to consume standard context variables, e.g. assuming a &lt;code&gt;user_stylesheet&lt;/code&gt; variable is passed to the template:</source>
          <target state="translated">예를 들어 &lt;code&gt;user_stylesheet&lt;/code&gt; 변수가 템플리트에 전달되는 경우와 같이 표준 컨텍스트 변수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7275d5f0dbdce35d356cc0217bbaced47935d584" translate="yes" xml:space="preserve">
          <source>It is also important to be particularly careful when using &lt;code&gt;is_safe&lt;/code&gt; with custom template tags, the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; template tag, &lt;a href=&quot;../ref/utils#module-django.utils.safestring&quot;&gt;&lt;code&gt;mark_safe&lt;/code&gt;&lt;/a&gt;, and when autoescape is turned off.</source>
          <target state="translated">사용할 때 특히주의하는 것이 중요하다 &lt;code&gt;is_safe&lt;/code&gt; 사용자 정의 템플릿 태그의와 &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt; 템플릿 태그, &lt;a href=&quot;../ref/utils#module-django.utils.safestring&quot;&gt; &lt;code&gt;mark_safe&lt;/code&gt; 을&lt;/a&gt; autoescape이 꺼지면합니다.</target>
        </trans-unit>
        <trans-unit id="d35cd2bb04a3095baf1f0156dad2be668729d17a" translate="yes" xml:space="preserve">
          <source>It is also important to remember that when running with &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; turned on, Django will remember every SQL query it executes. This is useful when you&amp;rsquo;re debugging, but it&amp;rsquo;ll rapidly consume memory on a production server.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; 를&lt;/a&gt; 켠 상태에서 실행할 때 Django는 실행하는 모든 SQL 쿼리 를 기억한다는 점을 기억해야 합니다. 디버깅 할 때 유용하지만 프로덕션 서버에서 메모리를 빠르게 소비합니다.</target>
        </trans-unit>
        <trans-unit id="ee9ff4e3c1dd0783a48894b88febf1b60c5ee412" translate="yes" xml:space="preserve">
          <source>It is also possible to make use of the &lt;a href=&quot;https://docs.python.org/3/library/enum.html#functional-api&quot;&gt;Enum Functional API&lt;/a&gt; with the caveat that labels are automatically generated as highlighted above:</source>
          <target state="translated">위에 강조 표시된대로 레이블이 자동으로 생성된다는 경고와 함께 &lt;a href=&quot;https://docs.python.org/3/library/enum.html#functional-api&quot;&gt;Enum Functional API&lt;/a&gt; 를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="44479df581713f225efd5b192e8fbdd6c0ac4474" translate="yes" xml:space="preserve">
          <source>It is always better for security to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases &amp;ndash; &lt;strong&gt;active&lt;/strong&gt; network attackers &amp;ndash; to alter data that is sent in either direction.</source>
          <target state="translated">HTTPS 뒤에 사이트를 배포하는 것이 항상 보안을 유지하는 것이 좋습니다. 이를 사용하지 않으면 악의적 인 네트워크 사용자가 클라이언트와 서버간에 전송 된 인증 자격 증명 또는 기타 정보를 스니핑하고 일부 경우 ( &lt;strong&gt;활성&lt;/strong&gt; 네트워크 공격자) 어느 방향 으로든 전송 된 데이터를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b4af27d7dd9a152a61bf23559d3c0f63300fe1e" translate="yes" xml:space="preserve">
          <source>It is an error to pass both &lt;code&gt;db_constraint&lt;/code&gt; and &lt;code&gt;through&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;db_constraint&lt;/code&gt; 와 &lt;code&gt;through&lt;/code&gt; 를 모두 전달하면 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="f706f2f8550bb586d727ba9bab956c8a2837633c" translate="yes" xml:space="preserve">
          <source>It is an error to pass in &lt;code&gt;flat&lt;/code&gt; when there is more than one field.</source>
          <target state="translated">필드가 둘 이상인 경우 &lt;code&gt;flat&lt;/code&gt; 으로 전달하면 오류가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="94e37286047bbf178a0b441757a7d81a744c2c81" translate="yes" xml:space="preserve">
          <source>It is best practice to provide a dedicated environment for each Django project you create. There are many options to manage environments and packages within the Python ecosystem, some of which are recommended in the &lt;a href=&quot;https://packaging.python.org/guides/tool-recommendations/&quot;&gt;Python documentation&lt;/a&gt;. Python itself comes with &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt; for managing environments which we will use for this guide.</source>
          <target state="translated">생성하는 각 Django 프로젝트에 전용 환경을 제공하는 것이 가장 좋습니다. Python 에코 시스템 내에서 환경 및 패키지를 관리하는 많은 옵션이 있으며, 그중 일부는 &lt;a href=&quot;https://packaging.python.org/guides/tool-recommendations/&quot;&gt;Python 문서&lt;/a&gt; 에서 권장됩니다 . Python 자체는 이 가이드에서 사용할 환경 관리를위한 &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt; 와 함께 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="d92635fe6d3362308ab42d3856be4325b2da976c" translate="yes" xml:space="preserve">
          <source>It is considered an error to specify a cache name that is not configured.</source>
          <target state="translated">구성되지 않은 캐시 이름을 지정하면 오류로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="db35e4ce1081482f04f069c13884b47498468f3e" translate="yes" xml:space="preserve">
          <source>It is for these reasons that Django provides &lt;em&gt;natural keys&lt;/em&gt;. A natural key is a tuple of values that can be used to uniquely identify an object instance without using the primary key value.</source>
          <target state="translated">이런 이유로 Django는 &lt;em&gt;자연스러운 키를&lt;/em&gt; 제공 &lt;em&gt;합니다&lt;/em&gt; . 자연 키는 기본 키 값을 사용하지 않고 객체 인스턴스를 고유하게 식별하는 데 사용할 수있는 값의 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="cdaad7896204a4ac78b076176cec9c1cbf93733e" translate="yes" xml:space="preserve">
          <source>It is important to understand that a Django application is a set of code that interacts with various parts of the framework. There&amp;rsquo;s no such thing as an &lt;code&gt;Application&lt;/code&gt; object. However, there&amp;rsquo;s a few places where Django needs to interact with installed applications, mainly for configuration and also for introspection. That&amp;rsquo;s why the application registry maintains metadata in an &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance for each installed application.</source>
          <target state="translated">Django 애플리케이션은 프레임 워크의 다양한 부분과 상호 작용하는 코드 세트라는 것을 이해해야합니다. &lt;code&gt;Application&lt;/code&gt; 객체 는 없습니다 . 그러나 Django가 주로 구성 및 내부 검사를 위해 설치된 응용 프로그램과 상호 작용해야하는 곳이 몇 군데 있습니다. 그렇기 때문에 응용 프로그램 레지스트리는 설치된 각 응용 프로그램 의 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 메타 데이터를 유지 관리 합니다.</target>
        </trans-unit>
        <trans-unit id="21713b029856dacee13a57247a95a54d57c7a08f" translate="yes" xml:space="preserve">
          <source>It is important you use a &lt;code&gt;ModelForm&lt;/code&gt; here otherwise things can break. See the &lt;a href=&quot;../../forms/index&quot;&gt;forms&lt;/a&gt; documentation on &lt;a href=&quot;../../forms/validation&quot;&gt;custom validation&lt;/a&gt; and, more specifically, the &lt;a href=&quot;../../../topics/forms/modelforms#overriding-modelform-clean-method&quot;&gt;model form validation notes&lt;/a&gt; for more information.</source>
          <target state="translated">여기서 &lt;code&gt;ModelForm&lt;/code&gt; 을 사용하는 것이 중요합니다 . 그렇지 않으면 문제가 발생할 수 있습니다. 자세한 내용은 &lt;a href=&quot;../../forms/validation&quot;&gt;사용자 지정 유효성 검사&lt;/a&gt; 에 대한 &lt;a href=&quot;../../forms/index&quot;&gt;양식&lt;/a&gt; 설명서 , 특히 &lt;a href=&quot;../../../topics/forms/modelforms#overriding-modelform-clean-method&quot;&gt;모델 양식 유효성 검사 메모&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9f47a7255f5d5f42baf7de03967064db62c559d6" translate="yes" xml:space="preserve">
          <source>It is internal to the HTTP handler modules and you are unlikely to see it elsewhere. If you are modifying HTTP handling code, you should raise this when you encounter an aborted request to make sure the socket is closed cleanly.</source>
          <target state="translated">HTTP 처리기 모듈 내부에 있으며 다른 곳에서는 볼 수 없습니다. HTTP 처리 코드를 수정하는 경우 중단 된 요청이 발생하면 소켓이 완전히 닫혀 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ea3d5784be308197fa0ef8a916ca48b31fde3d2" translate="yes" xml:space="preserve">
          <source>It is necessary to adapt the calling style when calling sync code from an async context, or vice-versa. For this there are two adapter functions, from the &lt;code&gt;asgiref.sync&lt;/code&gt; module: &lt;a href=&quot;#asgiref.sync.async_to_sync&quot;&gt;&lt;code&gt;async_to_sync()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt;. They are used to transition between the calling styles while preserving compatibility.</source>
          <target state="translated">비동기 컨텍스트에서 동기화 코드를 호출 할 때 호출 스타일을 조정해야하며 그 반대의 경우도 마찬가지입니다. 이를 위해 &lt;code&gt;asgiref.sync&lt;/code&gt; 모듈에는 &lt;a href=&quot;#asgiref.sync.async_to_sync&quot;&gt; &lt;code&gt;async_to_sync()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt; 두 가지 어댑터 함수가 있습니다 . 호환성을 유지하면서 호출 스타일간에 전환하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5f34ac9cd66cf8fc8ae4b45ada16f5905bb668c2" translate="yes" xml:space="preserve">
          <source>It is not always necessary to define a custom model form. The &lt;code&gt;modelformset_factory&lt;/code&gt; function has several arguments which are passed through to &lt;code&gt;modelform_factory&lt;/code&gt;, which are described below.</source>
          <target state="translated">항상 사용자 정의 모델 양식을 정의 할 필요는 없습니다. 그만큼 &lt;code&gt;modelformset_factory&lt;/code&gt; 함수를 통과하는 여러 인자 갖는다 &lt;code&gt;modelform_factory&lt;/code&gt; 설명한다.</target>
        </trans-unit>
        <trans-unit id="9a8b2584d8949ae3aad5845125aff27c6dea3682" translate="yes" xml:space="preserve">
          <source>It is often useful to automatically prepopulate a SlugField based on the value of some other value. You can do this automatically in the admin using &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.prepopulated_fields&quot;&gt;&lt;code&gt;prepopulated_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다른 값의 값을 기반으로 SlugField를 자동으로 미리 채우는 것이 종종 유용합니다. 관리자에서 다음을 사용하여 자동으로 수행 할 수 있습니다&lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.prepopulated_fields&quot;&gt; &lt;code&gt;prepopulated_fields&lt;/code&gt; 를&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6b9f4db131ef38104458cc78f509f9b8e4f82a6f" translate="yes" xml:space="preserve">
          <source>It is optimal because:</source>
          <target state="translated">다음과 같은 이유로 최적입니다.</target>
        </trans-unit>
        <trans-unit id="408d4a1ae07d6047f237c8763a2a0fa6bd869c5a" translate="yes" xml:space="preserve">
          <source>It is permissible to specify a multi-valued field to order the results by (for example, a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; field, or the reverse relation of a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field).</source>
          <target state="translated">결과를 순서대로 정렬하기 위해 다중 값 필드를 지정할 수 있습니다 (예 : &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 필드 또는&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 필드).</target>
        </trans-unit>
        <trans-unit id="4de64c032c28609f6df579f2dfec13b9e5f4dc55" translate="yes" xml:space="preserve">
          <source>It is possible to also look permissions up by &lt;code&gt;{% if in %}&lt;/code&gt; statements. For example:</source>
          <target state="translated">다음을 통해 권한을 조회 할 수도 있습니다. &lt;code&gt;{% if in %}&lt;/code&gt; 문으로 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="621c5a5a4c8691aea320db24c5e909c90b4b8f41" translate="yes" xml:space="preserve">
          <source>It is possible to force the set of fields to be loaded by using the &lt;code&gt;fields&lt;/code&gt; argument.</source>
          <target state="translated">다음을 사용하여 필드 세트를 강제로로드 할 수 있습니다. &lt;code&gt;fields&lt;/code&gt; 인수 필드 .</target>
        </trans-unit>
        <trans-unit id="174fe92efe02e9e94a8eb86f6a7e7cb926b52c6f" translate="yes" xml:space="preserve">
          <source>It is possible to nest array fields - you can specify an instance of &lt;code&gt;ArrayField&lt;/code&gt; as the &lt;code&gt;base_field&lt;/code&gt;. For example:</source>
          <target state="translated">배열 필드를 중첩 할 수 있습니다. &lt;code&gt;ArrayField&lt;/code&gt; 인스턴스를 다음 과 같이 지정할 수 있습니다 . &lt;code&gt;base_field&lt;/code&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e6bcdc82a033bbb732e04f96956f57d7253284dc" translate="yes" xml:space="preserve">
          <source>It is possible to override the name of the package which contains the migrations on a per-app basis by modifying the &lt;a href=&quot;../ref/settings#std:setting-MIGRATION_MODULES&quot;&gt;&lt;code&gt;MIGRATION_MODULES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">앱별로 마이그레이션을 포함하는 패키지 이름을 재정의 할 수 있습니다. &lt;a href=&quot;../ref/settings#std:setting-MIGRATION_MODULES&quot;&gt; &lt;code&gt;MIGRATION_MODULES&lt;/code&gt; &lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="50d0e398cc2ed04ea79dcc18f3912bf3c9a79141" translate="yes" xml:space="preserve">
          <source>It is possible to specify a custom template for rendering a list filter:</source>
          <target state="translated">목록 필터를 렌더링하기위한 사용자 정의 템플리트를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4fa9dadf195abd5e2ec6597c4a03e19eae786f6" translate="yes" xml:space="preserve">
          <source>It is possible to use an inline with generically related objects. Let&amp;rsquo;s say you have the following models:</source>
          <target state="translated">일반적으로 관련된 객체와 함께 인라인을 사용할 수 있습니다. 다음과 같은 모델이 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="1d37ea5ca9ec311b0a77aeb96bb1d5e82b99086a" translate="yes" xml:space="preserve">
          <source>It is recommended to always provide explicit &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt;&lt;code&gt;verbose_name_plural&lt;/code&gt;&lt;/a&gt; options rather than relying on the fallback English-centric and somewhat na&amp;iuml;ve determination of verbose names Django performs by looking at the model&amp;rsquo;s class name:</source>
          <target state="translated">항상 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt; &lt;code&gt;verbose_name_plural&lt;/code&gt; 을&lt;/a&gt; 명시 적으로 제공하는 것이 좋습니다.Django가 모델의 클래스 이름을보고 수행하는 자세한 영어 이름과 다소 순진한 이름의 결정에 의존하기보다는 옵션 .</target>
        </trans-unit>
        <trans-unit id="1506ce35ebb7e326c976d49f03cd54b034d8b5cb" translate="yes" xml:space="preserve">
          <source>It is sometimes possible to have more than one foreign key to the same model. Take this model for instance:</source>
          <target state="translated">동일한 모델에 대해 둘 이상의 외래 키를 가질 수있는 경우가 있습니다. 예를 들어이 모델을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6e64ae5d4a907de96c1bace55146b1c430db4ac7" translate="yes" xml:space="preserve">
          <source>It is strongly advised that you use lowercase table names when you override the table name via &lt;code&gt;db_table&lt;/code&gt;, particularly if you are using the MySQL backend. See the &lt;a href=&quot;../databases#mysql-notes&quot;&gt;MySQL notes&lt;/a&gt; for more details.</source>
          <target state="translated">특히 MySQL 백엔드를 사용하는 경우 &lt;code&gt;db_table&lt;/code&gt; 을 통해 테이블 ​​이름을 대체 할 때 소문자 테이블 이름을 사용하는 것이 좋습니다 . &lt;a href=&quot;../databases#mysql-notes&quot;&gt;MySQL 노트&lt;/a&gt; 참조 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="61ab72b6279f2c2143e6e86aebc9b5bfd16c3339" translate="yes" xml:space="preserve">
          <source>It is strongly desirable to avoid hard-coding these URLs (a laborious, non-scalable and error-prone strategy). Equally dangerous is devising ad-hoc mechanisms to generate URLs that are parallel to the design described by the URLconf, which can result in the production of URLs that become stale over time.</source>
          <target state="translated">이러한 URL을 하드 코딩하지 않는 것이 좋습니다 (매우 힘들고 확장 가능하며 오류가 발생하기 쉬운 전략). URLconf에 설명 된 디자인과 유사한 URL을 생성하는 임시 메커니즘을 고안하는 것도 마찬가지로 위험하므로 시간이 지남에 따라 URL 생성이 중단 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3496c8823f46f96619f7c7234311315d48654dad" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that you explicitly set all fields that should be edited in the form using the &lt;code&gt;fields&lt;/code&gt; attribute. Failure to do so can easily lead to security problems when a form unexpectedly allows a user to set certain fields, especially when new fields are added to a model. Depending on how the form is rendered, the problem may not even be visible on the web page.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 속성을 사용하여 양식에서 편집해야하는 모든 필드를 명시 적으로 설정하는 것이 좋습니다 . 그렇지 않으면 양식에 예기치 않게 사용자가 특정 필드를 설정할 수있는 경우 (특히 새 필드가 모델에 추가 될 때) 보안 문제가 쉽게 발생할 수 있습니다. 양식이 렌더링되는 방식에 따라 웹 페이지에 문제가 표시되지 않을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c6c3e0f0685ccb020fe3695c8557e40f27f6ff9" translate="yes" xml:space="preserve">
          <source>It is used to keep track of how many form instances are being displayed. If you are adding new forms via JavaScript, you should increment the count fields in this form as well. On the other hand, if you are using JavaScript to allow deletion of existing objects, then you need to ensure the ones being removed are properly marked for deletion by including &lt;code&gt;form-#-DELETE&lt;/code&gt; in the &lt;code&gt;POST&lt;/code&gt; data. It is expected that all forms are present in the &lt;code&gt;POST&lt;/code&gt; data regardless.</source>
          <target state="translated">표시되는 양식 인스턴스 수를 추적하는 데 사용됩니다. JavaScript를 통해 새 양식을 추가하는 경우이 양식의 개수 필드도 증가시켜야합니다. 반면, 기존 객체의 삭제를 허용하기 위해 JavaScript를 사용 하는 경우 &lt;code&gt;POST&lt;/code&gt; 데이터 에 &lt;code&gt;form-#-DELETE&lt;/code&gt; 를 포함시켜 제거 할 객체가 올바르게 삭제되도록 표시해야 합니다. 모든 형태는 &lt;code&gt;POST&lt;/code&gt; 데이터에 관계없이 존재해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="0e81a6c17c3961960826357ce78ba7cbd1d1c2dc" translate="yes" xml:space="preserve">
          <source>It is useful for when you need to use a URL reversal before your project&amp;rsquo;s URLConf is loaded. Some common cases where this function is necessary are:</source>
          <target state="translated">프로젝트의 URLConf가로드되기 전에 URL 반전을 사용해야하는 경우에 유용합니다. 이 기능이 필요한 일반적인 경우는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7edadcc89ba3b1214228e34855c13c67e577d922" translate="yes" xml:space="preserve">
          <source>It is useful when you know you&amp;rsquo;re only going to need values from a small number of the available fields and you won&amp;rsquo;t need the functionality of a model instance object. It&amp;rsquo;s more efficient to select only the fields you need to use.</source>
          <target state="translated">사용 가능한 소수의 필드 값만 필요하고 모델 인스턴스 객체의 기능이 필요하지 않다는 것을 알고있을 때 유용합니다. 사용해야하는 필드 만 선택하는 것이 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="206782144dabd31d72568733a87ec94d13293b68" translate="yes" xml:space="preserve">
          <source>It is worth noting that what your method returns is identical to what you return from a function-based view, namely some form of &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. This means that &lt;a href=&quot;../http/shortcuts&quot;&gt;http shortcuts&lt;/a&gt; or &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; objects are valid to use inside a class-based view.</source>
          <target state="translated">메소드가 리턴하는 것은 함수 기반보기에서 리턴하는 것과 동일합니다 (즉, &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 형식) . 이는 &lt;a href=&quot;../http/shortcuts&quot;&gt;http 바로 가기&lt;/a&gt; 또는 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 객체가 클래스 기반 뷰 내에서 사용할 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="743aa8323dc10e1f9ece5cfaea879cb37ebc4b43" translate="yes" xml:space="preserve">
          <source>It isn&amp;rsquo;t enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters, and formatters to ensure you can use the logging output.</source>
          <target state="translated">로깅 호출을 코드에 넣는 것만으로는 충분하지 않습니다. 또한 로깅 출력을 사용할 수 있도록 로거, 핸들러, 필터 및 포맷터를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="39193d731385b7f76adf3109afc18b9fbf1b9c3d" translate="yes" xml:space="preserve">
          <source>It lets the site developers use the same Django view code for both sites. The view code that displays a given story checks to make sure the requested story is on the current site. It looks something like this:</source>
          <target state="translated">사이트 개발자는 두 사이트 모두에 동일한 Django보기 코드를 사용할 수 있습니다. 주어진 스토리를 표시하는 뷰 코드는 요청 된 스토리가 현재 사이트에 있는지 확인합니다. 다음과 같이 보입니다 :</target>
        </trans-unit>
        <trans-unit id="82d7859b62c014f37a7d006ce96504abe35f5a1a" translate="yes" xml:space="preserve">
          <source>It lets the site producers edit all content &amp;ndash; on both sites &amp;ndash; in a single interface (the Django admin).</source>
          <target state="translated">사이트 제작자는 두 사이트의 모든 콘텐츠를 단일 인터페이스 (Django 관리자)로 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc346ea890ef3e267f17202b888b385aff5f57a5" translate="yes" xml:space="preserve">
          <source>It may be &lt;code&gt;None&lt;/code&gt; if the application doesn&amp;rsquo;t contain a &lt;code&gt;models&lt;/code&gt; module. Note that the database related signals such as &lt;a href=&quot;signals#django.db.models.signals.pre_migrate&quot;&gt;&lt;code&gt;pre_migrate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; are only emitted for applications that have a &lt;code&gt;models&lt;/code&gt; module.</source>
          <target state="translated">응용 프로그램에 &lt;code&gt;models&lt;/code&gt; 모듈이 포함되어 있지 않으면 &lt;code&gt;None&lt;/code&gt; 일 수 있습니다 . &lt;a href=&quot;signals#django.db.models.signals.pre_migrate&quot;&gt; &lt;code&gt;pre_migrate&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt; 와 같은 데이터베이스 관련 신호 는 &lt;code&gt;models&lt;/code&gt; 모듈 이있는 응용 프로그램에 대해서만 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="891f0948f1f96a7f49d3a00640d02aa7c1ed47f4" translate="yes" xml:space="preserve">
          <source>It may be helpful to test your local changes with a Django project. First you have to create a new virtual environment, &lt;a href=&quot;#intro-contributing-install-local-copy&quot;&gt;install the previously cloned local copy of Django in editable mode&lt;/a&gt;, and create a new Django project outside of your local copy of Django. You will immediately see any changes you make to Django in your new project, which is of great help when writing your first patch.</source>
          <target state="translated">Django 프로젝트로 로컬 변경 사항을 테스트하는 것이 도움이 될 수 있습니다. 먼저 새로운 가상 환경을 생성 &lt;a href=&quot;#intro-contributing-install-local-copy&quot;&gt;하고 이전에 복제 된 Django 로컬 사본을 편집 가능한 모드로 설치해야합니다.&lt;/a&gt; 외부에 새 Django 프로젝트를 작성해야합니다. 새 프로젝트에서 Django에 대한 변경 사항이 즉시 표시되므로 첫 번째 패치를 작성할 때 큰 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="e290fe2b47b3268f5612298ab687d2e303b5359a" translate="yes" xml:space="preserve">
          <source>It may be used to specify the number of significant digits for the coordinates in the GeoJSON representation &amp;ndash; the default value is 8.</source>
          <target state="translated">GeoJSON 표현에서 좌표의 유효 자릿수를 지정하는 데 사용될 수 있습니다. 기본값은 8입니다.</target>
        </trans-unit>
        <trans-unit id="68d22c0b42c12d91abf2d70f844470a5d9a67ccd" translate="yes" xml:space="preserve">
          <source>It may be used to specify the number of significant digits for the coordinates in the GeoJSON representation &amp;ndash; the default value is 8. Ignored on Oracle.</source>
          <target state="translated">GeoJSON 표현에서 좌표의 유효 자릿수를 지정하는 데 사용할 수 있습니다. 기본값은 8입니다. Oracle에서는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="fac47a07e868f886829abcc8990983fdbddac81a" translate="yes" xml:space="preserve">
          <source>It may be worth checking whether Python software you&amp;rsquo;re using has been provided in a different implementation that can execute the same code faster.</source>
          <target state="translated">사용중인 Python 소프트웨어가 동일한 코드를 더 빨리 실행할 수있는 다른 구현으로 제공되었는지 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="74573669ba6fa17e012f8c9c7aeb042a5383ab68" translate="yes" xml:space="preserve">
          <source>It may return a string which will be printed to &lt;code&gt;stdout&lt;/code&gt; (wrapped by &lt;code&gt;BEGIN;&lt;/code&gt; and &lt;code&gt;COMMIT;&lt;/code&gt; if &lt;a href=&quot;#django.core.management.BaseCommand.output_transaction&quot;&gt;&lt;code&gt;output_transaction&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;stdout&lt;/code&gt; 에 인쇄 될 문자열을 리턴 할 수 있습니다 ( &lt;a href=&quot;#django.core.management.BaseCommand.output_transaction&quot;&gt; &lt;code&gt;output_transaction&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;True&lt;/code&gt; 인 경우 &lt;code&gt;BEGIN;&lt;/code&gt; 및 &lt;code&gt;COMMIT;&lt;/code&gt; 랩핑 됨 ).</target>
        </trans-unit>
        <trans-unit id="1c1c7b378d9968c5ceb99a8f842f7e7d0ca6e76c" translate="yes" xml:space="preserve">
          <source>It means the same story doesn&amp;rsquo;t have to be published twice in the database; it only has a single record in the database.</source>
          <target state="translated">같은 이야기를 데이터베이스에 두 번 게시 할 필요가 없다는 것을 의미합니다. 데이터베이스에는 단일 레코드 만 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b46e8bda19fd3f445307b5f666c282a39b36528" translate="yes" xml:space="preserve">
          <source>It might look nicer to some people to try and chain the &lt;code&gt;etag&lt;/code&gt; and &lt;code&gt;last_modified&lt;/code&gt; decorators if you want to test both preconditions. However, this would lead to incorrect behavior.</source>
          <target state="translated">두 전제 조건을 테스트하려는 경우 일부 사람들이 &lt;code&gt;etag&lt;/code&gt; 및 &lt;code&gt;last_modified&lt;/code&gt; 데코레이터를 연결하고 연결하는 것이 더 좋아 보일 수 있습니다 . 그러나 이것은 잘못된 동작으로 이어질 것입니다.</target>
        </trans-unit>
        <trans-unit id="3f8695114b21a9b553118ffa2c5ddcd51f47b6ef" translate="yes" xml:space="preserve">
          <source>It might seem that our tests are growing out of control. At this rate there will soon be more code in our tests than in our application, and the repetition is unaesthetic, compared to the elegant conciseness of the rest of our code.</source>
          <target state="translated">테스트가 통제 범위를 벗어나는 것 같습니다. 이 속도에서 우리의 응용 프로그램보다 테스트에 더 많은 코드가 곧있을 것이며, 나머지 코드의 우아함과 비교할 때 반복은 미학적입니다.</target>
        </trans-unit>
        <trans-unit id="6c425b5d6b3879127f569ce1f50dd0ba0ba96b36" translate="yes" xml:space="preserve">
          <source>It must be called explicitly in other cases, for instance in plain Python scripts.</source>
          <target state="translated">다른 경우, 예를 들어 일반 Python 스크립트에서 명시 적으로 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="9e10351df97aa228da6872da0688f6abb34bb0e1" translate="yes" xml:space="preserve">
          <source>It must be unique across a Django project.</source>
          <target state="translated">Django 프로젝트에서 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="f6495b09178141d4640e90c3472993cdce9587c4" translate="yes" xml:space="preserve">
          <source>It must be used via the context manager as this allows it to manage things like transactions and deferred SQL (like creating &lt;code&gt;ForeignKey&lt;/code&gt; constraints).</source>
          <target state="translated">트랜잭션 및 지연된 SQL (예 : &lt;code&gt;ForeignKey&lt;/code&gt; 제약 조건 작성 ) 을 관리 할 수 ​​있으므로 컨텍스트 관리자를 통해 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="56ee041848b140717d20c026aa533d96c5a8fbf4" translate="yes" xml:space="preserve">
          <source>It must end in a slash if set to a non-empty value.</source>
          <target state="translated">비어 있지 않은 값으로 설정되면 슬래시로 끝나야합니다.</target>
        </trans-unit>
        <trans-unit id="139ea78feed883583a666b45b0b67d233b14e2e3" translate="yes" xml:space="preserve">
          <source>It must return a response object that implements a &lt;code&gt;render&lt;/code&gt; method. It could alter the given &lt;code&gt;response&lt;/code&gt; by changing &lt;code&gt;response.template_name&lt;/code&gt; and &lt;code&gt;response.context_data&lt;/code&gt;, or it could create and return a brand-new &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; or equivalent.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 메소드 를 구현하는 응답 오브젝트를 리턴해야합니다 . &lt;code&gt;response.template_name&lt;/code&gt; 및 &lt;code&gt;response.context_data&lt;/code&gt; 를 변경하여 지정된 &lt;code&gt;response&lt;/code&gt; 을 변경 하거나 새 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 또는 이와 동등한 것을 작성하여 리턴 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4b879dd92a89ae8af03090a22e5c88dd2ef0fa1" translate="yes" xml:space="preserve">
          <source>It only has access to the HTTP methods &lt;a href=&quot;tools#django.test.Client.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.head&quot;&gt;&lt;code&gt;head()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.options&quot;&gt;&lt;code&gt;options()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;tools#django.test.Client.trace&quot;&gt;&lt;code&gt;trace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HTTP 메소드 &lt;a href=&quot;tools#django.test.Client.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;tools#django.test.Client.post&quot;&gt; &lt;code&gt;post()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;tools#django.test.Client.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;tools#django.test.Client.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;tools#django.test.Client.head&quot;&gt; &lt;code&gt;head()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;tools#django.test.Client.options&quot;&gt; &lt;code&gt;options()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;tools#django.test.Client.trace&quot;&gt; &lt;code&gt;trace()&lt;/code&gt; &lt;/a&gt; 에만 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2fee265c873ca29a4dfdc7e229dbc520d6e70061" translate="yes" xml:space="preserve">
          <source>It only works if it&amp;rsquo;s applied to the view itself.</source>
          <target state="translated">뷰 자체에 적용된 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="56c6c1c177ac76f7caf56b39a0f02ef3aeec1cbc" translate="yes" xml:space="preserve">
          <source>It passes that template a single context variable, &lt;code&gt;flatpage&lt;/code&gt;, which is the flatpage object. It uses &lt;a href=&quot;../templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; in rendering the template.</source>
          <target state="translated">해당 템플릿에 단일 컨텍스트 변수 인 &lt;code&gt;flatpage&lt;/code&gt; 를 전달합니다. 이는 flatpage 객체입니다. 템플릿을 렌더링 할 때 &lt;a href=&quot;../templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="74322b670fac7c6c201108ca20a76c63ad2a8948" translate="yes" xml:space="preserve">
          <source>It provides some custom context:</source>
          <target state="translated">다음과 같은 사용자 정의 컨텍스트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8c03ba869af0beefc751707d92a55c518bcd4160" translate="yes" xml:space="preserve">
          <source>It requires no arguments at time of construction. However, you can use keywords arguments to specify some default headers. For example, this will send a &lt;code&gt;User-Agent&lt;/code&gt; HTTP header in each request:</source>
          <target state="translated">시공시 인수가 필요하지 않습니다. 그러나 키워드 인수를 사용하여 일부 기본 헤더를 지정할 수 있습니다. 예를 들어, 각 요청마다 &lt;code&gt;User-Agent&lt;/code&gt; HTTP 헤더를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="8856f825df0ebb6ad43c3696cec72ae86ffd0ad1" translate="yes" xml:space="preserve">
          <source>It returns a dictionary with these contents:</source>
          <target state="translated">다음 내용이 포함 된 사전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="10ed0dd1dad3c3e655c1ffc8d30de6f3770a90fa" translate="yes" xml:space="preserve">
          <source>It serves two purposes:</source>
          <target state="translated">두 가지 목적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="daac6ec735d9a03493f1120ae0b8f7b54d8ae574" translate="yes" xml:space="preserve">
          <source>It should be given an iterator that yields bytestrings as content.</source>
          <target state="translated">콘텐츠로 바이트 문자열을 생성하는 반복자를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="35f580f8b6a4cd9c3f9c3bf6693e3fc2866c0c68" translate="yes" xml:space="preserve">
          <source>It should be given an iterator that yields strings as content.</source>
          <target state="translated">컨텐츠로 문자열을 생성하는 반복자를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="72d799dc88c16a6235c11695fa71cc19f535a7cb" translate="yes" xml:space="preserve">
          <source>It should be very rare that you&amp;rsquo;ll need to use these parameters. Django will almost always do the right thing and trying to override that will lead to errors that are difficult to track down. This feature is for advanced use only.</source>
          <target state="translated">이 매개 변수를 사용해야하는 경우는 매우 드 should니다. Django는 거의 항상 옳은 일을하고 그것을 무시하려고 시도하면 추적하기 어려운 오류가 발생합니다. 이 기능은 고급 전용입니다.</target>
        </trans-unit>
        <trans-unit id="32ebf580bfe057469268d0aab1f2ae9a8df7fd29" translate="yes" xml:space="preserve">
          <source>It should come after &lt;code&gt;SessionMiddleware&lt;/code&gt;, because &lt;code&gt;LocaleMiddleware&lt;/code&gt; makes use of session data. And it should come before &lt;code&gt;CommonMiddleware&lt;/code&gt; because &lt;code&gt;CommonMiddleware&lt;/code&gt; needs an activated language in order to resolve the requested URL.</source>
          <target state="translated">&lt;code&gt;LocaleMiddleware&lt;/code&gt; 는 세션 데이터를 사용 하므로 &lt;code&gt;SessionMiddleware&lt;/code&gt; 이후에 와야 합니다. 요청 된 URL을 해결하려면 &lt;code&gt;CommonMiddleware&lt;/code&gt; 에 활성화 된 언어가 필요 하기 때문에 CommonMiddleware 보다 먼저 &lt;code&gt;CommonMiddleware&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="d3417f5f5c578905b93f41a99bf7d9107d492449" translate="yes" xml:space="preserve">
          <source>It should go near the top of the list if you&amp;rsquo;re going to turn on the SSL redirect as that avoids running through a bunch of other unnecessary middleware.</source>
          <target state="translated">SSL 리디렉션을 켜려면 다른 많은 미들웨어를 실행하지 않아도되므로 목록 상단에 가야합니다.</target>
        </trans-unit>
        <trans-unit id="20ae97a13ef76334051b1d6adb3f3e630733c512" translate="yes" xml:space="preserve">
          <source>It should return either &lt;code&gt;None&lt;/code&gt; or an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object. If it returns &lt;code&gt;None&lt;/code&gt;, Django will continue processing this request, executing any other &lt;code&gt;process_view()&lt;/code&gt; middleware and, then, the appropriate view. If it returns an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object, Django won&amp;rsquo;t bother calling the appropriate view; it&amp;rsquo;ll apply response middleware to that &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; and return the result.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; 또는 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 반환해야 합니다. &lt;code&gt;None&lt;/code&gt; 을 반환 하면 Django는이 요청을 계속 처리하고 다른 &lt;code&gt;process_view()&lt;/code&gt; 미들웨어를 실행 한 다음 적절한 뷰를 실행합니다. &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 반환하면 Django는 적절한 뷰를 호출하지 않아도됩니다. 해당 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 에&lt;/a&gt; 응답 미들웨어를 적용 하고 결과를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="56a2c669a765e81e1b0b56ce17865b18f7711335" translate="yes" xml:space="preserve">
          <source>It should return the value of the appropriate attribute from &lt;code&gt;model_instance&lt;/code&gt; for this field. The attribute name is in &lt;code&gt;self.attname&lt;/code&gt; (this is set up by &lt;a href=&quot;#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 필드에 대해 &lt;code&gt;model_instance&lt;/code&gt; 에서 적절한 속성 값을 리턴해야 합니다. 속성 이름은 &lt;code&gt;self.attname&lt;/code&gt; 에 있습니다 (이것은 &lt;a href=&quot;#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; 에&lt;/a&gt; 의해 설정됩니다 ).</target>
        </trans-unit>
        <trans-unit id="1bcce886f189622a63ac65f122c49d0df7f36412" translate="yes" xml:space="preserve">
          <source>It specifies the underlying form field for the array. This is not used to render any HTML, but it is used to process the submitted data and validate it. For example:</source>
          <target state="translated">배열의 기본 양식 필드를 지정합니다. 이것은 HTML을 렌더링하는 데 사용되지 않지만 제출 된 데이터를 처리하고 유효성을 검증하는 데 사용됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f05cce6c98f6e4ace18c44a25c87ec03d8301899" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt;&lt;code&gt;MinValueValidator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt;&lt;code&gt;MaxValueValidator&lt;/code&gt;&lt;/a&gt; to validate the input based on the values that the default database supports.</source>
          <target state="translated">&lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt; &lt;code&gt;MinValueValidator&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt; &lt;code&gt;MaxValueValidator&lt;/code&gt; &lt;/a&gt; 를 사용 하여 기본 데이터베이스가 지원하는 값을 기반으로 입력의 유효성을 검사합니다.</target>
        </trans-unit>
        <trans-unit id="2e5b12b84e0f758abb110dc6f71e3c4bf5bf680f" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;../validators#django.core.validators.validate_slug&quot;&gt;&lt;code&gt;validate_slug&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../validators#django.core.validators.validate_unicode_slug&quot;&gt;&lt;code&gt;validate_unicode_slug&lt;/code&gt;&lt;/a&gt; for validation.</source>
          <target state="translated">그것은 사용 &lt;a href=&quot;../validators#django.core.validators.validate_slug&quot;&gt; &lt;code&gt;validate_slug&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../validators#django.core.validators.validate_unicode_slug&quot;&gt; &lt;code&gt;validate_unicode_slug&lt;/code&gt; 을&lt;/a&gt; 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="69d6064034be012d34362fa98f55318c001776ff" translate="yes" xml:space="preserve">
          <source>It uses these hooks to localize Web apps for particular users according to their preferences.</source>
          <target state="translated">이 후크를 사용하여 특정 사용자의 환경 설정에 따라 웹 앱을 현지화합니다.</target>
        </trans-unit>
        <trans-unit id="2c5d75d3ebd51eebd293ed8c3115df3b47816a00" translate="yes" xml:space="preserve">
          <source>It will &lt;em&gt;not&lt;/em&gt; perform any permission checks, so it will be accessible to the general public.</source>
          <target state="translated">그것은 것입니다 &lt;em&gt;하지&lt;/em&gt; 가 일반 대중에 액세스 할 수 있도록 모든 권한 검사를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="821786a5e1da87ecbbea2644ca4a4f5bcd23aca5" translate="yes" xml:space="preserve">
          <source>It will &lt;em&gt;not&lt;/em&gt; provide any header details to prevent caching. This means if the page retrieves data from the database, and caching middleware is active, the page could show outdated information.</source>
          <target state="translated">그것은 것입니다 &lt;em&gt;하지&lt;/em&gt; 캐싱을 방지하기 위해 모든 헤더 세부 정보를 제공합니다. 이는 페이지가 데이터베이스에서 데이터를 검색하고 캐싱 미들웨어가 활성 인 경우 페이지에 오래된 정보가 표시 될 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="644c8f988574018f7fada47bc384adca96d5faf0" translate="yes" xml:space="preserve">
          <source>It will NOT compress content if any of the following are true:</source>
          <target state="translated">다음 중 하나에 해당하면 콘텐츠를 압축하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c053e1a98707a94d9c800f51a24bc57417e353c" translate="yes" xml:space="preserve">
          <source>It works backwards, too. To refer to a &amp;ldquo;reverse&amp;rdquo; relationship, use the lowercase name of the model.</source>
          <target state="translated">거꾸로 작동합니다. &quot;역방향&quot;관계를 참조하려면 모델의 소문자 이름을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1ea2c97c7ae5d91b4cfe32fb4bf2aa453755b44e" translate="yes" xml:space="preserve">
          <source>It works backwards, too. Whilst it &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;can be customized&lt;/code&gt;&lt;/a&gt;, by default you refer to a &amp;ldquo;reverse&amp;rdquo; relationship in a lookup using the lowercase name of the model.</source>
          <target state="translated">거꾸로도 작동합니다. &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;can be customized&lt;/code&gt; &lt;/a&gt; 할 수 있지만 기본적으로 모델의 소문자 이름을 사용하는 조회에서 &quot;역&quot;관계를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="ba3052615bd21fcc198bfe01f9395aa24f32d1ee" translate="yes" xml:space="preserve">
          <source>It works like this. Before calling a view function, Django starts a transaction. If the response is produced without problems, Django commits the transaction. If the view produces an exception, Django rolls back the transaction.</source>
          <target state="translated">이렇게 작동합니다. Django는 뷰 함수를 호출하기 전에 트랜잭션을 시작합니다. 응답없이 문제가 발생하면 Django는 트랜잭션을 커밋합니다. 뷰에서 예외가 발생하면 Django는 트랜잭션을 롤백합니다.</target>
        </trans-unit>
        <trans-unit id="314dada6f6b4efbe8278574634203c228e3dfd1b" translate="yes" xml:space="preserve">
          <source>It works like this: There are three slots for related Choices &amp;ndash; as specified by &lt;code&gt;extra&lt;/code&gt; &amp;ndash; and each time you come back to the &amp;ldquo;Change&amp;rdquo; page for an already-created object, you get another three extra slots.</source>
          <target state="translated">다음과 같이 작동합니다 : &lt;code&gt;extra&lt;/code&gt; 에 의해 지정된대로 관련 선택을위한 3 개의 슬롯이 있으며 이미 생성 된 객체의&amp;ldquo;변경&amp;rdquo;페이지로 돌아올 때마다 또 다른 3 개의 추가 슬롯을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="fd652d964b8e8cbba1b0b82fa6fa4866bc842b4e" translate="yes" xml:space="preserve">
          <source>It works much like Django&amp;rsquo;s &lt;a href=&quot;syndication&quot;&gt;syndication framework&lt;/a&gt;. To create a sitemap, write a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class and point to it in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="translated">Django의 &lt;a href=&quot;syndication&quot;&gt;신디케이션 프레임 워크&lt;/a&gt; 와 매우 유사 합니다. 사이트 맵을 만들려면 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt; 클래스 를 작성하고 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 에서 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="517efc2501dbd4f205ce9ac4a40724f67d48e4ba" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;d be inefficient and redundant to implement this sign up processing code twice, so the sites use the same code behind the scenes. But the &amp;ldquo;thank you for signing up&amp;rdquo; notice needs to be different for each site. By using &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects, we can abstract the &amp;ldquo;thank you&amp;rdquo; notice to use the values of the current site&amp;rsquo;s &lt;a href=&quot;#django.contrib.sites.models.Site.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.sites.models.Site.domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 가입 처리 코드를 두 번 구현하는 것은 비효율적이며 중복되므로 사이트는 배후에서 동일한 코드를 사용합니다. 그러나&amp;ldquo;가입 해 주셔서 감사합니다&amp;rdquo;통지는 각 사이트마다 달라야합니다. 사용하여 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 개체를, 우리는 추상적 통지는 현재 사이트의의 값을 사용하는 &quot;당신이 감사합니다&quot;수 &lt;a href=&quot;#django.contrib.sites.models.Site.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#django.contrib.sites.models.Site.domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b07ba6619a8a9814858736f9737871f7ec3ee41" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;ll consist of two parts:</source>
          <target state="translated">두 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="a9141677e2734b4ebcd76a1646f3a801a2b773b8" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to exploit the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects as much as possible, to remove unneeded complexity and redundancy.</source>
          <target state="translated">불필요한 복잡성과 중복성을 제거 하기 위해 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 개체 를 최대한 활용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="c820a5c6768751a8444aa072c6c6fa905ba2b39c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to keep all your virtual environments in one place, for example in &lt;code&gt;.virtualenvs/&lt;/code&gt; in your home directory.</source>
          <target state="translated">모든 가상 환경을 한 곳에 보관하는 것이 좋습니다 (예 : 홈 디렉토리의 &lt;code&gt;.virtualenvs/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e597b7a72c214db394d011a7d980017dfb96bbf0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to run your tests with Python warnings enabled: &lt;code&gt;python -Wa manage.py test&lt;/code&gt;. The &lt;code&gt;-Wa&lt;/code&gt; flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren&amp;rsquo;t strictly wrong but could benefit from a better implementation.</source>
          <target state="translated">Python 경고가 활성화 된 상태에서 테스트를 실행하는 것이 좋습니다 ( &lt;code&gt;python -Wa manage.py test&lt;/code&gt; ) . &lt;code&gt;-Wa&lt;/code&gt; 의 플래그는 디스플레이 중단 경고에 파이썬을 알려줍니다. 장고는 다른 많은 파이썬 라이브러리와 마찬가지로 기능이 사라질 때 이러한 경고를 사용하여 플래그를 지정합니다. 또한 코드에서 엄격하게 잘못되지는 않지만 더 나은 구현으로 이익을 얻을 수있는 영역을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5205bb3db42b1f9e1a07a61d0d189eb75f732f1a" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn&amp;rsquo;t it be great if we could save some of this repeated work?</source>
          <target state="translated">웹 응용 프로그램을 디자인, 빌드, 테스트 및 유지 관리하려면 많은 작업이 필요합니다. 많은 Python 및 Django 프로젝트는 일반적인 문제를 공유합니다. 이 반복 된 작업의 일부를 저장할 수 있다면 좋지 않을까요?</target>
        </trans-unit>
        <trans-unit id="98892641f79e54717e27729e6b3e830b31327667" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a mistake to think of tests merely as a negative aspect of development.</source>
          <target state="translated">테스트를 개발의 부정적인 측면으로 만 생각하는 것은 실수입니다.</target>
        </trans-unit>
        <trans-unit id="f3f1771f69342fc15b09588915f707913ee328d7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; decorator.:</source>
          <target state="translated">사용자에게 특정 권한이 있는지 확인하는 것은 비교적 일반적인 작업입니다. 따라서 Django는이 경우에 대한 &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt; 데코레이터로 제공합니다. :</target>
        </trans-unit>
        <trans-unit id="d95c3e2c34569b1779186f9d0e9e6929e2596b80" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a sufficiently significant and powerful technique that Django includes a comprehensive caching framework, as well as other smaller pieces of caching functionality.</source>
          <target state="translated">Django가 포괄적 인 캐싱 프레임 워크와 다른 작은 캐싱 기능을 포함하는 것은 충분히 중요하고 강력한 기술입니다.</target>
        </trans-unit>
        <trans-unit id="5d10c8c6b8bd3ff3bac051910da1ebe622e9680d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a very common idiom to load a template, fill a context and return an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object with the result of the rendered template. Django provides a shortcut. Here&amp;rsquo;s the full &lt;code&gt;index()&lt;/code&gt; view, rewritten:</source>
          <target state="translated">템플릿을로드하고 컨텍스트를 채우고 렌더링 된 템플릿의 결과로 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 반환하는 것은 매우 일반적인 관용구 입니다. 장고는 지름길을 제공합니다. 전체 &lt;code&gt;index()&lt;/code&gt; 뷰 는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="be432822d72363028c0959e5520964f3225f08e1" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a very common idiom to use &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and raise &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the object doesn&amp;rsquo;t exist. Django provides a shortcut. Here&amp;rsquo;s the &lt;code&gt;detail()&lt;/code&gt; view, rewritten:</source>
          <target state="translated">&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 을 사용 하고 객체가 존재하지 않으면 &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; 를&lt;/a&gt; 올리는 것은 매우 일반적인 관용구 입니다. 장고는 지름길을 제공합니다. 여기의 &lt;code&gt;detail()&lt;/code&gt; 다시보기 :</target>
        </trans-unit>
        <trans-unit id="471a415cfc5575d8283f9728454d7c7ddf752a92" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s actually sent twice: when the new value is applied (&amp;ldquo;setup&amp;rdquo;) and when the original value is restored (&amp;ldquo;teardown&amp;rdquo;). Use the &lt;code&gt;enter&lt;/code&gt; argument to distinguish between the two.</source>
          <target state="translated">새 값이 적용되거나 ( &quot;설정&quot;) 원래 값이 복원 될 때 ( &quot;티어 다운&quot;) 실제로 두 번 전송됩니다. 두 인수를 구별 하려면 &lt;code&gt;enter&lt;/code&gt; 인수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a89891994672cfaa504284d854c34b4a0ef5768" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also important that you pass through the arguments that can be passed to the model method &amp;ndash; that&amp;rsquo;s what the &lt;code&gt;*args, **kwargs&lt;/code&gt; bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new arguments. If you use &lt;code&gt;*args,
**kwargs&lt;/code&gt; in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added.</source>
          <target state="translated">모델 메소드에 전달할 수있는 인수를 전달하는 것도 중요합니다. &lt;code&gt;*args, **kwargs&lt;/code&gt; 비트가하는 것입니다. Django는 때때로 내장 모델 메소드의 기능을 확장하여 새로운 인수를 추가 할 것입니다. 메소드 정의에 &lt;code&gt;*args, **kwargs&lt;/code&gt; 를 사용 하면 코드가 추가 될 때 해당 인수가 자동으로 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="3137205b835e3db1f5f498b9390d3b3493a1a6a3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to execute parts of the migration inside a transaction using &lt;a href=&quot;db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; or by passing &lt;code&gt;atomic=True&lt;/code&gt; to &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;Non-atomic migrations&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;db/transactions#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 하거나 &lt;code&gt;atomic=True&lt;/code&gt; 를 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 에 전달 하여 트랜잭션 내에서 마이그레이션의 일부를 실행할 수도 있습니다 . 자세한 내용은 &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;비 원자 마이그레이션&lt;/a&gt; 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="9efc3514c2fdb71e437dd068004f9bbbd27d0bd7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s applied globally to all views in your project.</source>
          <target state="translated">프로젝트의 모든 뷰에 전 세계적으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c8809cf55ca136f973721940052ffe5caef0ffc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s common to have to call a class instance&amp;rsquo;s method more than once. If that function is expensive, then doing so can be wasteful.</source>
          <target state="translated">클래스 인스턴스의 메소드를 두 번 이상 호출해야하는 것이 일반적입니다. 그 기능이 비싸면 그렇게하는 것은 낭비가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a8a602e8f5da83ffdb845b5072b20d6cf4d49e9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s difficult to intuit how the ORM will translate complex querysets into SQL queries so when in doubt, inspect the SQL with &lt;code&gt;str(queryset.query)&lt;/code&gt; and write plenty of tests.</source>
          <target state="translated">ORM이 복잡한 쿼리 세트를 SQL 쿼리로 변환하는 방법을 이해하기는 어렵 기 때문에 의심 &lt;code&gt;str(queryset.query)&lt;/code&gt; SQL을 검사하고 많은 테스트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="d9c33de3147bcaef08378b87591ea35eac5018b5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s fairly rare for a new release of well-maintained software to be less efficient, but the maintainers can&amp;rsquo;t anticipate every possible use-case - so while being aware that newer versions are likely to perform better, don&amp;rsquo;t assume that they always will.</source>
          <target state="translated">잘 관리 된 소프트웨어의 새 릴리스가 효율적이지 않은 경우는 드물지만 관리자가 가능한 모든 사용 사례를 예상 할 수는 없습니다. 따라서 새 버전이 더 나은 성능을 기대할 수 있다는 점을 항상 인식하지 마십시오. 의지.</target>
        </trans-unit>
        <trans-unit id="053b90c54269318916dff65e1e856de6e82c3da7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s fragile to hard-code the site IDs like that, in case they change. The cleaner way of accomplishing the same thing is to check the current site&amp;rsquo;s domain:</source>
          <target state="translated">사이트 ID가 변경 될 경우 이와 같이 하드 코딩하는 것은 취약합니다. 동일한 작업을 수행하는 더 깨끗한 방법은 현재 사이트의 도메인을 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5824351282e0b44b78ffe29119839b3c3bb3ecc7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s generally a good idea to have the contenttypes framework installed; several of Django&amp;rsquo;s other bundled applications require it:</source>
          <target state="translated">일반적으로 contenttypes 프레임 워크를 설치하는 것이 좋습니다. Django의 다른 번들 응용 프로그램에는 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="014f23d80312be5d973dc29048745c41bfbff6a7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s given one or more model classes to register with the &lt;code&gt;ModelAdmin&lt;/code&gt;. If you&amp;rsquo;re using a custom &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt;, pass it using the &lt;code&gt;site&lt;/code&gt; keyword argument:</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; 에 등록 할 하나 이상의 모델 클래스가 제공됩니다 . 사용자 정의 &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 &lt;code&gt;site&lt;/code&gt; 키워드 인수를 사용하여 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="504b56f9c369f081939669c1db1001528d39f792" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s good practice to use &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.delete_test_cookie&quot;&gt;&lt;code&gt;delete_test_cookie()&lt;/code&gt;&lt;/a&gt; to clean up after yourself. Do this after you&amp;rsquo;ve verified that the test cookie worked.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.delete_test_cookie&quot;&gt; &lt;code&gt;delete_test_cookie()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 자신을 정리하는 것이 좋습니다 . 테스트 쿠키가 작동하는지 확인한 후에이 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="4304605a4bd63de40eceaad4bc60b970ac46f9b8" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s good practice to use &lt;code&gt;get_absolute_url()&lt;/code&gt; in templates, instead of hard-coding your objects&amp;rsquo; URLs. For example, this template code is bad:</source>
          <target state="translated">객체의 URL을 하드 코딩하는 대신 템플릿에서 &lt;code&gt;get_absolute_url()&lt;/code&gt; 을 사용하는 것이 좋습니다 . 예를 들어이 템플릿 코드는 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="edd2a229206e4806f892693c442f1827099d489d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to add &lt;a href=&quot;../ref/models/instances#django.db.models.Model.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt; methods to your models, not only for your own convenience when dealing with the interactive prompt, but also because objects&amp;rsquo; representations are used throughout Django&amp;rsquo;s automatically-generated admin.</source>
          <target state="translated">대화 형 프롬프트를 처리 할 때 사용자 편의를 위해서뿐만 아니라 Django의 자동 생성 된 관리자 전체에서 객체의 표현이 사용되기 때문에 &lt;a href=&quot;../ref/models/instances#django.db.models.Model.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt; 메서드를 모델 에 추가하는 것이 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="fc15190392d26afa387fe6602061f27607a7f9fc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to have a clear idea what you mean by &amp;lsquo;performance&amp;rsquo;. There is not just one metric of it.</source>
          <target state="translated">'성능'의 의미가 무엇인지 명확하게 이해하는 것이 중요합니다. 하나의 메트릭 만 없습니다.</target>
        </trans-unit>
        <trans-unit id="0be98169dae8591e0cc8439594e2dacf35c8c196" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the &lt;code&gt;Meta&lt;/code&gt; class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren&amp;rsquo;t necessary when you&amp;rsquo;re just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the &lt;a href=&quot;../topics/serialization&quot;&gt;serializer&lt;/a&gt;.</source>
          <target state="translated">Django 필드 클래스는 모델 속성에 저장되어 있지 않다는 것을 알아야합니다. 모델 속성에는 일반 Python 객체가 포함됩니다. 모델에서 정의한 필드 클래스 는 모델 클래스가 생성 될 때 실제로 &lt;code&gt;Meta&lt;/code&gt; 클래스에 저장됩니다 (이 작업을 수행하는 방법에 대한 자세한 내용은 여기서 중요하지 않음). 속성을 만들고 수정하는 경우 필드 클래스가 필요하지 않기 때문입니다. 대신, 속성 값과 데이터베이스에 저장되거나 &lt;a href=&quot;../topics/serialization&quot;&gt;serializer로&lt;/a&gt; 전송되는 항목을 변환하기위한 메커니즘을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="e5df77fc8d383ebc768de094e8b3eec9652afccd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to remember to call the superclass method &amp;ndash; that&amp;rsquo;s that &lt;code&gt;super().save(*args, **kwargs)&lt;/code&gt; business &amp;ndash; to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won&amp;rsquo;t happen and the database won&amp;rsquo;t get touched.</source>
          <target state="translated">객체가 여전히 데이터베이스에 저장되도록 하려면 superclass 메소드 &lt;code&gt;super().save(*args, **kwargs)&lt;/code&gt; 비즈니스 )를 호출해야합니다. 수퍼 클래스 메소드 호출을 잊어 버린 경우 기본 동작이 발생하지 않고 데이터베이스가 건드리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fbd5cb2de1d3cc3f6653c84e9c8b8ea45de47b43" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s impossible to use &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; when autocommit is turned off.</source>
          <target state="translated">자동 커밋이 해제 되어 있으면 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="cb38c679f6a6c48fced09d83d829bb8f2faa2c58" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s meaningless to validate a form with no data, but, for the record, here&amp;rsquo;s what happens with unbound forms:</source>
          <target state="translated">데이터가없는 양식의 유효성을 검사하는 것은 의미가 없지만 기록을 위해 바인딩되지 않은 양식에서 발생하는 작업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8b0cafee32a148eda36617cd8291bb6e3405dff5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s no good just guessing or assuming where the inefficiencies lie in your code.</source>
          <target state="translated">비 효율성이 코드의 어디에 있는지 추측하거나 가정하는 것은 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e0fe6720c1815fea6705c7a7c635a5eef6a5b59" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not possible to mix a template variable inside a string within &lt;code&gt;{% trans
%}&lt;/code&gt;. If your translations require strings with variables (placeholders), use &lt;a href=&quot;#std:templatetag-blocktrans&quot;&gt;&lt;code&gt;{% blocktrans %}&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;{% trans %}&lt;/code&gt; 내의 문자열 내에서 템플릿 변수를 혼합 할 수 없습니다 . 번역에 변수 (자리 표시 자)가있는 문자열이 필요한 경우 &lt;a href=&quot;#std:templatetag-blocktrans&quot;&gt; &lt;code&gt;{% blocktrans %}&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f35f42245a120116256a64b95735e6e688d1027e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not possible to mix a template variable inside a string within &lt;code&gt;{% translate %}&lt;/code&gt;. If your translations require strings with variables (placeholders), use &lt;a href=&quot;#std:templatetag-blocktranslate&quot;&gt;&lt;code&gt;{% blocktranslate %}&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;{% translate %}&lt;/code&gt; 내의 문자열 내에서 템플릿 변수를 혼합 할 수 없습니다 . 번역에 변수 (자리 표시 자)가있는 문자열이 필요한 경우 대신 &lt;a href=&quot;#std:templatetag-blocktranslate&quot;&gt; &lt;code&gt;{% blocktranslate %}&lt;/code&gt; 를&lt;/a&gt; 사용하세요.</target>
        </trans-unit>
        <trans-unit id="ffb12f4f7c51d654a37e1780fde3e22064747cba" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not used by the development server (&lt;code&gt;runserver&lt;/code&gt;), but can be used by any ASGI server either in development or in production.</source>
          <target state="translated">개발 서버 ( &lt;code&gt;runserver&lt;/code&gt; )에서는 사용되지 않지만 개발 또는 프로덕션 환경에서 모든 ASGI 서버에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c8f89a8b9a2f1613d09f12b03fc68f4a7741e89" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often possible to avoid explicitly having to handle forward references by taking care with the ordering of objects within a fixture.</source>
          <target state="translated">조명기 내에서 객체의 순서를 관리하여 전방 참조를 명시 적으로 처리하지 않아도되는 경우가 종종 있습니다.</target>
        </trans-unit>
        <trans-unit id="981625124dca80a0bf6ae3cbc3c96502e0fff8eb" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s only appropriate for HTTP &lt;code&gt;GET&lt;/code&gt; requests.</source>
          <target state="translated">HTTP &lt;code&gt;GET&lt;/code&gt; 요청 에만 적합 합니다.</target>
        </trans-unit>
        <trans-unit id="656acfbc1ff6a2acf248e9bf74b5e097a84323ae" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s optional, but recommended, to include detailed documentation with your app. Create an empty directory &lt;code&gt;django-polls/docs&lt;/code&gt; for future documentation. Add an additional line to &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt;:</source>
          <target state="translated">선택 사항이지만 앱에 자세한 설명서를 포함시키는 것이 좋습니다. 향후 문서화를 위해 빈 디렉토리 &lt;code&gt;django-polls/docs&lt;/code&gt; 를 작성하십시오. &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt; 에 추가 행을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd909e3a15dcb8cd50eed3fdd5287a154cb90918" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the file where your model is defined. Then, refer to the other model class wherever needed. For example:</source>
          <target state="translated">모델을 다른 앱의 모델과 관련시키는 것이 좋습니다. 이렇게하려면 모델이 정의 된 파일 맨 위에서 관련 모델을 가져옵니다. 그런 다음 필요한 경우 다른 모델 클래스를 참조하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="12343c40f18ca7655192d4ea8976d4b128d77726" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible &amp;ndash; and preferable &amp;ndash; to organize templates in subdirectories inside each directory containing templates. The convention is to make a subdirectory for each Django app, with subdirectories within those subdirectories as needed.</source>
          <target state="translated">템플릿을 포함하는 각 디렉토리 내의 하위 디렉토리에 템플릿을 구성하는 것이 가능하고 바람직합니다. 규칙은 필요에 따라 해당 서브 디렉토리 내에 서브 디렉토리가있는 각 Django 앱의 서브 디렉토리를 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="25cfa1772c80752eed913282aa2ef519cdb812ab" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible that a request can come in via POST with an empty &lt;code&gt;POST&lt;/code&gt; dictionary &amp;ndash; if, say, a form is requested via the POST HTTP method but does not include form data. Therefore, you shouldn&amp;rsquo;t use &lt;code&gt;if request.POST&lt;/code&gt; to check for use of the POST method; instead, use &lt;code&gt;if request.method ==
&quot;POST&quot;&lt;/code&gt; (see &lt;a href=&quot;#django.http.HttpRequest.method&quot;&gt;&lt;code&gt;HttpRequest.method&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">빈 &lt;code&gt;POST&lt;/code&gt; 사전을 사용하여 POST를 통해 요청을 수신 할 수 있습니다. 예를 들어 양식이 POST HTTP 메소드를 통해 요청되지만 양식 데이터는 포함되지 않습니다. 따라서 POST 메소드 사용을 확인하기 위해 &lt;code&gt;if request.POST&lt;/code&gt; 를 사용해서는 안됩니다 . 대신, &lt;code&gt;if request.method == &quot;POST&quot;&lt;/code&gt; ( &lt;a href=&quot;#django.http.HttpRequest.method&quot;&gt; &lt;code&gt;HttpRequest.method&lt;/code&gt; &lt;/a&gt; 참조 )를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="564f1c720851eec7a9b48849d7c849a75a7a8146" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to customize that character, or omit it entirely, using the &lt;code&gt;label_suffix&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;label_suffix&lt;/code&gt; 매개 변수를 사용하여 해당 문자를 사용자 정의하거나 완전히 생략 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5f802f1d2017858d35732da049be5ea421bca251" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to declaratively remove a &lt;code&gt;Field&lt;/code&gt; inherited from a parent class by setting the name of the field to &lt;code&gt;None&lt;/code&gt; on the subclass. For example:</source>
          <target state="translated">서브 클래스 에서 필드 이름을 &lt;code&gt;None&lt;/code&gt; 으로 설정하여 부모 클래스에서 상속 된 &lt;code&gt;Field&lt;/code&gt; 를 선언적으로 제거 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f00faa120a59687d5cfacd633db612d462d80f79" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to declaratively remove a &lt;code&gt;Field&lt;/code&gt; inherited from a parent class by setting the name to be &lt;code&gt;None&lt;/code&gt; on the subclass.</source>
          <target state="translated">서브 클래스 에서 이름을 &lt;code&gt;None&lt;/code&gt; 으로 설정하여 부모 클래스에서 상속 된 &lt;code&gt;Field&lt;/code&gt; 를 선언적으로 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c5ebde0ae552dfd952abe1bc7920a0a46d1d725d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to have a URL pattern which captures named keyword arguments, and also passes arguments with the same names in its dictionary of extra arguments. When this happens, the arguments in the dictionary will be used instead of the arguments captured in the URL.</source>
          <target state="translated">명명 된 키워드 인수를 캡처하고 추가 인수 사전에 동일한 이름을 가진 인수를 전달하는 URL 패턴을 가질 수 있습니다. 이 경우 URL에서 캡처 된 인수 대신 사전의 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="154d81e5f92ae5b0cc201686b8eb92c861bf4cf0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to inherit from both &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;ModelForm&lt;/code&gt; simultaneously, however, you must ensure that &lt;code&gt;ModelForm&lt;/code&gt; appears first in the MRO. This is because these classes rely on different metaclasses and a class can only have one metaclass.</source>
          <target state="translated">&lt;code&gt;Form&lt;/code&gt; 과 &lt;code&gt;ModelForm&lt;/code&gt; 을 동시에 상속 할 수는 있지만 MRO에서 &lt;code&gt;ModelForm&lt;/code&gt; 이 먼저 표시 되도록해야합니다 . 이러한 클래스는 서로 다른 메타 클래스에 의존하고 클래스는 하나의 메타 클래스 만 가질 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="2d6080acb5e2b0d1d1c50068f3b2d31e59ea47c2" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to load templates from additional sources using custom template loaders. Custom &lt;code&gt;Loader&lt;/code&gt; classes should inherit from &lt;code&gt;django.template.loaders.base.Loader&lt;/code&gt; and define the &lt;code&gt;get_contents()&lt;/code&gt; and &lt;code&gt;get_template_sources()&lt;/code&gt; methods.</source>
          <target state="translated">사용자 정의 템플릿 로더를 사용하여 추가 소스에서 템플릿을로드 할 수 있습니다. 사용자 정의 &lt;code&gt;Loader&lt;/code&gt; 클래스는 &lt;code&gt;django.template.loaders.base.Loader&lt;/code&gt; 에서 상속 하고 &lt;code&gt;get_contents()&lt;/code&gt; 및 &lt;code&gt;get_template_sources()&lt;/code&gt; 메소드를 정의 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="69453e3cfadab898688cde4346b7c3203c55d089" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to store the tag results in a template variable rather than directly outputting it. This is done by using the &lt;code&gt;as&lt;/code&gt; argument followed by the variable name. Doing so enables you to output the content yourself where you see fit:</source>
          <target state="translated">태그 결과를 직접 출력하지 않고 템플릿 변수에 저장할 수 있습니다. 변수 이름 뒤에 &lt;code&gt;as&lt;/code&gt; 인수 를 사용하면 됩니다 . 그렇게하면 적절한 위치에 컨텐츠를 직접 출력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23d178eee9f824ef0def0504a80716cd71afb5a7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to subclass multiple forms, treating forms as mixins. In this example, &lt;code&gt;BeatleForm&lt;/code&gt; subclasses both &lt;code&gt;PersonForm&lt;/code&gt; and &lt;code&gt;InstrumentForm&lt;/code&gt; (in that order), and its field list includes the fields from the parent classes:</source>
          <target state="translated">양식을 믹스 인으로 처리하여 여러 양식을 서브 클래 싱 할 수 있습니다. 이 예제에서 &lt;code&gt;BeatleForm&lt;/code&gt; 은 &lt;code&gt;PersonForm&lt;/code&gt; 과 &lt;code&gt;InstrumentForm&lt;/code&gt; 을 순서대로 서브 클래스 화 하고 필드 목록에는 상위 클래스의 필드가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="092b661ba6e72b73027d8e3675fba552c7999588" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s pretty common to style form rows and fields that are required or have errors. For example, you might want to present required form rows in bold and highlight errors in red.</source>
          <target state="translated">필수이거나 오류가있는 양식 행과 필드의 스타일을 지정하는 것이 일반적입니다. 예를 들어, 필수 양식 행을 굵게 표시하고 오류를 빨간색으로 강조 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="116a53426c08ab9c723625b82855ecdb65d734a3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s recommended to leave the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;SESSION_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; setting on &lt;code&gt;True&lt;/code&gt; to prevent access to the stored data from JavaScript.</source>
          <target state="translated">JavaScript에서 저장된 데이터에 액세스하지 못하게 하려면 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;SESSION_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt; 설정을 &lt;code&gt;True&lt;/code&gt; 로 유지하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="2f926096c05f4b08baaf98d68511f1fb871d7cc9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s required for preserving APIs that rely on a globally available, implicitly configured engine. Any other use is strongly discouraged.</source>
          <target state="translated">전 세계적으로 사용 가능하고 암시 적으로 구성된 엔진에 의존하는 API를 보존하는 데 필요합니다. 다른 용도로는 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9c61e8f05c6a50e700712ba22de1bb672bbabc15" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s safe to use this filter on a string that has already gone through the &lt;a href=&quot;#std:templatefilter-urlencode&quot;&gt;&lt;code&gt;urlencode&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="translated">이미 &lt;a href=&quot;#std:templatefilter-urlencode&quot;&gt; &lt;code&gt;urlencode&lt;/code&gt; &lt;/a&gt; 필터를 거친 문자열에이 필터를 사용하는 것이 안전합니다 .</target>
        </trans-unit>
        <trans-unit id="90004f94d411477597f8fcfc53e05fdd4c25bf29" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to determine at startup time whether a piece of middleware should be used. In these cases, your middleware&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method may raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MiddlewareNotUsed&quot;&gt;&lt;code&gt;MiddlewareNotUsed&lt;/code&gt;&lt;/a&gt;. Django will then remove that middleware from the middleware process and log a debug message to the &lt;a href=&quot;../logging#django-request-logger&quot;&gt;django.request&lt;/a&gt; logger when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">시작시 미들웨어를 사용해야하는지 여부를 판별하는 것이 유용한 경우가 있습니다. 이 경우 미들웨어의 &lt;code&gt;__init__()&lt;/code&gt; 메소드가 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MiddlewareNotUsed&quot;&gt; &lt;code&gt;MiddlewareNotUsed&lt;/code&gt; 를 발생&lt;/a&gt; 시킬 수 있습니다 . 그러면 Django는 미들웨어 프로세스에서 해당 미들웨어를 제거하고 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 일 때 디버그 메시지를 &lt;a href=&quot;../logging#django-request-logger&quot;&gt;django.request&lt;/a&gt; 로거에 기록 합니다.</target>
        </trans-unit>
        <trans-unit id="80aa528112e9e490aa5ed4ea2d9bc56ea614b01c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to pre-populate your database with hard-coded data when you&amp;rsquo;re first setting up an app. You can provide initial data with migrations or fixtures.</source>
          <target state="translated">앱을 처음 설정할 때 하드 코딩 된 데이터로 데이터베이스를 미리 채우는 것이 유용한 경우가 있습니다. 마이그레이션 또는 설비와 함께 초기 데이터를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5e2474881890462bed834b91681f711c82b24c9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s suggested, but not required, that the name of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field (&lt;code&gt;manufacturer&lt;/code&gt; in the example above) be the name of the model, lowercase. You can call the field whatever you want. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 필드 의 이름 ( 위의 예에서 &lt;code&gt;manufacturer&lt;/code&gt; )은 모델 이름 (소문자)이 권장되지만 필수는 아닙니다 . 원하는대로 필드를 호출 할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="cabb5fa7a2f760c58a8cc5008d218d9760bd2a65" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s suggested, but not required, that the name of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field (&lt;code&gt;manufacturer&lt;/code&gt; in the example above) be the name of the model, lowercase. You can, of course, call the field whatever you want. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 필드 의 이름 ( 위의 예에서 &lt;code&gt;manufacturer&lt;/code&gt; )은 모델의 이름 인 소문자로 제안하지만 필수는 아닙니다 . 물론 원하는대로 필드를 호출 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="22ccf51d0275c705c1c35c00156af244882b0ae3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s suggested, but not required, that the name of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;toppings&lt;/code&gt; in the example above) be a plural describing the set of related model objects.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 의 이름 ( 위의 예에서 &lt;code&gt;toppings&lt;/code&gt; )은 관련 모델 객체 세트를 설명하는 복수형이어야합니다.</target>
        </trans-unit>
        <trans-unit id="81b268cc70a442674129b98fc3845ba70970358f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s tailored to the database you&amp;rsquo;re using, so database-specific field types such as &lt;code&gt;auto_increment&lt;/code&gt; (MySQL), &lt;code&gt;serial&lt;/code&gt; (PostgreSQL), or &lt;code&gt;integer
primary key autoincrement&lt;/code&gt; (SQLite) are handled for you automatically. Same goes for the quoting of field names &amp;ndash; e.g., using double quotes or single quotes.</source>
          <target state="translated">사용중인 데이터베이스에 맞게 조정되므로 &lt;code&gt;auto_increment&lt;/code&gt; (MySQL), &lt;code&gt;serial&lt;/code&gt; (PostgreSQL) 또는 &lt;code&gt;integer primary key autoincrement&lt;/code&gt; (SQLite) 과 같은 데이터베이스 별 필드 유형 이 자동으로 처리됩니다. 큰 따옴표 나 작은 따옴표를 사용하는 것과 같이 필드 이름을 인용 할 때도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="36b04562da0b07d14aace68744d0353cd911e6bc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s tempting to write the above query as:</source>
          <target state="translated">위의 쿼리를 다음과 같이 작성하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="cfb033e6a7bb18748df2f3c0678baacc2715f25c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s unlikely that you will want to interact directly with &lt;code&gt;SchemaEditor&lt;/code&gt; as a normal developer using Django, but if you want to write your own migration system, or have more advanced needs, it&amp;rsquo;s a lot nicer than writing SQL.</source>
          <target state="translated">Django를 사용하여 일반 개발자로서 &lt;code&gt;SchemaEditor&lt;/code&gt; 와 직접 상호 작용하고 싶지는 않지만 자체 마이그레이션 시스템을 작성하거나 고급 요구가 필요한 경우 SQL을 작성하는 것보다 훨씬 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6170244348e1c89e69f473c30e48d1cb65ebc165" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s unnecessary to force &lt;code&gt;Exists&lt;/code&gt; to refer to a single column, since the columns are discarded and a boolean result is returned. Similarly, since ordering is unimportant within an SQL &lt;code&gt;EXISTS&lt;/code&gt; subquery and would only degrade performance, it&amp;rsquo;s automatically removed.</source>
          <target state="translated">열이 삭제되고 부울 결과가 반환되므로 &lt;code&gt;Exists&lt;/code&gt; 가 단일 열을 참조하도록 할 필요는 없습니다 . 마찬가지로 SQL &lt;code&gt;EXISTS&lt;/code&gt; 하위 쿼리 에서 순서는 중요하지 않으며 성능 만 저하 시키므로 자동으로 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="a28ef85bef282b391b1e7ce9e6a1cd15710ee46c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s used both by Django&amp;rsquo;s development server and in production WSGI deployments.</source>
          <target state="translated">Django의 개발 서버와 프로덕션 WSGI 배포 모두에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20a9f7ce4d688ce13e435ce877c2781fa2a5fda9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s used by the Django admin site, but you&amp;rsquo;re welcome to use it in your own code.</source>
          <target state="translated">Django 관리 사이트에서 사용하지만 자신의 코드에서 사용하는 것을 환영합니다.</target>
        </trans-unit>
        <trans-unit id="453336f7b66590d003cde9e690939c83ac37a292" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s used to optimize Django&amp;rsquo;s own test suite, which contains hundreds of models but no relations between models in different applications.</source>
          <target state="translated">Django의 자체 테스트 스위트를 최적화하는 데 사용됩니다. 여기에는 수백 개의 모델이 포함되어 있지만 다른 응용 프로그램의 모델 간에는 관계가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f92418ae3af49ec5210634e2bdaff7e544f90cc5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s worth repeating: &lt;strong&gt;reaching for alternatives to software you&amp;rsquo;re already using is never the first answer to performance problems&lt;/strong&gt;. When you reach this level of optimization, you need a formal benchmarking solution.</source>
          <target state="translated">반복 할 가치가 &lt;strong&gt;있습니다. 이미 사용중인 소프트웨어의 대안을 찾는 것이 성능 문제에 대한 첫 번째 답은 아닙니다&lt;/strong&gt; . 이 수준의 최적화에 도달하면 공식적인 벤치마킹 솔루션이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="73248e57635e9c9598528380f77d494c9f3a9bef" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s your responsibility to provide the html for the login template , called &lt;code&gt;registration/login.html&lt;/code&gt; by default. This template gets passed four template context variables:</source>
          <target state="translated">기본적으로 &lt;code&gt;registration/login.html&lt;/code&gt; 이라는 로그인 템플리트에 대한 html을 제공하는 것은 귀하의 책임 입니다. 이 템플릿에는 네 가지 템플릿 컨텍스트 변수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="6194af17afc43140b30fc03efe1a42a49325f5b3" translate="yes" xml:space="preserve">
          <source>Iterate over the file yielding &amp;ldquo;chunks&amp;rdquo; of a given size. &lt;code&gt;chunk_size&lt;/code&gt; defaults to 64 KB.</source>
          <target state="translated">주어진 크기의&amp;ldquo;청크&amp;rdquo;를 생성하는 파일을 반복합니다. &lt;code&gt;chunk_size&lt;/code&gt; 의 기본값은 64KB입니다.</target>
        </trans-unit>
        <trans-unit id="0de333b2cbf5d70dfa378153240a6390f38e295c" translate="yes" xml:space="preserve">
          <source>Iterate over the file yielding one line at a time.</source>
          <target state="translated">파일을 반복하여 한 번에 한 줄씩 만듭니다.</target>
        </trans-unit>
        <trans-unit id="64181e92073030143f46bbc584cc34cdb69c2178" translate="yes" xml:space="preserve">
          <source>Iterates over the points in a &lt;a href=&quot;#django.contrib.gis.gdal.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;, the rings in a &lt;a href=&quot;#django.contrib.gis.gdal.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt;, or the geometries in a &lt;a href=&quot;#django.contrib.gis.gdal.GeometryCollection&quot;&gt;&lt;code&gt;GeometryCollection&lt;/code&gt;&lt;/a&gt;. Not applicable to other geometry types.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; &lt;/a&gt; 의 포인트 , &lt;a href=&quot;#django.contrib.gis.gdal.Polygon&quot;&gt; &lt;code&gt;Polygon&lt;/code&gt; &lt;/a&gt; 의 링 또는 &lt;a href=&quot;#django.contrib.gis.gdal.GeometryCollection&quot;&gt; &lt;code&gt;GeometryCollection&lt;/code&gt; &lt;/a&gt; 의 형상을 반복합니다 . 다른 형상 유형에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3128c83b0869b9fd38f7441368e4805f2bc3963b" translate="yes" xml:space="preserve">
          <source>Iterating over a formset will render the forms in the order they were created. You can change this order by providing an alternate implementation for the &lt;code&gt;__iter__()&lt;/code&gt; method.</source>
          <target state="translated">폼 세트를 반복하면 폼이 작성된 순서대로 렌더링됩니다. &lt;code&gt;__iter__()&lt;/code&gt; 메소드에 대한 대체 구현을 제공하여이 순서를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f3c1b17abaffb29dddff6f5f30f721f95ee3092" translate="yes" xml:space="preserve">
          <source>Iterating relationship choices</source>
          <target state="translated">반복 관계 선택</target>
        </trans-unit>
        <trans-unit id="6f479cac5e7c5d3ad5f478dcb761f931ee9c46cf" translate="yes" xml:space="preserve">
          <source>Its default &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;application/json&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;code&gt;Content-Type&lt;/code&gt; 헤더는 &lt;code&gt;application/json&lt;/code&gt; 으로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ef72203a16f5dd6674a160c8f4b2342a36b91ae" translate="yes" xml:space="preserve">
          <source>Its default &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;em&gt;application/json&lt;/em&gt;.</source>
          <target state="translated">기본 &lt;code&gt;Content-Type&lt;/code&gt; 헤더는 &lt;em&gt;application / json으로&lt;/em&gt; 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="3c9c5647ed1e6b7f5146c076bc141e3b0a23011d" translate="yes" xml:space="preserve">
          <source>Its default implementation returns &lt;a href=&quot;#django.contrib.admin.ModelAdmin.sortable_by&quot;&gt;&lt;code&gt;sortable_by&lt;/code&gt;&lt;/a&gt; if it&amp;rsquo;s set, otherwise it defers to &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_display&quot;&gt;&lt;code&gt;get_list_display()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 구현은 설정된 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.sortable_by&quot;&gt; &lt;code&gt;sortable_by&lt;/code&gt; 를&lt;/a&gt; 리턴 하고 그렇지 않으면 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_display&quot;&gt; &lt;code&gt;get_list_display()&lt;/code&gt; &lt;/a&gt; 지연 시킵니다.</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="fcf29f6cad3232704b33e962ef5194fad3b6817b" translate="yes" xml:space="preserve">
          <source>Japan</source>
          <target state="translated">Japan</target>
        </trans-unit>
        <trans-unit id="3e794545b69f251b3029e4944b37bdd0893d7ebc" translate="yes" xml:space="preserve">
          <source>JavaScript code doesn&amp;rsquo;t have access to &lt;code&gt;.po&lt;/code&gt; or &lt;code&gt;.mo&lt;/code&gt; files; they need to be delivered by the server.</source>
          <target state="translated">JavaScript 코드는 &lt;code&gt;.po&lt;/code&gt; 또는 &lt;code&gt;.mo&lt;/code&gt; 파일에 액세스 할 수 없습니다 . 서버에서 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="16a7b6649b485d9113794ac7d0b0b25e428c33aa" translate="yes" xml:space="preserve">
          <source>JavaScript code doesn&amp;rsquo;t have access to a &lt;code&gt;gettext&lt;/code&gt; implementation.</source>
          <target state="translated">JavaScript 코드는 &lt;code&gt;gettext&lt;/code&gt; 구현에 액세스 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="09dc489aa0b5f5532a33d3276d7a485bd5f67e2d" translate="yes" xml:space="preserve">
          <source>JavaScript customizations in the admin</source>
          <target state="translated">관리자의 JavaScript 사용자 정의</target>
        </trans-unit>
        <trans-unit id="fce39e0711bfdc751337a274c52d094f106ca490" translate="yes" xml:space="preserve">
          <source>Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query:</source>
          <target state="translated">결합 체인은 필요한만큼 깊을 수 있습니다. 예를 들어, 판매 가능한 책 중 가장 어린 저자의 나이를 추출하려면 다음과 같이 쿼리를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="369d197d5e95511bed79dd647091cfb1ff0732bf" translate="yes" xml:space="preserve">
          <source>Join the &lt;code&gt;#geodjango&lt;/code&gt; IRC channel on Freenode. Please be patient and polite &amp;ndash; while you may not get an immediate response, someone will attempt to answer your question as soon as they see it.</source>
          <target state="translated">Freenode 에서 &lt;code&gt;#geodjango&lt;/code&gt; IRC 채널에 가입하십시오 . 인내심을 갖고 예의 바르게 행동하십시오 &amp;ndash; 즉각적인 답변을받지 못할 수도 있지만 누군가가 질문을 보자 마자 답변을 시도 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="09ad30957afcec67d4756a8b85b0dff0032054c3" translate="yes" xml:space="preserve">
          <source>Joins a list with a string, like Python&amp;rsquo;s &lt;code&gt;str.join(list)&lt;/code&gt;</source>
          <target state="translated">Python의 &lt;code&gt;str.join(list)&lt;/code&gt; 과 같은 문자열로 목록을 조인합니다.</target>
        </trans-unit>
        <trans-unit id="d9d2e961ad458e7666b83ecad02e5ba87d5f28bf" translate="yes" xml:space="preserve">
          <source>Joins and aggregates</source>
          <target state="translated">조인 및 집계</target>
        </trans-unit>
        <trans-unit id="4414f263334ff3637fe5ef567af2d40056a830d8" translate="yes" xml:space="preserve">
          <source>Jumps you from any page to the documentation for the view that generates that page.</source>
          <target state="translated">모든 페이지에서 해당 페이지를 생성하는보기의 문서로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ddc4426c8e81f8c006f5531c90d6d6f6c895431d" translate="yes" xml:space="preserve">
          <source>Just as &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; accepts the names of the content-type and object-ID fields as arguments, so too does &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;; if the model which has the generic foreign key is using non-default names for those fields, you must pass the names of the fields when setting up a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt; to it. For example, if the &lt;code&gt;TaggedItem&lt;/code&gt; model referred to above used fields named &lt;code&gt;content_type_fk&lt;/code&gt; and &lt;code&gt;object_primary_key&lt;/code&gt; to create its generic foreign key, then a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt; back to it would need to be defined like so:</source>
          <target state="translated">것처럼 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; 가&lt;/a&gt; 인수로 콘텐츠 유형 및 객체 ID 필드의 이름을 받아, 그래서 너무하지 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; 을&lt;/a&gt; ; 일반 외래 키가있는 모델이 해당 필드에 기본 이름이 아닌 이름을 사용하는 경우 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; &lt;/a&gt; 을 설정할 때 필드 이름을 전달해야 합니다. 예를 들어, 위에서 언급 된 &lt;code&gt;TaggedItem&lt;/code&gt; 모델이 &lt;code&gt;content_type_fk&lt;/code&gt; 및 &lt;code&gt;object_primary_key&lt;/code&gt; 라는 이름의 필드 를 사용하여 일반 외래 키를 작성하는 경우 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; 을&lt;/a&gt; 다음 과 같이 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="1e413dffa03320c671fc31e6cb89283fb49b6d92" translate="yes" xml:space="preserve">
          <source>Just as the &lt;code&gt;login_required&lt;/code&gt; decorator, this mixin does NOT check the &lt;code&gt;is_active&lt;/code&gt; flag on a user, but the default &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; reject inactive users.</source>
          <target state="translated">그냥 같이 &lt;code&gt;login_required&lt;/code&gt; 장식이 믹스 인은 확인하지 않습니다 &lt;code&gt;is_active&lt;/code&gt; 사용자에 플래그를하지만, 기본 &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 은&lt;/a&gt; 비활성 사용자를 거부합니다.</target>
        </trans-unit>
        <trans-unit id="de70aed3380b12491dedb45769ad91fb49e553be" translate="yes" xml:space="preserve">
          <source>Just as with Python&amp;rsquo;s subclassing, it&amp;rsquo;s possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;) appears in will be the one that is used; for example, this means that if multiple parents contain a &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class, only the first one is going to be used, and all others will be ignored.</source>
          <target state="translated">파이썬의 서브 클래 싱과 마찬가지로 장고 모델은 여러 부모 모델로부터 상속받을 수 있습니다. 일반적인 파이썬 이름 확인 규칙이 적용됩니다. 특정 이름 (예 : &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; )이 나타나는 첫 번째 기본 클래스 가 사용됩니다. 예를 들어, 여러 부모가 &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; 클래스를 포함하는 경우 첫 번째 클래스 만 사용되며 나머지는 모두 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c4940cb973e951c23fc5b25e3c6c874837d4c5a9" translate="yes" xml:space="preserve">
          <source>Just be aware that this logic will disable the signals whenever fixtures are deserialized, not just during &lt;code&gt;loaddata&lt;/code&gt;.</source>
          <target state="translated">이 로직은 &lt;code&gt;loaddata&lt;/code&gt; 동안뿐만 아니라 조명기가 비 직렬화 될 때마다 신호를 비활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="ddab42e3dcb6c903e2f4186535cb27873150c70a" translate="yes" xml:space="preserve">
          <source>Just for completeness, these are the corresponding fragments of the resulting &lt;code&gt;.po&lt;/code&gt; file:</source>
          <target state="translated">완성도를 위해 다음은 결과 &lt;code&gt;.po&lt;/code&gt; 파일 의 해당 조각입니다 .</target>
        </trans-unit>
        <trans-unit id="01310d24cc2563fbb23357235b729b519dca1534" translate="yes" xml:space="preserve">
          <source>Just for completeness, this is the corresponding fragment of the resulting &lt;code&gt;.po&lt;/code&gt; file:</source>
          <target state="translated">완전성을 위해 이것은 결과 &lt;code&gt;.po&lt;/code&gt; 파일 의 해당 조각입니다 .</target>
        </trans-unit>
        <trans-unit id="e6cf235d242effb3cde80d1d3c4a76eb03cbc760" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; provides a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_urls&quot;&gt;&lt;code&gt;get_urls()&lt;/code&gt;&lt;/a&gt; method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_urls&quot;&gt;&lt;code&gt;get_urls()&lt;/code&gt;&lt;/a&gt; method to include a pattern for your new view.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; 는&lt;/a&gt; 제공 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_urls&quot;&gt; &lt;code&gt;get_urls()&lt;/code&gt; &lt;/a&gt; 사이트에 대한 추가 뷰를 정의하는 데 대체 할 수 있습니다 방법을. 관리 사이트에 새보기를 추가하려면 기본 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_urls&quot;&gt; &lt;code&gt;get_urls()&lt;/code&gt; &lt;/a&gt; 메소드를 확장 하여 새보기에 대한 패턴을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="1958cb9d96b5b5be5f6e75b1b2cd4481da5abfe0" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt; is only available on &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;s where &lt;code&gt;null=True&lt;/code&gt; and it also accepts the &lt;code&gt;bulk&lt;/code&gt; keyword argument.</source>
          <target state="translated">그냥 같이 &lt;code&gt;remove()&lt;/code&gt; , &lt;code&gt;clear()&lt;/code&gt; 에서만 사용할 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 의 경우 &lt;code&gt;null=True&lt;/code&gt; 과도 받아 &lt;code&gt;bulk&lt;/code&gt; 키워드 인수를.</target>
        </trans-unit>
        <trans-unit id="1e99592c259163ce6dbd69040fb145ee105a4073" translate="yes" xml:space="preserve">
          <source>Just like a &lt;a href=&quot;#django.forms.ChoiceField&quot;&gt;&lt;code&gt;ChoiceField&lt;/code&gt;&lt;/a&gt;, except &lt;a href=&quot;#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt; takes two extra arguments, &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt;&lt;code&gt;coerce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.TypedChoiceField&quot;&gt; &lt;code&gt;TypedChoiceField&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt; &lt;code&gt;coerce&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt; 두 개의 추가 인수를 취 한다는 점을 제외 하면 &lt;a href=&quot;#django.forms.ChoiceField&quot;&gt; &lt;code&gt;ChoiceField&lt;/code&gt; &lt;/a&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="22b0b87bee7c21e20da396fc1d6d1687daac3247" translate="yes" xml:space="preserve">
          <source>Just like a &lt;a href=&quot;#django.forms.MultipleChoiceField&quot;&gt;&lt;code&gt;MultipleChoiceField&lt;/code&gt;&lt;/a&gt;, except &lt;a href=&quot;#django.forms.TypedMultipleChoiceField&quot;&gt;&lt;code&gt;TypedMultipleChoiceField&lt;/code&gt;&lt;/a&gt; takes two extra arguments, &lt;code&gt;coerce&lt;/code&gt; and &lt;code&gt;empty_value&lt;/code&gt;.</source>
          <target state="translated">그냥 같은 &lt;a href=&quot;#django.forms.MultipleChoiceField&quot;&gt; &lt;code&gt;MultipleChoiceField&lt;/code&gt; &lt;/a&gt; 제외 &lt;a href=&quot;#django.forms.TypedMultipleChoiceField&quot;&gt; &lt;code&gt;TypedMultipleChoiceField&lt;/code&gt; &lt;/a&gt; 이 개 여분의 인수, 소요 &lt;code&gt;coerce&lt;/code&gt; 및 &lt;code&gt;empty_value&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="4ce399875d14fc7e29388d5d484a88d69f11646e" translate="yes" xml:space="preserve">
          <source>Just like its parent, you can use it to write tests that involve running the code under test and consuming it with testing tools through HTTP (e.g. Selenium, PhantomJS, etc.), because of which it&amp;rsquo;s needed that the static assets are also published.</source>
          <target state="translated">부모와 마찬가지로 테스트를 통해 코드를 실행하고 HTTP를 통한 테스트 도구 (예 : Selenium, PhantomJS 등)를 사용하여 테스트를 작성하는 데 정적 자산도 게시해야하는 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3f6a81f08cd9496daefb06e9bff0b819aed3764" translate="yes" xml:space="preserve">
          <source>Just like normal form validation, model form validation is triggered implicitly when calling &lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt; or accessing the &lt;a href=&quot;../../ref/forms/api#django.forms.Form.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; attribute and explicitly when calling &lt;code&gt;full_clean()&lt;/code&gt;, although you will typically not use the latter method in practice.</source>
          <target state="translated">일반적인 양식 유효성 검사와 마찬가지로 &lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; &lt;/a&gt; 호출 하거나 &lt;a href=&quot;../../ref/forms/api#django.forms.Form.errors&quot;&gt; &lt;code&gt;errors&lt;/code&gt; &lt;/a&gt; 속성에 액세스 할 때 그리고 명시 적으로 &lt;code&gt;full_clean()&lt;/code&gt; 호출 할 때 모델 양식 유효성 검사가 암시 적으로 트리거 되지만 실제로는 후자의 방법을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c06c66c76254d542b0c24ce243a1c9fe4392a7fb" translate="yes" xml:space="preserve">
          <source>Just like templates, we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our static files directly in &lt;code&gt;polls/static&lt;/code&gt; (rather than creating another &lt;code&gt;polls&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will choose the first static file it finds whose name matches, and if you had a static file with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those static files inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">그냥 템플릿처럼, 우리는 &lt;em&gt;수도&lt;/em&gt; 에서 직접 우리의 정적 파일을 넣어 멀리 얻을 수있을 &lt;code&gt;polls/static&lt;/code&gt; (보다는 다른 만들 &lt;code&gt;polls&lt;/code&gt; 하위 디렉토리를)하지만 실제로 나쁜 아이디어가 될 것입니다. Django는 이름이 일치하는 첫 번째 정적 파일을 선택하고 &lt;em&gt;다른&lt;/em&gt; 응용 프로그램 에서 동일한 이름을 가진 정적 파일 이 있으면 Django는 이들을 구별 할 수 없습니다. Django가 올바른 것을 가리킬 수 있어야하며,이를 보장하는 가장 좋은 방법은 &lt;em&gt;이름을 지정&lt;/em&gt; 하는 것입니다. 즉, 정적 파일을 응용 프로그램 자체의 &lt;em&gt;다른&lt;/em&gt; 디렉토리 에 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="7505f9431a0039955176ba7cfd1b33e5b3abbe7f" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; method, permission names take the form &lt;code&gt;&quot;&amp;lt;app label&amp;gt;.&amp;lt;permission codename&amp;gt;&quot;&lt;/code&gt; (i.e. &lt;code&gt;polls.add_choice&lt;/code&gt; for a permission on a model in the &lt;code&gt;polls&lt;/code&gt; application).</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt; 메서드 와 마찬가지로 권한 이름은 &lt;code&gt;&quot;&amp;lt;app label&amp;gt;.&amp;lt;permission codename&amp;gt;&quot;&lt;/code&gt; 형식을 취합니다 (예 : &lt;code&gt;polls&lt;/code&gt; 애플리케이션 의 모델에 대한 권한에 대한 &lt;code&gt;polls.add_choice&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9c7289d3c27d2fa895a412e9d11cd8822f7f37b6" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; method, permission names take the form &lt;code&gt;&quot;&amp;lt;app label&amp;gt;.&amp;lt;permission codename&amp;gt;&quot;&lt;/code&gt; (i.e. &lt;code&gt;polls.can_vote&lt;/code&gt; for a permission on a model in the &lt;code&gt;polls&lt;/code&gt; application).</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt; 메소드 와 마찬가지로 권한 이름의 형식은 &lt;code&gt;&quot;&amp;lt;app label&amp;gt;.&amp;lt;permission codename&amp;gt;&quot;&lt;/code&gt; 입니다 (즉, &lt;code&gt;polls.can_vote&lt;/code&gt; 는 &lt;code&gt;polls&lt;/code&gt; 응용 프로그램 의 모델에 대한 권한 ).</target>
        </trans-unit>
        <trans-unit id="83d2469802382e4391a866a9fb73e4fc396b25f5" translate="yes" xml:space="preserve">
          <source>Just like the static files, we &lt;em&gt;could&lt;/em&gt; have all our templates together, in one big templates directory, and it would work perfectly well. However, templates that belong to a particular application should be placed in that application&amp;rsquo;s template directory (e.g. &lt;code&gt;polls/templates&lt;/code&gt;) rather than the project&amp;rsquo;s (&lt;code&gt;templates&lt;/code&gt;). We&amp;rsquo;ll discuss in more detail in the &lt;a href=&quot;reusable-apps&quot;&gt;reusable apps tutorial&lt;/a&gt;&lt;em&gt;why&lt;/em&gt; we do this.</source>
          <target state="translated">정적 파일과 마찬가지로 하나의 큰 템플릿 디렉토리에 모든 템플릿을 함께 &lt;em&gt;사용할 수&lt;/em&gt; 있으며 완벽하게 작동합니다. 그러나 특정 응용 프로그램에 속하는 템플릿 은 프로젝트 ( &lt;code&gt;templates&lt;/code&gt; )가 아닌 해당 응용 프로그램의 템플릿 디렉토리 (예 : &lt;code&gt;polls/templates&lt;/code&gt; )에 있어야합니다 . &lt;a href=&quot;reusable-apps&quot;&gt;재사용 가능한 앱 튜토리얼에서 &lt;/a&gt;&lt;em&gt;왜 그렇게하는지&lt;/em&gt; 자세히 설명 하겠습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d9eb249d0ce5416cf8a379b2da632734988f8a3a" translate="yes" xml:space="preserve">
          <source>Just like when using a normal &lt;code&gt;Form&lt;/code&gt;, each field in a formset&amp;rsquo;s forms may include HTML attributes such as &lt;code&gt;maxlength&lt;/code&gt; for browser validation. However, form fields of formsets won&amp;rsquo;t include the &lt;code&gt;required&lt;/code&gt; attribute as that validation may be incorrect when adding and deleting forms.</source>
          <target state="translated">일반 &lt;code&gt;Form&lt;/code&gt; 을 사용할 때와 마찬가지로 양식 세트 양식 의 각 필드에는 브라우저 유효성 검사를위한 &lt;code&gt;maxlength&lt;/code&gt; 와 같은 HTML 속성이 포함될 수 있습니다 . 그러나 양식을 추가하거나 삭제할 때 유효성 검사가 올바르지 않을 수 있으므로 양식 세트의 양식 필드에는 &lt;code&gt;required&lt;/code&gt; 속성이 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d29395b2e5e9f3683720df2e4f68ed2605ac0624" translate="yes" xml:space="preserve">
          <source>Just like with &lt;a href=&quot;#translator-comments&quot;&gt;Python code&lt;/a&gt;, these notes for translators can be specified using comments, either with the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">단지와 마찬가지로 &lt;a href=&quot;#translator-comments&quot;&gt;파이썬 코드&lt;/a&gt; , 번역에 대한이 노트는 중 하나와, 주석을 사용하여 지정할 수 있습니다 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-comment&quot;&gt; &lt;code&gt;comment&lt;/code&gt; &lt;/a&gt; 태그 :</target>
        </trans-unit>
        <trans-unit id="6840dc42a3514ed5409fad17eb45a2dde935b7fb" translate="yes" xml:space="preserve">
          <source>Just like with &lt;code&gt;ModelForms&lt;/code&gt;, by default the &lt;code&gt;clean()&lt;/code&gt; method of a &lt;code&gt;ModelFormSet&lt;/code&gt; will validate that none of the items in the formset violate the unique constraints on your model (either &lt;code&gt;unique&lt;/code&gt;, &lt;code&gt;unique_together&lt;/code&gt; or &lt;code&gt;unique_for_date|month|year&lt;/code&gt;). If you want to override the &lt;code&gt;clean()&lt;/code&gt; method on a &lt;code&gt;ModelFormSet&lt;/code&gt; and maintain this validation, you must call the parent class&amp;rsquo;s &lt;code&gt;clean&lt;/code&gt; method:</source>
          <target state="translated">와 마찬가지로 &lt;code&gt;ModelForms&lt;/code&gt; , 기본적으로 &lt;code&gt;clean()&lt;/code&gt; (A)의 방법 &lt;code&gt;ModelFormSet&lt;/code&gt; 이 (중 하나의 formset에있는 항목 중 하나에 해당하지 유효성을 검사하지 않습니다 모델에 고유 제한 조건을 위반하는 &lt;code&gt;unique&lt;/code&gt; , &lt;code&gt;unique_together&lt;/code&gt; 또는 &lt;code&gt;unique_for_date|month|year&lt;/code&gt; ). &lt;code&gt;ModelFormSet&lt;/code&gt; 에서 &lt;code&gt;clean()&lt;/code&gt; 메소드 를 대체 하고이 유효성 검증을 유지하려면 상위 클래스의 &lt;code&gt;clean&lt;/code&gt; 메소드를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6abd3775005f0aef3b58a9511045767bf75536c1" translate="yes" xml:space="preserve">
          <source>Just like you would do in &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; you should provide a lowercase verbose name text for the relation as Django will automatically titlecase it when required.</source>
          <target state="translated">당신이에서하는 것처럼 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; 장고가 자동으로 타이틀 케이스 필요한 때 당신은 관계에 대한 이름 텍스트 자세한 소문자를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="4552dc59351c35a92143d1798b6cb8566638b9ec" translate="yes" xml:space="preserve">
          <source>KML is an XML language focused on geographic visualization &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. &lt;code&gt;KMLSitemap&lt;/code&gt; and its compressed counterpart &lt;code&gt;KMZSitemap&lt;/code&gt; allow you to present geolocated data in a machine-readable format.</source>
          <target state="translated">KML은 지리적 시각화에 중점을 둔 XML 언어입니다 &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; . &lt;code&gt;KMLSitemap&lt;/code&gt; 및 압축 된 &lt;code&gt;KMZSitemap&lt;/code&gt; 을 사용하면 위치 정보를 기계 판독 가능 형식으로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5d3425cd39c677fd086d00da0b180224309c02d" translate="yes" xml:space="preserve">
          <source>Keep and/or add any entries in this list if you need Django to &lt;a href=&quot;#password-upgrades&quot;&gt;upgrade passwords&lt;/a&gt;.</source>
          <target state="translated">Django가 &lt;a href=&quot;#password-upgrades&quot;&gt;비밀번호&lt;/a&gt; 를 업그레이드 해야하는 경우이 목록에 항목을 유지하거나 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="742aa74832a6e4eeffec8dce24ca986cd98d8c09" translate="yes" xml:space="preserve">
          <source>Keep in mind that &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; uses any default related model ordering that has been defined. You might have to explicitly order by the relation &lt;code&gt;_id&lt;/code&gt; or referenced field to make sure the &lt;code&gt;DISTINCT ON&lt;/code&gt; expressions match those at the beginning of the &lt;code&gt;ORDER BY&lt;/code&gt; clause. For example, if the &lt;code&gt;Blog&lt;/code&gt; model defined an &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="translated">있다는 사실을 숙지 &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 정의되어있는 기본 관련 모델의 순서를 사용합니다. &lt;code&gt;DISTINCT ON&lt;/code&gt; 표현식이 &lt;code&gt;ORDER BY&lt;/code&gt; 절 시작 부분의 표현식과 일치 하도록 관계 &lt;code&gt;_id&lt;/code&gt; 또는 참조 필드 를 명시 적으로 순서화해야 할 수도 있습니다 . 예를 들어, &lt;code&gt;Blog&lt;/code&gt; 모델 이 &lt;code&gt;name&lt;/code&gt; 으로 &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt; 을 정의한 경우 :</target>
        </trans-unit>
        <trans-unit id="7459a01ee1258dd537399c8de7e686ccdee573bc" translate="yes" xml:space="preserve">
          <source>Keep in mind that each of these values can be an expression.</source>
          <target state="translated">이러한 각 값은 표현식이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16a533618d8eaf3b030222e4a118ed6bae06ff24" translate="yes" xml:space="preserve">
          <source>Keep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the &lt;code&gt;data&lt;/code&gt; dictionary contains a key named &lt;code&gt;'items'&lt;/code&gt;, &lt;code&gt;data.items&lt;/code&gt; will return &lt;code&gt;data['items']&lt;/code&gt; instead of &lt;code&gt;data.items()&lt;/code&gt;. Avoid adding keys that are named like dictionary methods if you want to use those methods in a template (&lt;code&gt;items&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, etc.). Read more about the lookup order of the dot operator in the &lt;a href=&quot;language#template-variables&quot;&gt;documentation of template variables&lt;/a&gt;.</source>
          <target state="translated">도트 연산자의 경우 사전 키 조회가 메소드 조회보다 우선합니다. 따라서, 만약 &lt;code&gt;data&lt;/code&gt; 사전이라는 키 포함 &lt;code&gt;'items'&lt;/code&gt; , &lt;code&gt;data.items&lt;/code&gt; 가 반환 &lt;code&gt;data['items']&lt;/code&gt; 대신 &lt;code&gt;data.items()&lt;/code&gt; . 템플리트에서 해당 메소드를 사용하려면 사전 메소드와 같은 이름의 키 ( &lt;code&gt;items&lt;/code&gt; , &lt;code&gt;values&lt;/code&gt; , &lt;code&gt;keys&lt;/code&gt; 등)를 추가하지 마십시오 . &lt;a href=&quot;language#template-variables&quot;&gt;템플릿 변수 문서&lt;/a&gt; 에서 도트 연산자의 조회 순서에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="77e9d273542c1bb70193eff1962287317d2800d3" translate="yes" xml:space="preserve">
          <source>Keep in mind that this will, whenever possible, be executed purely in SQL, and so the &lt;code&gt;delete()&lt;/code&gt; methods of individual object instances will not necessarily be called during the process. If you&amp;rsquo;ve provided a custom &lt;code&gt;delete()&lt;/code&gt; method on a model class and want to ensure that it is called, you will need to &amp;ldquo;manually&amp;rdquo; delete instances of that model (e.g., by iterating over a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and calling &lt;code&gt;delete()&lt;/code&gt; on each object individually) rather than using the bulk &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 가능할 때마다 순수하게 SQL로 실행되므로 프로세스 중에 개별 객체 인스턴스 의 &lt;code&gt;delete()&lt;/code&gt; 메소드가 반드시 호출되는 것은 아님 을 명심하십시오 . 모델 클래스에 커스텀 &lt;code&gt;delete()&lt;/code&gt; 메소드를 제공하고 호출되었는지 확인하려면 해당 모델의 인스턴스를 &quot;수동으로&quot;삭제해야합니다 (예 : &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 반복 및 &lt;code&gt;delete()&lt;/code&gt; 호출 ) . &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 의 대량 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하지 않고 각 객체를 개별적으로) .</target>
        </trans-unit>
        <trans-unit id="83814bcad4f812320613b08460a501a47d3a6c5e" translate="yes" xml:space="preserve">
          <source>Keep this caching behavior in mind, because it may bite you if you don&amp;rsquo;t use your &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;s correctly. For example, the following will create two &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;s, evaluate them, and throw them away:</source>
          <target state="translated">이 캐싱 동작을 명심하십시오. &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 을&lt;/a&gt; 올바르게 사용하지 않으면 물릴 수 있습니다 . 예를 들어, 다음은 두 개의 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 작성 하고 평가하여 버립니다.</target>
        </trans-unit>
        <trans-unit id="b24c7b24e7c1e67f6e64f8bbf3e3867d93a0e6c0" translate="yes" xml:space="preserve">
          <source>Keep this in mind when creating your own custom fields. The Django &lt;code&gt;Field&lt;/code&gt; subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don&amp;rsquo;t worry &amp;ndash; it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:</source>
          <target state="translated">사용자 정의 필드를 만들 때이 점을 명심하십시오. 작성하는 Django &lt;code&gt;Field&lt;/code&gt; 서브 클래스는 Python 인스턴스와 데이터베이스 / 시리얼 라이저 값 사이를 다양한 방식으로 변환하는 메커니즘을 제공합니다 (예 : 값 저장과 조회에 값 사용에 차이가 있음). 이것이 조금 까다 롭더라도 걱정하지 마십시오. 아래 예에서 더 명확 해집니다. 사용자 정의 필드를 원할 때 종종 두 개의 클래스를 작성하게됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
