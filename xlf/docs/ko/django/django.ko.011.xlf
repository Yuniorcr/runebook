<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="19494074e0ce6b931ea15036d66465f2093b1be8" translate="yes" xml:space="preserve">
          <source>Now, open up &lt;code&gt;mysite/settings.py&lt;/code&gt;. It&amp;rsquo;s a normal Python module with module-level variables representing Django settings.</source>
          <target state="translated">이제 &lt;code&gt;mysite/settings.py&lt;/code&gt; 를 엽니 다 . Django 설정을 나타내는 모듈 수준 변수가있는 일반적인 Python 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="98eda674a05d556734adf8bf7b9aad9a8c246679" translate="yes" xml:space="preserve">
          <source>Now, our &lt;code&gt;my_callback&lt;/code&gt; function will be called each time a request finishes.</source>
          <target state="translated">이제 &lt;code&gt;my_callback&lt;/code&gt; 함수는 요청이 완료 될 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="23d68917d434ad1e2573241b966e9bc0d51a64c4" translate="yes" xml:space="preserve">
          <source>Now, run &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; again to create those model tables in your database:</source>
          <target state="translated">이제 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; 를&lt;/a&gt; 다시 실행 하여 데이터베이스에 해당 모델 테이블을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f6a08d106d707a8e05cb59e3d025bf0cc3bf4b7b" translate="yes" xml:space="preserve">
          <source>Now, the queryset &lt;code&gt;Author.objects.filter(name__upper=&quot;doe&quot;)&lt;/code&gt; will generate a case insensitive query like this:</source>
          <target state="translated">이제 queryset &lt;code&gt;Author.objects.filter(name__upper=&quot;doe&quot;)&lt;/code&gt; 는 다음과 같이 대소 문자를 구분하지 않는 쿼리를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="019b413f09c92b059447ea74193178d9efd7b8c3" translate="yes" xml:space="preserve">
          <source>Now, try logging in with the superuser account you created in the previous step. You should see the Django admin index page:</source>
          <target state="translated">이제 이전 단계에서 생성 한 수퍼 유저 계정으로 로그인하십시오. Django 관리자 색인 페이지가 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="32c93024bff623c4289921c3b56bd9587350c8d3" translate="yes" xml:space="preserve">
          <source>Number of Arguments</source>
          <target state="translated">인수 개수</target>
        </trans-unit>
        <trans-unit id="116820b9b73509743abf48a1acbf4dddd83206b7" translate="yes" xml:space="preserve">
          <source>Number of days in the given month.</source>
          <target state="translated">주어진 달의 일수.</target>
        </trans-unit>
        <trans-unit id="b04cb777db62302a02b9d216b8670b547ad281d0" translate="yes" xml:space="preserve">
          <source>Number of digits grouped together on the integer part of a number.</source>
          <target state="translated">숫자의 정수 부분에 그룹화 된 자릿수입니다.</target>
        </trans-unit>
        <trans-unit id="95f9d371df5b0ffd2cc6176a1143927d2193cd4f" translate="yes" xml:space="preserve">
          <source>Numeric index lookup</source>
          <target state="translated">숫자 인덱스 조회</target>
        </trans-unit>
        <trans-unit id="fb91068c51189c866a8e510b38ba4dfebf5d32bc" translate="yes" xml:space="preserve">
          <source>ODBC</source>
          <target state="translated">ODBC</target>
        </trans-unit>
        <trans-unit id="662cf8bb9e3967038266eb1080ea6e4e8ea74f98" translate="yes" xml:space="preserve">
          <source>OGC Well Known Text (WKT) (a string)</source>
          <target state="translated">OGC 잘 알려진 텍스트 (WKT) (문자열)</target>
        </trans-unit>
        <trans-unit id="290c05886911d59cc8d674f70d003a43dc32e88b" translate="yes" xml:space="preserve">
          <source>OGR Geometries</source>
          <target state="translated">OGR 도형</target>
        </trans-unit>
        <trans-unit id="5c43e7d2987cbaac40255a43821f767dd0fadb67" translate="yes" xml:space="preserve">
          <source>OGR Inspection</source>
          <target state="translated">OGR 검사</target>
        </trans-unit>
        <trans-unit id="a58dcb8d2f4fd78a7f09ddeec7fda1d4d46d2e33" translate="yes" xml:space="preserve">
          <source>OK, we have our Question admin page, but a &lt;code&gt;Question&lt;/code&gt; has multiple &lt;code&gt;Choice&lt;/code&gt;s, and the admin page doesn&amp;rsquo;t display choices.</source>
          <target state="translated">자, 우리는 질문 관리 페이지를 가지고 있지만 &lt;code&gt;Question&lt;/code&gt; 은 여러 &lt;code&gt;Choice&lt;/code&gt; 사항을 가지고 있으며 관리 페이지는 선택 사항을 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1cca936963e1216accc3c85fd19f87c15dacffe3" translate="yes" xml:space="preserve">
          <source>OR (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">OR ( &lt;code&gt;|&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="8399256020378bed8c3d8bb2e9c6938a2d24c39c" translate="yes" xml:space="preserve">
          <source>OSGeo4W</source>
          <target state="translated">OSGeo4W</target>
        </trans-unit>
        <trans-unit id="60967688a30a09eb09743791c704681612911e27" translate="yes" xml:space="preserve">
          <source>Object identity. Tests if two values are the same object. Example:</source>
          <target state="translated">객체 정체성. 두 값이 동일한 객체인지 테스트합니다. 예:</target>
        </trans-unit>
        <trans-unit id="1138c91041e87452fb65f50c02a6263c018cceb2" translate="yes" xml:space="preserve">
          <source>Object oriented techniques such as mixins (multiple inheritance) can be used to factor code into reusable components.</source>
          <target state="translated">mixin (다중 상속)과 같은 객체 지향 기술을 사용하여 코드를 재사용 가능한 구성 요소로 분해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c3732315e88d1732eac3020ab7ae166984c473a" translate="yes" xml:space="preserve">
          <source>Object-level permissions</source>
          <target state="translated">객체 수준 권한</target>
        </trans-unit>
        <trans-unit id="30cbdb8ef956e08ea0a8a7249b15ecf177cfcdce" translate="yes" xml:space="preserve">
          <source>Objects of protected types are preserved as-is when passed to &lt;code&gt;force_str(strings_only=True)&lt;/code&gt;.</source>
          <target state="translated">보호 된 유형의 객체는 &lt;code&gt;force_str(strings_only=True)&lt;/code&gt; 전달 될 때있는 그대로 유지됩니다 .</target>
        </trans-unit>
        <trans-unit id="89bdb07bfaaf9bcd97ef26d457c9af59af02d739" translate="yes" xml:space="preserve">
          <source>Obtaining an instance of an email backend</source>
          <target state="translated">이메일 백엔드 인스턴스 확보</target>
        </trans-unit>
        <trans-unit id="0ee2fe4c89c33b784169dc3bdcf688393360399b" translate="yes" xml:space="preserve">
          <source>Obtaining sufficient privileges</source>
          <target state="translated">충분한 권한 얻기</target>
        </trans-unit>
        <trans-unit id="2c1bf815eac71da64c2550da0f9bbeb63ce8fbb8" translate="yes" xml:space="preserve">
          <source>Occasionally you may want to turn off this feature for other reasons, and tell the template system to leave a variable uncalled no matter what. To do so, set a &lt;code&gt;do_not_call_in_templates&lt;/code&gt; attribute on the callable with the value &lt;code&gt;True&lt;/code&gt;. The template system then will act as if your variable is not callable (allowing you to access attributes of the callable, for example).</source>
          <target state="translated">때때로 다른 이유로이 기능을 끄고 템플릿 시스템에 변수에 관계없이 변수를 남기지 말라고 지시 할 수 있습니다. 그렇게하려면 , 호출 가능 파일에 &lt;code&gt;do_not_call_in_templates&lt;/code&gt; 속성을 &lt;code&gt;True&lt;/code&gt; 값으로 설정하십시오 . 그러면 템플릿 시스템은 변수를 호출 할 수없는 것처럼 작동합니다 (예를 들어 호출 가능한 속성에 액세스 할 수 있도록 허용).</target>
        </trans-unit>
        <trans-unit id="dc14009bad7130e19f5888d5db446a5a88ed6bba" translate="yes" xml:space="preserve">
          <source>Of course the &lt;code&gt;{% static %}&lt;/code&gt; template tag is not available for use in static files like your stylesheet which aren&amp;rsquo;t generated by Django. You should always use &lt;strong&gt;relative paths&lt;/strong&gt; to link your static files between each other, because then you can change &lt;a href=&quot;../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; (used by the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.</source>
          <target state="translated">물론 Django에서 생성하지 않은 스타일 시트와 같은 정적 파일 에는 &lt;code&gt;{% static %}&lt;/code&gt; 템플릿 태그를 사용할 수 없습니다. 정적 파일 에서 여러 경로를 수정하지 않고도 정적 파일을 URL을 생성하기 위해 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt; 템플릿 태그에서 사용하는 &lt;a href=&quot;../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 을 변경할 수 있기 때문에 항상 &lt;strong&gt;상대 경로&lt;/strong&gt; 를 사용 하여 정적 파일을 서로 연결해야 합니다.</target>
        </trans-unit>
        <trans-unit id="1bfb2ce81e6431b7c29d4d51f74af68b25c65c1b" translate="yes" xml:space="preserve">
          <source>Of course, as with all deployment tasks, the devil&amp;rsquo;s in the details. Every production setup will be a bit different, so you&amp;rsquo;ll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help.</source>
          <target state="translated">물론 모든 배포 작업과 마찬가지로 악마도 세부 사항에 있습니다. 모든 프로덕션 설정은 조금씩 다르므로 필요에 맞게 기본 개요를 조정해야합니다. 다음은 도움이 될 수있는 몇 가지 일반적인 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="3138d541751c54ebe3947e00d873e0cb999fdf5a" translate="yes" xml:space="preserve">
          <source>Of course, because &lt;code&gt;get_queryset()&lt;/code&gt; returns a &lt;code&gt;QuerySet&lt;/code&gt; object, you can use &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;exclude()&lt;/code&gt; and all the other &lt;code&gt;QuerySet&lt;/code&gt; methods on it. So these statements are all legal:</source>
          <target state="translated">물론 &lt;code&gt;get_queryset()&lt;/code&gt; 은 &lt;code&gt;QuerySet&lt;/code&gt; 객체를 반환 하기 때문에 &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;exclude()&lt;/code&gt; 및 기타 모든 &lt;code&gt;QuerySet&lt;/code&gt; 메소드를 사용할 수 있습니다. 따라서 이러한 진술은 모두 합법적입니다.</target>
        </trans-unit>
        <trans-unit id="339c185649670de6cadadffe96de30e0ea152c7b" translate="yes" xml:space="preserve">
          <source>Of course, if you don&amp;rsquo;t add the &lt;code&gt;related_query_name&lt;/code&gt;, you can do the same types of lookups manually:</source>
          <target state="translated">물론 &lt;code&gt;related_query_name&lt;/code&gt; 을 추가하지 않으면 동일한 유형의 조회를 수동으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ace8e5a78b0b07e276c3f79bec3e8c57d8d2cf9" translate="yes" xml:space="preserve">
          <source>Of course, if you don&amp;rsquo;t use the database cache backend, you don&amp;rsquo;t need to worry about providing routing instructions for the database cache model.</source>
          <target state="translated">물론 데이터베이스 캐시 백엔드를 사용하지 않으면 데이터베이스 캐시 모델에 대한 라우팅 지침을 제공 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="527c38a6fe862bcf884025c788e8189ecf445b95" translate="yes" xml:space="preserve">
          <source>Of course, it isn&amp;rsquo;t enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters and formatters to ensure that logging output is output in a useful way.</source>
          <target state="translated">물론 로깅 호출을 코드에 넣는 것만으로는 충분하지 않습니다. 또한 로깅 출력이 유용한 방식으로 출력되도록 로거, 핸들러, 필터 및 포맷터를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="fcc549ed333af5c6dc1f30c1549598ffa992a9e4" translate="yes" xml:space="preserve">
          <source>Of course, it&amp;rsquo;s ugly to hard-code the site IDs like that. This sort of hard-coding is best for hackish fixes that you need done quickly. The cleaner way of accomplishing the same thing is to check the current site&amp;rsquo;s domain:</source>
          <target state="translated">물론, 그런 사이트 ID를 하드 코딩하는 것은 추악합니다. 이러한 종류의 하드 코딩은 신속하게 수행해야하는 해시 수정에 가장 적합합니다. 동일한 작업을 수행하는 더 확실한 방법은 현재 사이트의 도메인을 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="30da449e73eca2c680c3454cfd47b5e1c988d5a8" translate="yes" xml:space="preserve">
          <source>Of course, specifying a custom reverse manager also enables you to call its custom methods:</source>
          <target state="translated">물론 사용자 정의 리버스 관리자를 지정하면 해당 사용자 정의 메소드를 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3559c4a540af23819f57c71ccbe9f2efbc63b105" translate="yes" xml:space="preserve">
          <source>Of course, the &lt;code&gt;best_pizza&lt;/code&gt; relationship could also be fetched using &lt;code&gt;select_related&lt;/code&gt; to reduce the query count to 2:</source>
          <target state="translated">물론 &lt;code&gt;select_related&lt;/code&gt; 를 사용하여 &lt;code&gt;best_pizza&lt;/code&gt; 관계를 페치하여 쿼리 수를 2로 줄일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f2e2608c2269e9abaf6c0d87ce7cd4ef673445a8" translate="yes" xml:space="preserve">
          <source>Of course, the price of this flexibility is more work. Until now we haven&amp;rsquo;t had to worry about how to display form errors, because that&amp;rsquo;s taken care of for us. In this example we have had to make sure we take care of any errors for each field and any errors for the form as a whole. Note &lt;code&gt;{{ form.non_field_errors
}}&lt;/code&gt; at the top of the form and the template lookup for errors on each field.</source>
          <target state="translated">물론이 유연성의 가격은 더 많은 작업입니다. 지금까지 양식 오류를 표시하는 방법에 대해 걱정할 필요가 없었습니다. 이 예에서는 각 필드에 대한 오류와 양식 전체에 대한 오류를 처리해야합니다. 참고 &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; 형태의 상단과 각 필드의 오류에 대한 템플릿 조회에서.</target>
        </trans-unit>
        <trans-unit id="0b051c52844da773f0bf17768634155ead973ec0" translate="yes" xml:space="preserve">
          <source>Of course, these arguments can be used together.</source>
          <target state="translated">물론, 이러한 주장들은 함께 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b45a927f98e4c7ad1501b4da064e9694f24affbf" translate="yes" xml:space="preserve">
          <source>Of course, this example isn&amp;rsquo;t very exciting &amp;ndash; it&amp;rsquo;s exactly the same as running &lt;code&gt;Person.objects.all()&lt;/code&gt;. However, &lt;code&gt;raw()&lt;/code&gt; has a bunch of other options that make it very powerful.</source>
          <target state="translated">물론이 예제는 흥미롭지는 않지만 &lt;code&gt;Person.objects.all()&lt;/code&gt; 실행과 동일 합니다. 그러나 &lt;code&gt;raw()&lt;/code&gt; 에는 매우 강력한 다른 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdb127b59fbd7b604d617baf8fd8c288a7b18b4d" translate="yes" xml:space="preserve">
          <source>Of course, you can also tell your users to put &lt;code&gt;'rock_n_roll.apps.RockNRollConfig'&lt;/code&gt; in their &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. You can even provide several different &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses with different behaviors and allow your users to choose one via their &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">물론 사용자에게 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정 에 &lt;code&gt;'rock_n_roll.apps.RockNRollConfig'&lt;/code&gt; 를 넣도록 지시 할 수도 있습니다 . 다른 동작을 가진 여러 다른 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스를 제공 하고 사용자가 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정을 통해 하나를 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16c3b04076cad0a812a7a10dc4a605fc752bf57" translate="yes" xml:space="preserve">
          <source>Often it is expensive (that is, resource-hungry and slow) to compute a value, so there can be huge benefit in saving the value to a quickly accessible cache, ready for the next time it&amp;rsquo;s required.</source>
          <target state="translated">값을 계산하는 데 비용이 많이 들기 때문에 (즉, 리소스가 많이 걸리고 느려짐) 값을 빠르게 액세스 할 수있는 캐시에 저장하면 다음에 필요할 때 준비 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b78e944a624797ce2f6db948d2279c2ab3117b8" translate="yes" xml:space="preserve">
          <source>Often you need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; generic view provides the publisher to the context, but how do we get additional information in that template?</source>
          <target state="translated">종종 일반적인 관점에서 제공하는 것 이외의 추가 정보를 제시해야합니다. 예를 들어, 각 출판사 세부 사항 페이지에 모든 책의 목록을 표시한다고 가정하십시오. &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 일반적인보기는 문맥에 게시자를 제공하지만, 우리는 어떻게 그 템플릿에 추가 정보를 얻을 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="6179c551e66fb1509d096aba5f29780dd1197fb9" translate="yes" xml:space="preserve">
          <source>Often you want the search engine crawlers to index views which are neither object detail pages nor flatpages. The solution is to explicitly list URL names for these views in &lt;code&gt;items&lt;/code&gt; and call &lt;a href=&quot;../urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;location&lt;/code&gt; method of the sitemap. For example:</source>
          <target state="translated">종종 검색 엔진 크롤러가 개체 세부 사항 페이지 나 플랫 페이지가 아닌보기를 인덱싱하기를 원합니다. 해결책은 &lt;code&gt;items&lt;/code&gt; 에 이러한보기의 URL 이름을 명시 적으로 나열 하고 사이트 맵 의 &lt;code&gt;location&lt;/code&gt; 메소드 에서 &lt;a href=&quot;../urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 를 호출 하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f81feb967d1e47b1a7a307eacaa07cfd1652c9e4" translate="yes" xml:space="preserve">
          <source>Often, you will just want to use the parent class to hold information that you don&amp;rsquo;t want to have to type out for each child model. This class isn&amp;rsquo;t going to ever be used in isolation, so &lt;a href=&quot;#abstract-base-classes&quot;&gt;Abstract base classes&lt;/a&gt; are what you&amp;rsquo;re after.</source>
          <target state="translated">종종 부모 클래스를 사용하여 각 자식 모델에 대해 입력하지 않아도되는 정보를 보유하려고합니다. 이 클래스는 단독으로 사용되지 않으므로 &lt;a href=&quot;#abstract-base-classes&quot;&gt;Abstract 기본 클래스&lt;/a&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b05a5f2fb24b871d13e27678513c61dfb1f55427" translate="yes" xml:space="preserve">
          <source>Oh, and one more thing: making humans edit XML is sadistic!</source>
          <target state="translated">아, 그리고 한 가지 더 : 인간이 XML을 편집하게하는 것은 비참합니다!</target>
        </trans-unit>
        <trans-unit id="eca5f76268f199f0b3cfebb0d68b71bb23c8d38a" translate="yes" xml:space="preserve">
          <source>Older version of Django will eventually no longer receive security updates. (see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#supported-versions-policy&quot;&gt;Supported versions&lt;/a&gt;).</source>
          <target state="translated">이전 버전의 Django는 더 이상 보안 업데이트를받지 않습니다. ( &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#supported-versions-policy&quot;&gt;지원되는 버전&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="c0945ccd1e691623fde3146f823ee60bd1301c4e" translate="yes" xml:space="preserve">
          <source>Older version of Django will eventually no longer receive security updates. (see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/release-process/#supported-versions-policy&quot;&gt;Supported versions&lt;/a&gt;).</source>
          <target state="translated">이전 버전의 Django는 결국 더 이상 보안 업데이트를받지 않습니다. ( &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/release-process/#supported-versions-policy&quot;&gt;지원되는 버전&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="87b1b047909da2fb1a82bf3394d62da9dc8ee40a" translate="yes" xml:space="preserve">
          <source>Older versions don&amp;rsquo;t display model properties.</source>
          <target state="translated">이전 버전은 모델 속성을 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1236aef81022c4e6ffb10318683fd9a5227e19ab" translate="yes" xml:space="preserve">
          <source>Older versions of Django require the &lt;code&gt;name&lt;/code&gt; argument for all versions of Python.</source>
          <target state="translated">이전 버전의 Django에는 모든 버전의 Python에 대한 &lt;code&gt;name&lt;/code&gt; 인수가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="10ec9d5b7946a13c106294a63c16870358b0e25b" translate="yes" xml:space="preserve">
          <source>Omits the primary key in the serialized data of this object since it can be calculated during deserialization.</source>
          <target state="translated">역 직렬화 중에 계산할 수 있으므로이 객체의 직렬화 된 데이터에서 기본 키를 생략합니다.</target>
        </trans-unit>
        <trans-unit id="b9826f39dc51cb2574613e0058661470274d2713" translate="yes" xml:space="preserve">
          <source>On Debian/Ubuntu, you are advised to install the following packages which will install, directly or by dependency, the required geospatial libraries:</source>
          <target state="translated">데비안 / 우분투에서는 필요한 지리 공간 라이브러리를 직접 또는 종속적으로 설치하는 다음 패키지를 설치하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3fd4a5308445d55b19d8fb010b7fb03ba7766bfa" translate="yes" xml:space="preserve">
          <source>On Debian/Ubuntu, you are advised to install the following packages: postgresql-x.x, postgresql-x.x-postgis, postgresql-server-dev-x.x, python-psycopg2 (x.x matching the PostgreSQL version you want to install). Alternately, you can &lt;a href=&quot;https://postgis.net/docs/postgis_installation.html#install_short_version&quot;&gt;build from source&lt;/a&gt;. Consult the platform-specific instructions if you are on &lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; or &lt;a href=&quot;index#windows&quot;&gt;Windows&lt;/a&gt;.</source>
          <target state="translated">데비안 / 우분투에서는 postgresql-xx, postgresql-xx-postgis, postgresql-server-dev-xx, python-psycopg2 (xx는 설치하려는 PostgreSQL 버전과 일치) 패키지를 설치하는 것이 좋습니다. 또는 &lt;a href=&quot;https://postgis.net/docs/postgis_installation.html#install_short_version&quot;&gt;source에서 빌드&lt;/a&gt; 할 수 있습니다 . &lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; 또는 &lt;a href=&quot;index#windows&quot;&gt;Windows&lt;/a&gt; 에있는 경우 플랫폼 별 지침을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a82dbf3165cbd0a452eb5b7752d0d864094e5ff4" translate="yes" xml:space="preserve">
          <source>On GNU/Linux systems, there is typically a file in &lt;code&gt;/etc/ld.so.conf&lt;/code&gt;, which may include additional paths from files in another directory, such as &lt;code&gt;/etc/ld.so.conf.d&lt;/code&gt;. As the root user, add the custom library path (like &lt;code&gt;/usr/local/lib&lt;/code&gt;) on a new line in &lt;code&gt;ld.so.conf&lt;/code&gt;. This is &lt;em&gt;one&lt;/em&gt; example of how to do so:</source>
          <target state="translated">GNU / Linux 시스템에는 일반적으로 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 에 파일이 있으며 , 여기에는 &lt;code&gt;/etc/ld.so.conf.d&lt;/code&gt; 와 같은 다른 디렉토리에있는 파일의 추가 경로가 포함될 수 있습니다 . 루트 사용자로서 &lt;code&gt;ld.so.conf&lt;/code&gt; 의 새 행에 사용자 정의 라이브러리 경로 (예 : &lt;code&gt;/usr/local/lib&lt;/code&gt; )를 추가하십시오 . 이를 수행하는 방법의 &lt;em&gt;한&lt;/em&gt; 예입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c469cf17feb53e87d1d7993315a9037108c1435c" translate="yes" xml:space="preserve">
          <source>On Lawrence.com, this email has the subject line &amp;ldquo;Thanks for subscribing to lawrence.com alerts.&amp;rdquo; On LJWorld.com, the email has the subject &amp;ldquo;Thanks for subscribing to LJWorld.com alerts.&amp;rdquo; Same goes for the email&amp;rsquo;s message body.</source>
          <target state="translated">Lawrence.com에서이 이메일의 제목은&amp;ldquo;lawrence.com 알림을 보내 주셔서 감사합니다.&amp;rdquo;입니다. LJWorld.com의 이메일에는 &quot;LJWorld.com 알림을 구독 해 주셔서 감사합니다&quot;라는 제목이 있습니다. 이메일의 메시지 본문도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="09825e1bf4715078c02662b5c1463d166eb2bd68" translate="yes" xml:space="preserve">
          <source>On Linux platforms, it may be necessary to run the &lt;code&gt;ldconfig&lt;/code&gt; command after installing each library. For example:</source>
          <target state="translated">Linux 플랫폼에서 각 라이브러리를 설치 한 후 &lt;code&gt;ldconfig&lt;/code&gt; 명령 을 실행해야 할 수도 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="68c9a7d6a07dfaa9252e84592341dcc10e40abe1" translate="yes" xml:space="preserve">
          <source>On MySQL and MariaDB, setting the &lt;code&gt;ignore_conflicts&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt; turns certain types of errors, other than duplicate key, into warnings. Even with Strict Mode. For example: invalid values or non-nullable violations. See the &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-strict-comparison&quot;&gt;MySQL documentation&lt;/a&gt; and &lt;a href=&quot;https://mariadb.com/kb/en/ignore/&quot;&gt;MariaDB documentation&lt;/a&gt; for more details.</source>
          <target state="translated">MySQL 및 MariaDB에서 &lt;code&gt;ignore_conflicts&lt;/code&gt; 매개 변수를 &lt;code&gt;True&lt;/code&gt; 로 설정하면 중복 키를 제외한 특정 유형의 오류가 경고로 바뀝니다. 엄격 모드에서도. 예 : 유효하지 않은 값 또는 널 불가능한 위반. 자세한 내용은 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-strict-comparison&quot;&gt;MySQL 문서&lt;/a&gt; 및 &lt;a href=&quot;https://mariadb.com/kb/en/ignore/&quot;&gt;MariaDB 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5b7489f228770df5c4f89793fb295c0eb5f80335" translate="yes" xml:space="preserve">
          <source>On MySQL, returns &lt;code&gt;None&lt;/code&gt; for any non-&lt;code&gt;LINESTRING&lt;/code&gt; geometry.</source>
          <target state="translated">MySQL에서는 &lt;code&gt;LINESTRING&lt;/code&gt; 이외의 지오메트리에 대해 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c479465cf9d6eb8433e919653828b13ecb2fedc6" translate="yes" xml:space="preserve">
          <source>On MySQL, returns &lt;code&gt;None&lt;/code&gt; for single geometries.</source>
          <target state="translated">MySQL에서는 단일 지오메트리에 대해 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e42d27b72686357ddcf4048a330596ac0bb41f8b" translate="yes" xml:space="preserve">
          <source>On MySQL/MariaDB, you can do this with the &lt;code&gt;mysql&lt;/code&gt; command&amp;rsquo;s &lt;code&gt;-e&lt;/code&gt; flag:</source>
          <target state="translated">MySQL / MariaDB에서는 &lt;code&gt;mysql&lt;/code&gt; 명령의 &lt;code&gt;-e&lt;/code&gt; 플래그를 사용하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b810a68b24d6713ef0102f6c0c4096a6482b3c0" translate="yes" xml:space="preserve">
          <source>On Oracle Database, using &lt;code&gt;None&lt;/code&gt; as the lookup value in an &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; query will return objects that do not have &lt;code&gt;null&lt;/code&gt; as the value at the given path, including objects that do not have the path. On other database backends, the query will return objects that have the path and the value is not &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Oracle 데이터베이스 에서 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt; 쿼리 의 조회 값으로 &lt;code&gt;None&lt;/code&gt; 을 사용 하면 경로가없는 개체를 포함하여 지정된 경로의 값으로 &lt;code&gt;null&lt;/code&gt; 이없는 개체가 반환됩니다 . 다른 데이터베이스 백엔드에서 쿼리는 경로가 있고 값이 &lt;code&gt;null&lt;/code&gt; 이 아닌 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9423ea6ae9f5742f7782982188883a7624b6df11" translate="yes" xml:space="preserve">
          <source>On PostGIS and SpatiaLite, when the coordinates are geodetic (angular), you can specify if the calculation should be based on a simple sphere (less accurate, less resource-intensive) or on a spheroid (more accurate, more resource-intensive) with the &lt;code&gt;spheroid&lt;/code&gt; keyword argument.</source>
          <target state="translated">PostGIS 및 SpatiaLite에서 좌표가 측지 (각도) 일 때 계산이 간단한 구 (적은 정확도, 적은 자원 집약적) 또는 스페 로이드 (보다 정확하고 더 많은 자원 집중)를 기반으로할지 여부를 지정할 수 있습니다. &lt;code&gt;spheroid&lt;/code&gt; 키워드 인수.</target>
        </trans-unit>
        <trans-unit id="3dc26522300c3b3567224b251bae8b6aa0820df5" translate="yes" xml:space="preserve">
          <source>On PostgreSQL and SQLite, only use &lt;code&gt;BEGIN&lt;/code&gt; or &lt;code&gt;COMMIT&lt;/code&gt; in your SQL in &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migrations&lt;/a&gt;, to avoid breaking Django&amp;rsquo;s transaction state.</source>
          <target state="translated">PostgreSQL 및 SQLite에서는 Django의 트랜잭션 상태가 손상되지 않도록 &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;비 원자 마이그레이션&lt;/a&gt; 의 SQL에서 &lt;code&gt;BEGIN&lt;/code&gt; 또는 &lt;code&gt;COMMIT&lt;/code&gt; 만 사용 하세요 .</target>
        </trans-unit>
        <trans-unit id="e7bc6aa4387e8af5e72d849e5f9186d63d8f8b76" translate="yes" xml:space="preserve">
          <source>On PostgreSQL only, you can pass positional arguments (&lt;code&gt;*fields&lt;/code&gt;) in order to specify the names of fields to which the &lt;code&gt;DISTINCT&lt;/code&gt; should apply. This translates to a &lt;code&gt;SELECT DISTINCT ON&lt;/code&gt; SQL query. Here&amp;rsquo;s the difference. For a normal &lt;code&gt;distinct()&lt;/code&gt; call, the database compares &lt;em&gt;each&lt;/em&gt; field in each row when determining which rows are distinct. For a &lt;code&gt;distinct()&lt;/code&gt; call with specified field names, the database will only compare the specified field names.</source>
          <target state="translated">PostgreSQL에서만 &lt;code&gt;DISTINCT&lt;/code&gt; 를 적용 할 필드 이름을 지정하기 위해 위치 인수 ( &lt;code&gt;*fields&lt;/code&gt; )를 전달할 수 있습니다. 이는 &lt;code&gt;SELECT DISTINCT ON&lt;/code&gt; SQL 쿼리로 변환됩니다 . 차이점이 있습니다. 정상적인 &lt;code&gt;distinct()&lt;/code&gt; 호출의 경우 데이터베이스는 구별되는 행을 결정할 때 각 행의 &lt;em&gt;각&lt;/em&gt; 필드를 비교합니다 . A에 대한 &lt;code&gt;distinct()&lt;/code&gt; 지정된 필드 이름과 전화, 데이터베이스는 지정된 필드 이름을 비교합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3ed2b681cc5211a1b79d3ad34cfeacc6f5daf13" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt; will also need read access to the built-in &lt;code&gt;postgres&lt;/code&gt; database.</source>
          <target state="translated">PostgreSQL에서 &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt; 는 내장 &lt;code&gt;postgres&lt;/code&gt; 데이터베이스에 대한 읽기 액세스 권한도 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="f3f0b404b988634a050f0281b8e24352e741c57e" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, if only one key or index is used, the SQL operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is used. If multiple operators are used then the &lt;code&gt;#&amp;gt;&lt;/code&gt; operator is used.</source>
          <target state="translated">PostgreSQL에서는 키 또는 인덱스가 하나만 사용되는 경우 SQL 연산자 &lt;code&gt;-&amp;gt;&lt;/code&gt; 가 사용됩니다. 여러 연산자를 사용하는 경우 &lt;code&gt;#&amp;gt;&lt;/code&gt; 연산자가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e720f29b1479551b262a1c817ee9afc76e69cbd5" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, server-side cursors will only be used when the &lt;a href=&quot;../settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt;&lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt;&lt;/a&gt; setting is &lt;code&gt;False&lt;/code&gt;. Read &lt;a href=&quot;../databases#transaction-pooling-server-side-cursors&quot;&gt;Transaction pooling and server-side cursors&lt;/a&gt; if you&amp;rsquo;re using a connection pooler configured in transaction pooling mode. When server-side cursors are disabled, the behavior is the same as databases that don&amp;rsquo;t support server-side cursors.</source>
          <target state="translated">PostgreSQL에서 서버 측 커서는 &lt;a href=&quot;../settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt; &lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;False&lt;/code&gt; 인 경우에만 사용됩니다 . 트랜잭션 풀링 모드에서 구성된 연결 풀러를 사용하는 경우 &lt;a href=&quot;../databases#transaction-pooling-server-side-cursors&quot;&gt;트랜잭션 풀링 및 서버 측 커서를&lt;/a&gt; 읽으십시오 . 서버 측 커서가 비활성화되면 동작은 서버 측 커서를 지원하지 않는 데이터베이스와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="231d27d56a450bb1d7a023aede748b738f5350bc" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, the &lt;code&gt;'spheroid'&lt;/code&gt; option uses &lt;a href=&quot;https://postgis.net/docs/ST_Distance_Spheroid.html&quot;&gt;ST_DistanceSpheroid&lt;/a&gt; instead of &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere&lt;/a&gt;. The simpler &lt;a href=&quot;https://postgis.net/docs/ST_Distance.html&quot;&gt;ST_Distance&lt;/a&gt; function is used with projected coordinate systems. Rasters are converted to geometries for spheroid based lookups.</source>
          <target state="translated">PostgreSQL의에서 &lt;code&gt;'spheroid'&lt;/code&gt; 옵션 사용은 &lt;a href=&quot;https://postgis.net/docs/ST_Distance_Spheroid.html&quot;&gt;ST_DistanceSpheroid&lt;/a&gt; 대신 &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere&lt;/a&gt; . 보다 간단한 &lt;a href=&quot;https://postgis.net/docs/ST_Distance.html&quot;&gt;ST_Distance&lt;/a&gt; 함수는 투영 좌표계와 함께 사용됩니다. 래스터는 회전 타원 기반 조회를 위해 형상으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="feadeca3b502e38c5e7a1bb0d3cdda7e166c150a" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, the SQL &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt; returns the time that the current transaction started. Therefore for cross-database compatibility, &lt;code&gt;Now()&lt;/code&gt; uses &lt;code&gt;STATEMENT_TIMESTAMP&lt;/code&gt; instead. If you need the transaction timestamp, use &lt;a href=&quot;../contrib/postgres/functions#django.contrib.postgres.functions.TransactionNow&quot;&gt;&lt;code&gt;django.contrib.postgres.functions.TransactionNow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL에서 SQL &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt; 는 현재 트랜잭션이 시작된 시간을 리턴합니다. 따라서 데이터베이스 간 호환성을 위해 &lt;code&gt;Now()&lt;/code&gt; 는 대신 &lt;code&gt;STATEMENT_TIMESTAMP&lt;/code&gt; 를 사용합니다. 트랜잭션 타임 스탬프가 필요한 경우 &lt;a href=&quot;../contrib/postgres/functions#django.contrib.postgres.functions.TransactionNow&quot;&gt; &lt;code&gt;django.contrib.postgres.functions.TransactionNow&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="171a834e14bec4fef794bc5172bffac81b861f95" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, the SQL looks like:</source>
          <target state="translated">PostgreSQL에서 SQL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d1a678530b7cbd46006434001f4f57bbb5211cd" translate="yes" xml:space="preserve">
          <source>On Unix environments (where &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.tzset&quot;&gt;&lt;code&gt;time.tzset()&lt;/code&gt;&lt;/a&gt; is implemented), Django sets the &lt;code&gt;os.environ['TZ']&lt;/code&gt; variable to the time zone you specify in the &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting. Thus, all your views and models will automatically operate in this time zone. However, Django won&amp;rsquo;t set the &lt;code&gt;TZ&lt;/code&gt; environment variable if you&amp;rsquo;re using the manual configuration option as described in &lt;a href=&quot;../topics/settings#settings-without-django-settings-module&quot;&gt;manually configuring settings&lt;/a&gt;. If Django doesn&amp;rsquo;t set the &lt;code&gt;TZ&lt;/code&gt; environment variable, it&amp;rsquo;s up to you to ensure your processes are running in the correct environment.</source>
          <target state="translated">Unix 환경 ( &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.tzset&quot;&gt; &lt;code&gt;time.tzset()&lt;/code&gt; &lt;/a&gt; 이 구현 된 곳)에서 Django는 &lt;code&gt;os.environ['TZ']&lt;/code&gt; 변수를 &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; 설정 에서 지정한 시간대로 설정합니다. 따라서 모든 시간대와 뷰가이 시간대에서 자동으로 작동합니다. 그러나 Django는 &lt;a href=&quot;../topics/settings#settings-without-django-settings-module&quot;&gt;수동 구성 설정에&lt;/a&gt; 설명 된대로 수동 구성 옵션을 사용하는 경우 &lt;code&gt;TZ&lt;/code&gt; 환경 변수를 설정하지 않습니다 . Django가 &lt;code&gt;TZ&lt;/code&gt; 환경 변수를 설정하지 않으면 프로세스가 올바른 환경에서 실행되고 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="9d87034675bfeb09dc1e05ad5ad92358405b48c9" translate="yes" xml:space="preserve">
          <source>On Windows platforms you can use the pgAdmin III utility to add superuser privileges to your database user.</source>
          <target state="translated">Windows 플랫폼에서 pgAdmin III 유틸리티를 사용하여 데이터베이스 사용자에게 수퍼 유저 권한을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54cfe6ffa00bf56c62bc2f9682a4ade18bfc9dbc" translate="yes" xml:space="preserve">
          <source>On Windows, the REPL is output due to implementation limits of &lt;a href=&quot;https://docs.python.org/3/library/select.html#select.select&quot;&gt;&lt;code&gt;select.select()&lt;/code&gt;&lt;/a&gt; on that platform.</source>
          <target state="translated">Windows에서 REPL은 해당 플랫폼에서 &lt;a href=&quot;https://docs.python.org/3/library/select.html#select.select&quot;&gt; &lt;code&gt;select.select()&lt;/code&gt; &lt;/a&gt; 의 구현 한계로 인해 출력 됩니다.</target>
        </trans-unit>
        <trans-unit id="98e35620cab04b96e3ed65990cf570def39684a2" translate="yes" xml:space="preserve">
          <source>On a real Web page, you probably don&amp;rsquo;t want every widget to look the same. You might want a larger input element for the comment, and you might want the &amp;lsquo;name&amp;rsquo; widget to have some special CSS class. It is also possible to specify the &amp;lsquo;type&amp;rsquo; attribute to take advantage of the new HTML5 input types. To do this, you use the &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;Widget.attrs&lt;/code&gt;&lt;/a&gt; argument when creating the widget:</source>
          <target state="translated">실제 웹 페이지에서는 모든 위젯이 동일하게 표시되는 것을 원하지 않을 것입니다. 주석에 더 큰 입력 요소를 원할 수 있으며 'name'위젯에 특수 CSS 클래스가 필요합니다. 새로운 HTML5 입력 유형을 이용하기 위해 'type'속성을 지정할 수도 있습니다. 이를 위해 위젯을 작성할 때 &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt; &lt;code&gt;Widget.attrs&lt;/code&gt; &lt;/a&gt; 인수 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e383a68178353fa8decc814cdf26f0a58017ac20" translate="yes" xml:space="preserve">
          <source>On a similar note, you might want to customize the look and feel of the Django admin index page.</source>
          <target state="translated">비슷한 메모에서 Django 관리자 색인 페이지의 모양과 느낌을 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3513645906e49f967649384ce2aae2d3029c45e" translate="yes" xml:space="preserve">
          <source>On backends that support distance calculation on geodetic coordinates, the proper backend function is automatically chosen depending on the SRID value of the geometries (e.g. &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere&lt;/a&gt; on PostGIS).</source>
          <target state="translated">측지 좌표에서 거리 계산을 지원하는 백엔드에서 형상의 SRID 값 (예 : PostGIS의 &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere)&lt;/a&gt; 에 따라 적절한 백엔드 기능이 자동으로 선택됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b43d185bfcf98e3e0ff7e26ab187ce7f129ec1c" translate="yes" xml:space="preserve">
          <source>On databases that do support DDL transactions (SQLite and PostgreSQL), &lt;code&gt;RunPython&lt;/code&gt; operations do not have any transactions automatically added besides the transactions created for each migration. Thus, on PostgreSQL, for example, you should avoid combining schema changes and &lt;code&gt;RunPython&lt;/code&gt; operations in the same migration or you may hit errors like &lt;code&gt;OperationalError: cannot
ALTER TABLE &quot;mytable&quot; because it has pending trigger events&lt;/code&gt;.</source>
          <target state="translated">DDL 트랜잭션 (SQLite 및 PostgreSQL)을 지원하는 데이터베이스에서 &lt;code&gt;RunPython&lt;/code&gt; 작업에는 각 마이그레이션에 대해 생성 된 트랜잭션 외에 트랜잭션이 자동으로 추가되지 않습니다. 따라서 PostgreSQL의 경우 동일한 마이그레이션에서 스키마 변경과 &lt;code&gt;RunPython&lt;/code&gt; 작업을 결합하지 않아야합니다 &lt;code&gt;OperationalError: cannot ALTER TABLE &quot;mytable&quot; because it has pending trigger events&lt;/code&gt; 과 같은 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="463a022c88308a9d32d13a4ba75565f6f8f97989" translate="yes" xml:space="preserve">
          <source>On databases that support DDL transactions (SQLite and PostgreSQL), all migration operations will run inside a single transaction by default. In contrast, if a database doesn&amp;rsquo;t support DDL transactions (e.g. MySQL, Oracle) then all operations will run without a transaction.</source>
          <target state="translated">DDL 트랜잭션 (SQLite 및 PostgreSQL)을 지원하는 데이터베이스에서 모든 마이그레이션 작업은 기본적으로 단일 트랜잭션 내에서 실행됩니다. 반대로 데이터베이스가 DDL 트랜잭션 (예 : MySQL, Oracle)을 지원하지 않으면 모든 작업이 트랜잭션없이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="11d4ca34e4865526ed3bab65d895985c1d8c7e06" translate="yes" xml:space="preserve">
          <source>On databases that support DDL transactions (SQLite and PostgreSQL), migrations will run inside a transaction by default. For use cases such as performing data migrations on large tables, you may want to prevent a migration from running in a transaction by setting the &lt;code&gt;atomic&lt;/code&gt; attribute to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">DDL 트랜잭션 (SQLite 및 PostgreSQL)을 지원하는 데이터베이스에서는 기본적으로 마이그레이션이 트랜잭션 내에서 실행됩니다. 큰 테이블에서 데이터 마이그레이션을 수행하는 것과 같은 사용 사례의 경우 &lt;code&gt;atomic&lt;/code&gt; 속성을 &lt;code&gt;False&lt;/code&gt; 로 설정하여 트랜잭션에서 마이그레이션이 실행되지 않도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca5b4e07c53341abd3017356f8a7dc9ef7ae499a" translate="yes" xml:space="preserve">
          <source>On databases that support it (all but Oracle), setting the &lt;code&gt;ignore_conflicts&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt; tells the database to ignore failure to insert any rows that fail constraints such as duplicate unique values. Enabling this parameter disables setting the primary key on each model instance (if the database normally supports it).</source>
          <target state="translated">이를 지원하는 데이터베이스 (Oracle 제외)에서 &lt;code&gt;ignore_conflicts&lt;/code&gt; 매개 변수를 &lt;code&gt;True&lt;/code&gt; 로 설정하면 중복 고유 값과 같이 제한 조건에 실패한 행을 삽입하지 못하도록 데이터베이스에 지시합니다. 이 매개 변수를 사용하면 각 모델 인스턴스에서 기본 키 설정을 사용할 수 없습니다 (데이터베이스가 일반적으로 지원하는 경우).</target>
        </trans-unit>
        <trans-unit id="df2a46b8e1aeddaad78520b882b9cdecf3e5c347" translate="yes" xml:space="preserve">
          <source>On every distance lookup except &lt;a href=&quot;#std:fieldlookup-dwithin&quot;&gt;&lt;code&gt;dwithin&lt;/code&gt;&lt;/a&gt;, an optional element, &lt;code&gt;'spheroid'&lt;/code&gt;, may be included to use the more accurate spheroid distance calculation functions on fields with a geodetic coordinate system.</source>
          <target state="translated">&lt;a href=&quot;#std:fieldlookup-dwithin&quot;&gt; &lt;code&gt;dwithin&lt;/code&gt; 을&lt;/a&gt; 제외한 모든 거리 조회 에서 측지 좌표계가있는 필드에서 더 정확한 회전 타원 거리 계산 기능을 사용하기 위해 선택적인 요소 &lt;code&gt;'spheroid'&lt;/code&gt; 가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c16f183cbe43a1d74cb296d07073bd34180fa90" translate="yes" xml:space="preserve">
          <source>On occasions it may be useful to require or restrict the keys which are valid for a given field. This can be done using the &lt;a href=&quot;validators#django.contrib.postgres.validators.KeysValidator&quot;&gt;&lt;code&gt;KeysValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우에 따라 주어진 필드에 유효한 키를 요구하거나 제한하는 것이 유용 할 수 있습니다. 이것은 &lt;a href=&quot;validators#django.contrib.postgres.validators.KeysValidator&quot;&gt; &lt;code&gt;KeysValidator&lt;/code&gt; 를&lt;/a&gt; 사용하여 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3135ae21a09a7d5963484b5886ed97c37f9aee36" translate="yes" xml:space="preserve">
          <source>On older databases, adding a field with a default value may cause a full rewrite of the table. This happens even for nullable fields and may have a negative performance impact. To avoid that, the following steps should be taken.</source>
          <target state="translated">이전 데이터베이스에서 기본값으로 필드를 추가하면 테이블을 완전히 다시 작성할 수 있습니다. 이는 널 입력 가능 필드에서도 발생하며 성능에 부정적인 영향을 줄 수 있습니다. 이를 피하려면 다음 단계를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="7a602592df2f82b3d4e98221e99e6bdd1a6c483c" translate="yes" xml:space="preserve">
          <source>On other databases, this is emulated using a &lt;code&gt;CASE&lt;/code&gt; statement:</source>
          <target state="translated">다른 데이터베이스에서는 &lt;code&gt;CASE&lt;/code&gt; 문을 사용하여 에뮬레이션됩니다 .</target>
        </trans-unit>
        <trans-unit id="78d0d5f86c0751b63e02578856d36bc3a65a179a" translate="yes" xml:space="preserve">
          <source>On some databases, flags may cause the query to be executed which could have adverse effects on your database. For example, PostgreSQL&amp;rsquo;s &lt;code&gt;ANALYZE&lt;/code&gt; flag could result in changes to data if there are triggers or if a function is called, even for a &lt;code&gt;SELECT&lt;/code&gt; query.</source>
          <target state="translated">일부 데이터베이스에서 플래그를 사용하면 쿼리가 실행되어 데이터베이스에 부정적인 영향을 줄 수 있습니다. 예를 들어, PostgreSQL의 &lt;code&gt;ANALYZE&lt;/code&gt; 플래그는 트리거가 있거나 &lt;code&gt;SELECT&lt;/code&gt; 쿼리의 경우에도 함수가 호출되면 데이터가 변경 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="37ae77b6bff1b6729e6bdb760bb7c8c52d3c1ea8" translate="yes" xml:space="preserve">
          <source>On some databases, flags may cause the query to be executed which could have adverse effects on your database. For example, the &lt;code&gt;ANALYZE&lt;/code&gt; flag supported by MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes to data if there are triggers or if a function is called, even for a &lt;code&gt;SELECT&lt;/code&gt; query.</source>
          <target state="translated">일부 데이터베이스에서는 플래그로 인해 쿼리가 실행되어 데이터베이스에 악영향을 미칠 수 있습니다. 예를 들어 MariaDB, MySQL 8.0.18+ 및 PostgreSQL에서 지원 하는 &lt;code&gt;ANALYZE&lt;/code&gt; 플래그는 트리거가 있거나 &lt;code&gt;SELECT&lt;/code&gt; 쿼리의 경우에도 함수가 호출되는 경우 데이터를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="002dcb5bc58a7582b107d7e7d9659347ad64dcf4" translate="yes" xml:space="preserve">
          <source>On subsequent &lt;code&gt;collectstatic&lt;/code&gt; runs (if &lt;code&gt;STATIC_ROOT&lt;/code&gt; isn&amp;rsquo;t empty), files are copied only if they have a modified timestamp greater than the timestamp of the file in &lt;code&gt;STATIC_ROOT&lt;/code&gt;. Therefore if you remove an application from &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s a good idea to use the &lt;a href=&quot;#cmdoption-collectstatic-clear&quot;&gt;&lt;code&gt;collectstatic
--clear&lt;/code&gt;&lt;/a&gt; option in order to remove stale static files.</source>
          <target state="translated">후속 &lt;code&gt;collectstatic&lt;/code&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; 실행 ( STATIC_ROOT 가 비어 있지 않은 경우)에서 파일은 수정 된 시간 소인이 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 에있는 파일의 시간 소인보다 큰 경우에만 복사됩니다 . 따라서 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 애플리케이션을 제거하는 경우 오래된 정적 파일을 제거하기 위해 &lt;a href=&quot;#cmdoption-collectstatic-clear&quot;&gt; &lt;code&gt;collectstatic --clear&lt;/code&gt; &lt;/a&gt; 옵션 을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="26454cc1ad8a1430d9c48c7d5cb25125f3c45cef" translate="yes" xml:space="preserve">
          <source>On supported backends (memcached), &lt;code&gt;set_many()&lt;/code&gt; returns a list of keys that failed to be inserted.</source>
          <target state="translated">지원되는 백엔드 (memcached)에서 &lt;code&gt;set_many()&lt;/code&gt; 는 삽입에 실패한 키 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4b4ebcf96010e5ee4bcc0f23b425a4b14b45545e" translate="yes" xml:space="preserve">
          <source>On the left hand side of the example, &lt;code&gt;rast&lt;/code&gt; is the geographic raster field and &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; is the spatial lookup type. On the right hand side, &lt;code&gt;geom&lt;/code&gt; is a geometry input and &lt;code&gt;rst&lt;/code&gt; is a &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; object. The band index defaults to &lt;code&gt;0&lt;/code&gt; in the first two queries and is set to &lt;code&gt;1&lt;/code&gt; on the others.</source>
          <target state="translated">예제의 왼쪽에서 &lt;code&gt;rast&lt;/code&gt; 는 지리적 래스터 필드이며 &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 하는 공간 조회 유형입니다. 오른쪽에서 &lt;code&gt;geom&lt;/code&gt; 은 지오메트리 입력이고 &lt;code&gt;rst&lt;/code&gt; 는 &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체입니다. 밴드 인덱스 기본값은 &lt;code&gt;0&lt;/code&gt; 처음 두 쿼리와가로 설정 &lt;code&gt;1&lt;/code&gt; 다른 사람에.</target>
        </trans-unit>
        <trans-unit id="da0ebe59862835efe42e9523305ea8c0bd6a5461" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;a href=&quot;../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;certain operations will force the evaluation of a QuerySet&lt;/a&gt;. Avoiding the premature evaluation of a &lt;code&gt;QuerySet&lt;/code&gt; can save making an expensive and unnecessary trip to the database.</source>
          <target state="translated">반면에 &lt;a href=&quot;../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;특정 작업은 QuerySet 평가를 강제합니다&lt;/a&gt; . &lt;code&gt;QuerySet&lt;/code&gt; 의 조기 평가를 피하면 비싸고 불필요한 데이터베이스 트립을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d160b683bea44fcb1e91d7c5b1f06dc5559f378" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;code&gt;GET&lt;/code&gt; is suitable for things like a web search form, because the URLs that represent a &lt;code&gt;GET&lt;/code&gt; request can easily be bookmarked, shared, or resubmitted.</source>
          <target state="translated">반면에 &lt;code&gt;GET&lt;/code&gt; 은 웹 검색 양식과 같은 것들에 적합합니다. &lt;code&gt;GET&lt;/code&gt; 요청 을 나타내는 URL을 쉽게 북마크, 공유 또는 다시 제출할 수 있기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="6f7a7c5801c7d1a1d3369cd7df4b42ee61e93288" translate="yes" xml:space="preserve">
          <source>On the other hand, bugs caused by the lack of time zone support are much harder to prevent, diagnose and fix. Anything that involves scheduled tasks or datetime arithmetic is a candidate for subtle bugs that will bite you only once or twice a year.</source>
          <target state="translated">반면 시간대 지원 부족으로 인한 버그는 예방, 진단 및 수정하기가 훨씬 더 어렵습니다. 예약 된 작업 또는 날짜 / 시간 산술과 관련된 것은 일년에 한두 번만 물릴 수있는 미묘한 버그의 후보입니다.</target>
        </trans-unit>
        <trans-unit id="42997296bab7b08f1ceb56e2afd964aad5014fa4" translate="yes" xml:space="preserve">
          <source>On the other hand, by setting the &lt;code&gt;--verbosity&lt;/code&gt; flag to 2, you can get all the directories which were searched:</source>
          <target state="translated">반면 &lt;code&gt;--verbosity&lt;/code&gt; 플래그를 2 로 설정하면 검색된 모든 디렉토리를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="327d8b70bf9dd3f89730d860563313020b6f5624" translate="yes" xml:space="preserve">
          <source>On the other hand, if you are using a plain &lt;code&gt;FormSet&lt;/code&gt;, it&amp;rsquo;s up to you to handle &lt;code&gt;formset.deleted_forms&lt;/code&gt;, perhaps in your formset&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method, as there&amp;rsquo;s no general notion of what it means to delete a form.</source>
          <target state="translated">반면에 일반 &lt;code&gt;FormSet&lt;/code&gt; 을 사용하는 경우 양식 삭제의 의미에 대한 일반적인 개념이 없기 때문에 formset의 &lt;code&gt;save()&lt;/code&gt; 메서드 에서 &lt;code&gt;formset.deleted_forms&lt;/code&gt; 를 처리하는 것은 사용자의 몫 입니다.</target>
        </trans-unit>
        <trans-unit id="b4d82efd4f41e1694a1ff4a96d13777aeea9b652" translate="yes" xml:space="preserve">
          <source>On the other hand, proxy models are intended to behave exactly like the model they are proxying for. They are always in sync with the parent model since they directly inherit its fields and managers.</source>
          <target state="translated">반면, 프록시 모델은 프록시 모델과 정확히 동일하게 작동합니다. 필드 및 관리자를 직접 상속하므로 항상 상위 모델과 동기화됩니다.</target>
        </trans-unit>
        <trans-unit id="9d9eb41739d72afbd8898888fd10f2dab6d9d4e3" translate="yes" xml:space="preserve">
          <source>On the other hand, when a savepoint is rolled back (due to an exception being raised), the inner callable will not be called:</source>
          <target state="translated">한편, 세이브 포인트가 롤백되면 (예외가 발생하여) 내부 호출 가능 호출이 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a4daf554ed077861bb378c80a8f4c5b4b8037da" translate="yes" xml:space="preserve">
          <source>On the server (&lt;code&gt;mod_wsgi&lt;/code&gt;)</source>
          <target state="translated">서버에서 ( &lt;code&gt;mod_wsgi&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="cecf61e7e09516497b38938fd37f1bddd24dfa26" translate="yes" xml:space="preserve">
          <source>On the server, run &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; to copy all the static files into &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">서버에서 &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 을 실행 하여 모든 정적 파일을 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 에 복사하십시오 .</target>
        </trans-unit>
        <trans-unit id="8018b894c78df10ce0e2fab04879f59541601d51" translate="yes" xml:space="preserve">
          <source>On these spatial backends the intersection pattern is a string comprising nine characters, which define intersections between the interior, boundary, and exterior of the geometry field and the lookup geometry. The intersection pattern matrix may only use the following characters: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, or &lt;code&gt;*&lt;/code&gt;. This lookup type allows users to &amp;ldquo;fine tune&amp;rdquo; a specific geometric relationship consistent with the DE-9IM model. &lt;a href=&quot;#fnde9im&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="translated">이러한 공간적 백엔드에서 교차 패턴은 지오메트리 필드의 내부, 경계 및 외부와 조회 지오메트리 사이의 교차점을 정의하는 9 개의 문자로 구성된 문자열입니다. 교차 패턴 행렬은 &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; , &lt;code&gt;T&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; 또는 &lt;code&gt;*&lt;/code&gt; 문자 만 사용할 수 있습니다 . 이 조회 유형을 사용하면 DE-9IM 모델과 일치하는 특정 형상 관계를 &quot;미세 조정&quot;할 수 있습니다. &lt;a href=&quot;#fnde9im&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe2da8c6b3beffe86c43d4ad3b331e4d1ab5aed7" translate="yes" xml:space="preserve">
          <source>On-commit functions for a given transaction are executed in the order they were registered.</source>
          <target state="translated">주어진 트랜잭션에 대한 커밋 기능은 등록 된 순서대로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="5b56a6bf63627728f31e434c106869807d7bf4d8" translate="yes" xml:space="preserve">
          <source>On-commit functions only work with &lt;a href=&quot;#managing-autocommit&quot;&gt;autocommit mode&lt;/a&gt; and the &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt;&lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt;&lt;/a&gt;) transaction API. Calling &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; when autocommit is disabled and you are not within an atomic block will result in an error.</source>
          <target state="translated">커밋 기능은 &lt;a href=&quot;#managing-autocommit&quot;&gt;자동 커밋 모드&lt;/a&gt; 및 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt; &lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt; &lt;/a&gt; ) 트랜잭션 API 에서만 작동 합니다. 자동 커밋이 비활성화되고 원자 블록 내에 있지 않은 경우 &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 호출 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea953980477f23ceaa27913413963b194a15f9cb" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;LocaleMiddleware&lt;/code&gt; determines the user&amp;rsquo;s preference, it makes this preference available as &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; for each &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;. Feel free to read this value in your view code. Here&amp;rsquo;s an example:</source>
          <target state="translated">일단 &lt;code&gt;LocaleMiddleware&lt;/code&gt; 는 사용자의 선호도를 결정, 그것으로이 설정을 사용할 수 있습니다 &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; 각 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; . 뷰 코드에서이 값을 자유롭게 읽으십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="45bad62da27ce3b983be7a3066691f1ee9b247b1" translate="yes" xml:space="preserve">
          <source>Once a logger has determined that a message needs to be processed, it is passed to a &lt;em&gt;Handler&lt;/em&gt;.</source>
          <target state="translated">로거가 메시지를 처리해야한다고 결정하면 메시지는 &lt;em&gt;Handler&lt;/em&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4892907ad7249904f6f00c6f41012b6dc82795ed" translate="yes" xml:space="preserve">
          <source>Once a node is parsed, its &lt;code&gt;render&lt;/code&gt; method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it&amp;rsquo;s important to make sure your template tags are thread safe.</source>
          <target state="translated">노드가 구문 분석되면 해당 &lt;code&gt;render&lt;/code&gt; 메소드를 여러 번 호출 할 수 있습니다. Django는 다중 스레드 환경에서 실행되기 때문에 단일 노드가 두 개의 개별 요청에 대한 응답으로 서로 다른 컨텍스트로 동시에 렌더링 될 수 있습니다. 따라서 템플릿 태그가 스레드에 안전해야합니다.</target>
        </trans-unit>
        <trans-unit id="4b7a48f914d876adbccaa3adc73eedab94ce96c4" translate="yes" xml:space="preserve">
          <source>Once a subclass of &lt;code&gt;File&lt;/code&gt; is created, the new &lt;code&gt;FileField&lt;/code&gt; subclass must be told to use it. To do so, assign the new &lt;code&gt;File&lt;/code&gt; subclass to the special &lt;code&gt;attr_class&lt;/code&gt; attribute of the &lt;code&gt;FileField&lt;/code&gt; subclass.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 의 서브 클래스 가 작성되면 새 &lt;code&gt;FileField&lt;/code&gt; 서브 클래스가이를 사용하도록 지시해야합니다. 그렇게하려면 새 &lt;code&gt;File&lt;/code&gt; 서브 클래스를 &lt;code&gt;FileField&lt;/code&gt; 서브 클래스 의 특수한 &lt;code&gt;attr_class&lt;/code&gt; 속성에 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7fa4afcebb8e9a2e720375d04ee811c5c1d53d5f" translate="yes" xml:space="preserve">
          <source>Once a user has authenticated, Django stores which backend was used to authenticate the user in the user&amp;rsquo;s session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, you&amp;rsquo;ll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is to execute &lt;code&gt;Session.objects.all().delete()&lt;/code&gt;.</source>
          <target state="translated">사용자가 인증되면 Django는 사용자 세션에서 사용자를 인증하는 데 사용 된 백엔드를 저장하고 현재 인증 된 사용자에 대한 액세스가 필요할 때마다 해당 세션 기간 동안 동일한 백엔드를 재사용합니다. 이는 효과적으로 인증 소스가 세션별로 캐시되므로 &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; 를 변경하면 하는 경우 다른 방법을 사용하여 사용자를 강제로 다시 인증해야하는 경우 세션 데이터를 지워야합니다. 이를 수행하는 간단한 방법은 &lt;code&gt;Session.objects.all().delete()&lt;/code&gt; 를 실행하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="47cc039fbcb18a971f6b9e295950ac28d3bbc3d6" translate="yes" xml:space="preserve">
          <source>Once one of the URL patterns matches, Django calls the given view, which is a Python function. Each view gets passed a request object &amp;ndash; which contains request metadata &amp;ndash; and the values captured in the pattern.</source>
          <target state="translated">URL 패턴 중 하나가 일치하면 Django는 주어진 뷰를 호출합니다.이 뷰는 Python 함수입니다. 각 뷰에는 요청 메타 데이터가 포함 된 요청 객체와 패턴에서 캡처 된 값이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8afce1673f10a3038aee77d9942248ca3461e349" translate="yes" xml:space="preserve">
          <source>Once one of the URL patterns matches, Django imports and calls the given view, which is a Python function (or a &lt;a href=&quot;../class-based-views/index&quot;&gt;class-based view&lt;/a&gt;). The view gets passed the following arguments:</source>
          <target state="translated">URL 패턴 중 하나가 일치하면 Django는 주어진 뷰를 가져 와서 호출합니다.이 뷰는 Python 함수 (또는 &lt;a href=&quot;../class-based-views/index&quot;&gt;클래스 기반 뷰&lt;/a&gt; )입니다. 뷰에는 다음과 같은 인수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8d3f70853ffe17be01ce6b6b1b1ad3963fb68cb3" translate="yes" xml:space="preserve">
          <source>Once that&amp;rsquo;s done, all you have to do is run &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, you may only have to change your &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">완료되면 &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; 을&lt;/a&gt; 실행하기 만하면 정적 파일이 스토리지 패키지를 통해 S3까지 푸시됩니다. 나중에 다른 스토리지 제공자로 전환 &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt; 설정 만 변경하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="cfd518f7c02dab56b7fa7099e9ab5f115d40d4af" translate="yes" xml:space="preserve">
          <source>Once that&amp;rsquo;s done, we can run &lt;code&gt;python manage.py migrate&lt;/code&gt; as normal and the data migration will run in place alongside other migrations.</source>
          <target state="translated">완료되면 &lt;code&gt;python manage.py migrate&lt;/code&gt; 를 정상적으로 실행할 수 있으며 데이터 마이그레이션이 다른 마이그레이션과 함께 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7d80a9630a5667fa5b1bf5e0b53bb9c33fc0955a" translate="yes" xml:space="preserve">
          <source>Once the cache is set up, the simplest way to use caching is to cache your entire site. You&amp;rsquo;ll need to add &lt;code&gt;'django.middleware.cache.UpdateCacheMiddleware'&lt;/code&gt; and &lt;code&gt;'django.middleware.cache.FetchFromCacheMiddleware'&lt;/code&gt; to your &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, as in this example:</source>
          <target state="translated">캐시가 설정되면 캐싱을 사용하는 가장 간단한 방법은 전체 사이트를 캐시하는 것입니다. 이 예제와 같이 &lt;code&gt;'django.middleware.cache.UpdateCacheMiddleware'&lt;/code&gt; 및 &lt;code&gt;'django.middleware.cache.FetchFromCacheMiddleware'&lt;/code&gt; 를 &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정 에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="099066c054cd7e4194c8ae65b8e3741ea951ec11" translate="yes" xml:space="preserve">
          <source>Once the migration is applied, commit the migration and the models change to your version control system as a single commit - that way, when other developers (or your production servers) check out the code, they&amp;rsquo;ll get both the changes to your models and the accompanying migration at the same time.</source>
          <target state="translated">마이그레이션이 적용되면 마이그레이션을 커밋하고 모델이 단일 커밋으로 버전 관리 시스템으로 변경됩니다. 이렇게하면 다른 개발자 (또는 프로덕션 서버)가 코드를 확인할 때 모델에 대한 변경 내용이 모두 표시됩니다. 동시에 수반되는 마이그레이션.</target>
        </trans-unit>
        <trans-unit id="9aac27c3870fec649b441a68d9801e0cfc37bac9" translate="yes" xml:space="preserve">
          <source>Once the operation sequence has been reduced as much as possible - the amount possible depends on how closely intertwined your models are and if you have any &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; operations (which can&amp;rsquo;t be optimized through unless they are marked as &lt;code&gt;elidable&lt;/code&gt;) - Django will then write it back out into a new set of migration files.</source>
          <target state="translated">작업 순서가 최대한 줄어든 경우, 가능한 양은 모델이 얼마나 밀접하게 얽혀 있는지, &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 작업이 있는지 (필요하다고 표시되지 않으면 최적화 할 수 없음) 여부에 따라 &lt;code&gt;elidable&lt;/code&gt; ) - 장고 것이다 그런 다음 새 마이그레이션 파일 세트에 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ed3b976c0a650bb7fc905a8f0966094dff0cf52a" translate="yes" xml:space="preserve">
          <source>Once the sitemaps application is added to your project, you may also ping Google using the &lt;code&gt;ping_google&lt;/code&gt; management command:</source>
          <target state="translated">사이트 맵 응용 프로그램이 프로젝트에 추가되면 &lt;code&gt;ping_google&lt;/code&gt; 관리 명령을 사용하여 Google에 핑을 보낼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6b49e146a7a6f8208bd2db324b466d09add24fd" translate="yes" xml:space="preserve">
          <source>Once the string literals of an application have been tagged for later translation, the translation themselves need to be written (or obtained). Here&amp;rsquo;s how that works.</source>
          <target state="translated">응용 프로그램의 문자열 리터럴에 나중에 번역을 위해 태그가 지정되면 번역 자체를 작성 (또는 획득)해야합니다. 작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f206c7b7afb4f63e3142f262b4b4485c255b7031" translate="yes" xml:space="preserve">
          <source>Once the test database has been created, Django will run your tests. If everything goes well, you&amp;rsquo;ll see something like this:</source>
          <target state="translated">테스트 데이터베이스가 생성되면 Django가 테스트를 실행합니다. 모든 것이 잘되면 다음과 같은 것을 보게 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="c49b2de11a260f313eebb5acb8de8bd12ea04b7c" translate="yes" xml:space="preserve">
          <source>Once the tests complete, you should be greeted with a message informing you whether the test suite passed or failed. Since you haven&amp;rsquo;t yet made any changes to Django&amp;rsquo;s code, the entire test suite &lt;strong&gt;should&lt;/strong&gt; pass. If you get failures or errors make sure you&amp;rsquo;ve followed all of the previous steps properly. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;Running the unit tests&lt;/a&gt; for more information.</source>
          <target state="translated">테스트가 완료되면 테스트 스위트가 통과했는지 또는 실패했는지를 알려주는 메시지가 표시됩니다. 아직 Django 코드를 변경하지 않았으므로 전체 테스트 스위트 &lt;strong&gt;가&lt;/strong&gt; 통과 &lt;strong&gt;해야합니다&lt;/strong&gt; . 실패 또는 오류가 발생하면 이전 단계를 모두 올바르게 수행했는지 확인하십시오. 자세한 내용 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;은 장치 테스트 실행&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="53cb2d9fc1f9efe41bdafd33beb455b148fb4232" translate="yes" xml:space="preserve">
          <source>Once the tests complete, you should be greeted with a message informing you whether the test suite passed or failed. Since you haven&amp;rsquo;t yet made any changes to Django&amp;rsquo;s code, the entire test suite &lt;strong&gt;should&lt;/strong&gt; pass. If you get failures or errors make sure you&amp;rsquo;ve followed all of the previous steps properly. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;Running the unit tests&lt;/a&gt; for more information.</source>
          <target state="translated">테스트가 완료되면 테스트 스위트가 통과했는지 실패했는지 알려주는 메시지가 표시됩니다. Django의 코드를 아직 변경하지 않았으므로 전체 테스트 스위트 &lt;strong&gt;가&lt;/strong&gt; 통과 &lt;strong&gt;해야합니다&lt;/strong&gt; . 실패 또는 오류가 발생하면 이전 단계를 모두 제대로 수행했는지 확인하십시오. 자세한 내용 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;은 단위 테스트 실행&lt;/a&gt; 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="08bca7ec8b63ac1bbbb86e71cc804f726025bfcc" translate="yes" xml:space="preserve">
          <source>Once this is done, Django takes care of translating Web apps on the fly in each available language, according to users&amp;rsquo; language preferences.</source>
          <target state="translated">이 작업이 완료되면 Django는 사용자의 언어 환경 설정에 따라 사용 가능한 각 언어로 웹 앱을 즉석에서 번역합니다.</target>
        </trans-unit>
        <trans-unit id="beac49f82b1bb9504998712c3c8cf268da1ee652" translate="yes" xml:space="preserve">
          <source>Once this stage completes, APIs that operate on application configurations such as &lt;a href=&quot;#django.apps.apps.get_app_config&quot;&gt;&lt;code&gt;get_app_config()&lt;/code&gt;&lt;/a&gt; become usable.</source>
          <target state="translated">이 단계가 완료되면 &lt;a href=&quot;#django.apps.apps.get_app_config&quot;&gt; &lt;code&gt;get_app_config()&lt;/code&gt; &lt;/a&gt; 와 같은 애플리케이션 구성에서 작동하는 API를 사용할 수있게됩니다.</target>
        </trans-unit>
        <trans-unit id="6d1164058a89f4747e93310f35287594ad610bd0" translate="yes" xml:space="preserve">
          <source>Once this stage completes, APIs that operate on models such as &lt;a href=&quot;#django.apps.apps.get_model&quot;&gt;&lt;code&gt;get_model()&lt;/code&gt;&lt;/a&gt; become usable.</source>
          <target state="translated">이 단계가 완료되면 &lt;a href=&quot;#django.apps.apps.get_model&quot;&gt; &lt;code&gt;get_model()&lt;/code&gt; &lt;/a&gt; 과 같은 모델에서 작동하는 API를 사용할 수있게됩니다.</target>
        </trans-unit>
        <trans-unit id="2953f2561ce177f56af024f2dd92e1f59d25403c" translate="yes" xml:space="preserve">
          <source>Once those steps are complete, you can start browsing the documentation by going to your admin interface and clicking the &amp;ldquo;Documentation&amp;rdquo; link in the upper right of the page.</source>
          <target state="translated">이러한 단계가 완료되면 관리자 인터페이스로 이동하여 페이지 오른쪽 상단의 &quot;문서&quot;링크를 클릭하여 설명서 찾아보기를 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1239ce07e292603a287e3a01f0eb30465810a2ec" translate="yes" xml:space="preserve">
          <source>Once you have &lt;code&gt;MytypeField&lt;/code&gt;, you can use it in any model, just like any other &lt;code&gt;Field&lt;/code&gt; type:</source>
          <target state="translated">당신은 일단 &lt;code&gt;MytypeField&lt;/code&gt; 을 , 당신은 단지 다른 것처럼, 모든 모델에서 사용할 수있는 &lt;code&gt;Field&lt;/code&gt; 유형 :</target>
        </trans-unit>
        <trans-unit id="b3891fc58305b0a5a423532b9868592dc59f7e43" translate="yes" xml:space="preserve">
          <source>Once you have a &lt;code&gt;Client&lt;/code&gt; instance, you can call any of the following methods:</source>
          <target state="translated">당신은 일단 &lt;code&gt;Client&lt;/code&gt; 인스턴스를, 당신은 다음 방법 중 하나를 호출 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d52a875481cca2d8c66414f94d375f0c665ec6c2" translate="yes" xml:space="preserve">
          <source>Once you have a compiled &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object, you can render a context with it. You can reuse the same template to render it several times with different contexts.</source>
          <target state="translated">컴파일 된 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 객체가 있으면 컨텍스트를 렌더링 할 수 있습니다. 동일한 템플릿을 재사용하여 다른 컨텍스트로 여러 번 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b7c2b14858900752e7f2ec09ad28d32ec131ad8" translate="yes" xml:space="preserve">
          <source>Once you have configured your installation, run &lt;code&gt;manage.py migrate&lt;/code&gt; to install the single database table that stores session data.</source>
          <target state="translated">설치를 구성한 후 &lt;code&gt;manage.py migrate&lt;/code&gt; 를 실행 하여 세션 데이터를 저장하는 단일 데이터베이스 테이블을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="4e3f8d55fa3db6648c5321fd5704f17bc2706d5f" translate="yes" xml:space="preserve">
          <source>Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework works like this:</source>
          <target state="translated">로거, 핸들러, 필터 및 포맷터를 구성한 후에는 로깅 호출을 코드에 배치해야합니다. 로깅 프레임 워크를 사용하면 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="06625db7449c235ed03be7a56ab284c2fd23316a" translate="yes" xml:space="preserve">
          <source>Once you have defined your models, you need to tell Django you&amp;rsquo;re going to &lt;em&gt;use&lt;/em&gt; those models. Do this by editing your settings file and changing the &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting to add the name of the module that contains your &lt;code&gt;models.py&lt;/code&gt;.</source>
          <target state="translated">모델을 정의한 후에는 Django에 해당 모델 을 &lt;em&gt;사용하도록&lt;/em&gt; 지시해야 &lt;em&gt;합니다&lt;/em&gt; . 설정 파일을 편집하고 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정을 변경 하여 &lt;code&gt;models.py&lt;/code&gt; 가 포함 된 모듈의 이름을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b7449018ba0036e62aa7a8073bea808f1634e08d" translate="yes" xml:space="preserve">
          <source>Once you have established the many-to-many relationships, you can issue queries. Just as with normal many-to-many relationships, you can query using the attributes of the many-to-many-related model:</source>
          <target state="translated">다 대 다 관계를 설정하면 쿼리를 발행 할 수 있습니다. 일반적인 다 대 다 관계와 마찬가지로 다 대 다 관련 모델의 속성을 사용하여 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="767d3c1c5b235cde245b661bd7ecf4af97258d00" translate="yes" xml:space="preserve">
          <source>Once you have your new migration files, you should apply them to your database to make sure they work as expected:</source>
          <target state="translated">새 마이그레이션 파일이 있으면 데이터베이스에 적용하여 예상대로 작동하는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="31d824ef7fe4e79e96012a6f5d6b173e1c8aa4d9" translate="yes" xml:space="preserve">
          <source>Once you turn autocommit off, you get the default behavior of your database adapter, and Django won&amp;rsquo;t help you. Although that behavior is specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;, implementations of adapters aren&amp;rsquo;t always consistent with one another. Review the documentation of the adapter you&amp;rsquo;re using carefully.</source>
          <target state="translated">자동 커밋을 해제하면 데이터베이스 어댑터의 기본 동작이 나타나고 장고는 도움이되지 않습니다. 이 동작은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 지정되어 있지만&lt;strong&gt;&lt;/strong&gt; 어댑터 구현이 항상 서로 일치하는 것은 아닙니다. 사용중인 어댑터의 설명서를주의해서 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="70514e68968e05bdbca4da60663cee7e48cbe4c6" translate="yes" xml:space="preserve">
          <source>Once you turn autocommit off, you get the default behavior of your database adapter, and Django won&amp;rsquo;t help you. Although that behavior is specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;, implementations of adapters aren&amp;rsquo;t always consistent with one another. Review the documentation of the adapter you&amp;rsquo;re using carefully.</source>
          <target state="translated">자동 커밋을 끄면 데이터베이스 어댑터의 기본 동작이 적용되고 Django는 도움이되지 않습니다. 해당 동작이 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 지정되어 있지만 어댑터 구현이 항상 서로 일치하는 것은 아닙니다. 사용중인 어댑터의 설명서를주의 깊게 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="c2aa97694ea5a295cf72f827c19c4c4b345fc129" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re done with the tutorial, you can look through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains lots of great information and is a must read for anyone who&amp;rsquo;d like to become a regular contributor to Django. If you&amp;rsquo;ve got questions, it&amp;rsquo;s probably got the answers.</source>
          <target state="translated">튜토리얼을 마친 후에는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Django의&lt;/a&gt; 나머지 공헌에 대한 문서를 살펴볼 수 있습니다 . 그것은 많은 훌륭한 정보를 포함하고 있으며 장고에 정기적으로 기여하고 싶은 사람이라면 반드시 읽어야합니다. 궁금한 점이 있으면 아마도 답이있을 것입니다.</target>
        </trans-unit>
        <trans-unit id="8e568fb70b21c8fd63c7f04987964ee004b22af7" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re done with the tutorial, you can look through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains lots of great information and is a must read for anyone who&amp;rsquo;d like to become a regular contributor to Django. If you&amp;rsquo;ve got questions, it&amp;rsquo;s probably got the answers.</source>
          <target state="translated">튜토리얼을 마치고 나면, &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/index/&quot;&gt;기여에 대한 Django의&lt;/a&gt; 나머지 문서를 살펴볼 수 있습니다 . 여기에는 많은 훌륭한 정보가 포함되어 있으며 장고에 정기적으로 기여하고 싶은 사람이라면 반드시 읽어야합니다. 질문이 있다면 아마도 답을 얻었을 것입니다.</target>
        </trans-unit>
        <trans-unit id="94bfb4f8d2f6bac07ddde9a443c7b4ad253d96dc" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re in a transaction, you can choose either to apply the changes you&amp;rsquo;ve performed until this point with &lt;a href=&quot;#django.db.transaction.commit&quot;&gt;&lt;code&gt;commit()&lt;/code&gt;&lt;/a&gt;, or to cancel them with &lt;a href=&quot;#django.db.transaction.rollback&quot;&gt;&lt;code&gt;rollback()&lt;/code&gt;&lt;/a&gt;. These functions are defined in &lt;a href=&quot;#module-django.db.transaction&quot;&gt;&lt;code&gt;django.db.transaction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">트랜잭션이 완료되면 &lt;a href=&quot;#django.db.transaction.commit&quot;&gt; &lt;code&gt;commit()&lt;/code&gt; &lt;/a&gt; 으로이 시점까지 수행 한 변경 사항을 적용 하거나 &lt;a href=&quot;#django.db.transaction.rollback&quot;&gt; &lt;code&gt;rollback()&lt;/code&gt; &lt;/a&gt; 으로 취소 하도록 선택할 수 있습니다 . 이 기능은 &lt;a href=&quot;#module-django.db.transaction&quot;&gt; &lt;code&gt;django.db.transaction&lt;/code&gt; &lt;/a&gt; 에 정의되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6fc30a8ed1ee54ee2a8ad8fe75695abc03a12eee" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re in the shell, explore the &lt;a href=&quot;../topics/db/queries&quot;&gt;database API&lt;/a&gt;:</source>
          <target state="translated">쉘에 들어가면 &lt;a href=&quot;../topics/db/queries&quot;&gt;데이터베이스 API를&lt;/a&gt; 탐색하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2d2e5917827940324544b1fdd9370ee3bee88f3" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re ready, it is time to &lt;a href=&quot;../topics/install&quot;&gt;install the new Django version&lt;/a&gt;. If you are using &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; and it is a major upgrade, you might want to set up a new environment with all the dependencies first.</source>
          <target state="translated">준비가되면 &lt;a href=&quot;../topics/install&quot;&gt;새로운 Django 버전&lt;/a&gt; 을 설치할 차례 입니다. &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; 를 사용 중이고 주요 업그레이드 인 경우 모든 종속성이있는 새 환경을 먼저 설정하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c76020cbbbd7de9f7a65a250fca1df664bf7051" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re ready, it is time to &lt;a href=&quot;../topics/install&quot;&gt;install the new Django version&lt;/a&gt;. If you are using a &lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt;&lt;code&gt;virtual environment&lt;/code&gt;&lt;/a&gt; and it is a major upgrade, you might want to set up a new environment with all the dependencies first.</source>
          <target state="translated">준비가되면 &lt;a href=&quot;../topics/install&quot;&gt;새로운 Django 버전&lt;/a&gt; 을 설치할 차례 입니다. &lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt; &lt;code&gt;virtual environment&lt;/code&gt; &lt;/a&gt; 사용 중이고 주요 업그레이드 인 경우 먼저 모든 종속성이있는 새 환경을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3601b6f980a5ed721dd3f6813d175eff6425690c" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve cleaned up your models, name the file &lt;code&gt;models.py&lt;/code&gt; and put it in the Python package that holds your app. Then add the app to your &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">모델을 정리 한 후에는 &lt;code&gt;models.py&lt;/code&gt; 파일 이름 을 지정하고 앱을 보유한 Python 패키지에 넣으십시오. 그런 다음 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 앱을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="dddb377d8f9821df9e564ad3cdd2743cd7bb459c" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance with a set of data and validated it, you can access the clean data via its &lt;code&gt;cleaned_data&lt;/code&gt; attribute:</source>
          <target state="translated">일련의 데이터 가 포함 된 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스를 생성 하고 유효성을 검사 한 후 &lt;code&gt;cleaned_data&lt;/code&gt; 속성을 통해 클린 데이터에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7fd70ea6a4e1deee0b3f0def90a2d54bbf639bb" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created a fixture and placed it in a &lt;code&gt;fixtures&lt;/code&gt; directory in one of your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, you can use it in your unit tests by specifying a &lt;code&gt;fixtures&lt;/code&gt; class attribute on your &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; subclass:</source>
          <target state="translated">조명기를 생성하고 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 중 하나의 &lt;code&gt;fixtures&lt;/code&gt; 디렉토리에 배치하면 &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스 에 &lt;code&gt;fixtures&lt;/code&gt; 클래스 속성을 지정하여 유닛 테스트에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b490d3d98321be447b59796b137ee29f847904c0" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created your &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass, you might consider overriding a few standard methods, depending on your field&amp;rsquo;s behavior. The list of methods below is in approximately decreasing order of importance, so start from the top.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 하위 클래스를 만든 후에는 필드의 동작에 따라 몇 가지 표준 메서드를 재정의하는 것이 좋습니다. 아래의 방법 목록은 중요도가 떨어지는 순서이므로 맨 처음부터 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="197b7b0e6149f4e2e6712d214786714045eb3c1f" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created your &lt;a href=&quot;models&quot;&gt;data models&lt;/a&gt;, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects. This document explains how to use this API. Refer to the &lt;a href=&quot;../../ref/models/index&quot;&gt;data model reference&lt;/a&gt; for full details of all the various model lookup options.</source>
          <target state="translated">&lt;a href=&quot;models&quot;&gt;데이터 모델을&lt;/a&gt; 생성하면 Django는 자동으로 데이터베이스 생성 API를 제공하여 객체를 생성, 검색, 업데이트 및 삭제할 수 있습니다. 이 문서는이 API를 사용하는 방법을 설명합니다. 모든 다양한 모델 조회 옵션에 대한 자세한 내용은 &lt;a href=&quot;../../ref/models/index&quot;&gt;데이터 모델 참조&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="88aa93333b5daf9d68ee1cfd8a3f1aa27dcc950e" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created your &lt;code&gt;DataSource&lt;/code&gt;, you can find out how many layers of data it contains by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.DataSource.layer_count&quot;&gt;&lt;code&gt;layer_count&lt;/code&gt;&lt;/a&gt; property, or (equivalently) by using the &lt;code&gt;len()&lt;/code&gt; function. For information on accessing the layers of data themselves, see the next section:</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; 를 만든 후에 는 &lt;a href=&quot;#django.contrib.gis.gdal.DataSource.layer_count&quot;&gt; &lt;code&gt;layer_count&lt;/code&gt; &lt;/a&gt; 속성 에 액세스 하거나 &lt;code&gt;len()&lt;/code&gt; 함수를 사용하여 포함 된 데이터 레이어 수를 확인할 수 있습니다 . 데이터 계층 자체에 액세스하는 방법에 대한 자세한 내용은 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="703ec67080b97801ea35faae3735f4dec7ffed77" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve done that, rows will be given &lt;code&gt;&quot;error&quot;&lt;/code&gt; and/or &lt;code&gt;&quot;required&quot;&lt;/code&gt; classes, as needed. The HTML will look something like:</source>
          <target state="translated">이 작업을 수행하면 필요에 따라 행에 &lt;code&gt;&quot;error&quot;&lt;/code&gt; 및 / 또는 &lt;code&gt;&quot;required&quot;&lt;/code&gt; 클래스가 제공됩니다. HTML은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dff17ab7c2df9ca6a63551eb8b689e7637d33a02" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve done the above, that action will no longer be available site-wide.</source>
          <target state="translated">위의 작업을 수행하면 사이트 전체에서 해당 작업을 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fbbfd787ddca57ffde3e7f85fbc478dfaccd6e48" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got Django set up, you&amp;rsquo;ll follow this general process to integrate with an existing database.</source>
          <target state="translated">Django가 설정되면이 일반적인 프로세스를 따라 기존 데이터베이스와 통합됩니다.</target>
        </trans-unit>
        <trans-unit id="797b332432d36066025b180960c38cbc2da0d493" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got mod_wsgi installed and activated, edit your Apache server&amp;rsquo;s &lt;a href=&quot;https://wiki.apache.org/httpd/DistrosDefaultLayout&quot;&gt;httpd.conf&lt;/a&gt; file and add the following.</source>
          <target state="translated">mod_wsgi를 설치하고 활성화 한 후 Apache 서버의 &lt;a href=&quot;https://wiki.apache.org/httpd/DistrosDefaultLayout&quot;&gt;httpd.conf&lt;/a&gt; 파일을 편집 하고 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2f5c9fbb1a2d3eba9e116b1f222d33cd90b8f048" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got mod_wsgi installed and activated, edit your Apache server&amp;rsquo;s &lt;a href=&quot;https://wiki.apache.org/httpd/DistrosDefaultLayout&quot;&gt;httpd.conf&lt;/a&gt; file and add the following. If you are using a version of Apache older than 2.4, replace &lt;code&gt;Require all granted&lt;/code&gt; with &lt;code&gt;Allow from all&lt;/code&gt; and also add the line &lt;code&gt;Order deny,allow&lt;/code&gt; above it.</source>
          <target state="translated">mod_wsgi를 설치하고 활성화했으면 Apache 서버의 &lt;a href=&quot;https://wiki.apache.org/httpd/DistrosDefaultLayout&quot;&gt;httpd.conf&lt;/a&gt; 파일을 편집 하고 다음을 추가하십시오. 당신은 2.4 이전의 아파치 버전을 사용하는 경우, 대체 &lt;code&gt;Require all granted&lt;/code&gt; 로 &lt;code&gt;Allow from all&lt;/code&gt; 라인 추가도하고 &lt;code&gt;Order deny,allow&lt;/code&gt; 그 위에.</target>
        </trans-unit>
        <trans-unit id="7ea2962dc3da1b2a4e7f20b94682599e9793c872" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve looked through some of that information, you&amp;rsquo;ll be ready to go out and find a ticket of your own to write a patch for. Pay special attention to tickets with the &amp;ldquo;easy pickings&amp;rdquo; criterion. These tickets are often much simpler in nature and are great for first time contributors. Once you&amp;rsquo;re familiar with contributing to Django, you can move on to writing patches for more difficult and complicated tickets.</source>
          <target state="translated">일단 그 정보를 살펴보면, 나가서 패치를 작성할 자신의 티켓을 찾을 수 있습니다. &quot;쉬운 피킹&quot;기준으로 티켓에 특별한주의를 기울이십시오. 이 티켓은 본질적으로 훨씬 단순하며 처음 기고자에게 좋습니다. Django에 공헌하는 것에 익숙해지면 더 어렵고 복잡한 티켓을위한 패치 작성으로 넘어갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1583459c98b69257fec18665dd137de13c329bb" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve prepared your translations &amp;ndash; or, if you want to use the translations that come with Django &amp;ndash; you&amp;rsquo;ll need to activate translation for your app.</source>
          <target state="translated">번역을 준비했거나 Django와 함께 제공되는 번역을 사용하려면 앱의 번역을 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ad0717e6526c6287ba99f236bd12fe3752678e2" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve set up HTTPS, enable the following settings.</source>
          <target state="translated">HTTPS를 설정 한 후 다음 설정을 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="433e15e0611bc8ef3ad131e1aaf3db8eb32d5b0a" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve squashed a migration, you should not then re-squash that squashed migration until you have fully transitioned it to a normal migration.</source>
          <target state="translated">마이그레이션을 취소 한 후에는 마이그레이션 된 마이그레이션을 일반 마이그레이션으로 완전히 전환 할 때까지 스쿼시하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="5cdecad320333138fd82d8195736190509b2a0ed" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve squashed your migration, you should then commit it alongside the migrations it replaces and distribute this change to all running instances of your application, making sure that they run &lt;code&gt;migrate&lt;/code&gt; to store the change in their database.</source>
          <target state="translated">마이그레이션을 중단 한 후에는 마이그레이션과 함께 마이그레이션을 커밋하고이 변경 사항을 실행중인 모든 응용 프로그램 인스턴스에 배포하여 &lt;code&gt;migrate&lt;/code&gt; 을 실행 하여 변경 사항을 데이터베이스에 저장해야합니다.</target>
        </trans-unit>
        <trans-unit id="1349fa263311d97d35f37c2c1a842df10861817d" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve verified that your patch and your test are working correctly, it&amp;rsquo;s a good idea to run the entire Django test suite to verify that your change hasn&amp;rsquo;t introduced any bugs into other areas of Django. While successfully passing the entire test suite doesn&amp;rsquo;t guarantee your code is bug free, it does help identify many bugs and regressions that might otherwise go unnoticed.</source>
          <target state="translated">패치와 테스트가 올바르게 작동하는지 확인한 후에는 변경 사항이 Django의 다른 영역에 버그를 도입하지 않았는지 확인하기 위해 전체 Django 테스트 스위트를 실행하는 것이 좋습니다. 전체 테스트 스위트를 성공적으로 통과한다고해서 코드에 버그가없는 것은 아닙니다. 그렇지 않으면 눈에 띄지 않을 수있는 많은 버그와 회귀를 식별하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="9cfdfebb993364de477eb12a7abb4fc259f77346" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve written tests, run them using the &lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; command of your project&amp;rsquo;s &lt;code&gt;manage.py&lt;/code&gt; utility:</source>
          <target state="translated">테스트를 작성한 후에는 프로젝트의 &lt;code&gt;manage.py&lt;/code&gt; 유틸리티 의 &lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 테스트를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="854eafd257c13871740ebcffeae796127fc7faaf" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve written your filter definition, you need to register it with your &lt;code&gt;Library&lt;/code&gt; instance, to make it available to Django&amp;rsquo;s template language:</source>
          <target state="translated">필터 정의를 작성한 후에는 Django의 템플릿 언어에서 사용할 수 있도록 &lt;code&gt;Library&lt;/code&gt; 인스턴스에 필터 정의를 등록해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1dc74ddc71ef956145231d8e56d23a70390692ec" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve written your model admin definitions, they can be registered with any &lt;code&gt;Admin&lt;/code&gt; instance:</source>
          <target state="translated">모델 관리자 정의를 작성하면 모든 &lt;code&gt;Admin&lt;/code&gt; 인스턴스에 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5f3273b9d64e8fc4a352c674738831de3f6ba4d" translate="yes" xml:space="preserve">
          <source>Once your cache is configured, you&amp;rsquo;ve got two choices for how to store data in the cache:</source>
          <target state="translated">캐시가 구성되면 캐시에 데이터를 저장하는 방법에 대한 두 가지 선택 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e94ea20a9162ba0f7f32f56c3b82565f3d3e459" translate="yes" xml:space="preserve">
          <source>Once your models are defined, Django can automatically create a professional, production ready &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;administrative interface&lt;/a&gt; &amp;ndash; a website that lets authenticated users add, change and delete objects. The only step required is to register your model in the admin site:</source>
          <target state="translated">모델이 정의되면 Django는 인증 된 사용자가 개체를 추가, 변경 및 삭제할 수있는 웹 사이트 인 전문적인 프로덕션 준비 &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;관리 인터페이스를&lt;/a&gt; 자동으로 만들 수 있습니다. 필요한 단계는 관리자 사이트에 모델을 등록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5381ea3412869876f5aedc5f6a12e33628d362ab" translate="yes" xml:space="preserve">
          <source>One bookmarklet is available from the &lt;code&gt;admindocs&lt;/code&gt; page:</source>
          <target state="translated">&lt;code&gt;admindocs&lt;/code&gt; 페이지 에서 하나의 책갈피를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b8655d015723e3ffff545c6f5985e5282ef053b" translate="yes" xml:space="preserve">
          <source>One class of attacks can be prevented by always serving user uploaded content from a distinct top-level or second-level domain. This prevents any exploit blocked by &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt; protections such as cross site scripting. For example, if your site runs on &lt;code&gt;example.com&lt;/code&gt;, you would want to serve uploaded content (the &lt;a href=&quot;../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting) from something like &lt;code&gt;usercontent-example.com&lt;/code&gt;. It&amp;rsquo;s &lt;em&gt;not&lt;/em&gt; sufficient to serve content from a subdomain like &lt;code&gt;usercontent.example.com&lt;/code&gt;.</source>
          <target state="translated">별도의 최상위 또는 2 차 도메인에서 사용자가 업로드 한 컨텐츠를 항상 제공함으로써 한 가지 공격 유형을 방지 할 수 있습니다. 이렇게하면 사이트 간 스크립팅과 같은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;동일한 출처 정책&lt;/a&gt; 보호로 인해 악용되는 것을 방지 할 수 있습니다. 예를 들어 사이트가 &lt;code&gt;example.com&lt;/code&gt; 에서 실행되는 경우 &lt;code&gt;usercontent-example.com&lt;/code&gt; 과 같은 콘텐츠에서 업로드 된 콘텐츠 ( &lt;a href=&quot;../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 설정) 를 제공하려고합니다 . 그건 &lt;em&gt;하지&lt;/em&gt; 같은 하위 도메인에서 콘텐츠를 제공하기에 충분 &lt;code&gt;usercontent.example.com&lt;/code&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d35da2cb46849f2d42b8f4c677498c5a2d6f7139" translate="yes" xml:space="preserve">
          <source>One common reason for overriding these methods is to augment the context data that is provided to the template that renders the view. In the following example, the change view is overridden so that the rendered template is provided some extra mapping data that would not otherwise be available:</source>
          <target state="translated">이러한 메소드를 대체하는 한 가지 일반적인 이유는보기를 렌더링하는 템플리트에 제공되는 컨텍스트 데이터를 보강하기위한 것입니다. 다음 예에서는 렌더링보기에 다른 방법으로는 사용할 수없는 추가 매핑 데이터가 제공되도록 변경보기가 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="6f73d920aa2ddf0ff594a6ef8ce772d924c15bd9" translate="yes" xml:space="preserve">
          <source>One difference is in the attribute naming: The model that defines the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; uses the attribute name of that field itself, whereas the &amp;ldquo;reverse&amp;rdquo; model uses the lowercased model name of the original model, plus &lt;code&gt;'_set'&lt;/code&gt; (just like reverse one-to-many relationships).</source>
          <target state="translated">속성 이름 지정의 한 가지 차이점이 있습니다. &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 를 정의하는 모델 은 해당 필드 자체의 속성 이름을 사용하는 반면, &quot;역 (reverse)&quot;모델은 원래 모델의 소문자 모델 이름과 &lt;code&gt;'_set'&lt;/code&gt; ( 일대일의 역순)을 사용합니다. -많은 관계).</target>
        </trans-unit>
        <trans-unit id="52fbd495f92e2902784ac9baa74b04fcd17f36e9" translate="yes" xml:space="preserve">
          <source>One difference to note when using &lt;code&gt;prefetch_related&lt;/code&gt; is that objects created by a query can be shared between the different objects that they are related to i.e. a single Python model instance can appear at more than one point in the tree of objects that are returned. This will normally happen with foreign key relationships. Typically this behavior will not be a problem, and will in fact save both memory and CPU time.</source>
          <target state="translated">&lt;code&gt;prefetch_related&lt;/code&gt; 를 사용할 때 유의해야 할 한 가지 차이점 은 쿼리에 의해 생성 된 객체가 관련된 여러 객체간에 공유 될 수 있다는 것입니다. 즉, 단일 Python 모델 인스턴스가 반환 된 객체 트리에서 둘 이상의 지점에 나타날 수 있습니다. 이것은 일반적으로 외래 키 관계에서 발생합니다. 일반적으로이 동작은 문제가되지 않으며 실제로 메모리와 CPU 시간을 모두 절약합니다.</target>
        </trans-unit>
        <trans-unit id="fcc69356192552c22d0ee8a7f4168cdb22150eb7" translate="yes" xml:space="preserve">
          <source>One excellent feature of Memcached is its ability to share a cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a &lt;em&gt;single&lt;/em&gt; cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt;, either as a semicolon or comma delimited string, or as a list.</source>
          <target state="translated">Memcached의 뛰어난 기능 중 하나는 여러 서버에서 캐시를 공유 할 수 있다는 것입니다. 즉, 여러 시스템에서 Memcached 데몬을 실행할 수 있으며 프로그램은 각 시스템에서 캐시 값을 복제 할 필요없이 시스템 그룹을 &lt;em&gt;단일&lt;/em&gt; 캐시 로 취급합니다 . 이 기능을 이용하려면 모든 서버 주소를 &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt; 에 세미콜론 또는 쉼표로 구분 된 문자열 또는 목록으로 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="a0c4a4a0c4be81cbd7b437378f9e85751aa6b578" translate="yes" xml:space="preserve">
          <source>One finder is disabled by default: &lt;code&gt;django.contrib.staticfiles.finders.DefaultStorageFinder&lt;/code&gt;. If added to your &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt; setting, it will look for static files in the default file storage as defined by the &lt;a href=&quot;#std:setting-DEFAULT_FILE_STORAGE&quot;&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;django.contrib.staticfiles.finders.DefaultStorageFinder&lt;/code&gt; : 하나의 파인더는 기본적으로 사용 불가능합니다 . &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; &lt;/a&gt; 설정에 추가 되면 &lt;a href=&quot;#std:setting-DEFAULT_FILE_STORAGE&quot;&gt; &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; &lt;/a&gt; 설정에 정의 된대로 기본 파일 스토리지에서 정적 파일을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="8796608c8ed158d52b85b7539105298913a9d7eb" translate="yes" xml:space="preserve">
          <source>One limitation of custom user models is that installing a custom user model will break any proxy model extending &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;. Proxy models must be based on a concrete base class; by defining a custom user model, you remove the ability of Django to reliably identify the base class.</source>
          <target state="translated">사용자 정의 사용자 모델의 한 가지 한계는 사용자 정의 사용자 모델을 설치하면 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; 를&lt;/a&gt; 확장하는 프록시 모델이 중단된다는 것 입니다. 프록시 모델은 구체적인 기본 클래스를 기반으로해야합니다. 사용자 정의 사용자 모델을 정의하면 Django가 기본 클래스를 안정적으로 식별하는 기능이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="8252f91a0142e0f1f7810c559eb6eeff09a7e40a" translate="yes" xml:space="preserve">
          <source>One of the main features of debug mode is the display of detailed error pages. If your app raises an exception when &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, Django will display a detailed traceback, including a lot of metadata about your environment, such as all the currently defined Django settings (from &lt;code&gt;settings.py&lt;/code&gt;).</source>
          <target state="translated">디버그 모드의 주요 기능 중 하나는 자세한 오류 페이지를 표시하는 것입니다. &lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 일 때 앱에서 예외가 발생하면 Django는 현재 정의 된 모든 Django 설정 ( &lt;code&gt;settings.py&lt;/code&gt; ) 과 같은 환경에 대한 많은 메타 데이터를 포함하여 자세한 역 추적을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="a7af099253a75c3b7896229949ed8b4d0dfb3dfb" translate="yes" xml:space="preserve">
          <source>One of the most powerful parts of Django is the automatic admin interface. It reads metadata from your models to provide a quick, model-centric interface where trusted users can manage content on your site. The admin&amp;rsquo;s recommended use is limited to an organization&amp;rsquo;s internal management tool. It&amp;rsquo;s not intended for building your entire front end around.</source>
          <target state="translated">Django의 가장 강력한 부분 중 하나는 자동 관리 인터페이스입니다. 신뢰할 수있는 사용자가 사이트의 콘텐츠를 관리 할 수있는 모델 중심의 빠른 인터페이스를 제공하기 위해 모델에서 메타 데이터를 읽습니다. 관리자의 권장 사용은 조직의 내부 관리 도구로 제한됩니다. 전체 프론트 엔드를 구축하기위한 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="325b632f60776937fe0278c6d5b74af921fc4d83" translate="yes" xml:space="preserve">
          <source>One of the topmost, after &lt;code&gt;SessionMiddleware&lt;/code&gt; (uses session data) and &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; (modifies &lt;code&gt;Vary&lt;/code&gt; header).</source>
          <target state="translated">&lt;code&gt;SessionMiddleware&lt;/code&gt; (세션 데이터 사용) 및 &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; ( &lt;code&gt;Vary&lt;/code&gt; 헤더 수정 ) 이후 최상위 항목 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="2b4130a908f3b1b3021bf422aaa436600226ba47" translate="yes" xml:space="preserve">
          <source>One place Django uses &lt;code&gt;get_absolute_url()&lt;/code&gt; is in the admin app. If an object defines this method, the object-editing page will have a &amp;ldquo;View on site&amp;rdquo; link that will jump you directly to the object&amp;rsquo;s public view, as given by &lt;code&gt;get_absolute_url()&lt;/code&gt;.</source>
          <target state="translated">Django가 &lt;code&gt;get_absolute_url()&lt;/code&gt; 사용하는 한 곳 은 관리 앱에 있습니다. 객체가이 메소드를 정의하는 경우 객체 편집 페이지에는 &quot;사이트에서보기&quot;링크가 &lt;code&gt;get_absolute_url()&lt;/code&gt; 의해 제공된 것처럼 객체의 공개보기로 바로 이동할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3f1cb2de20a0dd60228e6a239c6ba2218e20e8d9" translate="yes" xml:space="preserve">
          <source>One positional argument is required: the class to which the model will be related. This works exactly the same as it does for &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, including all the options regarding &lt;a href=&quot;#recursive-relationships&quot;&gt;recursive&lt;/a&gt; and &lt;a href=&quot;#lazy-relationships&quot;&gt;lazy&lt;/a&gt; relationships.</source>
          <target state="translated">하나의 위치 인수가 필요합니다. 모델이 관련된 클래스입니다. 이것은 &lt;a href=&quot;#recursive-relationships&quot;&gt;재귀&lt;/a&gt; 및 &lt;a href=&quot;#lazy-relationships&quot;&gt;게으른&lt;/a&gt; 관계 에 관한 모든 옵션을 포함하여 &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 와 동일하게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="fc925b117affa0ade4bdd69f5aabf69f1242debe" translate="yes" xml:space="preserve">
          <source>One possible use of &lt;a href=&quot;#django.urls.resolve&quot;&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/a&gt; would be to test whether a view would raise a &lt;code&gt;Http404&lt;/code&gt; error before redirecting to it:</source>
          <target state="translated">&lt;a href=&quot;#django.urls.resolve&quot;&gt; &lt;code&gt;resolve()&lt;/code&gt; &lt;/a&gt; 의 한 가지 가능한 사용법은 뷰로 리디렉션하기 전에 &lt;code&gt;Http404&lt;/code&gt; 오류가 발생 하는지 테스트 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="17affb526021724b56b79a75409ec922fe1ee514" translate="yes" xml:space="preserve">
          <source>One small problem, though. It takes a lot of screen space to display all the fields for entering related &lt;code&gt;Choice&lt;/code&gt; objects. For that reason, Django offers a tabular way of displaying inline related objects. To use it, change the &lt;code&gt;ChoiceInline&lt;/code&gt; declaration to read:</source>
          <target state="translated">그러나 하나의 작은 문제. 관련 &lt;code&gt;Choice&lt;/code&gt; 개체 를 입력하기위한 모든 필드를 표시하려면 많은 화면 공간이 필요 합니다. 이런 이유로 Django는 인라인 관련 객체를 표 형식으로 표시합니다. 사용하려면 &lt;code&gt;ChoiceInline&lt;/code&gt; 선언을 다음과 같이 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="463e554d2cf1d72ee789f287bd7cfb00f6a89d54" translate="yes" xml:space="preserve">
          <source>One solution is to disable server-side cursors for a connection in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; by setting &lt;a href=&quot;settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt;&lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">한 가지 해결책은 &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 에서 연결을 위해 서버 측 커서를 비활성화 하여 설정하는 것입니다&lt;a href=&quot;settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt; &lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="92c378607313029c98f29e172485bb93294cfa11" translate="yes" xml:space="preserve">
          <source>One thing is left to do. In an RSS feed, each &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; has a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;. We need to tell the framework what data to put into those elements.</source>
          <target state="translated">해야 할 일이 남아 있습니다. RSS 피드에서 각 &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; 에는 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 이 있습니다 . &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; 이 있습니다. 이러한 요소에 어떤 데이터를 넣을 것인지 프레임 워크에 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="64761a4b2513c0fea467c008774b2e8d461a2beb" translate="yes" xml:space="preserve">
          <source>One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public.</source>
          <target state="translated">Django 앱을 만드는 일반적인 워크 플로 중 하나는 모델을 만들고 관리자 사이트를 최대한 빨리 가동하여 직원 (또는 클라이언트)이 데이터를 채우기 시작할 수 있도록하는 것입니다. 그런 다음 데이터가 대중에게 제공되는 방식을 개발하십시오.</target>
        </trans-unit>
        <trans-unit id="62b2c3ff1937b4b7f9fd3bcb172889cfa14560c7" translate="yes" xml:space="preserve">
          <source>One useful way to call &lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt;&lt;code&gt;ping_google()&lt;/code&gt;&lt;/a&gt; is from a model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt; &lt;code&gt;ping_google()&lt;/code&gt; &lt;/a&gt; 을 호출하는 유용한 방법 는 모델의 &lt;code&gt;save()&lt;/code&gt; 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="17eb63729cb4ca1e9175bfce2cb9b9d88cdf1052" translate="yes" xml:space="preserve">
          <source>One way to do this is to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so that the queryset for the paginated list of books can hang off the publisher found as the single object. In order to do this, we need to have two different querysets:</source>
          <target state="translated">이를 수행하는 한 가지 방법은 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 와&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;하여 페이지 매김 된 책 목록에 대한 쿼리 세트 가 단일 오브젝트로 찾은 발행자를 중단시킬 수 있도록하는 것입니다. 이를 위해서는 두 가지 쿼리 세트가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0a1cc9054977d0a023d4d3b5f485eb8e86742a4b" translate="yes" xml:space="preserve">
          <source>One way to do this is to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so that the queryset for the paginated list of books can hang off the publisher found as the single object. In order to do this, we need to have two different querysets:</source>
          <target state="translated">이를 수행하는 한 가지 방법은 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 을 결합 하여 페이지가 매겨진 도서 목록에 대한 쿼리 세트 가 단일 객체로 발견 된 발행인을 중단시킬 수 있도록하는 것입니다. 이를 수행하려면 두 개의 서로 다른 쿼리 세트가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="41f303fa2fa76a8d5b84fa7acb2f90143da403df" translate="yes" xml:space="preserve">
          <source>One, you can make sure to run each untrusted variable through the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter (documented below), which converts potentially harmful HTML characters to unharmful ones. This was the default solution in Django for its first few years, but the problem is that it puts the onus on &lt;em&gt;you&lt;/em&gt;, the developer / template author, to ensure you&amp;rsquo;re escaping everything. It&amp;rsquo;s easy to forget to escape data.</source>
          <target state="translated">하나는 &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터 (아래에 설명되어 있음)를 통해 신뢰할 수없는 각 변수를 실행하여 잠재적으로 유해한 HTML 문자를 유해하지 않은 문자로 변환 할 수 있습니다. 이것이 처음 몇 년 동안 Django의 기본 솔루션 이었지만 문제는 그것이 Onus를 켜는 것입니다&lt;em&gt; 당신&lt;/em&gt; 에게있는 거 탈출 모든 것을 보장하기 위하여 개발자 / 템플릿 저자. 데이터 이스케이프를 잊어 버리기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="5e552a2e648dcc45b50e74d0e4c89fd9b2d22ab3" translate="yes" xml:space="preserve">
          <source>One-to-many relationships</source>
          <target state="translated">일대 다 관계</target>
        </trans-unit>
        <trans-unit id="20ec6acfe79375c3d49a487621b6f11703727d27" translate="yes" xml:space="preserve">
          <source>One-to-one relationships</source>
          <target state="translated">일대일 관계</target>
        </trans-unit>
        <trans-unit id="4b68ab7517c53fd87db0b3a6835784386aa78fb7" translate="yes" xml:space="preserve">
          <source>One-to-one relationships are very similar to many-to-one relationships. If you define a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; on your model, instances of that model will have access to the related object via an attribute of the model.</source>
          <target state="translated">일대일 관계는 다 대일 관계와 매우 유사합니다. 당신이 정의하면&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;모델에서 OneToOneField해당 모델의 인스턴스는 모델의 속성을 통해 관련 개체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97b3481d82cdab92ba77fee20f5da98da43ecd1b" translate="yes" xml:space="preserve">
          <source>Only Python modules and packages are included in the package by default. To include additional files, we&amp;rsquo;ll need to create a &lt;code&gt;MANIFEST.in&lt;/code&gt; file. The setuptools docs referred to in the previous step discuss this file in more details. To include the templates, the &lt;code&gt;README.rst&lt;/code&gt; and our &lt;code&gt;LICENSE&lt;/code&gt; file, create a file &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt; with the following contents:</source>
          <target state="translated">기본적으로 Python 모듈 및 패키지 만 패키지에 포함됩니다. 추가 파일을 포함 시키려면 &lt;code&gt;MANIFEST.in&lt;/code&gt; 파일 을 만들어야 합니다. 이전 단계에서 언급 한 setuptools 문서는이 파일에 대해 자세히 설명합니다. 템플리트, &lt;code&gt;README.rst&lt;/code&gt; 및 &lt;code&gt;LICENSE&lt;/code&gt; 파일 을 포함하려면 &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt; 파일을 작성하십시오. 다음 컨텐츠로 .</target>
        </trans-unit>
        <trans-unit id="1fce148cd28a6d831801c9e33d3b8a3831a5e379" translate="yes" xml:space="preserve">
          <source>Only a few keys are required in the &lt;code&gt;ds_input&lt;/code&gt; dictionary to create a raster: &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;srid&lt;/code&gt;. All other parameters have default values (see the table below). The list of keys that can be passed in the &lt;code&gt;ds_input&lt;/code&gt; dictionary is closely related but not identical to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; properties. Many of the parameters are mapped directly to those properties; the others are described below.</source>
          <target state="translated">&lt;code&gt;ds_input&lt;/code&gt; 딕셔너리에는 &lt;code&gt;width&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; 및 &lt;code&gt;srid&lt;/code&gt; 와 같은 몇 개의 키만 필요합니다 . 다른 모든 매개 변수에는 기본값이 있습니다 (아래 표 참조). &lt;code&gt;ds_input&lt;/code&gt; 사전에 전달 될 수있는 키 목록 은 밀접하게 관련되어 있지만 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 특성 과 동일하지는 않습니다 . 많은 매개 변수가 해당 특성에 직접 맵핑됩니다. 나머지는 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7d519722edd8f91aa9627c3bc9de76db3f17444" translate="yes" xml:space="preserve">
          <source>Only commutative operators can be used in exclusion constraints.</source>
          <target state="translated">제외 제약 조건에는 정류 연산자 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="118c204498e41611d1aa64a9174ae0deab8590fa" translate="yes" xml:space="preserve">
          <source>Only fields of the model are reloaded from the database. Other database-dependent values such as annotations aren&amp;rsquo;t reloaded. Any &lt;a href=&quot;../utils#django.utils.functional.cached_property&quot;&gt;&lt;code&gt;@cached_property&lt;/code&gt;&lt;/a&gt; attributes aren&amp;rsquo;t cleared either.</source>
          <target state="translated">모델의 필드 만 데이터베이스에서 다시로드됩니다. 주석과 같은 다른 데이터베이스 종속 값은 다시로드되지 않습니다. 모든 &lt;a href=&quot;../utils#django.utils.functional.cached_property&quot;&gt; &lt;code&gt;@cached_property&lt;/code&gt; 의&lt;/a&gt; 속성 중 하나를 삭제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81f771fd27be6e788932e7308fcda610d615c10d" translate="yes" xml:space="preserve">
          <source>Only languages listed in the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting can be selected. If you want to restrict the language selection to a subset of provided languages (because your application doesn&amp;rsquo;t provide all those languages), set &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; to a list of languages. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정에 나열된 언어 만 선택할 수 있습니다. 언어 선택을 제공된 언어의 하위 집합으로 제한하려면 (응용 프로그램이 모든 언어를 제공하지 않기 때문에) &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; 를&lt;/a&gt; 설정하십시오. 를 언어 목록으로 하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="598d1d19ae95d2cec14e6d3d02561fe81bd52fae" translate="yes" xml:space="preserve">
          <source>Only one more thing to do: we need to tell the admin that &lt;code&gt;Question&lt;/code&gt; objects have an admin interface. To do this, open the &lt;code&gt;polls/admin.py&lt;/code&gt; file, and edit it to look like this:</source>
          <target state="translated">한 가지 더해야 할 일 : 관리자에게 &lt;code&gt;Question&lt;/code&gt; 객체에 관리자 인터페이스가 있음을 알려야합니다 . 이렇게하려면 &lt;code&gt;polls/admin.py&lt;/code&gt; 를여십시오. 파일을 다음과 같이 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="d187541e5c50bb85bbf53e7de2e2b853a43bb4df" translate="yes" xml:space="preserve">
          <source>Only set it to &lt;code&gt;False&lt;/code&gt; if you&amp;rsquo;re rendering non-HTML templates!</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로만 설정HTML이 아닌 템플릿을 렌더링하는 경우 !</target>
        </trans-unit>
        <trans-unit id="02223d043024f670b97c33914336f2eb06bc17fd" translate="yes" xml:space="preserve">
          <source>Only space between &lt;em&gt;tags&lt;/em&gt; is removed &amp;ndash; not space between tags and text. In this example, the space around &lt;code&gt;Hello&lt;/code&gt; won&amp;rsquo;t be stripped:</source>
          <target state="translated">태그와 텍스트 사이의 공백이 아니라 &lt;em&gt;태그&lt;/em&gt; 사이의 공백 만 제거됩니다. 이 예에서는 &lt;code&gt;Hello&lt;/code&gt; 주위의 공간 은 제거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cf315a07b04a81601a60855f71141828daa89ad4" translate="yes" xml:space="preserve">
          <source>Only support for PostgreSQL is implemented.</source>
          <target state="translated">PostgreSQL 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="8a7ec474d6e2d23ebc63b6c63bb988c49dc019ef" translate="yes" xml:space="preserve">
          <source>Only supported for the &lt;code&gt;mysql&lt;/code&gt; backend (see the &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-charsets.html&quot;&gt;MySQL manual&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;mysql&lt;/code&gt; 백엔드 에서만 지원됩니다 ( &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-charsets.html&quot;&gt;MySQL 설명서&lt;/a&gt; 참조). 참조).</target>
        </trans-unit>
        <trans-unit id="7c0d14d34ab8a7955c088997331af3fa6a9e7049" translate="yes" xml:space="preserve">
          <source>Only used in the definition of ManyToManyFields on self. Consider the following model:</source>
          <target state="translated">자체의 ManyToManyFields 정의에만 사용됩니다. 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4acf1510b1d98d5e3adcf9076d95b782cf93d327" translate="yes" xml:space="preserve">
          <source>Only used when a custom intermediary model is specified. Django will normally determine which fields of the intermediary model to use in order to establish a many-to-many relationship automatically. However, consider the following models:</source>
          <target state="translated">사용자 정의 중개 모델이 지정된 경우에만 사용됩니다. Django는 일반적으로 다 대다 관계를 자동으로 설정하기 위해 중개 모델의 어떤 필드를 사용할지 결정합니다. 그러나 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="9254969541b35d72fc959e9b7fe870bcb83c672e" translate="yes" xml:space="preserve">
          <source>Open Geospatial Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;OpenGIS Simple Feature Specification For SQL&lt;/a&gt;.</source>
          <target state="translated">Open Geospatial Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;OpenGIS SQL의 간단한 기능 사양&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="abacb099ec5118e6e55042c66b29d2709c4e6df5" translate="yes" xml:space="preserve">
          <source>Open or reopen the file (which also does &lt;code&gt;File.seek(0)&lt;/code&gt;). The &lt;code&gt;mode&lt;/code&gt; argument allows the same values as Python&amp;rsquo;s built-in &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일을 열거 나 다시여십시오 ( &lt;code&gt;File.seek(0)&lt;/code&gt; 도 수행함 ). &lt;code&gt;mode&lt;/code&gt; 인수와 같은 값을 허용 파이썬의 내장 &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3832cd1bf27026789b46ef8c2cbece9d54caa9de" translate="yes" xml:space="preserve">
          <source>Open transactions have a performance cost for your database server. To minimize this overhead, keep your transactions as short as possible. This is especially important if you&amp;rsquo;re using &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; in long-running processes, outside of Django&amp;rsquo;s request / response cycle.</source>
          <target state="translated">열린 트랜잭션에는 데이터베이스 서버의 성능 비용이 있습니다. 이 오버 헤드를 최소화하려면 트랜잭션을 최대한 짧게 유지하십시오. &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 사용하는 경우 특히 중요합니다장고의 요청 / 응답주기를 벗어난 장기 실행 프로세스에서 을 .</target>
        </trans-unit>
        <trans-unit id="32793e991ad0f2475e18136d291c51ab1d339516" translate="yes" xml:space="preserve">
          <source>Open your settings file (&lt;code&gt;mysite/settings.py&lt;/code&gt;, remember) and add a &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option in the &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">설정 파일 ( &lt;code&gt;mysite/settings.py&lt;/code&gt; , 기억)을 열고 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 옵션을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="6434fe05c72675fd05c47cdbb933de7e31125e90" translate="yes" xml:space="preserve">
          <source>OpenGIS Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;Simple Feature Specification For SQL&lt;/a&gt;.</source>
          <target state="translated">OpenGIS Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;SQL의 간단한 기능 사양&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9badfbd517d8be4261428821d0d24138f988f1ee" translate="yes" xml:space="preserve">
          <source>Opens or reopens the file associated with this instance in the specified &lt;code&gt;mode&lt;/code&gt;. Unlike the standard Python &lt;code&gt;open()&lt;/code&gt; method, it doesn&amp;rsquo;t return a file descriptor.</source>
          <target state="translated">지정된 &lt;code&gt;mode&lt;/code&gt; 에서이 인스턴스와 관련된 파일을 열거 나 다시 엽니 다 . 표준 Python &lt;code&gt;open()&lt;/code&gt; 메소드 와 달리 파일 디스크립터를 리턴하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0323b5e451ddf487ae0f9edb7081ee29301ba290" translate="yes" xml:space="preserve">
          <source>Opens the file given by &lt;code&gt;name&lt;/code&gt;. Note that although the returned file is guaranteed to be a &lt;code&gt;File&lt;/code&gt; object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 으로 주어진 파일을 엽니 다 . 리턴 된 파일이 &lt;code&gt;File&lt;/code&gt; 오브젝트 임을 보장하지만 실제로는 일부 서브 클래스 일 수도 있습니다. 원격 파일 저장의 경우 읽기 / 쓰기 속도가 매우 느릴 수 있으므로 경고하십시오.</target>
        </trans-unit>
        <trans-unit id="103728613a9cc06c0578fcde7fc71050f537ea45" translate="yes" xml:space="preserve">
          <source>Opera 10.5+</source>
          <target state="translated">오페라 10.5+</target>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="03c6a5370c606a7007cc455f9ad4f55be771bfe8" translate="yes" xml:space="preserve">
          <source>Operations have a relatively simple API, and they&amp;rsquo;re designed so that you can easily write your own to supplement the built-in Django ones. The basic structure of an &lt;code&gt;Operation&lt;/code&gt; looks like this:</source>
          <target state="translated">작업은 비교적 간단한 API를 가지고 있으며 내장 된 장고를 보완하기 위해 자신만의 것을 쉽게 작성할 수 있도록 설계되었습니다. &lt;code&gt;Operation&lt;/code&gt; 의 기본 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0242933f1377922941730d3a9a935c73e4996c91" translate="yes" xml:space="preserve">
          <source>Operators that return new &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">새 반환 운영자 &lt;code&gt;QuerySet&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="900a4c57a6781dc8aa8c7a72e161410e12278326" translate="yes" xml:space="preserve">
          <source>Optimizing PostgreSQL&amp;rsquo;s configuration</source>
          <target state="translated">PostgreSQL 구성 최적화</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="475f499a740fe5799b1c67d8e4e26cb243d985a8" translate="yes" xml:space="preserve">
          <source>Optional (&lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;). 150 characters or fewer.</source>
          <target state="translated">선택 사항입니다 ( &lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt; ). 150 자 이하</target>
        </trans-unit>
        <trans-unit id="e66aff119da5b74c8ec06d905b22607e760e1684" translate="yes" xml:space="preserve">
          <source>Optional (&lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;). 30 characters or fewer.</source>
          <target state="translated">선택 사항입니다 ( &lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt; ). 30 자 이하</target>
        </trans-unit>
        <trans-unit id="10e30e11eaa8f36beb627e1a0f319f0e7d46a4e7" translate="yes" xml:space="preserve">
          <source>Optional (&lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;). Email address.</source>
          <target state="translated">선택 사항입니다 ( &lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt; ). 이메일 주소.</target>
        </trans-unit>
        <trans-unit id="f0d8694ad53a2924ebd7f6ff587227e39c0eaa32" translate="yes" xml:space="preserve">
          <source>Optional arguments</source>
          <target state="translated">선택적 인수</target>
        </trans-unit>
        <trans-unit id="9b6ba92e748f3335310f550931483cf88fec0fdb" translate="yes" xml:space="preserve">
          <source>Optional keyword arguments are:</source>
          <target state="translated">선택적 키워드 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="742b85c136c1ca04e82668422d5efca1b119f047" translate="yes" xml:space="preserve">
          <source>Optional methods</source>
          <target state="translated">선택적 방법</target>
        </trans-unit>
        <trans-unit id="08ad86a9f1de732a056ed6b271a3dd4a1a66436a" translate="yes" xml:space="preserve">
          <source>Optional string. A unique identifier for the issue. Identifiers should follow the pattern &lt;code&gt;applabel.X001&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is one of the letters &lt;code&gt;CEWID&lt;/code&gt;, indicating the message severity (&lt;code&gt;C&lt;/code&gt; for criticals, &lt;code&gt;E&lt;/code&gt; for errors and so). The number can be allocated by the application, but should be unique within that application.</source>
          <target state="translated">선택적 문자열. 문제의 고유 식별자입니다. 식별자는 &lt;code&gt;applabel.X001&lt;/code&gt; 패턴을 따라야합니다 . 여기서 &lt;code&gt;X&lt;/code&gt; 는 문자 심각도 (위험에 대한 &lt;code&gt;C&lt;/code&gt; , 오류에 대한 &lt;code&gt;E&lt;/code&gt; 등) 를 나타내는 &lt;code&gt;CEWID&lt;/code&gt; 문자 중 하나입니다 . 번호는 응용 프로그램에서 할당 할 수 있지만 해당 응용 프로그램 내에서 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="b66038a3c02f9a96da2de4ad83dde3b6fd772cf3" translate="yes" xml:space="preserve">
          <source>Optional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object&amp;rsquo;s history in &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">선택 과목. 사용자의 이름과 같은 더 긴 공식 식별자입니다. 구현 된 경우 이는 &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; 의 오브젝트 히스토리에서 사용자 이름과 함께 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="061866f2e6c0cdfec2a4982a7d90d650093a48e7" translate="yes" xml:space="preserve">
          <source>Optional. A regular expression, as a string, that &lt;a href=&quot;#django.db.models.FilePathField&quot;&gt;&lt;code&gt;FilePathField&lt;/code&gt;&lt;/a&gt; will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: &lt;code&gt;&quot;foo.*\.txt$&quot;&lt;/code&gt;, which will match a file called &lt;code&gt;foo23.txt&lt;/code&gt; but not &lt;code&gt;bar.txt&lt;/code&gt; or &lt;code&gt;foo23.png&lt;/code&gt;.</source>
          <target state="translated">선택 과목. &lt;a href=&quot;#django.db.models.FilePathField&quot;&gt; &lt;code&gt;FilePathField&lt;/code&gt; &lt;/a&gt; 가 파일 이름을 필터링하는 데 사용할 정규 표현식 (문자열)입니다 . 정규식은 전체 경로가 아닌 기본 파일 이름에 적용됩니다. 예 : &lt;code&gt;&quot;foo.*\.txt$&quot;&lt;/code&gt; 는 &lt;code&gt;foo23.txt&lt;/code&gt; 라는 파일과 일치 하지만 &lt;code&gt;bar.txt&lt;/code&gt; 또는 &lt;code&gt;foo23.png&lt;/code&gt; 와는 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3e29ee6bb955883371605aef97a8811a60e6c87c" translate="yes" xml:space="preserve">
          <source>Optional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">선택 과목. 사용자의 이름과 같은 짧은 비공식 식별자입니다. 구현 된 경우 &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; 헤더의 사용자에게 인사말에서 사용자 이름이 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="51a658020e63dbe321aa155cd99501c0cf557082" translate="yes" xml:space="preserve">
          <source>Optional. An object providing context for the message (for example, the model where the problem was discovered). The object should be a model, field, or manager or any other object that defines a &lt;code&gt;__str__()&lt;/code&gt; method. The method is used while reporting all messages and its result precedes the message.</source>
          <target state="translated">선택 과목. 메시지에 대한 컨텍스트를 제공하는 개체 (예 : 문제가 발견 된 모델) 객체는 모델, 필드 또는 관리자이거나 &lt;code&gt;__str__()&lt;/code&gt; 메서드 를 정의하는 다른 객체 여야 합니다 . 이 방법은 모든 메시지를보고하는 동안 사용되며 결과는 메시지보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="1936ff6bbb449f848f49c6ae78c3aa3aa37a355e" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;False&lt;/code&gt;. Specifies whether all subdirectories of &lt;a href=&quot;#django.db.models.FilePathField.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; should be included</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. &lt;a href=&quot;#django.db.models.FilePathField.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt; 모든 하위 디렉토리를 포함 해야하는지 여부를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="c6efc47fa95924bfdc447bff456d7202911619d1" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;False&lt;/code&gt;. Specifies whether folders in the specified location should be included. Either this or &lt;a href=&quot;#django.db.models.FilePathField.allow_files&quot;&gt;&lt;code&gt;allow_files&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. 지정된 위치의 폴더를 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.db.models.FilePathField.allow_files&quot;&gt; &lt;code&gt;allow_files&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="859a13f143ebceeae06636e103999ba77f0b08f3" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;False&lt;/code&gt;. Specifies whether folders in the specified location should be included. Either this or &lt;a href=&quot;#django.forms.FilePathField.allow_files&quot;&gt;&lt;code&gt;allow_files&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. 지정된 위치의 폴더를 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.forms.FilePathField.allow_files&quot;&gt; &lt;code&gt;allow_files&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="4c8bf189c542c692617e3001bd9a6dfe770462db" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;True&lt;/code&gt;. Specifies whether files in the specified location should be included. Either this or &lt;a href=&quot;#django.db.models.FilePathField.allow_folders&quot;&gt;&lt;code&gt;allow_folders&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다. 지정된 위치의 파일을 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.db.models.FilePathField.allow_folders&quot;&gt; &lt;code&gt;allow_folders&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="f6a3952c4ecfc5610a215c9e91c6fd5fd72b1ac0" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;True&lt;/code&gt;. Specifies whether files in the specified location should be included. Either this or &lt;a href=&quot;#django.forms.FilePathField.allow_folders&quot;&gt;&lt;code&gt;allow_folders&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다. 지정된 위치의 파일을 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.forms.FilePathField.allow_folders&quot;&gt; &lt;code&gt;allow_folders&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="fb4e88563898cfc6b1e24fe4d3ab342226f2930f" translate="yes" xml:space="preserve">
          <source>Optional. Use this when you don&amp;rsquo;t want to have a last page with very few items. If the last page would normally have a number of items less than or equal to &lt;code&gt;orphans&lt;/code&gt;, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, &lt;code&gt;per_page=10&lt;/code&gt;, and &lt;code&gt;orphans=3&lt;/code&gt;, there will be two pages; the first page with 10 items and the second (and last) page with 13 items. &lt;code&gt;orphans&lt;/code&gt; defaults to zero, which means pages are never combined and the last page may have one item.</source>
          <target state="translated">선택 과목. 항목이 거의없는 마지막 페이지를 원하지 않는 경우이 옵션을 사용하십시오. 마지막 페이지가 일반적으로 &lt;code&gt;orphans&lt;/code&gt; 이하의 항목 수를 가지면 해당 항목은 페이지에 항목을 그대로 두지 않고 이전 페이지 (마지막 페이지가 됨)에 추가됩니다. 예를 들어, 23 개의 항목 &lt;code&gt;per_page=10&lt;/code&gt; 및 &lt;code&gt;orphans=3&lt;/code&gt; 으로 두 페이지가 있습니다. 10 개의 항목이있는 첫 번째 페이지와 13 개의 항목이있는 두 번째 (및 마지막) 페이지 &lt;code&gt;orphans&lt;/code&gt; 기본값은 0입니다. 즉, 페이지가 결합되지 않으며 마지막 페이지에 하나의 항목이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14c1bff36682bc530c11e77aee6ae2707c4b47f6" translate="yes" xml:space="preserve">
          <source>Optional. Whether or not the first page is allowed to be empty. If &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;object_list&lt;/code&gt; is empty, then an &lt;code&gt;EmptyPage&lt;/code&gt; error will be raised.</source>
          <target state="translated">선택 과목. 첫 페이지를 비울 수 있는지 여부 경우 &lt;code&gt;False&lt;/code&gt; 과 &lt;code&gt;object_list&lt;/code&gt; 가 비어, 다음 &lt;code&gt;EmptyPage&lt;/code&gt; 의 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0f0162cab2f0f669c986db914fb247821cb1ec00" translate="yes" xml:space="preserve">
          <source>Or ask for the average rating of all the books written by author(s) we have on file:</source>
          <target state="translated">또는 파일로 작성한 저자가 작성한 모든 책의 평균 등급을 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="3e165d6eeab75c3a82d3fe0f1d27fa4aa66617e4" translate="yes" xml:space="preserve">
          <source>Or if &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; is configured using the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">또는 &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt; &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 를&lt;/a&gt; 사용하여 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt; 을 구성한 경우 :</target>
        </trans-unit>
        <trans-unit id="25621e679324af50dad4ec149022a79ed2b71273" translate="yes" xml:space="preserve">
          <source>Or if only some variables should be escaped, you can use:</source>
          <target state="translated">또는 일부 변수 만 이스케이프해야하는 경우 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0c61c22e60e27ae3fc6d5b7070d0cf89978aee2" translate="yes" xml:space="preserve">
          <source>Or if the field isn&amp;rsquo;t declared directly on the form (such as model form fields), you can use the &lt;a href=&quot;api#django.forms.Form.fields&quot;&gt;&lt;code&gt;Form.fields&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">또는 필드가 양식에서 직접 선언되지 않은 경우 (예 : 모델 양식 필드) &lt;a href=&quot;api#django.forms.Form.fields&quot;&gt; &lt;code&gt;Form.fields&lt;/code&gt; &lt;/a&gt; 속성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a5c20782dc46697c9459b8ca83e94d56d6e36da" translate="yes" xml:space="preserve">
          <source>Or in Python code:</source>
          <target state="translated">또는 파이썬 코드에서 :</target>
        </trans-unit>
        <trans-unit id="51f1927e73396518f1297b2575004e5095f6b52c" translate="yes" xml:space="preserve">
          <source>Or it can be written as a class whose instances are callable, like this:</source>
          <target state="translated">또는 다음과 같이 인스턴스를 호출 할 수있는 클래스로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="628dfe73ba7840dc380d070dd15676af902666dd" translate="yes" xml:space="preserve">
          <source>Or on a field level:</source>
          <target state="translated">또는 필드 레벨에서 :</target>
        </trans-unit>
        <trans-unit id="a93f0f9fb53a117410c2e9ad2f200b2f307fcf27" translate="yes" xml:space="preserve">
          <source>Or to allow only some active users to log in:</source>
          <target state="translated">또는 일부 활성 사용자 만 로그인 할 수 있도록하려면 :</target>
        </trans-unit>
        <trans-unit id="95e5d3f75703413a8b79b401fe7d0d695c3cda3c" translate="yes" xml:space="preserve">
          <source>Or to call &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; when applicable to reduce the number of queries even further:</source>
          <target state="translated">또는 적용 가능한 경우 &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 쿼리 수를 더욱 줄입니다.</target>
        </trans-unit>
        <trans-unit id="96e4c7d2f9d2a2b030616fa913c4e00422de6f1d" translate="yes" xml:space="preserve">
          <source>Or to run fast tests and the core one (even though it&amp;rsquo;s slow):</source>
          <target state="translated">또는 빠른 테스트와 핵심 테스트를 실행하려면 (느리더라도) :</target>
        </trans-unit>
        <trans-unit id="93b807bbd527363221a89cbd863d6640212fda60" translate="yes" xml:space="preserve">
          <source>Or use a common ancestor to hold the &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;. This requires using an explicit &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; from each parent model to the common ancestor to avoid a clash between the fields that are automatically generated and inherited by the child:</source>
          <target state="translated">또는 공통 조상을 사용하여 &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 를 유지하십시오 . 자식에 의해 자동으로 생성되고 상속되는 필드 사이의 충돌을 피하기 위해 각 부모 모델에서 공통 조상 으로 명시적인 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1b076f6cdc8de07a4839942de5e78d29d923fbf6" translate="yes" xml:space="preserve">
          <source>Or you can construct one from a Python string like this:</source>
          <target state="translated">또는 다음과 같이 파이썬 문자열로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2aeed12399e9670e50e9f1d89661b30754da3a5" translate="yes" xml:space="preserve">
          <source>Or you can use &lt;code&gt;no-python-format&lt;/code&gt; so that all percent signs are treated as literals:</source>
          <target state="translated">또는 &lt;code&gt;no-python-format&lt;/code&gt; 하여 모든 백분율 기호를 리터럴로 취급 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="789685f9c51dad66c9d22df1380fb36080ed3822" translate="yes" xml:space="preserve">
          <source>Or you could run it directly on a production or staging deployment to verify that the correct settings are in use (omitting &lt;code&gt;--settings&lt;/code&gt;). You could even make it part of your integration test suite.</source>
          <target state="translated">또는 프로덕션 또는 스테이징 배치에서 직접 실행하여 올바른 설정이 사용 &lt;code&gt;--settings&lt;/code&gt; ( --settings 생략 ) 확인할 수 있습니다. 통합 테스트 스위트의 일부로 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b617cd1ba98d84e1130d043eaeefe7d8402eb25f" translate="yes" xml:space="preserve">
          <source>Or you may alter the user&amp;rsquo;s role from the SQL shell (assuming this is done from an existing superuser account):</source>
          <target state="translated">또는 SQL 쉘에서 사용자 역할을 변경할 수 있습니다 (기존 수퍼 유저 계정에서 수행 한 경우).</target>
        </trans-unit>
        <trans-unit id="05b1d66bf715e37c24910768d027c42362464ed6" translate="yes" xml:space="preserve">
          <source>Or, if &lt;code&gt;country&lt;/code&gt; is a field with &lt;code&gt;choices&lt;/code&gt;, it will have a &lt;a href=&quot;../models/instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; method available as an attribute, allowing you to group on the display string rather than the &lt;code&gt;choices&lt;/code&gt; key:</source>
          <target state="translated">경우 또는 &lt;code&gt;country&lt;/code&gt; 와 필드 &lt;code&gt;choices&lt;/code&gt; , 그것은 것입니다 &lt;a href=&quot;../models/instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt; 오히려보다 디스플레이 문자열을 그룹화 할 수 있도록 속성으로 가능한 방법을 &lt;code&gt;choices&lt;/code&gt; 키 :</target>
        </trans-unit>
        <trans-unit id="ce3b6a8261b1b6c88c0c24b29441ab053c10b703" translate="yes" xml:space="preserve">
          <source>Or, more succinctly, you can decorate the class instead and pass the name of the method to be decorated as the keyword argument &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="translated">또는 더 간결하게 클래스를 장식하고 키워드 인수 &lt;code&gt;name&lt;/code&gt; 으로 장식 할 메서드 이름을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a1681e612a2025087b703fdf1f8f617e506b053" translate="yes" xml:space="preserve">
          <source>Oracle</source>
          <target state="translated">Oracle</target>
        </trans-unit>
        <trans-unit id="bd1334b0d5dcd9f25f6b9dd58e5744953cdbce11" translate="yes" xml:space="preserve">
          <source>Oracle Database does not support storing JSON scalar values. Only JSON objects and arrays (represented in Python using &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;) are supported.</source>
          <target state="translated">Oracle Database는 JSON 스칼라 값 저장을 지원하지 않습니다. JSON 객체 및 배열 ( &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; 를&lt;/a&gt; 사용하여 Python으로 표시됨) 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="24c906abad94128562e1df0b2509b20fb80ebc90" translate="yes" xml:space="preserve">
          <source>Oracle SQL equivalent:</source>
          <target state="translated">Oracle SQL과 동등한 기능 :</target>
        </trans-unit>
        <trans-unit id="3b4a2c983578c980d5fb7441f41c11a4556cc78d" translate="yes" xml:space="preserve">
          <source>Oracle and &lt;a href=&quot;../databases#postgresql-server-side-cursors&quot;&gt;PostgreSQL&lt;/a&gt; use server-side cursors to stream results from the database without loading the entire result set into memory.</source>
          <target state="translated">Oracle과 &lt;a href=&quot;../databases#postgresql-server-side-cursors&quot;&gt;PostgreSQL&lt;/a&gt; 은 서버 측 커서를 사용하여 전체 결과 세트를 메모리에로드하지 않고 데이터베이스에서 결과를 스트리밍합니다.</target>
        </trans-unit>
        <trans-unit id="9484b2a00b52ee8efc0908b6cfa8ca325dba0bd8" translate="yes" xml:space="preserve">
          <source>Oracle and SQLite</source>
          <target state="translated">Oracle 및 SQLite</target>
        </trans-unit>
        <trans-unit id="b7cec2eeafd5ab234afeacc8d167e821f3308189" translate="yes" xml:space="preserve">
          <source>Oracle does not support partial indexes. Instead, partial indexes can be emulated using functional indexes. Use a &lt;a href=&quot;../../topics/migrations&quot;&gt;migration&lt;/a&gt; to add the index using &lt;a href=&quot;../migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Oracle은 부분 인덱스를 지원하지 않습니다. 대신, 기능 인덱스를 사용하여 부분 인덱스를 에뮬레이션 할 수 있습니다. &lt;a href=&quot;../migration-operations#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; 을&lt;/a&gt; 사용하여 색인을 추가하려면 &lt;a href=&quot;../../topics/migrations&quot;&gt;마이그레이션&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9f60ec0d1bb6250568212204c04dc28c3ae6c5b7" translate="yes" xml:space="preserve">
          <source>Oracle doesn&amp;rsquo;t support bitwise XOR operation.</source>
          <target state="translated">Oracle은 비트 XOR 연산을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2bb858c0c3c56c066673baa7ce0106b1b7e5aa94" translate="yes" xml:space="preserve">
          <source>Oracle doesn&amp;rsquo;t support the &lt;code&gt;SHA224&lt;/code&gt; function.</source>
          <target state="translated">Oracle은 &lt;code&gt;SHA224&lt;/code&gt; 기능을 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="560221169f9cab89c0441238ad0defe5bfa95fb8" translate="yes" xml:space="preserve">
          <source>Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value. Additionally, the backend turns database identifiers to all-uppercase.</source>
          <target state="translated">Oracle은 이름 길이 제한을 30 자로 제한합니다. 이를 수용하기 위해 백엔드는 잘린 이름의 마지막 네 문자를 반복 가능한 MD5 해시 값으로 대체하여 데이터베이스 식별자를 자릅니다. 또한 백엔드는 데이터베이스 식별자를 모두 대문자로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="c0d228d153ffc5d5fa61bcb753bb50f0393cd1ea" translate="yes" xml:space="preserve">
          <source>Oracle notes</source>
          <target state="translated">오라클 노트</target>
        </trans-unit>
        <trans-unit id="33a07706252bf9e24da2916db3db3060aab7c186" translate="yes" xml:space="preserve">
          <source>Oracle support was added.</source>
          <target state="translated">오라클 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="fad4910fc509879ef081d844fda3726f6b14c55c" translate="yes" xml:space="preserve">
          <source>Oracle users</source>
          <target state="translated">Oracle 사용자</target>
        </trans-unit>
        <trans-unit id="3507f061e1f240a2a4bc257e26a155bc7a8a45a2" translate="yes" xml:space="preserve">
          <source>Oracle users, refer to the &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/index.html&quot;&gt;Oracle manual&lt;/a&gt; for details on how to set (&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/choosing-character-set.html&quot;&gt;section 2&lt;/a&gt;) or alter (&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/character-set-migration.html&quot;&gt;section 11&lt;/a&gt;) the database character set encoding.</source>
          <target state="translated">Oracle 사용자 는 데이터베이스 문자 세트 인코딩 을 설정 ( &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/choosing-character-set.html&quot;&gt;섹션 2&lt;/a&gt; ) 또는 변경 ( &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/character-set-migration.html&quot;&gt;섹션 11&lt;/a&gt; )하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/index.html&quot;&gt;Oracle 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="296a5959a53a3acc498b705e649dc5c5ed628ae7" translate="yes" xml:space="preserve">
          <source>Oracle: no requirements (see &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/datetime-data-types-and-time-zone-support.html#GUID-805AB986-DE12-4FEA-AF56-5AABCD2132DF&quot;&gt;Choosing a Time Zone File&lt;/a&gt;).</source>
          <target state="translated">Oracle : 요구 사항 없음 ( &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/datetime-data-types-and-time-zone-support.html#GUID-805AB986-DE12-4FEA-AF56-5AABCD2132DF&quot;&gt;시간대 파일 선택&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="30d87136b62cc92241cf688437d6474a9f92bac6" translate="yes" xml:space="preserve">
          <source>Order in which tests are executed</source>
          <target state="translated">테스트가 실행되는 순서</target>
        </trans-unit>
        <trans-unit id="420c74ea5a94142dc2e8ddc45403f850816df75c" translate="yes" xml:space="preserve">
          <source>Order of &lt;code&gt;MIDDLEWARE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MIDDLEWARE&lt;/code&gt; 의 순서</target>
        </trans-unit>
        <trans-unit id="55995aea917745e5b9c1538926b64f813438d41b" translate="yes" xml:space="preserve">
          <source>Order of &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; clauses</source>
          <target state="translated">주문 &lt;code&gt;annotate()&lt;/code&gt; 및 &lt;code&gt;filter()&lt;/code&gt; 절</target>
        </trans-unit>
        <trans-unit id="7d2f7827be2e56452ab9e1eae8df3e8b6144bea7" translate="yes" xml:space="preserve">
          <source>Order of &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt; clauses</source>
          <target state="translated">주문 &lt;code&gt;annotate()&lt;/code&gt; 와 &lt;code&gt;values()&lt;/code&gt; 조항</target>
        </trans-unit>
        <trans-unit id="8e3feffbf3af227c58c043b37683f4707ea88216" translate="yes" xml:space="preserve">
          <source>Order of assets</source>
          <target state="translated">자산의 순서</target>
        </trans-unit>
        <trans-unit id="991d0fbf1a20045f117c183786a7bc2bd16ca132" translate="yes" xml:space="preserve">
          <source>Order of execution</source>
          <target state="translated">실행 순서</target>
        </trans-unit>
        <trans-unit id="db6e3d6df8111bad6222030723cf15a80b8e40d6" translate="yes" xml:space="preserve">
          <source>Ordering and pagination of the results are controlled by the related &lt;code&gt;ModelAdmin&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt;&lt;code&gt;get_ordering()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt;&lt;code&gt;get_paginator()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">결과의 순서 및 페이지 매김은 관련 &lt;code&gt;ModelAdmin&lt;/code&gt; 의 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt; &lt;code&gt;get_ordering()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt; &lt;code&gt;get_paginator()&lt;/code&gt; &lt;/a&gt; 메소드에 의해 제어됩니다 .</target>
        </trans-unit>
        <trans-unit id="005de91ef7aac968fb5cac1b25907b93799f647f" translate="yes" xml:space="preserve">
          <source>Ordering is not a free operation. Each field you add to the ordering incurs a cost to your database. Each foreign key you add will implicitly include all of its default orderings as well.</source>
          <target state="translated">주문은 무료 작업이 아닙니다. 주문에 추가 한 각 필드는 데이터베이스 비용이 발생합니다. 추가 한 각 외래 키에는 모든 기본 순서도 암시 적으로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8b5102222646eeb276b5e810050c372aa24580a7" translate="yes" xml:space="preserve">
          <source>Ordering is not free; each field to order by is an operation the database must perform. If a model has a default ordering (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;Meta.ordering&lt;/code&gt;&lt;/a&gt;) and you don&amp;rsquo;t need it, remove it on a &lt;code&gt;QuerySet&lt;/code&gt; by calling &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; with no parameters.</source>
          <target state="translated">주문은 무료가 아닙니다. 주문할 각 필드는 데이터베이스가 수행해야하는 작업입니다. 모델에 기본 순서 ( &lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;Meta.ordering&lt;/code&gt; &lt;/a&gt; )가 있고 필요하지 않은 경우 매개 변수없이 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 &lt;code&gt;QuerySet&lt;/code&gt; 에서 모델 을 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="53af4c39205242aabe13f143571457f5791a2efe" translate="yes" xml:space="preserve">
          <source>Ordering using &lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt;&lt;code&gt;ModelAdmin.ordering&lt;/code&gt;&lt;/a&gt; may cause performance problems as sorting on a large queryset will be slow.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt; &lt;code&gt;ModelAdmin.ordering&lt;/code&gt; 을&lt;/a&gt; 사용하여 주문 하면 큰 쿼리 집합에서 정렬이 느려 성능 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="170b53da47c53a430863bf01d78e2bd103f629f3" translate="yes" xml:space="preserve">
          <source>Ordinarily, annotations are generated on a per-object basis - an annotated &lt;code&gt;QuerySet&lt;/code&gt; will return one result for each object in the original &lt;code&gt;QuerySet&lt;/code&gt;. However, when a &lt;code&gt;values()&lt;/code&gt; clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original &lt;code&gt;QuerySet&lt;/code&gt;, the original results are grouped according to the unique combinations of the fields specified in the &lt;code&gt;values()&lt;/code&gt; clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group.</source>
          <target state="translated">일반적으로 주석은 객체별로 생성됩니다. 주석이 달린 &lt;code&gt;QuerySet&lt;/code&gt; 은 원래 &lt;code&gt;QuerySet&lt;/code&gt; 의 각 객체에 대해 하나의 결과를 반환합니다 . 그러나 &lt;code&gt;values()&lt;/code&gt; 절을 사용하여 결과 집합에 반환되는 열을 제한하는 경우 주석을 평가하는 방법이 약간 다릅니다. 원래 &lt;code&gt;QuerySet&lt;/code&gt; 의 각 결과에 대해 주석이 달린 결과를 리턴하는 대신 , 원래 결과는 &lt;code&gt;values()&lt;/code&gt; 절에 지정된 필드의 고유 한 조합에 따라 그룹화됩니다 . 그런 다음 각 고유 그룹에 주석이 제공됩니다. 주석은 그룹의 모든 구성원에 대해 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="3f10f78534f7589d00e4f60b98f5edf1e048c4d4" translate="yes" xml:space="preserve">
          <source>Ordinarily, serialized data for &lt;code&gt;Book&lt;/code&gt; would use an integer to refer to the author. For example, in JSON, a Book might be serialized as:</source>
          <target state="translated">일반적으로 &lt;code&gt;Book&lt;/code&gt; 의 직렬화 된 데이터 는 정수를 사용하여 저자를 나타냅니다. 예를 들어 JSON에서 책은 다음과 같이 직렬화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16141546793a331563f3f2fdc4d7dcbc40757661" translate="yes" xml:space="preserve">
          <source>Organization of code related to specific HTTP methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc.) can be addressed by separate methods instead of conditional branching.</source>
          <target state="translated">특정 HTTP 메소드 ( &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; 등) 와 관련된 코드 구성 은 조건부 분기 대신 별도의 메소드로 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="6d31d09863416a43257272008777412de3dc0343" translate="yes" xml:space="preserve">
          <source>Organizing models in a package</source>
          <target state="translated">패키지에서 모델 구성</target>
        </trans-unit>
        <trans-unit id="55da83428e96e3bf49eebf44fdc2f8c182ddbf21" translate="yes" xml:space="preserve">
          <source>Organizing templates</source>
          <target state="translated">템플릿 구성</target>
        </trans-unit>
        <trans-unit id="14447665d4c2d8f9f315b725d8b973ebb151e2c5" translate="yes" xml:space="preserve">
          <source>Origin API and 3rd-party integration</source>
          <target state="translated">오리진 API 및 타사 통합</target>
        </trans-unit>
        <trans-unit id="6cf7b1361d8726852a7325f31ec28d0d2e4f7221" translate="yes" xml:space="preserve">
          <source>Origin only: send only the &amp;ldquo;origin&amp;rdquo; in the referrer. The origin consists of the scheme, host and (optionally) port number. For example, if the user is visiting &lt;code&gt;https://example.com/page.html&lt;/code&gt;, the origin would be &lt;code&gt;https://example.com/&lt;/code&gt;.</source>
          <target state="translated">원점 만 : 리퍼러에서 &quot;원점&quot;만 보냅니다. 원본은 구성표, 호스트 및 (선택적) 포트 번호로 구성됩니다. 예를 들어 사용자가 &lt;code&gt;https://example.com/page.html&lt;/code&gt; 을 방문 하는 경우 출처는 &lt;code&gt;https://example.com/&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f6c8bcec7b648c9760b1a9ea6708ae59737c716c" translate="yes" xml:space="preserve">
          <source>Other &lt;code&gt;QuerySet&lt;/code&gt; methods</source>
          <target state="translated">다른 &lt;code&gt;QuerySet&lt;/code&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="65f29d4c86bb4f978641051185ab0c5b61b9d448" translate="yes" xml:space="preserve">
          <source>Other &lt;code&gt;django.security&lt;/code&gt; loggers not based on &lt;code&gt;SuspiciousOperation&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;SuspiciousOperation&lt;/code&gt; 을 기반으로하지 않는 다른 &lt;code&gt;django.security&lt;/code&gt; 로거 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d1ef4006e149656d7817ee292efc3130a7537e8a" translate="yes" xml:space="preserve">
          <source>Other Helpers</source>
          <target state="translated">다른 도우미</target>
        </trans-unit>
        <trans-unit id="db3716ee8a50c03cd8e126dc59e145dc9267c1af" translate="yes" xml:space="preserve">
          <source>Other Properties &amp;amp; Methods</source>
          <target state="translated">다른 속성 및 방법</target>
        </trans-unit>
        <trans-unit id="6e2191d6b97ca844ba9c5454d6d85c08f1e9f2b8" translate="yes" xml:space="preserve">
          <source>Other add-ons</source>
          <target state="translated">다른 부가 기능</target>
        </trans-unit>
        <trans-unit id="d042bb243a9d93f7d217c6e5a0c1a49c971c43e7" translate="yes" xml:space="preserve">
          <source>Other attributes</source>
          <target state="translated">다른 속성들</target>
        </trans-unit>
        <trans-unit id="8f0808417c4e94d8894a482d97d0418503902abe" translate="yes" xml:space="preserve">
          <source>Other authentication sources</source>
          <target state="translated">다른 인증 소스</target>
        </trans-unit>
        <trans-unit id="ef306d3af22afdd366097a5c56a90706f4ac8bb7" translate="yes" xml:space="preserve">
          <source>Other backends store datetimes without time zone information. If you switch from &lt;code&gt;USE_TZ = False&lt;/code&gt; to &lt;code&gt;USE_TZ = True&lt;/code&gt;, you must convert your data from local time to UTC &amp;ndash; which isn&amp;rsquo;t deterministic if your local time has DST.</source>
          <target state="translated">다른 백엔드는 시간대 정보없이 날짜 시간을 저장합니다. 당신이 전환되면 &lt;code&gt;USE_TZ = False&lt;/code&gt; 에 &lt;code&gt;USE_TZ = True&lt;/code&gt; 현지 시간 DST가있는 경우 결정하지 않습니다 - 당신은 UTC로 지역 시간에서 데이터를 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="aa6d8caad589ade3266bf1e83ffb4c334fa9991d" translate="yes" xml:space="preserve">
          <source>Other block tags (for example &lt;code&gt;{% for %}&lt;/code&gt; or &lt;code&gt;{% if %}&lt;/code&gt;) are not allowed inside a &lt;code&gt;blocktrans&lt;/code&gt; tag.</source>
          <target state="translated">다른 블록 태그 (예 : &lt;code&gt;{% for %}&lt;/code&gt; 또는 &lt;code&gt;{% if %}&lt;/code&gt; )는 &lt;code&gt;blocktrans&lt;/code&gt; 태그 내에서 허용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="9544b314eb0862d13316242019544705bef53896" translate="yes" xml:space="preserve">
          <source>Other block tags (for example &lt;code&gt;{% for %}&lt;/code&gt; or &lt;code&gt;{% if %}&lt;/code&gt;) are not allowed inside a &lt;code&gt;blocktranslate&lt;/code&gt; tag.</source>
          <target state="translated">다른 블록 태그 (예 : &lt;code&gt;{% for %}&lt;/code&gt; 또는 &lt;code&gt;{% if %}&lt;/code&gt; )는 &lt;code&gt;blocktranslate&lt;/code&gt; 태그 내에서 허용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="30f251e729d16aef2e5e61a11c227d160c9e8d9d" translate="yes" xml:space="preserve">
          <source>Other core functionalities</source>
          <target state="translated">다른 핵심 기능</target>
        </trans-unit>
        <trans-unit id="4bed2e8111f71065df59141e43a29a4b8f0bc963" translate="yes" xml:space="preserve">
          <source>Other database-related tips</source>
          <target state="translated">다른 데이터베이스 관련 팁</target>
        </trans-unit>
        <trans-unit id="5cb93deb997e7cfed93f5fb4038b0d930039d6e9" translate="yes" xml:space="preserve">
          <source>Other databases</source>
          <target state="translated">다른 데이터베이스</target>
        </trans-unit>
        <trans-unit id="ad24dd8dd4de3a366dfa2226270e532f5785c056" translate="yes" xml:space="preserve">
          <source>Other formats</source>
          <target state="translated">다른 형식</target>
        </trans-unit>
        <trans-unit id="ea910b17053e23533d815464a56b475af947b4f3" translate="yes" xml:space="preserve">
          <source>Other methods</source>
          <target state="translated">다른 방법</target>
        </trans-unit>
        <trans-unit id="1a080dcddf2ba764e5db781600567fddeadb8e52" translate="yes" xml:space="preserve">
          <source>Other middleware hooks</source>
          <target state="translated">다른 미들웨어 후크</target>
        </trans-unit>
        <trans-unit id="ed57bc8d21ee8cb372b5d9ff1936640dbca10641" translate="yes" xml:space="preserve">
          <source>Other model instance methods</source>
          <target state="translated">다른 모델 인스턴스 메소드</target>
        </trans-unit>
        <trans-unit id="4c15f8b2bc73ab95c0934e87b1a87123a60c7ee2" translate="yes" xml:space="preserve">
          <source>Other object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don&amp;rsquo;t Repeat Yourself) principle, so Django only requires you to define the relationship on one end.</source>
          <target state="translated">다른 객체 관계형 매퍼는 양쪽에 관계를 정의해야합니다. Django 개발자는 이것이 DRY (Do n't Repeat Yourself) 원칙을 위반한다고 생각하므로 Django는 한쪽 관계를 정의하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="74883f3f28ff75cbfd0b1e676bda3af8304d204b" translate="yes" xml:space="preserve">
          <source>Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches.</source>
          <target state="translated">캐싱과 관련된 다른 문제는 데이터의 프라이버시와 캐스케이드 캐시에서 데이터를 어디에 저장해야하는지에 대한 문제입니다.</target>
        </trans-unit>
        <trans-unit id="07f0c8a819b057b97bd83b3e8e3832bd6eeea145" translate="yes" xml:space="preserve">
          <source>Other tags</source>
          <target state="translated">다른 태그</target>
        </trans-unit>
        <trans-unit id="30b651a2617dab8f49f0fe838e2180168a76de91" translate="yes" xml:space="preserve">
          <source>Other tags and filters libraries</source>
          <target state="translated">다른 태그 및 필터 라이브러리</target>
        </trans-unit>
        <trans-unit id="4a35752ab9f4b364c50ff15dd9e36c30daa57fc5" translate="yes" xml:space="preserve">
          <source>Other test conditions</source>
          <target state="translated">다른 시험 조건</target>
        </trans-unit>
        <trans-unit id="740307b6495ba5e98cdc9cd0ee6c245866224b54" translate="yes" xml:space="preserve">
          <source>Other text-based formats</source>
          <target state="translated">다른 텍스트 기반 형식</target>
        </trans-unit>
        <trans-unit id="f7a5be2bc9ddbbd8c9fdf6a6ffac21f5ac820287" translate="yes" xml:space="preserve">
          <source>Other than the &lt;code&gt;save()&lt;/code&gt; and &lt;code&gt;save_m2m()&lt;/code&gt; methods, a &lt;code&gt;ModelForm&lt;/code&gt; works exactly the same way as any other &lt;code&gt;forms&lt;/code&gt; form. For example, the &lt;code&gt;is_valid()&lt;/code&gt; method is used to check for validity, the &lt;code&gt;is_multipart()&lt;/code&gt; method is used to determine whether a form requires multipart file upload (and hence whether &lt;code&gt;request.FILES&lt;/code&gt; must be passed to the form), etc. See &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;Binding uploaded files to a form&lt;/a&gt; for more information.</source>
          <target state="translated">댄 기타 &lt;code&gt;save()&lt;/code&gt; 와 &lt;code&gt;save_m2m()&lt;/code&gt; 방법은 &lt;code&gt;ModelForm&lt;/code&gt; 는 다른 정확히 같은 방식으로 작동하는 &lt;code&gt;forms&lt;/code&gt; 형성합니다. 예를 들어, &lt;code&gt;is_valid()&lt;/code&gt; 메서드는 유효성을 검사하는 데 사용되고 &lt;code&gt;is_multipart()&lt;/code&gt; 메서드는 폼에 멀티 파트 파일 업로드가 필요한지 여부 (따라서 &lt;code&gt;request.FILES&lt;/code&gt; 를 폼에 전달 해야하는지 여부 등) 를 확인하는 데 사용됩니다 . &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;바인딩&lt;/a&gt; 참조 자세한 내용 은 파일을 양식 에 업로드 하십시오.</target>
        </trans-unit>
        <trans-unit id="d7c4b57295a40e5f3e757610ef1f4a955b58ae43" translate="yes" xml:space="preserve">
          <source>Other topics</source>
          <target state="translated">다른 주제</target>
        </trans-unit>
        <trans-unit id="f2253ba92e11ef33d967c8e37bf8f95e5d5af2b1" translate="yes" xml:space="preserve">
          <source>Other uses of lazy in delayed translations</source>
          <target state="translated">지연된 번역에서 게으른 다른 용도</target>
        </trans-unit>
        <trans-unit id="a29b5726b1cc15826ea9d1a05ed4d0ac7b40ef27" translate="yes" xml:space="preserve">
          <source>Otherwise, raise an exception.</source>
          <target state="translated">그렇지 않으면 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="0df0011def0634465c8c760cf06ab96ff5bdcfb7" translate="yes" xml:space="preserve">
          <source>Otherwise, the request will be redirected to the URL specified by the &lt;code&gt;login_url&lt;/code&gt; parameter, with the originally requested path in a query string variable specified by &lt;code&gt;redirect_field_name&lt;/code&gt;. For example: &lt;code&gt;/admin/login/?next=/admin/polls/question/3/&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 요청은 redirect_field_name에 의해 지정된 쿼리 문자열 변수에서 원래 요청 된 경로와 함께 &lt;code&gt;login_url&lt;/code&gt; 매개 변수에 의해 지정된 URL로 경로 &lt;code&gt;redirect_field_name&lt;/code&gt; 지정 됩니다 . 예를 들어 &lt;code&gt;/admin/login/?next=/admin/polls/question/3/&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0050fbc0f9f82e9a5a5b89786cc9c3c5d3f52e45" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;HandField&lt;/code&gt; accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total.</source>
          <target state="translated">우리 &lt;code&gt;HandField&lt;/code&gt; 는 표준 필드 옵션의 대부분 (목록 아래 참조)하지만, 그것은 단지 52 개 카드 값을 더한 자신의 정장을 유지해야하므로 우리가이 고정 된 길이가 보장 받아 들인다; 총 104 자</target>
        </trans-unit>
        <trans-unit id="db06c72d2934d67a03d3f0f3a2a745ee6d03f280" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;current_time&lt;/code&gt; function could thus be written like this:</source>
          <target state="translated">우리 &lt;code&gt;current_time&lt;/code&gt; 기능은 따라서 다음과 같이 작성할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="dff6ab8adb93a46ee3c6e3bd3ed49ff4ebd8ab39" translate="yes" xml:space="preserve">
          <source>Our earlier form used a single field, &lt;code&gt;your_name&lt;/code&gt;, a &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;. In this case, our form has four fields: &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt; and &lt;code&gt;cc_myself&lt;/code&gt;. &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/forms/fields#django.forms.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; are just three of the available field types; a full list can be found in &lt;a href=&quot;../../ref/forms/fields&quot;&gt;Form fields&lt;/a&gt;.</source>
          <target state="translated">이전 양식은 단일 필드 &lt;code&gt;your_name&lt;/code&gt; , &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; 를 사용했습니다&lt;/a&gt; . 이 경우 양식에는 &lt;code&gt;subject&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; , &lt;code&gt;sender&lt;/code&gt; 및 &lt;code&gt;cc_myself&lt;/code&gt; 의 네 가지 필드가 있습니다 . &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/forms/fields#django.forms.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; &lt;/a&gt; 는 사용 가능한 필드 유형 중 세 가지입니다. 전체 목록은 &lt;a href=&quot;../../ref/forms/fields&quot;&gt;양식 필드&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8ffa06db831290132ff3c584882aede3e5800c0f" translate="yes" xml:space="preserve">
          <source>Our example object</source>
          <target state="translated">예제 객체</target>
        </trans-unit>
        <trans-unit id="0627352608ac4e2e19335c97ffa41d6265f59e8d" translate="yes" xml:space="preserve">
          <source>Our new &lt;code&gt;AuthorDetail&lt;/code&gt; looks like this:</source>
          <target state="translated">새로운 &lt;code&gt;AuthorDetail&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1f8e1dd2e4de2f81be39a90d9ea2dedca52e113d" translate="yes" xml:space="preserve">
          <source>Our poll application is not very complex and doesn&amp;rsquo;t need custom admin templates. But if it grew more sophisticated and required modification of Django&amp;rsquo;s standard admin templates for some of its functionality, it would be more sensible to modify the &lt;em&gt;application&amp;rsquo;s&lt;/em&gt; templates, rather than those in the &lt;em&gt;project&lt;/em&gt;. That way, you could include the polls application in any new project and be assured that it would find the custom templates it needed.</source>
          <target state="translated">설문 조사 응용 프로그램은 그다지 복잡하지 않으며 사용자 지정 관리자 템플릿이 필요하지 않습니다. 그러나 일부 기능에 대해 Django의 표준 관리 템플릿을보다 정교하게 수정해야하는 경우 &lt;em&gt;프로젝트 &lt;/em&gt;&lt;em&gt;의&lt;/em&gt; 템플릿이 아닌 &lt;em&gt;응용 프로그램의&lt;/em&gt; 템플릿 을 수정하는 것이 더 합리적 입니다. 이렇게하면 새 프로젝트에 설문 조사 응용 프로그램을 포함시킬 수 있으며 필요한 사용자 정의 템플리트를 찾을 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="94262ed90ad185998a5f246db31ae553a069776c" translate="yes" xml:space="preserve">
          <source>Our publish-these-articles function won&amp;rsquo;t need the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; or the request object, but we will use the queryset:</source>
          <target state="translated">우리의 기사 게시 기능은 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 이나 요청 객체 가 필요하지 않지만 쿼리 셋 을 사용할 것입니다.</target>
        </trans-unit>
        <trans-unit id="8bf7102d00ad0d0a1a4d16b6ef4507a65f16f2b8" translate="yes" xml:space="preserve">
          <source>Outdim Value</source>
          <target state="translated">희미한 가치</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="5ff63679199d65dfb0c6db045e65af9d0751d7e2" translate="yes" xml:space="preserve">
          <source>Output 3D WKB.</source>
          <target state="translated">출력 3D WKB.</target>
        </trans-unit>
        <trans-unit id="43209554279e71a6edbe8bb7ebb6fdeecbe79ba6" translate="yes" xml:space="preserve">
          <source>Output Properties</source>
          <target state="translated">출력 속성</target>
        </trans-unit>
        <trans-unit id="c03f08a8f205e4568e916e3cfaa50c6a48749706" translate="yes" xml:space="preserve">
          <source>Output format</source>
          <target state="translated">출력 형식</target>
        </trans-unit>
        <trans-unit id="bb8145bf62edbc420c2b0cf4c732bd403b67f7e7" translate="yes" xml:space="preserve">
          <source>Output in case of error can be customized with the &lt;code&gt;msg&lt;/code&gt; argument.</source>
          <target state="translated">오류 발생시 출력은 &lt;code&gt;msg&lt;/code&gt; 인수 로 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c664efd5b3e4b44ce5bc39e691c6e2565216beef" translate="yes" xml:space="preserve">
          <source>Output of the applied datetimes at verbosity 2 and above was added.</source>
          <target state="translated">상세 2 이상의 적용된 날짜 시간 출력이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="03e1aee184126121c6a71ebdabaa3bfe9cc944a7" translate="yes" xml:space="preserve">
          <source>Output redirection</source>
          <target state="translated">출력 리디렉션</target>
        </trans-unit>
        <trans-unit id="7835db447bc76230b5b0d736b2d78c671d7100a1" translate="yes" xml:space="preserve">
          <source>Outputs</source>
          <target state="translated">Outputs</target>
        </trans-unit>
        <trans-unit id="e10f22272a52d06137d232f9827cac0615b426c9" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; containing any validation errors corresponding to this field. You can customize the presentation of the errors with a &lt;code&gt;{% for error in field.errors %}&lt;/code&gt; loop. In this case, each object in the loop is a string containing the error message.</source>
          <target state="translated">이 필드에 해당하는 유효성 검사 오류가 포함 된 &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; 를 출력 합니다. &lt;code&gt;{% for error in field.errors %}&lt;/code&gt; 루프 에서 {% for error in field.errors %} 루프로 오류 표시를 사용자 정의 할 수 있습니다 . 이 경우 루프의 각 객체는 오류 메시지가 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="7333f4a7bf31ccfdbb5dc18e2179555f50ce400e" translate="yes" xml:space="preserve">
          <source>Outputs a string in the format &lt;code&gt;Wdy, DD Mon YYYY HH:MM:SS GMT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Wdy, DD Mon YYYY HH:MM:SS GMT&lt;/code&gt; 형식으로 문자열을 출력합니다 .</target>
        </trans-unit>
        <trans-unit id="a6f5e4808bedbab831b1bb9c7c9c21be9a0e5910" translate="yes" xml:space="preserve">
          <source>Outputs a whole load of debugging information, including the current context and imported modules.</source>
          <target state="translated">현재 컨텍스트 및 가져온 모듈을 포함하여 전체 디버깅 정보를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="73525538b3d957fd8f1b877e665683002b2e3665" translate="yes" xml:space="preserve">
          <source>Outputs an empty migration for the specified apps, for manual editing. This is for advanced users and should not be used unless you are familiar with the migration format, migration operations, and the dependencies between your migrations.</source>
          <target state="translated">수동 편집을 위해 지정된 앱에 대해 빈 마이그레이션을 출력합니다. 이는 고급 사용자를위한 것이며 마이그레이션 형식, 마이그레이션 작업 및 마이그레이션 간의 종속성에 익숙하지 않은 경우 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e13110426e6548f4f6d99430014198a4aff088e3" translate="yes" xml:space="preserve">
          <source>Outputs one of the syntax characters used to compose template tags.</source>
          <target state="translated">템플릿 태그를 작성하는 데 사용되는 구문 문자 중 하나를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1b0ee9d22ffd2b84beb646b9a42cfb1a6de46213" translate="yes" xml:space="preserve">
          <source>Outputs only the objects specified by a comma separated list of primary keys. This is only available when dumping one model. By default, all the records of the model are output.</source>
          <target state="translated">쉼표로 구분 된 기본 키 목록으로 지정된 객체 만 출력합니다. 하나의 모델을 덤프 할 때만 사용할 수 있습니다. 기본적으로 모델의 모든 레코드가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="a2fb19bf9e041d6bac4abe0f868835a6e7118c10" translate="yes" xml:space="preserve">
          <source>Outputs the feed in the given encoding to &lt;code&gt;outfile&lt;/code&gt;, which is a file-like object. Subclasses should override this.</source>
          <target state="translated">주어진 인코딩의 피드를 파일과 같은 객체 인 &lt;code&gt;outfile&lt;/code&gt; 로 출력 합니다. 서브 클래스는 이것을 덮어 써야합니다.</target>
        </trans-unit>
        <trans-unit id="b1d86c371b153e0d5a8e04bf4843d2b1c82764bd" translate="yes" xml:space="preserve">
          <source>Outputs the feed in the given encoding to outfile, which is a file-like object.</source>
          <target state="translated">주어진 인코딩의 피드를 파일과 같은 객체 인 outfile로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="3a8df3db84756400ab5f34f1a3a8eeb89a2d6d30" translate="yes" xml:space="preserve">
          <source>Outputs the first argument variable that is not &amp;ldquo;false&amp;rdquo; (i.e. exists, is not empty, is not a false boolean value, and is not a zero numeric value). Outputs nothing if all the passed variables are &amp;ldquo;false&amp;rdquo;.</source>
          <target state="translated">&quot;false&quot;가 아닌 첫 번째 인수 변수를 출력합니다 (즉, 존재하지 않거나 비어 있지 않고 부울 값이 아니며 숫자가 0이 아님). 전달 된 모든 변수가 &quot;false&quot;이면 아무 것도 출력하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bcad65f84e50e07aa9fc40899f541aa8811c827" translate="yes" xml:space="preserve">
          <source>Outputs to standard output all data in the database associated with the named application(s).</source>
          <target state="translated">명명 된 응용 프로그램과 관련된 데이터베이스의 모든 데이터를 표준 출력으로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="a07c2209b8bfd7ff7088211321dd90df2f4ee620" translate="yes" xml:space="preserve">
          <source>Outputting CSV with Django</source>
          <target state="translated">Django로 CSV 출력</target>
        </trans-unit>
        <trans-unit id="6bdeb471d5cc647c2c535dd532c5a68d71c980eb" translate="yes" xml:space="preserve">
          <source>Outputting PDFs with Django</source>
          <target state="translated">Django로 PDF 출력</target>
        </trans-unit>
        <trans-unit id="bfead61450a1bd4702affa28ce6ae7a44cf9aac3" translate="yes" xml:space="preserve">
          <source>Outputting forms as HTML</source>
          <target state="translated">HTML로 양식 출력</target>
        </trans-unit>
        <trans-unit id="ff49716ffa83140e43327e6b1d6b0a707b986f35" translate="yes" xml:space="preserve">
          <source>Overridden model methods are not called on bulk operations</source>
          <target state="translated">대량 작업에서는 재정의 된 모델 메서드가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="89d709369fdcd6212bf5ccd14fc13db032b3b30a" translate="yes" xml:space="preserve">
          <source>Overridden settings</source>
          <target state="translated">재정의 된 설정</target>
        </trans-unit>
        <trans-unit id="035501ec3a242aa3e857c79b2e79a8403eb1c67a" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;get_ordering_widget()&lt;/code&gt; if you need to provide a widget instance for use with &lt;code&gt;can_order&lt;/code&gt;:</source>
          <target state="translated">재정 &lt;code&gt;get_ordering_widget()&lt;/code&gt; 당신이 사용하기 위해 위젯 인스턴스를 제공해야하는 경우 &lt;code&gt;can_order&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="66913097817c449f24ca2f4e0a17beb7a1288aca" translate="yes" xml:space="preserve">
          <source>Override the template used to generate the JavaScript slippy map. Default is &lt;code&gt;'gis/admin/openlayers.html'&lt;/code&gt;.</source>
          <target state="translated">JavaScript 미끄러운 맵을 생성하는 데 사용 된 템플릿을 재정의하십시오. 기본값은 &lt;code&gt;'gis/admin/openlayers.html'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="37aaab92c3e9edc5da33aa21afe333e610896754" translate="yes" xml:space="preserve">
          <source>Override this class method to add custom arguments accepted by the &lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; management command. See &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;argparse.ArgumentParser.add_argument()&lt;/code&gt;&lt;/a&gt; for details about adding arguments to a parser.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 관리 명령이 승인 한 사용자 정의 인수를 추가하려면이 클래스 메소드를 대체하십시오 . 파서에 인수를 추가하는 방법에 대한 자세한 내용은 &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;argparse.ArgumentParser.add_argument()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d12a4bd05a8c968e3b8465eece0297c044b668fa" translate="yes" xml:space="preserve">
          <source>Override this method in custom widgets that aren&amp;rsquo;t compatible with browser validation. For example, a WSYSIWG text editor widget backed by a hidden &lt;code&gt;textarea&lt;/code&gt; element may want to always return &lt;code&gt;False&lt;/code&gt; to avoid browser validation on the hidden field.</source>
          <target state="translated">브라우저 유효성 검사와 호환되지 않는 사용자 정의 위젯에서이 메소드를 대체하십시오. 예를 들어, 숨겨진 &lt;code&gt;textarea&lt;/code&gt; 요소가 지원하는 WSYSIWG 텍스트 편집기 위젯 은 숨겨진 필드에서 브라우저 유효성 검증을 피하기 위해 항상 &lt;code&gt;False&lt;/code&gt; 를 리턴 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dc563379c597beff2c355e9c43b5ce5092ed10eb" translate="yes" xml:space="preserve">
          <source>Override this method in order to customize template loading.</source>
          <target state="translated">템플릿로드를 사용자 정의하려면이 방법을 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="1edb92cd9420ce4f36c8b1147f33da7b34cfcb35" translate="yes" xml:space="preserve">
          <source>Override this method in order to customize the context.</source>
          <target state="translated">컨텍스트를 사용자 정의하기 위해이 메소드를 대체하십시오.</target>
        </trans-unit>
        <trans-unit id="ff8c2e9164239343752ee6d0f93598934f05a1be" translate="yes" xml:space="preserve">
          <source>Override this method to customize the lookups permitted for your &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 서브 클래스에 허용되는 검색을 사용자 정의하려면이 메소드를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="087100e8f13a40d6b39a5b10f146cf8a7e2290bd" translate="yes" xml:space="preserve">
          <source>Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument &lt;code&gt;obj&lt;/code&gt;):</source>
          <target state="translated">프로그래밍 방식으로 최대 인라인 양식 수를 결정하려면이 방법을 재정의하십시오. 예를 들어, 이것은 모델 인스턴스를 기반으로 할 수 있습니다 (키워드 인수 &lt;code&gt;obj&lt;/code&gt; 로 전달됨 ).</target>
        </trans-unit>
        <trans-unit id="843de265883c0b6c28f62f1497d04b114f460694" translate="yes" xml:space="preserve">
          <source>Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument &lt;code&gt;obj&lt;/code&gt;).</source>
          <target state="translated">프로그래밍 방식으로 최소 인라인 양식 수를 결정하려면이 방법을 재정의하십시오. 예를 들어, 이것은 모델 인스턴스를 기반으로 할 수 있습니다 (키워드 인수 &lt;code&gt;obj&lt;/code&gt; 로 전달됨 ).</target>
        </trans-unit>
        <trans-unit id="feb44a6cc063864441d2898f84d3a6a1c8e295a0" translate="yes" xml:space="preserve">
          <source>Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument &lt;code&gt;obj&lt;/code&gt;):</source>
          <target state="translated">추가 인라인 양식의 수를 프로그래밍 방식으로 결정하려면이 방법을 재정의하십시오. 예를 들어, 이것은 모델 인스턴스를 기반으로 할 수 있습니다 (키워드 인수 &lt;code&gt;obj&lt;/code&gt; 로 전달됨 ).</target>
        </trans-unit>
        <trans-unit id="b3bc9b7fa0583dc0d7816f97efe6238a8a7d0bdd" translate="yes" xml:space="preserve">
          <source>Override this method to return a custom session model if you need one.</source>
          <target state="translated">사용자 정의 세션 모델이 필요한 경우이 메소드를 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="69caf77a19dbf07a315c7cad38827e71389d7d4d" translate="yes" xml:space="preserve">
          <source>Overrides the core &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command if the &lt;code&gt;staticfiles&lt;/code&gt; app is &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;installed&lt;/code&gt;&lt;/a&gt; and adds automatic serving of static files. File serving doesn&amp;rsquo;t run through &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">핵심 오버라이드 (override) &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 명령 경우 &lt;code&gt;staticfiles&lt;/code&gt; 의 응용 프로그램은되어 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;installed&lt;/code&gt; &lt;/a&gt; 및 정적 파일을 자동으로 서빙을 추가합니다. 파일 제공이 &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 를&lt;/a&gt; 통해 실행되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="7fd821b1d08d73b122a6705bea6d2acf9f48415c" translate="yes" xml:space="preserve">
          <source>Overriding &lt;code&gt;clean()&lt;/code&gt; on a &lt;code&gt;ModelFormSet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ModelFormSet&lt;/code&gt; 에서 &lt;code&gt;clean()&lt;/code&gt; 재정의</target>
        </trans-unit>
        <trans-unit id="3dbe275b12e6b131bd5fa586a00fa885792a625f" translate="yes" xml:space="preserve">
          <source>Overriding admin templates</source>
          <target state="translated">관리 템플릿 재정의</target>
        </trans-unit>
        <trans-unit id="9d2c7bf1e34177cfe3761f91d4d3744f7f20c177" translate="yes" xml:space="preserve">
          <source>Overriding built-in widget templates</source>
          <target state="translated">내장 위젯 템플릿 재정의</target>
        </trans-unit>
        <trans-unit id="4b77dbb64d3ddce7b029d8a7f94456a8966798f7" translate="yes" xml:space="preserve">
          <source>Overriding commands</source>
          <target state="translated">명령 재정의</target>
        </trans-unit>
        <trans-unit id="5c0cd00ef62c0bf0fe417d52cbf1fa9ba89a2b50" translate="yes" xml:space="preserve">
          <source>Overriding extra instance methods</source>
          <target state="translated">추가 인스턴스 메소드 재정의</target>
        </trans-unit>
        <trans-unit id="c415121e5c9b1cf52fe819b5e91d79873486b23a" translate="yes" xml:space="preserve">
          <source>Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in &lt;code&gt;Model.__init__&lt;/code&gt;) and serialization. These are features which normal Python class inheritance doesn&amp;rsquo;t have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn&amp;rsquo;t arbitrary.</source>
          <target state="translated">부모 모델에서 필드를 재정의하면 새 인스턴스 초기화 ( &lt;code&gt;Model.__init__&lt;/code&gt; 에서 초기화되는 필드 지정 ) 및 직렬화 와 같은 영역에서 문제가 발생합니다 . 이것들은 일반적인 파이썬 클래스 상속이 똑같은 방식으로 처리 할 필요가없는 기능이므로 Django 모델 상속과 Python 클래스 상속의 차이점은 임의적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="77d8038605b2fca489407ed088db1ceea011b7c8" translate="yes" xml:space="preserve">
          <source>Overriding from an app&amp;rsquo;s template directory</source>
          <target state="translated">앱의 템플릿 디렉토리에서 재정의</target>
        </trans-unit>
        <trans-unit id="f001aea88bb9e65ee9b4dc4471475534873ba06f" translate="yes" xml:space="preserve">
          <source>Overriding from the project&amp;rsquo;s templates directory</source>
          <target state="translated">프로젝트의 템플릿 디렉토리에서 재정의</target>
        </trans-unit>
        <trans-unit id="3a3805c2ae70eb5cb4212efd0a99dd2d9a9443e4" translate="yes" xml:space="preserve">
          <source>Overriding methods on an &lt;code&gt;InlineFormSet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InlineFormSet&lt;/code&gt; 에서 메서드 재정의</target>
        </trans-unit>
        <trans-unit id="9c9c3a166212376bd13fb2b3e01f65a0fc27be26" translate="yes" xml:space="preserve">
          <source>Overriding predefined model methods</source>
          <target state="translated">사전 정의 된 모델 메소드 대체</target>
        </trans-unit>
        <trans-unit id="e10ea40ee84dbb4909b38e93509627b1fa56998f" translate="yes" xml:space="preserve">
          <source>Overriding settings</source>
          <target state="translated">재정의 설정</target>
        </trans-unit>
        <trans-unit id="ed374ca602e69830c442fb16e8fb1a1ae0414a53" translate="yes" xml:space="preserve">
          <source>Overriding templates</source>
          <target state="translated">템플릿 재정의</target>
        </trans-unit>
        <trans-unit id="2397f08bfac55b9388cd6502b4efe24cb9bef22b" translate="yes" xml:space="preserve">
          <source>Overriding the clean() method</source>
          <target state="translated">clean () 메서드 재정의</target>
        </trans-unit>
        <trans-unit id="4441238c478d169181967bbd91e1d68e28320c76" translate="yes" xml:space="preserve">
          <source>Overriding the default admin site</source>
          <target state="translated">기본 관리 사이트 재정의</target>
        </trans-unit>
        <trans-unit id="785ec6b460a9a580366254f7cd31a754f6257d4c" translate="yes" xml:space="preserve">
          <source>Overriding the default fields</source>
          <target state="translated">기본 필드 재정의</target>
        </trans-unit>
        <trans-unit id="1d41bd1399dd356573d969d293bfdbd01fcff8fd" translate="yes" xml:space="preserve">
          <source>Overriding this method allows mixins to setup instance attributes for reuse in child classes. When overriding this method, you must call &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">이 메소드를 재정의하면 믹스 인이 하위 클래스에서 재사용하기 위해 인스턴스 속성을 설정할 수 있습니다. 이 메소드를 재정의하는 경우 &lt;code&gt;super()&lt;/code&gt; 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e8ce33c66b4853973572b69adb9d506516b80aab" translate="yes" xml:space="preserve">
          <source>Overriding this method provides the ability to modify session model data before it&amp;rsquo;s saved to database.</source>
          <target state="translated">이 방법을 재정의하면 세션 모델 데이터를 데이터베이스에 저장하기 전에 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7b8a25c5d31e6f7580233bf7d54b9ce41735815" translate="yes" xml:space="preserve">
          <source>Overriding vs. replacing an admin template</source>
          <target state="translated">관리 템플릿 대체 및 대체</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="92cb27d6d1803adc296b9c4279b80fa353e15573" translate="yes" xml:space="preserve">
          <source>Overview and a quick example</source>
          <target state="translated">개요 및 간단한 예</target>
        </trans-unit>
        <trans-unit id="20156e9875f7da34802f85b44394c55cbb9a5f1b" translate="yes" xml:space="preserve">
          <source>PBKDF2 and bcrypt</source>
          <target state="translated">PBKDF2 및 bcrypt</target>
        </trans-unit>
        <trans-unit id="b343828bbf7d960e58d0a4ca891c7d1b51085027" translate="yes" xml:space="preserve">
          <source>PGRaster</source>
          <target state="translated">PGRaster</target>
        </trans-unit>
        <trans-unit id="6eb27d4d79f559d61d621cf0080cfccf437ac896" translate="yes" xml:space="preserve">
          <source>POST with invalid data (typically redisplay form with errors)</source>
          <target state="translated">유효하지 않은 데이터가있는 POST (일반적으로 오류가있는 양식을 다시 표시)</target>
        </trans-unit>
        <trans-unit id="294d17ead46c3e6fc07b57af85f32dcdd8ca9251" translate="yes" xml:space="preserve">
          <source>POST with valid data (process the data and typically redirect)</source>
          <target state="translated">유효한 데이터가있는 POST (데이터를 처리하고 일반적으로 리디렉션)</target>
        </trans-unit>
        <trans-unit id="0963d5c6b9415810b661524f7d28705a56affa59" translate="yes" xml:space="preserve">
          <source>PROJ</source>
          <target state="translated">PROJ</target>
        </trans-unit>
        <trans-unit id="474485b21e48b6e355a5bd7d43b0dcccf85d5fc9" translate="yes" xml:space="preserve">
          <source>PROJ.4</source>
          <target state="translated">PROJ.4</target>
        </trans-unit>
        <trans-unit id="c8598d7514c7ab48be8762685bf2ae515f08ef7f" translate="yes" xml:space="preserve">
          <source>PROJ.4 string</source>
          <target state="translated">PROJ.4 문자열</target>
        </trans-unit>
        <trans-unit id="990257c6f86c20190b34ad65ebbfce57b12ac007" translate="yes" xml:space="preserve">
          <source>Package? App?</source>
          <target state="translated">꾸러미? 앱?</target>
        </trans-unit>
        <trans-unit id="83b51fffd5af70659c944e65a24a3fc7795b640c" translate="yes" xml:space="preserve">
          <source>Packaging your app</source>
          <target state="translated">앱 패키징</target>
        </trans-unit>
        <trans-unit id="fb06270f7c212baabc8749ffc36e49dc8f321548" translate="yes" xml:space="preserve">
          <source>Page</source>
          <target state="translated">Page</target>
        </trans-unit>
        <trans-unit id="7b0468ed348a7d65dd776d4abfc8e3474cc611b5" translate="yes" xml:space="preserve">
          <source>Page not found?</source>
          <target state="translated">페이지를 찾을 수 없습니까?</target>
        </trans-unit>
        <trans-unit id="f9da63ed84d3f9029e123e169b354d8b685d5524" translate="yes" xml:space="preserve">
          <source>Page uses AJAX without any HTML form</source>
          <target state="translated">HTML 형식없이 AJAX를 사용하는 페이지</target>
        </trans-unit>
        <trans-unit id="73be4714f17a88adb73ee8ec0ea70e3fc4fbe59f" translate="yes" xml:space="preserve">
          <source>Paginating a &lt;code&gt;ListView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ListView&lt;/code&gt; 페이지 매김</target>
        </trans-unit>
        <trans-unit id="100325b8d6de92dc6ff09cd2c078133755bf274f" translate="yes" xml:space="preserve">
          <source>Pagination</source>
          <target state="translated">Pagination</target>
        </trans-unit>
        <trans-unit id="24533236e88c1d36ff37cc521374f5302ab40560" translate="yes" xml:space="preserve">
          <source>Paginator</source>
          <target state="translated">Paginator</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="38aa618f069cd612474bdf8ae436523f7aac024f" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;datetime.date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;datetime.date&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="98c7984221adfb3491e17bb4d79c15079bcd1909" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime.datetime&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e9c57985d10f102269be4dfc290ec569bb9c2439" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;datetime.time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;datetime.time&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bcfafbf568bd9f3c5acfb3a5945e8adb847df2c2" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;datetime.timedelta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;datetime.timedelta&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d78e9c7e2e0111470599d2080e66d8472ca42075" translate="yes" xml:space="preserve">
          <source>Parsing until another block tag</source>
          <target state="translated">다른 블록 태그까지 파싱</target>
        </trans-unit>
        <trans-unit id="dd29a98e2f867432ac16b8458dbae0a86ebb6f7d" translate="yes" xml:space="preserve">
          <source>Parsing until another block tag, and saving contents</source>
          <target state="translated">다른 블록 태그까지 파싱 및 내용 저장</target>
        </trans-unit>
        <trans-unit id="edc6c4de665cd0969b267054f0bc15952c64a141" translate="yes" xml:space="preserve">
          <source>Partial indexes in abstract base classes</source>
          <target state="translated">추상 기본 클래스의 부분 인덱스</target>
        </trans-unit>
        <trans-unit id="2e57cb42086ecd22d3778798ec47f16bab4305df" translate="yes" xml:space="preserve">
          <source>Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer.</source>
          <target state="translated">부동 소수점을 가장 가까운 정수로 반올림하는 인수로 0을 전달하는 것이 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="83106ebfb559316a40d0b624ad764b8f2c4fbdbe" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;commit=False&lt;/code&gt; to return the unsaved model instances:</source>
          <target state="translated">패스 &lt;code&gt;commit=False&lt;/code&gt; 저장되지 않은 모델 인스턴스를 반환 :</target>
        </trans-unit>
        <trans-unit id="a5907b5e14985eae2d17793f5fdff70061f9d381" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;configure()&lt;/code&gt; as many keyword arguments as you&amp;rsquo;d like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to &lt;code&gt;configure()&lt;/code&gt; and is needed at some later point, Django will use the default setting value.</source>
          <target state="translated">패스 &lt;code&gt;configure()&lt;/code&gt; 당신이 원하는만큼 설정하고 그 값을 나타내는 각 키워드 인수와 함께, 많은 키워드 인수로합니다. 각 인수 이름은 모두 대문자 여야하며 위에서 설명한 설정과 동일한 이름이어야합니다. 특정 설정이 &lt;code&gt;configure()&lt;/code&gt; 전달되지 않고 나중에 필요할 경우 Django는 기본 설정 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3375ac34bc5b07b3abb647071876612620aa29e7" translate="yes" xml:space="preserve">
          <source>Pass an iterable of model instances (must all be of the same class) and the lookups or &lt;a href=&quot;#django.db.models.Prefetch&quot;&gt;&lt;code&gt;Prefetch&lt;/code&gt;&lt;/a&gt; objects you want to prefetch for. For example:</source>
          <target state="translated">반복 가능한 모델 인스턴스 (모두 동일한 클래스 여야 함)와 &lt;a href=&quot;#django.db.models.Prefetch&quot;&gt; &lt;code&gt;Prefetch&lt;/code&gt; &lt;/a&gt; 하려는 조회 또는 프리 페치 오브젝트를 전달하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0bc1e5a920414c3a7a617932bfa1cb74ddf33ca8" translate="yes" xml:space="preserve">
          <source>Pass any function (that takes no arguments) to &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 없는 함수를 on_commit ()에 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="dff14d3715358315559de87e93047676754ed230" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;RunPython.noop&lt;/code&gt; method to &lt;code&gt;code&lt;/code&gt; or &lt;code&gt;reverse_code&lt;/code&gt; when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible.</source>
          <target state="translated">패스 &lt;code&gt;RunPython.noop&lt;/code&gt; 의 에 방법 &lt;code&gt;code&lt;/code&gt; 또는 &lt;code&gt;reverse_code&lt;/code&gt; 을 당신이 주어진 방향으로 아무것도 할 수 없습니다 작업을 할 때. 이는 작업을 가역적으로 만드는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="22714a0e2f564fdc8bb2133e6f31fe4f021d1013" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;RunSQL.noop&lt;/code&gt; attribute to &lt;code&gt;sql&lt;/code&gt; or &lt;code&gt;reverse_sql&lt;/code&gt; when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible.</source>
          <target state="translated">패스 &lt;code&gt;RunSQL.noop&lt;/code&gt; 의 에 속성 &lt;code&gt;sql&lt;/code&gt; 또는 &lt;code&gt;reverse_sql&lt;/code&gt; 을 당신이 주어진 방향으로 아무것도 할 수 없습니다 작업을 할 때. 이는 작업을 가역적으로 만드는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="cd27a54101bdeb3a00cc6b1e71a3a6c154544800" translate="yes" xml:space="preserve">
          <source>Pass the page number via the &lt;code&gt;page&lt;/code&gt; query-string parameter. For example, a URL would look like this:</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; query-string 매개 변수 를 통해 페이지 번호를 전달 하십시오 . 예를 들어 URL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ebbdcfc4d351bffe1099929547cfbf663c8041d6" translate="yes" xml:space="preserve">
          <source>Passed to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="translated">건네받는 &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt; &lt;code&gt;data()&lt;/code&gt; &lt;/a&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="867c510983ef9ee90b94d79234302035e0ceebda" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;Value(None)&lt;/code&gt; to &lt;code&gt;expression1&lt;/code&gt; is prohibited on Oracle since Oracle doesn&amp;rsquo;t accept &lt;code&gt;NULL&lt;/code&gt; as the first argument.</source>
          <target state="translated">전달 &lt;code&gt;Value(None)&lt;/code&gt; 으로 &lt;code&gt;expression1&lt;/code&gt; 허용하지 않습니다 오라클 때문에 오라클 금지 &lt;code&gt;NULL&lt;/code&gt; 을 첫 번째 인수로.</target>
        </trans-unit>
        <trans-unit id="a499daa7841f330b02ab40e38530ebc188948246" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;nowait=True&lt;/code&gt;, &lt;code&gt;skip_locked=True&lt;/code&gt;, or &lt;code&gt;of&lt;/code&gt; to &lt;code&gt;select_for_update()&lt;/code&gt; using database backends that do not support these options, such as MySQL, raises a &lt;a href=&quot;../exceptions#django.db.NotSupportedError&quot;&gt;&lt;code&gt;NotSupportedError&lt;/code&gt;&lt;/a&gt;. This prevents code from unexpectedly blocking.</source>
          <target state="translated">전달 &lt;code&gt;nowait=True&lt;/code&gt; , &lt;code&gt;skip_locked=True&lt;/code&gt; , 또는 &lt;code&gt;of&lt;/code&gt; 에 &lt;code&gt;select_for_update()&lt;/code&gt; MySQL과 같은 옵션을 지원하지 않는 데이터베이스 백엔드하는 제기하여 &lt;a href=&quot;../exceptions#django.db.NotSupportedError&quot;&gt; &lt;code&gt;NotSupportedError&lt;/code&gt; 을&lt;/a&gt; . 이렇게하면 코드가 예기치 않게 차단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2adeb387e4441046ff1e9c147e8419b6f1c14e6" translate="yes" xml:space="preserve">
          <source>Passing custom parameters to formset forms</source>
          <target state="translated">양식 매개 변수에 사용자 정의 매개 변수 전달</target>
        </trans-unit>
        <trans-unit id="e4bc883064fdec73117f9dc706643b24af16c727" translate="yes" xml:space="preserve">
          <source>Passing extra options to &lt;code&gt;include()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;include()&lt;/code&gt; 추가 옵션 전달</target>
        </trans-unit>
        <trans-unit id="60efd02f5ed0f44b53a44ad3313f510fedaad832" translate="yes" xml:space="preserve">
          <source>Passing extra options to view functions</source>
          <target state="translated">기능을 볼 수있는 추가 옵션 전달</target>
        </trans-unit>
        <trans-unit id="7bc32ea8b1ae65cd9736e4019f349cc45bac8346" translate="yes" xml:space="preserve">
          <source>Passing iterators</source>
          <target state="translated">반복자 전달</target>
        </trans-unit>
        <trans-unit id="dc11d2c496ab8e7196b236f460f54cc548ef4e7f" translate="yes" xml:space="preserve">
          <source>Passing parameters into &lt;code&gt;raw()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;raw()&lt;/code&gt; 매개 변수 전달</target>
        </trans-unit>
        <trans-unit id="26826b46bf6032bb6290da65c715fbb888d4e9b7" translate="yes" xml:space="preserve">
          <source>Passing strings</source>
          <target state="translated">문자열 전달</target>
        </trans-unit>
        <trans-unit id="42021a29f4d390299499ad18ee376fba89d46f3c" translate="yes" xml:space="preserve">
          <source>Passing template variables to the tag</source>
          <target state="translated">템플릿 변수를 태그에 전달</target>
        </trans-unit>
        <trans-unit id="cb1d265a07df179d0e372c15df3fbfebc633fcb8" translate="yes" xml:space="preserve">
          <source>Password change</source>
          <target state="translated">비밀번호 변경</target>
        </trans-unit>
        <trans-unit id="53d05af070a4f337a22391045ae28e52feb0c7fc" translate="yes" xml:space="preserve">
          <source>Password change done</source>
          <target state="translated">비밀번호 변경 완료</target>
        </trans-unit>
        <trans-unit id="b9af60b418a51c6c11205cb77e92e77ac8901139" translate="yes" xml:space="preserve">
          <source>Password hashing</source>
          <target state="translated">비밀번호 해싱</target>
        </trans-unit>
        <trans-unit id="fdbf90a060dfba26686234af55512f4b78dc775c" translate="yes" xml:space="preserve">
          <source>Password management in Django</source>
          <target state="translated">장고의 비밀번호 관리</target>
        </trans-unit>
        <trans-unit id="97938456acff794b32791967276a916c34ef7479" translate="yes" xml:space="preserve">
          <source>Password management is something that should generally not be reinvented unnecessarily, and Django endeavors to provide a secure and flexible set of tools for managing user passwords. This document describes how Django stores passwords, how the storage hashing can be configured, and some utilities to work with hashed passwords.</source>
          <target state="translated">비밀번호 관리는 일반적으로 불필요하게 재발견되지 않아야하는 사항이며 Django는 사용자 비밀번호 관리를위한 안전하고 유연한 도구 세트를 제공하기 위해 노력합니다. 이 문서에서는 Django가 암호를 저장하는 방법, 저장소 해싱을 구성하는 방법 및 해시 된 암호를 사용하는 일부 유틸리티에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="42747c3134a14a08e853bd9298741b02f392325d" translate="yes" xml:space="preserve">
          <source>Password strength checking</source>
          <target state="translated">비밀번호 강도 확인</target>
        </trans-unit>
        <trans-unit id="72e845c3a0535ba2a4b8b38cd50be31dfab9b536" translate="yes" xml:space="preserve">
          <source>Password to use for the SMTP server defined in &lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt;. This setting is used in conjunction with &lt;a href=&quot;#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; when authenticating to the SMTP server. If either of these settings is empty, Django won&amp;rsquo;t attempt authentication.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; 에&lt;/a&gt; 정의 된 SMTP 서버에 사용할 비밀번호 입니다. 이 설정은 SMTP 서버를 인증 할 때 &lt;a href=&quot;#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt; 와 함께 사용됩니다 . 이 설정 중 하나가 비어 있으면 Django는 인증을 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f78b3350a7bcdb589a957e23ff81fad31b3e2773" translate="yes" xml:space="preserve">
          <source>Password upgrading</source>
          <target state="translated">비밀번호 업그레이드</target>
        </trans-unit>
        <trans-unit id="82bfb41a774975db54411718143f0e70ce9a7688" translate="yes" xml:space="preserve">
          <source>Password upgrading without requiring a login</source>
          <target state="translated">로그인없이 비밀번호 업그레이드</target>
        </trans-unit>
        <trans-unit id="cfb75c3a8b84a83f1313ca1c5eb4ad97afb6c789" translate="yes" xml:space="preserve">
          <source>Password validation</source>
          <target state="translated">비밀번호 검증</target>
        </trans-unit>
        <trans-unit id="f63d7362dbbfa3509b73dc229d682d018ee48cc6" translate="yes" xml:space="preserve">
          <source>Password validation can prevent the use of many types of weak passwords. However, the fact that a password passes all the validators doesn&amp;rsquo;t guarantee that it is a strong password. There are many factors that can weaken a password that are not detectable by even the most advanced password validators.</source>
          <target state="translated">암호 유효성 검사는 여러 유형의 취약한 암호를 사용하지 못하게 할 수 있습니다. 그러나 암호가 모든 유효성 검사기를 통과한다는 사실이 강력한 암호임을 보증하지는 않습니다. 최첨단 암호 유효성 검사기에서도 감지 할 수없는 암호를 약화시킬 수있는 많은 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="030ddae36a366a4e884ba702f1f24e629d2fafa4" translate="yes" xml:space="preserve">
          <source>Password validation is configured in the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">비밀번호 유효성 검사는 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt; 설정 에서 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="3dd8163758541d100df9ffeb599a921e907953ed" translate="yes" xml:space="preserve">
          <source>Path converters</source>
          <target state="translated">경로 변환기</target>
        </trans-unit>
        <trans-unit id="d3f7215820c20d73fb1520647a2cfe9ae2d19c59" translate="yes" xml:space="preserve">
          <source>Path matching was added.</source>
          <target state="translated">경로 일치가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="1c611af2558850679a78f47f5579ae407fea6cdb" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site app index view.</source>
          <target state="translated">관리 사이트 앱 인덱스보기에서 사용할 사용자 지정 템플릿의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="a3c17c88e105eb850a5ad023c10109e7c8f035c4" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site login view.</source>
          <target state="translated">관리 사이트 로그인보기에서 사용될 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="0a6b4a4caccef224659a85c6f9f94574b9f64e63" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site logout view.</source>
          <target state="translated">관리 사이트 로그 아웃보기에서 사용할 사용자 지정 템플릿의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="af6ee8fc926db110165f33c61aa6ff661bccdf24" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site main index view.</source>
          <target state="translated">관리 사이트 기본 색인보기에서 사용될 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="b0a61f6a8b7ef4c17116725efb1139996550e882" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site password change done view.</source>
          <target state="translated">관리 사이트 비밀번호 변경 완료보기에서 사용할 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="f95c10d6eac86f86888cc76f83fcea345c83bd8b" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site password change view.</source>
          <target state="translated">관리 사이트 비밀번호 변경보기에서 사용될 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="4ecf349cf4d3adf10399fee85596d3bb4c52d469" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.add_view&quot;&gt;&lt;code&gt;add_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.add_view&quot;&gt; &lt;code&gt;add_view()&lt;/code&gt; &lt;/a&gt; 사용하는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="88f3bb0e37e80c6a1bcc036d5e5fdf3dea300ed8" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.change_view&quot;&gt;&lt;code&gt;change_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.change_view&quot;&gt; &lt;code&gt;change_view()&lt;/code&gt; &lt;/a&gt; 사용하는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="2c7220fce158453823a1b66b37aca5acee702105" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.changelist_view&quot;&gt;&lt;code&gt;changelist_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.changelist_view&quot;&gt; &lt;code&gt;changelist_view()&lt;/code&gt; &lt;/a&gt; 사용하는 사용자 정의 템플리트의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="5f591d246cfdef823abf87f8a77ea702e1c10bd2" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_view&quot;&gt;&lt;code&gt;delete_view()&lt;/code&gt;&lt;/a&gt; for displaying a confirmation page when deleting one or more objects.</source>
          <target state="translated">하나 이상의 객체를 삭제할 때 확인 페이지를 표시하기 위해 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_view&quot;&gt; &lt;code&gt;delete_view()&lt;/code&gt; &lt;/a&gt; 에서 사용하는 사용자 정의 템플리트의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="0c2e8f0a12128c3ab584505f6c0757977a466d7d" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.history_view&quot;&gt;&lt;code&gt;history_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.history_view&quot;&gt; &lt;code&gt;history_view()&lt;/code&gt; &lt;/a&gt; 에서 사용되는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="6c63c61822ce8565bbff9ba9c14ec706fad15416" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_add&quot;&gt;&lt;code&gt;response_add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_change&quot;&gt;&lt;code&gt;response_change()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_delete&quot;&gt;&lt;code&gt;response_delete()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_add&quot;&gt; &lt;code&gt;response_add()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_change&quot;&gt; &lt;code&gt;response_change()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_delete&quot;&gt; &lt;code&gt;response_delete()&lt;/code&gt; &lt;/a&gt; 의해 사용되는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="84e2190f2c73e7f762bcc09f1d74e0a065af6f13" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by the &lt;code&gt;delete_selected&lt;/code&gt; action method for displaying a confirmation page when deleting one or more objects. See the &lt;a href=&quot;actions&quot;&gt;actions documentation&lt;/a&gt;.</source>
          <target state="translated">하나 이상의 객체를 삭제할 때 확인 페이지를 표시하기 위해 &lt;code&gt;delete_selected&lt;/code&gt; 조치 메소드가 사용하는 사용자 정의 템플리트의 경로 입니다. &lt;a href=&quot;actions&quot;&gt;작업 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f95dfae2a5316331007fb6a8e1f5453be2d906e0" translate="yes" xml:space="preserve">
          <source>Paths in asset definitions</source>
          <target state="translated">자산 정의의 경로</target>
        </trans-unit>
        <trans-unit id="53abecb8bf2af146e43fc25704616a8595335af7" translate="yes" xml:space="preserve">
          <source>Paths used to specify assets can be either relative or absolute. If a path starts with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;, it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix. If the &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; app is installed, it will be used to serve assets.</source>
          <target state="translated">자산을 지정하는 데 사용되는 경로는 상대적이거나 절대적 일 수 있습니다. 경로가 &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;http://&lt;/code&gt; 또는 &lt;code&gt;https://&lt;/code&gt; 로 시작하면 절대 경로로 해석되어 그대로 유지됩니다. 다른 모든 경로 앞에는 적절한 접두사 값이 붙습니다. 는 IF &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 의&lt;/a&gt; 응용 프로그램이 설치되어,이 자산을 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2feeb9a8c48b959a84dc56a27e5d342951587fd" translate="yes" xml:space="preserve">
          <source>Patterns don&amp;rsquo;t search GET and POST parameters, or the domain name. For example, in a request to &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;. In a request to &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;, the URLconf will also look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">패턴은 GET 및 POST 매개 변수 또는 도메인 이름을 검색하지 않습니다. 예를 들어 &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 찾습니다 . &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 도 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="2b78a58c376655ac544fdd20d4725693c93da7d0" translate="yes" xml:space="preserve">
          <source>Pay extra attention if you set new default values for arguments in the &lt;code&gt;Field&lt;/code&gt; superclass; you want to make sure they&amp;rsquo;re always included, rather than disappearing if they take on the old default value.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; 수퍼 클래스 에서 인수의 새로운 기본값을 설정하는 경우 특히주의하십시오 . 이전 기본값을 사용하면 사라지지 않고 항상 포함되도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="594c442547cc35487cd009181ae20319c80c5a71" translate="yes" xml:space="preserve">
          <source>Pay particular attention to backwards incompatible changes to get a clear idea of what will be needed for a successful upgrade.</source>
          <target state="translated">이전 버전과 호환되지 않는 변경 사항에 특히주의를 기울여 성공적인 업그레이드에 필요한 사항을 명확하게 파악하십시오.</target>
        </trans-unit>
        <trans-unit id="e398f12507cb84c1ebf8a01e1677802a0e657315" translate="yes" xml:space="preserve">
          <source>Per-object summaries can be generated using the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; clause. When an &lt;code&gt;annotate()&lt;/code&gt; clause is specified, each object in the &lt;code&gt;QuerySet&lt;/code&gt; will be annotated with the specified values.</source>
          <target state="translated">객체 별 요약은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.annotate&quot;&gt; &lt;code&gt;annotate()&lt;/code&gt; &lt;/a&gt; 절을 사용하여 생성 할 수 있습니다 . 경우 &lt;code&gt;annotate()&lt;/code&gt; 구가 지정되면, 각 오브젝트 &lt;code&gt;QuerySet&lt;/code&gt; 지정된 값으로 주석한다.</target>
        </trans-unit>
        <trans-unit id="b8c281fc601c15be7b044f13ee8e38598899e21d" translate="yes" xml:space="preserve">
          <source>Per-request transactions and streaming responses</source>
          <target state="translated">요청 당 트랜잭션 및 스트리밍 응답</target>
        </trans-unit>
        <trans-unit id="67f3db8d0939383b7e5120b105c86c3bd6dbf1be" translate="yes" xml:space="preserve">
          <source>Percent Rank</source>
          <target state="translated">비율 순위</target>
        </trans-unit>
        <trans-unit id="f99f33983bd0aae5f91d07dd7ab8345f193cc3e5" translate="yes" xml:space="preserve">
          <source>Perform the command&amp;rsquo;s actions for &lt;code&gt;app_config&lt;/code&gt;, which will be an &lt;a href=&quot;../ref/applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance corresponding to an application label given on the command line.</source>
          <target state="translated">&lt;code&gt;app_config&lt;/code&gt; 에 대한 명령의 조치를 수행하십시오 . 이는 명령 행에 제공된 애플리케이션 레이블에 해당 하는 &lt;a href=&quot;../ref/applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="d095abe3a9010ab49f3950b5b1561b6615ba109b" translate="yes" xml:space="preserve">
          <source>Perform the command&amp;rsquo;s actions for &lt;code&gt;label&lt;/code&gt;, which will be the string as given on the command line.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; 에 대한 명령의 조치를 수행하십시오 . 이는 명령 행에 제공된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="2b80df3bed690b3128861d9e152f675ea8826d81" translate="yes" xml:space="preserve">
          <source>Performance and optimization</source>
          <target state="translated">성능 및 최적화</target>
        </trans-unit>
        <trans-unit id="bcd699a0cdae62872f3edfba9239ab5f07470457" translate="yes" xml:space="preserve">
          <source>Performance and optimization overview</source>
          <target state="translated">성능 및 최적화 개요</target>
        </trans-unit>
        <trans-unit id="87b4f4b3bfcd6886b8193c17c86c824cb40213a8" translate="yes" xml:space="preserve">
          <source>Performance benchmarking</source>
          <target state="translated">성능 벤치마킹</target>
        </trans-unit>
        <trans-unit id="0cb883fc85b1fd84aaebb7319c682c586a065641" translate="yes" xml:space="preserve">
          <source>Performance considerations</source>
          <target state="translated">성능 고려 사항</target>
        </trans-unit>
        <trans-unit id="ae714eedb21d7ab1528a4ae82422cec5289d2845" translate="yes" xml:space="preserve">
          <source>Performance considerations for large datasets</source>
          <target state="translated">대규모 데이터 세트에 대한 성능 고려 사항</target>
        </trans-unit>
        <trans-unit id="8ee3b2dc04e0215d9a974d428a5be7af6d478312" translate="yes" xml:space="preserve">
          <source>Performance considerations with ordering and sorting</source>
          <target state="translated">순서 및 정렬시 성능 고려 사항</target>
        </trans-unit>
        <trans-unit id="57eb76df8c228a52fa0a32fe3f7d805858d345f1" translate="yes" xml:space="preserve">
          <source>Performance issues paginating large &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">성능 문제 paginating 대형 &lt;code&gt;QuerySet&lt;/code&gt; 의</target>
        </trans-unit>
        <trans-unit id="7ceaba33d5069dbda23239422436b2c95b3fbf96" translate="yes" xml:space="preserve">
          <source>Performance optimizations</source>
          <target state="translated">성능 최적화</target>
        </trans-unit>
        <trans-unit id="5becd8e661b6a97e9458257ed85b17fc0d3e0068" translate="yes" xml:space="preserve">
          <source>Performance optimizations are another category of trade-offs with convenience. For instance, caching is useful in production, less so for local development. Error reporting needs are also widely different.</source>
          <target state="translated">성능 최적화는 편의상 또 다른 범주의 절충입니다. 예를 들어, 캐싱은 프로덕션에 유용하며 로컬 개발에는 그다지 유용하지 않습니다. 오류보고 요구 사항도 크게 다릅니다.</target>
        </trans-unit>
        <trans-unit id="158f80dec0b85939f0f5846ccb6bc0da934a4aff" translate="yes" xml:space="preserve">
          <source>Performing actions after commit</source>
          <target state="translated">커밋 후 작업 수행</target>
        </trans-unit>
        <trans-unit id="cd0fb10828b82b902b570a4024cf081d37128641" translate="yes" xml:space="preserve">
          <source>Performing extra work</source>
          <target state="translated">추가 작업 수행</target>
        </trans-unit>
        <trans-unit id="350310b0607f1d6331a0ddbcedd2fc32ffb465f7" translate="yes" xml:space="preserve">
          <source>Performing global post-test teardown.</source>
          <target state="translated">글로벌 테스트 후 분해 수행</target>
        </trans-unit>
        <trans-unit id="cc61a8f27b7c24e7cb629cf9d4b96984b5a39b6d" translate="yes" xml:space="preserve">
          <source>Performing global pre-test setup.</source>
          <target state="translated">글로벌 사전 테스트 설정 수행</target>
        </trans-unit>
        <trans-unit id="71e37d0adb6adfac736d37bfa52a53ea1e3bf6e1" translate="yes" xml:space="preserve">
          <source>Performing raw SQL queries</source>
          <target state="translated">원시 SQL 쿼리 수행</target>
        </trans-unit>
        <trans-unit id="cad75e52264fcd20385b958231648b076610e84b" translate="yes" xml:space="preserve">
          <source>Performing raw queries</source>
          <target state="translated">원시 쿼리 수행</target>
        </trans-unit>
        <trans-unit id="cc3b1021e9a86a3acfa73ba992dd59266658de10" translate="yes" xml:space="preserve">
          <source>Performs URL rewriting based on the &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt; &lt;code&gt;PREPEND_WWW&lt;/code&gt; &lt;/a&gt; 설정 에 따라 URL 재 작성을 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="d29a15d48c3ff7247ebc6f6ef2b637ea97801d97" translate="yes" xml:space="preserve">
          <source>Performs an SQL delete query on all rows in the &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and returns the number of objects deleted and a dictionary with the number of deletions per object type.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 의&lt;/a&gt; 모든 행에서 SQL 삭제 쿼리를 수행하고 삭제 된 개체 수와 개체 유형 당 삭제 수를 가진 사전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c114706f49d4f5dc002f7814b9df80c8a2ed84f2" translate="yes" xml:space="preserve">
          <source>Performs an SQL update query for the specified fields, and returns the number of rows matched (which may not be equal to the number of rows updated if some rows already have the new value).</source>
          <target state="translated">지정된 필드에 대해 SQL 업데이트 쿼리를 수행하고 일치하는 행 수를 반환합니다 (일부 행에 이미 새 값이있는 경우 업데이트 된 행 수와 같지 않을 수 있음).</target>
        </trans-unit>
        <trans-unit id="b48ee18bc781dc21a08722b397a52297df32eff1" translate="yes" xml:space="preserve">
          <source>Performs any cleaning on the &lt;code&gt;username&lt;/code&gt; (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username.</source>
          <target state="translated">사용자 개체를 가져 오거나 만들기 위해 사용자 &lt;code&gt;username&lt;/code&gt; 을 사용하기 전에 사용자 이름을 정리합니다 (예 : LDAP DN 정보 제거). 정리 된 사용자 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="246a818df13cbbbbfc866f12a62fd447eac03353" translate="yes" xml:space="preserve">
          <source>Performs global post-test teardown, such as removing instrumentation from the template system and restoring normal email services.</source>
          <target state="translated">템플릿 시스템에서 계측을 제거하고 일반 이메일 서비스를 복원하는 등의 전체 테스트 후 분류를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="a8b30211935a430f6cdf20f168e2eba4f87d8bb3" translate="yes" xml:space="preserve">
          <source>Performs global pre-test setup, such as installing instrumentation for the template rendering system and setting up the dummy email outbox.</source>
          <target state="translated">템플릿 렌더링 시스템 용 계측기 설치 및 더미 이메일 발신 함 설정과 같은 글로벌 사전 테스트 설정을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6177b018c2496ca26af918351b468dc1f146b310" translate="yes" xml:space="preserve">
          <source>Performs key view initialization prior to &lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; 전에 키보기 초기화를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="7b4fe6ff4dcae7c6f94c35e727b63487f7fdb00c" translate="yes" xml:space="preserve">
          <source>Perhaps logged-in admin users should be allowed to see unpublished &lt;code&gt;Questions&lt;/code&gt;, but not ordinary visitors. Again: whatever needs to be added to the software to accomplish this should be accompanied by a test, whether you write the test first and then make the code pass the test, or work out the logic in your code first and then write a test to prove it.</source>
          <target state="translated">로그인 한 관리자는 공개되지 않은 &lt;code&gt;Questions&lt;/code&gt; 을 볼 수 있지만 일반 방문자는 볼 수 없습니다. 다시 : 소프트웨어를 추가하기 위해 테스트를 먼저 작성하고 코드를 테스트에 통과 시키거나 코드의 논리를 먼저 연습 한 다음 테스트를 작성해야합니다. 그것을 증명하십시오.</target>
        </trans-unit>
        <trans-unit id="0e9fe7d5a36abc41d023282aff0764ffd9a1e922" translate="yes" xml:space="preserve">
          <source>Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn&amp;rsquo;t want to cache the entire result (since some of the data changes often), but you&amp;rsquo;d still want to cache the results that rarely change.</source>
          <target state="translated">예를 들어 사이트에 결과가 값 비싼 몇 가지 쿼리에 의존하는 뷰가 포함되어있을 수 있으며 결과는 서로 다른 간격으로 변경됩니다. 이 경우 전체 결과를 캐시하지 않으려는 경우 (일부 데이터 변경 사항이 있기 때문에) 사이트 별 또는보기 당 캐시 전략이 제공하는 전체 페이지 캐싱을 사용하는 것이 이상적이지 않습니다. 그러나 거의 변경되지 않는 결과를 캐시하려고합니다.</target>
        </trans-unit>
        <trans-unit id="8faebcc441548e3c376bd0355caeb12cebb88eba" translate="yes" xml:space="preserve">
          <source>Permission caching</source>
          <target state="translated">권한 캐싱</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="5d919afbd469ebf76a8be7e58815187b8fe8bc59" translate="yes" xml:space="preserve">
          <source>Permissions and Authorization</source>
          <target state="translated">권한 및 권한</target>
        </trans-unit>
        <trans-unit id="a47f3fd0644dda3ff0b65116c2c9135682fd4f23" translate="yes" xml:space="preserve">
          <source>Permissions and authorization</source>
          <target state="translated">권한 및 권한</target>
        </trans-unit>
        <trans-unit id="6042a22bc7d97a7cd78da919ef0f626d92138bbf" translate="yes" xml:space="preserve">
          <source>Permissions can be set not only per type of object, but also per specific object instance. By using the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission&quot;&gt;&lt;code&gt;has_view_permission()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission&quot;&gt;&lt;code&gt;has_add_permission()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt;&lt;code&gt;has_change_permission()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission&quot;&gt;&lt;code&gt;has_delete_permission()&lt;/code&gt;&lt;/a&gt; methods provided by the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; class, it is possible to customize permissions for different object instances of the same type.</source>
          <target state="translated">개체 유형뿐만 아니라 특정 개체 인스턴스별로 권한을 설정할 수 있습니다. &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 클래스가 제공 하는 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission&quot;&gt; &lt;code&gt;has_view_permission()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission&quot;&gt; &lt;code&gt;has_add_permission()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt; &lt;code&gt;has_change_permission()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission&quot;&gt; &lt;code&gt;has_delete_permission()&lt;/code&gt; &lt;/a&gt; 메소드 를 사용하여 동일한 유형의 다른 오브젝트 인스턴스에 대한 권한을 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbff237369de06d317a0b658feaf770230fade6a" translate="yes" xml:space="preserve">
          <source>Permissions: Binary (yes/no) flags designating whether a user may perform a certain task.</source>
          <target state="translated">권한 : 사용자가 특정 작업을 수행 할 수 있는지 여부를 지정하는 이진 (예 / 아니오) 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="7a346cd10ffe699546f235f362a53bac9f81fa99" translate="yes" xml:space="preserve">
          <source>Persistent connections</source>
          <target state="translated">지속적인 연결</target>
        </trans-unit>
        <trans-unit id="5527c702a1226ed849c17bf8545ec1a197d478da" translate="yes" xml:space="preserve">
          <source>Persistent connections avoid the overhead of re-establishing a connection to the database in each request. They&amp;rsquo;re controlled by the &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; parameter which defines the maximum lifetime of a connection. It can be set independently for each database.</source>
          <target state="translated">지속적인 연결은 각 요청에서 데이터베이스에 대한 연결을 다시 설정하는 오버 헤드를 피합니다. 연결의 최대 수명을 정의 하는 &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt; 매개 변수에 의해 제어됩니다 . 각 데이터베이스에 대해 독립적으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc8fd07befe6d71a839208418ee04d9af0cdb35" translate="yes" xml:space="preserve">
          <source>Persistent state</source>
          <target state="translated">지속적인 상태</target>
        </trans-unit>
        <trans-unit id="496e9438ab65557e3360c256d99d6d71460da8a3" translate="yes" xml:space="preserve">
          <source>Philosophy</source>
          <target state="translated">Philosophy</target>
        </trans-unit>
        <trans-unit id="35cc717a3ea48a92f26c8b257f8b5c3c987027a3" translate="yes" xml:space="preserve">
          <source>Pickles of &lt;code&gt;QuerySets&lt;/code&gt; are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy.</source>
          <target state="translated">&lt;code&gt;QuerySets&lt;/code&gt; 피클은 이를 생성하는 데 사용 된 Django 버전에만 유효합니다. Django 버전 N을 사용하여 피클을 생성하면 Django 버전 N + 1에서 피클을 읽을 수 있다고 보장 할 수 없습니다. 피클을 장기 보관 전략의 일부로 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6d0148232e25209752fd250046d1e1e5365c0bf9" translate="yes" xml:space="preserve">
          <source>Pickles of models are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy.</source>
          <target state="translated">피클 모델은 모델 생성에 사용 된 Django 버전에만 유효합니다. Django 버전 N을 사용하여 피클을 생성하면 Django 버전 N + 1에서 피클을 읽을 수 있다고 보장 할 수 없습니다. 피클을 장기 보관 전략의 일부로 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e0e5d5560b715f0a73b38d639394514dc7764164" translate="yes" xml:space="preserve">
          <source>Pickling &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">산세 &lt;code&gt;QuerySet&lt;/code&gt; 의</target>
        </trans-unit>
        <trans-unit id="3e577e5c97a799fa16a538451be3f3460858c9f4" translate="yes" xml:space="preserve">
          <source>Pickling objects</source>
          <target state="translated">산세 대상</target>
        </trans-unit>
        <trans-unit id="c9b609a7a0071985e1b196bfdacc310b8ce76780" translate="yes" xml:space="preserve">
          <source>Pinging Google</source>
          <target state="translated">핑 Google</target>
        </trans-unit>
        <trans-unit id="1aec9f7d616f37a87712e020c021c06578d6d716" translate="yes" xml:space="preserve">
          <source>Pinging Google via &lt;code&gt;manage.py&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;manage.py&lt;/code&gt; 를 통해 Google 핑</target>
        </trans-unit>
        <trans-unit id="2f1d58b998875409d1483ed8145f5535f153c8c0" translate="yes" xml:space="preserve">
          <source>Pixel width and height used for georeferencing the raster, as a point object with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; members. See &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.geotransform&quot;&gt;&lt;code&gt;geotransform&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 멤버가 있는 점 객체로 래스터를 지리 참조하는 데 사용되는 픽셀 너비 및 높이 입니다. 자세한 내용은 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.geotransform&quot;&gt; &lt;code&gt;geotransform&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bc8a879aac31b9d6eb482c7dc9001a8e5a26ed67" translate="yes" xml:space="preserve">
          <source>Place.objects.all() returns all Places, regardless of whether they have Restaurants:</source>
          <target state="translated">Place.objects.all ()은 음식점이 있는지 여부에 관계없이 모든 장소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1472be598dad008e8b7e6176694c3682d869a694" translate="yes" xml:space="preserve">
          <source>Platform-specific instructions</source>
          <target state="translated">플랫폼 별 지침</target>
        </trans-unit>
        <trans-unit id="aff897904900c56f2ce8b62f77e12c92a2ed20e4" translate="yes" xml:space="preserve">
          <source>Playing with &lt;code&gt;Context&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; 객체로 재생</target>
        </trans-unit>
        <trans-unit id="6ac31ef33df4860a5777ea446d2c00537722d098" translate="yes" xml:space="preserve">
          <source>Playing with the API</source>
          <target state="translated">API로 재생</target>
        </trans-unit>
        <trans-unit id="945144904d116a346215bedd2ad08e4f4c3b1716" translate="yes" xml:space="preserve">
          <source>Please also consult platform-specific instructions if you are on &lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; or &lt;a href=&quot;index#windows&quot;&gt;Windows&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; 또는 &lt;a href=&quot;index#windows&quot;&gt;Windows를&lt;/a&gt; 사용하는 경우 플랫폼 별 지침을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3063da44afe6d9259ba01aec843c1f12d20e110" translate="yes" xml:space="preserve">
          <source>Please also see the &lt;a href=&quot;#render-warning&quot;&gt;rendering warning&lt;/a&gt; as mentioned for &lt;a href=&quot;#django-admin-startapp&quot;&gt;&lt;code&gt;startapp&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django-admin-startapp&quot;&gt; &lt;code&gt;startapp&lt;/code&gt; 에&lt;/a&gt; 언급 된 &lt;a href=&quot;#render-warning&quot;&gt;렌더링 경고&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4b0dee64fbb0daeb99d6f6433dd16d0f3ea7666" translate="yes" xml:space="preserve">
          <source>Please don&amp;rsquo;t do it for this tutorial, but on the next page that displays a preview of the patch, you would click &amp;ldquo;Create pull request&amp;rdquo;.</source>
          <target state="translated">이 튜토리얼에서는하지 말고 패치의 미리보기를 표시하는 다음 페이지에서 &quot;Create pull request&quot;를 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="dd3c3fcd9d54b9d240b3a7b691e97c29668e1d7d" translate="yes" xml:space="preserve">
          <source>Please note that according to &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-unicode-sets.html&quot;&gt;MySQL Unicode Character Sets&lt;/a&gt;, comparisons for the &lt;code&gt;utf8_general_ci&lt;/code&gt; collation are faster, but slightly less correct, than comparisons for &lt;code&gt;utf8_unicode_ci&lt;/code&gt;. If this is acceptable for your application, you should use &lt;code&gt;utf8_general_ci&lt;/code&gt; because it is faster. If this is not acceptable (for example, if you require German dictionary order), use &lt;code&gt;utf8_unicode_ci&lt;/code&gt; because it is more accurate.</source>
          <target state="translated">에 따라 있습니다 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-unicode-sets.html&quot;&gt;MySQL의 유니 코드 문자 집합&lt;/a&gt; 의 대한 비교 &lt;code&gt;utf8_general_ci&lt;/code&gt; 의 데이터 정렬에 대한 비교를보다 빠르게,하지만 약간 덜 정확한 &lt;code&gt;utf8_unicode_ci&lt;/code&gt; . 이것이 응용 프로그램에 적합한 경우, 더 빠르기 때문에 &lt;code&gt;utf8_general_ci&lt;/code&gt; 를 사용해야합니다 . 이것이 허용되지 않는 경우 (예 : 독일어 사전 순서가 필요한 경우) 더 정확한 &lt;code&gt;utf8_unicode_ci&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="61c9c7d6201e4421ab2907f232155b7d7af62fbc" translate="yes" xml:space="preserve">
          <source>Please note that the presence of this setting does not imply that Django&amp;rsquo;s CSRF protection is safe from cross-subdomain attacks by default - please see the &lt;a href=&quot;csrf#csrf-limitations&quot;&gt;CSRF limitations&lt;/a&gt; section.</source>
          <target state="translated">이 설정이 존재한다고해서 Django의 CSRF 보호가 기본적으로 교차 서브 도메인 공격으로부터 안전하다는 것을 의미하지는 않습니다 . &lt;a href=&quot;csrf#csrf-limitations&quot;&gt;CSRF 제한&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f555e10e4c64d8e62d16b2b5b7c678648b4ff894" translate="yes" xml:space="preserve">
          <source>Please note the caveats under &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt;. For the case of a reverse proxy, it may be easier or more secure to configure the main Web server to do the redirect to HTTPS.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 아래의주의 사항에 유의하십시오 . 리버스 프록시의 경우 HTTPS로 리디렉션하도록 기본 웹 서버를 구성하는 것이 더 안전하거나 안전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b25cb094d1d27b01e27c9afab7e6b1a51bce03d7" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/gis/commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the GeoDjango documentation.</source>
          <target state="translated">GeoDjango 문서 의 &lt;a href=&quot;contrib/gis/commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d92355eefed916d708a8f8c8821d784a6d817613" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/sitemaps#django-admin-ping_google&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the Sitemaps documentation.</source>
          <target state="translated">Sitemap 설명서 의 &lt;a href=&quot;contrib/sitemaps#django-admin-ping_google&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f8a4e796321a065679280200da41cb9ae57915f" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles&quot;&gt;정적 파일&lt;/a&gt; 문서 에서 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="27545fdc451a436172a6796515d9ff68fee772aa" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles&quot;&gt;정적 파일&lt;/a&gt; 문서 에서 &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fcc1657655e13b26336a1f918bea2362b8beb8ad" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_Geography&quot;&gt;PostGIS Geography Type&lt;/a&gt; documentation for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_Geography&quot;&gt;PostGIS Geography Type&lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="eee66bf135a104e85862ac181583cbf6e6096e0b" translate="yes" xml:space="preserve">
          <source>Please refer to the notes about &lt;a href=&quot;#historical-models&quot;&gt;Historical models&lt;/a&gt; in migrations to see the implications that come along.</source>
          <target state="translated">이와 관련된 결과를 보려면 마이그레이션의 &lt;a href=&quot;#historical-models&quot;&gt;히스토리 모델&lt;/a&gt; 에 대한 참고 사항 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7b5132a644191e3e0c1bd4c851f5a29784f9272a" translate="yes" xml:space="preserve">
          <source>Plural form and po files</source>
          <target state="translated">복수형과 po 파일</target>
        </trans-unit>
        <trans-unit id="deece46c22e64f44a14fe2209222289025573b98" translate="yes" xml:space="preserve">
          <source>Pluralization</source>
          <target state="translated">Pluralization</target>
        </trans-unit>
        <trans-unit id="bfb18c81f7d12bc77bce9d95a4e7bbce79d43c94" translate="yes" xml:space="preserve">
          <source>Points to the model the field relates to. For example, &lt;code&gt;Author&lt;/code&gt; in &lt;code&gt;ForeignKey(Author, on_delete=models.CASCADE)&lt;/code&gt;. The &lt;code&gt;related_model&lt;/code&gt; for a &lt;code&gt;GenericForeignKey&lt;/code&gt; is always &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">필드가 관련된 모델을 가리 킵니다. 예를 들어, &lt;code&gt;Author&lt;/code&gt; in &lt;code&gt;ForeignKey(Author, on_delete=models.CASCADE)&lt;/code&gt; 입니다. &lt;code&gt;related_model&lt;/code&gt; A에 대한 &lt;code&gt;GenericForeignKey&lt;/code&gt; 은 항상 없다 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71bb200b0c8a940ce59c402fc6398215220da8df" translate="yes" xml:space="preserve">
          <source>Populate the test database with fixture data from the given fixtures. (For more on fixtures, see the documentation for &lt;a href=&quot;#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; above.)</source>
          <target state="translated">주어진 조명기의 조명기 데이터로 테스트 데이터베이스를 채 웁니다. (픽스처에 대한 자세한 내용은 설명서를 참조 &lt;a href=&quot;#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; &lt;/a&gt; 위.)</target>
        </trans-unit>
        <trans-unit id="3a2edcda15f5ffb120fc20f1479582ba5b5f36fb" translate="yes" xml:space="preserve">
          <source>Populated (through &lt;a href=&quot;mixins-simple#django.views.generic.base.ContextMixin&quot;&gt;&lt;code&gt;ContextMixin&lt;/code&gt;&lt;/a&gt;) with the keyword arguments captured from the URL pattern that served the view.</source>
          <target state="translated">뷰를 제공 한 URL 패턴에서 캡처 된 키워드 인수로 &lt;a href=&quot;mixins-simple#django.views.generic.base.ContextMixin&quot;&gt; &lt;code&gt;ContextMixin&lt;/code&gt; 을&lt;/a&gt; 통해 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="d728346840abef332d96fd01dccf493e5038300e" translate="yes" xml:space="preserve">
          <source>Port 7000 on IP address &lt;code&gt;1.2.3.4&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;1.2.3.4&lt;/code&gt; 의 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="607d0c9b35e92f6cc376ca90f2895ba371a84f2b" translate="yes" xml:space="preserve">
          <source>Port 7000 on IP address &lt;code&gt;127.0.0.1&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 의 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="b46d886ce6b0db58100d9b5030cbdd743f26cf41" translate="yes" xml:space="preserve">
          <source>Port 7000 on IPv6 address &lt;code&gt;2001:0db8:1234:5678::9&lt;/code&gt;:</source>
          <target state="translated">IPv6 주소 &lt;code&gt;2001:0db8:1234:5678::9&lt;/code&gt; 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="6e9c9cca16d90fd52eacd273a38fa72a12f667fc" translate="yes" xml:space="preserve">
          <source>Port 7000 on IPv6 address &lt;code&gt;::1&lt;/code&gt;:</source>
          <target state="translated">IPv6 주소 &lt;code&gt;::1&lt;/code&gt; 의 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="742e76e604364aedcc1fa967a72420adbbbae2a0" translate="yes" xml:space="preserve">
          <source>Port 8000 on IP address &lt;code&gt;1.2.3.4&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;1.2.3.4&lt;/code&gt; 의 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="bc2f03cb30b616fe88f752d7e01d955bfe250071" translate="yes" xml:space="preserve">
          <source>Port 8000 on IP address &lt;code&gt;127.0.0.1&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 의 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="4de2c8eb6aa5980c388083ab1f0fafcbfac5918f" translate="yes" xml:space="preserve">
          <source>Port 8000 on IPv4 address of host &lt;code&gt;localhost&lt;/code&gt;:</source>
          <target state="translated">호스트 &lt;code&gt;localhost&lt;/code&gt; 의 IPv4 주소에있는 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="573ccc065de8b4c79dd9da36bc7dcb461a3d1be2" translate="yes" xml:space="preserve">
          <source>Port 8000 on IPv6 address &lt;code&gt;::1&lt;/code&gt;:</source>
          <target state="translated">IPv6 주소 &lt;code&gt;::1&lt;/code&gt; 의 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="4da741a13093553d24e793918995988b42ce5ef5" translate="yes" xml:space="preserve">
          <source>Port 8000 on IPv6 address of host &lt;code&gt;localhost&lt;/code&gt;:</source>
          <target state="translated">호스트 &lt;code&gt;localhost&lt;/code&gt; 의 IPv6 주소에서 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="11572a96cabaee01b8320ac115b9990aee7241f0" translate="yes" xml:space="preserve">
          <source>Port to use for the SMTP server defined in &lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; 에&lt;/a&gt; 정의 된 SMTP 서버에 사용할 포트 입니다.</target>
        </trans-unit>
        <trans-unit id="0990635d6e89d26c7cf1ecf413e1a3ce967ed2db" translate="yes" xml:space="preserve">
          <source>Portions of the earth&amp;rsquo;s surface may projected onto a two-dimensional, or Cartesian, plane. Projected coordinate systems are especially convenient for region-specific applications, e.g., if you know that your database will only cover geometries in &lt;a href=&quot;https://www.spatialreference.org/ref/epsg/2796/&quot;&gt;North Kansas&lt;/a&gt;, then you may consider using projection system specific to that region. Moreover, projected coordinate systems are defined in Cartesian units (such as meters or feet), easing distance calculations.</source>
          <target state="translated">지표면의 일부가 2 차원 또는 직교 평면에 투영 될 수 있습니다. 투영 좌표계는 특히 지역별 응용 프로그램에 편리합니다. 예를 들어, 데이터베이스가 &lt;a href=&quot;https://www.spatialreference.org/ref/epsg/2796/&quot;&gt;North Kansas의&lt;/a&gt; 지오메트리 만 다룰 수 있다는 것을 알고 있다면 해당 지역에 맞는 투영 시스템을 사용하는 것이 좋습니다. 또한 투영 좌표계는 직교 단위 (예 : 미터 또는 피트)로 정의되어 거리 계산이 쉬워집니다.</target>
        </trans-unit>
        <trans-unit id="18762e8d6ba5f2c5db546d95048bef0d942060a9" translate="yes" xml:space="preserve">
          <source>Positional arguments can be expressions or Python values. Strings are assumed to be column references and will be wrapped in &lt;code&gt;F()&lt;/code&gt; expressions while other values will be wrapped in &lt;code&gt;Value()&lt;/code&gt; expressions.</source>
          <target state="translated">위치 인수는 표현식 또는 Python 값일 수 있습니다. 문자열은 열 참조 인 것으로 가정하고 &lt;code&gt;F()&lt;/code&gt; 표현식으로 랩핑되고 다른 값은 &lt;code&gt;Value()&lt;/code&gt; 표현식 으로 랩핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="57aa2fd441e9ebdf27ee5187b667b9235ac71fa2" translate="yes" xml:space="preserve">
          <source>Positional interpolation: &lt;code&gt;obj&lt;/code&gt; contains a JavaScript Array object whose elements values are then sequentially interpolated in their corresponding &lt;code&gt;fmt&lt;/code&gt; placeholders in the same order they appear. For example:</source>
          <target state="translated">위치 보간 : &lt;code&gt;obj&lt;/code&gt; 에는 요소 값이 나타나는 순서대로 해당 &lt;code&gt;fmt&lt;/code&gt; 자리 표시 자에서 순차적으로 보간되는 JavaScript Array 객체가 포함 됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="681e79c0db6a401f4ddd7a4987052826179fc670" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt;&lt;code&gt;changefreq&lt;/code&gt;&lt;/a&gt;, whether you use a method or attribute, are:</source>
          <target state="translated">메소드 또는 속성 사용 여부에 관계없이 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt; &lt;code&gt;changefreq&lt;/code&gt; 의&lt;/a&gt; 가능한 값 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b490ea1c022fa91521273862fbe582512a00d2ba" translate="yes" xml:space="preserve">
          <source>Possible values for the setting are:</source>
          <target state="translated">설정 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7001a7b3fe9633e217615d8ec116930191433437" translate="yes" xml:space="preserve">
          <source>Post the package on a public repository, such as &lt;a href=&quot;https://pypi.org/&quot;&gt;the Python Package Index (PyPI)&lt;/a&gt;. &lt;a href=&quot;https://packaging.python.org&quot;&gt;packaging.python.org&lt;/a&gt; has &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives&quot;&gt;a good tutorial&lt;/a&gt; for doing this.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/&quot;&gt;Python 패키지 색인 (PyPI)&lt;/a&gt; 과 같은 공용 저장소에 패키지를 게시하십시오 . &lt;a href=&quot;https://packaging.python.org&quot;&gt;packaging.python.org&lt;/a&gt; 에는이를 &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives&quot;&gt;위한 좋은 튜토리얼&lt;/a&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="678cbf7009afee05403a9a11e9851a53710762e8" translate="yes" xml:space="preserve">
          <source>Post-installation</source>
          <target state="translated">Post-installation</target>
        </trans-unit>
        <trans-unit id="f075ac1284323276cbb4295a60cdc325f91d79a0" translate="yes" xml:space="preserve">
          <source>Post-render callbacks</source>
          <target state="translated">렌더링 후 콜백</target>
        </trans-unit>
        <trans-unit id="f6b2ee5af0705015c0259810547be11a12a12e56" translate="yes" xml:space="preserve">
          <source>PostGIS</source>
          <target state="translated">PostGIS</target>
        </trans-unit>
        <trans-unit id="2bea93831effd0e3ad7df53d76be03e00ff5b6cd" translate="yes" xml:space="preserve">
          <source>PostGIS &amp;amp; SpatiaLite</source>
          <target state="translated">PostGIS &amp;amp; SpatiaLite</target>
        </trans-unit>
        <trans-unit id="11a4e4e05809d4f14d8be13109be6db393559bcb" translate="yes" xml:space="preserve">
          <source>PostGIS 2 includes an extension for PostgreSQL that&amp;rsquo;s used to enable spatial functionality:</source>
          <target state="translated">PostGIS 2에는 공간 기능을 활성화하는 데 사용되는 PostgreSQL 용 확장이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="73a99390678212628538dd514696cce25b495507" translate="yes" xml:space="preserve">
          <source>PostGIS SQL equivalent:</source>
          <target state="translated">PostGIS SQL과 동등한 기능 :</target>
        </trans-unit>
        <trans-unit id="7848491139f3962711791f73256bcd5da2e52827" translate="yes" xml:space="preserve">
          <source>PostGIS and MariaDB SQL equivalent:</source>
          <target state="translated">PostGIS 및 MariaDB SQL 해당 :</target>
        </trans-unit>
        <trans-unit id="1d1da10b3da9b356a1f4a1d6e8a8cdfb730bd398" translate="yes" xml:space="preserve">
          <source>PostGIS equivalent:</source>
          <target state="translated">PostGIS 상당 :</target>
        </trans-unit>
        <trans-unit id="196b10bf3f4d00049cab5694548312b77ddc43e2" translate="yes" xml:space="preserve">
          <source>PostGIS is recommended, because it is the most mature and feature-rich open source spatial database.</source>
          <target state="translated">PostGIS는 가장 성숙하고 기능이 풍부한 오픈 소스 공간 데이터베이스이므로 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">PostgreSQL</target>
        </trans-unit>
        <trans-unit id="bbd25fc89254dfdc1a222d745bb12b7ccc57b2be" translate="yes" xml:space="preserve">
          <source>PostgreSQL (with PostGIS), MySQL (mostly with MyISAM engine), Oracle, and SQLite (with SpatiaLite) are the spatial databases currently supported.</source>
          <target state="translated">PostgreSQL (PostGIS 포함), MySQL (주로 MyISAM 엔진 사용), Oracle 및 SQLite (SpatiaLite 사용)는 현재 지원되는 공간 데이터베이스입니다.</target>
        </trans-unit>
        <trans-unit id="2f5ea5c978e41d98e9cd9501d91ecdc32ecfb799" translate="yes" xml:space="preserve">
          <source>PostgreSQL allows the definition of custom range types. Django&amp;rsquo;s model and form field implementations use base classes below, and psycopg2 provides a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.register_range&quot;&gt;&lt;code&gt;register_range()&lt;/code&gt;&lt;/a&gt; to allow use of custom range types.</source>
          <target state="translated">PostgreSQL에서는 사용자 정의 범위 유형을 정의 할 수 있습니다. Django의 모델 및 양식 필드 구현은 아래 기본 클래스를 사용하며 psycopg2는 사용자 정의 범위 유형을 사용할 수 있도록 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.register_range&quot;&gt; &lt;code&gt;register_range()&lt;/code&gt; &lt;/a&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="fe4d770eb0d9650370218a8fa878b7a5b483ebc7" translate="yes" xml:space="preserve">
          <source>PostgreSQL and Oracle support tablespaces. SQLite, MariaDB and MySQL don&amp;rsquo;t.</source>
          <target state="translated">PostgreSQL 및 Oracle은 테이블 스페이스를 지원합니다. SQLite, MariaDB 및 MySQL은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="05f4ec56f55ff923cb4b3d56ae07f61bd20228d1" translate="yes" xml:space="preserve">
          <source>PostgreSQL connection settings</source>
          <target state="translated">PostgreSQL 연결 설정</target>
        </trans-unit>
        <trans-unit id="f412ef2862c42e4812ecbb9665bab0d6019d9370" translate="yes" xml:space="preserve">
          <source>PostgreSQL considerations</source>
          <target state="translated">PostgreSQL 고려 사항</target>
        </trans-unit>
        <trans-unit id="c655c4fb326b838552c931062ac52582724f272b" translate="yes" xml:space="preserve">
          <source>PostgreSQL doesn&amp;rsquo;t support &lt;code&gt;select_for_update()&lt;/code&gt; with &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expressions.</source>
          <target state="translated">PostgreSQL은 &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt; 표현식으로 &lt;code&gt;select_for_update()&lt;/code&gt; 를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c867fef8faa5874e85b172667e33557340e635c7" translate="yes" xml:space="preserve">
          <source>PostgreSQL has a number of features which are not shared by the other databases Django supports. This optional module contains model fields and form fields for a number of PostgreSQL specific data types.</source>
          <target state="translated">PostgreSQL에는 Django가 지원하는 다른 데이터베이스와 공유하지 않는 많은 기능이 있습니다. 이 선택적 모듈에는 다양한 PostgreSQL 특정 데이터 유형에 대한 모델 필드와 양식 필드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb7e67fcf426788e20ae1eb3f7197518890ae1e2" translate="yes" xml:space="preserve">
          <source>PostgreSQL has its own full text search implementation built-in. While not as powerful as some other search engines, it has the advantage of being inside your database and so can easily be combined with other relational queries such as categorization.</source>
          <target state="translated">PostgreSQL에는 자체 텍스트 검색 구현이 내장되어 있습니다. 다른 검색 엔진만큼 강력하지는 않지만 데이터베이스 내부에 있다는 이점이 있으므로 분류와 같은 다른 관계형 쿼리와 쉽게 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ef98aade0e8da7a08e5531509a27a327b441abe" translate="yes" xml:space="preserve">
          <source>PostgreSQL has limited support for &lt;code&gt;ValueRange&lt;/code&gt; and only supports use of the standard start and end points, such as &lt;code&gt;CURRENT ROW&lt;/code&gt; and &lt;code&gt;UNBOUNDED
FOLLOWING&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL은 &lt;code&gt;ValueRange&lt;/code&gt; 에 대한 지원이 제한되어 있으며 &lt;code&gt;CURRENT ROW&lt;/code&gt; 및 &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt; FOLLOWING 과 같은 표준 시작점과 끝점의 사용 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="3643545450f0b1060eaf31855775f5e742665810" translate="yes" xml:space="preserve">
          <source>PostgreSQL has some rather esoteric behavior when using indexes and slices on multidimensional arrays. It will always work to use indexes to reach down to the final underlying data, but most other slices behave strangely at the database level and cannot be supported in a logical, consistent fashion by Django.</source>
          <target state="translated">PostgreSQL에는 다차원 배열에서 인덱스와 슬라이스를 사용할 때 다소 난해한 동작이 있습니다. 인덱스를 사용하여 최종 기본 데이터에 도달하는 것이 항상 작동하지만 대부분의 다른 슬라이스는 데이터베이스 수준에서 이상하게 동작하며 Django가 논리적이고 일관된 방식으로 지원할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="168c98d4a0d8ebe6230bc3c052e4fdd2ba25b19e" translate="yes" xml:space="preserve">
          <source>PostgreSQL has two native JSON based data types: &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt;. The main difference between them is how they are stored and how they can be queried. PostgreSQL&amp;rsquo;s &lt;code&gt;json&lt;/code&gt; field is stored as the original string representation of the JSON and must be decoded on the fly when queried based on keys. The &lt;code&gt;jsonb&lt;/code&gt; field is stored based on the actual structure of the JSON which allows indexing. The trade-off is a small additional cost on writing to the &lt;code&gt;jsonb&lt;/code&gt; field. &lt;code&gt;JSONField&lt;/code&gt; uses &lt;code&gt;jsonb&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL에는 &lt;code&gt;json&lt;/code&gt; 과 &lt;code&gt;jsonb&lt;/code&gt; 의 두 가지 기본 JSON 기반 데이터 유형이 있습니다 . 그들 사이의 주요 차이점은 저장 방법과 쿼리 방법입니다. PostgreSQL의 &lt;code&gt;json&lt;/code&gt; 필드는 JSON 의 원래 문자열 표현으로 저장되며 키를 기반으로 쿼리 할 때 즉시 디코딩해야합니다. &lt;code&gt;jsonb&lt;/code&gt; 의 필드가 인덱싱을 허용 JSON의 실제 구조에 기초하여 저장된다. 트레이드 오프는 &lt;code&gt;jsonb&lt;/code&gt; 필드 에 쓰는 데 약간의 추가 비용이 듭니다 . &lt;code&gt;JSONField&lt;/code&gt; 는 jsonb를 사용 &lt;code&gt;jsonb&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0657db99aab825991981ffd509a6318950c7ef93" translate="yes" xml:space="preserve">
          <source>PostgreSQL is the most capable of all the databases here in terms of schema support.</source>
          <target state="translated">PostgreSQL은 스키마 지원 측면에서 모든 데이터베이스 중 가장 유능한 데이터베이스입니다.</target>
        </trans-unit>
        <trans-unit id="55dd5c922f681934365cca704f104392d442ece2" translate="yes" xml:space="preserve">
          <source>PostgreSQL notes</source>
          <target state="translated">PostgreSQL 노트</target>
        </trans-unit>
        <trans-unit id="cdd6eae37307f69a33d4850f1814d7cc40ca27df" translate="yes" xml:space="preserve">
          <source>PostgreSQL provides a set of SQL operators that can be used together with the range data types (see &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-range.html#RANGE-OPERATORS-TABLE&quot;&gt;the PostgreSQL documentation for the full details of range operators&lt;/a&gt;). This class is meant as a convenient method to avoid typos. The operator names overlap with the names of corresponding lookups.</source>
          <target state="translated">PostgreSQL은 범위 데이터 유형과 함께 사용할 수있는 일련의 SQL 연산자를 제공합니다 ( &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-range.html#RANGE-OPERATORS-TABLE&quot;&gt;범위 연산자에 대한 자세한 내용은 PostgreSQL 설명서&lt;/a&gt; 참조 ). 이 클래스는 오타를 피하는 편리한 방법으로 사용됩니다. 연산자 이름은 해당 조회 이름과 겹칩니다.</target>
        </trans-unit>
        <trans-unit id="1b9fdd15f79f970458f34ca1a3022486efe7c590" translate="yes" xml:space="preserve">
          <source>PostgreSQL requires functions referenced in the condition to be marked as IMMUTABLE. Django doesn&amp;rsquo;t validate this but PostgreSQL will error. This means that functions such as &lt;a href=&quot;database-functions#date-functions&quot;&gt;Date functions&lt;/a&gt; and &lt;a href=&quot;database-functions#django.db.models.functions.Concat&quot;&gt;&lt;code&gt;Concat&lt;/code&gt;&lt;/a&gt; aren&amp;rsquo;t accepted. If you store dates in &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, comparison to &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects may require the &lt;code&gt;tzinfo&lt;/code&gt; argument to be provided because otherwise the comparison could result in a mutable function due to the casting Django does for &lt;a href=&quot;querysets#field-lookups&quot;&gt;lookups&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL에서는 조건에서 참조되는 함수가 IMMUTABLE로 표시되어야합니다. Django는 이것을 확인하지 않지만 PostgreSQL은 오류가 발생합니다. 즉, &lt;a href=&quot;database-functions#date-functions&quot;&gt;날짜 함수&lt;/a&gt; 및 &lt;a href=&quot;database-functions#django.db.models.functions.Concat&quot;&gt; &lt;code&gt;Concat&lt;/code&gt; &lt;/a&gt; 과 같은 함수 는 허용되지 않습니다. &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 에&lt;/a&gt; 날짜를 저장하는 경우 , &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체 와 비교 하려면 &lt;code&gt;tzinfo&lt;/code&gt; 인수가 제공되어야합니다. 그렇지 않으면 Django가 &lt;a href=&quot;querysets#field-lookups&quot;&gt;검색&lt;/a&gt; 을 위해 캐스팅으로 인해 비교로 인해 변경 가능한 함수가 생성 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a085e76da94d3489a9588f510cd24ea971e32f8b" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific aggregation functions</source>
          <target state="translated">PostgreSQL 관련 집계 함수</target>
        </trans-unit>
        <trans-unit id="17d23c73509ab198a20410e4a6424d0513c56222" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific database constraints</source>
          <target state="translated">PostgreSQL 관련 데이터베이스 제약</target>
        </trans-unit>
        <trans-unit id="821a2053b711fd6c472f917be0d74de35f6e9b4e" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific database functions</source>
          <target state="translated">PostgreSQL 관련 데이터베이스 기능</target>
        </trans-unit>
        <trans-unit id="5309ed46b34a6d7276f1b802d8aa991ba94fedef" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific form fields and widgets</source>
          <target state="translated">PostgreSQL 특정 양식 필드 및 위젯</target>
        </trans-unit>
        <trans-unit id="e93190dcec5536d34ee763e854fad91df855c274" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific lookups</source>
          <target state="translated">PostgreSQL 특정 조회</target>
        </trans-unit>
        <trans-unit id="70834072f4b64529a787c3ea195778e0df214157" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific model fields</source>
          <target state="translated">PostgreSQL 특정 모델 필드</target>
        </trans-unit>
        <trans-unit id="12c585a6756725c70222f1410fdd60f0c5a75626" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific model indexes</source>
          <target state="translated">PostgreSQL 특정 모델 인덱스</target>
        </trans-unit>
        <trans-unit id="f0c4bc5c32a46fb3a181291fa84618678666babd" translate="yes" xml:space="preserve">
          <source>PostgreSQL support</source>
          <target state="translated">PostgreSQL 지원</target>
        </trans-unit>
        <trans-unit id="0eef3b53c86498212ac385626e52ac7c316ecaf6" translate="yes" xml:space="preserve">
          <source>PostgreSQL supports additional data integrity constraints available from the &lt;code&gt;django.contrib.postgres.constraints&lt;/code&gt; module. They are added in the model &lt;a href=&quot;../../models/options#django.db.models.Options.constraints&quot;&gt;&lt;code&gt;Meta.constraints&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">PostgreSQL은 &lt;code&gt;django.contrib.postgres.constraints&lt;/code&gt; 모듈 에서 사용 가능한 추가 데이터 무결성 제약 조건을 지원 합니다. 모델 &lt;a href=&quot;../../models/options#django.db.models.Options.constraints&quot;&gt; &lt;code&gt;Meta.constraints&lt;/code&gt; &lt;/a&gt; 옵션에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="25d283cdcf63fd5991436c1209f908667770d60e" translate="yes" xml:space="preserve">
          <source>PostgreSQL supports the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option to &lt;code&gt;CREATE INDEX&lt;/code&gt; and &lt;code&gt;DROP INDEX&lt;/code&gt; statements to add and remove indexes without locking out writes. This option is useful for adding or removing an index in a live production database.</source>
          <target state="translated">PostgreSQL은 쓰기를 잠그지 않고 인덱스를 추가 및 제거하기 위해 &lt;code&gt;CREATE INDEX&lt;/code&gt; 및 &lt;code&gt;DROP INDEX&lt;/code&gt; 문을 작성 하는 &lt;code&gt;CONCURRENTLY&lt;/code&gt; 옵션을 지원합니다 . 이 옵션은 라이브 프로덕션 데이터베이스에서 인덱스를 추가하거나 제거 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6453afab7ab6ba96fb054939ada93afed76c9400" translate="yes" xml:space="preserve">
          <source>PostgreSQL users</source>
          <target state="translated">PostgreSQL 사용자</target>
        </trans-unit>
        <trans-unit id="6a96fa582734cacd75112dd8c6e708395b968e6d" translate="yes" xml:space="preserve">
          <source>PostgreSQL users, refer to the &lt;a href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;PostgreSQL manual&lt;/a&gt; (section 22.3.2 in PostgreSQL 9) for details on creating databases with the correct encoding.</source>
          <target state="translated">PostgreSQL 사용자 는 올바른 인코딩으로 데이터베이스를 생성하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;PostgreSQL 설명서&lt;/a&gt; (PostgreSQL 9의 섹션 22.3.2)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="99c3be427ccc82c1f56376a400dc28af2dd57965" translate="yes" xml:space="preserve">
          <source>PostgreSQL uses 1-based indexing for array fields when writing raw SQL. However these indexes and those used in &lt;a href=&quot;#std:fieldlookup-arrayfield.slice&quot;&gt;&lt;code&gt;slices&lt;/code&gt;&lt;/a&gt; use 0-based indexing to be consistent with Python.</source>
          <target state="translated">PostgreSQL은 원시 SQL을 작성할 때 배열 필드에 1 기반 색인을 사용합니다. 그러나 이러한 인덱스와 &lt;a href=&quot;#std:fieldlookup-arrayfield.slice&quot;&gt; &lt;code&gt;slices&lt;/code&gt; &lt;/a&gt; 사용 된 인덱스 는 0 기반 인덱스를 사용하여 Python과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a4329b4028fdbd21bc77a3aac453280324b61e4c" translate="yes" xml:space="preserve">
          <source>PostgreSQL uses 1-based indexing for array fields when writing raw SQL. However these slices and those used in &lt;a href=&quot;#std:fieldlookup-arrayfield.index&quot;&gt;&lt;code&gt;indexes&lt;/code&gt;&lt;/a&gt; use 0-based indexing to be consistent with Python.</source>
          <target state="translated">PostgreSQL은 원시 SQL을 작성할 때 배열 필드에 1 기반 색인을 사용합니다. 그러나 이러한 슬라이스와 &lt;a href=&quot;#std:fieldlookup-arrayfield.index&quot;&gt; &lt;code&gt;indexes&lt;/code&gt; &lt;/a&gt; 사용 된 슬라이스 는 0 기반 인덱스를 사용하여 Python과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ed068c3d2667549ee11391e449bacfc1b001022c" translate="yes" xml:space="preserve">
          <source>PostgreSQL: &lt;code&gt;Greatest&lt;/code&gt; will return the largest non-null expression, or &lt;code&gt;null&lt;/code&gt; if all expressions are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL은 : &lt;code&gt;Greatest&lt;/code&gt; 최대 규모의 null 이외의 식을 반환하거나됩니다 &lt;code&gt;null&lt;/code&gt; 의 모든 표현 인 경우 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f655593cd1eb913446d7c92b93bcc2a048ac139" translate="yes" xml:space="preserve">
          <source>PostgreSQL: &lt;code&gt;Least&lt;/code&gt; will return the smallest non-null expression, or &lt;code&gt;null&lt;/code&gt; if all expressions are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL : &lt;code&gt;Least&lt;/code&gt; 는 null이 아닌 가장 작은 표현식을 반환하거나 모든 표현식이 &lt;code&gt;null&lt;/code&gt; 인 경우 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3e9bddaf93ff070867c9370e73d30d3f1a143b9a" translate="yes" xml:space="preserve">
          <source>PostgreSQL: no requirements (see &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-TIMEZONES&quot;&gt;Time Zones&lt;/a&gt;).</source>
          <target state="translated">PostgreSQL : 요구 사항 없음 ( &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-TIMEZONES&quot;&gt;시간대&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="c20ce7c612af9190f6bcf94ead500a92e2ea214d" translate="yes" xml:space="preserve">
          <source>Postgres.app</source>
          <target state="translated">Postgres.app</target>
        </trans-unit>
        <trans-unit id="523059071cfa07b7c0f18a203eb1612067f7be33" translate="yes" xml:space="preserve">
          <source>Prefer using &lt;code&gt;dependencies&lt;/code&gt; over &lt;code&gt;run_before&lt;/code&gt; when possible. You should only use &lt;code&gt;run_before&lt;/code&gt; if it is undesirable or impractical to specify &lt;code&gt;dependencies&lt;/code&gt; in the migration which you want to run after the one you are writing.</source>
          <target state="translated">가능한 경우 &lt;code&gt;run_before&lt;/code&gt; 보다 &lt;code&gt;dependencies&lt;/code&gt; 을 사용 하는 것이 좋습니다. 작성 중인 마이그레이션 이후에 실행하려는 &lt;code&gt;dependencies&lt;/code&gt; 을 지정하는 것이 바람직하지 않거나 실용적이지 않은 경우 에만 &lt;code&gt;run_before&lt;/code&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f97a5478b5bba7828765ab369cbe0478c04066f4" translate="yes" xml:space="preserve">
          <source>Prefetches the given lookups on an iterable of model instances. This is useful in code that receives a list of model instances as opposed to a &lt;code&gt;QuerySet&lt;/code&gt;; for example, when fetching models from a cache or instantiating them manually.</source>
          <target state="translated">반복 가능한 모델 인스턴스에서 지정된 조회를 프리 페치합니다. 이것은 &lt;code&gt;QuerySet&lt;/code&gt; 과 반대로 모델 인스턴스 목록을받는 코드에서 유용합니다 . 예를 들어, 캐시에서 모델을 가져 오거나 수동으로 인스턴스화 할 때.</target>
        </trans-unit>
        <trans-unit id="90eceb016c51a762f15c7287008c113f6f37296c" translate="yes" xml:space="preserve">
          <source>Prefix</source>
          <target state="translated">Prefix</target>
        </trans-unit>
        <trans-unit id="115927d84d6eb90b2707da9a9f235e3d14a2a76d" translate="yes" xml:space="preserve">
          <source>Prefixes (optional)</source>
          <target state="translated">접두사 (선택 사항)</target>
        </trans-unit>
        <trans-unit id="6dca0e059b22a6cfdd560c923d98583c63598a89" translate="yes" xml:space="preserve">
          <source>Prefixes for forms</source>
          <target state="translated">양식 접두사</target>
        </trans-unit>
        <trans-unit id="ad118ef82fcc3c54b6d51992f8c272b56add11d6" translate="yes" xml:space="preserve">
          <source>Prepared Geometries</source>
          <target state="translated">준비된 형상</target>
        </trans-unit>
        <trans-unit id="ff321486de056243480d955524cf120c975fc0b0" translate="yes" xml:space="preserve">
          <source>Preparing the software for localization. Usually done by developers.</source>
          <target state="translated">현지화를위한 소프트웨어 준비 일반적으로 개발자가 수행합니다.</target>
        </trans-unit>
        <trans-unit id="e4c8443407ed08814844976bdb433740cda7b90f" translate="yes" xml:space="preserve">
          <source>Prepopulated fields aren&amp;rsquo;t modified by JavaScript after a value has been saved. It&amp;rsquo;s usually undesired that slugs change (which would cause an object&amp;rsquo;s URL to change if the slug is used in it).</source>
          <target state="translated">미리 채워진 필드는 값이 저장된 후에 JavaScript에 의해 수정되지 않습니다. 일반적으로 슬러그가 변경되는 것은 바람직하지 않습니다 (슬러그가 사용되는 경우 객체의 URL이 변경 될 수 있음).</target>
        </trans-unit>
        <trans-unit id="854812af4e2b3c438cb6a06192eef07b305b60dd" translate="yes" xml:space="preserve">
          <source>Preprocesses context data that will be used for rendering a template. Accepts a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; of context data. By default, returns the same &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플릿 렌더링에 사용될 컨텍스트 데이터를 전처리합니다. 수용 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 컨텍스트 데이터를. 기본적으로 동일한 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6090228bf8ad81ac4558889d4268c8ed63d5bd4f" translate="yes" xml:space="preserve">
          <source>Preprocessing values before saving</source>
          <target state="translated">저장하기 전에 전처리 값</target>
        </trans-unit>
        <trans-unit id="63ecfb2b12c0053474378d6a25321470acb87657" translate="yes" xml:space="preserve">
          <source>Prerequisite: uWSGI</source>
          <target state="translated">전제 조건 : uWSGI</target>
        </trans-unit>
        <trans-unit id="8ebe16f4fda75e7db8792297762ca8fc8c47daa2" translate="yes" xml:space="preserve">
          <source>Present date-based objects in year/month/day archive pages, associated detail, and &amp;ldquo;latest&amp;rdquo; pages.</source>
          <target state="translated">년 / 월 / 일 보관 페이지, 관련 세부 정보 및 &quot;최신&quot;페이지에 날짜 기반 개체를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fe9922db7f8818e55a4f63a4c438eac414d5121e" translate="yes" xml:space="preserve">
          <source>Presents a form for entering a new password.</source>
          <target state="translated">새 비밀번호를 입력하기위한 양식을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="95263d920ccc7b877fb77950cfacbe298bbdc8c2" translate="yes" xml:space="preserve">
          <source>Presents a view which informs the user that the password has been successfully changed.</source>
          <target state="translated">암호가 성공적으로 변경되었음을 사용자에게 알려주는보기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b0f04b4930f7ab4066429f8a65023b692cff21f6" translate="yes" xml:space="preserve">
          <source>Preserves the test database between test runs. This has the advantage of skipping both the create and destroy actions which can greatly decrease the time to run tests, especially those in a large test suite. If the test database does not exist, it will be created on the first run and then preserved for each subsequent run. Any unapplied migrations will also be applied to the test database before running the test suite.</source>
          <target state="translated">테스트 실행간에 테스트 데이터베이스를 유지합니다. 이는 특히 대규모 테스트 스위트의 테스트 실행 시간을 크게 줄일 수있는 작성 및 제거 조치를 모두 생략 할 수 있다는 장점이 있습니다. 테스트 데이터베이스가 존재하지 않으면 첫 번째 실행시 작성되고 이후의 각 실행에 대해 보존됩니다. 테스트 스위트를 실행하기 전에 적용되지 않은 마이그레이션도 테스트 데이터베이스에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8737fc5545c509024758feaeb115427390749ff2" translate="yes" xml:space="preserve">
          <source>Preserves the test database between test runs. This has the advantage of skipping both the create and destroy actions which can greatly decrease the time to run tests, especially those in a large test suite. If the test database does not exist, it will be created on the first run and then preserved for each subsequent run. Unless the &lt;a href=&quot;settings#std:setting-TEST_MIGRATE&quot;&gt;&lt;code&gt;MIGRATE&lt;/code&gt;&lt;/a&gt; test setting is &lt;code&gt;False&lt;/code&gt;, any unapplied migrations will also be applied to the test database before running the test suite.</source>
          <target state="translated">테스트 실행 사이에 테스트 데이터베이스를 보존합니다. 이는 생성 및 삭제 작업을 모두 건너 뛰는 이점이있어 특히 대규모 테스트 스위트의 테스트 실행 시간을 크게 줄일 수 있습니다. 테스트 데이터베이스가 존재하지 않는 경우 첫 번째 실행시 생성 된 다음 이후 실행될 때마다 보존됩니다. &lt;a href=&quot;settings#std:setting-TEST_MIGRATE&quot;&gt; &lt;code&gt;MIGRATE&lt;/code&gt; &lt;/a&gt; 테스트 설정이 &lt;code&gt;False&lt;/code&gt; 가 아니면 적용되지 않은 마이그레이션은 테스트 스위트를 실행하기 전에 테스트 데이터베이스에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="44c0d9efff4e1dd08f3a8f202f1ed9af96de27c8" translate="yes" xml:space="preserve">
          <source>Preserving the test database</source>
          <target state="translated">테스트 데이터베이스 보존</target>
        </trans-unit>
        <trans-unit id="027a0b03c04a3561860ebf6a28cdaa5f9495d276" translate="yes" xml:space="preserve">
          <source>Press [TAB] to see all available options.</source>
          <target state="translated">사용 가능한 모든 옵션을 보려면 [TAB]을 누르십시오.</target>
        </trans-unit>
        <trans-unit id="0e492bbbbf55bd53cc9ac57b239a141a023fbf86" translate="yes" xml:space="preserve">
          <source>Prevent deletion of the referenced object by raising &lt;a href=&quot;../exceptions#django.db.models.ProtectedError&quot;&gt;&lt;code&gt;ProtectedError&lt;/code&gt;&lt;/a&gt;, a subclass of &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;django.db.IntegrityError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;django.db.IntegrityError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 &lt;a href=&quot;../exceptions#django.db.models.ProtectedError&quot;&gt; &lt;code&gt;ProtectedError&lt;/code&gt; &lt;/a&gt; 를 발생시켜 참조 된 오브젝트의 삭제를 방지하십시오 .</target>
        </trans-unit>
        <trans-unit id="a2793e847f9131a7c4afdf597b4fa39bf675d9f1" translate="yes" xml:space="preserve">
          <source>Prevent deletion of the referenced object by raising &lt;a href=&quot;../exceptions#django.db.models.RestrictedError&quot;&gt;&lt;code&gt;RestrictedError&lt;/code&gt;&lt;/a&gt; (a subclass of &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;django.db.IntegrityError&lt;/code&gt;&lt;/a&gt;). Unlike &lt;a href=&quot;#django.db.models.PROTECT&quot;&gt;&lt;code&gt;PROTECT&lt;/code&gt;&lt;/a&gt;, deletion of the referenced object is allowed if it also references a different object that is being deleted in the same operation, but via a &lt;a href=&quot;#django.db.models.CASCADE&quot;&gt;&lt;code&gt;CASCADE&lt;/code&gt;&lt;/a&gt; relationship.</source>
          <target state="translated">&lt;a href=&quot;../exceptions#django.db.models.RestrictedError&quot;&gt; &lt;code&gt;RestrictedError&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;django.db.IntegrityError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스)를 발생시켜 참조 된 객체의 삭제를 방지합니다 . &lt;a href=&quot;#django.db.models.PROTECT&quot;&gt; &lt;code&gt;PROTECT&lt;/code&gt; &lt;/a&gt; 와 달리 참조 된 객체의 삭제는 동일한 작업에서 삭제되는 다른 객체를 참조하는 경우에도 허용되지만 &lt;a href=&quot;#django.db.models.CASCADE&quot;&gt; &lt;code&gt;CASCADE&lt;/code&gt; &lt;/a&gt; 관계 를 통해 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="b9f9f23aa624c2de9d0358a0ae6fff5bf1557a95" translate="yes" xml:space="preserve">
          <source>Preventing clickjacking</source>
          <target state="translated">클릭 재킹 방지</target>
        </trans-unit>
        <trans-unit id="511c81c16793858ca2ece2ae2e8234d3972a01c1" translate="yes" xml:space="preserve">
          <source>Preventing duplicate signals</source>
          <target state="translated">중복 신호 방지</target>
        </trans-unit>
        <trans-unit id="67c644023e370d9dc7aac34e432d53b5826aaa6e" translate="yes" xml:space="preserve">
          <source>Preventing header injection</source>
          <target state="translated">헤더 삽입 방지</target>
        </trans-unit>
        <trans-unit id="165f911940c6e164a716a8fcc974dd7cb43ad967" translate="yes" xml:space="preserve">
          <source>Prevents deleting the temporary &lt;code&gt;.pot&lt;/code&gt; files generated before creating the &lt;code&gt;.po&lt;/code&gt; file. This is useful for debugging errors which may prevent the final language files from being created.</source>
          <target state="translated">&lt;code&gt;.po&lt;/code&gt; 파일을 작성하기 전에 생성 된 임시 &lt;code&gt;.pot&lt;/code&gt; 파일을 삭제하지 못하게 합니다. 이는 최종 언어 파일이 작성되지 못하게하는 오류를 디버깅하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="ba291d0888026cf59268d79dfc8b464694ef680e" translate="yes" xml:space="preserve">
          <source>Prevents specific applications or models (specified in the form of &lt;code&gt;app_label.ModelName&lt;/code&gt;) from being dumped. If you specify a model name, the output will be restricted to that model, rather than the entire application. You can also mix application names and model names.</source>
          <target state="translated">&lt;code&gt;app_label.ModelName&lt;/code&gt; 형식으로 지정된 특정 애플리케이션 또는 모델 이 덤프되지 않도록합니다. 모델 이름을 지정하면 출력이 전체 애플리케이션이 아닌 해당 모델로 제한됩니다. 응용 프로그램 이름과 모델 이름을 혼합 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4264a4a72226a36691ccc5dac4c6de245da90be9" translate="yes" xml:space="preserve">
          <source>Previewing your changes</source>
          <target state="translated">변경 사항 미리보기</target>
        </trans-unit>
        <trans-unit id="cbb8f40b05c3587bf2c1a05a6668d89d83c3d4ea" translate="yes" xml:space="preserve">
          <source>Previous versions of this document recommended configuring your web server to ensure it validates incoming HTTP &lt;code&gt;Host&lt;/code&gt; headers. While this is still recommended, in many common web servers a configuration that seems to validate the &lt;code&gt;Host&lt;/code&gt; header may not in fact do so. For instance, even if Apache is configured such that your Django site is served from a non-default virtual host with the &lt;code&gt;ServerName&lt;/code&gt; set, it is still possible for an HTTP request to match this virtual host and supply a fake &lt;code&gt;Host&lt;/code&gt; header. Thus, Django now requires that you set &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; explicitly rather than relying on web server configuration.</source>
          <target state="translated">이 문서의 이전 버전에서는 들어오는 HTTP &lt;code&gt;Host&lt;/code&gt; 헤더의 유효성을 검사하도록 웹 서버를 구성하는 것이 좋습니다 . 이것은 여전히 ​​권장되지만 많은 일반 웹 서버에서 &lt;code&gt;Host&lt;/code&gt; 헤더의 유효성을 검사하는 구성 은 실제로 그렇지 않을 수 있습니다. 예를 들어, Django 사이트가 &lt;code&gt;ServerName&lt;/code&gt; 이 설정된 기본이 아닌 가상 호스트에서 제공되도록 Apache가 구성되어 있어도 HTTP 요청이이 가상 호스트와 일치하고 가짜 &lt;code&gt;Host&lt;/code&gt; 헤더를 제공 할 수 있습니다. 따라서 Django에서는 이제 웹 서버 구성에 의존하지 않고 &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; 를&lt;/a&gt; 명시 적으로 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0c4b272cedf3b2a30ec92ffb3f4fe6f988f414f0" translate="yes" xml:space="preserve">
          <source>Primary key type compatibility</source>
          <target state="translated">기본 키 유형 호환성</target>
        </trans-unit>
        <trans-unit id="80ad1d57736398f642f8004c5db582207ce0e4fd" translate="yes" xml:space="preserve">
          <source>Primary key. The field itself may contain up to 40 characters. The current implementation generates a 32-character string (a random sequence of digits and lowercase ASCII letters).</source>
          <target state="translated">기본 키. 필드 자체는 최대 40자를 포함 할 수 있습니다. 현재 구현은 32 자 문자열 (임의의 숫자 및 소문자 ASCII 문자)을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="a83b9b74713a9bc6fedf5bf52b2475564747f9a4" translate="yes" xml:space="preserve">
          <source>Primary keys (IDs) are added automatically. (You can override this, too.)</source>
          <target state="translated">기본 키 (ID)가 자동으로 추가됩니다. (이것도 무시할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="f8fe05b86b7da452505028e1291f37fb70eb92a8" translate="yes" xml:space="preserve">
          <source>Prints the SQL for the named migration. This requires an active database connection, which it will use to resolve constraint names; this means you must generate the SQL against a copy of the database you wish to later apply it on.</source>
          <target state="translated">명명 된 마이그레이션에 대한 SQL을 인쇄합니다. 여기에는 제약 조건 이름을 확인하는 데 사용할 데이터베이스 연결이 활성화되어 있어야합니다. 이는 나중에 적용하려는 데이터베이스의 사본에 대해 SQL을 생성해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2445461abe594d458d1e5396533b20215a328c4b" translate="yes" xml:space="preserve">
          <source>Prints the SQL statements for resetting sequences for the given app name(s).</source>
          <target state="translated">지정된 앱 이름의 시퀀스를 재설정하기위한 SQL 문을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="b5febeb88e08835ef8f5fc78e15810ce8069e06d" translate="yes" xml:space="preserve">
          <source>Prints the SQL statements that would be executed for the &lt;a href=&quot;#django-admin-flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;#django-admin-flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt; 명령에 대해 실행될 SQL 문을 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="2fdde26164c9b8824994ca762eafe5f2b785de86" translate="yes" xml:space="preserve">
          <source>Prints the SQL that would be run without actually running it, so you can customize it or use the migrations framework.</source>
          <target state="translated">실제로 실행하지 않고 실행될 SQL을 인쇄하므로 사용자 정의하거나 마이그레이션 프레임 워크를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29dd119e2c8b27aca03440cf36558b8e7d7bbb23" translate="yes" xml:space="preserve">
          <source>Private methods (starting with an underscore) are not copied by default.</source>
          <target state="translated">밑줄로 시작하는 개인 메소드는 기본적으로 복사되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e3dc1d824db7fefcbe324103abda6b046bd33b6a" translate="yes" xml:space="preserve">
          <source>Proceed through the following sections sequentially in order to install GeoDjango on Windows.</source>
          <target state="translated">Windows에 GeoDjango를 설치하려면 다음 섹션을 순서대로 진행하십시오.</target>
        </trans-unit>
        <trans-unit id="c3b508775ae9d399320291714a2ea946942b4d35" translate="yes" xml:space="preserve">
          <source>Proceed through the following sections sequentially in order to install GeoDjango on Windows. In this tutorial we will install 64 bit versions of each application.</source>
          <target state="translated">Windows에 GeoDjango를 설치하려면 다음 섹션을 순차적으로 진행하십시오. 이 튜토리얼에서는 각 애플리케이션의 64 비트 버전을 설치합니다.</target>
        </trans-unit>
        <trans-unit id="69d016f6cb5948c7b35a01afe262153e986cf104" translate="yes" xml:space="preserve">
          <source>Proceed through the tutorial sections sequentially for step-by-step instructions.</source>
          <target state="translated">단계별 지시 사항을 위해 학습서 섹션을 순차적으로 진행하십시오.</target>
        </trans-unit>
        <trans-unit id="a942f23e9c9082b53d2c70151316fd978ffa1115" translate="yes" xml:space="preserve">
          <source>Produces one of its arguments each time this tag is encountered. The first argument is produced on the first encounter, the second argument on the second encounter, and so forth. Once all arguments are exhausted, the tag cycles to the first argument and produces it again.</source>
          <target state="translated">이 태그가 발견 될 때마다 인수 중 하나를 생성합니다. 첫 번째 논쟁은 첫 번째 만남에서, 두 번째 논쟁은 두 번째 만남에서 생성됩니다. 모든 인수가 소진되면 태그가 첫 번째 인수로 순환하여 다시 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e7c5627e57d7bec52b8e244d25cd541ec4c9cbb7" translate="yes" xml:space="preserve">
          <source>Profile first</source>
          <target state="translated">먼저 프로필</target>
        </trans-unit>
        <trans-unit id="9d68007b0763cb230f9034ec96f52b39d03ad630" translate="yes" xml:space="preserve">
          <source>Program</source>
          <target state="translated">Program</target>
        </trans-unit>
        <trans-unit id="aa5214f5abf2dffdfb9c38209fec6cb15d0ff4aa" translate="yes" xml:space="preserve">
          <source>Programmatically creating permissions</source>
          <target state="translated">프로그래밍 방식으로 권한 만들기</target>
        </trans-unit>
        <trans-unit id="c58878042f64124bf69f272265174f4139135371" translate="yes" xml:space="preserve">
          <source>Projects and applications</source>
          <target state="translated">프로젝트 및 응용</target>
        </trans-unit>
        <trans-unit id="f79ed9384f9e86f2c9c58306a052b68419b0065c" translate="yes" xml:space="preserve">
          <source>Projects that support multitenancy or otherwise alter business logic based on the request&amp;rsquo;s host and use custom host names in tests must include those hosts in &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">멀티 테넌시를 지원하거나 요청 호스트를 기반으로 비즈니스 로직을 변경하고 테스트에서 사용자 정의 호스트 이름을 사용하는 프로젝트는 &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; 에&lt;/a&gt; 해당 호스트를 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="99a31e358cffb03fe05f2dbc4d4231069cedeb24" translate="yes" xml:space="preserve">
          <source>Projects vs. apps</source>
          <target state="translated">프로젝트 대 앱</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="c5015eaf27a2c3bf8250d743ff8fa8b5f1ad4b86" translate="yes" xml:space="preserve">
          <source>Property that may be used to retrieve or set a spatial filter for this layer. A spatial filter can only be set with an &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt;&lt;code&gt;OGRGeometry&lt;/code&gt;&lt;/a&gt; instance, a 4-tuple extent, or &lt;code&gt;None&lt;/code&gt;. When set with something other than &lt;code&gt;None&lt;/code&gt;, only features that intersect the filter will be returned when iterating over the layer:</source>
          <target state="translated">이 레이어의 공간 필터를 검색하거나 설정하는 데 사용할 수있는 속성입니다. 공간 필터는 &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt; &lt;code&gt;OGRGeometry&lt;/code&gt; &lt;/a&gt; 인스턴스, 4- 튜플 범위 또는 &lt;code&gt;None&lt;/code&gt; 으로 만 설정할 수 있습니다 . &lt;code&gt;None&lt;/code&gt; 이외의 것으로 설정 하면 레이어를 반복 할 때 필터와 교차하는 기능 만 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="0bdd9e48cb8289c624ed76251b8b66f1f1ebd5a6" translate="yes" xml:space="preserve">
          <source>Property that may be used to retrieve or set the SRID associated with the geometry. For example:</source>
          <target state="translated">형상과 관련된 SRID를 검색하거나 설정하는 데 사용할 수있는 속성입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f91f24895595d0be0e68dff39c934b00f655fff" translate="yes" xml:space="preserve">
          <source>Property that returns the &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; associated with this layer:</source>
          <target state="translated">이 레이어와 관련된 &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 를 반환하는 속성 :</target>
        </trans-unit>
        <trans-unit id="4e7745325509888c73a358af0046b765db273266" translate="yes" xml:space="preserve">
          <source>Protecting complex data structures</source>
          <target state="translated">복잡한 데이터 구조 보호</target>
        </trans-unit>
        <trans-unit id="f6d5d48be5fd9b054d275c493f56eee39042a9a1" translate="yes" xml:space="preserve">
          <source>Protecting sensitive areas such as the user account or the admin isn&amp;rsquo;t sufficient, because the same session cookie is used for HTTP and HTTPS. Your web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS requests to Django.</source>
          <target state="translated">HTTP 및 HTTPS에 동일한 세션 쿠키가 사용되므로 사용자 계정 또는 관리자와 같은 민감한 영역을 보호하는 것만으로는 충분하지 않습니다. 웹 서버는 모든 HTTP 트래픽을 HTTPS로 리디렉션하고 HTTPS 요청 만 Django로 전송해야합니다.</target>
        </trans-unit>
        <trans-unit id="4db91616733b4b7e15646c353e9a98bf0f4ea473" translate="yes" xml:space="preserve">
          <source>Protecting the &lt;code&gt;SECRET_KEY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SECRET_KEY&lt;/code&gt; 보호</target>
        </trans-unit>
        <trans-unit id="f3ac2fba3ec304ab5f17d935fd9b06f7f08805b5" translate="yes" xml:space="preserve">
          <source>Protocol downgrade: a downgrade occurs if the page containing the link is served via HTTPS, but the page being linked to is not served via HTTPS.</source>
          <target state="translated">프로토콜 다운 그레이드 : 링크가 포함 된 페이지가 HTTPS를 통해 제공되지만 링크되는 페이지가 HTTPS를 통해 제공되지 않으면 다운 그레이드가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="528565edbcbb71b3ec096df647c3d688589eb6bf" translate="yes" xml:space="preserve">
          <source>Provide a descriptive error &lt;code&gt;code&lt;/code&gt; to the constructor:</source>
          <target state="translated">생성자 에게 설명 오류 &lt;code&gt;code&lt;/code&gt; 를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbe5d11af10c81727ad303e1a81314d5c6cca503" translate="yes" xml:space="preserve">
          <source>Provide a non-zero integer value to the &lt;code&gt;max_fragments&lt;/code&gt; to set the maximum number of fragments to display. That&amp;rsquo;s disabled by default in PostgreSQL.</source>
          <target state="translated">표시 할 최대 조각 수를 설정하려면 &lt;code&gt;max_fragments&lt;/code&gt; 에 0이 아닌 정수 값을 제공합니다 . PostgreSQL에서는 기본적으로 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ff17b6a012e550dde2ae944f2859bd60709e44d" translate="yes" xml:space="preserve">
          <source>Provide an integer number of bits from 1 to 4096 to the &lt;code&gt;length&lt;/code&gt; parameter to specify the length of each index entry. PostgreSQL&amp;rsquo;s default is 80.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 매개 변수에 1에서 4096 사이의 정수 비트 수를 제공하여 각 색인 항목의 길이를 지정하십시오. PostgreSQL의 기본값은 80입니다.</target>
        </trans-unit>
        <trans-unit id="d27a7615da14529ecc11577700c5a39ff1ea519f" translate="yes" xml:space="preserve">
          <source>Provide an integer number of bytes to the &lt;a href=&quot;https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-GIN-PENDING-LIST-LIMIT&quot;&gt;gin_pending_list_limit&lt;/a&gt; parameter to tune the maximum size of the GIN pending list which is used when &lt;code&gt;fastupdate&lt;/code&gt; is enabled.</source>
          <target state="translated">&lt;code&gt;fastupdate&lt;/code&gt; 가 활성화 될 때 사용되는 GIN 보류 목록의 최대 크기를 조정하려면 정수 바이트 수를 &lt;a href=&quot;https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-GIN-PENDING-LIST-LIMIT&quot;&gt;gin_pending_list_limit&lt;/a&gt; 매개 변수에 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="6050c63957ee0b13e00adc73109acd2e645df740" translate="yes" xml:space="preserve">
          <source>Provide an integer to the &lt;code&gt;normalization&lt;/code&gt; parameter to control rank normalization. This integer is a bit mask, so you can combine multiple behaviors:</source>
          <target state="translated">순위 정규화를 제어 하려면 &lt;code&gt;normalization&lt;/code&gt; 매개 변수에 정수를 제공합니다 . 이 정수는 비트 마스크이므로 여러 동작을 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f521a106483229aa0f9ae9885780cc1929d1204b" translate="yes" xml:space="preserve">
          <source>Provide an integer value from 10 to 100 to the &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS&quot;&gt;fillfactor&lt;/a&gt; parameter to tune how packed the index pages will be. PostgreSQL&amp;rsquo;s default is 90.</source>
          <target state="translated">인덱스 페이지의 압축 정도를 조정 하려면 10에서 100 사이의 정수 값을 &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS&quot;&gt;fillfactor&lt;/a&gt; 매개 변수에 제공하십시오 . PostgreSQL의 기본값은 90입니다.</target>
        </trans-unit>
        <trans-unit id="50cf217a6bbe1f115b9afec936d7fd651a3fccf4" translate="yes" xml:space="preserve">
          <source>Provide an integer value to the &lt;code&gt;short_word&lt;/code&gt; parameter to discard words of this length or less in each headline. PostgreSQL&amp;rsquo;s default is 3.</source>
          <target state="translated">&lt;code&gt;short_word&lt;/code&gt; 매개 변수에 정수 값을 제공하여 각 헤드 라인에서이 길이 이하의 단어를 버립니다. PostgreSQL의 기본값은 3입니다.</target>
        </trans-unit>
        <trans-unit id="e4fc6b334c34c68deb0b72af0d473ef635965d86" translate="yes" xml:space="preserve">
          <source>Provide integer values to the &lt;code&gt;max_words&lt;/code&gt; and &lt;code&gt;min_words&lt;/code&gt; parameters to determine the longest and shortest headlines. PostgreSQL&amp;rsquo;s defaults are 35 and 15.</source>
          <target state="translated">&lt;code&gt;max_words&lt;/code&gt; 및 &lt;code&gt;min_words&lt;/code&gt; 매개 변수에 정수 값을 제공 하여 가장 긴 헤드 라인과 가장 짧은 헤드 라인을 결정합니다. PostgreSQL의 기본값은 35 및 15입니다.</target>
        </trans-unit>
        <trans-unit id="d5a9dbaa6a4cbd13cf1e1202225c968c6711e450" translate="yes" xml:space="preserve">
          <source>Provided test case classes</source>
          <target state="translated">제공된 테스트 케이스 클래스</target>
        </trans-unit>
        <trans-unit id="83563921a64bb5a23ec520c7f1c9ad644a076b33" translate="yes" xml:space="preserve">
          <source>Provides a mechanism for looking up an object associated with the current HTTP request.</source>
          <target state="translated">현재 HTTP 요청과 관련된 객체를 조회하기위한 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d7d091d9b262a73f5b9087a61ee9e70f430a659f" translate="yes" xml:space="preserve">
          <source>Provides a mechanism to construct a &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;, given suitable context. The template to use is configurable and can be further customized by subclasses.</source>
          <target state="translated">적절한 상황 에서 &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 를 구성하는 메커니즘을 제공합니다 . 사용할 템플리트는 구성 가능하며 서브 클래스로 추가로 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39650b96a09f55e8ecda48574b51b40d2d21c19d" translate="yes" xml:space="preserve">
          <source>Provides the chance to do any pre-processing or validation of the expression before it&amp;rsquo;s added to the query. &lt;code&gt;resolve_expression()&lt;/code&gt; must also be called on any nested expressions. A &lt;code&gt;copy()&lt;/code&gt; of &lt;code&gt;self&lt;/code&gt; should be returned with any necessary transformations.</source>
          <target state="translated">쿼리에 추가되기 전에 식의 사전 처리 또는 유효성 검사를 수행 할 수있는 기회를 제공합니다. 또한 중첩 표현식에서 &lt;code&gt;resolve_expression()&lt;/code&gt; 호출해야합니다. 필요한 &lt;code&gt;copy()&lt;/code&gt; 과 함께 &lt;code&gt;self&lt;/code&gt; 의 copy () 를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="1cd9b330ec5d096fbfe3aab4b0e69575b495d59a" translate="yes" xml:space="preserve">
          <source>Provides the path to a directory with a custom app template file, or a path to an uncompressed archive (&lt;code&gt;.tar&lt;/code&gt;) or a compressed archive (&lt;code&gt;.tar.gz&lt;/code&gt;, &lt;code&gt;.tar.bz2&lt;/code&gt;, &lt;code&gt;.tar.xz&lt;/code&gt;, &lt;code&gt;.tar.lzma&lt;/code&gt;, &lt;code&gt;.tgz&lt;/code&gt;, &lt;code&gt;.tbz2&lt;/code&gt;, &lt;code&gt;.txz&lt;/code&gt;, &lt;code&gt;.tlz&lt;/code&gt;, &lt;code&gt;.zip&lt;/code&gt;) containing the app template files.</source>
          <target state="translated">사용자 지정 앱 템플릿 파일이있는 디렉토리의 경로 또는 압축되지 않은 아카이브 ( &lt;code&gt;.tar&lt;/code&gt; ) 또는 압축 된 아카이브 ( &lt;code&gt;.tar.gz&lt;/code&gt; , &lt;code&gt;.tar.bz2&lt;/code&gt; , &lt;code&gt;.tar.xz&lt;/code&gt; , &lt;code&gt;.tar.lzma&lt;/code&gt; ,. ) 경로 를 제공 &lt;code&gt;.tgz&lt;/code&gt; 앱 템플릿 파일을 포함하는 tgz , &lt;code&gt;.tbz2&lt;/code&gt; , &lt;code&gt;.txz&lt;/code&gt; , &lt;code&gt;.tlz&lt;/code&gt; , &lt;code&gt;.zip&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="33550ed53a4b76c89a93f72587a138522a6d0a46" translate="yes" xml:space="preserve">
          <source>Providing a useful &lt;code&gt;context_object_name&lt;/code&gt; is always a good idea. Your coworkers who design templates will thank you.</source>
          <target state="translated">유용한 &lt;code&gt;context_object_name&lt;/code&gt; 을 제공하는 것이 항상 좋습니다. 템플릿을 디자인하는 동료가 감사합니다.</target>
        </trans-unit>
        <trans-unit id="241255dc719c7fd8c6010c3454aa15997fe59662" translate="yes" xml:space="preserve">
          <source>Providing data with fixtures</source>
          <target state="translated">비품과 함께 데이터 제공</target>
        </trans-unit>
        <trans-unit id="7f433c914bee78855dfa641ac952c102155829f3" translate="yes" xml:space="preserve">
          <source>Providing initial data for models</source>
          <target state="translated">모델에 대한 초기 데이터 제공</target>
        </trans-unit>
        <trans-unit id="36d626c700019f7f9e1c6d1295aba5248dfb359d" translate="yes" xml:space="preserve">
          <source>Providing initial data with migrations</source>
          <target state="translated">마이그레이션과 함께 초기 데이터 제공</target>
        </trans-unit>
        <trans-unit id="312dad7e87c0b4b590970f55e7bcbfdb9b50b77d" translate="yes" xml:space="preserve">
          <source>Providing initial values</source>
          <target state="translated">초기 값 제공</target>
        </trans-unit>
        <trans-unit id="73c0e9dd8326d0acce61508ac7dfe0f3b182c96e" translate="yes" xml:space="preserve">
          <source>Providing one or more app names as arguments will limit the migrations created to the app(s) specified and any dependencies needed (the table at the other end of a &lt;code&gt;ForeignKey&lt;/code&gt;, for example).</source>
          <target state="translated">하나 이상의 앱 이름을 인수로 제공하면 지정된 앱으로 생성 된 마이그레이션과 필요한 모든 종속성 ( 예 : &lt;code&gt;ForeignKey&lt;/code&gt; 의 다른 끝에있는 테이블 )으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="964b76551df709154f170559493bdd68ccda08d2" translate="yes" xml:space="preserve">
          <source>Proxy model inheritance might look fairly similar to creating an unmanaged model, using the &lt;a href=&quot;../../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed&lt;/code&gt;&lt;/a&gt; attribute on a model&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="translated">프록시 모델 상속은 모델의 &lt;code&gt;Meta&lt;/code&gt; 클래스 에서 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 관리 되지 않는 모델을 만드는 것과 상당히 유사하게 보일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d37de63fd7824ac46ae5d4a2cd688c3d71412f9" translate="yes" xml:space="preserve">
          <source>Proxy model managers</source>
          <target state="translated">프록시 모델 관리자</target>
        </trans-unit>
        <trans-unit id="2020dc851cb76f0e4b785c288f27da235ffad07e" translate="yes" xml:space="preserve">
          <source>Proxy models</source>
          <target state="translated">프록시 모델</target>
        </trans-unit>
        <trans-unit id="7f051748527fa7e7754343af73d5f76969084a0d" translate="yes" xml:space="preserve">
          <source>Proxy models are declared like normal models. You tell Django that it&amp;rsquo;s a proxy model by setting the &lt;a href=&quot;../../ref/models/options#django.db.models.Options.proxy&quot;&gt;&lt;code&gt;proxy&lt;/code&gt;&lt;/a&gt; attribute of the &lt;code&gt;Meta&lt;/code&gt; class to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">프록시 모델은 일반 모델처럼 선언됩니다. &lt;code&gt;Meta&lt;/code&gt; 클래스 의 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.proxy&quot;&gt; &lt;code&gt;proxy&lt;/code&gt; &lt;/a&gt; 속성 을 &lt;code&gt;True&lt;/code&gt; 로 설정하여 장고에게 프록시 모델이라고 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="c98076e453af6e51d57dfdd2552aaab7b420794e" translate="yes" xml:space="preserve">
          <source>Proxy models inherit &lt;code&gt;Meta&lt;/code&gt; attributes &lt;a href=&quot;#meta-and-multi-table-inheritance&quot;&gt;in the same way as regular models&lt;/a&gt;.</source>
          <target state="translated">프록시 모델 &lt;a href=&quot;#meta-and-multi-table-inheritance&quot;&gt;은 일반 모델과 동일한 방식으로 &lt;/a&gt; &lt;code&gt;Meta&lt;/code&gt; 속성 을 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="7f4703f9a257610de77d71c05797144d73589af4" translate="yes" xml:space="preserve">
          <source>Proxy models need their own content type</source>
          <target state="translated">프록시 모델에는 자체 컨텐츠 유형이 필요합니다</target>
        </trans-unit>
        <trans-unit id="2d9d012e2312b562e6428b6a35777b59361bd26d" translate="yes" xml:space="preserve">
          <source>Proxy models work exactly the same way as concrete models. Permissions are created using the own content type of the proxy model. Proxy models don&amp;rsquo;t inherit the permissions of the concrete model they subclass:</source>
          <target state="translated">프록시 모델은 콘크리트 모델과 동일한 방식으로 작동합니다. 프록시 모델의 자체 컨텐츠 유형을 사용하여 권한이 작성됩니다. 프록시 모델은 서브 클래스가되는 구체적인 모델의 권한을 상속하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2aacbb36241a1ca6f72f612f18db7ea69dae8382" translate="yes" xml:space="preserve">
          <source>Public methods are copied by default.</source>
          <target state="translated">공용 메소드는 기본적으로 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="50c28f4af947776f8d77a5d5338903599a1de0a6" translate="yes" xml:space="preserve">
          <source>Publisher A has two books with ratings 4 and 5.</source>
          <target state="translated">출판사 A는 등급이 4와 5 인 두 권의 책을 보유하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="f45d70d91077f59d49811da65ee0fa398ffda9f3" translate="yes" xml:space="preserve">
          <source>Publisher B has two books with ratings 1 and 4.</source>
          <target state="translated">출판사 B는 등급이 1과 4 인 두 권의 책을 보유하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef7db3bbd0f99e7b0edf7bd2e43df08344c70553" translate="yes" xml:space="preserve">
          <source>Publisher C has one book with rating 1.</source>
          <target state="translated">출판사 C는 평점이 1 인 책이 1 개 있습니다.</target>
        </trans-unit>
        <trans-unit id="05dd0794c936de6d3ad4c09cb8e57df73a0945a8" translate="yes" xml:space="preserve">
          <source>Publishing Atom and RSS feeds in tandem</source>
          <target state="translated">아톰 및 RSS 피드를 나란히 게시</target>
        </trans-unit>
        <trans-unit id="68487fe0cee1b6ceedccc629b38fa03159c3945c" translate="yes" xml:space="preserve">
          <source>Publishing your app</source>
          <target state="translated">앱 게시</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="eba1f9367c8e8c568022a61b9b369082b4cfd561" translate="yes" xml:space="preserve">
          <source>Push your code up to the deployment server.</source>
          <target state="translated">코드를 배치 서버로 푸시하십시오.</target>
        </trans-unit>
        <trans-unit id="fadb047592cfe37dd011002bf7e2639bda1fcceb" translate="yes" xml:space="preserve">
          <source>Push your local &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; up to the static file server into the directory that&amp;rsquo;s being served. &lt;a href=&quot;https://rsync.samba.org/&quot;&gt;rsync&lt;/a&gt; is a common choice for this step since it only needs to transfer the bits of static files that have changed.</source>
          <target state="translated">로컬 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 를 정적 파일 서버까지 제공되는 디렉토리로 푸시하십시오 . &lt;a href=&quot;https://rsync.samba.org/&quot;&gt;rsync&lt;/a&gt; 는 변경된 정적 파일의 비트 만 전송하면되므로이 단계에서 일반적으로 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="1b01d9d8afd5c1419255a78b21d4c8564dfd79f1" translate="yes" xml:space="preserve">
          <source>Pushing the commit and making a pull request</source>
          <target state="translated">커밋 푸시 및 풀 요청</target>
        </trans-unit>
        <trans-unit id="21d1895ad0608b1b5bbae01ca3636f2b6dc0f35b" translate="yes" xml:space="preserve">
          <source>Put a &lt;code&gt;__str__()&lt;/code&gt; method on the class you&amp;rsquo;re wrapping up as a field. There are a lot of places where the default behavior of the field code is to call &lt;code&gt;str()&lt;/code&gt; on the value. (In our examples in this document, &lt;code&gt;value&lt;/code&gt; would be a &lt;code&gt;Hand&lt;/code&gt; instance, not a &lt;code&gt;HandField&lt;/code&gt;). So if your &lt;code&gt;__str__()&lt;/code&gt; method automatically converts to the string form of your Python object, you can save yourself a lot of work.</source>
          <target state="translated">풋 &lt;code&gt;__str__()&lt;/code&gt; 당신이 필드로 마무리하고있는 클래스의 방법. 필드 코드의 기본 동작은 값에 대해 &lt;code&gt;str()&lt;/code&gt; 을 호출하는 곳이 많이 있습니다 . 이 문서의 예제에서 &lt;code&gt;value&lt;/code&gt; 는 &lt;code&gt;HandField&lt;/code&gt; 가 아니라 &lt;code&gt;Hand&lt;/code&gt; 인스턴스 입니다. 따라서 &lt;code&gt;__str__()&lt;/code&gt; 메서드가 Python 객체의 문자열 형식으로 자동 변환되면 많은 작업을 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdc3697fd74ad800cdb65b95ed1256b265978ffe" translate="yes" xml:space="preserve">
          <source>Put another way, these two statements are equivalent:</source>
          <target state="translated">달리 말하면,이 두 문장은 동일합니다 :</target>
        </trans-unit>
        <trans-unit id="113aa8400909bb8025f22528466cef0ded59dd97" translate="yes" xml:space="preserve">
          <source>Put the following code in that stylesheet (&lt;code&gt;polls/static/polls/style.css&lt;/code&gt;):</source>
          <target state="translated">해당 스타일 시트에 다음 코드를 넣으십시오 ( &lt;code&gt;polls/static/polls/style.css&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="411a91560b7663acac9ce076ccc85f4c4d1c21dc" translate="yes" xml:space="preserve">
          <source>Put the following code in that template:</source>
          <target state="translated">해당 템플릿에 다음 코드를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="fb93e1d98a2d503a0ae31bf0a3fd07958d6299c7" translate="yes" xml:space="preserve">
          <source>Put the following in the &lt;code&gt;tests.py&lt;/code&gt; file in the &lt;code&gt;polls&lt;/code&gt; application:</source>
          <target state="translated">&lt;code&gt;polls&lt;/code&gt; 애플리케이션 의 &lt;code&gt;tests.py&lt;/code&gt; 파일에 다음을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="b503384f9953d15e50e60d91e7f9e83267b6920b" translate="yes" xml:space="preserve">
          <source>Put your code in some directory &lt;strong&gt;outside&lt;/strong&gt; of the document root, such as &lt;code&gt;/home/mycode&lt;/code&gt;.</source>
          <target state="translated">코드를 문서 루트 &lt;strong&gt;외부&lt;/strong&gt; 의 일부 디렉토리 ( 예 : &lt;code&gt;/home/mycode&lt;/code&gt; )에 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="129940d6c9b56347fe5777f9d82e5c74abcd55d2" translate="yes" xml:space="preserve">
          <source>Putting a prefix on your URL names, perhaps derived from the application name (such as &lt;code&gt;myapp-comment&lt;/code&gt; instead of &lt;code&gt;comment&lt;/code&gt;), decreases the chance of collision.</source>
          <target state="translated">아마도 응용 프로그램 이름에서 파생 된 URL 이름에 접두어를 퍼팅 (예 : &lt;code&gt;myapp-comment&lt;/code&gt; 대신 &lt;code&gt;comment&lt;/code&gt; ), 충돌의 가능성을 감소시킨다.</target>
        </trans-unit>
        <trans-unit id="48cd77981f9800d0e2d8ef2d7e04afe5159a340e" translate="yes" xml:space="preserve">
          <source>Putting it all together:</source>
          <target state="translated">함께 모아서:</target>
        </trans-unit>
        <trans-unit id="b4bb0163032196a7943a56c85925ce7d0c607748" translate="yes" xml:space="preserve">
          <source>Putting your data on the map</source>
          <target state="translated">지도에 데이터 넣기</target>
        </trans-unit>
        <trans-unit id="33e72da85f21769ca9a8ee3181ea9def0321f98f" translate="yes" xml:space="preserve">
          <source>PyPI</source>
          <target state="translated">PyPI</target>
        </trans-unit>
        <trans-unit id="2421f489b5b7558f687867e88178a61e4b70c292" translate="yes" xml:space="preserve">
          <source>PyPy</source>
          <target state="translated">PyPy</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">Python</target>
        </trans-unit>
        <trans-unit id="e9a8abd9c67edee408fd2abe078b7be5cc8f58b5" translate="yes" xml:space="preserve">
          <source>Python 3 required!</source>
          <target state="translated">파이썬 3이 필요합니다!</target>
        </trans-unit>
        <trans-unit id="3c66795b172fd0d01757fe62e8fe6e5cf650329a" translate="yes" xml:space="preserve">
          <source>Python 3.7 and later</source>
          <target state="translated">파이썬 3.7 이상</target>
        </trans-unit>
        <trans-unit id="f51273002ed21b7ecefc2d0178e6808a4b6287b1" translate="yes" xml:space="preserve">
          <source>Python &lt;em&gt;packaging&lt;/em&gt; refers to preparing your app in a specific format that can be easily installed and used. Django itself is packaged very much like this. For a small app like polls, this process isn&amp;rsquo;t too difficult.</source>
          <target state="translated">Python &lt;em&gt;패키징&lt;/em&gt; 은 쉽게 설치하고 사용할 수있는 특정 형식으로 앱을 준비하는 것을 말합니다. 장고 자체는 이와 같이 아주 많이 포장되어 있습니다. 설문 조사와 같은 작은 앱의 경우이 프로세스는 그리 어렵지 않습니다.</target>
        </trans-unit>
        <trans-unit id="10c44ed7f0b589594e5ddb71913c583217eb063c" translate="yes" xml:space="preserve">
          <source>Python Exceptions</source>
          <target state="translated">파이썬 예외</target>
        </trans-unit>
        <trans-unit id="d366800e94a11a3195a317bc4a3f1eff4b53dcb8" translate="yes" xml:space="preserve">
          <source>Python and Django</source>
          <target state="translated">파이썬과 장고</target>
        </trans-unit>
        <trans-unit id="06a555890788b420e7f254eabb4e050cd775cac7" translate="yes" xml:space="preserve">
          <source>Python comes with a CSV library, &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;. The key to using it with Django is that the &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s CSV-creation capability acts on file-like objects, and Django&amp;rsquo;s &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects are file-like objects.</source>
          <target state="translated">Python에는 CSV 라이브러리 &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt; &lt;code&gt;csv&lt;/code&gt; 가 제공&lt;/a&gt; 됩니다. Django와 함께 사용하는 핵심은 &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt; &lt;code&gt;csv&lt;/code&gt; &lt;/a&gt; 모듈의 CSV 생성 기능이 파일과 같은 객체에 작용하고 Django의 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체가 파일과 같은 객체라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="34d7ca2263f1691e91452f9c27c51c80c4de7456" translate="yes" xml:space="preserve">
          <source>Python has the ability to define functions that accept arbitrary name-value arguments whose names and values are evaluated at runtime. For more information, see &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#tut-keywordargs&quot;&gt;Keyword Arguments&lt;/a&gt; in the official Python tutorial.</source>
          <target state="translated">Python은 이름과 값이 런타임에 평가되는 임의의 이름-값 인수를 허용하는 함수를 정의 할 수 있습니다. 자세한 내용 은 공식 Python 자습서의 &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#tut-keywordargs&quot;&gt;키워드 인수&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7d5a072cff1e19cc4cd60f5e5754b02d85b8189" translate="yes" xml:space="preserve">
          <source>Python on Windows</source>
          <target state="translated">Windows의 Python</target>
        </trans-unit>
        <trans-unit id="24ce9115b32b5ef3afe9404baebb6181290dd713" translate="yes" xml:space="preserve">
          <source>Python packages without an &lt;code&gt;__init__.py&lt;/code&gt; file are known as &amp;ldquo;namespace packages&amp;rdquo; and may be spread across multiple directories at different locations on &lt;code&gt;sys.path&lt;/code&gt; (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0420&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 420&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;__init__.py&lt;/code&gt; 파일이 없는 Python 패키지 는&amp;ldquo;네임 스페이스 패키지&amp;rdquo;라고하며 &lt;code&gt;sys.path&lt;/code&gt; 의 다른 위치에있는 여러 디렉토리에 분산 될 수 있습니다 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0420&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 420&lt;/strong&gt;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="0ae88734e5a2cd666ca3daddd0e40270c9dd251c" translate="yes" xml:space="preserve">
          <source>Python provides a number of tools for lazy evaluation, particularly through the &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator-expression&quot;&gt;generator expression&lt;/a&gt; constructs. It&amp;rsquo;s worth reading up on laziness in Python to discover opportunities for making use of lazy patterns in your code.</source>
          <target state="translated">파이썬은 특히 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator&quot;&gt;생성기&lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator-expression&quot;&gt;생성기 표현&lt;/a&gt; 구조를 통해 게으른 평가를위한 여러 도구를 제공합니다 . 코드에서 게으른 패턴을 사용할 수있는 기회를 찾으려면 Python의 게으름을 읽어 볼 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="63faae04590c53c82f8c5a100d4276b9e3d9c75e" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt; objects have a &lt;code&gt;tzinfo&lt;/code&gt; attribute that can be used to store time zone information, represented as an instance of a subclass of &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;datetime.tzinfo&lt;/code&gt;&lt;/a&gt;. When this attribute is set and describes an offset, a datetime object is &lt;strong&gt;aware&lt;/strong&gt;. Otherwise, it&amp;rsquo;s &lt;strong&gt;naive&lt;/strong&gt;.</source>
          <target state="translated">Python의 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime.datetime&lt;/code&gt; &lt;/a&gt; 객체에는 시간대 정보를 저장하는 데 사용할 수 있는 &lt;code&gt;tzinfo&lt;/code&gt; 속성이 있으며 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;datetime.tzinfo&lt;/code&gt; &lt;/a&gt; 하위 클래스의 인스턴스로 표시됩니다 . 이 속성이 설정되고 오프셋을 설명하면 datetime 객체가 &lt;strong&gt;인식&lt;/strong&gt; 합니다. 그렇지 않으면 &lt;strong&gt;순진&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="0456c6124c4fb4655ebc249cf3f323e5b2d1a6c3" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;datetime.time&lt;/code&gt;&lt;/a&gt; objects also feature a &lt;code&gt;tzinfo&lt;/code&gt; attribute, and PostgreSQL has a matching &lt;code&gt;time with time zone&lt;/code&gt; type. However, as PostgreSQL&amp;rsquo;s docs put it, this type &amp;ldquo;exhibits properties which lead to questionable usefulness&amp;rdquo;.</source>
          <target state="translated">Python의 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;datetime.time&lt;/code&gt; &lt;/a&gt; 객체에는 &lt;code&gt;tzinfo&lt;/code&gt; 속성이 있으며 PostgreSQL에는 &lt;code&gt;time with time zone&lt;/code&gt; 유형 과 일치하는 시간이 있습니다 . 그러나 PostgreSQL의 문서에 따르면이 유형은 &quot;의심스러운 유용성을 유발하는 속성을 표시합니다&quot;.</target>
        </trans-unit>
        <trans-unit id="14ce56bdfe4df4b5551633626f36ed72e5572ee2" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt; method will not work when either the &lt;code&gt;format_string&lt;/code&gt; or any of the arguments to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt; contains lazy translation objects. Instead, you can use &lt;a href=&quot;../../ref/utils#django.utils.text.format_lazy&quot;&gt;&lt;code&gt;django.utils.text.format_lazy()&lt;/code&gt;&lt;/a&gt;, which creates a lazy object that runs the &lt;code&gt;str.format()&lt;/code&gt; method only when the result is included in a string. For example:</source>
          <target state="translated">파이썬의 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt; 메소드는 &lt;code&gt;format_string&lt;/code&gt; 또는 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt; 의 인수 중 하나에 게으른 번역 객체가 포함되어 있으면 작동하지 않습니다 . 대신 &lt;a href=&quot;../../ref/utils#django.utils.text.format_lazy&quot;&gt; &lt;code&gt;django.utils.text.format_lazy()&lt;/code&gt; &lt;/a&gt; 사용 하면 결과가 문자열에 포함 된 경우에만 &lt;code&gt;str.format()&lt;/code&gt; 메소드 를 실행하는 게으른 객체를 생성 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f3cda289fa0103a368b46f9e968f484f38fd47d2" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the &lt;code&gt;OperationalError: database
is locked&lt;/code&gt; error.</source>
          <target state="translated">파이썬의 SQLite 래퍼는 두 번째 스레드가 시간 초과되기 전에 잠금 대기 시간을 결정하고 &lt;code&gt;OperationalError: database is locked&lt;/code&gt; 오류를 발생 시키는 시간을 결정하는 기본 시간 초과 값을가집니다 .</target>
        </trans-unit>
        <trans-unit id="2733ab8036d0e7f4e3e4ecfd45f0a5f88b05d893" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s logging library provides several techniques to configure logging, ranging from a programmatic interface to configuration files. By default, Django uses the &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig format&lt;/a&gt;.</source>
          <target state="translated">Python의 로깅 라이브러리는 프로그래밍 인터페이스에서 구성 파일에 이르기까지 로깅을 구성하는 몇 가지 기술을 제공합니다. Django는 기본적으로 &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig 형식을&lt;/a&gt; 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="81ee3afa06e521729fd119cd707ef680dd89b9e4" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s standard library &lt;code&gt;gettext&lt;/code&gt; module installs &lt;code&gt;_()&lt;/code&gt; into the global namespace, as an alias for &lt;code&gt;gettext()&lt;/code&gt;. In Django, we have chosen not to follow this practice, for a couple of reasons:</source>
          <target state="translated">파이썬의 표준 라이브러리 &lt;code&gt;gettext&lt;/code&gt; 모듈 은 &lt;code&gt;gettext()&lt;/code&gt; 의 별칭으로 전역 네임 스페이스에 &lt;code&gt;_()&lt;/code&gt; 를 설치합니다 . Django에서는 몇 가지 이유로이 방법을 따르지 않기로 결정했습니다.</target>
        </trans-unit>
        <trans-unit id="aba4cd2ea8501f396bfcbb27fe321f2f84528870" translate="yes" xml:space="preserve">
          <source>Queries against databases not in &lt;code&gt;databases&lt;/code&gt; will give assertion errors to prevent state leaking between tests.</source>
          <target state="translated">하지의 데이터베이스에 대해 쿼리 &lt;code&gt;databases&lt;/code&gt; 테스트 사이의 상태 누출을 방지하기 위해 주장의 오류를 줄 것이다.</target>
        </trans-unit>
        <trans-unit id="44655b1fa5c553428d342551c2c421c536aafafe" translate="yes" xml:space="preserve">
          <source>Queries can go round in circles:</source>
          <target state="translated">검색어는 원형으로 갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4731bf6d8aafebf282a3e3dade1f842730b4a108" translate="yes" xml:space="preserve">
          <source>Queries involving related objects follow the same rules as queries involving normal value fields. When specifying the value for a query to match, you may use either an object instance itself, or the primary key value for the object.</source>
          <target state="translated">관련 개체와 관련된 쿼리는 일반 값 필드와 관련된 쿼리와 동일한 규칙을 따릅니다. 일치하는 쿼리 값을 지정할 때 객체 인스턴스 자체 또는 객체의 기본 키 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="212fb49028291f1f1c70f560b39ee81a05db8015" translate="yes" xml:space="preserve">
          <source>Queries over related objects</source>
          <target state="translated">관련 개체에 대한 쿼리</target>
        </trans-unit>
        <trans-unit id="b6e87700050ec435ea87a17702967522960ce303" translate="yes" xml:space="preserve">
          <source>Query Expressions</source>
          <target state="translated">쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="473c11e88675e622d9cfcd9003597281d792f48a" translate="yes" xml:space="preserve">
          <source>Query expressions describe a value or a computation that can be used as part of an update, create, filter, order by, annotation, or aggregate. When an expression outputs a boolean value, it may be used directly in filters. There are a number of built-in expressions (documented below) that can be used to help you write queries. Expressions can be combined, or in some cases nested, to form more complex computations.</source>
          <target state="translated">쿼리 식은 업데이트, 생성, 필터링, 순서 지정, 주석 또는 집계의 일부로 사용할 수있는 값 또는 계산을 설명합니다. 식이 부울 값을 출력하면 필터에서 직접 사용될 수 있습니다. 쿼리 작성에 도움이되는 여러 가지 내장 식 (아래에 설명되어 있음)이 있습니다. 보다 복잡한 계산을 위해 식을 결합하거나 일부 경우 중첩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="497a7998b02dc74fadc391e8d23af39ca9cd6d6a" translate="yes" xml:space="preserve">
          <source>Query expressions implement the &lt;a href=&quot;lookups#query-expression&quot;&gt;query expression API&lt;/a&gt;, but also expose a number of extra methods and attributes listed below. All query expressions must inherit from &lt;code&gt;Expression()&lt;/code&gt; or a relevant subclass.</source>
          <target state="translated">쿼리 표현식은 &lt;a href=&quot;lookups#query-expression&quot;&gt;쿼리 표현식 API를&lt;/a&gt; 구현 하지만 아래에 나열된 여러 가지 추가 메소드 및 속성도 노출합니다. 모든 쿼리 식은 &lt;code&gt;Expression()&lt;/code&gt; 또는 관련 하위 클래스 에서 상속해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3ee721f6f1413a6c01f961727164d45a4ef46144" translate="yes" xml:space="preserve">
          <source>Query the waiters:</source>
          <target state="translated">웨이터에게 질의하십시오 :</target>
        </trans-unit>
        <trans-unit id="4b0d4771f1ddfe0e4138f1cc38f09372efe54063" translate="yes" xml:space="preserve">
          <source>Query twice over the related field. This translates to an AND condition in the WHERE clause:</source>
          <target state="translated">관련 필드에 대해 두 번 쿼리하십시오. 이것은 WHERE 절에서 AND 조건으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="7da95f94862e13f37c0c0ff8764a058ab794fb3a" translate="yes" xml:space="preserve">
          <source>Query-related tools</source>
          <target state="translated">쿼리 관련 도구</target>
        </trans-unit>
        <trans-unit id="507982dac0c0a407f01bf53943a125c2bc6715d5" translate="yes" xml:space="preserve">
          <source>QuerySet API reference</source>
          <target state="translated">QuerySet API 참조</target>
        </trans-unit>
        <trans-unit id="cc6835ce045ca407e1aa42cf034a40b2dc968c7d" translate="yes" xml:space="preserve">
          <source>Querying</source>
          <target state="translated">Querying</target>
        </trans-unit>
        <trans-unit id="cf86208e0578fb1f6839fae37450bcc0b6572941" translate="yes" xml:space="preserve">
          <source>Querying &lt;code&gt;ArrayField&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ArrayField&lt;/code&gt; 쿼리</target>
        </trans-unit>
        <trans-unit id="9409813bd6aaf05d9c06ef59bb7f710d0d41847e" translate="yes" xml:space="preserve">
          <source>Querying &lt;code&gt;HStoreField&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HStoreField&lt;/code&gt; 쿼리</target>
        </trans-unit>
        <trans-unit id="045ae4b0426977c5c7a9843d499c63f7234b07e5" translate="yes" xml:space="preserve">
          <source>Querying &lt;code&gt;JSONField&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;JSONField&lt;/code&gt; 쿼리</target>
        </trans-unit>
        <trans-unit id="69dd9b02fe3130e8e9ac516aa4bc690c99a60dff" translate="yes" xml:space="preserve">
          <source>Querying Range Fields</source>
          <target state="translated">쿼리 범위 필드</target>
        </trans-unit>
        <trans-unit id="029d873faabd75383407878dcd5f138977cc1244" translate="yes" xml:space="preserve">
          <source>Querying in the opposite direction:</source>
          <target state="translated">반대 방향으로 쿼리 :</target>
        </trans-unit>
        <trans-unit id="03f0b7f0b8df9e93d31729e2375d554ec08f9665" translate="yes" xml:space="preserve">
          <source>Querying using the bounds</source>
          <target state="translated">경계를 사용하여 쿼리</target>
        </trans-unit>
        <trans-unit id="9d8860465ae3b9ad083fec1668e42e6612aa1804" translate="yes" xml:space="preserve">
          <source>Querysets do not always cache their results. When evaluating only &lt;em&gt;part&lt;/em&gt; of the queryset, the cache is checked, but if it is not populated then the items returned by the subsequent query are not cached. Specifically, this means that &lt;a href=&quot;#limiting-querysets&quot;&gt;limiting the queryset&lt;/a&gt; using an array slice or an index will not populate the cache.</source>
          <target state="translated">쿼리 집합이 항상 결과를 캐시하지는 않습니다. 쿼리 집합의 &lt;em&gt;일부만&lt;/em&gt; 평가할 때 캐시가 검사되지만 채워지지 않으면 후속 쿼리에서 반환 된 항목이 캐시되지 않습니다. 특히 이는 배열 슬라이스 나 인덱스를 사용하여 쿼리 &lt;a href=&quot;#limiting-querysets&quot;&gt;집합&lt;/a&gt; 을 제한 하면 캐시가 채워지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6790c30718ed4e8fc908c43ae184a48781ef4834" translate="yes" xml:space="preserve">
          <source>Question &amp;ldquo;detail&amp;rdquo; page &amp;ndash; displays a question text, with no results but with a form to vote.</source>
          <target state="translated">질문 &quot;세부 사항&quot;페이지 &amp;ndash; 질문 텍스트가 표시되지만 투표 양식은 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a9118d91dfc55f167899afb2295629e230e62b11" translate="yes" xml:space="preserve">
          <source>Question &amp;ldquo;index&amp;rdquo; page &amp;ndash; displays the latest few questions.</source>
          <target state="translated">질문&amp;ldquo;색인&amp;rdquo;페이지 &amp;ndash; 최근 몇 가지 질문이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8a1468ba44381b2d39d41837efbe8b1c1f795af5" translate="yes" xml:space="preserve">
          <source>Question &amp;ldquo;results&amp;rdquo; page &amp;ndash; displays results for a particular question.</source>
          <target state="translated">질문 &quot;결과&quot;페이지 &amp;ndash; 특정 질문에 대한 결과가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8f1e1ff9d000b44617e8ef8f0ce02e30146ecaef" translate="yes" xml:space="preserve">
          <source>Quick example</source>
          <target state="translated">빠른 예</target>
        </trans-unit>
        <trans-unit id="0c01de4ee3e982a6b351e8ac7d0030c470530550" translate="yes" xml:space="preserve">
          <source>Quick install guide</source>
          <target state="translated">빠른 설치 안내서</target>
        </trans-unit>
        <trans-unit id="f962d2087e6fa3b649f147531a425d3b9a32ec80" translate="yes" xml:space="preserve">
          <source>Quick overview</source>
          <target state="translated">빠른 개요</target>
        </trans-unit>
        <trans-unit id="ae9cb3c23abff64abba434bcd7cfc9f890e1c8ff" translate="yes" xml:space="preserve">
          <source>Quite commonly in web applications, you need to display a one-time notification message (also known as &amp;ldquo;flash message&amp;rdquo;) to the user after processing a form or some other types of user input.</source>
          <target state="translated">웹 응용 프로그램에서는 일반적으로 양식 또는 다른 유형의 사용자 입력을 처리 한 후 사용자에게 일회성 알림 메시지 ( &quot;플래시 메시지&quot;라고도 함)를 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="f8afb6809cb55d199c973aba152f8c15757581ae" translate="yes" xml:space="preserve">
          <source>Quoted names can also be used with Django&amp;rsquo;s other supported database backends; except for Oracle, however, the quotes have no effect.</source>
          <target state="translated">인용 된 이름은 Django의 다른 지원되는 데이터베이스 백엔드와 함께 사용할 수도 있습니다. 그러나 Oracle을 제외하고는 따옴표가 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="383257f8e6a65c71a71920945d197e9c162b6e88" translate="yes" xml:space="preserve">
          <source>Raised to prevent deletion of referenced objects when using &lt;a href=&quot;models/fields#django.db.models.PROTECT&quot;&gt;&lt;code&gt;django.db.models.PROTECT&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.ProtectedError&quot;&gt;&lt;code&gt;models.ProtectedError&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.PROTECT&quot;&gt; &lt;code&gt;django.db.models.PROTECT&lt;/code&gt; 를&lt;/a&gt; 사용할 때 참조 된 객체가 삭제되지 않도록 발생 합니다. &lt;a href=&quot;#django.db.models.ProtectedError&quot;&gt; &lt;code&gt;models.ProtectedError&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="63e162f9b8e3a4f0ee58107f72a155c2776f9d77" translate="yes" xml:space="preserve">
          <source>Raised to prevent deletion of referenced objects when using &lt;a href=&quot;models/fields#django.db.models.RESTRICT&quot;&gt;&lt;code&gt;django.db.models.RESTRICT&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.RestrictedError&quot;&gt;&lt;code&gt;models.RestrictedError&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.RESTRICT&quot;&gt; &lt;code&gt;django.db.models.RESTRICT&lt;/code&gt; 를&lt;/a&gt; 사용할 때 참조 된 객체가 삭제되지 않도록 발생 했습니다 . &lt;a href=&quot;#django.db.models.RestrictedError&quot;&gt; &lt;code&gt;models.RestrictedError&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="a39438285dbf48724191bfe029e6417ec166a07e" translate="yes" xml:space="preserve">
          <source>Raised when &lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt;&lt;code&gt;page()&lt;/code&gt;&lt;/a&gt; is given a valid value but no objects exist on that page.</source>
          <target state="translated">제기 할 때 &lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt; &lt;code&gt;page()&lt;/code&gt; &lt;/a&gt; 에 유효한 값을 제공하지만 객체는 해당 페이지에 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="79867f095a9654e94ebbd2d4c674cdb67fc0b11b" translate="yes" xml:space="preserve">
          <source>Raised when &lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt;&lt;code&gt;page()&lt;/code&gt;&lt;/a&gt; is given a value that isn&amp;rsquo;t an integer.</source>
          <target state="translated">경우에 발생 &lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt; &lt;code&gt;page()&lt;/code&gt; &lt;/a&gt; 정수가 아닌 값이 주어진다.</target>
        </trans-unit>
        <trans-unit id="f230db9e7e8de1d6826196c899489f43c17e9464" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;#django.contrib.gis.geos.GEOSException&quot;&gt;&lt;code&gt;GEOSException&lt;/code&gt;&lt;/a&gt; if GDAL is not available or if the geometry&amp;rsquo;s SRID is &lt;code&gt;None&lt;/code&gt; or less than 0. It doesn&amp;rsquo;t impose any constraints on the geometry&amp;rsquo;s SRID if called with a &lt;a href=&quot;gdal#django.contrib.gis.gdal.CoordTransform&quot;&gt;&lt;code&gt;CoordTransform&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;#django.contrib.gis.geos.GEOSException&quot;&gt; &lt;code&gt;GEOSException&lt;/code&gt; 는&lt;/a&gt; GDAL를 사용할 수 없거나 형상의 SRID가없는 경우 경우 &lt;code&gt;None&lt;/code&gt; 또는 0보다 작은 경우는 호출 경우는 기하학의 SRID에 어떤 제약을 부과하지 않습니다 &lt;a href=&quot;gdal#django.contrib.gis.gdal.CoordTransform&quot;&gt; &lt;code&gt;CoordTransform&lt;/code&gt; 의&lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="f659bbf960b6910e347b834071c181c09d51237f" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;../../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; if a model is abstract. and &lt;code&gt;django.contrib.admin.sites.AlreadyRegistered&lt;/code&gt; if a model is already registered.</source>
          <target state="translated">레이즈는 &lt;a href=&quot;../../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 모델은 추상적 인 경우. 및 &lt;code&gt;django.contrib.admin.sites.AlreadyRegistered&lt;/code&gt; 모델이 이미 등록되어있는 경우.</target>
        </trans-unit>
        <trans-unit id="9fedb9f428a9b0ce90303a37a58495eebb2a69bd" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with the following codes:</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 를&lt;/a&gt; 다음 코드로 :</target>
        </trans-unit>
        <trans-unit id="52b87134b19d3578fc7beb6e8fbd3e1b2ed4af51" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; if no such application or model exists. Raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; when called with a single argument that doesn&amp;rsquo;t contain exactly one dot.</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; 를&lt;/a&gt; 이러한 응용 프로그램이나 모델이 존재하지 않는 경우. 발생시킵니다 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 정확히 하나의 점을 포함하지 않는 하나의 인자로 호출 할 때.</target>
        </trans-unit>
        <trans-unit id="38eef04a03bc1e0f873207b67fea1d8a6a730ac1" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; if no such model exists in this application.</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; 는&lt;/a&gt; 그러한 모델이 응용 프로그램에 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="bbdb5a4f46a36bde51f26f38a7305bab8579f262" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; if nothing is found.</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; 를&lt;/a&gt; 아무 것도 발견되지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="6b7971a2a67760d202f90683b27e699220b4993b" translate="yes" xml:space="preserve">
          <source>Raises a 404 if no valid day specification can be found.</source>
          <target state="translated">유효한 일 스펙을 찾을 수없는 경우 404를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="ef25c25cfb26446f34abd61eae1c1b877d53be3f" translate="yes" xml:space="preserve">
          <source>Raises a 404 if no valid month specification can be found.</source>
          <target state="translated">유효한 월 사양을 찾을 수 없으면 404가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="649efa18a29e771511c524364f4dc70abd5766a2" translate="yes" xml:space="preserve">
          <source>Raises a 404 if no valid week specification can be found.</source>
          <target state="translated">유효한 주 사양을 찾을 수 없으면 404가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="02dec23dea64208ebea927e272c3b8ced92abc02" translate="yes" xml:space="preserve">
          <source>Raises a 404 if no valid year specification can be found.</source>
          <target state="translated">유효한 연도 사양을 찾을 수 없으면 404가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e38db0b689edecc0505589f5aa472122022302e7" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;str(value)&lt;/code&gt; contains one or more nulls characters (&lt;code&gt;'\x00'&lt;/code&gt;).</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 이&lt;/a&gt; 경우 &lt;code&gt;str(value)&lt;/code&gt; 하나 개 이상의 널 (null) 문자 (포함 &lt;code&gt;'\x00'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c4c1ada2c7df70aec4fd0243ab804db85e3019ee" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a code of &lt;code&gt;'invalid_extension'&lt;/code&gt; if the extension of &lt;code&gt;value.name&lt;/code&gt; (&lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;) isn&amp;rsquo;t found in &lt;code&gt;allowed_extensions&lt;/code&gt;. The extension is compared case-insensitively with &lt;code&gt;allowed_extensions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;allowed_extensions&lt;/code&gt; 에서 &lt;code&gt;value.name&lt;/code&gt; ( &lt;code&gt;value&lt;/code&gt; 는 &lt;a href=&quot;files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; ) 의 확장자를 찾을 수없는 경우 코드 &lt;code&gt;'invalid_extension'&lt;/code&gt; 으로 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt; 를 발생시킵니다 . 확장은 &lt;code&gt;allowed_extensions&lt;/code&gt; 와 대소 문자를 구분하지 않고 비교 됩니다.</target>
        </trans-unit>
        <trans-unit id="e0a7bffce2432be91a504d7fdced39b3b28aae7c" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a code of &lt;code&gt;'max_length'&lt;/code&gt; if the length of &lt;code&gt;value&lt;/code&gt; is greater than &lt;code&gt;limit_value&lt;/code&gt;, which may be a callable.</source>
          <target state="translated">제기 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 은&lt;/a&gt; 의 코드 &lt;code&gt;'max_length'&lt;/code&gt; 의 경우는 길이 &lt;code&gt;value&lt;/code&gt; 보다 큰 &lt;code&gt;limit_value&lt;/code&gt; 호출 가능한 일 수있다.</target>
        </trans-unit>
        <trans-unit id="7812698f0072d025934ecf7b060543cfa6e91091" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a code of &lt;code&gt;'max_value'&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is greater than &lt;code&gt;limit_value&lt;/code&gt;, which may be a callable.</source>
          <target state="translated">제기 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 은&lt;/a&gt; 의 코드 &lt;code&gt;'max_value'&lt;/code&gt; 경우 &lt;code&gt;value&lt;/code&gt; 보다 큰 &lt;code&gt;limit_value&lt;/code&gt; 호출 가능한 일 수있다.</target>
        </trans-unit>
        <trans-unit id="2f28a9211155e5f89025bedc40d8d7d8590bbae1" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a code of &lt;code&gt;'min_length'&lt;/code&gt; if the length of &lt;code&gt;value&lt;/code&gt; is less than &lt;code&gt;limit_value&lt;/code&gt;, which may be a callable.</source>
          <target state="translated">제기 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 은&lt;/a&gt; 의 코드 &lt;code&gt;'min_length'&lt;/code&gt; 의 경우는 길이 &lt;code&gt;value&lt;/code&gt; 미만인 &lt;code&gt;limit_value&lt;/code&gt; 호출 가능한 일 수있다.</target>
        </trans-unit>
        <trans-unit id="4ca1cec135750585f008ee0a9b754d0a262950d0" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a code of &lt;code&gt;'min_value'&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is less than &lt;code&gt;limit_value&lt;/code&gt;, which may be a callable.</source>
          <target state="translated">제기 &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 은&lt;/a&gt; 의 코드 &lt;code&gt;'min_value'&lt;/code&gt; 경우 &lt;code&gt;value&lt;/code&gt; 미만인 &lt;code&gt;limit_value&lt;/code&gt; 호출 가능한 일 수있다.</target>
        </trans-unit>
        <trans-unit id="e197db816c81423c73c86abab2ef9616c7449393" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#django.core.paginator.EmptyPage&quot;&gt;&lt;code&gt;EmptyPage&lt;/code&gt;&lt;/a&gt; exception only if you specify &lt;code&gt;Paginator(..., allow_empty_first_page=False)&lt;/code&gt; and the &lt;code&gt;object_list&lt;/code&gt; is empty.</source>
          <target state="translated">발생시킵니다 &lt;a href=&quot;#django.core.paginator.EmptyPage&quot;&gt; &lt;code&gt;EmptyPage&lt;/code&gt; 의&lt;/a&gt; 사용자가 지정하는 경우에만 예외 &lt;code&gt;Paginator(..., allow_empty_first_page=False)&lt;/code&gt; 와 &lt;code&gt;object_list&lt;/code&gt; 는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d36f9c49b1796d7a8400dc46e0a1779727aaff9e" translate="yes" xml:space="preserve">
          <source>Raising &lt;code&gt;ValidationError&lt;/code&gt;</source>
          <target state="translated">모금 &lt;code&gt;ValidationError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3f8c1749ce91a95970b30e696f91a5d6ec760256" translate="yes" xml:space="preserve">
          <source>Raising a 404 error</source>
          <target state="translated">404 오류 발생</target>
        </trans-unit>
        <trans-unit id="ec449d6fe8c144585e34f5fb114395c6f40c76a6" translate="yes" xml:space="preserve">
          <source>Raising multiple errors</source>
          <target state="translated">여러 오류 발생</target>
        </trans-unit>
        <trans-unit id="67f112e1c0ba7cca4f0e6c1b8ba6e509c3cebac8" translate="yes" xml:space="preserve">
          <source>Range Fields</source>
          <target state="translated">레인지 필드</target>
        </trans-unit>
        <trans-unit id="cf6a6b9ca40d94f48e61d5f8c3ffacdbe97b6fe9" translate="yes" xml:space="preserve">
          <source>Range fields support the standard lookups: &lt;a href=&quot;../../models/querysets#std:fieldlookup-lt&quot;&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/querysets#std:fieldlookup-gt&quot;&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/querysets#std:fieldlookup-lte&quot;&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/querysets#std:fieldlookup-gte&quot;&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/a&gt;. These are not particularly helpful - they compare the lower bounds first and then the upper bounds only if necessary. This is also the strategy used to order by a range field. It is better to use the specific range comparison operators.</source>
          <target state="translated">범위 필드는 표준 조회를 지원합니다 : &lt;a href=&quot;../../models/querysets#std:fieldlookup-lt&quot;&gt; &lt;code&gt;lt&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../models/querysets#std:fieldlookup-gt&quot;&gt; &lt;code&gt;gt&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../models/querysets#std:fieldlookup-lte&quot;&gt; &lt;code&gt;lte&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../models/querysets#std:fieldlookup-gte&quot;&gt; &lt;code&gt;gte&lt;/code&gt; &lt;/a&gt; . 이것들은 특별히 도움이되지 않습니다. 먼저 하한을 먼저 비교 한 다음 필요한 경우에만 상한을 비교하십시오. 범위 필드별로 주문하는 데 사용되는 전략이기도합니다. 특정 범위 비교 연산자를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e873d159d1885f4b07c2220c8cb41bb19655266b" translate="yes" xml:space="preserve">
          <source>Range operators</source>
          <target state="translated">범위 연산자</target>
        </trans-unit>
        <trans-unit id="f78952f921b40a31e3a91af2b9dccfb751b218e8" translate="yes" xml:space="preserve">
          <source>Range test (inclusive).</source>
          <target state="translated">범위 테스트 (포함).</target>
        </trans-unit>
        <trans-unit id="405b08374dfc6e7aeeeee19a9c1c2e740c8f9808" translate="yes" xml:space="preserve">
          <source>Range validators</source>
          <target state="translated">범위 검증기</target>
        </trans-unit>
        <trans-unit id="005502336f497500bcb0670a263dab868e7a34a8" translate="yes" xml:space="preserve">
          <source>RangeBoundary() expressions</source>
          <target state="translated">RangeBoundary () 표현식</target>
        </trans-unit>
        <trans-unit id="dd48a1149548f0b07ddec97e040571c91978fbab" translate="yes" xml:space="preserve">
          <source>Rank</source>
          <target state="translated">Rank</target>
        </trans-unit>
        <trans-unit id="5208946e0b1be2a3371538152a05d1233496f7a6" translate="yes" xml:space="preserve">
          <source>Raster Data Objects</source>
          <target state="translated">래스터 데이터 객체</target>
        </trans-unit>
        <trans-unit id="5ef1ef57d994a18bfacffb776bdab1b33f4e20b8" translate="yes" xml:space="preserve">
          <source>Raster Lookups</source>
          <target state="translated">래스터 조회</target>
        </trans-unit>
        <trans-unit id="63c47badb7cf59b2ce34cfb0119ccdc92d59f8ae" translate="yes" xml:space="preserve">
          <source>Raster Support</source>
          <target state="translated">래스터 지원</target>
        </trans-unit>
        <trans-unit id="c8b43a0325aa66c5ca3506dbe7d78c6506d34130" translate="yes" xml:space="preserve">
          <source>Raster example:</source>
          <target state="translated">래스터 예 :</target>
        </trans-unit>
        <trans-unit id="500faaef6575e52d000a49a0c111655fcca1467f" translate="yes" xml:space="preserve">
          <source>Raster queries work the same way by replacing the geometry field &lt;code&gt;point&lt;/code&gt; with a raster field, or the &lt;code&gt;pnt&lt;/code&gt; object with a raster object, or both. To specify the band index of a raster input on the right hand side, a 3-tuple can be passed to the lookup as follows:</source>
          <target state="translated">래스터 쿼리는 지오메트리 필드 &lt;code&gt;point&lt;/code&gt; 를 래스터 필드 로 바꾸 거나 &lt;code&gt;pnt&lt;/code&gt; 객체를 래스터 객체 로 바꾸 거나 둘 다를 사용 하여 동일한 방식으로 작동합니다 . 오른쪽에 래스터 입력의 밴드 인덱스를 지정하기 위해 다음과 같이 3 개의 튜플을 조회에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05f7285acfbea0cccac185fc68fe33ee4e964164" translate="yes" xml:space="preserve">
          <source>Rather than adding &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; as a blanket protection, you can use the &lt;code&gt;csrf_protect&lt;/code&gt; decorator, which has exactly the same functionality, on particular views that need the protection. It must be used &lt;strong&gt;both&lt;/strong&gt; on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always).</source>
          <target state="translated">&lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 를 블랭킷 보호로 추가하는 대신 보호 가 필요한 특정보기에서 정확히 동일한 기능을 가진 &lt;code&gt;csrf_protect&lt;/code&gt; 데코레이터를 사용할 수 있습니다 . 출력에 CSRF 토큰을 삽입하는보기와 POST 양식 데이터를 허용하는보기 &lt;strong&gt;모두&lt;/strong&gt; 에서 사용해야합니다 . (이것은 종종 동일한 뷰 기능이지만 항상 그런 것은 아닙니다).</target>
        </trans-unit>
        <trans-unit id="242f65df6b815c78c86f006f111f9d6a8de1c45f" translate="yes" xml:space="preserve">
          <source>Rather than implementing &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt;, subclasses must implement &lt;a href=&quot;#django.core.management.AppCommand.handle_app_config&quot;&gt;&lt;code&gt;handle_app_config()&lt;/code&gt;&lt;/a&gt;, which will be called once for each application.</source>
          <target state="translated">서브 클래스는 &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 구현하는 대신 &lt;a href=&quot;#django.core.management.AppCommand.handle_app_config&quot;&gt; &lt;code&gt;handle_app_config()&lt;/code&gt; &lt;/a&gt; 구현해야하며 , 각 애플리케이션마다 한 번씩 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fd5131e1bcf6f25659f7d4b5cc8c1f5e806ee470" translate="yes" xml:space="preserve">
          <source>Rather than implementing &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt;, subclasses must implement &lt;a href=&quot;#django.core.management.LabelCommand.handle_label&quot;&gt;&lt;code&gt;handle_label()&lt;/code&gt;&lt;/a&gt;, which will be called once for each label.</source>
          <target state="translated">서브 클래스는 &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 구현하는 대신 &lt;a href=&quot;#django.core.management.LabelCommand.handle_label&quot;&gt; &lt;code&gt;handle_label()&lt;/code&gt; &lt;/a&gt; 구현해야합니다 .이 레이블은 각 레이블마다 한 번씩 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c46a377b544a8428af14e79b21f9306dc49c26cb" translate="yes" xml:space="preserve">
          <source>Rather than introduce potential compatibility issues with this code, we instead opted to add this mode so that all existing Django sync code runs in the same thread and thus is fully compatible with async mode. Note that sync code will always be in a &lt;em&gt;different&lt;/em&gt; thread to any async code that is calling it, so you should avoid passing raw database handles or other thread-sensitive references around.</source>
          <target state="translated">이 코드에 잠재적 인 호환성 문제를 도입하는 대신 기존의 모든 Django 동기화 코드가 동일한 스레드에서 실행되므로 비동기 모드와 완전히 호환되도록이 모드를 추가하는 것을 선택했습니다. 동기화 코드는 항상 이를 호출하는 비동기 코드 &lt;em&gt;와 다른&lt;/em&gt; 스레드에 있으므로 원시 데이터베이스 핸들이나 기타 스레드에 민감한 참조를 전달하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="b7b4472c459e5ea6dd92936ae2d6cadc3eac5048" translate="yes" xml:space="preserve">
          <source>Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via &lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;QuerySet.update()&lt;/a&gt;. Similarly, do &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;bulk deletes&lt;/a&gt; where possible.</source>
          <target state="translated">오브젝트로드를 검색하고 일부 값을 설정하여 개별적으로 저장하는 &lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;대신 QuerySet.update ()&lt;/a&gt; 를 통해 대량 SQL UPDATE 문을 사용하십시오 . 마찬가지로 가능한 경우 &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;대량 삭제&lt;/a&gt; 를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="0a65c4362f80f15c986dcb6ac6e5d9e6546fb00a" translate="yes" xml:space="preserve">
          <source>Raw SQL expressions</source>
          <target state="translated">원시 SQL 표현식</target>
        </trans-unit>
        <trans-unit id="9f5ef9cd3f272e59c3c26c12902db3ba7d565d10" translate="yes" xml:space="preserve">
          <source>Raw queries</source>
          <target state="translated">원시 쿼리</target>
        </trans-unit>
        <trans-unit id="18ea065526a8ad321c70048cf3baa719811f99b3" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;../ref/forms/renderers#overriding-built-in-widget-templates&quot;&gt;Overriding built-in widget templates&lt;/a&gt; if you&amp;rsquo;re looking to do that.</source>
          <target state="translated">원하는 경우 &lt;a href=&quot;../ref/forms/renderers#overriding-built-in-widget-templates&quot;&gt;내장 위젯 템플리트 대체를&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="ce700edc75ecc91e22a139a6e8d305167cd1e41e" translate="yes" xml:space="preserve">
          <source>Read on for details.</source>
          <target state="translated">자세한 내용은 계속 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="5cdc0d9e694b2eaa98c7c096f7b00e0bb6395bda" translate="yes" xml:space="preserve">
          <source>Read on to find out how to add your own actions to this list.</source>
          <target state="translated">이 목록에 자신의 작업을 추가하는 방법을 알아 보려면 계속 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="4ed57f54e247286a3dd772aca25e863acafcf68f" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../howto/deployment/wsgi/modwsgi&quot;&gt;Django mod_wsgi documentation&lt;/a&gt; for more information and other common elements to a Django WSGI application.</source>
          <target state="translated">Django WSGI 애플리케이션에 대한 자세한 정보 및 기타 공통 요소 는 &lt;a href=&quot;../howto/deployment/wsgi/modwsgi&quot;&gt;Django mod_wsgi 문서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="ba94d92ea0fc0108fb5111a8778616ce9ce343be" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin documentation&lt;/a&gt; for full information on what the &lt;code&gt;manage.py&lt;/code&gt; utility can do.</source>
          <target state="translated">&lt;code&gt;manage.py&lt;/code&gt; 유틸리티가 수행 할 수있는 작업 에 대한 자세한 정보 는 &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin 문서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="fa61ec2d4a4a4ad9f3c5532bcc9a01eaf9b3ea6d" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/&quot;&gt;release notes&lt;/a&gt; for each &amp;lsquo;final&amp;rsquo; release from the one after your current Django version, up to and including the version to which you plan to upgrade.</source>
          <target state="translated">현재 Django 버전 이후부터 업그레이드 할 버전을 포함하여 각 '최종'릴리스에 대한 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/&quot;&gt;릴리스 정보&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="2a82904be74564d2cd1b36db6bd9c4ed0066700d" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/releases/index/&quot;&gt;release notes&lt;/a&gt; for each &amp;lsquo;final&amp;rsquo; release from the one after your current Django version, up to and including the version to which you plan to upgrade.</source>
          <target state="translated">현재 Django 버전 이후부터 업그레이드하려는 버전까지 각 '최종'릴리스에 대한 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/releases/index/&quot;&gt;릴리스 노트&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="1ad0cb3cd1c5777c98648badf13385f628fcb4ed" translate="yes" xml:space="preserve">
          <source>Read the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You&amp;rsquo;ll probably want to use &lt;code&gt;chunks()&lt;/code&gt; instead; see below.</source>
          <target state="translated">파일에서 업로드 된 전체 데이터를 읽습니다. 이 방법에주의하십시오 : 업로드 된 파일이 크면 메모리로 읽으려고하면 시스템을 압도 할 수 있습니다. 대신 &lt;code&gt;chunks()&lt;/code&gt; 를 사용하고 싶을 것입니다 . 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9eea83bf0ccf3ef4c4086e96388d7810576a979a" translate="yes" xml:space="preserve">
          <source>Read-only &lt;code&gt;Meta&lt;/code&gt; attributes</source>
          <target state="translated">읽기 전용 &lt;code&gt;Meta&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="41532e3bd7a65aef2b9a472825897a3bac62683c" translate="yes" xml:space="preserve">
          <source>Read-only attribute which is always &lt;code&gt;False&lt;/code&gt;. This is a way of differentiating &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt; objects. Generally, you should prefer using &lt;a href=&quot;#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;is_authenticated&lt;/code&gt;&lt;/a&gt; to this attribute.</source>
          <target state="translated">항상 &lt;code&gt;False&lt;/code&gt; 인 읽기 전용 속성입니다 . 이는 &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; 개체 를 차별화하는 방법입니다 . 일반적 으로이 속성에 &lt;a href=&quot;#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;is_authenticated&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="0a7a05ed8f28ec3b82aff591fe46e85b8ceb2118" translate="yes" xml:space="preserve">
          <source>Read-only attribute which is always &lt;code&gt;False&lt;/code&gt;. This is a way of differentiating &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt; objects. Generally, you should prefer using &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;is_authenticated&lt;/code&gt;&lt;/a&gt; to this attribute.</source>
          <target state="translated">항상 &lt;code&gt;False&lt;/code&gt; 인 읽기 전용 속성입니다 . 이는 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; 개체 를 차별화하는 방법입니다 . 일반적 으로이 속성에 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;is_authenticated&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="914b9efb519b462eef0203b30e71768a9011e6ef" translate="yes" xml:space="preserve">
          <source>Read-only attribute which is always &lt;code&gt;True&lt;/code&gt; (as opposed to &lt;code&gt;AnonymousUser.is_authenticated&lt;/code&gt; which is always &lt;code&gt;False&lt;/code&gt;). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn&amp;rsquo;t check if the user is active or has a valid session. Even though normally you will check this attribute on &lt;code&gt;request.user&lt;/code&gt; to find out whether it has been populated by the &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; (representing the currently logged-in user), you should know this attribute is &lt;code&gt;True&lt;/code&gt; for any &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">항상 &lt;code&gt;True&lt;/code&gt; 인 읽기 전용 특성 ( 항상 &lt;code&gt;False&lt;/code&gt; 인 &lt;code&gt;AnonymousUser.is_authenticated&lt;/code&gt; 와 반대 ) 이것은 사용자가 인증되었는지 알 수있는 방법입니다. 이는 권한을 의미하지 않으며 사용자가 활성 상태인지 또는 유효한 세션이 있는지 확인하지 않습니다. 일반적으로 &lt;code&gt;request.user&lt;/code&gt; 에서이 속성을 확인 하여 &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; (현재 로그인 한 사용자를 나타냄)에 의해 채워 졌는지 여부를 확인하지만 이 속성이 모든 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 인스턴스에 대해 &lt;code&gt;True&lt;/code&gt; 임을 알아야 합니다.</target>
        </trans-unit>
        <trans-unit id="c0e895729ad7f475f5b2bf1748aaa4fb5d2a87ed" translate="yes" xml:space="preserve">
          <source>Read-only attribute which is always &lt;code&gt;True&lt;/code&gt; (as opposed to &lt;code&gt;AnonymousUser.is_authenticated&lt;/code&gt; which is always &lt;code&gt;False&lt;/code&gt;). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn&amp;rsquo;t check if the user is active or has a valid session. Even though normally you will check this attribute on &lt;code&gt;request.user&lt;/code&gt; to find out whether it has been populated by the &lt;a href=&quot;../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; (representing the currently logged-in user), you should know this attribute is &lt;code&gt;True&lt;/code&gt; for any &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">항상 &lt;code&gt;True&lt;/code&gt; 인 읽기 전용 특성 ( 항상 &lt;code&gt;False&lt;/code&gt; 인 &lt;code&gt;AnonymousUser.is_authenticated&lt;/code&gt; 와 반대 ) 이것은 사용자가 인증되었는지 알 수있는 방법입니다. 이는 권한을 의미하지 않으며 사용자가 활성 상태인지 또는 유효한 세션이 있는지 확인하지 않습니다. 일반적으로 &lt;code&gt;request.user&lt;/code&gt; 에서이 속성을 확인 하여 &lt;a href=&quot;../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; (현재 로그인 한 사용자를 나타냄)에 의해 채워 졌는지 여부를 확인하지만 이 속성이 모든 &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 인스턴스에 대해 &lt;code&gt;True&lt;/code&gt; 임을 알아야 합니다.</target>
        </trans-unit>
        <trans-unit id="56007e3139edd3163cf05ca41bfc84d5000b7f0b" translate="yes" xml:space="preserve">
          <source>Read-only attributes</source>
          <target state="translated">읽기 전용 속성</target>
        </trans-unit>
        <trans-unit id="c1db1af1a77800e199d231211e0ee56c94656a50" translate="yes" xml:space="preserve">
          <source>Reader Objects</source>
          <target state="translated">리더 객체</target>
        </trans-unit>
        <trans-unit id="415b604313f8d8d16e114afcdd1371c7dcc8d397" translate="yes" xml:space="preserve">
          <source>Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last time the session was &lt;em&gt;modified&lt;/em&gt;.</source>
          <target state="translated">세션을 읽는 것은 만료 목적으로 활동으로 간주되지 않습니다. 세션 만료는 세션이 마지막으로 &lt;em&gt;수정 된&lt;/em&gt; 시점부터 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="d540a305997ed8ff2cf78c613de37cd46b92ba00" translate="yes" xml:space="preserve">
          <source>Receiver functions</source>
          <target state="translated">수신기 기능</target>
        </trans-unit>
        <trans-unit id="5dd676dcf1b0d740d5b2ca2e8e2a7f76c69f1781" translate="yes" xml:space="preserve">
          <source>Receives a &amp;ldquo;chunk&amp;rdquo; of data from the file upload.</source>
          <target state="translated">파일 업로드에서 &quot;청크&quot;데이터를받습니다.</target>
        </trans-unit>
        <trans-unit id="15cba3e481f7f613efb8e8dd9e72a1071a82d171" translate="yes" xml:space="preserve">
          <source>Recreate the &lt;code&gt;Article&lt;/code&gt; and &lt;code&gt;Publication&lt;/code&gt; we have deleted:</source>
          <target state="translated">삭제 한 &lt;code&gt;Article&lt;/code&gt; 및 &lt;code&gt;Publication&lt;/code&gt; 다시 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="219d012f3326715d16934176de803d1f48e3f839" translate="yes" xml:space="preserve">
          <source>Recursive relationships using an intermediary model and defined as symmetrical (that is, with &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt;&lt;code&gt;symmetrical=True&lt;/code&gt;&lt;/a&gt;, which is the default) can&amp;rsquo;t determine the reverse accessors names, as they would be the same. You need to set a &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; to at least one of them. If you&amp;rsquo;d prefer Django not to create a backwards relation, set &lt;code&gt;related_name&lt;/code&gt; to &lt;code&gt;'+'&lt;/code&gt;.</source>
          <target state="translated">중개 모델을 사용하고 대칭으로 정의 된 (즉, &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt; &lt;code&gt;symmetrical=True&lt;/code&gt; &lt;/a&gt; 인 기본값) 재귀 관계 는 역방향 접근 자 이름을 동일하게 결정할 수 없습니다. &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 을 하나 이상 으로 설정해야 합니다. Django가 역방향 관계를 만들지 않게하려면 &lt;code&gt;related_name&lt;/code&gt; 을 &lt;code&gt;'+'&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="bdac757a55e328fce5f9ea84cb1f4c52b693ae20" translate="yes" xml:space="preserve">
          <source>Recursively takes a self-nested list and returns an HTML unordered list &amp;ndash; WITHOUT opening and closing &amp;lt;ul&amp;gt; tags.</source>
          <target state="translated">자체 중첩 목록을 재귀 적으로 가져 와서 &amp;lt;ul&amp;gt; 태그를 열거 나 닫지 않고 HTML 정렬되지 않은 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5f0b9d25f251da505e0f259b62f97279df6c7721" translate="yes" xml:space="preserve">
          <source>Redirect to object&amp;rsquo;s page</source>
          <target state="translated">객체 페이지로 리디렉션</target>
        </trans-unit>
        <trans-unit id="c1082c179fcf127055950f87347c117ccb88695f" translate="yes" xml:space="preserve">
          <source>Redirecting unauthorized requests in class-based views</source>
          <target state="translated">클래스 기반보기에서 무단 요청 리디렉션</target>
        </trans-unit>
        <trans-unit id="fcf937319f333e7df4ec12406025be63bde6549b" translate="yes" xml:space="preserve">
          <source>Redirects</source>
          <target state="translated">Redirects</target>
        </trans-unit>
        <trans-unit id="99a0f0c42b6c80fb7d4ddc5625fdef0e2634a980" translate="yes" xml:space="preserve">
          <source>Redirects are represented by a standard &lt;a href=&quot;../../topics/db/models&quot;&gt;Django model&lt;/a&gt;, which lives in &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/redirects/models.py&quot;&gt;django/contrib/redirects/models.py&lt;/a&gt;. You can access redirect objects via the &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django database API&lt;/a&gt;.</source>
          <target state="translated">리디렉션은 표준으로 표시됩니다 &lt;a href=&quot;../../topics/db/models&quot;&gt;장고 모델&lt;/a&gt; 에 살고, &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/redirects/models.py&quot;&gt;장고 /있는 contrib / 리디렉션 / models.py&lt;/a&gt; . &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django 데이터베이스 API&lt;/a&gt; 를 통해 리디렉션 객체에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91a327b753697fc97e1a71d0bb422a6908532561" translate="yes" xml:space="preserve">
          <source>Redirects are represented by a standard &lt;a href=&quot;../../topics/db/models&quot;&gt;Django model&lt;/a&gt;, which lives in &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/redirects/models.py&quot;&gt;django/contrib/redirects/models.py&lt;/a&gt;. You can access redirect objects via the &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django database API&lt;/a&gt;. For example:</source>
          <target state="translated">리디렉션은 표준으로 표시됩니다 &lt;a href=&quot;../../topics/db/models&quot;&gt;장고 모델&lt;/a&gt; 에 살고, &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/redirects/models.py&quot;&gt;장고 /있는 contrib / 리디렉션 / models.py&lt;/a&gt; . &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django 데이터베이스 API&lt;/a&gt; 를 통해 리디렉션 개체에 액세스 할 수 있습니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="635f8ba8a6b7756ce0a998b1d814136c3037b994" translate="yes" xml:space="preserve">
          <source>Redirects to &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_success_url&quot;&gt;&lt;code&gt;get_success_url()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.edit.FormMixin.get_success_url&quot;&gt; &lt;code&gt;get_success_url()&lt;/code&gt; &lt;/a&gt; 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="6685e75b7bdd069645601bbf986a1036c61fc1a3" translate="yes" xml:space="preserve">
          <source>Redirects to a given URL.</source>
          <target state="translated">지정된 URL로 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="cee4d5d609c5c9337422fb70f81f259094d9abb9" translate="yes" xml:space="preserve">
          <source>Redirects to the login page, and then back to another URL after a successful login.</source>
          <target state="translated">로그인 페이지로 리디렉션 한 다음 로그인에 성공한 후 다른 URL로 다시 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="81309e36ebc2777a2d2971ea4526663c08571bed" translate="yes" xml:space="preserve">
          <source>Reducing the value of this timeout doesn&amp;rsquo;t make any difference to the ability of an attacker to brute-force a password reset token. Tokens are designed to be safe from brute-forcing without any timeout.</source>
          <target state="translated">이 시간 제한 값을 줄여도 공격자가 암호 재설정 토큰을 무차별 대입하는 능력에는 영향을 미치지 않습니다. 토큰은 시간 초과없이 무차별 대입으로부터 안전하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="90773f350cdc5206a4d248f2aebd691a9d73b770" translate="yes" xml:space="preserve">
          <source>Refer &lt;a href=&quot;#mysql-spatial-limitations&quot;&gt;MySQL Spatial Limitations&lt;/a&gt; section for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#mysql-spatial-limitations&quot;&gt;MySQL 공간 제한&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5e0ec3a1898930aa62748f205436d3a1bae8429f" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;settings&quot;&gt;settings documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings&quot;&gt;설정 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="34ef02ec65bb35fc151543cc3283f96c3ff66d6b" translate="yes" xml:space="preserve">
          <source>References to functions in field options such as &lt;code&gt;upload_to&lt;/code&gt; and &lt;code&gt;limit_choices_to&lt;/code&gt; and model manager declarations with managers having &lt;code&gt;use_in_migrations = True&lt;/code&gt; are serialized in migrations, so the functions and classes will need to be kept around for as long as there is a migration referencing them. Any &lt;a href=&quot;../howto/custom-model-fields&quot;&gt;custom model fields&lt;/a&gt; will also need to be kept, since these are imported directly by migrations.</source>
          <target state="translated">&lt;code&gt;upload_to&lt;/code&gt; 및 &lt;code&gt;limit_choices_to&lt;/code&gt; 와 같은 필드 옵션의 함수에 대한 참조 및 &lt;code&gt;use_in_migrations = True&lt;/code&gt; 관리자가있는 모델 관리자 선언 은 마이그레이션에서 직렬화되므로 함수를 참조하는 마이그레이션이있는 한 함수 및 클래스를 유지해야합니다. 모든 &lt;a href=&quot;../howto/custom-model-fields&quot;&gt;사용자 정의 모델 필드&lt;/a&gt; 도 마이그레이션에 의해 직접 가져 오기 때문에 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="276ab3a41713a17fad1f1a0b209cbee45742aeee" translate="yes" xml:space="preserve">
          <source>Referencing built-in constraints</source>
          <target state="translated">내장 제약 조건 참조</target>
        </trans-unit>
        <trans-unit id="0e9b8d42d37f279ddf603e896c63abbad3f86c9a" translate="yes" xml:space="preserve">
          <source>Referencing built-in indexes</source>
          <target state="translated">내장 인덱스 참조</target>
        </trans-unit>
        <trans-unit id="c7b51a7cf9d21479475aeccd50db9c14080cef2b" translate="yes" xml:space="preserve">
          <source>Referencing columns from the outer queryset</source>
          <target state="translated">외부 쿼리 집합에서 열 참조</target>
        </trans-unit>
        <trans-unit id="2d946defa09525bc6e693928e987dffed69eb391" translate="yes" xml:space="preserve">
          <source>Referencing the &lt;code&gt;User&lt;/code&gt; model</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; 모델 참조</target>
        </trans-unit>
        <trans-unit id="5601323cf623f0f478b4fdf72ca5d8dc6972bd9a" translate="yes" xml:space="preserve">
          <source>Referential fields are again represented by the PK or sequence of PKs.</source>
          <target state="translated">참조 필드는 다시 PK 또는 PK 시퀀스로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e9085bde7a7780a48ca2a79ea2ef1b8e36c397ae" translate="yes" xml:space="preserve">
          <source>Referrer Policy</source>
          <target state="translated">리퍼러 정책</target>
        </trans-unit>
        <trans-unit id="59ec56dfdbf84b16f4ab15d7a7e20276cd1c71d6" translate="yes" xml:space="preserve">
          <source>Referrer policy</source>
          <target state="translated">리퍼러 정책</target>
        </trans-unit>
        <trans-unit id="75d2291a8b37aa0271103fe6b52cc8a23f719e80" translate="yes" xml:space="preserve">
          <source>Refreshing objects from database</source>
          <target state="translated">데이터베이스에서 객체 새로 고침</target>
        </trans-unit>
        <trans-unit id="d4df310c061d0e7e3adb44cae53677e334ad7017" translate="yes" xml:space="preserve">
          <source>Regardless of &lt;code&gt;validate_max&lt;/code&gt;, if the number of forms in a data set exceeds &lt;code&gt;max_num&lt;/code&gt; by more than 1000, then the form will fail to validate as if &lt;code&gt;validate_max&lt;/code&gt; were set, and additionally only the first 1000 forms above &lt;code&gt;max_num&lt;/code&gt; will be validated. The remainder will be truncated entirely. This is to protect against memory exhaustion attacks using forged POST requests.</source>
          <target state="translated">&lt;code&gt;validate_max&lt;/code&gt; 에 관계없이 , 데이터 세트의 양식 수가 1000보다 큰 &lt;code&gt;max_num&lt;/code&gt; 을 초과 하면 &lt;code&gt;validate_max&lt;/code&gt; 가 설정된 것처럼 양식의 유효성 이 검증 되지 &lt;code&gt;max_num&lt;/code&gt; 위의 첫 1000 개의 양식 만 유효성 검증됩니다. 나머지는 완전히 잘립니다. 이는 위조 된 POST 요청을 사용하여 메모리 소진 공격을 방지하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="8d122a243aaaf7db085d5a39e1926de802b785eb" translate="yes" xml:space="preserve">
          <source>Regardless of &lt;code&gt;validate_min&lt;/code&gt;, if a formset contains no data, then &lt;code&gt;extra + min_num&lt;/code&gt; empty forms will be displayed.</source>
          <target state="translated">&lt;code&gt;validate_min&lt;/code&gt; 에 관계없이 formset에 데이터가 없으면 &lt;code&gt;extra + min_num&lt;/code&gt; 빈 양식이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="cea39d3a1fa585ece95391cca7120d336be58608" translate="yes" xml:space="preserve">
          <source>Regardless of the bounds specified when saving the data, PostgreSQL always returns a range in a canonical form that includes the lower bound and excludes the upper bound, that is &lt;code&gt;[)&lt;/code&gt;.</source>
          <target state="translated">데이터를 저장할 때 지정된 경계에 관계없이 PostgreSQL은 항상 하한을 포함하고 상한, 즉 &lt;code&gt;[)&lt;/code&gt; 를 제외하는 표준 형식으로 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3ae0a24f6ed88591a811cce9f6a394284d521979" translate="yes" xml:space="preserve">
          <source>Regardless of the bounds specified when saving the data, PostgreSQL always returns a range in a canonical form that includes the lower bound and excludes the upper bound; that is &lt;code&gt;[)&lt;/code&gt;.</source>
          <target state="translated">데이터를 저장할 때 지정된 범위에 관계없이 PostgreSQL은 항상 하한을 포함하고 상한을 제외하는 표준 형식으로 범위를 반환합니다. 즉 &lt;code&gt;[)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="99d7c5a4bf73f7b54502ceed61f48e727412d9cb" translate="yes" xml:space="preserve">
          <source>Regardless of the number of templates used during rendering, you can retrieve context values using the &lt;code&gt;[]&lt;/code&gt; operator. For example, the context variable &lt;code&gt;name&lt;/code&gt; could be retrieved using:</source>
          <target state="translated">렌더링 중에 사용 된 템플릿 수에 관계없이 &lt;code&gt;[]&lt;/code&gt; 연산자를 사용하여 컨텍스트 값을 검색 할 수 있습니다 . 예를 들어, 컨텍스트 변수 &lt;code&gt;name&lt;/code&gt; 은 다음을 사용하여 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f83c6e8910b69f0e02c032fb512f7f8643c71ee" translate="yes" xml:space="preserve">
          <source>Regardless of the value of the &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting in your configuration file, all Django tests run with &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt;=False. This is to ensure that the observed output of your code matches what will be seen in a production setting.</source>
          <target state="translated">구성 파일 의 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정 값에 관계없이 모든 Django 테스트는 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; = False로 실행됩니다 . 이는 코드에서 관찰 된 출력이 프로덕션 설정에서 볼 수있는 것과 일치하도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="fea13858c65d8d1656c501831f13733dbd4ef8c3" translate="yes" xml:space="preserve">
          <source>Regardless of whether the tests pass or fail, the test databases are destroyed when all the tests have been executed.</source>
          <target state="translated">테스트 통과 여부에 관계없이 모든 테스트가 실행되면 테스트 데이터베이스가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="3fc3facce78bf62706623b190c662b474a07e993" translate="yes" xml:space="preserve">
          <source>Regardless of whether you define a &lt;code&gt;media&lt;/code&gt; declaration, &lt;em&gt;all&lt;/em&gt; Form objects have a &lt;code&gt;media&lt;/code&gt; property. The default value for this property is the result of adding the &lt;code&gt;media&lt;/code&gt; definitions for all widgets that are part of the form:</source>
          <target state="translated">&lt;code&gt;media&lt;/code&gt; 선언 을 정의하는지 여부에 관계없이 &lt;em&gt;모든&lt;/em&gt; Form 개체에는 &lt;code&gt;media&lt;/code&gt; 속성이 있습니다. 이 특성의 기본값 은 양식의 일부인 모든 위젯에 대한 &lt;code&gt;media&lt;/code&gt; 정의를 추가 한 결과입니다 .</target>
        </trans-unit>
        <trans-unit id="8fdb1abcfc2cccc01f8beaa1e9517a91f7ba37d2" translate="yes" xml:space="preserve">
          <source>Regardless of whether you define a primary key field yourself, or let Django supply one for you, each model will have a property called &lt;code&gt;pk&lt;/code&gt;. It behaves like a normal attribute on the model, but is actually an alias for whichever attribute is the primary key field for the model. You can read and set this value, just as you would for any other attribute, and it will update the correct field in the model.</source>
          <target state="translated">기본 키 필드를 직접 정의하든 Django에서 자동 키 필드를 제공하도록하든 각 모델에는 &lt;code&gt;pk&lt;/code&gt; 속성이 있습니다 . 모델의 일반 속성처럼 작동하지만 실제로는 모델의 기본 키 필드 인 속성에 대한 별명입니다. 다른 속성과 마찬가지로이 값을 읽고 설정할 수 있으며 모델의 올바른 필드가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="fc51848ad0442371d20c40163eb94aafe5c0ea02" translate="yes" xml:space="preserve">
          <source>Register custom converter classes in your URLconf using &lt;a href=&quot;../../ref/urls#django.urls.register_converter&quot;&gt;&lt;code&gt;register_converter()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/urls#django.urls.register_converter&quot;&gt; &lt;code&gt;register_converter()&lt;/code&gt; &lt;/a&gt; 사용하여 URLconf에 사용자 정의 변환기 클래스를 등록 하십시오 .</target>
        </trans-unit>
        <trans-unit id="46e27d91e3eab975e7b640fdbd934e41e8413b3d" translate="yes" xml:space="preserve">
          <source>Register with Google first!</source>
          <target state="translated">먼저 Google에 등록하십시오!</target>
        </trans-unit>
        <trans-unit id="5dff0eb6797a9d6b53ff5fa684cc0436c221bf7b" translate="yes" xml:space="preserve">
          <source>Registering and fetching lookups</source>
          <target state="translated">조회 등록 및 가져 오기</target>
        </trans-unit>
        <trans-unit id="f51d9cda2b0d34328b131091ec0c3ea09eac6385" translate="yes" xml:space="preserve">
          <source>Registering and labeling checks</source>
          <target state="translated">등록 및 라벨 확인</target>
        </trans-unit>
        <trans-unit id="5b6fa09dedc7250877272e6b1b23698480dbdfc6" translate="yes" xml:space="preserve">
          <source>Registering custom filters</source>
          <target state="translated">맞춤 필터 등록</target>
        </trans-unit>
        <trans-unit id="928a16e3f50ffd8a5ae8c237f473df9f44693c2a" translate="yes" xml:space="preserve">
          <source>Registering custom path converters</source>
          <target state="translated">맞춤형 경로 변환기 등록</target>
        </trans-unit>
        <trans-unit id="4af918966b14a758d09d261b9ef75259d658d2ca" translate="yes" xml:space="preserve">
          <source>Registering the tag</source>
          <target state="translated">태그 등록</target>
        </trans-unit>
        <trans-unit id="d36ce0f66d74b6c119c0a55fefdb441e3cf123cb" translate="yes" xml:space="preserve">
          <source>Registers a new lookup in the class. For example &lt;code&gt;DateField.register_lookup(YearExact)&lt;/code&gt; will register &lt;code&gt;YearExact&lt;/code&gt; lookup on &lt;code&gt;DateField&lt;/code&gt;. It overrides a lookup that already exists with the same name. &lt;code&gt;lookup_name&lt;/code&gt; will be used for this lookup if provided, otherwise &lt;code&gt;lookup.lookup_name&lt;/code&gt; will be used.</source>
          <target state="translated">클래스에 새로운 조회를 등록합니다. 예를 들어 &lt;code&gt;DateField.register_lookup(YearExact)&lt;/code&gt; 는 &lt;code&gt;DateField&lt;/code&gt; 에 &lt;code&gt;YearExact&lt;/code&gt; 조회를 등록 합니다. 동일한 이름으로 이미 존재하는 조회를 대체합니다. 제공된 경우이 검색에 &lt;code&gt;lookup_name&lt;/code&gt; 이 사용되며, 그렇지 않으면 &lt;code&gt;lookup.lookup_name&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="38d4bc4c25cdb28e029c4332704ec2908a7ffaa5" translate="yes" xml:space="preserve">
          <source>Registers the given model class (or iterable of classes) with the given &lt;code&gt;admin_class&lt;/code&gt;. &lt;code&gt;admin_class&lt;/code&gt; defaults to &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; (the default admin options). If keyword arguments are given &amp;ndash; e.g. &lt;code&gt;list_display&lt;/code&gt; &amp;ndash; they&amp;rsquo;ll be applied as options to the admin class.</source>
          <target state="translated">주어진 모델 클래스 (또는 클래스의 반복 가능)를 지정된 &lt;code&gt;admin_class&lt;/code&gt; 에 등록 합니다. &lt;code&gt;admin_class&lt;/code&gt; 의 기본값은 &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; (기본 관리자 옵션)입니다. 키워드 인수가 제공되면 (예 : &lt;code&gt;list_display&lt;/code&gt; ) 관리 클래스에 옵션으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f169484488e44716e96ed1c45fb600472f0644ab" translate="yes" xml:space="preserve">
          <source>Registration API</source>
          <target state="translated">등록 API</target>
        </trans-unit>
        <trans-unit id="727971b46e8c135e01c73b9932d62092cf2fb313" translate="yes" xml:space="preserve">
          <source>Regroups a list of alike objects by a common attribute.</source>
          <target state="translated">공통 속성으로 유사한 객체 목록을 다시 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="b57e0217a5166194203d573ef157860b55fec143" translate="yes" xml:space="preserve">
          <source>Regular expressions allow nested arguments, and Django will resolve them and pass them to the view. When reversing, Django will try to fill in all outer captured arguments, ignoring any nested captured arguments. Consider the following URL patterns which optionally take a page argument:</source>
          <target state="translated">정규 표현식은 중첩 인수를 허용하며 Django는 인수를 해석하여 뷰에 전달합니다. 반전 할 때 Django는 중첩 된 캡처 된 인수를 무시하고 모든 외부 캡처 된 인수를 채우려 고합니다. 선택적으로 페이지 인수를 취하는 다음 URL 패턴을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="0efb7797b34f8df40e596b7b6c369800006cf5e0" translate="yes" xml:space="preserve">
          <source>Rejected requests</source>
          <target state="translated">거부 된 요청</target>
        </trans-unit>
        <trans-unit id="c7a3e682e46e2711bab1cb0df359280bad9695e1" translate="yes" xml:space="preserve">
          <source>Related fields</source>
          <target state="translated">관련 분야</target>
        </trans-unit>
        <trans-unit id="b119479f585d76d63b7140c5fdf6ecc37026fd0f" translate="yes" xml:space="preserve">
          <source>Related managers support field lookups as well. The API automatically follows relationships as far as you need. Use double underscores to separate relationships. This works as many levels deep as you want. There&amp;rsquo;s no limit. For example:</source>
          <target state="translated">관련 관리자도 필드 조회를 지원합니다. API는 필요한 한 자동으로 관계를 따릅니다. 이중 밑줄을 사용하여 관계를 분리하십시오. 이것은 당신이 원하는만큼 많은 수준에서 작동합니다. 제한이 없습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2e9a5d07ff63a1e4d3ac3e13ff70657fe596c34" translate="yes" xml:space="preserve">
          <source>Related objects</source>
          <target state="translated">관련 객체</target>
        </trans-unit>
        <trans-unit id="ea791d82ad3c066aab672ce1c828d7c43a2d611a" translate="yes" xml:space="preserve">
          <source>Related objects can be added, removed, or created with the field&amp;rsquo;s &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager&quot;&gt;&lt;code&gt;RelatedManager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">필드의 &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager&quot;&gt; &lt;code&gt;RelatedManager&lt;/code&gt; 를&lt;/a&gt; 사용하여 관련 객체를 추가, 제거 또는 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68f78f018ff04fc34d87112505d3493ceee5bc2d" translate="yes" xml:space="preserve">
          <source>Related objects reference</source>
          <target state="translated">관련 객체 참조</target>
        </trans-unit>
        <trans-unit id="7ec56d8720a6c99c9f90e1af0562c7c93797fbe2" translate="yes" xml:space="preserve">
          <source>Relation sets can be cleared:</source>
          <target state="translated">관계 세트를 지울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="647f7b787282a018597eeb618e28696c2e5a1bf5" translate="yes" xml:space="preserve">
          <source>Relation sets can be set:</source>
          <target state="translated">관계 세트를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f37e30ad51df52be939ec9bc920e5d0851e4bf2" translate="yes" xml:space="preserve">
          <source>Relations between your models and &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; can also be used to enable &amp;ldquo;generic&amp;rdquo; relationships between an instance of one of your models and instances of any model you have installed.</source>
          <target state="translated">모델과 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 간의 관계를 사용하여 모델 중 하나의 인스턴스와 설치 한 모델의 인스턴스간에 &quot;일반적인&quot;관계를 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7f91febf44bd093f21d7a1ef8ac0c2a27a3ed8f" translate="yes" xml:space="preserve">
          <source>Relationship fields</source>
          <target state="translated">관계 분야</target>
        </trans-unit>
        <trans-unit id="229981dd1dc44fcc3bf72493583bb63fa236cecf" translate="yes" xml:space="preserve">
          <source>Relationships</source>
          <target state="translated">Relationships</target>
        </trans-unit>
        <trans-unit id="d4c57b638c2a82c2ee8a3d3c322f5a6d24592f07" translate="yes" xml:space="preserve">
          <source>Relationships defined this way on &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract models&lt;/a&gt; are resolved when the model is subclassed as a concrete model and are not relative to the abstract model&amp;rsquo;s &lt;code&gt;app_label&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;추상 모델&lt;/a&gt; 에서이 방법으로 정의 된 관계 는 모델이 구체적 모델로 서브 클래 싱되고 추상 모델의 &lt;code&gt;app_label&lt;/code&gt; 과 관련이없는 경우 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="7a1d7be2174dcdbe8837f3234b11454daf6c4b0e" translate="yes" xml:space="preserve">
          <source>Releases savepoint &lt;code&gt;sid&lt;/code&gt;. The changes performed since the savepoint was created become part of the transaction.</source>
          <target state="translated">세이브 포인트 &lt;code&gt;sid&lt;/code&gt; 를 해제 합니다. 세이브 포인트가 작성된 이후 수행 된 변경 사항은 트랜잭션의 일부가됩니다.</target>
        </trans-unit>
        <trans-unit id="130a2ff9b0b315a79408d3fa4b84253fcd9e7d3f" translate="yes" xml:space="preserve">
          <source>Reload &lt;code&gt;http://localhost:8000/polls/&lt;/code&gt; and you should see that the question links are green (Django style!) which means that your stylesheet was properly loaded.</source>
          <target state="translated">&lt;code&gt;http://localhost:8000/polls/&lt;/code&gt; 다시로드 하면 질문 링크가 녹색 (장고 스타일!)임을 알 수 있습니다. 이는 스타일 시트가 올바르게로드되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="24ec2643661160eb82db76840c96c374ea9d6b7d" translate="yes" xml:space="preserve">
          <source>Reload &lt;code&gt;http://localhost:8000/polls/&lt;/code&gt; and you should see the background loaded in the top left of the screen.</source>
          <target state="translated">&lt;code&gt;http://localhost:8000/polls/&lt;/code&gt; 다시 로드하면 화면 왼쪽 상단에 배경이로드 된 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed16c1e4ce77f729e040f36fb0370f8e7223bc87" translate="yes" xml:space="preserve">
          <source>Remember that the conditions are evaluated in order, so in the above example we get the correct result even though the second condition matches both Jane Doe and Jack Black. This works just like an &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#elif&quot;&gt;&lt;code&gt;elif&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#else&quot;&gt;&lt;code&gt;else&lt;/code&gt;&lt;/a&gt; statement in &lt;code&gt;Python&lt;/code&gt;.</source>
          <target state="translated">조건은 순서대로 평가되므로 위의 예에서는 두 번째 조건이 Jane Doe 및 Jack Black과 모두 일치하더라도 올바른 결과를 얻습니다. 이것은 단지처럼 작동 &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; ... &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#elif&quot;&gt; &lt;code&gt;elif&lt;/code&gt; &lt;/a&gt; ... &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#else&quot;&gt; &lt;code&gt;else&lt;/code&gt; &lt;/a&gt; 에 문 &lt;code&gt;Python&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04bb2ce82e24290d61cadc024c3a3401217064aa" translate="yes" xml:space="preserve">
          <source>Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server.</source>
          <target state="translated">요구 사항에 따라 속도 나 메모리 또는 둘 다에 대해 최적화하고있을 수 있습니다. 때로는 하나를 최적화하는 것이 다른 것에 해를 끼치지만 때로는 서로를 도울 것입니다. 또한 데이터베이스 프로세스가 수행하는 작업은 Python 프로세스에서 수행하는 동일한 작업량과 동일한 비용이 아닐 수 있습니다. 우선 순위가 무엇인지, 저울이 어디에 있어야하는지 결정하고, 필요에 따라 이들 모두를 프로파일 링하는 것은 애플리케이션과 서버에 따라 달라집니다.</target>
        </trans-unit>
        <trans-unit id="c07a82f1b611e9c4dee18b82042ae112b0479249" translate="yes" xml:space="preserve">
          <source>Remember that you&amp;rsquo;re allowed to change this list of arguments at any time, so getting the API right on the first try isn&amp;rsquo;t necessary.</source>
          <target state="translated">언제든지이 인수 목록을 변경할 수 있으므로 첫 번째 시도에서 API를 가져 오는 것이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ca8a8e67e6bbe0350c124fb23567f9488608eb7c" translate="yes" xml:space="preserve">
          <source>Remember that, as always with &lt;code&gt;QuerySets&lt;/code&gt;, any subsequent chained methods which imply a different database query will ignore previously cached results, and retrieve data using a fresh database query. So, if you write the following:</source>
          <target state="translated">&lt;code&gt;QuerySets&lt;/code&gt; 에서 항상 그렇듯이 다른 데이터베이스 쿼리를 암시하는 후속 체인 메소드는 이전에 캐시 된 결과를 무시하고 새로운 데이터베이스 쿼리를 사용하여 데이터를 검색합니다. 따라서 다음을 작성하면</target>
        </trans-unit>
        <trans-unit id="0648ad4c810dd53994bf04bf0125b62b9faf05e4" translate="yes" xml:space="preserve">
          <source>Remember, when we wrote the link to a question in the &lt;code&gt;polls/index.html&lt;/code&gt; template, the link was partially hardcoded like this:</source>
          <target state="translated">&lt;code&gt;polls/index.html&lt;/code&gt; 템플릿에 질문에 대한 링크를 작성할 때 링크는 부분적으로 다음과 같이 하드 코딩되었습니다.</target>
        </trans-unit>
        <trans-unit id="5135e0a935e58bed79364ff26f03ec7ac7319276" translate="yes" xml:space="preserve">
          <source>Remove in bulk</source>
          <target state="translated">대량으로 제거</target>
        </trans-unit>
        <trans-unit id="45f84bb089770ecd1f5d32438c6d4d9aab68d990" translate="yes" xml:space="preserve">
          <source>Remove the &lt;code&gt;register()&lt;/code&gt; call for the &lt;code&gt;Choice&lt;/code&gt; model. Then, edit the &lt;code&gt;Question&lt;/code&gt; registration code to read:</source>
          <target state="translated">&lt;code&gt;Choice&lt;/code&gt; 모델에 대한 &lt;code&gt;register()&lt;/code&gt; 호출을 제거하십시오 . 그런 다음 &lt;code&gt;Question&lt;/code&gt; 등록 코드를 편집하여 다음 을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="3eeb5c1e65e4d92fb1c5f089a45d318674fcb9b1" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;constraint&lt;/code&gt; from &lt;code&gt;model&lt;/code&gt;&amp;rsquo;s table.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; 테이블 에서 &lt;code&gt;constraint&lt;/code&gt; 을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="768dc339cc5eead92975d666b5fa8824ffd11f06" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;model&lt;/code&gt;&amp;rsquo;s table.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; 표 에서 &lt;code&gt;index&lt;/code&gt; 을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="583cefeeb9162d5d5d6db19d9b31c527f2b06ae4" translate="yes" xml:space="preserve">
          <source>Removes a field from a model.</source>
          <target state="translated">모델에서 필드를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="e9b0c05b3ca9657894ffa84e94aaa3cfabb169ca" translate="yes" xml:space="preserve">
          <source>Removes all data from the database and re-executes any post-synchronization handlers. The table of which migrations have been applied is not cleared.</source>
          <target state="translated">데이터베이스에서 모든 데이터를 제거하고 동기화 후 처리기를 다시 실행합니다. 마이그레이션이 적용된 테이블은 지워지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c27d007db1fb7616b6f48bae7b79d7185c690cd" translate="yes" xml:space="preserve">
          <source>Removes all objects from the related object set.</source>
          <target state="translated">관련 객체 세트에서 모든 객체를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="73e76021d47b3d0e9fa33e9e37b51a7ff2945eba" translate="yes" xml:space="preserve">
          <source>Removes all objects from the related object set:</source>
          <target state="translated">관련 객체 세트에서 모든 객체를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="dc347d2171f0c6653163f4320aab80c390f59de1" translate="yes" xml:space="preserve">
          <source>Removes all values of arg from the given string.</source>
          <target state="translated">주어진 문자열에서 arg의 모든 값을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="2ef1450bb558a69cdedac1828f44599b75d1a1b6" translate="yes" xml:space="preserve">
          <source>Removes an arbitrary member of the dictionary (since there&amp;rsquo;s no concept of ordering), and returns a two value tuple containing the key and a list of all values for the key. Raises &lt;code&gt;KeyError&lt;/code&gt; when called on an empty dictionary. For example:</source>
          <target state="translated">순서의 개념이 없기 때문에 사전의 임의의 멤버를 제거하고 키와 키의 모든 값 목록을 포함하는 두 개의 값 튜플을 반환합니다. 발생시킵니다 &lt;code&gt;KeyError&lt;/code&gt; 를를 빈 사전에 전화했을 때. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9f1f751adff5eb905b32cb9ceefa88d716e210a1" translate="yes" xml:space="preserve">
          <source>Removes expired sessions from the session store. This class method is called by &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">세션 저장소에서 만료 된 세션을 제거합니다. 이 클래스 메소드는 &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; 에&lt;/a&gt; 의해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="11607e9f71cebcb1712d012372fa17813dd472d1" translate="yes" xml:space="preserve">
          <source>Removes the column(s) representing the field from the model&amp;rsquo;s table, along with any unique constraints, foreign key constraints, or indexes caused by that field.</source>
          <target state="translated">모델의 테이블에서 필드를 나타내는 열을 고유 제약 조건, 외래 키 제약 조건 또는 해당 필드로 인한 인덱스와 함께 제거합니다.</target>
        </trans-unit>
        <trans-unit id="b8e284ffdd0024c1c64a5b25462ced99f4bb8969" translate="yes" xml:space="preserve">
          <source>Removes the constraint named &lt;code&gt;name&lt;/code&gt; from the model with &lt;code&gt;model_name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;model_name&lt;/code&gt; 모델에서 &lt;code&gt;name&lt;/code&gt; 이라는 제한 조건을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="71868f049dcfd4d937b3560794a32115cd1d6841" translate="yes" xml:space="preserve">
          <source>Removes the file from the model instance and deletes the underlying file. If &lt;code&gt;save&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method will be called once the file is deleted.</source>
          <target state="translated">모델 인스턴스에서 파일을 제거하고 기본 파일을 삭제합니다. 경우 &lt;code&gt;save&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; ,이 모델의 &lt;code&gt;save()&lt;/code&gt; 파일이 삭제되면 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="acab399eaeb08911cc2ded336df8defe265be5f6" translate="yes" xml:space="preserve">
          <source>Removes the index named &lt;code&gt;name&lt;/code&gt; from the model with &lt;code&gt;model_name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;model_name&lt;/code&gt; 모델에서 &lt;code&gt;name&lt;/code&gt; 이라는 색인을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="fa83a3e51e27351289cefaaf6295f73f0aab2454" translate="yes" xml:space="preserve">
          <source>Removes the specified model objects from the related object set.</source>
          <target state="translated">관련 객체 세트에서 지정된 모델 객체를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="6610881a20538353e36867a2ed9aa1f28fc5e12f" translate="yes" xml:space="preserve">
          <source>Removes the specified model objects from the related object set:</source>
          <target state="translated">관련 객체 세트에서 지정된 모델 객체를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="1961a8967f8b64321eb56c162195eb92971034bc" translate="yes" xml:space="preserve">
          <source>Removes whitespace between HTML tags. This includes tab characters and newlines.</source>
          <target state="translated">HTML 태그 사이의 공백을 제거합니다. 여기에는 탭 문자와 줄 바꿈이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b2d30e033b72a8383af6db3ec7bd4efc44e60ca6" translate="yes" xml:space="preserve">
          <source>Removing &lt;code&gt;Publication&lt;/code&gt; from an &lt;code&gt;Article&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; 에서 &lt;code&gt;Publication&lt;/code&gt; 제거하기 :</target>
        </trans-unit>
        <trans-unit id="2e3d5a442a032797ad5dab1a2ddaacf74d04f5e2" translate="yes" xml:space="preserve">
          <source>Removing characters that aren&amp;rsquo;t alphanumerics, underscores, hyphens, or whitespace.</source>
          <target state="translated">영숫자, 밑줄, 하이픈 또는 공백이 아닌 문자를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="a30eddecb1f5677d80a03c9dfba5fd63a8f10e58" translate="yes" xml:space="preserve">
          <source>Removing hardcoded URLs in templates</source>
          <target state="translated">템플릿에서 하드 코딩 된 URL 제거</target>
        </trans-unit>
        <trans-unit id="b672adfc502a3a7bc8c59d0116b92750211923a0" translate="yes" xml:space="preserve">
          <source>Removing leading and trailing whitespace.</source>
          <target state="translated">선행 및 후행 공백 제거</target>
        </trans-unit>
        <trans-unit id="032551ae5664470a7a647a557513f321a7dc28be" translate="yes" xml:space="preserve">
          <source>Removing the &lt;code&gt;Referer&lt;/code&gt; header</source>
          <target state="translated">&lt;code&gt;Referer&lt;/code&gt; 헤더 제거</target>
        </trans-unit>
        <trans-unit id="824a4cd9f9aa4c63a483c0b59f733da307872142" translate="yes" xml:space="preserve">
          <source>Removing the &lt;code&gt;replaces&lt;/code&gt; attribute in the &lt;code&gt;Migration&lt;/code&gt; class of the squashed migration (this is how Django tells that it is a squashed migration).</source>
          <target state="translated">스쿼시 된 마이그레이션 의 &lt;code&gt;Migration&lt;/code&gt; 클래스 에서 &lt;code&gt;replaces&lt;/code&gt; 속성 제거 (이것은 Django가 스쿼시 된 마이그레이션임을 알려주는 방법입니다).</target>
        </trans-unit>
        <trans-unit id="e16c8c695b3ed89e3634a55288553edf77dd5c1e" translate="yes" xml:space="preserve">
          <source>Renames the model from an old name to a new one.</source>
          <target state="translated">모델을 이전 이름에서 새 이름으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="a04e0c7b4fa4bdb80660ca557601245947ce112f" translate="yes" xml:space="preserve">
          <source>Renames the model&amp;rsquo;s table from &lt;code&gt;old_db_table&lt;/code&gt; to &lt;code&gt;new_db_table&lt;/code&gt;.</source>
          <target state="translated">에서 모델의 테이블의 이름을 변경 &lt;code&gt;old_db_table&lt;/code&gt; 에 &lt;code&gt;new_db_table&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25cb124c37629d3c4a84cfbc765066350d2fe0e0" translate="yes" xml:space="preserve">
          <source>Renaming the new table to match the original name</source>
          <target state="translated">원래 이름과 일치하도록 새 테이블 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="98e1a7f8c318c94539687d44fce9c7991dceee3e" translate="yes" xml:space="preserve">
          <source>Rendering a context</source>
          <target state="translated">컨텍스트 렌더링</target>
        </trans-unit>
        <trans-unit id="027bef23921d06a2497849839ca801dd4c87d805" translate="yes" xml:space="preserve">
          <source>Rendering a form in a template involves nearly the same work as rendering any other kind of object, but there are some key differences.</source>
          <target state="translated">템플릿에서 양식을 렌더링하는 것은 다른 종류의 객체를 렌더링하는 것과 거의 동일한 작업을 수행하지만 몇 가지 중요한 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="136000babdea15be499c3f212dfc94b6c5f4f283" translate="yes" xml:space="preserve">
          <source>Rendering an attractive and easy-to-use Web form requires more than just HTML - it also requires CSS stylesheets, and if you want to use fancy &amp;ldquo;Web2.0&amp;rdquo; widgets, you may also need to include some JavaScript on each page. The exact combination of CSS and JavaScript that is required for any given page will depend upon the widgets that are in use on that page.</source>
          <target state="translated">매력적이고 사용하기 쉬운 웹 양식을 렌더링하려면 HTML 이상의 것이 필요합니다. CSS 스타일 시트도 필요하며 멋진 &quot;Web2.0&quot;위젯을 사용하려면 각 페이지에 JavaScript를 포함해야합니다. 특정 페이지에 필요한 CSS와 JavaScript의 정확한 조합은 해당 페이지에서 사용중인 위젯에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="5399393e62334e4b0ed76b7b53146225e05fee5d" translate="yes" xml:space="preserve">
          <source>Rendering fields manually</source>
          <target state="translated">필드를 수동으로 렌더링</target>
        </trans-unit>
        <trans-unit id="5c5caac98fc85fed419cf5423872151e43434e24" translate="yes" xml:space="preserve">
          <source>Rendering form error messages</source>
          <target state="translated">렌더링 양식 오류 메시지</target>
        </trans-unit>
        <trans-unit id="7905759ec4065d91065c48b72c65fe38138b580c" translate="yes" xml:space="preserve">
          <source>Renders a given template, with the context containing parameters captured in the URL.</source>
          <target state="translated">URL에서 캡처 된 매개 변수를 포함하는 컨텍스트를 사용하여 지정된 템플리트를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="ae753c436c489717d9fd3197ab51f2ea36d6fcdd" translate="yes" xml:space="preserve">
          <source>Renders a response using a context created with &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.edit.FormMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt; 작성된 컨텍스트를 사용하여 응답을 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="16592f143c9b46e336ff00978991b5c9912c1755" translate="yes" xml:space="preserve">
          <source>Renders a response, providing the invalid form as context.</source>
          <target state="translated">유효하지 않은 양식을 컨텍스트로 제공하여 응답을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="90af18eef3de255327d413547ce0410f46029052" translate="yes" xml:space="preserve">
          <source>Renders a widget to HTML using the given renderer. If &lt;code&gt;renderer&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the renderer from the &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt;&lt;code&gt;FORM_RENDERER&lt;/code&gt;&lt;/a&gt; setting is used.</source>
          <target state="translated">주어진 렌더러를 사용하여 위젯을 HTML로 렌더링합니다. 경우 &lt;code&gt;renderer&lt;/code&gt; 없는 &lt;code&gt;None&lt;/code&gt; 의에서 렌더러 &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt; &lt;code&gt;FORM_RENDERER&lt;/code&gt; 의&lt;/a&gt; 설정이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fa9134b57ad3286fb14a0ccb98988a3252c1b2fb" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;checkbox&quot; ...&amp;gt;&lt;/code&gt; 로 렌더링</target>
        </trans-unit>
        <trans-unit id="f82973b7ac32fa2a8e47287cdd06b9580e0ed1a1" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;email&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;email&quot; ...&amp;gt;&lt;/code&gt; 렌더링</target>
        </trans-unit>
        <trans-unit id="f1e48ba21244665c1f446a827bbea0fa4ecce90e" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;file&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;file&quot; ...&amp;gt;&lt;/code&gt; 렌더링</target>
        </trans-unit>
        <trans-unit id="55344549fc6b061a5279a22c7ca2abed4af75d18" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;file&quot; ...&amp;gt;&lt;/code&gt; with an additional checkbox input to clear the field&amp;rsquo;s value, if the field is not required and has initial data.</source>
          <target state="translated">필드가 필요하지 않고 초기 데이터가있는 경우 필드 값을 지우는 추가 확인란 입력으로 &lt;code&gt;&amp;lt;input type=&quot;file&quot; ...&amp;gt;&lt;/code&gt; 으로 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="84ef164d5bff9e43c06e0c2c1cfca531dfab120d" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;hidden&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;hidden&quot; ...&amp;gt;&lt;/code&gt; 렌더링</target>
        </trans-unit>
        <trans-unit id="ffba107edff202d0502dea7e7ec4ed96f8c63068" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;number&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;number&quot; ...&amp;gt;&lt;/code&gt; 로 렌더링</target>
        </trans-unit>
        <trans-unit id="dbad1dca40d839cee64f9796837dfc793ce00eb2" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;password&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;password&quot; ...&amp;gt;&lt;/code&gt; 로 렌더링</target>
        </trans-unit>
        <trans-unit id="9fab9338cafc4508aa66ee4ea6af809ec0a44447" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;text&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;text&quot; ...&amp;gt;&lt;/code&gt; 로 렌더링</target>
        </trans-unit>
        <trans-unit id="ba0c7ef1b840a7c4e2b94ce7f468b5e525716480" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;input type=&quot;url&quot; ...&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;input type=&quot;url&quot; ...&amp;gt;&lt;/code&gt; 렌더링</target>
        </trans-unit>
        <trans-unit id="3d03b2cdd83d03a4a5c974cfc3adf2c3e8839b12" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;select&amp;gt;&amp;lt;option ...&amp;gt;...&amp;lt;/select&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;select&amp;gt;&amp;lt;option ...&amp;gt;...&amp;lt;/select&amp;gt;&lt;/code&gt; 으로 렌더링</target>
        </trans-unit>
        <trans-unit id="2d4c7a4636bfad48ebaf7226ecf51f860c337c36" translate="yes" xml:space="preserve">
          <source>Renders as: &lt;code&gt;&amp;lt;textarea&amp;gt;...&amp;lt;/textarea&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;textarea&amp;gt;...&amp;lt;/textarea&amp;gt;&lt;/code&gt; 로 렌더링</target>
        </trans-unit>
        <trans-unit id="fbeba578a21f5b5a70755568096ad08238d25355" translate="yes" xml:space="preserve">
          <source>Renders as: multiple &lt;code&gt;&amp;lt;input type=&quot;hidden&quot; ...&amp;gt;&lt;/code&gt; tags</source>
          <target state="translated">여러 개의 &lt;code&gt;&amp;lt;input type=&quot;hidden&quot; ...&amp;gt;&lt;/code&gt; 태그 로 렌더링</target>
        </trans-unit>
        <trans-unit id="e0222918833e3787b3c65b0c621307ff6076b249" translate="yes" xml:space="preserve">
          <source>Renders the field by rendering the passed widget, adding any HTML attributes passed as &lt;code&gt;attrs&lt;/code&gt;. If no widget is specified, then the field&amp;rsquo;s default widget will be used.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 로 전달 된 HTML 속성을 추가하여 전달 된 위젯을 렌더링하여 필드를 렌더링합니다 . 위젯을 지정하지 않으면 필드의 기본 위젯이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a8614be2b1273e22dcae1bc31f1609ad35bee133" translate="yes" xml:space="preserve">
          <source>Renders this template with a given context.</source>
          <target state="translated">주어진 컨텍스트로이 템플릿을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="9271a15cfc5fcc700b391cb86963e91246c1a9e8" translate="yes" xml:space="preserve">
          <source>Replace the set of related objects.</source>
          <target state="translated">관련 개체 세트를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="2bc74cf3f9dbe78eaad4942681935fa66409f0dd" translate="yes" xml:space="preserve">
          <source>Replace the set of related objects:</source>
          <target state="translated">관련 객체 세트를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="6e0d73009aa12f5c9ccad864726c2702b9ce217c" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of &lt;code&gt;text&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt; in &lt;code&gt;expression&lt;/code&gt;. The default replacement text is the empty string. The arguments to the function are case-sensitive.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 에서 모든 &lt;code&gt;text&lt;/code&gt; 를 &lt;code&gt;replacement&lt;/code&gt; 바꿉니다 . 기본 대체 텍스트는 빈 문자열입니다. 함수에 대한 인수는 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="4f672cf5e8b9f8a1ecfc7b749bdade5fc14ba9fd" translate="yes" xml:space="preserve">
          <source>Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;) and a new line followed by a blank line becomes a paragraph break (&lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">일반 텍스트의 줄 바꿈을 적절한 HTML로 바꿉니다. 단일 줄 바꿈은 HTML 줄 바꿈 ( &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; )이되고 새 줄 다음에 빈 줄은 단락 나누기 ( &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; )가됩니다.</target>
        </trans-unit>
        <trans-unit id="d7de53ab13c0395d4a7babbd2e27a410a6cb4d2a" translate="yes" xml:space="preserve">
          <source>Replacing any whitespace or repeated dashes with single dashes.</source>
          <target state="translated">공백 또는 반복 대시를 단일 대시로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="9da41ef4783943cc20f027ff0b080b869ef03892" translate="yes" xml:space="preserve">
          <source>Report bugs with Django in our &lt;a href=&quot;https://code.djangoproject.com/&quot;&gt;ticket tracker&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://code.djangoproject.com/&quot;&gt;티켓 추적기&lt;/a&gt; 에서 Django 관련 버그를 신고하십시오 .</target>
        </trans-unit>
        <trans-unit id="cabe8b7cbd36261e537bd2f96894acc0ba19e91e" translate="yes" xml:space="preserve">
          <source>ReportLab is not thread-safe. Some of our users have reported odd issues with building PDF-generating Django views that are accessed by many people at the same time.</source>
          <target state="translated">ReportLab은 스레드로부터 안전하지 않습니다. 일부 사용자가 동시에 많은 사람들이 액세스하는 PDF 생성 Django보기를 빌드 할 때 이상한 문제가보고되었습니다.</target>
        </trans-unit>
        <trans-unit id="454bbc05efdd703764976d8e54a1b14b371e6f97" translate="yes" xml:space="preserve">
          <source>Representation of the model, returns &lt;code&gt;app_label.model_name&lt;/code&gt;, e.g. &lt;code&gt;'polls.question'&lt;/code&gt;.</source>
          <target state="translated">모델을 &lt;code&gt;'polls.question'&lt;/code&gt; &lt;code&gt;app_label.model_name&lt;/code&gt; 을 리턴합니다 ( 예 : 'polls.question') .</target>
        </trans-unit>
        <trans-unit id="76e8edfcf5f55bad8b5c8cad8279d89aa02200a9" translate="yes" xml:space="preserve">
          <source>Representation of the object, returns &lt;code&gt;app_label.object_name&lt;/code&gt;, e.g. &lt;code&gt;'polls.Question'&lt;/code&gt;.</source>
          <target state="translated">객체를 나타내는 &lt;code&gt;app_label.object_name&lt;/code&gt; 을 반환합니다 ( 예 : &lt;code&gt;'polls.Question'&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="fe9e3232b59e4eda049a9874e7389108e2396b58" translate="yes" xml:space="preserve">
          <source>Represents a coordinate system transform. It is initialized with two &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt;, representing the source and target coordinate systems, respectively. These objects should be used when performing the same coordinate transformation repeatedly on different geometries:</source>
          <target state="translated">좌표계 변환을 나타냅니다. 소스 및 대상 좌표계를 각각 나타내는 두 개의 &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 로 초기화 됩니다. 다른 객체에서 동일한 좌표 변환을 반복적으로 수행 할 때이 객체를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="912bd34dfdba19e2c0c74db8804d0b099f03785e" translate="yes" xml:space="preserve">
          <source>Represents an OGR Envelope structure that contains the minimum and maximum X, Y coordinates for a rectangle bounding box. The naming of the variables is compatible with the OGR Envelope C structure.</source>
          <target state="translated">사각형 경계 상자의 최소 및 최대 X, Y 좌표를 포함하는 OGR 봉투 구조를 나타냅니다. 변수의 이름은 OGR Envelope C 구조와 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="f6eaf1b4ae6a6b72685a059f396297ca22755171" translate="yes" xml:space="preserve">
          <source>Represents an RSS enclosure</source>
          <target state="translated">RSS 인클로저를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="6db08503ac83e133821e3bcbd14353d8ec92d4c5" translate="yes" xml:space="preserve">
          <source>Represents the name of a language. Browsers send the names of the languages they accept in the &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header using this format. Examples: &lt;code&gt;it&lt;/code&gt;, &lt;code&gt;de-at&lt;/code&gt;, &lt;code&gt;es&lt;/code&gt;, &lt;code&gt;pt-br&lt;/code&gt;. Language codes are generally represented in lowercase, but the HTTP &lt;code&gt;Accept-Language&lt;/code&gt; header is case-insensitive. The separator is a dash.</source>
          <target state="translated">언어의 이름을 나타냅니다. 브라우저는 이 형식을 사용하여 &lt;code&gt;Accept-Language&lt;/code&gt; HTTP 헤더 에서 허용 하는 언어 이름을 보냅니다 . 예 : &lt;code&gt;it&lt;/code&gt; , &lt;code&gt;de-at&lt;/code&gt; , &lt;code&gt;es&lt;/code&gt; , &lt;code&gt;pt-br&lt;/code&gt; . 언어 코드는 일반적으로 소문자로 표시되지만 HTTP &lt;code&gt;Accept-Language&lt;/code&gt; 헤더는 대소 문자를 구분하지 않습니다. 구분 기호는 대시입니다.</target>
        </trans-unit>
        <trans-unit id="0da6b0616d139307f3ef0f7c30d257b1b3196c91" translate="yes" xml:space="preserve">
          <source>Request and response objects</source>
          <target state="translated">요청 및 응답 객체</target>
        </trans-unit>
        <trans-unit id="fc1c72bff89a681d6557489cf4844ca376896d28" translate="yes" xml:space="preserve">
          <source>Request/response signals</source>
          <target state="translated">요청 / 응답 신호</target>
        </trans-unit>
        <trans-unit id="189351e8eaeefafdc539f6bd7e3fb3418346b9fb" translate="yes" xml:space="preserve">
          <source>Requests beginning with &lt;code&gt;/secret/&lt;/code&gt; will now require a user to authenticate.</source>
          <target state="translated">&lt;code&gt;/secret/&lt;/code&gt; 시작하는 요청 은 이제 사용자 인증을 요구합니다.</target>
        </trans-unit>
        <trans-unit id="1b5f5cf68c3ad7b4e7d378f07c1f993b95fec1fb" translate="yes" xml:space="preserve">
          <source>Requests for &lt;code&gt;/secret/&lt;/code&gt; will now also require user to be a member of the &amp;ldquo;secret-agents&amp;rdquo; group.</source>
          <target state="translated">&lt;code&gt;/secret/&lt;/code&gt; 대한 요청 은 이제 사용자가&amp;ldquo;secret-agents&amp;rdquo;그룹의 구성원이어야합니다.</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="2a20547ac129608d96c2abd4e71c2c3c752a1a65" translate="yes" xml:space="preserve">
          <source>Required Reading</source>
          <target state="translated">필요한 독서</target>
        </trans-unit>
        <trans-unit id="9373cb02a682b7d98a6af6ab7efc1d309c55e47e" translate="yes" xml:space="preserve">
          <source>Required argument. Needs to be a string.</source>
          <target state="translated">필수 인수. 문자열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="063bc1d47f6d34d8950e45fa10a77dcb9a83430a" translate="yes" xml:space="preserve">
          <source>Required arguments</source>
          <target state="translated">필수 인수</target>
        </trans-unit>
        <trans-unit id="4fd8ecc238687099c308060e8703f3437d058c4b" translate="yes" xml:space="preserve">
          <source>Required keyword arguments are:</source>
          <target state="translated">필수 키워드 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="672ad5346d62dd6eb67f727712f3a58da5a155d2" translate="yes" xml:space="preserve">
          <source>Required methods</source>
          <target state="translated">필요한 방법</target>
        </trans-unit>
        <trans-unit id="92dab952894db35e5f1aa3df870f6e3a7dc59dce" translate="yes" xml:space="preserve">
          <source>Required. 100 characters or fewer. Example: &lt;code&gt;'can_vote'&lt;/code&gt;.</source>
          <target state="translated">필수입니다. 100 자 이하 예 : &lt;code&gt;'can_vote'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae8db7e96a1366fc21d1dd698986d1c2b93fe8b6" translate="yes" xml:space="preserve">
          <source>Required. 150 characters or fewer. Any characters are permitted. Example: &lt;code&gt;'Awesome Users'&lt;/code&gt;.</source>
          <target state="translated">필수입니다. 150 자 이하 모든 문자가 허용됩니다. 예 : &lt;code&gt;'Awesome Users'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49495c2ed09a73a61954db6d00f0d62617ecf621" translate="yes" xml:space="preserve">
          <source>Required. 150 characters or fewer. Usernames may contain alphanumeric, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; characters.</source>
          <target state="translated">필수입니다. 150 자 이하 사용자 이름은 영숫자, &lt;code&gt;_&lt;/code&gt; , &lt;code&gt;@&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; ,를 포함 할 수 있습니다 &lt;code&gt;.&lt;/code&gt; 그리고 &lt;code&gt;-&lt;/code&gt; 문자.</target>
        </trans-unit>
        <trans-unit id="90a597a0bce7f0a7cba1f19322f3893c98ae3f09" translate="yes" xml:space="preserve">
          <source>Required. 255 characters or fewer. Example: &lt;code&gt;'Can vote'&lt;/code&gt;.</source>
          <target state="translated">필수입니다. 255 자 이하 예 : &lt;code&gt;'Can vote'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f57b9b99ec411ac9c3993a29d9bb2c4fd279cc8" translate="yes" xml:space="preserve">
          <source>Required. A hash of, and metadata about, the password. (Django doesn&amp;rsquo;t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the &lt;a href=&quot;../../topics/auth/passwords&quot;&gt;password documentation&lt;/a&gt;.</source>
          <target state="translated">필수입니다. 비밀번호의 해시 및 메타 데이터 (Django는 원시 비밀번호를 저장하지 않습니다.) 원시 비밀번호는 임의로 길 수 있으며 모든 문자를 포함 할 수 있습니다. &lt;a href=&quot;../../topics/auth/passwords&quot;&gt;비밀번호 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7898e9cfac0ed2099777c23c5aedcdf673333f28" translate="yes" xml:space="preserve">
          <source>Required. A list, tuple, &lt;code&gt;QuerySet&lt;/code&gt;, or other sliceable object with a &lt;code&gt;count()&lt;/code&gt; or &lt;code&gt;__len__()&lt;/code&gt; method. For consistent pagination, &lt;code&gt;QuerySet&lt;/code&gt;s should be ordered, e.g. with an &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; clause or with a default &lt;a href=&quot;models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; on the model.</source>
          <target state="translated">필수입니다. &lt;code&gt;count()&lt;/code&gt; 또는 &lt;code&gt;__len__()&lt;/code&gt; 메서드가 있는 목록, 튜플, &lt;code&gt;QuerySet&lt;/code&gt; 또는 기타 슬라이스 가능한 객체입니다 . 일관된 페이지 매김을 위해 &lt;code&gt;QuerySet&lt;/code&gt; 은 &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 절 또는 모델 의 기본 &lt;a href=&quot;models/options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt; 해야합니다.</target>
        </trans-unit>
        <trans-unit id="94811d0096e8b0c7d398bb9f23f7b39e64b05e15" translate="yes" xml:space="preserve">
          <source>Required. A reference to the &lt;code&gt;django_content_type&lt;/code&gt; database table, which contains a record for each installed model.</source>
          <target state="translated">필수입니다. 설치된 각 모델에 대한 레코드를 포함하는 &lt;code&gt;django_content_type&lt;/code&gt; 데이터베이스 테이블에 대한 참조 입니다.</target>
        </trans-unit>
        <trans-unit id="5445ec505863ce23d459709bb104249b07dfae2d" translate="yes" xml:space="preserve">
          <source>Required. The absolute filesystem path to a directory from which this &lt;a href=&quot;#django.db.models.FilePathField&quot;&gt;&lt;code&gt;FilePathField&lt;/code&gt;&lt;/a&gt; should get its choices. Example: &lt;code&gt;&quot;/home/images&quot;&lt;/code&gt;.</source>
          <target state="translated">필수입니다. 이 &lt;a href=&quot;#django.db.models.FilePathField&quot;&gt; &lt;code&gt;FilePathField&lt;/code&gt; &lt;/a&gt; 가 선택해야하는 디렉토리의 절대 파일 시스템 경로 입니다. 예 : &lt;code&gt;&quot;/home/images&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79b14d7e4905d0b352dc758f5c4a8bb7a4a85d40" translate="yes" xml:space="preserve">
          <source>Required. The maximum number of items to include on a page, not including orphans (see the &lt;a href=&quot;#django.core.paginator.Paginator.orphans&quot;&gt;&lt;code&gt;orphans&lt;/code&gt;&lt;/a&gt; optional argument below).</source>
          <target state="translated">필수입니다. 고아를 포함하지 않고 페이지에 포함 할 최대 항목 수입니다 (아래의 &lt;a href=&quot;#django.core.paginator.Paginator.orphans&quot;&gt; &lt;code&gt;orphans&lt;/code&gt; &lt;/a&gt; 선택 인수 참조).</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="01479ee677c5bed4a751195a875379f475cac353" translate="yes" xml:space="preserve">
          <source>Requires &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja2&lt;/a&gt; to be installed:</source>
          <target state="translated">필요 &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja2&lt;/a&gt; 설치하려면 :</target>
        </trans-unit>
        <trans-unit id="7e58f0d21fcebacdc046a1f42d094f5641a1a4d7" translate="yes" xml:space="preserve">
          <source>Requires &lt;a href=&quot;https://jinja.palletsprojects.com/&quot;&gt;Jinja2&lt;/a&gt; to be installed:</source>
          <target state="translated">필요 &lt;a href=&quot;https://jinja.palletsprojects.com/&quot;&gt;Jinja2&lt;/a&gt; 설치하려면 :</target>
        </trans-unit>
        <trans-unit id="6ea2019b402d30d69ea2961444c9aabfa03dd383" translate="yes" xml:space="preserve">
          <source>Requires &lt;code&gt;gettext&lt;/code&gt; 0.19 or newer.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; 0.19 이상이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="61689b4cf61f94a300e95b848e1318780f5da6eb" translate="yes" xml:space="preserve">
          <source>Requires PostGIS.</source>
          <target state="translated">PostGIS가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="31477357aed10831acdc4c0ea9afc4b1767ae2b5" translate="yes" xml:space="preserve">
          <source>Requires SpatiaLite 4.3+</source>
          <target state="translated">SpatiaLite 4.3 이상 필요</target>
        </trans-unit>
        <trans-unit id="05fda19811cc2cbc0b8d6196e7d61758a202c153" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;#auth&quot;&gt;auth&lt;/a&gt; and &lt;a href=&quot;#contenttypes&quot;&gt;contenttypes&lt;/a&gt; contrib packages to be installed.</source>
          <target state="translated">필요 &lt;a href=&quot;#auth&quot;&gt;인증&lt;/a&gt; 및 &lt;a href=&quot;#contenttypes&quot;&gt;contenttypes&lt;/a&gt; 설치 될 수있는 contrib 패키지.</target>
        </trans-unit>
        <trans-unit id="3782dd60524c764b86c32c3f276c579c1518410a" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;#sites&quot;&gt;sites&lt;/a&gt; contrib package to be installed as well.</source>
          <target state="translated">필요합니다 &lt;a href=&quot;#sites&quot;&gt;사이트&lt;/a&gt; 뿐만 아니라 설치 될 수있는 contrib 패키지를.</target>
        </trans-unit>
        <trans-unit id="c94bbd4d18cd346ada4be005be4f2729399e93fe" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/&quot;&gt;Pillow&lt;/a&gt; library.</source>
          <target state="translated">&lt;a href=&quot;https://pillow.readthedocs.io/en/latest/&quot;&gt;베개&lt;/a&gt; 라이브러리가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="2dec7f55dc3f3c93210924451f5e5bd0cb433039" translate="yes" xml:space="preserve">
          <source>Requires the app registry to be fully populated unless the &lt;code&gt;require_ready&lt;/code&gt; argument is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require_ready&lt;/code&gt; 인수가 &lt;code&gt;False&lt;/code&gt; 로 설정되어 있지 않으면 앱 레지스트리가 완전히 채워 져야 합니다.</target>
        </trans-unit>
        <trans-unit id="1c0363dae913924071cb62b890c1d088b5c47599" translate="yes" xml:space="preserve">
          <source>Requires the app registry to be fully populated unless the &lt;code&gt;require_ready&lt;/code&gt; argument is set to &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;require_ready&lt;/code&gt; behaves exactly as in &lt;a href=&quot;#django.apps.apps.get_model&quot;&gt;&lt;code&gt;apps.get_model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;require_ready&lt;/code&gt; 인수가 &lt;code&gt;False&lt;/code&gt; 로 설정되어 있지 않으면 앱 레지스트리가 완전히 채워 져야 합니다. &lt;code&gt;require_ready&lt;/code&gt; 는 &lt;a href=&quot;#django.apps.apps.get_model&quot;&gt; &lt;code&gt;apps.get_model()&lt;/code&gt; &lt;/a&gt; 과 똑같이 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="202974d9ba6aa4b490cf83a204e99d0d3662fdb9" translate="yes" xml:space="preserve">
          <source>Requires the app registry to be fully populated.</source>
          <target state="translated">앱 레지스트리가 완전히 채워 져야합니다.</target>
        </trans-unit>
        <trans-unit id="a0a7a23208ed2ca6b5bcda4a44cb765ab55c5f0e" translate="yes" xml:space="preserve">
          <source>Resets a previous &lt;a href=&quot;#cycle&quot;&gt;cycle&lt;/a&gt; so that it restarts from its first item at its next encounter. Without arguments, &lt;code&gt;{% resetcycle %}&lt;/code&gt; will reset the last &lt;code&gt;{% cycle %}&lt;/code&gt; defined in the template.</source>
          <target state="translated">다음 &lt;a href=&quot;#cycle&quot;&gt;사이클&lt;/a&gt; 에서 첫 번째 항목부터 다시 시작되도록 이전 주기를 재설정합니다 . 인수없이 &lt;code&gt;{% resetcycle %}&lt;/code&gt; 은 ( 는) 템플릿에 정의 된 마지막 &lt;code&gt;{% cycle %}&lt;/code&gt; 을 (를) 재설정합니다 .</target>
        </trans-unit>
        <trans-unit id="c70a410f32fa60ab589188f741673774db14cbfa" translate="yes" xml:space="preserve">
          <source>Resets the counter used to generate unique savepoint IDs.</source>
          <target state="translated">고유 저장 점 ID를 생성하는 데 사용되는 카운터를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="2b56a752feec47aa262bcc7283634671804beeba" translate="yes" xml:space="preserve">
          <source>Resetting the database to a known state at the beginning of each test to ease testing and using the ORM.</source>
          <target state="translated">ORM을 쉽게 테스트하고 사용할 수 있도록 각 테스트 시작시 데이터베이스를 알려진 상태로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="125530f0717509e49abc4243e581e7e7b86fe61c" translate="yes" xml:space="preserve">
          <source>Resolve any deprecation warnings with your current version of Django before continuing the upgrade process.</source>
          <target state="translated">업그레이드 프로세스를 계속하기 전에 현재 버전의 Django에서 사용 중단 경고를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="c2261b50edb72eb78e13028f969cad71ee998c80" translate="yes" xml:space="preserve">
          <source>Resolves the template instance to use for rendering. Accepts a backend-dependent template object (such as those returned by &lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;), the name of a template, or a list of template names.</source>
          <target state="translated">렌더링에 사용할 템플릿 인스턴스를 해결합니다. 백엔드 종속 템플릿 객체 (예 : &lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt; 반환 된 객체 ), 템플릿 이름 또는 템플릿 이름 목록을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="81c30e209ac2a757ff481fd44acf2d0c0d35f091" translate="yes" xml:space="preserve">
          <source>Resolving deprecation warnings</source>
          <target state="translated">지원 중단 경고 해결</target>
        </trans-unit>
        <trans-unit id="a4554ddb33e4f5d0cc8ff3c69c9e14fd701dea6c" translate="yes" xml:space="preserve">
          <source>Responsible for producing the query string and parameters for the expression. The &lt;code&gt;compiler&lt;/code&gt; is an &lt;code&gt;SQLCompiler&lt;/code&gt; object, which has a &lt;code&gt;compile()&lt;/code&gt; method that can be used to compile other expressions. The &lt;code&gt;connection&lt;/code&gt; is the connection used to execute the query.</source>
          <target state="translated">식의 쿼리 문자열 및 매개 변수를 생성합니다. &lt;code&gt;compiler&lt;/code&gt; 이다 &lt;code&gt;SQLCompiler&lt;/code&gt; 의 갖는 객체, &lt;code&gt;compile()&lt;/code&gt; 다른 표현을 컴파일하는 데 사용할 수있는 방법. &lt;code&gt;connection&lt;/code&gt; 쿼리를 실행하는 데 사용되는 연결입니다.</target>
        </trans-unit>
        <trans-unit id="15cda354481fab99d23a71ef74e49c915e603ddd" translate="yes" xml:space="preserve">
          <source>Responsible for returning the list of columns references by this expression. &lt;code&gt;get_group_by_cols()&lt;/code&gt; should be called on any nested expressions. &lt;code&gt;F()&lt;/code&gt; objects, in particular, hold a reference to a column. The &lt;code&gt;alias&lt;/code&gt; parameter will be &lt;code&gt;None&lt;/code&gt; unless the expression has been annotated and is used for grouping.</source>
          <target state="translated">이 표현식에서 참조하는 열 목록을 리턴합니다. 중첩 표현식에서 &lt;code&gt;get_group_by_cols()&lt;/code&gt; 를 호출해야합니다. 특히 &lt;code&gt;F()&lt;/code&gt; 객체는 열에 대한 참조를 보유합니다. &lt;code&gt;alias&lt;/code&gt; 매개 변수는 없을 것 &lt;code&gt;None&lt;/code&gt; 식이 주석되었으며 그룹화를 사용하지 않는.</target>
        </trans-unit>
        <trans-unit id="d16dd54844e73220400176772b3e81df81f1c5bc" translate="yes" xml:space="preserve">
          <source>Restaurant.objects.all() returns the Restaurants, not the Places. Note that there are two restaurants - Ace Hardware the Restaurant was created in the call to r.place = p2:</source>
          <target state="translated">Restaurant.objects.all ()은 장소가 아닌 레스토랑을 반환합니다. r.place = p2에 대한 호출에서 레스토랑이 생성 된 Ace Hardware라는 Ace 레스토랑이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c986890c5d7176db9450afbdeb5648bfebfdc0aa" translate="yes" xml:space="preserve">
          <source>Restores the pre-test environment.</source>
          <target state="translated">사전 테스트 환경을 복원합니다.</target>
        </trans-unit>
        <trans-unit id="2678185382b6889ba038d7918ae2f5e0aa506742" translate="yes" xml:space="preserve">
          <source>Restrictions on PostgreSQL</source>
          <target state="translated">PostgreSQL에 대한 제한</target>
        </trans-unit>
        <trans-unit id="b5a81964500ab947d9006dffa252591003edf269" translate="yes" xml:space="preserve">
          <source>Restrictions on SQLite</source>
          <target state="translated">SQLite에 대한 제한</target>
        </trans-unit>
        <trans-unit id="3f5e25c425d8bb83db2e1872ce15e7f20ecba5e3" translate="yes" xml:space="preserve">
          <source>Restrictions on operators.</source>
          <target state="translated">운영자에 대한 제한.</target>
        </trans-unit>
        <trans-unit id="2dddb9e7eacbe3771905f0ade00ac4e71b37ba20" translate="yes" xml:space="preserve">
          <source>Result from &lt;code&gt;flatten()&lt;/code&gt; can be useful in unit tests to compare &lt;code&gt;Context&lt;/code&gt; against &lt;code&gt;dict&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;flatten()&lt;/code&gt; 결과 는 단위 테스트에서 &lt;code&gt;Context&lt;/code&gt; 와 &lt;code&gt;dict&lt;/code&gt; 를 비교하는 데 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d34039137848b54504eb0a3fa43cc38fc03285b4" translate="yes" xml:space="preserve">
          <source>Retrieve a single field instance of a model by name</source>
          <target state="translated">이름으로 모델의 단일 필드 인스턴스 검색</target>
        </trans-unit>
        <trans-unit id="cac5ade0b4280c04f07f433adb98aa53f8667b29" translate="yes" xml:space="preserve">
          <source>Retrieve all field instances of a model</source>
          <target state="translated">모델의 모든 필드 인스턴스 검색</target>
        </trans-unit>
        <trans-unit id="bb15fc8bcba8a9e4be4fad291a5a5da5ee0f7ebd" translate="yes" xml:space="preserve">
          <source>Retrieve everything at once if you know you will need it</source>
          <target state="translated">필요하다고 생각되면 모든 것을 한 번에 검색</target>
        </trans-unit>
        <trans-unit id="5b537573b41579adb8a7e7da0366a045f04c0246" translate="yes" xml:space="preserve">
          <source>Retrieve individual objects using a unique, indexed column</source>
          <target state="translated">고유 한 인덱스 열을 사용하여 개별 객체 검색</target>
        </trans-unit>
        <trans-unit id="a6a045442db3a85b73bb9f0ff19e169c752f3b12" translate="yes" xml:space="preserve">
          <source>Retrieve initial data for the form. By default, returns a copy of &lt;a href=&quot;#django.views.generic.edit.FormMixin.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">양식의 초기 데이터를 검색하십시오. 기본적으로 &lt;a href=&quot;#django.views.generic.edit.FormMixin.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt; 의 사본을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e83b11fb627f0023cfb79c29c2adea58658712b7" translate="yes" xml:space="preserve">
          <source>Retrieve the form class to instantiate. By default &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인스턴스화 할 양식 클래스를 검색하십시오. 기본적으로 &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9235d63e9c2f677e55364cdced160a4f10016b84" translate="yes" xml:space="preserve">
          <source>Retrieve the form class to instantiate. If &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; is provided, that class will be used. Otherwise, a &lt;code&gt;ModelForm&lt;/code&gt; will be instantiated using the model associated with the &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt;, or with the &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt;, depending on which attribute is provided.</source>
          <target state="translated">인스턴스화 할 양식 클래스를 검색하십시오. 경우 &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; 가&lt;/a&gt; 제공되고, 그 클래스가 사용됩니다. 그렇지 않으면, &lt;code&gt;ModelForm&lt;/code&gt; 는 과 관련된 모델을 사용하여 인스턴스화됩니다 &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt; 하거나와 &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 속성이 제공되는에 따라.</target>
        </trans-unit>
        <trans-unit id="5bee26f317df2d0d6e8066d0e7a67fbab7d1d8ef" translate="yes" xml:space="preserve">
          <source>Retrieves a user instance using the contents of the field nominated by &lt;code&gt;USERNAME_FIELD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;USERNAME_FIELD&lt;/code&gt; 가 지정한 필드의 내용을 사용하여 사용자 인스턴스를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="93eb4e34a04c1ba17168d9f9b3967288255bc3ec" translate="yes" xml:space="preserve">
          <source>Retrieves the target object and calls its &lt;code&gt;delete()&lt;/code&gt; method, then redirects to the success URL.</source>
          <target state="translated">대상 객체를 검색하고 &lt;code&gt;delete()&lt;/code&gt; 메서드를 호출 한 다음 성공 URL로 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="04b3e7413ea116dec7cf2aae8bc9af8715d483f9" translate="yes" xml:space="preserve">
          <source>Retrieving a single field instance of a model by name</source>
          <target state="translated">이름으로 모델의 단일 필드 인스턴스 검색</target>
        </trans-unit>
        <trans-unit id="72c7275ac9b596bcc4a9fb3dc7f550ecebd02c9d" translate="yes" xml:space="preserve">
          <source>Retrieving a single object with &lt;code&gt;get()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;get()&lt;/code&gt; 사용하여 단일 객체 검색</target>
        </trans-unit>
        <trans-unit id="f1f0375bda8b13d9b12e176b9110fb61f50ee89f" translate="yes" xml:space="preserve">
          <source>Retrieving all field instances of a model</source>
          <target state="translated">모델의 모든 필드 인스턴스 검색</target>
        </trans-unit>
        <trans-unit id="22df6c96c919d965e91c8e08d508fd3114d1912f" translate="yes" xml:space="preserve">
          <source>Retrieving all objects</source>
          <target state="translated">모든 객체 검색</target>
        </trans-unit>
        <trans-unit id="ee3d1e28b2e16520160eba770204e9d1ade821d9" translate="yes" xml:space="preserve">
          <source>Retrieving objects</source>
          <target state="translated">객체 검색</target>
        </trans-unit>
        <trans-unit id="34e4d6095c00da0d7f4134f9ed3559a7b808d12d" translate="yes" xml:space="preserve">
          <source>Retrieving specific objects with filters</source>
          <target state="translated">필터를 사용하여 특정 객체 검색</target>
        </trans-unit>
        <trans-unit id="020879717215eb03d46aabe78b325c366a9e211f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; from &lt;code&gt;receive_data_chunk&lt;/code&gt; to short-circuit remaining upload handlers from getting this chunk. This is useful if you&amp;rsquo;re storing the uploaded data yourself and don&amp;rsquo;t want future handlers to store a copy of the data.</source>
          <target state="translated">&lt;code&gt;receive_data_chunk&lt;/code&gt; 에서이 청크를 가져 오는 단락 남은 업로드 핸들러 로 &lt;code&gt;None&lt;/code&gt; 을 리턴하십시오 . 업로드 한 데이터를 직접 저장하고 향후 처리기에서 데이터 복사본을 저장하지 않으려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="95f646cd13a1799a748d9cea77d6d0e67a5669c2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; if you want upload handling to continue, or a tuple of &lt;code&gt;(POST, FILES)&lt;/code&gt; if you want to return the new data structures suitable for the request directly.</source>
          <target state="translated">반환 &lt;code&gt;None&lt;/code&gt; 계속 처리 업로드하려는 경우, 또는 튜플 &lt;code&gt;(POST, FILES)&lt;/code&gt; 직접 요청에 적합한 새로운 데이터 구조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b560a1b538008b47e50eacf79eff6943ef3c8355" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if a relation between &lt;code&gt;obj1&lt;/code&gt; and &lt;code&gt;obj2&lt;/code&gt; should be allowed, &lt;code&gt;False&lt;/code&gt; if the relation should be prevented, or &lt;code&gt;None&lt;/code&gt; if the router has no opinion. This is purely a validation operation, used by foreign key and many to many operations to determine if a relation should be allowed between two objects.</source>
          <target state="translated">반환 &lt;code&gt;True&lt;/code&gt; 사이의 관계 경우 &lt;code&gt;obj1&lt;/code&gt; 과 &lt;code&gt;obj2&lt;/code&gt; 보다가 , 허용되어야한다 &lt;code&gt;False&lt;/code&gt; 의 관계를 방지 할 필요가있는 경우, 또는 &lt;code&gt;None&lt;/code&gt; 라우터에는 의견이없는 경우. 이것은 순수하게 유효성 검사 작업이며 외래 키와 다 대다 작업에서 두 ​​개체간에 관계를 허용해야하는지 여부를 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fab978b759c57af0ed40cc56475b7681b7cbc90d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;value&lt;/code&gt; as a string to be rendered in HTML.</source>
          <target state="translated">HTML로 렌더링 할 문자열로 &lt;code&gt;value&lt;/code&gt; 을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="1b5deb61fd1a95ed0ba182d1b91967b9740ff384" translate="yes" xml:space="preserve">
          <source>Return HTML version of exception report.</source>
          <target state="translated">HTML 버전의 예외 보고서를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5f6074419c85f0673cf502ba596e74538dabfb05" translate="yes" xml:space="preserve">
          <source>Return a &lt;code&gt;dict&lt;/code&gt; of attributes to add to each item (&lt;code&gt;item&lt;/code&gt;/&lt;code&gt;entry&lt;/code&gt;) element. The argument, &lt;code&gt;item&lt;/code&gt;, is a dictionary of all the data passed to &lt;code&gt;SyndicationFeed.add_item()&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;dict&lt;/code&gt; 각 항목 (에 추가 할 속성을 &lt;code&gt;item&lt;/code&gt; / &lt;code&gt;entry&lt;/code&gt; ) 요소입니다. 인수 &lt;code&gt;item&lt;/code&gt; 은 &lt;code&gt;SyndicationFeed.add_item()&lt;/code&gt; 전달 된 모든 데이터의 사전입니다 .</target>
        </trans-unit>
        <trans-unit id="630a9ad67b707660094ca2dcb83a172b61ba1ea1" translate="yes" xml:space="preserve">
          <source>Return a &lt;code&gt;dict&lt;/code&gt; of attributes to add to the root feed element (&lt;code&gt;feed&lt;/code&gt;/&lt;code&gt;channel&lt;/code&gt;).</source>
          <target state="translated">반환 &lt;code&gt;dict&lt;/code&gt; 루트 피드 요소 (에 추가 할 속성을 &lt;code&gt;feed&lt;/code&gt; / &lt;code&gt;channel&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4e8b260f3e770ab44f7581128c3be0648454e6e1" translate="yes" xml:space="preserve">
          <source>Return a boolean specifying whether to display the page if no objects are available. If this method returns &lt;code&gt;False&lt;/code&gt; and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">사용 가능한 개체가없는 경우 페이지를 표시할지 여부를 지정하는 부울을 반환합니다. 이 메소드가 &lt;code&gt;False&lt;/code&gt; 를 리턴 하고 사용 가능한 오브젝트가없는 경우보기는 빈 페이지를 표시하는 대신 404를 발생시킵니다. 기본적으로이 값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4fcdd48bc87f30481097cf6d89ba40dc9644f309" translate="yes" xml:space="preserve">
          <source>Return a dictionary containing traceback information.</source>
          <target state="translated">역 추적 정보가 포함 된 사전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1ef096e638a6b41f12723c0d12984666d276a0f8" translate="yes" xml:space="preserve">
          <source>Return extra attributes to place on each item (i.e. item/entry) element.</source>
          <target state="translated">각 항목 (즉, 항목 / 항목) 요소에 배치 할 추가 속성을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fa364780ba6e0f3ea03043b52597cb0fa34b82f2" translate="yes" xml:space="preserve">
          <source>Return extra attributes to place on the root (i.e. feed/channel) element. Called from &lt;code&gt;write()&lt;/code&gt;.</source>
          <target state="translated">루트 (즉, 피드 / 채널) 요소에 배치 할 추가 속성을 반환합니다. &lt;code&gt;write()&lt;/code&gt; 에서 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="8f6c5dae4c7c9dbf5eb5b516561a39f4ac7bd1b1" translate="yes" xml:space="preserve">
          <source>Return plain text version of exception report.</source>
          <target state="translated">예외 보고서의 일반 텍스트 버전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="736ec423104bfd6a8fa13c76be5315392d1defbe" translate="yes" xml:space="preserve">
          <source>Return the EWKB representation of this Geometry as a Python buffer. This is an extension of the WKB specification that includes any SRID value that are a part of this geometry.</source>
          <target state="translated">이 Geometry의 EWKB 표현을 Python 버퍼로 리턴하십시오. 이것은이 지오메트리의 일부인 SRID 값을 포함하는 WKB 사양의 확장입니다.</target>
        </trans-unit>
        <trans-unit id="42af9892ec38501a8937e0af546c1b60b030a53c" translate="yes" xml:space="preserve">
          <source>Return the context variable name that will be used to contain the data that this view is manipulating. If &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.context_object_name&quot;&gt;&lt;code&gt;context_object_name&lt;/code&gt;&lt;/a&gt; is not set, the context name will be constructed from the &lt;code&gt;model_name&lt;/code&gt; of the model that the queryset is composed from. For example, the model &lt;code&gt;Article&lt;/code&gt; would have context object named &lt;code&gt;'article'&lt;/code&gt;.</source>
          <target state="translated">이 뷰가 조작하고있는 데이터를 포함하는데 사용되는 컨텍스트 변수 명을 돌려줍니다. 경우 &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.context_object_name&quot;&gt; &lt;code&gt;context_object_name&lt;/code&gt; 가&lt;/a&gt; 설정되어 있지 않은, 상황에 맞는 이름이 구성 될 것이다 &lt;code&gt;model_name&lt;/code&gt; 의 검색어가에서 구성되어있는 모델. 예를 들어, &lt;code&gt;Article&lt;/code&gt; 모델 에는 &lt;code&gt;'article'&lt;/code&gt; 이라는 컨텍스트 객체가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bbe07d612b5dc8218d6f214b33a0578323ac3ba1" translate="yes" xml:space="preserve">
          <source>Return the context variable name that will be used to contain the list of data that this view is manipulating. If &lt;code&gt;object_list&lt;/code&gt; is a queryset of Django objects and &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.context_object_name&quot;&gt;&lt;code&gt;context_object_name&lt;/code&gt;&lt;/a&gt; is not set, the context name will be the &lt;code&gt;model_name&lt;/code&gt; of the model that the queryset is composed from, with postfix &lt;code&gt;'_list'&lt;/code&gt; appended. For example, the model &lt;code&gt;Article&lt;/code&gt; would have a context object named &lt;code&gt;article_list&lt;/code&gt;.</source>
          <target state="translated">이 뷰가 조작하고있는 데이터의리스트를 포함하는데 사용되는 문맥 변수 명을 돌려줍니다. 경우 &lt;code&gt;object_list&lt;/code&gt; 가 장고 개체와의 검색어 세트이다 &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.context_object_name&quot;&gt; &lt;code&gt;context_object_name&lt;/code&gt; 가&lt;/a&gt; 설정되지는 콘텍스트 이름이 될 것이다 &lt;code&gt;model_name&lt;/code&gt; 의 검색어를 가진 포스트 픽스로부터 구성되는 모델들의 &lt;code&gt;'_list'&lt;/code&gt; , 추가 된. 예를 들어, &lt;code&gt;Article&lt;/code&gt; 모델 에는 &lt;code&gt;article_list&lt;/code&gt; 라는 컨텍스트 객체가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8246453c6e901bbc2e4288b43a47949404da068a" translate="yes" xml:space="preserve">
          <source>Return type:</source>
          <target state="translated">반품 유형 :</target>
        </trans-unit>
        <trans-unit id="07bd1e71618b84c910837df50d00485bde4708dd" translate="yes" xml:space="preserve">
          <source>Return type: &lt;code&gt;float&lt;/code&gt; if input is &lt;code&gt;int&lt;/code&gt;, otherwise same as input field, or &lt;code&gt;output_field&lt;/code&gt; if supplied</source>
          <target state="translated">반환 유형 : 입력이 &lt;code&gt;int&lt;/code&gt; 인 경우 &lt;code&gt;float&lt;/code&gt; , 그렇지 않으면 입력 필드와 같거나 제공된 경우 &lt;code&gt;output_field&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccd2aef4e4644db8d3572d2b60b5474addd70554" translate="yes" xml:space="preserve">
          <source>Return type: &lt;code&gt;int&lt;/code&gt;</source>
          <target state="translated">반환 유형 : &lt;code&gt;int&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a9d70e74c9e14b650dd5b0bfa236e3b694e8efe" translate="yes" xml:space="preserve">
          <source>Return type: same as input field, or &lt;code&gt;output_field&lt;/code&gt; if supplied</source>
          <target state="translated">반환 유형 : 입력 필드와 동일하거나 제공된 경우 &lt;code&gt;output_field&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d144d353038e014eb72a664bb0c163a5363adfe5" translate="yes" xml:space="preserve">
          <source>Returned objects are empty ranges. Can be chained to valid lookups for a &lt;a href=&quot;../../models/fields#django.db.models.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 된 객체는 빈 범위입니다. &lt;a href=&quot;../../models/fields#django.db.models.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; 의&lt;/a&gt; 유효한 조회에 연결될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="06bd16d77e981832b002ce119a0e884cb3b16bde" translate="yes" xml:space="preserve">
          <source>Returned objects have the given lower bound. Can be chained to valid lookups for the base field.</source>
          <target state="translated">반환 된 객체에는 주어진 하한이 있습니다. 기본 필드의 유효한 조회에 연결될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38d253a6b808941a6d5ba1a28edfc923dbb6867c" translate="yes" xml:space="preserve">
          <source>Returned objects have the given upper bound. Can be chained to valid lookups for the base field.</source>
          <target state="translated">반환 된 객체에는 주어진 상한이 있습니다. 기본 필드의 유효한 조회에 연결될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fb366d00a6a439510944a0acbdf4865e7ef3cfd" translate="yes" xml:space="preserve">
          <source>Returning errors</source>
          <target state="translated">오류를 반환</target>
        </trans-unit>
        <trans-unit id="7095e5771eaf071182623b8cf6a49a64c9eba107" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">기본적으로 &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1092e63f98742ffa56c537ab72b7a40ee87c664d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;False&lt;/code&gt; if &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; has been called for this user.</source>
          <target state="translated">이 사용자에 대해 &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt; 가 호출 된 경우 &lt;code&gt;False&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="0e677794a528a5aa8153071c3a65b95c3e25f184" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;False&lt;/code&gt; if &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; has been called for this user.</source>
          <target state="translated">이 사용자에 대해 &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt; 가 호출 된 경우 &lt;code&gt;False&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="1a98b310ac45a54756232d0cddc7b27f06ae41bb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;False&lt;/code&gt; if the password is a result of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;User.set_unusable_password()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">비밀번호가 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;User.set_unusable_password()&lt;/code&gt; &lt;/a&gt; 의 결과 인 경우 &lt;code&gt;False&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="08487b10e572b361292fbbd2036a6fa8419a4e6d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;None&lt;/code&gt; if &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt;&lt;code&gt;create_unknown_user&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; and a &lt;code&gt;User&lt;/code&gt; object with the given username is not found in the database.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt; &lt;code&gt;create_unknown_user&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 이고 지정된 사용자 이름을 가진 &lt;code&gt;User&lt;/code&gt; 객체가 데이터베이스에없는 경우 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6f92312a02b985adef5b319c8895a576823f384b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;None&lt;/code&gt; if there is no suggestion.</source>
          <target state="translated">제안이 없으면 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="15d97ec59755d608144e34737e5bfaf6e49f62e8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.disjoint&quot;&gt;&lt;code&gt;GEOSGeometry.disjoint()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.disjoint&quot;&gt; &lt;code&gt;GEOSGeometry.disjoint()&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 &lt;code&gt;True&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9627596d0dd58d51bdb410092d5f1f3053bb8e15" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.within&quot;&gt;&lt;code&gt;other.within(this)&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;True&lt;/code&gt; 경우 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.within&quot;&gt; &lt;code&gt;other.within(this)&lt;/code&gt; &lt;/a&gt; 반환 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b581b3914a5d050d69d5762d31de07c1682c3d8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is aware, &lt;code&gt;False&lt;/code&gt; if it is naive. This function assumes that &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 &lt;code&gt;True&lt;/code&gt; 경우 &lt;code&gt;value&lt;/code&gt; , 알고 &lt;code&gt;False&lt;/code&gt; 은 순진 경우. 이 함수는 &lt;code&gt;value&lt;/code&gt; 가 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 이라고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="07ee4077e37c02ef9a6377b3f5889cf0e80ff538" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is naive, &lt;code&gt;False&lt;/code&gt; if it is aware. This function assumes that &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 순진한 경우 &lt;code&gt;True&lt;/code&gt; 를 , 알고 있으면 &lt;code&gt;False&lt;/code&gt; 를 리턴 합니다. 이 함수는 &lt;code&gt;value&lt;/code&gt; 가 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 이라고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="18e3685f44b92cdfc280453cf13c75eec24b4a73" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if a file referenced by the given name already exists in the storage system, or &lt;code&gt;False&lt;/code&gt; if the name is available for a new file.</source>
          <target state="translated">반환 &lt;code&gt;True&lt;/code&gt; 지정된 이름에 의해 참조 파일이 이미 스토리지 시스템에 존재하는 경우, 또는 &lt;code&gt;False&lt;/code&gt; 이름이 새 파일을 사용할 수있는 경우.</target>
        </trans-unit>
        <trans-unit id="4ee7578ce7acc9ab5cf150f7bcbfb78b9112875b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if and only if all elements are closed. Requires GEOS 3.5.</source>
          <target state="translated">모든 요소가 닫힌 경우에만 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다. GEOS 3.5가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="81b18813bc602858d4a2a0158b3e61be2a37b803" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if at least one input value is true, &lt;code&gt;None&lt;/code&gt; if all values are null or if there are no values, otherwise &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;True&lt;/code&gt; 적어도 하나의 입력 값에 해당하는 경우, &lt;code&gt;None&lt;/code&gt; 모든 값이 널 (null) 또는 NO 값이없는 경우, 그렇지 않은 경우 &lt;code&gt;False&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bbc8fe08675d5a8863527050e072394b78b97133" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; contains any results, and &lt;code&gt;False&lt;/code&gt; if not. This tries to perform the query in the simplest and fastest way possible, but it &lt;em&gt;does&lt;/em&gt; execute nearly the same query as a normal &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; query.</source>
          <target state="translated">반환 &lt;code&gt;True&lt;/code&gt; 경우 생성 &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 어떤 결과를 포함하고, &lt;code&gt;False&lt;/code&gt; 이 아니라면. 이 시도는 가능한 간단하고 빠른 방법에서 쿼리를 수행 할 수 있지만 &lt;em&gt;않는&lt;/em&gt; 정상과 거의 같은 쿼리를 실행 &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 쿼리.</target>
        </trans-unit>
        <trans-unit id="904b4aa45e01a31d68b44d38d64e4e743dde9a2e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the DE-9IM intersection matrix for the two Geometries is &lt;code&gt;T*T******&lt;/code&gt; (for a point and a curve,a point and an area or a line and an area) &lt;code&gt;0********&lt;/code&gt; (for two curves).</source>
          <target state="translated">두 Geometry의 DE-9IM 교차 행렬이 &lt;code&gt;T*T******&lt;/code&gt; (점 및 곡선, 점 및 영역 또는 선 및 영역) 인 경우 &lt;code&gt;True&lt;/code&gt; 를 리턴 합니다. &lt;code&gt;0********&lt;/code&gt; (두 곡선의 경우).</target>
        </trans-unit>
        <trans-unit id="1679cbb23dcbc50cd824271aab873a88e7894184" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the DE-9IM intersection matrix for the two geometries is &lt;code&gt;FF*FF****&lt;/code&gt;.</source>
          <target state="translated">두 도형의 DE-9IM 교차 행렬이 &lt;code&gt;FF*FF****&lt;/code&gt; 경우 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b1b945e0e8a9cf4720bdf5e9ee506bae6a95f82f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the DE-9IM intersection matrix for the two geometries is &lt;code&gt;FT*******&lt;/code&gt;, &lt;code&gt;F**T*****&lt;/code&gt; or &lt;code&gt;F***T****&lt;/code&gt;.</source>
          <target state="translated">두 도형의 DE-9IM 교차 행렬이 &lt;code&gt;FT*******&lt;/code&gt; , &lt;code&gt;F**T*****&lt;/code&gt; 또는 &lt;code&gt;F***T****&lt;/code&gt; 경우 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="e9e020c7b2dca31dbf34dba2c137fae9c9a1a3c7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the DE-9IM intersection matrix for the two geometries is &lt;code&gt;T*F**F***&lt;/code&gt;.</source>
          <target state="translated">두 도형의 DE-9IM 교차 행렬이 &lt;code&gt;T*F**F***&lt;/code&gt; 경우 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="7c269d8bb8356ba54a83f19794a9da02bd6abdcd" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the DE-9IM intersection matrix for the two geometries is &lt;code&gt;T*F**FFF*&lt;/code&gt;.</source>
          <target state="translated">두 도형의 DE-9IM 교차 행렬이 &lt;code&gt;T*F**FFF*&lt;/code&gt; 경우 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f6f8d07aaf246cbf7cdb39524f0b6d55493ab6c3" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the elements in the DE-9IM intersection matrix for this geometry and the other matches the given &lt;code&gt;pattern&lt;/code&gt; &amp;ndash; a string of nine characters from the alphabet: {&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;}.</source>
          <target state="translated">이 지오메트리에 대한 DE-9IM 교차 행렬의 요소와 다른 &lt;code&gt;pattern&lt;/code&gt; 이 주어진 패턴 과 일치하면 &lt;code&gt;True&lt;/code&gt; 를 리턴 합니다 (알파벳에서 9 자의 문자열 : { &lt;code&gt;T&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; }).</target>
        </trans-unit>
        <trans-unit id="ed75482457f97c5c4474ee309fe4eac1a54c1663" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the file is large enough to require multiple chunks to access all of its content give some &lt;code&gt;chunk_size&lt;/code&gt;.</source>
          <target state="translated">파일이 모든 내용에 액세스하기 위해 여러 청크를 요구하기에 충분히 큰 경우 &lt;code&gt;True&lt;/code&gt; 를 리턴 하여 &lt;code&gt;chunk_size&lt;/code&gt; 를 제공 합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
