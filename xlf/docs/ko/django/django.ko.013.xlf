<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="a1afaa5ba0e096bb9e50f1962733863c9b09641f" translate="yes" xml:space="preserve">
          <source>Set up a database</source>
          <target state="translated">데이터베이스 설정</target>
        </trans-unit>
        <trans-unit id="97fd13194fd3cb22c1cbd4ed2eac0a25c0b52e7c" translate="yes" xml:space="preserve">
          <source>Set up the hstore extension in PostgreSQL before the first &lt;code&gt;CreateModel&lt;/code&gt; or &lt;code&gt;AddField&lt;/code&gt; operation that involves &lt;a href=&quot;fields#django.contrib.postgres.fields.HStoreField&quot;&gt;&lt;code&gt;HStoreField&lt;/code&gt;&lt;/a&gt; by adding a migration with the &lt;a href=&quot;#django.contrib.postgres.operations.HStoreExtension&quot;&gt;&lt;code&gt;HStoreExtension&lt;/code&gt;&lt;/a&gt; operation. For example:</source>
          <target state="translated">첫 번째 이전의 PostgreSQL에서 hstore 확장 설정 &lt;code&gt;CreateModel&lt;/code&gt; 또는 &lt;code&gt;AddField&lt;/code&gt; 의 관련 작업 &lt;a href=&quot;fields#django.contrib.postgres.fields.HStoreField&quot;&gt; &lt;code&gt;HStoreField&lt;/code&gt; 을&lt;/a&gt; 로 마이그레이션을 추가하여 &lt;a href=&quot;#django.contrib.postgres.operations.HStoreExtension&quot;&gt; &lt;code&gt;HStoreExtension&lt;/code&gt; 의&lt;/a&gt; 작업을. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3ded3d55f3eb7df61ff40480cf0a0bce477f5009" translate="yes" xml:space="preserve">
          <source>Set up your projects admin template directories</source>
          <target state="translated">프로젝트 관리 템플릿 디렉토리 설정</target>
        </trans-unit>
        <trans-unit id="b49bcb26884abafb26569f6f7f16bd2ccec66a27" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;response.content&lt;/code&gt; to the result obtained by &lt;a href=&quot;#django.template.response.SimpleTemplateResponse.rendered_content&quot;&gt;&lt;code&gt;SimpleTemplateResponse.rendered_content&lt;/code&gt;&lt;/a&gt;, runs all post-rendering callbacks, and returns the resulting response object.</source>
          <target state="translated">&lt;code&gt;response.content&lt;/code&gt; 를 &lt;a href=&quot;#django.template.response.SimpleTemplateResponse.rendered_content&quot;&gt; &lt;code&gt;SimpleTemplateResponse.rendered_content&lt;/code&gt; 로&lt;/a&gt; 얻은 결과로 설정 하고 렌더링 후 모든 콜백을 실행 한 후 결과 응답 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="408f40a5fe43edc715efa57f014cfbad947dd030" translate="yes" xml:space="preserve">
          <source>Sets a cookie. The parameters are the same as in the &lt;a href=&quot;https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel&quot;&gt;&lt;code&gt;Morsel&lt;/code&gt;&lt;/a&gt; cookie object in the Python standard library.</source>
          <target state="translated">쿠키를 설정합니다. 매개 변수는 Python 표준 라이브러리 의 &lt;a href=&quot;https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel&quot;&gt; &lt;code&gt;Morsel&lt;/code&gt; &lt;/a&gt; 쿠키 오브젝트 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="3c515046f01771f4526378b421d8ba5b4e169a1a" translate="yes" xml:space="preserve">
          <source>Sets a header unless it has already been set.</source>
          <target state="translated">헤더가 설정되어 있지 않으면 설정합니다.</target>
        </trans-unit>
        <trans-unit id="bdca6cc895cc30c955b0b950fec5e8bc6259cf4e" translate="yes" xml:space="preserve">
          <source>Sets a limit to the available choices for this field when this field is rendered using a &lt;code&gt;ModelForm&lt;/code&gt; or the admin (by default, all objects in the queryset are available to choose). Either a dictionary, a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt; object, or a callable returning a dictionary or &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt; object can be used.</source>
          <target state="translated">이 필드가 &lt;code&gt;ModelForm&lt;/code&gt; 또는 관리자를 사용하여 렌더링 될 때이 필드에 사용 가능한 선택에 대한 제한을 설정합니다 (기본적으로 쿼리 세트의 모든 객체를 선택할 수 있음). 사전, &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt; 객체 또는 사전 또는 &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt; 객체를 반환하는 호출 가능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="632eb1f0531c26082b7a79d32dce48d5b6201736" translate="yes" xml:space="preserve">
          <source>Sets a test cookie to determine whether the user&amp;rsquo;s browser supports cookies. Due to the way cookies work, you won&amp;rsquo;t be able to test this until the user&amp;rsquo;s next page request. See &lt;a href=&quot;#setting-test-cookies&quot;&gt;Setting test cookies&lt;/a&gt; below for more information.</source>
          <target state="translated">사용자 브라우저가 쿠키를 지원하는지 확인하기 위해 테스트 쿠키를 설정합니다. 쿠키의 작동 방식으로 인해 사용자의 다음 페이지 요청이있을 때까지 쿠키를 테스트 할 수 없습니다. 자세한 내용은 아래 &lt;a href=&quot;#setting-test-cookies&quot;&gt;테스트 쿠키 설정&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f05dfa7fb6cebcdcf2beabb0f70373bd1aa5b659" translate="yes" xml:space="preserve">
          <source>Sets of field names that, taken together, are indexed:</source>
          <target state="translated">함께 색인화 된 필드 이름 세트 :</target>
        </trans-unit>
        <trans-unit id="52667eddca77089fbc28d755e7e76e0f1f77ed69" translate="yes" xml:space="preserve">
          <source>Sets of field names that, taken together, must be unique:</source>
          <target state="translated">함께 사용되는 필드 이름 세트는 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="73f4a00cf7b87c9b1063afa4aa8e1c3526dc91b6" translate="yes" xml:space="preserve">
          <source>Sets or unsets the current time zone in the contained block. When the current time zone is unset, the default time zone applies.</source>
          <target state="translated">포함 된 블록에서 현재 시간대를 설정하거나 설정 해제합니다. 현재 시간대가 설정되어 있지 않으면 기본 시간대가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e0ac40eb546b24145147ae03b91ddebbb99aa2dd" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt;. The &lt;code&gt;timezone&lt;/code&gt; argument must be an instance of a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass or a time zone name.</source>
          <target state="translated">&lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;현재 시간대를&lt;/a&gt; 설정합니다 . &lt;code&gt;timezone&lt;/code&gt; 인수는의 인스턴스 여야합니다 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; 의&lt;/a&gt; 서브 클래스 또는 시간대 이름입니다.</target>
        </trans-unit>
        <trans-unit id="5103c5d452e2f6cb5c1933a10c95972e5d3cc950" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt; prior to running tests. This may help troubleshoot test failures.</source>
          <target state="translated">테스트를 실행하기 전에 &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정을 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 . 테스트 실패 문제를 해결하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e4d668d536d53ad93385f03b5371b98dec15212" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Cache-Control&lt;/code&gt; header to give a max age for the page &amp;ndash; again, from the &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; &lt;/a&gt; 설정 에서 페이지의 최대 수명을 제공 하도록 &lt;code&gt;Cache-Control&lt;/code&gt; 헤더를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ae603b6fc6618cf488705a1cf96cb00d25aa2b57" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Content-Length&lt;/code&gt; header for non-streaming responses.</source>
          <target state="translated">비 스트리밍 응답에 대한 &lt;code&gt;Content-Length&lt;/code&gt; 헤더를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="e1a2f13363ee41cab9583db5e0dc1cca7f30503c" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Expires&lt;/code&gt; header to the current date/time plus the defined &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">세트는이 &lt;code&gt;Expires&lt;/code&gt; 현재 날짜 / 시간을 더한 정의에 헤더 &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5bdf74ce6ca2ff8945590cd20a859da89bea6a09" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;domain&lt;/code&gt; attributes to the value of &lt;a href=&quot;../request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;domain&lt;/code&gt; 속성을 &lt;a href=&quot;../request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;get_host()&lt;/code&gt; &lt;/a&gt; 값으로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="5819809ad73328e684b62f25daab602449fa6adc" translate="yes" xml:space="preserve">
          <source>Sets the SRID &lt;a href=&quot;#fnogcsrid&quot; id=&quot;id4&quot;&gt;[2]&lt;/a&gt; (Spatial Reference System Identity) of the geometry field to the given value. Defaults to 4326 (also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/WGS84&quot;&gt;WGS84&lt;/a&gt;, units are in degrees of longitude and latitude).</source>
          <target state="translated">기하학 필드 의 SRID &lt;a href=&quot;#fnogcsrid&quot; id=&quot;id4&quot;&gt;[2]&lt;/a&gt; (공간 참조 시스템 ID)를 주어진 값으로 설정합니다. 기본값은 4326입니다 ( &lt;a href=&quot;https://en.wikipedia.org/wiki/WGS84&quot;&gt;WGS84&lt;/a&gt; 라고도하며 단위는 경도와 위도입니다).</target>
        </trans-unit>
        <trans-unit id="f2b9274a804d2ecaa3195367f00bea7a434591d9" translate="yes" xml:space="preserve">
          <source>Sets the database to use when importing spatial data. Default is &lt;code&gt;'default'&lt;/code&gt;.</source>
          <target state="translated">공간 데이터를 가져올 때 사용할 데이터베이스를 설정합니다. 기본값은 &lt;code&gt;'default'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8bf2eddb5b4b6ffe46fd95be0ac3e4d7ba5c02c3" translate="yes" xml:space="preserve">
          <source>Sets the expiration time for the session. You can pass a number of different values:</source>
          <target state="translated">세션 만료 시간을 설정합니다. 여러 가지 다른 값을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1f24dd079f20b79ef103229f1172344d814ef67" translate="yes" xml:space="preserve">
          <source>Sets the given header name to the given value. Both &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; should be strings.</source>
          <target state="translated">주어진 헤더 이름을 주어진 값으로 설정합니다. 두 &lt;code&gt;header&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; 문자열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="1b777c3f2c50ed5c7082c4ab62fc65aaf0472676" translate="yes" xml:space="preserve">
          <source>Sets the given key to &lt;code&gt;[value]&lt;/code&gt; (a list whose single element is &lt;code&gt;value&lt;/code&gt;). Note that this, as other dictionary functions that have side effects, can only be called on a mutable &lt;code&gt;QueryDict&lt;/code&gt; (such as one that was created via &lt;a href=&quot;#django.http.QueryDict.copy&quot;&gt;&lt;code&gt;QueryDict.copy()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">주어진 키를 &lt;code&gt;[value]&lt;/code&gt; (단일 요소가 &lt;code&gt;value&lt;/code&gt; 인 목록 )로 설정합니다. 부작용이있는 다른 사전 함수로서, 이는 변경 가능한 &lt;code&gt;QueryDict&lt;/code&gt; (예 : &lt;a href=&quot;#django.http.QueryDict.copy&quot;&gt; &lt;code&gt;QueryDict.copy()&lt;/code&gt; &lt;/a&gt; 를 통해 작성된 함수)에서만 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5053eaffe55e888ce89c031af21019fd33faef0" translate="yes" xml:space="preserve">
          <source>Sets the given key to &lt;code&gt;list_&lt;/code&gt; (unlike &lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">지정된 키를 &lt;code&gt;list_&lt;/code&gt; 로 설정합니다 ( &lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt; &lt;code&gt;__setitem__()&lt;/code&gt; &lt;/a&gt; 과 달리 ).</target>
        </trans-unit>
        <trans-unit id="ce195a23bd246795f71fd859aa4ec89b77eda722" translate="yes" xml:space="preserve">
          <source>Sets the minimum message level that will be recorded by the messages framework. See &lt;a href=&quot;contrib/messages#message-level&quot;&gt;message levels&lt;/a&gt; for more details.</source>
          <target state="translated">메시지 프레임 워크에 의해 기록 될 최소 메시지 레벨을 설정합니다. 자세한 내용은 &lt;a href=&quot;contrib/messages#message-level&quot;&gt;메시지 수준&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="31a038be4a7757c10e533982c76c04d85a95d5e0" translate="yes" xml:space="preserve">
          <source>Sets the name of the squashed migration. When omitted, the name is based on the first and last migration, with &lt;code&gt;_squashed_&lt;/code&gt; in between.</source>
          <target state="translated">스쿼시 마이그레이션의 이름을 설정합니다. 생략하면 이름은 &lt;code&gt;_squashed_&lt;/code&gt; 사이 에있는 첫 번째 및 마지막 마이그레이션을 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="a97697aace2f54293e7b5eda11c35e1cb9a00cc3" translate="yes" xml:space="preserve">
          <source>Sets the user&amp;rsquo;s password to the given raw string, taking care of the password hashing. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">비밀번호 해싱을 처리하여 사용자 비밀번호를 지정된 원시 문자열로 설정합니다. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt; 객체를 저장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8459b281517c48c462475bb38a8d73ff61f3e723" translate="yes" xml:space="preserve">
          <source>Sets the user&amp;rsquo;s password to the given raw string, taking care of the password hashing. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">비밀번호 해싱을 처리하여 사용자 비밀번호를 지정된 원시 문자열로 설정합니다. &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 개체를 저장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="66d36ff09f5d81122453523551e0e8c1881c667c" translate="yes" xml:space="preserve">
          <source>Sets up the test environment by calling &lt;a href=&quot;#django.test.utils.setup_test_environment&quot;&gt;&lt;code&gt;setup_test_environment()&lt;/code&gt;&lt;/a&gt; and setting &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;self.debug_mode&lt;/code&gt; (defaults to &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;#django.test.utils.setup_test_environment&quot;&gt; &lt;code&gt;setup_test_environment()&lt;/code&gt; &lt;/a&gt; 를 호출 하고 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;self.debug_mode&lt;/code&gt; (기본값은 &lt;code&gt;False&lt;/code&gt; )로 설정 하여 테스트 환경을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="59b0dc8f8ae1e494dded947c788c0e119c198d3b" translate="yes" xml:space="preserve">
          <source>Setting &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG = False&lt;/code&gt;&lt;/a&gt; disables several features that are only useful in development. In addition, you can tune the following settings.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG = False&lt;/code&gt; &lt;/a&gt; 설정 하면 개발에만 유용한 몇 가지 기능이 비활성화됩니다. 또한 다음 설정을 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e72e1b603af5cb3db44f699b632c99146b328773" translate="yes" xml:space="preserve">
          <source>Setting &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt; only means that the automatic configuration process is disabled, not logging itself. If you disable the configuration process, Django will still make logging calls, falling back to whatever default logging behavior is defined.</source>
          <target state="translated">설정 &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;None&lt;/code&gt; 단지 자동 구성 프로세스 자체를 기록하지 않는 비활성화 된 것을 의미한다. 구성 프로세스를 비활성화하면 Django는 여전히 로깅 호출을 수행하여 정의 된 기본 로깅 동작으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="c39c94023e1f094fcd48abe8fb31ff3e14bc6a7d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;CSRF_COOKIE_SAMESITE = 'None'&lt;/code&gt; was allowed.</source>
          <target state="translated">&lt;code&gt;CSRF_COOKIE_SAMESITE = 'None'&lt;/code&gt; 설정 이 허용되었습니다.</target>
        </trans-unit>
        <trans-unit id="675b845f9e121dbf59d1b91af502a429ef0d7f90" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;LANGUAGE_COOKIE_SAMESITE = 'None'&lt;/code&gt; was allowed.</source>
          <target state="translated">&lt;code&gt;LANGUAGE_COOKIE_SAMESITE = 'None'&lt;/code&gt; 설정 이 허용되었습니다.</target>
        </trans-unit>
        <trans-unit id="e2f5b9aec1328b20d53c71c32acf5f6a71cced2a" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;SESSION_COOKIE_SAMESITE = 'None'&lt;/code&gt; was allowed.</source>
          <target state="translated">&lt;code&gt;SESSION_COOKIE_SAMESITE = 'None'&lt;/code&gt; 설정 이 허용되었습니다.</target>
        </trans-unit>
        <trans-unit id="7ed8f7cc38fbdaf331556f24d21c45a87ad324e8" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;X-Frame-Options&lt;/code&gt; for all responses</source>
          <target state="translated">모든 응답에 대한 &lt;code&gt;X-Frame-Options&lt;/code&gt; 설정</target>
        </trans-unit>
        <trans-unit id="132cfd6ffe75ccd5777a9a7d34096f2d17428788" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;X-Frame-Options&lt;/code&gt; per view</source>
          <target state="translated">설정 &lt;code&gt;X-Frame-Options&lt;/code&gt; 보기 당을</target>
        </trans-unit>
        <trans-unit id="93ed55d48126fe1990ba39c9f35de2f232ddcc3d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;available_apps&lt;/code&gt; to a list of applications instructs Django to behave as if only the models from these applications were available. The behavior of &lt;code&gt;TransactionTestCase&lt;/code&gt; changes as follows:</source>
          <target state="translated">&lt;code&gt;available_apps&lt;/code&gt; 를 응용 프로그램 목록으로 설정하면 Django가 이러한 응용 프로그램의 모델 만 사용 가능한 것처럼 동작하도록 지시합니다. &lt;code&gt;TransactionTestCase&lt;/code&gt; 의 동작은 다음과 같이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="3ce871192d2e417ae6155e5820ab972d31ff0f39" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;fail_silently=True&lt;/code&gt; only hides the &lt;code&gt;MessageFailure&lt;/code&gt; that would otherwise occur when the messages framework disabled and one attempts to use one of the &lt;code&gt;add_message&lt;/code&gt; family of methods. It does not hide failures that may occur for other reasons.</source>
          <target state="translated">&lt;code&gt;fail_silently=True&lt;/code&gt; 로 설정 하면 메시지 프레임 워크가 비활성화되고 &lt;code&gt;add_message&lt;/code&gt; 계열 중 하나를 사용하려고 할 때 발생 하는 &lt;code&gt;MessageFailure&lt;/code&gt; 만 숨 깁니다 . 다른 이유로 발생할 수있는 장애는 숨기지 않습니다.</target>
        </trans-unit>
        <trans-unit id="47c661eb59e52123e31e3dd1e9702fcb6598bd93" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;prefix_default_language&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; removes the prefix from the default language (&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt;). This can be useful when adding translations to existing site so that the current URLs won&amp;rsquo;t change.</source>
          <target state="translated">&lt;code&gt;prefix_default_language&lt;/code&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정 하면 기본 언어 ( &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt; ) 에서 접두사가 제거 됩니다. 현재 URL이 변경되지 않도록 기존 사이트에 번역을 추가 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0056c667576e354a5e663c95d62e7ef9927b4dc0" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;require_ready&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; allows looking up models &lt;a href=&quot;#app-loading-process&quot;&gt;while the app registry is being populated&lt;/a&gt;, specifically during the second phase where it imports models. Then &lt;code&gt;get_model()&lt;/code&gt; has the same effect as importing the model. The main use case is to configure model classes with settings, such as &lt;a href=&quot;settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">설정 &lt;code&gt;require_ready&lt;/code&gt; 을 에 &lt;code&gt;False&lt;/code&gt; 모델을 찾고 있습니다 &lt;a href=&quot;#app-loading-process&quot;&gt;응용 프로그램의 레지스트리가 채워되는 동안&lt;/a&gt; 특별히이 모델을 가져 오는 두 번째 단계. 그러면 &lt;code&gt;get_model()&lt;/code&gt; 은 모델을 가져 오는 것과 같은 효과를 갖습니다. 주요 사용 사례는 &lt;a href=&quot;settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt; 과 같은 설정으로 모델 클래스를 구성하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="c0cd66f01495f08ccc8d10eee1e9d67c79c5a014" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;reset_sequences = True&lt;/code&gt; on a &lt;code&gt;TransactionTestCase&lt;/code&gt; will make sure sequences are always reset before the test run:</source>
          <target state="translated">&lt;code&gt;TransactionTestCase&lt;/code&gt; 에서 &lt;code&gt;reset_sequences = True&lt;/code&gt; 를 설정 하면 테스트 실행 전에 시퀀스가 ​​항상 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="50918ec9532aeb7cd1ec5da9ce08113b71e778fa" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;sql_mode&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sql_mode&lt;/code&gt; 설정</target>
        </trans-unit>
        <trans-unit id="d60b0890a431be3750d67b0f7fe70b5f3af16d7e" translate="yes" xml:space="preserve">
          <source>Setting Up</source>
          <target state="translated">설정</target>
        </trans-unit>
        <trans-unit id="6b965bcdec8a51f70c2f569e92d9a8f7ea73b181" translate="yes" xml:space="preserve">
          <source>Setting a variable in the context</source>
          <target state="translated">컨텍스트에서 변수 설정</target>
        </trans-unit>
        <trans-unit id="66e5d8afa8668590f57e7c54ac4454a2ade5fb02" translate="yes" xml:space="preserve">
          <source>Setting arguments for widgets</source>
          <target state="translated">위젯에 대한 인수 설정</target>
        </trans-unit>
        <trans-unit id="fe0f8c19188f8ce734dd718293260407a61b792f" translate="yes" xml:space="preserve">
          <source>Setting header fields</source>
          <target state="translated">헤더 필드 설정</target>
        </trans-unit>
        <trans-unit id="945bafd68150779ab45819d6a28e6ddb2de1192f" translate="yes" xml:space="preserve">
          <source>Setting it to &lt;code&gt;False&lt;/code&gt; does not mean you can reference a swappable model even if it is swapped out - &lt;code&gt;False&lt;/code&gt; means that the migrations made with this ForeignKey will always reference the exact model you specify (so it will fail hard if the user tries to run with a User model you don&amp;rsquo;t support, for example).</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로 설정한다고 해도 스왑 가능 모델이 스왑 아웃되어 있어도 참조 할 수 있다는 의미는 아닙니다.- &lt;code&gt;False&lt;/code&gt; 는이 ForeignKey를 사용하여 마이그레이션 할 때 항상 지정한 정확한 모델을 참조한다는 것을 의미합니다. 예를 들어 지원하지 않는 사용자 모델).</target>
        </trans-unit>
        <trans-unit id="28cacd8745a95fc18ae94161435322089b4163e2" translate="yes" xml:space="preserve">
          <source>Setting it to &lt;code&gt;False&lt;/code&gt; prevents such a rollback. Before doing that, make sure you&amp;rsquo;ve rolled back the transaction to a known-good savepoint within the current atomic block! Otherwise you&amp;rsquo;re breaking atomicity and data corruption may occur.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로 설정 하면 이러한 롤백이 방지됩니다. 이를 수행하기 전에 현재 원자 블록 내에서 잘 알려진 저장 점으로 트랜잭션을 롤백했는지 확인하십시오! 그렇지 않으면 원 자성을 잃고 데이터가 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="075bb4f28dadb7ff8ce20dda53f6efb8f30916a5" translate="yes" xml:space="preserve">
          <source>Setting names must be all uppercase.</source>
          <target state="translated">설정 이름은 모두 대문자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="16631f78efae0a8d74d4a2455f07a2e3a307f5c6" translate="yes" xml:space="preserve">
          <source>Setting permissions for actions</source>
          <target state="translated">작업 권한 설정</target>
        </trans-unit>
        <trans-unit id="9ac1ac2c549326e91452b0a30530bce65a21c002" translate="yes" xml:space="preserve">
          <source>Setting system library path</source>
          <target state="translated">시스템 라이브러리 경로 설정</target>
        </trans-unit>
        <trans-unit id="59535a2469317a361527e1e129868541fc3a4b8b" translate="yes" xml:space="preserve">
          <source>Setting test cookies</source>
          <target state="translated">테스트 쿠키 설정</target>
        </trans-unit>
        <trans-unit id="fac5905f3c39f20c6f85ca274a70117415678188" translate="yes" xml:space="preserve">
          <source>Setting the language</source>
          <target state="translated">언어 설정</target>
        </trans-unit>
        <trans-unit id="a1d46f3f9862beae150f7ad035e6575bc712481a" translate="yes" xml:space="preserve">
          <source>Setting the rollback flag to &lt;code&gt;True&lt;/code&gt; forces a rollback when exiting the innermost atomic block. This may be useful to trigger a rollback without raising an exception.</source>
          <target state="translated">롤백 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정하면 가장 안쪽의 원자 블록을 종료 할 때 롤백이 발생합니다. 예외를 발생시키지 않고 롤백을 트리거하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="087c72314f40c858cc65ce0acac1fbe17e4d3ed1" translate="yes" xml:space="preserve">
          <source>Setting the time zone of the database connection may be useful for running raw SQL queries involving date/time functions provided by the database, such as &lt;code&gt;date_trunc&lt;/code&gt;, because their results depend on the time zone.</source>
          <target state="translated">Setting the time zone of the database connection may be useful for running raw SQL queries involving date/time functions provided by the database, such as &lt;code&gt;date_trunc&lt;/code&gt; , because their results depend on the time zone.</target>
        </trans-unit>
        <trans-unit id="95ecbb5620ff188d342ecdd844e0404486de01a1" translate="yes" xml:space="preserve">
          <source>Setting the token on the AJAX request</source>
          <target state="translated">AJAX 요청에서 토큰 설정</target>
        </trans-unit>
        <trans-unit id="08b9fd67626d43b20cb5a622d42c5adf6141a940" translate="yes" xml:space="preserve">
          <source>Setting this incorrectly can irreversibly (for some time) break your site. Read the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; documentation first.</source>
          <target state="translated">이것을 잘못 설정하면 돌이킬 수 없게 (한동안) 사이트가 손상 될 수 있습니다. 먼저 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; 설명서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="af04376bd1a36ea4fac76faf5ab993ad605c69a8" translate="yes" xml:space="preserve">
          <source>Setting this incorrectly can irreversibly (for the value of &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt;) break your site. Read the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; documentation first.</source>
          <target state="translated">잘못 설정하면 ( &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; 의 값으로 ) 사이트가 손상 될 수 있습니다. 먼저 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; 설명서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="b4b7f49bbe9dcb41865c13c13332d926ce70da09" translate="yes" xml:space="preserve">
          <source>Setting this to False will disable coordinate transformations. In other words, geometries will be inserted into the database unmodified from their original state in the data source.</source>
          <target state="translated">이것을 False로 설정하면 좌표 변환이 비활성화됩니다. 다시 말해, 지오메트리는 데이터 소스의 원래 상태에서 수정되지 않은 데이터베이스에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="148cc51328a7c1446f08657b5d9544259408be88" translate="yes" xml:space="preserve">
          <source>Setting this to the name, or a tuple of names, from the given model will create models unique only to the given name(s). Geometries from each feature will be added into the collection associated with the unique model. Forces the transaction mode to be &lt;code&gt;'autocommit'&lt;/code&gt;.</source>
          <target state="translated">주어진 모델에서 이름 또는 이름의 튜플로 이것을 설정하면 주어진 이름에만 고유 한 모델이 생성됩니다. 각 지형지 물의 형상이 고유 모델과 관련된 컬렉션에 추가됩니다. 트랜잭션 모드를 &lt;code&gt;'autocommit'&lt;/code&gt; 으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="a9169b7dd339849688ef82a19859825695a184a3" translate="yes" xml:space="preserve">
          <source>Setting up a virtual environment</source>
          <target state="translated">Setting up a virtual environment</target>
        </trans-unit>
        <trans-unit id="cb7f0e00827512ade25b17b60478ebe5400744db" translate="yes" xml:space="preserve">
          <source>Setting up logging.</source>
          <target state="translated">로깅 설정</target>
        </trans-unit>
        <trans-unit id="70141fb124d4755c0506b6893cb2bad35ead79df" translate="yes" xml:space="preserve">
          <source>Setting up the cache</source>
          <target state="translated">캐시 설정</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="1ef6431fd00945acd25e4e17cf80b8b03b331864" translate="yes" xml:space="preserve">
          <source>Settings for &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt; 설정 .</target>
        </trans-unit>
        <trans-unit id="5ab8f58b8730735a29f68a2c21df9be9e9a29e58" translate="yes" xml:space="preserve">
          <source>Settings for &lt;a href=&quot;../topics/http/sessions#module-django.contrib.sessions&quot;&gt;&lt;code&gt;django.contrib.sessions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/http/sessions#module-django.contrib.sessions&quot;&gt; &lt;code&gt;django.contrib.sessions&lt;/code&gt; &lt;/a&gt; 설정 .</target>
        </trans-unit>
        <trans-unit id="bcc769e0a9c1072115af5f7676a8bd4ed0375aa6" translate="yes" xml:space="preserve">
          <source>Settings for &lt;a href=&quot;contrib/messages#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;contrib/messages#module-django.contrib.messages&quot;&gt; &lt;code&gt;django.contrib.messages&lt;/code&gt; &lt;/a&gt; 설정 .</target>
        </trans-unit>
        <trans-unit id="bb73d4327a78b5f90d8b1f65e2a61bff79df67c3" translate="yes" xml:space="preserve">
          <source>Settings for &lt;a href=&quot;contrib/sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;django.contrib.sites&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;contrib/sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;django.contrib.sites&lt;/code&gt; &lt;/a&gt; 설정 .</target>
        </trans-unit>
        <trans-unit id="578f88ca202f7c652ff375f57c0322bb9446bbe8" translate="yes" xml:space="preserve">
          <source>Settings for &lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt; 설정 .</target>
        </trans-unit>
        <trans-unit id="6ed7bddfc1f699043942baf70a668acdd2fa1c1b" translate="yes" xml:space="preserve">
          <source>Settings that don&amp;rsquo;t appear in the defaults are followed by &lt;code&gt;&quot;###&quot;&lt;/code&gt;. For example, the default settings don&amp;rsquo;t define &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt;, so &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt; is followed by &lt;code&gt;&quot;###&quot;&lt;/code&gt; in the output of &lt;code&gt;diffsettings&lt;/code&gt;.</source>
          <target state="translated">기본값에 나타나지 않는 설정은 &lt;code&gt;&quot;###&quot;&lt;/code&gt; 입니다. 예를 들어, 기본 설정을 정의하지 않습니다 &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt; &lt;code&gt;ROOT_URLCONF&lt;/code&gt; 를&lt;/a&gt; , 그래서 &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt; &lt;code&gt;ROOT_URLCONF&lt;/code&gt; 가&lt;/a&gt; 뒤에 &lt;code&gt;&quot;###&quot;&lt;/code&gt; 의 출력에 &lt;code&gt;diffsettings&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="9284281561d520bb05e937f00e6da0fc53291db0" translate="yes" xml:space="preserve">
          <source>Several contrib apps include models, and some apps depend on others. Since cross-database relationships are impossible, this creates some restrictions on how you can split these models across databases:</source>
          <target state="translated">여러 contrib 앱에는 모델이 포함되며 일부 앱은 다른 앱에 의존합니다. 데이터베이스 간 관계는 불가능하기 때문에 이러한 모델을 데이터베이스간에 분할하는 방법에 대한 몇 가지 제한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9344a6ba50482b25203bdb67214a869e99f0a167" translate="yes" xml:space="preserve">
          <source>Several fields that use the mixin are provided:</source>
          <target state="translated">믹스 인을 사용하는 여러 필드가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="4e844c425e4a9e83822ecbff02e9457714cca273" translate="yes" xml:space="preserve">
          <source>Several of Django&amp;rsquo;s built-in views are documented in &lt;a href=&quot;../topics/http/views&quot;&gt;Writing views&lt;/a&gt; as well as elsewhere in the documentation.</source>
          <target state="translated">Django의 내장 뷰 중 일부는 문서의 다른 곳뿐만 아니라 &lt;a href=&quot;../topics/http/views&quot;&gt;쓰기 뷰&lt;/a&gt; 에도 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ae897ad3c8b4b666503f4ed61afc4672e9f08f9" translate="yes" xml:space="preserve">
          <source>Several of Django&amp;rsquo;s bundled applications make use of the latter technique. For example, &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;the permissions system&lt;/code&gt;&lt;/a&gt; in Django&amp;rsquo;s authentication framework uses a &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; model with a foreign key to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt;; this lets &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; represent concepts like &amp;ldquo;can add blog entry&amp;rdquo; or &amp;ldquo;can delete news story&amp;rdquo;.</source>
          <target state="translated">Django의 번들 응용 프로그램 중 일부는 후자 기술을 사용합니다. 예를 들어, Django의 인증 프레임 워크의 &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;the permissions system&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 에&lt;/a&gt; 대한 외래 키 가있는 &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt; 모델을 사용합니다 . 이를 통해 &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt; 은&amp;ldquo;블로그 항목 추가 가능&amp;rdquo;또는&amp;ldquo;뉴스 기사 삭제 가능&amp;rdquo;과 같은 개념을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ecfeb649f2d8e778a6c97c427db59adfa0b8bb9" translate="yes" xml:space="preserve">
          <source>Several other &lt;a href=&quot;https://mysqlclient.readthedocs.io/user_guide.html#functions-and-attributes&quot;&gt;MySQLdb connection options&lt;/a&gt; may be useful, such as &lt;code&gt;ssl&lt;/code&gt;, &lt;code&gt;init_command&lt;/code&gt;, and &lt;code&gt;sql_mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ssl&lt;/code&gt; , &lt;code&gt;init_command&lt;/code&gt; 및 &lt;code&gt;sql_mode&lt;/code&gt; 와 같은 다른 몇 가지 &lt;a href=&quot;https://mysqlclient.readthedocs.io/user_guide.html#functions-and-attributes&quot;&gt;MySQLdb 연결 옵션&lt;/a&gt; 이 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f32021c108dc863de8f4807de237ca3983104f57" translate="yes" xml:space="preserve">
          <source>Several third-party Django tools and packages provide the ability to &amp;ldquo;minify&amp;rdquo; HTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, and comments, and shorten variable names, and thus reduce the size of the documents that your site publishes.</source>
          <target state="translated">여러 타사 Django 도구 및 패키지는 HTML, CSS 및 JavaScript를 &quot;최소화&quot;하는 기능을 제공합니다. 불필요한 공백, 줄 바꿈 및 주석을 제거하고 변수 이름을 줄이므로 사이트에서 게시하는 문서의 크기를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="f638a2e71c40d289aafac60d9b3cfbda0652523f" translate="yes" xml:space="preserve">
          <source>Short name for the application, e.g. &lt;code&gt;'admin'&lt;/code&gt;</source>
          <target state="translated">응용 프로그램의 짧은 이름 (예 : &lt;code&gt;'admin'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90c93523ff95f6469ea7fab8ffa47ed0ddc9bc0c" translate="yes" xml:space="preserve">
          <source>Shortcuts</source>
          <target state="translated">Shortcuts</target>
        </trans-unit>
        <trans-unit id="8f1975142f502df3e8d09b55af4cb0a330b81e73" translate="yes" xml:space="preserve">
          <source>Shortcuts for only computing one value</source>
          <target state="translated">하나의 값만 계산하기위한 바로 가기</target>
        </trans-unit>
        <trans-unit id="9cca6eb63a90d0ef9133a6ca8e703b4fb9e07052" translate="yes" xml:space="preserve">
          <source>Should be near the bottom as it&amp;rsquo;s a last-resort type of middleware.</source>
          <target state="translated">마지막 유형의 미들웨어이므로 맨 아래에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="a61b6acb4a934e58af44ca35a08d08e5dd4ce1ff" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if adding an inline object is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. &lt;code&gt;obj&lt;/code&gt; is the parent object being edited or &lt;code&gt;None&lt;/code&gt; when adding a new parent.</source>
          <target state="translated">반환해야 &lt;code&gt;True&lt;/code&gt; 인라인 개체를 추가하는 것은 허용되는 경우 &lt;code&gt;False&lt;/code&gt; 이 없습니다. &lt;code&gt;obj&lt;/code&gt; 는 편집중인 부모 개체이거나 새 부모를 추가 할 때는 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4161c2b557a65c3863b16566bb470eb3ee69270a" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if adding an object is permitted, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">반환해야 &lt;code&gt;True&lt;/code&gt; 객체를 추가하는 것은 허용되는 경우 &lt;code&gt;False&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="ed7867ab59f158050fb9450af380050acc73703f" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if deleting &lt;code&gt;obj&lt;/code&gt; is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. If &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, should return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to indicate whether deleting objects of this type is permitted in general (e.g., &lt;code&gt;False&lt;/code&gt; will be interpreted as meaning that the current user is not permitted to delete any object of this type).</source>
          <target state="translated">반환해야 &lt;code&gt;True&lt;/code&gt; 삭제하면 &lt;code&gt;obj&lt;/code&gt; 허용됩니다 &lt;code&gt;False&lt;/code&gt; 그렇지. 경우 &lt;code&gt;obj&lt;/code&gt; 가 없습니다 &lt;code&gt;None&lt;/code&gt; , 반환해야합니다 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 이 유형의 삭제 개체는 일반적으로 허용된다 (예를 들어, 여부를 나타 내기 위해 &lt;code&gt;False&lt;/code&gt; 현재 사용자가이 유형의 개체를 삭제하는 것이 허용되지 않는다는 것을 의미하는 것으로 해석됩니다).</target>
        </trans-unit>
        <trans-unit id="39d6973541351798d6dd56aa7140384c0a5b4263" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if deleting an inline object is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. &lt;code&gt;obj&lt;/code&gt; is the parent object being edited.</source>
          <target state="translated">인라인 객체 삭제가 허용되면 &lt;code&gt;True&lt;/code&gt; 를 반환 하고 &lt;code&gt;False&lt;/code&gt; 않으면 False를 반환합니다. &lt;code&gt;obj&lt;/code&gt; 는 편집중인 부모 객체입니다.</target>
        </trans-unit>
        <trans-unit id="86247f2a73736ffe3ef50a6443204e9742e03c0c" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if displaying the module on the admin index page and accessing the module&amp;rsquo;s index page is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. Uses &lt;a href=&quot;../auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;User.has_module_perms()&lt;/code&gt;&lt;/a&gt; by default. Overriding it does not restrict access to the view, add, change, or delete views, &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_view_permission&quot;&gt;&lt;code&gt;has_view_permission()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_add_permission&quot;&gt;&lt;code&gt;has_add_permission()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt;&lt;code&gt;has_change_permission()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_delete_permission&quot;&gt;&lt;code&gt;has_delete_permission()&lt;/code&gt;&lt;/a&gt; should be used for that.</source>
          <target state="translated">관리자 색인 페이지에 모듈을 표시하고 모듈의 색인 페이지에 액세스 할 수 있으면 &lt;code&gt;True&lt;/code&gt; 를 반환 하고 그렇지 않으면 &lt;code&gt;False&lt;/code&gt; 를 반환합니다. 기본적으로 &lt;a href=&quot;../auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;User.has_module_perms()&lt;/code&gt; &lt;/a&gt; 를 사용합니다 . 재정의해도 뷰에 대한 액세스, 뷰 추가, 변경 또는 삭제, &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_view_permission&quot;&gt; &lt;code&gt;has_view_permission()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_add_permission&quot;&gt; &lt;code&gt;has_add_permission()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt; &lt;code&gt;has_change_permission()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.has_delete_permission&quot;&gt; &lt;code&gt;has_delete_permission()&lt;/code&gt; &lt;/a&gt; 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="30dea5b0ad1fc4b04533c7581b96ecf171094fb5" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if editing &lt;code&gt;obj&lt;/code&gt; is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. If &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, should return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to indicate whether editing of objects of this type is permitted in general (e.g., &lt;code&gt;False&lt;/code&gt; will be interpreted as meaning that the current user is not permitted to edit any object of this type).</source>
          <target state="translated">반환해야 &lt;code&gt;True&lt;/code&gt; 편집 할 경우 &lt;code&gt;obj&lt;/code&gt; 허용됩니다 &lt;code&gt;False&lt;/code&gt; 그렇지. 경우 &lt;code&gt;obj&lt;/code&gt; 가 없습니다 &lt;code&gt;None&lt;/code&gt; , 반환해야합니다 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 이 유형의 개체 편집하는 것은 일반적으로 허용된다 (예를 들어, 여부를 나타 내기 위해 &lt;code&gt;False&lt;/code&gt; 현재 사용자가 편집이 유형의 개체를 허용하지 않는 것을 의미하는 것으로 해석됩니다).</target>
        </trans-unit>
        <trans-unit id="ee4a81ea29e04f0e25ec548b0a554497342f5d50" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if editing an inline object is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. &lt;code&gt;obj&lt;/code&gt; is the parent object being edited.</source>
          <target state="translated">인라인 개체 편집이 허용되면 &lt;code&gt;True&lt;/code&gt; 를 반환 하고 &lt;code&gt;False&lt;/code&gt; 않으면 False를 반환합니다. &lt;code&gt;obj&lt;/code&gt; 는 편집중인 부모 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4ab07be1e4a2f63b3d2ade3c3148c1caefa546bf" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;True&lt;/code&gt; if viewing &lt;code&gt;obj&lt;/code&gt; is permitted, &lt;code&gt;False&lt;/code&gt; otherwise. If obj is &lt;code&gt;None&lt;/code&gt;, should return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to indicate whether viewing of objects of this type is permitted in general (e.g., &lt;code&gt;False&lt;/code&gt; will be interpreted as meaning that the current user is not permitted to view any object of this type).</source>
          <target state="translated">반환해야 &lt;code&gt;True&lt;/code&gt; 보는 경우 &lt;code&gt;obj&lt;/code&gt; 허용됩니다 &lt;code&gt;False&lt;/code&gt; 그렇지. obj가 &lt;code&gt;None&lt;/code&gt; 이면 이 유형의 객체보기가 일반적으로 허용되는지 여부를 나타내려면 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 를 반환해야합니다 (예 : &lt;code&gt;False&lt;/code&gt; 는 현재 사용자가이 유형의 객체를 볼 수 없음을 의미하는 것으로 해석 됨).</target>
        </trans-unit>
        <trans-unit id="fa999095c9fda3e450c8cbc18a32ed1b7f128f04" translate="yes" xml:space="preserve">
          <source>Should return the actual name of name of the file saved (usually the &lt;code&gt;name&lt;/code&gt; passed in, but if the storage needs to change the file name return the new name instead).</source>
          <target state="translated">저장된 파일 이름의 실제 이름을 반환해야합니다 (일반적으로 전달 된 &lt;code&gt;name&lt;/code&gt; 이지만 저장소에서 파일 이름을 변경해야하는 경우 대신 새 이름을 반환).</target>
        </trans-unit>
        <trans-unit id="f070afee584e5151c2354a21e0889d6ff2160373" translate="yes" xml:space="preserve">
          <source>Shows all migrations in a project. You can choose from one of two formats:</source>
          <target state="translated">프로젝트의 모든 마이그레이션을 표시합니다. 두 가지 형식 중 하나를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c814ac75a94960d602836460f27363550ae680c" translate="yes" xml:space="preserve">
          <source>Shows the migration operations that will be performed for the given &lt;code&gt;migrate&lt;/code&gt; command.</source>
          <target state="translated">지정된 &lt;code&gt;migrate&lt;/code&gt; 명령에 대해 수행 될 마이그레이션 작업을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="d2c59cc942c1446e47f0fc9957da215e262e5780" translate="yes" xml:space="preserve">
          <source>Shows the migration plan Django will follow to apply migrations. Like &lt;code&gt;--list&lt;/code&gt;, applied migrations are marked by an &lt;code&gt;[X]&lt;/code&gt;. For a &lt;code&gt;--verbosity&lt;/code&gt; of 2 and above, all dependencies of a migration will also be shown.</source>
          <target state="translated">Django가 마이그레이션을 적용하기 위해 따르는 마이그레이션 계획을 보여줍니다. &lt;code&gt;--list&lt;/code&gt; 와 마찬가지로 적용된 마이그레이션은 &lt;code&gt;[X]&lt;/code&gt; 로 표시됩니다 . A에 대한 &lt;code&gt;--verbosity&lt;/code&gt; 2 위의, 이주 모든 의존성도 도시한다.</target>
        </trans-unit>
        <trans-unit id="0ecb559f1ca7e99d214210982e365a773ac40a6f" translate="yes" xml:space="preserve">
          <source>Shows what migrations would be made without actually writing any migrations files to disk. Using this option along with &lt;code&gt;--verbosity 3&lt;/code&gt; will also show the complete migrations files that would be written.</source>
          <target state="translated">실제로 마이그레이션 파일을 디스크에 쓰지 않고 마이그레이션을 수행하는 방법을 보여줍니다. 이 옵션을 &lt;code&gt;--verbosity 3&lt;/code&gt; 과 함께 사용하면 작성 될 전체 마이그레이션 파일도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="19a52875b93c94a58094975a230f4221b31a518b" translate="yes" xml:space="preserve">
          <source>Sign &lt;code&gt;value&lt;/code&gt; and append current timestamp to it.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 서명 하고 현재 타임 스탬프를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="2179f2424b312cba799925391bd4015c33e1c8a2" translate="yes" xml:space="preserve">
          <source>Signals are implicit function calls which make debugging harder. If the sender and receiver of your custom signal are both within your project, you&amp;rsquo;re better off using an explicit function call.</source>
          <target state="translated">신호는 암시적인 함수 호출로 디버깅을 어렵게 만듭니다. 사용자 정의 신호의 발신자와 수신자가 모두 프로젝트 내에있는 경우 명시적인 함수 호출을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ab2bb138d6a55597db887035bb3f8637617ba2c3" translate="yes" xml:space="preserve">
          <source>Signals only sent when &lt;a href=&quot;../topics/testing/overview#running-tests&quot;&gt;running tests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/testing/overview#running-tests&quot;&gt;테스트를 실행할&lt;/a&gt; 때만 보내지는 신호 .</target>
        </trans-unit>
        <trans-unit id="40ca6cebaeaf523355bf260955031f58782457c6" translate="yes" xml:space="preserve">
          <source>Signals sent by &lt;a href=&quot;django-admin&quot;&gt;django-admin&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;django-admin&quot;&gt;django-admin이&lt;/a&gt; 보낸 신호 .</target>
        </trans-unit>
        <trans-unit id="2cb189a181447a9630bb12cea3a86802f018eb0f" translate="yes" xml:space="preserve">
          <source>Signals sent by the core framework when processing a request.</source>
          <target state="translated">요청을 처리 할 때 코어 프레임 워크에서 전송 한 신호.</target>
        </trans-unit>
        <trans-unit id="f5ccd48fbffe6c12334095e4eac6e84f519cc03a" translate="yes" xml:space="preserve">
          <source>Signals sent by the database wrapper when a database connection is initiated.</source>
          <target state="translated">데이터베이스 연결이 시작될 때 데이터베이스 랩퍼가 보낸 신호.</target>
        </trans-unit>
        <trans-unit id="9c43d93addd3410bda3aefd8f9311efccc69e2e9" translate="yes" xml:space="preserve">
          <source>Signals that this template extends a parent template.</source>
          <target state="translated">이 템플릿이 부모 템플릿을 확장한다는 것을 알립니다.</target>
        </trans-unit>
        <trans-unit id="a8debf91f8821ef2f21b92447ce37ac3cdc5fb83" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;e.save()&lt;/code&gt; is called in the example above to perform the update. Using &lt;code&gt;remove()&lt;/code&gt; with a many-to-many relationship, however, will delete the relationships using &lt;a href=&quot;querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;QuerySet.delete()&lt;/code&gt;&lt;/a&gt; which means no model &lt;code&gt;save()&lt;/code&gt; methods are called; listen to the &lt;a href=&quot;../signals#django.db.models.signals.m2m_changed&quot;&gt;&lt;code&gt;m2m_changed&lt;/code&gt;&lt;/a&gt; signal if you wish to execute custom code when a relationship is deleted.</source>
          <target state="translated">유사한, &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;e.save()&lt;/code&gt; 업데이트를 수행하는 상기 예에서 호출된다. 사용하여 &lt;code&gt;remove()&lt;/code&gt; 다 대다 관계를, 그러나 사용하여 관계 삭제됩니다 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;QuerySet.delete()&lt;/code&gt; &lt;/a&gt; 아니오 모델 의미 &lt;code&gt;save()&lt;/code&gt; 메소드가 호출된다 관계가 삭제 될 때 사용자 정의 코드를 실행 하려면 &lt;a href=&quot;../signals#django.db.models.signals.m2m_changed&quot;&gt; &lt;code&gt;m2m_changed&lt;/code&gt; &lt;/a&gt; 신호를 수신하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa1cbf3c161c5c409bf7e9181b4519e9321e704f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.db.models.functions.LPad&quot;&gt;&lt;code&gt;LPad&lt;/code&gt;&lt;/a&gt;, but pads on the right side.</source>
          <target state="translated">유사 &lt;a href=&quot;#django.db.models.functions.LPad&quot;&gt; &lt;code&gt;LPad&lt;/code&gt; &lt;/a&gt; 오른쪽에 있지만, 패드.</target>
        </trans-unit>
        <trans-unit id="2f2d7cb87f39f717cf02e7843db92d0976389fd2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.db.models.functions.Trim&quot;&gt;&lt;code&gt;Trim&lt;/code&gt;&lt;/a&gt;, but removes only leading spaces.</source>
          <target state="translated">유사 &lt;a href=&quot;#django.db.models.functions.Trim&quot;&gt; &lt;code&gt;Trim&lt;/code&gt; &lt;/a&gt; 만 제거합니다에만 공백을 선도.</target>
        </trans-unit>
        <trans-unit id="74cc060a0095d828a58c4ef3bb02b411b26a1f7f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.db.models.functions.Trim&quot;&gt;&lt;code&gt;Trim&lt;/code&gt;&lt;/a&gt;, but removes only trailing spaces.</source>
          <target state="translated">유사 &lt;a href=&quot;#django.db.models.functions.Trim&quot;&gt; &lt;code&gt;Trim&lt;/code&gt; &lt;/a&gt; 만 제거합니다에만 후행 공백을.</target>
        </trans-unit>
        <trans-unit id="2a3fa8a9e5b4fc529d30ed1b2ec46931f0eca728" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.DateInput.format&quot;&gt;&lt;code&gt;DateInput.format&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.forms.DateInput.format&quot;&gt; &lt;code&gt;DateInput.format&lt;/code&gt; 과&lt;/a&gt; 유사</target>
        </trans-unit>
        <trans-unit id="86687c835c38a6983c5066e56cabaa07e7ea44ab" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.Select&quot;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt;, but allows multiple selection: &lt;code&gt;&amp;lt;select multiple&amp;gt;...&amp;lt;/select&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Select&quot;&gt; &lt;code&gt;Select&lt;/code&gt; &lt;/a&gt; 과 유사 하지만 다중 선택 가능 : &lt;code&gt;&amp;lt;select multiple&amp;gt;...&amp;lt;/select&amp;gt;&lt;/code&gt; 복수 선택 &amp;gt; ... &amp;lt;/ select&amp;gt;</target>
        </trans-unit>
        <trans-unit id="44e9cf94c8a839ec893eae0ef20a63cf8b7f914d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.Select&quot;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt;, but rendered as a list of radio buttons within &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags:</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Select&quot;&gt; &lt;code&gt;Select&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그 내의 라디오 버튼 목록으로 렌더링됩니다 .</target>
        </trans-unit>
        <trans-unit id="83da217ea4ec6e2adc48b3c174609e5bc260d551" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.SelectMultiple&quot;&gt;&lt;code&gt;SelectMultiple&lt;/code&gt;&lt;/a&gt;, but rendered as a list of checkboxes:</source>
          <target state="translated">&lt;a href=&quot;#django.forms.SelectMultiple&quot;&gt; &lt;code&gt;SelectMultiple&lt;/code&gt; &lt;/a&gt; 과 유사 하지만 확인란 목록으로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="8be6852b789da8d905da912f5699d62ec9bec4f0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.SplitDateTimeWidget&quot;&gt;&lt;code&gt;SplitDateTimeWidget&lt;/code&gt;&lt;/a&gt;, but uses &lt;a href=&quot;#django.forms.HiddenInput&quot;&gt;&lt;code&gt;HiddenInput&lt;/code&gt;&lt;/a&gt; for both date and time.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.SplitDateTimeWidget&quot;&gt; &lt;code&gt;SplitDateTimeWidget&lt;/code&gt; &lt;/a&gt; 과 유사 하지만 날짜와 시간 모두에 대해 &lt;a href=&quot;#django.forms.HiddenInput&quot;&gt; &lt;code&gt;HiddenInput&lt;/code&gt; &lt;/a&gt; 을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="f12c7f51ba93d84b2fbfff1bd2dcd7a8dcefc91a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.TimeInput.format&quot;&gt;&lt;code&gt;TimeInput.format&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.forms.TimeInput.format&quot;&gt; &lt;code&gt;TimeInput.format&lt;/code&gt; 과&lt;/a&gt; 유사</target>
        </trans-unit>
        <trans-unit id="9e62068127fd9d1a565ef9278774b259ed68a379" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;Widget.attrs&lt;/code&gt;&lt;/a&gt;. A dictionary containing HTML attributes to be set on the rendered &lt;a href=&quot;#django.forms.DateInput&quot;&gt;&lt;code&gt;DateInput&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.TimeInput&quot;&gt;&lt;code&gt;TimeInput&lt;/code&gt;&lt;/a&gt; widgets, respectively. If these attributes aren&amp;rsquo;t set, &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;Widget.attrs&lt;/code&gt;&lt;/a&gt; is used instead.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt; &lt;code&gt;Widget.attrs&lt;/code&gt; &lt;/a&gt; 와 유사 합니다 . 렌더링 된 &lt;a href=&quot;#django.forms.DateInput&quot;&gt; &lt;code&gt;DateInput&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.forms.TimeInput&quot;&gt; &lt;code&gt;TimeInput&lt;/code&gt; &lt;/a&gt; 위젯에서 각각 설정할 HTML 속성이 포함 된 사전 입니다. 이러한 속성을 설정하지 않으면 &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt; &lt;code&gt;Widget.attrs&lt;/code&gt; &lt;/a&gt; 가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="57babeca1dfc7f2b59a3076547e7ae730ba3f841" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#std:templatefilter-truncatechars&quot;&gt;&lt;code&gt;truncatechars&lt;/code&gt;&lt;/a&gt;, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point are closed immediately after the truncation.</source>
          <target state="translated">HTML 태그를 인식한다는 점을 제외하고 &lt;a href=&quot;#std:templatefilter-truncatechars&quot;&gt; &lt;code&gt;truncatechars&lt;/code&gt; &lt;/a&gt; 와 유사 합니다. 문자열에서 열리고 잘림 지점 전에 닫히지 않은 태그는 잘린 직후에 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="8d60844f62a755c9e5814d485768ecd7d6f7071c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#std:templatefilter-truncatewords&quot;&gt;&lt;code&gt;truncatewords&lt;/code&gt;&lt;/a&gt;, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation.</source>
          <target state="translated">HTML 태그를 인식한다는 점을 제외하고 &lt;a href=&quot;#std:templatefilter-truncatewords&quot;&gt; &lt;code&gt;truncatewords&lt;/code&gt; &lt;/a&gt; 와 유사 합니다. 문자열에서 열리고 잘림 지점 전에 닫히지 않은 태그는 잘린 직후에 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="af4aca60f57e036c2360483d6887e744d8a4ec27" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;https://docs.python.org/3/library/functions.html#classmethod&quot;&gt;&lt;code&gt;@classmethod&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;@classproperty&lt;/code&gt; decorator converts the result of a method with a single &lt;code&gt;cls&lt;/code&gt; argument into a property that can be accessed directly from the class.</source>
          <target state="translated">Similar to &lt;a href=&quot;https://docs.python.org/3/library/functions.html#classmethod&quot;&gt; &lt;code&gt;@classmethod&lt;/code&gt; &lt;/a&gt;, the &lt;code&gt;@classproperty&lt;/code&gt; decorator converts the result of a method with a single &lt;code&gt;cls&lt;/code&gt; argument into a property that can be accessed directly from the class.</target>
        </trans-unit>
        <trans-unit id="c43734047a0f7462617df980c5b9d963c1c2bac7" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;can_order&lt;/code&gt; this adds a new field to each form named &lt;code&gt;DELETE&lt;/code&gt; and is a &lt;code&gt;forms.BooleanField&lt;/code&gt;. When data comes through marking any of the delete fields you can access them with &lt;code&gt;deleted_forms&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;can_order&lt;/code&gt; 와 유사하게 이름이 &lt;code&gt;DELETE&lt;/code&gt; 인 각 양식에 새 필드를 추가 하며 &lt;code&gt;forms.BooleanField&lt;/code&gt; 입니다. 데이터가 삭제 필드를 표시하면, &lt;code&gt;deleted_forms&lt;/code&gt; 로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7c0b6c216844d97be2d95b352619e1d1253a278" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;escape()&lt;/code&gt;, except that it doesn&amp;rsquo;t operate on pre-escaped strings, so it will not double escape.</source>
          <target state="translated">사전 이스케이프 된 문자열에서 작동하지 않는다는 점을 제외하고는 &lt;code&gt;escape()&lt;/code&gt; 와 유사 하므로 이중 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="675cbd53aa99e7bee2d89a46281338c2599a64e5" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;smart_bytes&lt;/code&gt;, except that lazy instances are resolved to bytestrings, rather than kept as lazy objects.</source>
          <target state="translated">지연 인스턴스는 지연 오브젝트로 유지되지 않고 &lt;code&gt;smart_bytes&lt;/code&gt; 로 해석된다는 점을 제외하고 smart_bytes 와 유사 합니다.</target>
        </trans-unit>
        <trans-unit id="104947765387dcd948510330bf9e19346561b89d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;smart_str()&lt;/code&gt;, except that lazy instances are resolved to strings, rather than kept as lazy objects.</source>
          <target state="translated">지연 인스턴스는 지연 오브젝트로 유지되지 않고 문자열로 해석된다는 점을 제외하고 &lt;code&gt;smart_str()&lt;/code&gt; 과 유사 합니다.</target>
        </trans-unit>
        <trans-unit id="a9d81697914896bfa780cd919e1bbbcfbf5563b7" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;timesince&lt;/code&gt;, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and &lt;code&gt;conference_date&lt;/code&gt; is a date instance holding 29 June 2006, then &lt;code&gt;{{ conference_date|timeuntil }}&lt;/code&gt; will return &amp;ldquo;4 weeks&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;timesince&lt;/code&gt; 와 유사 하지만 지금부터 주어진 날짜 또는 날짜 시간까지의 시간을 측정한다는 점이 다릅니다. 예를 들어 오늘이 2006 년 6 월 1 일이고 &lt;code&gt;conference_date&lt;/code&gt; 가 2006 년 6 월 29 일을 보유한 날짜 인스턴스 인 경우 &lt;code&gt;{{ conference_date|timeuntil }}&lt;/code&gt; 은 &quot;4 주&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8e3ebafc9aa514a1a16623ae6016856389dcbe23" translate="yes" xml:space="preserve">
          <source>Similar to the &amp;ldquo;references to historical functions&amp;rdquo; considerations described in the previous section, removing custom model fields from your project or third-party app will cause a problem if they are referenced in old migrations.</source>
          <target state="translated">이전 섹션에서 설명한&amp;ldquo;이력 함수에 대한 참조&amp;rdquo;고려 사항과 유사하게 프로젝트 또는 타사 앱에서 사용자 지정 모델 필드를 제거하면 이전 마이그레이션에서 참조되는 경우 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cab700196b96532cbd0627273bb50c3753e69207" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;a href=&quot;#std:templatetag-get_static_prefix&quot;&gt;&lt;code&gt;get_static_prefix&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;get_media_prefix&lt;/code&gt; populates a template variable with the media prefix &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt;, e.g.:</source>
          <target state="translated">&lt;a href=&quot;#std:templatetag-get_static_prefix&quot;&gt; &lt;code&gt;get_static_prefix&lt;/code&gt; &lt;/a&gt; 와 유사하게 &lt;code&gt;get_media_prefix&lt;/code&gt; 는 다음과 같이 미디어 접두사 &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 로 템플리트 변수를 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="04e23fd6396b222e17a5d7007a450f9ef70e78a6" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;CSRF limitations&lt;/a&gt; requiring a site to be deployed such that untrusted users don&amp;rsquo;t have access to any subdomains, &lt;a href=&quot;http/sessions#module-django.contrib.sessions&quot;&gt;&lt;code&gt;django.contrib.sessions&lt;/code&gt;&lt;/a&gt; also has limitations. See &lt;a href=&quot;http/sessions#topics-session-security&quot;&gt;the session topic guide section on security&lt;/a&gt; for details.</source>
          <target state="translated">신뢰할 수없는 사용자가 하위 도메인에 액세스 할 수 없도록 사이트를 배포해야하는 &lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;CSRF 제한과&lt;/a&gt; 마찬가지로 &lt;a href=&quot;http/sessions#module-django.contrib.sessions&quot;&gt; &lt;code&gt;django.contrib.sessions&lt;/code&gt; &lt;/a&gt; 에도 제한이 있습니다. 참조 &lt;a href=&quot;http/sessions#topics-session-security&quot;&gt;보안에 대한 세션 주제 가이드 부&lt;/a&gt; 자세한 내용을.</target>
        </trans-unit>
        <trans-unit id="fe72a5c5994b330128a039d3b6c0b3fe40f9753f" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;remove()&lt;/code&gt; also accepts the field the relation points to as an argument. The above example can be rewritten as &lt;code&gt;b.entry_set.remove(234)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 &lt;code&gt;remove()&lt;/code&gt; 도 관계가 가리키는 필드를 인수로 허용합니다. 위의 예는 &lt;code&gt;b.entry_set.remove(234)&lt;/code&gt; 로 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9553ed920ea1657b2512210340abf2c38973a382" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;set()&lt;/code&gt; also accepts the field the relation points to as an argument. The above example can be rewritten as &lt;code&gt;e.related_set.set([obj1.pk, obj2.pk, obj3.pk])&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 &lt;code&gt;set()&lt;/code&gt; 도 관계가 가리키는 필드를 인수로 허용합니다. 위의 예는 &lt;code&gt;e.related_set.set([obj1.pk, obj2.pk, obj3.pk])&lt;/code&gt; 로 다시 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58082351132ca5fbd7c5b85008ef996f6c70f3bf" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;a href=&quot;../models/querysets&quot;&gt;QuerySets&lt;/a&gt; provide a &lt;code&gt;count()&lt;/code&gt; method to count the number of objects they contain. Therefore, you can obtain a count of all comments related to the current task with:</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../models/querysets&quot;&gt;QuerySet&lt;/a&gt; 은 &lt;code&gt;count()&lt;/code&gt; 메서드를 제공하여 포함 된 개체 수를 계산합니다. 따라서 다음을 사용하여 현재 작업과 관련된 모든 주석 수를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab42ac8e63f0adecab040af094dd1273f9a98206" translate="yes" xml:space="preserve">
          <source>Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view &lt;code&gt;django.views.defaults.server_error&lt;/code&gt;, which either produces a &amp;ldquo;Server Error&amp;rdquo; message or loads and renders the template &lt;code&gt;500.html&lt;/code&gt; if you created it in your root template directory.</source>
          <target state="translated">마찬가지로 Django는 뷰 코드에서 런타임 오류가 발생하는 경우 특수한 동작을 실행합니다. 예외의 결과보기는 장고는 기본적으로 뷰 호출 할 경우 &lt;code&gt;django.views.defaults.server_error&lt;/code&gt; 중 하나 &quot;서버 오류&quot;메시지 또는 부하를 생성하고 템플릿 렌더링, &lt;code&gt;500.html&lt;/code&gt; 을 당신이 당신의 루트를 만든 경우를 템플릿 디렉토리.</target>
        </trans-unit>
        <trans-unit id="7309a92ee9e1847fd539b0dc080e4438970672c6" translate="yes" xml:space="preserve">
          <source>Similarly, Django provides &lt;a href=&quot;utils#django.utils.encoding.uri_to_iri&quot;&gt;&lt;code&gt;django.utils.encoding.uri_to_iri()&lt;/code&gt;&lt;/a&gt; which implements the conversion from URI to IRI as per &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 3987#section-3.2&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 Django는 &lt;a href=&quot;utils#django.utils.encoding.uri_to_iri&quot;&gt; &lt;code&gt;django.utils.encoding.uri_to_iri()&lt;/code&gt; &lt;/a&gt; 를 제공 하며 &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 3987 # section-3.2에&lt;/strong&gt;&lt;/a&gt; 따라 URI에서 IRI 로의 변환을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="9b46683a15d3fc53bd17f3bbea3cbbdfdba9c0a5" translate="yes" xml:space="preserve">
          <source>Similarly, Django provides &lt;a href=&quot;utils#django.utils.encoding.uri_to_iri&quot;&gt;&lt;code&gt;django.utils.encoding.uri_to_iri()&lt;/code&gt;&lt;/a&gt; which implements the conversion from URI to IRI as per &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3987#section-3.2&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Similarly, Django provides &lt;a href=&quot;utils#django.utils.encoding.uri_to_iri&quot;&gt; &lt;code&gt;django.utils.encoding.uri_to_iri()&lt;/code&gt; &lt;/a&gt; which implements the conversion from URI to IRI as per &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3987#section-3.2&lt;/strong&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0370e41c8b95e4467e55ee8c314289169a65fe99" translate="yes" xml:space="preserve">
          <source>Similarly, Django will complain if more than one item matches the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; query. In this case, it will raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt;, which again is an attribute of the model class itself.</source>
          <target state="translated">마찬가지로 장고는 둘 이상의 항목이 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 쿼리 와 일치하면 불만을 표시 합니다. 이 경우 모델 클래스 자체의 속성 인 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="863cdc071865bede461e047fe7e658383bf41fc8" translate="yes" xml:space="preserve">
          <source>Similarly, a couple of other bits of Django, such as the &lt;a href=&quot;../contrib/syndication&quot;&gt;syndication feed framework&lt;/a&gt;, use &lt;code&gt;get_absolute_url()&lt;/code&gt; when it is defined. If it makes sense for your model&amp;rsquo;s instances to each have a unique URL, you should define &lt;code&gt;get_absolute_url()&lt;/code&gt;.</source>
          <target state="translated">마찬가지로, 예로서 장고의 다른 비트의 커플 &lt;a href=&quot;../contrib/syndication&quot;&gt;신디케이션 피드 틀&lt;/a&gt; 사용 &lt;code&gt;get_absolute_url()&lt;/code&gt; 가 정의된다. 모델의 인스턴스마다 고유 한 URL이있는 것이 의미가있는 경우 &lt;code&gt;get_absolute_url()&lt;/code&gt; 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2462d3488df835366d0db331efbf07cddf80050a" translate="yes" xml:space="preserve">
          <source>Similarly, data that can&amp;rsquo;t be encoded in JSON, such as non-UTF8 bytes like &lt;code&gt;'\xd9'&lt;/code&gt; (which raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError&quot;&gt;&lt;code&gt;UnicodeDecodeError&lt;/code&gt;&lt;/a&gt;), can&amp;rsquo;t be stored.</source>
          <target state="translated">마찬가지로 &lt;code&gt;'\xd9'&lt;/code&gt; 와 같은 UTF8 이외의 바이트 ( &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError&quot;&gt; &lt;code&gt;UnicodeDecodeError&lt;/code&gt; 발생&lt;/a&gt; ) 와 같이 JSON으로 인코딩 할 수없는 데이터는 저장할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="31549e7b497ca81d9266efabccd6ec6cb1627e42" translate="yes" xml:space="preserve">
          <source>Similarly, fields defined declaratively do not draw their attributes like &lt;code&gt;max_length&lt;/code&gt; or &lt;code&gt;required&lt;/code&gt; from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field.</source>
          <target state="translated">마찬가지로 선언적으로 정의 된 필드는 &lt;code&gt;max_length&lt;/code&gt; 와 같은 속성을 그리 거나 해당 모델에서 &lt;code&gt;required&lt;/code&gt; 로 하지 않습니다 . 모델에 지정된 동작을 유지하려면 양식 필드를 선언 할 때 관련 인수를 명시 적으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="3df71fc13d5b3c7c28086a01df560e69297478d0" translate="yes" xml:space="preserve">
          <source>Similarly, if the formset has the ability to order (&lt;code&gt;can_order=True&lt;/code&gt;), it is possible to render it with &lt;code&gt;{{ form.ORDER }}&lt;/code&gt;.</source>
          <target state="translated">마찬가지로, formset에 주문 기능 ( &lt;code&gt;can_order=True&lt;/code&gt; )이 있으면 &lt;code&gt;{{ form.ORDER }}&lt;/code&gt; 로 렌더링 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9c1cf066eef5d91c3032554bf1a989ef032d3e0" translate="yes" xml:space="preserve">
          <source>Similarly, if you use a &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; query to restrict the columns selected, the columns used in any &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; (or default model ordering) will still be involved and may affect uniqueness of the results.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; 쿼리를 사용하여 선택한 열을 제한하는 경우 &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; (또는 기본 모델 순서)에 사용 된 열 이 계속 포함되어 결과의 고유성에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16b6163ccb8f756325cb9dd4a0f11f0685539186" translate="yes" xml:space="preserve">
          <source>Similarly, on Red Hat and CentOS systems:</source>
          <target state="translated">마찬가지로 Red Hat 및 CentOS 시스템에서 :</target>
        </trans-unit>
        <trans-unit id="36d7d9012aa3409f16056b841d47286ba62926f1" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; generic view uses a default template called &lt;code&gt;&amp;lt;app name&amp;gt;/&amp;lt;model
name&amp;gt;_list.html&lt;/code&gt;; we use &lt;code&gt;template_name&lt;/code&gt; to tell &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; to use our existing &lt;code&gt;&quot;polls/index.html&quot;&lt;/code&gt; template.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 일반보기는 &lt;code&gt;&amp;lt;app name&amp;gt;/&amp;lt;model name&amp;gt;_list.html&lt;/code&gt; 이라는 기본 템플릿을 사용합니다 . &lt;code&gt;template_name&lt;/code&gt; 을 사용 하여 &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 에 기존 &lt;code&gt;&quot;polls/index.html&quot;&lt;/code&gt; 템플릿 을 사용하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="87e7d0bbf6a707473314126f03169984f6a24c7e" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;expires&lt;/code&gt; part of a session cookie is updated each time the session cookie is sent.</source>
          <target state="translated">마찬가지로 세션 쿠키가 &lt;code&gt;expires&lt;/code&gt; 될 때마다 세션 쿠키가 전송 될 때마다 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="cffac2418d6640b3199498de3b14a18222fe7de6" translate="yes" xml:space="preserve">
          <source>Similarly, the current effective level can be retrieved with &lt;code&gt;get_level&lt;/code&gt;:</source>
          <target state="translated">마찬가지로 현재 유효 레벨은 &lt;code&gt;get_level&lt;/code&gt; 을 사용 하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="40e6c77873921e5941f690411854f1258bcf763d" translate="yes" xml:space="preserve">
          <source>Similarly, what if the name contained a &lt;code&gt;'&amp;lt;'&lt;/code&gt; symbol, like this?</source>
          <target state="translated">마찬가지로 이름에 &lt;code&gt;'&amp;lt;'&lt;/code&gt; 기호가 포함되어 있으면 어떻게 됩니까?</target>
        </trans-unit>
        <trans-unit id="e5855f571b87eeca52e71d5d3cdfe1be2b4b7077" translate="yes" xml:space="preserve">
          <source>Similarly, when querying a reverse foreign key, &lt;code&gt;None&lt;/code&gt; appears for entries not having any author:</source>
          <target state="translated">마찬가지로 역 외래 키를 쿼리 할 때 작성자가없는 항목에는 &lt;code&gt;None&lt;/code&gt; 나타납니다.</target>
        </trans-unit>
        <trans-unit id="29662e616beed5aff4427d7439c1d3cc2f18696d" translate="yes" xml:space="preserve">
          <source>Similarly, you can associate a model to the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; model in a many-to-one relationship, using &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 를&lt;/a&gt; 사용하여 모델을 다 대일 관계로 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 모델에 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4740361937f4c5fe6f7b908f9d221f12c914f70" translate="yes" xml:space="preserve">
          <source>Similarly, you can pass extra options to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; and each line in the included URLconf will be passed the extra options.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt; 추가 옵션을 전달 하면 포함 된 URLconf의 각 행에 추가 옵션이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8fcdd1bd18644200f83cfc979025b7ab1f51e135" translate="yes" xml:space="preserve">
          <source>Similarly, you can specify the &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;help_texts&lt;/code&gt; and &lt;code&gt;error_messages&lt;/code&gt; attributes of the inner &lt;code&gt;Meta&lt;/code&gt; class if you want to further customize a field.</source>
          <target state="translated">마찬가지로 필드를 추가로 사용자 정의하려는 경우 내부 &lt;code&gt;Meta&lt;/code&gt; 클래스 의 &lt;code&gt;labels&lt;/code&gt; , &lt;code&gt;help_texts&lt;/code&gt; 및 &lt;code&gt;error_messages&lt;/code&gt; 속성을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="760873c6c6dd35108a40595027a1a2bd00967ac7" translate="yes" xml:space="preserve">
          <source>Similarly, you may also use a &lt;a href=&quot;geos&quot;&gt;GEOS geometry object&lt;/a&gt;. Here, you can combine the &lt;code&gt;intersects&lt;/code&gt; spatial lookup with the &lt;code&gt;get&lt;/code&gt; method to retrieve only the &lt;code&gt;WorldBorder&lt;/code&gt; instance for San Marino instead of a queryset:</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;geos&quot;&gt;GEOS geometry 객체를&lt;/a&gt; 사용할 수도 있습니다 . 여기에서 &lt;code&gt;intersects&lt;/code&gt; 공간 검색을 &lt;code&gt;get&lt;/code&gt; 메소드 와 결합하여 &lt;code&gt;WorldBorder&lt;/code&gt; 대신 San Marino 의 WorldBorder 인스턴스 만 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="192f4c5f953da1f0bc1388e180060f223750055d" translate="yes" xml:space="preserve">
          <source>Simple &lt;a href=&quot;clickjacking&quot;&gt;clickjacking protection via the X-Frame-Options header&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;clickjacking&quot;&gt;X-Frame-Options 헤더를 통한&lt;/a&gt; 간단한 클릭 재킹 방지 .</target>
        </trans-unit>
        <trans-unit id="035bc3518e9f7fc7ce3973464ef2da2d5821df05" translate="yes" xml:space="preserve">
          <source>Simple generic views</source>
          <target state="translated">간단한 일반 뷰</target>
        </trans-unit>
        <trans-unit id="f2ea1bd98e1f60def5d83b35553729cf8dd4d635" translate="yes" xml:space="preserve">
          <source>Simple mixins</source>
          <target state="translated">간단한 믹스 인</target>
        </trans-unit>
        <trans-unit id="15e2b2dfed090dfaf7096a0e39ab3255342015ba" translate="yes" xml:space="preserve">
          <source>Simple tags</source>
          <target state="translated">간단한 태그</target>
        </trans-unit>
        <trans-unit id="779b02c0b6d50c53e776d75100e90b8e12bff632" translate="yes" xml:space="preserve">
          <source>Simplistically, it defines the look-and-feel of the site (with the site&amp;rsquo;s logo), and provides &amp;ldquo;holes&amp;rdquo; for child templates to fill. This means that a site redesign can be done by changing a single file &amp;ndash; the base template.</source>
          <target state="translated">간단히 말해서 사이트의 모양과 느낌 (사이트 로고 포함)을 정의하고 하위 템플릿을 채울 수있는 &quot;구멍&quot;을 제공합니다. 이는 단일 파일 (기본 템플릿)을 변경하여 사이트 재 설계를 수행 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0315b60e56c0c1db548469ca700923652642fead" translate="yes" xml:space="preserve">
          <source>Simply printing the queryset will not populate the cache. This is because the call to &lt;code&gt;__repr__()&lt;/code&gt; only returns a slice of the entire queryset.</source>
          <target state="translated">쿼리 세트를 인쇄하는 것만으로는 캐시가 채워지지 않습니다. &lt;code&gt;__repr__()&lt;/code&gt; 호출 은 전체 쿼리 집합 의 슬라이스 만 반환 하기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="2b93436ff6e66c39bf0d060498ee85041461a83b" translate="yes" xml:space="preserve">
          <source>Simulate GET and POST requests on a URL and observe the response &amp;ndash; everything from low-level HTTP (result headers and status codes) to page content.</source>
          <target state="translated">URL에서 GET 및 POST 요청을 시뮬레이션하고 저수준 HTTP (결과 헤더 및 상태 코드)에서 페이지 컨텐츠에 이르는 모든 응답을 관찰하십시오.</target>
        </trans-unit>
        <trans-unit id="8b1c153b32cf49009a13cff0456fb3b53310f701" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t emitted after flushing the database, its state after a &lt;code&gt;TransactionTestCase&lt;/code&gt; isn&amp;rsquo;t the same as after a &lt;code&gt;TestCase&lt;/code&gt;: it&amp;rsquo;s missing the rows created by listeners to &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt;. Considering the &lt;a href=&quot;overview#order-of-tests&quot;&gt;order in which tests are executed&lt;/a&gt;, this isn&amp;rsquo;t an issue, provided either all &lt;code&gt;TransactionTestCase&lt;/code&gt; in a given test suite declare &lt;code&gt;available_apps&lt;/code&gt;, or none of them.</source>
          <target state="translated">이후 &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; 이&lt;/a&gt; 데이터베이스를 세척 후에는 방출되지하는 후 상태 &lt;code&gt;TransactionTestCase&lt;/code&gt; 는 후 동일하지 않습니다 &lt;code&gt;TestCase&lt;/code&gt; 에 : 그것은 청취자에 의해 생성 된 행 실종 &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; 을&lt;/a&gt; . &lt;a href=&quot;overview#order-of-tests&quot;&gt;테스트가 실행되는 순서를&lt;/a&gt; 고려할 때 , 주어진 테스트 스위트의 모든 &lt;code&gt;TransactionTestCase&lt;/code&gt; 가 &lt;code&gt;available_apps&lt;/code&gt; 를 선언 하거나 그 중 어느 것도 선언 하지 않으면 문제가되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3a1e67dbe24ebfa3b05906bfbd247b2bf8d3c8a2" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;../topics/i18n/translation&quot;&gt;translation&lt;/a&gt; is turned on by default, if you set &lt;a href=&quot;../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt;, the login screen will be displayed in the given language (if Django has appropriate translations).</source>
          <target state="translated">Since &lt;a href=&quot;../topics/i18n/translation&quot;&gt;translation&lt;/a&gt; is turned on by default, if you set &lt;a href=&quot;../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt;, the login screen will be displayed in the given language (if Django has appropriate translations).</target>
        </trans-unit>
        <trans-unit id="faa3f22f5bc395edb16aad24d86e0bb910f57102" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;../topics/i18n/translation&quot;&gt;translation&lt;/a&gt; is turned on by default, the login screen may be displayed in your own language, depending on your browser&amp;rsquo;s settings and if Django has a translation for this language.</source>
          <target state="translated">&lt;a href=&quot;../topics/i18n/translation&quot;&gt;번역&lt;/a&gt; 은 기본적으로 켜져 있으므로 브라우저 설정 및 Django에이 언어에 대한 번역이 있는지 여부에 따라 로그인 화면이 사용자의 언어로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73ec3997a306a3a984f277646297741715a71fc3" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt; is based on &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;, updating your site to use a new secret will invalidate all existing sessions.</source>
          <target state="translated">이후 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt; &lt;code&gt;get_session_auth_hash()&lt;/code&gt; &lt;/a&gt; 을 기반으로 &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 기존의 모든 세션을 무효화하는 새로운 비밀을 사용하도록 사이트를 업데이트.</target>
        </trans-unit>
        <trans-unit id="ad1238e3c1f23afc0fbbb564862f28d3935d589b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Aggregate&lt;/code&gt;s are expressions and wrap expressions, you can represent some complex computations:</source>
          <target state="translated">이후 &lt;code&gt;Aggregate&lt;/code&gt; 의이 표현과 랩 표현, 당신은 몇 가지 복잡한 계산을 나타낼 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="5cb9645e3feabbc26190192e8ba50904e0bdb5cd" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;DateField&lt;/code&gt;s don&amp;rsquo;t have a time component, only &lt;code&gt;Extract&lt;/code&gt; subclasses that deal with date-parts can be used with &lt;code&gt;DateField&lt;/code&gt;:</source>
          <target state="translated">이후 &lt;code&gt;DateField&lt;/code&gt; 구성 의이 시간 컴퍼넌트를 가지지 않기만을 &lt;code&gt;Extract&lt;/code&gt; 날짜 부품 거래와 함께 사용할 수있는 서브 클래스 &lt;code&gt;DateField&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b1a21a54714a8c3fb4ec990884dc6dbb8e0b0066" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;DateField&lt;/code&gt;s don&amp;rsquo;t have a time component, only &lt;code&gt;Trunc&lt;/code&gt; subclasses that deal with date-parts can be used with &lt;code&gt;DateField&lt;/code&gt;:</source>
          <target state="translated">이후 &lt;code&gt;DateField&lt;/code&gt; 구성 의이 시간 컴퍼넌트를 가지지 않기 만 &lt;code&gt;Trunc&lt;/code&gt; 함께 사용할 수있는 날짜 부분과 그 거래 서브 클래스 &lt;code&gt;DateField&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d1ab2ba6f0139da4e0475599769ce4cacb2d3377" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;TimeField&lt;/code&gt;s don&amp;rsquo;t have a date component, only &lt;code&gt;Trunc&lt;/code&gt; subclasses that deal with time-parts can be used with &lt;code&gt;TimeField&lt;/code&gt;:</source>
          <target state="translated">이후 &lt;code&gt;TimeField&lt;/code&gt; 의 의가 날짜 구성 요소가없는 만 &lt;code&gt;Trunc&lt;/code&gt; 함께 사용할 수있는 시간이 부품이 거래 서브 클래스 &lt;code&gt;TimeField&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="daef13f67a99d7a878cec548548eac1ff57e9ae4" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;defer()&lt;/code&gt; acts incrementally (adding fields to the deferred list), you can combine calls to &lt;code&gt;only()&lt;/code&gt; and &lt;code&gt;defer()&lt;/code&gt; and things will behave logically:</source>
          <target state="translated">지연된 목록에 필드를 추가하여 &lt;code&gt;defer()&lt;/code&gt; 가 증 분식으로 작동 하기 때문에 &lt;code&gt;only()&lt;/code&gt; 및 &lt;code&gt;defer()&lt;/code&gt; 호출을 결합하면 사물이 논리적으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="240288c7b51585d5a2ecc74a808eea5e72ff479d" translate="yes" xml:space="preserve">
          <source>Since Django was first released with the &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;'America/Chicago'&lt;/code&gt;, the global setting (used if nothing is defined in your project&amp;rsquo;s &lt;code&gt;settings.py&lt;/code&gt;) remains &lt;code&gt;'America/Chicago'&lt;/code&gt; for backwards compatibility. New project templates default to &lt;code&gt;'UTC'&lt;/code&gt;.</source>
          <target state="translated">Django가 &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;'America/Chicago'&lt;/code&gt; 로 설정하여 처음 릴리스 되었으므로 전역 설정 (프로젝트의 &lt;code&gt;settings.py&lt;/code&gt; 에 아무것도 정의되어 있지 않은 경우 사용 )은 하위 호환성을 위해 &lt;code&gt;'America/Chicago'&lt;/code&gt; 로 유지됩니다. 새 프로젝트 템플릿은 기본적으로 &lt;code&gt;'UTC'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dd79b65f2ad2a31c4a51930692e7147f5912aa23" translate="yes" xml:space="preserve">
          <source>Since QuerySets are lazy, this does no database queries if &amp;lsquo;display_inbox&amp;rsquo; is False.</source>
          <target state="translated">QuerySet이 게으 르기 때문에 'display_inbox'가 False이면 데이터베이스 쿼리가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="172c0c3e99cfb346c9d365d3563bea027f83d597" translate="yes" xml:space="preserve">
          <source>Since a &lt;code&gt;Func&lt;/code&gt;&amp;rsquo;s keyword arguments for &lt;code&gt;__init__()&lt;/code&gt; (&lt;code&gt;**extra&lt;/code&gt;) and &lt;code&gt;as_sql()&lt;/code&gt; (&lt;code&gt;**extra_context&lt;/code&gt;) are interpolated into the SQL string rather than passed as query parameters (where the database driver would escape them), they must not contain untrusted user input.</source>
          <target state="translated">&lt;code&gt;__init__()&lt;/code&gt; ( &lt;code&gt;**extra&lt;/code&gt; ) 및 &lt;code&gt;as_sql()&lt;/code&gt; ( &lt;code&gt;**extra_context&lt;/code&gt; )에 대한 &lt;code&gt;Func&lt;/code&gt; 키워드 키워드 인수 는 쿼리 매개 변수 (데이터베이스 드라이버가 이스케이프 할 수있는 곳)로 전달되지 않고 SQL 문자열에 삽입됩니다. 신뢰할 수없는 사용자 입력을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="e5f69f717fb88e9e7d2709ab3c11438829844e07" translate="yes" xml:space="preserve">
          <source>Since all &lt;code&gt;Field&lt;/code&gt; subclasses have &lt;code&gt;required=True&lt;/code&gt; by default, the validation condition here is important. If you want to include a boolean in your form that can be either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; (e.g. a checked or unchecked checkbox), you must remember to pass in &lt;code&gt;required=False&lt;/code&gt; when creating the &lt;code&gt;BooleanField&lt;/code&gt;.</source>
          <target state="translated">모든 &lt;code&gt;Field&lt;/code&gt; 서브 클래스는 기본적으로 &lt;code&gt;required=True&lt;/code&gt; 이므로 유효성 검증 조건이 중요합니다. &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 가 될 수있는 부울을 양식에 포함 시키려면 (예 : 선택 또는 선택 취소 확인란) &lt;code&gt;BooleanField&lt;/code&gt; 를 작성할 때 &lt;code&gt;required=False&lt;/code&gt; 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dc54ca6f45a12fcedfe3d52590e22a728a1bd717" translate="yes" xml:space="preserve">
          <source>Since any string could be a key in a JSON object, any lookup other than those listed below will be interpreted as a key lookup. No errors are raised. Be extra careful for typing mistakes, and always check your queries work as you intend.</source>
          <target state="translated">문자열은 JSON 객체에서 키가 될 수 있으므로 아래에 나열된 것 이외의 조회는 키 조회로 해석됩니다. 오류가 발생하지 않습니다. 실수를 입력 할 때는 각별히주의하고 원하는대로 쿼리가 작동하는지 항상 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="621a1c621f0bbe09a57200c015bf93156fd04e22" translate="yes" xml:space="preserve">
          <source>Since any string could be a key in a hstore value, any lookup other than those listed below will be interpreted as a key lookup. No errors are raised. Be extra careful for typing mistakes, and always check your queries work as you intend.</source>
          <target state="translated">문자열이 hstore 값의 키가 될 수 있으므로 아래에 나열된 것 이외의 조회는 키 조회로 해석됩니다. 오류가 발생하지 않습니다. 실수를 입력 할 때는 각별히주의하고 원하는대로 쿼리가 작동하는지 항상 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="267b191c4f9ae19b2d34ad0481c1fb674cfebe65" translate="yes" xml:space="preserve">
          <source>Since creating the MD5 hash can be a performance burden to your website during runtime, &lt;code&gt;staticfiles&lt;/code&gt; will automatically store the mapping with hashed names for all processed files in a file called &lt;code&gt;staticfiles.json&lt;/code&gt;. This happens once when you run the &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">MD5 해시 작성은 런타임 중에 웹 사이트에 성능 부담이 될 수 있으므로 &lt;code&gt;staticfiles&lt;/code&gt; 파일은 모든 처리 된 파일의 해시 이름이있는 맵핑을 &lt;code&gt;staticfiles.json&lt;/code&gt; 파일에 자동으로 저장합니다 . &lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; management 명령 을 실행할 때 한 번 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="53586df0fd0f1952173d60b0a403ff1c0c6ad92b" translate="yes" xml:space="preserve">
          <source>Since each thread maintains its own connection, your database must support at least as many simultaneous connections as you have worker threads.</source>
          <target state="translated">각 스레드는 자체 연결을 유지하므로 데이터베이스는 작업자 스레드가있는 수만큼의 동시 연결을 지원해야합니다.</target>
        </trans-unit>
        <trans-unit id="e3b3be76ab62b3ee1076c3dc6523e940a85a35e9" translate="yes" xml:space="preserve">
          <source>Since environment variables are process-wide, this doesn&amp;rsquo;t work when you run multiple Django sites in the same process. This happens with mod_wsgi.</source>
          <target state="translated">환경 변수는 프로세스 전체에 적용되므로 동일한 프로세스에서 여러 장고 사이트를 실행할 때는 작동하지 않습니다. 이것은 mod_wsgi에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="65e11fb951839a00a6f59ef404c6085b7b62928e" translate="yes" xml:space="preserve">
          <source>Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function &lt;a href=&quot;urls#django.conf.urls.static.static&quot;&gt;&lt;code&gt;static()&lt;/code&gt;&lt;/a&gt; that takes as parameters the prefix such as &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; and a dotted path to a view, such as &lt;code&gt;'django.views.static.serve'&lt;/code&gt;. Any other function parameter will be transparently passed to the view.</source>
          <target state="translated">이 URL 패턴을 정의하는 것은 약간 번거로울 수 있기 때문에 Django 는 &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 과 같은 접두사와 &lt;code&gt;'django.views.static.serve'&lt;/code&gt; 과 같은 뷰의 점선 경로를 매개 변수로 사용하는 작은 URL 도우미 함수 &lt;a href=&quot;urls#django.conf.urls.static.static&quot;&gt; &lt;code&gt;static()&lt;/code&gt; &lt;/a&gt; 을 제공합니다. 봉사하십시오 . 다른 함수 매개 변수는 투명하게 뷰에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="e3694b6589835e6030ff9bac5e64cc188f769b05" translate="yes" xml:space="preserve">
          <source>Since keeping multiple authentication databases in sync is a common problem when dealing with Apache, you can configure Apache to authenticate against Django&amp;rsquo;s &lt;a href=&quot;../../../topics/auth/index&quot;&gt;authentication system&lt;/a&gt; directly. This requires Apache version &amp;gt;= 2.2 and mod_wsgi &amp;gt;= 2.0. For example, you could:</source>
          <target state="translated">여러 인증 데이터베이스를 동기화 상태로 유지하는 것은 Apache를 처리 할 때 일반적인 문제이므로 Django의 &lt;a href=&quot;../../../topics/auth/index&quot;&gt;인증 시스템&lt;/a&gt; 에 대해 직접 인증하도록 Apache를 구성 할 수 있습니다. 여기에는 Apache 버전&amp;gt; = 2.2 및 mod_wsgi&amp;gt; = 2.0이 필요합니다. 예를 들어 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="033dea3e6e8d5dd2bfdb7785be7eb322d915dce9" translate="yes" xml:space="preserve">
          <source>Since most engines load templates from files, the top-level configuration for each engine contains two common settings:</source>
          <target state="translated">대부분의 엔진은 파일에서 템플릿을로드하므로 각 엔진의 최상위 구성에는 두 가지 공통 설정이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="97f81aa179db91abb18c1735c1b2d764c37b593d" translate="yes" xml:space="preserve">
          <source>Since ordering is delegated to the database, results on fields that allow null values may be ordered differently if you use different databases. For example, PostgreSQL and MySQL sort null values as if they are higher than non-null values, while SQLite does the opposite.</source>
          <target state="translated">순서가 데이터베이스에 위임되므로 다른 데이터베이스를 사용하는 경우 널값을 허용하는 필드의 결과가 다르게 정렬 될 수 있습니다. 예를 들어 PostgreSQL과 MySQL은 null 값이 null이 아닌 값보다 높은 것처럼 정렬하지만 SQLite는 그 반대입니다.</target>
        </trans-unit>
        <trans-unit id="b3785fd34b88aa8550a180686f7e7f2fe6ae8096" translate="yes" xml:space="preserve">
          <source>Since pickle compatibility errors can be difficult to diagnose, such as silently corrupted objects, a &lt;code&gt;RuntimeWarning&lt;/code&gt; is raised when you try to unpickle a model in a Django version that is different than the one in which it was pickled.</source>
          <target state="translated">자동으로 손상된 객체와 같은 피클 호환성 오류를 진단하기 어려울 수 있으므로 장고 버전에서 피클 링 된 것과 다른 모델을 피클 링하려고하면 &lt;code&gt;RuntimeWarning&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="602f88f12af1580252ee95f973928f4ffb892234" translate="yes" xml:space="preserve">
          <source>Since pickle compatibility errors can be difficult to diagnose, such as silently corrupted objects, a &lt;code&gt;RuntimeWarning&lt;/code&gt; is raised when you try to unpickle a queryset in a Django version that is different than the one in which it was pickled.</source>
          <target state="translated">자동으로 손상된 객체와 같은 피클 호환성 오류를 진단하기 어려울 수 있으므로 Django 버전에서 피클 링 된 것과 다른 &lt;code&gt;RuntimeWarning&lt;/code&gt; 을 피클 링하려고하면 RuntimeWarning 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6b259318075cca37cf94d413ec2884ef4b3ae2b1" translate="yes" xml:space="preserve">
          <source>Since static files might reference other static files that need to have their paths replaced, multiple passes of replacing paths may be needed until the file hashes converge. To prevent an infinite loop due to hashes not converging (for example, if &lt;code&gt;'foo.css'&lt;/code&gt; references &lt;code&gt;'bar.css'&lt;/code&gt; which references &lt;code&gt;'foo.css'&lt;/code&gt;) there is a maximum number of passes before post-processing is abandoned. In cases with a large number of references, a higher number of passes might be needed. Increase the maximum number of passes by subclassing &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; and setting the &lt;code&gt;max_post_process_passes&lt;/code&gt; attribute. It defaults to 5.</source>
          <target state="translated">정적 파일은 경로를 교체해야하는 다른 정적 파일을 참조 할 수 있으므로 파일 해시가 수렴 될 때까지 경로를 여러 번 대체해야합니다. 해시 인해 수렴하지 않도록 무한 루프를 방지하기 위하여 (예를 들어, &lt;code&gt;'foo.css'&lt;/code&gt; 참조 &lt;code&gt;'bar.css'&lt;/code&gt; 참조 &lt;code&gt;'foo.css'&lt;/code&gt; ) 이후의 처리를 중단하기 전에 패스의 최대 수있다. 참조 수가 많은 경우 더 많은 패스가 필요할 수 있습니다. &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 를 서브 클래 싱 하고 &lt;code&gt;max_post_process_passes&lt;/code&gt; 속성을 설정 하여 최대 패스 수를 늘리십시오 . 기본값은 5입니다.</target>
        </trans-unit>
        <trans-unit id="3ee52d198c62fb7fea17d51bd3898d1fb8798f93" translate="yes" xml:space="preserve">
          <source>Since string extraction is done by the &lt;code&gt;xgettext&lt;/code&gt; command, only syntaxes supported by &lt;code&gt;gettext&lt;/code&gt; are supported by Django. In particular, Python &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#f-strings&quot;&gt;f-strings&lt;/a&gt; are not yet supported by &lt;code&gt;xgettext&lt;/code&gt;, and JavaScript template strings need &lt;code&gt;gettext&lt;/code&gt; 0.21+.</source>
          <target state="translated">Since string extraction is done by the &lt;code&gt;xgettext&lt;/code&gt; command, only syntaxes supported by &lt;code&gt;gettext&lt;/code&gt; are supported by Django. In particular, Python &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#f-strings&quot;&gt;f-strings&lt;/a&gt; are not yet supported by &lt;code&gt;xgettext&lt;/code&gt; , and JavaScript template strings need &lt;code&gt;gettext&lt;/code&gt; 0.21+.</target>
        </trans-unit>
        <trans-unit id="24e8a55f499e4e88c7af09bba2b408f084a615c9" translate="yes" xml:space="preserve">
          <source>Since string extraction is done by the &lt;code&gt;xgettext&lt;/code&gt; command, only syntaxes supported by &lt;code&gt;gettext&lt;/code&gt; are supported by Django. Python &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#f-strings&quot;&gt;f-strings&lt;/a&gt; and &lt;a href=&quot;https://savannah.gnu.org/bugs/?50920&quot;&gt;JavaScript template strings&lt;/a&gt; are not yet supported by &lt;code&gt;xgettext&lt;/code&gt;.</source>
          <target state="translated">문자열 추출에 의해 이루어지기 때문에 &lt;code&gt;xgettext&lt;/code&gt; 명령에 의해 지원에만 구문 &lt;code&gt;gettext&lt;/code&gt; 장고에 의해 지원됩니다. 파이썬 &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#f-strings&quot;&gt;f- 문자열&lt;/a&gt; 및 &lt;a href=&quot;https://savannah.gnu.org/bugs/?50920&quot;&gt;JavaScript 템플릿 문자열&lt;/a&gt; 은 아직 &lt;code&gt;xgettext&lt;/code&gt; 에서 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="89c0ffa4efff3f9d6045b602f97fbbf0afe758d5" translate="yes" xml:space="preserve">
          <source>Since that&amp;rsquo;s a bit abstract, let&amp;rsquo;s look at a concrete example. The most common use of &lt;code&gt;formfield_overrides&lt;/code&gt; is to add a custom widget for a certain type of field. So, imagine we&amp;rsquo;ve written a &lt;code&gt;RichTextEditorWidget&lt;/code&gt; that we&amp;rsquo;d like to use for large text fields instead of the default &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;. Here&amp;rsquo;s how we&amp;rsquo;d do that:</source>
          <target state="translated">약간 추상적 인 내용이므로 구체적인 예를 살펴 보겠습니다. &lt;code&gt;formfield_overrides&lt;/code&gt; 의 가장 일반적인 용도 는 특정 유형의 필드에 대한 사용자 정의 위젯을 추가하는 것입니다. 따라서 기본 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 대신 큰 텍스트 필드에 사용 하려는 &lt;code&gt;RichTextEditorWidget&lt;/code&gt; 을 작성 했다고 가정하십시오 . 우리가 그렇게하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9c462c09bbc7f45fb51780a896bd0e6b27044953" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;views#error-views&quot;&gt;default error views&lt;/a&gt; require the CSRF token, &lt;a href=&quot;middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt;&lt;code&gt;SessionMiddleware&lt;/code&gt;&lt;/a&gt; must appear in &lt;a href=&quot;#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; before any middleware that may raise an exception to trigger an error view (such as &lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;) if you&amp;rsquo;re using &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;. See &lt;a href=&quot;middleware#middleware-ordering&quot;&gt;Middleware ordering&lt;/a&gt;.</source>
          <target state="translated">때문에 &lt;a href=&quot;views#error-views&quot;&gt;기본 오류보기가&lt;/a&gt; CSRF 토큰을 필요 &lt;a href=&quot;middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; 가&lt;/a&gt; 표시되어야 &lt;a href=&quot;#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; (예 : 오류보기 트리거 예외 올릴 수있는 미들웨어 전에 &lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; 를&lt;/a&gt; 사용하는 경우) &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; 을 . &lt;a href=&quot;middleware#middleware-ordering&quot;&gt;미들웨어 주문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3680c70751a4259e89baeed5c2f2f5f28c9a23a3" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;Author&lt;/code&gt; model has the 3 fields &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;birth_date&lt;/code&gt;, this will result in the fields &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;birth_date&lt;/code&gt; being present on the form.</source>
          <target state="translated">때문에 &lt;code&gt;Author&lt;/code&gt; 모델은 3 개의 필드를 가지고 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;birth_date&lt;/code&gt; 를 ,이 필드를 초래할 것이다 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;birth_date&lt;/code&gt; 폼되는 본.</target>
        </trans-unit>
        <trans-unit id="e8d452aef8debbe23356a70033afef2753cb14e5" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;RemoteUserBackend&lt;/code&gt; inherits from &lt;code&gt;ModelBackend&lt;/code&gt;, you will still have all of the same permissions checking that is implemented in &lt;code&gt;ModelBackend&lt;/code&gt;.</source>
          <target state="translated">이후 &lt;code&gt;RemoteUserBackend&lt;/code&gt; 의 에서 상속 &lt;code&gt;ModelBackend&lt;/code&gt; , 당신은 여전히 구현되는 것을 확인 동일한 권한의 모든 것 &lt;code&gt;ModelBackend&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="bdbb68b33c6d311502916cc7184838f9f5e8ae17" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;then&lt;/code&gt; keyword argument is reserved for the result of the &lt;code&gt;When()&lt;/code&gt;, there is a potential conflict if a &lt;a href=&quot;instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; has a field named &lt;code&gt;then&lt;/code&gt;. This can be resolved in two ways:</source>
          <target state="translated">때문에 &lt;code&gt;then&lt;/code&gt; 키워드 인수의 결과를 위해 예약 &lt;code&gt;When()&lt;/code&gt; 경우, 잠재적 인 충돌이 &lt;a href=&quot;instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt; 이라는 이름의 필드가 &lt;code&gt;then&lt;/code&gt; . 이것은 두 가지 방법으로 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6618e989db2273bbc1f3c54308050a36bea8f7d7" translate="yes" xml:space="preserve">
          <source>Since the &lt;em&gt;tests&lt;/em&gt; package is included in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; when running your tests, you can define test-only models in its &lt;code&gt;models.py&lt;/code&gt; file.</source>
          <target state="translated">때문에 &lt;em&gt;테스트&lt;/em&gt; 패키지에 포함되어 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 테스트를 실행할 때, 당신은 그것에서 테스트 전용 모델을 정의 할 수 있습니다 &lt;code&gt;models.py&lt;/code&gt; 의 파일.</target>
        </trans-unit>
        <trans-unit id="182f25b8a48332fd0cfbbc4244db09a814c6d976" translate="yes" xml:space="preserve">
          <source>Since the Author model only has three fields, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;birth_date&lt;/code&gt;, the forms resulting from the above declarations will contain exactly the same fields.</source>
          <target state="translated">Author 모델에는 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;birth_date&lt;/code&gt; 의 세 가지 필드 만 있으므로 위 선언에서 생성 된 양식에는 정확히 동일한 필드가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="2ba476890856fa0063dbc5286fec4c773b2be9ea" translate="yes" xml:space="preserve">
          <source>Since the case where the enum values need to be integers is extremely common, Django provides an &lt;code&gt;IntegerChoices&lt;/code&gt; class. For example:</source>
          <target state="translated">열거 형 값이 정수 여야하는 경우가 흔하기 때문에 Django는 &lt;code&gt;IntegerChoices&lt;/code&gt; 클래스를 제공합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5ddb3180871881fcfae61f580859f414abfcece9" translate="yes" xml:space="preserve">
          <source>Since the database isn&amp;rsquo;t fully flushed, if a test creates instances of models not included in &lt;code&gt;available_apps&lt;/code&gt;, they will leak and they may cause unrelated tests to fail. Be careful with tests that use sessions; the default session engine stores them in the database.</source>
          <target state="translated">데이터베이스가 완전히 플러시되지 않기 때문에 테스트에서 &lt;code&gt;available_apps&lt;/code&gt; 에 포함되지 않은 모델의 인스턴스를 작성 하면 누출이 발생하여 관련이없는 테스트가 실패 할 수 있습니다. 세션을 사용하는 테스트에주의하십시오. 기본 세션 엔진은 데이터베이스에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="7d3df5c0a0844a50893192052cdcd2089b4fc644" translate="yes" xml:space="preserve">
          <source>Since the field validation methods have been run by the time &lt;code&gt;clean()&lt;/code&gt; is called, you also have access to the form&amp;rsquo;s &lt;code&gt;errors&lt;/code&gt; attribute which contains all the errors raised by cleaning of individual fields.</source>
          <target state="translated">&lt;code&gt;clean()&lt;/code&gt; 이 호출 될 때 필드 유효성 검증 메소드가 실행되었으므로 개별 필드를 정리하여 발생한 모든 오류가 포함 된 양식의 &lt;code&gt;errors&lt;/code&gt; 속성에 액세스 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bee7b32523a98739c39993323ca126b1ab6f12b1" translate="yes" xml:space="preserve">
          <source>Since the prefetch is executed after the main query (which includes the joins needed by &lt;code&gt;select_related&lt;/code&gt;), it is able to detect that the &lt;code&gt;best_pizza&lt;/code&gt; objects have already been fetched, and it will skip fetching them again.</source>
          <target state="translated">프리 페치는 기본 쿼리 ( &lt;code&gt;select_related&lt;/code&gt; 에 필요한 조인 포함) 후에 실행 되므로 &lt;code&gt;best_pizza&lt;/code&gt; 객체가 이미 페치되었음을 감지 하고 다시 페치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e894456a6ae804c6a8bd8eaccaaea486170048d" translate="yes" xml:space="preserve">
          <source>Since the template language doesn&amp;rsquo;t provide exception handling, any exception raised from a template filter will be exposed as a server error. Thus, filter functions should avoid raising exceptions if there is a reasonable fallback value to return. In case of input that represents a clear bug in a template, raising an exception may still be better than silent failure which hides the bug.</source>
          <target state="translated">템플릿 언어는 예외 처리 기능을 제공하지 않으므로 템플릿 필터에서 발생한 예외는 서버 오류로 표시됩니다. 따라서 반환 할 적절한 대체 값이있는 경우 필터 함수는 예외 발생을 피해야합니다. 템플릿에서 명확한 버그를 나타내는 입력의 경우 예외를 발생시키는 것이 버그를 숨기는 자동 실패보다 낫습니다.</target>
        </trans-unit>
        <trans-unit id="f54bd5c48a829c41f37d160efc395674c13b0816" translate="yes" xml:space="preserve">
          <source>Since the template system has no concept of &amp;ldquo;escaping&amp;rdquo;, to display one of the bits used in template tags, you must use the &lt;code&gt;{% templatetag %}&lt;/code&gt; tag.</source>
          <target state="translated">템플릿 시스템에는 &quot;이스케이프&quot;라는 개념이 없으므로 템플릿 태그에 사용 된 비트 중 하나를 표시하려면 &lt;code&gt;{% templatetag %}&lt;/code&gt; 태그를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8102763f7cdc49ed64d110ebdc10ec98644b74ef" translate="yes" xml:space="preserve">
          <source>Since the underlying file is opened implicitly when accessing it, it may be unnecessary to call this method except to reset the pointer to the underlying file or to change the &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">기본 파일은 액세스 할 때 내재적으로 열리므로 기본 파일에 대한 포인터를 재설정하거나 &lt;code&gt;mode&lt;/code&gt; 를 변경하는 것 외에는이 메소드를 호출하지 않아도 됩니다 .</target>
        </trans-unit>
        <trans-unit id="08f6474d73677fd0c7d0495951ca9562af720155" translate="yes" xml:space="preserve">
          <source>Since things in the future are not &amp;lsquo;recent&amp;rsquo;, this is clearly wrong.</source>
          <target state="translated">미래의 것은 '최근'이 아니기 때문에 이것은 분명히 잘못입니다.</target>
        </trans-unit>
        <trans-unit id="44f004032c76f1b45110354f5c8f2c8d9174dd49" translate="yes" xml:space="preserve">
          <source>Since this is a bit finicky, there&amp;rsquo;s also a helper function that&amp;rsquo;ll do this for you:</source>
          <target state="translated">이것은 약간 까다 롭기 때문에이 작업을 수행하는 도우미 기능도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2a9a7c1dcff132243a3afb77a83dc9f53136bce" translate="yes" xml:space="preserve">
          <source>Since this is a subclass of &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, instances of this mixin have access to the &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; attributes, describing the type of object that the &lt;code&gt;ModelForm&lt;/code&gt; is manipulating.</source>
          <target state="translated">이것이 &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 이므로 ,이 믹스 인의 인스턴스 는 &lt;code&gt;ModelForm&lt;/code&gt; 이 조작 하는 객체의 유형을 설명하는 &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt; 속성에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b836e3b2be807beecd8bb58d4c3d7119ec00e5a" translate="yes" xml:space="preserve">
          <source>Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is &lt;code&gt;AdminSite.admin_view()&lt;/code&gt; (i.e. &lt;code&gt;self.admin_site.admin_view&lt;/code&gt; inside a &lt;code&gt;ModelAdmin&lt;/code&gt; instance); use it like so:</source>
          <target state="translated">이것은 일반적으로 원하는 것이 아니기 때문에 Django는 권한을 확인하고보기를 캐시 할 수없는 것으로 표시하는 편리한 래퍼를 제공합니다. 이 랩퍼는 &lt;code&gt;AdminSite.admin_view()&lt;/code&gt; (예 : &lt;code&gt;ModelAdmin&lt;/code&gt; 인스턴스 내의 &lt;code&gt;self.admin_site.admin_view&lt;/code&gt; ). 그렇게 사용하십시오 :</target>
        </trans-unit>
        <trans-unit id="ce280ef1e65769fe1562be2510357317b2198d19" translate="yes" xml:space="preserve">
          <source>Since this new feature will be in an upcoming release it is also added to the release notes for the next version of Django. Open the release notes for the latest version in &lt;code&gt;docs/releases/&lt;/code&gt;, which at time of writing is &lt;code&gt;2.2.txt&lt;/code&gt;. Add a note under the &amp;ldquo;Minor Features&amp;rdquo; header:</source>
          <target state="translated">이 새로운 기능은 곧 출시 될 예정이므로 Django의 다음 버전에 대한 릴리스 노트에도 추가됩니다. &lt;code&gt;docs/releases/&lt;/code&gt; 에서 최신 버전의 릴리스 정보를여십시오 ( 작성 당시 &lt;code&gt;2.2.txt&lt;/code&gt; ) . &quot;사소한 기능&quot;헤더 아래에 메모를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="e2e1007acfcc38bed3a58e1d177253ed96b3b170" translate="yes" xml:space="preserve">
          <source>Since this signal is sent during the app registry population process, and &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; runs after the app registry is fully populated, receivers cannot be connected in that method. One possibility is to connect them &lt;code&gt;AppConfig.__init__()&lt;/code&gt; instead, taking care not to import models or trigger calls to the app registry.</source>
          <target state="translated">이 신호는 앱 레지스트리 채우기 프로세스 중에 전송 되고 앱 레지스트리가 완전히 채워진 후에 &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;AppConfig.ready()&lt;/code&gt; &lt;/a&gt; 가 실행되므로 수신자를 해당 방법으로 연결할 수 없습니다. 한 가지 가능성은 모델을 가져 오거나 앱 레지스트리에 대한 호출을 트리거하지 않도록주의하면서 &lt;code&gt;AppConfig.__init__()&lt;/code&gt; 대신 연결하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="a86ca2fbc6ea755af8f5f6612e77aed753ca20a7" translate="yes" xml:space="preserve">
          <source>Since translation deactivation requires access to configured settings, the decorator can&amp;rsquo;t be used for commands that work without configured settings.</source>
          <target state="translated">변환 비활성화에는 구성된 설정에 대한 액세스가 필요하므로 데코레이터는 구성된 설정없이 작동하는 명령에 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="82ea9edabdd611c6751c736c86602f3cb7f1278f" translate="yes" xml:space="preserve">
          <source>Since using a database requires conversion in both ways, if you override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt;&lt;code&gt;from_db_value()&lt;/code&gt;&lt;/a&gt; you also have to override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt; to convert Python objects back to query values.</source>
          <target state="translated">Since using a database requires conversion in both ways, if you override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt; &lt;code&gt;from_db_value()&lt;/code&gt; &lt;/a&gt; you also have to override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; to convert Python objects back to query values.</target>
        </trans-unit>
        <trans-unit id="9fa717881c11bde35b0145dff4b5c09425edae91" translate="yes" xml:space="preserve">
          <source>Since using a database requires conversion in both ways, if you override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt;&lt;code&gt;to_python()&lt;/code&gt;&lt;/a&gt; you also have to override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt; to convert Python objects back to query values.</source>
          <target state="translated">데이터베이스를 사용하려면 두 가지 방법으로 변환이 필요하므로 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt; &lt;code&gt;to_python()&lt;/code&gt; &lt;/a&gt; 을 재정의하는 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 를 재정 의하여 Python 객체를 다시 쿼리 값으로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a0b9c31f60423d805f6522b383f5998b304606d" translate="yes" xml:space="preserve">
          <source>Since we have access to the &lt;code&gt;Publisher&lt;/code&gt; whose books we want to list, we override &lt;code&gt;get_queryset()&lt;/code&gt; and use the &lt;code&gt;Publisher&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;../db/queries#backwards-related-objects&quot;&gt;reverse foreign key manager&lt;/a&gt;.</source>
          <target state="translated">책을 나열하려는 &lt;code&gt;Publisher&lt;/code&gt; 액세스 할 수 있으므로 &lt;code&gt;get_queryset()&lt;/code&gt; 을 재정의 하고 &lt;code&gt;Publisher&lt;/code&gt; 의 &lt;a href=&quot;../db/queries#backwards-related-objects&quot;&gt;역 외래 키 관리자를 사용&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="83cb27b5980fec2422e18c05c4b1e792946c4f43" translate="yes" xml:space="preserve">
          <source>Since we haven&amp;rsquo;t made any modifications to &lt;code&gt;django.shortcuts&lt;/code&gt; yet, our test should fail. Let&amp;rsquo;s run all the tests in the &lt;code&gt;shortcuts&lt;/code&gt; folder to make sure that&amp;rsquo;s really what happens. &lt;code&gt;cd&lt;/code&gt; to the Django &lt;code&gt;tests/&lt;/code&gt; directory and run:</source>
          <target state="translated">&lt;code&gt;django.shortcuts&lt;/code&gt; 를 아직 수정하지 않았으므로 테스트는 실패합니다. &lt;code&gt;shortcuts&lt;/code&gt; 폴더 에서 모든 테스트를 실행하여 실제로 발생하는지 확인하십시오. &lt;code&gt;cd&lt;/code&gt; 장고에 &lt;code&gt;tests/&lt;/code&gt; 디렉토리 및 실행 :</target>
        </trans-unit>
        <trans-unit id="d74aaa0c05af691e500eb421f55175b31a2b3c64" translate="yes" xml:space="preserve">
          <source>Since we moved the &lt;code&gt;polls&lt;/code&gt; directory out of the project, it&amp;rsquo;s no longer working. We&amp;rsquo;ll now fix this by installing our new &lt;code&gt;django-polls&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;polls&lt;/code&gt; 디렉토리를 프로젝트에서 옮겼 으므로 더 이상 작동하지 않습니다. 이제 새로운 &lt;code&gt;django-polls&lt;/code&gt; 패키지를 설치하여이 문제를 해결하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="2cca87da26dab748a65a3d865fe2eecf9090771b" translate="yes" xml:space="preserve">
          <source>Since we&amp;rsquo;re creating a POST form (which can have the effect of modifying data), we need to worry about Cross Site Request Forgeries. Thankfully, you don&amp;rsquo;t have to worry too hard, because Django comes with a helpful system for protecting against it. In short, all POST forms that are targeted at internal URLs should use the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;{% csrf_token %}&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="translated">POST 양식 (데이터 수정의 영향을 미칠 수 있음)을 작성하므로 교차 사이트 요청 위조에 대해 걱정할 필요가 있습니다. 고맙게도 Django는이를 보호하기위한 유용한 시스템을 제공하기 때문에 너무 걱정할 필요가 없습니다. 즉, 내부 URL을 대상으로하는 모든 POST 양식은 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;{% csrf_token %}&lt;/code&gt; &lt;/a&gt; 템플릿 태그를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3ad37d97bd6f0098fd77a93b928c99a690af8225" translate="yes" xml:space="preserve">
          <source>Since you&amp;rsquo;re already entering raw HTML into the admin page for a flatpage, both &lt;code&gt;flatpage.title&lt;/code&gt; and &lt;code&gt;flatpage.content&lt;/code&gt; are marked as &lt;strong&gt;not&lt;/strong&gt; requiring &lt;a href=&quot;../templates/language#automatic-html-escaping&quot;&gt;automatic HTML escaping&lt;/a&gt; in the template.</source>
          <target state="translated">플랫 페이지의 관리 페이지에 원시 HTML을 이미 입력 &lt;code&gt;flatpage.title&lt;/code&gt; 및 &lt;code&gt;flatpage.content&lt;/code&gt; 모두 템플릿에서 &lt;a href=&quot;../templates/language#automatic-html-escaping&quot;&gt;자동 HTML 이스케이프&lt;/a&gt; 가 필요 &lt;strong&gt;하지 않은&lt;/strong&gt; 것으로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="6eb819bf4cfb2932ee65634e73d63261d48b4ff0" translate="yes" xml:space="preserve">
          <source>Since you&amp;rsquo;re overriding templates located outside of one of your project&amp;rsquo;s apps, it&amp;rsquo;s more common to use the first method and put template overrides in a project&amp;rsquo;s templates folder. If you prefer, however, it&amp;rsquo;s also possible to put the overrides in an app&amp;rsquo;s template directory.</source>
          <target state="translated">프로젝트의 앱 외부에있는 템플릿을 재정의하기 때문에 첫 번째 방법을 사용하고 템플릿 재정의를 프로젝트의 템플릿 폴더에 넣는 것이 더 일반적입니다. 그러나 원하는 경우 재정의를 앱의 템플릿 디렉토리에 넣을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0afd134835f007c574a20ffac22a88bef83653b" translate="yes" xml:space="preserve">
          <source>Since your static file server won&amp;rsquo;t be running Django, you&amp;rsquo;ll need to modify the deployment strategy to look something like:</source>
          <target state="translated">정적 파일 서버는 Django를 실행하지 않으므로 배포 전략을 다음과 같이 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="a758a9b96f0a0cb1c9df99cb7fcf0a0f5ab2e0b3" translate="yes" xml:space="preserve">
          <source>Single object mixins</source>
          <target state="translated">단일 오브젝트 믹스 인</target>
        </trans-unit>
        <trans-unit id="d4279b6f4a158808f3065d3c5f9f2a8fbbc9fae1" translate="yes" xml:space="preserve">
          <source>Site middleware</source>
          <target state="translated">사이트 미들웨어</target>
        </trans-unit>
        <trans-unit id="84ec3e71d2c9d85aaaf417a243c8e7d9f42135fc" translate="yes" xml:space="preserve">
          <source>Sitemap</source>
          <target state="translated">Sitemap</target>
        </trans-unit>
        <trans-unit id="519aa036bc82c5ea1d73d3993e032cfb72fb484f" translate="yes" xml:space="preserve">
          <source>Sitemap for static views</source>
          <target state="translated">정적 뷰를위한 사이트 맵</target>
        </trans-unit>
        <trans-unit id="2764eabb8749c77d247a8a75752a9ecde7eb5597" translate="yes" xml:space="preserve">
          <source>Sitemaps</source>
          <target state="translated">Sitemaps</target>
        </trans-unit>
        <trans-unit id="5cae88ddf5336e6a23091c01317b646467eb857e" translate="yes" xml:space="preserve">
          <source>Sites</source>
          <target state="translated">Sites</target>
        </trans-unit>
        <trans-unit id="67e61f4409b1fb54be195bdc07794c772323f4db" translate="yes" xml:space="preserve">
          <source>Sixteen bit signed integer</source>
          <target state="translated">16 비트 부호있는 정수</target>
        </trans-unit>
        <trans-unit id="0446b596265d74a5e393db2060d6318b0e4d5dda" translate="yes" xml:space="preserve">
          <source>Sixteen bit unsigned integer</source>
          <target state="translated">16 비트 부호없는 정수</target>
        </trans-unit>
        <trans-unit id="a41f42e02f52f797b4047cc88bef99a9e7759ac5" translate="yes" xml:space="preserve">
          <source>Sixty-four bit floating point</source>
          <target state="translated">64 비트 부동 소수점</target>
        </trans-unit>
        <trans-unit id="54ee68a599b7e2021a429bed896ed452a76885eb" translate="yes" xml:space="preserve">
          <source>Size, in bytes, of the &amp;ldquo;chunks&amp;rdquo; Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into &lt;code&gt;FileUploadHandler.receive_data_chunk&lt;/code&gt;.</source>
          <target state="translated">&quot;청크&quot;Django의 크기 (바이트)는 메모리에 저장하고 핸들러로 피드해야합니다. 즉,이 속성은 &lt;code&gt;FileUploadHandler.receive_data_chunk&lt;/code&gt; 로 공급되는 청크의 크기를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="d331e555aa18cca5864ec6dade9b1177eb6ce280" translate="yes" xml:space="preserve">
          <source>Skew coefficients used to georeference the raster, as a point object with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; members. In case of north up images, these coefficients are both &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 멤버가 있는 점 객체로 래스터를 지리 참조하는 데 사용되는 왜곡 계수 . 노스 업 이미지의 경우 이러한 계수는 모두 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="03ebf353dabdb492babc0f780261c7124f7b9c0c" translate="yes" xml:space="preserve">
          <source>Skip the decorated test or &lt;code&gt;TestCase&lt;/code&gt; if all of the named database features are supported.</source>
          <target state="translated">명명 된 데이터베이스 기능이 모두 지원되는 경우 데코 레이팅 된 테스트 또는 &lt;code&gt;TestCase&lt;/code&gt; 를 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="ee27085f15e9cddd87759168c0488fcd2cd99629" translate="yes" xml:space="preserve">
          <source>Skip the decorated test or &lt;code&gt;TestCase&lt;/code&gt; if any of the named database features are &lt;em&gt;not&lt;/em&gt; supported.</source>
          <target state="translated">명명 된 데이터베이스 기능이 지원 &lt;em&gt;되지 않는&lt;/em&gt; 경우 데코 레이팅 된 테스트 또는 &lt;code&gt;TestCase&lt;/code&gt; 를 건너 뜁니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b12e4c720acefa1432f876e9447d079b2ec2431" translate="yes" xml:space="preserve">
          <source>Skipped tests are typically due to missing external libraries required to run the test; see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-dependencies&quot;&gt;Running all the tests&lt;/a&gt; for a list of dependencies and be sure to install any for tests related to the changes you are making (we won&amp;rsquo;t need any for this tutorial). Some tests are specific to a particular database backend and will be skipped if not testing with that backend. SQLite is the database backend for the default settings. To run the tests using a different backend, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;Using another settings module&lt;/a&gt;.</source>
          <target state="translated">건너 뛴 테스트는 일반적으로 테스트를 실행하는 데 필요한 외부 라이브러리가 없기 때문에 발생합니다. 종속성 목록에 대해서는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-dependencies&quot;&gt;모든 테스트 실행을&lt;/a&gt; 참조 하고 변경 사항과 관련된 테스트를 설치하십시오 (이 학습서에는 필요하지 않음). 일부 테스트는 특정 데이터베이스 백엔드에만 적용되며 해당 백엔드로 테스트하지 않으면 건너 뜁니다. SQLite는 기본 설정에 대한 데이터베이스 백엔드입니다. 다른 백엔드를 사용하여 테스트를 실행하려면 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;다른 설정 모듈 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a20c7ecbdb8e8aaa611f1dfcf29c862e3b7454f7" translate="yes" xml:space="preserve">
          <source>Skipped tests are typically due to missing external libraries required to run the test; see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests-dependencies&quot;&gt;Running all the tests&lt;/a&gt; for a list of dependencies and be sure to install any for tests related to the changes you are making (we won&amp;rsquo;t need any for this tutorial). Some tests are specific to a particular database backend and will be skipped if not testing with that backend. SQLite is the database backend for the default settings. To run the tests using a different backend, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;Using another settings module&lt;/a&gt;.</source>
          <target state="translated">Skipped tests are typically due to missing external libraries required to run the test; see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests-dependencies&quot;&gt;Running all the tests&lt;/a&gt; for a list of dependencies and be sure to install any for tests related to the changes you are making (we won&amp;rsquo;t need any for this tutorial). Some tests are specific to a particular database backend and will be skipped if not testing with that backend. SQLite is the database backend for the default settings. To run the tests using a different backend, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;Using another settings module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a516a3ce4b9fd1e3a2a9186564fe4ca0d9da8218" translate="yes" xml:space="preserve">
          <source>Skipping tests</source>
          <target state="translated">테스트 건너 뛰기</target>
        </trans-unit>
        <trans-unit id="8989d491cc86145811a20ac193d7ccbc68aad3ce" translate="yes" xml:space="preserve">
          <source>Skips running system checks prior to running the command. This option is only available if the &lt;a href=&quot;../howto/custom-management-commands#django.core.management.BaseCommand.requires_system_checks&quot;&gt;&lt;code&gt;requires_system_checks&lt;/code&gt;&lt;/a&gt; command attribute is set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">명령을 실행하기 전에 실행중인 시스템 검사를 건너 뜁니다. 이 옵션은 &lt;a href=&quot;../howto/custom-management-commands#django.core.management.BaseCommand.requires_system_checks&quot;&gt; &lt;code&gt;requires_system_checks&lt;/code&gt; &lt;/a&gt; 명령 속성이 &lt;code&gt;True&lt;/code&gt; 로 설정된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4311442b14df158474972aefe316fe0015216940" translate="yes" xml:space="preserve">
          <source>Slice transforms</source>
          <target state="translated">슬라이스 변환</target>
        </trans-unit>
        <trans-unit id="5c17b90ab78d86e62c72c3dbcd8cb199edcf89a0" translate="yes" xml:space="preserve">
          <source>Slice transforms take a slice of the array. Any two non-negative integers can be used, separated by a single underscore. The lookups available after the transform do not change. For example:</source>
          <target state="translated">슬라이스 변환은 배열의 슬라이스를 취합니다. 하나의 밑줄로 구분 된 두 개의 음이 아닌 정수를 사용할 수 있습니다. 변환 후 사용 가능한 조회는 변경되지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6cd11852ab5f872acf123cf810b3e4452375ff0b" translate="yes" xml:space="preserve">
          <source>Slightly complex built-in &lt;code&gt;Field&lt;/code&gt; classes</source>
          <target state="translated">약간 복잡한 내장 &lt;code&gt;Field&lt;/code&gt; 클래스</target>
        </trans-unit>
        <trans-unit id="8406bd88e7e3a01d4e4da0fc3d9fe43a26302684" translate="yes" xml:space="preserve">
          <source>So - if you wanted to get a reference to the Change view for a particular &lt;code&gt;Choice&lt;/code&gt; object (from the polls application) in the default admin, you would call:</source>
          <target state="translated">그래서 - 특정의보기 변경에 대한 참조를 얻기 위해 원하는 경우 &lt;code&gt;Choice&lt;/code&gt; 기본 admin에 (투표 응용 프로그램에서) 개체를, 당신은 부를 것이다 :</target>
        </trans-unit>
        <trans-unit id="f561932be65722b9d44a8be0c2d5b554e4294e2c" translate="yes" xml:space="preserve">
          <source>So - what does this mean in practice? Let&amp;rsquo;s consider another sample configuration. This one will have several databases: one for the &lt;code&gt;auth&lt;/code&gt; application, and all other apps using a primary/replica setup with two read replicas. Here are the settings specifying these databases:</source>
          <target state="translated">그래서-이것이 실제로 무엇을 의미합니까? 다른 샘플 구성을 고려해 봅시다. 여기에는 &lt;code&gt;auth&lt;/code&gt; 데이터베이스 용 데이터베이스 와 두 개의 읽기 전용 복제본이있는 기본 / 복제본 설정을 사용하는 다른 모든 데이터베이스가 있습니다. 이러한 데이터베이스를 지정하는 설정은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="598d09837c274e79aa4ceb6e5cdf49a6beb84930" translate="yes" xml:space="preserve">
          <source>So a child model does not have access to its parent&amp;rsquo;s &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an &lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; attribute or a &lt;a href=&quot;../../ref/models/options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt; attribute, it will inherit these from its parent.</source>
          <target state="translated">따라서 자식 모델은 부모의 &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; 클래스에 액세스 할 수 없습니다 . 그러나 자식이 부모로부터 동작을 상속하는 몇 가지 제한적인 경우가 있습니다. 자식이 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt; 속성이나 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; &lt;/a&gt; 속성을 지정하지 않으면 부모에서이를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="233051ddd7bf751229384544c29d3b1075d67834" translate="yes" xml:space="preserve">
          <source>So far, this document has focused on caching your &lt;em&gt;own&lt;/em&gt; data. But another type of caching is relevant to Web development, too: caching performed by &amp;ldquo;downstream&amp;rdquo; caches. These are systems that cache pages for users even before the request reaches your website.</source>
          <target state="translated">지금까지이 문서는 &lt;em&gt;자신의&lt;/em&gt; 데이터 를 캐싱하는 데 중점을 두었습니다 . 그러나 다른 유형의 캐싱은 웹 개발과도 관련이 있습니다. &quot;다운 스트림&quot;캐시에 의해 수행되는 캐싱. 요청이 웹 사이트에 도달하기 전에도 사용자를 위해 페이지를 캐시하는 시스템입니다.</target>
        </trans-unit>
        <trans-unit id="683cf4990b5e54a0c5cac35fb823156284b118a2" translate="yes" xml:space="preserve">
          <source>So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying.</source>
          <target state="translated">지금까지 쿼리중인 모델에 속하는 필드에 대한 집계를 처리했습니다. 그러나 때때로 집계하려는 값이 쿼리중인 모델과 관련된 모델에 속할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8ad77851902fd991b08e548de03986e08bfe07e" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve returned the results for which any match between the vector and the query are possible. It&amp;rsquo;s likely you may wish to order the results by some sort of relevancy. PostgreSQL provides a ranking function which takes into account how often the query terms appear in the document, how close together the terms are in the document, and how important the part of the document is where they occur. The better the match, the higher the value of the rank. To order by relevancy:</source>
          <target state="translated">지금까지 벡터와 쿼리가 일치하는 결과를 반환했습니다. 어떤 관련성에 따라 결과를 주문하고 싶을 수도 있습니다. PostgreSQL은 쿼리 용어가 문서에 얼마나 자주 나타나는지, 용어가 문서에 얼마나 밀접하게 있는지, 그리고 문서의 일부가 발생하는 위치를 고려하는 순위 기능을 제공합니다. 일치할수록 순위 값이 높아집니다. 관련성별로 주문하려면 :</target>
        </trans-unit>
        <trans-unit id="e76d28a93a56412c9079f8f2a2fb2b4ef88241ab" translate="yes" xml:space="preserve">
          <source>So how do you get Django to emit a natural key when serializing an object? Firstly, you need to add another method &amp;ndash; this time to the model itself:</source>
          <target state="translated">그렇다면 객체를 직렬화 할 때 어떻게 장고가 자연 키를 방출하게합니까? 먼저, 다른 방법을 추가해야합니다 &amp;ndash; 이번에는 모델 자체에 :</target>
        </trans-unit>
        <trans-unit id="10d46b4cdce588dddd936913fdf44c2259f1e789" translate="yes" xml:space="preserve">
          <source>So let&amp;rsquo;s do that right away.</source>
          <target state="translated">그러니 바로 그렇게하겠습니다.</target>
        </trans-unit>
        <trans-unit id="9fdecc262c1629f88b66330834aca08d30051882" translate="yes" xml:space="preserve">
          <source>So the second step is to refactor your code wherever you instantiate datetime objects to make them aware. This can be done incrementally. &lt;a href=&quot;../../ref/utils#module-django.utils.timezone&quot;&gt;&lt;code&gt;django.utils.timezone&lt;/code&gt;&lt;/a&gt; defines some handy helpers for compatibility code: &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/utils#django.utils.timezone.is_aware&quot;&gt;&lt;code&gt;is_aware()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/utils#django.utils.timezone.is_naive&quot;&gt;&lt;code&gt;is_naive()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/utils#django.utils.timezone.make_aware&quot;&gt;&lt;code&gt;make_aware()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/utils#django.utils.timezone.make_naive&quot;&gt;&lt;code&gt;make_naive()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">따라서 두 번째 단계는 날짜 / 시간 객체를 인스턴스화 할 때마다 코드를 리팩터링하여 인식하도록하는 것입니다. 점진적으로 수행 할 수 있습니다. &lt;a href=&quot;../../ref/utils#module-django.utils.timezone&quot;&gt; &lt;code&gt;django.utils.timezone&lt;/code&gt; &lt;/a&gt; 은 호환성 코드를위한 몇 가지 편리한 헬퍼를 정의합니다 : &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/utils#django.utils.timezone.is_aware&quot;&gt; &lt;code&gt;is_aware()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/utils#django.utils.timezone.is_naive&quot;&gt; &lt;code&gt;is_naive()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/utils#django.utils.timezone.make_aware&quot;&gt; &lt;code&gt;make_aware()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/utils#django.utils.timezone.make_naive&quot;&gt; &lt;code&gt;make_naive()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a9fa6df1030c681f4b653cab38b34c79d168b905" translate="yes" xml:space="preserve">
          <source>So using the &lt;a href=&quot;queries#queryset-model-example&quot;&gt;example Weblog models&lt;/a&gt;:</source>
          <target state="translated">따라서 &lt;a href=&quot;queries#queryset-model-example&quot;&gt;예제 Weblog 모델을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebd952b0234203e118fc3c69ff6ebaa6773f713b" translate="yes" xml:space="preserve">
          <source>So we would like &lt;code&gt;Experiment.objects.filter(change__abs__lt=27)&lt;/code&gt; to generate the following SQL:</source>
          <target state="translated">따라서 &lt;code&gt;Experiment.objects.filter(change__abs__lt=27)&lt;/code&gt; 를 사용하여 다음 SQL을 생성하려고합니다.</target>
        </trans-unit>
        <trans-unit id="d4ebec154fa5a5260976679b0d14ca66b0cb2923" translate="yes" xml:space="preserve">
          <source>So when we handle a model instance in a view, we typically retrieve it from the database. When we&amp;rsquo;re dealing with a form we typically instantiate it in the view.</source>
          <target state="translated">따라서 뷰에서 모델 인스턴스를 처리 할 때 일반적으로 데이터베이스에서 모델 인스턴스를 검색합니다. 양식을 다룰 때 일반적으로보기에서 양식을 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="d128cae741730115b6ac893458e0f8b757ebd154" translate="yes" xml:space="preserve">
          <source>So where the code to handle HTTP &lt;code&gt;GET&lt;/code&gt; in a view function would look something like:</source>
          <target state="translated">따라서 뷰 함수에서 HTTP &lt;code&gt;GET&lt;/code&gt; 을 처리하는 코드 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="73a3b13f9aeeb915283db7cd3bc96f1339924480" translate="yes" xml:space="preserve">
          <source>So why create tests, and why now?</source>
          <target state="translated">왜 테스트를 만들고 왜 지금?</target>
        </trans-unit>
        <trans-unit id="43f33483d117b1be82e626da94e988a40efc3f88" translate="yes" xml:space="preserve">
          <source>So you can safely call it multiple times on the same URI/IRI without risking double-quoting problems.</source>
          <target state="translated">따라서 큰 따옴표 문제의 위험없이 동일한 URI / IRI에서 여러 번 안전하게 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24b3d1927c58bb77b286261f38b39d20d0eaa5aa" translate="yes" xml:space="preserve">
          <source>So, instead of writing:</source>
          <target state="translated">따라서 글을 쓰는 대신 :</target>
        </trans-unit>
        <trans-unit id="25747342519ffca33e4647ec8682177965a6348a" translate="yes" xml:space="preserve">
          <source>So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django&amp;rsquo;s default database-based scheme, or you can use the default system in tandem with other systems.</source>
          <target state="translated">따라서 이와 같은 상황을 처리하기 위해 Django 인증 시스템을 사용하면 다른 인증 소스를 연결할 수 있습니다. Django의 기본 데이터베이스 기반 체계를 재정의하거나 다른 시스템과 함께 기본 시스템을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2b08f406111951f741efe38048a503154b1311b" translate="yes" xml:space="preserve">
          <source>So, to recap, this view function returns an HTML page that includes the current date and time. To display this view at a particular URL, you&amp;rsquo;ll need to create a &lt;em&gt;URLconf&lt;/em&gt;; see &lt;a href=&quot;urls&quot;&gt;URL dispatcher&lt;/a&gt; for instructions.</source>
          <target state="translated">요약하면이보기 함수는 현재 날짜와 시간이 포함 된 HTML 페이지를 반환합니다. 이 URL을 특정 URL에 표시하려면 &lt;em&gt;URLconf&lt;/em&gt; 를 만들어야합니다 . 지시 사항 은 &lt;a href=&quot;urls&quot;&gt;URL 디스패처&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce78f441b208d6b519ed2450af0dd83db6051131" translate="yes" xml:space="preserve">
          <source>So, you need to know what performance improvements you are aiming for, and you also need to know that you have a good reason for aiming in that direction - and for that you need:</source>
          <target state="translated">따라서 어떤 성능 향상을 목표로해야하는지 알아야하며, 그 방향을 목표로 삼아야 할 충분한 이유가 있음을 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="cdc0c6df181b92cda0ef2f0658e79cb1f18ed57d" translate="yes" xml:space="preserve">
          <source>Solution: rather than disabling the middleware and applying &lt;code&gt;csrf_protect&lt;/code&gt; to all the views that need it, enable the middleware and use &lt;a href=&quot;#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">해결 방법 : 미들웨어를 비활성화하고 필요한 모든 뷰에 &lt;code&gt;csrf_protect&lt;/code&gt; 를 적용하는 대신 미들웨어를 활성화하고 &lt;a href=&quot;#django.views.decorators.csrf.csrf_exempt&quot;&gt; &lt;code&gt;csrf_exempt()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="1732f301ddac16a7401bb484115a6a9de2fb56b4" translate="yes" xml:space="preserve">
          <source>Solution: use &lt;a href=&quot;#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;#django.views.decorators.csrf.requires_csrf_token&quot;&gt;&lt;code&gt;requires_csrf_token()&lt;/code&gt;&lt;/a&gt;. (i.e. &lt;code&gt;requires_csrf_token&lt;/code&gt; should be the innermost decorator).</source>
          <target state="translated">해결 방법 : 사용 &lt;a href=&quot;#django.views.decorators.csrf.csrf_exempt&quot;&gt; &lt;code&gt;csrf_exempt()&lt;/code&gt; &lt;/a&gt; 다음에 &lt;a href=&quot;#django.views.decorators.csrf.requires_csrf_token&quot;&gt; &lt;code&gt;requires_csrf_token()&lt;/code&gt; &lt;/a&gt; . (즉, &lt;code&gt;requires_csrf_token&lt;/code&gt; 이 가장 안쪽 데코레이터 여야합니다).</target>
        </trans-unit>
        <trans-unit id="d7259ee02aa1d277b0913c286a1aca5a960d7047" translate="yes" xml:space="preserve">
          <source>Solution: use &lt;a href=&quot;#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt; for the whole view function, and &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; for the path within it that needs protection. Example:</source>
          <target state="translated">사용 : 솔루션 &lt;a href=&quot;#django.views.decorators.csrf.csrf_exempt&quot;&gt; &lt;code&gt;csrf_exempt()&lt;/code&gt; &lt;/a&gt; 전체보기 기능 및 &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt; 보호가 필요한 그 안에 경로합니다. 예:</target>
        </trans-unit>
        <trans-unit id="606449e793ebc99c4d94ce3bbff5cc3c7a91a9a5" translate="yes" xml:space="preserve">
          <source>Solution: use &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt;&lt;code&gt;ensure_csrf_cookie()&lt;/code&gt;&lt;/a&gt; on the view that sends the page.</source>
          <target state="translated">솔루션 : 페이지를 전송하는보기에서 &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt; &lt;code&gt;ensure_csrf_cookie()&lt;/code&gt; &lt;/a&gt; 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="8a88f55173c70a5542600ba64028d2c57e930304" translate="yes" xml:space="preserve">
          <source>Solution: use &lt;a href=&quot;#django.views.decorators.csrf.requires_csrf_token&quot;&gt;&lt;code&gt;requires_csrf_token()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">솔루션 : &lt;a href=&quot;#django.views.decorators.csrf.requires_csrf_token&quot;&gt; &lt;code&gt;requires_csrf_token()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33814f0df41ae834316457d8c08ab73721260bbb" translate="yes" xml:space="preserve">
          <source>Some (older) shortcuts for specifying a field lookup are also available. You can prefix a field in &lt;code&gt;search_fields&lt;/code&gt; with the following characters and it&amp;rsquo;s equivalent to adding &lt;code&gt;__&amp;lt;lookup&amp;gt;&lt;/code&gt; to the field:</source>
          <target state="translated">필드 조회를 지정하기위한 일부 (이전) 단축키도 사용할 수 있습니다. &lt;code&gt;search_fields&lt;/code&gt; 에서 필드 앞에 다음 문자를 붙일 수 있으며 &lt;code&gt;__&amp;lt;lookup&amp;gt;&lt;/code&gt; 을 필드 에 추가하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="78ee08374bb6fe16779c8ca5e3e0522d2fc7572c" translate="yes" xml:space="preserve">
          <source>Some &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; classes have required arguments. &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, for example, requires that you give it a &lt;a href=&quot;../ref/models/fields#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;. That&amp;rsquo;s used not only in the database schema, but in validation, as we&amp;rsquo;ll soon see.</source>
          <target state="translated">일부 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 클래스에는 인수가 필요합니다. 예를 들어 &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../ref/models/fields#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; 를 지정해야&lt;/a&gt; 합니다. 이것은 곧 알 수 있듯이 데이터베이스 스키마뿐만 아니라 유효성 검사에도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8ad23bdf1898c6566dc19368d531825cc233dc88" translate="yes" xml:space="preserve">
          <source>Some &lt;a href=&quot;index&quot;&gt;django.contrib&lt;/a&gt; applications take advantage of the sites framework but are architected in a way that doesn&amp;rsquo;t &lt;em&gt;require&lt;/em&gt; the sites framework to be installed in your database. (Some people don&amp;rsquo;t want to, or just aren&amp;rsquo;t &lt;em&gt;able&lt;/em&gt; to install the extra database table that the sites framework requires.) For those cases, the framework provides a &lt;a href=&quot;#django.contrib.sites.requests.RequestSite&quot;&gt;&lt;code&gt;django.contrib.sites.requests.RequestSite&lt;/code&gt;&lt;/a&gt; class, which can be used as a fallback when the database-backed sites framework is not available.</source>
          <target state="translated">일부 &lt;a href=&quot;index&quot;&gt;django.contrib&lt;/a&gt; 응용 프로그램은 사이트 프레임 워크를 활용하지만 데이터베이스에 사이트 프레임 워크를 설치 하지 &lt;em&gt;않아도&lt;/em&gt; 되는 방식으로 설계되었습니다 . (일부 사람들은 사이트 프레임 워크에 필요한 추가 데이터베이스 테이블을 원치 않거나 설치할 &lt;em&gt;수&lt;/em&gt; 없습니다 .) 이러한 경우 프레임 워크는 &lt;a href=&quot;#django.contrib.sites.requests.RequestSite&quot;&gt; &lt;code&gt;django.contrib.sites.requests.RequestSite&lt;/code&gt; &lt;/a&gt; 클래스를 제공 합니다. 데이터베이스 지원 사이트 프레임 워크를 사용할 수없는 경우 대체로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2f9ec2fcd24e83e4cbf05ef25ff3d184e319a8ca" translate="yes" xml:space="preserve">
          <source>Some Django templates context processors return a fixed value. For Jinja2 templates, this layer of indirection isn&amp;rsquo;t necessary since you can add constants directly in &lt;code&gt;jinja2.Environment&lt;/code&gt;.</source>
          <target state="translated">일부 Django 템플릿 컨텍스트 프로세서는 고정 된 값을 반환합니다. Jinja2 템플릿의 경우 &lt;code&gt;jinja2.Environment&lt;/code&gt; 에서 직접 상수를 추가 할 수 있으므로이 간접 레이어는 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="9beeac4fefe22b2ac7a5959e4c79700f9e5ab3c0" translate="yes" xml:space="preserve">
          <source>Some Python libraries are also implemented in C, and can be much faster. They aim to offer the same APIs. Note that compatibility issues and behavior differences are not unknown (and not always immediately evident).</source>
          <target state="translated">일부 Python 라이브러리도 C로 구현되며 훨씬 빠릅니다. 동일한 API를 제공하는 것을 목표로합니다. 호환성 문제와 동작 차이는 알 수 없으며 항상 즉각적인 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="dc6004eaaf1dfc5fe3224f697cb779bde6a25056" translate="yes" xml:space="preserve">
          <source>Some actions are best if they&amp;rsquo;re made available to &lt;em&gt;any&lt;/em&gt; object in the admin site &amp;ndash; the export action defined above would be a good candidate. You can make an action globally available using &lt;a href=&quot;#django.contrib.admin.AdminSite.add_action&quot;&gt;&lt;code&gt;AdminSite.add_action()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">일부 작업은 관리자 사이트의 &lt;em&gt;모든&lt;/em&gt; 개체에서 사용할 수 &lt;em&gt;있는&lt;/em&gt; 경우 가장 좋습니다. 위에서 정의한 내보내기 작업이 적합합니다. &lt;a href=&quot;#django.contrib.admin.AdminSite.add_action&quot;&gt; &lt;code&gt;AdminSite.add_action()&lt;/code&gt; &lt;/a&gt; 사용하여 작업을 전체적으로 사용할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="860276ec0a952cfccbad6fa70ecb9e9d0ae63381" translate="yes" xml:space="preserve">
          <source>Some attributes won&amp;rsquo;t make sense to include in the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class of an abstract base class. For example, including &lt;code&gt;db_table&lt;/code&gt; would mean that all the child classes (the ones that don&amp;rsquo;t specify their own &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;) would use the same database table, which is almost certainly not what you want.</source>
          <target state="translated">일부 속성은 추상 기본 클래스 의 &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; 클래스에 포함되지 않습니다 . 예를 들어, &lt;code&gt;db_table&lt;/code&gt; 을 포함 한다는 것은 모든 자식 클래스 (자신의 &lt;a href=&quot;#meta-options&quot;&gt;Meta를&lt;/a&gt; 지정하지 않는 클래스 )가 동일한 데이터베이스 테이블을 사용한다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="48ddac3ff9ee3fffde3bc9983055377483a00c3d" translate="yes" xml:space="preserve">
          <source>Some browsers (Chrome, for example) provide settings that allow users to continue browsing sessions after closing and re-opening the browser. In some cases, this can interfere with the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt;&lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt;&lt;/a&gt; setting and prevent sessions from expiring on browser close. Please be aware of this while testing Django applications which have the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt;&lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt;&lt;/a&gt; setting enabled.</source>
          <target state="translated">일부 브라우저 (예 : Chrome)는 사용자가 브라우저를 닫았다가 다시 연 후에도 세션을 계속 탐색 할 수있는 설정을 제공합니다. 경우에 따라 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt; &lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt; &lt;/a&gt; 설정을 방해하여 브라우저가 닫힐 때 세션이 만료되지 않을 수 있습니다 . &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt; &lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt; &lt;/a&gt; 설정이 활성화 된 Django 애플리케이션을 테스트 할 때이 점에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="e343a5d579ed723e961eec44f99895b796fa4c79" translate="yes" xml:space="preserve">
          <source>Some browsers (specifically Internet Explorer) can disallow the use of persistent cookies or can have the indexes to the cookie jar corrupted on disk, thereby causing CSRF protection checks to (sometimes intermittently) fail. Change this setting to &lt;code&gt;None&lt;/code&gt; to use session-based CSRF cookies, which keep the cookies in-memory instead of on persistent storage.</source>
          <target state="translated">일부 브라우저 (특히 Internet Explorer)는 영구 쿠키 사용을 허용하지 않거나 디스크에서 쿠키 항아리에 대한 인덱스가 손상되어 CSRF 보호 검사가 간헐적으로 실패 할 수 있습니다. 세션 기반 CSRF 쿠키를 사용하려면 쿠키를 영구 저장소 대신 메모리에 유지하려면 이 설정을 &lt;code&gt;None&lt;/code&gt; 으로 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="b38e44e93652ea2e6cea516bd33630476f164097" translate="yes" xml:space="preserve">
          <source>Some browsers have the ability to accept hints about whether they should send the HTTP &lt;code&gt;Referer&lt;/code&gt; header when a user clicks a link; this hint is provided via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy&quot;&gt;the Referrer-Policy header&lt;/a&gt;. This header can suggest any of three behaviors to browsers:</source>
          <target state="translated">일부 브라우저는 사용자가 링크를 클릭 할 때 HTTP &lt;code&gt;Referer&lt;/code&gt; 헤더를 보내야하는지에 대한 힌트를 수용 할 수 있습니다. 이 힌트는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy&quot;&gt;Referrer-Policy 헤더&lt;/a&gt; 를 통해 제공됩니다 . 이 헤더는 브라우저에 다음 세 가지 동작 중 하나를 제안 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94f17d1dcbe8751b34f3b9eba967a1bd70fe65e6" translate="yes" xml:space="preserve">
          <source>Some browsers have the ability to block content that appears to be an &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS attack&lt;/a&gt;. They work by looking for JavaScript content in the GET or POST parameters of a page. If the JavaScript is replayed in the server&amp;rsquo;s response, the page is blocked from rendering and an error page is shown instead.</source>
          <target state="translated">일부 브라우저는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS 공격으로&lt;/a&gt; 보이는 컨텐트를 차단할 수 있습니다 . 페이지의 GET 또는 POST 매개 변수에서 JavaScript 컨텐츠를 찾아서 작동합니다. 서버의 응답에서 JavaScript가 재생되면 페이지 렌더링이 차단되고 대신 오류 페이지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6c9928877027204c843d4efa084c546dc20bc25e" translate="yes" xml:space="preserve">
          <source>Some browsers will try to guess the content types of the assets that they fetch, overriding the &lt;code&gt;Content-Type&lt;/code&gt; header. While this can help display sites with improperly configured servers, it can also pose a security risk.</source>
          <target state="translated">일부 브라우저는 가져온 자산의 컨텐츠 유형을 추측하여 &lt;code&gt;Content-Type&lt;/code&gt; 헤더를 재정의하려고합니다 . 이렇게하면 서버가 잘못 구성된 사이트를 표시하는 데 도움이되지만 보안 위험이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5947ef1c3ff79affc0a0f315b61caf1ca05b732d" translate="yes" xml:space="preserve">
          <source>Some checks may be registered with multiple tags.</source>
          <target state="translated">일부 검사는 여러 태그로 등록 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="819f9354118a97dfea48164b3aac077a84091237" translate="yes" xml:space="preserve">
          <source>Some command options have different names when using &lt;code&gt;call_command()&lt;/code&gt; instead of &lt;code&gt;django-admin&lt;/code&gt; or &lt;code&gt;manage.py&lt;/code&gt;. For example, &lt;code&gt;django-admin
createsuperuser --no-input&lt;/code&gt; translates to &lt;code&gt;call_command('createsuperuser',
interactive=False)&lt;/code&gt;. To find what keyword argument name to use for &lt;code&gt;call_command()&lt;/code&gt;, check the command&amp;rsquo;s source code for the &lt;code&gt;dest&lt;/code&gt; argument passed to &lt;code&gt;parser.add_argument()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;django-admin&lt;/code&gt; 또는 &lt;code&gt;manage.py&lt;/code&gt; 대신 &lt;code&gt;call_command()&lt;/code&gt; 를 사용할 때 일부 명령 옵션의 이름이 다릅니다 . 예를 들어 &lt;code&gt;django-admin createsuperuser --no-input&lt;/code&gt; 은 &lt;code&gt;call_command('createsuperuser', interactive=False)&lt;/code&gt; 됩니다. 키워드 인수 이름에 사용하는 것을 찾으려면 &lt;code&gt;call_command()&lt;/code&gt; 의에 대한 명령의 소스 코드를 확인 &lt;code&gt;dest&lt;/code&gt; 에 전달 된 인수 &lt;code&gt;parser.add_argument()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40ed5069719ca706a052b71ed888fb914044b4bd" translate="yes" xml:space="preserve">
          <source>Some commands are only available when the &lt;code&gt;django.contrib&lt;/code&gt; application that &lt;a href=&quot;../howto/custom-management-commands&quot;&gt;implements&lt;/a&gt; them has been &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/a&gt;. This section describes them grouped by their application.</source>
          <target state="translated">일부 명령은 해당 명령 을 &lt;a href=&quot;../howto/custom-management-commands&quot;&gt;구현&lt;/a&gt; 하는 &lt;code&gt;django.contrib&lt;/code&gt; 응용 프로그램 이 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;enabled&lt;/code&gt; &lt;/a&gt; 경우에만 사용할 수 있습니다 . 이 섹션에서는 애플리케이션별로 그룹화하여 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5025f5d674e485b55f68ce091f6acfa0c0ba68ec" translate="yes" xml:space="preserve">
          <source>Some commonly used options are:</source>
          <target state="translated">일반적으로 사용되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="47ee5f1aba7a690b33d96780b096a0051bbc6b17" translate="yes" xml:space="preserve">
          <source>Some data types (for example, dates) need to be in a specific format before they can be used by a database backend. &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt; is the method where those conversions should be made. The specific connection that will be used for the query is passed as the &lt;code&gt;connection&lt;/code&gt; parameter. This allows you to use backend-specific conversion logic if it is required.</source>
          <target state="translated">일부 데이터 유형 (예 : 날짜)은 데이터베이스 백엔드에서 사용하기 전에 특정 형식이어야합니다. &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_value&quot;&gt; &lt;code&gt;get_db_prep_value()&lt;/code&gt; &lt;/a&gt; 는 이러한 변환을 수행하는 방법입니다. 조회에 사용될 특정 연결이 &lt;code&gt;connection&lt;/code&gt; 매개 변수 로 전달됩니다 . 필요한 경우 백엔드 별 변환 논리를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e4eb09639ac8f304e3c1a27ef0ae0e9f9e76a12" translate="yes" xml:space="preserve">
          <source>Some database column types accept parameters, such as &lt;code&gt;CHAR(25)&lt;/code&gt;, where the parameter &lt;code&gt;25&lt;/code&gt; represents the maximum column length. In cases like these, it&amp;rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the &lt;code&gt;db_type()&lt;/code&gt; method. For example, it wouldn&amp;rsquo;t make much sense to have a &lt;code&gt;CharMaxlength25Field&lt;/code&gt;, shown here:</source>
          <target state="translated">일부 데이터베이스 열 유형은 &lt;code&gt;CHAR(25)&lt;/code&gt; 와 같은 매개 변수를 허용합니다 . 여기서 매개 변수 &lt;code&gt;25&lt;/code&gt; 는 최대 열 길이를 나타냅니다. 이러한 경우 &lt;code&gt;db_type()&lt;/code&gt; 메소드 에서 하드 코딩되지 않고 모델에 매개 변수를 지정하면 더 유연합니다 . 예를 들어, 다음 과 같이 &lt;code&gt;CharMaxlength25Field&lt;/code&gt; 를 갖는 것은 의미가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="2afc9560a0399a1863719f5c344bff8cf0e6311f" translate="yes" xml:space="preserve">
          <source>Some databases accept flags that can return more information about the query. Pass these flags as keyword arguments. For example, when using PostgreSQL:</source>
          <target state="translated">일부 데이터베이스는 쿼리에 대한 추가 정보를 반환 할 수있는 플래그를 허용합니다. 이 플래그를 키워드 인수로 전달하십시오. 예를 들어 PostgreSQL을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="d12081cb143936f05d46d555968708fe3567a874" translate="yes" xml:space="preserve">
          <source>Some databases may handle a nonexistent nth-value differently. For example, Oracle returns an empty string rather than &lt;code&gt;None&lt;/code&gt; for character-based expressions. Django doesn&amp;rsquo;t do any conversions in these cases.</source>
          <target state="translated">일부 데이터베이스는 존재하지 않는 n 번째 값을 다르게 처리 할 수 ​​있습니다. 예를 들어, Oracle은 문자 기반 표현식에 대해 &lt;code&gt;None&lt;/code&gt; 대신 빈 문자열을 반환합니다 . 이 경우 Django는 어떠한 변환도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ee0da3ba10c0561259c61cc02d3e3cfd1503233c" translate="yes" xml:space="preserve">
          <source>Some developers like to make available both Atom &lt;em&gt;and&lt;/em&gt; RSS versions of their feeds. To do that, you can create a subclass of your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class and set the &lt;code&gt;feed_type&lt;/code&gt; to something different. Then update your URLconf to add the extra versions.</source>
          <target state="translated">일부 개발자는 Atom &lt;em&gt;및&lt;/em&gt; RSS 버전의 피드를 모두 제공하고자 합니다. 이를 위해 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 의 서브 클래스를 작성 하고 &lt;code&gt;feed_type&lt;/code&gt; 을 다른 것으로 설정할 수 있습니다. 그런 다음 URLconf를 업데이트하여 추가 버전을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="76b15ddd9bbae2a42a5c96bc2b644d8162ba90e8" translate="yes" xml:space="preserve">
          <source>Some examples</source>
          <target state="translated">몇 가지 예</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="2907c1539c155d2d06cf7124339feb9815ef8918" translate="yes" xml:space="preserve">
          <source>Some field types need some extra handling. For example, files that are uploaded using a form need to be handled differently (they can be retrieved from &lt;code&gt;request.FILES&lt;/code&gt;, rather than &lt;code&gt;request.POST&lt;/code&gt;). For details of how to handle file uploads with your form, see &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;Binding uploaded files to a form&lt;/a&gt;.</source>
          <target state="translated">일부 필드 유형에는 추가 처리가 필요합니다. 예를 들어, 양식 필요를 사용하여 업로드 된 파일은 (그들이에서 검색 할 수 있습니다 다르게 처리 할 &lt;code&gt;request.FILES&lt;/code&gt; 보다는 &lt;code&gt;request.POST&lt;/code&gt; ). 양식으로 파일 업로드를 처리하는 방법에 대한 자세한 내용은 &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;업로드 된 파일을 양식에 바인딩을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7066db4e492a0be3a6b4063c837dd4af308da5ad" translate="yes" xml:space="preserve">
          <source>Some fields define extra attributes on the model, e.g. a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; defines an extra attribute with &lt;code&gt;_id&lt;/code&gt; appended to the field name, as well as &lt;code&gt;related_name&lt;/code&gt; and &lt;code&gt;related_query_name&lt;/code&gt; on the foreign model.</source>
          <target state="translated">일부 필드는 모델에서 추가 속성을 정의합니다. 예를 들어 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 는 외부 모델에서 &lt;code&gt;related_name&lt;/code&gt; 및 &lt;code&gt;related_query_name&lt;/code&gt; 뿐만 아니라 필드 이름에 &lt;code&gt;_id&lt;/code&gt; 가 추가 된 추가 속성을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="e5793debf164ca6cec38def668a248ae75d3483b" translate="yes" xml:space="preserve">
          <source>Some fields in a model won&amp;rsquo;t be deferred, even if you ask for them. You can never defer the loading of the primary key. If you are using &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; to retrieve related models, you shouldn&amp;rsquo;t defer the loading of the field that connects from the primary model to the related one, doing so will result in an error.</source>
          <target state="translated">모델의 일부 필드는 요청하더라도 지연되지 않습니다. 기본 키로드를 지연시킬 수는 없습니다. &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt; 를 사용하여 관련 모델을 검색하는 경우 기본 모델에서 관련 모델로 연결되는 필드의로드를 지연하면 안되며 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6387aa2204d8874bbb172b741895ccb637353b5f" translate="yes" xml:space="preserve">
          <source>Some filters take an argument:</source>
          <target state="translated">일부 필터는 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="337ae5df2b22204a5e03939b03b67510bbb5e057" translate="yes" xml:space="preserve">
          <source>Some filters take arguments. A filter argument looks like this: &lt;code&gt;{{
bio|truncatewords:30 }}&lt;/code&gt;. This will display the first 30 words of the &lt;code&gt;bio&lt;/code&gt; variable.</source>
          <target state="translated">일부 필터는 인수를 취합니다. 필터 인수는 &lt;code&gt;{{ bio|truncatewords:30 }}&lt;/code&gt; . &lt;code&gt;bio&lt;/code&gt; 변수 의 처음 30 단어가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="f0991310fccbc2fc5417e6fc0c6b37dc5d602987" translate="yes" xml:space="preserve">
          <source>Some general advice</source>
          <target state="translated">일반적인 조언</target>
        </trans-unit>
        <trans-unit id="9394ce57d7c6767a48bd5d52816526aefde5f6c8" translate="yes" xml:space="preserve">
          <source>Some information on available parameters can be found in the &lt;a href=&quot;../topics/cache#cache-arguments&quot;&gt;cache arguments&lt;/a&gt; documentation. For more information, consult your backend module&amp;rsquo;s own documentation.</source>
          <target state="translated">사용 가능한 매개 변수에 대한 일부 정보는 &lt;a href=&quot;../topics/cache#cache-arguments&quot;&gt;캐시 인수&lt;/a&gt; 문서 에서 찾을 수 있습니다 . 자세한 내용은 백엔드 모듈 자체 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7d6a2765c22e184a074a9229f28efcd48fbd37ba" translate="yes" xml:space="preserve">
          <source>Some information on available parameters can be found in the &lt;a href=&quot;databases&quot;&gt;Database Backends&lt;/a&gt; documentation. For more information, consult your backend module&amp;rsquo;s own documentation.</source>
          <target state="translated">사용 가능한 매개 변수에 대한 일부 정보는 &lt;a href=&quot;databases&quot;&gt;데이터베이스 백엔드&lt;/a&gt; 설명서 에서 찾을 수 있습니다 . 자세한 내용은 백엔드 모듈 자체 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5868ed7c92929805cff3172e912f66f09e2b60ed" translate="yes" xml:space="preserve">
          <source>Some kinds of projects may have authentication requirements for which Django&amp;rsquo;s built-in &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.</source>
          <target state="translated">일부 종류의 프로젝트에는 Django의 내장 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델이 항상 적합하지 않은 인증 요구 사항이있을 수 있습니다 . 예를 들어, 일부 사이트에서는 사용자 이름 대신 전자 메일 주소를 식별 토큰으로 사용하는 것이 더 합리적입니다.</target>
        </trans-unit>
        <trans-unit id="57b5eb4bf16aee0330b0131fc6ed82a084a86536" translate="yes" xml:space="preserve">
          <source>Some locales use context-sensitive formats for numbers, which Django&amp;rsquo;s localization system cannot handle automatically.</source>
          <target state="translated">일부 로케일은 숫자에 상황에 맞는 형식을 사용하므로 Django의 현지화 시스템에서 자동으로 처리 할 수 ​​없습니다.</target>
        </trans-unit>
        <trans-unit id="1d1097822e6fb12b7ad28d75f598d30c339f9629" translate="yes" xml:space="preserve">
          <source>Some locales use non-uniform digit grouping, e.g. &lt;code&gt;10,00,00,000&lt;/code&gt; in &lt;code&gt;en_IN&lt;/code&gt;. For this case, you can provide a sequence with the number of digit group sizes to be applied. The first number defines the size of the group preceding the decimal delimiter, and each number that follows defines the size of preceding groups. If the sequence is terminated with &lt;code&gt;-1&lt;/code&gt;, no further grouping is performed. If the sequence terminates with a &lt;code&gt;0&lt;/code&gt;, the last group size is used for the remainder of the number.</source>
          <target state="translated">일부 로케일은 비 균일 한 자릿수 구분, 예를 들어, 사용 &lt;code&gt;10,00,00,000&lt;/code&gt; 을 에 &lt;code&gt;en_IN&lt;/code&gt; . 이 경우 적용 할 자릿수 그룹 크기의 순서를 제공 할 수 있습니다. 첫 번째 숫자는 10 진수 구분 기호 앞에있는 그룹의 크기를 정의하고 다음에 나오는 각 숫자는 선행 그룹의 크기를 정의합니다. 순서가 &lt;code&gt;-1&lt;/code&gt; 로 종료 되면 더 이상의 그룹화가 수행되지 않습니다. 시퀀스가 &lt;code&gt;0&lt;/code&gt; 으로 끝나는 경우 나머지 그룹 크기에 마지막 그룹 크기가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2c14b638974672a908e07dee2bd01d9b9a080929" translate="yes" xml:space="preserve">
          <source>Some of the admin templates, such as &lt;code&gt;change_list_results.html&lt;/code&gt; are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively.</source>
          <target state="translated">&lt;code&gt;change_list_results.html&lt;/code&gt; 과 같은 일부 관리 템플릿 은 사용자 정의 포함 태그를 렌더링하는 데 사용됩니다. 이것들은 무시 될 수 있지만, 그런 경우에는 문제가되는 태그의 고유 한 버전을 만들어 다른 이름을 지정하는 것이 좋습니다. 그렇게하면 선택적으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6101ff172eb911dcde2b1ca593f435b77a080069" translate="yes" xml:space="preserve">
          <source>Some of the checks described below can be automated using the &lt;a href=&quot;../../ref/django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check
--deploy&lt;/code&gt;&lt;/a&gt; option. Be sure to run it against your production settings file as described in the option&amp;rsquo;s documentation.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#cmdoption-check-deploy&quot;&gt; &lt;code&gt;check --deploy&lt;/code&gt; &lt;/a&gt; 옵션을 사용하여 아래 설명 된 일부 검사를 자동화 할 수 있습니다 . 옵션 설명서에 설명 된대로 프로덕션 설정 파일에 대해 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="da331f17e98722c8e0b5969c1ecc015cb60ddb68" translate="yes" xml:space="preserve">
          <source>Some of the examples on this page assume that an &lt;code&gt;Article&lt;/code&gt; model has been defined as follows in &lt;code&gt;myapp/models.py&lt;/code&gt;:</source>
          <target state="translated">이 페이지의 일부 예는 &lt;code&gt;Article&lt;/code&gt; 모델이 &lt;code&gt;myapp/models.py&lt;/code&gt; 에서 다음과 같이 정의 되었다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="2c6083ebf6de6ba95038ffc54f98581c39955816" translate="yes" xml:space="preserve">
          <source>Some of the examples on this page assume that an &lt;code&gt;Author&lt;/code&gt; model has been defined as follows in &lt;code&gt;myapp/models.py&lt;/code&gt;:</source>
          <target state="translated">이 페이지의 일부 예는 &lt;code&gt;Author&lt;/code&gt; 모델이 &lt;code&gt;myapp/models.py&lt;/code&gt; 에서 다음과 같이 정의 되었다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="d6de71cf9c1db874e223b4d1991e96b3757e16f1" translate="yes" xml:space="preserve">
          <source>Some of the middleware included in Django&amp;rsquo;s contrib apps set attributes on the request. If you don&amp;rsquo;t see the attribute on a request, be sure the appropriate middleware class is listed in &lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django의 contrib 앱에 포함 된 미들웨어 중 일부는 요청시 속성을 설정합니다. 요청에 속성이 표시되지 않으면 적절한 미들웨어 클래스가 &lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 에&lt;/a&gt; 나열되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="55cdcaa17b2d4ef686332c95d1abb29cd60ee8ab" translate="yes" xml:space="preserve">
          <source>Some of the things you can do with the test client are:</source>
          <target state="translated">테스트 클라이언트로 수행 할 수있는 작업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="48a7428f49f7906d462e795f9dbcbf65b483414f" translate="yes" xml:space="preserve">
          <source>Some of these applications make use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:</source>
          <target state="translated">이러한 응용 프로그램 중 일부는 하나 이상의 데이터베이스 테이블을 사용하므로 데이터베이스에서 테이블을 작성해야 사용할 수 있습니다. 그렇게하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="d3eab720e146373ff52bed04b0d67143a12e7505" translate="yes" xml:space="preserve">
          <source>Some of these checks may not be appropriate for your particular deployment configuration. For instance, if you do your HTTP to HTTPS redirection in a load balancer, it&amp;rsquo;d be irritating to be constantly warned about not having enabled &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;settings#std:setting-SILENCED_SYSTEM_CHECKS&quot;&gt;&lt;code&gt;SILENCED_SYSTEM_CHECKS&lt;/code&gt;&lt;/a&gt; to silence unneeded checks.</source>
          <target state="translated">이러한 확인 중 일부는 특정 배포 구성에 적합하지 않을 수 있습니다. 예를 들어,로드 밸런서에서 HTTP에서 HTTPS로 리디렉션을 수행하는 경우 &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; &lt;/a&gt; 를 활성화하지 않았다는 경고가 계속 나타 납니다 . 불필요한 검사를 &lt;a href=&quot;settings#std:setting-SILENCED_SYSTEM_CHECKS&quot;&gt; &lt;code&gt;SILENCED_SYSTEM_CHECKS&lt;/code&gt; &lt;/a&gt; 려면 SILENCED_SYSTEM_CHECKS 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="85ad33065f8090538b0c6acc0863627699aea233" translate="yes" xml:space="preserve">
          <source>Some of these form interface elements - text input or checkboxes - are built into HTML itself. Others are much more complex; an interface that pops up a date picker or allows you to move a slider or manipulate controls will typically use JavaScript and CSS as well as HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements to achieve these effects.</source>
          <target state="translated">이러한 양식 인터페이스 요소 (텍스트 입력 또는 확인란)는 HTML 자체에 내장되어 있습니다. 다른 것들은 훨씬 더 복잡합니다. 날짜 선택기를 팝업하거나 슬라이더를 이동하거나 컨트롤을 조작 할 수있는 인터페이스는 일반적으로 이러한 효과를 얻기 위해 HTML 양식 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 뿐만 아니라 JavaScript 및 CSS를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="19eb1b5065405427669f495e58ed9b1ea0e2fbf3" translate="yes" xml:space="preserve">
          <source>Some of these other loaders are disabled by default, but you can activate them by adding a &lt;code&gt;'loaders'&lt;/code&gt; option to your &lt;code&gt;DjangoTemplates&lt;/code&gt; backend in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting or passing a &lt;code&gt;loaders&lt;/code&gt; argument to &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;loaders&lt;/code&gt; should be a list of strings or tuples, where each represents a template loader class. Here are the template loaders that come with Django:</source>
          <target state="translated">이러한 다른 로더 중 일부는 기본적으로 비활성화되어 있지만 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;code&gt;DjangoTemplates&lt;/code&gt; 백엔드에 &lt;code&gt;'loaders'&lt;/code&gt; 옵션을 추가 하거나 &lt;code&gt;loaders&lt;/code&gt; 인수를 &lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; 에&lt;/a&gt; 전달하여 로더를 활성화 할 수 있습니다 . &lt;code&gt;loaders&lt;/code&gt; 는 문자열 또는 튜플의 목록이어야합니다. 각각은 템플릿 로더 클래스를 나타냅니다. Django와 함께 제공되는 템플릿 로더는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="daaa65d31ecc6474b926e6dcd6aeb65b14ea78a0" translate="yes" xml:space="preserve">
          <source>Some operations &amp;ndash; such as caching &amp;ndash; cannot be performed on an unrendered template. They must be performed on a fully complete and rendered response.</source>
          <target state="translated">캐싱과 같은 일부 작업은 렌더링되지 않은 템플릿에서 수행 할 수 없습니다. 완전하고 렌더링 된 응답으로 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="4a1da87e8fdc5d580d29ea9aa687bd55e4bebdb5" translate="yes" xml:space="preserve">
          <source>Some possible workarounds for this are &lt;a href=&quot;https://www.sqlite.org/faq.html#q18&quot;&gt;documented at sqlite.org&lt;/a&gt;, but they aren&amp;rsquo;t utilized by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering.</source>
          <target state="translated">이것에 대한 몇 가지 가능한 해결 방법 &lt;a href=&quot;https://www.sqlite.org/faq.html#q18&quot;&gt;은 sqlite.org&lt;/a&gt; 에 문서화되어 있지만 장고의 기본 SQLite 백엔드에서는 사용되지 않습니다.이를 통합하는 것은 상당히 어렵습니다. 따라서 Django는 기본 SQLite 동작을 노출하므로 대소 문자를 구분하지 않거나 하위 문자열 필터링을 수행 할 때이를 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="caa794be9052acadd3135f0e7a395d9862ddc995" translate="yes" xml:space="preserve">
          <source>Some programmers follow a discipline called &amp;ldquo;&lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;test-driven development&lt;/a&gt;&amp;rdquo;; they actually write their tests before they write their code. This might seem counter-intuitive, but in fact it&amp;rsquo;s similar to what most people will often do anyway: they describe a problem, then create some code to solve it. Test-driven development formalizes the problem in a Python test case.</source>
          <target state="translated">일부 프로그래머는&amp;ldquo; &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;테스트 중심 개발&lt;/a&gt; &amp;rdquo; 이라는 규칙을 따릅니다 . 실제로 코드를 작성하기 전에 테스트를 작성합니다. 이것은 직관적이지 않은 것처럼 보이지만 실제로는 대부분의 사람들이 자주하는 일과 비슷합니다. 문제를 설명하고이를 해결하기위한 코드를 만듭니다. 테스트 중심 개발은 Python 테스트 사례에서 문제를 공식화합니다.</target>
        </trans-unit>
        <trans-unit id="160314f52a6a38c580552266e868afa1e35e8519" translate="yes" xml:space="preserve">
          <source>Some security audit tools flag this as a problem but as mentioned before, an attacker cannot steal a user&amp;rsquo;s browser&amp;rsquo;s CSRF cookie. &amp;ldquo;Stealing&amp;rdquo; or modifying &lt;em&gt;your own&lt;/em&gt; token using Firebug, Chrome dev tools, etc. isn&amp;rsquo;t a vulnerability.</source>
          <target state="translated">일부 보안 감사 도구는이 문제를 문제로 표시하지만 앞에서 언급 한 것처럼 공격자는 사용자 브라우저의 CSRF 쿠키를 훔칠 수 없습니다. Firebug, Chrome 개발 도구 등을 사용하여 &quot;스털링&quot;또는 &lt;em&gt;자신의&lt;/em&gt; 토큰을 수정 하는 것은 취약점이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0a681b2e5d2e7e7655f4c07a14fa98678dcaaec7" translate="yes" xml:space="preserve">
          <source>Some shortcut methods provide a standard way to add messages with commonly used tags (which are usually represented as HTML classes for the message):</source>
          <target state="translated">일부 바로 가기 방법은 일반적으로 사용되는 태그 (일반적으로 메시지의 HTML 클래스로 표시됨)가있는 메시지를 추가하는 표준 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="469d634137a4321a22b10566961e6bc83fc140ad" translate="yes" xml:space="preserve">
          <source>Some signals get sent many times, but you&amp;rsquo;ll only be interested in receiving a certain subset of those signals. For example, consider the &lt;a href=&quot;../ref/signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;django.db.models.signals.pre_save&lt;/code&gt;&lt;/a&gt; signal sent before a model gets saved. Most of the time, you don&amp;rsquo;t need to know when &lt;em&gt;any&lt;/em&gt; model gets saved &amp;ndash; just when one &lt;em&gt;specific&lt;/em&gt; model is saved.</source>
          <target state="translated">일부 신호는 여러 번 전송되지만 해당 신호의 특정 하위 집합 만 수신하는 데 관심이 있습니다. 예를 들어, 모델을 저장하기 전에 전송 된 &lt;a href=&quot;../ref/signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;django.db.models.signals.pre_save&lt;/code&gt; &lt;/a&gt; 신호를 고려하십시오 . 대부분의 시간, 당신은 때 알 필요가 없습니다 &lt;em&gt;어떤&lt;/em&gt; 한 바로 그 때 - 모델이 저장됩니다 &lt;em&gt;특정의&lt;/em&gt; 모델이 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="7c9dc530f5e119144034e346e1c5031a908f66bf" translate="yes" xml:space="preserve">
          <source>Some subclasses of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, including &lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt;&lt;code&gt;ContentFile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../models/fields#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt;, may replace this attribute with an object other than a Python &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;. In these cases, this attribute may itself be a &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; subclass (and not necessarily the same subclass). Whenever possible, use the attributes and methods of the subclass itself rather than the those of the subclass&amp;rsquo;s &lt;code&gt;file&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt; &lt;code&gt;ContentFile&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../models/fields#django.db.models.fields.files.FieldFile&quot;&gt; &lt;code&gt;FieldFile&lt;/code&gt; 을&lt;/a&gt; 포함한 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; 의&lt;/a&gt; 일부 서브 클래스는 이 속성을 Python &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;파일 객체&lt;/a&gt; 이외의 객체로 대체 할 수 있습니다 . 이 경우이 속성 자체는 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 서브 클래스 일 수 있으며 반드시 동일한 서브 클래스 일 필요는 없습니다. 가능하면 서브 클래스의 &lt;code&gt;file&lt;/code&gt; 속성 보다는 서브 클래스 자체의 속성과 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="00a04e5275baf7095708209a494fbc4d87835cd2" translate="yes" xml:space="preserve">
          <source>Some tags require beginning and ending tags (i.e. &lt;code&gt;{% tag %} ... tag contents
... {% endtag %}&lt;/code&gt;).</source>
          <target state="translated">일부 태그에는 시작 및 종료 태그가 필요합니다 (예 : &lt;code&gt;{% tag %} ... tag contents ... {% endtag %}&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cdd96e5a38db9a96308e6d8caf3aa4dd6af8f598" translate="yes" xml:space="preserve">
          <source>Some tags require beginning and ending tags:</source>
          <target state="translated">일부 태그에는 시작 및 종료 태그가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="430149e5ab7c3968616c46d76026b790f7cfc545" translate="yes" xml:space="preserve">
          <source>Some technical notes:</source>
          <target state="translated">몇 가지 기술 정보 :</target>
        </trans-unit>
        <trans-unit id="0f21d6d9133d637f625350d6411381df7986c52b" translate="yes" xml:space="preserve">
          <source>Some test suites also create views or materialized views; to run these, the user also needs &lt;code&gt;CREATE VIEW WITH ADMIN OPTION&lt;/code&gt; and &lt;code&gt;CREATE MATERIALIZED VIEW WITH ADMIN OPTION&lt;/code&gt; privileges. In particular, this is needed for Django&amp;rsquo;s own test suite.</source>
          <target state="translated">일부 테스트 스위트는 또한보기 또는 구체화 된보기를 작성합니다. 이를 실행하려면 사용자에게 &lt;code&gt;CREATE VIEW WITH ADMIN OPTION&lt;/code&gt; 및 &lt;code&gt;CREATE MATERIALIZED VIEW WITH ADMIN OPTION&lt;/code&gt; 권한도 필요합니다. 특히 장고 자체 테스트 스위트에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="fe91dbd517e1619f524c6cc3d78de6f788ca2326" translate="yes" xml:space="preserve">
          <source>Some things to note:</source>
          <target state="translated">참고할 사항 :</target>
        </trans-unit>
        <trans-unit id="be9bc95dd99725fed830e73ca2e14abbf0af76b7" translate="yes" xml:space="preserve">
          <source>Some useful assertions like:</source>
          <target state="translated">다음과 같은 유용한 주장이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d363e5b683aba5c83e7ca29c9b1204532c6e0484" translate="yes" xml:space="preserve">
          <source>Some widgets add further information to the context. For instance, all widgets that subclass &lt;code&gt;Input&lt;/code&gt; defines &lt;code&gt;widget['type']&lt;/code&gt; and &lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt;&lt;code&gt;MultiWidget&lt;/code&gt;&lt;/a&gt; defines &lt;code&gt;widget['subwidgets']&lt;/code&gt; for looping purposes.</source>
          <target state="translated">일부 위젯은 컨텍스트에 추가 정보를 추가합니다. 예를 들어, &lt;code&gt;Input&lt;/code&gt; 을 서브 클래스하는 모든 위젯 은 &lt;code&gt;widget['type']&lt;/code&gt; 을 정의 하고 &lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt; &lt;code&gt;MultiWidget&lt;/code&gt; &lt;/a&gt; 은 반복 목적으로 &lt;code&gt;widget['subwidgets']&lt;/code&gt; 을 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="917b7e7494ef688e0cf340247848548709210a81" translate="yes" xml:space="preserve">
          <source>Some work in optimization involves tackling performance shortcomings, but some of the work can be built-in to what you&amp;rsquo;d do anyway, as part of the good practices you should adopt even before you start thinking about improving performance.</source>
          <target state="translated">일부 최적화 작업에는 성능 결점을 다루는 것이 포함되지만, 성능 향상에 대해 생각하기 전에 채택해야하는 모범 사례의 일부로, 일부 작업은 어쨌든 수행 할 작업에 내장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="593fefe39e764d82f69ff407a66000a957c3ce7e" translate="yes" xml:space="preserve">
          <source>Sometimes (in fact, quite often) you can create functions to rapidly compute the &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt; value or the last-modified time for a resource, &lt;strong&gt;without&lt;/strong&gt; needing to do all the computations needed to construct the full view. Django can then use these functions to provide an &amp;ldquo;early bailout&amp;rdquo; option for the view processing. Telling the client that the content has not been modified since the last request, perhaps.</source>
          <target state="translated">때로는 (실제로 자주) 전체보기를 구성하는 데 필요한 모든 계산을 수행하지 &lt;strong&gt;않고도 &lt;/strong&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt; 값 또는 자원에 대한 마지막 수정 시간 을 빠르게 계산하는 함수를 작성할 수 있습니다 . 그런 다음 Django는 이러한 기능을 사용하여 뷰 처리를위한&amp;ldquo;조기 구제&amp;rdquo;옵션을 제공 할 수 있습니다. 클라이언트에게 마지막 요청 이후에 내용이 수정되지 않았 음을 알립니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="673c13bcd5af7f99ea336abb1b149140c4d91a59" translate="yes" xml:space="preserve">
          <source>Sometimes a database won&amp;rsquo;t be accessed by the majority of your views, for example because it&amp;rsquo;s the database of an external system, or thanks to caching. In such cases, you should set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a low value or even &lt;code&gt;0&lt;/code&gt;, because it doesn&amp;rsquo;t make sense to maintain a connection that&amp;rsquo;s unlikely to be reused. This will help keep the number of simultaneous connections to this database small.</source>
          <target state="translated">때로는 외부 시스템의 데이터베이스이거나 캐싱 덕분에 대부분의 뷰에서 데이터베이스에 액세스하지 못하는 경우가 있습니다. 이러한 경우 재사용이 불가능한 연결을 유지하는 것은 의미가 없으므로 &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt; 를 낮은 값 또는 &lt;code&gt;0&lt;/code&gt; 으로 설정해야합니다 . 이것은이 데이터베이스에 대한 동시 연결 수를 작게 유지하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="da1aaa7fc81491501b0570c47f9e07109364ee57" translate="yes" xml:space="preserve">
          <source>Sometimes database expressions can&amp;rsquo;t easily express a complex &lt;code&gt;WHERE&lt;/code&gt; clause. In these edge cases, use the &lt;code&gt;RawSQL&lt;/code&gt; expression. For example:</source>
          <target state="translated">때때로 데이터베이스 표현식은 복잡한 &lt;code&gt;WHERE&lt;/code&gt; 절을 쉽게 표현할 수 없습니다 . 이러한 경우에는 &lt;code&gt;RawSQL&lt;/code&gt; 식을 사용하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8f8777603f8fd0ff4e4efc9d8fe66e90a1639a32" translate="yes" xml:space="preserve">
          <source>Sometimes different database vendors require different SQL for the same operation. For this example we will rewrite a custom implementation for MySQL for the NotEqual operator. Instead of &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; we will be using &lt;code&gt;!=&lt;/code&gt; operator. (Note that in reality almost all databases support both, including all the official databases supported by Django).</source>
          <target state="translated">때로는 다른 데이터베이스 공급 업체가 동일한 작업을 위해 다른 SQL을 요구합니다. 이 예제에서는 NotEqual 연산자를 위해 MySQL에 대한 사용자 정의 구현을 다시 작성합니다. 대신에 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 우리가 사용하는 것입니다 &lt;code&gt;!=&lt;/code&gt; 연산자를. (실제로 Django가 지원하는 모든 공식 데이터베이스를 포함하여 거의 모든 데이터베이스가 두 데이터베이스를 모두 지원합니다).</target>
        </trans-unit>
        <trans-unit id="0f3bc1e56efc0b2a0c8f199ec05380d6c2a61d7e" translate="yes" xml:space="preserve">
          <source>Sometimes even &lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;Manager.raw()&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t quite enough: you might need to perform queries that don&amp;rsquo;t map cleanly to models, or directly execute &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt; queries.</source>
          <target state="translated">때로는 &lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;Manager.raw()&lt;/code&gt; &lt;/a&gt; 조차 충분하지 않습니다. 모델에 깔끔하게 매핑되지 않은 쿼리를 수행하거나 &lt;code&gt;UPDATE&lt;/code&gt; , &lt;code&gt;INSERT&lt;/code&gt; 또는 &lt;code&gt;DELETE&lt;/code&gt; 쿼리를 직접 실행해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc36a41eeb518efe23ce133cd1acb02e33245cb1" translate="yes" xml:space="preserve">
          <source>Sometimes it may seem a chore to tear yourself away from your productive, creative programming work to face the unglamorous and unexciting business of writing tests, particularly when you know your code is working properly.</source>
          <target state="translated">때로는 코드가 제대로 작동한다는 것을 알고있을 때 생산적이고 독창적 인 프로그래밍 작업에서 멀어지고 흥미 진진한 글쓰기 테스트 비즈니스에 직면하기가 쉽지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cf403f88d3d392ed9216f02e8c43f5789050770" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s difficult to figure out where to get started with writing tests. If you have written several thousand lines of Python, choosing something to test might not be easy. In such a case, it&amp;rsquo;s fruitful to write your first test the next time you make a change, either when you add a new feature or fix a bug.</source>
          <target state="translated">쓰기 테스트를 시작할 위치를 파악하기 어려운 경우가 있습니다. 수천 줄의 Python을 작성했다면 테스트 할 무언가를 선택하는 것이 쉽지 않을 수 있습니다. 이 경우 다음에 새로운 기능을 추가하거나 버그를 수정할 때 변경을 할 때 첫 번째 테스트를 작성하는 것이 유익합니다.</target>
        </trans-unit>
        <trans-unit id="229736a5fc6ef7c561080e9933dc735533c69f6b" translate="yes" xml:space="preserve">
          <source>Sometimes particular views require different upload behavior. In these cases, you can override upload handlers on a per-request basis by modifying &lt;code&gt;request.upload_handlers&lt;/code&gt;. By default, this list will contain the upload handlers given by &lt;a href=&quot;../../ref/settings#std:setting-FILE_UPLOAD_HANDLERS&quot;&gt;&lt;code&gt;FILE_UPLOAD_HANDLERS&lt;/code&gt;&lt;/a&gt;, but you can modify the list as you would any other list.</source>
          <target state="translated">때로는 특정보기에 다른 업로드 동작이 필요합니다. 이 경우 &lt;code&gt;request.upload_handlers&lt;/code&gt; 를 수정하여 요청별로 업로드 핸들러를 대체 할 수 있습니다 . 기본적으로이 목록에는 &lt;a href=&quot;../../ref/settings#std:setting-FILE_UPLOAD_HANDLERS&quot;&gt; &lt;code&gt;FILE_UPLOAD_HANDLERS&lt;/code&gt; 가&lt;/a&gt; 제공 한 업로드 핸들러가 포함 되지만 다른 목록과 마찬가지로 목록을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7dd6b92ca1138a34dc6738b6b0dd2d8a474e6e9c" translate="yes" xml:space="preserve">
          <source>Sometimes tests will need to be updated. Suppose that we amend our views so that only &lt;code&gt;Questions&lt;/code&gt; with &lt;code&gt;Choices&lt;/code&gt; are published. In that case, many of our existing tests will fail - &lt;em&gt;telling us exactly which tests need to be amended to bring them up to date&lt;/em&gt;, so to that extent tests help look after themselves.</source>
          <target state="translated">때로는 테스트를 업데이트해야합니다. 만, 그래서 우리는 우리의 견해를 수정한다고 가정 &lt;code&gt;Questions&lt;/code&gt; 과 &lt;code&gt;Choices&lt;/code&gt; 게시됩니다. 이 경우 기존의 많은 테스트가 실패 &lt;em&gt;하여 테스트를 최신 상태로 유지하기 위해 어떤 테스트를 수정해야하는지 알려주&lt;/em&gt; 므로 테스트 자체가 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="fd12f80384af1fa7e96b2e203d80d64f7e5c7f08" translate="yes" xml:space="preserve">
          <source>Sometimes the basic features for custom template tag creation aren&amp;rsquo;t enough. Don&amp;rsquo;t worry, Django gives you complete access to the internals required to build a template tag from the ground up.</source>
          <target state="translated">때로는 맞춤 템플릿 태그 생성을위한 기본 기능으로는 충분하지 않습니다. Django는 처음부터 템플릿 태그를 작성하는 데 필요한 내부 요소에 대한 완벽한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ae6e7ec53c4bc63d7b2948ab07efa15d50fcaf1d" translate="yes" xml:space="preserve">
          <source>Sometimes when you use &lt;a href=&quot;#topics-serialization-natural-keys&quot;&gt;natural foreign keys&lt;/a&gt; you&amp;rsquo;ll need to deserialize data where an object has a foreign key referencing another object that hasn&amp;rsquo;t yet been deserialized. This is called a &amp;ldquo;forward reference&amp;rdquo;.</source>
          <target state="translated">때로는 &lt;a href=&quot;#topics-serialization-natural-keys&quot;&gt;자연 외래 키&lt;/a&gt; 를 사용 하는 경우 개체에 아직 역 직렬화되지 않은 다른 개체를 참조하는 외래 키가있는 데이터를 역 직렬화해야합니다. 이것을 &quot;전진 참조&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="d24133e3cc375ed07684dff074d4f0110dc671a7" translate="yes" xml:space="preserve">
          <source>Sometimes with &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt; you may want to delete only a child model&amp;rsquo;s data. Specifying &lt;code&gt;keep_parents=True&lt;/code&gt; will keep the parent model&amp;rsquo;s data.</source>
          <target state="translated">때때로 &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;다중 테이블 상속을 사용&lt;/a&gt; 하면 하위 모델의 데이터 만 삭제하려고 할 수 있습니다. &lt;code&gt;keep_parents=True&lt;/code&gt; 를 지정 하면 상위 모델의 데이터가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="4806a1a7b873a8447eee39bc86f71e23772ad650" translate="yes" xml:space="preserve">
          <source>Sometimes words have several meanings, such as &lt;code&gt;&quot;May&quot;&lt;/code&gt; in English, which refers to a month name and to a verb. To enable translators to translate these words correctly in different contexts, you can use the &lt;a href=&quot;../../ref/utils#django.utils.translation.pgettext&quot;&gt;&lt;code&gt;django.utils.translation.pgettext()&lt;/code&gt;&lt;/a&gt; function, or the &lt;a href=&quot;../../ref/utils#django.utils.translation.npgettext&quot;&gt;&lt;code&gt;django.utils.translation.npgettext()&lt;/code&gt;&lt;/a&gt; function if the string needs pluralization. Both take a context string as the first variable.</source>
          <target state="translated">때때로 단어는 영어 로 &lt;code&gt;&quot;May&quot;&lt;/code&gt; 과 같이 여러 달의 의미와 동사를 나타내는 몇 가지 의미를 갖습니다 . 번역가가 다른 문맥에서 이러한 단어를 올바르게 번역 할 수 있도록하려면 &lt;a href=&quot;../../ref/utils#django.utils.translation.pgettext&quot;&gt; &lt;code&gt;django.utils.translation.pgettext()&lt;/code&gt; &lt;/a&gt; 함수 또는 문자열에 복수형이 필요한 경우 &lt;a href=&quot;../../ref/utils#django.utils.translation.npgettext&quot;&gt; &lt;code&gt;django.utils.translation.npgettext()&lt;/code&gt; &lt;/a&gt; 함수를 사용할 수 있습니다 . 둘 다 컨텍스트 문자열을 첫 번째 변수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2a867b8b6ca6927331226f683223505e5b2ac7c7" translate="yes" xml:space="preserve">
          <source>Sometimes you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment. For example, you might want a separate cached copy of the sidebar used in the previous example for every user of your site. Do this by passing one or more additional arguments, which may be variables with or without filters, to the &lt;code&gt;{% cache %}&lt;/code&gt; template tag to uniquely identify the cache fragment:</source>
          <target state="translated">때로는 조각 안에 나타나는 일부 동적 데이터에 따라 조각의 여러 복사본을 캐시하려고 할 수 있습니다. 예를 들어, 이전 예제에서 사이트의 모든 사용자에 대해 별도의 캐시 된 사이드 바 사본을 사용할 수 있습니다. 필터 유무에 관계없이 하나 이상의 추가 인수를 &lt;code&gt;{% cache %}&lt;/code&gt; 템플릿 태그에 전달하여 캐시 조각을 고유하게 식별하여이를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="8046e8375a5dfd646993146d2dd96622032c132a" translate="yes" xml:space="preserve">
          <source>Sometimes you need to disable certain actions &amp;ndash; especially those &lt;a href=&quot;#adminsite-actions&quot;&gt;registered site-wide&lt;/a&gt; &amp;ndash; for particular objects. There&amp;rsquo;s a few ways you can disable actions:</source>
          <target state="translated">특정 개체에 대해 특정 작업, 특히 &lt;a href=&quot;#adminsite-actions&quot;&gt;사이트 전체에 등록 된&lt;/a&gt; 작업을 비활성화해야하는 경우가 있습니다 . 작업을 비활성화 할 수있는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a377fda803bd1771bdf0ac49923ce88acdc92be" translate="yes" xml:space="preserve">
          <source>Sometimes you need to perform an action related to the current database transaction, but only if the transaction successfully commits. Examples might include a &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt; task, an email notification, or a cache invalidation.</source>
          <target state="translated">때로는 트랜잭션이 성공적으로 커밋 된 경우에만 현재 데이터베이스 트랜잭션과 관련된 작업을 수행해야합니다. 예로는 포함 할 수 &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;셀러리&lt;/a&gt; 작업, 이메일 알림, 또는 캐시 무효화를.</target>
        </trans-unit>
        <trans-unit id="a8e34eb88412dd3f08c356a80a94469a3f2d93d8" translate="yes" xml:space="preserve">
          <source>Sometimes you need to perform an action related to the current database transaction, but only if the transaction successfully commits. Examples might include a &lt;a href=&quot;https://pypi.org/project/celery/&quot;&gt;Celery&lt;/a&gt; task, an email notification, or a cache invalidation.</source>
          <target state="translated">Sometimes you need to perform an action related to the current database transaction, but only if the transaction successfully commits. Examples might include a &lt;a href=&quot;https://pypi.org/project/celery/&quot;&gt;Celery&lt;/a&gt; task, an email notification, or a cache invalidation.</target>
        </trans-unit>
        <trans-unit id="acd13259a23274369029b7cb69af3d5b3f160796" translate="yes" xml:space="preserve">
          <source>Sometimes you want to set a field to a particular value for all the objects in a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. You can do this with the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; method. For example:</source>
          <target state="translated">때로는 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 의&lt;/a&gt; 모든 객체에 대해 특정 값으로 필드를 설정하려고합니다 . &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt; 메소드로 이를 수행 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65d75093d31032f3432361c13b408b08a86773dd" translate="yes" xml:space="preserve">
          <source>Sometimes you&amp;rsquo;ll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. One way of achieving this is doing the arithmetic in Python like:</source>
          <target state="translated">Sometimes you&amp;rsquo;ll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. One way of achieving this is doing the arithmetic in Python like:</target>
        </trans-unit>
        <trans-unit id="97058f74ecdfb489bcf45ff09ce6be5952379609" translate="yes" xml:space="preserve">
          <source>Sometimes you&amp;rsquo;ll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. The obvious way to achieve this is to do something like:</source>
          <target state="translated">때로는 현재 값 증가 또는 감소와 같은 필드에서 간단한 산술 작업을 수행해야 할 수도 있습니다. 이를 달성하는 확실한 방법은 다음과 같은 작업을 수행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="2bea8249cb764a1960aae8e009b2ea180fd9cce7" translate="yes" xml:space="preserve">
          <source>Sometimes you&amp;rsquo;ll need to work with &lt;code&gt;jQuery&lt;/code&gt; plugins that are not registered in the &lt;code&gt;django.jQuery&lt;/code&gt; namespace. To do that, change how the code listens for events. Instead of wrapping the listener in the &lt;code&gt;django.jQuery&lt;/code&gt; namespace, listen to the event triggered from there. For example:</source>
          <target state="translated">때로는 &lt;code&gt;django.jQuery&lt;/code&gt; 네임 스페이스에 등록되지 않은 &lt;code&gt;jQuery&lt;/code&gt; 플러그인을 사용해야 합니다. 이를 위해 코드가 이벤트를 청취하는 방법을 변경하십시오. &lt;code&gt;django.jQuery&lt;/code&gt; 네임 스페이스 에서 리스너를 랩핑하는 대신 트리거 된 이벤트를 청취하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="36239ea3abc95625c5eaec86d5a3809bd9cd1018" translate="yes" xml:space="preserve">
          <source>Sometimes your form class takes custom parameters, like &lt;code&gt;MyArticleForm&lt;/code&gt;. You can pass this parameter when instantiating the formset:</source>
          <target state="translated">때로는 양식 클래스가 &lt;code&gt;MyArticleForm&lt;/code&gt; 과 같은 사용자 정의 매개 변수를 사용 합니다 . 폼셋을 인스턴스화 할 때이 매개 변수를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e7bfc08f48d8ee6c80bbec98ccd11323f967d18" translate="yes" xml:space="preserve">
          <source>Sometimes, caching an entire rendered page doesn&amp;rsquo;t gain you very much and is, in fact, inconvenient overkill.</source>
          <target state="translated">때때로, 렌더링 된 페이지 전체를 캐싱해도 큰 도움이되지 않으며 실제로 불편한 오버 킬이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a19ff2ac49541f752a132fe0594daacb39ba675c" translate="yes" xml:space="preserve">
          <source>Sometimes, the Django query syntax by itself can&amp;rsquo;t easily express a complex &lt;code&gt;WHERE&lt;/code&gt; clause. For these edge cases, Django provides the &lt;code&gt;extra()&lt;/code&gt;&lt;code&gt;QuerySet&lt;/code&gt; modifier &amp;mdash; a hook for injecting specific clauses into the SQL generated by a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">때로는 장고 쿼리 구문 자체가 복잡한 &lt;code&gt;WHERE&lt;/code&gt; 절을 쉽게 표현할 수없는 경우가 있습니다 . 이러한 에지 경우에, 장고가 제공 &lt;code&gt;extra()&lt;/code&gt; &lt;code&gt;QuerySet&lt;/code&gt; a로 발생하는 특정 SQL로 절을 주입하기위한 후크 - 개질제 &lt;code&gt;QuerySet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06d03cff398dcbb052de3496e18b3de306ed05da" translate="yes" xml:space="preserve">
          <source>Sometimes, you should use &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; as the default translation method for a particular file. Without &lt;code&gt;_()&lt;/code&gt; in the global namespace, the developer has to think about which is the most appropriate translation function.</source>
          <target state="translated">때로는 특정 파일의 기본 변환 방법으로 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 를 사용해야 합니다. 전역 네임 스페이스에 &lt;code&gt;_()&lt;/code&gt; 가 없으면 개발자는 어떤 것이 가장 적합한 번역 함수인지 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2c4b6e86117f9d35aa0277b6ff8d228083a3634" translate="yes" xml:space="preserve">
          <source>Sometimes, your inclusion tags might require a large number of arguments, making it a pain for template authors to pass in all the arguments and remember their order. To solve this, Django provides a &lt;code&gt;takes_context&lt;/code&gt; option for inclusion tags. If you specify &lt;code&gt;takes_context&lt;/code&gt; in creating a template tag, the tag will have no required arguments, and the underlying Python function will have one argument &amp;ndash; the template context as of when the tag was called.</source>
          <target state="translated">때로는 포함 태그에 많은 수의 인수가 필요할 수 있으므로 템플릿 작성자가 모든 인수를 전달하고 순서를 기억하기가 어렵습니다. 이를 해결하기 위해 Django는 포함 태그에 대해 &lt;code&gt;takes_context&lt;/code&gt; 옵션을 제공 합니다. 템플릿 태그를 만들 때 &lt;code&gt;takes_context&lt;/code&gt; 를 지정 하면 태그에 필요한 인수가없고 기본 Python 함수에는 하나의 인수 (태그가 호출 된 시점의 템플릿 컨텍스트)가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d338a5b259fae6b52e8c644b2b8e266907c1369d" translate="yes" xml:space="preserve">
          <source>Sorts test cases in the opposite execution order. This may help in debugging the side effects of tests that aren&amp;rsquo;t properly isolated. &lt;a href=&quot;../topics/testing/overview#order-of-tests&quot;&gt;Grouping by test class&lt;/a&gt; is preserved when using this option.</source>
          <target state="translated">테스트 케이스를 반대의 실행 순서로 정렬합니다. 이는 제대로 격리되지 않은 테스트의 부작용을 디버깅하는 데 도움이 될 수 있습니다. 이 옵션을 사용하면 &lt;a href=&quot;../topics/testing/overview#order-of-tests&quot;&gt;테스트 클래스 별 그룹화&lt;/a&gt; 가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="999f57baf74de2235e3d5c10a7ccf14d3748dfff" translate="yes" xml:space="preserve">
          <source>Spanning multi-valued relationships</source>
          <target state="translated">다중 값 관계 스패닝</target>
        </trans-unit>
        <trans-unit id="6b0c0dcc3e191d8a93422ad4b030723534089c62" translate="yes" xml:space="preserve">
          <source>SpatiaLite</source>
          <target state="translated">SpatiaLite</target>
        </trans-unit>
        <trans-unit id="a0bf42a4203bdb2eb6cb9e8dfca7a195f6f4e262" translate="yes" xml:space="preserve">
          <source>SpatiaLite SQL equivalent:</source>
          <target state="translated">SpatiaLite SQL과 동등한 기능 :</target>
        </trans-unit>
        <trans-unit id="c731895f2558175b7f77799d0a7195615ebc03d8" translate="yes" xml:space="preserve">
          <source>SpatiaLite library (&lt;code&gt;libspatialite&lt;/code&gt;)</source>
          <target state="translated">SpatiaLite 라이브러리 ( &lt;code&gt;libspatialite&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="3f4c5bceea9ab6d6f201bfeb88af85e4166e6f5b" translate="yes" xml:space="preserve">
          <source>SpatiaLite support was added.</source>
          <target state="translated">SpatiaLite 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="7d6e5b63edebeb8c17c1a18226130e0a59fabe9d" translate="yes" xml:space="preserve">
          <source>SpatiaLite users should consult the &lt;a href=&quot;spatialite#spatialite-macos&quot;&gt;macOS-specific instructions&lt;/a&gt; section after installing the packages for additional instructions.</source>
          <target state="translated">SpatiaLite 사용자는 추가 지침에 대해서는 패키지를 설치 한 후 &lt;a href=&quot;spatialite#spatialite-macos&quot;&gt;macOS 관련 지침&lt;/a&gt; 섹션을 참조해야합니다 .</target>
        </trans-unit>
        <trans-unit id="26f8e81ae936d109e58e11c2773983818de0bd3a" translate="yes" xml:space="preserve">
          <source>Spatial Backends</source>
          <target state="translated">공간 백엔드</target>
        </trans-unit>
        <trans-unit id="8134c4967477dfc6180c1d4a9fe5b671e01954ed" translate="yes" xml:space="preserve">
          <source>Spatial Field Options</source>
          <target state="translated">공간 필드 옵션</target>
        </trans-unit>
        <trans-unit id="1b86133559f30918fd72d1881e5b112fe0e1990a" translate="yes" xml:space="preserve">
          <source>Spatial Field Types</source>
          <target state="translated">공간 필드 유형</target>
        </trans-unit>
        <trans-unit id="01310c097041114df38abc77c165f1a1fd56f8d8" translate="yes" xml:space="preserve">
          <source>Spatial Lookups</source>
          <target state="translated">공간 검색</target>
        </trans-unit>
        <trans-unit id="f7f544fcb4fbf18009d10a543a8406f74be97b76" translate="yes" xml:space="preserve">
          <source>Spatial Predicate Methods</source>
          <target state="translated">공간 술어 방법</target>
        </trans-unit>
        <trans-unit id="d3d66fc49d73c443d063d0f9390e82234d813dbf" translate="yes" xml:space="preserve">
          <source>Spatial Queries</source>
          <target state="translated">공간 쿼리</target>
        </trans-unit>
        <trans-unit id="3886585aa8470409bca6927fe20745d221fea9d7" translate="yes" xml:space="preserve">
          <source>Spatial database</source>
          <target state="translated">공간 데이터베이스</target>
        </trans-unit>
        <trans-unit id="580964ad4fc4de556472d96347fbb4442183520d" translate="yes" xml:space="preserve">
          <source>Spatial extensions for PostgreSQL</source>
          <target state="translated">PostgreSQL의 공간 확장</target>
        </trans-unit>
        <trans-unit id="3dd2390a488102412e0af2137a1174126b490943" translate="yes" xml:space="preserve">
          <source>Spatial extensions for SQLite</source>
          <target state="translated">SQLite를위한 공간 확장</target>
        </trans-unit>
        <trans-unit id="57dfa97e2f6cb0877e6ce2eea9d011572f6d7282" translate="yes" xml:space="preserve">
          <source>Spatial fields consist of a series of geometry field types and one raster field type. Each of the geometry field types correspond to the OpenGIS Simple Features specification &lt;a href=&quot;#fnogc&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;. There is no such standard for raster data.</source>
          <target state="translated">공간 필드는 일련의 지오메트리 필드 유형과 하나의 래스터 필드 유형으로 구성됩니다. 각 지오메트리 필드 유형은 OpenGIS Simple Features 사양 &lt;a href=&quot;#fnogc&quot; id=&quot;id3&quot;&gt;[1]에 해당&lt;/a&gt; 합니다. 래스터 데이터에 대한 표준은 없습니다.</target>
        </trans-unit>
        <trans-unit id="1e374a2ef4fb224b69d678dcfddc73d007a3bcc8" translate="yes" xml:space="preserve">
          <source>Spatial lookups with rasters are only supported for PostGIS backends (denominated as PGRaster in this section).</source>
          <target state="translated">래스터가있는 공간 조회는 PostGIS 백엔드 (이 섹션에서는 PGRaster로 표시)에 대해서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="e43a324fcf99e23a7aca4ca95358433f9a177ede" translate="yes" xml:space="preserve">
          <source>Spatial reference objects are initialized on the given &lt;code&gt;srs_input&lt;/code&gt;, which may be one of the following:</source>
          <target state="translated">공간 참조 객체는 지정된 &lt;code&gt;srs_input&lt;/code&gt; 에서 초기화되며 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f10869e91382c502cbeb84ebb87e8d3b9b624cb4" translate="yes" xml:space="preserve">
          <source>Spawns a &lt;code&gt;pdb&lt;/code&gt; debugger at each test error or failure. If you have it installed, &lt;code&gt;ipdb&lt;/code&gt; is used instead.</source>
          <target state="translated">스폰 &lt;code&gt;pdb&lt;/code&gt; 각 시험 오류 또는 실패에 디버거. 설치 한 경우 &lt;code&gt;ipdb&lt;/code&gt; 가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="28c5f7e173a2fc47b01340a8a38b381221fe6bb5" translate="yes" xml:space="preserve">
          <source>Spec: &lt;a href=&quot;http://backend.userland.com/rss091&quot;&gt;http://backend.userland.com/rss091&lt;/a&gt;</source>
          <target state="translated">사양 : &lt;a href=&quot;http://backend.userland.com/rss091&quot;&gt;http://backend.userland.com/rss091&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4aec49fb9c99ddb1e17bc247a08802d46724c365" translate="yes" xml:space="preserve">
          <source>Spec: &lt;a href=&quot;https://cyber.harvard.edu/rss/rss.html&quot;&gt;https://cyber.harvard.edu/rss/rss.html&lt;/a&gt;</source>
          <target state="translated">사양 : &lt;a href=&quot;https://cyber.harvard.edu/rss/rss.html&quot;&gt;https://cyber.harvard.edu/rss/rss.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c7b93691db88baa92ebec95ff7d87fd353a26193" translate="yes" xml:space="preserve">
          <source>Spec: &lt;a href=&quot;https://tools.ietf.org/html/rfc4287&quot;&gt;https://tools.ietf.org/html/rfc4287&lt;/a&gt;</source>
          <target state="translated">사양 : &lt;a href=&quot;https://tools.ietf.org/html/rfc4287&quot;&gt;https://tools.ietf.org/html/rfc4287&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="95abab8476cfa74f5d882c8a81c219980465b63a" translate="yes" xml:space="preserve">
          <source>Spec: &lt;a href=&quot;https://tools.ietf.org/html/rfc4287.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 4287&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Spec: &lt;a href=&quot;https://tools.ietf.org/html/rfc4287.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 4287&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74c45887169f3ae3db5a92c036ed072db90f4474" translate="yes" xml:space="preserve">
          <source>Special Operations</source>
          <target state="translated">특수 작전</target>
        </trans-unit>
        <trans-unit id="4ae998898b87b3e37c14d2da66ae2816638dd53d" translate="yes" xml:space="preserve">
          <source>Special cases are &lt;a href=&quot;#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.forms.CheckboxSelectMultiple&quot;&gt;&lt;code&gt;CheckboxSelectMultiple&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.forms.SelectMultiple&quot;&gt;&lt;code&gt;SelectMultiple&lt;/code&gt;&lt;/a&gt;, which always return &lt;code&gt;False&lt;/code&gt; because an unchecked checkbox and unselected &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; don&amp;rsquo;t appear in the data of an HTML form submission, so it&amp;rsquo;s unknown whether or not the user submitted a value.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.forms.CheckboxSelectMultiple&quot;&gt; &lt;code&gt;CheckboxSelectMultiple&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.forms.SelectMultiple&quot;&gt; &lt;code&gt;SelectMultiple&lt;/code&gt; &lt;/a&gt; 과 같은 특수한 경우는 선택하지 않은 확인란과 선택하지 않은 &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; 이 HTML 양식 제출 데이터에 나타나지 않기 때문에 항상 &lt;code&gt;False&lt;/code&gt; 를 반환 하므로 사용자가 값을 제출했는지 여부를 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="84500c51f943f4daf36fc10d49e539cedf015c2f" translate="yes" xml:space="preserve">
          <source>Special database configuration isn&amp;rsquo;t necessary to use any of these functions, however, if you&amp;rsquo;re searching more than a few hundred records, you&amp;rsquo;re likely to run into performance problems. Full text search is a more intensive process than comparing the size of an integer, for example.</source>
          <target state="translated">이러한 기능을 사용하기 위해 특수 데이터베이스 구성이 필요하지는 않지만 수백 개가 넘는 레코드를 검색하는 경우 성능 문제가 발생할 수 있습니다. 예를 들어, 전체 텍스트 검색은 정수 크기를 비교하는 것보다 더 집중적 인 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="b83ef37d9bf2abff03f45932aed3d496f9e2a22c" translate="yes" xml:space="preserve">
          <source>Special thanks to Bj&amp;oslash;rn Sandvik of &lt;a href=&quot;https://thematicmapping.org/&quot;&gt;thematicmapping.org&lt;/a&gt; for providing and maintaining this dataset.</source>
          <target state="translated">이 데이터 세트를 제공하고 유지해 &lt;a href=&quot;https://thematicmapping.org/&quot;&gt;준 thematicmapping.org의&lt;/a&gt; Bj&amp;oslash;rn Sandvik에게 특별한 감사를드립니다 .</target>
        </trans-unit>
        <trans-unit id="bbd1e4adbd79840eaf0af8a2ff9d3c44255e3cb8" translate="yes" xml:space="preserve">
          <source>Specialized test case to support &amp;lsquo;live testing&amp;rsquo;</source>
          <target state="translated">'실시간 테스트'를 지원하는 전문화 된 테스트 사례</target>
        </trans-unit>
        <trans-unit id="2c64fba74a9d3b9ab170c799c06e2e7e0cb9eb72" translate="yes" xml:space="preserve">
          <source>Specialties of Django translation</source>
          <target state="translated">장고 번역의 특산품</target>
        </trans-unit>
        <trans-unit id="035d4728ce083e0adad0e402f1a673ae38015d6b" translate="yes" xml:space="preserve">
          <source>Specifically, GeoDjango provides support for the &lt;a href=&quot;https://gdal.org/user/vector_data_model.html&quot;&gt;OGR&lt;/a&gt; library, a component of GDAL.</source>
          <target state="translated">특히 GeoDjango는 GDAL의 구성 요소 인 &lt;a href=&quot;https://gdal.org/user/vector_data_model.html&quot;&gt;OGR&lt;/a&gt; 라이브러리를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="4ae4543b983317276738e348924cf9cb4005ea73" translate="yes" xml:space="preserve">
          <source>Specifically, a &lt;code&gt;Response&lt;/code&gt; object has the following attributes:</source>
          <target state="translated">특히, &lt;code&gt;Response&lt;/code&gt; 오브젝트에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ccf5d25dfedda0749e3abb6685b56a5fed8013a" translate="yes" xml:space="preserve">
          <source>Specification</source>
          <target state="translated">Specification</target>
        </trans-unit>
        <trans-unit id="9c73e4568c9f81581ed13506319670ca87c6a1b9" translate="yes" xml:space="preserve">
          <source>Specifies a different port, or IP address and port, from the default of &lt;code&gt;127.0.0.1:8000&lt;/code&gt;. This value follows exactly the same format and serves exactly the same function as the argument to the &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">기본값 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 과 다른 포트 또는 IP 주소 및 포트를 지정합니다 . 이 값은 정확히 동일한 형식을 따르며 &lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 명령 의 인수와 정확히 동일한 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6cf725613a31639e889942ed7be19a30b4952db4" translate="yes" xml:space="preserve">
          <source>Specifies a directory, file path, or URL of a custom project template. See the &lt;a href=&quot;#cmdoption-startapp-template&quot;&gt;&lt;code&gt;startapp --template&lt;/code&gt;&lt;/a&gt; documentation for examples and usage.</source>
          <target state="translated">사용자 정의 프로젝트 템플릿의 디렉토리, 파일 경로 또는 URL을 지정합니다. 예제와 사용법 은 &lt;a href=&quot;#cmdoption-startapp-template&quot;&gt; &lt;code&gt;startapp --template&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e7e957372db350176d463124ad26d80d04f33e6" translate="yes" xml:space="preserve">
          <source>Specifies a file to write the serialized data to. By default, the data goes to standard output.</source>
          <target state="translated">직렬화 된 데이터를 쓸 파일을 지정합니다. 기본적으로 데이터는 표준 출력으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="72d9783494550604f721f0332d9b4cdbfcaaae99" translate="yes" xml:space="preserve">
          <source>Specifies a list of file extensions to examine (default: &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;txt&lt;/code&gt;, &lt;code&gt;py&lt;/code&gt; or &lt;code&gt;js&lt;/code&gt; if &lt;a href=&quot;#cmdoption-makemessages-domain&quot;&gt;&lt;code&gt;--domain&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;js&lt;/code&gt;).</source>
          <target state="translated">(기본적 지정 파일 확장자의 목록을 조사하는 &lt;code&gt;html&lt;/code&gt; , &lt;code&gt;txt&lt;/code&gt; , &lt;code&gt;py&lt;/code&gt; 또는 &lt;code&gt;js&lt;/code&gt; 경우 &lt;a href=&quot;#cmdoption-makemessages-domain&quot;&gt; &lt;code&gt;--domain&lt;/code&gt; 가&lt;/a&gt; 있다 &lt;code&gt;js&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="02028d9b62993c3e8d3ea3e6bc8d7d65dff7d839" translate="yes" xml:space="preserve">
          <source>Specifies a single app to look for fixtures in rather than looking in all apps.</source>
          <target state="translated">모든 앱을 보지 않고 조명기를 찾을 단일 앱을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="be23bd60a710b4ed4b20363f65e8d8e45651e1cd" translate="yes" xml:space="preserve">
          <source>Specifies a timeout in seconds for blocking operations like the connection attempt.</source>
          <target state="translated">연결 시도와 같은 작업을 차단하기위한 시간 초과를 초 단위로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="1bbdf19eb95698275c554e18da430738f54d0735" translate="yes" xml:space="preserve">
          <source>Specifies the &lt;a href=&quot;../topics/serialization#serialization-formats&quot;&gt;serialization format&lt;/a&gt; (e.g., &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;xml&lt;/code&gt;) for fixtures &lt;a href=&quot;#loading-fixtures-stdin&quot;&gt;read from stdin&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#loading-fixtures-stdin&quot;&gt;stdin에서 읽은&lt;/a&gt; 조명기 의 &lt;a href=&quot;../topics/serialization#serialization-formats&quot;&gt;직렬화 형식&lt;/a&gt; (예 : &lt;code&gt;json&lt;/code&gt; 또는 &lt;code&gt;xml&lt;/code&gt; )을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="ea229d9172fbde0eaba2a431e32e46e506b01a26" translate="yes" xml:space="preserve">
          <source>Specifies the &lt;a href=&quot;renderers&quot;&gt;renderer&lt;/a&gt; to use for the form. Defaults to &lt;code&gt;None&lt;/code&gt; which means to use the default renderer specified by the &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt;&lt;code&gt;FORM_RENDERER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">폼에 사용할 &lt;a href=&quot;renderers&quot;&gt;렌더러&lt;/a&gt; 를 지정합니다 . 기본값은 &lt;code&gt;None&lt;/code&gt; 으로, &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt; &lt;code&gt;FORM_RENDERER&lt;/code&gt; &lt;/a&gt; 설정으로 지정된 기본 렌더러를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="47bd66d8c3b6e638bc5303da0bd1763c4a8c18c5" translate="yes" xml:space="preserve">
          <source>Specifies the GML version to use: 2 (default) or 3.</source>
          <target state="translated">사용할 GML 버전을 2 (기본값) 또는 3으로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="cf4934cc864dc927dc44d3d097b4ef9dbc58ffc6" translate="yes" xml:space="preserve">
          <source>Specifies the amount of notification and debug information that a command should print to the console.</source>
          <target state="translated">명령이 콘솔에 인쇄해야하는 알림 및 디버그 정보의 양을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="5dec095c5c7b648fcb931ffcb935dd4764f736b1" translate="yes" xml:space="preserve">
          <source>Specifies the character set encoding of the strings in the OGR data source. For example, &lt;code&gt;'latin-1'&lt;/code&gt;, &lt;code&gt;'utf-8'&lt;/code&gt;, and &lt;code&gt;'cp437'&lt;/code&gt; are all valid encoding parameters.</source>
          <target state="translated">OGR 데이터 소스에서 문자열의 문자 세트 인코딩을 지정합니다. 예를 들어, &lt;code&gt;'latin-1'&lt;/code&gt; , &lt;code&gt;'utf-8'&lt;/code&gt; 및 &lt;code&gt;'cp437'&lt;/code&gt; 은 모두 유효한 인코딩 매개 변수입니다.</target>
        </trans-unit>
        <trans-unit id="8f6092ac1611ff5ba9664b1521fda789c3fc1797" translate="yes" xml:space="preserve">
          <source>Specifies the database for which to generate the SQL. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">SQL을 생성 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="040af291fbdf9f9d644a2f78f9c2be3d16b1a378" translate="yes" xml:space="preserve">
          <source>Specifies the database for which to print the SQL. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">SQL을 인쇄 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="102273d708a8470ec808016316626c4390b04a82" translate="yes" xml:space="preserve">
          <source>Specifies the database from which data will be dumped. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">데이터를 덤프 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eb9c4570decee757ee29074ffa870486a1669f12" translate="yes" xml:space="preserve">
          <source>Specifies the database in which the cache table(s) will be created. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">캐시 테이블이 작성 될 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d789cfeb1b1342b6b8d3b77d1a2f70d27caf4f63" translate="yes" xml:space="preserve">
          <source>Specifies the database into which the data will be loaded. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">데이터가로드 될 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cd063dbe43e887f05153b8d79add2a3e72154d60" translate="yes" xml:space="preserve">
          <source>Specifies the database into which the superuser object will be saved.</source>
          <target state="translated">수퍼 유저 개체가 저장 될 데이터베이스를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="d7d4b5a4010a7a70875a0bd65fa72586906a4a62" translate="yes" xml:space="preserve">
          <source>Specifies the database onto which to open a shell. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">쉘을 열 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bfc6d270292d4cac84a4a7d5376699a3abb4547f" translate="yes" xml:space="preserve">
          <source>Specifies the database to examine. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">검사 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6d3e33d8e3776f33a65a93cf1b7c4a031706a54b" translate="yes" xml:space="preserve">
          <source>Specifies the database to flush. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">플러시 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7c1f733cf845fc9e76db6090ec33a3c19c73345f" translate="yes" xml:space="preserve">
          <source>Specifies the database to introspect. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">검사 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="be57b9404ad364746974e651c6beb6159362f509" translate="yes" xml:space="preserve">
          <source>Specifies the database to migrate. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">마이그레이션 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2b174068613fe7c88c96e814746911e831a64217" translate="yes" xml:space="preserve">
          <source>Specifies the database to query for the user. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">사용자를 쿼리 할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="27100309cfc7be5e75d84fdd87aaf92d36a4096c" translate="yes" xml:space="preserve">
          <source>Specifies the database to run checks requiring database access:</source>
          <target state="translated">Specifies the database to run checks requiring database access:</target>
        </trans-unit>
        <trans-unit id="40f335506359d8651e422577573b15084d03688d" translate="yes" xml:space="preserve">
          <source>Specifies the database to use. Defaults to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">사용할 데이터베이스를 지정합니다. 기본값은 &lt;code&gt;default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="136575feb2ce3743594fd8b00d285618491adccc" translate="yes" xml:space="preserve">
          <source>Specifies the domain of the messages files. Supported options are:</source>
          <target state="translated">메시지 파일의 도메인을 지정합니다. 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="78b6b96b4c24a2617eeaf4f590be5bae9700abc0" translate="yes" xml:space="preserve">
          <source>Specifies the locale(s) to exclude from processing. If not provided, no locales are excluded.</source>
          <target state="translated">처리에서 제외 할 로케일을 지정합니다. 제공되지 않으면 로케일이 제외되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e1f48bdfae462918c17be822a81783874f02096f" translate="yes" xml:space="preserve">
          <source>Specifies the locale(s) to process.</source>
          <target state="translated">처리 할 로캘을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="8df49b8fb9f05c8ab1e87ff57b35d2d16eb6ead1" translate="yes" xml:space="preserve">
          <source>Specifies the locale(s) to process. If not provided, all locales are processed.</source>
          <target state="translated">처리 할 로캘을 지정합니다. 제공하지 않으면 모든 로캘이 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="3ec01d9de708430f11be16a5b2143d525ee7e1dc" translate="yes" xml:space="preserve">
          <source>Specifies the message level that will cause the command to exit with a non-zero status. Default is &lt;code&gt;ERROR&lt;/code&gt;.</source>
          <target state="translated">명령이 0이 아닌 상태로 종료되도록하는 메시지 레벨을 지정합니다. 기본값은 &lt;code&gt;ERROR&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c742627bb8cdcd3e2d64eee9a53f3c8880efd7c8" translate="yes" xml:space="preserve">
          <source>Specifies the model attribute name to use for the geometry field. Defaults to &lt;code&gt;'geom'&lt;/code&gt;.</source>
          <target state="translated">형상 필드에 사용할 모델 속성 이름을 지정합니다. 기본값은 &lt;code&gt;'geom'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="69e16e8a45666393a05c228d25d9e8b3e8348cd0" translate="yes" xml:space="preserve">
          <source>Specifies the number of indentation spaces to use in the output. Defaults to &lt;code&gt;None&lt;/code&gt; which displays all data on single line.</source>
          <target state="translated">출력에 사용할 들여 쓰기 공간 수를 지정합니다. 모든 데이터를 한 줄에 표시하는 기본값은 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cbcaa5032127345f09bbe34dead9122fd88159e6" translate="yes" xml:space="preserve">
          <source>Specifies the number of significant digits for the coordinates in the GML representation &amp;ndash; the default value is 8. Ignored on Oracle.</source>
          <target state="translated">GML 표현에서 좌표의 유효 자릿수를 지정합니다. 기본값은 8입니다. Oracle에서는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="513026a367fd36f728406b29911ccc38d5dded81" translate="yes" xml:space="preserve">
          <source>Specifies the output format. Available values are &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;unified&lt;/code&gt;. &lt;code&gt;hash&lt;/code&gt; is the default mode that displays the output that&amp;rsquo;s described above. &lt;code&gt;unified&lt;/code&gt; displays the output similar to &lt;code&gt;diff -u&lt;/code&gt;. Default settings are prefixed with a minus sign, followed by the changed setting prefixed with a plus sign.</source>
          <target state="translated">출력 형식을 지정합니다. 사용 가능한 값은 &lt;code&gt;hash&lt;/code&gt; 및 &lt;code&gt;unified&lt;/code&gt; 입니다. &lt;code&gt;hash&lt;/code&gt; 는 위에서 설명한 출력을 표시하는 기본 모드입니다. &lt;code&gt;unified&lt;/code&gt; 는 &lt;code&gt;diff -u&lt;/code&gt; 와 유사한 출력을 표시합니다 . 기본 설정 앞에는 빼기 부호가 있고 그 뒤에 변경된 설정에 더하기 부호가 붙습니다.</target>
        </trans-unit>
        <trans-unit id="84ba2d961cf71c98d1d9c466c966a0a80fcff3b3" translate="yes" xml:space="preserve">
          <source>Specifies the serialization format of the output. Defaults to JSON. Supported formats are listed in &lt;a href=&quot;../topics/serialization#serialization-formats&quot;&gt;Serialization formats&lt;/a&gt;.</source>
          <target state="translated">출력의 직렬화 형식을 지정합니다. 기본값은 JSON입니다. 지원되는 형식은 &lt;a href=&quot;../topics/serialization#serialization-formats&quot;&gt;직렬화&lt;/a&gt; 형식으로 표시 됩니다 .</target>
        </trans-unit>
        <trans-unit id="1959720b6b3bc5b663d148384d2eaabbf26c6ab3" translate="yes" xml:space="preserve">
          <source>Specifies the settings module to use. The settings module should be in Python package syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt;. If this isn&amp;rsquo;t provided, &lt;code&gt;django-admin&lt;/code&gt; will use the &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-9&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">Specifies the settings module to use. The settings module should be in Python package syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt; . If this isn&amp;rsquo;t provided, &lt;code&gt;django-admin&lt;/code&gt; will use the &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-9&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; environment variable.</target>
        </trans-unit>
        <trans-unit id="23cab68bfd2acaa1233320ecc705be1628e0e43b" translate="yes" xml:space="preserve">
          <source>Specifies the settings module to use. The settings module should be in Python package syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt;. If this isn&amp;rsquo;t provided, &lt;code&gt;django-admin&lt;/code&gt; will use the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable.</source>
          <target state="translated">사용할 설정 모듈을 지정합니다. 설정 모듈은 Python 패키지 구문 (예 : &lt;code&gt;mysite.settings&lt;/code&gt; )이어야 합니다. 이것이 제공되지 않으면 &lt;code&gt;django-admin&lt;/code&gt; 은 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 환경 변수를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="56a0076920d8fc848faec0f83c816d8ec4427a1e" translate="yes" xml:space="preserve">
          <source>Specifies the shell to use. By default, Django will use &lt;a href=&quot;https://ipython.org/&quot;&gt;IPython&lt;/a&gt; or &lt;a href=&quot;https://bpython-interpreter.org/&quot;&gt;bpython&lt;/a&gt; if either is installed. If both are installed, specify which one you want like so:</source>
          <target state="translated">사용할 쉘을 지정합니다. Django는 기본적으로 &lt;a href=&quot;https://ipython.org/&quot;&gt;IPython&lt;/a&gt; 또는 &lt;a href=&quot;https://bpython-interpreter.org/&quot;&gt;bpython (&lt;/a&gt; 설치된 경우)을 사용합니다. 둘 다 설치되어 있으면 원하는 것을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="f0a1bca43465aaeca153da4ee738966841008ad5" translate="yes" xml:space="preserve">
          <source>Specifies the underlying data type and behavior for the array. It should be an instance of a subclass of &lt;a href=&quot;../../models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;. For example, it could be an &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;. Most field types are permitted, with the exception of those handling relational data (&lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">배열의 기본 데이터 유형 및 동작을 지정합니다. &lt;a href=&quot;../../models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인스턴스 여야합니다 . 예를 들어, 그것은 될 수 &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; . 관계형 데이터 처리 ( &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; )를 제외한 대부분의 필드 유형이 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="0478399c16e5a36924413257ca1edfab3f336361" translate="yes" xml:space="preserve">
          <source>Specifies whether or not inline objects can be deleted in the inline. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">인라인에서 인라인 객체를 삭제할 수 있는지 여부를 지정합니다. 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b1537fb21d812507dc96bbbb1f5a8899c347f0b3" translate="yes" xml:space="preserve">
          <source>Specifies whether or not inline objects that can be changed in the admin have a link to the change form. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">관리자에서 변경할 수있는 인라인 오브젝트에 변경 양식에 대한 링크가 있는지 여부를 지정합니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="497afe699651aac553ab1ccf098c0965d0635868" translate="yes" xml:space="preserve">
          <source>Specifies which file extensions in the app template should be rendered with the template engine. Defaults to &lt;code&gt;py&lt;/code&gt;.</source>
          <target state="translated">템플릿 엔진으로 렌더링 할 앱 템플릿의 파일 확장자를 지정합니다. 기본값은 &lt;code&gt;py&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="db65966f0c3b6641a173b5b3edd351900c1c9eda" translate="yes" xml:space="preserve">
          <source>Specifies which file extensions in the project template should be rendered with the template engine. Defaults to &lt;code&gt;py&lt;/code&gt;.</source>
          <target state="translated">프로젝트 템플릿에서 템플릿 엔진으로 렌더링 할 파일 확장자를 지정합니다. 기본값은 &lt;code&gt;py&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="025a27df0442583f1645339e20c6b8d00208535f" translate="yes" xml:space="preserve">
          <source>Specifies which files in the app template (in addition to those matching &lt;code&gt;--extension&lt;/code&gt;) should be rendered with the template engine. Defaults to an empty list.</source>
          <target state="translated">템플릿 엔진으로 렌더링해야하는 앱 템플릿의 파일 ( &lt;code&gt;--extension&lt;/code&gt; 과 일치하는 파일)을 지정합니다 . 빈 목록이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="be179dd56e79e32cb59be753f949c5e698e146b1" translate="yes" xml:space="preserve">
          <source>Specifies which files in the project template (in addition to those matching &lt;code&gt;--extension&lt;/code&gt;) should be rendered with the template engine. Defaults to an empty list.</source>
          <target state="translated">템플릿 엔진으로 렌더링해야하는 프로젝트 템플릿의 파일 ( &lt;code&gt;--extension&lt;/code&gt; 과 일치하는 파일)을 지정합니다 . 빈 목록이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="684dff5b6bdc4c33909328c7a828709feb80f29f" translate="yes" xml:space="preserve">
          <source>Specify a translation string by using the function &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s convention to import this as a shorter alias, &lt;code&gt;_&lt;/code&gt;, to save typing.</source>
          <target state="translated">&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 변환 문자열을 지정하십시오 . 입력을 저장하기 위해 이것을 짧은 별명 &lt;code&gt;_&lt;/code&gt; 으로 가져 오는 것이 일반적 입니다.</target>
        </trans-unit>
        <trans-unit id="ef4c3372859c9a20edbd005d85668631f1d99785" translate="yes" xml:space="preserve">
          <source>Specify both the singular and plural forms separating them with the &lt;code&gt;{% plural %}&lt;/code&gt; tag within the &lt;code&gt;{% blocktrans %}&lt;/code&gt; and &lt;code&gt;{% endblocktrans %}&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;{% blocktrans %}&lt;/code&gt; 및 &lt;code&gt;{% endblocktrans %}&lt;/code&gt; endblocktrans %} 태그 내에서 {% &lt;code&gt;{% plural %}&lt;/code&gt; 태그로 분리하는 단수형과 복수형을 모두 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="710e6f112fb8dd0d1c7de817661329a64e19d728" translate="yes" xml:space="preserve">
          <source>Specify both the singular and plural forms separating them with the &lt;code&gt;{% plural %}&lt;/code&gt; tag within the &lt;code&gt;{% blocktranslate %}&lt;/code&gt; and &lt;code&gt;{% endblocktranslate %}&lt;/code&gt; tags.</source>
          <target state="translated">Specify both the singular and plural forms separating them with the &lt;code&gt;{% plural %}&lt;/code&gt; tag within the &lt;code&gt;{% blocktranslate %}&lt;/code&gt; and &lt;code&gt;{% endblocktranslate %}&lt;/code&gt; tags.</target>
        </trans-unit>
        <trans-unit id="ab24ca02aaad2bf4d48268fccf9889ff02fac662" translate="yes" xml:space="preserve">
          <source>Specify one or more of &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt; or &lt;code&gt;tables&lt;/code&gt;. None of the arguments is required, but you should use at least one of them.</source>
          <target state="translated">하나 이상 지정 &lt;code&gt;params&lt;/code&gt; , &lt;code&gt;select&lt;/code&gt; , 또는 &lt;code&gt;tables&lt;/code&gt; . 인수는 필요하지 않지만 적어도 하나를 사용해야합니다. &lt;code&gt;where&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4aca3e2503d7d682e22fe6da77f704584fbd9b94" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;model = Publisher&lt;/code&gt; is shorthand for saying &lt;code&gt;queryset =
Publisher.objects.all()&lt;/code&gt;. However, by using &lt;code&gt;queryset&lt;/code&gt; to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see &lt;a href=&quot;../db/queries&quot;&gt;Making queries&lt;/a&gt; for more information about &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; objects, and see the &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views reference&lt;/a&gt; for the complete details).</source>
          <target state="translated">&lt;code&gt;queryset = Publisher.objects.all()&lt;/code&gt; 이라고 말하면 &lt;code&gt;model = Publisher&lt;/code&gt; 지정하는 것이 속기입니다 . 그러나, 사용 &lt;code&gt;queryset&lt;/code&gt; 개체의 필터링 된 목록을 정의 할 수 있습니다 (참조보기에 표시됩니다 개체에 대한 구체적 할 수 &lt;a href=&quot;../db/queries&quot;&gt;쿼리를 만들기&lt;/a&gt; 에 대한 자세한 내용은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 객체와 참조 &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;클래스 기반 뷰 기준&lt;/a&gt; 전체 세부 사항을 ).</target>
        </trans-unit>
        <trans-unit id="eddf90d9bdd080567f5c16c49e26ef8355f7a4a3" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;symmetrical=True&lt;/code&gt; for recursive many-to-many relationships using an intermediary model was allowed.</source>
          <target state="translated">중개 모델을 사용하여 재귀적인 다 대다 관계에 대해 &lt;code&gt;symmetrical=True&lt;/code&gt; 지정 하는 것이 허용되었습니다.</target>
        </trans-unit>
        <trans-unit id="8ad7cdad3351a181796ef3482e01a1a48b8f9169" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;update_fields&lt;/code&gt; will force an update.</source>
          <target state="translated">&lt;code&gt;update_fields&lt;/code&gt; 를 지정 하면 업데이트가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6656fd3365703a2a2a112873932b360f1753279b" translate="yes" xml:space="preserve">
          <source>Specifying a custom reverse manager also enables you to call its custom methods:</source>
          <target state="translated">Specifying a custom reverse manager also enables you to call its custom methods:</target>
        </trans-unit>
        <trans-unit id="64c05e64c70090e0361a1831495143cfd6750c0d" translate="yes" xml:space="preserve">
          <source>Specifying a custom user model</source>
          <target state="translated">사용자 정의 사용자 모델 지정</target>
        </trans-unit>
        <trans-unit id="fa36dd0d4d3098ca9746ef874f118b35d1e6a776" translate="yes" xml:space="preserve">
          <source>Specifying authentication backends</source>
          <target state="translated">인증 백엔드 지정</target>
        </trans-unit>
        <trans-unit id="b192380f1aec51686c1c607d55e21300c0f01680" translate="yes" xml:space="preserve">
          <source>Specifying defaults for view arguments</source>
          <target state="translated">뷰 인수의 기본값 지정</target>
        </trans-unit>
        <trans-unit id="0b92e0f67db69f307a8d123f470bbee82d943143" translate="yes" xml:space="preserve">
          <source>Specifying per-view cache in the URLconf</source>
          <target state="translated">URLconf에서 뷰당 캐시 지정</target>
        </trans-unit>
        <trans-unit id="bbdd950f05266fd92b26516b493f91a156c4e270" translate="yes" xml:space="preserve">
          <source>Specifying the form field for a model field</source>
          <target state="translated">모델 필드의 양식 필드 지정</target>
        </trans-unit>
        <trans-unit id="d7533cbfe534c73a0817a3887816418293857d0c" translate="yes" xml:space="preserve">
          <source>Specifying the parent link field</source>
          <target state="translated">상위 링크 필드 지정</target>
        </trans-unit>
        <trans-unit id="4580f1184f9d7faed109bf18b53b8f2430280b14" translate="yes" xml:space="preserve">
          <source>Specifying the type of feed</source>
          <target state="translated">피드 유형 지정</target>
        </trans-unit>
        <trans-unit id="053dc293beb27f7736035f74eb034bc9d8000f9e" translate="yes" xml:space="preserve">
          <source>Specifying which fields to save</source>
          <target state="translated">저장할 필드 지정</target>
        </trans-unit>
        <trans-unit id="dbedaf851bb22303fcfe72276f8ead9d0d61127f" translate="yes" xml:space="preserve">
          <source>Specifying widgets</source>
          <target state="translated">위젯 지정</target>
        </trans-unit>
        <trans-unit id="3bcb4249c4a552b91351e2cacb57f86f10a74f9d" translate="yes" xml:space="preserve">
          <source>Specifying widgets to use in the form with &lt;code&gt;widgets&lt;/code&gt;</source>
          <target state="translated">와 형태로 사용에 위젯을 지정 &lt;code&gt;widgets&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c6b4b415846f22333672619fc18998ffff60e25" translate="yes" xml:space="preserve">
          <source>Specifying widgets to use in the inline form</source>
          <target state="translated">인라인 양식에서 사용할 위젯 지정</target>
        </trans-unit>
        <trans-unit id="e3b918622bed127b25593a5419b3321abd3d957a" translate="yes" xml:space="preserve">
          <source>Speeding up test execution with non-durable settings</source>
          <target state="translated">내구성이없는 설정으로 테스트 실행 속도 향상</target>
        </trans-unit>
        <trans-unit id="c9d8970cf679c2386c36f097290a16fc16246aea" translate="yes" xml:space="preserve">
          <source>Speeding up the tests</source>
          <target state="translated">테스트 속도 향상</target>
        </trans-unit>
        <trans-unit id="b0769dd62bb8bd1c586f460234ebaed5ff85a966" translate="yes" xml:space="preserve">
          <source>Squashes the migrations for &lt;code&gt;app_label&lt;/code&gt; up to and including &lt;code&gt;migration_name&lt;/code&gt; down into fewer migrations, if possible. The resulting squashed migrations can live alongside the unsquashed ones safely. For more information, please read &lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;Squashing migrations&lt;/a&gt;.</source>
          <target state="translated">과즙에 대한 마이그레이션 &lt;code&gt;app_label&lt;/code&gt; 까지 포함 &lt;code&gt;migration_name&lt;/code&gt; 을 가능하면 적은 수의 마이그레이션에 아래로. 결과적으로 찌그러진 이주는 찌그러지지 않은 이주와 함께 안전하게 살 수 있습니다. 자세한 내용은 스 &lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;쿼싱 마이그레이션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5f58f40fcc14ad733a045210687dd09b0ebab59a" translate="yes" xml:space="preserve">
          <source>Squashing is the act of reducing an existing set of many migrations down to one (or sometimes a few) migrations which still represent the same changes.</source>
          <target state="translated">스 쿼싱은 기존의 많은 마이그레이션 집합을 여전히 동일한 변경 사항을 나타내는 하나 (또는 ​​때로는 몇 개의) 마이그레이션으로 줄이는 동작입니다.</target>
        </trans-unit>
        <trans-unit id="d0d13de0a8b9d8e41667b56366813b78e468894f" translate="yes" xml:space="preserve">
          <source>Squashing migrations</source>
          <target state="translated">스 쿼싱 마이그레이션</target>
        </trans-unit>
        <trans-unit id="fa220b2aedb00e1775d18b724fdf45a025232941" translate="yes" xml:space="preserve">
          <source>Stacking &lt;code&gt;UserPassesTestMixin&lt;/code&gt;</source>
          <target state="translated">스태킹 &lt;code&gt;UserPassesTestMixin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="afaba89802bd2ded3004deadc4950f729b566880" translate="yes" xml:space="preserve">
          <source>Standalone scripts</source>
          <target state="translated">독립형 스크립트</target>
        </trans-unit>
        <trans-unit id="72a5a3b8ff69038ebe02a48488fb72e5c00418a6" translate="yes" xml:space="preserve">
          <source>Standard &lt;a href=&quot;request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects are static structures. They are provided with a block of pre-rendered content at time of construction, and while that content can be modified, it isn&amp;rsquo;t in a form that makes it easy to perform modifications.</source>
          <target state="translated">표준 &lt;a href=&quot;request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체는 정적 구조입니다. 구성시 사전 렌더링 된 콘텐츠 블록이 제공되며 해당 콘텐츠는 수정할 수 있지만 수정을 쉽게 수행 할 수있는 형식은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0fcf6f2b778cffcd496bc580f2e0e7fac09fbd2c" translate="yes" xml:space="preserve">
          <source>Standard database operations stop being a useful approach when you start considering large blocks of text. Whereas the examples above can be thought of as operations on a string of characters, full text search looks at the actual words. Depending on the system used, it&amp;rsquo;s likely to use some of the following ideas:</source>
          <target state="translated">큰 텍스트 블록을 고려하기 시작하면 표준 데이터베이스 작업이 유용한 접근 방식이 아닙니다. 위의 예는 문자열에 대한 연산으로 생각할 수 있지만 전체 텍스트 검색은 실제 단어를 찾습니다. 사용 된 시스템에 따라 다음 아이디어 중 일부를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b59b89d6a68dbca952a92af58029daaaa05fb2b" translate="yes" xml:space="preserve">
          <source>Standard textual queries</source>
          <target state="translated">표준 텍스트 쿼리</target>
        </trans-unit>
        <trans-unit id="ab5b05772bdbb8a11ef1436312a851d8acf661fb" translate="yes" xml:space="preserve">
          <source>Standard translation</source>
          <target state="translated">표준 번역</target>
        </trans-unit>
        <trans-unit id="298edc8a2fdf4fdab865c1fb56cbd4f13f1394d5" translate="yes" xml:space="preserve">
          <source>Start the development server</source>
          <target state="translated">개발 서버를 시작하십시오</target>
        </trans-unit>
        <trans-unit id="71e2b89ef9291060b979126c686b3c89edd9a6fc" translate="yes" xml:space="preserve">
          <source>Start the server (or restart it if it&amp;rsquo;s already running):</source>
          <target state="translated">서버를 시작하십시오 (또는 이미 실행중인 경우 다시 시작하십시오).</target>
        </trans-unit>
        <trans-unit id="36a823a7956e6cd9f21924a0ba72a774b7b8ef9c" translate="yes" xml:space="preserve">
          <source>Starting with a URL requested by the user/browser, it calls the right Django view providing any arguments it might need with their values as extracted from the URL.</source>
          <target state="translated">사용자 / 브라우저가 요청한 URL로 시작하여 올바른 Django보기를 호출하여 URL에서 추출 된 값에 필요한 인수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2d4e16b43d77310c34e452f4744346499fa03ee1" translate="yes" xml:space="preserve">
          <source>Starting with the identification of the corresponding Django view plus the values of arguments that would be passed to it, obtain the associated URL.</source>
          <target state="translated">해당 Django 뷰의 식별과 함께 전달 될 인수 값으로 시작하여 관련 URL을 확보하십시오.</target>
        </trans-unit>
        <trans-unit id="c8f6dd81b785d0304fc0cf63ac1a45a6b5d1c38a" translate="yes" xml:space="preserve">
          <source>Starts a lightweight development Web server on the local machine. By default, the server runs on port 8000 on the IP address &lt;code&gt;127.0.0.1&lt;/code&gt;. You can pass in an IP address and port number explicitly.</source>
          <target state="translated">로컬 시스템에서 경량 개발 웹 서버를 시작합니다. 기본적으로 서버는 IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 의 포트 8000에서 실행됩니다 . IP 주소와 포트 번호를 명시 적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e55b00cf79640336955f6a15915752ea03e1a31c" translate="yes" xml:space="preserve">
          <source>Starts the Python interactive interpreter.</source>
          <target state="translated">Python 대화식 인터프리터를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="1311d086ffc80574fdac4b47d1554d6837801f56" translate="yes" xml:space="preserve">
          <source>Starts-with and ends-with search, respectively. There are also case-insensitive versions called &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-istartswith&quot;&gt;&lt;code&gt;istartswith&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iendswith&quot;&gt;&lt;code&gt;iendswith&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">검색으로 시작 및 종료합니다. &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-istartswith&quot;&gt; &lt;code&gt;istartswith&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iendswith&quot;&gt; &lt;code&gt;iendswith&lt;/code&gt; &lt;/a&gt; 라는 대소 문자를 구분하지 않는 버전도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1c031153c642e8130ab037b056c28c991496c45" translate="yes" xml:space="preserve">
          <source>Static Files</source>
          <target state="translated">정적 파일</target>
        </trans-unit>
        <trans-unit id="724c3fdcb1fa9db153cf0da4805f683eea9d882f" translate="yes" xml:space="preserve">
          <source>Static file development view</source>
          <target state="translated">정적 파일 개발 뷰</target>
        </trans-unit>
        <trans-unit id="debb4f3d06504b322041b5f31ffe50abc8366b79" translate="yes" xml:space="preserve">
          <source>Static file finders are currently considered a private interface, and this interface is thus undocumented.</source>
          <target state="translated">정적 파일 파인더는 현재 개인 인터페이스로 간주되므로이 인터페이스는 문서화되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="34f98c53e58f76b16d184481e3d220bb1ced41c7" translate="yes" xml:space="preserve">
          <source>Static file namespacing</source>
          <target state="translated">정적 파일 이름</target>
        </trans-unit>
        <trans-unit id="c67b41072f6be9918effb94b462d59a413773f62" translate="yes" xml:space="preserve">
          <source>Static files</source>
          <target state="translated">정적 파일</target>
        </trans-unit>
        <trans-unit id="55c6a23bcbb02c6bc5b7baeb4d46204aae98ef57" translate="yes" xml:space="preserve">
          <source>Static files are automatically served by the development server. In production, you must define a &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; directory where &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; will copy them.</source>
          <target state="translated">정적 파일은 개발 서버에서 자동으로 제공됩니다. 생산, 당신은 정의해야합니다 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; 의&lt;/a&gt; 디렉토리 &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; 가&lt;/a&gt; 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="ea50b68a12ea4bffd77d98cfe32c34e31ef4556d" translate="yes" xml:space="preserve">
          <source>Static files management</source>
          <target state="translated">정적 파일 관리</target>
        </trans-unit>
        <trans-unit id="468b015716ba67db5c5137a15fe96453744f97cb" translate="yes" xml:space="preserve">
          <source>Static files, which by definition are not dynamic, make an excellent target for optimization gains.</source>
          <target state="translated">동적이지 않은 정적 파일은 최적화 이득을위한 훌륭한 대상이됩니다.</target>
        </trans-unit>
        <trans-unit id="dbb55501b6182a55d5ef0bb9d8983448c1e4000b" translate="yes" xml:space="preserve">
          <source>Status information will be written to this file handle. Defaults to using &lt;code&gt;sys.stdout&lt;/code&gt;, but any object with a &lt;code&gt;write&lt;/code&gt; method is supported.</source>
          <target state="translated">상태 정보가이 파일 핸들에 기록됩니다. 기본적으로 &lt;code&gt;sys.stdout&lt;/code&gt; 을 사용 하지만 &lt;code&gt;write&lt;/code&gt; 메소드가 있는 모든 객체 가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="7f4f785a32aeb81e0a7ff919e91121617ede171c" translate="yes" xml:space="preserve">
          <source>Stemming words, so that &amp;ldquo;pony&amp;rdquo; and &amp;ldquo;ponies&amp;rdquo; are considered similar.</source>
          <target state="translated">&quot;조랑말&quot;과 &quot;조랑말&quot;이 비슷한 것으로 간주되도록 단어를 형태소 분석합니다.</target>
        </trans-unit>
        <trans-unit id="474ca822a4222d269a95e4e93701c49d8054ad74" translate="yes" xml:space="preserve">
          <source>Still, note that there are always going to be sections of your debug output that are inappropriate for public consumption. File paths, configuration options and the like all give attackers extra information about your server.</source>
          <target state="translated">그럼에도 불구하고 항상 디버그 출력에 공공 소비에 부적합한 섹션이있을 것입니다. 파일 경로, 구성 옵션 등은 공격자에게 서버에 대한 추가 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d8ee0e5ac1d56dbf0d06477a93bc5d14e01359b9" translate="yes" xml:space="preserve">
          <source>Stops running tests and reports the failure immediately after a test fails.</source>
          <target state="translated">테스트 실행을 중지하고 테스트 실패 직후 실패를보고합니다.</target>
        </trans-unit>
        <trans-unit id="12b75a63f772a6610a2d1a1c30a7c6f8c7c6bc7f" translate="yes" xml:space="preserve">
          <source>Stops the template engine from rendering the contents of this block tag.</source>
          <target state="translated">템플릿 엔진이이 블록 태그의 내용을 렌더링하지 못하게합니다.</target>
        </trans-unit>
        <trans-unit id="ab1557ec70d1b0010ae03328efc7140e3d7014fd" translate="yes" xml:space="preserve">
          <source>Storage backends</source>
          <target state="translated">스토리지 백엔드</target>
        </trans-unit>
        <trans-unit id="567ce2a52a8dc37c3d7c374479ee12ec4da2a5b5" translate="yes" xml:space="preserve">
          <source>Storage engines</source>
          <target state="translated">저장 엔진</target>
        </trans-unit>
        <trans-unit id="8690ab496342e3b23e722655f434e9d599df2ebd" translate="yes" xml:space="preserve">
          <source>Storage objects</source>
          <target state="translated">스토리지 객체</target>
        </trans-unit>
        <trans-unit id="687c6980fa4b88314893c4d3905f3cafb0bfe1ce" translate="yes" xml:space="preserve">
          <source>Storages</source>
          <target state="translated">Storages</target>
        </trans-unit>
        <trans-unit id="b0f1f8c9c2dcba9655d70d26929b8b1d0e48ddcd" translate="yes" xml:space="preserve">
          <source>Store your static files in a folder called &lt;code&gt;static&lt;/code&gt; in your app. For example &lt;code&gt;my_app/static/my_app/example.jpg&lt;/code&gt;.</source>
          <target state="translated">정적 파일을 앱의 &lt;code&gt;static&lt;/code&gt; 폴더에 저장하십시오 . 예를 들어 &lt;code&gt;my_app/static/my_app/example.jpg&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="073bbbf48c6eb83a2852f4678919ceac4595d300" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; 를&lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="3a6daa5c20d23f84881e9fa95fa1893b088841b2" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.GeometryCollection&quot;&gt;&lt;code&gt;GeometryCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.GeometryCollection&quot;&gt; &lt;code&gt;GeometryCollection&lt;/code&gt; 을&lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="315308ae7944998b72975dc9466019d314cc79c5" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; 을&lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="ed6d1e5283b30474c1c0300f9f460481be4e65e0" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.MultiLineString&quot;&gt;&lt;code&gt;MultiLineString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.MultiLineString&quot;&gt; &lt;code&gt;MultiLineString&lt;/code&gt; 을&lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="a78b908bf6cde5510284e225461ad89380678f0c" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.MultiPoint&quot;&gt;&lt;code&gt;MultiPoint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.MultiPoint&quot;&gt; &lt;code&gt;MultiPoint&lt;/code&gt; 를&lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="519189173bec278630442b11bfe8e42391c667f9" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.MultiPolygon&quot;&gt;&lt;code&gt;MultiPolygon&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.MultiPolygon&quot;&gt; &lt;code&gt;MultiPolygon&lt;/code&gt; 을&lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="a1e5d386e8b193cbae72ddbdf0df69e07d8cd6be" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">저장합니다 &lt;a href=&quot;geos#django.contrib.gis.geos.Point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b20d820edd4ee8d8aaa6faeceda245bf3d15f4bb" translate="yes" xml:space="preserve">
          <source>Stores a &lt;a href=&quot;geos#django.contrib.gis.geos.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.Polygon&quot;&gt; &lt;code&gt;Polygon&lt;/code&gt; &lt;/a&gt; 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="442fdb9b3e170ac8a03783b7cc6d935563aba9c2" translate="yes" xml:space="preserve">
          <source>Stores a range of dates. Based on a &lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;. Represented by a &lt;code&gt;daterange&lt;/code&gt; in the database and a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateRange&quot;&gt;&lt;code&gt;DateRange&lt;/code&gt;&lt;/a&gt; in Python.</source>
          <target state="translated">날짜 범위를 저장합니다. &lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; 를&lt;/a&gt; 기반으로합니다 . a로 대표 &lt;code&gt;daterange&lt;/code&gt; 데이터베이스와 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateRange&quot;&gt; &lt;code&gt;DateRange&lt;/code&gt; &lt;/a&gt; 파이썬한다.</target>
        </trans-unit>
        <trans-unit id="10f1dbb79b52ddd161446eb05b9d70feab70ce79" translate="yes" xml:space="preserve">
          <source>Stores a range of floating point values. Based on a &lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt;. Represented by a &lt;code&gt;numrange&lt;/code&gt; in the database and a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt; in Python.</source>
          <target state="translated">부동 소수점 값의 범위를 저장합니다. &lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; 를&lt;/a&gt; 기반으로합니다 . a로 대표 &lt;code&gt;numrange&lt;/code&gt; 데이터베이스와 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; &lt;/a&gt; 파이썬한다.</target>
        </trans-unit>
        <trans-unit id="6d6ab479b0af5a4f83f7e297e862610934953058" translate="yes" xml:space="preserve">
          <source>Stores a range of floating point values. Based on a &lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt;. Represented by a &lt;code&gt;numrange&lt;/code&gt; in the database and a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt; in Python.</source>
          <target state="translated">부동 소수점 값의 범위를 저장합니다. &lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; 를&lt;/a&gt; 기반으로합니다 . a로 대표 &lt;code&gt;numrange&lt;/code&gt; 데이터베이스와 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; &lt;/a&gt; 파이썬한다.</target>
        </trans-unit>
        <trans-unit id="d974c9ba76aa3ebf85128823bcb263bcad904b18" translate="yes" xml:space="preserve">
          <source>Stores a range of integers. Based on an &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;. Represented by an &lt;code&gt;int4range&lt;/code&gt; in the database and a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt; in Python.</source>
          <target state="translated">정수 범위를 저장합니다. &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; 를&lt;/a&gt; 기반으로합니다 . 로 표현 &lt;code&gt;int4range&lt;/code&gt; 데이터베이스와 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; &lt;/a&gt; 파이썬한다.</target>
        </trans-unit>
        <trans-unit id="f7fc9f68a40c2bb5262ed6710268e98141687b4b" translate="yes" xml:space="preserve">
          <source>Stores a range of large integers. Based on a &lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt;&lt;code&gt;BigIntegerField&lt;/code&gt;&lt;/a&gt;. Represented by an &lt;code&gt;int8range&lt;/code&gt; in the database and a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt; in Python.</source>
          <target state="translated">큰 정수 범위를 저장합니다. &lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt; &lt;code&gt;BigIntegerField&lt;/code&gt; 를&lt;/a&gt; 기반으로합니다 . 로 표현 &lt;code&gt;int8range&lt;/code&gt; 데이터베이스와 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; &lt;/a&gt; 파이썬한다.</target>
        </trans-unit>
        <trans-unit id="24d2fd4ba60083f3af9475d6bedf8c5e0b57cf7f" translate="yes" xml:space="preserve">
          <source>Stores a range of timestamps. Based on a &lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;. Represented by a &lt;code&gt;tstzrange&lt;/code&gt; in the database and a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateTimeTZRange&quot;&gt;&lt;code&gt;DateTimeTZRange&lt;/code&gt;&lt;/a&gt; in Python.</source>
          <target state="translated">타임 스탬프 범위를 저장합니다. &lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 를&lt;/a&gt; 기반으로합니다 . 데이터베이스 의 &lt;code&gt;tstzrange&lt;/code&gt; 와 Python 의 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateTimeTZRange&quot;&gt; &lt;code&gt;DateTimeTZRange&lt;/code&gt; 로 표시&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="85fefa25af8ac03aed394db3aa8716969e73a82a" translate="yes" xml:space="preserve">
          <source>Stores changes to miscellaneous model options (settings on a model&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt;) like &lt;code&gt;permissions&lt;/code&gt; and &lt;code&gt;verbose_name&lt;/code&gt;. Does not affect the database, but persists these changes for &lt;a href=&quot;#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; instances to use. &lt;code&gt;options&lt;/code&gt; should be a dictionary mapping option names to values.</source>
          <target state="translated">&lt;code&gt;permissions&lt;/code&gt; 및 &lt;code&gt;verbose_name&lt;/code&gt; 과 같은 기타 모델 옵션 (모델의 &lt;code&gt;Meta&lt;/code&gt; 설정)에 대한 변경 사항을 저장 합니다. 데이터베이스에는 영향을 미치지 않지만 &lt;a href=&quot;#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 인스턴스가 사용할 수 있도록 이러한 변경 사항을 유지 합니다. &lt;code&gt;options&lt;/code&gt; 은 옵션 이름을 값에 사전 맵핑해야합니다.</target>
        </trans-unit>
        <trans-unit id="7f6013803e5d64bbb493438a1fa858558549e9f3" translate="yes" xml:space="preserve">
          <source>Storing JSON scalar &lt;code&gt;null&lt;/code&gt; does not violate &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=False&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Storing JSON scalar &lt;code&gt;null&lt;/code&gt; does not violate &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=False&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="17ca0f7fd17717b77e98351c126613bbe7ba06e6" translate="yes" xml:space="preserve">
          <source>Storing and querying for &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">Storing and querying for &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b26d85acdc9c1382a17178263f16f66529e2935f" translate="yes" xml:space="preserve">
          <source>Storing the CSRF token in a cookie (Django&amp;rsquo;s default) is safe, but storing it in the session is common practice in other web frameworks and therefore sometimes demanded by security auditors.</source>
          <target state="translated">쿠키에 CSRF 토큰을 저장하는 것은 안전하지만 (Django의 기본값) 세션에 저장하는 것은 다른 웹 프레임 워크에서 일반적으로 수행되므로 보안 감사자가 요구하는 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="53bd973c8e9ec072b83032a646a616c6e1d937c5" translate="yes" xml:space="preserve">
          <source>Streaming large CSV files</source>
          <target state="translated">큰 CSV 파일 스트리밍</target>
        </trans-unit>
        <trans-unit id="9a1d81db2bbbab8255afb828704753d2e3a5742c" translate="yes" xml:space="preserve">
          <source>Strictly speaking, &lt;code&gt;filesizeformat&lt;/code&gt; does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used.</source>
          <target state="translated">엄밀히 말하면 &lt;code&gt;filesizeformat&lt;/code&gt; 은 바이트 크기가 1024의 거듭 제곱으로 계산 될 때 KiB, MiB, GiB 등을 사용하도록 권장하는 국제 단위 시스템 (International System of Units)을 따르지 않습니다 (이 경우). 대신 Django는보다 일반적으로 사용되는 이름에 해당하는 전통적인 단위 이름 (KB, MB, GB 등)을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="95041f41349683b64a22765014d2875f3ec50b39" translate="yes" xml:space="preserve">
          <source>Strictly speaking, Django allows importing models once their application configuration is loaded. However, in order to avoid needless constraints on the order of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s strongly recommended not import any models at this stage.</source>
          <target state="translated">엄밀히 말하면, Django는 일단 애플리케이션 구성이로드되면 모델을 가져올 수 있습니다. 그러나 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 순서에 대한 불필요한 제한을 피하려면 이 단계에서 모델을 가져 오지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="be6d28eafa6bafa726940b259dfd49f021cc9df3" translate="yes" xml:space="preserve">
          <source>Strictly speaking, signal handling and registration code can live anywhere you like, although it&amp;rsquo;s recommended to avoid the application&amp;rsquo;s root module and its &lt;code&gt;models&lt;/code&gt; module to minimize side-effects of importing code.</source>
          <target state="translated">엄밀히 말하면 신호 처리 및 등록 코드는 원하는 곳 어디에서나 살 수 있지만 코드 가져 오기의 부작용을 최소화하기 위해 응용 프로그램의 루트 모듈과 &lt;code&gt;models&lt;/code&gt; 모듈을 피하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="5d48c7c680a0f2ebf70d8ae1b79309ebb93d71c7" translate="yes" xml:space="preserve">
          <source>String literals and automatic escaping</source>
          <target state="translated">문자열 리터럴 및 자동 이스케이프</target>
        </trans-unit>
        <trans-unit id="2ce5220f1291fc968b8a624034f3ec2f95fc3951" translate="yes" xml:space="preserve">
          <source>String literals passed to tags and filters</source>
          <target state="translated">태그 및 필터에 전달 된 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="5aaa087b298e0e5411ed543eaab495db54cb115f" translate="yes" xml:space="preserve">
          <source>String marked safe will become unsafe again if modified. For example:</source>
          <target state="translated">safe로 표시된 문자열은 수정하면 다시 안전하지 않게됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="df60868121cc45b530430369578cf2586acf3487" translate="yes" xml:space="preserve">
          <source>String representing the name of the raster. When creating a file-based raster, this parameter must be the file path for the new raster. If the name starts with &lt;code&gt;/vsimem/&lt;/code&gt;, the raster is created in GDAL&amp;rsquo;s virtual filesystem.</source>
          <target state="translated">래스터의 이름을 나타내는 문자열 파일 기반 래스터를 만들 때이 매개 변수는 새 래스터의 파일 경로 여야합니다. 이름이 &lt;code&gt;/vsimem/&lt;/code&gt; 시작 하면 래스터가 GDAL의 가상 파일 시스템에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="e4b2dc6cae3949b7f2226b9d18544755ac711dd8" translate="yes" xml:space="preserve">
          <source>Strings for setting both keys and values will be converted from &lt;code&gt;encoding&lt;/code&gt; to &lt;code&gt;str&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not set, it defaults to &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">키와 값을 모두 설정하기위한 문자열은 &lt;code&gt;encoding&lt;/code&gt; 에서 &lt;code&gt;str&lt;/code&gt; 로 변환됩니다 . &lt;code&gt;encoding&lt;/code&gt; 이 설정되지 않은 경우 기본값은 &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6af15dcaf8028884a9c1a0a95b1d40fa996014cc" translate="yes" xml:space="preserve">
          <source>Strings that can be coerced to integers will be &lt;strong&gt;summed&lt;/strong&gt;, not concatenated, as in the first example above.</source>
          <target state="translated">정수로 강제 변환 할 수있는 문자열은 위의 첫 번째 예와 같이 연결되지 않고 &lt;strong&gt;합산&lt;/strong&gt; 됩니다 .</target>
        </trans-unit>
        <trans-unit id="c7f2950d019840cc87935eabaf5673f9a0cf7c77" translate="yes" xml:space="preserve">
          <source>Strings that reference fields on the model, or &lt;a href=&quot;expressions&quot;&gt;query expressions&lt;/a&gt;.</source>
          <target state="translated">모델에 참조 필드, 또는 문자열 &lt;a href=&quot;expressions&quot;&gt;쿼리 식&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4f3fe26cc5b643b13d9bd40452d1189e59da23e8" translate="yes" xml:space="preserve">
          <source>Styling required or erroneous form rows</source>
          <target state="translated">스타일링 필요 또는 잘못된 양식 행</target>
        </trans-unit>
        <trans-unit id="2c18baa1aff6f31add9fe33da98e6b67f5bf6ff5" translate="yes" xml:space="preserve">
          <source>Styling widget classes</source>
          <target state="translated">스타일링 위젯 클래스</target>
        </trans-unit>
        <trans-unit id="44b7fa0469dcbcc7c3f97ccad782bda65e0fa25f" translate="yes" xml:space="preserve">
          <source>Styling widget instances</source>
          <target state="translated">스타일링 위젯 인스턴스</target>
        </trans-unit>
        <trans-unit id="7f6e828c93be239a620d004062d68ac259f58e47" translate="yes" xml:space="preserve">
          <source>Subclass of &lt;a href=&quot;../../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt;&lt;code&gt;AuthenticationForm&lt;/code&gt;&lt;/a&gt; that will be used by the admin site login view.</source>
          <target state="translated">관리 사이트 로그인보기에서 사용될 &lt;a href=&quot;../../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt; &lt;code&gt;AuthenticationForm&lt;/code&gt; 의&lt;/a&gt; 서브 클래스 .</target>
        </trans-unit>
        <trans-unit id="ec350404dede323315e21592094d0f2e748f1e9b" translate="yes" xml:space="preserve">
          <source>Subclasses can override this method to perform initialization tasks such as registering signals. It is called as soon as the registry is fully populated.</source>
          <target state="translated">서브 클래스는이 메소드를 대체하여 신호 등록과 같은 초기화 태스크를 수행 할 수 있습니다. 레지스트리가 완전히 채워지면 바로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="409849940f59d8ed41a8b1565b740b8e430ff459" translate="yes" xml:space="preserve">
          <source>Subclasses inherit tags from superclasses, and methods inherit tags from their class. Given:</source>
          <target state="translated">서브 클래스는 수퍼 클래스에서 태그를 상속하고 메소드는 클래스에서 태그를 상속합니다. 주어진:</target>
        </trans-unit>
        <trans-unit id="ca2be9a5594c630d47fb4f2c94d9ca7bceb92f66" translate="yes" xml:space="preserve">
          <source>Subclasses of &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt; with stacked and tabular layouts, respectively.</source>
          <target state="translated">스택 및 테이블 레이아웃이 각각 있는 &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; 의&lt;/a&gt; 서브 클래스 .</target>
        </trans-unit>
        <trans-unit id="aaa977c146c2071b4ce342e125028f8b620e4d46" translate="yes" xml:space="preserve">
          <source>Subclasses of &lt;code&gt;UploadedFile&lt;/code&gt; include:</source>
          <target state="translated">&lt;code&gt;UploadedFile&lt;/code&gt; 의 서브 클래스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7a399f95cfb14652c6e13e8e042ddd17077f31cc" translate="yes" xml:space="preserve">
          <source>Subclassing forms</source>
          <target state="translated">서브 클래 싱 양식</target>
        </trans-unit>
        <trans-unit id="ed922813c03a5685e87c852ef9fd8374f089b6ef" translate="yes" xml:space="preserve">
          <source>Subclassing generic views</source>
          <target state="translated">일반 뷰 서브 클래 싱</target>
        </trans-unit>
        <trans-unit id="d55e035efba5af0a6b8a554cd827ae4af8fde6b4" translate="yes" xml:space="preserve">
          <source>Subclassing the &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt; class requires that you implement the &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt; 클래스를 서브 클래 싱 하려면 &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 메소드 를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0bcbc67121fea319355279cd6b26ffb2db342c49" translate="yes" xml:space="preserve">
          <source>Subclassing the built-in database backends</source>
          <target state="translated">내장 데이터베이스 백엔드 서브 클래 싱</target>
        </trans-unit>
        <trans-unit id="468cbafbc734999dafb4d52cc18cff7be6d5c802" translate="yes" xml:space="preserve">
          <source>Subdomains within a site are able to set cookies on the client for the whole domain. This makes session fixation possible if cookies are permitted from subdomains not controlled by trusted users.</source>
          <target state="translated">사이트 내의 하위 도메인은 클라이언트에서 전체 도메인에 대한 쿠키를 설정할 수 있습니다. 신뢰할 수있는 사용자가 제어하지 않는 하위 도메인에서 쿠키가 허용되는 경우 세션 수정이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="0c42d70326da53bf6f6e18301737e29bdacbf370" translate="yes" xml:space="preserve">
          <source>Subdomains within a site will be able to set cookies on the client for the whole domain. By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection. The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies). Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers.</source>
          <target state="translated">사이트 내의 하위 도메인은 클라이언트에서 전체 도메인에 대한 쿠키를 설정할 수 있습니다. 쿠키를 설정하고 해당 토큰을 사용하면 하위 도메인이 CSRF 보호를 우회 할 수 있습니다. 이를 피할 수있는 유일한 방법은 신뢰할 수있는 사용자가 하위 도메인을 제어하거나 쿠키를 설정할 수 없도록하는 것입니다. CSRF가 없어도 세션 고정과 같은 다른 취약점으로 인해 신뢰할 수없는 당사자에게 하위 도메인을 제공하는 것은 나쁜 생각이되며 이러한 취약점은 현재 브라우저로 쉽게 수정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="43a930fe006f9385062109a10f98bb67877b6896" translate="yes" xml:space="preserve">
          <source>Subject-line prefix for email messages sent with &lt;code&gt;django.core.mail.mail_admins&lt;/code&gt; or &lt;code&gt;django.core.mail.mail_managers&lt;/code&gt;. You&amp;rsquo;ll probably want to include the trailing space.</source>
          <target state="translated">함께 보낸 전자 메일 메시지의 제목 줄 접두사 &lt;code&gt;django.core.mail.mail_admins&lt;/code&gt; 또는 &lt;code&gt;django.core.mail.mail_managers&lt;/code&gt; . 후행 공백을 포함하고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="112e5633557aabe0554412178f18993f469e9d1b" translate="yes" xml:space="preserve">
          <source>Submitting a pull request.</source>
          <target state="translated">풀 요청을 제출합니다.</target>
        </trans-unit>
        <trans-unit id="7943280a77a00e447d4b61749b26ff5f2447c28a" translate="yes" xml:space="preserve">
          <source>Submitting files is a special case. To POST a file, you need only provide the file field name as a key, and a file handle to the file you wish to upload as a value. For example:</source>
          <target state="translated">파일 제출은 특별한 경우입니다. 파일을 POST하려면 파일 필드 이름을 키로 제공하고 값으로 업로드 할 파일의 파일 핸들 만 제공하면됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b4fb6812fd7c01babca42c65c2c4494d98213946" translate="yes" xml:space="preserve">
          <source>Subset of fields</source>
          <target state="translated">필드의 하위 집합</target>
        </trans-unit>
        <trans-unit id="0c0efeebd93696e01321323568fe6cd5ea45e10f" translate="yes" xml:space="preserve">
          <source>Subsets of assets</source>
          <target state="translated">자산의 하위 세트</target>
        </trans-unit>
        <trans-unit id="8256727b4c81539d429b19dfe0af74a32fcf9fb2" translate="yes" xml:space="preserve">
          <source>Substituting a custom &lt;code&gt;User&lt;/code&gt; model</source>
          <target state="translated">사용자 정의 &lt;code&gt;User&lt;/code&gt; 모델 대체</target>
        </trans-unit>
        <trans-unit id="43b529dd20b16ee9e09835fb0f297059f2a13c8a" translate="yes" xml:space="preserve">
          <source>Substring matching and case sensitivity</source>
          <target state="translated">부분 문자열 일치 및 대소 문자 구분</target>
        </trans-unit>
        <trans-unit id="f1c0370b9a90b04b716ca152c18e0f8fcf868699" translate="yes" xml:space="preserve">
          <source>Such quoted names can also be used with Django&amp;rsquo;s other supported database backends; except for Oracle, however, the quotes have no effect. See the &lt;a href=&quot;../databases#oracle-notes&quot;&gt;Oracle notes&lt;/a&gt; for more details.</source>
          <target state="translated">인용 된 이름은 Django의 다른 지원되는 데이터베이스 백엔드와 함께 사용할 수도 있습니다. 그러나 Oracle을 제외하고는 따옴표가 적용되지 않습니다. 자세한 내용은 &lt;a href=&quot;../databases#oracle-notes&quot;&gt;Oracle 노트&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="351320823415fa40986a1e879a6ec65e8b8f599d" translate="yes" xml:space="preserve">
          <source>Such values can be set in your root URLconf. Setting these variables in any other URLconf will have no effect.</source>
          <target state="translated">이러한 값은 루트 URLconf에서 설정할 수 있습니다. 다른 URLconf에서 이러한 변수를 설정해도 아무런 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dc6b73d601ef3e2b985989c69ec5e52240b57ae4" translate="yes" xml:space="preserve">
          <source>Suggest the database that should be used for read operations for objects of type &lt;code&gt;model&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; 유형의 객체에 대한 읽기 작업에 사용할 데이터베이스를 제안하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a7c037012cda74dc2316e0500df4b0164373f35" translate="yes" xml:space="preserve">
          <source>Suggest the database that should be used for writes of objects of type Model.</source>
          <target state="translated">Model 유형의 오브젝트 쓰기에 사용해야 할 데이터베이스를 제안하십시오.</target>
        </trans-unit>
        <trans-unit id="6ed816d75e1c95434823496141b81fdcea2cbda9" translate="yes" xml:space="preserve">
          <source>Summary:</source>
          <target state="translated">Summary:</target>
        </trans-unit>
        <trans-unit id="9f06efd8c7862ea5c86a8b85b5a0ee6bc97a378c" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;../../models/fields#django.db.models.SmallAutoField&quot;&gt;&lt;code&gt;SmallAutoField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.BigAutoField&quot;&gt;&lt;code&gt;BigAutoField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.SmallIntegerField&quot;&gt;&lt;code&gt;SmallIntegerField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; was added.</source>
          <target state="translated">Support for &lt;a href=&quot;../../models/fields#django.db.models.SmallAutoField&quot;&gt; &lt;code&gt;SmallAutoField&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.BigAutoField&quot;&gt; &lt;code&gt;BigAutoField&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.SmallIntegerField&quot;&gt; &lt;code&gt;SmallIntegerField&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; &lt;/a&gt; was added.</target>
        </trans-unit>
        <trans-unit id="7d72a5e69d4c257eb6181e5e9a23762b5032e8c5" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.RangeField&quot;&gt;&lt;code&gt;RangeField&lt;/code&gt;&lt;/a&gt; was added.</source>
          <target state="translated">Support for &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.RangeField&quot;&gt; &lt;code&gt;RangeField&lt;/code&gt; &lt;/a&gt; was added.</target>
        </trans-unit>
        <trans-unit id="5215d0a372761942d9420b11f95e73ea820aa464" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt; was added to the &lt;code&gt;FileSystemStorage.save()&lt;/code&gt; method.</source>
          <target state="translated">Support for &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;pathlib.Path&lt;/code&gt; &lt;/a&gt; was added to the &lt;code&gt;FileSystemStorage.save()&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="9848450458cb5c40feea2458c5eb4cf7c5176c8f" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt; was added.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;pathlib.Path&lt;/code&gt; &lt;/a&gt; 에 대한 지원 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="a9bf703bfc47555aef6e042d642d910d9c517ef9" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt;&lt;code&gt;path&lt;/code&gt; was added.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;pathlib.Path&lt;/code&gt; &lt;/a&gt; 대한 지원 &lt;code&gt;path&lt;/code&gt; 가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="4603fd8e4ae188addeb3efab4fb7f63e693f58ff" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt; was added.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; &lt;/a&gt; 에 대한 지원 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="5bda4a0b159c10056a1215103f251b0060d8ba92" translate="yes" xml:space="preserve">
          <source>Support for &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt;&lt;code&gt;content&lt;/code&gt; was added.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; &lt;/a&gt; &lt;code&gt;content&lt;/code&gt; 에 대한 지원 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="c7521078cbd379b658af074d0f5b7938c6202ded" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;'websearch'&lt;/code&gt; search type and query expressions in &lt;code&gt;SearchQuery.value&lt;/code&gt; were added.</source>
          <target state="translated">Support for &lt;code&gt;'websearch'&lt;/code&gt; search type and query expressions in &lt;code&gt;SearchQuery.value&lt;/code&gt; were added.</target>
        </trans-unit>
        <trans-unit id="e5d0baf1f5fdc2a622a66934881b52e4935c9a82" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;.bitxor()&lt;/code&gt; was added.</source>
          <target state="translated">Support for &lt;code&gt;.bitxor()&lt;/code&gt; was added.</target>
        </trans-unit>
        <trans-unit id="a206d05bd0f1154f56b420532c7d2a40a5891c00" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;distinct=True&lt;/code&gt; was added.</source>
          <target state="translated">&lt;code&gt;distinct=True&lt;/code&gt; 에 대한 지원 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="4cc6dfa4be48dabf74116a7c3586623a2e10b48f" translate="yes" xml:space="preserve">
          <source>Support for ISO 8601 date string parsing (including optional timezone) was added.</source>
          <target state="translated">Support for ISO 8601 date string parsing (including optional timezone) was added.</target>
        </trans-unit>
        <trans-unit id="3f583f36c813f3b5984dd58c4e32bb0e469ecf17" translate="yes" xml:space="preserve">
          <source>Support for XZ archives (&lt;code&gt;.tar.xz&lt;/code&gt;, &lt;code&gt;.txz&lt;/code&gt;) and LZMA archives (&lt;code&gt;.tar.lzma&lt;/code&gt;, &lt;code&gt;.tlz&lt;/code&gt;) was added.</source>
          <target state="translated">XZ 아카이브 ( &lt;code&gt;.tar.xz&lt;/code&gt; , &lt;code&gt;.txz&lt;/code&gt; ) 및 LZMA 아카이브 ( &lt;code&gt;.tar.lzma&lt;/code&gt; , &lt;code&gt;.tlz&lt;/code&gt; )에 대한 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="720a5532bb83c82319471c4a3118a691b1a21d5f" translate="yes" xml:space="preserve">
          <source>Support for async views was added.</source>
          <target state="translated">Support for async views was added.</target>
        </trans-unit>
        <trans-unit id="5be31ff675a5ee69ea382dec4ab7b181ba4ace38" translate="yes" xml:space="preserve">
          <source>Support for asynchronous requests was added to the &lt;code&gt;MiddlewareMixin&lt;/code&gt;.</source>
          <target state="translated">Support for asynchronous requests was added to the &lt;code&gt;MiddlewareMixin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="704980d755ccbecf222ba838fbca85ee13a9273c" translate="yes" xml:space="preserve">
          <source>Support for boolean &lt;a href=&quot;expressions#django.db.models.Expression&quot;&gt;&lt;code&gt;Expression&lt;/code&gt;&lt;/a&gt; was added.</source>
          <target state="translated">부울 &lt;a href=&quot;expressions#django.db.models.Expression&quot;&gt; &lt;code&gt;Expression&lt;/code&gt; &lt;/a&gt; 에 대한 지원 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="4e3e4165e576828131a28535a68c964264f18465" translate="yes" xml:space="preserve">
          <source>Support for comma separators for decimal fractions in the ISO 8601 format and for the format &lt;code&gt;&quot;DD HH:MM:SS,uuuuuu&quot;&lt;/code&gt; was added.</source>
          <target state="translated">Support for comma separators for decimal fractions in the ISO 8601 format and for the format &lt;code&gt;&quot;DD HH:MM:SS,uuuuuu&quot;&lt;/code&gt; was added.</target>
        </trans-unit>
        <trans-unit id="2aee3dcc44a2e2275706ce09454081fc81c0474b" translate="yes" xml:space="preserve">
          <source>Support for comma separators for milliseconds was added.</source>
          <target state="translated">Support for comma separators for milliseconds was added.</target>
        </trans-unit>
        <trans-unit id="e8ee9bdac5921499c4a394030c41ffd3312c5030" translate="yes" xml:space="preserve">
          <source>Support for foreign tables and materialized views was added.</source>
          <target state="translated">외래 테이블 및 구체화 된 뷰에 대한 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="2bf9d10097cb7af7bfd464554325eafd3399e77a" translate="yes" xml:space="preserve">
          <source>Support for iterables of template names was added.</source>
          <target state="translated">Support for iterables of template names was added.</target>
        </trans-unit>
        <trans-unit id="ac4123436c5a85d234e5dd971dc1495d3ca2c577" translate="yes" xml:space="preserve">
          <source>Support for iterating over &lt;code&gt;Paginator&lt;/code&gt; was added.</source>
          <target state="translated">Support for iterating over &lt;code&gt;Paginator&lt;/code&gt; was added.</target>
        </trans-unit>
        <trans-unit id="2ed202a5e38310e8d01322d85eca3458b1995133" translate="yes" xml:space="preserve">
          <source>Support for lookups using underscores was added.</source>
          <target state="translated">밑줄을 사용한 조회 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="500e2c503298701af3f81a2d6a28faa5f319f592" translate="yes" xml:space="preserve">
          <source>Support for multiple field names in the &lt;code&gt;no-cache&lt;/code&gt; directive was added.</source>
          <target state="translated">Support for multiple field names in the &lt;code&gt;no-cache&lt;/code&gt; directive was added.</target>
        </trans-unit>
        <trans-unit id="9c969caa1b22c01fea2e5586d96ce33da005a674" translate="yes" xml:space="preserve">
          <source>Support for negative integers was added.</source>
          <target state="translated">Support for negative integers was added.</target>
        </trans-unit>
        <trans-unit id="c8ca7eda9b556742d5dd8ff5bdfcc513af556c8a" translate="yes" xml:space="preserve">
          <source>Support for query expressions was added.</source>
          <target state="translated">Support for query expressions was added.</target>
        </trans-unit>
        <trans-unit id="c87d5b920556335c42c045aaf3845bd6e91f6c51" translate="yes" xml:space="preserve">
          <source>Support for raising &lt;code&gt;ValueError&lt;/code&gt; to indicate no match was added.</source>
          <target state="translated">Support for raising &lt;code&gt;ValueError&lt;/code&gt; to indicate no match was added.</target>
        </trans-unit>
        <trans-unit id="1339102540db71df212442f1ca38a1006f890c34" translate="yes" xml:space="preserve">
          <source>Support for result streaming on SQLite was added.</source>
          <target state="translated">SQLite에서 결과 스트리밍에 대한 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="4d608e6c62c528f19f377e69aeccc67385f59ec4" translate="yes" xml:space="preserve">
          <source>Support for spatial functions operating on real geometries was added.</source>
          <target state="translated">실제 형상에서 작동하는 공간 기능에 대한 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="e81f78b6f449055d90229a296946393c606b9703" translate="yes" xml:space="preserve">
          <source>Support for template engines</source>
          <target state="translated">템플릿 엔진 지원</target>
        </trans-unit>
        <trans-unit id="ab63f538629225ce40f7d7128bf5d9202158484e" translate="yes" xml:space="preserve">
          <source>Support for the &lt;code&gt;'TREE'&lt;/code&gt; format on MySQL 8.0.16+ and &lt;code&gt;analyze&lt;/code&gt; option on MariaDB and MySQL 8.0.18+ were added.</source>
          <target state="translated">Support for the &lt;code&gt;'TREE'&lt;/code&gt; format on MySQL 8.0.16+ and &lt;code&gt;analyze&lt;/code&gt; option on MariaDB and MySQL 8.0.18+ were added.</target>
        </trans-unit>
        <trans-unit id="35ae6e41bfe9903b21210702c0442e71fd2624f6" translate="yes" xml:space="preserve">
          <source>Support for the fetching primary key attributes on MariaDB 10.5+ was added.</source>
          <target state="translated">Support for the fetching primary key attributes on MariaDB 10.5+ was added.</target>
        </trans-unit>
        <trans-unit id="27cb2500c403fd473b374e87a1641b025be1072f" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt; and &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; environment variables was added.</source>
          <target state="translated">&lt;code&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt; 및 &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; 환경 변수 사용에 대한 지원 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="27688c5327abb2b73ea437b43fa29c356a128ee7" translate="yes" xml:space="preserve">
          <source>Supported Versions</source>
          <target state="translated">지원되는 버전</target>
        </trans-unit>
        <trans-unit id="3bc57d2f52439e55baace17d6c6a93606a82454c" translate="yes" xml:space="preserve">
          <source>Supported arithmetic</source>
          <target state="translated">지원되는 산술</target>
        </trans-unit>
        <trans-unit id="b115db32505ae0ddc8de5c0903011b4132418629" translate="yes" xml:space="preserve">
          <source>Supported by the &lt;a href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;PostgreSQL&lt;/a&gt; (&lt;code&gt;postgresql&lt;/code&gt;) and &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-charsets.html&quot;&gt;MySQL&lt;/a&gt; (&lt;code&gt;mysql&lt;/code&gt;) backends.</source>
          <target state="translated">에 의해 지원되는 &lt;a href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;PostgreSQL의&lt;/a&gt; ( &lt;code&gt;postgresql&lt;/code&gt; ) 및 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-charsets.html&quot;&gt;MySQL을&lt;/a&gt; ( &lt;code&gt;mysql&lt;/code&gt; ) 백엔드.</target>
        </trans-unit>
        <trans-unit id="7acd741312970e521a1a939cb8b7d591ee9a9233" translate="yes" xml:space="preserve">
          <source>Supported units</source>
          <target state="translated">지원되는 단위</target>
        </trans-unit>
        <trans-unit id="4a98e56c9beb231c7293acbc09df596c4291da6e" translate="yes" xml:space="preserve">
          <source>Supporting multiple Django versions</source>
          <target state="translated">여러 장고 버전 지원</target>
        </trans-unit>
        <trans-unit id="687b4e67fa6a60b5c3ea388a9c2f304d1d874599" translate="yes" xml:space="preserve">
          <source>Supporting other HTTP methods</source>
          <target state="translated">다른 HTTP 메소드 지원</target>
        </trans-unit>
        <trans-unit id="3cbfd1d44320b9ad6da14e0f21c3ff11cba7de09" translate="yes" xml:space="preserve">
          <source>Supports arbitrary Python objects, but, as described above, can lead to a remote code execution vulnerability if &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; becomes known by an attacker.</source>
          <target state="translated">임의의 Python 객체를 지원하지만 위에서 설명한 것처럼 공격자가 &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; 를 알게&lt;/a&gt; 되면 원격 코드 실행 취약점이 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56da4ebdd2d382907acc67f7a1adf557d5e94cc1" translate="yes" xml:space="preserve">
          <source>Suppose an online store has a page where a logged in user can click &amp;ldquo;Buy Now&amp;rdquo; to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an &amp;ldquo;I Like Ponies&amp;rdquo; button on one of their own pages, and load the store&amp;rsquo;s page in a transparent iframe such that the &amp;ldquo;Buy Now&amp;rdquo; button is invisibly overlaid on the &amp;ldquo;I Like Ponies&amp;rdquo; button. If the user visits the attacker&amp;rsquo;s site, clicking &amp;ldquo;I Like Ponies&amp;rdquo; will cause an inadvertent click on the &amp;ldquo;Buy Now&amp;rdquo; button and an unknowing purchase of the item.</source>
          <target state="translated">온라인 상점에 로그인 한 사용자가 &quot;지금 구입&quot;을 클릭하여 항목을 구입할 수있는 페이지가 있다고 가정하십시오. 사용자는 편의를 위해 항상 상점에 로그인 상태를 유지하기로 선택했습니다. 공격자 사이트는 자신의 페이지 중 하나에 &quot;I Like Ponies&quot;버튼을 만들고 &quot;Buy Now&quot;버튼이 &quot;I Like Ponies&quot;버튼에 보이지 않게 투명 iframe에 상점 페이지를로드 할 수 있습니다. 사용자가 공격자의 사이트를 방문하는 경우 &quot;포니를 좋아합니다&quot;를 클릭하면 &quot;지금 구매&quot;버튼을 실수로 클릭하고 알 수없는 항목 구매가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="91d53f6916ad3f530795e0ddf3f219a32b3b3e6c" translate="yes" xml:space="preserve">
          <source>Suppose somebody wants to access our book library over HTTP using the views as an API. The API client would connect every now and then and download book data for the books published since last visit. But if no new books appeared since then, it is a waste of CPU time and bandwidth to fetch the books from the database, render a full response and send it to the client. It might be preferable to ask the API when the most recent book was published.</source>
          <target state="translated">누군가 뷰를 API로 사용하여 HTTP를 통해 책 라이브러리에 액세스하려고한다고 가정 해 봅시다. API 클라이언트는 지금 연결 한 다음 마지막 방문 이후 게시 된 서적에 대한 서적 데이터를 다운로드합니다. 그러나 그 이후로 새로운 책이 나타나지 않으면 데이터베이스에서 책을 가져와 전체 응답을 렌더링하여 클라이언트에게 보내는 것은 CPU 시간과 대역폭을 낭비하는 것입니다. 가장 최근에 출판 된 책을 API에 요청하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b6ba09f6a9abc8fab10e50155241dfe9e94d114e" translate="yes" xml:space="preserve">
          <source>Suppose there is only one blog that had both entries containing &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; and entries from 2008, but that none of the entries from 2008 contained &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt;. The first query would not return any blogs, but the second query would return that one blog.</source>
          <target state="translated">이 모두 포함 된 항목이 있었다 하나의 블로그 가정 &lt;em&gt;&quot;레논을&quot;&lt;/em&gt; 2008 년과 항목이 있지만, 2008 항목의 것도 포함하지 &lt;em&gt;&quot;레논을&quot;&lt;/em&gt; . 첫 번째 쿼리는 블로그를 반환하지 않지만 두 번째 쿼리는 해당 블로그를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e01c1bd98cbad17b9e751a239ba2a890d43c3da2" translate="yes" xml:space="preserve">
          <source>Suppose we add another requirement to our contact form: if the &lt;code&gt;cc_myself&lt;/code&gt; field is &lt;code&gt;True&lt;/code&gt;, the &lt;code&gt;subject&lt;/code&gt; must contain the word &lt;code&gt;&quot;help&quot;&lt;/code&gt;. We are performing validation on more than one field at a time, so the form&amp;rsquo;s &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;clean()&lt;/code&gt;&lt;/a&gt; method is a good spot to do this. Notice that we are talking about the &lt;code&gt;clean()&lt;/code&gt; method on the form here, whereas earlier we were writing a &lt;code&gt;clean()&lt;/code&gt; method on a field. It&amp;rsquo;s important to keep the field and form difference clear when working out where to validate things. Fields are single data points, forms are a collection of fields.</source>
          <target state="translated">우리는 우리의 문의 양식에 다른 요구 사항을 추가한다고 가정하십시오 경우 &lt;code&gt;cc_myself&lt;/code&gt; 의 필드가 &lt;code&gt;True&lt;/code&gt; 의 &lt;code&gt;subject&lt;/code&gt; 단어를 포함해야한다 &lt;code&gt;&quot;help&quot;&lt;/code&gt; . 한 번에 두 개 이상의 필드에 대해 유효성 검사를 수행하고 있으므로 양식의 &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt; &lt;code&gt;clean()&lt;/code&gt; &lt;/a&gt; 메소드가이를 수행하기에 좋은 위치입니다. 여기서는 form에서 &lt;code&gt;clean()&lt;/code&gt; 메소드에 대해 이야기하고 있지만, 이전 에는 필드에서 &lt;code&gt;clean()&lt;/code&gt; 메소드를 작성했습니다 . 사물을 검증 할 위치를 결정할 때 필드를 유지하고 차이를 명확하게 유지하는 것이 중요합니다. 필드는 단일 데이터 포인트이고 양식은 필드의 모음입니다.</target>
        </trans-unit>
        <trans-unit id="0cc928eeefb324a7e3109ea15428221b799b26b5" translate="yes" xml:space="preserve">
          <source>Suppose we have the following models:</source>
          <target state="translated">다음 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="5d28bd5e458f4fc4b481360c8060508c95dab2f7" translate="yes" xml:space="preserve">
          <source>Suppose you have a model with fields &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;biography&lt;/code&gt;. The following two querysets are the same, in terms of deferred fields:</source>
          <target state="translated">필드 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; 및 &lt;code&gt;biography&lt;/code&gt; 가있는 모델이 있다고 가정하십시오 . 다음 두 쿼리 세트는 지연된 필드 측면에서 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a46407ba998152b94352cb74fcd3d95c0fd34b4f" translate="yes" xml:space="preserve">
          <source>Suppose you want to create a simple form on your website, in order to obtain the user&amp;rsquo;s name. You&amp;rsquo;d need something like this in your template:</source>
          <target state="translated">사용자 이름을 얻기 위해 웹 사이트에서 간단한 양식을 작성한다고 가정하십시오. 템플릿에 다음과 같은 것이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5ae86ce9c555b820767bdbe11b09caabe5b466aa" translate="yes" xml:space="preserve">
          <source>Suppresses all user prompts.</source>
          <target state="translated">모든 사용자 프롬프트를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ef93342aeaf01b703522c1350c01c4fb9f8959c8" translate="yes" xml:space="preserve">
          <source>Suppresses all user prompts. A typical prompt is a warning about deleting an existing test database.</source>
          <target state="translated">모든 사용자 프롬프트를 표시하지 않습니다. 일반적인 프롬프트는 기존 테스트 데이터베이스 삭제에 대한 경고입니다.</target>
        </trans-unit>
        <trans-unit id="b525332492769ffca01746b65e231df41abb2136" translate="yes" xml:space="preserve">
          <source>Suppresses all user prompts. An example prompt is asking about removing stale content types.</source>
          <target state="translated">모든 사용자 프롬프트를 표시하지 않습니다. 오래된 프롬프트 유형을 제거하라는 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="eebf312595aa5fa3dc78321993514dd4d7680393" translate="yes" xml:space="preserve">
          <source>Suppresses all user prompts. If a suppressed prompt cannot be resolved automatically, the command will exit with error code 1.</source>
          <target state="translated">모든 사용자 프롬프트를 표시하지 않습니다. 억제 된 프롬프트를 자동으로 해결할 수 없으면 명령이 오류 코드 1과 함께 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="928ad51e23b59101e44e31f76917df83badad38b" translate="yes" xml:space="preserve">
          <source>Suppresses all user prompts. If a suppressed prompt cannot be resolved automatically, the command will exit with error code 3.</source>
          <target state="translated">모든 사용자 프롬프트를 표시하지 않습니다. 억제 된 프롬프트를 자동으로 해결할 수 없으면 명령이 오류 코드 3과 함께 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="06f17570fb14c4f5cd50be20ab61869fc4b72522" translate="yes" xml:space="preserve">
          <source>Suppresses the &lt;code&gt;from django.contrib.gis.db import models&lt;/code&gt; import statement.</source>
          <target state="translated">&lt;code&gt;from django.contrib.gis.db import models&lt;/code&gt; 가져 오기 명령문을 억제합니다 .</target>
        </trans-unit>
        <trans-unit id="6fe7d55e7b6b312edd8850a405798196f79b8e4c" translate="yes" xml:space="preserve">
          <source>Suppresses writing &amp;lsquo;&lt;code&gt;#: filename:line&lt;/code&gt;&amp;rsquo; comment lines in language files. Using this option makes it harder for technically skilled translators to understand each message&amp;rsquo;s context.</source>
          <target state="translated">언어 파일에 ' &lt;code&gt;#: filename:line&lt;/code&gt; '주석 줄을 쓰지 않습니다 . 이 옵션을 사용하면 기술적으로 숙련 된 번역가가 각 메시지의 컨텍스트를 이해하기 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="9a4bdcd9c81927fdbcfdf37ea974fafdcd6320d5" translate="yes" xml:space="preserve">
          <source>Switching language in templates</source>
          <target state="translated">템플릿에서 언어 전환</target>
        </trans-unit>
        <trans-unit id="50109e8663c4559272b873c515087a9b7e816ee9" translate="yes" xml:space="preserve">
          <source>Switching to another database backend. At a certain point SQLite becomes too &amp;ldquo;lite&amp;rdquo; for real-world applications, and these sorts of concurrency errors indicate you&amp;rsquo;ve reached that point.</source>
          <target state="translated">다른 데이터베이스 백엔드로 전환 특정 시점에서 SQLite는 실제 응용 프로그램에 대해 너무&amp;ldquo;조명&amp;rdquo;해지 며 이러한 종류의 동시성 오류는 해당 지점에 도달했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2379d0a4e286f32090f139f1c2d5d244f32bf44a" translate="yes" xml:space="preserve">
          <source>Switzerland (German)</source>
          <target state="translated">스위스 (독일어)</target>
        </trans-unit>
        <trans-unit id="ec8d7db43aeddf9ec631edd2c6a8c1dcb701b9c0" translate="yes" xml:space="preserve">
          <source>Sync functions tend to be written assuming they all run in the main thread, so &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt; has two threading modes:</source>
          <target state="translated">Sync functions tend to be written assuming they all run in the main thread, so &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt; has two threading modes:</target>
        </trans-unit>
        <trans-unit id="00065594c7228bd19c1b7ee623c8e3ce49c2ffa0" translate="yes" xml:space="preserve">
          <source>Synchronizes the database state with the current set of models and migrations. Migrations, their relationship with apps and more are covered in depth in &lt;a href=&quot;../topics/migrations&quot;&gt;the migrations documentation&lt;/a&gt;.</source>
          <target state="translated">데이터베이스 모델을 현재 모델 및 마이그레이션 세트와 동기화합니다. 마이그레이션, 앱과의 관계 등 &lt;a href=&quot;../topics/migrations&quot;&gt;은 마이그레이션 설명서&lt;/a&gt; 에서 자세히 다룹니다 .</target>
        </trans-unit>
        <trans-unit id="38a8010f64d5599164ae371796a865cce9ca670f" translate="yes" xml:space="preserve">
          <source>Synchronizing your databases</source>
          <target state="translated">데이터베이스 동기화</target>
        </trans-unit>
        <trans-unit id="175d4ce98df6f28483bb30a64e8ebbeebb41943d" translate="yes" xml:space="preserve">
          <source>Syndication feeds (RSS/Atom)</source>
          <target state="translated">신디케이션 피드 (RSS / Atom)</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="e9ffe4e6d9f053f0a17fa96bbf4ba07178030465" translate="yes" xml:space="preserve">
          <source>Syntax coloring</source>
          <target state="translated">구문 채색</target>
        </trans-unit>
        <trans-unit id="f3f6f77ce0df4f07a260813db5935a76e8cae2d4" translate="yes" xml:space="preserve">
          <source>Syntax of the &lt;code&gt;urlpatterns&lt;/code&gt; variable</source>
          <target state="translated">&lt;code&gt;urlpatterns&lt;/code&gt; 변수의 구문</target>
        </trans-unit>
        <trans-unit id="aa98ba039441a09bbd5eacca40ae266b04b91ccd" translate="yes" xml:space="preserve">
          <source>System check framework</source>
          <target state="translated">시스템 점검 프레임 워크</target>
        </trans-unit>
        <trans-unit id="cdcf532ac8bec837e8835ecab27f3cd87f17d118" translate="yes" xml:space="preserve">
          <source>TEMPLATES</source>
          <target state="translated">TEMPLATES</target>
        </trans-unit>
        <trans-unit id="8e2aa60817a7263a0b4974318b101f20823f482e" translate="yes" xml:space="preserve">
          <source>Table name quoting for Oracle</source>
          <target state="translated">Oracle에 대한 테이블 이름 인용</target>
        </trans-unit>
        <trans-unit id="b76d55fc89e815be76269a01255c85581f68714c" translate="yes" xml:space="preserve">
          <source>Table names</source>
          <target state="translated">테이블 이름</target>
        </trans-unit>
        <trans-unit id="b1f3f5d18e18715cfca8bf0aaef8d2d81fdf3063" translate="yes" xml:space="preserve">
          <source>Table names are automatically generated by combining the name of the app (&lt;code&gt;polls&lt;/code&gt;) and the lowercase name of the model &amp;ndash; &lt;code&gt;question&lt;/code&gt; and &lt;code&gt;choice&lt;/code&gt;. (You can override this behavior.)</source>
          <target state="translated">테이블 이름은 앱 이름 ( &lt;code&gt;polls&lt;/code&gt; )과 모델의 소문자 이름 ( &lt;code&gt;question&lt;/code&gt; 및 &lt;code&gt;choice&lt;/code&gt; ) 을 결합하여 자동으로 생성됩니다 . 이 동작을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff5b9ddf2dd81525ac5b0fb5fcd732fc5c174692" translate="yes" xml:space="preserve">
          <source>Tablespaces</source>
          <target state="translated">Tablespaces</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="f7fe4cb5179d77ce0ec4f4db1fa1fab652691e69" translate="yes" xml:space="preserve">
          <source>Tagging tests</source>
          <target state="translated">태깅 테스트</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="7c3bfddeb3549c2531c880fed0b852bebd802527" translate="yes" xml:space="preserve">
          <source>Tags and filters from built-in libraries can be used without first calling the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt; 태그 를 먼저 호출하지 않고도 내장 라이브러리의 태그 및 필터를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d4d3be07ce9fd4a171e28067e2660cb089ff5e5" translate="yes" xml:space="preserve">
          <source>Tags and filters from built-in libraries can be used without first calling the &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">&lt;a href=&quot;builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt; 태그 를 먼저 호출하지 않고도 내장 라이브러리의 태그 및 필터를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0cf8e113e4c51396f927e3d31dbb96dcc5b9ef76" translate="yes" xml:space="preserve">
          <source>Tags are more complex than filters, because tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. First we&amp;rsquo;ll explore those shortcuts, then explain how to write a tag from scratch for those cases when the shortcuts aren&amp;rsquo;t powerful enough.</source>
          <target state="translated">태그는 무엇이든 할 수 있기 때문에 태그는 필터보다 복잡합니다. Django는 대부분의 유형의 태그를보다 쉽게 ​​작성할 수있는 여러 가지 단축키를 제공합니다. 먼저 바로 가기를 살펴본 다음 바로 가기가 충분히 강력하지 않은 경우 태그를 처음부터 작성하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="ed1e439784d27f3c08c2bef976fea5a0afd4e4da" translate="yes" xml:space="preserve">
          <source>Tags are surrounded by &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt; like this:</source>
          <target state="translated">태그는 다음과 같이 &lt;code&gt;{%&lt;/code&gt; 및 &lt;code&gt;%}&lt;/code&gt; 로 둘러싸여 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac5d91c5febf69739b24c08f67bad4993c7c13d0" translate="yes" xml:space="preserve">
          <source>Tags look like this: &lt;code&gt;{% tag %}&lt;/code&gt;. Tags are more complex than variables: Some create text in the output, some control flow by performing loops or logic, and some load external information into the template to be used by later variables.</source>
          <target state="translated">태그는 &lt;code&gt;{% tag %}&lt;/code&gt; 와 같습니다 . 태그는 변수보다 더 복잡합니다. 일부는 출력에서 ​​텍스트를 생성하고 일부는 루프 또는 논리를 수행하여 제어 흐름을 생성하며 일부는 외부 변수를 템플릿에로드하여 이후 변수에서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dc90860252a4e1f64d21cd685b1c5f06893b7a4b" translate="yes" xml:space="preserve">
          <source>Tags provide arbitrary logic in the rendering process.</source>
          <target state="translated">태그는 렌더링 프로세스에서 임의의 논리를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b87cf5eff2f4f56cec19fc3303368fa96684ba61" translate="yes" xml:space="preserve">
          <source>Take a look at &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt;. This tool provides isolated Python environments, which are more practical than installing packages systemwide. It also allows installing packages without administrator privileges. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtual environment.</source>
          <target state="translated">Take a look at &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt;. This tool provides isolated Python environments, which are more practical than installing packages systemwide. It also allows installing packages without administrator privileges. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtual environment.</target>
        </trans-unit>
        <trans-unit id="b65d13c8fdc902282ebd08b7480b7e90e1642741" translate="yes" xml:space="preserve">
          <source>Take a look at &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; and &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;. These tools provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtualenv.</source>
          <target state="translated">&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; 및 &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper를&lt;/a&gt; 살펴보십시오 . 이 도구는 시스템 전체에 패키지를 설치하는 것보다 실용적인 격리 된 Python 환경을 제공합니다. 또한 관리자 권한없이 패키지를 설치할 수 있습니다. &lt;a href=&quot;../intro/contributing&quot;&gt;기여 튜토리얼&lt;/a&gt; VIRTUALENV를 만드는 방법을 통해 안내합니다.</target>
        </trans-unit>
        <trans-unit id="eef266a5e0785b16e209941ce7a2619f358aedac" translate="yes" xml:space="preserve">
          <source>Take a look at the Open Web Application Security Project (OWASP) &lt;a href=&quot;https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/&quot;&gt;Top 10 list&lt;/a&gt; which identifies some common vulnerabilities in web applications. While Django has tools to address some of the issues, other issues must be accounted for in the design of your project.</source>
          <target state="translated">Take a look at the Open Web Application Security Project (OWASP) &lt;a href=&quot;https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/&quot;&gt;Top 10 list&lt;/a&gt; which identifies some common vulnerabilities in web applications. While Django has tools to address some of the issues, other issues must be accounted for in the design of your project.</target>
        </trans-unit>
        <trans-unit id="a4faec5f0e219f4fc22e2e2f7caf14dc2730bd45" translate="yes" xml:space="preserve">
          <source>Take a look at the Open Web Application Security Project (OWASP) &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_Top_10&quot;&gt;Top 10 list&lt;/a&gt; which identifies some common vulnerabilities in web applications. While Django has tools to address some of the issues, other issues must be accounted for in the design of your project.</source>
          <target state="translated">웹 애플리케이션의 몇 가지 일반적인 취약점을 식별하는 OWASP (Open Web Application Security Project) &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_Top_10&quot;&gt;Top 10 목록&lt;/a&gt; 을 살펴보십시오 . Django에는 일부 문제를 해결할 수있는 도구가 있지만 프로젝트 설계시 다른 문제를 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="0b6294a1321c911bfb38483cba894223ac9e435c" translate="yes" xml:space="preserve">
          <source>Take a look in your browser, at &amp;ldquo;/polls/34/&amp;rdquo;. It&amp;rsquo;ll run the &lt;code&gt;detail()&lt;/code&gt; method and display whatever ID you provide in the URL. Try &amp;ldquo;/polls/34/results/&amp;rdquo; and &amp;ldquo;/polls/34/vote/&amp;rdquo; too &amp;ndash; these will display the placeholder results and voting pages.</source>
          <target state="translated">&amp;ldquo;/ polls / 34 /&amp;rdquo;에서 브라우저를 살펴보십시오. &lt;code&gt;detail()&lt;/code&gt; 메소드를 실행 하고 URL에 제공 한 ID를 표시합니다. &amp;ldquo;/ polls / 34 / results /&amp;rdquo;및&amp;ldquo;/ polls / 34 / vote /&amp;rdquo;도 시도하십시오. 그러면 자리 표시 자 결과 및 투표 페이지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8d019029719dc60edf4660a8b6eb87c5b5912ddf" translate="yes" xml:space="preserve">
          <source>Take care with any &lt;a href=&quot;../ref/models/fields#file-upload-security&quot;&gt;user uploaded files&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#file-upload-security&quot;&gt;사용자가 업로드 한 파일에&lt;/a&gt; 주의 하십시오 .</target>
        </trans-unit>
        <trans-unit id="191fc7c119ac28233aad3cc77d7c63f0416f8009" translate="yes" xml:space="preserve">
          <source>Take no action. If your database backend enforces referential integrity, this will cause an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; unless you manually add an SQL &lt;code&gt;ON DELETE&lt;/code&gt; constraint to the database field.</source>
          <target state="translated">아무 조치도 취하지 마십시오. 데이터베이스 백엔드가 참조 무결성을 시행 하는 경우 데이터베이스 필드에 SQL &lt;code&gt;ON DELETE&lt;/code&gt; 제한 조건을 수동으로 추가하지 않으면 &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="f66262efd388801bee844148c0ce1d9b7a3e60b3" translate="yes" xml:space="preserve">
          <source>Take the following examples:</source>
          <target state="translated">다음 예를 보자.</target>
        </trans-unit>
        <trans-unit id="b94d65a923911eebf16ede6b0fef0fa3840270cd" translate="yes" xml:space="preserve">
          <source>Taken together, these views provide interfaces to perform the most common tasks developers encounter.</source>
          <target state="translated">종합하면,이 뷰는 개발자가 겪는 가장 일반적인 작업을 수행하기위한 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ebe10636e4e70a5eb624d50bcf55958f7401fe06" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;request&lt;/code&gt; as its first positional argument, which is stored on the form instance for use by sub-classes.</source>
          <target state="translated">취하고 &lt;code&gt;request&lt;/code&gt; 서브 클래스를 위해서 폼 인스턴스에 저장된 그것의 제 1 위치 인수 등을.</target>
        </trans-unit>
        <trans-unit id="cdf8f600e1883c0bd723b884b10c6801c5305d85" translate="yes" xml:space="preserve">
          <source>Takes a URI in ASCII bytes and returns a string containing the encoded result.</source>
          <target state="translated">ASCII 바이트로 된 URI를 가져 와서 인코딩 된 결과를 포함하는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="45c05e38a3969bc67faad8c6d523e7e1f9e517f3" translate="yes" xml:space="preserve">
          <source>Takes a list of dictionaries and returns that list sorted by the key given in the argument.</source>
          <target state="translated">사전 목록을 가져와 인수에 제공된 키를 기준으로 정렬 된 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4fcc46eddee03c18098e6d160eca2f8008c60b1a" translate="yes" xml:space="preserve">
          <source>Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order.</source>
          <target state="translated">사전 목록을 가져와 인수에 제공된 키를 기준으로 역순으로 정렬 된 목록을 리턴합니다. 이것은 위의 필터와 동일하게 작동하지만 반환 된 값은 역순입니다.</target>
        </trans-unit>
        <trans-unit id="4fbbaede70e8d2c6ed298781e7dad342da2445f6" translate="yes" xml:space="preserve">
          <source>Takes a list of expressions and stores them such that &lt;code&gt;get_source_expressions()&lt;/code&gt; can return them.</source>
          <target state="translated">&lt;code&gt;get_source_expressions()&lt;/code&gt; 가 표현식 을 리턴 할 수 있도록 표현식 목록을 가져 와서 저장 합니다.</target>
        </trans-unit>
        <trans-unit id="0772fc4149778cd71fa4898784aa9e5cf303f431" translate="yes" xml:space="preserve">
          <source>Takes a list of field values (&lt;code&gt;id_list&lt;/code&gt;) and the &lt;code&gt;field_name&lt;/code&gt; for those values, and returns a dictionary mapping each value to an instance of the object with the given field value. If &lt;code&gt;id_list&lt;/code&gt; isn&amp;rsquo;t provided, all objects in the queryset are returned. &lt;code&gt;field_name&lt;/code&gt; must be a unique field, and it defaults to the primary key.</source>
          <target state="translated">필드 값 목록 ( &lt;code&gt;id_list&lt;/code&gt; ) 및 해당 값에 대한 &lt;code&gt;field_name&lt;/code&gt; 을 가져 와서 각 필드 값을 제공된 필드 값을 가진 오브젝트의 인스턴스에 맵핑하는 사전을 리턴합니다. &lt;code&gt;id_list&lt;/code&gt; 를 제공하지 않으면 쿼리 세트의 모든 객체가 반환됩니다. &lt;code&gt;field_name&lt;/code&gt; 은 고유 필드 여야하며 기본 키는 기본 키입니다.</target>
        </trans-unit>
        <trans-unit id="0d008c0090616a0ba91686c3c083c7576d94eac1" translate="yes" xml:space="preserve">
          <source>Takes a list of valid values and returns a &amp;ldquo;compressed&amp;rdquo; version of those values &amp;ndash; in a single value. For example, &lt;a href=&quot;#django.forms.SplitDateTimeField&quot;&gt;&lt;code&gt;SplitDateTimeField&lt;/code&gt;&lt;/a&gt; is a subclass which combines a time field and a date field into a &lt;code&gt;datetime&lt;/code&gt; object.</source>
          <target state="translated">유효한 값 목록을 가져 와서 해당 값의 &quot;압축 된&quot;버전을 단일 값으로 반환합니다. 예를 들어 &lt;a href=&quot;#django.forms.SplitDateTimeField&quot;&gt; &lt;code&gt;SplitDateTimeField&lt;/code&gt; &lt;/a&gt; 는 시간 필드와 날짜 필드를 &lt;code&gt;datetime&lt;/code&gt; 객체 로 결합하는 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="7419d8c59a8aced5be5a7d4acd033a9525bd7452" translate="yes" xml:space="preserve">
          <source>Takes a raw SQL query, executes it, and returns a &lt;code&gt;django.db.models.query.RawQuerySet&lt;/code&gt; instance. This &lt;code&gt;RawQuerySet&lt;/code&gt; instance can be iterated over just like a normal &lt;code&gt;QuerySet&lt;/code&gt; to provide object instances.</source>
          <target state="translated">원시 SQL 쿼리를 가져 와서 실행하고 &lt;code&gt;django.db.models.query.RawQuerySet&lt;/code&gt; 인스턴스를 반환 합니다. 이 &lt;code&gt;RawQuerySet&lt;/code&gt; 인스턴스는 일반 &lt;code&gt;QuerySet&lt;/code&gt; 처럼 반복되어 객체 인스턴스를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5d019ff8451d64f492cbb17f3d499a07d7b1d22" translate="yes" xml:space="preserve">
          <source>Takes a set of valid &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;lookup arguments&lt;/a&gt; for the model the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; represents, and does &lt;a href=&quot;../models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;a get() lookup&lt;/code&gt;&lt;/a&gt; on that model, returning the corresponding object.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 이&lt;/a&gt; 나타내는 모델에 대해 유효한 &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;조회 인수&lt;/a&gt; 세트를 &lt;a href=&quot;../models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;a get() lookup&lt;/code&gt; &lt;/a&gt; 오고 해당 모델에서 get () 조회 를 수행하여 해당 오브젝트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="6643458700ae6aef4b4449b082a1e8d9f73c821e" translate="yes" xml:space="preserve">
          <source>Takes a single &amp;ldquo;compressed&amp;rdquo; value of a field, for example a &lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt;&lt;code&gt;DateRangeField&lt;/code&gt;&lt;/a&gt;, and returns a tuple representing a lower and upper bound.</source>
          <target state="translated">Takes a single &amp;ldquo;compressed&amp;rdquo; value of a field, for example a &lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt; &lt;code&gt;DateRangeField&lt;/code&gt; &lt;/a&gt;, and returns a tuple representing a lower and upper bound.</target>
        </trans-unit>
        <trans-unit id="c142e1735e7935ff6dddc231c2aafe4d90365183" translate="yes" xml:space="preserve">
          <source>Takes a single &amp;ldquo;compressed&amp;rdquo; value of a field, for example a &lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt;&lt;code&gt;DateRangeField&lt;/code&gt;&lt;/a&gt;, and returns a tuple representing and lower and upper bound.</source>
          <target state="translated">필드의 단일 &quot;압축 된&quot;값 (예 : &lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt; &lt;code&gt;DateRangeField&lt;/code&gt; &lt;/a&gt; )을 가져오고 하한 및 상한을 나타내는 튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="752c4fd591d271a39a480a0838d69e5be216f9e8" translate="yes" xml:space="preserve">
          <source>Takes a sync function and returns an async function that wraps it. Can be used as either a direct wrapper or a decorator:</source>
          <target state="translated">Takes a sync function and returns an async function that wraps it. Can be used as either a direct wrapper or a decorator:</target>
        </trans-unit>
        <trans-unit id="30ed7078b176cb4bea35270c3a1eefa335556b3b" translate="yes" xml:space="preserve">
          <source>Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instances representing them. &lt;code&gt;for_concrete_models=False&lt;/code&gt; allows fetching the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; of proxy models.</source>
          <target state="translated">가변적 인 수의 모델 클래스를 가져와 모델 클래스를 나타내는 클래스를 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 인스턴스에 매핑하는 사전을 반환 합니다. &lt;code&gt;for_concrete_models=False&lt;/code&gt; 는 프록시 모델 의 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 을 가져올 수있게 합니다.</target>
        </trans-unit>
        <trans-unit id="505a3fd6681ea65d8ffba8c7322b5d052e91991a" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;expression&lt;/code&gt; representing a &lt;code&gt;DateField&lt;/code&gt;, &lt;code&gt;DateTimeField&lt;/code&gt;, &lt;code&gt;TimeField&lt;/code&gt;, or &lt;code&gt;DurationField&lt;/code&gt; and a &lt;code&gt;lookup_name&lt;/code&gt;, and returns the part of the date referenced by &lt;code&gt;lookup_name&lt;/code&gt; as an &lt;code&gt;IntegerField&lt;/code&gt;. Django usually uses the databases&amp;rsquo; extract function, so you may use any &lt;code&gt;lookup_name&lt;/code&gt; that your database supports. A &lt;code&gt;tzinfo&lt;/code&gt; subclass, usually provided by &lt;code&gt;pytz&lt;/code&gt;, can be passed to extract a value in a specific timezone.</source>
          <target state="translated">소요 &lt;code&gt;expression&lt;/code&gt; 대표 &lt;code&gt;DateField&lt;/code&gt; , &lt;code&gt;DateTimeField&lt;/code&gt; , &lt;code&gt;TimeField&lt;/code&gt; , 또는 &lt;code&gt;DurationField&lt;/code&gt; 과 &lt;code&gt;lookup_name&lt;/code&gt; 을 하고,이 참조하는 날짜의 일부를 반환 &lt;code&gt;lookup_name&lt;/code&gt; int로서 &lt;code&gt;IntegerField&lt;/code&gt; 을 . Django는 일반적으로 데이터베이스의 추출 기능을 사용하므로 데이터베이스가 지원 하는 &lt;code&gt;lookup_name&lt;/code&gt; 을 사용할 수 있습니다 . 일반적으로 &lt;code&gt;pytz&lt;/code&gt; 가 제공 하는 &lt;code&gt;tzinfo&lt;/code&gt; 서브 클래스 는 특정 시간대의 값을 추출하기 위해 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="245870f1389bd9da9e034ecec14be4f9d3c4cf6a" translate="yes" xml:space="preserve">
          <source>Takes an IRI (string or UTF-8 bytes) and returns a string containing the encoded result.</source>
          <target state="translated">IRI (문자열 또는 UTF-8 바이트)를 가져 와서 인코딩 된 결과가 포함 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8671880447afb073cc4cb188d3b9f114dad78c3d" translate="yes" xml:space="preserve">
          <source>Takes an async function and returns a sync function that wraps it. Can be used as either a direct wrapper or a decorator:</source>
          <target state="translated">Takes an async function and returns a sync function that wraps it. Can be used as either a direct wrapper or a decorator:</target>
        </trans-unit>
        <trans-unit id="cc3004275b133f125d6531613f3f026744487bbf" translate="yes" xml:space="preserve">
          <source>Takes an instance of &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; and the name of the field. The return value will be used when accessing the field in a template. Most likely it will be an instance of a subclass of &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스 와 필드 이름을 가져옵니다. 반환 값은 템플릿의 필드에 액세스 할 때 사용됩니다. 아마도 &lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt; 서브 클래스의 인스턴스 일 것입니다 .</target>
        </trans-unit>
        <trans-unit id="0d3a8786c79fc01b6128106748b4687d1f9b0782" translate="yes" xml:space="preserve">
          <source>Takes an integer value representing the day of the week from 1 (Monday) to 7 (Sunday).</source>
          <target state="translated">Takes an integer value representing the day of the week from 1 (Monday) to 7 (Sunday).</target>
        </trans-unit>
        <trans-unit id="ce6380a827a9d575613b46bbcee1f6db0a03fb1a" translate="yes" xml:space="preserve">
          <source>Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday).</source>
          <target state="translated">1 (일요일)에서 7 (토요일)까지 요일을 나타내는 정수 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0f0069ac37a50df7f0a013b4b27a33abe9a00e60" translate="yes" xml:space="preserve">
          <source>Takes an optional argument that is a variable containing the date to use as the comparison point (instead of &lt;em&gt;now&lt;/em&gt;). If &lt;code&gt;from_date&lt;/code&gt; contains 22 June 2006, then the following will return &amp;ldquo;1 week&amp;rdquo;:</source>
          <target state="translated">비교 지점으로 사용할 날짜를 포함하는 변수 인 선택적 인수를 사용합니다 ( &lt;em&gt;now&lt;/em&gt; 대신 ). &lt;code&gt;from_date&lt;/code&gt; 에 2006 년 6 월 22 일이 포함 된 경우 다음은 &quot;1 주&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3cef8bba1ccc6cbfd938895cba722338e9153756" translate="yes" xml:space="preserve">
          <source>Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is &lt;em&gt;now&lt;/em&gt;). For example, if &lt;code&gt;blog_date&lt;/code&gt; is a date instance representing midnight on 1 June 2006, and &lt;code&gt;comment_date&lt;/code&gt; is a date instance for 08:00 on 1 June 2006, then the following would return &amp;ldquo;8 hours&amp;rdquo;:</source>
          <target state="translated">비교 지점으로 사용할 날짜를 포함하는 변수 인 선택적 인수를 사용합니다 (인수없이 비교 지점은 &lt;em&gt;now&lt;/em&gt; ). 예를 들어 &lt;code&gt;blog_date&lt;/code&gt; 가 2006 년 6 월 1 일 자정을 나타내는 날짜 인스턴스이고 &lt;code&gt;comment_date&lt;/code&gt; 가 2006 년 6 월 1 일 08:00의 날짜 인스턴스 인 경우 &quot;8 시간&quot;을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="39ed1c0e05d4f8f576e6b5df26f1a3950f9494fa" translate="yes" xml:space="preserve">
          <source>Takes an optional parameter:</source>
          <target state="translated">선택적 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8a62fc3414ff9705f2873fea34271b19b2b102ad" translate="yes" xml:space="preserve">
          <source>Takes either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, which correspond to SQL queries of &lt;code&gt;IS NULL&lt;/code&gt; and &lt;code&gt;IS NOT NULL&lt;/code&gt;, respectively.</source>
          <target state="translated">각각 &lt;code&gt;IS NULL&lt;/code&gt; 및 &lt;code&gt;IS NOT NULL&lt;/code&gt; 의 SQL 쿼리에 해당하는 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 를 취합니다 .</target>
        </trans-unit>
        <trans-unit id="8bfbc1249983c45c2299b3046840a38d798bbcb5" translate="yes" xml:space="preserve">
          <source>Takes either a &lt;code&gt;QueryDict&lt;/code&gt; or a dictionary. Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.update&quot;&gt;&lt;code&gt;dict.update()&lt;/code&gt;&lt;/a&gt;, except it &lt;em&gt;appends&lt;/em&gt; to the current dictionary items rather than replacing them. For example:</source>
          <target state="translated">중 하나를 취 &lt;code&gt;QueryDict&lt;/code&gt; 또는 사전. 마찬가지로 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.update&quot;&gt; &lt;code&gt;dict.update()&lt;/code&gt; &lt;/a&gt; , 그것을 제외하고 &lt;em&gt;추가&lt;/em&gt; 를 교체하지 않고 현재 사전 항목. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7218393cd985e921c1c82534bbd52d1a6a83ffb9" translate="yes" xml:space="preserve">
          <source>Takes either a model class or an instance of a model, and returns the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance representing that model. &lt;code&gt;for_concrete_model=False&lt;/code&gt; allows fetching the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; of a proxy model.</source>
          <target state="translated">모델 클래스 또는 모델의 인스턴스를 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 해당 모델을 나타내는 ContentType 인스턴스를 반환합니다 . &lt;code&gt;for_concrete_model=False&lt;/code&gt; 으로 프록시 모델 의 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 을 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="21b3736f83090aa055c0337fb2baadaba089837e" translate="yes" xml:space="preserve">
          <source>Takes extra arguments:</source>
          <target state="translated">추가 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="4bf8e0548f45c96f56b8769d4835546d28c82775" translate="yes" xml:space="preserve">
          <source>Takes four optional arguments:</source>
          <target state="translated">네 가지 선택적 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="0f14b8de543ac30132d25179d65b567705d0a76a" translate="yes" xml:space="preserve">
          <source>Takes one extra argument:</source>
          <target state="translated">하나의 추가 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="321aa30338bb8bf0f59c48270355b07b1053e09b" translate="yes" xml:space="preserve">
          <source>Takes one extra required argument, &lt;code&gt;choices&lt;/code&gt;, as for &lt;a href=&quot;#django.forms.ChoiceField&quot;&gt;&lt;code&gt;ChoiceField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.ChoiceField&quot;&gt; &lt;code&gt;ChoiceField&lt;/code&gt; &lt;/a&gt; 와 같이 하나의 추가 필수 인수 인 &lt;code&gt;choices&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="650c7950ea6a2401c787901f18b8f2e94f374fb7" translate="yes" xml:space="preserve">
          <source>Takes one extra required argument:</source>
          <target state="translated">하나의 추가 필수 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="84f66680d9d77c696dd1378c37850e0576e4aa67" translate="yes" xml:space="preserve">
          <source>Takes one optional argument:</source>
          <target state="translated">하나의 선택적 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="3b5f3b3f2b6ea232f73220192ff4ff00fce37a45" translate="yes" xml:space="preserve">
          <source>Takes one required argument:</source>
          <target state="translated">하나의 필수 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="04daa827f5193f9b9854fa1f430af5c42f31c427" translate="yes" xml:space="preserve">
          <source>Takes same arguments as &lt;a href=&quot;#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;, with one more optional argument:</source>
          <target state="translated">하나 이상의 선택적 인수를 사용하여 &lt;a href=&quot;#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 과 동일한 인수를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="0656ede68eb556db5d234f7a75a23d80bdfb1091" translate="yes" xml:space="preserve">
          <source>Takes several optional arguments:</source>
          <target state="translated">몇 가지 선택적인 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="2be25f7140cc5d2a971e13110785f791f9f70df3" translate="yes" xml:space="preserve">
          <source>Takes the &lt;code&gt;user&lt;/code&gt; as the first positional argument.</source>
          <target state="translated">얻어 &lt;code&gt;user&lt;/code&gt; 제 위치를 인수.</target>
        </trans-unit>
        <trans-unit id="9f5424a9095c6735126a0b7bf4ef95f3655b2e02" translate="yes" xml:space="preserve">
          <source>Takes the following optional arguments:</source>
          <target state="translated">다음과 같은 선택적 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e63ba5f2f2be04d40eb23c4f4113adb89498890b" translate="yes" xml:space="preserve">
          <source>Takes the object returned by &lt;code&gt;get_object()&lt;/code&gt; and returns the &lt;em&gt;feed&amp;rsquo;s&lt;/em&gt; geometry. Typically this is a &lt;code&gt;GEOSGeometry&lt;/code&gt; instance, or can be a tuple to represent a point or a box. For example:</source>
          <target state="translated">&lt;code&gt;get_object()&lt;/code&gt; 의해 리턴 된 오브젝트를 가져 와서 &lt;em&gt;피드의&lt;/em&gt; 지오메트리를 리턴합니다 . 일반적으로 이것은 &lt;code&gt;GEOSGeometry&lt;/code&gt; 인스턴스이거나 점 또는 상자를 나타내는 튜플 일 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cbdc2eaefea783dd7d355fbfaaec35b90ed521b1" translate="yes" xml:space="preserve">
          <source>Takes two extra arguments, &lt;code&gt;coerce&lt;/code&gt; and &lt;code&gt;empty_value&lt;/code&gt;, as for &lt;a href=&quot;#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 개 여분의 인수, 취 &lt;code&gt;coerce&lt;/code&gt; 및 &lt;code&gt;empty_value&lt;/code&gt; 을 위한로, &lt;a href=&quot;#django.forms.TypedChoiceField&quot;&gt; &lt;code&gt;TypedChoiceField&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2e9b2e3c0b8b7c322151289fa866294c36904c47" translate="yes" xml:space="preserve">
          <source>Takes two optional arguments for validation, &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt;. These control the range of values permitted in the field.</source>
          <target state="translated">유효성 검사를 위해 &lt;code&gt;max_value&lt;/code&gt; 및 &lt;code&gt;min_value&lt;/code&gt; 의 두 가지 선택적 인수를 사용합니다 . 이들은 필드에서 허용되는 값의 범위를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="100c4e7181d3c6b555d4f733684d380b0f1ebdb8" translate="yes" xml:space="preserve">
          <source>Takes two optional arguments for validation:</source>
          <target state="translated">유효성 검사를 위해 두 가지 선택적 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1d66a9e2de3cdba016edc3d652c9fef0578a91f9" translate="yes" xml:space="preserve">
          <source>Takes two optional arguments:</source>
          <target state="translated">두 가지 선택적인 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="f52b15975746d98bb5f7cc27294650be8fad6530" translate="yes" xml:space="preserve">
          <source>Takes two optional parameters:</source>
          <target state="translated">Takes two optional parameters:</target>
        </trans-unit>
        <trans-unit id="a0d3062aaa21504f429afb4b4225dbbf3f7da854" translate="yes" xml:space="preserve">
          <source>Takes two required arguments: &lt;code&gt;name&lt;/code&gt; which is the name of the file, and &lt;code&gt;content&lt;/code&gt; which is an object containing the file&amp;rsquo;s contents. The optional &lt;code&gt;save&lt;/code&gt; argument controls whether or not the model instance is saved after the file associated with this field has been altered. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">파일의 이름 인 name과 파일의 내용을 포함하는 object 인 &lt;code&gt;content&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; 두 가지 필수 인수를 취합니다 . 선택적 &lt;code&gt;save&lt;/code&gt; 인수는이 필드와 연관된 파일이 변경된 후 모델 인스턴스를 저장할지 여부를 제어합니다. 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="92a112afd1dc67ec8b3ed4ddfd9176d3e694f6b6" translate="yes" xml:space="preserve">
          <source>Taking PBKDF2 as example, if &lt;code&gt;encoded&lt;/code&gt; contains 20,000 iterations and the hasher&amp;rsquo;s default &lt;code&gt;iterations&lt;/code&gt; is 30,000, the method should run &lt;code&gt;password&lt;/code&gt; through another 10,000 iterations of PBKDF2.</source>
          <target state="translated">PBKDF2를 예로 들어, &lt;code&gt;encoded&lt;/code&gt; 에 20,000 개의 반복이 포함되어 있고 기본 &lt;code&gt;iterations&lt;/code&gt; 이 30,000 인 경우이 방법은 PBKDF2의 다른 10,000 반복을 통해 &lt;code&gt;password&lt;/code&gt; 를 실행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e5d778426248899286cd4912493a7e582a2d9607" translate="yes" xml:space="preserve">
          <source>Taking a closer look at the implementation, the first required attribute is &lt;code&gt;lookup_name&lt;/code&gt;. This allows the ORM to understand how to interpret &lt;code&gt;name__ne&lt;/code&gt; and use &lt;code&gt;NotEqual&lt;/code&gt; to generate the SQL. By convention, these names are always lowercase strings containing only letters, but the only hard requirement is that it must not contain the string &lt;code&gt;__&lt;/code&gt;.</source>
          <target state="translated">구현을 자세히 살펴보면 첫 번째 필수 속성은 &lt;code&gt;lookup_name&lt;/code&gt; 입니다. 이를 통해 ORM은 &lt;code&gt;name__ne&lt;/code&gt; 을 해석 하고 &lt;code&gt;NotEqual&lt;/code&gt; 을 사용하여 SQL을 생성하는 방법을 이해할 수 있습니다 . 일반적으로 이러한 이름은 항상 문자 만 포함하는 소문자 문자열이지만 문자열 &lt;code&gt;__&lt;/code&gt; 은 포함해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d2e85de9cb4375cec8e7adc7a55781656f283ab" translate="yes" xml:space="preserve">
          <source>Taking care in &lt;code&gt;get_absolute_url()&lt;/code&gt;</source>
          <target state="translated">에서 돌보는 &lt;code&gt;get_absolute_url()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73047412313ab9e8d476860fb3b307189c059c83" translate="yes" xml:space="preserve">
          <source>Technical Information</source>
          <target state="translated">기술적 인 정보</target>
        </trans-unit>
        <trans-unit id="4be37be90bfccb09eab627d2a5d3f9b1c85287e5" translate="yes" xml:space="preserve">
          <source>Technical details</source>
          <target state="translated">기술적 세부 사항</target>
        </trans-unit>
        <trans-unit id="d4f71867f00e589bc7de57848f25b9a00414170a" translate="yes" xml:space="preserve">
          <source>Technicality</source>
          <target state="translated">Technicality</target>
        </trans-unit>
        <trans-unit id="e0a1c8bb9b89f4d9041bc74b2adb1607502e6b3b" translate="yes" xml:space="preserve">
          <source>Technically, it isn&amp;rsquo;t correct to say that &lt;code&gt;iri_to_uri()&lt;/code&gt; implements the full algorithm in the IRI specification. It doesn&amp;rsquo;t (yet) perform the international domain name encoding portion of the algorithm.</source>
          <target state="translated">기술적으로 &lt;code&gt;iri_to_uri()&lt;/code&gt; 가 IRI 사양에서 전체 알고리즘을 구현 한다고 말하는 것은 올바르지 않습니다 . 알고리즘의 국제 도메인 이름 인코딩 부분을 (아직) 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7de6a3d17023f841806590b868af528694e6e5d8" translate="yes" xml:space="preserve">
          <source>Technically, these models are defined in &lt;a href=&quot;#module-django.db.models.fields&quot;&gt;&lt;code&gt;django.db.models.fields&lt;/code&gt;&lt;/a&gt;, but for convenience they&amp;rsquo;re imported into &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;; the standard convention is to use &lt;code&gt;from django.db import models&lt;/code&gt; and refer to fields as &lt;code&gt;models.&amp;lt;Foo&amp;gt;Field&lt;/code&gt;.</source>
          <target state="translated">기술적으로 이러한 모델은 &lt;a href=&quot;#module-django.db.models.fields&quot;&gt; &lt;code&gt;django.db.models.fields&lt;/code&gt; &lt;/a&gt; 에 정의되어 있지만 편의상 &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; &lt;/a&gt; 로 가져 옵니다 . 표준 규칙은 &lt;code&gt;from django.db import models&lt;/code&gt; 에서 사용하고 필드를 &lt;code&gt;models.&amp;lt;Foo&amp;gt;Field&lt;/code&gt; 로 참조하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="74376d78871f7f5ba72b35fbe8f98e3c1307a3e2" translate="yes" xml:space="preserve">
          <source>Technically, these variables are only made available in the template context if you use &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;'django.contrib.auth.context_processors.auth'&lt;/code&gt; context processor is enabled. It is in the default generated settings file. For more, see the &lt;a href=&quot;../../ref/templates/api#subclassing-context-requestcontext&quot;&gt;RequestContext docs&lt;/a&gt;.</source>
          <target state="translated">기술적으로 이러한 변수는 &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt; 를 사용 하고 &lt;code&gt;'django.contrib.auth.context_processors.auth'&lt;/code&gt; 컨텍스트 프로세서가 사용 가능한 경우 템플리트 컨텍스트에서만 사용 가능합니다. 기본 생성 설정 파일에 있습니다. 자세한 내용은 &lt;a href=&quot;../../ref/templates/api#subclassing-context-requestcontext&quot;&gt;RequestContext docs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="383b13c1ac0b179247b0ee1a75193a5051b04366" translate="yes" xml:space="preserve">
          <source>Technically, when the template system encounters a dot, it tries the following lookups, in this order:</source>
          <target state="translated">기술적으로 템플릿 시스템이 점을 발견하면 다음 순서로 다음 조회를 시도합니다.</target>
        </trans-unit>
        <trans-unit id="37fbae78ab80347d0c18f97d10a3ab53bee66425" translate="yes" xml:space="preserve">
          <source>Tell Django what your template directories are by using the &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting in your settings file &amp;mdash; or the &lt;code&gt;dirs&lt;/code&gt; argument of &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;. This should be set to a list of strings that contain full paths to your template directories:</source>
          <target state="translated">설정 파일 의 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정에서 &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 옵션 또는 &lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;dirs&lt;/code&gt; 인수를 사용하여 Django에 템플릿 디렉토리가 무엇인지 알려주십시오 . 템플릿 디렉토리의 전체 경로가 포함 된 문자열 목록으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="12617a938f0ea192637de7a721d7781bb1f0197d" translate="yes" xml:space="preserve">
          <source>Telling the browser to treat the response as a file attachment</source>
          <target state="translated">응답을 파일 첨부로 취급하도록 브라우저에 지시</target>
        </trans-unit>
        <trans-unit id="dfed652b299fe7de04b4b3878c0cb5ae6194c2f3" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression can be referenced in &lt;a href=&quot;querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;QuerySet.filter()&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">Django에게이 표현식이 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;QuerySet.filter()&lt;/code&gt; &lt;/a&gt; 에서 참조 될 수 있음을 알려줍니다 . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="00464f24457b083ea8b971654d3f458f7a7d5b88" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression can be used as the source expression in &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">Django에게이 표현식을 &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt; 의 소스 표현식으로 사용할 수 있다고 알려줍니다 . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c9e8bd508a7310ab1a3f7a19b29110d2d829c51f" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression contains a &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expression. It&amp;rsquo;s used, for example, to disallow window function expressions in queries that modify data.</source>
          <target state="translated">Django에게이 표현식에 &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt; 표현식 이 포함되어 있다고 알려줍니다 . 예를 들어 데이터를 수정하는 쿼리에서 창 함수 표현식을 허용하지 않는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fe6cdd0ac9468de4f270919d5d81bce20e896652" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression contains an aggregate and that a &lt;code&gt;GROUP BY&lt;/code&gt; clause needs to be added to the query.</source>
          <target state="translated">Django에게이 표현식에 집계가 포함되어 있고 &lt;code&gt;GROUP BY&lt;/code&gt; 절을 쿼리에 추가해야한다고 지시합니다.</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="08f1c8a78b50829c28f568e876e1fe89a15bb0f2" translate="yes" xml:space="preserve">
          <source>Template customization</source>
          <target state="translated">템플릿 사용자 정의</target>
        </trans-unit>
        <trans-unit id="a46a15fcb23f0c85101ef7ca0d97f009d73b42f5" translate="yes" xml:space="preserve">
          <source>Template engines</source>
          <target state="translated">템플릿 엔진</target>
        </trans-unit>
        <trans-unit id="503b40392c29384af177b8f9f130a2b903114424" translate="yes" xml:space="preserve">
          <source>Template engines are available in &lt;code&gt;django.template.engines&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;django.template.engines&lt;/code&gt; 에서 템플릿 엔진을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0392e1a0044d6e8dcf79e5002812eecc51f97c34" translate="yes" xml:space="preserve">
          <source>Template filter code falls into one of two situations:</source>
          <target state="translated">템플릿 필터 코드는 다음 두 가지 상황 중 하나에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="870c1047b3b1c95e6bc52bdd54b9c3d2448447f8" translate="yes" xml:space="preserve">
          <source>Template filters</source>
          <target state="translated">템플릿 필터</target>
        </trans-unit>
        <trans-unit id="06e8babef15a0e42a0ac73aa90f02e159dbfc308" translate="yes" xml:space="preserve">
          <source>Template filters that expect strings</source>
          <target state="translated">문자열이 필요한 템플릿 필터</target>
        </trans-unit>
        <trans-unit id="aff256beb841687416f1ad08d1bafc4a0d9153d7" translate="yes" xml:space="preserve">
          <source>Template fragment caching</source>
          <target state="translated">템플릿 조각 캐싱</target>
        </trans-unit>
        <trans-unit id="bcfb14bc4c658ec14316f1306282663640732cce" translate="yes" xml:space="preserve">
          <source>Template inheritance</source>
          <target state="translated">템플릿 상속</target>
        </trans-unit>
        <trans-unit id="8e25064c8de5ef7f805d6501e8c52fcf85fa8d69" translate="yes" xml:space="preserve">
          <source>Template loaders are responsible for locating templates, loading them, and returning &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">템플릿 로더는 템플릿을 찾아서로드하고 &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="275493e1e3c651550a0e312841edc8286090591e" translate="yes" xml:space="preserve">
          <source>Template namespacing</source>
          <target state="translated">템플릿 이름</target>
        </trans-unit>
        <trans-unit id="d7f9f1f6f770c8fc7ec2b0095dd3a883ac1bc7d8" translate="yes" xml:space="preserve">
          <source>Template origin</source>
          <target state="translated">템플릿 원점</target>
        </trans-unit>
        <trans-unit id="5ffe744c9da607d4e089d6d95e399795d91def00" translate="yes" xml:space="preserve">
          <source>Template performance</source>
          <target state="translated">템플릿 성능</target>
        </trans-unit>
        <trans-unit id="2c2d75f14614834905c25e03493f93168c937ee7" translate="yes" xml:space="preserve">
          <source>Template postmortem</source>
          <target state="translated">사후 템플릿</target>
        </trans-unit>
        <trans-unit id="d63c1da80c73b121a86202e8f2560b0cfeb4561c" translate="yes" xml:space="preserve">
          <source>Template reference</source>
          <target state="translated">템플릿 참조</target>
        </trans-unit>
        <trans-unit id="ecbe2eec65ab0457fbc5a438c5eebda868ca8bac" translate="yes" xml:space="preserve">
          <source>Template tags</source>
          <target state="translated">템플릿 태그</target>
        </trans-unit>
        <trans-unit id="c1ecd681b7d7c3385c0d156a844441f0ab708044" translate="yes" xml:space="preserve">
          <source>Template tags and filters</source>
          <target state="translated">템플릿 태그 및 필터</target>
        </trans-unit>
        <trans-unit id="93d7a6a3b3fb3ebfb6f68bdf31818ff1d1a697fb" translate="yes" xml:space="preserve">
          <source>Template tags and filters reference</source>
          <target state="translated">템플릿 태그 및 필터 참조</target>
        </trans-unit>
        <trans-unit id="4de39a2f979afac3a22fb6e2b91978381849ffb4" translate="yes" xml:space="preserve">
          <source>Template tags can work in tandem. For instance, the standard &lt;a href=&quot;../ref/templates/builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;{% comment %}&lt;/code&gt;&lt;/a&gt; tag hides everything until &lt;code&gt;{% endcomment %}&lt;/code&gt;. To create a template tag such as this, use &lt;code&gt;parser.parse()&lt;/code&gt; in your compilation function.</source>
          <target state="translated">템플릿 태그는 함께 작동 할 수 있습니다. 예를 들어 표준 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-comment&quot;&gt; &lt;code&gt;{% comment %}&lt;/code&gt; &lt;/a&gt; 태그는 &lt;code&gt;{% endcomment %}&lt;/code&gt; 까지 모든 것을 숨 깁니다 . 이와 같은 템플릿 태그를 만들려면 컴파일 함수에서 &lt;code&gt;parser.parse()&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7d0db7be1461de15be97b4fcf849f0ce026908fa" translate="yes" xml:space="preserve">
          <source>Template:</source>
          <target state="translated">Template:</target>
        </trans-unit>
        <trans-unit id="3e2df858e707eddad231b69c21944cd664c3965b" translate="yes" xml:space="preserve">
          <source>TemplateResponse and SimpleTemplateResponse</source>
          <target state="translated">TemplateResponse 및 SimpleTemplateResponse</target>
        </trans-unit>
        <trans-unit id="00bda0abce0d98bf01bf42aa1cbc75f8a33fb7b4" translate="yes" xml:space="preserve">
          <source>TemplateResponse provides a way to do just that. Unlike basic &lt;a href=&quot;request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, TemplateResponse objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process.</source>
          <target state="translated">TemplateResponse는이를 수행하는 방법을 제공합니다. 기본 &lt;a href=&quot;request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체 와 달리 TemplateResponse 객체는 응답을 계산하기 위해 뷰에서 제공 한 템플릿 및 컨텍스트의 세부 정보를 유지합니다. 응답의 최종 출력은 응답 프로세스 후반에 필요할 때까지 계산되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="ee5de2a0afdca73e751c62979aed7a83e28fc3b9" translate="yes" xml:space="preserve">
          <source>Templates can override or extend base admin templates as described in &lt;a href=&quot;#admin-overriding-templates&quot;&gt;Overriding admin templates&lt;/a&gt;.</source>
          <target state="translated">관리 템플릿 &lt;a href=&quot;#admin-overriding-templates&quot;&gt;재정의에&lt;/a&gt; 설명 된대로 템플릿은 기본 관리 템플릿을 재정의하거나 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="837a4a4336cf75d30df4024f4f3ad20a083163f7" translate="yes" xml:space="preserve">
          <source>Templates engines are configured with the &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting. It&amp;rsquo;s a list of configurations, one for each engine. The default value is empty. The &lt;code&gt;settings.py&lt;/code&gt; generated by the &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; command defines a more useful value:</source>
          <target state="translated">템플릿 엔진은 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정으로 구성됩니다 . 각 엔진마다 하나씩 구성 목록입니다. 기본값은 비어 있습니다. &lt;code&gt;settings.py&lt;/code&gt; 에 의해 생성 된 &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; 명령은 더 유용한 값을 정의합니다 :</target>
        </trans-unit>
        <trans-unit id="57677a5a4bc0d7b93c6b0e7344167b9efc12f914" translate="yes" xml:space="preserve">
          <source>Templates have an &lt;code&gt;origin&lt;/code&gt; containing attributes depending on the source they are loaded from.</source>
          <target state="translated">템플릿에는 로드 된 소스에 따라 속성이 포함 된 &lt;code&gt;origin&lt;/code&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b12ed220f1f137ab20bc8189bf5d2b4027b98db" translate="yes" xml:space="preserve">
          <source>Templates which may be overridden per app or model</source>
          <target state="translated">앱 또는 모델별로 재정의 될 수있는 템플릿</target>
        </trans-unit>
        <trans-unit id="79d9878f5100d0480b508daffd45aca154046fde" translate="yes" xml:space="preserve">
          <source>Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, &amp;amp; Hugh H. Howard, &lt;em&gt;Thematic Cartography and Geographic Visualization&lt;/em&gt; (Prentice Hall, 2nd edition), at Ch. 7.1.3.</source>
          <target state="translated">Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler 및 Hugh H. Howard, &lt;em&gt;주제별지도 제작 및 지리 시각화&lt;/em&gt; (프렌 티스 홀, 2 판). 7.1.3.</target>
        </trans-unit>
        <trans-unit id="b54928633e8f7d5711d9314a8072c27ac84de32b" translate="yes" xml:space="preserve">
          <source>Test &lt;a href=&quot;#skipping-tests&quot;&gt;skipping based on database backend features&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#skipping-tests&quot;&gt;데이터베이스 백엔드 기능을 기반으로 건너 뛰는&lt;/a&gt; 테스트 .</target>
        </trans-unit>
        <trans-unit id="c6da5565855f37d08c530e95452e7e72020da6ec" translate="yes" xml:space="preserve">
          <source>Test a view</source>
          <target state="translated">보기 테스트</target>
        </trans-unit>
        <trans-unit id="18739c3aec8fb9af2219621b209b83b2e73543bd" translate="yes" xml:space="preserve">
          <source>Test and tweak</source>
          <target state="translated">테스트 및 조정</target>
        </trans-unit>
        <trans-unit id="b0b06394156d352ffb8c4177aec079b081a5b940" translate="yes" xml:space="preserve">
          <source>Test cases features</source>
          <target state="translated">테스트 사례 기능</target>
        </trans-unit>
        <trans-unit id="ef625477f09969d2f6ca5084c4d11d06ee7e5668" translate="yes" xml:space="preserve">
          <source>Test database templates</source>
          <target state="translated">데이터베이스 템플릿 테스트</target>
        </trans-unit>
        <trans-unit id="08934ffbb3b1105d0b3b67d00c046e179772cd8f" translate="yes" xml:space="preserve">
          <source>Test discovery is based on the unittest module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest-test-discovery&quot;&gt;built-in test discovery&lt;/a&gt;. By default, this will discover tests in any file named &amp;ldquo;test*.py&amp;rdquo; under the current working directory.</source>
          <target state="translated">테스트 감지는 unittest 모듈의 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest-test-discovery&quot;&gt;내장&lt;/a&gt; 테스트 감지를 기반으로합니다 . 기본적으로 현재 작업 디렉토리 아래의 &quot;test * .py&quot;라는 파일에서 테스트를 발견합니다.</target>
        </trans-unit>
        <trans-unit id="5d53505398a3c5ad8a027d0a8074a1ca538a563c" translate="yes" xml:space="preserve">
          <source>Test runner options</source>
          <target state="translated">테스트 러너 옵션</target>
        </trans-unit>
        <trans-unit id="f7afb236ad48d9f7cb2d795fcd1de1b79a5e779e" translate="yes" xml:space="preserve">
          <source>Test signals</source>
          <target state="translated">테스트 신호</target>
        </trans-unit>
        <trans-unit id="44dc477d5b5165b3c359fa1c3cd92391ab84b1fe" translate="yes" xml:space="preserve">
          <source>Test that a given request is rendered by a given Django template, with a template context that contains certain values.</source>
          <target state="translated">특정 요청이 특정 값을 포함하는 템플릿 컨텍스트를 사용하여 지정된 Django 템플릿에 의해 렌더링되는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="f199f6e63adef5356b4300a7349bbb4f565039c2" translate="yes" xml:space="preserve">
          <source>Test with warnings enabled</source>
          <target state="translated">경고를 사용하여 테스트</target>
        </trans-unit>
        <trans-unit id="5b03058aa647d29d24e264f61eeb7755159268e9" translate="yes" xml:space="preserve">
          <source>Test your installation by importing it in the Python interactive interpreter:</source>
          <target state="translated">Python 대화식 인터프리터에서 가져와 설치를 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="30da1610721c5a77e11b77c05aac051d5571f9a6" translate="yes" xml:space="preserve">
          <source>Testing &lt;a href=&quot;#django.test.SimpleTestCase.assertContains&quot;&gt;&lt;code&gt;HTML responses for the presence/lack of a given fragment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.test.SimpleTestCase.assertContains&quot;&gt; &lt;code&gt;HTML responses for the presence/lack of a given fragment&lt;/code&gt; &lt;/a&gt; 테스트 .</target>
        </trans-unit>
        <trans-unit id="1a40bce67dddb6fb767cfb952b87305913c9ca16" translate="yes" xml:space="preserve">
          <source>Testing Framework Exceptions</source>
          <target state="translated">프레임 워크 예외 테스트</target>
        </trans-unit>
        <trans-unit id="10df3a3bb8dbd3c97fe17e0a5df7ee88fbcb58aa" translate="yes" xml:space="preserve">
          <source>Testing GeoDjango apps</source>
          <target state="translated">GeoDjango 앱 테스트</target>
        </trans-unit>
        <trans-unit id="2cbeb84e0b5bbc826263bbb80a5a0826ced7cab6" translate="yes" xml:space="preserve">
          <source>Testing a Web application is a complex task, because a Web application is made of several layers of logic &amp;ndash; from HTTP-level request handling, to form validation and processing, to template rendering. With Django&amp;rsquo;s test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application&amp;rsquo;s output and generally verify your code is doing what it should be doing.</source>
          <target state="translated">웹 응용 프로그램 테스트는 복잡한 작업입니다. 웹 응용 프로그램은 HTTP 수준 요청 처리에서 양식 확인 및 처리, 템플릿 렌더링에 이르기까지 여러 계층의 논리로 구성되어 있기 때문입니다. Django의 테스트 실행 프레임 워크 및 다양한 유틸리티를 사용하면 요청을 시뮬레이션하고 테스트 데이터를 삽입하며 응용 프로그램의 출력을 검사하고 일반적으로 코드가 수행중인 작업을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="436ba3c1d533fcda1dbeb2dab22f4c2a7d01de0c" translate="yes" xml:space="preserve">
          <source>Testing asynchronous code</source>
          <target state="translated">Testing asynchronous code</target>
        </trans-unit>
        <trans-unit id="81c487303ebe08511551142a3176c39d553469d8" translate="yes" xml:space="preserve">
          <source>Testing class-based views</source>
          <target state="translated">클래스 기반 뷰 테스트</target>
        </trans-unit>
        <trans-unit id="86ebd52789fcbddb1bf223135422d1fa99ffa6a2" translate="yes" xml:space="preserve">
          <source>Testing custom error views</source>
          <target state="translated">사용자 정의 오류보기 테스트</target>
        </trans-unit>
        <trans-unit id="46789c25f9937fae8e84995b643f9f3d3b619419" translate="yes" xml:space="preserve">
          <source>Testing for multipart forms</source>
          <target state="translated">멀티 파트 폼 테스트</target>
        </trans-unit>
        <trans-unit id="8a9cd3554eda0d0c14cbdab4f3bfe98e0aded844" translate="yes" xml:space="preserve">
          <source>Testing form field &lt;a href=&quot;#django.test.SimpleTestCase.assertFieldOutput&quot;&gt;&lt;code&gt;rendering and error treatment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">테스트 양식 필드 &lt;a href=&quot;#django.test.SimpleTestCase.assertFieldOutput&quot;&gt; &lt;code&gt;rendering and error treatment&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a5e51a30cc66d4bfcb4289dbe9807bb19ba80ebc" translate="yes" xml:space="preserve">
          <source>Testing in Django</source>
          <target state="translated">장고에서의 테스트</target>
        </trans-unit>
        <trans-unit id="1f871e679b11d199935fbbef02730cc6b7b25a92" translate="yes" xml:space="preserve">
          <source>Testing operates at different levels. Some tests might apply to a tiny detail (&lt;em&gt;does a particular model method return values as expected?&lt;/em&gt;) while others examine the overall operation of the software (&lt;em&gt;does a sequence of user inputs on the site produce the desired result?&lt;/em&gt;). That&amp;rsquo;s no different from the kind of testing you did earlier in &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;, using the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; to examine the behavior of a method, or running the application and entering data to check how it behaves.</source>
          <target state="translated">테스트는 다른 수준에서 작동합니다. 일부 테스트는 작은 세부 사항 (에 적용 할 수있는 &lt;em&gt;예상대로 특정 모델 방법의 반환 값을합니까?&lt;/em&gt; ) 다른 사람이 소프트웨어의 전체적인 동작을 조사하면서 ( &lt;em&gt;사이트 생산에 대한 사용자 입력 원하는 결과의 순서를합니까?&lt;/em&gt; ). 즉, 초기에했던 테스트의 종류 다르지 없습니다 &lt;a href=&quot;tutorial02&quot;&gt;튜토리얼 2&lt;/a&gt; 의 사용 &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt; 하는 방법의 동작을 검사하거나 응용 프로그램을 실행하고 동작하는 방법을 확인하기 위해 데이터를 입력.</target>
        </trans-unit>
        <trans-unit id="4419ce5b690d20e39e613abbba7da1488f9816bb" translate="yes" xml:space="preserve">
          <source>Testing our new view</source>
          <target state="translated">새로운 견해 테스트</target>
        </trans-unit>
        <trans-unit id="5e72b5e121198f50570492a55809dbef6ebc08a0" translate="yes" xml:space="preserve">
          <source>Testing primary/replica configurations</source>
          <target state="translated">기본 / 복제본 구성 테스트</target>
        </trans-unit>
        <trans-unit id="802b52725b6569631bb94335fbd56065e721f791" translate="yes" xml:space="preserve">
          <source>Testing responses</source>
          <target state="translated">테스트 응답</target>
        </trans-unit>
        <trans-unit id="e5c93522fa833711d269c91b7f26d492d378b5b5" translate="yes" xml:space="preserve">
          <source>Testing the &lt;code&gt;DetailView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DetailView&lt;/code&gt; 테스트</target>
        </trans-unit>
        <trans-unit id="3d3998625037d01c3f0c18b46c8e2f6a0db08edf" translate="yes" xml:space="preserve">
          <source>Testing tools</source>
          <target state="translated">테스트 도구</target>
        </trans-unit>
        <trans-unit id="c8a45f98b9d3f2e344cf639e0d00f51996bca921" translate="yes" xml:space="preserve">
          <source>Testing utilities</source>
          <target state="translated">테스트 유틸리티</target>
        </trans-unit>
        <trans-unit id="7fea12ddfcb669dc82c604d27efcb7b00c360587" translate="yes" xml:space="preserve">
          <source>Testing your patch.</source>
          <target state="translated">패치 테스트.</target>
        </trans-unit>
        <trans-unit id="e765931ce076de9d50bb9363cdb3fef81c853c1b" translate="yes" xml:space="preserve">
          <source>Tests and multiple databases</source>
          <target state="translated">테스트 및 여러 데이터베이스</target>
        </trans-unit>
        <trans-unit id="d142901c5c92e69912ce0487e74a18801198fd82" translate="yes" xml:space="preserve">
          <source>Tests and multiple host names</source>
          <target state="translated">테스트 및 여러 호스트 이름</target>
        </trans-unit>
        <trans-unit id="529cc1e0384bfb82fc3b78a96d4ceba233e4dfd6" translate="yes" xml:space="preserve">
          <source>Tests are routines that check the operation of your code.</source>
          <target state="translated">테스트는 코드 작동을 점검하는 루틴입니다.</target>
        </trans-unit>
        <trans-unit id="6f13b48a42e5a6876e4ded23dcb1354f85763309" translate="yes" xml:space="preserve">
          <source>Tests change that; they light up your code from the inside, and when something goes wrong, they focus light on the part that has gone wrong - &lt;em&gt;even if you hadn&amp;rsquo;t even realized it had gone wrong&lt;/em&gt;.</source>
          <target state="translated">시험은 그것을 바꾼다. 그들은 내부에서 코드를 밝히고, 무언가 잘못되면 잘못되었다는 &lt;em&gt;사실조차 모르더라도&lt;/em&gt; 잘못 된 부분에 빛을 집중 시킵니다.</target>
        </trans-unit>
        <trans-unit id="e4217747096e24b37b05b1b58a8db268a7a3cd26" translate="yes" xml:space="preserve">
          <source>Tests don&amp;rsquo;t just identify problems, they prevent them</source>
          <target state="translated">테스트는 문제를 식별 할뿐 아니라 문제를 예방합니다.</target>
        </trans-unit>
        <trans-unit id="fe2e646919fc0d3be94d4e8a0b5f1b868385e7c6" translate="yes" xml:space="preserve">
          <source>Tests help teams work together</source>
          <target state="translated">팀이 함께 일할 수 있도록 테스트</target>
        </trans-unit>
        <trans-unit id="5586c33813dfd5cd6a910124a2bb8f00a2f92184" translate="yes" xml:space="preserve">
          <source>Tests if no point in the geometry field is outside the lookup geometry. &lt;a href=&quot;#fncovers&quot; id=&quot;id2&quot;&gt;[3]&lt;/a&gt;</source>
          <target state="translated">지오메트리 필드의 포인트가 조회 지오메트리 외부에 없는지 테스트합니다. &lt;a href=&quot;#fncovers&quot; id=&quot;id2&quot;&gt;[삼]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aef5fa36e2dc07740896aff38e4448ed7cb76091" translate="yes" xml:space="preserve">
          <source>Tests if no point in the lookup geometry is outside the geometry field. &lt;a href=&quot;#fncovers&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt;</source>
          <target state="translated">조회 형상의 점이 형상 필드 외부에 없는지 테스트합니다. &lt;a href=&quot;#fncovers&quot; id=&quot;id3&quot;&gt;[삼]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33044edb75457057684cf0c14862e24d3efa84c8" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is &amp;ldquo;equal&amp;rdquo; to the lookup geometry. On Oracle, MySQL, and SpatiaLite, it tests spatial equality, while on PostGIS it tests equality of bounding boxes.</source>
          <target state="translated">지오메트리 필드가 조회 지오메트리와 &quot;동일한 지&quot;테스트합니다. Oracle, MySQL 및 SpatiaLite에서는 공간 평등을 테스트하고 PostGIS에서는 경계 상자의 평등을 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="dfc59d48d68f87422ad9e9e987261672a675ee44" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially disjoint from the lookup geometry.</source>
          <target state="translated">지오메트리 필드가 조회 지오메트리와 공간적으로 분리되어 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="ef616e014573f56f07d09650f80cf7143b12d73b" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially equal to the lookup geometry.</source>
          <target state="translated">지오메트리 필드가 조회 지오메트리와 공간적으로 동일한 지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="f4ef0e979ecf53f78388994e4eee8bbb4e0869e0" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially related to the lookup geometry by the values given in the given pattern. This lookup requires a tuple parameter, &lt;code&gt;(geom, pattern)&lt;/code&gt;; the form of &lt;code&gt;pattern&lt;/code&gt; will depend on the spatial backend:</source>
          <target state="translated">지오메트리 필드가 지정된 패턴에 지정된 값으로 검색 지오메트리와 공간적으로 관련되어 있는지 테스트합니다. 이 조회에는 튜플 매개 변수 &lt;code&gt;(geom, pattern)&lt;/code&gt; . &lt;code&gt;pattern&lt;/code&gt; 의 형태 는 공간 백엔드에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="08684b75128f222389bd1ef9ea857766dbb18be7" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially within the lookup geometry.</source>
          <target state="translated">지오메트리 필드가 공간적으로 조회 지오메트리 내에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="a1c17e97d2e7b46642cbcac5b28db6d4f7409338" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially contains the lookup geometry.</source>
          <target state="translated">지오메트리 필드에 공간적으로 조회 지오메트리가 포함되어 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="c7bfee25407fa380777aa39b211b28473e014885" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially crosses the lookup geometry.</source>
          <target state="translated">지오메트리 필드가 조회 지오메트리를 공간적으로 교차하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="91ff40cdb8b37d72d110b8df9b31eaa4d711bf2b" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially intersects the lookup geometry.</source>
          <target state="translated">기하학 필드가 공간적으로 조회 기하학과 교차하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="041f30ff101e07970819f76c88c29091a8e92442" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially overlaps the lookup geometry.</source>
          <target state="translated">지오메트리 필드가 조회 지오메트리와 공간적으로 겹치는 지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="b7b32839d0968186ac615e9a90f7b28ffe9ebc8e" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially touches the lookup geometry.</source>
          <target state="translated">지오메트리 필드가 조회 지오메트리를 공간적으로 접촉하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="1079f0bdf2d5a0f6a77c8cb65ffc6df4adf53512" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is completely contained by the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자에 완전히 포함되어 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="226b256e835dc81984974ebb79c7fd39d11fc252" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly above the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자 위에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="78b2cefd2d9e99895a032d0cd6cfaccd3bf21d19" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly below the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자 아래에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="b018f50ff926ea0d82843dfdb8618ef439330bd4" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly to the left of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자 왼쪽에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="de460f890aa9ea192b9ee4a1f48adb9f1297d188" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly to the right of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자 오른쪽에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="2616aa38fac34dc4d19b5f484a83275678b61014" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is above the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자와 겹치거나 위에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="ba7590ef62b0a758878fe2a4b5816b64a25fc5a8" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is below the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자와 겹치거나 아래에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="09be52c0a55b6715e5b5ee30b3d56ddcafdffa7a" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is to the left of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자와 겹치거나 왼쪽에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="ccb9de8e529f38bdbaf2204233736f82b9c587e4" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is to the right of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자와 겹치거나 오른쪽에 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="e9920c6c2e21c644b40b32a85072450b1e6a5fd7" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 필드의 경계 상자가 조회 지오메트리의 경계 상자와 겹치는 지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="bae91c2489c982532e3e968218fb4e5c40b52bd7" translate="yes" xml:space="preserve">
          <source>Tests if the geometry is valid.</source>
          <target state="translated">지오메트리가 유효한지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="f6a509828a43af80b33c5ac468b85e5168d7b241" translate="yes" xml:space="preserve">
          <source>Tests if the geometry or raster field&amp;rsquo;s bounding box completely contains the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="translated">지오메트리 또는 래스터 필드의 경계 상자에 조회 지오메트리의 경계 상자가 완전히 포함되어 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="604606740adeb57a13777ca1ee0b14d7487c2248" translate="yes" xml:space="preserve">
          <source>Tests make your code more attractive</source>
          <target state="translated">테스트는 코드를 더 매력적으로 만듭니다</target>
        </trans-unit>
        <trans-unit id="ce94a04b7009315562b1dc4852c7d4e6dc62aa4c" translate="yes" xml:space="preserve">
          <source>Tests that require a database (namely, model tests) will not use your &amp;ldquo;real&amp;rdquo; (production) database. Separate, blank databases are created for the tests.</source>
          <target state="translated">데이터베이스가 필요한 테스트 (즉, 모델 테스트)는 &quot;실제&quot;(생산) 데이터베이스를 사용하지 않습니다. 테스트를 위해 별도의 빈 데이터베이스가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="29a59794ddaaf43fd62c0e6cb68b77b8974a4205" translate="yes" xml:space="preserve">
          <source>Tests will save you time</source>
          <target state="translated">테스트는 시간을 절약 해줍니다</target>
        </trans-unit>
        <trans-unit id="f1cfe6dce5e3be3c973c8f3f7449cb1af82c9073" translate="yes" xml:space="preserve">
          <source>Text functions</source>
          <target state="translated">텍스트 기능</target>
        </trans-unit>
        <trans-unit id="fb4a089572d0dd369d8d37436891839b17c03c3a" translate="yes" xml:space="preserve">
          <source>Text, character references, and entity references that refer to the same character are equivalent.</source>
          <target state="translated">동일한 문자를 참조하는 텍스트, 문자 참조 및 엔티티 참조는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="eeb7a3ffc2c50e82898b58929bfd77acc7f78d6e" translate="yes" xml:space="preserve">
          <source>Text-based fields have a selection of matching operations. For example, you may wish to allow lookup up an author like so:</source>
          <target state="translated">텍스트 기반 필드에는 일치하는 작업이 있습니다. 예를 들어 다음과 같이 저자를 조회 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a0b8351f71fed3e6cc6c710e971182aa5e68dfb" translate="yes" xml:space="preserve">
          <source>That adds a &amp;ldquo;Filter&amp;rdquo; sidebar that lets people filter the change list by the &lt;code&gt;pub_date&lt;/code&gt; field:</source>
          <target state="translated">그러면 사람들이 &lt;code&gt;pub_date&lt;/code&gt; 필드로 변경 목록을 필터링 할 수있는 &quot;필터&quot;사이드 바가 추가 됩니다.</target>
        </trans-unit>
        <trans-unit id="bfa1f191e17363324ace8750451c12ed4afbd586" translate="yes" xml:space="preserve">
          <source>That adds a search box at the top of the change list. When somebody enters search terms, Django will search the &lt;code&gt;question_text&lt;/code&gt; field. You can use as many fields as you&amp;rsquo;d like &amp;ndash; although because it uses a &lt;code&gt;LIKE&lt;/code&gt; query behind the scenes, limiting the number of search fields to a reasonable number will make it easier for your database to do the search.</source>
          <target state="translated">그러면 변경 목록 맨 위에 검색 상자가 추가됩니다. 누군가가 검색어를 입력하면 Django는 &lt;code&gt;question_text&lt;/code&gt; 필드를 검색합니다 . 원하는만큼 많은 필드를 사용할 수 있습니다 . 장면 뒤에서 &lt;code&gt;LIKE&lt;/code&gt; 쿼리를 사용하기 때문에 검색 필드 수를 적당한 수로 제한하면 데이터베이스에서 검색을보다 쉽게 ​​수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53b1bd1611ab04066e302e63e9681e124ce34bee" translate="yes" xml:space="preserve">
          <source>That code loads the template called &lt;code&gt;polls/index.html&lt;/code&gt; and passes it a context. The context is a dictionary mapping template variable names to Python objects.</source>
          <target state="translated">이 코드는 &lt;code&gt;polls/index.html&lt;/code&gt; 이라는 템플릿을로드하고 컨텍스트를 전달합니다. 컨텍스트는 템플릿 변수 이름을 Python 객체에 매핑하는 사전입니다.</target>
        </trans-unit>
        <trans-unit id="48da30043b968a63979b4407e5ce8ec5983be9c4" translate="yes" xml:space="preserve">
          <source>That code will give us an admin change list that looks something like this:</source>
          <target state="translated">이 코드는 다음과 같은 관리자 변경 목록을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c544ddf945e341dc2ec8e9fa59cf81c9ae7e6b05" translate="yes" xml:space="preserve">
          <source>That in-memory structure is also used to work out what the differences are between your models and the current state of your migrations; Django runs through all the changes, in order, on an in-memory set of models to come up with the state of your models last time you ran &lt;code&gt;makemigrations&lt;/code&gt;. It then uses these models to compare against the ones in your &lt;code&gt;models.py&lt;/code&gt; files to work out what you have changed.</source>
          <target state="translated">이 인 메모리 구조는 모델과 현재 마이그레이션 상태의 차이점을 해결하는데도 사용됩니다. Django는 메모리 내 모델 세트에서 모든 변경 사항을 순서대로 실행하여 마지막으로 &lt;code&gt;makemigrations&lt;/code&gt; 를 실행할 때 모델의 상태를 표시합니다 . 그런 다음이 모델을 사용하여 &lt;code&gt;models.py&lt;/code&gt; 파일 의 모델과 비교하여 변경 한 사항을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="071a4f0e999eb82664a30c3a9612714d7cbb38eb" translate="yes" xml:space="preserve">
          <source>That included the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags. To get more granular, you can use each radio button&amp;rsquo;s &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;choice_label&lt;/code&gt; and &lt;code&gt;id_for_label&lt;/code&gt; attributes. For example, this template&amp;hellip;</source>
          <target state="translated">여기에는 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그가 포함되었습니다 . 보다 세분화하려면 각 &lt;code&gt;choice_label&lt;/code&gt; 단추의 &lt;code&gt;tag&lt;/code&gt; , choice_label 및 &lt;code&gt;id_for_label&lt;/code&gt; 속성을 사용할 수 있습니다 . 예를 들어이 템플릿은&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="289dc239d96a218a0a9144dbea0ff8bfadbac7a3" translate="yes" xml:space="preserve">
          <source>That is, all the relevant toppings will have been fetched in a single query, and used to make &lt;code&gt;QuerySets&lt;/code&gt; that have a pre-filled cache of the relevant results; these &lt;code&gt;QuerySets&lt;/code&gt; are then used in the &lt;code&gt;self.toppings.all()&lt;/code&gt; calls.</source>
          <target state="translated">즉, 모든 관련 토핑이 단일 쿼리에서 페치되고 관련 결과에 대해 사전에 채워진 캐시가있는 &lt;code&gt;QuerySets&lt;/code&gt; 을 작성하는 데 사용됩니다 . 그런 다음 이 &lt;code&gt;QuerySets&lt;/code&gt; 은 &lt;code&gt;self.toppings.all()&lt;/code&gt; 호출 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5aa23348e5696dee385c18dc4e8dccbe7cd90d4e" translate="yes" xml:space="preserve">
          <source>That is, the database can typically do things faster than Python can, which can do them faster than the template language can:</source>
          <target state="translated">즉, 데이터베이스는 일반적으로 Python보다 더 빠른 작업을 수행 할 수 있으며, 이는 템플릿 언어보다 더 빠르게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bcf07749fa0e5b0650c8d97b67c9b33e4c09165" translate="yes" xml:space="preserve">
          <source>That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write:</source>
          <target state="translated">다소 혼란스러워 보일 수 있으므로 예제가 명확해질 것입니다. 제목에 &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; 이 있고 2008 년에 게시 된 (두 조건을 모두 만족하는 동일한 항목) 항목이 포함 된 모든 블로그를 선택하려면 다음과 같이 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="efe034055f31a009c043a950555deab45463315f" translate="yes" xml:space="preserve">
          <source>That means the same database query will be executed twice, effectively doubling your database load. Also, there&amp;rsquo;s a possibility the two lists may not include the same database records, because an &lt;code&gt;Entry&lt;/code&gt; may have been added or deleted in the split second between the two requests.</source>
          <target state="translated">즉, 동일한 데이터베이스 쿼리가 두 번 실행되어 효과적으로 데이터베이스로드가 두 배가됩니다. 또한 두 요청 사이에 &lt;code&gt;Entry&lt;/code&gt; 이 추가되거나 삭제되었을 수 있으므로 두 목록에 동일한 데이터베이스 레코드가 포함되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa0735a4426dd841891a46317d94e2793cbd4563" translate="yes" xml:space="preserve">
          <source>That method should always return a natural key tuple &amp;ndash; in this example, &lt;code&gt;(first name, last name)&lt;/code&gt;. Then, when you call &lt;code&gt;serializers.serialize()&lt;/code&gt;, you provide &lt;code&gt;use_natural_foreign_keys=True&lt;/code&gt; or &lt;code&gt;use_natural_primary_keys=True&lt;/code&gt; arguments:</source>
          <target state="translated">이 방법은 항상 자연스러운 키 튜플을 반환해야합니다 &lt;code&gt;(first name, last name)&lt;/code&gt; 이 예에서는 (이름, 성)) . 그런 다음 &lt;code&gt;serializers.serialize()&lt;/code&gt; 를 호출 하면 &lt;code&gt;use_natural_foreign_keys=True&lt;/code&gt; 또는 &lt;code&gt;use_natural_primary_keys=True&lt;/code&gt; 인수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="65dd16f1ec104548ec7701aae2503e9f4b454448" translate="yes" xml:space="preserve">
          <source>That other developers want to see tests in your software before they take it seriously is yet another reason for you to start writing tests.</source>
          <target state="translated">다른 개발자가 심각하게 시험을보기 전에 소프트웨어에서 테스트를보고 싶어한다는 것이 테스트 작성을 시작하는 또 다른 이유입니다.</target>
        </trans-unit>
        <trans-unit id="adb1db80b8ce0c45dae224e951fae821d27e99d5" translate="yes" xml:space="preserve">
          <source>That said, generic views will have a limit. If you find you&amp;rsquo;re struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views.</source>
          <target state="translated">즉, 일반 뷰에는 한계가 있습니다. 뷰를 일반 뷰의 서브 클래스로 구현하는 데 어려움을 겪고 있다면 고유 한 클래스 기반 또는 기능 뷰를 사용하여 필요한 코드 만 작성하는 것이 더 효과적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5dbbec81f2e874f8570f268c854b02ab7b667a94" translate="yes" xml:space="preserve">
          <source>That small bit of model code gives Django a lot of information. With it, Django is able to:</source>
          <target state="translated">이 작은 모델 코드는 Django에게 많은 정보를 제공합니다. 이를 통해 Django는 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bffd048ee5d42a28e6af58ccee988aee06a54311" translate="yes" xml:space="preserve">
          <source>That will cause &lt;code&gt;RockNRollConfig&lt;/code&gt; to be used when &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains &lt;code&gt;'rock_n_roll'&lt;/code&gt;. This allows you to make use of &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; features without requiring your users to update their &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. Besides this use case, it&amp;rsquo;s best to avoid using &lt;code&gt;default_app_config&lt;/code&gt; and instead specify the app config class in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; as described next.</source>
          <target state="translated">즉 원인이됩니다 &lt;code&gt;RockNRollConfig&lt;/code&gt; 이 때 사용되는 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 이&lt;/a&gt; 포함되어 &lt;code&gt;'rock_n_roll'&lt;/code&gt; . 이를 통해 사용자가 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정 을 업데이트하지 않고도 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 기능을 사용할 수 있습니다 . 이 사용 사례 외에도 &lt;code&gt;default_app_config&lt;/code&gt; 사용을 피하고 대신 다음 설명과 같이 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 앱 구성 클래스를 지정하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="82358bc304b59adb1ce477f15ec4d947957f7e4c" translate="yes" xml:space="preserve">
          <source>That would result in a rendered template like this:</source>
          <target state="translated">그러면 다음과 같이 렌더링 된 템플릿이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="800ac4c0b21ad6254608419b69aaf1e330a8c347" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;ll create a directory &lt;code&gt;polls&lt;/code&gt;, which is laid out like this:</source>
          <target state="translated">그러면 다음과 같이 디렉토리 &lt;code&gt;polls&lt;/code&gt; 가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="c390e4d250f269cd7cc6cc5a6cf7b4cce799a767" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a pretty minimal example, but it illustrates the idea nicely. Of course, you&amp;rsquo;ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:</source>
          <target state="translated">그것은 최소한의 예이지만 아이디어를 훌륭하게 보여줍니다. 물론 일반적으로 객체를 재정렬하는 것 이상의 작업을 수행해야합니다. 특정 출판사에서 도서 목록을 제공하려는 경우 동일한 기술을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d31c753d4cbaf73cda1d28d43de3f946ce9afaa5" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a pretty minimal example, but it illustrates the idea nicely. You&amp;rsquo;ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:</source>
          <target state="translated">That&amp;rsquo;s a pretty minimal example, but it illustrates the idea nicely. You&amp;rsquo;ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:</target>
        </trans-unit>
        <trans-unit id="64da3894500efeef67df0244845ff37f66a37a6d" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s actually all there is to writing an action! However, we&amp;rsquo;ll take one more optional-but-useful step and give the action a &amp;ldquo;nice&amp;rdquo; title in the admin. By default, this action would appear in the action list as &amp;ldquo;Make published&amp;rdquo; &amp;ndash; the function name, with underscores replaced by spaces. That&amp;rsquo;s fine, but we can provide a better, more human-friendly name by giving the &lt;code&gt;make_published&lt;/code&gt; function a &lt;code&gt;short_description&lt;/code&gt; attribute:</source>
          <target state="translated">실제로 액션을 작성하는 것이 전부입니다! 그러나 선택 사항이지만 유용한 단계를 하나 더 수행하고 관리자에게 조치에 &quot;좋은&quot;제목을 부여합니다. 기본적으로이 작업은 작업 목록에&amp;ldquo;게시&amp;rdquo;로 표시됩니다. 함수 이름은 밑줄이 공백으로 바뀝니다. 괜찮습니다.하지만 &lt;code&gt;make_published&lt;/code&gt; 함수에 &lt;code&gt;short_description&lt;/code&gt; 속성 을 제공하여보다 인간 친화적 인 이름을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bbcb4669308c0fc548b8d6cf52271da06f3d632e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a &lt;code&gt;template_name&lt;/code&gt; attribute to the view, but in the absence of an explicit template Django will infer one from the object&amp;rsquo;s name. In this case, the inferred template will be &lt;code&gt;&quot;books/publisher_list.html&quot;&lt;/code&gt; &amp;ndash; the &amp;ldquo;books&amp;rdquo; part comes from the name of the app that defines the model, while the &amp;ldquo;publisher&amp;rdquo; bit is the lowercased version of the model&amp;rsquo;s name.</source>
          <target state="translated">이것이 우리가 작성해야하는 모든 파이썬 코드입니다. 그러나 여전히 템플릿을 작성해야합니다. 뷰에 &lt;code&gt;template_name&lt;/code&gt; 속성을 추가하여 사용할 템플릿을 명시 적으로 알 수 있지만 명시 적 템플릿이 없으면 Django가 객체의 이름에서 하나를 추론합니다. 이 경우 유추 된 템플릿은 &lt;code&gt;&quot;books/publisher_list.html&quot;&lt;/code&gt; 입니다 . &quot;books&quot;부분은 모델을 정의하는 앱 이름에서 비롯된 반면 &quot;publisher&quot;비트는 모델 이름의 소문자 버전입니다.</target>
        </trans-unit>
        <trans-unit id="7cdd2c9d53596117569f6f3457397de9dba7594c" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to do for development.</source>
          <target state="translated">그것이 개발을 위해해야 ​​할 전부입니다.</target>
        </trans-unit>
        <trans-unit id="b475ad9547603552f728fc11fc51feba721041c7" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to get started, but the forms framework puts a lot more at your fingertips. Once you understand the basics of the process described above, you should be prepared to understand other features of the forms system and ready to learn a bit more about the underlying machinery.</source>
          <target state="translated">이것이 시작하는 데 필요한 전부이지만 양식 프레임 워크는 여러분의 손끝에 더 많은 것을 제공합니다. 위에서 설명한 프로세스의 기본 사항을 이해 한 후에는 양식 시스템의 다른 기능을 이해하고 기본 기계에 대해 조금 더 배울 준비가되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c689359d3ba5ee9b9ac46428d1e42a374db404f1" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because this view is &lt;strong&gt;grossly inefficient&lt;/strong&gt; and probably &lt;strong&gt;insecure&lt;/strong&gt;. This is only intended for local development, and should &lt;strong&gt;never be used in production&lt;/strong&gt;.</source>
          <target state="translated">이 견해는 &lt;strong&gt;매우 비효율적&lt;/strong&gt; 이며 아마도 &lt;strong&gt;안전하지&lt;/strong&gt; 않기 때문 입니다 . 이는 로컬 개발만을위한 것이며 &lt;strong&gt;프로덕션 환경에서 사용&lt;/strong&gt; 해서는 &lt;strong&gt;안됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="07ab28316c8c0e4463f7f1e0bdad9265bb11fa25" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s especially true when automated tests could do this for you in seconds. If something&amp;rsquo;s gone wrong, tests will also assist in identifying the code that&amp;rsquo;s causing the unexpected behavior.</source>
          <target state="translated">자동화 된 테스트가 몇 초 안에이를 수행 할 수있는 경우 특히 그렇습니다. 문제가 발생하면 테스트에서 예기치 않은 동작을 유발하는 코드를 식별하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="6c507dacfa36a6fb4a0685368ff0d2a258d13a5a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it &amp;ndash; now your Django install will use Bcrypt as the default storage algorithm.</source>
          <target state="translated">이제 Django 설치가 Bcrypt를 기본 스토리지 알고리즘으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="41e38b5ea86c7d70cc2fbbb5b84e6d748b15b992" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it &amp;ndash; now your Django install will use more iterations when it stores passwords using PBKDF2.</source>
          <target state="translated">Django 설치는 PBKDF2를 사용하여 비밀번호를 저장할 때 더 많은 반복을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1ea2d6826dd656c26e6a86836a3d9c6a79b1bb14" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it &amp;ndash; you can now &lt;a href=&quot;tutorial01&quot;&gt;move onto the tutorial&lt;/a&gt;.</source>
          <target state="translated">이제 &lt;a href=&quot;tutorial01&quot;&gt;끝났습니다&lt;/a&gt; . 이제 튜토리얼로 넘어갈 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6185938d5bae5d8cc7ee477134ef950f601066fb" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it!</source>
          <target state="translated">그게 다야!</target>
        </trans-unit>
        <trans-unit id="ce81fa2071e09c61a45e1968c92b799e7f415413" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it. Your translations are ready for use.</source>
          <target state="translated">그게 다야. 번역을 사용할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="454d41e6971fa418b635ea4096beaae7dafdd130" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s really all there is to it! If you&amp;rsquo;re itching to write your own actions, you now know enough to get started. The rest of this document covers more advanced techniques.</source>
          <target state="translated">그게 전부입니다! 자신의 행동을 작성하고자하는 경우 이제 시작하기에 충분합니다. 이 문서의 나머지 부분에서는보다 고급 기술을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="42920953b658a28d4415f72cd4d0a697f68d9c2d" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;generic views reference&lt;/a&gt; documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views.</source>
          <target state="translated">그게 전부입니다. 일반 뷰의 모든 멋진 기능은 일반 뷰에서 설정 한 속성을 변경하는 데 있습니다. &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;일반적인 견해는 참조&lt;/a&gt; 문서의 모든 세부 사항 일반적인 전망과 옵션을; 이 문서의 나머지 부분에서는 일반적인보기를 사용자 정의하고 확장 할 수있는 일반적인 방법 중 일부를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="ed003d8ad16a4f03c4ed2b1baba5db5367744573" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most Web servers.</source>
          <target state="translated">이것이 Django 사용자 데이터베이스를 확인하고 기본 제공 권한을 쿼리하는 기본 인증 백엔드입니다. 속도 제한 메커니즘을 통한 무차별 대입 공격에 대한 보호 기능을 제공하지 않습니다. 사용자 정의 인증 백엔드에서 고유 한 속도 제한 메커니즘을 구현하거나 대부분의 웹 서버에서 제공하는 메커니즘을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44c6875fd2da14e4e48039740c2e68b864eca0b3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s what &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is for: it collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production.</source>
          <target state="translated">이것이 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 의 목적입니다. 각 응용 프로그램 (및 지정한 다른 장소)에서 정적 파일을 프로덕션에서 쉽게 제공 할 수있는 단일 위치로 수집합니다.</target>
        </trans-unit>
        <trans-unit id="70a5c41ad0a3b7b943000f801f0941f8b67bb0ca" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s where caching comes in.</source>
          <target state="translated">그것이 캐싱이 들어오는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="9816316502bb06e8337dbdb06d1fe4edf689f03e" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;From:&amp;rdquo; header of the email will be the value of the &lt;a href=&quot;../ref/settings#std:setting-SERVER_EMAIL&quot;&gt;&lt;code&gt;SERVER_EMAIL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이메일의 &quot;보낸 사람 :&quot;헤더는 &lt;a href=&quot;../ref/settings#std:setting-SERVER_EMAIL&quot;&gt; &lt;code&gt;SERVER_EMAIL&lt;/code&gt; &lt;/a&gt; 설정 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="bde6550e7be8abcd02e5140d58371f7e8cb6332b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;delete selected objects&amp;rdquo; action uses &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;QuerySet.delete()&lt;/code&gt;&lt;/a&gt; for efficiency reasons, which has an important caveat: your model&amp;rsquo;s &lt;code&gt;delete()&lt;/code&gt; method will not be called.</source>
          <target state="translated">&amp;ldquo;선택된 객체 삭제&amp;rdquo;작업은 효율성을 위해 &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;QuerySet.delete()&lt;/code&gt; &lt;/a&gt; 를 사용합니다. 이 경우 중요한주의 사항이 있습니다. 모델의 &lt;code&gt;delete()&lt;/code&gt; 메서드는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5058b9e1433099269d84054706fcaefa73ff701c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;initial migrations&amp;rdquo; for an app are the migrations that create the first version of that app&amp;rsquo;s tables. Usually an app will have one initial migration, but in some cases of complex model interdependencies it may have two or more.</source>
          <target state="translated">앱의 &quot;초기 마이그레이션&quot;은 해당 앱 테이블의 첫 번째 버전을 생성하는 마이그레이션입니다. 일반적으로 앱에는 하나의 초기 마이그레이션이 있지만 복잡한 모델 상호 종속성의 경우 둘 이상이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="663a6a8180e11211d8df5754d07dec4cee8071d2" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;no data&amp;rdquo; value for a band is generally a special marker value used to mark pixels that are not valid data. Such pixels should generally not be displayed, nor contribute to analysis operations.</source>
          <target state="translated">밴드의 &quot;데이터 없음&quot;값은 일반적으로 유효하지 않은 픽셀을 표시하는 데 사용되는 특수 마커 값입니다. 이러한 픽셀은 일반적으로 표시되거나 분석 작업에 기여하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="070336a12c43e48880c5f6128ef8b5f50b9d218d" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;object_id&amp;rdquo; field doesn&amp;rsquo;t have to be the same type as the primary key fields on the related models, but their primary key values must be coercible to the same type as the &amp;ldquo;object_id&amp;rdquo; field by its &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&quot;object_id&quot;필드는 관련 모델의 기본 키 필드와 동일한 유형일 필요는 &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt; &lt;code&gt;get_db_prep_value()&lt;/code&gt; &lt;/a&gt; 메소드를 통해 기본 키 값이 &quot;object_id&quot;필드와 동일한 유형으로 강제 변환되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="5aa4ebf307e26a41dd3054650df3b70a6946d53e" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;other side&amp;rdquo; of a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; relation. That is:</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 관계 의 &quot;다른 쪽&quot; . 그건:</target>
        </trans-unit>
        <trans-unit id="20f1d4d80d9d416c35bc77d26f605a694a944d39" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;sites&amp;rdquo; framework</source>
          <target state="translated">&quot;사이트&quot;프레임 워크</target>
        </trans-unit>
        <trans-unit id="dbd01796ededee1d43c8a7a56fa1b333797d54ef" translate="yes" xml:space="preserve">
          <source>The 1-based page number for this page.</source>
          <target state="translated">이 페이지의 1 기반 페이지 번호입니다.</target>
        </trans-unit>
        <trans-unit id="8ceaa234e93148fdb419fcf63809ee112c32e852" translate="yes" xml:space="preserve">
          <source>The 400 (bad request) view</source>
          <target state="translated">400 (잘못된 요청)보기</target>
        </trans-unit>
        <trans-unit id="9b5a2ee1ce8018db9a7ab39626a920ede7dc260f" translate="yes" xml:space="preserve">
          <source>The 403 (HTTP Forbidden) view</source>
          <target state="translated">403 (HTTP Forbidden)보기</target>
        </trans-unit>
        <trans-unit id="f6fc38ea70a8d7612bb7c8f76e591f75cfbc5ea0" translate="yes" xml:space="preserve">
          <source>The 404 (page not found) view</source>
          <target state="translated">404 (페이지를 찾을 수 없음)보기</target>
        </trans-unit>
        <trans-unit id="225218fd277cf55ba683aa0252a36ee431de2158" translate="yes" xml:space="preserve">
          <source>The 404 view is also called if Django doesn&amp;rsquo;t find a match after checking every regular expression in the URLconf.</source>
          <target state="translated">Django가 URLconf의 모든 정규 표현식을 확인한 후 일치하는 항목을 찾지 못하면 404보기도 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2f004c5f0621cf5d2c07ccc7c5a7960b66241433" translate="yes" xml:space="preserve">
          <source>The 404 view is passed a &lt;a href=&quot;templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; and will have access to variables supplied by your template context processors (e.g. &lt;code&gt;MEDIA_URL&lt;/code&gt;).</source>
          <target state="translated">404보기에는 &lt;a href=&quot;templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt; 가 전달 되고 템플리트 컨텍스트 프로세서 (예 : &lt;code&gt;MEDIA_URL&lt;/code&gt; ) 에서 제공 한 변수에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="233a9dc1ed1bfdad61414d358748edd894d6580c" translate="yes" xml:space="preserve">
          <source>The 500 (server error) view</source>
          <target state="translated">500 (서버 오류)보기</target>
        </trans-unit>
        <trans-unit id="3d5d68a6b5f194b8ab8610b8281f0d1e8bc9628c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#admin-overriding-templates&quot;&gt;Overriding admin templates&lt;/a&gt; section describes how to override or extend the default admin templates. Use the following options to override the default templates used by the &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; views:</source>
          <target state="translated">&lt;a href=&quot;#admin-overriding-templates&quot;&gt;재정의 관리 템플릿&lt;/a&gt; 섹션은 무시하거나 기본 관리 템플릿을 확장하는 방법에 대해 설명합니다. 다음 옵션을 사용하여 &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 보기에서 사용되는 기본 템플리트를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7bcbf10c633d318f5275b1616c827fcd901be2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command calls the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; after each run and passes a list of paths that have been found by the management command. It also receives all command line options of &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;. This is used by the &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">&lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령은 호출 &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt; 의 방법 &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt; 각 실행 후 및 관리 명령에 의해 발견 된 경로 목록을 전달합니다. 또한 &lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; 의&lt;/a&gt; 모든 명령 행 옵션을 수신 합니다 . 기본적으로 &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt; &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 에서&lt;/a&gt; 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6c18aac331e3d27e374da3e6934267353557b292" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; command can be used to generate input for &lt;code&gt;loaddata&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 명령의 입력 생성하는데 사용될 수있다 &lt;code&gt;loaddata&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="77fb9e8fa77f6bd9569778a70c5f0d9126b3860d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django-server-logger&quot;&gt;django.server&lt;/a&gt; logger sends messages at the &lt;code&gt;INFO&lt;/code&gt; level or higher to the console.</source>
          <target state="translated">&lt;a href=&quot;#django-server-logger&quot;&gt;django.server의&lt;/a&gt; 로거는에 메시지를 전송 &lt;code&gt;INFO&lt;/code&gt; 콘솔 수준 이상.</target>
        </trans-unit>
        <trans-unit id="205fe6f0886e01afcabc444b9dfbce747b6e7755" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class used to configure the application has a &lt;a href=&quot;#django.apps.AppConfig.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; class attribute, which is the absolute directory path Django will use as the single base path for the application.</source>
          <target state="translated">&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 응용 프로그램을 구성하는 데 사용되는 클래스는이 &lt;a href=&quot;#django.apps.AppConfig.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt; 장고 응용 프로그램에 대한 하나의 기본 경로로 사용할 절대 디렉토리 경로입니다 클래스 속성을.</target>
        </trans-unit>
        <trans-unit id="c75e85febd79e1123be7fcefdb5b29a58ca50a7a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; provides the following named URL patterns:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; 는&lt;/a&gt; 다음과 같은 명명 된 URL 패턴을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="24ff1f105c4ea53b3a40674800427a57a5c461e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; class requires jQuery by default, so there is no need to add jQuery to your &lt;code&gt;ModelAdmin&lt;/code&gt;&amp;rsquo;s list of media resources unless you have a specific need. For example, if you require the jQuery library to be in the global namespace (for example when using third-party jQuery plugins) or if you need a newer version of jQuery, you will have to include your own copy.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; 의&lt;/a&gt; 클래스는 그래서 당신에 jQuery를 추가 할 필요가 없습니다, 기본적으로 jQuery를 필요로 &lt;code&gt;ModelAdmin&lt;/code&gt; 특정 요구를하지 않는 한 미디어 자원의 목록. 예를 들어 jQuery 라이브러리가 글로벌 네임 스페이스에 있어야하거나 (예 : 타사 jQuery 플러그인을 사용하는 경우) 최신 버전의 jQuery가 필요한 경우 고유 한 사본을 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="58fcb0270a7eef62d1435ce84e6b4090b60feb5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model has a custom manager that has the following helper methods (in addition to the methods provided by &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.BaseUserManager&quot;&gt;&lt;code&gt;BaseUserManager&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델 (에서 제공하는 방법 외에 다음 헬퍼 메소드가 지정 관리자가 &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.BaseUserManager&quot;&gt; &lt;code&gt;BaseUserManager&lt;/code&gt; 을&lt;/a&gt; ) :</target>
        </trans-unit>
        <trans-unit id="70d66b6896e1917b11974971bf2ef497d078305b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.auth.models.User.username&quot;&gt;&lt;code&gt;username&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.models.User.password&quot;&gt;&lt;code&gt;password&lt;/code&gt;&lt;/a&gt; are set as given. The domain portion of &lt;a href=&quot;#django.contrib.auth.models.User.email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; is automatically converted to lowercase, and the returned &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object will have &lt;a href=&quot;#django.contrib.auth.models.User.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.User.username&quot;&gt; &lt;code&gt;username&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.auth.models.User.password&quot;&gt; &lt;code&gt;password&lt;/code&gt; &lt;/a&gt; 주어진 설정됩니다. &lt;a href=&quot;#django.contrib.auth.models.User.email&quot;&gt; &lt;code&gt;email&lt;/code&gt; &lt;/a&gt; 의 도메인 부분 은 자동으로 소문자로 변환되며 반환 된 &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 객체는 &lt;a href=&quot;#django.contrib.auth.models.User.is_active&quot;&gt; &lt;code&gt;is_active&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="1569586e8a6dd5e32f78dc8440682f6b0d6efcac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt; class inherits all properties from an &lt;a href=&quot;admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; class. However, it adds a couple of its own for working with the generic relation:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; 의&lt;/a&gt; 클래스는 모든 속성을 상속 &lt;a href=&quot;admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; 의&lt;/a&gt; 클래스를. 그러나 일반적인 관계 작업을 위해 자체적으로 몇 가지를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="930d94452068a4e7093d8b29b29db44c3180bfc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt; method is especially useful when you know you need to work with a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; but don&amp;rsquo;t want to go to the trouble of obtaining the model&amp;rsquo;s metadata to perform a manual lookup:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;get_for_model()&lt;/code&gt; &lt;/a&gt; 당신이 작업에 필요한 알고 방법은 특히 유용 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 이&lt;/a&gt; 있지만 수동 검색을 수행 할 수있는 모델의 메타 데이터를 얻는 문제에 가고 싶어하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="8fbf50cafd75c6ab7df5bd52bc8658fadc09a916" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; can do all of the work.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; 는&lt;/a&gt; 모든 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1a58f7e3a08213f1099f37460cb022f19ed3b6a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt;&lt;code&gt;sitemaps.FlatPageSitemap&lt;/code&gt;&lt;/a&gt; class looks at all publicly visible &lt;a href=&quot;#module-django.contrib.flatpages&quot;&gt;&lt;code&gt;flatpages&lt;/code&gt;&lt;/a&gt; defined for the current &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; (see the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites documentation&lt;/code&gt;&lt;/a&gt;) and creates an entry in the sitemap. These entries include only the &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; attribute &amp;ndash; not &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt;&lt;code&gt;changefreq&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt; &lt;code&gt;sitemaps.FlatPageSitemap&lt;/code&gt; 의&lt;/a&gt; 모든 공개에서 클래스 외모 &lt;a href=&quot;#module-django.contrib.flatpages&quot;&gt; &lt;code&gt;flatpages&lt;/code&gt; &lt;/a&gt; 현재 정의 &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; 는&lt;/a&gt; 합니다 (참조 &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;sites documentation&lt;/code&gt; &lt;/a&gt; )와 맵에 항목을 만듭니다. 이러한 항목에는 &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt; &lt;code&gt;lastmod&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt; &lt;code&gt;changefreq&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.priority&quot;&gt; &lt;code&gt;priority&lt;/code&gt; 가&lt;/a&gt; 아닌 &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt; 속성 만 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="976d6231fac29a2fdd43b178fbafb53b71ee57cb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.forms.widgets.OpenLayersWidget&quot;&gt;&lt;code&gt;OpenLayersWidget&lt;/code&gt;&lt;/a&gt; note about JavaScript file hosting above also applies here. See also this &lt;a href=&quot;https://help.openstreetmap.org/questions/10920/how-to-embed-a-map-in-my-https-site&quot;&gt;FAQ answer&lt;/a&gt; about &lt;code&gt;https&lt;/code&gt; access to map tiles.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.forms.widgets.OpenLayersWidget&quot;&gt; &lt;code&gt;OpenLayersWidget&lt;/code&gt; 의&lt;/a&gt; 자바 스크립트 파일은 위의 호스팅에 대한 참고도 여기에 적용됩니다. 지도 타일 에 대한 &lt;code&gt;https&lt;/code&gt; 액세스에 대한 이 &lt;a href=&quot;https://help.openstreetmap.org/questions/10920/how-to-embed-a-map-in-my-https-site&quot;&gt;FAQ 답변&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b03baba97f3c3395a00e87a3bc24195c0cf7d4c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt;&lt;code&gt;GeoIP2&lt;/code&gt;&lt;/a&gt; object is a wrapper for the &lt;a href=&quot;https://geoip2.readthedocs.io/&quot;&gt;MaxMind geoip2 Python library&lt;/a&gt;. &lt;a href=&quot;#id6&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt; &lt;code&gt;GeoIP2&lt;/code&gt; 의&lt;/a&gt; 객체는 대한 래퍼입니다 &lt;a href=&quot;https://geoip2.readthedocs.io/&quot;&gt;MaxMind geoip2 파이썬 라이브러리&lt;/a&gt; . &lt;a href=&quot;#id6&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad08113baee47b140a517c91fe0b90cde3ca8fd5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; equality operator uses &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.equals_exact&quot;&gt;&lt;code&gt;equals_exact()&lt;/code&gt;&lt;/a&gt;, not &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.equals&quot;&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/a&gt;, i.e. it requires the compared geometries to have the same coordinates in the same positions with the same SRIDs:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; 의&lt;/a&gt; 항등 연산자 용도 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.equals_exact&quot;&gt; &lt;code&gt;equals_exact()&lt;/code&gt; &lt;/a&gt; 아닌 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.equals&quot;&gt; &lt;code&gt;equals()&lt;/code&gt; &lt;/a&gt; 가 동일한 SRIDs과 동일한 위치에 동일한 좌표를 갖는 형상 비교를 요구, 즉 :</target>
        </trans-unit>
        <trans-unit id="1d8ec629be5671a5dde8dcc4820b65f0294d3080" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; class provides a way to map the contents of vector spatial data files (e.g. shapefiles) into GeoDjango models.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt; 클래스는 GeoDjango 모델로 벡터 공간 데이터 파일의 내용을지도 할 수있는 방법 (예 : shape 파일)를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1bf1944b981263db019523c1922b581d0c5ce335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; does all of the work. Each time any Django application raises a 404 error, this middleware checks the redirects database for the requested URL as a last resort. Specifically, it checks for a redirect with the given &lt;code&gt;old_path&lt;/code&gt; with a site ID that corresponds to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; 는&lt;/a&gt; 모든 작업을 수행합니다. Django 애플리케이션에서 404 오류가 발생할 때마다이 미들웨어는 요청 된 URL에 대한 리디렉션 데이터베이스를 최후의 수단으로 확인합니다. 특히 &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt; 설정에 해당하는 사이트 ID로 &lt;code&gt;old_path&lt;/code&gt; 가 지정된 리디렉션을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="8d25fe9e16904d30a9d1e8ade5a35554db949683" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt;&lt;code&gt;django.contrib.sitemaps.GenericSitemap&lt;/code&gt;&lt;/a&gt; class allows you to create a sitemap by passing it a dictionary which has to contain at least a &lt;code&gt;queryset&lt;/code&gt; entry. This queryset will be used to generate the items of the sitemap. It may also have a &lt;code&gt;date_field&lt;/code&gt; entry that specifies a date field for objects retrieved from the &lt;code&gt;queryset&lt;/code&gt;. This will be used for the &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt; attribute in the generated sitemap.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt; &lt;code&gt;django.contrib.sitemaps.GenericSitemap&lt;/code&gt; 의&lt;/a&gt; 클래스는 적어도 포함하는 사전을 전달하여 사이트 맵을 만들 수 &lt;code&gt;queryset&lt;/code&gt; 입력합니다. 이 검색어는 사이트 맵의 항목을 생성하는 데 사용됩니다. 또한 &lt;code&gt;queryset&lt;/code&gt; 에서 검색된 객체의 날짜 필드를 지정 하는 &lt;code&gt;date_field&lt;/code&gt; 항목 이있을 수 있습니다 . 생성 된 사이트 맵 의 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt; &lt;code&gt;lastmod&lt;/code&gt; &lt;/a&gt; 속성에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c6855c901496386e03eb1c169232e64b97e3e0bf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt;&lt;code&gt;changefreq&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.protocol&quot;&gt;&lt;code&gt;protocol&lt;/code&gt;&lt;/a&gt; keyword arguments allow specifying these attributes for all URLs.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt; &lt;code&gt;priority&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt; &lt;code&gt;changefreq&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.protocol&quot;&gt; &lt;code&gt;protocol&lt;/code&gt; &lt;/a&gt; 키워드 인자는 모든 URL에 대한 이러한 속성을 지정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c9d2e5c8919fbc45132133f27dfd99f249e7506" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt;&lt;code&gt;ping_google()&lt;/code&gt;&lt;/a&gt; command only works if you have registered your site with &lt;a href=&quot;https://www.google.com/webmasters/tools/&quot;&gt;Google Webmaster Tools&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt; &lt;code&gt;ping_google()&lt;/code&gt; &lt;/a&gt; 당신과 함께 사이트에 등록 한 경우 명령은 작동 &lt;a href=&quot;https://www.google.com/webmasters/tools/&quot;&gt;구글 웹 마스터 도구를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3ec9c02de90f46acb26d3cf0c5fe5eacf431a9ba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt;&lt;code&gt;django.contrib.sitemaps.views.sitemap()&lt;/code&gt;&lt;/a&gt; view should take a &lt;code&gt;section&lt;/code&gt; keyword argument.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt; &lt;code&gt;django.contrib.sitemaps.views.sitemap()&lt;/code&gt; &lt;/a&gt; 보기는해야 &lt;code&gt;section&lt;/code&gt; 키워드 인수를.</target>
        </trans-unit>
        <trans-unit id="00461ba935e4732ff4f725c4a3fb38788dd254be" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt; uses this behind the scenes to replace the paths with their hashed counterparts and update the cache appropriately.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt; &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 은&lt;/a&gt; 자신의 해시 대응과 경로를 교체하고 적절하게 캐시를 업데이트하기 위해 무대 뒤에서 이것을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5807ef893b888da390ced00f3be8ad423d972066" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.FieldError&quot;&gt;&lt;code&gt;FieldError&lt;/code&gt;&lt;/a&gt; exception is raised when there is a problem with a model field. This can happen for several reasons:</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.FieldError&quot;&gt; &lt;code&gt;FieldError&lt;/code&gt; 의&lt;/a&gt; 모델 필드에 문제가있는 경우 예외가 발생합니다. 여러 가지 이유로 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08eb59e15ba839910537a780ef53d936d8656497" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception is raised when Django is somehow improperly configured &amp;ndash; for example, if a value in &lt;code&gt;settings.py&lt;/code&gt; is incorrect or unparseable.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예를 들어,의 값 경우 - 예외가 장고가 어떻게 든 잘못 구성된 경우 발생 &lt;code&gt;settings.py&lt;/code&gt; 가 부정확하거나 파싱 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4d856f27fc274b9c94fa28e6c5f4e32834f477c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.MiddlewareNotUsed&quot;&gt;&lt;code&gt;MiddlewareNotUsed&lt;/code&gt;&lt;/a&gt; exception is raised when a middleware is not used in the server configuration.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.MiddlewareNotUsed&quot;&gt; &lt;code&gt;MiddlewareNotUsed&lt;/code&gt; 의&lt;/a&gt; 미들웨어가 서버 구성에서 사용되지 않는 경우 예외가 발생된다.</target>
        </trans-unit>
        <trans-unit id="2aea3bcd201c6c300edfdae4bce2881f6f70110a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception is raised by a query if only one object is expected, but multiple objects are returned. A base version of this exception is provided in &lt;a href=&quot;#module-django.core.exceptions&quot;&gt;&lt;code&gt;django.core.exceptions&lt;/code&gt;&lt;/a&gt;; each model class contains a subclassed version that can be used to identify the specific object type that has returned multiple objects.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; 의&lt;/a&gt; 단 하나의 객체가 예상되는 경우 예외는 쿼리에 의해 발생하지만, 여러 개체가 반환됩니다. 이 예외의 기본 버전은 &lt;a href=&quot;#module-django.core.exceptions&quot;&gt; &lt;code&gt;django.core.exceptions&lt;/code&gt; 에&lt;/a&gt; 제공됩니다 . 각 모델 클래스에는 여러 객체를 반환 한 특정 객체 유형을 식별하는 데 사용할 수있는 서브 클래스 버전이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2df4f0dea240ffa2556f1307d0618d99f64ee9f9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception is raised when a user does not have permission to perform the action requested.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; 의&lt;/a&gt; 사용자가 요청 된 작업을 수행 할 수있는 권한이없는 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5236e890510771e6c65be5d890bb2fc46dc88206" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.RequestAborted&quot;&gt;&lt;code&gt;RequestAborted&lt;/code&gt;&lt;/a&gt; exception is raised when a HTTP body being read in by the handler is cut off midstream and the client connection closes, or when the client does not send data and hits a timeout where the server closes the connection.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.RequestAborted&quot;&gt; &lt;code&gt;RequestAborted&lt;/code&gt; 의&lt;/a&gt; HTTP를 본체 중류와 클라이언트 연결 닫히고 차단, 또는 클라이언트가 데이터를 전송하고 서버가 연결을 종료 타임 아웃을 명중하지 않을 때 핸들러에서 읽을 때 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="48bdd0cc14b0cbaacbe1147257c65cc55302c144" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie. Subclasses of &lt;code&gt;SuspiciousOperation&lt;/code&gt; include:</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; 의&lt;/a&gt; 사용자가 이러한 세션 쿠키와 조작으로, 보안의 관점에서 의심스러운 것으로 간주되어야하는 동작을 수행 할 때 예외가 발생된다. &lt;code&gt;SuspiciousOperation&lt;/code&gt; 의 서브 클래스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="63869f0c1b3cd05cde2274e43d9fa6ad163310a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; exception is raised when code that is only allowed in synchronous Python code is called from an asynchronous context (a thread with a running asynchronous event loop). These parts of Django are generally heavily reliant on thread-safety to function and don&amp;rsquo;t work correctly under coroutines sharing the same thread.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; 의&lt;/a&gt; 동기식 파이썬 코드 허용 코드는 비동기 상황 (주행 비동기 이벤트 루프 스레드)로부터 호출 될 때 예외가 발생된다. Django의 이러한 부분은 일반적으로 스레드 안전성에 크게 의존하여 기능하며 동일한 스레드를 공유하는 코 루틴에서는 올바르게 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c0df17795b1a187f135b818ffb0610f92d8e948f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception is raised when data fails form or model field validation. For more information about validation, see &lt;a href=&quot;forms/validation&quot;&gt;Form and Field Validation&lt;/a&gt;, &lt;a href=&quot;models/instances#validating-objects&quot;&gt;Model Field Validation&lt;/a&gt; and the &lt;a href=&quot;validators&quot;&gt;Validator Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 의&lt;/a&gt; 데이터 형식 모델 필드 유효성 검사를 실패 할 경우 예외가 발생합니다. 유효성 검증에 대한 자세한 정보는 &lt;a href=&quot;forms/validation&quot;&gt;양식 및 필드 유효성 검증&lt;/a&gt; , &lt;a href=&quot;models/instances#validating-objects&quot;&gt;모델 필드 유효성 검증&lt;/a&gt; 및 유효성 &lt;a href=&quot;validators&quot;&gt;검증기 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2ac200645906bbdbf891599c7e44ef5c649d1cc3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.ViewDoesNotExist&quot;&gt;&lt;code&gt;ViewDoesNotExist&lt;/code&gt;&lt;/a&gt; exception is raised by &lt;a href=&quot;urlresolvers#module-django.urls&quot;&gt;&lt;code&gt;django.urls&lt;/code&gt;&lt;/a&gt; when a requested view does not exist.</source>
          <target state="translated">&lt;a href=&quot;#django.core.exceptions.ViewDoesNotExist&quot;&gt; &lt;code&gt;ViewDoesNotExist&lt;/code&gt; 의&lt;/a&gt; 예외에 의해 발생 &lt;a href=&quot;urlresolvers#module-django.urls&quot;&gt; &lt;code&gt;django.urls&lt;/code&gt; &lt;/a&gt; 요청 뷰가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="bf0d82f2103c79bef15a3b0eadc8ff87e72b63c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class is a thin wrapper around a Python &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; with some Django-specific additions. Internally, Django uses this class when it needs to represent a file.</source>
          <target state="translated">&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 클래스는 파이썬 주위에 얇은 래퍼 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;파일 객체&lt;/a&gt; 일부 장고 고유의 추가와 함께. 내부적으로 Django는 파일을 나타내야 할 때이 클래스를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="92713ac6d542470f46874a5de111377028709f07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt; class implements basic file storage on a local filesystem. It inherits from &lt;a href=&quot;#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; and provides implementations for all the public methods thereof.</source>
          <target state="translated">&lt;a href=&quot;#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; &lt;/a&gt; 로컬 파일 시스템에 클래스가 구현하는 기본 파일 저장. &lt;a href=&quot;#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt; 에서 상속되며 모든 공용 메소드에 대한 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3c01be0471569c57192a09a290d29e6abceb94cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary.</source>
          <target state="translated">&lt;a href=&quot;#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt; 클래스는 다른 모든 스토리지 시스템은 상속 또는 필요에 따라 재정의 할 수있는 기본 동작의 세트와 함께, 파일을 저장하기위한 표준화 된 API를 제공한다.</target>
        </trans-unit>
        <trans-unit id="226678acd63129786ca8c149aba197b2e61e9fda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the &lt;code&gt;send()&lt;/code&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 의&lt;/a&gt; (위치 인수가 사용되는 경우, 지정된 순서로) 분류는 다음 파라미터를 초기화한다. 모든 매개 변수는 선택 사항이며 &lt;code&gt;send()&lt;/code&gt; 메소드 를 호출하기 전에 언제든지 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="20da1e692ed9acff011d3343808b92ab6c7d63f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.mail.get_connection&quot;&gt;&lt;code&gt;get_connection()&lt;/code&gt;&lt;/a&gt; function in &lt;code&gt;django.core.mail&lt;/code&gt; returns an instance of the email backend that you can use.</source>
          <target state="translated">&lt;code&gt;django.core.mail&lt;/code&gt; 의 &lt;a href=&quot;#django.core.mail.get_connection&quot;&gt; &lt;code&gt;get_connection()&lt;/code&gt; &lt;/a&gt; 함수 는 사용할 수있는 이메일 백엔드 인스턴스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9564fa1d77014b7f9adc23d66cb5bd3f6cfaaf4f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt;&lt;code&gt;Paginator.page()&lt;/code&gt;&lt;/a&gt; method raises an exception if the requested page is invalid (i.e. not an integer) or contains no objects. Generally, it&amp;rsquo;s enough to catch the &lt;code&gt;InvalidPage&lt;/code&gt; exception, but if you&amp;rsquo;d like more granularity, you can catch either of the following exceptions:</source>
          <target state="translated">&lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt; &lt;code&gt;Paginator.page()&lt;/code&gt; &lt;/a&gt; 요청 된 페이지가 무효 인 (즉,하지의 정수) 또는 어떤 물체가없는 경우에 메소드는 예외를 발생시킵니다. 일반적으로 &lt;code&gt;InvalidPage&lt;/code&gt; 예외 를 잡는 것으로 충분 하지만보다 세분성을 원하면 다음 예외 중 하나를 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3fc92a7a2c6b68344defb9b4e4f2f12916e79a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; class is sometimes mixed up with the &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; class. Although they both represent real numbers, they represent those numbers differently. &lt;code&gt;FloatField&lt;/code&gt; uses Python&amp;rsquo;s &lt;code&gt;float&lt;/code&gt; type internally, while &lt;code&gt;DecimalField&lt;/code&gt; uses Python&amp;rsquo;s &lt;code&gt;Decimal&lt;/code&gt; type. For information on the difference between the two, see Python&amp;rsquo;s documentation for the &lt;a href=&quot;https://docs.python.org/3/library/decimal.html#module-decimal&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; 의&lt;/a&gt; 클래스는 때때로와 혼합 &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; &lt;/a&gt; 클래스입니다. 둘 다 실수를 나타내지 만 해당 숫자를 다르게 나타냅니다. &lt;code&gt;FloatField&lt;/code&gt; 는 내부적으로 Python의 &lt;code&gt;float&lt;/code&gt; 유형을 사용 하고 &lt;code&gt;DecimalField&lt;/code&gt; 는 Python의 &lt;code&gt;Decimal&lt;/code&gt; 유형을 사용 합니다. 이 둘의 차이점에 대한 정보는 &lt;a href=&quot;https://docs.python.org/3/library/decimal.html#module-decimal&quot;&gt; &lt;code&gt;decimal&lt;/code&gt; &lt;/a&gt; 모듈에 대한 Python 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb5df204d3a3efe15a2c4337ecaf3fd465128cf0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class has a couple of hooks you can use to add &lt;code&gt;class&lt;/code&gt; attributes to required rows or to rows with errors: set the &lt;a href=&quot;#django.forms.Form.error_css_class&quot;&gt;&lt;code&gt;Form.error_css_class&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;#django.forms.Form.required_css_class&quot;&gt;&lt;code&gt;Form.required_css_class&lt;/code&gt;&lt;/a&gt; attributes:</source>
          <target state="translated">그만큼 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 클래스는 추가하는 데 사용할 수있는 후크의 커플이 &lt;code&gt;class&lt;/code&gt; 설정된 : 필요한 행 또는 오류가있는 행에 속성을&lt;a href=&quot;#django.forms.Form.error_css_class&quot;&gt; &lt;code&gt;Form.error_css_class&lt;/code&gt; &lt;/a&gt; 및 / 또는&lt;a href=&quot;#django.forms.Form.required_css_class&quot;&gt; &lt;code&gt;Form.required_css_class&lt;/code&gt; 은&lt;/a&gt; 속성 :</target>
        </trans-unit>
        <trans-unit id="477219541e8b5ef1bad9d48455cc48b523adff1f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; is bound to.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 이 인스턴스 &lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; 이&lt;/a&gt; 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="29898159e2999eec714ab514a40da926c951a35e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt; method fails when the host is behind multiple proxies. One solution is to use middleware to rewrite the proxy headers, as in the following example:</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;get_host()&lt;/code&gt; &lt;/a&gt; 호스트가 여러 프록시 뒤에있는 경우 방법은 실패합니다. 한 가지 솔루션은 다음 예제와 같이 미들웨어를 사용하여 프록시 헤더를 다시 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="24cd4c851fa510d8a50b1b76eccb28d5a7a77244" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; class lives in the &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 에의&lt;/a&gt; 의 클래스 삶 &lt;a href=&quot;#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; 의&lt;/a&gt; 모듈.</target>
        </trans-unit>
        <trans-unit id="698d841d696044287e9d236392beed58387a7363" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; class is used to stream a response from Django to the browser. You might want to do this if generating the response takes too long or uses too much memory. For instance, it&amp;rsquo;s useful for &lt;a href=&quot;../howto/outputting-csv#streaming-csv-files&quot;&gt;generating large CSV files&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; 의&lt;/a&gt; 클래스는 브라우저에 장고에서 응답을 스트리밍하는 데 사용됩니다. 응답 생성에 너무 오래 걸리거나 너무 많은 메모리를 사용하는 경우이 작업을 수행 할 수 있습니다. 예를 들어 &lt;a href=&quot;../howto/outputting-csv#streaming-csv-files&quot;&gt;큰 CSV 파일&lt;/a&gt; 을 생성하는 데 유용 합니다 .</target>
        </trans-unit>
        <trans-unit id="0ad7ebee4630a8893a5335c04b34c9cba99fa0e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; is not a subclass of &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;, because it features a slightly different API. However, it is almost identical, with the following notable differences:</source>
          <target state="translated">그만큼 &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; 는&lt;/a&gt; 의 서브 클래스가 아닌&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 에&lt;/a&gt; 는 약간 다른 API를 제공하기 때문에. 그러나 다음과 같은 차이점이 거의 동일합니다.</target>
        </trans-unit>
        <trans-unit id="9254138a38ccc6ad98b4948423cdbeb0d7296f3b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.test.RequestFactory&quot;&gt;&lt;code&gt;RequestFactory&lt;/code&gt;&lt;/a&gt; shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function &amp;ndash; as a black box, with exactly known inputs, testing for specific outputs.</source>
          <target state="translated">&lt;a href=&quot;#django.test.RequestFactory&quot;&gt; &lt;code&gt;RequestFactory&lt;/code&gt; 는&lt;/a&gt; 테스트 클라이언트와 동일한 API를 공유합니다. 그러나 RequestFactory는 브라우저처럼 작동하는 대신 모든보기에 대한 첫 번째 인수로 사용할 수있는 요청 인스턴스를 생성하는 방법을 제공합니다. 즉, 다른 기능을 테스트 할 때와 같은 방식으로 뷰 기능을 테스트 할 수 있습니다. 정확히 알려진 입력을 사용하여 특정 출력을 테스트하는 블랙 박스입니다.</target>
        </trans-unit>
        <trans-unit id="5a659cb228f9d18f981afdc5f1e65fa5d151a3b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception is raised by &lt;a href=&quot;urlresolvers#module-django.urls&quot;&gt;&lt;code&gt;django.urls&lt;/code&gt;&lt;/a&gt; when a matching URL in your URLconf cannot be identified based on the parameters supplied.</source>
          <target state="translated">&lt;a href=&quot;#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt; 예외에 의해 발생 &lt;a href=&quot;urlresolvers#module-django.urls&quot;&gt; &lt;code&gt;django.urls&lt;/code&gt; &lt;/a&gt; 당신의 URLconf에서 일치하는 URL을 식별 제공된 매개 변수를 기반으로 할 수없는 경우.</target>
        </trans-unit>
        <trans-unit id="5445342482c6c1f9fc2c82bfe445151fa315cc57" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception is raised by &lt;a href=&quot;urlresolvers#django.urls.resolve&quot;&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/a&gt; if the path passed to &lt;code&gt;resolve()&lt;/code&gt; doesn&amp;rsquo;t map to a view. It&amp;rsquo;s a subclass of &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;django.http.Http404&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; 의&lt;/a&gt; 예외가 제기되고 &lt;a href=&quot;urlresolvers#django.urls.resolve&quot;&gt; &lt;code&gt;resolve()&lt;/code&gt; &lt;/a&gt; 경로에 전달하면 &lt;code&gt;resolve()&lt;/code&gt; 뷰에 매핑되지 않습니다. &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;django.http.Http404&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="e26c4d47db539cf9d763bb5eaa6448b6312b90a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.auth.hashers&quot;&gt;&lt;code&gt;django.contrib.auth.hashers&lt;/code&gt;&lt;/a&gt; module provides a set of functions to create and validate hashed passwords. You can use them independently from the &lt;code&gt;User&lt;/code&gt; model.</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.auth.hashers&quot;&gt; &lt;code&gt;django.contrib.auth.hashers&lt;/code&gt; &lt;/a&gt; 모듈을 만들 수있는 기능과 유효성을 해시 암호 세트를 제공합니다. &lt;code&gt;User&lt;/code&gt; 모델과 독립적으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f0c7d0ba816142512178d8f6cf8efe20d549850" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.contenttypes.admin&quot;&gt;&lt;code&gt;django.contrib.contenttypes.admin&lt;/code&gt;&lt;/a&gt; module provides &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt;&lt;code&gt;GenericTabularInline&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt;&lt;code&gt;GenericStackedInline&lt;/code&gt;&lt;/a&gt; (subclasses of &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.contenttypes.admin&quot;&gt; &lt;code&gt;django.contrib.contenttypes.admin&lt;/code&gt; 의&lt;/a&gt; 모듈이 제공 &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt; &lt;code&gt;GenericTabularInline&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt; &lt;code&gt;GenericStackedInline&lt;/code&gt; &lt;/a&gt; 의 (서브 클래스&lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b6e270634783f248270b85ce4243fb8fd0ac5d68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.contenttypes.forms&quot;&gt;&lt;code&gt;django.contrib.contenttypes.forms&lt;/code&gt;&lt;/a&gt; module provides:</source>
          <target state="translated">그만큼 &lt;a href=&quot;#module-django.contrib.contenttypes.forms&quot;&gt; &lt;code&gt;django.contrib.contenttypes.forms&lt;/code&gt; 의&lt;/a&gt; 모듈을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="163f921ddd0c94af5494b1fd9a9c0750c1cdacf1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.gis.measure&quot;&gt;&lt;code&gt;django.contrib.gis.measure&lt;/code&gt;&lt;/a&gt; module contains objects that allow for convenient representation of distance and area units of measure. &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; Specifically, it implements two objects, &lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt;&lt;code&gt;Area&lt;/code&gt;&lt;/a&gt; &amp;ndash; both of which may be accessed via the &lt;a href=&quot;#django.contrib.gis.measure.D&quot;&gt;&lt;code&gt;D&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.measure.A&quot;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/a&gt; convenience aliases, respectively.</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.gis.measure&quot;&gt; &lt;code&gt;django.contrib.gis.measure&lt;/code&gt; 의&lt;/a&gt; 모듈은 측정 거리 및 면적 단위의 편리한 표현을 허용 개체를 포함한다. &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; 특히, &lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt; &lt;code&gt;Area&lt;/code&gt; &lt;/a&gt; 두 개체를 구현합니다. 두 개체 는 각각 &lt;a href=&quot;#django.contrib.gis.measure.D&quot;&gt; &lt;code&gt;D&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.gis.measure.A&quot;&gt; &lt;code&gt;A&lt;/code&gt; &lt;/a&gt; 편의 별칭을 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="accd6534121979e444368f34eaf06eeb42040b64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.gis.utils&quot;&gt;&lt;code&gt;django.contrib.gis.utils&lt;/code&gt;&lt;/a&gt; module contains various utilities that are useful in creating geospatial Web applications.</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.gis.utils&quot;&gt; &lt;code&gt;django.contrib.gis.utils&lt;/code&gt; 의&lt;/a&gt; 모듈은 지리 공간 웹 응용 프로그램을 만드는 데 유용한 다양한 유틸리티가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f11e362e49d313325b8f40f7525fc910c0da9eb8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.core.validators&quot;&gt;&lt;code&gt;django.core.validators&lt;/code&gt;&lt;/a&gt; module contains a collection of callable validators for use with model and form fields. They&amp;rsquo;re used internally but are available for use with your own fields, too. They can be used in addition to, or in lieu of custom &lt;code&gt;field.clean()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;#module-django.core.validators&quot;&gt; &lt;code&gt;django.core.validators&lt;/code&gt; &lt;/a&gt; 모듈은 모델과 양식 필드와 함께 사용하기위한 호출 유효성 검사기의 컬렉션을 포함합니다. 내부적으로 사용되지만 자신의 분야에서도 사용할 수 있습니다. 사용자 정의 &lt;code&gt;field.clean()&lt;/code&gt; 메소드 와 함께 또는 대신하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fc7a94d330b8c67e954234c657e1b5f9a3342f0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.db.models.signals&quot;&gt;&lt;code&gt;django.db.models.signals&lt;/code&gt;&lt;/a&gt; module defines a set of signals sent by the model system.</source>
          <target state="translated">&lt;a href=&quot;#module-django.db.models.signals&quot;&gt; &lt;code&gt;django.db.models.signals&lt;/code&gt; &lt;/a&gt; 정의 모델을 시스템에 의해 전송 된 신호들의 세트를 모듈.</target>
        </trans-unit>
        <trans-unit id="0d4d4d3f98b6d6dc09d3a52d2a103bc94f86ed79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; setting is only used if &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt;&lt;code&gt;CommonMiddleware&lt;/code&gt;&lt;/a&gt; is installed (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;). See also &lt;a href=&quot;#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; 의&lt;/a&gt; 경우 설정은 사용 &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt; &lt;code&gt;CommonMiddleware&lt;/code&gt; 가&lt;/a&gt; 설치된다 ( &lt;a href=&quot;../topics/http/middleware&quot;&gt;미들웨어&lt;/a&gt; ). &lt;a href=&quot;#std:setting-PREPEND_WWW&quot;&gt; &lt;code&gt;PREPEND_WWW&lt;/code&gt; &lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="67b94d2b6a3e6f5c491d9a1456fbdfb38fddb2c5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting must configure a &lt;code&gt;default&lt;/code&gt; cache; any number of additional caches may also be specified. If you are using a cache backend other than the local memory cache, or you need to define multiple caches, other options will be required. The following cache options are available.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt; 필수의 구성 a를 설정 &lt;code&gt;default&lt;/code&gt; 캐시; 여러 개의 추가 캐시를 지정할 수도 있습니다. 로컬 메모리 캐시 이외의 캐시 백엔드를 사용하거나 여러 캐시를 정의해야하는 경우 다른 옵션이 필요합니다. 다음과 같은 캐시 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17f7a54f49535d3f7869bf36f357e45a4a54a52e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting must configure a &lt;code&gt;default&lt;/code&gt; database; any number of additional databases may also be specified.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 설정은 구성해야합니다 &lt;code&gt;default&lt;/code&gt; 데이터베이스를; 추가 데이터베이스 수를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1831f4a987916b7d91d7c65556738230fb06b3ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filters are not acceptable arguments. Instead, use the &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; tag to manage autoescaping for blocks of template code.</source>
          <target state="translated">&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt; 필터는 허용 인수하지 않습니다. 대신 &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt; &lt;code&gt;autoescape&lt;/code&gt; &lt;/a&gt; 태그를 사용하여 템플릿 코드 블록의 자동 이스케이프를 관리하십시오.</target>
        </trans-unit>
        <trans-unit id="8b86a7b6db34865b79af83efc1f5afa8412a7a1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag should be considered as an implementation of &amp;ldquo;render this subtemplate and include the HTML&amp;rdquo;, not as &amp;ldquo;parse this subtemplate and include its contents as if it were part of the parent&amp;rdquo;. This means that there is no shared state between included templates &amp;ndash; each include is a completely independent rendering process.</source>
          <target state="translated">는 &lt;a href=&quot;#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt; 태그는 &quot;이 subtemplate을 렌더링하고 HTML을 포함&quot;하지 &quot;이 subtemplate을 분석하고 부모의 일부인 것처럼 그 내용을 포함&quot;의 구현으로 간주되어야한다. 이는 포함 된 템플릿간에 공유 상태가 없음을 의미합니다. 각 포함은 완전히 독립적 인 렌더링 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="c66a321361237415a417770a0f5a7eff2b67019e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:templatetag-language&quot;&gt;&lt;code&gt;language&lt;/code&gt;&lt;/a&gt; tag expects the language code as the only argument.</source>
          <target state="translated">&lt;a href=&quot;#std:templatetag-language&quot;&gt; &lt;code&gt;language&lt;/code&gt; &lt;/a&gt; 태그는 유일한 인수로 언어 코드를 기대하고있다.</target>
        </trans-unit>
        <trans-unit id="f95b2551722ca1b18b1ea4badb2a3188470ecb73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#topic-email-file-backend&quot;&gt;file&lt;/a&gt; email backend can also be useful during development &amp;ndash; this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure.</source>
          <target state="translated">&lt;a href=&quot;#topic-email-file-backend&quot;&gt;파일&lt;/a&gt; 이 백엔드 여유 시간에는 검사 할 수있는 파일에 대한 모든 SMTP 연결의 내용을 덤프 - 이메일 백엔드도 개발 중에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ea7eabfa1b8ff15ca93bd8743138d1cfc5d2549" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; command creates a file &lt;code&gt;&amp;lt;project_name&amp;gt;/asgi.py&lt;/code&gt; that contains such an &lt;code&gt;application&lt;/code&gt; callable.</source>
          <target state="translated">&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; 의&lt;/a&gt; 명령은 파일을 생성 &lt;code&gt;&amp;lt;project_name&amp;gt;/asgi.py&lt;/code&gt; 같은 포함 된 &lt;code&gt;application&lt;/code&gt; 호출한다.</target>
        </trans-unit>
        <trans-unit id="00a9c11f2202c87e000fea2f9526698e61754d07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; command creates a file &lt;code&gt;&amp;lt;project_name&amp;gt;/wsgi.py&lt;/code&gt; that contains such an &lt;code&gt;application&lt;/code&gt; callable.</source>
          <target state="translated">&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; 의&lt;/a&gt; 명령은 파일을 생성 &lt;code&gt;&amp;lt;project_name&amp;gt;/wsgi.py&lt;/code&gt; 같은 포함 된 &lt;code&gt;application&lt;/code&gt; 호출한다.</target>
        </trans-unit>
        <trans-unit id="fb3cf3ba680c541d9bc47c4db402537ad89c3bf6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; function respects &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; as well:</source>
          <target state="translated">&lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; 함수 측면 &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.distinct&quot;&gt; &lt;code&gt;distinct()&lt;/code&gt; &lt;/a&gt; 뿐만 :</target>
        </trans-unit>
        <trans-unit id="412643b59ff0c4fcc6cde0d8b870920dc5e60631" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../topics/serialization#subset-of-fields&quot;&gt;fields&lt;/a&gt; option can be used to limit fields that will be present in the &lt;code&gt;properties&lt;/code&gt; key, as it works with all other serializers.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/serialization#subset-of-fields&quot;&gt;필드&lt;/a&gt; 옵션이 존재 할 것이다 제한 필드에 사용할 수있는 &lt;code&gt;properties&lt;/code&gt; 이 다른 모든 시리얼 라이저와 함께 작동하기 때문에, 키를 누릅니다.</target>
        </trans-unit>
        <trans-unit id="973a4aa75429c48168d6a9eff902a9ac14e0a4a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../intro/tutorial05&quot;&gt;testing tutorial&lt;/a&gt;, the &lt;a href=&quot;tools&quot;&gt;testing tools reference&lt;/a&gt;, and the &lt;a href=&quot;advanced&quot;&gt;advanced testing topics&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../intro/tutorial05&quot;&gt;테스트 튜토리얼&lt;/a&gt; 의 &lt;a href=&quot;tools&quot;&gt;테스트 도구 참조&lt;/a&gt; 및 &lt;a href=&quot;advanced&quot;&gt;고급 테스트 주제&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b14d5f8a9d02d40aa954beac5b67b90aeb5e6256" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup is overridden on &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt;. The returned objects will be those where the values passed are a subset of the data. It uses the SQL operator &lt;code&gt;@&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="translated">는 &lt;a href=&quot;../../models/querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 에 재정의 조회 &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; &lt;/a&gt; . 리턴 된 오브젝트는 전달 된 값이 데이터의 서브 세트 인 오브젝트입니다. SQL 연산자 &lt;code&gt;@&amp;gt;&lt;/code&gt; 를 사용합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9f542d9d2a2f32b30653d2f7c6f1224726333e87" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup is overridden on &lt;a href=&quot;#django.contrib.postgres.fields.HStoreField&quot;&gt;&lt;code&gt;HStoreField&lt;/code&gt;&lt;/a&gt;. The returned objects are those where the given &lt;code&gt;dict&lt;/code&gt; of key-value pairs are all contained in the field. It uses the SQL operator &lt;code&gt;@&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="translated">는 &lt;a href=&quot;../../models/querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 에 재정의 조회 &lt;a href=&quot;#django.contrib.postgres.fields.HStoreField&quot;&gt; &lt;code&gt;HStoreField&lt;/code&gt; &lt;/a&gt; . 리턴 된 오브젝트는 주어진 키-값 쌍의 &lt;code&gt;dict&lt;/code&gt; 이 모두 필드에 포함 된 오브젝트 입니다. SQL 연산자 &lt;code&gt;@&amp;gt;&lt;/code&gt; 를 사용합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4fe10717ccf59b7da696b2f194748021154fc8ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; caches permissions on the user object after the first time they need to be fetched for a permissions check. This is typically fine for the request-response cycle since permissions aren&amp;rsquo;t typically checked immediately after they are added (in the admin, for example). If you are adding permissions and checking them immediately afterward, in a test or view for example, the easiest solution is to re-fetch the user from the database. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt; &lt;code&gt;ModelBackend&lt;/code&gt; 는&lt;/a&gt; 그들이 권한 확인을 위해 인출 할 필요가 처음 후에 사용자 개체에 대한 사용 권한을 캐시합니다. 일반적으로 권한이 추가 된 직후 (예 : 관리자) 확인 요청이 없으므로 요청-응답주기에 적합합니다. 예를 들어 테스트 또는보기에서 권한을 추가 한 후 바로 확인하는 경우 가장 쉬운 해결책은 데이터베이스에서 사용자를 다시 가져 오는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="31147efcb3b8049c47461d791d153c67c75059e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; model is rarely accessed directly.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt; 모델은 거의 직접 액세스하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5460a1148be3180db2c5f7a2c596455a33f2980" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.password&quot;&gt;&lt;code&gt;password&lt;/code&gt;&lt;/a&gt; attribute of a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object is a string in this format:</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.password&quot;&gt; &lt;code&gt;password&lt;/code&gt; &lt;/a&gt; 속성은 다음 형식의 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="e513e50d7844b561cd562f906f6ad47b8a9a32ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; module provides some helpers to make these queries. For example, a query might select all the blog entries which mention &amp;ldquo;cheese&amp;rdquo;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; 의&lt;/a&gt; 모듈은 이러한 쿼리를 만들기 위해 몇 가지 헬퍼를 제공합니다. 예를 들어 쿼리는 &quot;치즈&quot;를 언급하는 모든 블로그 항목을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="039deb52bc18bda120ab4e45fc166f991870e5fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/django-admin#cmdoption-test-keepdb&quot;&gt;&lt;code&gt;test --keepdb&lt;/code&gt;&lt;/a&gt; option preserves the test database between test runs. It skips the create and destroy actions which can greatly decrease the time to run tests.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#cmdoption-test-keepdb&quot;&gt; &lt;code&gt;test --keepdb&lt;/code&gt; &lt;/a&gt; 옵션은 테스트 실행의 테스트 데이터베이스를 유지합니다. 테스트 실행 시간을 크게 줄일 수있는 작성 및 제거 조치를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="c94a4ccc924cfb05b8980ab5ec604a69587489d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; management command operates on one database at a time. By default, it operates on the &lt;code&gt;default&lt;/code&gt; database, but by providing the &lt;a href=&quot;../../ref/django-admin#cmdoption-migrate-database&quot;&gt;&lt;code&gt;--database&lt;/code&gt;&lt;/a&gt; option, you can tell it to synchronize a different database. So, to synchronize all models onto all databases in the first example above, you would need to call:</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 관리 명령은 한 번에 하나의 데이터베이스에서 작동합니다. 기본적으로 &lt;code&gt;default&lt;/code&gt; 데이터베이스에서 작동 하지만 &lt;a href=&quot;../../ref/django-admin#cmdoption-migrate-database&quot;&gt; &lt;code&gt;--database&lt;/code&gt; &lt;/a&gt; 옵션 을 제공하여 다른 데이터베이스를 동기화하도록 지시 할 수 있습니다. 따라서 위의 첫 번째 예에서 모든 모델을 모든 데이터베이스에 동기화하려면 다음을 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="2a2bf38d72e0b95325c24b68103d4024e98d6680" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;manage.py startapp&lt;/code&gt;&lt;/a&gt; command creates an application structure that includes a &lt;code&gt;models.py&lt;/code&gt; file. If you have many models, organizing them in separate files may be useful.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;manage.py startapp&lt;/code&gt; &lt;/a&gt; 명령을 포함하는 응용 프로그램 구조 생성 &lt;code&gt;models.py&lt;/code&gt; 의 파일. 모델이 많은 경우 별도의 파일로 구성하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="429ce54838efb7a78e791741b233de1be516da38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class</source>
          <target state="translated">&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 클래스</target>
        </trans-unit>
        <trans-unit id="f6673f801657e0eff74ea02d7291c905f165b73c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/forms/fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance from the form class that this &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; wraps. You can use it to access &lt;a href=&quot;../../ref/forms/fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; attributes, e.g. &lt;code&gt;{{ char_field.field.max_length }}&lt;/code&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; 가&lt;/a&gt; 랩 하는 폼 클래스 의 &lt;a href=&quot;../../ref/forms/fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 인스턴스입니다 . 이를 사용하여 &lt;code&gt;{{ char_field.field.max_length }}&lt;/code&gt; 와 같은 &lt;a href=&quot;../../ref/forms/fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 속성 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="38f3bfe5d38f8c3444cb42d8f969c1fd86600649" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt; provides two optional parameters &lt;code&gt;can_order&lt;/code&gt; and &lt;code&gt;can_delete&lt;/code&gt; to help with ordering of forms in formsets and deletion of forms from a formset.</source>
          <target state="translated">&lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt; 두 개의 선택적 매개 변수를 제공 &lt;code&gt;can_order&lt;/code&gt; 및 &lt;code&gt;can_delete&lt;/code&gt; 을 의 formset에서 formsets의 형태의 주문 및 형태의 삭제에 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="b3501b6aafd3595f1e23b024b160a77b71c622af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt;&lt;code&gt;CsrfViewMiddleware&lt;/code&gt;&lt;/a&gt; class can be considered an exception, as it provides the &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; decorators which allow views to explicitly control at what point the CSRF validation should occur.</source>
          <target state="translated">&lt;a href=&quot;../../ref/middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt; &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 의&lt;/a&gt; 가 제공하기 때문에 클래스는 예외로 간주 될 수 &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_exempt&quot;&gt; &lt;code&gt;csrf_exempt()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt; 뷰를 명시 적으로 CSRF 검증이 발생하는 것이 무엇인지에 제어 할 수 데코레이터.</target>
        </trans-unit>
        <trans-unit id="264716e89ae71fc8db5a254a431eb759ebdf4008" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/instances&quot;&gt;model instance reference&lt;/a&gt; has a complete list of &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;methods automatically given to each model&lt;/a&gt;. You can override most of these &amp;ndash; see &lt;a href=&quot;#overriding-predefined-model-methods&quot;&gt;overriding predefined model methods&lt;/a&gt;, below &amp;ndash; but there are a couple that you&amp;rsquo;ll almost always want to define:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/instances&quot;&gt;모델 인스턴스 참조&lt;/a&gt; 의 전체 목록이 &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;자동으로 각 모델에 주어진 방법을&lt;/a&gt; . 이 중 대부분을 무시할 수 있습니다 ( 아래의 &lt;a href=&quot;#overriding-predefined-model-methods&quot;&gt;사전 정의 된 모델 메소드 재정의&lt;/a&gt; 참조). 거의 항상 정의하려는 몇 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="27dfb49d7cfdb95fca428138c73af436a2b91f12" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method has no return value.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메서드는 반환 값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="149c4af8cc6df767ce93fdc28beb0c697723a7b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets&quot;&gt;QuerySet API&lt;/a&gt; is extensive.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets&quot;&gt;검색어 세트 API는&lt;/a&gt; 광범위하다.</target>
        </trans-unit>
        <trans-unit id="119264d7b4280d74674bc4674e5637ee1d922ef7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; returned by &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; describes all objects in the database table. Usually, though, you&amp;rsquo;ll need to select only a subset of the complete set of objects.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 에 의해 반환 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt; 데이터베이스 테이블에있는 모든 개체를 설명합니다. 그러나 일반적으로 전체 개체 집합의 하위 집합 만 선택하면됩니다.</target>
        </trans-unit>
        <trans-unit id="ef723cdd077f2c5fedc7841b524437ce4dac5442" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of all the objects in the database.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt; 메소드는 반환 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 데이터베이스에있는 모든 개체의.</target>
        </trans-unit>
        <trans-unit id="93a7fd47c950d4a78ce2d6a526ba1dcd51ecc4bf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup is overridden on &lt;code&gt;JSONField&lt;/code&gt;. The returned objects are those where the given &lt;code&gt;dict&lt;/code&gt; of key-value pairs are all contained in the top-level of the field. For example:</source>
          <target state="translated">The &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; lookup is overridden on &lt;code&gt;JSONField&lt;/code&gt; . The returned objects are those where the given &lt;code&gt;dict&lt;/code&gt; of key-value pairs are all contained in the top-level of the field. For example:</target>
        </trans-unit>
        <trans-unit id="8fee952ffde9035fa49be88069f8173f8badc83e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method can be used to remove all many-to-many relationships for an instance:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.clear&quot;&gt; &lt;code&gt;clear()&lt;/code&gt; &lt;/a&gt; 메소드는 인스턴스에 대한 모든 대다 관계를 제거하는 데 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="91404cb0b5843baa63376ec872449151955016d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting is validated when running tests. This allows the test client to differentiate between internal and external URLs.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; 의&lt;/a&gt; 테스트를 실행할 때 설정이 확인됩니다. 이를 통해 테스트 클라이언트는 내부 URL과 외부 URL을 구별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7261be04f1a034aa5bbc7c513896edd9fbc39c10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; also accepts view function names and &lt;a href=&quot;../http/urls#naming-url-patterns&quot;&gt;named URL patterns&lt;/a&gt;. This allows you to freely remap your login view within your URLconf without having to update the setting.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; 는&lt;/a&gt; 또한보기 기능 이름과 수용 &lt;a href=&quot;../http/urls#naming-url-patterns&quot;&gt;라는 이름의 URL 패턴을&lt;/a&gt; . 이를 통해 설정을 업데이트하지 않고도 URLconf 내에서 로그인보기를 자유롭게 다시 매핑 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e57398f2da88b58ffa2355a9d31fc60c7d4b5c95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; of a template engine to use for loading the template.</source>
          <target state="translated">템플릿을로드하는 데 사용할 템플릿 엔진 의 &lt;a href=&quot;../../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8fcacb20c061053b55607ccf9cf2fe150962dcda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop iterates over the already filled cache.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; 루프는 이미 채워진 캐시 반복 할.</target>
        </trans-unit>
        <trans-unit id="964b44f7ab91f2bf9eca34ab511e391a4bdfe639" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag uses the namespace of the currently resolved view as the current application in a &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt;. You can override this default by setting the current application on the &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.current_app&quot;&gt;&lt;code&gt;request.current_app&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 템플릿 태그는에서 현재 응용 프로그램으로 현재 해결 뷰의 네임 스페이스를 사용 &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; 를&lt;/a&gt; . &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.current_app&quot;&gt; &lt;code&gt;request.current_app&lt;/code&gt; &lt;/a&gt; 속성 에서 현재 애플리케이션을 설정하여이 기본값을 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59441964ea94a5651b1d7b010a50f9741376107e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; function can take an optional third argument which should be a dictionary of extra keyword arguments to pass to the view function.</source>
          <target state="translated">&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; 함수를 추가 키워드 인수의 사전 뷰 기능에 전달할 수 있어야 선택적인 세 번째 인수를 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="896a6214ca4e3563bb385668e52c374ce8e50d69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.bad_request&quot;&gt;&lt;code&gt;bad_request()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler400&quot;&gt;&lt;code&gt;handler400&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/views#django.views.defaults.bad_request&quot;&gt; &lt;code&gt;bad_request()&lt;/code&gt; &lt;/a&gt; 이 bad_request () 뷰를 덮어 &lt;a href=&quot;../../ref/urls#django.conf.urls.handler400&quot;&gt; &lt;code&gt;handler400&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9b16166cf47fc23f21870f39234de51f84f45d7d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.page_not_found&quot;&gt;&lt;code&gt;page_not_found()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler404&quot;&gt;&lt;code&gt;handler404&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/views#django.views.defaults.page_not_found&quot;&gt; &lt;code&gt;page_not_found()&lt;/code&gt; &lt;/a&gt; 보기에 우선 &lt;a href=&quot;../../ref/urls#django.conf.urls.handler404&quot;&gt; &lt;code&gt;handler404&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="aff93100bc995ea4b2d03d6efecc3c1663298361" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.permission_denied&quot;&gt;&lt;code&gt;permission_denied()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler403&quot;&gt;&lt;code&gt;handler403&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/urls#django.conf.urls.handler403&quot;&gt; &lt;code&gt;handler403&lt;/code&gt; &lt;/a&gt; 이 &lt;a href=&quot;../../ref/views#django.views.defaults.permission_denied&quot;&gt; &lt;code&gt;permission_denied()&lt;/code&gt; &lt;/a&gt; 뷰를 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="a4d20b4ce9453bc509e5c9828d331cd367fead70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.server_error&quot;&gt;&lt;code&gt;server_error()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler500&quot;&gt;&lt;code&gt;handler500&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/views#django.views.defaults.server_error&quot;&gt; &lt;code&gt;server_error()&lt;/code&gt; &lt;/a&gt; 보기에 우선 &lt;a href=&quot;../../ref/urls#django.conf.urls.handler500&quot;&gt; &lt;code&gt;handler500&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="de80b843a61bcccf5f58879e73d872e2652b04af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../topics/templates#module-django.template.loader&quot;&gt;&lt;code&gt;django.template.loader&lt;/code&gt;&lt;/a&gt; module provides functions such as &lt;a href=&quot;../../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; for loading templates. They return a &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; which wraps the actual &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../topics/templates#module-django.template.loader&quot;&gt; &lt;code&gt;django.template.loader&lt;/code&gt; 의&lt;/a&gt; 모듈과 같은 기능을 제공 &lt;a href=&quot;../../topics/templates#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt; 로딩을위한 템플릿. 실제 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;django.template.Template&lt;/code&gt; &lt;/a&gt; 을 감싸는 &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5bcb50e3cd212240efd2a9719388ef22d056b498" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; field is not supported.</source>
          <target state="translated">The &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; field is not supported.</target>
        </trans-unit>
        <trans-unit id="d73c9915386a86141171ec8a8ae6920b42110ee7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; of the modified object.</source>
          <target state="translated">수정 된 객체 의 &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bcb253b5cb570dee84c8559b60a0d0b87ee4c96a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../contrib/messages&quot;&gt;messages framework&lt;/a&gt; contains &lt;a href=&quot;../contrib/messages#django.contrib.messages.views.SuccessMessageMixin&quot;&gt;&lt;code&gt;SuccessMessageMixin&lt;/code&gt;&lt;/a&gt;, which facilitates presenting messages about successful form submissions.</source>
          <target state="translated">&lt;a href=&quot;../contrib/messages&quot;&gt;메시지 프레임 워크는&lt;/a&gt; 포함 &lt;a href=&quot;../contrib/messages#django.contrib.messages.views.SuccessMessageMixin&quot;&gt; &lt;code&gt;SuccessMessageMixin&lt;/code&gt; &lt;/a&gt; 성공적인 양식 제출에 대한 메시지를 제시 용이.</target>
        </trans-unit>
        <trans-unit id="ba20f69e5c02b749ec34853d1acdd12aa0c965a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../forms/api#django.forms.Form.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; for the generated form.</source>
          <target state="translated">생성 된 양식 의 &lt;a href=&quot;../forms/api#django.forms.Form.prefix&quot;&gt; &lt;code&gt;prefix&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a7627bcf56e6546e4c503ee1e68e42f31da8f0ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method may be executed more than once during testing, so you may want to &lt;a href=&quot;#preventing-duplicate-signals&quot;&gt;guard your signals from duplication&lt;/a&gt;, especially if you&amp;rsquo;re planning to send them within tests.</source>
          <target state="translated">&lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 당신이 할 수 있도록 방법은 테스트 기간 동안 한 번 이상 실행될 수있는 &lt;a href=&quot;#preventing-duplicate-signals&quot;&gt;복제에서 신호를 보호&lt;/a&gt; 당신이있는 거 계획 테스트에서 그들을 보낼 특히,.</target>
        </trans-unit>
        <trans-unit id="9da5b5badc253456cd3bcc72b4d4198fdf96c2dc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; generic view expects the primary key value captured from the URL to be called &lt;code&gt;&quot;pk&quot;&lt;/code&gt;, so we&amp;rsquo;ve changed &lt;code&gt;question_id&lt;/code&gt; to &lt;code&gt;pk&lt;/code&gt; for the generic views.</source>
          <target state="translated">&lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 일반적인보기는 URL에서 캡처 한 기본 키 값이 호출 할 것으로 예상 &lt;code&gt;&quot;pk&quot;&lt;/code&gt; 우리가 변경 한 때문에, &lt;code&gt;question_id&lt;/code&gt; 을 에 &lt;code&gt;pk&lt;/code&gt; 일반보기 위해.</target>
        </trans-unit>
        <trans-unit id="c47610ef1ed3075b2b476ab99241cb6c07862dd0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command looks at all your available models and creates migrations for whichever tables don&amp;rsquo;t already exist. &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; runs the migrations and creates tables in your database, as well as optionally providing &lt;a href=&quot;../topics/migrations&quot;&gt;much richer schema control&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; 는&lt;/a&gt; 가능한 모든 모델에 모습을 명령하고 테이블이 이미 존재하지 않는 쪽을 위해 마이그레이션을 생성합니다. &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 는 마이그레이션을 실행하고 데이터베이스에 테이블을 생성 할뿐만 아니라 &lt;a href=&quot;../topics/migrations&quot;&gt;훨씬 더 풍부한 스키마 제어&lt;/a&gt; 를 선택적으로 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="67de547583c031def9d5e5dcd2d85917b4ea9eaf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command looks at the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and creates any necessary database tables according to the database settings in your &lt;code&gt;mysite/settings.py&lt;/code&gt; file and the database migrations shipped with the app (we&amp;rsquo;ll cover those later). You&amp;rsquo;ll see a message for each migration it applies. If you&amp;rsquo;re interested, run the command-line client for your database and type &lt;code&gt;\dt&lt;/code&gt; (PostgreSQL), &lt;code&gt;SHOW TABLES;&lt;/code&gt; (MariaDB, MySQL), &lt;code&gt;.schema&lt;/code&gt; (SQLite), or &lt;code&gt;SELECT TABLE_NAME FROM USER_TABLES;&lt;/code&gt; (Oracle) to display the tables Django created.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령 상기 외모 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에서&lt;/a&gt; 설정하고있는 데이터베이스의 설정에 따라 필요한 데이터베이스 테이블을 만들어 &lt;code&gt;mysite/settings.py&lt;/code&gt; 파일 및 응용 프로그램과 함께 제공되는 데이터베이스 마이그레이션 (우리는 나중에 그 다룰 것이다). 적용되는 각 마이그레이션에 대한 메시지가 표시됩니다. 관심이 있으시면 데이터베이스에 대해 명령 행 클라이언트를 실행하고 &lt;code&gt;\dt&lt;/code&gt; (PostgreSQL), &lt;code&gt;SHOW TABLES;&lt;/code&gt; (MariaDB, MySQL), &lt;code&gt;.schema&lt;/code&gt; (SQLite) 또는 &lt;code&gt;SELECT TABLE_NAME FROM USER_TABLES;&lt;/code&gt; (Oracle) Django가 생성 한 테이블을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="3ea5e6d719d8a3d342c1e2e6ce5174aac069a1d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command takes all the migrations that haven&amp;rsquo;t been applied (Django tracks which ones are applied using a special table in your database called &lt;code&gt;django_migrations&lt;/code&gt;) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령이 적용되지 않은 모든 마이그레이션 (사람이라는 데이터베이스에 특별한 테이블을 사용하여 적용됩니다 장고 트랙 소요 &lt;code&gt;django_migrations&lt;/code&gt; 을 스키마와 모델의 변경 사항을 동기화, 본질적으로 -) 및 데이터베이스에 대해이를 실행 데이터베이스에서.</target>
        </trans-unit>
        <trans-unit id="216b8f279c466507f5045a9856c458e2491c8412" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; command doesn&amp;rsquo;t actually run the migration on your database - instead, it prints it to the screen so that you can see what SQL Django thinks is required. It&amp;rsquo;s useful for checking what Django is going to do or if you have database administrators who require SQL scripts for changes.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt; 명령은 실제로 데이터베이스 마이그레이션을 실행하지 않습니다 - 당신은 SQL 장고가 필요 어떻게 생각하는지 볼 수 있도록하는 대신, 그것은 화면에 출력한다. Django가 수행 할 작업을 확인하거나 변경을 위해 SQL 스크립트가 필요한 데이터베이스 관리자가 있는지 확인하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a8d6aac513f345c03739d3a700e537c1e24d395c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.Field.rel_db_type&quot;&gt;&lt;code&gt;rel_db_type()&lt;/code&gt;&lt;/a&gt; methods are called by Django when the framework constructs the &lt;code&gt;CREATE TABLE&lt;/code&gt; statements for your application &amp;ndash; that is, when you first create your tables. The methods are also called when constructing a &lt;code&gt;WHERE&lt;/code&gt; clause that includes the model field &amp;ndash; that is, when you retrieve data using QuerySet methods like &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, and &lt;code&gt;exclude()&lt;/code&gt; and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the &lt;code&gt;connection.settings_dict&lt;/code&gt; check in the above example.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.rel_db_type&quot;&gt; &lt;code&gt;rel_db_type()&lt;/code&gt; &lt;/a&gt; 프레임 워크가이 구축되면 방법은 장고에 의해 호출되는 &lt;code&gt;CREATE TABLE&lt;/code&gt; 먼저 테이블을 만들 때입니다 - 응용 프로그램에 대한 문을. 모델 필드를 포함 하는 &lt;code&gt;WHERE&lt;/code&gt; 절을 구성 할 때 ( 즉, &lt;code&gt;get()&lt;/code&gt; , &lt;code&gt;filter()&lt;/code&gt; 및 &lt;code&gt;exclude()&lt;/code&gt; 와 같은 QuerySet 메소드를 사용하여 데이터를 검색 하고 모델 필드를 인수로 가질 때 ) 메소드도 호출됩니다. 다른 시간에 호출되지 않으므로 위 예제 의 &lt;code&gt;connection.settings_dict&lt;/code&gt; 점검 과 같이 약간 복잡한 코드를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e01694611a7b883f6fd755b932fb16470e4447c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/models/fields#django.db.models.Field.rel_db_type&quot;&gt;&lt;code&gt;rel_db_type()&lt;/code&gt;&lt;/a&gt; method is called by fields such as &lt;code&gt;ForeignKey&lt;/code&gt; and &lt;code&gt;OneToOneField&lt;/code&gt; that point to another field to determine their database column data types. For example, if you have an &lt;code&gt;UnsignedAutoField&lt;/code&gt;, you also need the foreign keys that point to that field to use the same data type:</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.rel_db_type&quot;&gt; &lt;code&gt;rel_db_type()&lt;/code&gt; &lt;/a&gt; 방법과 같은 필드에 의해 호출되는 &lt;code&gt;ForeignKey&lt;/code&gt; 와 &lt;code&gt;OneToOneField&lt;/code&gt; 다른 필드 포인트가 데이터베이스의 열 데이터 유형을 결정하는 것이다. 예를 들어 &lt;code&gt;UnsignedAutoField&lt;/code&gt; 가있는 경우 동일한 데이터 형식을 사용하려면 해당 필드를 가리키는 외래 키도 필요합니다.</target>
        </trans-unit>
        <trans-unit id="7999d99f4be7ddf4dd4b33a3f5ba97fff1d24c72" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_FUNCTION&quot;&gt;&lt;code&gt;KEY_FUNCTION&lt;/code&gt;&lt;/a&gt; cache setting specifies a dotted-path to a function matching the prototype of &lt;code&gt;make_key()&lt;/code&gt; above. If provided, this custom key function will be used instead of the default key combining function.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_FUNCTION&quot;&gt; &lt;code&gt;KEY_FUNCTION&lt;/code&gt; 의&lt;/a&gt; 캐시 설정의 프로토 매칭 함수에 점선의 경로를 지정 &lt;code&gt;make_key()&lt;/code&gt; 상술. 제공된 경우이 사용자 정의 키 기능은 기본 키 결합 기능 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fd84b25c033d62563180e15d253028070779de0f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; setting defines the callable that will be used to configure Django&amp;rsquo;s loggers. By default, it points at Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig&quot;&gt;&lt;code&gt;logging.config.dictConfig()&lt;/code&gt;&lt;/a&gt; function. However, if you want to use a different configuration process, you can use any other callable that takes a single argument. The contents of &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; will be provided as the value of that argument when logging is configured.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; 의&lt;/a&gt; 설정은 장고의 로거를 구성하는 데 사용됩니다 그 호출 정의합니다. 기본적으로 Python의 &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig&quot;&gt; &lt;code&gt;logging.config.dictConfig()&lt;/code&gt; &lt;/a&gt; 함수를 가리 킵니다 . 그러나 다른 구성 프로세스를 사용하려는 경우 단일 인수를 사용하는 다른 호출 가능을 사용할 수 있습니다. &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; 의 내용은 로깅이 구성 될 때 해당 인수의 값으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="7771d7ac53bb74b4c68fa0c1b76197c32ebf2673" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting and &lt;code&gt;BASE_DIR&lt;/code&gt; will already exist if you created your project using the default project template. The setting that needs to be modified is &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정하고 &lt;code&gt;BASE_DIR&lt;/code&gt; 은 기본 프로젝트 템플릿을 사용하여 프로젝트를 만든 경우 이미 존재합니다. 수정해야 할 설정은 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1fd528a5d653627e3ac3503e380a3b3879db401a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/templates/language&quot;&gt;Django template language&lt;/a&gt; is Django&amp;rsquo;s own template system. Until Django 1.8 it was the only built-in option available. It&amp;rsquo;s a good template library even though it&amp;rsquo;s fairly opinionated and sports a few idiosyncrasies. If you don&amp;rsquo;t have a pressing reason to choose another backend, you should use the DTL, especially if you&amp;rsquo;re writing a pluggable application and you intend to distribute templates. Django&amp;rsquo;s contrib apps that include templates, like &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;django.contrib.admin&lt;/a&gt;, use the DTL.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/language&quot;&gt;장고 템플릿 언어는&lt;/a&gt; 장고 자신의 템플릿 시스템입니다. 장고 1.8까지는 유일하게 사용 가능한 내장 옵션이었습니다. 상당히 의견이 많고 몇 가지 특유의 특징이 있지만 훌륭한 템플릿 라이브러리입니다. 다른 백엔드를 선택해야 할 이유가 없다면, 특히 플러그 가능한 응용 프로그램을 작성하고 템플릿을 배포하려는 경우 DTL을 사용해야합니다. &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;django.contrib.admin&lt;/a&gt; 과 같은 템플릿이 포함 된 Django의 contrib 앱 은 DTL을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="62c88188053755d16e739992dfe1eacfe679a595" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; function allows referencing other URLconfs. Whenever Django encounters &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;, it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.</source>
          <target state="translated">&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt; 함수는 다른 URLconf는 참조를 허용한다. 장고가 &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt; 만날 때마다 URL의 해당 부분과 일치하는 부분을 잘라 내고 추가 처리를 위해 나머지 문자열을 포함 된 URLconf로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="7ee191c04667f4d39a4549723e2bf960d27b4a64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; function is passed four arguments, two required: &lt;code&gt;route&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt;, and two optional: &lt;code&gt;kwargs&lt;/code&gt;, and &lt;code&gt;name&lt;/code&gt;. At this point, it&amp;rsquo;s worth reviewing what these arguments are for.</source>
          <target state="translated">&lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; : 함수는 네 개의 인수, 두 개의 필수 전달 &lt;code&gt;route&lt;/code&gt; 와 &lt;code&gt;view&lt;/code&gt; , 2 개의 옵션 : &lt;code&gt;kwargs&lt;/code&gt; 로 하고, &lt;code&gt;name&lt;/code&gt; . 이 시점에서 이러한 주장이 무엇인지 검토 할 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfe8d9a37e6e878cdfde94b3487a096a61803769" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object, if one was provided to &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; 객체를 제공 한 경우 &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0091db1fa11aaecfad9ca6d8a7522261198cec5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; class that handles the redirect.</source>
          <target state="translated">&lt;a href=&quot;../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 에의&lt;/a&gt; 리디렉션을 처리하는 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="edcf485a2ebdbc3c042fdd727d5d08f81c66e958" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; class used when a &lt;a href=&quot;#django.contrib.redirects.models.Redirect&quot;&gt;&lt;code&gt;Redirect&lt;/code&gt;&lt;/a&gt; is not found for the requested path or has a blank &lt;code&gt;new_path&lt;/code&gt; value.</source>
          <target state="translated">&lt;a href=&quot;../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 때 클래스가 사용 &lt;a href=&quot;#django.contrib.redirects.models.Redirect&quot;&gt; &lt;code&gt;Redirect&lt;/code&gt; &lt;/a&gt; 요청 된 경로를 찾을 수 없거나 공백이되지 &lt;code&gt;new_path&lt;/code&gt; 의 값입니다.</target>
        </trans-unit>
        <trans-unit id="8010271cf7bdf5f4d7cfff4a18302b043a2a41b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-MESSAGE_LEVEL&quot;&gt;&lt;code&gt;MESSAGE_LEVEL&lt;/code&gt;&lt;/a&gt; setting can be used to change the minimum recorded level (or it can be &lt;a href=&quot;#changing-the-minimum-recorded-level-per-request&quot;&gt;changed per request&lt;/a&gt;). Attempts to add messages of a level less than this will be ignored.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MESSAGE_LEVEL&quot;&gt; &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; 의&lt;/a&gt; 설정은 최소 기록 레벨을 변경하는데 사용될 수있다 (또는이를 수있는 &lt;a href=&quot;#changing-the-minimum-recorded-level-per-request&quot;&gt;요청에 따라 변경&lt;/a&gt; ). 이보다 낮은 수준의 메시지를 추가하려고하면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b599e1214b0aed211c5d57026cb4582375496c64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting specifies the database ID of the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object associated with that particular settings file. If the setting is omitted, the &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;get_current_site()&lt;/code&gt;&lt;/a&gt; function will try to get the current site by comparing the &lt;a href=&quot;#django.contrib.sites.models.Site.domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; with the host name from the &lt;a href=&quot;../request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;request.get_host()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; 의&lt;/a&gt; 설정은의 데이터베이스 ID를 지정 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 특정 설정 파일과 연관된 개체를. 설정을 생략하면 &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt; &lt;code&gt;get_current_site()&lt;/code&gt; &lt;/a&gt; 함수는 &lt;a href=&quot;../request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;request.get_host()&lt;/code&gt; &lt;/a&gt; 메소드 의 &lt;a href=&quot;#django.contrib.sites.models.Site.domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; 이름과 호스트 이름을 비교하여 현재 사이트를 가져 오려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="7cae1946283bce012ebb4a1b409cf39af5896452" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; 의&lt;/a&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="6595ffe0ec0351b3d22571b44e35b0ca2d0ebbc3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; of a template engine to use for loading the template. &lt;code&gt;template_engine&lt;/code&gt; is passed as the &lt;code&gt;using&lt;/code&gt; keyword argument to &lt;code&gt;response_class&lt;/code&gt;. Default is &lt;code&gt;None&lt;/code&gt;, which tells Django to search for the template in all configured engines.</source>
          <target state="translated">템플릿을로드하는 데 사용할 템플릿 엔진 의 &lt;a href=&quot;../settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 입니다. &lt;code&gt;template_engine&lt;/code&gt; 은 &lt;code&gt;using&lt;/code&gt; 키워드 인수로 &lt;code&gt;response_class&lt;/code&gt; 에 전달됩니다 . 기본값은 &lt;code&gt;None&lt;/code&gt; 이며, Django가 구성된 모든 엔진에서 템플릿을 검색하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="b2cfd30a79e871c2a72fdcee436ec46bc717a476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../staticfiles&quot;&gt;staticfiles app&lt;/a&gt; prepends &lt;a href=&quot;../../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;../../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;None&lt;/code&gt;) to any asset paths. The same rules apply as &lt;a href=&quot;../../../topics/forms/media#form-asset-paths&quot;&gt;regular asset definitions on forms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../staticfiles&quot;&gt;staticfiles의 응용 프로그램은&lt;/a&gt; 앞에 추가 &lt;a href=&quot;../../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; 를&lt;/a&gt; (또는 &lt;a href=&quot;../../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 경우 &lt;a href=&quot;../../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; 는&lt;/a&gt; 없다 &lt;code&gt;None&lt;/code&gt; ) 모든 자산 경로에. &lt;a href=&quot;../../../topics/forms/media#form-asset-paths&quot;&gt;양식에 대한 일반 자산 정의&lt;/a&gt; 와 동일한 규칙이 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="8e031d58f4c9538d1e3468234e80f92f62a0d6f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../templates/api#django.template.context_processors.static&quot;&gt;&lt;code&gt;django.template.context_processors.static()&lt;/code&gt;&lt;/a&gt; context processor which adds &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; to every template context rendered with &lt;a href=&quot;../templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; contexts.</source>
          <target state="translated">&lt;a href=&quot;../templates/api#django.template.context_processors.static&quot;&gt; &lt;code&gt;django.template.context_processors.static()&lt;/code&gt; &lt;/a&gt; 에 추가 컨텍스트 프로세서 &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; 를&lt;/a&gt; 렌더링하는 모든 템플릿 컨텍스트 &lt;a href=&quot;../templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; 의&lt;/a&gt; 상황.</target>
        </trans-unit>
        <trans-unit id="f5e610bf78eb2858f2dd80f44e1279b16091bbb1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/auth/index&quot;&gt;authentication framework&lt;/a&gt; sends &lt;a href=&quot;contrib/auth#topics-auth-signals&quot;&gt;signals when a user is logged in / out&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/auth/index&quot;&gt;인증 프레임 워크는&lt;/a&gt; 송신 &lt;a href=&quot;contrib/auth#topics-auth-signals&quot;&gt;사용자가 입력 / 로그 아웃 할 때 신호&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c7796a62e6051e2b684637e0ce067f7b0bc2bff" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/db/models&quot;&gt;data-model syntax&lt;/a&gt; offers many rich ways of representing your models &amp;ndash; so far, it&amp;rsquo;s been solving many years&amp;rsquo; worth of database-schema problems. Here&amp;rsquo;s a quick example:</source>
          <target state="translated">&lt;a href=&quot;../topics/db/models&quot;&gt;데이터 모델 구문&lt;/a&gt; 이벤트 모델을 대표하는 많은 다양한 방법이 - 지금까지, 그것은 데이터베이스 스키마 문제의 다년간의 가치를 해결 됐어요. 다음은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="ec4214008fa49c3a992ffd9dfeaab4ae9d18dd27" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/db/models&quot;&gt;model reference&lt;/a&gt; documentation explains how to use Django&amp;rsquo;s standard field classes &amp;ndash; &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, etc. For many purposes, those classes are all you&amp;rsquo;ll need. Sometimes, though, the Django version won&amp;rsquo;t meet your precise requirements, or you&amp;rsquo;ll want to use a field that is entirely different from those shipped with Django.</source>
          <target state="translated">&lt;a href=&quot;../topics/db/models&quot;&gt;모델 참조&lt;/a&gt; 문서는 장고의 표준 필드 클래스를 사용하는 방법에 대해 설명합니다 - &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 많은 목적 등, 그 클래스는 당신이 필요한 모든 있습니다. 그러나 Django 버전이 정확한 요구 사항을 충족하지 못하거나 Django와 함께 제공된 필드와 완전히 다른 필드를 사용하려고 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="408e2a28c9451544ef0d6152f6d8e045a3cf02a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt;&lt;code&gt;get_object_or_404()&lt;/code&gt;&lt;/a&gt; function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; function of the model&amp;rsquo;s manager. It raises &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the object doesn&amp;rsquo;t exist.</source>
          <target state="translated">&lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt; &lt;code&gt;get_object_or_404()&lt;/code&gt; &lt;/a&gt; 함수는 첫 번째 인수로 장고 모델과는에 전달하는 키워드 인자의 임의의 수, 소요 &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 모델의 관리자의 기능을. 그것은 제기 &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; 를&lt;/a&gt; 개체가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="18a1d7eeda36afc9100a19b4d6fefeb12bacb996" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; function takes the request object as its first argument, a template name as its second argument and a dictionary as its optional third argument. It returns an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object of the given template rendered with the given context.</source>
          <target state="translated">&lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; 함수는 제 인수 두번째 인수 템플릿 이름과 세번째 인수로 사전 요청 객체 걸린다. 주어진 컨텍스트로 렌더링 된 주어진 템플릿 의 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="580ce6b10ac2a0c92b57d7c73a3e2f70fd1f8ca3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../utils#module-django.utils.feedgenerator&quot;&gt;&lt;code&gt;feedgenerator&lt;/code&gt;&lt;/a&gt; module contains a base class:</source>
          <target state="translated">&lt;a href=&quot;../utils#module-django.utils.feedgenerator&quot;&gt; &lt;code&gt;feedgenerator&lt;/code&gt; 의&lt;/a&gt; 모듈은 기본 클래스를 포함 :</target>
        </trans-unit>
        <trans-unit id="b6621f4a24c707a16569057b5b6777c1e4a249b3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;advanced#topics-testing-advanced-multidb&quot;&gt;advanced multi-db testing topics&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;advanced#topics-testing-advanced-multidb&quot;&gt;고급 멀티 데시벨 테스트 주제&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5f2659e394bde50d340599288781dbfd555de7cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#django.forms.Form.errors.as_data&quot;&gt;&lt;code&gt;Form.errors.as_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#django.forms.Form.errors.as_json&quot;&gt;&lt;code&gt;Form.errors.as_json()&lt;/code&gt;&lt;/a&gt; methods greatly benefit from fully featured &lt;code&gt;ValidationError&lt;/code&gt;s (with a &lt;code&gt;code&lt;/code&gt; name and a &lt;code&gt;params&lt;/code&gt; dictionary).</source>
          <target state="translated">&lt;a href=&quot;api#django.forms.Form.errors.as_data&quot;&gt; &lt;code&gt;Form.errors.as_data()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api#django.forms.Form.errors.as_json&quot;&gt; &lt;code&gt;Form.errors.as_json()&lt;/code&gt; &lt;/a&gt; 방법은 크게 완전한 기능의 혜택을 &lt;code&gt;ValidationError&lt;/code&gt; 의 (A와 &lt;code&gt;code&lt;/code&gt; 이름과 &lt;code&gt;params&lt;/code&gt; 사전).</target>
        </trans-unit>
        <trans-unit id="869070c99f089b4d6d96517a57bfd02376d17feb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; tag takes either &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;off&lt;/code&gt; as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template:</source>
          <target state="translated">&lt;a href=&quot;builtins#std:templatetag-autoescape&quot;&gt; &lt;code&gt;autoescape&lt;/code&gt; 의&lt;/a&gt; 태그 중 하나를 필요 &lt;code&gt;on&lt;/code&gt; 또는 &lt;code&gt;off&lt;/code&gt; 를 인수로서. 때로는 자동 이스케이프 기능을 사용하지 않을 때 자동 이스케이프 처리를 원할 수도 있습니다. 예제 템플릿은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dccd44c9dbb0c76173a89c135e63b0eff8abda7b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt; tag is the key here. It tells the template engine that this template &amp;ldquo;extends&amp;rdquo; another template. When the template system evaluates this template, first it locates the parent &amp;ndash; in this case, &amp;ldquo;base.html&amp;rdquo;.</source>
          <target state="translated">은 &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt; &lt;code&gt;extends&lt;/code&gt; &lt;/a&gt; 태그 여기 열쇠입니다. 이 템플릿은 다른 템플릿을 &quot;확장&quot;한다고 템플릿 엔진에 알려줍니다. 템플릿 시스템은이 템플릿을 평가할 때 먼저 부모 (이 경우&amp;ldquo;base.html&amp;rdquo;)를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="c2266b60b20aacf6e8ae67cefd2ae581ebe66da4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; tag can take multiple library names, separated by spaces. Example:</source>
          <target state="translated">&lt;a href=&quot;builtins#std:templatetag-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt; 태그를 공백으로 구분 된 여러 라이브러리 이름을 가지고있다. 예:</target>
        </trans-unit>
        <trans-unit id="2ffe8a890d11774d8daf462a01e6192a170bc951" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fields#django.forms.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt; of the field.</source>
          <target state="translated">필드 의 &lt;a href=&quot;fields#django.forms.Field.help_text&quot;&gt; &lt;code&gt;help_text&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4fc72a496212ae6625d553b8e35aa0bbd0d9dfa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fields#django.forms.Field.label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; of the field. This is used in &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt;&lt;code&gt;label_tag()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">필드 의 &lt;a href=&quot;fields#django.forms.Field.label&quot;&gt; &lt;code&gt;label&lt;/code&gt; &lt;/a&gt; 입니다. 이것은 &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt; &lt;code&gt;label_tag()&lt;/code&gt; &lt;/a&gt; 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="8fa595e917321e569f99ce72f122bd8c95237b43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; may also have a spatial reference system associated with it. If it does, the &lt;code&gt;srs&lt;/code&gt; attribute will return a &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">&lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt; 또한 그와 연관된 공간 참조 시스템을 가질 수있다. 만약 그렇다면, &lt;code&gt;srs&lt;/code&gt; 속성은 &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 객체를 반환 합니다 :</target>
        </trans-unit>
        <trans-unit id="46d2c1f411e331df06665a051c9f8267f1b57d1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.ljworld.com/&quot;&gt;LJWorld.com&lt;/a&gt; and &lt;a href=&quot;http://www.lawrence.com/&quot;&gt;Lawrence.com&lt;/a&gt; sites are operated by the same news organization &amp;ndash; the Lawrence Journal-World newspaper in Lawrence, Kansas. LJWorld.com focused on news, while Lawrence.com focused on local entertainment. But sometimes editors wanted to publish an article on &lt;em&gt;both&lt;/em&gt; sites.</source>
          <target state="translated">&lt;a href=&quot;http://www.ljworld.com/&quot;&gt;LJWorld.com&lt;/a&gt; 및 &lt;a href=&quot;http://www.lawrence.com/&quot;&gt;Lawrence.com&lt;/a&gt; 로렌스, 캔자스 로렌스 저널 - 세계 신문 - 사이트는 같은 뉴스 조직에 의해 운영된다. LJWorld.com은 뉴스에 중점을 두 었으며 Lawrence.com은 지역 엔터테인먼트에 중점을 두었습니다. 그러나 때때로 편집자들은 &lt;em&gt;두&lt;/em&gt; 사이트 &lt;em&gt;모두에&lt;/em&gt; 기사를 게시하기를 원했습니다 .</target>
        </trans-unit>
        <trans-unit id="39e47b3150ffa6125fec66e427fe8e5e7c3e54ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection&quot;&gt;X-XSS-Protection header&lt;/a&gt; is used to control the operation of the XSS filter.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection&quot;&gt;X-XSS 보호 헤더&lt;/a&gt; XSS 필터의 동작을 제어하기 위해 사용된다.</target>
        </trans-unit>
        <trans-unit id="04160b6835735d30b56441dfbdd05b5fa3110fbd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#cache-design-philosophy&quot;&gt;Cache Framework design philosophy&lt;/a&gt; explains a few of the design decisions of the framework.</source>
          <target state="translated">&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#cache-design-philosophy&quot;&gt;캐시 프레임 워크 디자인 철학은&lt;/a&gt; 프레임 워크의 디자인 결정의 몇 가지 설명합니다.</target>
        </trans-unit>
        <trans-unit id="c40f41e8d20781704e243004091b5544dbf7e8de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/misc/design-philosophies/#cache-design-philosophy&quot;&gt;Cache Framework design philosophy&lt;/a&gt; explains a few of the design decisions of the framework.</source>
          <target state="translated">The &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/misc/design-philosophies/#cache-design-philosophy&quot;&gt;Cache Framework design philosophy&lt;/a&gt; explains a few of the design decisions of the framework.</target>
        </trans-unit>
        <trans-unit id="cbfb8762a3e0c97516b4f631b3f6e129f617f99f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/re.html#contents-of-module-re&quot;&gt;regex flags&lt;/a&gt; used when compiling the regular expression string &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt; is a pre-compiled regular expression, and &lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; is overridden, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">The &lt;a href=&quot;https://docs.python.org/3/library/re.html#contents-of-module-re&quot;&gt;regex flags&lt;/a&gt; used when compiling the regular expression string &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;. If &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt; is a pre-compiled regular expression, and &lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt; is overridden, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; is raised. Defaults to &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b38962c826c92739a2b1db0513bddd357840ffce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the day. By default, this is &lt;code&gt;'%d'&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 일 파싱 할 때 형식을 사용합니다. 기본적으로 이것은 &lt;code&gt;'%d'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="245a021f4f9e1210abdd5027892c53b7b8914911" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the month. By default, this is &lt;code&gt;'%b'&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 월 파싱 할 때 형식을 사용합니다. 기본적으로 이것은 &lt;code&gt;'%b'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="781abafe6628164da9bdfbd00dd812c7fa785313" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the week. By default, this is &lt;code&gt;'%U'&lt;/code&gt;, which means the week starts on Sunday. Set it to &lt;code&gt;'%W'&lt;/code&gt; if your week starts on Monday.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 주 파싱 할 때 형식을 사용합니다. 기본적으로 이것은 &lt;code&gt;'%U'&lt;/code&gt; 이며, 이는 주가 일요일에 시작됨을 의미합니다. 로 설정 &lt;code&gt;'%W'&lt;/code&gt; 월요일에 당신의 주 시작합니다.</target>
        </trans-unit>
        <trans-unit id="ed18dc4cf7bbde7b22759fff408e4b8786d8fdcf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the year. By default, this is &lt;code&gt;'%Y'&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 년 파싱 할 때 형식을 사용합니다. 기본적으로이 값은 &lt;code&gt;'%Y'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cf393b28089ff4bb876b10c8319f80ff81350f59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt;&lt;code&gt;urllib.parse.quote()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus&quot;&gt;&lt;code&gt;urllib.parse.quote_plus()&lt;/code&gt;&lt;/a&gt; functions from Python&amp;rsquo;s standard library.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt; &lt;code&gt;urllib.parse.quote()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus&quot;&gt; &lt;code&gt;urllib.parse.quote_plus()&lt;/code&gt; &lt;/a&gt; 파이썬의 표준 라이브러리의 기능을합니다.</target>
        </trans-unit>
        <trans-unit id="183db66ced876a91cc1b3f41de387e0cf2822977" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/django/django/blob/master/tests/or_lookups/tests.py&quot;&gt;OR lookups examples&lt;/a&gt; in Django&amp;rsquo;s unit tests show some possible uses of &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/django/django/blob/master/tests/or_lookups/tests.py&quot;&gt;OR 조회 예&lt;/a&gt; 장고 단위 테스트는 몇 가지 가능한 용도를 보여 &lt;code&gt;Q&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="ed5525c40deae8c16ec4372e54fae598bc7f28d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://modwsgi.readthedocs.io/&quot;&gt;official mod_wsgi documentation&lt;/a&gt; is your source for all the details about how to use mod_wsgi. You&amp;rsquo;ll probably want to start with the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/installation.html&quot;&gt;installation and configuration documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://modwsgi.readthedocs.io/&quot;&gt;공식 mod_wsgi에 설명서를&lt;/a&gt; mod_wsgi에를 사용하는 방법에 대한 모든 세부 사항에 대한 소스입니다. &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/installation.html&quot;&gt;설치 및 구성 설명서&lt;/a&gt; 로 시작하고 싶을 것입니다 .</target>
        </trans-unit>
        <trans-unit id="0ab9307902cfe11f507182ed10454b42f250a63f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;HTTP status code&lt;/strong&gt;&lt;/a&gt; for the response.</source>
          <target state="translated">응답 의 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;HTTP 상태 코드&lt;/strong&gt;&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fd0e74805de6be0cc269b40b896300da0fb6e0cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;HTTP status code&lt;/strong&gt;&lt;/a&gt; for the response.</source>
          <target state="translated">응답 의 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;HTTP 상태 코드&lt;/strong&gt;&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2e2d1b2519752291652a27e46080d6d0ba3c43b1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt; helps to install the PROJ, GDAL, and GEOS libraries required by GeoDjango. First, download the &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt; (64bit), and run it. Select Express Web-GIS Install and click next. In the &amp;lsquo;Select Packages&amp;rsquo; list, ensure that GDAL is selected; MapServer is also enabled by default, but is not required by GeoDjango and may be unchecked safely. After clicking next and accepting the license agreements, the packages will be automatically downloaded and installed, after which you may exit the installer.</source>
          <target state="translated">The &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt; helps to install the PROJ, GDAL, and GEOS libraries required by GeoDjango. First, download the &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt; (64bit), and run it. Select Express Web-GIS Install and click next. In the &amp;lsquo;Select Packages&amp;rsquo; list, ensure that GDAL is selected; MapServer is also enabled by default, but is not required by GeoDjango and may be unchecked safely. After clicking next and accepting the license agreements, the packages will be automatically downloaded and installed, after which you may exit the installer.</target>
        </trans-unit>
        <trans-unit id="2d35d394e7d80eabb80fb912d4d26b4c8dd7acd6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt; helps to install the PROJ.4, GDAL, and GEOS libraries required by GeoDjango. First, download the &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt;, and run it. Select Express Web-GIS Install and click next. In the &amp;lsquo;Select Packages&amp;rsquo; list, ensure that GDAL is selected; MapServer and Apache are also enabled by default, but are not required by GeoDjango and may be unchecked safely. After clicking next, the packages will be automatically downloaded and installed, after which you may exit the installer.</source>
          <target state="translated">&lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W 설치는&lt;/a&gt; PROJ.4, GDAL를 설치하는 데 도움이, 그리고 GEOS 라이브러리는 GeoDjango에 의해이 필요합니다. 먼저 &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W 설치 프로그램을&lt;/a&gt; 다운로드하여 실행하십시오. Express Web-GIS Install을 선택하고 다음을 클릭하십시오. '패키지 선택'목록에서 GDAL이 선택되어 있는지 확인하십시오. MapServer 및 Apache도 기본적으로 활성화되어 있지만 GeoDjango에서는 필요하지 않으므로 안전하게 선택 해제 할 수 있습니다. 다음을 클릭하면 패키지가 자동으로 다운로드되어 설치되며 설치 프로그램을 종료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f6454ae09c72c5571f12c70580e2a467d729a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;Django community aggregator&lt;/a&gt;, where we aggregate content from the global Django community. Many writers in the aggregator write this sort of how-to material.</source>
          <target state="translated">&lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;장고 커뮤니티 애그리 게이터 (aggregator)&lt;/a&gt; 우리가 세계 장고 커뮤니티 콘텐츠 집계. 애그리 게이터 (aggregator)의 많은 작가들이 이런 종류의 사용 방법을 씁니다.</target>
        </trans-unit>
        <trans-unit id="42527043454a88e2fea76e1585e04e60f58fe585" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.postgresql.org/docs/current/pgcrypto.html&quot;&gt;pgcrypto extension&lt;/a&gt; must be installed. You can use the &lt;a href=&quot;../contrib/postgres/operations#django.contrib.postgres.operations.CryptoExtension&quot;&gt;&lt;code&gt;CryptoExtension&lt;/code&gt;&lt;/a&gt; migration operation to install it.</source>
          <target state="translated">&lt;a href=&quot;https://www.postgresql.org/docs/current/pgcrypto.html&quot;&gt;pgcrypto 확장&lt;/a&gt; 을 설치해야합니다. 당신은 사용할 수 있습니다 &lt;a href=&quot;../contrib/postgres/operations#django.contrib.postgres.operations.CryptoExtension&quot;&gt; &lt;code&gt;CryptoExtension&lt;/code&gt; 에&lt;/a&gt; 설치하는 마이그레이션 작업을.</target>
        </trans-unit>
        <trans-unit id="30dafa4d380e3023ca1b8e0fa639579fc6705be8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.postgresql.org/docs/current/pgcrypto.html&quot;&gt;pgcrypto extension&lt;/a&gt; must be installed. You can use the &lt;a href=&quot;operations#django.contrib.postgres.operations.CryptoExtension&quot;&gt;&lt;code&gt;CryptoExtension&lt;/code&gt;&lt;/a&gt; migration operation to install it.</source>
          <target state="translated">&lt;a href=&quot;https://www.postgresql.org/docs/current/pgcrypto.html&quot;&gt;pgcrypto 확장&lt;/a&gt; 을 설치해야합니다. 당신은 사용할 수 있습니다 &lt;a href=&quot;operations#django.contrib.postgres.operations.CryptoExtension&quot;&gt; &lt;code&gt;CryptoExtension&lt;/code&gt; 에&lt;/a&gt; 설치하는 마이그레이션 작업을.</target>
        </trans-unit>
        <trans-unit id="1314fcd7ac8a446606eeadd06a0748b931fbce44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; module is required for use as the database adapter when using GeoDjango with PostGIS.</source>
          <target state="translated">&lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2의&lt;/a&gt; PostGIS와 함께 GeoDjango를 사용하는 경우 모듈은 데이터베이스 어댑터로 사용하기 위해 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c45e78d917a2af1cf1250a2b27008b3aecdd31cd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index#module-django.core.files&quot;&gt;&lt;code&gt;django.core.files&lt;/code&gt;&lt;/a&gt; module and its submodules contain built-in classes for basic file handling in Django.</source>
          <target state="translated">&lt;a href=&quot;index#module-django.core.files&quot;&gt; &lt;code&gt;django.core.files&lt;/code&gt; 는&lt;/a&gt; 모듈과 하위 모듈 내장 포함 장고의 기본 파일 처리를위한 클래스.</target>
        </trans-unit>
        <trans-unit id="ef1d15b10b1e4758bc73488819aab37aeea690b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exception inherits from &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;, so you can target multiple &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions. Example:</source>
          <target state="translated">&lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; 의&lt;/a&gt; 에서 예외 상속 &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; 은&lt;/a&gt; , 그래서 당신은 여러 타겟팅 할 수 &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; 의&lt;/a&gt; 예외. 예:</target>
        </trans-unit>
        <trans-unit id="a879ec7dd34500940e7f64bbbb72b67b5bd5a1b3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;instances#ref-models-force-insert&quot;&gt;force_insert&lt;/a&gt; parameter is documented elsewhere, but all it means is that a new object will always be created. Normally you won&amp;rsquo;t need to worry about this. However, if your model contains a manual primary key value that you set and if that value already exists in the database, a call to &lt;code&gt;create()&lt;/code&gt; will fail with an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; since primary keys must be unique. Be prepared to handle the exception if you are using manual primary keys.</source>
          <target state="translated">&lt;a href=&quot;instances#ref-models-force-insert&quot;&gt;force_insert&lt;/a&gt; 매개 변수는 다른 곳에서 설명되어 있지만, 그 의미는 모두 새로운 객체는 항상 생성 될 것입니다. 일반적으로 당신은 이것에 대해 걱정할 필요가 없습니다. 그러나 모델에 설정 한 수동 기본 키 값이 있고 해당 값이 데이터베이스에 이미 존재하는 경우 기본 키는 고유해야하므로 &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 와 함께 &lt;code&gt;create()&lt;/code&gt; 호출 이 실패 합니다. 수동 기본 키를 사용하는 경우 예외를 처리 할 준비를하십시오.</target>
        </trans-unit>
        <trans-unit id="9d361e741a458827fc5d7d8e45bdb9fc155597d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; is the main source of &lt;code&gt;QuerySets&lt;/code&gt; for a model. For example, &lt;code&gt;Blog.objects.all()&lt;/code&gt; returns a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that contains all &lt;code&gt;Blog&lt;/code&gt; objects in the database.</source>
          <target state="translated">&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 의 주요 소스 &lt;code&gt;QuerySets&lt;/code&gt; 모델에 대한. 예를 들어 &lt;code&gt;Blog.objects.all()&lt;/code&gt; 은 데이터베이스의 모든 &lt;code&gt;Blog&lt;/code&gt; 객체 가 포함 된 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="17471bb8906283313c701f95217938d9ad7b2693" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="9f8e6114bfa24b3ebf21e60985199085122a2a96" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting controls the encoding of rendered templates. This is set to UTF-8 by default.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; 의&lt;/a&gt; 설정 렌더링 템플릿의 인코딩을 제어한다. 기본적으로 UTF-8로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="36c2a358420d12d0c839aead7004e6480eac6e99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; of a template engine to use for loading the template.</source>
          <target state="translated">템플릿을로드하는 데 사용할 템플릿 엔진 의 &lt;a href=&quot;settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1acac94db3bfcd977465244fca2d8b24621c0a10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; with which the template was rendered.</source>
          <target state="translated">&lt;a href=&quot;templates/api#django.template.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt; 템플릿이 렌더링 된 함께.</target>
        </trans-unit>
        <trans-unit id="b8911594f98e9e9318b10f6b8b27fa489d912ff4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Context&quot;&gt;&lt;code&gt;template context&lt;/code&gt;&lt;/a&gt; used for all matching files is:</source>
          <target state="translated">&lt;a href=&quot;templates/api#django.template.Context&quot;&gt; &lt;code&gt;template context&lt;/code&gt; &lt;/a&gt; 일치하는 모든 파일에 사용이다 :</target>
        </trans-unit>
        <trans-unit id="40052579dc8aced12bc01a23ab84e082c2199346" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Context&quot;&gt;&lt;code&gt;template context&lt;/code&gt;&lt;/a&gt; used is:</source>
          <target state="translated">&lt;a href=&quot;templates/api#django.template.Context&quot;&gt; &lt;code&gt;template context&lt;/code&gt; &lt;/a&gt; 사용은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="0f8c10edabba9c836ae9d4c6dd214d207e595a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object which was rendered.</source>
          <target state="translated">&lt;a href=&quot;templates/api#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 렌더링 된 객체입니다.</target>
        </trans-unit>
        <trans-unit id="0f5d37dd2d2228083dd9cfef008cd9360d4ce037" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag will use its value as the &lt;code&gt;current_app&lt;/code&gt; argument to &lt;a href=&quot;urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 템플릿 태그는 같은 값을 사용합니다 &lt;code&gt;current_app&lt;/code&gt; 에 인수 &lt;a href=&quot;urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="feeca2b7eaace009ee76a4a318d0d13f06258f2b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;utils#django.utils.encoding.iri_to_uri&quot;&gt;&lt;code&gt;django.utils.encoding.iri_to_uri()&lt;/code&gt;&lt;/a&gt; function, which implements the conversion from IRI to URI as required by &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3987#section-3.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;utils#django.utils.encoding.iri_to_uri&quot;&gt; &lt;code&gt;django.utils.encoding.iri_to_uri()&lt;/code&gt; &lt;/a&gt; 에 의해 요구되는 URI에 IRI의 변환을 구현하는 기능, &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3987 섹션 #-3.1&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e767e4fa253ad3812a547db94109f1eff5547842" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;utils#django.utils.encoding.iri_to_uri&quot;&gt;&lt;code&gt;django.utils.encoding.iri_to_uri()&lt;/code&gt;&lt;/a&gt; function, which implements the conversion from IRI to URI as required by &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 3987#section-3.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;a href=&quot;utils#django.utils.encoding.iri_to_uri&quot;&gt; &lt;code&gt;django.utils.encoding.iri_to_uri()&lt;/code&gt; &lt;/a&gt; function, which implements the conversion from IRI to URI as required by &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 3987#section-3.1&lt;/strong&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="06131b94965565a8e840b931a8a14a6743ccff6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; piece ensures that Apache can access your &lt;code&gt;wsgi.py&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; 아파치가 액세스 할 수있는 부분은 보장하지만 &lt;code&gt;wsgi.py&lt;/code&gt; 의 파일을.</target>
        </trans-unit>
        <trans-unit id="11eb614c532487c7a17d85c1fbf9f993ea1b521a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'context_processors'&lt;/code&gt; option of the &lt;code&gt;DjangoTemplates&lt;/code&gt; backend defined in your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting contains &lt;code&gt;'django.contrib.messages.context_processors.messages'&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정에 정의 된 &lt;code&gt;DjangoTemplates&lt;/code&gt; 백엔드 의 &lt;code&gt;'context_processors'&lt;/code&gt; 옵션 에는 &lt;code&gt;'django.contrib.messages.context_processors.messages'&lt;/code&gt; 가 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6c39e261d9c42bc3f77656ffb46f566f9763f459" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'locmem'&lt;/code&gt; backend stores messages in a special attribute of the &lt;code&gt;django.core.mail&lt;/code&gt; module. The &lt;code&gt;outbox&lt;/code&gt; attribute is created when the first message is sent. It&amp;rsquo;s a list with an &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instance for each message that would be sent.</source>
          <target state="translated">&lt;code&gt;'locmem'&lt;/code&gt; 의 특별한 속성에서 백엔드 메시지가 저장되는 &lt;code&gt;django.core.mail&lt;/code&gt; 의 모듈. &lt;code&gt;outbox&lt;/code&gt; 첫 번째 메시지가 전송 될 때 특성이 생성된다. 전송 될 각 메시지에 대해 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 인스턴스 가있는 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="b9a27656fab1b3d74a97e1726bf25b1fd5860871" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**extra&lt;/code&gt; kwargs are &lt;code&gt;key=value&lt;/code&gt; pairs that can be interpolated into the &lt;code&gt;template&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;**extra&lt;/code&gt; kwargs로는 &lt;code&gt;key=value&lt;/code&gt; 으로 보간 될 수있는 쌍 &lt;code&gt;template&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="d60401363afbfb3108087b66ea5d2db365e69a98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**extra&lt;/code&gt; kwargs are &lt;code&gt;key=value&lt;/code&gt; pairs that can be interpolated into the &lt;code&gt;template&lt;/code&gt; attribute. To avoid a SQL injection vulnerability, &lt;code&gt;extra&lt;/code&gt;&lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;must not contain untrusted user input&lt;/a&gt; as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.</source>
          <target state="translated">&lt;code&gt;**extra&lt;/code&gt; kwargs로는 &lt;code&gt;key=value&lt;/code&gt; 으로 보간 될 수있는 쌍 &lt;code&gt;template&lt;/code&gt; 속성. SQL 주입 취약점을 피하기 위해 데이터베이스 드라이버가 이스케이프하는 쿼리 매개 변수로 전달되지 않고 이러한 값이 SQL 문자열로 보간되기 때문에 &lt;code&gt;extra&lt;/code&gt; &lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;는 신뢰할 수없는 사용자 입력&lt;/a&gt; 을 포함해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="082f3d432a304047edbe20172c0676f0b29bf5fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**extra&lt;/code&gt; kwargs are &lt;code&gt;key=value&lt;/code&gt; pairs that can be interpolated into the &lt;code&gt;template&lt;/code&gt; attribute. To avoid an SQL injection vulnerability, &lt;code&gt;extra&lt;/code&gt;&lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;must not contain untrusted user input&lt;/a&gt; as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.</source>
          <target state="translated">The &lt;code&gt;**extra&lt;/code&gt; kwargs are &lt;code&gt;key=value&lt;/code&gt; pairs that can be interpolated into the &lt;code&gt;template&lt;/code&gt; attribute. To avoid an SQL injection vulnerability, &lt;code&gt;extra&lt;/code&gt; &lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;must not contain untrusted user input&lt;/a&gt; as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.</target>
        </trans-unit>
        <trans-unit id="ba36680589c2ddf4996d9e48ef3a15afdc4d26d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*expressions&lt;/code&gt; argument is a list of positional expressions that the function will be applied to. The expressions will be converted to strings, joined together with &lt;code&gt;arg_joiner&lt;/code&gt;, and then interpolated into the &lt;code&gt;template&lt;/code&gt; as the &lt;code&gt;expressions&lt;/code&gt; placeholder.</source>
          <target state="translated">&lt;code&gt;*expressions&lt;/code&gt; 인자 기능을 적용 할 것을 위치 표현의리스트이다. 표현식은 문자열로 변환되고 &lt;code&gt;arg_joiner&lt;/code&gt; 와 함께 결합 된 후 &lt;code&gt;expressions&lt;/code&gt; 플레이스 홀더 로 &lt;code&gt;template&lt;/code&gt; 보간됩니다 .</target>
        </trans-unit>
        <trans-unit id="23d6f96dd81bd59a17f8766b4a8dba490781c37a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--mapping&lt;/code&gt; option tells &lt;code&gt;ogrinspect&lt;/code&gt; to also generate a mapping dictionary for use with &lt;a href=&quot;layermapping#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--mapping&lt;/code&gt; 옵션을 알려줍니다 &lt;code&gt;ogrinspect&lt;/code&gt; 도 함께 사용할 수있는 매핑 사전 생성 &lt;a href=&quot;layermapping#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="514c0fe665aa66e5f1c403b0d1b56739a7059f08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--multi&lt;/code&gt; option is specified so that the geographic field is a &lt;a href=&quot;model-api#django.contrib.gis.db.models.MultiPolygonField&quot;&gt;&lt;code&gt;MultiPolygonField&lt;/code&gt;&lt;/a&gt; instead of just a &lt;a href=&quot;model-api#django.contrib.gis.db.models.PolygonField&quot;&gt;&lt;code&gt;PolygonField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--multi&lt;/code&gt; 지리적 필드가되도록 옵션이 지정 &lt;a href=&quot;model-api#django.contrib.gis.db.models.MultiPolygonField&quot;&gt; &lt;code&gt;MultiPolygonField&lt;/code&gt; &lt;/a&gt; 단지 대신 &lt;a href=&quot;model-api#django.contrib.gis.db.models.PolygonField&quot;&gt; &lt;code&gt;PolygonField&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4b1ce123e100519ac5e4cdcd775c2f9a89fd8de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--srid=4326&lt;/code&gt; option sets the SRID for the geographic field.</source>
          <target state="translated">&lt;code&gt;--srid=4326&lt;/code&gt; 옵션은 지리적 필드의 SRID를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3c3253223306341836902087f75711571de391af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-R -S&lt;/code&gt; flags indicate that we do not want the user to have the ability to create additional users (roles) or to be a superuser, respectively.</source>
          <target state="translated">&lt;code&gt;-R -S&lt;/code&gt; 플래그는 우리가 사용자가 추가 사용자 (역할을) 만들거나 각각 수퍼 유저로 전환 할 수있는 능력을 갖고 싶어하지 않는 것을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0170b330ee4a778153047fd5048d4226967130ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@cached_property&lt;/code&gt; decorator caches the result of a method with a single &lt;code&gt;self&lt;/code&gt; argument as a property. The cached result will persist as long as the instance does, so if the instance is passed around and the function subsequently invoked, the cached result will be returned.</source>
          <target state="translated">&lt;code&gt;@cached_property&lt;/code&gt; 의 장식은 단일로하는 방법의 결과를 캐시 &lt;code&gt;self&lt;/code&gt; 특성으로 인수. 캐시 된 결과는 인스턴스가 존재하는 한 지속되므로 인스턴스가 전달되고 이후에 함수가 호출되면 캐시 된 결과가 리턴됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
