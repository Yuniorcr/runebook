<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="6468bfe1b90d6cd3667c5baf1e3e836324d1e401" translate="yes" xml:space="preserve">
          <source>Keep your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; a secret.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 를 비밀로 유지하십시오 .</target>
        </trans-unit>
        <trans-unit id="11bf666ca636cb39858bb367c2938c163eee182a" translate="yes" xml:space="preserve">
          <source>Keeping all user related information in one model removes the need for additional or more complex database queries to retrieve related models. On the other hand, it may be more suitable to store app-specific user information in a model that has a relation with your custom user model. That allows each app to specify its own user data requirements without potentially conflicting or breaking assumptions by other apps. It also means that you would keep your user model as simple as possible, focused on authentication, and following the minimum requirements Django expects custom user models to meet.</source>
          <target state="translated">모든 사용자 관련 정보를 하나의 모델로 유지하면 관련 모델을 검색하기 위해 추가 또는 더 복잡한 데이터베이스 쿼리가 필요하지 않습니다. 반면에 앱별 사용자 정보를 사용자 지정 사용자 모델과 관련된 모델에 저장하는 것이 더 적합 할 수 있습니다. 이를 통해 각 앱은 다른 앱과의 충돌 가능성이나 가정을 상쇄하지 않고 자체 사용자 데이터 요구 사항을 지정할 수 있습니다. 또한 사용자 모델을 가능한 한 단순하게 유지하고 인증에 중점을두고 Django가 사용자 정의 사용자 모델이 충족 할 것으로 예상되는 최소 요구 사항을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="8b81e1ecde65f43dd86891e55d0a4672b89353ce" translate="yes" xml:space="preserve">
          <source>Key lookups</source>
          <target state="translated">주요 조회</target>
        </trans-unit>
        <trans-unit id="3f5fee6e0075615eacd4e89bb50cab8876b4309f" translate="yes" xml:space="preserve">
          <source>Key points to note:</source>
          <target state="translated">주목할 요점 :</target>
        </trans-unit>
        <trans-unit id="df16181be8da903a9ea0bcf833d332c01485cc71" translate="yes" xml:space="preserve">
          <source>Key, index, and path lookups</source>
          <target state="translated">키, 인덱스 및 경로 조회</target>
        </trans-unit>
        <trans-unit id="48181c52d7a0f041d9edd4bdbc167c8eb8cb171d" translate="yes" xml:space="preserve">
          <source>Key, index, and path transforms</source>
          <target state="translated">키, 색인 및 경로 변환</target>
        </trans-unit>
        <trans-unit id="52b5e092dff22a227c99dc4ed720addb67e119e9" translate="yes" xml:space="preserve">
          <source>Keyword Argument</source>
          <target state="translated">키워드 인수</target>
        </trans-unit>
        <trans-unit id="db32172db3cd21ae36313d815fba0dd39bd7127a" translate="yes" xml:space="preserve">
          <source>Keyword Arguments</source>
          <target state="translated">키워드 인수</target>
        </trans-unit>
        <trans-unit id="b6e263b622ac66480a12aa8dc09139beb9f6e104" translate="yes" xml:space="preserve">
          <source>Keyword argument queries &amp;ndash; in &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, etc. &amp;ndash; are &amp;ldquo;AND&amp;rdquo;ed together. If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 등의 키워드 인수 쿼리 는 &quot;AND&quot;입니다. 보다 복잡한 쿼리 (예 : &lt;code&gt;OR&lt;/code&gt; 문이있는 쿼리)를 실행해야하는 경우 &lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q objects&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0ec8760b0d3dc8d48fb4e0610ab19607da95cff" translate="yes" xml:space="preserve">
          <source>Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the &lt;code&gt;contrib.messages&lt;/code&gt; framework is not installed. These keyword arguments match those for &lt;a href=&quot;../messages#django.contrib.messages.add_message&quot;&gt;&lt;code&gt;django.contrib.messages.add_message()&lt;/code&gt;&lt;/a&gt;, see that function&amp;rsquo;s documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant.</source>
          <target state="translated">&lt;code&gt;contrib.messages&lt;/code&gt; 프레임 워크가 설치되지 않은 경우 키워드 인수를 사용하여 메시지 레벨을 변경하거나 추가 CSS 태그를 추가하거나 자동으로 실패 할 수 있습니다. 이 키워드 인수는 &lt;a href=&quot;../messages#django.contrib.messages.add_message&quot;&gt; &lt;code&gt;django.contrib.messages.add_message()&lt;/code&gt; &lt;/a&gt; 키워드 인수와 일치합니다 . 자세한 내용은 해당 기능 설명서를 참조하십시오. 한 가지 차이점은 레벨이 정수 / 상수 외에 문자열 레이블로 전달 될 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e3c047d4fa560655a4c9b137b6ae6b7f96f9bb33" translate="yes" xml:space="preserve">
          <source>Keyword arguments that can provide extra context for the SQL generated by the aggregate.</source>
          <target state="translated">집계에 의해 생성 된 SQL에 추가 컨텍스트를 제공 할 수있는 키워드 인수</target>
        </trans-unit>
        <trans-unit id="3fa8b79bb0bea1bbd3b43612463d464bd5a74adc" translate="yes" xml:space="preserve">
          <source>Kilometre, Kilometer</source>
          <target state="translated">킬로미터, 킬로미터</target>
        </trans-unit>
        <trans-unit id="4e617bafa47d9a4ed6de9204fc070360a5cc8706" translate="yes" xml:space="preserve">
          <source>KyngChaos</source>
          <target state="translated">KyngChaos</target>
        </trans-unit>
        <trans-unit id="cbc770cf346b5261fa6de79f704a15a53242cf2d" translate="yes" xml:space="preserve">
          <source>KyngChaos packages</source>
          <target state="translated">KyngChaos 패키지</target>
        </trans-unit>
        <trans-unit id="b153eb78e99d2e3e01e42e23731bfe05df63eb8b" translate="yes" xml:space="preserve">
          <source>LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It&amp;rsquo;s pretty basic: A reader signs up on a Web form and immediately gets an email saying, &amp;ldquo;Thanks for your subscription.&amp;rdquo;</source>
          <target state="translated">LJWorld.com과 Lawrence.com에는 모두 이메일 알림 기능이있어 독자들은 뉴스가 발생할 때 알림을 받도록 가입 할 수 있습니다. 매우 기본적입니다. 독자는 웹 양식에 가입하고 즉시&amp;ldquo;구독에 감사합니다&amp;rdquo;라는 이메일을받습니다.</target>
        </trans-unit>
        <trans-unit id="c87e855f857da475f822ad7e332f47b0210e6b27" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used as primary keys.</source>
          <target state="translated">LOB 컬럼은 기본 키로 사용될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f37a4fdbe1b9352a7f800671735935bf512cbbc1" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used in a &lt;code&gt;SELECT DISTINCT&lt;/code&gt; list. This means that attempting to use the &lt;code&gt;QuerySet.distinct&lt;/code&gt; method on a model that includes &lt;code&gt;TextField&lt;/code&gt; columns will result in an &lt;code&gt;ORA-00932&lt;/code&gt; error when run against Oracle. As a workaround, use the &lt;code&gt;QuerySet.defer&lt;/code&gt; method in conjunction with &lt;code&gt;distinct()&lt;/code&gt; to prevent &lt;code&gt;TextField&lt;/code&gt; columns from being included in the &lt;code&gt;SELECT DISTINCT&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;SELECT DISTINCT&lt;/code&gt; 목록 에서 LOB 열을 사용할 수 없습니다 . 이는 &lt;code&gt;TextField&lt;/code&gt; 열 을 포함하는 모델 에서 &lt;code&gt;QuerySet.distinct&lt;/code&gt; 메소드 를 사용하려고하면 Oracle에 대해 실행할 때 &lt;code&gt;ORA-00932&lt;/code&gt; 오류가 발생 함을 의미합니다. 이 문제를 해결하려면 &lt;code&gt;QuerySet.defer&lt;/code&gt; 메소드를 &lt;code&gt;distinct()&lt;/code&gt; 와 함께 사용 하여 &lt;code&gt;SELECT DISTINCT&lt;/code&gt; 목록 에 &lt;code&gt;TextField&lt;/code&gt; 열이 포함 되지 않도록 하십시오.</target>
        </trans-unit>
        <trans-unit id="23aa061f34d8daee01c85141530845ac93ba30f7" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used in indexes.</source>
          <target state="translated">LOB 열은 인덱스에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="2f0d617fe578d453561df393b035a56559df8484" translate="yes" xml:space="preserve">
          <source>LOCALE_PATHS, LANGUAGE_CODE</source>
          <target state="translated">LOCALE_PATHS, LANGUAGE_CODE</target>
        </trans-unit>
        <trans-unit id="ba9dfe5041cd205445df5b843e8a9dc628256415" translate="yes" xml:space="preserve">
          <source>Lambdas</source>
          <target state="translated">Lambdas</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="15cf7920bc40aa026228a895b90198998e1c661b" translate="yes" xml:space="preserve">
          <source>Language cookie</source>
          <target state="translated">언어 쿠키</target>
        </trans-unit>
        <trans-unit id="e2313e70fc3b44edd797d4ee37ae99cf5b536f9e" translate="yes" xml:space="preserve">
          <source>Language prefix in URL patterns</source>
          <target state="translated">URL 패턴의 언어 접두사</target>
        </trans-unit>
        <trans-unit id="d5706fe49707b39d9d0ba70c9ad9195dbfd8428b" translate="yes" xml:space="preserve">
          <source>Large directories with many files may cause performance issues</source>
          <target state="translated">파일이 많은 큰 디렉토리는 성능 문제를 일으킬 수 있습니다</target>
        </trans-unit>
        <trans-unit id="66a2147848cda23e4068f8ecbe6f03cd2754422c" translate="yes" xml:space="preserve">
          <source>Lastly, your check function must be registered explicitly with system check registry. Checks should be registered in a file that&amp;rsquo;s loaded when your application is loaded; for example, in the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">마지막으로, 점검 기능은 시스템 점검 레지스트리에 명시 적으로 등록되어야합니다. 응용 프로그램이로드 될 때로드 된 파일에 수표를 등록해야합니다. 예를 들어 &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;AppConfig.ready()&lt;/code&gt; &lt;/a&gt; 메소드에서.</target>
        </trans-unit>
        <trans-unit id="ccbd0691e5899de74565a225b47115af7e41eb95" translate="yes" xml:space="preserve">
          <source>Later on we use the term &lt;em&gt;packaging&lt;/em&gt; to describe the process of making a Python package easy for others to install. It can be a little confusing, we know.</source>
          <target state="translated">나중에 우리는 &lt;em&gt;패키징&lt;/em&gt; 이라는 용어를 사용하여 다른 사람들이 쉽게 파이썬 패키지를 설치하는 과정을 설명합니다. 조금 혼란 스러울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf20c881e0dc069882fc7e5d606a7b61cb53816e" translate="yes" xml:space="preserve">
          <source>LayerMapping data import utility</source>
          <target state="translated">LayerMapping 데이터 가져 오기 유틸리티</target>
        </trans-unit>
        <trans-unit id="6eb48363145bff612fcd9f60ac338f08d9514585" translate="yes" xml:space="preserve">
          <source>Laziness allows us to refer to things before they are instantiated, or even before it&amp;rsquo;s possible to instantiate them. This has numerous uses.</source>
          <target state="translated">게으름으로 인해 인스턴스화되기 전이나 인스턴스화하기 전에 사물을 참조 할 수 있습니다. 이것은 많은 용도가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7306ad109bfe4aa0d559571e47ed10b95c1acd7e" translate="yes" xml:space="preserve">
          <source>Laziness in Django</source>
          <target state="translated">장고의 게으름</target>
        </trans-unit>
        <trans-unit id="9db8ab131c503038349926561b42c112352a10ec" translate="yes" xml:space="preserve">
          <source>Laziness is also a way to save effort by trying to avoid work in the first place. That is, one aspect of laziness is not doing anything until it has to be done, because it may not turn out to be necessary after all. Laziness can therefore have performance implications, and the more expensive the work concerned, the more there is to gain through laziness.</source>
          <target state="translated">게으름은 또한 처음부터 일을 피하려고 노력함으로써 노력을 절약하는 방법입니다. 즉, 게으름의 한 측면은 결국 필요하지 않을 수 있기 때문에 수행해야 할 때까지 아무것도하지 않는 것입니다. 따라서 게으름은 성능에 영향을 줄 수 있으며 관련 작업이 더 비싸 질수록 게으름을 통해 얻는 것이 더 많습니다.</target>
        </trans-unit>
        <trans-unit id="ba6579907e4a7f45362bf94f354f36722b584440" translate="yes" xml:space="preserve">
          <source>Lazy Geometries</source>
          <target state="translated">게으른 기하학</target>
        </trans-unit>
        <trans-unit id="5da11f4eec7970e01e777c79bbd1f868cda4bd15" translate="yes" xml:space="preserve">
          <source>Lazy translation</source>
          <target state="translated">게으른 번역</target>
        </trans-unit>
        <trans-unit id="3d6bad0f45a94e2a01930bb1020eff0a76e76f44" translate="yes" xml:space="preserve">
          <source>Lazy translations and plural</source>
          <target state="translated">게으른 번역과 복수</target>
        </trans-unit>
        <trans-unit id="9b1f34a5739405246bd9919b678f713ac631fed7" translate="yes" xml:space="preserve">
          <source>Learn about some other core functionalities of the Django framework:</source>
          <target state="translated">Django 프레임 워크의 다른 핵심 기능에 대해 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="ef1ab011ef2c624e2c7031f6c7a9d37cc55f1cf3" translate="yes" xml:space="preserve">
          <source>Learn about the development process for the Django project itself and about how you can contribute:</source>
          <target state="translated">Django 프로젝트 자체의 개발 프로세스와 기여 방법에 대해 학습하십시오.</target>
        </trans-unit>
        <trans-unit id="2f3354aecddee7d995b534cf8538581af1f6c203" translate="yes" xml:space="preserve">
          <source>Learn about the various components and tools to help you in the development and testing of Django applications:</source>
          <target state="translated">Django 애플리케이션의 개발 및 테스트에 도움이되는 다양한 구성 요소 및 도구에 대해 학습하십시오.</target>
        </trans-unit>
        <trans-unit id="824d76b124e6289f372e2ff6bcba91e8939343bd" translate="yes" xml:space="preserve">
          <source>Learn more</source>
          <target state="translated">더 알아보기</target>
        </trans-unit>
        <trans-unit id="f1ab6cb67a17a1c6e360ed241bd2dda3b974e3d3" translate="yes" xml:space="preserve">
          <source>Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the &lt;code&gt;Vary&lt;/code&gt; header of the response, but we want to prevent response generation.</source>
          <target state="translated">응답 오브젝트의 일부 요청 경로에 대해 고려해야 할 헤더를 학습합니다. 해당 헤더를 전역 경로 레지스트리에 저장하므로 나중에 해당 경로에 액세스하면 응답 오브젝트 자체를 빌드하지 않고 고려해야 할 헤더를 알 수 있습니다. 헤더는 응답 의 &lt;code&gt;Vary&lt;/code&gt; 헤더에 이름이 지정 되지만 응답 생성을 방지하려고합니다.</target>
        </trans-unit>
        <trans-unit id="09777de5be0a68a212ac9f63799746f9d808d38b" translate="yes" xml:space="preserve">
          <source>Leaving this setting off isn&amp;rsquo;t a good idea because an attacker could capture an unencrypted session cookie with a packet sniffer and use the cookie to hijack the user&amp;rsquo;s session.</source>
          <target state="translated">공격자가 패킷 스니퍼를 사용하여 암호화되지 않은 세션 쿠키를 캡처하고 쿠키를 사용하여 사용자의 세션을 가로 챌 수 있으므로이 설정을 해제하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="083e90c2b3005bc225a03c2abdf03d369325f963" translate="yes" xml:space="preserve">
          <source>Left-aligns the value in a field of a given width.</source>
          <target state="translated">주어진 너비의 필드에서 값을 왼쪽으로 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="a02227b0f0b9337ad694cb0213155cb14a60b4fc" translate="yes" xml:space="preserve">
          <source>Less than or equal to.</source>
          <target state="translated">작거나 같습니다.</target>
        </trans-unit>
        <trans-unit id="73c669caad45b8802c1bb872ff0703e13b665fba" translate="yes" xml:space="preserve">
          <source>Less than or equal to. Example:</source>
          <target state="translated">작거나 같습니다. 예:</target>
        </trans-unit>
        <trans-unit id="40d2a5fe11e0306023d56f6e8912a222594ed047" translate="yes" xml:space="preserve">
          <source>Less than.</source>
          <target state="translated">보다 작습니다.</target>
        </trans-unit>
        <trans-unit id="96c4349122b9bb7576d0d61f7a88e8edd3726822" translate="yes" xml:space="preserve">
          <source>Less than. Example:</source>
          <target state="translated">보다 작습니다. 예:</target>
        </trans-unit>
        <trans-unit id="c841a65c7f1c3eccf8b28668b87263bfc640fcff" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s also add a custom method to this model:</source>
          <target state="translated">이 모델에 커스텀 메소드를 추가해 보자 :</target>
        </trans-unit>
        <trans-unit id="8c13e4563c320f96f46850c604f3f010e32fc04d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s assume you have a blog system, with an &lt;code&gt;Entry&lt;/code&gt; model, and you want your sitemap to include all the links to your individual blog entries. Here&amp;rsquo;s how your sitemap class might look:</source>
          <target state="translated">&lt;code&gt;Entry&lt;/code&gt; 모델 이있는 블로그 시스템 이 있고 사이트 맵에 개별 블로그 항목에 대한 모든 링크를 포함 시키려고 한다고 가정 하십시오. 사이트 맵 클래스의 모양은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1c225b116fcb368350be69537d8c022103cd45ec" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s convert our poll app to use the generic views system, so we can delete a bunch of our own code. We&amp;rsquo;ll have to take a few steps to make the conversion. We will:</source>
          <target state="translated">폴링 앱을 일반 뷰 시스템을 사용하도록 변환하여 자체 코드를 삭제할 수 있습니다. 변환을 위해 몇 가지 단계를 수행해야합니다. 우리는 :</target>
        </trans-unit>
        <trans-unit id="37107c1b14b06985400cce64f2c0cee8e51e7116" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a &lt;code&gt;ContactForm&lt;/code&gt; to demonstrate how you&amp;rsquo;d use this field:</source>
          <target state="translated">이 필드를 사용하는 방법을 보여주기 위해 &lt;code&gt;ContactForm&lt;/code&gt; 을 작성해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="fc48aeca8eda2b4682b3d6e61de76f5755e853cc" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dive right in. Create a file called &lt;code&gt;admin.py&lt;/code&gt; inside the &lt;code&gt;world&lt;/code&gt; application with the following code:</source>
          <target state="translated">바로 들어가 보자. 다음 코드를 사용하여 &lt;code&gt;world&lt;/code&gt; 응용 프로그램 내에 &lt;code&gt;admin.py&lt;/code&gt; 라는 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="79da13085a3608464e32b76daf1a4b750cb3a395" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine case-insensitive transformations here. This transformation isn&amp;rsquo;t very useful in practice as Django already comes with a bunch of built-in case-insensitive lookups, but it will be a nice demonstration of bilateral transformations in a database-agnostic way.</source>
          <target state="translated">대소 문자를 구분하지 않는 변환을 살펴 보겠습니다. 장고에는 대소 문자를 구분하지 않는 내장 조회가 이미 제공되어 있기 때문에이 변환은 실제로 유용하지는 않지만 데이터베이스와 무관하게 양방향 변환에 대한 훌륭한 데모가 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="00c7bb390f8a74d36b4ee2f29857af8f287892c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this:</source>
          <target state="translated">먼저 입력이 쉼표로 구분 된 전자 메일 주소를 포함하는 문자열인지 확인하는 사용자 지정 양식 필드를 만들어 보겠습니다. 전체 수업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="187a2d21db52b3e5410be8c2a3c86fdac14a40b4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s learn by example.</source>
          <target state="translated">예를 들어 배우자.</target>
        </trans-unit>
        <trans-unit id="1fb3c9be87e64709bf5f0c1265d580cb8272df73" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example to see how this works. If you already have the &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;contenttypes&lt;/code&gt;&lt;/a&gt; application installed, and then add &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;the sites application&lt;/code&gt;&lt;/a&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and run &lt;code&gt;manage.py migrate&lt;/code&gt; to install it, the model &lt;a href=&quot;sites#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;django.contrib.sites.models.Site&lt;/code&gt;&lt;/a&gt; will be installed into your database. Along with it a new instance of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; will be created with the following values:</source>
          <target state="translated">이것이 어떻게 작동하는지보기위한 예를 보자. &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;contenttypes&lt;/code&gt; &lt;/a&gt; 애플리케이션 이 이미 설치되어 &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;the sites application&lt;/code&gt; &lt;/a&gt; 을 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 추가 하고 &lt;code&gt;manage.py migrate&lt;/code&gt; 를 실행 하여 설치하면 &lt;a href=&quot;sites#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;django.contrib.sites.models.Site&lt;/code&gt; &lt;/a&gt; 모델 이 데이터베이스에 설치됩니다. 이와 함께 다음과 같은 값 으로 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 의 새 인스턴스 가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="b482ca18f2f08a83d3ec431b921de771f9948555" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how two of Django&amp;rsquo;s generic class-based views are built out of mixins providing discrete functionality. We&amp;rsquo;ll consider &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, which renders a &amp;ldquo;detail&amp;rdquo; view of an object, and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;, which will render a list of objects, typically from a queryset, and optionally paginate them. This will introduce us to four mixins which between them provide useful functionality when working with either a single Django object, or multiple objects.</source>
          <target state="translated">Django의 일반 클래스 기반 뷰 중 두 개가 개별 기능을 제공하는 믹스 인으로 구축 된 방법을 살펴 보겠습니다. 객체의 &quot;상세한&quot;뷰를 렌더링하는 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 와 일반적으로 쿼리 세트 에서 객체 의 목록을 렌더링하고 선택적으로 페이지를 매기는 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; 를&lt;/a&gt; 고려할 것입니다. 이것은 하나의 Django 객체 또는 여러 객체로 작업 할 때 유용한 기능을 제공하는 4 가지 믹스 인을 소개합니다.</target>
        </trans-unit>
        <trans-unit id="ffefad313aa5954a7172dc72b1d07b889da725a8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at some of these more closely.</source>
          <target state="translated">이것들을 좀 더 자세히 살펴 보자.</target>
        </trans-unit>
        <trans-unit id="010769fda27e004183327e34d1bc70963b10f512" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at template inheritance by starting with an example:</source>
          <target state="translated">예제로 시작하여 템플릿 상속을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="55d7d95000f7a31233733941186d880e813c5ba9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the SQL that will generate the table for the &lt;code&gt;WorldBorder&lt;/code&gt; model:</source>
          <target state="translated">&lt;code&gt;WorldBorder&lt;/code&gt; 모델에 대한 테이블을 생성 할 SQL을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="a58cc92a0a67b5a9a26020d7c3a1539bddac1b9c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at what &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; created:</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; 가&lt;/a&gt; 생성 한 내용을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="f0916a74a448227e847bd0ae1c7a1ee8b3a78ac6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s refactor our &lt;code&gt;CycleNode&lt;/code&gt; implementation to use the &lt;code&gt;render_context&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;render_context&lt;/code&gt; 를 사용하기 위해 &lt;code&gt;CycleNode&lt;/code&gt; 구현을 리팩토링 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="61527bb6f9f99fa92fe94f8a54144255e683d9a4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s reproduce this error by comparing a naive and an aware datetime:</source>
          <target state="translated">순진한 시간과 인식하는 날짜 시간을 비교하여이 오류를 재현 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="b6172a55db4a398066cf2f300f7a317aae4b91ea" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say the &lt;code&gt;news/year_archive.html&lt;/code&gt; template was found. Here&amp;rsquo;s what that might look like:</source>
          <target state="translated">하자는 말할 &lt;code&gt;news/year_archive.html&lt;/code&gt; 템플릿이 발견되었다. 그 모습은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c8498358e4e316a59220a51bcfc584545251953d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we want to change the &lt;code&gt;account_type&lt;/code&gt; for our clients to match their registration dates. We can do this using a conditional expression and the &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">고객이 등록 날짜와 일치하도록 &lt;code&gt;account_type&lt;/code&gt; 을 변경한다고 가정 해 봅시다 . 조건식과 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="674775ae6b8f711b93b934fc943f13569ff5e193" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we&amp;rsquo;re writing a backend for Microsoft&amp;rsquo;s SQL Server which uses the SQL &lt;code&gt;LEN&lt;/code&gt; instead of &lt;code&gt;LENGTH&lt;/code&gt; for the &lt;a href=&quot;database-functions#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt; function. We&amp;rsquo;ll monkey patch a new method called &lt;code&gt;as_sqlserver()&lt;/code&gt; onto the &lt;code&gt;Length&lt;/code&gt; class:</source>
          <target state="translated">이제 우리는 SQL 사용하는 마이크로 소프트의 SQL 서버 백엔드 쓰고있어 가정 해 봅시다 &lt;code&gt;LEN&lt;/code&gt; 을 대신 &lt;code&gt;LENGTH&lt;/code&gt; 에 대한 &lt;a href=&quot;database-functions#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; &lt;/a&gt; 기능을. &lt;code&gt;as_sqlserver()&lt;/code&gt; 라는 새로운 메소드를 &lt;code&gt;Length&lt;/code&gt; 클래스 에 패치합니다 .</target>
        </trans-unit>
        <trans-unit id="9fbadd9a8d68743fcc57b910b725e2c6420e8e5f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you were starting a new project that needed a polls app like the one we&amp;rsquo;ve been working on. How do you make this app reusable? Luckily, you&amp;rsquo;re well on the way already. In &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, we saw how we could decouple polls from the project-level URLconf using an &lt;code&gt;include&lt;/code&gt;. In this tutorial, we&amp;rsquo;ll take further steps to make the app easy to use in new projects and ready to publish for others to install and use.</source>
          <target state="translated">우리가 작업했던 것과 같은 설문 조사 앱이 필요한 새로운 프로젝트를 시작했다고 가정 해 봅시다. 이 앱을 어떻게 재사용 할 수있게합니까? 다행히도, 당신은 이미 길을 가고 있습니다. 에서 &lt;a href=&quot;tutorial01&quot;&gt;튜토리얼 1&lt;/a&gt; , 우리는 우리가 사용 프로젝트 수준의 URLconf에서 여론 조사를 분리 할 수 방법을 살펴 보았다 &lt;code&gt;include&lt;/code&gt; . 이 자습서에서는 새로운 프로젝트에서 앱을 쉽게 사용하고 다른 사용자가 설치하고 사용할 수 있도록 게시 할 수 있도록 추가 단계를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f4547f3c6ed9ab627755ced07c0ef98ea5492c5d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re developing your Django application and have a &amp;ldquo;pristine&amp;rdquo; copy of a database that you&amp;rsquo;d like to interact with. You can dump your database to a fixture (using the &lt;a href=&quot;#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; command, explained above), then use &lt;code&gt;testserver&lt;/code&gt; to run your Web application with that data. With this arrangement, you have the flexibility of messing up your data in any way, knowing that whatever data changes you&amp;rsquo;re making are only being made to a test database.</source>
          <target state="translated">Django 응용 프로그램을 개발 중이며 상호 작용하려는 데이터베이스의&amp;ldquo;기본&amp;rdquo;복사본이 있다고 가정 해 봅시다. 위에서 설명한 &lt;a href=&quot;#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 데이터베이스를 조명기로 덤프 한 다음 &lt;code&gt;testserver&lt;/code&gt; 를 사용 하여 해당 데이터로 웹 응용 프로그램을 실행할 수 있습니다. 이 배열을 사용하면 변경하는 데이터가 테스트 데이터베이스에만 적용된다는 것을 알기 때문에 어떤 방식 으로든 데이터를 엉망으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e592833b5543bdeb8888157baa74642a61fc297" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re trying to override the templates for a third-party application called &lt;code&gt;blog&lt;/code&gt;, which provides the templates &lt;code&gt;blog/post.html&lt;/code&gt; and &lt;code&gt;blog/list.html&lt;/code&gt;. The relevant settings for your project would look like:</source>
          <target state="translated">&lt;code&gt;blog/post.html&lt;/code&gt; 및 &lt;code&gt;blog/list.html&lt;/code&gt; 템플리트를 제공하는 &lt;code&gt;blog&lt;/code&gt; 라는 타사 애플리케이션의 템플리트를 대체하려고한다고 가정하십시오 . 프로젝트 관련 설정은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4a78da4f0f96ccaa8818c94601b3d212850c1086" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how it works:</source>
          <target state="translated">그것이 어떻게 작동하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="e06a71efa03ee78ba69e395440cf513c47c8c2b5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works by registering a signal that gets called after each HTTP request is finished. We&amp;rsquo;ll be connecting to the &lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt;&lt;code&gt;request_finished&lt;/code&gt;&lt;/a&gt; signal.</source>
          <target state="translated">각 HTTP 요청이 완료된 후 호출되는 신호를 등록하여 이것이 어떻게 작동하는지 봅시다. &lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt; &lt;code&gt;request_finished&lt;/code&gt; &lt;/a&gt; 신호에 연결합니다 .</target>
        </trans-unit>
        <trans-unit id="febf35219c9a28beaf6a9acbff3a5277afa2d816" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works by reordering the fields on the edit form. Replace the &lt;code&gt;admin.site.register(Question)&lt;/code&gt; line with:</source>
          <target state="translated">편집 양식에서 필드를 재정렬하여 이것이 어떻게 작동하는지 봅시다. 바꾸기 &lt;code&gt;admin.site.register(Question)&lt;/code&gt; 라인을 함께 :</target>
        </trans-unit>
        <trans-unit id="6404ea57f576d05b9c8fbca7fa5c5d63fa43f83f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by looking at some examples of showing a list of objects or an individual object.</source>
          <target state="translated">객체 목록 또는 개별 객체를 표시하는 몇 가지 예를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="1551f600d211b9d0023bac9d0cb4fadb9a4233e4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with a small custom lookup. We will write a custom lookup &lt;code&gt;ne&lt;/code&gt; which works opposite to &lt;code&gt;exact&lt;/code&gt;. &lt;code&gt;Author.objects.filter(name__ne='Jack')&lt;/code&gt; will translate to the SQL:</source>
          <target state="translated">작은 사용자 정의 조회로 시작하겠습니다. 우리는 &lt;code&gt;exact&lt;/code&gt; 와 반대로 작동 하는 커스텀 lookup &lt;code&gt;ne&lt;/code&gt; 를 작성할 것 입니다. &lt;code&gt;Author.objects.filter(name__ne='Jack')&lt;/code&gt; 은 SQL로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="423531172bf446e55a2e04f7a1a96cecf1db8ece" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with model fields. If you break it down, a model field provides a way to take a normal Python object &amp;ndash; string, boolean, &lt;code&gt;datetime&lt;/code&gt;, or something more complex like &lt;code&gt;Hand&lt;/code&gt; &amp;ndash; and convert it to and from a format that is useful when dealing with the database. (Such a format is also useful for serialization, but as we&amp;rsquo;ll see later, that is easier once you have the database side under control).</source>
          <target state="translated">모델 필드부터 시작하겠습니다. 분석하면 모델 필드는 일반적인 Python 객체 (string, boolean, &lt;code&gt;datetime&lt;/code&gt; 또는 &lt;code&gt;Hand&lt;/code&gt; 와 같은 복잡한 객체)를 가져 와서 데이터베이스를 처리 할 때 유용한 형식으로 변환하는 방법을 제공합니다. (이러한 형식은 직렬화에도 유용하지만 나중에 볼 수 있듯이 데이터베이스 측을 제어하면 더 쉽습니다.)</target>
        </trans-unit>
        <trans-unit id="6f46797d9a8d056443aa92c8f4619748862100fb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s step through this code one line at a time:</source>
          <target state="translated">이 코드를 한 번에 한 줄씩 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="94aa51d90972b01afb689b3d1a89d3eb901bb673" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look inside a couple of those files:</source>
          <target state="translated">이 두 파일을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="bccd1c870a0a4dcf400d08d947411ab954b771e6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try this with an example. Normally, one might do something like this:</source>
          <target state="translated">예를 들어 이것을 시도해 봅시다. 일반적으로 다음과 같은 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="504babc6e275812ba81c4391fb57ae519e3510d7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try with some invalid data. In this case, &lt;code&gt;subject&lt;/code&gt; is blank (an error, because all fields are required by default) and &lt;code&gt;sender&lt;/code&gt; is not a valid email address:</source>
          <target state="translated">유효하지 않은 데이터를 사용해 봅시다. 이 경우 &lt;code&gt;subject&lt;/code&gt; 이 비어 있으며 (모든 필드가 기본적으로 필요하기 때문에 오류가 발생 함) &lt;code&gt;sender&lt;/code&gt; 가 올바른 이메일 주소가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c2190c9fc23eb29106134f7ad4a9ace95beaf6b8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s update our poll detail template (&amp;ldquo;polls/detail.html&amp;rdquo;) from the last tutorial, so that the template contains an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">템플릿에 HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소 가 포함되도록 마지막 자습서에서 폴링 세부 정보 템플릿 (&amp;ldquo;polls / detail.html&amp;rdquo;)을 업데이트하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="2632c1e8aa342b4a8b2b77fdaa7894b3813e8647" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s verify your Django project works. Change into the outer &lt;code&gt;mysite&lt;/code&gt; directory, if you haven&amp;rsquo;t already, and run the following commands:</source>
          <target state="translated">장고 프로젝트가 작동하는지 확인합시다. 외부 &lt;code&gt;mysite&lt;/code&gt; 디렉토리 로 변경하고 ( 아직없는 경우) 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7481c3803bbb2daeb5381bc49b0b54a65124b8cb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through this example. &lt;code&gt;{% regroup %}&lt;/code&gt; takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we&amp;rsquo;re regrouping the &lt;code&gt;cities&lt;/code&gt; list by the &lt;code&gt;country&lt;/code&gt; attribute and calling the result &lt;code&gt;country_list&lt;/code&gt;.</source>
          <target state="translated">이 예제를 살펴 보겠습니다. &lt;code&gt;{% regroup %}&lt;/code&gt; 은 (는) 다시 그룹화 할 목록, 그룹화 할 속성 및 결과 목록의 이름이라는 세 가지 인수를 사용합니다. 여기서는 &lt;code&gt;country&lt;/code&gt; 속성 별로 &lt;code&gt;cities&lt;/code&gt; 목록을 다시 그룹화 하고 결과 &lt;code&gt;country_list&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="dd3cf48e50eddc3fba400217aaf336f782eaf8e5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write a migration that populates our new &lt;code&gt;name&lt;/code&gt; field with the combined values of &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; (we&amp;rsquo;ve come to our senses and realized that not everyone has first and last names). All we need to do is use the historical model and iterate over the rows:</source>
          <target state="translated">새 &lt;code&gt;name&lt;/code&gt; 필드를 &lt;code&gt;first_name&lt;/code&gt; 과 &lt;code&gt;last_name&lt;/code&gt; 의 결합 된 값으로 채우는 마이그레이션을 작성해 보겠습니다 (우리는 모든 사람들이 이름과 성을 가지고 있지는 않음을 깨달았습니다). 기록 모델을 사용하고 행을 반복하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="36bb27cf6e20079aabce85127956f8d966f68f12" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write the first view. Open the file &lt;code&gt;polls/views.py&lt;/code&gt; and put the following Python code in it:</source>
          <target state="translated">첫 번째 견해를 씁시다. &lt;code&gt;polls/views.py&lt;/code&gt; 파일을 열고 다음 Python 코드를 넣습니다.</target>
        </trans-unit>
        <trans-unit id="8f407590b229000b90afe5cd5954958752ddd121" translate="yes" xml:space="preserve">
          <source>Lets you create a formset with the ability to order:</source>
          <target state="translated">주문할 수있는 폼셋을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c02187affceb445e9305a60658d3c066c7db16fa" translate="yes" xml:space="preserve">
          <source>Lets you create a formset with the ability to select forms for deletion:</source>
          <target state="translated">삭제할 양식을 선택하는 기능을 사용하여 양식 세트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f556c30e0a0e7632f1adaf69376f9c9a698f371c" translate="yes" xml:space="preserve">
          <source>Lets you pass a command as a string to execute it as Django, like so:</source>
          <target state="translated">다음과 같이 명령을 문자열로 전달하여 Django로 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df65069d0885fd61cd4c2cc0c08459bf7ec10caa" translate="yes" xml:space="preserve">
          <source>Lets you specify the URL that users who don&amp;rsquo;t pass the test will be redirected to. It may be a login page and defaults to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; if you don&amp;rsquo;t specify one.</source>
          <target state="translated">테스트를 통과하지 못한 사용자가 리디렉션 될 URL을 지정할 수 있습니다. 로그인 페이지 일 수 있으며 기본적으로 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; 을&lt;/a&gt; 지정하지 않으면 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="ca7f7f5bed464663e88c2d9517ab5e284fa91f09" translate="yes" xml:space="preserve">
          <source>Level Constant</source>
          <target state="translated">레벨 상수</target>
        </trans-unit>
        <trans-unit id="b954a0887add52752e06674c9d7013c57e040fe0" translate="yes" xml:space="preserve">
          <source>Libraries can be loaded by passing the corresponding dictionary key to the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">해당 사전 키를 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt; 태그 에 전달하여 라이브러리를로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29808eb5cb44255de14dac59aefcc411b6547528" translate="yes" xml:space="preserve">
          <source>Libraries can be loaded by passing the corresponding dictionary key to the &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">해당 사전 키를 &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt; 태그 에 전달하여 라이브러리를로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0b3f991e900143285adef8fbb526e8ab6f02c275" translate="yes" xml:space="preserve">
          <source>Library Requirements</source>
          <target state="translated">도서관 요구 사항</target>
        </trans-unit>
        <trans-unit id="ac58e4217af56e3a1ba8bec5e4dcc9685aa92add" translate="yes" xml:space="preserve">
          <source>Library environment settings</source>
          <target state="translated">라이브러리 환경 설정</target>
        </trans-unit>
        <trans-unit id="cc5b2a062f05dd148b4ef24c76639416ebcc59f3" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD License.</source>
          <target state="translated">BSD 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="6e7607aff826aade5ab90b8d8de0fb82a918a57b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;null=True&lt;/code&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;null=True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="58e57aeb5cde6d590a20ba69d32dc0a71347311b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;null=True&lt;/code&gt;. Use that instead of this field as it&amp;rsquo;s likely to be deprecated in a future version of Django.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;null=True&lt;/code&gt; . 향후 버전의 장고에서는 더 이상 사용되지 않을 가능성이 있으므로이 필드 대신에이 필드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d863c349005f0af90c7f401e7734ee9139cec79f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.unique_for_month&quot;&gt;&lt;code&gt;unique_for_month&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt; &lt;code&gt;unique_for_date&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.Field.unique_for_month&quot;&gt; &lt;code&gt;unique_for_month&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2cb204156411d2f4610b450ea6f4198604fc63ca" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt;, but requires the field to be unique with respect to the month.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt; &lt;code&gt;unique_for_date&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 월과 관련하여 필드가 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="911a97afa7975200bcc2321bf08148741b444fe2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;related_query_name&lt;/code&gt; supports app label and class interpolation via &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;some special syntax&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;related_query_name&lt;/code&gt; 의 지원을 통해 라벨 및 클래스 보간되는 앱 &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;몇 가지 특수 구문&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e8ba55cee6b9bc75efd8d7b2d9363b4469563af" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;, it can be registered as a transform on &lt;code&gt;IntegerField&lt;/code&gt;. The default lookup name is &lt;code&gt;chr&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 &lt;code&gt;IntegerField&lt;/code&gt; 에 변환으로 등록 할 수 있습니다 . 기본 조회 이름은 &lt;code&gt;chr&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a1e12840ec9b2637f09dc7a3ab639b1aa8cc958b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; raise &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; if there is no object with the given parameters.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;earliest()&lt;/code&gt; 와 &lt;code&gt;latest()&lt;/code&gt; 인상 &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt; 지정된 파라미터에는 객체가없는 경우.</target>
        </trans-unit>
        <trans-unit id="214c8acc0296f6b6279e2c41f5ce14dda1a45453" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; raise &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; if there is no object with the given parameters.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;earliest()&lt;/code&gt; 와 &lt;code&gt;latest()&lt;/code&gt; 인상 &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt; 지정된 파라미터에는 객체가없는 경우.</target>
        </trans-unit>
        <trans-unit id="239355497d3fbe89204c4a53a6ee6315e778dee6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt;, if you&amp;rsquo;re using manually specified primary keys and an object needs to be created but the key already exists in the database, an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt; &lt;code&gt;get_or_create()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt; &lt;code&gt;create()&lt;/code&gt; &lt;/a&gt;() 와 같이 수동으로 지정된 기본 키를 사용하고 오브젝트를 작성해야하지만 키가 데이터베이스에 이미 존재하면 &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ba1002c38a02557610283e402687e7baac287229" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt;, but sent at the end of a model&amp;rsquo;s &lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method and a queryset&amp;rsquo;s &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt; 하지만 모델의 말에 전송 &lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 메소드와의 검색어의 &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="92ea644b70e840a836965a7720340cad8a857b9f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt;, but sent at the end of the &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드 의 끝에 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="346c284a84600b7c02cc33179c217f057c75135f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt;&lt;code&gt;RadioSelect&lt;/code&gt;&lt;/a&gt;, you can loop over the individual checkboxes for the widget&amp;rsquo;s choices. Unlike &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt;&lt;code&gt;RadioSelect&lt;/code&gt;&lt;/a&gt;, the checkboxes won&amp;rsquo;t include the &lt;code&gt;required&lt;/code&gt; HTML attribute if the field is required because browser validation would require all checkboxes to be checked instead of at least one.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.RadioSelect&quot;&gt; &lt;code&gt;RadioSelect&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 위젯 선택에 대한 개별 확인란을 반복 할 수 있습니다. &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt; &lt;code&gt;RadioSelect&lt;/code&gt; &lt;/a&gt; 와 달리 , 브라우저 유효성 검사는 적어도 하나의 확인란 대신 모든 확인란을 선택해야하므로 필드가 필요한 경우 확인란에 &lt;code&gt;required&lt;/code&gt; HTML 속성이 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3d780d132abddc411dc49eff10a1e51ef8c50836" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpRequest.get_full_path&quot;&gt;&lt;code&gt;get_full_path()&lt;/code&gt;&lt;/a&gt;, but uses &lt;a href=&quot;#django.http.HttpRequest.path_info&quot;&gt;&lt;code&gt;path_info&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.http.HttpRequest.get_full_path&quot;&gt; &lt;code&gt;get_full_path()&lt;/code&gt; &lt;/a&gt; 하지만, 용도는 &lt;a href=&quot;#django.http.HttpRequest.path_info&quot;&gt; &lt;code&gt;path_info&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3b2a9fd84e842e04d0d7921a646d8d793fe3b3df" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;, but uses a 405 status code. The first argument to the constructor is required: a list of permitted methods (e.g. &lt;code&gt;['GET', 'POST']&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 405 상태 코드를 사용합니다. 생성자에 대한 첫 번째 인수는 허용 된 메소드 목록 (예 : &lt;code&gt;['GET', 'POST']&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="705089e55a46741f3540639bd76ad967ec33de2b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponse.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;, but &lt;a href=&quot;../topics/signing&quot;&gt;cryptographic signing&lt;/a&gt; the cookie before setting it. Use in conjunction with &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt;&lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt;&lt;/a&gt;. You can use the optional &lt;code&gt;salt&lt;/code&gt; argument for added key strength, but you will need to remember to pass it to the corresponding &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt;&lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.http.HttpResponse.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt; 하지만, &lt;a href=&quot;../topics/signing&quot;&gt;서명 암호&lt;/a&gt; 를 설정하기 전에 쿠키를. &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt; &lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt; &lt;/a&gt; 와 함께 사용하십시오 . 추가 키 강도에 선택적 &lt;code&gt;salt&lt;/code&gt; 인수를 사용할 수 있지만 해당 &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt; &lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt; &lt;/a&gt; 호출 로 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="df768b23ac3b315c812da78f870686a8bb4dc2c6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt;, but it returns a permanent redirect (HTTP status code 301) instead of a &amp;ldquo;found&amp;rdquo; redirect (status code 302).</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 &quot;발견 된&quot;리디렉션 (상태 코드 302) 대신 영구 리디렉션 (HTTP 상태 코드 301)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8563b2bd8ef79b66e64abc13b185806b9bcc5261" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.QueryDict.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;, except it includes all values, as a list, for each member of the dictionary. For example:</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.http.QueryDict.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; , 사전의 각 멤버에 대해,리스트로서, 모든 값을 포함 제외시켰다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8ae206c32c2628442b4554143850ec58ec83ef81" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.QueryDict.setdefault&quot;&gt;&lt;code&gt;setdefault()&lt;/code&gt;&lt;/a&gt;, except it takes a list of values instead of a single value.</source>
          <target state="translated">&lt;a href=&quot;#django.http.QueryDict.setdefault&quot;&gt; &lt;code&gt;setdefault()&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 단일 값 대신 값 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="955afb7b9c578249edff08f0675f1e6007885295" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.template.Engine.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;, except it takes a list of names and returns the first template that was found.</source>
          <target state="translated">&lt;a href=&quot;#django.template.Engine.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt; 과 같이 이름 목록을 가져 와서 찾은 첫 번째 템플릿을 반환한다는 점을 제외하고.</target>
        </trans-unit>
        <trans-unit id="39373966de87495533da143e122efa7b8991fcf2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../migration-operations#django.db.migrations.operations.AddIndex&quot;&gt;&lt;code&gt;AddIndex&lt;/code&gt;&lt;/a&gt;, but creates an index with the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option. This has a few caveats to be aware of when using this option, see &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY&quot;&gt;the PostgreSQL documentation of building indexes concurrently&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../migration-operations#django.db.migrations.operations.AddIndex&quot;&gt; &lt;code&gt;AddIndex&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 &lt;code&gt;CONCURRENTLY&lt;/code&gt; 옵션으로 색인을 작성합니다 . 여기에는이 옵션을 사용할 때주의해야 할 몇 가지주의 사항이 있습니다 . &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY&quot;&gt;인덱스를 동시에 빌드하는 PostgreSQL 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="916b0736c9a97408dd3dd4b442e03c3e1742fbdf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../migration-operations#django.db.migrations.operations.RemoveIndex&quot;&gt;&lt;code&gt;RemoveIndex&lt;/code&gt;&lt;/a&gt;, but removes the index with the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option. This has a few caveats to be aware of when using this option, see &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-dropindex.html&quot;&gt;the PostgreSQL documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../migration-operations#django.db.migrations.operations.RemoveIndex&quot;&gt; &lt;code&gt;RemoveIndex&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 &lt;code&gt;CONCURRENTLY&lt;/code&gt; 옵션으로 인덱스를 제거합니다 . 이 옵션을 사용할 때주의해야 할 몇 가지주의 사항이 있습니다 ( &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-dropindex.html&quot;&gt;PostgreSQL 설명서&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="75f974a90c1064ff9e66af2aa32291764d99ea63" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; can specify &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt;. In the above example, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;Entry&lt;/code&gt; had specified &lt;code&gt;related_name='entries'&lt;/code&gt;, then each &lt;code&gt;Author&lt;/code&gt; instance would have an &lt;code&gt;entries&lt;/code&gt; attribute instead of &lt;code&gt;entry_set&lt;/code&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 는&lt;/a&gt; 지정할 수 있습니다 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; 을&lt;/a&gt; . 경우 위의 예에서 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;Entry&lt;/code&gt; 지정했다 &lt;code&gt;related_name='entries'&lt;/code&gt; , 각 &lt;code&gt;Author&lt;/code&gt; 인스턴스는 것 &lt;code&gt;entries&lt;/code&gt; 대신 속성 &lt;code&gt;entry_set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="152b27754fb68e577d55e104e8ae19972dad7d59" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t touch an existing table. It will only create missing tables.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; 은&lt;/a&gt; 기존의 테이블을 터치하지 않습니다. 누락 된 테이블 만 작성합니다.</target>
        </trans-unit>
        <trans-unit id="786a89e1a019ca41285aa5568a005c590d86720a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;formsets&quot;&gt;regular formsets&lt;/a&gt;, Django provides a couple of enhanced formset classes to make working with Django models more convenient. Let&amp;rsquo;s reuse the &lt;code&gt;Author&lt;/code&gt; model from above:</source>
          <target state="translated">Django는 &lt;a href=&quot;formsets&quot;&gt;일반 폼셋&lt;/a&gt; 과 마찬가지로 Django 모델 작업을보다 편리하게하기 위해 몇 가지 고급 폼셋 클래스를 제공합니다. 위에서 &lt;code&gt;Author&lt;/code&gt; 모델을 재사용하자 :</target>
        </trans-unit>
        <trans-unit id="51494adf7a641f08554c36bcc81e8661f20bd02d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt;&lt;code&gt;dict.items()&lt;/code&gt;&lt;/a&gt;, except this uses the same last-value logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and returns an iterator object instead of a view object. For example:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt; &lt;code&gt;dict.items()&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt; 과 동일한 마지막 값 논리를 사용하고보기 객체 대신 반복자 객체를 반환합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c55b5527be4c2db918e610d42ba56ec6ab40c74f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt;, except it uses &lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt; internally.</source>
          <target state="translated">내부적으로 &lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt; &lt;code&gt;__setitem__()&lt;/code&gt; &lt;/a&gt; 사용 한다는 점을 제외하고 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&quot;&gt; &lt;code&gt;dict.setdefault()&lt;/code&gt; &lt;/a&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a7a26680c4baddc5bdcca1a3e548134ab91aa8e0" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.values&quot;&gt;&lt;code&gt;dict.values()&lt;/code&gt;&lt;/a&gt;, except this uses the same last-value logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and returns an iterator instead of a view object. For example:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.values&quot;&gt; &lt;code&gt;dict.values()&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt; 과 동일한 마지막 값 논리를 사용하고보기 객체 대신 반복자를 반환합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="739f7b0ad74db367e30aab10530f59aa3a7cac4f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cache.set()&lt;/code&gt;, &lt;code&gt;set_many()&lt;/code&gt; takes an optional &lt;code&gt;timeout&lt;/code&gt; parameter.</source>
          <target state="translated">마찬가지로 &lt;code&gt;cache.set()&lt;/code&gt; , &lt;code&gt;set_many()&lt;/code&gt; 옵션 소요 &lt;code&gt;timeout&lt;/code&gt; 매개 변수를.</target>
        </trans-unit>
        <trans-unit id="bb1cdfba618a7cae4220d4a0f47c6724622f7e74" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;decorator_from_middleware&lt;/code&gt;, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator is created from the &lt;code&gt;CacheMiddleware&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;decorator_from_middleware&lt;/code&gt; 와 유사 하지만 미들웨어 _ 클래스로 전달 될 인수를 허용하는 함수를 리턴합니다. 예를 들어, &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt; &lt;code&gt;cache_page()&lt;/code&gt; &lt;/a&gt; 데코레이터는 &lt;code&gt;CacheMiddleware&lt;/code&gt; 과 같이 CacheMiddleware 에서 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="bdd480f7f0b5f6d4b4fbf2c6f4f3e4f6b1854c5d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;push()&lt;/code&gt;, you can use &lt;code&gt;update()&lt;/code&gt; as a context manager to ensure a matching &lt;code&gt;pop()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;push()&lt;/code&gt; 와 마찬가지로 &lt;code&gt;update()&lt;/code&gt; 를 컨텍스트 관리자로 사용하여 일치하는 &lt;code&gt;pop()&lt;/code&gt; 이 호출 되도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba602b2e6c355200a165d077ac6e9a0594ee71f9" translate="yes" xml:space="preserve">
          <source>Like PostgreSQL itself, Django defaults to the &lt;code&gt;READ COMMITTED&lt;/code&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/transaction-iso.html&quot;&gt;isolation level&lt;/a&gt;. If you need a higher isolation level such as &lt;code&gt;REPEATABLE READ&lt;/code&gt; or &lt;code&gt;SERIALIZABLE&lt;/code&gt;, set it in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">PostgreSQL 자체와 마찬가지로 Django는 기본적으로 &lt;code&gt;READ COMMITTED&lt;/code&gt; &lt;a href=&quot;https://www.postgresql.org/docs/current/transaction-iso.html&quot;&gt;격리 수준으로 설정&lt;/a&gt; 됩니다. &lt;code&gt;REPEATABLE READ&lt;/code&gt; 또는 &lt;code&gt;SERIALIZABLE&lt;/code&gt; 과 같이 높은 격리 수준이 필요한 경우 데이터베이스 구성 의 &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt; 부분에서 &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; 로&lt;/a&gt; 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="d34fb63c0b51ff06df9550a1593f51e8117c6b72" translate="yes" xml:space="preserve">
          <source>Like WSGI, ASGI has you supply an &lt;code&gt;application&lt;/code&gt; callable which the application server uses to communicate with your code. It&amp;rsquo;s commonly provided as an object named &lt;code&gt;application&lt;/code&gt; in a Python module accessible to the server.</source>
          <target state="translated">WSGI와 마찬가지로, ASGI 당신은 제공 한 &lt;code&gt;application&lt;/code&gt; 응용 프로그램 서버가 사용하는 코드와 통신하기 위해 호출합니다. 일반적으로 서버에 액세스 할 수있는 Python 모듈에서 &lt;code&gt;application&lt;/code&gt; 이라는 객체로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="8b7753e1b85c02959312c8643ca4aadd2afe10bc" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt; &lt;code&gt;PositiveIntegerField&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 특정 (데이터베이스 종속) 포인트 아래의 값만 허용합니다. Django가 지원하는 모든 데이터베이스 에서 &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;32767&lt;/code&gt; 사이의 값 이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="3e2dae3f888c279defb88d23e93842df027bb502" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9223372036854775807&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">유사한 &lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt; &lt;code&gt;PositiveIntegerField&lt;/code&gt; &lt;/a&gt; 있지만 특정 (데이터베이스에 따라 다름) 지점에서 값을 수 있습니다. &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;9223372036854775807&lt;/code&gt; 까지의 값은 Django에서 지원하는 모든 데이터베이스에서 안전합니다.</target>
        </trans-unit>
        <trans-unit id="00b7111396930922c74543cf53e7858a5613c560" translate="yes" xml:space="preserve">
          <source>Like a CharField, you can specify &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; (read the note about database portability and &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; in that section, too). If &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; is not specified, Django will use a default length of 50.</source>
          <target state="translated">CharField와 같이 &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt; 를 지정할 수 있습니다 ( 해당 섹션의 데이터베이스 이식성 및 &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt; 에 대한 참고 사항도 읽으십시오 ). 경우 &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt; 지정되지 않은, 장고 (50)의 기본 길이를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5f60adb6d58f4db10d99251a6c1029ea1aeda81c" translate="yes" xml:space="preserve">
          <source>Like a view, the arguments in the URL are passed to the &lt;code&gt;get_object()&lt;/code&gt; method along with the request object.</source>
          <target state="translated">보기와 같이 URL의 인수 는 요청 오브젝트와 함께 &lt;code&gt;get_object()&lt;/code&gt; 메소드 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="3540955efa9e226e2af7cd4207b9c9d694373a03" translate="yes" xml:space="preserve">
          <source>Like all &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; subclasses, &lt;a href=&quot;#django.db.models.URLField&quot;&gt;&lt;code&gt;URLField&lt;/code&gt;&lt;/a&gt; takes the optional &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; argument. If you don&amp;rsquo;t specify &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;, a default of 200 is used.</source>
          <target state="translated">모든 &lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 서브 클래스 와 마찬가지로 &lt;a href=&quot;#django.db.models.URLField&quot;&gt; &lt;code&gt;URLField&lt;/code&gt; &lt;/a&gt; 는 선택적 &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt; 인수를 사용합니다. &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; 를&lt;/a&gt; 지정하지 않으면 기본값 200이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5fcac6c11b3e3fe6905fac69819c8a77da3c7226" translate="yes" xml:space="preserve">
          <source>Like all custom template tags, you&amp;rsquo;ll need to &lt;a href=&quot;../templates/language#loading-custom-template-libraries&quot;&gt;load its custom tag library&lt;/a&gt; before you can use it. After loading the library, you can retrieve all current flatpages via the &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">모든 사용자 정의 템플릿 태그와 마찬가지로 사용하기 전에 &lt;a href=&quot;../templates/language#loading-custom-template-libraries&quot;&gt;사용자 정의 태그 라이브러리&lt;/a&gt; 를 로드 해야 합니다. 라이브러리를로드 한 후 &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt; &lt;code&gt;get_flatpages&lt;/code&gt; &lt;/a&gt; 태그 를 통해 모든 현재 플랫 페이지를 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9951a67920449e4d4b835b90125cd72c36ccfbf5" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) limit. Values from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 특정 (데이터베이스에 따라 다름) 한도 미만의 값만 허용합니다. Django가 지원하는 모든 데이터베이스 에서 &lt;code&gt;1&lt;/code&gt; 에서 &lt;code&gt;32767&lt;/code&gt; 사이의 값 이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="0bb140ee24bb5ffd0e10ed6b33a66a505a5c3dd7" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, but must be either positive or zero (&lt;code&gt;0&lt;/code&gt;). Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2147483647&lt;/code&gt; are safe in all databases supported by Django. The value &lt;code&gt;0&lt;/code&gt; is accepted for backward compatibility reasons.</source>
          <target state="translated">처럼 &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt; 하지만 중 하나를 긍정적이거나 제로 ( &lt;code&gt;0&lt;/code&gt; ). Django가 지원하는 모든 데이터베이스 에서 &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;2147483647&lt;/code&gt; 사이의 값 이 안전합니다. 이전 버전과의 호환성을 위해 값 &lt;code&gt;0&lt;/code&gt; 이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="95ba58840db2ee448b0fa54dabeda7c3b5fb30f9" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;-32768&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">처럼 &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt; 있지만 특정 (데이터베이스에 따라 다름) 지점에서 값을 수 있습니다. Django가 지원하는 모든 데이터베이스 에서 &lt;code&gt;-32768&lt;/code&gt; 에서 &lt;code&gt;32767&lt;/code&gt; 사이의 값 이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="d83aed216be35e66a6d332c877c5d35102c04c61" translate="yes" xml:space="preserve">
          <source>Like loggers, handlers also have a log level. If the log level of a log record doesn&amp;rsquo;t meet or exceed the level of the handler, the handler will ignore the message.</source>
          <target state="translated">로거와 마찬가지로 처리기에도 로그 수준이 있습니다. 로그 레코드의 로그 레벨이 핸들러 레벨을 충족하지 않거나 초과하면 핸들러는 메시지를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="b7d833a6751175de456bd982f108a2cc4741389d" translate="yes" xml:space="preserve">
          <source>Like other Django contrib applications, you will &lt;em&gt;only&lt;/em&gt; need to add &lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in your settings. This is so that the &lt;code&gt;gis&lt;/code&gt; templates can be located &amp;ndash; if not done, then features such as the geographic admin or KML sitemaps will not function properly.</source>
          <target state="translated">다른 장고의 contrib 응용 프로그램과 마찬가지로, 당신은됩니다 &lt;em&gt;만&lt;/em&gt; 추가해야 &lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; 을&lt;/a&gt; 에 &lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에서. 이를 통해 &lt;code&gt;gis&lt;/code&gt; 템플릿을 찾을 수 있습니다. 그렇지 않은 경우 지역 관리자 나 KML 사이트 맵과 같은 기능이 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c665315f6d801d5b6f09a247bd1d42caef56cf5" translate="yes" xml:space="preserve">
          <source>Like other methods, the &lt;code&gt;timeout&lt;/code&gt; argument is optional and defaults to the &lt;code&gt;TIMEOUT&lt;/code&gt; option of the appropriate backend in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">다른 방법과 마찬가지로 &lt;code&gt;timeout&lt;/code&gt; 인수는 선택 사항이며 &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt; 설정 에서 적절한 백엔드 의 &lt;code&gt;TIMEOUT&lt;/code&gt; 옵션이 기본값 입니다.</target>
        </trans-unit>
        <trans-unit id="3aed27718d957f62e17035d413aabc537e0029fc" translate="yes" xml:space="preserve">
          <source>Like pre_init, but this one is sent when the &lt;code&gt;__init__()&lt;/code&gt; method finishes.</source>
          <target state="translated">pre_init와 비슷하지만 &lt;code&gt;__init__()&lt;/code&gt; 메소드가 완료 되면 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="1f1c6004ebf3711f7e8bdedde30c5087916707a3" translate="yes" xml:space="preserve">
          <source>Like regular Python files, you can read the file line-by-line by iterating over the uploaded file:</source>
          <target state="translated">일반 Python 파일과 마찬가지로 업로드 된 파일을 반복하여 파일을 한 줄씩 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eef7d6244014f8627193d8008d82d067746059ec" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; and &lt;code&gt;formfield_for_manytomany&lt;/code&gt; methods, the &lt;code&gt;formfield_for_choice_field&lt;/code&gt; method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows:</source>
          <target state="translated">등 &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; 및 &lt;code&gt;formfield_for_manytomany&lt;/code&gt; 방법의 &lt;code&gt;formfield_for_choice_field&lt;/code&gt; 방법은 선언의 선택을 가진 필드 양식 필드 기본값을 변경 오버라이드 (override) 할 수 있습니다. 예를 들어, 수퍼 유저가 사용할 수있는 선택 사항이 일반 직원이 사용할 수있는 선택 사항과 달라야하는 경우 다음과 같이 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b0e54aa6002f6648959e5fde59d83b613a588b1" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; method, the &lt;code&gt;formfield_for_manytomany&lt;/code&gt; method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners &amp;ndash; a many to many relationship &amp;ndash; you could filter the &lt;code&gt;Car&lt;/code&gt; foreign key field to only display the cars owned by the &lt;code&gt;User&lt;/code&gt;:</source>
          <target state="translated">등 &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; 방법의 &lt;code&gt;formfield_for_manytomany&lt;/code&gt; 방법은 많은 분야에 많은 기본 양식 필드를 변경 오버라이드 (override) 할 수 있습니다. 예를 들어, 소유자가 여러 대의 자동차를 소유 할 수 있고 자동차가 여러 대의 소유자 (다 대다 관계)에 속할 수있는 경우 &lt;code&gt;Car&lt;/code&gt; 외래 키 필드를 필터링 하여 &lt;code&gt;User&lt;/code&gt; 소유 한 자동차 만 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31f10fbef42ead92801c9234e033fbaaf39c7b22" translate="yes" xml:space="preserve">
          <source>Like the model field&amp;rsquo;s &lt;a href=&quot;../models/fields#django.db.models.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt;, this value isn&amp;rsquo;t HTML-escaped in automatically-generated forms.</source>
          <target state="translated">모델 필드의 &lt;a href=&quot;../models/fields#django.db.models.Field.help_text&quot;&gt; &lt;code&gt;help_text&lt;/code&gt; &lt;/a&gt; 와 마찬가지로이 값은 자동 생성 된 양식에서 HTML 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2ee07a6c8901e20df89791f61993d7c04c839518" translate="yes" xml:space="preserve">
          <source>Like we said above, the default applications are included for the common case, but not everybody needs them. If you don&amp;rsquo;t need any or all of them, feel free to comment-out or delete the appropriate line(s) from &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; before running &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command will only run migrations for apps in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">위에서 말했듯이 기본 응용 프로그램은 일반적인 경우에 포함되어 있지만 모든 사람이 필요한 것은 아닙니다. 이들 중 일부 또는 전부가 필요하지 않은 경우, &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 를 실행하기 전에 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 적절한 행을 주석 처리하거나 삭제하십시오 . &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령은에서 애플 리케이션을위한 마이그레이션을 실행 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="66be0fca21e376129e6c827671f94aa60b75b0e6" translate="yes" xml:space="preserve">
          <source>Likewise &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; is a thin wrapper adapting &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt; to the common template API.</source>
          <target state="translated">마찬가지로 &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; 은 &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt; &lt;code&gt;django.template.Template&lt;/code&gt; &lt;/a&gt; 을 공통 템플리트 API에 적용하는 얇은 랩퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="bd395412545993aaaed91e9a0591200ef0116d19" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;s does not appear in &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; 에&lt;/a&gt; 나타나지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="65651098030cec17f9add3564fabd28b9a8d889b" translate="yes" xml:space="preserve">
          <source>Likewise, Django provides the &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">마찬가지로 Django는 &lt;a href=&quot;#django.test.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt; 데코레이터를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="a0475d548a6e1cbd1322fc0c9137a9116d5fd248" translate="yes" xml:space="preserve">
          <source>Limitations of multiple databases</source>
          <target state="translated">여러 데이터베이스의 제한</target>
        </trans-unit>
        <trans-unit id="81293e5c309d9dfcca7d5d8a02e465126af1192c" translate="yes" xml:space="preserve">
          <source>Limitations of the provided locale formats</source>
          <target state="translated">제공된 로케일 형식의 제한 사항</target>
        </trans-unit>
        <trans-unit id="8189faab6b029cc653b33f4c4750aed9ad4c8f5a" translate="yes" xml:space="preserve">
          <source>Limitations with string literals</source>
          <target state="translated">문자열 리터럴에 대한 제한</target>
        </trans-unit>
        <trans-unit id="7bcda513dc4ecc2e4b423a51154674ffc93ff9ff" translate="yes" xml:space="preserve">
          <source>Limiting &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">제한 &lt;code&gt;QuerySet&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="2ba12ef865c53db8307ed40e2579ac7177efa133" translate="yes" xml:space="preserve">
          <source>Limiting a subquery to a single column</source>
          <target state="translated">하위 쿼리를 단일 열로 제한</target>
        </trans-unit>
        <trans-unit id="971ffbdea2890da7948e9724ae7ef3cf3d664072" translate="yes" xml:space="preserve">
          <source>Limiting access to logged-in users</source>
          <target state="translated">로그인 한 사용자에 대한 액세스 제한</target>
        </trans-unit>
        <trans-unit id="54b02334497290608d1bafc2deca7fc84fc2dfc2" translate="yes" xml:space="preserve">
          <source>Limiting access to logged-in users that pass a test</source>
          <target state="translated">테스트를 통과 한 로그인 한 사용자에 대한 액세스 제한</target>
        </trans-unit>
        <trans-unit id="bc8f42c384b84979e56038227caf8b777339004f" translate="yes" xml:space="preserve">
          <source>Limiting flatpages by base URL</source>
          <target state="translated">기본 URL로 플랫 페이지 제한</target>
        </trans-unit>
        <trans-unit id="ace73d3c8d253f1855ef095c01717043cd29aa5f" translate="yes" xml:space="preserve">
          <source>Limiting the maximum number of forms</source>
          <target state="translated">최대 양식 수 제한</target>
        </trans-unit>
        <trans-unit id="756e3264bedaf6f3365711aa7e045d72b4f68c7a" translate="yes" xml:space="preserve">
          <source>Limiting the number of editable objects</source>
          <target state="translated">편집 가능한 객체 수 제한</target>
        </trans-unit>
        <trans-unit id="da88c2fe4acaa5b5968c3b02bdc16c00c7b795f2" translate="yes" xml:space="preserve">
          <source>Limiting the subquery to a single row</source>
          <target state="translated">하위 쿼리를 단일 행으로 제한</target>
        </trans-unit>
        <trans-unit id="041db2b4ee7faeb26164b54ec59eaa80dec142d2" translate="yes" xml:space="preserve">
          <source>Limits valid inputs to the specified protocol. Accepted values are &lt;code&gt;'both'&lt;/code&gt; (default), &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;. Matching is case insensitive.</source>
          <target state="translated">유효한 입력을 지정된 프로토콜로 제한합니다. 허용되는 값은 &lt;code&gt;'both'&lt;/code&gt; (기본값), &lt;code&gt;'IPv4'&lt;/code&gt; 또는 &lt;code&gt;'IPv6'&lt;/code&gt; 입니다. 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="484b44a0117656cdc1e07d33a88d93a8d2f24ea6" translate="yes" xml:space="preserve">
          <source>Limits valid inputs to the specified protocol. Accepted values are &lt;code&gt;both&lt;/code&gt; (default), &lt;code&gt;IPv4&lt;/code&gt; or &lt;code&gt;IPv6&lt;/code&gt;. Matching is case insensitive.</source>
          <target state="translated">유효한 입력을 지정된 프로토콜로 제한합니다. 허용되는 값은 &lt;code&gt;both&lt;/code&gt; (기본값), &lt;code&gt;IPv4&lt;/code&gt; 또는 &lt;code&gt;IPv6&lt;/code&gt; 입니다. 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4950b61e87b9227686774b179639eaf32577092a" translate="yes" xml:space="preserve">
          <source>Lines are split using &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;universal newlines&lt;/strong&gt;&lt;/a&gt;. The following are recognized as ending a line: the Unix end-of-line convention &lt;code&gt;'\n'&lt;/code&gt;, the Windows convention &lt;code&gt;'\r\n'&lt;/code&gt;, and the old Macintosh convention &lt;code&gt;'\r'&lt;/code&gt;.</source>
          <target state="translated">줄은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;범용&lt;/strong&gt;&lt;/a&gt; 줄 &lt;strong&gt;바꿈을&lt;/strong&gt; 사용하여 분할됩니다 . 다음은 줄 끝으로 인식됩니다 : Unix 줄 끝 규칙 &lt;code&gt;'\n'&lt;/code&gt; , Windows 규칙 &lt;code&gt;'\r\n'&lt;/code&gt; 및 이전 Macintosh 규칙 &lt;code&gt;'\r'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="999cfb6c0645f8beaa03ab5c3c2acaad55655c97" translate="yes" xml:space="preserve">
          <source>Lines are split using &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot;&gt;universal newlines&lt;/a&gt;. The following are recognized as ending a line: the Unix end-of-line convention &lt;code&gt;'\n'&lt;/code&gt;, the Windows convention &lt;code&gt;'\r\n'&lt;/code&gt;, and the old Macintosh convention &lt;code&gt;'\r'&lt;/code&gt;.</source>
          <target state="translated">행은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot;&gt;범용 개행을&lt;/a&gt; 사용하여 분할됩니다 . 다음은 줄 끝으로 인식됩니다. Unix 줄 끝 규칙 &lt;code&gt;'\n'&lt;/code&gt; , Windows 규칙 &lt;code&gt;'\r\n'&lt;/code&gt; 및 이전 Macintosh 규칙 &lt;code&gt;'\r'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0517071aa376e797705058bbad4b658954b9930" translate="yes" xml:space="preserve">
          <source>Link</source>
          <target state="translated">Link</target>
        </trans-unit>
        <trans-unit id="157c974c5568be5651b5bfe24c42d2205c9b6e69" translate="yes" xml:space="preserve">
          <source>Link (Benoit)</source>
          <target state="translated">링크 (베노이 트)</target>
        </trans-unit>
        <trans-unit id="64590bd60ee31dd14805fcf870b334ba2446be7e" translate="yes" xml:space="preserve">
          <source>Link (Sears)</source>
          <target state="translated">링크 (Sears)</target>
        </trans-unit>
        <trans-unit id="7cb5f491ca042b503781828280e205f3f1b3e730" translate="yes" xml:space="preserve">
          <source>Link to the URL of the OpenLayers JavaScript. Defaults to &lt;code&gt;'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'&lt;/code&gt;.</source>
          <target state="translated">OpenLayers JavaScript의 URL에 연결하십시오. 기본값은 &lt;code&gt;'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bc86c03eac3b683df07db61068268361cd20abb1" translate="yes" xml:space="preserve">
          <source>Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and &lt;code&gt;urlize&lt;/code&gt; will still do the right thing.</source>
          <target state="translated">링크에는 후행 구두점 (마침표, 쉼표, 근접 &lt;code&gt;urlize&lt;/code&gt; ) 및 선행 구두점 (마침표 오프닝) 이있을 수 있으며 urlize 는 여전히 올바른 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="e401e8956761640d7577a37f57e96c4dd3ae2c45" translate="yes" xml:space="preserve">
          <source>Links generated by &lt;code&gt;urlize&lt;/code&gt; have a &lt;code&gt;rel=&quot;nofollow&quot;&lt;/code&gt; attribute added to them.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; 로 생성 된 링크 에는 &lt;code&gt;rel=&quot;nofollow&quot;&lt;/code&gt; 속성이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="2d28ace15581d25a0bc2e3781306393967a803c6" translate="yes" xml:space="preserve">
          <source>List Views</source>
          <target state="translated">리스트 뷰</target>
        </trans-unit>
        <trans-unit id="81c12cbc34f26f6d72020d3250e5638a719f3b2a" translate="yes" xml:space="preserve">
          <source>List filter&amp;rsquo;s typically appear only if the filter has more than one choice. A filter&amp;rsquo;s &lt;code&gt;has_output()&lt;/code&gt; method controls whether or not it appears.</source>
          <target state="translated">목록 필터는 일반적으로 필터에 둘 이상의 선택 항목이있는 경우에만 나타납니다. 필터의 &lt;code&gt;has_output()&lt;/code&gt; 메소드는 필터의 표시 여부를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="1ff8b40e6d20a6ad55bbd98426ac2eef042a84ff" translate="yes" xml:space="preserve">
          <source>List of all bands of the source, as &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt;&lt;code&gt;GDALBand&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt; &lt;code&gt;GDALBand&lt;/code&gt; &lt;/a&gt; 인스턴스 로서 소스의 모든 밴드 목록 .</target>
        </trans-unit>
        <trans-unit id="1d8ec93e18fcf7be286a5711b8624e9d5492b5aa" translate="yes" xml:space="preserve">
          <source>List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see &lt;a href=&quot;../howto/error-reporting&quot;&gt;Error reporting&lt;/a&gt;). Regular expressions are matched against &lt;a href=&quot;request-response#django.http.HttpRequest.get_full_path&quot;&gt;&lt;code&gt;request's full paths&lt;/code&gt;&lt;/a&gt; (including query string, if any). Use this if your site does not provide a commonly requested file such as &lt;code&gt;favicon.ico&lt;/code&gt; or &lt;code&gt;robots.txt&lt;/code&gt;.</source>
          <target state="translated">이메일을 통해 HTTP 404 오류를보고 할 때 무시해야하는 URL을 설명하는 컴파일 된 정규식 오브젝트 목록입니다 ( &lt;a href=&quot;../howto/error-reporting&quot;&gt;오류보고&lt;/a&gt; 참조 ). 정규식은 &lt;a href=&quot;request-response#django.http.HttpRequest.get_full_path&quot;&gt; &lt;code&gt;request's full paths&lt;/code&gt; &lt;/a&gt; (검색 문자열 (있는 경우) 포함)와 비교됩니다. 사이트에서 &lt;code&gt;favicon.ico&lt;/code&gt; 또는 &lt;code&gt;robots.txt&lt;/code&gt; 와 같이 일반적으로 요청되는 파일을 제공하지 않는 경우이 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="71648c8c3058a09ebc7c06c879fc235d24abcec1" translate="yes" xml:space="preserve">
          <source>List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bots/crawlers. This is only used if &lt;code&gt;CommonMiddleware&lt;/code&gt; is installed (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;).</source>
          <target state="translated">시스템 전체의 페이지를 방문 할 수없는 User-Agent 문자열을 나타내는 컴파일 된 정규식 객체 목록입니다. 봇 / 크롤러에 사용하십시오. &lt;code&gt;CommonMiddleware&lt;/code&gt; 가 설치된 경우에만 사용됩니다 ( &lt;a href=&quot;../topics/http/middleware&quot;&gt;미들웨어&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="4144455cc383697baac646a1657f81571b944123" translate="yes" xml:space="preserve">
          <source>List of database features that the current connection should have so that the model is considered during the migration phase. For example, if you set this list to &lt;code&gt;['gis_enabled']&lt;/code&gt;, the model will only be synchronized on GIS-enabled databases. It&amp;rsquo;s also useful to skip some models when testing with several database backends. Avoid relations between models that may or may not be created as the ORM doesn&amp;rsquo;t handle this.</source>
          <target state="translated">마이그레이션 단계 중에 모델이 고려되도록 현재 연결에 있어야하는 데이터베이스 기능 목록입니다. 예를 &lt;code&gt;['gis_enabled']&lt;/code&gt; 목록을 [ 'gis_enabled'] 로 설정하면 모델은 GIS 가능 데이터베이스에서만 동기화됩니다. 여러 데이터베이스 백엔드로 테스트 할 때 일부 모델을 건너 뛰는 것도 유용합니다. ORM이이를 처리하지 않으므로 작성되거나 작성되지 않을 수있는 모델 간의 관계를 피하십시오.</target>
        </trans-unit>
        <trans-unit id="5a9854912df2ed5719acad92971c25d37b901483" translate="yes" xml:space="preserve">
          <source>List of directories searched for fixture files, in addition to the &lt;code&gt;fixtures&lt;/code&gt; directory of each application, in search order.</source>
          <target state="translated">각 애플리케이션 의 &lt;code&gt;fixtures&lt;/code&gt; 디렉토리 와 함께 조명기 파일을 검색 한 디렉토리 목록을 검색 순서로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ebb3d7aca57a0d0b26fc7bb3082c4d20c9f33257" translate="yes" xml:space="preserve">
          <source>List-index lookup. Example: &lt;code&gt;foo[bar]&lt;/code&gt;</source>
          <target state="translated">리스트 인덱스 조회. 예 : &lt;code&gt;foo[bar]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="005f5ea75301f8060217eadfaf3d96dea8ba5cbd" translate="yes" xml:space="preserve">
          <source>Listening to signals</source>
          <target state="translated">신호 듣기</target>
        </trans-unit>
        <trans-unit id="385b28bd6da9bf2d5510b146c5f31381bab45cc6" translate="yes" xml:space="preserve">
          <source>Lists all available tags.</source>
          <target state="translated">사용 가능한 모든 태그를 나열합니다.</target>
        </trans-unit>
        <trans-unit id="cc017a8f262082983efe363b211f3361bd8ec506" translate="yes" xml:space="preserve">
          <source>Lists all of the apps Django knows about, the migrations available for each app, and whether or not each migration is applied (marked by an &lt;code&gt;[X]&lt;/code&gt; next to the migration name). For a &lt;code&gt;--verbosity&lt;/code&gt; of 2 and above, the applied datetimes are also shown.</source>
          <target state="translated">Django가 알고있는 모든 앱, 각 앱에서 사용할 수있는 마이그레이션 및 각 마이그레이션 적용 여부 ( 마이그레이션 이름 옆에 &lt;code&gt;[X]&lt;/code&gt; 로 표시)를 나열합니다 . A에 대한 &lt;code&gt;--verbosity&lt;/code&gt; 2 위의인가 된 날짜 시간도 나타낸다.</target>
        </trans-unit>
        <trans-unit id="39d23e0d858c2bba4fcae0826399057a4e302793" translate="yes" xml:space="preserve">
          <source>Lists of objects follow roughly the same pattern: we need a (possibly paginated) list of objects, typically a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, and then we need to make a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; with a suitable template using that list of objects.</source>
          <target state="translated">객체 목록은 대략 같은 패턴을 따릅니다. 일반적으로 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 인 객체 목록이 필요하며 해당 객체 목록을 사용하여 적절한 템플릿 으로 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 를 만들어야 합니다.</target>
        </trans-unit>
        <trans-unit id="bba7499a41a5ad998706215911b138ebb07a56d1" translate="yes" xml:space="preserve">
          <source>Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren&amp;rsquo;t able to provide such a listing, this will raise a &lt;code&gt;NotImplementedError&lt;/code&gt; instead.</source>
          <target state="translated">지정된 경로의 내용을 나열하고 2- 튜플 목록을 리턴합니다. 첫 번째 항목은 디렉토리이고 두 번째 항목은 파일입니다. 이러한 목록을 제공 할 수없는 스토리지 시스템의 경우 대신 &lt;code&gt;NotImplementedError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="e2fb109cdc5372d5cde6e1d6d294486607ffa713" translate="yes" xml:space="preserve">
          <source>Little Endian (e.g., compatible with x86 systems)</source>
          <target state="translated">Little Endian (예 : x86 시스템과 호환 가능)</target>
        </trans-unit>
        <trans-unit id="1266aa8b6dce351b2dce9a52e20e361f295ffe02" translate="yes" xml:space="preserve">
          <source>Load settings from &lt;code&gt;global_settings.py&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;global_settings.py&lt;/code&gt; 에서 설정을로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d4fc7ccaa44c3bece06261e229b60b0ab1fe883" translate="yes" xml:space="preserve">
          <source>Load settings from the specified settings file, overriding the global settings as necessary.</source>
          <target state="translated">지정된 설정 파일에서 설정을로드하고 필요에 따라 전역 설정을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="4c676aefee9fb2f37fc993a5bfdd721edc6feb06" translate="yes" xml:space="preserve">
          <source>Load the &amp;ldquo;Add question&amp;rdquo; page to see how that looks:</source>
          <target state="translated">'질문 추가'페이지를로드하여 어떻게 보이는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="c638de2d7ce3a5989cc00da481232df477e68622" translate="yes" xml:space="preserve">
          <source>Load the page by pointing your browser at &amp;ldquo;/polls/&amp;rdquo;, and you should see a bulleted-list containing the &amp;ldquo;What&amp;rsquo;s up&amp;rdquo; question from &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;. The link points to the question&amp;rsquo;s detail page.</source>
          <target state="translated">브라우저를 &quot;/ polls /&quot;로 가리켜 서 페이지를로드하면 &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt; 의 &quot;What 's up&quot;질문이 포함 된 글 머리 기호 목록이 표시 됩니다. 링크는 질문의 세부 사항 페이지를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="bfd5d347be46f19d5af74555db1435a5932c014a" translate="yes" xml:space="preserve">
          <source>Loader methods</source>
          <target state="translated">로더 방법</target>
        </trans-unit>
        <trans-unit id="a1aae8262dfa8b38b15f329fe9d720fa2af5ce60" translate="yes" xml:space="preserve">
          <source>Loader types</source>
          <target state="translated">로더 유형</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="5396847021992af28690eea2559e62fb26911d30" translate="yes" xml:space="preserve">
          <source>Loading a template</source>
          <target state="translated">템플릿 불러 오기</target>
        </trans-unit>
        <trans-unit id="923064241bee3da1b374c1344aae36c3e741a39f" translate="yes" xml:space="preserve">
          <source>Loading fixtures from &lt;code&gt;stdin&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 에서 비품 로딩</target>
        </trans-unit>
        <trans-unit id="04d6db619863f3d513c0c93969b27a39dcbe2838" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;stdin&lt;/code&gt; is useful with standard input and output redirections. For example:</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 에서로드하는 것은 표준 입력 및 출력 리디렉션에 유용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8fb9f7eb8cbdc0a3f102e2624e3f8c578252dcc2" translate="yes" xml:space="preserve">
          <source>Loading templates</source>
          <target state="translated">템플릿로드</target>
        </trans-unit>
        <trans-unit id="aa3b47e04fbcdf7a0c349a1f65b42792f0bfc04b" translate="yes" xml:space="preserve">
          <source>Loading the settings.</source>
          <target state="translated">설정을로드합니다.</target>
        </trans-unit>
        <trans-unit id="b208b1eada8a869e959c32e9a4f048b2261a0ef9" translate="yes" xml:space="preserve">
          <source>Loads a custom template tag set.</source>
          <target state="translated">사용자 정의 템플릿 태그 세트를로드합니다.</target>
        </trans-unit>
        <trans-unit id="61d26d6567c1e53323e6feb2451badc41e00b872" translate="yes" xml:space="preserve">
          <source>Loads a template and renders it with the current context. This is a way of &amp;ldquo;including&amp;rdquo; other templates within a template.</source>
          <target state="translated">템플릿을로드하고 현재 컨텍스트와 함께 렌더링합니다. 이것은 템플릿 내에 다른 템플릿을 &quot;포함&quot;하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="49622805f34b2cbfb5fecab2184d2c2565f31b9e" translate="yes" xml:space="preserve">
          <source>Loads a template with the given name, compiles it and returns a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">지정된 이름의 템플릿을로드하고 컴파일 한 후 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="1d87684e495f6d2a5443bdeacec9acb9e892cab6" translate="yes" xml:space="preserve">
          <source>Loads templates from Django apps on the filesystem. For each app in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the loader looks for a &lt;code&gt;templates&lt;/code&gt; subdirectory. If the directory exists, Django looks for templates in there.</source>
          <target state="translated">파일 시스템의 Django 앱에서 템플릿을로드합니다. &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 각 앱에 대해 로더는 &lt;code&gt;templates&lt;/code&gt; 하위 디렉토리를 찾습니다 . 디렉토리가 존재하면 Django는 거기에서 템플릿을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="9c77b46a82221a37ce360a54ab22eae4cb8567d7" translate="yes" xml:space="preserve">
          <source>Loads templates from a Python dictionary. This is useful for testing.</source>
          <target state="translated">파이썬 사전에서 템플릿을로드합니다. 이것은 테스트에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5ddb5a6aa66f708e939717a50c081f9b1687855e" translate="yes" xml:space="preserve">
          <source>Loads templates from a given source, such as the filesystem or a database.</source>
          <target state="translated">파일 시스템 또는 데이터베이스와 같은 지정된 소스에서 템플릿을로드합니다.</target>
        </trans-unit>
        <trans-unit id="830f927cc5a7a2d6808cd9d4fd807494ffe8af90" translate="yes" xml:space="preserve">
          <source>Loads templates from the filesystem, according to &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 에 따라 파일 시스템에서 템플릿을로드 합니다 .</target>
        </trans-unit>
        <trans-unit id="e63c9f12a633eb8c9f0b4ac3283d021d46f12d08" translate="yes" xml:space="preserve">
          <source>Local-memory caching</source>
          <target state="translated">로컬 메모리 캐싱</target>
        </trans-unit>
        <trans-unit id="46361934de5303c4bb40033efcb4f3ac07fa41a4" translate="yes" xml:space="preserve">
          <source>Locale aware input in forms</source>
          <target state="translated">양식의 로케일 인식 입력</target>
        </trans-unit>
        <trans-unit id="bba391c6c02e5d2f28c6ce4333f7c807d2ee62f0" translate="yes" xml:space="preserve">
          <source>Locale middleware</source>
          <target state="translated">로케일 미들웨어</target>
        </trans-unit>
        <trans-unit id="a17bcca1e911b8aa363c850569b580baafa07f8e" translate="yes" xml:space="preserve">
          <source>Localflavor</source>
          <target state="translated">Localflavor</target>
        </trans-unit>
        <trans-unit id="8760fb7a725faf05acb20618178c43773af945a1" translate="yes" xml:space="preserve">
          <source>Localization: how to create language files</source>
          <target state="translated">현지화 : 언어 파일을 만드는 방법</target>
        </trans-unit>
        <trans-unit id="68d96c3fa930173a29f42dabd119f2ec989ef3cb" translate="yes" xml:space="preserve">
          <source>Localized names of languages</source>
          <target state="translated">현지화 된 언어 이름</target>
        </trans-unit>
        <trans-unit id="5bab46afe953180e60cc6486cb0020ee91d03396" translate="yes" xml:space="preserve">
          <source>Lock parents models in &lt;code&gt;select_for_update(of=(...))&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select_for_update(of=(...))&lt;/code&gt; 에서 부모 모델 잠금</target>
        </trans-unit>
        <trans-unit id="420dfa7139dd6d5b31fdef28a0943aa84fccd6c5" translate="yes" xml:space="preserve">
          <source>Log messages related to the handling of requests received by the server invoked by the &lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command. HTTP 5XX responses are logged as &lt;code&gt;ERROR&lt;/code&gt; messages, 4XX responses are logged as &lt;code&gt;WARNING&lt;/code&gt; messages, and everything else is logged as &lt;code&gt;INFO&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 명령으로 호출 된 서버가 수신 한 요청 처리와 관련된 메시지를 기록하십시오 . HTTP 5XX 응답은 &lt;code&gt;ERROR&lt;/code&gt; 메시지로, 4XX 응답은 &lt;code&gt;WARNING&lt;/code&gt; 메시지로, 기타 모든 것은 &lt;code&gt;INFO&lt;/code&gt; 로 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="0c50346183ec708677d8278192a3de3bbcc2cc20" translate="yes" xml:space="preserve">
          <source>Log messages related to the handling of requests. 5XX responses are raised as &lt;code&gt;ERROR&lt;/code&gt; messages; 4XX responses are raised as &lt;code&gt;WARNING&lt;/code&gt; messages. Requests that are logged to the &lt;code&gt;django.security&lt;/code&gt; logger aren&amp;rsquo;t logged to &lt;code&gt;django.request&lt;/code&gt;.</source>
          <target state="translated">요청 처리와 관련된 메시지를 기록합니다. 5XX 응답은 &lt;code&gt;ERROR&lt;/code&gt; 메시지 로 발생 합니다. 4XX 응답은 &lt;code&gt;WARNING&lt;/code&gt; 메시지로 나타납니다. 받는 사람 로그인 요청 &lt;code&gt;django.security&lt;/code&gt; 의 로거에 기록되지 않습니다 &lt;code&gt;django.request&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb8b376a6ea0f93bedb4b80549e00d705797b62b" translate="yes" xml:space="preserve">
          <source>Log messages related to the rendering of templates.</source>
          <target state="translated">템플릿 렌더링과 관련된 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="012294fbc07fc652fdbbd3b8b48183b6e7925dda" translate="yes" xml:space="preserve">
          <source>Loggers</source>
          <target state="translated">Loggers</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="b6197073d1ec39358a4e3d845faf24f41158555a" translate="yes" xml:space="preserve">
          <source>Logging is configured as part of the general Django &lt;code&gt;setup()&lt;/code&gt; function. Therefore, you can be certain that loggers are always ready for use in your project code.</source>
          <target state="translated">로깅은 일반적인 Django &lt;code&gt;setup()&lt;/code&gt; 함수의 일부로 구성됩니다 . 따라서 로거가 항상 프로젝트 코드에서 사용할 준비가되어 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ea927f6b85c95ca60f956a27e51826d1f034e33" translate="yes" xml:space="preserve">
          <source>Logging of each request and response of the server is sent to the &lt;a href=&quot;../topics/logging#django-server-logger&quot;&gt;django.server&lt;/a&gt; logger.</source>
          <target state="translated">서버의 각 요청 및 응답 로깅은 &lt;a href=&quot;../topics/logging#django-server-logger&quot;&gt;django.server&lt;/a&gt; 로거로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="4e5a2893bdcc7d239c1db72e4c4ffbe4bea73174" translate="yes" xml:space="preserve">
          <source>Login</source>
          <target state="translated">Login</target>
        </trans-unit>
        <trans-unit id="97896e639ea44756e547cd457bf906c408b31625" translate="yes" xml:space="preserve">
          <source>Login and logout signals</source>
          <target state="translated">로그인 및 로그 아웃 신호</target>
        </trans-unit>
        <trans-unit id="e43d612e11f1568f2373e719d4c4b08dcecdc7cc" translate="yes" xml:space="preserve">
          <source>Logout</source>
          <target state="translated">Logout</target>
        </trans-unit>
        <trans-unit id="0f9949aa8cddbb021036b013be13fcd58f02e95c" translate="yes" xml:space="preserve">
          <source>Logs a user out, then redirects to the login page.</source>
          <target state="translated">사용자를 로그 아웃 한 다음 로그인 페이지로 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="66a401f8c8dd428897c6bb4440e0e65596927d52" translate="yes" xml:space="preserve">
          <source>Logs a user out.</source>
          <target state="translated">사용자를 로그 아웃합니다.</target>
        </trans-unit>
        <trans-unit id="87c06f7c9c0dd6c7d57a0b80377942859f9c413d" translate="yes" xml:space="preserve">
          <source>Logs the SQL queries that are executed during schema changes to the database by the &lt;a href=&quot;migrations&quot;&gt;migrations framework&lt;/a&gt;. Note that it won&amp;rsquo;t log the queries executed by &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt;. Messages to this logger have &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;sql&lt;/code&gt; in their extra context (but unlike &lt;code&gt;django.db.backends&lt;/code&gt;, not duration). The values have the same meaning as explained in &lt;a href=&quot;#django-db-logger&quot;&gt;django.db.backends&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;migrations&quot;&gt;마이그레이션 프레임 워크&lt;/a&gt; 가 데이터베이스를 스키마로 변경하는 동안 실행되는 SQL 쿼리를 기록합니다 . &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; 에&lt;/a&gt; 의해 실행 된 쿼리는 기록하지 않습니다 . 이 로거에 대한 메시지에는 추가 컨텍스트에서 &lt;code&gt;params&lt;/code&gt; 및 &lt;code&gt;sql&lt;/code&gt; 이 있습니다 (그러나 &lt;code&gt;django.db.backends&lt;/code&gt; 와 달리 지속 시간이 아님). 값은 &lt;a href=&quot;#django-db-logger&quot;&gt;django.db.backends&lt;/a&gt; 에서 설명한 것과 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="cf24eeb1b831855c84e20ffbab85ed0e2e98d15d" translate="yes" xml:space="preserve">
          <source>Long messages are a special case. There, the first string directly after the &lt;code&gt;msgstr&lt;/code&gt; (or &lt;code&gt;msgid&lt;/code&gt;) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don&amp;rsquo;t forget trailing spaces within the strings; otherwise, they&amp;rsquo;ll be tacked together without whitespace!</source>
          <target state="translated">긴 메시지는 특별한 경우입니다. 거기에서 &lt;code&gt;msgstr&lt;/code&gt; 바로 다음의 첫 번째 문자열 (또는 &lt;code&gt;msgid&lt;/code&gt; )은 빈 문자열입니다. 그런 다음 내용 자체는 다음 몇 줄에 줄 당 하나의 문자열로 작성됩니다. 이러한 문자열은 직접 연결됩니다. 문자열 내에서 후행 공백을 잊지 마십시오. 그렇지 않으면 공백없이 함께 고정됩니다!</target>
        </trans-unit>
        <trans-unit id="03896792266b6c37fcddf34ea02218f44b413da5" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/deprecation/&quot;&gt;deprecation timeline&lt;/a&gt; for the relevant versions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/deprecation/&quot;&gt;지원 중단 일정&lt;/a&gt; 을 살펴보고 관련 버전을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="5af33b9589e0e69caaf074435cb5759b4f613642" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/deprecation/&quot;&gt;deprecation timeline&lt;/a&gt; for the relevant versions.</source>
          <target state="translated">상기 봐 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/deprecation/&quot;&gt;중단 타임 라인&lt;/a&gt; 관련 버전.</target>
        </trans-unit>
        <trans-unit id="18573a3026539551f5ffe80fbc3fab6545f17122" translate="yes" xml:space="preserve">
          <source>Look at the existing Django fields (in &lt;code&gt;django/db/models/fields/__init__.py&lt;/code&gt;) for inspiration. Try to find a field that&amp;rsquo;s similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch.</source>
          <target state="translated">영감을주는 기존 Django 필드 ( &lt;code&gt;django/db/models/fields/__init__.py&lt;/code&gt; )를보십시오. 처음부터 완전히 새로운 필드를 만드는 대신 원하는 것과 비슷한 필드를 찾아 조금 확장하십시오.</target>
        </trans-unit>
        <trans-unit id="83e1377578dd2108d8423c7213ffe8bd30534cc0" translate="yes" xml:space="preserve">
          <source>Looking for specific information? Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/genindex/&quot;&gt;Index&lt;/a&gt;, &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/py-modindex/&quot;&gt;Module Index&lt;/a&gt; or the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/contents/&quot;&gt;detailed table of contents&lt;/a&gt;.</source>
          <target state="translated">특정 정보를 찾고 계십니까? &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/genindex/&quot;&gt;색인&lt;/a&gt; , &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/py-modindex/&quot;&gt;모듈 색인&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/contents/&quot;&gt;자세한 &lt;/a&gt;목차를 사용해보십시오 .</target>
        </trans-unit>
        <trans-unit id="4f996a5b4afddf8e02528b8b854ebf578315565a" translate="yes" xml:space="preserve">
          <source>Looking for specific information? Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/genindex/&quot;&gt;Index&lt;/a&gt;, &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/py-modindex/&quot;&gt;Module Index&lt;/a&gt; or the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/contents/&quot;&gt;detailed table of contents&lt;/a&gt;.</source>
          <target state="translated">구체적인 정보를 찾고 계십니까? 시도 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/genindex/&quot;&gt;지수&lt;/a&gt; , &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/py-modindex/&quot;&gt;모듈 색인&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/contents/&quot;&gt;내용의 상세 테이블을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a570127f6a268f5a693b78694a0e6f069ee259be" translate="yes" xml:space="preserve">
          <source>Looking for tests in any file below the current directory whose name matches the pattern &lt;code&gt;test*.py&lt;/code&gt;.</source>
          <target state="translated">이름이 &lt;code&gt;test*.py&lt;/code&gt; 패턴과 일치하는 현재 디렉토리 아래의 모든 파일에서 테스트를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="7015ab4fc4ea24735dbe884238cc1b54bf915eca" translate="yes" xml:space="preserve">
          <source>Lookup</source>
          <target state="translated">Lookup</target>
        </trans-unit>
        <trans-unit id="4f97f5f4ebefacc529850a4ccae9c3992e1498e3" translate="yes" xml:space="preserve">
          <source>Lookup API reference</source>
          <target state="translated">조회 API 참조</target>
        </trans-unit>
        <trans-unit id="0830ad654338d012cacdd174149c78b55003fa0c" translate="yes" xml:space="preserve">
          <source>Lookup Type</source>
          <target state="translated">조회 유형</target>
        </trans-unit>
        <trans-unit id="b1e95b80675fe4de22a35ddb29898c8e5ee137e9" translate="yes" xml:space="preserve">
          <source>Lookup a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; by ID. Since this method uses the same shared cache as &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s preferred to use this method over the usual &lt;code&gt;ContentType.objects.get(pk=id)&lt;/code&gt;</source>
          <target state="translated">ID 로 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 을 조회 하십시오. 이 메소드는 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;get_for_model()&lt;/code&gt; &lt;/a&gt; 과 동일한 공유 캐시 를 사용하므로 일반적인 &lt;code&gt;ContentType.objects.get(pk=id)&lt;/code&gt; 보다이 메소드를 사용하는 것이 좋습니다</target>
        </trans-unit>
        <trans-unit id="4af7afda67ab90eca349b13f266deab4ec35aa10" translate="yes" xml:space="preserve">
          <source>Lookup functions can mix the use of &lt;code&gt;Q&lt;/code&gt; objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or &lt;code&gt;Q&lt;/code&gt; objects) are &amp;ldquo;AND&amp;rdquo;ed together. However, if a &lt;code&gt;Q&lt;/code&gt; object is provided, it must precede the definition of any keyword arguments. For example:</source>
          <target state="translated">조회 함수는 &lt;code&gt;Q&lt;/code&gt; 객체와 키워드 인수를 혼합하여 사용할 수 있습니다 . 조회 함수에 제공된 모든 인수 (키워드 인수 또는 &lt;code&gt;Q&lt;/code&gt; 객체)는 &quot;AND&quot;로 함께 표시됩니다. 그러나 &lt;code&gt;Q&lt;/code&gt; 오브젝트가 제공되면 키워드 인수의 정의보다 우선해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6dbdad9ff3b7e8efdd58c11f1971a5b0ed14de47" translate="yes" xml:space="preserve">
          <source>Lookup parameters, which should be in the format accepted by &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;.</source>
          <target state="translated">조회 매개 변수. &lt;code&gt;get()&lt;/code&gt; 및 &lt;code&gt;filter()&lt;/code&gt; 허용되는 형식이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ca99d305ed0945b8d9e457a1542829a19f19f1ac" translate="yes" xml:space="preserve">
          <source>Lookup registration can also be done using a decorator pattern:</source>
          <target state="translated">데코레이터 패턴을 사용하여 조회 등록을 수행 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c22627487f1bdeac0afcbce546d80cd4f51d447" translate="yes" xml:space="preserve">
          <source>Lookups created with custom &lt;code&gt;to_attr&lt;/code&gt; can still be traversed as usual by other lookups:</source>
          <target state="translated">사용자 정의 &lt;code&gt;to_attr&lt;/code&gt; 로 작성된 조회 는 다른 조회에서 평소와 같이 계속 순회 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4795e11216648d84c91f69381932d7a8fe148e20" translate="yes" xml:space="preserve">
          <source>Lookups implementation is different in &lt;a href=&quot;../../ref/models/fields#django.db.models.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt;, mainly due to the existence of key transformations. To demonstrate, we will use the following example model:</source>
          <target state="translated">주로 키 변환의 존재로 인해 &lt;a href=&quot;../../ref/models/fields#django.db.models.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; &lt;/a&gt; 에서 조회 구현이 다릅니다 . 시연하기 위해 다음 예제 모델을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bbbc446cd89bbc9f91a61c8d1b7883a4754c0d07" translate="yes" xml:space="preserve">
          <source>Lookups on PostgreSQL</source>
          <target state="translated">PostgreSQL에서 조회</target>
        </trans-unit>
        <trans-unit id="3a6deca122475cb7b177894a1abc642b3c450ad4" translate="yes" xml:space="preserve">
          <source>Lookups that span relationships</source>
          <target state="translated">관계에 걸친 조회</target>
        </trans-unit>
        <trans-unit id="17694782d38160dbec7f61575168852ee61ca592" translate="yes" xml:space="preserve">
          <source>Lookups with rasters</source>
          <target state="translated">래스터가있는 조회</target>
        </trans-unit>
        <trans-unit id="2d971984dd21acc2315cc2384dc6c3cc1e2750fe" translate="yes" xml:space="preserve">
          <source>Loop over each item in an array. For example, to display a list of athletes provided in &lt;code&gt;athlete_list&lt;/code&gt;:</source>
          <target state="translated">배열의 각 항목을 반복합니다. 예를 들어 &lt;code&gt;athlete_list&lt;/code&gt; 에 제공된 운동 선수 목록을 표시 하려면 다음 을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="4985599a33aedbf517ed7d854dc30df88bcd0eb8" translate="yes" xml:space="preserve">
          <source>Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986#section-3.2.2&lt;/strong&gt;&lt;/a&gt;) and Unicode domains are both supported.</source>
          <target state="translated">루프백 주소 및 예약 된 IP 공간은 유효한 것으로 간주됩니다. 리터럴 IPv6 주소 ( &lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986 # section-3.2.2&lt;/strong&gt;&lt;/a&gt; ) 및 유니 코드 도메인이 모두 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="45543809fe6d79257df2fcb2ced01e5639318229" translate="yes" xml:space="preserve">
          <source>Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986#section-3.2.2&lt;/strong&gt;&lt;/a&gt;) and unicode domains are both supported.</source>
          <target state="translated">루프백 주소 및 예약 된 IP 공간은 유효한 것으로 간주됩니다. 리터럴 IPv6 주소 ( &lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986 # section-3.2.2&lt;/strong&gt;&lt;/a&gt; ) 및 유니 코드 도메인이 모두 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="d2e6ddef874e97d78c2e355736d665c5eb63bdd9" translate="yes" xml:space="preserve">
          <source>Looping over &lt;code&gt;UploadedFile.chunks()&lt;/code&gt; instead of using &lt;code&gt;read()&lt;/code&gt; ensures that large files don&amp;rsquo;t overwhelm your system&amp;rsquo;s memory.</source>
          <target state="translated">&lt;code&gt;read()&lt;/code&gt; &lt;code&gt;UploadedFile.chunks()&lt;/code&gt; 대신 UploadedFile.chunks () 를 반복 하면 큰 파일이 시스템 메모리를 압도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b87879ecc3324ca1b5b68b1f628f788675da7274" translate="yes" xml:space="preserve">
          <source>Looping over hidden and visible fields</source>
          <target state="translated">숨겨져 보이는 필드에 반복</target>
        </trans-unit>
        <trans-unit id="85f78f8afb120cb4e8208c1f6510826e775fef6c" translate="yes" xml:space="preserve">
          <source>Looping over the form&amp;rsquo;s fields</source>
          <target state="translated">양식 필드 반복</target>
        </trans-unit>
        <trans-unit id="92dfee36a072d60f39ed8b943312cd16aba50fa1" translate="yes" xml:space="preserve">
          <source>Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in &lt;code&gt;athlete_list&lt;/code&gt;:</source>
          <target state="translated">배열의 각 항목을 반복하여 컨텍스트 변수에서 항목을 사용할 수 있도록합니다. 예를 들어 &lt;code&gt;athlete_list&lt;/code&gt; 에 제공된 운동 선수 목록을 표시 하려면 다음 을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="52be3d0c545bc3018bcc23a2c3ea2eb6d6395ec3" translate="yes" xml:space="preserve">
          <source>Loosely-coupled to GeoDjango. For example, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be used outside of a Django project/application. In other words, no need to have &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; set or use a database, etc.</source>
          <target state="translated">GeoDjango에 느슨하게 결합됩니다. 예를 들어, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체는 Django 프로젝트 / 애플리케이션 외부에서 사용될 수 있습니다. 즉, &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을&lt;/a&gt; 설정하거나 데이터베이스 등을 사용할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="2f5ba0d2ee5986d496178175529d1a820e6c2011" translate="yes" xml:space="preserve">
          <source>Loosely-coupled to GeoDjango. For example, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be used outside of a Django project/application. In other words, no need to have &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; set or use a database, etc.</source>
          <target state="translated">GeoDjango에 느슨하게 결합되었습니다. 예를 들어, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체는 Django 프로젝트 / 응용 프로그램 외부에서 사용될 수 있습니다. 즉, &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을 설정하거나 데이터베이스 등을 사용할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="18995b9d14f4d8a9703ab1e599060a15073564b7" translate="yes" xml:space="preserve">
          <source>Loosely-coupled, high-level Python interfaces for GIS geometry and raster operations and data manipulation in different formats.</source>
          <target state="translated">GIS 지오메트리 및 래스터 작업 및 다양한 형식의 데이터 조작을위한 느슨하게 결합 된 고급 Python 인터페이스.</target>
        </trans-unit>
        <trans-unit id="d14c62a5e247e1d3a0c3e590257851d326591f90" translate="yes" xml:space="preserve">
          <source>Low bandwidth connection?</source>
          <target state="translated">저 대역폭 연결?</target>
        </trans-unit>
        <trans-unit id="b38b638f8a783319921b9ded343024596436ca9a" translate="yes" xml:space="preserve">
          <source>Low-level APIs</source>
          <target state="translated">저수준 API</target>
        </trans-unit>
        <trans-unit id="bb82d98842b53ea8e4fc0ba928b83950cba983a9" translate="yes" xml:space="preserve">
          <source>MEDIA_ROOT, DEFAULT_FILE_STORAGE</source>
          <target state="translated">MEDIA_ROOT, DEFAULT_FILE_STORAGE</target>
        </trans-unit>
        <trans-unit id="07a4d61f0acbbb95318a8a2d2e1f3a3b76934273" translate="yes" xml:space="preserve">
          <source>MacPorts</source>
          <target state="translated">MacPorts</target>
        </trans-unit>
        <trans-unit id="a0d3cf49aa9c486cc3245a67064ef6a90e88d567" translate="yes" xml:space="preserve">
          <source>Mail is sent using the SMTP host and port specified in the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt;&lt;code&gt;EMAIL_PORT&lt;/code&gt;&lt;/a&gt; settings. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt;&lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt;&lt;/a&gt; settings, if set, are used to authenticate to the SMTP server, and the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; settings control whether a secure connection is used.</source>
          <target state="translated">메일은 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt; &lt;code&gt;EMAIL_PORT&lt;/code&gt; &lt;/a&gt; 설정에 지정된 SMTP 호스트 및 포트를 사용하여 전송됩니다 . &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt; &lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt; &lt;/a&gt; 설정은 설정하면 SMTP 서버에 인증하는 데 사용되며, &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt; 설정 제어는 보안 연결 사용 여부.</target>
        </trans-unit>
        <trans-unit id="2045c2b3b3410d03382b7449be956846f013a676" translate="yes" xml:space="preserve">
          <source>Mails the email addresses specified in &lt;a href=&quot;settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../topics/email#django.core.mail.mail_admins&quot;&gt;&lt;code&gt;mail_admins()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/email#django.core.mail.mail_admins&quot;&gt; &lt;code&gt;mail_admins()&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;a href=&quot;settings#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; 에&lt;/a&gt; 지정된 이메일 주소를 메일로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="09447360b87529c4e200002f47e5957ff5712079" translate="yes" xml:space="preserve">
          <source>Mails the email addresses specified in &lt;a href=&quot;settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../topics/email#django.core.mail.mail_managers&quot;&gt;&lt;code&gt;mail_managers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/email#django.core.mail.mail_managers&quot;&gt; &lt;code&gt;mail_managers()&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;a href=&quot;settings#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; 에&lt;/a&gt; 지정된 이메일 주소를 메일로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="7b99cc729613bb252546c2ed4313e808dbf5dd8a" translate="yes" xml:space="preserve">
          <source>Make sure ALL of the following are true before setting this (assuming the values from the example above):</source>
          <target state="translated">이것을 설정하기 전에 다음의 모든 사항이 참인지 확인하십시오 (위 예의 값을 가정).</target>
        </trans-unit>
        <trans-unit id="aa35ed7a8f70d5ae8a72a8185bfd890e5ab93011" translate="yes" xml:space="preserve">
          <source>Make sure it&amp;rsquo;s one of the first middleware installed.</source>
          <target state="translated">처음 설치 한 미들웨어 중 하나인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="45c040a2736ded67e62f5c53ffa1a4ec220de726" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is included in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 가 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 포함되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9525d86fc1dd6d513066076e98a6c857591c199" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;mod_auth_basic&lt;/code&gt; and &lt;code&gt;mod_authz_user&lt;/code&gt; are loaded.</source>
          <target state="translated">&lt;code&gt;mod_auth_basic&lt;/code&gt; 및 &lt;code&gt;mod_authz_user&lt;/code&gt; 가로드 되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="69445a55691d7850da50947c34014b2fc4c3ae5d" translate="yes" xml:space="preserve">
          <source>Make sure that mod_wsgi is installed and activated and that you have followed the steps to setup &lt;a href=&quot;modwsgi&quot;&gt;Apache with mod_wsgi&lt;/a&gt;.</source>
          <target state="translated">mod_wsgi가 설치 및 활성화되어 있고 mod_wsgi로 &lt;a href=&quot;modwsgi&quot;&gt;Apache&lt;/a&gt; 를 설정하는 단계를 수행했는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="da2abf2d686008baca2b498aeae79af0c709468a" translate="yes" xml:space="preserve">
          <source>Make sure that the Python interpreter can load Django&amp;rsquo;s code. The most convenient way to do this is to use &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;, and &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtualenv.</source>
          <target state="translated">파이썬 인터프리터가 장고의 코드를로드 할 수 있는지 확인하십시오. 가장 편리한 방법은 &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; , &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt; 및 &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip를 사용하는 것&lt;/a&gt; 입니다. &lt;a href=&quot;../intro/contributing&quot;&gt;기여 튜토리얼&lt;/a&gt; VIRTUALENV를 만드는 방법을 통해 안내합니다.</target>
        </trans-unit>
        <trans-unit id="2552998128fb2470acabb019c65ec215909bcedc" translate="yes" xml:space="preserve">
          <source>Make sure that the Python interpreter can load Django&amp;rsquo;s code. The most convenient way to do this is to use a virtual environment and &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtual environment.</source>
          <target state="translated">Python 인터프리터가 Django의 코드를로드 할 수 있는지 확인하십시오. 이를 수행하는 가장 편리한 방법은 가상 환경과 &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; 를 사용하는 것 입니다. &lt;a href=&quot;../intro/contributing&quot;&gt;기여 튜토리얼은&lt;/a&gt; 가상 환경을 만드는 방법을 통해 안내합니다.</target>
        </trans-unit>
        <trans-unit id="c90fe8d9c88a24bdf2ff7e779cd0a6887772c684" translate="yes" xml:space="preserve">
          <source>Make sure that the key used in production isn&amp;rsquo;t used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key.</source>
          <target state="translated">프로덕션에 사용 된 키가 다른 곳에서는 사용되지 않도록하고 소스 제어에 커밋하지 마십시오. 이를 통해 공격자가 키를 획득 할 수있는 벡터 수를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="c1065df190cc28bea4577001c230e0ec7e0f5f5c" translate="yes" xml:space="preserve">
          <source>Make sure that you don&amp;rsquo;t include the above URL within &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt; - it needs to be language-independent itself to work correctly.</source>
          <target state="translated">&lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt; 내에 위의 URL을 포함하지 않아야 합니다. 올바르게 작동하려면 언어 독립적이어야합니다.</target>
        </trans-unit>
        <trans-unit id="4d82bc59e1c3d86100d01ee3c8c4d4ac4373a55c" translate="yes" xml:space="preserve">
          <source>Make sure that you have &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; installed and that you can run its commands from a shell. (Enter &lt;code&gt;git help&lt;/code&gt; at a shell prompt to test this.)</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git이&lt;/a&gt; 설치되어 있고 쉘에서 명령을 실행할 수 있는지 확인하십시오 . ( 쉘 프롬프트에서 &lt;code&gt;git help&lt;/code&gt; 를 입력 하여 이것을 테스트하십시오.)</target>
        </trans-unit>
        <trans-unit id="4febd23799488138305eb5481ce515953522d418" translate="yes" xml:space="preserve">
          <source>Make sure that your Python code is outside of the Web server&amp;rsquo;s root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed).</source>
          <target state="translated">Python 코드가 웹 서버 루트 외부에 있는지 확인하십시오. 이렇게하면 파이썬 코드가 실수로 일반 텍스트로 제공되거나 실수로 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b4d25e9adadc4f10721db1c559ebdebfced81239" translate="yes" xml:space="preserve">
          <source>Make sure the directory pointed-to by this setting either exists and is readable and writable, or that it can be created by the system user under which your Web server runs. Continuing the above example, if your server runs as the user &lt;code&gt;apache&lt;/code&gt;, make sure the directory &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; exists and is readable and writable by the user &lt;code&gt;apache&lt;/code&gt;, or that it can be created by the user &lt;code&gt;apache&lt;/code&gt;.</source>
          <target state="translated">이 설정이 가리키는 디렉토리가 존재하고 읽기 및 쓰기 가능한지 또는 웹 서버가 실행되는 시스템 사용자가 작성할 수 있는지 확인하십시오. 사용자가 같은 서버가 실행되는 경우, 위의 예를 계속 &lt;code&gt;apache&lt;/code&gt; 있는지 확인 디렉토리 &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; 존재하고 사용자가 읽고 쓸 수 있습니다 &lt;code&gt;apache&lt;/code&gt; , 또는이 사용자에 의해 생성 될 수있는 &lt;code&gt;apache&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5852dd567ba21a0751232f400af285522c51e4b8" translate="yes" xml:space="preserve">
          <source>Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user &lt;code&gt;apache&lt;/code&gt;, make sure the directory &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; exists and is readable and writable by the user &lt;code&gt;apache&lt;/code&gt;.</source>
          <target state="translated">이 설정이 가리키는 디렉토리가 존재하고 웹 서버가 실행되는 시스템 사용자가 읽고 쓸 수 있는지 확인하십시오. 위의 예제를 계속하여 서버가 사용자 &lt;code&gt;apache&lt;/code&gt; 로 실행되는 경우 &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; 디렉토리 가 존재하고 사용자 &lt;code&gt;apache&lt;/code&gt; 가 읽고 쓸 수 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6792ed36d70833105e98f7e1536ea01606bbfe30" translate="yes" xml:space="preserve">
          <source>Make sure you list all extensions you&amp;rsquo;re using! Otherwise Babel won&amp;rsquo;t recognize the tags defined by these extensions and will ignore Jinja2 templates containing them entirely.</source>
          <target state="translated">사용중인 모든 확장명을 나열하십시오! 그렇지 않으면 Babel은 이러한 확장으로 정의 된 태그를 인식하지 않으며 해당 확장을 포함하는 Jinja2 템플릿을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="8619a1d17175246cf38854aa8293b829b7d1f23b" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve activated translation for your project (the fastest way is to check if &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt;&lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt;&lt;/a&gt;). If you haven&amp;rsquo;t yet, see &lt;a href=&quot;#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;.</source>
          <target state="translated">프로젝트의 번역을 활성화했는지 확인하십시오 (가장 빠른 방법은 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 에&lt;/a&gt;&lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt; &lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt; 가&lt;/a&gt; 포함되어 있는지 확인하는 것입니다 ). 아직 &lt;a href=&quot;#how-django-discovers-language-preference&quot;&gt;Django가 언어 기본 설정을 검색하는 방법을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1c3a7262191d27cdf5c32da423a57d2c31d3d081" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve installed the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites framework&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;sites framework&lt;/code&gt; &lt;/a&gt; 설치했는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="a9ee1e2048edd25b686838bf844c45d24bc1ae95" translate="yes" xml:space="preserve">
          <source>Make sure your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting contains a &lt;code&gt;DjangoTemplates&lt;/code&gt; backend whose &lt;code&gt;APP_DIRS&lt;/code&gt; options is set to &lt;code&gt;True&lt;/code&gt;. It&amp;rsquo;s in there by default, so you&amp;rsquo;ll only need to change this if you&amp;rsquo;ve changed that setting.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정에 &lt;code&gt;APP_DIRS&lt;/code&gt; 옵션이 &lt;code&gt;True&lt;/code&gt; 로 설정된 &lt;code&gt;DjangoTemplates&lt;/code&gt; 백엔드가 포함되어 있는지 확인하십시오 . 기본적으로 설정되어 있으므로 해당 설정을 변경 한 경우에만 변경하면됩니다.</target>
        </trans-unit>
        <trans-unit id="ab1c905ed852730023a7a6e5ec3853b4aa30f7c5" translate="yes" xml:space="preserve">
          <source>Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding &amp;ndash; for example, latin1 (iso8859-1) &amp;ndash; you won&amp;rsquo;t be able to store certain characters in the database, and information will be lost.</source>
          <target state="translated">데이터베이스가 임의의 문자열 데이터를 저장할 수 있도록 구성되어 있는지 확인하십시오. 일반적으로 이는 UTF-8 또는 UTF-16의 인코딩을 제공함을 의미합니다. 더 제한적인 인코딩 (예 : latin1 (iso8859-1))을 사용하면 데이터베이스에 특정 문자를 저장할 수 없으며 정보가 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="e6d84fe7fe5ec77cf066388c9481b92a6747b344" translate="yes" xml:space="preserve">
          <source>Make the poll app modifiable in the admin</source>
          <target state="translated">관리자에서 설문 조사 앱을 수정 가능하게 만들기</target>
        </trans-unit>
        <trans-unit id="3288017f14c5479aa28d05689ff3c090be1108e6" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;makemigrations&lt;/code&gt; exit with a non-zero status when model changes without migrations are detected.</source>
          <target state="translated">차종 &lt;code&gt;makemigrations&lt;/code&gt; 영이 아닌 상태로 종료는 마이그레이션없이 모델 변경이 감지 될 때.</target>
        </trans-unit>
        <trans-unit id="e45f4eb2e4ecd287729a2a82141e7631ec4c8e61" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;migrate&lt;/code&gt; exit with a non-zero status when unapplied migrations are detected.</source>
          <target state="translated">하게 &lt;code&gt;migrate&lt;/code&gt; 적용되지 않은 마이그레이션이 감지 될 때 영이 아닌 상태로 종료합니다.</target>
        </trans-unit>
        <trans-unit id="cd46c57dda19a380dba63b951c50c57d7edd94b1" translate="yes" xml:space="preserve">
          <source>Makes a DELETE request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 DELETE 요청을 만들고 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다. RESTful 인터페이스를 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="67b8fdec97a0a90000785f857f6d99d954dfbaaa" translate="yes" xml:space="preserve">
          <source>Makes a GET request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object, which is documented below.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 GET 요청을 작성하고 아래에 설명 된 &lt;code&gt;Response&lt;/code&gt; 오브젝트를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="3ab36adc110fb58469cbb078f97a12c9d401e7de" translate="yes" xml:space="preserve">
          <source>Makes a HEAD request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. This method works just like &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;, including the &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; arguments, except it does not return a message body.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 HEAD 요청을 만들고 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다. 이 메소드 는 메시지 본문을 리턴하지 않는 것을 제외하고 는 &lt;code&gt;follow&lt;/code&gt; , &lt;code&gt;secure&lt;/code&gt; 및 &lt;code&gt;extra&lt;/code&gt; 인수를 포함하여 &lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;Client.get()&lt;/code&gt; &lt;/a&gt; 과 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="622e768ac61b71b81b98d9e29b486595200ed157" translate="yes" xml:space="preserve">
          <source>Makes a PATCH request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 PATCH 요청을 만들고 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다. RESTful 인터페이스를 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fd9170b880c457475e4acad7c3125b513d409d1e" translate="yes" xml:space="preserve">
          <source>Makes a POST request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object, which is documented below.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 POST 요청을 만들고 아래에 설명 된 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="8a618a092d900f3345d37da0ff87b3e10c65839d" translate="yes" xml:space="preserve">
          <source>Makes a PUT request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 PUT 요청을 만들고 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다. RESTful 인터페이스를 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="66196a0bb288c4ef1f8149743502405df89a8fd9" translate="yes" xml:space="preserve">
          <source>Makes a TRACE request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for simulating diagnostic probes.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 TRACE 요청을 만들고 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다. 진단 프로브 시뮬레이션에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="888f82444507e9099b749f8f400d61b51e2436cd" translate="yes" xml:space="preserve">
          <source>Makes all possible efforts to strip all [X]HTML tags.</source>
          <target state="translated">모든 [X] HTML 태그를 제거하기 위해 가능한 모든 노력을 기울입니다.</target>
        </trans-unit>
        <trans-unit id="99cf9f3654a5878401b856a77fe4db8a46014e99" translate="yes" xml:space="preserve">
          <source>Makes an OPTIONS request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 OPTIONS 요청을 작성하고 &lt;code&gt;Response&lt;/code&gt; 오브젝트를 리턴 합니다. RESTful 인터페이스를 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a2b1ed94dcb4d0abbc485a341862326c80bacbba" translate="yes" xml:space="preserve">
          <source>Makes or deletes the &lt;code&gt;_order&lt;/code&gt; column needed for the &lt;a href=&quot;models/options#django.db.models.Options.order_with_respect_to&quot;&gt;&lt;code&gt;order_with_respect_to&lt;/code&gt;&lt;/a&gt; option on the &lt;code&gt;Meta&lt;/code&gt; subclass.</source>
          <target state="translated">&lt;code&gt;Meta&lt;/code&gt; 서브 클래스 에서 &lt;a href=&quot;models/options#django.db.models.Options.order_with_respect_to&quot;&gt; &lt;code&gt;order_with_respect_to&lt;/code&gt; &lt;/a&gt; 옵션에 필요한 &lt;code&gt;_order&lt;/code&gt; 컬럼을 작성 하거나 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="7dccc437985ff30cb011b62713b84ead4f737431" translate="yes" xml:space="preserve">
          <source>Makes the active translation object a &lt;code&gt;NullTranslations()&lt;/code&gt; instance. This is useful when we want delayed translations to appear as the original string for some reason.</source>
          <target state="translated">활성 변환 객체를 &lt;code&gt;NullTranslations()&lt;/code&gt; 인스턴스로 만듭니다. 지연된 번역이 어떤 이유로 원래 문자열로 표시되도록하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3ea1449517b61b6227fc0a09d9c44c6bb5266548" translate="yes" xml:space="preserve">
          <source>Makes this object orderable with respect to the given field, usually a &lt;code&gt;ForeignKey&lt;/code&gt;. This can be used to make related objects orderable with respect to a parent object. For example, if an &lt;code&gt;Answer&lt;/code&gt; relates to a &lt;code&gt;Question&lt;/code&gt; object, and a question has more than one answer, and the order of answers matters, you&amp;rsquo;d do this:</source>
          <target state="translated">주어진 필드 (보통 &lt;code&gt;ForeignKey&lt;/code&gt; ) 와 관련하여이 객체를 정렬 가능하게 만듭니다 . 부모 객체와 관련하여 관련 객체를 정렬 할 수 있습니다. 예를 들어, &lt;code&gt;Answer&lt;/code&gt; 이 &lt;code&gt;Question&lt;/code&gt; 개체와 관련되어 있고 질문에 둘 이상의 답변이 있고 답변 순서가 중요한 경우 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d54f5b47c954fae0115f4537ba904f310a264de9" translate="yes" xml:space="preserve">
          <source>Making &amp;ldquo;friendly&amp;rdquo; template contexts</source>
          <target state="translated">&quot;친숙한&quot;템플릿 컨텍스트 만들기</target>
        </trans-unit>
        <trans-unit id="c8db8d80fd9fb4fecd9dcd41e45fec83ed98ddd5" translate="yes" xml:space="preserve">
          <source>Making URL patterns themselves translatable via the &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;django.utils.translation.gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;django.utils.translation.gettext_lazy()&lt;/code&gt; &lt;/a&gt; 함수 를 통해 URL 패턴 자체를 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42a63d52676fa037454255c2d52959b81d535bf1" translate="yes" xml:space="preserve">
          <source>Making actions available site-wide</source>
          <target state="translated">사이트 전체에서 작업 가능</target>
        </trans-unit>
        <trans-unit id="9eec11322f12a5a830e1ec8f9ac3f17534635686" translate="yes" xml:space="preserve">
          <source>Making an expensive computation that depends on the request.</source>
          <target state="translated">요청에 따라 값 비싼 계산을합니다.</target>
        </trans-unit>
        <trans-unit id="11280e40fa12c6ed475a0960415249174d29f82b" translate="yes" xml:space="preserve">
          <source>Making logging calls</source>
          <target state="translated">로깅 호출</target>
        </trans-unit>
        <trans-unit id="7cbc2e6788aa00914bfa34bdeafb0de83e2e8075" translate="yes" xml:space="preserve">
          <source>Making queries</source>
          <target state="translated">쿼리하기</target>
        </trans-unit>
        <trans-unit id="f36af64091c8859d03f0c5912aa8c3e10b3dd9b4" translate="yes" xml:space="preserve">
          <source>Making requests</source>
          <target state="translated">요구하다</target>
        </trans-unit>
        <trans-unit id="b880c8b42823e5609b10a452e5205dcb5f7b4996" translate="yes" xml:space="preserve">
          <source>Management Commands</source>
          <target state="translated">관리 명령</target>
        </trans-unit>
        <trans-unit id="309988b71dc98cdf2b11d5ce945ef12fe12b7c85" translate="yes" xml:space="preserve">
          <source>Management commands and locales</source>
          <target state="translated">관리 명령 및 로캘</target>
        </trans-unit>
        <trans-unit id="fdb992093f99727071e66bbe2c45fcb5e3b93112" translate="yes" xml:space="preserve">
          <source>Management commands can be tested with the &lt;a href=&quot;../../ref/django-admin#django.core.management.call_command&quot;&gt;&lt;code&gt;call_command()&lt;/code&gt;&lt;/a&gt; function. The output can be redirected into a &lt;code&gt;StringIO&lt;/code&gt; instance:</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django.core.management.call_command&quot;&gt; &lt;code&gt;call_command()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 관리 명령을 테스트 할 수 있습니다 . 출력을 &lt;code&gt;StringIO&lt;/code&gt; 인스턴스 로 리디렉션 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="123ebb6632286d41ac5ad793d26b1e8e2995104f" translate="yes" xml:space="preserve">
          <source>Management commands from third-party apps that have been unintentionally overridden can be made available under a new name by creating a new command in one of your project&amp;rsquo;s apps (ordered before the third-party app in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;) which imports the &lt;code&gt;Command&lt;/code&gt; of the overridden command.</source>
          <target state="translated">실수로 재정의 된 타사 앱의 관리 명령은 재정 의 된 &lt;code&gt;Command&lt;/code&gt; 의 명령 을 가져 오는 프로젝트의 앱 중 하나 ( &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 타사 앱보다 우선)에서 새 명령을 생성하여 새 이름으로 사용할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="aedb618e7bae6668445752ed581581d51fca7e48" translate="yes" xml:space="preserve">
          <source>Management signals</source>
          <target state="translated">관리 신호</target>
        </trans-unit>
        <trans-unit id="bab8c1f3a552b23f9c2fc03d51382bf5a6e5f9e0" translate="yes" xml:space="preserve">
          <source>Manager methods</source>
          <target state="translated">관리자 방법</target>
        </trans-unit>
        <trans-unit id="5d37a81c73b96201b2d085091cabd9eeab93ecf1" translate="yes" xml:space="preserve">
          <source>Manager names</source>
          <target state="translated">관리자 이름</target>
        </trans-unit>
        <trans-unit id="4f7b3cfa4fbefb6a7d1086c0a97bc4ea23175a55" translate="yes" xml:space="preserve">
          <source>Managers</source>
          <target state="translated">Managers</target>
        </trans-unit>
        <trans-unit id="9e8450ccf72e480aeae5b3890c911f5578602674" translate="yes" xml:space="preserve">
          <source>Managers from base classes are always inherited by the child class, using Python&amp;rsquo;s normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on).</source>
          <target state="translated">기본 클래스의 관리자는 Python의 일반 이름 확인 순서를 사용하여 항상 자식 클래스에 의해 상속됩니다 (자식 클래스의 이름은 다른 모든 클래스를 재정의 한 다음 첫 번째 상위 클래스의 이름 등).</target>
        </trans-unit>
        <trans-unit id="4f90f7785499fc4cfaa11512554a9d9c8b983450" translate="yes" xml:space="preserve">
          <source>Managing database transactions</source>
          <target state="translated">데이터베이스 트랜잭션 관리</target>
        </trans-unit>
        <trans-unit id="a21bfd78268483f35f3c604df2fe7d8571659141" translate="yes" xml:space="preserve">
          <source>Managing files</source>
          <target state="translated">파일 관리</target>
        </trans-unit>
        <trans-unit id="1f4073ab68fce5fa416ebfc1214a39c03aa82bd7" translate="yes" xml:space="preserve">
          <source>Managing static files (e.g. images, JavaScript, CSS)</source>
          <target state="translated">정적 파일 관리 (예 : 이미지, JavaScript, CSS)</target>
        </trans-unit>
        <trans-unit id="cfe3a8d49df863653ebd64aa7a5c9599baeb268f" translate="yes" xml:space="preserve">
          <source>Managing the database</source>
          <target state="translated">데이터베이스 관리</target>
        </trans-unit>
        <trans-unit id="821946108f9fcc4278ef8ff2a44740fe9fc0f854" translate="yes" xml:space="preserve">
          <source>Managing users in the admin</source>
          <target state="translated">관리자에서 사용자 관리</target>
        </trans-unit>
        <trans-unit id="b383c49ef5abc4e107f02ad08c8c62501452a9f0" translate="yes" xml:space="preserve">
          <source>Mandatory &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">필수 &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49bb3afa6fe6d5f9c1b4819689c8cb64af32574b" translate="yes" xml:space="preserve">
          <source>Manually managing a user&amp;rsquo;s password</source>
          <target state="translated">사용자 비밀번호 수동 관리</target>
        </trans-unit>
        <trans-unit id="169b1587f29ae2dd843f597266b7665985a7ec7f" translate="yes" xml:space="preserve">
          <source>Manually rendered &lt;code&gt;can_delete&lt;/code&gt; and &lt;code&gt;can_order&lt;/code&gt;</source>
          <target state="translated">수동으로 렌더링 된 &lt;code&gt;can_delete&lt;/code&gt; 및 &lt;code&gt;can_order&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="578ba80b666e0ccf9a7012331ca7e916469a6aaf" translate="yes" xml:space="preserve">
          <source>Manually selecting a database</source>
          <target state="translated">데이터베이스 수동 선택</target>
        </trans-unit>
        <trans-unit id="9cab6e985bdaa8e6c7cd3d1f1913684e9f6c62a4" translate="yes" xml:space="preserve">
          <source>Manually selecting a database for a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 에 대한 데이터베이스 수동 선택</target>
        </trans-unit>
        <trans-unit id="6e5d67e28075441efb68505f6ad34b3922452603" translate="yes" xml:space="preserve">
          <source>Manually-specifying values of auto-incrementing primary keys</source>
          <target state="translated">자동 증분 기본 키의 값을 수동으로 지정</target>
        </trans-unit>
        <trans-unit id="3fd4f2fc1f97ee8fb54c37f3123e041f2ad5b7eb" translate="yes" xml:space="preserve">
          <source>Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit.</source>
          <target state="translated">많은 JavaScript 툴킷이 있으며 많은 툴킷에는 애플리케이션을 향상시키는 데 사용할 수있는 위젯 (예 : 달력 위젯)이 포함되어 있습니다. Django는 JavaScript 툴킷 하나에 대한 축복을 의도적으로 피했습니다. 각 툴킷에는 고유 한 상대적인 장단점이 있으므로 요구 사항에 맞는 툴킷을 사용하십시오. Django는 모든 JavaScript 툴킷과 통합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25451186d18d24fb946ba6ce8889475aef168969" translate="yes" xml:space="preserve">
          <source>Many commands take a list of &amp;ldquo;app names.&amp;rdquo; An &amp;ldquo;app name&amp;rdquo; is the basename of the package containing your models. For example, if your &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains the string &lt;code&gt;'mysite.blog'&lt;/code&gt;, the app name is &lt;code&gt;blog&lt;/code&gt;.</source>
          <target state="translated">많은 명령이&amp;ldquo;앱 이름&amp;rdquo;목록을 가져옵니다. &quot;앱 이름&quot;은 모델이 포함 된 패키지의 기본 이름입니다. 예를 들어 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;'mysite.blog'&lt;/code&gt; 문자열이 포함 된 경우 앱 이름은 &lt;code&gt;blog&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a1ab0c728d9adbf5dc95998cbd2e06c0ddcc849d" translate="yes" xml:space="preserve">
          <source>Many of Django&amp;rsquo;s built-in class-based views inherit from other class-based views or various mixins. Because this inheritance chain is very important, the ancestor classes are documented under the section title of &lt;strong&gt;Ancestors (MRO)&lt;/strong&gt;. MRO is an acronym for Method Resolution Order.</source>
          <target state="translated">Django의 내장 클래스 기반 뷰는 대부분 다른 클래스 기반 뷰 또는 다양한 믹스 인에서 상속됩니다. 이 상속 체인이 매우 중요하기 때문에 조상 클래스는 &lt;strong&gt;조상 (MRO)&lt;/strong&gt; 섹션 제목에 문서화되어 있습니다. MRO는 Method Resolution Order의 약자입니다.</target>
        </trans-unit>
        <trans-unit id="7ef93725b505fdf5fdda66e9602ccdb48505b2c6" translate="yes" xml:space="preserve">
          <source>Many of Django&amp;rsquo;s model fields accept options that they don&amp;rsquo;t do anything with. For example, you can pass both &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;django.db.models.DateField&lt;/code&gt;&lt;/a&gt; and it will ignore the &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; parameter (&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; being set implies &lt;code&gt;editable=False&lt;/code&gt;). No error is raised in this case.</source>
          <target state="translated">Django의 많은 모델 필드는 아무 것도하지 않는 옵션을 허용합니다. 예를 들어, 당신은 모두 전달할 수 있습니다 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt; &lt;code&gt;editable&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt; A를 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt; &lt;code&gt;django.db.models.DateField&lt;/code&gt; &lt;/a&gt; 과는 무시 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt; &lt;code&gt;editable&lt;/code&gt; &lt;/a&gt; (매개 변수를 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt; 세트 인 의미 &lt;code&gt;editable=False&lt;/code&gt; ). 이 경우 오류가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c7e02cb06b5702dcaa553fe7f77ae3438f401b6a" translate="yes" xml:space="preserve">
          <source>Many of these settings are sensitive and should be treated as confidential. If you&amp;rsquo;re releasing the source code for your project, a common practice is to publish suitable settings for development, and to use a private settings module for production.</source>
          <target state="translated">이러한 설정 중 다수는 민감하므로 기밀로 취급해야합니다. 프로젝트의 소스 코드를 공개하는 경우 일반적인 방법은 개발에 적합한 설정을 게시하고 프로덕션에 개인 설정 모듈을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="75861236e48cb91931859e485f7ff7f5f75eebda" translate="yes" xml:space="preserve">
          <source>Many of these signals are sent by various model methods like &lt;code&gt;__init__()&lt;/code&gt; or &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; that you can override in your own code.</source>
          <target state="translated">이러한 신호 중 많은 부분은 &lt;code&gt;__init__()&lt;/code&gt; 또는 &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 와 같은 다양한 모델 메서드에서 전송되며 사용자 고유의 코드에서 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22d338ef8445afc99ea23ca8b6ff63e24bec60fb" translate="yes" xml:space="preserve">
          <source>Many other things might go wrong with our application in the future, but we can be sure that we won&amp;rsquo;t inadvertently reintroduce this bug, because running the test will warn us immediately. We can consider this little portion of the application pinned down safely forever.</source>
          <target state="translated">앞으로 다른 많은 응용 프로그램에서 문제가 발생할 수 있지만 테스트를 실행하면 즉시 경고가 표시되므로 실수로이 버그를 다시 도입하지 않을 것입니다. 애플리케이션의이 작은 부분은 영원히 안전하게 고정 된 것으로 간주 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a06e57ab2b407ee0845b83ecac56cae0cb1c5bb7" translate="yes" xml:space="preserve">
          <source>Many template tags take a number of arguments &amp;ndash; strings or template variables &amp;ndash; and return a result after doing some processing based solely on the input arguments and some external information. For example, a &lt;code&gt;current_time&lt;/code&gt; tag might accept a format string and return the time as a string formatted accordingly.</source>
          <target state="translated">많은 템플릿 태그는 문자열 또는 템플릿 변수와 같은 많은 인수를 사용하며 입력 인수 및 일부 외부 정보만을 기반으로 일부 처리를 수행 한 후 결과를 반환합니다. 예를 들어, &lt;code&gt;current_time&lt;/code&gt; 태그는 형식 문자열을 승인하고 그에 따라 형식이 지정된 문자열로 시간을 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d934fc1527a93c2b43e246ede7cf475542db271a" translate="yes" xml:space="preserve">
          <source>Many templates, including some of Django&amp;rsquo;s, rely upon the silence of the template system when a nonexistent variable is encountered. If you assign a value other than &lt;code&gt;''&lt;/code&gt; to &lt;code&gt;string_if_invalid&lt;/code&gt;, you will experience rendering problems with these templates and sites.</source>
          <target state="translated">Django를 포함한 많은 템플릿은 존재하지 않는 변수가있을 때 템플릿 시스템의 침묵에 의존합니다. 당신이 아닌 다른 값을 지정하면 &lt;code&gt;''&lt;/code&gt; 을 &lt;code&gt;string_if_invalid&lt;/code&gt; , 이러한 템플릿 및 사이트와의 렌더링 문제가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="67d6af84e82be13a30451c42ca848e947ab607d1" translate="yes" xml:space="preserve">
          <source>Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the &lt;a href=&quot;#django.forms.SelectDateWidget.years&quot;&gt;&lt;code&gt;years&lt;/code&gt;&lt;/a&gt; attribute is set for a &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">많은 위젯에는 선택적 추가 인수가 있습니다. 필드에서 위젯을 정의 할 때 설정할 수 있습니다. 다음 예제에서 &lt;a href=&quot;#django.forms.SelectDateWidget.years&quot;&gt; &lt;code&gt;years&lt;/code&gt; &lt;/a&gt; 속성은 &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt; &lt;code&gt;SelectDateWidget&lt;/code&gt; 에&lt;/a&gt; 대해 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="d58d8917cafabb2c90c45707f57b660d3626c9ee" translate="yes" xml:space="preserve">
          <source>Many-to-many field to &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다 대다 분야의 &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="f9d8f6ec324fa681af98e9241f31cfa5781051c6" translate="yes" xml:space="preserve">
          <source>Many-to-many relationship to &lt;a href=&quot;#django.contrib.auth.models.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt; 과 다 대다 관계</target>
        </trans-unit>
        <trans-unit id="f1c116d2e532fe76c699eb71681c5f325c7f63e0" translate="yes" xml:space="preserve">
          <source>Many-to-many relationship to &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt; 와 다 대다 관계</target>
        </trans-unit>
        <trans-unit id="70e5715c4c5ce8ff1bacfa3505a6793b1e2d573f" translate="yes" xml:space="preserve">
          <source>Many-to-many relationships</source>
          <target state="translated">다 대다 관계</target>
        </trans-unit>
        <trans-unit id="e425f695d48e438c36b7fc9a91b741584873db30" translate="yes" xml:space="preserve">
          <source>Many-to-many relationships can be queried using &lt;a href=&quot;../queries#lookups-that-span-relationships&quot;&gt;lookups across relationships&lt;/a&gt;:</source>
          <target state="translated">다 대다 관계를 이용하여 조회 할 수있는 &lt;a href=&quot;../queries#lookups-that-span-relationships&quot;&gt;관계를 통해 조회를&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="ba72c44b14ca6638dbe6a05d3bce34a9c08ab179" translate="yes" xml:space="preserve">
          <source>Many-to-one relationships</source>
          <target state="translated">다 대일 관계</target>
        </trans-unit>
        <trans-unit id="9f6d34f1802b32e0c12aec1e3e5d808e6f66d84a" translate="yes" xml:space="preserve">
          <source>ManyToMany-relations are exported for the model that binds them. For instance, the &lt;code&gt;auth.User&lt;/code&gt; model has such a relation to the &lt;code&gt;auth.Permission&lt;/code&gt; model:</source>
          <target state="translated">바인딩하는 모델에 대해 ManyToMany 관계가 내보내집니다. 예를 들어, &lt;code&gt;auth.User&lt;/code&gt; 의 모델에 이러한 관계가 &lt;code&gt;auth.Permission&lt;/code&gt; 의 모델 :</target>
        </trans-unit>
        <trans-unit id="5cf3b65a416d6e52bab78d048e87986c34858f91" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.nodata_value&quot;&gt;&lt;code&gt;nodata_value&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.nodata_value&quot;&gt; &lt;code&gt;nodata_value&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="b49cda891b56d96f95a118e0757e9217f5f1c480" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.driver&quot;&gt;&lt;code&gt;driver&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.driver&quot;&gt; &lt;code&gt;driver&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="540288375fb7d6fa4ddcf2966b348db71d56849b" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.height&quot;&gt; &lt;code&gt;height&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="3690a5f473e1bd7016481bb98cfe5cabfcaea42d" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt; &lt;code&gt;origin&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="7d4ecb0587f3cc23b7f26c6f72881682d026d17e" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt; &lt;code&gt;scale&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="ea921e1e0d479e3a85669a075cb1b1c3b19e6693" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srid&quot;&gt;&lt;code&gt;srid&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srid&quot;&gt; &lt;code&gt;srid&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="aa20fe2b5818bbde36ad87034a1ecbf01e297f82" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.width&quot;&gt; &lt;code&gt;width&lt;/code&gt; &lt;/a&gt; 속성에 매핑</target>
        </trans-unit>
        <trans-unit id="cb343929f61bef17958fbce9c5add540ed87a54c" translate="yes" xml:space="preserve">
          <source>Mapping URLs to views</source>
          <target state="translated">URL을 뷰에 매핑</target>
        </trans-unit>
        <trans-unit id="b59a41665f92ed102c9cc53a15e018811cad6724" translate="yes" xml:space="preserve">
          <source>Mapping query fields to model fields</source>
          <target state="translated">쿼리 필드를 모델 필드에 매핑</target>
        </trans-unit>
        <trans-unit id="790cecd9579b54cbb8881de7b21413ab38c2dd3f" translate="yes" xml:space="preserve">
          <source>Maps values for &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and (optionally) &lt;code&gt;None&lt;/code&gt;, to the strings &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;maybe&amp;rdquo;, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 및 (선택 사항) &lt;code&gt;None&lt;/code&gt; 값을 문자열&amp;ldquo;yes&amp;rdquo;,&amp;ldquo;no&amp;rdquo;,&amp;ldquo;maybe&amp;rdquo;또는 쉼표로 구분 된 목록으로 전달 된 사용자 지정 매핑에 매핑하고 값에 따라 해당 문자열 중 하나를 반환합니다. :</target>
        </trans-unit>
        <trans-unit id="7f00002bb6ad2eec19a19de8a03c7d6fad15adff" translate="yes" xml:space="preserve">
          <source>MariaDB</source>
          <target state="translated">MariaDB</target>
        </trans-unit>
        <trans-unit id="7d4168bc3f16d6fe180b1ac18cb68592a82d37fc" translate="yes" xml:space="preserve">
          <source>MariaDB &lt;a href=&quot;https://jira.mariadb.org/browse/MDEV-12981&quot;&gt;doesn&amp;rsquo;t support&lt;/a&gt; the &lt;code&gt;default&lt;/code&gt; parameter.</source>
          <target state="translated">MariaDB는 &lt;a href=&quot;https://jira.mariadb.org/browse/MDEV-12981&quot;&gt;지원하지 않습니다 &lt;/a&gt; &lt;code&gt;default&lt;/code&gt; 매개 변수를.</target>
        </trans-unit>
        <trans-unit id="4a643fce146444011d7acb230ac298d723eb94e0" translate="yes" xml:space="preserve">
          <source>MariaDB and &lt;code&gt;default&lt;/code&gt;</source>
          <target state="translated">MariaDB 및 &lt;code&gt;default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60c8a756ff78d3971eda0305304654e702c293c5" translate="yes" xml:space="preserve">
          <source>MariaDB and Oracle users</source>
          <target state="translated">MariaDB 및 Oracle 사용자</target>
        </trans-unit>
        <trans-unit id="cf8e08dd5e412196ef8d596fa4013be4fa1691fa" translate="yes" xml:space="preserve">
          <source>MariaDB notes</source>
          <target state="translated">MariaDB 노트</target>
        </trans-unit>
        <trans-unit id="f4d445e79364f1438052336aec87ad0818d1254b" translate="yes" xml:space="preserve">
          <source>MariaDB support was added.</source>
          <target state="translated">MariaDB 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="22b9920d6f1372da8351b819c15404ef8d73e846" translate="yes" xml:space="preserve">
          <source>MariaDB, PostGIS, and SpatiaLite</source>
          <target state="translated">MariaDB, PostGIS 및 SpatiaLite</target>
        </trans-unit>
        <trans-unit id="aff977f722d98c1105c72000c74384e594446a96" translate="yes" xml:space="preserve">
          <source>Marking a filter &lt;code&gt;is_safe&lt;/code&gt; will coerce the filter&amp;rsquo;s return value to a string. If your filter should return a boolean or other non-string value, marking it &lt;code&gt;is_safe&lt;/code&gt; will probably have unintended consequences (such as converting a boolean False to the string &amp;lsquo;False&amp;rsquo;).</source>
          <target state="translated">필터를 &lt;code&gt;is_safe&lt;/code&gt; 로 표시 하면 필터의 반환 값이 문자열로 강제 변환 됩니다. 필터가 부울 값 또는 문자열이 아닌 다른 값을 반환해야하는 경우 &lt;code&gt;is_safe&lt;/code&gt; 로 표시하면 의도하지 않은 결과가 발생할 수 있습니다 (예 : 부울 False를 문자열 'False'로 변환).</target>
        </trans-unit>
        <trans-unit id="8f989987f22e747a6a20e1632167baf49bbb35ce" translate="yes" xml:space="preserve">
          <source>Marking middleware as unused</source>
          <target state="translated">미들웨어를 미사용으로 표시</target>
        </trans-unit>
        <trans-unit id="311345611b41ef66eb9c30d09d1355a38f149c13" translate="yes" xml:space="preserve">
          <source>Marking strings as no-op</source>
          <target state="translated">문자열을 무 작동으로 표시</target>
        </trans-unit>
        <trans-unit id="9ad57bd8a9f8ffb40bd3a39cd567898505d9a1a7" translate="yes" xml:space="preserve">
          <source>Marks a middleware as &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;asynchronous-only&lt;/a&gt;. Django will wrap it in an asynchronous event loop when it is called from the WSGI request path.</source>
          <target state="translated">미들웨어를 &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;비동기 전용&lt;/a&gt; 으로 표시합니다 . Django는 WSGI 요청 경로에서 호출 될 때 비동기 이벤트 루프로 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="71a236994fd0ea6b37a7806b66f175d552b1f605" translate="yes" xml:space="preserve">
          <source>Marks a middleware as &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;sync and async compatible&lt;/a&gt;, this allows to avoid converting requests. You must implement detection of the current request type to use this decorator. See &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;asynchronous middleware documentation&lt;/a&gt; for details.</source>
          <target state="translated">미들웨어를 &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;동기화 및 비동기 호환&lt;/a&gt; 으로 표시하여 요청 변환을 방지 할 수 있습니다. 이 데코레이터를 사용하려면 현재 요청 유형 감지를 구현해야합니다. 자세한 내용은 &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;비동기 미들웨어 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5099a30c2ca01220fb6248589e9583ae57c439f0" translate="yes" xml:space="preserve">
          <source>Marks a middleware as &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;synchronous-only&lt;/a&gt;. (The default in Django, but this allows you to future-proof if the default ever changes in a future release.)</source>
          <target state="translated">미들웨어를 &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;동기 전용&lt;/a&gt; 으로 표시합니다 . (Django의 기본값이지만 향후 릴리스에서 기본값이 변경 될 경우 미래를 대비할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="47ef4478c5a91ad82e0866515b18c5b9ba23b7af" translate="yes" xml:space="preserve">
          <source>Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.</source>
          <target state="translated">출력 전에 추가 HTML 이스케이프가 필요하지 않은 것으로 문자열을 표시합니다. 자동 이스케이프 기능이 해제되어 있으면이 필터는 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="223d15dc9b30717101f8c092e0326f6bd5d6b0ed" translate="yes" xml:space="preserve">
          <source>Marks strings for translation but doesn&amp;rsquo;t translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later.</source>
          <target state="translated">번역 할 문자열을 표시하지만 지금 번역하지는 않습니다. 이것은 외부 언어로 사용될 수 있기 때문에 기본 언어로 유지되어야하는 전역 변수에 문자열을 저장하는 데 사용될 수 있으며 나중에 번역 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="c3ea63ecdea5904962549d0b05f6dc32f2807d9a" translate="yes" xml:space="preserve">
          <source>Marks the migrations up to the target one (following the rules above) as applied, but without actually running the SQL to change your database schema.</source>
          <target state="translated">데이터베이스 스키마를 변경하기 위해 실제로 SQL을 실행하지 않고 마이그레이션을 대상으로 마이그레이션 (위 규칙에 따라)으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8d1f153abd2bfa9e625d24e6543581e4741ba55d" translate="yes" xml:space="preserve">
          <source>Marks the user as having no password set. This isn&amp;rsquo;t the same as having a blank string for a password. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt; for this user will never return &lt;code&gt;True&lt;/code&gt;. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">사용자가 비밀번호를 설정하지 않은 것으로 표시합니다. 이것은 암호를위한 빈 문자열을 갖는 것과 다릅니다. 이 사용자의 &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 를 반환하지 않습니다 . &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt; 객체를 저장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5bd4c73c983b5ef20c68616eada1df033fb69691" translate="yes" xml:space="preserve">
          <source>Marks the user as having no password set. This isn&amp;rsquo;t the same as having a blank string for a password. &lt;a href=&quot;#django.contrib.auth.models.User.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt; for this user will never return &lt;code&gt;True&lt;/code&gt;. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">사용자가 비밀번호를 설정하지 않은 것으로 표시합니다. 이것은 암호를위한 빈 문자열을 갖는 것과 다릅니다. 이 사용자의 &lt;a href=&quot;#django.contrib.auth.models.User.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 를 반환하지 않습니다 . &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 개체를 저장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f4d5b558d76aca4dd8323ea862d1817d75c36e4e" translate="yes" xml:space="preserve">
          <source>Matching is done by name. This means that you can use SQL&amp;rsquo;s &lt;code&gt;AS&lt;/code&gt; clauses to map fields in the query to model fields. So if you had some other table that had &lt;code&gt;Person&lt;/code&gt; data in it, you could easily map it into &lt;code&gt;Person&lt;/code&gt; instances:</source>
          <target state="translated">매칭은 이름으로 이루어집니다. 이는 SQL의 &lt;code&gt;AS&lt;/code&gt; 절을 사용 하여 조회의 필드를 모델 필드에 맵핑 할 수 있음을 의미 합니다. 따라서 &lt;code&gt;Person&lt;/code&gt; 데이터 가 포함 된 다른 테이블이 있으면 &lt;code&gt;Person&lt;/code&gt; 인스턴스에 쉽게 매핑 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1756bec08ab2e5a4f6f3ea1577c5665ca0e8a418" translate="yes" xml:space="preserve">
          <source>Math Functions</source>
          <target state="translated">수학 함수</target>
        </trans-unit>
        <trans-unit id="a9e1ee5cfc81eca21d13684541c3fe5125c8cf23" translate="yes" xml:space="preserve">
          <source>May be &lt;code&gt;'commit_on_success'&lt;/code&gt; (default) or &lt;code&gt;'autocommit'&lt;/code&gt;.</source>
          <target state="translated">수 있음 &lt;code&gt;'commit_on_success'&lt;/code&gt; (기본값) 또는 &lt;code&gt;'autocommit'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e7d5a77b56557cd02637c33e06076b81641a4ddd" translate="yes" xml:space="preserve">
          <source>May be set with a slice or tuple of (begin, end) feature ID&amp;rsquo;s to map from the data source. In other words, this keyword enables the user to selectively import a subset range of features in the geographic data source.</source>
          <target state="translated">데이터 소스에서 맵핑 할 기능 ID의 슬라이스 또는 튜플 (시작, 종료)로 설정 될 수 있습니다. 즉,이 키워드를 사용하면 지리적 데이터 소스에서 기능의 하위 세트 범위를 선택적으로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49efc4391faa05cc8087791bccf389e65b797277" translate="yes" xml:space="preserve">
          <source>Maybe. You&amp;rsquo;re better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa.</source>
          <target state="translated">아마도. DST 관련 버그로부터 더 잘 보호받을 수 있지만, 순진한 날짜 시간을 인식 할 수있는 날짜 시간으로 또는 그 반대로 부주의하게 전환하여 발을 딛을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de10edfac7e76d9ec68df69f5a5a36c3464c6350" translate="yes" xml:space="preserve">
          <source>Measurement</source>
          <target state="translated">Measurement</target>
        </trans-unit>
        <trans-unit id="3c38753a72f7a69367f3f46f2f3bf8c4fb743041" translate="yes" xml:space="preserve">
          <source>Measurement API</source>
          <target state="translated">측정 API</target>
        </trans-unit>
        <trans-unit id="da9d9ce75f58bd008d16b191b24e7db519550a57" translate="yes" xml:space="preserve">
          <source>Measurement Objects</source>
          <target state="translated">측정 대상</target>
        </trans-unit>
        <trans-unit id="04a372dab2b1d8a942ab1b2063b60fdcc95c3fb8" translate="yes" xml:space="preserve">
          <source>Media files are uploaded by your users. They&amp;rsquo;re untrusted! Make sure your web server never attempts to interpret them. For instance, if a user uploads a &lt;code&gt;.php&lt;/code&gt; file, the web server shouldn&amp;rsquo;t execute it.</source>
          <target state="translated">미디어 파일은 사용자가 업로드합니다. 그들은 신뢰할 수 없다! 웹 서버가 웹 서버를 해석하려고 시도하지 않도록하십시오. 예를 들어, 사용자가 &lt;code&gt;.php&lt;/code&gt; 파일을 업로드 하면 웹 서버는이를 실행하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="edc301f7283a9e45e85a8a8deab4551d236d86a4" translate="yes" xml:space="preserve">
          <source>Memcached</source>
          <target state="translated">Memcached</target>
        </trans-unit>
        <trans-unit id="3e4380f0ac1531148db9193c0aeaa68f7bbaf08d" translate="yes" xml:space="preserve">
          <source>Memcached backends pass the contents of &lt;a href=&quot;../ref/settings#std:setting-CACHES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; as keyword arguments to the client constructors, allowing for more advanced control of client behavior. For example usage, see below.</source>
          <target state="translated">Memcached 백엔드는 &lt;a href=&quot;../ref/settings#std:setting-CACHES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt; 의 내용을 키워드 인수로 클라이언트 생성자에 전달하여 클라이언트 동작을보다 고급 제어 할 수 있습니다. 사용 예는 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fe2d49e9df412b554e332a39a2726c89c1318ae2" translate="yes" xml:space="preserve">
          <source>Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting data in the cache. All data is stored directly in memory, so there&amp;rsquo;s no overhead of database or filesystem usage.</source>
          <target state="translated">Memcached는 데몬으로 실행되며 지정된 양의 RAM이 할당됩니다. 캐시에있는 데이터를 추가, 검색 및 삭제하기위한 빠른 인터페이스를 제공하기 만하면됩니다. 모든 데이터는 메모리에 직접 저장되므로 데이터베이스 또는 파일 시스템 사용에 대한 오버 헤드가 없습니다.</target>
        </trans-unit>
        <trans-unit id="8adc1f5324b8d52b9b22d6eba639e747916c344c" translate="yes" xml:space="preserve">
          <source>Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (&lt;code&gt;django.core.cache.backends.base.CacheKeyWarning&lt;/code&gt;) if a key is used that would cause an error on memcached.</source>
          <target state="translated">가장 일반적으로 사용되는 프로덕션 캐시 백엔드 인 Memcached는 250자를 초과하거나 공백 또는 제어 문자를 포함하는 캐시 키를 허용하지 않으므로 이러한 키를 사용하면 예외가 발생합니다. 캐시 이식 가능 코드를 장려하고 불쾌한 놀라움을 최소화하기 위해 다른 내장 캐시 백엔드 는 키를 사용하는 경우 memcached에서 오류를 발생시키는 경우 경고 ( &lt;code&gt;django.core.cache.backends.base.CacheKeyWarning&lt;/code&gt; )를 발행합니다 .</target>
        </trans-unit>
        <trans-unit id="7315f949ce30d24b2c84415a3ec8ab22d9946b98" translate="yes" xml:space="preserve">
          <source>Message files</source>
          <target state="translated">메시지 파일</target>
        </trans-unit>
        <trans-unit id="8a3f4ed084336620d7b21bf9a32d845342f802b8" translate="yes" xml:space="preserve">
          <source>Message levels</source>
          <target state="translated">메시지 레벨</target>
        </trans-unit>
        <trans-unit id="3ab63989bf9a5038b658c5d4c375220ce4a1ad58" translate="yes" xml:space="preserve">
          <source>Message middleware</source>
          <target state="translated">메시지 미들웨어</target>
        </trans-unit>
        <trans-unit id="889993ad5e8282135d84fbb43d72e81128bd864a" translate="yes" xml:space="preserve">
          <source>Message tags</source>
          <target state="translated">메시지 태그</target>
        </trans-unit>
        <trans-unit id="129739eac18a8e97b6afdd53b93d70391d1ea0f8" translate="yes" xml:space="preserve">
          <source>Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see &lt;a href=&quot;#adding-extra-message-tags&quot;&gt;Adding extra message tags&lt;/a&gt; below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that&amp;rsquo;s a lowercase version of its own constant:</source>
          <target state="translated">메시지 태그는 메시지 수준과보기에 직접 추가 된 추가 태그의 문자열 표현입니다 ( 자세한 내용은 아래의 &lt;a href=&quot;#adding-extra-message-tags&quot;&gt;메시지 태그&lt;/a&gt; 추가 참조). 태그는 문자열로 저장되며 공백으로 구분됩니다. 일반적으로 메시지 태그는 메시지 유형에 따라 메시지 스타일을 사용자 정의하기 위해 CSS 클래스로 사용됩니다. 기본적으로 각 레벨에는 자체 상수의 소문자 버전 인 단일 태그가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1702b4686278becffc88baabe6f4b7a8355532c" translate="yes" xml:space="preserve">
          <source>Messages</source>
          <target state="translated">Messages</target>
        </trans-unit>
        <trans-unit id="624996c17c837f1f6668cb6415dfad8e3d8884e1" translate="yes" xml:space="preserve">
          <source>Messages are comparable. That allows you to easily write tests:</source>
          <target state="translated">메시지는 비슷합니다. 이를 통해 쉽게 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a181e64242c1481fec9677caa37392da3000ad86" translate="yes" xml:space="preserve">
          <source>Messages are implemented through a &lt;a href=&quot;../middleware&quot;&gt;middleware&lt;/a&gt; class and corresponding &lt;a href=&quot;../templates/api&quot;&gt;context processor&lt;/a&gt;.</source>
          <target state="translated">메시지는 &lt;a href=&quot;../middleware&quot;&gt;미들웨어&lt;/a&gt; 클래스와 해당 &lt;a href=&quot;../templates/api&quot;&gt;컨텍스트 프로세서를&lt;/a&gt; 통해 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="dd219d05f6a7f3c767dd3fb3a161b3995ee9e9a7" translate="yes" xml:space="preserve">
          <source>Messages framework</source>
          <target state="translated">메시지 프레임 워크</target>
        </trans-unit>
        <trans-unit id="a7f63713d0d8953f6ed46c9ee2e3e3db8b179309" translate="yes" xml:space="preserve">
          <source>Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.:</source>
          <target state="translated">메시지 레벨은 정수에 지나지 않으므로 자신 만의 레벨 상수를 정의하고이를 사용하여보다 사용자 정의 된 사용자 피드백을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fac15d4ec7ca50bd18d6e6dc1f5c0d39428a8296" translate="yes" xml:space="preserve">
          <source>Messages relating to the interaction of code with the database. For example, every application-level SQL statement executed by a request is logged at the &lt;code&gt;DEBUG&lt;/code&gt; level to this logger.</source>
          <target state="translated">데이터베이스와 코드의 상호 작용과 관련된 메시지 예를 들어, 요청에 의해 실행 된 모든 응용 프로그램 레벨 SQL 문은 &lt;code&gt;DEBUG&lt;/code&gt; 레벨에서이 로거에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="4fe57b41a0a77a8786566d6da2db51c95d96ec43" translate="yes" xml:space="preserve">
          <source>Messages to this logger have the following extra context:</source>
          <target state="translated">이 로거에 대한 메시지에는 다음과 같은 추가 컨텍스트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="80427fec440b3b33fe3d42e609fafaf5d7908f0b" translate="yes" xml:space="preserve">
          <source>Meter, Metre</source>
          <target state="translated">미터, 미터</target>
        </trans-unit>
        <trans-unit id="6cc183aef428f6d3047aa1c84a2802cd7e666781" translate="yes" xml:space="preserve">
          <source>Method called prior to &lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt; to prepare the value before being saved (e.g. for &lt;a href=&quot;#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;DateField.auto_now&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">저장하기 전에 값을 준비 하기 위해 &lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt; &lt;code&gt;get_db_prep_save()&lt;/code&gt; &lt;/a&gt; 이전에 호출 된 메소드 (예 : &lt;a href=&quot;#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;DateField.auto_now&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c8237e11e2d1fac8d031550b39dcb305f6b132f9" translate="yes" xml:space="preserve">
          <source>Method-calling happens in the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; loop: &lt;code&gt;question.choice_set.all&lt;/code&gt; is interpreted as the Python code &lt;code&gt;question.choice_set.all()&lt;/code&gt;, which returns an iterable of &lt;code&gt;Choice&lt;/code&gt; objects and is suitable for use in the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">메소드 호출은 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;{% for %}&lt;/code&gt; &lt;/a&gt; 루프 에서 발생 합니다. &lt;code&gt;question.choice_set.all&lt;/code&gt; 은 Python 코드 &lt;code&gt;question.choice_set.all()&lt;/code&gt; 로 해석되어 &lt;code&gt;Choice&lt;/code&gt; 객체 의 반복 가능을 반환하며 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;{% for %}&lt;/code&gt; &lt;/a&gt; 에서 사용하기에 적합합니다 } 태그.</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="5110517bbb0ceecfc811636098d300a818bd2903" translate="yes" xml:space="preserve">
          <source>Methods are copied according to the following rules:</source>
          <target state="translated">메소드는 다음 규칙에 따라 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="c29b6a782cb3466448adea0bbc4942ee85bf4b9c" translate="yes" xml:space="preserve">
          <source>Methods implementing a file-like interface for reading from an &lt;code&gt;HttpRequest&lt;/code&gt; instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with an iterative parser without constructing a whole XML tree in memory.</source>
          <target state="translated">&lt;code&gt;HttpRequest&lt;/code&gt; 인스턴스 에서 읽기 위해 파일과 같은 인터페이스를 구현하는 메소드 이를 통해 들어오는 요청을 스트리밍 방식으로 사용할 수 있습니다. 일반적인 사용 사례는 메모리에 전체 XML 트리를 구성하지 않고 반복 파서를 사용하여 큰 XML 페이로드를 처리하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7537f0d772e0cefae12a5778f293452376697984" translate="yes" xml:space="preserve">
          <source>Methods of &lt;code&gt;BoundField&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BoundField&lt;/code&gt; 의 방법</target>
        </trans-unit>
        <trans-unit id="d7e863f4f1c1be0d2a8f2373d48bcee8d5acaf1b" translate="yes" xml:space="preserve">
          <source>Methods on &lt;code&gt;ContentType&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;ContentType&lt;/code&gt; 인스턴스의 메소드</target>
        </trans-unit>
        <trans-unit id="d351ad385bfedf9cba6858a1efa5aa57dc9698a4" translate="yes" xml:space="preserve">
          <source>Methods that do not return &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">반환하지 않는 방법 &lt;code&gt;QuerySet&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="6fd9ae43b3e6c8f254de171e1a039e0f3d4c6292" translate="yes" xml:space="preserve">
          <source>Methods that it provides can be used to:</source>
          <target state="translated">제공하는 방법을 사용하여 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50171e2f44297086d6687ff051c7db91aa0d69c5" translate="yes" xml:space="preserve">
          <source>Methods that return new &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">새 반환 방법 &lt;code&gt;QuerySet&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="34b62d647fb1aa8ee6a32fabd2dd97436495a6e7" translate="yes" xml:space="preserve">
          <source>Methods with a &lt;code&gt;queryset_only&lt;/code&gt; attribute set to &lt;code&gt;False&lt;/code&gt; are always copied.</source>
          <target state="translated">&lt;code&gt;queryset_only&lt;/code&gt; 속성이 &lt;code&gt;False&lt;/code&gt; 로 설정된 메소드 는 항상 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="b92a882f4327d805f08dc3ac7925cb366b015a77" translate="yes" xml:space="preserve">
          <source>Methods with a &lt;code&gt;queryset_only&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt; are never copied.</source>
          <target state="translated">&lt;code&gt;queryset_only&lt;/code&gt; 속성이 &lt;code&gt;True&lt;/code&gt; 로 설정된 메소드 는 복사되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="415e8975c1cd5ee32623426c5ac3a1fbe4a66920" translate="yes" xml:space="preserve">
          <source>Micrometer, Micrometre</source>
          <target state="translated">마이크로 미터, 마이크로 미터</target>
        </trans-unit>
        <trans-unit id="4ac4affa2d0ba5a96fdb55b5878f3a9560d8453e" translate="yes" xml:space="preserve">
          <source>Microseconds.</source>
          <target state="translated">Microseconds.</target>
        </trans-unit>
        <trans-unit id="8650e63c88329a081961555eda8eb1cef5d7d48c" translate="yes" xml:space="preserve">
          <source>Microsoft SQL Server</source>
          <target state="translated">Microsoft SQL Server</target>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="013b752afcfb9baaa62063cabcd12f518b56607e" translate="yes" xml:space="preserve">
          <source>Middleware are run in reverse order during the response phase, which includes &lt;code&gt;process_template_response()&lt;/code&gt;.</source>
          <target state="translated">응답 단계 중에 미들웨어가 역순으로 실행되며 여기에는 &lt;code&gt;process_template_response()&lt;/code&gt; 가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="28bfdccf26e23c2219c9da6bf7f094e33a3e7c1d" translate="yes" xml:space="preserve">
          <source>Middleware can be built to support &lt;a href=&quot;http/middleware#async-middleware&quot;&gt;both sync and async&lt;/a&gt; contexts. Some of Django&amp;rsquo;s middleware is built like this, but not all. To see what middleware Django has to adapt, you can turn on debug logging for the &lt;code&gt;django.request&lt;/code&gt; logger and look for log messages about &lt;em&gt;&amp;ldquo;Synchronous middleware &amp;hellip; adapted&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;http/middleware#async-middleware&quot;&gt;동기화 및 비동기&lt;/a&gt; 컨텍스트를 모두 지원하도록 미들웨어를 구축 할 수 있습니다 . Django의 미들웨어 중 일부는 이와 같이 구축되었지만 전부는 아닙니다. Django가 조정 &lt;code&gt;django.request&lt;/code&gt; 미들웨어를 확인하려면 django.request 로거에 대한 디버그 로깅을 켜고 &lt;em&gt;&quot;Synchronous middleware&amp;hellip; &lt;/em&gt;adaptive &lt;em&gt;&quot;에&lt;/em&gt; 대한 로그 메시지를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61de36f228910e5410cf91d320477c17afac3493" translate="yes" xml:space="preserve">
          <source>Middleware can either support only synchronous Python (the default), only asynchronous Python, or both. See &lt;a href=&quot;#async-middleware&quot;&gt;Asynchronous support&lt;/a&gt; for details of how to advertise what you support, and know what kind of request you are getting.</source>
          <target state="translated">미들웨어는 동기식 Python (기본값) 만 지원하거나 비동기식 Python 만 지원하거나 둘 다 지원할 수 있습니다. &lt;a href=&quot;#async-middleware&quot;&gt;지원&lt;/a&gt; 하는 것을 광고하는 방법에 대한 자세한 내용과 어떤 종류의 요청을 받고 있는지 알아 보려면 비동기 지원 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="c0fd4a19dba75def9d8c0d763f8181a885326acd" translate="yes" xml:space="preserve">
          <source>Middleware can live anywhere on your Python path.</source>
          <target state="translated">미들웨어는 Python 경로의 어느 곳에서나 살 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40a8812d6b3db5cc375256adc59ffac6ac735c17" translate="yes" xml:space="preserve">
          <source>Middleware can support any combination of synchronous and asynchronous requests. Django will adapt requests to fit the middleware&amp;rsquo;s requirements if it cannot support both, but at a performance penalty.</source>
          <target state="translated">미들웨어는 동기 및 비동기 요청의 모든 조합을 지원할 수 있습니다. Django는 둘 다 지원할 수없는 경우 미들웨어의 요구 사항에 맞게 요청을 조정하지만 성능이 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="041ebd3d71ecfcfc34214d0415172c97361cd2c1" translate="yes" xml:space="preserve">
          <source>Middleware factories must accept a &lt;code&gt;get_response&lt;/code&gt; argument. You can also initialize some global state for the middleware. Keep in mind a couple of caveats:</source>
          <target state="translated">미들웨어 팩토리는 &lt;code&gt;get_response&lt;/code&gt; 인수를 승인해야합니다 . 미들웨어에 대한 일부 글로벌 상태를 초기화 할 수도 있습니다. 몇 가지주의 사항을 명심하십시오.</target>
        </trans-unit>
        <trans-unit id="becb94e67378bbdc666f92221c00fee5d9c7782a" translate="yes" xml:space="preserve">
          <source>Middleware for utilizing Web server provided authentication when enabled only on the login page. See &lt;a href=&quot;../howto/auth-remote-user#persistent-remote-user-middleware-howto&quot;&gt;Using REMOTE_USER on login pages only&lt;/a&gt; for usage details.</source>
          <target state="translated">웹 서버를 활용하기위한 미들웨어는 로그인 페이지에서만 사용 가능한 경우 인증을 제공했습니다. 보기 &lt;a href=&quot;../howto/auth-remote-user#persistent-remote-user-middleware-howto&quot;&gt;만 로그인 페이지에 REMOTE_USER를 사용하여&lt;/a&gt; 사용 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="273bb01c3c655949e84e50a76a64ca07929efe48" translate="yes" xml:space="preserve">
          <source>Middleware for utilizing Web server provided authentication. See &lt;a href=&quot;../howto/auth-remote-user&quot;&gt;Authentication using REMOTE_USER&lt;/a&gt; for usage details.</source>
          <target state="translated">웹 서버 제공 인증을 사용하기위한 미들웨어. 사용법에 대한 자세한 내용은 &lt;a href=&quot;../howto/auth-remote-user&quot;&gt;REMOTE_USER&lt;/a&gt; 를 사용한 인증을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="c162271e592b254696ec9da70c5a639a0962dbfb" translate="yes" xml:space="preserve">
          <source>Middleware is a framework of hooks into Django&amp;rsquo;s request/response processing. It&amp;rsquo;s a light, low-level &amp;ldquo;plugin&amp;rdquo; system for globally altering Django&amp;rsquo;s input or output.</source>
          <target state="translated">미들웨어는 Django의 요청 / 응답 처리에 연결되는 프레임 워크입니다. Django의 입력 또는 출력을 전체적으로 변경하기위한 경량의 저급&amp;ldquo;플러그인&amp;rdquo;시스템입니다.</target>
        </trans-unit>
        <trans-unit id="5f879bb383b1e685c9b8aed3ac05060d2ce8fdde" translate="yes" xml:space="preserve">
          <source>Middleware order and layering</source>
          <target state="translated">미들웨어 주문 및 계층</target>
        </trans-unit>
        <trans-unit id="f978b6bdf37893405edce30440dd6cdeed90da10" translate="yes" xml:space="preserve">
          <source>Middleware ordering</source>
          <target state="translated">미들웨어 주문</target>
        </trans-unit>
        <trans-unit id="7a60d1acaad6e279a7e85ba440a4702e817dfa62" translate="yes" xml:space="preserve">
          <source>Migrating data between third-party apps</source>
          <target state="translated">타사 앱 간 데이터 마이그레이션</target>
        </trans-unit>
        <trans-unit id="6104f9f7c588f7a77e0522afbc5dfe496325f1fa" translate="yes" xml:space="preserve">
          <source>Migration Operations</source>
          <target state="translated">마이그레이션 작업</target>
        </trans-unit>
        <trans-unit id="8e03381bda29b3c39bbf1a66cfd648f8b31e67c1" translate="yes" xml:space="preserve">
          <source>Migration files</source>
          <target state="translated">마이그레이션 파일</target>
        </trans-unit>
        <trans-unit id="53ff3d249382d25863d2b7fb6623728e99a7bc35" translate="yes" xml:space="preserve">
          <source>Migration files are composed of one or more &lt;code&gt;Operation&lt;/code&gt;s, objects that declaratively record what the migration should do to your database.</source>
          <target state="translated">마이그레이션 파일은 데이터베이스에 대한 마이그레이션 작업을 선언적으로 기록하는 객체 인 하나 이상의 &lt;code&gt;Operation&lt;/code&gt; 으로 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="c25bf8db0829f899a4a501088ef01329564b4b8f" translate="yes" xml:space="preserve">
          <source>Migration guide</source>
          <target state="translated">마이그레이션 안내서</target>
        </trans-unit>
        <trans-unit id="7e2da04ce43cf92a7b18834d64966f83c65ad531" translate="yes" xml:space="preserve">
          <source>Migration operation for adding extensions</source>
          <target state="translated">확장 추가를위한 마이그레이션 작업</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="f2a9aa05174d5ea271caefdf9a694cb35808cba9" translate="yes" xml:space="preserve">
          <source>Migrations are Django&amp;rsquo;s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They&amp;rsquo;re designed to be mostly automatic, but you&amp;rsquo;ll need to know when to make migrations, when to run them, and the common problems you might run into.</source>
          <target state="translated">마이그레이션은 Django에서 모델 변경 사항을 필드 스키마 추가, 모델 삭제 등의 데이터베이스 스키마에 전파하는 방법입니다. 그것들은 대부분 자동으로 설계되었지만, 마이그레이션을 수행 할시기, 실행시기 및 발생할 수있는 일반적인 문제를 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="5860dbdc436c899604f2a6b5c077a545ec4c3e15" translate="yes" xml:space="preserve">
          <source>Migrations are Python files containing the old definitions of your models - thus, to write them, Django must take the current state of your models and serialize them out into a file.</source>
          <target state="translated">마이그레이션은 모델의 이전 정의를 포함하는 Python 파일입니다. 따라서 Django는 모델을 작성하려면 모델의 현재 상태를 가져와 파일로 직렬화해야합니다.</target>
        </trans-unit>
        <trans-unit id="4201b97e35b606bb8ab03e0bf508dc53754b71ae" translate="yes" xml:space="preserve">
          <source>Migrations are how Django stores changes to your models (and thus your database schema) - they&amp;rsquo;re files on disk. You can read the migration for your new model if you like; it&amp;rsquo;s the file &lt;code&gt;polls/migrations/0001_initial.py&lt;/code&gt;. Don&amp;rsquo;t worry, you&amp;rsquo;re not expected to read them every time Django makes one, but they&amp;rsquo;re designed to be human-editable in case you want to manually tweak how Django changes things.</source>
          <target state="translated">마이그레이션은 Django가 모델 (및 데이터베이스 스키마)의 변경 사항을 디스크에 저장하는 방법입니다. 원하는 경우 새 모델의 마이그레이션을 읽을 수 있습니다. &lt;code&gt;polls/migrations/0001_initial.py&lt;/code&gt; 파일 입니다. Django가 만들 때마다 읽을 필요는 없지만 Django가 변경하는 방법을 수동으로 조정하려는 경우 인간이 편집 할 수 있도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="8520b8c8572a999f56ebaca25b392b1e5a7fd768" translate="yes" xml:space="preserve">
          <source>Migrations are stored as an on-disk format, referred to here as &amp;ldquo;migration files&amp;rdquo;. These files are actually normal Python files with an agreed-upon object layout, written in a declarative style.</source>
          <target state="translated">마이그레이션은 여기에서 &quot;마이그레이션 파일&quot;이라고하는 온 디스크 형식으로 저장됩니다. 이 파일들은 실제로 선언적인 스타일로 작성된 합의 된 객체 레이아웃을 가진 일반적인 파이썬 파일입니다.</target>
        </trans-unit>
        <trans-unit id="2a332c317bf1d0e60fbc32123e8677f7cc70c2ae" translate="yes" xml:space="preserve">
          <source>Migrations are supported on all backends that Django ships with, as well as any third-party backends if they have programmed in support for schema alteration (done via the &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt; class).</source>
          <target state="translated">Django와 함께 제공되는 모든 백엔드 및 스키마 변경을 지원하도록 프로그래밍 된 타사 백엔드 ( &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt; 클래스 를 통해 수행)에서 마이그레이션이 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="d8a210ab1a3d79accd51ed6fcf26ac6e586f421a" translate="yes" xml:space="preserve">
          <source>Migrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. We&amp;rsquo;ll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:</source>
          <target state="translated">마이그레이션은 매우 강력하며 데이터베이스 나 테이블을 삭제하거나 새로 만들 필요없이 프로젝트를 개발할 때 시간이 지남에 따라 모델을 변경할 수 있습니다. 데이터 손실없이 데이터베이스를 실시간으로 업그레이드하는 데 특화되어 있습니다. 이 튜토리얼의 뒷부분에서 더 자세히 다룰 것이지만 지금은 모델 변경을위한 3 단계 안내서를 기억하십시오.</target>
        </trans-unit>
        <trans-unit id="41654abea0665f9a7a61031904f82652ca108fd1" translate="yes" xml:space="preserve">
          <source>Migrations can be reversed with &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; by passing the number of the previous migration. For example, to reverse migration &lt;code&gt;books.0003&lt;/code&gt;:</source>
          <target state="translated">이전 마이그레이션 번호를 전달하여 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 을 통해 마이그레이션 을 되돌릴 수 있습니다 . 예를 들어 이주 &lt;code&gt;books.0003&lt;/code&gt; 을 역방향으로 하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="287dd3417d62ad864c57a1c97b22ab37b12724d5" translate="yes" xml:space="preserve">
          <source>Migrations that add unique fields</source>
          <target state="translated">고유 필드를 추가하는 마이그레이션</target>
        </trans-unit>
        <trans-unit id="ee3e9d3540e1e45a2df1c00240d8e8d4a4deb51c" translate="yes" xml:space="preserve">
          <source>Migrations that alter data are usually called &amp;ldquo;data migrations&amp;rdquo;; they&amp;rsquo;re best written as separate migrations, sitting alongside your schema migrations.</source>
          <target state="translated">데이터를 변경하는 마이그레이션을 일반적으로 &quot;데이터 마이그레이션&quot;이라고합니다. 스키마 마이그레이션과 함께 별도의 마이그레이션으로 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5ec5bf73e34a683f1006273ac17e9ff09e9d9e72" translate="yes" xml:space="preserve">
          <source>Migrations will run the same way on the same dataset and produce consistent results, meaning that what you see in development and staging is, under the same circumstances, exactly what will happen in production.</source>
          <target state="translated">마이그레이션은 동일한 데이터 세트에서 동일한 방식으로 실행되며 일관된 결과를 생성합니다. 즉, 개발 및 스테이징에서 볼 수있는 것은 동일한 환경에서 프로덕션에서 발생하는 것과 정확히 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2eb4f2a30749a0e17e31104b3bab726aafe81cf3" translate="yes" xml:space="preserve">
          <source>Mile</source>
          <target state="translated">Mile</target>
        </trans-unit>
        <trans-unit id="938df1db624a12e5f3794fda79717eccaea7b65b" translate="yes" xml:space="preserve">
          <source>Millimetre, Millimeter</source>
          <target state="translated">밀리미터, 밀리미터</target>
        </trans-unit>
        <trans-unit id="294882601354ee55d0273a6e0801814fd33c87c2" translate="yes" xml:space="preserve">
          <source>Mind your charset</source>
          <target state="translated">당신의 캐릭터 세트를 염두에 두십시오</target>
        </trans-unit>
        <trans-unit id="a3fc900f874bc71a36d5a756225bfdc1f04f6842" translate="yes" xml:space="preserve">
          <source>Minutes is the smallest unit used, and &amp;ldquo;0 minutes&amp;rdquo; will be returned for any date that is in the future relative to the comparison point.</source>
          <target state="translated">분은 사용 된 가장 작은 단위이며, 비교 지점과 관련하여 향후 날짜에 대해 &quot;0 분&quot;이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="9f34801db80740b6f10ab3922d189b3912dbf6f0" translate="yes" xml:space="preserve">
          <source>Minutes is the smallest unit used, and &amp;ldquo;0 minutes&amp;rdquo; will be returned for any date that is in the past relative to the comparison point.</source>
          <target state="translated">분은 사용 된 가장 작은 단위이며, 비교 지점과 관련하여 과거의 날짜에 대해서는 &quot;0 분&quot;이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8ed20376662d49d565aa06cdaa83fc71ecbc93eb" translate="yes" xml:space="preserve">
          <source>Minutes.</source>
          <target state="translated">Minutes.</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="881da705478e54a3227ce93b7e1330829ae0e155" translate="yes" xml:space="preserve">
          <source>Missing context variables are logged as &lt;code&gt;DEBUG&lt;/code&gt; messages.</source>
          <target state="translated">누락 된 컨텍스트 변수는 &lt;code&gt;DEBUG&lt;/code&gt; 메시지 로 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="6814e874673f049fff670e46ee2d5ebe0602c10a" translate="yes" xml:space="preserve">
          <source>Mitre ratio limit (&lt;code&gt;mitre_limit&lt;/code&gt;) only affects mitered join style.</source>
          <target state="translated">연귀 비율 제한 ( &lt;code&gt;mitre_limit&lt;/code&gt; )은 연귀 조인 스타일에만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="dcb555521dabc0a453c76cc4ab7c56dcedf3418e" translate="yes" xml:space="preserve">
          <source>Mixing HTTP and HTTPS on the same site is discouraged, therefore &lt;a href=&quot;#django.http.HttpRequest.build_absolute_uri&quot;&gt;&lt;code&gt;build_absolute_uri()&lt;/code&gt;&lt;/a&gt; will always generate an absolute URI with the same scheme the current request has. If you need to redirect users to HTTPS, it&amp;rsquo;s best to let your Web server redirect all HTTP traffic to HTTPS.</source>
          <target state="translated">동일한 사이트에서 HTTP와 HTTPS를 혼합하지 않는 것이 좋습니다. 따라서 &lt;a href=&quot;#django.http.HttpRequest.build_absolute_uri&quot;&gt; &lt;code&gt;build_absolute_uri()&lt;/code&gt; &lt;/a&gt; 는 항상 현재 요청과 동일한 체계로 절대 URI를 생성합니다. 사용자를 HTTPS로 리디렉션해야하는 경우 웹 서버가 모든 HTTP 트래픽을 HTTPS로 리디렉션하도록하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6405571c37c55f3908e016d6f0d1bc7dd1ad7b90" translate="yes" xml:space="preserve">
          <source>Mixins are a form of multiple inheritance where behaviors and attributes of multiple parent classes can be combined.</source>
          <target state="translated">믹스 인은 여러 상위 클래스의 동작과 속성을 결합 할 수있는 다중 상속 형태입니다.</target>
        </trans-unit>
        <trans-unit id="7faff22844ff4aa0e265d825accaee88c80b838d" translate="yes" xml:space="preserve">
          <source>Mixins are an excellent way of reusing code across multiple classes, but they come with some cost. The more your code is scattered among mixins, the harder it will be to read a child class and know what exactly it is doing, and the harder it will be to know which methods from which mixins to override if you are subclassing something that has a deep inheritance tree.</source>
          <target state="translated">믹스 인은 여러 클래스에서 코드를 재사용하는 훌륭한 방법이지만 비용이 많이 듭니다. 코드가 믹스 인에 흩어져있을수록 자식 클래스를 읽고 정확히 무엇을하고 있는지 알기가 어려워지고, 믹스 인이 깊은 상속 트리.</target>
        </trans-unit>
        <trans-unit id="8b491ee73979a719bb1af9d3247e0a61ac5e7319" translate="yes" xml:space="preserve">
          <source>Model &lt;code&gt;Meta&lt;/code&gt; options</source>
          <target state="translated">모델 &lt;code&gt;Meta&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="bfdb5bfd735f8228097410fff85a12d88904e922" translate="yes" xml:space="preserve">
          <source>Model &lt;code&gt;_meta&lt;/code&gt; API</source>
          <target state="translated">모델 &lt;code&gt;_meta&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="cec2b6199d9a2dcabb152e3ac5aa91edeb898132" translate="yes" xml:space="preserve">
          <source>Model API reference. For introductory material, see &lt;a href=&quot;../../topics/db/models&quot;&gt;Models&lt;/a&gt;.</source>
          <target state="translated">모델 API 참조. 소개 자료는 &lt;a href=&quot;../../topics/db/models&quot;&gt;모델을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9bf86752979128e4676b84c447ce0cf15b2b37d6" translate="yes" xml:space="preserve">
          <source>Model Form API reference. For introductory material about model forms, see the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;Creating forms from models&lt;/a&gt; topic guide.</source>
          <target state="translated">모델 양식 API 참조. 모델 양식에 대한 소개 자료는 모델에서 양식 &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;작성&lt;/a&gt; 주제 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c96d990f2ccf84f92cf27b02cad319aaaf78f8b" translate="yes" xml:space="preserve">
          <source>Model Form Functions</source>
          <target state="translated">모델 폼 함수</target>
        </trans-unit>
        <trans-unit id="43751733528e91e6a81ee1390944c2f4caa1db81" translate="yes" xml:space="preserve">
          <source>Model Meta options</source>
          <target state="translated">모델 메타 옵션</target>
        </trans-unit>
        <trans-unit id="cda29083574ba4f14bce85088566ec29f2d87d35" translate="yes" xml:space="preserve">
          <source>Model _meta API</source>
          <target state="translated">모델 _meta API</target>
        </trans-unit>
        <trans-unit id="28ca529d99e4855dd276594af7db79215340645f" translate="yes" xml:space="preserve">
          <source>Model attributes</source>
          <target state="translated">모델 속성</target>
        </trans-unit>
        <trans-unit id="15ac726910ce828d6f749b66392ad113e9e02cc8" translate="yes" xml:space="preserve">
          <source>Model class reference</source>
          <target state="translated">모델 클래스 참조</target>
        </trans-unit>
        <trans-unit id="37287d65959cefe51226e772fa03bd4238e3e0c1" translate="yes" xml:space="preserve">
          <source>Model field</source>
          <target state="translated">모델 필드</target>
        </trans-unit>
        <trans-unit id="41719e961e289e645a51ec9bdd2cad757b697d54" translate="yes" xml:space="preserve">
          <source>Model field reference</source>
          <target state="translated">모델 필드 참조</target>
        </trans-unit>
        <trans-unit id="695921f5cbf66d3a0c35cce9afebbff6926a0687" translate="yes" xml:space="preserve">
          <source>Model fields</source>
          <target state="translated">모델 필드</target>
        </trans-unit>
        <trans-unit id="d56e51d2d60a86a3949592b2c8a12b4b1ebf5d14" translate="yes" xml:space="preserve">
          <source>Model fields and relationships &lt;code&gt;verbose_name&lt;/code&gt; and &lt;code&gt;help_text&lt;/code&gt; option values</source>
          <target state="translated">모델 필드 및 관계 &lt;code&gt;verbose_name&lt;/code&gt; 및 &lt;code&gt;help_text&lt;/code&gt; 옵션 값</target>
        </trans-unit>
        <trans-unit id="1e80f8624b932b0e8e91e5056ff5d83c4a905b6b" translate="yes" xml:space="preserve">
          <source>Model form views provide a &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; implementation that saves the model automatically. You can override this if you have any special requirements; see below for examples.</source>
          <target state="translated">모델 폼 뷰 는 모델을 자동으로 저장 하는 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt; &lt;code&gt;form_valid()&lt;/code&gt; &lt;/a&gt; 구현을 제공합니다 . 특별한 요구 사항이있는 경우이를 대체 할 수 있습니다. 예는 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7a1d7da0b3927cb03dafa5eee91a571920018939" translate="yes" xml:space="preserve">
          <source>Model forms</source>
          <target state="translated">모델 형태</target>
        </trans-unit>
        <trans-unit id="d66e24ec33a2b3c68df3f08c48b5b1e196b500a3" translate="yes" xml:space="preserve">
          <source>Model formsets</source>
          <target state="translated">모델 폼셋</target>
        </trans-unit>
        <trans-unit id="8378c1c9f92338fe290a10e3674d26e5ac280291" translate="yes" xml:space="preserve">
          <source>Model formsets are very similar to formsets. Let&amp;rsquo;s say we want to present a formset to edit &lt;code&gt;Author&lt;/code&gt; model instances:</source>
          <target state="translated">모델 폼셋은 폼셋과 매우 유사합니다. &lt;code&gt;Author&lt;/code&gt; 모델 인스턴스 를 편집하기 위해 양식 세트를 제시한다고 가정 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="65c8939e1430f30633a07f17d075ed74776ac5e3" translate="yes" xml:space="preserve">
          <source>Model formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling &lt;code&gt;save()&lt;/code&gt;, an &lt;code&gt;IntegrityError&lt;/code&gt; will be raised.</source>
          <target state="translated">모델 폼셋은 대소 문자를 구분하여 고유 필드의 유효성을 검사합니다. 따라서, 대소 문자 구별 정렬 검증을 통과 할 경우 만 다른 필드의 고유 값으로의 formset를 사용하지만, 호출시에 &lt;code&gt;save()&lt;/code&gt; , &lt;code&gt;IntegrityError&lt;/code&gt; 가 발생한다.</target>
        </trans-unit>
        <trans-unit id="dd41371e5246330c123f4f022d722358234894fa" translate="yes" xml:space="preserve">
          <source>Model index reference</source>
          <target state="translated">모델 인덱스 참조</target>
        </trans-unit>
        <trans-unit id="6960b6acac76077e50017099fe2ef244227d2a7b" translate="yes" xml:space="preserve">
          <source>Model inheritance</source>
          <target state="translated">모델 상속</target>
        </trans-unit>
        <trans-unit id="5b71c0d1a57d50595ab71717a70ae2e080828c49" translate="yes" xml:space="preserve">
          <source>Model inheritance in Django works almost identically to the way normal class inheritance works in Python, but the basics at the beginning of the page should still be followed. That means the base class should subclass &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django의 모델 상속은 파이썬에서 일반 클래스 상속이 작동하는 방식과 거의 동일하게 작동하지만 페이지 시작 부분의 기본 사항은 여전히 ​​따라야합니다. 이는 기본 클래스가 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt; 을 서브 클래스해야 함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="5ca38e74d8be1b734a75b8de59f840b8eac71446" translate="yes" xml:space="preserve">
          <source>Model instance reference</source>
          <target state="translated">모델 인스턴스 참조</target>
        </trans-unit>
        <trans-unit id="5b0f552413c0fc0955ae8f0d43a9dce0382f6758" translate="yes" xml:space="preserve">
          <source>Model managers</source>
          <target state="translated">모델 관리자</target>
        </trans-unit>
        <trans-unit id="ee0c8a95a9f103b378fe4743340f1323f96c496a" translate="yes" xml:space="preserve">
          <source>Model managers are inherited from abstract base classes. Overriding an inherited field which is referenced by an inherited &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; may cause subtle bugs. See &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;custom managers and model inheritance&lt;/a&gt;.</source>
          <target state="translated">모델 관리자는 추상 기본 클래스에서 상속됩니다. 상속 된 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 가 참조하는 상속 된 필드를 재정의 하면 미묘한 버그가 발생할 수 있습니다. &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;사용자 정의 관리자 및 모델 상속을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7ef284a8b1cde33fda80d5b952f2b5d4500f805" translate="yes" xml:space="preserve">
          <source>Model metadata is &amp;ldquo;anything that&amp;rsquo;s not a field&amp;rdquo;, such as ordering options (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt;), database table name (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt;), or human-readable singular and plural names (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt;&lt;code&gt;verbose_name_plural&lt;/code&gt;&lt;/a&gt;). None are required, and adding &lt;code&gt;class
Meta&lt;/code&gt; to a model is completely optional.</source>
          <target state="translated">모델 메타 데이터는 주문 옵션 ( &lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt; ), 데이터베이스 테이블 이름 ( &lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt; ) 또는 사람이 읽을 수있는 단수 및 복수 이름 ( &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt; &lt;code&gt;verbose_name_plural&lt;/code&gt; &lt;/a&gt; ) 과 같은&amp;ldquo;필드가 아닌 것&amp;rdquo; 입니다. 필요하지 않으며 모델에 &lt;code&gt;class Meta&lt;/code&gt; 를 추가 하는 것은 완전히 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="da0c31f079fa44ab9d3bf1cf67f70d075de29d6d" translate="yes" xml:space="preserve">
          <source>Model methods</source>
          <target state="translated">모델 방법</target>
        </trans-unit>
        <trans-unit id="e21aa040365d9fd0e90458c9cdf44ab96ac4b61f" translate="yes" xml:space="preserve">
          <source>Model methods &lt;code&gt;short_description&lt;/code&gt; attribute values</source>
          <target state="translated">모델 메소드 &lt;code&gt;short_description&lt;/code&gt; 속성 값</target>
        </trans-unit>
        <trans-unit id="cfc2c1b4808a8c6c174bac6b735cf6d4817b2770" translate="yes" xml:space="preserve">
          <source>Model reference</source>
          <target state="translated">모델 참조</target>
        </trans-unit>
        <trans-unit id="e901998535b4b4548a823fe6e8dff9a51d7e087d" translate="yes" xml:space="preserve">
          <source>Model signals</source>
          <target state="translated">모델 신호</target>
        </trans-unit>
        <trans-unit id="c8bfdb89301aaa9bc29391e7c013fd0445caa5ab" translate="yes" xml:space="preserve">
          <source>Model signals &lt;code&gt;sender&lt;/code&gt; model can be lazily referenced when connecting a receiver by specifying its full application label. For example, an &lt;code&gt;Question&lt;/code&gt; model defined in the &lt;code&gt;polls&lt;/code&gt; application could be referenced as &lt;code&gt;'polls.Question'&lt;/code&gt;. This sort of reference can be quite handy when dealing with circular import dependencies and swappable models.</source>
          <target state="translated">전체 애플리케이션 레이블을 지정하여 수신기를 연결할 때 모델 신호 &lt;code&gt;sender&lt;/code&gt; 모델을 느리게 참조 할 수 있습니다. 예를 들어, &lt;code&gt;polls&lt;/code&gt; 애플리케이션에 정의 된 &lt;code&gt;Question&lt;/code&gt; 모델 은 &lt;code&gt;'polls.Question'&lt;/code&gt; 으로 참조 될 수 있습니다 . 이러한 종류의 참조는 순환 가져 오기 종속성 및 교체 가능한 모델을 처리 할 때 매우 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="165513e8bf709c70b23fa24d2ae33a838ec202dc" translate="yes" xml:space="preserve">
          <source>Model table names</source>
          <target state="translated">모델 테이블 이름</target>
        </trans-unit>
        <trans-unit id="54a980d3853518b4411e7a3b2ddb629ed67ce75d" translate="yes" xml:space="preserve">
          <source>Model verbose names values</source>
          <target state="translated">모델 상세 이름 값</target>
        </trans-unit>
        <trans-unit id="3dc8c7b4713b18469124c44661e6c1bc2f64d7e7" translate="yes" xml:space="preserve">
          <source>ModelForm factory function</source>
          <target state="translated">ModelForm 팩토리 기능</target>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="1f5b77557908456acc92fa188a7dd4804d6625a9" translate="yes" xml:space="preserve">
          <source>Models across files</source>
          <target state="translated">파일 간 모델</target>
        </trans-unit>
        <trans-unit id="28356323a61c86746a499dd28b297834e5993733" translate="yes" xml:space="preserve">
          <source>Models and &lt;code&gt;request.user&lt;/code&gt;</source>
          <target state="translated">모델 및 &lt;code&gt;request.user&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f50e5bec2539d667d25b642e592d0b97dcede69d" translate="yes" xml:space="preserve">
          <source>Models and Forms</source>
          <target state="translated">모델과 형태</target>
        </trans-unit>
        <trans-unit id="4a49aecaa0df41bb8d712681740aeb1f36c1fc1b" translate="yes" xml:space="preserve">
          <source>Models and databases</source>
          <target state="translated">모델과 데이터베이스</target>
        </trans-unit>
        <trans-unit id="f9d52954ae89d4a9e2174f5b96bd02ccd7c226bb" translate="yes" xml:space="preserve">
          <source>Models are created for foreign tables.</source>
          <target state="translated">외부 테이블에 대한 모델이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="005e6f010a367db7b6295c852fb0fac610e1e07a" translate="yes" xml:space="preserve">
          <source>Models are created for materialized views if &lt;a href=&quot;#cmdoption-inspectdb-include-views&quot;&gt;&lt;code&gt;--include-views&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;#cmdoption-inspectdb-include-views&quot;&gt; &lt;code&gt;--include-views&lt;/code&gt; &lt;/a&gt; 를 사용 하면 구체화 된 뷰에 대한 모델이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="71b4110d21468008c8e0a0e33f9599a8d37cfc02" translate="yes" xml:space="preserve">
          <source>Models are created for partition tables if &lt;a href=&quot;#cmdoption-inspectdb-include-partitions&quot;&gt;&lt;code&gt;--include-partitions&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;#cmdoption-inspectdb-include-partitions&quot;&gt; &lt;code&gt;--include-partitions&lt;/code&gt; &lt;/a&gt; 가 사용되는 경우 파티션 테이블에 대한 모델이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="de1c8f41efbb309a8f500003679e08088e02a2b4" translate="yes" xml:space="preserve">
          <source>Modern browsers don&amp;rsquo;t honor &lt;code&gt;X-XSS-Protection&lt;/code&gt; HTTP header anymore. Although the setting offers little practical benefit, you may still want to set the header if you support older browsers.</source>
          <target state="translated">최신 브라우저는 더 이상 &lt;code&gt;X-XSS-Protection&lt;/code&gt; HTTP 헤더를 존중하지 않습니다 . 이 설정은 실질적인 이점을 거의 제공하지 않지만 이전 브라우저를 지원하는 경우 여전히 헤더를 설정하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3034007e7d3292d4b30af33ea10b4ff6560349a" translate="yes" xml:space="preserve">
          <source>Modern browsers honor the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;X-Frame-Options&lt;/a&gt; HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of &lt;code&gt;SAMEORIGIN&lt;/code&gt; then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to &lt;code&gt;DENY&lt;/code&gt; then the browser will block the resource from loading in a frame no matter which site made the request.</source>
          <target state="translated">최신 브라우저 는 리소스를 프레임 또는 iframe 내에서로드 할 수 있는지 여부를 나타내는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;X-Frame-Options&lt;/a&gt; HTTP 헤더를 사용합니다. 응답에 &lt;code&gt;SAMEORIGIN&lt;/code&gt; 값의 헤더가 포함 된 경우 요청이 동일한 사이트에서 시작된 경우 브라우저는 프레임의 리소스 만로드합니다. 헤더가 &lt;code&gt;DENY&lt;/code&gt; 로 설정 되면 브라우저는 요청한 사이트에 관계없이 프레임에 리소스가로드되지 않도록 차단합니다.</target>
        </trans-unit>
        <trans-unit id="8c3dd67323c825d3247a42c118aeed74da038214" translate="yes" xml:space="preserve">
          <source>Modern browsers provide a more secure default policy for the &lt;code&gt;SameSite&lt;/code&gt; flag and will assume &lt;code&gt;Lax&lt;/code&gt; for cookies without an explicit value set.</source>
          <target state="translated">최신 브라우저는 &lt;code&gt;SameSite&lt;/code&gt; 플래그에 대해 더 안전한 기본 정책을 제공하며 명시적인 값이 설정되지 않은 쿠키에 대해 &lt;code&gt;Lax&lt;/code&gt; 를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="61e67113000137e6e326a81f0fcb1e0dadbbee68" translate="yes" xml:space="preserve">
          <source>Modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list &lt;code&gt;Argon2PasswordHasher&lt;/code&gt; first. That is, in your settings file, you&amp;rsquo;d put:</source>
          <target state="translated">&lt;code&gt;Argon2PasswordHasher&lt;/code&gt; 를 먼저 나열 하도록 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt; 를 수정 하십시오 . 즉, 설정 파일에서 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="7eae86d823b9275ab9b9bba0c0701ec36c9bc076" translate="yes" xml:space="preserve">
          <source>Modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list &lt;code&gt;BCryptSHA256PasswordHasher&lt;/code&gt; first. That is, in your settings file, you&amp;rsquo;d put:</source>
          <target state="translated">&lt;code&gt;BCryptSHA256PasswordHasher&lt;/code&gt; 를 먼저 나열 하도록 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt; 를 수정 하십시오 . 즉, 설정 파일에서 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="8c82d310179969bace38749c982ea817a33948da" translate="yes" xml:space="preserve">
          <source>Modify Windows environment</source>
          <target state="translated">Windows 환경 수정</target>
        </trans-unit>
        <trans-unit id="101a18a8e247790ce8a0355c2bad81d18bc06a10" translate="yes" xml:space="preserve">
          <source>Modifying a manager&amp;rsquo;s initial &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">관리자의 초기 &lt;code&gt;QuerySet&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="b3a3cd384e10d2a50b6cfc40c58749ddd9ddb377" translate="yes" xml:space="preserve">
          <source>Modifying the user libraries can affect other Python software on your system.</source>
          <target state="translated">사용자 라이브러리를 수정하면 시스템의 다른 Python 소프트웨어에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6188e9bec1a9bf83d8f692aed7153e3b5e7d1f67" translate="yes" xml:space="preserve">
          <source>Modifying upload handlers on the fly</source>
          <target state="translated">즉시 업로드 처리기 수정</target>
        </trans-unit>
        <trans-unit id="79bf8ae756f6957bd6a600e041cf7b0f01e97d7c" translate="yes" xml:space="preserve">
          <source>Module containing the models, e.g. &lt;code&gt;&amp;lt;module 'django.contrib.admin.models'
from 'django/contrib/admin/models.py'&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">모델을 포함하는 모듈 (예 : &lt;code&gt;&amp;lt;module 'django.contrib.admin.models' from 'django/contrib/admin/models.py'&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5914d9d522831d2cbcc08992929a1fa0fffd13f4" translate="yes" xml:space="preserve">
          <source>Month abbreviation in Associated Press style. Proprietary extension.</source>
          <target state="translated">AP 통신 스타일의 월 약어. 독점 연장.</target>
        </trans-unit>
        <trans-unit id="1547c51f374801edb89bd01a886d7df6c59157e7" translate="yes" xml:space="preserve">
          <source>Month without leading zeros.</source>
          <target state="translated">선행 0이없는 월.</target>
        </trans-unit>
        <trans-unit id="789db7de9daf4c3dea26155c4de1508cc63c78dc" translate="yes" xml:space="preserve">
          <source>Month, 2 digits with leading zeros.</source>
          <target state="translated">월, 앞에 0이있는 2 자리 숫자.</target>
        </trans-unit>
        <trans-unit id="6268ce268f58c92a8b8c465bb7039eb42da0b88e" translate="yes" xml:space="preserve">
          <source>Month, locale specific alternative representation usually used for long date representation.</source>
          <target state="translated">월, 로케일 특정 대체 표현은 일반적으로 긴 날짜 표현에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="68b6759ae7ec52517f6707eab3f49676fded852c" translate="yes" xml:space="preserve">
          <source>Month, textual, 3 letters, lowercase.</source>
          <target state="translated">월, 문자, 3 글자, 소문자</target>
        </trans-unit>
        <trans-unit id="54acf667cda1d25c557e72b3eecaf3a5e654244a" translate="yes" xml:space="preserve">
          <source>Month, textual, 3 letters.</source>
          <target state="translated">월, 문자, 3 글자.</target>
        </trans-unit>
        <trans-unit id="55f3a466c30a6f138ee4b6107c9f1297f5a1c83b" translate="yes" xml:space="preserve">
          <source>Month, textual, long.</source>
          <target state="translated">월, 텍스트, 긴.</target>
        </trans-unit>
        <trans-unit id="d8582964d85a742a683053ee36dbed4b0d9acc91" translate="yes" xml:space="preserve">
          <source>Month-based archive page &amp;ndash; displays all days with entries in the given month.</source>
          <target state="translated">월별 아카이브 페이지 &amp;ndash; 주어진 달에 항목이있는 모든 요일을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8e07c73ff2257408bd49d184644b99ce9d8ef611" translate="yes" xml:space="preserve">
          <source>More &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;{% block %}&lt;/code&gt;&lt;/a&gt; tags in your base templates are better. Remember, child templates don&amp;rsquo;t have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It&amp;rsquo;s better to have more hooks than fewer hooks.</source>
          <target state="translated">기본 템플릿에 더 많은 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;{% block %}&lt;/code&gt; &lt;/a&gt; 태그가 더 좋습니다. 자식 템플릿은 모든 부모 블록을 정의 할 필요가 없으므로 여러 블록에서 합리적인 기본값을 채운 다음 나중에 필요한 블록 만 정의 할 수 있습니다. 더 적은 후크보다 더 많은 후크를 갖는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="299848f148ba8e572159f4587392af118a784da7" translate="yes" xml:space="preserve">
          <source>More about Django &lt;code&gt;Form&lt;/code&gt; classes</source>
          <target state="translated">Django &lt;code&gt;Form&lt;/code&gt; 수업 에 대한 추가 정보</target>
        </trans-unit>
        <trans-unit id="a0d0d1d2ad55a7e08bc82e9ce7118b05835d686b" translate="yes" xml:space="preserve">
          <source>More about Django Form classes</source>
          <target state="translated">Django Form 수업에 대한 추가 정보</target>
        </trans-unit>
        <trans-unit id="b989fb93fc290d806e1beba975983651f8aa1602" translate="yes" xml:space="preserve">
          <source>More advanced migrations</source>
          <target state="translated">보다 고급 마이그레이션</target>
        </trans-unit>
        <trans-unit id="b2e3edf8aaff223f7c4bc82400f24d060ba670ce" translate="yes" xml:space="preserve">
          <source>More attractive automatically-generated admin features &amp;ndash; this overview barely scratched the surface.</source>
          <target state="translated">보다 매력적인 자동 생성 관리 기능 &amp;ndash;이 개요는 표면을 거의 긁지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8c923753c18be61c1004c12ca3fade2d08722915" translate="yes" xml:space="preserve">
          <source>More complex examples are beyond the scope of this document, but remember - for any configuration of your Field instance, &lt;code&gt;deconstruct()&lt;/code&gt; must return arguments that you can pass to &lt;code&gt;__init__&lt;/code&gt; to reconstruct that state.</source>
          <target state="translated">더 복잡한 예제는이 문서의 범위를 벗어나지 만 Field 인스턴스를 구성 할 때 &lt;code&gt;deconstruct()&lt;/code&gt; 는 &lt;code&gt;__init__&lt;/code&gt; 에 전달하여 해당 상태를 재구성 할 수있는 인수를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="db010a93e37a57c66656081acb50090017c4ab0d" translate="yes" xml:space="preserve">
          <source>More comprehensive tests</source>
          <target state="translated">보다 포괄적 인 테스트</target>
        </trans-unit>
        <trans-unit id="58c8313dae352f6c86d7bd1fe65b2e1089885088" translate="yes" xml:space="preserve">
          <source>More details are in &lt;a href=&quot;../i18n/translation#explicitly-setting-the-active-language&quot;&gt;Explicitly setting the active language&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../i18n/translation#explicitly-setting-the-active-language&quot;&gt;활성 언어 명시 적 설정에 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1b1a82e1043266d553c6d8ba1b0f6a2fd3e63754" translate="yes" xml:space="preserve">
          <source>More details are in &lt;a href=&quot;../i18n/translation#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../i18n/translation#how-django-discovers-language-preference&quot;&gt;Django가 언어 기본 설정을 검색하는 방법에 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0a7b4df20dd480c377a581def56226b3c32ecde3" translate="yes" xml:space="preserve">
          <source>More details can be found in the &lt;a href=&quot;https://www.w3.org/International/questions/qa-i18n&quot;&gt;W3C Web Internationalization FAQ&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;Wikipedia article&lt;/a&gt; or the &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Concepts&quot;&gt;GNU gettext documentation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.w3.org/International/questions/qa-i18n&quot;&gt;W3C 웹 국제화 FAQ&lt;/a&gt; , &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;Wikipedia 기사&lt;/a&gt; 또는 &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Concepts&quot;&gt;GNU gettext 설명서를 &lt;/a&gt;참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ad47279afb909f9e5e8501ff7c41001131170ec" translate="yes" xml:space="preserve">
          <source>More examples of generic views are available in some third party applications, or you could write your own as needed.</source>
          <target state="translated">일부 타사 응용 프로그램에서 일반보기에 대한 추가 예를 사용하거나 필요에 따라 직접 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="525622173583779827304cfa800b3d1dfee99b4c" translate="yes" xml:space="preserve">
          <source>More granular output</source>
          <target state="translated">더 세분화 된 출력</target>
        </trans-unit>
        <trans-unit id="f063c4c87e9bae1816af9e601f0d358edd44ea7d" translate="yes" xml:space="preserve">
          <source>More information for new contributors</source>
          <target state="translated">새로운 기고자를위한 추가 정보</target>
        </trans-unit>
        <trans-unit id="2d8f6e8eec977860d6662bb5520eba03e159160c" translate="yes" xml:space="preserve">
          <source>More often, a newcomer to testing will create some code and later decide that it should have some tests. Perhaps it would have been better to write some tests earlier, but it&amp;rsquo;s never too late to get started.</source>
          <target state="translated">테스트를 처음 접하는 사람들은 종종 코드를 생성하고 나중에 테스트를 수행하기로 결정합니다. 아마도 일부 테스트를 더 일찍 작성하는 것이 좋았지 만 시작하기에는 결코 늦지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="2618cd8952a806ae4124de24ab64990b2f4af767" translate="yes" xml:space="preserve">
          <source>More on fields</source>
          <target state="translated">필드에 대한 추가 정보</target>
        </trans-unit>
        <trans-unit id="5bc01b6e00a77dc61a0069c6788d0ed249454de6" translate="yes" xml:space="preserve">
          <source>More than just HTML</source>
          <target state="translated">단순한 HTML 이상</target>
        </trans-unit>
        <trans-unit id="270b6239e60a5ebd66ab15c63878e1d3222c33cc" translate="yes" xml:space="preserve">
          <source>More than one foreign key to the same model</source>
          <target state="translated">동일한 모델에 대한 둘 이상의 외래 키</target>
        </trans-unit>
        <trans-unit id="2586d441d16010e8412e11c6de8265bc1c1e557f" translate="yes" xml:space="preserve">
          <source>Moreover, arithmetic operations may be performed between the distance objects:</source>
          <target state="translated">또한 거리 객체간에 산술 연산을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b1fa3471d34f0d234ba4558b474a601a8cc898d" translate="yes" xml:space="preserve">
          <source>Moreover, if the &lt;code&gt;GEOSGeometry&lt;/code&gt; is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model&amp;rsquo;s field, using the spatial database&amp;rsquo;s transform procedure:</source>
          <target state="translated">또한 &lt;code&gt;GEOSGeometry&lt;/code&gt; 가 필드와 다른 좌표계 (서로 다른 SRID 값을 가짐)에있는 경우 공간 데이터베이스의 변환 프로 시저를 사용하여 모델 필드의 SRID로 내재적으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="fee232fed6319afa654e98407d6a84369cdc26ae" translate="yes" xml:space="preserve">
          <source>Morphs this SpatialReference from ESRI&amp;rsquo;s format to EPSG</source>
          <target state="translated">이 SpatialReference를 ESRI 형식에서 EPSG로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="2776d1cf12cc121cc6a53ab101839d36c44da49e" translate="yes" xml:space="preserve">
          <source>Morphs this SpatialReference to ESRI&amp;rsquo;s format.</source>
          <target state="translated">이 SpatialReference를 ESRI 형식으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="de802c1632cedcbed1d1269dec4dd87d1626b63d" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;QueryDict&lt;/code&gt;s you encounter, and in particular those at &lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.GET&lt;/code&gt;, will be immutable. If you are instantiating one yourself, you can make it mutable by passing &lt;code&gt;mutable=True&lt;/code&gt; to its &lt;code&gt;__init__()&lt;/code&gt;.</source>
          <target state="translated">발생하는 대부분의 &lt;code&gt;QueryDict&lt;/code&gt; 및 특히 &lt;code&gt;request.POST&lt;/code&gt; 및 &lt;code&gt;request.GET&lt;/code&gt; 에 있는 QueryDict 는 변경할 수 없습니다. 직접 인스턴스화하는 경우 &lt;code&gt;mutable=True&lt;/code&gt; 를 &lt;code&gt;__init__()&lt;/code&gt; 전달하여 변경 가능하게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0099135e74b5675cbf0a4c807d825e1972187f6" translate="yes" xml:space="preserve">
          <source>Most browsers send &lt;code&gt;Accept: */*&lt;/code&gt; by default, so this would return &lt;code&gt;True&lt;/code&gt; for all content types. Setting an explicit &lt;code&gt;Accept&lt;/code&gt; header in API requests can be useful for returning a different content type for those consumers only. See &lt;a href=&quot;../topics/class-based-views/generic-editing#content-negotiation-example&quot;&gt;Content negotiation example&lt;/a&gt; of using &lt;code&gt;accepts()&lt;/code&gt; to return different content to API consumers.</source>
          <target state="translated">대부분의 브라우저 는 기본적으로 &lt;code&gt;Accept: */*&lt;/code&gt; 를 보내 므로 모든 콘텐츠 유형에 대해 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다. API 요청에서 명시 적 &lt;code&gt;Accept&lt;/code&gt; 헤더를 설정하면 해당 소비자에게만 다른 콘텐츠 유형을 반환하는 데 유용 할 수 있습니다. API 소비자에게 다른 콘텐츠를 반환하기 위해 &lt;code&gt;accepts()&lt;/code&gt; 를 사용하는 &lt;a href=&quot;../topics/class-based-views/generic-editing#content-negotiation-example&quot;&gt;콘텐츠 협상 예제&lt;/a&gt; 를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="fd83b2da2d31a5769324d7579da823d1abff813e" translate="yes" xml:space="preserve">
          <source>Most developers won&amp;rsquo;t need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control.</source>
          <target state="translated">대부분의 개발자는 양식 인코딩 변경에 대해 걱정할 필요가 없지만 이는 인코딩을 제어 할 수없는 레거시 시스템과 통신하는 응용 프로그램에 유용한 기능입니다.</target>
        </trans-unit>
        <trans-unit id="10ade9a2061b05f7b91f4318c4b19e8aa5ca9527" translate="yes" xml:space="preserve">
          <source>Most fields don&amp;rsquo;t require data preparation. Simple data types, such as integers and strings, are &amp;lsquo;ready to write&amp;rsquo; as a Python object. However, more complex data types often require some modification.</source>
          <target state="translated">대부분의 필드는 데이터 준비가 필요하지 않습니다. 정수 및 문자열과 같은 간단한 데이터 유형은 Python 객체로 '쓰기 준비 완료'입니다. 그러나보다 복잡한 데이터 유형은 종종 일부 수정이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d529a24fa241e9065286615d191b753364639d64" translate="yes" xml:space="preserve">
          <source>Most filters don&amp;rsquo;t take arguments. In this case, leave the argument out of your function:</source>
          <target state="translated">대부분의 필터는 인수를 사용하지 않습니다. 이 경우 인수를 함수에서 제외하십시오.</target>
        </trans-unit>
        <trans-unit id="6ac8c4baf64570371700af7032fa39a6dc85046f" translate="yes" xml:space="preserve">
          <source>Most generic views require the &lt;code&gt;queryset&lt;/code&gt; key, which is a &lt;code&gt;QuerySet&lt;/code&gt; instance; see &lt;a href=&quot;../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt; for more information about &lt;code&gt;QuerySet&lt;/code&gt; objects.</source>
          <target state="translated">대부분의 일반 뷰에는 &lt;code&gt;QuerySet&lt;/code&gt; &lt;code&gt;queryset&lt;/code&gt; 키가 필요합니다 . &lt;code&gt;QuerySet&lt;/code&gt; 오브젝트 에 대한 자세한 정보는 &lt;a href=&quot;../../topics/db/queries&quot;&gt;조회 작성&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="283a9ab800c27a0c42452de79dd91ba830b18c75" translate="yes" xml:space="preserve">
          <source>Most larger Django sites use a separate Web server &amp;ndash; i.e., one that&amp;rsquo;s not also running Django &amp;ndash; for serving static files. This server often runs a different type of web server &amp;ndash; faster but less full-featured. Some common choices are:</source>
          <target state="translated">더 큰 Django 사이트는 정적 파일을 제공하기 위해 별도의 웹 서버 (Django를 실행하지 않는 서버)를 사용합니다. 이 서버는 종종 다른 유형의 웹 서버를 실행하지만 더 빠르지 만 기능이 적습니다. 몇 가지 일반적인 선택은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d071dd58c0ea09b5920680c494256897fe6f5f87" translate="yes" xml:space="preserve">
          <source>Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the &lt;a href=&quot;../../topics/db/queries#topics-db-queries-related&quot;&gt;&amp;ldquo;entry_set&amp;rdquo;&lt;/a&gt; syntax for finding a collection of objects related on a foreign key. Therefore, given a model called &amp;ldquo;comment&amp;rdquo; with a foreign key relationship to a model called &amp;ldquo;task&amp;rdquo; you can loop through all comments attached to a given task like this:</source>
          <target state="translated">개체에 연결된 대부분의 메서드 호출은 템플릿 내에서도 사용할 수 있습니다. 즉, 템플릿은 클래스 이름 (예 : 필드 이름)과 뷰에서 전달 된 변수 이상의 것에 액세스 할 수 있습니다. 예를 들어, Django ORM은 외래 키와 관련된 객체 모음을 찾기위한 &lt;a href=&quot;../../topics/db/queries#topics-db-queries-related&quot;&gt;&quot;entry_set&quot;&lt;/a&gt; 구문을 제공합니다 . 따라서&amp;ldquo;task&amp;rdquo;라는 모델과 외래 키 관계를 가진&amp;ldquo;comment&amp;rdquo;라는 모델이 있으면 주어진 작업에 첨부 된 모든 주석을 다음과 같이 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="145d0f6157ec473a53e372c29d0eb1af87df32d4" translate="yes" xml:space="preserve">
          <source>Most of the time you&amp;rsquo;ll use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; when you need to look up objects from the database. However, that&amp;rsquo;s far from all there is; see the &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;QuerySet API Reference&lt;/a&gt; for a complete list of all the various &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">대부분의 경우 데이터베이스에서 객체를 찾아야 할 때 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt; 합니다. 그러나 그것은 모든 것과는 거리가 멀다. 모든 다양한 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 메소드 의 전체 목록은 &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;QuerySet API Reference&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e5a70a402429d9e0751ab8352b3b6edf4a999b65" translate="yes" xml:space="preserve">
          <source>Most of the time you&amp;rsquo;ll use a &lt;code&gt;File&lt;/code&gt; that Django&amp;rsquo;s given you (i.e. a file attached to a model as above, or perhaps an uploaded file).</source>
          <target state="translated">대부분의 시간을 당신은 사용할 것이다 &lt;code&gt;File&lt;/code&gt; 장고의 당신을 주어진 것으로 (즉, 파일 위와 같이 모델에 장착, 또는 아마도 업로드 된 파일을).</target>
        </trans-unit>
        <trans-unit id="ee3f7c7371e94698b53b1354c3bef6e0872c9065" translate="yes" xml:space="preserve">
          <source>Most of the time, you&amp;rsquo;ll instantiate &lt;a href=&quot;#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; objects by passing in a fully-populated dictionary to &lt;code&gt;Context()&lt;/code&gt;. But you can add and delete items from a &lt;code&gt;Context&lt;/code&gt; object once it&amp;rsquo;s been instantiated, too, using standard dictionary syntax:</source>
          <target state="translated">대부분의 경우 완전히 채워진 사전을 &lt;code&gt;Context()&lt;/code&gt; 에 전달하여 &lt;a href=&quot;#django.template.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt; 객체를 인스턴스화 합니다 . 그러나 표준 사전 구문을 사용하여 인스턴스화 된 &lt;code&gt;Context&lt;/code&gt; 객체 에서 항목을 추가하고 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75df474b5d319622c3cc5760d003faf378b95a8e" translate="yes" xml:space="preserve">
          <source>Most of the time, you&amp;rsquo;ll pass the file data from &lt;code&gt;request&lt;/code&gt; into the form as described in &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;Binding uploaded files to a form&lt;/a&gt;. This would look something like:</source>
          <target state="translated">대부분의 경우 &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;업로드 된 파일을 양식&lt;/a&gt; 에 바인딩에 설명 된대로 &lt;code&gt;request&lt;/code&gt; 에서 파일 데이터를 양식으로 전달합니다 . 이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="119f2c924a319d37b00a931fb60d52e9b7e587d8" translate="yes" xml:space="preserve">
          <source>Most other &lt;code&gt;django-admin&lt;/code&gt; commands that interact with the database operate in the same way as &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; &amp;ndash; they only ever operate on one database at a time, using &lt;code&gt;--database&lt;/code&gt; to control the database used.</source>
          <target state="translated">데이터베이스와 상호 작용하는 대부분의 다른 &lt;code&gt;django-admin&lt;/code&gt; 명령은 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 과 동일한 방식으로 작동합니다. &lt;code&gt;--database&lt;/code&gt; 를 사용하여 사용 된 데이터베이스를 제어하는 한 번에 하나의 데이터베이스에서만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="377bcaf04e9797c6340b2a8bdad4bee17d23a9bf" translate="yes" xml:space="preserve">
          <source>Most people are familiar with using latitude and longitude to reference a location on the earth&amp;rsquo;s surface. However, latitude and longitude are angles, not distances. In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an &lt;em&gt;arc&lt;/em&gt; of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot;&gt;great circle&lt;/a&gt;. &lt;a href=&quot;#fnthematic&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt; Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles). Using a geographic coordinate system may introduce complications for the developer later on. For example, SpatiaLite does not have the capability to perform distance calculations between geometries using geographic coordinate systems, e.g. constructing a query to find all points within 5 miles of a county boundary stored as WGS84. &lt;a href=&quot;#fndist&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</source>
          <target state="translated">대부분의 사람들은 지구 표면의 위치를 ​​참조하기 위해 위도와 경도를 사용하는 것에 익숙합니다. 그러나 위도와 경도는 거리가 아니라 각도입니다. 평평한 표면에, 두 지점 사이의 최단 경로가 직선 (예 : 지상)를, 곡면상의 두 지점 사이의 최단 경로 중에 환언에서, 인 &lt;em&gt;아크&lt;/em&gt; (A)의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot;&gt;큰 원&lt;/a&gt; . &lt;a href=&quot;#fnthematic&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt;따라서, 평면 단위 (예를 들어, 킬로미터 및 마일)로 거리를 얻기 위해서는 추가적인 계산이 필요하다. 지리적 좌표 시스템을 사용하면 나중에 개발자에게 합병증이 발생할 수 있습니다. 예를 들어 SpatiaLite는 지리적 좌표계를 사용하여 형상 간 거리 계산을 수행 할 수있는 기능이 없습니다 (예 : WGS84로 저장된 카운티 경계에서 5 마일 이내에있는 모든 지점을 찾기위한 쿼리 구성). &lt;a href=&quot;#fndist&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa380c3aed18b055c47fc70106524669e774f0e4" translate="yes" xml:space="preserve">
          <source>Most tags accept arguments:</source>
          <target state="translated">대부분의 태그는 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="7d98610356545b43a90b40c891fb649c8f9fda3c" translate="yes" xml:space="preserve">
          <source>Most validation can be done using &lt;a href=&quot;#validators&quot;&gt;validators&lt;/a&gt; - helpers that can be reused. Validators are functions (or callables) that take a single argument and raise &lt;code&gt;ValidationError&lt;/code&gt; on invalid input. Validators are run after the field&amp;rsquo;s &lt;code&gt;to_python&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; methods have been called.</source>
          <target state="translated">대부분의 유효성 검사는 재사용 할 수있는 도우미 인 &lt;a href=&quot;#validators&quot;&gt;유효성 검사기를&lt;/a&gt; 사용하여 수행 할 수 있습니다. 유효성 검사기는 단일 인수를 사용 하여 유효하지 않은 입력에서 &lt;code&gt;ValidationError&lt;/code&gt; 를 발생 시키는 함수 (또는 호출 가능)입니다 . 필드의 &lt;code&gt;to_python&lt;/code&gt; 및 &lt;code&gt;validate&lt;/code&gt; 메소드가 호출 된 후에 유효성 검증 기가 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="723f4d4f07515e4cb9cdd3456d1f4fe86b2d6da5" translate="yes" xml:space="preserve">
          <source>Most views requires CSRF protection, but a few do not.</source>
          <target state="translated">대부분의보기에는 CSRF 보호가 필요하지만 일부는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4128c1d8e90ab53d91e5ee014d62fddc81452af8" translate="yes" xml:space="preserve">
          <source>Most websites that care about time zones ask users in which time zone they live and store this information in the user&amp;rsquo;s profile. For anonymous users, they use the time zone of their primary audience or UTC. &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; provides &lt;a href=&quot;http://pytz.sourceforge.net/#helpers&quot;&gt;helpers&lt;/a&gt;, like a list of time zones per country, that you can use to pre-select the most likely choices.</source>
          <target state="translated">표준 시간대를 염려하는 대부분의 웹 사이트는 사용자에게 현재 시간대를 묻고이 정보를 사용자 프로필에 저장합니다. 익명 사용자의 경우 기본 잠재 고객 또는 UTC의 시간대를 사용합니다. &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; 는 국가 별 시간대 목록과 같이 &lt;a href=&quot;http://pytz.sourceforge.net/#helpers&quot;&gt;도우미를&lt;/a&gt; 제공 하여 가장 가능성이 높은 선택을 미리 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c8d12148748172394b8e79a6d152a32dd323fc1" translate="yes" xml:space="preserve">
          <source>Move the &lt;code&gt;polls&lt;/code&gt; directory into the &lt;code&gt;django-polls&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;polls&lt;/code&gt; 디렉토리를 &lt;code&gt;django-polls&lt;/code&gt; 디렉토리 로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="c58c013c30d8701a971a22d72e01d0b764b2b536" translate="yes" xml:space="preserve">
          <source>Moves the model&amp;rsquo;s table from one tablespace to another.</source>
          <target state="translated">모델의 테이블을 한 테이블 스페이스에서 다른 테이블 스페이스로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="d794a8d047d2027efa4972e195bbc53e5a2bcbce" translate="yes" xml:space="preserve">
          <source>Moving an object from one database to another</source>
          <target state="translated">한 데이터베이스에서 다른 데이터베이스로 오브젝트 이동</target>
        </trans-unit>
        <trans-unit id="f0a1c83ee00097339c2b403b2193bd3d9c55c46d" translate="yes" xml:space="preserve">
          <source>Mozilla discusses various topics regarding &lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security.html&quot;&gt;web security&lt;/a&gt;. Their pages also include security principles that apply to any system.</source>
          <target state="translated">Mozilla는 &lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security.html&quot;&gt;웹 보안&lt;/a&gt; 과 관련된 다양한 주제에 대해 설명 합니다. 해당 페이지에는 모든 시스템에 적용되는 보안 원칙도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="64683d853b5d7f50f535fc278d45f921a490d24b" translate="yes" xml:space="preserve">
          <source>Much like &lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt;, ensure that if you change schema inside here you&amp;rsquo;re either doing it outside the scope of the Django model system (e.g. triggers) or that you use &lt;a href=&quot;#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt; to add in operations that will reflect your changes to the model state - otherwise, the versioned ORM and the autodetector will stop working correctly.</source>
          <target state="translated">&lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt; 과 마찬가지로 여기에서 스키마를 변경하면 Django 모델 시스템 범위 (예 : 트리거) 범위 밖에서 스키마를 수행하거나 모델 상태에 대한 변경 사항을 반영하는 작업을 추가 하기 위해 &lt;a href=&quot;#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; &lt;/a&gt; 를 사용 하십시오. 버전이 지정된 ORM 및 자동 감지 기능이 올바르게 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41621a064f44e6daabdc27522b33298fa8aa62b1" translate="yes" xml:space="preserve">
          <source>Multi-database support</source>
          <target state="translated">다중 데이터베이스 지원</target>
        </trans-unit>
        <trans-unit id="ddb04e3ae372a17b92e0255fc4b279009db9af90" translate="yes" xml:space="preserve">
          <source>Multi-table inheritance</source>
          <target state="translated">다중 테이블 상속</target>
        </trans-unit>
        <trans-unit id="85c68fd61341ba3993094799674748ff1b1fad2b" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays with indexes and slices</source>
          <target state="translated">인덱스와 슬라이스가있는 다차원 배열</target>
        </trans-unit>
        <trans-unit id="6dae03e38262e1d8fbd6001ae280309609de7140" translate="yes" xml:space="preserve">
          <source>Multiple admin sites in the same URLconf</source>
          <target state="translated">동일한 URLconf의 여러 관리 사이트</target>
        </trans-unit>
        <trans-unit id="d28c471111be99bb04f22b41815e829ee1145175" translate="yes" xml:space="preserve">
          <source>Multiple databases</source>
          <target state="translated">여러 데이터베이스</target>
        </trans-unit>
        <trans-unit id="a9dadd9453a271030d305246c8860a4e63627858" translate="yes" xml:space="preserve">
          <source>Multiple inheritance</source>
          <target state="translated">다중 상속</target>
        </trans-unit>
        <trans-unit id="232abe7a48c7c1ee8c0efaa67e739c2a6509d72e" translate="yes" xml:space="preserve">
          <source>Multiple keys can be chained together to form a path lookup:</source>
          <target state="translated">여러 키를 함께 연결하여 경로 조회를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5112902c4e583bfe7514db7252746db758fd62e2" translate="yes" xml:space="preserve">
          <source>Multiple object mixins</source>
          <target state="translated">다중 객체 믹스 인</target>
        </trans-unit>
        <trans-unit id="86f9c0e7700126520aeb57e446419f134fb8a6f7" translate="yes" xml:space="preserve">
          <source>Mumbai: 19,000,000</source>
          <target state="translated">뭄바이 : 19,000,000</target>
        </trans-unit>
        <trans-unit id="ce70a430cc3e5cc4fd6f19e52ba7a0369c6c0c5b" translate="yes" xml:space="preserve">
          <source>Must be a subclass of &lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt;&lt;code&gt;django.forms.MultiWidget&lt;/code&gt;&lt;/a&gt;. Default value is &lt;a href=&quot;widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;, which probably is not very useful in this case.</source>
          <target state="translated">&lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt; &lt;code&gt;django.forms.MultiWidget&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 여야합니다 . 기본값은 &lt;a href=&quot;widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 이며,이 경우에는 그다지 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6f73e164a384f2624b0aa7805fd299ecce41fed8" translate="yes" xml:space="preserve">
          <source>Must return the lookup named &lt;code&gt;lookup_name&lt;/code&gt;. For instance, by returning &lt;code&gt;self.output_field.get_lookup(lookup_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lookup_name&lt;/code&gt; 이라는 조회를 리턴해야합니다 . 예를 들어 &lt;code&gt;self.output_field.get_lookup(lookup_name)&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c493b67af068ea997fcbeb95a43f0dc8b18c7ce6" translate="yes" xml:space="preserve">
          <source>Must return the lookup named &lt;code&gt;transform_name&lt;/code&gt;. For instance, by returning &lt;code&gt;self.output_field.get_transform(transform_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transform_name&lt;/code&gt; 이라는 조회를 리턴해야합니다 . 예를 들어 &lt;code&gt;self.output_field.get_transform(transform_name)&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a96b7ca96aaabf64fd5a1e1f8c1b203d836deaa9" translate="yes" xml:space="preserve">
          <source>Mutability: &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be modified.</source>
          <target state="translated">변경 가능성 : &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체가 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bccb0eee0e8600913c2c28639c66e179e6c916b" translate="yes" xml:space="preserve">
          <source>My logs are filled with GEOS-related errors</source>
          <target state="translated">내 로그는 GEOS 관련 오류로 채워져 있습니다</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="2e0075770347408bd338637c0345bcd2dba7d8f7" translate="yes" xml:space="preserve">
          <source>MySQL 5.6.4 and later can store fractional seconds, provided that the column definition includes a fractional indication (e.g. &lt;code&gt;DATETIME(6)&lt;/code&gt;). Earlier versions do not support them at all.</source>
          <target state="translated">열 정의에 분수 표시 (예 : &lt;code&gt;DATETIME(6)&lt;/code&gt; )가 포함 된 경우 MySQL 5.6.4 이상에서는 분수 초를 저장할 수 있습니다 . 이전 버전은 전혀 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="86a5ac5197e92a3bf370a96a8eed2e3a94e4cb1f" translate="yes" xml:space="preserve">
          <source>MySQL &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</source>
          <target state="translated">MySQL &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="986a60a235cf32f505dc63fb40ec496ad291c705" translate="yes" xml:space="preserve">
          <source>MySQL Connector/Python</source>
          <target state="translated">MySQL 커넥터 / 파이썬</target>
        </trans-unit>
        <trans-unit id="667f44d66957f73e91d3746ec1ac71180eba2323" translate="yes" xml:space="preserve">
          <source>MySQL Connector/Python is available from the &lt;a href=&quot;https://dev.mysql.com/downloads/connector/python/&quot;&gt;download page&lt;/a&gt;. The Django adapter is available in versions 1.1.X and later. It may not support the most recent releases of Django.</source>
          <target state="translated">MySQL Connector / Python은 &lt;a href=&quot;https://dev.mysql.com/downloads/connector/python/&quot;&gt;다운로드 페이지&lt;/a&gt; 에서 사용할 수 있습니다 . Django 어댑터는 버전 1.1.X 이상에서 사용 가능합니다. Django의 최신 릴리스를 지원하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bb341b82bf1c83dd03f7466f030dfb1c4ead4ae" translate="yes" xml:space="preserve">
          <source>MySQL DB API Drivers</source>
          <target state="translated">MySQL DB API 드라이버</target>
        </trans-unit>
        <trans-unit id="2a32013dda91967e55f3b5f97fbb0212e962e6ad" translate="yes" xml:space="preserve">
          <source>MySQL Spatial Limitations</source>
          <target state="translated">MySQL 공간 제한</target>
        </trans-unit>
        <trans-unit id="983d4198c4fe496e039642a0b10a31ff61fb8930" translate="yes" xml:space="preserve">
          <source>MySQL and MariaDB</source>
          <target state="translated">MySQL과 MariaDB</target>
        </trans-unit>
        <trans-unit id="1ae647f2055c46f7991330b9effd8766eca9dada" translate="yes" xml:space="preserve">
          <source>MySQL and MariaDB do not support some options to the &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; statement. If &lt;code&gt;select_for_update()&lt;/code&gt; is used with an unsupported option, then a &lt;a href=&quot;exceptions#django.db.NotSupportedError&quot;&gt;&lt;code&gt;NotSupportedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">MySQL과 MariaDB는 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 문에 대한 일부 옵션을 지원하지 않습니다 . 경우 &lt;code&gt;select_for_update()&lt;/code&gt; 지원되지 않는 옵션과 함께 사용되어, 다음 &lt;a href=&quot;exceptions#django.db.NotSupportedError&quot;&gt; &lt;code&gt;NotSupportedError&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6f05eb6ba63b7a6cd32e2832c1d889278aa95ffb" translate="yes" xml:space="preserve">
          <source>MySQL and SpatiaLite without LWGEOM don&amp;rsquo;t support area calculations on geographic SRSes.</source>
          <target state="translated">LWGEOM이없는 MySQL 및 SpatiaLite는 지리적 SRS에 대한 영역 계산을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e619fd44bc5f6e15a9f90141b521fe84e6c5c40b" translate="yes" xml:space="preserve">
          <source>MySQL can index only the first N chars of a &lt;code&gt;BLOB&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt; column. Since &lt;code&gt;TextField&lt;/code&gt; doesn&amp;rsquo;t have a defined length, you can&amp;rsquo;t mark it as &lt;code&gt;unique=True&lt;/code&gt;. MySQL will report: &amp;ldquo;BLOB/TEXT column &amp;lsquo;&amp;lt;db_column&amp;gt;&amp;rsquo; used in key specification without a key length&amp;rdquo;.</source>
          <target state="translated">MySQL은 &lt;code&gt;BLOB&lt;/code&gt; 또는 &lt;code&gt;TEXT&lt;/code&gt; 열의 첫 N 문자 만 색인 할 수 있습니다 . 때문에 &lt;code&gt;TextField&lt;/code&gt; 정의 된 길이가 없습니다, 당신은로 표시 할 수 없습니다 &lt;code&gt;unique=True&lt;/code&gt; . MySQL은 &quot;키 길이없이 키 사양에 사용 된 BLOB / TEXT 열 '&amp;lt;db_column&amp;gt;'&quot;을보고합니다.</target>
        </trans-unit>
        <trans-unit id="e7f9037fbe1194d4e43f2ae2e2b77cd89ac807a6" translate="yes" xml:space="preserve">
          <source>MySQL comparisons</source>
          <target state="translated">MySQL 비교</target>
        </trans-unit>
        <trans-unit id="1b2f25b29e36685e347b0022acef2066f4e227da" translate="yes" xml:space="preserve">
          <source>MySQL doesn&amp;rsquo;t support length calculations on geographic SRSes.</source>
          <target state="translated">MySQL은 지리적 SRS에서 길이 계산을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb747cd75bad69ca691abcfc9dda3c14f82ee26e" translate="yes" xml:space="preserve">
          <source>MySQL doesn&amp;rsquo;t support streaming results, hence the Python database driver loads the entire result set into memory. The result set is then transformed into Python row objects by the database adapter using the &lt;code&gt;fetchmany()&lt;/code&gt; method defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">MySQL은 스트리밍 결과를 지원하지 않으므로 Python 데이터베이스 드라이버는 전체 결과 세트를 메모리에로드합니다. 그런 다음 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 정의 된 &lt;code&gt;fetchmany()&lt;/code&gt; 메소드를 사용하여 데이터베이스 어댑터가 결과 세트를 Python 행 오브젝트로 변환 합니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9699bc8cbc6d21071c531e97cae0a82b4d28855a" translate="yes" xml:space="preserve">
          <source>MySQL has a couple drivers that implement the Python Database API described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">MySQL에는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 설명 된 Python Database API를 구현하는 몇 가지 드라이버가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd36a013a62a179e364138cb150dda709e3289ba" translate="yes" xml:space="preserve">
          <source>MySQL has several &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/storage-engines.html&quot;&gt;storage engines&lt;/a&gt;. You can change the default storage engine in the server configuration.</source>
          <target state="translated">MySQL에는 여러 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/storage-engines.html&quot;&gt;스토리지 엔진이&lt;/a&gt; 있습니다. 서버 구성에서 기본 스토리지 엔진을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13c24d5b3db43171b5ef4d816ab11e8214bf90ac" translate="yes" xml:space="preserve">
          <source>MySQL lacks support for transactions around schema alteration operations, meaning that if a migration fails to apply you will have to manually unpick the changes in order to try again (it&amp;rsquo;s impossible to roll back to an earlier point).</source>
          <target state="translated">MySQL은 스키마 변경 작업과 관련된 트랜잭션을 지원하지 않습니다. 즉, 마이그레이션이 적용되지 않으면 다시 시도하기 위해 변경 사항을 수동으로 선택 해제해야합니다 (이전 지점으로 롤백 할 수 없음).</target>
        </trans-unit>
        <trans-unit id="da7ec2dd90480fe6867f579ccf7b82e69036fc20" translate="yes" xml:space="preserve">
          <source>MySQL notes</source>
          <target state="translated">MySQL 노트</target>
        </trans-unit>
        <trans-unit id="c97f25b2cd670ac90747ff6c4670fa29f1bdcc07" translate="yes" xml:space="preserve">
          <source>MySQL option files.</source>
          <target state="translated">MySQL 옵션 파일.</target>
        </trans-unit>
        <trans-unit id="a18101faca156f271f971ff4f81a92f324b38b2f" translate="yes" xml:space="preserve">
          <source>MySQL support was added.</source>
          <target state="translated">MySQL 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="0aca998cada4db772b8e544e84480f89cb51ce1e" translate="yes" xml:space="preserve">
          <source>MySQL users, refer to the &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-database.html&quot;&gt;MySQL manual&lt;/a&gt; for details on how to set or alter the database character set encoding.</source>
          <target state="translated">MySQL 사용자의 경우 데이터베이스 문자 세트 인코딩을 설정하거나 변경하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-database.html&quot;&gt;MySQL 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="901623a9cc98c4d53a4f346dc9d64f6ee667fc21" translate="yes" xml:space="preserve">
          <source>MySQL with MyISAM and fixtures</source>
          <target state="translated">MyISAM 및 비품이있는 MySQL</target>
        </trans-unit>
        <trans-unit id="c8423889e44ab6d190ce5b97f8e3f5999ada3a9e" translate="yes" xml:space="preserve">
          <source>MySQL&amp;rsquo;s default storage engine is &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt;. This engine is fully transactional and supports foreign key references. It&amp;rsquo;s the recommended choice. However, the InnoDB autoincrement counter is lost on a MySQL restart because it does not remember the &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; value, instead recreating it as &amp;ldquo;max(id)+1&amp;rdquo;. This may result in an inadvertent reuse of &lt;a href=&quot;models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">MySQL의 기본 스토리지 엔진은 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt; 입니다. 이 엔진은 트랜잭션이 완전하며 외래 키 참조를 지원합니다. 권장되는 선택입니다. 그러나 InnoDB 자동 증분 카운터는 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 값을 기억하지 않고 &quot;max (id) +1&quot;로 다시 작성하기 때문에 MySQL 재시작시 손실됩니다 . 이로 인해 실수로 &lt;a href=&quot;models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 값이 재사용 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="822c500ebb7d59b30db3811ebed6b92e7060041a" translate="yes" xml:space="preserve">
          <source>MySQL, MariaDB, and SQLite.</source>
          <target state="translated">MySQL, MariaDB 및 SQLite.</target>
        </trans-unit>
        <trans-unit id="da894fa611c76d98f190b501119ec407ebf26fcc" translate="yes" xml:space="preserve">
          <source>MySQL, PostGIS, SpatiaLite</source>
          <target state="translated">MySQL, PostGIS, SpatiaLite</target>
        </trans-unit>
        <trans-unit id="e6d7af34f14cc7cd71ad2da3150f20559678178f" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;code&gt;max_allowed_packet&lt;/code&gt; error</source>
          <target state="translated">MySQL : &lt;code&gt;max_allowed_packet&lt;/code&gt; 오류</target>
        </trans-unit>
        <trans-unit id="aa93eb462b33d3480c38c1390b6b9dda484bd422" translate="yes" xml:space="preserve">
          <source>MySQL: load the time zone tables with &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt;.</source>
          <target state="translated">MySQL : 시간대 테이블을 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql로&lt;/a&gt; 로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="87bfcc6203402acde4aabbaf0352d970adff0de9" translate="yes" xml:space="preserve">
          <source>N, B</source>
          <target state="translated">N, B</target>
        </trans-unit>
        <trans-unit id="42279a6f78cd081c721ab2a673715d6e0141307a" translate="yes" xml:space="preserve">
          <source>NULL and empty strings</source>
          <target state="translated">NULL 및 빈 문자열</target>
        </trans-unit>
        <trans-unit id="3ec5dc9e67bb01760f1a1602b80350c782cc4a3d" translate="yes" xml:space="preserve">
          <source>Naive and aware datetime objects</source>
          <target state="translated">순진하고 알기 쉬운 날짜 / 시간 객체</target>
        </trans-unit>
        <trans-unit id="991cb900a910173a0198132c33364a293aa20dc5" translate="yes" xml:space="preserve">
          <source>Name of a model field which will be auto-populated with the height of the image each time the model instance is saved.</source>
          <target state="translated">모델 인스턴스가 저장 될 때마다 이미지의 높이에 자동으로 채워지는 모델 필드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="77b12c2e53e54a360eee73a9a579997d2f334a46" translate="yes" xml:space="preserve">
          <source>Name of a model field which will be auto-populated with the width of the image each time the model instance is saved.</source>
          <target state="translated">모델 인스턴스가 저장 될 때마다 이미지 너비로 자동 채워지는 모델 필드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e796ff17766e96ff2c6860b2879523670c9a432e" translate="yes" xml:space="preserve">
          <source>Name of a supported database vendor that this model is specific to. Current built-in vendor names are: &lt;code&gt;sqlite&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;. If this attribute is not empty and the current connection vendor doesn&amp;rsquo;t match it, the model will not be synchronized.</source>
          <target state="translated">이 모델이 지원하는 지원되는 데이터베이스 공급 업체의 이름입니다. 현재 내장 된 공급 업체 이름은 &lt;code&gt;sqlite&lt;/code&gt; , &lt;code&gt;postgresql&lt;/code&gt; , &lt;code&gt;mysql&lt;/code&gt; , &lt;code&gt;oracle&lt;/code&gt; 입니다. 이 속성이 비어 있지 않고 현재 연결 공급 업체가 일치하지 않으면 모델이 동기화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="21e40c06422396c66fc6f011529e9fbb22670cb1" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed by using either one of the following syntaxes:</source>
          <target state="translated">다음 구문 중 하나를 사용하여 명명 된 인수를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="456472e152b75181780a0aa5cf5f649563895b18" translate="yes" xml:space="preserve">
          <source>Named interpolation: This mode is selected by passing the optional boolean &lt;code&gt;named&lt;/code&gt; parameter as &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;obj&lt;/code&gt; contains a JavaScript object or associative array. For example:</source>
          <target state="translated">명명 된 보간 :이 모드는 선택적 부울 &lt;code&gt;named&lt;/code&gt; 매개 변수를 &lt;code&gt;true&lt;/code&gt; 로 전달하여 선택 됩니다 . &lt;code&gt;obj&lt;/code&gt; 는 JavaScript 객체 또는 연관 배열을 포함합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cddd6003787cffa647cd2f5ab65bee28c43a64f5" translate="yes" xml:space="preserve">
          <source>Namespace packages as apps</source>
          <target state="translated">앱으로서의 네임 스페이스 패키지</target>
        </trans-unit>
        <trans-unit id="b401e0e546ac63496e6d96c97a9fc5aeb9b68b6f" translate="yes" xml:space="preserve">
          <source>Namespaced URLs are specified using the &lt;code&gt;':'&lt;/code&gt; operator. For example, the main index page of the admin application is referenced using &lt;code&gt;'admin:index'&lt;/code&gt;. This indicates a namespace of &lt;code&gt;'admin'&lt;/code&gt;, and a named URL of &lt;code&gt;'index'&lt;/code&gt;.</source>
          <target state="translated">네임 스페이스 URL은 &lt;code&gt;':'&lt;/code&gt; 연산자를 사용하여 지정됩니다 . 예를 들어, 관리 애플리케이션의 기본 색인 페이지는 &lt;code&gt;'admin:index'&lt;/code&gt; 를 사용하여 참조됩니다 . 네임 스페이스는 &lt;code&gt;'admin'&lt;/code&gt; 이고 이름이 지정된 URL은 &lt;code&gt;'index'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="49121460562c588ebec421e328fc0f9d720e75bf" translate="yes" xml:space="preserve">
          <source>Namespaces can also be nested. The named URL &lt;code&gt;'sports:polls:index'&lt;/code&gt; would look for a pattern named &lt;code&gt;'index'&lt;/code&gt; in the namespace &lt;code&gt;'polls'&lt;/code&gt; that is itself defined within the top-level namespace &lt;code&gt;'sports'&lt;/code&gt;.</source>
          <target state="translated">네임 스페이스도 중첩 될 수 있습니다. 명명 된 URL &lt;code&gt;'sports:polls:index'&lt;/code&gt; 는 최상위 네임 스페이스 &lt;code&gt;'sports'&lt;/code&gt; 내에 자체 정의 된 네임 스페이스 &lt;code&gt;'polls'&lt;/code&gt; 에서 &lt;code&gt;'index'&lt;/code&gt; 라는 패턴을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="7214a30965a0f1415063399b413c8991e0fe715d" translate="yes" xml:space="preserve">
          <source>Namespacing URL names</source>
          <target state="translated">네임 스페이스 URL 이름</target>
        </trans-unit>
        <trans-unit id="245bfd6a442d9a4f4c7f5466cc42e94f2e24f6ba" translate="yes" xml:space="preserve">
          <source>Naming URL patterns</source>
          <target state="translated">이름 지정 URL 패턴</target>
        </trans-unit>
        <trans-unit id="3801dd9c44d08b327a9ff306cbbe6bed16008529" translate="yes" xml:space="preserve">
          <source>Naming issues</source>
          <target state="translated">명명 문제</target>
        </trans-unit>
        <trans-unit id="7e587f8f91b92c319567d66e4457de8a3eb6d592" translate="yes" xml:space="preserve">
          <source>Naming loggers</source>
          <target state="translated">명명 로거</target>
        </trans-unit>
        <trans-unit id="6e94241c26e8d79594ba2990ac79ac771826be76" translate="yes" xml:space="preserve">
          <source>Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.</source>
          <target state="translated">URL의 이름을 지정하면 Django의 다른 곳, 특히 템플릿 내에서 명확하게 참조 할 수 있습니다. 이 강력한 기능을 사용하면 단일 파일 만 터치하면서 프로젝트의 URL 패턴을 전체적으로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0e5d9ee1e706056e66182c63e2373c6ad455b80" translate="yes" xml:space="preserve">
          <source>Native raster support &lt;code&gt;N&lt;/code&gt;: the operator accepts rasters natively on both sides of the lookup, and raster input can be mixed with geometry inputs.</source>
          <target state="translated">기본 래스터 지원 &lt;code&gt;N&lt;/code&gt; : 작업자가 기본적으로 조회의 양쪽에서 래스터를 허용하며 래스터 입력을 형상 입력과 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71cb039d6cfd99775661211c11211853f3118ab8" translate="yes" xml:space="preserve">
          <source>Natural keys</source>
          <target state="translated">자연 키</target>
        </trans-unit>
        <trans-unit id="15de939347cd0f43fbb2c840def2f0483ccf19fc" translate="yes" xml:space="preserve">
          <source>Natural keys and forward references</source>
          <target state="translated">자연스러운 키와 앞으로 참조</target>
        </trans-unit>
        <trans-unit id="f2670621a6a242a585790697568a8a79acebea97" translate="yes" xml:space="preserve">
          <source>Naturally, the &lt;code&gt;forms&lt;/code&gt; library comes with a set of &lt;code&gt;Field&lt;/code&gt; classes that represent common validation needs. This section documents each built-in field.</source>
          <target state="translated">당연히 &lt;code&gt;forms&lt;/code&gt; 라이브러리에는 일반적인 유효성 검사 요구를 나타내는 일련의 &lt;code&gt;Field&lt;/code&gt; 클래스가 제공됩니다. 이 섹션에서는 각 내장 필드에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="a0fd1dadeac26fc980d64d53a1d51dc00d872199" translate="yes" xml:space="preserve">
          <source>Nautical Mile</source>
          <target state="translated">해상 마일</target>
        </trans-unit>
        <trans-unit id="c1bf29ee2167be4389b40be2ec27bb9ac6854cf5" translate="yes" xml:space="preserve">
          <source>Nautical Mile (UK)</source>
          <target state="translated">해상 마일 (영국)</target>
        </trans-unit>
        <trans-unit id="5e303aed43f7eea12893a04c1344d77f1422d360" translate="yes" xml:space="preserve">
          <source>Navigate to Django&amp;rsquo;s &lt;code&gt;tests/shortcuts/&lt;/code&gt; folder and create a new file &lt;code&gt;test_make_toast.py&lt;/code&gt;. Add the following code:</source>
          <target state="translated">Django의 &lt;code&gt;tests/shortcuts/&lt;/code&gt; 폴더로 이동하여 &lt;code&gt;test_make_toast.py&lt;/code&gt; 파일을 새로 만듭니다 . 다음 코드를 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="391931ae9af417747703c930330f904886c481c0" translate="yes" xml:space="preserve">
          <source>Navigate to the &lt;code&gt;django/&lt;/code&gt; folder and open the &lt;code&gt;shortcuts.py&lt;/code&gt; file. At the bottom, add:</source>
          <target state="translated">&lt;code&gt;django/&lt;/code&gt; 폴더로 이동 하여 &lt;code&gt;shortcuts.py&lt;/code&gt; 파일을여십시오. 하단에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6ff1387ed6d44dceb1969e9b463d291bf6feec8d" translate="yes" xml:space="preserve">
          <source>Needing the result in every template.</source>
          <target state="translated">모든 템플릿에 결과가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="854d8a7501a391087e8af696c7e80444951d2100" translate="yes" xml:space="preserve">
          <source>Negated object identity. Tests if two values are not the same object. This is the negation of the &lt;code&gt;is&lt;/code&gt; operator. Example:</source>
          <target state="translated">부정적 객체 정체성. 두 값이 동일한 객체가 아닌지 테스트합니다. 이것은의 부정 인 &lt;code&gt;is&lt;/code&gt; 오퍼레이터. 예:</target>
        </trans-unit>
        <trans-unit id="74cddaa347454041893fdb47ba6c8cf1d732490d" translate="yes" xml:space="preserve">
          <source>Negative indexing (i.e. &lt;code&gt;Entry.objects.all()[-1]&lt;/code&gt;) is not supported.</source>
          <target state="translated">음수 인덱싱 (즉, &lt;code&gt;Entry.objects.all()[-1]&lt;/code&gt; )은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="16b2420a502b3deb13acfb660bcc642e826d0622" translate="yes" xml:space="preserve">
          <source>Nested arguments</source>
          <target state="translated">중첩 된 인수</target>
        </trans-unit>
        <trans-unit id="a51d1007934ad9baaf9054dadf4bd0eaf7048e4f" translate="yes" xml:space="preserve">
          <source>Nested captured arguments create a strong coupling between the view arguments and the URL as illustrated by &lt;code&gt;blog_articles&lt;/code&gt;: the view receives part of the URL (&lt;code&gt;page-2/&lt;/code&gt;) instead of only the value the view is interested in. This coupling is even more pronounced when reversing, since to reverse the view we need to pass the piece of URL instead of the page number.</source>
          <target state="translated">중첩 된 캡처 된 인수는 &lt;code&gt;blog_articles&lt;/code&gt; 에 설명 된대로보기 인수와 URL 사이에 강력한 연결을 만듭니다 .보기는 보기가 관심있는 값 대신 URL의 일부 ( &lt;code&gt;page-2/&lt;/code&gt; )를 수신 합니다. 뷰를 되돌리려면 페이지 번호 대신 URL을 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="65046fcf73f5e6ac3773f70ea1badbd965d975c0" translate="yes" xml:space="preserve">
          <source>Nested classes</source>
          <target state="translated">중첩 클래스</target>
        </trans-unit>
        <trans-unit id="ffea8bcefbb1127b7c2b6d104e473978a7a5dfd5" translate="yes" xml:space="preserve">
          <source>Never deploy a site into production with &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; turned on.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; 를&lt;/a&gt; 켠 상태에서 사이트를 프로덕션에 배포하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="4e08b5505096fc8f458225bbe21af122777de6ec" translate="yes" xml:space="preserve">
          <source>New York: 20,000,000</source>
          <target state="translated">뉴욕 : 20,000,000</target>
        </trans-unit>
        <trans-unit id="bc6939c687d34dccd6c0632aa8427056bf9dd500" translate="yes" xml:space="preserve">
          <source>New applications should avoid &lt;code&gt;default_app_config&lt;/code&gt;. Instead they should require the dotted path to the appropriate &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass to be configured explicitly in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">새로운 애플리케이션은 &lt;code&gt;default_app_config&lt;/code&gt; 를 피해야 합니다. 대신 적절한 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스에 대한 점으로 구분 된 경로가 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 명시 적으로 구성되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="bb77323982627c875ecedea26b1cf8c9800f344b" translate="yes" xml:space="preserve">
          <source>New apps come preconfigured to accept migrations, and so you can add migrations by running &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; once you&amp;rsquo;ve made some changes.</source>
          <target state="translated">새로운 앱은 마이그레이션을 허용하도록 미리 구성되어 있으므로 변경 한 후에 &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 를 실행하여 마이그레이션을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="397e08be4588b3e13fecbfaca297d85d558665ee" translate="yes" xml:space="preserve">
          <source>New features and improvements are added.</source>
          <target state="translated">새로운 기능과 개선 사항이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="cdb2b3eaffe8e9fe13d1e76ec6f821570338db67" translate="yes" xml:space="preserve">
          <source>New in Django 2.2.</source>
          <target state="translated">Django 2.2의 새로운 기능.</target>
        </trans-unit>
        <trans-unit id="a8859c9f8e0e148cbb9c7e291b070736ec990c4d" translate="yes" xml:space="preserve">
          <source>New in Django 2.2:</source>
          <target state="translated">Django 2.2의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="7d4766fe3d85797ad596d99b8671ea4eafbe878d" translate="yes" xml:space="preserve">
          <source>New in Django 3.0.</source>
          <target state="translated">Django 3.0의 새로운 기능.</target>
        </trans-unit>
        <trans-unit id="7802f5226ecb3555d94a9cf2a3159c22a8454a02" translate="yes" xml:space="preserve">
          <source>New in Django 3.0:</source>
          <target state="translated">장고 3.0의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="0c2953d63622f6f02b8976691c2a6a9e13454aad" translate="yes" xml:space="preserve">
          <source>New in Django 3.1.</source>
          <target state="translated">Django 3.1의 새로운 기능.</target>
        </trans-unit>
        <trans-unit id="53c5fd58379d0dc6dfd1944e576aa7ae4b49831e" translate="yes" xml:space="preserve">
          <source>New in Django 3.1:</source>
          <target state="translated">Django 3.1의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="3bdd2af04da21e645534a0164ec69a9d2e7eea84" translate="yes" xml:space="preserve">
          <source>New to Django? Or to Web development in general? Well, you came to the right place: read this material to quickly get up and running.</source>
          <target state="translated">장고를 처음 사용하십니까? 아니면 일반적으로 웹 개발? 글쎄, 당신은 바로 이곳에 왔습니다.이 자료를 읽고 빨리 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="42c8c31ac17b91db81378ce6cded2f0b14aad34c" translate="yes" xml:space="preserve">
          <source>Newer is often - but not always - better</source>
          <target state="translated">새로운 것은 종종-항상은 아니지만-더 나은</target>
        </trans-unit>
        <trans-unit id="90839b06d66480978bb51446f706afdc2004ad1e" translate="yes" xml:space="preserve">
          <source>Newer versions of Python, and also of Python packages, will often perform better too - but measure, rather than assume.</source>
          <target state="translated">최신 버전의 Python 및 Python 패키지도 종종 더 나은 성능을 발휘하지만 가정하기보다는 측정합니다.</target>
        </trans-unit>
        <trans-unit id="0f758a36445ca7a95d9a1d5274601a1eef8619f7" translate="yes" xml:space="preserve">
          <source>Newlines in the HTML content will be preserved.</source>
          <target state="translated">HTML 내용의 줄 바꿈이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="60c9dfae09ab7d11db1bd2a8800128d7b6ebdec0" translate="yes" xml:space="preserve">
          <source>Newlines within the string will be removed.</source>
          <target state="translated">문자열 내 줄 바꿈이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="aca8d1cbfaf7c04f3f791c3ad1ffe332fa7cfcc1" translate="yes" xml:space="preserve">
          <source>Newly instantiated instances have &lt;code&gt;adding=True&lt;/code&gt; and &lt;code&gt;db=None&lt;/code&gt;, since they are yet to be saved. Instances fetched from a &lt;code&gt;QuerySet&lt;/code&gt; will have &lt;code&gt;adding=False&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; set to the alias of the associated database.</source>
          <target state="translated">새로 인스턴스화 된 인스턴스에는 아직 저장되지 않았으므로 &lt;code&gt;adding=True&lt;/code&gt; 및 &lt;code&gt;db=None&lt;/code&gt; 이 있습니다. 인스턴스는에서 가져온 &lt;code&gt;QuerySet&lt;/code&gt; 해야합니다 &lt;code&gt;adding=False&lt;/code&gt; 과 &lt;code&gt;db&lt;/code&gt; 관련 데이터베이스의 별명으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">다음 단계</target>
        </trans-unit>
        <trans-unit id="ac65e32833ef6dab9578aad7abb6397e0ec34f48" translate="yes" xml:space="preserve">
          <source>Next we can add more fine-grained logging. Here&amp;rsquo;s an example of how to make the logging system print more messages from just the &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; named logger:</source>
          <target state="translated">다음으로 더 세분화 된 로깅을 추가 할 수 있습니다. 다음은 로깅 시스템이 logger라는 이름 의 &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; 에서 더 많은 메시지를 인쇄하도록 만드는 방법의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="6d1add59418ea384f8c14da01d32dd82a0c03a15" translate="yes" xml:space="preserve">
          <source>Next we need to import the test client class (later in &lt;code&gt;tests.py&lt;/code&gt; we will use the &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; class, which comes with its own client, so this won&amp;rsquo;t be required):</source>
          <target state="translated">다음으로 테스트 클라이언트 클래스를 가져와야합니다 ( &lt;code&gt;tests.py&lt;/code&gt; 에서 자체 클라이언트와 함께 제공되는 &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 클래스 를 사용 하므로 필요하지 않습니다).</target>
        </trans-unit>
        <trans-unit id="b111a7c819e1512c7c04b41004b2e237b4657367" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll be adding the &lt;code&gt;make_toast()&lt;/code&gt; function.</source>
          <target state="translated">다음으로 &lt;code&gt;make_toast()&lt;/code&gt; 함수를 추가 하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="76a45c894c9d7c9724383aea29e1d93ed7e569dd" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll create &lt;code&gt;setup.cfg&lt;/code&gt; and &lt;code&gt;setup.py&lt;/code&gt; files which detail how to build and install the app. A full explanation of these files is beyond the scope of this tutorial, but the &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools documentation&lt;/a&gt; has a good explanation. Create the files &lt;code&gt;django-polls/setup.cfg&lt;/code&gt; and &lt;code&gt;django-polls/setup.py&lt;/code&gt; with the following contents:</source>
          <target state="translated">다음으로 앱 빌드 및 설치 방법을 자세히 설명하는 &lt;code&gt;setup.cfg&lt;/code&gt; 및 &lt;code&gt;setup.py&lt;/code&gt; 파일을 만듭니다 . 이러한 파일에 대한 자세한 설명은이 학습서의 범위를 벗어나지 만 &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools 문서&lt;/a&gt; 에는 좋은 설명이 있습니다. 다음 내용으로 &lt;code&gt;django-polls/setup.cfg&lt;/code&gt; 및 &lt;code&gt;django-polls/setup.py&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="2428b562258cc645b8a378441e5a8efef21e5410" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll need to ensure this &lt;code&gt;wsgi.py&lt;/code&gt; with a WSGI application object exists. As of Django version 1.4, &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; will have created one for you; otherwise, you&amp;rsquo;ll need to create it. See the &lt;a href=&quot;index&quot;&gt;WSGI overview documentation&lt;/a&gt; for the default contents you should put in this file, and what else you can add to it.</source>
          <target state="translated">다음 으로 WSGI 응용 프로그램 객체가있는 이 &lt;code&gt;wsgi.py&lt;/code&gt; 가 존재 하는지 확인해야 합니다. Django 버전 1.4부터 &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; 는 하나를 만들었습니다. 그렇지 않으면 생성해야합니다. 이 파일에 넣어야하는 기본 내용 및 추가 할 수있는 내용은 &lt;a href=&quot;index&quot;&gt;WSGI 개요 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4458b46e2456208cc57f0c3fe8234e81455698af" translate="yes" xml:space="preserve">
          <source>Next, add the following at the top of &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt;:</source>
          <target state="translated">다음으로 &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt; 상단에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7e08d179fd99e5127a4244c23ceecf4befacdb5" translate="yes" xml:space="preserve">
          <source>Next, change into the directory where GEOS was unpacked, run the configure script, compile, and install:</source>
          <target state="translated">다음으로, GEOS의 압축이 풀린 디렉토리로 변경하고 configure 스크립트를 실행하고 컴파일하고 설치하십시오 :</target>
        </trans-unit>
        <trans-unit id="97c565000f4ddc46a4029869cb4fde12f8283aea" translate="yes" xml:space="preserve">
          <source>Next, create the template used to render the tag&amp;rsquo;s output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very short:</source>
          <target state="translated">그런 다음 태그의 출력을 렌더링하는 데 사용되는 템플릿을 만듭니다. 이 템플릿은 태그의 고정 된 기능입니다. 태그 작성기는 템플릿 디자이너가 아니라 태그를 지정합니다. 이 예에 따르면 템플릿이 매우 짧습니다.</target>
        </trans-unit>
        <trans-unit id="b06e64f44c84b4c936c45d05747ad2632f4f84e0" translate="yes" xml:space="preserve">
          <source>Next, edit your &lt;code&gt;urls.py&lt;/code&gt; in the &lt;code&gt;geodjango&lt;/code&gt; application folder as follows:</source>
          <target state="translated">다음으로 &lt;code&gt;geodjango&lt;/code&gt; 애플리케이션 폴더 에서 &lt;code&gt;urls.py&lt;/code&gt; 를 다음과 같이 편집하십시오 .</target>
        </trans-unit>
        <trans-unit id="977397e98ad4a4b3fb6d6c58fd844d5bc9efb0cf" translate="yes" xml:space="preserve">
          <source>Next, edit your Apache configuration to add a location that you want only authenticated users to be able to view:</source>
          <target state="translated">다음으로 인증 된 사용자 만 볼 수있는 위치를 추가하도록 Apache 구성을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="c378e99152f7b9fca914a5bcc9c3e1b7f8efc41d" translate="yes" xml:space="preserve">
          <source>Next, import the &lt;code&gt;load&lt;/code&gt; module, call the &lt;code&gt;run&lt;/code&gt; routine, and watch &lt;code&gt;LayerMapping&lt;/code&gt; do the work:</source>
          <target state="translated">그런 다음 &lt;code&gt;load&lt;/code&gt; 모듈을 가져 와서 &lt;code&gt;run&lt;/code&gt; 루틴을 호출하고 &lt;code&gt;LayerMapping&lt;/code&gt; 이 작업을 수행하는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="0ebf4ba3fa141f4156fed974267f5f3468106b7b" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s register it for &lt;code&gt;IntegerField&lt;/code&gt;:</source>
          <target state="translated">다음으로 &lt;code&gt;IntegerField&lt;/code&gt; 에 등록 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="70a1521747b230808ef34f3a484673e2d3e2c778" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s register it:</source>
          <target state="translated">다음으로 등록합시다 :</target>
        </trans-unit>
        <trans-unit id="654260d8e6502409d1293980e5369dedc75a1e08" translate="yes" xml:space="preserve">
          <source>Next, run the &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command to install any extra needed database records such as admin permissions and content types:</source>
          <target state="translated">그런 다음 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령을 실행하여 관리자 권한 및 컨텐츠 유형과 같은 추가로 필요한 데이터베이스 레코드를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="7bd185e2faa9b778aa47cb7ad13b219b635277a4" translate="yes" xml:space="preserve">
          <source>Next, run the &lt;code&gt;configure&lt;/code&gt; script &amp;ndash; however the &lt;code&gt;CFLAGS&lt;/code&gt; environment variable needs to be customized so that SQLite knows to build the R*Tree module:</source>
          <target state="translated">다음으로 &lt;code&gt;configure&lt;/code&gt; 스크립트를 실행하십시오. 그러나 SQLite가 R * Tree 모듈을 빌드 할 수 있도록 &lt;code&gt;CFLAGS&lt;/code&gt; 환경 변수를 사용자 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="6725dcdbf417b3ebc4306851939ccba5bb592dda" translate="yes" xml:space="preserve">
          <source>Next, run the Django command-line utilities to create the database tables automatically:</source>
          <target state="translated">다음으로 Django 명령 행 유틸리티를 실행하여 데이터베이스 테이블을 자동으로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="3d2afbfa24772718392bac2a4e9a06485063aa1a" translate="yes" xml:space="preserve">
          <source>Next, start up the Django development server:</source>
          <target state="translated">다음으로 Django 개발 서버를 시작하십시오 :</target>
        </trans-unit>
        <trans-unit id="71a03345430550cc7e9c59db9c5b7395c24fb91c" translate="yes" xml:space="preserve">
          <source>Next, untar the source code archive, and extract the datum shifting files in the &lt;code&gt;nad&lt;/code&gt; subdirectory. This must be done &lt;em&gt;prior&lt;/em&gt; to configuration:</source>
          <target state="translated">다음으로, 소스 코드 아카이브를 압축 해제하고 &lt;code&gt;nad&lt;/code&gt; 서브 디렉토리 에서 데이텀 전환 파일을 추출하십시오 . 구성 &lt;em&gt;하기 전에&lt;/em&gt; 수행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="021c776346f3be3e04eaad68d47bfd2f60ac64ea" translate="yes" xml:space="preserve">
          <source>Next, we define a function called &lt;code&gt;current_datetime&lt;/code&gt;. This is the view function. Each view function takes an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object as its first parameter, which is typically named &lt;code&gt;request&lt;/code&gt;.</source>
          <target state="translated">다음으로 &lt;code&gt;current_datetime&lt;/code&gt; 이라는 함수를 정의합니다 . 보기 기능입니다. 각 뷰 함수는 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 객체를 첫 번째 매개 변수로 사용하며 일반적으로 &lt;code&gt;request&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="285aab5cab4e6d27cc92dd179795c52e99d8e048" translate="yes" xml:space="preserve">
          <source>Next, we write the method responsible for generating the SQL:</source>
          <target state="translated">다음으로 SQL 생성을 담당하는 메소드를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="0c7a20054827a1f65c3805460f6867fbf008e055" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll create a subdirectory for images. Create an &lt;code&gt;images&lt;/code&gt; subdirectory in the &lt;code&gt;polls/static/polls/&lt;/code&gt; directory. Inside this directory, put an image called &lt;code&gt;background.gif&lt;/code&gt;. In other words, put your image in &lt;code&gt;polls/static/polls/images/background.gif&lt;/code&gt;.</source>
          <target state="translated">다음으로 이미지의 하위 디렉토리를 만듭니다. &lt;code&gt;polls/static/polls/&lt;/code&gt; 디렉토리에 &lt;code&gt;images&lt;/code&gt; 서브 디렉토리를 작성하십시오 . 이 디렉토리 안에 &lt;code&gt;background.gif&lt;/code&gt; 라는 이미지를 넣습니다 . 즉, 이미지를 &lt;code&gt;polls/static/polls/images/background.gif&lt;/code&gt; 에 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="2448d8012ce49bb13b445b0d77f557096a6e430b" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll need to inform our &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; of the action. This works just like any other configuration option. So, the complete &lt;code&gt;admin.py&lt;/code&gt; with the action and its registration would look like:</source>
          <target state="translated">다음으로 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 에 조치 를 알려야 합니다. 이것은 다른 구성 옵션과 동일하게 작동합니다. 따라서 액션과 등록을 포함한 완전한 &lt;code&gt;admin.py&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="96a65e04544e3b461117b55fa16483b977d28de6" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll write the &lt;code&gt;PublisherBookList&lt;/code&gt; view itself:</source>
          <target state="translated">다음으로 &lt;code&gt;PublisherBookList&lt;/code&gt; 뷰 자체를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="a0e179a073e3c81a9e2691303a73447da0cb82ce" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;re going to remove our old &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;detail&lt;/code&gt;, and &lt;code&gt;results&lt;/code&gt; views and use Django&amp;rsquo;s generic views instead. To do so, open the &lt;code&gt;polls/views.py&lt;/code&gt; file and change it like so:</source>
          <target state="translated">다음으로 이전 &lt;code&gt;index&lt;/code&gt; , &lt;code&gt;detail&lt;/code&gt; 및 &lt;code&gt;results&lt;/code&gt; 뷰 를 제거하고 대신 Django의 일반 뷰를 사용합니다. 이렇게하려면 &lt;code&gt;polls/views.py&lt;/code&gt; 파일을 열고 다음 과 같이 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="5f86a40e869fcd75bbca46dc9ff1ce17defbb2ec" translate="yes" xml:space="preserve">
          <source>Next, you must replace the &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">다음으로 &lt;a href=&quot;../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt; &lt;code&gt;ModelBackend&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt; 로 바꿔야 합니다.</target>
        </trans-unit>
        <trans-unit id="f2560cbce63028d4ce27fdd2ae2588b9ae69ca1e" translate="yes" xml:space="preserve">
          <source>Nginx</source>
          <target state="translated">Nginx</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="20edec5d0ae49d85148c06bcee71d165b579befe" translate="yes" xml:space="preserve">
          <source>No arguments: All apps have all of their migrations run.</source>
          <target state="translated">인수 없음 : 모든 앱에서 모든 마이그레이션이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="d14d96d5d8b6c42d1f07720884470a5df54ddfae" translate="yes" xml:space="preserve">
          <source>No bulletproof technical solution exists at the framework level to safely validate all user uploaded file content, however, there are some other steps you can take to mitigate these attacks:</source>
          <target state="translated">프레임 워크 수준에는 사용자가 업로드 한 모든 파일 내용을 안전하게 확인하기위한 방탄 기술 솔루션이 없지만 이러한 공격을 완화하기 위해 수행 할 수있는 다른 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d8384f7fd7da9b2b422f4c883195efb29896bda" translate="yes" xml:space="preserve">
          <source>No checking is done on the SQL statement that is passed in to &lt;code&gt;.raw()&lt;/code&gt;. Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result.</source>
          <target state="translated">&lt;code&gt;.raw()&lt;/code&gt; 전달 된 SQL 문에서 점검이 수행되지 않습니다 . Django는 명령문이 데이터베이스에서 행 세트를 리턴 할 것으로 예상하지만이를 강제로 수행하지는 않습니다. 쿼리가 행을 반환하지 않으면 (암호적인) 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3b1825829e0d568b54e3f2738dbb38d3f1fe4df1" translate="yes" xml:space="preserve">
          <source>No gettext?</source>
          <target state="translated">gettext가 없습니까?</target>
        </trans-unit>
        <trans-unit id="77e07c3be309fde63eb2e14702370190c908a04a" translate="yes" xml:space="preserve">
          <source>No matter which database backend we are using, this will mean that &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; and other SQL commands create the right column type for storing a string.</source>
          <target state="translated">어떤 데이터베이스 백엔드를 사용하든 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 및 기타 SQL 명령은 문자열을 저장하기위한 올바른 열 유형을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="12930b65de7726f62fe80a0b6083ac02553c2c82" translate="yes" xml:space="preserve">
          <source>No referrer: do not send a &lt;code&gt;Referer&lt;/code&gt; header at all.</source>
          <target state="translated">리퍼러는 : 송신하지 않는 &lt;code&gt;Referer&lt;/code&gt; 전혀 헤더를.</target>
        </trans-unit>
        <trans-unit id="4a2f33f43afb49828b5490390f091674882fcb65" translate="yes" xml:space="preserve">
          <source>No safety guarantee</source>
          <target state="translated">안전 보장 없음</target>
        </trans-unit>
        <trans-unit id="5d4134379c894768a5b0b531aeca8ad07511ff4d" translate="yes" xml:space="preserve">
          <source>No, that&amp;rsquo;s not a typo: the &amp;ldquo;update&amp;rdquo; middleware must be first in the list, and the &amp;ldquo;fetch&amp;rdquo; middleware must be last. The details are a bit obscure, but see &lt;a href=&quot;#order-of-middleware&quot;&gt;Order of MIDDLEWARE&lt;/a&gt; below if you&amp;rsquo;d like the full story.</source>
          <target state="translated">아니요, 오타가 아닙니다.&amp;ldquo;업데이트&amp;rdquo;미들웨어가 목록에서 가장 먼저 있어야하고&amp;ldquo;페치&amp;rdquo;미들웨어가 마지막이어야합니다. 자세한 내용은 다소 모호하지만 전체 내용을 보려면 아래 &lt;a href=&quot;#order-of-middleware&quot;&gt;의 MIDDLEWARE 순서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bae75e75a1d8c0944e2819de3d77ea82e28a278" translate="yes" xml:space="preserve">
          <source>No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a &lt;code&gt;pastebin&lt;/code&gt; that allow submissions from anonymous users which don&amp;rsquo;t have a session.</source>
          <target state="translated">아니요, 이것은 의도적으로 설계된 것입니다. CSRF 보호를 세션에 연결 하지 않으면 세션이없는 익명 사용자의 제출을 ​​허용 하는 &lt;code&gt;pastebin&lt;/code&gt; 과 같은 사이트에서 보호 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75ac05ec01bf669ca63b694f09f01bafc803a917" translate="yes" xml:space="preserve">
          <source>No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a &lt;em&gt;pastebin&lt;/em&gt; that allow submissions from anonymous users which don&amp;rsquo;t have a session.</source>
          <target state="translated">아니요, 이것은 의도적으로 설계된 것입니다. CSRF 보호를 세션에 연결 하지 않으면 세션이없는 익명 사용자의 제출을 ​​허용 하는 &lt;em&gt;pastebin&lt;/em&gt; 과 같은 사이트에서 보호 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75a6e20e5d3d2a956555b09b0ceec04066703569" translate="yes" xml:space="preserve">
          <source>No, this is by design. Without a man-in-the-middle attack, there is no way for an attacker to send a CSRF token cookie to a victim&amp;rsquo;s browser, so a successful attack would need to obtain the victim&amp;rsquo;s browser&amp;rsquo;s cookie via XSS or similar, in which case an attacker usually doesn&amp;rsquo;t need CSRF attacks.</source>
          <target state="translated">아니요, 이것은 의도적으로 설계된 것입니다. MITM (Man-in-the-Middle) 공격이 없으면 공격자가 CSRF 토큰 쿠키를 피해자의 브라우저로 보낼 수있는 방법이 없으므로 성공적인 공격은 XSS 또는 이와 유사한 방법을 통해 피해자의 브라우저 쿠키를 얻어야합니다. 공격자는 일반적으로 CSRF 공격이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bd0b455c46e5ca610bef77120da2e5ba9eaebc54" translate="yes" xml:space="preserve">
          <source>Non-atomic migrations</source>
          <target state="translated">비 원자 마이그레이션</target>
        </trans-unit>
        <trans-unit id="69833b38232d3e89572bdb6759074b9ad006c98c" translate="yes" xml:space="preserve">
          <source>Non-field errors (and/or hidden field errors that are rendered at the top of the form when using helpers like &lt;code&gt;form.as_p()&lt;/code&gt;) will be rendered with an additional class of &lt;code&gt;nonfield&lt;/code&gt; to help distinguish them from field-specific errors. For example, &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; would look like:</source>
          <target state="translated">비 필드 오류 (같은 헬퍼 사용하는 경우 양식의 맨 위에 렌더링 및 / 또는 숨겨진 필드 오류 &lt;code&gt;form.as_p()&lt;/code&gt; )의 추가 클래스와 렌더링됩니다 &lt;code&gt;nonfield&lt;/code&gt; 도움에 필드 고유의 오류를 구별. 예를 들어 &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="c32acd7553559b10b098232e03fd1062116c6e62" translate="yes" xml:space="preserve">
          <source>None of this is true in a time zone aware environment:</source>
          <target state="translated">시간대 인식 환경에서는이 중 어느 것도 해당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c905dba689783614e7cd8189d7380a8142bf699" translate="yes" xml:space="preserve">
          <source>Normal Python name resolution rules apply. If you have multiple base classes that declare a &lt;code&gt;Meta&lt;/code&gt; inner class, only the first one will be used. This means the child&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt;, if it exists, otherwise the &lt;code&gt;Meta&lt;/code&gt; of the first parent, etc.</source>
          <target state="translated">일반적인 파이썬 이름 확인 규칙이 적용됩니다. &lt;code&gt;Meta&lt;/code&gt; 내부 클래스 를 선언하는 여러 기본 클래스가있는 경우 첫 번째 클래스 만 사용됩니다. 이것은 아이의 &lt;code&gt;Meta&lt;/code&gt; 가 존재한다면 존재하고 그렇지 않으면 첫 번째 부모 의 &lt;code&gt;Meta&lt;/code&gt; 등을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="787e251fceb20e20f58285f09344abec1dac3b8e" translate="yes" xml:space="preserve">
          <source>Normal Python unit test classes extend a base class of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. Django provides a few extensions of this base class:</source>
          <target state="translated">일반적인 Python 단위 테스트 클래스는 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 의 기본 클래스를 확장합니다 . Django는이 기본 클래스의 몇 가지 확장을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1ad536357eed7c72cb7dc875d4df958bc22cdd9b" translate="yes" xml:space="preserve">
          <source>Normalizes email addresses by lowercasing the domain portion of the email address.</source>
          <target state="translated">이메일 주소의 도메인 부분을 줄임으로써 이메일 주소를 정규화합니다.</target>
        </trans-unit>
        <trans-unit id="d2bd9144908a9d20be8073dbbaa165af1378fd10" translate="yes" xml:space="preserve">
          <source>Normalizes the email by calling &lt;a href=&quot;#django.contrib.auth.models.BaseUserManager.normalize_email&quot;&gt;&lt;code&gt;BaseUserManager.normalize_email()&lt;/code&gt;&lt;/a&gt;. If you override this method, be sure to call &lt;code&gt;super()&lt;/code&gt; to retain the normalization.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.BaseUserManager.normalize_email&quot;&gt; &lt;code&gt;BaseUserManager.normalize_email()&lt;/code&gt; &lt;/a&gt; 을 호출하여 이메일을 정규화합니다 . 이 메서드를 재정의하는 경우 정규화를 유지하려면 &lt;code&gt;super()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ebca8d3e7cb9434f28975cda931653991094e57c" translate="yes" xml:space="preserve">
          <source>Normalizes the username by calling &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.normalize_username&quot;&gt;&lt;code&gt;normalize_username()&lt;/code&gt;&lt;/a&gt;. If you override this method, be sure to call &lt;code&gt;super()&lt;/code&gt; to retain the normalization.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.normalize_username&quot;&gt; &lt;code&gt;normalize_username()&lt;/code&gt; &lt;/a&gt; 을 호출하여 사용자 이름을 정규화합니다 . 이 메소드를 재정의하는 경우 정규화를 유지하려면 &lt;code&gt;super()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c716c10654bb0f9670d96ab83c4ff9181bbc894e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt; &lt;code&gt;UUID&lt;/code&gt; &lt;/a&gt; 객체로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="23571b266e909356ef73bc9292429433256272f7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A &lt;code&gt;QuerySet&lt;/code&gt; of model instances.</source>
          <target state="translated">모델 인스턴스 의 &lt;code&gt;QuerySet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8db01bd92878bf8c9d9ba50bf01d544d075050e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; 로&lt;/a&gt; 정규화합니다 .</target>
        </trans-unit>
        <trans-unit id="f06883286dbd9b7a7366dcec2b203da4a388e3d8" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; value.</source>
          <target state="translated">Python &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 값으로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="d4886d2a0f53043db52f5cde8feddfa0bc26c7b2" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; value.</source>
          <target state="translated">Python &lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 또는 &lt;code&gt;None&lt;/code&gt; 값으로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="605b63bef291da49b100f180cd452f4da48ba0c9" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.date&lt;/code&gt; object.</source>
          <target state="translated">Python &lt;code&gt;datetime.date&lt;/code&gt; 객체로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="9ca92c54da10e1d5c685996a1b8233213ac1d451" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.datetime&lt;/code&gt; object.</source>
          <target state="translated">파이썬 &lt;code&gt;datetime.datetime&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="f27a4c57bf6c2c00615c6bd981ee576ffc7d62f7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.time&lt;/code&gt; object.</source>
          <target state="translated">파이썬 &lt;code&gt;datetime.time&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="8208bd6963bb476e18fec3f6260c3df00f3671a6" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;decimal&lt;/code&gt;.</source>
          <target state="translated">다음과 같이 정규화합니다. Python &lt;code&gt;decimal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77e22ea42119f399cbae9e4153b4d1808eaee60c" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python float.</source>
          <target state="translated">파이썬 플로트.</target>
        </trans-unit>
        <trans-unit id="3a1c8382df016399dc527e0652beec43e30a44b8" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python integer.</source>
          <target state="translated">파이썬 정수.</target>
        </trans-unit>
        <trans-unit id="3cd0055e6682f053f1055a5133dd78f42a15a194" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python representation of the JSON value (usually as a &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;), depending on &lt;a href=&quot;#django.forms.JSONField.decoder&quot;&gt;&lt;code&gt;JSONField.decoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정규화 : &lt;a href=&quot;#django.forms.JSONField.decoder&quot;&gt; &lt;code&gt;JSONField.decoder&lt;/code&gt; &lt;/a&gt; 에 따라 JSON 값의 Python 표현 (일반적으로 &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; 또는 &lt;code&gt;None&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="a22741f23a65dd20cd7fdbc9a7d00afdfb0db9cf" translate="yes" xml:space="preserve">
          <source>Normalizes to: A list of strings.</source>
          <target state="translated">다음으로 정규화 : 문자열 목록.</target>
        </trans-unit>
        <trans-unit id="03edfdc79677e527c568c032a0794b48135d3b8f" translate="yes" xml:space="preserve">
          <source>Normalizes to: A list of values of the type provided by the &lt;code&gt;coerce&lt;/code&gt; argument.</source>
          <target state="translated">다음으로 정규화 : &lt;code&gt;coerce&lt;/code&gt; 인수에 의해 제공되는 유형의 값 목록 .</target>
        </trans-unit>
        <trans-unit id="7a4cda7e66de907da2a21e509ad56f05074178a7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A model instance.</source>
          <target state="translated">다음으로 정규화합니다. 모델 인스턴스.</target>
        </trans-unit>
        <trans-unit id="55888b9b4ff1eb1ec8ba6a3bbc52308ac1adbfc2" translate="yes" xml:space="preserve">
          <source>Normalizes to: A string.</source>
          <target state="translated">정규화 : 문자열.</target>
        </trans-unit>
        <trans-unit id="24a53ad769cff7f9d766b78fc9dcb56af2255d2e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A string. IPv6 addresses are normalized as described below.</source>
          <target state="translated">정규화 : 문자열. IPv6 주소는 아래 설명 된대로 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="f17a7f7bab37ec3a1b4b6f3ae02f34271a88be2a" translate="yes" xml:space="preserve">
          <source>Normalizes to: A value of the type provided by the &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt;&lt;code&gt;coerce&lt;/code&gt;&lt;/a&gt; argument.</source>
          <target state="translated">다음으로 정규화 : &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt; &lt;code&gt;coerce&lt;/code&gt; &lt;/a&gt; 인수에 의해 제공되는 유형의 값 .</target>
        </trans-unit>
        <trans-unit id="8e7beb335ed1ad3ce19afe6d6855d444ffea421d" translate="yes" xml:space="preserve">
          <source>Normalizes to: An &lt;code&gt;UploadedFile&lt;/code&gt; object that wraps the file content and file name into a single object.</source>
          <target state="translated">정규화 대상 : 파일 내용과 파일 이름을 단일 객체로 래핑 하는 &lt;code&gt;UploadedFile&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="4e7bc8818cf68569ca76c5ed75dcf2518442499f" translate="yes" xml:space="preserve">
          <source>Normalizes to: the type returned by the &lt;code&gt;compress&lt;/code&gt; method of the subclass.</source>
          <target state="translated">정규화 : 서브 클래스 의 &lt;code&gt;compress&lt;/code&gt; 메소드가 리턴 한 유형 .</target>
        </trans-unit>
        <trans-unit id="4ed9d7700d72a59a0582b3f18f6a1b3e16b71b15" translate="yes" xml:space="preserve">
          <source>Normally the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag will not work if &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; or an equivalent like &lt;code&gt;csrf_protect&lt;/code&gt; has not run. The view decorator &lt;code&gt;requires_csrf_token&lt;/code&gt; can be used to ensure the template tag does work. This decorator works similarly to &lt;code&gt;csrf_protect&lt;/code&gt;, but never rejects an incoming request.</source>
          <target state="translated">&lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; 또는 이와 동등한 &lt;code&gt;csrf_protect&lt;/code&gt; 가 실행되지 않으면 일반적으로 &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플리트 태그가 작동 하지 않습니다. 뷰 데코레이터 &lt;code&gt;requires_csrf_token&lt;/code&gt; 은 템플릿 태그가 작업을 수행하기 위해 사용할 수 있습니다. 이 데코레이터는 &lt;code&gt;csrf_protect&lt;/code&gt; 와 유사하게 작동 하지만 들어오는 요청을 거부하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cdf12ca4e299dccc08f02ece3bea84cff2a538e5" translate="yes" xml:space="preserve">
          <source>Normally the template name is relative to the template loader&amp;rsquo;s root directory. A string argument may also be a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt; as described in the &lt;a href=&quot;#std:templatetag-extends&quot;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">일반적으로 템플릿 이름은 템플릿 로더의 루트 디렉토리를 기준으로합니다. 문자열 인수는 &lt;a href=&quot;#std:templatetag-extends&quot;&gt; &lt;code&gt;extends&lt;/code&gt; &lt;/a&gt; 태그에 설명 된대로 &lt;code&gt;./&lt;/code&gt; 또는 &lt;code&gt;../&lt;/code&gt; 로 시작하는 상대 경로 일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="735ce792d80ea48985a0c3c2c332b181a7542837" translate="yes" xml:space="preserve">
          <source>Normally the template name is relative to the template loader&amp;rsquo;s root directory. A string argument may also be a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;. For example, assume the following directory structure:</source>
          <target state="translated">일반적으로 템플릿 이름은 템플릿 로더의 루트 디렉토리를 기준으로합니다. 문자열 인수는 &lt;code&gt;./&lt;/code&gt; 또는 &lt;code&gt;../&lt;/code&gt; 로 시작하는 상대 경로 일 수도 있습니다 . 예를 들어, 다음 디렉토리 구조를 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="2dd3dec7507f373967972687c007b5c2f2200db3" translate="yes" xml:space="preserve">
          <source>Normally you&amp;rsquo;ll only be adding extra tables that don&amp;rsquo;t already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn&amp;rsquo;t possible, put your &lt;code&gt;extra()&lt;/code&gt; call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your &lt;code&gt;where&lt;/code&gt; addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change.</source>
          <target state="translated">일반적으로 쿼리에 아직 표시되지 않은 테이블 만 추가합니다. 그러나 위에서 설명한 경우가 발생하면 몇 가지 해결책이 있습니다. 먼저 여분의 테이블을 포함하지 않고 얻을 수 있는지 확인하고 이미 쿼리에있는 테이블을 사용하십시오. 이것이 가능하지 않은 경우 테이블이 해당 테이블의 첫 번째 사용이되도록 &lt;code&gt;extra()&lt;/code&gt; 호출을 쿼리 세트 구성 앞에 배치하십시오. 마지막으로, 다른 모든 방법이 실패하면 생성 된 쿼리를보고 추가 테이블에 제공된 별칭을 사용할 수 &lt;code&gt;where&lt;/code&gt; 추가 위치를 다시 작성하십시오 . 동일한 방식으로 쿼리 세트를 구성 할 때마다 별칭이 동일하므로 별칭 이름을 사용하여 변경하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f40a32d698fbe63e70a0ff00283bd488789116d" translate="yes" xml:space="preserve">
          <source>Normally, objects have three save options: &amp;ldquo;Save&amp;rdquo;, &amp;ldquo;Save and continue editing&amp;rdquo;, and &amp;ldquo;Save and add another&amp;rdquo;. If &lt;code&gt;save_as&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, &amp;ldquo;Save and add another&amp;rdquo; will be replaced by a &amp;ldquo;Save as new&amp;rdquo; button that creates a new object (with a new ID) rather than updating the existing object.</source>
          <target state="translated">일반적으로 객체에는 &quot;저장&quot;, &quot;저장 후 편집 계속&quot;및 &quot;다른 저장 후 추가&quot;의 세 가지 저장 옵션이 있습니다. 경우 &lt;code&gt;save_as&lt;/code&gt; 는 것입니다 &lt;code&gt;True&lt;/code&gt; , &quot;저장 및 다른 추가&quot;오히려 기존 개체를 업데이트하는 것보다 (새로운 ID로) 새로운 객체를 생성하는 &quot;저장 새와 같은&quot;버튼으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="fc1a750f10e8d842b641d322f43c6420831581c7" translate="yes" xml:space="preserve">
          <source>Normally, the save buttons appear only at the bottom of the forms. If you set &lt;code&gt;save_on_top&lt;/code&gt;, the buttons will appear both on the top and the bottom.</source>
          <target state="translated">일반적으로 저장 단추는 양식의 맨 아래에만 나타납니다. &lt;code&gt;save_on_top&lt;/code&gt; 을 설정 하면 버튼이 상단과 하단에 모두 나타납니다.</target>
        </trans-unit>
        <trans-unit id="159f39779a59cc0691baa39db4014b657a742b47" translate="yes" xml:space="preserve">
          <source>Normally, you should always use &lt;a href=&quot;#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, &lt;a href=&quot;#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; takes care of this for you). In that case, you can call &lt;code&gt;get_script_prefix()&lt;/code&gt;, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="translated">일반적으로 응용 프로그램 내에서 URL을 정의 하려면 항상 &lt;a href=&quot;#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 를 사용해야 합니다. 그러나 응용 프로그램이 URL 계층 자체의 일부를 구성하는 경우 때때로 URL을 생성해야 할 수도 있습니다. 이 경우 웹 서버에서 Django 프로젝트의 기본 URL을 찾을 수 있어야합니다 (일반적으로 &lt;a href=&quot;#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 가이를 처리합니다). 이 경우 &lt;code&gt;get_script_prefix()&lt;/code&gt; 호출하면 Django 프로젝트 URL의 스크립트 접두사 부분이 반환됩니다. Django 프로젝트가 웹 서버의 루트에있는 경우 항상 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e93810e7ce2337ee98760b872339538f911e403d" translate="yes" xml:space="preserve">
          <source>Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely &lt;em&gt;replaces&lt;/em&gt; the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in &lt;code&gt;django.conf.settings.global_settings&lt;/code&gt; for the full list.</source>
          <target state="translated">일반적으로이 방식으로 기본값을 재정의 할 필요는 없습니다. Django 기본값은 안전하게 사용할 수 있도록 충분히 길들여져 있습니다. 새로운 기본 모듈을 전달 하면 Django 기본값을 완전히 &lt;em&gt;대체&lt;/em&gt; 하므로 가져 오는 해당 코드에서 사용될 수있는 모든 설정에 대한 값을 지정해야합니다. &lt;code&gt;django.conf.settings.global_settings&lt;/code&gt; 에서 전체 목록을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bf43317eddd783b9efbccb3bf152e0b1cdb043f" translate="yes" xml:space="preserve">
          <source>Normally, you won&amp;rsquo;t have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a &lt;code&gt;django.utils.functional.__proxy__&lt;/code&gt; object, it is a lazy translation. Calling &lt;code&gt;str()&lt;/code&gt; with the lazy translation as the argument will generate a string in the current locale.</source>
          <target state="translated">일반적으로 게으른 번역에 대해 걱정할 필요가 없습니다. 객체를 검사 할 때 &lt;code&gt;django.utils.functional.__proxy__&lt;/code&gt; 객체 라고 주장하는 경우 게으른 번역입니다. 인수로 지연 변환과 함께 &lt;code&gt;str()&lt;/code&gt; 을 호출 하면 현재 로케일에서 문자열이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="887896ca3cf9796c1df0cd00c7595e083f030487" translate="yes" xml:space="preserve">
          <source>Normally, you&amp;rsquo;ll only need to use &lt;code&gt;force_str()&lt;/code&gt;. Call it as early as possible on any input data that might be either a string or a bytestring, and from then on, you can treat the result as always being a string.</source>
          <target state="translated">일반적으로 &lt;code&gt;force_str()&lt;/code&gt; 만 사용 하면 됩니다. 문자열 또는 바이트 문자열 일 수있는 모든 입력 데이터에 대해 가능한 빨리 호출 한 다음 결과를 항상 문자열로 취급 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f226bb2d80ebbb2763506939a29736102f7ef23d" translate="yes" xml:space="preserve">
          <source>Normally, you&amp;rsquo;re either writing a Django field to match a particular database column type, or you will need a way to convert your data to, say, a string.</source>
          <target state="translated">일반적으로 특정 데이터베이스 열 유형과 일치하도록 장고 필드를 작성하거나 데이터를 문자열로 변환하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ce4466a62d04187676c02df4614fbce2c4ba7436" translate="yes" xml:space="preserve">
          <source>Not all backends support all functions, so refer to the documentation of each function to see if your database backend supports the function you want to use. If you call a geographic function on a backend that doesn&amp;rsquo;t support it, you&amp;rsquo;ll get a &lt;code&gt;NotImplementedError&lt;/code&gt; exception.</source>
          <target state="translated">모든 백엔드가 모든 기능을 지원하는 것은 아니므로 각 기능의 설명서를 참조하여 데이터베이스 백엔드가 사용하려는 기능을 지원하는지 확인하십시오. 이를 지원하지 않는 백엔드에서 geographic 함수를 호출하면 &lt;code&gt;NotImplementedError&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d9b293fdef69d661a6a9fab7edba5fc8c10298b9" translate="yes" xml:space="preserve">
          <source>Not all features of the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class are available through the &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and related wrapper functions. If you wish to use advanced features, such as BCC&amp;rsquo;ed recipients, file attachments, or multi-part email, you&amp;rsquo;ll need to create &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances directly.</source>
          <target state="translated">&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt; 및 관련 랩퍼 함수를 통해 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 클래스 의 모든 기능을 사용할 수 있는 것은 아닙니다 . 당신은 BCC'ed받는 사람, 첨부 파일, 또는 여러 부분으로 이메일과 같은 고급 기능을 사용하려면, 당신은 만들어야합니다 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 의&lt;/a&gt; 직접 인스턴스.</target>
        </trans-unit>
        <trans-unit id="affd0634cea2588f77f986208d4ea492e34b7daf" translate="yes" xml:space="preserve">
          <source>Not all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you&amp;rsquo;ll have to consider interactions between attributes and methods that overlap between the different classes you&amp;rsquo;re using, and how &lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;method resolution order&lt;/a&gt; will affect which versions of the methods will be called in what order.</source>
          <target state="translated">모든 믹스 인을 함께 사용할 수있는 것은 아니며 모든 일반 클래스 기반 뷰를 다른 모든 믹스 인과 함께 사용할 수있는 것은 아닙니다. 여기 우리는 작동하는 몇 가지 예를 제시합니다. 다른 기능을 함께 사용하려면 사용중인 여러 클래스간에 겹치는 속성과 메서드 간의 상호 작용 및 &lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;메서드 확인 순서&lt;/a&gt; 가 어떤 버전의 메서드가 어떤 순서로 호출되는지에 영향을주는 방식 을 고려해야합니다 .</target>
        </trans-unit>
        <trans-unit id="391ee549e2bdb434e349e78237a5df19f1d67675" translate="yes" xml:space="preserve">
          <source>Not contained within. This is the negation of the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">안에 포함되어 있지 않습니다. 이것은 &lt;code&gt;in&lt;/code&gt; 연산자 의 부정입니다 .</target>
        </trans-unit>
        <trans-unit id="d73f1f8457b1700a505f1a5f8a7aa88ca0436156" translate="yes" xml:space="preserve">
          <source>Not every &lt;code&gt;QuerySet&lt;/code&gt; method makes sense at the &lt;code&gt;Manager&lt;/code&gt; level; for instance we intentionally prevent the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;QuerySet.delete()&lt;/code&gt;&lt;/a&gt; method from being copied onto the &lt;code&gt;Manager&lt;/code&gt; class.</source>
          <target state="translated">모든 &lt;code&gt;QuerySet&lt;/code&gt; 메소드가 &lt;code&gt;Manager&lt;/code&gt; 레벨 에서 의미가있는 것은 아닙니다 . 예를 들어 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;QuerySet.delete()&lt;/code&gt; &lt;/a&gt; 메소드가 &lt;code&gt;Manager&lt;/code&gt; 클래스 에 복사되는 것을 의도적으로 방지합니다 .</target>
        </trans-unit>
        <trans-unit id="a63cbf6b4d6edab9e07d126c7a36e814a81f1ec6" translate="yes" xml:space="preserve">
          <source>Not every template in &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; may be overridden per app or per model. The following can:</source>
          <target state="translated">&lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; 의 모든 템플릿이 앱 또는 모델별로 재정의 되는 것은 아닙니다 . 다음이 가능합니다 :</target>
        </trans-unit>
        <trans-unit id="acba9927675c8a60aae9adcfef202f41a6c00c6d" translate="yes" xml:space="preserve">
          <source>Not found anything? See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/help/&quot;&gt;FAQ: Getting Help&lt;/a&gt; for information on getting support and asking questions to the community.</source>
          <target state="translated">아무것도 찾지 못 하셨나요? 지원을 받고 커뮤니티에 질문하는 방법에 대한 정보는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/help/&quot;&gt;FAQ : 도움말 얻기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2fc7fe98cf64c700ce9b0cc4bb17c0caec7c3361" translate="yes" xml:space="preserve">
          <source>Not represented in the form</source>
          <target state="translated">형태로 표시되지 않음</target>
        </trans-unit>
        <trans-unit id="d3f69563db3e7715296e2ae2d359c0c8bdd2cce0" translate="yes" xml:space="preserve">
          <source>Not using Django templates?</source>
          <target state="translated">Django 템플릿을 사용하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="296473149ccc264ba7b462302f22e07ee1613215" translate="yes" xml:space="preserve">
          <source>Note &lt;code&gt;{{ article.pub_date|date:&quot;F j, Y&quot; }}&lt;/code&gt; uses a Unix-style &amp;ldquo;pipe&amp;rdquo; (the &amp;ldquo;|&amp;rdquo; character). This is called a template filter, and it&amp;rsquo;s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP&amp;rsquo;s date function).</source>
          <target state="translated">참고 &lt;code&gt;{{ article.pub_date|date:&quot;F j, Y&quot; }}&lt;/code&gt; 는 Unix 스타일의 &quot;pipe&quot;( &quot;|&quot;문자)를 사용합니다. 이를 템플릿 필터라고하며 변수 값을 필터링하는 방법입니다. 이 경우 날짜 필터는 주어진 날짜 형식으로 Python datetime 객체의 형식을 지정합니다 (PHP의 날짜 함수에 있음).</target>
        </trans-unit>
        <trans-unit id="870a794d4d0468102a15a5fa5bb46615f6e62898" translate="yes" xml:space="preserve">
          <source>Note a few important things about how the test client works:</source>
          <target state="translated">테스트 클라이언트 작동 방식에 대한 몇 가지 중요한 사항에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="5da84070f0015820b57bc36610be733ca3294c24" translate="yes" xml:space="preserve">
          <source>Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected. To prevent this, pass &lt;code&gt;weak=False&lt;/code&gt; when you call the signal&amp;rsquo;s &lt;a href=&quot;../topics/signals#django.dispatch.Signal.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 기본적으로 신호 처리기를 약한 참조로 저장하므로 처리기가 로컬 함수 인 경우 가비지 수집 될 수 있습니다. 이를 방지하려면 신호의 &lt;a href=&quot;../topics/signals#django.dispatch.Signal.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 &lt;code&gt;weak=False&lt;/code&gt; 를 전달 하십시오 .</target>
        </trans-unit>
        <trans-unit id="14299bd3cea26d7db0d4aabfc73b1f096d5551d9" translate="yes" xml:space="preserve">
          <source>Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot;&gt;replay attacks&lt;/a&gt;. Unlike other session backends which keep a server-side record of each session and invalidate it when a user logs out, cookie-based sessions are not invalidated when a user logs out. Thus if an attacker steals a user&amp;rsquo;s cookie, they can use that cookie to login as that user even if the user logs out. Cookies will only be detected as &amp;lsquo;stale&amp;rsquo; if they are older than your &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt;&lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">MAC은 데이터의 신뢰성 (다른 사람이 아닌 귀하의 사이트에서 생성 한 것)과 데이터의 무결성 (모두 존재하고 정확함)을 보장 할 수 있지만 신선도를 보장 할 수는 없습니다. 당신은 당신이 클라이언트에게 마지막으로 보낸 것을 돌려받습니다. 즉, 세션 데이터를 일부 사용하는 경우 쿠키 백엔드가 &lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot;&gt;공격&lt;/a&gt; 을 재개 할 수 있습니다 . 각 세션의 서버 측 레코드를 유지하고 사용자가 로그 아웃 할 때이를 무효화하는 다른 세션 백엔드와 달리 쿠키 기반 세션은 사용자가 로그 아웃 할 때 무효화되지 않습니다. 따라서 공격자가 사용자 쿠키를 훔치는 경우 사용자가 로그 아웃하더라도 해당 쿠키를 사용하여 해당 사용자로 로그인 할 수 있습니다. 쿠키가 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt; &lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt; &lt;/a&gt; 보다 오래된 경우에만 쿠키가 '이야기'로 감지됩니다 .</target>
        </trans-unit>
        <trans-unit id="a33d9580056f5d9f9ef0f3f8d807edc652ece048" translate="yes" xml:space="preserve">
          <source>Note also that you can only inherit from one generic view - that is, only one parent class may inherit from &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and the rest (if any) should be mixins. Trying to inherit from more than one class that inherits from &lt;code&gt;View&lt;/code&gt; - for example, trying to use a form at the top of a list and combining &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ProcessFormView&quot;&gt;&lt;code&gt;ProcessFormView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; - won&amp;rsquo;t work as expected.</source>
          <target state="translated">또한 하나의 일반 뷰에서만 상속 할 수 있습니다. 즉, 하나의 상위 클래스 만 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 에서 상속 할 수 있으며 나머지 클래스 (있는 경우)는 믹스 인이어야합니다. 예를 들어 목록의 맨 위에 양식을 사용하고 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ProcessFormView&quot;&gt; &lt;code&gt;ProcessFormView&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; 를&lt;/a&gt; 결합하는 등 &lt;code&gt;View&lt;/code&gt; 에서 상속되는 둘 이상의 클래스에서 상속 하려고하면 예상대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9582cd85442dd5db57f039a1ee4d57e14418eb91" translate="yes" xml:space="preserve">
          <source>Note also, that if you delete an object that has a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;, any objects which have a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; pointing at it will be deleted as well. In the example above, this means that if a &lt;code&gt;Bookmark&lt;/code&gt; object were deleted, any &lt;code&gt;TaggedItem&lt;/code&gt; objects pointing at it would be deleted at the same time.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; &lt;/a&gt; 이있는 객체를 삭제하면 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 가있는 객체 도 삭제됩니다. 위의 예에서 이는 &lt;code&gt;Bookmark&lt;/code&gt; 객체가 삭제 된 경우 이를 가리키는 &lt;code&gt;TaggedItem&lt;/code&gt; 객체가 동시에 삭제됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="afb22d70274d73a3af0a11a9efbc7601c6cffe84" translate="yes" xml:space="preserve">
          <source>Note however that not all these methods are required and may be deliberately omitted. As it happens, it is possible to leave each method unimplemented and still have a working Storage.</source>
          <target state="translated">그러나 이러한 방법이 모두 필요한 것은 아니며 일부러 생략 할 수도 있습니다. 이와 같이 각 방법을 구현하지 않은 채로 두어도 여전히 작동하는 스토리지를 보유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a281167ca6f3f3d6ce6cf851b7d39c49313bd017" translate="yes" xml:space="preserve">
          <source>Note on performance</source>
          <target state="translated">성능에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="8edc7ffdd6f4a3b096034148187e765e050e9ef8" translate="yes" xml:space="preserve">
          <source>Note that &amp;ldquo;bar&amp;rdquo; in a template expression like &lt;code&gt;{{ foo.bar }}&lt;/code&gt; will be interpreted as a literal string and not using the value of the variable &amp;ldquo;bar&amp;rdquo;, if one exists in the template context.</source>
          <target state="translated">&lt;code&gt;{{ foo.bar }}&lt;/code&gt; 와 같은 템플리트 표현식에서 &quot;bar&quot; 는 리터럴 문자열로 해석되며 템플리트 컨텍스트에 변수 &quot;bar&quot;의 값이 있으면이를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="afe31081e1c0a0c22ce8c03c79b6e9fe781b5cdf" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; also takes an optional &lt;code&gt;login_url&lt;/code&gt; parameter:</source>
          <target state="translated">참고 &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt; 선택 사양합니다 &lt;code&gt;login_url&lt;/code&gt; 매개 변수를 :</target>
        </trans-unit>
        <trans-unit id="5935aa7699bc39ae3d2e0a6a74be308015833cce" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt;&lt;code&gt;logout()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t throw any errors if the user wasn&amp;rsquo;t logged in.</source>
          <target state="translated">참고 &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt; &lt;code&gt;logout()&lt;/code&gt; &lt;/a&gt; 사용자가 로그인하지 않은 경우 오류가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5a560efe9ed69acab07d99a89a77ed4ccc33f23" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; are mutually exclusive, so only set one of those settings to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">참고 &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; 이&lt;/a&gt; 너무 만에 그 설정 중 하나를 설정, 상호 배타적 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3a5ff144d4383f6e080bcaf3e8709508673fa55" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; is the only &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; method that is not exposed on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; itself. This is a safety mechanism to prevent you from accidentally requesting &lt;code&gt;Entry.objects.delete()&lt;/code&gt;, and deleting &lt;em&gt;all&lt;/em&gt; the entries. If you &lt;em&gt;do&lt;/em&gt; want to delete all the objects, then you have to explicitly request a complete query set:</source>
          <target state="translated">참고 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 만입니다 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; (A)에 노출되지 않는 방법 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 자체가. 이것은 실수로 &lt;code&gt;Entry.objects.delete()&lt;/code&gt; 요청 하고 &lt;em&gt;모든&lt;/em&gt; 항목을 삭제 하지 못하게하는 안전 메커니즘 입니다. 당신이 경우 &lt;em&gt;않는&lt;/em&gt; 모든 개체를 삭제하려면, 당신은 명시 적으로 완전한 쿼리 세트를 요청해야 :</target>
        </trans-unit>
        <trans-unit id="efbe9c61755a3354107632b1df1edcfca88d5654" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; will only contain data if the request method was &lt;code&gt;POST&lt;/code&gt; and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted the request has the attribute &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;. Otherwise, &lt;code&gt;request.FILES&lt;/code&gt; will be empty.</source>
          <target state="translated">참고 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; 가&lt;/a&gt; 요청 방법 인 경우에만 데이터를 포함 &lt;code&gt;POST&lt;/code&gt; 및 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 상기 요청을 게시 속성 보유 &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; . 그렇지 않으면 &lt;code&gt;request.FILES&lt;/code&gt; 가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0796c678d8887176b4064744ab4bf371a4b7ac7" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; will only contain data if the request method was &lt;code&gt;POST&lt;/code&gt;, at least one file field was actually posted, and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted the request has the attribute &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;. Otherwise, &lt;code&gt;request.FILES&lt;/code&gt; will be empty.</source>
          <target state="translated">참고 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; 가&lt;/a&gt; 요청 방법 인 경우에만 데이터가 포함됩니다 &lt;code&gt;POST&lt;/code&gt; 적어도 하나의 파일 필드가 실제로 게시하고, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요청을 게시 속성이 &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; . 그렇지 않으면 &lt;code&gt;request.FILES&lt;/code&gt; 가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="114ec4ae4f7b3f1c9ee023cbb2f4ae83341a7264" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;, which is the base class for all Django database API &lt;code&gt;DoesNotExist&lt;/code&gt; exceptions, has &lt;code&gt;silent_variable_failure = True&lt;/code&gt;. So if you&amp;rsquo;re using Django templates with Django model objects, any &lt;code&gt;DoesNotExist&lt;/code&gt; exception will fail silently.</source>
          <target state="translated">참고 &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; &lt;/a&gt; 모든 장고 데이터베이스 API의 기본 클래스입니다, &lt;code&gt;DoesNotExist&lt;/code&gt; 의 예외가있다 &lt;code&gt;silent_variable_failure = True&lt;/code&gt; . 따라서 Django 모델 객체와 함께 Django 템플릿을 사용하는 경우 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외가 자동으로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="12f148b2871d0ee0ac320bfab0d6043b1e56d19b" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; strips all headers with underscores in the name, so you won&amp;rsquo;t see them in &lt;code&gt;META&lt;/code&gt;. This prevents header-spoofing based on ambiguity between underscores and dashes both being normalizing to underscores in WSGI environment variables. It matches the behavior of Web servers like Nginx and Apache 2.4+.</source>
          <target state="translated">그주의 &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 당신이 그들을 볼 수 없습니다, 그래서 이름에 밑줄을 가지는 모든 헤더를 제거합니다 &lt;code&gt;META&lt;/code&gt; . 이는 밑줄과 대시 사이의 모호성을 기반으로하는 헤더 스푸핑이 WSGI 환경 변수에서 밑줄로 정규화되는 것을 방지합니다. Nginx 및 Apache 2.4 이상과 같은 웹 서버의 동작과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="51299edb450e554bd78f74b0809db32387011d1a" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt; has a complementary method &lt;a href=&quot;fields#django.forms.MultiValueField.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; with the opposite responsibility - to combine cleaned values of all member fields into one.</source>
          <target state="translated">참고 &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; 는&lt;/a&gt; 상보 방식 갖는 &lt;a href=&quot;fields#django.forms.MultiValueField.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt; 반대의 책임 - 하나로 모든 멤버 필드의 정리 값을 결합한다.</target>
        </trans-unit>
        <trans-unit id="174125b977abe383ebe027c7283e688f70171a40" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Form.add_error()&lt;/code&gt; automatically removes the relevant field from &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">참고 &lt;code&gt;Form.add_error()&lt;/code&gt; 자동에서 관련 필드를 제거 &lt;code&gt;cleaned_data&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4591c68c233751182879e8ea4c7ab5f0a044d31a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; all apply database changes immediately for all types of related fields. In other words, there is no need to call &lt;code&gt;save()&lt;/code&gt; on either end of the relationship.</source>
          <target state="translated">참고 &lt;code&gt;add()&lt;/code&gt; , &lt;code&gt;create()&lt;/code&gt; , &lt;code&gt;remove()&lt;/code&gt; , &lt;code&gt;clear()&lt;/code&gt; 와 &lt;code&gt;set()&lt;/code&gt; 모든 데이터베이스 관련 분야의 모든 종류의 즉시 변경 적용됩니다. 즉, 관계의 양쪽 끝에서 &lt;code&gt;save()&lt;/code&gt; 를 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="90ef74f6371e10a6782d0c647e7ce73f1b8c10a7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;django.conf.settings&lt;/code&gt; isn&amp;rsquo;t a module &amp;ndash; it&amp;rsquo;s an object. So importing individual settings is not possible:</source>
          <target state="translated">참고 &lt;code&gt;django.conf.settings&lt;/code&gt; 하는 모듈 아니다 - 그것은 객체입니다. 따라서 개별 설정을 가져올 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4d70a240827ed6a63d96ee2feb5521ee6e8c53d8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;dumpdata&lt;/code&gt; uses the default manager on the model for selecting the records to dump. If you&amp;rsquo;re using a &lt;a href=&quot;../topics/db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt; as the default manager and it filters some of the available records, not all of the objects will be dumped.</source>
          <target state="translated">참고 &lt;code&gt;dumpdata&lt;/code&gt; 가 덤프 레코드를 선택하는 모델에 기본 관리자를 사용합니다. &lt;a href=&quot;../topics/db/managers#custom-managers&quot;&gt;사용자 정의 관리자&lt;/a&gt; 를 기본 관리자 로 사용하고 사용 가능한 일부 레코드를 필터링하면 모든 오브젝트가 덤프되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="617474170b52d9ea43a8f37beddaa5594df33958" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; exist purely for convenience and readability.</source>
          <target state="translated">참고 &lt;code&gt;earliest()&lt;/code&gt; 와 &lt;code&gt;latest()&lt;/code&gt; 편의성과 가독성을 위해 순수하게 존재한다.</target>
        </trans-unit>
        <trans-unit id="60bc6baf0f131a6ccb397c320fca68e1cf2cb32d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;first()&lt;/code&gt; is a convenience method, the following code sample is equivalent to the above example:</source>
          <target state="translated">참고 &lt;code&gt;first()&lt;/code&gt; 편리한 방법으로서, 다음의 코드 샘플은 상기 실시 예에 해당이다 :</target>
        </trans-unit>
        <trans-unit id="2477105d4945a87d3531b00f61d9dfbbde81b7a1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;full_clean()&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be called automatically when you call your model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method. You&amp;rsquo;ll need to call it manually when you want to run one-step model validation for your own manually created models. For example:</source>
          <target state="translated">참고 &lt;code&gt;full_clean()&lt;/code&gt; 것입니다 &lt;em&gt;하지&lt;/em&gt; 당신이 모델의 호출 할 때 자동으로 호출 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드를. 직접 만든 모델에 대해 1 단계 모델 유효성 검사를 실행하려면 수동으로 호출해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b60eaaa655b6061f0ff964b2c7c786fae5248e6d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;localize&lt;/code&gt; is a pytz extension to the &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; API. Also, you may want to catch &lt;code&gt;pytz.InvalidTimeError&lt;/code&gt;. The documentation of pytz contains &lt;a href=&quot;http://pytz.sourceforge.net/#example-usage&quot;&gt;more examples&lt;/a&gt;. You should review it before attempting to manipulate aware datetimes.</source>
          <target state="translated">하는 것으로 &lt;code&gt;localize&lt;/code&gt; 에 pytz 확장이다 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; 의&lt;/a&gt; API. 또한 &lt;code&gt;pytz.InvalidTimeError&lt;/code&gt; 를 잡을 수도 있습니다. pytz 문서에는 &lt;a href=&quot;http://pytz.sourceforge.net/#example-usage&quot;&gt;더 많은 예제&lt;/a&gt; 가 포함되어 있습니다 . 인식 된 날짜 시간을 조작하기 전에 검토해야합니다.</target>
        </trans-unit>
        <trans-unit id="fcff2e0ec8bf12bd9fd1d74a3726364370255148" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;output_field&lt;/code&gt; is only required when Django is unable to determine what field type the result should be. Complex expressions that mix field types should define the desired &lt;code&gt;output_field&lt;/code&gt;. For example, adding an &lt;code&gt;IntegerField()&lt;/code&gt; and a &lt;code&gt;FloatField()&lt;/code&gt; together should probably have &lt;code&gt;output_field=FloatField()&lt;/code&gt; defined.</source>
          <target state="translated">참고 &lt;code&gt;output_field&lt;/code&gt; 이 장고 결과가 있어야합니다 어떤 필드 유형을 확인 할 수없는 경우에만 필요합니다. 필드 유형을 혼합하는 복잡한 표현식은 원하는 &lt;code&gt;output_field&lt;/code&gt; 를 정의해야합니다 . 예를 들어 &lt;code&gt;IntegerField()&lt;/code&gt; 와 &lt;code&gt;FloatField()&lt;/code&gt; 함께 추가하면 &lt;code&gt;output_field=FloatField()&lt;/code&gt; 정의 되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="3e0000d6c434afcf6f1baf1d4b21199b5b33c66a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;page&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be either a valid page number or the value &lt;code&gt;last&lt;/code&gt;; any other value for &lt;code&gt;page&lt;/code&gt; will result in a 404 error.</source>
          <target state="translated">참고 &lt;code&gt;page&lt;/code&gt; &lt;em&gt;있어야&lt;/em&gt; 유효한 페이지 번호 또는 값이 될 &lt;code&gt;last&lt;/code&gt; ; &lt;code&gt;page&lt;/code&gt; 의 다른 값 은 404 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="4fa87508d78ed938ea3b53c04e6e8bac6e4c0d53" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;pnt&lt;/code&gt; may also be constructed with EWKT, an &amp;ldquo;extended&amp;rdquo; form of WKT that includes the SRID:</source>
          <target state="translated">참고 &lt;code&gt;pnt&lt;/code&gt; 또한 EWKT 상기 SRID 포함 WKT의 &quot;확장&quot;형태로 구성 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="69afc1bd88ec7db55e0a8541d45277ff4bd45240" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;render()&lt;/code&gt; returns the empty string. &lt;code&gt;render()&lt;/code&gt; should always return string output. If all the template tag does is set a variable, &lt;code&gt;render()&lt;/code&gt; should return the empty string.</source>
          <target state="translated">참고 &lt;code&gt;render()&lt;/code&gt; 빈 문자열을 반환합니다. &lt;code&gt;render()&lt;/code&gt; 는 항상 문자열 출력을 반환해야합니다. 모든 템플릿 태그가 변수를 설정하면 &lt;code&gt;render()&lt;/code&gt; 는 빈 문자열을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="eeadeb6021da41a361ee20d5764d2103bff4b20d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;sqlmigrate&lt;/code&gt; doesn&amp;rsquo;t colorize its output.</source>
          <target state="translated">참고 &lt;code&gt;sqlmigrate&lt;/code&gt; 출력을 색상 화하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f4ef6ae7ec0603ef3df71659f00737594af30ccc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;striptags&lt;/code&gt; doesn&amp;rsquo;t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So &lt;strong&gt;NEVER&lt;/strong&gt; apply the &lt;code&gt;safe&lt;/code&gt; filter to a &lt;code&gt;striptags&lt;/code&gt; output. If you are looking for something more robust, you can use the &lt;code&gt;bleach&lt;/code&gt; Python library, notably its &lt;a href=&quot;https://bleach.readthedocs.io/en/latest/clean.html&quot;&gt;clean&lt;/a&gt; method.</source>
          <target state="translated">참고 &lt;code&gt;striptags&lt;/code&gt; 은 특히 비 유효한 HTML 입력을, 그 출력 존재의 HTML의 안전에 대한 보증을 제공하지 않습니다. 따라서 &lt;code&gt;safe&lt;/code&gt; 필터를 &lt;code&gt;striptags&lt;/code&gt; 출력에 적용하지 &lt;strong&gt;마십시오&lt;/strong&gt; . 더 강력한 것을 찾고 있다면 &lt;code&gt;bleach&lt;/code&gt; 파이썬 라이브러리, 특히 &lt;a href=&quot;https://bleach.readthedocs.io/en/latest/clean.html&quot;&gt;깨끗한&lt;/a&gt; 방법을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e6c1a0bf2d18380514c058c2103f2660189ecd36" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;{% regroup %}&lt;/code&gt; does not order its input! Our example relies on the fact that the &lt;code&gt;cities&lt;/code&gt; list was ordered by &lt;code&gt;country&lt;/code&gt; in the first place. If the &lt;code&gt;cities&lt;/code&gt; list did &lt;em&gt;not&lt;/em&gt; order its members by &lt;code&gt;country&lt;/code&gt;, the regrouping would naively display more than one group for a single country. For example, say the &lt;code&gt;cities&lt;/code&gt; list was set to this (note that the countries are not grouped together):</source>
          <target state="translated">참고 &lt;code&gt;{% regroup %}&lt;/code&gt; 입력을 주문하지 않습니다! 이 예는 &lt;code&gt;cities&lt;/code&gt; 목록이 &lt;code&gt;country&lt;/code&gt; 주문 된 사실에 의존합니다 . 는 IF &lt;code&gt;cities&lt;/code&gt; 목록 않았다 &lt;em&gt;하지&lt;/em&gt; 에 의해 회원을 주문 &lt;code&gt;country&lt;/code&gt; 의 재편성 순진하게도 단일 국가에 대해 둘 이상의 그룹을 표시합니다. 예를 들어 &lt;code&gt;cities&lt;/code&gt; 목록이 다음과 같이 설정되어 있다고 가정합니다 (국가는 함께 그룹화되지 않음).</target>
        </trans-unit>
        <trans-unit id="555959baa50f98a7ff375b125440d82908185be5" translate="yes" xml:space="preserve">
          <source>Note that Django also provides &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.GET&quot;&gt;&lt;code&gt;request.GET&lt;/code&gt;&lt;/a&gt; for accessing GET data in the same way &amp;ndash; but we&amp;rsquo;re explicitly using &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;request.POST&lt;/code&gt;&lt;/a&gt; in our code, to ensure that data is only altered via a POST call.</source>
          <target state="translated">Django는 동일한 방식으로 GET 데이터에 액세스하기 위해 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.GET&quot;&gt; &lt;code&gt;request.GET&lt;/code&gt; &lt;/a&gt; 도 제공합니다. 그러나 코드에서 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;request.POST&lt;/code&gt; &lt;/a&gt; 를 명시 적으로 사용하여 POST 호출을 통해서만 데이터가 변경되도록합니다.</target>
        </trans-unit>
        <trans-unit id="5a86bd35e7d0371b683012acf70b7110506f8792" translate="yes" xml:space="preserve">
          <source>Note that a callable (with the parentheses omitted) is passed to &lt;code&gt;default&lt;/code&gt;, not an instance of &lt;code&gt;UUID&lt;/code&gt;.</source>
          <target state="translated">괄호가 생략 된 callable 은 &lt;code&gt;UUID&lt;/code&gt; 인스턴스가 아닌 &lt;code&gt;default&lt;/code&gt; 로 전달 됩니다 .</target>
        </trans-unit>
        <trans-unit id="769f71352d570fcd1ad93b9334853d28dc71b571" translate="yes" xml:space="preserve">
          <source>Note that a settings file should &lt;em&gt;not&lt;/em&gt; import from &lt;code&gt;global_settings&lt;/code&gt;, because that&amp;rsquo;s redundant.</source>
          <target state="translated">설정 파일은 &lt;code&gt;global_settings&lt;/code&gt; 에서 가져 와서 는 &lt;em&gt;안됩니다&lt;/em&gt; . 중복 된 것이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="91d33e115058c62ed3b06406e2b16a18f7403773" translate="yes" xml:space="preserve">
          <source>Note that all subsequent PDF-generation methods are called on the PDF object (in this case, &lt;code&gt;p&lt;/code&gt;) &amp;ndash; not on &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">이후의 모든 PDF 생성 메소드는 &lt;code&gt;buffer&lt;/code&gt; 가 아니라 PDF 객체 (이 경우 &lt;code&gt;p&lt;/code&gt; ) 에서 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2720462e729bf12c9dc1637761930abaf6e5302" translate="yes" xml:space="preserve">
          <source>Note that although this function uses &lt;code&gt;str.format()&lt;/code&gt; to do the interpolation, some of the formatting options provided by &lt;code&gt;str.format()&lt;/code&gt; (e.g. number formatting) will not work, since all arguments are passed through &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt;&lt;code&gt;conditional_escape()&lt;/code&gt;&lt;/a&gt; which (ultimately) calls &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt;&lt;code&gt;force_str()&lt;/code&gt;&lt;/a&gt; on the values.</source>
          <target state="translated">참고이 기능의 사용에 있지만 &lt;code&gt;str.format()&lt;/code&gt; 보간을 수행하려면에서 제공하는 서식 옵션 중 일부 &lt;code&gt;str.format()&lt;/code&gt; (예 : 숫자 서식)하지 않습니다 작업, 모든 인수를 통해 전달되기 때문에 &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt; &lt;code&gt;conditional_escape()&lt;/code&gt; &lt;/a&gt; 하는 (궁극적으로) 값에 대해 &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt; &lt;code&gt;force_str()&lt;/code&gt; &lt;/a&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="1655d49d10104c3e29e68482b9119e277e90f07d" translate="yes" xml:space="preserve">
          <source>Note that an even more flexible (but more heavyweight) way of doing this would be to use Django&amp;rsquo;s template system. Assuming Lawrence.com and LJWorld.com have different template directories (&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;), you could farm out to the template system like so:</source>
          <target state="translated">이 작업을 수행하는 훨씬 더 유연하지만 더 무거운 방법은 Django의 템플릿 시스템을 사용하는 것입니다. Lawrence.com과 LJWorld.com에 서로 다른 템플릿 디렉토리 ( &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; ) 가 있다고 가정하면 다음과 같이 템플릿 시스템으로 팜 아웃 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a03be98ba22733726f31548200c2a1eb13fd38d0" translate="yes" xml:space="preserve">
          <source>Note that any data set during the anonymous session is retained in the session after a user logs in.</source>
          <target state="translated">익명 세션 동안 설정된 모든 데이터는 사용자가 로그인 한 후에 세션에 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="5e76af3cfee25aa8aedca5c9cce37758a092a5a5" translate="yes" xml:space="preserve">
          <source>Note that any errors raised by your &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; override will not be associated with any field in particular. They go into a special &amp;ldquo;field&amp;rdquo; (called &lt;code&gt;__all__&lt;/code&gt;), which you can access via the &lt;a href=&quot;api#django.forms.Form.non_field_errors&quot;&gt;&lt;code&gt;non_field_errors()&lt;/code&gt;&lt;/a&gt; method if you need to. If you want to attach errors to a specific field in the form, you need to call &lt;a href=&quot;api#django.forms.Form.add_error&quot;&gt;&lt;code&gt;add_error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;api#django.forms.Form.clean&quot;&gt; &lt;code&gt;Form.clean()&lt;/code&gt; &lt;/a&gt; 재정의로 발생한 오류 는 특정 필드와 관련이 없습니다. 특수한 &quot;필드&quot;( &lt;code&gt;__all__&lt;/code&gt; ) 로 이동하여 필요한 경우 &lt;a href=&quot;api#django.forms.Form.non_field_errors&quot;&gt; &lt;code&gt;non_field_errors()&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 액세스 할 수 있습니다 . 양식의 특정 필드에 오류를 첨부하려면 &lt;a href=&quot;api#django.forms.Form.add_error&quot;&gt; &lt;code&gt;add_error()&lt;/code&gt; &lt;/a&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bb7f74b1561095f41f3d18b56dd6375c9ec3906f" translate="yes" xml:space="preserve">
          <source>Note that any of Django&amp;rsquo;s default admin templates can be overridden. To override a template, do the same thing you did with &lt;code&gt;base_site.html&lt;/code&gt; &amp;ndash; copy it from the default directory into your custom directory, and make changes.</source>
          <target state="translated">Django의 기본 관리자 템플릿은 무시할 수 있습니다. 템플릿을 재정의하려면 &lt;code&gt;base_site.html&lt;/code&gt; 에서와 동일한 작업을 수행하십시오 . 기본 디렉토리에서 사용자 정의 디렉토리로 복사하고 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="239df39fbba56c17e5c95caf2ecf410c00f83202" translate="yes" xml:space="preserve">
          <source>Note that any text-based field &amp;ndash; such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;EmailField&lt;/code&gt; &amp;ndash; always cleans the input into a string. We&amp;rsquo;ll cover the encoding implications later in this document.</source>
          <target state="translated">&lt;code&gt;CharField&lt;/code&gt; 또는 &lt;code&gt;EmailField&lt;/code&gt; 와 같은 텍스트 기반 필드는 항상 입력을 문자열로 정리합니다. 이 문서의 뒷부분에서 인코딩의 의미를 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="7bedfd96029424831aed4722f0eb96eed865f31a" translate="yes" xml:space="preserve">
          <source>Note that as the method is now a property, in Python code it will need to be accessed appropriately:</source>
          <target state="translated">메소드는 이제 속성이므로 Python 코드에서는 적절하게 액세스해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe32d6c5f76eb9f75c146ee626da625540f82c24" translate="yes" xml:space="preserve">
          <source>Note that calling &lt;code&gt;django.setup()&lt;/code&gt; is only necessary if your code is truly standalone. When invoked by your Web server, or through &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin&lt;/a&gt;, Django will handle this for you.</source>
          <target state="translated">&lt;code&gt;django.setup()&lt;/code&gt; 호출 은 코드가 실제로 독립형 인 경우에만 필요합니다. 웹 서버 또는 &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin을&lt;/a&gt; 통해 Django가이를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="3bc381cc771bad16450ca029b7c0214227351136" translate="yes" xml:space="preserve">
          <source>Note that choices can be any sequence object &amp;ndash; not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; to be dynamic, you&amp;rsquo;re probably better off using a proper database table with a &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; is meant for static data that doesn&amp;rsquo;t change much, if ever.</source>
          <target state="translated">선택은 목록이나 튜플 일 필요는없는 임의의 시퀀스 객체 일 수 있습니다. 이를 통해 선택 사항을 동적으로 구성 할 수 있습니다. 그러나 해킹 &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 이 동적이라는 것을 알게되면 &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 와 함께 적절한 데이터베이스 테이블을 사용하는 것이 좋습니다 . &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 은 정적 데이터가 큰 변화가없는 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="23311557d1c1b4a3bc91b67a7dcbb2a15f706caf" translate="yes" xml:space="preserve">
          <source>Note that command options that take no arguments are passed as keywords with &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, as you can see with the &lt;code&gt;interactive&lt;/code&gt; option above.</source>
          <target state="translated">위 의 &lt;code&gt;interactive&lt;/code&gt; 옵션에서 볼 수 있듯이 인수를 사용하지 않는 명령 옵션은 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 를 사용하여 키워드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="771c36984deec4007d5e353a2afde4a1288b3d14" translate="yes" xml:space="preserve">
          <source>Note that each form field has an ID attribute set to &lt;code&gt;id_&amp;lt;field-name&amp;gt;&lt;/code&gt;, which is referenced by the accompanying label tag. This is important in ensuring that forms are accessible to assistive technology such as screen reader software. You can also &lt;a href=&quot;../../ref/forms/api#ref-forms-api-configuring-label&quot;&gt;customize the way in which labels and ids are generated&lt;/a&gt;.</source>
          <target state="translated">각 양식 필드에는 ID 속성이 &lt;code&gt;id_&amp;lt;field-name&amp;gt;&lt;/code&gt; 으로 설정되어 있으며 이는 레이블 레이블로 참조됩니다. 화면 판독기 소프트웨어와 같은 보조 기술에서 양식에 액세스 할 수 있도록하는 것이 중요합니다. &lt;a href=&quot;../../ref/forms/api#ref-forms-api-configuring-label&quot;&gt;레이블과 ID가 생성되는 방식을 사용자 정의&lt;/a&gt; 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3bdfccd500eb934555bb43b9a29d41da73c40d02" translate="yes" xml:space="preserve">
          <source>Note that each process will have its own private cache instance, which means no cross-process caching is possible. This also means the local memory cache isn&amp;rsquo;t particularly memory-efficient, so it&amp;rsquo;s probably not a good choice for production environments. It&amp;rsquo;s nice for development.</source>
          <target state="translated">각 프로세스에는 자체 개인 캐시 인스턴스가 있으므로 크로스 프로세스 캐싱이 불가능합니다. 이것은 또한 로컬 메모리 캐시가 특히 메모리 효율적이지 않기 때문에 프로덕션 환경에 적합하지 않을 수 있음을 의미합니다. 개발에 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1f0445bbbacae2bc87d1553017a414c56d8a13c4" translate="yes" xml:space="preserve">
          <source>Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn&amp;rsquo;t particularly memory-efficient, so it&amp;rsquo;s probably not a good choice for production environments. It&amp;rsquo;s nice for development.</source>
          <target state="translated">각 프로세스에는 자체 프라이빗 캐시 인스턴스가 있으므로 프로세스 간 캐싱이 불가능합니다. 이것은 또한 로컬 메모리 캐시가 특히 메모리 효율적이지 않다는 것을 의미하므로 프로덕션 환경에는 적합하지 않을 수 있습니다. 개발하기에 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a2eeff486edfad4d9520b6f22313f2e3567d2e11" translate="yes" xml:space="preserve">
          <source>Note that extra options will &lt;em&gt;always&lt;/em&gt; be passed to &lt;em&gt;every&lt;/em&gt; line in the included URLconf, regardless of whether the line&amp;rsquo;s view actually accepts those options as valid. For this reason, this technique is only useful if you&amp;rsquo;re certain that every view in the included URLconf accepts the extra options you&amp;rsquo;re passing.</source>
          <target state="translated">행의보기가 실제로 해당 옵션을 유효한 것으로 허용하는지 여부에 관계없이 포함 된 URLconf의 &lt;em&gt;모든&lt;/em&gt; 행에 추가 옵션이 &lt;em&gt;항상&lt;/em&gt; 전달됩니다 . 이러한 이유로이 기술은 포함 된 URLconf의 모든보기가 전달하는 추가 옵션을 허용하는 경우에만 유용합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="92c628e1fbd6a9010f3d0db034ba40cb41449dee" translate="yes" xml:space="preserve">
          <source>Note that having the view instance in the template context may expose potentially hazardous methods to template authors. To prevent methods like this from being called in the template, set &lt;code&gt;alters_data=True&lt;/code&gt; on those methods. For more information, read the documentation on &lt;a href=&quot;../templates/api#alters-data-description&quot;&gt;rendering a template context&lt;/a&gt;.</source>
          <target state="translated">템플릿 컨텍스트에 뷰 인스턴스가 있으면 잠재적으로 위험한 방법을 템플릿 작성자에게 노출시킬 수 있습니다. 이와 같은 메소드가 템플리트에서 호출되지 않도록하려면 해당 메소드에서 &lt;code&gt;alters_data=True&lt;/code&gt; 를 설정 하십시오 . 자세한 내용 &lt;a href=&quot;../templates/api#alters-data-description&quot;&gt;은 템플릿 컨텍스트 렌더링에 대한&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="98f6de66c762486638954c88d910ab00b17debe3" translate="yes" xml:space="preserve">
          <source>Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied.</source>
          <target state="translated">경우 유의 &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; 후 해당 로케일 지시 포맷 높은 우선 순위를 가지고 적용된다.</target>
        </trans-unit>
        <trans-unit id="50d31d0e0ebd30e972979684ec82c5fb17e9796a" translate="yes" xml:space="preserve">
          <source>Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead.</source>
          <target state="translated">참고 경우 것으로 &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; , 다음 로케일 구술 형식은 높은 우선 순위를 가지고 있으며, 대신 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="49e296c8c84c9dd47aab0634b92f9ddef9e72e21" translate="yes" xml:space="preserve">
          <source>Note that if a &lt;code&gt;ModelChoiceField&lt;/code&gt; is required and has a default initial value, no empty choice is created (regardless of the value of &lt;code&gt;empty_label&lt;/code&gt;).</source>
          <target state="translated">경우주의 &lt;code&gt;ModelChoiceField&lt;/code&gt; 가 필요하고 기본 초기 값을 가지고 있습니다, 빈 선택 (관계없이 값의 생성되지 않습니다 &lt;code&gt;empty_label&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a602110fb64a1dd4cb469f056ba8051460109907" translate="yes" xml:space="preserve">
          <source>Note that if an empty string is given, the default value will &lt;em&gt;not&lt;/em&gt; be used. Use the &lt;a href=&quot;#std:templatefilter-default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; filter if you want to fallback for empty strings.</source>
          <target state="translated">빈 문자열이 제공되면 기본값 이 사용 &lt;em&gt;되지 않습니다&lt;/em&gt; . 빈 문자열에 대해 대체 하려면 &lt;a href=&quot;#std:templatefilter-default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; 필터를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="80730ee1d592ce07bf82235a3404e06b9d3abf66" translate="yes" xml:space="preserve">
          <source>Note that if the URL you&amp;rsquo;re reversing doesn&amp;rsquo;t exist, you&amp;rsquo;ll get an &lt;a href=&quot;../exceptions#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception raised, which will cause your site to display an error page.</source>
          <target state="translated">되 돌리는 URL이 존재하지 않으면 &lt;a href=&quot;../exceptions#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt; 예외가 발생하여 사이트에 오류 페이지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3e45a85a7dcecfdfcfb4389a347188b10434abde" translate="yes" xml:space="preserve">
          <source>Note that if the form &lt;a href=&quot;#validation-on-modelform&quot;&gt;hasn&amp;rsquo;t been validated&lt;/a&gt;, calling &lt;code&gt;save()&lt;/code&gt; will do so by checking &lt;code&gt;form.errors&lt;/code&gt;. A &lt;code&gt;ValueError&lt;/code&gt; will be raised if the data in the form doesn&amp;rsquo;t validate &amp;ndash; i.e., if &lt;code&gt;form.errors&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">양식의 &lt;a href=&quot;#validation-on-modelform&quot;&gt;유효성이 검사되지 않은&lt;/a&gt; 경우 &lt;code&gt;save()&lt;/code&gt; 를 호출 하면 &lt;code&gt;form.errors&lt;/code&gt; 를 검사하여 수행 합니다. &lt;code&gt;ValueError&lt;/code&gt; 형태의 데이터가없는 검증 않는 경우 발생합니다 - 즉, 경우 &lt;code&gt;form.errors&lt;/code&gt; 의 평가됩니다에 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61f3ec02092015ed9d1f89e12937af6bb0ee587e" translate="yes" xml:space="preserve">
          <source>Note that if the tests are run on a database with no transaction support (for instance, MySQL with the MyISAM engine), &lt;code&gt;setUpTestData()&lt;/code&gt; will be called before each test, negating the speed benefits.</source>
          <target state="translated">트랜잭션 지원이없는 데이터베이스 (예 : MyISAM 엔진이있는 MySQL)에서 테스트를 실행하면 각 테스트 전에 &lt;code&gt;setUpTestData()&lt;/code&gt; 가 호출되어 속도 이점을 무시 합니다.</target>
        </trans-unit>
        <trans-unit id="a758f5f8e960e50154e5596b9c6aefae0ab85207" translate="yes" xml:space="preserve">
          <source>Note that if two fixtures with the same name but different fixture type are discovered (for example, if &lt;code&gt;mydata.json&lt;/code&gt; and &lt;code&gt;mydata.xml.gz&lt;/code&gt; were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to &lt;code&gt;loaddata&lt;/code&gt; will be removed from the database.</source>
          <target state="translated">이름이 같지만 고정구 유형이 다른 두 개의 고정구가 발견되면 (예 : &lt;code&gt;mydata.json&lt;/code&gt; 및 &lt;code&gt;mydata.xml.gz&lt;/code&gt; 가 동일한 고정구 디렉토리에있는 경우) 고정구 설치가 중단되고 모든 데이터가 &lt;code&gt;loaddata&lt;/code&gt; 호출 이 데이터베이스에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ac49bd48639bcacfaff102892d44aa3595f4440b" translate="yes" xml:space="preserve">
          <source>Note that if you don&amp;rsquo;t specify the &lt;code&gt;login_url&lt;/code&gt; parameter, you&amp;rsquo;ll need to ensure that the &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; and your login view are properly associated. For example, using the defaults, add the following lines to your URLconf:</source>
          <target state="translated">&lt;code&gt;login_url&lt;/code&gt; 매개 변수를 지정하지 않으면 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; &lt;/a&gt; 과 로그인보기가 올바르게 연관 되어 있는지 확인해야합니다 . 예를 들어, 기본값을 사용하여 URLconf에 다음 행을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6cd271fbb7b9ed101646f23af0c3630189f7de5d" translate="yes" xml:space="preserve">
          <source>Note that if you provide a value to &lt;code&gt;redirect_field_name&lt;/code&gt;, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of &lt;code&gt;redirect_field_name&lt;/code&gt; as its key rather than &lt;code&gt;&quot;next&quot;&lt;/code&gt; (the default).</source>
          <target state="translated">참고가 값을 제공하는 경우 해당 &lt;code&gt;redirect_field_name&lt;/code&gt; , 당신은 할 저장 템플릿 컨텍스트 변수가 리디렉션 경로의 값을 사용하기 때문에,뿐만 아니라 로그인 템플릿을 사용자 정의해야 할 가능성이 가장 높은 &lt;code&gt;redirect_field_name&lt;/code&gt; 를 핵심으로하기보다는 &lt;code&gt;&quot;next&quot;&lt;/code&gt; (기본 ).</target>
        </trans-unit>
        <trans-unit id="7d9053627b6ab7bc8cafe04e748b5f7e44a6dca7" translate="yes" xml:space="preserve">
          <source>Note that if you provide an &lt;code&gt;exclude&lt;/code&gt; argument to &lt;code&gt;validate_unique()&lt;/code&gt;, any &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt;&lt;code&gt;unique_together&lt;/code&gt;&lt;/a&gt; constraint involving one of the fields you provided will not be checked.</source>
          <target state="translated">&lt;code&gt;validate_unique()&lt;/code&gt; &lt;code&gt;exclude&lt;/code&gt; 인수를 제공하면 제공 한 필드 중 하나를 포함 하는 &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt; &lt;code&gt;unique_together&lt;/code&gt; &lt;/a&gt; 제한 조건이 점검되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4bf8a879fdf5070b51826c9b7caa260383bcc815" translate="yes" xml:space="preserve">
          <source>Note that if you set this to point to a &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, only the date portion of the field will be considered. Besides, when &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the check will be performed in the &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; at the time the object gets saved.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 를 가리 키도록 설정 하면 필드의 날짜 부분 만 고려됩니다. 또한 &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 오브젝트가 저장 될 때 &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;현재 시간대&lt;/a&gt; 에서 검사가 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="57208e52924136beaba1ef45b1cfb353a276896c" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;iterator()&lt;/code&gt; to run the query, &lt;code&gt;prefetch_related()&lt;/code&gt; calls will be ignored since these two optimizations do not make sense together.</source>
          <target state="translated">&lt;code&gt;iterator()&lt;/code&gt; 를 사용 하여 쿼리를 실행하는 경우 &lt;code&gt;prefetch_related()&lt;/code&gt; 호출은 무시됩니다.이 두 가지 최적화는 함께 이해되지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d3fefd7119376ae7f60ef230db53d905b5c5f7ea" translate="yes" xml:space="preserve">
          <source>Note that if you want the number of items in a &lt;code&gt;QuerySet&lt;/code&gt; and are also retrieving model instances from it (for example, by iterating over it), it&amp;rsquo;s probably more efficient to use &lt;code&gt;len(queryset)&lt;/code&gt; which won&amp;rsquo;t cause an extra database query like &lt;code&gt;count()&lt;/code&gt; would.</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 의 항목 수를 원하고 모델 인스턴스를 검색하는 경우 (예를 들어 반복하여) 추가 데이터베이스 쿼리를 발생시키지 않는 &lt;code&gt;len(queryset)&lt;/code&gt; 을 사용하는 것이 더 효율적일 수 있습니다. &lt;code&gt;count()&lt;/code&gt; 는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4b51148aa0e1df68489edcd2daa4501a3ad657c5" translate="yes" xml:space="preserve">
          <source>Note that if you want to include literal percent signs in the query, you have to double them in the case you are passing parameters:</source>
          <target state="translated">쿼리에 리터럴 백분율 기호를 포함하려면 매개 변수를 전달할 경우 기호를 두 배로 늘려야합니다.</target>
        </trans-unit>
        <trans-unit id="4b4035dfedcff608a0dab9991ed7812ee69969f8" translate="yes" xml:space="preserve">
          <source>Note that if you wish to use the same file handle for multiple &lt;code&gt;post()&lt;/code&gt; calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to &lt;code&gt;post()&lt;/code&gt;, as demonstrated above.</source>
          <target state="translated">여러 &lt;code&gt;post()&lt;/code&gt; 호출에 동일한 파일 핸들을 사용하려면 게시물 사이의 파일 포인터를 수동으로 재설정해야합니다. 가장 쉬운 방법 은 위에서 설명한 것처럼 &lt;code&gt;post()&lt;/code&gt; 에 제공된 파일을 수동으로 닫는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="7f860210b1c27c53f17cee74317f048e4e6632b1" translate="yes" xml:space="preserve">
          <source>Note that in case there is no other lookup specified, Django interprets &lt;code&gt;change__abs=27&lt;/code&gt; as &lt;code&gt;change__abs__exact=27&lt;/code&gt;.</source>
          <target state="translated">다른 조회가 지정되지 않은 경우 Django는 &lt;code&gt;change__abs=27&lt;/code&gt; 을 &lt;code&gt;change__abs__exact=27&lt;/code&gt; 로 해석 합니다.</target>
        </trans-unit>
        <trans-unit id="9930c8dc279b69fbaa1a8be67211867deca2a03e" translate="yes" xml:space="preserve">
          <source>Note that in most deployment situations where Django isn&amp;rsquo;t involved in serving user-uploaded files, this setting won&amp;rsquo;t help you. For example, if your &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is served directly by your front-end Web server (nginx, Apache, etc.) then you&amp;rsquo;d want to set this header there. On the other hand, if you are using Django to do something like require authorization in order to download files and you cannot set the header using your Web server, this setting will be useful.</source>
          <target state="translated">Django가 사용자가 업로드 한 파일을 제공하지 않는 대부분의 배포 상황에서는이 설정이 도움이되지 않습니다. 예를 들어, &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 이 프론트 엔드 웹 서버 (nginx, Apache 등)에 의해 직접 제공되는 경우이 헤더를 설정하려고합니다. 반면에 Django를 사용하여 파일을 다운로드하기 위해 권한 부여가 필요한 것과 같은 작업을 수행하고 웹 서버를 사용하여 헤더를 설정할 수없는 경우이 설정이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="99e79e30a12a76f1313050e4f0b66fec20480e07" translate="yes" xml:space="preserve">
          <source>Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects.</source>
          <target state="translated">동일한 날짜 값의 경우 이러한 방법은 기본 키를 타이 브레이커로 사용합니다. 이를 통해 레코드를 건너 뛰거나 복제 할 수 없습니다. 또한 저장하지 않은 객체에는 해당 방법을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="90c15f36e80bc36194e7fc7c88e2411b03bc0b09" translate="yes" xml:space="preserve">
          <source>Note that in the last example the article has moved from John to Paul.</source>
          <target state="translated">마지막 예에서 기사는 요한에서 바울로 옮겨졌습니다.</target>
        </trans-unit>
        <trans-unit id="cf55cefd5bd9a22b0ef1f0f6fcfbd1370197c2a8" translate="yes" xml:space="preserve">
          <source>Note that inheriting from multiple models that have a common &lt;code&gt;id&lt;/code&gt; primary key field will raise an error. To properly use multiple inheritance, you can use an explicit &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; in the base models:</source>
          <target state="translated">공통 &lt;code&gt;id&lt;/code&gt; 기본 키 필드가 있는 여러 모델에서 상속 하면 오류가 발생합니다. 다중 상속을 올바르게 사용하려면 기본 모델에서 명시 적 &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16597be826caa262d10a0f4d0ad1380467491e9" translate="yes" xml:space="preserve">
          <source>Note that it &lt;strong&gt;does not&lt;/strong&gt; include the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, or a submit button. We&amp;rsquo;ll have to provide those ourselves in the template.</source>
          <target state="translated">참고는 것을 &lt;strong&gt;하지 않는&lt;/strong&gt; 인클루드 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그를하거나 버튼을 제출합니다. 템플릿에 직접 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="20fcecc00ae0237fe53c67889180caee6880fbb3" translate="yes" xml:space="preserve">
          <source>Note that it is possible to compare &lt;code&gt;Polygon&lt;/code&gt; objects directly with &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;, but as the comparison is made through Polygon&amp;rsquo;s &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;, it does not mean much (but is consistent and quick). You can always force the comparison with the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.area&quot;&gt;&lt;code&gt;area&lt;/code&gt;&lt;/a&gt; property:</source>
          <target state="translated">&lt;code&gt;Polygon&lt;/code&gt; 객체를 &lt;code&gt;&amp;lt;&lt;/code&gt; 또는 &lt;code&gt;&amp;gt;&lt;/code&gt; 과 직접 비교할 수는 있지만 Polygon의 &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; 을&lt;/a&gt; 통해 비교할 때는 그다지 의미가 없지만 (일관되고 빠릅니다). 항상 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.area&quot;&gt; &lt;code&gt;area&lt;/code&gt; &lt;/a&gt; 속성 과 비교할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="309e54b62c2f8838bb6218907b1b434ce25c9449" translate="yes" xml:space="preserve">
          <source>Note that it&amp;rsquo;s perfectly safe to store global information that will not change throughout the life of the &lt;code&gt;Node&lt;/code&gt; as an attribute. In the case of &lt;code&gt;CycleNode&lt;/code&gt;, the &lt;code&gt;cyclevars&lt;/code&gt; argument doesn&amp;rsquo;t change after the &lt;code&gt;Node&lt;/code&gt; is instantiated, so we don&amp;rsquo;t need to put it in the &lt;code&gt;render_context&lt;/code&gt;. But state information that is specific to the template that is currently being rendered, like the current iteration of the &lt;code&gt;CycleNode&lt;/code&gt;, should be stored in the &lt;code&gt;render_context&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 수명 동안 변경되지 않는 전역 정보를 속성 으로 저장하는 것이 안전 합니다. 의 경우 &lt;code&gt;CycleNode&lt;/code&gt; 의 &lt;code&gt;cyclevars&lt;/code&gt; 의 사후이 변경되지 않습니다 인수 &lt;code&gt;Node&lt;/code&gt; 우리가에 넣을 필요가 없습니다, 인스턴스화 &lt;code&gt;render_context&lt;/code&gt; . 그러나 &lt;code&gt;CycleNode&lt;/code&gt; 의 현재 반복과 같이 현재 렌더링중인 템플리트에 특정한 상태 정보 는 &lt;code&gt;render_context&lt;/code&gt; 에 저장되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="e90fd4cc43a3b840e41758699f16f4a951c22c6a" translate="yes" xml:space="preserve">
          <source>Note that model interdependencies in Django can get very complex, and squashing may result in migrations that do not run; either mis-optimized (in which case you can try again with &lt;code&gt;--no-optimize&lt;/code&gt;, though you should also report an issue), or with a &lt;code&gt;CircularDependencyError&lt;/code&gt;, in which case you can manually resolve it.</source>
          <target state="translated">Django의 모델 상호 종속성은 매우 복잡 할 수 있으며 스 쿼싱으로 인해 마이그레이션이 실행되지 않을 수 있습니다. 잘못 최적화 된 경우 (이 경우 &lt;code&gt;--no-optimize&lt;/code&gt; 로 다시 시도 하여 문제를보고해야 함) 또는 &lt;code&gt;CircularDependencyError&lt;/code&gt; 로 수동으로 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="284c76538164a551a6ead0347d70137da1e7759a" translate="yes" xml:space="preserve">
          <source>Note that not all changes are possible on all databases - for example, you cannot change a text-type field like &lt;code&gt;models.TextField()&lt;/code&gt; into a number-type field like &lt;code&gt;models.IntegerField()&lt;/code&gt; on most databases.</source>
          <target state="translated">모든 변경 사항이 모든 데이터베이스에 가능 주 - 예를 들어, 당신은 같은 텍스트 형식 필드를 변경할 수 없습니다 &lt;code&gt;models.TextField()&lt;/code&gt; 같은 숫자 형 필드에 &lt;code&gt;models.IntegerField()&lt;/code&gt; 대부분의 데이터베이스에.</target>
        </trans-unit>
        <trans-unit id="5765b42680f5abb4a72b6c1b5ae0dc4354eab406" translate="yes" xml:space="preserve">
          <source>Note that older or more recent versions of these libraries &lt;em&gt;may&lt;/em&gt; also work totally fine with GeoDjango. Your mileage may vary.</source>
          <target state="translated">이 라이브러리의 이전 또는 최신 버전은 GeoDjango에서도 완벽하게 작동 &lt;em&gt;할 수&lt;/em&gt; 있습니다. 귀하의 마일리지가 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbd318205dcfeda5f23d3aa3a5607de8d9bf49a6" translate="yes" xml:space="preserve">
          <source>Note that once we&amp;rsquo;ve done this in all these views, we no longer need to import &lt;a href=&quot;../topics/templates#module-django.template.loader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; (you&amp;rsquo;ll want to keep &lt;code&gt;HttpResponse&lt;/code&gt; if you still have the stub methods for &lt;code&gt;detail&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;, and &lt;code&gt;vote&lt;/code&gt;).</source>
          <target state="translated">이러한 모든 뷰에서이 작업을 완료하면 더 이상 &lt;a href=&quot;../topics/templates#module-django.template.loader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 를 가져올 필요가 없습니다 ( &lt;code&gt;detail&lt;/code&gt; , &lt;code&gt;results&lt;/code&gt; 및 &lt;code&gt;vote&lt;/code&gt; 대한 스텁 메소드가 여전히있는 경우 &lt;code&gt;HttpResponse&lt;/code&gt; 를 유지해야 함 ).</target>
        </trans-unit>
        <trans-unit id="db3daa7b3e0d58113112241aa78669b84d25e7f6" translate="yes" xml:space="preserve">
          <source>Note that only the execution of your view is enclosed in the transactions. Middleware runs outside of the transaction, and so does the rendering of template responses.</source>
          <target state="translated">뷰 실행 만 트랜잭션에 포함됩니다. 미들웨어는 트랜잭션 외부에서 실행되므로 템플리트 응답 렌더링도 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f230fc5e74b5fca6a965580a65f23bf035b6e813" translate="yes" xml:space="preserve">
          <source>Note that only the outermost call to &lt;a href=&quot;../../../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; sets up a transaction and thus sets the time that &lt;code&gt;TransactionNow()&lt;/code&gt; will return; nested calls create savepoints which do not affect the transaction time.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/db/transactions#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 대한 가장 바깥 쪽 호출 만이 트랜잭션을 설정하므로 &lt;code&gt;TransactionNow()&lt;/code&gt; 가 리턴 할 시간을 설정합니다 . 중첩 된 호출은 트랜잭션 시간에 영향을 미치지 않는 저장 점을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d57570c30207a70feb1f95d543f2d181afc9bba6" translate="yes" xml:space="preserve">
          <source>Note that passing an empty dictionary creates a &lt;em&gt;bound&lt;/em&gt; form with empty data:</source>
          <target state="translated">빈 사전을 전달하면 빈 데이터 가있는 &lt;em&gt;바인딩 된&lt;/em&gt; 양식이 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="eaad0f28e2fcb42d6532c371c6cfac0fd491200a" translate="yes" xml:space="preserve">
          <source>Note that per-user installations can still affect the behavior of system tools that run as that user, so &lt;code&gt;virtualenv&lt;/code&gt; is a more robust solution (see below).</source>
          <target state="translated">사용자 별 설치는 해당 사용자로 실행되는 시스템 도구의 동작에 여전히 영향을 줄 수 있으므로 &lt;code&gt;virtualenv&lt;/code&gt; 가보다 강력한 솔루션입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="773f2a11fc905c994db622bf8e5b84629e2c2670" translate="yes" xml:space="preserve">
          <source>Note that per-user installations can still affect the behavior of system tools that run as that user, so using a virtual environment is a more robust solution (see below).</source>
          <target state="translated">사용자 별 설치는 해당 사용자로 실행되는 시스템 도구의 동작에 여전히 영향을 미칠 수 있으므로 가상 환경을 사용하는 것이 더 강력한 솔루션입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="cb0441db5179fedc88175f7abe68eb6db9244379" translate="yes" xml:space="preserve">
          <source>Note that pluralization is complicated and works differently in each language. Comparing &lt;code&gt;count&lt;/code&gt; to 1 isn&amp;rsquo;t always the correct rule. This code looks sophisticated, but will produce incorrect results for some languages:</source>
          <target state="translated">복수화는 복잡하고 언어마다 다르게 작동합니다. &lt;code&gt;count&lt;/code&gt; 를 1로 비교하는 것이 항상 올바른 규칙은 아닙니다. 이 코드는 정교 해 보이지만 일부 언어에서는 잘못된 결과를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="5de11d40e524334a2d38e78962aaeec3d5b135e7" translate="yes" xml:space="preserve">
          <source>Note that request methods should be in uppercase.</source>
          <target state="translated">요청 메소드는 대문자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="968db22470d1ca267f45216e5aaa73f7fd939af9" translate="yes" xml:space="preserve">
          <source>Note that setting &lt;a href=&quot;#std:setting-EMAIL_SSL_CERTFILE&quot;&gt;&lt;code&gt;EMAIL_SSL_CERTFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-EMAIL_SSL_KEYFILE&quot;&gt;&lt;code&gt;EMAIL_SSL_KEYFILE&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t result in any certificate checking. They&amp;rsquo;re passed to the underlying SSL connection. Please refer to the documentation of Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.wrap_socket&quot;&gt;&lt;code&gt;ssl.wrap_socket()&lt;/code&gt;&lt;/a&gt; function for details on how the certificate chain file and private key file are handled.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_SSL_CERTFILE&quot;&gt; &lt;code&gt;EMAIL_SSL_CERTFILE&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#std:setting-EMAIL_SSL_KEYFILE&quot;&gt; &lt;code&gt;EMAIL_SSL_KEYFILE&lt;/code&gt; &lt;/a&gt; 을 설정해 도 인증서 검사가 수행되지 않습니다. 기본 SSL 연결로 전달됩니다. 인증서 체인 파일 및 개인 키 파일을 처리하는 방법에 대한 자세한 내용 은 Python의 &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.wrap_socket&quot;&gt; &lt;code&gt;ssl.wrap_socket()&lt;/code&gt; &lt;/a&gt; 함수 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c22e8dd57361cf848941e0793916235467d46530" translate="yes" xml:space="preserve">
          <source>Note that since &lt;code&gt;set()&lt;/code&gt; is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to &lt;code&gt;clear()&lt;/code&gt; and the call to &lt;code&gt;add()&lt;/code&gt;.</source>
          <target state="translated">주 이후 있다는 &lt;code&gt;set()&lt;/code&gt; 복합 작업입니다, 그것은 경쟁 조건이 적용됩니다. 예를 들어 &lt;code&gt;clear()&lt;/code&gt; 호출과 &lt;code&gt;add()&lt;/code&gt; 호출 사이에 데이터베이스에 새 객체를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e1ea0edc5eb39ec2c96e83f140636e0429b857eb" translate="yes" xml:space="preserve">
          <source>Note that since the child template didn&amp;rsquo;t define the &lt;code&gt;sidebar&lt;/code&gt; block, the value from the parent template is used instead. Content within a &lt;code&gt;{% block %}&lt;/code&gt; tag in a parent template is always used as a fallback.</source>
          <target state="translated">하위 템플릿은 &lt;code&gt;sidebar&lt;/code&gt; 블록을 정의하지 않았으므로 상위 템플릿의 값이 대신 사용됩니다. 부모 템플릿 의 &lt;code&gt;{% block %}&lt;/code&gt; 태그 내의 내용 은 항상 대체로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a0ef7e754d821fe5a5389a0e0485b1236840d758" translate="yes" xml:space="preserve">
          <source>Note that some Django code was executed while running tests, but it is not listed here because of the &lt;code&gt;source&lt;/code&gt; flag passed to the previous command.</source>
          <target state="translated">테스트를 실행하는 동안 일부 장고 코드가 실행되었지만 이전 명령으로 전달 된 &lt;code&gt;source&lt;/code&gt; 플래그로 인해 여기에 나열되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b58e3568c1f9f0b7253202c19712cef23c12adeb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead, the response will become an HTTP 500 (&amp;ldquo;Internal Server Error&amp;rdquo;) and the &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; will not attempt to serve a flat page.</source>
          <target state="translated">참고 것을 &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; 는&lt;/a&gt; 단지 다른보기가 성공적으로 404 응답을 생산 일단의 단계를 반복합니다. 다른 뷰 또는 미들웨어 클래스가 404를 생성하려고 시도하지만 대신 예외가 발생하면 응답은 HTTP 500 ( &quot;내부 서버 오류&quot;)이되고 &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 는 플랫 페이지를 제공하려고 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6fd81eb0266642f411e0ec2b93dda43fb0cdaa81" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method for an object is not necessarily called when &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;deleting objects in bulk using a QuerySet&lt;/a&gt; or as a result of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;cascading
delete&lt;/code&gt;&lt;/a&gt;. To ensure customized delete logic gets executed, you can use &lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_delete&quot;&gt;&lt;code&gt;post_delete&lt;/code&gt;&lt;/a&gt; signals.</source>
          <target state="translated">점을 유의 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 할 때 객체의 메소드가 반드시 호출되지 않습니다 &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;검색어 세트를 사용하여 대량의 개체를 삭제&lt;/a&gt; 하거나의 결과로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;cascading delete&lt;/code&gt; &lt;/a&gt; . 사용자 정의 된 삭제 논리가 실행되도록하려면 &lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_delete&quot;&gt; &lt;code&gt;post_delete&lt;/code&gt; &lt;/a&gt; 신호를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="253ce872bdbdccddb3ef8b680bcb97ef630a7e6c" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example:</source>
          <target state="translated">있습니다 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 방법은 재귀 적으로 사전에 모든 일대 다 관계의 캐시를 prepopulates. 예:</target>
        </trans-unit>
        <trans-unit id="e80f5630b8f1dca8b0ea0eedd1bf8d8773a13237" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;content&lt;/code&gt; argument must be an instance of either &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; or of a subclass of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt;&lt;code&gt;ContentFile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">것을 주 &lt;code&gt;content&lt;/code&gt; 인수가 하나의 인스턴스 여야합니다 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 또는 서브 클래스의 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 과 같은, &lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt; &lt;code&gt;ContentFile&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="69cf65c7f436b8fbaff150d2dc857544f903a181" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;content&lt;/code&gt; argument should be an instance of &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt;, not Python&amp;rsquo;s built-in file object. You can construct a &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; from an existing Python file object like this:</source>
          <target state="translated">것을 주 &lt;code&gt;content&lt;/code&gt; 인수의 인스턴스해야 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;django.core.files.File&lt;/code&gt; 는&lt;/a&gt; , 파이썬이 내장되어있어되지 파일 객체. 다음 과 같이 기존 Python 파일 객체에서 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f40ef01b229f9c63dbeb83559c6536f91520f3ba" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;docs&lt;/code&gt; directory won&amp;rsquo;t be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like &lt;a href=&quot;https://readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt;.</source>
          <target state="translated">참고 &lt;code&gt;docs&lt;/code&gt; 당신이 그것에 일부 파일을 추가하지 않으면 디렉토리가 패키지에 포함되지 않습니다. 많은 Django 앱은 &lt;a href=&quot;https://readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt; 와 같은 사이트를 통해 온라인으로 설명서를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="480e601acbf5c70f30565ccc01d9a0fb37503e26" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;models&lt;/code&gt; module is imported from &lt;code&gt;django.contrib.gis.db&lt;/code&gt;.</source>
          <target state="translated">주의 &lt;code&gt;models&lt;/code&gt; 모듈에서 가져 &lt;code&gt;django.contrib.gis.db&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8c97e4e91823174dcc8b363df50dbaa5e57e373" translate="yes" xml:space="preserve">
          <source>Note that the block includes &lt;em&gt;all&lt;/em&gt; the text between the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;endfilter&lt;/code&gt; tags.</source>
          <target state="translated">블록은 &lt;code&gt;filter&lt;/code&gt; 와 &lt;code&gt;endfilter&lt;/code&gt; 필터 태그 사이의 &lt;em&gt;모든&lt;/em&gt; 텍스트를 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="d560327fe2008995352ea5ff59887465ed4e02c3" translate="yes" xml:space="preserve">
          <source>Note that the cache backend isn&amp;rsquo;t vulnerable to this problem, because caches automatically delete stale data. Neither is the cookie backend, because the session data is stored by the users&amp;rsquo; browsers.</source>
          <target state="translated">캐시는 오래된 데이터를 자동으로 삭제하므로 캐시 백엔드는이 문제에 취약하지 않습니다. 세션 데이터는 사용자의 브라우저에 의해 저장되므로 쿠키 백엔드도 아닙니다.</target>
        </trans-unit>
        <trans-unit id="997b862ea7c654dba69036735ee9c3d739d594e9" translate="yes" xml:space="preserve">
          <source>Note that the cache control settings &amp;ldquo;private&amp;rdquo; and &amp;ldquo;public&amp;rdquo; are mutually exclusive. The decorator ensures that the &amp;ldquo;public&amp;rdquo; directive is removed if &amp;ldquo;private&amp;rdquo; should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses &lt;a href=&quot;../ref/utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt;, the manual way to modify the cache control header (it is internally called by the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; decorator):</source>
          <target state="translated">캐시 제어 설정&amp;ldquo;private&amp;rdquo;과&amp;ldquo;public&amp;rdquo;은 상호 배타적입니다. 데코레이터는 &quot;private&quot;을 설정해야하는 경우 &quot;public&quot;지시문이 제거되도록합니다 (반대의 경우도 마찬가지). 두 가지 지시문의 사용 예는 개인 및 공개 항목을 모두 제공하는 블로그 사이트입니다. 공용 항목은 모든 공유 캐시에 캐시 될 수 있습니다. 다음 코드는 캐시 제어 헤더를 수정하는 수동 방법 인 &lt;a href=&quot;../ref/utils#django.utils.cache.patch_cache_control&quot;&gt; &lt;code&gt;patch_cache_control()&lt;/code&gt; &lt;/a&gt; 사용 합니다 ( 캐시 내부에서 &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt; 데코레이터가 호출 함 ).</target>
        </trans-unit>
        <trans-unit id="329a8fe91b918a1eabc78ec4127577a2eaa4620a" translate="yes" xml:space="preserve">
          <source>Note that the default IP address, &lt;code&gt;127.0.0.1&lt;/code&gt;, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. &lt;code&gt;192.168.2.1&lt;/code&gt;) or &lt;code&gt;0.0.0.0&lt;/code&gt; or &lt;code&gt;::&lt;/code&gt; (with IPv6 enabled).</source>
          <target state="translated">기본 IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 은 네트워크의 다른 시스템에서 액세스 할 수 없습니다. 개발 서버를 네트워크의 다른 시스템에서 볼 수있게하려면 자체 IP 주소 (예 : &lt;code&gt;192.168.2.1&lt;/code&gt; ) 또는 &lt;code&gt;0.0.0.0&lt;/code&gt; 또는 &lt;code&gt;::&lt;/code&gt; :( IPv6 사용)을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7932c67ecc916c97da8c8c7c0e37c190f380e858" translate="yes" xml:space="preserve">
          <source>Note that the default configuration process only calls &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; once settings are fully-loaded. In contrast, manually configuring the logging in your settings file will load your logging config immediately. As such, your logging config must appear &lt;em&gt;after&lt;/em&gt; any settings on which it depends.</source>
          <target state="translated">기본 구성 프로세스 는 설정이 완전히로드 된 &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 만 LOGGING_CONFIG를 호출합니다 . 반대로 설정 파일에서 로깅을 수동으로 구성하면 로깅 구성이 즉시로드됩니다. 따라서 로깅 구성은 종속 &lt;em&gt;된&lt;/em&gt; 모든 설정 &lt;em&gt;뒤에&lt;/em&gt; 나타나야합니다 .</target>
        </trans-unit>
        <trans-unit id="40528c2a9e8caf146e1fc466ce15cb5b451cd1a5" translate="yes" xml:space="preserve">
          <source>Note that the first argument &lt;em&gt;must&lt;/em&gt; be called &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">첫 번째 인수 &lt;em&gt;는 &lt;/em&gt; &lt;code&gt;context&lt;/code&gt; 라고 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="65e9739383cf60a6791ac75fed8f327d25413bd7" translate="yes" xml:space="preserve">
          <source>Note that the first parameter to the function &lt;em&gt;must&lt;/em&gt; be called &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">함수의 첫 번째 매개 변수 는 &lt;code&gt;context&lt;/code&gt; 라고 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0abaf39e2d3058e4498c22aad4c34d7e6f3e0926" translate="yes" xml:space="preserve">
          <source>Note that the header needs to be in the format as used by &lt;code&gt;request.META&lt;/code&gt; &amp;ndash; all caps and likely starting with &lt;code&gt;HTTP_&lt;/code&gt;. (Remember, Django automatically adds &lt;code&gt;'HTTP_'&lt;/code&gt; to the start of x-header names before making the header available in &lt;code&gt;request.META&lt;/code&gt;.)</source>
          <target state="translated">헤더는 &lt;code&gt;request.META&lt;/code&gt; 에서 사용하는 형식으로되어 있어야합니다. 모든 대문자이며 &lt;code&gt;HTTP_&lt;/code&gt; 로 시작될 수 있습니다 . (Django 는 &lt;code&gt;request.META&lt;/code&gt; 에서 헤더를 사용 가능하게하기 전에 x- 헤더 이름의 시작 부분에 &lt;code&gt;'HTTP_'&lt;/code&gt; 를 자동으로 추가 함을 기억하십시오 .)</target>
        </trans-unit>
        <trans-unit id="a0b88ccf06c4a2dde1c8ecf8326ade5f6087323f" translate="yes" xml:space="preserve">
          <source>Note that the key in the dictionary is the actual field class, &lt;em&gt;not&lt;/em&gt; a string. The value is another dictionary; these arguments will be passed to the form field&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method. See &lt;a href=&quot;../../forms/api&quot;&gt;The Forms API&lt;/a&gt; for details.</source>
          <target state="translated">사전의 키 는 문자열이 &lt;em&gt;아닌&lt;/em&gt; 실제 필드 클래스 입니다. 값은 또 다른 사전입니다. 이 인수는 양식 필드의 &lt;code&gt;__init__()&lt;/code&gt; 메소드 로 전달됩니다 . 자세한 내용 &lt;a href=&quot;../../forms/api&quot;&gt;은 Forms API&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="09019a3c236f5e543c42c3fc84c9325d2206d759" translate="yes" xml:space="preserve">
          <source>Note that the label suffix is added only if the last character of the label isn&amp;rsquo;t a punctuation character (in English, those are &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt;).</source>
          <target state="translated">레이블의 접미사는 레이블의 마지막 문자가 문장 부호 문자가 아닌 경우에만 추가됩니다 (영어, &lt;code&gt;.&lt;/code&gt; , &lt;code&gt;!&lt;/code&gt; , &lt;code&gt;?&lt;/code&gt; 또는 &lt;code&gt;:&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="45f9ccb1fbd2c54a94373b7ce9767a5b690ebf8b" translate="yes" xml:space="preserve">
          <source>Note that the latest Django master may not always be stable. When developing against master, you can check &lt;a href=&quot;https://djangoci.com&quot;&gt;Django&amp;rsquo;s continuous integration builds&lt;/a&gt; to determine if the failures are specific to your machine or if they are also present in Django&amp;rsquo;s official builds. If you click to view a particular build, you can view the &amp;ldquo;Configuration Matrix&amp;rdquo; which shows failures broken down by Python version and database backend.</source>
          <target state="translated">최신 장고 마스터가 항상 안정적인 것은 아닙니다. 마스터를 대상으로 개발할 때 &lt;a href=&quot;https://djangoci.com&quot;&gt;Django의 지속적인 통합 빌드&lt;/a&gt; 를 확인하여 고장이 시스템에 고유한지 또는 Django의 공식 빌드에도 존재하는지 확인할 수 있습니다. 특정 빌드를 보려면 클릭하면 Python 버전 및 데이터베이스 백엔드별로 분류 된 실패를 보여주는&amp;ldquo;구성 매트릭스&amp;rdquo;를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c1acd60a0e2efb4514768243487586e4ccb5e22" translate="yes" xml:space="preserve">
          <source>Note that the loader performs an optimization when it first runs: it caches a list of which &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; packages have a &lt;code&gt;templates&lt;/code&gt; subdirectory.</source>
          <target state="translated">로더는 처음 실행될 때 최적화를 수행합니다. &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 패키지에 &lt;code&gt;templates&lt;/code&gt; 서브 디렉토리 가있는 목록을 캐시합니다 .</target>
        </trans-unit>
        <trans-unit id="1d5d95f9aa8b375a624a768724d8045e847dc228" translate="yes" xml:space="preserve">
          <source>Note that the name of the matched pattern in the path strings of the second and third patterns has changed from &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">두 번째 및 세 번째 패턴의 경로 문자열에서 일치하는 패턴의 이름이 &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt; 로 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="b16982e8febbd865c853824b0312670d37d10b80" translate="yes" xml:space="preserve">
          <source>Note that the name of the view function doesn&amp;rsquo;t matter; it doesn&amp;rsquo;t have to be named in a certain way in order for Django to recognize it. We&amp;rsquo;re calling it &lt;code&gt;current_datetime&lt;/code&gt; here, because that name clearly indicates what it does.</source>
          <target state="translated">뷰 함수의 이름은 중요하지 않습니다. Django가 인식하기 위해 특정 방식으로 이름을 지정할 필요는 없습니다. 여기서는 &lt;code&gt;current_datetime&lt;/code&gt; 이라고 부릅니다. 그 이름은 그것이하는 일을 분명히 나타 내기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="1d37566e826663dd236669ec8c0a538314d88d04" translate="yes" xml:space="preserve">
          <source>Note that the object will no longer be in the database, so be very careful what you do with this instance.</source>
          <target state="translated">오브젝트가 더 이상 데이터베이스에 없으므로이 인스턴스로 수행하는 작업에 매우주의하십시오.</target>
        </trans-unit>
        <trans-unit id="6cb9b339d54209535bd6dcb521d136ae0891eda7" translate="yes" xml:space="preserve">
          <source>Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction.</source>
          <target state="translated">조명기 파일이 처리되는 순서는 정의되어 있지 않습니다. 그러나 모든 조명기 데이터는 단일 트랜잭션으로 설치되므로 한 조명기의 데이터는 다른 조명기의 데이터를 참조 할 수 있습니다. 데이터베이스 백엔드가 행 레벨 제한 조건을 지원하는 경우 트랜잭션이 끝날 때 이러한 제한 조건이 점검됩니다.</target>
        </trans-unit>
        <trans-unit id="cb80071655e1d9fbbd4b908b7ff6b7de62de9971" translate="yes" xml:space="preserve">
          <source>Note that the order of &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters. Generally, you can put &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middleware see the real flatpage response rather than the 404.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 의 순서가 중요합니다. 일반적으로 &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 를 목록 끝에 놓을 수 있습니다 . 즉, 응답을 처리 할 때 먼저 실행되며 다른 응답 처리 미들웨어가 404가 아닌 실제 플랫 페이지 응답을 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="08698ded25f56ec765d5763a05954e398b0131e4" translate="yes" xml:space="preserve">
          <source>Note that the order of &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters. Generally, you can put &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; at the end of the list, because it&amp;rsquo;s a last resort.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 의 순서가 중요합니다. 일반적으로 &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 는 마지막 수단이므로 목록 끝에 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fef6bd3ebae4c1ec9ddd2798fe72b4fcf23c8784" translate="yes" xml:space="preserve">
          <source>Note that the parentheses required by most database engines around subqueries are not required in Django&amp;rsquo;s &lt;code&gt;select&lt;/code&gt; clauses. Also note that some database backends, such as some MySQL versions, don&amp;rsquo;t support subqueries.</source>
          <target state="translated">Django의 &lt;code&gt;select&lt;/code&gt; 절 에는 서브 쿼리 주변의 대부분의 데이터베이스 엔진에 필요한 괄호가 필요하지 않습니다 . 또한 일부 MySQL 버전과 같은 일부 데이터베이스 백엔드는 하위 쿼리를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cfc63e63ecf8ac2eb2e30b758738319acc47dd43" translate="yes" xml:space="preserve">
          <source>Note that the queries generated in object deletion is an implementation detail subject to change.</source>
          <target state="translated">객체 삭제에서 생성 된 쿼리는 구현 세부 사항이며 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08ece2bb01374f6040408665502dabf3bdbfee50" translate="yes" xml:space="preserve">
          <source>Note that the result cache of the primary &lt;code&gt;QuerySet&lt;/code&gt; and all specified related objects will then be fully loaded into memory. This changes the typical behavior of &lt;code&gt;QuerySets&lt;/code&gt;, which normally try to avoid loading all objects into memory before they are needed, even after a query has been executed in the database.</source>
          <target state="translated">그런 다음 기본 &lt;code&gt;QuerySet&lt;/code&gt; 의 결과 캐시 와 지정된 모든 관련 객체가 메모리에 완전히로드됩니다. 이렇게하면 &lt;code&gt;QuerySets&lt;/code&gt; 의 일반적인 동작이 변경 되는데 , 일반적으로 데이터베이스에서 쿼리가 실행 된 후에도 필요한 모든 객체를 메모리에로드하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="aa58b675144be5fd04bd425ca97fc559b052e8eb" translate="yes" xml:space="preserve">
          <source>Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you&amp;rsquo;re using the test-runner script in a shell script and need to test for success or failure at that level.</source>
          <target state="translated">테스트 실행기 스크립트의 리턴 코드는 실패하고 잘못된 테스트 수에 관계없이 1입니다. 모든 테스트가 통과되면 리턴 코드는 0입니다.이 기능은 쉘 스크립트에서 테스트 실행기 스크립트를 사용하고 해당 레벨에서 성공 또는 실패를 테스트해야하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d50fd012ff22d54624835fa78fdc60e01d630190" translate="yes" xml:space="preserve">
          <source>Note that the session cookie is only sent when a session has been created or modified. If &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt;&lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the session cookie will be sent on every request.</source>
          <target state="translated">세션 쿠키는 세션이 생성되거나 수정 된 경우에만 전송됩니다. &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt; &lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 모든 요청시 세션 쿠키가 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="5a3066deed15c333016258a7e176bfa5fbe7bff4" translate="yes" xml:space="preserve">
          <source>Note that the test client is not intended to be a replacement for &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; or other &amp;ldquo;in-browser&amp;rdquo; frameworks. Django&amp;rsquo;s test client has a different focus. In short:</source>
          <target state="translated">테스트 클라이언트는 &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; 또는 기타 &quot;브라우저 내&quot;프레임 워크를 대체하기위한 것이 아닙니다 . Django의 테스트 클라이언트는 다른 초점을 가지고 있습니다. 한마디로 :</target>
        </trans-unit>
        <trans-unit id="e7c15fa6899ee16f22c2f3eebad5d4575601d120" translate="yes" xml:space="preserve">
          <source>Note that there also is a &lt;a href=&quot;#django.forms.MultipleHiddenInput&quot;&gt;&lt;code&gt;MultipleHiddenInput&lt;/code&gt;&lt;/a&gt; widget that encapsulates a set of hidden input elements.</source>
          <target state="translated">숨겨진 입력 요소 세트를 캡슐화하는 &lt;a href=&quot;#django.forms.MultipleHiddenInput&quot;&gt; &lt;code&gt;MultipleHiddenInput&lt;/code&gt; &lt;/a&gt; 위젯 도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f3dc5df00a8e3e730c40fe838d9cf28eedc30a0f" translate="yes" xml:space="preserve">
          <source>Note that there are a number of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;caveats to this method&lt;/code&gt;&lt;/a&gt;, so make sure it&amp;rsquo;s appropriate for your use case.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;caveats to this method&lt;/code&gt; &lt;/a&gt; 에는 몇 가지 주의 사항이 있으므로 사용 사례에 적합한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ed11446b0c6e152b1bcc9ce1866f87a0033a7c22" translate="yes" xml:space="preserve">
          <source>Note that there are a number of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt;&lt;code&gt;caveats to this method&lt;/code&gt;&lt;/a&gt;, so make sure it&amp;rsquo;s appropriate for your use case.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt; &lt;code&gt;caveats to this method&lt;/code&gt; &lt;/a&gt; 에는 몇 가지 주의 사항이 있으므로 사용 사례에 적합한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ec4883b6f62b2a123fc0b302f2c2ef4d90d01466" translate="yes" xml:space="preserve">
          <source>Note that there is a difference between using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, and using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; with a slice of &lt;code&gt;[0]&lt;/code&gt;. If there are no results that match the query, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; will raise a &lt;code&gt;DoesNotExist&lt;/code&gt; exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no &lt;code&gt;Entry&lt;/code&gt; object with a primary key of 1, Django will raise &lt;code&gt;Entry.DoesNotExist&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 사용 과 &lt;code&gt;[0]&lt;/code&gt; 슬라이스로 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용 사이에는 차이가 있습니다. 쿼리와 일치하는 결과가 없으면 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외를 발생시킵니다. 이 예외는 쿼리가 수행되는 모델 클래스의 속성이므로 위의 코드 에서 기본 키가 1 인 &lt;code&gt;Entry&lt;/code&gt; 객체 가 없으면 Django는 &lt;code&gt;Entry.DoesNotExist&lt;/code&gt; 를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="e083cac1d45447670947e2765f04c7f401bd320c" translate="yes" xml:space="preserve">
          <source>Note that there is an extra &amp;ldquo;Delete?&amp;rdquo; column that allows removing rows added using the &amp;ldquo;Add Another Choice&amp;rdquo; button and rows that have already been saved.</source>
          <target state="translated">여분의 &quot;삭제&quot;가 있습니다. &amp;ldquo;Add Another Choice&amp;rdquo;버튼을 사용하여 추가 한 행과 이미 저장된 행을 제거 할 수있는 열.</target>
        </trans-unit>
        <trans-unit id="d2130933d4a7a35839fd38a445d7757805cf2913" translate="yes" xml:space="preserve">
          <source>Note that there&amp;rsquo;s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don&amp;rsquo;t pass the parameter &lt;code&gt;blog&lt;/code&gt; to &lt;code&gt;create()&lt;/code&gt;. Django figures out that the new &lt;code&gt;Entry&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;blog&lt;/code&gt; field should be set to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">관계를 정의하는 모델의 키워드 인수를 지정할 필요가 없습니다. 위의 예에서 매개 변수 &lt;code&gt;blog&lt;/code&gt; 를 &lt;code&gt;create()&lt;/code&gt; 로 전달하지 않습니다 . Django는 새로운 &lt;code&gt;Entry&lt;/code&gt; 객체의 &lt;code&gt;blog&lt;/code&gt; 필드가 &lt;code&gt;b&lt;/code&gt; 로 설정되어야 함을 알아 냈습니다 .</target>
        </trans-unit>
        <trans-unit id="2477290a913291cbc38ebf667d64085a6083a034" translate="yes" xml:space="preserve">
          <source>Note that these are &lt;em&gt;partial&lt;/em&gt; matches. &lt;code&gt;'PASS'&lt;/code&gt; will also match PASSWORD, just as &lt;code&gt;'TOKEN'&lt;/code&gt; will also match TOKENIZED and so on.</source>
          <target state="translated">이들은 &lt;em&gt;부분적으로&lt;/em&gt; 일치합니다. &lt;code&gt;'PASS'&lt;/code&gt; &lt;code&gt;'TOKEN'&lt;/code&gt; 도 TOKENIZED 등과 일치하는 것처럼 'PASS' 도 PASSWORD 와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="e1fc5fa3e855f806a565c439909e116dd3591f60" translate="yes" xml:space="preserve">
          <source>Note that these paths should use Unix-style forward slashes, even on Windows (e.g. &lt;code&gt;&quot;C:/Users/user/mysite/extra_static_content&quot;&lt;/code&gt;).</source>
          <target state="translated">이러한 경로는 Windows에서도 유닉스 스타일 슬래시를 사용해야합니다 (예 : &lt;code&gt;&quot;C:/Users/user/mysite/extra_static_content&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="795b6608e8468ba6ef747bf20d7df8c092e409b7" translate="yes" xml:space="preserve">
          <source>Note that these paths should use Unix-style forward slashes, even on Windows.</source>
          <target state="translated">이 경로는 Windows에서도 유닉스 스타일 슬래시를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="2cf35c103d926ddc769c79ec834723110b7dd384" translate="yes" xml:space="preserve">
          <source>Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as &lt;a href=&quot;https://pypi.org/project/sentry/&quot;&gt;Sentry&lt;/a&gt; to get the best of both worlds &amp;ndash; the rich information of full tracebacks plus the security of &lt;em&gt;not&lt;/em&gt; sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports &amp;ndash; learn more on &lt;a href=&quot;../howto/error-reporting#filtering-error-reports&quot;&gt;Filtering error reports&lt;/a&gt;.</source>
          <target state="translated">이 HTML 버전의 전자 메일에는 스택의 각 수준에서 로컬 변수의 이름과 값 및 Django 설정 값이 포함 된 전체 역 추적 기능이 포함되어 있습니다. 이 정보는 잠재적으로 매우 중요하므로 이메일을 통해 보내지 않을 수 있습니다. &lt;a href=&quot;https://pypi.org/project/sentry/&quot;&gt;Sentry&lt;/a&gt; 와 같은 것을 사용하여 완전한 역 추적에 대한 풍부한 정보와 이메일을 통해 정보를 보내지 &lt;em&gt;않는&lt;/em&gt; 보안 등 두 가지 이점 을 최대한 활용하십시오 . 특정 민감한 정보를 명시 적으로 지정하여 오류 보고서에서 &lt;a href=&quot;../howto/error-reporting#filtering-error-reports&quot;&gt;필터링&lt;/a&gt; 할 수도 있습니다 . 오류 보고서 필터링에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="8a3d1d6be0677336f3c4ce808049c72f672b6643" translate="yes" xml:space="preserve">
          <source>Note that this checks only for the existence of a given key, not that the value of a key is non-empty.</source>
          <target state="translated">이것은 키의 값이 비어 있지 않은 것이 아니라 주어진 키의 존재 여부 만 검사합니다.</target>
        </trans-unit>
        <trans-unit id="0bbb736bbd29d6ee2584aa607cfd01a5217b40a3" translate="yes" xml:space="preserve">
          <source>Note that this equivalent to:</source>
          <target state="translated">이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dba99c12af9dce2149cb16de622b8b3d2a6c2aad" translate="yes" xml:space="preserve">
          <source>Note that this is different than &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is purely database-related, whereas &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt; is validation-related. If a field has &lt;code&gt;blank=True&lt;/code&gt;, form validation will allow entry of an empty value. If a field has &lt;code&gt;blank=False&lt;/code&gt;, the field will be required.</source>
          <target state="translated">이것은 &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 과&lt;/a&gt; 는 다릅니다 . &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 은 순전히 데이터베이스 관련이지만 &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt; 는 유효성 검사 관련입니다. 필드가 &lt;code&gt;blank=True&lt;/code&gt; 인 경우 양식 유효성 검증은 빈 값을 입력 할 수있게합니다. 필드에 &lt;code&gt;blank=False&lt;/code&gt; 가 있으면 필드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="e1a927a86b31c6fe256c0c201864b03e59d37343" translate="yes" xml:space="preserve">
          <source>Note that this is different than &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is purely database-related, whereas &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt; is validation-related. If a field has &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;, form validation will allow entry of an empty value. If a field has &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=False&lt;/code&gt;&lt;/a&gt;, the field will be required.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 과&lt;/a&gt; 는 다릅니다 . &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 은 순전히 데이터베이스 관련이지만 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt; 는 유효성 검사 관련입니다. 필드가 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; 인&lt;/a&gt; 경우 양식 유효성 검증은 빈 값을 입력 할 수있게합니다. 필드에 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=False&lt;/code&gt; &lt;/a&gt; 가 있으면 필드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="65807d9d49cf72ec77bf7a331d692c91fa7c9ef4" translate="yes" xml:space="preserve">
          <source>Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at &lt;code&gt;seq[-5:]&lt;/code&gt;, we would see the fifth-last item first. Django doesn&amp;rsquo;t support that mode of access (slicing from the end), because it&amp;rsquo;s not possible to do it efficiently in SQL.</source>
          <target state="translated">이것은 파이썬에서 시퀀스의 끝에서 슬라이싱하는 것과 완전히 다릅니다. 위의 예는 마지막 항목을 먼저 반환 한 다음 두 번째 항목을 반환합니다. 파이썬 시퀀스를 가지고 있고 &lt;code&gt;seq[-5:]&lt;/code&gt; 를 보면, 다섯 번째 마지막 항목이 먼저 보일 것입니다. Django는 SQL에서 효율적으로 수행 할 수 없기 때문에 해당 액세스 모드 (끝에서 슬라이싱)를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb0ad9f46efaf6ea73d6b6569c751fa30e6aab82" translate="yes" xml:space="preserve">
          <source>Note that this isn&amp;rsquo;t necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting.</source>
          <target state="translated">이것이 반드시 서버의 시간대는 아닙니다. 예를 들어, 한 대의 서버는 각각 별도의 시간대 설정이있는 여러 장고 사이트를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c953b63059173178458ed761fbedea0ac39027ac" translate="yes" xml:space="preserve">
          <source>Note that this only works given two things:</source>
          <target state="translated">이것은 두 가지 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="43246198826a48db05dda06a13016417e496af6b" translate="yes" xml:space="preserve">
          <source>Note that this server does &lt;em&gt;not&lt;/em&gt; automatically detect changes to your Python source code (as &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; does). It does, however, detect changes to templates.</source>
          <target state="translated">이 서버는 ( &lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; 와&lt;/a&gt; 마찬가지로) Python 소스 코드의 변경 사항을 자동으로 감지 하지 &lt;em&gt;않습니다&lt;/em&gt; . 그러나 템플릿 변경 사항은 감지합니다.</target>
        </trans-unit>
        <trans-unit id="77708f0489400a9d946be1d05b99670aa11a0f4b" translate="yes" xml:space="preserve">
          <source>Note that this value is &lt;em&gt;not&lt;/em&gt; HTML-escaped in automatically-generated forms. This lets you include HTML in &lt;a href=&quot;#django.db.models.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt; if you so desire. For example:</source>
          <target state="translated">이 값은 자동 생성 양식에서 HTML 이스케이프 &lt;em&gt;되지 않습니다&lt;/em&gt; . 원하는 경우 &lt;a href=&quot;#django.db.models.Field.help_text&quot;&gt; &lt;code&gt;help_text&lt;/code&gt; 에&lt;/a&gt; HTML을 포함시킬 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bcf38a05a5b6f4694b53daa8eea90c967fc370a2" translate="yes" xml:space="preserve">
          <source>Note that this value is &lt;em&gt;not&lt;/em&gt; HTML-escaped when it&amp;rsquo;s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and &lt;a href=&quot;../../utils#django.utils.html.escape&quot;&gt;&lt;code&gt;django.utils.html.escape()&lt;/code&gt;&lt;/a&gt; to escape any HTML special characters.</source>
          <target state="translated">이 값은 관리자 인터페이스에 표시 될 때 HTML 이스케이프 &lt;em&gt;되지 않습니다&lt;/em&gt; . 원하는 경우 HTML을 포함 할 수 있습니다. 또는 일반 텍스트와 &lt;a href=&quot;../../utils#django.utils.html.escape&quot;&gt; &lt;code&gt;django.utils.html.escape()&lt;/code&gt; &lt;/a&gt; 를 사용하여 HTML 특수 문자를 이스케이프 처리 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="906411ef03113b0636d2db25f54351b72fe13574" translate="yes" xml:space="preserve">
          <source>Note that unlike &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; cannot handle arbitrary Python data types. As is often the case, there is a trade-off between convenience and security. If you wish to store more advanced data types including &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;Decimal&lt;/code&gt; in JSON backed sessions, you will need to write a custom serializer (or convert such values to a JSON serializable object before storing them in &lt;code&gt;request.session&lt;/code&gt;). While serializing these values is often straightforward (&lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; may be helpful), writing a decoder that can reliably get back the same thing that you put in is more fragile. For example, you run the risk of returning a &lt;code&gt;datetime&lt;/code&gt; that was actually a string that just happened to be in the same format chosen for &lt;code&gt;datetime&lt;/code&gt;s).</source>
          <target state="translated">달리합니다 &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; 가&lt;/a&gt; 임의의 파이썬 데이터 유형을 처리 할 수 없습니다. 종종 그렇듯이 편의성과 보안 사이에는 상충 관계가 있습니다. &lt;code&gt;datetime&lt;/code&gt; 및 &lt;code&gt;Decimal&lt;/code&gt; 을 포함한 고급 데이터 유형 을 JSON 지원 세션에 저장하려면 사용자 정의 직렬 변환기를 작성하거나 &lt;code&gt;request.session&lt;/code&gt; 에 저장하기 전에 이러한 값을 JSON 직렬화 가능 오브젝트로 변환해야합니다 . 이러한 값을 직렬화하는 것은 종종 간단하지만 ( &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt; 가 도움이 될 수 있음), 넣은 것과 동일한 것을 안정적으로 되돌릴 수있는 디코더를 작성하는 것이 더 취약합니다. 예를 들어 &lt;code&gt;datetime&lt;/code&gt; 을 반환 할 위험이 있습니다.그것은 실제로 &lt;code&gt;datetime&lt;/code&gt; 선택된 것과 같은 형식으로 된 문자열이었습니다 ).</target>
        </trans-unit>
        <trans-unit id="702d81c03f196bf44f8bcd6b11a9b027b74ab4bb" translate="yes" xml:space="preserve">
          <source>Note that unlike a dictionary, &lt;code&gt;del&lt;/code&gt; doesn&amp;rsquo;t raise &lt;code&gt;KeyError&lt;/code&gt; if the header field doesn&amp;rsquo;t exist.</source>
          <target state="translated">사전과 달리 헤더 필드가 존재하지 않으면 &lt;code&gt;del&lt;/code&gt; 은 &lt;code&gt;KeyError&lt;/code&gt; 를 발생시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="66f752221b158da1f8b91ce1869204010b1f48ea" translate="yes" xml:space="preserve">
          <source>Note that using &lt;code&gt;YearInSchool.SENIOR&lt;/code&gt;, &lt;code&gt;YearInSchool['SENIOR']&lt;/code&gt;, or &lt;code&gt;YearInSchool('SR')&lt;/code&gt; to access or lookup enum members work as expected, as do the &lt;code&gt;.name&lt;/code&gt; and &lt;code&gt;.value&lt;/code&gt; properties on the members.</source>
          <target state="translated">사용하여 참고 &lt;code&gt;YearInSchool.SENIOR&lt;/code&gt; , &lt;code&gt;YearInSchool['SENIOR']&lt;/code&gt; 또는 &lt;code&gt;YearInSchool('SR')&lt;/code&gt; , 액세스 또는 예상대로 조회 ENUM 부재 일에이 같이 할 &lt;code&gt;.name&lt;/code&gt; 을 하고 &lt;code&gt;.value&lt;/code&gt; 멤버에 등록.</target>
        </trans-unit>
        <trans-unit id="f50008769d1a14e593867a6db9cdf9470058cdd6" translate="yes" xml:space="preserve">
          <source>Note that using &lt;code&gt;iterator()&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt; which has already been evaluated will force it to evaluate again, repeating the query.</source>
          <target state="translated">이미 평가 된 &lt;code&gt;QuerySet&lt;/code&gt; 에서 &lt;code&gt;iterator()&lt;/code&gt; 를 사용 하면 쿼리를 반복하여 다시 평가하게됩니다.</target>
        </trans-unit>
        <trans-unit id="f5a5705d4f4e4dba6360106b56cde3d815c0b93d" translate="yes" xml:space="preserve">
          <source>Note that we pass the &lt;code&gt;queryset&lt;/code&gt; argument in both the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; cases in this example.</source>
          <target state="translated">이 예제 에서는 &lt;code&gt;POST&lt;/code&gt; 및 &lt;code&gt;GET&lt;/code&gt; 사례 모두 에서 &lt;code&gt;queryset&lt;/code&gt; 인수를 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="fe5575ba32184ff281804a3e6ed550d830b3259c" translate="yes" xml:space="preserve">
          <source>Note that when &lt;code&gt;unique&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, you don&amp;rsquo;t need to specify &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;db_index&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;unique&lt;/code&gt; implies the creation of an index.</source>
          <target state="translated">때주의 &lt;code&gt;unique&lt;/code&gt; 입니다 &lt;code&gt;True&lt;/code&gt; , 당신이 지정할 필요가 없습니다 &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;db_index&lt;/code&gt; 을&lt;/a&gt; 하기 때문에, &lt;code&gt;unique&lt;/code&gt; 인덱스의 생성을 의미한다.</target>
        </trans-unit>
        <trans-unit id="39167b947707fbb5b9cf4b6e5a2e4668c034defb" translate="yes" xml:space="preserve">
          <source>Note that when a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you&amp;rsquo;ll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron).</source>
          <target state="translated">모델이 삭제 될 때 관련 파일은 삭제되지 않습니다. 분리 된 파일을 정리해야하는 경우 직접 처리해야합니다 (예 : cron을 통해 수동으로 실행하거나 주기적으로 실행하도록 예약 할 수있는 사용자 지정 관리 명령 사용).</target>
        </trans-unit>
        <trans-unit id="719be46afabc795f700c5cdc4fb51623fb2f80af" translate="yes" xml:space="preserve">
          <source>Note that when deferred fields are accessed, the loading of the deferred field&amp;rsquo;s value happens through this method. Thus it is possible to customize the way deferred loading happens. The example below shows how one can reload all of the instance&amp;rsquo;s fields when a deferred field is reloaded:</source>
          <target state="translated">지연된 필드에 액세스 할 때 지연된 필드 값의로드는이 방법을 통해 발생합니다. 따라서 지연로드가 발생하는 방식을 사용자 정의 할 수 있습니다. 아래 예제는 지연된 필드를 다시로드 할 때 인스턴스의 모든 필드를 다시로드하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="94c1c16b5b2cd3f86c4031d357763da656691cbe" translate="yes" xml:space="preserve">
          <source>Note that when using this technique the &lt;a href=&quot;../../signals#django.db.models.signals.m2m_changed&quot;&gt;&lt;code&gt;m2m_changed&lt;/code&gt;&lt;/a&gt; signals aren&amp;rsquo;t triggered. This is because as far as the admin is concerned, &lt;code&gt;through&lt;/code&gt; is just a model with two foreign key fields rather than a many-to-many relation.</source>
          <target state="translated">이 기법을 사용할 때 &lt;a href=&quot;../../signals#django.db.models.signals.m2m_changed&quot;&gt; &lt;code&gt;m2m_changed&lt;/code&gt; &lt;/a&gt; 신호는 트리거되지 않습니다. 지금까지 관리자에 관한 한, 때문입니다 &lt;code&gt;through&lt;/code&gt; 두 개의 외래 키 필드 대신 다 대다 관계와 단지 모델입니다.</target>
        </trans-unit>
        <trans-unit id="b05fa36010992ac15dfe2760e5308fe656f763bc" translate="yes" xml:space="preserve">
          <source>Note that when you&amp;rsquo;re using &lt;code&gt;takes_context=True&lt;/code&gt;, there&amp;rsquo;s no need to pass arguments to the template tag. It automatically gets access to the context.</source>
          <target state="translated">&lt;code&gt;takes_context=True&lt;/code&gt; 를 사용 하는 경우 템플릿 태그에 인수를 전달할 필요가 없습니다. 컨텍스트에 자동으로 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="79079404d7b87dcc164745f56a3bf81208b2cc17" translate="yes" xml:space="preserve">
          <source>Note that whenever you deal with uploaded files, you should pay close attention to where you&amp;rsquo;re uploading them and what type of files they are, to avoid security holes. &lt;em&gt;Validate all uploaded files&lt;/em&gt; so that you&amp;rsquo;re sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that&amp;rsquo;s within your Web server&amp;rsquo;s document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don&amp;rsquo;t allow that.</source>
          <target state="translated">업로드 된 파일을 다룰 때마다 보안 허점을 피하기 위해 파일을 업로드하는 위치와 파일 형식에주의를 기울여야합니다. &lt;em&gt;업로드 한 모든 파일의 유효성을 검사&lt;/em&gt; 하여 파일이 생각한 것과 같은지 확인하십시오. 예를 들어, 웹 서버의 문서 루트 내에있는 디렉토리에 유효성 검사없이 파일을 맹목적으로 업로드하도록 허용 한 경우 누군가는 CGI 또는 PHP 스크립트를 업로드하고 해당 사이트의 URL을 방문하여 해당 스크립트를 실행할 수 있습니다. 허용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="39f8400a649c5d93c855cdc636e888afa63eb937" translate="yes" xml:space="preserve">
          <source>Note that where the password is passed to one of these functions, this should always be the clear text password - not a hashed password.</source>
          <target state="translated">암호가 이러한 기능 중 하나에 전달되는 경우 항상 해시 암호가 아닌 일반 텍스트 암호 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d093d349e1d459362f8b4a2b1a67b11670c43223" translate="yes" xml:space="preserve">
          <source>Note that while you can &lt;em&gt;define&lt;/em&gt; a custom manager on the abstract model, you can&amp;rsquo;t &lt;em&gt;invoke&lt;/em&gt; any methods using the abstract model. That is:</source>
          <target state="translated">당신이 할 수있는 동안 참고 것을 &lt;em&gt;정의하는&lt;/em&gt; 추상 모델에서 사용자 정의 관리자를, 당신은 할 수 &lt;em&gt;호출&lt;/em&gt; 추상 모델을 사용하는 방법을. 그건:</target>
        </trans-unit>
        <trans-unit id="3265dff3dd371813ef80cf218a365cc918b03a70" translate="yes" xml:space="preserve">
          <source>Note that you can backslash-escape a format string if you want to use the &amp;ldquo;raw&amp;rdquo; value. In this example, both &amp;ldquo;h&amp;rdquo; and &amp;ldquo;m&amp;rdquo; are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively:</source>
          <target state="translated">&quot;원시&quot;값을 사용하려는 경우 형식 문자열을 백 슬래시 이스케이프 할 수 있습니다. 이 예에서 &quot;h&quot;와 &quot;m&quot;은 백 슬래시 이스케이프 처리됩니다. 그렇지 않으면 각각 시간과 월을 표시하는 형식 문자열이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="7476fdc821a56bd47f0eda1f0b41d488383e4103" translate="yes" xml:space="preserve">
          <source>Note that you can backslash-escape a format string if you want to use the &amp;ldquo;raw&amp;rdquo; value. In this example, both &amp;ldquo;o&amp;rdquo; and &amp;ldquo;f&amp;rdquo; are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively:</source>
          <target state="translated">&quot;원시&quot;값을 사용하려는 경우 형식 문자열을 백 슬래시 이스케이프 할 수 있습니다. 이 예에서&amp;ldquo;o&amp;rdquo;와&amp;ldquo;f&amp;rdquo;는 백 슬래시로 이스케이프 처리됩니다. 그렇지 않으면 각각 연도와 시간을 표시하는 형식 문자열이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="4f73d7dc009cf6ecb0d2dc25b668df5cadd84847" translate="yes" xml:space="preserve">
          <source>Note that you can give &lt;code&gt;Paginator&lt;/code&gt; a list/tuple, a Django &lt;code&gt;QuerySet&lt;/code&gt;, or any other object with a &lt;code&gt;count()&lt;/code&gt; or &lt;code&gt;__len__()&lt;/code&gt; method. When determining the number of objects contained in the passed object, &lt;code&gt;Paginator&lt;/code&gt; will first try calling &lt;code&gt;count()&lt;/code&gt;, then fallback to using &lt;code&gt;len()&lt;/code&gt; if the passed object has no &lt;code&gt;count()&lt;/code&gt; method. This allows objects such as Django&amp;rsquo;s &lt;code&gt;QuerySet&lt;/code&gt; to use a more efficient &lt;code&gt;count()&lt;/code&gt; method when available.</source>
          <target state="translated">당신이 줄 수있는 참고 &lt;code&gt;Paginator&lt;/code&gt; 리스트 / 튜플, 장고 &lt;code&gt;QuerySet&lt;/code&gt; A를, 또는 다른 개체 &lt;code&gt;count()&lt;/code&gt; 또는 &lt;code&gt;__len__()&lt;/code&gt; 메소드를. 전달 된 오브젝트에 포함 된 오브젝트 수를 판별 할 때 &lt;code&gt;Paginator&lt;/code&gt; 는 먼저 &lt;code&gt;count()&lt;/code&gt; 호출을 시도한 다음 전달 된 오브젝트에 &lt;code&gt;count()&lt;/code&gt; 메소드 가없는 경우 &lt;code&gt;len()&lt;/code&gt; 사용으로 폴백합니다 . 이를 통해 Django의 &lt;code&gt;QuerySet&lt;/code&gt; 과 같은 객체는 사용 가능한 경우보다 효율적인 &lt;code&gt;count()&lt;/code&gt; 메서드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e42e9704f036f9a6dfea5bd7eeae341bb89a4c9" translate="yes" xml:space="preserve">
          <source>Note that you can redirect standard output and error streams as all commands support the &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; options. For example, you could write:</source>
          <target state="translated">모든 명령이 &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 옵션을 지원하므로 표준 출력 및 오류 스트림을 리디렉션 할 수 있습니다. 예를 들어 다음과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28f96228f714507e7175e473320352a2987351be" translate="yes" xml:space="preserve">
          <source>Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware.</source>
          <target state="translated">미들웨어와 함께 데코레이터를 사용할 수 있습니다. 데코레이터를 사용하면 미들웨어보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="b96ab2ffca51fc0d415d2ea2c91ff51267bb654f" translate="yes" xml:space="preserve">
          <source>Note that you don&amp;rsquo;t have to use Django&amp;rsquo;s template system if you prefer another system. While Django&amp;rsquo;s template system is particularly well-integrated with Django&amp;rsquo;s model layer, nothing forces you to use it. For that matter, you don&amp;rsquo;t have to use Django&amp;rsquo;s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django &amp;ndash; models, views, templates &amp;ndash; is decoupled from the next.</source>
          <target state="translated">다른 시스템을 선호한다면 Django의 템플릿 시스템을 사용할 필요가 없습니다. Django의 템플릿 시스템은 Django의 모델 레이어와 특히 잘 통합되어 있지만 사용하지 않아도됩니다. 이를 위해 Django의 데이터베이스 API를 사용할 필요가 없습니다. 다른 데이터베이스 추상화 계층을 사용하거나 XML 파일을 읽거나 디스크에서 파일을 읽거나 원하는 항목을 읽을 수 있습니다. Django의 각 부분 (모델, 뷰, 템플릿)은 다음과 분리됩니다.</target>
        </trans-unit>
        <trans-unit id="f31c5c5b9d42b1077c8970e03ed8c44f9ddad790" translate="yes" xml:space="preserve">
          <source>Note that you may not want autodiscovery of &lt;code&gt;admin&lt;/code&gt; modules when using your own &lt;code&gt;AdminSite&lt;/code&gt; instance since you will likely be importing all the per-app &lt;code&gt;admin&lt;/code&gt; modules in your &lt;code&gt;myproject.admin&lt;/code&gt; module. This means you need to put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;myproject.admin&lt;/code&gt; 모듈의 모든 앱별 &lt;code&gt;admin&lt;/code&gt; 모듈을 가져 오기 때문에 자체 &lt;code&gt;AdminSite&lt;/code&gt; 인스턴스를 사용할 때 &lt;code&gt;admin&lt;/code&gt; 모듈의 자동 검색을 원하지 않을 수 있습니다 . 이 방법은 당신이 둘 필요 &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 대신 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; 당신의 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="21df1330fbaf74e0680f4452a5609d54fd10fa1a" translate="yes" xml:space="preserve">
          <source>Note that you must save an object before it can be assigned to a foreign key relationship. For example, creating an &lt;code&gt;Article&lt;/code&gt; with unsaved &lt;code&gt;Reporter&lt;/code&gt; raises &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">외래 키 관계에 할당되기 전에 객체를 저장해야합니다. 예를 들어, 생성 &lt;code&gt;Article&lt;/code&gt; 저장되지 않은와 &lt;code&gt;Reporter&lt;/code&gt; 제기 &lt;code&gt;ValueError&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="376f6d08577acaa494289e31892d8f4bc49a71b1" translate="yes" xml:space="preserve">
          <source>Note that you must save an object before it can be assigned to a one-to-one relationship. For example, creating a &lt;code&gt;Restaurant&lt;/code&gt; with unsaved &lt;code&gt;Place&lt;/code&gt; raises &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">일대일 관계에 개체를 할당하기 전에 개체를 저장해야합니다. 예를 들어, 저장되지 않은 &lt;code&gt;Place&lt;/code&gt; 가 있는 &lt;code&gt;Restaurant&lt;/code&gt; 을 만들면 &lt;code&gt;ValueError&lt;/code&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="3aa4492251f1f89b7d1b67c82923a765943b8b96" translate="yes" xml:space="preserve">
          <source>Note that you set &lt;code&gt;feed_type&lt;/code&gt; to a class object, not an instance.</source>
          <target state="translated">&lt;code&gt;feed_type&lt;/code&gt; 을 인스턴스가 아닌 클래스 객체로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="41780517e58575ae1fd4b7cf13682bde6c859248" translate="yes" xml:space="preserve">
          <source>Note that you&amp;rsquo;ll have to provide the surrounding &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements yourself.</source>
          <target state="translated">주변의 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 요소를 직접 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="739a26284bb028620f19294b60895ab661309c8a" translate="yes" xml:space="preserve">
          <source>Note that you&amp;rsquo;ll need to call &lt;a href=&quot;#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded&quot;&gt;&lt;code&gt;get_decoded()&lt;/code&gt;&lt;/a&gt; to get the session dictionary. This is necessary because the dictionary is stored in an encoded format:</source>
          <target state="translated">세션 사전을 가져 오려면 &lt;a href=&quot;#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded&quot;&gt; &lt;code&gt;get_decoded()&lt;/code&gt; &lt;/a&gt; 를 호출해야합니다 . 사전은 인코딩 된 형식으로 저장되므로 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5764965c279a49130b8ab3f921987b56c15bcdef" translate="yes" xml:space="preserve">
          <source>Note that, with static (middleware-less) translation, the language is in &lt;code&gt;settings.LANGUAGE_CODE&lt;/code&gt;, while with dynamic (middleware) translation, it&amp;rsquo;s in &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt;.</source>
          <target state="translated">정적 (미들웨어가없는) 번역의 경우 언어는 &lt;code&gt;settings.LANGUAGE_CODE&lt;/code&gt; 에 있고 동적 (미들웨어) 번역의 경우 &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="285f98e8d01e4962eff6724b78a3c6724d0931e6" translate="yes" xml:space="preserve">
          <source>Note that:</source>
          <target state="translated">참고 :</target>
        </trans-unit>
        <trans-unit id="2c5683f35f8382bf853d6c54b47a1958d38402e3" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;list()&lt;/code&gt; call around the Blog &lt;code&gt;QuerySet&lt;/code&gt; to force execution of the first query. Without it, a nested query would be executed, because &lt;a href=&quot;../../topics/db/queries#querysets-are-lazy&quot;&gt;QuerySets are lazy&lt;/a&gt;.</source>
          <target state="translated">첫 번째 쿼리를 강제로 실행 하려면 블로그 &lt;code&gt;QuerySet&lt;/code&gt; 주위 의 &lt;code&gt;list()&lt;/code&gt; 호출에 유의하십시오 . &lt;a href=&quot;../../topics/db/queries#querysets-are-lazy&quot;&gt;그렇지 않으면 QuerySets가 게으 르기&lt;/a&gt; 때문에 중첩 쿼리가 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="50042f95afef19ddcee485ac7f7b1bcf7743b564" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;pk&lt;/code&gt; named group, which &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; uses to look up the &lt;code&gt;Author&lt;/code&gt; instance. You could also use a slug, or any of the other features of &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;Author&lt;/code&gt; 인스턴스 를 조회하는 데 사용 하는 &lt;code&gt;pk&lt;/code&gt; named group을 참고하십시오 . 슬러그 또는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 의 다른 기능을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1548150f65982792369c241ae984f2b20c5090cc" translate="yes" xml:space="preserve">
          <source>Note the addition of &lt;code&gt;import datetime&lt;/code&gt; and &lt;code&gt;from django.utils import
timezone&lt;/code&gt;, to reference Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module and Django&amp;rsquo;s time-zone-related utilities in &lt;a href=&quot;../ref/utils#module-django.utils.timezone&quot;&gt;&lt;code&gt;django.utils.timezone&lt;/code&gt;&lt;/a&gt;, respectively. If you aren&amp;rsquo;t familiar with time zone handling in Python, you can learn more in the &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;time zone support docs&lt;/a&gt;.</source>
          <target state="translated">의 추가 참고 &lt;code&gt;import datetime&lt;/code&gt; 및 &lt;code&gt;from django.utils import timezone&lt;/code&gt; 파이썬의 표준 참조하려면 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 에 모듈과 장고의 시간대 관련 유틸리티를 &lt;a href=&quot;../ref/utils#module-django.utils.timezone&quot;&gt; &lt;code&gt;django.utils.timezone&lt;/code&gt; &lt;/a&gt; 각각. 파이썬에서 표준 시간대 처리에 익숙하지 않다면 &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;표준 시간대 지원 문서&lt;/a&gt; 에서 더 많은 것을 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36e778e75c22dd51e685a8060e6bf755ecbdde51" translate="yes" xml:space="preserve">
          <source>Note the first query will match &lt;code&gt;'Beatles Blog'&lt;/code&gt;, &lt;code&gt;'beatles blog'&lt;/code&gt;, &lt;code&gt;'BeAtLes BLoG'&lt;/code&gt;, etc.</source>
          <target state="translated">첫 번째 쿼리는 &lt;code&gt;'Beatles Blog'&lt;/code&gt; , &lt;code&gt;'beatles blog'&lt;/code&gt; , &lt;code&gt;'BeAtLes BLoG'&lt;/code&gt; 등과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="20d78a8e421517dfc8501178399cb2a435e63306" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
          <target state="translated">다음에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="4270a55c8d2d5be21936635e96658dc1d9f116f5" translate="yes" xml:space="preserve">
          <source>Note the second example is more restrictive.</source>
          <target state="translated">두 번째 예는 더 제한적입니다.</target>
        </trans-unit>
        <trans-unit id="f90cc3f74d38c8aecec6b1b3c2cf127ed6722f4d" translate="yes" xml:space="preserve">
          <source>Note there is a race condition if you allow objects to be created while this migration is running. Objects created after the &lt;code&gt;AddField&lt;/code&gt; and before &lt;code&gt;RunPython&lt;/code&gt; will have their original &lt;code&gt;uuid&lt;/code&gt;&amp;rsquo;s overwritten.</source>
          <target state="translated">이 마이그레이션이 실행되는 동안 개체를 만들 수있게하려면 경쟁 조건이 있습니다. 애프터 만든 개체 &lt;code&gt;AddField&lt;/code&gt; 및 이전 &lt;code&gt;RunPython&lt;/code&gt; 원래의 것 &lt;code&gt;uuid&lt;/code&gt; 의 덮어 쓰기를.</target>
        </trans-unit>
        <trans-unit id="e57ad67f321891403673ac74379faf842d068ac0" translate="yes" xml:space="preserve">
          <source>Note this doesn&amp;rsquo;t delete the related objects &amp;ndash; it just disassociates them.</source>
          <target state="translated">이것은 관련 개체를 삭제하는 것이 아니라 연결을 해제하기 만합니다.</target>
        </trans-unit>
        <trans-unit id="625d205aa6a02c8990ca032fce68080c4bbaac13" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a &lt;code&gt;pub_date&lt;/code&gt; that falls on a Monday (day 1 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Monday and day 7 being Sunday.</source>
          <target state="translated">이는 월 또는 연도에 관계없이 월요일 (요일 1 일)에 해당 하는 &lt;code&gt;pub_date&lt;/code&gt; 를 가진 모든 레코드와 일치 합니다. 요일은 1 일이 월요일이고 7 일이 일요일로 인덱싱됩니다.</target>
        </trans-unit>
        <trans-unit id="1e1c648f6363a79666bda4022f326dccc253cf89" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a &lt;code&gt;pub_date&lt;/code&gt; that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday.</source>
          <target state="translated">이는 월 또는 연도에 상관없이 월요일 (요일 2 일)에 해당 하는 &lt;code&gt;pub_date&lt;/code&gt; 의 모든 레코드와 일치 합니다. 요일은 1 일이 일요일이고 7 일이 토요일 인 것으로 색인됩니다.</target>
        </trans-unit>
        <trans-unit id="e6eb4a1725fee4458ebd4aae91065f1733dbed3c" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc.</source>
          <target state="translated">이는 1 월 3 일, 7 월 3 일 등 3 월 3 일에 pub_date와 일치하는 레코드와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="91a2cf41eebcf0cbbe41c2fed03384b950262468" translate="yes" xml:space="preserve">
          <source>Note this will match the headline &lt;code&gt;'Lennon honored today'&lt;/code&gt; but not &lt;code&gt;'lennon
honored today'&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;'Lennon honored today'&lt;/code&gt; 라는 제목과 일치 하지만 &lt;code&gt;'lennon honored today'&lt;/code&gt; 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fd54aed7458a908757d562528231778dc691427f" translate="yes" xml:space="preserve">
          <source>Note this will match the headline &lt;code&gt;'Today Lennon honored'&lt;/code&gt; but not &lt;code&gt;'today lennon honored'&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;'Today Lennon honored'&lt;/code&gt; 제목과 일치 하지만 '오늘 레논 명예' &lt;code&gt;'today lennon honored'&lt;/code&gt; 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="97147c98752b50c4fd43dfdbddc52f844a56c7e1" translate="yes" xml:space="preserve">
          <source>Note, however, that like &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt;&lt;code&gt;Model.full_clean()&lt;/code&gt;&lt;/a&gt;, a model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method is not invoked when you call your model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">그러나 &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt; &lt;code&gt;Model.full_clean()&lt;/code&gt; &lt;/a&gt; 과 같이 모델의 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드를 호출 할 때 모델의 &lt;code&gt;clean()&lt;/code&gt; 메소드가 호출되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e3ef265b66c27a036bf430bdf6cdf4e5f69c53b0" translate="yes" xml:space="preserve">
          <source>Note, however, that the first of these will raise &lt;code&gt;IndexError&lt;/code&gt; while the second will raise &lt;code&gt;DoesNotExist&lt;/code&gt; if no objects match the given criteria. See &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">그러나이 중 첫 번째는 &lt;code&gt;IndexError&lt;/code&gt; 를 발생시키고 두 번째는 지정된 기준과 일치하는 개체가 없으면 &lt;code&gt;DoesNotExist&lt;/code&gt; 를 발생 시킵니다 . 자세한 내용은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4bf23a731a060601e951cfde8e837da30936df56" translate="yes" xml:space="preserve">
          <source>Note, however, that these bulk update methods cannot call the &lt;code&gt;save()&lt;/code&gt; or &lt;code&gt;delete()&lt;/code&gt; methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object &lt;a href=&quot;../../ref/signals&quot;&gt;signals&lt;/a&gt;.</source>
          <target state="translated">그러나 이러한 대량 업데이트 메소드는 개별 인스턴스 의 &lt;code&gt;save()&lt;/code&gt; 또는 &lt;code&gt;delete()&lt;/code&gt; 메소드를 호출 할 수 없습니다. 즉, 일반 데이터베이스 오브젝트 &lt;a href=&quot;../../ref/signals&quot;&gt;신호&lt;/a&gt; 에서 구동되는 것을 포함하여 이러한 메소드에 대해 추가 한 사용자 정의 동작이 실행되지 않습니다. .</target>
        </trans-unit>
        <trans-unit id="c9a64d96116de9297dfea7c94ac09033ffbd0323" translate="yes" xml:space="preserve">
          <source>Note, the beginning of the pattern (&lt;code&gt;r'^static/'&lt;/code&gt;) should be your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">패턴의 시작 ( &lt;code&gt;r'^static/'&lt;/code&gt; )은 &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 설정 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="53e1a6480426cb88534e0d776b00fdf6ab609686" translate="yes" xml:space="preserve">
          <source>Note, the snippet assumes your &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; has a value of &lt;code&gt;'/media/'&lt;/code&gt;. This will call the &lt;a href=&quot;#django.views.static.serve&quot;&gt;&lt;code&gt;serve()&lt;/code&gt;&lt;/a&gt; view, passing in the path from the URLconf and the (required) &lt;code&gt;document_root&lt;/code&gt; parameter.</source>
          <target state="translated">이 스 니펫은 &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 의 값이 &lt;code&gt;'/media/'&lt;/code&gt; 라고 가정합니다 . URLconf 및 (필수) &lt;code&gt;document_root&lt;/code&gt; 매개 변수 의 경로를 전달 하여 &lt;a href=&quot;#django.views.static.serve&quot;&gt; &lt;code&gt;serve()&lt;/code&gt; &lt;/a&gt; 보기 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="9ef9ec7a9d7bf170473fb43f8eca38078f7b19b8" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;order_by('?')&lt;/code&gt; queries may be expensive and slow, depending on the database backend you&amp;rsquo;re using.</source>
          <target state="translated">참고 : &lt;code&gt;order_by('?')&lt;/code&gt; 쿼리는 사용중인 데이터베이스 백엔드에 따라 비싸고 느릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="befec88db067d5cfe6f992fabb031cd376020ac6" translate="yes" xml:space="preserve">
          <source>Note: As with &lt;code&gt;get()&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception will be raised if more than one object is found.</source>
          <target state="translated">참고 :와 마찬가지로 &lt;code&gt;get()&lt;/code&gt; 하는 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; 의&lt;/a&gt; 하나 이상의 개체가 발견되면 예외가 발생됩니다.</target>
        </trans-unit>
        <trans-unit id="910a845f2c2f78c037f270de3da706b062724005" translate="yes" xml:space="preserve">
          <source>Note: Don&amp;rsquo;t use this if all you want to do is determine if at least one result exists. It&amp;rsquo;s more efficient to use &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참고 : 원하는 결과가 하나 이상 있는지 확인하려는 경우에는 사용하지 마십시오. &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt; 를 사용 하는 것이 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="385f626475e0107c6a0177ca3b63ffea00ce9f62" translate="yes" xml:space="preserve">
          <source>Note: If you only need to determine the number of records in the set (and don&amp;rsquo;t need the actual objects), it&amp;rsquo;s much more efficient to handle a count at the database level using SQL&amp;rsquo;s &lt;code&gt;SELECT COUNT(*)&lt;/code&gt;. Django provides a &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; method for precisely this reason.</source>
          <target state="translated">참고 : 세트의 레코드 수만 판별해야하고 실제 오브젝트는 필요하지 않은 경우 SQL의 &lt;code&gt;SELECT COUNT(*)&lt;/code&gt; 사용하여 데이터베이스 레벨에서 계수를 처리하는 것이 훨씬 효율적 입니다. Django는 이러한 이유로 정확하게 &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="e985be7c9234ac7fdd7d0605d286a7defa1cd034" translate="yes" xml:space="preserve">
          <source>Note: If you only want to determine if at least one result exists (and don&amp;rsquo;t need the actual objects), it&amp;rsquo;s more efficient to use &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참고 : 하나 이상의 결과 만 존재하는지 (실제 객체가 필요 없는지) 확인하려는 경우 &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt; 를 사용 하는 것이 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="d230e76ec82af164b0c7d3b96c1e1a1415482dfc" translate="yes" xml:space="preserve">
          <source>Note: Without a really compelling reason, such as a host that doesn&amp;rsquo;t support them, you should stick to the cache backends included with Django. They&amp;rsquo;ve been well-tested and are well-documented.</source>
          <target state="translated">참고 : 호스트를 지원하지 않는 호스트와 같은 강력한 이유없이 Django에 포함 된 캐시 백엔드를 사용해야합니다. 그들은 잘 테스트되고 잘 문서화되었습니다.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="a8813e550b224d06483ad44dd0caab3e91810f54" translate="yes" xml:space="preserve">
          <source>Notes on field ordering</source>
          <target state="translated">현장 주문에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="03285d22efba2cd6d7db91dcbcfa20e93a3abcbd" translate="yes" xml:space="preserve">
          <source>Notes on specific fields</source>
          <target state="translated">특정 분야에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="000e64e4b4ee3745e9af8db1a328fea32acd56cf" translate="yes" xml:space="preserve">
          <source>Notice also that as both sides are used multiple times in the query the params need to contain &lt;code&gt;lhs_params&lt;/code&gt; and &lt;code&gt;rhs_params&lt;/code&gt; multiple times.</source>
          <target state="translated">또한 쿼리에서 양쪽이 여러 번 사용되므로 params는 &lt;code&gt;lhs_params&lt;/code&gt; 와 &lt;code&gt;rhs_params&lt;/code&gt; 를 여러 번 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2384e08c0f35bbe96198a9eea0586bf6a621eb2b" translate="yes" xml:space="preserve">
          <source>Notice first that we&amp;rsquo;ve moved &lt;code&gt;make_published&lt;/code&gt; into a method and renamed the &lt;code&gt;modeladmin&lt;/code&gt; parameter to &lt;code&gt;self&lt;/code&gt;, and second that we&amp;rsquo;ve now put the string &lt;code&gt;'make_published'&lt;/code&gt; in &lt;code&gt;actions&lt;/code&gt; instead of a direct function reference. This tells the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; to look up the action as a method.</source>
          <target state="translated">우리가 이동 한 것을 첫째주의 &lt;code&gt;make_published&lt;/code&gt; 방법으로하고 이름을 바꾼 &lt;code&gt;modeladmin&lt;/code&gt; 의 에 매개 변수를 &lt;code&gt;self&lt;/code&gt; , 우리는 문자열을 넣어 이제 한 두 번째 것을 &lt;code&gt;'make_published'&lt;/code&gt; 에서 &lt;code&gt;actions&lt;/code&gt; 대신 직접 함수를 참조하십시오. 이는 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 에게 조치를 메소드로 찾도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="8b0cc5089c4b2a1219a366349dd5e31eab5291cc" translate="yes" xml:space="preserve">
          <source>Notice how the first block ends with &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; and the new one starts with &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt;. Without the &lt;code&gt;{% resetcycle %}&lt;/code&gt; tag, the second block would start with &lt;code&gt;class=&quot;even&quot;&lt;/code&gt;.</source>
          <target state="translated">공지 방법에 첫 번째 블록 종료 &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; 와 함께 새로운 시작 &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; . &lt;code&gt;{% resetcycle %}&lt;/code&gt; 태그가 없으면 두 번째 블록은 &lt;code&gt;class=&quot;even&quot;&lt;/code&gt; 로 시작 합니다.</target>
        </trans-unit>
        <trans-unit id="f70af69036a60f939ee11c7ec6dd9119fc16aaef" translate="yes" xml:space="preserve">
          <source>Notice how we need to explicitly render &lt;code&gt;{{ form.id }}&lt;/code&gt;. This ensures that the model formset, in the &lt;code&gt;POST&lt;/code&gt; case, will work correctly. (This example assumes a primary key named &lt;code&gt;id&lt;/code&gt;. If you&amp;rsquo;ve explicitly defined your own primary key that isn&amp;rsquo;t called &lt;code&gt;id&lt;/code&gt;, make sure it gets rendered.)</source>
          <target state="translated">&lt;code&gt;{{ form.id }}&lt;/code&gt; 를 명시 적으로 렌더링해야하는 방법에 주목하십시오 . 이렇게하면 &lt;code&gt;POST&lt;/code&gt; 의 경우 모델 양식이 올바르게 작동합니다. (이 예제에서는 &lt;code&gt;id&lt;/code&gt; 라는 기본 키를 가정합니다 . &lt;code&gt;id&lt;/code&gt; 라고하지 않는 자신의 기본 키를 명시 적으로 정의한 경우 렌더링되도록하십시오.)</target>
        </trans-unit>
        <trans-unit id="0229f8c21d6b19db58706ac73ebaa3b227103d86" translate="yes" xml:space="preserve">
          <source>Notice how we pass &lt;code&gt;instance&lt;/code&gt; in both the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; cases.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 와 &lt;code&gt;GET&lt;/code&gt; 모두에서 &lt;code&gt;instance&lt;/code&gt; 를 전달하는 방법에 주목하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa5250b6be8df62e51f37c769420fd8720950beb" translate="yes" xml:space="preserve">
          <source>Notice how we set &lt;code&gt;self.object&lt;/code&gt; within &lt;code&gt;get()&lt;/code&gt; so we can use it again later in &lt;code&gt;get_context_data()&lt;/code&gt; and &lt;code&gt;get_queryset()&lt;/code&gt;. If you don&amp;rsquo;t set &lt;code&gt;template_name&lt;/code&gt;, the template will default to the normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; choice, which in this case would be &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; because it&amp;rsquo;s a list of books; &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; knows nothing about &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so it doesn&amp;rsquo;t have any clue this view is anything to do with a &lt;code&gt;Publisher&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get()&lt;/code&gt; 내에 &lt;code&gt;self.object&lt;/code&gt; 를 설정 하여 나중에 &lt;code&gt;get_context_data()&lt;/code&gt; 및 &lt;code&gt;get_queryset()&lt;/code&gt; 에서 다시 사용할 수 있도록 하는 방법에 주목 하십시오 . &lt;code&gt;template_name&lt;/code&gt; 을 설정하지 않으면 템플릿은 기본 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 선택 항목 으로 기본 설정 &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; 경우 책 목록이므로 &quot;books / book_list.html&quot; 이됩니다. &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 에 대해 아무것도 모르므 로이 뷰가 &lt;code&gt;Publisher&lt;/code&gt; 와 관련이 있다는 단서가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0f13f463d1411391b196b9c3d220258b3801b8b2" translate="yes" xml:space="preserve">
          <source>Notice how we set &lt;code&gt;self.object&lt;/code&gt; within &lt;code&gt;get()&lt;/code&gt; so we can use it again later in &lt;code&gt;get_context_data()&lt;/code&gt; and &lt;code&gt;get_queryset()&lt;/code&gt;. If you don&amp;rsquo;t set &lt;code&gt;template_name&lt;/code&gt;, the template will default to the normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; choice, which in this case would be &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; because it&amp;rsquo;s a list of books; &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; knows nothing about &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so it doesn&amp;rsquo;t have any clue this view is anything to do with a &lt;code&gt;Publisher&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get()&lt;/code&gt; 내에서 &lt;code&gt;self.object&lt;/code&gt; 를 설정 하여 나중에 &lt;code&gt;get_context_data()&lt;/code&gt; 및 &lt;code&gt;get_queryset()&lt;/code&gt; 에서 다시 사용할 수 있도록 하는 방법에 주목 하십시오 . &lt;code&gt;template_name&lt;/code&gt; 을 설정하지 않으면 템플릿은 기본적으로 일반 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 선택 으로 설정됩니다. 이 경우 &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; 목록이므로 &quot;books / book_list.html&quot; 이됩니다. &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 에 대해 아무것도 모르기 때문에이 뷰가 &lt;code&gt;Publisher&lt;/code&gt; 와 관련이 있다는 단서가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f88f6f6b02e714ff2c4fe469bdc1f6fb93d22663" translate="yes" xml:space="preserve">
          <source>Notice how we used &lt;code&gt;self&lt;/code&gt; to scope the &lt;code&gt;CycleNode&lt;/code&gt; specific information within the &lt;code&gt;render_context&lt;/code&gt;. There may be multiple &lt;code&gt;CycleNodes&lt;/code&gt; in a given template, so we need to be careful not to clobber another node&amp;rsquo;s state information. The easiest way to do this is to always use &lt;code&gt;self&lt;/code&gt; as the key into &lt;code&gt;render_context&lt;/code&gt;. If you&amp;rsquo;re keeping track of several state variables, make &lt;code&gt;render_context[self]&lt;/code&gt; a dictionary.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 를 사용 하여 &lt;code&gt;render_context&lt;/code&gt; 내에서 &lt;code&gt;CycleNode&lt;/code&gt; 특정 정보의 범위를 지정 하는 방법에 주목 하십시오 . 주어진 템플릿에 여러 개의 &lt;code&gt;CycleNodes&lt;/code&gt; 가있을 수 있으므로 다른 노드의 상태 정보를 방해 하지 않도록주의해야합니다. 이를 수행하는 가장 쉬운 방법은 항상 &lt;code&gt;self&lt;/code&gt; 를 &lt;code&gt;render_context&lt;/code&gt; 의 키로 사용하는 것 입니다. 여러 상태 변수를 추적하는 경우 &lt;code&gt;render_context[self]&lt;/code&gt; 를 사전으로 만드십시오 .</target>
        </trans-unit>
        <trans-unit id="cb164517055d21810f3fcb5b55cae736b85fa840" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;(0, 0)&lt;/code&gt; is the first and last coordinate &amp;ndash; if they were not equal, an error would be raised.</source>
          <target state="translated">공지 사항 것을 &lt;code&gt;(0, 0)&lt;/code&gt; 첫 번째와 마지막 좌표 - 그들은 동일한되지 않은 경우, 오류가 발생 될 것이다.</target>
        </trans-unit>
        <trans-unit id="ac06989a6888c756b6647843b41cc87a3733f5ba" translate="yes" xml:space="preserve">
          <source>Notice that along with a filtered &lt;code&gt;queryset&lt;/code&gt;, we&amp;rsquo;re also using a custom template name. If we didn&amp;rsquo;t, the generic view would use the same template as the &amp;ldquo;vanilla&amp;rdquo; object list, which might not be what we want.</source>
          <target state="translated">필터링 된 &lt;code&gt;queryset&lt;/code&gt; 과 함께 맞춤 템플릿 이름도 사용하고 있습니다. 그렇지 않은 경우 일반 뷰는 &quot;vanilla&quot;객체 목록과 동일한 템플릿을 사용하므로 원하는 형식이 아닐 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="423d90eb39ba0efaae8b6fe6038d1df1eed0d32b" translate="yes" xml:space="preserve">
          <source>Notice that the custom patterns are included &lt;em&gt;before&lt;/em&gt; the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you&amp;rsquo;ll usually want to prepend your custom URLs to the built-in ones.</source>
          <target state="translated">사용자 정의 패턴은 일반 관리 URL &lt;em&gt;앞에&lt;/em&gt; 포함 됩니다. 관리 URL 패턴은 매우 관용적이며 거의 모든 것과 일치하므로 일반적으로 사용자 정의 URL을 내장 된 URL 앞에 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a287bfd08800792a69e7a9c13eeb25e0be2944c0" translate="yes" xml:space="preserve">
          <source>Notice that the function takes a &lt;code&gt;sender&lt;/code&gt; argument, along with wildcard keyword arguments (&lt;code&gt;**kwargs&lt;/code&gt;); all signal handlers must take these arguments.</source>
          <target state="translated">이 함수는 와일드 카드 키워드 인수 ( &lt;code&gt;**kwargs&lt;/code&gt; ) 와 함께 &lt;code&gt;sender&lt;/code&gt; 인수를 사용합니다 . 모든 신호 핸들러는이 인수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c6d96c5e92b1bc39c53248522c2579dd44ac99ae" translate="yes" xml:space="preserve">
          <source>Notice that there isn&amp;rsquo;t a lot in these examples that&amp;rsquo;s PDF-specific &amp;ndash; just the bits using &lt;code&gt;reportlab&lt;/code&gt;. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see &lt;a href=&quot;outputting-csv&quot;&gt;Outputting CSV with Django&lt;/a&gt; for another example and some techniques you can use when generated text-based formats.</source>
          <target state="translated">이 예제에는 PDF에 특정한 것이 &lt;code&gt;reportlab&lt;/code&gt; 사용하는 비트 만 있습니다. 비슷한 기술을 사용하여 파이썬 라이브러리를 찾을 수있는 임의의 형식을 생성 할 수 있습니다. 다른 예제와 텍스트 기반 형식을 생성 할 때 사용할 수있는 기술에 대해서는 &lt;a href=&quot;outputting-csv&quot;&gt;Django&lt;/a&gt; 로 CSV 출력을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="62566baa057cfcfdb2bc356cfe8e2afa1aa5d755" translate="yes" xml:space="preserve">
          <source>Notice that there isn&amp;rsquo;t very much specific to CSV here &amp;ndash; just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see &lt;a href=&quot;outputting-pdf&quot;&gt;Outputting PDFs with Django&lt;/a&gt; for an example.</source>
          <target state="translated">여기에는 CSV에만 국한된 것이 아니라 특정 출력 형식 만 있습니다. 이러한 기술 중 하나를 사용하여 원하는 텍스트 기반 형식을 출력 할 수 있습니다. 유사한 기술을 사용하여 임의의 이진 데이터를 생성 할 수도 있습니다. 예를 들어 &lt;a href=&quot;outputting-pdf&quot;&gt;Django&lt;/a&gt; 로 PDF 출력하기를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec92f0273100502d01875ac12f88f482d518616e" translate="yes" xml:space="preserve">
          <source>Notice that we always return a &lt;code&gt;Hand&lt;/code&gt; instance from these methods. That&amp;rsquo;s the Python object type we want to store in the model&amp;rsquo;s attribute.</source>
          <target state="translated">이 메소드에서 항상 &lt;code&gt;Hand&lt;/code&gt; 인스턴스를 반환 합니다. 이것이 모델 속성에 저장하려는 Python 객체 유형입니다.</target>
        </trans-unit>
        <trans-unit id="7cb962ccf88e6d68aadedd4642d88f1b96287c61" translate="yes" xml:space="preserve">
          <source>Notice that we have to pass &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; into the form&amp;rsquo;s constructor; this is how file data gets bound into a form.</source>
          <target state="translated">&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; 를 폼의 생성자 에 전달해야합니다 . 파일 데이터가 양식에 바인딩되는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="ebe9aa5966d9fd8238eb5df6b3f145913747b3be" translate="yes" xml:space="preserve">
          <source>Notice the wrapped view in the fifth line above:</source>
          <target state="translated">위의 다섯 번째 줄에 래핑 된 뷰가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d3a34e68924487518a00635e921200b1ac742b0" translate="yes" xml:space="preserve">
          <source>Now &amp;ldquo;Choices&amp;rdquo; is an available option in the Django admin. The &amp;ldquo;Add choice&amp;rdquo; form looks like this:</source>
          <target state="translated">이제 &quot;Choices&quot;는 Django 관리자에서 사용 가능한 옵션입니다. &amp;ldquo;선택 추가&amp;rdquo;양식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3506a6d9619d5b948e78683002fea85609bda448" translate="yes" xml:space="preserve">
          <source>Now Django knows to include the &lt;code&gt;polls&lt;/code&gt; app. Let&amp;rsquo;s run another command:</source>
          <target state="translated">이제 Django는 &lt;code&gt;polls&lt;/code&gt; 앱 을 포함하는 것을 알고 있습니다. 다른 명령을 실행 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="7f03ca20e19c12646270f4a55b9c68e694ccfc63" translate="yes" xml:space="preserve">
          <source>Now books can use that natural key to refer to &lt;code&gt;Person&lt;/code&gt; objects:</source>
          <target state="translated">이제 책은 자연 키를 사용하여 &lt;code&gt;Person&lt;/code&gt; 객체 를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f48eb4671182254c386d97a21fd740b58e671430" translate="yes" xml:space="preserve">
          <source>Now change your &lt;code&gt;polls/index.html&lt;/code&gt; template from:</source>
          <target state="translated">이제 &lt;code&gt;polls/index.html&lt;/code&gt; 템플릿을 다음에서 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c17a0825c6bc86f0b3d2cec1786b40f2a2a7adf" translate="yes" xml:space="preserve">
          <source>Now create a directory called &lt;code&gt;admin&lt;/code&gt; inside &lt;code&gt;templates&lt;/code&gt;, and copy the template &lt;code&gt;admin/base_site.html&lt;/code&gt; from within the default Django admin template directory in the source code of Django itself (&lt;code&gt;django/contrib/admin/templates&lt;/code&gt;) into that directory.</source>
          <target state="translated">이제 &lt;code&gt;templates&lt;/code&gt; 안에 &lt;code&gt;admin&lt;/code&gt; 이라는 디렉토리를 작성하고 Django 자체의 소스 코드 ( &lt;code&gt;django/contrib/admin/templates&lt;/code&gt; )에 있는 기본 Django 관리 템플리트 디렉토리에서 &lt;code&gt;admin/base_site.html&lt;/code&gt; 템플리트를 해당 디렉토리에 복사하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad66c95e391e146cd22fbf05a88db00e41ed0fca" translate="yes" xml:space="preserve">
          <source>Now create admin views for the &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; models:</source>
          <target state="translated">이제 &lt;code&gt;Person&lt;/code&gt; 및 &lt;code&gt;Group&lt;/code&gt; 모델에 대한 관리자보기를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="32171b8cd59d1de6923e5f771f767aa171c9ff0d" translate="yes" xml:space="preserve">
          <source>Now for our hands-on example.</source>
          <target state="translated">이제 실습 예제입니다.</target>
        </trans-unit>
        <trans-unit id="729e7fc2aa726bb0bbccd67b261c45e009998ba6" translate="yes" xml:space="preserve">
          <source>Now in your time on the web you may have come across such beauties as &amp;ldquo;ME2/Sites/dirmod.asp?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&amp;rdquo;. You will be pleased to know that Django allows us much more elegant &lt;em&gt;URL patterns&lt;/em&gt; than that.</source>
          <target state="translated">이제 웹에서 당신은&amp;ldquo;ME2 / Sites / dirmod.asp? sid = &amp;amp; type = gen &amp;amp; mod = Core + Pages &amp;amp; gid = A6CD4967199A42D9B65B1B&amp;rdquo;와 같은 아름다움을 경험했을 것입니다. Django는 그보다 훨씬 더 우아한 &lt;em&gt;URL 패턴을&lt;/em&gt; 허용한다는 것을 알게되어 기쁩니다 .</target>
        </trans-unit>
        <trans-unit id="4a92f218cc3e9875e924bf54caa6461c527dc629" translate="yes" xml:space="preserve">
          <source>Now in your time on the web you may have come across such beauties as &lt;code&gt;ME2/Sites/dirmod.htm?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&lt;/code&gt;. You will be pleased to know that Django allows us much more elegant &lt;em&gt;URL patterns&lt;/em&gt; than that.</source>
          <target state="translated">이제 웹에서 &lt;code&gt;ME2/Sites/dirmod.htm?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&lt;/code&gt; 와 같은 아름다움을 발견했을 것 입니다. Django 가 그것보다 훨씬 더 우아한 &lt;em&gt;URL 패턴을&lt;/em&gt; 허용한다는 사실에 기뻐할 것입니다.</target>
        </trans-unit>
        <trans-unit id="d7ae0cff622895ccfc58ecd68188d07d6dbf3c75" translate="yes" xml:space="preserve">
          <source>Now is a good time to check your backup strategy for these files.</source>
          <target state="translated">이제 이러한 파일에 대한 백업 전략을 확인하기에 좋은시기입니다.</target>
        </trans-unit>
        <trans-unit id="36e9dc72ab05bd8c0ba6109d8103272522c57402" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to go through all the changes made in our patch. To stage all the changes ready for commit, run:</source>
          <target state="translated">이제 패치에서 변경 한 내용을 모두 살펴볼 차례입니다. 커밋 준비가 된 모든 변경 사항을 준비하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="f163c45d21c3827f27074167e2374cf71f319599" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s add a few more views to &lt;code&gt;polls/views.py&lt;/code&gt;. These views are slightly different, because they take an argument:</source>
          <target state="translated">이제 &lt;code&gt;polls/views.py&lt;/code&gt; 에 뷰를 몇 개 더 추가 하겠습니다 . 이러한 견해는 인수를 취하기 때문에 약간 다릅니다.</target>
        </trans-unit>
        <trans-unit id="f9a6d41951be6209dd204da14498c508cbc2918a" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s take a closer look at the &lt;code&gt;model&lt;/code&gt; argument we&amp;rsquo;ve been using all along. The &lt;code&gt;model&lt;/code&gt; argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the &lt;code&gt;model&lt;/code&gt; argument is not the only way to specify the objects that the view will operate upon &amp;ndash; you can also specify the list of objects using the &lt;code&gt;queryset&lt;/code&gt; argument:</source>
          <target state="translated">이제 우리가 함께 사용했던 &lt;code&gt;model&lt;/code&gt; 논쟁에 대해 자세히 살펴 보겠습니다 . &lt;code&gt;model&lt;/code&gt; 뷰에 작동하는 데이터베이스 모델을 지정하는 인수는 하나의 개체 또는 개체의 컬렉션에서 작동하는 모든 일반 뷰에서 사용할 수 있습니다. 그러나 &lt;code&gt;model&lt;/code&gt; 인수가 뷰가 작동 할 오브젝트를 지정하는 유일한 방법은 아닙니다. &lt;code&gt;queryset&lt;/code&gt; 인수를 사용하여 오브젝트 목록을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="04c4dc8474d5993bb9a263be8a4f51e3572a25c0" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s update our &lt;code&gt;index&lt;/code&gt; view in &lt;code&gt;polls/views.py&lt;/code&gt; to use the template:</source>
          <target state="translated">이제 &lt;code&gt;polls/views.py&lt;/code&gt; 에서 &lt;code&gt;index&lt;/code&gt; 뷰를 업데이트 하여 템플릿을 사용 하겠습니다 :</target>
        </trans-unit>
        <trans-unit id="f7acf85e2f16d675683380e16460476b2319c859" translate="yes" xml:space="preserve">
          <source>Now normal &lt;code&gt;Person&lt;/code&gt; queries will be unordered and &lt;code&gt;OrderedPerson&lt;/code&gt; queries will be ordered by &lt;code&gt;last_name&lt;/code&gt;.</source>
          <target state="translated">이제 일반 &lt;code&gt;Person&lt;/code&gt; 쿼리는 정렬되지 않고 &lt;code&gt;OrderedPerson&lt;/code&gt; 쿼리는 &lt;code&gt;last_name&lt;/code&gt; 으로 정렬됩니다 .</target>
        </trans-unit>
        <trans-unit id="52926bd958ab5c5a3c94125229eeb6b79ce9a920" translate="yes" xml:space="preserve">
          <source>Now sit back and relax. Django&amp;rsquo;s entire test suite has thousands of tests, and it takes at least a few minutes run, depending on the speed of your computer.</source>
          <target state="translated">이제 앉아서 휴식을 취하십시오. Django의 전체 테스트 스위트는 수천 번의 테스트를 거쳤으며 컴퓨터 속도에 따라 최소 몇 분 정도 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7662abc4461a188dc00d3f866b2b22d621b6328a" translate="yes" xml:space="preserve">
          <source>Now sit back and relax. Django&amp;rsquo;s entire test suite has thousands of tests, and it takes at least a few minutes to run, depending on the speed of your computer.</source>
          <target state="translated">이제 편안히 앉아 휴식을 취하십시오. Django의 전체 테스트 스위트에는 수천 개의 테스트가 있으며 컴퓨터 속도에 따라 실행하는 데 최소한 몇 분이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="1207f077c878e60c8e36479acd1b3e82b4924ee9" translate="yes" xml:space="preserve">
          <source>Now that the Question admin page is looking good, let&amp;rsquo;s make some tweaks to the &amp;ldquo;change list&amp;rdquo; page &amp;ndash; the one that displays all the questions in the system.</source>
          <target state="translated">질문 관리 페이지가보기 좋게 표시되었으므로 시스템의 모든 질문을 표시하는 &quot;변경 목록&quot;페이지를 약간 조정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="9c4af4d9ba28bde34b6930edb4ff370956fb3d37" translate="yes" xml:space="preserve">
          <source>Now that the server&amp;rsquo;s running, visit &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt; with your Web browser. You&amp;rsquo;ll see a &amp;ldquo;Congratulations!&amp;rdquo; page, with a rocket taking off. It worked!</source>
          <target state="translated">서버가 실행 &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;중이므로&lt;/a&gt; 웹 브라우저에서 http://127.0.0.1:8000/ 을 방문하십시오 . &quot;축하합니다!&quot;가 표시됩니다. 로켓 이륙과 함께. 효과가 있었다!</target>
        </trans-unit>
        <trans-unit id="75e57caa4343eb4793c179b4fc0c146dbae59a0e" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve packaged and tested &lt;code&gt;django-polls&lt;/code&gt;, it&amp;rsquo;s ready to share with the world! If this wasn&amp;rsquo;t just an example, you could now:</source>
          <target state="translated">&lt;code&gt;django-polls&lt;/code&gt; 를 패키징하고 테스트 했으므로 이제 세계와 공유 할 준비가되었습니다! 이것이 단순한 예가 아니라면 이제 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf406cea330fa6d9142db8c49a22df6724bea522" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve registered &lt;code&gt;Question&lt;/code&gt;, Django knows that it should be displayed on the admin index page:</source>
          <target state="translated">이제 우리는 &lt;code&gt;Question&lt;/code&gt; 을 등록 했으므로 장고는 관리자 색인 페이지에 표시되어야한다는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="75cde598167c7f2589d0c60c6738de9584b976d6" translate="yes" xml:space="preserve">
          <source>Now that you have a local copy of Django, you can install it just like you would install any package using &lt;code&gt;pip&lt;/code&gt;. The most convenient way to do so is by using a &lt;em&gt;virtual environment&lt;/em&gt;, which is a feature built into Python that allows you to keep a separate directory of installed packages for each of your projects so that they don&amp;rsquo;t interfere with each other.</source>
          <target state="translated">Django의 로컬 사본이 있으므로 &lt;code&gt;pip&lt;/code&gt; 를 사용하여 패키지를 설치하는 것처럼 설치할 수 있습니다 . 가장 편리한 방법은 &lt;em&gt;가상 환경&lt;/em&gt; 을 사용하는 것 입니다.이 기능은 각 프로젝트에 대해 설치된 패키지의 별도 디렉토리를 서로 방해하지 않도록 Python에 내장 된 기능입니다.</target>
        </trans-unit>
        <trans-unit id="64bad9fc6f101dcdbda55bfa6724529b3cc5e83a" translate="yes" xml:space="preserve">
          <source>Now that you have set up your &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to use your intermediary model (&lt;code&gt;Membership&lt;/code&gt;, in this case), you&amp;rsquo;re ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model:</source>
          <target state="translated">중개 모델 ( 이 경우 &lt;code&gt;Membership&lt;/code&gt; ) 을 사용하도록 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 를 설정 했으므로 다 대다 관계를 작성할 준비가되었습니다. 중간 모델의 인스턴스를 작성하여이를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="2529a6500c0e15e2c4abe6d28f26cc62054cc372" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve examined your dataset using &lt;code&gt;ogrinfo&lt;/code&gt;, create a GeoDjango model to represent this data:</source>
          <target state="translated">&lt;code&gt;ogrinfo&lt;/code&gt; 를 사용하여 데이터 세트를 조사 했으므로이 데이터를 나타내는 GeoDjango 모델을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="dc2389b5f334729c58b759c145bcf664705ad347" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve seen how to define geographic models and import data with the &lt;a href=&quot;layermapping&quot;&gt;LayerMapping data import utility&lt;/a&gt;, it&amp;rsquo;s possible to further automate this process with use of the &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;ogrinspect&lt;/code&gt;&lt;/a&gt; management command. The &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;ogrinspect&lt;/code&gt;&lt;/a&gt; command introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and &lt;code&gt;LayerMapping&lt;/code&gt; dictionary automatically.</source>
          <target state="translated">&lt;a href=&quot;layermapping&quot;&gt;LayerMapping 데이터 가져 오기 유틸리티를&lt;/a&gt; 사용하여 지리적 모델을 정의하고 데이터를 가져 오는 방법을 살펴 보았 &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;ogrinspect&lt;/code&gt; &lt;/a&gt; 관리 명령 을 사용하여이 프로세스를 추가로 자동화 할 수 있습니다 . &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;ogrinspect&lt;/code&gt; &lt;/a&gt; 명령 검사 한 GDAL 지원 벡터 데이터 소스 (예를 들어, 모양 파일) 및 모델 정의 및 생성 &lt;code&gt;LayerMapping&lt;/code&gt; 자동 사전.</target>
        </trans-unit>
        <trans-unit id="6376b1ae238a5fa6f312c93f3d2f4898fe8c1b17" translate="yes" xml:space="preserve">
          <source>Now that your environment &amp;ndash; a &amp;ldquo;project&amp;rdquo; &amp;ndash; is set up, you&amp;rsquo;re set to start doing work.</source>
          <target state="translated">&quot;프로젝트&quot;환경이 설정되었으므로 작업을 시작하도록 설정되었습니다.</target>
        </trans-unit>
        <trans-unit id="fae278f6e2f60b163eed4caa52b0d02177fea03c" translate="yes" xml:space="preserve">
          <source>Now the question change list page looks like this:</source>
          <target state="translated">이제 질문 변경 목록 페이지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eb90dc277d26d2a028d83b7c97946650cba77833" translate="yes" xml:space="preserve">
          <source>Now we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our static files directly in &lt;code&gt;my_app/static/&lt;/code&gt; (rather than creating another &lt;code&gt;my_app&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will use the first static file it finds whose name matches, and if you had a static file with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those static files inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">이제 우리는 &lt;em&gt;수도&lt;/em&gt; 에서 직접 우리의 정적 파일을 넣어 멀리 얻을 수있을 &lt;code&gt;my_app/static/&lt;/code&gt; (아닌 다른 생성 &lt;code&gt;my_app&lt;/code&gt; 하위 디렉토리를)하지만 실제로 나쁜 아이디어가 될 것입니다. Django는 이름이 일치하는 첫 번째 정적 파일을 사용하며 &lt;em&gt;다른&lt;/em&gt; 응용 프로그램 에서 동일한 이름을 가진 정적 파일 이 있으면 Django는 이들을 구별 할 수 없습니다. Django가 올바른 것을 가리킬 수 있어야하며,이를 보장하는 가장 좋은 방법은 &lt;em&gt;이름을 지정&lt;/em&gt; 하는 것입니다. 즉, 정적 파일을 응용 프로그램 자체의 &lt;em&gt;다른&lt;/em&gt; 디렉토리 에 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="01d175c1e637f3cee5ceb291fdf4c9adfc0dc821" translate="yes" xml:space="preserve">
          <source>Now we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our templates directly in &lt;code&gt;polls/templates&lt;/code&gt; (rather than creating another &lt;code&gt;polls&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will choose the first template it finds whose name matches, and if you had a template with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those templates inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">이제 우리 &lt;em&gt;는&lt;/em&gt; 다른 &lt;code&gt;polls&lt;/code&gt; 서브 디렉토리를 생성하는 대신 &lt;code&gt;polls/templates&lt;/code&gt; 을 polls / templates에 직접 넣을 수 있지만 실제로는 나쁜 생각입니다. Django는 이름이 일치하는 첫 번째 템플릿을 선택하며, &lt;em&gt;다른&lt;/em&gt; 응용 프로그램 에서 동일한 이름을 가진 템플릿이 있으면 Django는 템플릿 을 구별 할 수 없습니다. Django가 올바른 것을 가리킬 수 있어야하며,이를 보장하는 가장 좋은 방법은 &lt;em&gt;이름을 지정&lt;/em&gt; 하는 것입니다. 즉, 해당 템플릿을 응용 프로그램 자체의 &lt;em&gt;다른&lt;/em&gt; 디렉토리 에 넣습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c4f42edd57918625d34396bf4a71a96fb72f5a7" translate="yes" xml:space="preserve">
          <source>Now we are ready to run the test suite. If you&amp;rsquo;re using GNU/Linux, macOS, or some other flavor of Unix, run:</source>
          <target state="translated">이제 테스트 스위트를 실행할 준비가되었습니다. GNU / Linux, macOS 또는 다른 유닉스 계열을 사용하는 경우 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e47a8ac15a5ebf5edb5feb22215c8cd06eb6fb07" translate="yes" xml:space="preserve">
          <source>Now we can write a new &lt;code&gt;PublisherDetail&lt;/code&gt;:</source>
          <target state="translated">이제 새로운 &lt;code&gt;PublisherDetail&lt;/code&gt; 을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7c66e87b3835c409da2dcefebcb4caed4fb353a1" translate="yes" xml:space="preserve">
          <source>Now we define our corresponding Django model (make sure to use &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">이제 해당 Django 모델을 정의합니다 ( &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="7ae1e4292d6b8aae98119242843cc18f427ab83b" translate="yes" xml:space="preserve">
          <source>Now we have a different problem - the longer name of &amp;ldquo;Helena Bonham Carter&amp;rdquo; doesn&amp;rsquo;t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations that don&amp;rsquo;t appear in the source string, so it is no longer considered a close match.</source>
          <target state="translated">이제 우리는 다른 문제가 있습니다.&amp;ldquo;Helena Bonham Carter&amp;rdquo;의 긴 이름은 훨씬 길기 때문에 나타나지 않습니다. Trigram 검색은 세 글자의 모든 조합을 고려하고 검색 및 소스 문자열 모두에 나타나는 수를 비교합니다. 더 긴 이름의 경우 소스 문자열에 표시되지 않는 더 많은 조합이 있으므로 더 이상 근접 일치로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c5602413593d1c5528e6e57dcbd46503a8f2804" translate="yes" xml:space="preserve">
          <source>Now we have a different problem - the longer name of &amp;ldquo;Helena Bonham Carter&amp;rdquo; doesn&amp;rsquo;t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations which appear in the source string so it is no longer considered a close match.</source>
          <target state="translated">&quot;Helena Bonham Carter&quot;라는 이름이 길수록 길어지지 않습니다. Trigram 검색은 세 글자의 모든 조합을 고려하고 검색 문자열과 소스 문자열에 나타나는 문자 수를 비교합니다. 더 긴 이름의 경우 소스 문자열에 더 많은 조합이 표시되므로 더 이상 근접한 것으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2d795b337a92c0a5e31febc9c4041e82a9227dbc" translate="yes" xml:space="preserve">
          <source>Now we implement the pre-processing and validation. Since we do not have any of our own validation at this point, we delegate to the nested expressions:</source>
          <target state="translated">이제 전처리 및 검증을 구현합니다. 이 시점에서 우리 자신의 유효성 검사가 없으므로 중첩 식에 위임합니다.</target>
        </trans-unit>
        <trans-unit id="c37a1e6f4b5daec07056100cf46833458caf834e" translate="yes" xml:space="preserve">
          <source>Now we need to define a view:</source>
          <target state="translated">이제 뷰를 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="8cfc15775270a0cf7074a75118fb26261619cc6f" translate="yes" xml:space="preserve">
          <source>Now we need to make sure that the test we wrote earlier passes, so we can see whether the code we added is working correctly. Again, navigate to the Django &lt;code&gt;tests/&lt;/code&gt; directory and run:</source>
          <target state="translated">이제 이전에 작성한 테스트가 통과했는지 확인해야 추가 한 코드가 제대로 작동하는지 확인할 수 있습니다. 다시 Django &lt;code&gt;tests/&lt;/code&gt; 디렉토리로 이동하여 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="bcac3a04746aabf930cb5a747d4e5bc7fbac7974" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll define your models &amp;ndash; essentially, your database layout, with additional metadata.</source>
          <target state="translated">이제 추가 메타 데이터를 사용하여 모델 (기본적으로 데이터베이스 레이아웃)을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="fe5908be768f13a2be925c73b002c0119eef5f3a" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll need to handle routing. First we want a router that knows to send queries for the &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;contenttypes&lt;/code&gt; apps to &lt;code&gt;auth_db&lt;/code&gt; (&lt;code&gt;auth&lt;/code&gt; models are linked to &lt;code&gt;ContentType&lt;/code&gt;, so they must be stored in the same database):</source>
          <target state="translated">이제 라우팅을 처리해야합니다. 먼저 &lt;code&gt;auth&lt;/code&gt; 및 &lt;code&gt;contenttypes&lt;/code&gt; 앱에 대한 쿼리 를 &lt;code&gt;auth_db&lt;/code&gt; 로 보내는 라우터 를 원합니다 ( &lt;code&gt;auth&lt;/code&gt; 모델은 &lt;code&gt;ContentType&lt;/code&gt; 에 연결 되므로 동일한 데이터베이스에 저장해야합니다).</target>
        </trans-unit>
        <trans-unit id="d5c11520a098768a6c24489507829a2b07907224" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ve seen how Django&amp;rsquo;s generic class-based views use the provided mixins, let&amp;rsquo;s look at other ways we can combine them. Of course we&amp;rsquo;re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.</source>
          <target state="translated">이제 Django의 일반 클래스 기반 뷰가 제공된 믹스 인을 사용하는 방법을 살펴 보았습니다. 결합 할 수있는 다른 방법을 살펴 보겠습니다. 물론 우리는 여전히 내장 클래스 기반 뷰 또는 다른 일반 클래스 기반 뷰와 결합 할 예정이지만 Django가 제공하는 것보다 해결할 수있는 드문 문제가 있습니다. .</target>
        </trans-unit>
        <trans-unit id="d0d9f0575c1c236d5af487efdbf517700e1f99af" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ve seen how Django&amp;rsquo;s generic class-based views use the provided mixins, let&amp;rsquo;s look at other ways we can combine them. We&amp;rsquo;re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.</source>
          <target state="translated">이제 Django의 제네릭 클래스 기반 뷰가 제공된 믹스 인을 사용하는 방법을 살펴 보았습니다. 조합 할 수있는 다른 방법을 살펴 보겠습니다. 우리는 여전히 그것들을 내장 된 클래스 기반 뷰나 다른 일반적인 클래스 기반 뷰와 결합 할 것이지만, Django가 제공하는 것보다 더 드문 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b516478da3cbf3e609d2d9aa54d602ac37ba736" translate="yes" xml:space="preserve">
          <source>Now you can access the country in a template with &lt;code&gt;{{ form.coordinates.country }}&lt;/code&gt;.</source>
          <target state="translated">이제 &lt;code&gt;{{ form.coordinates.country }}&lt;/code&gt; 로 템플릿에서 국가에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d475869dbc3deb53f1f216a136b9eba20db60766" translate="yes" xml:space="preserve">
          <source>Now you can apply the migrations as usual with the &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">이제 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령 으로 평소와 같이 마이그레이션을 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72ac8fc1339f4d03f079fb6f9c9f0e194b347a82" translate="yes" xml:space="preserve">
          <source>Now you can put those skills to good use by helping to improve Django&amp;rsquo;s codebase.</source>
          <target state="translated">이제 Django의 코드베이스를 개선하여 이러한 기술을 잘 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23f1e33e76b69dcdf87c9a1fb7103093a05beea6" translate="yes" xml:space="preserve">
          <source>Now you can satisfy yourself that this behaves as expected by firing up &lt;code&gt;runserver&lt;/code&gt;, loading the site in your browser, creating &lt;code&gt;Questions&lt;/code&gt; with dates in the past and future, and checking that only those that have been published are listed. You don&amp;rsquo;t want to have to do that &lt;em&gt;every single time you make any change that might affect this&lt;/em&gt; - so let&amp;rsquo;s also create a test, based on our &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; session above.</source>
          <target state="translated">이제 &lt;code&gt;runserver&lt;/code&gt; 를 실행하고 , 브라우저에 사이트를로드하고 , 과거와 미래의 날짜가 포함 된 &lt;code&gt;Questions&lt;/code&gt; 을 작성 하고, 게시 된 날짜 만 나열 되는지 확인 하여 이것이 예상대로 작동 함을 스스로 만족시킬 수 있습니다. &lt;em&gt;영향을 줄 수있는 변경을 할 때마다이&lt;/em&gt; 작업을 수행 할 필요는 없습니다. 따라서 위 의 &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt; 세션을 기반으로 테스트를 작성하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="0dd4f0d714b7b440236676490d5cd5cc97710517" translate="yes" xml:space="preserve">
          <source>Now you can use any of the documented attributes and methods of the &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">이제 &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 클래스 의 문서화 된 속성 및 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ab3a4c732a570e45e72d8279159c31dd602e88c" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ll also need a view corresponding to that &lt;code&gt;/your-name/&lt;/code&gt; URL which will find the appropriate key/value pairs in the request, and then process them.</source>
          <target state="translated">이제 &lt;code&gt;/your-name/&lt;/code&gt; URL에 해당하는보기가 필요합니다.이 URL은 요청에서 적절한 키 / 값 쌍을 찾아서 처리합니다.</target>
        </trans-unit>
        <trans-unit id="773ae0c9b55a06a6212d086ca1c9132147c8e3bc" translate="yes" xml:space="preserve">
          <source>Now your admin site is set up to edit &lt;code&gt;Membership&lt;/code&gt; objects inline from either the &lt;code&gt;Person&lt;/code&gt; or the &lt;code&gt;Group&lt;/code&gt; detail pages.</source>
          <target state="translated">이제 관리 사이트가 &lt;code&gt;Person&lt;/code&gt; 또는 &lt;code&gt;Group&lt;/code&gt; 세부 사항 페이지 에서 인라인 &lt;code&gt;Membership&lt;/code&gt; 오브젝트 를 편집하도록 설정되었습니다 .</target>
        </trans-unit>
        <trans-unit id="1d7161c477ce1fa34e1cd8a8fcedd1a97cd45391" translate="yes" xml:space="preserve">
          <source>Now your tag should begin to look like this:</source>
          <target state="translated">이제 태그가 다음과 같이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="3ca505f89a58836d8d8355a91fcfdcb88a64397d" translate="yes" xml:space="preserve">
          <source>Now&amp;rsquo;s a good time to note: &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; use this server in anything resembling a production environment. It&amp;rsquo;s intended only for use while developing. (We&amp;rsquo;re in the business of making Web frameworks, not Web servers.)</source>
          <target state="translated">이제 주목할만한 시간 입니다. 프로덕션 환경과 유사한 어떤 환경에서도이 서버를 사용 &lt;strong&gt;하지 마십시오&lt;/strong&gt; . 개발 중에 만 사용하도록 고안되었습니다. (우리는 웹 서버가 아닌 웹 프레임 워크를 만드는 사업을하고 있습니다.)</target>
        </trans-unit>
        <trans-unit id="8d15bcc0a82dc2d5aaadb1122619ae9298528376" translate="yes" xml:space="preserve">
          <source>Now&amp;rsquo;s also a good time to note that change lists give you free pagination. The default is to display 100 items per page. &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page&quot;&gt;&lt;code&gt;Change list pagination&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;search boxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;filters&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy&quot;&gt;&lt;code&gt;date-hierarchies&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;column-header-ordering&lt;/code&gt;&lt;/a&gt; all work together like you think they should.</source>
          <target state="translated">또한 변경 목록을 사용하면 페이지 매김을 무료로 수행 할 수 있습니다. 기본값은 페이지 당 100 개의 항목을 표시하는 것입니다. &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page&quot;&gt; &lt;code&gt;Change list pagination&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;search boxes&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;filters&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy&quot;&gt; &lt;code&gt;date-hierarchies&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;column-header-ordering&lt;/code&gt; &lt;/a&gt; 모두 생각대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="99ce113dbab28c6966339979cd1800d1c3a5e9a6" translate="yes" xml:space="preserve">
          <source>Now, all you need to do is create a new function and have &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; use it. &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; expects a callable as its argument which takes two arguments - the first is an &lt;a href=&quot;../ref/applications&quot;&gt;app registry&lt;/a&gt; that has the historical versions of all your models loaded into it to match where in your history the migration sits, and the second is a &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt;, which you can use to manually effect database schema changes (but beware, doing this can confuse the migration autodetector!)</source>
          <target state="translated">이제 필요한 것은 새 함수를 만들고 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; 이&lt;/a&gt; 사용하도록하는 것입니다. &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 은 두 개의 인수를 취하는 인수로 호출 가능을 예상합니다. 첫 번째는 마이그레이션이있는 위치와 일치하도록로드 된 모든 모델의 히스토리 버전 이있는 &lt;a href=&quot;../ref/applications&quot;&gt;앱 레지스트리&lt;/a&gt; 이고, 두 번째는 &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor입니다&lt;/a&gt; . 데이터베이스 스키마 변경 사항을 수동으로 적용하는 데 사용합니다 (그러나이 작업을 수행하면 마이그레이션 자동 검색기를 혼동 할 수 있습니다!)</target>
        </trans-unit>
        <trans-unit id="e26eeede8de5f6aef6477290252659725320f583" translate="yes" xml:space="preserve">
          <source>Now, create a &lt;code&gt;polls/results.html&lt;/code&gt; template:</source>
          <target state="translated">이제 &lt;code&gt;polls/results.html&lt;/code&gt; 템플릿을 만듭니다 :</target>
        </trans-unit>
        <trans-unit id="9b9600adacf65499e24be89755a51a93c7893117" translate="yes" xml:space="preserve">
          <source>Now, create and register the inclusion tag by calling the &lt;code&gt;inclusion_tag()&lt;/code&gt; method on a &lt;code&gt;Library&lt;/code&gt; object. Following our example, if the above template is in a file called &lt;code&gt;results.html&lt;/code&gt; in a directory that&amp;rsquo;s searched by the template loader, we&amp;rsquo;d register the tag like this:</source>
          <target state="translated">이제 &lt;code&gt;Library&lt;/code&gt; 오브젝트 에서 &lt;code&gt;inclusion_tag()&lt;/code&gt; 메소드를 호출하여 포함 태그를 작성하고 등록하십시오 . 위 예제 에서 템플릿 로더가 검색 한 디렉토리에 &lt;code&gt;results.html&lt;/code&gt; 이라는 파일 이 있으면 다음과 같이 태그를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="61df64fac0bdb450dcab9337d6fdd355672882b3" translate="yes" xml:space="preserve">
          <source>Now, define a point of interest &lt;a href=&quot;#id13&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt;:</source>
          <target state="translated">이제 관심 지점을 정의하십시오 &lt;a href=&quot;#id13&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c9f3f21fc4e880937be50b7fcf36ca081326148a" translate="yes" xml:space="preserve">
          <source>Now, go to &lt;code&gt;/polls/1/&lt;/code&gt; in your browser and vote in the question. You should see a results page that gets updated each time you vote. If you submit the form without having chosen a choice, you should see the error message.</source>
          <target state="translated">이제 브라우저에서 &lt;code&gt;/polls/1/&lt;/code&gt; 로 이동 하여 질문에 투표하십시오. 투표 할 때마다 업데이트되는 결과 페이지가 표시되어야합니다. 선택하지 않고 양식을 제출하면 오류 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a1efea4230fe635c172ad6eeb75a83bbd75fc583" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s create a Django view that handles the submitted data and does something with it. Remember, in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;, we created a URLconf for the polls application that includes this line:</source>
          <target state="translated">이제 제출 된 데이터를 처리하고 관련 작업을 수행하는 Django 뷰를 만들어 보겠습니다. 에 기억 &lt;a href=&quot;tutorial03&quot;&gt;튜토리얼 3&lt;/a&gt; , 우리는이 라인을 포함하는 여론 조사 응용 프로그램에 대한 URLconf를 만들었습니다 :</target>
        </trans-unit>
        <trans-unit id="38f59dfc7640b31e36394dc7c9a2f46f24eb17ba" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:</source>
          <target state="translated">이제 대화 형 Python 셸을 살펴보고 Django가 제공하는 무료 API를 사용해 봅시다. Python 셸을 호출하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7cbef95cf75c7a3f4b4837de306a008dbc014431" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s tackle the question detail view &amp;ndash; the page that displays the question text for a given poll. Here&amp;rsquo;s the view:</source>
          <target state="translated">이제 설문에 대한 질문 텍스트를 표시하는 페이지 인 질문 세부 사항보기를 다루겠습니다. 보기는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b460cbb07f78017c0c6f37a652de30bf9aafdb00" translate="yes" xml:space="preserve">
          <source>Now, open a Web browser and go to &amp;ldquo;/admin/&amp;rdquo; on your local domain &amp;ndash; e.g., &lt;a href=&quot;http://127.0.0.1:8000/admin/&quot;&gt;http://127.0.0.1:8000/admin/&lt;/a&gt;. You should see the admin&amp;rsquo;s login screen:</source>
          <target state="translated">이제 웹 브라우저를 열고 로컬 도메인의 &quot;/ admin /&quot;(예 : &lt;a href=&quot;http://127.0.0.1:8000/admin/&quot;&gt;http://127.0.0.1:8000/admin/)으로 이동하십시오&lt;/a&gt; . 관리자의 로그인 화면이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="2b81dff36c6dd0997b6aebdd48e22ac831af4eec" translate="yes" xml:space="preserve">
          <source>Now, open the world borders shapefile using GeoDjango&amp;rsquo;s &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; interface:</source>
          <target state="translated">이제 GeoDjango의 &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt; 인터페이스를 사용하여 월드 경계 모양 파일을 엽니 다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
