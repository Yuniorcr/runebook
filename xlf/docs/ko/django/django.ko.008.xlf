<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="45e66663fc9c49156a42c4c815d1ca9ece7337cd" translate="yes" xml:space="preserve">
          <source>Hour, 24-hour format.</source>
          <target state="translated">24 시간 형식</target>
        </trans-unit>
        <trans-unit id="834defb49795704bb66671584938734ef31149af" translate="yes" xml:space="preserve">
          <source>How Django determines the lookups and transforms which are used</source>
          <target state="translated">Django가 사용되는 조회 및 변환을 결정하는 방법</target>
        </trans-unit>
        <trans-unit id="c430bfd8ea64f441a6249a4392b781c211b8181a" translate="yes" xml:space="preserve">
          <source>How Django discovers language preference</source>
          <target state="translated">Django가 언어 기본 설정을 발견하는 방법</target>
        </trans-unit>
        <trans-unit id="332c02dc1e8a1ada0eb887a1ba1863a66b86b9f3" translate="yes" xml:space="preserve">
          <source>How Django discovers translations</source>
          <target state="translated">장고가 번역을 발견하는 방법</target>
        </trans-unit>
        <trans-unit id="e16df067ba88e72bf0641a55551a8b9e61d360f6" translate="yes" xml:space="preserve">
          <source>How Django knows to UPDATE vs. INSERT</source>
          <target state="translated">장고가 UPDATE와 INSERT를 어떻게 아는가</target>
        </trans-unit>
        <trans-unit id="342461abdfba0eb8d205c5faef1083bcee625984" translate="yes" xml:space="preserve">
          <source>How Django processes a request</source>
          <target state="translated">Django가 요청을 처리하는 방법</target>
        </trans-unit>
        <trans-unit id="a965dc33e4b23fff03edc6677ddd4a5db2a68137" translate="yes" xml:space="preserve">
          <source>How Django stores passwords</source>
          <target state="translated">Django가 비밀번호를 저장하는 방법</target>
        </trans-unit>
        <trans-unit id="84049f5f6d42de61077b821036f8551841f5c062" translate="yes" xml:space="preserve">
          <source>How Django uses the sites framework</source>
          <target state="translated">Django가 사이트 프레임 워크를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="58bcd029adac356fe636f2a688e8a3911920d656" translate="yes" xml:space="preserve">
          <source>How applications are loaded</source>
          <target state="translated">응용 프로그램이로드되는 방법</target>
        </trans-unit>
        <trans-unit id="ba680964ddbb43280ef340243ccbc0d61802f176" translate="yes" xml:space="preserve">
          <source>How are the backward relationships possible?</source>
          <target state="translated">후진 관계는 어떻게 가능합니까?</target>
        </trans-unit>
        <trans-unit id="d26502dd842d87ee4ca401cd3ff22a727c99c3bd" translate="yes" xml:space="preserve">
          <source>How did &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; know which field of &lt;code&gt;Photo&lt;/code&gt; was the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;? By default, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; looks for a either a &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;site&lt;/code&gt; or a &lt;a href=&quot;../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;sites&lt;/code&gt; to filter on. If you use a field named something other than &lt;code&gt;site&lt;/code&gt; or &lt;code&gt;sites&lt;/code&gt; to identify which &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects your object is related to, then you need to explicitly pass the custom field name as a parameter to &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; on your model. The following model, which has a field called &lt;code&gt;publish_on&lt;/code&gt;, demonstrates this:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;Photo&lt;/code&gt; 필드를 어떻게 알았 습니까? 기본적으로 &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;site&lt;/code&gt; 라는 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 또는 필터링 할 &lt;code&gt;sites&lt;/code&gt; 라는 &lt;a href=&quot;../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 를&lt;/a&gt; 찾습니다 . 당신이 아닌 다른 이름의 필드를 사용하는 경우 &lt;code&gt;site&lt;/code&gt; 또는 &lt;code&gt;sites&lt;/code&gt; 를 식별하는 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 개체가 관련이 객체를, 당신은 명시 적으로 매개 변수로 사용자 정의 필드 이름을 통과해야 &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 모델에. &lt;code&gt;publish_on&lt;/code&gt; 이라는 필드가있는 다음 모델 은이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="418b80ab08e7d31c1d6197daae3222c122081927" translate="yes" xml:space="preserve">
          <source>How errors are displayed</source>
          <target state="translated">오류가 표시되는 방법</target>
        </trans-unit>
        <trans-unit id="4484a6c1ccb775145808167aab3a7812e6a5f96b" translate="yes" xml:space="preserve">
          <source>How invalid variables are handled</source>
          <target state="translated">유효하지 않은 변수를 처리하는 방법</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="ee4e87f06982bb7102fed5603132079aa0ee2fde" translate="yes" xml:space="preserve">
          <source>How templates are searched and loaded depends on each engine&amp;rsquo;s backend and configuration.</source>
          <target state="translated">템플릿 검색 및로드 방법은 각 엔진의 백엔드 및 구성에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="e8fc0e3bb00051cc499978898e8d78a09f57c0f8" translate="yes" xml:space="preserve">
          <source>How the documentation is organized</source>
          <target state="translated">문서 구성 방법</target>
        </trans-unit>
        <trans-unit id="2808360f60d17c835d1d64fb4002b0966b4ab333" translate="yes" xml:space="preserve">
          <source>How this is possible</source>
          <target state="translated">이것이 가능한 방법</target>
        </trans-unit>
        <trans-unit id="0618f72382628efcfa82e8777ab385d847babe02" translate="yes" xml:space="preserve">
          <source>How to add, change and delete flatpages</source>
          <target state="translated">플랫 페이지를 추가, 변경 및 삭제하는 방법</target>
        </trans-unit>
        <trans-unit id="26a3d16f713fda9a3eb2c25d96fe6ed5d051ad38" translate="yes" xml:space="preserve">
          <source>How to add, change and delete redirects</source>
          <target state="translated">리디렉션을 추가, 변경 및 삭제하는 방법</target>
        </trans-unit>
        <trans-unit id="b7425528758ba98909653aaf21600d6df07eeb8c" translate="yes" xml:space="preserve">
          <source>How to deploy with ASGI</source>
          <target state="translated">ASGI로 배포하는 방법</target>
        </trans-unit>
        <trans-unit id="105c9c1c914097c69fddc962d12692f35139f7e7" translate="yes" xml:space="preserve">
          <source>How to deploy with WSGI</source>
          <target state="translated">WSGI로 배포하는 방법</target>
        </trans-unit>
        <trans-unit id="1dc657f6557483d50a954592bea11c5f8db24590" translate="yes" xml:space="preserve">
          <source>How to install Django</source>
          <target state="translated">장고 설치 방법</target>
        </trans-unit>
        <trans-unit id="ccdbd153262df55417375bdee52f2912645d9a0e" translate="yes" xml:space="preserve">
          <source>How to install Django on Windows</source>
          <target state="translated">Windows에 Django를 설치하는 방법</target>
        </trans-unit>
        <trans-unit id="4eb1317232cb4cb37edcf659f49ccd3f48d075d1" translate="yes" xml:space="preserve">
          <source>How to log a user in</source>
          <target state="translated">사용자를 로그인하는 방법</target>
        </trans-unit>
        <trans-unit id="8e97372fd46b1a4c793b964fe51a2e05af8b5bfa" translate="yes" xml:space="preserve">
          <source>How to log a user out</source>
          <target state="translated">사용자를 로그 아웃하는 방법</target>
        </trans-unit>
        <trans-unit id="36c0f9a912898ba68eb09309256b126031c47a47" translate="yes" xml:space="preserve">
          <source>How to raise field-specific validation errors if those fields don&amp;rsquo;t appear in a &lt;code&gt;ModelForm&lt;/code&gt;</source>
          <target state="translated">해당 필드가 &lt;code&gt;ModelForm&lt;/code&gt; 에 나타나지 않는 경우 필드 별 유효성 검증 오류를 발생시키는 방법</target>
        </trans-unit>
        <trans-unit id="da4447c72cfc8dee8d3c6513aecab850e658f572" translate="yes" xml:space="preserve">
          <source>How to turn it off</source>
          <target state="translated">끄는 방법</target>
        </trans-unit>
        <trans-unit id="cdb68c618ea1c60ef6ccf6356cdc7abd1131bf29" translate="yes" xml:space="preserve">
          <source>How to use Django with Apache and &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="translated">Django를 Apache 및 &lt;code&gt;mod_wsgi&lt;/code&gt; 와 함께 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="45a42a0292be71eae6fb17276c919e0ef9a60e58" translate="yes" xml:space="preserve">
          <source>How to use Django with Apache and mod_wsgi</source>
          <target state="translated">Django를 Apache 및 mod_wsgi와 함께 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="1c87ea425ad7ce70954526d9a78e6316cc80cb84" translate="yes" xml:space="preserve">
          <source>How to use Django with Daphne</source>
          <target state="translated">다프네와 함께 장고를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="401f4f18ef241d7a8c42c42c8411a233ec281835" translate="yes" xml:space="preserve">
          <source>How to use Django with Gunicorn</source>
          <target state="translated">장고를 Gunicorn과 함께 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="303751e55a377e501b33bdf4fa3b46da0f945c83" translate="yes" xml:space="preserve">
          <source>How to use Django with Hypercorn</source>
          <target state="translated">How to use Django with Hypercorn</target>
        </trans-unit>
        <trans-unit id="9b88c226e2c4beb580e0f1ed219560527cff4f1e" translate="yes" xml:space="preserve">
          <source>How to use Django with Uvicorn</source>
          <target state="translated">Uvicorn과 함께 Django를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="1ccc858c03c14705b686e0bc855cd2943676fefe" translate="yes" xml:space="preserve">
          <source>How to use Django with uWSGI</source>
          <target state="translated">uWSGI와 함께 Django를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="e13e18f3a4a56aeb9973b0c1bdfe43af2d3c3e20" translate="yes" xml:space="preserve">
          <source>How to use it</source>
          <target state="translated">사용 방법</target>
        </trans-unit>
        <trans-unit id="a030b8f9f596ae923525bf1136808679544d64f7" translate="yes" xml:space="preserve">
          <source>How to use sessions</source>
          <target state="translated">세션을 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="38ba2a640e385eee2f46de3c7f8be0042cdb0349" translate="yes" xml:space="preserve">
          <source>How validators are run</source>
          <target state="translated">유효성 검사기 실행 방법</target>
        </trans-unit>
        <trans-unit id="eb3e14332ead8dd346a65a6a6e145c7ed3afb46a" translate="yes" xml:space="preserve">
          <source>How you use this is up to you, but Django uses it in a couple of ways automatically via a couple of conventions.</source>
          <target state="translated">이것을 사용하는 방법은 당신에게 달려 있지만 Django는 몇 가지 규칙을 통해 자동으로 몇 가지 방식으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a7eed64119997a9da981184d1d2f258373c91e6c" translate="yes" xml:space="preserve">
          <source>However there&amp;rsquo;s a slight shortcut for the above by letting the formset itself deal with the management form:</source>
          <target state="translated">그러나 양식 자체가 관리 양식을 처리하게함으로써 위의 내용을 약간 단축 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d0edf5671214ffb733ad2d740f03aefdd689c4e" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;Media&lt;/code&gt; objects have some other interesting properties.</source>
          <target state="translated">그러나 &lt;code&gt;Media&lt;/code&gt; 개체에는 다른 흥미로운 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b75e60d0429c5a33209819138b456eab429c1af" translate="yes" xml:space="preserve">
          <source>However, Django can only upgrade passwords that use algorithms mentioned in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt;, so as you upgrade to new systems you should make sure never to &lt;em&gt;remove&lt;/em&gt; entries from this list. If you do, users using unmentioned algorithms won&amp;rsquo;t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations or bcrypt rounds.</source>
          <target state="translated">그러나 Django는 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; 에&lt;/a&gt; 언급 된 알고리즘을 사용하는 비밀번호 만 업그레이드 할 수 있으므로 새 시스템으로 업그레이드 할 때이 목록에서 항목 을 &lt;em&gt;제거&lt;/em&gt; 하지 않아야 합니다. 그렇게하면 언급되지 않은 알고리즘을 사용하는 사용자는 업그레이드 할 수 없습니다. 해시 된 비밀번호는 PBKDF2 반복 또는 bcrypt 라운드 수를 늘리거나 줄일 때 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="7dae5e00844414b926a308fba7f2ac67ecafebc1" translate="yes" xml:space="preserve">
          <source>However, Django can only upgrade passwords that use algorithms mentioned in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt;, so as you upgrade to new systems you should make sure never to &lt;em&gt;remove&lt;/em&gt; entries from this list. If you do, users using unmentioned algorithms won&amp;rsquo;t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations, bcrypt rounds, or argon2 attributes.</source>
          <target state="translated">However, Django can only upgrade passwords that use algorithms mentioned in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;, so as you upgrade to new systems you should make sure never to &lt;em&gt;remove&lt;/em&gt; entries from this list. If you do, users using unmentioned algorithms won&amp;rsquo;t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations, bcrypt rounds, or argon2 attributes.</target>
        </trans-unit>
        <trans-unit id="fee2b1cd4765dc45441956cd26d5a725bff1a79c" translate="yes" xml:space="preserve">
          <source>However, Django provides ways to write custom &lt;a href=&quot;#file-storage&quot;&gt;file storage systems&lt;/a&gt; that allow you to completely customize where and how Django stores files. The second half of this document describes how these storage systems work.</source>
          <target state="translated">그러나 Django는 Django가 &lt;a href=&quot;#file-storage&quot;&gt;파일을 저장&lt;/a&gt; 하는 위치와 방법을 완전히 사용자 지정할 수있는 사용자 지정 파일 스토리지 시스템 을 작성하는 방법을 제공 합니다. 이 문서의 후반부에서는 이러한 스토리지 시스템의 작동 방식에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8eb7e9563d786a695961474efff12ea48136b44e" translate="yes" xml:space="preserve">
          <source>However, a big part of the time taken to run a Django &lt;code&gt;TestCase&lt;/code&gt; is consumed by the call to &lt;code&gt;flush&lt;/code&gt; that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity &amp;ndash; especially if your tests don&amp;rsquo;t need to test multi-database activity.</source>
          <target state="translated">그러나 Django &lt;code&gt;TestCase&lt;/code&gt; 를 실행하는 데 소요되는 시간 의 대부분은 각 테스트 실행이 시작될 때 데이터베이스를 정리할 수 있도록 &lt;code&gt;flush&lt;/code&gt; 호출에 의해 소비됩니다 . 데이터베이스가 여러 개인 경우 여러 데이터베이스를 플러시해야합니다 (각 데이터베이스마다 하나씩). 특히 테스트에서 다중 데이터베이스 활동을 테스트 할 필요가없는 경우 시간이 많이 걸리는 작업 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e4fa7259e12f87e861c3168d81edd38bb151356" translate="yes" xml:space="preserve">
          <source>However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn&amp;rsquo;t need to do this &amp;ndash; if you&amp;rsquo;re not sure, you probably don&amp;rsquo;t. If you do, please read on:</source>
          <target state="translated">그러나 요구 사항에 따라 다른 알고리즘을 선택하거나 특정 보안 상황에 맞게 사용자 지정 알고리즘을 사용할 수도 있습니다. 다시 말하지만, 대부분의 사용자는이 작업을 수행 할 필요가 없습니다. 확실하지 않은 경우에는 그렇지 않습니다. 그렇다면 다음을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="9fac3d9102b0dac6aef0721b096d54bbdccf3e96" translate="yes" xml:space="preserve">
          <source>However, here it gets slightly complicated. The objects returned by the &lt;code&gt;deserialize&lt;/code&gt; iterator &lt;em&gt;aren&amp;rsquo;t&lt;/em&gt; regular Django objects. Instead, they are special &lt;code&gt;DeserializedObject&lt;/code&gt; instances that wrap a created &amp;ndash; but unsaved &amp;ndash; object and any associated relationship data.</source>
          <target state="translated">그러나 여기에서는 약간 복잡해집니다. &lt;code&gt;deserialize&lt;/code&gt; 반복자 &lt;em&gt;가&lt;/em&gt; 리턴 한 오브젝트는 일반 Django 오브젝트 &lt;em&gt;가 아닙니다&lt;/em&gt; . 대신, 생성되었지만 저장되지 않은 개체와 관련 관계 데이터를 래핑하는 특수 &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="c081ae39f8041417e994469fcd2bf0623ae3ac98" translate="yes" xml:space="preserve">
          <source>However, if &lt;code&gt;p&lt;/code&gt; in the above example was &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;Restaurant&lt;/code&gt; (it had been created directly as a &lt;code&gt;Place&lt;/code&gt; object or was the parent of some other class), referring to &lt;code&gt;p.restaurant&lt;/code&gt; would raise a &lt;code&gt;Restaurant.DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">그러나 위의 예에서 &lt;code&gt;p&lt;/code&gt; 가 &lt;code&gt;Restaurant&lt;/code&gt; 이 &lt;em&gt;아닌&lt;/em&gt; 경우 ( &lt;code&gt;Place&lt;/code&gt; 오브젝트 로 직접 작성 되었거나 다른 클래스의 부모 인 경우) &lt;code&gt;p.restaurant&lt;/code&gt; 를 참조 하면 &lt;code&gt;Restaurant.DoesNotExist&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2344053661dea4c49a4bf5f3fa14735765590c54" translate="yes" xml:space="preserve">
          <source>However, if an element of &lt;code&gt;list_display&lt;/code&gt; represents a certain database field, you can indicate this fact by setting the &lt;code&gt;admin_order_field&lt;/code&gt; attribute of the item.</source>
          <target state="translated">그러나 &lt;code&gt;list_display&lt;/code&gt; 의 요소가 특정 데이터베이스 필드를 나타내는 경우 항목 의 &lt;code&gt;admin_order_field&lt;/code&gt; 속성을 설정하여이 사실을 나타낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="41eb48668d3b5ceb1113bcdd82344815a9a6c016" translate="yes" xml:space="preserve">
          <source>However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system&amp;rsquo;s temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like &lt;code&gt;/tmp/tmpzfp6I6.upload&lt;/code&gt;. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk.</source>
          <target state="translated">그러나 업로드 된 파일이 너무 크면 Django는 업로드 된 파일을 시스템의 임시 디렉토리에 저장된 임시 파일에 기록합니다. 유닉스 계열 플랫폼에서 이것은 장고가 &lt;code&gt;/tmp/tmpzfp6I6.upload&lt;/code&gt; 와 같은 파일을 생성 할 것으로 예상 할 수 있음을 의미합니다 . 업로드가 충분히 크면 Django가 데이터를 디스크에 스트리밍 할 때이 파일의 크기가 커지는 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0fbd7284b4e1524d1854eb5de380f1d3cf243f6" translate="yes" xml:space="preserve">
          <source>However, if the &lt;code&gt;annotate()&lt;/code&gt; clause precedes the &lt;code&gt;values()&lt;/code&gt; clause, the annotations will be generated over the entire query set. In this case, the &lt;code&gt;values()&lt;/code&gt; clause only constrains the fields that are generated on output.</source>
          <target state="translated">그러나 &lt;code&gt;annotate()&lt;/code&gt; 절이 &lt;code&gt;values()&lt;/code&gt; () 절 앞에 오면 주석이 전체 쿼리 세트에 대해 생성됩니다. 이 경우 &lt;code&gt;values()&lt;/code&gt; 절은 출력시 생성되는 필드 만 제한합니다.</target>
        </trans-unit>
        <trans-unit id="6578d295eb15a87e1a1078a730cb3b542371e4d0" translate="yes" xml:space="preserve">
          <source>However, if the entire queryset has already been evaluated, the cache will be checked instead:</source>
          <target state="translated">그러나 전체 쿼리 세트가 이미 평가 된 경우 캐시가 대신 검사됩니다.</target>
        </trans-unit>
        <trans-unit id="fbe9a3149e46d75becca6ac25b6ad60602731de4" translate="yes" xml:space="preserve">
          <source>However, if the feed format is a spin-off of RSS or Atom (i.e. &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;, Apple&amp;rsquo;s &lt;a href=&quot;https://help.apple.com/itc/podcasts_connect/#/itcb54353390&quot;&gt;iTunes podcast format&lt;/a&gt;, etc.), you&amp;rsquo;ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that &lt;code&gt;SyndicationFeed&lt;/code&gt; calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (&lt;code&gt;Atom1Feed&lt;/code&gt; or &lt;code&gt;Rss201rev2Feed&lt;/code&gt;) and extend these callbacks. They are:</source>
          <target state="translated">However, if the feed format is a spin-off of RSS or Atom (i.e. &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;, Apple&amp;rsquo;s &lt;a href=&quot;https://help.apple.com/itc/podcasts_connect/#/itcb54353390&quot;&gt;iTunes podcast format&lt;/a&gt;, etc.), you&amp;rsquo;ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that &lt;code&gt;SyndicationFeed&lt;/code&gt; calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class ( &lt;code&gt;Atom1Feed&lt;/code&gt; or &lt;code&gt;Rss201rev2Feed&lt;/code&gt; ) and extend these callbacks. They are:</target>
        </trans-unit>
        <trans-unit id="42ab22e0bac3843886f0c1daf3e0597991c18711" translate="yes" xml:space="preserve">
          <source>However, if the feed format is a spin-off of RSS or Atom (i.e. &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;, Apple&amp;rsquo;s &lt;a href=&quot;https://www.apple.com/itunes/podcasts/specs.html&quot;&gt;iTunes podcast format&lt;/a&gt;, etc.), you&amp;rsquo;ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that &lt;code&gt;SyndicationFeed&lt;/code&gt; calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (&lt;code&gt;Atom1Feed&lt;/code&gt; or &lt;code&gt;Rss201rev2Feed&lt;/code&gt;) and extend these callbacks. They are:</source>
          <target state="translated">그러나 피드 형식이 RSS 또는 Atom (예 : &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt; , Apple의 &lt;a href=&quot;https://www.apple.com/itunes/podcasts/specs.html&quot;&gt;iTunes podcast 형식&lt;/a&gt; 등) 인 경우 더 나은 선택이 있습니다. 이러한 유형의 피드는 일반적으로 기본 요소에 추가 요소 및 / 또는 속성을 추가 하며 &lt;code&gt;SyndicationFeed&lt;/code&gt; 가 이러한 추가 속성을 얻기 위해 호출하는 메소드 세트가 있습니다 . 따라서 적절한 피드 생성기 클래스 ( &lt;code&gt;Atom1Feed&lt;/code&gt; 또는 &lt;code&gt;Rss201rev2Feed&lt;/code&gt; )를 서브 클래 싱하고 이러한 콜백을 확장 할 수 있습니다. 그들은:</target>
        </trans-unit>
        <trans-unit id="a498b0269f9b28570de87c0de9c651cc95df7a39" translate="yes" xml:space="preserve">
          <source>However, if the primary key of &lt;code&gt;p&lt;/code&gt; is already in use on the &lt;code&gt;second&lt;/code&gt; database, the existing object in the &lt;code&gt;second&lt;/code&gt; database will be overridden when &lt;code&gt;p&lt;/code&gt; is saved.</source>
          <target state="translated">그러나 &lt;code&gt;p&lt;/code&gt; 의 기본 키가 &lt;code&gt;second&lt;/code&gt; 데이터베이스 에서 이미 사용중인 경우 &lt;code&gt;p&lt;/code&gt; 를 저장 하면 &lt;code&gt;second&lt;/code&gt; 데이터베이스 의 기존 객체 가 재정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="0f8b6e26d41ac062816981cbdb05f3e271c08d87" translate="yes" xml:space="preserve">
          <source>However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a &lt;code&gt;get_by_natural_key()&lt;/code&gt; method. In the case of a Person, a good natural key might be the pair of first and last name:</source>
          <target state="translated">그러나 Person에 자연스러운 키 처리를 추가하면 조명기가 훨씬 더 인간적이됩니다. 자연 키 처리를 추가하려면 &lt;code&gt;get_by_natural_key()&lt;/code&gt; 메소드 를 사용하여 기본 Manager for Person을 정의하십시오 . 개인의 경우 좋은 자연 키는 성과 이름의 쌍일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4eb21e18a9f005242b43b8b964308b3ae898644d" translate="yes" xml:space="preserve">
          <source>However, if you have a model that uses &lt;a href=&quot;db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models:</source>
          <target state="translated">그러나 &lt;a href=&quot;db/models#multi-table-inheritance&quot;&gt;다중 테이블 상속&lt;/a&gt; 을 사용하는 모델이있는 경우 모델의 모든 기본 클래스를 직렬화해야합니다. 모델에 로컬로 정의 된 필드 만 직렬화되기 때문입니다. 예를 들어 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="cd236b305b5929c0eefa9d1f880696309cfb3535" translate="yes" xml:space="preserve">
          <source>However, if you put synchronous middleware between an ASGI server and an asynchronous view, it will have to switch into sync mode for the middleware and then back to async mode for the view. Django will also hold the sync thread open for middleware exception propagation. This may not be noticeable at first, but adding this penalty of one thread per request can remove any async performance advantage.</source>
          <target state="translated">However, if you put synchronous middleware between an ASGI server and an asynchronous view, it will have to switch into sync mode for the middleware and then back to async mode for the view. Django will also hold the sync thread open for middleware exception propagation. This may not be noticeable at first, but adding this penalty of one thread per request can remove any async performance advantage.</target>
        </trans-unit>
        <trans-unit id="96cd9777ad909b92b73d8ba9adcf21e6feb2539e" translate="yes" xml:space="preserve">
          <source>However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;django.views.decorators.csrf.csrf_protect()&lt;/code&gt;&lt;/a&gt; decorator first:</source>
          <target state="translated">그러나 개별보기에서 캐시 데코레이터를 사용하는 경우 CSRF 미들웨어는 아직 Vary 헤더 또는 CSRF 쿠키를 설정할 수 없으며 응답은 하나없이 캐시됩니다. 이 경우 CSRF 토큰을 삽입해야하는 모든 뷰에서 &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;django.views.decorators.csrf.csrf_protect()&lt;/code&gt; &lt;/a&gt; 데코레이터를 먼저 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2789f39b8e2c7846604c30d7ad18b293d2ccdb5b" translate="yes" xml:space="preserve">
          <source>However, if you want to use a different widget for a field, you can use the &lt;a href=&quot;fields#django.forms.Field.widget&quot;&gt;&lt;code&gt;widget&lt;/code&gt;&lt;/a&gt; argument on the field definition. For example:</source>
          <target state="translated">그러나 필드에 다른 위젯을 사용하려는 경우 필드 정의 에서 &lt;a href=&quot;fields#django.forms.Field.widget&quot;&gt; &lt;code&gt;widget&lt;/code&gt; &lt;/a&gt; 인수를 사용할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9080c7a129504fb41e106fa867a1842a2d8ca3e7" translate="yes" xml:space="preserve">
          <source>However, if you want to write fully-asynchronous tests for a Django project, you will need to take several things into account.</source>
          <target state="translated">However, if you want to write fully-asynchronous tests for a Django project, you will need to take several things into account.</target>
        </trans-unit>
        <trans-unit id="ca0193672aea0bbf1dc1e95a90a928b931d3a8af" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to &amp;lsquo;fake&amp;rsquo; cross database foreign keys. However, this configuration is not officially supported by Django.</source>
          <target state="translated">그러나 MyISAM 테이블과 함께 SQLite 또는 MySQL을 사용하는 경우 강제적 인 참조 무결성이 없습니다. 결과적으로 데이터베이스 외부 키를 '가짜'수 있습니다. 그러나이 구성은 Django에서 공식적으로 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27aa3c10d7ffcec8e1fa56d52af589198f2988d2" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately.</source>
          <target state="translated">그러나 데코레이터를 사용하는 경우 동일한 기회가 존재하지 않습니다. 데코레이터에 정의 된 모든 동작은 즉시 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="2319f17aafcae6e92434d5e3bae08aafd1a79a99" translate="yes" xml:space="preserve">
          <source>However, it can sometimes be beneficial to allow decorators or middleware to modify a response &lt;em&gt;after&lt;/em&gt; it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context.</source>
          <target state="translated">그러나 뷰에 의해 구성된 &lt;em&gt;후&lt;/em&gt; 데코레이터 또는 미들웨어가 응답을 수정하도록하는 것이 때때로 유리할 수 있습니다. 예를 들어, 사용되는 템플릿을 변경하거나 컨텍스트에 추가 데이터를 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4fe8063e2e1e12bacb424e98275f1830bf5cfe7" translate="yes" xml:space="preserve">
          <source>However, it may not always be appropriate to use localized values &amp;ndash; for example, if you&amp;rsquo;re outputting JavaScript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere.</source>
          <target state="translated">그러나 지역화 된 값을 사용하는 것이 항상 적절하지는 않습니다. 예를 들어 컴퓨터에서 읽을 수 있도록 설계된 JavaScript 또는 XML을 출력하는 경우 항상 지역화되지 않은 값을 원할 것입니다. 모든 곳에서 현지화를 사용하지 않고 선택한 템플릿에서 현지화를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c21caaedc7a94be4767a92a207cc019af5c1e0f" translate="yes" xml:space="preserve">
          <source>However, it will almost always be faster to do this work at lower rather than higher levels. At higher levels the system has to deal with objects through multiple levels of abstraction and layers of machinery.</source>
          <target state="translated">그러나이 작업을 높은 수준보다는 낮은 수준에서 수행하는 것이 거의 항상 더 빠릅니다. 높은 수준에서 시스템은 여러 수준의 추상화와 기계 계층을 통해 객체를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b669d8e47b653ff4d42be16c51c4790d279903e" translate="yes" xml:space="preserve">
          <source>However, pluralization is not this simple in all languages. If the language does not support pluralization, an empty value is provided.</source>
          <target state="translated">그러나 모든 언어에서 복수형이 이처럼 간단한 것은 아닙니다. 언어가 복수형을 지원하지 않으면 빈 값이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9f3bfc1533fbc7360133c35d3f551767f73e5bf9" translate="yes" xml:space="preserve">
          <source>However, running with &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;False&lt;/code&gt; means you&amp;rsquo;ll never see errors generated by your site &amp;ndash; everyone will instead see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to create reports with details about those errors.</source>
          <target state="translated">그러나 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정하여 실행 하면 사이트에서 생성 된 오류가 표시되지 않으며 모든 사람이 공개 오류 페이지를 보게됩니다. 배포 된 사이트에서 발생하는 오류를 추적해야하므로 이러한 오류에 대한 세부 정보가 포함 된 보고서를 작성하도록 Django를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a75d2a7d5098c093e2c9517e3afbe9ca4b271de9" translate="yes" xml:space="preserve">
          <source>However, some databases are more capable than others when it comes to schema migrations; some of the caveats are covered below.</source>
          <target state="translated">그러나 스키마 마이그레이션과 관련하여 일부 데이터베이스는 다른 데이터베이스보다 성능이 뛰어납니다. 주의 사항 중 일부는 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e47de287b75e3011e426c42a0e9ee087f660cd19" translate="yes" xml:space="preserve">
          <source>However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user&amp;rsquo;s password or credit card number. So in addition to filtering out settings that appear to be sensitive as described in the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; documentation, Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;): &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt;&lt;code&gt;sensitive_variables()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt;&lt;code&gt;sensitive_post_parameters()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">그러나 때로는 특정 유형의 정보가 너무 민감하여 예를 들어 사용자의 비밀번호 또는 신용 카드 번호를 추적하기에 적합하지 않을 수 있습니다. 따라서 Django는 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 문서에 설명 된 것처럼 민감한 것처럼 보이는 설정을 필터링하는 것 외에도 프로덕션 환경 (즉, &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 있는 곳)에서 오류 보고서에서 필터링 할 정보를 제어하는 ​​데 도움이되는 함수 데코레이터 세트를 제공합니다. 으로 설정 &lt;code&gt;False&lt;/code&gt; ) : &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt; &lt;code&gt;sensitive_variables()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt; &lt;code&gt;sensitive_post_parameters()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e4b608e0433096c6cd9a3edf695ce8e00e708ffc" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;self.my_view&lt;/code&gt; function registered above suffers from two problems:</source>
          <target state="translated">그러나 위에서 등록한 &lt;code&gt;self.my_view&lt;/code&gt; 함수에는 두 가지 문제점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd1a9bdffd29bc1f50c4d99a898040993ccd7d60" translate="yes" xml:space="preserve">
          <source>However, the indexing and slicing are not performed at the database level. If you have a large number of &lt;code&gt;Person&lt;/code&gt; objects in your database, it is more efficient to limit the query at the SQL level:</source>
          <target state="translated">그러나 인덱싱 및 슬라이싱은 데이터베이스 수준에서 수행되지 않습니다. 데이터베이스에 많은 &lt;code&gt;Person&lt;/code&gt; 오브젝트가있는 경우 SQL 레벨에서 조회를 제한하는 것이 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="e7a99e7174b52626783c113021c1e91d1c0c4176" translate="yes" xml:space="preserve">
          <source>However, the result will be slightly different if you use a &lt;code&gt;values()&lt;/code&gt; clause:</source>
          <target state="translated">그러나 &lt;code&gt;values()&lt;/code&gt; 절 을 사용하면 결과가 약간 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="c00b388280770d80bee839b88012bad935795d5a" translate="yes" xml:space="preserve">
          <source>However, the task of writing tests is a lot more fulfilling than spending hours testing your application manually or trying to identify the cause of a newly-introduced problem.</source>
          <target state="translated">그러나 테스트 작성 작업은 수동으로 응용 프로그램을 테스트하거나 새로 도입 된 문제의 원인을 식별하는 데 시간을 소비하는 것보다 훨씬 더 만족 스럽습니다.</target>
        </trans-unit>
        <trans-unit id="2e4d9a12485243a42b040d170ce31a6c9a19eb8a" translate="yes" xml:space="preserve">
          <source>However, these conversions may fail around DST transitions, which means you aren&amp;rsquo;t getting the full benefits of time zone support yet. Also, you&amp;rsquo;re likely to run into a few problems because it&amp;rsquo;s impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you&amp;rsquo;ll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you&amp;rsquo;ve created in your code.</source>
          <target state="translated">그러나 이러한 변환은 DST 전환으로 인해 실패 할 수 있습니다. 즉, 표준 시간대 지원의 모든 이점을 아직 얻지 못하고 있습니다. 또한 순진한 날짜 시간과 인식되는 날짜 시간을 비교하는 것이 불가능하기 때문에 몇 가지 문제가 발생할 수 있습니다. Django는 이제 날짜 시간을 인식하므로 모델 또는 양식에서 가져온 날짜 시간과 코드에서 생성 한 순진 날짜 시간을 비교할 때마다 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="954cc1f0e6626e70ed6d7f67879580da584dd1bb" translate="yes" xml:space="preserve">
          <source>However, they are not magic solutions to performance problems, and they&amp;rsquo;re unlikely to bring better than marginal gains to sites that don&amp;rsquo;t already do the more basic things the right way.</source>
          <target state="translated">그러나 성능 문제에 대한 마법의 해결책은 아니며 이미 더 기본적인 것을 제대로 수행하지 않는 사이트에 대해서는 한계 이상의 이익을 얻지 못할 것입니다.</target>
        </trans-unit>
        <trans-unit id="d45f028bb66fb35103d15fb2e1d90e37b946acf8" translate="yes" xml:space="preserve">
          <source>However, this has a downside: receiving all datetimes in local time makes datetime arithmetic more tricky &amp;mdash; you must call the &lt;code&gt;normalize()&lt;/code&gt; method provided by pytz after each operation.</source>
          <target state="translated">However, this has a downside: receiving all datetimes in local time makes datetime arithmetic more tricky &amp;mdash; you must call the &lt;code&gt;normalize()&lt;/code&gt; method provided by pytz after each operation.</target>
        </trans-unit>
        <trans-unit id="cd4a35aff4244b3ade1041850c6b940cdf2cb682" translate="yes" xml:space="preserve">
          <source>However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them.</source>
          <target state="translated">그러나 이것이 항상 충분하지는 않습니다. 자연 키가 다른 개체를 참조하는 경우 (자연 키의 일부로 외래 키 또는 다른 개체에 대한 자연 키를 사용하여) 자연 키가 종속 된 개체가 직렬화 된 데이터에서 발생하는지 확인할 수 있어야합니다. 자연적인 열쇠가 그들을 요구하기 전에.</target>
        </trans-unit>
        <trans-unit id="e20cedbaff2d50e62555f245162f273796811893" translate="yes" xml:space="preserve">
          <source>However, unlike &lt;code&gt;F()&lt;/code&gt; objects in filter and exclude clauses, you can&amp;rsquo;t introduce joins when you use &lt;code&gt;F()&lt;/code&gt; objects in an update &amp;ndash; you can only reference fields local to the model being updated. If you attempt to introduce a join with an &lt;code&gt;F()&lt;/code&gt; object, a &lt;code&gt;FieldError&lt;/code&gt; will be raised:</source>
          <target state="translated">그러나 filter 및 exclude 절의 &lt;code&gt;F()&lt;/code&gt; 객체 와 달리 업데이트에서 &lt;code&gt;F()&lt;/code&gt; 객체 를 사용할 때는 조인을 도입 할 수 없습니다 . 업데이트중인 모델의 로컬 필드 만 참조 할 수 있습니다. &lt;code&gt;F()&lt;/code&gt; 객체 와의 조인을 시도 하면 &lt;code&gt;FieldError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="57c558202ab0e7f96381e51def5567b27e8e2ed7" translate="yes" xml:space="preserve">
          <source>However, unlike the behavior when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, this will not limit blogs based on entries that satisfy both conditions. In order to do that, i.e. to select all blogs that do not contain entries published with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; that were published in 2008, you need to make two queries:</source>
          <target state="translated">그러나 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용할 때의 동작과 달리 두 조건을 모두 만족하는 항목을 기반으로 블로그를 제한하지는 않습니다. 이를 위해, 즉 2008 년에 &lt;em&gt;&quot;Lennon&quot;으로&lt;/em&gt; 게시 된 항목이 포함되지 않은 모든 블로그를 선택하려면 두 가지 쿼리를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="cffd2486ef5b313d7c0ee7a40894b44641c0e923" translate="yes" xml:space="preserve">
          <source>However, we still want to be able to edit that information inline. Fortunately, we can do this with inline admin models. Suppose we have the following models:</source>
          <target state="translated">그러나 여전히 해당 정보를 인라인으로 편집 할 수 있기를 원합니다. 다행히도 인라인 관리자 모델로이 작업을 수행 할 수 있습니다. 다음 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="4d2345457eacc290db828ae02019e1d391f9b0f2" translate="yes" xml:space="preserve">
          <source>However, when &lt;code&gt;response.content&lt;/code&gt; is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually:</source>
          <target state="translated">그러나 &lt;code&gt;response.content&lt;/code&gt; 가 명시 적으로 지정되면 변경 사항이 항상 적용됩니다. 컨텐츠를 다시 렌더링하려면 렌더링 된 컨텐츠를 다시 평가하고 응답 컨텐츠를 수동으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="563ee1f5cb30a896660eb595ed931c48292c849a" translate="yes" xml:space="preserve">
          <source>However, you are free to add formatting as desired.</source>
          <target state="translated">그러나 원하는대로 서식을 자유롭게 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb1050a497060724f2e4bb1267868c2c5ca9662d" translate="yes" xml:space="preserve">
          <source>However: most performance problems in well-written Django sites aren&amp;rsquo;t at the Python execution level, but rather in inefficient database querying, caching, and templates. If you&amp;rsquo;re relying on poorly-written Python code, your performance problems are unlikely to be solved by having it execute faster.</source>
          <target state="translated">그러나 잘 작성된 Django 사이트에서 대부분의 성능 문제는 Python 실행 수준이 아니라 비효율적 인 데이터베이스 쿼리, 캐싱 및 템플릿에서 발생합니다. 잘못 작성된 Python 코드에 의존하는 경우 성능 문제를 더 빨리 실행하여 성능 문제를 해결할 가능성은 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="fbe171dafe9c16da54051f873de0dd176076dec0" translate="yes" xml:space="preserve">
          <source>Http Exceptions</source>
          <target state="translated">HTTP 예외</target>
        </trans-unit>
        <trans-unit id="bfae5a87387f6ccc29bb86e5cf99488568c3f161" translate="yes" xml:space="preserve">
          <source>Http exceptions may be imported from &lt;code&gt;django.http&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;django.http&lt;/code&gt; 에서 HTTP 예외를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba3f61701a1352c8a25e806229e289b816663a55" translate="yes" xml:space="preserve">
          <source>Human-readable name for the application, e.g. &amp;ldquo;Administration&amp;rdquo;.</source>
          <target state="translated">응용 프로그램의 사람이 읽을 수있는 이름 (예 : &quot;관리&quot;)</target>
        </trans-unit>
        <trans-unit id="1670a10ac92535b3c3aa89fbe1fbd927e9f3218c" translate="yes" xml:space="preserve">
          <source>I/O Objects</source>
          <target state="translated">I / O 객체</target>
        </trans-unit>
        <trans-unit id="03f41aebc1232a365cd0a70260db5df54cdcea1b" translate="yes" xml:space="preserve">
          <source>IBM DB2</source>
          <target state="translated">IBM DB2</target>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="e0909302700b3b64d7f8176c0468bec2141f5da0" translate="yes" xml:space="preserve">
          <source>INSERT &amp;hellip; RETURNING INTO</source>
          <target state="translated">INSERT&amp;hellip; (으)로 돌아 가기</target>
        </trans-unit>
        <trans-unit id="8e0e55878c270900ad89521f5554b562f91414b5" translate="yes" xml:space="preserve">
          <source>IP-based geolocation library</source>
          <target state="translated">IP 기반 지리적 위치 라이브러리</target>
        </trans-unit>
        <trans-unit id="c9d47b90bea2a79c48f8bc0c4b05f5ee7f8119e8" translate="yes" xml:space="preserve">
          <source>IPython:</source>
          <target state="translated">IPython:</target>
        </trans-unit>
        <trans-unit id="ff8948a3034b01513c9fad7bf57cab26fc2d374d" translate="yes" xml:space="preserve">
          <source>ISO 8601 format. (Note: unlike others formatters, such as &amp;ldquo;Z&amp;rdquo;, &amp;ldquo;O&amp;rdquo; or &amp;ldquo;r&amp;rdquo;, the &amp;ldquo;c&amp;rdquo; formatter will not add timezone offset if value is a naive datetime (see &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;datetime.tzinfo&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ISO 8601 형식. 참고 : &quot;Z&quot;, &quot;O&quot;또는 &quot;r&quot;과 같은 다른 포맷터와 달리 값이 순진한 날짜 시간 인 경우 &quot;c&quot;포맷터는 시간대 오프셋을 추가하지 않습니다 ( &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;datetime.tzinfo&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="ab28365811365736a9b9bbd91ab0f2453872ba5a" translate="yes" xml:space="preserve">
          <source>ISO-8601 week number of year, with weeks starting on Monday.</source>
          <target state="translated">월요일부터 시작되는 주별 ISO-8601 주 수입니다.</target>
        </trans-unit>
        <trans-unit id="046d47251e666624c71c74ab2e6343cf76c6ffbf" translate="yes" xml:space="preserve">
          <source>ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) which uses leap weeks. See Y for the more common year format.</source>
          <target state="translated">윤초를 사용하는 ISO-8601 주 번호 (W)에 해당하는 ISO-8601 주 번호 연도. 보다 일반적인 연도 형식은 Y를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ad3e1f0404afde783b8e43b5e5054c4f169eed2b" translate="yes" xml:space="preserve">
          <source>Ideas for more tests</source>
          <target state="translated">더 많은 테스트를위한 아이디어</target>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes" xml:space="preserve">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="843c1f75bd65a80cb5c2fdec7a4a54902f306b86" translate="yes" xml:space="preserve">
          <source>Identifies the configuration as being in &amp;lsquo;dictConfig version 1&amp;rsquo; format. At present, this is the only dictConfig format version.</source>
          <target state="translated">구성이 'dictConfig 버전 1'형식임을 식별합니다. 현재 이것은 유일한 dictConfig 형식 버전입니다.</target>
        </trans-unit>
        <trans-unit id="576390ace0227af3d18d31582357c5b35faa2fd7" translate="yes" xml:space="preserve">
          <source>If (and only if) value is &lt;code&gt;None&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">value가 &lt;code&gt;None&lt;/code&gt; 인 경우 지정된 기본값을 사용합니다. 그렇지 않으면 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bf8ac1c479377e8adc8f407b952b011265a5a70a" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t provided, the framework will call the &lt;code&gt;get_absolute_url()&lt;/code&gt; method on each object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt; 제공되지 않고, 프레임 워크는 호출 &lt;code&gt;get_absolute_url()&lt;/code&gt; 에 의해 리턴 된 각 개체에 대한 방법을 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4b556c7fec42ccdcf771962a8bd01295c1377c73" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; plays a key role in your application, consider using the helpful &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; in your model(s). It&amp;rsquo;s a model &lt;a href=&quot;../../topics/db/managers&quot;&gt;manager&lt;/a&gt; that automatically filters its queries to include only objects associated with the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램에서 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 가 중요한 역할을하는 경우 모델에서 유용한 &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다 . 현재 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 와 연결된 객체 만 포함하도록 쿼리를 자동으로 필터링 하는 모델 &lt;a href=&quot;../../topics/db/managers&quot;&gt;관리자&lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="b04805301e02d6cc5edc0bd4cec0b660c5b5b1f8" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; is not set, &lt;code&gt;get_redirect_url()&lt;/code&gt; tries to reverse the &lt;a href=&quot;#django.views.generic.base.RedirectView.pattern_name&quot;&gt;&lt;code&gt;pattern_name&lt;/code&gt;&lt;/a&gt; using what was captured in the URL (both named and unnamed groups are used).</source>
          <target state="translated">경우 &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 설정되어 있지 않은, &lt;code&gt;get_redirect_url()&lt;/code&gt; 역방향하려고 &lt;a href=&quot;#django.views.generic.base.RedirectView.pattern_name&quot;&gt; &lt;code&gt;pattern_name&lt;/code&gt; 를&lt;/a&gt; 하는 URL (모두의 이름과 이름이 그룹이 사용된다)에 캡처 된 것을 사용.</target>
        </trans-unit>
        <trans-unit id="a441ed946a92b14760f245476b5f2337f5733bf1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; is specified, the default implementation will return a list containing &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; (if it is specified).</source>
          <target state="translated">경우 &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 지정, 기본 구현은 목록이 포함 된 반환합니다 &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; (가 지정된 경우).</target>
        </trans-unit>
        <trans-unit id="0dab78e3424972f994b4a41eeedb0e58507bc1ec" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can optionally specify the path to a PEM-formatted certificate chain file to use for the SSL connection.</source>
          <target state="translated">경우 &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 당신은 선택적으로 SSL 연결에 사용할 PEM 형식의 인증서 체인 파일의 경로를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e41632ac93e09334dacaf028209efd8f874dffad" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can optionally specify the path to a PEM-formatted private key file to use for the SSL connection.</source>
          <target state="translated">경우 &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 당신은 선택적으로 SSL 연결에 사용할 PEM 형식의 개인 키 파일의 경로를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c5d39002274831c8031219e7011bd4dfb4b8787" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is a relative path, then it will be prefixed by the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt; (or &lt;code&gt;/&lt;/code&gt; if not set). This makes it easier to serve a Django application in a subpath without adding an extra configuration to the settings.</source>
          <target state="translated">If &lt;a href=&quot;#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; is a relative path, then it will be prefixed by the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt; (or &lt;code&gt;/&lt;/code&gt; if not set). This makes it easier to serve a Django application in a subpath without adding an extra configuration to the settings.</target>
        </trans-unit>
        <trans-unit id="c76407c010fc18e5e064ae0cd1ef3a947244b3e5" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is a relative path, then it will be prefixed by the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt; (or &lt;code&gt;/&lt;/code&gt; if not set). This makes it easier to serve a Django application in a subpath without adding an extra configuration to the settings.</source>
          <target state="translated">If &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; is a relative path, then it will be prefixed by the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt; (or &lt;code&gt;/&lt;/code&gt; if not set). This makes it easier to serve a Django application in a subpath without adding an extra configuration to the settings.</target>
        </trans-unit>
        <trans-unit id="fca761e106de55e55d1a4f9984fbd1d1dedb5812" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; returns an object, the class of that object will be used.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 객체를 반환, 그 객체의 클래스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2bcc933a78db34c13e04edfc78d73b3aa0cfda0d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified and you didn&amp;rsquo;t set &lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt;&lt;/a&gt;, the index is created in the same tablespace as the tables.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; 가&lt;/a&gt; 지정되지 않고 사용자가 설정하지 않은 &lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt; 를&lt;/a&gt; , 인덱스는 테이블과 동일한 테이블 스페이스에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b734be08a43e058aa1a95c259b8e56f1c154ceee" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt;&lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django will use browser-length cookies &amp;ndash; cookies that expire as soon as the user closes their browser. Use this if you want people to have to log in every time they open a browser.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt; &lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; 사용자가 브라우저를 닫 자마자 만료 쿠키 -, 장고 브라우저 길이 쿠키를 사용합니다. 사람들이 브라우저를 열 때마다 로그인해야하는 경우이 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="302e4e8af81e0f64710dc3d22131d1a4420080dd" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; returns a string that is not known to Django for the database backend you are using &amp;ndash; that is, it doesn&amp;rsquo;t appear in &lt;code&gt;django.db.backends.&amp;lt;db_name&amp;gt;.base.DatabaseWrapper.data_types&lt;/code&gt; &amp;ndash; the string will still be used by the serializer, but the default &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method will return &lt;code&gt;None&lt;/code&gt;. See the documentation of &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you&amp;rsquo;re ever going to be using the serializer output in some other place, outside of Django.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt; 이 사용중인 데이터베이스 백엔드에 대해 Django에 알려지지 않은 문자열을 리턴하는 경우 , 즉 &lt;code&gt;django.db.backends.&amp;lt;db_name&amp;gt;.base.DatabaseWrapper.data_types&lt;/code&gt; 에 나타나지 않습니다 &amp;ndash; 문자열은 계속 시리얼 라이저가 사용하지만 기본 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 메소드는 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다. 이것이 유용한 이유 는 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 문서를 참조하십시오 . 직렬화 기의 필드 유형으로 설명 문자열을 입력하면 Django 외부의 다른 위치에서 직렬화 기 출력을 사용하려는 경우 유용한 아이디어입니다.</target>
        </trans-unit>
        <trans-unit id="9e0fc6708169160a661ce0c5e2e5e51df935ab4d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; the per-site middleware cache will &lt;a href=&quot;#i18n-cache-key&quot;&gt;respect the active language&lt;/a&gt;. For the &lt;code&gt;cache&lt;/code&gt; template tag you could use one of the &lt;a href=&quot;i18n/translation#template-translation-vars&quot;&gt;translation-specific variables&lt;/a&gt; available in templates to achieve the same result:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 사이트 별 미들웨어 캐시가 &lt;a href=&quot;#i18n-cache-key&quot;&gt;활성 언어를 존중합니다&lt;/a&gt; . 를 들어 &lt;code&gt;cache&lt;/code&gt; 템플릿 태그 당신이 중 하나를 사용할 수 있습니다 &lt;a href=&quot;i18n/translation#template-translation-vars&quot;&gt;번역 특정 변수&lt;/a&gt; 같은 결과를 달성하기 위해 템플릿을 사용할 수를 :</target>
        </trans-unit>
        <trans-unit id="1dec9c1c2d78ca0739125f223e56a616974c3604" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; then the generated cache key will include the name of the active &lt;a href=&quot;i18n/index#term-language-code&quot;&gt;language&lt;/a&gt; &amp;ndash; see also &lt;a href=&quot;i18n/translation#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;). This allows you to easily cache multilingual sites without having to create the cache key yourself.</source>
          <target state="translated">경우 &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; 후 생성 된 캐시 키가 활성의 이름이 포함됩니다 &lt;a href=&quot;i18n/index#term-language-code&quot;&gt;언어&lt;/a&gt; - 또한 참조 &lt;a href=&quot;i18n/translation#how-django-discovers-language-preference&quot;&gt;어떻게 장고 발견하여 언어 환경 설정&lt;/a&gt; ). 따라서 캐시 키를 직접 만들지 않고도 다국어 사이트를 쉽게 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba088c9c367fa9bed0d2638a14b58c651b3e8138" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, returns an aware &lt;code&gt;datetime&lt;/code&gt;, otherwise returns a naive &lt;code&gt;datetime&lt;/code&gt; in the local timezone.</source>
          <target state="translated">경우 &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; 가&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 의식적 반환 &lt;code&gt;datetime&lt;/code&gt; 달리 순진 반환, &lt;code&gt;datetime&lt;/code&gt; 로컬 시간대에 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5717ee542a44db43b337277360e76d5d90d2062" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;fields#django.db.models.Field.db_tablespace&quot;&gt;&lt;code&gt;Field.db_tablespace&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified (or if the index uses multiple fields), the index is created in tablespace specified in the &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; option inside the model&amp;rsquo;s &lt;code&gt;class Meta&lt;/code&gt;. If neither of those tablespaces are set, the index is created in the same tablespace as the table.</source>
          <target state="translated">경우 &lt;a href=&quot;fields#django.db.models.Field.db_tablespace&quot;&gt; &lt;code&gt;Field.db_tablespace&lt;/code&gt; 이&lt;/a&gt; 지정되지 않은 (인덱스가 여러 필드를 사용하는 경우 나), 인덱스가에 지정된 테이블 스페이스에 생성 &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; 의&lt;/a&gt; 모델의 내부 옵션 &lt;code&gt;class Meta&lt;/code&gt; . 해당 테이블 스페이스 중 어느 것도 설정되지 않은 경우 인덱스는 테이블과 동일한 테이블 스페이스에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="bbd815722eda15f33dbfb7a5326a66902a84cfa1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and the initial URL doesn&amp;rsquo;t end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual.</source>
          <target state="translated">경우 &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; 가&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; 초기 URL이 슬래시로 끝나지 않고, 그것이 URLconf에서 발견되지 않는, 새로운 URL은 끝에 슬래시를 추가하여 형성된다. URLconf에이 새 URL이 있으면 Django는 요청을이 새 URL로 리디렉션합니다. 그렇지 않으면 초기 URL이 평소와 같이 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="703b7a5f7e217bd910de90ae15cc8cecb3bfbb50" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정되어 있으면 (설정 모듈에서) 404보기가 사용되지 않으며 대신 URL 정보가 일부 디버그 정보와 함께 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="5eedf5297f17474dc2270509f5e5de780a61e4f2" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 (설정 모듈에서) 500보기가 사용되지 않고 대신 디버그 정보와 함께 트레이스 백이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="28f55ac704b0b514f68d7f33bfed23d6d400294d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, URLs that lack a leading &amp;ldquo;www.&amp;rdquo; will be redirected to the same URL with a leading &amp;ldquo;www.&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt; &lt;code&gt;PREPEND_WWW&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 선행 'www'가없는 URL 'www'가있는 동일한 URL로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="9268883f3a170c41786d2f41528ad09a08f1df14" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this will be a &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;naive&lt;/a&gt; datetime (i.e. a datetime without an associated timezone) that represents the current time in the system&amp;rsquo;s local timezone.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 이는 시스템의 현지 시간대에서 현재 시간을 나타내는 &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;순진한&lt;/a&gt; 날짜 시간 (예 : 연관된 시간대가없는 날짜 시간)입니다.</target>
        </trans-unit>
        <trans-unit id="c2de81b367dd71f5c015e5f41f8afee04e06b3cf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, this will be an &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;aware&lt;/a&gt; datetime representing the current time in UTC. Note that &lt;a href=&quot;#django.utils.timezone.now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; will always return times in UTC regardless of the value of &lt;a href=&quot;settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt;; you can use &lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to get the time in the current time zone.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 UTC로 현재 시간을 나타내는 &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;인식 된&lt;/a&gt; 날짜 시간입니다. 참고 &lt;a href=&quot;#django.utils.timezone.now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 항상의 값에 관계없이 UTC에서 시간을 반환합니다 &lt;a href=&quot;settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; ; &lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt; 을 사용 하여 현재 시간대의 시간을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d132c69aa17f397b9e7aeef1bf23acca8692c78b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; is empty and &lt;code&gt;DEBUG=True&lt;/code&gt;, subdomains of localhost were allowed.</source>
          <target state="translated">If &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; is empty and &lt;code&gt;DEBUG=True&lt;/code&gt; , subdomains of localhost were allowed.</target>
        </trans-unit>
        <trans-unit id="57215ad4aec3fe8e542fb77429da4ec0f6b316a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Blog&lt;/code&gt; had &lt;code&gt;ordering = ['name']&lt;/code&gt;, then the first queryset would be identical to:</source>
          <target state="translated">경우 &lt;code&gt;Blog&lt;/code&gt; 있었다 &lt;code&gt;ordering = ['name']&lt;/code&gt; , 다음 첫 번째의 검색어는 동일 할 것이다 :</target>
        </trans-unit>
        <trans-unit id="915ff9d1a4c7c8ff8163f55e3d64c8bec0860f25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the test client will return a 500 response as would be returned to a browser. The response has the attribute &lt;a href=&quot;#django.test.Response.exc_info&quot;&gt;&lt;code&gt;exc_info&lt;/code&gt;&lt;/a&gt; to provide information about the unhandled exception.</source>
          <target state="translated">경우 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; , 테스트 클라이언트는 브라우저에 반환하는 것과 같이 500 응답을 반환합니다. 응답에는 처리되지 않은 예외에 대한 정보를 제공 하는 속성 &lt;a href=&quot;#django.test.Response.exc_info&quot;&gt; &lt;code&gt;exc_info&lt;/code&gt; &lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="abf361655e63d0be9b5f070d1dac967ddae52b37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EntryManager&lt;/code&gt; performed default filtering in its &lt;code&gt;get_queryset()&lt;/code&gt; method, that filtering would apply to the &lt;code&gt;all()&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;EntryManager&lt;/code&gt; 가 &lt;code&gt;get_queryset()&lt;/code&gt; 메소드 에서 기본 필터링을 수행 한 경우 해당 필터링은 &lt;code&gt;all()&lt;/code&gt; 호출에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="93630d6eedd2025ff2ec8981f5e933b31e83e1d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; (default), the upper bound is exclusive &lt;code&gt;')'&lt;/code&gt;, otherwise it&amp;rsquo;s inclusive &lt;code&gt;']'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; (기본), 상위 바운드는 독점 &lt;code&gt;')'&lt;/code&gt; , 그렇지 않으면 포함입니다, &lt;code&gt;']'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18778cefe298f546baad10095627a522a85d4d98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; (the default) only the direct contents of &lt;code&gt;path&lt;/code&gt; will be offered as choices. If &lt;code&gt;True&lt;/code&gt;, the directory will be descended into recursively and all descendants will be listed as choices.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; (기본값) 단지의 직접적인 내용 &lt;code&gt;path&lt;/code&gt; 선택 사항으로 제공됩니다. 경우 &lt;code&gt;True&lt;/code&gt; ,이 디렉토리는 재귀 적으로 내려되고 모든 자손의 선택으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8580bd511e1e56fc6a57ce10bc1a3957d3e92eef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the &lt;em&gt;only&lt;/em&gt; difference when &lt;code&gt;managed=False&lt;/code&gt;. All other aspects of model handling are exactly the same as normal. This includes</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; , 어떤 데이터베이스 테이블 작성 또는 삭제 작업이 모델에 대해 수행되지 않습니다. 이는 모델이 다른 방법으로 작성된 기존 테이블 또는 데이터베이스 뷰를 나타내는 경우에 유용합니다. &lt;code&gt;managed=False&lt;/code&gt; 의 &lt;em&gt;유일한&lt;/em&gt; 차이점 입니다. 모델 처리의 다른 모든 측면은 정상과 동일합니다. 여기에는</target>
        </trans-unit>
        <trans-unit id="1196f2e1c99c84b45ad9ac3e676f34a8c3e7b1e3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, no database table creation, modification, or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the &lt;em&gt;only&lt;/em&gt; difference when &lt;code&gt;managed=False&lt;/code&gt;. All other aspects of model handling are exactly the same as normal. This includes</source>
          <target state="translated">If &lt;code&gt;False&lt;/code&gt; , no database table creation, modification, or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the &lt;em&gt;only&lt;/em&gt; difference when &lt;code&gt;managed=False&lt;/code&gt; . All other aspects of model handling are exactly the same as normal. This includes</target>
        </trans-unit>
        <trans-unit id="b5afc96ec010c7587fe847918d3f0b1cbd618c34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, the field will be able to reference proxy models. Default is &lt;code&gt;True&lt;/code&gt;. This mirrors the &lt;code&gt;for_concrete_model&lt;/code&gt; argument to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; , 필드는 프록시 모델을 참조 할 수 있습니다. 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다. 이것은 &lt;code&gt;for_concrete_model&lt;/code&gt; 인수를 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;get_for_model()&lt;/code&gt; &lt;/a&gt; 반영합니다 .</target>
        </trans-unit>
        <trans-unit id="8ecc7857237fad6548c3573566a3dff629cc4ca4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, the field will not be displayed in the admin or any other &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;. They are also skipped during &lt;a href=&quot;instances#validating-objects&quot;&gt;model validation&lt;/a&gt;. Default is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; 필드는 관리자 또는 기타에 표시되지 않습니다 &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; . 또한 &lt;a href=&quot;instances#validating-objects&quot;&gt;모델 유효성 검사&lt;/a&gt; 중에는 건너 뜁니다 . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9a394bcde334572fe03593b3cb90dfa9215df0e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt;, no redirect will be performed and the logout view will be rendered.</source>
          <target state="translated">경우 &lt;code&gt;None&lt;/code&gt; , 더 리디렉션이 수행되지 않으며 로그 아웃 뷰가 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="967733181a22434f2b539a31845b38708e94e3fa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt;, you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt;, and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</source>
          <target state="translated">If &lt;code&gt;None&lt;/code&gt; , you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt; , and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</target>
        </trans-unit>
        <trans-unit id="1ea11f1dd3469689c6da4beae549200413dad0f6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TestMixin1&lt;/code&gt; would call &lt;code&gt;super()&lt;/code&gt; and take that result into account, &lt;code&gt;TestMixin1&lt;/code&gt; wouldn&amp;rsquo;t work standalone anymore.</source>
          <target state="translated">경우 &lt;code&gt;TestMixin1&lt;/code&gt; 가 부를 것이다 &lt;code&gt;super()&lt;/code&gt; 및 계정에 그 결과를 가지고, &lt;code&gt;TestMixin1&lt;/code&gt; 는 일 독립을 더 이상하지 않을 것이다.</target>
        </trans-unit>
        <trans-unit id="6769b5f470623bf5a1a01f00daddb8704bd14842" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; (default), the lower bound is inclusive &lt;code&gt;'['&lt;/code&gt;, otherwise it&amp;rsquo;s exclusive &lt;code&gt;'('&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; (기본값), 하한은 포함입니다 &lt;code&gt;'['&lt;/code&gt; , 그렇지 않으면 배타적이다 &lt;code&gt;'('&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ac0108b91dd39d35eec7c74542b910976de59f38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; (default), the value will be stripped of leading and trailing whitespace.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; (기본) 값은 선행 및 후행 공백을 박탈됩니다.</target>
        </trans-unit>
        <trans-unit id="0889dcaa5531b627194e2e75f61b16d17c01c4c1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, Django will store empty values as &lt;code&gt;NULL&lt;/code&gt; in the database. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 장고으로 빈 값을 저장할 &lt;code&gt;NULL&lt;/code&gt; 데이터베이스입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b5ac068b66f4ddfe5eb27d866c030ede7da7d0d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, a database index will be created for this field.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 데이터베이스 인덱스는이 필드에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f9534fba934e74f7ef1a7dd6e9bc77488b38aafe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, causes &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; to perform its lookup using both the primary key and the slug. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 원인은 &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 기본 키와 슬러그 모두를 사용하여 검색을 수행. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="758c3834bb8ce6505681916f3fb282790c5a617b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; adds the &lt;code&gt;includeSubDomains&lt;/code&gt; directive to the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header. It has no effect unless &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt; is set to a non-zero value.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 추가 &lt;code&gt;includeSubDomains&lt;/code&gt; 을 받는 지시어 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP 엄격한 전송 보안&lt;/a&gt; 헤더를. &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; 가 0이 아닌 값으로 설정 되지 않으면 효과가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="bf5376ee839b91d8f49b195845182cc96ba96ad8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; adds the &lt;code&gt;preload&lt;/code&gt; directive to the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header. It has no effect unless &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt; is set to a non-zero value.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 추가 &lt;code&gt;preload&lt;/code&gt; 받는 지시어 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP 엄격한 전송 보안&lt;/a&gt; 헤더를. &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; 가 0이 아닌 값으로 설정 되지 않으면 효과가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7269473ae0ab0fa0cde96c635f4c57333c8000c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#x-content-type-options&quot;&gt;X-Content-Type-Options: nosniff&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 세트 &lt;a href=&quot;middleware#x-content-type-options&quot;&gt;NOSNIFF : X-Content-Type을-옵션&lt;/a&gt; 이미이없는 모든 응답에 헤더를.</target>
        </trans-unit>
        <trans-unit id="06532e19f603440c20d409e3e0783241dddf0594" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#x-xss-protection&quot;&gt;X-XSS-Protection: 1; mode=block&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 세트 &lt;a href=&quot;middleware#x-xss-protection&quot;&gt;X-XSS-보호 : 1; mode =&lt;/a&gt; 아직없는 모든 응답에서 헤더를 차단 합니다.</target>
        </trans-unit>
        <trans-unit id="3aa67e9c195274834b1514184f81665a3681157f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;middleware#ssl-redirect&quot;&gt;redirects&lt;/a&gt; all non-HTTPS requests to HTTPS (except for those URLs matching a regular expression listed in &lt;a href=&quot;#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt;&lt;a href=&quot;middleware#ssl-redirect&quot;&gt; 리디렉션&lt;/a&gt; (에 나와있는 정규 표현식 일치하는 해당 URL을 제외하고 HTTPS에 대한 모든 비 HTTPS 요청 &lt;a href=&quot;#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; 을&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1fe34d7fa424adbe99975f44452f0cb8c9b26460" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the field accepts Unicode letters in addition to ASCII letters. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 필드는 ASCII 문자뿐만 아니라 유니 코드 문자를 사용할 수 있습니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="94ca19b3ecb3f8bbe3f1a9bff2249de7c42b4ee0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the field is allowed to be blank. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 필드가 비어있을 수 있습니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9e99788f392fe32220f3399732e6992bdae5fd30" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this field is the primary key for the model.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; ,이 필드는 모델의 기본 키입니다.</target>
        </trans-unit>
        <trans-unit id="b0a8661c8043a78d79876d7e0eed097ed9a770fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this field must be unique throughout the table.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; ,이 필드는 테이블의 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="a121385ed8cbdd359e3d02312aea0ad306878456" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;abstract = True&lt;/code&gt;, this model will be an &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;abstract = True&lt;/code&gt; ,이 모델은 될 것입니다 &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;추상 기본 클래스&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0bcccb8df0544ee276445e6621dc3c3b97509cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;allowed_permissions&lt;/code&gt; has more than one permission, the action will be available as long as the user passes at least one of the checks.</source>
          <target state="translated">경우 &lt;code&gt;allowed_permissions&lt;/code&gt; 이 하나 이상의 권한을 가진 사용자가 검사 중 적어도 하나를 통과 할 때, 작업이 오래로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac69109cdc61dd101b981bea9a5dba1484d0b872" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;app_configs&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; are both &lt;code&gt;None&lt;/code&gt;, all system checks are performed. &lt;code&gt;tags&lt;/code&gt; can be a list of check tags, like &lt;code&gt;compatibility&lt;/code&gt; or &lt;code&gt;models&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;app_configs&lt;/code&gt; 및 &lt;code&gt;tags&lt;/code&gt; 모두없는 &lt;code&gt;None&lt;/code&gt; , 모든 시스템 검사가 수행된다. &lt;code&gt;tags&lt;/code&gt; 는 &lt;code&gt;compatibility&lt;/code&gt; 또는 &lt;code&gt;models&lt;/code&gt; 과 같은 검사 태그 목록 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6615ec052ef5b32e9a7ddc0191176c4b5da7db9c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;as_attachment=True&lt;/code&gt;, the &lt;code&gt;Content-Disposition&lt;/code&gt; header is set to &lt;code&gt;attachment&lt;/code&gt;, which asks the browser to offer the file to the user as a download. Otherwise, a &lt;code&gt;Content-Disposition&lt;/code&gt; header with a value of &lt;code&gt;inline&lt;/code&gt; (the browser default) will be set only if a filename is available.</source>
          <target state="translated">경우 &lt;code&gt;as_attachment=True&lt;/code&gt; 의 &lt;code&gt;Content-Disposition&lt;/code&gt; 헤더에 설정되어있는 &lt;code&gt;attachment&lt;/code&gt; 다운로드로 사용자에게 파일을 제공하는 브라우저를 묻는. 그렇지 않으면 파일 이름을 사용할 수있는 경우에만 &lt;code&gt;inline&lt;/code&gt; 값 (브라우저 기본값)이 있는 &lt;code&gt;Content-Disposition&lt;/code&gt; 헤더 가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="d6efdd4d6808763901e2a4ef79dd40c79a07e12c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, then the form output will not include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags nor &lt;code&gt;id&lt;/code&gt; attributes:</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; , 다음 폼 출력은 포함되지 않습니다 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그 나 &lt;code&gt;id&lt;/code&gt; 속성 :</target>
        </trans-unit>
        <trans-unit id="3cc984f7eb8796fb1fd928f2b24d9c6845248e58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the form output &lt;em&gt;will&lt;/em&gt; include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags and will use the field name as its &lt;code&gt;id&lt;/code&gt; for each form field:</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 가 설정되어 &lt;code&gt;True&lt;/code&gt; , 다음 양식 출력이 &lt;em&gt;됩니다&lt;/em&gt; 포함 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그와 같은 필드 이름을 사용하는 &lt;code&gt;id&lt;/code&gt; 각 양식 필드 :</target>
        </trans-unit>
        <trans-unit id="c915e73a9f6e71c73afac26838e8f2e10b0b4b57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to a string containing the format character &lt;code&gt;'%s'&lt;/code&gt;, then the form output will include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags, and will generate &lt;code&gt;id&lt;/code&gt; attributes based on the format string. For example, for a format string &lt;code&gt;'field_%s'&lt;/code&gt;, a field named &lt;code&gt;subject&lt;/code&gt; will get the &lt;code&gt;id&lt;/code&gt; value &lt;code&gt;'field_subject'&lt;/code&gt;. Continuing our example:</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 이 형식 문자를 포함하는 문자열로 설정 &lt;code&gt;'%s'&lt;/code&gt; , 다음 폼 출력이 포함됩니다 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그를하고, 생성 &lt;code&gt;id&lt;/code&gt; 형식 문자열을 기반 속성. 예를 들어, 형식 문자열 &lt;code&gt;'field_%s'&lt;/code&gt; 경우 &lt;code&gt;subject&lt;/code&gt; 라는 필드 는 &lt;code&gt;id&lt;/code&gt; 값 &lt;code&gt;'field_subject'&lt;/code&gt; 를 얻습니다 . 우리의 예를 계속하십시오 :</target>
        </trans-unit>
        <trans-unit id="3264738ae83ae7d0a0ed8e3fb36220d1bd14caff" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to any other true value &amp;ndash; such as a string that doesn&amp;rsquo;t include &lt;code&gt;%s&lt;/code&gt; &amp;ndash; then the library will act as if &lt;code&gt;auto_id&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 는 다른 진정한 가치로 설정 - 같은 포함하지 않는 문자열로 &lt;code&gt;%s&lt;/code&gt; 것처럼 다음 라이브러리가 역할을합니다 - &lt;code&gt;auto_id&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e0883ecf28d02e1a38399c6f3915b7fcc7015ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;autoclobber&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the user will be asked to approve destroying the existing database. &lt;code&gt;sys.exit&lt;/code&gt; is called if the user does not approve.</source>
          <target state="translated">경우 &lt;code&gt;autoclobber&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; 로 , 사용자는 기존 데이터베이스를 파괴 승인하라는 메시지가 표시됩니다. 사용자가 승인하지 않으면 &lt;code&gt;sys.exit&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="98e4a76b7e84d38f335e28bca3305209202dca5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;backend&lt;/code&gt; is passed in and it&amp;rsquo;s defined in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, then this method will use it. Otherwise, it will use the &lt;code&gt;backend&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, if there is only one, or raise an exception.</source>
          <target state="translated">경우 &lt;code&gt;backend&lt;/code&gt; 에 전달되고이에 정의되어 &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; ,이 방법을 사용합니다. 그렇지 않으면 &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 에&lt;/a&gt; &lt;code&gt;backend&lt;/code&gt; 가 있거나 하나만 있으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="375cd7296bfab6553a96bb4023ab0d2f1474319f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;books&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;books&lt;/code&gt; 이 다음과 같은 경우 :</target>
        </trans-unit>
        <trans-unit id="c362f4eb9d4fc883dad853b368e887b80e39db88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, outputs from passing tests will be discarded.</source>
          <target state="translated">If &lt;code&gt;buffer&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; , outputs from passing tests will be discarded.</target>
        </trans-unit>
        <trans-unit id="1a7c8aa34e3c2c04547138e30fa08eb1d3557164" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;check_path&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the function first checks the requested URL for whether its path begins with a language code listed in the &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">경우 &lt;code&gt;check_path&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; , 기능 첫번째 체크는 경로에 나열된 언어 코드로 시작 여부에 대한 URL을 요청 &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="c8ec35a2ea23587d9fe9a54f0ca32995bf582faf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;context&lt;/code&gt; is provided, it must be a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;. If it isn&amp;rsquo;t provided, the engine will render the template with an empty context.</source>
          <target state="translated">경우 &lt;code&gt;context&lt;/code&gt; 제공되고, 그것은해야합니다 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; . 제공되지 않으면 엔진은 템플릿을 빈 컨텍스트로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="17d141a9754d51166d4f3a44118b415f530a4910" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, these loaders are wrapped in &lt;a href=&quot;#django.template.loaders.cached.Loader&quot;&gt;&lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 ,이 로더는 &lt;a href=&quot;#django.template.loaders.cached.Loader&quot;&gt; &lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt; &lt;/a&gt; 에 랩핑 됩니다.</target>
        </trans-unit>
        <trans-unit id="0f4c76818b3f8b7eae0f4fc29ad7ccd7c54fd6d2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug&lt;/code&gt; isn&amp;rsquo;t &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is updated to its value.</source>
          <target state="translated">경우 &lt;code&gt;debug&lt;/code&gt; 하지 않습니다 &lt;code&gt;None&lt;/code&gt; 의 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정 값으로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="fd405748877e5e65871815a667f3253dfbbccc4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug_sql&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, failing test cases will output SQL queries logged to the &lt;a href=&quot;../logging#django-db-logger&quot;&gt;django.db.backends logger&lt;/a&gt; as well as the traceback. If &lt;code&gt;verbosity&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, then queries in all tests are output.</source>
          <target state="translated">경우 &lt;code&gt;debug_sql&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; 받는 사람, 테스트 케이스 실패를 출력의 SQL 쿼리가 기록 &lt;a href=&quot;../logging#django-db-logger&quot;&gt;django.db.backends 로거&lt;/a&gt; 역 추적뿐만 아니라. 경우 &lt;code&gt;verbosity&lt;/code&gt; 있다 &lt;code&gt;2&lt;/code&gt; , 모든 테스트에서 다음 쿼리가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="3b7f214abcf2191401e59d4b6763d7f1cc638a5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, &lt;code&gt;Avg&lt;/code&gt; returns the mean value of unique values. This is the SQL equivalent of &lt;code&gt;AVG(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;distinct=True&lt;/code&gt; , &lt;code&gt;Avg&lt;/code&gt; 고유 한 값의 평균 값을 반환합니다. 이것은 &lt;code&gt;AVG(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; 와 동등한 SQL 입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3bcdf7ed01d6c4e579221df819cdfdb4ec55a4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, &lt;code&gt;Sum&lt;/code&gt; returns the sum of unique values. This is the SQL equivalent of &lt;code&gt;SUM(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;distinct=True&lt;/code&gt; , &lt;code&gt;Sum&lt;/code&gt; 고유 한 값의 합계를 반환합니다. 이것은 &lt;code&gt;SUM(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; 와 동등한 SQL 입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e396e16bde5b9f0db7d59755293462c7fa1e84b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, the count will only include unique instances. This is the SQL equivalent of &lt;code&gt;COUNT(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;distinct=True&lt;/code&gt; , 카운트 고유 한 인스턴스 만 포함됩니다. 이는 &lt;code&gt;COUNT(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; 와 동일한 SQL 입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9f695c5cdafd569ee51fc695279eb0e6f896f6f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;django-admin&lt;/code&gt; only displays the help text no matter what arguments it is given, there is probably a problem with the file association in Windows. Check if there is more than one environment variable set for running Python scripts in &lt;code&gt;PATH&lt;/code&gt;. This usually occurs when there is more than one Python version installed.</source>
          <target state="translated">경우 &lt;code&gt;django-admin&lt;/code&gt; 단지 상관없이 주어진 어떤 인수 도움말 텍스트를 표시하지 않습니다, 아마도 Windows에서 파일 연결에 문제가있는 것입니다. &lt;code&gt;PATH&lt;/code&gt; 에서 Python 스크립트를 실행하기 위해 둘 이상의 환경 변수가 설정되어 있는지 확인하십시오 . 일반적으로 둘 이상의 Python 버전이 설치되어있을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="361315ebe5ec678bf8ab55ad6dc27bfd903864d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;failfast&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite will stop running after the first test failure is detected.</source>
          <target state="translated">경우 &lt;code&gt;failfast&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; 첫 번째 테스트 실패가 감지 된 후, 테스트 스위트 실행이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="553d84602f7d657ca01d69ac24fa1a843b57d59e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fetch_redirect_response&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the final page won&amp;rsquo;t be loaded. Since the test client can&amp;rsquo;t fetch external URLs, this is particularly useful if &lt;code&gt;expected_url&lt;/code&gt; isn&amp;rsquo;t part of your Django app.</source>
          <target state="translated">경우 &lt;code&gt;fetch_redirect_response&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; , 마지막 페이지가로드되지 않습니다. 테스트 클라이언트가 외부 URL을 가져올 수 없기 때문에 경우에 특히 유용 &lt;code&gt;expected_url&lt;/code&gt; 이 장고 응용 프로그램의 일부가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="aa845bb6d3fc5ac41cd79bc147d6aec3b05b0f54" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;get()&lt;/code&gt; doesn&amp;rsquo;t find any object, it raises a &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;Model.DoesNotExist&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">If &lt;code&gt;get()&lt;/code&gt; doesn&amp;rsquo;t find any object, it raises a &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;Model.DoesNotExist&lt;/code&gt; &lt;/a&gt; exception:</target>
        </trans-unit>
        <trans-unit id="d0b969b258b0b680f2a5e4e2993f89a44307e3bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;get()&lt;/code&gt; finds more than one object, it raises a &lt;a href=&quot;class#django.db.models.Model.MultipleObjectsReturned&quot;&gt;&lt;code&gt;Model.MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">If &lt;code&gt;get()&lt;/code&gt; finds more than one object, it raises a &lt;a href=&quot;class#django.db.models.Model.MultipleObjectsReturned&quot;&gt; &lt;code&gt;Model.MultipleObjectsReturned&lt;/code&gt; &lt;/a&gt; exception:</target>
        </trans-unit>
        <trans-unit id="9b9986686bc1debc8466f09df6e013f28b9ad282" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;html_message&lt;/code&gt; is provided, the resulting email will be a &lt;em&gt;multipart/alternative&lt;/em&gt; email with &lt;code&gt;message&lt;/code&gt; as the &lt;em&gt;text/plain&lt;/em&gt; content type and &lt;code&gt;html_message&lt;/code&gt; as the &lt;em&gt;text/html&lt;/em&gt; content type.</source>
          <target state="translated">경우 &lt;code&gt;html_message&lt;/code&gt; 가 제공되고, 그 결과 이메일이 될 것입니다 &lt;em&gt;다중 / 대안&lt;/em&gt; 와 이메일 &lt;code&gt;message&lt;/code&gt; 는 AS &lt;em&gt;텍스트 / 일반&lt;/em&gt; 콘텐츠 형식 및 &lt;code&gt;html_message&lt;/code&gt; 는 AS &lt;em&gt;text / html과&lt;/em&gt; 콘텐츠 형식.</target>
        </trans-unit>
        <trans-unit id="941ffb3faea2e8e3929fbee655ba7559bab0a4f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;include_superusers&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (default), the result will include superusers.</source>
          <target state="translated">경우 &lt;code&gt;include_superusers&lt;/code&gt; 가 있습니다 &lt;code&gt;True&lt;/code&gt; (기본), 결과는 슈퍼 유저가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="949941ab38e1b5f16c207535d23d3aea1d5f9972" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;inspectdb&lt;/code&gt; cannot map a column&amp;rsquo;s type to a model field type, it&amp;rsquo;ll use &lt;code&gt;TextField&lt;/code&gt; and will insert the Python comment &lt;code&gt;'This field type is a guess.'&lt;/code&gt; next to the field in the generated model. The recognized fields may depend on apps listed in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. For example, &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; adds recognition for several PostgreSQL-specific field types.</source>
          <target state="translated">&lt;code&gt;inspectdb&lt;/code&gt; 가 열 유형을 모델 필드 유형에 매핑 할 수없는 경우 &lt;code&gt;TextField&lt;/code&gt; 를 사용 하고 Python 주석 &lt;code&gt;'This field type is a guess.'&lt;/code&gt; 삽입합니다 . 생성 된 모델의 필드 옆에 있습니다. 인식되는 필드는 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 나열된 앱에 따라 달라질 수 있습니다 . 예를 들어 &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt; 는 여러 PostgreSQL 특정 필드 유형에 대한 인식을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="858f3c43f659ce4cbaef07711c393bd1533ced3f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, it&amp;rsquo;s safe to prompt the user to input things on the command line. If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, functions which listen for this signal should not try to prompt for anything.</source>
          <target state="translated">경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 그것은 명령 줄에 입력 것들 사용자에게 메시지를 표시하는 것이 안전합니다. 경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;False&lt;/code&gt; ,이 신호를 수신 기능은 아무것도에 대한 프롬프트를 시도해서는 안된다.</target>
        </trans-unit>
        <trans-unit id="626b4c25c6b37295fc6b45206394744f58a53eb8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the test suite must be able to run without any manual intervention.</source>
          <target state="translated">경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 테스트 스위트는 테스트 스위트를 실행할 때 지침은 사용자가 요청하는 권한이 있습니다. 이 동작의 예는 기존 테스트 데이터베이스를 삭제할 권한을 요청하는 것입니다. 경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;False&lt;/code&gt; , 테스트 스위트는 수동 개입없이 실행할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="1c57c8f9832ea1f2b2611e0f586e4b53e5bc935e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;is_active&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (default), returns only active users, or if &lt;code&gt;False&lt;/code&gt;, returns only inactive users. Use &lt;code&gt;None&lt;/code&gt; to return all users irrespective of active state.</source>
          <target state="translated">경우 &lt;code&gt;is_active&lt;/code&gt; 는 것입니다 &lt;code&gt;True&lt;/code&gt; (기본값) 만 반환 활성 사용자, 또는 경우 &lt;code&gt;False&lt;/code&gt; , 만 반환 비활성 사용자. 활성 상태에 관계없이 모든 사용자를 리턴 하려면 &lt;code&gt;None&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d60554d1eba08cd3217b974a171c4e2851e3e70" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;is_valid()&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, we&amp;rsquo;ll now be able to find all the validated form data in its &lt;code&gt;cleaned_data&lt;/code&gt; attribute. We can use this data to update the database or do other processing before sending an HTTP redirect to the browser telling it where to go next.</source>
          <target state="translated">경우 &lt;code&gt;is_valid()&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 우리는 이제 모든 검증 양식 데이터를 찾을 수 있습니다 &lt;code&gt;cleaned_data&lt;/code&gt; 속성을. 이 데이터를 사용하여 다음 경로를 알려주는 HTTP 리디렉션을 브라우저로 보내기 전에 데이터베이스를 업데이트하거나 다른 처리를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc0ce8e242c0def881ec84e3bdcf44bc32faa981" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keepdb&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite will use the existing database, or create one if necessary. If &lt;code&gt;False&lt;/code&gt;, a new database will be created, prompting the user to remove the existing one, if present.</source>
          <target state="translated">경우 &lt;code&gt;keepdb&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; , 테스트 스위트는 기존 데이터베이스를 사용하거나 필요한 경우 하나를 만들 수 있습니다. 경우 &lt;code&gt;False&lt;/code&gt; , 새 데이터베이스가 존재하는 경우, 기존 하나를 제거하는 사용자에게 메시지를 표시, 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b705770333b7f75454b455c7c40f3bee6b13e433" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is in the context, returns its value. Otherwise inserts &lt;code&gt;key&lt;/code&gt; with a value of &lt;code&gt;default&lt;/code&gt; and returns &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 가 컨텍스트에 있으면 값을 리턴합니다. 그렇지 않으면 삽입 &lt;code&gt;key&lt;/code&gt; 의 값을 &lt;code&gt;default&lt;/code&gt; 반환 &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06130c8d19c7ce438bfdc76c100ec76ef0f594dd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;limit_choices_to&lt;/code&gt; is or returns a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt;, which is useful for &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;complex queries&lt;/a&gt;, then it will only have an effect on the choices available in the admin when the field is not listed in &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt;&lt;code&gt;raw_id_fields&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;ModelAdmin&lt;/code&gt; for the model.</source>
          <target state="translated">경우 &lt;code&gt;limit_choices_to&lt;/code&gt; 가 있다 또는 반환 &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q object&lt;/code&gt; &lt;/a&gt; 에 유용합니다, &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;복잡한 쿼리를&lt;/a&gt; 필드가 나열되지 않은 경우, 그것은 단지 관리자에서 사용할 수있는 선택에 영향을 미칠 것이다 &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt; &lt;code&gt;raw_id_fields&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;ModelAdmin&lt;/code&gt; 모델에 대한.</target>
        </trans-unit>
        <trans-unit id="a69ba9ab042b6955c7b8a5885ebdc5353d04f0cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;localized_fields&lt;/code&gt; is set to the special value &lt;code&gt;'__all__'&lt;/code&gt;, all fields will be localized.</source>
          <target state="translated">경우 &lt;code&gt;localized_fields&lt;/code&gt; 은 특별한 값으로 설정 &lt;code&gt;'__all__'&lt;/code&gt; , 모든 필드가 현지화됩니다.</target>
        </trans-unit>
        <trans-unit id="12496495cc140a23f1470913ca850c949acc7c56" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;num_messages&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, the output will be &lt;code&gt;You have 1 message.&lt;/code&gt; If &lt;code&gt;num_messages&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; the output will be &lt;code&gt;You have 2 messages.&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;num_messages&lt;/code&gt; 있다 &lt;code&gt;1&lt;/code&gt; , 출력이 될 것입니다 &lt;code&gt;You have 1 message.&lt;/code&gt; 경우 &lt;code&gt;num_messages&lt;/code&gt; 있다 &lt;code&gt;2&lt;/code&gt; 출력 될 것입니다 &lt;code&gt;You have 2 messages.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="745547a13ff3b07b7f0df9814180894ed3cbd790" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the group permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 가 전달 되면 이 특정 개체에 대한 그룹 권한 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="03ed81e92e7e7194280c4f660b2b67fb25464e6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 가 전달 되면 이 특정 개체에 대한 권한 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="85ee7993fd53cf5084822b1e8f85e878a5981909" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the user permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 가 전달 되면 이 특정 개체에 대한 사용자 권한 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0bd47472a1197cd85102dd3aa290ee04f5235bcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, this method won&amp;rsquo;t check for a permission for the model, but for this specific object.</source>
          <target state="translated">경우 &lt;code&gt;obj&lt;/code&gt; 전달되고,이 방법은 모델에 대한 권한을 확인하지만,이 특정 객체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b51a1e97f03cbd18b3eb07528ca1ad579116eda4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, this method won&amp;rsquo;t check for permissions for the model, but for the specific object.</source>
          <target state="translated">경우 &lt;code&gt;obj&lt;/code&gt; 전달되고,이 방법은 모델에 대한 사용 권한을 확인하지만, 특정 객체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2940740f5602aae91149f88fbd7e5e938152bb95" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;objs&lt;/code&gt; contains duplicates, only the first one is updated.</source>
          <target state="translated">&lt;code&gt;objs&lt;/code&gt; 에 중복 항목이 포함되어 있으면 첫 번째 항목 만 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="cfd0587006a5ebe13f169804da937daa1dc6170e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;open_file&lt;/code&gt; doesn&amp;rsquo;t have a name or if the name of &lt;code&gt;open_file&lt;/code&gt; isn&amp;rsquo;t appropriate, provide a custom file name using the &lt;code&gt;filename&lt;/code&gt; parameter. Note that if you pass a file-like object like &lt;code&gt;io.BytesIO&lt;/code&gt;, it&amp;rsquo;s your task to &lt;code&gt;seek()&lt;/code&gt; it before passing it to &lt;code&gt;FileResponse&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;open_file&lt;/code&gt; 는 이름이 나 이름 경우하지 않습니다 &lt;code&gt;open_file&lt;/code&gt; 는 적절하지 않다는 사용하여 사용자 정의 파일 이름을 제공하는 &lt;code&gt;filename&lt;/code&gt; 매개 변수를. 당신이 파일 같은 류의 객체 전달하면 있습니다 &lt;code&gt;io.BytesIO&lt;/code&gt; 을 , 그것은 당신의 작업의 &lt;code&gt;seek()&lt;/code&gt; 에 전달하기 전에 &lt;code&gt;FileResponse&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0a54a895818665a80021bf42884336a44240094" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paginate_by&lt;/code&gt; is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:</source>
          <target state="translated">경우 &lt;code&gt;paginate_by&lt;/code&gt; 가 지정되어, 장고는이에 의해 반환 된 결과 페이지를 매기는 것입니다. 다음 두 가지 방법 중 하나로 URL에 페이지 번호를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36d395ac24cbc55eaca1c775ab13e6698f248794" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pdb&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, a debugger (&lt;code&gt;pdb&lt;/code&gt; or &lt;code&gt;ipdb&lt;/code&gt;) will be spawned at each test error or failure.</source>
          <target state="translated">If &lt;code&gt;pdb&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; , a debugger ( &lt;code&gt;pdb&lt;/code&gt; or &lt;code&gt;ipdb&lt;/code&gt; ) will be spawned at each test error or failure.</target>
        </trans-unit>
        <trans-unit id="58fb18994a7a795b3456196c38bd884554ce674e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;proxy = True&lt;/code&gt;, a model which subclasses another model will be treated as a &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;proxy model&lt;/a&gt;.</source>
          <target state="translated">만약 &lt;code&gt;proxy = True&lt;/code&gt; , 또 다른 모델은으로 처리됩니다 서브 클래스 모델 &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;프록시 모델&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3c2ace2686aec54c72ff11eb64de5cdd2c225de9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;query_string&lt;/code&gt; is not passed in, the resulting &lt;code&gt;QueryDict&lt;/code&gt; will be empty (it will have no keys or values).</source>
          <target state="translated">경우 &lt;code&gt;query_string&lt;/code&gt; 전달되지 않고, 그 결과 &lt;code&gt;QueryDict&lt;/code&gt; 은 (는 더 키 또는 값이 없습니다) 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8ceb4db235a057ec15ab959aa814110f84beb5a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;readonly_fields&lt;/code&gt; is used without defining explicit ordering through &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;ModelAdmin.fields&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt;&lt;/a&gt; they will be added last after all editable fields.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;ModelAdmin.fields&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt; &lt;/a&gt; 를 통해 명시적인 순서를 정의하지 않고 &lt;code&gt;readonly_fields&lt;/code&gt; 를 사용하는 경우 편집 가능한 모든 필드 다음에 마지막에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="fa30400306a5da4bcdce4253036865b4f3bc0524" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;request&lt;/code&gt; is provided, it must be an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;. Then the engine must make it, as well as the CSRF token, available in the template. How this is achieved is up to each backend.</source>
          <target state="translated">경우 &lt;code&gt;request&lt;/code&gt; 제공되며, 그것은해야합니다 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에를&lt;/a&gt; . 그런 다음 엔진은 템플릿에서 CSRF 토큰뿐만 아니라이를 사용할 수 있도록해야합니다. 이것이 달성되는 방법은 각 백엔드에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="528ada93743e93ff057cf83a95ad5d5fef5392e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reverse&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, test cases will be executed in the opposite order. This could be useful to debug tests that aren&amp;rsquo;t properly isolated and have side effects. &lt;a href=&quot;overview#order-of-tests&quot;&gt;Grouping by test class&lt;/a&gt; is preserved when using this option.</source>
          <target state="translated">경우 &lt;code&gt;reverse&lt;/code&gt; 입니다 &lt;code&gt;True&lt;/code&gt; , 테스트 케이스는 반대 순서로 실행됩니다. 이것은 제대로 격리되지 않았고 부작용이있는 테스트를 디버그하는 데 유용 할 수 있습니다. 이 옵션을 사용하면 &lt;a href=&quot;overview#order-of-tests&quot;&gt;테스트 클래스 별 그룹화&lt;/a&gt; 가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="ad20bc0c784c2f029f4a98645d65c0f300592e27" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reverse_sql&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; (the default), the &lt;code&gt;RunSQL&lt;/code&gt; operation is irreversible.</source>
          <target state="translated">If &lt;code&gt;reverse_sql&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; (the default), the &lt;code&gt;RunSQL&lt;/code&gt; operation is irreversible.</target>
        </trans-unit>
        <trans-unit id="43523508781181e89cf0252c143efbdcfd606d84" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;save()&lt;/code&gt; is passed a list of field names in keyword argument &lt;code&gt;update_fields&lt;/code&gt;, only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example:</source>
          <target state="translated">경우 &lt;code&gt;save()&lt;/code&gt; 키워드 인수 필드 이름 목록이 전달됩니다 &lt;code&gt;update_fields&lt;/code&gt; 을 해당 목록에 이름 필드 만 업데이트됩니다. 객체에서 하나 또는 몇 개의 필드 만 업데이트하려는 경우에 바람직 할 수 있습니다. 데이터베이스에서 모든 모델 필드가 업데이트되지 않도록하면 약간의 성능 이점이 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f0b514748e158fcb5e55ffe9236c490c2c794096" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'plain'&lt;/code&gt;, which is the default, the terms are treated as separate keywords. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'phrase'&lt;/code&gt;, the terms are treated as a single phrase. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'raw'&lt;/code&gt;, then you can provide a formatted search query with terms and operators. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'websearch'&lt;/code&gt;, then you can provide a formatted search query, similar to the one used by web search engines. &lt;code&gt;'websearch'&lt;/code&gt; requires PostgreSQL &amp;ge; 11. Read PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;Full Text Search docs&lt;/a&gt; to learn about differences and syntax. Examples:</source>
          <target state="translated">If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'plain'&lt;/code&gt; , which is the default, the terms are treated as separate keywords. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'phrase'&lt;/code&gt; , the terms are treated as a single phrase. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'raw'&lt;/code&gt; , then you can provide a formatted search query with terms and operators. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'websearch'&lt;/code&gt; , then you can provide a formatted search query, similar to the one used by web search engines. &lt;code&gt;'websearch'&lt;/code&gt; requires PostgreSQL &amp;ge; 11. Read PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;Full Text Search docs&lt;/a&gt; to learn about differences and syntax. Examples:</target>
        </trans-unit>
        <trans-unit id="758b7e8b01a01d0cf6d9accbc0e30c1dde12bb08" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'plain'&lt;/code&gt;, which is the default, the terms are treated as separate keywords. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'phrase'&lt;/code&gt;, the terms are treated as a single phrase. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'raw'&lt;/code&gt;, then you can provide a formatted search query with terms and operators. Read PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;Full Text Search docs&lt;/a&gt; to learn about differences and syntax. Examples:</source>
          <target state="translated">경우 &lt;code&gt;search_type&lt;/code&gt; 있다 &lt;code&gt;'plain'&lt;/code&gt; 기본이다, 조건은 별도의 키워드로 처리됩니다. 경우 &lt;code&gt;search_type&lt;/code&gt; 있다 &lt;code&gt;'phrase'&lt;/code&gt; 용어는 하나의 문구로 처리됩니다. 경우 &lt;code&gt;search_type&lt;/code&gt; 있다 &lt;code&gt;'raw'&lt;/code&gt; , 당신은 용어와 연산자로 포맷 된 검색 질의를 제공 할 수 있습니다. 차이점과 구문에 대해 알아 보려면 PostgreSQL의 &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;전체 텍스트 검색 문서&lt;/a&gt; 를 읽으십시오 . 예 :</target>
        </trans-unit>
        <trans-unit id="eb44119253673674de8eae9f7f13c0327406af38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;self.name&lt;/code&gt; is &lt;code&gt;'/example.com'&lt;/code&gt; this returns &lt;code&gt;'//example.com/'&lt;/code&gt; which, in turn, is a valid schema relative URL but not the expected &lt;code&gt;'/%2Fexample.com/'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self.name&lt;/code&gt; 이 &lt;code&gt;'/example.com'&lt;/code&gt; 인 경우 &lt;code&gt;'//example.com/'&lt;/code&gt; 을 반환합니다. 이는 &lt;code&gt;'/%2Fexample.com/'&lt;/code&gt; 이 아닌 유효한 스키마 상대 URL 입니다.</target>
        </trans-unit>
        <trans-unit id="4149f6c59a8a8f994df534f92c186cd9332cad77" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;set_prefix&lt;/code&gt; is True, setting the URL resolver script prefix to &lt;a href=&quot;settings#std:setting-FORCE_SCRIPT_NAME&quot;&gt;&lt;code&gt;FORCE_SCRIPT_NAME&lt;/code&gt;&lt;/a&gt; if defined, or &lt;code&gt;/&lt;/code&gt; otherwise.</source>
          <target state="translated">경우 &lt;code&gt;set_prefix&lt;/code&gt; 는 에 URL 확인자 스크립트 접두사 설정, True 인 &lt;a href=&quot;settings#std:setting-FORCE_SCRIPT_NAME&quot;&gt; &lt;code&gt;FORCE_SCRIPT_NAME&lt;/code&gt; 를&lt;/a&gt; 정의 경우, 또는 &lt;code&gt;/&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="ab1cb60769ca7f5a89497ce33a2ae60ab8a9d4bd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;some_list&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be &lt;code&gt;['a', 'b']&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;some_list&lt;/code&gt; 이 있다 &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;['a', 'b']&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c918e03d3cc6b09be1e254bf14b4ced98312a29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (the default), a country-specific variant may be returned when neither the language code nor its generic variant is found. For example, if only &lt;code&gt;'es-co'&lt;/code&gt; is in &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt;, that&amp;rsquo;s returned for &lt;code&gt;lang_code&lt;/code&gt;s like &lt;code&gt;'es'&lt;/code&gt; and &lt;code&gt;'es-ar'&lt;/code&gt;. Those matches aren&amp;rsquo;t returned if &lt;code&gt;strict=True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; 가 &lt;code&gt;False&lt;/code&gt; (기본값) 인 경우 언어 코드 나 일반 변형이 없으면 국가 별 변형이 반환 될 수 있습니다. 경우에만 예를 들어, &lt;code&gt;'es-co'&lt;/code&gt; 에 &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; , 그 반환 것 &lt;code&gt;lang_code&lt;/code&gt; 처럼의 &lt;code&gt;'es'&lt;/code&gt; 와 &lt;code&gt;'es-ar'&lt;/code&gt; . &lt;code&gt;strict=True&lt;/code&gt; 인 경우 해당 일치 항목이 반환되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2ce60c41b82f95787b4d8ede724ae3aeb165c150" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string_if_invalid&lt;/code&gt; contains a &lt;code&gt;'%s'&lt;/code&gt;, the format marker will be replaced with the name of the invalid variable.</source>
          <target state="translated">&lt;code&gt;string_if_invalid&lt;/code&gt; 에 &lt;code&gt;'%s'&lt;/code&gt; 가 포함되어 있으면 형식 표시가 유효하지 않은 변수의 이름으로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="d4e2d7c9cc527a004f01055080d5e8c772cbe415" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strings_only&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, don&amp;rsquo;t convert (some) non-string-like objects.</source>
          <target state="translated">&lt;code&gt;strings_only&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 문자열이 아닌 객체를 (일부) 변환하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="02948597a9796eed77f937b00717f14fc87c09e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;test_labels&lt;/code&gt; has a value of &lt;code&gt;None&lt;/code&gt;, the test runner will search for tests in all files below the current directory whose names match its &lt;code&gt;pattern&lt;/code&gt; (see above).</source>
          <target state="translated">경우 &lt;code&gt;test_labels&lt;/code&gt; 은 값이 &lt;code&gt;None&lt;/code&gt; , 테스트 러너는 이름의 일치 현재 디렉토리 아래의 모든 파일 검사를 검색합니다 &lt;code&gt;pattern&lt;/code&gt; (위 참조).</target>
        </trans-unit>
        <trans-unit id="ffc18a42277d2f23ae1db5f8a3d415914924bb24" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;this_value&lt;/code&gt; is 175, &lt;code&gt;max_value&lt;/code&gt; is 200, and &lt;code&gt;max_width&lt;/code&gt; is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).</source>
          <target state="translated">경우 &lt;code&gt;this_value&lt;/code&gt; 가 175이고, &lt;code&gt;max_value&lt;/code&gt; 200이고 &lt;code&gt;max_width&lt;/code&gt; 상기 예에서의 이미지는 88 개 픽셀 폭 것, 100 (= .875 200분의 175 때문에, 0.875 &amp;times; 100 (88) 반올림 = 87.5).</target>
        </trans-unit>
        <trans-unit id="4137df6686025784e6f4bd6dbe64263ec732c01b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;urlize&lt;/code&gt; is applied to text that already contains HTML markup, or to email addresses that contain single quotes (&lt;code&gt;'&lt;/code&gt;), things won&amp;rsquo;t work as expected. Apply this filter only to plain text.</source>
          <target state="translated">경우 &lt;code&gt;urlize&lt;/code&gt; 이 텍스트에 적용되어 이미 HTML 마크 업을 포함, 또는 작은 따옴표 (포함 된 이메일 주소로 &lt;code&gt;'&lt;/code&gt; 예상대로) 상황이 작동하지 않습니다. 이 필터는 일반 텍스트에만 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="755d325efa931044c84d8862e2bdd301da420af5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;validate_max=True&lt;/code&gt; is passed to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, validation will also check that the number of forms in the data set, minus those marked for deletion, is less than or equal to &lt;code&gt;max_num&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;validate_max=True&lt;/code&gt; 로 전달된다 &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt; 검증은 또한 데이터 세트의 형태의 수를 뺀 삭제 표시가 그 미만임을 확인하거나 동일 할 &lt;code&gt;max_num&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0c7a70e9a93e3c5c85204a071c7a02b943a478cc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;validate_min=True&lt;/code&gt; is passed to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, validation will also check that the number of forms in the data set, minus those marked for deletion, is greater than or equal to &lt;code&gt;min_num&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;validate_min=True&lt;/code&gt; 로 전달된다 &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt; 검증은 데이터 세트의 형태 뺀 삭제 표시 자들의 개수보다 큰 것을 확인하거나 동일 할 &lt;code&gt;min_num&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c6735bdaa6045f1ec97e336418abe747d7949ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is 123456789, the output would be &lt;code&gt;117.7 MB&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 123456789입니다, 출력이 될 것이다 &lt;code&gt;117.7 MB&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f3f2f373b391d75ad0829ab7341020c580a64d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt; (the empty string), the output will be &lt;code&gt;nothing&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;&quot;&lt;/code&gt; (빈 문자열), 출력은 없을 것 &lt;code&gt;nothing&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="362ec1cf5c026a9ec9908c69ec686dfa7658cd06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; the return value will be &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; 반환 값은 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e691b98f5c994a59981e42ad33e040c5b50a1e37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; , 출력 것 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f8e9ee502ff5012d2ebcd6a7cefdc7edffdf62b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel i&amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel i&amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5e14c0338556cf8d588b052d7020856a9e0d085" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is &amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is &amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="09787e815cb703f7bdecda5fd0867ef3e441c8b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;?test=1&amp;amp;me=2&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;?test=1&amp;amp;amp;me=2&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;?test=1&amp;amp;me=2&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;?test=1&amp;amp;amp;me=2&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="769218d7736e8cea14dbbebb7c1aca16fb56ff9e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot;
rel=&quot;nofollow&quot;&amp;gt;www.djangoproject.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot; rel=&quot;nofollow&quot;&amp;gt;www.djangoproject.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="740ff784b31d6ec0305563ffa7d9222904379a81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt;, the output would be &lt;code&gt;'Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot;
rel=&quot;nofollow&quot;&amp;gt;www.djangoproj&amp;hellip;&amp;lt;/a&amp;gt;'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt; 출력이 될 것이다, &lt;code&gt;'Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot; rel=&quot;nofollow&quot;&amp;gt;www.djangoproj&amp;hellip;&amp;lt;/a&amp;gt;'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="767db1d4011700144ef49c99462e47c02a6c2278" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Django&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88d4c2db75d2d463013aff515a4e539aaecba50a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;I'm using Django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;I\'m using Django&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;&quot;I'm using Django&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;I\'m using Django&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b1301998ce64c5e4b7385eb5a9c1ed65276d48e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;JOEL IS A SLUG&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;JOEL IS A SLUG&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dfa84605a1f0d197bce09323aca3dc32fb281b29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel i&amp;hellip;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;Joel i&amp;hellip;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76a39aa993601030e66d46ab03d548fbf5f2434f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel is &amp;hellip;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;Joel is &amp;hellip;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="698cbda96e629b682048b0c4d5991a17b4894cea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;joel-is-a-slug&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 된다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;joel-is-a-slug&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc76eaef5a37e6719179bb1b819008595736dfb2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 된다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 출력이됩니다 &lt;code&gt;4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="410449c9d652bd564e1760e072d78e9e87b32302" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;String with spaces&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Stringwithspaces&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;String with spaces&quot;&lt;/code&gt; , 출력은 것 &lt;code&gt;&quot;Stringwithspaces&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d91bcc161c250f9c6d522fa815ad28f244f63f29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Django&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;django&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;Django&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b898df2bd8f9782ff2ac117ad19c1990ad06b75e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;https://www.example.org/&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;https%3A%2F%2Fwww.example.org%2F&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;https://www.example.org/&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;https%3A%2F%2Fwww.example.org%2F&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03a8dfb79e75755980218848dff7e849b6a16325" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;https://www.example.org/foo?a=b&amp;amp;c=d&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;https://www.example.org/foo?a=b&amp;amp;c=d&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8dcb3a8c75858398ed0fa2c246e7342a5a9ba89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;my FIRST post&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;My First Post&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;&quot;my FIRST post&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;My First Post&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8d3d329491303a39279635854b2c96c2d0a0a56" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;testing\r\njavascript 'string\&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;testing\r\njavascript 'string\&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; , the output will be &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b41984a04577beda8d7ddaa541cd5c8bfe22183b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;testing\r\njavascript \'string&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;&quot;testing\r\njavascript \'string&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; 는 출력 될 것 &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7889dd48460a146383ae914001047479ef55de85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, the user&amp;rsquo;s session cookie will expire when the user&amp;rsquo;s Web browser is closed.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;0&lt;/code&gt; 사용자의 웹 브라우저를 닫을 때, 사용자의 세션 쿠키가 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="3c553dfd78a3f0de982d32c7b5033452e8746ba1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;, the output will be &lt;code&gt;1.000000E+01&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;10&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;1.000000E+01&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d24c684374af1d1c25ab9b268e805e2a2d4c3a21" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;123456789&lt;/code&gt;, the output will be &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;123456789&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;8&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c286f249c65363c49d41fb5d1e8d5d182f5584b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;21&lt;/code&gt;, the output would be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;21&lt;/code&gt; , 출력이 될 것 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94d30195d6ca92c8171cecacb58be30e535aa470" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, then the output will be &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;4&lt;/code&gt; , 출력은 것 &lt;code&gt;6&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a692698093e8de528f1a1cbd97383f7022734827" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;800-COLLECT&lt;/code&gt;, the output will be &lt;code&gt;800-2655328&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;800-COLLECT&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;800-2655328&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="39b16f1b864fe3ace79d15160dae5c90ca2baf33" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Django&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;Django&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b3e719615b2ce65d002b3a522862acf99a04139" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Django&lt;/code&gt;, the output will be &lt;code&gt;&quot;Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;Django&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78a703a23fba3f90c70f851ca663092d08fdd36a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel is a slug&lt;/code&gt;, the output would be:</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;Joel is a slug&lt;/code&gt; , 출력은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="bbabf0348a25f576ca3e535b2d97041ed032a179" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel\nis a slug&lt;/code&gt;, the output will be &lt;code&gt;&amp;lt;p&amp;gt;Joel&amp;lt;br&amp;gt;is a
slug&amp;lt;/p&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;Joel\nis a slug&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;&amp;lt;p&amp;gt;Joel&amp;lt;br&amp;gt;is a slug&amp;lt;/p&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d0e1ab9aefbde6cb30a949c02a255d7270744a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel\nis a slug&lt;/code&gt;, the output will be &lt;code&gt;Joel&amp;lt;br&amp;gt;is a
slug&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;Joel\nis a slug&lt;/code&gt; , 출력이됩니다 &lt;code&gt;Joel&amp;lt;br&amp;gt;is a slug&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e38dc6e53ea0e75a764b87ee8c019666da2345e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the output will be &lt;code&gt;nothing&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 출력은 없을 것 &lt;code&gt;nothing&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="001b566bffd4b80501ba95ca798e628579b0ab7b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the session reverts to using the global session expiry policy.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 세션은 글로벌 세션 만료 정책을 사용으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="5dedd9c095b41ac7753da699bb1e880646273b4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Totally LOVING this Album!&lt;/code&gt;, the output will be &lt;code&gt;totally loving this album!&lt;/code&gt;.</source>
          <target state="translated">만약 &lt;code&gt;value&lt;/code&gt; 되어 &lt;code&gt;Totally LOVING this Album!&lt;/code&gt; , 출력은 &lt;code&gt;totally loving this album!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61c4e59683ff8d7dd92dbe8e1b3b2066f63beab0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; or &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 또는 &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , 출력은 것 &lt;code&gt;4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53bca12a161e9dd5d7b927148faebf050de63371" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; or &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, the output will be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 또는 &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , 출력은 것 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d149d18212e0e86edab9f7f00ad13bcc30cd131c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; , 출력은 것 &lt;code&gt;4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64fc5562b8f34bb2258acd150773d8d63506b010" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object (e.g., the result of &lt;code&gt;datetime.datetime.now()&lt;/code&gt;), the output will be the string &lt;code&gt;'Wed 09 Jan 2008'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; A는 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체 (예를 들어, 결과 &lt;code&gt;datetime.datetime.now()&lt;/code&gt; ), 출력은 문자열입니다 &lt;code&gt;'Wed 09 Jan 2008'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0395d03d9197ccb31dfcace99ff8aeebe3ca82cf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;datetime&lt;/code&gt; or &lt;code&gt;timedelta&lt;/code&gt; object, the session will expire at that specific date/time. Note that &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timedelta&lt;/code&gt; values are only serializable if you are using the &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; A는 &lt;code&gt;datetime&lt;/code&gt; 또는 &lt;code&gt;timedelta&lt;/code&gt; 개체, 세션은 특정 날짜 / 시간에 만료됩니다. 참고 것을 &lt;code&gt;datetime&lt;/code&gt; 와 &lt;code&gt;timedelta&lt;/code&gt; 당신이 사용하는 경우 값은 직렬화 있습니다 &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0b5d654bfc7f582442d4ec52b97710fc6f52860f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is an integer, the session will expire after that many seconds of inactivity. For example, calling &lt;code&gt;request.session.set_expiry(300)&lt;/code&gt; would make the session expire in 5 minutes.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 정수이면 몇 초 동안 활동이 없으면 세션이 만료됩니다. 예를 들어 &lt;code&gt;request.session.set_expiry(300)&lt;/code&gt; 호출 하면 세션이 5 분 안에 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="e742281c4c6418f5b4ad30c98a1be96235d497aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is equivalent to &lt;code&gt;datetime.datetime.now()&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;01:23&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 &lt;code&gt;datetime.datetime.now()&lt;/code&gt; 와 동일한 경우 출력은 문자열 &lt;code&gt;&quot;01:23&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fcb3b78b97e6fee24b4a40ac3d2e8f3ce6ba8572" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the dictionary &lt;code&gt;{'hello': 'world'}&lt;/code&gt;, the output will be:</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 사전이다 &lt;code&gt;{'hello': 'world'}&lt;/code&gt; 출력은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="11f959b07996e38ca116ea1d82c203bfc00d8e34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output could be &lt;code&gt;&quot;b&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; , 출력 될 수있는 &lt;code&gt;&quot;b&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c3473a8e4f8140a0e16b67b255243a22fb2f528" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;d&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; , 출력 스트링 것 &lt;code&gt;&quot;d&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d8d8a7505600a0d6f9c35b9d459454fa1379e79" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 출력이 될 것이다 &lt;code&gt;'a'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="29580353d7769d46a2677481abfdaba1144ef6ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;a // b // c&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 출력 문자열 것이다 &lt;code&gt;&quot;a // b // c&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fe07b5b9c67f950be5a22ac0321698d6f5f8d94" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the string &lt;code&gt;&quot;Joel&quot;&lt;/code&gt;, the output would be the list &lt;code&gt;['J', 'o', 'e', 'l']&lt;/code&gt;. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;123&lt;/code&gt;, the output will be the list &lt;code&gt;['1', '2', '3']&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 문자열 인 &lt;code&gt;&quot;Joel&quot;&lt;/code&gt; , 출력은 목록 것 &lt;code&gt;['J', 'o', 'e', 'l']&lt;/code&gt; . 경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;123&lt;/code&gt; , 출력리스트를 것 &lt;code&gt;['1', '2', '3']&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fdd0402e2118e34facbcfab001befd8ad7443b87" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 다음과 같은 경우 :</target>
        </trans-unit>
        <trans-unit id="d11b28c45cbb035e65f1544fc9f37f977239d634" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; isn&amp;rsquo;t provided or is empty, the above will display &amp;ldquo;&lt;code&gt;nothing&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 제공되거나 비어되지 않으며, 위의 &quot;는 표시되지 않습니다 &lt;code&gt;nothing&lt;/code&gt; .&quot;</target>
        </trans-unit>
        <trans-unit id="817a7abcfb83a78664a778e654e31a8f9e0d2826" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;var&lt;/code&gt; is set to &lt;code&gt;'class1 onmouseover=javascript:func()'&lt;/code&gt;, this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML. (Quoting the attribute value would fix this case.)</source>
          <target state="translated">경우 &lt;code&gt;var&lt;/code&gt; 설정되어 &lt;code&gt;'class1 onmouseover=javascript:func()'&lt;/code&gt; ,이 브라우저가 불완전한 HTML 렌더링 방식에 따라, 무단 자바 스크립트 실행이 발생할 수 있습니다. (속성 값을 인용하면이 경우가 해결됩니다.)</target>
        </trans-unit>
        <trans-unit id="f933e059630c72c200d25c5fdd28a82f3d46a177" translate="yes" xml:space="preserve">
          <source>If Django created two independent test databases, this would break any tests that expected replication to occur. However, the &lt;code&gt;replica&lt;/code&gt; database has been configured as a test mirror (using the &lt;a href=&quot;../../ref/settings#std:setting-TEST_MIRROR&quot;&gt;&lt;code&gt;MIRROR&lt;/code&gt;&lt;/a&gt; test setting), indicating that under testing, &lt;code&gt;replica&lt;/code&gt; should be treated as a mirror of &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Django가 독립적 인 테스트 데이터베이스를 두 개 만들면 복제가 발생할 것으로 예상되는 테스트가 중단됩니다. 그러나 &lt;code&gt;replica&lt;/code&gt; 데이터베이스는 &lt;a href=&quot;../../ref/settings#std:setting-TEST_MIRROR&quot;&gt; &lt;code&gt;MIRROR&lt;/code&gt; &lt;/a&gt; 테스트 설정을 사용하여 테스트 미러로 구성되어 테스트 중에 &lt;code&gt;replica&lt;/code&gt; 이 &lt;code&gt;default&lt;/code&gt; 미러로 처리되어야 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="9036d692b9906336f90c7855a3028c2226003914" translate="yes" xml:space="preserve">
          <source>If Django is installed, you should see the version of your installation. If it isn&amp;rsquo;t, you&amp;rsquo;ll get an error telling &amp;ldquo;No module named django&amp;rdquo;.</source>
          <target state="translated">Django가 설치되어 있으면 설치 버전이 표시되어야합니다. 그렇지 않은 경우 &quot;django라는 모듈 없음&quot;이라는 오류 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="be236e6ac5bd748d1f22e3cf4100a89925204a13" translate="yes" xml:space="preserve">
          <source>If Django manages the database and you don&amp;rsquo;t have a strong reason to do otherwise, you should leave this option unset. It&amp;rsquo;s best to store datetimes in UTC because it avoids ambiguous or nonexistent datetimes during daylight saving time changes. Also, receiving datetimes in UTC keeps datetime arithmetic simple &amp;mdash; there&amp;rsquo;s no need for the &lt;code&gt;normalize()&lt;/code&gt; method provided by pytz.</source>
          <target state="translated">If Django manages the database and you don&amp;rsquo;t have a strong reason to do otherwise, you should leave this option unset. It&amp;rsquo;s best to store datetimes in UTC because it avoids ambiguous or nonexistent datetimes during daylight saving time changes. Also, receiving datetimes in UTC keeps datetime arithmetic simple &amp;mdash; there&amp;rsquo;s no need for the &lt;code&gt;normalize()&lt;/code&gt; method provided by pytz.</target>
        </trans-unit>
        <trans-unit id="eb49e9ea4d2a972ace1883451b923566c522dc81" translate="yes" xml:space="preserve">
          <source>If Django&amp;rsquo;s built-in validators are not sufficient, you can write your own password validators. Validators have a fairly small interface. They must implement two methods:</source>
          <target state="translated">Django의 내장 유효성 검사기가 충분하지 않으면 자신의 암호 유효성 검사기를 작성할 수 있습니다. 유효성 검사기는 인터페이스가 상당히 작습니다. 두 가지 방법을 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="5aaa5cbe96b1f59dab0cb77d8d9c394e298d33d7" translate="yes" xml:space="preserve">
          <source>If NumPy is available, the data is returned as NumPy array. For performance reasons, it is highly recommended to use NumPy.</source>
          <target state="translated">NumPy를 사용할 수 있으면 데이터가 NumPy 배열로 반환됩니다. 성능상의 이유로 NumPy를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4f35abfa4df178cd3d5446f3665622a0713685e7" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; is given, the model for that queryset will be used.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt; 주어, 그의 검색어에 대한 모델이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5a0e09204d58d9f6314a4467ac19b26072f6cdbf" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field has &lt;code&gt;null=True&lt;/code&gt; set (i.e., it allows &lt;code&gt;NULL&lt;/code&gt; values), you can assign &lt;code&gt;None&lt;/code&gt; to remove the relation. Example:</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 필드가 &lt;code&gt;null=True&lt;/code&gt; 설정 (즉, 그것은 수 있습니다 &lt;code&gt;NULL&lt;/code&gt; 의 값을), 당신은 할당 할 수 &lt;code&gt;None&lt;/code&gt; 의 관계를 제거합니다. 예:</target>
        </trans-unit>
        <trans-unit id="dd1b92eec1467f8420d4b8fea716bef4edcfbc98" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; defines &lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt;&lt;em&gt;and&lt;/em&gt; you include &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt; when instantiating the &lt;code&gt;Form&lt;/code&gt;, then the latter &lt;code&gt;initial&lt;/code&gt; will have precedence. In this example, &lt;code&gt;initial&lt;/code&gt; is provided both at the field level and at the form instance level, and the latter gets precedence:</source>
          <target state="translated">경우 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 정의 &lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt;&lt;em&gt; 와&lt;/em&gt; 당신이 포함 &lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt; 인스턴스화 할 때 &lt;code&gt;Form&lt;/code&gt; , 다음 후자의 &lt;code&gt;initial&lt;/code&gt; 우선 순위가됩니다. 이 예 에서 필드 레벨과 양식 인스턴스 레벨 모두에서 &lt;code&gt;initial&lt;/code&gt; 이 제공되고 후자가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="23297be1ec8de83f5e39f061355f1a7e31301819" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field.</source>
          <target state="translated">&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt; 객체가 사용되는 경우 임의의 단위로 표현 될 수 있습니다 (생성 된 SQL은 필드의 단위로 변환 된 단위를 사용합니다). 그렇지 않으면 숫자 매개 변수는 필드 단위로 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="0953444ca96ddeaf1b7959fbef6cb9995213c823" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&quot;using&quot;&lt;/code&gt; key is present in &lt;code&gt;kwargs&lt;/code&gt; it is used as the database alias for which to check the number of queries:</source>
          <target state="translated">경우 &lt;code&gt;&quot;using&quot;&lt;/code&gt; 키에 존재 &lt;code&gt;kwargs&lt;/code&gt; 로 그것은 쿼리 수를 확인하기위한 데이터베이스 별칭으로 사용된다 :</target>
        </trans-unit>
        <trans-unit id="ec4e6b65d87815d29d8a2d46ec2b00f298d5d66e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Field&lt;/code&gt; has &lt;code&gt;required=False&lt;/code&gt; and you pass &lt;code&gt;clean()&lt;/code&gt; an empty value, then &lt;code&gt;clean()&lt;/code&gt; will return a &lt;em&gt;normalized&lt;/em&gt; empty value rather than raising &lt;code&gt;ValidationError&lt;/code&gt;. For &lt;code&gt;CharField&lt;/code&gt;, this will be an empty string. For other &lt;code&gt;Field&lt;/code&gt; classes, it might be &lt;code&gt;None&lt;/code&gt;. (This varies from field to field.)</source>
          <target state="translated">경우 &lt;code&gt;Field&lt;/code&gt; 있다 &lt;code&gt;required=False&lt;/code&gt; 하고 통과 &lt;code&gt;clean()&lt;/code&gt; 빈 값을 다음 &lt;code&gt;clean()&lt;/code&gt; 반환하며 &lt;em&gt;정규화&lt;/em&gt; 인상보다는 빈 값을 &lt;code&gt;ValidationError&lt;/code&gt; 을 . 들어 &lt;code&gt;CharField&lt;/code&gt; 이 빈 문자열입니다. 다른 &lt;code&gt;Field&lt;/code&gt; 클래스의 경우 &lt;code&gt;None&lt;/code&gt; 일 수 있습니다 . (이것은 필드마다 다릅니다.)</target>
        </trans-unit>
        <trans-unit id="d24b9c32e214ef3ab0246d149a23453ae0ffe403" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Field&lt;/code&gt; has &lt;code&gt;required=False&lt;/code&gt; and you pass &lt;code&gt;clean()&lt;/code&gt; an empty value, then &lt;code&gt;clean()&lt;/code&gt; will return a &lt;em&gt;normalized&lt;/em&gt; empty value rather than raising &lt;code&gt;ValidationError&lt;/code&gt;. For &lt;code&gt;CharField&lt;/code&gt;, this will return &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt; which defaults to an empty string. For other &lt;code&gt;Field&lt;/code&gt; classes, it might be &lt;code&gt;None&lt;/code&gt;. (This varies from field to field.)</source>
          <target state="translated">If a &lt;code&gt;Field&lt;/code&gt; has &lt;code&gt;required=False&lt;/code&gt; and you pass &lt;code&gt;clean()&lt;/code&gt; an empty value, then &lt;code&gt;clean()&lt;/code&gt; will return a &lt;em&gt;normalized&lt;/em&gt; empty value rather than raising &lt;code&gt;ValidationError&lt;/code&gt; . For &lt;code&gt;CharField&lt;/code&gt; , this will return &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt; which defaults to an empty string. For other &lt;code&gt;Field&lt;/code&gt; classes, it might be &lt;code&gt;None&lt;/code&gt; . (This varies from field to field.)</target>
        </trans-unit>
        <trans-unit id="a088e001be99ce0f05ecba2e8beb695059c4f795" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SuspiciousOperation&lt;/code&gt; exception reaches the ASGI/WSGI handler level it is logged at the &lt;code&gt;Error&lt;/code&gt; level and results in a &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt;&lt;code&gt;HttpResponseBadRequest&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../topics/logging&quot;&gt;logging documentation&lt;/a&gt; for more information.</source>
          <target state="translated">If a &lt;code&gt;SuspiciousOperation&lt;/code&gt; exception reaches the ASGI/WSGI handler level it is logged at the &lt;code&gt;Error&lt;/code&gt; level and results in a &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt; &lt;code&gt;HttpResponseBadRequest&lt;/code&gt; &lt;/a&gt;. See the &lt;a href=&quot;../topics/logging&quot;&gt;logging documentation&lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="95ebbce5c79519d1d18da9be429b333faaaf5fc6" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SuspiciousOperation&lt;/code&gt; exception reaches the WSGI handler level it is logged at the &lt;code&gt;Error&lt;/code&gt; level and results in a &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt;&lt;code&gt;HttpResponseBadRequest&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../topics/logging&quot;&gt;logging documentation&lt;/a&gt; for more information.</source>
          <target state="translated">경우 &lt;code&gt;SuspiciousOperation&lt;/code&gt; 의 예외가 WSGI 핸들러 수준에 도달 그것은 기록됩니다 &lt;code&gt;Error&lt;/code&gt; A의 수준과 결과 &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt; &lt;code&gt;HttpResponseBadRequest&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 &lt;a href=&quot;../topics/logging&quot;&gt;로깅 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f5bcb830a3b55a5db496eeac9f63848db38b4358" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;message&lt;/code&gt; contains headers at the start of the string, the headers will be printed as the first bit of the email message.</source>
          <target state="translated">문자열 시작 부분에 &lt;code&gt;message&lt;/code&gt; 에 헤더 가 포함 된 경우 헤더는 전자 메일 메시지의 첫 번째 비트로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="786de74a26ea3015865d33eda29d9247850de3ff" translate="yes" xml:space="preserve">
          <source>If a URL path matches a regular expression in this list, the request will not be redirected to HTTPS. The &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; strips leading slashes from URL paths, so patterns shouldn&amp;rsquo;t include them, e.g. &lt;code&gt;SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', &amp;hellip;]&lt;/code&gt;. If &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this setting has no effect.</source>
          <target state="translated">URL 경로가이 목록의 정규식과 일치하면 요청이 HTTPS로 리디렉션되지 않습니다. &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 패턴들을, 예를 들면 포함해서는 안, URL 경로에서 선도적 인 슬래시를 제거합니다 &lt;code&gt;SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', &amp;hellip;]&lt;/code&gt; . 경우 &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;False&lt;/code&gt; 이 설정이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba03fe98598ff554e940b398aa3215f04de4ffcf" translate="yes" xml:space="preserve">
          <source>If a backend raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception in &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;has_module_perms()&lt;/code&gt;&lt;/a&gt;, the authorization will immediately fail and Django won&amp;rsquo;t check the backends that follow.</source>
          <target state="translated">백엔드 에서 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;has_module_perms()&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt; 예외가 발생 하면 권한 부여가 즉시 실패하고 Django는 다음 백엔드를 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2fa2ce59c7328dc011fd86b6fee3bba58a56ca18" translate="yes" xml:space="preserve">
          <source>If a backend raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception, authentication will immediately fail. Django won&amp;rsquo;t check the backends that follow.</source>
          <target state="translated">백엔드에서 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt; 예외가 발생하면 인증이 즉시 실패합니다. Django는 다음 백엔드를 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d41c8331ab7adddfc4b833cf0b2041ce7dd29ef" translate="yes" xml:space="preserve">
          <source>If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies &lt;code&gt;de-at&lt;/code&gt; (Austrian German) but Django only has &lt;code&gt;de&lt;/code&gt; available, Django uses &lt;code&gt;de&lt;/code&gt;.</source>
          <target state="translated">기본 언어를 사용할 수 있지만 지정된 하위 언어를 사용할 수없는 경우 장고는 기본 언어를 사용합니다. 사용자 지정 예를 들어, &lt;code&gt;de-at&lt;/code&gt; (오스트리아 독일어)하지만 장고 만이 &lt;code&gt;de&lt;/code&gt; 가능, 장고 사용 &lt;code&gt;de&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="376b43b9cb329d49e19ff49c7e26326c21be0070" translate="yes" xml:space="preserve">
          <source>If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your &lt;a href=&quot;../ref/settings#std:setting-SESSION_COOKIE_SECURE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-CSRF_COOKIE_SECURE&quot;&gt;&lt;code&gt;CSRF_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; settings to &lt;code&gt;True&lt;/code&gt;. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS).</source>
          <target state="translated">브라우저가 대부분의 브라우저에서 기본값 인 HTTP를 통해 처음 연결하는 경우 기존 쿠키가 유출 될 수 있습니다. 이러한 이유로 &lt;a href=&quot;../ref/settings#std:setting-SESSION_COOKIE_SECURE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-CSRF_COOKIE_SECURE&quot;&gt; &lt;code&gt;CSRF_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt; 설정을 &lt;code&gt;True&lt;/code&gt; 로 설정해야 합니다. 이는 브라우저가 HTTPS 연결을 통해서만 이러한 쿠키를 보내도록 지시합니다. 이는 세션이 HTTP를 통해 작동하지 않으며 CSRF 보호로 인해 HTTP를 통해 POST 데이터가 수신되는 것을 막을 수 있습니다 (모든 HTTP 트래픽을 HTTPS로 리디렉션하는 경우에는 문제가 없음).</target>
        </trans-unit>
        <trans-unit id="c740b7603394883b2b965eca28364f7c9247ff89" translate="yes" xml:space="preserve">
          <source>If a callable is used for &lt;code&gt;limit_choices_to&lt;/code&gt;, it will be invoked every time a new form is instantiated. It may also be invoked when a model is validated, for example by management commands or the admin. The admin constructs querysets to validate its form inputs in various edge cases multiple times, so there is a possibility your callable may be invoked several times.</source>
          <target state="translated">&lt;code&gt;limit_choices_to&lt;/code&gt; 에 콜 러블을 사용 하면 새 폼이 인스턴스화 될 때마다 호출됩니다. 예를 들어 관리 명령이나 관리자에 의해 모델의 유효성이 검사 될 때 호출 될 수도 있습니다. 관리자는 다양한 경우에 폼 입력을 여러 번 검증하기 위해 쿼리 세트를 구성하므로 호출 가능 항목이 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca3b6246fdb9dbc1b936cc3e8ac2b8da1438d4d3" translate="yes" xml:space="preserve">
          <source>If a custom subclass of &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; implements a &lt;code&gt;render&lt;/code&gt; method, Django will treat it as emulating a &lt;a href=&quot;template-response#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;render&lt;/code&gt; method must itself return a valid response object.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 의 커스텀 서브 클래스가 &lt;code&gt;render&lt;/code&gt; 메소드를 구현하는 경우 , 장고는이 메소드를 &lt;a href=&quot;template-response#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt; 에뮬레이션으로 처리 하고 &lt;code&gt;render&lt;/code&gt; 메소드 자체가 유효한 응답 객체를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="e32b11f77650a5dfa1ba5024c565f112473c21f5" translate="yes" xml:space="preserve">
          <source>If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the &lt;code&gt;hints&lt;/code&gt; dictionary. Details on valid hints are provided &lt;a href=&quot;#topics-db-multi-db-hints&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">데이터베이스 조작이 데이터베이스 선택을 지원할 수있는 추가 정보를 제공 할 수있는 경우 &lt;code&gt;hints&lt;/code&gt; 사전에 제공됩니다 . 유효한 힌트에 대한 자세한 내용은 &lt;a href=&quot;#topics-db-multi-db-hints&quot;&gt;아래&lt;/a&gt; 에 제공 됩니다 .</target>
        </trans-unit>
        <trans-unit id="57e35454b09ff691f569bed0b6a01f70be68bb53" translate="yes" xml:space="preserve">
          <source>If a different timezone like &lt;code&gt;Australia/Melbourne&lt;/code&gt; is active in Django, then the datetime is converted to the new timezone before the value is truncated. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be:</source>
          <target state="translated">Django에서 &lt;code&gt;Australia/Melbourne&lt;/code&gt; 과 같은 다른 시간대 가 활성화되어 있으면 값이 잘 리기 전에 날짜 시간이 새 시간대로 변환됩니다. 위 예제 날짜에서 멜버른의 시간대 오프셋은 +10 : 00입니다. 이 시간대가 활성화 될 때 반환되는 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="40ead0c16c096714986873e5ca8d59648a2731a1" translate="yes" xml:space="preserve">
          <source>If a different timezone like &lt;code&gt;Australia/Melbourne&lt;/code&gt; is active in Django, then the datetime is converted to the timezone before the value is extracted. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be the same as above except for:</source>
          <target state="translated">Django에서 &lt;code&gt;Australia/Melbourne&lt;/code&gt; 과 같은 다른 시간대 가 활성화되어 있으면 값을 추출하기 전에 날짜 시간이 시간대로 변환됩니다. 위 예제 날짜에서 멜버른의 시간대 오프셋은 +10 : 00입니다. 이 시간대가 활성화 될 때 반환되는 값은 다음을 제외하고 위와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="9dd612fed9477c0abbcabff974c2e3681b9057f6" translate="yes" xml:space="preserve">
          <source>If a field with the given name is not found a &lt;a href=&quot;../exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt;&lt;code&gt;FieldDoesNotExist&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">주어진 이름을 가진 필드를 찾지 &lt;a href=&quot;../exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt; &lt;code&gt;FieldDoesNotExist&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="36f5c6d42b4b693d43fb0565ac08c49881a8cc16" translate="yes" xml:space="preserve">
          <source>If a file isn&amp;rsquo;t found in the &lt;code&gt;staticfiles.json&lt;/code&gt; manifest at runtime, a &lt;code&gt;ValueError&lt;/code&gt; is raised. This behavior can be disabled by subclassing &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; and setting the &lt;code&gt;manifest_strict&lt;/code&gt; attribute to &lt;code&gt;False&lt;/code&gt; &amp;ndash; nonexistent paths will remain unchanged.</source>
          <target state="translated">런타임에 &lt;code&gt;staticfiles.json&lt;/code&gt; 매니페스트에 파일이 없으면 &lt;code&gt;ValueError&lt;/code&gt; 가 발생합니다. &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 를 서브 클래 싱 하고 &lt;code&gt;manifest_strict&lt;/code&gt; 속성을 &lt;code&gt;False&lt;/code&gt; 로 설정하면 이 동작을 비활성화 할 수 있습니다 . 존재하지 않는 경로는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d64815254ec043cc9f487e75e480e0b7d7744f44" translate="yes" xml:space="preserve">
          <source>If a file with &lt;code&gt;name&lt;/code&gt; already exists, &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_alternative_name&quot;&gt;&lt;code&gt;get_alternative_name()&lt;/code&gt;&lt;/a&gt; is called to obtain an alternative name.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이있는 파일이 이미 존재 하면 대체 이름을 얻기 위해 &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_alternative_name&quot;&gt; &lt;code&gt;get_alternative_name()&lt;/code&gt; &lt;/a&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4878c82df117e894b2c83734529f13460689ef4f" translate="yes" xml:space="preserve">
          <source>If a file with &lt;code&gt;name&lt;/code&gt; already exists, &lt;code&gt;get_alternative_name()&lt;/code&gt; is called to obtain an alternative name.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이있는 파일이 이미 존재 하면 대체 이름을 얻기 위해 &lt;code&gt;get_alternative_name()&lt;/code&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1db0a6d60d804a7f072aeecfe4f0e2fd449487ea" translate="yes" xml:space="preserve">
          <source>If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the &lt;code&gt;sensitive_variables&lt;/code&gt; decorator:</source>
          <target state="translated">코드의 함수 (보기 또는 일반 콜백)가 민감한 정보를 포함하기 쉬운 로컬 변수를 사용하는 경우 &lt;code&gt;sensitive_variables&lt;/code&gt; 데코레이터를 사용하여 해당 변수의 값이 오류 보고서에 포함되지 않도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a908979b10b7cbe092ab501a90dbcc59af970e03" translate="yes" xml:space="preserve">
          <source>If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV&amp;rsquo;s and projectors will have the same media requirements:</source>
          <target state="translated">CSS 파일 그룹이 여러 출력 미디어 유형에 적합한 경우 사전 키는 쉼표로 구분 된 출력 미디어 유형 목록 일 수 있습니다. 다음 예에서 TV와 프로젝터의 미디어 요구 사항은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0969faa22edce6893747f90fdcf0cc7c56f629be" translate="yes" xml:space="preserve">
          <source>If a management command is called from code through &lt;a href=&quot;../ref/django-admin#django.core.management.call_command&quot;&gt;&lt;code&gt;call_command()&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s up to you to catch the exception when needed.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django.core.management.call_command&quot;&gt; &lt;code&gt;call_command()&lt;/code&gt; &lt;/a&gt; 통해 코드에서 관리 명령을 호출 하면 필요할 때 예외를 잡아야합니다.</target>
        </trans-unit>
        <trans-unit id="b69c1f15f7880ce6a608e37a3d0c0885c68c3db2" translate="yes" xml:space="preserve">
          <source>If a model has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, instances of that model will have access to the related (foreign) object via an attribute of the model.</source>
          <target state="translated">모델에 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가있는 경우 해당 모델의 인스턴스는 모델의 속성을 통해 관련 (외부) 객체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb15c806fa95b1c1cac44107cdbd6729a430458b" translate="yes" xml:space="preserve">
          <source>If a model has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, instances of the foreign-key model will have access to a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; that returns all instances of the first model. By default, this &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; is named &lt;code&gt;FOO_set&lt;/code&gt;, where &lt;code&gt;FOO&lt;/code&gt; is the source model name, lowercased. This &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;QuerySets&lt;/code&gt;, which can be filtered and manipulated as described in the &amp;ldquo;Retrieving objects&amp;rdquo; section above.</source>
          <target state="translated">모델에 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가 있으면 외래 키 모델의 인스턴스는 첫 번째 모델의 모든 인스턴스를 반환 하는 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; 에&lt;/a&gt; 액세스 할 수 있습니다 . 기본적으로이 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; 의&lt;/a&gt; 이름은 &lt;code&gt;FOO_set&lt;/code&gt; 이며 여기서 &lt;code&gt;FOO&lt;/code&gt; 는 소스 모델 이름이며 소문자입니다. 이 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;QuerySets&lt;/code&gt; 를 반환 하며 , 위의 &quot;객체 검색&quot;섹션에 설명 된대로 필터링하고 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60ba79a890d9e5b777dce6459bc7d4e3596736cc" translate="yes" xml:space="preserve">
          <source>If a model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; &amp;mdash; an auto-incrementing primary key &amp;mdash; then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call &lt;code&gt;save()&lt;/code&gt;:</source>
          <target state="translated">모델 에 자동 증분 기본 키인 자동 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 가있는 경우 자동 증분 값은 &lt;code&gt;save()&lt;/code&gt; 처음 호출 할 때 객체에 속성으로 계산되어 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="8867ea227fede80f2b653fda4e88d79e719938b1" translate="yes" xml:space="preserve">
          <source>If a model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; but you want to define a new object&amp;rsquo;s ID explicitly when saving, define it explicitly before saving, rather than relying on the auto-assignment of the ID:</source>
          <target state="translated">모델에 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; 가&lt;/a&gt; 있지만 저장할 때 새 객체의 ID를 명시 적으로 정의하려면 ID의 자동 할당에 의존하지 않고 저장하기 전에 명시 적으로 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="836ea517ddae0d98a98be3d92fb098c1716467c1" translate="yes" xml:space="preserve">
          <source>If a model is defined outside of an application in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, it must declare which app it belongs to:</source>
          <target state="translated">모델이 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 애플리케이션 외부에 정의 된 경우 모델이 속한 앱을 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="b1b1b8a914c46d91f06259e7e2f6393532703abd" translate="yes" xml:space="preserve">
          <source>If a model with &lt;code&gt;managed=False&lt;/code&gt; contains a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model &lt;em&gt;will&lt;/em&gt; be created.</source>
          <target state="translated">&lt;code&gt;managed=False&lt;/code&gt; 인 모델에 관리 되지 않는 다른 모델을 가리키는 &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 가 포함되어 있으면 다 대다 조인의 중간 테이블도 만들어지지 않습니다. 그러나 관리 하나 개는 관리되지 않는 모델 사이의 중간 테이블이 &lt;em&gt;됩니다&lt;/em&gt; 만들 수.</target>
        </trans-unit>
        <trans-unit id="412ddfb7b344d2bfd06795c612194f73c03d1d0a" translate="yes" xml:space="preserve">
          <source>If a model&amp;rsquo;s primary key isn&amp;rsquo;t called &lt;code&gt;id&lt;/code&gt;, no problem. Comparisons will always use the primary key, whatever it&amp;rsquo;s called. For example, if a model&amp;rsquo;s primary key field is called &lt;code&gt;name&lt;/code&gt;, these two statements are equivalent:</source>
          <target state="translated">모델의 기본 키를 &lt;code&gt;id&lt;/code&gt; 라고하지 않으면 아무런 문제 가 없습니다 . 비교는 항상 기본 키를 사용합니다. 예를 들어, 모델의 기본 키 필드가 &lt;code&gt;name&lt;/code&gt; 이면이 두 명령문은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="fa59d497e1dda34138c57d1907906c6ac5378b51" translate="yes" xml:space="preserve">
          <source>If a movie&amp;rsquo;s &amp;ldquo;peers&amp;rdquo; are described as movies released by the same studio in the same genre in the same year, this &lt;code&gt;RowRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s two prior and two following peers:</source>
          <target state="translated">영화의 &quot;피어&quot;가 같은 연도에 같은 장르에서 동일한 스튜디오에 의해 공개 된 영화로 설명되는 경우,이 &lt;code&gt;RowRange&lt;/code&gt; 예제는 각 영화에 2 명의 이전 동료와 2 명의 동료의 평균 등급을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="02dc34c15c815e6e708c5523691c3b4a85610564" translate="yes" xml:space="preserve">
          <source>If a persistent cache value is found, that value is returned. For raster formats using Persistent Auxiliary Metadata (PAM) services, the statistics might be cached in an auxiliary file. In some cases this metadata might be out of sync with the pixel values or cause values from a previous call to be returned which don&amp;rsquo;t reflect the value of the &lt;code&gt;approximate&lt;/code&gt; argument. In such cases, use the &lt;code&gt;refresh&lt;/code&gt; argument to get updated values and store them in the cache.</source>
          <target state="translated">지속적 캐시 값을 찾으면 해당 값이 리턴됩니다. PAM (Persistent Auxiliary Metadata) 서비스를 사용하는 래스터 형식의 경우 통계는 보조 파일에 캐시 될 수 있습니다. 경우에 따라이 메타 데이터가 픽셀 값과 동기화되지 않았거나 &lt;code&gt;approximate&lt;/code&gt; 인수 의 값을 반영하지 않는 이전 호출의 값이 반환 될 수 있습니다 . 이러한 경우 &lt;code&gt;refresh&lt;/code&gt; 인수를 사용하여 업데이트 된 값을 가져 와서 캐시에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="8e2f7c830b30646acb1129766828116985345dda" translate="yes" xml:space="preserve">
          <source>If a query doesn&amp;rsquo;t have an ordering specified, results are returned from the database in an unspecified order. A particular ordering is guaranteed only when ordering by a set of fields that uniquely identify each object in the results. For example, if a &lt;code&gt;name&lt;/code&gt; field isn&amp;rsquo;t unique, ordering by it won&amp;rsquo;t guarantee objects with the same name always appear in the same order.</source>
          <target state="translated">쿼리에 지정된 순서가 없으면 결과가 데이터베이스에서 지정되지 않은 순서로 반환됩니다. 특정 순서는 결과에서 각 개체를 고유하게 식별하는 일련의 필드로 순서를 지정할 때만 보장됩니다. 예를 들어, &lt;code&gt;name&lt;/code&gt; 필드가 고유하지 않은 경우, 이름 필드가 같은 순서로 이름이 같은 개체가 항상 같은 순서로 나타나는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="276f40ee2ff4debb8de8e2a78fbc889d76bec708" translate="yes" xml:space="preserve">
          <source>If a response varies depending on the content of the &lt;code&gt;Accept&lt;/code&gt; header and you are using some form of caching like Django&amp;rsquo;s &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt;&lt;code&gt;cache middleware&lt;/code&gt;&lt;/a&gt;, you should decorate the view with &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers('Accept')&lt;/code&gt;&lt;/a&gt; so that the responses are properly cached.</source>
          <target state="translated">If a response varies depending on the content of the &lt;code&gt;Accept&lt;/code&gt; header and you are using some form of caching like Django&amp;rsquo;s &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt; &lt;code&gt;cache middleware&lt;/code&gt; &lt;/a&gt;, you should decorate the view with &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers('Accept')&lt;/code&gt; &lt;/a&gt; so that the responses are properly cached.</target>
        </trans-unit>
        <trans-unit id="419fbfe6388d6c8dcc573315271dbda24cc24890" translate="yes" xml:space="preserve">
          <source>If a response varies on whether or not it&amp;rsquo;s requested via AJAX and you are using some form of caching like Django&amp;rsquo;s &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt;&lt;code&gt;cache middleware&lt;/code&gt;&lt;/a&gt;, you should decorate the view with &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers('X-Requested-With')&lt;/code&gt;&lt;/a&gt; so that the responses are properly cached.</source>
          <target state="translated">응답이 AJAX를 통해 요청되었는지 여부에 따라 달라지고 Django의 &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt; &lt;code&gt;cache middleware&lt;/code&gt; &lt;/a&gt; 와 같은 일부 캐싱 형식을 사용 하는 경우 응답이 올바르게 캐시되도록 뷰를 &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers('X-Requested-With')&lt;/code&gt; 로&lt;/a&gt; 장식해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f467ff0e02bba6e43affce86c588503c3a97097" translate="yes" xml:space="preserve">
          <source>If a string (e.g. &lt;code&gt;secure.example.com&lt;/code&gt;), all SSL redirects will be directed to this host rather than the originally-requested host (e.g. &lt;code&gt;www.example.com&lt;/code&gt;). If &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this setting has no effect.</source>
          <target state="translated">문자열 (예 : &lt;code&gt;secure.example.com&lt;/code&gt; ) 인 경우 모든 SSL 리디렉션은 원래 요청 된 호스트 (예 : &lt;code&gt;www.example.com&lt;/code&gt; )가 아닌이 호스트로 전송 됩니다. 경우 &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;False&lt;/code&gt; 이 설정이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="819af35e8e5b0b423576e67f3d4a85e07e4a5780" translate="yes" xml:space="preserve">
          <source>If a variable is false or empty, use given default. Otherwise, use the value of the variable. For example:</source>
          <target state="translated">변수가 false이거나 비어있는 경우 제공된 기본값을 사용하십시오. 그렇지 않으면 변수 값을 사용하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65519194e6da2e5393e5193ef34a21784e4c9145" translate="yes" xml:space="preserve">
          <source>If a variable resolves to a callable, the template system will call it with no arguments and use its result instead of the callable.</source>
          <target state="translated">변수가 호출 가능한 것으로 해석되면 템플릿 시스템은 인수없이 변수를 호출하고 호출 가능한 대신 결과를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="116d86f8db0d1afc35e7e30a7f2315cb0ba50f4a" translate="yes" xml:space="preserve">
          <source>If a view is using this mixin, all requests by non-authenticated users will be redirected to the login page or shown an HTTP 403 Forbidden error, depending on the &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt;&lt;code&gt;raise_exception&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="translated">뷰가이 믹스 인을 사용하는 경우 인증되지 않은 사용자의 모든 요청은 &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt; &lt;code&gt;raise_exception&lt;/code&gt; &lt;/a&gt; 매개 변수 에 따라 로그인 페이지로 리디렉션되거나 HTTP 403 Forbidden 오류가 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="2472a23c9704c8c58addf4a481db8096770e5e94" translate="yes" xml:space="preserve">
          <source>If a view sets its own cache expiry time (i.e. it has a &lt;code&gt;max-age&lt;/code&gt; section in its &lt;code&gt;Cache-Control&lt;/code&gt; header) then the page will be cached until the expiry time, rather than &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt;. Using the decorators in &lt;code&gt;django.views.decorators.cache&lt;/code&gt; you can easily set a view&amp;rsquo;s expiry time (using the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; decorator) or disable caching for a view (using the &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;never_cache()&lt;/code&gt;&lt;/a&gt; decorator). See the &lt;a href=&quot;#controlling-cache-using-other-headers&quot;&gt;using other headers&lt;/a&gt; section for more on these decorators.</source>
          <target state="translated">뷰가 자체 캐시 만료 시간을 설정하면 (즉 , &lt;code&gt;Cache-Control&lt;/code&gt; 헤더 에 &lt;code&gt;max-age&lt;/code&gt; 섹션이있는 경우) 페이지는 &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; 가&lt;/a&gt; 아닌 만료 시간까지 캐시됩니다 . &lt;code&gt;django.views.decorators.cache&lt;/code&gt; 의 데코레이터를 사용하면 뷰의 만료 시간을 쉽게 설정 하거나 &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt; 데코레이터 사용) 뷰의 캐싱을 비활성화 할 수 있습니다 ( &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;never_cache()&lt;/code&gt; &lt;/a&gt; 데코레이터 사용). 이 데코레이터에 대한 자세한 내용은 &lt;a href=&quot;#controlling-cache-using-other-headers&quot;&gt;다른 헤더 사용하기&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd0e4e15cb1a129fa5304adb9ab881ae3476ced9" translate="yes" xml:space="preserve">
          <source>If additional escaping is not desired, you will need to use &lt;a href=&quot;../ref/utils#django.utils.safestring.mark_safe&quot;&gt;&lt;code&gt;mark_safe()&lt;/code&gt;&lt;/a&gt; if you are absolutely sure that your code does not contain XSS vulnerabilities. For building small HTML snippets, use of &lt;a href=&quot;../ref/utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;mark_safe()&lt;/code&gt; is strongly recommended.</source>
          <target state="translated">추가 이스케이프가 필요 하지 않은 경우 코드에 XSS 취약성이 포함되어 있지 않다면 확실하게 &lt;a href=&quot;../ref/utils#django.utils.safestring.mark_safe&quot;&gt; &lt;code&gt;mark_safe()&lt;/code&gt; &lt;/a&gt; 를 사용해야 합니다. 작은 HTML 스 니펫을 빌드하려면 &lt;a href=&quot;../ref/utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; &lt;/a&gt; 대신 &lt;code&gt;mark_safe()&lt;/code&gt; 을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d018009d896660351337e8c7652155ea49ee64a9" translate="yes" xml:space="preserve">
          <source>If all items in a sitemap have a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt;, the sitemap generated by &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt;&lt;code&gt;views.sitemap()&lt;/code&gt;&lt;/a&gt; will have a &lt;code&gt;Last-Modified&lt;/code&gt; header equal to the latest &lt;code&gt;lastmod&lt;/code&gt;. You can activate the &lt;a href=&quot;../middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt; to make Django respond appropriately to requests with an &lt;code&gt;If-Modified-Since&lt;/code&gt; header which will prevent sending the sitemap if it hasn&amp;rsquo;t changed.</source>
          <target state="translated">사이트 맵의 모든 항목에 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt; &lt;code&gt;lastmod&lt;/code&gt; &lt;/a&gt; 가 &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt; &lt;code&gt;views.sitemap()&lt;/code&gt; &lt;/a&gt; 의해 생성 된 사이트 맵 의 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더는 최신 &lt;code&gt;lastmod&lt;/code&gt; 와 같습니다 . &lt;a href=&quot;../middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt; 를 활성화하면 사이트 맵이 변경되지 않은 경우 사이트 맵을 보내지 못하게 하는 &lt;code&gt;If-Modified-Since&lt;/code&gt; 헤더 를 사용하여 Django가 요청에 적절히 응답하도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4efc199d481916c1801fd9d031e671d91e418ff5" translate="yes" xml:space="preserve">
          <source>If all of the tests passed, then you&amp;rsquo;ll want to make sure that you added the new test shown above to the appropriate folder and file name.</source>
          <target state="translated">모든 테스트를 통과 한 경우 위에 표시된 새 테스트를 적절한 폴더 및 파일 이름에 추가했는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="af2d81f3186a97fe69044083ccf1ae5c5bacc347" translate="yes" xml:space="preserve">
          <source>If all you want is to run Django with your native language all you need to do is set &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; and make sure the corresponding &lt;a href=&quot;index#term-message-file&quot;&gt;message files&lt;/a&gt; and their compiled versions (&lt;code&gt;.mo&lt;/code&gt;) exist.</source>
          <target state="translated">모국어로 Django를 실행하기 만하면 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; 를&lt;/a&gt; 설정 하고 해당 &lt;a href=&quot;index#term-message-file&quot;&gt;메시지 파일&lt;/a&gt; 과 컴파일 된 버전 ( &lt;code&gt;.mo&lt;/code&gt; )이 있는지 확인하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="5d55df844cd1e592f6c1063624dbce8afbbd7354" translate="yes" xml:space="preserve">
          <source>If an error happens during template parsing or rendering, Django can display the line the error happened on. For example:</source>
          <target state="translated">템플릿 파싱이나 렌더링 중 오류가 발생하면 Django는 오류가 발생한 줄을 표시 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="004a42cd451fd1f1d6e009a950c33e7582c724d1" translate="yes" xml:space="preserve">
          <source>If an optional field doesn&amp;rsquo;t appear in the form&amp;rsquo;s data, the resulting model instance uses the model field &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, if there is one, for that field. This behavior doesn&amp;rsquo;t apply to fields that use &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxSelectMultiple&quot;&gt;&lt;code&gt;CheckboxSelectMultiple&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../ref/forms/widgets#django.forms.SelectMultiple&quot;&gt;&lt;code&gt;SelectMultiple&lt;/code&gt;&lt;/a&gt; (or any custom widget whose &lt;a href=&quot;../../ref/forms/widgets#django.forms.Widget.value_omitted_from_data&quot;&gt;&lt;code&gt;value_omitted_from_data()&lt;/code&gt;&lt;/a&gt; method always returns &lt;code&gt;False&lt;/code&gt;) since an unchecked checkbox and unselected &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; don&amp;rsquo;t appear in the data of an HTML form submission. Use a custom form field or widget if you&amp;rsquo;re designing an API and want the default fallback behavior for a field that uses one of these widgets.</source>
          <target state="translated">선택적 필드가 양식의 데이터에 나타나지 않으면 결과 모델 인스턴스는 해당 필드에 대해 모델 필드 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; (있는 경우)를 사용합니다. 이 문제는 사용 분야에 적용되지 않습니다 &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxSelectMultiple&quot;&gt; &lt;code&gt;CheckboxSelectMultiple&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;../../ref/forms/widgets#django.forms.SelectMultiple&quot;&gt; &lt;code&gt;SelectMultiple&lt;/code&gt; &lt;/a&gt; (또는 사용자 정의 위젯 &lt;a href=&quot;../../ref/forms/widgets#django.forms.Widget.value_omitted_from_data&quot;&gt; &lt;code&gt;value_omitted_from_data()&lt;/code&gt; &lt;/a&gt; 방법을 항상 반환 &lt;code&gt;False&lt;/code&gt; ) 검사되지 않은 체크 박스를 선택되지 않은 이후 &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; 는 HTML의 데이터에 나타나지 않습니다 양식 제출. API를 디자인하고 이러한 위젯 중 하나를 사용하는 필드에 대한 기본 폴백 동작을 원하는 경우 사용자 정의 양식 필드 또는 위젯을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9cb04eee8e4707359752c37d935aef72b38a85f2" translate="yes" xml:space="preserve">
          <source>If any keyword arguments are provided, they will be passed to the constructor of the response class.</source>
          <target state="translated">키워드 인수가 제공되면 응답 클래스의 생성자에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="3ca0ba8a01e4bba76fac0f283df438a0e32e99ce" translate="yes" xml:space="preserve">
          <source>If any of those are not true, you should keep this setting set to &lt;code&gt;None&lt;/code&gt; and find another way of determining HTTPS, perhaps via custom middleware.</source>
          <target state="translated">해당 사항이 아닌 경우이 설정을 &lt;code&gt;None&lt;/code&gt; 설정하고 사용자 지정 미들웨어를 통해 HTTPS를 결정하는 다른 방법을 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="b7d9b6ada1db10c808758db904b1e245c1501d93" translate="yes" xml:space="preserve">
          <source>If any of your Django views send email using &lt;a href=&quot;../email&quot;&gt;Django&amp;rsquo;s email functionality&lt;/a&gt;, you probably don&amp;rsquo;t want to send email each time you run a test using that view. For this reason, Django&amp;rsquo;s test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email &amp;ndash; from the number of messages sent to the contents of each message &amp;ndash; without actually sending the messages.</source>
          <target state="translated">Django 뷰 중 하나가 &lt;a href=&quot;../email&quot;&gt;Django의 전자 메일 기능을&lt;/a&gt; 사용하여 전자 메일 을 보내는 경우 해당 뷰를 사용하여 테스트를 실행할 때마다 전자 메일을 보내지 않을 수 있습니다. 이러한 이유로 Django의 테스트 러너는 모든 Django에서 보낸 전자 메일을 더미 발신 함으로 리디렉션합니다. 이를 통해 실제로 메시지를 보내지 않고도 전자 메일을 보내는 모든 측면 (보낸 메시지 수부터 각 메시지 내용까지)을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7cd992185606a1b60bac1b5887d3305c1d38a0f" translate="yes" xml:space="preserve">
          <source>If any part of the variable is callable, the template system will try calling it. Example:</source>
          <target state="translated">변수의 일부가 호출 가능하면, 템플리트 시스템은 변수 호출을 시도합니다. 예:</target>
        </trans-unit>
        <trans-unit id="98c3f82d22ad3b1b1d268b1281f2a82a22a7f832" translate="yes" xml:space="preserve">
          <source>If autoclobber is &lt;code&gt;True&lt;/code&gt;, the database will be destroyed without consulting the user.</source>
          <target state="translated">autoclobber가 &lt;code&gt;True&lt;/code&gt; 인 경우 데이터베이스는 사용자와상의하지 않고 파괴됩니다.</target>
        </trans-unit>
        <trans-unit id="5b22c30791d93745f5516c055e57528793230347" translate="yes" xml:space="preserve">
          <source>If called via &lt;code&gt;GET&lt;/code&gt;, it displays a login form that POSTs to the same URL. More on this in a bit.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 을 통해 호출 되면 동일한 URL로 POST되는 로그인 양식이 표시됩니다. 이것에 조금 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="46678a34b8334aafed964864dd1e40fe87ccd539" translate="yes" xml:space="preserve">
          <source>If called via &lt;code&gt;POST&lt;/code&gt; with user submitted credentials, it tries to log the user in. If login is successful, the view redirects to the URL specified in &lt;code&gt;next&lt;/code&gt;. If &lt;code&gt;next&lt;/code&gt; isn&amp;rsquo;t provided, it redirects to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_REDIRECT_URL&quot;&gt;&lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt;&lt;/a&gt; (which defaults to &lt;code&gt;/accounts/profile/&lt;/code&gt;). If login isn&amp;rsquo;t successful, it redisplays the login form.</source>
          <target state="translated">사용자가 제출 한 신임 정보로 &lt;code&gt;POST&lt;/code&gt; 를 통해 호출 된 경우 사용자 로그인을 시도합니다. 로그인에 성공하면보기가 &lt;code&gt;next&lt;/code&gt; 지정된 URL로 경로 재 지정됩니다 . 경우 &lt;code&gt;next&lt;/code&gt; 제공되지 않습니다, 그것은로 리디렉션 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_REDIRECT_URL&quot;&gt; &lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt; &lt;/a&gt; (이 기본값으로 &lt;code&gt;/accounts/profile/&lt;/code&gt; ). 로그인에 실패하면 로그인 양식이 다시 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="750d2305bb14a5c3b5333c9c7a05dbb98c87224d" translate="yes" xml:space="preserve">
          <source>If configured, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt; header on all responses that do not already have it to the value provided.</source>
          <target state="translated">구성된 경우 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt; 는 아직없는 모든 응답에 대해 &lt;a href=&quot;middleware#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt; 헤더를 제공된 값으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3b24098ce265e59d2d9391447879b5bbc4795b4b" translate="yes" xml:space="preserve">
          <source>If desired, you may specify the numeric values for the constants directly according to the values in the above &lt;a href=&quot;contrib/messages#message-level-constants&quot;&gt;constants table&lt;/a&gt;.</source>
          <target state="translated">원하는 경우 위 &lt;a href=&quot;contrib/messages#message-level-constants&quot;&gt;상수 표의&lt;/a&gt; 값에 따라 상수의 숫자 값을 직접 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="60f37a761df5744dd22f17c7944ea423a1fae999" translate="yes" xml:space="preserve">
          <source>If either geometry is empty, returns &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">두 형상 중 하나가 비어 있으면 &lt;code&gt;False&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2dc033f0f3207c5001559cb4fc79bafb686f8940" translate="yes" xml:space="preserve">
          <source>If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with &lt;code&gt;ManyToManyField&lt;/code&gt; instances appearing last.</source>
          <target state="translated">이 중 하나를 사용하는 경우 양식에 필드가 나타나는 순서는 모델에 필드가 정의 된 순서이며 &lt;code&gt;ManyToManyField&lt;/code&gt; 인스턴스가 마지막에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="89dd600a41a8a4a339d00aba9150edcc8a920468" translate="yes" xml:space="preserve">
          <source>If for any reason you want to force a database query, you can tell Django to clear the cache using &lt;code&gt;Site.objects.clear_cache()&lt;/code&gt;:</source>
          <target state="translated">어떤 이유로 든 데이터베이스 쿼리를 수행하려는 경우 &lt;code&gt;Site.objects.clear_cache()&lt;/code&gt; 사용하여 Django에 캐시를 지우도록 지시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="881be6681a0240125f9df0391268603aa0a52905" translate="yes" xml:space="preserve">
          <source>If for some reason you don&amp;rsquo;t want to use client-side escaping, you can also set &lt;code&gt;escape_html=True&lt;/code&gt; and error messages will be escaped so you can use them directly in HTML.</source>
          <target state="translated">어떤 이유로 클라이언트 측 이스케이프를 사용하지 않으려면 &lt;code&gt;escape_html=True&lt;/code&gt; 를 설정하면 오류 메시지가 이스케이프되어 HTML에서 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d58ec0c689655b5bf0b89270f0419bdf232624f" translate="yes" xml:space="preserve">
          <source>If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed:</source>
          <target state="translated">하나 이상의 변수가 제공되면 변수가 변경되었는지 확인하십시오. 예를 들어, 다음은 변경 될 때마다 날짜를 표시하고 시간 또는 날짜가 변경된 경우 시간을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a75480c4dd65b1596a43ef88e502e15a63301456" translate="yes" xml:space="preserve">
          <source>If in doubt, inspect the SQL query!</source>
          <target state="translated">의심스러운 경우 SQL 쿼리를 검사하십시오!</target>
        </trans-unit>
        <trans-unit id="95d8c3ff1cc126a9b4a3bff2c74afae11dd80cd5" translate="yes" xml:space="preserve">
          <source>If in doubt, it&amp;rsquo;s often better to back off and base your work on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, perhaps with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django&amp;rsquo;s implementation of the generic class-based views for inspiration on how to tackle problems.)</source>
          <target state="translated">의심 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; , 종종 SingleObjectMixin 및 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; 과 함께 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; 를&lt;/a&gt; 기반으로 작업을 중단하는 것이 좋습니다 . 더 많은 코드를 작성하게 될지 모르지만 나중에 다른 사람이 이해하기 쉬울 것이므로 걱정할 상호 작용이 적어지면 생각이 절약됩니다. (물론, 문제를 해결하는 방법에 대한 영감을 얻기 위해 Django의 일반 클래스 기반 뷰 구현에 항상 들어갈 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="b5a0af3361c3b012a91fa944affd5c900cdcd944" translate="yes" xml:space="preserve">
          <source>If in doubt, it&amp;rsquo;s often better to back off and base your work on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, perhaps with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django&amp;rsquo;s implementation of the generic class-based views for inspiration on how to tackle problems.)</source>
          <target state="translated">If in doubt, it&amp;rsquo;s often better to back off and base your work on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;, perhaps with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django&amp;rsquo;s implementation of the generic class-based views for inspiration on how to tackle problems.)</target>
        </trans-unit>
        <trans-unit id="e0befa3f1898d2d464922616bfef2029b094f045" translate="yes" xml:space="preserve">
          <source>If in doubt, leave it to its default of &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">확실하지 않은 경우 기본값 인 &lt;code&gt;True&lt;/code&gt; 로 두십시오 .</target>
        </trans-unit>
        <trans-unit id="ff31f3d5d18a022f12eef24cbd3a8fdb28ad8cd1" translate="yes" xml:space="preserve">
          <source>If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 12 start menu group will created and contains shortcuts for the Application Stack Builder (ASB) as well as the &amp;lsquo;SQL Shell&amp;rsquo;, which will launch a &lt;code&gt;psql&lt;/code&gt; command window.</source>
          <target state="translated">If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 12 start menu group will created and contains shortcuts for the Application Stack Builder (ASB) as well as the &amp;lsquo;SQL Shell&amp;rsquo;, which will launch a &lt;code&gt;psql&lt;/code&gt; command window.</target>
        </trans-unit>
        <trans-unit id="ee64183f66a72c6ae780b05e928a3e9c5cf48b84" translate="yes" xml:space="preserve">
          <source>If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 9.x start menu group will created and contains shortcuts for the ASB as well as the &amp;lsquo;SQL Shell&amp;rsquo;, which will launch a &lt;code&gt;psql&lt;/code&gt; command window.</source>
          <target state="translated">성공적으로 설치되면 시스템이 Windows 서비스로 시작될 때마다 PostgreSQL 서버가 백그라운드에서 실행됩니다. PostgreSQL 9.x 시작 메뉴 그룹이 생성되고 ASSQL에 대한 바로 가기와 &lt;code&gt;psql&lt;/code&gt; 명령 창이 시작되는 'SQL Shell'이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="9982be845bcf21d3518f4d7ad7b68561577502c0" translate="yes" xml:space="preserve">
          <source>If instead you&amp;rsquo;re getting a &lt;code&gt;NameError&lt;/code&gt; here, you may have missed a step in &lt;a href=&quot;tutorial02#tutorial02-import-timezone&quot;&gt;Part 2&lt;/a&gt; where we added imports of &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timezone&lt;/code&gt; to &lt;code&gt;polls/models.py&lt;/code&gt;. Copy the imports from that section, and try running your tests again.</source>
          <target state="translated">대신 여기 에 &lt;code&gt;NameError&lt;/code&gt; 가 발생하면 &lt;a href=&quot;tutorial02#tutorial02-import-timezone&quot;&gt;Part 2&lt;/a&gt; 에서 &lt;code&gt;datetime&lt;/code&gt; 및 &lt;code&gt;timezone&lt;/code&gt; 가져 오기 를 &lt;code&gt;polls/models.py&lt;/code&gt; 에 추가 한 단계를 놓쳤을 수 있습니다 . 해당 섹션에서 가져 오기를 복사하고 테스트를 다시 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="b0529f7dc039ac957b0f3d20411828b42bb5e1fe" translate="yes" xml:space="preserve">
          <source>If irregular shapes are required, then the underlying field should be made nullable and the values padded with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">불규칙한 모양이 필요한 경우 기본 필드를 널 입력 가능으로 설정하고 값을 &lt;code&gt;None&lt;/code&gt; 으로 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="9c00a72ebe457e881bb58234002ab6b32b6b66b1" translate="yes" xml:space="preserve">
          <source>If it doesn&amp;rsquo;t find a match, the request continues to be processed as usual.</source>
          <target state="translated">일치하는 것이 없으면 요청은 평소와 같이 계속 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="e0e735de01fd61ae5f7f9a6e0d1a273b2c4436c9" translate="yes" xml:space="preserve">
          <source>If it finds a match, and &lt;code&gt;new_path&lt;/code&gt; is empty, it sends a 410 (&amp;ldquo;Gone&amp;rdquo;) HTTP header and empty (content-less) response.</source>
          <target state="translated">일치하는 것을 발견하고 &lt;code&gt;new_path&lt;/code&gt; 가 비어 있으면 410 ( &quot;Gone&quot;) HTTP 헤더와 비어있는 (content-less) 응답을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="73c4530195aba3cc21c592ffcd6b9c8e4ef6a369" translate="yes" xml:space="preserve">
          <source>If it finds a match, and &lt;code&gt;new_path&lt;/code&gt; is not empty, it redirects to &lt;code&gt;new_path&lt;/code&gt; using a 301 (&amp;ldquo;Moved Permanently&amp;rdquo;) redirect. You can subclass &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; and set &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class&quot;&gt;&lt;code&gt;response_redirect_class&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; to use a &lt;code&gt;302 Moved Temporarily&lt;/code&gt; redirect instead.</source>
          <target state="translated">일치하는 것을 발견하고 &lt;code&gt;new_path&lt;/code&gt; 가 비어 있지 않으면 301 (&amp;ldquo;영구적으로 이동&amp;rdquo;) 리디렉션을 사용하여 &lt;code&gt;new_path&lt;/code&gt; 로 리디렉션합니다. &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 를 서브 클래 싱 하고 &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class&quot;&gt; &lt;code&gt;response_redirect_class&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;../request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt; &lt;/a&gt; 로 설정 하여 &lt;code&gt;302 Moved Temporarily&lt;/code&gt; 리디렉션을 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b218da7489aa0db49911f5e0a7d7d9f83acf412" translate="yes" xml:space="preserve">
          <source>If it finds a match, it follows this algorithm:</source>
          <target state="translated">일치하는 것을 찾으면 다음 알고리즘을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="f8555e4e9f54c1af70c38896405428aee1b63eb8" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;False&lt;/code&gt;, the test tablespaces won&amp;rsquo;t be automatically created at the beginning of the tests or dropped at the end.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로 설정 되면 테스트 시작시 테스트 테이블 스페이스가 자동으로 작성되거나 종료되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9ff28be548c2e6e62ad9addaad106ce48d9e3524" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;False&lt;/code&gt;, the test user won&amp;rsquo;t be automatically created at the beginning of the tests and dropped at the end.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로 설정 하면 테스트 시작시 테스트 사용자가 자동으로 작성되지 않고 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="086e529324c77f10019deb2293586e1f5eb037d3" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s &lt;strong&gt;bound&lt;/strong&gt; to a set of data, it&amp;rsquo;s capable of validating that data and rendering the form as HTML with the data displayed in the HTML.</source>
          <target state="translated">데이터 집합에 &lt;strong&gt;바인딩 된&lt;/strong&gt; 경우 해당 데이터의 유효성을 검사하고 HTML에 표시된 데이터를 사용하여 양식을 HTML로 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="762f1bc2f06cdbc47d6d0f309454113e33598057" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s &lt;strong&gt;unbound&lt;/strong&gt;, it cannot do validation (because there&amp;rsquo;s no data to validate!), but it can still render the blank form as HTML.</source>
          <target state="translated">&lt;strong&gt;바인딩되지 않은&lt;/strong&gt; 경우 유효성을 검사 할 데이터가 없기 때문에 유효성 검사를 수행 할 수 없지만 빈 양식을 HTML로 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7234acef7c65e2c9323271fc3c9d4ad9eb4b1e7c" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should return the absolute path for a given object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">메서드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한대로 지정된 객체의 절대 경로를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="143031e8953811a9c3a88c79798b24e0a425cc95" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s change frequency as a string.</source>
          <target state="translated">메소드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 리턴 한 오브젝트 인 하나의 인수를 사용하여 해당 오브젝트의 변경 빈도를 문자열로 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="7bff00a78b519ed7c413fef5001b2e654dfd2b69" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s last-modified date/time as a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">메소드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 리턴 한 오브젝트 인 하나의 인수를 취하여 해당 오브젝트의 마지막 수정 날짜 / 시간을 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 으로 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="32fb347ef452af06b7d9684d9471b5bc24024f2b" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s priority as either a string or float.</source>
          <target state="translated">메소드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 오브젝트 인 하나의 인수를 취하여 해당 오브젝트의 우선 순위를 문자열 또는 float로 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="15ba45a5043f7358b844c8ea9113c7ba3ec3b8db" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an application configuration class, Django imports the root package of the application, defined by its &lt;a href=&quot;#django.apps.AppConfig.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; attribute. If it&amp;rsquo;s a Python package, Django creates a default application configuration.</source>
          <target state="translated">애플리케이션 구성 클래스 인 경우 Django는 &lt;a href=&quot;#django.apps.AppConfig.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 속성으로 정의 된 애플리케이션의 루트 패키지를 가져옵니다 . Python 패키지 인 경우 Django는 기본 응용 프로그램 구성을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="739a813bcb6932652d7c4c0f099220e51e22f92e" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; representing the last-modified date/time for &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 해당 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 의 마지막 수정 날짜 / 시간을 나타내는 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 이어야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15ad29af32202e8f80e7637ce9fea9eb2c04bb2b" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a string representing an absolute path to use for &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 해당 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 에 사용할 절대 경로를 나타내는 문자열이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="1ddf41b0a9d07a449a358d682fe7947578779914" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a string representing the change frequency of &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 의 변경 빈도를 나타내는 문자열이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="7ee4f35fc601d54876905bd051b2469f621200e6" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be either a string or float representing the priority of &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 의 우선 순위를 나타내는 문자열 또는 float이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="45346a65597fa89f0720e560f69fecf7ee17793a" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s defined, it&amp;rsquo;s the dotted path to the &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass for that application.</source>
          <target state="translated">정의 된 경우 해당 애플리케이션 의 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스에 대한 점선 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="586dfd2621f54a7ad40e50477dfcdfaa75815200" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s your first time doing an upgrade, it is useful to read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/&quot;&gt;guide on the different release processes&lt;/a&gt;.</source>
          <target state="translated">처음으로 업그레이드를 수행하는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/&quot;&gt;경우 다른 릴리스 프로세스에 대한 안내서&lt;/a&gt; 를 읽는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e13b8f81222ab1aac3ae1278eea9ad8e5f0607b1" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s your first time doing an upgrade, it is useful to read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/release-process/&quot;&gt;guide on the different release processes&lt;/a&gt;.</source>
          <target state="translated">If it&amp;rsquo;s your first time doing an upgrade, it is useful to read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/release-process/&quot;&gt;guide on the different release processes&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="48ee40c99146090e779f852245b5afb888e00a5e" translate="yes" xml:space="preserve">
          <source>If loading a template fails, the following two exceptions, defined in &lt;code&gt;django.template&lt;/code&gt;, may be raised:</source>
          <target state="translated">템플리트로드에 실패하면 &lt;code&gt;django.template&lt;/code&gt; 에 정의 된 다음 두 가지 예외 가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4d46c7886d2254cf93d3e3fcccd7a0f4bcf2dcc" translate="yes" xml:space="preserve">
          <source>If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the &lt;a href=&quot;#std:templatetag-language&quot;&gt;&lt;code&gt;language&lt;/code&gt;&lt;/a&gt; template tag. It enables the given language in the enclosed template section:</source>
          <target state="translated">현지화 된 URL이 템플릿에서 반대로 바뀌면 항상 현재 언어를 사용합니다. 다른 언어로 된 URL에 연결하려면 &lt;a href=&quot;#std:templatetag-language&quot;&gt; &lt;code&gt;language&lt;/code&gt; &lt;/a&gt; 템플릿 태그를 사용하십시오 . 동봉 된 템플릿 섹션에서 지정된 언어를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="5b07bb0f1712469af9863f3a275491ca48434fc9" translate="yes" xml:space="preserve">
          <source>If many fields need to be duplicated in the unmanaged model, it may be best to create an abstract model with the shared fields and then have the unmanaged and managed models inherit from the abstract model.</source>
          <target state="translated">관리되지 않는 모델에서 많은 필드를 복제해야하는 경우 공유 필드를 사용하여 추상 모델을 만든 다음 관리되지 않는 모델과 관리되는 모델이 추상 모델에서 상속되도록하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5117892f8f0300c66daa9628a86ea40e1e0c377f" translate="yes" xml:space="preserve">
          <source>If multiple Django sites are run in a single mod_wsgi process, all of them will use the settings of whichever one happens to run first. This can be solved by changing:</source>
          <target state="translated">여러 개의 Django 사이트가 단일 mod_wsgi 프로세스에서 실행되는 경우, 모든 Django 사이트가 먼저 실행되는 설정을 사용합니다. 다음을 변경하여 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fea1c8c9bb79ccbb6aa26063b6ab36dc99df0518" translate="yes" xml:space="preserve">
          <source>If multiple objects are found, &lt;code&gt;get_or_create()&lt;/code&gt; raises &lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt;. If an object is &lt;em&gt;not&lt;/em&gt; found, &lt;code&gt;get_or_create()&lt;/code&gt; will instantiate and save a new object, returning a tuple of the new object and &lt;code&gt;True&lt;/code&gt;. The new object will be created roughly according to this algorithm:</source>
          <target state="translated">여러 개체가 발견되면, &lt;code&gt;get_or_create()&lt;/code&gt; 제기 &lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; 을&lt;/a&gt; . 객체가되면 &lt;em&gt;되지&lt;/em&gt; 발견 &lt;code&gt;get_or_create()&lt;/code&gt; 인스턴스화하고 새 개체와의 튜플 반환, 새로운 객체를 저장할 &lt;code&gt;True&lt;/code&gt; . 이 알고리즘에 따라 새로운 객체가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="1e71877ad6a5d25c689b1f2de0070e7265bd4937" translate="yes" xml:space="preserve">
          <source>If necessary, set &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt;, ensuring that you have understood the warnings there thoroughly. Failure to do this can result in CSRF vulnerabilities, and failure to do it correctly can also be dangerous!</source>
          <target state="translated">필요한 경우 &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; 를&lt;/a&gt; 설정 하여 경고를 철저히 이해 했는지 확인하십시오. 이를 수행하지 않으면 CSRF 취약성이 발생할 수 있으며 올바르게 수행하지 않으면 위험 할 수도 있습니다!</target>
        </trans-unit>
        <trans-unit id="03ba143e9f631d05f6ba22f0590ce7f747ce8328" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;fields&lt;/code&gt; nor &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; options are present, Django will default to displaying each field that isn&amp;rsquo;t an &lt;code&gt;AutoField&lt;/code&gt; and has &lt;code&gt;editable=True&lt;/code&gt;, in a single fieldset, in the same order as the fields are defined in the model.</source>
          <target state="translated">어느 경우 &lt;code&gt;fields&lt;/code&gt; 나 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt; 옵션이 존재, 장고가 아닌 각 필드의 표시로 설정됩니다 &lt;code&gt;AutoField&lt;/code&gt; 하고 있습니다 &lt;code&gt;editable=True&lt;/code&gt; 필드가 모델에 정의 된 것과 같은 순서로, 하나의 필드 셋에.</target>
        </trans-unit>
        <trans-unit id="d162507e2b28cb230355fa270db138b42135ea87" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;fieldsets&lt;/code&gt; nor &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; options are present, Django will default to displaying each field that isn&amp;rsquo;t an &lt;code&gt;AutoField&lt;/code&gt; and has &lt;code&gt;editable=True&lt;/code&gt;, in a single fieldset, in the same order as the fields are defined in the model.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; &lt;code&gt;fieldsets&lt;/code&gt; 이나 필드 옵션이 모두 없으면 Django는 기본적으로 &lt;code&gt;AutoField&lt;/code&gt; 가 아닌 필드에 모델이 정의한 순서대로 단일 필드 집합에서 &lt;code&gt;editable=True&lt;/code&gt; 가 있는 각 필드를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="e9c8ddd198190a9c557ddc6bb9c2aea2a2e1d698" translate="yes" xml:space="preserve">
          <source>If neither of these conditions is met, Django will raise &lt;a href=&quot;exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 조건 중 어느 것도 충족되지 않으면 Django는 &lt;a href=&quot;exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 시킵니다.</target>
        </trans-unit>
        <trans-unit id="22236fab6abdd3c57ac49f8258f85828d58d41a1" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수가 제공 되지 않으면 기본 형식은 &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; 에&lt;/a&gt; 있는 첫 번째 형식 이며 &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화를 따릅니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="69f074f3a84e1657dd8a12d9aa961a2df4985580" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수가 제공 되지 않으면 기본 형식은 &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; 에&lt;/a&gt; 있는 첫 번째 형식 이며 &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 를 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="651012be4ff2b148ba9354acdae062b14fd3c0d9" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수가 제공 되지 않으면 기본 형식은 &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; 에&lt;/a&gt; 있는 첫 번째 형식 이며 &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 를 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="880370f7f114c5c060d3bd42e86cd83d71f53766" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_date_formats&lt;/code&gt; argument is provided, the default input formats for &lt;a href=&quot;#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; are used.</source>
          <target state="translated">&lt;code&gt;input_date_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 의 기본 입력 형식 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5e0a4ac71f22fa55f33f4c53815cc761110373fd" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; and &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; keys if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; , or from the active locale format &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; and &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; keys if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="53192b0b6262194bcbc96fe1b2f7da606c0cca2b" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;False&lt;/code&gt; 이면 &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; 또는 현지화가 사용 가능한 경우 활성 로케일 형식 &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; 키 에서 기본 입력 형식 이 사용됩니다. &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e218ec7444929cf5f907333d683042a1a250dec0" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">어떤 경우 &lt;code&gt;input_formats&lt;/code&gt; 의 인수가 제공되지 않으며, 기본 입력 형식에서 가져옵니다 &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; 경우 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; 은&lt;/a&gt; 이다 &lt;code&gt;False&lt;/code&gt; , 또는 활성 로케일 형식에서 &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; 의 키 현지화가 사용 가능합니다. &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="00ca1bfa89502aeb4be2cb7334f19db2fd371a1f" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;False&lt;/code&gt; 이면 기본 입력 형식이 &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; 또는 현지화가 사용 가능한 경우 활성 로케일 형식 &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; 키 에서 가져옵니다 . &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="deb75c2ac702a4b0a40f6bcf697ba548571a7947" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_time_formats&lt;/code&gt; argument is provided, the default input formats for &lt;a href=&quot;#django.forms.TimeField&quot;&gt;&lt;code&gt;TimeField&lt;/code&gt;&lt;/a&gt; are used.</source>
          <target state="translated">&lt;code&gt;input_time_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;#django.forms.TimeField&quot;&gt; &lt;code&gt;TimeField&lt;/code&gt; &lt;/a&gt; 의 기본 입력 형식 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2eabcd7b412af2312e2abb94cd9bbfac179ea3d" translate="yes" xml:space="preserve">
          <source>If no URL pattern matches, or if an exception is raised during any point in this process, Django invokes an appropriate error-handling view. See &lt;a href=&quot;#error-handling&quot;&gt;Error handling&lt;/a&gt; below.</source>
          <target state="translated">일치하는 URL 패턴이 없거나이 프로세스에서 특정 시점에 예외가 발생하면 Django는 적절한 오류 처리보기를 호출합니다. 아래의 &lt;a href=&quot;#error-handling&quot;&gt;오류 처리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b48d608444a7be435d54c631af2c36c0e71eb05b" translate="yes" xml:space="preserve">
          <source>If no application name is provided, all installed applications will be dumped.</source>
          <target state="translated">애플리케이션 이름이 제공되지 않으면 설치된 모든 애플리케이션이 덤프됩니다.</target>
        </trans-unit>
        <trans-unit id="3be3b978e15bd33854b5175c0738a463b9bbdadd" translate="yes" xml:space="preserve">
          <source>If no exception occurred, then &lt;code&gt;exc_info&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">예외가 발생하지 않으면 &lt;code&gt;exc_info&lt;/code&gt; 는 &lt;code&gt;None&lt;/code&gt; 입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="230449ebf8fd8f983b73d29fe0abb4963a58e26e" translate="yes" xml:space="preserve">
          <source>If no managers are declared on a model and/or its parents, Django automatically creates the &lt;code&gt;objects&lt;/code&gt; manager.</source>
          <target state="translated">모델 및 / 또는 해당 부모에 관리자가 선언되어 있지 않으면 Django는 자동으로 &lt;code&gt;objects&lt;/code&gt; 관리자를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="90268d13885a180cdb68972e2680aa7e5ca9a536" translate="yes" xml:space="preserve">
          <source>If no match can be made, &lt;code&gt;reverse()&lt;/code&gt; raises a &lt;a href=&quot;exceptions#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">일치하는 것이 없으면 &lt;code&gt;reverse()&lt;/code&gt; 는 &lt;a href=&quot;exceptions#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="fd524aa004b3f27870b580c048596af0b132e7e1" translate="yes" xml:space="preserve">
          <source>If no object has been assigned to this relationship, Django will raise a &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">이 관계에 객체가 할당되어 있지 않으면 Django는 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="e5e7bac3ef346bb21109fb7f48b276715fbf7e3b" translate="yes" xml:space="preserve">
          <source>If no password is provided, &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">암호를 제공하지 않으면 &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f2a94519d41f60e01c2bb67dfbc966d83d787abe" translate="yes" xml:space="preserve">
          <source>If no router has an opinion (i.e. all routers return &lt;code&gt;None&lt;/code&gt;), only relations within the same database are allowed.</source>
          <target state="translated">라우터에 의견이없는 경우 (즉, 모든 라우터가 &lt;code&gt;None&lt;/code&gt; 을 반환 하는 경우) 동일한 데이터베이스 내의 관계 만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="8d6ba29a42ab8732ea2bac1f574258bf97584d1c" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this will be used as the base path for &lt;a href=&quot;../topics/forms/media#form-asset-paths&quot;&gt;asset definitions&lt;/a&gt; (the &lt;code&gt;Media&lt;/code&gt; class) and the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles app&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; 이 아닌 경우 &lt;a href=&quot;../topics/forms/media#form-asset-paths&quot;&gt;자산 정의&lt;/a&gt; ( &lt;code&gt;Media&lt;/code&gt; 클래스) 및 &lt;a href=&quot;contrib/staticfiles&quot;&gt;정적 파일 앱&lt;/a&gt; 의 기본 경로로 사용됩니다. .</target>
        </trans-unit>
        <trans-unit id="61421a068661ad515ad52948781a5d81bcd78c50" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this will be used as the value of the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; environment variable in any HTTP request. This setting can be used to override the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt;, which may be a rewritten version of the preferred value or not supplied at all. It is also used by &lt;a href=&quot;applications#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; to set the URL resolver script prefix outside of the request/response cycle (e.g. in management commands and standalone scripts) to generate correct URLs when &lt;code&gt;SCRIPT_NAME&lt;/code&gt; is not &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; 이 아닌 경우 HTTP 요청에서 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 환경 변수 의 값으로 사용됩니다 . 이 설정은 서버에서 제공 한 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 값을 대체하는 데 사용할 수 있습니다.이 값은 선호하는 값을 다시 쓰거나 전혀 제공하지 않을 수 있습니다. 또한 &lt;a href=&quot;applications#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt; 은 요청 / 응답주기 외부 (예 : 관리 명령 및 독립형 스크립트) 외부에서 URL 리졸버 스크립트 접두어를 설정하여 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 이 &lt;code&gt;/&lt;/code&gt; 가 아닌 경우 올바른 URL을 생성하도록 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="29ae695d6cfe529eb5e8578f78625de3958c1363" translate="yes" xml:space="preserve">
          <source>If not provided, the &amp;lsquo;/&amp;rsquo; character is assumed safe. An empty string can be provided when &lt;em&gt;all&lt;/em&gt; characters should be escaped. For example:</source>
          <target state="translated">제공되지 않으면 '/'문자는 안전하다고 간주됩니다. 빈 문자열을 제공 할 수있을 때 &lt;em&gt;모든&lt;/em&gt; 문자를 이스케이프해야하는 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="048ec96d38efe8c12dfb083658d8404651c7e75b" translate="yes" xml:space="preserve">
          <source>If not set, the return value of &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; will be used. In this case, the behavior of &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will be identical to previous Django versions.</source>
          <target state="translated">설정하지 않으면 &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; 의 반환 값 이 사용됩니다. 이 경우 &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 의 동작은 이전 Django 버전과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0bcd2319885f70c975b7765a16711af57eab9baa" translate="yes" xml:space="preserve">
          <source>If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">기존 모델 필드 중 하나를 목적에 맞게 사용할 수 없거나 덜 일반적인 데이터베이스 열 유형을 활용하려는 경우 고유 한 필드 클래스를 만들 수 있습니다. &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;사용자 정의 모델 필드 작성&lt;/a&gt; 에서 고유 한 필드 작성에 대한 전체 범위를 제공 합니다. .</target>
        </trans-unit>
        <trans-unit id="ec78108394b7b984ffd4c8ac9c00c3ab09c32865" translate="yes" xml:space="preserve">
          <source>If one of the instances is current - say, if we were rendering the detail page in the instance &lt;code&gt;'author-polls'&lt;/code&gt; - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the index page of the &lt;code&gt;'author-polls'&lt;/code&gt; instance; i.e. both of the following will result in &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt;.</source>
          <target state="translated">인스턴스 중 하나가 현재 인 경우-예를 들어 인스턴스 &lt;code&gt;'author-polls'&lt;/code&gt; 에서 세부 사항 페이지를 렌더링하는 경우 - &lt;code&gt;'polls:index'&lt;/code&gt; 는 &lt;code&gt;'author-polls'&lt;/code&gt; 인스턴스 의 색인 페이지로 분석됩니다 . 즉, 다음 두 가지 모두 &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="6a7628010548cc467431f476a0dd2aede2b28e62" translate="yes" xml:space="preserve">
          <source>If one of the layers decides to short-circuit and return a response without ever calling its &lt;code&gt;get_response&lt;/code&gt;, none of the layers of the onion inside that layer (including the view) will see the request or the response. The response will only return through the same layers that the request passed in through.</source>
          <target state="translated">계층 중 하나가 &lt;code&gt;get_response&lt;/code&gt; 를 호출하지 않고 회로를 단락시키고 응답을 반환하기로 결정한 경우 내부의 양파 레이어 (보기 포함)는 요청 또는 응답을 볼 수 없습니다. 응답은 요청이 전달한 것과 동일한 계층을 통해서만 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5f7fc56d57619fe006603eedffe2bc29e42343d8" translate="yes" xml:space="preserve">
          <source>If one of your views receives an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object with &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST parameters&lt;/code&gt;&lt;/a&gt; susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the &lt;code&gt;sensitive_post_parameters&lt;/code&gt; decorator:</source>
          <target state="translated">뷰 중 하나 가 민감한 정보를 포함 할 수있는 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST parameters&lt;/code&gt; &lt;/a&gt; 있는 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 오브젝트를 수신하는 경우 &lt;code&gt;sensitive_post_parameters&lt;/code&gt; 데코레이터를 사용하여 해당 매개 변수의 값이 오류 보고서에 포함되지 않도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6842ad1704a4bfe27e663a65a75745b7e53e8d7" translate="yes" xml:space="preserve">
          <source>If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fcff0878219423167c0e066e172d3008301e3e9b" translate="yes" xml:space="preserve">
          <source>If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is, of course, the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 트랜잭션 내에서 하나의 커밋 기능이 발견되지 않은 예외를 발생 시키면 동일한 트랜잭션에 등록 된 기능이 더 이상 실행되지 않습니다. 물론 이것은 &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 없이 함수를 순차적으로 직접 실행 한 것과 동일한 동작 입니다.</target>
        </trans-unit>
        <trans-unit id="9c159979e36f022ea0dfa4ec34adbe09e0fd50d6" translate="yes" xml:space="preserve">
          <source>If only one key or index is used, the SQL operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is used. If multiple operators are used then the &lt;code&gt;#&amp;gt;&lt;/code&gt; operator is used.</source>
          <target state="translated">하나의 키 또는 인덱스 만 사용되면 SQL 연산자 &lt;code&gt;-&amp;gt;&lt;/code&gt; 가 사용됩니다. 여러 연산자가 사용되면 &lt;code&gt;#&amp;gt;&lt;/code&gt; 연산자가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="099c20d00ec2098bbaf3e804c844660386fd2250" translate="yes" xml:space="preserve">
          <source>If only the &lt;code&gt;expected_exception&lt;/code&gt; and &lt;code&gt;expected_message&lt;/code&gt; parameters are given, returns a context manager so that the code being tested can be written inline rather than as a function:</source>
          <target state="translated">경우에만 &lt;code&gt;expected_exception&lt;/code&gt; 및 &lt;code&gt;expected_message&lt;/code&gt; 매개 변수가 주어진 코드는 함수보다는 인라인 쓸 수있는 테스트 할 수 있도록 상황에 맞는 매니저를 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="35d8f324adb880bcc55735740ccdb17428c2eda0" translate="yes" xml:space="preserve">
          <source>If only the project name is given, both the project directory and project package will be named &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; and the project directory will be created in the current working directory.</source>
          <target state="translated">프로젝트 이름 만 지정하면 프로젝트 디렉토리와 프로젝트 패키지의 이름이 &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; 이 되고 프로젝트 디렉토리가 현재 작업 디렉토리에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="d699f3837e773c72f65299756ba17f8a6868e5e3" translate="yes" xml:space="preserve">
          <source>If overriding this method, you must call &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">If overriding this method, you must call &lt;code&gt;super()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a92c12dfd56bfbe7079f0230ba9f2be3d91cfd1" translate="yes" xml:space="preserve">
          <source>If passed, the array will have a maximum size as specified. This will be passed to the database, although PostgreSQL at present does not enforce the restriction.</source>
          <target state="translated">전달되면 배열은 지정된 최대 크기를 갖습니다. PostgreSQL은 현재 제한을 적용하지 않지만 데이터베이스에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="bbbac6dbe1f627e4d81d10293f0c6b4eac1b8f3e" translate="yes" xml:space="preserve">
          <source>If present for the field subclass, &lt;code&gt;from_db_value()&lt;/code&gt; will be called in all circumstances when the data is loaded from the database, including in aggregates and &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="translated">필드 서브 클래스에 존재하는 경우, 집계 및 &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; 호출을 포함하여 데이터베이스에서 데이터가로드 될 때 모든 상황에서 &lt;code&gt;from_db_value()&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="5d46fb88e8ed76c60d72db1c27bf5a8f7b838cfa" translate="yes" xml:space="preserve">
          <source>If provided, these arguments ensure that the string is at most or at least the given length.</source>
          <target state="translated">제공되는 경우 이러한 인수는 문자열이 주어진 길이 이상인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d4ce7026faaa634fc0b96ac52163aab44216566a" translate="yes" xml:space="preserve">
          <source>If requested by &lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt;&lt;code&gt;query_string&lt;/code&gt;&lt;/a&gt;, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt; &lt;code&gt;query_string&lt;/code&gt; &lt;/a&gt; 에서 요청 하면 생성 된 URL에 쿼리 문자열도 추가됩니다. 메소드가 경로 재 지정 가능 URL 문자열을 리턴하는 한 서브 클래스는 원하는 동작을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="faf19452a1ebae56ddadfb9b942ecd374ffb45ac" translate="yes" xml:space="preserve">
          <source>If resolving one of the block arguments fails, &lt;code&gt;blocktrans&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt;&lt;code&gt;deactivate_all()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">블록 인수 중 하나를 해결하지 못하면 &lt;code&gt;blocktrans&lt;/code&gt; 는 &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt; &lt;code&gt;deactivate_all()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 현재 활성 언어를 일시적으로 비활성화하여 기본 언어로 폴백 합니다.</target>
        </trans-unit>
        <trans-unit id="f03e776f8eb8cc5fcc0396d21e707a58bc675d8b" translate="yes" xml:space="preserve">
          <source>If resolving one of the block arguments fails, &lt;code&gt;blocktranslate&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt;&lt;code&gt;deactivate_all()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">If resolving one of the block arguments fails, &lt;code&gt;blocktranslate&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt; &lt;code&gt;deactivate_all()&lt;/code&gt; &lt;/a&gt; function.</target>
        </trans-unit>
        <trans-unit id="e3b2b458927a860df9d6045447f0d0faf0b56f59" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Django&amp;rsquo;s exception handling of view functions (&lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt;&lt;code&gt;handler500&lt;/code&gt;&lt;/a&gt;, or the debug view if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;) and logging of 500 responses (&lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt;) is skipped and exceptions propagate upwards.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정하면 Django의 예외 처리 기능 ( &lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt; &lt;code&gt;handler500&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 경우 디버그보기 ) 및 500 개의 응답 로깅 ( &lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request)&lt;/a&gt; )을 건너 뛰고 예외가 위쪽으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="1e3988cd635b524ad4c3e4bb0d792a1a3fb38586" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Oracle Managed Files (OMF) tablespaces will be used. &lt;a href=&quot;#std:setting-DATAFILE&quot;&gt;&lt;code&gt;DATAFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt;&lt;code&gt;DATAFILE_TMP&lt;/code&gt;&lt;/a&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정하면 OMF (Oracle Managed Files) 테이블 스페이스가 사용됩니다. &lt;a href=&quot;#std:setting-DATAFILE&quot;&gt; &lt;code&gt;DATAFILE&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt; &lt;code&gt;DATAFILE_TMP&lt;/code&gt; &lt;/a&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="0701521850d9a195a77571e1f1a78268d2492816" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, the path data will be implemented in terms of relative moves. Defaults to &lt;code&gt;False&lt;/code&gt;, meaning that absolute moves are used instead.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 되면 경로 데이터는 상대 이동 측면에서 구현됩니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다 . 즉, 절대 이동이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b3b374206c1d9d7963bc92da925a698f9a26de10" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, this option will create a database column of type geography, rather than geometry. Please refer to the &lt;a href=&quot;#geography-type&quot;&gt;geography type&lt;/a&gt; section below for more details.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 되면이 옵션은 기하학 대신 geography 유형의 데이터베이스 열을 작성합니다. &lt;a href=&quot;#geography-type&quot;&gt;지역 유형을&lt;/a&gt; 참조하십시오 아래 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="27d12549976cfe6d3d621899eab318195533bf4e" translate="yes" xml:space="preserve">
          <source>If set to a non-zero integer value, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">0이 아닌 정수 값으로 설정하면 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt; 는 아직없는 모든 응답에 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; 헤더를 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="a50b195fbd06b17894ee9502ef4702bb971ad749" translate="yes" xml:space="preserve">
          <source>If set with an integer, transactions will occur at every step interval. For example, if &lt;code&gt;step=1000&lt;/code&gt;, a commit would occur after the 1,000th feature, the 2,000th feature etc.</source>
          <target state="translated">정수로 설정하면 모든 단계 간격마다 트랜잭션이 발생합니다. 예를 들어 &lt;code&gt;step=1000&lt;/code&gt; 이면 1,000 번째 기능, 2,000 번째 기능 이후에 커밋이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d8380b522d46fe516758e3f692cac2c3f0d5ddf0" translate="yes" xml:space="preserve">
          <source>If set, information will be printed subsequent to each model save executed on the database.</source>
          <target state="translated">설정하면 데이터베이스에서 실행 된 각 모델 저장 후에 정보가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="c30cf6e77ab684eba085d96ac7acc4917b027312" translate="yes" xml:space="preserve">
          <source>If that command doesn&amp;rsquo;t raise any errors, the installation worked.</source>
          <target state="translated">해당 명령으로 오류가 발생하지 않으면 설치가 제대로 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="f98d28bcb8810cfb8ae43b4092760e1122f40b81" translate="yes" xml:space="preserve">
          <source>If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block), your function will be discarded and never called.</source>
          <target state="translated">가상의 데이터베이스 쓰기가 대신 롤백되는 경우 (일반적으로 처리되지 않은 예외가 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 에서 발생하는 경우 ) 블록 ) 함수는 삭제되고 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e85862c30325f5a99e9a50173133105b8ad0fe04" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; has no spatial reference information associated with it, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">상기 중간 &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt; 그것과 관련된 공간 참조 정보가없는 &lt;code&gt;None&lt;/code&gt; 반환된다.</target>
        </trans-unit>
        <trans-unit id="b51b9193a32e07b19adea10866b60d16f80af212" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">는 IF &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; 가&lt;/a&gt; 이미 렌더링 된 콜백 즉시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="10740bab3147ec45ec0f050fa0c6500025482a05" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute is given, that model class will be used.</source>
          <target state="translated">는 IF &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 속성이 부여되어, 그 모델 클래스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8f5c4ba24e8b583b133b407fb7b8a2c07d70e77c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (as in the default project template), the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command will collect static files into this directory. See the how-to on &lt;a href=&quot;../howto/static-files/index&quot;&gt;managing static files&lt;/a&gt; for more details about usage.</source>
          <target state="translated">는 IF &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles에&lt;/a&gt; 있는 contrib 애플 리케이션 (기본 프로젝트 템플릿으로) 활성화되면, &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령은이 디렉토리에 정적 파일을 수집합니다. 사용법에 대한 자세한 내용은 &lt;a href=&quot;../howto/static-files/index&quot;&gt;정적 파일 관리&lt;/a&gt; 방법을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="934af602cfac6348740d242482f234edb0625730" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (default in new projects) the &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command will be overridden with its own &lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;runserver&lt;/a&gt; command.</source>
          <target state="translated">는 IF &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles에&lt;/a&gt; 있는 contrib 응용 프로그램 (새 프로젝트의 기본값)을 사용하는 &lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 명령은 그 자체로 무시됩니다 &lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;의 runserver&lt;/a&gt; 명령.</target>
        </trans-unit>
        <trans-unit id="8afc9a7ac5ef4d7727722e324647e67d5a1458d6" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; is not required, &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt; will have an empty choice at the top of the list (which is &lt;code&gt;---&lt;/code&gt; by default). You can change the text of this label with the &lt;code&gt;empty_label&lt;/code&gt; attribute. &lt;code&gt;empty_label&lt;/code&gt; can be a &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;tuple&lt;/code&gt;. When a string is used, all select boxes will each have an empty choice with this label. If &lt;code&gt;empty_label&lt;/code&gt; is a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of 3 string elements, the select boxes will have their own custom label. The labels should be in this order &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 필요하지 않습니다, &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt; &lt;code&gt;SelectDateWidget&lt;/code&gt; 은&lt;/a&gt; (이다 목록의 맨 위에 빈 선택해야합니다 &lt;code&gt;---&lt;/code&gt; 기본적으로 참조). &lt;code&gt;empty_label&lt;/code&gt; 속성 을 사용하여이 레이블의 텍스트를 변경할 수 있습니다 . &lt;code&gt;empty_label&lt;/code&gt; 은 &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; 또는 &lt;code&gt;tuple&lt;/code&gt; 일 수 있습니다 . 문자열을 사용하면 모든 선택 상자에이 레이블이있는 빈 선택 항목이 있습니다. 경우 &lt;code&gt;empty_label&lt;/code&gt; 는 A는 &lt;code&gt;list&lt;/code&gt; 나 &lt;code&gt;tuple&lt;/code&gt; 3 개 문자열 요소는 선택 상자는 사용자 정의 레이블을해야합니다. 레이블은이 순서 &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="fa835231e8a9a83481dbf82598e20e9d33a8a3a3" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; setting is set, the referer is compared against it. This setting supports subdomains. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt;. If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt; &lt;/a&gt; 설정이 설정되어 있으면 참조와 비교됩니다. 이 설정은 하위 도메인을 지원합니다. 예를 들어 &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; 은 &lt;code&gt;www.example.com&lt;/code&gt; 및 &lt;code&gt;api.example.com&lt;/code&gt; 의 POST 요청을 허용합니다 . 설정이 설정되지 않은 경우 참조자는 HTTP &lt;code&gt;Host&lt;/code&gt; 헤더 와 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e6b97c7b65c9462ac600fe6db085a62642ec3eea" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; setting is set, the referer is compared against it. You can allow cross-subdomain requests by including a leading dot. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt;. If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</source>
          <target state="translated">If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt; &lt;/a&gt; setting is set, the referer is compared against it. You can allow cross-subdomain requests by including a leading dot. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt; . If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</target>
        </trans-unit>
        <trans-unit id="d84c6d34373dc24879682691c703f3d7f2efc49b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt;&lt;code&gt;SECURE_SSL_HOST&lt;/code&gt;&lt;/a&gt; setting has a value, all redirects will be sent to that host instead of the originally-requested host.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt; &lt;code&gt;SECURE_SSL_HOST&lt;/code&gt; &lt;/a&gt; 설정에 값이 있으면 모든 리디렉션이 원래 요청 된 호스트 대신 해당 호스트로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="5615de50081621591758a391687a80e665e2ccbd" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag is used by a template (or the &lt;code&gt;get_token&lt;/code&gt; function is called some other way), &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will add a cookie and a &lt;code&gt;Vary: Cookie&lt;/code&gt; header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (&lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; goes before all other middleware).</source>
          <target state="translated">는 IF &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플릿 태그가 템플릿에 의해 사용되는 (또는 &lt;code&gt;get_token&lt;/code&gt; 기능은 다른 방법이라고합니다), &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 는 쿠키를 추가 할 것입니다과는 &lt;code&gt;Vary: Cookie&lt;/code&gt; 헤더를 응답에. 이는 미들웨어가 지시에 따라 사용되는 경우 캐시 미들웨어와 잘 작동 함을 의미합니다 ( &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; 는 다른 모든 미들웨어보다 우선 함 ).</target>
        </trans-unit>
        <trans-unit id="26bd8d1320630840541b8d7d651b43b729598b95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; header is not &lt;code&gt;&quot;application/json&quot;&lt;/code&gt;, then a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised when trying to parse the response.</source>
          <target state="translated">경우 &lt;code&gt;Content-Type&lt;/code&gt; 헤더가 아닌 &lt;code&gt;&quot;application/json&quot;&lt;/code&gt; , 다음 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 를가&lt;/a&gt; 응답을 구문 분석 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2acff23ea5a5ddc3c288d900245bf1fb2834f32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Host&lt;/code&gt; header (or &lt;code&gt;X-Forwarded-Host&lt;/code&gt; if &lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt;&lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt;&lt;/a&gt; is enabled) does not match any value in this list, the &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt;&lt;/a&gt; method will raise &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;Host&lt;/code&gt; 헤더 (또는 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 경우 &lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt; &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; 가&lt;/a&gt; 활성화되어)이이 목록의 값과 일치하지 않는의 &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt; &lt;/a&gt; 메소드는 올릴 것이다 &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3c585a191597195f24d023a685c724097e584557" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ManyToManyField&lt;/code&gt; points from and to the same model, the following fields are generated:</source>
          <target state="translated">는 IF &lt;code&gt;ManyToManyField&lt;/code&gt; 의 에서 같은 모델 점, 다음 필드가 생성됩니다 :</target>
        </trans-unit>
        <trans-unit id="7111fc374211946c06667dfde5bc62beeaef76cf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ModelForm&lt;/code&gt; is only going to be used for the admin, the easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use. Alternatively, you can set &lt;code&gt;fields = []&lt;/code&gt; in the &lt;code&gt;Meta&lt;/code&gt; class to satisfy the validation on the &lt;code&gt;ModelForm&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;ModelForm&lt;/code&gt; 는 단지 관리자에 사용되는 것입니다, 가장 쉬운 해결책은 생략에있다 &lt;code&gt;Meta.model&lt;/code&gt; 에 있기 때문에, 속성 &lt;code&gt;ModelAdmin&lt;/code&gt; 가 사용에 대한 올바른 모델을 제공 할 것입니다. 또는 &lt;code&gt;Meta&lt;/code&gt; 클래스 에서 &lt;code&gt;fields = []&lt;/code&gt; 를 설정 하여 &lt;code&gt;ModelForm&lt;/code&gt; 의 유효성 검증을 충족시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94e7c57e585e52b8e93039b8fb19e79e14bdd3e1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RunPython&lt;/code&gt; operation is part of a &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migration&lt;/a&gt;, the operation will only be executed in a transaction if &lt;code&gt;atomic=True&lt;/code&gt; is passed to the &lt;code&gt;RunPython&lt;/code&gt; operation.</source>
          <target state="translated">경우] &lt;code&gt;RunPython&lt;/code&gt; 의 동작은 부분 인 &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;비 원자 이동&lt;/a&gt; 하는 경우, 동작은 트랜잭션 실행한다 &lt;code&gt;atomic=True&lt;/code&gt; 받는 전달 &lt;code&gt;RunPython&lt;/code&gt; 의 동작.</target>
        </trans-unit>
        <trans-unit id="31d01216ada1a5804e326038cd6eae0f674c8905" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;approximate&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics may be computed based on overviews or a subset of image tiles.</source>
          <target state="translated">는 IF &lt;code&gt;approximate&lt;/code&gt; 인수로 설정 &lt;code&gt;True&lt;/code&gt; 통계는 개요 또는 이미지 타일들의 서브 세트에 기초하여 계산 될 수있다.</target>
        </trans-unit>
        <trans-unit id="92d7232ff3bb4953caa004d3cafc9ee9c491c11a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;clear()&lt;/code&gt; method is available, any pre-existing objects will be removed from the &lt;code&gt;entry_set&lt;/code&gt; before all objects in the iterable (in this case, a list) are added to the set. If the &lt;code&gt;clear()&lt;/code&gt; method is &lt;em&gt;not&lt;/em&gt; available, all objects in the iterable will be added without removing any existing elements.</source>
          <target state="translated">는 IF &lt;code&gt;clear()&lt;/code&gt; 메서드를 사용할 수있는 기존 개체가 제거됩니다 &lt;code&gt;entry_set&lt;/code&gt; (이 경우, 목록에있는)에 반복 가능한 모든 객체가 세트에 추가하기 전에. 는 IF &lt;code&gt;clear()&lt;/code&gt; 메소드가 &lt;em&gt;되지&lt;/em&gt; 가능하며, 반복 가능한 모든 객체는 기존의 요소를 제거하지 않고 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="2297ffae582b0075c91fa434df47e635fa35db94" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;count&lt;/code&gt; integer argument is specified, then additionally the number of &lt;code&gt;needle&lt;/code&gt; occurrences will be strictly verified.</source>
          <target state="translated">는 IF &lt;code&gt;count&lt;/code&gt; 정수 인수가 지정의 후 추가 수 &lt;code&gt;needle&lt;/code&gt; 발생은 엄격하게 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="a2e468dac67b430f87f8897eb4897a2b9f527f58" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;disable_existing_loggers&lt;/code&gt; key in the &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; dictConfig is set to &lt;code&gt;True&lt;/code&gt; (which is the &lt;code&gt;dictConfig&lt;/code&gt; default if the key is missing) then all loggers from the default configuration will be disabled. Disabled loggers are not the same as removed; the logger will still exist, but will silently discard anything logged to it, not even propagating entries to a parent logger. Thus you should be very careful using &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt;; it&amp;rsquo;s probably not what you want. Instead, you can set &lt;code&gt;disable_existing_loggers&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and redefine some or all of the default loggers; or you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt; and &lt;a href=&quot;#disabling-logging-configuration&quot;&gt;handle logging config yourself&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; dictConfig 의 &lt;code&gt;disable_existing_loggers&lt;/code&gt; 키 가 &lt;code&gt;True&lt;/code&gt; ( 키가없는 경우 &lt;code&gt;dictConfig&lt;/code&gt; 기본값)로 설정되면 기본 구성의 모든 로거가 사용 불가능합니다. 비활성화 된 로거는 제거 된 것과 다릅니다. 로거는 여전히 존재하지만 항목을 상위 로거로 전파하지 않더라도 로그 된 모든 내용을 자동으로 버립니다. 따라서 &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt; 사용하는 데 매우주의해야합니다 . True ; 아마 당신이 원하는 것이 아닐 것입니다. 대신 &lt;code&gt;disable_existing_loggers&lt;/code&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정 하고 일부 또는 모든 기본 로거를 재정의 할 수 있습니다 . 또는 &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 and로 설정할 수 있습니다 &lt;code&gt;None&lt;/code&gt; 으로&lt;a href=&quot;#disabling-logging-configuration&quot;&gt;로깅 구성을 직접 처리하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="05b08f75ebf13d1d83b41dad6945c5f27a8d81f7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;keepdb&lt;/code&gt; argument is &lt;code&gt;True&lt;/code&gt;, then the connection to the database will be closed, but the database will not be destroyed.</source>
          <target state="translated">는 IF &lt;code&gt;keepdb&lt;/code&gt; 의 인수가 &lt;code&gt;True&lt;/code&gt; 를 , 데이터베이스에 연결이 종료되지만, 데이터베이스가 파괴되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="08a666c5a8da8f429a409a1267d3838029509ea0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;noop&lt;/code&gt; option is present, variable lookup still takes place but the translation is skipped. This is useful when &amp;ldquo;stubbing out&amp;rdquo; content that will require translation in the future:</source>
          <target state="translated">는 IF &lt;code&gt;noop&lt;/code&gt; 옵션이 존재, 변수 조회는 여전히 발생하지만 번역은 생략합니다. 이것은 향후 번역이 필요한 컨텐츠를 &quot;스터브 아웃&quot;할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2ee97327ba18c15399455629ba03a6de34dcb1f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;pk&lt;/code&gt; attribute in the serialized data doesn&amp;rsquo;t exist or is null, a new instance will be saved to the database.</source>
          <target state="translated">는 IF &lt;code&gt;pk&lt;/code&gt; 직렬화 된 데이터의 속성이 존재 또는 null하지 않으며, 새로운 인스턴스는 데이터베이스에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="b2735b2310885870e75d0ff6691c6be8a18b8799" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;raise_exception&lt;/code&gt; parameter is given, the decorator will raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, prompting &lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;the 403 (HTTP Forbidden) view&lt;/a&gt; instead of redirecting to the login page.</source>
          <target state="translated">는 IF &lt;code&gt;raise_exception&lt;/code&gt; 의 매개 변수가 제공되면, 데코레이터 올릴 것이다 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; 을&lt;/a&gt; 자극, &lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;403 (HTTP 금지됨)보기&lt;/a&gt; 대신 로그인 페이지로 리디렉션의를.</target>
        </trans-unit>
        <trans-unit id="8394c12ff09c1a5f8f90c7ba9e59af4e1bad9b1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;refresh&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics will be computed from the data directly, and the cache will be updated with the result.</source>
          <target state="translated">경우 &lt;code&gt;refresh&lt;/code&gt; 인수로 설정 &lt;code&gt;True&lt;/code&gt; , 통계는 직접 데이터로부터 계산되며, 캐시는 결과로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="33693d4d2aaa6f581909a8eddc7f106b165a2f88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;render()&lt;/code&gt; method of your template tag stores the result in a context variable (rather than returning the result in a string), it should take care to call &lt;code&gt;mark_safe()&lt;/code&gt; if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such.</source>
          <target state="translated">템플릿 태그 의 &lt;code&gt;render()&lt;/code&gt; 메소드가 결과를 문자열로 반환하지 않고 컨텍스트 변수에 저장하는 경우 적절한 경우 &lt;code&gt;mark_safe()&lt;/code&gt; 를 호출해야합니다 . 변수가 최종적으로 렌더링 될 때 해당 변수는 당시 자동 이스케이프 설정의 영향을 받으므로 더 이상 이스케이프되지 않아도 안전한 내용을 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2101e6671e6072ad4bba4baf10eea4a340d6815" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;source&lt;/code&gt; command is not available, you can try using a dot instead:</source>
          <target state="translated">경우 &lt;code&gt;source&lt;/code&gt; 명령을 사용할 수 없습니다, 대신 점을 사용하여 시도 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="6fe133ba83ae0e8070bb7d71584bd37302738487" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;values()&lt;/code&gt; clause precedes the &lt;code&gt;annotate()&lt;/code&gt; clause, any annotations will be automatically added to the result set. However, if the &lt;code&gt;values()&lt;/code&gt; clause is applied after the &lt;code&gt;annotate()&lt;/code&gt; clause, you need to explicitly include the aggregate column.</source>
          <target state="translated">상기 중간 &lt;code&gt;values()&lt;/code&gt; 절은 선행 &lt;code&gt;annotate()&lt;/code&gt; 절을 모든 통계 자동 결과 집합에 추가한다. 그러나 &lt;code&gt;values()&lt;/code&gt; 절이 &lt;code&gt;annotate()&lt;/code&gt; 절 뒤에 적용되는 경우 집계 열을 명시 적으로 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="5040996a29b439b21cdb418aa42738cf3b6d145f" translate="yes" xml:space="preserve">
          <source>If the URL accepts arguments, you may pass them in &lt;code&gt;args&lt;/code&gt;. For example:</source>
          <target state="translated">URL이 인수를 허용하면 &lt;code&gt;args&lt;/code&gt; 로 전달할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7e0c98ab05f016b5dde972280549bc4e7e4e4ca7" translate="yes" xml:space="preserve">
          <source>If the URL does not resolve, the function raises a &lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception (a subclass of &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;) .</source>
          <target state="translated">URL이 해결되지 않으면이 함수는 &lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt; 예외 ( &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt; 의 서브 클래스)를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="a05f5f3d9b9ee23fb6009484d0a452e7752eff69" translate="yes" xml:space="preserve">
          <source>If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request:</source>
          <target state="translated">POST로 요청한 URL에 인코딩 된 매개 변수가 포함되어 있으면 request.GET 데이터에서 이러한 매개 변수를 사용할 수 있습니다. 예를 들어, 요청한 경우 :</target>
        </trans-unit>
        <trans-unit id="81e578b176fe7d9a3ae3e7b6b5fa7a60a79d1ac7" translate="yes" xml:space="preserve">
          <source>If the actual state of the database and Django&amp;rsquo;s view of the state get out of sync, this can break the migration framework, even leading to data loss. It&amp;rsquo;s worth exercising caution and checking your database and state operations carefully. You can use &lt;a href=&quot;django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;django-admin#django-admin-dbshell&quot;&gt;&lt;code&gt;dbshell&lt;/code&gt;&lt;/a&gt; to check your database operations. You can use &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;, especially with &lt;a href=&quot;django-admin#cmdoption-makemigrations-dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;, to check your state operations.</source>
          <target state="translated">If the actual state of the database and Django&amp;rsquo;s view of the state get out of sync, this can break the migration framework, even leading to data loss. It&amp;rsquo;s worth exercising caution and checking your database and state operations carefully. You can use &lt;a href=&quot;django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;django-admin#django-admin-dbshell&quot;&gt; &lt;code&gt;dbshell&lt;/code&gt; &lt;/a&gt; to check your database operations. You can use &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;, especially with &lt;a href=&quot;django-admin#cmdoption-makemigrations-dry-run&quot;&gt; &lt;code&gt;--dry-run&lt;/code&gt; &lt;/a&gt;, to check your state operations.</target>
        </trans-unit>
        <trans-unit id="7bfe6092e2dbc4af99eae5987a2b05f2af49e616" translate="yes" xml:space="preserve">
          <source>If the argument passed to &lt;code&gt;floatformat&lt;/code&gt; is negative, it will round a number to that many decimal places &amp;ndash; but only if there&amp;rsquo;s a decimal part to be displayed. For example:</source>
          <target state="translated">&lt;code&gt;floatformat&lt;/code&gt; 에 전달 된 인수 가 음수이면 숫자를 소수점 이하 자릿수로 반올림합니다. 그러나 소수점 이하 자릿수가 표시되는 경우에만 가능합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="37eef821508b28230557eff0648d464c18e05688" translate="yes" xml:space="preserve">
          <source>If the argument was a template variable, our function is passed the current value of the variable, not the variable itself.</source>
          <target state="translated">인수가 템플릿 변수 인 경우 변수 자체가 아니라 변수의 현재 값이 함수에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="0cd46f87317e9cbe83ccd768d1ca1f980a06f428" translate="yes" xml:space="preserve">
          <source>If the built-in &lt;code&gt;Field&lt;/code&gt; classes don&amp;rsquo;t meet your needs, you can create custom &lt;code&gt;Field&lt;/code&gt; classes. To do this, create a subclass of &lt;code&gt;django.forms.Field&lt;/code&gt;. Its only requirements are that it implement a &lt;code&gt;clean()&lt;/code&gt; method and that its &lt;code&gt;__init__()&lt;/code&gt; method accept the core arguments mentioned above (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;widget&lt;/code&gt;, &lt;code&gt;help_text&lt;/code&gt;).</source>
          <target state="translated">내장 &lt;code&gt;Field&lt;/code&gt; 클래스가 요구 사항을 충족하지 않으면 사용자 정의 &lt;code&gt;Field&lt;/code&gt; 클래스를 만들 수 있습니다 . 이렇게하려면 &lt;code&gt;django.forms.Field&lt;/code&gt; 의 서브 클래스를 작성하십시오 . 유일한 요구 사항은 &lt;code&gt;clean()&lt;/code&gt; 메소드를 구현 하고 &lt;code&gt;__init__()&lt;/code&gt; 메소드가 위에서 언급 한 핵심 인수 ( &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;label&lt;/code&gt; , &lt;code&gt;initial&lt;/code&gt; , &lt;code&gt;widget&lt;/code&gt; , &lt;code&gt;help_text&lt;/code&gt; )를 승인해야한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0881e54800250d1cf05f08cf67b32a0f19ebd6b4" translate="yes" xml:space="preserve">
          <source>If the built-in fields don&amp;rsquo;t do the trick, you can try &lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt; (&lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt;), which contains assorted pieces of code that are useful for particular countries and cultures.</source>
          <target state="translated">내장 필드가 트릭을 수행하지 않으면 &lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt; ( &lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt; )를 사용해보십시오 . 여기에는 특정 국가 및 문화에 유용한 여러 가지 코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f55edd29f245a56eb902d9c4815f789400cb13c8" translate="yes" xml:space="preserve">
          <source>If the callback returns a value that is not &lt;code&gt;None&lt;/code&gt;, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)</source>
          <target state="translated">콜백 이 &lt;code&gt;None&lt;/code&gt; 이 아닌 값을 반환 하면 원래 응답 객체 대신 응답으로 사용되며 다음 포스트 렌더링 콜백 등으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="68cb408f8b62b8a0532f41e57994c10be485c369" translate="yes" xml:space="preserve">
          <source>If the computation time for using this method is too expensive, consider using &lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt;&lt;code&gt;Collect&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 방법을 사용하기위한 계산 시간이 너무 &lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt; &lt;code&gt;Collect&lt;/code&gt; &lt;/a&gt; 대신 Collect를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="47b5d1532c2916d14a586f84ef6f39d88cc4cdda" translate="yes" xml:space="preserve">
          <source>If the concept of a &lt;code&gt;default&lt;/code&gt; database doesn&amp;rsquo;t make sense in the context of your project, you need to be careful to always specify the database that you want to use. Django requires that a &lt;code&gt;default&lt;/code&gt; database entry be defined, but the parameters dictionary can be left blank if it will not be used. To do this, you must set up &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; for all of your apps&amp;rsquo; models, including those in any contrib and third-party apps you&amp;rsquo;re using, so that no queries are routed to the default database. The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two non-default databases, with the &lt;code&gt;default&lt;/code&gt; entry intentionally left empty:</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 데이터베이스 의 개념이 프로젝트의 맥락에서 이해되지 않는 경우 항상 사용할 데이터베이스를 지정하도록주의해야합니다. Django는 &lt;code&gt;default&lt;/code&gt; 데이터베이스 항목을 정의해야하지만 매개 변수 사전은 사용하지 않을 경우 비워 둘 수 있습니다. 이렇게하려면 설정해야합니다&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;사용중인 contrib 및 타사 앱 모델을 포함하여 모든 앱 모델에 대해 DATABASE_ROUTERS 를쿼리가 기본 데이터베이스로 라우팅되지 않습니다. 다음은 &lt;code&gt;default&lt;/code&gt; 항목이 의도적으로 비워져있는두 개의 비 기본 데이터베이스를 정의하는 &lt;code&gt;settings.py&lt;/code&gt; 스 니펫예제입니다.</target>
        </trans-unit>
        <trans-unit id="eeb6db1ade98b249e264e62c08a05f0b6e4af339" translate="yes" xml:space="preserve">
          <source>If the content to be serialized contains control characters that are not accepted in the XML 1.0 standard, the serialization will fail with a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception. Read also the W3C&amp;rsquo;s explanation of &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML, XHTML, XML and Control Codes&lt;/a&gt;.</source>
          <target state="translated">직렬화 할 컨텐츠에 XML 1.0 표준에서 허용되지 않는 제어 문자가 포함되어 있으면 직렬화에 실패합니다. &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 예외합니다. W3C의&lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt; HTML, XHTML, XML 및 제어 코드에&lt;/a&gt; 대한 설명도 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="4525ae9d6cf2854a6fcb0608be8b93a3f3c30647" translate="yes" xml:space="preserve">
          <source>If the current time zone raises an exception for datetimes that don&amp;rsquo;t exist or are ambiguous because they fall in a DST transition (the timezones provided by &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; do this), such datetimes will be reported as invalid values.</source>
          <target state="translated">현재 시간대가 존재하지 않거나 모호한 날짜 시간이 DST 전환 ( &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz에서&lt;/a&gt; 제공 한 시간대)에 속하기 때문에 예외가 발생하면 해당 날짜 시간은 유효하지 않은 값으로보고됩니다.</target>
        </trans-unit>
        <trans-unit id="f4e60e6c3027fafd4a1a2f98a5fa17785a3288ae" translate="yes" xml:space="preserve">
          <source>If the custom through table defined by the intermediate model does not enforce uniqueness on the &lt;code&gt;(model1, model2)&lt;/code&gt; pair, allowing multiple values, the &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; call will remove all intermediate model instances:</source>
          <target state="translated">중간 모델에 의해 정의 된 사용자 정의 통과 테이블이 &lt;code&gt;(model1, model2)&lt;/code&gt; 쌍 에 고유성을 적용하지 않고 여러 값을 허용하는 경우 &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt; 호출은 모든 중간 모델 인스턴스를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="60b168a79b98017c44ac1a37fd2d1555ab25d04d" translate="yes" xml:space="preserve">
          <source>If the database backend doesn&amp;rsquo;t support time zones (e.g. SQLite, MySQL, Oracle), Django reads and writes datetimes in local time according to this option if it is set and in UTC if it isn&amp;rsquo;t.</source>
          <target state="translated">If the database backend doesn&amp;rsquo;t support time zones (e.g. SQLite, MySQL, Oracle), Django reads and writes datetimes in local time according to this option if it is set and in UTC if it isn&amp;rsquo;t.</target>
        </trans-unit>
        <trans-unit id="a2ba213c7e47c95e2f4c72c230a8d86ca3174f13" translate="yes" xml:space="preserve">
          <source>If the database backend supports time zones (e.g. PostgreSQL), the &lt;code&gt;TIME_ZONE&lt;/code&gt; option is very rarely needed. It can be changed at any time; the database takes care of converting datetimes to the desired time zone.</source>
          <target state="translated">If the database backend supports time zones (e.g. PostgreSQL), the &lt;code&gt;TIME_ZONE&lt;/code&gt; option is very rarely needed. It can be changed at any time; the database takes care of converting datetimes to the desired time zone.</target>
        </trans-unit>
        <trans-unit id="24e26eeaf3ed6a6240170bc7969a0916fee521c8" translate="yes" xml:space="preserve">
          <source>If the database column name is a Python reserved word (such as &lt;code&gt;'pass'&lt;/code&gt;, &lt;code&gt;'class'&lt;/code&gt; or &lt;code&gt;'for'&lt;/code&gt;), &lt;code&gt;inspectdb&lt;/code&gt; will append &lt;code&gt;'_field'&lt;/code&gt; to the attribute name. For example, if a table has a column &lt;code&gt;'for'&lt;/code&gt;, the generated model will have a field &lt;code&gt;'for_field'&lt;/code&gt;, with the &lt;code&gt;db_column&lt;/code&gt; attribute set to &lt;code&gt;'for'&lt;/code&gt;. &lt;code&gt;inspectdb&lt;/code&gt; will insert the Python comment &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; next to the field.</source>
          <target state="translated">데이터베이스 열 이름이 Python 예약어 인 경우 (예 : &lt;code&gt;'pass'&lt;/code&gt; , &lt;code&gt;'class'&lt;/code&gt; 또는 &lt;code&gt;'for'&lt;/code&gt; ) 인 경우 &lt;code&gt;inspectdb&lt;/code&gt; 는 속성 이름에 &lt;code&gt;'_field'&lt;/code&gt; 를 추가 합니다. 예를 들어, 테이블에 &lt;code&gt;'for'&lt;/code&gt; 열이있는 경우 생성 된 모델 에는 &lt;code&gt;db_column&lt;/code&gt; 속성이 &lt;code&gt;'for'&lt;/code&gt; 로 설정된 &lt;code&gt;'for_field'&lt;/code&gt; 필드가 있습니다 . &lt;code&gt;inspectdb&lt;/code&gt; 는 &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; Python 주석을 삽입합니다 . 필드 옆에.</target>
        </trans-unit>
        <trans-unit id="b433adee0cff9f7e77689b285a176f694c2dfe64" translate="yes" xml:space="preserve">
          <source>If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt;, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required (as South often did).</source>
          <target state="translated">데이터베이스에 &lt;code&gt;supports_combined_alters&lt;/code&gt; 가있는 경우 장고는 가능한 한 단일 데이터베이스 호출로 이들 중 많은 수를 시도하고 수행합니다. 그렇지 않으면 각 변경에 대해 별도의 ALTER 문을 발행하지만 변경이 필요하지 않은 경우 (South에서 자주) ALTER를 발행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db2ceac90336d5ce8d16f9adb539f3c2b5279cfd" translate="yes" xml:space="preserve">
          <source>If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt;, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required.</source>
          <target state="translated">If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt; , Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required.</target>
        </trans-unit>
        <trans-unit id="2b6214efcbb5905b7ba74c2ae487377c68437bf4" translate="yes" xml:space="preserve">
          <source>If the database is responsible for updating the field, the process is more robust: it will only ever update the field based on the value of the field in the database when the &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;update()&lt;/code&gt; is executed, rather than based on its value when the instance was retrieved.</source>
          <target state="translated">데이터베이스가 필드 업데이트를 담당하는 경우 프로세스가 더욱 강력 해집니다. 데이터베이스 가 아닌 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;update()&lt;/code&gt; 가 실행될 때 데이터베이스의 필드 값을 기준으로 필드를 업데이트 합니다. 인스턴스가 검색 될 때 값.</target>
        </trans-unit>
        <trans-unit id="75e620c38af1daa6c954718d3fb54518ed7eaca8" translate="yes" xml:space="preserve">
          <source>If the database supports it, you can specify the start and end points based on values of an expression in the partition. If the &lt;code&gt;released&lt;/code&gt; field of the &lt;code&gt;Movie&lt;/code&gt; model stores the release month of each movies, this &lt;code&gt;ValueRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s peers released between twelve months before and twelve months after the each movie.</source>
          <target state="translated">데이터베이스가이를 지원하는 경우 파티션의 표현식 값을 기반으로 시작점과 끝점을 지정할 수 있습니다. &lt;code&gt;Movie&lt;/code&gt; 의 &lt;code&gt;released&lt;/code&gt; 필드가 모델 각 영화의 출시 월을 저장하는 경우이 &lt;code&gt;ValueRange&lt;/code&gt; 예제는 각 영화에 12 개월 전과 12 개월 사이에 출시 된 영화 동료의 평균 등급을 사용하여 각 영화에 주석을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="de682c7bb318e9e4b8081e3ba95e6e42e73b0668" translate="yes" xml:space="preserve">
          <source>If the default value (&lt;code&gt;None&lt;/code&gt;) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt;.</source>
          <target state="translated">SQLite 데이터베이스 엔진에 기본값 ( &lt;code&gt;None&lt;/code&gt; )이 사용되면 테스트는 메모리 상주 데이터베이스를 사용합니다. 다른 모든 데이터베이스 엔진의 경우 테스트 데이터베이스는 이름을 사용합니다. &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="31d7e870cfce92781ed62069a8d06aed8bd6f166" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.</source>
          <target state="translated">제공된 이메일 주소가 시스템에 존재하지 않거나 사용자가 비활성 상태이거나 비밀번호를 사용할 수없는 경우 사용자는 여전히이보기로 리디렉션되지만 이메일은 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db3ee4ff45ccc9f4fcd4236a06eb867d73a8a85f" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, this view won&amp;rsquo;t send an email, but the user won&amp;rsquo;t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass &lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt;&lt;code&gt;PasswordResetForm&lt;/code&gt;&lt;/a&gt; and use the &lt;code&gt;form_class&lt;/code&gt; attribute.</source>
          <target state="translated">제공된 이메일 주소가 시스템에 존재하지 않으면이보기는 이메일을 보내지 않지만 사용자는 오류 메시지를받지 않습니다. 잠재적 인 공격자에게 정보가 유출되는 것을 방지합니다. 이 경우 오류 메시지를 제공하려는 경우 &lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt; &lt;code&gt;PasswordResetForm&lt;/code&gt; &lt;/a&gt; 을 서브 클래스 화 하고 &lt;code&gt;form_class&lt;/code&gt; 속성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c99e2655adb8e99185dcdfcf065a8bd817fd52d8" translate="yes" xml:space="preserve">
          <source>If the feed format is totally custom, you&amp;rsquo;ll want to subclass &lt;code&gt;SyndicationFeed&lt;/code&gt; and completely replace the &lt;code&gt;write()&lt;/code&gt; and &lt;code&gt;writeString()&lt;/code&gt; methods.</source>
          <target state="translated">피드 형식이 완전히 사용자 정의 인 경우 &lt;code&gt;SyndicationFeed&lt;/code&gt; 를 서브 클래스로 &lt;code&gt;write()&lt;/code&gt; 하고 write () 및 &lt;code&gt;writeString()&lt;/code&gt; 메소드를 완전히 대체해야 합니다.</target>
        </trans-unit>
        <trans-unit id="e7368b6434626ac779365385ae08f94dbbeb6a28" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;BooleanField&lt;/code&gt;, Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon instead of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">필드가 &lt;code&gt;BooleanField&lt;/code&gt; 인 경우 Django는 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 대신 &quot;on&quot;또는 &quot;off&quot;아이콘을 표시합니다. .</target>
        </trans-unit>
        <trans-unit id="93a5e61f0fff2318c8177651d57e9f9df8232f8d" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, Django will display the &lt;code&gt;__str__()&lt;/code&gt; of the related object.</source>
          <target state="translated">필드가 &lt;code&gt;ForeignKey&lt;/code&gt; 인 경우 Django는 관련 객체 의 &lt;code&gt;__str__()&lt;/code&gt; 을 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="187bb90cacedf45099edc0ce8a570d93fd2dd2d0" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, this will also add the foreign key constraint to the column.</source>
          <target state="translated">필드가 &lt;code&gt;ForeignKey&lt;/code&gt; 인 경우 인 경우 외래 키 제약 조건도 열에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="7fc4678d8fbbd49c904395e0d20c16a282bf2e32" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ManyToManyField&lt;/code&gt; without a value for &lt;code&gt;through&lt;/code&gt;, instead of creating a column, it will make a table to represent the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">필드가 &lt;code&gt;ManyToManyField&lt;/code&gt; 값없이 &lt;code&gt;through&lt;/code&gt; 대신 열을 생성, 그 관계를 나타내는 테이블을 만들 것이다. 만약 &lt;code&gt;through&lt;/code&gt; 제공되며,이 조작은 행해지 지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c3e41a9270c1726202619f246ad8066eeba76c80" translate="yes" xml:space="preserve">
          <source>If the field is a ManyToManyField without a value for &lt;code&gt;through&lt;/code&gt;, it will remove the table created to track the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">필드가 &lt;code&gt;through&lt;/code&gt; 값이없는 ManyToManyField 인 경우, 관계를 추적하기 위해 작성된 테이블을 제거합니다. 만약 &lt;code&gt;through&lt;/code&gt; 제공되며,이 조작은 행해지 지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2eb25c25d3d9375ffc539e7ad5b8fd3b1ac65ecc" translate="yes" xml:space="preserve">
          <source>If the fields that you&amp;rsquo;re combining are of different types you&amp;rsquo;ll need to tell Django what kind of field will be returned. Since &lt;code&gt;F()&lt;/code&gt; does not directly support &lt;code&gt;output_field&lt;/code&gt; you will need to wrap the expression with &lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt;&lt;code&gt;ExpressionWrapper&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">결합하는 필드가 다른 유형 인 경우 Django에 어떤 종류의 필드가 반환되는지 알려 주어야합니다. &lt;code&gt;F()&lt;/code&gt; 는 직접 지원하지 않기 때문에 &lt;code&gt;output_field&lt;/code&gt; 당신과 표현을 포장해야합니다 &lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt; &lt;code&gt;ExpressionWrapper&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="920dc62d10b6075521a8826f302508a777dbe1bd" translate="yes" xml:space="preserve">
          <source>If the flatpage has a custom template, it loads that template. Otherwise, it loads the template &lt;code&gt;flatpages/default.html&lt;/code&gt;.</source>
          <target state="translated">플랫 페이지에 사용자 정의 템플리트가 있으면 해당 템플리트를로드합니다. 그렇지 않으면 &lt;code&gt;flatpages/default.html&lt;/code&gt; 템플리트를로드합니다 .</target>
        </trans-unit>
        <trans-unit id="14fdac3e377218b7cc6f1824107094f6dfcc7132" translate="yes" xml:space="preserve">
          <source>If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, the data will be in the &lt;code&gt;value&lt;/code&gt; attribute. If a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, then that HTML will include &lt;code&gt;checked&lt;/code&gt; if appropriate:</source>
          <target state="translated">양식이 데이터에 바인드 된 경우 HTML 출력에 해당 데이터가 적절하게 포함됩니다. 예를 들어 필드가 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 로 표시되는 경우 데이터는 &lt;code&gt;value&lt;/code&gt; 속성에 있습니다. 필드가 &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; 로 표시되면 해당 HTML에 &lt;code&gt;checked&lt;/code&gt; 가 포함됩니다 되면 해당하는 경우 해당 됩니다.</target>
        </trans-unit>
        <trans-unit id="2347bbb524d905c24374a2f0eed006de697e76e6" translate="yes" xml:space="preserve">
          <source>If the form is submitted using a &lt;code&gt;POST&lt;/code&gt; request, the view will once again create a form instance and populate it with data from the request: &lt;code&gt;form =
NameForm(request.POST)&lt;/code&gt; This is called &amp;ldquo;binding data to the form&amp;rdquo; (it is now a &lt;em&gt;bound&lt;/em&gt; form).</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 요청을 사용하여 양식을 제출 하면보기에서 양식 인스턴스를 다시 작성하여 요청의 데이터로 채 웁니다. &lt;code&gt;form = NameForm(request.POST)&lt;/code&gt; 이를&amp;ldquo;양식에 데이터 바인딩&amp;rdquo;이라고합니다 (현재 &lt;em&gt;바운드&lt;/em&gt; 양식).</target>
        </trans-unit>
        <trans-unit id="a9757191fc0fc873cf4bf622fc86ad210c659471" translate="yes" xml:space="preserve">
          <source>If the form object passed to a template has a different name within the context, you can alias it using the &lt;code&gt;with&lt;/code&gt; argument of the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">템플리트에 전달 된 양식 오브젝트가 컨텍스트 내에서 다른 이름을 갖는 경우 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;with&lt;/code&gt; 인수를 사용하여 별명을 지정할 수 있습니다. 태그 .</target>
        </trans-unit>
        <trans-unit id="d04738f31fd24193f9e0dc204f8a74807516e46f" translate="yes" xml:space="preserve">
          <source>If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest &lt;code&gt;published&lt;/code&gt; date for every entry associated with that blog. One way to do this would be:</source>
          <target state="translated">최신 블로그 항목을 표시하는 첫 페이지가 새 블로그 항목을 추가 할 때만 변경되는 경우 마지막 수정 시간을 매우 빠르게 계산할 수 있습니다. 해당 블로그와 관련된 모든 항목에 대해 최신 &lt;code&gt;published&lt;/code&gt; 날짜 가 필요합니다 . 이를 수행하는 한 가지 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a34161a59a4f0d30905cb9967f322b4a368ff736" translate="yes" xml:space="preserve">
          <source>If the given URL is &lt;code&gt;None&lt;/code&gt;, Django will return an &lt;code&gt;HttpResponseGone&lt;/code&gt; (410).</source>
          <target state="translated">주어진 URL이 &lt;code&gt;None&lt;/code&gt; 이면 Django는 &lt;code&gt;HttpResponseGone&lt;/code&gt; (410)을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1a04dcff64887ebdbc5f16a342619a164a3cd7da" translate="yes" xml:space="preserve">
          <source>If the given URL is not found, accessing this attribute will raise a &lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">지정된 URL을 찾을 수 없으면이 속성에 액세스하면 &lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f77d4aed574a50b3060efbb746c1d73ca1c67d9a" translate="yes" xml:space="preserve">
          <source>If the input is a file path, the raster is opened from there. If the input is raw data in a dictionary, the parameters &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;srid&lt;/code&gt; are required. If the input is a bytes object, it will be opened using a GDAL virtual filesystem.</source>
          <target state="translated">입력이 파일 경로이면 래스터가 여기에서 열립니다. 입력이 사전의 원시 데이터 인 경우 매개 변수 &lt;code&gt;width&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; 및 &lt;code&gt;srid&lt;/code&gt; 가 필요합니다. 입력이 bytes 객체 인 경우 GDAL 가상 파일 시스템을 사용하여 열립니다.</target>
        </trans-unit>
        <trans-unit id="00448ece8c00dea5fb14fcecd674a9b61b65198b" translate="yes" xml:space="preserve">
          <source>If the key is an integer, it will be interpreted as an index lookup in an array:</source>
          <target state="translated">키가 정수이면 배열에서 인덱스 조회로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="d8a46612976fac7698199bc967b79f7c4caed3a7" translate="yes" xml:space="preserve">
          <source>If the key is an integer, it will be interpreted as an index transform in an array:</source>
          <target state="translated">If the key is an integer, it will be interpreted as an index transform in an array:</target>
        </trans-unit>
        <trans-unit id="48c43cb455f861107b84dacb63c723b0238df4a6" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; lookup instead.</target>
        </trans-unit>
        <trans-unit id="ac79a02ca9d1e219d3a805f08c37df80bb98035e" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt;&lt;code&gt;jsonfield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">조회하려는 키가 다른 조회 이름과 충돌하는 경우 &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt; &lt;code&gt;jsonfield.contains&lt;/code&gt; &lt;/a&gt; 사용하십시오 . 조회를 대신 .</target>
        </trans-unit>
        <trans-unit id="407cc2b75a43efab538c3808b42253f8c6a41dce" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, you need to use the &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt;&lt;code&gt;hstorefield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">조회하려는 키가 다른 조회 이름과 충돌하는 경우 &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt; &lt;code&gt;hstorefield.contains&lt;/code&gt; &lt;/a&gt; 조회를 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5ebd9152465f3666cabb8bf46cfee56114d51e1f" translate="yes" xml:space="preserve">
          <source>If the locale middleware is active, it provides a fallback language in case the user&amp;rsquo;s preferred language can&amp;rsquo;t be determined or is not supported by the website. It also provides the fallback translation when a translation for a given literal doesn&amp;rsquo;t exist for the user&amp;rsquo;s preferred language.</source>
          <target state="translated">로케일 미들웨어가 활성화 된 경우 사용자 선호 언어를 판별 할 수 없거나 웹 사이트에서 지원하지 않는 경우 대체 언어를 제공합니다. 또한 주어진 리터럴에 대한 번역이 사용자가 선호하는 언어로 존재하지 않는 경우 대체 번역을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b655b28cf85b0e9ab6424f2bae76d62937214d02" translate="yes" xml:space="preserve">
          <source>If the locale middleware isn&amp;rsquo;t in use, it decides which translation is served to all users.</source>
          <target state="translated">로케일 미들웨어를 사용하지 않는 경우 모든 사용자에게 어떤 번역이 제공되는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="8c593d7145885e16ebab0576dd01ea5edc8eb619" translate="yes" xml:space="preserve">
          <source>If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request. For example:</source>
          <target state="translated">위치가 이미 절대 URI 인 경우 변경되지 않습니다. 그렇지 않으면이 요청에서 사용 가능한 서버 변수를 사용하여 절대 URI가 빌드됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d3264db38633da128d75c5eb268e476d4a3b951a" translate="yes" xml:space="preserve">
          <source>If the log record contains a &lt;code&gt;request&lt;/code&gt; attribute, the full details of the request will be included in the email. The email subject will include the phrase &amp;ldquo;internal IP&amp;rdquo; if the client&amp;rsquo;s IP address is in the &lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting; if not, it will include &amp;ldquo;EXTERNAL IP&amp;rdquo;.</source>
          <target state="translated">로그 레코드에 &lt;code&gt;request&lt;/code&gt; 속성이 포함 된 경우 요청 의 전체 세부 사항이 이메일에 포함됩니다. 클라이언트의 IP 주소가 &lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt; 설정 에 있으면 이메일 제목에 &quot;내부 IP&quot;라는 문구가 포함됩니다 . 그렇지 않은 경우&amp;ldquo;외부 IP&amp;rdquo;가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="558c854eeaec5a7ab6be858905f8f23539e7a64a" translate="yes" xml:space="preserve">
          <source>If the log record contains stack trace information, that stack trace will be included in the email.</source>
          <target state="translated">로그 레코드에 스택 추적 정보가 포함되어 있으면 해당 스택 추적이 전자 메일에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8d11f19d1f78b5ab369ba0f054bb8ddefd7d18dc" translate="yes" xml:space="preserve">
          <source>If the matched URL pattern contained no named groups, then the matches from the regular expression are provided as positional arguments.</source>
          <target state="translated">일치하는 URL 패턴에 이름이 지정된 그룹이 없으면 정규식의 일치가 위치 인수로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="f27bc33c579e0ba1b671f20cb2b969680090aa80" translate="yes" xml:space="preserve">
          <source>If the middleware is enabled, the language can be set by creating a cookie with a name of &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; and a value of the language code:</source>
          <target state="translated">미들웨어가 사용 가능한 경우 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt; 이름 및 언어 코드 값으로 쿠키를 작성하여 언어를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f8b3db4161aa1f1d9ef7d96ed438167b2a06057a" translate="yes" xml:space="preserve">
          <source>If the middleware isn&amp;rsquo;t enabled, the active language may be set using &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt;&lt;code&gt;translation.override()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">미들웨어가 활성화되어 있지 않으면 &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt; &lt;code&gt;translation.override()&lt;/code&gt; &lt;/a&gt; 사용하여 활성 언어를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77e0e8d1467be7a2d6e9f0484b05652c14f7c823" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;blank=True&lt;/code&gt;, then &lt;code&gt;required&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; on the form field. Otherwise, &lt;code&gt;required=True&lt;/code&gt;.</source>
          <target state="translated">모델 필드가있는 경우 &lt;code&gt;blank=True&lt;/code&gt; , 다음 &lt;code&gt;required&lt;/code&gt; 설정되어 &lt;code&gt;False&lt;/code&gt; 양식 필드에. 그렇지 않으면 &lt;code&gt;required=True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b6ce905c045e003d848e1a4bfebb8367398b55a5" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;choices&lt;/code&gt; set, then the form field&amp;rsquo;s &lt;code&gt;widget&lt;/code&gt; will be set to &lt;code&gt;Select&lt;/code&gt;, with choices coming from the model field&amp;rsquo;s &lt;code&gt;choices&lt;/code&gt;. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has &lt;code&gt;blank=False&lt;/code&gt; and an explicit &lt;code&gt;default&lt;/code&gt; value (the &lt;code&gt;default&lt;/code&gt; value will be initially selected instead).</source>
          <target state="translated">모델 필드에 &lt;code&gt;choices&lt;/code&gt; 설정되어 있으면 양식 필드의 &lt;code&gt;widget&lt;/code&gt; 이 &lt;code&gt;Select&lt;/code&gt; 으로 설정되며 선택 사항은 모델 필드의 &lt;code&gt;choices&lt;/code&gt; 에서옵니다 . 선택 사항에는 일반적으로 기본적으로 선택된 빈 항목이 포함됩니다. 필드가 필요한 경우 사용자가 선택하도록합니다. 모델 필드에 &lt;code&gt;blank=False&lt;/code&gt; 및 명시적인 &lt;code&gt;default&lt;/code&gt; ( &lt;code&gt;default&lt;/code&gt; 은 대신 기본값 이 선택됨)이있는 경우 선택 항목이 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f96a82c6715c5a715a0e01211ac8adf4e12046a4" translate="yes" xml:space="preserve">
          <source>If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; it does not retrieve and set the primary key attribute, as &lt;code&gt;save()&lt;/code&gt; does, unless the database backend supports it (currently PostgreSQL).</source>
          <target state="translated">모델의 기본 키가 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 인 경우 데이터베이스 백엔드가 지원하지 않는 한 &lt;code&gt;save()&lt;/code&gt; 와 같이 기본 키 속성을 검색하고 설정하지 않습니다 (현재 PostgreSQL).</target>
        </trans-unit>
        <trans-unit id="9d4c86c05a2b9809fc32d1cacacc1d67cbcfb128" translate="yes" xml:space="preserve">
          <source>If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, the primary key attribute can only be retrieved on certain databases (currently PostgreSQL and MariaDB 10.5+). On other databases, it will not be set.</source>
          <target state="translated">If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;, the primary key attribute can only be retrieved on certain databases (currently PostgreSQL and MariaDB 10.5+). On other databases, it will not be set.</target>
        </trans-unit>
        <trans-unit id="b759c75b1b279d612802ffa84e3c983524d1b418" translate="yes" xml:space="preserve">
          <source>If the named fixture has a file extension, only fixtures of that type will be loaded. For example:</source>
          <target state="translated">명명 된 조명기의 파일 확장자가 있으면 해당 유형의 조명기 만로드됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="362d07b2752f99df71674036aec9a530c5efa750" translate="yes" xml:space="preserve">
          <source>If the named key does not exist, &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; will be raised.</source>
          <target state="translated">명명 된 키가 없으면 &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a668f34f8121048f3d4b44ccf50ee64fbbfdbd16" translate="yes" xml:space="preserve">
          <source>If the normal base manager class (&lt;a href=&quot;#django.db.models.Manager&quot;&gt;&lt;code&gt;django.db.models.Manager&lt;/code&gt;&lt;/a&gt;) isn&amp;rsquo;t appropriate for your circumstances, you can tell Django which class to use by setting &lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt;&lt;code&gt;Meta.base_manager_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반적인 기본 관리자 클래스 ( &lt;a href=&quot;#django.db.models.Manager&quot;&gt; &lt;code&gt;django.db.models.Manager&lt;/code&gt; &lt;/a&gt; )가 상황에 맞지 않으면 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt; &lt;code&gt;Meta.base_manager_name&lt;/code&gt; &lt;/a&gt; 을 설정하여 사용할 장을 Django에 알릴 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="826ea8b39c2adb284a994b3ac295d22a4f3c7746" translate="yes" xml:space="preserve">
          <source>If the number of items in the initial data exceeds &lt;code&gt;max_num&lt;/code&gt;, all initial data forms will be displayed regardless of the value of &lt;code&gt;max_num&lt;/code&gt; and no extra forms will be displayed. For example, if &lt;code&gt;extra=3&lt;/code&gt; and &lt;code&gt;max_num=1&lt;/code&gt; and the formset is initialized with two initial items, two forms with the initial data will be displayed.</source>
          <target state="translated">초기 데이터의 항목 수를 초과하면 &lt;code&gt;max_num&lt;/code&gt; 모든 초기 데이터 형태의 값에 관계없이 표시 될 &lt;code&gt;max_num&lt;/code&gt; 더 추가 형태는 표시되지 않는다. 예를 들어 &lt;code&gt;extra=3&lt;/code&gt; 및 &lt;code&gt;max_num=1&lt;/code&gt; 이고 양식 세트가 두 개의 초기 항목으로 초기화 된 경우 초기 데이터가있는 두 개의 양식이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9a54427017bdff00314afd5156803ed55090ab15" translate="yes" xml:space="preserve">
          <source>If the number of items in the input is different from the target pixel block, the &lt;code&gt;shape&lt;/code&gt; parameter must be specified. The shape is a tuple that specifies the width and height of the input data in pixels. The data is then replicated to update the pixel values of the selected block. This is useful to fill an entire band with a single value, for instance.</source>
          <target state="translated">입력의 항목 수가 대상 픽셀 블록과 다른 경우 &lt;code&gt;shape&lt;/code&gt; 매개 변수를 지정해야합니다. 모양은 입력 데이터의 너비와 높이를 픽셀 단위로 지정하는 튜플입니다. 그런 다음 선택한 블록의 픽셀 값을 업데이트하기 위해 데이터가 복제됩니다. 예를 들어 전체 밴드를 단일 값으로 채울 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a6a6749b0e99cb6050db9cf3716874b3e4ced2ec" translate="yes" xml:space="preserve">
          <source>If the object doesn&amp;rsquo;t exist in the cache, &lt;code&gt;cache.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">객체가 캐시에 &lt;code&gt;cache.get()&lt;/code&gt; 은 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="646d736dabdd25c732e89d37d9d4201115c381b3" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute defines a &lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; then Django executes an &lt;code&gt;UPDATE&lt;/code&gt; if it is an existing model instance and primary key is set to a value that exists in the database. Otherwise, Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">객체의 기본 키 속성이 &lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; 을 정의하면 장고 는 기존 모델 인스턴스이고 기본 키가 데이터베이스에 존재하는 값으로 설정된 경우 &lt;code&gt;UPDATE&lt;/code&gt; 를 실행 합니다. 그렇지 않으면 Django는 &lt;code&gt;INSERT&lt;/code&gt; 를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="c671ef226635a52b529ee6c4d9e1022741a8176d" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is &lt;em&gt;not&lt;/em&gt; set or if the &lt;code&gt;UPDATE&lt;/code&gt; didn&amp;rsquo;t update anything (e.g. if primary key is set to a value that doesn&amp;rsquo;t exist in the database), Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">개체의 기본 키 속성이 경우 &lt;em&gt;하지&lt;/em&gt; 설정하거나 경우에 &lt;code&gt;UPDATE&lt;/code&gt; 가 아무것도 업데이트되지 않았습니다 (기본 키가 데이터베이스에 존재하지 않는 값으로 설정 예를 들어 경우), 장고는 실행 &lt;code&gt;INSERT&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="6e28fb5ae884b5520d6c8a7cdb6b70dbd48ca7eb" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is set to a value that evaluates to &lt;code&gt;True&lt;/code&gt; (i.e., a value other than &lt;code&gt;None&lt;/code&gt; or the empty string), Django executes an &lt;code&gt;UPDATE&lt;/code&gt;.</source>
          <target state="translated">객체의 기본 키 속성이 &lt;code&gt;True&lt;/code&gt; 로 평가되는 값 (예 : &lt;code&gt;None&lt;/code&gt; 이외의 값 또는 빈 문자열)으로 설정되면 Django는 &lt;code&gt;UPDATE&lt;/code&gt; 를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="34a7e5104e15b8b6de4d5070431c0318f28a763a" translate="yes" xml:space="preserve">
          <source>If the old &lt;code&gt;number_sold&lt;/code&gt; value retrieved from the database was 10, then the value of 11 will be written back to the database.</source>
          <target state="translated">데이터베이스에서 검색된 이전 &lt;code&gt;number_sold&lt;/code&gt; 값이 10이면 값 11이 데이터베이스에 다시 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="aca412a3a96d6dc532c6fed74ff3abb6bb8b6222" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory as the project directory, and create &lt;code&gt;manage.py&lt;/code&gt; and the project package within it. Use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">선택적 목적지가 제공되면 Django는 기존 디렉토리를 프로젝트 디렉토리로 사용하고 그 안에 &lt;code&gt;manage.py&lt;/code&gt; 및 프로젝트 패키지를 만듭니다 . 사용하다 '.' 현재 작업 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="96bd866396bdc1707e3fb218d60c9174cbfa1187" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">선택적 목적지가 제공되면 Django는 새로운 디렉토리를 생성하지 않고 기존 디렉토리를 사용합니다. 당신이 사용할 수있는 '.' 현재 작업 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d65b4b8040f37069c8c493e01d172fe82c59186d" translate="yes" xml:space="preserve">
          <source>If the page is cacheable, but you still want the permission check to be performed, you can pass a &lt;code&gt;cacheable=True&lt;/code&gt; argument to &lt;code&gt;AdminSite.admin_view()&lt;/code&gt;:</source>
          <target state="translated">페이지가 캐시 가능하지만 여전히 권한 검사를 수행하려는 경우 &lt;code&gt;cacheable=True&lt;/code&gt; 인수를 &lt;code&gt;AdminSite.admin_view()&lt;/code&gt; 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2d63af43bcd959831a177ff5a58c265ebe73ad08" translate="yes" xml:space="preserve">
          <source>If the page isn&amp;rsquo;t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page.</source>
          <target state="translated">페이지가 숫자가 아닌 경우 첫 페이지를 반환합니다. 페이지 번호가 음수이거나 페이지 수보다 크면 마지막 페이지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="449c71074274cb7cb8ca111a6688e519d349913f" translate="yes" xml:space="preserve">
          <source>If the parent has an ordering and you don&amp;rsquo;t want the child to have any natural ordering, you can explicitly disable it:</source>
          <target state="translated">부모에게 명령이 있고 자녀가 자연스러운 순서를 갖기를 원하지 않는 경우 명시 적으로 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e8326d7c2e2af22b7076e60b8fae585d509c641" translate="yes" xml:space="preserve">
          <source>If the paths and converters syntax isn&amp;rsquo;t sufficient for defining your URL patterns, you can also use regular expressions. To do so, use &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;re_path()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경로 및 변환기 구문이 URL 패턴을 정의하기에 충분하지 않은 경우 정규식을 사용할 수도 있습니다. 그렇게하려면 &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;re_path()&lt;/code&gt; &lt;/a&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ba3b655a98f41927c3df59507ec695765575a46" translate="yes" xml:space="preserve">
          <source>If the provided namespace doesn&amp;rsquo;t match an &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; in step 1, Django will attempt a direct lookup of the namespace as an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt;.</source>
          <target state="translated">제공된 네임 스페이스가 1 단계에서 &lt;a href=&quot;#term-application-namespace&quot;&gt;애플리케이션 네임 스페이스&lt;/a&gt; 와 일치하지 않으면 Django는 네임 스페이스를 &lt;a href=&quot;#term-instance-namespace&quot;&gt;인스턴스 네임&lt;/a&gt; 스페이스로 직접 조회하려고 시도 합니다 .</target>
        </trans-unit>
        <trans-unit id="e61e6192fb272635702649e3754a886729bd48dc" translate="yes" xml:space="preserve">
          <source>If the related object is deleted, the &lt;code&gt;content_type&lt;/code&gt; and &lt;code&gt;object_id&lt;/code&gt; fields remain set to their original values and the &lt;code&gt;GenericForeignKey&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">관련 객체가 삭제되면 &lt;code&gt;content_type&lt;/code&gt; 및 &lt;code&gt;object_id&lt;/code&gt; 필드는 원래 값으로 설정된 상태로 유지되고 &lt;code&gt;GenericForeignKey&lt;/code&gt; 는 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ffcc219aa1c4e4ac018419462ed9e9a642409200" translate="yes" xml:space="preserve">
          <source>If the rendered page used multiple templates, then &lt;code&gt;context&lt;/code&gt; will be a list of &lt;code&gt;Context&lt;/code&gt; objects, in the order in which they were rendered.</source>
          <target state="translated">렌더링 된 페이지가 여러 템플리트를 사용한 경우 &lt;code&gt;context&lt;/code&gt; 는 렌더링 된 순서대로 &lt;code&gt;Context&lt;/code&gt; 오브젝트 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="aa69dd5e6ef529351a5374ba7d6e3f33a54a2e85" translate="yes" xml:space="preserve">
          <source>If the request accepts HTML content (based on its &lt;code&gt;Accept&lt;/code&gt; HTTP header), the fallback will always be performed.</source>
          <target state="translated">If the request accepts HTML content (based on its &lt;code&gt;Accept&lt;/code&gt; HTTP header), the fallback will always be performed.</target>
        </trans-unit>
        <trans-unit id="7f10b33a7cd6abc8421d75725477d27d01ae4077" translate="yes" xml:space="preserve">
          <source>If the request doesn&amp;rsquo;t accept HTML, the fallback will be performed only if the &lt;code&gt;next&lt;/code&gt; parameter was set. Otherwise a 204 status code (No Content) will be returned.</source>
          <target state="translated">If the request doesn&amp;rsquo;t accept HTML, the fallback will be performed only if the &lt;code&gt;next&lt;/code&gt; parameter was set. Otherwise a 204 status code (No Content) will be returned.</target>
        </trans-unit>
        <trans-unit id="453aeb3c1ca5c2eb5a8bb6d078fe6dcf9b73c42d" translate="yes" xml:space="preserve">
          <source>If the response has an &lt;code&gt;ETag&lt;/code&gt; header, the ETag is made weak to comply with &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232#section-2.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">응답에 &lt;code&gt;ETag&lt;/code&gt; 헤더 가 있으면 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232 # section-2.1&lt;/strong&gt;&lt;/a&gt; 을 준수하도록 ETag가 약해집니다 .</target>
        </trans-unit>
        <trans-unit id="704a6e7c4c31475b433de2a9afeccf1e10be5b91" translate="yes" xml:space="preserve">
          <source>If the resulting value is callable, it is called with no arguments. The result of the call becomes the template value.</source>
          <target state="translated">결과 값을 호출 할 수 있으면 인수없이 호출됩니다. 호출 결과는 템플릿 값이됩니다.</target>
        </trans-unit>
        <trans-unit id="89fff7515bba7259d533e340af1d28df5122f23c" translate="yes" xml:space="preserve">
          <source>If the server is not running start it like so:</source>
          <target state="translated">서버가 실행되고 있지 않으면 다음과 같이 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="d395fb88fed3efa1c3c52eced6fa03546c8e9385" translate="yes" xml:space="preserve">
          <source>If the signature or value have been altered in any way, a &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; exception will be raised:</source>
          <target state="translated">서명 또는 값이 어떤 식 으로든 변경되면 &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="68d86086636afed31f5e8b83119b391c11676938" translate="yes" xml:space="preserve">
          <source>If the source and target models differ, the following fields are generated:</source>
          <target state="translated">소스 및 대상 모델이 다른 경우 다음 필드가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="633ef4f9d4e293110218b0b09a566215a2bdf55e" translate="yes" xml:space="preserve">
          <source>If the string contains exactly one unnamed placeholder, you can interpolate directly with the &lt;code&gt;number&lt;/code&gt; argument:</source>
          <target state="translated">문자열에 명명되지 않은 자리 표시자가 정확히 하나만 포함되어 있으면 &lt;code&gt;number&lt;/code&gt; 인수로 직접 보간 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77f538b0c255912dbe9364dbf7280961b4996b22" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable that returns True or False Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon if you give the method a &lt;code&gt;boolean&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">주어진 문자열이 모델의 메소드 인 경우, True 또는 False Django를 리턴하는 &lt;code&gt;ModelAdmin&lt;/code&gt; 또는 호출 가능 오브젝트는 &lt;code&gt;boolean&lt;/code&gt; 값이 &lt;code&gt;True&lt;/code&gt; 인 부울 속성 을 제공하면 꽤 &quot;켜짐&quot;또는 &quot;꺼짐&quot;아이콘을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="d24a764d1bded8d74681dd2025af0d5bc9819ce3" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use &lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 문자열이 모델, &lt;code&gt;ModelAdmin&lt;/code&gt; 또는 callable 의 메소드 인 경우 Django는 기본적으로 출력을 HTML 이스케이프합니다. 사용자 입력을 피하고 이스케이프 처리되지 않은 태그를 허용하려면 &lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="105660f9c8d885576c4d75b90c9c72dcdf558e17" translate="yes" xml:space="preserve">
          <source>If the table is very large and your queries mostly target a subset of rows, it may be useful to restrict an index to that subset. Specify a condition as a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; indexes records with more than 400 pages.</source>
          <target state="translated">테이블이 매우 크고 쿼리가 주로 행의 하위 집합을 대상으로하는 경우 인덱스를 해당 하위 집합으로 제한하는 것이 유용 할 수 있습니다. 조건을 &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt; 로 지정하십시오 . 예를 들어 &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; 은 400 페이지가 넘는 레코드를 인덱싱합니다.</target>
        </trans-unit>
        <trans-unit id="daab90a7c3bc9cf977eae52e7797b86c2df0f84b" translate="yes" xml:space="preserve">
          <source>If the template has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">템플릿이 이미 렌더링 된 경우 콜백이 즉시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="335267b2f6f5eff3146781e1f8c7c684e000fea5" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">템플리트가 템플리트 로더를 통하지 않고 직접 인스턴스화되는 경우 이는 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="390b626866eea7efc24acb7e8d97d6da5d385595" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is a string value of &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">템플리트가 템플리트 로더를 통하지 않고 직접 인스턴스화되는 경우 이는 문자열 값 &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f97ee8abfbc218db701614dc037ecbee79227cd2" translate="yes" xml:space="preserve">
          <source>If the tests ran correctly, you should see one failure corresponding to the test method we added, with this error:</source>
          <target state="translated">테스트가 올바르게 실행 된 경우 추가 한 테스트 방법에 해당하는 하나의 오류가 표시되며이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7c48045bec5e6654cb74a0ee34255333da0859d4" translate="yes" xml:space="preserve">
          <source>If the user is logged in, execute the view normally. The view code is free to assume the user is logged in.</source>
          <target state="translated">사용자가 로그인 한 경우보기를 정상적으로 실행하십시오. 보기 코드는 사용자가 로그인 한 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="d79847842ff72b1b58e1003ad0d867e4b7832fce" translate="yes" xml:space="preserve">
          <source>If the user is logged in, is a staff member (&lt;code&gt;User.is_staff=True&lt;/code&gt;), and is active (&lt;code&gt;User.is_active=True&lt;/code&gt;), execute the view normally.</source>
          <target state="translated">사용자가 로그인하고 직원 ( &lt;code&gt;User.is_staff=True&lt;/code&gt; )이고 활성 상태 ( &lt;code&gt;User.is_active=True&lt;/code&gt; ) 인 경우보기를 정상적으로 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a84a442ecadb3f93afb7b132ac6a3edff540cf78" translate="yes" xml:space="preserve">
          <source>If the user isn&amp;rsquo;t logged in, redirect to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt;, passing the current absolute path in the query string. Example: &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt;.</source>
          <target state="translated">사용자가 로그인하지 않은 경우 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; 로&lt;/a&gt; 리디렉션 하여 쿼리 문자열의 현재 절대 경로를 전달하십시오. 예 : &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1dae3ed09b6ca9b76e7ec5b0d3c3054584ffd95a" translate="yes" xml:space="preserve">
          <source>If the value of &amp;ldquo;Date published&amp;rdquo; doesn&amp;rsquo;t match the time when you created the question in &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, it probably means you forgot to set the correct value for the &lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting. Change it, reload the page and check that the correct value appears.</source>
          <target state="translated">&quot;Date publish&quot;값이 &lt;a href=&quot;tutorial01&quot;&gt;학습서 1&lt;/a&gt; 에서 질문을 작성한 시간과 일치하지 않으면 &lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; 설정에 올바른 값을 설정하지 않은 것입니다. 변경하고 페이지를 다시로드 한 후 올바른 값이 나타나는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="6ec7d3427ae03d948878d8a5e1e5725c95509eed" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing items in the initial data, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;. For example, if &lt;code&gt;extra=2&lt;/code&gt; and &lt;code&gt;max_num=2&lt;/code&gt; and the formset is initialized with one &lt;code&gt;initial&lt;/code&gt; item, a form for the initial item and one blank form will be displayed.</source>
          <target state="translated">의 값 경우 &lt;code&gt;max_num&lt;/code&gt; 에 초기 데이터에서 기존 항목의 수까지보다 더 큰 &lt;code&gt;extra&lt;/code&gt; 의 formset에 추가됩니다 추가 빈 양식, 너무 오래 같은 초과하지 않는 형태의 총 수 &lt;code&gt;max_num&lt;/code&gt; . 예를 들어 &lt;code&gt;extra=2&lt;/code&gt; 및 &lt;code&gt;max_num=2&lt;/code&gt; 이고 양식 세트 가 하나의 &lt;code&gt;initial&lt;/code&gt; 항목으로 초기화되면 초기 항목에 대한 양식과 하나의 빈 양식이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1e45aed9df9aac2846d0bcfef80483bef9bd6ac8" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing related objects, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;:</source>
          <target state="translated">의 값 경우 &lt;code&gt;max_num&lt;/code&gt; 최대 기존의 관련 개체의 수보다 큰 경우 &lt;code&gt;extra&lt;/code&gt; 추가 빈 양식의 해당 formset에 추가됩니다 너무 오래 형태의 총 수를 초과하지 않는 &lt;code&gt;max_num&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dda283897bebb404083b05a40ab1c2c6cb7b8001" translate="yes" xml:space="preserve">
          <source>If the value of a field is &lt;code&gt;None&lt;/code&gt;, an empty string, or an iterable without elements, Django will display &lt;code&gt;-&lt;/code&gt; (a dash). You can override this with &lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt;&lt;code&gt;AdminSite.empty_value_display&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">필드 값이 &lt;code&gt;None&lt;/code&gt; , 빈 문자열 또는 요소가없는 iterable 인 경우 Django는 &lt;code&gt;-&lt;/code&gt; (대시)를 표시합니다. &lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt; &lt;code&gt;AdminSite.empty_value_display&lt;/code&gt; &lt;/a&gt; 로이를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a6040be557d2f8f3ea8136a3c4eb78cc78f35eb" translate="yes" xml:space="preserve">
          <source>If the value of a parameter is &lt;code&gt;True&lt;/code&gt; (exactly &lt;code&gt;True&lt;/code&gt;, not just a true value), only the parameter name is added to the header.</source>
          <target state="translated">매개 변수의 값이 &lt;code&gt;True&lt;/code&gt; 이면 (정확한 값이 아니라 정확하게 &lt;code&gt;True&lt;/code&gt; ) 매개 변수 이름 만 헤더에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="5382b4646a0aea7fd71c163665e2667aa6200bdb" translate="yes" xml:space="preserve">
          <source>If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute &lt;code&gt;silent_variable_failure&lt;/code&gt; whose value is &lt;code&gt;True&lt;/code&gt;. If the exception &lt;em&gt;does&lt;/em&gt; have a &lt;code&gt;silent_variable_failure&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;, the variable will render as the value of the engine&amp;rsquo;s &lt;code&gt;string_if_invalid&lt;/code&gt; configuration option (an empty string, by default). Example:</source>
          <target state="translated">호출 할 때 변수에서 예외가 발생하면 예외에 값이 &lt;code&gt;True&lt;/code&gt; 인 &lt;code&gt;silent_variable_failure&lt;/code&gt; 속성이없는 경우 예외가 전파됩니다 . 예외가 있다면 &lt;em&gt;않습니다&lt;/em&gt; 이 &lt;code&gt;silent_variable_failure&lt;/code&gt; 의 그 값 속성 &lt;code&gt;True&lt;/code&gt; , 변수는 엔진의 값으로 렌더링 &lt;code&gt;string_if_invalid&lt;/code&gt; 구성 옵션 (기본적으로 빈 문자열). 예:&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1312957734ba11c680e8012938eacebc58dee1ff" translate="yes" xml:space="preserve">
          <source>If the variable you want to hide is also a function argument (e.g. &amp;lsquo;&lt;code&gt;user&lt;/code&gt;&amp;rsquo; in the following example), and if the decorated function has multiple decorators, then make sure to place &lt;code&gt;@sensitive_variables&lt;/code&gt; at the top of the decorator chain. This way it will also hide the function argument as it gets passed through the other decorators:</source>
          <target state="translated">숨길 변수가 함수 인수이기도 한 경우 (예 : 다음 예에서 ' &lt;code&gt;user&lt;/code&gt; ') 데코 레이팅 된 함수에 여러 데코레이터 가있는 경우 데코레이터 체인의 맨 위에 &lt;code&gt;@sensitive_variables&lt;/code&gt; 를 배치해야합니다 . 이렇게하면 다른 데코레이터를 통해 전달 될 때 함수 인수도 숨겨집니다.</target>
        </trans-unit>
        <trans-unit id="d4cc6c88236085ea8a9c1a17ca851862c50d53fd" translate="yes" xml:space="preserve">
          <source>If the view is accessed from a &lt;code&gt;GET&lt;/code&gt; request, an object list is returned in the response (using the &lt;code&gt;book_list.html&lt;/code&gt; template). But if the client issues a &lt;code&gt;HEAD&lt;/code&gt; request, the response has an empty body and the &lt;code&gt;Last-Modified&lt;/code&gt; header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 요청 에서보기에 액세스 하면 &lt;code&gt;book_list.html&lt;/code&gt; 템플리트를 사용하여 응답에 오브젝트 목록이 리턴됩니다 . 그러나 클라이언트가 &lt;code&gt;HEAD&lt;/code&gt; 요청을 발행 하면 응답에 빈 본문이 있으며 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더는 가장 최근의 책이 출판 된시기를 나타냅니다. 이 정보를 기반으로 클라이언트는 전체 개체 목록을 다운로드하거나 다운로드하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="525749ea81e916d0079819f9669b95d8583c62ff" translate="yes" xml:space="preserve">
          <source>If the view was called with a HTTP method it doesn&amp;rsquo;t support, this method is called instead.</source>
          <target state="translated">보기가 HTTP 메소드를 사용하여 호출 된 경우이를 지원하지 않고 대신이 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fe60eb379813b7555e5b0588046322369833bdf6" translate="yes" xml:space="preserve">
          <source>If there are a few pages on your site that should be available over HTTP, and not redirected to HTTPS, you can list regular expressions to match those URLs in the &lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">사이트를 통해 HTTP를 통해 사용할 수 있고 HTTPS로 리디렉션되지 않아야하는 몇 페이지가있는 경우 &lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; &lt;/a&gt; 설정 에서 해당 URL과 일치하는 정규식을 나열 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a06f663d9a920b6dd71a5fd7a5b30d2f53179a52" translate="yes" xml:space="preserve">
          <source>If there are a large number of pizzas, this queryset performs better than:</source>
          <target state="translated">피자가 많은 경우이 쿼리 셋은 다음보다 성능이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="58361dc72d9b28ac6f97a44739dee9fe240ef3e8" translate="yes" xml:space="preserve">
          <source>If there are any circular dependencies in the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; definition, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt; 정의 에 순환 종속성이 있으면 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c15c84390ee375a9adefe2ee02e23a4311d73646" translate="yes" xml:space="preserve">
          <source>If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end:</source>
          <target state="translated">이 지오메트리 내에 닫히지 않은 링이 있으면 시작점을 끝에 추가하여이 루틴을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="036865303d893103f1a82fb50cc8915eb290e5a5" translate="yes" xml:space="preserve">
          <source>If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt;&lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt;&lt;/a&gt; to display a user friendly description of the problem in the response.</source>
          <target state="translated">조치를 실행하는 동안 발생할 수있는 예측 가능한 오류 조건이있는 경우 사용자에게 정상적으로 문제점을 알려야합니다. 이는 예외를 처리하고 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt; &lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 응답에서 문제점에 대한 사용자 친화적 인 설명을 표시 함을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="951293bc34387f5cb268cf92d7536a2c32d0ad81" translate="yes" xml:space="preserve">
          <source>If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found.</source>
          <target state="translated">중첩 된 네임 스페이스가있는 경우 뷰 이름 만 확인할 때까지 네임 스페이스의 각 부분에 대해이 단계가 반복됩니다. 그러면 뷰 이름이 찾은 네임 스페이스의 URL로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="018686731469965487e7387f2655be540539d013" translate="yes" xml:space="preserve">
          <source>If there are test failures, however, you&amp;rsquo;ll see full details about which tests failed:</source>
          <target state="translated">그러나 테스트 실패가 발생한 경우 실패한 테스트에 대한 자세한 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="33090b22c578cdbfc10a5466d23820158dc57c7e" translate="yes" xml:space="preserve">
          <source>If there is a current application defined, Django finds and returns the URL resolver for that instance. The current application can be specified with the &lt;code&gt;current_app&lt;/code&gt; argument to the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">현재 응용 프로그램이 정의되어 있으면 Django는 해당 인스턴스의 URL 확인자를 찾아 반환합니다. &lt;code&gt;current_app&lt;/code&gt; 인수를 사용하여 &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 함수에 현재 응용 프로그램을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cad92f90be1997903d0e603c48aaadf781898139" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;default_app_config&lt;/code&gt;, Django uses the base &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;default_app_config&lt;/code&gt; 가 없으면 Django는 기본 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 클래스를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="b29aa4916d0907d63149e49df881a7730b345911" translate="yes" xml:space="preserve">
          <source>If there is no current application, Django looks for a default application instance. The default application instance is the instance that has an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt; matching the &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, an instance of &lt;code&gt;polls&lt;/code&gt; called &lt;code&gt;'polls'&lt;/code&gt;).</source>
          <target state="translated">현재 애플리케이션이 없으면 Django는 기본 애플리케이션 인스턴스를 찾습니다. 기본 애플리케이션 인스턴스는 &lt;a href=&quot;#term-application-namespace&quot;&gt;애플리케이션 네임 &lt;/a&gt;&lt;a href=&quot;#term-instance-namespace&quot;&gt;스페이스와&lt;/a&gt; 일치 하는 인스턴스 네임 스페이스 가있는 인스턴스입니다 (이 예제에서는 &lt;code&gt;'polls'&lt;/code&gt; 라는 &lt;code&gt;polls&lt;/code&gt; 인스턴스 ).</target>
        </trans-unit>
        <trans-unit id="3196de7f2aa2fe23e2168314d2dfd5664d611802" translate="yes" xml:space="preserve">
          <source>If there is no current instance - say, if we were rendering a page somewhere else on the site - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the last registered instance of &lt;code&gt;polls&lt;/code&gt;. Since there is no default instance (instance namespace of &lt;code&gt;'polls'&lt;/code&gt;), the last instance of &lt;code&gt;polls&lt;/code&gt; that is registered will be used. This would be &lt;code&gt;'publisher-polls'&lt;/code&gt; since it&amp;rsquo;s declared last in the &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">현재 인스턴스가없는 경우, 예를 들어 사이트의 다른 곳에서 페이지를 렌더링하는 경우 &lt;code&gt;'polls:index'&lt;/code&gt; 는 마지막으로 등록 된 &lt;code&gt;polls&lt;/code&gt; 인스턴스로 해석됩니다 . 기본 인스턴스 (인스턴스 네임 스페이스 &lt;code&gt;'polls'&lt;/code&gt; ) 가 없으므로 등록 된 마지막 &lt;code&gt;polls&lt;/code&gt; 인스턴스 가 사용됩니다. 이것은 &lt;code&gt;urlpatterns&lt;/code&gt; 에서 마지막으로 선언 되었으므로 &lt;code&gt;'publisher-polls'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="756f0b4c6a33908e3c22386f366fc70b18420a5b" translate="yes" xml:space="preserve">
          <source>If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be.</source>
          <target state="translated">기본 애플리케이션 인스턴스가 없으면 Django는 인스턴스 이름에 관계없이 마지막으로 배포 된 애플리케이션 인스턴스를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="a6bc41190ec33fed228db9ca9e2271ec22fd151d" translate="yes" xml:space="preserve">
          <source>If there is no headerlist stored, the page needs to be rebuilt, so this function returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">저장된 헤더 목록이 없으면 페이지를 다시 작성해야하므로이 함수는 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b205d7e5d58e03b8f42ec69b13b892b65de8d30c" translate="yes" xml:space="preserve">
          <source>If there were also a default instance - i.e., an instance named &lt;code&gt;'polls'&lt;/code&gt; - the only change from above would be in the case where there is no current instance (the second item in the list above). In this case &lt;code&gt;'polls:index'&lt;/code&gt; would resolve to the index page of the default instance instead of the instance declared last in &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">기본 인스턴스 (예 : &lt;code&gt;'polls'&lt;/code&gt; 라는 인스턴스) 가있는 경우 현재 인스턴스가없는 경우 (위의 목록에서 두 번째 항목) 위에서 변경 될 수 있습니다. 이 경우 &lt;code&gt;'polls:index'&lt;/code&gt; 는 &lt;code&gt;urlpatterns&lt;/code&gt; 에서 last로 선언 된 인스턴스 대신 기본 인스턴스의 색인 페이지로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="1bc101bd73deeb1cf516281ef037ef748d979a37" translate="yes" xml:space="preserve">
          <source>If these aren&amp;rsquo;t enough to generate the SQL you need:</source>
          <target state="translated">이것으로 SQL을 생성하기에 충분하지 않으면 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5e71fd6c24627701d76d95f4ee851ac2352deca4" translate="yes" xml:space="preserve">
          <source>If these parameters already have the correct values, Django won&amp;rsquo;t set them for every new connection, which improves performance slightly. You can configure them directly in &lt;code&gt;postgresql.conf&lt;/code&gt; or more conveniently per database user with &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLE&lt;/a&gt;.</source>
          <target state="translated">이 파라미터들이 이미 올바른 값을 가지고 있다면 Django는 모든 새로운 연결에 대해 이들을 설정하지 않으므로 성능이 약간 향상됩니다. &lt;code&gt;postgresql.conf&lt;/code&gt; 에서 직접 구성 하거나 &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLE을&lt;/a&gt; 사용하여 데이터베이스 사용자별로 더 편리하게 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d05d3185d1dac94d8dadaa8fa6fec4ba26f14ae" translate="yes" xml:space="preserve">
          <source>If this app&amp;rsquo;s URLconf is included into the project&amp;rsquo;s URLconf under a path such as this:</source>
          <target state="translated">이 앱의 URLconf가 다음과 같은 경로로 프로젝트의 URLconf에 포함 된 경우 :</target>
        </trans-unit>
        <trans-unit id="db3b489bf675bc83e9e833fb2c11bf0ec0e3584a" translate="yes" xml:space="preserve">
          <source>If this approach becomes too slow, you can add a &lt;code&gt;SearchVectorField&lt;/code&gt; to your model. You&amp;rsquo;ll need to keep it populated with triggers, for example, as described in the &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQL documentation&lt;/a&gt;. You can then query the field as if it were an annotated &lt;code&gt;SearchVector&lt;/code&gt;:</source>
          <target state="translated">이 접근 방식이 너무 느리면 &lt;code&gt;SearchVectorField&lt;/code&gt; 를 모델에 추가 할 수 있습니다 . 예를 들어 &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQL 설명서에&lt;/a&gt; 설명 된대로 트리거로 채워져 있어야합니다 . 그런 다음 주석이 달린 &lt;code&gt;SearchVector&lt;/code&gt; 인 것처럼 필드를 쿼리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0a2e48175c412228e4e7ff2cbf177425c036e1a" translate="yes" xml:space="preserve">
          <source>If this attribute is set to &lt;code&gt;True&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception is raised when the conditions are not met. When &lt;code&gt;False&lt;/code&gt; (the default), anonymous users are redirected to the login page.</source>
          <target state="translated">이 속성이 설정되어있는 경우 &lt;code&gt;True&lt;/code&gt; 를 하는 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt; 조건이 충족되지 않을 때 예외가 발생합니다. 때 &lt;code&gt;False&lt;/code&gt; (기본), 익명 사용자는 로그인 페이지로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="ea6a57da3a6226d105def8abb17cde5efd3edbc8" translate="yes" xml:space="preserve">
          <source>If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the &lt;code&gt;dispatch_uid&lt;/code&gt; argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique &lt;code&gt;dispatch_uid&lt;/code&gt; value:</source>
          <target state="translated">이 동작에 문제가있는 경우 (예 : 신호를 사용하여 모델을 저장할 때마다 이메일을 보내는 경우) &lt;code&gt;dispatch_uid&lt;/code&gt; 인수 로 고유 식별자를 전달 하여 수신자 기능을 식별하십시오. 이 식별자는 일반적으로 문자열이지만 해시 가능한 객체이면 충분합니다. 결과적으로 수신기 함수는 각 독특한 &lt;code&gt;dispatch_uid&lt;/code&gt; 값 에 대해 한 번만 신호에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="168754e6d80f99f11f4410d20c99b6a0e1c4fca4" translate="yes" xml:space="preserve">
          <source>If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command.</source>
          <target state="translated">명령 행 콘솔에서 관리 명령을 실행하는 동안이 예외가 발생하면 해당 출력 스트림 (예 : stderr)에 대해 잘 인쇄 된 오류 메시지가 표시됩니다. 결과적으로,이 예외를 발생시키는 것은 (오류에 대한 합리적인 설명과 함께) 명령 실행에 문제가 있음을 나타내는 선호되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="798fc22e4b1c1c4ae674a16bd8671bd98591463c" translate="yes" xml:space="preserve">
          <source>If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command. It accepts the optional &lt;code&gt;returncode&lt;/code&gt; argument to customize the exit status for the management command to exit with, using &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command. It accepts the optional &lt;code&gt;returncode&lt;/code&gt; argument to customize the exit status for the management command to exit with, using &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exit&quot;&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5121ccc468599203cdf2f41680528f512f5238b0" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;False&lt;/code&gt;, accessing a related object that doesn&amp;rsquo;t exist will raise its &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">이것이 &lt;code&gt;False&lt;/code&gt; 로 설정되면 존재하지 않는 관련 개체에 액세스하면 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2d8f6dac00928c49d28b754a31e0c9229145c79e" translate="yes" xml:space="preserve">
          <source>If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</source>
          <target state="translated">Django를 처음 사용하는 경우 초기 설정을 처리해야합니다. 즉, 데이터베이스 구성, 장고 관련 옵션 및 응용 프로그램 별 설정을 포함하여 장고 인스턴스에 대한 설정 모음 인 장고 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;프로젝트&lt;/a&gt; 를 설정하는 일부 코드를 자동 생성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1154664032050539d3d00f427dd841fb2ced2f41" translate="yes" xml:space="preserve">
          <source>If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</source>
          <target state="translated">If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</target>
        </trans-unit>
        <trans-unit id="be1b7e4acd8d0cb9dde67da29afd40808b1e50d6" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given or is &lt;code&gt;None&lt;/code&gt;, you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt;, and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</source>
          <target state="translated">이것이 제공되지 않거나 &lt;code&gt;None&lt;/code&gt; 이면 운영 체제에 따라 달라집니다. 대부분의 플랫폼에서 임시 파일의 모드는 &lt;code&gt;0o600&lt;/code&gt; 이며 메모리에서 저장된 파일은 시스템의 표준 umask를 사용하여 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="f463269eb88c1b3ee3a234d7c03dfce4134a153f" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use &lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt;.</source>
          <target state="translated">이것이 주어지지 않으면 Django는 &lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="73b98905cd565580c0b7cdd5b5b3c194b7edc1e0" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use a munged version of the class name: &lt;code&gt;CamelCase&lt;/code&gt; becomes &lt;code&gt;camel case&lt;/code&gt;.</source>
          <target state="translated">이가 주어지지 않은 경우, 장고 클래스 이름의 munged 버전을 사용합니다 : &lt;code&gt;CamelCase&lt;/code&gt; 된다 &lt;code&gt;camel case&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee5e3c28a977fe38b4bf893b8d5bd1cfcc581da9" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t provided, the Django admin will use the model&amp;rsquo;s default ordering.</source>
          <target state="translated">이를 제공하지 않으면 Django 관리자가 모델의 기본 순서를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="204cd62fbe95eddcc429e1cf499ecc20b6269794" translate="yes" xml:space="preserve">
          <source>If this last CSS definition were to be rendered, it would become the following HTML:</source>
          <target state="translated">이 마지막 CSS 정의가 렌더링되면 다음 HTML이됩니다.</target>
        </trans-unit>
        <trans-unit id="03956128530b9f0fcadffe8423761387cbfdf376" translate="yes" xml:space="preserve">
          <source>If this looks correct, run &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; to create this table in the database:</source>
          <target state="translated">올바르게 표시되면 &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 를 실행 하여 데이터베이스에이 테이블을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="214efc0b3c62bb58b19ca86ac2cf1be69388e8d4" translate="yes" xml:space="preserve">
          <source>If this method is defined on a storage, it&amp;rsquo;s called by the &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options. It yields tuples of three values: &lt;code&gt;original_path, processed_path, processed&lt;/code&gt;. The path values are strings and &lt;code&gt;processed&lt;/code&gt; is a boolean indicating whether or not the value was post-processed, or an exception if post-processing failed.</source>
          <target state="translated">이 메소드가 스토리지에 정의 된 경우, 각 실행 후에 &lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령에 의해 호출되며 명령 행 옵션뿐만 아니라 로컬 스토리지 및 찾은 파일의 경로를 사전으로 전달합니다. &lt;code&gt;original_path, processed_path, processed&lt;/code&gt; 세 값의 튜플을 생성 합니다 . 경로 값은 문자열이며 &lt;code&gt;processed&lt;/code&gt; 는 값이 사후 처리되었는지 여부를 나타내는 부울이거나 사후 처리에 실패한 경우 예외입니다.</target>
        </trans-unit>
        <trans-unit id="78f9e31a35c14f187c486666943c82fca263c677" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for database views.</source>
          <target state="translated">이 옵션이 제공되면 데이터베이스보기에 대한 모델도 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="d949b49e534243e5950667398078494f92cad676" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for partitions.</source>
          <target state="translated">이 옵션이 제공되면 파티션에 대한 모델도 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="cf5933056c3c4a4bab36f59eaaa0e7ba423fd575" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;MEDIA_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 프로세서가 사용 가능한 경우 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는 &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 설정 값을 제공 하는 변수 &lt;code&gt;MEDIA_URL&lt;/code&gt; 을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="c3f669b44318076a8ac745b45b0e2b57ced4c0dd" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;STATIC_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 프로세서를 사용하면 모든 &lt;code&gt;RequestContext&lt;/code&gt; 에 &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 설정 값을 제공 하는 변수 &lt;code&gt;STATIC_URL&lt;/code&gt; 이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="b3627ab80c4912ed55e04ec73d8095f9410c0c92" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;TIME_ZONE&lt;/code&gt;, providing the name of the currently active time zone.</source>
          <target state="translated">이 프로세서가 사용 가능한 경우, 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는 현재 활성 시간대의 이름을 제공 하는 변수 &lt;code&gt;TIME_ZONE&lt;/code&gt; 을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="e14c9efdfe0e83e3c1193bc7da7c91988d833298" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;request&lt;/code&gt;, which is the current &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 프로세서는, 사용 가능한 경우, 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는 변수 포함 &lt;code&gt;request&lt;/code&gt; 전류이며, &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dfffb710a2c53706e240b5d6768b0976050feb4c" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables &amp;ndash; but only if your &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is set to &lt;code&gt;True&lt;/code&gt; and the request&amp;rsquo;s IP address (&lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt;) is in the &lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">이 프로세서가 사용 가능한 경우, 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는이 두 변수를 포함하지만 &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;True&lt;/code&gt; 로 설정되고 요청의 IP 주소 ( &lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt; )가 &lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt; 설정 에있는 경우에만 해당됩니다 .</target>
        </trans-unit>
        <trans-unit id="5f1b3b594560029b6edef85f4752d5ee49a66bb6" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables:</source>
          <target state="translated">이 프로세서를 사용하면 모든 &lt;code&gt;RequestContext&lt;/code&gt; 에 다음 두 변수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6c99cf696c7be10586d5d490d5e348ad6994d715" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these variables:</source>
          <target state="translated">이 프로세서를 사용하면 모든 &lt;code&gt;RequestContext&lt;/code&gt; 에 다음 변수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="74bf18d2eb713de82935d180fe41cd27d0c61d5c" translate="yes" xml:space="preserve">
          <source>If this still isn&amp;rsquo;t a good match, you can manually set the name of the context variable. The &lt;code&gt;context_object_name&lt;/code&gt; attribute on a generic view specifies the context variable to use:</source>
          <target state="translated">그래도 일치하지 않으면 컨텍스트 변수의 이름을 수동으로 설정할 수 있습니다. 일반보기 의 &lt;code&gt;context_object_name&lt;/code&gt; 속성은 사용할 컨텍스트 변수를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="111885105b9365941fb05a9bc35108884dfcc593" translate="yes" xml:space="preserve">
          <source>If this value starts with a forward slash (&lt;code&gt;'/'&lt;/code&gt;) and you&amp;rsquo;re using MySQL, MySQL will connect via a Unix socket to the specified socket. For example:</source>
          <target state="translated">이 값이 슬래시 ( &lt;code&gt;'/'&lt;/code&gt; )로 시작하고 MySQL을 사용하는 경우 MySQL은 Unix 소켓을 통해 지정된 소켓에 연결됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="687f9e38edf81cd2d25145c7b1294f723a108558" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;asgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project.</source>
          <target state="translated">이 변수가 설정되지 않은 경우, 기본 &lt;code&gt;asgi.py&lt;/code&gt; 은 로 설정 &lt;code&gt;mysite.settings&lt;/code&gt; , &lt;code&gt;mysite&lt;/code&gt; 프로젝트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7763646c9a13213d2e42106763a322d405a3bd97" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;wsgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project. That&amp;rsquo;s how &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; discovers the default settings file by default.</source>
          <target state="translated">이 변수가 설정되지 않은 경우, 기본 &lt;code&gt;wsgi.py&lt;/code&gt; 은 로 설정 &lt;code&gt;mysite.settings&lt;/code&gt; , &lt;code&gt;mysite&lt;/code&gt; 프로젝트의 이름입니다. 이것이 &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 가 기본적으로 기본 설정 파일을 발견하는 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="f5989aedec02f4ad2eba63dbf7a594f3d1537d24" translate="yes" xml:space="preserve">
          <source>If those conditions are met, Django will email the users listed in the &lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; setting whenever your code raises a 404 and the request has a referer. It doesn&amp;rsquo;t bother to email for 404s that don&amp;rsquo;t have a referer &amp;ndash; those are usually people typing in broken URLs or broken Web bots. It also ignores 404s when the referer is equal to the requested URL, since this behavior is from broken Web bots too.</source>
          <target state="translated">이러한 조건이 충족되면 Django는 코드가 404를 제기하고 요청에 참조자가있을 때마다 &lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; &lt;/a&gt; 설정에 나열된 사용자에게 이메일을 보냅니다. 추천자가없는 404에 대해서는 이메일을 보내지 않아도됩니다. 일반적으로 깨진 URL 또는 깨진 웹 봇을 입력하는 사람들입니다. 또한 리퍼러가 요청 된 URL과 동일한 경우 404를 무시합니다.이 동작은 깨진 웹 봇에서도 발생하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a73c5cb2486718bdc78ebe8a3caef6b14a81e74a" translate="yes" xml:space="preserve">
          <source>If turning this to &lt;code&gt;True&lt;/code&gt; causes infinite redirects, it probably means your site is running behind a proxy and can&amp;rsquo;t tell which requests are secure and which are not. Your proxy likely sets a header to indicate secure requests; you can correct the problem by finding out what that header is and configuring the &lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting accordingly.</source>
          <target state="translated">이 값을 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 무한 리디렉션 이 발생하여 사이트가 프록시 뒤에서 실행 중이며 어떤 요청이 안전하고 안전하지 않은지 알 수 없습니다. 프록시는 보안 요청을 나타 내기 위해 헤더를 설정합니다. 해당 헤더가 무엇인지 확인하고 그에 따라 &lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 설정을 구성하여 문제를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6481e6950ed002a13f7a54255de0e49329f79ddf" translate="yes" xml:space="preserve">
          <source>If two Python threads execute the code in the first example above, one thread could retrieve, increment, and save a field&amp;rsquo;s value after the other has retrieved it from the database. The value that the second thread saves will be based on the original value; the work of the first thread will be lost.</source>
          <target state="translated">위의 첫 번째 예제에서 두 개의 Python 스레드가 코드를 실행하는 경우 한 스레드는 데이터베이스에서 다른 스레드가 필드를 검색 한 후 필드 값을 검색, 증분 및 저장할 수 있습니다. 두 번째 스레드가 저장하는 값은 원래 값을 기반으로합니다. 첫 번째 스레드의 작업이 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="5e64204f76516c2278e4b64d558fec189d6cf43f" translate="yes" xml:space="preserve">
          <source>If unspecified, the default &lt;code&gt;timeout&lt;/code&gt; will be the one provided by &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt;&lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;code&gt;None&lt;/code&gt; (no timeout).</source>
          <target state="translated">지정되지 않은 경우 기본 &lt;code&gt;timeout&lt;/code&gt; 는 &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt; &lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt; &lt;/a&gt; 에서 제공하는 시간 초과 이며 기본값은 &lt;code&gt;None&lt;/code&gt; (시간 초과 없음 )입니다.</target>
        </trans-unit>
        <trans-unit id="60e13a5dc7aa8445a725b41528f2e1f91c6d315c" translate="yes" xml:space="preserve">
          <source>If updating a large number of columns in a large number of rows, the SQL generated can be very large. Avoid this by specifying a suitable &lt;code&gt;batch_size&lt;/code&gt;.</source>
          <target state="translated">많은 수의 행에서 많은 수의 열을 업데이트하는 경우 생성 된 SQL이 매우 클 수 있습니다. 적절한 &lt;code&gt;batch_size&lt;/code&gt; 를 지정하여이를 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="9de1d7c145e3bfbd1da3b57f9e69810dee560a48" translate="yes" xml:space="preserve">
          <source>If used with &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, the &lt;code&gt;__call__()&lt;/code&gt; method will never be used; Django calls &lt;code&gt;process_request()&lt;/code&gt; and &lt;code&gt;process_response()&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 와 함께 사용 하면 &lt;code&gt;__call__()&lt;/code&gt; 메소드는 사용되지 않습니다. Django는 &lt;code&gt;process_request()&lt;/code&gt; 및 &lt;code&gt;process_response()&lt;/code&gt; 직접 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="e3318f562b136e880f0fe72349d17ab0bbe42fba" translate="yes" xml:space="preserve">
          <source>If used with a numeric integer argument, &lt;code&gt;floatformat&lt;/code&gt; rounds a number to that many decimal places. For example:</source>
          <target state="translated">숫자 정수 인수와 함께 사용되는 경우 &lt;code&gt;floatformat&lt;/code&gt; 은 숫자를 소수점 이하 자릿수로 반올림합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b36b4a6b3834f5db697a34dce30549b123363b8c" translate="yes" xml:space="preserve">
          <source>If using a binary package of GEOS (e.g., on Ubuntu), you may need to &lt;a href=&quot;index#binutils&quot;&gt;Install binutils&lt;/a&gt;.</source>
          <target state="translated">GEOS 바이너리 패키지 (예 : Ubuntu)를 사용하는 경우 &lt;a href=&quot;index#binutils&quot;&gt;binutils&lt;/a&gt; 를 설치 해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="77e5c9f7d7653d5f758d827f9f9d8be93ef993b1" translate="yes" xml:space="preserve">
          <source>If using an SQLite in-memory database with SQLite, &lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;shared cache&lt;/a&gt; is enabled, so you can write tests with ability to share the database between threads.</source>
          <target state="translated">SQLite와 함께 SQLite 인 메모리 데이터베이스를 사용하는 경우 &lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;공유 캐시&lt;/a&gt; 가 활성화되므로 스레드간에 데이터베이스를 공유 할 수있는 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a39821e0ea752a2e9e4388107ced28792f496f36" translate="yes" xml:space="preserve">
          <source>If using database-backed sessions, regularly &lt;a href=&quot;../../topics/http/sessions#clearing-the-session-store&quot;&gt;clear old sessions&lt;/a&gt; to avoid storing unnecessary data.</source>
          <target state="translated">If using database-backed sessions, regularly &lt;a href=&quot;../../topics/http/sessions#clearing-the-session-store&quot;&gt;clear old sessions&lt;/a&gt; to avoid storing unnecessary data.</target>
        </trans-unit>
        <trans-unit id="71eff97e42ab86eb5151370fe1181333a128682b" translate="yes" xml:space="preserve">
          <source>If value evaluates to &lt;code&gt;False&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">value가 &lt;code&gt;False&lt;/code&gt; 로 평가 되면 지정된 기본값을 사용합니다. 그렇지 않으면 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f611765f2d320e927111295d6c9695093483fb31" translate="yes" xml:space="preserve">
          <source>If we arrive at this view with a &lt;code&gt;GET&lt;/code&gt; request, it will create an empty form instance and place it in the template context to be rendered. This is what we can expect to happen the first time we visit the URL.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 요청 으로이보기에 도달 하면 빈 양식 인스턴스가 작성되어 템플리트 컨텍스트에 렌더링됩니다. 이것이 처음 URL을 방문 할 때 발생할 수있는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0a8a851d0367ffe29323b90c503c215f8aa8f5d9" translate="yes" xml:space="preserve">
          <source>If we connected a handler like this:</source>
          <target state="translated">우리가 이런 핸들러를 연결했다면 :</target>
        </trans-unit>
        <trans-unit id="406383748435b9b983e4fe62090c8c234445f370" translate="yes" xml:space="preserve">
          <source>If we delete a &lt;code&gt;Publication&lt;/code&gt;, its &lt;code&gt;Articles&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Publication&lt;/code&gt; 을 삭제하면 해당 &lt;code&gt;Articles&lt;/code&gt; 에서 해당 발행물 에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3d341e594a575849b6069ae86fb05e49f3983a60" translate="yes" xml:space="preserve">
          <source>If we delete an &lt;code&gt;Article&lt;/code&gt;, its &lt;code&gt;Publications&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; 를 삭제하면 해당 &lt;code&gt;Publications&lt;/code&gt; 에서 기사 에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c2e7f5f3fb7b52337975a488b9c8164eab92ebfb" translate="yes" xml:space="preserve">
          <source>If we had neglected to pass in the current &lt;code&gt;context.autoescape&lt;/code&gt; value to our new &lt;code&gt;Context&lt;/code&gt; in this example, the results would have &lt;em&gt;always&lt;/em&gt; been automatically escaped, which may not be the desired behavior if the template tag is used inside a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;{% autoescape off %}&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">이 예제에서 현재 &lt;code&gt;context.autoescape&lt;/code&gt; 값을 새 &lt;code&gt;Context&lt;/code&gt; 에 전달 하지 않은 경우, 결과는 &lt;em&gt;항상&lt;/em&gt; 자동으로 이스케이프 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt; &lt;code&gt;{% autoescape off %}&lt;/code&gt; &lt;/a&gt; 내부에서 템플릿 태그를 사용하는 경우 원하는 동작이 아닐 수 있습니다. } 블록.</target>
        </trans-unit>
        <trans-unit id="ffb90e72c570b70af963c6da1122122d334c0352" translate="yes" xml:space="preserve">
          <source>If we want to write a class-based view that responds only to &lt;code&gt;POST&lt;/code&gt;, we&amp;rsquo;ll subclass &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and write a &lt;code&gt;post()&lt;/code&gt; method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we&amp;rsquo;ll want the functionality provided by &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 에만 응답하는 클래스 기반 뷰를 작성하려면 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; 를&lt;/a&gt; 서브 클래스 화 하고 서브 클래스 에 &lt;code&gt;post()&lt;/code&gt; 메소드를 작성합니다. 그러나 URL에서 식별 된 특정 객체에서 처리를 수행하려면 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; 에서&lt;/a&gt; 제공하는 기능이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="f9670d8eca365c2fbb8bf2e17c3f35929328311b" translate="yes" xml:space="preserve">
          <source>If we wanted to add a tool to the change list view for only a specific model named &amp;lsquo;Page&amp;rsquo;, we would copy that same file to the &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; directory of our project.</source>
          <target state="translated">'Page'라는 특정 모델의 변경 목록보기에 도구를 추가하려는 경우 동일한 파일을 프로젝트 의 &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; 디렉토리에 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="6bd7027efcdd2746450164bec58ed7a7c2bb113c" translate="yes" xml:space="preserve">
          <source>If we wanted to change our previous query to get the discount based on how long the &lt;code&gt;Client&lt;/code&gt; has been with us, we could do so using lookups:</source>
          <target state="translated">우리는 시간에 따른 할인을 받으실 수 있습니다 이전 쿼리 변경을 원했습니다 경우 &lt;code&gt;Client&lt;/code&gt; 우리와 함께하고있다, 우리는 조회를 사용하여 그렇게 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="424f525a9d69de5a035589bbd0105ee23eb2ed5c" translate="yes" xml:space="preserve">
          <source>If you &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; a &lt;code&gt;QuerySet&lt;/code&gt;, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a &lt;code&gt;QuerySet&lt;/code&gt;, it contains the results at the moment it was pickled, rather than the results that are currently in the database.</source>
          <target state="translated">당신이 경우 &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt; &lt;code&gt;QuerySet&lt;/code&gt; ,이 모든 결과는 산 세척하기 전에 메모리에로드 강제됩니다. 피클 링은 일반적으로 캐싱의 선구자로 사용되며 캐시 된 쿼리 집합을 다시로드 할 때 결과가 이미 존재하고 사용할 준비가되기를 원합니다 (데이터베이스에서 읽는 데 시간이 걸릴 수 있으므로 캐싱의 목적을 무시 함). 이는 &lt;code&gt;QuerySet&lt;/code&gt; 을 선택 해제 할 때 현재 데이터베이스에있는 결과가 아니라 선택되는 순간의 결과를 포함 한다는 것을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="50f8dcfebb421839cfac4619ff97003f8219dfe8" translate="yes" xml:space="preserve">
          <source>If you accidentally try to call a part of Django that is still synchronous-only from an async view, you will trigger Django&amp;rsquo;s &lt;a href=&quot;#async-safety&quot;&gt;asynchronous safety protection&lt;/a&gt; to protect your data from corruption.</source>
          <target state="translated">If you accidentally try to call a part of Django that is still synchronous-only from an async view, you will trigger Django&amp;rsquo;s &lt;a href=&quot;#async-safety&quot;&gt;asynchronous safety protection&lt;/a&gt; to protect your data from corruption.</target>
        </trans-unit>
        <trans-unit id="c976c50b35c8e39b12378828f30c9e059d209f63" translate="yes" xml:space="preserve">
          <source>If you activate &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt;, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript:</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt; 를 활성화하는 경우 HTML에 CSRF 토큰을 포함시키고 JavaScript를 사용하여 DOM에서 토큰을 읽어야합니다.</target>
        </trans-unit>
        <trans-unit id="ab46e0097159c03d8a60d09a7d1250eee53c6b4a" translate="yes" xml:space="preserve">
          <source>If you add a new keyword argument, you need to write code in &lt;code&gt;deconstruct()&lt;/code&gt; that puts its value into &lt;code&gt;kwargs&lt;/code&gt; yourself. You should also omit the value from &lt;code&gt;kwargs&lt;/code&gt; when it isn&amp;rsquo;t necessary to reconstruct the state of the field, such as when the default value is being used:</source>
          <target state="translated">새로운 키워드 인수를 추가하면 &lt;code&gt;deconstruct()&lt;/code&gt; 코드를 작성 하여 값을 &lt;code&gt;kwargs&lt;/code&gt; 에 저장해야 합니다. 또한 기본값을 사용하는 경우와 같이 필드 상태를 재구성 할 필요가없는 경우 &lt;code&gt;kwargs&lt;/code&gt; 에서 값을 생략해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9290e813a0bf97db9d008f3c672105ad13a270f2" translate="yes" xml:space="preserve">
          <source>If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; and used in your own views.</source>
          <target state="translated">자신의 코드를 통해 플랫 페이지를 추가하거나 수정하는 경우 동일한 사이트 내에서 중복 된 플랫 페이지 URL을 확인하는 것이 좋습니다. 관리자에서 사용되는 플랫 페이지 양식은이 유효성 검사를 수행하며 &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; 에서 가져 와서 자신의보기에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19279f2745faa7fa825b809dfd65333ca02e57b9" translate="yes" xml:space="preserve">
          <source>If you add the name of a callable to &lt;code&gt;fields&lt;/code&gt;, the same rule applies as with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; option: the callable must be listed in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 호출 가능 이름을 추가하면 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; 옵션 과 동일한 규칙이 적용됩니다 . 호출 가능은 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;readonly_fields&lt;/code&gt; 에&lt;/a&gt; 나열되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="4828b14d37ca4d41be7823693b8a8c011f2c2552" translate="yes" xml:space="preserve">
          <source>If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called &lt;code&gt;timestamp&lt;/code&gt;, while the same column in MySQL is called &lt;code&gt;datetime&lt;/code&gt;. You can handle this in a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method by checking the &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; attribute.</source>
          <target state="translated">데이터베이스에 구애받지 않는 응용 프로그램을 구축하려는 경우 데이터베이스 열 유형의 차이를 고려해야합니다. 예를 들어 PostgreSQL의 날짜 / 시간 열 유형은 &lt;code&gt;timestamp&lt;/code&gt; 이고 MySQL의 동일한 열은 &lt;code&gt;datetime&lt;/code&gt; 입니다. &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; 속성 을 확인하여 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 메소드 에서이를 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="d866003e34d19497e6a39513c19080fca9667425" translate="yes" xml:space="preserve">
          <source>If you allow for blank values, you have to allow for null values since blank values are stored as null.</source>
          <target state="translated">공백 값을 허용하면 공백 값이 널로 저장되므로 널값을 허용해야합니다.</target>
        </trans-unit>
        <trans-unit id="5dfbcb1590644f47fc6c2a97a5c0c0679f9f8edd" translate="yes" xml:space="preserve">
          <source>If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as:</source>
          <target state="translated">URL 인코딩 형식의 GET 인수가 이미 있으면 data 인수 대신 해당 인코딩을 사용할 수 있습니다. 예를 들어, 이전 GET 요청은 다음과 같이 제기 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f8f087d060b362f136ee6b97e34ff5646abcd8a" translate="yes" xml:space="preserve">
          <source>If you already know a few other languages and want to get up to speed with Python quickly, we recommend &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt;. If that&amp;rsquo;s not quite your style, there are many other &lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;books about Python&lt;/a&gt;.</source>
          <target state="translated">이미 몇 가지 다른 언어를 알고 있고 Python을 빠르게 익히고 싶다면 &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python을&lt;/a&gt; 권장 합니다. 그것이 당신의 스타일이 아니라면, &lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;파이썬에 관한&lt;/a&gt; 많은 다른 책들이 있습니다.</target>
        </trans-unit>
        <trans-unit id="037b16c87c42ef82ec961a3ac3d843c26b02994c" translate="yes" xml:space="preserve">
          <source>If you are &lt;em&gt;absolutely&lt;/em&gt; in dire need to run this code from an asynchronous context - for example, it is being forced on you by an external environment, and you are sure there is no chance of it being run concurrently (e.g. you are in a &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; notebook), then you can disable the warning with the &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; environment variable.</source>
          <target state="translated">당신이 경우 &lt;em&gt;절대적으로&lt;/em&gt; 비동기 컨텍스트에서이 코드를 실행하는 절박한 필요 - 예를 들어,이 외부 환경에 의해 당신에게 강요되고 있으며, 당신이 있는지가 동시에 실행되는 기회가 없다 (예를 들어, 당신은에 &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter &lt;/a&gt; &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; 환경 변수를 사용하여 경고를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cabfbe868e7cb75abcebb7e76b56c06e811c5257" translate="yes" xml:space="preserve">
          <source>If you are chaining filters, a filter applied after &lt;code&gt;safe&lt;/code&gt; can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:</source>
          <target state="translated">필터를 체인으로 연결하는 경우 &lt;code&gt;safe&lt;/code&gt; 후에 적용된 필터 를 사용하면 내용이 다시 안전하지 않을 수 있습니다. 예를 들어, 다음 코드는 이스케이프 처리되지 않은 그대로 변수를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="2655962c0a4f53510466dd490c637f462974c542" translate="yes" xml:space="preserve">
          <source>If you are connecting to the internet behind a proxy, there might be problems in running the command &lt;code&gt;py -m pip install Django&lt;/code&gt;. Set the environment variables for proxy configuration in the command prompt as follows:</source>
          <target state="translated">프록시 뒤에서 인터넷에 연결하는 경우 &lt;code&gt;py -m pip install Django&lt;/code&gt; 명령을 실행하는 데 문제가있을 수 있습니다 . 명령 프롬프트에서 프록시 구성을위한 환경 변수를 다음과 같이 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="3f2135c10c9c1fcecec78e1b0692c6109124ccab" translate="yes" xml:space="preserve">
          <source>If you are constructing an object manually, you can assign the file object from &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; to the file field in the model:</source>
          <target state="translated">오브젝트를 수동으로 구성하는 경우 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; 의 파일 오브젝트를 모델의 파일 ​​필드에 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92ab820f72ae9c99d7def5b0452724d8bd608be6" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable application, it is recommended to use only the built-in &lt;a href=&quot;#message-levels&quot;&gt;message levels&lt;/a&gt; and not rely on any custom levels.</source>
          <target state="translated">재사용 가능한 응용 프로그램을 만드는 경우 기본 제공 &lt;a href=&quot;#message-levels&quot;&gt;메시지 수준&lt;/a&gt; 만 사용 하고 사용자 지정 수준에 의존하지 않는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="ffa521388bfefc73cf3b041673a0e7a8595c90d3" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server and Django can&amp;rsquo;t seem to tell when a request actually is already secure, you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">로드 밸런서 또는 리버스 프록시 서버 뒤에 배치되어 있고 Django가 요청이 실제로 안전하다는 것을 알 수없는 경우 &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 설정 을 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="41e9a421371bfb5a50b98c32edd7081296c13f7c" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server, and the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header is not being added to your responses, it may be because Django doesn&amp;rsquo;t realize that it&amp;rsquo;s on a secure connection; you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">로드 밸런서 또는 리버스 프록시 서버 뒤에 배치되어 있고 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; 헤더가 응답에 추가되지 않는 경우 장고가 안전한 연결 상태임을 인식하지 못하기 때문일 수 있습니다. &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 설정 을 설정해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2c691ad6ca02fef297ccdbc9e5c26db8508ebcf4" translate="yes" xml:space="preserve">
          <source>If you are developing a small project or something you don&amp;rsquo;t plan to deploy in a production environment, SQLite is generally the best option as it doesn&amp;rsquo;t require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it&amp;rsquo;s recommended to develop with the same database that you plan on using in production.</source>
          <target state="translated">소규모 프로젝트 나 프로덕션 환경에 배포하지 않을 계획 인 경우 별도의 서버를 실행할 필요가 없으므로 SQLite가 가장 좋습니다. 그러나 SQLite는 다른 데이터베이스와 많은 차이점이 있으므로 상당한 작업을 수행하는 경우 프로덕션 환경에서 사용하려는 것과 동일한 데이터베이스로 개발하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="426463c8a09b71f7c823f03996117348698ae262" translate="yes" xml:space="preserve">
          <source>If you are familiar with Python packaging and interested in learning how to turn polls into a &amp;ldquo;reusable app&amp;rdquo;, check out &lt;a href=&quot;reusable-apps&quot;&gt;Advanced tutorial: How to write reusable apps&lt;/a&gt;.</source>
          <target state="translated">Python 패키징에 익숙하고 설문을 &quot;재사용 가능한 앱&quot;으로 바꾸는 방법에 관심이있는 경우 &lt;a href=&quot;reusable-apps&quot;&gt;고급 자습서 : 재사용 가능한 앱 작성 방법을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6df1a07d3d4b877dffccc3304d0749b9a9a63bcf" translate="yes" xml:space="preserve">
          <source>If you are filtering across multiple relationships and one of the intermediate models doesn&amp;rsquo;t have a value that meets the filter condition, Django will treat it as if there is an empty (all values are &lt;code&gt;NULL&lt;/code&gt;), but valid, object there. All this means is that no error will be raised. For example, in this filter:</source>
          <target state="translated">여러 관계에서 필터링하고 중간 모델 중 하나에 필터 조건을 충족시키는 값이없는 경우 장고는 비어있는 (모든 값은 &lt;code&gt;NULL&lt;/code&gt; ) 있지만 유효한 객체 인 것처럼 처리합니다. 이 모든 것은 오류가 발생하지 않는다는 것입니다. 예를 들어이 필터에서</target>
        </trans-unit>
        <trans-unit id="54d3dc0d5d9a07f09c0b925c9b0c98d70db0dd97" translate="yes" xml:space="preserve">
          <source>If you are going to need other data from the QuerySet, evaluate it immediately.</source>
          <target state="translated">QuerySet의 다른 데이터가 필요한 경우 즉시 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="0a6f484ecf97ba11c41c19b92638b2e691e251cf" translate="yes" xml:space="preserve">
          <source>If you are just starting with Django and using Windows, you may find &lt;a href=&quot;../howto/windows&quot;&gt;How to install Django on Windows&lt;/a&gt; useful.</source>
          <target state="translated">Django로 시작하여 Windows를 사용하는 경우 Windows에 &lt;a href=&quot;../howto/windows&quot;&gt;Django를 설치하는 방법이&lt;/a&gt; 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8022aedc2f24dbfc32c1645a06e23557556b40d" translate="yes" xml:space="preserve">
          <source>If you are looking for a more robust solution, take a look at the &lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;bleach&lt;/a&gt; Python library.</source>
          <target state="translated">보다 강력한 솔루션을 찾고 있다면 &lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;블리치&lt;/a&gt; Python 라이브러리를 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="5679be2b89b6ad12b1cb13d77be5c899c643d272" translate="yes" xml:space="preserve">
          <source>If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</source>
          <target state="translated">패치 제출 방법에 대한 참조를 찾으려면 패치 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;제출&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="49ef38e282be1a0ceabdc271e0e19b9b3902d0fd" translate="yes" xml:space="preserve">
          <source>If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</source>
          <target state="translated">If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="b51f6b7ffd84766e0e10e46ee09ef3d2cd522fad" translate="yes" xml:space="preserve">
          <source>If you are migrating from the Django&amp;rsquo;s built-in &lt;code&gt;cached_db&lt;/code&gt; session store to a custom one based on &lt;code&gt;cached_db&lt;/code&gt;, you should override the cache key prefix in order to prevent a namespace clash:</source>
          <target state="translated">당신은에서 이주하는 경우 장고에 내장 된 &lt;code&gt;cached_db&lt;/code&gt; 의 기반으로 사용자 정의 하나 세션 저장소 &lt;code&gt;cached_db&lt;/code&gt; , 네임 스페이스 충돌을 방지하기 위해 캐시 키 접두사를 오버라이드 (override) :</target>
        </trans-unit>
        <trans-unit id="3f20d2e0ed1b7dfe99fe7b1b15afc7ea12f08c4e" translate="yes" xml:space="preserve">
          <source>If you are mirroring an existing model or database table and don&amp;rsquo;t want all the original database table columns, use &lt;code&gt;Meta.managed=False&lt;/code&gt;. That option is normally useful for modeling database views and tables not under the control of Django.</source>
          <target state="translated">기존 모델 또는 데이터베이스 테이블을 미러링하고 모든 원래 데이터베이스 테이블 열을 원하지 않으면 &lt;code&gt;Meta.managed=False&lt;/code&gt; 를 사용 하십시오 . 이 옵션은 일반적으로 Django가 제어하지 않는 데이터베이스 뷰 및 테이블을 모델링하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2c77013a5d33bed9ff8aeb9b8d8bccb978ee3d8e" translate="yes" xml:space="preserve">
          <source>If you are not using SQLite as your database, additional settings such as &lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt;&lt;code&gt;PASSWORD&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; must be added. For more details, see the reference documentation for &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SQLite를 데이터베이스로 사용하지 않는 경우 &lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt; &lt;code&gt;PASSWORD&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; 와 같은 추가 설정을 추가해야합니다. 자세한 내용은 &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 참조 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2dff9fa6f2943dcffcb71466072c87506f22903b" translate="yes" xml:space="preserve">
          <source>If you are performing queries on MySQL, note that MySQL&amp;rsquo;s silent type coercion may cause unexpected results when mixing types. If you query on a string type column, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. For example, if your table contains the values &lt;code&gt;'abc'&lt;/code&gt;, &lt;code&gt;'def'&lt;/code&gt; and you query for &lt;code&gt;WHERE mycolumn=0&lt;/code&gt;, both rows will match. To prevent this, perform the correct typecasting before using the value in a query.</source>
          <target state="translated">MySQL에서 쿼리를 수행하는 경우 MySQL의 자동 유형 강제 변환은 유형을 혼합 할 때 예기치 않은 결과를 초래할 수 있습니다. 문자열 유형 열을 쿼리하지만 정수 값으로 쿼리하면 MySQL은 비교를 수행하기 전에 테이블의 모든 값 유형을 정수로 강제 변환합니다. 예를 들어 테이블에 &lt;code&gt;'abc'&lt;/code&gt; , &lt;code&gt;'def'&lt;/code&gt; 값이 포함되어 있고 &lt;code&gt;WHERE mycolumn=0&lt;/code&gt; 을 쿼리하면 두 행이 모두 일치합니다. 이를 방지하려면 조회에서 값을 사용하기 전에 올바른 유형 변환을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a947d6cabd99493fc7e983c79f42f4923da04a9e" translate="yes" xml:space="preserve">
          <source>If you are serving your own static files, be sure that handlers like Apache&amp;rsquo;s &lt;code&gt;mod_php&lt;/code&gt;, which would execute static files as code, are disabled. You don&amp;rsquo;t want users to be able to execute arbitrary code by uploading and requesting a specially crafted file.</source>
          <target state="translated">정적 파일을 제공하는 경우 정적 파일을 코드로 실행하는 Apache의 &lt;code&gt;mod_php&lt;/code&gt; 와 같은 핸들러 가 비활성화되어 있는지 확인하십시오 . 특수하게 조작 된 파일을 업로드하고 요청하여 사용자가 임의의 코드를 실행할 수 없도록하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="3e266d9fb9806995f7ae92d1d0321cc13f004066" translate="yes" xml:space="preserve">
          <source>If you are sharing a cache instance between servers, or between your production and development environments, it&amp;rsquo;s possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems.</source>
          <target state="translated">서버 간 또는 프로덕션 환경과 개발 환경간에 캐시 인스턴스를 공유하는 경우 한 서버에서 캐시 된 데이터를 다른 서버에서 사용할 수 있습니다. 캐시 된 데이터의 형식이 서버마다 다르면 문제를 진단하기가 매우 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11740fd9f726066aa1c21ea9b74be5776e21a750" translate="yes" xml:space="preserve">
          <source>If you are testing from an asynchronous function, you must also use the asynchronous test client. This is available as &lt;code&gt;django.test.AsyncClient&lt;/code&gt;, or as &lt;code&gt;self.async_client&lt;/code&gt; on any test.</source>
          <target state="translated">If you are testing from an asynchronous function, you must also use the asynchronous test client. This is available as &lt;code&gt;django.test.AsyncClient&lt;/code&gt; , or as &lt;code&gt;self.async_client&lt;/code&gt; on any test.</target>
        </trans-unit>
        <trans-unit id="5df3afa0c3b43eec8bd8d9f748fb63ae435ac643" translate="yes" xml:space="preserve">
          <source>If you are the maintainer of a third-party app with models, you may need to ship migrations that support multiple Django versions. In this case, you should always run &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;with the lowest Django version you wish to support&lt;/strong&gt;.</source>
          <target state="translated">모델이 포함 된 타사 앱의 관리자 인 경우 여러 Django 버전을 지원하는 마이그레이션을 제공해야 할 수 있습니다. 이 경우 항상 &lt;strong&gt;지원하려는 Django 버전이 가장 낮은 &lt;/strong&gt;&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;&lt;strong&gt; 을&lt;/strong&gt; 실행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="29f132b30359fb7a3ec8ec8ec098562f51231719" translate="yes" xml:space="preserve">
          <source>If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;a href=&quot;../topics/async#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;a href=&quot;../topics/async#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c58efff062a8aaaaa34e19e97693ce558ec61bc5" translate="yes" xml:space="preserve">
          <source>If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt;.</source>
          <target state="translated">비동기 스레드에서 동기 전용 코드를 호출하려는 경우 동기 스레드를 작성하여 호출하십시오. &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt; 로이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e8e0bd3010ac7dd8cec899905c900e89f1f7d84a" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt;, you must always specify a &lt;em&gt;unique&lt;/em&gt; reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt;) each time.</source>
          <target state="translated">&lt;code&gt;ForeignKey&lt;/code&gt; 또는 &lt;code&gt;ManyToManyField&lt;/code&gt; 에서 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt; 을 사용하는 경우 항상 필드 의 &lt;em&gt;고유 한&lt;/em&gt; 리버스 이름 및 조회 이름을 지정해야 합니다. 이 클래스의 필드는 매번 속성 ( &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; 포함&lt;/a&gt; )에 대해 정확히 동일한 값으로 각 하위 클래스에 포함되므로 일반적으로 추상 기본 클래스에서 문제가 발생합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="13ff923ff59501ab414c4be102a84827b6e517bb" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; to generate serialized data, use the &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt;&lt;code&gt;dumpdata --natural-primary&lt;/code&gt;&lt;/a&gt; command line flags to generate natural keys.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 를 사용하여 직렬화 된 데이터를 생성하는 경우 &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt; &lt;code&gt;dumpdata --natural-primary&lt;/code&gt; &lt;/a&gt; 명령 행 플래그를 사용하여 자연 키를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="59359e0377bcc9039f07ed70ee0fda67ef2ccade" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;multi-db&quot;&gt;more than one database&lt;/a&gt;, you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;multi-db&quot;&gt;둘 이상의 데이터베이스를&lt;/a&gt; , 당신이 사용할 수있는 &lt;code&gt;django.db.connections&lt;/code&gt; 을 특정 데이터베이스에 대한 연결 (커서)을 얻었다. &lt;code&gt;django.db.connections&lt;/code&gt; 는 별명을 사용하여 특정 연결을 검색 할 수있는 사전과 유사한 객체입니다.</target>
        </trans-unit>
        <trans-unit id="f9a935f64b3c7b8ef812c793ab72169e068de5c7" translate="yes" xml:space="preserve">
          <source>If you are using MySQL, see the &lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;Time zone definitions&lt;/a&gt; section of the MySQL notes for instructions on loading time zone definitions.</source>
          <target state="translated">MySQL을 사용하는 경우 &lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;시간대 정의&lt;/a&gt; 로드에 대한 지시 사항은 MySQL 참고 사항의 시간대 정의 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="20d3a84d61e53af28e187e5423ab3c6daba100cb" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt;&lt;code&gt;ModelFormSet&lt;/code&gt;&lt;/a&gt;, model instances for deleted forms will be deleted when you call &lt;code&gt;formset.save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt; &lt;code&gt;ModelFormSet&lt;/code&gt; 을&lt;/a&gt; 사용하는 경우 &lt;code&gt;formset.save()&lt;/code&gt; 를 호출하면 삭제 된 양식의 모델 인스턴스가 삭제됩니다 .</target>
        </trans-unit>
        <trans-unit id="4a32235de5fa9b7f6d1fb4ceb0c0a90fb7c8b7a7" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;AdminSite&lt;/code&gt;, it is common to import all of the &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses into your code and register them to the custom &lt;code&gt;AdminSite&lt;/code&gt;. In that case, in order to disable auto-discovery, you should put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">사용자 정의 사용하는 경우 &lt;code&gt;AdminSite&lt;/code&gt; 를 , 모든 수입하는 것이 일반적입니다 &lt;code&gt;ModelAdmin&lt;/code&gt; 의 코드에 서브 클래스 및 사용자 정의에 등록 &lt;code&gt;AdminSite&lt;/code&gt; . 이 경우, 사용하지 않도록 자동 검색을 위해, 당신은 넣어한다 &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 대신 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; 당신의 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="3e5ad72d051f2c508d3660b55413bfd83991c9d5" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;ModelAdmin&lt;/code&gt; which is a subclass of &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt;, then you need to add your custom fields to &lt;code&gt;fieldsets&lt;/code&gt; (for fields to be used in editing users) and to &lt;code&gt;add_fieldsets&lt;/code&gt; (for fields to be used when creating a user). For example:</source>
          <target state="translated">사용자 정의 사용하는 경우 &lt;code&gt;ModelAdmin&lt;/code&gt; 의 서브 클래스입니다 &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt; 을 , 당신은 당신의 사용자 정의 필드를 추가 할 필요가 &lt;code&gt;fieldsets&lt;/code&gt; (사용자 편집에 사용되는 필드)와에 &lt;code&gt;add_fieldsets&lt;/code&gt; 필드가 될 때까지 ( 사용자를 만들 때 사용). 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="55299cb11d5a4d1a27e95db83e96e73588d11d45" translate="yes" xml:space="preserve">
          <source>If you are using a legacy database that contains &lt;code&gt;TIMESTAMP&lt;/code&gt; columns, you must set &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = False&lt;/code&gt;&lt;/a&gt; to avoid data corruption. &lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; maps these columns to &lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time.</source>
          <target state="translated">&lt;code&gt;TIMESTAMP&lt;/code&gt; 컬럼 이 포함 된 레거시 데이터베이스를 사용중인 경우 데이터 손상을 피하려면 &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = False&lt;/code&gt; &lt;/a&gt; 를 설정해야합니다 . &lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;inspectdb&lt;/code&gt; &lt;/a&gt; 는 이러한 열을 &lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 에&lt;/a&gt; 매핑 하고 시간대 지원을 활성화하면 MySQL과 Django가 값을 UTC에서 현지 시간으로 변환하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="9b9eb482ea04b91f418d3f207e5896276fab27cb" translate="yes" xml:space="preserve">
          <source>If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence &lt;code&gt;CacheKeyWarning&lt;/code&gt; with this code in the &lt;code&gt;management&lt;/code&gt; module of one of your &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">더 넓은 범위의 키 (사용자 지정 백엔드 또는 비 &lt;code&gt;CacheKeyWarning&lt;/code&gt; 내장 백엔드 중 하나)를 수락 할 수있는 프로덕션 백엔드를 사용하고 경고없이이 더 넓은 범위를 사용하려는 경우이 코드를 사용하여 CacheKeyWarning 을 침묵 시킬 수 있습니다. 에서 &lt;code&gt;management&lt;/code&gt; 하여 하나의 모듈 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="400ddbb0cf2f8ce72e355d92bebfc1e26ffa4aab" translate="yes" xml:space="preserve">
          <source>If you are using a version of Apache older than 2.4, replace &lt;code&gt;Require all granted&lt;/code&gt; with &lt;code&gt;Allow from all&lt;/code&gt; and also add the line &lt;code&gt;Order deny,allow&lt;/code&gt; above it.</source>
          <target state="translated">당신은 2.4 이전의 아파치 버전을 사용하는 경우, 대체 &lt;code&gt;Require all granted&lt;/code&gt; 로 &lt;code&gt;Allow from all&lt;/code&gt; 라인 추가도하고 &lt;code&gt;Order deny,allow&lt;/code&gt; 그 위에.</target>
        </trans-unit>
        <trans-unit id="e9b1ff813f22a4d98b3e0ec7f8d1a70dfb440c12" translate="yes" xml:space="preserve">
          <source>If you are using caching provided by Django, you should consider clearing your cache after upgrading. Otherwise you may run into problems, for example, if you are caching pickled objects as these objects are not guaranteed to be pickle-compatible across Django versions. A past instance of incompatibility was caching pickled &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, either directly or indirectly via the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="translated">Django가 제공하는 캐싱을 사용하는 경우 업그레이드 후 캐시를 지우는 것을 고려해야합니다. 그렇지 않으면 예를 들어 Django 버전에서 피클 호환이 보장되지 않기 때문에 피클 링 된 객체를 캐싱하는 경우 문제가 발생할 수 있습니다. 비 호환성의 과거 사례는 캐시 된 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt; &lt;code&gt;cache_page()&lt;/code&gt; &lt;/a&gt; 데코레이터 를 통해 직접 또는 간접적으로 캐싱하는 것이 었습니다 .</target>
        </trans-unit>
        <trans-unit id="31c81067457a54fed13944b98da35401d7bcbd26" translate="yes" xml:space="preserve">
          <source>If you are using class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">클래스 기반 뷰를 사용하는 경우 클래스 기반 뷰 &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;꾸미기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="74bc5b3d8a5fb005230ddd51971a6b250b4753ac" translate="yes" xml:space="preserve">
          <source>If you are using more than one database you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">둘 이상의 데이터베이스를 사용하는 경우 &lt;code&gt;django.db.connections&lt;/code&gt; 를 사용 하여 특정 데이터베이스에 대한 연결 (및 커서)을 얻을 수 있습니다 . &lt;code&gt;django.db.connections&lt;/code&gt; 는 별명을 사용하여 특정 연결을 검색 할 수있는 사전과 유사한 객체입니다.</target>
        </trans-unit>
        <trans-unit id="0ecf06722ffb34ee4a0fedfb0511c983d4a713e0" translate="yes" xml:space="preserve">
          <source>If you are using multiple database caches, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; creates one table for each cache.</source>
          <target state="translated">여러 데이터베이스 캐시를 사용하는 경우 &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt; 은 각 캐시에 대해 하나의 테이블을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c1f1afe7956d536875c96cebe4354cfc56b04593" translate="yes" xml:space="preserve">
          <source>If you are using multiple databases, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; observes the &lt;code&gt;allow_migrate()&lt;/code&gt; method of your database routers (see below).</source>
          <target state="translated">여러 데이터베이스를 사용하는 경우 &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt; 은 데이터베이스 라우터 의 &lt;code&gt;allow_migrate()&lt;/code&gt; 메소드를 관찰합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="df924b4a3089f458dd4a26a99d7de10d2a275ae2" translate="yes" xml:space="preserve">
          <source>If you are using test decorators, they must be async-compatible to ensure they work correctly. Django&amp;rsquo;s built-in decorators will behave correctly, but third-party ones may appear to not execute (they will &amp;ldquo;wrap&amp;rdquo; the wrong part of the execution flow and not your test).</source>
          <target state="translated">If you are using test decorators, they must be async-compatible to ensure they work correctly. Django&amp;rsquo;s built-in decorators will behave correctly, but third-party ones may appear to not execute (they will &amp;ldquo;wrap&amp;rdquo; the wrong part of the execution flow and not your test).</target>
        </trans-unit>
        <trans-unit id="d8e86b0dcae3d153f97ecddffbaca181d07969ec" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend, this probably isn&amp;rsquo;t the documentation you&amp;rsquo;re looking for. An instance of the &lt;code&gt;Engine&lt;/code&gt; class described below is accessible using the &lt;code&gt;engine&lt;/code&gt; attribute of that backend and any attribute defaults mentioned below are overridden by what&amp;rsquo;s passed by &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 백엔드를 사용하는 경우 이것은 아마도 찾고있는 문서가 아닐 것입니다. 아래에 설명 된 &lt;code&gt;Engine&lt;/code&gt; 클래스 의 인스턴스는 해당 백엔드 의 &lt;code&gt;engine&lt;/code&gt; 속성을 사용하여 액세스 할 수 있으며 아래에 언급 된 속성 기본값은 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 가 전달한 내용으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="98aa047d8bc9dd103405d4da35377acc8117f24d" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt;&lt;code&gt;from_queryset()&lt;/code&gt;&lt;/a&gt; function to dynamically generate a manager class, you need to inherit from the generated class to make it importable:</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt; &lt;code&gt;from_queryset()&lt;/code&gt; &lt;/a&gt; 동적으로 관리 클래스를 생성하는 기능을, 당신은 수입 할 수 있도록 생성 된 클래스에서 상속해야합니다</target>
        </trans-unit>
        <trans-unit id="b152ab1851b4b76c1b0fadc99e24633039333bc3" translate="yes" xml:space="preserve">
          <source>If you are using the default &lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt;, the string value will be appended to your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage&amp;rsquo;s documentation to see how it handles &lt;code&gt;upload_to&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; 를&lt;/a&gt; 사용하는 경우 , 문자열 값이 &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 경로에 추가되어 업로드 된 파일이 저장 될 로컬 파일 시스템의 위치를 ​​형성합니다. 다른 스토리지를 사용하는 경우 스토리지의 문서를 확인하여 해당 스토리지가 &lt;code&gt;upload_to&lt;/code&gt; 를 처리하는 방법을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d24da33ace038770df53fb75680d36c64adccce" translate="yes" xml:space="preserve">
          <source>If you are using the default test runner, you can control this with the the &lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt;&lt;code&gt;SERIALIZE&lt;/code&gt;&lt;/a&gt; entry in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary.</source>
          <target state="translated">기본 테스트 러너를 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt; 사전 의 &lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt; &lt;code&gt;SERIALIZE&lt;/code&gt; &lt;/a&gt; 항목으로 이를 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b67e56408c732a18c6ba1adae555cdf257848ab" translate="yes" xml:space="preserve">
          <source>If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use &lt;code&gt;Meta.proxy=True&lt;/code&gt;. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved.</source>
          <target state="translated">모델의 Python 전용 동작을 변경하려고하지만 원본과 동일한 필드를 모두 유지하려면 &lt;code&gt;Meta.proxy=True&lt;/code&gt; 를 사용 하십시오 . 이것은 프록시 모델이 데이터가 저장 될 때 원본 모델의 스토리지 구조의 정확한 사본이되도록 설정합니다.</target>
        </trans-unit>
        <trans-unit id="f2bd0fdb6a5a5ac5aa3b6f2e67b4ab2cda67e9ec" translate="yes" xml:space="preserve">
          <source>If you are writing a &lt;a href=&quot;../../intro/reusable-apps&quot;&gt;reusable application&lt;/a&gt; you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure.</source>
          <target state="translated">&lt;a href=&quot;../../intro/reusable-apps&quot;&gt;재사용 가능한 애플리케이션&lt;/a&gt; 을 작성하는 경우 Django 테스트 러너를 사용하여 자체 테스트 스위트를 실행하여 Django 테스트 인프라의 이점을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63f4345566a629d77c36a5b719a36c80b1781cf7" translate="yes" xml:space="preserve">
          <source>If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on &lt;code&gt;max_length&lt;/code&gt; for some backends. Refer to the &lt;a href=&quot;../databases&quot;&gt;database backend notes&lt;/a&gt; for details.</source>
          <target state="translated">여러 데이터베이스 백엔드에 이식 가능해야하는 애플리케이션을 작성하는 경우 일부 백엔드 에 대한 &lt;code&gt;max_length&lt;/code&gt; 에 제한이 있음을 알고 있어야합니다 . 자세한 내용은 &lt;a href=&quot;../databases&quot;&gt;데이터베이스 백엔드 메모&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3ec3b03a16835f16337bac3782d93796fddb90be" translate="yes" xml:space="preserve">
          <source>If you are writing custom views for Django&amp;rsquo;s admin (or need the same authorization check that the built-in views use), you may find the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt;&lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt;&lt;/a&gt; decorator a useful alternative to &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">Django의 관리자에 대한 사용자 정의보기를 작성하거나 내장보기가 사용하는 것과 동일한 권한 검사가 필요한 경우 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt; &lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt; &lt;/a&gt; 데코레이터가 &lt;code&gt;login_required()&lt;/code&gt; 의 유용한 대안을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9260861ea3c89683f0065f3584c6348bda3c70e8" translate="yes" xml:space="preserve">
          <source>If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with 1.7&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little. Also note that there are a few new database features that migrations will look for: &lt;code&gt;can_rollback_ddl&lt;/code&gt; and &lt;code&gt;supports_combined_alters&lt;/code&gt; are the most important.</source>
          <target state="translated">Django에 대한 타사 데이터베이스 백엔드를 작성하거나 유지 관리하는 경우 1.7의 마이그레이션 기능을 사용하려면 &lt;code&gt;SchemaEditor&lt;/code&gt; 구현 을 제공해야합니다. 그러나 데이터베이스가 SQL 및 관계형 디자인에서는 내장 된 Django &lt;code&gt;SchemaEditor&lt;/code&gt; 클래스 중 하나를 서브 클래 싱 하고 구문을 약간 조정할 수 있어야합니다. 또한 마이그레이션 할 새로운 데이터베이스 기능이 몇 가지 있습니다. &lt;code&gt;can_rollback_ddl&lt;/code&gt; 및 &lt;code&gt;supports_combined_alters&lt;/code&gt; 가 가장 중요합니다.</target>
        </trans-unit>
        <trans-unit id="b0f8725f4059061d6c5d765e52cefa75411612d2" translate="yes" xml:space="preserve">
          <source>If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with Django&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little.</source>
          <target state="translated">If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with Django&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little.</target>
        </trans-unit>
        <trans-unit id="6e12212c9814a4d33e32e4d9464358cf6356b217" translate="yes" xml:space="preserve">
          <source>If you assign a value of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to an attribute, it will be rendered as an HTML5 boolean attribute:</source>
          <target state="translated">속성 에 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 값을 지정 하면 HTML5 부울 속성으로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="32c8444bd1418d1e80bc0e62c5a90e8f82286fbe" translate="yes" xml:space="preserve">
          <source>If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you&amp;rsquo;re changing the existing record rather than creating a new one.</source>
          <target state="translated">자동 기본 키 값을 수동으로 할당하는 경우 이미 존재하는 기본 키 값을 사용하지 마십시오! 데이터베이스에 이미 존재하는 명시 적 기본 키 값을 사용하여 새 객체를 생성하면 Django는 기존 레코드를 새로 작성하지 않고 변경한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="49a2f3768ca62045d71dd6c07b469ec6cd3d26bc" translate="yes" xml:space="preserve">
          <source>If you attempt to access a database that you haven&amp;rsquo;t defined in your &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting, Django will raise a &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 설정 에서 정의하지 않은 데이터베이스에 액세스하려고하면 Django가 &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="094a5a53db7e5fc234781db19fdb93e284cd8498" translate="yes" xml:space="preserve">
          <source>If you attempt to insert a new row that conflicts with an existing row, an &lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised. Similarly, when update conflicts with an existing row.</source>
          <target state="translated">기존 행과 충돌하는 새 행을 삽입하려고하면 &lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 마찬가지로 업데이트가 기존 행과 충돌하는 경우</target>
        </trans-unit>
        <trans-unit id="b554a2162422140f6059440c8b501ad2c5a78b5b" translate="yes" xml:space="preserve">
          <source>If you attempt to use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; and pass a field name that doesn&amp;rsquo;t exist, Django will raise a &lt;code&gt;ValueError&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 사용하려고 시도하고 존재하지 않는 필드 이름을 전달하면 Django는 &lt;code&gt;ValueError&lt;/code&gt; 를 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="4e5abf4e7be3fc5b817d5e64f617996405c68b1a" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;formset.save(commit=False)&lt;/code&gt;, objects will not be deleted automatically. You&amp;rsquo;ll need to call &lt;code&gt;delete()&lt;/code&gt; on each of the &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt;&lt;code&gt;formset.deleted_objects&lt;/code&gt;&lt;/a&gt; to actually delete them:</source>
          <target state="translated">&lt;code&gt;formset.save(commit=False)&lt;/code&gt; 를 호출하면 객체가 자동으로 삭제되지 않습니다. 각 &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt; &lt;code&gt;formset.deleted_objects&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;delete()&lt;/code&gt; 를 호출 하여 실제로 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="77f2d3ee05bddf46e62d79be0db43fed60754a7d" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;get_template('story_detail.html')&lt;/code&gt;, here are the files Django will look for, in order:</source>
          <target state="translated">&lt;code&gt;get_template('story_detail.html')&lt;/code&gt; 을 호출하면 다음 과 같이 Django가 찾을 파일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="81d2651eaffa16d0fff33c40f11a5412ce1b24bb" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;on_commit()&lt;/code&gt; while there isn&amp;rsquo;t an active transaction, the callback will be executed immediately.</source>
          <target state="translated">활성 트랜잭션이없는 동안 &lt;code&gt;on_commit()&lt;/code&gt; 을 호출 하면 콜백이 즉시 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="fd4a96e10fe18bc75c5654babe72785efc64e7dd" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt;, here&amp;rsquo;s what Django will look for:</source>
          <target state="translated">&lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt; 을 호출하면 Django에서 다음을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="b2232cc0a9efa6073693abc788397e1cd49fb07c" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t find the solution to your problem here then participate in the community! You can:</source>
          <target state="translated">여기서 문제에 대한 해결책을 찾을 수 없다면 커뮤니티에 참여하십시오! 당신은 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f9c5827d1b1d34ede00df19d4fc1cff6b7b1859a" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is &lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI&lt;/a&gt;; it works very well with &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;. Additionally, Django follows the WSGI spec (&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;), which allows it to run on a variety of server platforms.</source>
          <target state="translated">어떤 이유로 mod_wsgi를 사용할 수 없다면 Django는 다른 많은 배포 옵션을 지원합니다. 하나는 &lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI입니다&lt;/a&gt; . 그것은 &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt; 와 매우 잘 작동합니다 . 또한 Django는 WSGI 사양 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; )을 준수하여 다양한 서버 플랫폼에서 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="714e0fc374856568ae969db6c05be8f214cc209c" translate="yes" xml:space="preserve">
          <source>If you catch exceptions raised by raw SQL queries, Django&amp;rsquo;s behavior is unspecified and database-dependent.</source>
          <target state="translated">원시 SQL 쿼리에서 발생한 예외를 발견하면 장고의 동작은 지정되지 않으며 데이터베이스에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="46398ea388c4a399cca78d1e3fb2ac07fe7b2c36" translate="yes" xml:space="preserve">
          <source>If you change a &lt;a href=&quot;../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to use a &lt;code&gt;through&lt;/code&gt; model, the default migration will delete the existing table and create a new one, losing the existing relations. To avoid this, you can use &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt; to rename the existing table to the new table name whilst telling the migration autodetector that the new model has been created. You can check the existing table name through &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/django-admin#django-admin-dbshell&quot;&gt;&lt;code&gt;dbshell&lt;/code&gt;&lt;/a&gt;. You can check the new table name with the through model&amp;rsquo;s &lt;code&gt;_meta.db_table&lt;/code&gt; property. Your new &lt;code&gt;through&lt;/code&gt; model should use the same names for the &lt;code&gt;ForeignKey&lt;/code&gt;s as Django did. Also if it needs any extra fields, they should be added in operations after &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If you change a &lt;a href=&quot;../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; to use a &lt;code&gt;through&lt;/code&gt; model, the default migration will delete the existing table and create a new one, losing the existing relations. To avoid this, you can use &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; &lt;/a&gt; to rename the existing table to the new table name whilst telling the migration autodetector that the new model has been created. You can check the existing table name through &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;../ref/django-admin#django-admin-dbshell&quot;&gt; &lt;code&gt;dbshell&lt;/code&gt; &lt;/a&gt;. You can check the new table name with the through model&amp;rsquo;s &lt;code&gt;_meta.db_table&lt;/code&gt; property. Your new &lt;code&gt;through&lt;/code&gt; model should use the same names for the &lt;code&gt;ForeignKey&lt;/code&gt; s as Django did. Also if it needs any extra fields, they should be added in operations after &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="812b7dd3005f0d1c3f0522730a119cabfc50f94f" translate="yes" xml:space="preserve">
          <source>If you customized the OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; variables accordingly.</source>
          <target state="translated">If you customized the OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; variables accordingly.</target>
        </trans-unit>
        <trans-unit id="94e38667622f6c2c7156cdc76fe9c7801210a45e" translate="yes" xml:space="preserve">
          <source>If you customized the Python or OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; and/or &lt;code&gt;PYTHON_ROOT&lt;/code&gt; variables accordingly.</source>
          <target state="translated">Python 또는 OSGeo4W 설치 디렉토리를 사용자 정의한 경우 그에 따라 &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; 및 / 또는 &lt;code&gt;PYTHON_ROOT&lt;/code&gt; 변수 를 수정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="daa850f3332eec5c502db816abab6725f3877956" translate="yes" xml:space="preserve">
          <source>If you decide not to loop over the radio buttons &amp;ndash; e.g., if your template includes &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; &amp;ndash; they&amp;rsquo;ll be output in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags, as above.</source>
          <target state="translated">예를 들어 템플릿에 &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; 포함 된 라디오 버튼을 반복하지 않으려 는 경우 위와 같이 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그 와 함께 &amp;lt; &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 로 출력됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e464f5ba0eea9891fc2679642fe2eb1b677c058" translate="yes" xml:space="preserve">
          <source>If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</source>
          <target state="translated">Django의 최신 개발 버전을 사용하기로 결정한 경우 &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;개발 타임 라인에&lt;/a&gt; 주의를 기울이고 다음 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;릴리스&lt;/a&gt; 에 대한 릴리스 정보 를 계속 확인하고 싶을 것 입니다. 이를 통해 사용하려는 새로운 기능과 Django 사본을 업데이트 할 때 코드를 변경해야 할 사항을 파악할 수 있습니다. 안정적인 릴리스를 위해 필요한 변경 내용이 릴리스 정보에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6211d5ac8fb417dfa2dabd5bde70687e0d4cb0f" translate="yes" xml:space="preserve">
          <source>If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</source>
          <target state="translated">If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</target>
        </trans-unit>
        <trans-unit id="367511bd4ccbdd57657dc6f20fe5383038baa533" translate="yes" xml:space="preserve">
          <source>If you declare a hybrid middleware that supports both synchronous and asynchronous calls, the kind of call you get may not match the underlying view. Django will optimize the middleware call stack to have as few sync/async transitions as possible.</source>
          <target state="translated">If you declare a hybrid middleware that supports both synchronous and asynchronous calls, the kind of call you get may not match the underlying view. Django will optimize the middleware call stack to have as few sync/async transitions as possible.</target>
        </trans-unit>
        <trans-unit id="ad704302a2e0f4e5bbd68ed3a827973dea658d2e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, you can mark the language names as translation strings using the &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정 을 정의 하면 &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 언어 이름을 번역 문자열로 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b08ee922d63ba491bb2cdb4cdfbeae244906b41e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, as explained in the previous bullet, you can mark the language names as translation strings &amp;ndash; but use &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; to avoid a circular import.</source>
          <target state="translated">이전 글 머리표에서 설명한대로 사용자 정의 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정 을 정의 하면 언어 이름을 변환 문자열로 표시 할 수 있지만 순환 가져 오기를 피하려면 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fcb6c3e1edc1b97b11ed2b6af3ff6371f63271e0" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, &lt;code&gt;ModelAdmin&lt;/code&gt; ignores this value, overriding it with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt;&lt;code&gt;ModelAdmin.list_editable&lt;/code&gt;&lt;/a&gt; attribute. The easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use.</source>
          <target state="translated">당신이 정의하는 경우 &lt;code&gt;Meta.model&lt;/code&gt; 의 A의 속성을 &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; , 당신은 또한 정의해야합니다 &lt;code&gt;Meta.fields&lt;/code&gt; 의 속성 (또는 &lt;code&gt;Meta.exclude&lt;/code&gt; 의 속성). 그러나 &lt;code&gt;ModelAdmin&lt;/code&gt; 은이 값을 무시하고 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt; &lt;code&gt;ModelAdmin.list_editable&lt;/code&gt; &lt;/a&gt; 속성으로 대체 합니다. &lt;code&gt;ModelAdmin&lt;/code&gt; 이 사용할 올바른 모델을 제공 하므로 가장 쉬운 솔루션은 &lt;code&gt;Meta.model&lt;/code&gt; 속성 을 생략하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="485fe478429ed2c9c1a4f227e8e46539022690b8" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, since the admin has its own way of defining fields, the &lt;code&gt;Meta.fields&lt;/code&gt; attribute will be ignored.</source>
          <target state="translated">당신이 정의하는 경우 &lt;code&gt;Meta.model&lt;/code&gt; 의 A의 속성을 &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; , 당신은 또한 정의해야합니다 &lt;code&gt;Meta.fields&lt;/code&gt; 의 속성 (또는 &lt;code&gt;Meta.exclude&lt;/code&gt; 의 속성). 그러나 관리자는 필드를 정의하는 고유 한 방법이 있으므로 &lt;code&gt;Meta.fields&lt;/code&gt; 속성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="45386bfd1f22aa5a94eb25eb7ab85058786a5cc9" translate="yes" xml:space="preserve">
          <source>If you define your own test runner class and point &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt;&lt;code&gt;TEST_RUNNER&lt;/code&gt;&lt;/a&gt; at that class, Django will execute your test runner whenever you run &lt;code&gt;./manage.py test&lt;/code&gt;. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have.</source>
          <target state="translated">자체 테스트 러너 클래스를 정의 하고 해당 클래스에서 &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt; &lt;code&gt;TEST_RUNNER&lt;/code&gt; &lt;/a&gt; 를 가리키면 Django는 &lt;code&gt;./manage.py test&lt;/code&gt; 를 실행할 때마다 테스트 러너를 실행 합니다. 이런 식으로 Python 코드에서 실행할 수있는 테스트 프레임 워크를 사용하거나 Django 테스트 실행 프로세스를 수정하여 테스트 요구 사항을 충족시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea90d73bc6981a1948260ffdf5034a68bee6dab3" translate="yes" xml:space="preserve">
          <source>If you delete a field from a model instance, accessing it again reloads the value from the database:</source>
          <target state="translated">모델 인스턴스에서 필드를 삭제하면 다시 액세스하면 데이터베이스에서 값이 다시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="cff220c390a9ab95545f838c9087be24651f1351" translate="yes" xml:space="preserve">
          <source>If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt;, which is the default):</source>
          <target state="translated">리포터를 삭제하면 그의 기사가 삭제됩니다 ( &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt; &lt;/a&gt; 가 django.db.models.ForeignKey.on_delete 가 &lt;code&gt;CASCADE&lt;/code&gt; 로 설정된 것으로 가정 한 경우 ).</target>
        </trans-unit>
        <trans-unit id="3e5714dd7ed956c18562b5fc034b352464e8a7d4" translate="yes" xml:space="preserve">
          <source>If you delete a reporter, their articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt;, which is the default):</source>
          <target state="translated">If you delete a reporter, their articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt; &lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt; , which is the default):</target>
        </trans-unit>
        <trans-unit id="d6c2e53ecc92c0f84dc913ba54c33563aaf304cc" translate="yes" xml:space="preserve">
          <source>If you detect errors in multiple fields during &lt;code&gt;Model.clean()&lt;/code&gt;, you can also pass a dictionary mapping field names to errors:</source>
          <target state="translated">&lt;code&gt;Model.clean()&lt;/code&gt; 중에 여러 필드에서 오류를 감지 하면 사전 맵핑 필드 이름을 오류에 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="48e44cf0802dee16054df73fe1871ad99f86e145" translate="yes" xml:space="preserve">
          <source>If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the &lt;code&gt;ValidationError&lt;/code&gt; constructor.</source>
          <target state="translated">정리 방법 중 여러 오류를 감지하고 모든 오류를 양식 제출자에게 알리려면 오류 목록을 &lt;code&gt;ValidationError&lt;/code&gt; 생성자 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4cb2bdf9479ffe7ea003c7007bb350d20e0ee892" translate="yes" xml:space="preserve">
          <source>If you disabled it, which is not recommended, you can use &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; on particular views you want to protect (see below).</source>
          <target state="translated">비활성화 한 경우 (권장하지 않음 &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt; 보호하려는 특정보기에서 csrf_protect () 를 사용할 수 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="2479d1d20a26faec2996d634b0774780be84066c" translate="yes" xml:space="preserve">
          <source>If you do either of the first two steps, keep an eye out for parts of the documentation marked &lt;strong&gt;new in development version&lt;/strong&gt;. That phrase flags features that are only available in development versions of Django, and they likely won&amp;rsquo;t work with an official release.</source>
          <target state="translated">처음 두 단계 중 하나를 수행하는 경우 &lt;strong&gt;개발 버전에서 새로&lt;/strong&gt; 표시된 문서의 일부를 주시하십시오 . 이 문구는 Django의 개발 버전에서만 사용할 수있는 기능을 표시하며 공식 릴리스에서는 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aaa0c487bb4c6a6eabbf43dd80c991c63a022d7" translate="yes" xml:space="preserve">
          <source>If you do not specify any app, all apps will be checked.</source>
          <target state="translated">앱을 지정하지 않으면 모든 앱이 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="4141223977e7c136210c586bc61b2fd0accffd3c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; argument for the &lt;code&gt;OneToOneField&lt;/code&gt;, Django will use the lowercase name of the current model as default value.</source>
          <target state="translated">&lt;code&gt;OneToOneField&lt;/code&gt; 에&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 인수를 지정하지 않으면 Django는 현재 모델의 소문자 이름을 기본값으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d8109cdfe40c6ccae39110a25cad8a7f109000c4" translate="yes" xml:space="preserve">
          <source>If you do not want symmetry in many-to-many relationships with &lt;code&gt;self&lt;/code&gt;, set &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt;&lt;code&gt;symmetrical&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;. This will force Django to add the descriptor for the reverse relationship, allowing &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relationships to be non-symmetrical.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와의 다 대다 관계에서 대칭을 원하지 않으면 &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt; &lt;code&gt;symmetrical&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;False&lt;/code&gt; 로 설정하십시오 . 이렇게하면 Django가 역 관계에 대한 설명자를 추가하여 &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 관계가 비대칭이되도록합니다.</target>
        </trans-unit>
        <trans-unit id="d7c82087cc8221fab70b35945b3651dea07d149a" translate="yes" xml:space="preserve">
          <source>If you do not want to wait for the currently running test to finish, you can press &lt;code&gt;Ctrl-C&lt;/code&gt; a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed.</source>
          <target state="translated">현재 실행중인 테스트가 끝날 때까지 기다리지 않으려면 &lt;code&gt;Ctrl-C&lt;/code&gt; 를 두 번 누르면 테스트 실행이 즉시 중단되지만 정상적으로 실행되지는 않습니다. 중단 전에 실행 된 테스트에 대한 세부 사항은보고되지 않으며 실행으로 작성된 테스트 데이터베이스는 파기되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18efad3241b2dca59f5e6839d85c3fd25968e685" translate="yes" xml:space="preserve">
          <source>If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional &lt;code&gt;salt&lt;/code&gt; argument to the &lt;code&gt;Signer&lt;/code&gt; class. Using a salt will seed the signing hash function with both the salt and your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">특정 문자열이 발생할 때마다 동일한 서명 해시를 가지지 않으려면 선택적 &lt;code&gt;salt&lt;/code&gt; 인수를 &lt;code&gt;Signer&lt;/code&gt; 클래스에 사용할 수 있습니다 . 솔트를 사용하면 솔트와 &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 모두에 서명 해시 함수가 시드됩니다 .</target>
        </trans-unit>
        <trans-unit id="0bfd8f75b46ff74579ca2af7a7939f691c4a818d" translate="yes" xml:space="preserve">
          <source>If you do override this method, you must return the value of the attribute at the end. You should also update the model&amp;rsquo;s attribute if you make any changes to the value so that code holding references to the model will always see the correct value.</source>
          <target state="translated">이 메소드를 대체하면 끝에 속성 값을 리턴해야합니다. 모델을 참조하는 코드가 항상 올바른 값을 볼 수 있도록 값을 변경하는 경우 모델의 속성도 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="3bc531fc3e6fe0dda101c4233233899fb5df0175" translate="yes" xml:space="preserve">
          <source>If you do want to allow Django to manage the table&amp;rsquo;s lifecycle, you&amp;rsquo;ll need to change the &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed&lt;/code&gt;&lt;/a&gt; option above to &lt;code&gt;True&lt;/code&gt; (or remove it because &lt;code&gt;True&lt;/code&gt; is its default value).</source>
          <target state="translated">Django가 테이블의 수명주기를 관리하게하려면 위 의 &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed&lt;/code&gt; &lt;/a&gt; 옵션을 &lt;code&gt;True&lt;/code&gt; 로 변경 하거나 &lt;code&gt;True&lt;/code&gt; 가 기본값 이므로 제거해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1c3cd8e2ea1d7324cd1b2bd74b7c1b2da10ad473" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t add the &lt;code&gt;related_query_name&lt;/code&gt;, you can do the same types of lookups manually:</source>
          <target state="translated">If you don&amp;rsquo;t add the &lt;code&gt;related_query_name&lt;/code&gt; , you can do the same types of lookups manually:</target>
        </trans-unit>
        <trans-unit id="94bbf9a3b61ed7ba431cfe4c7c55a2f5b58d406a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have &lt;code&gt;pip&lt;/code&gt;, follow the &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;installation instructions&lt;/a&gt; to install it.</source>
          <target state="translated">당신이없는 경우 &lt;code&gt;pip&lt;/code&gt; 의 따라 &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;설치 지침을&lt;/a&gt; 설치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83b4541d75cf80e630fb9cb0eae0f6dcce396113" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have access to the request object, you can use the &lt;code&gt;get_current()&lt;/code&gt; method of the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; model&amp;rsquo;s manager. You should then ensure that your settings file does contain the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting. This example is equivalent to the previous one:</source>
          <target state="translated">요청 객체에 액세스 할 수없는 경우 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 모델 관리자 의 &lt;code&gt;get_current()&lt;/code&gt; 메소드를 사용할 수 있습니다 . 그런 다음 설정 파일에 &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt; 설정 이 포함되어 있는지 확인해야 합니다. 이 예제는 이전 예제와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="6e6f1ebd340eb9d605be9c4db45ebb236fd2e050" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have the &lt;code&gt;gettext&lt;/code&gt; utilities installed, &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; will create empty files. If that&amp;rsquo;s the case, either install the &lt;code&gt;gettext&lt;/code&gt; utilities or copy the English message file (&lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt;) if available and use it as a starting point, which is an empty translation file.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; 유틸리티가 설치되어 있지 않으면 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 가 빈 파일을 만듭니다. 이 경우 &lt;code&gt;gettext&lt;/code&gt; 유틸리티 를 설치 하거나 영어 메시지 파일 ( &lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt; )을 복사하여 시작점으로 사용하십시오 (빈 번역 파일).</target>
        </trans-unit>
        <trans-unit id="4f1d2a7a739cbcb4a30351e90054953707bb1564" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t include the &lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt;&lt;code&gt;PermissionsMixin&lt;/code&gt;&lt;/a&gt;, you must ensure you don&amp;rsquo;t invoke the permissions methods on &lt;code&gt;ModelBackend&lt;/code&gt;. &lt;code&gt;ModelBackend&lt;/code&gt; assumes that certain fields are available on your user model. If your user model doesn&amp;rsquo;t provide those fields, you&amp;rsquo;ll receive database errors when you check permissions.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt; &lt;code&gt;PermissionsMixin&lt;/code&gt; 을&lt;/a&gt; 포함 하지 않으면 &lt;code&gt;ModelBackend&lt;/code&gt; 에서 권한 메소드를 호출하지 않아야합니다 . &lt;code&gt;ModelBackend&lt;/code&gt; 는 사용자 필드에서 특정 필드를 사용할 수 있다고 가정합니다. 사용자 모델이 해당 필드를 제공하지 않으면 권한을 확인할 때 데이터베이스 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="35899ce1414f3555035a9788cf172f76ca6773ef" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t like the long &lt;code&gt;gettext_lazy&lt;/code&gt; name, you can alias it as &lt;code&gt;_&lt;/code&gt; (underscore), like so:</source>
          <target state="translated">긴 &lt;code&gt;gettext_lazy&lt;/code&gt; 이름 이 마음에 들지 않으면 다음과 같이 별명을 &lt;code&gt;_&lt;/code&gt; (밑줄) 로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7c2f2ae002997f7ed67a2217c27f8708bf96ef6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t need to have the human-readable names translated, you can have them inferred from the member name (replacing underscores with spaces and using title-case):</source>
          <target state="translated">사람이 읽을 수있는 이름을 번역 할 필요가없는 경우 멤버 이름에서 공백을 사용하여 밑줄을 바꾸고 제목을 사용하여 이름을 추론 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8611658ee88ea0ad3dcc2ed7a1a97af6dae4a361" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t pass any values to &lt;code&gt;values_list()&lt;/code&gt;, it will return all the fields in the model, in the order they were declared.</source>
          <target state="translated">&lt;code&gt;values_list()&lt;/code&gt; 값을 전달하지 않으면 선언 된 순서대로 모델의 모든 필드가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="857e12793ad461caf04fff1ba581da785c3a5bcb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a lookup type &amp;ndash; that is, if your keyword argument doesn&amp;rsquo;t contain a double underscore &amp;ndash; the lookup type is assumed to be &lt;code&gt;exact&lt;/code&gt;.</source>
          <target state="translated">조회 유형을 제공하지 않으면, 즉 키워드 인수에 이중 밑줄이없는 경우 조회 유형은 &lt;code&gt;exact&lt;/code&gt; 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="b49754202789d5dcf7dd5093a036116cfc0b7e7b" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a value for &lt;code&gt;content_type&lt;/code&gt;, the values in &lt;code&gt;data&lt;/code&gt; will be transmitted with a content type of &lt;em&gt;multipart/form-data&lt;/em&gt;. In this case, the key-value pairs in &lt;code&gt;data&lt;/code&gt; will be encoded as a multipart message and used to create the POST data payload.</source>
          <target state="translated">&lt;code&gt;content_type&lt;/code&gt; 에 값을 제공하지 않으면 &lt;code&gt;data&lt;/code&gt; 의 값 이 &lt;em&gt;multipart / form-data&lt;/em&gt; 의 컨텐츠 유형으로 전송됩니다 . 이 경우 &lt;code&gt;data&lt;/code&gt; 의 키-값 쌍은 멀티 파트 메시지로 인코딩되어 POST 데이터 페이로드를 작성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7e2bf3116cfcd8bcac568c28322326cd296119eb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt;, Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</source>
          <target state="translated">If you don&amp;rsquo;t set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt; , Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</target>
        </trans-unit>
        <trans-unit id="dd179816ea4797c0c27e26002186e53c76cd44e3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt;, Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을 설정 하지 않고 &lt;code&gt;configure()&lt;/code&gt; 호출하지 않으면 Django는 설정에 처음 액세스 할 때 &lt;code&gt;ImportError&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6d28696ece852d234602878e925455bc5844a029" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;list_display&lt;/code&gt;, the admin site will display a single column that displays the &lt;code&gt;__str__()&lt;/code&gt; representation of each object.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; 를 설정하지 않으면 관리 사이트는 각 객체 의 &lt;code&gt;__str__()&lt;/code&gt; 표현을 표시하는 단일 열을 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="a163d2bcd9e6db7c5ea4d04d3672fd598949d73a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; for any fields in your model, Django will automatically add an &lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">당신은 지정하지 않으면 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; 모델의 모든 필드를 장고가 자동으로 추가됩니다 &lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; 을&lt;/a&gt; 당신이 세트 필요가 없습니다, 기본 키를 길게 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; 당신이를 오버라이드 (override) 할하지 않는 한 모든 필드에 기본 기본 키 동작. 자세한 내용은 &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;자동 기본 키 필드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="590c6fe5a79ddb6a0fb543209eff8fe3de9cd579" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;primary_key=True&lt;/code&gt; for any field in your model, Django will automatically add an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;code&gt;primary_key=True&lt;/code&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">당신은 지정하지 않으면 &lt;code&gt;primary_key=True&lt;/code&gt; 모델의 모든 필드를 들어, 장고가 자동으로 추가됩니다 &lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; 을&lt;/a&gt; 당신이 세트 필요가 없습니다, 기본 키를 길게 &lt;code&gt;primary_key=True&lt;/code&gt; 당신이를 오버라이드 (override) 할하지 않는 한 모든 필드에 기본 기본 키 동작. 자세한 내용은 &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;자동 기본 키 필드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="04c0cebe040a5a95be05e16a67b332d448a4cdf2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;using&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method will save into the default database allocated by the routers.</source>
          <target state="translated">당신은 지정하지 않으면 &lt;code&gt;using&lt;/code&gt; 의 &lt;code&gt;save()&lt;/code&gt; 메소드는 라우터에 의해 할당 된 기본 데이터베이스에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="538f16b988998147ff60490597be28bc48eafdda" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by &lt;code&gt;'_set'&lt;/code&gt;, just as it normally would be if you&amp;rsquo;d declared the field directly on the child class. For example, in the above code, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute was omitted, the reverse name for the &lt;code&gt;m2m&lt;/code&gt; field would be &lt;code&gt;childa_set&lt;/code&gt; in the &lt;code&gt;ChildA&lt;/code&gt; case and &lt;code&gt;childb_set&lt;/code&gt; for the &lt;code&gt;ChildB&lt;/code&gt; field.</source>
          <target state="translated">추상 기본 클래스의 필드에 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 속성을 지정하지 않으면 기본 리버스 이름은 일반적으로 필드를 직접 선언 한 경우와 마찬가지로 자식 클래스 이름과 &lt;code&gt;'_set'&lt;/code&gt; 이 됩니다. 어린이 수업에. 예를 들면, 상기 코드에서, &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; 의&lt;/a&gt; 속성이 생략하고, 역방향에 대한 이름 &lt;code&gt;m2m&lt;/code&gt; 필드는 다음 &lt;code&gt;childa_set&lt;/code&gt; 에 &lt;code&gt;ChildA&lt;/code&gt; 의 케이스 &lt;code&gt;childb_set&lt;/code&gt; 위한 &lt;code&gt;ChildB&lt;/code&gt; 의 필드.</target>
        </trans-unit>
        <trans-unit id="d339100c909e90a9e5e2bd7aa909352403fa7c4f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify an explicit &lt;code&gt;through&lt;/code&gt; model, there is still an implicit &lt;code&gt;through&lt;/code&gt; model class you can use to directly access the table created to hold the association. It has three fields to link the models.</source>
          <target state="translated">명시 적 &lt;code&gt;through&lt;/code&gt; 모델을 지정하지 않은 경우 연결을 유지하기 위해 생성 된 테이블에 직접 액세스하는 데 사용할 수 있는 암시 적 &lt;code&gt;through&lt;/code&gt; 모델 클래스 가 여전히 있습니다. 모델을 연결하는 3 개의 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="666775cf1efa55d8c53fada8a23701a9987dd988" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available.</source>
          <target state="translated">프록시 모델에 모델 관리자를 지정하지 않으면 모델 상위에서 관리자를 상속합니다. 프록시 모델에서 관리자를 정의하면 상위 클래스에 정의 된 모든 관리자를 계속 사용할 수 있지만 기본값이됩니다.</target>
        </trans-unit>
        <trans-unit id="2831dc2c926cb081c9cc4a7a2bc6243fa61db6a9" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify routing directions for the database cache model, the cache backend will use the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">데이터베이스 캐시 모델에 대한 라우팅 방향을 지정하지 않으면 캐시 백엔드는 &lt;code&gt;default&lt;/code&gt; 데이터베이스를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="fd4f5afea03a0462ac45abaffd1965ddce74ce84" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want any ordering to be applied to a query, not even the default ordering, call &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; with no parameters.</source>
          <target state="translated">기본 순서가 아닌 쿼리에 순서를 적용하지 않으려면 매개 변수없이 &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="02f361b8fc537e98dc07890f9bf542dd0f12b07f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways.</source>
          <target state="translated">사이트 별, 템플릿 별 또는 변수 별 수준에서 데이터를 자동 이스케이프하지 않으려면 여러 가지 방법으로 데이터를 끌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10b519cb1d07a83a7e8a3c4a687450cc5ea4bc3e" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want every application to be synchronized onto a particular database, you can define a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that implements a policy constraining the availability of particular models.</source>
          <target state="translated">모든 응용 프로그램을 특정 데이터베이스에 동기화하지 않으려는 경우 특정 모델의 가용성을 제한하는 정책을 구현하는 &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;데이터베이스 라우터&lt;/a&gt; 를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d81b301e8e3d1ffb784a67d2c862ad60178d6c04" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want multiple associations between the same instances, add a &lt;a href=&quot;constraints#django.db.models.UniqueConstraint&quot;&gt;&lt;code&gt;UniqueConstraint&lt;/code&gt;&lt;/a&gt; including the from and to fields. Django&amp;rsquo;s automatically generated many-to-many tables include such a constraint.</source>
          <target state="translated">If you don&amp;rsquo;t want multiple associations between the same instances, add a &lt;a href=&quot;constraints#django.db.models.UniqueConstraint&quot;&gt; &lt;code&gt;UniqueConstraint&lt;/code&gt; &lt;/a&gt; including the from and to fields. Django&amp;rsquo;s automatically generated many-to-many tables include such a constraint.</target>
        </trans-unit>
        <trans-unit id="fe1aecbe271aa338db0d87a905bab0dff7f004a6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to configure logging at all (or you want to manually configure logging using your own approach), you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;. This will disable the configuration process for &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging&lt;/a&gt;.</source>
          <target state="translated">로깅을 전혀 구성하지 않으려는 경우 (또는 자체 접근 방식을 사용하여 수동으로 로깅을 구성하려는 경우) &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정할 수 있습니다 . 이렇게하면 &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django의 기본 로깅에&lt;/a&gt; 대한 구성 프로세스가 비활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="35c4fdb0cd2c686ba39701ab3494c7c292bcb631" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to configure logging at all (or you want to manually configure logging using your own approach), you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;. This will disable the configuration process for &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging&lt;/a&gt;. Here&amp;rsquo;s an example that disables Django&amp;rsquo;s logging configuration and then manually configures logging:</source>
          <target state="translated">로깅을 전혀 구성하지 않으려는 경우 (또는 고유 한 방법을 사용하여 수동으로 로깅을 구성하려는 경우) &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정할 수 있습니다 . &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django의 기본 로깅&lt;/a&gt; 구성 프로세스가 비활성화됩니다 . 다음은 Django의 로깅 구성을 비활성화 한 다음 로깅을 수동으로 구성하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="77c86f64e5416c16d57ada9152596773e6ea1cc7" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use &lt;code&gt;icontains&lt;/code&gt; as the lookup, you can use any lookup by appending it the field. For example, you could use &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt; by setting &lt;code&gt;search_fields&lt;/code&gt; to &lt;code&gt;['first_name__exact']&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;icontains&lt;/code&gt; 을 조회 로 사용하지 않으려면 필드를 추가하여 모든 조회를 사용할 수 있습니다. 예를 들어 &lt;code&gt;search_fields&lt;/code&gt; 를 &lt;code&gt;['first_name__exact']&lt;/code&gt; 로 설정 하여 &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt; &lt;code&gt;exact&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31395295db9a85690ee46840f48259811129865d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use Python&amp;rsquo;s dictConfig format to configure your logger, you can specify your own configuration scheme.</source>
          <target state="translated">파이썬의 dictConfig 형식을 사용하여 로거를 구성하지 않으려는 경우 고유 한 구성 체계를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="515cdb51845c22c1192ff3cb9088b0aae43b5f38" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use messages, you can remove &lt;code&gt;'django.contrib.messages'&lt;/code&gt; from your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;MessageMiddleware&lt;/code&gt; line from &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;messages&lt;/code&gt; context processor from &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">당신이 메시지를 사용하지 않으려면, 당신은 제거 할 수 있습니다 &lt;code&gt;'django.contrib.messages'&lt;/code&gt; 당신의 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;MessageMiddleware&lt;/code&gt; 의 에서 라인 &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;messages&lt;/code&gt; 에서 상황에 맞는 프로세서 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f7e47131b63bc56e18f6396512e77f9352c9650" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use sessions, you might as well remove the &lt;code&gt;SessionMiddleware&lt;/code&gt; line from &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; from your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;ll save you a small bit of overhead.</source>
          <target state="translated">세션을 사용하지 않으려면 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; 에서 &lt;code&gt;SessionMiddleware&lt;/code&gt; 라인을 제거하십시오 . 약간의 오버 헤드를 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b1a1786e7b1cf25c6aacb2f5b78f4da284e5c48" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in &lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt;&lt;code&gt;django.contrib.auth.forms&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">내장보기를 사용하지 &lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt; &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; &lt;/a&gt; 기능을 위해 양식을 작성하지 않아도되는 편의를 원할 경우 인증 시스템은 django.contrib.auth.forms 에있는 몇 가지 내장 양식을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="4b45b7b54dc69e9c451ecaac2c9aed0cb4634c14" translate="yes" xml:space="preserve">
          <source>If you downloaded the &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; data earlier in the tutorial, then you can determine its path using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">튜토리얼의 앞부분에서 &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; 데이터 를 다운로드 한 경우 Python의 &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;pathlib.Path&lt;/code&gt; 를&lt;/a&gt; 사용하여 경로를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5c568e3de4c1c7c6a2712e65c1fa4112cf06d36a" translate="yes" xml:space="preserve">
          <source>If you downloaded the &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; data earlier in the tutorial, then you can determine its path using Python&amp;rsquo;s built-in &lt;code&gt;os&lt;/code&gt; module:</source>
          <target state="translated">튜토리얼의 앞부분에 있는 &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; 데이터 를 다운로드 한 경우 Python의 내장 &lt;code&gt;os&lt;/code&gt; 모듈을 사용하여 경로를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="455d07668f86b3453aef324fdb20b370ef36fb11" translate="yes" xml:space="preserve">
          <source>If you enable &lt;code&gt;redirect_authenticated_user&lt;/code&gt;, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this &amp;ldquo;&lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;social media fingerprinting&lt;/a&gt;&amp;rdquo; information leakage, host all images and your favicon on a separate domain.</source>
          <target state="translated">&lt;code&gt;redirect_authenticated_user&lt;/code&gt; 를 활성화 하면 다른 웹 사이트에서 웹 사이트의 이미지 파일에 대한 리디렉션 URL을 요청하여 방문자가 사이트에서 인증되었는지 확인할 수 있습니다. 이러한 &quot; &lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;소셜 미디어 지문 인식&lt;/a&gt; &quot;정보 유출 을 방지하려면 모든 이미지와 즐겨 찾기 아이콘을 별도의 도메인에 호스팅하십시오.</target>
        </trans-unit>
        <trans-unit id="6de81e981c118fcef157137194f59e4a18089f15" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt;&lt;code&gt;django.template.context_processors.i18n&lt;/code&gt;&lt;/a&gt; context processor, then each &lt;code&gt;RequestContext&lt;/code&gt; will have access to &lt;code&gt;LANGUAGES&lt;/code&gt;, &lt;code&gt;LANGUAGE_CODE&lt;/code&gt;, and &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; as defined above.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt; &lt;code&gt;django.template.context_processors.i18n&lt;/code&gt; &lt;/a&gt; 컨텍스트 프로세서 를 활성화하면 각 &lt;code&gt;RequestContext&lt;/code&gt; 는 위에 정의 된 &lt;code&gt;LANGUAGES&lt;/code&gt; , &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; 및 &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="729e00760630570ad607e0e6587465fb4412384e" translate="yes" xml:space="preserve">
          <source>If you enable this and need to send the value of the CSRF token with an AJAX request, your JavaScript must pull the value &lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;from a hidden CSRF token form input&lt;/a&gt; instead of &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;from the cookie&lt;/a&gt;.</source>
          <target state="translated">이를 활성화하고 AJAX 요청과 함께 CSRF 토큰의 값을 보내야하는 경우 JavaScript는 &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;쿠키&lt;/a&gt; 대신 &lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;숨겨진 CSRF 토큰 양식 입력에서&lt;/a&gt; 값 을 가져와야합니다 .</target>
        </trans-unit>
        <trans-unit id="eecda653f4341e8484e3844f08cb3debaa15b75a" translate="yes" xml:space="preserve">
          <source>If you enable this option and there is concurrent access to the async-unsafe parts of Django, you may suffer data loss or corruption. Be very careful and do not use this in production environments.</source>
          <target state="translated">이 옵션을 활성화하고 Django의 비동기 안전하지 않은 부분에 동시에 액세스하면 데이터가 손실되거나 손상 될 수 있습니다. 프로덕션 환경에서는 매우주의하여 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="690f4bcf8a157bd61ea9244f015553c0c9c48320" translate="yes" xml:space="preserve">
          <source>If you encounter an error during the installation, your system might be missing a dependency for one or more of the Python packages. Consult the failing package&amp;rsquo;s documentation or search the Web with the error message that you encounter.</source>
          <target state="translated">설치 중에 오류가 발생하면 시스템에 하나 이상의 Python 패키지에 대한 종속성이 누락되었을 수 있습니다. 실패한 패키지의 설명서를 참조하거나 발생한 오류 메시지로 웹을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="a6da4243a036aa29469a63cceb377bd8e3d4c0cc" translate="yes" xml:space="preserve">
          <source>If you encounter the following error when using &lt;code&gt;LayerMapping&lt;/code&gt; and MySQL:</source>
          <target state="translated">&lt;code&gt;LayerMapping&lt;/code&gt; 및 MySQL을 사용할 때 다음 오류가 발생하는 경우 :</target>
        </trans-unit>
        <trans-unit id="388118dd7f5efca0821c54391ac838c186b2e0db" translate="yes" xml:space="preserve">
          <source>If you encounter this error, most likely your code is comparing these two things:</source>
          <target state="translated">이 오류가 발생하면 코드가 다음 두 가지를 비교하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="453875e39942a1ebb0f9d4262e3a3da68e8a4e2c" translate="yes" xml:space="preserve">
          <source>If you encounter this error, you should fix your code to not call the offending code from an async context. Instead, write your code that talks to async-unsafe functions in its own, sync function, and call that using &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt;&lt;/a&gt; (or any other way of running sync code in its own thread).</source>
          <target state="translated">이 오류가 발생하면 비동기 컨텍스트에서 문제가되는 코드를 호출하지 않도록 코드를 수정해야합니다. 대신, 자체적 인 동기화 함수에서 비동기 안전하지 않은 함수와 통신하는 코드를 작성하고 &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt; &lt;/a&gt; (또는 자체 스레드에서 동기화 코드를 실행하는 다른 방법 ) 를 사용하여 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="9980a2e684bd447360258377b3fadc41c30bff5f" translate="yes" xml:space="preserve">
          <source>If you encounter this error, you should fix your code to not call the offending code from an async context; instead, write your code that talks to async-unsafe in its own, synchronous function, and call that using &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt;, or any other preferred way of running synchronous code in its own thread.</source>
          <target state="translated">이 오류가 발생하면 비동기 컨텍스트에서 문제가되는 코드를 호출하지 않도록 코드를 수정해야합니다. 대신 비동기 동기식으로 자체 비동기 함수로 통신하는 코드를 작성하고 &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt; 또는 자체 스레드에서 동기 코드를 실행하는 다른 기본 방법 을 사용하여 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="d44bb95904902ba04b1303875f334e1056e1ab60" translate="yes" xml:space="preserve">
          <source>If you expect a queryset to already return one row, you can use &lt;code&gt;get()&lt;/code&gt; without any arguments to return the object for that row:</source>
          <target state="translated">쿼리 세트가 이미 하나의 행을 반환 할 것으로 예상하는 경우 인수없이 &lt;code&gt;get()&lt;/code&gt; 을 사용 하여 해당 행의 객체를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c318da5e64838ab0635a2445fb6173a140f25b28" translate="yes" xml:space="preserve">
          <source>If you expect a queryset to return one row, you can use &lt;code&gt;get()&lt;/code&gt; without any arguments to return the object for that row:</source>
          <target state="translated">쿼리 셋이 하나의 행을 반환 할 것으로 예상되면 인수없이 &lt;code&gt;get()&lt;/code&gt; 을 사용 하여 해당 행의 객체를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b49a74a0b115f2bc1bddecbe1ff4268a349bfe46" translate="yes" xml:space="preserve">
          <source>If you find yourself doing this often, you might consider creating a custom &lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;inclusion tag&lt;/a&gt;.</source>
          <target state="translated">이 작업을 자주 수행하는 경우 사용자 정의 &lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;포함 태그&lt;/a&gt; 작성을 고려할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="08b548542180a05ddc30c78ed125af341d51e6c9" translate="yes" xml:space="preserve">
          <source>If you find yourself duplicating content in a number of templates, it probably means you should move that content to a &lt;code&gt;{% block %}&lt;/code&gt; in a parent template.</source>
          <target state="translated">여러 템플릿에서 콘텐츠를 복제 하는 경우 상위 템플릿에서 해당 콘텐츠를 &lt;code&gt;{% block %}&lt;/code&gt; 로 이동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ed5f5b63170617e447bc7e02390a27114c2912d5" translate="yes" xml:space="preserve">
          <source>If you find yourself needing a response class that Django doesn&amp;rsquo;t provide, you can create it with the help of &lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt;&lt;code&gt;http.HTTPStatus&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">Django가 제공하지 않는 응답 클래스가 필요한 경우 &lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt; &lt;code&gt;http.HTTPStatus&lt;/code&gt; &lt;/a&gt; 의 도움으로 만들 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a6acad9064fdbc3ea2b22b0bcfca87cc4ffc3ec7" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to write an SQL query that is too complex for Django&amp;rsquo;s database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see &lt;a href=&quot;sql&quot;&gt;Performing raw SQL queries&lt;/a&gt;.</source>
          <target state="translated">Django의 데이터베이스 맵퍼가 처리하기에 너무 복잡한 SQL 쿼리를 작성해야하는 경우 수동으로 SQL을 작성할 수 있습니다. 장고에는 원시 SQL 쿼리를 작성하기위한 몇 가지 옵션이 있습니다. &lt;a href=&quot;sql&quot;&gt;원시 SQL 쿼리 수행을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2ad1e5c64873a39591bff334fe500d215c29ad49" translate="yes" xml:space="preserve">
          <source>If you get a 404 when requesting &lt;code&gt;/books/acme/&lt;/code&gt;, check to ensure you actually have a Publisher with the name &amp;lsquo;ACME Publishing&amp;rsquo;. Generic views have an &lt;code&gt;allow_empty&lt;/code&gt; parameter for this case. See the &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based-views reference&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;/books/acme/&lt;/code&gt; 요청할 때 404가 표시되면 이름이 'ACME Publishing'인 게시자가 실제로 있는지 확인하십시오. 이 경우 일반 뷰에는 &lt;code&gt;allow_empty&lt;/code&gt; 매개 변수가 있습니다. 자세한 내용은 &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;클래스 기반 뷰 참조&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7f7742ad36754cc74a4903fa526fb289e4d0d2b4" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure Apache is configured to accept non-ASCII file names:</source>
          <target state="translated">당신이 얻을 경우 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 을 비 ASCII 문자가 포함 된 파일 이름으로 업로드 된 파일이 있는지 확인 아파치를 할 때 비 ASCII 파일 이름을 허용하도록 구성되어 있습니다 :</target>
        </trans-unit>
        <trans-unit id="7616ac6b8d7c3639812f35a6bc31e6c215afa7ae" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure uWSGI is configured to accept non-ASCII file names by adding this to your &lt;code&gt;uwsgi.ini&lt;/code&gt;:</source>
          <target state="translated">당신이 얻을 경우 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 을 비 ASCII 문자가 포함 된 파일 이름으로 업로드 파일을 만들 때 반드시 uWSGI은이를 추가하여 비 ASCII 파일 이름을 사용할 수 있도록 구성 &lt;code&gt;uwsgi.ini&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b3df4479a6ed3992aa239152c3ea200360f998d8" translate="yes" xml:space="preserve">
          <source>If you get an error page here, check that you&amp;rsquo;re going to &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http://localhost:8000/polls/&lt;/a&gt; and not &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;.</source>
          <target state="translated">여기에 오류 페이지가 표시되면 &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http : // localhost : 8000 /이&lt;/a&gt; 아닌 &lt;a href=&quot;http://localhost:8000/&quot;&gt;http : // localhost : 8000 / &lt;/a&gt;polls /로 가고 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="824450c24cc06cc488eedd8f4d3692a22b966d5a" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s an immutable object, such as a &lt;code&gt;str&lt;/code&gt;, or a callable object that returns a fresh mutable object each time, such as &lt;code&gt;dict&lt;/code&gt; or a function. Providing a mutable default object like &lt;code&gt;default={}&lt;/code&gt; or &lt;code&gt;default=[]&lt;/code&gt; shares the one object between all model instances.</source>
          <target state="translated">필드에 &lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; 를 제공하는 경우 &lt;code&gt;str&lt;/code&gt; 과 같은 변경 불가능한 객체 또는 &lt;code&gt;dict&lt;/code&gt; 또는 함수 와 같이 매번 새로운 변경 가능한 객체를 반환하는 호출 가능한 객체 인지 확인하십시오. &lt;code&gt;default={}&lt;/code&gt; 또는 &lt;code&gt;default=[]&lt;/code&gt; 와 같은 변경 가능한 기본 개체를 제공하면 모든 모델 인스턴스간에 하나의 개체를 공유합니다.</target>
        </trans-unit>
        <trans-unit id="069b129e53ef4f85715fcc43dda8a29afa775b23" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;dict&lt;/code&gt; (for an empty default) or a callable that returns a dict (such as a function). Incorrectly using &lt;code&gt;default={}&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;JSONField&lt;/code&gt;.</source>
          <target state="translated">당신은 필드에게 줄 경우 &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; , 그것은 호출 등의 확인 &lt;code&gt;dict&lt;/code&gt; (빈 기본의 경우) 또는 호출 반환 (예 : 함수 등) DICT. &lt;code&gt;default={}&lt;/code&gt; 를 잘못 사용 하면 &lt;code&gt;JSONField&lt;/code&gt; 의 모든 인스턴스간에 공유되는 변경 가능한 기본값이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="27410732e928525d8c647604e8926b8d0498bdf6" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;list&lt;/code&gt; (for an empty default) or a callable that returns a list (such as a function). Incorrectly using &lt;code&gt;default=[]&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;ArrayField&lt;/code&gt;.</source>
          <target state="translated">당신은 필드에게 줄 경우 &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; , 그것은 호출 등의 확인 &lt;code&gt;list&lt;/code&gt; (빈 기본의 경우) 또는 호출 반환 (예 : 함수 등) 목록입니다. &lt;code&gt;default=[]&lt;/code&gt; 를 잘못 사용 하면 모든 &lt;code&gt;ArrayField&lt;/code&gt; 인스턴스간에 공유되는 변경 가능한 기본값이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="e341d486c0a6527afd40afba3bbf387252d13451" translate="yes" xml:space="preserve">
          <source>If you had a URL &lt;code&gt;/redirect_me/&lt;/code&gt; that redirected to &lt;code&gt;/next/&lt;/code&gt;, that redirected to &lt;code&gt;/final/&lt;/code&gt;, this is what you&amp;rsquo;d see:</source>
          <target state="translated">&lt;code&gt;/next/&lt;/code&gt; 로 &lt;code&gt;/redirect_me/&lt;/code&gt; 되는 URL / redirect_me / 가 있고 &lt;code&gt;/final/&lt;/code&gt; 리디렉션 된 URL은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e18323392212f10a65b2daa3a1a10c84409a9d06" translate="yes" xml:space="preserve">
          <source>If you have a &amp;ldquo;rich&amp;rdquo; shell installed but want to force use of the &amp;ldquo;plain&amp;rdquo; Python interpreter, use &lt;code&gt;python&lt;/code&gt; as the interface name, like so:</source>
          <target state="translated">&quot;풍부한&quot;쉘이 설치되어 있지만 &quot;일반&quot;Python 인터프리터를 강제로 사용하려면 다음과 같이 &lt;code&gt;python&lt;/code&gt; 을 인터페이스 이름으로 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="5d8adf9ea9a8d83fd0e8e6616d3cb139fe7ee8e2" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;GPSCoordinatesField&lt;/code&gt;, for example, and want to be able to access additional information about the coordinates in a template, this could be implemented as follows:</source>
          <target state="translated">당신이있는 경우 &lt;code&gt;GPSCoordinatesField&lt;/code&gt; 는 , 예를 들어, 및 템플릿의 좌표에 대한 추가 정보를 참조 할 수 있도록하려면 다음과 같이이 구현 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="d61d684a756350ad6251ad220974916e91d79976" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;Place&lt;/code&gt; that is also a &lt;code&gt;Restaurant&lt;/code&gt;, you can get from the &lt;code&gt;Place&lt;/code&gt; object to the &lt;code&gt;Restaurant&lt;/code&gt; object by using the lowercase version of the model name:</source>
          <target state="translated">&lt;code&gt;Restaurant&lt;/code&gt; 이기도 한 &lt;code&gt;Place&lt;/code&gt; 가있는 경우 모델 이름의 소문자 버전을 사용하여 &lt;code&gt;Place&lt;/code&gt; 객체에서 &lt;code&gt;Restaurant&lt;/code&gt; 객체로 이동할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e101b1692181a5bd9c21e9a4901c5f705625b68f" translate="yes" xml:space="preserve">
          <source>If you have a background in programming, or if you&amp;rsquo;re used to languages which mix programming code directly into HTML, you&amp;rsquo;ll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic.</source>
          <target state="translated">프로그래밍에 대한 배경 지식이 있거나 프로그래밍 코드를 HTML에 직접 혼합하는 언어에 익숙한 경우 Django 템플릿 시스템은 단순히 Python에 HTML에 포함되어 있지 않습니다. 이것은 의도적으로 설계된 것입니다. 템플릿 시스템은 프로그램 논리가 아니라 프레젠테이션을 표현하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="59e1b17500d931bbf50d9ce94988d17d56a10749" translate="yes" xml:space="preserve">
          <source>If you have a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance and want to change the data somehow, or if you want to bind an unbound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance to some data, create another &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. There is no way to change data in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. Once a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance has been created, you should consider its data immutable, whether it has data or not.</source>
          <target state="translated">바인딩 된 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스가 있고 데이터를 어떻게 든 변경하려는 경우 또는 바인딩되지 않은 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스를 일부 데이터 에 바인딩하려는 경우 다른 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스를 만듭니다 . &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 데이터를 변경할 수있는 방법이 없습니다 . 한 번 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스가 생성되어, 당신은 데이터가 있는지 여부, 데이터는 불변 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="978ffd4b507205bec211ecb6fb44da5a6411e504" translate="yes" xml:space="preserve">
          <source>If you have a complex application, you may want to run tests automatically with every commit for the purposes of &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous integration&lt;/a&gt;, so that quality control is itself - at least partially - automated.</source>
          <target state="translated">복잡한 응용 프로그램이있는 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;지속적인 통합을&lt;/a&gt; 위해 모든 커밋마다 테스트를 자동으로 실행하여 품질 관리 자체가 적어도 부분적으로 자동화되도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8cd69861c19aec280ff4c3da106598eae268983" translate="yes" xml:space="preserve">
          <source>If you have a different database and aren&amp;rsquo;t sure if it supports DDL transactions, check the &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; attribute.</source>
          <target state="translated">다른 데이터베이스가 있고 DDL 트랜잭션을 지원하는지 확실하지 않으면 &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; 속성을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5b7fdb666d2c7387f8e88756c3572339b99b1480" translate="yes" xml:space="preserve">
          <source>If you have a field called &lt;code&gt;foo&lt;/code&gt; that is a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, the default &lt;code&gt;values()&lt;/code&gt; call will return a dictionary key called &lt;code&gt;foo_id&lt;/code&gt;, since this is the name of the hidden model attribute that stores the actual value (the &lt;code&gt;foo&lt;/code&gt; attribute refers to the related model). When you are calling &lt;code&gt;values()&lt;/code&gt; and passing in field names, you can pass in either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;foo_id&lt;/code&gt; and you will get back the same thing (the dictionary key will match the field name you passed in).</source>
          <target state="translated">이 필드라는이있는 경우 &lt;code&gt;foo&lt;/code&gt; 는 A는 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; , 기본 &lt;code&gt;values()&lt;/code&gt; 호출라는 사전 키 반환 &lt;code&gt;foo_id&lt;/code&gt; 를 이 숨겨진 모델 속성의 이름이기 때문에 저장 실제 값합니다 (것으로, &lt;code&gt;foo&lt;/code&gt; 속성은 관련 모델을 말한다 ). &lt;code&gt;values()&lt;/code&gt; 호출 하고 필드 이름을 전달할 때 &lt;code&gt;foo&lt;/code&gt; 또는 &lt;code&gt;foo_id&lt;/code&gt; 를 전달 하면 똑같은 결과를 얻을 수 있습니다 (사전 키는 전달한 필드 이름과 일치 함).</target>
        </trans-unit>
        <trans-unit id="16711bcb9d7d51d98a29ea22696d824133aa4a4b" translate="yes" xml:space="preserve">
          <source>If you have a field named &lt;code&gt;defaults&lt;/code&gt; and want to use it as an exact lookup in &lt;code&gt;get_or_create()&lt;/code&gt;, use &lt;code&gt;'defaults__exact'&lt;/code&gt;, like so:</source>
          <target state="translated">&lt;code&gt;defaults&lt;/code&gt; 라는 필드가 있고 &lt;code&gt;get_or_create()&lt;/code&gt; 에서 정확한 조회로 사용하려면 다음과 같이 &lt;code&gt;'defaults__exact'&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="d37c7ca73612e3f18e551c6e6e5ec5e6e3aab068" translate="yes" xml:space="preserve">
          <source>If you have a function that returns text and you want to be able to take lazy arguments while delaying their evaluation, you can use this decorator:</source>
          <target state="translated">텍스트를 반환하는 함수가 있고 평가를 지연시키면서 게으른 인수를 취할 수 있도록하려면이 데코레이터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0d31ad051cee43c03199fe35d1cfc46041814b9" translate="yes" xml:space="preserve">
          <source>If you have a model that is defined using an &lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;, you don&amp;rsquo;t have to do anything special to serialize that model. Call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object.</source>
          <target state="translated">&lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;추상 기본 클래스를&lt;/a&gt; 사용하여 정의 된 모델이있는 경우 해당 모델을 직렬화하기 위해 특별한 작업을 수행 할 필요가 없습니다. 직렬화하려는 개체 (또는 개체)에서 직렬 변환기를 호출하면 출력이 직렬화 된 개체의 완전한 표현이됩니다.</target>
        </trans-unit>
        <trans-unit id="e6770af4d44284b72b625f55e0971a26874c906c" translate="yes" xml:space="preserve">
          <source>If you have a set of common decorators used in several places, you can define a list or tuple of decorators and use this instead of invoking &lt;code&gt;method_decorator()&lt;/code&gt; multiple times. These two classes are equivalent:</source>
          <target state="translated">여러 곳에서 공통 데코레이터 세트를 사용하는 경우 데코레이터 목록 또는 튜플을 정의하고 &lt;code&gt;method_decorator()&lt;/code&gt; 여러 번 호출하는 대신 이것을 사용할 수 있습니다 . 이 두 클래스는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="79b825e9cb0e34e49d16acfbe8a24478320f86a0" translate="yes" xml:space="preserve">
          <source>If you have an authenticated user you want to attach to the current session - this is done with a &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">인증 된 사용자가있는 경우 현재 세션에 연결하려는 경우 &lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="026d9fcdfc9b1f7521fa03bbe9b4114c2b909148" translate="yes" xml:space="preserve">
          <source>If you have an existing database with an older, weak hash such as MD5 or SHA1, you might want to upgrade those hashes yourself instead of waiting for the upgrade to happen when a user logs in (which may never happen if a user doesn&amp;rsquo;t return to your site). In this case, you can use a &amp;ldquo;wrapped&amp;rdquo; password hasher.</source>
          <target state="translated">MD5 또는 SHA1과 같이 오래되고 약한 해시가있는 기존 데이터베이스가있는 경우 사용자가 로그인 할 때 업그레이드가 발생할 때까지 기다리지 않고 해시를 직접 업그레이드 할 수 있습니다 (사용자가 로그인하지 않은 경우에는 발생하지 않을 수 있음) 사이트로 돌아갑니다). 이 경우 &quot;랩핑 된&quot;암호 워셔를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b86b91ddb2f98a42f4900d8c7c7782b7b091a39b" translate="yes" xml:space="preserve">
          <source>If you have an idea for functionality to include in &lt;code&gt;contrib&lt;/code&gt;, let us know! Code it up, and post it to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;code&gt;contrib&lt;/code&gt; 에 포함 할 기능에 대한 아이디어가 있으면 알려주십시오! 코드를 작성하여 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; 메일 링리스트에 게시 하십시오.</target>
        </trans-unit>
        <trans-unit id="83d150fd871b3c780160a5e729ba2cd5515b0ee6" translate="yes" xml:space="preserve">
          <source>If you have an idea for functionality to include in &lt;code&gt;contrib&lt;/code&gt;, let us know! Code it up, and post it to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;code&gt;contrib&lt;/code&gt; 에 포함 할 기능에 대한 아이디어가 있으면 알려주세요! 코드를 작성하고 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; 메일 링리스트에 게시 합니다.</target>
        </trans-unit>
        <trans-unit id="19c3b5495362847755cae62d7b220043549d25b3" translate="yes" xml:space="preserve">
          <source>If you have an iterable of model instances, you can prefetch related attributes on those instances using the &lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt;&lt;code&gt;prefetch_related_objects()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">반복 가능한 모델 인스턴스가있는 경우 &lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt; &lt;code&gt;prefetch_related_objects()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 해당 인스턴스에서 관련 속성을 프리 페치 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="37904d083a93c2edd3d70d07fdce8e8357fcda8e" translate="yes" xml:space="preserve">
          <source>If you have any problems, please see the troubleshooting section below for suggestions and solutions.</source>
          <target state="translated">문제가있는 경우 아래의 문제 해결 섹션에서 제안 및 솔루션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ec0d4ee5c753dc222b01df5bf0c69c8624af1347" translate="yes" xml:space="preserve">
          <source>If you have app and project templates directories that both contain overrides, the default Django template loader will try to load the template from the project-level directory first. In other words, &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; is searched before &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">재정의가 포함 된 앱 및 프로젝트 템플릿 디렉토리가있는 경우 기본 Django 템플릿 로더는 먼저 프로젝트 수준 디렉토리에서 템플릿을로드하려고 시도합니다. 다시 말해, &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; &lt;/a&gt; 보다 먼저 검색 됩니다 .</target>
        </trans-unit>
        <trans-unit id="08d9347c3a2e9dd49fb8cc1c6728cc1b9165b3fb" translate="yes" xml:space="preserve">
          <source>If you have created a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method, you don&amp;rsquo;t need to worry about &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; &amp;ndash; it won&amp;rsquo;t be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field&amp;rsquo;s logic to create the right column.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 메소드를 작성한 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt; 에 대해 걱정할 필요가 없습니다 . 많이 사용되지는 않습니다. 그러나 데이터베이스 스토리지는 다른 필드와 유형이 유사하기 때문에 다른 필드의 논리를 사용하여 올바른 열을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5976cd51ea3df04ddca3661787303e1989a9bdd" translate="yes" xml:space="preserve">
          <source>If you have customized authentication (see &lt;a href=&quot;customizing&quot;&gt;Customizing Authentication&lt;/a&gt;) you can use a custom authentication form by setting the &lt;code&gt;authentication_form&lt;/code&gt; attribute. This form must accept a &lt;code&gt;request&lt;/code&gt; keyword argument in its &lt;code&gt;__init__()&lt;/code&gt; method and provide a &lt;code&gt;get_user()&lt;/code&gt; method which returns the authenticated user object (this method is only ever called after successful form validation).</source>
          <target state="translated">인증을 사용자 정의한 경우 (인증 &lt;a href=&quot;customizing&quot;&gt;사용자 정의&lt;/a&gt; 참조 ) &lt;code&gt;authentication_form&lt;/code&gt; 속성 을 설정하여 사용자 정의 인증 양식을 사용할 수 있습니다 . 이 양식은 &lt;code&gt;__init__()&lt;/code&gt; 메소드 에서 &lt;code&gt;request&lt;/code&gt; 키워드 인수를 승인 하고 인증 된 사용자 오브젝트를 리턴 하는 &lt;code&gt;get_user()&lt;/code&gt; 메소드를 제공해야 합니다 (이 메소드는 성공적인 양식 유효성 검증 후에 만 ​​호출 됨).</target>
        </trans-unit>
        <trans-unit id="e49e350f7aca08322a1d5e22652de39cfc978ac8" translate="yes" xml:space="preserve">
          <source>If you have difficulty finding where the Django source files are located on your system, run the following command:</source>
          <target state="translated">시스템에서 Django 소스 파일이있는 위치를 찾는 데 어려움이 있으면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2ed6656727786d8c5a9c10718cdb288f20ac8eaf" translate="yes" xml:space="preserve">
          <source>If you have installed a &lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt; and want to use this default auth handler, it must support an &lt;code&gt;is_active&lt;/code&gt; attribute. If you want to use group based authorization, your custom user must have a relation named &amp;lsquo;groups&amp;rsquo;, referring to a related object that has a &amp;lsquo;name&amp;rsquo; field. You can also specify your own custom mod_wsgi auth handler if your custom cannot conform to these requirements.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;사용자 정의 사용자 모델&lt;/a&gt; 을 설치 하고이 기본 인증 핸들러를 사용하려는 경우 &lt;code&gt;is_active&lt;/code&gt; 속성을 지원해야 합니다. 그룹 기반 권한을 사용하려면 사용자 정의 사용자에게 'name'필드가있는 관련 오브젝트를 참조하는 'groups'라는 관계가 있어야합니다. 사용자 정의가 이러한 요구 사항을 준수 할 수없는 경우 사용자 정의 mod_wsgi 인증 핸들러를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f1712a605e1df12222b17db97359a92359d57b3" translate="yes" xml:space="preserve">
          <source>If you have multiple &lt;code&gt;Form&lt;/code&gt; classes that share fields, you can use subclassing to remove redundancy.</source>
          <target state="translated">필드를 공유하는 여러 &lt;code&gt;Form&lt;/code&gt; 클래스가있는 경우 하위 클래스를 사용하여 중복성을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6aa2d211b2f44d42c468cde0eb6bc8be637e6dd" translate="yes" xml:space="preserve">
          <source>If you have multiple caches defined in &lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt;, Django will use the default cache. To use another cache, set &lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt;&lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt;&lt;/a&gt; to the name of that cache.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; 에&lt;/a&gt; 여러 캐시가 정의되어 있으면 Django는 기본 캐시를 사용합니다. 다른 캐시를 사용하려면 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt; &lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt; &lt;/a&gt; 를 해당 캐시의 이름으로 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="0daeb88e4409e7fba4cbaee7d1c51bff9fbbe585" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel (e.g. because they share a common resource), you can use &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; to run them sequentially. This mixin uses a filesystem &lt;code&gt;lockfile&lt;/code&gt;.</source>
          <target state="translated">병렬로 실행할 수없는 테스트 클래스가있는 경우 (예 : 공통 자원을 공유하기 때문에) &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; 을 사용 하여 순차적으로 실행할 수 있습니다. 이 믹스 인은 파일 시스템 &lt;code&gt;lockfile&lt;/code&gt; 파일을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="69e118594fe6d021ccddfba860e486fc346e2e24" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel, you can use &lt;code&gt;SerializeMixin&lt;/code&gt; to run them sequentially. See &lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;Enforce running test classes sequentially&lt;/a&gt;.</source>
          <target state="translated">병렬로 실행할 수없는 테스트 클래스가 있으면 &lt;code&gt;SerializeMixin&lt;/code&gt; 을 사용 하여 순차적으로 실행할 수 있습니다. &lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;테스트 클래스를 순차적으로 실행을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="db6b634100bf984485aba1e1d164f951a1225a84" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also &lt;a href=&quot;#auth-admin&quot;&gt;create users interactively&lt;/a&gt;.</source>
          <target state="translated">Django 관리자가 설치되어 있으면 &lt;a href=&quot;#auth-admin&quot;&gt;대화식으로 사용자&lt;/a&gt; 를 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2000ff382760e480cb9b499a00548bfca0c2d7fe" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also change user&amp;rsquo;s passwords on the &lt;a href=&quot;#auth-admin&quot;&gt;authentication system&amp;rsquo;s admin pages&lt;/a&gt;.</source>
          <target state="translated">Django 관리자가 설치되어 있으면 &lt;a href=&quot;#auth-admin&quot;&gt;인증 시스템의 관리자 페이지&lt;/a&gt; 에서 사용자의 비밀번호를 변경할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59e6b390f0fb4a292f006284bfad36ce56a1c450" translate="yes" xml:space="preserve">
          <source>If you have tried function based generic views in the past and found them lacking, you should not think of class-based generic views as a class-based equivalent, but rather as a fresh approach to solving the original problems that generic views were meant to solve.</source>
          <target state="translated">과거에 함수 기반 제네릭 뷰를 사용해 보았지만 부족한 것을 발견했다면 클래스 기반 제네릭 뷰를 클래스 기반의 동등한 뷰로 생각하지 말고 제네릭 뷰가 의도했던 원래 문제를 해결하기위한 새로운 접근법으로 생각해야합니다. 풀다.</target>
        </trans-unit>
        <trans-unit id="efd9aa9b8fc35677ff19eb12feae61a2f1dd1243" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t added any extra options on top of the field you inherited from, then there&amp;rsquo;s no need to write a new &lt;code&gt;deconstruct()&lt;/code&gt; method. If, however, you&amp;rsquo;re changing the arguments passed in &lt;code&gt;__init__()&lt;/code&gt; (like we are in &lt;code&gt;HandField&lt;/code&gt;), you&amp;rsquo;ll need to supplement the values being passed.</source>
          <target state="translated">상속받은 필드 위에 추가 옵션을 추가하지 않은 경우 새로운 &lt;code&gt;deconstruct()&lt;/code&gt; 메소드 를 작성할 필요가 없습니다 . 그러나 &lt;code&gt;__init__()&lt;/code&gt; 전달 된 인수 ( &lt;code&gt;HandField&lt;/code&gt; 에있는 것처럼 )를 변경하는 경우 전달 되는 값을 보충해야합니다.</target>
        </trans-unit>
        <trans-unit id="4ea2ba3519701ee1ea3735aa6135ecb00e08b0a0" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t recently completed Tutorials 1&amp;ndash;7, we encourage you to review these so that your example project matches the one described below.</source>
          <target state="translated">최근에 자습서 1&amp;ndash;7을 완료하지 않은 경우 예제 프로젝트가 아래 설명 된 프로젝트와 일치하도록이를 검토하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b16b0bccf0c08600a1fbaec81d987234f8ac3c71" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t set up backups for your database, do it right now!</source>
          <target state="translated">데이터베이스 백업을 설정하지 않은 경우 지금 수행하십시오!</target>
        </trans-unit>
        <trans-unit id="3abc3fddfa394c8f2c33c40961d7aa2e45568252" translate="yes" xml:space="preserve">
          <source>If you implement &lt;code&gt;__init__&lt;/code&gt; in your subclass of &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;, you must call &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;__init__&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt; 의 하위 클래스에서 &lt;code&gt;__init__&lt;/code&gt; 을 구현하는 경우 &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;__init__&lt;/code&gt; 을 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a3b78e197955bcb146a1c23c5d00f08fdb545c8d" translate="yes" xml:space="preserve">
          <source>If you implement custom model fields that inherit from &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; directly, are overriding &lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;, or use &lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;raw()&lt;/code&gt;&lt;/a&gt;, you should ensure that you perform appropriate typecasting.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; 에서&lt;/a&gt; 직접 상속 &lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 재정의 하거나 &lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;raw()&lt;/code&gt; &lt;/a&gt; 사용 하는 사용자 정의 모델 필드를 구현하는 경우 적절한 유형 변환을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="4d14c28506b4a41e79a0a531c1100009cf8a5877" translate="yes" xml:space="preserve">
          <source>If you import models directly rather than using the historical models, your migrations &lt;em&gt;may work initially&lt;/em&gt; but will fail in the future when you try to re-run old migrations (commonly, when you set up a new installation and run through all the migrations to set up the database).</source>
          <target state="translated">히스토리 모델을 사용하지 않고 모델을 직접 가져 오는 경우 마이그레이션 &lt;em&gt;은 초기에 작동 할 수&lt;/em&gt; 있지만 이전 마이그레이션을 다시 실행하려고 할 때 (일반적으로 새 설치를 설정하고 모든 마이그레이션을 통해 설정하는 경우) 실패합니다. 데이터베이스).</target>
        </trans-unit>
        <trans-unit id="4dcf54cc839f3636de3833bb33a943b51d4b3e83" translate="yes" xml:space="preserve">
          <source>If you install your project&amp;rsquo;s Python dependencies inside a &lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt;&lt;code&gt;virtual
environment&lt;/code&gt;&lt;/a&gt;, add the path using &lt;code&gt;WSGIPythonHome&lt;/code&gt;. See the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtual environment guide&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt; &lt;code&gt;virtual environment&lt;/code&gt; &lt;/a&gt; 내에 프로젝트의 Python 종속성을 설치하는 경우 &lt;code&gt;WSGIPythonHome&lt;/code&gt; 을 사용하여 경로를 추가 하세요 . 자세한 내용은 &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi 가상 환경 가이드&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="44070fbe89941700ca164927fd2839d802124e64" translate="yes" xml:space="preserve">
          <source>If you install your project&amp;rsquo;s Python dependencies inside a &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, add the path to the virtualenv using &lt;code&gt;WSGIPythonHome&lt;/code&gt;. See the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenv guide&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; 내에 프로젝트의 Python 종속성을 설치하는 경우 &lt;code&gt;WSGIPythonHome&lt;/code&gt; 을 사용하여 virtualenv에 대한 경로를 추가하십시오 . 자세한 내용은 &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenv 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a74cb3689863414b53e2cc2ad45826c27f81e941" translate="yes" xml:space="preserve">
          <source>If you installed Django with &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;, you can use the &lt;code&gt;--upgrade&lt;/code&gt; or &lt;code&gt;-U&lt;/code&gt; flag:</source>
          <target state="translated">Django를 &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; 와 함께 설치 한 경우 &lt;code&gt;--upgrade&lt;/code&gt; 또는 &lt;code&gt;-U&lt;/code&gt; 플래그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0e1355dc1d54e62ec3be4d96bc279fa717ea1aa3" translate="yes" xml:space="preserve">
          <source>If you intend to allow users to upload files, you must ensure that the environment used to run Django is configured to work with non-ASCII file names. If your environment isn&amp;rsquo;t configured correctly, you&amp;rsquo;ll encounter &lt;code&gt;UnicodeEncodeError&lt;/code&gt; exceptions when saving files with file names that contain non-ASCII characters.</source>
          <target state="translated">사용자가 파일을 업로드 할 수있게하려면 Django를 실행하는 데 사용되는 환경이 ASCII가 아닌 파일 이름으로 작동하도록 구성되어 있는지 확인해야합니다. 환경이 올바르게 구성되지 않은 경우 ASCII가 아닌 문자를 포함하는 파일 이름을 가진 파일을 저장할 때 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 예외 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="4acb8b00d983476c1c0fae9d2bcb2eb3c71e63d5" translate="yes" xml:space="preserve">
          <source>If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won&amp;rsquo;t need to set up Apache until you&amp;rsquo;re ready to deploy Django in production.</source>
          <target state="translated">장고를 실험하고 싶다면 다음 섹션으로 넘어가십시오. Django에는 테스트에 사용할 수있는 경량 웹 서버가 포함되어 있으므로 Django를 프로덕션 환경에 배포 할 준비가 될 때까지 Apache를 설정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3568f1bdadbf483dacd6fb9b4be3a20a4b3cc65b" translate="yes" xml:space="preserve">
          <source>If you just want to get some data from your tables into a serialized form, you could use the &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">테이블의 일부 데이터를 직렬화 된 양식으로 가져 오려면 &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; management 명령을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e09fa0bd8a3a147ea439259f86c751ca2fbfc03" translate="yes" xml:space="preserve">
          <source>If you just want to get started already (and nobody would blame you!), try taking a look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need patches&lt;/a&gt; and the &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that have patches which need improvement&lt;/a&gt;. If you&amp;rsquo;re familiar with writing tests, you can also look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need tests&lt;/a&gt;. Remember to follow the guidelines about claiming tickets that were mentioned in the link to Django&amp;rsquo;s documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;claiming tickets and submitting patches&lt;/a&gt;.</source>
          <target state="translated">이미 시작하고 싶을 때 (그리고 아무도 당신을 비난하지 않을 것입니다!), &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;패치가 필요한 쉬운 티켓&lt;/a&gt; 목록 과 &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;개선이 필요한 패치가있는 &lt;/a&gt;쉬운 티켓 목록을 살펴보십시오 . 테스트 작성에 익숙 &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;하다면 테스트가 필요한 쉬운 티켓&lt;/a&gt; 목록을 볼 수도 있습니다 . 티켓 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;청구 및 패치 제출&lt;/a&gt; 에 관한 장고의 문서 링크에서 언급 된 티켓 청구에 관한 지침을 준수하십시오 .</target>
        </trans-unit>
        <trans-unit id="e71f753d1a94701cabfdc64cd8592ac2d4550327" translate="yes" xml:space="preserve">
          <source>If you just want to get started already (and nobody would blame you!), try taking a look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need patches&lt;/a&gt; and the &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that have patches which need improvement&lt;/a&gt;. If you&amp;rsquo;re familiar with writing tests, you can also look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need tests&lt;/a&gt;. Remember to follow the guidelines about claiming tickets that were mentioned in the link to Django&amp;rsquo;s documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;claiming tickets and submitting patches&lt;/a&gt;.</source>
          <target state="translated">이미 시작하고 싶다면 (아무도 당신을 비난하지 않을 것입니다!), &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;패치가 필요한 쉬운 티켓&lt;/a&gt; 과 개선이 필요한 패치가있는 &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;쉬운 티켓&lt;/a&gt; 목록을 살펴보십시오 . 테스트 작성에 익숙 &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;하다면 테스트가 필요한 쉬운 티켓&lt;/a&gt; 목록을 볼 수도 있습니다 . 티켓 &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;청구 및 패치 제출&lt;/a&gt; 에 대한 Django 문서 링크에 언급 된 티켓 청구에 대한 지침을 따르는 것을 잊지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="c50512e5b7b4d2917fd0ded7753af940b02ac0a6" translate="yes" xml:space="preserve">
          <source>If you know there is only one object that matches your query, you can use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; which returns the object directly:</source>
          <target state="translated">쿼리와 일치하는 객체가 하나만 있는 경우 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 에서 객체를 직접 반환하는 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 메서드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4d46c64f50d662db0e36989441c746c4eb15547" translate="yes" xml:space="preserve">
          <source>If you know which models you&amp;rsquo;ll be using most often, you can also add a &amp;ldquo;reverse&amp;rdquo; generic relationship to enable an additional API. For example:</source>
          <target state="translated">가장 자주 사용하는 모델을 알고있는 경우 &quot;역방향&quot;일반 관계를 추가하여 추가 API를 활성화 할 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c191fd40bd25e99c36f57ceff24ea08151258536" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the filter name.</source>
          <target state="translated">당신이 떨어져두면 &lt;code&gt;name&lt;/code&gt; 위의 두 번째 예에서와 같이, 인수, 장고 필터 이름으로 함수의 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e8bf004d14c563eb22c00ca8e5526f83bb38a104" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the tag name.</source>
          <target state="translated">당신이 떨어져두면 &lt;code&gt;name&lt;/code&gt; 위의 두 번째 예에서와 같이, 인수, 장고 태그 이름으로 함수의 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="950469d51b06aaa88a367dde3845db6577c50567" translate="yes" xml:space="preserve">
          <source>If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They&amp;rsquo;re all stored in &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt;.</source>
          <target state="translated">Django Admin 애플리케이션이 사용하는 위젯이 마음에 드시면 자신의 애플리케이션에서 자유롭게 사용하십시오! 그것들은 모두 &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt; 에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="338ebae0cd2defb4e2b46e3293b08157abaa3c2b" translate="yes" xml:space="preserve">
          <source>If you look at any change list in the admin, you&amp;rsquo;ll see this feature in action; Django ships with a &amp;ldquo;delete selected objects&amp;rdquo; action available to all models. For example, here&amp;rsquo;s the user module from Django&amp;rsquo;s built-in &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app:</source>
          <target state="translated">관리자의 변경 목록을 보면이 기능이 실제로 작동하는 것을 볼 수 있습니다. Django는 모든 모델에서 사용 가능한&amp;ldquo;선택된 객체 삭제&amp;rdquo;작업을 제공합니다. 예를 들어 Django의 내장 &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt; 앱 의 사용자 모듈은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="563d1c2d9d163e085568958c9f2b6d9c96629a36" translate="yes" xml:space="preserve">
          <source>If you look carefully, you can see that the portion that was generated by &lt;code&gt;quote()&lt;/code&gt; in the second example was not double-quoted when passed to &lt;code&gt;iri_to_uri()&lt;/code&gt;. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call &lt;code&gt;iri_to_uri()&lt;/code&gt; on the result.</source>
          <target state="translated">주의 깊게 살펴보면, 두 번째 예제에서 &lt;code&gt;quote()&lt;/code&gt; 로 생성 된 부분이 &lt;code&gt;iri_to_uri()&lt;/code&gt; 전달 될 때 큰 따옴표로 묶이지 않은 것을 볼 수 있습니다. 이것은 매우 중요하고 유용한 기능입니다. 즉, ASCII가 아닌 문자가 포함되어 있는지 여부에 대해 걱정하지 않고 IRI를 구성한 다음 결과에서 &lt;code&gt;iri_to_uri()&lt;/code&gt; 를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fae37143701969595b56a1de835f003e68a717b5" translate="yes" xml:space="preserve">
          <source>If you manually render fields in the template, you can render &lt;code&gt;can_delete&lt;/code&gt; parameter with &lt;code&gt;{{ form.DELETE }}&lt;/code&gt;:</source>
          <target state="translated">템플리트에서 필드를 수동으로 렌더링하는 경우 &lt;code&gt;{{ form.DELETE }}&lt;/code&gt; 하여 &lt;code&gt;can_delete&lt;/code&gt; 매개 변수를 렌더링 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f75b2bb9e0e1faedcbcaf93a8d2cb2f193a634dc" translate="yes" xml:space="preserve">
          <source>If you meet this requirement, then substitute the &lt;code&gt;OSMGeoAdmin&lt;/code&gt; option class in your &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">이 요구 사항을 충족하는 경우 &lt;code&gt;admin.py&lt;/code&gt; 파일 에서 &lt;code&gt;OSMGeoAdmin&lt;/code&gt; 옵션 클래스 를 대체 하십시오.</target>
        </trans-unit>
        <trans-unit id="cb77b3727fe1f39422116c93df21b4f10b4b7b3e" translate="yes" xml:space="preserve">
          <source>If you merely want to test the output of your asynchronous views, the standard test client will run them inside their own asynchronous loop without any extra work needed on your part.</source>
          <target state="translated">비동기 뷰의 출력을 테스트하려는 경우 표준 테스트 클라이언트는 별도의 작업 없이도 자체 비동기 루프 내에서 실행합니다.</target>
        </trans-unit>
        <trans-unit id="225bae64392f765fd429b21ea8ac02f57f4afb72" translate="yes" xml:space="preserve">
          <source>If you need an empty migration file to write your own &lt;code&gt;Operation&lt;/code&gt; objects into, use &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt;, but be aware that manually adding schema-altering operations can confuse the migration autodetector and make resulting runs of &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; output incorrect code.</source>
          <target state="translated">고유 한 &lt;code&gt;Operation&lt;/code&gt; 객체 를 작성하기 위해 빈 마이그레이션 파일이 필요한 경우 &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt; . 그러나 스키마 변경 작업을 수동으로 추가하면 마이그레이션 자동 감지 기능이 혼동되어 결과적으로 &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 실행 결과가 잘못된 코드로 표시 될 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="c26240f024c2f3e478948f8f7fec8bbb42d821c0" translate="yes" xml:space="preserve">
          <source>If you need custom template loading or custom context object instantiation, create a &lt;code&gt;TemplateResponse&lt;/code&gt; subclass and assign it to &lt;code&gt;response_class&lt;/code&gt;.</source>
          <target state="translated">사용자 정의 템플리트로드 또는 사용자 정의 컨텍스트 오브젝트 인스턴스화가 필요한 경우 &lt;code&gt;TemplateResponse&lt;/code&gt; 서브 클래스를 작성 하여 &lt;code&gt;response_class&lt;/code&gt; 에 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="d33ecf64697d7de63f58f86dbfaa4f84e060248a" translate="yes" xml:space="preserve">
          <source>If you need different precedence, you will need to use nested &lt;a href=&quot;#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.</source>
          <target state="translated">우선 순위가 다른 &lt;a href=&quot;#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 중첩 된 if 태그 를 사용해야 합니다. 때로는 우선 순위 규칙을 모르는 사람들을 위해 명확성을 위해 더 나은 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="94aa71aa505c6a16108b61bb062ab6ada6bf5751" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; and override one or more of its attributes and methods.</source>
          <target state="translated">더 많은 제어가 필요한 경우 &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt; 에서 상속되는 고유 한 인증 백엔드를 작성 하고 하나 이상의 해당 속성 및 메소드를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="758aabbe668d354fb6f337c8ed3f754bf52e0550" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:</source>
          <target state="translated">더 많은 제어가 필요한 경우이 클래스에서 상속 된 자체 인증 백엔드를 작성하고 다음 속성 또는 메소드를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e28d0fde6b118d6feed4accf2b47a636af43e24" translate="yes" xml:space="preserve">
          <source>If you need more fine-grained control, use a tuple (or list) as value for &lt;code&gt;list_select_related&lt;/code&gt;. Empty tuple will prevent Django from calling &lt;code&gt;select_related&lt;/code&gt; at all. Any other tuple will be passed directly to &lt;code&gt;select_related&lt;/code&gt; as parameters. For example:</source>
          <target state="translated">보다 세분화 된 제어가 필요한 경우 튜플 (또는 목록)을 &lt;code&gt;list_select_related&lt;/code&gt; 의 값으로 사용 하십시오 . 비어있는 튜플은 Django가 &lt;code&gt;select_related&lt;/code&gt; 를 전혀 호출하지 못하게 합니다. 다른 튜플은 매개 변수 로 &lt;code&gt;select_related&lt;/code&gt; 에 직접 전달됩니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d8cb56dde557370f78a7f18c4a395b3fd0b21ee4" translate="yes" xml:space="preserve">
          <source>If you need more flexibility, you could also add a new argument to your custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">유연성이 더 필요한 경우 사용자 정의 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 명령에 새 인수를 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aff7c703e8b54ba634b913901864d3aa00cffcf1" translate="yes" xml:space="preserve">
          <source>If you need the response to be streamed from the iterator to the client, you must use the &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; class instead.</source>
          <target state="translated">반복자에서 클라이언트로 응답을 스트리밍해야하는 경우 &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; &lt;/a&gt; 클래스를 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9cf5c4ff845a5d20e57ce99fe95fc4dfe26d3a0d" translate="yes" xml:space="preserve">
          <source>If you need to access a membership&amp;rsquo;s information you may do so by directly querying the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">멤버쉽 정보에 액세스해야하는 경우 &lt;code&gt;Membership&lt;/code&gt; 모델 을 직접 쿼리하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29d093239d80818b0b1e33570e4407bb058ea195" translate="yes" xml:space="preserve">
          <source>If you need to access some additional information about a form field in a template and using a subclass of &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t sufficient, consider also customizing &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플리트의 양식 필드에 대한 추가 정보에 액세스해야하고 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 의 서브 클래스를 사용하는 것으로 충분하지 않은 경우 &lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt; 사용자 정의 도 고려하십시오. .</target>
        </trans-unit>
        <trans-unit id="ecb3aea88ed07bec970c7d28d05fa46d621b0e09" translate="yes" xml:space="preserve">
          <source>If you need to add a PostgreSQL extension (like &lt;code&gt;hstore&lt;/code&gt;, &lt;code&gt;postgis&lt;/code&gt;, etc.) using a migration, use the &lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt;&lt;code&gt;CreateExtension&lt;/code&gt;&lt;/a&gt; operation.</source>
          <target state="translated">마이그레이션을 사용하여 PostgreSQL 확장 (예 : &lt;code&gt;hstore&lt;/code&gt; , &lt;code&gt;postgis&lt;/code&gt; 등) 을 추가해야하는 경우 &lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt; &lt;code&gt;CreateExtension&lt;/code&gt; 을&lt;/a&gt; 사용하십시오. 작업을 .</target>
        </trans-unit>
        <trans-unit id="e450e893ae7afe1bc2e22ffb0c5a0a76816766d3" translate="yes" xml:space="preserve">
          <source>If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an &lt;code&gt;add_fields&lt;/code&gt; method. You can override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields:</source>
          <target state="translated">양식 세트에 추가 필드를 추가해야하는 경우 쉽게 수행 할 수 있습니다. formset 기본 클래스는 &lt;code&gt;add_fields&lt;/code&gt; 메소드를 제공합니다 . 이 방법을 재정 의하여 자신의 필드를 추가하거나 순서 및 삭제 필드의 기본 필드 / 속성을 재정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a49d29d22712c0f8cc4a9ef3a3f1dc48cf130bea" translate="yes" xml:space="preserve">
          <source>If you need to change how emails are sent you can write your own email backend. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt;&lt;code&gt;EMAIL_BACKEND&lt;/code&gt;&lt;/a&gt; setting in your settings file is then the Python import path for your backend class.</source>
          <target state="translated">이메일 전송 방법을 변경해야하는 경우 고유 한 이메일 백엔드를 작성할 수 있습니다. 설정 파일 의 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt; &lt;code&gt;EMAIL_BACKEND&lt;/code&gt; &lt;/a&gt; 설정은 백엔드 클래스의 Python 가져 오기 경로입니다.</target>
        </trans-unit>
        <trans-unit id="e5fa605cf3f76c4428e51ca9506d8d5da266d92c" translate="yes" xml:space="preserve">
          <source>If you need to change this default behavior, create the intermediary table as an explicit model (with &lt;code&gt;managed&lt;/code&gt; set as needed) and use the &lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;ManyToManyField.through&lt;/code&gt;&lt;/a&gt; attribute to make the relation use your custom model.</source>
          <target state="translated">이 기본 동작을 변경해야하는 경우 중개 테이블을 명시 적 모델 ( 필요에 따라 &lt;code&gt;managed&lt;/code&gt; 세트 포함)로 작성하고 &lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;ManyToManyField.through&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 관계가 사용자 정의 모델을 사용하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="417131b19902519fe0b468a60926a5bf16770559" translate="yes" xml:space="preserve">
          <source>If you need to clear the list of related fields added by past calls of &lt;code&gt;select_related&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt;, you can pass &lt;code&gt;None&lt;/code&gt; as a parameter:</source>
          <target state="translated">당신이 과거의 호출에 의해 추가 관련 분야의 목록을 취소해야하는 경우 &lt;code&gt;select_related&lt;/code&gt; A의 &lt;code&gt;QuerySet&lt;/code&gt; , 당신은 통과 할 수 &lt;code&gt;None&lt;/code&gt; 매개 변수로를 :</target>
        </trans-unit>
        <trans-unit id="16b5139d25521e92cae75d82c00fd807f514ef86" translate="yes" xml:space="preserve">
          <source>If you need to construct a &lt;code&gt;File&lt;/code&gt; yourself, the easiest way is to create one using a Python built-in &lt;code&gt;file&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 직접 생성해야하는 경우 가장 쉬운 방법은 Python 내장 &lt;code&gt;file&lt;/code&gt; 사용하여 파일 을 생성하는 것입니다 객체를 .</target>
        </trans-unit>
        <trans-unit id="3c6d8d98e29f39567c45f015a91e483e346b4e97" translate="yes" xml:space="preserve">
          <source>If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself:</source>
          <target state="translated">아직 정의되지 않은 모델에서 관계를 작성해야하는 경우 모델 오브젝트 자체가 아닌 모델 이름을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65d871b7088c66feacdac17c59f3a01772b1f023" translate="yes" xml:space="preserve">
          <source>If you need to create a user to login with, use the &lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; command. By default, logging in to the admin requires that the user has the &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt;&lt;code&gt;is_superuser&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt;&lt;code&gt;is_staff&lt;/code&gt;&lt;/a&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">로그인 할 사용자를 작성해야하는 경우 &lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 . 기본적으로 관리자에 로그인하려면 사용자에게 &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt; &lt;code&gt;is_superuser&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt; &lt;code&gt;is_staff&lt;/code&gt; &lt;/a&gt; 속성이 &lt;code&gt;True&lt;/code&gt; 로 설정되어 있어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="a8c2e6ded6b51f5db806ed60abec233f32b0b1f1" translate="yes" xml:space="preserve">
          <source>If you need to customize error reports beyond filtering you may specify a custom error reporter class by defining the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER&quot;&gt;&lt;code&gt;DEFAULT_EXCEPTION_REPORTER&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">필터링 이상의 오류 보고서를 사용자 정의해야하는 경우 &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER&quot;&gt; &lt;code&gt;DEFAULT_EXCEPTION_REPORTER&lt;/code&gt; &lt;/a&gt; 설정 을 정의하여 사용자 정의 오류보고 클래스를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d65af76fc2fae362276614f23f186268a8063338" translate="yes" xml:space="preserve">
          <source>If you need to customize search you can use &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt;&lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt;&lt;/a&gt; to provide additional or alternate search behavior.</source>
          <target state="translated">검색을 사용자 정의해야하는 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt; &lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt; &lt;/a&gt; 를 사용하여 추가 또는 대체 검색 동작을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="268d1539953ae22ff11a5330553a90257431d684" translate="yes" xml:space="preserve">
          <source>If you need to customize the SQL mode, you can set the &lt;code&gt;sql_mode&lt;/code&gt; variable like other MySQL options: either in a config file or with the entry &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SQL 모드를 사용자 정의해야하는 경우 다른 MySQL 옵션과 같이 &lt;code&gt;sql_mode&lt;/code&gt; 변수를 구성 파일에서 설정하거나 데이터베이스 구성 의 &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt; 부분 에있는 &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; 을 사용하여 설정할 수 있습니다. &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5590b9cc3e5a4f06eb74e308901af7ab377968ea" translate="yes" xml:space="preserve">
          <source>If you need to disable a &lt;a href=&quot;#adminsite-actions&quot;&gt;site-wide action&lt;/a&gt; you can call &lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt;&lt;code&gt;AdminSite.disable_action()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#adminsite-actions&quot;&gt;사이트 전체 작업&lt;/a&gt; 을 비활성화해야하는 경우 &lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt; &lt;code&gt;AdminSite.disable_action()&lt;/code&gt; &lt;/a&gt; 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3188dcbcf55e21ddcef8ee90b69dccce7ee89480" translate="yes" xml:space="preserve">
          <source>If you need to distinguish between bound and unbound form instances at runtime, check the value of the form&amp;rsquo;s &lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">런타임에 바인드 된 양식 인스턴스와 언 바운드 된 양식 인스턴스를 구별해야하는 경우 양식의 &lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt; 속성 값을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="271b48b10c2eaee15e6c01af5201ecab45c59f1b" translate="yes" xml:space="preserve">
          <source>If you need to do this from within Python, do that with &lt;code&gt;os.environ&lt;/code&gt;:</source>
          <target state="translated">파이썬 내 에서이 작업을 수행 해야하는 경우 &lt;code&gt;os.environ&lt;/code&gt; 으로 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="05047b6375db39f11bb955e3562cff830f8ce275" translate="yes" xml:space="preserve">
          <source>If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">보다 복잡한 쿼리 (예 : &lt;code&gt;OR&lt;/code&gt; 문이있는 쿼리)를 실행해야하는 경우 &lt;a href=&quot;#django.db.models.Q&quot;&gt; &lt;code&gt;Q objects&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="382397a2d5889617644e1747a1ec56a1cb186983" translate="yes" xml:space="preserve">
          <source>If you need to get the content of the block from the parent template, the &lt;code&gt;{{ block.super }}&lt;/code&gt; variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using &lt;code&gt;{{ block.super }}&lt;/code&gt; will not be automatically escaped (see the &lt;a href=&quot;#automatic-html-escaping&quot;&gt;next section&lt;/a&gt;), since it was already escaped, if necessary, in the parent template.</source>
          <target state="translated">부모 템플릿에서 블록의 내용을 &lt;code&gt;{{ block.super }}&lt;/code&gt; 경우 {{block.super}} 변수가 트릭을 수행합니다. 부모 블록의 내용을 완전히 재정의하지 않고 내용에 추가하려는 경우에 유용합니다. &lt;code&gt;{{ block.super }}&lt;/code&gt; 사용하여 삽입 된 데이터 는 자동으로 이스케이프되지 않습니다 ( &lt;a href=&quot;#automatic-html-escaping&quot;&gt;다음 섹션 참조)&lt;/a&gt; 는 필요한 경우 상위 템플릿에서 이미 이스케이프되었으므로 ).</target>
        </trans-unit>
        <trans-unit id="7ebc26c78fa9c356f90a7f72742c57e3cd52c72f" translate="yes" xml:space="preserve">
          <source>If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt;&lt;code&gt;MESSAGE_TAGS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">HTML 또는 CSS에서 맞춤 수준을 식별해야하는 경우 &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt; &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; &lt;/a&gt; 를 통해 매핑을 제공해야합니다. 설정을 합니다.</target>
        </trans-unit>
        <trans-unit id="43d0b36b5694d463b889f6b0ba10b3bc8033471f" translate="yes" xml:space="preserve">
          <source>If you need to know whether &lt;code&gt;add()&lt;/code&gt; stored a value in the cache, you can check the return value. It will return &lt;code&gt;True&lt;/code&gt; if the value was stored, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 가 캐시에 값을 저장 했는지 여부를 알아야하는 경우 반환 값을 확인할 수 있습니다. 값이 저장된 경우 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다. &lt;code&gt;False&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d830c73c6c6c1f7e7b98469dce63d2206baf4296" translate="yes" xml:space="preserve">
          <source>If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called &lt;code&gt;points&lt;/code&gt;, you could use the following to output the list of points:</source>
          <target state="translated">목록 목록을 반복해야하는 경우 각 하위 목록의 값을 개별 변수로 압축 해제 할 수 있습니다. 예를 들어, 컨텍스트에 &lt;code&gt;points&lt;/code&gt; 라는 (x, y) 좌표 목록이 포함 된 경우 경우 다음을 사용하여 포인트 목록을 출력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4875586a1526cd06344d2126b39a51bf67bf624" translate="yes" xml:space="preserve">
          <source>If you need to order the resulting queryset using some of the new fields or tables you have included via &lt;code&gt;extra()&lt;/code&gt; use the &lt;code&gt;order_by&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt; and pass in a sequence of strings. These strings should either be model fields (as in the normal &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; method on querysets), of the form &lt;code&gt;table_name.column_name&lt;/code&gt; or an alias for a column that you specified in the &lt;code&gt;select&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt;.</source>
          <target state="translated">새 필드 또는 테이블의 일부를 사용하여 결과의 검색어를 주문해야하는 경우가로 포함 시켰 &lt;code&gt;extra()&lt;/code&gt; 를 사용 &lt;code&gt;order_by&lt;/code&gt; 의 에 매개 변수 &lt;code&gt;extra()&lt;/code&gt; 문자열의 순서로 전달합니다. 이 문자열은 &lt;code&gt;table_name.column_name&lt;/code&gt; 형식의 모델 필드 ( 쿼리 세트 의 일반 &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 메소드에서와 같이) 이거나 &lt;code&gt;select&lt;/code&gt; 매개 변수에서 &lt;code&gt;extra()&lt;/code&gt; 로 지정한 열의 별명 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="29512c055a4bbedadcf50ac81bc12aa696fefce6" translate="yes" xml:space="preserve">
          <source>If you need to perform parameterized queries, you can use the &lt;code&gt;params&lt;/code&gt; argument to &lt;code&gt;raw()&lt;/code&gt;:</source>
          <target state="translated">매개 변수화 된 쿼리를 수행해야하는 경우 &lt;code&gt;params&lt;/code&gt; 인수를 &lt;code&gt;raw()&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="85d94e84caa03cb9aa1eba7c8a2edd2887aceacb" translate="yes" xml:space="preserve">
          <source>If you need to perform some more sophisticated manipulation of asset requirements, you can define the &lt;code&gt;media&lt;/code&gt; property directly. This is done by defining a widget property that returns an instance of &lt;code&gt;forms.Media&lt;/code&gt;. The constructor for &lt;code&gt;forms.Media&lt;/code&gt; accepts &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt; keyword arguments in the same format as that used in a static media definition.</source>
          <target state="translated">보다 복잡한 자산 요구 사항 조작을 수행해야하는 경우 &lt;code&gt;media&lt;/code&gt; 속성을 직접 정의 할 수 있습니다. 이는 &lt;code&gt;forms.Media&lt;/code&gt; 인스턴스를 반환하는 위젯 속성을 정의하여 수행됩니다 . &lt;code&gt;forms.Media&lt;/code&gt; 의 생성자 는 &lt;code&gt;css&lt;/code&gt; 와 &lt;code&gt;js&lt;/code&gt; 를 허용합니다. 는 정적 미디어 정의에 사용 된 것과 동일한 형식으로 키워드 인수를 합니다.</target>
        </trans-unit>
        <trans-unit id="03077957c82f83770cda4245c00130142e0728ea" translate="yes" xml:space="preserve">
          <source>If you need to produce a custom feed format, you&amp;rsquo;ve got a couple of options.</source>
          <target state="translated">맞춤 피드 형식을 만들어야하는 경우 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dce169f28d5a3a0a8217378654a731a6091f2895" translate="yes" xml:space="preserve">
          <source>If you need to provide custom file storage &amp;ndash; a common example is storing files on some remote system &amp;ndash; you can do so by defining a custom storage class. You&amp;rsquo;ll need to follow these steps:</source>
          <target state="translated">일부 원격 시스템에 파일을 저장하는 일반적인 예인 사용자 정의 파일 스토리지를 제공해야하는 경우 사용자 정의 스토리지 클래스를 정의하여이를 수행 할 수 있습니다. 다음 단계를 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="21318dce302488db7fe1be9c8f91e7d9398db2d0" translate="yes" xml:space="preserve">
          <source>If you need to reload a model&amp;rsquo;s values from the database, you can use the &lt;code&gt;refresh_from_db()&lt;/code&gt; method. When this method is called without arguments the following is done:</source>
          <target state="translated">데이터베이스에서 모델 값을 다시로드해야하는 경우 &lt;code&gt;refresh_from_db()&lt;/code&gt; 메소드를 . 이 메소드를 인수없이 호출하면 다음이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="9f60d676b2ff26e717c98cf757ee77b4169d2c79" translate="yes" xml:space="preserve">
          <source>If you need to rename your tag, you can provide a custom name for it:</source>
          <target state="translated">태그 이름을 변경해야하는 경우 사용자 정의 이름을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70ce7ed4a5fd90c845431eb06c0ba9bf7b77d4be" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic order (for example depending on user or language) you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt;&lt;code&gt;get_ordering()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">동적 순서를 지정해야하는 경우 (예 : 사용자 또는 언어에 따라) &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt; &lt;code&gt;get_ordering()&lt;/code&gt; &lt;/a&gt; 메소드를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54934551f16cb178c17684aaa62b9b0ce737160b" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic value based on the request, you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt;&lt;code&gt;get_list_select_related()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">요청을 기반으로 동적 값을 지정해야하는 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt; &lt;code&gt;get_list_select_related()&lt;/code&gt; &lt;/a&gt; 메소드를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7afe7febaba1ec3c478e01c27fcfae0fcae482f" translate="yes" xml:space="preserve">
          <source>If you need to specify such values, reset the sequence afterwards to avoid reusing a value that&amp;rsquo;s already in the table. The &lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt;&lt;code&gt;sqlsequencereset&lt;/code&gt;&lt;/a&gt; management command generates the SQL statements to do that.</source>
          <target state="translated">이러한 값을 지정해야하는 경우 테이블에 이미있는 값을 다시 사용하지 않도록 순서를 나중에 재설정하십시오. &lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt; &lt;code&gt;sqlsequencereset&lt;/code&gt; 의&lt;/a&gt; 관리 명령은 해당 작업을 수행 할 SQL 문을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="42afbcfd63e453f7b679ed0c58b5d3f86138dbfa" translate="yes" xml:space="preserve">
          <source>If you need to specify this list dynamically, implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt;&lt;code&gt;get_sortable_by()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">이 목록을 동적으로 지정해야하는 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt; &lt;code&gt;get_sortable_by()&lt;/code&gt; &lt;/a&gt; 구현하십시오. 메소드를 대신 .</target>
        </trans-unit>
        <trans-unit id="385e9bf858c9d8171227212211f5666543e0edbb" translate="yes" xml:space="preserve">
          <source>If you need to use a different JSON encoder class you can pass the &lt;code&gt;encoder&lt;/code&gt; parameter to the constructor method:</source>
          <target state="translated">다른 JSON 인코더 클래스를 사용해야하는 경우 &lt;code&gt;encoder&lt;/code&gt; 매개 변수를 생성자 메소드에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52403383dcd3d11592773e83b934a1caeec7695e" translate="yes" xml:space="preserve">
          <source>If you need to use a literal &lt;code&gt;%s&lt;/code&gt; inside your select string, use the sequence &lt;code&gt;%%s&lt;/code&gt;.</source>
          <target state="translated">선택 문자열 내 에서 리터럴 &lt;code&gt;%s&lt;/code&gt; 를 사용해야하는 경우 &lt;code&gt;%%s&lt;/code&gt; 시퀀스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e62765ab69b86199c0c670e1b19ddf6f4572d8af" translate="yes" xml:space="preserve">
          <source>If you need to use a spatial lookup or aggregate that doesn&amp;rsquo;t support the geography type as input, you can use the &lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt;&lt;code&gt;Cast&lt;/code&gt;&lt;/a&gt; database function to convert the geography column to a geometry type in the query:</source>
          <target state="translated">지리 유형을 입력으로 지원하지 않는 공간 조회 또는 집계를 사용해야하는 경우 데이터베이스 &lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt; &lt;code&gt;Cast&lt;/code&gt; &lt;/a&gt; 함수를 사용 하여 지리 열을 쿼리의 지오메트리 유형으로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7261e018cbf8f2bbdd8cb56b7d0debc25633a8f3" translate="yes" xml:space="preserve">
          <source>If you need to use something similar to the &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag in your code, Django provides the following function:</source>
          <target state="translated">코드에서 &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 템플릿 태그 와 비슷한 것을 사용해야하는 경우 Django는 다음 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="65a8bbb933c1c4d11d662bcf552b38b0767fd8e4" translate="yes" xml:space="preserve">
          <source>If you need to use strings with these sequences, store them in template variables or use a custom template tag or filter to workaround the limitation.</source>
          <target state="translated">이러한 시퀀스에 문자열을 사용해야하는 경우 템플릿 변수에 저장하거나 사용자 지정 템플릿 태그 또는 필터를 사용하여 제한을 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="2378beb626084b4cc95382cdb283eb570e4777a7" translate="yes" xml:space="preserve">
          <source>If you need to use these decorators, then you should decorate your test methods with &lt;a href=&quot;../async#asgiref.sync.async_to_sync&quot;&gt;&lt;code&gt;async_to_sync()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;inside&lt;/em&gt; of them instead:</source>
          <target state="translated">당신이이 장식을 사용해야하는 경우에, 당신은 귀하의 시험 방법을 장식한다 &lt;a href=&quot;../async#asgiref.sync.async_to_sync&quot;&gt; &lt;code&gt;async_to_sync()&lt;/code&gt; &lt;/a&gt;&lt;em&gt; 내부&lt;/em&gt; 대신 그들의를 :</target>
        </trans-unit>
        <trans-unit id="fcc7733e03c7800262e0a10bde85e2867cb41401" translate="yes" xml:space="preserve">
          <source>If you need two annotations with two separate filters you can use the &lt;code&gt;filter&lt;/code&gt; argument with any aggregate. For example, to generate a list of authors with a count of highly rated books:</source>
          <target state="translated">두 개의 개별 필터가있는 두 개의 주석이 필요한 경우 집계와 함께 &lt;code&gt;filter&lt;/code&gt; 인수를 사용할 수 있습니다 . 예를 들어, 높은 등급의 책을 가진 저자 목록을 생성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c897784a3f3666e7ffa637c1500a855cd1d427d9" translate="yes" xml:space="preserve">
          <source>If you obtain an error, you will have to recompile SQLite from source. Otherwise, skip this section.</source>
          <target state="translated">오류가 발생하면 소스에서 SQLite를 다시 컴파일해야합니다. 그렇지 않으면이 섹션을 건너 뛰십시오.</target>
        </trans-unit>
        <trans-unit id="741f58ec7bbe2e730412e151c54ddb2163fa4a4f" translate="yes" xml:space="preserve">
          <source>If you often use this pattern:</source>
          <target state="translated">이 패턴을 자주 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="2f212d93748c23a6b8f8df2fb8bdf19695fec4c9" translate="yes" xml:space="preserve">
          <source>If you omit the extensions, Django will search all available fixture types for a matching fixture. For example:</source>
          <target state="translated">확장을 생략하면 Django는 사용 가능한 모든 조명기 유형에서 일치하는 조명기를 찾습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b7281fcbaa809c600b8793d4f53e33c8473eac8d" translate="yes" xml:space="preserve">
          <source>If you only need a foreign key value, use the foreign key value that is already on the object you&amp;rsquo;ve got, rather than getting the whole related object and taking its primary key. i.e. do:</source>
          <target state="translated">외래 키 값만 필요한 경우 전체 관련 개체를 가져와 기본 키를 사용하지 않고 이미 가지고있는 개체에있는 외래 키 값을 사용하십시오. 즉 :</target>
        </trans-unit>
        <trans-unit id="800fadfa713dccf394aba70d45e9d4112ae330ee" translate="yes" xml:space="preserve">
          <source>If you only pass in a single field, you can also pass in the &lt;code&gt;flat&lt;/code&gt; parameter. If &lt;code&gt;True&lt;/code&gt;, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer:</source>
          <target state="translated">단일 필드 만 전달하는 경우 &lt;code&gt;flat&lt;/code&gt; 매개 변수를 전달할 수도 있습니다 . &lt;code&gt;True&lt;/code&gt; 이면 인 반환 된 결과가 1- 튜플이 아닌 단일 값임을 의미합니다. 예를 들어 차이를 더 명확하게해야합니다.</target>
        </trans-unit>
        <trans-unit id="21a02b2eee96e24a49f04e13b9eb6b72eba93d67" translate="yes" xml:space="preserve">
          <source>If you only serialize the Restaurant model:</source>
          <target state="translated">식당 모델 만 직렬화하는 경우 :</target>
        </trans-unit>
        <trans-unit id="09d4a126b134831de63cd4bb62765a50804cd5f0" translate="yes" xml:space="preserve">
          <source>If you only want a subset of fields to be serialized, you can specify a &lt;code&gt;fields&lt;/code&gt; argument to the serializer:</source>
          <target state="translated">필드의 서브 세트 만 직렬화 하려면 직렬화기에 &lt;code&gt;fields&lt;/code&gt; 인수를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4364377f218dbdb6f693a8ac230e516ce29b7d3f" translate="yes" xml:space="preserve">
          <source>If you only want files of a particular type, you can use the subscript operator to filter out a medium of interest. For example:</source>
          <target state="translated">특정 유형의 파일 만 원하는 경우 아래 첨자 연산자를 사용하여 관심있는 매체를 필터링 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b7761bd9d1203f2151ef4f8ccf146d8e1530f6c1" translate="yes" xml:space="preserve">
          <source>If you only want to pickle the necessary information to recreate the &lt;code&gt;QuerySet&lt;/code&gt; from the database at a later time, pickle the &lt;code&gt;query&lt;/code&gt; attribute of the &lt;code&gt;QuerySet&lt;/code&gt;. You can then recreate the original &lt;code&gt;QuerySet&lt;/code&gt; (without any results loaded) using some code like this:</source>
          <target state="translated">당신은 단지 재현하는 데 필요한 정보 피클하려면 &lt;code&gt;QuerySet&lt;/code&gt; 나중에 데이터베이스를, 피클 &lt;code&gt;query&lt;/code&gt; 의 속성 &lt;code&gt;QuerySet&lt;/code&gt; . 그런 다음 다음 과 같은 코드를 사용하여 결과를로드하지 않고 원래 &lt;code&gt;QuerySet&lt;/code&gt; 을 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57e21af0c1526d4117f7cb3d0a6e6b7c87ae870c" translate="yes" xml:space="preserve">
          <source>If you opt to use this third method and you don&amp;rsquo;t iterate over the fields with a &lt;code&gt;{% for %}&lt;/code&gt; loop, you&amp;rsquo;ll need to render the primary key field. For example, if you were rendering the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; fields of a model:</source>
          <target state="translated">이 세 번째 방법을 사용하도록 선택하고 &lt;code&gt;{% for %}&lt;/code&gt; 루프가 있는 필드를 반복하지 않으면 기본 키 필드를 렌더링해야합니다. 예를 들어, 모델 의 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;age&lt;/code&gt; 필드를 렌더링하는 경우 :</target>
        </trans-unit>
        <trans-unit id="f4b5a3ee8156aeb994b28c82b8a75b4aeb508550" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">설정 파일에서 &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; 을 무시 하고 내장 상수를 사용하는 경우 순환 가져 오기의 가능성을 피하기 위해 상수 모듈을 직접 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="7a02510672f31144e2b0955819bddaf9315a3389" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the &lt;code&gt;constants&lt;/code&gt; module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">설정 파일에서 &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; 를 재정의 하고 내장 상수 를 사용하는 경우 순환 가져 오기의 가능성을 피하기 위해 &lt;code&gt;constants&lt;/code&gt; 모듈을 직접 가져와야합니다 .</target>
        </trans-unit>
        <trans-unit id="8b48af8079716221e4c0051117d47bfd44a4b260" translate="yes" xml:space="preserve">
          <source>If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format.</source>
          <target state="translated">이러한 메소드를 대체하는 경우 각 피드 형식에 필요한 요소를 추가하므로 수퍼 클래스 메소드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bdf1c5dfe752c4d781780083470ca6f0e40af894" translate="yes" xml:space="preserve">
          <source>If you override the &lt;code&gt;get_queryset()&lt;/code&gt; method and filter out any rows, Django will return incorrect results. Don&amp;rsquo;t do that. A manager that filters results in &lt;code&gt;get_queryset()&lt;/code&gt; is not appropriate for use as a base manager.</source>
          <target state="translated">&lt;code&gt;get_queryset()&lt;/code&gt; 메소드 를 재정의하고 행을 필터링하면 Django가 잘못된 결과를 반환합니다. 하지마 &lt;code&gt;get_queryset()&lt;/code&gt; 에서 결과를 필터링하는 관리자 는 기본 관리자로 사용하기에 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="efa7906aab8c824e5c384fdd3e0c6fb2aa3af44d" translate="yes" xml:space="preserve">
          <source>If you override these methods on your model, you must call the parent class&amp;rsquo; methods for these signals to be sent.</source>
          <target state="translated">모델에서 이러한 메서드를 재정의하는 경우 이러한 신호를 보내려면 부모 클래스의 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="139f65047f08d0c31df99bf777b749aac8b06810" translate="yes" xml:space="preserve">
          <source>If you override this method, make sure that the returned inlines are instances of the classes defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt;&lt;code&gt;inlines&lt;/code&gt;&lt;/a&gt; or you might encounter a &amp;ldquo;Bad Request&amp;rdquo; error when adding related objects.</source>
          <target state="translated">이 메소드를 오버라이드 (override)하는 경우, 반환 된 인라인가에 정의 된 클래스의 인스턴스인지 확인 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt; &lt;code&gt;inlines&lt;/code&gt; &lt;/a&gt; 또는 관련 개체를 추가 할 때 당신은 &quot;잘못된 요청&quot;오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd49ed7d9ce6425ca491d84c25250c4b7a60d8ad" translate="yes" xml:space="preserve">
          <source>If you pass &lt;code&gt;in_bulk()&lt;/code&gt; an empty list, you&amp;rsquo;ll get an empty dictionary.</source>
          <target state="translated">&lt;code&gt;in_bulk()&lt;/code&gt; 에 빈 목록 을 전달 하면 빈 사전이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="738c5872b2d80eca3eabca4443294a67bf3373b0" translate="yes" xml:space="preserve">
          <source>If you pass a non-string value to &lt;code&gt;sign&lt;/code&gt;, the value will be forced to string before being signed, and the &lt;code&gt;unsign&lt;/code&gt; result will give you that string value:</source>
          <target state="translated">문자열이 아닌 값을 &lt;code&gt;sign&lt;/code&gt; 에 전달하면 값은 서명되기 전에 문자열로 강제 적용되며 &lt;code&gt;unsign&lt;/code&gt; 결과는 해당 문자열 값을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="01b4c8798ac8d3c2ee64f1b7afb638cce29f856f" translate="yes" xml:space="preserve">
          <source>If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a &lt;code&gt;UnicodeDecodeError&lt;/code&gt; at some point.</source>
          <target state="translated">다른 형식으로 인코딩 된 Django에 문자열을 전달하면 흥미로운 방식으로 문제가 발생합니다. 일반적으로 Django는 어느 시점에서 &lt;code&gt;UnicodeDecodeError&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f875b90b3600dbb8929f4dd6aae0773f46d238bd" translate="yes" xml:space="preserve">
          <source>If you pass an invalid keyword argument, a lookup function will raise &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">잘못된 키워드 인수를 전달하면 조회 함수에서 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="2a3d957dd878c573465d3ad6cc8518f32e53e656" translate="yes" xml:space="preserve">
          <source>If you pass in a &lt;code&gt;QuerySet&lt;/code&gt; resulting from &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;values_list()&lt;/code&gt; as the value to an &lt;code&gt;__in&lt;/code&gt; lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names):</source>
          <target state="translated">만약에 전달하면 &lt;code&gt;QuerySet&lt;/code&gt; 의 결과 &lt;code&gt;values()&lt;/code&gt; 또는 &lt;code&gt;values_list()&lt;/code&gt; 내지 An 값으로 &lt;code&gt;__in&lt;/code&gt; 의 룩업 경우에만 결과로 하나 개의 필드를 추출되도록 할 필요가있다. 예를 들어, 다음과 같이 작동합니다 (블로그 이름 필터링).</target>
        </trans-unit>
        <trans-unit id="55a3e9f28be7d4fb14de4ec185385e4a1a973d4f" translate="yes" xml:space="preserve">
          <source>If you pass the &lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option when running your command, all &lt;code&gt;self.style()&lt;/code&gt; calls will return the original string uncolored.</source>
          <target state="translated">명령을 실행할 때 &lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt; &lt;code&gt;--no-color&lt;/code&gt; &lt;/a&gt; 옵션 을 전달하면 모든 &lt;code&gt;self.style()&lt;/code&gt; 호출이 원래 문자열을 무색으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b79b1f32de698ec64ae613eae6bcf15970d7b876" translate="yes" xml:space="preserve">
          <source>If you plan on using Django&amp;rsquo;s &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;timezone support&lt;/a&gt;, use &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt; to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database.</source>
          <target state="translated">Django의 &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;시간대 지원&lt;/a&gt; 을 사용하려는 경우 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt; 을 사용 하여 시간대 테이블을 MySQL 데이터베이스에로드하십시오. 이 작업은 데이터베이스가 아닌 MySQL 서버에 대해 한 번만 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="3d07ba410dfae393dcd5dd3868653a7b65add33c" translate="yes" xml:space="preserve">
          <source>If you plan to remove the old app later, you&amp;rsquo;ll need to set the &lt;code&gt;dependencies&lt;/code&gt; property based on whether or not the old app is installed. Otherwise, you&amp;rsquo;ll have missing dependencies once you uninstall the old app. Similarly, you&amp;rsquo;ll need to catch &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;apps.get_model()&lt;/code&gt; call that retrieves models from the old app. This approach allows you to deploy your project anywhere without first installing and then uninstalling the old app.</source>
          <target state="translated">나중에 이전 앱을 제거하려는 경우 이전 앱의 설치 여부에 &lt;code&gt;dependencies&lt;/code&gt; 속성 을 설정해야합니다 . 그렇지 않으면 이전 앱을 제거하면 종속성이 누락됩니다. 마찬가지로 이전 앱에서 모델을 검색 하는 &lt;code&gt;apps.get_model()&lt;/code&gt; 호출 에서 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; &lt;/a&gt; 를 잡아야 합니다. 이 방법을 사용하면 이전 앱을 먼저 설치 한 다음 제거하지 않고도 어디서나 프로젝트를 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9073c8632746695fe881c718b8ef04b35fa192e4" translate="yes" xml:space="preserve">
          <source>If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you &lt;strong&gt;must&lt;/strong&gt; set the &lt;code&gt;threaded&lt;/code&gt; option of your Oracle database configuration to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">다중 스레드 환경에서 Django를 실행하려는 경우 (예 : 최신 운영 체제에서 기본 MPM 모듈을 사용하는 Apache) Oracle 데이터베이스 구성 의 &lt;code&gt;threaded&lt;/code&gt; 옵션을 &lt;code&gt;True&lt;/code&gt; 로 설정 &lt;strong&gt;해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8d225f0abfbc3c7de48d5bc9786ca2d1091b6fe9" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s &lt;code&gt;manage.py migrate&lt;/code&gt; command to automatically create database tables for your models (after first installing Django and creating a project), you&amp;rsquo;ll need to ensure that Django has permission to create and alter tables in the database you&amp;rsquo;re using; if you plan to manually create the tables, you can grant Django &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; permissions. After creating a database user with these permissions, you&amp;rsquo;ll specify the details in your project&amp;rsquo;s settings file, see &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">Django의 &lt;code&gt;manage.py migrate&lt;/code&gt; 명령을 사용하여 모델의 데이터베이스 테이블을 자동으로 작성하려면 (먼저 Django를 설치하고 프로젝트를 작성한 후) Django가 데이터베이스에서 테이블을 작성하고 변경할 수있는 권한이 있는지 확인해야합니다. 다시 사용; 테이블을 수동으로 생성하려는 경우 Django &lt;code&gt;SELECT&lt;/code&gt; , &lt;code&gt;INSERT&lt;/code&gt; , &lt;code&gt;UPDATE&lt;/code&gt; 및 &lt;code&gt;DELETE&lt;/code&gt; 권한을 부여 할 수 있습니다 . 이러한 권한으로 데이터베이스 사용자를 생성 한 후 프로젝트 설정 파일에 세부 정보를 지정합니다. 자세한 내용은 &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1cf8ce09ee94ba97497f8c75ae9497949e7ca9e6" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s database API functionality, you&amp;rsquo;ll need to make sure a database server is running. Django supports many different database servers and is officially supported with &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;, &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt; and &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;.</source>
          <target state="translated">Django의 데이터베이스 API 기능을 사용하려면 데이터베이스 서버가 실행 중인지 확인해야합니다. Django는 다양한 데이터베이스 서버를 지원하며 &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; , &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt; , &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; , &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt; 및 &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite에서&lt;/a&gt; 공식적으로 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="f9ffb321598eac539d278bb929456e302d26fb2d" translate="yes" xml:space="preserve">
          <source>If you plan to use PostGIS raster functionality on PostGIS 3+, you should also activate the &lt;code&gt;postgis_raster&lt;/code&gt; extension. You can install the extension using the &lt;a href=&quot;../../postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt;&lt;code&gt;CreateExtension&lt;/code&gt;&lt;/a&gt; migration operation, or directly by running &lt;code&gt;CREATE EXTENSION postgis_raster;&lt;/code&gt;.</source>
          <target state="translated">PostGIS 3+에서 PostGIS 래스터 기능을 사용하려면 &lt;code&gt;postgis_raster&lt;/code&gt; 확장 기능 도 활성화해야 합니다. &lt;a href=&quot;../../postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt; &lt;code&gt;CreateExtension&lt;/code&gt; &lt;/a&gt; 마이그레이션 작업을 사용하거나 &lt;code&gt;CREATE EXTENSION postgis_raster;&lt;/code&gt; 를 실행하여 직접 확장을 설치할 수 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="2d29104b9899b9d86e33356f84568767e51c25b0" translate="yes" xml:space="preserve">
          <source>If you point the test client at a view that raises an exception and &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, that exception will be visible in the test case. You can then use a standard &lt;code&gt;try ... except&lt;/code&gt; block or &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt; to test for exceptions.</source>
          <target state="translated">예외를 발생시키는보기에서 테스트 클라이언트를 가리키고 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; 이 &lt;code&gt;True&lt;/code&gt; 인 경우 테스트 케이스에 해당 예외가 표시됩니다. 그런 다음 block 또는 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt; &lt;code&gt;assertRaises()&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;try ... except&lt;/code&gt; 표준 try ... 를 사용하여 예외를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a1ee774d1d6b71e65f51c9761d622d272f3e630" translate="yes" xml:space="preserve">
          <source>If you press &lt;code&gt;Ctrl-C&lt;/code&gt; while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing &lt;code&gt;Ctrl-C&lt;/code&gt; can be very useful if you forget to pass the &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt;&lt;code&gt;--failfast&lt;/code&gt;&lt;/a&gt; option, notice that some tests are unexpectedly failing and want to get details on the failures without waiting for the full test run to complete.</source>
          <target state="translated">를 누르면 &lt;code&gt;Ctrl-C&lt;/code&gt; 를이 테스트가 실행하는 동안, 테스트 러너를 완료하는 데 현재 실행중인 테스트 기다린 후 정상적으로 종료됩니다. 정상 종료하는 동안 테스트 실행기는 테스트 실패에 대한 세부 사항을 출력하고, 실행 된 테스트 수와 발생한 오류 및 실패 수를보고하며, 평소와 같이 테스트 데이터베이스를 파괴합니다. 따라서 &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt; &lt;code&gt;--failfast&lt;/code&gt; &lt;/a&gt; 옵션 을 전달 하지 않고 일부 테스트가 예기치 않게 실패하고 전체 테스트 실행이 완료되기를 기다리지 않고 실패에 대한 세부 정보를 얻으 려는 경우 &lt;code&gt;Ctrl-C&lt;/code&gt; 를 누르면 매우 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9fd3c524d495f19aa19c27cdbbee5399534aacb6" translate="yes" xml:space="preserve">
          <source>If you provide &lt;code&gt;content_type&lt;/code&gt; as &lt;em&gt;application/json&lt;/em&gt;, the &lt;code&gt;data&lt;/code&gt; is serialized using &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt;&lt;code&gt;json.dumps()&lt;/code&gt;&lt;/a&gt; if it&amp;rsquo;s a dict, list, or tuple. Serialization is performed with &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; by default, and can be overridden by providing a &lt;code&gt;json_encoder&lt;/code&gt; argument to &lt;a href=&quot;#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;. This serialization also happens for &lt;a href=&quot;#django.test.Client.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.test.Client.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; requests.</source>
          <target state="translated">당신이 제공하는 경우 &lt;code&gt;content_type&lt;/code&gt; 같이 &lt;em&gt;응용 프로그램 / JSON&lt;/em&gt; 의 &lt;code&gt;data&lt;/code&gt; 사용하여 직렬화 &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt; &lt;code&gt;json.dumps()&lt;/code&gt; &lt;/a&gt; 그것은 DICT, 목록 또는 튜플의 경우. 직렬화는 기본적 으로 &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; 를 사용&lt;/a&gt; 하여 수행되며 &lt;code&gt;json_encoder&lt;/code&gt; 인수를 &lt;a href=&quot;#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; &lt;/a&gt; 에 제공하여 재정의 할 수 있습니다 . 이 직렬화는 &lt;a href=&quot;#django.test.Client.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.test.Client.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.test.Client.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 요청 에도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="d70400506fc271afc5226a9156b79bd7b0a3892e" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;description&lt;/code&gt; in your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class, Django will &lt;em&gt;not&lt;/em&gt; automatically put that into the &lt;code&gt;subtitle&lt;/code&gt; element, because a subtitle and description are not necessarily the same thing. Instead, you should define a &lt;code&gt;subtitle&lt;/code&gt; attribute.</source>
          <target state="translated">당신이 제공하는 경우 &lt;code&gt;description&lt;/code&gt; 당신의 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스, 장고 것 &lt;em&gt;없는&lt;/em&gt; 자동으로 그 넣어 &lt;code&gt;subtitle&lt;/code&gt; 자막과 설명이 반드시 동일한 것은 아니기 때문에, 요소입니다. 대신 &lt;code&gt;subtitle&lt;/code&gt; 속성을 정의해야 합니다.</target>
        </trans-unit>
        <trans-unit id="aa823e0a0041a6947816c68759b373adb5e9f2ff" translate="yes" xml:space="preserve">
          <source>If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence.</source>
          <target state="translated">인코딩 된 GET 데이터와 데이터 인수가 모두있는 URL을 제공하면 데이터 인수가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="10f0311a7904a5e576592cc2026a0cba559e4f85" translate="yes" xml:space="preserve">
          <source>If you provide an &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance as the sender argument, please ensure that the signal is registered in &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;AppConfig&lt;/code&gt;s are recreated for tests that run with a modified set of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; (such as when settings are overridden) and such signals should be connected for each new &lt;code&gt;AppConfig&lt;/code&gt; instance.</source>
          <target state="translated">송신자 인수로 &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 인스턴스 를 제공하는 경우 신호가 &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 등록되어 있는지 확인하십시오 . 수정 된 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 세트 (예 : 설정이 무시되는 경우)로 실행되는 테스트를 위해 &lt;code&gt;AppConfig&lt;/code&gt; 가 다시 생성 되며 이러한 신호는 각각의 새로운 &lt;code&gt;AppConfig&lt;/code&gt; 인스턴스에 연결되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="b4f73da389b543957cd3a9484131a18f37edca2b" translate="yes" xml:space="preserve">
          <source>If you provide an anonymous user, &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; will behave the same as if you hadn&amp;rsquo;t provided a user &amp;ndash; i.e., it will only show you public flatpages.</source>
          <target state="translated">익명 사용자를 제공하는 경우 &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt; &lt;code&gt;get_flatpages&lt;/code&gt; &lt;/a&gt; 는 사용자를 제공 하지 않은 것과 동일하게 작동합니다. 즉, 공개 플랫 페이지 만 표시합니다.</target>
        </trans-unit>
        <trans-unit id="9045948db59d0563c0a89ef13a497ad48bb714a4" translate="yes" xml:space="preserve">
          <source>If you provide any other &lt;code&gt;content_type&lt;/code&gt; (e.g. &lt;em&gt;text/xml&lt;/em&gt; for an XML payload), the contents of &lt;code&gt;data&lt;/code&gt; are sent as-is in the POST request, using &lt;code&gt;content_type&lt;/code&gt; in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">다른 &lt;code&gt;content_type&lt;/code&gt; (예 : XML 페이로드의 경우 &lt;em&gt;text / xml&lt;/em&gt; ) 을 제공하면 HTTP &lt;code&gt;Content-Type&lt;/code&gt; 헤더의 &lt;code&gt;content_type&lt;/code&gt; 을 사용하여 POST 요청에서 그대로 &lt;code&gt;data&lt;/code&gt; 내용 이 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="910309a8687236b4eef1cb1fc342a8ae2c903a62" translate="yes" xml:space="preserve">
          <source>If you provide the &lt;code&gt;app_label&lt;/code&gt; argument, &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; will automatically create the package if it doesn&amp;rsquo;t already exist.</source>
          <target state="translated">&lt;code&gt;app_label&lt;/code&gt; 인수 를 제공하면 &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 가 패키지가없는 경우 자동으로 패키지를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="6a321433ae0fb44c3dba2485b43003a37dcff291" translate="yes" xml:space="preserve">
          <source>If you raise a &lt;code&gt;StopUpload&lt;/code&gt; or a &lt;code&gt;SkipFile&lt;/code&gt; exception, the upload will abort or the file will be completely skipped.</source>
          <target state="translated">당신이 올리면 &lt;code&gt;StopUpload&lt;/code&gt; 또는 &lt;code&gt;SkipFile&lt;/code&gt; 예외를 업로드는 중단됩니다 또는 파일을 완전히 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="f5c930b9d9ff449d37bc58a058280baf8e9d25ba" translate="yes" xml:space="preserve">
          <source>If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone:</source>
          <target state="translated">변환을 직접 수행해야하는 경우 먼저 날짜 시간을 적절한 시간대로 변환해야합니다. 일반적으로 다음은 현재 시간대입니다.</target>
        </trans-unit>
        <trans-unit id="aba032f0055b3ba362cd40902bc9f74174f0f582" translate="yes" xml:space="preserve">
          <source>If you reference &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; directly (for example, by referring to it in a foreign key), your code will not work in projects where the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting has been changed to a different user model.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 직접 참조하는 경우 (예 : 외래 키에서 사용자 를 참조하여) &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt; 설정이 다른 사용자 모델로 변경된 프로젝트에서는 코드가 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0e1ecb9bcfed717dbcef9591ae9c8802ed73bd90" translate="yes" xml:space="preserve">
          <source>If you render a bound &lt;code&gt;Form&lt;/code&gt; object, the act of rendering will automatically run the form&amp;rsquo;s validation if it hasn&amp;rsquo;t already happened, and the HTML output will include the validation errors as a &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; near the field. The particular positioning of the error messages depends on the output method you&amp;rsquo;re using:</source>
          <target state="translated">바인딩 된 &lt;code&gt;Form&lt;/code&gt; 객체 를 렌더링하는 경우 렌더링 작업은 양식의 유효성 검사가 아직 수행되지 않은 경우 자동으로 실행하며 HTML 출력에는 유효성 검사 오류 가 필드 근처의 &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; 로 포함 됩니다. 오류 메시지의 특정 위치는 사용중인 출력 방법에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="07459c1428179836772ae027ec5297d2da1c0fb6" translate="yes" xml:space="preserve">
          <source>If you require even more control over inheritance, define your assets using a &lt;a href=&quot;#dynamic-property&quot;&gt;dynamic property&lt;/a&gt;. Dynamic properties give you complete control over which files are inherited, and which are not.</source>
          <target state="translated">상속에 대해 더 많은 제어가 필요한 경우 &lt;a href=&quot;#dynamic-property&quot;&gt;동적 속성을&lt;/a&gt; 사용하여 자산을 정의하십시오 . 동적 속성을 통해 상속되는 파일과 그렇지 않은 파일을 완벽하게 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b05712d776517317396db80b42d65e9ba95c552" translate="yes" xml:space="preserve">
          <source>If you require support for a concrete data type other than &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt;, you can subclass &lt;code&gt;Choices&lt;/code&gt; and the required concrete data type, e.g. &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; for use with &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;str&lt;/code&gt; 이외의 구체적 데이터 유형에 대한 지원이 필요한 경우 &lt;code&gt;Choices&lt;/code&gt; 및 필수 콘크리트 데이터 유형 (예 : &lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 와 함께 사용하는 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 을 서브 클래 싱 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db9d39b35fe6f2b0b25e26ce3e859ec9c161c377" translate="yes" xml:space="preserve">
          <source>If you rotate your secret key, all of the above will be invalidated. Secret keys are not used for passwords of users and key rotation will not affect them.</source>
          <target state="translated">비밀 키를 돌리면 위의 모든 것이 무효화됩니다. 비밀 키는 사용자의 암호에 사용되지 않으며 키 회전은 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce316f0b6ed1ed42439817ae8b4f2b1e4a6893ce" translate="yes" xml:space="preserve">
          <source>If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root).</source>
          <target state="translated">일반 권한 (권장)을 가진 사용자로이 스크립트를 실행하면 낮은 포트 번호에서 포트를 시작할 수있는 액세스 권한이 없을 수 있습니다. 낮은 포트 번호는 수퍼 유저 (루트)를 위해 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e41cf1bc99b54789424ebdb54c86380a8a4bc54f" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-7&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt;, access settings values somehow, &lt;em&gt;then&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt;, Django will raise a &lt;code&gt;RuntimeError&lt;/code&gt; indicating that settings have already been configured. There is a property for this purpose:</source>
          <target state="translated">를 설정하면 &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-7&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을&lt;/a&gt; , 액세스 설정 값이 어떻게 든, &lt;em&gt;다음&lt;/em&gt; 호출 &lt;code&gt;configure()&lt;/code&gt; , 장고는 올릴 것이다 &lt;code&gt;RuntimeError&lt;/code&gt; 에 설정이 이미 구성되어 있는지 표시합니다. 이 목적을위한 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="581d2693ba51ca9c6d74a9c3aec8c1d2ed991658" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;, the logging configuration process will be skipped.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정 하면 로깅 구성 프로세스를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="6c3c4b3192dde41e8664985f2f99b630a848a1da" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">를 설정하면 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; 를&lt;/a&gt; 에 &lt;code&gt;False&lt;/code&gt; 제대로 설정하려면, 당신은 또한 필요 &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt; 설정합니다.</target>
        </trans-unit>
        <trans-unit id="912981cf3b9022683052e38d66b9a92981f3bcd3" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you must remove the slash in the catchall pattern or flatpages without a trailing slash will not be matched.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정 하면 후행 슬래시가 없으면 캐치 올 패턴에서 슬래시를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="395ad5010523ffc1e4b670f7488f023e63a22e17" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;, access settings values somehow, &lt;em&gt;then&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt;, Django will raise a &lt;code&gt;RuntimeError&lt;/code&gt; indicating that settings have already been configured. There is a property for this purpose:</source>
          <target state="translated">를 설정하면 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을 , 액세스 설정 값이 어떻게 든, &lt;em&gt;다음&lt;/em&gt; 호출 &lt;code&gt;configure()&lt;/code&gt; , 장고는 올릴 것이다 &lt;code&gt;RuntimeError&lt;/code&gt; 에 설정이 이미 구성되어 있는지 표시합니다. 이 목적을위한 속성이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fe70b07e6ecfbabb2180c75d50c0a38a0f922032" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;follow&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will follow any redirects and a &lt;code&gt;redirect_chain&lt;/code&gt; attribute will be set in the response object containing tuples of the intermediate urls and status codes.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 클라이언트가 모든 리디렉션을 따르고 &lt;code&gt;redirect_chain&lt;/code&gt; 속성이 중간 URL 및 상태 코드의 튜플을 포함하는 응답 객체에 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3b6d0e5b836e0ffb759b558f1953cb5c40ecbc36" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;secure&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will emulate an HTTPS request.</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 클라이언트가 HTTPS 요청을 에뮬레이트합니다.</target>
        </trans-unit>
        <trans-unit id="ed87f4fbcb2623f91b4272494cedf3618bd43220" translate="yes" xml:space="preserve">
          <source>If you set the &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; setting to True, &lt;code&gt;SecurityMiddleware&lt;/code&gt; will permanently (HTTP 301) redirect all HTTP connections to HTTPS.</source>
          <target state="translated">당신이 설정 한 경우 &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; 의&lt;/a&gt; True로 설정을 &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는 영구적 (HTTP 301) HTTPS에 대한 모든 HTTP 연결을 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="804dd8b3f2f0998b19444a70dea6c4f275857e45" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;max_length&lt;/code&gt; attribute, it will be reflected in the &lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt;&lt;code&gt;Textarea&lt;/code&gt;&lt;/a&gt; widget of the auto-generated form field. However it is not enforced at the model or database level. Use a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for that.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 속성 을 지정 하면 자동 생성 양식 필드 의 &lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt; &lt;code&gt;Textarea&lt;/code&gt; &lt;/a&gt; 위젯에 반영됩니다 . 그러나 모델 또는 데이터베이스 레벨에서는 적용되지 않습니다. &lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 위해 CharField 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9247f5ac3aa9a42d00715df98ff9b7c3141c9780" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;mimetype&lt;/code&gt; of &lt;code&gt;message/rfc822&lt;/code&gt;, it will also accept &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mimetype&lt;/code&gt; of &lt;code&gt;message/rfc822&lt;/code&gt; 를 지정하면 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; &lt;/a&gt; 도 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="4020c7114522e13a4b27d1776830d993a345f52a" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;mimetype&lt;/code&gt; of &lt;em&gt;message/rfc822&lt;/em&gt;, it will also accept &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">당신이 지정하는 경우 &lt;code&gt;mimetype&lt;/code&gt; 의 &lt;em&gt;메시지 / RFC822을&lt;/em&gt; , 또한 받아 들일 것 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="305c89bb0d6f74a15dce564b912bcda21f76247e" translate="yes" xml:space="preserve">
          <source>If you specify a string value or a &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, it may contain &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting, which will be replaced by the date/time of the file upload (so that uploaded files don&amp;rsquo;t fill up the given directory). For example:</source>
          <target state="translated">문자열 값 또는&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;하면 파일 업로드 날짜 / 시간으로 대체되는&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 형식이 포함될 수 있습니다 ( 업로드 된 파일이 지정된 디렉토리를 채우지 않음). 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="614fc3b6599f9800b8c0df59893296044168cf2c" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 속성을 모두 지정 하면 &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="58aa7a9ed4ab489b04c05563f7b555c7cbfda0ee" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 속성을 모두 지정 하면 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e42f6fe4a1eafc9cbe0fe1ed0eb44c26cf3abac5" translate="yes" xml:space="preserve">
          <source>If you try to compile message files with incorrectly flagged strings, you&amp;rsquo;ll get an error message like &lt;code&gt;number of format specifications in 'msgid' and
'msgstr' does not match&lt;/code&gt; or &lt;code&gt;'msgstr' is not a valid Python format string,
unlike 'msgid'&lt;/code&gt;.</source>
          <target state="translated">잘못 플래그가 지정된 문자열로 메시지 파일을 컴파일하려고하면 &lt;code&gt;number of format specifications in 'msgid' and 'msgstr' does not match&lt;/code&gt; 와 같은 오류 메시지가 표시 되고 'msgstr'이 일치하지 않거나 &lt;code&gt;'msgstr' is not a valid Python format string, unlike 'msgid'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5f573bc4c6fc46c2deb1fdead6cdb73bb482a8e" translate="yes" xml:space="preserve">
          <source>If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model, or order by the related model&amp;rsquo;s primary key if there is no &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;Meta.ordering&lt;/code&gt;&lt;/a&gt; specified. For example, since the &lt;code&gt;Blog&lt;/code&gt; model has no default ordering specified:</source>
          <target state="translated">다른 모델과 관련이있는 필드를 기준으로 주문하면 Django는 관련 모델에서 기본 순서를 사용하거나 &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;Meta.ordering&lt;/code&gt; 이&lt;/a&gt; 지정 되지 않은 경우 관련 모델의 기본 키를 사용하여 순서를 지정합니다. 예를 들어, &lt;code&gt;Blog&lt;/code&gt; 모델에는 기본 순서가 지정되어 있지 않으므로 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="4b74e6d17d477f89b500f2530d4cf1bb7e54270d" translate="yes" xml:space="preserve">
          <source>If you try to run any of these parts from a thread where there is a &lt;em&gt;running event loop&lt;/em&gt;, you will get a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; error. Note that you don&amp;rsquo;t have to be inside an async function directly to have this error occur. If you have called a sync function directly from an async function, without using &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt; or similar, then it can also occur. This is because your code is still running in a thread with an active event loop, even though it may not be declared as async code.</source>
          <target state="translated">&lt;em&gt;실행중인 이벤트 루프&lt;/em&gt; 가있는 스레드에서 이러한 부분을 실행하려고 하면 &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다. 이 오류가 발생하기 위해 비동기 함수 내부에 직접있을 필요는 없습니다. &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt; 등을 사용하지 않고 비동기 함수에서 직접 동기화 함수를 호출 한 경우 에도 발생할 수 있습니다. 이는 코드가 비동기 코드로 선언되지 않았더라도 활성 이벤트 루프가있는 스레드에서 여전히 실행 중이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="2949a48f95fe7e8506fdc6f5701b10f53659defb" translate="yes" xml:space="preserve">
          <source>If you try to run any of these parts from a thread where there is a &lt;em&gt;running event loop&lt;/em&gt;, you will get a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; error. Note that you don&amp;rsquo;t have to be inside an async function directly to have this error occur. If you have called a synchronous function directly from an asynchronous function without going through something like &lt;code&gt;sync_to_async&lt;/code&gt; or a threadpool, then it can also occur, as your code is still running in an asynchronous context.</source>
          <target state="translated">&lt;em&gt;이벤트 루프&lt;/em&gt; 가 &lt;em&gt;실행중인&lt;/em&gt; 스레드에서 이러한 부분을 실행하려고 하면 &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다. 이 오류가 발생하기 위해 비동기 함수 안에 직접있을 필요는 없습니다. &lt;code&gt;sync_to_async&lt;/code&gt; 또는 스레드 풀 과 같은 것을 거치지 않고 비동기 함수에서 직접 동기 함수를 호출 한 경우 코드가 여전히 비동기 컨텍스트에서 실행 중이므로 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6693a4c5d595d8b5d83b35a6ac98c4c846239c9" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; as explained above, &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will do this automatically when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;. If you don&amp;rsquo;t have &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, you can still manually serve static files using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">위에서 설명한대로 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 가이를 자동으로 수행합니다 . 당신이없는 경우 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 을 에 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; , 당신은 여전히 수동으로 사용하여 정적 파일을 제공 할 수 &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt; 보기를.</target>
        </trans-unit>
        <trans-unit id="8418102b1538f4a4f474193f2874d5390e66e014" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt;&lt;code&gt;{% extends %}&lt;/code&gt;&lt;/a&gt; in a template, it must be the first template tag in that template. Template inheritance won&amp;rsquo;t work, otherwise.</source>
          <target state="translated">템플릿에서 &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt; &lt;code&gt;{% extends %}&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 해당 템플릿의 첫 번째 템플릿 태그 여야합니다. 그렇지 않으면 템플릿 상속이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3afccef5fe1cf8e14fa9070553ef6dbbc3b09b80" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; methods clear the prefetched cache.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;add()&lt;/code&gt; , &lt;code&gt;remove()&lt;/code&gt; , &lt;code&gt;clear()&lt;/code&gt; 및 &lt;code&gt;set()&lt;/code&gt; 메소드는 프리 페치 된 캐시를 취소합니다.</target>
        </trans-unit>
        <trans-unit id="f71c7943193c59ecd27d1e4581a08197f0907309" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;CacheMiddleware&lt;/code&gt;, put &lt;code&gt;LocaleMiddleware&lt;/code&gt; after it.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;CacheMiddleware&lt;/code&gt; 을 넣어 &lt;code&gt;LocaleMiddleware&lt;/code&gt; 을 뒤에.</target>
        </trans-unit>
        <trans-unit id="f04e933cf73bf9a9662d42e68375fa7d7c6d1dc5" translate="yes" xml:space="preserve">
          <source>If you use a &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;encoder&lt;/code&gt; and &lt;code&gt;decoder&lt;/code&gt; from &lt;a href=&quot;../models/fields#django.db.models.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; 을&lt;/a&gt; 의 &lt;code&gt;encoder&lt;/code&gt; 및 &lt;code&gt;decoder&lt;/code&gt; 에서 &lt;a href=&quot;../models/fields#django.db.models.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; 이&lt;/a&gt; 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fc8b56cb887dca8be941443856060957b865139d" translate="yes" xml:space="preserve">
          <source>If you use a &lt;code&gt;values()&lt;/code&gt; clause after an &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call, any fields defined by a &lt;code&gt;select&lt;/code&gt; argument in the &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; must be explicitly included in the &lt;code&gt;values()&lt;/code&gt; call. Any &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call made after a &lt;code&gt;values()&lt;/code&gt; call will have its extra selected fields ignored.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;values()&lt;/code&gt; 절 애프터 &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 호출하는 의해 정의 된 모든 필드 &lt;code&gt;select&lt;/code&gt; 에 인수 &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 명시 적으로 포함되어야합니다 &lt;code&gt;values()&lt;/code&gt; 호출. 모든 &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 이후 전화 &lt;code&gt;values()&lt;/code&gt; 호출은 추가 선택 필드는 무시해야합니다.</target>
        </trans-unit>
        <trans-unit id="5138658165170713fe8921c287483c369dd879d1" translate="yes" xml:space="preserve">
          <source>If you use a variable that doesn&amp;rsquo;t exist, the template system will insert the value of the &lt;code&gt;string_if_invalid&lt;/code&gt; option, which is set to &lt;code&gt;''&lt;/code&gt; (the empty string) by default.</source>
          <target state="translated">존재하지 않는 변수를 사용하는 경우 템플리트 시스템은 기본적 으로 &lt;code&gt;''&lt;/code&gt; (빈 문자열)로 설정된 &lt;code&gt;string_if_invalid&lt;/code&gt; 옵션 의 값을 삽입합니다 .</target>
        </trans-unit>
        <trans-unit id="d3110291b387e92d09039d47bcce85bc592e4fda" translate="yes" xml:space="preserve">
          <source>If you use an &lt;code&gt;initial&lt;/code&gt; for displaying a formset, you should pass the same &lt;code&gt;initial&lt;/code&gt; when processing that formset&amp;rsquo;s submission so that the formset can detect which forms were changed by the user. For example, you might have something like: &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt;.</source>
          <target state="translated">양식 세트 를 표시 하기 위해 &lt;code&gt;initial&lt;/code&gt; 을 사용하는 경우 , 양식 세트가 사용자가 변경 한 양식을 감지 할 수 있도록 해당 양식 세트 제출을 처리 할 때 동일한 &lt;code&gt;initial&lt;/code&gt; 전달해야합니다 . 예를 들어 &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt; 과 같은 형식 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ab4496b070493e1cbd88967385539fa01b3ea78" translate="yes" xml:space="preserve">
          <source>If you use any of Django&amp;rsquo;s custom &lt;code&gt;TestCase&lt;/code&gt; classes, the test runner will clear the contents of the test email outbox at the start of each test case.</source>
          <target state="translated">Django의 사용자 정의 &lt;code&gt;TestCase&lt;/code&gt; 클래스 를 사용하는 경우 테스트 러너는 각 테스트 케이스가 시작될 때 테스트 이메일 발신 함의 내용을 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="af63582f03bb6e4c9e15c7b92a57d1ba5b4b0680" translate="yes" xml:space="preserve">
          <source>If you use caching middleware, it&amp;rsquo;s important to put each half in the right place within the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting. That&amp;rsquo;s because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the &lt;code&gt;Vary&lt;/code&gt; response header when it can.</source>
          <target state="translated">캐싱 미들웨어를 사용하는 경우 &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정 내에서 각 반을 올바른 위치에 두는 것이 중요 합니다. 캐시 미들웨어는 캐시 스토리지를 다양화할 헤더를 알아야하기 때문입니다. 미들웨어는 항상 &lt;code&gt;Vary&lt;/code&gt; 응답 헤더에 무언가를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="eb3ba9d9638be9dba67498258cd53f1f8d8c441d" translate="yes" xml:space="preserve">
          <source>If you use cookie-based sessions, pay extra care that your secret key is always kept completely secret, for any system which might be remotely accessible.</source>
          <target state="translated">쿠키 기반 세션을 사용하는 경우 원격으로 액세스 할 수있는 모든 시스템에 대해 비밀 키가 항상 완전히 비밀로 유지되도록 특별히주의하십시오.</target>
        </trans-unit>
        <trans-unit id="ac9946ee9d075e84bfbeea0cd48def7c04248d87" translate="yes" xml:space="preserve">
          <source>If you use custom &lt;code&gt;Manager&lt;/code&gt; objects, take note that the first &lt;code&gt;Manager&lt;/code&gt; Django encounters (in the order in which they&amp;rsquo;re defined in the model) has a special status. Django interprets the first &lt;code&gt;Manager&lt;/code&gt; defined in a class as the &amp;ldquo;default&amp;rdquo; &lt;code&gt;Manager&lt;/code&gt;, and several parts of Django (including &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt;) will use that &lt;code&gt;Manager&lt;/code&gt; exclusively for that model. As a result, it&amp;rsquo;s a good idea to be careful in your choice of default manager in order to avoid a situation where overriding &lt;code&gt;get_queryset()&lt;/code&gt; results in an inability to retrieve objects you&amp;rsquo;d like to work with.</source>
          <target state="translated">사용자 정의 &lt;code&gt;Manager&lt;/code&gt; 객체 를 사용 하는 경우 첫 번째 &lt;code&gt;Manager&lt;/code&gt; Django가 발생하면 (모델에 정의 된 순서대로) 특별한 상태가됩니다. Django 는 클래스에 정의 된 첫 번째 &lt;code&gt;Manager&lt;/code&gt; 를 &quot;기본&quot; &lt;code&gt;Manager&lt;/code&gt; 로 해석하고 Django의 여러 부분 ( &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 포함 )은 해당 모델에 대해 해당 &lt;code&gt;Manager&lt;/code&gt; 를 독점적으로 사용합니다 . 결과적으로 &lt;code&gt;get_queryset()&lt;/code&gt; 재정의 하면 작업하려는 객체를 검색 할 수없는 상황을 피하기 위해 기본 관리자를 신중하게 선택하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="3354dc763efee5cbb2a050e1c410a3261d6d6efb" translate="yes" xml:space="preserve">
          <source>If you use database caching with multiple databases, you&amp;rsquo;ll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named &lt;code&gt;CacheEntry&lt;/code&gt;, in an application named &lt;code&gt;django_cache&lt;/code&gt;. This model won&amp;rsquo;t appear in the models cache, but the model details can be used for routing purposes.</source>
          <target state="translated">여러 데이터베이스와 함께 데이터베이스 캐싱을 사용하는 경우 데이터베이스 캐시 테이블에 대한 라우팅 지침도 설정해야합니다. 라우팅을 위해 데이터베이스 캐시 테이블 은 &lt;code&gt;django_cache&lt;/code&gt; 라는 애플리케이션에서 &lt;code&gt;CacheEntry&lt;/code&gt; 라는 모델로 나타납니다 . 이 모델은 모델 캐시에 나타나지 않지만 라우팅을 위해 모델 세부 정보를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17cfa5ced8dcbb7e597664d335ed9ae258277518" translate="yes" xml:space="preserve">
          <source>If you use more than one &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view on a site and some of them define the same strings, the strings in the catalog that was loaded last take precedence.</source>
          <target state="translated">사이트에서 둘 이상의 &lt;code&gt;JavaScriptCatalog&lt;/code&gt; 보기 를 사용 하고 일부가 동일한 문자열을 정의하면 카탈로그에서 마지막으로로드 된 문자열이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="e46850bb8ec958f8fdf1580dc6739aff53945b19" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;cached_db&lt;/code&gt; session backend, you also need to follow the configuration instructions for the &lt;a href=&quot;#using-database-backed-sessions&quot;&gt;using database-backed sessions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cached_db&lt;/code&gt; 세션 백엔드 를 사용하는 경우 &lt;a href=&quot;#using-database-backed-sessions&quot;&gt;데이터베이스 기반 세션 사용에&lt;/a&gt; 대한 구성 지시 사항도 따라야 합니다 .</target>
        </trans-unit>
        <trans-unit id="6cf187a7f4b8a72e3eca21b8c45ef8b3ee2725a2" translate="yes" xml:space="preserve">
          <source>If you use the Bash shell, consider installing the Django bash completion script, which lives in &lt;code&gt;extras/django_bash_completion&lt;/code&gt; in the Django source distribution. It enables tab-completion of &lt;code&gt;django-admin&lt;/code&gt; and &lt;code&gt;manage.py&lt;/code&gt; commands, so you can, for instance&amp;hellip;</source>
          <target state="translated">Bash 쉘을 사용하는 경우 Django 소스 배포 에서 &lt;code&gt;extras/django_bash_completion&lt;/code&gt; 에있는 Django bash 완료 스크립트 설치를 고려하십시오 . &lt;code&gt;django-admin&lt;/code&gt; 및 &lt;code&gt;manage.py&lt;/code&gt; 명령 의 탭 완성을 가능하게 합니다. 예를 들어&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="544a332c4cb22ae2768b4c0f6f7c943861e6344b" translate="yes" xml:space="preserve">
          <source>If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;savepoint-related methods of the transactions API&lt;/a&gt;. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn&amp;rsquo;t worth to dynamically convert these methods in no-op&amp;rsquo;s based in the results of such detection.</source>
          <target state="translated">MyISAM 스토리지 엔진을 사용하는 &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;경우 트랜잭션 API&lt;/a&gt; 의 저장 점 관련 메소드 를 사용하려고하면 데이터베이스 생성 오류가 발생한다는 사실을 알고 있어야 합니다 . 그 이유는 MySQL 데이터베이스 / 테이블의 스토리지 엔진을 감지하는 작업은 비용이 많이 드는 작업이므로 이러한 검색 결과에 따라 이러한 메소드를 no-op 방식으로 동적으로 변환 할 가치가 없다는 결론을 내 렸습니다.</target>
        </trans-unit>
        <trans-unit id="612e62c7aaac6d3ed93e17cc5eb89853c3216591" translate="yes" xml:space="preserve">
          <source>If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it.</source>
          <target state="translated">기본 인증 백엔드를 사용하는 경우 모델에는 식별 목적으로 사용할 수있는 고유 한 단일 필드가 있어야합니다. 사용자 이름, 이메일 주소 또는 기타 고유 한 속성 일 수 있습니다. 지원할 수있는 사용자 정의 인증 백엔드를 사용하는 경우 고유하지 않은 사용자 이름 필드가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="632cae7f626396f49915f6528bfd124915502643" translate="yes" xml:space="preserve">
          <source>If you use this directly in a subclass, &lt;code&gt;objects&lt;/code&gt; will be the default manager if you declare no managers in the base class:</source>
          <target state="translated">이것을 서브 클래스에서 직접 사용하는 경우 기본 클래스에 관리자를 선언하지 않으면 &lt;code&gt;objects&lt;/code&gt; 가 기본 관리자가됩니다.</target>
        </trans-unit>
        <trans-unit id="0be2ddd3771f7e5301d04d44291e1551fbddd667" translate="yes" xml:space="preserve">
          <source>If you use this example, be sure to change the &lt;code&gt;'filename'&lt;/code&gt; path to a location that&amp;rsquo;s writable by the user that&amp;rsquo;s running the Django application.</source>
          <target state="translated">이 예제를 사용하는 경우, &lt;code&gt;'filename'&lt;/code&gt; 경로를 Django 애플리케이션을 실행중인 사용자가 쓸 수있는 위치 로 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="5390e72ce357a7eabd5449a3955b90282d9e0e6d" translate="yes" xml:space="preserve">
          <source>If you want &lt;em&gt;no&lt;/em&gt; bulk actions available for a given &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;, set &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt;&lt;code&gt;ModelAdmin.actions&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">지정된 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; 에&lt;/a&gt; 대해 대량 작업을 사용 &lt;em&gt;하지&lt;/em&gt; 않으려면 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt; &lt;code&gt;ModelAdmin.actions&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="3aec3757f7c2abfc3d404eaea0295a8443022fe5" translate="yes" xml:space="preserve">
          <source>If you want a form for the &lt;code&gt;Author&lt;/code&gt; model that includes only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; fields, you would specify &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; like this:</source>
          <target state="translated">당신이를위한 양식을 원하는 경우 &lt;code&gt;Author&lt;/code&gt; 만 포함 모델 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;title&lt;/code&gt; 필드를 지정할 것 &lt;code&gt;fields&lt;/code&gt; 또는 &lt;code&gt;exclude&lt;/code&gt; 다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="dac386a15e0c8bb88ff7bb297d68523406916892" translate="yes" xml:space="preserve">
          <source>If you want context data to take priority over context processors, use the following pattern:</source>
          <target state="translated">컨텍스트 데이터가 컨텍스트 프로세서보다 우선하려면 다음 패턴을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7e20d9f91dd7be41dd2b75340fb5ad46d7aff9dd" translate="yes" xml:space="preserve">
          <source>If you want customized deletion behavior, you can override the &lt;code&gt;delete()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">사용자 정의 된 삭제 동작을 원하는 경우 &lt;code&gt;delete()&lt;/code&gt; 메소드를 대체 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;사전 정의 된 모델 메소드 대체&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="93acdd6e4c8eae4615be0fc45ec00696af259471" translate="yes" xml:space="preserve">
          <source>If you want customized saving behavior, you can override this &lt;code&gt;save()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">사용자 정의 저장 동작을 원하는 경우이 &lt;code&gt;save()&lt;/code&gt; 메소드를 대체 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;사전 정의 된 모델 메소드 대체&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="be8f02ec9aac915643a3af8cb57319e744527c0c" translate="yes" xml:space="preserve">
          <source>If you want more control over your URLs, you can reference a specific view in your URLconf:</source>
          <target state="translated">URL을보다 세밀하게 제어하려면 URLconf에서 특정보기를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f457998a8d8d75ab48817a88d807beddf2f50846" translate="yes" xml:space="preserve">
          <source>If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:</source>
          <target state="translated">HTTPS가 제공하는 보호 기능을 원하고 서버에서 활성화 한 경우 몇 가지 추가 단계가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a14d621828e626147519d733f8c184b1c0c37ab4" translate="yes" xml:space="preserve">
          <source>If you want to add a check to a model class, the approach is &lt;em&gt;almost&lt;/em&gt; the same: the only difference is that the check is a classmethod, not an instance method:</source>
          <target state="translated">모델 클래스에 검사를 추가하려는 경우 접근 방식은 &lt;em&gt;거의&lt;/em&gt; 동일합니다. 유일한 차이점은 검사가 인스턴스 메소드가 아니라 클래스 메소드라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="56b33aa10e58145097aa338a7bdcf35a9f1eab1d" translate="yes" xml:space="preserve">
          <source>If you want to allow Unicode characters, pass &lt;code&gt;allow_unicode=True&lt;/code&gt;. For example:</source>
          <target state="translated">유니 코드 문자를 허용 &lt;code&gt;allow_unicode=True&lt;/code&gt; 전달하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="89e6786d70f17235ea0a07bab1827e495e61aad1" translate="yes" xml:space="preserve">
          <source>If you want to allow editing and creating an &lt;code&gt;Image&lt;/code&gt; instance on the &lt;code&gt;Product&lt;/code&gt;, add/change views you can use &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt;&lt;code&gt;GenericTabularInline&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt;&lt;code&gt;GenericStackedInline&lt;/code&gt;&lt;/a&gt; (both subclasses of &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt;) provided by &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/a&gt;. They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your &lt;code&gt;admin.py&lt;/code&gt; for this example app:</source>
          <target state="translated">&lt;code&gt;Product&lt;/code&gt; 에서 &lt;code&gt;Image&lt;/code&gt; 인스턴스 편집 및 작성을 허용 하려면보기를 추가 / 변경하면 &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt; &lt;code&gt;admin&lt;/code&gt; 이&lt;/a&gt; 제공하는 &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt; &lt;code&gt;GenericTabularInline&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt; &lt;code&gt;GenericStackedInline&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; 의&lt;/a&gt; 서브 클래스)을 사용할 수 있습니다 . 그것들은 제네릭이 아닌 다른 것들과 마찬가지로 각각 인라인 객체를 나타내는 폼에 대해 테이블 ​​형식 및 스택 형 시각적 레이아웃을 구현합니다. 그들은 다른 인라인과 똑같이 동작합니다. 이 예제 앱 의 &lt;code&gt;admin.py&lt;/code&gt; 에서 :</target>
        </trans-unit>
        <trans-unit id="dc86f9ac38476957adf53db6078bb6b2f39a0899" translate="yes" xml:space="preserve">
          <source>If you want to associate additional assets with a form &amp;ndash; for example, CSS for form layout &amp;ndash; add a &lt;code&gt;Media&lt;/code&gt; declaration to the form:</source>
          <target state="translated">추가 자산을 양식에 연결하려면 (예 : 양식 레이아웃 용 CSS) 양식에 &lt;code&gt;Media&lt;/code&gt; 선언을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca5663445451e733c438680c0b1cdbdb78de064c" translate="yes" xml:space="preserve">
          <source>If you want to automatically load initial data for an app, create a &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migration&lt;/a&gt;. Migrations are run when setting up the test database, so the data will be available there, subject to &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;some limitations&lt;/a&gt;.</source>
          <target state="translated">앱의 초기 데이터를 자동으로로드하려면 &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;데이터 마이그레이션을&lt;/a&gt; 만듭니다 . 테스트 데이터베이스를 설정할 때 마이그레이션이 실행되므로 &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;일부 제한 사항에&lt;/a&gt; 따라 데이터를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f619ca80296d2ab8fb9d0ccf4cddacae4955198" translate="yes" xml:space="preserve">
          <source>If you want to be really adventurous, you could even mix a &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; subclass that is able to return &lt;em&gt;both&lt;/em&gt; HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Mix in both the &lt;code&gt;JSONResponseMixin&lt;/code&gt; and a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt;, and override the implementation of &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; to defer to the appropriate rendering method depending on the type of response that the user requested:</source>
          <target state="translated">실제로 모험을 원한다면 쿼리 인수 또는 HTTP 헤더와 같은 HTTP 요청의 일부 속성에 따라 HTML 및 JSON 콘텐츠를 &lt;em&gt;모두&lt;/em&gt; 반환 할 수 있는 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 하위 클래스를 혼합 할 수도 있습니다. 양자의 혼합 &lt;code&gt;JSONResponseMixin&lt;/code&gt; 및 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 의 구현 및 재정의 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 는 사용자가 요청한 응답의 종류에 따라 적절한 렌더링 방식을 따름에 :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e48997e946b1d861be1ec919d53b25bf8cf15a1f" translate="yes" xml:space="preserve">
          <source>If you want to call a part of Django that is still synchronous, like the ORM, you will need to wrap it in a &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt; call. For example:</source>
          <target state="translated">ORM과 같이 여전히 동기적인 Django의 일부를 호출하려면 &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt; 호출 로 래핑해야합니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="b286b7423a58f0cdbf8dc79961083cfa7e97f673" translate="yes" xml:space="preserve">
          <source>If you want to call the group something else, you can set &lt;code&gt;pk_url_kwarg&lt;/code&gt; on the view. More details can be found in the reference for &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">그룹에 다른 것을 호출 하려면 뷰에서 &lt;code&gt;pk_url_kwarg&lt;/code&gt; 를 설정할 수 있습니다. 자세한 내용은 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 에 대한 참조에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73609264d7cce96ce235888ee071c9ba08110d63" translate="yes" xml:space="preserve">
          <source>If you want to change an unmanaged model (&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed=False&lt;/code&gt;&lt;/a&gt;) to managed, you must remove &lt;code&gt;managed=False&lt;/code&gt; and generate a migration before making other schema-related changes to the model, since schema changes that appear in the migration that contains the operation to change &lt;code&gt;Meta.managed&lt;/code&gt; may not be applied.</source>
          <target state="translated">관리되지 않는 모델 ( &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed=False&lt;/code&gt; &lt;/a&gt; )을 관리되는 것으로 변경하려는 경우, 조작을 포함하는 마이그레이션에 스키마 변경 사항이 표시되므로 모델에 대한 다른 스키마 관련 변경을 수행하기 전에 &lt;code&gt;managed=False&lt;/code&gt; 를 제거 하고 마이그레이션을 생성 해야합니다. 변경 &lt;code&gt;Meta.managed&lt;/code&gt; 가 적용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a36c203fa50ee87df5fef8091b5a765a085602e" translate="yes" xml:space="preserve">
          <source>If you want to change the URL of the polls detail view to something else, perhaps to something like &lt;code&gt;polls/specifics/12/&lt;/code&gt; instead of doing it in the template (or templates) you would change it in &lt;code&gt;polls/urls.py&lt;/code&gt;:</source>
          <target state="translated">설문 조사 세부 사항보기의 URL을 템플리트 (또는 템플리트)에서 수행하는 대신 &lt;code&gt;polls/specifics/12/&lt;/code&gt; 와 같은 다른 것으로 변경하려면 &lt;code&gt;polls/urls.py&lt;/code&gt; 에서 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd1a5725d6fa059579a40d41f2adb758f0ec7936" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:</source>
          <target state="translated">서버의 IP를 변경하려면 포트와 함께 IP를 전달하십시오. 예를 들어, 사용 가능한 모든 공용 IP를 청취하려면 (Vagrant를 실행 중이거나 네트워크의 다른 컴퓨터에서 작업을 과시하려는 경우에 유용합니다) 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7ac7bf138057c02102b254cb4eb4bc5c8cedeaa4" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:</source>
          <target state="translated">서버 포트를 변경하려면 명령 줄 인수로 전달하십시오. 예를 들어이 명령은 포트 8080에서 서버를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5a92e0eac7cf91c4cf108e75a7e4cb1c79be68f3" translate="yes" xml:space="preserve">
          <source>If you want to clear a bunch of keys at once, &lt;code&gt;delete_many()&lt;/code&gt; can take a list of keys to be cleared:</source>
          <target state="translated">한 번에 여러 키를 지우려면 &lt;code&gt;delete_many()&lt;/code&gt; 가 지울 키 목록을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a4bfa95187de8542d04a8bb8ab8cdef55f56bbf" translate="yes" xml:space="preserve">
          <source>If you want to clear the set of deferred fields, pass &lt;code&gt;None&lt;/code&gt; as a parameter to &lt;code&gt;defer()&lt;/code&gt;:</source>
          <target state="translated">지연된 필드 세트를 지우려면 매개 변수로 &lt;code&gt;None&lt;/code&gt; 을 &lt;code&gt;defer()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6383cfa56650e6cabffa9d626bc1f48a0ac3ae1" translate="yes" xml:space="preserve">
          <source>If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function.</source>
          <target state="translated">파트를 다른 방식으로 결합하거나 다른 처리를 최종 키에 적용하려면 (예 : 키 파트의 해시 다이제스트 수행) 사용자 정의 키 기능을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b365d93078a708fa2af27d965ccfe68bed9e884a" translate="yes" xml:space="preserve">
          <source>If you want to create &lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;permissions for a proxy model&lt;/a&gt;, pass &lt;code&gt;for_concrete_model=False&lt;/code&gt; to &lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt;&lt;/a&gt; to get the appropriate &lt;code&gt;ContentType&lt;/code&gt;:</source>
          <target state="translated">당신이 만들려면 &lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;프록시 모델에 대한 사용 권한을&lt;/a&gt; 통과 &lt;code&gt;for_concrete_model=False&lt;/code&gt; 에 &lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt; &lt;/a&gt; 적절한 얻을 &lt;code&gt;ContentType&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="baafb11630a741f29de95c236634c1933ad61e35" translate="yes" xml:space="preserve">
          <source>If you want to create a formset that allows you to edit books belonging to a particular author, you could do this:</source>
          <target state="translated">특정 저자에 속하는 책을 편집 할 수있는 양식 세트를 작성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d22c7f47483da249cee231a92c3ccfc41e9f41cc" translate="yes" xml:space="preserve">
          <source>If you want to customize the default admin site, you can &lt;a href=&quot;#overriding-default-admin-site&quot;&gt;override it&lt;/a&gt;.</source>
          <target state="translated">기본 관리 사이트를 사용자 정의하려는 경우 &lt;a href=&quot;#overriding-default-admin-site&quot;&gt;이를 무시할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c29543c5a12e486f79959dd0c7c612e7d05d854c" translate="yes" xml:space="preserve">
          <source>If you want to disable sorting for some columns, set &lt;code&gt;sortable_by&lt;/code&gt; to a collection (e.g. &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, or &lt;code&gt;set&lt;/code&gt;) of the subset of &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt; that you want to be sortable. An empty collection disables sorting for all columns.</source>
          <target state="translated">일부 열에 대해 정렬을 사용하지 않으려면 &lt;code&gt;sortable_by&lt;/code&gt; 를 정렬 할 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; &lt;/a&gt; 서브 세트의 콜렉션 (예 : &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;tuple&lt;/code&gt; 또는 &lt;code&gt;set&lt;/code&gt; )으로 설정 하십시오 . 빈 컬렉션은 모든 열에 대한 정렬을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="819a05f247100e1405566f18b1980253c4ad662e" translate="yes" xml:space="preserve">
          <source>If you want to display many-to-many relations using an inline, you can do so by defining an &lt;code&gt;InlineModelAdmin&lt;/code&gt; object for the relationship:</source>
          <target state="translated">인라인을 사용하여 다 대다 관계를 표시 하려면 관계에 대한 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 객체를 정의하면 됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f2c2b260acd4e58d5f685e485d85b0eafeeb6b4" translate="yes" xml:space="preserve">
          <source>If you want to do any special formatting for either the title or description, &lt;a href=&quot;../templates/language&quot;&gt;Django templates&lt;/a&gt; can be used instead. Their paths can be specified with the &lt;code&gt;title_template&lt;/code&gt; and &lt;code&gt;description_template&lt;/code&gt; attributes on the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. The templates are rendered for each item and are passed two template context variables:</source>
          <target state="translated">제목이나 설명에 특별한 형식을 지정하려면 대신 &lt;a href=&quot;../templates/language&quot;&gt;Django 템플릿을&lt;/a&gt; 사용할 수 있습니다. 경로는 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 의 &lt;code&gt;title_template&lt;/code&gt; 및 &lt;code&gt;description_template&lt;/code&gt; 속성 으로 지정할 수 있습니다 . 템플릿은 각 항목에 대해 렌더링되며 두 가지 템플릿 컨텍스트 변수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="9a2a9d97c3bcdcc33735186ed18274e012b287d6" translate="yes" xml:space="preserve">
          <source>If you want to exclude multiple applications, pass &lt;code&gt;--exclude&lt;/code&gt; more than once:</source>
          <target state="translated">여러 응용 프로그램을 제외하려면 &lt;code&gt;--exclude&lt;/code&gt; 를 두 번 이상 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="47dc3f16d887ad06159fa3d81469f66328dc09f5" translate="yes" xml:space="preserve">
          <source>If you want to find a URL in a specific admin instance, provide the name of that instance as a &lt;code&gt;current_app&lt;/code&gt; hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named &lt;code&gt;custom&lt;/code&gt;, you would need to call:</source>
          <target state="translated">특정 관리 인스턴스에서 URL을 찾으려면 해당 인스턴스의 이름을 리버스 호출에 대한 &lt;code&gt;current_app&lt;/code&gt; 힌트로 제공하십시오. 예를 들어, &lt;code&gt;custom&lt;/code&gt; 이라는 관리 인스턴스에서 관리 뷰를 구체적으로 원하면 다음 을 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bdd8542fd2cea7b2e24bbfa472ae38020dc7bf81" translate="yes" xml:space="preserve">
          <source>If you want to generate more than one aggregate, you add another argument to the &lt;code&gt;aggregate()&lt;/code&gt; clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query:</source>
          <target state="translated">둘 이상의 집계를 생성하려는 경우 다른 인수를 &lt;code&gt;aggregate()&lt;/code&gt; 절에 추가합니다. 따라서 모든 책의 최대 및 최소 가격을 알고 싶다면 다음과 같이 쿼리를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="e5ea26ccc56d69b0c9654b4277fee5e12990d99b" translate="yes" xml:space="preserve">
          <source>If you want to get a key&amp;rsquo;s value or set a value if the key isn&amp;rsquo;t in the cache, there is the &lt;code&gt;get_or_set()&lt;/code&gt; method. It takes the same parameters as &lt;code&gt;get()&lt;/code&gt; but the default is set as the new cache value for that key, rather than returned:</source>
          <target state="translated">키 값을 가져 오거나 키가 캐시에없는 경우 값을 설정하려면 &lt;code&gt;get_or_set()&lt;/code&gt; 메소드가 있습니다. &lt;code&gt;get()&lt;/code&gt; 과 동일한 매개 변수를 사용 하지만 기본값은 반환되지 않고 해당 키의 새 캐시 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="e511661d588f548844ad43177d187a8b8e72782e" translate="yes" xml:space="preserve">
          <source>If you want to give the migration(s) a meaningful name instead of a generated one, you can use the &lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt;&lt;code&gt;makemigrations --name&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">마이그레이션에 생성 된 이름 대신 의미있는 이름을 지정하려면 &lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt; &lt;code&gt;makemigrations --name&lt;/code&gt; &lt;/a&gt; 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bb3d67e91b95e1098c276074de20f2c056d12673" translate="yes" xml:space="preserve">
          <source>If you want to include literal percent signs in the query, you have to double them if you are passing parameters.</source>
          <target state="translated">쿼리에 리터럴 백분율 기호를 포함 시키려면 매개 변수를 전달할 때 기호를 두 배로 늘려야합니다.</target>
        </trans-unit>
        <trans-unit id="9211860caf6395f0b137a8be9dc6cdd28adf359b" translate="yes" xml:space="preserve">
          <source>If you want to inherit from &lt;code&gt;AbstractBase&lt;/code&gt;, but provide a different default manager, you can provide the default manager on the child class:</source>
          <target state="translated">&lt;code&gt;AbstractBase&lt;/code&gt; 에서 상속 받지만 다른 기본 관리자를 제공하려는 경우 하위 클래스에서 기본 관리자를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a2a9c4986e8f5e6654175d1d77008d474dcec7c" translate="yes" xml:space="preserve">
          <source>If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the &lt;code&gt;validate_key&lt;/code&gt; method, and follow the instructions for &lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;using a custom cache backend&lt;/a&gt;. For instance, to do this for the &lt;code&gt;locmem&lt;/code&gt; backend, put this code in a module:</source>
          <target state="translated">기본 제공 백엔드 중 하나에 사용자 정의 키 유효성 검증 로직을 제공하려는 경우이를 서브 클래스 화하고 &lt;code&gt;validate_key&lt;/code&gt; 메소드 만 대체 &lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;하고 사용자 정의 캐시 백엔드 사용&lt;/a&gt; 지시 사항을 따르십시오 . 예를 들어 &lt;code&gt;locmem&lt;/code&gt; 백엔드 에서이를 수행하려면 이 코드를 모듈에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="6c92f47c8dd63980980d8036fb8b746fc5307c13" translate="yes" xml:space="preserve">
          <source>If you want to let each individual user specify which language they prefer, then you also need to use the &lt;code&gt;LocaleMiddleware&lt;/code&gt;. &lt;code&gt;LocaleMiddleware&lt;/code&gt; enables language selection based on data from the request. It customizes content for each user.</source>
          <target state="translated">각 개별 사용자가 선호하는 언어를 지정하게하려면 &lt;code&gt;LocaleMiddleware&lt;/code&gt; 도 사용해야합니다 . &lt;code&gt;LocaleMiddleware&lt;/code&gt; 를 사용하면 요청의 데이터를 기반으로 언어를 선택할 수 있습니다. 각 사용자의 컨텐츠를 사용자 정의합니다.</target>
        </trans-unit>
        <trans-unit id="187ea719ed80062b93104d8f62e4ca6ba48d9ded" translate="yes" xml:space="preserve">
          <source>If you want to lock parents models when using &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you must specify parent link fields (by default &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt;) in the &lt;code&gt;of&lt;/code&gt; argument. For example:</source>
          <target state="translated">&lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;다중 테이블 상속을&lt;/a&gt; 사용할 때 상위 모델을 잠 그려면 &lt;code&gt;of&lt;/code&gt; 인수에 상위 링크 필드 (기본적으로 &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt; )를 지정해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1bc0322e1dee230846f920ac1858bed59fef0294" translate="yes" xml:space="preserve">
          <source>If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files).</source>
          <target state="translated">하나의 위젯 인스턴스를 다른 위젯 인스턴스와 다르게 보이게하려면 위젯 오브젝트가 인스턴스화되어 양식 필드에 지정 될 때 (및 CSS 파일에 규칙을 추가 할 때) 추가 속성을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="358714f5af82b779858f9cc401582af9b516624f" translate="yes" xml:space="preserve">
          <source>If you want to obtain the cache key used for a cached fragment, you can use &lt;code&gt;make_template_fragment_key&lt;/code&gt;. &lt;code&gt;fragment_name&lt;/code&gt; is the same as second argument to the &lt;code&gt;cache&lt;/code&gt; template tag; &lt;code&gt;vary_on&lt;/code&gt; is a list of all additional arguments passed to the tag. This function can be useful for invalidating or overwriting a cached item, for example:</source>
          <target state="translated">캐시 된 조각에 사용 된 캐시 키를 얻으려면 &lt;code&gt;make_template_fragment_key&lt;/code&gt; 를 사용할 수 있습니다 . &lt;code&gt;fragment_name&lt;/code&gt; 은 &lt;code&gt;cache&lt;/code&gt; 템플릿 태그 의 두 번째 인수와 동일합니다 . &lt;code&gt;vary_on&lt;/code&gt; 은 태그에 전달 된 모든 추가 인수의 목록입니다. 이 함수는 다음과 같이 캐시 된 항목을 무효화하거나 덮어 쓰는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba4ffba3fdbb584b8cac1266ddb0e4fc416423c1" translate="yes" xml:space="preserve">
          <source>If you want to override certain options of the cache backend the storage uses, specify a custom entry in the &lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting named &lt;code&gt;'staticfiles'&lt;/code&gt;. It falls back to using the &lt;code&gt;'default'&lt;/code&gt; cache backend.</source>
          <target state="translated">스토리지가 사용하는 캐시 백엔드의 특정 옵션을 대체하려면 &lt;code&gt;'staticfiles'&lt;/code&gt; 라는 &lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt; 설정 에서 사용자 정의 항목을 지정하십시오 . &lt;code&gt;'default'&lt;/code&gt; 캐시 백엔드 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="08bf32a6e2fd3850e1313d6ddcddcbe5d0693024" translate="yes" xml:space="preserve">
          <source>If you want to pass additional parameters to &lt;code&gt;xgettext&lt;/code&gt;, you need to create a custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command and override its &lt;code&gt;xgettext_options&lt;/code&gt; attribute:</source>
          <target state="translated">추가 매개 변수를 &lt;code&gt;xgettext&lt;/code&gt; 에 전달 하려면 사용자 정의 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 명령 을 작성하고 해당 &lt;code&gt;xgettext_options&lt;/code&gt; 속성을 대체해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0fcbbd1a64b93e2ce60b3ae36a4546b17d7404e5" translate="yes" xml:space="preserve">
          <source>If you want to preprocess the value just before saving, you can use &lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt;&lt;code&gt;pre_save()&lt;/code&gt;&lt;/a&gt;. For example, Django&amp;rsquo;s &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; uses this method to set the attribute correctly in the case of &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt;&lt;code&gt;auto_now_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">저장하기 직전에 값을 사전 처리하려면 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt; &lt;code&gt;pre_save()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 . 예를 들어 Django의 &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 는이 메소드를 사용하여 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt; &lt;code&gt;auto_now_add&lt;/code&gt; &lt;/a&gt; 의 경우 속성을 올바르게 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="82aeed39d2f4a0fb067ad666d1bfbc02c9469e46" translate="yes" xml:space="preserve">
          <source>If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument:</source>
          <target state="translated">오류와 필요한 클래스 외에 추가 클래스를 제공하려는 경우 해당 클래스를 인수로 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d347d884e0e4a232836473d57e45545a254b5f95" translate="yes" xml:space="preserve">
          <source>If you want to put the template overrides in an app called &lt;code&gt;myapp&lt;/code&gt; and the templates to override are named &lt;code&gt;blog/list.html&lt;/code&gt; and &lt;code&gt;blog/post.html&lt;/code&gt;, then your directory structure will look like:</source>
          <target state="translated">&lt;code&gt;myapp&lt;/code&gt; 라는 앱에 템플릿 재정의 를 적용하고 재정의 할 템플릿 이름이 &lt;code&gt;blog/list.html&lt;/code&gt; 및 &lt;code&gt;blog/post.html&lt;/code&gt; 인 경우 디렉토리 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8675cd01d369192cb8585e183346b84ac04d8fa3" translate="yes" xml:space="preserve">
          <source>If you want to render templates with customizations from your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, such as context processors for example, use the &lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt;&lt;code&gt;TemplatesSetting&lt;/code&gt;&lt;/a&gt; renderer.</source>
          <target state="translated">예를 들어 컨텍스트 프로세서와 같은 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 사용자 정의한 템플릿을 렌더링 하려면 &lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt; &lt;code&gt;TemplatesSetting&lt;/code&gt; &lt;/a&gt; 렌더러를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a54cf1350fd260fcc8471b214783924c0962b9d7" translate="yes" xml:space="preserve">
          <source>If you want to render the context only with the variables provided (or even no variables at all), use the &lt;code&gt;only&lt;/code&gt; option. No other variables are available to the included template:</source>
          <target state="translated">제공된 변수를 사용하거나 컨텍스트를 전혀 사용하지 않고 컨텍스트를 렌더링하려면 &lt;code&gt;only&lt;/code&gt; 옵션을 사용하십시오 . 포함 된 템플릿에 사용할 수있는 다른 변수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="1299f323e280c4314aecc4bf363b73686a188120" translate="yes" xml:space="preserve">
          <source>If you want to replace the upload handlers completely, you can assign a new list:</source>
          <target state="translated">업로드 핸들러를 완전히 바꾸려면 새 목록을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b1eb52947855dd8e6837d854ad3dbc97c8dfac6" translate="yes" xml:space="preserve">
          <source>If you want to represent a model with the format &lt;code&gt;app_label.object_name&lt;/code&gt; or &lt;code&gt;app_label.model_name&lt;/code&gt; you can use &lt;code&gt;model._meta.label&lt;/code&gt; or &lt;code&gt;model._meta.label_lower&lt;/code&gt; respectively.</source>
          <target state="translated">&lt;code&gt;app_label.object_name&lt;/code&gt; 또는 &lt;code&gt;app_label.model_name&lt;/code&gt; 형식으로 모델을 나타내려면 각각 &lt;code&gt;model._meta.label&lt;/code&gt; 또는 &lt;code&gt;model._meta.label_lower&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
