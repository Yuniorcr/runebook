<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="a399c55a0729e88865a33bb045bf002d26006429" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;panic!&lt;/code&gt; causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: &lt;em&gt;src/main.rs:2:5&lt;/em&gt; indicates that it&amp;rsquo;s the second line, fifth character of our &lt;em&gt;src/main.rs&lt;/em&gt; file.</source>
          <target state="translated">&lt;code&gt;panic!&lt;/code&gt; 전화 ! 마지막 두 줄에 포함 된 오류 메시지가 발생합니다. 첫 번째 줄은 패닉 메시지와 패닉이 발생한 소스 코드의 위치를 ​​보여줍니다. &lt;em&gt;src / main.rs : 2 : 5&lt;/em&gt; 는 이것이 &lt;em&gt;src / main.rs&lt;/em&gt; 파일 의 다섯 번째 문자 인 두 번째 &lt;em&gt;줄임을&lt;/em&gt; 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="76991560cfa9d5bcd0a2eea05c7ac9259a741680" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;parse&lt;/code&gt; could easily cause an error. If, for example, the string contained &lt;code&gt;A👍%&lt;/code&gt;, there would be no way to convert that to a number. Because it might fail, the &lt;code&gt;parse&lt;/code&gt; method returns a &lt;code&gt;Result&lt;/code&gt; type, much as the &lt;code&gt;read_line&lt;/code&gt; method does (discussed earlier in &lt;a href=&quot;#handling-potential-failure-with-the-result-type&quot;&gt;&amp;ldquo;Handling Potential Failure with the &lt;code&gt;Result&lt;/code&gt; Type&amp;rdquo;&lt;/a&gt;). We&amp;rsquo;ll treat this &lt;code&gt;Result&lt;/code&gt; the same way by using the &lt;code&gt;expect&lt;/code&gt; method again. If &lt;code&gt;parse&lt;/code&gt; returns an &lt;code&gt;Err&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; variant because it couldn&amp;rsquo;t create a number from the string, the &lt;code&gt;expect&lt;/code&gt; call will crash the game and print the message we give it. If &lt;code&gt;parse&lt;/code&gt; can successfully convert the string to a number, it will return the &lt;code&gt;Ok&lt;/code&gt; variant of &lt;code&gt;Result&lt;/code&gt;, and &lt;code&gt;expect&lt;/code&gt; will return the number that we want from the &lt;code&gt;Ok&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;parse&lt;/code&gt; 호출로 인해 쉽게 오류가 발생할 수 있습니다. 예를 들어 문자열에 &lt;code&gt;A👍%&lt;/code&gt; 포함되어 있으면 문자열 을 숫자로 변환 할 방법이 없습니다. 실패 할 수 있기 때문에 &lt;code&gt;parse&lt;/code&gt; 메소드는 &lt;code&gt;read_line&lt;/code&gt; 메소드 와 마찬가지로 &lt;code&gt;Result&lt;/code&gt; 유형을 리턴합니다 (이전의 &lt;a href=&quot;#handling-potential-failure-with-the-result-type&quot;&gt;&quot; &lt;/a&gt; &lt;code&gt;Result&lt;/code&gt; 유형으로 잠재적 실패 처리&quot; 에서 논의 됨 ). &lt;code&gt;expect&lt;/code&gt; 메소드를 다시 사용 하여이 &lt;code&gt;Result&lt;/code&gt; 를 같은 방식으로 처리합니다. 경우 &lt;code&gt;parse&lt;/code&gt; 반환 &lt;code&gt;Err&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 변종이 (가) 문자열의 숫자를 생성 할 수 있기 때문에 &lt;code&gt;expect&lt;/code&gt; 호출은 게임을 중단시키고 우리가 제공 한 메시지를 인쇄합니다. 경우 &lt;code&gt;parse&lt;/code&gt; 성공적으로 문자열을 숫자로 변환 할 수 있습니다, 그것은 반환 &lt;code&gt;Ok&lt;/code&gt; 의 변형 &lt;code&gt;Result&lt;/code&gt; 및 &lt;code&gt;expect&lt;/code&gt; 으로부터 우리가 원하는 숫자를 반환 &lt;code&gt;Ok&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="7b69e26d39a3f8839842ab3c559f82019ca9b310" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;recv&lt;/code&gt; blocks, so if there is no job yet, the current thread will wait until a job becomes available. The &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; ensures that only one &lt;code&gt;Worker&lt;/code&gt; thread at a time is trying to request a job.</source>
          <target state="translated">&lt;code&gt;recv&lt;/code&gt; 에 대한 호출이 차단되므로 아직 작업이 없으면 현재 스레드는 작업을 사용할 수있을 때까지 기다립니다. &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 보장하지만 단 하나의 그 &lt;code&gt;Worker&lt;/code&gt; 한 번에 스레드가 작업을 요청하기 위해 노력하고있다.</target>
        </trans-unit>
        <trans-unit id="8993444f4968db6cec0c3f76e82220cf7def7574" translate="yes" xml:space="preserve">
          <source>The caller has to ensure that no references in the supplied thread closure or its return type can outlive the spawned thread's lifetime. This can be guaranteed in two ways:</source>
          <target state="translated">호출자는 제공된 스레드 클로저 또는 해당 반환 유형의 참조가 생성 된 스레드 수명보다 오래 걸리지 않도록해야합니다. 이것은 두 가지 방법으로 보장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="093036972d7bffcd0b16a57c6e2ba75deeb1dca1" translate="yes" xml:space="preserve">
          <source>The caller must also ensure that the memory the pointer (non-transitively) points to is never written to (except inside an &lt;code&gt;UnsafeCell&lt;/code&gt;) using this pointer or any pointer derived from it. If you need to mutate the contents of the slice, use &lt;a href=&quot;#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 또한 이 포인터 또는 그 포인터에서 파생 된 포인터를 사용하여 (비전 이적으로) 포인터가 가리키는 메모리가 ( &lt;code&gt;UnsafeCell&lt;/code&gt; 내부 제외 ) 쓰지 않도록해야합니다. 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac3ada34e0728cb1a740ac35a9a92bd4109e42c8" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the returned pointer is never written to. If you need to mutate the contents of the string slice, use &lt;a href=&quot;#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 반환 된 포인터가 쓰여지지 않도록해야합니다. 문자열 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0392a3d2bc79f7cc36923d474ab5bb48f657c119" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the slice outlives the pointer this function returns, or else it will end up pointing to garbage.</source>
          <target state="translated">호출자는 슬라이스가이 함수가 반환하는 포인터보다 오래 지속되도록해야합니다. 그렇지 않으면 가비지를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="bf480a8080607d02f4b53d9ea9e935964787c02b" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the vector outlives the pointer this function returns, or else it will end up pointing to garbage. Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid.</source>
          <target state="translated">호출자는 벡터가이 함수가 반환하는 포인터보다 오래 지속되도록해야합니다. 그렇지 않으면 가비지를 가리 킵니다. 벡터를 수정하면 버퍼가 재 할당 될 수 있으며 이에 대한 포인터도 유효하지 않게됩니다.</target>
        </trans-unit>
        <trans-unit id="09005f0066a1b73d30e33e09129bf20aee61c736" translate="yes" xml:space="preserve">
          <source>The calling thread will be blocked until there are no more writers which hold the lock. There may be other readers currently inside the lock when this method returns. This method does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.</source>
          <target state="translated">잠금을 보유한 더 이상 기록기가 없을 때까지 호출 스레드가 차단됩니다. 이 메소드가 리턴 될 때 현재 잠금 내부에 다른 리더가있을 수 있습니다. 이 방법은 논쟁적인 독자 또는 작가가 우선 잠금을 획득 할 것인지의 순서와 관련하여 어떠한 보장도 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c684d1da6df1a86528a2f3d33b0bb20fea3d352" translate="yes" xml:space="preserve">
          <source>The calls to &lt;code&gt;thread::sleep&lt;/code&gt; force a thread to stop its execution for a short duration, allowing a different thread to run. The threads will probably take turns, but that isn&amp;rsquo;t guaranteed: it depends on how your operating system schedules the threads. In this run, the main thread printed first, even though the print statement from the spawned thread appears first in the code. And even though we told the spawned thread to print until &lt;code&gt;i&lt;/code&gt; is 9, it only got to 5 before the main thread shut down.</source>
          <target state="translated">&lt;code&gt;thread::sleep&lt;/code&gt; 대한 호출은 스레드 가 짧은 시간 동안 실행을 중지하도록하여 다른 스레드가 실행될 수 있도록합니다. 스레드는 교대로 진행될 수 있지만 보장되지는 않습니다. 운영 체제가 스레드를 예약하는 방법에 따라 다릅니다. 이 실행에서는 생성 된 스레드의 인쇄 명령문이 코드에서 첫 번째로 표시 되더라도 기본 스레드가 먼저 인쇄됩니다. 그리고 우리가 &lt;code&gt;i&lt;/code&gt; 가 9가 될 때까지 스폰 된 스레드에 인쇄하도록 지시했지만 주 스레드가 종료되기 전에 5에 도달했습니다.</target>
        </trans-unit>
        <trans-unit id="c7560eebffb8ae3cdb259698d7be211bc4620b7e" translate="yes" xml:space="preserve">
          <source>The canonical ExitCode for successful termination on this platform.</source>
          <target state="translated">이 플랫폼에서 성공적인 종료를위한 표준 종료 코드입니다.</target>
        </trans-unit>
        <trans-unit id="8f6ef1b9ea50b970966541a96ea6f822d628893b" translate="yes" xml:space="preserve">
          <source>The canonical ExitCode for unsuccessful termination on this platform.</source>
          <target state="translated">이 플랫폼에서 종료에 실패한 표준 종료 코드입니다.</target>
        </trans-unit>
        <trans-unit id="edfe5292e463236ad7502b40af63d1dc3846bebd" translate="yes" xml:space="preserve">
          <source>The canonical path is only meaningful within a given crate. There is no global namespace across crates; an item's canonical path merely identifies it within the crate.</source>
          <target state="translated">정식 경로는 주어진 상자 내에서만 의미가 있습니다. 상자에 전역 네임 스페이스가 없습니다. 품목의 정식 경로는 상자 내에서 단순히 항목을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="1aa3ddcbed06fec001e59bb6f3f1f1da2ef18ef6" translate="yes" xml:space="preserve">
          <source>The capacity may be increased by more than &lt;code&gt;additional&lt;/code&gt; bytes if it chooses, to prevent frequent reallocations.</source>
          <target state="translated">빈번한 재 할당을 방지하기 위해 원하는 경우 용량을 &lt;code&gt;additional&lt;/code&gt; 바이트 이상 늘릴 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e527152d8f3ca4ddc869842d5ee9ae2a46a82fb" translate="yes" xml:space="preserve">
          <source>The capacity of a vector is the amount of space allocated for any future elements that will be added onto the vector. This is not to be confused with the &lt;em&gt;length&lt;/em&gt; of a vector, which specifies the number of actual elements within the vector. If a vector's length exceeds its capacity, its capacity will automatically be increased, but its elements will have to be reallocated.</source>
          <target state="translated">벡터의 용량은 벡터에 추가 될 향후 요소에 할당 된 공간의 양입니다. 이것은 벡터 내의 실제 요소의 수를 지정하는 벡터 의 &lt;em&gt;길이&lt;/em&gt; 와 혼동되어서는 안됩니다 . 벡터의 길이가 용량을 초과하면 용량이 자동으로 증가하지만 요소를 재 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="a70fb21498dabd7b592b7614b4af0ad2efc52b05" translate="yes" xml:space="preserve">
          <source>The capacity will remain at least as large as both the length and the supplied value.</source>
          <target state="translated">용량은 최소한 길이와 제공된 값보다 크게 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="f2f4d42ff0e5eed287aac391d229f38ad7615e31" translate="yes" xml:space="preserve">
          <source>The captured values of a &lt;a href=&quot;types/closure&quot;&gt;closure&lt;/a&gt; are dropped in an unspecified order.</source>
          <target state="translated">&lt;a href=&quot;types/closure&quot;&gt;클로저&lt;/a&gt; 의 캡처 된 값은 지정되지 않은 순서로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="138edd42fa740c68b92f8f2886d9a7cfd608a2f8" translate="yes" xml:space="preserve">
          <source>The changes we needed to make to &lt;code&gt;main&lt;/code&gt; to reassign &lt;code&gt;post&lt;/code&gt; mean that this implementation doesn&amp;rsquo;t quite follow the object-oriented state pattern anymore: the transformations between the states are no longer encapsulated entirely within the &lt;code&gt;Post&lt;/code&gt; implementation. However, our gain is that invalid states are now impossible because of the type system and the type checking that happens at compile time! This ensures that certain bugs, such as display of the content of an unpublished post, will be discovered before they make it to production.</source>
          <target state="translated">우리가 만드는 데 필요한 변경 &lt;code&gt;main&lt;/code&gt; 재 할당 &lt;code&gt;post&lt;/code&gt; 상태 사이의 변환이 더 이상 전적으로 내에서 캡슐화 :이 구현은 상당히 더 이상 객체 지향 상태의 패턴을 따라하지 않는 것을 의미 &lt;code&gt;Post&lt;/code&gt; 구현을. 그러나 우리의 이득은 타입 시스템과 컴파일 타임에 발생하는 타입 검사로 인해 무효 상태가 불가능하다는 것입니다! 이렇게하면 게시되지 않은 게시물의 내용 표시와 같은 특정 버그가 프로덕션에 적용되기 전에 발견 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c6978553f5d9c2a253b6007e164ab1e1253e787" translate="yes" xml:space="preserve">
          <source>The character represented by this escape</source>
          <target state="translated">이 탈출로 대표되는 캐릭터</target>
        </trans-unit>
        <trans-unit id="444f11cad1e3ea489affb1093e4cfe00aec033b8" translate="yes" xml:space="preserve">
          <source>The character type, &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">문자 유형, &lt;code&gt;char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2ab8aadbe1c6203ddb8254dc62679ad2d0d6a50" translate="yes" xml:space="preserve">
          <source>The child inherits from the corresponding parent descriptor.</source>
          <target state="translated">자식은 해당 부모 설명자에서 상속합니다.</target>
        </trans-unit>
        <trans-unit id="22f36eeee32622c7a505cef344bfce71a990d798" translate="yes" xml:space="preserve">
          <source>The chunks are mutable slices, and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last chunk will not have length &lt;code&gt;chunk_size&lt;/code&gt;.</source>
          <target state="translated">청크는 변경 가능한 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 다음 마지막 청크 길이가 없습니다 &lt;code&gt;chunk_size&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a56cc46096f73dcb9c3581ef24840c1b8a52d3e3" translate="yes" xml:space="preserve">
          <source>The chunks are mutable slices, and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last up to &lt;code&gt;chunk_size-1&lt;/code&gt; elements will be omitted and can be retrieved from the &lt;code&gt;into_remainder&lt;/code&gt; function of the iterator.</source>
          <target state="translated">청크는 가변 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 그 최종 업 할 &lt;code&gt;chunk_size-1&lt;/code&gt; 요소는 생략되며로부터 검색 될 수 &lt;code&gt;into_remainder&lt;/code&gt; 의 반복기의 기능.</target>
        </trans-unit>
        <trans-unit id="b9b82e1f955649f5c987c92e4ad59440a3cb7655" translate="yes" xml:space="preserve">
          <source>The chunks are slices and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last chunk will not have length &lt;code&gt;chunk_size&lt;/code&gt;.</source>
          <target state="translated">청크는 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 다음 마지막 청크 길이가 없습니다 &lt;code&gt;chunk_size&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93ee6025794c31565e33ecdc52225cb4e18501bf" translate="yes" xml:space="preserve">
          <source>The chunks are slices and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last up to &lt;code&gt;chunk_size-1&lt;/code&gt; elements will be omitted and can be retrieved from the &lt;code&gt;remainder&lt;/code&gt; function of the iterator.</source>
          <target state="translated">청크는 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 그 최종 업 할 &lt;code&gt;chunk_size-1&lt;/code&gt; 요소는 생략되며로부터 검색 될 수있는 &lt;code&gt;remainder&lt;/code&gt; 반복기의 기능.</target>
        </trans-unit>
        <trans-unit id="8464cb339a91ac7f9edf87e86826287afbdde678" translate="yes" xml:space="preserve">
          <source>The closure &lt;code&gt;f&lt;/code&gt; is yielded a &lt;a href=&quot;struct.oncestate&quot;&gt;&lt;code&gt;OnceState&lt;/code&gt;&lt;/a&gt; structure which can be used to query the poison status of the &lt;code&gt;Once&lt;/code&gt;.</source>
          <target state="translated">클로저 &lt;code&gt;f&lt;/code&gt; 는 &lt;code&gt;Once&lt;/code&gt; 의 포이즌 상태를 쿼리하는 데 사용할 수 있는 &lt;a href=&quot;struct.oncestate&quot;&gt; &lt;code&gt;OnceState&lt;/code&gt; &lt;/a&gt; 구조를 산출합니다 .</target>
        </trans-unit>
        <trans-unit id="1151c6060a40c30d933870c684e8f8c1c9ce7a79" translate="yes" xml:space="preserve">
          <source>The closure &lt;code&gt;f&lt;/code&gt; will only be executed once if this is called concurrently amongst many threads. If that closure panics, however, then it will &lt;em&gt;poison&lt;/em&gt; this &lt;code&gt;Once&lt;/code&gt; instance, causing all future invocations of &lt;code&gt;call_once&lt;/code&gt; to also panic.</source>
          <target state="translated">클로저 &lt;code&gt;f&lt;/code&gt; 는 여러 스레드에서 동시에 호출되는 경우 한 번만 실행됩니다. 그러나 해당 폐쇄 패닉 이 발생 &lt;code&gt;Once&lt;/code&gt; 이 Once 인스턴스 를 &lt;em&gt;중독&lt;/em&gt; 시켜 향후 &lt;code&gt;call_once&lt;/code&gt; 호출이 모두 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="cbba645c0f92459c3e584dd2aad4e56b6422ddeb" translate="yes" xml:space="preserve">
          <source>The closure can use captures and its environment to track state across iterations. Depending on how the iterator is used, this may require specifying the &lt;code&gt;move&lt;/code&gt; keyword on the closure.</source>
          <target state="translated">클로저는 캡처와 해당 환경을 사용하여 반복에서 상태를 추적 할 수 있습니다. 반복자가 사용되는 방식 에 따라 클로저에 &lt;code&gt;move&lt;/code&gt; 키워드를 지정해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e57e2087c6fad9eaa8a18bdb745b2ddd95bd84c" translate="yes" xml:space="preserve">
          <source>The closure captures the &lt;code&gt;shoe_size&lt;/code&gt; parameter from the environment and compares the value with each shoe&amp;rsquo;s size, keeping only shoes of the size specified. Finally, calling &lt;code&gt;collect&lt;/code&gt; gathers the values returned by the adapted iterator into a vector that&amp;rsquo;s returned by the function.</source>
          <target state="translated">클로저는 환경에서 &lt;code&gt;shoe_size&lt;/code&gt; 매개 변수를 캡처하고 지정된 크기의 신발 만 유지하면서 각 신발의 크기와 값을 비교합니다. 마지막으로 &lt;code&gt;collect&lt;/code&gt; 를 호출 하면 수정 된 반복자가 반환 한 값을 함수가 반환 한 벡터로 수집합니다.</target>
        </trans-unit>
        <trans-unit id="0112db2feb7312ad3c6512257c24783293514225" translate="yes" xml:space="preserve">
          <source>The closure definition comes after the &lt;code&gt;=&lt;/code&gt; to assign it to the variable &lt;code&gt;expensive_closure&lt;/code&gt;. To define a closure, we start with a pair of vertical pipes (&lt;code&gt;|&lt;/code&gt;), inside which we specify the parameters to the closure; this syntax was chosen because of its similarity to closure definitions in Smalltalk and Ruby. This closure has one parameter named &lt;code&gt;num&lt;/code&gt;: if we had more than one parameter, we would separate them with commas, like &lt;code&gt;|param1, param2|&lt;/code&gt;.</source>
          <target state="translated">클로저 정의는 &lt;code&gt;=&lt;/code&gt; 다음에 와서 변수 &lt;code&gt;expensive_closure&lt;/code&gt; 에 할당합니다 . 클로저를 정의하기 위해 클로저에 대한 매개 변수를 지정 하는 한 쌍의 수직 파이프 ( &lt;code&gt;|&lt;/code&gt; )로 시작합니다. 이 구문은 Smalltalk 및 Ruby의 클로저 정의와 유사하기 때문에 선택되었습니다. 이 클로저에는 &lt;code&gt;num&lt;/code&gt; 이라는 하나의 매개 변수가 있습니다. 하나 이상의 매개 변수가 있으면 &lt;code&gt;|param1, param2|&lt;/code&gt; 와 같이 쉼표로 구분합니다. .</target>
        </trans-unit>
        <trans-unit id="1b467eb6733245bc29dea650b68390c954774c96" translate="yes" xml:space="preserve">
          <source>The closure is allowed to return an I/O error whose OS error code will be communicated back to the parent and returned as an error from when the spawn was requested.</source>
          <target state="translated">클로저는 OS 에러 코드가 부모에게 다시 전달되고 스폰이 요청되었을 때의 에러로 반환되는 I / O 에러를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d07950c5510607459c97a1e9bf4b42e15a155b7" translate="yes" xml:space="preserve">
          <source>The closure must return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;filter()&lt;/code&gt; creates an iterator which calls this closure on each element. If the closure returns &lt;code&gt;true&lt;/code&gt;, then the element is returned. If the closure returns &lt;code&gt;false&lt;/code&gt;, it will try again, and call the closure on the next element, seeing if it passes the test.</source>
          <target state="translated">클로저는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다 . &lt;code&gt;filter()&lt;/code&gt; 는 각 요소에서이 클로저를 호출하는 반복자를 만듭니다. 클로저가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 요소가 반환됩니다. 클로저가 &lt;code&gt;false&lt;/code&gt; 를 반환하면 다시 시도하고 다음 요소에서 클로저를 호출하여 테스트를 통과했는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0dfbb8ddc807c0ec7e308a6bcf0502df62203387" translate="yes" xml:space="preserve">
          <source>The closure must return an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;filter_map&lt;/code&gt; creates an iterator which calls this closure on each element. If the closure returns &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(element)&lt;/code&gt;&lt;/a&gt;, then that element is returned. If the closure returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, it will try again, and call the closure on the next element, seeing if it will return &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">클로저는 &lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 반환해야합니다 . &lt;code&gt;filter_map&lt;/code&gt; 은 각 요소에서이 클로저를 호출하는 반복자를 만듭니다. 클로저가 &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(element)&lt;/code&gt; &lt;/a&gt; 반환하면 해당 요소가 반환됩니다. 클로저가 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; 을&lt;/a&gt; 반환하면 다시 시도하고 다음 요소에서 클로저를 호출하여 &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 이 반환되는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="7a4c6af8980cc5834794f8ba584bb6cebd16567c" translate="yes" xml:space="preserve">
          <source>The closure provided is required to adhere to the &lt;a href=&quot;trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt; trait to ensure that all captured variables are safe to cross this boundary. The purpose of this bound is to encode the concept of &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;exception safety&lt;/a&gt; in the type system. Most usage of this function should not need to worry about this bound as programs are naturally unwind safe without &lt;code&gt;unsafe&lt;/code&gt; code. If it becomes a problem the &lt;a href=&quot;struct.assertunwindsafe&quot;&gt;&lt;code&gt;AssertUnwindSafe&lt;/code&gt;&lt;/a&gt; wrapper struct can be used to quickly assert that the usage here is indeed unwind safe.</source>
          <target state="translated">제공된 폐쇄는 &lt;a href=&quot;trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; &lt;/a&gt; 특성 을 준수하여 캡처 된 모든 변수가이 경계를 안전하게 통과 할 수 있도록해야합니다. 이 범위의 목적은 형식 시스템에서 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;예외 안전&lt;/a&gt; 개념을 인코딩하는 것입니다 . 프로그램이 안전하지 &lt;code&gt;unsafe&lt;/code&gt; 코드 없이 자연스럽게 안전하기 때문에이 기능의 대부분의 사용은이 한계에 대해 걱정할 필요가 없습니다 . 이것이 문제가 &lt;a href=&quot;struct.assertunwindsafe&quot;&gt; &lt;code&gt;AssertUnwindSafe&lt;/code&gt; &lt;/a&gt; 래퍼 구조체를 사용하여 여기에서 사용법이 실제로 안전하다는 것을 신속하게 주장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1db2515eb35827d3b48808ed11db89506d167098" translate="yes" xml:space="preserve">
          <source>The closure uses &lt;code&gt;v&lt;/code&gt;, so it will capture &lt;code&gt;v&lt;/code&gt; and make it part of the closure&amp;rsquo;s environment. Because &lt;code&gt;thread::spawn&lt;/code&gt; runs this closure in a new thread, we should be able to access &lt;code&gt;v&lt;/code&gt; inside that new thread. But when we compile this example, we get the following error:</source>
          <target state="translated">폐쇄의 용도는 &lt;code&gt;v&lt;/code&gt; 에 이 포착 있도록, &lt;code&gt;v&lt;/code&gt; 과 폐쇄의 환경의 일부합니다. 때문에 &lt;code&gt;thread::spawn&lt;/code&gt; 새 스레드에서이 폐쇄를 실행, 우리는 액세스 할 수 있어야 &lt;code&gt;v&lt;/code&gt; 가 새로운 스레드 내부. 그러나이 예제를 컴파일하면 다음과 같은 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d7aca11a6ac0f9ea5173acf1c9757981e77e687c" translate="yes" xml:space="preserve">
          <source>The code associated with each arm is an expression, and the resulting value of the expression in the matching arm is the value that gets returned for the entire &lt;code&gt;match&lt;/code&gt; expression.</source>
          <target state="translated">각 팔과 관련된 코드는 표현식이며 일치하는 팔의 표현식 결과 값은 전체 &lt;code&gt;match&lt;/code&gt; 표현식에 대해 반환되는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="86ec55efa28e5ccc120a1f5241fba708e750dd58" translate="yes" xml:space="preserve">
          <source>The code in Listing 13-17 doesn&amp;rsquo;t do anything; the closure we&amp;rsquo;ve specified never gets called. The warning reminds us why: iterator adaptors are lazy, and we need to consume the iterator here.</source>
          <target state="translated">Listing 13-17의 코드는 아무것도하지 않는다. 우리가 지정한 클로저는 결코 호출되지 않습니다. 경고는 이유를 알려줍니다. 이터레이터 어댑터가 게으 르며 여기에서 이터레이터를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="27595e3e42c890c6fdee5b82c7f1d2b1399713f0" translate="yes" xml:space="preserve">
          <source>The code in Listing 13-3 has multiple calls to the slow calculation function. The first &lt;code&gt;if&lt;/code&gt; block calls &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; twice, the &lt;code&gt;if&lt;/code&gt; inside the outer &lt;code&gt;else&lt;/code&gt; doesn&amp;rsquo;t call it at all, and the code inside the second &lt;code&gt;else&lt;/code&gt; case calls it once.</source>
          <target state="translated">코드 13-3의 코드에는 느린 계산 함수를 여러 번 호출했습니다. 첫 번째 &lt;code&gt;if&lt;/code&gt; 블록 통화 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 두 배의 &lt;code&gt;if&lt;/code&gt; 외부 내부에 &lt;code&gt;else&lt;/code&gt; 전혀 호출하지 않으며, 제 2 내측 코드 &lt;code&gt;else&lt;/code&gt; 경우가 한 번 호출합니다.</target>
        </trans-unit>
        <trans-unit id="984f7b754ab17440aa0c07b718b002aed1594b7a" translate="yes" xml:space="preserve">
          <source>The code in Listing 16-1 not only stops the spawned thread prematurely most of the time due to the main thread ending, but also can&amp;rsquo;t guarantee that the spawned thread will get to run at all. The reason is that there is no guarantee on the order in which threads run!</source>
          <target state="translated">Listing 16-1의 코드는 메인 스레드 종료로 인해 생성 된 스레드를 대부분 조기에 중지 할뿐만 아니라 생성 된 스레드가 전혀 실행되지 않을 수도 있습니다. 스레드 실행 순서가 보장되지 않기 때문입니다!</target>
        </trans-unit>
        <trans-unit id="4d5adfd375cd377b4763e2eeee96a84687acf4e5" translate="yes" xml:space="preserve">
          <source>The code in Listing 16-8 compiled and ran, but it didn&amp;rsquo;t clearly show us that two separate threads were talking to each other over the channel. In Listing 16-10 we&amp;rsquo;ve made some modifications that will prove the code in Listing 16-8 is running concurrently: the spawned thread will now send multiple messages and pause for a second between each message.</source>
          <target state="translated">Listing 16-8의 코드는 컴파일되어 실행되었지만 두 개의 개별 스레드가 채널을 통해 서로 대화하고 있음을 명확하게 보여주지는 못했다. Listing 16-10에서는 Listing 16-8의 코드가 동시에 실행되고 있음을 나타내는 몇 가지 수정 사항이있다. 스폰 된 스레드는 이제 여러 메시지를 보내고 각 메시지 사이에서 1 초 동안 일시 정지한다.</target>
        </trans-unit>
        <trans-unit id="9e7e0566bf3de2c83a460b61c17bb70770c4b1c5" translate="yes" xml:space="preserve">
          <source>The code in Listing 18-1 shows a series of checks for several conditions that decide what the background color should be. For this example, we&amp;rsquo;ve created variables with hardcoded values that a real program might receive from user input.</source>
          <target state="translated">목록 18-1의 코드는 배경색을 결정하는 몇 가지 조건에 대한 일련의 검사를 보여줍니다. 이 예에서는 실제 프로그램이 사용자 입력으로부터 수신 할 수있는 하드 코드 된 값으로 변수를 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="c12405c78a2c0d83f529e2201871e22f52a8474e" translate="yes" xml:space="preserve">
          <source>The code in Listing 18-3 will print the following:</source>
          <target state="translated">목록 18-3의 코드는 다음을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="efe51698d475c0b9864955b57e12d5b79c9bbf35" translate="yes" xml:space="preserve">
          <source>The code in Listing 20-14 will compile but doesn&amp;rsquo;t create any threads yet. We&amp;rsquo;ve changed the definition of &lt;code&gt;ThreadPool&lt;/code&gt; to hold a vector of &lt;code&gt;thread::JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; instances, initialized the vector with a capacity of &lt;code&gt;size&lt;/code&gt;, set up a &lt;code&gt;for&lt;/code&gt; loop that will run some code to create the threads, and returned a &lt;code&gt;ThreadPool&lt;/code&gt; instance containing them.</source>
          <target state="translated">Listing 20-14의 코드는 컴파일되지만 아직 스레드를 생성하지는 않는다. 우리의 정의 변경했습니다 &lt;code&gt;ThreadPool&lt;/code&gt; 이을 (A)의 벡터 개최 &lt;code&gt;thread::JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; 의 용량 벡터 초기화, 인스턴스 &lt;code&gt;size&lt;/code&gt; 설정하는 &lt;code&gt;for&lt;/code&gt; 스레드를 생성하는 몇 가지 코드를 실행 루프, 및 반환 된 그것들을 포함한 &lt;code&gt;ThreadPool&lt;/code&gt; 인스턴스.</target>
        </trans-unit>
        <trans-unit id="b9b3fdc249a44ebef0cd41734527cea5bbbbc841" translate="yes" xml:space="preserve">
          <source>The code in Listing 20-21 is responding to requests asynchronously through the use of a thread pool, as we intended. We get some warnings about the &lt;code&gt;workers&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;thread&lt;/code&gt; fields that we&amp;rsquo;re not using in a direct way that reminds us we&amp;rsquo;re not cleaning up anything. When we use the less elegant ctrl-c method to halt the main thread, all other threads are stopped immediately as well, even if they&amp;rsquo;re in the middle of serving a request.</source>
          <target state="translated">Listing 20-21의 코드는 의도 한대로 스레드 풀을 사용하여 비동기 적으로 요청에 응답합니다. 우리는 아무것도 청소하지 않는다는 것을 상기시켜주는 직접적인 방식으로 사용하지 않는 &lt;code&gt;workers&lt;/code&gt; , &lt;code&gt;id&lt;/code&gt; 및 &lt;code&gt;thread&lt;/code&gt; 필드 에 대한 경고를받습니다 . 덜 우아한 ctrl-c 메소드를 사용하여 기본 스레드를 중단하면 다른 모든 스레드는 요청을 처리하는 중이라도 즉시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="af00e0657ebb48c72ab0e8023da460e28c0f23c3" translate="yes" xml:space="preserve">
          <source>The code in Listing 5-7 also creates an instance in &lt;code&gt;user2&lt;/code&gt; that has a different value for &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; but has the same values for the &lt;code&gt;active&lt;/code&gt; and &lt;code&gt;sign_in_count&lt;/code&gt; fields from &lt;code&gt;user1&lt;/code&gt;.</source>
          <target state="translated">Listing 5-7의 코드는 또한 &lt;code&gt;user2&lt;/code&gt; 에서 &lt;code&gt;email&lt;/code&gt; 및 &lt;code&gt;username&lt;/code&gt; 값은 &lt;code&gt;sign_in_count&lt;/code&gt; &lt;code&gt;user1&lt;/code&gt; 과 &lt;code&gt;active&lt;/code&gt; 및 sign_in_count 필드 값은 동일한 인스턴스를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="0531b3f098e465468fd76e222f809f69ed8edfae" translate="yes" xml:space="preserve">
          <source>The code in Listing 8-7 might look like it should work: why should a reference to the first element care about what changes at the end of the vector? This error is due to the way vectors work: adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space, if there isn&amp;rsquo;t enough room to put all the elements next to each other where the vector currently is. In that case, the reference to the first element would be pointing to deallocated memory. The borrowing rules prevent programs from ending up in that situation.</source>
          <target state="translated">Listing 8-7의 코드는 작동하는 것처럼 보일 수있다. 왜 첫 번째 요소에 대한 참조가 벡터의 끝에서 어떤 변화를 고려해야 하는가? 이 오류는 벡터가 작동하는 방식 때문입니다. 벡터 끝에 새 요소를 추가하려면 각 요소 옆에 모든 요소를 ​​배치 할 공간이 충분하지 않은 경우 새 메모리를 할당하고 이전 요소를 새 공간에 복사해야합니다. 벡터가 현재있는 다른 곳. 이 경우 첫 번째 요소에 대한 참조는 할당 해제 된 메모리를 가리 킵니다. 차용 규칙은 프로그램이 해당 상황에서 종료되는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="94cc2f51904c3f9ddd0cfd3520b820c4eb301ad4" translate="yes" xml:space="preserve">
          <source>The code in Listing 9-4 will &lt;code&gt;panic!&lt;/code&gt; no matter why &lt;code&gt;File::open&lt;/code&gt; failed. What we want to do instead is take different actions for different failure reasons: if &lt;code&gt;File::open&lt;/code&gt; failed because the file doesn&amp;rsquo;t exist, we want to create the file and return the handle to the new file. If &lt;code&gt;File::open&lt;/code&gt; failed for any other reason&amp;mdash;for example, because we didn&amp;rsquo;t have permission to open the file&amp;mdash;we still want the code to &lt;code&gt;panic!&lt;/code&gt; in the same way as it did in Listing 9-4. Look at Listing 9-5, which adds an inner &lt;code&gt;match&lt;/code&gt; expression.</source>
          <target state="translated">목록 9-4의 코드는 &lt;code&gt;panic!&lt;/code&gt; &lt;code&gt;File::open&lt;/code&gt; 실패한 이유에 관계없이 우리가 대신하고 싶은 것은 다른 실패 이유로 다른 조치를 취하는 것입니다 . 파일이 존재하지 않아 &lt;code&gt;File::open&lt;/code&gt; 실패한 경우 파일 을 작성하고 핸들을 새 파일로 리턴하려고합니다. 경우 &lt;code&gt;File::open&lt;/code&gt; 우리가 열 수있는 권한이 없어서, 다른 이유로 - 예를 들면 실패 파일을-우리는 여전히 코드가 원하는 &lt;code&gt;panic!&lt;/code&gt; Listing 9-4에서와 같은 방식으로. 내부 &lt;code&gt;match&lt;/code&gt; 표현식 을 추가하는 목록 9-5를보십시오 .</target>
        </trans-unit>
        <trans-unit id="e95fa13e369d6a99c35a00c2091e07ffadc180a6" translate="yes" xml:space="preserve">
          <source>The code is trying to pass &lt;code&gt;receiver&lt;/code&gt; to multiple &lt;code&gt;Worker&lt;/code&gt; instances. This won&amp;rsquo;t work, as you&amp;rsquo;ll recall from Chapter 16: the channel implementation that Rust provides is multiple &lt;em&gt;producer&lt;/em&gt;, single &lt;em&gt;consumer&lt;/em&gt;. This means we can&amp;rsquo;t just clone the consuming end of the channel to fix this code. Even if we could, that is not the technique we would want to use; instead, we want to distribute the jobs across threads by sharing the single &lt;code&gt;receiver&lt;/code&gt; among all the workers.</source>
          <target state="translated">코드가 &lt;code&gt;receiver&lt;/code&gt; 를 여러 &lt;code&gt;Worker&lt;/code&gt; 인스턴스 로 전달하려고 합니다. 16 장 : Rust가 제공하는 채널 구현은 여러 &lt;em&gt;생산자&lt;/em&gt; , 단일 &lt;em&gt;소비자&lt;/em&gt; 라는 것을 기억 하겠지만 이것은 작동하지 않습니다 . 즉,이 코드를 수정하기 위해 채널의 소비 측을 복제 할 수는 없습니다. 우리가 할 수 있더라도 그것은 우리가 사용하고 싶은 기술이 아닙니다. 대신, 모든 작업자간에 단일 &lt;code&gt;receiver&lt;/code&gt; 를 공유하여 스레드간에 작업을 분배하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="404cdeaf9f9f5734a0b6eb5da98e14aed6b8934d" translate="yes" xml:space="preserve">
          <source>The code refers to a trait that is not in scope.</source>
          <target state="translated">코드는 범위에없는 특성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f585d5dc0ef34cc30960f293fe10c97e69068fe3" translate="yes" xml:space="preserve">
          <source>The code that calls this code will then handle getting either an &lt;code&gt;Ok&lt;/code&gt; value that contains a username or an &lt;code&gt;Err&lt;/code&gt; value that contains an &lt;code&gt;io::Error&lt;/code&gt;. We don&amp;rsquo;t know what the calling code will do with those values. If the calling code gets an &lt;code&gt;Err&lt;/code&gt; value, it could call &lt;code&gt;panic!&lt;/code&gt; and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don&amp;rsquo;t have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.</source>
          <target state="translated">이 코드를 호출하는 코드는 사용자 이름이 포함 된 &lt;code&gt;Ok&lt;/code&gt; 값 또는 &lt;code&gt;io::Error&lt;/code&gt; 가 포함 된 &lt;code&gt;Err&lt;/code&gt; 값을 가져 옵니다 . 우리는 호출 코드가 그 값으로 무엇을 할 것인지 모른다. 호출 코드가 &lt;code&gt;Err&lt;/code&gt; 값을 얻으면 &lt;code&gt;panic!&lt;/code&gt; 호출 할 수 있습니다 ! 예를 들어 프로그램을 중단 시키거나 기본 사용자 이름을 사용하거나 파일이 아닌 다른 곳에서 사용자 이름을 검색하십시오. 호출 코드가 실제로 수행하려는 작업에 대한 정보가 충분하지 않으므로 모든 성공 또는 오류 정보를 상향 처리하여 적절하게 처리합니다.</target>
        </trans-unit>
        <trans-unit id="cfac4f190729188f4689af6ae5b0042be7b9afad" translate="yes" xml:space="preserve">
          <source>The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="translated">컬렉션은 빈번한 재 할당을 피하기 위해 더 많은 공간을 예약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a921d34f1378e463d6297235d9b237b6a37c1373" translate="yes" xml:space="preserve">
          <source>The comma following &lt;code&gt;$()&lt;/code&gt; indicates that a literal comma separator character could optionally appear after the code that matches the code in &lt;code&gt;$()&lt;/code&gt;. The &lt;code&gt;*&lt;/code&gt; specifies that the pattern matches zero or more of whatever precedes the &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">쉼표 다음 &lt;code&gt;$()&lt;/code&gt; 리터럴 쉼표 구분 문자가 선택적으로의 코드와 일치하는 코드 뒤에 나타날 수 있음을 나타냅니다 &lt;code&gt;$()&lt;/code&gt; . &lt;code&gt;*&lt;/code&gt; 지정 패턴 일치 제로 것을 이상 무엇이든의 앞에 &lt;code&gt;*&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="1bacb24582ff767b21e31f4cc1ad3d6012f25a0b" translate="yes" xml:space="preserve">
          <source>The command downloads a script and starts the installation of the &lt;code&gt;rustup&lt;/code&gt; tool, which installs the latest stable version of Rust. You might be prompted for your password. If the install is successful, the following line will appear:</source>
          <target state="translated">이 명령은 스크립트를 다운로드 하고 최신 안정 버전의 Rust를 설치하는 &lt;code&gt;rustup&lt;/code&gt; 도구 설치를 시작합니다 . 비밀번호를 묻는 메시지가 표시 될 수 있습니다. 성공적으로 설치되면 다음 줄이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="73b43b32097905758197f28a5b18a2fd54ae6279" translate="yes" xml:space="preserve">
          <source>The common part of these two paths is &lt;code&gt;std::io&lt;/code&gt;, and that&amp;rsquo;s the complete first path. To merge these two paths into one &lt;code&gt;use&lt;/code&gt; statement, we can use &lt;code&gt;self&lt;/code&gt; in the nested path, as shown in Listing 7-20.</source>
          <target state="translated">이 두 경로의 공통 부분은 &lt;code&gt;std::io&lt;/code&gt; 이며 이것이 첫 번째 전체 경로입니다. 이 두 경로를 하나의 &lt;code&gt;use&lt;/code&gt; 문 으로 병합하기 위해 Listing 7-20에 표시된 것처럼 중첩 경로에서 &lt;code&gt;self&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3e8778a56f7c16d517be41bfd502f5b861a15290" translate="yes" xml:space="preserve">
          <source>The comparator function must define a total ordering for the elements in the slice. If the ordering is not total, the order of the elements is unspecified. An order is a total order if it is (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">비교기 함수는 슬라이스의 요소에 대한 총 순서를 정의해야합니다. 순서가 총계가 아닌 경우 요소의 순서는 지정되지 않습니다. 주문은 다음과 같은 경우 총 주문입니다 (모든 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="aebc23a2aec802159973c4b13320302322bbb426" translate="yes" xml:space="preserve">
          <source>The comparator function must define a total ordering for the elements in the slice. If the ordering is not total, the order of the elements is unspecified. An order is a total order if it is (for all a, b and c):</source>
          <target state="translated">비교기 함수는 슬라이스의 요소에 대한 총 순서를 정의해야합니다. 순서가 총계가 아닌 경우 요소의 순서는 지정되지 않습니다. 주문은 다음과 같은 경우 총 주문입니다 (모든 a, b 및 c에 해당).</target>
        </trans-unit>
        <trans-unit id="92ccf3fc61c0a63453fa6ca42d0beca2274f875f" translate="yes" xml:space="preserve">
          <source>The comparator function should implement an order consistent with the sort order of the underlying slice, returning an order code that indicates whether its argument is &lt;code&gt;Less&lt;/code&gt;, &lt;code&gt;Equal&lt;/code&gt; or &lt;code&gt;Greater&lt;/code&gt; the desired target.</source>
          <target state="translated">비교기 함수는 기본 슬라이스의 정렬 순서와 일치하는 순서를 구현하여 인수가 &lt;code&gt;Less&lt;/code&gt; , &lt;code&gt;Equal&lt;/code&gt; 또는 &lt;code&gt;Greater&lt;/code&gt; 인지 여부를 나타내는 순서 코드를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="45e688bbffc9733765a7b6aca03992e2d5e377a5" translate="yes" xml:space="preserve">
          <source>The comparison must satisfy, for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;:</source>
          <target state="translated">비교는 모든 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; 를 충족시켜야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c2765074489dd525efeb165a25dbc97454a652e" translate="yes" xml:space="preserve">
          <source>The compilation didn&amp;rsquo;t produce any errors, but the program resulted in a &lt;em&gt;runtime&lt;/em&gt; error and didn&amp;rsquo;t exit successfully. When you attempt to access an element using indexing, Rust will check that the index you&amp;rsquo;ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic.</source>
          <target state="translated">컴파일 &lt;em&gt;시&lt;/em&gt; 오류가 발생하지 않았지만 프로그램에서 &lt;em&gt;런타임&lt;/em&gt; 오류가 발생하여 종료되지 않았습니다. 색인 생성을 사용하여 요소에 액세스하려고하면 Rust는 지정한 색인이 배열 길이보다 작은 지 확인합니다. 인덱스가 배열 길이보다 크거나 같으면 Rust가 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="25f0592827e30de97cacdd81a110584696dcea70" translate="yes" xml:space="preserve">
          <source>The compilation model centers on artifacts called &lt;em&gt;crates&lt;/em&gt;. Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or some sort of library.&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#cratesourcefile&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">컴파일 모델은 &lt;em&gt;크레이트&lt;/em&gt; 라는 아티팩트를 중심으로합니다 . 각 컴파일은 소스 형태로 단일 상자를 처리하고 성공하면 실행 파일 또는 일종의 라이브러리와 같은 이진 형태로 단일 상자를 생성합니다. &lt;sup&gt;&lt;a href=&quot;crates-and-source-files#cratesourcefile&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="90596055b20c856dc417525ea133e8b1049b15fa" translate="yes" xml:space="preserve">
          <source>The compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, &lt;code&gt;Vec&lt;/code&gt; and &lt;code&gt;Box&lt;/code&gt; ensure they never allocate more than &lt;code&gt;isize::MAX&lt;/code&gt; bytes, so &lt;code&gt;vec.as_ptr().add(vec.len()).sub(vec.len())&lt;/code&gt; is always safe.</source>
          <target state="translated">컴파일러와 표준 라이브러리는 일반적으로 오프셋이 문제가되는 크기에 도달하지 않도록 할당하려고합니다. 예를 들어, &lt;code&gt;Vec&lt;/code&gt; 및 &lt;code&gt;Box&lt;/code&gt; 는 &lt;code&gt;isize::MAX&lt;/code&gt; 바이트 이상을 할당하지 않으므로 &lt;code&gt;vec.as_ptr().add(vec.len()).sub(vec.len())&lt;/code&gt; 은 항상 안전합니다.</target>
        </trans-unit>
        <trans-unit id="59cbb1cc8a088f98671593c9041c2587a34ab70d" translate="yes" xml:space="preserve">
          <source>The compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, &lt;code&gt;Vec&lt;/code&gt; and &lt;code&gt;Box&lt;/code&gt; ensure they never allocate more than &lt;code&gt;isize::MAX&lt;/code&gt; bytes, so &lt;code&gt;vec.as_ptr().add(vec.len())&lt;/code&gt; is always safe.</source>
          <target state="translated">컴파일러와 표준 라이브러리는 일반적으로 오프셋이 문제가되는 크기에 도달하지 않도록 할당하려고합니다. 예를 들어 &lt;code&gt;Vec&lt;/code&gt; 및 &lt;code&gt;Box&lt;/code&gt; 는 &lt;code&gt;isize::MAX&lt;/code&gt; 바이트 이상을 할당하지 않으므로 &lt;code&gt;vec.as_ptr().add(vec.len())&lt;/code&gt; 은 항상 안전합니다.</target>
        </trans-unit>
        <trans-unit id="5647f6303a746120d1bc013678162600f20688f8" translate="yes" xml:space="preserve">
          <source>The compiler and standard library generally try to ensure allocations never reach a size where an offset is a concern. For instance, &lt;code&gt;Vec&lt;/code&gt; and &lt;code&gt;Box&lt;/code&gt; ensure they never allocate more than &lt;code&gt;isize::MAX&lt;/code&gt; bytes, so &lt;code&gt;ptr_into_vec.offset_from(vec.as_ptr())&lt;/code&gt; is always safe.</source>
          <target state="translated">컴파일러와 표준 라이브러리는 일반적으로 오프셋이 문제가되는 크기에 도달하지 않도록 할당하려고합니다. 예를 들어 &lt;code&gt;Vec&lt;/code&gt; 및 &lt;code&gt;Box&lt;/code&gt; 는 &lt;code&gt;isize::MAX&lt;/code&gt; 바이트 이상을 할당하지 않으므로 &lt;code&gt;ptr_into_vec.offset_from(vec.as_ptr())&lt;/code&gt; 은 항상 안전합니다.</target>
        </trans-unit>
        <trans-unit id="030993899960155dfaeaf56819f76523f90d8c36" translate="yes" xml:space="preserve">
          <source>The compiler currently implements no method of hinting what format a library should be linked with. When dynamically linking, the compiler will attempt to maximize dynamic dependencies while still allowing some dependencies to be linked in via an rlib.</source>
          <target state="translated">컴파일러는 현재 라이브러리를 연결해야하는 형식을 암시하는 방법을 구현하지 않습니다. 동적으로 링크 할 때 컴파일러는 일부 종속성을 rlib를 통해 계속 링크하면서 동적 종속성을 최대화하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="1821ca1d85d61b39565f6e9976cc18b3afce261c" translate="yes" xml:space="preserve">
          <source>The compiler doesn't know what method to call because more than one method has the same prototype. Erroneous code example:</source>
          <target state="translated">둘 이상의 메소드에 동일한 프로토 타입이 있으므로 컴파일러가 호출 할 메소드를 모릅니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="1be1361775707ec1fbdcf50e883b1d7b1bdb5f0d" translate="yes" xml:space="preserve">
          <source>The compiler error is as follows:</source>
          <target state="translated">컴파일러 오류는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b5655bf28c5aee029b50ebff36ecbfc08852001c" translate="yes" xml:space="preserve">
          <source>The compiler even reminds us that this only works with closures!</source>
          <target state="translated">컴파일러는 이것이 클로저에서만 작동한다는 것을 상기시켜줍니다!</target>
        </trans-unit>
        <trans-unit id="b08f603159dc0eecd0f21f28c07166cefeb69847" translate="yes" xml:space="preserve">
          <source>The compiler found a function whose body contains a &lt;code&gt;return;&lt;/code&gt; statement but whose return type is not &lt;code&gt;()&lt;/code&gt;. An example of this is:</source>
          <target state="translated">컴파일러는 본문에 &lt;code&gt;return;&lt;/code&gt; 포함 된 함수를 찾았습니다 . statement이지만 반환 유형이 &lt;code&gt;()&lt;/code&gt; 이 아닙니다 . 이에 대한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3e4713e81e1fe06044671ee83362a3b9a0f5ad86" translate="yes" xml:space="preserve">
          <source>The compiler gives us this error:</source>
          <target state="translated">컴파일러는이 오류를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="b01feef52238a9b5f1daf51373c75b238f421fe8" translate="yes" xml:space="preserve">
          <source>The compiler is allowed to perform any combination of these optimizations, as long as the final optimized code, when executed, produces the same results as the one without optimizations.</source>
          <target state="translated">컴파일러는 최종 최적화 코드가 실행될 때 최적화가없는 코드와 동일한 결과를 생성하는 한 이러한 최적화의 조합을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec5c1119f8e1ac4ec1c89254831939480c03edd7" translate="yes" xml:space="preserve">
          <source>The compiler may allow attributes for external tools where each tool resides in its own namespace. The first segment of the attribute path is the name of the tool, with one or more additional segments whose interpretation is up to the tool.</source>
          <target state="translated">컴파일러는 각 도구가 자체 네임 스페이스에있는 외부 도구의 속성을 허용 할 수 있습니다. 속성 경로의 첫 번째 세그먼트는 도구의 이름이며 해석에 따라 하나 이상의 추가 세그먼트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7720aa4345b4147bab4d25831f37466e57d1fcc" translate="yes" xml:space="preserve">
          <source>The compiler prefers to capture a closed-over variable by immutable borrow, followed by unique immutable borrow (see below), by mutable borrow, and finally by move. It will pick the first choice of these that allows the closure to compile. The choice is made only with regards to the contents of the closure expression; the compiler does not take into account surrounding code, such as the lifetimes of involved variables.</source>
          <target state="translated">컴파일러는 변경 불가능한 차용, 고유 한 변경 불가능한 차용 (아래 참조), 변경 가능한 차용, 마지막으로 이동으로 닫힌 변수를 캡처하는 것을 선호합니다. 클로저를 컴파일 할 수있는 첫 번째 선택을 선택합니다. 클로저 표현의 내용에 대해서만 선택이 이루어집니다. 컴파일러는 관련된 변수의 수명과 같은 주변 코드를 고려하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5212bd9f30887e16d9c074bb9450838a12a0be2d" translate="yes" xml:space="preserve">
          <source>The compiler shouldn't change the relative order or number of volatile memory operations. However, volatile memory operations on zero-sized types (e.g., if a zero-sized type is passed to &lt;code&gt;read_volatile&lt;/code&gt;) are noops and may be ignored.</source>
          <target state="translated">컴파일러는 상대적 순서 나 휘발성 메모리 작업 수를 변경해서는 안됩니다. 그러나 0 크기의 유형에 대한 휘발성 메모리 작업 (예 : 0 크기의 유형이 &lt;code&gt;read_volatile&lt;/code&gt; 에 전달되는 경우 )은 무시할 수 있으며 무시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="955e9c25a8bb7d2a1fb8b16fdbf5d5e19b107461" translate="yes" xml:space="preserve">
          <source>The compiler shouldn't change the relative order or number of volatile memory operations. However, volatile memory operations on zero-sized types (e.g., if a zero-sized type is passed to &lt;code&gt;write_volatile&lt;/code&gt;) are noops and may be ignored.</source>
          <target state="translated">컴파일러는 상대적 순서 나 휘발성 메모리 작업 수를 변경해서는 안됩니다. 그러나 0 크기의 유형에 대한 휘발성 메모리 작업 (예 : 0 크기의 유형이 &lt;code&gt;write_volatile&lt;/code&gt; 에 전달되는 경우 )은 무시할 수 있으며 무시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d348a40c0a7a1bd0e6bae37a48c29f90fc773ea5" translate="yes" xml:space="preserve">
          <source>The compiler supports various methods to link crates together both statically and dynamically. This section will explore the various methods to link crates together, and more information about native libraries can be found in the &lt;a href=&quot;https://doc.rust-lang.org/book/ffi.html&quot;&gt;FFI section of the book&lt;/a&gt;.</source>
          <target state="translated">컴파일러는 상자를 정적 및 동적으로 연결하는 다양한 방법을 지원합니다. 이 섹션에서는 상자를 함께 연결하는 다양한 방법을 살펴보고 네이티브 라이브러리에 대한 자세한 정보 &lt;a href=&quot;https://doc.rust-lang.org/book/ffi.html&quot;&gt;는이 책&lt;/a&gt; 의 FFI 섹션 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e6a5c185d40ba65d2c0863bc15ff86b37643834d" translate="yes" xml:space="preserve">
          <source>The compiler then knows to not make any incorrect assumptions or optimizations on this code.</source>
          <target state="translated">그런 다음 컴파일러는이 코드에 대해 잘못된 가정이나 최적화를하지 않는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f49b0710fee284944c10fc8dd575c9f675cc65d" translate="yes" xml:space="preserve">
          <source>The compiler uses three rules to figure out what lifetimes references have when there aren&amp;rsquo;t explicit annotations. The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes. If the compiler gets to the end of the three rules and there are still references for which it can&amp;rsquo;t figure out lifetimes, the compiler will stop with an error. These rules apply to &lt;code&gt;fn&lt;/code&gt; definitions as well as &lt;code&gt;impl&lt;/code&gt; blocks.</source>
          <target state="translated">컴파일러는 세 가지 규칙을 사용하여 명시 적 주석이 없을 때의 수명 참조가 무엇인지 파악합니다. 첫 번째 규칙은 입력 수명에 적용되고 두 번째 규칙과 세 번째 규칙은 출력 수명에 적용됩니다. 컴파일러가 세 가지 규칙의 끝까지 도달했지만 여전히 수명을 알 수없는 참조가있는 경우 컴파일러는 오류와 함께 중지됩니다. 이 규칙은 &lt;code&gt;fn&lt;/code&gt; 정의 및 &lt;code&gt;impl&lt;/code&gt; 블록에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="433b36c96c38bd66008e924fa1864ced83fcb794" translate="yes" xml:space="preserve">
          <source>The compiler will complain that it needs lifetime specifiers:</source>
          <target state="translated">컴파일러는 수명 지정자가 필요하다고 불평합니다.</target>
        </trans-unit>
        <trans-unit id="572859abb18057fb674dd21429d06414b40c8275" translate="yes" xml:space="preserve">
          <source>The compiler will determine which of the &lt;a href=&quot;../types/closure#call-traits-and-coercions&quot;&gt;closure traits&lt;/a&gt; the closure's type will implement by how it acts on its captured variables. The closure will also implement &lt;a href=&quot;../special-types-and-traits#send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../special-types-and-traits#sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; if all of its captured types do. These traits allow functions to accept closures using generics, even though the exact types can't be named.</source>
          <target state="translated">컴파일러는 클로저 유형이 캡처 된 변수에 작용하는 방식으로 클로저 유형이 구현할 &lt;a href=&quot;../types/closure#call-traits-and-coercions&quot;&gt;클로저 특성&lt;/a&gt; 을 결정 합니다. 클로저는 또한 캡처 된 모든 유형이 수행하는 경우 &lt;a href=&quot;../special-types-and-traits#send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;../special-types-and-traits#sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; 구현 합니다. 이러한 특성을 통해 정확한 유형의 이름을 지정할 수는 없지만 함수가 제네릭을 사용하여 클로저를 수락 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="948f1a92a83b2e1e3378ae6b818bd73449ba504b" translate="yes" xml:space="preserve">
          <source>The compiler will indicate when you&amp;rsquo;re trying to do something that violates the rules of object safety in regard to trait objects. For example, let&amp;rsquo;s say we tried to implement the &lt;code&gt;Screen&lt;/code&gt; struct in Listing 17-4 to hold types that implement the &lt;code&gt;Clone&lt;/code&gt; trait instead of the &lt;code&gt;Draw&lt;/code&gt; trait, like this:</source>
          <target state="translated">컴파일러는 특성 객체와 관련하여 객체 안전 규칙을 위반하는 작업을 수행하려고 할 때 표시합니다. 예를 들어, 다음 과 같이 &lt;code&gt;Draw&lt;/code&gt; 특성 대신 &lt;code&gt;Clone&lt;/code&gt; 특성 을 구현하는 유형을 보유하기 위해 Listing 17-4 의 &lt;code&gt;Screen&lt;/code&gt; 구조체 를 구현하려했다고 가정 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="a84c7a7769bfd766452d6377b59bc8d2e574c64c" translate="yes" xml:space="preserve">
          <source>The compiler, in general, assumes that variables are properly initialized at their respective type. For example, a variable of reference type must be aligned and non-NULL. This is an invariant that must &lt;em&gt;always&lt;/em&gt; be upheld, even in unsafe code. As a consequence, zero-initializing a variable of reference type causes instantaneous &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;, no matter whether that reference ever gets used to access memory:</source>
          <target state="translated">컴파일러는 일반적으로 변수가 해당 유형에서 올바르게 초기화되었다고 가정합니다. 예를 들어, 참조 유형의 변수는 정렬되고 NULL이 아니어야합니다. 이것은 안전하지 않은 코드에서도 &lt;em&gt;항상 지켜&lt;/em&gt; 져야 하는 변하지 않는 것입니다 . 결과적으로 참조 유형의 변수를 0으로 초기화하면 해당 참조가 메모리에 액세스하는 데 사용되는지 여부에 관계없이 순간적으로 &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;정의되지 않은 동작이&lt;/a&gt; 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="4ed049edf6523bee71aa6c2cc8dac47d3acb83f3" translate="yes" xml:space="preserve">
          <source>The computed offset cannot exceed &lt;code&gt;isize::MAX&lt;/code&gt;&lt;strong&gt;bytes&lt;/strong&gt;.</source>
          <target state="translated">계산 된 오프셋은 &lt;code&gt;isize::MAX&lt;/code&gt; &lt;strong&gt;bytes를&lt;/strong&gt; 초과 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4f78f76fdf78ce465bd63ef1c725533fd764ba85" translate="yes" xml:space="preserve">
          <source>The computed offset, &lt;strong&gt;in bytes&lt;/strong&gt;, cannot overflow an &lt;code&gt;isize&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;바이트 단위로&lt;/strong&gt; 계산 된 오프셋 은 &lt;code&gt;isize&lt;/code&gt; 오버 플로우 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="63f5ab3561e8fa530abb7afbb885243679cbd27d" translate="yes" xml:space="preserve">
          <source>The concatenation &amp;alpha; &amp;beta; &amp;gamma; &amp;delta; is a parseable Rust program.</source>
          <target state="translated">연결 &amp;alpha; &amp;beta; &amp;gamma; &amp;delta;는 파싱 가능한 Rust 프로그램입니다.</target>
        </trans-unit>
        <trans-unit id="026ad0f5294d67f94938651fe3bfaacf62c15a89" translate="yes" xml:space="preserve">
          <source>The concept of lifetimes is somewhat different from tools in other programming languages, arguably making lifetimes Rust&amp;rsquo;s most distinctive feature. Although we won&amp;rsquo;t cover lifetimes in their entirety in this chapter, we&amp;rsquo;ll discuss common ways you might encounter lifetime syntax so you can become familiar with the concepts.</source>
          <target state="translated">일생의 개념은 다른 프로그래밍 언어의 툴과는 다소 다르며, 아마도 일생 Rust의 가장 독특한 특징을 일 생일 것입니다. 이 장에서는 전체 수명을 다루지 않지만 수명 구문에 직면 할 수있는 일반적인 방법에 대해 논의하여 개념에 익숙해 질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf8b3cea5648a2c56269d845203de953f7dc58d3" translate="yes" xml:space="preserve">
          <source>The concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don&amp;rsquo;t have to write and debug extra code to get this control.</source>
          <target state="translated">소유권, 차용 및 슬라이스 개념은 컴파일시 Rust 프로그램에서 메모리 안전성을 보장합니다. Rust 언어를 사용하면 다른 시스템 프로그래밍 언어와 같은 방식으로 메모리 사용을 제어 할 수 있지만 소유자가 범위를 벗어날 때 데이터 소유자가 자동으로 해당 데이터를 정리하면 추가 코드를 작성하고 디버깅 할 필요가 없습니다. 이 컨트롤을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5484608e7530a94c46507f1fbbbe29684e230d84" translate="yes" xml:space="preserve">
          <source>The condition can use variables created in the pattern. Listing 18-26 shows a &lt;code&gt;match&lt;/code&gt; where the first arm has the pattern &lt;code&gt;Some(x)&lt;/code&gt; and also has a match guard of &lt;code&gt;if x &amp;lt; 5&lt;/code&gt;.</source>
          <target state="translated">조건은 패턴에서 작성된 변수를 사용할 수 있습니다. 18-26 쇼 목록 &lt;code&gt;match&lt;/code&gt; 최초의 암 패턴이 &lt;code&gt;Some(x)&lt;/code&gt; 또한의 일치 가드가 &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="75d37ae80df9e59cac39010c72ed606ee381207c" translate="yes" xml:space="preserve">
          <source>The condition we want to check in the inner match is whether the value returned by &lt;code&gt;error.kind()&lt;/code&gt; is the &lt;code&gt;NotFound&lt;/code&gt; variant of the &lt;code&gt;ErrorKind&lt;/code&gt; enum. If it is, we try to create the file with &lt;code&gt;File::create&lt;/code&gt;. However, because &lt;code&gt;File::create&lt;/code&gt; could also fail, we need a second arm in the inner &lt;code&gt;match&lt;/code&gt; expression. When the file can&amp;rsquo;t be created, a different error message is printed. The second arm of the outer &lt;code&gt;match&lt;/code&gt; stays the same, so the program panics on any error besides the missing file error.</source>
          <target state="translated">내부 일치를 확인하려는 조건은 &lt;code&gt;error.kind()&lt;/code&gt; 의해 반환 된 값 이 &lt;code&gt;ErrorKind&lt;/code&gt; 열거 형 의 &lt;code&gt;NotFound&lt;/code&gt; 변형 인지 여부 입니다. 그렇다면 &lt;code&gt;File::create&lt;/code&gt; 를 사용하여 파일을 만듭니다 . 그러나 &lt;code&gt;File::create&lt;/code&gt; 도 실패 할 수 있으므로 내부 &lt;code&gt;match&lt;/code&gt; 식 에 두 번째 암이 필요합니다 . 파일을 만들 수 없으면 다른 오류 메시지가 인쇄됩니다. 외부 &lt;code&gt;match&lt;/code&gt; 의 두 번째 암은 동일하게 유지되므로 누락 된 파일 오류 외에 오류가 발생하면 프로그램이 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="6c5b1587da56cf50f7a60ae4167ed8ca12fc4a83" translate="yes" xml:space="preserve">
          <source>The conditions in which you&amp;rsquo;re allowed or not allowed to implement the trait</source>
          <target state="translated">특성을 구현할 수있는 조건</target>
        </trans-unit>
        <trans-unit id="1fd449b5671c0c531048bf228bce50b5745274bb" translate="yes" xml:space="preserve">
          <source>The connection was aborted (terminated) by the remote server.</source>
          <target state="translated">원격 서버에 의해 연결이 중단 (종료)되었습니다.</target>
        </trans-unit>
        <trans-unit id="394cd4f1c44fd561007d2b956b477de854f22ebc" translate="yes" xml:space="preserve">
          <source>The connection was refused by the remote server.</source>
          <target state="translated">원격 서버에서 연결을 거부했습니다.</target>
        </trans-unit>
        <trans-unit id="ee9eafc82d73396db6a743b750893f5328ee460c" translate="yes" xml:space="preserve">
          <source>The connection was reset by the remote server.</source>
          <target state="translated">원격 서버가 연결을 재설정했습니다.</target>
        </trans-unit>
        <trans-unit id="c5c0b8221782b43e8764b446a2f5d5156fcf8b34" translate="yes" xml:space="preserve">
          <source>The connection will be closed when the value is dropped. The reading and writing portions of the connection can also be shut down individually with the &lt;a href=&quot;#method.shutdown&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">값이 떨어지면 연결이 닫힙니다. 연결의 읽기 및 쓰기 부분은 &lt;a href=&quot;#method.shutdown&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt; 방법으로 개별적으로 종료 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="98a1585e2f9a061b72de9d4f949a75a416a4fb56" translate="yes" xml:space="preserve">
          <source>The cons function concept has made its way into more general functional programming jargon: &amp;ldquo;to cons &lt;em&gt;x&lt;/em&gt; onto &lt;em&gt;y&lt;/em&gt;&amp;rdquo; informally means to construct a new container instance by putting the element &lt;em&gt;x&lt;/em&gt; at the start of this new container, followed by the container &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">cons 함수 개념은보다 일반적인 기능적 프로그래밍 용어로 발전했습니다. &quot; &lt;em&gt;x&lt;/em&gt; 를 &lt;em&gt;y&lt;/em&gt; 에 &lt;em&gt;대입하는 것&lt;/em&gt; &quot; 은이 새로운 컨테이너의 시작 부분에 요소 &lt;em&gt;x&lt;/em&gt; 를 놓고 컨테이너 &lt;em&gt;y&lt;/em&gt; 를 배치하여 새 컨테이너 인스턴스를 구성하는 것을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="3946118b0e2f7f5ec1675cedbf82ccd7c8d576ce" translate="yes" xml:space="preserve">
          <source>The contents of &lt;em&gt;src/lib.rs&lt;/em&gt; should have the signatures shown in Listing 12-13 (we&amp;rsquo;ve omitted the bodies of the functions for brevity). Note that this won&amp;rsquo;t compile until we modify &lt;em&gt;src/main.rs&lt;/em&gt; in Listing 12-14.</source>
          <target state="translated">&lt;em&gt;src / lib.rs&lt;/em&gt; 의 내용에는 Listing 12-13에 표시된 서명이 있어야한다 (간단하게하기 위해 함수의 본문은 생략했다). Listing 12-14에서 &lt;em&gt;src / main.rs&lt;/em&gt; 를 수정하기 전까지는 컴파일되지 않는다 .</target>
        </trans-unit>
        <trans-unit id="4fb4cd20ff2b04a7f8f088847ce2546308d2b8ce" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;em&gt;src/lib.rs&lt;/em&gt; file in your &lt;code&gt;adder&lt;/code&gt; library should look like Listing 11-1.</source>
          <target state="translated">&lt;code&gt;adder&lt;/code&gt; 라이브러리 에있는 &lt;em&gt;src / lib.rs&lt;/em&gt; 파일 의 내용은 Listing 11-1과 같다.</target>
        </trans-unit>
        <trans-unit id="1735f7c56c57e86fb0b029da9024a55f63cc6d92" translate="yes" xml:space="preserve">
          <source>The contents of the repetition must be able to follow whatever comes before, and whatever comes after must be able to follow the contents of the repetition.</source>
          <target state="translated">반복의 내용은 이전의 모든 내용을 따라갈 수 있어야하며 이후의 모든 내용은 반복의 내용을 따라갈 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="33e5fb5d650df50a2e77352564f0bccccceac217" translate="yes" xml:space="preserve">
          <source>The contents of the returned &lt;a href=&quot;../raw/struct.stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; are &lt;strong&gt;not&lt;/strong&gt; consistent across Unix platforms. The &lt;code&gt;os::unix::fs::MetadataExt&lt;/code&gt; trait contains the cross-Unix abstractions contained within the raw stat.</source>
          <target state="translated">반환의 내용 &lt;a href=&quot;../raw/struct.stat&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt; 있습니다 &lt;strong&gt;하지&lt;/strong&gt; 유닉스 플랫폼에서 일관된. &lt;code&gt;os::unix::fs::MetadataExt&lt;/code&gt; 특성은 원시 통계에 포함 된 크로스 - 유닉스 추상화가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0770383d0616ee4e47049d055237250b7b2bfaef" translate="yes" xml:space="preserve">
          <source>The conversion allocates on the heap and moves &lt;code&gt;t&lt;/code&gt; from the stack into it.</source>
          <target state="translated">변환은 힙에 할당 하고 스택에서 &lt;code&gt;t&lt;/code&gt; 로 힙을 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="66e8c9afb284902c1e321d76aa570359994fd792" translate="yes" xml:space="preserve">
          <source>The conversion consumes the &lt;a href=&quot;../ffi/struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;, and removes the terminating NUL byte.</source>
          <target state="translated">변환은 &lt;a href=&quot;../ffi/struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; 을&lt;/a&gt; 소비하고 종료 NUL 바이트를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="b49f9ee7f1f30037339c1daa1d1e1cd395843299" translate="yes" xml:space="preserve">
          <source>The conversion consumes the &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;, and removes the terminating NUL byte.</source>
          <target state="translated">변환은 &lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; 을&lt;/a&gt; 소비하고 종료 NUL 바이트를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9ff60369ad0f3cbf8d85443d93a8bb4f7f1f7686" translate="yes" xml:space="preserve">
          <source>The conversion copies the data, and includes an allocation on the heap.</source>
          <target state="translated">변환은 데이터를 복사하고 힙에 대한 할당을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="af0586e1698754134d6653d1c35d55045868b007" translate="yes" xml:space="preserve">
          <source>The core method of future, &lt;code&gt;poll&lt;/code&gt;, &lt;em&gt;attempts&lt;/em&gt; to resolve the future into a final value. This method does not block if the value is not ready. Instead, the current task is scheduled to be woken up when it's possible to make further progress by &lt;code&gt;poll&lt;/code&gt;ing again. The &lt;code&gt;context&lt;/code&gt; passed to the &lt;code&gt;poll&lt;/code&gt; method can provide a &lt;code&gt;Waker&lt;/code&gt;, which is a handle for waking up the current task.</source>
          <target state="translated">미래의 핵심 방법은 &lt;code&gt;poll&lt;/code&gt; , &lt;em&gt;시도는&lt;/em&gt; 최종 값으로 미래를 해결합니다. 값이 준비되지 않은 경우이 방법은 차단되지 않습니다. 대신, 현재 작업은 다시 &lt;code&gt;poll&lt;/code&gt; 하여 추가 진행이 가능할 때 깨어날 예정 입니다. &lt;code&gt;poll&lt;/code&gt; 메소드에 전달 된 &lt;code&gt;context&lt;/code&gt; 는 &lt;code&gt;Waker&lt;/code&gt; 를 제공 할 수 있으며 , 이는 현재 작업을 깨우기위한 핸들입니다.</target>
        </trans-unit>
        <trans-unit id="7cb53e3d2cc08f8c1b0d6306a44e9e0ab47f9511" translate="yes" xml:space="preserve">
          <source>The core of the error states that there are &lt;em&gt;mismatched types&lt;/em&gt;. Rust has a strong, static type system. However, it also has type inference. When we wrote &lt;code&gt;let mut guess = String::new()&lt;/code&gt;, Rust was able to infer that &lt;code&gt;guess&lt;/code&gt; should be a &lt;code&gt;String&lt;/code&gt; and didn&amp;rsquo;t make us write the type. The &lt;code&gt;secret_number&lt;/code&gt;, on the other hand, is a number type. A few number types can have a value between 1 and 100: &lt;code&gt;i32&lt;/code&gt;, a 32-bit number; &lt;code&gt;u32&lt;/code&gt;, an unsigned 32-bit number; &lt;code&gt;i64&lt;/code&gt;, a 64-bit number; as well as others. Rust defaults to an &lt;code&gt;i32&lt;/code&gt;, which is the type of &lt;code&gt;secret_number&lt;/code&gt; unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.</source>
          <target state="translated">오류의 핵심은 &lt;em&gt;유형&lt;/em&gt; 이 &lt;em&gt;일치하지 않음을 나타&lt;/em&gt; 냅니다. Rust는 강력한 정적 타입 시스템을 가지고 있습니다. 그러나 형식 유추도 있습니다. &lt;code&gt;let mut guess = String::new()&lt;/code&gt; 을 쓸 때 Rust는 &lt;code&gt;guess&lt;/code&gt; 이 &lt;code&gt;String&lt;/code&gt; 이어야 한다고 추측 할 수 있었고 유형을 쓰지 않았습니다. 반면에 &lt;code&gt;secret_number&lt;/code&gt; 는 숫자 유형입니다. 몇몇 숫자 유형은 1과 100 사이의 값을 가질 수 있습니다. &lt;code&gt;i32&lt;/code&gt; -32 비트 숫자; 부호없는 32 비트 숫자 인 &lt;code&gt;u32&lt;/code&gt; ; 64 비트 숫자 인 &lt;code&gt;i64&lt;/code&gt; ; 뿐만 아니라 다른 사람. 에 녹 기본값 &lt;code&gt;i32&lt;/code&gt; 의 유형입니다, &lt;code&gt;secret_number&lt;/code&gt; Rust가 다른 숫자 유형을 유추하는 다른 곳에 유형 ​​정보를 추가하지 않는 한. 오류의 원인은 Rust가 문자열과 숫자 유형을 비교할 수 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="ddff64ad7c369ce0737f5b8b0b3f4b7511787cca" translate="yes" xml:space="preserve">
          <source>The core primitive for interior mutability in Rust.</source>
          <target state="translated">Rust의 내부 가변성을위한 핵심 기본 요소.</target>
        </trans-unit>
        <trans-unit id="159b3bf04af466ed5bc13962fe870a560dd18283" translate="yes" xml:space="preserve">
          <source>The corresponding definitions are in &lt;code&gt;librustc_codegen_llvm/intrinsic.rs&lt;/code&gt;.</source>
          <target state="translated">해당 정의는 &lt;code&gt;librustc_codegen_llvm/intrinsic.rs&lt;/code&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d69c16c8fa846f1af610002036c48591d43f28f" translate="yes" xml:space="preserve">
          <source>The crate name must not be empty, and must only contain &lt;a href=&quot;../std/primitive.char#method.is_alphanumeric&quot;&gt;Unicode alphanumeric&lt;/a&gt; or &lt;code&gt;-&lt;/code&gt; (U+002D) characters.</source>
          <target state="translated">상자 이름은 비워 둘 수 없으며 &lt;a href=&quot;../std/primitive.char#method.is_alphanumeric&quot;&gt;유니 코드 영숫자&lt;/a&gt; 또는 &lt;code&gt;-&lt;/code&gt; (U + 002D) 문자 만 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="be4dd5125e77acafd163c79956b21bce0b41caf8" translate="yes" xml:space="preserve">
          <source>The created map has the default initial capacity.</source>
          <target state="translated">작성된 맵에는 기본 초기 용량이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9c04b6351b379cccf29eab61f8204218529d934" translate="yes" xml:space="preserve">
          <source>The current algorithm is an adaptive, iterative merge sort inspired by &lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;timsort&lt;/a&gt;. It is designed to be very fast in cases where the slice is nearly sorted, or consists of two or more sorted sequences concatenated one after another.</source>
          <target state="translated">현재 알고리즘은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;timsort에서&lt;/a&gt; 영감을 얻은 적응적이고 반복적 인 병합 정렬 입니다. 슬라이스가 거의 정렬되거나 두 개 이상의 정렬 된 시퀀스로 구성되어있는 경우 매우 빠르도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="bf4d84cfe0f7a72eb4a521a3a9fe9d6ec790d19e" translate="yes" xml:space="preserve">
          <source>The current algorithm is based on &lt;a href=&quot;https://github.com/orlp/pdqsort&quot;&gt;pattern-defeating quicksort&lt;/a&gt; by Orson Peters, which combines the fast average case of randomized quicksort with the fast worst case of heapsort, while achieving linear time on slices with certain patterns. It uses some randomization to avoid degenerate cases, but with a fixed seed to always provide deterministic behavior.</source>
          <target state="translated">현재 알고리즘은 Orson Peters의 &lt;a href=&quot;https://github.com/orlp/pdqsort&quot;&gt;패턴-파괴 퀵 정렬&lt;/a&gt; 을 기반으로 하며 무작위 퀵 정렬의 빠른 평균 경우와 가장 최악의 힙 정렬의 경우를 결합하고 특정 패턴의 슬라이스에서 선형 시간을 달성합니다. 그것은 변성 사례를 피하기 위해 임의의 무작위 화를 사용하지만 항상 결정 론적 행동을 제공하기 위해 고정 된 시드와 함께.</target>
        </trans-unit>
        <trans-unit id="17185ac0ce099c141b9827d28f04ee4d12e294f8" translate="yes" xml:space="preserve">
          <source>The current algorithm is based on the quickselect portion of the same quicksort algorithm used for &lt;a href=&quot;#method.sort_unstable&quot;&gt;&lt;code&gt;sort_unstable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재의 알고리즘에 사용 된 것과 동일한 퀵 알고리즘 quickselect 부분에 기초 &lt;a href=&quot;#method.sort_unstable&quot;&gt; &lt;code&gt;sort_unstable&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="593e3fc1b65f7b6d06f9c45167b067a1a762655b" translate="yes" xml:space="preserve">
          <source>The current file cursor is not affected by this function.</source>
          <target state="translated">현재 파일 커서는이 기능의 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3346ba5eca8038cde57805738abeaa90cd6a63c6" translate="yes" xml:space="preserve">
          <source>The current module path can be thought of as the hierarchy of modules leading back up to the crate root. The first component of the path returned is the name of the crate currently being compiled.</source>
          <target state="translated">현재 모듈 경로는 크레이트 루트로 돌아가는 모듈의 계층 구조로 생각할 수 있습니다. 반환 된 경로의 첫 번째 구성 요소는 현재 컴파일중인 상자의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="bdf915fa340c78bb10eee5926542917da6f9a74d" translate="yes" xml:space="preserve">
          <source>The current process does not have the permission rights to access &lt;code&gt;from&lt;/code&gt; or write &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">현재 프로세스가 액세스 할 수있는 권한 권한이없는 &lt;code&gt;from&lt;/code&gt; 또는 쓰기 &lt;code&gt;to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa1cdfe5525c9cd270fc9b5826bff19009fb273e" translate="yes" xml:space="preserve">
          <source>The current version of the prelude (version 1) lives in &lt;a href=&quot;v1/index&quot;&gt;&lt;code&gt;std::prelude::v1&lt;/code&gt;&lt;/a&gt;, and re-exports the following.</source>
          <target state="translated">prelude (버전 1)의 현재 버전은 &lt;a href=&quot;v1/index&quot;&gt; &lt;code&gt;std::prelude::v1&lt;/code&gt; &lt;/a&gt; 에 있으며 다음을 다시 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="b9ad03e9a3edaaa56118f6fc3f2871f3d642b3c0" translate="yes" xml:space="preserve">
          <source>The data could not be sent on the &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt; because it would require that the callee block to send the data.</source>
          <target state="translated">수신자 블록이 데이터를 보내야하기 때문에 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt; 에서 데이터를 보낼 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="113312da9f41c00330f3f6a2627f87633cf51181" translate="yes" xml:space="preserve">
          <source>The data members that this trait exposes correspond to the members of the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx&quot;&gt;&lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt;&lt;/a&gt; structure.</source>
          <target state="translated">이 특성이 노출하는 데이터 멤버는 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx&quot;&gt; &lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt; &lt;/a&gt; 구조 의 멤버에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="c9421f388aa0f6bda7993e70317be2c01ffcdb74" translate="yes" xml:space="preserve">
          <source>The data protected by the mutex can be accessed through this guard via its &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ops/trait.derefmut&quot;&gt;&lt;code&gt;DerefMut&lt;/code&gt;&lt;/a&gt; implementations.</source>
          <target state="translated">뮤텍스로 보호되는 데이터는 &lt;a href=&quot;../ops/trait.deref&quot;&gt; &lt;code&gt;Deref&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ops/trait.derefmut&quot;&gt; &lt;code&gt;DerefMut&lt;/code&gt; &lt;/a&gt; 구현을 통해이 가드를 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a8b69bce2135d478ffa031311b309f0dc7de4fc2" translate="yes" xml:space="preserve">
          <source>The data that the process wrote to stderr.</source>
          <target state="translated">프로세스가 stderr에 쓴 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="5ad3bfb524d0ca744c539d652ec4054ab0b9dc35" translate="yes" xml:space="preserve">
          <source>The data that the process wrote to stdout.</source>
          <target state="translated">프로세스가 표준 출력에 쓴 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="f0f62565562b0bbca1d9e555b1c167c8869cc294" translate="yes" xml:space="preserve">
          <source>The declaration of &lt;code&gt;another_function&lt;/code&gt; has one parameter named &lt;code&gt;x&lt;/code&gt;. The type of &lt;code&gt;x&lt;/code&gt; is specified as &lt;code&gt;i32&lt;/code&gt;. When &lt;code&gt;5&lt;/code&gt; is passed to &lt;code&gt;another_function&lt;/code&gt;, the &lt;code&gt;println!&lt;/code&gt; macro puts &lt;code&gt;5&lt;/code&gt; where the pair of curly brackets were in the format string.</source>
          <target state="translated">&lt;code&gt;another_function&lt;/code&gt; 선언에는 &lt;code&gt;x&lt;/code&gt; 라는 하나의 매개 변수가 있습니다. &lt;code&gt;x&lt;/code&gt; 의 유형은 &lt;code&gt;i32&lt;/code&gt; 로 지정됩니다 . 때 &lt;code&gt;5&lt;/code&gt; 에 전달 &lt;code&gt;another_function&lt;/code&gt; 의 &lt;code&gt;println!&lt;/code&gt; 매크로 는 중괄호 쌍이 형식 문자열에 있었던 곳에 &lt;code&gt;5&lt;/code&gt; 를 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="6a4c3f3e9f4bf073db3de78ffdfd8f78a08679d0" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#fillalignment&quot;&gt;fill/alignment&lt;/a&gt; for non-numerics is a space and left-aligned. The defaults for numeric formatters is also a space but with right-alignment. If the &lt;code&gt;0&lt;/code&gt; flag is specified for numerics, then the implicit fill character is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">숫자가 아닌 문자 의 기본 &lt;a href=&quot;#fillalignment&quot;&gt;채우기 / 정렬&lt;/a&gt; 은 공백과 왼쪽 정렬입니다. 숫자 포맷터의 기본값은 공백이지만 오른쪽 정렬입니다. 경우 &lt;code&gt;0&lt;/code&gt; 플래그가 수치에 대해 지정된 내재 채우기 문자는 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e71d3da519e1259cb4d0ff052a4082fe544273e4" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../../hash/trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt; used by &lt;a href=&quot;struct.randomstate&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 &lt;a href=&quot;../../hash/trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; &lt;/a&gt; 에서 사용 &lt;a href=&quot;struct.randomstate&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="81a33ca44ce969a6a0433a7aff9f0392c46b2e52" translate="yes" xml:space="preserve">
          <source>The default behavior of this function is to print a message to standard error and abort the process. It can be replaced with &lt;a href=&quot;fn.set_alloc_error_hook&quot;&gt;&lt;code&gt;set_alloc_error_hook&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.take_alloc_error_hook&quot;&gt;&lt;code&gt;take_alloc_error_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능의 기본 동작은 메시지를 표준 오류로 인쇄하고 프로세스를 중단하는 것입니다. &lt;a href=&quot;fn.set_alloc_error_hook&quot;&gt; &lt;code&gt;set_alloc_error_hook&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.take_alloc_error_hook&quot;&gt; &lt;code&gt;take_alloc_error_hook&lt;/code&gt; &lt;/a&gt; 로 대체 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1fe48c8009742af8ee8a3efe0842a923bc01bf9d" translate="yes" xml:space="preserve">
          <source>The default generic type in this code is within the &lt;code&gt;Add&lt;/code&gt; trait. Here is its definition:</source>
          <target state="translated">이 코드의 기본 제네릭 형식은 &lt;code&gt;Add&lt;/code&gt; 특성 내에 있습니다. 그 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="697b922437171b9fe1e8c84494c4b161d6fd03d3" translate="yes" xml:space="preserve">
          <source>The default hashing algorithm is currently SipHash 1-3, though this is subject to change at any point in the future. While its performance is very competitive for medium sized keys, other hashing algorithms will outperform it for small keys such as integers as well as large keys such as long strings, though those algorithms will typically &lt;em&gt;not&lt;/em&gt; protect against attacks such as HashDoS.</source>
          <target state="translated">기본 해싱 알고리즘은 현재 SipHash 1-3이지만 향후 언제든지 변경 될 수 있습니다. 중간 크기의 키에 비해 성능이 매우 경쟁력이 있지만 다른 해싱 알고리즘은 정수와 같은 작은 키뿐만 아니라 긴 문자열과 같은 큰 키에 비해 성능이 뛰어나지 만 일반적 으로 HashDoS와 같은 공격으로부터 보호 &lt;em&gt;하지는 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="73b38e69c912c9cd2a1d35da9b4cb8282e56833f" translate="yes" xml:space="preserve">
          <source>The default implementation calls &lt;code&gt;read&lt;/code&gt; with either the first nonempty buffer provided, or an empty one if none exists.</source>
          <target state="translated">기본 구현 호출 &lt;code&gt;read&lt;/code&gt; 제공된 첫 번째 비어 있지 않은 버퍼 또는 존재하지 않는 경우 비어있는 버퍼로 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="2e19ee8802e471056a9e27a45d3086893e133973" translate="yes" xml:space="preserve">
          <source>The default implementation calls &lt;code&gt;write&lt;/code&gt; with either the first nonempty buffer provided, or an empty one if none exists.</source>
          <target state="translated">기본 구현은 비어 있지 않은 첫 번째 버퍼 또는 존재하지 않는 경우 비어있는 버퍼로 &lt;code&gt;write&lt;/code&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="cda4f183b9995aecf4b0037179612271bde1f6bd" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;(0, &lt;/code&gt;&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; which is correct for any iterator.</source>
          <target state="translated">기본 구현은 모든 반복자에 대해 올바른 &lt;code&gt;(0, &lt;/code&gt; &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; &lt;code&gt;)&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="969fb25f2024192b2aecf3ee3a177be1b86acfb5" translate="yes" xml:space="preserve">
          <source>The default implementation returns an initializer which will zero buffers.</source>
          <target state="translated">기본 구현은 버퍼를 0으로하는 이니셜 라이저를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bb3d803ebf5acd8c1abc49ce5f1cae9b36493095" translate="yes" xml:space="preserve">
          <source>The default implementations are returning &lt;code&gt;libc::EXIT_SUCCESS&lt;/code&gt; to indicate a successful execution. In case of a failure, &lt;code&gt;libc::EXIT_FAILURE&lt;/code&gt; is returned.</source>
          <target state="translated">기본 구현은 성공적인 실행을 나타 내기 위해 &lt;code&gt;libc::EXIT_SUCCESS&lt;/code&gt; 를 반환 합니다. 실패한 경우 &lt;code&gt;libc::EXIT_FAILURE&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="31cdcfae6f2b31eff3f08e0d9f029eeb9ec7bee1" translate="yes" xml:space="preserve">
          <source>The default is chosen with a bias toward producing literals that are legal in a variety of languages, including C++11 and similar C-family languages. The exact rules are:</source>
          <target state="translated">기본값은 C ++ 11 및 유사한 C 계열 언어를 포함하여 다양한 언어로 유효한 리터럴을 생성하는 것에 대한 편견과 함께 선택됩니다. 정확한 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b02cae987658ffb74f03215f87762f2599f0c7eb" translate="yes" xml:space="preserve">
          <source>The default memory allocator provided by the operating system.</source>
          <target state="translated">운영 체제에서 제공 한 기본 메모리 할당 자</target>
        </trans-unit>
        <trans-unit id="1dd4678ade75055f3987aad761b36a01d2353c9f" translate="yes" xml:space="preserve">
          <source>The default stack size for spawned threads is 2 MiB, though this particular stack size is subject to change in the future. There are two ways to manually specify the stack size for spawned threads:</source>
          <target state="translated">생성 된 스레드의 기본 스택 크기는 2MiB이지만이 특정 스택 크기는 나중에 변경 될 수 있습니다. 생성 된 스레드의 스택 크기를 수동으로 지정하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f91c7ab56b392b9e17d4e1e13452f2f412a7407" translate="yes" xml:space="preserve">
          <source>The definition for complex NTs deserves some justification. SEP_SET(M) defines the possibility that the separator could be a valid first token for M, which happens when there is a separator defined and the repeated fragment could be empty. ALPHA_SET(M) defines the possibility that the complex NT could be empty, meaning that M's valid first tokens are those of the following token-tree sequences &lt;code&gt;&amp;alpha;&lt;/code&gt;. This occurs when either &lt;code&gt;\*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; is used, in which case there could be zero repetitions. In theory, this could also occur if &lt;code&gt;+&lt;/code&gt; was used with a potentially-empty repeating fragment, but this is forbidden by the third invariant.</source>
          <target state="translated">복잡한 NT에 대한 정의는 약간의 정당화가 필요합니다. SEP_SET (M)은 분리자가 M에 대해 유효한 첫 번째 토큰 일 수있는 가능성을 정의합니다. 이는 분리자가 정의되고 반복 단편이 비어있을 때 발생합니다. ALPHA_SET (M)은 복합 NT가 비어있을 수있는 가능성을 정의합니다. 즉, M의 유효한 첫 번째 토큰은 다음 토큰 트리 시퀀스 &lt;code&gt;&amp;alpha;&lt;/code&gt; 의 토큰 입니다. 이것은 &lt;code&gt;\*&lt;/code&gt; 또는 &lt;code&gt;?&lt;/code&gt; 이 경우 반복이 0 일 수 있습니다. 이론적으로 이것은 &lt;code&gt;+&lt;/code&gt; 가 잠재적으로 비어있는 반복 조각과 함께 사용 된 경우에도 발생할 수 있지만 세 번째 불변에 의해 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="985a8049c57bbba61492d3048826a9b3471b56f7" translate="yes" xml:space="preserve">
          <source>The definition of &lt;code&gt;Config&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; 의 정의</target>
        </trans-unit>
        <trans-unit id="830ab684e6b9340db4f9c07a73c12e27ccb95977" translate="yes" xml:space="preserve">
          <source>The dereference operator</source>
          <target state="translated">역 참조 연산자</target>
        </trans-unit>
        <trans-unit id="75ad44a3ef91af0a45f2841a370dda11b833e07f" translate="yes" xml:space="preserve">
          <source>The desired behavior of the &lt;code&gt;generate_workout&lt;/code&gt; function is to first check whether the user wants a low-intensity workout (indicated by a number less than 25) or a high-intensity workout (a number of 25 or greater).</source>
          <target state="translated">&lt;code&gt;generate_workout&lt;/code&gt; 함수 의 원하는 동작은 먼저 사용자가 저 강도 운동 (25 미만의 숫자로 표시) 또는 고강도 운동 (25 이상)을 원하는지 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="be2c8573e9de352b5e8e680cfa4b055e97512426" translate="yes" xml:space="preserve">
          <source>The destructor of a type consists of</source>
          <target state="translated">타입의 소멸자는</target>
        </trans-unit>
        <trans-unit id="30054f3bf420ad868745eedcb4cc73a1da34e82c" translate="yes" xml:space="preserve">
          <source>The destructor of the struct must not move structural fields out of its argument. This is the exact point that was raised in the &lt;a href=&quot;#drop-implementation&quot;&gt;previous section&lt;/a&gt;: &lt;code&gt;drop&lt;/code&gt; takes &lt;code&gt;&amp;amp;mut self&lt;/code&gt;, but the struct (and hence its fields) might have been pinned before. You have to guarantee that you do not move a field inside your &lt;code&gt;Drop&lt;/code&gt; implementation. In particular, as explained previously, this means that your struct must &lt;em&gt;not&lt;/em&gt; be &lt;code&gt;#[repr(packed)]&lt;/code&gt;. See that section for how to write &lt;code&gt;drop&lt;/code&gt; in a way that the compiler can help you not accidentally break pinning.</source>
          <target state="translated">구조체의 소멸자는 구조 필드를 인수 밖으로 이동해서는 안됩니다. 이것은 &lt;a href=&quot;#drop-implementation&quot;&gt;이전 섹션&lt;/a&gt; 에서 제기 된 정확한 점입니다 . &lt;code&gt;drop&lt;/code&gt; takes &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 이지만 구조체 (및 그 필드)는 이전에 고정되었을 수 있습니다. &lt;code&gt;Drop&lt;/code&gt; 구현 내에서 필드를 이동하지 않아야합니다 . 특히, 앞에서 설명한 바와 같이 이것은 구조체 가 &lt;code&gt;#[repr(packed)]&lt;/code&gt; &lt;em&gt;아니&lt;/em&gt; 어야 함을 의미합니다 . 작성하는 방법에 대한 섹션을 참조하십시오 &lt;code&gt;drop&lt;/code&gt; 컴파일러가 실수로 고정 아프게하지 당신을 도울 수있는 방법을.</target>
        </trans-unit>
        <trans-unit id="f85efc5c824a33e7773d4a9703af1abcf28610ef" translate="yes" xml:space="preserve">
          <source>The difference between 'the prelude' and these other preludes is that they are not automatically &lt;code&gt;use&lt;/code&gt;'d, and must be imported manually. This is still easier than importing all of their constituent components.</source>
          <target state="translated">'전주곡'과 다른 전주곡의 차이점은 자동으로 'd를 &lt;code&gt;use&lt;/code&gt; 하지 않으며 수동으로 가져와야한다는 것입니다. 이것은 모든 구성 요소를 가져 오는 것보다 여전히 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="3d53ebfe9f22c1eb14437a5afaa7bab7ac81b640" translate="yes" xml:space="preserve">
          <source>The difference is that when using generics, as in Listing 19-13, we must annotate the types in each implementation; because we can also implement &lt;code&gt;Iterator&amp;lt;String&amp;gt; for Counter&lt;/code&gt; or any other type, we could have multiple implementations of &lt;code&gt;Iterator&lt;/code&gt; for &lt;code&gt;Counter&lt;/code&gt;. In other words, when a trait has a generic parameter, it can be implemented for a type multiple times, changing the concrete types of the generic type parameters each time. When we use the &lt;code&gt;next&lt;/code&gt; method on &lt;code&gt;Counter&lt;/code&gt;, we would have to provide type annotations to indicate which implementation of &lt;code&gt;Iterator&lt;/code&gt; we want to use.</source>
          <target state="translated">차이점은 Listing 19-13에서와 같이 제네릭을 사용할 때 각 구현에서 유형에 주석을 달아야한다는 것이다. 우리는 또한 구현할 수 있기 때문에 &lt;code&gt;Iterator&amp;lt;String&amp;gt; for Counter&lt;/code&gt; 또는 다른 종류의, 우리는 여러 구현 할 수 &lt;code&gt;Iterator&lt;/code&gt; 에 대한 &lt;code&gt;Counter&lt;/code&gt; . 즉, 특성에 일반 매개 변수가있는 경우 매번 일반 유형 매개 변수의 구체적인 유형을 변경하여 유형에 대해 여러 번 구현할 수 있습니다. &lt;code&gt;Counter&lt;/code&gt; 에서 &lt;code&gt;next&lt;/code&gt; 메소드를 사용할 때 사용 하려는 &lt;code&gt;Iterator&lt;/code&gt; 구현을 표시하기 위해 유형 주석을 제공 해야합니다.</target>
        </trans-unit>
        <trans-unit id="d9b61b2f901725762b56d16bf06bea0055df6804" translate="yes" xml:space="preserve">
          <source>The different behavior of files in the &lt;em&gt;tests&lt;/em&gt; directory is most noticeable when you have a set of helper functions that would be useful in multiple integration test files and you try to follow the steps in the &lt;a href=&quot;ch07-05-separating-modules-into-different-files&quot;&gt;&amp;ldquo;Separating Modules into Different Files&amp;rdquo;&lt;/a&gt; section of Chapter 7 to extract them into a common module. For example, if we create &lt;em&gt;tests/common.rs&lt;/em&gt; and place a function named &lt;code&gt;setup&lt;/code&gt; in it, we can add some code to &lt;code&gt;setup&lt;/code&gt; that we want to call from multiple test functions in multiple test files:</source>
          <target state="translated">여러 통합 테스트 파일에 유용한 일련의 헬퍼 함수가 있고 7 장의 &lt;a href=&quot;ch07-05-separating-modules-into-different-files&quot;&gt;&quot;모듈을 다른 파일로 분리&quot;&lt;/a&gt; 절의 단계를 수행 할 때 &lt;em&gt;tests&lt;/em&gt; 디렉토리 에있는 파일의 다른 동작 이 가장 두드러 집니다. 공통 모듈로 추출하십시오. 예를 들어, &lt;em&gt;tests / common.rs를&lt;/em&gt; 만들고 &lt;code&gt;setup&lt;/code&gt; 이라는 함수를 배치하면 여러 테스트 파일의 여러 테스트 함수에서 호출하려는 코드를 &lt;code&gt;setup&lt;/code&gt; 추가 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fd895f49df6ac41f021206eb05bd5dfbc8e5ada" translate="yes" xml:space="preserve">
          <source>The directories and files used for loading external file modules can be influenced with the &lt;code&gt;path&lt;/code&gt; attribute.</source>
          <target state="translated">외부 파일 모듈을로드하는 데 사용되는 디렉토리 및 파일은 &lt;code&gt;path&lt;/code&gt; 속성에 영향을받을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1e92ecf8e1ea3e2a6e4c02654c525e112d825547" translate="yes" xml:space="preserve">
          <source>The directory isn't empty.</source>
          <target state="translated">디렉토리가 비어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5406bf9928b412a24605eecb2ec809ade9b2bfca" translate="yes" xml:space="preserve">
          <source>The discriminant of an enum variant may change if the enum definition changes. A discriminant of some variant will not change between compilations with the same compiler.</source>
          <target state="translated">열거 형 정의가 변경되면 열거 형 변형의 판별자가 변경 될 수 있습니다. 일부 변형의 판별자는 동일한 컴파일러를 사용하는 컴파일간에 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e1e71495d678a5d4be21061931a65d8862bd4e7e" translate="yes" xml:space="preserve">
          <source>The distance being in bounds cannot rely on &quot;wrapping around&quot; the address space.</source>
          <target state="translated">경계에있는 거리는 주소 공간 &quot;래핑&quot;에 의존 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6c785ac664fd8d2346ca1bb482fcd8b5593d6af3" translate="yes" xml:space="preserve">
          <source>The distance between the pointers, &lt;strong&gt;in bytes&lt;/strong&gt;, cannot overflow an &lt;code&gt;isize&lt;/code&gt;.</source>
          <target state="translated">포인터 사이의 거리 ( &lt;strong&gt;바이트&lt;/strong&gt; )는 &lt;code&gt;isize&lt;/code&gt; 를 오버플로 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="bd1487c3b6f63cdfefd3896403e040d0a14037e5" translate="yes" xml:space="preserve">
          <source>The distance between the pointers, in bytes, must be an exact multiple of the size of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">포인터 사이의 거리 (바이트)는 &lt;code&gt;T&lt;/code&gt; 크기의 정확한 배수 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="c85eee3f8fcb1e3d7acfa8c71113a8ed01e9b6ce" translate="yes" xml:space="preserve">
          <source>The division assignment operator &lt;code&gt;/=&lt;/code&gt;.</source>
          <target state="translated">나누기 할당 연산자 &lt;code&gt;/=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fac0cbbb13a4ae4385140ac3ccea99961d57c224" translate="yes" xml:space="preserve">
          <source>The division operator &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">나누기 연산자 &lt;code&gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4bae769945be3db52fcb8fef6b0f5ad9c54eef4" translate="yes" xml:space="preserve">
          <source>The documentation for this keyword is &lt;a href=&quot;https://github.com/rust-lang/rust/issues/34601&quot;&gt;not yet complete&lt;/a&gt;. Pull requests welcome!</source>
          <target state="translated">이 키워드에 대한 문서가 &lt;a href=&quot;https://github.com/rust-lang/rust/issues/34601&quot;&gt;아직 완성되지 않았습니다&lt;/a&gt; . 풀 요청을 환영합니다!</target>
        </trans-unit>
        <trans-unit id="7092af2bcd91c441c2dfc4c8d572a11dfce60e91" translate="yes" xml:space="preserve">
          <source>The double colon (&lt;code&gt;::&lt;/code&gt;) is an operator that allows us to namespace this particular &lt;code&gt;from&lt;/code&gt; function under the &lt;code&gt;String&lt;/code&gt; type rather than using some sort of name like &lt;code&gt;string_from&lt;/code&gt;. We&amp;rsquo;ll discuss this syntax more in the &lt;a href=&quot;ch05-03-method-syntax#method-syntax&quot;&gt;&amp;ldquo;Method Syntax&amp;rdquo;&lt;/a&gt; section of Chapter 5 and when we talk about namespacing with modules in &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree&quot;&gt;&amp;ldquo;Paths for Referring to an Item in the Module Tree&amp;rdquo;&lt;/a&gt; in Chapter 7.</source>
          <target state="translated">이중 콜론 ( &lt;code&gt;::&lt;/code&gt; ) 우리가이 특정 네임 스페이스 할 수있는 연산자 &lt;code&gt;from&lt;/code&gt; 세 이하 기능 &lt;code&gt;String&lt;/code&gt; 이 아니라 같은 이름의 일종 사용하는 것보다 유형 &lt;code&gt;string_from&lt;/code&gt; 을 . 이 구문에 대해서는 5 장의 &lt;a href=&quot;ch05-03-method-syntax#method-syntax&quot;&gt;&quot;방법 구문&quot;&lt;/a&gt; 섹션에서 그리고 7 장의 &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree&quot;&gt;&quot;모듈 트리에서 항목을 참조하기위한 경로&quot;&lt;/a&gt; 에서 모듈로 이름 지정에 대해 이야기 할 때 자세히 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="27b2d1743e157ab144583c8c6b85ea9ad0092f0b" translate="yes" xml:space="preserve">
          <source>The downside of using &lt;code&gt;if let&lt;/code&gt; expressions is that the compiler doesn&amp;rsquo;t check exhaustiveness, whereas with &lt;code&gt;match&lt;/code&gt; expressions it does. If we omitted the last &lt;code&gt;else&lt;/code&gt; block and therefore missed handling some cases, the compiler would not alert us to the possible logic bug.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 표현식 을 사용하는 단점은 컴파일러가 철저한 검사를하지 않는 반면, &lt;code&gt;match&lt;/code&gt; 표현식을 사용하는 것입니다. 마지막 &lt;code&gt;else&lt;/code&gt; 블록 을 생략하고 일부 경우 처리를 놓친 경우 컴파일러는 가능한 논리 버그에 대해 경고하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e387e6a833f24807236bb7fd7266c18e39a1df6d" translate="yes" xml:space="preserve">
          <source>The downside of using this technique is that &lt;code&gt;Wrapper&lt;/code&gt; is a new type, so it doesn&amp;rsquo;t have the methods of the value it&amp;rsquo;s holding. We would have to implement all the methods of &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; directly on &lt;code&gt;Wrapper&lt;/code&gt; such that the methods delegate to &lt;code&gt;self.0&lt;/code&gt;, which would allow us to treat &lt;code&gt;Wrapper&lt;/code&gt; exactly like a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. If we wanted the new type to have every method the inner type has, implementing the &lt;code&gt;Deref&lt;/code&gt; trait (discussed in Chapter 15 in the &lt;a href=&quot;ch15-02-deref#treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt;&amp;ldquo;Treating Smart Pointers Like Regular References with the &lt;code&gt;Deref&lt;/code&gt; Trait&amp;rdquo;&lt;/a&gt; section) on the &lt;code&gt;Wrapper&lt;/code&gt; to return the inner type would be a solution. If we don&amp;rsquo;t want the &lt;code&gt;Wrapper&lt;/code&gt; type to have all the methods of the inner type&amp;mdash;for example, to restrict the &lt;code&gt;Wrapper&lt;/code&gt; type&amp;rsquo;s behavior&amp;mdash;we would have to implement just the methods we do want manually.</source>
          <target state="translated">이 기술을 사용하는 단점은 &lt;code&gt;Wrapper&lt;/code&gt; 가 새로운 유형이므로 보유하고있는 가치의 방법이 없다는 것입니다. &lt;code&gt;Wrapper&lt;/code&gt; 에 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 의 모든 메소드를 직접 구현하여 메소드 가 &lt;code&gt;self.0&lt;/code&gt; 에 위임하도록해야합니다. 그러면 &lt;code&gt;Wrapper&lt;/code&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 처럼 정확하게 취급 할 수 있습니다. 만약 새로운 타입이 내부 타입이 가지고있는 모든 메소드를 갖기를 &lt;code&gt;Deref&lt;/code&gt; , &lt;code&gt;Wrapper&lt;/code&gt; 에 &lt;a href=&quot;ch15-02-deref#treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt; &lt;code&gt;Deref&lt;/code&gt; &lt;/a&gt; 특성 ( Deref 특성을 가진 일반적인 참조와 같은 스마트 포인터 다루기 섹션 에서 15 장에서 논의 됨)을 구현하십시오.내부 유형을 반환하는 것이 해결책이 될 것입니다. &lt;code&gt;Wrapper&lt;/code&gt; 유형에 내부 유형의 모든 메소드 가 포함되지 않도록하려면 ( 예 : &lt;code&gt;Wrapper&lt;/code&gt; 유형의 동작 제한) 수동으로 원하는 메소드 만 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="0e7aa88c59ccdb8f5ae43f1abe07297a4d7ace58" translate="yes" xml:space="preserve">
          <source>The downside to implementing a macro instead of a function is that macro definitions are more complex than function definitions because you&amp;rsquo;re writing Rust code that writes Rust code. Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.</source>
          <target state="translated">함수 대신 매크로를 구현하는 단점은 Rust 코드를 작성하는 Rust 코드를 작성하기 때문에 매크로 정의가 함수 정의보다 복잡하다는 것입니다. 이러한 간접적 특성으로 인해 매크로 정의는 일반적으로 함수 정의보다 읽고 이해하고 유지하기가 더 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="719fc8d49d59015d6dffe7ccc55e5816d1966b0e" translate="yes" xml:space="preserve">
          <source>The duration of one microsecond.</source>
          <target state="translated">1 마이크로 초의 지속 시간</target>
        </trans-unit>
        <trans-unit id="e68beeeb11183a3ff18abb9e6896356e66b6200f" translate="yes" xml:space="preserve">
          <source>The duration of one millisecond.</source>
          <target state="translated">1 밀리 초의 지속 시간</target>
        </trans-unit>
        <trans-unit id="e9d186359c1c80de39171fea4281a767f86db9c5" translate="yes" xml:space="preserve">
          <source>The duration of one nanosecond.</source>
          <target state="translated">1 나노초의 지속 시간</target>
        </trans-unit>
        <trans-unit id="926b58a37c99c224d9cf0ad023e9e79f2bae5af3" translate="yes" xml:space="preserve">
          <source>The duration of one second.</source>
          <target state="translated">1 초의 지속 시간</target>
        </trans-unit>
        <trans-unit id="51e82336197f20c9062a20d4490259f940ada0fe" translate="yes" xml:space="preserve">
          <source>The easiest fix is to rewrite your closure into a top-level function, or into a method. In some cases, you may also be able to have your closure call itself by capturing a &lt;code&gt;&amp;amp;Fn()&lt;/code&gt; object or &lt;code&gt;fn()&lt;/code&gt; pointer that refers to itself. That is permitting, since the closure would be invoking itself via a virtual call, and hence does not directly reference its own &lt;em&gt;type&lt;/em&gt;.</source>
          <target state="translated">가장 쉬운 해결 방법은 클로저를 최상위 함수 또는 메서드로 다시 작성하는 것입니다. 경우에 따라 자신을 참조하는 &lt;code&gt;&amp;amp;Fn()&lt;/code&gt; 객체 또는 &lt;code&gt;fn()&lt;/code&gt; 포인터를 캡처하여 클로저 호출 자체를 가질 수도 있습니다 . 클로저는 가상 호출을 통해 자체 호출되므로 자체 &lt;em&gt;유형을&lt;/em&gt; 직접 참조하지 않기 때문에 허용 됩니다.</target>
        </trans-unit>
        <trans-unit id="8b90152377c4d2fa6a58836b95414b3c64c66683" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashMap&lt;/code&gt; with a custom key type is to derive &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 키 유형으로 &lt;code&gt;HashMap&lt;/code&gt; 을 사용하는 가장 쉬운 방법 은 &lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 를 파생시키는 것 입니다. &lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt; 도 도출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8fdc4a2a7876216a8a5156bcc124c1c5c1d13c54" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashMap&lt;/code&gt; with a custom key type is to derive &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 키 유형으로 &lt;code&gt;HashMap&lt;/code&gt; 을 사용하는 가장 쉬운 방법 은 &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 를 파생시키는 것 입니다. &lt;a href=&quot;../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt; 도 도출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2b835cd73ddea2cd4aee637c4f9c2cd855ee696f" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashSet&lt;/code&gt; with a custom type is to derive &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;, this will in the future be implied by &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">커스텀 타입으로 &lt;code&gt;HashSet&lt;/code&gt; 을 사용하는 가장 쉬운 방법 은 &lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 를 파생시키는 것 입니다. 우리는 또한 &lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt; 를 도출해야합니다 . 이것은 나중에 &lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; 에&lt;/a&gt; 의해 암시 될 것입니다 .</target>
        </trans-unit>
        <trans-unit id="bcd32a61d8029373ce3811b4c81b01b04e2fcd8a" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashSet&lt;/code&gt; with a custom type is to derive &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;, this will in the future be implied by &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">커스텀 타입으로 &lt;code&gt;HashSet&lt;/code&gt; 을 사용하는 가장 쉬운 방법 은 &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 를 파생시키는 것 입니다. 우리는 또한 &lt;a href=&quot;../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt; 를 도출해야합니다 . 이것은 나중에 &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; 에&lt;/a&gt; 의해 암시 될 것입니다 .</target>
        </trans-unit>
        <trans-unit id="4abca09eae529f079207e693c4204e4240160458" translate="yes" xml:space="preserve">
          <source>The element range is removed even if the iterator is not consumed until the end.</source>
          <target state="translated">반복자가 끝까지 소비되지 않더라도 요소 범위는 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="17d488f8279ef9d0e051cac2f43dff0a68f18b2b" translate="yes" xml:space="preserve">
          <source>The elements are removed in arbitrary order.</source>
          <target state="translated">요소는 임의의 순서로 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="5fe5f813b6a2f233abc73bad03a94ec158695239" translate="yes" xml:space="preserve">
          <source>The elements at &lt;code&gt;old_len..new_len&lt;/code&gt; must be initialized.</source>
          <target state="translated">&lt;code&gt;old_len..new_len&lt;/code&gt; 의 요소를 초기화해야합니다.</target>
        </trans-unit>
        <trans-unit id="2bafc31dee9d33ba4d10ed67ef0f71ab38bfff69" translate="yes" xml:space="preserve">
          <source>The elements of an &lt;a href=&quot;types/array&quot;&gt;array&lt;/a&gt; or owned &lt;a href=&quot;types/array&quot;&gt;slice&lt;/a&gt; are dropped from the first element to the last. *</source>
          <target state="translated">의 소자 &lt;a href=&quot;types/array&quot;&gt;어레이&lt;/a&gt; 또는 소유 &lt;a href=&quot;types/array&quot;&gt;슬라이스&lt;/a&gt; 마지막으로 첫 번째 요소에서 제외된다. *</target>
        </trans-unit>
        <trans-unit id="88efd616f1a1b2e8d8f2dcc3a848a8c623471404" translate="yes" xml:space="preserve">
          <source>The elision rules don&amp;rsquo;t provide full inference. If Rust deterministically applies the rules but there is still ambiguity as to what lifetimes the references have, the compiler won&amp;rsquo;t guess what the lifetime of the remaining references should be. In this case, instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations that specify how the references relate to each other.</source>
          <target state="translated">소거 규칙은 완전한 추론을 제공하지 않습니다. Rust가 결정적으로 규칙을 적용하지만 참조의 수명에 대해 모호한 경우 컴파일러는 나머지 참조의 수명이 무엇인지 추측하지 않습니다. 이 경우 컴파일러는 추측하는 대신 참조가 서로 관련되는 방식을 지정하는 수명 주석을 추가하여 해결할 수있는 오류를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3e3b658969dac70797ae99e22406a5919df5b0c6" translate="yes" xml:space="preserve">
          <source>The entire expression uses the given values for the fields that were specified and moves or copies the remaining fields from the base expression. As with all struct expressions, all of the fields of the struct must be &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visible&lt;/a&gt;, even those not explicitly named.</source>
          <target state="translated">전체 표현식은 지정된 필드에 지정된 값을 사용하고 기본 표현식에서 나머지 필드를 이동하거나 복사합니다. 모든 구조체 표현식과 마찬가지로 구조체의 모든 필드를 &lt;a href=&quot;../visibility-and-privacy&quot;&gt;볼 수&lt;/a&gt; 있어야합니다 ( 명시 적으로 이름이 지정되지 않은 필드 도 포함).</target>
        </trans-unit>
        <trans-unit id="a0574dfce03935016b1e7370699d140878e68385" translate="yes" xml:space="preserve">
          <source>The entire file name if the file name begins with &lt;code&gt;.&lt;/code&gt; and has no other &lt;code&gt;.&lt;/code&gt;s within;</source>
          <target state="translated">파일 이름이로 시작하면 전체 파일 이름입니다 &lt;code&gt;.&lt;/code&gt; 그리고 다른 사람이 없습니다 &lt;code&gt;.&lt;/code&gt; 내;</target>
        </trans-unit>
        <trans-unit id="e83cf0228defdcd6e7afea0984d3278d36eab74c" translate="yes" xml:space="preserve">
          <source>The entire file name if there is no embedded &lt;code&gt;.&lt;/code&gt;;</source>
          <target state="translated">포함되지 않은 경우 전체 파일 이름 &lt;code&gt;.&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="9b8eedec31f30287b3b74ad1f2675a525e2c3cf5" translate="yes" xml:space="preserve">
          <source>The entire hash map is generic over a key type &lt;code&gt;K&lt;/code&gt;. Because these keys are stored with the hash map, this type has to own the key&amp;rsquo;s data. When inserting a key-value pair, the map is given such a &lt;code&gt;K&lt;/code&gt; and needs to find the correct hash bucket and check if the key is already present based on that &lt;code&gt;K&lt;/code&gt;. It therefore requires &lt;code&gt;K: Hash + Eq&lt;/code&gt;.</source>
          <target state="translated">전체 해시 맵은 키 유형 &lt;code&gt;K&lt;/code&gt; 에 일반적 입니다. 이러한 키는 해시 맵과 함께 저장되므로이 유형은 키의 데이터를 소유해야합니다. 키-값 쌍을 삽입 할 때 맵에 이러한 &lt;code&gt;K&lt;/code&gt; 가 지정 되고 올바른 해시 버킷을 찾아 해당 &lt;code&gt;K&lt;/code&gt; 를 기반으로 키가 이미 존재하는지 확인해야합니다 . 따라서 &lt;code&gt;K: Hash + Eq&lt;/code&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="82f98df6718e5a9d6fd411d1cc853597af7467ed" translate="yes" xml:space="preserve">
          <source>The error and the note tell the story: Rust strings don&amp;rsquo;t support indexing. But why not? To answer that question, we need to discuss how Rust stores strings in memory.</source>
          <target state="translated">오류와 메모는 스토리를 알려줍니다. 녹 문자열은 인덱싱을 지원하지 않습니다. 그런데 왜 안 되 겠어요? 이 질문에 답하기 위해 Rust가 어떻게 문자열을 메모리에 저장하는지 논의해야합니다.</target>
        </trans-unit>
        <trans-unit id="1decc58ff466451824639b9b2033b046dfa94fee" translate="yes" xml:space="preserve">
          <source>The error happens on numeric literals:</source>
          <target state="translated">숫자 리터럴에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="39121a17de405ba30c8238c549d55b70becaf449" translate="yes" xml:space="preserve">
          <source>The error indicates that Rust expected a &lt;code&gt;bool&lt;/code&gt; but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide &lt;code&gt;if&lt;/code&gt; with a Boolean as its condition. If we want the &lt;code&gt;if&lt;/code&gt; code block to run only when a number is not equal to &lt;code&gt;0&lt;/code&gt;, for example, we can change the &lt;code&gt;if&lt;/code&gt; expression to the following:</source>
          <target state="translated">이 오류는 Rust가 &lt;code&gt;bool&lt;/code&gt; 예상 했지만 정수를 얻었음을 나타냅니다 . Ruby 및 JavaScript와 같은 언어와 달리 Rust는 부울이 아닌 유형을 부울로 자동 변환하지 않습니다. 당신은 명시 적 항상 제공해야 &lt;code&gt;if&lt;/code&gt; 의 조건으로 부울로. 우리가 원하는 경우 &lt;code&gt;if&lt;/code&gt; 숫자가 같지 않은 경우에만 코드 블록을 실행할 &lt;code&gt;0&lt;/code&gt; , 예를 들어, 우리는 변경할 수 &lt;code&gt;if&lt;/code&gt; 다음 식을 :</target>
        </trans-unit>
        <trans-unit id="82fe814b563c83c1ad42c2a44464d60e45abeb59" translate="yes" xml:space="preserve">
          <source>The error message indicates that the cause of the error is that you &lt;code&gt;cannot assign twice to immutable variable x&lt;/code&gt;, because you tried to assign a second value to the immutable &lt;code&gt;x&lt;/code&gt; variable.</source>
          <target state="translated">오류 메시지는 오류의 원인은 당신이 있음을 나타냅니다 &lt;code&gt;cannot assign twice to immutable variable x&lt;/code&gt; 당신은 불변에 두 번째 값을 할당하려하기 때문에, &lt;code&gt;x&lt;/code&gt; 변수를.</target>
        </trans-unit>
        <trans-unit id="1acd99d552c691a91137d21fedf0cc394ac8a4d0" translate="yes" xml:space="preserve">
          <source>The error message states that the &lt;code&gt;counter&lt;/code&gt; value is moved into the closure and then captured when we call &lt;code&gt;lock&lt;/code&gt;. That description sounds like what we wanted, but it&amp;rsquo;s not allowed!</source>
          <target state="translated">오류 메시지는 &lt;code&gt;counter&lt;/code&gt; 값이 클로저로 이동 한 다음 &lt;code&gt;lock&lt;/code&gt; 을 호출 할 때 캡처 되었음을 나타냅니다 . 그 설명은 우리가 원하는 것 같지만 허용되지 않습니다!</target>
        </trans-unit>
        <trans-unit id="6326b5d7f5ddab487c6090e5e84a18d25a0a3db6" translate="yes" xml:space="preserve">
          <source>The error messages say that module &lt;code&gt;hosting&lt;/code&gt; is private. In other words, we have the correct paths for the &lt;code&gt;hosting&lt;/code&gt; module and the &lt;code&gt;add_to_waitlist&lt;/code&gt; function, but Rust won&amp;rsquo;t let us use them because it doesn&amp;rsquo;t have access to the private sections.</source>
          <target state="translated">오류 메시지는 모듈 &lt;code&gt;hosting&lt;/code&gt; 이 비공개라는 것을 나타냅니다. 다시 말해, &lt;code&gt;hosting&lt;/code&gt; 모듈과 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수에 대한 올바른 경로가 있지만 Rust는 개인 섹션에 액세스 할 수 없으므로 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5bce45a967fbcca42003bd3fc6c351711632526a" translate="yes" xml:space="preserve">
          <source>The error references the &lt;code&gt;Sized&lt;/code&gt; trait again! Rust doesn&amp;rsquo;t know how much space it will need to store the closure. We saw a solution to this problem earlier. We can use a trait object:</source>
          <target state="translated">오류는 &lt;code&gt;Sized&lt;/code&gt; 특성을 다시 참조 합니다! 녹은 클로저를 보관할 공간이 얼마나되는지 모릅니다. 우리는이 문제에 대한 해결책을 일찍 보았습니다. 특성 오브젝트를 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="687172b839a6f9ace430c7922b4119fecbbc273c" translate="yes" xml:space="preserve">
          <source>The error says we&amp;rsquo;re not allowed to mutate a variable&amp;rsquo;s type:</source>
          <target state="translated">오류는 변수 유형을 변경할 수 없다고 말합니다.</target>
        </trans-unit>
        <trans-unit id="4c799801c95c3499262c7f795808c56dd04d3f03" translate="yes" xml:space="preserve">
          <source>The error shows that for &lt;code&gt;result&lt;/code&gt; to be valid for the &lt;code&gt;println!&lt;/code&gt; statement, &lt;code&gt;string2&lt;/code&gt; would need to be valid until the end of the outer scope. Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter &lt;code&gt;'a&lt;/code&gt;.</source>
          <target state="translated">오류는 &lt;code&gt;result&lt;/code&gt; 가 &lt;code&gt;println!&lt;/code&gt; 유효 함을 나타냅니다 ! statement, &lt;code&gt;string2&lt;/code&gt; 는 외부 범위가 끝날 때까지 유효해야합니다. Rust는 함수 매개 변수의 수명에 주석을 달고 동일한 수명 매개 변수 &lt;code&gt;'a&lt;/code&gt; 를 사용하여 값을 반환하기 때문에 이것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="81dd6345e63f7b9b970ec324dc927c2a78ce87e8" translate="yes" xml:space="preserve">
          <source>The error shows that you can&amp;rsquo;t use the keyword &lt;code&gt;match&lt;/code&gt; as the function identifier. To use &lt;code&gt;match&lt;/code&gt; as a function name, you need to use the raw identifier syntax, like this:</source>
          <target state="translated">오류는 키워드 &lt;code&gt;match&lt;/code&gt; 을 기능 식별자로 사용할 수 없음을 나타냅니다 . &lt;code&gt;match&lt;/code&gt; 를 함수 이름으로 사용하려면 다음 과 같이 원시 식별자 구문을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="17031b6288809d4b66c77a71348fe05200b2e1e5" translate="yes" xml:space="preserve">
          <source>The error shows this type &amp;ldquo;has infinite size.&amp;rdquo; The reason is that we&amp;rsquo;ve defined &lt;code&gt;List&lt;/code&gt; with a variant that is recursive: it holds another value of itself directly. As a result, Rust can&amp;rsquo;t figure out how much space it needs to store a &lt;code&gt;List&lt;/code&gt; value. Let&amp;rsquo;s break down why we get this error a bit. First, let&amp;rsquo;s look at how Rust decides how much space it needs to store a value of a non-recursive type.</source>
          <target state="translated">오류는이 유형이 &quot;무한 크기&quot;임을 나타냅니다. 그 이유는 우리 가 재귀적인 변형을 사용하여 &lt;code&gt;List&lt;/code&gt; 를 정의했기 때문입니다 . 결과적으로 Rust는 &lt;code&gt;List&lt;/code&gt; 값 을 저장하는 데 필요한 공간을 파악할 수 없습니다 . 이 오류가 발생하는 이유를 자세히 살펴 보겠습니다. 먼저 Rust가 비 재귀 유형의 값을 저장하는 데 필요한 공간의 양을 결정하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="ddd69ec9cc85fcc63997c43bed364cf16ee6b3f9" translate="yes" xml:space="preserve">
          <source>The error tells us we can&amp;rsquo;t call &lt;code&gt;join&lt;/code&gt; because we only have a mutable borrow of each &lt;code&gt;worker&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; takes ownership of its argument. To solve this issue, we need to move the thread out of the &lt;code&gt;Worker&lt;/code&gt; instance that owns &lt;code&gt;thread&lt;/code&gt; so &lt;code&gt;join&lt;/code&gt; can consume the thread. We did this in Listing 17-15: if &lt;code&gt;Worker&lt;/code&gt; holds an &lt;code&gt;Option&amp;lt;thread::JoinHandle&amp;lt;()&amp;gt;&amp;gt;&lt;/code&gt; instead, we can call the &lt;code&gt;take&lt;/code&gt; method on the &lt;code&gt;Option&lt;/code&gt; to move the value out of the &lt;code&gt;Some&lt;/code&gt; variant and leave a &lt;code&gt;None&lt;/code&gt; variant in its place. In other words, a &lt;code&gt;Worker&lt;/code&gt; that is running will have a &lt;code&gt;Some&lt;/code&gt; variant in &lt;code&gt;thread&lt;/code&gt;, and when we want to clean up a &lt;code&gt;Worker&lt;/code&gt;, we&amp;rsquo;ll replace &lt;code&gt;Some&lt;/code&gt; with &lt;code&gt;None&lt;/code&gt; so the &lt;code&gt;Worker&lt;/code&gt; doesn&amp;rsquo;t have a thread to run.</source>
          <target state="translated">이 오류는 각 &lt;code&gt;worker&lt;/code&gt; 의 변경 가능한 차용 만 있고 &lt;code&gt;join&lt;/code&gt; 은 인수에 대한 소유권을 가지기 때문에 &lt;code&gt;join&lt;/code&gt; 호출 할 수 없음을 나타 냅니다. 이 문제를 해결하기 위해, 우리는의 스레드를 이동해야하는 &lt;code&gt;Worker&lt;/code&gt; 소유 예를 &lt;code&gt;thread&lt;/code&gt; 너무 &lt;code&gt;join&lt;/code&gt; 스레드를 소비 할 수 있습니다. 우리는 목록 17-15에서 이런 짓을 : 경우 &lt;code&gt;Worker&lt;/code&gt; 보유 &lt;code&gt;Option&amp;lt;thread::JoinHandle&amp;lt;()&amp;gt;&amp;gt;&lt;/code&gt; 대신에, 우리는 호출 할 수 있습니다 &lt;code&gt;take&lt;/code&gt; 온 방법 &lt;code&gt;Option&lt;/code&gt; 의 값을 이동하는 &lt;code&gt;Some&lt;/code&gt; 변형하고 떠나 &lt;code&gt;None&lt;/code&gt; 에 변형을 그 장소. 다시 말해, &lt;code&gt;Worker&lt;/code&gt; 실행중인 &lt;code&gt;thread&lt;/code&gt; 에는 &lt;code&gt;Some&lt;/code&gt; 변형이 있으며 &lt;code&gt;Worker&lt;/code&gt; 를 정리 하려면 &lt;code&gt;Worker&lt;/code&gt; 에 실행할 스레드가 없도록 &lt;code&gt;Some&lt;/code&gt; 을 &lt;code&gt;None&lt;/code&gt; 으로 대체 합니다.</target>
        </trans-unit>
        <trans-unit id="458fb320b83d2d5563146d6c64a5e9086c1cdbe5" translate="yes" xml:space="preserve">
          <source>The error type for I/O operations of the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.seek&quot;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt;, and associated traits.</source>
          <target state="translated">&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;trait.seek&quot;&gt; &lt;code&gt;Seek&lt;/code&gt; &lt;/a&gt; 및 관련 특성의 I / O 작업에 대한 오류 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="3e8c3a7432541c640c48492379ea610ecb40f6ae" translate="yes" xml:space="preserve">
          <source>The error type for errors that can never happen.</source>
          <target state="translated">절대 발생할 수없는 오류의 오류 유형입니다.</target>
        </trans-unit>
        <trans-unit id="751842d7baf0779231030e01a15db69a4f03c6bc" translate="yes" xml:space="preserve">
          <source>The error type for operations interacting with environment variables. Possibly returned from the &lt;a href=&quot;fn.var&quot;&gt;&lt;code&gt;env::var&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">환경 변수와 상호 작용하는 작업의 오류 유형입니다. &lt;a href=&quot;fn.var&quot;&gt; &lt;code&gt;env::var&lt;/code&gt; &lt;/a&gt; 함수 에서 반환되었을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04e8342895bd312f045a40780238aabb9ef5de36" translate="yes" xml:space="preserve">
          <source>The error type for operations on the &lt;code&gt;PATH&lt;/code&gt; variable. Possibly returned from the &lt;a href=&quot;fn.join_paths&quot;&gt;&lt;code&gt;env::join_paths&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; 변수 조작에 대한 오류 유형 . &lt;a href=&quot;fn.join_paths&quot;&gt; &lt;code&gt;env::join_paths&lt;/code&gt; &lt;/a&gt; 함수 에서 반환 되었을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92c7e92ce900890826a3bdc04f0bdb6f93a2ae4e" translate="yes" xml:space="preserve">
          <source>The error type returned when a checked integral type conversion fails.</source>
          <target state="translated">확인 된 정수 유형 변환에 실패하면 오류 유형이 리턴되었습니다.</target>
        </trans-unit>
        <trans-unit id="7c03030b0922657a2b23ad871594bf872bfa86e8" translate="yes" xml:space="preserve">
          <source>The error type returned when a conversion from a slice to an array fails.</source>
          <target state="translated">슬라이스에서 배열로의 변환에 실패하면 오류 유형이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5bd755e234651b9d8db0dad82d899820eb73c1c6" translate="yes" xml:space="preserve">
          <source>The error type returned when a conversion from u32 to char fails.</source>
          <target state="translated">u32에서 char 로의 변환이 실패하면 오류 유형이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="74bd671788812266d70e1e6379cd71d68b83bdd8" translate="yes" xml:space="preserve">
          <source>The error type that results from applying the try operator (&lt;code&gt;?&lt;/code&gt;) to a &lt;code&gt;None&lt;/code&gt; value. If you wish to allow &lt;code&gt;x?&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;) to be converted into your error type, you can implement &lt;code&gt;impl From&amp;lt;NoneError&amp;gt;&lt;/code&gt; for &lt;code&gt;YourErrorType&lt;/code&gt;. In that case, &lt;code&gt;x?&lt;/code&gt; within a function that returns &lt;code&gt;Result&amp;lt;_, YourErrorType&amp;gt;&lt;/code&gt; will translate a &lt;code&gt;None&lt;/code&gt; value into an &lt;code&gt;Err&lt;/code&gt; result.</source>
          <target state="translated">try 연산자 ( &lt;code&gt;?&lt;/code&gt; )를 &lt;code&gt;None&lt;/code&gt; 값에 적용한 결과 오류 유형입니다 . &lt;code&gt;x?&lt;/code&gt; 를 허용하려면 ? (여기서 &lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; ) 오류 유형으로 변환되어 &lt;code&gt;impl From&amp;lt;NoneError&amp;gt;&lt;/code&gt; 대해 impl From &amp;lt;NoneError&amp;gt; 을 &lt;code&gt;YourErrorType&lt;/code&gt; 있습니다. 이 경우 &lt;code&gt;x?&lt;/code&gt; &lt;code&gt;Result&amp;lt;_, YourErrorType&amp;gt;&lt;/code&gt; 를 반환하는 함수 내 에서 YourErrorType&amp;gt; 은 &lt;code&gt;None&lt;/code&gt; 값을 &lt;code&gt;Err&lt;/code&gt; 결과 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="620e9e66f647e7af133c1492023ad78f941762d1" translate="yes" xml:space="preserve">
          <source>The error type which is returned from formatting a message into a stream.</source>
          <target state="translated">메시지 형식화에서 스트림으로 리턴되는 오류 유형입니다.</target>
        </trans-unit>
        <trans-unit id="d4672a685f085da2d7d7f62486ff4649fbce70a5" translate="yes" xml:space="preserve">
          <source>The errors in Listing 7-6 say that the &lt;code&gt;add_to_waitlist&lt;/code&gt; function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.</source>
          <target state="translated">목록 7-6의 오류는 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수가 전용 이라는 것을 나타 냅니다 . 개인 정보 보호 규칙은 모듈뿐만 아니라 구조체, 열거 형, 함수 및 방법에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="5c9b02894ffaf56c3eee190bd9f4d3e5a18ff962" translate="yes" xml:space="preserve">
          <source>The exact behavior on locking a mutex in the thread which already holds the lock is left unspecified. However, this function will not return on the second call (it might panic or deadlock, for example).</source>
          <target state="translated">이미 잠금을 보유하고있는 스레드에서 뮤텍스를 잠그는 정확한 동작은 지정되지 않은 채로 있습니다. 그러나이 함수는 두 번째 호출에서 반환되지 않습니다 (예 : 패닉 또는 교착 상태 일 수 있음).</target>
        </trans-unit>
        <trans-unit id="ec573024d9a369fea8772d4967a09d1e972fae0a" translate="yes" xml:space="preserve">
          <source>The exact character(s)</source>
          <target state="translated">정확한 캐릭터</target>
        </trans-unit>
        <trans-unit id="df2f57248767dbedd045941faa73ddbe53944b27" translate="yes" xml:space="preserve">
          <source>The exact order may be useful for tracking external state, like an index.</source>
          <target state="translated">정확한 순서는 색인과 같은 외부 상태를 추적하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fe495e6414bd43e7bea5f0003cca50741a5b59b" translate="yes" xml:space="preserve">
          <source>The exact output printed by this macro should not be relied upon and is subject to future changes.</source>
          <target state="translated">이 매크로에 의해 인쇄 된 정확한 출력은 신뢰할 수 없으며 향후 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="469498f0144088c9a82cccca15de67704811a8dd" translate="yes" xml:space="preserve">
          <source>The exact text, of course, depends on what files you have in &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">정확한 텍스트는 물론 어떤 파일에 있는지에 따라 다릅니다 &lt;code&gt;.&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="395c851d3758c4daf594b9f6b458c5ca4cd7434f" translate="yes" xml:space="preserve">
          <source>The example in Listing 13-14 separates the creation of the iterator from the use of the iterator in the &lt;code&gt;for&lt;/code&gt; loop. The iterator is stored in the &lt;code&gt;v1_iter&lt;/code&gt; variable, and no iteration takes place at that time. When the &lt;code&gt;for&lt;/code&gt; loop is called using the iterator in &lt;code&gt;v1_iter&lt;/code&gt;, each element in the iterator is used in one iteration of the loop, which prints out each value.</source>
          <target state="translated">Listing 13-14의 예제는 반복자 작성을 &lt;code&gt;for&lt;/code&gt; 루프 에서 반복자 사용과 분리합니다 . 반복자는 &lt;code&gt;v1_iter&lt;/code&gt; 변수에 저장되며 그 시점 에는 반복이 수행되지 않습니다. 경우 &lt;code&gt;for&lt;/code&gt; 루프의 반복기 사용이라고 &lt;code&gt;v1_iter&lt;/code&gt; 을 , 반복기의 각 요소는 각각의 프린트 아웃 값 루프의 일 반복에서 사용된다.</target>
        </trans-unit>
        <trans-unit id="e88d69a7ee7e1056409be12e179c7703287290b1" translate="yes" xml:space="preserve">
          <source>The exception to this idiom is if we&amp;rsquo;re bringing two items with the same name into scope with &lt;code&gt;use&lt;/code&gt; statements, because Rust doesn&amp;rsquo;t allow that. Listing 7-15 shows how to bring two &lt;code&gt;Result&lt;/code&gt; types into scope that have the same name but different parent modules and how to refer to them.</source>
          <target state="translated">이 관용구의 예외는 Rust가 허용하지 않기 때문에 이름이 같은 두 항목을 &lt;code&gt;use&lt;/code&gt; 문 으로 범위에 넣는 경우 입니다. 목록 7-15는 이름은 같지만 상위 모듈이 다른 두 가지 &lt;code&gt;Result&lt;/code&gt; 유형을 범위 로 가져 오는 방법과이를 참조하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f9ff06ceaf161b4f26d0944c142b9739231935eb" translate="yes" xml:space="preserve">
          <source>The exception to this is the unit tuple (&lt;code&gt;()&lt;/code&gt;) which is guaranteed as a zero-sized type to have a size of 0 and an alignment of 1.</source>
          <target state="translated">단 , 크기가 0이고 정렬이 1 인 크기가 0 인 단위 튜플 ( &lt;code&gt;()&lt;/code&gt; ) 은 예외 입니다.</target>
        </trans-unit>
        <trans-unit id="3dc57cf649d183700b8e68c720c692cad27e1162" translate="yes" xml:space="preserve">
          <source>The expanded expression has type &lt;code&gt;&amp;amp;'static str&lt;/code&gt;, and the returned file is not the invocation of the &lt;code&gt;file!&lt;/code&gt; macro itself, but rather the first macro invocation leading up to the invocation of the &lt;code&gt;file!&lt;/code&gt; macro.</source>
          <target state="translated">확장 된 표현식의 유형은 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; 이며 리턴 된 파일은 파일의 호출이 아닙니다 &lt;code&gt;file!&lt;/code&gt; 매크로 자체가 아니라 &lt;code&gt;file!&lt;/code&gt; 의 호출로 이어지는 첫 번째 매크로 호출 ! 매크로.</target>
        </trans-unit>
        <trans-unit id="2027bedff965dc7817b0dd952d1fc211920c5f6d" translate="yes" xml:space="preserve">
          <source>The expanded expression has type &lt;code&gt;u32&lt;/code&gt; and is 1-based, so the first column in each line evaluates to 1, the second to 2, etc. This is consistent with error messages by common compilers or popular editors. The returned column is &lt;em&gt;not necessarily&lt;/em&gt; the line of the &lt;code&gt;column!&lt;/code&gt; invocation itself, but rather the first macro invocation leading up to the invocation of the &lt;code&gt;column!&lt;/code&gt; macro.</source>
          <target state="translated">확장 된 표현식의 유형은 &lt;code&gt;u32&lt;/code&gt; 이며 1부터 시작하므로 각 행의 첫 번째 열은 1, 두 번째에서 2 등으로 평가됩니다. 이는 일반적인 컴파일러 또는 널리 사용되는 편집기의 오류 메시지와 일치합니다. 반환 된 열은 &lt;em&gt;필요하지&lt;/em&gt; 의 라인 &lt;code&gt;column!&lt;/code&gt; 호출 자체가 아니라 &lt;code&gt;column!&lt;/code&gt; 호출로 이어지는 첫 번째 매크로 호출 ! 매크로.</target>
        </trans-unit>
        <trans-unit id="b0b06f58ec99c372d86a17a34c7166fa5de08c27" translate="yes" xml:space="preserve">
          <source>The expanded expression has type &lt;code&gt;u32&lt;/code&gt; and is 1-based, so the first line in each file evaluates to 1, the second to 2, etc. This is consistent with error messages by common compilers or popular editors. The returned line is &lt;em&gt;not necessarily&lt;/em&gt; the line of the &lt;code&gt;line!&lt;/code&gt; invocation itself, but rather the first macro invocation leading up to the invocation of the &lt;code&gt;line!&lt;/code&gt; macro.</source>
          <target state="translated">확장 된 표현식은 &lt;code&gt;u32&lt;/code&gt; 유형 이며 1 기반이므로 각 파일의 첫 번째 줄은 1, 두 번째에서 2 등으로 평가됩니다. 이는 일반적인 컴파일러 또는 일반적인 편집기의 오류 메시지와 일치합니다. 리턴 된 라인이 &lt;em&gt;반드시&lt;/em&gt; 라인의 라인은 &lt;em&gt;아닙니다 &lt;/em&gt; &lt;code&gt;line!&lt;/code&gt; 호출 자체가 아니라 &lt;code&gt;line!&lt;/code&gt; 의 호출로 이어지는 첫 번째 매크로 호출 ! 매크로.</target>
        </trans-unit>
        <trans-unit id="606b0f6565bb5e33a7e793c7978e5b02d8b8d28b" translate="yes" xml:space="preserve">
          <source>The expected cost of &lt;code&gt;push&lt;/code&gt;, averaged over every possible ordering of the elements being pushed, and over a sufficiently large number of pushes, is O(1). This is the most meaningful cost metric when pushing elements that are &lt;em&gt;not&lt;/em&gt; already in any sorted pattern.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 되는 요소의 가능한 모든 순서와 평균적으로 충분히 많은 푸시에 대해 예상되는 푸시 비용 은 O (1)입니다. 이것은 정렬 된 패턴 이 &lt;em&gt;아닌&lt;/em&gt; 요소를 푸시 할 때 가장 의미있는 비용 메트릭 입니다.</target>
        </trans-unit>
        <trans-unit id="a72ec7eef34f0a8ffd7d99e9cfce2da0536188e2" translate="yes" xml:space="preserve">
          <source>The expression above creates a value of type &lt;code&gt;MyUnion&lt;/code&gt; and initializes the storage using field &lt;code&gt;f1&lt;/code&gt;. The union can be accessed using the same syntax as struct fields:</source>
          <target state="translated">위의 표현식은 &lt;code&gt;MyUnion&lt;/code&gt; 유형의 값을 작성하고 필드 &lt;code&gt;f1&lt;/code&gt; 을 사용하여 스토리지를 초기화합니다 . 구조체 필드와 동일한 구문을 사용하여 공용체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5fa765f11cc060019641c8e75e38c695bdb1bda" translate="yes" xml:space="preserve">
          <source>The expression cannot be a &lt;a href=&quot;operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean operator expression&lt;/a&gt;. Use of a lazy boolean operator is ambiguous with a planned feature change of the language (the implementation of if-let chains - see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018&quot;&gt;eRFC 2947&lt;/a&gt;). When lazy boolean operator expression is desired, this can be achieved by using parenthesis as below:</source>
          <target state="translated">표현식은 &lt;a href=&quot;operator-expr#lazy-boolean-operators&quot;&gt;지연 부울 연산자&lt;/a&gt; 표현식 일 수 없습니다 . 언어의 계획된 기능 변경으로 게으른 부울 연산자의 사용이 모호합니다 (if-let chain 구현 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018&quot;&gt;-eRFC 2947&lt;/a&gt; 참조 ). 게으른 부울 연산자 표현식이 필요한 경우 다음과 같이 괄호를 사용하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64c3c13114c938924165b32b931fcfa0929a3dad" translate="yes" xml:space="preserve">
          <source>The expression in the &lt;code&gt;if&lt;/code&gt; block evaluates to an integer, and the expression in the &lt;code&gt;else&lt;/code&gt; block evaluates to a string. This won&amp;rsquo;t work because variables must have a single type. Rust needs to know at compile time what type the &lt;code&gt;number&lt;/code&gt; variable is, definitively, so it can verify at compile time that its type is valid everywhere we use &lt;code&gt;number&lt;/code&gt;. Rust wouldn&amp;rsquo;t be able to do that if the type of &lt;code&gt;number&lt;/code&gt; was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 블록 의 표현식 은 정수로 평가되고 &lt;code&gt;else&lt;/code&gt; 블록 의 표현식 은 문자열로 평가됩니다. 변수는 단일 유형을 가져야하므로 작동하지 않습니다. Rust는 컴파일 할 때 &lt;code&gt;number&lt;/code&gt; 변수가 어떤 유형인지 확실 하게 알 필요가 있으므로 컴파일 타임에 해당 유형이 &lt;code&gt;number&lt;/code&gt; 를 사용하는 모든 곳에서 유효한지 확인할 수 있습니다. &lt;code&gt;number&lt;/code&gt; 유형이 런타임에만 결정된 경우 Rust는이를 수행 할 수 없습니다 . 컴파일러는 더 복잡하고 변수에 대해 여러 가지 가상 유형을 추적해야하는 경우 코드에 대한 보증을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="7947155b0fa5fdbbf2d84b0fb9bff1298adf4bf1" translate="yes" xml:space="preserve">
          <source>The extension is:</source>
          <target state="translated">확장명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ea39e7727f6084ef5165d4f9b888542528c3cc1d" translate="yes" xml:space="preserve">
          <source>The external crate is resolved to a specific &lt;code&gt;soname&lt;/code&gt; at compile time, and a runtime linkage requirement to that &lt;code&gt;soname&lt;/code&gt; is passed to the linker for loading at runtime. The &lt;code&gt;soname&lt;/code&gt; is resolved at compile time by scanning the compiler's library path and matching the optional &lt;code&gt;crateid&lt;/code&gt; provided against the &lt;code&gt;crateid&lt;/code&gt; attributes that were declared on the external crate when it was compiled. If no &lt;code&gt;crateid&lt;/code&gt; is provided, a default &lt;code&gt;name&lt;/code&gt; attribute is assumed, equal to the &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt; given in the &lt;code&gt;extern crate&lt;/code&gt; declaration.</source>
          <target state="translated">외부 상자는 특정의에 해결 &lt;code&gt;soname&lt;/code&gt; 컴파일시에, 그에게 런타임 연결 요구 &lt;code&gt;soname&lt;/code&gt; 실행시 로딩을위한 링커에 전달됩니다. &lt;code&gt;soname&lt;/code&gt; 컴파일러의 라이브러리 경로를 검색하고 선택 일치시켜 컴파일 시간에 해결 &lt;code&gt;crateid&lt;/code&gt; 에 제공 &lt;code&gt;crateid&lt;/code&gt; 의 이 컴파일 될 때 외부 상자에 선언 된 속성을. &lt;code&gt;crateid&lt;/code&gt; 가 제공 되지 않으면 &lt;code&gt;extern crate&lt;/code&gt; 선언에 제공된 &lt;a href=&quot;../identifiers&quot;&gt;식별자&lt;/a&gt; 와 동일한 기본 &lt;code&gt;name&lt;/code&gt; 속성이 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="2d4ff9b9a673e6ef5c73fd0d74de95c1584abb9d" translate="yes" xml:space="preserve">
          <source>The failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string &lt;code&gt;'Guess value must be less than or equal to 100'&lt;/code&gt;. The panic message that we did get in this case was &lt;code&gt;Guess value must be greater than or equal to 1, got 200.&lt;/code&gt; Now we can start figuring out where our bug is!</source>
          <target state="translated">실패 메시지는이 테스트가 예상대로 공황 상태에 빠졌지 만, 공황 메시지에 예상 문자열 &lt;code&gt;'Guess value must be less than or equal to 100'&lt;/code&gt; 이 포함되지 않았 음을 나타냅니다 . 우리가이 경우에 얻은 패닉 메시지는 &lt;code&gt;Guess value must be greater than or equal to 1, got 200.&lt;/code&gt; 이제 버그가 어디에 있는지 알아낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1264d4255ef5d1877747639a91dce97d95706422" translate="yes" xml:space="preserve">
          <source>The family of the operating system. Example value is &lt;code&gt;unix&lt;/code&gt;.</source>
          <target state="translated">운영 체제 제품군. 예제 값은 &lt;code&gt;unix&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1f19a750b2fcc57343d113fae5c2d35cbbeabd61" translate="yes" xml:space="preserve">
          <source>The field names can be decimal integer values to specify indices for constructing tuple structs. This can be used with base structs to fill out the remaining indices not specified:</source>
          <target state="translated">필드 이름은 튜플 구조체를 구성하기위한 인덱스를 지정하는 10 진 정수 값일 수 있습니다. 이것은 지정되지 않은 나머지 인덱스를 채우기 위해 기본 구조체와 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1e05fef4f32d53e63c8251d9d852a226e0b9d94" translate="yes" xml:space="preserve">
          <source>The fields of a &lt;a href=&quot;types/struct&quot;&gt;struct&lt;/a&gt;, &lt;a href=&quot;types/tuple&quot;&gt;tuple&lt;/a&gt; or &lt;a href=&quot;types/enum&quot;&gt;enum variant&lt;/a&gt; are dropped in declaration order. *</source>
          <target state="translated">&lt;a href=&quot;types/struct&quot;&gt;struct&lt;/a&gt; , &lt;a href=&quot;types/tuple&quot;&gt;tuple&lt;/a&gt; 또는 &lt;a href=&quot;types/enum&quot;&gt;enum 변형&lt;/a&gt; 의 필드는 선언 순서대로 삭제됩니다. *</target>
        </trans-unit>
        <trans-unit id="985befbf65bb726fbdc7e8fa5788956f4d2e4bf1" translate="yes" xml:space="preserve">
          <source>The fields of a &lt;code&gt;struct&lt;/code&gt; may be qualified by &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visibility modifiers&lt;/a&gt;, to allow access to data in a struct outside a module.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 의 필드는 &lt;a href=&quot;../visibility-and-privacy&quot;&gt;가시성 수정 자에&lt;/a&gt; 의해 규정되어 모듈 외부의 구조체에있는 데이터에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40ccc036f7a6ce305846dd9b315fdf1f96b15a3b" translate="yes" xml:space="preserve">
          <source>The fields of this struct show that the Rust code we&amp;rsquo;ve parsed is a unit struct with the &lt;code&gt;ident&lt;/code&gt; (identifier, meaning the name) of &lt;code&gt;Pancakes&lt;/code&gt;. There are more fields on this struct for describing all sorts of Rust code; check the &lt;a href=&quot;https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html&quot;&gt;&lt;code&gt;syn&lt;/code&gt; documentation for &lt;code&gt;DeriveInput&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">이 구조체의 필드는 우리가 파싱 한 Rust 코드가 &lt;code&gt;Pancakes&lt;/code&gt; 의 &lt;code&gt;ident&lt;/code&gt; (이름을 의미하는 식별자)를 가진 단위 구조체임을 보여줍니다 . 이 구조체에는 모든 종류의 Rust 코드를 설명하기위한 더 많은 필드가 있습니다. 자세한 내용 &lt;a href=&quot;https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html&quot;&gt;은 &lt;/a&gt; &lt;code&gt;DeriveInput&lt;/code&gt; 에 대한 &lt;code&gt;syn&lt;/code&gt; 설명서를 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="c618b2bfdd921c07e86f2a30b8c3ccd4f98ae789" translate="yes" xml:space="preserve">
          <source>The file is located relative to the current file (similarly to how modules are found).</source>
          <target state="translated">파일은 현재 파일을 기준으로 위치합니다 (모듈을 찾는 방법과 유사).</target>
        </trans-unit>
        <trans-unit id="a1df7519bc8cdda06f6336bd152ecc0e5b1b6c7c" translate="yes" xml:space="preserve">
          <source>The file is located relative to the current file. (similarly to how modules are found)</source>
          <target state="translated">파일은 현재 파일을 기준으로 위치합니다. (모듈을 찾는 방법과 유사)</target>
        </trans-unit>
        <trans-unit id="d6c5af6a5c60f4fa56d05a0fa81955ff57e694aa" translate="yes" xml:space="preserve">
          <source>The file must be opened with write access for truncate to work.</source>
          <target state="translated">자르기가 작동하려면 쓰기 액세스 권한으로 파일을 열어야합니다.</target>
        </trans-unit>
        <trans-unit id="b64dc47988604588017060c77446efa88568cbbc" translate="yes" xml:space="preserve">
          <source>The file must be opened with write or append access in order to create a new file.</source>
          <target state="translated">새 파일을 작성하려면 쓰기 또는 추가 액세스 권한으로 파일을 열어야합니다.</target>
        </trans-unit>
        <trans-unit id="55a4d79c2d543091872b4da347b5d4b201da5902" translate="yes" xml:space="preserve">
          <source>The file's cursor isn't changed. In particular, if the cursor was at the end and the file is shrunk using this operation, the cursor will now be past the end.</source>
          <target state="translated">파일의 커서는 변경되지 않습니다. 특히, 커서가 끝났고이 조작을 사용하여 파일이 축소 된 경우 커서는 이제 끝을지나갑니다.</target>
        </trans-unit>
        <trans-unit id="6c8ba754d920c70b815c96a59ae89e2ab19e9615" translate="yes" xml:space="preserve">
          <source>The fill character is provided normally in conjunction with the &lt;a href=&quot;#width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; parameter. This indicates that if the value being formatted is smaller than &lt;code&gt;width&lt;/code&gt; some extra characters will be printed around it. The extra characters are specified by &lt;code&gt;fill&lt;/code&gt;, and the alignment can be one of the following options:</source>
          <target state="translated">채우기 문자는 일반적으로 &lt;a href=&quot;#width&quot;&gt; &lt;code&gt;width&lt;/code&gt; &lt;/a&gt; 매개 변수 와 함께 제공됩니다 . 이는 형식화되는 값이 &lt;code&gt;width&lt;/code&gt; 보다 작 으면 추가 문자가 그 주위에 인쇄 됨을 나타냅니다 . 추가 문자는 &lt;code&gt;fill&lt;/code&gt; 로 지정되며 정렬은 다음 옵션 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93dbdf12316da4d04bf621e9eb356e67a9dd2780" translate="yes" xml:space="preserve">
          <source>The final action that works only with &lt;code&gt;unsafe&lt;/code&gt; is implementing an unsafe trait. A trait is unsafe when at least one of its methods has some invariant that the compiler can&amp;rsquo;t verify. We can declare that a trait is &lt;code&gt;unsafe&lt;/code&gt; by adding the &lt;code&gt;unsafe&lt;/code&gt; keyword before &lt;code&gt;trait&lt;/code&gt; and marking the implementation of the trait as &lt;code&gt;unsafe&lt;/code&gt; too, as shown in Listing 19-11.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; 경우에만 작동하는 마지막 조치 는 안전하지 않은 특성을 구현하는 것입니다. 특성 중 적어도 하나의 메소드에 컴파일러가 확인할 수없는 일부 불변이있는 경우 특성이 안전하지 않습니다. 우리는 특성이 있음을 선언 할 수 있습니다 &lt;code&gt;unsafe&lt;/code&gt; 가산하여 &lt;code&gt;unsafe&lt;/code&gt; 전에 키워드 &lt;code&gt;trait&lt;/code&gt; 과 같은 특성의 구현 마킹 &lt;code&gt;unsafe&lt;/code&gt; 목록 19-11에서와 같이,도.</target>
        </trans-unit>
        <trans-unit id="5d305704a4fbc5372e6355348bdb324639855c0b" translate="yes" xml:space="preserve">
          <source>The final line ending is optional.</source>
          <target state="translated">마지막 줄 끝은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="d405e4ac4031d3643938bc829210c93b1a171c2a" translate="yes" xml:space="preserve">
          <source>The final line ending isn't required:</source>
          <target state="translated">마지막 줄 끝은 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c5271e27e91796af655967c8ffbfa429a17a75cb" translate="yes" xml:space="preserve">
          <source>The final result could be determined just by looking at the code at compile time, so &lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;constant folding&lt;/a&gt; might turn the whole block into a simple &lt;code&gt;println!(&quot;7 4 4&quot;)&lt;/code&gt;.</source>
          <target state="translated">최종 결과는 컴파일 타임에 코드를 확인하는 것만으로 결정될 수 있으므로, &lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;일정한 폴딩&lt;/a&gt; 은 전체 블록을 간단한 &lt;code&gt;println!(&quot;7 4 4&quot;)&lt;/code&gt; 로 바꿀 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e59d9d4ed7f661f21e1daf6cf7e1143fd8d7bfa" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;Cons&lt;/code&gt; value holds &lt;code&gt;1&lt;/code&gt; and another &lt;code&gt;List&lt;/code&gt; value. This &lt;code&gt;List&lt;/code&gt; value is another &lt;code&gt;Cons&lt;/code&gt; value that holds &lt;code&gt;2&lt;/code&gt; and another &lt;code&gt;List&lt;/code&gt; value. This &lt;code&gt;List&lt;/code&gt; value is one more &lt;code&gt;Cons&lt;/code&gt; value that holds &lt;code&gt;3&lt;/code&gt; and a &lt;code&gt;List&lt;/code&gt; value, which is finally &lt;code&gt;Nil&lt;/code&gt;, the non-recursive variant that signals the end of the list.</source>
          <target state="translated">첫 번째 &lt;code&gt;Cons&lt;/code&gt; 값에는 &lt;code&gt;1&lt;/code&gt; 과 다른 &lt;code&gt;List&lt;/code&gt; 값이 있습니다. 이 &lt;code&gt;List&lt;/code&gt; 값은 &lt;code&gt;2&lt;/code&gt; 와 다른 &lt;code&gt;List&lt;/code&gt; 값 을 보유하는 또 다른 &lt;code&gt;Cons&lt;/code&gt; 값입니다 . 이 &lt;code&gt;List&lt;/code&gt; 값은 &lt;code&gt;3&lt;/code&gt; 을 보유하는 하나 이상의 &lt;code&gt;Cons&lt;/code&gt; 값 과 &lt;code&gt;List&lt;/code&gt; 값으로, 목록 의 끝을 알리는 비 재귀 변형 인 &lt;code&gt;Nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b2f6ee38297963ecf451ec169c5ecff0bb88450f" translate="yes" xml:space="preserve">
          <source>The first argument &lt;code&gt;format!&lt;/code&gt; receives is a format string. This must be a string literal. The power of the formatting string is in the &lt;code&gt;{}&lt;/code&gt;s contained.</source>
          <target state="translated">첫 번째 인수 &lt;code&gt;format!&lt;/code&gt; 수신은 형식 문자열입니다. 문자열 리터럴이어야합니다. 형식화 문자열의 힘은 &lt;code&gt;{}&lt;/code&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="172d64775742c02b6a5a5317561d4368b0242e63" translate="yes" xml:space="preserve">
          <source>The first argument we gave to the &lt;code&gt;assert_eq!&lt;/code&gt; macro, &lt;code&gt;4&lt;/code&gt;, is equal to the result of calling &lt;code&gt;add_two(2)&lt;/code&gt;. The line for this test is &lt;code&gt;test tests::it_adds_two ... ok&lt;/code&gt;, and the &lt;code&gt;ok&lt;/code&gt; text indicates that our test passed!</source>
          <target state="translated">우리가 &lt;code&gt;assert_eq!&lt;/code&gt; 준 첫 번째 주장 ! 매크로 &lt;code&gt;4&lt;/code&gt; 는 &lt;code&gt;add_two(2)&lt;/code&gt; 호출 결과와 같습니다 . 이 테스트의 라인은 &lt;code&gt;test tests::it_adds_two ... ok&lt;/code&gt; 이며 &lt;code&gt;ok&lt;/code&gt; 텍스트는 테스트가 통과했음을 나타냅니다!</target>
        </trans-unit>
        <trans-unit id="3de15e9c98b000a8208779afdf2f678b58acd245" translate="yes" xml:space="preserve">
          <source>The first arm will match any point that lies on the &lt;code&gt;x&lt;/code&gt; axis by specifying that the &lt;code&gt;y&lt;/code&gt; field matches if its value matches the literal &lt;code&gt;0&lt;/code&gt;. The pattern still creates an &lt;code&gt;x&lt;/code&gt; variable that we can use in the code for this arm.</source>
          <target state="translated">첫 번째 팔은 값이 리터럴 &lt;code&gt;0&lt;/code&gt; 과 일치하는 경우 &lt;code&gt;y&lt;/code&gt; 필드가 일치 하도록 지정 하여 &lt;code&gt;x&lt;/code&gt; 축 에있는 모든 점 과 일치합니다 . 패턴은 여전히이 팔의 코드에서 사용할 수 있는 &lt;code&gt;x&lt;/code&gt; 변수를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="0d5278ef07d533df9f2058795a528bf65f8762b5" translate="yes" xml:space="preserve">
          <source>The first character is &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">첫 번째 문자는 &lt;code&gt;_&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6995348ce355253fb2b3997cb5b666e8341177e1" translate="yes" xml:space="preserve">
          <source>The first character is a letter.</source>
          <target state="translated">첫 번째 문자는 글자입니다.</target>
        </trans-unit>
        <trans-unit id="a8c76b012fc5c6ec5d1d2757128af41ec43b821f" translate="yes" xml:space="preserve">
          <source>The first collection type we&amp;rsquo;ll look at is &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, also known as a &lt;em&gt;vector&lt;/em&gt;. Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory. Vectors can only store values of the same type. They are useful when you have a list of items, such as the lines of text in a file or the prices of items in a shopping cart.</source>
          <target state="translated">우리가 살펴볼 첫 번째 컬렉션 유형은 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 이며 &lt;em&gt;vector&lt;/em&gt; 라고도합니다 . 벡터를 사용하면 하나의 데이터 구조에 둘 이상의 값을 저장하여 모든 값을 서로 메모리에 배치 할 수 있습니다. 벡터는 같은 유형의 값만 저장할 수 있습니다. 파일의 텍스트 줄 또는 장바구니의 항목 가격과 같은 항목 목록이있을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="428cb6a8ac810de3963e02d4205a82867bb3d81a" translate="yes" xml:space="preserve">
          <source>The first command creates a new directory called &lt;em&gt;hello_cargo&lt;/em&gt;. We&amp;rsquo;ve named our project &lt;em&gt;hello_cargo&lt;/em&gt;, and Cargo creates its files in a directory of the same name.</source>
          <target state="translated">첫 번째 명령은 &lt;em&gt;hello_cargo&lt;/em&gt; 라는 새 디렉토리를 만듭니다 . 프로젝트 이름을 &lt;em&gt;hello_cargo&lt;/em&gt; 로 지정했으며 Cargo는 동일한 이름의 디렉토리에 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="63eaa7d21eca5ee74b5e72e48aed31081f441d50" translate="yes" xml:space="preserve">
          <source>The first command, &lt;code&gt;cargo new&lt;/code&gt;, takes the name of the project (&lt;code&gt;guessing_game&lt;/code&gt;) as the first argument. The second command changes to the new project&amp;rsquo;s directory.</source>
          <target state="translated">첫 번째 명령 &lt;code&gt;cargo new&lt;/code&gt; 는 첫 번째 인수로 프로젝트 이름 ( &lt;code&gt;guessing_game&lt;/code&gt; )을 사용합니다. 두 번째 명령은 새 프로젝트의 디렉토리로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="0041dd0d29e2c266e11aba3af3bc7df1a46ad21b" translate="yes" xml:space="preserve">
          <source>The first element is traditionally the path of the executable, but it can be set to arbitrary text, and it may not even exist, so this property should not be relied upon for security purposes.</source>
          <target state="translated">첫 번째 요소는 전통적으로 실행 파일의 경로이지만 임의의 텍스트로 설정 될 수 있으며 존재하지 않을 수도 있으므로 보안 상이 속성에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="d1fd88a9bd4f9b97a6544f441d40f72dd7a6a337" translate="yes" xml:space="preserve">
          <source>The first element is traditionally the path of the executable, but it can be set to arbitrary text, and may not even exist. This means this property should not be relied upon for security purposes.</source>
          <target state="translated">첫 번째 요소는 전통적으로 실행 파일의 경로이지만 임의의 텍스트로 설정할 수 있으며 존재하지 않을 수도 있습니다. 즉, 보안상의 이유로이 속성에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="57c13dc1f835e54c634e0d373f7f324807f9c426" translate="yes" xml:space="preserve">
          <source>The first element was moved out of the array, but this is not possible because &lt;code&gt;NonCopy&lt;/code&gt; does not implement the &lt;code&gt;Copy&lt;/code&gt; trait.</source>
          <target state="translated">첫 번째 요소가 배열에서 이동되었지만 &lt;code&gt;NonCopy&lt;/code&gt; 는 &lt;code&gt;Copy&lt;/code&gt; 특성을 구현하지 않기 때문에 불가능합니다 .</target>
        </trans-unit>
        <trans-unit id="7e08bb0a99fdc3cd6e428394eb70ec134e104b16" translate="yes" xml:space="preserve">
          <source>The first enum shown is the usual kind of enum you'd find in a C-style language. The second shows off a hypothetical example of something storing location data, with &lt;code&gt;Coord&lt;/code&gt; being any other type that's needed, for example a struct. The third example demonstrates the kind of data a variant can store, ranging from nothing, to a tuple, to an anonymous struct.</source>
          <target state="translated">첫 번째 열거 형은 C 스타일 언어에서 볼 수있는 일반적인 종류의 열거 형입니다. 두 번째는 위치 데이터를 저장하는 것에 대한 가상의 예를 보여줍니다. &lt;code&gt;Coord&lt;/code&gt; 는 구조체와 같은 필요한 다른 유형입니다. 세 번째 예는 변형에서 저장할 수없는 종류의 데이터에서 튜플, 익명 구조체에 이르기까지 다양합니다.</target>
        </trans-unit>
        <trans-unit id="356931433c23df443c1df1a79c8ba26a23e35bf5" translate="yes" xml:space="preserve">
          <source>The first error is in our &lt;code&gt;Drop&lt;/code&gt; implementation. We mentioned earlier that we intended to call &lt;code&gt;take&lt;/code&gt; on the &lt;code&gt;Option&lt;/code&gt; value to move &lt;code&gt;thread&lt;/code&gt; out of &lt;code&gt;worker&lt;/code&gt;. The following changes will do so:</source>
          <target state="translated">첫 번째 오류는 &lt;code&gt;Drop&lt;/code&gt; 구현에 있습니다. 우리는 우리가 전화를 의도 앞서 언급 &lt;code&gt;take&lt;/code&gt; 온 &lt;code&gt;Option&lt;/code&gt; 이동 값 &lt;code&gt;thread&lt;/code&gt; 밖으로 &lt;code&gt;worker&lt;/code&gt; . 다음과 같이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="65b1330f4d7e9b563ff90a9ab4bea0daa6bb9857" translate="yes" xml:space="preserve">
          <source>The first invariant says that whatever actual token that comes after a matcher, if any, must be somewhere in the predetermined follow set. This ensures that a legal macro definition will continue to assign the same determination as to where &lt;code&gt;... tt&lt;/code&gt; ends and &lt;code&gt;uu ...&lt;/code&gt; begins, even as new syntactic forms are added to the language.</source>
          <target state="translated">첫 번째 불변 값은 매처 뒤에 나오는 실제 토큰이 있으면 사전 결정된 후속 세트의 어딘가에 있어야한다고 말합니다. 이렇게하면 새로운 매크로 형식이 언어에 추가 되더라도 유효한 매크로 정의가 &lt;code&gt;... tt&lt;/code&gt; 끝나고 &lt;code&gt;uu ...&lt;/code&gt; 가 시작 되는 위치와 동일한 결정을 계속 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f19def176a50d6a90af45519ada69ee7f97eb7e" translate="yes" xml:space="preserve">
          <source>The first is that it is how much memory must be allocated to store that value.</source>
          <target state="translated">첫 번째는 해당 값을 저장하기 위해 할당해야하는 메모리 양입니다.</target>
        </trans-unit>
        <trans-unit id="6fc0f539a4da8814ced28ee34b9432e35dbaf3f6" translate="yes" xml:space="preserve">
          <source>The first is to answer a specific question. If you know which chapter answers that question, you can jump to that chapter in the table of contents. Otherwise, you can press &lt;code&gt;s&lt;/code&gt; or the click the magnifying glass on the top bar to search for keywords related to your question. For example, say you wanted to know when a temporary value created in a let statement is dropped. If you didn't already know that the &lt;a href=&quot;expressions#temporary-lifetimes&quot;&gt;lifetime of temporaries&lt;/a&gt; is defined in the &lt;a href=&quot;expressions&quot;&gt;expressions chapter&lt;/a&gt;, you could search &quot;temporary let&quot; and the first search result will take you to that section.</source>
          <target state="translated">첫 번째는 특정 질문에 답변하는 것입니다. 어떤 장이 그 질문에 답하는지 알고 있다면 목차에서 해당 장으로 이동할 수 있습니다. 그렇지 않으면, 당신은 누를 수 &lt;code&gt;s&lt;/code&gt; 또는 질문과 관련된 키워드를 검색 상단 표시 줄에있는 돋보기를 클릭합니다. 예를 들어, let 문에서 작성된 임시 값이 언제 삭제되는지 알고 싶다고 가정하십시오. &lt;a href=&quot;expressions#temporary-lifetimes&quot;&gt;임시 장수의 수명이 &lt;/a&gt;&lt;a href=&quot;expressions&quot;&gt;식 장에&lt;/a&gt; 정의되어 있는지 아직 모른다면 &quot;임시 let&quot;을 검색하면 첫 번째 검색 결과가 해당 섹션으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="9d5da3096efb5359ed9929a25c1646ef8f4d3a16" translate="yes" xml:space="preserve">
          <source>The first line is a &lt;em&gt;status line&lt;/em&gt; that contains the HTTP version used in the response, a numeric status code that summarizes the result of the request, and a reason phrase that provides a text description of the status code. After the CRLF sequence are any headers, another CRLF sequence, and the body of the response.</source>
          <target state="translated">첫 번째 라인은 인 &lt;em&gt;상태 라인&lt;/em&gt; 반응에 사용되는 HTTP 버전 요청의 결과를 요약 한 숫자 상태 코드 및 상태 코드의 텍스트 설명을 제공하는 이유 구를 포함한다. CRLF 시퀀스 뒤에는 헤더, 다른 CRLF 시퀀스 및 응답 본문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9ee7ff7ce4ca8fcacdd1bbbd80ae645db3e5b9c" translate="yes" xml:space="preserve">
          <source>The first line is the &lt;em&gt;request line&lt;/em&gt; that holds information about what the client is requesting. The first part of the request line indicates the &lt;em&gt;method&lt;/em&gt; being used, such as &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;, which describes how the client is making this request. Our client used a &lt;code&gt;GET&lt;/code&gt; request.</source>
          <target state="translated">첫 번째 라인은 클라이언트가 요청하는 것에 대한 정보를 보유 하는 &lt;em&gt;요청 라인&lt;/em&gt; 입니다. 요청 라인의 첫 번째 부분은 클라이언트가이 요청을 수행하는 방법을 설명하는 &lt;code&gt;GET&lt;/code&gt; 또는 &lt;code&gt;POST&lt;/code&gt; 와 같은 사용중인 &lt;em&gt;메소드를&lt;/em&gt; 나타냅니다 . 우리 고객은 &lt;code&gt;GET&lt;/code&gt; 요청을 사용했습니다 .</target>
        </trans-unit>
        <trans-unit id="81a313a5dc649f34279e079a51051be71d71d911" translate="yes" xml:space="preserve">
          <source>The first line shows a function definition, and the second line shows a fully annotated closure definition. The third line removes the type annotations from the closure definition, and the fourth line removes the brackets, which are optional because the closure body has only one expression. These are all valid definitions that will produce the same behavior when they&amp;rsquo;re called.</source>
          <target state="translated">첫 번째 줄은 함수 정의를 보여주고 두 번째 줄은 주석이 달린 클로저 정의를 보여줍니다. 세 번째 줄은 클로저 정의에서 형식 주석을 제거하고 네 번째 줄은 괄호를 제거합니다. 마침표 본문에는식이 하나뿐이므로 선택 사항입니다. 이들은 모두 호출 될 때 동일한 동작을 생성하는 유효한 정의입니다.</target>
        </trans-unit>
        <trans-unit id="98148895ad25eccad7c245ba3595f3571d1d992c" translate="yes" xml:space="preserve">
          <source>The first line, &lt;code&gt;[package]&lt;/code&gt;, is a section heading that indicates that the following statements are configuring a package. As we add more information to this file, we&amp;rsquo;ll add other sections.</source>
          <target state="translated">첫 번째 줄인 &lt;code&gt;[package]&lt;/code&gt; 는 다음 문이 패키지를 구성하고 있음을 나타내는 섹션 제목입니다. 이 파일에 더 많은 정보를 추가하면 다른 섹션도 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="8b310676b3019d119c9c467f577a365e7a655455" translate="yes" xml:space="preserve">
          <source>The first new bit here is another &lt;code&gt;use&lt;/code&gt; statement, bringing a type called &lt;code&gt;std::cmp::Ordering&lt;/code&gt; into scope from the standard library. Like &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;Ordering&lt;/code&gt; is another enum, but the variants for &lt;code&gt;Ordering&lt;/code&gt; are &lt;code&gt;Less&lt;/code&gt;, &lt;code&gt;Greater&lt;/code&gt;, and &lt;code&gt;Equal&lt;/code&gt;. These are the three outcomes that are possible when you compare two values.</source>
          <target state="translated">첫 번째 새 비트 는 표준 라이브러리에서 &lt;code&gt;std::cmp::Ordering&lt;/code&gt; 범위를 가져 오는 또 다른 &lt;code&gt;use&lt;/code&gt; 문 입니다. 마찬가지로 &lt;code&gt;Result&lt;/code&gt; , &lt;code&gt;Ordering&lt;/code&gt; 다른 열거하지만,의 변종 &lt;code&gt;Ordering&lt;/code&gt; 있습니다 &lt;code&gt;Less&lt;/code&gt; , &lt;code&gt;Greater&lt;/code&gt; , 그리고 &lt;code&gt;Equal&lt;/code&gt; . 두 값을 비교할 때 가능한 세 가지 결과입니다.</target>
        </trans-unit>
        <trans-unit id="cc86c6e2624cc3af0cff65094ba89e9de1e68ebb" translate="yes" xml:space="preserve">
          <source>The first new line defines the &lt;code&gt;response&lt;/code&gt; variable that holds the success message&amp;rsquo;s data. Then we call &lt;code&gt;as_bytes&lt;/code&gt; on our &lt;code&gt;response&lt;/code&gt; to convert the string data to bytes. The &lt;code&gt;write&lt;/code&gt; method on &lt;code&gt;stream&lt;/code&gt; takes a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; and sends those bytes directly down the connection.</source>
          <target state="translated">첫 번째 새 줄은 성공 메시지의 데이터를 보유하는 &lt;code&gt;response&lt;/code&gt; 변수를 정의합니다 . 그런 다음 &lt;code&gt;response&lt;/code&gt; 에서 &lt;code&gt;as_bytes&lt;/code&gt; 를 호출 하여 문자열 데이터를 바이트로 변환합니다. &lt;code&gt;stream&lt;/code&gt; 의 &lt;code&gt;write&lt;/code&gt; 메소드 는 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 하여 해당 바이트를 연결로 직접 보냅니다.</target>
        </trans-unit>
        <trans-unit id="155e4331405457b07f19de5018b6f05e551344c8" translate="yes" xml:space="preserve">
          <source>The first one looks much cleaner. This automatic referencing behavior works because methods have a clear receiver&amp;mdash;the type of &lt;code&gt;self&lt;/code&gt;. Given the receiver and name of a method, Rust can figure out definitively whether the method is reading (&lt;code&gt;&amp;amp;self&lt;/code&gt;), mutating (&lt;code&gt;&amp;amp;mut self&lt;/code&gt;), or consuming (&lt;code&gt;self&lt;/code&gt;). The fact that Rust makes borrowing implicit for method receivers is a big part of making ownership ergonomic in practice.</source>
          <target state="translated">첫 번째는 훨씬 깨끗해 보입니다. 이 자동 참조 동작은 메서드에 &lt;code&gt;self&lt;/code&gt; 유형 인 명확한 수신자가 있기 때문에 작동합니다 . 방법의 수신기와 이름을 감안할 때, 녹 방법은 (읽고 확실히 여부를 알아낼 수 &lt;code&gt;&amp;amp;self&lt;/code&gt; (돌연변이) &lt;code&gt;&amp;amp;mut self&lt;/code&gt; ) 또는 (소모 &lt;code&gt;self&lt;/code&gt; ). Rust가 메소드 수신자에게 차용을 암시한다는 사실은 실제로 소유권을 인체 공학적으로 만드는 데 큰 부분을 차지합니다.</target>
        </trans-unit>
        <trans-unit id="69774098a6b4b7c12621ff37f51e96103a8b7208" translate="yes" xml:space="preserve">
          <source>The first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we&amp;rsquo;ll allow the player to input a guess. Enter the code in Listing 2-1 into &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">추측 게임 프로그램의 첫 번째 부분은 사용자 입력을 요청하고 해당 입력을 처리하며 입력이 예상 형식인지 확인합니다. 시작하기 위해 플레이어가 추측을 입력하도록 허용합니다. Listing 2-1의 코드를 &lt;em&gt;src / main.rs&lt;/em&gt; 에 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="84c014079631c14ba610d8bbfcba357c51089179" translate="yes" xml:space="preserve">
          <source>The first parts of the module system we&amp;rsquo;ll cover are packages and crates. A crate is a binary or library. The &lt;em&gt;crate root&lt;/em&gt; is a source file that the Rust compiler starts from and makes up the root module of your crate (we&amp;rsquo;ll explain modules in depth in the &lt;a href=&quot;ch07-02-defining-modules-to-control-scope-and-privacy&quot;&gt;&amp;ldquo;Defining Modules to Control Scope and Privacy&amp;rdquo;&lt;/a&gt;) section. A &lt;em&gt;package&lt;/em&gt; is one or more crates that provide a set of functionality. A package contains a &lt;em&gt;Cargo.toml&lt;/em&gt; file that describes how to build those crates.</source>
          <target state="translated">우리가 다룰 모듈 시스템의 첫 번째 부분은 패키지와 상자입니다. 상자는 바이너리 또는 라이브러리입니다. &lt;em&gt;상자 루트는&lt;/em&gt; 녹 컴파일러는 (우리가 깊이에서 모듈을 설명하겠습니다에서 시작하여 상자의 루트 모듈을 구성하는 소스 파일입니다 &lt;a href=&quot;ch07-02-defining-modules-to-control-scope-and-privacy&quot;&gt;&quot;정의 모듈 제어에 대한 범위 및 개인 정보 보호&quot;&lt;/a&gt; 섹션). &lt;em&gt;패키지는&lt;/em&gt; 기능 세트를 제공하는 하나 개 이상의 상자입니다. 패키지에는 상자를 만드는 방법을 설명하는 &lt;em&gt;Cargo.toml&lt;/em&gt; 파일이 들어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="af7ae34fc30a5ff985eeb202b31d100b9995dad4" translate="yes" xml:space="preserve">
          <source>The first problem is that a &lt;code&gt;Cacher&lt;/code&gt; instance assumes it will always get the same value for the parameter &lt;code&gt;arg&lt;/code&gt; to the &lt;code&gt;value&lt;/code&gt; method. That is, this test of &lt;code&gt;Cacher&lt;/code&gt; will fail:</source>
          <target state="translated">첫 번째 문제는 &lt;code&gt;Cacher&lt;/code&gt; 인스턴스가 매개 변수 &lt;code&gt;arg&lt;/code&gt; 에 대해 항상 &lt;code&gt;value&lt;/code&gt; 메소드 와 동일한 값을 얻는다고 가정한다는 것 입니다. 즉,이 &lt;code&gt;Cacher&lt;/code&gt; 테스트 는 실패합니다.</target>
        </trans-unit>
        <trans-unit id="dafa36fcdade4f5ce81d7dee337248690a10ae6d" translate="yes" xml:space="preserve">
          <source>The first purpose is similar to the second but in reverse: if you want to add a type parameter to an existing trait, you can give it a default to allow extension of the functionality of the trait without breaking the existing implementation code.</source>
          <target state="translated">첫 번째 목적은 두 번째와 유사하지만 반대로 기존 특성에 유형 매개 변수를 추가하려는 경우 기존 구현 코드를 손상시키지 않고 특성의 기능을 확장 할 수 있도록 기본값을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f5a900754c112ed82386f584763afdd02db421d" translate="yes" xml:space="preserve">
          <source>The first rule is that each parameter that is a reference gets its own lifetime parameter. In other words, a function with one parameter gets one lifetime parameter: &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32)&lt;/code&gt;; a function with two parameters gets two separate lifetime parameters: &lt;code&gt;fn foo&amp;lt;'a, 'b&amp;gt;(x: &amp;amp;'a i32, y: &amp;amp;'b i32)&lt;/code&gt;; and so on.</source>
          <target state="translated">첫 번째 규칙은 참조 인 각 매개 변수가 고유 한 수명 매개 변수를 얻는 것입니다. 다시 말해, 하나의 매개 변수를 가진 함수는 하나의 수명 매개 변수를 가져옵니다. &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32)&lt;/code&gt; ; 두 개의 매개 변수가있는 함수는 두 개의 개별 수명 매개 변수를 얻습니다. &lt;code&gt;fn foo&amp;lt;'a, 'b&amp;gt;(x: &amp;amp;'a i32, y: &amp;amp;'b i32)&lt;/code&gt; ; 등등.</target>
        </trans-unit>
        <trans-unit id="d13f338beec8e6c884aee47f7c30a9f0bc21c5c9" translate="yes" xml:space="preserve">
          <source>The first section of the output shows that the &lt;code&gt;it_works&lt;/code&gt; test in the &lt;code&gt;add-one&lt;/code&gt; crate passed. The next section shows that zero tests were found in the &lt;code&gt;adder&lt;/code&gt; crate, and then the last section shows zero documentation tests were found in the &lt;code&gt;add-one&lt;/code&gt; crate. Running &lt;code&gt;cargo test&lt;/code&gt; in a workspace structured like this one will run the tests for all the crates in the workspace.</source>
          <target state="translated">출력의 첫 번째 섹션은 &lt;code&gt;add-one&lt;/code&gt; 상자 의 &lt;code&gt;it_works&lt;/code&gt; 테스트가 통과 되었음을 보여줍니다 . 다음 섹션에서는 &lt;code&gt;adder&lt;/code&gt; 상자 에서 0 개의 테스트가 발견되었으며 마지막 섹션에서는 &lt;code&gt;add-one&lt;/code&gt; 상자 에서 0 개의 테스트가 발견되었음을 보여줍니다 . 이와 같이 구성된 작업 공간에서 &lt;code&gt;cargo test&lt;/code&gt; 를 실행 하면 작업 공간의 모든 상자에 대한 테스트가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1aa6d921fdf65cd84a902ac9021b32a10817790a" translate="yes" xml:space="preserve">
          <source>The first step is to build a list of candidate receiver types. Obtain these by repeatedly &lt;a href=&quot;operator-expr#the-dereference-operator&quot;&gt;dereferencing&lt;/a&gt; the receiver expression's type, adding each type encountered to the list, then finally attempting an &lt;a href=&quot;../type-coercions#unsized-coercions&quot;&gt;unsized coercion&lt;/a&gt; at the end, and adding the result type if that is successful. Then, for each candidate &lt;code&gt;T&lt;/code&gt;, add &lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to the list immediately after &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">첫 번째 단계는 후보 수신자 유형 목록을 작성하는 것입니다. 수신자 표현식의 유형 을 반복적으로 &lt;a href=&quot;operator-expr#the-dereference-operator&quot;&gt;역 참조&lt;/a&gt; 하고, 발견 된 각 유형을 목록에 추가 한 다음 마지막에 &lt;a href=&quot;../type-coercions#unsized-coercions&quot;&gt;크기가없는 강제 변환&lt;/a&gt; 을 시도하고 , 성공한 경우 결과 유형을 추가하여이를 확보하십시오. 그런 다음, 각 후보에 대한 &lt;code&gt;T&lt;/code&gt; , 추가 &lt;code&gt;&amp;amp;T&lt;/code&gt; 및 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 직후 목록에 &lt;code&gt;T&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7046b8e80cd49555b791ba84b08e3a496f0ebd34" translate="yes" xml:space="preserve">
          <source>The first step is to install Rust. We&amp;rsquo;ll download Rust through &lt;code&gt;rustup&lt;/code&gt;, a command line tool for managing Rust versions and associated tools. You&amp;rsquo;ll need an internet connection for the download.</source>
          <target state="translated">첫 번째 단계는 Rust를 설치하는 것입니다. Rust 버전 및 관련 도구를 관리하기위한 명령 줄 도구 인 &lt;code&gt;rustup&lt;/code&gt; 을 통해 Rust를 다운로드 합니다. 다운로드하려면 인터넷에 연결되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="50ad5f65969d8efb886424560b9363334f047aa4" translate="yes" xml:space="preserve">
          <source>The first store to &lt;code&gt;C&lt;/code&gt; might be moved before the store to &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt;, &lt;em&gt;as if&lt;/em&gt; we had written &lt;code&gt;C = 4; A = 3; B = 4&lt;/code&gt;.</source>
          <target state="translated">처음에 저장 &lt;code&gt;C&lt;/code&gt; 는 로 가기 전에 이동 될 수 또는 &lt;code&gt;B&lt;/code&gt; , &lt;em&gt;마치&lt;/em&gt; 우리가 쓴 &lt;code&gt;C = 4; A = 3; B = 4&lt;/code&gt; A = 3; B = 4 입니다. &lt;code&gt;A&lt;/code&gt; &lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a6ba14d6296fbc087c2dbd538a2ed25e14b36c1" translate="yes" xml:space="preserve">
          <source>The first task is to make &lt;code&gt;minigrep&lt;/code&gt; accept its two command line arguments: the filename and a string to search for. That is, we want to be able to run our program with &lt;code&gt;cargo run&lt;/code&gt;, a string to search for, and a path to a file to search in, like so:</source>
          <target state="translated">첫 번째 작업은 &lt;code&gt;minigrep&lt;/code&gt; 이 두 개의 명령 줄 인수를 받도록하는 것입니다 : 파일 이름과 검색 할 문자열. 즉, 다음과 같이 &lt;code&gt;cargo run&lt;/code&gt; , 검색 할 문자열 및 검색 할 파일 경로를 사용하여 프로그램을 실행할 수 있기를 원합니다 .</target>
        </trans-unit>
        <trans-unit id="31729bd9aa0c04461ab01bb63b4c75c53baddad1" translate="yes" xml:space="preserve">
          <source>The first time we call &lt;code&gt;example_closure&lt;/code&gt; with the &lt;code&gt;String&lt;/code&gt; value, the compiler infers the type of &lt;code&gt;x&lt;/code&gt; and the return type of the closure to be &lt;code&gt;String&lt;/code&gt;. Those types are then locked in to the closure in &lt;code&gt;example_closure&lt;/code&gt;, and we get a type error if we try to use a different type with the same closure.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 값으로 &lt;code&gt;example_closure&lt;/code&gt; 를 처음 호출 할 때 컴파일러는 &lt;code&gt;x&lt;/code&gt; 유형과 클로저의 반환 유형을 &lt;code&gt;String&lt;/code&gt; 으로 추론합니다 . 그런 다음 이러한 유형은 &lt;code&gt;example_closure&lt;/code&gt; 의 클로저에 고정되며 동일한 클로저로 다른 유형을 사용하려고하면 유형 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bd2776b4ba26113bcf03f01d82d4cc2a793fc112" translate="yes" xml:space="preserve">
          <source>The first time we call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function in &lt;code&gt;eat_at_restaurant&lt;/code&gt;, we use an absolute path. The &lt;code&gt;add_to_waitlist&lt;/code&gt; function is defined in the same crate as &lt;code&gt;eat_at_restaurant&lt;/code&gt;, which means we can use the &lt;code&gt;crate&lt;/code&gt; keyword to start an absolute path.</source>
          <target state="translated">우리가 통화를 처음 &lt;code&gt;add_to_waitlist&lt;/code&gt; 의 함수 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 는 , 우리는 절대 경로를 사용한다. &lt;code&gt;add_to_waitlist&lt;/code&gt; 의 기능과 동일한 상자에 정의 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 우리가 사용할 수있는 수단, &lt;code&gt;crate&lt;/code&gt; 절대 경로를 시작하기 위해 키워드.</target>
        </trans-unit>
        <trans-unit id="fcbd8f43979f6a3f91b2e8d0489ac836799ae483" translate="yes" xml:space="preserve">
          <source>The first two cases are the same except for mutability. The first case states that if you have a &lt;code&gt;&amp;amp;T&lt;/code&gt;, and &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Deref&lt;/code&gt; to some type &lt;code&gt;U&lt;/code&gt;, you can get a &lt;code&gt;&amp;amp;U&lt;/code&gt; transparently. The second case states that the same deref coercion happens for mutable references.</source>
          <target state="translated">변경 가능성을 제외하고 처음 두 경우는 동일합니다. 첫 번째 경우는 &lt;code&gt;&amp;amp;T&lt;/code&gt; 가 있고 &lt;code&gt;T&lt;/code&gt; 가 일부 유형 &lt;code&gt;U&lt;/code&gt; 에 대한 &lt;code&gt;Deref&lt;/code&gt; 를 구현 하면 &lt;code&gt;&amp;amp;U&lt;/code&gt; 투명하게 얻을 수 있다는 것 입니다. 두 번째 경우는 변경 가능한 참조에 대해 동일한 역 참조 강제가 발생 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="286885295f7366f4af40320e50ad88bb3b1732e7" translate="yes" xml:space="preserve">
          <source>The first version of the prelude of The Rust Standard Library.</source>
          <target state="translated">The Rust Standard Library 서곡의 첫 번째 버전.</target>
        </trans-unit>
        <trans-unit id="2833ddd57d8c251f327110ae65b75e17455b9bb3" translate="yes" xml:space="preserve">
          <source>The first will contain all indices from &lt;code&gt;[0, mid)&lt;/code&gt; (excluding the index &lt;code&gt;mid&lt;/code&gt; itself) and the second will contain all indices from &lt;code&gt;[mid, len)&lt;/code&gt; (excluding the index &lt;code&gt;len&lt;/code&gt; itself).</source>
          <target state="translated">첫 번째는 &lt;code&gt;[0, mid)&lt;/code&gt; 모든 인덱스를 포함하고 (인덱스 &lt;code&gt;mid&lt;/code&gt; 자체 제외 ) 두 번째는 &lt;code&gt;[mid, len)&lt;/code&gt; 모든 인덱스를 포함합니다 (인덱스 &lt;code&gt;len&lt;/code&gt; 자체 제외 ).</target>
        </trans-unit>
        <trans-unit id="d13813ed09799c4deb40bb4b4bb042ae0365adde" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; affect compile-time limits.</source>
          <target state="translated">다음 &lt;a href=&quot;../attributes&quot;&gt;속성&lt;/a&gt; 은 컴파일 시간 제한에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="53b431e371001b409fc98d06f983cdb135709c0f" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for controlling code generation.</source>
          <target state="translated">다음 &lt;a href=&quot;../attributes&quot;&gt;속성&lt;/a&gt; 은 코드 생성을 제어하는 ​​데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="26da618b938f5c0f34421c8ac509923a988969a6" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for controlling or generating diagnostic messages during compilation.</source>
          <target state="translated">다음 &lt;a href=&quot;../attributes&quot;&gt;속성&lt;/a&gt; 은 컴파일 중 진단 메시지를 제어하거나 생성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a094c614790975d250927975ec0fe6928fcd7c3a" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for specifying functions for performing tests. Compiling a crate in &quot;test&quot; mode enables building the test functions along with a test harness for executing the tests. Enabling the test mode also enables the &lt;a href=&quot;../conditional-compilation#test&quot;&gt;&lt;code&gt;test&lt;/code&gt; conditional compilation option&lt;/a&gt;.</source>
          <target state="translated">다음 &lt;a href=&quot;../attributes&quot;&gt;속성&lt;/a&gt; 은 테스트 수행을위한 기능을 지정하는 데 사용됩니다. &quot;테스트&quot;모드에서 크레이트를 컴파일하면 테스트 실행을위한 테스트 하네스와 함께 테스트 기능을 구축 할 수 있습니다. 테스트 모드를 활성화하면 &lt;a href=&quot;../conditional-compilation#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; 조건부 컴파일 옵션&lt;/a&gt; 도 활성화 됩니다.</target>
        </trans-unit>
        <trans-unit id="c6bd6f609f21755a5a941e395bd92f148b7a32a4" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; control the behavior of external blocks.</source>
          <target state="translated">다음 &lt;a href=&quot;../attributes&quot;&gt;속성&lt;/a&gt; 은 외부 블록의 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="34e28a9dda5b8f30dd258681b177c05e512cb9ec" translate="yes" xml:space="preserve">
          <source>The following are examples of struct expressions:</source>
          <target state="translated">다음은 구조체 표현식의 예입니다.</target>
        </trans-unit>
        <trans-unit id="0cfa813f73eeb4b3df6024040cdcdc9bf704edb3" translate="yes" xml:space="preserve">
          <source>The following code tries to return a closure directly, but it won&amp;rsquo;t compile:</source>
          <target state="translated">다음 코드는 클로저를 직접 반환하려고 시도하지만 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9fdd790090c328b0bac332ac3bf94fd48a22d310" translate="yes" xml:space="preserve">
          <source>The following coercions are called &lt;code&gt;unsized coercions&lt;/code&gt;, since they relate to converting sized types to unsized types, and are permitted in a few cases where other coercions are not, as described above. They can still happen anywhere else a coercion can occur.</source>
          <target state="translated">다음의 강제 변환은 크기가 지정되지 않은 유형으로 변환되지 않는 것과 관련이 있기 때문에 &lt;code&gt;unsized coercions&lt;/code&gt; 되지 않은 강제 변환 이라고하며 , 위에 설명 된대로 다른 강제 변환이 아닌 경우에는 허용됩니다. 그들은 여전히 ​​강제가 발생할 수있는 다른 곳에서 일어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5faa68338d0213add2f9ec4c067dc00f82eb825f" translate="yes" xml:space="preserve">
          <source>The following contexts are &lt;em&gt;place expression&lt;/em&gt; contexts:</source>
          <target state="translated">다음 컨텍스트는 &lt;em&gt;장소 표현식&lt;/em&gt; 컨텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="a03f434198c8f12dc538595d512c2779094f1534" translate="yes" xml:space="preserve">
          <source>The following example contains a circular dependency between two traits:</source>
          <target state="translated">다음 예제는 두 특성 간의 순환 종속성을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="19cc88ac0ce4f5388077204fb21e73c4ffb89f2d" translate="yes" xml:space="preserve">
          <source>The following example implements &lt;code&gt;Index&lt;/code&gt; on a read-only &lt;code&gt;NucleotideCount&lt;/code&gt; container, enabling individual counts to be retrieved with index syntax.</source>
          <target state="translated">다음 예제 는 읽기 전용 &lt;code&gt;NucleotideCount&lt;/code&gt; 컨테이너에서 &lt;code&gt;Index&lt;/code&gt; 를 구현 하여 인덱스 구문으로 개별 카운트를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b79316b13dbff6d7faf92f7fbb6c36c3b4504a1c" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; to create an optional box of &lt;a href=&quot;../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt;. Notice that in order to use the inner &lt;a href=&quot;../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt; value first, the &lt;code&gt;check_optional&lt;/code&gt; function needs to use pattern matching to determine whether the box has a value (i.e., it is &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(...)&lt;/code&gt;&lt;/a&gt;) or not (&lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">다음 예제에서는 &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 을 사용하여 &lt;a href=&quot;../primitive.i32&quot;&gt; &lt;code&gt;i32&lt;/code&gt; &lt;/a&gt; 의 선택적 상자를 만듭니다 . 내부 &lt;a href=&quot;../primitive.i32&quot;&gt; &lt;code&gt;i32&lt;/code&gt; &lt;/a&gt; 값을 먼저 사용하려면 &lt;code&gt;check_optional&lt;/code&gt; 함수가 패턴 일치를 사용하여 상자에 값이 있는지 (즉, &lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(...)&lt;/code&gt; &lt;/a&gt; ) 아닌지 ( &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; ) 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="0098b757352995332c14af09f0677dc80f9a0b00" translate="yes" xml:space="preserve">
          <source>The following expressions are constant expressions, so long as any operands are also constant expressions and do not cause any &lt;a href=&quot;destructors&quot;&gt;&lt;code&gt;Drop::drop&lt;/code&gt;&lt;/a&gt; calls to be run.</source>
          <target state="translated">피연산자가 상수 표현식이고 &lt;a href=&quot;destructors&quot;&gt; &lt;code&gt;Drop::drop&lt;/code&gt; &lt;/a&gt; 호출을 실행 하지 않는 한 다음 표현식은 상수 표현식 입니다.</target>
        </trans-unit>
        <trans-unit id="a4fd2c18c35c909a948ecc39653105d7e64c5323" translate="yes" xml:space="preserve">
          <source>The following expressions are equivalent.</source>
          <target state="translated">다음 표현식은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="f79e25578dbebf348320c4abf5b91615c4d5d3bd" translate="yes" xml:space="preserve">
          <source>The following expressions can be mutable place expression contexts:</source>
          <target state="translated">다음 표현식은 변경 가능한 장소 표현식 컨텍스트 일 ​​수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e8e60bb585909210311dad5aced6fb1ca9a2411" translate="yes" xml:space="preserve">
          <source>The following illustrates how tokens can be directly matched after matching a &lt;code&gt;tt&lt;/code&gt; fragment:</source>
          <target state="translated">다음은 &lt;code&gt;tt&lt;/code&gt; 조각을 일치시킨 후 토큰을 직접 일치시키는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="4cba4cc8b1a51987e47e31e5a3e9298ced934caa" translate="yes" xml:space="preserve">
          <source>The following is a list of the available feature names.</source>
          <target state="translated">다음은 사용 가능한 기능 이름의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="7bfbc404b57ece9100ac4d9b168ae9cc179de313" translate="yes" xml:space="preserve">
          <source>The following is an example of a derive macro. Instead of doing anything useful with its input, it just appends a function &lt;code&gt;answer&lt;/code&gt;.</source>
          <target state="translated">다음은 파생 매크로의 예입니다. 입력에 유용한 작업을 수행하는 대신 함수 &lt;code&gt;answer&lt;/code&gt; 만 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="cb90a0db80f40417302eef01e3aacf14fbc10a30" translate="yes" xml:space="preserve">
          <source>The following is an example of declaring &lt;code&gt;Shape&lt;/code&gt; to be a supertrait of &lt;code&gt;Circle&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;Shape&lt;/code&gt; 를 &lt;code&gt;Circle&lt;/code&gt; 의 상위 특성으로 선언하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="0bc86808e703044cc02c714fea381b5d6b4eb104" translate="yes" xml:space="preserve">
          <source>The following is an index of all built-in attributes.</source>
          <target state="translated">다음은 모든 내장 속성의 색인입니다.</target>
        </trans-unit>
        <trans-unit id="7cc1fc6a380ba45eaa1f4f2110280733486f387c" translate="yes" xml:space="preserve">
          <source>The following is an overview of the available synchronization objects:</source>
          <target state="translated">다음은 사용 가능한 동기화 개체에 대한 개요입니다.</target>
        </trans-unit>
        <trans-unit id="e77d4cd3fb5ca40ba38b2400787449b1eb8f401a" translate="yes" xml:space="preserve">
          <source>The following keywords are reserved beginning in the 2018 edition.</source>
          <target state="translated">다음 키워드는 2018 년판부터 예약되었습니다.</target>
        </trans-unit>
        <trans-unit id="88a73d4d23e456f05faa46221aa0e7b9298c7349" translate="yes" xml:space="preserve">
          <source>The following keywords currently have the functionality described.</source>
          <target state="translated">다음 키워드에는 현재 설명 된 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5d973323cad12bb72185383671304dcd5ab9469" translate="yes" xml:space="preserve">
          <source>The following keywords do not have any functionality but are reserved by Rust for potential future use.</source>
          <target state="translated">다음 키워드는 기능이 없지만 나중에 사용할 수 있도록 Rust에 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e441a28a0807978c7d9ce6b3cf8c4bd39296d4e8" translate="yes" xml:space="preserve">
          <source>The following keywords were added beginning in the 2018 edition.</source>
          <target state="translated">2018 년 초부터 다음 키워드가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="7de22ffd047d06a2d94087f0583e69c5de3c8513" translate="yes" xml:space="preserve">
          <source>The following language level features cannot be used in the safe subset of Rust:</source>
          <target state="translated">다음 언어 레벨 기능은 Rust의 안전한 서브 세트에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fa4bbe49e1fb3a478a935beaddada675b665b643" translate="yes" xml:space="preserve">
          <source>The following list contains all non-letters that don&amp;rsquo;t function as operators; that is, they don&amp;rsquo;t behave like a function or method call.</source>
          <target state="translated">다음 목록에는 연산자로 작동하지 않는 모든 비 레터가 포함되어 있습니다. 즉, 함수 또는 메서드 호출처럼 동작하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35b04ccb391eee75aac9df7cb7f1bfc81254ebee" translate="yes" xml:space="preserve">
          <source>The following list contains keywords that are reserved for current or future use by the Rust language. As such, they cannot be used as identifiers (except as raw identifiers as we&amp;rsquo;ll discuss in the &amp;ldquo;&lt;a href=&quot;#raw-identifiers&quot;&gt;Raw Identifiers&lt;/a&gt;&amp;rdquo; section), including names of functions, variables, parameters, struct fields, modules, crates, constants, macros, static values, attributes, types, traits, or lifetimes.</source>
          <target state="translated">다음 목록에는 Rust 언어에서 현재 또는 나중에 사용하도록 예약 된 키워드가 포함되어 있습니다. 따라서 함수 이름, 변수, 매개 변수, 구조체 필드, 모듈, 상자, 상수, 매크로, 정적 값을 포함하여 식별자로 사용할 수 없습니다 ( &quot; &lt;a href=&quot;#raw-identifiers&quot;&gt;원시 식별자&lt;/a&gt; &quot;섹션 에서 설명 할 원시 식별자 제외 ). , 속성, 유형, 특성 또는 수명.</target>
        </trans-unit>
        <trans-unit id="92af89abc5b10810cac2bde7c4403090edbb5361" translate="yes" xml:space="preserve">
          <source>The following notations are used by the &lt;em&gt;Lexer&lt;/em&gt; and &lt;em&gt;Syntax&lt;/em&gt; grammar snippets:</source>
          <target state="translated">다음 표기법은 &lt;em&gt;Lexer&lt;/em&gt; 및 &lt;em&gt;구문&lt;/em&gt; 문법 스 니펫 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6c611de22c83326f1c10498c47d838ad78c2827b" translate="yes" xml:space="preserve">
          <source>The following return &lt;a href=&quot;../primitive.bool&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;../primitive.bool&quot;&gt; &lt;code&gt;false&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="452576d6c51a73e57d8181671d67361d1616b8f6" translate="yes" xml:space="preserve">
          <source>The following return false:</source>
          <target state="translated">다음은 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b857efb8bb558af5cdfcfd53ef42f4d49fe84301" translate="yes" xml:space="preserve">
          <source>The following rewritten version of &lt;code&gt;another_function&lt;/code&gt; shows what parameters look like in Rust:</source>
          <target state="translated">다음으로 작성된 &lt;code&gt;another_function&lt;/code&gt; 버전은 Rust에서 어떤 매개 변수가 나타나는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7befecdaf697f20709a802fcb20813e2f422fba6" translate="yes" xml:space="preserve">
          <source>The following sections contain reference material you may find useful in your Rust journey.</source>
          <target state="translated">다음 섹션에는 Rust 여행에 유용한 참조 자료가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d4dd709d05236da16b69a96983ce9c67ce45124" translate="yes" xml:space="preserve">
          <source>The following steps install the latest stable version of the Rust compiler. Rust&amp;rsquo;s stability guarantees ensure that all the examples in the book that compile will continue to compile with newer Rust versions. The output might differ slightly between versions, because Rust often improves error messages and warnings. In other words, any newer, stable version of Rust you install using these steps should work as expected with the content of this book.</source>
          <target state="translated">다음 단계는 최신 안정 버전의 Rust 컴파일러를 설치합니다. Rust의 안정성은이 책의 모든 예제가 새로운 Rust 버전으로 계속 컴파일되도록 보장합니다. Rust는 종종 오류 메시지와 경고를 개선하기 때문에 출력은 버전마다 약간 다를 수 있습니다. 다시 말해,이 단계를 사용하여 설치하는 새롭고 안정적인 버전의 Rust가이 책의 내용에 맞게 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="d23c37bf8f18aef980fb1fbefe90db0a500a0719" translate="yes" xml:space="preserve">
          <source>The following table gives the size for primitives.</source>
          <target state="translated">다음 표는 프리미티브의 크기를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3bc9c0126109b1bad1345c2a1d2c68127ed67d67" translate="yes" xml:space="preserve">
          <source>The following traits are implemented for all &lt;code&gt;&amp;amp;T&lt;/code&gt;, regardless of the type of its referent:</source>
          <target state="translated">참조 유형에 관계없이 모든 &lt;code&gt;&amp;amp;T&lt;/code&gt; 대해 다음과 같은 특성이 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="3e9fcf457a5e9ecd7495ab63bfd0f41db2476290" translate="yes" xml:space="preserve">
          <source>The following traits are implemented on &lt;code&gt;&amp;amp;T&lt;/code&gt; references if the underlying &lt;code&gt;T&lt;/code&gt; also implements that trait:</source>
          <target state="translated">기본 &lt;code&gt;T&lt;/code&gt; 가 해당 특성을 구현하는 경우 &lt;code&gt;&amp;amp;T&lt;/code&gt; 참조 에 다음 특성이 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="be48c1df52265e0b68ec35bc1f2481219af6ad7a" translate="yes" xml:space="preserve">
          <source>The following will print &quot;Custom panic hook&quot;:</source>
          <target state="translated">다음은 &quot;Custom panic hook&quot;을 인쇄합니다 :</target>
        </trans-unit>
        <trans-unit id="882019462e8fd74a5df1bf54582eb004918743ba" translate="yes" xml:space="preserve">
          <source>The following will print &quot;Normal panic&quot;:</source>
          <target state="translated">다음은 &quot;정상 패닉&quot;을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="2a310cc6ed2f47da18129871732d4b9900992d6f" translate="yes" xml:space="preserve">
          <source>The formal way of describing this behavior is that expressions of type &lt;code&gt;!&lt;/code&gt; can be coerced into any other type. We&amp;rsquo;re allowed to end this &lt;code&gt;match&lt;/code&gt; arm with &lt;code&gt;continue&lt;/code&gt; because &lt;code&gt;continue&lt;/code&gt; doesn&amp;rsquo;t return a value; instead, it moves control back to the top of the loop, so in the &lt;code&gt;Err&lt;/code&gt; case, we never assign a value to &lt;code&gt;guess&lt;/code&gt;.</source>
          <target state="translated">이 동작을 설명하는 공식적인 방법은 &lt;code&gt;!&lt;/code&gt; 다른 유형으로 강요 할 수 있습니다. &lt;code&gt;continue&lt;/code&gt; 는 값을 반환하지 않기 때문에이 &lt;code&gt;match&lt;/code&gt; arm을 &lt;code&gt;continue&lt;/code&gt; 로 종료 할 수 있습니다 . 대신 제어를 루프의 맨 위로 이동하므로 &lt;code&gt;Err&lt;/code&gt; 의 경우 &lt;code&gt;guess&lt;/code&gt; 에 값을 할당하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="cd8574fedd8387c0dcc9c1aeee32062dd23e8095" translate="yes" xml:space="preserve">
          <source>The full path is created by joining the original path to &lt;code&gt;read_dir&lt;/code&gt; with the filename of this entry.</source>
          <target state="translated">전체 경로는 원래 경로를 &lt;code&gt;read_dir&lt;/code&gt; 에이 항목의 파일 이름과 결합하여 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="41bd7d7e62e02a905d152c2bd99a0375a7ed8226" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;inner_drop&lt;/code&gt; has the type that &lt;code&gt;drop&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; have, so this makes sure that you do not accidentally use &lt;code&gt;self&lt;/code&gt;/&lt;code&gt;this&lt;/code&gt; in a way that is in conflict with pinning.</source>
          <target state="translated">&lt;code&gt;inner_drop&lt;/code&gt; 함수 에는 &lt;code&gt;drop&lt;/code&gt; 유형이 &lt;em&gt;있어야&lt;/em&gt; 하므로 실수 로 피닝과 충돌하는 방식으로 &lt;code&gt;self&lt;/code&gt; / &lt;code&gt;this&lt;/code&gt; 를 사용하지 않아야 합니다.</target>
        </trans-unit>
        <trans-unit id="bcc8f276c3240e55b6476f93fee8521728c232e7" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; is unsafe because it takes a raw pointer and must trust that this pointer is valid. The &lt;code&gt;offset&lt;/code&gt; method on raw pointers is also unsafe, because it must trust that the offset location is also a valid pointer. Therefore, we had to put an &lt;code&gt;unsafe&lt;/code&gt; block around our calls to &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; so we could call them. By looking at the code and by adding the assertion that &lt;code&gt;mid&lt;/code&gt; must be less than or equal to &lt;code&gt;len&lt;/code&gt;, we can tell that all the raw pointers used within the &lt;code&gt;unsafe&lt;/code&gt; block will be valid pointers to data within the slice. This is an acceptable and appropriate use of &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; 함수 는 원시 포인터를 사용 하므로이 포인터가 유효하다는 것을 신뢰해야하므로 안전하지 않습니다. 원시 포인터 의 &lt;code&gt;offset&lt;/code&gt; 방법도 오프셋 위치가 유효한 포인터임을 신뢰해야하므로 안전하지 않습니다. 따라서 &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; 및 &lt;code&gt;offset&lt;/code&gt; 호출에 &lt;code&gt;unsafe&lt;/code&gt; 블록 을 배치하여 호출 할 수 있도록해야했습니다. 코드를 살펴보고 &lt;code&gt;mid&lt;/code&gt; 가 &lt;code&gt;len&lt;/code&gt; 보다 작거나 같아야 하는 어설 션을 추가 하면 &lt;code&gt;unsafe&lt;/code&gt; 블록 내에서 사용되는 모든 원시 포인터 가 슬라이스 내 데이터에 대한 유효한 포인터 임을 알 수 있습니다 . 이것은 수용 가능하고 적절한 사용입니다 &lt;code&gt;unsafe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2cd654b546be7671958f348149444656b0175877" translate="yes" xml:space="preserve">
          <source>The function body uses the &lt;code&gt;assert_eq!&lt;/code&gt; macro to assert that 2 + 2 equals 4. This assertion serves as an example of the format for a typical test. Let&amp;rsquo;s run it to see that this test passes.</source>
          <target state="translated">함수 본문은 &lt;code&gt;assert_eq!&lt;/code&gt; 매크로는 2 + 2가 4와 같다고 주장합니다.이 어설 션은 일반적인 테스트 형식의 예입니다. 이 테스트가 통과했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="fce36fec5fc1977be02dde267db493eca3e79d7a" translate="yes" xml:space="preserve">
          <source>The function must be called with valid byte array &lt;code&gt;buf&lt;/code&gt; of sufficient size to hold the message bytes. If a message is too long to fit in the supplied buffer, excess bytes may be discarded.</source>
          <target state="translated">메시지 바이트를 보유하기에 충분한 크기의 유효한 바이트 배열 &lt;code&gt;buf&lt;/code&gt; 로 함수를 호출해야합니다 . 메시지가 너무 길어 제공된 버퍼에 맞지 않으면 초과 바이트가 삭제 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e529ccf733a9b5ef8b1c476a20d42d70328c6fe4" translate="yes" xml:space="preserve">
          <source>The function panics if &lt;code&gt;align&lt;/code&gt; is not a power-of-two.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 이 2의 거듭 제곱이 아닌 경우 함수 패닉이 발생 합니다 .</target>
        </trans-unit>
        <trans-unit id="3c4c57538d04834ae5173c38a3f23dea7037d387" translate="yes" xml:space="preserve">
          <source>The function signature now tells Rust that for some lifetime &lt;code&gt;'a&lt;/code&gt;, the function takes two parameters, both of which are string slices that live at least as long as lifetime &lt;code&gt;'a&lt;/code&gt;. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime &lt;code&gt;'a&lt;/code&gt;. In practice, it means that the lifetime of the reference returned by the &lt;code&gt;longest&lt;/code&gt; function is the same as the smaller of the lifetimes of the references passed in. These constraints are what we want Rust to enforce. Remember, when we specify the lifetime parameters in this function signature, we&amp;rsquo;re not changing the lifetimes of any values passed in or returned. Rather, we&amp;rsquo;re specifying that the borrow checker should reject any values that don&amp;rsquo;t adhere to these constraints. Note that the &lt;code&gt;longest&lt;/code&gt; function doesn&amp;rsquo;t need to know exactly how long &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; will live, only that some scope can be substituted for &lt;code&gt;'a&lt;/code&gt; that will satisfy this signature.</source>
          <target state="translated">함수 서명은 지금 어떤 평생 것을 녹 말한다 &lt;code&gt;'a&lt;/code&gt; 함수가 수명만큼 적어도 살고 문자열 조각입니다 둘 다 두 개의 매개 변수, 소요 &lt;code&gt;'a&lt;/code&gt; . 함수 시그니처는 또한 Rust에게 함수에서 반환 된 문자열 슬라이스가 적어도 수명 &lt;code&gt;'a&lt;/code&gt; 만큼 지속될 것이라고 알립니다 . 실제로는 참조의 수명이 &lt;code&gt;longest&lt;/code&gt; 함수는 전달 된 레퍼런스의 수명이 짧을 때와 동일합니다. 이러한 제약 조건은 Rust가 적용하기를 원하는 것입니다. 이 함수 시그니처에 수명 매개 변수를 지정할 때 전달되거나 리턴 된 값의 수명은 변경되지 않습니다. 대신 차용 검사기가 이러한 제약 조건을 준수하지 않는 값을 거부하도록 지정합니다. 있습니다 &lt;code&gt;longest&lt;/code&gt; 기능이 정확하게 시간을 알 필요가 없습니다 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 어떤 범위를 대체 할 수있는 유일한 것으로, 살 것이다 &lt;code&gt;'a&lt;/code&gt; 이 서명을 만족시킬 것이다.</target>
        </trans-unit>
        <trans-unit id="bdcb7a1c11baa13711e61ba40d7e28572f624f97" translate="yes" xml:space="preserve">
          <source>The function that defines a procedural macro takes a &lt;code&gt;TokenStream&lt;/code&gt; as an input and produces a &lt;code&gt;TokenStream&lt;/code&gt; as an output. The &lt;code&gt;TokenStream&lt;/code&gt; type is defined by the &lt;code&gt;proc_macro&lt;/code&gt; crate that is included with Rust and represents a sequence of tokens. This is the core of the macro: the source code that the macro is operating on makes up the input &lt;code&gt;TokenStream&lt;/code&gt;, and the code the macro produces is the output &lt;code&gt;TokenStream&lt;/code&gt;. The function also has an attribute attached to it that specifies which kind of procedural macro we&amp;rsquo;re creating. We can have multiple kinds of procedural macros in the same crate.</source>
          <target state="translated">절차 적 매크로를 정의하는 함수는 &lt;code&gt;TokenStream&lt;/code&gt; 을 입력으로 사용하고 &lt;code&gt;TokenStream&lt;/code&gt; 을 출력으로 생성합니다 . &lt;code&gt;TokenStream&lt;/code&gt; 의 타입에 의해 정의된다 &lt;code&gt;proc_macro&lt;/code&gt; 녹 포함 토큰의 시퀀스를 나타내고있다 상자. 이것이 매크로의 핵심입니다. 매크로가 작동하는 소스 코드는 입력 &lt;code&gt;TokenStream&lt;/code&gt; 을 구성하고 매크로가 생성하는 코드는 출력 &lt;code&gt;TokenStream&lt;/code&gt; 입니다. 이 함수에는 생성하는 절차 매크로의 종류를 지정하는 속성도 붙어 있습니다. 같은 상자에 여러 종류의 절차 매크로를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf36f24b39c35b8342b2a6251cb9fb9f153537b5" translate="yes" xml:space="preserve">
          <source>The function will never return and will immediately terminate the current process in a platform specific &quot;abnormal&quot; manner.</source>
          <target state="translated">이 함수는 플랫폼 특정 &quot;비정상적인&quot;방식으로 반환되지 않으며 현재 프로세스를 즉시 종료합니다.</target>
        </trans-unit>
        <trans-unit id="4265d286c4ebab2fa68494c58f7e5472bec6ff8e" translate="yes" xml:space="preserve">
          <source>The functional record update syntax is only allowed for structs. (Struct-like enum variants don't qualify, for example.)</source>
          <target state="translated">기능 레코드 업데이트 구문은 구조체에만 허용됩니다. 예를 들어, 구조와 유사한 열거 형 변형은 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3064e7a399dc1562d735ddcb75b4d1c141aa6d18" translate="yes" xml:space="preserve">
          <source>The functionality and syntax of Rust can be extended with custom definitions called macros. They are given names, and invoked through a consistent syntax:&lt;code&gt;some_extension!(...)&lt;/code&gt;.</source>
          <target state="translated">Rust의 기능과 구문은 매크로라는 사용자 정의로 확장 할 수 있습니다. 이름이 주어지고 &lt;code&gt;some_extension!(...)&lt;/code&gt; 과 같은 일관된 구문을 통해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="90f6e5d380880e28cc22176bc452d0a2cfb51f5f" translate="yes" xml:space="preserve">
          <source>The functions inside this struct are only intended be called on the &lt;code&gt;data&lt;/code&gt; pointer of a properly constructed &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; object from inside the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; implementation. Calling one of the contained functions using any other &lt;code&gt;data&lt;/code&gt; pointer will cause undefined behavior.</source>
          <target state="translated">이 구조체 내부의 함수 는 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 구현 내부에서 올바르게 구성된 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;data&lt;/code&gt; 포인터 에서만 호출됩니다 . 다른 &lt;code&gt;data&lt;/code&gt; 포인터를 사용하여 포함 된 함수 중 하나를 호출 하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3a1ceefd46a3c1a3651802a4204c4c589bc3c7f6" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;impl&lt;/code&gt; for &lt;code&gt;PartialEq&lt;/code&gt; is equivalent to</source>
          <target state="translated">&lt;code&gt;PartialEq&lt;/code&gt; 에 대해 생성 된 &lt;code&gt;impl&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b683f5ed135731413c6d034116ca989acf594401" translate="yes" xml:space="preserve">
          <source>The generator completed with a return value.</source>
          <target state="translated">생성기가 리턴 값으로 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="156bc757a593c6f0753b493e20c7157ef75917ae" translate="yes" xml:space="preserve">
          <source>The generator suspended with a value.</source>
          <target state="translated">생성기가 값으로 일시 중단되었습니다.</target>
        </trans-unit>
        <trans-unit id="cd45c192be4dc3d892b1ef2f0b632aaff12d6653" translate="yes" xml:space="preserve">
          <source>The generic type &lt;code&gt;T&lt;/code&gt; specified as the type of the &lt;code&gt;item1&lt;/code&gt; and &lt;code&gt;item2&lt;/code&gt; parameters constrains the function such that the concrete type of the value passed as an argument for &lt;code&gt;item1&lt;/code&gt; and &lt;code&gt;item2&lt;/code&gt; must be the same.</source>
          <target state="translated">일반 타입 &lt;code&gt;T&lt;/code&gt; 는 의 형식으로 지정된 &lt;code&gt;item1&lt;/code&gt; 과 &lt;code&gt;item2&lt;/code&gt; 제약을 께 값의 구체적인 유형에 대한 인수로 전달하도록 기능 파라미터 &lt;code&gt;item1&lt;/code&gt; 과 &lt;code&gt;item2&lt;/code&gt; 동일해야한다.</target>
        </trans-unit>
        <trans-unit id="1bc01fb3a417f3ff749e03a42ff1490b6833bd43" translate="yes" xml:space="preserve">
          <source>The generic type has to be a SIMD type. Example:</source>
          <target state="translated">일반 유형은 SIMD 유형이어야합니다. 예:</target>
        </trans-unit>
        <trans-unit id="b25fdf4b8d15b07b7d25cece8768d803831d5b3d" translate="yes" xml:space="preserve">
          <source>The given block must have been produced by this allocator, and must be suitable for storing a &lt;code&gt;T&lt;/code&gt; (in terms of alignment as well as minimum and maximum size); otherwise yields undefined behavior.</source>
          <target state="translated">주어진 블록은이 할당 자에 의해 생성되어야하고, (최소 및 최대 크기뿐만 아니라 정렬 측면에서) &lt;code&gt;T&lt;/code&gt; 를 저장하기에 적합해야한다 ; 그렇지 않으면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3ef7afeafd2e9737676d96a4cbd3c7dc2e9ffdbc" translate="yes" xml:space="preserve">
          <source>The glob operator is often used when testing to bring everything under test into the &lt;code&gt;tests&lt;/code&gt; module; we&amp;rsquo;ll talk about that in the &lt;a href=&quot;ch11-01-writing-tests#how-to-write-tests&quot;&gt;&amp;ldquo;How to Write Tests&amp;rdquo;&lt;/a&gt; section in Chapter 11. The glob operator is also sometimes used as part of the prelude pattern: see &lt;a href=&quot;../std/prelude/index#other-preludes&quot;&gt;the standard library documentation&lt;/a&gt; for more information on that pattern.</source>
          <target state="translated">글로브 연산자는 테스트 할 때 테스트중인 모든 것을 &lt;code&gt;tests&lt;/code&gt; 모듈 로 가져 오기 위해 종종 사용됩니다 . 11 장의 &lt;a href=&quot;ch11-01-writing-tests#how-to-write-tests&quot;&gt;&quot;테스트 작성 방법&quot;&lt;/a&gt; 섹션 에서 그에 대해 이야기 할 것입니다 . glob 연산자는 때로는 전주곡 패턴의 일부로 사용되기도 합니다. 해당 패턴에 대한 자세한 내용 &lt;a href=&quot;../std/prelude/index#other-preludes&quot;&gt;은 표준 라이브러리 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="edae830710bf3e8598def4042b918afe98bc10c2" translate="yes" xml:space="preserve">
          <source>The global memory allocator.</source>
          <target state="translated">글로벌 메모리 할당 자.</target>
        </trans-unit>
        <trans-unit id="ec4646ba1a1fdd24f47203209a1bde5837e4ed73" translate="yes" xml:space="preserve">
          <source>The good news is that if the structure &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; convenient for others to use from another library, you don&amp;rsquo;t have to rearrange your internal organization: instead, you can re-export items to make a public structure that&amp;rsquo;s different from your private structure by using &lt;code&gt;pub use&lt;/code&gt;. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.</source>
          <target state="translated">좋은 소식은 다른 라이브러리에서 다른 사람이 사용하기에 구조 &lt;em&gt;가&lt;/em&gt; 불편한 경우 내부 조직을 재 배열 할 필요가 없다는 것입니다. 대신 개인 구조와 다른 공용 구조를 만들기 위해 항목을 다시 내보낼 수 있습니다. 사용하여 &lt;code&gt;pub use&lt;/code&gt; . 다시 내보내기는 한 위치에서 공개 항목을 가져 와서 다른 위치에서 정의 된 것처럼 다른 위치에서 공개합니다.</target>
        </trans-unit>
        <trans-unit id="9e529cd967841dc9eed1fc815f3a4e6b886e5b38" translate="yes" xml:space="preserve">
          <source>The grammar and lexical structure is in blockquotes with either &quot;Lexer&quot; or &quot;Syntax&quot; in &lt;sup&gt;&lt;strong&gt;bold superscript&lt;/strong&gt;&lt;/sup&gt; as the first line.</source>
          <target state="translated">문법과 어휘 구조는 첫 번째 줄로 &lt;sup&gt;&lt;strong&gt;굵은 위첨자&lt;/strong&gt;&lt;/sup&gt; 에 &quot;Lexer&quot;또는 &quot;Syntax&quot;가 &lt;sup&gt;&lt;strong&gt;붙은&lt;/strong&gt;&lt;/sup&gt; 인용 부호 입니다.</target>
        </trans-unit>
        <trans-unit id="1f36df1235888018fbfcd5153ebfed60de89aef3" translate="yes" xml:space="preserve">
          <source>The grammar production for reference patterns has to match the token &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to match a reference to a reference because it is a token by itself, not two &lt;code&gt;&amp;amp;&lt;/code&gt; tokens.</source>
          <target state="translated">기준 패턴 문법 생산 토큰이 일치해야 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 은 토큰 자체가 없기 때문에 두 기준 참조 일치 &lt;code&gt;&amp;amp;&lt;/code&gt; 토큰.</target>
        </trans-unit>
        <trans-unit id="ecdb2fc042ccb9955819301d5b939d1fbe330ddf" translate="yes" xml:space="preserve">
          <source>The green-threading M:N model requires a larger language runtime to manage threads. As such, the Rust standard library only provides an implementation of 1:1 threading. Because Rust is such a low-level language, there are crates that implement M:N threading if you would rather trade overhead for aspects such as more control over which threads run when and lower costs of context switching, for example.</source>
          <target state="translated">그린 스레딩 M : N 모델은 스레드를 관리하기 위해 더 큰 언어 런타임이 필요합니다. 따라서 Rust 표준 라이브러리는 1 : 1 스레딩 구현 만 제공합니다. Rust는 저수준 언어이기 때문에 예를 들어 컨텍스트 전환 비용을 낮추고 컨텍스트 전환 비용을 낮추는 스레드 제어에 대한 오버 헤드를 조정하려는 경우 M : N 스레딩을 구현하는 상자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebee4d45f3971e13391e35d52c5a14b0340c1efd" translate="yes" xml:space="preserve">
          <source>The handle for reading from the child's standard error (stderr), if it has been captured.</source>
          <target state="translated">자식의 표준 오류 (stderr)를 읽은 경우이를 읽기위한 핸들입니다.</target>
        </trans-unit>
        <trans-unit id="fbdaac9b24bb1d15aadc721c15a3031cb1337d9a" translate="yes" xml:space="preserve">
          <source>The handle for reading from the child's standard output (stdout), if it has been captured.</source>
          <target state="translated">자식의 표준 출력 (stdout)에서 캡처 된 경우 읽기위한 핸들입니다.</target>
        </trans-unit>
        <trans-unit id="d208573c971bb153ba34475100ea53bd4242537e" translate="yes" xml:space="preserve">
          <source>The handle for writing to the child's standard input (stdin), if it has been captured.</source>
          <target state="translated">아이의 표준 입력 (stdin)에 기록하기위한 핸들입니다.</target>
        </trans-unit>
        <trans-unit id="a9febcaaba526b722c76a7ab2b805ffd862b6652" translate="yes" xml:space="preserve">
          <source>The hash map is initially created with a capacity of 0, so it will not allocate until it is first inserted into.</source>
          <target state="translated">해시 맵은 처음에 용량이 0으로 만들어 지므로 처음 삽입 될 때까지 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ee8ffcf3c4827d14350f3675ea8e7360ee55ee19" translate="yes" xml:space="preserve">
          <source>The hash map will be able to hold at least &lt;code&gt;capacity&lt;/code&gt; elements without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the hash map will not allocate.</source>
          <target state="translated">해시 맵은 재 할당없이 최소한의 &lt;code&gt;capacity&lt;/code&gt; 요소 를 보유 할 수 있습니다 . 경우 &lt;code&gt;capacity&lt;/code&gt; 0, 해시 맵이 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0b56c1bdca2b1b95316afe0ecdd6afdabfe66713" translate="yes" xml:space="preserve">
          <source>The hash set is also created with the default initial capacity.</source>
          <target state="translated">해시 세트도 기본 초기 용량으로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="b637bd7a31fb790788f10cfb96ebb867cfd6151d" translate="yes" xml:space="preserve">
          <source>The hash set is initially created with a capacity of 0, so it will not allocate until it is first inserted into.</source>
          <target state="translated">해시 세트는 처음에 용량 0으로 작성되므로 처음 삽입 될 때까지 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b099ba43b1ded8417cfcd0145835bc5cf64881f" translate="yes" xml:space="preserve">
          <source>The hash set will be able to hold at least &lt;code&gt;capacity&lt;/code&gt; elements without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the hash set will not allocate.</source>
          <target state="translated">해시 세트는 재 할당없이 최소 &lt;code&gt;capacity&lt;/code&gt; 요소 를 보유 할 수 있습니다 . 경우 &lt;code&gt;capacity&lt;/code&gt; 0, 해시 세트는 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8a4e0ea14c5f027cfeb61abdb7d26fe519f8ab6" translate="yes" xml:space="preserve">
          <source>The hash table implementation is a Rust port of Google's &lt;a href=&quot;https://abseil.io/blog/20180927-swisstables&quot;&gt;SwissTable&lt;/a&gt;. The original C++ version of SwissTable can be found &lt;a href=&quot;https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h&quot;&gt;here&lt;/a&gt;, and this &lt;a href=&quot;https://www.youtube.com/watch?v=ncHmEUmJZf4&quot;&gt;CppCon talk&lt;/a&gt; gives an overview of how the algorithm works.</source>
          <target state="translated">해시 테이블 구현은 Google &lt;a href=&quot;https://abseil.io/blog/20180927-swisstables&quot;&gt;SwissTable&lt;/a&gt; 의 Rust 포트입니다 . SwissTable의 원래 C ++ 버전은 &lt;a href=&quot;https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 &lt;a href=&quot;https://www.youtube.com/watch?v=ncHmEUmJZf4&quot;&gt;있으며이 CppCon talk&lt;/a&gt; 는 알고리즘 작동 방식에 대한 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="415bb7e03ead8b051422fe277c860425b7ebbf61" translate="yes" xml:space="preserve">
          <source>The hashing algorithm can be replaced on a per-&lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;#method.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#method.with_hasher&quot;&gt;&lt;code&gt;with_hasher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#method.with_capacity_and_hasher&quot;&gt;&lt;code&gt;with_capacity_and_hasher&lt;/code&gt;&lt;/a&gt; methods. Many alternative algorithms are available on crates.io, such as the &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt;&lt;code&gt;fnv&lt;/code&gt;&lt;/a&gt; crate.</source>
          <target state="translated">해싱 알고리즘은 &lt;a href=&quot;#method.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#method.with_hasher&quot;&gt; &lt;code&gt;with_hasher&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#method.with_capacity_and_hasher&quot;&gt; &lt;code&gt;with_capacity_and_hasher&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 &lt;code&gt;HashMap&lt;/code&gt; 별로 교체 할 수 있습니다 . &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt; &lt;code&gt;fnv&lt;/code&gt; &lt;/a&gt; crate 와 같은 crates.io에서 많은 대체 알고리즘을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36e2055f1b7671fa46f87316bf9cf49547025536" translate="yes" xml:space="preserve">
          <source>The heart and soul of this module is the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; trait. The core of &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; looks like this:</source>
          <target state="translated">이 모듈의 핵심은 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 특성입니다. &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 핵심은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f7cf9da11ff393d577012f24f0fd7f9d800c440a" translate="yes" xml:space="preserve">
          <source>The heart of the change is that where &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; used to default to &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'a&amp;gt;&lt;/code&gt;, it now defaults to &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'static&amp;gt;&lt;/code&gt; (here, &lt;code&gt;SomeTrait&lt;/code&gt; is the name of some trait type). Note that the only types which are affected are references to boxes, like &lt;code&gt;&amp;amp;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;[Box&amp;lt;SomeTrait&amp;gt;]&lt;/code&gt;. More common types like &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; or &lt;code&gt;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; are unaffected.</source>
          <target state="translated">변경의 핵심은 &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; 이 기본값으로 &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'a&amp;gt;&lt;/code&gt; , 기본값은 &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'static&amp;gt;&lt;/code&gt; (여기서 &lt;code&gt;SomeTrait&lt;/code&gt; 은 일부 특성 유형). 영향을받는 유일한 유형은 &lt;code&gt;&amp;amp;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;amp;[Box&amp;lt;SomeTrait&amp;gt;]&lt;/code&gt; 과 같은 상자에 대한 참조 입니다. &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; 또는 &lt;code&gt;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; 와 같은 더 일반적인 유형 은 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b80292943879aaefba4fcd89176f25fb4fe681b" translate="yes" xml:space="preserve">
          <source>The help text reveals that the return type needs a generic lifetime parameter on it because Rust can&amp;rsquo;t tell whether the reference being returned refers to &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;. Actually, we don&amp;rsquo;t know either, because the &lt;code&gt;if&lt;/code&gt; block in the body of this function returns a reference to &lt;code&gt;x&lt;/code&gt; and the &lt;code&gt;else&lt;/code&gt; block returns a reference to &lt;code&gt;y&lt;/code&gt;!</source>
          <target state="translated">러스트 텍스트는 리턴되는 참조가 &lt;code&gt;x&lt;/code&gt; 또는 &lt;code&gt;y&lt;/code&gt; 를 참조하는지 여부를 알 수 없으므로 도움말 텍스트에 리턴 유형에 일반 수명 매개 변수가 필요하다는 내용이 표시 됩니다. 실제로이 함수의 본문에 있는 &lt;code&gt;if&lt;/code&gt; 블록은 &lt;code&gt;x&lt;/code&gt; 에 대한 참조를 반환 하고 &lt;code&gt;else&lt;/code&gt; 블록은 &lt;code&gt;y&lt;/code&gt; 에 대한 참조를 반환 하기 때문에 우리도 알 수 없습니다 !</target>
        </trans-unit>
        <trans-unit id="d58a9f4bf1938432cc316db1e69ad2bfca3de5d4" translate="yes" xml:space="preserve">
          <source>The highest valid code point a &lt;code&gt;char&lt;/code&gt; can have.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 가 가질 수있는 가장 유효한 코드 포인트 입니다.</target>
        </trans-unit>
        <trans-unit id="2c0d414ff9adc0b33c0f3d50d800e4ef1b9ec6d2" translate="yes" xml:space="preserve">
          <source>The hook is provided with a &lt;code&gt;Layout&lt;/code&gt; struct which contains information about the allocation that failed.</source>
          <target state="translated">후크 에는 실패한 할당에 대한 정보가 포함 된 &lt;code&gt;Layout&lt;/code&gt; 구조체 가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="c05a8db594383eaa649c0ea9f1230d31e2d9d207" translate="yes" xml:space="preserve">
          <source>The hook is provided with a &lt;code&gt;PanicInfo&lt;/code&gt; struct which contains information about the origin of the panic, including the payload passed to &lt;code&gt;panic!&lt;/code&gt; and the source code location from which the panic originated.</source>
          <target state="translated">후크 에는 패닉에 전달 된 페이로드를 포함하여 패닉의 출처에 대한 정보를 포함 하는 &lt;code&gt;PanicInfo&lt;/code&gt; 구조체 가 제공됩니다 &lt;code&gt;panic!&lt;/code&gt; 패닉이 발생한 소스 코드 위치.</target>
        </trans-unit>
        <trans-unit id="c5e73d7bf13606a783c42b98ca4eecc2c703d2de" translate="yes" xml:space="preserve">
          <source>The identifier is more than one character. &lt;code&gt;_&lt;/code&gt; alone is not an identifier.</source>
          <target state="translated">식별자가 둘 이상의 문자입니다. &lt;code&gt;_&lt;/code&gt; 만으로는 식별자가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="714243f838efe98c2e10bdbb7f1411daa3ecd7a0" translate="yes" xml:space="preserve">
          <source>The identifier is the name of the constant used in the path. The type is the type that the definition has to implement.</source>
          <target state="translated">식별자는 경로에 사용 된 상수의 이름입니다. 유형은 정의가 구현해야하는 유형입니다.</target>
        </trans-unit>
        <trans-unit id="3a2c9033b8c31ad61606f019cbc00c4420b891b9" translate="yes" xml:space="preserve">
          <source>The identifier is the name of the declared type alias. The optional trait bounds must be fulfilled by the implementations of the type alias.</source>
          <target state="translated">식별자는 선언 된 타입 별칭의 이름입니다. 선택적 특성 한계는 유형 별명의 구현으로 충족되어야합니다.</target>
        </trans-unit>
        <trans-unit id="1c83f053af5e622145b3145a7189cafa0c9167a0" translate="yes" xml:space="preserve">
          <source>The identifier is the name of the function. The generics, parameter list, return type, and where clause of the associated function must be the same as the associated function declarations's.</source>
          <target state="translated">식별자는 함수의 이름입니다. 연관된 함수의 generics, 매개 변수 목록, 리턴 유형 및 where 절은 연관된 함수 선언과 동일해야합니다.</target>
        </trans-unit>
        <trans-unit id="a0f93995f216b848984f480fd53d07ae2b2c30e6" translate="yes" xml:space="preserve">
          <source>The idiomatic way to write a &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; for its side effects is to use a &lt;code&gt;for&lt;/code&gt; loop instead:</source>
          <target state="translated">부작용에 대한 &lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 을 작성하는 관용적 방법 은 &lt;code&gt;for&lt;/code&gt; 루프를 대신 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a17be86477c61cc7613b2ed105a5af337a27c206" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;Display&lt;/code&gt; uses &lt;code&gt;self.0&lt;/code&gt; to access the inner &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, because &lt;code&gt;Wrapper&lt;/code&gt; is a tuple struct and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; is the item at index 0 in the tuple. Then we can use the functionality of the &lt;code&gt;Display&lt;/code&gt; type on &lt;code&gt;Wrapper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Wrapper&lt;/code&gt; 는 튜플 구조체이고 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 는 튜플의 인덱스 0에있는 항목 이므로 &lt;code&gt;Display&lt;/code&gt; 구현 은 &lt;code&gt;self.0&lt;/code&gt; 을 사용하여 내부 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 에 액세스합니다 . 그런 다음 &lt;code&gt;Wrapper&lt;/code&gt; 에서 &lt;code&gt;Display&lt;/code&gt; 유형 의 기능을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64d2ca9bc84ea7c438a453f8d81beffdb2cea48b" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;get&lt;/code&gt; relies in particular on identical implementations of &lt;code&gt;Hash&lt;/code&gt; by determining the key&amp;rsquo;s hash bucket by calling &lt;code&gt;Hash::hash&lt;/code&gt; on the &lt;code&gt;Q&lt;/code&gt; value even though it inserted the key based on the hash value calculated from the &lt;code&gt;K&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 의 구현은 &lt;code&gt;K&lt;/code&gt; 값 에서 계산 된 해시 값을 기반으로 키를 삽입 했더라도 &lt;code&gt;Q&lt;/code&gt; 값 에서 &lt;code&gt;Hash::hash&lt;/code&gt; 를 호출하여 키의 해시 버킷을 결정함으로써 동일한 &lt;code&gt;Hash&lt;/code&gt; 구현에 특히 의존 합니다.</target>
        </trans-unit>
        <trans-unit id="9ddcc339944cbb72b0b66f63ad73cbbefd5f13bf" translate="yes" xml:space="preserve">
          <source>The implementation of this function must make sure to release any resources that are associated with this instance of a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; and associated task.</source>
          <target state="translated">이 기능을 구현하면이 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 인스턴스 및 관련 작업과 관련된 모든 리소스를 해제해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b2b66f02783344ac4bc18a2fce3954484c2ba8e0" translate="yes" xml:space="preserve">
          <source>The implementation of this function must retain all resources that are required for this additional instance of a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; and associated task. Calling &lt;code&gt;wake&lt;/code&gt; on the resulting &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; should result in a wakeup of the same task that would have been awoken by the original &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능의 구현은이 추가 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 인스턴스 및 관련 작업에 필요한 모든 리소스를 유지해야합니다 . 결과 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;wake&lt;/code&gt; 를 호출 하면 원래 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 에서 깨어 났던 동일한 작업이 깨워집니다 .</target>
        </trans-unit>
        <trans-unit id="d439e7f4f40d7bfe18d46ea25d8affbdc7117648" translate="yes" xml:space="preserve">
          <source>The implementation using the state pattern is easy to extend to add more functionality. To see the simplicity of maintaining code that uses the state pattern, try a few of these suggestions:</source>
          <target state="translated">상태 패턴을 사용한 구현은 더 많은 기능을 추가하기 위해 쉽게 확장 할 수 있습니다. 상태 패턴을 사용하는 코드를 유지 관리하는 단순성을 보려면 다음 제안 중 일부를 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="57e5372af92c8ddd71806b33dbda4afe86f48e3e" translate="yes" xml:space="preserve">
          <source>The implementing type within a &lt;a href=&quot;keyword.trait&quot;&gt;&lt;code&gt;trait&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;keyword.impl&quot;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt; block, or the current type within a type definition.</source>
          <target state="translated">&lt;a href=&quot;keyword.trait&quot;&gt; &lt;code&gt;trait&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;keyword.impl&quot;&gt; &lt;code&gt;impl&lt;/code&gt; &lt;/a&gt; 블록 내의 구현 유형 또는 유형 정의 내의 현재 유형</target>
        </trans-unit>
        <trans-unit id="9972687dbff5abd8f4ecb962303ef66ce3678542" translate="yes" xml:space="preserve">
          <source>The index ranges returned by this trait are not required to exactly match those of the forward search in reverse.</source>
          <target state="translated">이 특성에 의해 반환되는 인덱스 범위는 정방향 검색의 인덱스 범위와 정확히 일치 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="fb8e7f22599fed31a57edfd5bc4f1d4fe1de7766" translate="yes" xml:space="preserve">
          <source>The indexed operand of an array indexing expression.</source>
          <target state="translated">배열 인덱싱 표현식의 인덱싱 된 피연산자입니다.</target>
        </trans-unit>
        <trans-unit id="8a276159145a3d291ba8902040d397309a6a3910" translate="yes" xml:space="preserve">
          <source>The inferred type asks the compiler to infer the type if possible based on the surrounding information available. It cannot be used in item signatures. It is often used in generic arguments:</source>
          <target state="translated">유추 된 유형은 사용 가능한 주변 정보를 기반으로 가능한 경우 유형을 유추하도록 컴파일러에 요청합니다. 항목 서명에는 사용할 수 없습니다. 일반적 인수에서 자주 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1b63924c7210ee52ef50642e7b6012f573489c1d" translate="yes" xml:space="preserve">
          <source>The inherent methods of &lt;code&gt;Rc&lt;/code&gt; are all associated functions, which means that you have to call them as e.g., &lt;a href=&quot;#method.get_mut&quot;&gt;&lt;code&gt;Rc::get_mut(&amp;amp;mut value)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;value.get_mut()&lt;/code&gt;. This avoids conflicts with methods of the inner type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">의 고유 한 방법 &lt;code&gt;Rc&lt;/code&gt; 를이 당신이 예를 들어,로 전화해야 함을 의미 모든 관련 기능입니다 &lt;a href=&quot;#method.get_mut&quot;&gt; &lt;code&gt;Rc::get_mut(&amp;amp;mut value)&lt;/code&gt; &lt;/a&gt; 대신 &lt;code&gt;value.get_mut()&lt;/code&gt; . 이것은 내부 유형 &lt;code&gt;T&lt;/code&gt; 의 메소드와의 충돌을 피 합니다.</target>
        </trans-unit>
        <trans-unit id="e9a135c5b11a6bdd25cebdf7bee36ffe6f4a888e" translate="yes" xml:space="preserve">
          <source>The initial value is the value the accumulator will have on the first call.</source>
          <target state="translated">초기 값은 누산기가 첫 번째 호출에서 갖는 값입니다.</target>
        </trans-unit>
        <trans-unit id="05cd051eb5f45770d700d15bc2c291712fe7349d" translate="yes" xml:space="preserve">
          <source>The initial value is the value the accumulator will have on the first call. If applying the closure succeeded against every element of the iterator, &lt;code&gt;try_fold()&lt;/code&gt; returns the final accumulator as success.</source>
          <target state="translated">초기 값은 누산기가 첫 번째 호출에서 갖는 값입니다. 반복자의 모든 요소에 대해 클로저를 적용하면 &lt;code&gt;try_fold()&lt;/code&gt; 는 최종 누산기를 성공으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="005959a16886789f6cb716c2b5dc5bbb0daa12f9" translate="yes" xml:space="preserve">
          <source>The initializer of</source>
          <target state="translated">이니셜 라이저</target>
        </trans-unit>
        <trans-unit id="37009e2d28047124f91d44e005708dbff225d4db" translate="yes" xml:space="preserve">
          <source>The initializer of a &lt;a href=&quot;statements#let-statements&quot;&gt;let statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;statements#let-statements&quot;&gt;let 문의&lt;/a&gt; 초기화 프로그램입니다 .</target>
        </trans-unit>
        <trans-unit id="b9db1fa1a8ca22dc3f22f48be8f2cc5fef02b51c" translate="yes" xml:space="preserve">
          <source>The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is the token stream of the item that has the &lt;code&gt;derive&lt;/code&gt; attribute on it. The output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; must be a set of items that are then appended to the &lt;a href=&quot;items/modules&quot;&gt;module&lt;/a&gt; or &lt;a href=&quot;expressions/block-expr&quot;&gt;block&lt;/a&gt; that the item from the input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">입력 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;derive&lt;/code&gt; 속성 이있는 항목의 토큰 스트림입니다 . 출력 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;items/modules&quot;&gt;모듈에&lt;/a&gt; 추가 되거나 입력 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt; 의 항목이있는 것을 &lt;a href=&quot;expressions/block-expr&quot;&gt;차단&lt;/a&gt; 하는 일련의 항목이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="3584f2f431d39b47066e06bb0ba2d085c77c3d1e" translate="yes" xml:space="preserve">
          <source>The input iterator &lt;code&gt;replace_with&lt;/code&gt; is only consumed when the &lt;code&gt;Splice&lt;/code&gt; value is dropped.</source>
          <target state="translated">입력 반복자 &lt;code&gt;replace_with&lt;/code&gt; 는 &lt;code&gt;Splice&lt;/code&gt; 값이 삭제 된 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c198c64d60547785c3da652e9852896f77fa00d7" translate="yes" xml:space="preserve">
          <source>The installation script automatically adds Rust to your system PATH after your next login. If you want to start using Rust right away instead of restarting your terminal, run the following command in your shell to add Rust to your system PATH manually:</source>
          <target state="translated">설치 스크립트는 다음 로그인 후 시스템 경로에 Rust를 자동으로 추가합니다. 터미널을 다시 시작하지 않고 Rust를 즉시 사용하려면 쉘에서 다음 명령을 실행하여 Rust를 시스템 PATH에 수동으로 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="a382c15195dddde8bba4823548e75c4adc802c3c" translate="yes" xml:space="preserve">
          <source>The installer also includes a copy of the documentation locally, so you can read it offline. Run &lt;code&gt;rustup doc&lt;/code&gt; to open the local documentation in your browser.</source>
          <target state="translated">설치 프로그램에는 로컬로 설명서 사본이 포함되어 있으므로 오프라인에서 읽을 수 있습니다. &lt;code&gt;rustup doc&lt;/code&gt; 을 실행 하여 브라우저에서 로컬 문서를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="eb4481a6d93414e0e2ed7586ff1e0910b51585be" translate="yes" xml:space="preserve">
          <source>The integral types provide inherent methods to allow programmers explicitly to perform wrapping arithmetic. For example, &lt;code&gt;i32::wrapping_add&lt;/code&gt; provides two's complement, wrapping addition.</source>
          <target state="translated">정수 유형은 프로그래머가 래핑 산술을 명시 적으로 수행 할 수있는 고유 한 방법을 제공합니다. 예를 들어, &lt;code&gt;i32::wrapping_add&lt;/code&gt; 는 래핑 추가라는 2의 보수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a2f153ef163d784268a26bcb041875def3bd700b" translate="yes" xml:space="preserve">
          <source>The integration tests section starts with the line &lt;code&gt;Running target/debug/deps/integration_test-ce99bcc2479f4607&lt;/code&gt; (the hash at the end of your output will be different). Next, there is a line for each test function in that integration test and a summary line for the results of the integration test just before the &lt;code&gt;Doc-tests adder&lt;/code&gt; section starts.</source>
          <target state="translated">통합 테스트 섹션은 &lt;code&gt;Running target/debug/deps/integration_test-ce99bcc2479f4607&lt;/code&gt; 라인으로 시작 합니다 (출력 끝의 해시는 다름). 다음으로 해당 통합 테스트의 각 테스트 기능에 대한 행과 &lt;code&gt;Doc-tests adder&lt;/code&gt; 섹션이 시작 하기 직전에 통합 테스트 결과에 대한 요약 라인 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c8b39dac0f0603ab0205cf2bfd1df712c7506c4" translate="yes" xml:space="preserve">
          <source>The intention is that the underlying data is only valid for the lifetime &lt;code&gt;'a&lt;/code&gt;, so &lt;code&gt;Slice&lt;/code&gt; should not outlive &lt;code&gt;'a&lt;/code&gt;. However, this intent is not expressed in the code, since there are no uses of the lifetime &lt;code&gt;'a&lt;/code&gt; and hence it is not clear what data it applies to. We can correct this by telling the compiler to act &lt;em&gt;as if&lt;/em&gt; the &lt;code&gt;Slice&lt;/code&gt; struct contained a reference &lt;code&gt;&amp;amp;'a T&lt;/code&gt;:</source>
          <target state="translated">의도는 기본 데이터가 수명에 대해서만 유효하다는 것이다 &lt;code&gt;'a&lt;/code&gt; 그래서, &lt;code&gt;Slice&lt;/code&gt; 해야보다 오래되지 &lt;code&gt;'a&lt;/code&gt; . 그러나이 의도는 코드에서 표현되지 않습니다. 왜냐하면 수명 &lt;code&gt;'a&lt;/code&gt; 를 사용 하지 않으므로 어떤 데이터가 적용되는지 명확하지 않습니다. 우리는 행동하는 컴파일러를 말함으로써이 문제를 해결할 수있는 &lt;em&gt;것처럼 &lt;/em&gt; &lt;code&gt;Slice&lt;/code&gt; 구조체에 대한 참조 포함 &lt;code&gt;&amp;amp;'a T&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c6ec3ee71b429b0c861d2949630c53c1d4103ef2" translate="yes" xml:space="preserve">
          <source>The internal algorithm is not specified, and so it and its hashes should not be relied upon over releases.</source>
          <target state="translated">내부 알고리즘은 지정되어 있지 않으므로, 릴리스와 그 해시가 초과 릴리스에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="c411eb080c209397146b14ba5a4bb34e75cec138" translate="yes" xml:space="preserve">
          <source>The internal buffer is written out before returning the writer.</source>
          <target state="translated">기록기를 반환하기 전에 내부 버퍼가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="ce78ff22afeda7a6f00a6ca8444175752d52c4ff" translate="yes" xml:space="preserve">
          <source>The internal iterator over the argument has not been advanced by the time the first &lt;code&gt;{}&lt;/code&gt; is seen, so it prints the first argument. Then upon reaching the second &lt;code&gt;{}&lt;/code&gt;, the iterator has advanced forward to the second argument. Essentially, parameters which explicitly name their argument do not affect parameters which do not name an argument in terms of positional specifiers.</source>
          <target state="translated">첫 번째 &lt;code&gt;{}&lt;/code&gt; 를 볼 때까지 인수에 대한 내부 반복자가 진행되지 않았 으므로 첫 번째 인수를 인쇄합니다. 그런 다음 두 번째 &lt;code&gt;{}&lt;/code&gt; 에 도달하면 반복자는 두 번째 인수로 진행합니다. 기본적으로 인수의 이름을 명시 적으로 지정하는 매개 변수는 위치 지정자 측면에서 인수의 이름을 지정하지 않는 매개 변수에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c46dda1624f616f75baf2894d6d6e54ab12f317" translate="yes" xml:space="preserve">
          <source>The inverse of this method is &lt;a href=&quot;#method.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법의 반대는 &lt;a href=&quot;#method.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dbc762f2fb2ae9279c20887c42fbcb66ef8ed68d" translate="yes" xml:space="preserve">
          <source>The inverse of this method is &lt;a href=&quot;struct.string#method.as_bytes&quot;&gt;&lt;code&gt;as_bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법의 역은 &lt;a href=&quot;struct.string#method.as_bytes&quot;&gt; &lt;code&gt;as_bytes&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2057c4ad17ebd71c1902c8394bd83a7474bbd6d5" translate="yes" xml:space="preserve">
          <source>The issue in this case is that &lt;code&gt;foo&lt;/code&gt; is defined as accepting a &lt;code&gt;Fn&lt;/code&gt; with one argument of type &lt;code&gt;String&lt;/code&gt;, but the closure we attempted to pass to it requires one arguments of type &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">이 경우의 문제는 &lt;code&gt;foo&lt;/code&gt; 가 &lt;code&gt;String&lt;/code&gt; 유형의 하나의 인수로 &lt;code&gt;Fn&lt;/code&gt; 을 허용하는 것으로 정의 되지만 전달하려는 클로저에는 &lt;code&gt;usize&lt;/code&gt; 유형의 인수가 하나 필요 하다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="c02789dc84a563007f1b001c6388d43c1756fd64" translate="yes" xml:space="preserve">
          <source>The issue with the tuple code in Listing 4-5 is that we have to return the &lt;code&gt;String&lt;/code&gt; to the calling function so we can still use the &lt;code&gt;String&lt;/code&gt; after the call to &lt;code&gt;calculate_length&lt;/code&gt;, because the &lt;code&gt;String&lt;/code&gt; was moved into &lt;code&gt;calculate_length&lt;/code&gt;.</source>
          <target state="translated">Listing 4-5의 튜플 코드의 문제점은 &lt;code&gt;String&lt;/code&gt; 을 호출 함수 로 반환해야하기 때문에 &lt;code&gt;String&lt;/code&gt; 이 &lt;code&gt;calculate_length&lt;/code&gt; 로 이동 했기 때문에 &lt;code&gt;calculate_length&lt;/code&gt; 를 호출 한 후에도 여전히 &lt;code&gt;String&lt;/code&gt; 을 사용할 수 있다는 것이다 .</target>
        </trans-unit>
        <trans-unit id="1013a496d8eb9ca295e23a82f7ffaec17e1ba13a" translate="yes" xml:space="preserve">
          <source>The issue with this code is evident in the signature of &lt;code&gt;area&lt;/code&gt;:</source>
          <target state="translated">이 코드의 문제는 &lt;code&gt;area&lt;/code&gt; 의 서명에서 분명 합니다 .</target>
        </trans-unit>
        <trans-unit id="e382444929f7f8a00ff868439efd08f11891e2df" translate="yes" xml:space="preserve">
          <source>The items of marker traits cannot be overridden, so there's no need to have them when they cannot be changed per-type anyway. If you wanted them for ergonomic reasons, consider making an extension trait instead.</source>
          <target state="translated">마커 특성의 항목은 재정의 될 수 없으므로 어쨌든 유형별로 변경할 수없는 경우이를 가질 필요가 없습니다. 인체 공학적 이유로 원한다면 확장 특성을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="5e506ce8ee681f90bb70782d8bb4d2dad5bd0685" translate="yes" xml:space="preserve">
          <source>The iterator element type is &lt;a href=&quot;../path/struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반복자 요소 유형은 &lt;a href=&quot;../path/struct.pathbuf&quot;&gt; &lt;code&gt;PathBuf&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6824e2e2ab7393d35f45cbd58638289d41c35be1" translate="yes" xml:space="preserve">
          <source>The iterator must produce exactly the number of elements it reported or diverge before reaching the end.</source>
          <target state="translated">반복자는 마지막에 도달하기 전에보고하거나 발산 한 요소 수를 정확하게 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="857086b346b7dd5e8adf55ad86cbe1dbbf8cbe54" translate="yes" xml:space="preserve">
          <source>The iterator pattern allows you to perform some task on a sequence of items in turn. An iterator is responsible for the logic of iterating over each item and determining when the sequence has finished. When you use iterators, you don&amp;rsquo;t have to reimplement that logic yourself.</source>
          <target state="translated">반복자 패턴을 사용하면 일련의 항목에 대한 작업을 차례로 수행 할 수 있습니다. 반복자는 각 항목을 반복하고 시퀀스가 ​​완료된 시점을 결정하는 논리를 담당합니다. 반복자를 사용할 때는 해당 논리를 직접 구현할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6db07328b493618fb3fe592624d4f327dc32ce7b" translate="yes" xml:space="preserve">
          <source>The iterator reports a size hint where it is either exact (lower bound is equal to upper bound), or the upper bound is &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. The upper bound must only be &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the actual iterator length is larger than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt;. In that case, the lower bound must be &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt;, resulting in a &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;.size_hint&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;(usize::MAX, None)&lt;/code&gt;.</source>
          <target state="translated">반복자는 크기 힌트가 정확하거나 (하한이 상한과 같거나) 상한이 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 경우 크기 힌트를보고합니다 . 실제 반복자 길이가 &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; 보다 큰 경우 상한 은 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 이어야합니다 . 이 경우 하한은 &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; 이어야하며 결과적으로 &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;.size_hint&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;(usize::MAX, None)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f5b68d7a8101dc216e0d59f65c1ebaa471e720b2" translate="yes" xml:space="preserve">
          <source>The iterator returned from this function will return instances of &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Each vector returned will &lt;em&gt;not&lt;/em&gt; have the delimiter byte at the end.</source>
          <target state="translated">이 함수에서 반환 된 반복자는 인스턴스를 돌려줍니다 &lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; . 반환 된 각 벡터 에는 끝에 구분 기호 바이트 가 &lt;em&gt;없습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="43d518530c9a6385f97f5ea0cf3b95e6447ddfae" translate="yes" xml:space="preserve">
          <source>The iterator returned from this function will yield instances of &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Each string returned will &lt;em&gt;not&lt;/em&gt; have a newline byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.</source>
          <target state="translated">이 함수에서 반환 된 반복자는 &lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 의 인스턴스를 생성합니다 . 것입니다 반환 각 문자열 &lt;em&gt;하지&lt;/em&gt; 개행 바이트합니다 (0xa는 바이트) 또는 CRLF가 마지막에 (0xD는 0xa는 바이트).</target>
        </trans-unit>
        <trans-unit id="d98222c90db1c99a084846a0ad925665e5230738" translate="yes" xml:space="preserve">
          <source>The iterator returned will return string slices that are sub-slices of the original string slice, separated by any amount of ASCII whitespace.</source>
          <target state="translated">반환 된 반복기는 임의의 ASCII 공백으로 구분 된 원래 문자열 슬라이스의 하위 슬라이스 인 문자열 슬라이스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="406100c150ec04008e29a14c30e99aed0f63af21" translate="yes" xml:space="preserve">
          <source>The iterator returned will return string slices that are sub-slices of the original string slice, separated by any amount of whitespace.</source>
          <target state="translated">반환 된 반복자는 공백으로 분리 된 원래 문자열 슬라이스의 하위 슬라이스 인 문자열 슬라이스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4221546e7793ded4aa41dc1718c0ee56c99339b5" translate="yes" xml:space="preserve">
          <source>The iterator returned yields pairs &lt;code&gt;(i, val)&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the current index of iteration and &lt;code&gt;val&lt;/code&gt; is the value returned by the iterator.</source>
          <target state="translated">반환 된 반복자는 쌍 &lt;code&gt;(i, val)&lt;/code&gt; 산출합니다 . 여기서 &lt;code&gt;i&lt;/code&gt; 는 현재 반복 색인이고 &lt;code&gt;val&lt;/code&gt; 은 반복자가 반환 한 값입니다.</target>
        </trans-unit>
        <trans-unit id="0d65a2fef7d4c6664fcfb9659495ac349d06a758" translate="yes" xml:space="preserve">
          <source>The iterator starts with the given first item (if any) and calls the given &lt;code&gt;FnMut(&amp;amp;T) -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt; closure to compute each item&amp;rsquo;s successor.</source>
          <target state="translated">반복자는 주어진 첫 번째 항목 (있는 경우)으로 시작하고 주어진 &lt;code&gt;FnMut(&amp;amp;T) -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt; 클로저를 호출하여 각 항목의 후속 항목을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="fe7ef8d083d96a8372351bad5e0da1e04819839b" translate="yes" xml:space="preserve">
          <source>The iterator version was slightly faster! We won&amp;rsquo;t explain the benchmark code here, because the point is not to prove that the two versions are equivalent but to get a general sense of how these two implementations compare performance-wise.</source>
          <target state="translated">반복자 버전이 약간 빨랐습니다! 여기서는 벤치 마크 코드를 설명하지 않을 것입니다. 요점은 두 버전이 동일하다는 것을 증명하는 것이 아니라이 두 구현이 성능 측면에서 어떻게 비교되는지에 대한 일반적인 의미를 갖기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="40a9eac2c27490989d9bce69b525d51e8393ef6d" translate="yes" xml:space="preserve">
          <source>The iterator will never return &lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; and will also not yield the peer's &lt;a href=&quot;struct.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; structure.</source>
          <target state="translated">반복자는 &lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; 을&lt;/a&gt; 반환 하지 않으며 피어의 &lt;a href=&quot;struct.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt; 구조 도 생성하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1eb81e5b136891ec83f03fa70901b0982c774c3e" translate="yes" xml:space="preserve">
          <source>The iterator will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../fs/struct.direntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. New errors may be encountered after an iterator is initially constructed.</source>
          <target state="translated">반복자는 &lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../fs/struct.direntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 의 인스턴스를 생성합니다 . 반복자가 처음 구성된 후 새로운 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54667f9a5f59c23223b23e9276c48f67c43aae4e" translate="yes" xml:space="preserve">
          <source>The iterator will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;struct.direntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. New errors may be encountered after an iterator is initially constructed.</source>
          <target state="translated">반복자는 &lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;struct.direntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 의 인스턴스를 생성합니다 . 반복자가 처음 구성된 후 새로운 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6720eac87f145ca4ebd08c14afcbc3e18eb5bc63" translate="yes" xml:space="preserve">
          <source>The iterator will yield the &lt;code&gt;Path&lt;/code&gt; that is returned if the &lt;a href=&quot;struct.path#method.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt; method is used zero or more times. That means, the iterator will yield &lt;code&gt;&amp;amp;self&lt;/code&gt;, &lt;code&gt;&amp;amp;self.parent().unwrap()&lt;/code&gt;, &lt;code&gt;&amp;amp;self.parent().unwrap().parent().unwrap()&lt;/code&gt; and so on. If the &lt;a href=&quot;struct.path#method.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt; method returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the iterator will do likewise. The iterator will always yield at least one value, namely &lt;code&gt;&amp;amp;self&lt;/code&gt;.</source>
          <target state="translated">반복자는 &lt;a href=&quot;struct.path#method.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt; 메소드가 0 회 이상 사용 되면 리턴 되는 &lt;code&gt;Path&lt;/code&gt; 를 생성합니다 . 즉, 반복자는 &lt;code&gt;&amp;amp;self&lt;/code&gt; , &lt;code&gt;&amp;amp;self.parent().unwrap()&lt;/code&gt; , &lt;code&gt;&amp;amp;self.parent().unwrap().parent().unwrap()&lt;/code&gt; 등을 생성합니다. 경우 &lt;a href=&quot;struct.path#method.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt; 방법은 반환 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 반복자 마찬가지로 할 것입니다. 반복자는 항상 하나 이상의 값, 즉 &lt;code&gt;&amp;amp;self&lt;/code&gt; 산출 합니다.</target>
        </trans-unit>
        <trans-unit id="36ed296a3da7075e704c60a55541d4eefcc61a2e" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 이 &lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 이면 반복자는 하나의 값을 생성 하고 , 그렇지 않으면 값을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="33a7221657feedb4eb9bdbc29b15b1cfdbff0941" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt;&lt;code&gt;Result::Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">결과가 &lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt; &lt;code&gt;Result::Ok&lt;/code&gt; &lt;/a&gt; 인 경우 반복기는 하나의 값을 생성하고 , 그렇지 않으면 값을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="908b09e4328c560c75c00a1be9bba8fa3c1792fa" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;enum.result#Ok.v&quot;&gt;&lt;code&gt;Result::Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">결과가 &lt;a href=&quot;enum.result#Ok.v&quot;&gt; &lt;code&gt;Result::Ok&lt;/code&gt; &lt;/a&gt; 인 경우 반복기는 하나의 값을 생성하고 , 그렇지 않으면 값을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="8fd298b9ad5df85747acb6e44bba1366e3481860" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">결과가 &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 인 경우 반복기는 하나의 값을 생성하고 , 그렇지 않으면 값을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="b80110840b4186388c3ebdd6fff4960efb23a3ca" translate="yes" xml:space="preserve">
          <source>The iterator yields tuples. The position is first, the &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; is second.</source>
          <target state="translated">반복자는 튜플을 생성합니다. 위치가 첫 번째이고 &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 가 두 번째입니다.</target>
        </trans-unit>
        <trans-unit id="787f68c0ad38019edb27d78451a4d5831f65e4ab" translate="yes" xml:space="preserve">
          <source>The iterator yields tuples. The position is first, the &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; is second.</source>
          <target state="translated">반복자는 튜플을 생성합니다. 위치가 첫 번째이고 &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 가 두 번째입니다.</target>
        </trans-unit>
        <trans-unit id="6814fb791ef3836a2e395759e70c2ff3a369ee11" translate="yes" xml:space="preserve">
          <source>The job of &lt;code&gt;read_line&lt;/code&gt; is to take whatever the user types into standard input and place that into a string, so it takes that string as an argument. The string argument needs to be mutable so the method can change the string&amp;rsquo;s content by adding the user input.</source>
          <target state="translated">&lt;code&gt;read_line&lt;/code&gt; 의 작업은 사용자가 입력하는 모든 것을 표준 입력으로 가져 와서 문자열에 배치하는 것이므로 해당 문자열을 인수로 사용합니다. 문자열 인수는 변경 가능해야하므로 메소드는 사용자 입력을 추가하여 문자열의 컨텐츠를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc7b114b0c6414134b72184594654a5acaffb577" translate="yes" xml:space="preserve">
          <source>The join handle will implicitly &lt;em&gt;detach&lt;/em&gt; the child thread upon being dropped. In this case, the child thread may outlive the parent (unless the parent thread is the main thread; the whole process is terminated when the main thread finishes). Additionally, the join handle provides a &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; method that can be used to join the child thread. If the child thread panics, &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; will return an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; containing the argument given to &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">결합 핸들은 떨어지면 자식 스레드를 내재적으로 &lt;em&gt;분리&lt;/em&gt; 합니다. 이 경우 자식 스레드가 부모 스레드보다 오래 지속될 수 있습니다 (부모 스레드가 기본 스레드가 아닌 경우 기본 스레드가 완료되면 전체 프로세스가 종료 됨). 또한 조인 핸들은 자식 스레드를 조인하는 데 사용할 수 있는 &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt; 메서드를 제공합니다 . 자식 스레드 패닉 인 경우 &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic&lt;/code&gt; 에&lt;/a&gt; 제공된 인수를 포함 하는 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="099a2e1e2bdb72897b42735f9f375efdb1e2c049" translate="yes" xml:space="preserve">
          <source>The key line in this error is &lt;code&gt;cannot move out of type [T], a non-copy slice&lt;/code&gt;. With our non-generic versions of the &lt;code&gt;largest&lt;/code&gt; function, we were only trying to find the largest &lt;code&gt;i32&lt;/code&gt; or &lt;code&gt;char&lt;/code&gt;. As discussed in the &lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;&amp;ldquo;Stack-Only Data: Copy&amp;rdquo;&lt;/a&gt; section in Chapter 4, types like &lt;code&gt;i32&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt; that have a known size can be stored on the stack, so they implement the &lt;code&gt;Copy&lt;/code&gt; trait. But when we made the &lt;code&gt;largest&lt;/code&gt; function generic, it became possible for the &lt;code&gt;list&lt;/code&gt; parameter to have types in it that don&amp;rsquo;t implement the &lt;code&gt;Copy&lt;/code&gt; trait. Consequently, we wouldn&amp;rsquo;t be able to move the value out of &lt;code&gt;list[0]&lt;/code&gt; and into the &lt;code&gt;largest&lt;/code&gt; variable, resulting in this error.</source>
          <target state="translated">이 오류의 주요 행은 &lt;code&gt;cannot move out of type [T], a non-copy slice&lt;/code&gt; . &lt;code&gt;largest&lt;/code&gt; 함수 의 제네릭이 아닌 버전으로 가장 큰 &lt;code&gt;i32&lt;/code&gt; 또는 &lt;code&gt;char&lt;/code&gt; 을 찾으려고했습니다 . 4 장의 &lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;&quot;스택 전용 데이터 : 복사&quot;&lt;/a&gt; 섹션에서 설명한 것처럼 알려진 크기의 &lt;code&gt;i32&lt;/code&gt; 및 &lt;code&gt;char&lt;/code&gt; 과 같은 유형을 스택에 저장할 수 있으므로 &lt;code&gt;Copy&lt;/code&gt; 특성 을 구현합니다 . 그러나 &lt;code&gt;largest&lt;/code&gt; 함수를 제네릭으로 만들었을 때 특성을 구현하지 않는 유형을 갖는 &lt;code&gt;list&lt;/code&gt; 매개 변수 가 가능해졌습니다 &lt;code&gt;Copy&lt;/code&gt; . 결과적으로 우리는 가치를 &lt;code&gt;list[0]&lt;/code&gt; 및 &lt;code&gt;largest&lt;/code&gt; 변수에 연결하면이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bceeadadeee15f4a164537fd341fe02f08db51ce" translate="yes" xml:space="preserve">
          <source>The key may be any borrowed form of the map's key type, but &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">열쇠는지도의 주요 유형의 대출 형태가 될 수 있지만, &lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 빌린 양식이 &lt;em&gt;있어야합니다&lt;/em&gt; 키 유형과 일치.</target>
        </trans-unit>
        <trans-unit id="1967c0afcde1ba185b21a2a66c76557126c2a896" translate="yes" xml:space="preserve">
          <source>The key may be any borrowed form of the map's key type, but &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">열쇠는지도의 주요 유형의 대출 형태가 될 수 있지만, &lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 빌린 양식이 &lt;em&gt;있어야합니다&lt;/em&gt; 키 유형과 일치.</target>
        </trans-unit>
        <trans-unit id="25f3fabcbbf37a65231d46a27fb9b7a82a76e913" translate="yes" xml:space="preserve">
          <source>The key may be any borrowed form of the map's key type, but the ordering on the borrowed form &lt;em&gt;must&lt;/em&gt; match the ordering on the key type.</source>
          <target state="translated">키는지도 키 유형의 빌린 형식 일 수 있지만 빌린 양식 의 순서는 키 유형의 순서와 일치 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5794a7e2452d7c2d7acdcd9ca75f9f681dde7e71" translate="yes" xml:space="preserve">
          <source>The key property of unions is that all fields of a union share common storage. As a result writes to one field of a union can overwrite its other fields, and size of a union is determined by the size of its largest field.</source>
          <target state="translated">공용체의 주요 속성은 공용체의 모든 필드가 공통 스토리지를 공유한다는 것입니다. 결과적으로 Union의 한 필드에 쓰면 다른 필드를 덮어 쓸 수 있으며 Union의 크기는 가장 큰 필드의 크기에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="6097954d2b4ff2c7af7f3ee3f3f7074587267681" translate="yes" xml:space="preserve">
          <source>The kinds of patterns for parameters is limited to one of the following:</source>
          <target state="translated">매개 변수의 패턴 종류는 다음 중 하나로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="9150d911250adb9488a9891d8d1a7dd89c179545" translate="yes" xml:space="preserve">
          <source>The lack of infinite output indicates that this code didn&amp;rsquo;t create a reference cycle. We can also tell this by looking at the values we get from calling &lt;code&gt;Rc::strong_count&lt;/code&gt; and &lt;code&gt;Rc::weak_count&lt;/code&gt;.</source>
          <target state="translated">무한 출력이 없다는 것은이 코드가 참조주기를 생성하지 않았 음을 나타냅니다. 또한 &lt;code&gt;Rc::strong_count&lt;/code&gt; 및 &lt;code&gt;Rc::weak_count&lt;/code&gt; 호출에서 얻은 값을 보면 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="60e53524d7493db6ac00628d4141587167732e22" translate="yes" xml:space="preserve">
          <source>The lang attribute is intended for marking special items that are built-in to Rust itself. This includes special traits (like &lt;code&gt;Copy&lt;/code&gt; and &lt;code&gt;Sized&lt;/code&gt;) that affect how the compiler behaves, as well as special functions that may be automatically invoked (such as the handler for out-of-bounds accesses when indexing a slice). Erroneous code example:</source>
          <target state="translated">lang 속성은 Rust 자체에 내장 된 특수 항목을 표시하기위한 것입니다. 여기에는 컴파일러의 작동 방식에 영향을주는 특수 특성 (예 : &lt;code&gt;Copy&lt;/code&gt; 및 &lt;code&gt;Sized&lt;/code&gt; ) 과 자동으로 호출 될 수있는 특수 함수 (예 : 슬라이스 인덱싱시 범위를 벗어난 액세스를위한 핸들러)가 포함됩니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="d001aa0e948f210ef67db3ed9f1079f66965d658" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type.</source>
          <target state="translated">이 정수 유형으로 표시 할 수있는 가장 큰 값입니다.</target>
        </trans-unit>
        <trans-unit id="5bab83aeec1382113d53e6e7d14863dd49ec843d" translate="yes" xml:space="preserve">
          <source>The last change we have to make is in the assertion: to see how many items are in the inner vector, we call &lt;code&gt;borrow&lt;/code&gt; on the &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; to get an immutable reference to the vector.</source>
          <target state="translated">우리가 마지막으로 변경해야 할 것은 단언입니다. 내부 벡터에 얼마나 많은 항목이 있는지 보려면 &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 에 대해 &lt;code&gt;borrow&lt;/code&gt; 를 호출 하여 벡터에 대한 불변의 참조를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="b92b068be4c2b594134000422ae50b8df0c8bac3" translate="yes" xml:space="preserve">
          <source>The last difference is that constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime.</source>
          <target state="translated">마지막 차이점은 상수는 상수 표현식으로 만 설정할 수 있으며 함수 호출의 결과 나 런타임시에만 계산할 수있는 다른 값은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="293474ffe041aff8a994854d8cad3ac993cf31b4" translate="yes" xml:space="preserve">
          <source>The last element returned, if any, will contain the remainder of the slice.</source>
          <target state="translated">반환 된 마지막 요소 (있는 경우)는 나머지 슬라이스를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="8d491eebdf550e16362be621e1476cb5ece9206f" translate="yes" xml:space="preserve">
          <source>The last field of &lt;code&gt;Foo&lt;/code&gt; has a type involving &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Foo&lt;/code&gt; 의 마지막 필드에는 &lt;code&gt;T&lt;/code&gt; 와 관련된 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf70627b4e81c57a3ddc9f76311bc0b01f381dcd" translate="yes" xml:space="preserve">
          <source>The last line of the output shows the location and the name of the installed binary, which in the case of &lt;code&gt;ripgrep&lt;/code&gt; is &lt;code&gt;rg&lt;/code&gt;. As long as the installation directory is in your &lt;code&gt;$PATH&lt;/code&gt;, as mentioned previously, you can then run &lt;code&gt;rg --help&lt;/code&gt; and start using a faster, rustier tool for searching files!</source>
          <target state="translated">출력 표시 위치의 케이스에 설치된 진의 이름의 마지막 라인 &lt;code&gt;ripgrep&lt;/code&gt; 인 &lt;code&gt;rg&lt;/code&gt; . 앞에서 언급했듯이 설치 디렉토리가 &lt;code&gt;$PATH&lt;/code&gt; 에 있으면 &lt;code&gt;rg --help&lt;/code&gt; 를 실행 하고 파일을 검색하기 위해 더 빠르고 더 견고한 도구를 사용할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="982060970609630bdcfd3dbdc543a9a98b2de24a" translate="yes" xml:space="preserve">
          <source>The last line, &lt;code&gt;[dependencies]&lt;/code&gt;, is the start of a section for you to list any of your project&amp;rsquo;s dependencies. In Rust, packages of code are referred to as &lt;em&gt;crates&lt;/em&gt;. We won&amp;rsquo;t need any other crates for this project, but we will in the first project in Chapter 2, so we&amp;rsquo;ll use this dependencies section then.</source>
          <target state="translated">마지막 행인 &lt;code&gt;[dependencies]&lt;/code&gt; 는 프로젝트의 종속성을 나열하기위한 섹션의 시작입니다. Rust에서는 코드 패키지를 &lt;em&gt;상자&lt;/em&gt; 라고합니다 . 이 프로젝트에는 다른 상자가 필요하지 않지만 2 장의 첫 번째 프로젝트에서는이 종속성 섹션을 사용할 것입니다.</target>
        </trans-unit>
        <trans-unit id="c8d286da9b3987ef73f4d9e79523c9888a168257" translate="yes" xml:space="preserve">
          <source>The last of our common collections is the &lt;em&gt;hash map&lt;/em&gt;. The type &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; stores a mapping of keys of type &lt;code&gt;K&lt;/code&gt; to values of type &lt;code&gt;V&lt;/code&gt;. It does this via a &lt;em&gt;hashing function&lt;/em&gt;, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as hash, map, object, hash table, dictionary, or associative array, just to name a few.</source>
          <target state="translated">우리의 공통 컬렉션의 마지막은 &lt;em&gt;해시 맵&lt;/em&gt; 입니다. 타입 &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 점포 형 키 맵핑 &lt;code&gt;K&lt;/code&gt; 타입의 값 &lt;code&gt;V&lt;/code&gt; . &lt;em&gt;해싱 함수&lt;/em&gt; 를 통해이 키와 값을 메모리에 배치하는 방법을 결정합니다. 많은 프로그래밍 언어는 이러한 종류의 데이터 구조를 지원하지만 해시, 맵, 객체, 해시 테이블, 사전 또는 연관 배열과 같은 다른 이름을 사용하여 이름을 지정하는 경우가 많습니다.</target>
        </trans-unit>
        <trans-unit id="e50377e1cc3271006121b6b6e503348b95075085" translate="yes" xml:space="preserve">
          <source>The last part is the HTTP version the client uses, and then the request line ends in a &lt;em&gt;CRLF sequence&lt;/em&gt;. (CRLF stands for &lt;em&gt;carriage return&lt;/em&gt; and &lt;em&gt;line feed&lt;/em&gt;, which are terms from the typewriter days!) The CRLF sequence can also be written as &lt;code&gt;\r\n&lt;/code&gt;, where &lt;code&gt;\r&lt;/code&gt; is a carriage return and &lt;code&gt;\n&lt;/code&gt; is a line feed. The CRLF sequence separates the request line from the rest of the request data. Note that when the CRLF is printed, we see a new line start rather than &lt;code&gt;\r\n&lt;/code&gt;.</source>
          <target state="translated">마지막 부분은 클라이언트가 사용하는 HTTP 버전이며 요청 라인은 &lt;em&gt;CRLF 시퀀스로&lt;/em&gt; 끝납니다 . CRLF는 &lt;em&gt;캐리지 리턴&lt;/em&gt; 및 &lt;em&gt;줄 바꿈&lt;/em&gt; 을 의미하며 타자기 일의 용어입니다. CRLF 시퀀스는 &lt;code&gt;\r\n&lt;/code&gt; 으로도 쓸 수 있습니다 . 여기서 &lt;code&gt;\r&lt;/code&gt; 은 캐리지 리턴이고 &lt;code&gt;\n&lt;/code&gt; 은 줄 바꿈입니다. CRLF 시퀀스는 요청 라인을 나머지 요청 데이터와 분리합니다. CRLF가 인쇄되면 &lt;code&gt;\r\n&lt;/code&gt; 대신 새로운 줄이 시작 됩니다.</target>
        </trans-unit>
        <trans-unit id="e7f87628bb5e91d33e6ee47cc631179039d310fa" translate="yes" xml:space="preserve">
          <source>The layout of a type is its size, alignment, and the relative offsets of its fields. For enums, how the discriminant is laid out and interpreted is also part of type layout.</source>
          <target state="translated">유형의 레이아웃은 크기, 정렬 및 필드의 상대적 오프셋입니다. 열거 형의 경우 판별자가 배치되고 해석되는 방식도 유형 레이아웃의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="d81ce81ead59e71cfd072129a8c87907148c562c" translate="yes" xml:space="preserve">
          <source>The left operand of an &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;assignment&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;compound assignment&lt;/a&gt; expression.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;대입&lt;/a&gt; 또는 &lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;복합 대입&lt;/a&gt; 식 의 왼쪽 피연산자입니다 .</target>
        </trans-unit>
        <trans-unit id="1c0d113ddd28e543817cdc902e3988c72a15e13a" translate="yes" xml:space="preserve">
          <source>The left shift assignment operator &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;.</source>
          <target state="translated">좌측 시프트 할당 연산자 &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="553d8d3f55b49cb8907e0699dd0a3d9c13298c80" translate="yes" xml:space="preserve">
          <source>The left shift operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for &lt;code&gt;_ &amp;lt;&amp;lt; _&lt;/code&gt;, setting the result type for integer operations to the type of the left-hand-side operand. This means that though &lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt; and &lt;code&gt;a.shl(b)&lt;/code&gt; are one and the same from an evaluation standpoint, they are different when it comes to type inference.</source>
          <target state="translated">좌측 시프트 연산자 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; . 이 특성은 여러 오른쪽 유형이있는 모든 정수 유형에 대해 구현되므로 Rust의 유형 검사기는 &lt;code&gt;_ &amp;lt;&amp;lt; _&lt;/code&gt; 대한 특수 처리를 수행하여 정수 연산의 결과 유형을 왼쪽 피연산자의 유형으로 설정합니다. . 이것은 &lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt; 와 &lt;code&gt;a.shl(b)&lt;/code&gt; 가 하나의 평가 관점에서 동일하지만 형식 유추에 있어서는 다르다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="abb83d0dbf2481e1c0cc0aff75ee4837acd9c8fb" translate="yes" xml:space="preserve">
          <source>The left-hand side of a compound assignment expression must be a place expression. A place expression represents a memory location and includes item paths (ie, namespaced variables), dereferences, indexing expressions, and field references.</source>
          <target state="translated">복합 할당 표현식의 왼쪽은 장소 표현식이어야합니다. 장소 표현식은 메모리 위치를 나타내며 항목 경로 (예 : 네임 스페이스 변수), 역 참조, 색인 표현식 및 필드 참조를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="9df6999a3c0f46759818b5fb8abefef29f79e559" translate="yes" xml:space="preserve">
          <source>The left-hand side of an assignment operator must be a place expression. A place expression represents a memory location and can be a variable (with optional namespacing), a dereference, an indexing expression or a field reference.</source>
          <target state="translated">대입 연산자의 왼쪽은 장소 표현식이어야합니다. 장소 표현식은 메모리 위치를 나타내며 변수 (선택적 이름 간격 지정), 역 참조, 색인 표현식 또는 필드 참조 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="583ea3cae577825fe984e0b2dabdc2098e762a9c" translate="yes" xml:space="preserve">
          <source>The length is how much memory, in bytes, the contents of the &lt;code&gt;String&lt;/code&gt; is currently using. The capacity is the total amount of memory, in bytes, that the &lt;code&gt;String&lt;/code&gt; has received from the operating system. The difference between length and capacity matters, but not in this context, so for now, it&amp;rsquo;s fine to ignore the capacity.</source>
          <target state="translated">길이는 &lt;code&gt;String&lt;/code&gt; 의 내용 이 현재 사용중인 메모리 양 (바이트) 입니다. 용량은 &lt;code&gt;String&lt;/code&gt; 이 운영 체제로부터받은 총 메모리 양 (바이트)입니다 . 길이와 용량의 차이는 중요하지만이 상황에서는 중요하지 않으므로 지금은 용량을 무시해도됩니다.</target>
        </trans-unit>
        <trans-unit id="bec01c75ecf9080484e0035ecb4817690e9d17fa" translate="yes" xml:space="preserve">
          <source>The length of &lt;code&gt;other&lt;/code&gt; must be the same as &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; 길이는 &lt;code&gt;self&lt;/code&gt; 와 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="1d3c6c04d874a34e3f73cf44da542c5ee7d39510" translate="yes" xml:space="preserve">
          <source>The length of &lt;code&gt;src&lt;/code&gt; must be the same as &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 의 길이는 &lt;code&gt;self&lt;/code&gt; 와 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="65b0bfaafe677ff19be99641d06a9d0388b357ef" translate="yes" xml:space="preserve">
          <source>The length of the platform-intrinsic function &lt;code&gt;simd_shuffle&lt;/code&gt; wasn't specified. Erroneous code example:</source>
          <target state="translated">플랫폼 고유 함수 &lt;code&gt;simd_shuffle&lt;/code&gt; 의 길이가 지정되지 않았습니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="2fe8cad4da628228b8d9a6730b144662e5d5b147" translate="yes" xml:space="preserve">
          <source>The length returned is that of the underlying storage used by &lt;code&gt;OsStr&lt;/code&gt;; As discussed in the &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; introduction, &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;OsStr&lt;/code&gt; store strings in a form best suited for cheap inter-conversion between native-platform and Rust string forms, which may differ significantly from both of them, including in storage size and encoding.</source>
          <target state="translated">반환 된 길이는 &lt;code&gt;OsStr&lt;/code&gt; 이 사용하는 기본 스토리지의 길이입니다 . &lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; 소개 에서 설명했듯이 &lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;OsStr&lt;/code&gt; 은 기본 플랫폼과 Rust 문자열 형식 간의 저렴한 상호 변환에 가장 적합한 형식으로 문자열을 저장합니다.이 형식은 스토리지 크기 및 인코딩을 포함하여 두 형식과 크게 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30238ceba60deefc79cfa25b4649d1a595edd0d8" translate="yes" xml:space="preserve">
          <source>The lifetime constraint &lt;code&gt;'b&lt;/code&gt; for bar() implementation does not match the trait declaration. Ensure lifetime declarations match exactly in both trait declaration and implementation. Example:</source>
          <target state="translated">bar () 구현 의 수명 제약 조건 &lt;code&gt;'b&lt;/code&gt; 가 특성 선언과 일치하지 않습니다. 수명 선언이 특성 선언 및 구현에서 정확히 일치하는지 확인하십시오. 예:</target>
        </trans-unit>
        <trans-unit id="61076c57b01b556a6cbf075ae8202a67124b97eb" translate="yes" xml:space="preserve">
          <source>The lifetime elision rules require that any function signature with an elided output lifetime must either have</source>
          <target state="translated">수명 제거 규칙을 사용하려면 출력 수명이 생략 된 함수 시그니처 중 하나에</target>
        </trans-unit>
        <trans-unit id="7914129f994f43353c3efa7974019d9a960355fb" translate="yes" xml:space="preserve">
          <source>The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context, such as by providing a helper function taking the lifetime of a host value for the slice, or by explicit annotation.</source>
          <target state="translated">반환 된 슬라이스의 수명은 사용법에서 유추됩니다. 우발적 인 오용을 방지하기 위해 슬라이스에 대한 호스트 값의 수명을 가져 오는 도우미 기능을 제공하거나 명시적인 주석과 같이 컨텍스트에서 소스 수명이 안전한 소스에 수명을 연결하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="57046a8e7fbf89990ae303fb2235f525d1c99061" translate="yes" xml:space="preserve">
          <source>The lifetime parameter declaration after &lt;code&gt;impl&lt;/code&gt; and its use after the type name are required, but we&amp;rsquo;re not required to annotate the lifetime of the reference to &lt;code&gt;self&lt;/code&gt; because of the first elision rule.</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; 이후의 수명 매개 변수 선언 과 형식 이름 다음의 사용이 필요하지만 첫 번째 제거 규칙으로 인해 참조 수명을 &lt;code&gt;self&lt;/code&gt; 에 주석을 달 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="14f07422d02861a626046c58ce643a2a52da0ac8" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;index out of bounds: the len is 1 but the index is 1&lt;/code&gt; is an error message intended for programmers. It won&amp;rsquo;t help our end users understand what happened and what they should do instead. Let&amp;rsquo;s fix that now.</source>
          <target state="translated">행 &lt;code&gt;index out of bounds: the len is 1 but the index is 1&lt;/code&gt; 입니다. 프로그래머를위한 오류 메시지입니다. 최종 사용자가 발생한 일과 대신해야 할 일을 이해하는 데 도움이되지 않습니다. 이제 고치겠습니다.</target>
        </trans-unit>
        <trans-unit id="de1c3b88f137cbbbccea4f427174e92d6650dd55" translate="yes" xml:space="preserve">
          <source>The lines execute in the order in which they appear in the &lt;code&gt;main&lt;/code&gt; function. First, the &amp;ldquo;Hello, world!&amp;rdquo; message prints, and then &lt;code&gt;another_function&lt;/code&gt; is called and its message is printed.</source>
          <target state="translated">행은 &lt;code&gt;main&lt;/code&gt; 기능에 나타나는 순서대로 실행됩니다 . 먼저, &quot;Hello, world!&quot; 메시지가 인쇄 된 다음 &lt;code&gt;another_function&lt;/code&gt; 이 호출되고 메시지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="a2f50a40f788fe52620261459fe43b43f06256a8" translate="yes" xml:space="preserve">
          <source>The linkage of the C runtime is configured to respect the &lt;code&gt;crt-static&lt;/code&gt; target feature. These target features are typically configured from the command line via flags to the compiler itself. For example to enable a static runtime you would execute:</source>
          <target state="translated">C 런타임의 링크는 &lt;code&gt;crt-static&lt;/code&gt; 대상 기능 을 존중하도록 구성되어 있습니다. 이러한 대상 기능은 일반적으로 플래그를 통해 명령 줄에서 컴파일러 자체로 구성됩니다. 예를 들어 정적 런타임을 활성화하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="efca89d0995e1ff0c39cef27089410685b77deb1" translate="yes" xml:space="preserve">
          <source>The list of derivable traits provided in this appendix is not comprehensive: libraries can implement &lt;code&gt;derive&lt;/code&gt; for their own traits, making the list of traits you can use &lt;code&gt;derive&lt;/code&gt; with truly open-ended. Implementing &lt;code&gt;derive&lt;/code&gt; involves using a procedural macro, which is covered in the &lt;a href=&quot;ch19-06-macros#macros&quot;&gt;&amp;ldquo;Macros&amp;rdquo;&lt;/a&gt; section of Chapter 19.</source>
          <target state="translated">이 부록에서 제공되는 파생 가능한 특성 목록은 포괄적이지 않습니다. 라이브러리는 고유 한 특성에 대한 &lt;code&gt;derive&lt;/code&gt; 을 구현할 수 있으므로 사용할 &lt;code&gt;derive&lt;/code&gt; 있는 특성 목록을 실제로 개방형으로 파생 시킬 수 있습니다 . &lt;code&gt;derive&lt;/code&gt; 구현하려면 절차 적 매크로를 사용해야 합니다. 절차 적 매크로는 19 장의 &lt;a href=&quot;ch19-06-macros#macros&quot;&gt;&quot;매크로&quot;&lt;/a&gt; 섹션 에서 다룹니다 .</target>
        </trans-unit>
        <trans-unit id="e9a2965c85bdbd082d28a62c5ab1cef15f730b46" translate="yes" xml:space="preserve">
          <source>The list of types is:</source>
          <target state="translated">유형 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="91f214c30e2ceb29652b72be6f5c77765c1026b7" translate="yes" xml:space="preserve">
          <source>The literal characters &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; may be included in a string by preceding them with the same character. For example, the &lt;code&gt;{&lt;/code&gt; character is escaped with &lt;code&gt;{{&lt;/code&gt; and the &lt;code&gt;}&lt;/code&gt; character is escaped with &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">리터럴 문자 &lt;code&gt;{&lt;/code&gt; 및 &lt;code&gt;}&lt;/code&gt; 는 동일한 문자로 시작하여 문자열에 포함될 수 있습니다. 예를 들어, &lt;code&gt;{&lt;/code&gt; 문자로 이스케이프 &lt;code&gt;{{&lt;/code&gt; 와 &lt;code&gt;}&lt;/code&gt; 문자로 이스케이프 &lt;code&gt;}}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5be7b0512e1a505e9266eb524c4b5165ed24536" translate="yes" xml:space="preserve">
          <source>The lock could not be acquired at this time because the operation would otherwise block.</source>
          <target state="translated">조작이 차단되었으므로 현재 잠금을 획득 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ca27685a95f0186521159c6d95fa9cb158ac3333" translate="yes" xml:space="preserve">
          <source>The lock could not be acquired because another thread failed while holding the lock.</source>
          <target state="translated">잠금을 유지하는 동안 다른 스레드가 실패하여 잠금을 확보 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e835ab2030797bd0af68c5e546090096d0ef15ed" translate="yes" xml:space="preserve">
          <source>The lock is released when the returned lock goes out of scope. The returned guard also implements the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.bufread&quot;&gt;&lt;code&gt;BufRead&lt;/code&gt;&lt;/a&gt; traits for accessing the underlying data.</source>
          <target state="translated">반환 된 잠금이 범위를 벗어나면 잠금이 해제됩니다. 리턴 된 가드는 또한 기본 데이터에 액세스하기위한 &lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;trait.bufread&quot;&gt; &lt;code&gt;BufRead&lt;/code&gt; &lt;/a&gt; 특성을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="95f3d5bdf30a84c247ddb912c9e27503ec850ddb" translate="yes" xml:space="preserve">
          <source>The lock is released when the returned lock goes out of scope. The returned guard also implements the &lt;code&gt;Write&lt;/code&gt; trait for writing data.</source>
          <target state="translated">반환 된 잠금이 범위를 벗어나면 잠금이 해제됩니다. 리턴 된 가드는 또한 데이터 &lt;code&gt;Write&lt;/code&gt; 위한 쓰기 특성을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="9fbc8134425c3ce849c012cee6ed6bdb948d21a6" translate="yes" xml:space="preserve">
          <source>The logic around the &lt;code&gt;value&lt;/code&gt; field we&amp;rsquo;ve just described is defined in Listing 13-10.</source>
          <target state="translated">방금 설명한 &lt;code&gt;value&lt;/code&gt; 필드에 대한 논리 는 Listing 13-10에 정의되어있다.</target>
        </trans-unit>
        <trans-unit id="f2cf3737106dde9e749616b8670f272a444680a9" translate="yes" xml:space="preserve">
          <source>The lower bound of the range (inclusive).</source>
          <target state="translated">범위의 하한입니다 (포함).</target>
        </trans-unit>
        <trans-unit id="0766d14228f909fbfdac3f3dca197e2a666359ec" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any.</source>
          <target state="translated">이 오류의 하위 원인 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="4b8803f6ab5b8d7b772e6a580f89ee4b72aef2f4" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any. &lt;a href=&quot;../../error/trait.error#method.cause&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 오류의 하위 원인 (있는 경우) &lt;a href=&quot;../../error/trait.error#method.cause&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5980cf0091c024091baef1d2b8180b13d7e8fb92" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any. &lt;a href=&quot;../error/trait.error#method.cause&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 오류의 하위 원인 (있는 경우) &lt;a href=&quot;../error/trait.error#method.cause&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f757a43bf56678673d64a896a7ea59d83e9d1668" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any. &lt;a href=&quot;error/trait.error#method.cause&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 오류의 하위 원인 (있는 경우) &lt;a href=&quot;error/trait.error#method.cause&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="828185ce8f6bedf0299995b3c4e9cb20b7a41ecd" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any.</source>
          <target state="translated">이 오류의 하위 수준 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="ea0a6930dc7de4d466ce55f6448d31ae162ca38c" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any. &lt;a href=&quot;../../error/trait.error#method.source&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 오류의 하위 수준 (있는 경우) &lt;a href=&quot;../../error/trait.error#method.source&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb0a1822fe706b0e16bb4cab78928338d81339e3" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any. &lt;a href=&quot;../error/trait.error#method.source&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 오류의 하위 수준 (있는 경우) &lt;a href=&quot;../error/trait.error#method.source&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bccd557ca491cf82db4f740ce89716ec64f4fabf" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any. &lt;a href=&quot;error/trait.error#method.source&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 오류의 하위 수준 (있는 경우) &lt;a href=&quot;error/trait.error#method.source&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e0846c263b7366386582dfe4d412a3ad4ba7b9f" translate="yes" xml:space="preserve">
          <source>The machine code for &lt;code&gt;foo::&amp;lt;u8&amp;gt;()&lt;/code&gt;, &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt;, &lt;code&gt;foo::&amp;lt;String&amp;gt;()&lt;/code&gt;, or any other type substitution is different. Hence the compiler generates the implementation on-demand. If you call &lt;code&gt;foo()&lt;/code&gt; with a &lt;code&gt;bool&lt;/code&gt; parameter, the compiler will only generate code for &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt;. When we have additional type parameters, the number of monomorphized implementations the compiler generates does not grow drastically, since the compiler will only generate an implementation if the function is called with unparametrized substitutions (i.e., substitutions where none of the substituted types are themselves parametrized).</source>
          <target state="translated">&lt;code&gt;foo::&amp;lt;u8&amp;gt;()&lt;/code&gt; , &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt; , &lt;code&gt;foo::&amp;lt;String&amp;gt;()&lt;/code&gt; 또는 다른 유형 대체에 대한 기계어 코드 가 다릅니다. 따라서 컴파일러는 주문형 구현을 생성합니다. &lt;code&gt;bool&lt;/code&gt; 매개 변수 와 함께 &lt;code&gt;foo()&lt;/code&gt; 를 호출 하면 컴파일러는 &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt; 대한 코드 만 생성합니다 . 추가 유형 매개 변수가있는 경우 함수가 매개 변수화되지 않은 대체 (즉 대체 된 유형이 자체 매개 변수화되지 않은 대체)로 호출되는 경우에만 컴파일러가 구현을 생성하기 때문에 컴파일러가 생성하는 단일 형태 구현의 수가 크게 증가하지 않습니다. .</target>
        </trans-unit>
        <trans-unit id="ec5d54a07ee0f8ac568e82f61b376d035a168bca" translate="yes" xml:space="preserve">
          <source>The macro itself will decide how to interpret such a token and whether to produce an error or not.</source>
          <target state="translated">매크로 자체는 그러한 토큰을 해석하는 방법과 오류 발생 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="8db5958c7dabf9cedcc4db6e6fa16a59d45c2565" translate="yes" xml:space="preserve">
          <source>The macro works by using the &lt;code&gt;Debug&lt;/code&gt; implementation of the type of the given expression to print the value to &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)&quot;&gt;stderr&lt;/a&gt; along with the source location of the macro invocation as well as the source code of the expression.</source>
          <target state="translated">매크로는 주어진 표현식 유형의 &lt;code&gt;Debug&lt;/code&gt; 구현을 사용하여 매크로 호출의 소스 위치 및 표현식의 소스 코드와 함께 값을 &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)&quot;&gt;stderr&lt;/a&gt; 에 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="9498e8eb390e83cb5dbd448b585676f4b5c37123" translate="yes" xml:space="preserve">
          <source>The macro wraps any number of static declarations and makes them thread local. Publicity and attributes for each static are allowed. Example:</source>
          <target state="translated">이 매크로는 많은 수의 정적 선언을 래핑하고 스레드를 로컬로 만듭니다. 각 정적에 대한 홍보 및 속성이 허용됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="2eb59c956ec6e4722a7e8cfdea3a410b913da22e" translate="yes" xml:space="preserve">
          <source>The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it&amp;rsquo;s intended to reference. Consider the program in Listing 10-17, which has an outer scope and an inner scope.</source>
          <target state="translated">수명의 주요 목표는 댕글 링 참조를 방지하여 프로그램이 참조하려는 데이터 이외의 데이터를 참조하도록하는 것입니다. 외부 범위와 내부 범위가있는 목록 10-17의 프로그램을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="c087688652f35bf8ea7f8323996c74d4edfcf197" translate="yes" xml:space="preserve">
          <source>The main benefit of using methods instead of functions, in addition to using method syntax and not having to repeat the type of &lt;code&gt;self&lt;/code&gt; in every method&amp;rsquo;s signature, is for organization. We&amp;rsquo;ve put all the things we can do with an instance of a type in one &lt;code&gt;impl&lt;/code&gt; block rather than making future users of our code search for capabilities of &lt;code&gt;Rectangle&lt;/code&gt; in various places in the library we provide.</source>
          <target state="translated">메소드 대신 구문을 사용 하고 모든 메소드의 서명에서 &lt;code&gt;self&lt;/code&gt; 유형을 반복 할 필요없이 함수 대신 메소드를 사용하면 얻을 수있는 주요 이점은 조직에 있습니다. 우리는 코드의 미래 사용자가 우리 가 제공하는 라이브러리의 다양한 위치에서 &lt;code&gt;Rectangle&lt;/code&gt; 의 기능을 검색하지 않고 유형의 인스턴스로 수행 할 수있는 모든 것을 하나의 &lt;code&gt;impl&lt;/code&gt; 블록에 넣었습니다 .</target>
        </trans-unit>
        <trans-unit id="8008407990a4be341211e8be036085a004b45e43" translate="yes" xml:space="preserve">
          <source>The main error message, &amp;ldquo;mismatched types,&amp;rdquo; reveals the core issue with this code. The definition of the function &lt;code&gt;plus_one&lt;/code&gt; says that it will return an &lt;code&gt;i32&lt;/code&gt;, but statements don&amp;rsquo;t evaluate to a value, which is expressed by &lt;code&gt;()&lt;/code&gt;, an empty tuple. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.</source>
          <target state="translated">기본 오류 메시지 인 &quot;일치하지 않는 유형&quot;은이 코드의 핵심 문제를 나타냅니다. &lt;code&gt;plus_one&lt;/code&gt; 함수의 정의에 따르면 &lt;code&gt;i32&lt;/code&gt; 를 반환 하지만 명령문은 빈 튜플 &lt;code&gt;()&lt;/code&gt; 로 표현되는 값으로 평가되지 않습니다 . 따라서 아무것도 반환되지 않으므로 함수 정의와 모순되어 오류가 발생합니다. 이 출력에서 ​​Rust는이 문제를 해결하는 데 도움이되는 메시지를 제공합니다. 세미콜론을 제거하면 오류가 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="573ea76510aaa810e82bed4691dcc0e4c2771be9" translate="yes" xml:space="preserve">
          <source>The main place you'll see &lt;code&gt;!&lt;/code&gt; used explicitly is in generic code. Consider the &lt;a href=&quot;str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; trait:</source>
          <target state="translated">당신이 볼 주요 장소 &lt;code&gt;!&lt;/code&gt; 명시 적으로 사용되는 것은 일반 코드입니다. &lt;a href=&quot;str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt; 특성을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="3347fce894ee36b7a76776d17f6b05d7ee4e0c6f" translate="yes" xml:space="preserve">
          <source>The main thread will wait for the spawned thread to finish and then run its &lt;code&gt;for&lt;/code&gt; loop, so the output won&amp;rsquo;t be interleaved anymore, as shown here:</source>
          <target state="translated">메인 스레드는 스폰 된 스레드가 완료 될 때까지 기다린 다음 &lt;code&gt;for&lt;/code&gt; 루프 를 실행하므로 다음과 같이 출력이 더 이상 인터리브되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7af4b9befadab1a133dab8d7948b44dbc8d708d" translate="yes" xml:space="preserve">
          <source>The main thread will wait with a timeout on the condvar and then leave once the boolean has been updated and notified.</source>
          <target state="translated">메인 스레드는 condvar에서 시간 초과로 기다린 다음 부울이 업데이트되고 알림을 받으면 그대로 둡니다.</target>
        </trans-unit>
        <trans-unit id="2f4d9785a094ac7050147e12df1b0f82f8cae6fe" translate="yes" xml:space="preserve">
          <source>The main use case for type synonyms is to reduce repetition. For example, we might have a lengthy type like this:</source>
          <target state="translated">유형 동의어의 주요 사용 사례는 반복을 줄이는 것입니다. 예를 들어 다음과 같은 긴 유형이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1aa73c2c8bcfa6f25fb308f2154aee4987ca459" translate="yes" xml:space="preserve">
          <source>The main way to use Boolean values is through conditionals, such as an &lt;code&gt;if&lt;/code&gt; expression. We&amp;rsquo;ll cover how &lt;code&gt;if&lt;/code&gt; expressions work in Rust in the &lt;a href=&quot;ch03-05-control-flow#control-flow&quot;&gt;&amp;ldquo;Control Flow&amp;rdquo;&lt;/a&gt; section.</source>
          <target state="translated">부울 값을 사용하는 주요 방법은 &lt;code&gt;if&lt;/code&gt; 표현식 과 같은 조건을 통하는 것 입니다. 우리는 어떻게 다룰 &lt;code&gt;if&lt;/code&gt; 표현이 녹에서 일 &lt;a href=&quot;ch03-05-control-flow#control-flow&quot;&gt;&quot;제어 흐름&quot;&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="67f97a592dc5c37dc58d2c3fd741d8753b33f60e" translate="yes" xml:space="preserve">
          <source>The mapping to &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt;s is not part of the compatibility contract of the function, especially the &lt;a href=&quot;../io/enum.errorkind#variant.Other&quot;&gt;&lt;code&gt;Other&lt;/code&gt;&lt;/a&gt; kind might change to more specific kinds in the future.</source>
          <target state="translated">&lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; 에&lt;/a&gt; 대한 매핑 은 함수의 호환성 계약의 일부가 아닙니다. 특히 &lt;a href=&quot;../io/enum.errorkind#variant.Other&quot;&gt; &lt;code&gt;Other&lt;/code&gt; &lt;/a&gt; 유형은 향후 더 구체적인 유형으로 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8fda3a6ce0d45625dd9cd044a1a98a742c97014" translate="yes" xml:space="preserve">
          <source>The match condition states that the arm only matches if the value of &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, or &lt;code&gt;6&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; if &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. When this code runs, the pattern of the first arm matches because &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, but the match guard &lt;code&gt;if y&lt;/code&gt; is false, so the first arm is not chosen. The code moves on to the second arm, which does match, and this program prints &lt;code&gt;no&lt;/code&gt;. The reason is that the &lt;code&gt;if&lt;/code&gt; condition applies to the whole pattern &lt;code&gt;4 | 5 | 6&lt;/code&gt;, not only to the last value &lt;code&gt;6&lt;/code&gt;. In other words, the precedence of a match guard in relation to a pattern behaves like this:</source>
          <target state="translated">값 경우 아암에만 일치하는 정합 조건 상태 &lt;code&gt;x&lt;/code&gt; 같은지 &lt;code&gt;4&lt;/code&gt; , &lt;code&gt;5&lt;/code&gt; 또는 &lt;code&gt;6&lt;/code&gt; &lt;em&gt;과&lt;/em&gt; 만약 &lt;code&gt;y&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; . 이 코드가 실행될 때 &lt;code&gt;x&lt;/code&gt; 가 &lt;code&gt;4&lt;/code&gt; 이므로 첫 번째 팔의 패턴이 일치 하지만 &lt;code&gt;if y&lt;/code&gt; 가 false 인 경우 일치 가드 가 있으므로 첫 번째 팔이 선택되지 않습니다. 코드가 일치하는 두 번째 팔로 이동하면이 프로그램은 &lt;code&gt;no&lt;/code&gt; 를 인쇄합니다 . 그 이유는 &lt;code&gt;if&lt;/code&gt; 조건이 전체 패턴에 적용되기 때문입니다. &lt;code&gt;4 | 5 | 6&lt;/code&gt; 마지막 값뿐만 아니라 6 &lt;code&gt;6&lt;/code&gt; . 다시 말해, 패턴과 관련하여 매치 가드의 우선 순위는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6477b3c15cf1efd2f96aba3a277d7e0dd00d128c" translate="yes" xml:space="preserve">
          <source>The match guard &lt;code&gt;if n == y&lt;/code&gt; is not a pattern and therefore doesn&amp;rsquo;t introduce new variables. This &lt;code&gt;y&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; the outer &lt;code&gt;y&lt;/code&gt; rather than a new shadowed &lt;code&gt;y&lt;/code&gt;, and we can look for a value that has the same value as the outer &lt;code&gt;y&lt;/code&gt; by comparing &lt;code&gt;n&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if n == y&lt;/code&gt; 매치 가드 는 패턴이 아니므로 새 변수를 도입하지 않습니다. 이 &lt;code&gt;y&lt;/code&gt; &lt;em&gt;이다&lt;/em&gt; 외측 &lt;code&gt;y&lt;/code&gt; 보다 새로운 숨겨진 &lt;code&gt;y&lt;/code&gt; , 우리는 외부와 동일한 값을 가지는 값을 볼 수있다 &lt;code&gt;y&lt;/code&gt; 과 비교하여 &lt;code&gt;n&lt;/code&gt; 에 &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="444f3162cb088de418eba38f4a421be7235eea6f" translate="yes" xml:space="preserve">
          <source>The maximum value of an enum was reached, so it cannot be automatically set in the next enum value. Erroneous code example:</source>
          <target state="translated">열거 형의 최대 값에 도달하여 다음 열거 형 값에서 자동으로 설정할 수 없습니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="297bebe1d80f3b348c7c8e6094a67afc0f518766" translate="yes" xml:space="preserve">
          <source>The memory at &lt;code&gt;ptr&lt;/code&gt; needs to have been previously allocated by the same allocator the standard library uses.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; 의 메모리 는 표준 라이브러리가 사용하는 동일한 할당 자에 의해 이전에 할당되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="9f4c6be6867180c56169b0ceb625f117dffee9cb" translate="yes" xml:space="preserve">
          <source>The memory layout of a &lt;code&gt;struct&lt;/code&gt; is undefined by default to allow for compiler optimizations like field reordering, but it can be fixed with the &lt;a href=&quot;../type-layout#representations&quot;&gt;&lt;code&gt;repr&lt;/code&gt; attribute&lt;/a&gt;. In either case, fields may be given in any order in a corresponding struct &lt;em&gt;expression&lt;/em&gt;; the resulting &lt;code&gt;struct&lt;/code&gt; value will always have the same memory layout.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 의 메모리 레이아웃은 기본적으로 필드 재정렬과 같은 컴파일러 최적화를 허용하도록 정의되어 있지 않지만 &lt;a href=&quot;../type-layout#representations&quot;&gt; &lt;code&gt;repr&lt;/code&gt; 속성&lt;/a&gt; 으로 수정할 수 있습니다 . 어느 경우 든, 필드는 대응하는 구조체 &lt;em&gt;표현&lt;/em&gt; 에서 임의의 순서로 주어질 수있다 ; 결과 &lt;code&gt;struct&lt;/code&gt; 값은 항상 동일한 메모리 레이아웃을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="613a15d193cb4b5b9d7d2448a0d26f441bad60d3" translate="yes" xml:space="preserve">
          <source>The memory layout of a &lt;code&gt;union&lt;/code&gt; is undefined by default, but the &lt;code&gt;#[repr(...)]&lt;/code&gt; attribute can be used to fix a layout.</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; 의 메모리 레이아웃은 기본적으로 정의되어 있지 않지만 &lt;code&gt;#[repr(...)]&lt;/code&gt; 속성을 사용하여 레이아웃을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5158117ae58dde222908d602ad3b6cfbc19fbd1b" translate="yes" xml:space="preserve">
          <source>The memory must be requested from the operating system at runtime.</source>
          <target state="translated">런타임시 운영 체제에서 메모리를 요청해야합니다.</target>
        </trans-unit>
        <trans-unit id="c86a2a43ba3e98f03e1d643c5eb2cb7bce34d7c4" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so counting elements of an iterator with more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; elements either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">이 방법은 오버플로를 방지하지 않으므로 &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; 요소 보다 많은 반복자의 요소를 계산 하면 잘못된 결과 또는 패닉이 발생합니다. 디버그 어설 션이 활성화되면 패닉이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="177a5c2ea6344ea77e9ae3a6db8fc74469cc253c" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so enumerating more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; elements either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">이 방법은 오버플로를 방지하지 않으므로 &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; 요소 이상을 열거 하면 잘못된 결과 또는 패닉이 발생합니다. 디버그 어설 션이 활성화되면 패닉이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="3a1826392947e9b9a700c20663562183cfe20bf1" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so enumerating more than &lt;code&gt;usize::MAX&lt;/code&gt; elements either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">이 방법은 오버플로를 방지하지 않으므로 &lt;code&gt;usize::MAX&lt;/code&gt; 요소 이상을 열거 하면 잘못된 결과 또는 패닉이 발생합니다. 디버그 어설 션이 활성화되면 패닉이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="19d8816b84fe470f79cf77755eeb8ee64e555da5" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so if there are more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; non-matching elements, it either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">이 방법은 오버플로를 방지하지 않으므로 &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; 비 일치 요소 보다 많은 요소가 있으면 잘못된 결과 또는 패닉이 발생합니다. 디버그 어설 션이 활성화되면 패닉이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="1be550addda456adee08f228dc9b4f31db12dda4" translate="yes" xml:space="preserve">
          <source>The method will panic if the given step is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">주어진 단계가 &lt;code&gt;0&lt;/code&gt; 이면 메소드가 패닉 상태가됩니다 .</target>
        </trans-unit>
        <trans-unit id="d61a28fc808f2bb8277ab6d2dda14e2b5dc3214d" translate="yes" xml:space="preserve">
          <source>The minimum byte alignment for a memory block of this layout.</source>
          <target state="translated">이 레이아웃의 메모리 블록에 대한 최소 바이트 정렬입니다.</target>
        </trans-unit>
        <trans-unit id="5b04e5eee8d92581fabe61b454bd932d16d3b4ee" translate="yes" xml:space="preserve">
          <source>The minimum size in bytes for a memory block of this layout.</source>
          <target state="translated">이 레이아웃의 메모리 블록에 대한 최소 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="4650b1470ff8fe4b9a6a554cb10a84ba4229b041" translate="yes" xml:space="preserve">
          <source>The mirror use case of FFI is also done via the &lt;code&gt;extern&lt;/code&gt; keyword:</source>
          <target state="translated">FFI의 미러 사용 사례는 &lt;code&gt;extern&lt;/code&gt; 키워드 를 통해 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a82559d5a04edc93a72fe140de851778ee358fc2" translate="yes" xml:space="preserve">
          <source>The module tree might remind you of the filesystem&amp;rsquo;s directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.</source>
          <target state="translated">모듈 트리는 컴퓨터에서 파일 시스템의 디렉토리 트리를 상기시킬 수 있습니다. 이것은 매우 적절한 비교입니다! 파일 시스템의 디렉토리와 마찬가지로 모듈을 사용하여 코드를 구성합니다. 디렉토리의 파일과 마찬가지로 모듈을 찾는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ea4c9b3e2b6f858a3799aa18909b3e42f1061d3e" translate="yes" xml:space="preserve">
          <source>The module tree remains the same, and the function calls in &lt;code&gt;eat_at_restaurant&lt;/code&gt; will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.</source>
          <target state="translated">모듈 트리는 동일하게 유지되며 , 정의가 다른 파일에 존재하더라도 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 의 함수 호출은 수정없이 작동합니다. 이 기술을 사용하면 크기가 커짐에 따라 모듈을 새 파일로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb5cf295cab45b30e8f8d196e49ec369e86db99a" translate="yes" xml:space="preserve">
          <source>The monomorphized version of the code looks like the following. The generic &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is replaced with the specific definitions created by the compiler:</source>
          <target state="translated">코드의 변형 된 버전은 다음과 같습니다. 일반 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 는 컴파일러가 생성 한 특정 정의로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="75cf509b67ca81925881254de671f6530c684e13" translate="yes" xml:space="preserve">
          <source>The more common inherited mutability, where one must have unique access to mutate a value, is one of the key language elements that enables Rust to reason strongly about pointer aliasing, statically preventing crash bugs. Because of that, inherited mutability is preferred, and interior mutability is something of a last resort. Since cell types enable mutation where it would otherwise be disallowed though, there are occasions when interior mutability might be appropriate, or even &lt;em&gt;must&lt;/em&gt; be used, e.g.</source>
          <target state="translated">값을 변경하기 위해 고유 한 액세스 권한을 가져야하는보다 일반적인 상속 된 변경 가능성은 Rust가 포인터 앨리어싱을 강력하게 추론하여 충돌 버그를 정적으로 방지 할 수있게하는 핵심 언어 요소 중 하나입니다. 그 때문에 상속 된 돌연변이가 선호되며 내부 돌연변이는 최후의 수단입니다. 비록 세포 유형이 그렇지 않으면 허용되지 않는 돌연변이를 가능하게하기 때문에, 내부 돌연변이가 적절하거나 심지어 사용 &lt;em&gt;되어야하는&lt;/em&gt; 경우 &lt;em&gt;가&lt;/em&gt; 있다.</target>
        </trans-unit>
        <trans-unit id="22b87181f4af9bcd4494ede540e86fdd7af786b7" translate="yes" xml:space="preserve">
          <source>The most basic pattern in which &lt;code&gt;collect()&lt;/code&gt; is used is to turn one collection into another. You take a collection, call &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; on it, do a bunch of transformations, and then &lt;code&gt;collect()&lt;/code&gt; at the end.</source>
          <target state="translated">&lt;code&gt;collect()&lt;/code&gt; 가 사용 되는 가장 기본적인 패턴은 한 컬렉션을 다른 컬렉션으로 바꾸는 것입니다. 컬렉션을 가져 와서 &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 를 호출 하고 많은 변환을 수행 한 다음 마지막에 &lt;code&gt;collect()&lt;/code&gt; 를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="524cfe2dc48693915271c90c3e4b7d15d2163d53" translate="yes" xml:space="preserve">
          <source>The most likely source of this error is using angle-bracket notation without wrapping the function argument type into a tuple, for example:</source>
          <target state="translated">이 오류의 원인은 다음과 같이 함수 인수 유형을 튜플로 래핑하지 않고 꺾쇠 괄호 표기법을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f1fae4bef53f01c296ad8cf52cd2f776bcb2545a" translate="yes" xml:space="preserve">
          <source>The most straightforward smart pointer is a &lt;em&gt;box&lt;/em&gt;, whose type is written &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. Boxes allow you to store data on the heap rather than the stack. What remains on the stack is the pointer to the heap data. Refer to Chapter 4 to review the difference between the stack and the heap.</source>
          <target state="translated">가장 간단한 스마트 포인터는이다 &lt;em&gt;상자&lt;/em&gt; 유형이 기록, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; . 상자를 사용하면 스택이 아닌 힙에 데이터를 저장할 수 있습니다. 스택에 남아있는 것은 힙 데이터에 대한 포인터입니다. 스택과 힙의 차이점을 검토하려면 4 장을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="224b0446b4293b35c3feb8b386382ff2882bd862" translate="yes" xml:space="preserve">
          <source>The most widely used form of macros in Rust is &lt;em&gt;declarative macros&lt;/em&gt;. These are also sometimes referred to as &amp;ldquo;macros by example,&amp;rdquo; &amp;ldquo;&lt;code&gt;macro_rules!&lt;/code&gt; macros,&amp;rdquo; or just plain &amp;ldquo;macros.&amp;rdquo; At their core, declarative macros allow you to write something similar to a Rust &lt;code&gt;match&lt;/code&gt; expression. As discussed in Chapter 6, &lt;code&gt;match&lt;/code&gt; expressions are control structures that take an expression, compare the resulting value of the expression to patterns, and then run the code associated with the matching pattern. Macros also compare a value to patterns that are associated with particular code: in this situation, the value is the literal Rust source code passed to the macro; the patterns are compared with the structure of that source code; and the code associated with each pattern, when matched, replaces the code passed to the macro. This all happens during compilation.</source>
          <target state="translated">Rust에서 가장 널리 사용되는 매크로는 &lt;em&gt;선언적 매크로&lt;/em&gt; 입니다. 이것들은 때때로&amp;ldquo;매크로 예&amp;rdquo;,&amp;ldquo; &lt;code&gt;macro_rules!&lt;/code&gt; 매크로 '또는 일반'매크로 ' 핵심적으로 선언적 매크로를 사용하면 Rust &lt;code&gt;match&lt;/code&gt; 식과 비슷한 것을 작성할 수 있습니다 . 제 6 장에서 설명하고있는 바와 같이 &lt;code&gt;match&lt;/code&gt; 식은 식을 가져오고 식의 결과 값을 패턴과 비교 한 다음 일치하는 패턴과 관련된 코드를 실행하는 제어 구조입니다. 매크로는 또한 특정 코드와 관련된 패턴과 값을 비교합니다.이 상황에서 값은 매크로에 전달 된 리터럴 Rust 소스 코드입니다. 패턴은 해당 소스 코드의 구조와 비교됩니다. 각 패턴과 관련된 코드는 일치 될 때 매크로에 전달 된 코드를 대체합니다. 이 모든 것은 컴파일 중에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5c8119cbdd49364e9c5037e1b8a03abc1bccdb46" translate="yes" xml:space="preserve">
          <source>The motivation for this design is twofold:</source>
          <target state="translated">이 디자인의 동기는 두 가지입니다.</target>
        </trans-unit>
        <trans-unit id="6fd4e131dbce656fa77aa6dbacb12fee04853072" translate="yes" xml:space="preserve">
          <source>The multi-argument form of this macro panics with a string and has the &lt;a href=&quot;macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; syntax for building a string.</source>
          <target state="translated">이 매크로의 다중 인수 형식은 문자열로 패닉되며 &lt;a href=&quot;macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;문자열 작성 구문</target>
        </trans-unit>
        <trans-unit id="ff7a3f839c4dac34de65c2bfcbc13d6c2f460e6c" translate="yes" xml:space="preserve">
          <source>The multiplication assignment operator &lt;code&gt;*=&lt;/code&gt;.</source>
          <target state="translated">곱셈 대입 연산자 &lt;code&gt;*=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="945e202ccc3f817f464a16a52710aeff055613cc" translate="yes" xml:space="preserve">
          <source>The multiplication operator &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">곱셈 연산자 &lt;code&gt;*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="395bf55779b3f4b37031c67eb2f13567f6e766a4" translate="yes" xml:space="preserve">
          <source>The mutability of a pointer does not change its size. As such, &lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; have the same size. Likewise for &lt;code&gt;*const T&lt;/code&gt; and &lt;code&gt;*mut T&lt;/code&gt;.</source>
          <target state="translated">포인터의 변경 가능성은 크기를 변경하지 않습니다. 따라서 &lt;code&gt;&amp;amp;T&lt;/code&gt; 와 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 의 크기는 같습니다. &lt;code&gt;*const T&lt;/code&gt; 및 &lt;code&gt;*mut T&lt;/code&gt; 도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="f42a8b27f0c72155ef0f3b14d7be6cafaaf62841" translate="yes" xml:space="preserve">
          <source>The mutable slice yields mutable references to the elements:</source>
          <target state="translated">변경 가능한 슬라이스는 요소에 대한 변경 가능한 참조를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3c3cbd1ab17a10688ead5cf4d56f2dfc9e512608" translate="yes" xml:space="preserve">
          <source>The mutexes in this module implement a strategy called &quot;poisoning&quot; where a mutex is considered poisoned whenever a thread panics while holding the mutex. Once a mutex is poisoned, all other threads are unable to access the data by default as it is likely tainted (some invariant is not being upheld).</source>
          <target state="translated">이 모듈의 뮤텍스는 뮤텍스를 잡고있는 동안 스레드 패닉이 발생할 때마다 뮤텍스가 중독 된 것으로 간주되는 &quot;poisoning&quot;전략을 구현합니다. 일단 뮤텍스가 감염되면 다른 모든 스레드는 기본적으로 데이터가 오염되었을 가능성이 있으므로 데이터에 액세스 할 수 없습니다 (일부 불변은 유지되지 않음).</target>
        </trans-unit>
        <trans-unit id="d8b50303b0747d7e3abc95898503b5bde7711980" translate="yes" xml:space="preserve">
          <source>The name chosen for an external crate conflicts with another external crate that has been imported into the current module.</source>
          <target state="translated">외부 상자에 선택된 이름이 현재 모듈로 가져온 다른 외부 상자와 충돌합니다.</target>
        </trans-unit>
        <trans-unit id="d94375d609f70bc0ddb2da1f070fd5b681c30cc1" translate="yes" xml:space="preserve">
          <source>The name for an item declaration conflicts with an external crate's name.</source>
          <target state="translated">품목 신고의 이름이 외부 상자의 이름과 충돌합니다.</target>
        </trans-unit>
        <trans-unit id="286d59804da04e407ec36eb2be39e9e0c7ff3343" translate="yes" xml:space="preserve">
          <source>The name must not contain null bytes (&lt;code&gt;\0&lt;/code&gt;).</source>
          <target state="translated">이름에는 널 바이트 ( &lt;code&gt;\0&lt;/code&gt; )가 포함되지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="6584162ced4a99e7d4548e6dfca0a1b5adbdbd8e" translate="yes" xml:space="preserve">
          <source>The need for synchronization</source>
          <target state="translated">동기화의 필요성</target>
        </trans-unit>
        <trans-unit id="9491a60a88ee503552e1418886a35e38dd1f594f" translate="yes" xml:space="preserve">
          <source>The need for this type arises from the fact that:</source>
          <target state="translated">이 유형의 필요성은 다음과 같은 사실에서 비롯됩니다.</target>
        </trans-unit>
        <trans-unit id="3e795b9b16f895fca00c98b1df11fc0d63c7301f" translate="yes" xml:space="preserve">
          <source>The network operation failed because it was not connected yet.</source>
          <target state="translated">아직 연결되지 않았기 때문에 네트워크 작업이 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="7c5a2cc50c7976456054417007ed08f73bfd9e80" translate="yes" xml:space="preserve">
          <source>The never type &lt;code&gt;!&lt;/code&gt; is a type with no values, representing the result of computations that never complete. Expressions of type &lt;code&gt;!&lt;/code&gt; can be coerced into any other type.</source>
          <target state="translated">절대 타입 &lt;code&gt;!&lt;/code&gt; 완료되지 않은 계산 결과를 나타내는 값이없는 유형입니다. 타입의 표현 &lt;code&gt;!&lt;/code&gt; 다른 유형으로 강요 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2876200ee40ea0a4251130e3bb42070db01f59e5" translate="yes" xml:space="preserve">
          <source>The never type is useful with the &lt;code&gt;panic!&lt;/code&gt; macro as well. Remember the &lt;code&gt;unwrap&lt;/code&gt; function that we call on &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; values to produce a value or panic? Here is its definition:</source>
          <target state="translated">never type은 &lt;code&gt;panic!&lt;/code&gt; 유용합니다 ! 매크로도 마찬가지입니다. 값 또는 패닉을 생성하기 위해 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 값을 호출 하는 &lt;code&gt;unwrap&lt;/code&gt; 기능을 기억 하십니까? 그 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="56b6326e5da7a2c1bad08c52fe9675cb30d6fc5f" translate="yes" xml:space="preserve">
          <source>The new test for the case-&lt;em&gt;insensitive&lt;/em&gt; search uses &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; as its query. In the &lt;code&gt;search_case_insensitive&lt;/code&gt; function we&amp;rsquo;re about to add, the query &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; should match the line containing &lt;code&gt;&quot;Rust:&quot;&lt;/code&gt; with a capital R and match the line &lt;code&gt;&quot;Trust me.&quot;&lt;/code&gt; even though both have different casing from the query. This is our failing test, and it will fail to compile because we haven&amp;rsquo;t yet defined the &lt;code&gt;search_case_insensitive&lt;/code&gt; function. Feel free to add a skeleton implementation that always returns an empty vector, similar to the way we did for the &lt;code&gt;search&lt;/code&gt; function in Listing 12-16 to see the test compile and fail.</source>
          <target state="translated">대소 문자를 &lt;em&gt;구분하지 않는&lt;/em&gt; 검색에 대한 새로운 테스트 는 &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; 를 쿼리로 사용합니다. 우리가 추가 하려는 &lt;code&gt;search_case_insensitive&lt;/code&gt; 함수에서 쿼리 &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; 는 &lt;code&gt;&quot;Rust:&quot;&lt;/code&gt; 를 포함하는 행 과 대문자 R을 일치시키고 &lt;code&gt;&quot;Trust me.&quot;&lt;/code&gt; 와 일치해야합니다 . 둘 다 쿼리와 다른 케이싱을 가지고 있지만. 이것은 실패한 테스트이며 &lt;code&gt;search_case_insensitive&lt;/code&gt; 함수를 아직 정의하지 않았으므로 컴파일에 실패 합니다. Listing 12-16 의 &lt;code&gt;search&lt;/code&gt; 함수에서 테스트 컴파일 및 실패를 확인하는 방식과 유사하게 항상 빈 벡터를 반환하는 스켈레톤 구현을 자유롭게 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="9a3696a40107bd6d0870f3607ce5d6e5073b6d6b" translate="yes" xml:space="preserve">
          <source>The newtype pattern is useful for tasks beyond those we&amp;rsquo;ve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 19-15: recall that the &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt; structs wrapped &lt;code&gt;u32&lt;/code&gt; values in a newtype. If we wrote a function with a parameter of type &lt;code&gt;Millimeters&lt;/code&gt;, we couldn&amp;rsquo;t compile a program that accidentally tried to call that function with a value of type &lt;code&gt;Meters&lt;/code&gt; or a plain &lt;code&gt;u32&lt;/code&gt;.</source>
          <target state="translated">새 유형 패턴은 값이 혼동되지 않도록 정적으로 시행하고 값의 단위를 나타내는 것을 포함하여 지금까지 설명한 작업 이외의 작업에 유용합니다. Listing 19-15에서 단위를 나타 내기 위해 newtypes를 사용하는 예제를 보았다 : &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt; 는 &lt;code&gt;u32&lt;/code&gt; 값을 새로운 타입으로 감싼다 는 것을 상기하자 . 만약 우리가 &lt;code&gt;Millimeters&lt;/code&gt; 타입의 파라미터를 가진 함수를 작성했다면 우연히 &lt;code&gt;Meters&lt;/code&gt; 타입 이나 평범한 &lt;code&gt;u32&lt;/code&gt; 타입의 함수를 호출하려고 시도한 프로그램을 컴파일 할 수 없었습니다 .</target>
        </trans-unit>
        <trans-unit id="b591edfc8b3d018e277499297a4856c76a36dc2a" translate="yes" xml:space="preserve">
          <source>The next four lines set the configuration information Cargo needs to compile your program: the name, the version, who wrote it, and the edition of Rust to use. Cargo gets your name and email information from your environment, so if that information is not correct, fix the information now and then save the file. We&amp;rsquo;ll talk about the &lt;code&gt;edition&lt;/code&gt; key in Appendix E.</source>
          <target state="translated">다음 네 줄은 카고가 프로그램을 컴파일하는 데 필요한 구성 정보, 이름, 버전, 작성한 사람 및 사용할 Rust 버전을 설정합니다. 화물은 환경에서 이름과 이메일 정보를 얻으므로 해당 정보가 정확하지 않은 경우 지금 정보를 수정 한 다음 파일을 저장하십시오. 부록 E 의 &lt;code&gt;edition&lt;/code&gt; 키에 대해 이야기하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="6a7a2603b03740bcea191aea3d000fd9f48ffbb9" translate="yes" xml:space="preserve">
          <source>The next logical question is which style you should choose in your own code and why: the original implementation in Listing 13-28 or the version using iterators in Listing 13-29. Most Rust programmers prefer to use the iterator style. It&amp;rsquo;s a bit tougher to get the hang of at first, but once you get a feel for the various iterator adaptors and what they do, iterators can be easier to understand. Instead of fiddling with the various bits of looping and building new vectors, the code focuses on the high-level objective of the loop. This abstracts away some of the commonplace code so it&amp;rsquo;s easier to see the concepts that are unique to this code, such as the filtering condition each element in the iterator must pass.</source>
          <target state="translated">다음 논리적 인 질문은 자신의 코드에서 어떤 스타일을 선택해야하며 그 이유는 Listing 13-28의 원래 구현 또는 Listing 13-29의 반복자를 사용하는 버전이다. 대부분의 Rust 프로그래머는 반복자 스타일을 선호합니다. 처음에는 다루기가 더 힘들지만 다양한 반복기 어댑터와 그 기능에 대한 느낌을 얻으면 반복자를 이해하기가 더 쉬울 수 있습니다. 코드는 다양한 비트 반복 및 새로운 벡터 생성 대신에 루프의 높은 수준의 목표에 중점을 둡니다. 이것은 일반적인 코드 중 일부를 추상화하여 이터레이터의 각 요소가 통과해야하는 필터링 조건과 같이이 코드에 고유 한 개념을보다 쉽게 ​​볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57f6548988daa34617ffdf2e9ca86d7e443df79f" translate="yes" xml:space="preserve">
          <source>The next note line tells us that we can set the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variable to get a backtrace of exactly what happened to cause the error. A &lt;em&gt;backtrace&lt;/em&gt; is a list of all the functions that have been called to get to this point. Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote. That&amp;rsquo;s the spot where the problem originated. The lines above the lines mentioning your files are code that your code called; the lines below are code that called your code. These lines might include core Rust code, standard library code, or crates that you&amp;rsquo;re using. Let&amp;rsquo;s try getting a backtrace by setting the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variable to any value except 0. Listing 9-2 shows output similar to what you&amp;rsquo;ll see.</source>
          <target state="translated">다음 노트 라인은 &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; 환경 변수를 설정 하여 오류를 일으킨 정확한 원인의 역 추적을 얻을 수 있음을 알려줍니다 . &lt;em&gt;역 추적은&lt;/em&gt; 이 지점에 도착하기 위해 호출 된 모든 기능의 목록입니다. Rust의 역 추적은 다른 언어와 마찬가지로 작동합니다. 역 추적을 읽는 열쇠는 위에서부터 시작하여 작성한 파일을 볼 때까지 읽는 것입니다. 그것이 문제가 시작된 지점입니다. 파일을 언급하는 행 위의 행은 코드에서 호출 한 코드입니다. 아래 줄은 코드라는 코드입니다. 이 줄에는 핵심 Rust 코드, 표준 라이브러리 코드 또는 사용중인 상자가 포함될 수 있습니다. &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; 를 설정하여 역 추적을 시도해 봅시다. 환경 변수는 0을 제외한 모든 값으로 설정합니다. 목록 9-2는 표시되는 것과 유사한 출력을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="771993487043dfd3c7aa5a2390e7d9f0063dbedb" translate="yes" xml:space="preserve">
          <source>The next part of the code, &lt;code&gt;.read_line(&amp;amp;mut guess)&lt;/code&gt;, calls the &lt;a href=&quot;../std/io/struct.stdin#method.read_line&quot;&gt;&lt;code&gt;read_line&lt;/code&gt;&lt;/a&gt; method on the standard input handle to get input from the user. We&amp;rsquo;re also passing one argument to &lt;code&gt;read_line&lt;/code&gt;: &lt;code&gt;&amp;amp;mut guess&lt;/code&gt;.</source>
          <target state="translated">코드의 다음 부분 인 &lt;code&gt;.read_line(&amp;amp;mut guess)&lt;/code&gt; 는 표준 입력 핸들 에서 &lt;a href=&quot;../std/io/struct.stdin#method.read_line&quot;&gt; &lt;code&gt;read_line&lt;/code&gt; &lt;/a&gt; 메서드를 호출 하여 사용자로부터 입력을받습니다. 또한 &lt;code&gt;read_line&lt;/code&gt; 에 인수 하나를 전달하고 있습니다 : &lt;code&gt;&amp;amp;mut guess&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f3a0383282eca508bd91153f03681dc6f1973f4" translate="yes" xml:space="preserve">
          <source>The next part of the request line is &lt;em&gt;/&lt;/em&gt;, which indicates the &lt;em&gt;Uniform Resource Identifier&lt;/em&gt;&lt;em&gt;(URI)&lt;/em&gt; the client is requesting: a URI is almost, but not quite, the same as a &lt;em&gt;Uniform Resource Locator&lt;/em&gt;&lt;em&gt;(URL)&lt;/em&gt;. The difference between URIs and URLs isn&amp;rsquo;t important for our purposes in this chapter, but the HTTP spec uses the term URI, so we can just mentally substitute URL for URI here.</source>
          <target state="translated">요청 라인의 다음 부분은 &lt;em&gt;/입니다&lt;/em&gt; . 이는 클라이언트가 요청하는 &lt;em&gt;URI ( &lt;/em&gt;&lt;em&gt;Uniform Resource Identifier)&lt;/em&gt; 를 나타냅니다 . URI는 &lt;em&gt;URL ( &lt;/em&gt;&lt;em&gt;Uniform Resource Locator)&lt;/em&gt; 과 거의 동일하지만 완전히 동일하지는 않습니다 . URI와 URL의 차이는이 장에서 우리의 목적에 중요하지 않지만 HTTP 사양은 URI라는 용어를 사용하므로 여기서 URL을 정신적으로 대체 할 수 있습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="504232041214e8dae75346e3d17c4c0bf4814b9b" translate="yes" xml:space="preserve">
          <source>The next part of the test output, which starts with &lt;code&gt;Doc-tests adder&lt;/code&gt;, is for the results of any documentation tests. We don&amp;rsquo;t have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps us keep our docs and our code in sync! We&amp;rsquo;ll discuss how to write documentation tests in the &lt;a href=&quot;ch14-02-publishing-to-crates-io#documentation-comments-as-tests&quot;&gt;&amp;ldquo;Documentation Comments as Tests&amp;rdquo;&lt;/a&gt; section of Chapter 14. For now, we&amp;rsquo;ll ignore the &lt;code&gt;Doc-tests&lt;/code&gt; output.</source>
          <target state="translated">&lt;code&gt;Doc-tests adder&lt;/code&gt; 로 시작하는 테스트 출력의 다음 부분 은 모든 문서 테스트 결과입니다. 아직 문서화 테스트는 없지만 Rust는 API 문서에 나오는 코드 예제를 컴파일 할 수 있습니다. 이 기능은 문서와 코드를 동기화하는 데 도움이됩니다! 14 장의 &lt;a href=&quot;ch14-02-publishing-to-crates-io#documentation-comments-as-tests&quot;&gt;&quot;문서로 테스트 주석&quot;&lt;/a&gt; 섹션 에서 문서 테스트를 작성하는 방법에 대해 설명합니다 . 지금은 &lt;code&gt;Doc-tests&lt;/code&gt; 출력을 무시합니다 .</target>
        </trans-unit>
        <trans-unit id="1ac4585430b879637fa9bf73df289a63ff5c8c8c" translate="yes" xml:space="preserve">
          <source>The next step is to define the procedural macro. At the time of this writing, procedural macros need to be in their own crate. Eventually, this restriction might be lifted. The convention for structuring crates and macro crates is as follows: for a crate named &lt;code&gt;foo&lt;/code&gt;, a custom derive procedural macro crate is called &lt;code&gt;foo_derive&lt;/code&gt;. Let&amp;rsquo;s start a new crate called &lt;code&gt;hello_macro_derive&lt;/code&gt; inside our &lt;code&gt;hello_macro&lt;/code&gt; project:</source>
          <target state="translated">다음 단계는 절차 적 매크로를 정의하는 것입니다. 이 글을 쓰는 시점에서 절차 적 매크로는 자체 상자에 있어야합니다. 결국이 제한이 해제 될 수 있습니다. 크레이트와 매크로 크레이트를 구성하는 규칙은 다음과 같습니다. &lt;code&gt;foo&lt;/code&gt; 라는 상자의 경우, 사용자 지정 파생 절차 매크로 크레이트를 &lt;code&gt;foo_derive&lt;/code&gt; 라고 합니다 . 의 새로운 상자라고 시작하자 &lt;code&gt;hello_macro_derive&lt;/code&gt; 우리의 내부 &lt;code&gt;hello_macro&lt;/code&gt; 프로젝트를 :</target>
        </trans-unit>
        <trans-unit id="86c376c4d2f9126074dd6023a007174609449704" translate="yes" xml:space="preserve">
          <source>The next time you run &lt;code&gt;cargo build&lt;/code&gt;, Cargo will update the registry of crates available and reevaluate your &lt;code&gt;rand&lt;/code&gt; requirements according to the new version you have specified.</source>
          <target state="translated">다음에 &lt;code&gt;cargo build&lt;/code&gt; 를 실행하면 Cargo는 사용 가능한 상자의 레지스트리를 업데이트하고 지정한 새 버전에 따라 &lt;code&gt;rand&lt;/code&gt; 요구 사항을 재평가 합니다.</target>
        </trans-unit>
        <trans-unit id="145ccdcfae9c0bd6f7e5de42ea443500c786c639" translate="yes" xml:space="preserve">
          <source>The nominal type is called the &lt;em&gt;implementing type&lt;/em&gt; and the associable items are the &lt;em&gt;associated items&lt;/em&gt; to the implementing type.</source>
          <target state="translated">공칭 유형을 &lt;em&gt;구현 유형&lt;/em&gt; 이라고 하며 &lt;em&gt;연관 가능한 항목&lt;/em&gt; 은 구현 유형 &lt;em&gt;과 연관된 항목&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a450d39487d717bce9613fc2953a92eb80b07994" translate="yes" xml:space="preserve">
          <source>The note mentions &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt;, which is a &lt;em&gt;trait&lt;/em&gt;. We&amp;rsquo;ll talk about traits in the next section. For now, this error states that the body of &lt;code&gt;largest&lt;/code&gt; won&amp;rsquo;t work for all possible types that &lt;code&gt;T&lt;/code&gt; could be. Because we want to compare values of type &lt;code&gt;T&lt;/code&gt; in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt; trait that you can implement on types (see Appendix C for more on this trait). You&amp;rsquo;ll learn how to specify that a generic type has a particular trait in the &lt;a href=&quot;ch10-02-traits#traits-as-parameters&quot;&gt;&amp;ldquo;Traits as Parameters&amp;rdquo;&lt;/a&gt; section, but let&amp;rsquo;s first explore other ways of using generic type parameters.</source>
          <target state="translated">노트는 언급 &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt; A는, &lt;em&gt;특성을&lt;/em&gt; . 다음 섹션에서 특성에 대해 이야기하겠습니다. 현재이 오류는 &lt;code&gt;largest&lt;/code&gt; 몸체 가 &lt;code&gt;T&lt;/code&gt; 가 가능한 모든 유형에서 작동하지 않는다는 것을 나타냅니다. 본문에서 유형 &lt;code&gt;T&lt;/code&gt; 의 값을 비교하려고하기 때문에 값을 정렬 할 수있는 유형 만 사용할 수 있습니다. 비교를 가능하게하기 위해 표준 라이브러리에는 유형에 구현할 수 있는 &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt; 특성이 있습니다 (이 특성에 대한 자세한 내용은 부록 C 참조). &lt;a href=&quot;ch10-02-traits#traits-as-parameters&quot;&gt;&quot;매개 변수로 처리&quot;&lt;/a&gt; 섹션 에서 일반 형식에 특정 특성이 있음을 지정하는 방법을 배우지 만 먼저 일반 형식 매개 변수를 사용하는 다른 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="39a86e3fff1f9b2a932559db164eca88c47636bb" translate="yes" xml:space="preserve">
          <source>The number of arguments passed to a function must match the number of arguments specified in the function signature.</source>
          <target state="translated">함수에 전달 된 인수의 수는 함수 서명에 지정된 인수의 수와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="29c5008d92a3f283390aac2066e3363b4399cff1" translate="yes" xml:space="preserve">
          <source>The number of elements in an array or slice pattern differed from the number of elements in the array being matched.</source>
          <target state="translated">배열 또는 슬라이스 패턴의 요소 수가 일치하는 배열의 요소 수와 다릅니다.</target>
        </trans-unit>
        <trans-unit id="7202e21ed0c94540f8855e2b43b5089a13dd9685" translate="yes" xml:space="preserve">
          <source>The number of supplied arguments must exactly match the number of defined type parameters.</source>
          <target state="translated">제공된 인수의 수는 정의 된 유형 매개 변수의 수와 정확히 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="1505278c99d9fb45d4f4157fc24b25e9be942498" translate="yes" xml:space="preserve">
          <source>The offset being in bounds cannot rely on &quot;wrapping around&quot; the address space. That is, the infinite-precision sum must fit in a &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">경계에있는 오프셋은 주소 공간 &quot;래핑&quot;에 의존 할 수 없습니다. 즉, 무한 정밀도 합계는 &lt;code&gt;usize&lt;/code&gt; 에 맞아야 합니다.</target>
        </trans-unit>
        <trans-unit id="eb0b1c110f4f91ff6afa42a1772303d08fd7f686" translate="yes" xml:space="preserve">
          <source>The offset being in bounds cannot rely on &quot;wrapping around&quot; the address space. That is, the infinite-precision sum must fit in a usize.</source>
          <target state="translated">경계에있는 오프셋은 주소 공간 &quot;래핑&quot;에 의존 할 수 없습니다. 즉, 무한 정밀도 합계는 사용에 적합해야합니다.</target>
        </trans-unit>
        <trans-unit id="dec85f2a58c1002de0f34de579c15b9ae5dcc5c3" translate="yes" xml:space="preserve">
          <source>The offset being in bounds cannot rely on &quot;wrapping around&quot; the address space. That is, the infinite-precision sum, &lt;strong&gt;in bytes&lt;/strong&gt; must fit in a usize.</source>
          <target state="translated">경계에있는 오프셋은 주소 공간 &quot;래핑&quot;에 의존 할 수 없습니다. 즉, &lt;strong&gt;바이트 단위&lt;/strong&gt; 의 무한 정밀도 합계 는 usize에 맞아야합니다.</target>
        </trans-unit>
        <trans-unit id="b405bb6eb2033937b629bd683503a6e77a48009c" translate="yes" xml:space="preserve">
          <source>The offset is expressed in number of &lt;code&gt;T&lt;/code&gt; elements, and not bytes. The value returned can be used with the &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;offset_to&lt;/code&gt; methods.</source>
          <target state="translated">오프셋은 바이트가 아닌 &lt;code&gt;T&lt;/code&gt; 요소 수로 표시 됩니다. 반환 된 값은 &lt;code&gt;offset&lt;/code&gt; 또는 &lt;code&gt;offset_to&lt;/code&gt; 메서드 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1be821c2089924c0d18d107c2c27f16675f5ac1c" translate="yes" xml:space="preserve">
          <source>The offset is relative to the start of the file and thus independent from the current cursor.</source>
          <target state="translated">오프셋은 파일의 시작에 상대적이므로 현재 커서와 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="084e82e27a45f945c98a971924845d2bbfc865a4" translate="yes" xml:space="preserve">
          <source>The offset is relative to the start of the file and thus independent from the current cursor. The current cursor &lt;strong&gt;is&lt;/strong&gt; affected by this function, it is set to the end of the read.</source>
          <target state="translated">오프셋은 파일의 시작에 상대적이므로 현재 커서와 독립적입니다. 현재 커서 &lt;strong&gt;는&lt;/strong&gt; 이 기능의 영향을받으며 읽기 끝으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="caf802013d8abd4267e3b977c2a718d4ec2a76b7" translate="yes" xml:space="preserve">
          <source>The offset is relative to the start of the file and thus independent from the current cursor. The current cursor &lt;strong&gt;is&lt;/strong&gt; affected by this function, it is set to the end of the write.</source>
          <target state="translated">오프셋은 파일의 시작에 상대적이므로 현재 커서와 독립적입니다. 현재 커서 &lt;strong&gt;는&lt;/strong&gt; 이 기능의 영향을받으며 쓰기 끝으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="e661f5d3042445d2052a045a18f9872b66b5bc29" translate="yes" xml:space="preserve">
          <source>The old borrow checker has known soundness issues that are basically impossible to fix. The new NLL-based borrow checker is the fix.</source>
          <target state="translated">구 빌려 오기 체커는 기본적으로 고칠 수없는 건전성 문제를 알고 있습니다. 새로운 NLL 기반 차용 검사기가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="ff9f5d5ca24724dc4d44a56e5f4a630aa34c4326" translate="yes" xml:space="preserve">
          <source>The one exception is the implicit &lt;code&gt;Self&lt;/code&gt; type of a trait. A trait does not have an implicit &lt;code&gt;Sized&lt;/code&gt; bound as this is incompatible with &lt;a href=&quot;../../book/ch17-02-trait-objects&quot;&gt;trait object&lt;/a&gt;s where, by definition, the trait needs to work with all possible implementors, and thus could be any size.</source>
          <target state="translated">한 가지 예외는 특성 의 내재적 &lt;code&gt;Self&lt;/code&gt; 유형입니다. 특성은 정의에 따라 특성이 가능한 모든 구현 자와 작동해야하므로 임의의 크기 일 수있는 &lt;a href=&quot;../../book/ch17-02-trait-objects&quot;&gt;특성 오브젝트&lt;/a&gt; 와 호환 되지 않기 때문에 암시 적 &lt;code&gt;Sized&lt;/code&gt; 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="251eb8c6b3ec1dc5000df1aa3f1d9769e8fc67e3" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one divides &lt;code&gt;MIN / -1&lt;/code&gt; on a signed type (where &lt;code&gt;MIN&lt;/code&gt; is the negative minimal value for the type); this is equivalent to &lt;code&gt;-MIN&lt;/code&gt;, a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">이러한 랩핑이 발생할 수있는 유일한 경우 는 서명 된 유형에서 &lt;code&gt;MIN / -1&lt;/code&gt; 을 나누는 경우입니다 (여기서 &lt;code&gt;MIN&lt;/code&gt; 은 유형 의 음의 최소값 입니다). 이는 유형으로 표현하기에는 너무 큰 양수 값인 &lt;code&gt;-MIN&lt;/code&gt; 과 같습니다 . 이 경우이 함수는 &lt;code&gt;MIN&lt;/code&gt; 자체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="76c053c143fda09cee97a50ed7a5afba7b9b021c" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one negates &lt;code&gt;MIN&lt;/code&gt; on a signed type (where &lt;code&gt;MIN&lt;/code&gt; is the negative minimal value for the type); this is a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">이러한 랩핑이 발생할 수있는 유일한 경우 는 서명 된 유형에서 &lt;code&gt;MIN&lt;/code&gt; 을 부정 하는 경우입니다 (여기서 &lt;code&gt;MIN&lt;/code&gt; 은 유형 의 음의 최소값 입니다). 유형에 표현하기에는 너무 큰 양수 값입니다. 이 경우이 함수는 &lt;code&gt;MIN&lt;/code&gt; 자체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="4f6de3ab26de46b22b8646658bc86041ba8f3d5e" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one takes the absolute value of the negative minimal value for the type this is a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">이러한 랩핑이 발생할 수있는 유일한 경우는 유형에 대해 음의 최소값의 절대 값을 취할 때 이것은 유형에 표현하기에는 너무 큰 양의 값입니다. 이 경우이 함수는 &lt;code&gt;MIN&lt;/code&gt; 자체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="51b5a7f2069f2def348d2148cbc38445c3e27f4c" translate="yes" xml:space="preserve">
          <source>The only difference between Listing 15-7 and Listing 15-6 is that here we set &lt;code&gt;y&lt;/code&gt; to be an instance of a box pointing to the value in &lt;code&gt;x&lt;/code&gt; rather than a reference pointing to the value of &lt;code&gt;x&lt;/code&gt;. In the last assertion, we can use the dereference operator to follow the box&amp;rsquo;s pointer in the same way that we did when &lt;code&gt;y&lt;/code&gt; was a reference. Next, we&amp;rsquo;ll explore what is special about &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; that enables us to use the dereference operator by defining our own box type.</source>
          <target state="translated">리스팅 15-7 및 15-6리스트 사이의 유일한 차이점은 여기에 설정 인 &lt;code&gt;y&lt;/code&gt; 내의 값으로 가리키는 박스의 인스턴스로 &lt;code&gt;x&lt;/code&gt; 가 아닌 값으로하는 기준 좌표 &lt;code&gt;x&lt;/code&gt; . 마지막 어설 션에서 역 참조 연산자를 사용하여 &lt;code&gt;y&lt;/code&gt; 가 참조 일 때와 같은 방식으로 상자의 포인터를 따를 수 있습니다 . 다음으로 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 특별한 점을 살펴보고 자체 상자 유형을 정의하여 역 참조 연산자를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa7a3f715132d2845165ebc499ef1753bb78d047" translate="yes" xml:space="preserve">
          <source>The only functions that can be called in static or constant expressions are &lt;code&gt;const&lt;/code&gt; functions, and struct/enum constructors. &lt;code&gt;const&lt;/code&gt; functions are only available on a nightly compiler. Rust currently does not support more general compile-time function execution.</source>
          <target state="translated">정적 또는 상수 표현식에서 호출 할 수있는 유일한 함수는 &lt;code&gt;const&lt;/code&gt; 함수 및 struct / enum 생성자입니다. &lt;code&gt;const&lt;/code&gt; 함수는 야간 컴파일러에서만 사용할 수 있습니다. Rust는 현재보다 일반적인 컴파일 타임 함수 실행을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f7c42c506a124c9ffe70241d1844e481774b0efe" translate="yes" xml:space="preserve">
          <source>The only lifetime allowed in a constant is &lt;code&gt;'static&lt;/code&gt;, which is the lifetime that encompasses all others in a Rust program. For example, if you wanted to define a constant string, it would look like this:</source>
          <target state="translated">상수에서 허용되는 유일한 수명은 &lt;code&gt;'static&lt;/code&gt; ' 이며, 이는 Rust 프로그램의 다른 모든 것을 포함하는 수명입니다. 예를 들어 상수 문자열을 정의하려는 경우 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c90e7627a1475de1daf664c395cb8fc220c2a179" translate="yes" xml:space="preserve">
          <source>The operand of a field expression.</source>
          <target state="translated">필드 표현식의 피연산자</target>
        </trans-unit>
        <trans-unit id="c815094584bba28655815f7e3484796d5b4ac295" translate="yes" xml:space="preserve">
          <source>The operand of a unary &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrow&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference&lt;/a&gt; operator.</source>
          <target state="translated">단항 &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;차용&lt;/a&gt; 또는 &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;역 참조&lt;/a&gt; 연산자 의 피연산자입니다 .</target>
        </trans-unit>
        <trans-unit id="8300616806da6883f068d3a939bb5817283d75af" translate="yes" xml:space="preserve">
          <source>The operand of any &lt;a href=&quot;expressions#implicit-borrows&quot;&gt;implicit borrow&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions#implicit-borrows&quot;&gt;암시 적 차용&lt;/a&gt; 의 피연산자 .</target>
        </trans-unit>
        <trans-unit id="02413f33b0997a467453e2cc175754042613115c" translate="yes" xml:space="preserve">
          <source>The operation failed because a pipe was closed.</source>
          <target state="translated">파이프가 닫혀서 작업이 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="e0b6b6bb05edcbe700535a8a02fd6257faeb1085" translate="yes" xml:space="preserve">
          <source>The operation lacked the necessary privileges to complete.</source>
          <target state="translated">작업을 완료하는 데 필요한 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d56bd5ac430688946f617fddd5ff8737ea77aabc" translate="yes" xml:space="preserve">
          <source>The operation needs to block to complete, but the blocking operation was requested to not occur.</source>
          <target state="translated">작업을 완료하려면 차단해야하지만 차단 작업이 발생하지 않도록 요청했습니다.</target>
        </trans-unit>
        <trans-unit id="554600e43876fa49fe1808261768a1599008a1a5" translate="yes" xml:space="preserve">
          <source>The operators &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; may be applied to operands of boolean type. The &lt;code&gt;||&lt;/code&gt; operator denotes logical 'or', and the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator denotes logical 'and'. They differ from &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; in that the right-hand operand is only evaluated when the left-hand operand does not already determine the result of the expression. That is, &lt;code&gt;||&lt;/code&gt; only evaluates its right-hand operand when the left-hand operand evaluates to &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; only when it evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">연산자 &lt;code&gt;||&lt;/code&gt; 및 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 는 부울 타입의 피연산자에 적용될 수있다. &lt;code&gt;||&lt;/code&gt; 연산자는 논리 'or'를 나타내고 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 연산자는 논리 'and'를 나타냅니다. 그들은 다른 &lt;code&gt;|&lt;/code&gt; 및 &lt;code&gt;&amp;amp;&lt;/code&gt; 좌측 이미 식의 결과를 결정하지 않는 경우 피연산자 오른쪽 피연산자만을 평가하는 것이있다. 즉, &lt;code&gt;||&lt;/code&gt; 단지의 오른쪽을 평가 피연산자 때 왼쪽 피연산자로 평가 &lt;code&gt;false&lt;/code&gt; , 그리고 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 만가 평가할 때 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94a90205d7a5e5f5664d5fdcbd09052010d467f6" translate="yes" xml:space="preserve">
          <source>The optional &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;&lt;em&gt;UTF8 byte order mark&lt;/em&gt;&lt;/a&gt; (UTF8BOM production) indicates that the file is encoded in UTF8. It can only occur at the beginning of the file and is ignored by the compiler.</source>
          <target state="translated">선택적 &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;&lt;em&gt;UTF8 바이트 순서 표시&lt;/em&gt;&lt;/a&gt; (UTF8BOM 프로덕션)는 파일이 UTF8로 인코딩되었음을 나타냅니다. 파일의 시작 부분에서만 발생할 수 있으며 컴파일러에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="60297fe01f4f2a21350a894e6ee139ac8e93f1b8" translate="yes" xml:space="preserve">
          <source>The order in which to evaluate the sub-expressions</source>
          <target state="translated">하위 표현식을 평가하는 순서</target>
        </trans-unit>
        <trans-unit id="61bedc7c16635e05c26ee08451d7e761461ef5bb" translate="yes" xml:space="preserve">
          <source>The organizational problem of allocating responsibility for multiple tasks to the &lt;code&gt;main&lt;/code&gt; function is common to many binary projects. As a result, the Rust community has developed a process to use as a guideline for splitting the separate concerns of a binary program when &lt;code&gt;main&lt;/code&gt; starts getting large. The process has the following steps:</source>
          <target state="translated">여러 작업에 대한 책임을 &lt;code&gt;main&lt;/code&gt; 기능 에 할당하는 조직적인 문제는 많은 이진 프로젝트에서 공통적입니다. 그 결과, Rust 커뮤니티는 &lt;code&gt;main&lt;/code&gt; 이 커지기 시작할 때 바이너리 프로그램의 개별 문제를 분리하기위한 지침으로 사용할 프로세스를 개발했습니다 . 이 프로세스에는 다음 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="41be0c260fec224b2719e05df384f73991bede1b" translate="yes" xml:space="preserve">
          <source>The other arm of the &lt;code&gt;match&lt;/code&gt; handles the case where we get an &lt;code&gt;Err&lt;/code&gt; value from &lt;code&gt;File::open&lt;/code&gt;. In this example, we&amp;rsquo;ve chosen to call the &lt;code&gt;panic!&lt;/code&gt; macro. If there&amp;rsquo;s no file named &lt;em&gt;hello.txt&lt;/em&gt; in our current directory and we run this code, we&amp;rsquo;ll see the following output from the &lt;code&gt;panic!&lt;/code&gt; macro:</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 하는 다른 팔은 &lt;code&gt;File::open&lt;/code&gt; 에서 &lt;code&gt;Err&lt;/code&gt; 값을 얻는 경우를 처리합니다 . 이 예에서는 &lt;code&gt;panic!&lt;/code&gt; 선택했습니다 ! 매크로. 현재 디렉토리에 &lt;em&gt;hello.txt&lt;/em&gt; 라는 파일이 &lt;em&gt;없고이&lt;/em&gt; 코드를 실행하면 다음과 같은 결과가 나타납니다 &lt;code&gt;panic!&lt;/code&gt; 매크로 :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7bf4938ef9d644fa6590a14199d49f21d906882" translate="yes" xml:space="preserve">
          <source>The other difference between &lt;code&gt;mut&lt;/code&gt; and shadowing is that because we&amp;rsquo;re effectively creating a new variable when we use the &lt;code&gt;let&lt;/code&gt; keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:</source>
          <target state="translated">&lt;code&gt;mut&lt;/code&gt; 와 shadowing의 또 다른 차이점 은 &lt;code&gt;let&lt;/code&gt; 키워드를 다시 사용할 때 새 변수를 효과적으로 작성하기 때문에 값의 유형을 변경하고 동일한 이름을 재사용 할 수 있다는 것입니다. 예를 들어, 프로그램이 사용자에게 공백 문자를 입력하여 일부 텍스트 사이에 원하는 공백 수를 표시하도록 요청하지만 실제로 해당 입력을 숫자로 저장하려고합니다.</target>
        </trans-unit>
        <trans-unit id="a27877809931e30e4d816c929aaf44550dc13948" translate="yes" xml:space="preserve">
          <source>The other option is to decide that pinning is &quot;structural&quot; for &lt;code&gt;field&lt;/code&gt;, meaning that if the struct is pinned then so is the field.</source>
          <target state="translated">다른 옵션은 피닝이 &lt;code&gt;field&lt;/code&gt; 에 대해 &quot;구조적&quot;인지 결정하는 것 입니다. 즉, 구조체가 고정되면 필드도 고정됩니다.</target>
        </trans-unit>
        <trans-unit id="0642ecd58583a2694ae6dacfe0a415f63c694440" translate="yes" xml:space="preserve">
          <source>The other reason to use inheritance relates to the type system: to enable a child type to be used in the same places as the parent type. This is also called &lt;em&gt;polymorphism&lt;/em&gt;, which means that you can substitute multiple objects for each other at runtime if they share certain characteristics.</source>
          <target state="translated">상속을 사용하는 다른 이유는 유형 시스템과 관련이 있습니다. 하위 유형을 상위 유형과 동일한 위치에서 사용할 수 있도록하기위한 것입니다. 이를 &lt;em&gt;다형성&lt;/em&gt; 이라고도합니다. 즉, 특정 특성을 공유하는 경우 런타임에 여러 오브젝트를 서로 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89dc389d4ca8b1b17999395cda6f46045ddfd179" translate="yes" xml:space="preserve">
          <source>The other use of the &lt;code&gt;impl&lt;/code&gt; keyword is in &lt;code&gt;impl Trait&lt;/code&gt; syntax, which can be seen as a shorthand for &quot;a concrete type that implements this trait&quot;. Its primary use is working with closures, which have type definitions generated at compile time that can't be simply typed out.</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; 키워드 의 다른 용도는 &lt;code&gt;impl Trait&lt;/code&gt; 구문에 있으며 &quot;이 특성을 구현하는 구체적 유형&quot;의 약어로 볼 수 있습니다. 그것의 주요 용도는 클로저를 사용하는 것인데, 클로저는 컴파일 타임에 생성되어 단순히 타이핑 할 수없는 타입 정의가 있습니다.</target>
        </trans-unit>
        <trans-unit id="69b16008db0e7fefb3576376fa59c7cdb24bc4ca" translate="yes" xml:space="preserve">
          <source>The outer scope declares a variable named &lt;code&gt;r&lt;/code&gt; with no initial value, and the inner scope declares a variable named &lt;code&gt;x&lt;/code&gt; with the initial value of 5. Inside the inner scope, we attempt to set the value of &lt;code&gt;r&lt;/code&gt; as a reference to &lt;code&gt;x&lt;/code&gt;. Then the inner scope ends, and we attempt to print the value in &lt;code&gt;r&lt;/code&gt;. This code won&amp;rsquo;t compile because the value &lt;code&gt;r&lt;/code&gt; is referring to has gone out of scope before we try to use it. Here is the error message:</source>
          <target state="translated">외부 범위는 초기 값이없는 &lt;code&gt;r&lt;/code&gt; 이라는 변수를 선언 하고 내부 범위는 초기 값이 5 인 &lt;code&gt;x&lt;/code&gt; 라는 변수를 선언합니다 . 내부 범위 내에서 &lt;code&gt;r&lt;/code&gt; 의 값 을 &lt;code&gt;x&lt;/code&gt; 에 대한 참조로 설정하려고합니다 . 그런 다음 내부 범위가 끝나고 &lt;code&gt;r&lt;/code&gt; 에 값을 인쇄하려고 시도합니다 . &lt;code&gt;r&lt;/code&gt; 이 참조 하는 값 이 범위를 벗어 났기 때문에이 코드는 컴파일되지 않습니다 . 오류 메시지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ee4813584901b6edf7255c9100533eb924eb1e04" translate="yes" xml:space="preserve">
          <source>The output of a finished process.</source>
          <target state="translated">완료된 프로세스의 출력</target>
        </trans-unit>
        <trans-unit id="7091d6ad7f032d028b64c465cb0226168ae0e89e" translate="yes" xml:space="preserve">
          <source>The output of this function should not be used in anything that might have security implications. For example:</source>
          <target state="translated">이 기능의 출력은 보안에 영향을 줄 수있는 어떤 것도 사용해서는 안됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4e5a226f1cb2eaa0ff96072c4caeb2fee856332d" translate="yes" xml:space="preserve">
          <source>The output type returned by methods.</source>
          <target state="translated">메소드가 리턴 한 출력 유형.</target>
        </trans-unit>
        <trans-unit id="b3fedfd8280044a357b6d9f266e6194249a97d9a" translate="yes" xml:space="preserve">
          <source>The output will be the recommended workout plan. Listing 13-2 shows the &lt;code&gt;main&lt;/code&gt; function we&amp;rsquo;ll use.</source>
          <target state="translated">출력은 권장 운동 계획이됩니다. Listing 13-2는 우리가 사용할 &lt;code&gt;main&lt;/code&gt; 기능을 보여준다 .</target>
        </trans-unit>
        <trans-unit id="b39c88ef6b933b61e4ea4a039f34870326ac716b" translate="yes" xml:space="preserve">
          <source>The ownership of &lt;code&gt;ptr&lt;/code&gt; is effectively transferred to the &lt;code&gt;String&lt;/code&gt; which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; 의 소유권 은 효과적으로 &lt;code&gt;String&lt;/code&gt; 으로 전송되며, 이는 마음대로 포인터가 가리키는 메모리의 내용을 할당 해제, 재 할당 또는 변경할 수 있습니다. 이 함수를 호출 한 후 다른 포인터를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="0c5ac2aeb05d71a34b822c034365a66e97f5d90e" translate="yes" xml:space="preserve">
          <source>The ownership of &lt;code&gt;ptr&lt;/code&gt; is effectively transferred to the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; 의 소유권은 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 로 효과적으로 전달 되며,이 포인터는 마음대로 포인터가 가리키는 메모리의 내용을 할당 해제, 재 할당 또는 변경할 수 있습니다. 이 함수를 호출 한 후 다른 포인터를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="459d615a7b443b2b18398d7b4e4094d21aa9904a" translate="yes" xml:space="preserve">
          <source>The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by &lt;code&gt;drop&lt;/code&gt; unless the data has been moved to be owned by another variable.</source>
          <target state="translated">변수의 소유권은 매번 같은 패턴을 따릅니다. 다른 변수에 값을 할당하면 변수가 이동합니다. 힙에 데이터를 포함하는 변수가 범위를 벗어나면 다른 변수가 소유하도록 데이터를 이동하지 않은 경우 값이 &lt;code&gt;drop&lt;/code&gt; 되어 정리됩니다 .</target>
        </trans-unit>
        <trans-unit id="8158170312c35ad0b4ff632e830474174c9789f6" translate="yes" xml:space="preserve">
          <source>The ownership rules play a vital role in message sending because they help you write safe, concurrent code. Preventing errors in concurrent programming is the advantage of thinking about ownership throughout your Rust programs. Let&amp;rsquo;s do an experiment to show how channels and ownership work together to prevent problems: we&amp;rsquo;ll try to use a &lt;code&gt;val&lt;/code&gt; value in the spawned thread &lt;em&gt;after&lt;/em&gt; we&amp;rsquo;ve sent it down the channel. Try compiling the code in Listing 16-9 to see why this code isn&amp;rsquo;t allowed:</source>
          <target state="translated">소유권 규칙은 안전한 동시 코드 작성을 도와주기 때문에 메시지 전송에 중요한 역할을합니다. 동시 프로그래밍에서 오류를 방지하는 것은 Rust 프로그램의 소유권에 대해 생각할 때 유리합니다. 문제를 방지하기 위해 채널과 소유권이 함께 작동하는 방법을 보여주는 실험을 해봅 &lt;code&gt;val&lt;/code&gt; . 채널 아래로 보낸 &lt;em&gt;후&lt;/em&gt; 생성 된 스레드에서 val 값 을 사용하려고합니다 . 이 코드가 허용되지 않는 이유를 보려면 Listing 16-9의 코드를 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="58f56a016b810f8287c744364955b1ffc32f9240" translate="yes" xml:space="preserve">
          <source>The panic hook is a global resource.</source>
          <target state="translated">패닉 훅은 글로벌 리소스입니다.</target>
        </trans-unit>
        <trans-unit id="684aef30b999855f4bf1399a43d22fd82b7e6c9d" translate="yes" xml:space="preserve">
          <source>The panic hook is invoked when a thread panics, but before the panic runtime is invoked. As such, the hook will run with both the aborting and unwinding runtimes. The default hook prints a message to standard error and generates a backtrace if requested, but this behavior can be customized with the &lt;code&gt;set_hook&lt;/code&gt; and &lt;a href=&quot;fn.take_hook&quot;&gt;&lt;code&gt;take_hook&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">패닉 후크는 스레드 패닉이 발생하지만 패닉 런타임이 호출되기 전에 호출됩니다. 따라서 후크는 중단 및 해제 런타임 모두에서 실행됩니다. 기본 후크는 메시지를 표준 오류로 인쇄하고 요청시 역 추적을 생성하지만이 동작은 &lt;code&gt;set_hook&lt;/code&gt; 및 &lt;a href=&quot;fn.take_hook&quot;&gt; &lt;code&gt;take_hook&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="563c97e45aeee516b45222324d4cc368e8c084ba" translate="yes" xml:space="preserve">
          <source>The parameters given to &lt;code&gt;Layout::from_size_align&lt;/code&gt; or some other &lt;code&gt;Layout&lt;/code&gt; constructor do not satisfy its documented constraints.</source>
          <target state="translated">&lt;code&gt;Layout::from_size_align&lt;/code&gt; 또는 다른 &lt;code&gt;Layout&lt;/code&gt; 생성자에 지정된 매개 변수 가 문서화 된 제약 조건을 충족하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3c2a54faaf19386dc2b06158bf3003e146fc0f45" translate="yes" xml:space="preserve">
          <source>The parameters of any trait method must match between a trait implementation and the trait definition.</source>
          <target state="translated">특성 메소드의 매개 변수는 특성 구현과 특성 정의간에 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="09a327800a21f08b5d4e1948e88aac172c2121be" translate="yes" xml:space="preserve">
          <source>The parent of the current &lt;a href=&quot;../reference/items/modules&quot;&gt;module&lt;/a&gt;.</source>
          <target state="translated">현재 &lt;a href=&quot;../reference/items/modules&quot;&gt;모듈&lt;/a&gt; 의 부모입니다 .</target>
        </trans-unit>
        <trans-unit id="f7896dc490ba78587890c7c602aaea52ff1e61a5" translate="yes" xml:space="preserve">
          <source>The parent thread can also wait on the completion of the child thread; a call to &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; produces a &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;, which provides a &lt;code&gt;join&lt;/code&gt; method for waiting:</source>
          <target state="translated">부모 스레드는 자식 스레드가 완료 될 때까지 기다릴 수도 있습니다. &lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt; 호출 하면 &lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; 이&lt;/a&gt; 생성 되어 대기 하는 &lt;code&gt;join&lt;/code&gt; 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="46e80e0e5a125dc6b093687f5b3dfa680a2d94d7" translate="yes" xml:space="preserve">
          <source>The parenthesized &lt;code&gt;inline&lt;/code&gt; attribute requires the parameter to be specified:</source>
          <target state="translated">괄호 안에있는 &lt;code&gt;inline&lt;/code&gt; 속성에는 매개 변수를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="d2172d9db47abf995cf78b6d1056e43a62f663b4" translate="yes" xml:space="preserve">
          <source>The parser used by the macro system is reasonably powerful, but it is limited in order to prevent ambiguity in current or future versions of the language. In particular, in addition to the rule about ambiguous expansions, a nonterminal matched by a metavariable must be followed by a token which has been decided can be safely used after that kind of match.</source>
          <target state="translated">매크로 시스템에서 사용하는 파서는 상당히 강력하지만 현재 또는 향후 버전의 언어에서 모호성을 방지하기 위해 제한됩니다. 특히, 모호한 확장에 대한 규칙 외에도 메타 변수와 일치하는 비 터미널 뒤에는 이러한 종류의 일치 후에 안전하게 사용할 수있는 결정된 토큰이 따라 와야합니다.</target>
        </trans-unit>
        <trans-unit id="72524139620fe5680057ec138f1bc4009c442555" translate="yes" xml:space="preserve">
          <source>The path prefix for modules is the canonical path to that module. For bare implementations, it is the canonical path of the item being implemented surrounded by angle (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) brackets. For &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;trait implementations&lt;/a&gt;, it is the canonical path of the item being implemented followed by &lt;code&gt;as&lt;/code&gt; followed by the canonical path to the trait all surrounded in angle (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) brackets.</source>
          <target state="translated">모듈의 경로 접두사는 해당 모듈의 정식 경로입니다. 베어 구현의 경우 앵글 ( &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ) 괄호로 둘러싸인 구현중인 항목의 정식 경로입니다 . 들면 &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;형질 구현&lt;/a&gt; , 그 항목의 표준 경로는 다음 시행되고 &lt;code&gt;as&lt;/code&gt; 모든 각도 (에 둘러싸인 형질 정규 경로 다음 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ) 브래킷.</target>
        </trans-unit>
        <trans-unit id="c6a4fb9e71adbfcd1bb4598c90adf218d993dcba" translate="yes" xml:space="preserve">
          <source>The path to the associated items is &lt;code&gt;&amp;lt;&lt;/code&gt; followed by a path to the implementing type followed by &lt;code&gt;as&lt;/code&gt; followed by a path to the trait followed by &lt;code&gt;&amp;gt;&lt;/code&gt; as a path component followed by the associated item's path component.</source>
          <target state="translated">관련 항목 경로는 &lt;code&gt;&amp;lt;&lt;/code&gt; 뒤에 구현 형 경로 다음 &lt;code&gt;as&lt;/code&gt; 다음 형질 경로이어서 &lt;code&gt;&amp;gt;&lt;/code&gt; 경로 성분이 연관된 항목의 경로로 구성 하였다.</target>
        </trans-unit>
        <trans-unit id="e791bfe4c14128fe94a9448b536323c040235679" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; or a closure that determines if a character matches.</source>
          <target state="translated">패턴은 &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 문자가 일치하는지 판별하는 클로저 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9b997b2f72267455f266b90593be72c411299620" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; or a closure that determines if a character matches.</source>
          <target state="translated">패턴은 &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 문자가 일치하는지 판별하는 클로저 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7a545179141a5b3642800fa8e44597af1f79a17" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, or a closure that determines if a character matches.</source>
          <target state="translated">패턴은 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 문자가 일치하는지 판별하는 클로저 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eab1bd44108e3c6ec8d1d8c6acc9fac3b5f45a9e" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, or a closure that determines if a character matches.</source>
          <target state="translated">패턴은 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 문자가 일치하는지 판별하는 클로저 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3313c804137756973c3dae6df1f5d957a288624" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, or a closure that determines if a character matches.</source>
          <target state="translated">패턴은 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 문자가 일치하는지 판별하는 클로저 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bfcc6e07c89f929bc9a9b9157ac58712686768e0" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split.</source>
          <target state="translated">패턴은 패턴 특성을 구현하는 모든 유형이 될 수 있습니다. 주목할만한 예로는 분할을 결정하는 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 및 클로저가 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb766e07c7ab39fe3b62bc217205480afe2f8cd2" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split. Additional libraries might provide more complex patterns like regular expressions.</source>
          <target state="translated">패턴은 패턴 특성을 구현하는 모든 유형이 될 수 있습니다. 주목할만한 예로는 분할을 결정하는 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 및 클로저가 있습니다. 추가 라이브러리는 정규식과 같은보다 복잡한 패턴을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53665fb10463c2a5a8c8a6c23b4c3d2013b572a7" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split.</source>
          <target state="translated">패턴은 패턴 특성을 구현하는 모든 유형이 될 수 있습니다. 주목할만한 예로는 분할을 결정하는 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 및 클로저가 있습니다.</target>
        </trans-unit>
        <trans-unit id="8059c918e0a15a39f2f09be5faf1d4cb011e74e6" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split. Additional libraries might provide more complex patterns like regular expressions.</source>
          <target state="translated">패턴은 패턴 특성을 구현하는 모든 유형이 될 수 있습니다. 주목할만한 예로는 분할을 결정하는 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 및 클로저가 있습니다. 추가 라이브러리는 정규식과 같은보다 복잡한 패턴을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70fe7a4be65487325b69a6e9166bdb513323e0b5" translate="yes" xml:space="preserve">
          <source>The pattern in the following example does four things:</source>
          <target state="translated">다음 예제의 패턴은 네 가지 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="5a181811e45dbf2fc9dddcbe8e2017ec7127d78e" translate="yes" xml:space="preserve">
          <source>The pattern in the second match arm introduces a new variable named &lt;code&gt;y&lt;/code&gt; that will match any value inside a &lt;code&gt;Some&lt;/code&gt; value. Because we&amp;rsquo;re in a new scope inside the &lt;code&gt;match&lt;/code&gt; expression, this is a new &lt;code&gt;y&lt;/code&gt; variable, not the &lt;code&gt;y&lt;/code&gt; we declared at the beginning with the value 10. This new &lt;code&gt;y&lt;/code&gt; binding will match any value inside a &lt;code&gt;Some&lt;/code&gt;, which is what we have in &lt;code&gt;x&lt;/code&gt;. Therefore, this new &lt;code&gt;y&lt;/code&gt; binds to the inner value of the &lt;code&gt;Some&lt;/code&gt; in &lt;code&gt;x&lt;/code&gt;. That value is &lt;code&gt;5&lt;/code&gt;, so the expression for that arm executes and prints &lt;code&gt;Matched, y = 5&lt;/code&gt;.</source>
          <target state="translated">두 번째 일치 암의 패턴은 &lt;code&gt;Some&lt;/code&gt; 값 내부의 모든 값과 일치하는 &lt;code&gt;y&lt;/code&gt; 라는 새 변수를 도입 합니다. 우리는 내부의 새로운 범위에있어 때문에 &lt;code&gt;match&lt;/code&gt; 표현, 이것은 새로운 &lt;code&gt;y&lt;/code&gt; 를 변수가 아닌 &lt;code&gt;y&lt;/code&gt; 를 우리가 값 10과 함께 시작 부분에 선언이 새로운 &lt;code&gt;y&lt;/code&gt; , 안쪽의 값과 일치합니다 바인딩 &lt;code&gt;Some&lt;/code&gt; 우리가 무엇 인 에 &lt;code&gt;x&lt;/code&gt; . 따라서이 새로운 &lt;code&gt;y&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 에서 &lt;code&gt;Some&lt;/code&gt; 의 내부 값에 바인딩됩니다 . 이 값은 &lt;code&gt;5&lt;/code&gt; 이므로 해당 팔에 대한 표현식이 실행되고 &lt;code&gt;Matched, y = 5&lt;/code&gt; 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="fd1b310fb5c60706a33dc63407dcff2f0de81ecd" translate="yes" xml:space="preserve">
          <source>The pattern is most commonly a single variable, which means no pattern matching is done and the expression given is bound to the variable. Apart from that, patterns used in &lt;code&gt;let&lt;/code&gt; bindings can be as complicated as needed, given that the pattern is exhaustive. See the &lt;a href=&quot;../book/ch06-02-match&quot;&gt;Rust book&lt;/a&gt; for more information on pattern matching. The type of the pattern is optionally given afterwards, but if left blank is automatically inferred by the compiler if possible.</source>
          <target state="translated">패턴은 가장 일반적으로 단일 변수이므로 패턴 일치가 수행되지 않고 주어진 표현식이 변수에 바인딩됩니다. 그 외에도에서 사용 패턴 &lt;code&gt;let&lt;/code&gt; 바인딩은 같은 패턴이 완전한 것을 주어, 필요에 따라 복잡 할 수 있습니다. 패턴 일치에 대한 자세한 정보 는 &lt;a href=&quot;../book/ch06-02-match&quot;&gt;Rust 책&lt;/a&gt; 을 참조하십시오. 패턴의 유형은 나중에 선택적으로 제공되지만, 비워두면 가능하면 컴파일러가 자동으로 유추합니다.</target>
        </trans-unit>
        <trans-unit id="c2459ac3b35f7ffa8e048896d3c16ca10cfe1608" translate="yes" xml:space="preserve">
          <source>The pattern of the first arm in the &lt;code&gt;match&lt;/code&gt; expression matches a &lt;code&gt;Message::ChangeColor&lt;/code&gt; enum variant that contains a &lt;code&gt;Color::Rgb&lt;/code&gt; variant; then the pattern binds to the three inner &lt;code&gt;i32&lt;/code&gt; values. The pattern of the second arm also matches a &lt;code&gt;Message::ChangeColor&lt;/code&gt; enum variant, but the inner enum matches the &lt;code&gt;Color::Hsv&lt;/code&gt; variant instead. We can specify these complex conditions in one &lt;code&gt;match&lt;/code&gt; expression, even though two enums are involved.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 표현식 의 첫 번째 팔 패턴은 &lt;code&gt;Color::Rgb&lt;/code&gt; 변형 을 포함하는 &lt;code&gt;Message::ChangeColor&lt;/code&gt; 열거 형 변형 과 일치합니다 . 패턴은 세 개의 내부 &lt;code&gt;i32&lt;/code&gt; 값에 바인딩 됩니다. 두 번째 암의 패턴도 &lt;code&gt;Message::ChangeColor&lt;/code&gt; 열거 형 변형과 일치하지만 내부 열거 형은 대신 &lt;code&gt;Color::Hsv&lt;/code&gt; 변형 과 일치합니다 . 두 개의 열거 형이 포함되어 있어도 이러한 복잡한 조건을 하나의 &lt;code&gt;match&lt;/code&gt; 식으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a42d62f0f2bbc370e10f35406b8b10d13fb51143" translate="yes" xml:space="preserve">
          <source>The patterns programmed into Rust&amp;rsquo;s analysis of references are called the &lt;em&gt;lifetime elision rules&lt;/em&gt;. These aren&amp;rsquo;t rules for programmers to follow; they&amp;rsquo;re a set of particular cases that the compiler will consider, and if your code fits these cases, you don&amp;rsquo;t need to write the lifetimes explicitly.</source>
          <target state="translated">Rust의 기준 분석에 프로그래밍 된 패턴을 &lt;em&gt;수명 제거 규칙&lt;/em&gt; 이라고합니다 . 프로그래머가 따라야 할 규칙은 아닙니다. 그것들은 컴파일러가 고려할 특정 사례 세트이며, 코드가 이러한 경우에 적합하면 수명을 명시 적으로 작성할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="012a0566d4550e7174697625c83965140d98cc31" translate="yes" xml:space="preserve">
          <source>The peer address may be set by the &lt;code&gt;connect&lt;/code&gt; method, and this method will return an error if the socket has not already been connected.</source>
          <target state="translated">피어 주소는 &lt;code&gt;connect&lt;/code&gt; 메소드에 있으며이 메소드는 소켓이 아직 연결되지 않은 경우 오류를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c7338ebe0eb2e257ec72f81d23df2b1d8ecc7ce7" translate="yes" xml:space="preserve">
          <source>The performance of these two features (Spoiler alert: they&amp;rsquo;re faster than you might think!)</source>
          <target state="translated">이 두 기능의 성능 (스포일러 경고 : 생각보다 빠릅니다!)</target>
        </trans-unit>
        <trans-unit id="3c13daf063b9e605b83028dc0feae2167ff80511" translate="yes" xml:space="preserve">
          <source>The pointer may be &lt;a href=&quot;../ptr/fn.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or be dangling in case the object has already been destroyed.</source>
          <target state="translated">포인터가 &lt;a href=&quot;../ptr/fn.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 인 경우&lt;/a&gt;객체가 이미 파괴 된 경우 이거나 매달려 .</target>
        </trans-unit>
        <trans-unit id="d562cc44e11330190c6c67edae5c28019986b445" translate="yes" xml:space="preserve">
          <source>The pointer must represent one valid weak count. In other words, it must point to &lt;code&gt;T&lt;/code&gt; which is or &lt;em&gt;was&lt;/em&gt; managed by an &lt;a href=&quot;struct.arc&quot;&gt;&lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt; and the weak count of that &lt;a href=&quot;struct.arc&quot;&gt;&lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt; must not have reached 0. It is allowed for the strong count to be 0.</source>
          <target state="translated">포인터는 하나의 유효한 약한 카운트를 나타내야합니다. 즉, 가리켜 야 &lt;code&gt;T&lt;/code&gt; 또는 어느 &lt;em&gt;한&lt;/em&gt; 의해 관리 &lt;a href=&quot;struct.arc&quot;&gt; &lt;code&gt;Arc&lt;/code&gt; &lt;/a&gt; 그 약한 카운트 &lt;a href=&quot;struct.arc&quot;&gt; &lt;code&gt;Arc&lt;/code&gt; &lt;/a&gt; 0으로 강한 카운트 허용 0에 도달 안된다.</target>
        </trans-unit>
        <trans-unit id="20794b93602408cab637197663bf6c675231f221" translate="yes" xml:space="preserve">
          <source>The pointer must represent one valid weak count. In other words, it must point to &lt;code&gt;T&lt;/code&gt; which is or &lt;em&gt;was&lt;/em&gt; managed by an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; and the weak count of that &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; must not have reached 0. It is allowed for the strong count to be 0.</source>
          <target state="translated">포인터는 하나의 유효한 약한 카운트를 나타내야합니다. 즉, 가리켜 야 &lt;code&gt;T&lt;/code&gt; 또는 어느 &lt;em&gt;한&lt;/em&gt; 의해 관리 &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; 를&lt;/a&gt; 그 약한 카운트 &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; 를&lt;/a&gt; 만약 0으로 강한 카운트 허용 0에 도달 안된다.</target>
        </trans-unit>
        <trans-unit id="d6200eb92cc97fc1d9fec6dde1612acc6fca320f" translate="yes" xml:space="preserve">
          <source>The pointer passed to all functions inside the vtable is the &lt;code&gt;data&lt;/code&gt; pointer from the enclosing &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">vtable 내부의 모든 함수에 전달되는 포인터는 둘러싸는 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;data&lt;/code&gt; 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="1edb65c05d4061d65ef7c599b48750ef7ff50704" translate="yes" xml:space="preserve">
          <source>The pointer which this function returns must be returned to Rust and reconstituted using &lt;a href=&quot;#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt; to be properly deallocated. Specifically, one should &lt;em&gt;not&lt;/em&gt; use the standard C &lt;code&gt;free()&lt;/code&gt; function to deallocate this string.</source>
          <target state="translated">이 함수가 리턴하는 포인터는 Rust로 리턴되고 &lt;a href=&quot;#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt; 를 사용하여 올바르게 할당 해제되어야합니다. 특히, 이 문자열을 할당 해제 하기 위해 표준 C &lt;code&gt;free()&lt;/code&gt; 함수를 사용 해서는 &lt;em&gt;안됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="33be8edf304b61e5005625c2c6aab855fc0ce0b3" translate="yes" xml:space="preserve">
          <source>The pointer will be properly aligned and non-null.</source>
          <target state="translated">포인터가 올바르게 정렬되고 널이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0c49a977fe21d66debc9a4c8b7d4cbbf312c9ff9" translate="yes" xml:space="preserve">
          <source>The pointer-sized signed integer type.</source>
          <target state="translated">포인터 크기의 부호있는 정수 유형.</target>
        </trans-unit>
        <trans-unit id="aebc6996cd3e6c3ef507e0e5f263e13ad4dcb04b" translate="yes" xml:space="preserve">
          <source>The pointer-sized unsigned integer type.</source>
          <target state="translated">포인터 크기의 부호없는 정수 유형.</target>
        </trans-unit>
        <trans-unit id="4aef48aecfebe1bd9e6f96a0939bb1d8fec84054" translate="yes" xml:space="preserve">
          <source>The position used for seeking with &lt;code&gt;SeekFrom::Current(_)&lt;/code&gt; is the position the underlying reader would be at if the &lt;code&gt;BufReader&lt;/code&gt; had no internal buffer.</source>
          <target state="translated">&lt;code&gt;SeekFrom::Current(_)&lt;/code&gt; 로 탐색하는 데 사용되는 위치는 &lt;code&gt;BufReader&lt;/code&gt; 에 내부 버퍼가없는 경우 기본 판독기가있는 위치 입니다.</target>
        </trans-unit>
        <trans-unit id="6f1678b0e093177e7620807a9112f4ef7365e563" translate="yes" xml:space="preserve">
          <source>The positive difference of two numbers.</source>
          <target state="translated">두 숫자의 양의 차이.</target>
        </trans-unit>
        <trans-unit id="e0a83025808dfefbef9f39106ce5fafd89bb2f1c" translate="yes" xml:space="preserve">
          <source>The practical use cases for &lt;code&gt;forget&lt;/code&gt; are rather specialized and mainly come up in unsafe or FFI code.</source>
          <target state="translated">&lt;code&gt;forget&lt;/code&gt; 위한 실제 사용 사례 는 다소 전문적이고 주로 안전하지 않은 코드 나 FFI 코드로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="fb2efbc552f75b7ae8fe422ecdae2c87a030f044" translate="yes" xml:space="preserve">
          <source>The precedence of Rust operators and expressions is ordered as follows, going from strong to weak. Binary Operators at the same precedence level are grouped in the order given by their associativity.</source>
          <target state="translated">Rust 연산자와 표현식의 우선 순위는 다음과 같이 순서가 매겨집니다. 우선 순위가 같은 이진 연산자는 연관성에 따라 순서대로 그룹화됩니다.</target>
        </trans-unit>
        <trans-unit id="5ed57a298428ca0f7395d0616c5eb17f0804c549" translate="yes" xml:space="preserve">
          <source>The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:</source>
          <target state="translated">정확한 녹 앨리어싱 규칙은 다소 유동적이지만 요점은 논쟁의 여지가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d40bd8a03d88e20d491263cadc1752cd72c99258" translate="yes" xml:space="preserve">
          <source>The precise definition is: a type &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt; if and only if &lt;code&gt;&amp;amp;T&lt;/code&gt; is &lt;a href=&quot;trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;. In other words, if there is no possibility of &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; (including data races) when passing &lt;code&gt;&amp;amp;T&lt;/code&gt; references between threads.</source>
          <target state="translated">정확한 정의는 다음과 같습니다 . &lt;code&gt;&amp;amp;T&lt;/code&gt; 가 &lt;a href=&quot;trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; 인&lt;/a&gt; 경우에만 유형 &lt;code&gt;T&lt;/code&gt; 는 &lt;code&gt;Sync&lt;/code&gt; 입니다. 즉, 스레드간에 &lt;code&gt;&amp;amp;T&lt;/code&gt; 참조를 전달할 때 &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;정의되지 않은 동작&lt;/a&gt; (데이터 레이스 포함)이 없을 경우 .</target>
        </trans-unit>
        <trans-unit id="f47fdb8c6eff67732e48f22a8373d2422de700a9" translate="yes" xml:space="preserve">
          <source>The precise memory layout of a struct is not specified. One can specify a particular layout using the &lt;a href=&quot;../type-layout#representations&quot;&gt;&lt;code&gt;repr&lt;/code&gt; attribute&lt;/a&gt;.</source>
          <target state="translated">구조체의 정확한 메모리 레이아웃이 지정되지 않았습니다. &lt;a href=&quot;../type-layout#representations&quot;&gt; &lt;code&gt;repr&lt;/code&gt; 속성을&lt;/a&gt; 사용하여 특정 레이아웃을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="18073d476ac74d19109a41401163857e8cd5056d" translate="yes" xml:space="preserve">
          <source>The precise rules for validity are not determined yet. The guarantees that are provided at this point are very minimal:</source>
          <target state="translated">유효성에 대한 정확한 규칙은 아직 결정되지 않았습니다. 이 시점에서 제공되는 보증은 매우 작습니다.</target>
        </trans-unit>
        <trans-unit id="4933f50236b0c7e48edc0beedb70199f13c5e285" translate="yes" xml:space="preserve">
          <source>The predicate passed to &lt;code&gt;partition()&lt;/code&gt; can return &lt;code&gt;true&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;partition()&lt;/code&gt; returns a pair, all of the elements for which it returned &lt;code&gt;true&lt;/code&gt;, and all of the elements for which it returned &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;partition()&lt;/code&gt; 전달 된 술어는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 리턴 할 수 있습니다 . &lt;code&gt;partition()&lt;/code&gt; 은 쌍, &lt;code&gt;true&lt;/code&gt; 를 반환 한 모든 요소 및 &lt;code&gt;false&lt;/code&gt; 를 반환 한 모든 요소를 ​​반환합니다. 합니다.</target>
        </trans-unit>
        <trans-unit id="dbc19e95dcebc744b29e267ad8d2ebfde2e212c0" translate="yes" xml:space="preserve">
          <source>The prelude can be changed to the &lt;em&gt;core prelude&lt;/em&gt; by using the &lt;code&gt;no_std&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; on the root crate module. The linked crate is &lt;a href=&quot;https://doc.rust-lang.org/core/index.html&quot;&gt;&lt;code&gt;core&lt;/code&gt;&lt;/a&gt; and the prelude module is &lt;a href=&quot;https://doc.rust-lang.org/core/prelude/index.html&quot;&gt;&lt;code&gt;core::prelude::v1&lt;/code&gt;&lt;/a&gt;. Using the core prelude over the standard prelude is useful when either the crate is targeting a platform that does not support the standard library or is purposefully not using the capabilities of the standard library. Those capabilities are mainly dynamic memory allocation (e.g. &lt;code&gt;Box&lt;/code&gt; and &lt;code&gt;Vec&lt;/code&gt;) and file and network capabilities (e.g. &lt;code&gt;std::fs&lt;/code&gt; and &lt;code&gt;std::io&lt;/code&gt;).</source>
          <target state="translated">루트 크레이트 모듈 에서 &lt;code&gt;no_std&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 을 사용하여 &lt;em&gt;prelude&lt;/em&gt; 를 &lt;em&gt;코어 prelude&lt;/em&gt; 로 변경할 수 있습니다 . 연결된 크레이트는 &lt;a href=&quot;https://doc.rust-lang.org/core/index.html&quot;&gt; &lt;code&gt;core&lt;/code&gt; &lt;/a&gt; 이고 prelude 모듈은 &lt;a href=&quot;https://doc.rust-lang.org/core/prelude/index.html&quot;&gt; &lt;code&gt;core::prelude::v1&lt;/code&gt; &lt;/a&gt; 입니다. 크레이트가 표준 라이브러리를 지원하지 않는 플랫폼을 목표로하거나 의도적으로 표준 라이브러리의 기능을 사용하지 않는 경우 표준 전주보다 핵심 전주를 사용하는 것이 유용합니다. 이러한 기능은 주로 동적 메모리 할당 (예 : &lt;code&gt;Box&lt;/code&gt; 및 &lt;code&gt;Vec&lt;/code&gt; ) 및 파일 및 네트워크 기능 (예 : &lt;code&gt;std::fs&lt;/code&gt; 및 &lt;code&gt;std::io&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="97af9d37776d235cea4e5a19d84cc2b3492bd088" translate="yes" xml:space="preserve">
          <source>The previous Appendix D, &amp;ldquo;Macros,&amp;rdquo; has been expanded to include procedural macros and was moved to the &amp;ldquo;Macros&amp;rdquo; section in Chapter 19.</source>
          <target state="translated">이전 부록 D, &quot;매크로&quot;는 절차 적 매크로를 포함하도록 확장되었으며 19 장의 &quot;매크로&quot;섹션으로 이동되었습니다.</target>
        </trans-unit>
        <trans-unit id="74a02be48083e6dc1dccc9a7d07cadacc4a53e7c" translate="yes" xml:space="preserve">
          <source>The previously duplicated code is now outside the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks and uses the &lt;code&gt;status_line&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; variables. This makes it easier to see the difference between the two cases, and it means we have only one place to update the code if we want to change how the file reading and response writing work. The behavior of the code in Listing 20-9 will be the same as that in Listing 20-8.</source>
          <target state="translated">이전에 복제 된 코드는 이제 &lt;code&gt;if&lt;/code&gt; 및 &lt;code&gt;else&lt;/code&gt; 외부에 있으며 &lt;code&gt;status_line&lt;/code&gt; 및 &lt;code&gt;filename&lt;/code&gt; 변수를 차단하고 사용합니다 . 이를 통해 두 경우의 차이점을보다 쉽게 ​​확인할 수 있으며 파일 읽기 및 응답 쓰기 작동 방식을 변경하려는 경우 코드를 업데이트 할 곳이 한 곳뿐입니다. Listing 20-9의 코드 동작은 Listing 20-8의 코드 동작과 동일하다.</target>
        </trans-unit>
        <trans-unit id="3c5b34498a69e2cebc3edcacf3022a159fa0d3cf" translate="yes" xml:space="preserve">
          <source>The primary separator of path components for the current platform.</source>
          <target state="translated">현재 플랫폼에 대한 경로 구성 요소의 기본 구분자입니다.</target>
        </trans-unit>
        <trans-unit id="d6d94c1dd4c2a4fb7b30d949d7313e70926e43b0" translate="yes" xml:space="preserve">
          <source>The primary use for the &lt;code&gt;let&lt;/code&gt; keyword is in &lt;code&gt;let&lt;/code&gt; statements, which are used to introduce a new set of variables into the current scope, as given by a pattern.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 키워드 의 기본 용도 는 &lt;code&gt;let&lt;/code&gt; 문에서 사용됩니다. let 문은 패턴으로 지정된대로 현재 범위에 새로운 변수 세트를 도입하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="14d97c2e9b793134fb211ba0f8484d81636a707d" translate="yes" xml:space="preserve">
          <source>The primary use of the &lt;code&gt;crate&lt;/code&gt; keyword is as a part of &lt;code&gt;extern crate&lt;/code&gt; declarations, which are used to specify a dependency on a crate external to the one it's declared in. Crates are the fundamental compilation unit of Rust code, and can be seen as libraries or projects. More can be read about crates in the &lt;a href=&quot;../reference/items/extern-crates&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;crate&lt;/code&gt; 키워드 의 주요 용도는 &lt;code&gt;extern crate&lt;/code&gt; 선언 의 일부로 사용되며, 외부에서 크레이트에 선언 된 외부 크레이트에 대한 종속성을 지정하는 데 사용됩니다. 크레이트는 Rust 코드의 기본 컴파일 단위이며 라이브러리로 볼 수 있습니다 또는 프로젝트. 더의 상자에 대해 읽을 수 있습니다 &lt;a href=&quot;../reference/items/extern-crates&quot;&gt;참조&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="229057a153cb547539a5140063be86de4fd5f109" translate="yes" xml:space="preserve">
          <source>The priority policy of the lock is dependent on the underlying operating system's implementation, and this type does not guarantee that any particular policy will be used.</source>
          <target state="translated">잠금의 우선 순위 정책은 기본 운영 체제의 구현에 따라 다르며이 유형은 특정 정책의 사용을 보증하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aa4bf60f4fab6128150a2cced20eb507a73f2223" translate="yes" xml:space="preserve">
          <source>The private address ranges are defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc1918&quot;&gt;IETF RFC 1918&lt;/a&gt; and include:</source>
          <target state="translated">개인 주소 범위는 &lt;a href=&quot;https://tools.ietf.org/html/rfc1918&quot;&gt;IETF RFC 1918에&lt;/a&gt; 정의되어 있으며 다음을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="66e536d148965eb5f5f66293b59e6e08d6c64117" translate="yes" xml:space="preserve">
          <source>The problem above can be solved by using the &lt;code&gt;ref&lt;/code&gt; keyword.</source>
          <target state="translated">위의 문제는 &lt;code&gt;ref&lt;/code&gt; 키워드 를 사용하여 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a6b09f11dabd510af2bfd7f547ade1211b4999bd" translate="yes" xml:space="preserve">
          <source>The problem here is that foo is defined as accepting a parameter of type &lt;code&gt;Fn&lt;/code&gt;. Closures passed into foo will thus be inferred to be of type &lt;code&gt;Fn&lt;/code&gt;, meaning that they capture their context immutably.</source>
          <target state="translated">여기서 문제는 foo가 &lt;code&gt;Fn&lt;/code&gt; 유형의 매개 변수를 허용하는 것으로 정의된다는 것 입니다. 따라서 foo에 전달 된 클로저는 &lt;code&gt;Fn&lt;/code&gt; 유형 인 것으로 추론됩니다 . 즉, 컨텍스트를 불변으로 캡처합니다.</target>
        </trans-unit>
        <trans-unit id="fe892e0206a6e32b9668f223826cd09ae2236ca9" translate="yes" xml:space="preserve">
          <source>The problem here is that we're attempting to take the type of X from MyTrait. Unfortunately, the type of X is not defined, because it's only made concrete in implementations of the trait. A working version of this code might look like:</source>
          <target state="translated">여기서 문제는 MyTrait에서 X 유형을 가져 오려고한다는 것입니다. 불행히도, X의 유형은 특성의 구현에서 구체적으로 만들어지기 때문에 정의되지 않습니다. 이 코드의 작동 버전은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e5cbbff1b6bec23be456b36b8e81795c5a5d74a0" translate="yes" xml:space="preserve">
          <source>The problem is that &lt;code&gt;result&lt;/code&gt; goes out of scope and gets cleaned up at the end of the &lt;code&gt;longest&lt;/code&gt; function. We&amp;rsquo;re also trying to return a reference to &lt;code&gt;result&lt;/code&gt; from the function. There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won&amp;rsquo;t let us create a dangling reference. In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.</source>
          <target state="translated">문제는 &lt;code&gt;result&lt;/code&gt; 가 범위를 벗어나서 &lt;code&gt;longest&lt;/code&gt; 기능 의 끝에서 정리 된다는 것입니다 . 또한 함수의 &lt;code&gt;result&lt;/code&gt; 대한 참조를 반환하려고 합니다. 매달려있는 참조를 변경하는 수명 매개 변수를 지정할 수있는 방법이 없으며 Rust는 매달려있는 참조를 만들 수 없습니다. 이 경우 가장 좋은 수정 방법은 참조가 아닌 소유 한 데이터 형식을 반환하여 호출 함수가 값을 정리하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="967a587dbf080c4427ca5b25acc74fdfbb85e443" translate="yes" xml:space="preserve">
          <source>The problem is that the first time we called &lt;code&gt;c.value&lt;/code&gt; with 1, the &lt;code&gt;Cacher&lt;/code&gt; instance saved &lt;code&gt;Some(1)&lt;/code&gt; in &lt;code&gt;self.value&lt;/code&gt;. Thereafter, no matter what we pass in to the &lt;code&gt;value&lt;/code&gt; method, it will always return 1.</source>
          <target state="translated">문제는 &lt;code&gt;c.value&lt;/code&gt; 를 1로 처음 호출 했을 때 &lt;code&gt;Cacher&lt;/code&gt; 인스턴스 가 &lt;code&gt;self.value&lt;/code&gt; 에 &lt;code&gt;Some(1)&lt;/code&gt; 을 저장 했다는 것 입니다. 그 후, &lt;code&gt;value&lt;/code&gt; 메소드 에 무엇을 전달하든 항상 1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="833738d2692abe453105a9ed609d8a8bc820fa2a" translate="yes" xml:space="preserve">
          <source>The problem is that the parameter &lt;code&gt;T&lt;/code&gt; does not appear in the implementing type (&lt;code&gt;Foo&lt;/code&gt;) of the impl. In this case, we can fix the error by moving the type parameter from the &lt;code&gt;impl&lt;/code&gt; to the method &lt;code&gt;get&lt;/code&gt;:</source>
          <target state="translated">문제는 매개 변수 &lt;code&gt;T&lt;/code&gt; 가 impl 의 구현 유형 ( &lt;code&gt;Foo&lt;/code&gt; )에 나타나지 않는다는 것입니다 . 이 경우 type 매개 변수를 &lt;code&gt;impl&lt;/code&gt; 에서 &lt;code&gt;get&lt;/code&gt; 메소드 로 이동하여 오류를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="457d0fe3119f86c660d95b413dfdd79fba1ea792" translate="yes" xml:space="preserve">
          <source>The problem isn&amp;rsquo;t really with the concept but with the particular implementation. As such, Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent. This enum is &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, and it is &lt;a href=&quot;../std/option/enum.option&quot;&gt;defined by the standard library&lt;/a&gt; as follows:</source>
          <target state="translated">문제는 실제로 개념이 아니라 특정 구현에 있습니다. 따라서 Rust에는 null이 없지만 존재하거나 존재하지 않는 값의 개념을 인코딩 할 수있는 열거 형이 있습니다. 이 열거 형은 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 이며 &lt;a href=&quot;../std/option/enum.option&quot;&gt;표준 라이브러리에&lt;/a&gt; 의해 다음과 같이 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="11afe9c5b7d3b341c43395982cbb657bcfedf0f3" translate="yes" xml:space="preserve">
          <source>The problem with null values is that if you try to use a null value as a not-null value, you&amp;rsquo;ll get an error of some kind. Because this null or not-null property is pervasive, it&amp;rsquo;s extremely easy to make this kind of error.</source>
          <target state="translated">널값의 문제점은 널값을 널이 아닌 값으로 사용하려고하면 어떤 종류의 오류가 발생한다는 것입니다. 이 null 속성 또는 null이 아닌 속성은 광범위하기 때문에 이런 종류의 오류를 만드는 것은 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="c7ffb82b1f0d51caf9c86374d324e2fb9ccac1dd" translate="yes" xml:space="preserve">
          <source>The process lacks permissions to view the contents.</source>
          <target state="translated">프로세스에 내용을 볼 수있는 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d5a1f341aa82ec15ad62b2ae6744edcef123d4a7" translate="yes" xml:space="preserve">
          <source>The process may be in a &quot;broken state&quot; if this function returns in error. For example the working directory, environment variables, signal handling settings, various user/group information, or aspects of stdio file descriptors may have changed. If a &quot;transactional spawn&quot; is required to gracefully handle errors it is recommended to use the cross-platform &lt;code&gt;spawn&lt;/code&gt; instead.</source>
          <target state="translated">이 함수가 오류를 반환하면 프로세스가 &quot;깨진 상태&quot;일 수 있습니다. 예를 들어 작업 디렉토리, 환경 변수, 신호 처리 설정, 다양한 사용자 / 그룹 정보 또는 stdio 파일 디스크립터의 측면이 변경되었을 수 있습니다. 오류를 정상적으로 처리하기 위해 &quot;트랜잭션 스폰&quot;이 필요한 경우 크로스 플랫폼 &lt;code&gt;spawn&lt;/code&gt; 대신 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="68c2b04d8256c338d13f147c4eb19b87b45d4040" translate="yes" xml:space="preserve">
          <source>The programs we&amp;rsquo;ve written so far have been in one module in one file. As a project grows, you can organize code by splitting it into multiple modules and then multiple files. A package can contain multiple binary crates and optionally one library crate. As a package grows, you can extract parts into separate crates that become external dependencies. This chapter covers all these techniques. For very large projects of a set of interrelated packages that evolve together, Cargo provides workspaces, which we&amp;rsquo;ll cover in the &lt;a href=&quot;ch14-03-cargo-workspaces&quot;&gt;&amp;ldquo;Cargo Workspaces&amp;rdquo;&lt;/a&gt; section in Chapter 14.</source>
          <target state="translated">지금까지 작성한 프로그램은 하나의 파일에 하나의 모듈에 있습니다. 프로젝트가 성장함에 따라 코드를 여러 모듈로 분할 한 다음 여러 파일로 나누어 코드를 구성 할 수 있습니다. 패키지는 여러 바이너리 상자와 선택적으로 하나의 라이브러리 상자를 포함 할 수 있습니다. 패키지가 커짐에 따라 외부 의존성이되는 별도의 상자로 부품을 추출 할 수 있습니다. 이 장에서는 이러한 모든 기술을 다룹니다. 함께 진화하는 상호 관련 패키지 세트의 대규모 프로젝트를 위해 Cargo는 작업 공간을 제공합니다. 작업 공간은 14 장의 &lt;a href=&quot;ch14-03-cargo-workspaces&quot;&gt;&quot;화물 작업 공간&quot;&lt;/a&gt; 섹션에서 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="be1cd28ce339784f890d38adb07a623811959d09" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;path&lt;/code&gt; doesn't exist.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 가 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a99e10f876c8ad74bd47e22ac1f9e01fe1760d28" translate="yes" xml:space="preserve">
          <source>The public methods &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;average&lt;/code&gt; are the only ways to access or modify data in an instance of &lt;code&gt;AveragedCollection&lt;/code&gt;. When an item is added to &lt;code&gt;list&lt;/code&gt; using the &lt;code&gt;add&lt;/code&gt; method or removed using the &lt;code&gt;remove&lt;/code&gt; method, the implementations of each call the private &lt;code&gt;update_average&lt;/code&gt; method that handles updating the &lt;code&gt;average&lt;/code&gt; field as well.</source>
          <target state="translated">공용 메소드 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;average&lt;/code&gt; 는 &lt;code&gt;AveragedCollection&lt;/code&gt; 인스턴스에서 데이터에 액세스하거나 수정하는 유일한 방법 입니다. &lt;code&gt;add&lt;/code&gt; 메소드를 사용하여 항목을 &lt;code&gt;list&lt;/code&gt; 에 추가 하거나 &lt;code&gt;remove&lt;/code&gt; 메소드를 사용하여 제거 할 때 각 구현은 &lt;code&gt;average&lt;/code&gt; 필드 업데이트를 처리하는 private &lt;code&gt;update_average&lt;/code&gt; 메소드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="4a93f31254516d6844f82cc6e94b5893fc7d6231" translate="yes" xml:space="preserve">
          <source>The purpose of pinning is to be able to rely on the placement of some data in memory. To make this work, not just moving the data is restricted; deallocating, repurposing, or otherwise invalidating the memory used to store the data is restricted, too. Concretely, for pinned data you have to maintain the invariant that &lt;em&gt;its memory will not get invalidated or repurposed from the moment it gets pinned until when &lt;code&gt;drop&lt;/code&gt; is called&lt;/em&gt;. Memory can be invalidated by deallocation, but also by replacing a &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; by &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, or calling &lt;a href=&quot;../vec/struct.vec#method.set_len&quot;&gt;&lt;code&gt;Vec::set_len&lt;/code&gt;&lt;/a&gt; to &quot;kill&quot; some elements off of a vector. It can be repurposed by using &lt;a href=&quot;../ptr/fn.write&quot;&gt;&lt;code&gt;ptr::write&lt;/code&gt;&lt;/a&gt; to overwrite it without calling the destructor first.</source>
          <target state="translated">고정의 목적은 일부 데이터를 메모리에 배치하는 데 의존 할 수 있도록하는 것입니다. 이 작업을 수행하려면 데이터 이동 만이 제한됩니다. 데이터 저장에 사용 된 메모리의 할당 해제, 용도 변경 또는 무효화도 제한됩니다. 구체적으로 고정 된 데이터의 &lt;em&gt;경우 고정이 시작된 시점부터 &lt;code&gt;drop&lt;/code&gt; 이 호출 될 때까지 메모리가 무효화되거나 용도가 변경되지 않는&lt;/em&gt; 불변성을 유지해야합니다 . 할당 해제를 통해 메모리를 무효화 할 수 있지만 &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(v)&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 으로 바꾸 거나 &lt;a href=&quot;../vec/struct.vec#method.set_len&quot;&gt; &lt;code&gt;Vec::set_len&lt;/code&gt; &lt;/a&gt; 을 호출 하여 벡터에서 일부 요소를 &quot;kill&quot;할 수 있습니다. 소멸자를 먼저 호출하지 않고 &lt;a href=&quot;../ptr/fn.write&quot;&gt; &lt;code&gt;ptr::write&lt;/code&gt; &lt;/a&gt; 를 사용하여 덮어 쓰면 용도를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dadde1acddaa4f2663e0f0f8fe2f53b8bd256d16" translate="yes" xml:space="preserve">
          <source>The purpose of these &lt;code&gt;Result&lt;/code&gt; types is to encode error-handling information. Values of the &lt;code&gt;Result&lt;/code&gt; type, like values of any type, have methods defined on them. An instance of &lt;code&gt;io::Result&lt;/code&gt; has an &lt;a href=&quot;../std/result/enum.result#method.expect&quot;&gt;&lt;code&gt;expect&lt;/code&gt; method&lt;/a&gt; that you can call. If this instance of &lt;code&gt;io::Result&lt;/code&gt; is an &lt;code&gt;Err&lt;/code&gt; value, &lt;code&gt;expect&lt;/code&gt; will cause the program to crash and display the message that you passed as an argument to &lt;code&gt;expect&lt;/code&gt;. If the &lt;code&gt;read_line&lt;/code&gt; method returns an &lt;code&gt;Err&lt;/code&gt;, it would likely be the result of an error coming from the underlying operating system. If this instance of &lt;code&gt;io::Result&lt;/code&gt; is an &lt;code&gt;Ok&lt;/code&gt; value, &lt;code&gt;expect&lt;/code&gt; will take the return value that &lt;code&gt;Ok&lt;/code&gt; is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in what the user entered into standard input.</source>
          <target state="translated">이러한 &lt;code&gt;Result&lt;/code&gt; 유형 의 목적은 오류 처리 정보를 인코딩하는 것입니다. 의 값 &lt;code&gt;Result&lt;/code&gt; 유형은 모든 유형의 값처럼, 방법은 그들에 정의했습니다. &lt;code&gt;io::Result&lt;/code&gt; 의 인스턴스에는 호출 할 수 있는 &lt;a href=&quot;../std/result/enum.result#method.expect&quot;&gt; &lt;code&gt;expect&lt;/code&gt; 메소드&lt;/a&gt; 가 있습니다. 의 인스턴스 경우 &lt;code&gt;io::Result&lt;/code&gt; 입니다 &lt;code&gt;Err&lt;/code&gt; 값이 &lt;code&gt;expect&lt;/code&gt; 충돌하고 인수로 전달하는 메시지를 표시 할 수있는 프로그램의 원인이됩니다 &lt;code&gt;expect&lt;/code&gt; . 는 IF &lt;code&gt;read_line&lt;/code&gt; 의 메소드가 리턴 &lt;code&gt;Err&lt;/code&gt; , 그것은 가능성이 기본 운영 체제에서 오는 오류의 결과 일 것이다. 이 &lt;code&gt;io::Result&lt;/code&gt; 인스턴스가 가 &lt;code&gt;Ok&lt;/code&gt; 값, &lt;code&gt;expect&lt;/code&gt; 하는 반환 값 소요됩니다 &lt;code&gt;Ok&lt;/code&gt; 보유하고 당신이 그것을 사용할 수 있도록 당신에게 그냥 값을 반환합니다. 이 경우 해당 값은 사용자가 표준 입력에 입력 한 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="17a957e4dd15537d9df26e9cd567ee8ac4ab9c24" translate="yes" xml:space="preserve">
          <source>The purpose of this example is to demonstrate a situation in which some generic parameters are declared with &lt;code&gt;impl&lt;/code&gt; and some are declared with the method definition. Here, the generic parameters &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are declared after &lt;code&gt;impl&lt;/code&gt;, because they go with the struct definition. The generic parameters &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;W&lt;/code&gt; are declared after &lt;code&gt;fn mixup&lt;/code&gt;, because they&amp;rsquo;re only relevant to the method.</source>
          <target state="translated">이 예제의 목적은 일부 일반 매개 변수가 &lt;code&gt;impl&lt;/code&gt; 로 선언되고 일부는 메소드 정의로 선언 되는 상황을 설명하기위한 것 입니다. 여기서 일반 매개 변수 &lt;code&gt;T&lt;/code&gt; 와 &lt;code&gt;U&lt;/code&gt; 는 구조체 정의와 함께 사용되므로 &lt;code&gt;impl&lt;/code&gt; 뒤에 선언 됩니다. 일반 매개 변수 &lt;code&gt;V&lt;/code&gt; 와 &lt;code&gt;W&lt;/code&gt; 는 메소드에만 관련되어 있기 때문에 &lt;code&gt;fn mixup&lt;/code&gt; 후에 선언 됩니다.</target>
        </trans-unit>
        <trans-unit id="83464f6d897f3cf3890af3a243744932372ed118" translate="yes" xml:space="preserve">
          <source>The purpose of this module is to alleviate imports of many common I/O traits by adding a glob import to the top of I/O heavy modules:</source>
          <target state="translated">이 모듈의 목적은 I / O 무거운 모듈의 맨 위에 glob 가져 오기를 추가하여 많은 일반적인 I / O 특성의 가져 오기를 완화하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c5176304cb4e1480563977bff5f9fc8f29f52bf7" translate="yes" xml:space="preserve">
          <source>The purpose of trait objects is to permit &quot;late binding&quot; of methods. Calling a method on a trait object results in virtual dispatch at runtime: that is, a function pointer is loaded from the trait object vtable and invoked indirectly. The actual implementation for each vtable entry can vary on an object-by-object basis.</source>
          <target state="translated">특성 객체의 목적은 메소드의 &quot;늦은 바인딩&quot;을 허용하는 것입니다. 특성 오브젝트에서 메소드를 호출하면 런타임시 가상 디스패치가 발생합니다. 즉, 특성 포인터가 특성 오브젝트 vtable에서로드되고 간접적으로 호출됩니다. 각 vtable 항목의 실제 구현은 개체별로 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f15fea39e76fdfafefd43bfce074d20361154e36" translate="yes" xml:space="preserve">
          <source>The purpose of unit tests is to test each unit of code in isolation from the rest of the code to quickly pinpoint where code is and isn&amp;rsquo;t working as expected. You&amp;rsquo;ll put unit tests in the &lt;em&gt;src&lt;/em&gt; directory in each file with the code that they&amp;rsquo;re testing. The convention is to create a module named &lt;code&gt;tests&lt;/code&gt; in each file to contain the test functions and to annotate the module with &lt;code&gt;cfg(test)&lt;/code&gt;.</source>
          <target state="translated">단위 테스트의 목적은 나머지 코드와는 별도로 각 코드 단위를 테스트하여 코드가 예상대로 작동하지 않는 위치를 신속하게 찾아내는 것입니다. 테스트 할 코드와 함께 각 파일 의 &lt;em&gt;src&lt;/em&gt; 디렉토리에 단위 테스트를 배치합니다 . 규칙은 테스트 기능을 포함하고 &lt;code&gt;cfg(test)&lt;/code&gt; 모듈에 주석을 달기 위해 각 파일에 &lt;code&gt;tests&lt;/code&gt; 라는 모듈을 작성하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="60cba1f37e61726b832a14d7f1500e4426e9a5cc" translate="yes" xml:space="preserve">
          <source>The question mark operator</source>
          <target state="translated">물음표 연산자</target>
        </trans-unit>
        <trans-unit id="018537889ded2ab112f094946b8612c9a86b99ba" translate="yes" xml:space="preserve">
          <source>The question mark operator (&lt;code&gt;?&lt;/code&gt;) unwraps valid values or returns erroneous values, propagating them to the calling function. It is a unary postfix operator that can only be applied to the types &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; and &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">물음표 연산자 ( &lt;code&gt;?&lt;/code&gt; )는 유효한 값을 풀거나 잘못된 값을 반환하여 호출 함수로 전파합니다. 단항 접미사 연산자는 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 및 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 유형에만 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ea5d63d0d5a319dd6d9072a4460aea03a494584" translate="yes" xml:space="preserve">
          <source>The question mark operator, &lt;code&gt;?&lt;/code&gt;</source>
          <target state="translated">물음표 연산자 &lt;code&gt;?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61208bdae8b221a09aba4f839d74c11c2925c51c" translate="yes" xml:space="preserve">
          <source>The radix or base of the internal representation of &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 내부 표현의 기수 또는 밑변입니다 .</target>
        </trans-unit>
        <trans-unit id="fc170d8fddda3392ca3bbfeb02d09cfb7f6a80ce" translate="yes" xml:space="preserve">
          <source>The radix or base of the internal representation of &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 내부 표현의 기수 또는 밑변입니다 .</target>
        </trans-unit>
        <trans-unit id="510a943d569cb4f1080072d01ababcb91699bcc6" translate="yes" xml:space="preserve">
          <source>The range is empty if either side is incomparable:</source>
          <target state="translated">어느 쪽도 비교할 수 없으면 범위가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cc134868dea70688318900dea4fb56c096c2fce" translate="yes" xml:space="preserve">
          <source>The raw pointer must have been previously returned by a call to a &lt;a href=&quot;struct.arc#method.into_raw&quot;&gt;&lt;code&gt;Arc::into_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">원시 포인터는 &lt;a href=&quot;struct.arc#method.into_raw&quot;&gt; &lt;code&gt;Arc::into_raw&lt;/code&gt; &lt;/a&gt; 호출에 의해 이전에 반환되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="cb442a6e9f4c3ea3ad88f7d20cbb90e50f086583" translate="yes" xml:space="preserve">
          <source>The raw pointer must have been previously returned by a call to a &lt;a href=&quot;struct.rc#method.into_raw&quot;&gt;&lt;code&gt;Rc::into_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">원시 포인터는 이전에 &lt;a href=&quot;struct.rc#method.into_raw&quot;&gt; &lt;code&gt;Rc::into_raw&lt;/code&gt; &lt;/a&gt; 호출에 의해 리턴되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="61edb86c6e775bcbcc090bf0b2354d8086752aee" translate="yes" xml:space="preserve">
          <source>The re-ordering prevented by the different ordering semantics are:</source>
          <target state="translated">다른 순서 의미론에 의해 방지되는 재정렬은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="db75fd7d163698847a2930407a821664ef9dc7a1" translate="yes" xml:space="preserve">
          <source>The reading portion of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt; 의 읽기 부분을 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="bb2e18a8faa1f91810d19956a7143af41d8b7e9f" translate="yes" xml:space="preserve">
          <source>The reason for deprecation is that the function basically cannot be used correctly: &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that values are properly initialized. As a consequence, calling e.g. &lt;code&gt;mem::uninitialized::&amp;lt;bool&amp;gt;()&lt;/code&gt; causes immediate undefined behavior for returning a &lt;code&gt;bool&lt;/code&gt; that is not definitely either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Worse, truly uninitialized memory like what gets returned here is special in that the compiler knows that it does not have a fixed value. This makes it undefined behavior to have uninitialized data in a variable even if that variable has an integer type. (Notice that the rules around uninitialized integers are not finalized yet, but until they are, it is advisable to avoid them.)</source>
          <target state="translated">더 이상 사용되지 않는 이유는 기본적으로 함수를 올바르게 사용할 수 없기 때문입니다. &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;Rust 컴파일러는&lt;/a&gt; 값이 올바르게 초기화되었다고 가정 합니다. 결과적으로, 예를 들어 &lt;code&gt;mem::uninitialized::&amp;lt;bool&amp;gt;()&lt;/code&gt; 호출 하면 확실히 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 가 아닌 &lt;code&gt;bool&lt;/code&gt; 을 반환하기 위해 즉시 정의되지 않은 동작이 발생합니다 . 더 나쁜 것은, 여기에 반환되는 것과 같이 초기화되지 않은 메모리는 컴파일러가 고정 값이 없다는 것을 알고 있다는 점에서 특별합니다. 따라서 변수에 정수 유형이 있더라도 변수에 초기화되지 않은 데이터가있는 정의되지 않은 동작이 발생합니다. (초기화되지 않은 정수에 관한 규칙은 아직 확정되지 않았지만 그 때까지는 피하는 것이 좋습니다.)</target>
        </trans-unit>
        <trans-unit id="d5d0c9e3177e947296d0e4cad464419f6391db88" translate="yes" xml:space="preserve">
          <source>The reason for this is that &lt;code&gt;rlib&lt;/code&gt; files do not contain any of their upstream dependencies. It wouldn't be very efficient for all &lt;code&gt;rlib&lt;/code&gt; files to contain a copy of &lt;code&gt;libstd.rlib&lt;/code&gt;!</source>
          <target state="translated">그 이유는 &lt;code&gt;rlib&lt;/code&gt; 파일에 업스트림 종속성이 포함되어 있지 않기 때문입니다 . 모든 &lt;code&gt;rlib&lt;/code&gt; 파일이 &lt;code&gt;libstd.rlib&lt;/code&gt; 의 사본을 포함하는 것은 그리 효율적이지 않습니다 !</target>
        </trans-unit>
        <trans-unit id="f95aa7105ee4000143fc92462b837053383a52a0" translate="yes" xml:space="preserve">
          <source>The reason for this is that there are two appearances of type parameter &lt;code&gt;T&lt;/code&gt; in the &lt;code&gt;impl&lt;/code&gt; header, both as parameters for &lt;code&gt;ForeignTrait2&lt;/code&gt;. The first appearance is uncovered, and so runs afoul of the orphan rule.</source>
          <target state="translated">그 이유 는 &lt;code&gt;impl&lt;/code&gt; 헤더에 &lt;code&gt;ForeignTrait2&lt;/code&gt; 에 대한 매개 변수로 두 개의 매개 변수 &lt;code&gt;T&lt;/code&gt; 유형이 모두 있기 때문 입니다. 첫 등장은 밝혀지지 않았으므로 고아 규칙을 어기 게됩니다.</target>
        </trans-unit>
        <trans-unit id="ef37c27a4f0dd2645ce86c85a75eac6a77fa29d9" translate="yes" xml:space="preserve">
          <source>The reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there&amp;rsquo;s no reason we would want to prevent &lt;code&gt;x&lt;/code&gt; from being valid after we create the variable &lt;code&gt;y&lt;/code&gt;. In other words, there&amp;rsquo;s no difference between deep and shallow copying here, so calling &lt;code&gt;clone&lt;/code&gt; wouldn&amp;rsquo;t do anything different from the usual shallow copying and we can leave it out.</source>
          <target state="translated">그 이유는 컴파일 타임에 알려진 크기를 가진 정수와 같은 유형이 스택에 완전히 저장되므로 실제 값의 사본을 빠르게 작성할 수 있기 때문입니다. 이것은 변수 &lt;code&gt;y&lt;/code&gt; 를 만든 후에 &lt;code&gt;x&lt;/code&gt; 가 유효 하지 않게 할 이유가 없다는 것을 의미 합니다 . 즉, 여기서는 딥 복사와 얕게 복사간에 차이 가 없으므로 &lt;code&gt;clone&lt;/code&gt; 호출 은 일반적인 얕은 복사와 다른 작업을 수행하지 않고 그대로 둘 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c1ca57165d895e7b5a9a07fb8f81dd8e653560f" translate="yes" xml:space="preserve">
          <source>The reason is that you&amp;rsquo;re missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. To rectify this error, you need to include this information in the &lt;em&gt;Cargo.toml&lt;/em&gt; file.</source>
          <target state="translated">그 이유는 중요한 정보가 누락 되었기 때문입니다. 설명과 라이센스가 필요하므로 사람들이 상자의 기능과 사용 가능한 용어를 알 수 있습니다. 이 오류를 해결하려면 &lt;em&gt;Cargo.toml&lt;/em&gt; 파일 에이 정보를 포함 &lt;em&gt;시켜야&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="725753993f38910ecfb713203cf3afe96ff590f2" translate="yes" xml:space="preserve">
          <source>The reason that this matter is that the type &lt;code&gt;fn(S)&lt;/code&gt; is not specific to any particular function: it's a function &lt;em&gt;pointer&lt;/em&gt;. So calling &lt;code&gt;x()&lt;/code&gt; results in a virtual call, whereas &lt;code&gt;foo()&lt;/code&gt; is statically dispatched, because the type of &lt;code&gt;foo&lt;/code&gt; tells us precisely what function is being called.</source>
          <target state="translated">이 문제가 발생하는 이유는 &lt;code&gt;fn(S)&lt;/code&gt; 유형 이 특정 함수에 고유하지 않기 때문 입니다. 함수 &lt;em&gt;포인터&lt;/em&gt; 입니다. 따라서 &lt;code&gt;x()&lt;/code&gt; 호출 하면 가상 호출이 발생하지만 &lt;code&gt;foo()&lt;/code&gt; 는 정적으로 전달됩니다. &lt;code&gt;foo&lt;/code&gt; 의 유형은 어떤 함수가 호출되는지를 정확하게 알려주기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="2f71ddaa6e32a7d6efaff9da8a4ddd4766615cbe" translate="yes" xml:space="preserve">
          <source>The reason the &lt;code&gt;deref&lt;/code&gt; method returns a reference to a value, and that the plain dereference outside the parentheses in &lt;code&gt;*(y.deref())&lt;/code&gt; is still necessary, is the ownership system. If the &lt;code&gt;deref&lt;/code&gt; method returned the value directly instead of a reference to the value, the value would be moved out of &lt;code&gt;self&lt;/code&gt;. We don&amp;rsquo;t want to take ownership of the inner value inside &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; in this case or in most cases where we use the dereference operator.</source>
          <target state="translated">그 이유는 &lt;code&gt;deref&lt;/code&gt; 있어서의 값에 대한 참조를 반환하고있는 괄호 밖의 일반한다는 간접 참조 &lt;code&gt;*(y.deref())&lt;/code&gt; 여전히 필요하다 소유권 시스템이다. 경우] &lt;code&gt;deref&lt;/code&gt; 있어서의 값에 대한 언급 대신 직접 값을 리턴 값은 외부로 이동 될 &lt;code&gt;self&lt;/code&gt; . 이 경우 또는 역 참조 연산자를 사용하는 대부분의 경우 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 내부의 내부 값을 소유하고 싶지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1d62bb1a32655921533dae07c7931836afe25a19" translate="yes" xml:space="preserve">
          <source>The reason this function compiles without lifetime annotations is historical: in early versions (pre-1.0) of Rust, this code wouldn&amp;rsquo;t have compiled because every reference needed an explicit lifetime. At that time, the function signature would have been written like this:</source>
          <target state="translated">이 함수가 수명 주석없이 컴파일되는 이유는 역사적입니다. Rust의 초기 버전 (1.0 이전)에서는 모든 참조에 명시적인 수명이 필요했기 때문에이 코드는 컴파일되지 않았습니다. 당시 함수 서명은 다음과 같이 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="bedb5e3116e5d92919b43a452878e5db1b96099b" translate="yes" xml:space="preserve">
          <source>The reason we&amp;rsquo;re able to use &lt;code&gt;&amp;amp;s2&lt;/code&gt; in the call to &lt;code&gt;add&lt;/code&gt; is that the compiler can &lt;em&gt;coerce&lt;/em&gt; the &lt;code&gt;&amp;amp;String&lt;/code&gt; argument into a &lt;code&gt;&amp;amp;str&lt;/code&gt;. When we call the &lt;code&gt;add&lt;/code&gt; method, Rust uses a &lt;em&gt;deref coercion&lt;/em&gt;, which here turns &lt;code&gt;&amp;amp;s2&lt;/code&gt; into &lt;code&gt;&amp;amp;s2[..]&lt;/code&gt;. We&amp;rsquo;ll discuss deref coercion in more depth in Chapter 15. Because &lt;code&gt;add&lt;/code&gt; does not take ownership of the &lt;code&gt;s&lt;/code&gt; parameter, &lt;code&gt;s2&lt;/code&gt; will still be a valid &lt;code&gt;String&lt;/code&gt; after this operation.</source>
          <target state="translated">우리가 사용할 수있는 이유 &lt;code&gt;&amp;amp;s2&lt;/code&gt; 호출에 &lt;code&gt;add&lt;/code&gt; 컴파일러 수 있다는 것입니다 &lt;em&gt;강요 &lt;/em&gt; &lt;code&gt;&amp;amp;String&lt;/code&gt; 에 인수 &lt;code&gt;&amp;amp;str&lt;/code&gt; . &lt;code&gt;add&lt;/code&gt; 메소드를 호출 할 때 Rust는 &lt;em&gt;deref coercion을&lt;/em&gt; 사용하는데 , 여기서 &lt;code&gt;&amp;amp;s2&lt;/code&gt; 는 &lt;code&gt;&amp;amp;s2[..]&lt;/code&gt; 로 바뀝니다 . 때문에 우리는 제 15 장에서 더 깊이 DEREF 강제 논의 할 것이다 &lt;code&gt;add&lt;/code&gt; 의 소유권을지지 않습니다 &lt;code&gt;s&lt;/code&gt; 매개 변수를, &lt;code&gt;s2&lt;/code&gt; 여전히 유효합니다 &lt;code&gt;String&lt;/code&gt; 이 작업 후.</target>
        </trans-unit>
        <trans-unit id="f3cfdfa90a10325648e4c2eb952b413419929140" translate="yes" xml:space="preserve">
          <source>The receiver of a method, or the current module.</source>
          <target state="translated">메소드의 수신자 또는 현재 모듈</target>
        </trans-unit>
        <trans-unit id="d73164a885c270ed79f7ee9c783984160bde564d" translate="yes" xml:space="preserve">
          <source>The receiving end of a channel has two useful methods: &lt;code&gt;recv&lt;/code&gt; and &lt;code&gt;try_recv&lt;/code&gt;. We&amp;rsquo;re using &lt;code&gt;recv&lt;/code&gt;, short for &lt;em&gt;receive&lt;/em&gt;, which will block the main thread&amp;rsquo;s execution and wait until a value is sent down the channel. Once a value is sent, &lt;code&gt;recv&lt;/code&gt; will return it in a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. When the sending end of the channel closes, &lt;code&gt;recv&lt;/code&gt; will return an error to signal that no more values will be coming.</source>
          <target state="translated">채널의 수신 &lt;code&gt;try_recv&lt;/code&gt; &lt;code&gt;recv&lt;/code&gt; 및 try_recv의 두 가지 유용한 방법이 있습니다. &lt;em&gt;receive&lt;/em&gt; , short의 &lt;code&gt;recv&lt;/code&gt; 를 사용 하여 메인 스레드의 실행을 차단하고 값이 채널로 전송 될 때까지 기다립니다. 값이 전송되면 &lt;code&gt;recv&lt;/code&gt; 는 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 반환합니다 . 채널의 &lt;code&gt;recv&lt;/code&gt; 이 닫히면 recv 는 더 이상 값이 오지 않을 것이라는 신호를 보내기 위해 오류를 반환합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bb4caae3b66529c5330d18c3a08329f2bc2f3deb" translate="yes" xml:space="preserve">
          <source>The receiving half of Rust's &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;) type. This half can only be owned by one thread.</source>
          <target state="translated">Rust &lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt; ) 유형 의 수신 절반입니다 . 이 절반은 하나의 스레드 만 소유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b2bfb185407e4c60c25d227a4ff77b2cda29f86" translate="yes" xml:space="preserve">
          <source>The reference count of the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instances in both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are 2 after we change the list in &lt;code&gt;a&lt;/code&gt; to point to &lt;code&gt;b&lt;/code&gt;. At the end of &lt;code&gt;main&lt;/code&gt;, Rust will try to drop &lt;code&gt;b&lt;/code&gt; first, which will decrease the count of the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance in &lt;code&gt;b&lt;/code&gt; by 1.</source>
          <target state="translated">의 레퍼런스 카운트 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 모두 인스턴스 및 &lt;code&gt;b&lt;/code&gt; 우리의 목록을 변경 한 후 2이다 에 지점 &lt;code&gt;b&lt;/code&gt; . 의 마지막 &lt;code&gt;main&lt;/code&gt; , 녹 드롭하려고 할 &lt;code&gt;b&lt;/code&gt; 의 카운트 감소하는 제 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 에서 예를 &lt;code&gt;b&lt;/code&gt; 1. &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0309be91bd54044d4044342a0389163de0a934e4" translate="yes" xml:space="preserve">
          <source>The region of memory beginning at &lt;code&gt;src&lt;/code&gt; with a size of &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes must &lt;em&gt;not&lt;/em&gt; overlap with the region of memory beginning at &lt;code&gt;dst&lt;/code&gt; with the same size.</source>
          <target state="translated">처음에, 메모리의 영역 &lt;code&gt;src&lt;/code&gt; 의 크기와 &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; 바이트해야 &lt;em&gt;하지&lt;/em&gt; 오버랩에서 시작하는 메모리의 영역과 &lt;code&gt;dst&lt;/code&gt; 동일한 크기.</target>
        </trans-unit>
        <trans-unit id="5dcc17f2dc1b8084d38071ff6ddcb2865d4ada36" translate="yes" xml:space="preserve">
          <source>The region of memory beginning at &lt;code&gt;x&lt;/code&gt; with a size of &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes must &lt;em&gt;not&lt;/em&gt; overlap with the region of memory beginning at &lt;code&gt;y&lt;/code&gt; with the same size.</source>
          <target state="translated">처음에, 메모리의 영역 &lt;code&gt;x&lt;/code&gt; 의 크기와 &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; 되어야하는 바이트 &lt;em&gt;하지&lt;/em&gt; 오버랩에서 시작하는 메모리의 영역으로 &lt;code&gt;y&lt;/code&gt; 와 동일한 크기.</target>
        </trans-unit>
        <trans-unit id="27d262cc92a6d55445ae1cc06ba8d24d6a4bfc8a" translate="yes" xml:space="preserve">
          <source>The relevant &lt;code&gt;use&lt;/code&gt; statements</source>
          <target state="translated">관련 &lt;code&gt;use&lt;/code&gt; 진술</target>
        </trans-unit>
        <trans-unit id="92055677c3977ae45c2e91b99d3cb2b7bc2e7a00" translate="yes" xml:space="preserve">
          <source>The remainder assignment operator &lt;code&gt;%=&lt;/code&gt;.</source>
          <target state="translated">나머지 할당 연산자 &lt;code&gt;%=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e1e6181542061352f1920b8d99d81207a670f7f" translate="yes" xml:space="preserve">
          <source>The remainder from the division of two floats.</source>
          <target state="translated">두 개의 수레를 나눈 나머지.</target>
        </trans-unit>
        <trans-unit id="054039eee5819e5face98778f38bf1e0291c343e" translate="yes" xml:space="preserve">
          <source>The remainder has the same sign as the dividend and is computed as: &lt;code&gt;x - (x / y).trunc() * y&lt;/code&gt;.</source>
          <target state="translated">나머지는 피제수와 같은 부호를 가지며 &lt;code&gt;x - (x / y).trunc() * y&lt;/code&gt; 로 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="5654d619adf6380504b572e1ea12d7691a4525f9" translate="yes" xml:space="preserve">
          <source>The remainder operator &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="translated">나머지 연산자 &lt;code&gt;%&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b313ceee14929f12b1b754da920f2c480594a9a" translate="yes" xml:space="preserve">
          <source>The remaining characters are alphanumeric or &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">나머지 문자는 영숫자 또는 &lt;code&gt;_&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="db31fc17b3b16891bdde4b2e11c17a8b55001a20" translate="yes" xml:space="preserve">
          <source>The removed element is replaced by the last element of the vector.</source>
          <target state="translated">제거 된 요소는 벡터의 마지막 요소로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="bdcb1bbcfc5506185f4dcdac6bb92b93d0ea27b3" translate="yes" xml:space="preserve">
          <source>The repeated fragment both matches and transcribes to the specified number of the fragment, separated by the separator token. Metavariables are matched to every repetition of their corresponding fragment. For instance, the &lt;code&gt;$( $i:ident ),*&lt;/code&gt; example above matches &lt;code&gt;$i&lt;/code&gt; to all of the identifiers in the list.</source>
          <target state="translated">반복되는 프래그먼트는 구분자 토큰으로 분리 된 지정된 수의 프래그먼트와 일치하고 기록합니다. 메타 변수는 해당 단편의 모든 반복과 일치합니다. 예를 들어, 위의 &lt;code&gt;$( $i:ident ),*&lt;/code&gt; 예제는 &lt;code&gt;$i&lt;/code&gt; 를 목록의 모든 식별자 와 일치 시킵니다.</target>
        </trans-unit>
        <trans-unit id="12103d0e7fb92d8d3b9ddae239cdf39dea7eeb65" translate="yes" xml:space="preserve">
          <source>The repetition operators are:</source>
          <target state="translated">반복 연산자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bfcbf2851f89edd4f300f9b36ba95aadb203f98e" translate="yes" xml:space="preserve">
          <source>The representation does &lt;em&gt;not&lt;/em&gt; look like Figure 4-3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation &lt;code&gt;s2 = s1&lt;/code&gt; could be very expensive in terms of runtime performance if the data on the heap were large.</source>
          <target state="translated">이 표현은 그림 4-3과 같지 &lt;em&gt;않습니다&lt;/em&gt; . 이는 Rust가 힙 데이터를 대신 복사 한 경우의 메모리 모양입니다. Rust에서이 작업을 수행 한 경우 힙의 데이터가 큰 경우 &lt;code&gt;s2 = s1&lt;/code&gt; 작업 은 런타임 성능 측면에서 매우 비쌀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef3b4092c2efea2b55e7548a736c3333a566aec1" translate="yes" xml:space="preserve">
          <source>The representation of a trait object like &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; 과 같은 특성 오브젝트의 표현 .</target>
        </trans-unit>
        <trans-unit id="84fd9c512efc7dcedf9b018795fbba5c08fc5ad5" translate="yes" xml:space="preserve">
          <source>The representation of a type can be changed by applying the &lt;code&gt;repr&lt;/code&gt; attribute to it. The following example shows a struct with a &lt;code&gt;C&lt;/code&gt; representation.</source>
          <target state="translated">&lt;code&gt;repr&lt;/code&gt; 속성을 적용하여 유형 표현을 변경할 수 있습니다 . 다음 예제는 &lt;code&gt;C&lt;/code&gt; 표현을 가진 구조체를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5a8aa6aa295a219e257360fdb9ca2113bb7bc323" translate="yes" xml:space="preserve">
          <source>The representation of a type can change the padding between fields, but does not change the layout of the fields themselves. For example, a struct with a &lt;code&gt;C&lt;/code&gt; representation that contains a struct &lt;code&gt;Inner&lt;/code&gt; with the default representation will not change the layout of &lt;code&gt;Inner&lt;/code&gt;.</source>
          <target state="translated">유형 표현은 필드 사이의 패딩을 변경할 수 있지만 필드 자체의 레이아웃은 변경하지 않습니다. 예를 들어,와 구조체 &lt;code&gt;C&lt;/code&gt; 의 구조체 포함 표현 &lt;code&gt;Inner&lt;/code&gt; 기본 표현과는 레이아웃이 변경되지 않습니다 &lt;code&gt;Inner&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8de668564b1808c69c7a252869635782239a849b" translate="yes" xml:space="preserve">
          <source>The representation semantics of floating-point numbers are described in &lt;a href=&quot;types/numeric&quot;&gt;&quot;Machine Types&quot;&lt;/a&gt;.</source>
          <target state="translated">부동 소수점 숫자의 표현 의미는 &lt;a href=&quot;types/numeric&quot;&gt;&quot;기계 유형&quot;에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="568b4d39b3d684710e1069cdb58107435b4ee105" translate="yes" xml:space="preserve">
          <source>The requested ABI is unsupported by the current target.</source>
          <target state="translated">요청한 ABI가 현재 대상에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48f41ba31da382f1ab342b312f6ebecf708e0a4f" translate="yes" xml:space="preserve">
          <source>The required inputs are these:</source>
          <target state="translated">필요한 입력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f6ffffcc1dc56ad2b07c96ba04b8dfcf628fd050" translate="yes" xml:space="preserve">
          <source>The requirements for this program haven&amp;rsquo;t been agreed upon yet, and we&amp;rsquo;re pretty sure the &lt;code&gt;Hello&lt;/code&gt; text at the beginning of the greeting will change. We decided we don&amp;rsquo;t want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the &lt;code&gt;greeting&lt;/code&gt; function, we&amp;rsquo;ll just assert that the output contains the text of the input parameter.</source>
          <target state="translated">이 프로그램의 요구 사항은 아직 합의되지 않았 으며 인사말 시작 부분의 &lt;code&gt;Hello&lt;/code&gt; 텍스트가 변경 될 것입니다. 요구 사항이 변경 될 때 테스트를 업데이트하지 않기로 결정했기 때문에 &lt;code&gt;greeting&lt;/code&gt; 함수 에서 반환 된 값과 정확히 같은지 확인하는 대신 출력에 입력 매개 변수의 텍스트가 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0cbf837e1937a12c606036644e82391851dc8756" translate="yes" xml:space="preserve">
          <source>The responsibilities that remain in the &lt;code&gt;main&lt;/code&gt; function after this process should be limited to the following:</source>
          <target state="translated">이 프로세스 후에 &lt;code&gt;main&lt;/code&gt; 기능에 남아있는 책임 은 다음으로 제한되어야합니다.</target>
        </trans-unit>
        <trans-unit id="fb88378aaf4cdd384feeec625a8c476a227f1fe6" translate="yes" xml:space="preserve">
          <source>The rest of the traits defined in the standard library can&amp;rsquo;t be implemented on your types using &lt;code&gt;derive&lt;/code&gt;. These traits don&amp;rsquo;t have sensible default behavior, so it&amp;rsquo;s up to you to implement them in the way that makes sense for what you&amp;rsquo;re trying to accomplish.</source>
          <target state="translated">표준 라이브러리에 정의 된 나머지 특성 &lt;code&gt;derive&lt;/code&gt; 사용하여 유형에 구현할 수 없습니다 . 이러한 특성은 합리적인 기본 동작을 갖지 않으므로 달성하려는 작업에 적합한 방식으로 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a3c86e891d6ad8a6d17dd1936fd9bfccb1b62f4" translate="yes" xml:space="preserve">
          <source>The rest of this book uses commands that work in both &lt;em&gt;cmd.exe&lt;/em&gt; and PowerShell. If there are specific differences, we&amp;rsquo;ll explain which to use.</source>
          <target state="translated">이 설명서의 나머지 부분에서는 &lt;em&gt;cmd.exe&lt;/em&gt; 와 PowerShell 에서 작동하는 명령을 사용합니다 . 구체적인 차이점이 있으면 사용할 것을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="00dd9e9169ec993decc3de54bbe98c364e0e7806" translate="yes" xml:space="preserve">
          <source>The rest of this crate documentation is dedicated to pointing out notable features of The Rust Standard Library.</source>
          <target state="translated">이 크레이트 문서의 나머지 부분은 Rust 표준 라이브러리의 주목할만한 기능을 지적하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="9f60835a1f670fd1068b73e7310483f7414303f8" translate="yes" xml:space="preserve">
          <source>The result may not be correctly rounded owing to implementation details; &lt;code&gt;self.log2()&lt;/code&gt; can produce more accurate results for base 2, and &lt;code&gt;self.log10()&lt;/code&gt; can produce more accurate results for base 10.</source>
          <target state="translated">구현 세부 사항으로 인해 결과가 올바르게 반올림되지 않을 수 있습니다. &lt;code&gt;self.log2()&lt;/code&gt; 는 기수 2에 대해보다 정확한 결과를 생성 할 수 있고 &lt;code&gt;self.log10()&lt;/code&gt; 은 기수 10에 대해보다 정확한 결과를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4dbebfb961a1bddcfad953b06a027b749fbba28" translate="yes" xml:space="preserve">
          <source>The result of &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereferencing&lt;/a&gt; an expression with type &lt;a href=&quot;../std/boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and that can also be moved out of.</source>
          <target state="translated">유형이 &lt;a href=&quot;../std/boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 인 표현식 을 &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;역 참조한&lt;/a&gt; 결과 도 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe2526308745be82b19ed557143eb06c9172e9c2" translate="yes" xml:space="preserve">
          <source>The result of a generator resumption.</source>
          <target state="translated">발전기 재개 결과입니다.</target>
        </trans-unit>
        <trans-unit id="d471d20c06ef14c004fab8262f7528514deaa1c4" translate="yes" xml:space="preserve">
          <source>The result of casting a reference to a pointer is valid for as long as the underlying object is live and no reference (just raw pointers) is used to access the same memory.</source>
          <target state="translated">포인터에 대한 참조를 캐스트 한 결과는 기본 객체가 존재하고 동일한 메모리에 액세스하는 데 참조 (원시 포인터)가 사용되지 않는 한 유효합니다.</target>
        </trans-unit>
        <trans-unit id="31cd246d6c4827dc128a4e9ac189ceccd07f4e85" translate="yes" xml:space="preserve">
          <source>The result of the &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro is a value of type &lt;a href=&quot;struct.arguments&quot;&gt;&lt;code&gt;fmt::Arguments&lt;/code&gt;&lt;/a&gt;. This structure can then be passed to the &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; functions inside this module in order to process the format string. The goal of this macro is to even further prevent intermediate allocations when dealing formatting strings.</source>
          <target state="translated">&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt; 의 결과 ! 매크로는 &lt;a href=&quot;struct.arguments&quot;&gt; &lt;code&gt;fmt::Arguments&lt;/code&gt; &lt;/a&gt; 유형의 값입니다 . 그런 다음이 구조를 형식 문자열을 처리하기 위해이 모듈 내의 &lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt; 함수에 전달할 수 있습니다 . 이 매크로의 목표는 형식화 문자열을 처리 할 때 중간 할당을 추가로 방지하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1c32345d3d6f612f235d03a8cd84044465cbfeea" translate="yes" xml:space="preserve">
          <source>The result will represent the IP address &lt;code&gt;a:b:c:d:e:f:g:h&lt;/code&gt;.</source>
          <target state="translated">결과는 IP 주소 &lt;code&gt;a:b:c:d:e:f:g:h&lt;/code&gt; 를 나타 냅니다.</target>
        </trans-unit>
        <trans-unit id="99c7c63b15fc6ea4f165265a5fd114fc5db86d31" translate="yes" xml:space="preserve">
          <source>The result will represent the IP address &lt;code&gt;a&lt;/code&gt;.&lt;code&gt;b&lt;/code&gt;.&lt;code&gt;c&lt;/code&gt;.&lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">결과는 IP 주소 &lt;code&gt;a&lt;/code&gt; 를 나타냅니다 . &lt;code&gt;b&lt;/code&gt; . &lt;code&gt;c&lt;/code&gt; . &lt;code&gt;d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7373e6f7caa0a9dff8d78cf60558cf221157bd80" translate="yes" xml:space="preserve">
          <source>The resulting layout will be the same as that of a C struct containing two fields with the layouts of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;, in that order.</source>
          <target state="translated">결과 레이아웃은 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;next&lt;/code&gt; 레이아웃 이 순서대로 있는 두 개의 필드를 포함하는 C 구조체의 레이아웃과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="99a0997f56bdadd8bd20428a4a2ef3bbae789fac" translate="yes" xml:space="preserve">
          <source>The resulting lifetime is bound to self so this behaves &quot;as if&quot; it were actually an instance of T that is getting borrowed. If a longer (unbound) lifetime is needed, use &lt;code&gt;&amp;amp;*my_ptr.as_ptr()&lt;/code&gt;.</source>
          <target state="translated">그 결과로 생기는 수명은 자기 자신에 묶여 있기 때문에 실제로 &quot;빌려 오는&quot;T의 인스턴스 인 것처럼 &quot;있는 것처럼&quot;동작합니다. 더 긴 (바운드되지 않은) 수명이 필요한 경우 &lt;code&gt;&amp;amp;*my_ptr.as_ptr()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f78e2e736259493757a0ced96e6b992b486267c6" translate="yes" xml:space="preserve">
          <source>The resulting lifetime is bound to self so this behaves &quot;as if&quot; it were actually an instance of T that is getting borrowed. If a longer (unbound) lifetime is needed, use &lt;code&gt;&amp;amp;mut *my_ptr.as_ptr()&lt;/code&gt;.</source>
          <target state="translated">그 결과로 생기는 수명은 자기 자신에 묶여 있기 때문에 실제로 &quot;빌려 오는&quot;T의 인스턴스 인 것처럼 &quot;있는 것처럼&quot;동작합니다. 더 긴 (바운드되지 않은) 수명이 필요한 경우 &lt;code&gt;&amp;amp;mut *my_ptr.as_ptr()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9220ca335fae6d1972b4901944a1126d0f38ae8e" translate="yes" xml:space="preserve">
          <source>The resulting pointer does not need to be in bounds, but it is potentially hazardous to dereference (which requires &lt;code&gt;unsafe&lt;/code&gt;).</source>
          <target state="translated">결과 포인터는 경계에있을 필요는 없지만 역 참조에 위험 할 수 있습니다 ( &lt;code&gt;unsafe&lt;/code&gt; 필요 ).</target>
        </trans-unit>
        <trans-unit id="81b4f59283eb3ce773831a86dd58d26e19da85b4" translate="yes" xml:space="preserve">
          <source>The resulting pointer does not need to be in bounds, but it is potentially hazardous to dereference (which requires &lt;code&gt;unsafe&lt;/code&gt;). In particular, the resulting pointer may &lt;em&gt;not&lt;/em&gt; be used to access a different allocated object than the one &lt;code&gt;self&lt;/code&gt; points to. In other words, &lt;code&gt;x.wrapping_offset(y.wrapping_offset_from(x))&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; the same as &lt;code&gt;y&lt;/code&gt;, and dereferencing it is undefined behavior unless &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; point into the same allocated object.</source>
          <target state="translated">결과 포인터는 경계에있을 필요는 없지만 역 참조에 위험 할 수 있습니다 ( &lt;code&gt;unsafe&lt;/code&gt; 필요 ). 특히, 결과 포인터는 &lt;code&gt;self&lt;/code&gt; 가리키는 것과 다른 할당 된 객체에 액세스하는 데 사용 &lt;em&gt;되지 않을&lt;/em&gt; 수 있습니다 . 즉, &lt;code&gt;x.wrapping_offset(y.wrapping_offset_from(x))&lt;/code&gt; 는 &lt;code&gt;y&lt;/code&gt; 와 같지 &lt;em&gt;않으며&lt;/em&gt; , &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 동일한 할당 된 객체를 가리 키지 않으면이를 정의하지 않은 동작 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="277fa9ca5234a7d85c4310d360b586b5679536d7" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;!&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; 를 적용한 후 결과 유형 운영자.</target>
        </trans-unit>
        <trans-unit id="e0fff7e85f4e0422c5e3edd89994815fd0fa33fe" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;%&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="bb2df529c05fcb3e3ae1db4ab5bf5c9f054fbf92" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;&amp;amp;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 를 적용한 후 결과 유형 연산자를 입니다.</target>
        </trans-unit>
        <trans-unit id="36522abccd158f4a83c30f6cbe7b1f733a467a76" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="1fe31e03010cc02b7a70dec74838acc1bf92f653" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="49f0b7e4d4d9571dc029b144b407d2d00db70bde" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;*&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="5440b4202f92f92a6ad5f44ab02bb1836dc990f2" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;+&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="4a8bf360ec637ebc225332beb0f574739bca97a7" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;-&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="541f705e1fd40afef0d79bd7f0f4268fa7398a27" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;/&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="5fff5e225b75cdf382af9bb7542d50be9c4363ed" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;^&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 연산자를 적용한 후 결과 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="fee8ba95ad793c2c7dda2e8911dcb02800ab8ed4" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;|&lt;/code&gt; operator.</source>
          <target state="translated">적용 후 결과 유형 &lt;code&gt;|&lt;/code&gt; 운영자.</target>
        </trans-unit>
        <trans-unit id="0473503cf115b2a975e15da3f35244db7bce3d66" translate="yes" xml:space="preserve">
          <source>The resulting type after concatenation</source>
          <target state="translated">연결 후 결과 유형</target>
        </trans-unit>
        <trans-unit id="dbf5bd29abfe066aae072317675dfaca543c15fe" translate="yes" xml:space="preserve">
          <source>The resulting type after dereferencing.</source>
          <target state="translated">역 참조 후 결과 유형.</target>
        </trans-unit>
        <trans-unit id="76a4c8bb9eba17c026c554fa00db407a4ed92a09" translate="yes" xml:space="preserve">
          <source>The resulting type after obtaining ownership.</source>
          <target state="translated">소유권을 얻은 후 결과 유형.</target>
        </trans-unit>
        <trans-unit id="04c53e531d342d2fc7cb2f6812bb0980d9b695cc" translate="yes" xml:space="preserve">
          <source>The resulting vector can be converted back into a box via &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;'s &lt;code&gt;into_boxed_slice&lt;/code&gt; method.</source>
          <target state="translated">결과 벡터는 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 의 &lt;code&gt;into_boxed_slice&lt;/code&gt; 메소드 를 통해 상자로 다시 변환 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b3c91f66fb428df18fd8a3b968cf270fb22e4f6" translate="yes" xml:space="preserve">
          <source>The return type isn&amp;rsquo;t &lt;code&gt;Self&lt;/code&gt;.</source>
          <target state="translated">반환 유형은 &lt;code&gt;Self&lt;/code&gt; 가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="87f17fcd6dd95b0936e246de85107f7f76aa4067" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;../primitive.str#method.escape_debug&quot;&gt;&lt;code&gt;str::escape_debug&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../primitive.str#method.escape_debug&quot;&gt; &lt;code&gt;str::escape_debug&lt;/code&gt; &lt;/a&gt; 의 반환 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="db39743b7e18afb4b0cbc402d05c64c31d6c2284" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;../primitive.str#method.escape_default&quot;&gt;&lt;code&gt;str::escape_default&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../primitive.str#method.escape_default&quot;&gt; &lt;code&gt;str::escape_default&lt;/code&gt; &lt;/a&gt; 의 반환 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="0d7f1d5c28f55e7c46b28c80bf7c947a04177ba0" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;../primitive.str#method.escape_unicode&quot;&gt;&lt;code&gt;str::escape_unicode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../primitive.str#method.escape_unicode&quot;&gt; &lt;code&gt;str::escape_unicode&lt;/code&gt; &lt;/a&gt; 의 반환 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="46984a9d3d93237d6af0b4171b9091187f1fd40f" translate="yes" xml:space="preserve">
          <source>The return type of &lt;code&gt;read_input()&lt;/code&gt;, &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&amp;lt;()&amp;gt;&lt;/code&gt;&lt;/a&gt;, is a very common type for functions which don't have a 'real' return value, but do want to return errors if they happen. In this case, the only purpose of this function is to read the line and print it, so we use &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">의 반환 형식 &lt;code&gt;read_input()&lt;/code&gt; , &lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&amp;lt;()&amp;gt;&lt;/code&gt; &lt;/a&gt; ,는 '진짜'리턴 값을 가지고 있지만이 일어날 경우 오류를 반환 싶어하지 않는 기능에 대한 매우 일반적인 유형입니다. 이 경우이 함수의 유일한 목적은 행을 읽고 인쇄하는 것이므로 &lt;code&gt;()&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="dc8688a274902ed01a0ecc5033bf35069d5bb391" translate="yes" xml:space="preserve">
          <source>The return value is a result indicating whether the new value was written and containing the previous value. On success this value is guaranteed to be equal to &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">리턴 값은 새 값이 작성되었으며 이전 값을 포함하는지 여부를 나타내는 결과입니다. 성공하면이 값은 &lt;code&gt;current&lt;/code&gt; 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="6b1ea39b856b2d5fee30e6b97044d7752b536c14" translate="yes" xml:space="preserve">
          <source>The return value is always the previous value. If it is equal to &lt;code&gt;current&lt;/code&gt;, then the value was updated.</source>
          <target state="translated">반환 값은 항상 이전 값입니다. &lt;code&gt;current&lt;/code&gt; 와 같으면 값이 업데이트되었습니다.</target>
        </trans-unit>
        <trans-unit id="8bec0cf03017a322224afce0dc723c8da3b1c3f8" translate="yes" xml:space="preserve">
          <source>The return value of this function has no meaning if &lt;code&gt;align&lt;/code&gt; is not a power-of-two.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 이 2의 거듭 제곱이 아닌 경우이 함수의 반환 값은 의미 가 없습니다.</target>
        </trans-unit>
        <trans-unit id="9b9e4888166c03a2354c980d922cf25c13eb44d0" translate="yes" xml:space="preserve">
          <source>The returned 64-bit value is equivalent to a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx&quot;&gt;&lt;code&gt;FILETIME&lt;/code&gt;&lt;/a&gt; struct, which represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). The struct is automatically converted to a &lt;code&gt;u64&lt;/code&gt; value, as that is the recommended way to use it.</source>
          <target state="translated">리턴 된 64 비트 값은 1601 년 1 월 1 일 (UTC) 이후 100 나노초 간격의 수를 나타내는 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx&quot;&gt; &lt;code&gt;FILETIME&lt;/code&gt; &lt;/a&gt; 구조체 와 같습니다 . 구조체는 사용하는 것이 권장되는 방법 &lt;code&gt;u64&lt;/code&gt; 값 으로 자동 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="7e9caf07f01ab2822f3d6ed99758b9360c5c26af" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt; is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one listener will affect the other.</source>
          <target state="translated">리턴 된 &lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; &lt;/a&gt; 는이 오브젝트가 참조하는 동일한 소켓에 대한 참조입니다. 두 핸들 모두 수신 연결을 수락하는 데 사용할 수 있으며 한 리스너에 설정된 옵션은 다른 리스너에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="ded74a0ee30df2ab90178bc7d8c79f6560c92452" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.waittimeoutresult&quot;&gt;&lt;code&gt;WaitTimeoutResult&lt;/code&gt;&lt;/a&gt; value indicates if the timeout is known to have elapsed without the condition being met.</source>
          <target state="translated">반환 된 &lt;a href=&quot;struct.waittimeoutresult&quot;&gt; &lt;code&gt;WaitTimeoutResult&lt;/code&gt; &lt;/a&gt; 값은 조건이 충족되지 않은 상태에서 시간 초과가 경과 한 것으로 알려진 경우를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="38736111afdf682fcdb07c273e755038e1599f59" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.waittimeoutresult&quot;&gt;&lt;code&gt;WaitTimeoutResult&lt;/code&gt;&lt;/a&gt; value indicates if the timeout is known to have elapsed.</source>
          <target state="translated">반환 된 &lt;a href=&quot;struct.waittimeoutresult&quot;&gt; &lt;code&gt;WaitTimeoutResult&lt;/code&gt; &lt;/a&gt; 값은 시간 초과가 경과 한 것으로 알려진 경우를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a4d3afc22fc51194d42ebf97c4d4c71d6cf8d193" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;Read&lt;/code&gt; instance will first read all bytes from this object until EOF is encountered. Afterwards the output is equivalent to the output of &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">반환 된 &lt;code&gt;Read&lt;/code&gt; 인스턴스는 EOF가 발생할 때까지이 객체에서 모든 바이트를 먼저 읽습니다. 이후 출력은 &lt;code&gt;next&lt;/code&gt; 출력과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="c46cae45e911aa3ffb2e82c2b8df4d3f09691f8b" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;TcpStream&lt;/code&gt; is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream.</source>
          <target state="translated">리턴 된 &lt;code&gt;TcpStream&lt;/code&gt; 은이 오브젝트가 참조하는 동일한 스트림에 대한 참조입니다. 두 핸들 모두 동일한 데이터 스트림을 읽고 쓰며, 한 스트림에 설정된 옵션은 다른 스트림으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="f1bab9e66e16ee3bc6f8eaaaaca9a4320b7da4d4" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UdpSocket&lt;/code&gt; is a reference to the same socket that this object references. Both handles will read and write the same port, and options set on one socket will be propagated to the other.</source>
          <target state="translated">리턴 된 &lt;code&gt;UdpSocket&lt;/code&gt; 은이 오브젝트가 참조하는 동일한 소켓에 대한 참조입니다. 두 핸들 모두 같은 포트를 읽고 쓰며 한 소켓에 설정된 옵션이 다른 소켓으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="c1a563924be47f2135363b13913bddb8d81845c6" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UnixDatagram&lt;/code&gt; is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one side will affect the other.</source>
          <target state="translated">반환 된 &lt;code&gt;UnixDatagram&lt;/code&gt; 은이 객체가 참조하는 것과 동일한 소켓에 대한 참조입니다. 두 핸들을 모두 사용하여 들어오는 연결을 수락 할 수 있으며 한쪽에 설정된 옵션이 다른쪽에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="3a69722b38c150ace8c17a0ad6c7500758c624a4" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UnixListener&lt;/code&gt; is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one listener will affect the other.</source>
          <target state="translated">반환 된 &lt;code&gt;UnixListener&lt;/code&gt; 는이 객체가 참조하는 동일한 소켓에 대한 참조입니다. 두 핸들 모두 수신 연결을 수락하는 데 사용할 수 있으며 한 리스너에 설정된 옵션은 다른 리스너에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="144b7ef360f6249426bb7be199321625b6985707" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UnixStream&lt;/code&gt; is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream.</source>
          <target state="translated">반환 된 &lt;code&gt;UnixStream&lt;/code&gt; 은이 객체가 참조하는 것과 동일한 스트림에 대한 참조입니다. 두 핸들 모두 동일한 데이터 스트림을 읽고 쓰며, 한 스트림에 설정된 옵션은 다른 스트림으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="e3560a746a4c0e2ffb1141c7abaa941ae137d7b4" translate="yes" xml:space="preserve">
          <source>The returned adaptor also implements &lt;code&gt;Read&lt;/code&gt; and will simply borrow this current reader.</source>
          <target state="translated">반환 된 어댑터는 또한 &lt;code&gt;Read&lt;/code&gt; 를 구현 하며이 현재 리더를 빌려옵니다.</target>
        </trans-unit>
        <trans-unit id="facac298df7b4792f8b8fe4cbcbc0a4967c70852" translate="yes" xml:space="preserve">
          <source>The returned adaptor also implements &lt;code&gt;Write&lt;/code&gt; and will simply borrow this current writer.</source>
          <target state="translated">반환 된 어댑터는 &lt;code&gt;Write&lt;/code&gt; 를 구현 하며이 현재 기록기를 빌려줍니다.</target>
        </trans-unit>
        <trans-unit id="e389b4884c363b3fc760ebd7d93cdcb95de946c0" translate="yes" xml:space="preserve">
          <source>The returned block is suitable for passing to the &lt;code&gt;alloc&lt;/code&gt;/&lt;code&gt;realloc&lt;/code&gt; methods of this allocator.</source>
          <target state="translated">리턴 된 블록은 이 할당 자의 &lt;code&gt;alloc&lt;/code&gt; / &lt;code&gt;realloc&lt;/code&gt; 메소드로 전달하는 데 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="b4d367aab1faeec6de58c9c9955a240781bdbe40" translate="yes" xml:space="preserve">
          <source>The returned block of storage may or may not have its contents initialized. (Extension subtraits might restrict this behavior, e.g., to ensure initialization to particular sets of bit patterns.)</source>
          <target state="translated">반환 된 스토리지 블록의 내용이 초기화되었거나 초기화되지 않았을 수 있습니다. (확장 하위 특성은 특정 비트 패턴 세트로 초기화하기 위해이 동작을 제한 할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="ba2ebcfc4f605284f02edd68881e9753988594f5" translate="yes" xml:space="preserve">
          <source>The returned boolean is &lt;code&gt;false&lt;/code&gt; only if the timeout is known to have elapsed.</source>
          <target state="translated">시간 초과가 경과 한 것으로 알려진 경우에만 반환 된 부울 값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ef190a0092cd801a89bd32ca6438155668c7c711" translate="yes" xml:space="preserve">
          <source>The returned buffer does &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes.</source>
          <target state="translated">반환 된 버퍼는 않습니다 &lt;strong&gt;하지&lt;/strong&gt; 후행 NUL 종료를 포함, 인테리어 NUL 바이트를 가지고 있지 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="c21f9df3ca074ffdfcc498df18bd9b3644edeb21" translate="yes" xml:space="preserve">
          <source>The returned iterator contains a snapshot of the process's environment variables at the time of this invocation. Modifications to environment variables afterwards will not be reflected in the returned iterator.</source>
          <target state="translated">리턴 된 반복자에는이 호출시 프로세스 환경 변수의 스냅 샷이 포함됩니다. 나중에 환경 변수에 대한 수정 내용은 반환 된 반복자에 반영되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="94742684e4e1a0a940d70b49afd50e4db443fbed" translate="yes" xml:space="preserve">
          <source>The returned iterator may not actually yield any values depending on the outcome of any resolution performed.</source>
          <target state="translated">반환 된 반복자는 실제로 수행 된 해상도의 결과에 따라 어떤 값도 생성하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aad97e80249c67281fd50b9abdb7bf4c0bc39de" translate="yes" xml:space="preserve">
          <source>The returned iterator might panic if the to-be-returned index would overflow a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 될 인덱스가 &lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt; 오버플로되면 반환 된 반복자가 패닉 상태에 빠질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="212e83558d8f38fe873f76d6ab8c409b36c6c1ca" translate="yes" xml:space="preserve">
          <source>The returned iterator requires that the pattern supports a reverse search, and it will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if a forward/reverse search yields the same elements.</source>
          <target state="translated">리턴 된 반복자는 패턴이 역방향 검색을 지원 해야하며 정방향 / 역방향 검색이 동일한 요소를 생성하는 경우 &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; 가&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="0a192fbaedef699058263c6cf3d017b9555c1581" translate="yes" xml:space="preserve">
          <source>The returned iterator requires that the pattern supports a reverse search, and it will be double ended if a forward/reverse search yields the same elements.</source>
          <target state="translated">리턴 된 반복자는 패턴이 리버스 검색을 지원해야하며 정방향 / 역방향 검색이 동일한 요소를 생성하면 이중으로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="4543e6c97747a65b55c800608ca5f7c928ee84b5" translate="yes" xml:space="preserve">
          <source>The returned iterator will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, but not for &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">패턴이 역방향 검색을 허용하고 정방향 / 역방향 검색이 동일한 요소를 생성하는 경우 반환 된 반복자는 &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; 가&lt;/a&gt; 됩니다. 예를 들어 &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 에는 적용되지만 &lt;code&gt;&amp;amp;str&lt;/code&gt; 에는 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fcd14ee368ff1244ad97f001dc72e74042b0095f" translate="yes" xml:space="preserve">
          <source>The returned iterator will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, but not for &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">패턴이 역방향 검색을 허용하고 정방향 / 역방향 검색이 동일한 요소를 생성하는 경우 반환 된 반복자는 &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; 가&lt;/a&gt; 됩니다. 예를 들어 &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 에는 적용되지만 &lt;code&gt;&amp;amp;str&lt;/code&gt; 에는 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="45e7ec844babb660dc32f9f713ab552f258e8f9a" translate="yes" xml:space="preserve">
          <source>The returned iterator will never return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; and will also not yield the peer's &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; structure. Iterating over it is equivalent to calling &lt;a href=&quot;#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; in a loop.</source>
          <target state="translated">반환 된 반복자는 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; 을&lt;/a&gt; 반환 하지 않으며 피어의 &lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt; 구조 도 생성하지 않습니다 . 그것을 반복하는 것은 루프에서 &lt;a href=&quot;#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt; 를 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="3cacc276ab85a92453bcb875fe7d5c79fd6233ed" translate="yes" xml:space="preserve">
          <source>The returned iterator will not be double ended, because it is not efficient to support.</source>
          <target state="translated">반환 된 이터레이터는 지원이 효율적이지 않기 때문에 이중으로 종료되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6626efd84bc65ae6d8cabe4bc5b2e309e23cd9ee" translate="yes" xml:space="preserve">
          <source>The returned iterator will panic during iteration if any argument to the process is not valid unicode. If this is not desired, use the &lt;a href=&quot;fn.args_os&quot;&gt;&lt;code&gt;args_os&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">프로세스에 대한 인수가 유효한 유니 코드가 아닌 경우 반복되는 동안 리턴 된 반복자가 패닉 상태가됩니다. 이것이 바람직하지 않으면, 대신 &lt;a href=&quot;fn.args_os&quot;&gt; &lt;code&gt;args_os&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8c4abf6a88076e830a1096ad48a0fcbdcd010f5d" translate="yes" xml:space="preserve">
          <source>The returned lifetime is not guaranteed to be the actual lifetime of &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">반환 된 수명은 실제 &lt;code&gt;ptr&lt;/code&gt; 수명이 될 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="dd646ddea405b753233bb6eb50b8340613c5b51f" translate="yes" xml:space="preserve">
          <source>The returned listener is ready for accepting connections.</source>
          <target state="translated">리턴 된 리스너는 연결을 승인 할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="bd3776d88d1ca8845ec6b1038a3cef52ddd6c1ee" translate="yes" xml:space="preserve">
          <source>The returned object can be used for error recovery, such as re-inspecting the buffer.</source>
          <target state="translated">리턴 된 오브젝트는 버퍼 재검사와 같은 오류 복구에 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d094ca8efdcd1c477cd38db568c96ab96a8083f1" translate="yes" xml:space="preserve">
          <source>The returned pointer is read-only; writing to it (including passing it to C code that writes to it) causes undefined behavior.</source>
          <target state="translated">반환 된 포인터는 읽기 전용입니다. 쓰기 (C 코드에 쓰기 포함)는 정의되지 않은 동작을 유발합니다.</target>
        </trans-unit>
        <trans-unit id="9b9b68320305244b712b6eba3fb78b4a32d8f345" translate="yes" xml:space="preserve">
          <source>The returned pointer will be valid for as long as &lt;code&gt;self&lt;/code&gt; is, and points to a contiguous region of memory terminated with a 0 byte to represent the end of the string.</source>
          <target state="translated">반환 된 포인터는 &lt;code&gt;self&lt;/code&gt; 가 있는 한 유효 하며 문자열의 끝을 나타 내기 위해 0 바이트로 끝나는 연속 된 메모리 영역을 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="bf0c4a80af7569dc2827892f37e1cf7abb925f27" translate="yes" xml:space="preserve">
          <source>The returned slice does &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes. If you need the nul terminator, use &lt;a href=&quot;#method.as_bytes_with_nul&quot;&gt;&lt;code&gt;as_bytes_with_nul&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">리턴 된 슬라이스 에는 후미 널 종결자가 포함 되지 &lt;strong&gt;않으며&lt;/strong&gt; 내부 널 바이트가없는 것이 보장됩니다. 널 종결자가 필요한 경우 대신 &lt;a href=&quot;#method.as_bytes_with_nul&quot;&gt; &lt;code&gt;as_bytes_with_nul&lt;/code&gt; 을&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="23c2a4410e35e072d95d91733db13ddd5bf58ad1" translate="yes" xml:space="preserve">
          <source>The returned slice will &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator that this C string has.</source>
          <target state="translated">반환 된 슬라이스 에는이 C 문자열의 마지막 널 종료자가 포함 &lt;strong&gt;되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="ca6695d62fb3138a05ebea6941a15916ea38fd70" translate="yes" xml:space="preserve">
          <source>The returned type after indexing.</source>
          <target state="translated">인덱싱 후 반환 된 형식입니다.</target>
        </trans-unit>
        <trans-unit id="323e9e5f7457b4d404421a53102d137f9784ffb2" translate="yes" xml:space="preserve">
          <source>The returned type after the call operator is used.</source>
          <target state="translated">호출 연산자가 사용 된 후 리턴 된 유형입니다.</target>
        </trans-unit>
        <trans-unit id="2d5978ed3eb5e45dd0ed7362549dedf897ab386a" translate="yes" xml:space="preserve">
          <source>The returned type implements &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; where the &lt;code&gt;Item&lt;/code&gt; is &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, &lt;/code&gt;&lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. The yielded item is &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; if a byte was successfully read and &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; otherwise. EOF is mapped to returning &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; from this iterator.</source>
          <target state="translated">리턴 된 유형 은 &lt;code&gt;Item&lt;/code&gt; 이 &lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;, &lt;/code&gt; &lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;io::Error&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 인&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; 를&lt;/a&gt; 구현 합니다. 바이트를 성공적으로 읽은 경우 생성 된 항목은 &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 이고 그렇지 않으면 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 입니다. EOF는 이 반복자에서 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 을 반환하도록 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="a0b4fa361f895a3f7a940a0df4cc75d5065e98e6" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;atime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on Unix platforms and the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">리턴 된 값 은 Unix 플랫폼 에서 &lt;code&gt;stat&lt;/code&gt; 의 &lt;code&gt;atime&lt;/code&gt; 필드 와 Windows 플랫폼 에서 &lt;code&gt;ftLastAccessTime&lt;/code&gt; 필드에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="ab7615b505b03838f921f8936a1701e974958831" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;birthtime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on Unix platforms and the &lt;code&gt;ftCreationTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">반환 값에 해당하는 &lt;code&gt;birthtime&lt;/code&gt; 의 의 필드 &lt;code&gt;stat&lt;/code&gt; 유닉스 플랫폼과 &lt;code&gt;ftCreationTime&lt;/code&gt; 의 Windows 플랫폼에서 필드.</target>
        </trans-unit>
        <trans-unit id="c5896159de75927b2d1b622cfd587f254e9fed43" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;mtime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on Unix platforms and the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">리턴 된 값 은 Unix 플랫폼 에서 &lt;code&gt;stat&lt;/code&gt; 의 &lt;code&gt;mtime&lt;/code&gt; 필드 와 Windows 플랫폼 에서 &lt;code&gt;ftLastWriteTime&lt;/code&gt; 필드에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="a0ea9c14c32dc6d6e0d323b13279abc6935b1d15" translate="yes" xml:space="preserve">
          <source>The returned value does include the fractional (nanosecond) part of the duration.</source>
          <target state="translated">반환 된 값에는 지속 시간의 분수 (나노초) 부분이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ff15d0950ff1afde3f0762acc64a9f002a6a04c1" translate="yes" xml:space="preserve">
          <source>The returned value does not have meaning for directories.</source>
          <target state="translated">리턴 된 값은 디렉토리에 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e8c08d63d79b2a138a0f12bb7a91ea3ec23dcec7" translate="yes" xml:space="preserve">
          <source>The returned value does not include the fractional (nanosecond) part of the duration, which can be obtained using &lt;a href=&quot;#method.subsec_nanos&quot;&gt;&lt;code&gt;subsec_nanos&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 된 값은 기간의 소수 (nanosecond) 부분을 포함하지 않으며 &lt;a href=&quot;#method.subsec_nanos&quot;&gt; &lt;code&gt;subsec_nanos&lt;/code&gt; &lt;/a&gt; 를 사용하여 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="70d2d5505f46c3741e892512e8371427a53745d7" translate="yes" xml:space="preserve">
          <source>The right shift assignment operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">오른쪽 교대 할당 연산자 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e00fa6358174afd137529285f589695abe7555ab" translate="yes" xml:space="preserve">
          <source>The right shift operator &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for &lt;code&gt;_ &amp;gt;&amp;gt; _&lt;/code&gt;, setting the result type for integer operations to the type of the left-hand-side operand. This means that though &lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt; and &lt;code&gt;a.shr(b)&lt;/code&gt; are one and the same from an evaluation standpoint, they are different when it comes to type inference.</source>
          <target state="translated">오른쪽 시프트 연산자 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; . 이 특성은 여러 오른쪽 유형이있는 모든 정수 유형에 대해 구현되므로 Rust의 유형 검사기는 &lt;code&gt;_ &amp;gt;&amp;gt; _&lt;/code&gt; 대한 특수 처리를 수행하여 정수 연산의 결과 유형을 왼쪽 피연산자의 유형으로 설정합니다. . 이는 &lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt; 와 &lt;code&gt;a.shr(b)&lt;/code&gt; 가 평가 관점에서 하나 이지만 동일하지만 형식 유추와 관련하여 서로 다릅니다.</target>
        </trans-unit>
        <trans-unit id="4bed85e5cf48df182fbdc5f50e1999ffc9d50cbb" translate="yes" xml:space="preserve">
          <source>The right way to suppress the warning is to actually write error handling, but because you just want to crash this program when a problem occurs, you can use &lt;code&gt;expect&lt;/code&gt;. You&amp;rsquo;ll learn about recovering from errors in Chapter 9.</source>
          <target state="translated">경고를 표시하지 않는 올바른 방법은 실제로 오류 처리를 작성하는 것이지만 문제가 발생할 때이 프로그램을 중단시키고 싶기 때문에 &lt;code&gt;expect&lt;/code&gt; 를 사용할 수 있습니다. 9 장의 오류 복구에 대해 배웁니다.</target>
        </trans-unit>
        <trans-unit id="93b14b29a7aed966fc23a390a9832d3b882cc69b" translate="yes" xml:space="preserve">
          <source>The root directory component, appears after any prefix and before anything else.</source>
          <target state="translated">루트 디렉토리 구성 요소는 접 두부 뒤에 그리고 다른 것 앞에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="a168d72d668df499616b725b5ca80c1ff007a04a" translate="yes" xml:space="preserve">
          <source>The rules for &lt;a href=&quot;../special-types-and-traits#send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../special-types-and-traits#sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; match those for normal struct types, while &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; behave as if &lt;a href=&quot;../attributes/derive&quot;&gt;derived&lt;/a&gt;. For &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;, the order of cloning of the captured variables is left unspecified.</source>
          <target state="translated">&lt;a href=&quot;../special-types-and-traits#send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../special-types-and-traits#sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; 규칙은 일반 구조체 유형 의 규칙 과 일치하지만 &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../attributes/derive&quot;&gt;파생 된&lt;/a&gt; 것처럼 동작합니다 . 들면 &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 캡처 된 변수의 클로닝의 순서가 지정되지 않은 상태이다.</target>
        </trans-unit>
        <trans-unit id="3563595879dbbd21c6c2906f7bd54a9b3679529d" translate="yes" xml:space="preserve">
          <source>The rust compiler cannot link to an external library if you don't give it its name. Example:</source>
          <target state="translated">rust 컴파일러는 이름을 지정하지 않으면 외부 라이브러리에 연결할 수 없습니다. 예:</target>
        </trans-unit>
        <trans-unit id="54065002f88e1cb544dc442e2b3686e62225bf94" translate="yes" xml:space="preserve">
          <source>The rust compiler maintains for each target a blacklist of ABIs unsupported on that target. If an ABI is present in such a list this usually means that the target / ABI combination is currently unsupported by llvm.</source>
          <target state="translated">rust 컴파일러는 각 대상에 대해 해당 대상에서 지원되지 않는 ABI의 블랙리스트를 유지 관리합니다. ABI가 이러한 목록에있는 경우 이는 일반적으로 대상 / ABI 조합이 현재 llvm에서 지원되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="d8dcfff8659995d9c806c4ff5bfe72343be6d124" translate="yes" xml:space="preserve">
          <source>The rustfix tool is included with Rust installations and can automatically fix some compiler warnings. If you&amp;rsquo;ve written code in Rust, you&amp;rsquo;ve probably seen compiler warnings. For example, consider this code:</source>
          <target state="translated">rustfix 도구는 Rust 설치에 포함되어 있으며 일부 컴파일러 경고를 자동으로 수정할 수 있습니다. Rust에서 코드를 작성했다면 아마도 컴파일러 경고가 표시되었을 것입니다. 예를 들어 다음 코드를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="d95e676c8653714db7acc846f5781f129f187994" translate="yes" xml:space="preserve">
          <source>The safety and conciseness of &lt;code&gt;for&lt;/code&gt; loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a &lt;code&gt;while&lt;/code&gt; loop in Listing 3-3, most Rustaceans would use a &lt;code&gt;for&lt;/code&gt; loop. The way to do that would be to use a &lt;code&gt;Range&lt;/code&gt;, which is a type provided by the standard library that generates all numbers in sequence starting from one number and ending before another number.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프 의 안전과 간결함은 Rust에서 가장 일반적으로 사용되는 루프 구조입니다. 목록 3-3에서 &lt;code&gt;while&lt;/code&gt; 루프 를 사용한 카운트 다운 예제 에서처럼 일부 코드를 특정 횟수만큼 실행하려는 경우에도 대부분의 Rustaceans는 &lt;code&gt;for&lt;/code&gt; 루프를 사용합니다 . 이를 수행하는 방법 은 표준 라이브러리에서 제공하는 유형 인 &lt;code&gt;Range&lt;/code&gt; 를 사용하여 한 숫자에서 시작하여 다른 숫자보다 먼저 끝나는 모든 숫자를 생성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="34c5f02c44747e09b58d1ec500165079e9867619" translate="yes" xml:space="preserve">
          <source>The same applies to transmutes to &lt;code&gt;*mut fn()&lt;/code&gt;, which were observed in practice. Note though that use of this type is generally incorrect. The intention is typically to describe a function pointer, but just &lt;code&gt;fn()&lt;/code&gt; alone suffices for that. &lt;code&gt;*mut fn()&lt;/code&gt; is a pointer to a fn pointer. (Since these values are typically just passed to C code, however, this rarely makes a difference in practice.)</source>
          <target state="translated">실제로 관찰 된 &lt;code&gt;*mut fn()&lt;/code&gt; 로의 변환에 적용됩니다 . 이 유형의 사용은 일반적으로 올바르지 않습니다. 의도는 일반적으로 함수 포인터를 설명하는 것이지만 &lt;code&gt;fn()&lt;/code&gt; 만으로도 충분합니다. &lt;code&gt;*mut fn()&lt;/code&gt; 은 fn 포인터에 대한 포인터입니다. (이러한 값은 일반적으로 C 코드로 전달되기 때문에 실제로 차이가 거의 없습니다.)</target>
        </trans-unit>
        <trans-unit id="2bc57fcef5c1050ba1f9373a34844306a6911e2e" translate="yes" xml:space="preserve">
          <source>The same restrictions of accessing the target of the pointer as with &lt;a href=&quot;struct.weak#method.as_raw&quot;&gt;&lt;code&gt;as_raw&lt;/code&gt;&lt;/a&gt; apply.</source>
          <target state="translated">&lt;a href=&quot;struct.weak#method.as_raw&quot;&gt; &lt;code&gt;as_raw&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 포인터의 대상에 액세스하는 것과 동일한 제한 사항이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e53c2cdb1077121198b1a8746e267d3b3a805b0e" translate="yes" xml:space="preserve">
          <source>The scope in which the variable &lt;code&gt;s&lt;/code&gt; is valid is the same as any function parameter&amp;rsquo;s scope, but we don&amp;rsquo;t drop what the reference points to when it goes out of scope because we don&amp;rsquo;t have ownership. When functions have references as parameters instead of the actual values, we won&amp;rsquo;t need to return the values in order to give back ownership, because we never had ownership.</source>
          <target state="translated">변수 &lt;code&gt;s&lt;/code&gt; 가 유효한 범위는 함수 매개 변수의 범위와 동일하지만 소유권이 없기 때문에 범위를 벗어날 때 참조가 가리키는 것을 삭제하지 않습니다. 함수에 실제 값 대신 매개 변수로 참조가있는 경우 소유권이 없기 때문에 소유권을 돌려주기 위해 값을 반환 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2c0f9db762db77543e23786689d772ed7e180cf6" translate="yes" xml:space="preserve">
          <source>The scopes of the immutable references &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; end after the &lt;code&gt;println!&lt;/code&gt; where they are last used, which is before the mutable reference &lt;code&gt;r3&lt;/code&gt; is created. These scopes don&amp;rsquo;t overlap, so this code is allowed.</source>
          <target state="translated">불변의 참조 &lt;code&gt;r1&lt;/code&gt; 및 &lt;code&gt;r2&lt;/code&gt; 의 범위 는 &lt;code&gt;println!&lt;/code&gt; 변경 가능한 참조 &lt;code&gt;r3&lt;/code&gt; 이 작성 되기 전의 마지막 사용 위치 . 이러한 범위는 겹치지 않으므로이 코드가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="547c47e37f57601f738482d42256219a9633dd7e" translate="yes" xml:space="preserve">
          <source>The search path to be used may be controlled by setting the &lt;code&gt;PATH&lt;/code&gt; environment variable on the Command, but this has some implementation limitations on Windows (see issue #37519).</source>
          <target state="translated">사용할 검색 경로 는 Command 에서 &lt;code&gt;PATH&lt;/code&gt; 환경 변수를 설정하여 제어 할 수 있지만 Windows에는 구현 제한이 있습니다 (문제 # 37519 참조).</target>
        </trans-unit>
        <trans-unit id="02a1a4dab2732977e1598d466f79a0132530331a" translate="yes" xml:space="preserve">
          <source>The second form of macros is &lt;em&gt;procedural macros&lt;/em&gt;, which act more like functions (and are a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do.</source>
          <target state="translated">매크로의 두 번째 형태는 &lt;em&gt;절차 적 매크로로&lt;/em&gt; , 함수와 비슷하게 작동하며 프로 시저 유형입니다. 절차 매크로는 일부 코드를 입력으로 받아들이고 해당 코드에서 작동하며 패턴과 일치하지 않고 선언적 매크로처럼 코드를 다른 코드로 바꾸지 않고 출력으로 일부 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="014f5e70707fe70de5f920ceaf6bbf6f00b7acd7" translate="yes" xml:space="preserve">
          <source>The second half of the tuple that is returned is an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. A &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; here means that either there is no known upper bound, or the upper bound is larger than &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환되는 튜플의 후반은 &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 입니다. &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 여기 없음이 알려져있다 어느 것이 수단은 상한 없거나 상부보다 큰 결합 &lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4961749eb1f24345f8436cc7b35d0ebccb81384a" translate="yes" xml:space="preserve">
          <source>The second invariant says that a separated complex NT must use a separator token that is part of the predetermined follow set for the internal contents of the NT. This ensures that a legal macro definition will continue to parse an input fragment into the same delimited sequence of &lt;code&gt;tt ...&lt;/code&gt;'s, even as new syntactic forms are added to the language.</source>
          <target state="translated">두 번째 불변은 분리 된 복합 NT가 NT의 내부 내용에 대해 사전 결정된 후속 세트의 일부인 분리기 토큰을 사용해야한다고 말합니다. 이렇게하면 새로운 구문 형식이 언어에 추가 되더라도 유효한 매크로 정의가 입력 조각을 동일한 구분 된 &lt;code&gt;tt ...&lt;/code&gt; 시퀀스로 계속 구문 분석 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f2dca747a6f3fa79f2291ae843df5963e36bbc5" translate="yes" xml:space="preserve">
          <source>The second is that it is the offset in bytes between successive elements in an array with that item type.</source>
          <target state="translated">두 번째는 해당 항목 유형이있는 배열의 연속 요소 간 오프셋 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="a1e02e9dcee081f5b8c19c27d767e65c0ff37f76" translate="yes" xml:space="preserve">
          <source>The second is to generally improve your knowledge of a facet of the language. In that case, just browse the table of contents until you see something you want to know more about, and just start reading. If a link looks interesting, click it, and read about that section.</source>
          <target state="translated">두 번째는 일반적으로 언어의 측면에 대한 지식을 향상시키는 것입니다. 이 경우, 더 알고 싶은 것이 보일 때까지 목차를 탐색하고 읽기를 시작하십시오. 링크가 흥미로워지면 클릭하여 해당 섹션에 대해 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="df5949936d6a2cd7eaf61fe27eb1fac54cf960fb" translate="yes" xml:space="preserve">
          <source>The second line that we added to the middle of the code prints the secret number. This is useful while we&amp;rsquo;re developing the program to be able to test it, but we&amp;rsquo;ll delete it from the final version. It&amp;rsquo;s not much of a game if the program prints the answer as soon as it starts!</source>
          <target state="translated">코드 중간에 추가 한 두 번째 줄은 비밀 번호를 인쇄합니다. 테스트 할 수 있도록 프로그램을 개발하는 동안 유용하지만 최종 버전에서 삭제합니다. 프로그램이 시작하자마자 답을 인쇄하면 그리 큰 게임이 아닙니다!</target>
        </trans-unit>
        <trans-unit id="57bb822113e197cd1e10145a43fbd748bc848a6a" translate="yes" xml:space="preserve">
          <source>The second problem with the current &lt;code&gt;Cacher&lt;/code&gt; implementation is that it only accepts closures that take one parameter of type &lt;code&gt;u32&lt;/code&gt; and return a &lt;code&gt;u32&lt;/code&gt;. We might want to cache the results of closures that take a string slice and return &lt;code&gt;usize&lt;/code&gt; values, for example. To fix this issue, try introducing more generic parameters to increase the flexibility of the &lt;code&gt;Cacher&lt;/code&gt; functionality.</source>
          <target state="translated">현재와 두 번째 문제 &lt;code&gt;Cacher&lt;/code&gt; 구현은 단지 형식의 하나 개의 매개 변수 걸릴 폐쇄 받아들이는 것입니다 &lt;code&gt;u32&lt;/code&gt; 하고 돌아 &lt;code&gt;u32&lt;/code&gt; . 예를 들어 문자열 슬라이스를 사용하여 &lt;code&gt;usize&lt;/code&gt; 값을 반환하는 클로저 결과를 캐시하려고 할 수 있습니다 . 이 문제를 해결하려면보다 일반적인 매개 변수를 도입하여 &lt;code&gt;Cacher&lt;/code&gt; 기능 의 유연성을 높이십시오 .</target>
        </trans-unit>
        <trans-unit id="92462e612674a20cc7e3c63f701740ce5bea5c75" translate="yes" xml:space="preserve">
          <source>The second rule applies because there is exactly one input lifetime. The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:</source>
          <target state="translated">정확히 하나의 입력 수명이 있기 때문에 두 번째 규칙이 적용됩니다. 두 번째 규칙은 하나의 입력 매개 변수의 수명이 출력 수명에 할당되도록 지정하므로 서명은 이제 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="66815e0776a29457690bd505c60d2e19937fa654" translate="yes" xml:space="preserve">
          <source>The second rule is if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32) -&amp;gt; &amp;amp;'a i32&lt;/code&gt;.</source>
          <target state="translated">두 번째 규칙은 정확히 하나의 입력 수명 매개 변수가있는 경우 해당 수명이 모든 출력 수명 매개 변수에 지정됩니다. &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32) -&amp;gt; &amp;amp;'a i32&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aedd96f8435bb44ce30001804fbe27f5473ed0ee" translate="yes" xml:space="preserve">
          <source>The second time we call &lt;code&gt;add_to_waitlist&lt;/code&gt; in &lt;code&gt;eat_at_restaurant&lt;/code&gt;, we use a relative path. The path starts with &lt;code&gt;front_of_house&lt;/code&gt;, the name of the module defined at the same level of the module tree as &lt;code&gt;eat_at_restaurant&lt;/code&gt;. Here the filesystem equivalent would be using the path &lt;code&gt;front_of_house/hosting/add_to_waitlist&lt;/code&gt;. Starting with a name means that the path is relative.</source>
          <target state="translated">&lt;code&gt;add_to_waitlist&lt;/code&gt; 에서 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 두 번째 호출 할 때는 상대 경로를 사용합니다. 경로는 시작 &lt;code&gt;front_of_house&lt;/code&gt; , 같은 모듈 트리의 같은 수준에서 정의 된 모듈의 이름 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 을 . 여기서 파일 시스템에 상응하는 것은 &lt;code&gt;front_of_house/hosting/add_to_waitlist&lt;/code&gt; 경로를 사용하는 것 입니다. 이름으로 시작하면 경로가 상대적임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6719785aa3871b4c2a2d425aeb686279358fe018" translate="yes" xml:space="preserve">
          <source>The second trait important to the smart pointer pattern is &lt;code&gt;Drop&lt;/code&gt;, which lets you customize what happens when a value is about to go out of scope. You can provide an implementation for the &lt;code&gt;Drop&lt;/code&gt; trait on any type, and the code you specify can be used to release resources like files or network connections. We&amp;rsquo;re introducing &lt;code&gt;Drop&lt;/code&gt; in the context of smart pointers because the functionality of the &lt;code&gt;Drop&lt;/code&gt; trait is almost always used when implementing a smart pointer. For example, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; customizes &lt;code&gt;Drop&lt;/code&gt; to deallocate the space on the heap that the box points to.</source>
          <target state="translated">스마트 포인터 패턴에 중요한 두 번째 특성은 &lt;code&gt;Drop&lt;/code&gt; 이며, 값이 범위를 벗어나려고 할 때 발생하는 동작을 사용자 지정할 수 있습니다. 모든 유형 의 &lt;code&gt;Drop&lt;/code&gt; 특성에 대한 구현을 제공 할 수 있으며 지정한 코드를 사용하여 파일 또는 네트워크 연결과 같은 리소스를 해제 할 수 있습니다. 우리는 도입하고 &lt;code&gt;Drop&lt;/code&gt; 의 기능 때문에 스마트 포인터의 맥락에서 &lt;code&gt;Drop&lt;/code&gt; 스마트 포인터를 구현할 때 특성이 거의 항상 사용됩니다. 예를 들어 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;Drop&lt;/code&gt; 이 사용자 지정 하여 상자가 가리키는 힙의 공간을 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="b9253951b95bdbecdb3d6ee784fab1524db5c9af" translate="yes" xml:space="preserve">
          <source>The second type of operation that requires an unsafe block is calls to unsafe functions. Unsafe functions and methods look exactly like regular functions and methods, but they have an extra &lt;code&gt;unsafe&lt;/code&gt; before the rest of the definition. The &lt;code&gt;unsafe&lt;/code&gt; keyword in this context indicates the function has requirements we need to uphold when we call this function, because Rust can&amp;rsquo;t guarantee we&amp;rsquo;ve met these requirements. By calling an unsafe function within an &lt;code&gt;unsafe&lt;/code&gt; block, we&amp;rsquo;re saying that we&amp;rsquo;ve read this function&amp;rsquo;s documentation and take responsibility for upholding the function&amp;rsquo;s contracts.</source>
          <target state="translated">안전하지 않은 블록이 필요한 두 번째 유형의 작업은 안전하지 않은 기능에 대한 호출입니다. 안전하지 않은 함수 및 메소드는 일반 함수 및 메소드와 똑같이 보이지만 나머지 정의 전에 &lt;code&gt;unsafe&lt;/code&gt; 추가 기능 이 있습니다. &lt;code&gt;unsafe&lt;/code&gt; 녹 우리가 이러한 요구 사항을 충족 한 보장 할 수 없기 때문에 이러한 맥락에서 키워드, 함수가 우리가이 함수를 호출 할 때 유지하기 위해 필요한 요구 사항을 나타냅니다. &lt;code&gt;unsafe&lt;/code&gt; 블록 내에서 안전 하지 않은 기능을 호출함으로써이 기능 의 설명서를 읽었으며 기능 계약을 유지하는 책임을지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="599ddbb55a436b4b2320e8d917bb378c0d788288" translate="yes" xml:space="preserve">
          <source>The semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. Listing 4-3 has an example with some annotations showing where variables go into and out of scope.</source>
          <target state="translated">함수에 값을 전달하는 의미는 변수에 값을 지정하는 의미와 유사합니다. 할당과 마찬가지로 변수를 함수에 전달하면 이동 또는 복사됩니다. Listing 4-3에는 변수가 범위 내외로 이동하는 위치를 보여주는 주석이 포함 된 예가있다.</target>
        </trans-unit>
        <trans-unit id="0ebf78e0ec598941096cd9f3613dea835a20177d" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt;.</source>
          <target state="translated">이 함수의 의미는 스레드가 대략 &lt;code&gt;dur&lt;/code&gt; 보다 크지 않도록 차단된다는 점을 제외하고 &lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; 와 동일합니다 . 이 방법 때문에 이러한 최대 시간 량을 일으키지 않으며 선점 또는 플랫폼의 차이 등의 이상으로 정확한 타이밍을 정확하게 사용할 수 기다린다 안 &lt;code&gt;dur&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f8ab2e3b0b43343b07ba616db0d9b83ddc1ec9a" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;ms&lt;/code&gt; milliseconds. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;ms&lt;/code&gt;.</source>
          <target state="translated">이 함수의 의미는 스레드가 대략 &lt;code&gt;ms&lt;/code&gt; 밀리 초 이하로 차단된다는 점을 제외하고 &lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; 와 동일합니다 . 이 방법은 선점 또는 플랫폼 차이와 같은 대기 시간으로 인해 최대 대기 시간이 정확히 &lt;code&gt;ms&lt;/code&gt; 가되지 않는 정확한 타이밍에 사용해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="10369644dc806ec3584f4bc1cd00c1b37924dd8f" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;#method.wait_until&quot;&gt;&lt;code&gt;wait_until&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt;.</source>
          <target state="translated">이 함수의 의미는 스레드가 대략 &lt;code&gt;dur&lt;/code&gt; 보다 크지 않도록 차단 &lt;a href=&quot;#method.wait_until&quot;&gt; &lt;code&gt;wait_until&lt;/code&gt; &lt;/a&gt; 점을 제외하고 wait_until 과 같습니다 . 이 방법 때문에 이러한 최대 시간 량을 일으키지 않으며 선점 또는 플랫폼의 차이 등의 이상으로 정확한 타이밍을 정확하게 사용할 수 기다린다 안 &lt;code&gt;dur&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="599bdbbdba24d3dd39b2e820e78610be901175cf" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt; long.</source>
          <target state="translated">이 함수의 의미는 동등 &lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;park&lt;/code&gt; &lt;/a&gt; 스레드가 대략 더 이상 차단되지 않습니다 것을 제외하고 &lt;code&gt;dur&lt;/code&gt; . 이 방법은 이로 인해 시간이 정확하게되도록 기다린의 최대 양을 일으키지 않을 수 선점 또는 플랫폼의 차이 등의 이상으로 정확한 타이밍을 위해 사용되지 않아야 &lt;code&gt;dur&lt;/code&gt; 긴.</target>
        </trans-unit>
        <trans-unit id="9563714599dd3161cea050e5c59d88f3adc62446" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;ms&lt;/code&gt; long.</source>
          <target state="translated">이 함수의 의미는 동등 &lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;park&lt;/code&gt; &lt;/a&gt; 스레드가 대략 더 이상 차단되지 않습니다 것을 제외하고 &lt;code&gt;dur&lt;/code&gt; . 이 방법은 선점 또는 플랫폼 차이와 같은 대기 시간으로 인해 최대 대기 시간이 정확히 &lt;code&gt;ms&lt;/code&gt; 를 초과하지 않을 수 있으므로 정확한 타이밍에 사용해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ce3d66bfcd3164df001d8c8d3ea53b374782f46" translate="yes" xml:space="preserve">
          <source>The semicolon &lt;code&gt;;&lt;/code&gt; can be used to discard the result of an expression at the end of a block, making the expression (and thus the block) evaluate to &lt;code&gt;()&lt;/code&gt;. For example,</source>
          <target state="translated">세미콜론 &lt;code&gt;;&lt;/code&gt; 블록의 끝에서 표현식의 결과를 버리고 표현식 (및 블록)을 &lt;code&gt;()&lt;/code&gt; 로 평가하는 데 사용할 수 있습니다 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="bb5601bddd79e71c2b7b66e9a5ead92eff60bcdd" translate="yes" xml:space="preserve">
          <source>The send and receive operations on channels will all return a &lt;a href=&quot;../../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; indicating whether the operation succeeded or not. An unsuccessful operation is normally indicative of the other half of a channel having &quot;hung up&quot; by being dropped in its corresponding thread.</source>
          <target state="translated">채널에서의 송수신 작업은 모두 작업의 성공 여부를 나타내는 &lt;a href=&quot;../../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; 를 반환합니다 . 실패한 작업은 일반적으로 해당 스레드에서 드롭되어 &quot;끊어진&quot;채널의 나머지 절반을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ea8d26ff0d36fb568a938927807eafbc1ae6f29d" translate="yes" xml:space="preserve">
          <source>The sending-half of Rust's asynchronous &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; type. This half can only be owned by one thread, but it can be cloned to send to other threads.</source>
          <target state="translated">Rust의 비동기 &lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt; 유형 의 절반을 전송 합니다. 이 절반은 하나의 스레드 만 소유 할 수 있지만 다른 스레드로 보내도록 복제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52ce535fefd9bc68502a1a5978b6409a82fd1bcb" translate="yes" xml:space="preserve">
          <source>The sending-half of Rust's synchronous &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Rust의 동기 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt; 유형 의 절반을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="937e495e6de5b225295fc788a2b8a9723c5d12e3" translate="yes" xml:space="preserve">
          <source>The sequential nature of the tuple applies to its implementations of various traits. For example, in &lt;code&gt;PartialOrd&lt;/code&gt; and &lt;code&gt;Ord&lt;/code&gt;, the elements are compared sequentially until the first non-equal set is found.</source>
          <target state="translated">튜플의 순차적 특성은 다양한 특성의 구현에 적용됩니다. 예를 들어 &lt;code&gt;PartialOrd&lt;/code&gt; 및 &lt;code&gt;Ord&lt;/code&gt; 에서 요소는 첫 번째 같지 않은 세트가 발견 될 때까지 순차적으로 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="faf864ad82a0182728e07d76ebfb5f1fdf6dc8f4" translate="yes" xml:space="preserve">
          <source>The signed two's complement integer types consist of:</source>
          <target state="translated">부호있는 2의 보수 정수 유형은 다음으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="0dca1ad1ce59bbb51cae453b849e2d3bd139c7cf" translate="yes" xml:space="preserve">
          <source>The simplest Rust programs, like the one we&amp;rsquo;ve written so far, don&amp;rsquo;t have any dependencies. So if we had built the Hello, world! project with Cargo, it would only use the part of Cargo that handles building your code. As you write more complex Rust programs, you&amp;rsquo;ll add dependencies, and if you start a project using Cargo, adding dependencies will be much easier to do.</source>
          <target state="translated">지금까지 작성한 프로그램과 같은 가장 간단한 Rust 프로그램에는 종속성이 없습니다. 우리가 Hello, world를 만들었다면! Cargo를 사용하면 코드 작성을 처리하는 Cargo 부분 만 사용합니다. 더 복잡한 Rust 프로그램을 작성할 때 종속성을 추가하게되며 Cargo를 사용하여 프로젝트를 시작하면 종속성을 추가하는 것이 훨씬 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="cc9fb663ff26b10b3b0480942ea72891d7b9e8a8" translate="yes" xml:space="preserve">
          <source>The single-address property of statics is required.</source>
          <target state="translated">스태틱의 단일 주소 속성이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="019cb91a15aad53bc6628eee08e1df33b769b170" translate="yes" xml:space="preserve">
          <source>The size and offset of fields is determined by the following algorithm.</source>
          <target state="translated">필드의 크기와 오프셋은 다음 알고리즘에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="cd076db2ed4f4f71100b51cbd80768553b1f9904" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SocketAddr&lt;/code&gt; instance may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SocketAddr&lt;/code&gt; 인스턴스 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36d5ae29044e3939345f3681fd2eee4951ec1d94" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SocketAddrV4&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SocketAddrV4&lt;/code&gt; 구조체 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa0a80c41eafe63e764438582cea6579e34fa99a" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SocketAddrV6&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SocketAddrV6&lt;/code&gt; 구조체 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8de810002bae6a69cc3fd5fc7b805d907b3e5fa" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SystemTime&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SystemTime&lt;/code&gt; 구조체 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b0dd86b903ec8c3b54b21a61cbefcfccd34c7a3" translate="yes" xml:space="preserve">
          <source>The size of a recursive type must be finite; in other words the recursive fields of the type must be &lt;a href=&quot;types/pointer&quot;&gt;pointer types&lt;/a&gt;.</source>
          <target state="translated">재귀 유형의 크기는 유한해야합니다. 다시 말해, 유형의 재귀 필드는 &lt;a href=&quot;types/pointer&quot;&gt;포인터 유형&lt;/a&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="c26f5c42f6a164861e02ed67750e160fcf8f0712" translate="yes" xml:space="preserve">
          <source>The size of a symbolic link is the length of the pathname it contains, without a terminating null byte.</source>
          <target state="translated">기호 링크의 크기는 종료 널 바이트가없는 경로 이름의 길이입니다.</target>
        </trans-unit>
        <trans-unit id="e1eaacf69ef80cbba3a3f01cf2e10bd4a9a5fca5" translate="yes" xml:space="preserve">
          <source>The size of a type in bytes.</source>
          <target state="translated">유형의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="96cd8943bd738b362434700faacd7dc900194564" translate="yes" xml:space="preserve">
          <source>The size of a union is the size of its largest field.</source>
          <target state="translated">공용체의 크기는 가장 큰 필드의 크기입니다.</target>
        </trans-unit>
        <trans-unit id="b7e7e7e0bae0750a49867bf9a72696378b080c09" translate="yes" xml:space="preserve">
          <source>The size of a value has two definitions.</source>
          <target state="translated">값의 크기에는 두 가지 정의가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e402a67efb4a62fa553a5f1394c869ac08acac0" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;Instant&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;Instant&lt;/code&gt; 구조체 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba89d7b73eb9567f0b0c3196e6cf2e84c9f4c35c" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;IpAddr&lt;/code&gt; instance may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;IpAddr&lt;/code&gt; 인스턴스 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64ef5aa718e0f2a4fb9998a036169d75f54db6df" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;Ipv4Addr&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;Ipv4Addr&lt;/code&gt; 의 크기 구조체 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b28d6468d140c4a12bab4e35b4415d244e5f859a" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;Ipv6Addr&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;Ipv6Addr&lt;/code&gt; 구조체 의 크기 는 대상 운영 체제에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a01d57dab257711e2df9579c72d88d59028c40dc" translate="yes" xml:space="preserve">
          <source>The size of most primitives is given in this table.</source>
          <target state="translated">대부분의 기본 요소의 크기가이 표에 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a098a792b06569a6bb6f2b7d98cf8797dcd4ec6" translate="yes" xml:space="preserve">
          <source>The size of the referenced value in bytes.</source>
          <target state="translated">참조 된 값의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="7c1fbeb1b5be430f1bc9e3a92e1dadba4b4fdb71" translate="yes" xml:space="preserve">
          <source>The size of this primitive is how many bytes it takes to reference any location in memory. For example, on a 32 bit target, this is 4 bytes and on a 64 bit target, this is 8 bytes.</source>
          <target state="translated">이 프리미티브의 크기는 메모리의 모든 위치를 참조하는 데 걸리는 바이트 수입니다. 예를 들어, 32 비트 대상에서는 4 바이트이고 64 비트 대상에서는 8 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="8e51743ff7cd79535af677e289113dcff07dbe9c" translate="yes" xml:space="preserve">
          <source>The slice used to create a &lt;a href=&quot;struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt; must have one and only one nul byte at the end of the slice.</source>
          <target state="translated">&lt;a href=&quot;struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; &lt;/a&gt; 을 만드는 데 사용되는 슬라이스 는 슬라이스 끝에 하나의 널 바이트 만 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="ad56ccc65a97d6c0192795237bde8dc8a187bcc7" translate="yes" xml:space="preserve">
          <source>The slices implement &lt;code&gt;IntoIterator&lt;/code&gt;. The iterator yields references to the slice elements.</source>
          <target state="translated">슬라이스는 &lt;code&gt;IntoIterator&lt;/code&gt; 를 구현 합니다 . 반복자는 슬라이스 요소에 대한 참조를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4d54f29cfdc5fb0b14c6bc3d825908235a2d1e62" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type.</source>
          <target state="translated">이 정수 유형으로 표시 할 수있는 가장 작은 값입니다.</target>
        </trans-unit>
        <trans-unit id="c371b87930b46855075594aef0b191a2dcbb6afc" translate="yes" xml:space="preserve">
          <source>The smart pointer &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is also not &lt;code&gt;Sync&lt;/code&gt; for the same reasons that it&amp;rsquo;s not &lt;code&gt;Send&lt;/code&gt;. The &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type (which we talked about in Chapter 15) and the family of related &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; types are not &lt;code&gt;Sync&lt;/code&gt;. The implementation of borrow checking that &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; does at runtime is not thread-safe. The smart pointer &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt; and can be used to share access with multiple threads as you saw in the &lt;a href=&quot;ch16-03-shared-state#sharing-a-mutext-between-multiple-threads&quot;&gt;&amp;ldquo;Sharing a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; Between Multiple Threads&amp;rdquo;&lt;/a&gt; section.</source>
          <target state="translated">스마트 포인터 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 도 &lt;code&gt;Send&lt;/code&gt; 가 아닌 것과 같은 이유로 &lt;code&gt;Sync&lt;/code&gt; 되지 않습니다 . &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; (우리는 15 장에서 이야기) 유형 및 관련 가족 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; 유형이 없습니다 &lt;code&gt;Sync&lt;/code&gt; . &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 이 런타임에 수행하는 빌리 검사의 구현은 스레드 안전하지 않습니다. 스마트 포인터 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 는 &lt;code&gt;Sync&lt;/code&gt; 이며 &lt;a href=&quot;ch16-03-shared-state#sharing-a-mutext-between-multiple-threads&quot;&gt;&amp;ldquo; &lt;/a&gt;여러 스레드 간 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 공유&amp;rdquo; 에서 볼 수 있듯이 여러 스레드와 액세스를 공유하는 데 사용할 수 있습니다 섹션 .</target>
        </trans-unit>
        <trans-unit id="348ea7c78b50388dc12ad8afa807cfbceb141e14" translate="yes" xml:space="preserve">
          <source>The socket will be closed when the value is dropped.</source>
          <target state="translated">값이 떨어지면 소켓이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="26c3406d4e79e978c77c7f71fb4706519f7ecd96" translate="yes" xml:space="preserve">
          <source>The solution here is to return the &lt;code&gt;String&lt;/code&gt; directly:</source>
          <target state="translated">여기서 해결책은 &lt;code&gt;String&lt;/code&gt; 을 반환하는 것입니다 직접 .</target>
        </trans-unit>
        <trans-unit id="b153caaa35f5e55b36f6162bb71df5061ac16716" translate="yes" xml:space="preserve">
          <source>The solution is to choose a different name that doesn't conflict with any external crate imported into the current module.</source>
          <target state="translated">해결책은 현재 모듈로 가져온 외부 상자와 충돌하지 않는 다른 이름을 선택하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="184f5f1102022e13bc531fc4c3a2f314884b9200" translate="yes" xml:space="preserve">
          <source>The solution is to coerce the array to a slice by calling a slice method:</source>
          <target state="translated">해결책은 slice 메소드를 호출하여 배열을 슬라이스로 강제 변환하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4b8f691075403fc3cc04a12f17630d0a22222627" translate="yes" xml:space="preserve">
          <source>The solution is to declare the imports at the top of the block, function, or file.</source>
          <target state="translated">해결책은 블록, 함수 또는 파일 맨 위에 가져 오기를 선언하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6d341bfc87265fdb3200162c1071f84eb34afeb9" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to ensure that the items that you are re-exporting are themselves marked with &lt;code&gt;pub&lt;/code&gt;:</source>
          <target state="translated">이 문제에 대한 해결책은 다시 내보내는 항목이 자체적으로 &lt;code&gt;pub&lt;/code&gt; 표시되도록하는 것입니다. .</target>
        </trans-unit>
        <trans-unit id="ca1c4540563346f3ae5ba53810b40773e7e12128" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to ensure that the module that you are re-exporting is itself marked with &lt;code&gt;pub&lt;/code&gt;:</source>
          <target state="translated">이 문제에 대한 해결책은 다시 내보내는 모듈 자체가 &lt;code&gt;pub&lt;/code&gt; 으로 표시되어 있는지 확인하는 것입니다. .</target>
        </trans-unit>
        <trans-unit id="ca9d7e79f3cd051af83e1b93c6feb0514cb1adc8" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to remove the extraneous associated constant:</source>
          <target state="translated">이 문제에 대한 해결책은 관련없는 상수를 제거하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b66ecfc5844845f6ce826665530fcbac23beb458" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to remove the extraneous associated type:</source>
          <target state="translated">이 문제에 대한 해결책은 관련없는 유형을 제거하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f5e669f80a825dd22d2d4e3f89464bdf72e0692e" translate="yes" xml:space="preserve">
          <source>The solution to this problem is usually to switch to using a &lt;code&gt;move&lt;/code&gt; closure. This approach moves (or copies, where possible) data into the closure, rather than taking references to it. For example:</source>
          <target state="translated">이 문제에 대한 해결책은 일반적으로 &lt;code&gt;move&lt;/code&gt; 을 사용하도록 전환하는 것입니다 클로저 입니다. 이 방법은 데이터를 참조하지 않고 클로저로 데이터를 이동 (또는 가능한 경우 복사)합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4bc18e7ccda6a6b48c7507cdd496e8030bd28ca8" translate="yes" xml:space="preserve">
          <source>The source files from which this book is generated can be found on &lt;a href=&quot;https://github.com/rust-lang/book/tree/master/src&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">이 책이 생성 된 소스 파일은 &lt;a href=&quot;https://github.com/rust-lang/book/tree/master/src&quot;&gt;GitHub&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a49d6b47901cd19039274da891afacb7623398fb" translate="yes" xml:space="preserve">
          <source>The spawned thread may outlive the caller (unless the caller thread is the main thread; the whole process is terminated when the main thread finishes). The join handle can be used to block on termination of the child thread, including recovering its panics.</source>
          <target state="translated">생성 된 스레드는 호출자보다 오래 지속될 수 있습니다 (호출자 스레드가 기본 스레드가 아닌 경우 전체 프로세스는 기본 스레드가 완료되면 종료됩니다). 결합 핸들을 사용하여 패닉 복구를 포함하여 하위 스레드 종료시 차단할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3de206631f62d211730a1cc35e89663e7062bcfa" translate="yes" xml:space="preserve">
          <source>The specified environment variable was found, but it did not contain valid unicode data. The found data is returned as a payload of this variant.</source>
          <target state="translated">지정된 환경 변수를 찾았지만 유효한 유니 코드 데이터가 없습니다. 찾은 데이터는이 변형의 페이로드로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ea36c8e1fa9f0022c16977222444b4a3c0ab84f9" translate="yes" xml:space="preserve">
          <source>The specified environment variable was not present in the current process's environment.</source>
          <target state="translated">지정된 환경 변수가 현재 프로세스 환경에 없습니다.</target>
        </trans-unit>
        <trans-unit id="769e7a49a82fbc73600ab216f157a9a4edfed6d2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt;&lt;code&gt;std::hint::unreachable_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt; &lt;code&gt;std::hint::unreachable_unchecked&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="626a03e32989e459202fcca2e29d114287d2e779" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.needs_drop&quot;&gt;&lt;code&gt;std::mem::needs_drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../mem/fn.needs_drop&quot;&gt; &lt;code&gt;std::mem::needs_drop&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b581000bfc2472e309baf4b78516cb35a337926" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.size_of&quot;&gt;&lt;code&gt;std::mem::size_of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../mem/fn.size_of&quot;&gt; &lt;code&gt;std::mem::size_of&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5867b1e1c4944c1f7ed32488f5be2fa294b4986f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.size_of_val&quot;&gt;&lt;code&gt;std::mem::size_of_val&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../mem/fn.size_of_val&quot;&gt; &lt;code&gt;std::mem::size_of_val&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="93a878abfa4b4b05965b5ed62c9134a4b23816af" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../process/fn.abort&quot;&gt;&lt;code&gt;std::process::abort&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../process/fn.abort&quot;&gt; &lt;code&gt;std::process::abort&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="07e69ca4af06caf0678a0eb7f58dbb4160ebfce9" translate="yes" xml:space="preserve">
          <source>The standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!</source>
          <target state="translated">표준 라이브러리 API 설명서에는 벡터, 문자열 및 해시 맵이 이러한 연습에 도움이되는 메소드가 설명되어 있습니다!</target>
        </trans-unit>
        <trans-unit id="ecfac3d3b7b498f942f6cc167a3014bcca50e8db" translate="yes" xml:space="preserve">
          <source>The standard library also provides a &lt;code&gt;Wrapping&amp;lt;T&amp;gt;&lt;/code&gt; newtype which ensures all standard arithmetic operations for &lt;code&gt;T&lt;/code&gt; have wrapping semantics.</source>
          <target state="translated">표준 라이브러리는 또한 &lt;code&gt;Wrapping&amp;lt;T&amp;gt;&lt;/code&gt; newtype을 제공하여 &lt;code&gt;T&lt;/code&gt; 에 대한 모든 표준 산술 연산에 랩핑 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e62bb358494cb55da1b597b5302098f7179da4a8" translate="yes" xml:space="preserve">
          <source>The standard library contains additional 'smart pointer' types beyond references and raw pointers.</source>
          <target state="translated">표준 라이브러리에는 참조 및 원시 포인터 이외의 추가 '스마트 포인터'유형이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4aeb001acf27f60d5c3f4949174f0ea7b98815a0" translate="yes" xml:space="preserve">
          <source>The standard library documentation for the &lt;code&gt;env::args&lt;/code&gt; function shows that the type of the iterator it returns is &lt;code&gt;std::env::Args&lt;/code&gt;. We&amp;rsquo;ve updated the signature of the &lt;code&gt;Config::new&lt;/code&gt; function so the parameter &lt;code&gt;args&lt;/code&gt; has the type &lt;code&gt;std::env::Args&lt;/code&gt; instead of &lt;code&gt;&amp;amp;[String]&lt;/code&gt;. Because we&amp;rsquo;re taking ownership of &lt;code&gt;args&lt;/code&gt; and we&amp;rsquo;ll be mutating &lt;code&gt;args&lt;/code&gt; by iterating over it, we can add the &lt;code&gt;mut&lt;/code&gt; keyword into the specification of the &lt;code&gt;args&lt;/code&gt; parameter to make it mutable.</source>
          <target state="translated">&lt;code&gt;env::args&lt;/code&gt; 함수 의 표준 라이브러리 문서는 리턴하는 반복자의 유형이 &lt;code&gt;std::env::Args&lt;/code&gt; 임을 보여줍니다 . &lt;code&gt;args&lt;/code&gt; 매개 변수 의 유형 이 &lt;code&gt;&amp;amp;[String]&lt;/code&gt; 대신 &lt;code&gt;std::env::Args&lt;/code&gt; 형식이 되도록 &lt;code&gt;Config::new&lt;/code&gt; 함수 의 서명을 업데이트했습니다 . 우리는 &lt;code&gt;args&lt;/code&gt; 의 소유권을 취하고 그것을 반복함으로써 &lt;code&gt;args&lt;/code&gt; 를 변경 시킬 것이기 때문에, &lt;code&gt;mut&lt;/code&gt; 키워드를 &lt;code&gt;args&lt;/code&gt; 매개 변수 의 사양에 추가하여 변경 가능하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ac01984afb710ebee7af9fdef959461335b5771" translate="yes" xml:space="preserve">
          <source>The standard library does &lt;em&gt;not&lt;/em&gt; automatically wait on child processes (not even if the &lt;code&gt;Child&lt;/code&gt; is dropped), it is up to the application developer to do so. As a consequence, dropping &lt;code&gt;Child&lt;/code&gt; handles without waiting on them first is not recommended in long-running applications.</source>
          <target state="translated">표준 라이브러리는 자식 프로세스를 자동으로 기다리지 &lt;em&gt;않으며&lt;/em&gt; ( &lt;code&gt;Child&lt;/code&gt; 이 삭제 된 경우에도 ) 응용 프로그램 개발자의 책임입니다. 따라서 장시간 실행되는 응용 프로그램에서는 먼저 핸들을 기다리지 않고 &lt;code&gt;Child&lt;/code&gt; 핸들을 삭제 하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c3da8861a8cd359749d019429f14004546548517" translate="yes" xml:space="preserve">
          <source>The standard library exports many modules &lt;em&gt;with the same name as primitive types&lt;/em&gt;. These define additional items related to the primitive type, but not the all-important methods.</source>
          <target state="translated">표준 라이브러리 &lt;em&gt;는 기본 유형과 이름이 같은&lt;/em&gt; 많은 모듈 &lt;em&gt;을&lt;/em&gt; 내 보냅니다 . 이것들은 기본 유형과 관련된 추가 항목을 정의하지만 모든 중요한 방법은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="be570bfc11d12183d4ccfc099e5e91a1312fadce" translate="yes" xml:space="preserve">
          <source>The standard library exposes three common ways to deal with contiguous regions of memory:</source>
          <target state="translated">표준 라이브러리는 인접한 메모리 영역을 처리하는 세 가지 일반적인 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d66210e7b423f4f4e31543419e308e2c95ac4c07" translate="yes" xml:space="preserve">
          <source>The standard library has other types that provide interior mutability, such as &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;, which is similar except that instead of giving references to the inner value, the value is copied in and out of the &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;. There&amp;rsquo;s also &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;, which offers interior mutability that&amp;rsquo;s safe to use across threads; we&amp;rsquo;ll discuss its use in Chapter 16. Check out the standard library docs for more details on the differences between these types.</source>
          <target state="translated">표준 라이브러리에는 내부 변이성을 제공하는 다른 유형 (예 : &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; )이 있습니다. 이는 내부 값에 대한 참조를 제공하는 대신 값이 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; 안팎으로 복사되는 것을 제외하고는 비슷 합니다. 도 있습니다 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 스레드는 스레드간에 안전하게 사용할 수있는 내부 변경 성을 제공합니다. 이러한 유형의 차이점에 대한 자세한 내용은 표준 라이브러리 문서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a3eb5ea324c5e016fa7225e0db42ddd0287496a0" translate="yes" xml:space="preserve">
          <source>The standard library implements some I/O traits on various types which are commonly used as a buffer, like &lt;code&gt;Cursor&amp;lt;&lt;/code&gt;&lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;u8&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;Cursor&amp;lt;&lt;/code&gt;&lt;a href=&quot;../primitive.slice&quot;&gt;&lt;code&gt;&amp;amp;[u8]&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">표준 라이브러리는 &lt;code&gt;Cursor&amp;lt;&lt;/code&gt; &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;u8&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;Cursor&amp;lt;&lt;/code&gt; &lt;a href=&quot;../primitive.slice&quot;&gt; &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 와 같이 일반적으로 버퍼로 사용되는 다양한 유형의 일부 I / O 특성을 구현 합니다.</target>
        </trans-unit>
        <trans-unit id="cd43fc91f30c20105f33015f4862eaa4ba469ffd" translate="yes" xml:space="preserve">
          <source>The standard library in general strives to support both statically linked and dynamically linked C runtimes for targets as appropriate. For example the &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt; and &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; targets typically come with both runtimes and the user selects which one they'd like. All targets in the compiler have a default mode of linking to the C runtime. Typically targets are linked dynamically by default, but there are exceptions which are static by default such as:</source>
          <target state="translated">표준 라이브러리는 일반적으로 대상에 대해 정적으로 링크 된 C 런타임과 동적으로 링크 된 C 런타임을 모두 지원하기 위해 노력합니다. 예를 들어 &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt; 및 &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; 대상은 일반적으로 런타임과 함께 제공되며 사용자는 원하는 것을 선택합니다. 컴파일러의 모든 대상에는 C 런타임에 연결하는 기본 모드가 있습니다. 일반적으로 대상은 기본적으로 동적으로 연결되지만 기본적으로 정적 예외는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e62009a1ff01cf79d8a5846c788aa68bf271141c" translate="yes" xml:space="preserve">
          <source>The standard library provides an implementation of &lt;code&gt;panic_handler&lt;/code&gt; that defaults to unwinding the stack but that can be &lt;a href=&quot;../book/ch09-01-unrecoverable-errors-with-panic&quot;&gt;changed to abort the process&lt;/a&gt;. The standard library's panic behavior can be modified at runtime with the &lt;a href=&quot;../std/panic/fn.set_hook&quot;&gt;set_hook&lt;/a&gt; function.</source>
          <target state="translated">표준 라이브러리는 스택 해제를 기본으로 설정하지만 &lt;a href=&quot;../book/ch09-01-unrecoverable-errors-with-panic&quot;&gt;프로세스를 중단&lt;/a&gt; 하도록 변경할 수있는 &lt;code&gt;panic_handler&lt;/code&gt; 의 구현을 제공합니다 . 표준 라이브러리의 패닉 동작은 런타임에 &lt;a href=&quot;../std/panic/fn.set_hook&quot;&gt;set_hook&lt;/a&gt; 함수를 사용하여 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a6bfe00112d50ce1df3b69fa8e0f97c99e921c7e" translate="yes" xml:space="preserve">
          <source>The standard library&amp;rsquo;s &lt;code&gt;Add&lt;/code&gt; trait is an example of the second purpose: usually, you&amp;rsquo;ll add two like types, but the &lt;code&gt;Add&lt;/code&gt; trait provides the ability to customize beyond that. Using a default type parameter in the &lt;code&gt;Add&lt;/code&gt; trait definition means you don&amp;rsquo;t have to specify the extra parameter most of the time. In other words, a bit of implementation boilerplate isn&amp;rsquo;t needed, making it easier to use the trait.</source>
          <target state="translated">표준 라이브러리의 &lt;code&gt;Add&lt;/code&gt; 특성은 두 번째 목적의 예입니다. 일반적으로 두 가지 유형을 &lt;code&gt;Add&lt;/code&gt; 하지만 Add 특성은 그 이상으로 사용자 정의 할 수있는 기능을 제공합니다. 특성 정의 &lt;code&gt;Add&lt;/code&gt; 에 기본 유형 매개 변수 를 사용하면 추가 매개 변수를 대부분 지정할 필요가 없습니다. 다시 말해, 약간의 구현 상용구가 필요하지 않으므로 특성을보다 쉽게 ​​사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0eb239c2b2b429ca2fb24dfb5a68ef2028451c54" translate="yes" xml:space="preserve">
          <source>The start and end of the string (when &lt;code&gt;index == self.len()&lt;/code&gt;) are considered to be boundaries.</source>
          <target state="translated">문자열의 시작과 끝 ( &lt;code&gt;index == self.len()&lt;/code&gt; )은 경계로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="cc00d65ec1e11702c522241a5699948a50675d34" translate="yes" xml:space="preserve">
          <source>The starting index must come before the ending index;</source>
          <target state="translated">시작 색인은 종료 색인 앞에 와야합니다.</target>
        </trans-unit>
        <trans-unit id="37ec0e6627e56520c118b2a4c9fe270333b4a9ac" translate="yes" xml:space="preserve">
          <source>The status (exit code) of the process.</source>
          <target state="translated">프로세스의 상태 (종료 코드)</target>
        </trans-unit>
        <trans-unit id="2deb263189905df596d3c94b6a6e46fb7fad91f4" translate="yes" xml:space="preserve">
          <source>The status code 200 is the standard success response. The text is a tiny successful HTTP response. Let&amp;rsquo;s write this to the stream as our response to a successful request! From the &lt;code&gt;handle_connection&lt;/code&gt; function, remove the &lt;code&gt;println!&lt;/code&gt; that was printing the request data and replace it with the code in Listing 20-3.</source>
          <target state="translated">상태 코드 200은 표준 성공 응답입니다. 텍스트는 아주 성공적인 HTTP 응답입니다. 성공적인 요청에 대한 응답으로 이것을 스트림에 씁시다! 로부터 &lt;code&gt;handle_connection&lt;/code&gt; 의 기능의 제거 &lt;code&gt;println!&lt;/code&gt; 요청 데이터를 인쇄하고이를 목록 20-3의 코드로 대체했습니다.</target>
        </trans-unit>
        <trans-unit id="121dc7dfe8e1f05a50f59cc42ea3919e004fbd87" translate="yes" xml:space="preserve">
          <source>The stdin handle to the child process, if any, will be closed before waiting. This helps avoid deadlock: it ensures that the child does not block waiting for input from the parent, while the parent waits for the child to exit.</source>
          <target state="translated">자식 프로세스에 대한 stdin 핸들 (있는 경우)은 대기하기 전에 닫힙니다. 교착 상태를 피하는 데 도움이됩니다. 즉, 부모가 자식의 종료를 기다리지 않고 자식이 부모의 입력을 기다리지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="9e925de820aa28eb2278cfb5b172897339fec44e" translate="yes" xml:space="preserve">
          <source>The stem is:</source>
          <target state="translated">줄기는 :</target>
        </trans-unit>
        <trans-unit id="29cd101b0d8222a260b75e7043b8f85140377fdb" translate="yes" xml:space="preserve">
          <source>The stream of &lt;code&gt;Match&lt;/code&gt; and &lt;code&gt;Reject&lt;/code&gt; values up to a &lt;code&gt;Done&lt;/code&gt; will contain index ranges that are adjacent, non-overlapping, covering the whole haystack, and laying on utf8 boundaries.</source>
          <target state="translated">&lt;code&gt;Done&lt;/code&gt; 까지 의 &lt;code&gt;Match&lt;/code&gt; 및 &lt;code&gt;Reject&lt;/code&gt; 값 스트림 에는 인접하고 겹치지 않으며 전체 건초 더미를 덮고 utf8 경계에있는 인덱스 범위가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fe598c8b995968505dc48317e5f0bc507dd1c32a" translate="yes" xml:space="preserve">
          <source>The stream typically has a fixed size, allowing seeking relative to either end or the current offset.</source>
          <target state="translated">스트림은 일반적으로 고정 된 크기를 가지므로 끝 또는 현재 오프셋을 기준으로 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f8a9a233edfd6e32f4b57b8721cdb5b1b1aca0a" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;s3&lt;/code&gt; will contain &lt;code&gt;Hello, world!&lt;/code&gt; as a result of this code. The reason &lt;code&gt;s1&lt;/code&gt; is no longer valid after the addition and the reason we used a reference to &lt;code&gt;s2&lt;/code&gt; has to do with the signature of the method that gets called when we use the &lt;code&gt;+&lt;/code&gt; operator. The &lt;code&gt;+&lt;/code&gt; operator uses the &lt;code&gt;add&lt;/code&gt; method, whose signature looks something like this:</source>
          <target state="translated">문자열 &lt;code&gt;s3&lt;/code&gt; 에는 &lt;code&gt;Hello, world!&lt;/code&gt; 가 포함됩니다 . 이 코드의 결과로. &lt;code&gt;s1&lt;/code&gt; 이유 는 더한 후에 더 이상 유효하지 않으며 &lt;code&gt;s2&lt;/code&gt; 에 대한 참조를 사용한 이유 는 &lt;code&gt;+&lt;/code&gt; 연산자를 사용할 때 호출되는 메소드의 서명과 관련이 있습니다. &lt;code&gt;+&lt;/code&gt; 의 연산자는 사용 &lt;code&gt;add&lt;/code&gt; 누구의 서명과 같은 형태 방법 :</target>
        </trans-unit>
        <trans-unit id="00f2d10e6fe0131d33ac9bca9a600be0160e329e" translate="yes" xml:space="preserve">
          <source>The string Pattern API.</source>
          <target state="translated">문자열 패턴 API</target>
        </trans-unit>
        <trans-unit id="12fed2044893f571a9f644790505d48a15787f1f" translate="yes" xml:space="preserve">
          <source>The string is expected to be an optional &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; sign followed by digits. Leading and trailing whitespace represent an error. Digits are a subset of these characters, depending on &lt;code&gt;radix&lt;/code&gt;:</source>
          <target state="translated">문자열은 선택적인 &lt;code&gt;+&lt;/code&gt; 또는 &lt;code&gt;-&lt;/code&gt; 부호와 숫자 가 있어야합니다 . 선행 및 후행 공백은 오류를 나타냅니다. &lt;code&gt;radix&lt;/code&gt; 는 기수 에 따라 이러한 문자의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="c23316acb8db6205270f951b08328de7cc2d92db" translate="yes" xml:space="preserve">
          <source>The string is expected to be an optional &lt;code&gt;+&lt;/code&gt; sign followed by digits. Leading and trailing whitespace represent an error. Digits are a subset of these characters, depending on &lt;code&gt;radix&lt;/code&gt;:</source>
          <target state="translated">문자열은 선택적인 &lt;code&gt;+&lt;/code&gt; 부호와 숫자 가 있어야합니다 . 선행 및 후행 공백은 오류를 나타냅니다. &lt;code&gt;radix&lt;/code&gt; 는 기수 에 따라 이러한 문자의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="468f8218bbd425a57c6d5b5fde91fdb78d951a69" translate="yes" xml:space="preserve">
          <source>The string on the right-hand side is only borrowed; its contents are copied into the returned &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">오른쪽의 줄은 빌려온 것입니다. 그 내용은 반환 된 &lt;code&gt;String&lt;/code&gt; 에 복사됩니다 .</target>
        </trans-unit>
        <trans-unit id="86da74512bec8006d79316da49e5b54d47ae707d" translate="yes" xml:space="preserve">
          <source>The string will be able to hold exactly &lt;code&gt;capacity&lt;/code&gt; length units of other OS strings without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the string will not allocate.</source>
          <target state="translated">문자열은 재할 당하지 않고 다른 OS 문자열의 &lt;code&gt;capacity&lt;/code&gt; 길이 단위를 정확하게 유지할 수 있습니다 . 경우 &lt;code&gt;capacity&lt;/code&gt; 0 인 문자열이 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b6f927907143ca3f662c21fec70de91f1f0df225" translate="yes" xml:space="preserve">
          <source>The struct &lt;code&gt;PointList&lt;/code&gt; cannot implement &lt;code&gt;Copy&lt;/code&gt;, because &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is not &lt;code&gt;Copy&lt;/code&gt;. If we attempt to derive a &lt;code&gt;Copy&lt;/code&gt; implementation, we'll get an error:</source>
          <target state="translated">&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;Copy&lt;/code&gt; 가 아니기 때문에 struct &lt;code&gt;PointList&lt;/code&gt; 가 &lt;code&gt;Copy&lt;/code&gt; 를 구현할 수 없습니다 . &lt;code&gt;Copy&lt;/code&gt; 구현 을 시도 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5c8326afa9ea5c7b5b28789d2c040dda354125af" translate="yes" xml:space="preserve">
          <source>The struct is marked &lt;code&gt;pub&lt;/code&gt; so that other code can use it, but the fields within the struct remain private. This is important in this case because we want to ensure that whenever a value is added or removed from the list, the average is also updated. We do this by implementing &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;average&lt;/code&gt; methods on the struct, as shown in Listing 17-2:</source>
          <target state="translated">구조체는 &lt;code&gt;pub&lt;/code&gt; 으로 표시되어 다른 코드에서 사용할 수 있지만 구조체 내의 필드는 비공개로 유지됩니다. 목록에서 값을 추가하거나 제거 할 때마다 평균도 업데이트되도록하려면이 경우 중요합니다. Listing 17-2와 같이 구조체에 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;average&lt;/code&gt; 메소드를 구현하여이를 수행한다 .</target>
        </trans-unit>
        <trans-unit id="a87dba90688420e84c6cfc3a67588b540866213a" translate="yes" xml:space="preserve">
          <source>The struct must only be &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt; if all the structural fields are &lt;code&gt;Unpin&lt;/code&gt;. This is the default, but &lt;code&gt;Unpin&lt;/code&gt; is a safe trait, so as the author of the struct it is your responsibility &lt;em&gt;not&lt;/em&gt; to add something like &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Struct&amp;lt;T&amp;gt;&lt;/code&gt;. (Notice that adding a projection operation requires unsafe code, so the fact that &lt;code&gt;Unpin&lt;/code&gt; is a safe trait does not break the principle that you only have to worry about any of this if you use &lt;code&gt;unsafe&lt;/code&gt;.)</source>
          <target state="translated">모든 구조 필드가 &lt;code&gt;Unpin&lt;/code&gt; &lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; &lt;/a&gt; 경우 구조체는 고정 해제 여야 합니다 . 이것이 기본값이지만 &lt;code&gt;Unpin&lt;/code&gt; 은 안전한 특성이므로 구조체의 작성자는 &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Struct&amp;lt;T&amp;gt;&lt;/code&gt; 와 같은 것을 추가 &lt;em&gt;하지 않는&lt;/em&gt; 것은 귀하의 책임 입니다. (주의 투사 작업을 추가하는 것은 안전하지 않은 코드를 필요로한다는 사실 때문에 &lt;code&gt;Unpin&lt;/code&gt; 당신이 사용하는 경우에만이의에 대해 걱정할 필요가 있다는 원칙을 파괴하지 않는 안전 특징이다 &lt;code&gt;unsafe&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="a32a0dfa31f0f0289e823ec593ac2d0e0186cb3f" translate="yes" xml:space="preserve">
          <source>The structure in the &lt;code&gt;vec!&lt;/code&gt; body is similar to the structure of a &lt;code&gt;match&lt;/code&gt; expression. Here we have one arm with the pattern &lt;code&gt;( $( $x:expr ),* )&lt;/code&gt;, followed by &lt;code&gt;=&amp;gt;&lt;/code&gt; and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.</source>
          <target state="translated">&lt;code&gt;vec!&lt;/code&gt; 의 구조 ! body는 &lt;code&gt;match&lt;/code&gt; 표현식 의 구조와 유사합니다 . 여기서 우리는 패턴이 하나의 아암 &lt;code&gt;( $( $x:expr ),* )&lt;/code&gt; 이어서, &lt;code&gt;=&amp;gt;&lt;/code&gt; 이 패턴과 연관된 코드 블록. 패턴이 일치하면 관련 코드 블록이 생성됩니다. 이것이이 매크로에서 유일한 패턴이라는 것을 감안할 때, 일치하는 유효한 방법은 하나뿐입니다. 다른 패턴은 오류가 발생합니다. 더 복잡한 매크로에는 둘 이상의 팔이 있습니다.</target>
        </trans-unit>
        <trans-unit id="feedd74875f823ef27b80e0ba6fe89baf9a484a0" translate="yes" xml:space="preserve">
          <source>The structure of your public API is a major consideration when publishing a crate. People who use your crate are less familiar with the structure than you are and might have difficulty finding the pieces they want to use if your crate has a large module hierarchy.</source>
          <target state="translated">크레이트를 게시 할 때 퍼블릭 API의 구조를 고려해야합니다. 상자를 사용하는 사람들은 사용자보다 구조에 익숙하지 않으며 상자에 모듈 계층이 큰 경우 사용하려는 조각을 찾기가 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bdec152aa7987052184ceacfeaf61672bfbc336" translate="yes" xml:space="preserve">
          <source>The subtraction assignment operator &lt;code&gt;-=&lt;/code&gt;.</source>
          <target state="translated">감산 대입 연산자 &lt;code&gt;-=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9df0e8a4e443e9ee7a165601e70a6b8ea73f8885" translate="yes" xml:space="preserve">
          <source>The subtraction operator &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">빼기 연산자 &lt;code&gt;-&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="28fd4d4d9eae938e322b4e3df0e6f419cbd1966d" translate="yes" xml:space="preserve">
          <source>The summary line displays at the end: overall, our test result is &lt;code&gt;FAILED&lt;/code&gt;. We had one test pass and one test fail.</source>
          <target state="translated">마지막 줄에 요약 행이 표시됩니다. 전체적으로 테스트 결과는 &lt;code&gt;FAILED&lt;/code&gt; 입니다. 한 번의 테스트 통과와 한 번의 테스트 실패가있었습니다.</target>
        </trans-unit>
        <trans-unit id="ee42b5387704f2d9fe3e70d6349076680fb579e8" translate="yes" xml:space="preserve">
          <source>The supplied key may be any borrowed form of the map's key type, but &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">제공된 키는지도의 주요 유형의 대출 형태가 될 수 있지만, &lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 빌린 양식이 &lt;em&gt;있어야합니다&lt;/em&gt; 키 유형과 일치.</target>
        </trans-unit>
        <trans-unit id="4d0db9da1f6030ddf936168ba198ea7e2ea2a8e7" translate="yes" xml:space="preserve">
          <source>The supplied key may be any borrowed form of the map's key type, but &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">제공된 키는지도의 주요 유형의 대출 형태가 될 수 있지만, &lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 빌린 양식이 &lt;em&gt;있어야합니다&lt;/em&gt; 키 유형과 일치.</target>
        </trans-unit>
        <trans-unit id="6157ddf403c8a4c61dced75b578898d85ccde0c2" translate="yes" xml:space="preserve">
          <source>The supplied key may be any borrowed form of the map's key type, but the ordering on the borrowed form &lt;em&gt;must&lt;/em&gt; match the ordering on the key type.</source>
          <target state="translated">제공된 키는지도 키 유형의 빌린 형태 일 수 있지만 빌린 양식 의 순서는 키 유형의 순서와 일치 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="9a3120ffbc7b98288aabd741823275a65245701a" translate="yes" xml:space="preserve">
          <source>The symbol &lt;code&gt;^C&lt;/code&gt; represents where you pressed ctrl-c . You may or may not see the word &lt;code&gt;again!&lt;/code&gt; printed after the &lt;code&gt;^C&lt;/code&gt;, depending on where the code was in the loop when it received the interrupt signal.</source>
          <target state="translated">&lt;code&gt;^C&lt;/code&gt; 기호 는 ctrl-c를 누른 위치를 나타냅니다. 단어를 &lt;code&gt;again!&lt;/code&gt; 보거나 보지 못할 수 있습니다 ! 인터럽트 신호를 수신했을 때 코드가 루프에있는 위치에 따라 &lt;code&gt;^C&lt;/code&gt; 뒤에 인쇄 됩니다.</target>
        </trans-unit>
        <trans-unit id="266a6ae6e0b1b671aa6c8cd7616208233ffe3a4b" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;..&lt;/code&gt; will expand to as many values as it needs to be. Listing 18-24 shows how to use &lt;code&gt;..&lt;/code&gt; with a tuple.</source>
          <target state="translated">구문 &lt;code&gt;..&lt;/code&gt; 은 필요한만큼 많은 값으로 확장됩니다. Listing 18-24는 &lt;code&gt;..&lt;/code&gt; 을 튜플과 함께 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="79fc3d3c405b115d38b7334d712d4081f0801fc2" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;if let&lt;/code&gt; takes a pattern and an expression separated by an equal sign. It works the same way as a &lt;code&gt;match&lt;/code&gt;, where the expression is given to the &lt;code&gt;match&lt;/code&gt; and the pattern is its first arm.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 구문 은 등호로 구분 된 패턴과 표현식을 사용합니다. &lt;code&gt;match&lt;/code&gt; 하는 식과 동일한 방식으로 작동합니다 . 여기서 식은 &lt;code&gt;match&lt;/code&gt; 되고 패턴은 첫 번째 팔입니다.</target>
        </trans-unit>
        <trans-unit id="751b24fbac99aa6572c9e1b012dbbe4901f9dd78" translate="yes" xml:space="preserve">
          <source>The syntax and semantics for generators is unstable and will require a further RFC for stabilization. At this time, though, the syntax is closure-like:</source>
          <target state="translated">생성기의 구문과 의미는 불안정하며 안정화를 위해 추가 RFC가 필요합니다. 그러나 현재 구문은 클로저와 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="f94369f4bb8ebdf54603588e1760be815601c761" translate="yes" xml:space="preserve">
          <source>The syntax for the formatting language used is drawn from other languages, so it should not be too alien. Arguments are formatted with Python-like syntax, meaning that arguments are surrounded by &lt;code&gt;{}&lt;/code&gt; instead of the C-like &lt;code&gt;%&lt;/code&gt;. The actual grammar for the formatting syntax is:</source>
          <target state="translated">사용 된 서식 언어의 구문은 다른 언어에서 파생되었으므로 너무 외계인이 아니어야합니다. 인수는 Python과 유사한 구문으로 형식이 지정됩니다. 즉, 인수는 C와 같은 &lt;code&gt;%&lt;/code&gt; 대신 &lt;code&gt;{}&lt;/code&gt; 로 둘러싸여 있습니다. 서식 구문의 실제 문법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b1fb2c0dcb9e4f22d10669f04073e3418ad44567" translate="yes" xml:space="preserve">
          <source>The syntax for using generics in struct definitions is similar to that used in function definitions. First, we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we can use the generic type in the struct definition where we would otherwise specify concrete data types.</source>
          <target state="translated">구조체 정의에서 제네릭을 사용하는 구문은 함수 정의에서 사용되는 구문과 유사합니다. 먼저 구조체 이름 바로 뒤에 꺾쇠 괄호 안에 type 매개 변수의 이름을 선언합니다. 그런 다음 구체적인 데이터 형식을 지정하는 구조체 정의에서 일반 형식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be667267584bb9b3dbb1d7d6c41e7cff90529baf" translate="yes" xml:space="preserve">
          <source>The syntax given to this macro is the same syntax as the &lt;a href=&quot;../reference/conditional-compilation#the-cfg-attribute&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">이 매크로에 제공된 구문은 &lt;a href=&quot;../reference/conditional-compilation#the-cfg-attribute&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; 속성 과 동일한 구문 입니다.</target>
        </trans-unit>
        <trans-unit id="4a5b87227107115d71da53fde65c7898c2f8a55f" translate="yes" xml:space="preserve">
          <source>The tail (elements in the vector after &lt;code&gt;range&lt;/code&gt;) is empty,</source>
          <target state="translated">꼬리 ( &lt;code&gt;range&lt;/code&gt; 후 벡터의 요소 )는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="018e9509238447c67e6197a11d4f5ea0ec53b22e" translate="yes" xml:space="preserve">
          <source>The tail expression of &lt;a href=&quot;expressions/block-expr&quot;&gt;block expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/block-expr&quot;&gt;블록 표현&lt;/a&gt; 의 꼬리 표현 .</target>
        </trans-unit>
        <trans-unit id="c615f1f00b080ca7312a1e8d344f8e1a91bfada3" translate="yes" xml:space="preserve">
          <source>The test shows that when we call &lt;code&gt;shoes_in_my_size&lt;/code&gt;, we get back only shoes that have the same size as the value we specified.</source>
          <target state="translated">테스트 결과 &lt;code&gt;shoes_in_my_size&lt;/code&gt; 를 호출하면 지정한 값과 동일한 크기의 신발 만 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="6d51660220a74ee89098ef8ef16d38d84170be2b" translate="yes" xml:space="preserve">
          <source>The text &lt;code&gt;Dropping CustomSmartPointer with data `some data`!&lt;/code&gt; is printed between the &lt;code&gt;CustomSmartPointer created.&lt;/code&gt; and &lt;code&gt;CustomSmartPointer dropped before the end of main.&lt;/code&gt; text, showing that the &lt;code&gt;drop&lt;/code&gt; method code is called to drop &lt;code&gt;c&lt;/code&gt; at that point.</source>
          <target state="translated">&lt;code&gt;Dropping CustomSmartPointer with data `some data`!&lt;/code&gt; 텍스트 ! &lt;code&gt;CustomSmartPointer created.&lt;/code&gt; 된 CustomSmartPointer 사이에 인쇄 됩니다. 및 &lt;code&gt;CustomSmartPointer dropped before the end of main.&lt;/code&gt; 텍스트는 것을 보여주는 &lt;code&gt;drop&lt;/code&gt; 방법 코드 드롭이라고 &lt;code&gt;c&lt;/code&gt; 그 시점에서.</target>
        </trans-unit>
        <trans-unit id="c9d885657469b7761a884865d71e05fd15d67a2e" translate="yes" xml:space="preserve">
          <source>The text of this string is stored directly in the program&amp;rsquo;s binary, which is always available. Therefore, the lifetime of all string literals is &lt;code&gt;'static&lt;/code&gt;.</source>
          <target state="translated">이 문자열의 텍스트는 프로그램 바이너리에 직접 저장되며 항상 사용 가능합니다. 따라서 모든 문자열 리터럴의 수명은 &lt;code&gt;'static&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f9782d2dad9c654fee52ed918f0366cbe2abfa6a" translate="yes" xml:space="preserve">
          <source>The third case is trickier: Rust will also coerce a mutable reference to an immutable one. But the reverse is &lt;em&gt;not&lt;/em&gt; possible: immutable references will never coerce to mutable references. Because of the borrowing rules, if you have a mutable reference, that mutable reference must be the only reference to that data (otherwise, the program wouldn&amp;rsquo;t compile). Converting one mutable reference to one immutable reference will never break the borrowing rules. Converting an immutable reference to a mutable reference would require that there is only one immutable reference to that data, and the borrowing rules don&amp;rsquo;t guarantee that. Therefore, Rust can&amp;rsquo;t make the assumption that converting an immutable reference to a mutable reference is possible.</source>
          <target state="translated">세 번째 경우는 더 까다 롭습니다. Rust는 변경 불가능한 참조에 대해 변경 가능한 참조를 강제합니다. 그러나 그 반대는 &lt;em&gt;불가능&lt;/em&gt; 합니다. 불변 참조는 절대 변경 불가능한 참조로 강제되지 않습니다. 차용 규칙으로 인해 변경 가능한 참조가있는 경우 해당 변경 가능한 참조는 해당 데이터에 대한 유일한 참조 여야합니다 (그렇지 않으면 프로그램이 컴파일되지 않음). 하나의 변경 가능한 참조를 하나의 변경 불가능한 참조로 변환해도 절대 차용 규칙을 위반하지 않습니다. 변경 불가능한 참조를 변경 가능한 참조로 변환하려면 해당 데이터에 대한 변경 불가능한 참조가 하나만 있어야하며 차용 규칙은이를 보증하지 않습니다. 따라서 Rust는 불변 참조를 변경 가능한 참조로 변환 할 수 있다고 가정 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="25bc1d6b7d2fd810584a49b63e54dae85fbc7654" translate="yes" xml:space="preserve">
          <source>The third invariant says that when we have a complex NT that can match two or more copies of the same thing with no separation in between, it must be permissible for them to be placed next to each other as per the first invariant. This invariant also requires they be nonempty, which eliminates a possible ambiguity.</source>
          <target state="translated">세 번째 불변은 우리가 분리하지 않고 같은 사물의 둘 이상의 사본과 일치 할 수있는 복잡한 NT를 가질 때, 첫 번째 불변에 따라 서로 옆에 위치하는 것이 허용되어야한다고 말합니다. 이 불변은 또한 비어 있지 않아야하므로 가능한 모호성을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="6858985d6a527c37bd8cd37f82674daea04d146f" translate="yes" xml:space="preserve">
          <source>The third pointer is a target-specific data pointer which is filled in with the specifics of the exception that occurred. For examples on Unix platforms this is a &lt;code&gt;*mut *mut T&lt;/code&gt; which is filled in by the compiler and on MSVC it's &lt;code&gt;*mut [usize; 2]&lt;/code&gt;. For more information see the compiler's source as well as std's catch implementation.</source>
          <target state="translated">세 번째 포인터는 발생한 예외의 세부 사항으로 채워지는 대상별 데이터 포인터입니다. 유닉스 플랫폼에 대한 예제는 &lt;code&gt;*mut *mut T&lt;/code&gt; 이며, 컴파일러에 의해 채워지고 MSVC에서는 &lt;code&gt;*mut [usize; 2]&lt;/code&gt; . 자세한 정보는 컴파일러의 소스와 std의 catch 구현을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="af84a0e541b5cb8aad0df743eb686112ab5e9865" translate="yes" xml:space="preserve">
          <source>The third problem is that we&amp;rsquo;ve used &lt;code&gt;expect&lt;/code&gt; to print an error message when reading the file fails, but the error message just prints &lt;code&gt;Something went wrong reading the file&lt;/code&gt;. Reading a file can fail in a number of ways: for example, the file could be missing, or we might not have permission to open it. Right now, regardless of the situation, we&amp;rsquo;d print the &lt;code&gt;Something went wrong reading the file&lt;/code&gt; error message, which wouldn&amp;rsquo;t give the user any information!</source>
          <target state="translated">세 번째 문제는 우리가 사용했던 것입니다 &lt;code&gt;expect&lt;/code&gt; 파일을 읽는 것은 실패 할 때 오류 메시지를 인쇄 할 수 있지만 오류 메시지가 바로 인쇄 &lt;code&gt;Something went wrong reading the file&lt;/code&gt; . 파일 읽기는 여러 가지 방법으로 실패 할 수 있습니다. 예를 들어 파일이 없거나 파일을 열 수있는 권한이 없을 수 있습니다. 현재 상황에 관계없이 &lt;code&gt;Something went wrong reading the file&lt;/code&gt; 오류 메시지를 읽는 데 오류가 발생하여 사용자에게 정보가 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f9f5c0bd316756e98b375cf7ab85326d6fd86b72" translate="yes" xml:space="preserve">
          <source>The third rule is if there are multiple input lifetime parameters, but one of them is &lt;code&gt;&amp;amp;self&lt;/code&gt; or &lt;code&gt;&amp;amp;mut self&lt;/code&gt; because this is a method, the lifetime of &lt;code&gt;self&lt;/code&gt; is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.</source>
          <target state="translated">세 번째 규칙은 여러 입력 수명 매개 변수가있는 경우 방법 중 하나 이기 때문에이 매개 변수 중 하나는 &lt;code&gt;&amp;amp;self&lt;/code&gt; 또는 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 이며, &lt;code&gt;self&lt;/code&gt; 수명은 모든 출력 수명 매개 변수에 지정됩니다. 이 세 번째 규칙은 더 적은 수의 기호가 필요하기 때문에 메소드를 읽고 쓰는 것이 훨씬 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c69636ef08912707db1c3ff91b55a817a8ac72a9" translate="yes" xml:space="preserve">
          <source>The thread may sleep longer than the duration specified due to scheduling specifics or platform-dependent functionality. It will never sleep less.</source>
          <target state="translated">스케줄링 세부 사항 또는 플랫폼 종속 기능으로 인해 스레드가 지정된 지속 시간보다 더 오래 휴면 상태 일 수 있습니다. 결코 잠들지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="cd58c0bda6dec6815740b7eed1b811cfbd96ccbb" translate="yes" xml:space="preserve">
          <source>The thread name is provided to the OS where applicable (e.g., &lt;code&gt;pthread_setname_np&lt;/code&gt; in unix-like platforms).</source>
          <target state="translated">해당하는 경우 스레드 이름이 OS에 제공됩니다 (예 : 유닉스 계열 플랫폼의 경우 &lt;code&gt;pthread_setname_np&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3218fca211a825167101461324b25d4344214224" translate="yes" xml:space="preserve">
          <source>The threading model</source>
          <target state="translated">스레딩 모델</target>
        </trans-unit>
        <trans-unit id="2518c4f037fbaea8573cb319d8682ea0e18ad153" translate="yes" xml:space="preserve">
          <source>The three forms of iteration</source>
          <target state="translated">세 가지 형태의 반복</target>
        </trans-unit>
        <trans-unit id="6e441e5631d84f73392a981b4df2ae8555997336" translate="yes" xml:space="preserve">
          <source>The three kinds of procedural macros (custom derive, attribute-like, and function-like) all work in a similar fashion.</source>
          <target state="translated">세 가지 종류의 절차 적 매크로 (사용자 지정 파생, 특성 유사 및 기능 유사)는 모두 비슷한 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="d7a7ac48a6db407723719df4ec95a88c69119a40" translate="yes" xml:space="preserve">
          <source>The three sections of output include the unit tests, the integration test, and the doc tests. The first section for the unit tests is the same as we&amp;rsquo;ve been seeing: one line for each unit test (one named &lt;code&gt;internal&lt;/code&gt; that we added in Listing 11-12) and then a summary line for the unit tests.</source>
          <target state="translated">세 가지 출력 섹션에는 단위 테스트, 통합 테스트 및 문서 테스트가 포함됩니다. 단위 테스트의 첫 번째 섹션 은 살펴본 것과 동일합니다. 각 단위 테스트에 대해 한 줄 ( 목록 11-12에서 추가 한 &lt;code&gt;internal&lt;/code&gt; 이라는 이름의 줄)과 단위 테스트에 대한 요약 줄입니다.</target>
        </trans-unit>
        <trans-unit id="6df380516e9cdddf51f2d5d2da6e443a2e517824" translate="yes" xml:space="preserve">
          <source>The time complexity degrades if elements are pushed in predominantly ascending order. In the worst case, elements are pushed in ascending sorted order and the amortized cost per push is O(log n) against a heap containing &lt;em&gt;n&lt;/em&gt; elements.</source>
          <target state="translated">요소가 주로 오름차순으로 푸시되면 시간 복잡성이 저하됩니다. 최악의 경우 요소는 오름차순으로 정렬되며 푸시 당 상각 비용은 &lt;em&gt;n 개의&lt;/em&gt; 요소가 포함 된 힙에 대해 O (log n) 입니다.</target>
        </trans-unit>
        <trans-unit id="7075cd0ebc9560a0210fd04b57fb94c1b2316eda" translate="yes" xml:space="preserve">
          <source>The tokens that can begin a type are, as of this writing, {&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;\*&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, lifetimes, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;::&lt;/code&gt;, any non-keyword identifier, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;Self&lt;/code&gt;, &lt;code&gt;extern&lt;/code&gt;, &lt;code&gt;crate&lt;/code&gt;, &lt;code&gt;$crate&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;impl&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;, &lt;code&gt;unsafe&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;dyn&lt;/code&gt;}, although this list may not be complete because people won't always remember to update the appendix when new ones are added.</source>
          <target state="translated">유형을 시작할 수있는 토큰은이 글을 쓰는 시점에서 { &lt;code&gt;(&lt;/code&gt; , &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;!&lt;/code&gt; , &lt;code&gt;\*&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; , &lt;code&gt;?&lt;/code&gt; , lifes, &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;::&lt;/code&gt; , 키워드가 아닌 식별자, &lt;code&gt;super&lt;/code&gt; , &lt;code&gt;self&lt;/code&gt; , &lt;code&gt;Self&lt;/code&gt; , &lt;code&gt;extern&lt;/code&gt; , &lt;code&gt;crate&lt;/code&gt; , &lt;code&gt;$crate&lt;/code&gt; , &lt;code&gt;_&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;impl&lt;/code&gt; , &lt;code&gt;fn&lt;/code&gt; , &lt;code&gt;unsafe&lt;/code&gt; , &lt;code&gt;typeof&lt;/code&gt; , &lt;code&gt;dyn&lt;/code&gt; } 새 목록이 추가 될 때 항상 부록을 업데이트하는 것을 기억하지 않기 때문에이 목록이 완전하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d918eb4366eadb0401bfe8b5fc6b1b9ce9e5b76" translate="yes" xml:space="preserve">
          <source>The top-level &lt;em&gt;Cargo.lock&lt;/em&gt; now contains information about the dependency of &lt;code&gt;add-one&lt;/code&gt; on &lt;code&gt;rand&lt;/code&gt;. However, even though &lt;code&gt;rand&lt;/code&gt; is used somewhere in the workspace, we can&amp;rsquo;t use it in other crates in the workspace unless we add &lt;code&gt;rand&lt;/code&gt; to their &lt;em&gt;Cargo.toml&lt;/em&gt; files as well. For example, if we add &lt;code&gt;use rand;&lt;/code&gt; to the &lt;em&gt;adder/src/main.rs&lt;/em&gt; file for the &lt;code&gt;adder&lt;/code&gt; crate, we&amp;rsquo;ll get an error:</source>
          <target state="translated">최상위 &lt;em&gt;Cargo.lock&lt;/em&gt; 에는 이제 &lt;code&gt;rand&lt;/code&gt; 에 대한 &lt;code&gt;add-one&lt;/code&gt; 의 종속성에 대한 정보가 포함 됩니다. 그러나 &lt;code&gt;rand&lt;/code&gt; 가 작업 공간 어딘가에 사용 되더라도 &lt;code&gt;rand&lt;/code&gt; 를 &lt;em&gt;Cargo.toml&lt;/em&gt; 파일에 랜드 를 추가하지 않으면 작업 공간의 다른 상자에서 사용할 수 없습니다 . 예를 들어 &lt;code&gt;use rand;&lt;/code&gt; 추가 하면; &lt;code&gt;adder&lt;/code&gt; 상자 의 &lt;em&gt;adder / src / main.rs&lt;/em&gt; 파일에 오류가 발생합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8c818e1dc9d477cbb1ce03a32e397d907f841e91" translate="yes" xml:space="preserve">
          <source>The total size of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;&lt;strong&gt;bytes&lt;/strong&gt; in memory. See the safety documentation of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;pointer::offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">슬라이스의 총 크기는 메모리의 &lt;code&gt;isize::MAX&lt;/code&gt; &lt;strong&gt;바이트&lt;/strong&gt; 보다 크지 않아야 합니다. &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;pointer::offset&lt;/code&gt; &lt;/a&gt; 의 안전 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4da1db74e1e609ac8cd961cdfb0fa46bfc3d2c9d" translate="yes" xml:space="preserve">
          <source>The trait also provides convenience methods like &lt;a href=&quot;#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt;, which calls &lt;code&gt;write&lt;/code&gt; in a loop until its entire input has been written.</source>
          <target state="translated">이 특성은 또한 전체 입력이 작성 될 때까지 루프에서 &lt;code&gt;write&lt;/code&gt; 를 호출하는 &lt;a href=&quot;#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt; 과 같은 편리한 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="ddef280ba8303b75d43b99adadcdec8f8b461c8f" translate="yes" xml:space="preserve">
          <source>The trait being implemented is defined in the same crate.</source>
          <target state="translated">구현되는 특성은 동일한 상자에서 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="fe160012593c71ba4d94a64501b55cb584b3c84d" translate="yes" xml:space="preserve">
          <source>The trait cannot contain associated constants</source>
          <target state="translated">특성은 연관된 상수를 포함 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="f49c4617e26c7a90e7ceb5715737675232c71e5c" translate="yes" xml:space="preserve">
          <source>The trait cannot require &lt;code&gt;Self: Sized&lt;/code&gt;</source>
          <target state="translated">특성은 &lt;code&gt;Self: Sized&lt;/code&gt; 요구할 수 없습니다 : 크기</target>
        </trans-unit>
        <trans-unit id="3bbcc07233474a5558580dca4726567afce0f2c1" translate="yes" xml:space="preserve">
          <source>The trait cannot use &lt;code&gt;Self&lt;/code&gt; as a type parameter in the supertrait listing</source>
          <target state="translated">특성은 상위 특성 목록에서 &lt;code&gt;Self&lt;/code&gt; 를 유형 매개 변수로 사용할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="6c46ccc8f602f9dc98f8190aa7e9cb78c7a8a015" translate="yes" xml:space="preserve">
          <source>The trait implemented by builtin generator types.</source>
          <target state="translated">내장 생성기 유형으로 구현 된 특성.</target>
        </trans-unit>
        <trans-unit id="0c6838569af8d3e59a65e8aec127e2d3a1e1e919" translate="yes" xml:space="preserve">
          <source>The trait is known as the &lt;em&gt;implemented trait&lt;/em&gt;. The implementing type implements the implemented trait.</source>
          <target state="translated">이 특성은 &lt;em&gt;구현 된 특성이라고&lt;/em&gt; 합니다. 구현 유형은 구현 된 특성을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="478884f7bada94b695fbee645bd59c060678235f" translate="yes" xml:space="preserve">
          <source>The trait is marked unsafe because the indices returned by the &lt;code&gt;next()&lt;/code&gt; methods are required to lie on valid utf8 boundaries in the haystack. This enables consumers of this trait to slice the haystack without additional runtime checks.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; 메소드가 리턴 한 색인 이 건초 더미에서 유효한 utf8 경계에 있어야 하기 때문에 특성이 안전하지 않은 것으로 표시 됩니다. 이를 통해이 특성의 소비자는 추가 런타임 검사없이 건초 더미를 슬라이스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d63a097c314f3198ade51464ed8a948cd1d46d3" translate="yes" xml:space="preserve">
          <source>The trait is marked unsafe in order to restrict implementors to fixed-size arrays. User of this trait can assume that implementors have the exact layout in memory of a fixed size array (for example, for unsafe initialization).</source>
          <target state="translated">특성을 고정 크기 배열로 제한하기 위해 특성이 안전하지 않은 것으로 표시됩니다. 이 특성의 사용자는 구현자가 고정 크기 배열의 메모리에 정확한 레이아웃이 있다고 가정 할 수 있습니다 (예 : 안전하지 않은 초기화).</target>
        </trans-unit>
        <trans-unit id="bf58bfdb142c3e3e2fca00b9412242993f764d14" translate="yes" xml:space="preserve">
          <source>The trait itself acts as a builder for an associated &lt;code&gt;Searcher&lt;/code&gt; type, which does the actual work of finding occurrences of the pattern in a string.</source>
          <target state="translated">특성 자체는 문자열에서 패턴의 발생을 찾는 실제 작업을 수행 하는 연관된 &lt;code&gt;Searcher&lt;/code&gt; 유형 의 빌더 역할을 합니다.</target>
        </trans-unit>
        <trans-unit id="4f44d782a6ca223ce6d84156fccfcf74f2f98110" translate="yes" xml:space="preserve">
          <source>The trait with a supertrait is called a &lt;strong&gt;subtrait&lt;/strong&gt; of its supertrait.</source>
          <target state="translated">초 특성이있는 특성을 초 특성의 &lt;strong&gt;하위&lt;/strong&gt; 특성이라고합니다 .</target>
        </trans-unit>
        <trans-unit id="d7357f4482763332c4dcdb5f743346a154d2e9c6" translate="yes" xml:space="preserve">
          <source>The traits in &lt;a href=&quot;../std/ops/index&quot;&gt;&lt;code&gt;std::ops&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/cmp/index&quot;&gt;&lt;code&gt;std::cmp&lt;/code&gt;&lt;/a&gt; are used to overload &lt;a href=&quot;expressions/operator-expr&quot;&gt;operators&lt;/a&gt;, &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;indexing expressions&lt;/a&gt; and &lt;a href=&quot;expressions/call-expr&quot;&gt;call expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../std/ops/index&quot;&gt; &lt;code&gt;std::ops&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../std/cmp/index&quot;&gt; &lt;code&gt;std::cmp&lt;/code&gt; &lt;/a&gt; 의 특성은 &lt;a href=&quot;expressions/operator-expr&quot;&gt;연산자&lt;/a&gt; , &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;인덱싱 표현식&lt;/a&gt; 및 &lt;a href=&quot;expressions/call-expr&quot;&gt;호출 표현식&lt;/a&gt; 을 오버로드하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f43292c5d9ba5055790b8cc673c3ce1d90efd4b3" translate="yes" xml:space="preserve">
          <source>The traits in this module are often used as trait bounds for generic functions such that to arguments of multiple types are supported. See the documentation of each trait for examples.</source>
          <target state="translated">이 모듈의 특성은 종종 여러 유형의 인수에 대한 지원이 가능하도록 일반 함수의 특성 경계로 사용됩니다. 예제는 각 특성의 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bbf2160d65d5756f9a6fd20c174d5b77d26006ee" translate="yes" xml:space="preserve">
          <source>The traits in this module provide a way to convert from one type to another type. Each trait serves a different purpose:</source>
          <target state="translated">이 모듈의 특성은 한 유형에서 다른 유형으로 변환하는 방법을 제공합니다. 각 특성은 다른 목적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="be87d5e421f146f48239b20f0b61521f853fc415" translate="yes" xml:space="preserve">
          <source>The transmitting end has a &lt;code&gt;send&lt;/code&gt; method that takes the value we want to send. The &lt;code&gt;send&lt;/code&gt; method returns a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type, so if the receiving end has already been dropped and there&amp;rsquo;s nowhere to send a value, the send operation will return an error. In this example, we&amp;rsquo;re calling &lt;code&gt;unwrap&lt;/code&gt; to panic in case of an error. But in a real application, we would handle it properly: return to Chapter 9 to review strategies for proper error handling.</source>
          <target state="translated">송신 측에는 송신 하고자하는 값을 취하는 &lt;code&gt;send&lt;/code&gt; 방법이 있습니다. &lt;code&gt;send&lt;/code&gt; 방법의 반환은 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 유형, 수신 측이 이미 삭제 된하고 값을 보낼 곳이 없다했다 그렇다면, 보내기 작업은 오류를 반환합니다. 이 예에서는 오류가 발생하면 &lt;code&gt;unwrap&lt;/code&gt; 을 패닉 상태로 호출 합니다. 그러나 실제 응용 프로그램에서는 제대로 처리합니다. 9 장으로 돌아가서 적절한 오류 처리 전략을 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="8b3273a21950fc06ce8b8962828961e34d0be457" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;gt;&lt;/code&gt; on their inner values.</source>
          <target state="translated">두 값은 내부 값에서 &lt;code&gt;&amp;gt;&lt;/code&gt; 를 호출하여 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="de2c6ddac182efa31cffea571db9b44146fe9838" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;gt;=&lt;/code&gt; on their inner values.</source>
          <target state="translated">두 값은 내부 값에서 &lt;code&gt;&amp;gt;=&lt;/code&gt; 를 호출하여 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c699eaaa968f03f7073bd19cfb4a4bc4c553e9a" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;lt;&lt;/code&gt; on their inner values.</source>
          <target state="translated">두 값은 내부 값에서 &lt;code&gt;&amp;lt;&lt;/code&gt; 를 호출하여 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="169dd7de97da6fed33fb4c7fffa1d0926634fd12" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;lt;=&lt;/code&gt; on their inner values.</source>
          <target state="translated">두 값은 내부 값에서 &lt;code&gt;&amp;lt;=&lt;/code&gt; 를 호출하여 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="4559f811138e10e2014d510114ff2517b250941f" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;cmp()&lt;/code&gt; on their inner values.</source>
          <target state="translated">두 값은 내부 값에서 &lt;code&gt;cmp()&lt;/code&gt; 를 호출하여 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="39163b76dc0823f8bfd4c0f4a8969c804a3f8075" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;partial_cmp()&lt;/code&gt; on their inner values.</source>
          <target state="translated">둘은 내부 값에서 &lt;code&gt;partial_cmp()&lt;/code&gt; 를 호출하여 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="a9f918beee4f5cf9d1253c5c05628d38cf96954a" translate="yes" xml:space="preserve">
          <source>The two configurations available are:</source>
          <target state="translated">사용 가능한 두 가지 구성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="450583e125671dcb6a167d6b29518dd2bf3867fb" translate="yes" xml:space="preserve">
          <source>The two kinds of declaration statements are item declarations and &lt;code&gt;let&lt;/code&gt; statements.</source>
          <target state="translated">두 가지 종류의 선언문은 항목 선언과 &lt;code&gt;let&lt;/code&gt; 문입니다.</target>
        </trans-unit>
        <trans-unit id="29e11129b6c15c504dcd359f5946098de2a818e8" translate="yes" xml:space="preserve">
          <source>The two main protocols involved in web servers are the &lt;em&gt;Hypertext Transfer Protocol&lt;/em&gt;&lt;em&gt;(HTTP)&lt;/em&gt; and the &lt;em&gt;Transmission Control Protocol&lt;/em&gt;&lt;em&gt;(TCP)&lt;/em&gt;. Both protocols are &lt;em&gt;request-response&lt;/em&gt; protocols, meaning a &lt;em&gt;client&lt;/em&gt; initiates requests and a &lt;em&gt;server&lt;/em&gt; listens to the requests and provides a response to the client. The contents of those requests and responses are defined by the protocols.</source>
          <target state="translated">웹 서버와 관련된 두 가지 주요 프로토콜은 &lt;em&gt;HTTP ( &lt;/em&gt;&lt;em&gt;Hypertext Transfer Protocol &lt;/em&gt;&lt;em&gt;)&lt;/em&gt; 와 &lt;em&gt;TCP ( &lt;/em&gt;&lt;em&gt;Transmission Control Protocol &lt;/em&gt;&lt;em&gt;)&lt;/em&gt; 입니다. 두 프로토콜 모두 &lt;em&gt;요청-응답&lt;/em&gt; 프로토콜입니다. 즉, &lt;em&gt;클라이언트&lt;/em&gt; 가 요청을 시작하고 &lt;em&gt;서버&lt;/em&gt; 가 요청을 수신하고 클라이언트에 응답을 제공합니다. 이러한 요청 및 응답의 내용은 프로토콜에 의해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="203df10027d062d490c4fbf35780fe4d1eed13fd" translate="yes" xml:space="preserve">
          <source>The two most common ways to evaluate an iterator are to use a &lt;code&gt;for&lt;/code&gt; loop like this, or using the &lt;a href=&quot;trait.iterator#method.collect&quot;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt; method to produce a new collection.</source>
          <target state="translated">반복자를 평가하는 가장 일반적인 두 가지 방법은 이와 같은 &lt;code&gt;for&lt;/code&gt; 루프 를 사용 하거나 &lt;a href=&quot;trait.iterator#method.collect&quot;&gt; &lt;code&gt;collect&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 새 콜렉션을 생성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f0616989ceb9af09d65c6d30395a15645c3fb4ed" translate="yes" xml:space="preserve">
          <source>The two new lines are:</source>
          <target state="translated">새로운 두 줄은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e483fee205c9c53971b14b5a333e04a44a6db99b" translate="yes" xml:space="preserve">
          <source>The two pointed-to values may overlap. If the values do overlap, then the overlapping region of memory from &lt;code&gt;x&lt;/code&gt; will be used. This is demonstrated in the second example below.</source>
          <target state="translated">두 개의 지정된 값이 겹칠 수 있습니다. 값이 겹치면 &lt;code&gt;x&lt;/code&gt; 에서 겹치는 메모리 영역 이 사용됩니다. 아래 두 번째 예에서 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7540e3538a7ee2b354c6ad5eceba51e063d25c18" translate="yes" xml:space="preserve">
          <source>The two slices returned go from the start of the string slice to &lt;code&gt;mid&lt;/code&gt;, and from &lt;code&gt;mid&lt;/code&gt; to the end of the string slice.</source>
          <target state="translated">두 조각에 문자열 조각의 시작부터 이동 반환 &lt;code&gt;mid&lt;/code&gt; , 그리고에서 &lt;code&gt;mid&lt;/code&gt; 문자열 조각의 끝.</target>
        </trans-unit>
        <trans-unit id="643186e43b6d06589052d125f62e5365b9c9a558" translate="yes" xml:space="preserve">
          <source>The two threads continue alternating, but the main thread waits because of the call to &lt;code&gt;handle.join()&lt;/code&gt; and does not end until the spawned thread is finished.</source>
          <target state="translated">두 스레드는 계속 교대로 나타나지만 기본 스레드는 &lt;code&gt;handle.join()&lt;/code&gt; 호출로 인해 대기 하며 생성 된 스레드가 완료 될 때까지 끝나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6005b5c0e8b9fae85cf0f2f496cddef96188c2e3" translate="yes" xml:space="preserve">
          <source>The two values of the boolean type are written &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">부울 유형의 두 값은 &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; 로 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="372e682a79086a952e254015d9198d707b3497b2" translate="yes" xml:space="preserve">
          <source>The type &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated in the heap. Invoking &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; produces a new pointer to the same value in the heap. When the last &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; pointer to a given value is destroyed, the pointed-to value is also destroyed.</source>
          <target state="translated">유형 &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 유형의 값의 소유권 공유 제공 &lt;code&gt;T&lt;/code&gt; 힙 할당을. &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; 에서&lt;/a&gt;&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt; 을 호출하면 힙에서 동일한 값에 대한 새로운 포인터가 생성됩니다. 주어진 값에 대한 마지막 &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt; 포인터가 파괴되면 지정된 값도 파괴됩니다.</target>
        </trans-unit>
        <trans-unit id="6e13391af6d4685735ce2468fa0b2df950149996" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated in the heap. Invoking &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Arc&lt;/code&gt; produces a new &lt;code&gt;Arc&lt;/code&gt; instance, which points to the same value on the heap as the source &lt;code&gt;Arc&lt;/code&gt;, while increasing a reference count. When the last &lt;code&gt;Arc&lt;/code&gt; pointer to a given value is destroyed, the pointed-to value is also destroyed.</source>
          <target state="translated">유형 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 유형의 값의 소유권 공유 제공 &lt;code&gt;T&lt;/code&gt; 힙 할당을. &lt;code&gt;Arc&lt;/code&gt; 에서&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt; 을 호출하면 새로운 &lt;code&gt;Arc&lt;/code&gt; 인스턴스가 생성 되는데,이 인스턴스는 힙에서 소스 &lt;code&gt;Arc&lt;/code&gt; 와 동일한 값을 가리키고 참조 횟수는 증가시킵니다. 주어진 값에 대한 마지막 &lt;code&gt;Arc&lt;/code&gt; 포인터가 파괴 될 때, 지정된 값 또한 파괴됩니다.</target>
        </trans-unit>
        <trans-unit id="c30f5ce28986d51c472e8b2cb793889a1cf9299e" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Cow&lt;/code&gt; is a smart pointer providing clone-on-write functionality: it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required. The type is designed to work with general borrowed data via the &lt;code&gt;Borrow&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Cow&lt;/code&gt; 유형 은 쓰기시 복제 기능을 제공하는 스마트 포인터입니다. 차용 된 데이터에 대한 변경 및 액세스를 제공하고 돌연변이 또는 소유권이 필요한 경우 데이터를 느리게 복제 할 수 있습니다. 이 유형은 &lt;code&gt;Borrow&lt;/code&gt; 특성을 통해 빌린 일반 데이터를 처리하도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="9f7d7514bdc86a24a5ff52dd05fe5c13a9b5c0e6" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Item&lt;/code&gt; is a placeholder type, and the &lt;code&gt;next&lt;/code&gt; method&amp;rsquo;s definition shows that it will return values of type &lt;code&gt;Option&amp;lt;Self::Item&amp;gt;&lt;/code&gt;. Implementors of the &lt;code&gt;Iterator&lt;/code&gt; trait will specify the concrete type for &lt;code&gt;Item&lt;/code&gt;, and the &lt;code&gt;next&lt;/code&gt; method will return an &lt;code&gt;Option&lt;/code&gt; containing a value of that concrete type.</source>
          <target state="translated">&lt;code&gt;Item&lt;/code&gt; 형식 은 자리 표시 자 형식이며 &lt;code&gt;next&lt;/code&gt; 메서드 정의에서는 &lt;code&gt;Option&amp;lt;Self::Item&amp;gt;&lt;/code&gt; 형식의 값을 반환한다는 것을 보여줍니다 . 의 구현 &lt;code&gt;Iterator&lt;/code&gt; 특성은 대한 구체적인 유형을 지정합니다 &lt;code&gt;Item&lt;/code&gt; 하고 &lt;code&gt;next&lt;/code&gt; 방법은 반환 &lt;code&gt;Option&lt;/code&gt; 이 구체적인 유형의 값을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="86f527297d32ae3d914332f31c2f8f0967b4e336" translate="yes" xml:space="preserve">
          <source>The type alias helps in two ways: it makes code easier to write &lt;em&gt;and&lt;/em&gt; it gives us a consistent interface across all of &lt;code&gt;std::io&lt;/code&gt;. Because it&amp;rsquo;s an alias, it&amp;rsquo;s just another &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, which means we can use any methods that work on &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; with it, as well as special syntax like the &lt;code&gt;?&lt;/code&gt; operator.</source>
          <target state="translated">이 쓰기에 코드를 쉽게 : 유형의 별명은 두 가지 방법으로 도움이 &lt;em&gt;및&lt;/em&gt; 그것은 우리 모두 일관된 인터페이스를 제공합니다 &lt;code&gt;std::io&lt;/code&gt; . 이 별칭이기 때문에, 그것은 또 다른의 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; , 우리가 어떤 방법을 사용할 수있는 수단이 그 일에 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 그뿐만 아니라 같은 특수 구문 &lt;code&gt;?&lt;/code&gt; 운영자.</target>
        </trans-unit>
        <trans-unit id="ea0e2aaa51d45e0a422d27f3c58e30936523ccce" translate="yes" xml:space="preserve">
          <source>The type annotation &lt;code&gt;HashMap&amp;lt;_, _&amp;gt;&lt;/code&gt; is needed here because it&amp;rsquo;s possible to &lt;code&gt;collect&lt;/code&gt; into many different data structures and Rust doesn&amp;rsquo;t know which you want unless you specify. For the parameters for the key and value types, however, we use underscores, and Rust can infer the types that the hash map contains based on the types of the data in the vectors.</source>
          <target state="translated">&lt;code&gt;HashMap&amp;lt;_, _&amp;gt;&lt;/code&gt; 타입 주석은 여기에 필요합니다. 많은 다른 데이터 구조 로 &lt;code&gt;collect&lt;/code&gt; 할 수 있고 Rust는 사용자가 지정하지 않으면 원하는 것을 알 수 없기 때문입니다. 그러나 키 및 값 유형에 대한 매개 변수의 경우 밑줄을 사용하며 Rust는 벡터의 데이터 유형에 따라 해시 맵에 포함 된 유형을 유추 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06a3cc90dfa59efcb3be0ad0da5e31c3b001a903" translate="yes" xml:space="preserve">
          <source>The type definition contains some field whose type requires an outlives annotation. Outlives annotations (e.g., &lt;code&gt;T: 'a&lt;/code&gt;) are used to guarantee that all the data in T is valid for at least the lifetime &lt;code&gt;'a&lt;/code&gt;. This scenario most commonly arises when the type contains an associated type reference like &lt;code&gt;&amp;lt;T as SomeTrait&amp;lt;'a&amp;gt;&amp;gt;::Output&lt;/code&gt;, as shown in this example:</source>
          <target state="translated">유형 정의에는 유형에 수명 주석이 필요한 일부 필드가 포함됩니다. 수명이 다한 주석 (예 &lt;code&gt;T: 'a&lt;/code&gt; )은 T의 모든 데이터가 적어도 수명 &lt;code&gt;'a&lt;/code&gt; 동안 유효하다는 것을 보장하는 데 사용됩니다 . 이 시나리오 는이 예에 표시된 것처럼 유형에 &lt;code&gt;&amp;lt;T as SomeTrait&amp;lt;'a&amp;gt;&amp;gt;::Output&lt;/code&gt; 과 같은 연관된 유형 참조가 포함 된 경우에 가장 일반적으로 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="9e9c0bf21d5e45e81b33f072a97367bb2e667f29" translate="yes" xml:space="preserve">
          <source>The type must have the &lt;code&gt;Sync&lt;/code&gt; trait bound to allow thread-safe access.</source>
          <target state="translated">스레드 안전 액세스를 허용 하려면 유형에 &lt;code&gt;Sync&lt;/code&gt; 특성이 바인딩되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="8abd0fc7da623f26ad9fecceeea94f5bfc1f633a" translate="yes" xml:space="preserve">
          <source>The type name used is not in scope.</source>
          <target state="translated">사용 된 유형 이름이 범위에 없습니다.</target>
        </trans-unit>
        <trans-unit id="89e2360bf1d9e23be29f6ad88e266a77e3f4f82f" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;guess&lt;/code&gt; in this code would have to be an integer &lt;em&gt;and&lt;/em&gt; a string, and Rust requires that &lt;code&gt;guess&lt;/code&gt; have only one type. So what does &lt;code&gt;continue&lt;/code&gt; return? How were we allowed to return a &lt;code&gt;u32&lt;/code&gt; from one arm and have another arm that ends with &lt;code&gt;continue&lt;/code&gt; in Listing 19-26?</source>
          <target state="translated">이 코드에서 &lt;code&gt;guess&lt;/code&gt; 유형은 정수 &lt;em&gt;와&lt;/em&gt; 문자열 이어야 하며 Rust는 &lt;code&gt;guess&lt;/code&gt; 한 유형 만 요구합니다 . 그래서 &lt;code&gt;continue&lt;/code&gt; 돌아 오는 것은 무엇 입니까? 우리는 어떻게 한 팔에서 &lt;code&gt;u32&lt;/code&gt; 를 반환하고 목록 19-26에서 &lt;code&gt;continue&lt;/code&gt; 끝나는 다른 팔을 가질 수 있었습니까?</target>
        </trans-unit>
        <trans-unit id="ae6cd25ffa500de06212f0c2207844d88b02a6be" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;s&lt;/code&gt; here is &lt;code&gt;&amp;amp;str&lt;/code&gt;: it&amp;rsquo;s a slice pointing to that specific point of the binary. This is also why string literals are immutable; &lt;code&gt;&amp;amp;str&lt;/code&gt; is an immutable reference.</source>
          <target state="translated">여기서 &lt;code&gt;s&lt;/code&gt; 의 유형 은 &lt;code&gt;&amp;amp;str&lt;/code&gt; 입니다. 바이너리의 특정 지점을 가리키는 슬라이스입니다. 이것이 바로 문자열 리터럴이 불변 인 이유이기도합니다. &lt;code&gt;&amp;amp;str&lt;/code&gt; 은 불변의 참조입니다.</target>
        </trans-unit>
        <trans-unit id="34ca2b2668ed637a52d925af5ee324f0385b2620" translate="yes" xml:space="preserve">
          <source>The type of a block is the type of the final expression, or &lt;code&gt;()&lt;/code&gt; if the final expression is omitted.</source>
          <target state="translated">블록의 유형은 최종 표현식의 유형이거나 최종 표현식이 생략 된 경우 &lt;code&gt;()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ed47b86a36c39f67b1e05de4464008d8a1956f2c" translate="yes" xml:space="preserve">
          <source>The type of an &lt;em&gt;unsuffixed&lt;/em&gt; floating-point literal is determined by type inference:</source>
          <target state="translated">의 유형 &lt;em&gt;unsuffixed&lt;/em&gt; 부동 소수점 리터럴 타입 추론에 의해 결정된다 :</target>
        </trans-unit>
        <trans-unit id="6114cd343a30b85f17666d6fd494268587f7b8ea" translate="yes" xml:space="preserve">
          <source>The type of an &lt;em&gt;unsuffixed&lt;/em&gt; integer literal is determined by type inference:</source>
          <target state="translated">&lt;em&gt;접미사가없는&lt;/em&gt; 정수 리터럴 의 유형은 유형 유추에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="f7d869126e3c264254879784374ee68ec03547b9" translate="yes" xml:space="preserve">
          <source>The type of the elements being iterated over.</source>
          <target state="translated">반복되는 요소의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="af8245e533db8494bb30cc9dc28768887bbb8570" translate="yes" xml:space="preserve">
          <source>The type of the value that &lt;code&gt;File::open&lt;/code&gt; returns inside the &lt;code&gt;Err&lt;/code&gt; variant is &lt;code&gt;io::Error&lt;/code&gt;, which is a struct provided by the standard library. This struct has a method &lt;code&gt;kind&lt;/code&gt; that we can call to get an &lt;code&gt;io::ErrorKind&lt;/code&gt; value. The enum &lt;code&gt;io::ErrorKind&lt;/code&gt; is provided by the standard library and has variants representing the different kinds of errors that might result from an &lt;code&gt;io&lt;/code&gt; operation. The variant we want to use is &lt;code&gt;ErrorKind::NotFound&lt;/code&gt;, which indicates the file we&amp;rsquo;re trying to open doesn&amp;rsquo;t exist yet. So we match on &lt;code&gt;f&lt;/code&gt;, but we also have an inner match on &lt;code&gt;error.kind()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;File::open&lt;/code&gt; 이 &lt;code&gt;Err&lt;/code&gt; 변형 내에서 반환 하는 값의 유형은 표준 라이브러리에서 제공하는 구조체 인 &lt;code&gt;io::Error&lt;/code&gt; 입니다. 이 구조체에는 &lt;code&gt;io::ErrorKind&lt;/code&gt; 값 을 얻기 위해 호출 할 수 있는 메서드 &lt;code&gt;kind&lt;/code&gt; 가 있습니다 . 열거 형 &lt;code&gt;io::ErrorKind&lt;/code&gt; 는 표준 라이브러리에서 제공하며 &lt;code&gt;io&lt;/code&gt; 작업으로 인해 발생할 수있는 다양한 종류의 오류를 나타내는 변형이 있습니다 . 우리가 사용하려는 변형은 &lt;code&gt;ErrorKind::NotFound&lt;/code&gt; 이며, 열려고하는 파일이 아직 존재하지 않음을 나타냅니다. 따라서 &lt;code&gt;f&lt;/code&gt; 에 일치 하지만 &lt;code&gt;error.kind()&lt;/code&gt; 에 대한 내부 일치도 있습니다.</target>
        </trans-unit>
        <trans-unit id="545510a669763ef63063641881497bf7dd3f481a" translate="yes" xml:space="preserve">
          <source>The type of this value when viewed as failed.</source>
          <target state="translated">실패한 것으로 볼 때이 값의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="8b60f120f0bca222851815dfc6ed07a4a0520575" translate="yes" xml:space="preserve">
          <source>The type of this value when viewed as successful.</source>
          <target state="translated">성공한 것으로 볼 때이 값의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="bf039a86046c9f49aceed05895007223ced0c5ff" translate="yes" xml:space="preserve">
          <source>The type of value produced on completion.</source>
          <target state="translated">완료시 생성되는 가치 유형입니다.</target>
        </trans-unit>
        <trans-unit id="16751927675b4a2fde8980932985c3b025559cb0" translate="yes" xml:space="preserve">
          <source>The type of value this generator returns.</source>
          <target state="translated">이 생성기가 반환하는 값의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="bf293514c386bb6e45033b7b50e4549a332b83ad" translate="yes" xml:space="preserve">
          <source>The type of value this generator returns. &lt;a href=&quot;../ops/trait.generator#associatedtype.Return&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 생성기가 반환하는 값의 유형입니다. &lt;a href=&quot;../ops/trait.generator#associatedtype.Return&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcbd5cd653d3daa61c5d5d30831f8972d04f844c" translate="yes" xml:space="preserve">
          <source>The type of value this generator returns. &lt;a href=&quot;ops/trait.generator#associatedtype.Return&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 생성기가 반환하는 값의 유형입니다. &lt;a href=&quot;ops/trait.generator#associatedtype.Return&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c5e0eda41ab22396cfa2f1334045d1746f855426" translate="yes" xml:space="preserve">
          <source>The type of value this generator yields.</source>
          <target state="translated">이 생성기가 산출하는 값의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="b8cb8237cc8b58247dbdfe05ac4618d5ded726d1" translate="yes" xml:space="preserve">
          <source>The type of value this generator yields. &lt;a href=&quot;../ops/trait.generator#associatedtype.Yield&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 생성기가 산출하는 값의 유형입니다. &lt;a href=&quot;../ops/trait.generator#associatedtype.Yield&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="becf5070fa5e52c8db7c1d497d6f97d2d8cc4f48" translate="yes" xml:space="preserve">
          <source>The type of value this generator yields. &lt;a href=&quot;ops/trait.generator#associatedtype.Yield&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 생성기가 산출하는 값의 유형입니다. &lt;a href=&quot;ops/trait.generator#associatedtype.Yield&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="586fe8d7efe2a1acc6c511b646a3a08c88efbb26" translate="yes" xml:space="preserve">
          <source>The type parameter &lt;code&gt;T&lt;/code&gt; represents the data that this lock protects. It is required that &lt;code&gt;T&lt;/code&gt; satisfies &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; to be shared across threads and &lt;a href=&quot;../marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; to allow concurrent access through readers. The RAII guards returned from the locking methods implement &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt; (and &lt;a href=&quot;../ops/trait.derefmut&quot;&gt;&lt;code&gt;DerefMut&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;write&lt;/code&gt; methods) to allow access to the content of the lock.</source>
          <target state="translated">유형 매개 변수 &lt;code&gt;T&lt;/code&gt; 는이 잠금이 보호하는 데이터를 나타냅니다. 필요가있다 &lt;code&gt;T&lt;/code&gt; 의 만족을 &lt;a href=&quot;../marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; 스레드와간에 공유 할 수 &lt;a href=&quot;../marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; 독자를 통해 동시 액세스를 허용 할 수 있습니다. 잠금 메소드에서 리턴 된 RAII 가드는 잠금 의 컨텐츠에 액세스 할 수 있도록 &lt;a href=&quot;../ops/trait.deref&quot;&gt; &lt;code&gt;Deref&lt;/code&gt; &lt;/a&gt; (및 &lt;code&gt;write&lt;/code&gt; 메소드의 경우 &lt;a href=&quot;../ops/trait.derefmut&quot;&gt; &lt;code&gt;DerefMut&lt;/code&gt; )&lt;/a&gt; 를 구현 합니다.</target>
        </trans-unit>
        <trans-unit id="f6f9ae50a3ab94a8cf9005786a7b9af006ffe517" translate="yes" xml:space="preserve">
          <source>The type parameters can also be explicitly supplied in a trailing &lt;a href=&quot;../paths&quot;&gt;path&lt;/a&gt; component after the function name. This might be necessary if there is not sufficient context to determine the type parameters. For example, &lt;code&gt;mem::size_of::&amp;lt;u32&amp;gt;() == 4&lt;/code&gt;.</source>
          <target state="translated">함수 이름 다음에 후행 &lt;a href=&quot;../paths&quot;&gt;경로&lt;/a&gt; 구성 요소 에 유형 매개 변수를 명시 적으로 제공 할 수도 있습니다 . 유형 매개 변수를 판별하기위한 컨텍스트가 충분하지 않은 경우에 필요할 수 있습니다. 예를 들어, &lt;code&gt;mem::size_of::&amp;lt;u32&amp;gt;() == 4&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="11d805f97c85ceb05a75d626e5740cb0e2204f44" translate="yes" xml:space="preserve">
          <source>The type returned by formatter methods.</source>
          <target state="translated">포맷터 메소드가 리턴 한 유형입니다.</target>
        </trans-unit>
        <trans-unit id="1c16d9adfa415d1c3d1e4550b932c426a82800c2" translate="yes" xml:space="preserve">
          <source>The type returned in the event of a conversion error.</source>
          <target state="translated">변환 오류가 발생하면 반환되는 형식입니다.</target>
        </trans-unit>
        <trans-unit id="6b611879bfea657d3652c629b736393c4b650211" translate="yes" xml:space="preserve">
          <source>The type you are trying to impl &lt;code&gt;CoerceUnsized&lt;/code&gt; for is not a struct. &lt;code&gt;CoerceUnsized&lt;/code&gt; can only be implemented for a struct. Unsized types are already able to be coerced without an implementation of &lt;code&gt;CoerceUnsized&lt;/code&gt; whereas a struct containing an unsized type needs to know the unsized type field it's containing is able to be coerced. An &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;unsized type&lt;/a&gt; is any type that the compiler doesn't know the length or alignment of at compile time. Any struct containing an unsized type is also unsized.</source>
          <target state="translated">&lt;code&gt;CoerceUnsized&lt;/code&gt; 에 영향 을 주려는 유형 은 구조체가 아닙니다. &lt;code&gt;CoerceUnsized&lt;/code&gt; 는 구조체에 대해서만 구현할 수 있습니다. 크기가 조정되지 않은 유형은 &lt;code&gt;CoerceUnsized&lt;/code&gt; 를 구현하지 않고도 이미 강제 변환 할 수 있지만 크기가 조정되지 않은 유형을 포함하는 구조체는 포함 된 크기가 조정되지 않은 유형 필드를 강제 변환 할 수 있어야합니다. &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;크기를 지정하지 않은 타입은&lt;/a&gt; 컴파일러가 컴파일시에 길이 또는 정렬을 알고하지 않습니다 어떤 유형입니다. 크기가 조정되지 않은 유형을 포함하는 모든 구조체도 크기가 조정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="63c27305b7150da660772855aa4571d697d89b10" translate="yes" xml:space="preserve">
          <source>The type you can compare with is controlled by &lt;code&gt;PartialEq&lt;/code&gt;'s type parameter. For example, let's tweak our previous code a bit:</source>
          <target state="translated">비교할 수있는 유형은 &lt;code&gt;PartialEq&lt;/code&gt; 의 유형 매개 변수에 의해 제어됩니다 . 예를 들어, 이전 코드를 약간 조정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="93ef2caad28212460c75d9146f8dc4d0899b2d98" translate="yes" xml:space="preserve">
          <source>The type-checker needed to know the type of an expression, but that type had not yet been inferred.</source>
          <target state="translated">형식 검사기는 식의 형식을 알아야하지만 해당 형식은 아직 유추되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="f584bedf990c038f22247101ab8b097fb3a593e8" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;*const T&lt;/code&gt;, &lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;Option&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; all have the same size. If &lt;code&gt;T&lt;/code&gt; is Sized, all of those types have the same size as &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">유형은 &lt;code&gt;*const T&lt;/code&gt; , &lt;code&gt;&amp;amp;T&lt;/code&gt; , &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; , &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; 및 &lt;code&gt;Option&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 모두 동일한 크기를 갖는다. 경우 &lt;code&gt;T&lt;/code&gt; 가 있는 크기, 그 종류는 모두 같은 크기가 &lt;code&gt;usize&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="5722d857751fd92f7cd76388f248410597abc535" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; hold textual data.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 및 &lt;code&gt;str&lt;/code&gt; 유형 은 텍스트 데이터를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="ff52a3715390889940af516c60b08b678feeadf3" translate="yes" xml:space="preserve">
          <source>The types of any associated constants in a trait implementation must match the types in the trait definition. This error indicates that there was a mismatch.</source>
          <target state="translated">특성 구현에서 연관된 상수의 유형은 특성 정의의 유형과 일치해야합니다. 이 오류는 불일치가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2a9653c2b160c32821b432c07707efaa597921f1" translate="yes" xml:space="preserve">
          <source>The typical way to obtain a &lt;code&gt;Weak&lt;/code&gt; pointer is to call &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt;&lt;code&gt;Arc::downgrade&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Weak&lt;/code&gt; 포인터 를 얻는 일반적인 방법 은 &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt; &lt;code&gt;Arc::downgrade&lt;/code&gt; &lt;/a&gt; 를 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="d7670bf148a2a36a6287e0959f849df36450aeea" translate="yes" xml:space="preserve">
          <source>The typical way to obtain a &lt;code&gt;Weak&lt;/code&gt; pointer is to call &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt;&lt;code&gt;Rc::downgrade&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Weak&lt;/code&gt; 포인터 를 얻는 일반적인 방법 은 &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt; &lt;code&gt;Rc::downgrade&lt;/code&gt; &lt;/a&gt; 를 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e38264f429668f9c24babca8440ad652db0e6325" translate="yes" xml:space="preserve">
          <source>The unary logical negation operator &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">단항 논리 부정 연산자 &lt;code&gt;!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6144b29ea1cdce68ecac471463a0fdc0639b34f9" translate="yes" xml:space="preserve">
          <source>The unary negation operator &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">단항 부정 연산자 &lt;code&gt;-&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7181a66c31dbb848d4da8d3e96055db8ae78d130" translate="yes" xml:space="preserve">
          <source>The underlying &lt;a href=&quot;struct.metadata&quot;&gt;&lt;code&gt;Metadata&lt;/code&gt;&lt;/a&gt; struct needs to be retrieved with the &lt;a href=&quot;fn.symlink_metadata&quot;&gt;&lt;code&gt;fs::symlink_metadata&lt;/code&gt;&lt;/a&gt; function and not the &lt;a href=&quot;fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; function. The &lt;a href=&quot;fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; function follows symbolic links, so &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt;&lt;code&gt;is_symlink&lt;/code&gt;&lt;/a&gt; would always return &lt;code&gt;false&lt;/code&gt; for the target file.</source>
          <target state="translated">기본 &lt;a href=&quot;struct.metadata&quot;&gt; &lt;code&gt;Metadata&lt;/code&gt; &lt;/a&gt; 구조체 는 &lt;a href=&quot;fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt; 함수가 아니라 &lt;a href=&quot;fn.symlink_metadata&quot;&gt; &lt;code&gt;fs::symlink_metadata&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 검색해야 합니다. &lt;a href=&quot;fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt; 있도록 기능은 심볼릭 링크를 다음과 &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt; &lt;code&gt;is_symlink&lt;/code&gt; 이&lt;/a&gt; 항상 반환 &lt;code&gt;false&lt;/code&gt; 대상 파일.</target>
        </trans-unit>
        <trans-unit id="485a92064bc4fcb63908fa7e1b3b1ad970b9f88b" translate="yes" xml:space="preserve">
          <source>The underlying &lt;code&gt;RefCell&lt;/code&gt; will remain mutably borrowed until both returned &lt;code&gt;RefMut&lt;/code&gt;s go out of scope.</source>
          <target state="translated">기본 &lt;code&gt;RefCell&lt;/code&gt; 은 반환 된 &lt;code&gt;RefMut&lt;/code&gt; 이 범위를 벗어날 때까지 변경없이 빌린 상태로 유지 됩니다.</target>
        </trans-unit>
        <trans-unit id="9efa2c9dbfc51e4660e725c77fd7efb185f3f6ff" translate="yes" xml:space="preserve">
          <source>The underlying value can be retrieved through the &lt;code&gt;.0&lt;/code&gt; index of the &lt;code&gt;Wrapping&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;code&gt;Wrapping&lt;/code&gt; 튜플 의 &lt;code&gt;.0&lt;/code&gt; 인덱스를 통해 기본 값을 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1be4ec15824529c7ce6527861e8c2980ac38212f" translate="yes" xml:space="preserve">
          <source>The unique, unnameable symbols are created after macro expansion so that macros may safely emit multiple references to &lt;code&gt;_&lt;/code&gt; imports. For example, the following should not produce an error:</source>
          <target state="translated">매크로가 확장 된 후 고유하고 이름이 지정되지 않은 기호가 만들어 지므로 매크로가 &lt;code&gt;_&lt;/code&gt; imports에 대한 여러 참조를 안전하게 방출 할 수 있습니다 . 예를 들어, 다음은 오류가 발생하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="f4f440ca9518cd96f0fe9c31f85a61d77e18e0f3" translate="yes" xml:space="preserve">
          <source>The unsafe counterpart of this macro is the &lt;a href=&quot;hint/fn.unreachable_unchecked&quot;&gt;&lt;code&gt;unreachable_unchecked&lt;/code&gt;&lt;/a&gt; function, which will cause undefined behavior if the code is reached.</source>
          <target state="translated">이 매크로의 안전하지 않은 부분은 &lt;a href=&quot;hint/fn.unreachable_unchecked&quot;&gt; &lt;code&gt;unreachable_unchecked&lt;/code&gt; &lt;/a&gt; 함수이며, 코드에 도달하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c1a83814a7bcbd2091dc90767bec8f24c5d3f1e3" translate="yes" xml:space="preserve">
          <source>The unsigned integer types consist of:</source>
          <target state="translated">부호없는 정수 유형은 다음으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="2d2ce136339d709e77fd2d67b03ff1b69af40d44" translate="yes" xml:space="preserve">
          <source>The upper bound of the range (exclusive).</source>
          <target state="translated">범위의 상한입니다 (제외).</target>
        </trans-unit>
        <trans-unit id="20d82b105410f2577709f06e6539062262a0ca81" translate="yes" xml:space="preserve">
          <source>The upper bound of the range (inclusive)</source>
          <target state="translated">범위의 상한 (포함)</target>
        </trans-unit>
        <trans-unit id="39cef1794b05feb8ec892ea4cd89efe908da35c8" translate="yes" xml:space="preserve">
          <source>The user could always interrupt the program by using the keyboard shortcut ctrl-c. But there&amp;rsquo;s another way to escape this insatiable monster, as mentioned in the &lt;code&gt;parse&lt;/code&gt; discussion in &lt;a href=&quot;#comparing-the-guess-to-the-secret-number&quot;&gt;&amp;ldquo;Comparing the Guess to the Secret Number&amp;rdquo;&lt;/a&gt;: if the user enters a non-number answer, the program will crash. The user can take advantage of that in order to quit, as shown here:</source>
          <target state="translated">사용자는 키보드 단축키 ctrl-c를 사용하여 항상 프로그램을 중단 할 수 있습니다. 에서 언급하지만,이 탐욕스러운 괴물을 탈출하는 또 다른 방법이 &lt;code&gt;parse&lt;/code&gt; 에 대한 논의 &lt;a href=&quot;#comparing-the-guess-to-the-secret-number&quot;&gt;&quot;비밀 번호에 맞춰 비교&quot;&lt;/a&gt; : 사용자가 아닌 숫자의 답을 입력하면, 프로그램이 충돌합니다. 사용자는 다음과 같이 종료하기 위해이를 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e62c088fdd6cf7f93babb9263d9008d71eaadccf" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to perform &lt;code&gt;metadata&lt;/code&gt; call on &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">사용자에게 &lt;code&gt;path&lt;/code&gt; 에 대한 &lt;code&gt;metadata&lt;/code&gt; 호출 을 수행 할 권한이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0dc65bb53b7876e2a52ec0de6c50b31a471724ba" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to remove the directory at the provided &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">제공된 &lt;code&gt;path&lt;/code&gt; 에서 디렉토리를 제거 할 권한이 사용자에게 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4ed8999bb1ca133f6f343fbba9eb07d31db22560" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to remove the file.</source>
          <target state="translated">사용자에게 파일을 제거 할 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="da243dceea5f741ec03e2474a95470f701358e02" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to view contents.</source>
          <target state="translated">사용자에게 내용을 볼 수있는 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a0ceecf91cf3de088e4866146d667401fc9825c7" translate="yes" xml:space="preserve">
          <source>The user lacks the permission to change attributes of the file.</source>
          <target state="translated">사용자에게 파일 속성을 변경할 수있는 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="9ef61ff6808c20e3aee33111c7be00b7f9eb3ce9" translate="yes" xml:space="preserve">
          <source>The value being coerced is the actual parameter, and it is coerced to the type of the formal parameter.</source>
          <target state="translated">강제되는 값은 실제 매개 변수이며 공식 매개 변수의 유형으로 강제됩니다.</target>
        </trans-unit>
        <trans-unit id="3a5a7553814237ff25467a69b929b269b579c5c7" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;push&lt;/code&gt; is an expected cost; the method documentation gives a more detailed analysis.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 의 가치 는 예상 비용입니다. 분석법 문서는보다 자세한 분석을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d7971e26c81d228c6b498e7c0267b27f63e3a2f0" translate="yes" xml:space="preserve">
          <source>The value for the width can also be provided as a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt; in the list of parameters by using the dollar syntax indicating that the second argument is a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt; specifying the width, for example:</source>
          <target state="translated">너비 값 은 두 번째 인수가 너비를 지정 하는 &lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt; 임을 나타내는 달러 구문을 사용하여 매개 변수 목록에서 &lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt; 로 제공 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a708656013343fb0ab99fafd8d21e4229d39b962" translate="yes" xml:space="preserve">
          <source>The value may be any borrowed form of the set's value type, but &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the value type.</source>
          <target state="translated">값은 세트의 값 유형의 대출 형태가 될 수 있지만, &lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 빌린 양식이 &lt;em&gt;있어야합니다&lt;/em&gt; 값 유형에 대한 일치.</target>
        </trans-unit>
        <trans-unit id="6f10fa6eb368dac898013f2276c185e31dd968d4" translate="yes" xml:space="preserve">
          <source>The value may be any borrowed form of the set's value type, but &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the value type.</source>
          <target state="translated">값은 세트의 값 유형의 대출 형태가 될 수 있지만, &lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 빌린 양식이 &lt;em&gt;있어야합니다&lt;/em&gt; 값 유형에 대한 일치.</target>
        </trans-unit>
        <trans-unit id="cc1bf7113b6ffebee8a5cbda9953ce0f46aa8389" translate="yes" xml:space="preserve">
          <source>The value may be any borrowed form of the set's value type, but the ordering on the borrowed form &lt;em&gt;must&lt;/em&gt; match the ordering on the value type.</source>
          <target state="translated">값은 세트 값 유형의 빌린 형식 일 수 있지만 빌린 양식 의 순서는 값 유형의 순서와 일치 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5386004ae808f6aad83668aa6e791c4916959b45" translate="yes" xml:space="preserve">
          <source>The value must not be zero.</source>
          <target state="translated">값은 0이 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="fe1619fc66fbf6e80510234756b7616df221cbcc" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;N&lt;/code&gt; that was specified for &lt;code&gt;repr(align(N))&lt;/code&gt; was not a power of two, or was greater than 2^29.</source>
          <target state="translated">&lt;code&gt;repr(align(N))&lt;/code&gt; 에 지정된 &lt;code&gt;N&lt;/code&gt; 값이 2의 거듭 제곱이 아니거나 2 ^ 29보다 큽니다.</target>
        </trans-unit>
        <trans-unit id="744a6000b03885b8f256f7629c96527779c5f909" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;upper_i&lt;/code&gt; here relies on the language of the text: if we're in &lt;code&gt;en-US&lt;/code&gt;, it should be &lt;code&gt;&quot;I&quot;&lt;/code&gt;, but if we're in &lt;code&gt;tr_TR&lt;/code&gt;, it should be &lt;code&gt;&quot;İ&quot;&lt;/code&gt;. &lt;code&gt;to_uppercase()&lt;/code&gt; does not take this into account, and so:</source>
          <target state="translated">&lt;code&gt;upper_i&lt;/code&gt; 의 값은 텍스트 언어에 의존합니다. &lt;code&gt;en-US&lt;/code&gt; 인 경우 &lt;code&gt;&quot;I&quot;&lt;/code&gt; 이어야 하지만 &lt;code&gt;tr_TR&lt;/code&gt; 인 경우 &lt;code&gt;&quot;İ&quot;&lt;/code&gt; 이어야합니다 . &lt;code&gt;to_uppercase()&lt;/code&gt; 는 이것을 고려하지 않으므로 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b739d6552c67cec966b03a294f348b71a38926c7" translate="yes" xml:space="preserve">
          <source>The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time. Erroneous code example:</source>
          <target state="translated">정적 및 상수의 값은 컴파일 타임에 알고 있어야하며 프로그램의 전체 수명 동안 지속됩니다. 박스형 값을 작성하면 런타임시 힙에 메모리가 할당되므로 컴파일시 수행 할 수 없습니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="39c061cf746d3ba8e95a5a5598de09efb58fb7b8" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;s&lt;/code&gt; has type &lt;code&gt;String&lt;/code&gt;, and its use in the guard is as a variable of type &lt;code&gt;String&lt;/code&gt;. The guard code effectively executes in a separate scope to the body of the arm, so the value would be moved into this anonymous scope and therefore becomes unavailable in the body of the arm.</source>
          <target state="translated">변수 &lt;code&gt;s&lt;/code&gt; 에는 &lt;code&gt;String&lt;/code&gt; 유형 이 있으며 Guard에서 사용되는 것은 &lt;code&gt;String&lt;/code&gt; 유형의 변수입니다 . 보호 코드는 팔의 몸체에 대해 별도의 범위에서 효과적으로 실행되므로 값이이 익명 범위로 이동되어 팔의 몸체에서 사용할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="8e557a8691f00e33607a16e96773df5a29940a13" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;s&lt;/code&gt; refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it&amp;rsquo;s declared until the end of the current &lt;em&gt;scope&lt;/em&gt;. Listing 4-1 has comments annotating where the variable &lt;code&gt;s&lt;/code&gt; is valid.</source>
          <target state="translated">변수 &lt;code&gt;s&lt;/code&gt; 는 문자열 리터럴을 나타내며, 여기서 문자열 값은 프로그램의 텍스트에 하드 코딩됩니다. 변수는 선언 된 시점부터 현재 &lt;em&gt;범위&lt;/em&gt; 끝까지 유효합니다 . 목록 4-1에는 변수 &lt;code&gt;s&lt;/code&gt; 가 유효한 위치에 주석 이 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e699bc2ac5d00c87b2c7f3b8e3a9da4a553a5d0" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;tup&lt;/code&gt; binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:</source>
          <target state="translated">튜플은 단일 복합 요소로 간주되므로 변수 &lt;code&gt;tup&lt;/code&gt; 은 전체 튜플에 바인딩됩니다. 튜플에서 개별 값을 가져 오려면 다음과 같이 패턴 일치를 사용하여 튜플 값을 구성 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b81aa2b0402a0e499f7595712bef15edfd23e380" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;x&lt;/code&gt; doesn&amp;rsquo;t &amp;ldquo;live long enough.&amp;rdquo; The reason is that &lt;code&gt;x&lt;/code&gt; will be out of scope when the inner scope ends on line 7. But &lt;code&gt;r&lt;/code&gt; is still valid for the outer scope; because its scope is larger, we say that it &amp;ldquo;lives longer.&amp;rdquo; If Rust allowed this code to work, &lt;code&gt;r&lt;/code&gt; would be referencing memory that was deallocated when &lt;code&gt;x&lt;/code&gt; went out of scope, and anything we tried to do with &lt;code&gt;r&lt;/code&gt; wouldn&amp;rsquo;t work correctly. So how does Rust determine that this code is invalid? It uses a borrow checker.</source>
          <target state="translated">변수 &lt;code&gt;x&lt;/code&gt; 는 &quot;충분히 오래 살지&quot;않습니다. 그 이유는 내부 범위가 라인 7에서 끝날 때 &lt;code&gt;x&lt;/code&gt; 가 범위를 벗어나기 때문입니다 . 그러나 &lt;code&gt;r&lt;/code&gt; 은 여전히 ​​외부 범위에 유효합니다. 그 범위가 더 넓기 때문에&amp;ldquo;더 오래 산다&amp;rdquo;고 말합니다. 녹 작업이 코드를 사용할 경우, &lt;code&gt;r&lt;/code&gt; 은 때 해제 된 메모리를 참조 할 것 &lt;code&gt;x&lt;/code&gt; 가 범위를 벗어나 갔다, 그리고 우리가하려고 노력 아무것도 &lt;code&gt;r&lt;/code&gt; 은 제대로 작동하지 않을 것입니다. 그렇다면 Rust는이 코드가 유효하지 않다고 어떻게 판단합니까? 빌리 체커를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b4588e360f79d1cb0e5f79f31bf6e7bc2ece8336" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;x&lt;/code&gt; holds an &lt;code&gt;i32&lt;/code&gt; value, &lt;code&gt;5&lt;/code&gt;. We set &lt;code&gt;y&lt;/code&gt; equal to a reference to &lt;code&gt;x&lt;/code&gt;. We can assert that &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;5&lt;/code&gt;. However, if we want to make an assertion about the value in &lt;code&gt;y&lt;/code&gt;, we have to use &lt;code&gt;*y&lt;/code&gt; to follow the reference to the value it&amp;rsquo;s pointing to (hence &lt;em&gt;dereference&lt;/em&gt;). Once we dereference &lt;code&gt;y&lt;/code&gt;, we have access to the integer value &lt;code&gt;y&lt;/code&gt; is pointing to that we can compare with &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">변수 &lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;i32&lt;/code&gt; 값 &lt;code&gt;5&lt;/code&gt; 를 보유합니다 . &lt;code&gt;y&lt;/code&gt; 를 &lt;code&gt;x&lt;/code&gt; 에 대한 참조 와 동일하게 설정 합니다. &lt;code&gt;x&lt;/code&gt; 가 &lt;code&gt;5&lt;/code&gt; 와 같다고 주장 할 수 있습니다 . 그러나 &lt;code&gt;y&lt;/code&gt; 의 값에 대한 어설 션을 만들려면 &lt;code&gt;*y&lt;/code&gt; 를 사용 하여 가리키는 값에 대한 참조를 따라야합니다 (따라서 &lt;em&gt;dereference&lt;/em&gt; ). &lt;code&gt;y&lt;/code&gt; 를 역 참조 하면 정수 값 &lt;code&gt;y&lt;/code&gt; 에 액세스 할 수 있습니다 . y 는 &lt;code&gt;5&lt;/code&gt; 와 비교할 수 있음을 나타 냅니다.</target>
        </trans-unit>
        <trans-unit id="f517012aa2f18b099c9314a6c9154f5976be9a45" translate="yes" xml:space="preserve">
          <source>The variance of other &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt; and tuple types is decided by looking at the variance of the types of their fields. If the parameter is used in positions with different variances then the parameter is invariant. For example the following struct is covariant in &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; and invariant in &lt;code&gt;'b&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="translated">다른 &lt;code&gt;struct&lt;/code&gt; , &lt;code&gt;enum&lt;/code&gt; , &lt;code&gt;union&lt;/code&gt; 및 튜플 유형의 분산은 해당 필드 유형의 분산을보고 결정됩니다. 변수가 분산이 다른 위치에서 사용되면 변수가 변하지 않습니다. 예를 들어 다음 구조체는 &lt;code&gt;'a&lt;/code&gt; 및 &lt;code&gt;T&lt;/code&gt; 에서 공변량 이고 &lt;code&gt;'b&lt;/code&gt; 및 &lt;code&gt;U&lt;/code&gt; 에서 불변량입니다 .</target>
        </trans-unit>
        <trans-unit id="a2a9da86bd97667912e395039b2e850ba36a8d1a" translate="yes" xml:space="preserve">
          <source>The vector will be able to hold exactly &lt;code&gt;capacity&lt;/code&gt; elements without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the vector will not allocate.</source>
          <target state="translated">벡터는 재 할당없이 정확히 &lt;code&gt;capacity&lt;/code&gt; 요소 를 보유 할 수 있습니다 . 경우 &lt;code&gt;capacity&lt;/code&gt; 0, 벡터가 할당되지 않습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
