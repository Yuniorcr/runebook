<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="800e827a6bd80027fcc168148b39b2bc4798dafa" translate="yes" xml:space="preserve">
          <source>TakeWhile::partial_cmp</source>
          <target state="translated">TakeWhile::partial_cmp</target>
        </trans-unit>
        <trans-unit id="756f2fd59afc727df9fab561f13734ed10cc1035" translate="yes" xml:space="preserve">
          <source>TakeWhile::partition</source>
          <target state="translated">TakeWhile::partition</target>
        </trans-unit>
        <trans-unit id="b3708fa6ef243ab03b8f0e01148054537baba7c2" translate="yes" xml:space="preserve">
          <source>TakeWhile::peekable</source>
          <target state="translated">TakeWhile::peekable</target>
        </trans-unit>
        <trans-unit id="3ddf00384fd53b19d286b7ce9f31e5c8e130add2" translate="yes" xml:space="preserve">
          <source>TakeWhile::position</source>
          <target state="translated">TakeWhile::position</target>
        </trans-unit>
        <trans-unit id="103103944a1d96c94fd7efea8dc3417e1dcec47e" translate="yes" xml:space="preserve">
          <source>TakeWhile::product</source>
          <target state="translated">TakeWhile::product</target>
        </trans-unit>
        <trans-unit id="9db7de0140db3938f59bf212e7c6b8c4ab1a5b22" translate="yes" xml:space="preserve">
          <source>TakeWhile::rev</source>
          <target state="translated">TakeWhile::rev</target>
        </trans-unit>
        <trans-unit id="aa7afa9cbae96b3a55ad383eb829e62995e9d3b0" translate="yes" xml:space="preserve">
          <source>TakeWhile::rposition</source>
          <target state="translated">TakeWhile::rposition</target>
        </trans-unit>
        <trans-unit id="aad375a583a0085240c857eb42a8dfb87e2e4e1c" translate="yes" xml:space="preserve">
          <source>TakeWhile::scan</source>
          <target state="translated">TakeWhile::scan</target>
        </trans-unit>
        <trans-unit id="cd86cfe53884486177c23f0ff823be46500dc9e1" translate="yes" xml:space="preserve">
          <source>TakeWhile::size_hint</source>
          <target state="translated">TakeWhile::size_hint</target>
        </trans-unit>
        <trans-unit id="5e176c9b3bf37b02aef10f7907a61a6ac9a47da8" translate="yes" xml:space="preserve">
          <source>TakeWhile::skip</source>
          <target state="translated">TakeWhile::skip</target>
        </trans-unit>
        <trans-unit id="64e54491abe005b30c8d866999d58ab787b271b2" translate="yes" xml:space="preserve">
          <source>TakeWhile::skip_while</source>
          <target state="translated">TakeWhile::skip_while</target>
        </trans-unit>
        <trans-unit id="ba9f9f10db1b73ab0c564edb9c28453e72ee8d7c" translate="yes" xml:space="preserve">
          <source>TakeWhile::step_by</source>
          <target state="translated">TakeWhile::step_by</target>
        </trans-unit>
        <trans-unit id="9d9273a97581b55606d39ff31ae4fc4bd97d0343" translate="yes" xml:space="preserve">
          <source>TakeWhile::sum</source>
          <target state="translated">TakeWhile::sum</target>
        </trans-unit>
        <trans-unit id="c679b6dec55380d66c68043added100d9b1e3e12" translate="yes" xml:space="preserve">
          <source>TakeWhile::take</source>
          <target state="translated">TakeWhile::take</target>
        </trans-unit>
        <trans-unit id="98bc022ab936f48f4c132862157a433b58b1ed1d" translate="yes" xml:space="preserve">
          <source>TakeWhile::take_while</source>
          <target state="translated">TakeWhile::take_while</target>
        </trans-unit>
        <trans-unit id="b57cfb71237e7ec5ab624251b87030d240a46226" translate="yes" xml:space="preserve">
          <source>TakeWhile::to_owned</source>
          <target state="translated">TakeWhile::to_owned</target>
        </trans-unit>
        <trans-unit id="37e399f48eff7903115e7d86661abdf8e05fd4b1" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_fold</source>
          <target state="translated">TakeWhile::try_fold</target>
        </trans-unit>
        <trans-unit id="759bc51854e6a28a5380a5f6b7a415cd0f555f0f" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_for_each</source>
          <target state="translated">TakeWhile::try_for_each</target>
        </trans-unit>
        <trans-unit id="7fb911b85cc860ff38f3b721f59503e01735b148" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_from</source>
          <target state="translated">TakeWhile::try_from</target>
        </trans-unit>
        <trans-unit id="5de7c55a9b68a872ef23f0276b88d1c9ecf0fc8a" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_into</source>
          <target state="translated">TakeWhile::try_into</target>
        </trans-unit>
        <trans-unit id="87c136784211d463521272370803a4f358f45d54" translate="yes" xml:space="preserve">
          <source>TakeWhile::type_id</source>
          <target state="translated">TakeWhile::type_id</target>
        </trans-unit>
        <trans-unit id="2c32f5c719493f4a777e4c32b66c95f758c27273" translate="yes" xml:space="preserve">
          <source>TakeWhile::unzip</source>
          <target state="translated">TakeWhile::unzip</target>
        </trans-unit>
        <trans-unit id="d4376e438d96018f64f5876aa47fe4d14ae53315" translate="yes" xml:space="preserve">
          <source>TakeWhile::zip</source>
          <target state="translated">TakeWhile::zip</target>
        </trans-unit>
        <trans-unit id="686ef3911209faeb469101adcbd7e6e7d810ef4c" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;*O*(min(k, len() - k))&lt;/code&gt; time and no extra space.</source>
          <target state="translated">취하고 &lt;code&gt;*O*(min(k, len() - k))&lt;/code&gt; 의 시간과 별도의 공간.</target>
        </trans-unit>
        <trans-unit id="d5ef4edffae6c9317836493dc9e695ad35618a15" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;*O*(min(mid, len() - mid))&lt;/code&gt; time and no extra space.</source>
          <target state="translated">소요 &lt;code&gt;*O*(min(mid, len() - mid))&lt;/code&gt; 시간과 별도의 공간.</target>
        </trans-unit>
        <trans-unit id="c4a3fbbd6670f1404e88f845d8e70bb6e1310ad2" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;O(min(k, len() - k))&lt;/code&gt; time and no extra space.</source>
          <target state="translated">&lt;code&gt;O(min(k, len() - k))&lt;/code&gt; 시간이 걸리고 추가 공간이 없습니다.</target>
        </trans-unit>
        <trans-unit id="2675fff809feea07b6b8e81b85ffeea6cb2ff42a" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;O(min(mid, len() - mid))&lt;/code&gt; time and no extra space.</source>
          <target state="translated">&lt;code&gt;O(min(mid, len() - mid))&lt;/code&gt; 시간이 걸리고 추가 공간이 없습니다.</target>
        </trans-unit>
        <trans-unit id="cd9e4e1ce47cfbb22bdd9618d61401a9a4bbe1ab" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element.</source>
          <target state="translated">클로저를 가져와 각 요소에서 해당 클로저를 호출하는 반복자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9d3b7aa7666b1bb97d700268dbfed96edd954290" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;../../../iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">클로저를 가져와 각 요소에서 해당 클로저를 호출하는 반복자를 만듭니다. &lt;a href=&quot;../../../iter/trait.iterator#method.map&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15197bb083d7273e4a694b7c5e032b5e1c0781f3" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;../../iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">클로저를 가져와 각 요소에서 해당 클로저를 호출하는 반복자를 만듭니다. &lt;a href=&quot;../../iter/trait.iterator#method.map&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4434c8dd599ef23b0c9ba44e32c1fa55b943ae82" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;../iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">클로저를 가져와 각 요소에서 해당 클로저를 호출하는 반복자를 만듭니다. &lt;a href=&quot;../iter/trait.iterator#method.map&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6257eea37e0de73bcadd8777f056a323db82c336" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">클로저를 가져와 각 요소에서 해당 클로저를 호출하는 반복자를 만듭니다. &lt;a href=&quot;iter/trait.iterator#method.map&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b1ad1d9466847f0b48f38483a158304137e697a6" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">클로저를 가져와 각 요소에서 해당 클로저를 호출하는 반복자를 만듭니다. &lt;a href=&quot;trait.iterator#method.map&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b67dad0714b16a4867cfc86c2882827f4a196a85" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; :이 없으면 &lt;a href=&quot;enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소들이 취해지지되고 &lt;a href=&quot;enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; 이&lt;/a&gt; 발생 하지 않으면 각 &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 값을 가진 컨테이너 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c0d108a90f72b979216289a1535302bae686a314" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; :이 없으면 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소들이 취해지지되고 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 발생 하지 않으면 각 &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 의 값이있는 컨테이너 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6ae2387e48cfe171ba07e4b4b0225bc9c8162619" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것이 없으면 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 발생 하지 않으면 모든 요소의 곱이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bbc47bd052a8b6d5124696117910cb85d1a433ca" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것이 없으면 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 발생 하지 않으면 모든 요소의 합계가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="aa16ae10062698ed9b295ae08170d14623d7392d" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것은 경우 &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고, &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 반환된다. &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; 이&lt;/a&gt; 발생 하지 않으면 모든 요소의 제품이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="36b254b78336a4f1d88a19a88b9cd87eebc4af74" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것은 경우 &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고, &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 반환된다. &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; 이&lt;/a&gt; 발생 하지 않으면 모든 요소의 합계가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="7e929c2f84b980189b0ca395f9fd1ebf18d6a9b2" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;../option/enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; :이 없으면 &lt;a href=&quot;../option/enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소들이 취해지지되고 &lt;a href=&quot;../option/enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;../option/enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; 이&lt;/a&gt; 발생 하지 않으면 각 &lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 값을 가진 컨테이너 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="70a9e6b588aac0e816346721c7b37888db944102" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; :이 없으면 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소들이 취해지지되고 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 발생 하지 않으면 각 &lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 의 값이있는 컨테이너 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f7590beabf441bb63691e8eea48b72c9c8f6a403" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것이 없으면 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 발생 하지 않으면 모든 요소의 곱이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ebc7f913ad909dfc000ef9eb96b0c827728188e0" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것이 없으면 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 리턴되지 않는다. &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 발생 하지 않으면 모든 요소의 합계가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ee1c7f91156f7afd567ca4e08a2abfd735e16c17" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것은 경우 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고, &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 반환된다. &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; 이&lt;/a&gt; 발생 하지 않으면 모든 요소의 제품이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e3ccdebe9d4ccf3b0664327970602a14b42c1657" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; : 그것은 경우 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; , 추가적인 요소가 취해지지되고, &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 반환된다. &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; 이&lt;/a&gt; 발생 하지 않으면 모든 요소의 합계가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b39228003dfd9a65d31657d9ccd88aa95394f718" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt; and collects it into an &lt;code&gt;Arc&amp;lt;[T]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Iterator&lt;/code&gt; 각 요소를 가져와 &lt;code&gt;Arc&amp;lt;[T]&amp;gt;&lt;/code&gt; 로 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="f80659447eb965dd52f894d84ba633d8bce5db96" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt; and collects it into an &lt;code&gt;Rc&amp;lt;[T]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Iterator&lt;/code&gt; 의 각 요소를 가져 와서 &lt;code&gt;Rc&amp;lt;[T]&amp;gt;&lt;/code&gt; 로 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="217627f67f88406b5f9f17a93f1493e04a1a8227" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is a &lt;code&gt;None&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;None&lt;/code&gt; is returned. Should no &lt;code&gt;None&lt;/code&gt; occur, the product of all elements is returned.</source>
          <target state="translated">&lt;code&gt;Iterator&lt;/code&gt; 의 각 요소를 가져옵니다 . &lt;code&gt;None&lt;/code&gt; 이면 더 이상 요소를 가져 오지 않으며 &lt;code&gt;None&lt;/code&gt; 이 반환됩니다. &lt;code&gt;None&lt;/code&gt; 이 발생 하지 않으면 모든 요소의 곱이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e4aa0fd801953cd40a086ec1d2ff51bb44eb736e" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is a &lt;code&gt;None&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;None&lt;/code&gt; is returned. Should no &lt;code&gt;None&lt;/code&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">&lt;code&gt;Iterator&lt;/code&gt; 의 각 요소를 가져옵니다 . &lt;code&gt;None&lt;/code&gt; 이면 더 이상 요소를 가져 오지 않으며 &lt;code&gt;None&lt;/code&gt; 이 반환됩니다. &lt;code&gt;None&lt;/code&gt; 이 발생 하지 않으면 모든 요소의 합이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c1fb0a7041f8cb3602712be575a96b71a9c34edb" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is an &lt;code&gt;Err&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;Err&lt;/code&gt; is returned. Should no &lt;code&gt;Err&lt;/code&gt; occur, a container with the values of each &lt;code&gt;Result&lt;/code&gt; is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;code&gt;Iterator&lt;/code&gt; : 그것은 경우 &lt;code&gt;Err&lt;/code&gt; , 추가적인 요소가 취해지지되고, &lt;code&gt;Err&lt;/code&gt; 반환된다. &lt;code&gt;Err&lt;/code&gt; 발생 하지 않으면 각 &lt;code&gt;Result&lt;/code&gt; 값이 포함 된 컨테이너 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="42c26fa2ecac3de7729494a9359458db2460cecc" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is an &lt;code&gt;Err&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;Err&lt;/code&gt; is returned. Should no &lt;code&gt;Err&lt;/code&gt; occur, the product of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;code&gt;Iterator&lt;/code&gt; : 그것은 경우 &lt;code&gt;Err&lt;/code&gt; , 추가적인 요소가 취해지지되고, &lt;code&gt;Err&lt;/code&gt; 반환된다. &lt;code&gt;Err&lt;/code&gt; 이 발생 하지 않으면 모든 요소의 곱이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c82330496098a00243d3f411105f0f70776be883" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is an &lt;code&gt;Err&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;Err&lt;/code&gt; is returned. Should no &lt;code&gt;Err&lt;/code&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">의 각 요소를 가져 &lt;code&gt;Iterator&lt;/code&gt; : 그것은 경우 &lt;code&gt;Err&lt;/code&gt; , 추가적인 요소가 취해지지되고, &lt;code&gt;Err&lt;/code&gt; 반환된다. &lt;code&gt;Err&lt;/code&gt; 이 발생 하지 않으면 모든 요소의 합이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="01d5fda76710ca0641abcbb3e4cbb1bb6e17f736" translate="yes" xml:space="preserve">
          <source>Takes each element, adds them together, and returns the result.</source>
          <target state="translated">각 요소를 가져 와서 더한 다음 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6776e27751852b377b68c46a8017d15dd715c595" translate="yes" xml:space="preserve">
          <source>Takes linear (in &lt;code&gt;self.len()&lt;/code&gt;) time.</source>
          <target state="translated">선형 ( &lt;code&gt;self.len()&lt;/code&gt; ) 시간이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="fdca1895a18c3a298f6533b4c2e334951c66b62c" translate="yes" xml:space="preserve">
          <source>Takes ownership and &quot;forgets&quot; about the value &lt;strong&gt;without running its destructor&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;소멸자를 실행하지 않고&lt;/strong&gt; 가치 &lt;strong&gt;를&lt;/strong&gt; 소유하고 잊어 버립니다 .</target>
        </trans-unit>
        <trans-unit id="b8fa769819072fbe610e5e9c85934d3a05171939" translate="yes" xml:space="preserve">
          <source>Takes the contained value out.</source>
          <target state="translated">포함 된 값을 꺼냅니다.</target>
        </trans-unit>
        <trans-unit id="4aec823974aa072f464dcb5cc764f9240e0f60dd" translate="yes" xml:space="preserve">
          <source>Takes the cubic root of a number.</source>
          <target state="translated">수의 세제곱근을 취합니다.</target>
        </trans-unit>
        <trans-unit id="f045194d706e7e41fabb862c8032ea26f5f950f2" translate="yes" xml:space="preserve">
          <source>Takes the reciprocal (inverse) of a number, &lt;code&gt;1/x&lt;/code&gt;.</source>
          <target state="translated">숫자 &lt;code&gt;1/x&lt;/code&gt; 의 역수 (역수)를 취합니다 .</target>
        </trans-unit>
        <trans-unit id="6a48b57259f94b360feec04d91e3f646f9cba125" translate="yes" xml:space="preserve">
          <source>Takes the square root of a number.</source>
          <target state="translated">숫자의 제곱근을 취합니다.</target>
        </trans-unit>
        <trans-unit id="29583c6b4f13f8e1828da3f713db57dac29990e1" translate="yes" xml:space="preserve">
          <source>Takes the value from the &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; container out.</source>
          <target state="translated">ManualDrop &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; 컨테이너 에서 값을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="bc799efc0b882851473c22ca2ca5ccf94ddabfe1" translate="yes" xml:space="preserve">
          <source>Takes the value of the cell, leaving &lt;code&gt;Default::default()&lt;/code&gt; in its place.</source>
          <target state="translated">셀의 값을 가져 와서 &lt;code&gt;Default::default()&lt;/code&gt; 를 그대로 둡니다 .</target>
        </trans-unit>
        <trans-unit id="21859ca86840d9216ef1aca0008b5877f29f5e68" translate="yes" xml:space="preserve">
          <source>Takes the value of the entry out of the map, and returns it.</source>
          <target state="translated">항목의 값을 맵에서 가져 와서 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e353877ad2ec8473ab467885d9861796b98bdada" translate="yes" xml:space="preserve">
          <source>Takes the value out of the entry, and returns it.</source>
          <target state="translated">항목에서 값을 가져 와서 반환합니다.</target>
        </trans-unit>
        <trans-unit id="761daab64ee172552a57dae50c6f8a92c4d9c366" translate="yes" xml:space="preserve">
          <source>Takes the value out of the option, leaving a &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; in its place.</source>
          <target state="translated">옵션에서 값을 꺼내어 그 자리에 &lt;a href=&quot;#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 을 남겨 둡니다 .</target>
        </trans-unit>
        <trans-unit id="b7c52a2ee2d265275374b5c1f093b7a06a9428c4" translate="yes" xml:space="preserve">
          <source>Takes the value out of the option, leaving a &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; in its place.</source>
          <target state="translated">옵션에서 값을 제거 하고 대신 &lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 을 둡니다 .</target>
        </trans-unit>
        <trans-unit id="ba923f497880c808c6be64ea728bee38b782b657" translate="yes" xml:space="preserve">
          <source>Takes the wrapped value, leaving &lt;code&gt;Default::default()&lt;/code&gt; in its place.</source>
          <target state="translated">래핑 된 값을 취하고 대신 &lt;code&gt;Default::default()&lt;/code&gt; 를 둡니다 .</target>
        </trans-unit>
        <trans-unit id="5f95b9cdf9802bc6e9feca2c7b307fe24034be8d" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence.</source>
          <target state="translated">두 개의 이터레이터를 사용하여 두 개의 이터레이터를 순차적으로 생성합니다.</target>
        </trans-unit>
        <trans-unit id="787908ffef98464dc332707d755e2c4f129a3015" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;../../../iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">두 개의 이터레이터를 사용하여 두 개의 이터레이터를 순차적으로 생성합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.chain&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96c4c94db35b0a5de2fc876c74307d69f4d1f941" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;../../iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">두 개의 이터레이터를 사용하여 두 개의 이터레이터를 순차적으로 생성합니다. &lt;a href=&quot;../../iter/trait.iterator#method.chain&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09c1398fa07d7872f8f96945eceb77ea195aaf9f" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;../iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">두 개의 이터레이터를 사용하여 두 개의 이터레이터를 순차적으로 생성합니다. &lt;a href=&quot;../iter/trait.iterator#method.chain&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e8033a8a0d88d9c00564885e5bd3facaba3011b" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">두 개의 이터레이터를 사용하여 두 개의 이터레이터를 순차적으로 생성합니다. &lt;a href=&quot;iter/trait.iterator#method.chain&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="772b77fdfc8e9968126bb233f7891ef8441c5352" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">두 개의 이터레이터를 사용하여 두 개의 이터레이터를 순차적으로 생성합니다. &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e48610b94d0c8b865914c76042a0dd63c8ace3fb" translate="yes" xml:space="preserve">
          <source>Taking a &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; as a parameter:</source>
          <target state="translated">복용하는 &lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt; 매개 변수로 :</target>
        </trans-unit>
        <trans-unit id="4f62d9e379567856d558f8df128e53e7eeda59a9" translate="yes" xml:space="preserve">
          <source>Taking a &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; as a parameter:</source>
          <target state="translated">복용하는 &lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; 을&lt;/a&gt; 매개 변수로 :</target>
        </trans-unit>
        <trans-unit id="acf17a2c9691dbabd08f8be26e62792363680f2f" translate="yes" xml:space="preserve">
          <source>Taking a &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; as a parameter:</source>
          <target state="translated">복용하는 &lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; 을&lt;/a&gt; 매개 변수로 :</target>
        </trans-unit>
        <trans-unit id="9b593af3c7f2108f31456b5ab2cb3574e71f3b6e" translate="yes" xml:space="preserve">
          <source>Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It&amp;rsquo;s quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.</source>
          <target state="translated">소유권을 취득한 다음 모든 기능으로 소유권을 반환하는 것은 약간 지루합니다. 함수가 값을 사용하지만 소유권을 가지지 않게하려면 어떻게해야합니까? 우리가 전달하는 모든 것을 다시 사용하려면 다시 전달해야 할뿐만 아니라 함수 본문에서 반환되는 데이터와 함께 데이터를 다시 전달해야한다는 것은 매우 성가신 일입니다.</target>
        </trans-unit>
        <trans-unit id="4aa5a6c5b61f9a1ca73ba483f7a4a44ead615a2c" translate="yes" xml:space="preserve">
          <source>Targets which do not support switching between linkage of the C runtime will ignore this flag. It's recommended to inspect the resulting binary to ensure that it's linked as you would expect after the compiler succeeds.</source>
          <target state="translated">C 런타임 링크 간 전환을 지원하지 않는 대상은이 플래그를 무시합니다. 결과 바이너리를 검사하여 컴파일러가 성공한 후 예상대로 링크되어 있는지 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9ad8024a2c7b1265fb5e22250fc7a31283cdbd36" translate="yes" xml:space="preserve">
          <source>TcpListener</source>
          <target state="translated">TcpListener</target>
        </trans-unit>
        <trans-unit id="ece7cdbc23c076f1d64f752343ef7aec8eec539f" translate="yes" xml:space="preserve">
          <source>TcpListener::accept</source>
          <target state="translated">TcpListener::accept</target>
        </trans-unit>
        <trans-unit id="a2a291bb7ab19718d31f7478d18104e4158a939c" translate="yes" xml:space="preserve">
          <source>TcpListener::as_raw_fd</source>
          <target state="translated">TcpListener::as_raw_fd</target>
        </trans-unit>
        <trans-unit id="49f5fe2427c190a7f8a472e06e6d569a7ff427c4" translate="yes" xml:space="preserve">
          <source>TcpListener::as_raw_socket</source>
          <target state="translated">TcpListener::as_raw_socket</target>
        </trans-unit>
        <trans-unit id="2e2338f796fa51dd367f2f2c91e316fe98afe3a0" translate="yes" xml:space="preserve">
          <source>TcpListener::bind</source>
          <target state="translated">TcpListener::bind</target>
        </trans-unit>
        <trans-unit id="bc75d22ad0ef01f38f6f564c0448b514f01f2b1e" translate="yes" xml:space="preserve">
          <source>TcpListener::borrow</source>
          <target state="translated">TcpListener::borrow</target>
        </trans-unit>
        <trans-unit id="b7bf89d05dc43863ce7b237f1c9339841b44d828" translate="yes" xml:space="preserve">
          <source>TcpListener::borrow_mut</source>
          <target state="translated">TcpListener::borrow_mut</target>
        </trans-unit>
        <trans-unit id="67148bab8cc6c3ad3159fa098deca2df5084c5bc" translate="yes" xml:space="preserve">
          <source>TcpListener::fmt</source>
          <target state="translated">TcpListener::fmt</target>
        </trans-unit>
        <trans-unit id="e2222d5e97ec906a2d58760a4b094c72e792239f" translate="yes" xml:space="preserve">
          <source>TcpListener::from</source>
          <target state="translated">TcpListener::from</target>
        </trans-unit>
        <trans-unit id="965dc7a632243e984a2b9e894788c6c21d7eb5d8" translate="yes" xml:space="preserve">
          <source>TcpListener::from_raw_fd</source>
          <target state="translated">TcpListener::from_raw_fd</target>
        </trans-unit>
        <trans-unit id="482dc849c70cec776e4f8a473271ccf0cb6cf277" translate="yes" xml:space="preserve">
          <source>TcpListener::from_raw_socket</source>
          <target state="translated">TcpListener::from_raw_socket</target>
        </trans-unit>
        <trans-unit id="1934b5e7d2fb2d8224b23b4ad0d2399a5cb3b873" translate="yes" xml:space="preserve">
          <source>TcpListener::incoming</source>
          <target state="translated">TcpListener::incoming</target>
        </trans-unit>
        <trans-unit id="428c642a4eaf5906beb8fe4edf0ac026bb70054c" translate="yes" xml:space="preserve">
          <source>TcpListener::into</source>
          <target state="translated">TcpListener::into</target>
        </trans-unit>
        <trans-unit id="ecf165a93c2c3a51f657446508db4792cbb31eef" translate="yes" xml:space="preserve">
          <source>TcpListener::into_raw_fd</source>
          <target state="translated">TcpListener::into_raw_fd</target>
        </trans-unit>
        <trans-unit id="171dba66a0881e83fbf754117718cae198277962" translate="yes" xml:space="preserve">
          <source>TcpListener::into_raw_socket</source>
          <target state="translated">TcpListener::into_raw_socket</target>
        </trans-unit>
        <trans-unit id="2275a3d2aa672ca4311b697b11d81ca54319cd4f" translate="yes" xml:space="preserve">
          <source>TcpListener::local_addr</source>
          <target state="translated">TcpListener::local_addr</target>
        </trans-unit>
        <trans-unit id="ec11714ec8bf6a942994646bb7ec40f6ec987004" translate="yes" xml:space="preserve">
          <source>TcpListener::only_v6</source>
          <target state="translated">TcpListener::only_v6</target>
        </trans-unit>
        <trans-unit id="8f9762884937dfa70d1e7429478f09a0cb47d310" translate="yes" xml:space="preserve">
          <source>TcpListener::set_nonblocking</source>
          <target state="translated">TcpListener::set_nonblocking</target>
        </trans-unit>
        <trans-unit id="226f648e250e40bcc471fd5a673bff010846e472" translate="yes" xml:space="preserve">
          <source>TcpListener::set_only_v6</source>
          <target state="translated">TcpListener::set_only_v6</target>
        </trans-unit>
        <trans-unit id="4715bf3aa73135001a12ace3fe29f1f7e2fa4701" translate="yes" xml:space="preserve">
          <source>TcpListener::set_ttl</source>
          <target state="translated">TcpListener::set_ttl</target>
        </trans-unit>
        <trans-unit id="52dd134154d36dce171d232dad1f997d4a86ef76" translate="yes" xml:space="preserve">
          <source>TcpListener::take_error</source>
          <target state="translated">TcpListener::take_error</target>
        </trans-unit>
        <trans-unit id="346a3319242ccfb5f2d382bc3687dc41f26c3692" translate="yes" xml:space="preserve">
          <source>TcpListener::try_clone</source>
          <target state="translated">TcpListener::try_clone</target>
        </trans-unit>
        <trans-unit id="8774def23dc815607fb5f6d621a655e6351d76ed" translate="yes" xml:space="preserve">
          <source>TcpListener::try_from</source>
          <target state="translated">TcpListener::try_from</target>
        </trans-unit>
        <trans-unit id="4d964782d52d7cadd1d535988a4c17142f01c956" translate="yes" xml:space="preserve">
          <source>TcpListener::try_into</source>
          <target state="translated">TcpListener::try_into</target>
        </trans-unit>
        <trans-unit id="720c95f141c0826fd5fca57448ce533672b87275" translate="yes" xml:space="preserve">
          <source>TcpListener::ttl</source>
          <target state="translated">TcpListener::ttl</target>
        </trans-unit>
        <trans-unit id="8b5ab82dcc35d3a2cd49204d3a4a7a3449b42f85" translate="yes" xml:space="preserve">
          <source>TcpListener::type_id</source>
          <target state="translated">TcpListener::type_id</target>
        </trans-unit>
        <trans-unit id="35342d32149945519f7e31daff4e30855fbeba49" translate="yes" xml:space="preserve">
          <source>TcpStream</source>
          <target state="translated">TcpStream</target>
        </trans-unit>
        <trans-unit id="9eafc6b129d5efa5c4b0a83e50a95e30344816f3" translate="yes" xml:space="preserve">
          <source>TcpStream::as_raw_fd</source>
          <target state="translated">TcpStream::as_raw_fd</target>
        </trans-unit>
        <trans-unit id="09ec2aef24015b31ab23113ac683d2f8346c1f39" translate="yes" xml:space="preserve">
          <source>TcpStream::as_raw_socket</source>
          <target state="translated">TcpStream::as_raw_socket</target>
        </trans-unit>
        <trans-unit id="12e762e3cfe2aa9d71a2a757abb3507e964d1881" translate="yes" xml:space="preserve">
          <source>TcpStream::borrow</source>
          <target state="translated">TcpStream::borrow</target>
        </trans-unit>
        <trans-unit id="d91a58f6ef21ac04bf7fb8b19bbc87b6dbe9fb4c" translate="yes" xml:space="preserve">
          <source>TcpStream::borrow_mut</source>
          <target state="translated">TcpStream::borrow_mut</target>
        </trans-unit>
        <trans-unit id="11f8dcda0e1ccab974f38cf496de4e39b14b25cb" translate="yes" xml:space="preserve">
          <source>TcpStream::by_ref</source>
          <target state="translated">TcpStream::by_ref</target>
        </trans-unit>
        <trans-unit id="bfbef109c2e4f33f2aedd0c714f14f49404d152c" translate="yes" xml:space="preserve">
          <source>TcpStream::bytes</source>
          <target state="translated">TcpStream::bytes</target>
        </trans-unit>
        <trans-unit id="e1fe899d60189a16135ede51a667e0fdef40fd00" translate="yes" xml:space="preserve">
          <source>TcpStream::chain</source>
          <target state="translated">TcpStream::chain</target>
        </trans-unit>
        <trans-unit id="9b075e5500b6c35efe89a7d4bf0762c653e6221c" translate="yes" xml:space="preserve">
          <source>TcpStream::connect</source>
          <target state="translated">TcpStream::connect</target>
        </trans-unit>
        <trans-unit id="7c9bc4cc7e00f6a9f012c5c2f74296bd08fb3cd9" translate="yes" xml:space="preserve">
          <source>TcpStream::connect_timeout</source>
          <target state="translated">TcpStream::connect_timeout</target>
        </trans-unit>
        <trans-unit id="7e82ba30a964300fd5401b21bdde38ef8892a264" translate="yes" xml:space="preserve">
          <source>TcpStream::flush</source>
          <target state="translated">TcpStream::flush</target>
        </trans-unit>
        <trans-unit id="5e2f83b6ef3a2fd9f5722070fe250aef910cb0f5" translate="yes" xml:space="preserve">
          <source>TcpStream::fmt</source>
          <target state="translated">TcpStream::fmt</target>
        </trans-unit>
        <trans-unit id="3a3304a1471ecd9e54075022592709e4164425d3" translate="yes" xml:space="preserve">
          <source>TcpStream::from</source>
          <target state="translated">TcpStream::from</target>
        </trans-unit>
        <trans-unit id="0c544151d800149c130a2b4e5fa0242d2c6c5fe2" translate="yes" xml:space="preserve">
          <source>TcpStream::from_raw_fd</source>
          <target state="translated">TcpStream::from_raw_fd</target>
        </trans-unit>
        <trans-unit id="f33ab52a5f61c4e532d24e2b9d448a864ab588ef" translate="yes" xml:space="preserve">
          <source>TcpStream::from_raw_socket</source>
          <target state="translated">TcpStream::from_raw_socket</target>
        </trans-unit>
        <trans-unit id="ac8cf31a8273795291384f9b9a189065f0e4ddda" translate="yes" xml:space="preserve">
          <source>TcpStream::initializer</source>
          <target state="translated">TcpStream::initializer</target>
        </trans-unit>
        <trans-unit id="bb02adb8fb5756c502d5d11c517f31b37848f5b3" translate="yes" xml:space="preserve">
          <source>TcpStream::into</source>
          <target state="translated">TcpStream::into</target>
        </trans-unit>
        <trans-unit id="8b62d5f9b1506a6417ce6b1e7abc2fe81f1a512b" translate="yes" xml:space="preserve">
          <source>TcpStream::into_raw_fd</source>
          <target state="translated">TcpStream::into_raw_fd</target>
        </trans-unit>
        <trans-unit id="2d62e49030fac395488f03a44bc65385d791c4a1" translate="yes" xml:space="preserve">
          <source>TcpStream::into_raw_socket</source>
          <target state="translated">TcpStream::into_raw_socket</target>
        </trans-unit>
        <trans-unit id="2f15c295f6cbee27e4704ba77400c3f9cdb74347" translate="yes" xml:space="preserve">
          <source>TcpStream::local_addr</source>
          <target state="translated">TcpStream::local_addr</target>
        </trans-unit>
        <trans-unit id="3e41769cd3c7bc5fe0ffd071decfac8538fce3c8" translate="yes" xml:space="preserve">
          <source>TcpStream::nodelay</source>
          <target state="translated">TcpStream::nodelay</target>
        </trans-unit>
        <trans-unit id="b1c4ef3a856c377290ba0effe22fa456b4c5d618" translate="yes" xml:space="preserve">
          <source>TcpStream::peek</source>
          <target state="translated">TcpStream::peek</target>
        </trans-unit>
        <trans-unit id="02b5be94fe4bd3a77f45294ce309a022defb0142" translate="yes" xml:space="preserve">
          <source>TcpStream::peer_addr</source>
          <target state="translated">TcpStream::peer_addr</target>
        </trans-unit>
        <trans-unit id="168308bcf15754b94b3cd0ff91dc84d727c89085" translate="yes" xml:space="preserve">
          <source>TcpStream::read</source>
          <target state="translated">TcpStream::read</target>
        </trans-unit>
        <trans-unit id="a51f803ec2bc3d6b94f3630947f31e7b2bee3ed5" translate="yes" xml:space="preserve">
          <source>TcpStream::read_exact</source>
          <target state="translated">TcpStream::read_exact</target>
        </trans-unit>
        <trans-unit id="cddced3b85b2ead651c93e97a2f622b9f49035db" translate="yes" xml:space="preserve">
          <source>TcpStream::read_timeout</source>
          <target state="translated">TcpStream::read_timeout</target>
        </trans-unit>
        <trans-unit id="1957796c8b2bd9a577cc9018f30d0a2d1c2fe241" translate="yes" xml:space="preserve">
          <source>TcpStream::read_to_end</source>
          <target state="translated">TcpStream::read_to_end</target>
        </trans-unit>
        <trans-unit id="9f494c5d56be921420520740cf0cbafa75a20b7b" translate="yes" xml:space="preserve">
          <source>TcpStream::read_to_string</source>
          <target state="translated">TcpStream::read_to_string</target>
        </trans-unit>
        <trans-unit id="c6fa288859680339e04670a33f1a14f57af1e652" translate="yes" xml:space="preserve">
          <source>TcpStream::read_vectored</source>
          <target state="translated">TcpStream::read_vectored</target>
        </trans-unit>
        <trans-unit id="e83138e7f219d526516674b5550a795c09cf97fa" translate="yes" xml:space="preserve">
          <source>TcpStream::set_nodelay</source>
          <target state="translated">TcpStream::set_nodelay</target>
        </trans-unit>
        <trans-unit id="6f3db10df76b321eadb9c9c65b440fd1e62d4157" translate="yes" xml:space="preserve">
          <source>TcpStream::set_nonblocking</source>
          <target state="translated">TcpStream::set_nonblocking</target>
        </trans-unit>
        <trans-unit id="0ef1754192987fd2a71c4d09d1363328c40af9e8" translate="yes" xml:space="preserve">
          <source>TcpStream::set_read_timeout</source>
          <target state="translated">TcpStream::set_read_timeout</target>
        </trans-unit>
        <trans-unit id="1c0d37734b35b5aaae88202ef8744780ebadf163" translate="yes" xml:space="preserve">
          <source>TcpStream::set_ttl</source>
          <target state="translated">TcpStream::set_ttl</target>
        </trans-unit>
        <trans-unit id="cf06a99e15825f5af0170343a971d82291a1bb70" translate="yes" xml:space="preserve">
          <source>TcpStream::set_write_timeout</source>
          <target state="translated">TcpStream::set_write_timeout</target>
        </trans-unit>
        <trans-unit id="de9f03e4aaf65b0dacf8a1a510098378140fbad7" translate="yes" xml:space="preserve">
          <source>TcpStream::shutdown</source>
          <target state="translated">TcpStream::shutdown</target>
        </trans-unit>
        <trans-unit id="f729ec43f0af2f4768020c3c186531540aa6fe75" translate="yes" xml:space="preserve">
          <source>TcpStream::take</source>
          <target state="translated">TcpStream::take</target>
        </trans-unit>
        <trans-unit id="07ca37092d4865ff34b3da8842e6f13eb4a33726" translate="yes" xml:space="preserve">
          <source>TcpStream::take_error</source>
          <target state="translated">TcpStream::take_error</target>
        </trans-unit>
        <trans-unit id="3f33672645be4d6e5bd0541f33a42009a106b1ad" translate="yes" xml:space="preserve">
          <source>TcpStream::try_clone</source>
          <target state="translated">TcpStream::try_clone</target>
        </trans-unit>
        <trans-unit id="0e120d19ada990068a0b20ff52db32daba2c74d5" translate="yes" xml:space="preserve">
          <source>TcpStream::try_from</source>
          <target state="translated">TcpStream::try_from</target>
        </trans-unit>
        <trans-unit id="0b039d724a73bfa4d009fb758a03fb779a56b987" translate="yes" xml:space="preserve">
          <source>TcpStream::try_into</source>
          <target state="translated">TcpStream::try_into</target>
        </trans-unit>
        <trans-unit id="833adb6a3443ef8c2bc774bcc30192c98f27094a" translate="yes" xml:space="preserve">
          <source>TcpStream::ttl</source>
          <target state="translated">TcpStream::ttl</target>
        </trans-unit>
        <trans-unit id="ad00f68ee2a21774a182c99f9b2a83cd6f6f89e9" translate="yes" xml:space="preserve">
          <source>TcpStream::type_id</source>
          <target state="translated">TcpStream::type_id</target>
        </trans-unit>
        <trans-unit id="accd5bacb0184a5ab554a0ca248574c5b5ddbbcb" translate="yes" xml:space="preserve">
          <source>TcpStream::write</source>
          <target state="translated">TcpStream::write</target>
        </trans-unit>
        <trans-unit id="0058eeee13c9051b5e0a752af3087b29d7b02d7b" translate="yes" xml:space="preserve">
          <source>TcpStream::write_all</source>
          <target state="translated">TcpStream::write_all</target>
        </trans-unit>
        <trans-unit id="cb06fd9c7d1d55fc4b3f3e15dc0163521ac1465b" translate="yes" xml:space="preserve">
          <source>TcpStream::write_fmt</source>
          <target state="translated">TcpStream::write_fmt</target>
        </trans-unit>
        <trans-unit id="a5e3f17e3264af59b558a0fdcba770ba3c28fa37" translate="yes" xml:space="preserve">
          <source>TcpStream::write_timeout</source>
          <target state="translated">TcpStream::write_timeout</target>
        </trans-unit>
        <trans-unit id="6e74581726f107bfc541797c5b9030282bc56e97" translate="yes" xml:space="preserve">
          <source>TcpStream::write_vectored</source>
          <target state="translated">TcpStream::write_vectored</target>
        </trans-unit>
        <trans-unit id="b6eac90e1928ad9ea4411f97ebcf59a5c7e10ed0" translate="yes" xml:space="preserve">
          <source>Teams of Developers</source>
          <target state="translated">개발자 팀</target>
        </trans-unit>
        <trans-unit id="260e040b381f220359095e13ffb45be2fbc63287" translate="yes" xml:space="preserve">
          <source>Tells LLVM that this point in the code is not reachable, enabling further optimizations.</source>
          <target state="translated">코드에서이 지점에 도달 할 수 없으므로 LLVM에 추가 최적화를 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="a946abf59c33631dd9c09fe026f5fda52ecefd51" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">이 버퍼에 &lt;code&gt;amt&lt;/code&gt; 바이트가 버퍼에서 소비되었음을 알리므로 더 이상 &lt;code&gt;read&lt;/code&gt; 호출에서 반환되지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="092a16374b222f88ad28cf25d43d7648234ed176" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;. &lt;a href=&quot;../io/trait.bufread#tymethod.consume&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 버퍼에 &lt;code&gt;amt&lt;/code&gt; 바이트가 버퍼에서 소비되었음을 알리므로 더 이상 &lt;code&gt;read&lt;/code&gt; 호출에서 반환되지 않아야합니다 . &lt;a href=&quot;../io/trait.bufread#tymethod.consume&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="027be37242a148e84d0572e0cc986124d9c751bc" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;. &lt;a href=&quot;io/trait.bufread#tymethod.consume&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 버퍼에 &lt;code&gt;amt&lt;/code&gt; 바이트가 버퍼에서 소비되었음을 알리므로 더 이상 &lt;code&gt;read&lt;/code&gt; 호출에서 반환되지 않아야합니다 . &lt;a href=&quot;io/trait.bufread#tymethod.consume&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea3b911565206879ae5d6cb4146bc834dfb6a7f3" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;. &lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 버퍼에 &lt;code&gt;amt&lt;/code&gt; 바이트가 버퍼에서 소비되었음을 알리므로 더 이상 &lt;code&gt;read&lt;/code&gt; 호출에서 반환되지 않아야합니다 . &lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68f4c5ea285ef679416734518ea1144f7f9f2cf1" translate="yes" xml:space="preserve">
          <source>Temporal quantification.</source>
          <target state="translated">일시적 정량.</target>
        </trans-unit>
        <trans-unit id="be80baca9006a4100bd6b71127149a07eb502503" translate="yes" xml:space="preserve">
          <source>Temporaries</source>
          <target state="translated">Temporaries</target>
        </trans-unit>
        <trans-unit id="b1380bff4b98c3f3b1a409ce860a8bd5d4ce8c7b" translate="yes" xml:space="preserve">
          <source>Temporaries are also created to hold the result of operands to an expression while the other operands are evaluated. The temporaries are associated to the scope of the expression with that operand. Since the temporaries are moved from once the expression is evaluated, dropping them has no effect unless one of the operands to an expression breaks out of the expression, returns, or panics.</source>
          <target state="translated">다른 피연산자가 평가되는 동안 표현식에 피연산자의 결과를 보관하기 위해 임시도 생성됩니다. 임시는 해당 피연산자가있는 표현식의 범위와 연관됩니다. 표현식이 평가되면 임시가 이동되므로 표현식에 대한 피연산자 중 하나가 표현식에서 벗어나거나, 반환되거나, 패닉이 발생하지 않는 한이를 삭제해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6121a6beed14a5f45c5406020e211d50eaf732ff" translate="yes" xml:space="preserve">
          <source>Temporaries are not always dropped at the end of the enclosing statement. In simple cases where the &lt;code&gt;&amp;amp;&lt;/code&gt; expression is immediately stored into a variable, the compiler will automatically extend the lifetime of the temporary until the end of the enclosing block. Therefore, an alternative way to fix the original program is to write &lt;code&gt;let tmp = &amp;amp;foo()&lt;/code&gt; and not &lt;code&gt;let tmp = foo()&lt;/code&gt;:</source>
          <target state="translated">둘러싸는 문장의 끝에서 임시가 항상 삭제되는 것은 아닙니다. &lt;code&gt;&amp;amp;&lt;/code&gt; 표현식이 변수에 즉시 저장되는 간단한 경우 컴파일러는 둘러싸는 블록이 끝날 때까지 임시 수명을 자동으로 연장합니다. 따라서 원래 프로그램을 수정하는 다른 방법은 &lt;code&gt;let tmp = &amp;amp;foo()&lt;/code&gt; 를 쓰지 &lt;code&gt;let tmp = foo()&lt;/code&gt; 쓰지 않는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="ff4686225d8fb1e953162a00f63d6b94d5a386fd" translate="yes" xml:space="preserve">
          <source>Temporaries that are created in the final expression of a function body are dropped &lt;em&gt;after&lt;/em&gt; any named variables bound in the function body, as there is no smaller enclosing temporary scope.</source>
          <target state="translated">더 작은 둘러싸는 임시 범위가 없기 때문에 함수 본문 의 최종 표현식에서 생성 된 임시는 함수 본문에 바인딩 된 명명 된 변수 &lt;em&gt;뒤에&lt;/em&gt; 삭제 됩니다.</target>
        </trans-unit>
        <trans-unit id="aae8496ab0d5e20c300ea07a6c87645fbefee013" translate="yes" xml:space="preserve">
          <source>Temporary lifetime extension</source>
          <target state="translated">임시 수명 연장</target>
        </trans-unit>
        <trans-unit id="a237179150c9f45b00df9097591b1d7f10ef2038" translate="yes" xml:space="preserve">
          <source>Temporary lifetimes</source>
          <target state="translated">임시 평생</target>
        </trans-unit>
        <trans-unit id="ace2219c94d381961a79fb4617905c5cfbbacbf7" translate="yes" xml:space="preserve">
          <source>Temporary scopes</source>
          <target state="translated">임시 범위</target>
        </trans-unit>
        <trans-unit id="dfc9ea018278b216d5b6d6db9b73a7c2a6e7a8c8" translate="yes" xml:space="preserve">
          <source>Terminates the current process with the specified exit code.</source>
          <target state="translated">지정된 종료 코드로 현재 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="4abcdd83ee3f3bce743cbed96b2ad9f965bea36e" translate="yes" xml:space="preserve">
          <source>Terminates the process in an abnormal fashion.</source>
          <target state="translated">비정상적인 방식으로 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="2ee85218866a19e0d9f6c52c176e4eaf9d0877b2" translate="yes" xml:space="preserve">
          <source>Termination</source>
          <target state="translated">Termination</target>
        </trans-unit>
        <trans-unit id="4d00170cd71cecfb46cdbb7ebdf05a4a02fee721" translate="yes" xml:space="preserve">
          <source>Termination::report</source>
          <target state="translated">Termination::report</target>
        </trans-unit>
        <trans-unit id="00f441aa04210533cf8168c3d0baeda960edac55" translate="yes" xml:space="preserve">
          <source>Terminator for various items and statements, &lt;a href=&quot;types/array&quot;&gt;Array types&lt;/a&gt;</source>
          <target state="translated">다양한 항목 및 명령문의 종결 자, &lt;a href=&quot;types/array&quot;&gt;배열 유형&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94aaabf5a007f6525e86dbe783c284fccc74a25c" translate="yes" xml:space="preserve">
          <source>Test Organization</source>
          <target state="translated">테스트 조직</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="da7894cbcc38e877e01ccb02e3c5e98f656c5624" translate="yes" xml:space="preserve">
          <source>Testing Equality with the &lt;code id=&quot;testing-equality-with-the-assert_eq-and-assert_ne-macros&quot;&gt;assert_eq!&lt;/code&gt; and &lt;code&gt;assert_ne!&lt;/code&gt; Macros</source>
          <target state="translated">&lt;code id=&quot;testing-equality-with-the-assert_eq-and-assert_ne-macros&quot;&gt;assert_eq!&lt;/code&gt; 평등 테스트 ! 그리고 &lt;code&gt;assert_ne!&lt;/code&gt; 매크로</target>
        </trans-unit>
        <trans-unit id="117ea1d14f7b6fbe5fa90955d52644403f513522" translate="yes" xml:space="preserve">
          <source>Testing Private Functions</source>
          <target state="translated">개인 함수 테스트</target>
        </trans-unit>
        <trans-unit id="932c5d1d0f6f5178e61a3f6e97a669a7ad5fc25b" translate="yes" xml:space="preserve">
          <source>Testing attributes</source>
          <target state="translated">테스트 속성</target>
        </trans-unit>
        <trans-unit id="6966e45073f574893b66ceb3ad6d45bb2ced06e0" translate="yes" xml:space="preserve">
          <source>Testing is a complex skill: although we can&amp;rsquo;t cover every detail about how to write good tests in one chapter, we&amp;rsquo;ll discuss the mechanics of Rust&amp;rsquo;s testing facilities. We&amp;rsquo;ll talk about the annotations and macros available to you when writing your tests, the default behavior and options provided for running your tests, and how to organize tests into unit tests and integration tests.</source>
          <target state="translated">테스트는 복잡한 기술입니다. 한 장에서 좋은 테스트를 작성하는 방법에 대한 모든 세부 사항을 다룰 수는 없지만 Rust의 테스트 시설의 메커니즘에 대해 설명합니다. 테스트 작성시 제공되는 주석 및 매크로, 테스트 실행을 위해 제공되는 기본 동작 및 옵션, 테스트를 단위 테스트 및 통합 테스트로 구성하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="f7c988b9b3e507c053615421186791199dc1b08e" translate="yes" xml:space="preserve">
          <source>Testing the First Part</source>
          <target state="translated">첫 번째 부분 테스트</target>
        </trans-unit>
        <trans-unit id="833858d67cb9edd86a232319e147507d73e766ab" translate="yes" xml:space="preserve">
          <source>Tests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:</source>
          <target state="translated">테스트는 테스트되지 않은 코드가 예상대로 작동하는지 확인하는 녹 함수입니다. 테스트 기능 본문은 일반적으로 다음 세 가지 동작을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="9557b92aa71fea3ff4e10ad5c651a01d327198f2" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;person&lt;/code&gt; has the &lt;code&gt;car&lt;/code&gt; field filled with something.</source>
          <target state="translated">경우 테스트 &lt;code&gt;person&lt;/code&gt; 이 &lt;code&gt;car&lt;/code&gt; 뭔가 가득 필드.</target>
        </trans-unit>
        <trans-unit id="21b62ab2004ca1232d413d8d665d134b12791482" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate.</source>
          <target state="translated">반복자의 요소가 술어와 일치하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="10d2dce236b59fb61d9321a2651527964d17f562" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.any&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="209ac04cb187d92f123ce6700c9444025e5580b3" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;../../iter/trait.iterator#method.any&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="80ec10f423a5beaec1ab62efd9e4031e5aaa4a11" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;../iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;../iter/trait.iterator#method.any&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="760ae5105c89912ab7a036138a76c59ddfecc44b" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;iter/trait.iterator#method.any&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df440409ef320551129c77bcadb79c6c4ba84e37" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;trait.iterator#method.any&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="42f540ef5575b87eda1bc58cc8c893cf2e3e2964" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate.</source>
          <target state="translated">반복자의 모든 요소가 술어와 일치하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="52e69927724e46dd631e47a69a4f2cdc74a668ca" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 모든 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.all&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c572c6f114e3b7b0e63531ab8e78116f0d5ac5de" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 모든 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;../../iter/trait.iterator#method.all&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a987e1ebbc5dd44d57ed09974bfdcc0f02c47b55" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;../iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 모든 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;../iter/trait.iterator#method.all&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74b456b0054dd24ca1a515d72ae7f4e5367d4633" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 모든 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;iter/trait.iterator#method.all&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92be4e62f1c703e57b0a705c84b8aca1511558d2" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 모든 요소가 술어와 일치하는지 테스트합니다. &lt;a href=&quot;trait.iterator#method.all&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6ebc400fe5bb7d000d0d73f12e63cdedd3140090" translate="yes" xml:space="preserve">
          <source>Tests if the person's &lt;code&gt;age&lt;/code&gt; field is between 13 and 19, and binds its value to the &lt;code&gt;person_age&lt;/code&gt; variable.</source>
          <target state="translated">개인의 &lt;code&gt;age&lt;/code&gt; 필드가 13에서 19 사이 인지 테스트 하고 해당 값을 &lt;code&gt;person_age&lt;/code&gt; 변수에 바인딩 합니다.</target>
        </trans-unit>
        <trans-unit id="13e062493861ff1e884762affb6f292d7aaa95d6" translate="yes" xml:space="preserve">
          <source>Tests that return &lt;code&gt;()&lt;/code&gt; pass as long as they terminate and do not panic. Tests that return a &lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;/code&gt; pass as long as they return &lt;code&gt;Ok(())&lt;/code&gt;. Tests that do not terminate neither pass nor fail.</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; 를 반환하는 테스트는 종료되고 패닉하지 않는 한 통과합니다. &lt;code&gt;Ok(())&lt;/code&gt; 를 반환하는 한 &lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;/code&gt; 를 반환하는 테스트는 통과 합니다. 종료되지 않은 테스트는 통과하거나 실패하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="240e8d8b35fd6dbae3889295d03396f4179097df" translate="yes" xml:space="preserve">
          <source>Tests that use &lt;code&gt;should_panic&lt;/code&gt; can be imprecise because they only indicate that the code has caused some panic. A &lt;code&gt;should_panic&lt;/code&gt; test would pass even if the test panics for a different reason from the one we were expecting to happen. To make &lt;code&gt;should_panic&lt;/code&gt; tests more precise, we can add an optional &lt;code&gt;expected&lt;/code&gt; parameter to the &lt;code&gt;should_panic&lt;/code&gt; attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for &lt;code&gt;Guess&lt;/code&gt; in Listing 11-9 where the &lt;code&gt;new&lt;/code&gt; function panics with different messages depending on whether the value is too small or too large.</source>
          <target state="translated">&lt;code&gt;should_panic&lt;/code&gt; 을 사용하는 테스트 는 코드가 일부 패닉을 유발했음을 나타 내기 때문에 정확하지 않을 수 있습니다. &lt;code&gt;should_panic&lt;/code&gt; 테스트는 것과 다른 이유에 대한 테스트 패닉이 우리 일이 기대했던 경우에도 전달할 것입니다. 하려면 &lt;code&gt;should_panic&lt;/code&gt; 테스트가 더 정확한, 우리는 옵션으로 추가 할 수 있습니다 &lt;code&gt;expected&lt;/code&gt; 받는 매개 변수를 &lt;code&gt;should_panic&lt;/code&gt; 속성. 테스트 장치는 오류 메시지에 제공된 텍스트가 포함되어 있는지 확인합니다. 예를 들어, 값이 너무 작은 지 또는 너무 큰지에 따라 &lt;code&gt;new&lt;/code&gt; 메시지가 다른 메시지로 패닉 되는 목록 11-9에서 &lt;code&gt;Guess&lt;/code&gt; 의 수정 된 코드를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="6bb384831446531aa67968092446024f5dcdae5e" translate="yes" xml:space="preserve">
          <source>Tests whether this file type represents a directory. The result is mutually exclusive to the results of &lt;a href=&quot;struct.filetype#method.is_file&quot;&gt;&lt;code&gt;is_file&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt;&lt;code&gt;is_symlink&lt;/code&gt;&lt;/a&gt;; only zero or one of these tests may pass.</source>
          <target state="translated">이 파일 형식이 디렉토리를 나타내는 지 테스트합니다. 결과는 &lt;a href=&quot;struct.filetype#method.is_file&quot;&gt; &lt;code&gt;is_file&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt; &lt;code&gt;is_symlink&lt;/code&gt; &lt;/a&gt; 의 결과와 상호 배타적입니다 . 이러한 테스트 중 0 개 또는 1 개만 통과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47c7f108fa56b78dae837cfbc2c1b6e6d82a8892" translate="yes" xml:space="preserve">
          <source>Tests whether this file type represents a regular file. The result is mutually exclusive to the results of &lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt;&lt;code&gt;is_dir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt;&lt;code&gt;is_symlink&lt;/code&gt;&lt;/a&gt;; only zero or one of these tests may pass.</source>
          <target state="translated">이 파일 형식이 일반 파일을 나타내는 지 테스트합니다. 결과는 &lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt; &lt;code&gt;is_dir&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt; &lt;code&gt;is_symlink&lt;/code&gt; &lt;/a&gt; 의 결과와 상호 배타적입니다 . 이러한 테스트 중 0 개 또는 1 개만 통과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e2618283b789dcbc952fac3457682ad9646a29b" translate="yes" xml:space="preserve">
          <source>Tests whether this file type represents a symbolic link. The result is mutually exclusive to the results of &lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt;&lt;code&gt;is_dir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.filetype#method.is_file&quot;&gt;&lt;code&gt;is_file&lt;/code&gt;&lt;/a&gt;; only zero or one of these tests may pass.</source>
          <target state="translated">이 파일 형식이 기호 링크를 나타내는 지 테스트합니다. 결과는 &lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt; &lt;code&gt;is_dir&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.filetype#method.is_file&quot;&gt; &lt;code&gt;is_file&lt;/code&gt; &lt;/a&gt; 의 결과와 상호 배타적입니다 . 이러한 테스트 중 0 개 또는 1 개만 통과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24e8ed91cce37f2bfddb7d0a6e1b5b5dd3e13c8b" translate="yes" xml:space="preserve">
          <source>Text directionality</source>
          <target state="translated">텍스트 방향</target>
        </trans-unit>
        <trans-unit id="ece7c96ceb6b3c2888b8a50e4cc0084fdd3cc5ad" translate="yes" xml:space="preserve">
          <source>Textual Scope</source>
          <target state="translated">텍스트 범위</target>
        </trans-unit>
        <trans-unit id="f351ed281e01f153c5130339693bdde4a4318e5b" translate="yes" xml:space="preserve">
          <source>Textual representation</source>
          <target state="translated">텍스트 표현</target>
        </trans-unit>
        <trans-unit id="50a53707975aa4e011ef0d8fc19d6a0815b5a0af" translate="yes" xml:space="preserve">
          <source>Textual scope is based largely on the order that things appear in source files, and works similarly to the scope of local variables declared with &lt;code&gt;let&lt;/code&gt; except it also applies at the module level. When &lt;code&gt;macro_rules!&lt;/code&gt; is used to define a macro, the macro enters the scope after the definition (note that it can still be used recursively, since names are looked up from the invocation site), up until its surrounding scope, typically a module, is closed. This can enter child modules and even span across multiple files:</source>
          <target state="translated">텍스트 범위는 주로 소스 파일에 표시되는 순서를 기반으로 하며 모듈 수준에서도 적용되는 것을 제외하고 &lt;code&gt;let&lt;/code&gt; 으로 선언 된 로컬 변수의 범위와 유사하게 작동 합니다. 언제 &lt;code&gt;macro_rules!&lt;/code&gt; 매크로는 매크로를 정의하는 데 사용되며, 매크로는 정의 후에 범위에 들어갑니다 (이름은 호출 사이트에서 조회되므로 계속 재귀 적으로 사용할 수 있음). 주변 범위, 일반적으로 모듈이 닫힐 때까지. 자식 모듈을 입력하고 여러 파일로 확장 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3250cb346f89521461c9526f4b4c9e22ab7dec1d" translate="yes" xml:space="preserve">
          <source>Textual types</source>
          <target state="translated">텍스트 유형</target>
        </trans-unit>
        <trans-unit id="43b22d6c26a5be334da039abbdd3a863691ba7f8" translate="yes" xml:space="preserve">
          <source>Thankfully, you won't need to worry about upholding this property when deriving both &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Hash&lt;/code&gt; with &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt;.</source>
          <target state="translated">고맙게도 &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt; &lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;Hash&lt;/code&gt; 를 파생시킬 때이 속성을 유지하는 것에 대해 걱정할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d87603b9cd3744161580179aa52163b0ef139449" translate="yes" xml:space="preserve">
          <source>Thanks to static lifetime elision, you usually don't have to explicitly use 'static:</source>
          <target state="translated">정적 수명 제거 덕분에 일반적으로 명시 적으로 '정적'을 사용할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ccd80fa4141d21f8d736b44824bc5d805727e80f" translate="yes" xml:space="preserve">
          <source>Thanks to static lifetime elision, you usually don't have to explicitly use &lt;code&gt;'static&lt;/code&gt;:</source>
          <target state="translated">정적 수명 제거 덕분에 일반적으로 &lt;code&gt;'static&lt;/code&gt; 을 명시 적으로 사용할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9bdae0de8a5a5798d4caf783e96f237ed5528f2b" translate="yes" xml:space="preserve">
          <source>Thanks to this process, you can always check out the next build of Rust and verify for yourself that it&amp;rsquo;s easy to upgrade to: if a beta release doesn&amp;rsquo;t work as expected, you can report it to the team and get it fixed before the next stable release happens! Breakage in a beta release is relatively rare, but &lt;code&gt;rustc&lt;/code&gt; is still a piece of software, and bugs do exist.</source>
          <target state="translated">이 프로세스 덕분에 항상 다음 Rust 빌드를 확인하고 업그레이드하기가 쉬운 지 직접 확인할 수 있습니다. 베타 릴리스가 예상대로 작동하지 않으면 팀에보고하여 문제를 해결하십시오. 다음 안정적인 릴리스가 발생합니다! 베타 릴리스의 &lt;code&gt;rustc&lt;/code&gt; 은 비교적 드물지만 rustc 는 여전히 소프트웨어의 일부이며 버그가 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b38f3306b86b6513f0666ee48835c2b21219b2" translate="yes" xml:space="preserve">
          <source>That first part is done by us: when we call &lt;code&gt;String::from&lt;/code&gt;, its implementation requests the memory it needs. This is pretty much universal in programming languages.</source>
          <target state="translated">첫 번째 부분은 우리가 수행합니다. &lt;code&gt;String::from&lt;/code&gt; 을 호출 하면 구현시 필요한 메모리가 필요합니다. 이것은 프로그래밍 언어에서 거의 보편적입니다.</target>
        </trans-unit>
        <trans-unit id="1348e5b21c821f227473000afcbce413f66d2f49" translate="yes" xml:space="preserve">
          <source>That is, for each element &lt;code&gt;a&lt;/code&gt; and its following element &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt; must hold. If the iterator yields exactly zero or one element, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">즉, 각 요소 &lt;code&gt;a&lt;/code&gt; 와 그 후속 요소 &lt;code&gt;b&lt;/code&gt; 에 &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 있어야합니다. 반복자가 정확히 0 개 또는 하나의 요소를 생성하면 &lt;code&gt;true&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="bf20cf0a5a4308c50df24aa720ae0a415bab9777" translate="yes" xml:space="preserve">
          <source>That is, for each element &lt;code&gt;a&lt;/code&gt; and its following element &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt; must hold. If the slice yields exactly zero or one element, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">즉, 각 요소 &lt;code&gt;a&lt;/code&gt; 와 그 후속 요소 &lt;code&gt;b&lt;/code&gt; 에 &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 있어야합니다. 슬라이스가 정확히 0 또는 하나의 요소를 생성하면 &lt;code&gt;true&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6141d9d942518cd742366c4e9a373eaeca5ba99a" translate="yes" xml:space="preserve">
          <source>That number of bytes is always between 1 and 4, inclusive.</source>
          <target state="translated">이 바이트 수는 항상 1에서 4 사이입니다.</target>
        </trans-unit>
        <trans-unit id="5636ef2e6fa0c7ceabc2956a6a83de732290f283" translate="yes" xml:space="preserve">
          <source>That said, leaking resources such as memory or I/O objects is usually undesirable, so &lt;code&gt;forget&lt;/code&gt; is only recommended for specialized use cases like those shown below.</source>
          <target state="translated">즉, 메모리 또는 I / O 객체와 같은 리소스 누수는 일반적으로 바람직하지 않으므로 &lt;code&gt;forget&lt;/code&gt; 은 아래에 표시된 것과 같은 특수한 사용 사례에만 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="bb0090f499faa8dbbaeb7f14d05f8e092483990d" translate="yes" xml:space="preserve">
          <source>That said, leaking resources such as memory or I/O objects is usually undesirable. The need comes up in some specialized use cases for FFI or unsafe code, but even then, &lt;a href=&quot;struct.manuallydrop&quot;&gt;&lt;code&gt;ManuallyDrop&lt;/code&gt;&lt;/a&gt; is typically preferred.</source>
          <target state="translated">즉, 메모리 또는 I / O 개체와 같은 리소스 누출은 일반적으로 바람직하지 않습니다. FFI 또는 안전하지 않은 코드에 대한 일부 특수한 사용 사례에서 필요가 발생하지만, 그 경우에도 일반적으로 &lt;a href=&quot;struct.manuallydrop&quot;&gt; &lt;code&gt;ManuallyDrop&lt;/code&gt; &lt;/a&gt; 이 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="44e204c683273a7064bf611cb21bf25b6a58ab5e" translate="yes" xml:space="preserve">
          <source>That said, the implementation should provide a correct estimation, because otherwise it would be a violation of the trait's protocol.</source>
          <target state="translated">즉, 구현시 특성의 프로토콜을 위반할 수 있으므로 올바른 추정값을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="7bf3790580feeb3b9968c1d5ee569f07fe6dc889" translate="yes" xml:space="preserve">
          <source>That said, there is no wrong way to read this book. Read it however you feel helps you best.</source>
          <target state="translated">즉,이 책을 읽는 잘못된 방법은 없습니다. 그러나 당신이 가장 도움이된다고 느끼면 읽어보십시오.</target>
        </trans-unit>
        <trans-unit id="947746e61ef4047bc2347841bf565d094e7bdec0" translate="yes" xml:space="preserve">
          <source>That solves our problem! With only &lt;code&gt;s2&lt;/code&gt; valid, when it goes out of scope, it alone will free the memory, and we&amp;rsquo;re done.</source>
          <target state="translated">그것은 우리의 문제를 해결합니다! 유효 범위가 &lt;code&gt;s2&lt;/code&gt; 인 경우 에만 s2 만 유효하므로 메모리 만 확보하면 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="9ce801650086879dbc3fc82fa6315949a2552c96" translate="yes" xml:space="preserve">
          <source>That was a bit of a whirlwind tour of unwind safety, but for more information about unwind safety and how it applies to Rust, see an &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;associated RFC&lt;/a&gt;.</source>
          <target state="translated">언 와인드 안전에 대한 회오리 바람 투어 였지만, 언 와인드 안전성과 Rust에 적용되는 방법에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;관련 RFC를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="92b56514bc3604cf70d965940d81ed28035240b2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s 18 bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type is, those bytes look like this:</source>
          <target state="translated">그것은 18 바이트이며 컴퓨터가 궁극적 으로이 데이터를 저장하는 방법입니다. Rust의 &lt;code&gt;char&lt;/code&gt; 유형 인 유니 코드 스칼라 값으로 보면 해당 바이트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9fac4c3e9f71b06878dbbb47f3ce2814227f227f" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a lot of &lt;code&gt;match&lt;/code&gt;! The &lt;code&gt;match&lt;/code&gt; expression is very useful but also very much a primitive. In Chapter 13, you&amp;rsquo;ll learn about closures; the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type has many methods that accept a closure and are implemented using &lt;code&gt;match&lt;/code&gt; expressions. Using those methods will make your code more concise. A more seasoned Rustacean might write this code instead of Listing 9-5:</source>
          <target state="translated">그것은 많은 &lt;code&gt;match&lt;/code&gt; ! &lt;code&gt;match&lt;/code&gt; 표현은 매우 원시적 매우 유용합니다뿐만 아니라. 13 장에서는 클로저에 대해 배웁니다. &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 형식은 폐쇄를 받아들이고 사용하여 구현하는 많은 방법이있다 &lt;code&gt;match&lt;/code&gt; 표현. 이러한 방법을 사용하면 코드가 더 간결 해집니다. 노련한 Rustacean이 Listing 9-5 대신이 코드를 작성할 수있다.</target>
        </trans-unit>
        <trans-unit id="ef238338d4e12acdba68729fda27f2648f9a373c" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a lot of output! The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using &lt;code&gt;cargo build&lt;/code&gt; or &lt;code&gt;cargo run&lt;/code&gt; without the &lt;code&gt;--release&lt;/code&gt; flag, as we have here.</source>
          <target state="translated">그것은 많은 출력입니다! 표시되는 정확한 출력은 운영 체제 및 Rust 버전에 따라 다를 수 있습니다. 이 정보로 역 추적을 얻으려면 디버그 기호를 활성화해야합니다. &lt;code&gt;--release&lt;/code&gt; 없이 &lt;code&gt;cargo build&lt;/code&gt; 또는 &lt;code&gt;cargo run&lt;/code&gt; 을 사용할 때 디버그 기호가 기본적으로 활성화됩니다. 플래그 .</target>
        </trans-unit>
        <trans-unit id="1b9244a451d65d27f90f013b616e273e2c23a8a2" translate="yes" xml:space="preserve">
          <source>That's it! Let's dig into iterators.</source>
          <target state="translated">그게 다야! 반복자를 파헤쳐 보자.</target>
        </trans-unit>
        <trans-unit id="061168032f743f39ddf71cf9c7a9d9f5d6f181f3" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; usage of this type as a queue is to use &lt;a href=&quot;#method.push_back&quot;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt; to add to the queue, and &lt;a href=&quot;#method.pop_front&quot;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt; to remove from the queue. &lt;a href=&quot;#method.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; push onto the back in this manner, and iterating over &lt;code&gt;VecDeque&lt;/code&gt; goes front to back.</source>
          <target state="translated">이 유형을 대기열로 사용하는 &quot;기본&quot;사용법은 &lt;a href=&quot;#method.push_back&quot;&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/a&gt; 을 사용 하여 대기열에 추가하고 &lt;a href=&quot;#method.pop_front&quot;&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/a&gt; 를 사용하여 대기열에서 제거하는 것입니다. 이런 식으로 후면에 푸시를 &lt;a href=&quot;#method.extend&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;#method.append&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; 하면 &lt;code&gt;VecDeque&lt;/code&gt; 를 반복하여 앞뒤로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="e1996b7a38e8030e5ba09e25339c72996ff81148" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; usage of this type as a queue is to use &lt;a href=&quot;../struct.vecdeque#method.push_back&quot;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt; to add to the queue, and &lt;a href=&quot;../struct.vecdeque#method.pop_front&quot;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt; to remove from the queue. &lt;a href=&quot;../struct.vecdeque#method.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../struct.vecdeque#method.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; push onto the back in this manner, and iterating over &lt;code&gt;VecDeque&lt;/code&gt; goes front to back.</source>
          <target state="translated">큐 &lt;a href=&quot;../struct.vecdeque#method.push_back&quot;&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/a&gt; 유형의 &quot;기본&quot;사용법은 push_back 을 사용 하여 큐에 추가하고 &lt;a href=&quot;../struct.vecdeque#method.pop_front&quot;&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/a&gt; 를 큐에서 제거하는 것입니다. 이러한 방식으로 푸시를 &lt;a href=&quot;../struct.vecdeque#method.extend&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;../struct.vecdeque#method.append&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; 하면 &lt;code&gt;VecDeque&lt;/code&gt; 를 반복하는 작업 이 앞뒤로 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="6e8660a906a07f3cb76ce3714efc3b35a643f54a" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; usage of this type as a queue is to use &lt;a href=&quot;struct.vecdeque#method.push_back&quot;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt; to add to the queue, and &lt;a href=&quot;struct.vecdeque#method.pop_front&quot;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt; to remove from the queue. &lt;a href=&quot;struct.vecdeque#method.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.vecdeque#method.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; push onto the back in this manner, and iterating over &lt;code&gt;VecDeque&lt;/code&gt; goes front to back.</source>
          <target state="translated">큐 &lt;a href=&quot;struct.vecdeque#method.push_back&quot;&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/a&gt; 유형의 &quot;기본&quot;사용법은 push_back 을 사용 하여 큐에 추가하고 &lt;a href=&quot;struct.vecdeque#method.pop_front&quot;&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/a&gt; 를 큐에서 제거하는 것입니다. 이러한 방식으로 푸시를 &lt;a href=&quot;struct.vecdeque#method.extend&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;struct.vecdeque#method.append&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; 하면 &lt;code&gt;VecDeque&lt;/code&gt; 를 반복하는 작업 이 앞뒤로 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="01cb9e838bce9598fdfd4c3684f101808c1294f8" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Advanced Lifetimes&amp;rdquo; section in Chapter 19 was removed because compiler improvements have made the constructs in that section even rarer.</source>
          <target state="translated">19 장의 &quot;고급 수명&quot;섹션은 컴파일러 개선으로 인해 해당 섹션의 구문이 더 드물게 만들어 졌기 때문에 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="36f389fc23a4edc2c2a963efce47f9899bcc8519" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Advanced Lifetimes&amp;rdquo; section of Chapter 19 was removed because compiler improvements have made the constructs in that section even rarer.</source>
          <target state="translated">컴파일러 개선으로 해당 섹션의 구성이 훨씬 더 어려워 졌기 때문에 19 장의 &quot;고급 수명&quot;섹션이 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="f99557dc0a8fdf7a63f0792d647f548b4ff6f7ab" translate="yes" xml:space="preserve">
          <source>The 128-bit signed integer type.</source>
          <target state="translated">128 비트 부호있는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="2ecb830f3b64176d279185c7c171382698dc346b" translate="yes" xml:space="preserve">
          <source>The 128-bit unsigned integer type.</source>
          <target state="translated">128 비트 부호없는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="024e734140c83218cfd913643692a04c708db5ec" translate="yes" xml:space="preserve">
          <source>The 16-bit signed integer type.</source>
          <target state="translated">16 비트 부호있는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="c45d15aa8a84f450baba97f342935672e6fa7c43" translate="yes" xml:space="preserve">
          <source>The 16-bit unsigned integer type.</source>
          <target state="translated">16 비트 부호없는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="fca5433f25a52ee7287767b1930704d918391065" translate="yes" xml:space="preserve">
          <source>The 2015 edition does not allow use declarations to reference the &lt;a href=&quot;extern-crates#extern-prelude&quot;&gt;extern prelude&lt;/a&gt;. Thus &lt;a href=&quot;extern-crates&quot;&gt;&lt;code&gt;extern crate&lt;/code&gt;&lt;/a&gt; declarations are still required in 2015 to reference an external crate in a use declaration. Beginning with the 2018 edition, use declarations can specify an external crate dependency the same way &lt;code&gt;extern crate&lt;/code&gt; can.</source>
          <target state="translated">2015 버전에서는 사용 선언이 &lt;a href=&quot;extern-crates#extern-prelude&quot;&gt;extern prelude&lt;/a&gt; 를 참조 할 수 없습니다 . 따라서 2015 년에도 사용 선언에서 외부 상자를 참조하기 위해 외부 &lt;a href=&quot;extern-crates&quot;&gt; &lt;code&gt;extern crate&lt;/code&gt; &lt;/a&gt; 선언이 필요합니다. 2018 버전부터 사용 선언은 &lt;code&gt;extern crate&lt;/code&gt; 와 동일한 방식으로 외부 상자 종속성을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6d857578ac6c78bfa58339fa5a83d29b7a47348" translate="yes" xml:space="preserve">
          <source>The 2018 Edition of the Rust language includes a number of improvements that make Rust more ergonomic and easier to learn. This iteration of the book contains a number of changes to reflect those improvements:</source>
          <target state="translated">2018 년 버전의 Rust 언어에는 Rust를보다 인체 공학적이고 배우기 쉽게 만드는 여러 개선 사항이 포함되어 있습니다. 이 책에는 이러한 개선 사항을 반영하기 위해 여러 가지 변경 사항이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="26b6de1c048ad3b08c5d50eb1e62ebf661747fc3" translate="yes" xml:space="preserve">
          <source>The 2018 Edition of the Rust language includes a number of improvements that make Rust more ergonomic and easier to learn. This printing of the book contains a number of changes to reflect those improvements:</source>
          <target state="translated">Rust 언어의 2018 년판에는 Rust를보다 인체 공학적이고 배우기 쉽게 해주는 여러 가지 개선 사항이 포함되어 있습니다. 이 책에는 다음과 같은 개선 사항이 반영되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c35b45536addab0f127b7ef2a73381bf5aab740" translate="yes" xml:space="preserve">
          <source>The 32-bit floating point type.</source>
          <target state="translated">32 비트 부동 소수점 유형</target>
        </trans-unit>
        <trans-unit id="ede6acb001e744d94e80e43f20515bed53288286" translate="yes" xml:space="preserve">
          <source>The 32-bit signed integer type.</source>
          <target state="translated">32 비트 부호있는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="a9e99a82ec2d26441031e5f8781a5ebb65a83e0e" translate="yes" xml:space="preserve">
          <source>The 32-bit unsigned integer type.</source>
          <target state="translated">32 비트 부호없는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="13cb697c6b75c7757e9c51749eb9c614ddc9a70f" translate="yes" xml:space="preserve">
          <source>The 64-bit floating point type.</source>
          <target state="translated">64 비트 부동 소수점 유형</target>
        </trans-unit>
        <trans-unit id="748e7d28f53e7a36937bb25af3f1a76e6a491ad6" translate="yes" xml:space="preserve">
          <source>The 64-bit signed integer type.</source>
          <target state="translated">64 비트 부호있는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="25aeddd62dc36790a2166200538648d83779c0d0" translate="yes" xml:space="preserve">
          <source>The 64-bit unsigned integer type.</source>
          <target state="translated">부호없는 64 비트 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="0825a8c90a6add467ca53950b645a26af9033007" translate="yes" xml:space="preserve">
          <source>The 8-bit signed integer type.</source>
          <target state="translated">8 비트 부호있는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="6d1f46b751b47e95357a0c40c6e78729c3531e1e" translate="yes" xml:space="preserve">
          <source>The 8-bit unsigned integer type.</source>
          <target state="translated">8 비트 부호없는 정수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="b568b58db2fe5b477d28998d21858de250eecb32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.clone&quot;&gt;&lt;code&gt;Arc::clone(&amp;amp;from)&lt;/code&gt;&lt;/a&gt; syntax is the most idiomatic because it conveys more explicitly the meaning of the code. In the example above, this syntax makes it easier to see that this code is creating a new reference rather than copying the whole content of foo.</source>
          <target state="translated">&lt;a href=&quot;#method.clone&quot;&gt; &lt;code&gt;Arc::clone(&amp;amp;from)&lt;/code&gt; &lt;/a&gt; 좀 더 명시 적으로 코드의 의미를 전달하기 때문에 구문은 대부분의 관용적이다. 위 예제에서이 구문을 사용하면이 코드가 foo의 전체 내용을 복사하지 않고 새로운 참조를 작성하고 있음을 쉽게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd0354b8e891bd703f8ef8a8ce8547a17dc2e4cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; method will connect the socket to a peer.</source>
          <target state="translated">&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt; 방법은 피어에 소켓을 연결합니다.</target>
        </trans-unit>
        <trans-unit id="de66ae551d77056e5d10cff2c3fd9dbcc9b63e6e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; method will connect this socket to a remote address. This method will fail if the socket is not connected.</source>
          <target state="translated">&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt; 방법은 리모트 주소에 소켓을 연결합니다. 소켓이 연결되어 있지 않으면이 방법이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="3822ea1855bf914e5a814986732fc459619fc61c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method can emulate &lt;code&gt;truncate&lt;/code&gt;, but causes the excess elements to be returned instead of dropped.</source>
          <target state="translated">&lt;a href=&quot;#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 방법은 에뮬레이션 할 수 있습니다 &lt;code&gt;truncate&lt;/code&gt; 하지만, 반환 대신에 드롭 할 수있는 여분의 요소가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a9d6dbd0eeefdb718b7113fea8088d62bd58b0d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method has a default implementation, so you usually shouldn't implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense.</source>
          <target state="translated">&lt;a href=&quot;#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt; 은 일반적으로 그것을 구현해서는 안 방법은 기본 구현이 있습니다. 그러나 기본값보다 성능이 뛰어난 구현을 제공 할 수 있으므로이 경우 재정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="dade93dc3cf6b97db5474305c3207f7c692d153c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; adapter is very useful, but only when the closure argument produces values. If it produces an iterator instead, there's an extra layer of indirection. &lt;code&gt;flat_map()&lt;/code&gt; will remove this extra layer on its own.</source>
          <target state="translated">&lt;a href=&quot;#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 어댑터는 매우 유용하지만, 폐쇄 인수는 값을 생성하는 경우에만 사용할 수 있습니다. 대신 이터레이터를 생성하면 추가 간접 계층이 있습니다. &lt;code&gt;flat_map()&lt;/code&gt; 은이 추가 레이어를 자체적으로 제거합니다.</target>
        </trans-unit>
        <trans-unit id="7a52c1262c15b7898ef7ba52e5c11aa28470cc03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; method will actually check that the provided &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; does not have 0 bytes in the middle, and return an error if it finds one.</source>
          <target state="translated">&lt;a href=&quot;#method.new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 방법은 실제로 한 것으로 확인한다 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 중간에 0 바이트가없는, 찾은 경우 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="156348d96d775ff156fee076f0f98b0084e3469d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; method may be used to send data to the specified address. &lt;a href=&quot;#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.recv_from&quot;&gt;&lt;code&gt;recv_from&lt;/code&gt;&lt;/a&gt; will only receive data from that address.</source>
          <target state="translated">&lt;a href=&quot;#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 방법은 지정된 주소에 데이터를 전송하는데 사용될 수있다. &lt;a href=&quot;#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#method.recv_from&quot;&gt; &lt;code&gt;recv_from&lt;/code&gt; &lt;/a&gt; 은 해당 주소에서만 데이터를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="1ad11576c65e9334d7573beaf36142b4de74e09c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#primitive-representations&quot;&gt;primitive representations&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#primitive-representations&quot;&gt;원시적 인 표현&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed6b3d78fe45feec8a5741e2a3ac93f1ed3a19d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#tymethod.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt; 방법은 어댑터와 모든 버퍼링 된 데이터가 '진정한 싱크'에 밀려되었음을 보장하기위한 명시 적 버퍼 자신을 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8a62cb575b08d38c732e1bba9328976a264fdb19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method will attempt to write some data into the object, returning how many bytes were successfully written.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 방법은 많은 바이트가 성공적으로 기록 된 방법 반환 대상에 일부 데이터를 작성하려고합니다.</target>
        </trans-unit>
        <trans-unit id="8fcdedc3c9e84c7fa96e2530650c1bc070bc790b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt;&lt;code&gt;async move&lt;/code&gt; block&lt;/a&gt; in the body captures all function parameters, including those that are unused or bound to a &lt;code&gt;_&lt;/code&gt; pattern. This ensures that function parameters are dropped in the same order as they would be if the function were not async, except that the drop occurs when the returned future has been fully awaited.</source>
          <target state="translated">본문 의 &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt; &lt;code&gt;async move&lt;/code&gt; 블록&lt;/a&gt; 은 사용되지 않거나 &lt;code&gt;_&lt;/code&gt; 패턴에 바인딩 된 매개 변수를 포함하여 모든 함수 매개 변수를 캡처합니다 . 이렇게하면 반환 된 future가 완전히 기다렸을 때 드롭이 발생한다는 점을 제외하고 함수가 비동기가 아닌 경우와 동일한 순서로 함수 매개 변수가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="c78f52a30365dea52628c4ade488db0345ffa3ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.eprint&quot;&gt;&lt;code&gt;eprint!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../macro.eprintln&quot;&gt;&lt;code&gt;eprintln!&lt;/code&gt;&lt;/a&gt; macros are identical to &lt;a href=&quot;../macro.print&quot;&gt;&lt;code&gt;print!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../macro.println&quot;&gt;&lt;code&gt;println!&lt;/code&gt;&lt;/a&gt;, respectively, except they emit their output to stderr.</source>
          <target state="translated">&lt;a href=&quot;../macro.eprint&quot;&gt; &lt;code&gt;eprint!&lt;/code&gt; &lt;/a&gt;그리고 &lt;a href=&quot;../macro.eprintln&quot;&gt; &lt;code&gt;eprintln!&lt;/code&gt; &lt;/a&gt;매크로는 &lt;a href=&quot;../macro.print&quot;&gt; &lt;code&gt;print!&lt;/code&gt; &lt;/a&gt; 와 동일합니다 ! 그리고 &lt;a href=&quot;../macro.println&quot;&gt; &lt;code&gt;println!&lt;/code&gt; &lt;/a&gt;출력을 stderr로 방출하는 것을 제외하고는 각각</target>
        </trans-unit>
        <trans-unit id="15b30e899910805c24344f039598ed4f0cfd76f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is intended to be familiar to those coming from C's &lt;code&gt;printf&lt;/code&gt;/&lt;code&gt;fprintf&lt;/code&gt; functions or Python's &lt;code&gt;str.format&lt;/code&gt; function.</source>
          <target state="translated">&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;매크로는 C의 &lt;code&gt;printf&lt;/code&gt; / &lt;code&gt;fprintf&lt;/code&gt; 함수 또는 Python의 &lt;code&gt;str.format&lt;/code&gt; 함수 에서 오는 사람들에게 친숙 합니다.</target>
        </trans-unit>
        <trans-unit id="5d076b83cf0704732b7b9eb8c03c4bfbdeaffd03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro will safely create an instance of this structure. The macro validates the format string at compile-time so usage of the &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.format&quot;&gt;&lt;code&gt;format()&lt;/code&gt;&lt;/a&gt; functions can be safely performed.</source>
          <target state="translated">&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;매크로는이 구조의 인스턴스를 안전하게 생성합니다. 매크로는 컴파일 시간에 형식 문자열의 유효성을 검사하므로 &lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.format&quot;&gt; &lt;code&gt;format()&lt;/code&gt; &lt;/a&gt; 함수를 안전하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1da9aedd3913426ccb3cbeae460a449f6f18fc2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro will safely create an instance of this structure. The macro validates the format string at compile-time so usage of the &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; functions can be safely performed.</source>
          <target state="translated">&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;매크로는이 구조의 인스턴스를 안전하게 만듭니다. 이 매크로는 컴파일 타임에 형식 문자열의 유효성을 검사하므로 &lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt; 기능을 안전하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6220f58fc37e6b8b0afc01735948c86469d85de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.vec&quot;&gt;&lt;code&gt;vec!&lt;/code&gt;&lt;/a&gt; macro is provided to make initialization more convenient:</source>
          <target state="translated">&lt;a href=&quot;../macro.vec&quot;&gt; &lt;code&gt;vec!&lt;/code&gt; &lt;/a&gt;초기화가 더 편리하도록 매크로가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="d6015eed300b7de406449e79cfdc1aa2f387182e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macros-by-example#the-macro_use-attribute&quot;&gt;&lt;code&gt;macro_use&lt;/code&gt; attribute&lt;/a&gt; works as usual and import the macro names into the macro-use prelude.</source>
          <target state="translated">&lt;a href=&quot;../macros-by-example#the-macro_use-attribute&quot;&gt; &lt;code&gt;macro_use&lt;/code&gt; 의 속성&lt;/a&gt; 평소와 같이 작동하고 매크로 사용 전주곡에 매크로 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="3ee79a0bb859db06f06e2ddc850e161230b3ef29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; constraint is because the closure will need to be passed &lt;em&gt;by value&lt;/em&gt; from the thread where it is spawned to the new thread. Its return value will need to be passed from the new thread to the thread where it is &lt;code&gt;join&lt;/code&gt;ed. As a reminder, the &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; marker trait expresses that it is safe to be passed from thread to thread. &lt;a href=&quot;../marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; expresses that it is safe to have a reference be passed from thread to thread.</source>
          <target state="translated">&lt;a href=&quot;../marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; 폐쇄가 전달해야하므로 제약은 &lt;em&gt;값&lt;/em&gt; 이 새로운 스레드로 만들어지는 스레드에서. 반환 값은 새 스레드에서 &lt;code&gt;join&lt;/code&gt; 스레드로 전달되어야합니다 . 미리 알림으로, &lt;a href=&quot;../marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; 가 스레드에서 전달하는 것이 안전 마커 특성의 표현 스레드입니다. &lt;a href=&quot;../marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; 는 스레드에서 스레드로 참조를 전달하는 것이 안전하다는 것을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9c69caf5cbc6ae5668ac370ea6aa28c0348ce679" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../paths&quot;&gt;path&lt;/a&gt; to an associated item is any path to the implementing type, followed by the associated item's identifier as the final path component.</source>
          <target state="translated">&lt;a href=&quot;../paths&quot;&gt;경로&lt;/a&gt; 연관된 항목에 대한 최종 경로 구성 요소와 연관된 항목의 식별자 뒤에 구현 형 어떤 경로이다.</target>
        </trans-unit>
        <trans-unit id="1dedee4df1c883aa9e7db0132fc24154a02120fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pin/struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt; type is used instead to prevent moves through the type system. Pointers &lt;code&gt;P&amp;lt;T&amp;gt;&lt;/code&gt; wrapped in the &lt;a href=&quot;../pin/struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; wrapper can't be moved out of. See the &lt;a href=&quot;../pin/index&quot;&gt;&lt;code&gt;pin&lt;/code&gt; module&lt;/a&gt; documentation for more information on pinning.</source>
          <target state="translated">&lt;a href=&quot;../pin/struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; 타입 타입 시스템을 통해 이동을 방지하기 위해 대신 사용된다. &lt;a href=&quot;../pin/struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; &lt;/a&gt; 래퍼에 래핑 된 포인터 &lt;code&gt;P&amp;lt;T&amp;gt;&lt;/code&gt; 는 밖으로 이동할 수 없습니다. 고정에 대한 자세한 내용은 &lt;a href=&quot;../pin/index&quot;&gt; &lt;code&gt;pin&lt;/code&gt; &lt;/a&gt; 모듈 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a4c6d762c492370e5bdcdefde3e4fc5cf31a9b6e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../reference/items/unions&quot;&gt;Rust equivalent of a C-style union&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/items/unions&quot;&gt;C 스타일 공용체에 해당&lt;/a&gt; 하는 녹 입니다.</target>
        </trans-unit>
        <trans-unit id="86cbe7690d77cc63e21bdfee9a1e9528110648c5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../reference/types/trait-object&quot;&gt;Reference&lt;/a&gt; has more information about trait objects, their limitations and the differences between editions.</source>
          <target state="translated">&lt;a href=&quot;../reference/types/trait-object&quot;&gt;참조&lt;/a&gt; 특성 객체, 자신의 한계와 버전의 차이점에 대한 자세한 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb6f479476a4a73b474dd9bb423ce981f3c3f329" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of this result indicates that the primitive was not poisoned, and the &lt;code&gt;Guard&lt;/code&gt; is contained within. The &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant indicates that the primitive was poisoned. Note that the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant &lt;em&gt;also&lt;/em&gt; carries the associated guard, and it can be acquired through the &lt;a href=&quot;struct.poisonerror#method.into_inner&quot;&gt;&lt;code&gt;into_inner&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 결과 의 &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 변형은 프리미티브가 중독되지 않았으며 &lt;code&gt;Guard&lt;/code&gt; 가 안에 있음을 나타냅니다 . &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 변형은 원시 중독되었음을 나타냅니다. 참고는 것을 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 변형 &lt;em&gt;도&lt;/em&gt; 관련 경비를 전달하고,이를 통해 획득 할 수 &lt;a href=&quot;struct.poisonerror#method.into_inner&quot;&gt; &lt;code&gt;into_inner&lt;/code&gt; 의&lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="79df059e358a4241ab821f0fe6e918cdbba9f208" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; trait is a supertrait of &lt;code&gt;Copy&lt;/code&gt;, so it also needs compiler generated implementations. It is implemented by the compiler for the following types:</source>
          <target state="translated">&lt;a href=&quot;../std/clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 의 supertrait 인 특성 &lt;code&gt;Copy&lt;/code&gt; , 그래서 그것은 또한 컴파일러 생성 구현을 필요로한다. 다음 유형의 컴파일러에 의해 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="90ba5aefe61d573b28b76d88a60eabe0413d5c63" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; trait changes the semantics of a type implementing it. Values whose type implements &lt;code&gt;Copy&lt;/code&gt; are copied rather than moved upon assignment.</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 특성은 그것을 구현하는 유형의 의미를 변경합니다. 유형이 &lt;code&gt;Copy&lt;/code&gt; 를 구현하는 값은 할당시 이동되지 않고 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="eeefbcb93aa9d7429fc3ba4a3a1ce956f75d5cfc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; trait changes the semantics of a type implementing it. Values whose type implements &lt;code&gt;Copy&lt;/code&gt; are copied rather than moved upon assignment. &lt;code&gt;Copy&lt;/code&gt; cannot be implemented for types which implement &lt;code&gt;Drop&lt;/code&gt;, or which have fields that are not &lt;code&gt;Copy&lt;/code&gt;. &lt;code&gt;Copy&lt;/code&gt; is implemented by the compiler for</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 특성은 그것을 구현하는 유형의 의미를 변경합니다. 유형이 구현 값 &lt;code&gt;Copy&lt;/code&gt; 복사보다는 할당에 이동됩니다. &lt;code&gt;Drop&lt;/code&gt; 을 구현 하거나 &lt;code&gt;Copy&lt;/code&gt; 가 아닌 필드가있는 유형에 대해서는 &lt;code&gt;Copy&lt;/code&gt; 를 구현할 수 없습니다 . 컴파일러는 &lt;code&gt;Copy&lt;/code&gt; 위해</target>
        </trans-unit>
        <trans-unit id="0e14c3a80117b6ea49358dfdccbdf20f1c51a89c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; trait indicates that a value of this type is safe to send from one thread to another.</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; 특성은이 유형의 값이 다른 하나 개의 스레드에서 보내는 것이 안전을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="974ae2ba65e9e772d3c59ca8b9d11adff4f54e38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt;&lt;code&gt;RefUnwindSafe&lt;/code&gt;&lt;/a&gt; traits are &lt;em&gt;auto traits&lt;/em&gt;. Auto traits have special properties.</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../std/marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../std/marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt; &lt;code&gt;RefUnwindSafe&lt;/code&gt; 의&lt;/a&gt; 특성은 &lt;em&gt;자동 특성&lt;/em&gt; . 자동 특성에는 특별한 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bd79bdd63f1cb15136ac63579db2daa51f56797" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt;&lt;code&gt;RefUnwindSafe&lt;/code&gt;&lt;/a&gt; traits are &lt;em&gt;auto traits&lt;/em&gt;. Auto traits have special properties.</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../std/marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt; &lt;code&gt;RefUnwindSafe&lt;/code&gt; &lt;/a&gt; 특성은 &lt;em&gt;자동 특성&lt;/em&gt; . 자동 특성에는 특별한 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="292a56639a943e7a95497bb0cf72fbedd7460764" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.sized&quot;&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt; trait indicates that the size of this type is known at compile-time; that is, it's not a &lt;a href=&quot;dynamically-sized-types&quot;&gt;dynamically sized type&lt;/a&gt;. &lt;a href=&quot;types/parameters&quot;&gt;Type parameters&lt;/a&gt; are &lt;code&gt;Sized&lt;/code&gt; by default. &lt;code&gt;Sized&lt;/code&gt; is always implemented automatically by the compiler, not by &lt;a href=&quot;items/implementations&quot;&gt;implementation items&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.sized&quot;&gt; &lt;code&gt;Sized&lt;/code&gt; &lt;/a&gt; 특성은 이러한 유형의 크기를 컴파일 시간에 공지되어 있음을 나타내고 즉, &lt;a href=&quot;dynamically-sized-types&quot;&gt;동적 크기의 유형이&lt;/a&gt; 아닙니다 . &lt;a href=&quot;types/parameters&quot;&gt;유형 매개 변수&lt;/a&gt; 는 기본적으로 &lt;code&gt;Sized&lt;/code&gt; 됩니다. &lt;code&gt;Sized&lt;/code&gt; 는 항상 &lt;a href=&quot;items/implementations&quot;&gt;구현 항목이&lt;/a&gt; 아닌 컴파일러에 의해 자동으로 구현됩니다. .</target>
        </trans-unit>
        <trans-unit id="bbed2a3ef9298a62094e0bee99c5f47d5609e39c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; trait indicates that a value of this type is safe to share between multiple threads. This trait must be implemented for all types used in immutable &lt;a href=&quot;items/static-items&quot;&gt;&lt;code&gt;static&lt;/code&gt; items&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../std/marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt; 특성은이 유형의 값은 여러 스레드 간의 공유에 안전하다는 것을 나타냅니다. 이 특성은 변경 불가능한 &lt;a href=&quot;items/static-items&quot;&gt; &lt;code&gt;static&lt;/code&gt; 항목에&lt;/a&gt; 사용 된 모든 유형에 대해 구현되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="0bd4f0026aa17cd077440ff412c90263cb35c5bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; trait provides a &lt;a href=&quot;destructors&quot;&gt;destructor&lt;/a&gt;, to be run whenever a value of this type is to be destroyed.</source>
          <target state="translated">&lt;a href=&quot;../std/ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt; 제공 특성 &lt;a href=&quot;destructors&quot;&gt;소멸자&lt;/a&gt; ,이 유형의 값이 파괴 될 때마다 실행된다.</target>
        </trans-unit>
        <trans-unit id="767089bdc12afceff4b8eaec0f0a325f5d336e5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/primitive.str#method.parse&quot;&gt;&lt;code&gt;parse&lt;/code&gt; method on strings&lt;/a&gt; parses a string into some kind of number. Because this method can parse a variety of number types, we need to tell Rust the exact number type we want by using &lt;code&gt;let guess: u32&lt;/code&gt;. The colon (&lt;code&gt;:&lt;/code&gt;) after &lt;code&gt;guess&lt;/code&gt; tells Rust we&amp;rsquo;ll annotate the variable&amp;rsquo;s type. Rust has a few built-in number types; the &lt;code&gt;u32&lt;/code&gt; seen here is an unsigned, 32-bit integer. It&amp;rsquo;s a good default choice for a small positive number. You&amp;rsquo;ll learn about other number types in Chapter 3. Additionally, the &lt;code&gt;u32&lt;/code&gt; annotation in this example program and the comparison with &lt;code&gt;secret_number&lt;/code&gt; means that Rust will infer that &lt;code&gt;secret_number&lt;/code&gt; should be a &lt;code&gt;u32&lt;/code&gt; as well. So now the comparison will be between two values of the same type!</source>
          <target state="translated">&lt;a href=&quot;../std/primitive.str#method.parse&quot;&gt;문자열&lt;/a&gt; 의 &lt;code&gt;parse&lt;/code&gt; 방법 은 문자열을 어떤 종류의 숫자로 구문 분석합니다. 이 방법은 다양한 숫자 유형을 구문 분석 할 수 있기 때문에 &lt;code&gt;let guess: u32&lt;/code&gt; 사용하여 Rust에 원하는 정확한 숫자 유형을 알려야합니다 . 콜론 ( &lt;code&gt;:&lt;/code&gt; ) 이후 &lt;code&gt;guess&lt;/code&gt; 우리가 변수의 유형을 주석 것 녹 알려줍니다. Rust에는 몇 가지 내장 숫자 유형이 있습니다. &lt;code&gt;u32&lt;/code&gt; 여기서 볼은 부호없는 32 비트 정수이다. 작은 양수에 대해서는 기본적으로 선택하는 것이 좋습니다. 3 장에서 다른 숫자 유형에 대해 배우게됩니다. 또한 이 예제 프로그램 의 &lt;code&gt;u32&lt;/code&gt; 주석과 &lt;code&gt;secret_number&lt;/code&gt; 와의 비교 는 Rust가 &lt;code&gt;secret_number&lt;/code&gt; 가 &lt;code&gt;u32&lt;/code&gt; 게다가. 이제 비교는 동일한 유형의 두 값 사이에서 이루어집니다!</target>
        </trans-unit>
        <trans-unit id="c4baaa152505c4dd10d0a8afc8811ba9994e6d24" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="translated">&lt;a href=&quot;../str/pattern/index&quot;&gt;패턴&lt;/a&gt; 될 수 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; , 슬라이스 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 문자와 일치하는 경우의 결정, 또는 함수 또는 폐쇄.</target>
        </trans-unit>
        <trans-unit id="1a13bea0cade14eaae143cc58b002085ddc4bf19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="translated">&lt;a href=&quot;../str/pattern/index&quot;&gt;패턴&lt;/a&gt; 될 수 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; , 슬라이스 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 문자와 일치하는 경우의 결정, 또는 함수 또는 폐쇄.</target>
        </trans-unit>
        <trans-unit id="ac19fe7126085cad17eb0b418fa395ae25fa16f2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;../str/index&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;, and you can get one from a &lt;code&gt;FromUtf8Error&lt;/code&gt; through the &lt;a href=&quot;#method.utf8_error&quot;&gt;&lt;code&gt;utf8_error&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../str/struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; 에&lt;/a&gt; 의해 제공된 형식 &lt;a href=&quot;../str/index&quot;&gt; &lt;code&gt;std::str&lt;/code&gt; &lt;/a&gt; 슬라이스로 변환 할 때 발생할 수있는 오류 나타낸다 &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; A를들 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt; . 이런 의미에서 이것은 &lt;code&gt;FromUtf8Error&lt;/code&gt; 와 유사 하며 &lt;a href=&quot;#method.utf8_error&quot;&gt; &lt;code&gt;utf8_error&lt;/code&gt; &lt;/a&gt; 메소드를 통해 &lt;code&gt;FromUtf8Error&lt;/code&gt; 에서 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7fb67cacdd201c958a0c7d558837d2a8082fe699" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;../str/index&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;. See its documentation for more details on using it.</source>
          <target state="translated">&lt;a href=&quot;../str/struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; 에&lt;/a&gt; 의해 제공된 형식 &lt;a href=&quot;../str/index&quot;&gt; &lt;code&gt;std::str&lt;/code&gt; &lt;/a&gt; 슬라이스로 변환 할 때 발생할 수있는 오류 나타낸다 &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; A를들 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt; . 이런 의미에서 &lt;code&gt;FromUtf8Error&lt;/code&gt; 와 유사합니다 . 사용에 대한 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="239e6c53cbac59da452aab2dc0d25e7124ea430b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;https://doc.rust-lang.org/core/str/index.html&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;, and you can get one from a &lt;code&gt;FromUtf8Error&lt;/code&gt; through the &lt;a href=&quot;struct.fromutf8error#method.utf8_error&quot;&gt;&lt;code&gt;utf8_error&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../str/struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; 에&lt;/a&gt; 의해 제공된 형식 &lt;a href=&quot;https://doc.rust-lang.org/core/str/index.html&quot;&gt; &lt;code&gt;std::str&lt;/code&gt; &lt;/a&gt; 슬라이스로 변환 할 때 발생할 수있는 오류 나타낸다 &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; A를들 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt; . 이런 의미에서 이는 &lt;code&gt;FromUtf8Error&lt;/code&gt; 와 유사 하며 &lt;a href=&quot;struct.fromutf8error#method.utf8_error&quot;&gt; &lt;code&gt;utf8_error&lt;/code&gt; &lt;/a&gt; 메서드를 통해 &lt;code&gt;FromUtf8Error&lt;/code&gt; 에서 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4d50f09079feb56741d3701cde3c9928a1a6e9ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;https://doc.rust-lang.org/core/str/index.html&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;. See its documentation for more details on using it.</source>
          <target state="translated">&lt;a href=&quot;../str/struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; 에&lt;/a&gt; 의해 제공된 형식 &lt;a href=&quot;https://doc.rust-lang.org/core/str/index.html&quot;&gt; &lt;code&gt;std::str&lt;/code&gt; &lt;/a&gt; 슬라이스로 변환 할 때 발생할 수있는 오류 나타낸다 &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; A를들 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt; . 이런 의미에서 &lt;code&gt;FromUtf8Error&lt;/code&gt; 와 유사합니다 . 사용에 대한 자세한 내용은 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ddda8120a353c19c1143b9fe623d73b4dcc57ac8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;boxed/struct.box#method.into_raw&quot;&gt;&lt;code&gt;into_raw&lt;/code&gt;&lt;/a&gt; function consumes a box and returns the raw pointer. It doesn't destroy &lt;code&gt;T&lt;/code&gt; or deallocate any memory.</source>
          <target state="translated">&lt;a href=&quot;boxed/struct.box#method.into_raw&quot;&gt; &lt;code&gt;into_raw&lt;/code&gt; &lt;/a&gt; 함수는 상자를 소비하고 원시 포인터를 반환한다. &lt;code&gt;T&lt;/code&gt; 를 파괴 하거나 메모리 할당을 해제 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f8812873ebf26389aa2891235cb5791e408b7568" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;collections/index&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module defines maps, sets, linked lists and other typical collection types, including the common &lt;a href=&quot;collections/struct.hashmap&quot;&gt;&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;collections/index&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt; 일반적인 포함하여 정의하는 맵, 세트, 연결리스트 및 기타 일반적인 수집 유형, 모듈 &lt;a href=&quot;collections/struct.hashmap&quot;&gt; &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a000df2416eeaceaee8b63bcc4f4d96683535efe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;conditional-compilation#the-cfg-attribute&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;conditional-compilation#the-cfg_attr-attribute&quot;&gt;&lt;code&gt;cfg_attr&lt;/code&gt;&lt;/a&gt; attributes are active. The &lt;a href=&quot;attributes/testing#the-test-attribute&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; attribute is inert when compiling for tests and active otherwise. &lt;a href=&quot;procedural-macros#attribute-macros&quot;&gt;Attribute macros&lt;/a&gt; are active. All other attributes are inert.</source>
          <target state="translated">&lt;a href=&quot;conditional-compilation#the-cfg-attribute&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;conditional-compilation#the-cfg_attr-attribute&quot;&gt; &lt;code&gt;cfg_attr&lt;/code&gt; &lt;/a&gt; 속성이 활성화됩니다. &lt;a href=&quot;attributes/testing#the-test-attribute&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 달리 테스트 및 활성화를 위해 컴파일 할 때 속성은 불활성이다. &lt;a href=&quot;procedural-macros#attribute-macros&quot;&gt;속성 매크로&lt;/a&gt; 가 활성화되었습니다. 다른 모든 속성은 비활성입니다.</target>
        </trans-unit>
        <trans-unit id="6870dee47d3fe5b85f2f338b73c3f7cce4094df6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference operator&lt;/a&gt; except for raw pointers.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;참조 연산자&lt;/a&gt; 원시 포인터 제외.</target>
        </trans-unit>
        <trans-unit id="b6a453b12ad8603a837d27104bf0cf09312a2b66" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference operator&lt;/a&gt; for &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; produces a place which can be moved from. This means that the &lt;code&gt;*&lt;/code&gt; operator and the destructor of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; are built-in to the language.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 의 &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;역 참조 연산자&lt;/a&gt; 는 이동할 수있는 위치를 생성합니다. 이는 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 의 &lt;code&gt;*&lt;/code&gt; 연산자와 소멸자가 언어에 내장되어 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="69b248ba9e2f044518c42fe197df63cfa4b2abff" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference operator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;참조 연산자&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ecbb9300a5b716ea6923d97c4a33bcc05beabca8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.current&quot;&gt;&lt;code&gt;thread::current&lt;/code&gt;&lt;/a&gt; function is available even for threads not spawned by the APIs of this module.</source>
          <target state="translated">&lt;a href=&quot;fn.current&quot;&gt; &lt;code&gt;thread::current&lt;/code&gt; &lt;/a&gt; 기능도이 모듈의 API에서 산란하지 스레드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83c879af00d7b8c642fb06e560ce31570f391a07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; function provides an iterator over the bytes of an escaped version of the character given.</source>
          <target state="translated">&lt;a href=&quot;fn.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; 의&lt;/a&gt; 기능은 주어진 캐릭터의 이스케이프 버전의 바이트의 반복자를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="04034ef7d1f4bac81675e414f3f0f4340588ab73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;thread::park&lt;/code&gt;&lt;/a&gt; function blocks the current thread unless or until the token is available for its thread handle, at which point it atomically consumes the token. It may also return &lt;em&gt;spuriously&lt;/em&gt;, without consuming the token. &lt;a href=&quot;fn.park_timeout&quot;&gt;&lt;code&gt;thread::park_timeout&lt;/code&gt;&lt;/a&gt; does the same, but allows specifying a maximum time to block the thread for.</source>
          <target state="translated">&lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;thread::park&lt;/code&gt; &lt;/a&gt; 기능 블록 현재 스레드하지 않는 한 또는 토큰이 원자 토큰을 소모하는 시점에서의 스레드 핸들 사용할 수있을 때까지. 토큰을 소비하지 않고 &lt;em&gt;가짜로&lt;/em&gt; 반환 될 수도 있습니다 . &lt;a href=&quot;fn.park_timeout&quot;&gt; &lt;code&gt;thread::park_timeout&lt;/code&gt; &lt;/a&gt; 도 동일하지만 스레드를 차단할 최대 시간을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="010183e81cf43fb24dc3ff708d62a66ab46d9a21" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; free function uses a &lt;code&gt;Builder&lt;/code&gt; with default configuration and &lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt;&lt;code&gt;unwrap&lt;/code&gt;&lt;/a&gt;s its return value.</source>
          <target state="translated">&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt; 무료 함수는 사용 &lt;code&gt;Builder&lt;/code&gt; 기본 구성과 함께 &lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt; &lt;code&gt;unwrap&lt;/code&gt; &lt;/a&gt; 의 반환 값.</target>
        </trans-unit>
        <trans-unit id="29d01ae14bfbd0d95900d7de260d830e6b2aebdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; of a &lt;code&gt;match&lt;/code&gt; expression is not a temporary scope, so temporaries in the scrutinee can be dropped after the &lt;code&gt;match&lt;/code&gt; expression. For example, the temporary for &lt;code&gt;1&lt;/code&gt; in &lt;code&gt;match 1 { ref mut z =&amp;gt; z };&lt;/code&gt; lives until the end of the statement.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 표현식 의 &lt;a href=&quot;glossary#scrutinee&quot;&gt;스크 루틴&lt;/a&gt; 은 임시 범위가 아니므로 스크 루틴의 임시는 &lt;code&gt;match&lt;/code&gt; 표현식 다음에 삭제할 수 있습니다 . 예를 들어, &lt;code&gt;match 1 { ref mut z =&amp;gt; z };&lt;/code&gt; 에서 &lt;code&gt;1&lt;/code&gt; 에 대한 임시 {ref mut z =&amp;gt; z}; 진술이 끝날 때까지 살아 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d631316da22e8f49a59e622d46e415aca63cb44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; of an &lt;a href=&quot;expressions/if-expr#if-let-expressions&quot;&gt;&lt;code&gt;if let&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;expressions/match-expr&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;expressions/loop-expr#predicate-pattern-loops&quot;&gt;&lt;code&gt;while let&lt;/code&gt;&lt;/a&gt; expression.</source>
          <target state="translated">&lt;a href=&quot;expressions/if-expr#if-let-expressions&quot;&gt; &lt;code&gt;if let&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;expressions/match-expr&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;expressions/loop-expr#predicate-pattern-loops&quot;&gt; &lt;code&gt;while let&lt;/code&gt; &lt;/a&gt; 식 의 &lt;a href=&quot;glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="f60d04280a375c73571ef4d8073dd6fd2b866e51" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://doc.rust-lang.org/nomicon/transmutes.html&quot;&gt;nomicon&lt;/a&gt; has additional documentation.</source>
          <target state="translated">&lt;a href=&quot;https://doc.rust-lang.org/nomicon/transmutes.html&quot;&gt;nomicon는&lt;/a&gt; 추가 문서가 있습니다.</target>
        </trans-unit>
        <trans-unit id="234fa73a8f6dcc88ca3eeed24db16797666a2694" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md&quot;&gt;RFC&lt;/a&gt; contains motivations and more details.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md&quot;&gt;RFC는&lt;/a&gt; 동기와 자세한 내용이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6a13e231d1887805079fed3345d62d70fa98ffc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules#prelude-items&quot;&gt;&lt;code&gt;no_implicit_prelude&lt;/code&gt;&lt;/a&gt; attribute can be used on a module to disable prelude lookups within that module.</source>
          <target state="translated">&lt;a href=&quot;modules#prelude-items&quot;&gt; &lt;code&gt;no_implicit_prelude&lt;/code&gt; &lt;/a&gt; 속성은 해당 모듈 비활성화 할 서곡 조회에 모듈을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d090eed4aa4b11f0c7d0fffa892207e5f74b95a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;option/index&quot;&gt;&lt;code&gt;option&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;result/index&quot;&gt;&lt;code&gt;result&lt;/code&gt;&lt;/a&gt; modules define optional and error-handling types, &lt;a href=&quot;option/enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;iter/index&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; module defines Rust's iterator trait, &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;, which works with the &lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop to access collections.</source>
          <target state="translated">&lt;a href=&quot;option/index&quot;&gt; &lt;code&gt;option&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;result/index&quot;&gt; &lt;code&gt;result&lt;/code&gt; &lt;/a&gt; 모듈 옵션 및 오류 처리 유형, 정의 &lt;a href=&quot;option/enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;iter/index&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 모듈은 녹의 반복자 특성, 정의 &lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 와 함께 작동 &lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; 액세스 컬렉션에 루프를.</target>
        </trans-unit>
        <trans-unit id="a5d9a354e8b0f07a3115dc9b0844a83e58a8610e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="translated">&lt;a href=&quot;str/pattern/index&quot;&gt;패턴&lt;/a&gt; 될 수 &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; , 슬라이스 &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 문자와 일치하는 경우의 결정, 또는 함수 또는 폐쇄.</target>
        </trans-unit>
        <trans-unit id="d0a9260d9d3256bee11715c7bab554254f578e52" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="translated">&lt;a href=&quot;str/pattern/index&quot;&gt;패턴&lt;/a&gt; 될 수 &lt;code&gt;&amp;amp;str&lt;/code&gt; , &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; , 슬라이스 &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 문자와 일치하는 경우의 결정, 또는 함수 또는 폐쇄.</target>
        </trans-unit>
        <trans-unit id="8bee548c1faeb9c0868a59d1b0359e0916d54967" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;code&gt;Arc&lt;/code&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value has already been dropped.</source>
          <target state="translated">&lt;a href=&quot;struct.arc#method.downgrade&quot;&gt; &lt;code&gt;downgrade&lt;/code&gt; &lt;/a&gt; 방법은 비 소유 만드는 데 사용할 수있는 &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터를. &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터가 될 수 있습니다 &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; 에 D &lt;code&gt;Arc&lt;/code&gt; , 그러나 이것은 반환하지 않습니다 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 값이 이미 감소 된 경우.</target>
        </trans-unit>
        <trans-unit id="74bc0ed50e554fb672c29105c76cd20026688a4b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;code&gt;Arc&lt;/code&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value stored in the allocation has already been dropped. In other words, &lt;code&gt;Weak&lt;/code&gt; pointers do not keep the value inside the allocation alive; however, they &lt;em&gt;do&lt;/em&gt; keep the allocation (the backing store for the value) alive.</source>
          <target state="translated">&lt;a href=&quot;struct.arc#method.downgrade&quot;&gt; &lt;code&gt;downgrade&lt;/code&gt; &lt;/a&gt; 방법은 비 소유 만드는 데 사용할 수있는 &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터를. &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터가 될 수 있습니다 &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; 에 D &lt;code&gt;Arc&lt;/code&gt; , 그러나 이것은 반환하지 않습니다 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 할당에 저장된 값이 이미 감소 된 경우. 즉, &lt;code&gt;Weak&lt;/code&gt; 포인터는 할당 내의 값을 활성 상태로 유지하지 않습니다. 그러나, 그들은 &lt;em&gt;할&lt;/em&gt; (값의 백업 저장소) 살아 할당을 유지한다.</target>
        </trans-unit>
        <trans-unit id="94c3ecdf0be1261908d0f10ca942b75ee9286aef" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.arguments&quot;&gt;&lt;code&gt;Arguments&lt;/code&gt;&lt;/a&gt; instance can be created with the &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro.</source>
          <target state="translated">&lt;a href=&quot;struct.arguments&quot;&gt; &lt;code&gt;Arguments&lt;/code&gt; &lt;/a&gt; 인스턴스는 만들 수 있습니다 &lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;매크로.</target>
        </trans-unit>
        <trans-unit id="fa75ef55ee98f7d19f2ace1042e87faf9ee8ae65" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.bufwriter&quot;&gt;&lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt; struct wraps a writer and buffers its output. But it only does this batched write when it goes out of scope, or when the internal buffer is full. Sometimes, you'd prefer to write each line as it's completed, rather than the entire buffer at once. Enter &lt;code&gt;LineWriter&lt;/code&gt;. It does exactly that.</source>
          <target state="translated">&lt;a href=&quot;struct.bufwriter&quot;&gt; &lt;code&gt;BufWriter&lt;/code&gt; 의&lt;/a&gt; 구조체는 작가를 래핑하고 출력을 버퍼링한다. 그러나 범위를 벗어나거나 내부 버퍼가 가득 찬 경우에만 일괄 처리 된 쓰기 작업을 수행합니다. 때로는 전체 버퍼 대신 한 번에 각 행을 작성하는 것이 좋습니다. &lt;code&gt;LineWriter&lt;/code&gt; 를 입력하십시오 . 정확히 그렇습니다.</target>
        </trans-unit>
        <trans-unit id="a07405d582facf4ae9638d6c46ccf83d378ca9a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; method will take ownership of the builder and create an &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; to the thread handle with the given configuration.</source>
          <target state="translated">&lt;a href=&quot;struct.builder#method.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt; 방법은 빌더의 소유권을하고 만듭니다 &lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; 주어진 구성 스레드 핸들을.</target>
        </trans-unit>
        <trans-unit id="8461a34249fb23d4197f5b2441105518f99e167b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; struct is used to configure and spawn processes:</source>
          <target state="translated">&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt; 구조체는 구성 및 산란 프로세스에 사용된다 :</target>
        </trans-unit>
        <trans-unit id="c0f682c8845fc1182cef69275c8073a32be2d0f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.command#method.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.command#method.stdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.command#method.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; of a child process can be configured by passing an &lt;a href=&quot;struct.stdio&quot;&gt;&lt;code&gt;Stdio&lt;/code&gt;&lt;/a&gt; to the corresponding method on &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt;. Once spawned, they can be accessed from the &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt;. For example, piping output from one command into another command can be done like so:</source>
          <target state="translated">자식 프로세스 의 &lt;a href=&quot;struct.command#method.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;struct.command#method.stdin&quot;&gt; &lt;code&gt;stdin&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.command#method.stderr&quot;&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;struct.stdio&quot;&gt; &lt;code&gt;Stdio&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt; 의 해당 메소드에 전달하여 구성 할 수 있습니다 . 일단 생성되면 &lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt; 에서 접근 할 수 있습니다 . 예를 들어, 한 명령에서 다른 명령으로 출력을 파이핑하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f9ad904c74c4288c252921bb9ae74bd23e865305" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.cstring#method.new&quot;&gt;&lt;code&gt;CString::new&lt;/code&gt;&lt;/a&gt; method will actually check that the provided &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; does not have 0 bytes in the middle, and return an error if it finds one.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring#method.new&quot;&gt; &lt;code&gt;CString::new&lt;/code&gt; &lt;/a&gt; 방법은 실제로 한 것으로 확인합니다 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 중간에 0 바이트가없는, 찾은 경우 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="979c5c1602643a6a3cebe7ffbfac71410fb43889" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;thread::Result&lt;/code&gt;&lt;/a&gt; containing &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; of the final value produced by the child thread, or &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; of the value given to a call to &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; if the child panicked.</source>
          <target state="translated">(가) &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt; 방법 리턴한다 &lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;thread::Result&lt;/code&gt; &lt;/a&gt; 포함 &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 자식 스레드에 의해 생성 된 최종 값의를, 또는 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 호출에 주어진 값의 정보는 다음의 제품에 &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;아이가 당황했다면.</target>
        </trans-unit>
        <trans-unit id="d70df5ac1306fbf7451739c8b7b5cbb316412dcd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.localkey#method.with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; method yields a reference to the contained value which cannot be sent across threads or escape the given closure.</source>
          <target state="translated">&lt;a href=&quot;struct.localkey#method.with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 방법은 스레드를 통해 전송되거나 소정의 폐쇄를 탈출 할 수없는 값에 포함 된 참조를 산출한다.</target>
        </trans-unit>
        <trans-unit id="4cdf73c1055626ea58f2e6c5956631d7c37626c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value has already been dropped.</source>
          <target state="translated">&lt;a href=&quot;struct.rc#method.downgrade&quot;&gt; &lt;code&gt;downgrade&lt;/code&gt; &lt;/a&gt; 방법은 비 소유 만드는 데 사용할 수있는 &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터를. &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터가 될 수 있습니다 &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; 에 D &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; 를&lt;/a&gt; , 그러나 이것은 반환하지 않습니다 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 값이 이미 감소 된 경우.</target>
        </trans-unit>
        <trans-unit id="bcfdea4875bc006b185727ffa377cb6c800ff1eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value stored in the allocation has already been dropped. In other words, &lt;code&gt;Weak&lt;/code&gt; pointers do not keep the value inside the allocation alive; however, they &lt;em&gt;do&lt;/em&gt; keep the allocation (the backing store for the inner value) alive.</source>
          <target state="translated">&lt;a href=&quot;struct.rc#method.downgrade&quot;&gt; &lt;code&gt;downgrade&lt;/code&gt; &lt;/a&gt; 방법은 비 소유 만드는 데 사용할 수있는 &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터를. &lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt; 포인터가 될 수 있습니다 &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; 에 D &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; 를&lt;/a&gt; , 그러나 이것은 반환하지 않습니다 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 할당에 저장된 값이 이미 감소 된 경우. 즉, &lt;code&gt;Weak&lt;/code&gt; 포인터는 할당 내의 값을 활성 상태로 유지하지 않습니다. 그러나, 그들은 &lt;em&gt;어떻게&lt;/em&gt; 할당 살아 (내부 값에 대한 백업 저장소)를 유지한다.</target>
        </trans-unit>
        <trans-unit id="673675ebe57e0604b8f52dd76cd89f3cf84af682" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; operation can only fail if the sending half of a &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;) is disconnected, implying that no further messages will ever be received.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt; (A)의 송신 절반 경우 동작은 실패 할 수있는 &lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; 가&lt;/a&gt; ) 더 적 메시지 수신되지 않음을 암시 분리된다.</target>
        </trans-unit>
        <trans-unit id="2096b737ddfebc05d46f568e296a81f0a3d0197e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.sender&quot;&gt;&lt;code&gt;Sender&lt;/code&gt;&lt;/a&gt; can be cloned to &lt;a href=&quot;struct.sender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; to the same channel multiple times, but only one &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; is supported.</source>
          <target state="translated">&lt;a href=&quot;struct.sender&quot;&gt; &lt;code&gt;Sender&lt;/code&gt; &lt;/a&gt; 하도록 복제 될 수 &lt;a href=&quot;struct.sender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 동일한 채널에 여러 번, 오직 하나의 &lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt; 지원된다.</target>
        </trans-unit>
        <trans-unit id="d38fd997ec90eab994427a1fbc1ca66e988ed96b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt; can be cloned to &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; to the same channel multiple times, but only one &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; is supported.</source>
          <target state="translated">&lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; 을&lt;/a&gt; 위해 복제 될 수 &lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 동일한 채널에 여러 번, 오직 하나의 &lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt; 지원된다.</target>
        </trans-unit>
        <trans-unit id="7001293def1e95a9d6c40ad63bf180d03eb64fd9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.thread#method.unpark&quot;&gt;&lt;code&gt;unpark&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;struct.thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; atomically makes the token available if it wasn't already. Because the token is initially absent, &lt;a href=&quot;struct.thread#method.unpark&quot;&gt;&lt;code&gt;unpark&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt; will result in the second call returning immediately.</source>
          <target state="translated">&lt;a href=&quot;struct.thread&quot;&gt; &lt;code&gt;Thread&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.thread#method.unpark&quot;&gt; &lt;code&gt;unpark&lt;/code&gt; &lt;/a&gt; 메소드는 원자 적으로 토큰이 사용 가능하지 않은 경우 사용 가능하게 만듭니다. 토큰이 처음에 존재하지 않기 때문에 &lt;a href=&quot;struct.thread#method.unpark&quot;&gt; &lt;code&gt;unpark&lt;/code&gt; &lt;/a&gt; 다음에 &lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;park&lt;/code&gt; &lt;/a&gt; 을 두면 두 번째 통화가 즉시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3b63b1ad0bef3b06d878599f3be015ecfe5404bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.unixdatagram#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; method will connect the socket to a peer.</source>
          <target state="translated">&lt;a href=&quot;struct.unixdatagram#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt; 방법은 피어에 소켓을 연결합니다.</target>
        </trans-unit>
        <trans-unit id="1599d30320e03334b98613759c0cb03ef5b8af44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.unixdatagram#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; method may be used to send data to the specified address. &lt;a href=&quot;struct.unixdatagram#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.unixdatagram#method.recv_from&quot;&gt;&lt;code&gt;recv_from&lt;/code&gt;&lt;/a&gt; will only receive data from that address.</source>
          <target state="translated">&lt;a href=&quot;struct.unixdatagram#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 방법은 지정된 주소에 데이터를 전송하는데 사용될 수있다. &lt;a href=&quot;struct.unixdatagram#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.unixdatagram#method.recv_from&quot;&gt; &lt;code&gt;recv_from&lt;/code&gt; &lt;/a&gt; 은 해당 주소에서만 데이터를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="a53484ac76a42814fdd6d0152dc58d8216dd587e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method can emulate &lt;code&gt;truncate&lt;/code&gt;, but causes the excess elements to be returned instead of dropped.</source>
          <target state="translated">&lt;a href=&quot;struct.vec#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 방법은 에뮬레이션 할 수 있습니다 &lt;code&gt;truncate&lt;/code&gt; 하지만, 반환 대신에 드롭 할 수있는 여분의 요소가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea6d0b5a4d7abf2551cbce00a21d08c3b9b0ea9b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;thread/index&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/a&gt; module contains Rust's threading abstractions. &lt;a href=&quot;sync/index&quot;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; contains further primitive shared memory types, including &lt;a href=&quot;sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sync/mpsc/index&quot;&gt;&lt;code&gt;mpsc&lt;/code&gt;&lt;/a&gt;, which contains the channel types for message passing.</source>
          <target state="translated">&lt;a href=&quot;thread/index&quot;&gt; &lt;code&gt;thread&lt;/code&gt; &lt;/a&gt; 모듈은 녹의 스레딩 추상화가 포함되어 있습니다. &lt;a href=&quot;sync/index&quot;&gt; &lt;code&gt;sync&lt;/code&gt; &lt;/a&gt; 에는 &lt;a href=&quot;sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;sync/mpsc/index&quot;&gt; &lt;code&gt;mpsc&lt;/code&gt; &lt;/a&gt; 를 포함하여 메시지 전달을위한 채널 유형이 포함 된 추가 기본 공유 메모리 유형 이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="49a461a4d2bf3262db6f2402e2172259bf56947f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.asciiext&quot;&gt;&lt;code&gt;AsciiExt&lt;/code&gt;&lt;/a&gt; trait provides methods that allow for character operations that only act on the ASCII subset and leave non-ASCII characters alone.</source>
          <target state="translated">&lt;a href=&quot;trait.asciiext&quot;&gt; &lt;code&gt;AsciiExt&lt;/code&gt; 의&lt;/a&gt; 특성 만 ASCII 부분 집합 행동 혼자 비 ASCII 문자를 남겨 문자 작업 할 수 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1a4c8cc0a085c3df1289a22cd8aaec879c0c1b9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.doubleendediterator&quot;&gt;trait-level&lt;/a&gt; docs contain more details.</source>
          <target state="translated">&lt;a href=&quot;trait.doubleendediterator&quot;&gt;특성 수준의&lt;/a&gt; 문서는 자세한 내용이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9baa3ad4d7314655f1af4e53b409fbc088f4b8e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.error#method.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; method is generally used when errors cross &quot;abstraction boundaries&quot;. If one module must report an error that is caused by an error from a lower-level module, it can allow access to that error via the &lt;a href=&quot;trait.error#method.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; method. This makes it possible for the high-level module to provide its own errors while also revealing some of the implementation for debugging via &lt;a href=&quot;trait.error#method.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; chains.</source>
          <target state="translated">&lt;a href=&quot;trait.error#method.source&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt; 오류 &quot;추상화 경계&quot;를 교차 할 때 방법이 일반적으로 사용된다. 하나의 모듈이 하위 레벨 모듈의 오류로 인한 오류를보고해야하는 경우, &lt;a href=&quot;trait.error#method.source&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 해당 오류에 액세스 할 수 있습니다 . 이를 통해 고급 모듈이 자체 오류를 제공하는 동시에 &lt;a href=&quot;trait.error#method.source&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt; 체인을 통한 디버깅을위한 일부 구현을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fb97ac2277aef1f78113f1e75546370dbbdba9b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method has a default implementation, so you usually shouldn't implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense.</source>
          <target state="translated">&lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt; 은 일반적으로 그것을 구현해서는 안 방법은 기본 구현이 있습니다. 그러나 기본값보다 더 성능이 뛰어난 구현을 제공 할 수 있으므로이 경우 재정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e8960e05e681fd3c863585eb072cff67079ae758" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; traits are implemented by types that can be invoked like functions. Note that &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;&amp;amp;self&lt;/code&gt;, &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;&amp;amp;mut self&lt;/code&gt; and &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;self&lt;/code&gt;. These correspond to the three kinds of methods that can be invoked on an instance: call-by-reference, call-by-mutable-reference, and call-by-value. The most common use of these traits is to act as bounds to higher-level functions that take functions or closures as arguments.</source>
          <target state="translated">&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; 의&lt;/a&gt; 특성은 함수처럼 호출 할 수있는 유형에 의해 구현된다. 참고 것을 &lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; 을&lt;/a&gt; 소요 &lt;code&gt;&amp;amp;self&lt;/code&gt; , &lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; 이&lt;/a&gt; 소요 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 와 &lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; 이&lt;/a&gt; 소요 &lt;code&gt;self&lt;/code&gt; . 이들은 인스턴스에서 호출 할 수있는 세 가지 종류의 메소드 인 호출 기준, 변경 기준 호출 및 값별 호출에 해당합니다. 이러한 특성의 가장 일반적인 용도는 함수 또는 클로저를 인수로 취하는 상위 수준 함수에 대한 경계 역할을하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c33bacd306c2aa86080fee643cadd9fa3a5a922c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; adapter is very useful, but only when the closure argument produces values. If it produces an iterator instead, there's an extra layer of indirection. &lt;code&gt;flat_map()&lt;/code&gt; will remove this extra layer on its own.</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 어댑터는 매우 유용하지만, 폐쇄 인수는 값을 생성하는 경우에만 사용할 수 있습니다. 대신 반복자를 생성하면 추가 간접 레이어가 있습니다. &lt;code&gt;flat_map()&lt;/code&gt; 은이 추가 레이어를 자체적으로 제거합니다.</target>
        </trans-unit>
        <trans-unit id="af84d72464a620d276e568d18222de12da4b2fde" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; iterator implements &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;, meaning that you can also &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; backwards:</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 반복자 구현 &lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; &lt;/a&gt; , 당신은 또한 수 있다는 것을 의미 &lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 뒤쪽을 :</target>
        </trans-unit>
        <trans-unit id="a0672d71e250ee0ec8fcc8dfa66640aade0f2d7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.tryfrom&quot;&gt;&lt;code&gt;TryFrom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.tryinto&quot;&gt;&lt;code&gt;TryInto&lt;/code&gt;&lt;/a&gt; traits behave like &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;, but should be implemented when the conversion can fail.</source>
          <target state="translated">&lt;a href=&quot;trait.tryfrom&quot;&gt; &lt;code&gt;TryFrom&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;trait.tryinto&quot;&gt; &lt;code&gt;TryInto&lt;/code&gt; &lt;/a&gt; 특성처럼 행동 &lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt; 만 변환이 실패 할 때 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="e376c9d77b7276078629a96e3397aaf50b87d100" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.write#tymethod.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.</source>
          <target state="translated">&lt;a href=&quot;trait.write#tymethod.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt; 방법은 어댑터와 모든 버퍼링 된 데이터가 '진정한 싱크'에 밀려되었음을 보장하기위한 명시 적 버퍼 자신을 유용합니다.</target>
        </trans-unit>
        <trans-unit id="aaa424efe4823f7e6a6edaf5a49990756704380f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method will attempt to write some data into the object, returning how many bytes were successfully written.</source>
          <target state="translated">&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 방법은 많은 바이트가 성공적으로 기록 된 방법 반환 대상에 일부 데이터를 작성하려고합니다.</target>
        </trans-unit>
        <trans-unit id="75436aa22cb5f73032a0aa74018fe133c992dee0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;type-layout#primitive-representations&quot;&gt;primitive representations&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;type-layout#primitive-representations&quot;&gt;원시적 인 표현&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76a754ff1ade7a85d17901c16d28f4fc1a0ec281" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;types/inferred&quot;&gt;inferred type&lt;/a&gt; which asks the compiler to determine the type.</source>
          <target state="translated">&lt;a href=&quot;types/inferred&quot;&gt;추론 유형&lt;/a&gt; 컴파일러를 묻는 유형을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="bbc904b6676167d928a315d71b571002efe99186" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;types/never&quot;&gt;never&lt;/a&gt; type.</source>
          <target state="translated">은 &lt;a href=&quot;types/never&quot;&gt;절대로&lt;/a&gt; 입력하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2be3f45b2596938280efdad2e1e3c487cd3dd502" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the--operator-can-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; Operator Can Be Used in Functions That Return &lt;code&gt;Result&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;the--operator-can-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 반환하는 함수에서 연산자를 사용할 수 있음</target>
        </trans-unit>
        <trans-unit id="86dac89caf1fb6bb25d3f0271f01c85dae090eff" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the--operator-can-only-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; Operator Can Only Be Used in Functions That Return &lt;code&gt;Result&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;the--operator-can-only-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; 연산자는 &lt;code&gt;Result&lt;/code&gt; 반환하는 함수에서만 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="bf416e54f0f3d3a2ee8340cdce3195c04f0662bc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-_-placeholder&quot;&gt;_&lt;/code&gt; Placeholder</source>
          <target state="translated">&lt;code id=&quot;the-_-placeholder&quot;&gt;_&lt;/code&gt; 자리 표시 자</target>
        </trans-unit>
        <trans-unit id="7d36ad4c51a4dc937d643fbbbf54439f451168f2" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-args-function-and-invalid-unicode&quot;&gt;args&lt;/code&gt; Function and Invalid Unicode</source>
          <target state="translated">&lt;code id=&quot;the-args-function-and-invalid-unicode&quot;&gt;args&lt;/code&gt; 기능 및 잘못된 유니 코드</target>
        </trans-unit>
        <trans-unit id="43afa187f9cf6582feca58fbbf7f12992daae6dc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-automatically_derived-attribute&quot;&gt;automatically_derived&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-automatically_derived-attribute&quot;&gt;automatically_derived&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="1ae32b9d596051c5f8a6c5be151de5b2bd58f3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-c-representation&quot;&gt;C&lt;/code&gt; Representation</source>
          <target state="translated">&lt;code id=&quot;the-c-representation&quot;&gt;C&lt;/code&gt; 대표</target>
        </trans-unit>
        <trans-unit id="bbe7f8f8cbbf771865519c2bb3d21bb5f521d891" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cfg-attribute&quot;&gt;cfg&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-cfg-attribute&quot;&gt;cfg&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="572d131266eef7422234c8cd8f4bf975d532a1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cfg-macro&quot;&gt;cfg&lt;/code&gt; macro</source>
          <target state="translated">&lt;code id=&quot;the-cfg-macro&quot;&gt;cfg&lt;/code&gt; 매크로</target>
        </trans-unit>
        <trans-unit id="ff73ca7cbd9ceded9b08042dee3a7e44286d5879" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cfg_attr-attribute&quot;&gt;cfg_attr&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-cfg_attr-attribute&quot;&gt;cfg_attr&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="8ab454a301e64c91054b75436344fb463ed4e31a" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cold-attribute&quot;&gt;cold&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-cold-attribute&quot;&gt;cold&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="f3918f7c748b8a6de02591e90a158be55e179161" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-crate_name-attribute&quot;&gt;crate_name&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-crate_name-attribute&quot;&gt;crate_name&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="56779e684809e370ff842b9fd00e8e8533305b15" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-deprecated-attribute&quot;&gt;deprecated&lt;/code&gt; attribute</source>
          <target state="translated">더 &lt;code id=&quot;the-deprecated-attribute&quot;&gt;deprecated&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="d264c9c886b4e7e93efe14011caf84a4cb0f8edc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-export_name-attribute&quot;&gt;export_name&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-export_name-attribute&quot;&gt;export_name&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="64953382ec25ebff3523c686f871b6cac0e50ffe" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-global_allocator-attribute&quot;&gt;global_allocator&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-global_allocator-attribute&quot;&gt;global_allocator&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="71beea8a8240cee1b864ee8a097da9cb395a0451" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-ignore-attribute&quot;&gt;ignore&lt;/code&gt; attribute</source>
          <target state="translated">는 &lt;code id=&quot;the-ignore-attribute&quot;&gt;ignore&lt;/code&gt; 속성을</target>
        </trans-unit>
        <trans-unit id="d4e444fdfbdbbdaea724f409a0908c1ddaf47280" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-inline-attribute&quot;&gt;inline&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-inline-attribute&quot;&gt;inline&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="46f91b9733dfb285998974fd7a3ed63a6997485d" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-iterator-trait-and-the-next-method&quot;&gt;Iterator&lt;/code&gt; Trait and the &lt;code&gt;next&lt;/code&gt; Method</source>
          <target state="translated">&lt;code id=&quot;the-iterator-trait-and-the-next-method&quot;&gt;Iterator&lt;/code&gt; 형질과 &lt;code&gt;next&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="289229034807d95c3121d3bcf9cb7e25c1ac9ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-link-attribute&quot;&gt;link&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-link-attribute&quot;&gt;link&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="7cf19b8ac8c37c88b76bf5924f5303e2d1b3cbfc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-link_name-attribute&quot;&gt;link_name&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-link_name-attribute&quot;&gt;link_name&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="7fca57741dda84795b52faabc81edaee2bb29077" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-link_section-attribute&quot;&gt;link_section&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-link_section-attribute&quot;&gt;link_section&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="7b8b70af9354cb75b7660a9b63a471bca4708883" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-macro_use-attribute&quot;&gt;macro_use&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-macro_use-attribute&quot;&gt;macro_use&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="479b4a692bc6c43f38d4737f51dec06b4e143a16" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-match-control-flow-operator&quot;&gt;match&lt;/code&gt; Control Flow Operator</source>
          <target state="translated">&lt;code id=&quot;the-match-control-flow-operator&quot;&gt;match&lt;/code&gt; 제어 흐름 운영자</target>
        </trans-unit>
        <trans-unit id="3764cbd865c70d966aece7af300dfa7f637fe423" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-must_use-attribute&quot;&gt;must_use&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-must_use-attribute&quot;&gt;must_use&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="32f1e16c1f0bc3e100253f9a6db177a6d4101ff1" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_builtins-attribute&quot;&gt;no_builtins&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-no_builtins-attribute&quot;&gt;no_builtins&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="bc45c323650c2f34949e4b642c8e1bc1d4214794" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_link-attribute&quot;&gt;no_link&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-no_link-attribute&quot;&gt;no_link&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="e12971ae998085805bad575f162d256452bcc1e0" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_main-attribute&quot;&gt;no_main&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-no_main-attribute&quot;&gt;no_main&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="0f55be277b4754e64848202241f85fe626641b3d" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_mangle-attribute&quot;&gt;no_mangle&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-no_mangle-attribute&quot;&gt;no_mangle&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="5417fc07a4925f25ebbeb5f618a1275243378ced" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-option-enum-and-its-advantages-over-null-values&quot;&gt;Option&lt;/code&gt; Enum and Its Advantages Over Null Values</source>
          <target state="translated">&lt;code id=&quot;the-option-enum-and-its-advantages-over-null-values&quot;&gt;Option&lt;/code&gt; 널 값 이상 열거하고 그것의 장점</target>
        </trans-unit>
        <trans-unit id="456d9c623e0db72560e9d4ff7d18d6a3d51bb4a0" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-panic_handler-attribute&quot;&gt;panic_handler&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-panic_handler-attribute&quot;&gt;panic_handler&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="f6f2fa5a516f880089540c2827decd01d5a6e7d2" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-path-attribute&quot;&gt;path&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-path-attribute&quot;&gt;path&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="272c0059788508ea23a5913dedfc781999a4329c" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-proc_macro-crate&quot;&gt;proc_macro&lt;/code&gt; crate</source>
          <target state="translated">&lt;code id=&quot;the-proc_macro-crate&quot;&gt;proc_macro&lt;/code&gt; 상자</target>
        </trans-unit>
        <trans-unit id="b1850ba5995c1ec62eca62cf6b54da74c57b2f08" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-recursion_limit-attribute&quot;&gt;recursion_limit&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-recursion_limit-attribute&quot;&gt;recursion_limit&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="b7debe8457b97e78697481f2ab2a13b2dce10763" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-should_panic-attribute&quot;&gt;should_panic&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-should_panic-attribute&quot;&gt;should_panic&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="93213a38ad3b67a68894b916ca83c68efaaa5823" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-string-type&quot;&gt;String&lt;/code&gt; Type</source>
          <target state="translated">&lt;code id=&quot;the-string-type&quot;&gt;String&lt;/code&gt; 유형</target>
        </trans-unit>
        <trans-unit id="1fa123d3091c3f529b13b66733146b6cc074b9ee" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-target_feature-attribute&quot;&gt;target_feature&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-target_feature-attribute&quot;&gt;target_feature&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="8ec1dda37a4f697fee6a707ed0b667ec2bc1a23e" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-test-attribute&quot;&gt;test&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-test-attribute&quot;&gt;test&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="cf59ceebdbbaa090bce70ec65f673058503cd1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-track_caller-attribute&quot;&gt;track_caller&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-track_caller-attribute&quot;&gt;track_caller&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="3ad072e3ed2e5bdacb782947af3c6085d2383d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-transparent-representation&quot;&gt;transparent&lt;/code&gt; Representation</source>
          <target state="translated">&lt;code id=&quot;the-transparent-representation&quot;&gt;transparent&lt;/code&gt; 표현</target>
        </trans-unit>
        <trans-unit id="222c253464f70dc2d46508fef9bded38b979180e" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-type_length_limit-attribute&quot;&gt;type_length_limit&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-type_length_limit-attribute&quot;&gt;type_length_limit&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="b350e27ebb9ddb5535abd7bc5f0b158500f6c7ea" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-used-attribute&quot;&gt;used&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-used-attribute&quot;&gt;used&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="d7b55666424bcbda4791627f5d3c1a25c9fd2797" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-windows_subsystem-attribute&quot;&gt;windows_subsystem&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code id=&quot;the-windows_subsystem-attribute&quot;&gt;windows_subsystem&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="844971eb58988950f234035bf3b738d18df15983" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!&lt;/code&gt; type, also called &quot;never&quot;.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; &quot;never&quot;라고도합니다.</target>
        </trans-unit>
        <trans-unit id="1959101a4f878a742e6d622df58125da3c9ee8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#![feature]&lt;/code&gt; attribute specified an unknown feature.</source>
          <target state="translated">&lt;code&gt;#![feature]&lt;/code&gt; 속성은 알 수없는 기능을 지정했습니다.</target>
        </trans-unit>
        <trans-unit id="6772d2ae0b060a250746d33cd174746c466f1400" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[cfg(test)]&lt;/code&gt; annotation on the tests module tells Rust to compile and run the test code only when you run &lt;code&gt;cargo test&lt;/code&gt;, not when you run &lt;code&gt;cargo build&lt;/code&gt;. This saves compile time when you only want to build the library and saves space in the resulting compiled artifact because the tests are not included. You&amp;rsquo;ll see that because integration tests go in a different directory, they don&amp;rsquo;t need the &lt;code&gt;#[cfg(test)]&lt;/code&gt; annotation. However, because unit tests go in the same files as the code, you&amp;rsquo;ll use &lt;code&gt;#[cfg(test)]&lt;/code&gt; to specify that they shouldn&amp;rsquo;t be included in the compiled result.</source>
          <target state="translated">tests 모듈 의 &lt;code&gt;#[cfg(test)]&lt;/code&gt; 주석은 Rust에게 &lt;code&gt;cargo build&lt;/code&gt; 를 실행할 때가 아니라 &lt;code&gt;cargo test&lt;/code&gt; 를 실행할 때만 테스트 코드를 컴파일하고 실행하도록 지시 합니다. 이렇게하면 라이브러리 만 빌드하려는 경우 컴파일 시간이 절약되고 테스트가 포함되지 않으므로 결과 컴파일 된 아티팩트의 공간이 절약됩니다. 통합 테스트는 다른 디렉토리로 진행되므로 &lt;code&gt;#[cfg(test)]&lt;/code&gt; 주석이 필요하지 않습니다 . 그러나 단위 테스트는 코드와 동일한 파일로 진행되므로 &lt;code&gt;#[cfg(test)]&lt;/code&gt; 를 사용하여 컴파일 된 결과에 포함되지 않도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="519f31417527ab16777c33990a8b19270d90ed97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;#[global_allocator]&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="e73c0e75e8ab048b307c0488b5dbff0af69bd767" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[global_allocator]&lt;/code&gt; can only be used once in a crate or its recursive dependencies.</source>
          <target state="translated">&lt;code&gt;#[global_allocator]&lt;/code&gt; 가 단지 상자 또는 순환 종속성 번 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="672159bbb94aa0ec135859c99523eca0ebc397f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[macro_export]&lt;/code&gt; annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can&amp;rsquo;t be brought into scope.</source>
          <target state="translated">&lt;code&gt;#[macro_export]&lt;/code&gt; 주석 매크로가 정의 된 범주 상자가 반입 될 때마다 매크로 가능하게되는 것을 나타낸다. 이 주석이 없으면 매크로를 범위로 가져올 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="859ec264725730980afa9483dd83d3f313613cc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[repr(C)]&lt;/code&gt; attribute can only be placed on structs and enums.</source>
          <target state="translated">&lt;code&gt;#[repr(C)]&lt;/code&gt; 속성은 구조체 enum에 배치 될 수있다.</target>
        </trans-unit>
        <trans-unit id="20ce08781d178cc7ecc1d0ee2405f13954a27792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[repr(packed)]&lt;/code&gt; and &lt;code&gt;#[repr(simd)]&lt;/code&gt; attributes only work on structs.</source>
          <target state="translated">&lt;code&gt;#[repr(packed)]&lt;/code&gt; 와 &lt;code&gt;#[repr(simd)]&lt;/code&gt; 구조체에만 작업을 속성.</target>
        </trans-unit>
        <trans-unit id="37e64d7cdeff0fe84feb89e7cacb8aa07bcc4dd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[repr(u8)]&lt;/code&gt;, &lt;code&gt;#[repr(i16)]&lt;/code&gt;, etc attributes only work on enums.</source>
          <target state="translated">&lt;code&gt;#[repr(u8)]&lt;/code&gt; , &lt;code&gt;#[repr(i16)]&lt;/code&gt; 등이 열거에서만 작업을 속성.</target>
        </trans-unit>
        <trans-unit id="c9b512964c382c5f5d5e0080e7203c876528ceb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[rustc_on_unimplemented]&lt;/code&gt; attribute lets you specify a custom error message for when a particular trait isn't implemented on a type placed in a position that needs that trait. For example, when the following code is compiled:</source>
          <target state="translated">&lt;code&gt;#[rustc_on_unimplemented]&lt;/code&gt; 속성은 특정 특성이 그 요구에 그 특징 위치에 배치 유형에 구현되지 않은 경우에 대한 사용자 지정 오류 메시지를 지정할 수 있습니다. 예를 들어 다음 코드가 컴파일 된 경우 :</target>
        </trans-unit>
        <trans-unit id="910d7829ddf09eb2fc4a2ff115280a7e351c19be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[simd]&lt;/code&gt; attribute can only be applied to non empty tuple structs, because it doesn't make sense to try to use SIMD operations when there are no values to operate on.</source>
          <target state="translated">&lt;code&gt;#[simd]&lt;/code&gt; 가 더 가치가 작동하지 할 수있을 때 SIMD 연산을 사용하려고하는 이해가되지 않기 때문에 속성은, 비어 있지 않은 튜플 구조체에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20a3879322df478a4cc556128e471d1c66adae12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[unwind]&lt;/code&gt; attribute should be used as follows:</source>
          <target state="translated">&lt;code&gt;#[unwind]&lt;/code&gt; 다음과 같은 특성을 사용한다 :</target>
        </trans-unit>
        <trans-unit id="98359d44655df527d34cb1e33db3c37a01e294d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; (shared borrow) and &lt;code&gt;&amp;amp;mut&lt;/code&gt; (mutable borrow) operators are unary prefix operators. When applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, this expressions produces a reference (pointer) to the location that the value refers to. The memory location is also placed into a borrowed state for the duration of the reference. For a shared borrow (&lt;code&gt;&amp;amp;&lt;/code&gt;), this implies that the place may not be mutated, but it may be read or shared again. For a mutable borrow (&lt;code&gt;&amp;amp;mut&lt;/code&gt;), the place may not be accessed in any way until the borrow expires. &lt;code&gt;&amp;amp;mut&lt;/code&gt; evaluates its operand in a mutable place expression context. If the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut&lt;/code&gt; operators are applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt;, then a &lt;a href=&quot;../expressions#temporaries&quot;&gt;temporary value&lt;/a&gt; is created.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; (공유 차용)와 &lt;code&gt;&amp;amp;mut&lt;/code&gt; (가변 차용) 사업자 단항 접두사 연산자입니다. &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;장소 표현식에&lt;/a&gt; 적용될 때이 표현식은 값이 참조하는 위치에 대한 참조 (포인터)를 생성합니다. 메모리 위치는 참조 기간 동안 빌린 상태로 배치됩니다. 공유 대여 ( &lt;code&gt;&amp;amp;&lt;/code&gt; )의 경우 이는 장소가 변경되지 않을 수 있지만 다시 읽거나 공유 할 수 있음을 의미합니다. 변경 가능한 차용 ( &lt;code&gt;&amp;amp;mut&lt;/code&gt; )의 경우 차용이 만료 될 때까지 장소에 액세스 할 수 없습니다. &lt;code&gt;&amp;amp;mut&lt;/code&gt; 은 변경 가능한 장소 표현식 컨텍스트에서 피연산자를 평가합니다. 은 IF &lt;code&gt;&amp;amp;&lt;/code&gt; 또는 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 사업자가 적용됩니다&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt; 이면 &lt;a href=&quot;../expressions#temporaries&quot;&gt;임시 값&lt;/a&gt; 이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="6e0afa92240bade4867a8d2b0fc7bc387cff228f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; (shared borrow) and &lt;code&gt;&amp;amp;mut&lt;/code&gt; (mutable borrow) operators are unary prefix operators. When applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, this expressions produces a reference (pointer) to the location that the value refers to. The memory location is also placed into a borrowed state for the duration of the reference. For a shared borrow (&lt;code&gt;&amp;amp;&lt;/code&gt;), this implies that the place may not be mutated, but it may be read or shared again. For a mutable borrow (&lt;code&gt;&amp;amp;mut&lt;/code&gt;), the place may not be accessed in any way until the borrow expires. &lt;code&gt;&amp;amp;mut&lt;/code&gt; evaluates its operand in a mutable place expression context. If the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut&lt;/code&gt; operators are applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt;, then a &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;temporary value&lt;/a&gt; is created.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; (공유 차용)와 &lt;code&gt;&amp;amp;mut&lt;/code&gt; (가변 차용) 사업자 단항 접두사 연산자입니다. &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;장소 표현식에&lt;/a&gt; 적용되면 이 표현식은 값이 참조하는 위치에 대한 참조 (포인터)를 생성합니다. 메모리 위치는 참조 기간 동안 빌린 상태에 놓입니다. 공유 대여 ( &lt;code&gt;&amp;amp;&lt;/code&gt; )의 경우 이는 장소가 변경되지 않았지만 다시 읽거나 공유 될 수 있음을 의미합니다. 변경 가능한 차용 ( &lt;code&gt;&amp;amp;mut&lt;/code&gt; )의 경우 차용이 만료 될 때까지 어떤 방식으로도 장소에 액세스 할 수 없습니다. &lt;code&gt;&amp;amp;mut&lt;/code&gt; 은 가변 위치 표현 컨텍스트에서 피연산자를 평가합니다. 은 IF &lt;code&gt;&amp;amp;&lt;/code&gt; 또는 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 사업자가 적용됩니다&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt; 이면 &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;임시 값&lt;/a&gt; 이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="289f7ac6e65862e6021cefdfd8637885846add32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; indicates that this argument is a &lt;em&gt;reference&lt;/em&gt;, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust&amp;rsquo;s major advantages is how safe and easy it is to use references. You don&amp;rsquo;t need to know a lot of those details to finish this program. For now, all you need to know is that like variables, references are immutable by default. Hence, you need to write &lt;code&gt;&amp;amp;mut guess&lt;/code&gt; rather than &lt;code&gt;&amp;amp;guess&lt;/code&gt; to make it mutable. (Chapter 4 will explain references more thoroughly.)</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 는 이 인수가 있음을 나타냅니다 &lt;em&gt;참조&lt;/em&gt; 하면 메모리를 여러 번에 데이터를 복사 할 필요없이 데이터의 코드 액세스 한 조각의 여러 부분을 할 수있는 방법을 제공한다. 참조는 복잡한 기능이며 Rust의 주요 장점 중 하나는 참조를 사용하는 것이 얼마나 안전하고 쉬운 지입니다. 이 프로그램을 마치기 위해 많은 세부 사항을 알 필요는 없습니다. 현재로서는 변수와 마찬가지로 참조는 기본적으로 변경 불가능하다는 점만 알고 있습니다. 따라서 변경 가능하게하려면 &lt;code&gt;&amp;amp;guess&lt;/code&gt; 대신 &lt;code&gt;&amp;amp;mut guess&lt;/code&gt; 를 작성해야합니다 . (4 장에서는 참고 문헌을보다 자세히 설명합니다.)</target>
        </trans-unit>
        <trans-unit id="0ba71ec6a87d61177d25877a820fc83d9405b11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;s1&lt;/code&gt; syntax lets us create a reference that &lt;em&gt;refers&lt;/em&gt; to the value of &lt;code&gt;s1&lt;/code&gt; but does not own it. Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.</source>
          <target state="translated">&lt;code&gt;&amp;amp;s1&lt;/code&gt; 구문 우리가 참조 만들 수 있습니다 &lt;em&gt;의미&lt;/em&gt; 의 값 &lt;code&gt;s1&lt;/code&gt; 하지만, 그것을 소유하지 않습니다. 그것을 소유하지 않기 때문에 참조가 범위를 벗어날 때 가리키는 값이 삭제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac2092b7195c0e20492c6630d5e4fa162bb49bf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;str&lt;/code&gt; type guarantees that its contents are UTF-8, and so we can compare the length it would take if each code point was represented as a &lt;code&gt;char&lt;/code&gt; vs in the &lt;code&gt;&amp;amp;str&lt;/code&gt; itself:</source>
          <target state="translated">&lt;code&gt;&amp;amp;str&lt;/code&gt; 각 코드 포인트가로 표현 된 경우 그 내용은 UTF-8이고, 우리는 길이를 비교할 수 있도록 걸릴 것이라고 유형 보장 &lt;code&gt;char&lt;/code&gt; 에 대 &lt;code&gt;&amp;amp;str&lt;/code&gt; 자신을 :</target>
        </trans-unit>
        <trans-unit id="9573f9c210e855e348b2b66cefde61b52fa3eea1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;str&lt;/code&gt; type is one of the two main string types, the other being &lt;code&gt;String&lt;/code&gt;. Unlike its &lt;code&gt;String&lt;/code&gt; counterpart, its contents are borrowed.</source>
          <target state="translated">&lt;code&gt;&amp;amp;str&lt;/code&gt; 유형은 두 가지 문자열 유형 중 하나, 다른 존재의이다 &lt;code&gt;String&lt;/code&gt; . &lt;code&gt;String&lt;/code&gt; 과 달리 내용은 빌려 온다.</target>
        </trans-unit>
        <trans-unit id="9dd45416e37868ecd085972d08ce3b564e5e5995" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;gt;&lt;/code&gt; syntax tells the shell to write the contents of standard output to &lt;em&gt;output.txt&lt;/em&gt; instead of the screen. We didn&amp;rsquo;t see the error message we were expecting printed to the screen, so that means it must have ended up in the file. This is what &lt;em&gt;output.txt&lt;/em&gt; contains:</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; 구문에 표준 출력의 내용을 작성하는 쉘을 알려줍니다 &lt;em&gt;경우 output.txt&lt;/em&gt; 대신 화면. 화면에 인쇄 될 것으로 예상되는 오류 메시지가 표시되지 않았으므로 파일에 표시되어야합니다. 이것은 &lt;em&gt;output.txt에&lt;/em&gt; 포함 된 내용입니다.</target>
        </trans-unit>
        <trans-unit id="b005addd17171fe396053ec0c62812c2c97cade4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; syntax is a feature of Rust we haven&amp;rsquo;t talked about yet. It&amp;rsquo;s a generic type parameter, and we&amp;rsquo;ll cover generics in more detail in Chapter 10. For now, all you need to know is that &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; means the &lt;code&gt;Some&lt;/code&gt; variant of the &lt;code&gt;Option&lt;/code&gt; enum can hold one piece of data of any type. Here are some examples of using &lt;code&gt;Option&lt;/code&gt; values to hold number types and string types:</source>
          <target state="translated">&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 구문은 우리가 아직 이야기하지 않은 녹의 기능입니다. 제네릭 형식 매개 변수이므로 제 10 장에서 제네릭에 대해 자세히 설명합니다. 이제 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 는 &lt;code&gt;Option&lt;/code&gt; 열거 형 의 &lt;code&gt;Some&lt;/code&gt; 변형 이 모든 유형의 데이터를 하나만 보유 할 수 있다는 것을 의미합니다 . 다음은 &lt;code&gt;Option&lt;/code&gt; 값을 사용하여 숫자 유형과 문자열 유형을 보유 하는 몇 가지 예입니다 .</target>
        </trans-unit>
        <trans-unit id="0e8f2a70b6f25c55e2febf941fcc1166aa49e75b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'static&lt;/code&gt; constraint means that the closure and its return value must have a lifetime of the whole program execution. The reason for this is that threads can &lt;code&gt;detach&lt;/code&gt; and outlive the lifetime they have been created in. Indeed if the thread, and by extension its return value, can outlive their caller, we need to make sure that they will be valid afterwards, and since we &lt;em&gt;can't&lt;/em&gt; know when it will return we need to have them valid as long as possible, that is until the end of the program, hence the &lt;code&gt;'static&lt;/code&gt; lifetime.</source>
          <target state="translated">&lt;code&gt;'static&lt;/code&gt; 제약 수단은 폐쇄 및 반환 값은 전체 프로그램 실행의 수명이 있어야합니다. 그 이유는 스레드 가 생성 된 수명을 &lt;code&gt;detach&lt;/code&gt; 하고 수명을 연장 할 수 있기 때문입니다. 실제로 스레드와 확장 값으로 인해 호출자보다 수명이 길어지면 나중에 스레드가 유효해야합니다. 우리 &lt;em&gt;는&lt;/em&gt; 그것이 언제 돌아올 것인지 알 &lt;em&gt;수 없습니다.&lt;/em&gt; 가능한 한 오랫동안, 즉 프로그램이 끝날 때까지, 따라서 &lt;code&gt;'static&lt;/code&gt; 수명 '이되도록 유효하게해야합니다.</target>
        </trans-unit>
        <trans-unit id="d507c32a06112cec989a75204d96602b968865dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; type has exactly one value &lt;code&gt;()&lt;/code&gt;, and is used when there is no other meaningful value that could be returned. &lt;code&gt;()&lt;/code&gt; is most commonly seen implicitly: functions without a &lt;code&gt;-&amp;gt; ...&lt;/code&gt; implicitly have return type &lt;code&gt;()&lt;/code&gt;, that is, these are equivalent:</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; 유형은 정확히 하나 개의 값을 가진다 &lt;code&gt;()&lt;/code&gt; , 반환 될 수있는 다른 의미있는 값이없는 경우에 사용된다. &lt;code&gt;()&lt;/code&gt; 는 가장 일반적으로 암시 적으로 보입니다 &lt;code&gt;-&amp;gt; ...&lt;/code&gt; 없는 함수는 암시 적으로 리턴 유형 &lt;code&gt;()&lt;/code&gt; 을 갖습니다 . 즉, 이들은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="e3861dba93432d9d5236ce5338f7751eb3d446a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; type, also called &quot;unit&quot;.</source>
          <target state="translated">&quot;단위&quot;라고도 하는 &lt;code&gt;()&lt;/code&gt; 유형.</target>
        </trans-unit>
        <trans-unit id="ad7f39bcbd9c29a0b11698eda466dd66f20fff6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; type, sometimes called &quot;unit&quot; or &quot;nil&quot;.</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; 타입은 때때로 &quot;단위&quot;또는 &quot;전무&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="918cd095e0c314aaf612bef93955c593d22df666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(*m)&lt;/code&gt; dereferences the &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;. Then the &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;[..]&lt;/code&gt; take a string slice of the &lt;code&gt;String&lt;/code&gt; that is equal to the whole string to match the signature of &lt;code&gt;hello&lt;/code&gt;. The code without deref coercions is harder to read, write, and understand with all of these symbols involved. Deref coercion allows Rust to handle these conversions for us automatically.</source>
          <target state="translated">&lt;code&gt;(*m)&lt;/code&gt; 의 역 참조 &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; (A) 내로 &lt;code&gt;String&lt;/code&gt; . 그런 다음 &lt;code&gt;&amp;amp;&lt;/code&gt; 와 &lt;code&gt;[..]&lt;/code&gt; 는 전체 문자열과 동일한 &lt;code&gt;String&lt;/code&gt; 의 문자열 슬라이스를 가져 와서 &lt;code&gt;hello&lt;/code&gt; 의 서명과 일치시킵니다 . 역 참조 강제가없는 코드는 관련된 모든 기호를 읽고 쓰고 이해하기가 더 어렵습니다. Deref coercion을 사용하면 Rust가 이러한 변환을 자동으로 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="dceab58b2710b9293ff102afe19580771458da84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; (dereference) operator is also a unary prefix operator. When applied to a &lt;a href=&quot;../types/pointer&quot;&gt;pointer&lt;/a&gt; it denotes the pointed-to location. If the expression is of type &lt;code&gt;&amp;amp;mut T&lt;/code&gt; and &lt;code&gt;*mut T&lt;/code&gt;, and is either a local variable, a (nested) field of a local variable or is a mutable &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, then the resulting memory location can be assigned to. Dereferencing a raw pointer requires &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; (역 참조) 연산자는 단항 연산자 접두사이다. &lt;a href=&quot;../types/pointer&quot;&gt;포인터에&lt;/a&gt; 적용되면 지정된 위치를 나타냅니다. 표현식이 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 및 &lt;code&gt;*mut T&lt;/code&gt; 유형 이고 지역 변수, 지역 변수의 (중첩) 필드이거나 변경 가능한 &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;장소 표현식&lt;/a&gt; 인 경우 결과 메모리 위치를 지정할 수 있습니다. 원시 포인터를 참조 해제하려면 &lt;code&gt;unsafe&lt;/code&gt; 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="9081a0fc77deca2ae1677facd10e7e74970f88a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; syntax is also valid with trait bounds on generic types:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 의 구문은 일반적인 유형에 대한 특성의 범위에서 유효합니다 :</target>
        </trans-unit>
        <trans-unit id="afa4c918a009f5cfb91d99e9fea97354edfccd19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; type operator was used in an ambiguous context.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 의 입력 조작이 모호한 상황에서 사용 하였다.</target>
        </trans-unit>
        <trans-unit id="cf7d56124b7814800cfa939450d0c6d38a399da8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operators may be composed with the &lt;code&gt;=&lt;/code&gt; operator. The expression &lt;code&gt;place_exp OP= value&lt;/code&gt; is equivalent to &lt;code&gt;place_expr = place_expr OP val&lt;/code&gt;. For example, &lt;code&gt;x = x + 1&lt;/code&gt; may be written as &lt;code&gt;x += 1&lt;/code&gt;. Any such expression always has the &lt;a href=&quot;../types/tuple&quot;&gt;&lt;code&gt;unit&lt;/code&gt; type&lt;/a&gt;. These operators can all be overloaded using the trait with the same name as for the normal operation followed by 'Assign', for example, &lt;code&gt;std::ops::AddAssign&lt;/code&gt; is used to overload &lt;code&gt;+=&lt;/code&gt;. As with &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;place_expr&lt;/code&gt; must be a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; , &lt;code&gt;^&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 연산자는 &lt;code&gt;=&lt;/code&gt; 연산자 로 구성 될 수 있습니다 . &lt;code&gt;place_exp OP= value&lt;/code&gt; 표현식 은 &lt;code&gt;place_expr = place_expr OP val&lt;/code&gt; . 예를 들어, &lt;code&gt;x = x + 1&lt;/code&gt; 은 &lt;code&gt;x += 1&lt;/code&gt; 로 쓰여질 수 있습니다 . 이러한 식은 항상 &lt;a href=&quot;../types/tuple&quot;&gt; &lt;code&gt;unit&lt;/code&gt; 유형을&lt;/a&gt; 갖습니다 . 이러한 연산자는 일반 작업과 이름이 같은 특성을 사용하여 오버로드 될 수 있습니다. 예를 들어 &lt;code&gt;std::ops::AddAssign&lt;/code&gt; 은 &lt;code&gt;+=&lt;/code&gt; 를 오버로드하는 데 사용됩니다 . 와 마찬가지로 &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;place_expr&lt;/code&gt; 는 해야 &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;장소 표현&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a770a23638a823405304b5862ae9b043051acefe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-3&lt;/code&gt; is no longer there, because it was consumed in order to see if the iteration should stop, but wasn't placed back into the iterator.</source>
          <target state="translated">는 &lt;code&gt;-3&lt;/code&gt; 그것이 반복이 중지해야하는지 확인하기 위해 소비했지만, 반복자에 다시 배치되지 않았기 때문에, 더 이상 존재하지 않는다.</target>
        </trans-unit>
        <trans-unit id="8565fcc01087bd00c830a709f76c89a8bec0ee11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;...&lt;/code&gt; syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the range, that arm will execute:</source>
          <target state="translated">&lt;code&gt;...&lt;/code&gt; 구문은 우리가 값의 포함 범위와 일치 할 수 있습니다. 다음 코드에서 패턴이 범위 내의 값과 일치하면 해당 암이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="a4afeb6b704f2eeee4511dc907c8b58744889e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;...&lt;/code&gt; syntax is kept for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;...&lt;/code&gt; 구문은 이전 버전과의 호환성을 위해 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="e2e1f03ffc70a6a254885658fe3c94afc796ca12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; and &lt;code&gt;..=&lt;/code&gt; operators will construct an object of one of the &lt;code&gt;std::ops::Range&lt;/code&gt; (or &lt;code&gt;core::ops::Range&lt;/code&gt;) variants, according to the following table:</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; 그리고 &lt;code&gt;..=&lt;/code&gt; 연산자의 하나의 목적은 구성한다 &lt;code&gt;std::ops::Range&lt;/code&gt; (또는 &lt;code&gt;core::ops::Range&lt;/code&gt; 는 아래의 표에 따라) 변형 :</target>
        </trans-unit>
        <trans-unit id="92e96dedbdbf92f3e2e6464ed4a171437558a608" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; syntax is a &lt;code&gt;RangeFull&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; 구가있다 &lt;code&gt;RangeFull&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e498b96e1f982900a97ac68d2121f886fa57f814" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..=&lt;/code&gt; syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the range, that arm will execute:</source>
          <target state="translated">&lt;code&gt;..=&lt;/code&gt; 구문은 우리가 값의 포함 범위와 일치 할 수 있습니다. 다음 코드에서 패턴이 범위 내의 값과 일치하면 해당 arm이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="fc028c330bc0f9500e9f59b98e8ba94a546679b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..=end&lt;/code&gt; syntax is a &lt;code&gt;RangeToInclusive&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;..=end&lt;/code&gt; 구문은이다 &lt;code&gt;RangeToInclusive&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="06bff2e76574f65224a2d8263399ed02a85a5a5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..end&lt;/code&gt; syntax is a &lt;code&gt;RangeTo&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;..end&lt;/code&gt; 의 구문은입니다 &lt;code&gt;RangeTo&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e2942c55d614162c6590171ee52a6786d9039b19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0 measured&lt;/code&gt; statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/library-features/test.html&quot;&gt;the documentation about benchmark tests&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;code&gt;0 measured&lt;/code&gt; 기준은 그 성능 측정을위한 테스트 통계이다. 이 글을 쓰는 시점에서 벤치 마크 테스트는 야간 Rust에서만 가능합니다. 자세한 내용 &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/library-features/test.html&quot;&gt;은 벤치 마크 테스트&lt;/a&gt; 에 대한 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="79584c510d0bdac6b79741ca275d743c77143fc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;3&lt;/code&gt; is no longer there, because it was consumed in order to see if the iteration should stop, but wasn't placed back into the iterator.</source>
          <target state="translated">&lt;code&gt;3&lt;/code&gt; 는 그것이 반복이 중지해야하는지 확인하기 위해 소비했지만, 반복자에 다시 배치되지 않았기 때문에, 더 이상 존재하지 않는다.</target>
        </trans-unit>
        <trans-unit id="e721998eb3ac8ff36164c3da054ad164e33f55c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;5&lt;/code&gt; in &lt;code&gt;five&lt;/code&gt; is the function&amp;rsquo;s return value, which is why the return type is &lt;code&gt;i32&lt;/code&gt;. Let&amp;rsquo;s examine this in more detail. There are two important bits: first, the line &lt;code&gt;let x = five();&lt;/code&gt; shows that we&amp;rsquo;re using the return value of a function to initialize a variable. Because the function &lt;code&gt;five&lt;/code&gt; returns a &lt;code&gt;5&lt;/code&gt;, that line is the same as the following:</source>
          <target state="translated">&lt;code&gt;5&lt;/code&gt; 의 &lt;code&gt;five&lt;/code&gt; 반환 형식은 왜 함수의 반환 값입니다 &lt;code&gt;i32&lt;/code&gt; . 이것을 좀 더 자세히 살펴 보자. 두 가지 중요한 비트가 있습니다. 첫째, 라인 &lt;code&gt;let x = five();&lt;/code&gt; 함수의 반환 값을 사용하여 변수를 초기화하고 있음을 보여줍니다. 기능 때문에 &lt;code&gt;five&lt;/code&gt; 리턴한다 &lt;code&gt;5&lt;/code&gt; , 그 라인은 다음과 같다 :</target>
        </trans-unit>
        <trans-unit id="f64d85c43f38ffb1d9f69e7f8ec2961df3c8d6da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;::&lt;/code&gt; syntax in the &lt;code&gt;::new&lt;/code&gt; line indicates that &lt;code&gt;new&lt;/code&gt; is an &lt;em&gt;associated function&lt;/em&gt; of the &lt;code&gt;String&lt;/code&gt; type. An associated function is implemented on a type, in this case &lt;code&gt;String&lt;/code&gt;, rather than on a particular instance of a &lt;code&gt;String&lt;/code&gt;. Some languages call this a &lt;em&gt;static method&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; 의 구문 &lt;code&gt;::new&lt;/code&gt; 라인을 나타냅니다 &lt;code&gt;new&lt;/code&gt; 입니다 &lt;em&gt;관련 기능&lt;/em&gt; 의 &lt;code&gt;String&lt;/code&gt; 유형입니다. 관련 기능이 경우에, 형태 상에 구현되는 &lt;code&gt;String&lt;/code&gt; 오히려 특정 인스턴스보다 &lt;code&gt;String&lt;/code&gt; . 어떤 언어는 이것을 &lt;em&gt;정적 메소드&lt;/em&gt; 라고 부릅니다 .</target>
        </trans-unit>
        <trans-unit id="6c666ec2c7e67dbab00bbae26838dd52620a7c41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;::&lt;/code&gt; token is required before the opening &lt;code&gt;&amp;lt;&lt;/code&gt; for generic arguments to avoid ambiguity with the less-than operator. This is colloquially known as &quot;turbofish&quot; syntax.</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; 토큰은 열기 전에 필요한 &lt;code&gt;&amp;lt;&lt;/code&gt; 보다 작음 연산자를 피하고 모호성에 대한 일반적인 인수. 이것을 &quot;turbofish&quot;구문이라고합니다.</target>
        </trans-unit>
        <trans-unit id="973f4c6b5b84dfca6c5a6d4e2198053b9adfe1f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator can be used in functions that have a return type of &lt;code&gt;Result&lt;/code&gt;, because it is defined to work in the same way as the &lt;code&gt;match&lt;/code&gt; expression we defined in Listing 9-6. The part of the &lt;code&gt;match&lt;/code&gt; that requires a return type of &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;return Err(e)&lt;/code&gt;, so the return type of the function can be a &lt;code&gt;Result&lt;/code&gt; to be compatible with this &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 연산자는 &lt;code&gt;Result&lt;/code&gt; 반환 유형을 가진 함수에서 사용할 수 있습니다 . 이는 Listing 9-6에서 정의한 &lt;code&gt;match&lt;/code&gt; 표현식 과 동일한 방식으로 작동하도록 정의 되었기 때문입니다 . &lt;code&gt;Result&lt;/code&gt; 반환 유형이 필요한 &lt;code&gt;match&lt;/code&gt; 부분 은 &lt;code&gt;return Err(e)&lt;/code&gt; 이므로 함수의 반환 유형은 이 &lt;code&gt;return&lt;/code&gt; 과 호환 되는 &lt;code&gt;Result&lt;/code&gt; 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0ec4c0c2491bd5a54898bf44aa756701f4e9b5fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator can only be used in functions that have a return type of &lt;code&gt;Result&lt;/code&gt;, because it is defined to work in the same way as the &lt;code&gt;match&lt;/code&gt; expression we defined in Listing 9-6. The part of the &lt;code&gt;match&lt;/code&gt; that requires a return type of &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;return Err(e)&lt;/code&gt;, so the return type of the function must be a &lt;code&gt;Result&lt;/code&gt; to be compatible with this &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 연산자는 리턴 유형이 &lt;code&gt;Result&lt;/code&gt; 인 함수에만 사용할 수 있습니다 . Listing 9-6에서 정의한 &lt;code&gt;match&lt;/code&gt; 표현식 과 동일한 방식으로 작동하도록 정의 되었기 때문입니다 . 리턴 유형의 &lt;code&gt;Result&lt;/code&gt; 가 필요한 &lt;code&gt;match&lt;/code&gt; 부분 은 &lt;code&gt;return Err(e)&lt;/code&gt; 이므로 함수의 리턴 유형은 이 &lt;code&gt;return&lt;/code&gt; 과 호환 가능한 &lt;code&gt;Result&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="bd74ffef5a8c90c3fd4d6d76e29ea8086760c062" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator eliminates a lot of boilerplate and makes this function&amp;rsquo;s implementation simpler. We could even shorten this code further by chaining method calls immediately after the &lt;code&gt;?&lt;/code&gt;, as shown in Listing 9-8.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 작업자는 많은 상용구를 제거하고이 기능의 구현을 더 단순하게 만듭니다. &lt;code&gt;?&lt;/code&gt; 바로 다음에 메소드 호출을 연결하여이 코드를 더 단축 할 수도 있습니다 . , 목록 9-8에 표시된대로.</target>
        </trans-unit>
        <trans-unit id="69d45072228b4f483bc2426682521ed37346faf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator was added to replace &lt;code&gt;try!&lt;/code&gt; and should be used instead. Furthermore, &lt;code&gt;try&lt;/code&gt; is a reserved word in Rust 2018, so if you must use it, you will need to use the &lt;a href=&quot;https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html&quot;&gt;raw-identifier syntax&lt;/a&gt;: &lt;code&gt;r#try&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; &lt;code&gt;try!&lt;/code&gt; 를 대체하기 위해 연산자가 추가되었습니다 ! 대신 사용해야합니다. 또한, &lt;code&gt;try&lt;/code&gt; 당신이 그것을 사용해야하는 경우 그래서, 당신은 사용해야합니다, 녹 2018 년 예약 된 단어입니다 &lt;a href=&quot;https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html&quot;&gt;원시 식별자 구문&lt;/a&gt; : &lt;code&gt;r#try&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c02b9d3c4349fb0a9b0da69a54ee8f956959e334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; placed after a &lt;code&gt;Result&lt;/code&gt; value is defined to work in almost the same way as the &lt;code&gt;match&lt;/code&gt; expressions we defined to handle the &lt;code&gt;Result&lt;/code&gt; values in Listing 9-6. If the value of the &lt;code&gt;Result&lt;/code&gt; is an &lt;code&gt;Ok&lt;/code&gt;, the value inside the &lt;code&gt;Ok&lt;/code&gt; will get returned from this expression, and the program will continue. If the value is an &lt;code&gt;Err&lt;/code&gt;, the &lt;code&gt;Err&lt;/code&gt; will be returned from the whole function as if we had used the &lt;code&gt;return&lt;/code&gt; keyword so the error value gets propagated to the calling code.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 후 배치 &lt;code&gt;Result&lt;/code&gt; 값이 거의 같은 방법으로 작업에 정의 &lt;code&gt;match&lt;/code&gt; 우리가 처리하기 위해 정의 된 식 &lt;code&gt;Result&lt;/code&gt; 9-6 목록에 값을. 의 값 경우 &lt;code&gt;Result&lt;/code&gt; 입니다 &lt;code&gt;Ok&lt;/code&gt; , 내부 값 &lt;code&gt;Ok&lt;/code&gt; 이 표현에서 반환받을 것이며, 프로그램은 계속 될 것이다. 값이 &lt;code&gt;Err&lt;/code&gt; 인 경우 &lt;code&gt;return&lt;/code&gt; 키워드를 사용한 것처럼 전체 함수에서 &lt;code&gt;Err&lt;/code&gt; 이 반환 되므로 오류 값이 호출 코드로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="1dcf74da2de6e2e77e988e297d47588fe8eb0ad5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Alloc&lt;/code&gt; trait is an &lt;code&gt;unsafe&lt;/code&gt; trait for a number of reasons, and implementors must ensure that they adhere to these contracts:</source>
          <target state="translated">&lt;code&gt;Alloc&lt;/code&gt; 특성은이다 &lt;code&gt;unsafe&lt;/code&gt; 이유에 대한 특성 및 구현은이 계약을 준수하는지 확인해야합니다 :</target>
        </trans-unit>
        <trans-unit id="98e48446e54082f0c926a4f9b0d797094660f773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllocErr&lt;/code&gt; error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator.</source>
          <target state="translated">&lt;code&gt;AllocErr&lt;/code&gt; 의 오류로 할당이 지정된 입력 인자를 결합 할 때 자원 고갈 또는 무언가 잘못에 기인 할 수있는 할당 실패를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="40c7890578f6b7272b5ec64894b3d7a1fbafa432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllocError&lt;/code&gt; error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator.</source>
          <target state="translated">&lt;code&gt;AllocError&lt;/code&gt; 의 오류로 할당이 지정된 입력 인자를 결합 할 때 자원 고갈 또는 무언가 잘못에 기인 할 수있는 할당 실패를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="a15f84d510941143cdca2ea70c5b85337d8cfce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Binary&lt;/code&gt; trait should format its output as a number in binary.</source>
          <target state="translated">&lt;code&gt;Binary&lt;/code&gt; 특성은 이진 숫자로 출력을 포맷해야합니다.</target>
        </trans-unit>
        <trans-unit id="379b6b1f35d3ee950871663ac9c0d0834cb49cc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;...&amp;gt;&lt;/code&gt; ensures that the result is of known size, and the pin is required to keep it in the same place in memory.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;...&amp;gt;&lt;/code&gt; 결과는 공지의 크기이며, 상기 핀은 메모리 내의 동일한 위치에 유지하기 위해 요구되는 것을 보장.</target>
        </trans-unit>
        <trans-unit id="a6e3077926ddb39580746ea9c9fb509f4ede0db3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type is a smart pointer because it implements the &lt;code&gt;Deref&lt;/code&gt; trait, which allows &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; values to be treated like references. When a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; value goes out of scope, the heap data that the box is pointing to is cleaned up as well because of the &lt;code&gt;Drop&lt;/code&gt; trait implementation. Let&amp;rsquo;s explore these two traits in more detail. These two traits will be even more important to the functionality provided by the other smart pointer types we&amp;rsquo;ll discuss in the rest of this chapter.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 가 구현하므로 형 스마트 포인터 &lt;code&gt;Deref&lt;/code&gt; 특성, 허용되는 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 값은 참조 부호 처리 수있다. 때 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 값이 범위를 벗어나, 상자가 가리키고있는 힙 데이터는 잘 때문에의로 정리되어 &lt;code&gt;Drop&lt;/code&gt; 특성의 구현입니다. 이 두 가지 특성을 자세히 살펴 보겠습니다. 이 두 가지 특성은이 장의 나머지 부분에서 논의 할 다른 스마트 포인터 유형이 제공하는 기능에 훨씬 더 중요합니다.</target>
        </trans-unit>
        <trans-unit id="66f94ad31e24eabd73aee0f8f7b4d3256d1ad7c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type is ultimately defined as a tuple struct with one element, so Listing 15-8 defines a &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type in the same way. We&amp;rsquo;ll also define a &lt;code&gt;new&lt;/code&gt; function to match the &lt;code&gt;new&lt;/code&gt; function defined on &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 유형 궁극적 그래서 15-8 정의 목록 번 요소 튜플 구조체로 정의 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 동일한 방식으로 입력한다. 우리는 또한 정의 할 것이다 &lt;code&gt;new&lt;/code&gt; 경기하는 기능 &lt;code&gt;new&lt;/code&gt; 에 정의 된 함수 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf6505b6927d963f13c67732403dd5931ac1ed9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; type is called a &lt;em&gt;trait object&lt;/em&gt;, which we&amp;rsquo;ll talk about in the &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects that Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; section in Chapter 17. For now, you can read &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; to mean &amp;ldquo;any kind of error.&amp;rdquo; Using &lt;code&gt;?&lt;/code&gt; in a &lt;code&gt;main&lt;/code&gt; function with this return type is allowed.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 유형은이라고 &lt;em&gt;특성 객체&lt;/em&gt; 우리가에 대해 얘기하자, &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&quot;다른 유형의 값에 대해 허용을 사용하여 형질 개체&quot;&lt;/a&gt; 당신이 읽을 수있는, 지금은 제 17 장에서 섹션 &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 에 &quot;모든 종류의 오류&quot;를 의미합니다. 사용 &lt;code&gt;?&lt;/code&gt; 이 리턴 유형 의 &lt;code&gt;main&lt;/code&gt; 함수에서 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="f421012dfbbefb54564368d8001a12741e0df3e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; type is called a trait object, which we&amp;rsquo;ll talk about in the &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects that Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; section in Chapter 17. For now, you can read &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; to mean &amp;ldquo;any kind of error.&amp;rdquo; Using &lt;code&gt;?&lt;/code&gt; in a &lt;code&gt;main&lt;/code&gt; function with this return type is allowed.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 유형은 우리가에 대해 얘기하자 형질의 개체라고합니다 &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&quot;다른 유형의 값에 대해 허용을 사용하여 형질 개체&quot;&lt;/a&gt; 당신이 읽을 수있는, 지금은 제 17 장에서 섹션 &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 에 &quot;모든 종류의 오류&quot;를 의미합니다. 사용 &lt;code&gt;?&lt;/code&gt; A의 &lt;code&gt;main&lt;/code&gt; 이 반환 값의 형태와 기능이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="7da298387c32437955972d3bd8b7791a6a295347" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; struct adds buffering to any reader.</source>
          <target state="translated">&lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; 구조체는 리더에 버퍼링 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1691172593fd486c5eabaf315f65ace8dbf6dcde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BufReader&lt;/code&gt; struct adds buffering to any reader.</source>
          <target state="translated">&lt;code&gt;BufReader&lt;/code&gt; 의 구조체는 독자에게 버퍼링을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="258a1854757eccfe175a683df1ba477ca28eb2bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;C&lt;/code&gt; Representation</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 대표</target>
        </trans-unit>
        <trans-unit id="13bde6b705c6f0c548e0105a8252725ac6ce4d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;C&lt;/code&gt; representation for items has a defined layout. With this layout, the size of items is also stable as long as all fields have a stable size.</source>
          <target state="translated">항목 의 &lt;code&gt;C&lt;/code&gt; 표현에는 정의 된 레이아웃이 있습니다. 이 레이아웃을 사용하면 모든 필드의 크기가 안정적인 한 항목 크기도 안정적입니다.</target>
        </trans-unit>
        <trans-unit id="51da5ab6258546c0e07e79893a79989cd376412d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;C&lt;/code&gt; representation is designed for dual purposes. One purpose is for creating types that are interoperable with the C Language. The second purpose is to create types that you can soundly perform operations on that rely on data layout such as reinterpreting values as a different type.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 의 표현은 이중 목적을 위해 설계되었습니다. 한 가지 목적은 C 언어와 상호 운용 가능한 유형을 작성하는 것입니다. 두 번째 목적은 값을 다른 유형으로 재 해석하는 것과 같이 데이터 레이아웃에 의존하는 작업을 제대로 수행 할 수있는 유형을 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d3b29c11032bb6739237ad8f95e6e66861078b0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cacher::new&lt;/code&gt; function takes a generic parameter &lt;code&gt;T&lt;/code&gt;, which we&amp;rsquo;ve defined as having the same trait bound as the &lt;code&gt;Cacher&lt;/code&gt; struct. Then &lt;code&gt;Cacher::new&lt;/code&gt; returns a &lt;code&gt;Cacher&lt;/code&gt; instance that holds the closure specified in the &lt;code&gt;calculation&lt;/code&gt; field and a &lt;code&gt;None&lt;/code&gt; value in the &lt;code&gt;value&lt;/code&gt; field, because we haven&amp;rsquo;t executed the closure yet.</source>
          <target state="translated">&lt;code&gt;Cacher::new&lt;/code&gt; 기능은 일반적인 매개 변수 소요 &lt;code&gt;T&lt;/code&gt; 우리가 같이 결합 같은 특성이있는 것으로 정의한, &lt;code&gt;Cacher&lt;/code&gt; 의 구조체. 그런 다음 &lt;code&gt;Cacher::new&lt;/code&gt; 는 &lt;code&gt;calculation&lt;/code&gt; 필드에 지정된 클로저 와 &lt;code&gt;value&lt;/code&gt; 필드 에 &lt;code&gt;None&lt;/code&gt; 값 을 보유 하는 &lt;code&gt;Cacher&lt;/code&gt; 인스턴스를 반환합니다 . 아직 클로저를 실행하지 않았기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="b4813a8ce2e935eef24c8392e81d63c3906c4494" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cacher&lt;/code&gt; struct has a &lt;code&gt;calculation&lt;/code&gt; field of the generic type &lt;code&gt;T&lt;/code&gt;. The trait bounds on &lt;code&gt;T&lt;/code&gt; specify that it&amp;rsquo;s a closure by using the &lt;code&gt;Fn&lt;/code&gt; trait. Any closure we want to store in the &lt;code&gt;calculation&lt;/code&gt; field must have one &lt;code&gt;u32&lt;/code&gt; parameter (specified within the parentheses after &lt;code&gt;Fn&lt;/code&gt;) and must return a &lt;code&gt;u32&lt;/code&gt; (specified after the &lt;code&gt;-&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Cacher&lt;/code&gt; 의 구조체는이 &lt;code&gt;calculation&lt;/code&gt; 일반 타입의 필드 &lt;code&gt;T&lt;/code&gt; 를 . &lt;code&gt;T&lt;/code&gt; 의 특성 경계 는 &lt;code&gt;Fn&lt;/code&gt; 특성 을 사용하여 폐쇄임을 지정합니다 . &lt;code&gt;calculation&lt;/code&gt; 필드 에 저장하려는 클로저 에는 하나의 &lt;code&gt;u32&lt;/code&gt; 매개 변수 ( &lt;code&gt;Fn&lt;/code&gt; 뒤에 괄호 안에 지정됨 )가 있어야하고 &lt;code&gt;u32&lt;/code&gt; ( &lt;code&gt;-&amp;gt;&lt;/code&gt; 뒤에 지정됨 )를 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b2611487755ed0f487d8741cbb5ae43a528fa050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CannotReallocInPlace&lt;/code&gt; error is used when &lt;code&gt;grow_in_place&lt;/code&gt; or &lt;code&gt;shrink_in_place&lt;/code&gt; were unable to reuse the given memory block for a requested layout.</source>
          <target state="translated">&lt;code&gt;CannotReallocInPlace&lt;/code&gt; 의 경우 오류가 사용 &lt;code&gt;grow_in_place&lt;/code&gt; 또는 &lt;code&gt;shrink_in_place&lt;/code&gt; 가 요청한 레이아웃 지정된 메모리 블록을 재이용 할 수 없었다.</target>
        </trans-unit>
        <trans-unit id="66ff318ae517f73cd3f13be64857852133418c2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Clone&lt;/code&gt; trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See the &lt;a href=&quot;ch04-01-what-is-ownership#ways-variables-and-data-interact-clone&quot;&gt;&amp;ldquo;Ways Variables and Data Interact: Clone&amp;rdquo;&lt;/a&gt; section in Chapter 4 for more information on &lt;code&gt;Clone&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Clone&lt;/code&gt; 특성은 사용자가 명시 적으로 값의 전체 복사본을 만들 수 있습니다 및 복제 프로세스가 임의의 코드를 실행하고 힙 데이터를 복사 포함 할 수 있습니다. 참고 항목 &lt;a href=&quot;ch04-01-what-is-ownership#ways-variables-and-data-interact-clone&quot;&gt;: &quot;복제 방법 변수 및 데이터 상호 작용&quot;&lt;/a&gt; 에 대한 자세한 내용은 4 장 부분을 &lt;code&gt;Clone&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad03569cf96b66590827b19ede2029d2fc0e960d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Clone&lt;/code&gt; trait for types that cannot be 'implicitly copied'.</source>
          <target state="translated">'암시 적으로 복사'할 수없는 유형 의 &lt;code&gt;Clone&lt;/code&gt; 특성.</target>
        </trans-unit>
        <trans-unit id="18eff9d7482bec9f52eb9a085d95c11254b36933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CoerceUnsized&lt;/code&gt; trait takes a struct type. Make sure the type you are providing to &lt;code&gt;CoerceUnsized&lt;/code&gt; is a struct with only the last field containing an unsized type.</source>
          <target state="translated">&lt;code&gt;CoerceUnsized&lt;/code&gt; 의 특성은 구조체 형식을 사용합니다. &lt;code&gt;CoerceUnsized&lt;/code&gt; 에 제공하는 유형이 크기가 지정되지 않은 유형을 포함하는 마지막 필드 만있는 구조 체인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e548ae9701e88686017ab152887ae716380c763e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Config::new&lt;/code&gt; function definition</source>
          <target state="translated">&lt;code&gt;Config::new&lt;/code&gt; 함수 정의</target>
        </trans-unit>
        <trans-unit id="501a0b9d21e10f396777e5d2959bafbe25f146ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cons&lt;/code&gt; variant will need the size of an &lt;code&gt;i32&lt;/code&gt; plus the space to store the box&amp;rsquo;s pointer data. The &lt;code&gt;Nil&lt;/code&gt; variant stores no values, so it needs less space than the &lt;code&gt;Cons&lt;/code&gt; variant. We now know that any &lt;code&gt;List&lt;/code&gt; value will take up the size of an &lt;code&gt;i32&lt;/code&gt; plus the size of a box&amp;rsquo;s pointer data. By using a box, we&amp;rsquo;ve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a &lt;code&gt;List&lt;/code&gt; value. Figure 15-2 shows what the &lt;code&gt;Cons&lt;/code&gt; variant looks like now.</source>
          <target state="translated">&lt;code&gt;Cons&lt;/code&gt; 변형은 크기가 필요합니다 &lt;code&gt;i32&lt;/code&gt; 상자의 포인터 데이터를 저장하는 데 플러스 공간을. &lt;code&gt;Nil&lt;/code&gt; 변형 저장 값 없음, 그래서 그것은보다 적은 공간을 필요로 &lt;code&gt;Cons&lt;/code&gt; 변형. 우리는 이제 모든 &lt;code&gt;List&lt;/code&gt; 값이 &lt;code&gt;i32&lt;/code&gt; 의 크기와 상자의 포인터 데이터 크기를 모두 차지 한다는 것을 알고 있습니다 . 상자를 사용하여 무한 재귀 체인을 끊었으므로 컴파일러는 &lt;code&gt;List&lt;/code&gt; 값 을 저장하는 데 필요한 크기를 파악할 수 있습니다 . 그림 15-2는 &lt;code&gt;Cons&lt;/code&gt; 변형이 현재 어떻게 보이는지 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a626d0216123ae4ac45161a1bdf7e2c4de5ee23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cons&lt;/code&gt; variants own the data they hold, so when we create the &lt;code&gt;b&lt;/code&gt; list, &lt;code&gt;a&lt;/code&gt; is moved into &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; owns &lt;code&gt;a&lt;/code&gt;. Then, when we try to use &lt;code&gt;a&lt;/code&gt; again when creating &lt;code&gt;c&lt;/code&gt;, we&amp;rsquo;re not allowed to because &lt;code&gt;a&lt;/code&gt; has been moved.</source>
          <target state="translated">&lt;code&gt;Cons&lt;/code&gt; 우리가 만들 때, 그들이 보유하고있는 데이터를 소유 변형 &lt;code&gt;b&lt;/code&gt; 목록을, &lt;code&gt;a&lt;/code&gt; 로 이동 &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 소유 &lt;code&gt;a&lt;/code&gt; . 그런 때 우리는 사용하려고 만들 때 다시 &lt;code&gt;c&lt;/code&gt; 하기 때문에, 우리가 허용하지 않는를 &lt;code&gt;a&lt;/code&gt; 이동되었습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ddcf60586798598b647a102cf947282e0f109f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Context&lt;/code&gt; of an asynchronous task.</source>
          <target state="translated">비동기 작업 의 &lt;code&gt;Context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2f260e119bb2a2221aaead7149c78bb8d75b87a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait allows you to duplicate a value by only copying bits stored on the stack; no arbitrary code is necessary. See the &lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;&amp;ldquo;Stack-Only Data: Copy&amp;rdquo;&lt;/a&gt; section in Chapter 4 for more information on &lt;code&gt;Copy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 특성은 만 스택에 저장 비트를 복사하여 값을 복제 할 수 있습니다; 임의의 코드가 필요하지 않습니다. 참고 항목 &lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;: &quot;복사 스택 전용 데이터&quot;&lt;/a&gt; 에 대한 자세한 내용은 제 4 장에서 섹션을 &lt;code&gt;Copy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6af89e2c9cf5d947b4b736850c9a97076811fab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait doesn&amp;rsquo;t define any methods to prevent programmers from overloading those methods and violating the assumption that no arbitrary code is being run. That way, all programmers can assume that copying a value will be very fast.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 특성은 그 방법에 과부하가 어떠한 임의의 코드가 실행되고 있지 않은지 가정을 위반하는 프로그래머를 방지하기 위해 어떤 방법을 정의하지 않습니다. 이렇게하면 모든 프로그래머가 값을 복사하는 것이 매우 빠르다고 가정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9a9d9ddc02bc50daec8b0c1f2146daf65e918a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait is implemented by default only on primitive types. If your type only contains primitive types, you'll be able to implement &lt;code&gt;Copy&lt;/code&gt; on it. Otherwise, it won't be possible.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 특성은 기본 유형에 기본적으로 구현됩니다. 유형에 기본 유형 만 포함되어있는 경우 &lt;code&gt;Copy&lt;/code&gt; 를 구현할 수 있습니다. 그렇지 않으면 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="8c62b63ef24786f929500cd4f0e354183f51728d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait is rarely required; types that implement &lt;code&gt;Copy&lt;/code&gt; have optimizations available, meaning you don&amp;rsquo;t have to call &lt;code&gt;clone&lt;/code&gt;, which makes the code more concise.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 특성이 거의 필요하지 않습니다; &lt;code&gt;Copy&lt;/code&gt; 를 구현하는 유형 에는 최적화가 가능 하므로 &lt;code&gt;clone&lt;/code&gt; 을 호출 할 필요가 없으므로 코드가 더 간결 해집니다.</target>
        </trans-unit>
        <trans-unit id="19e60de5e2cec4f66ffc273d83b18ba133a29961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait was implemented on a type which contains a field that doesn't implement the &lt;code&gt;Copy&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 구현하지 않는 필드가 포함 된 형식에 구현 된 특성 &lt;code&gt;Copy&lt;/code&gt; 특성을.</target>
        </trans-unit>
        <trans-unit id="5bc1853088c8596ec738b63d0b306b0f2a10680d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait was implemented on a type which is neither a struct nor an enum.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 특성은 구조체 나 열거도 아닌 유형에 구현되었다.</target>
        </trans-unit>
        <trans-unit id="23cc8d6ab49e3b2451486ee83ff4fdc2f0dab312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait was implemented on a type with a &lt;code&gt;Drop&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; 특성이있는 유형에 구현 된 &lt;code&gt;Drop&lt;/code&gt; 구현입니다.</target>
        </trans-unit>
        <trans-unit id="7a2c2f0333db2747594fc8c5736d8f8e947ab10e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Counter&lt;/code&gt; struct has one field named &lt;code&gt;count&lt;/code&gt;. This field holds a &lt;code&gt;u32&lt;/code&gt; value that will keep track of where we are in the process of iterating from 1 to 5. The &lt;code&gt;count&lt;/code&gt; field is private because we want the implementation of &lt;code&gt;Counter&lt;/code&gt; to manage its value. The &lt;code&gt;new&lt;/code&gt; function enforces the behavior of always starting new instances with a value of 0 in the &lt;code&gt;count&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;Counter&lt;/code&gt; 구조체는 하나 개의 필드를 임명했다 &lt;code&gt;count&lt;/code&gt; . 이 필드는 1에서 5까지 반복하는 과정을 추적 하는 &lt;code&gt;u32&lt;/code&gt; 값을 보유합니다 . &lt;code&gt;count&lt;/code&gt; 필드는 값을 관리하기 위해 &lt;code&gt;Counter&lt;/code&gt; 구현을 원하기 때문에 비공개 입니다. &lt;code&gt;new&lt;/code&gt; 기능은 항상 0의 값으로 새로운 인스턴스를 시작하는 동작을 적용 &lt;code&gt;count&lt;/code&gt; 필드.</target>
        </trans-unit>
        <trans-unit id="e402bbce82e84dd539cf1e138daa2856a0613786" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Debug&lt;/code&gt; trait allows you to print instances of a type for debugging purposes, so you and other programmers using your type can inspect an instance at a particular point in a program&amp;rsquo;s execution.</source>
          <target state="translated">&lt;code&gt;Debug&lt;/code&gt; 당신과 당신의 유형을 사용하여 다른 프로그래머가 프로그램의 실행의 특정 시점에 인스턴스를 검사 할 수 있도록, 디버깅 목적으로 유형의 인스턴스를 인쇄 할 수 있습니다 특징.</target>
        </trans-unit>
        <trans-unit id="853b42f22ba0be46a6e5cd03ba34756814292e76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Debug&lt;/code&gt; trait enables debug formatting in format strings, which you indicate by adding &lt;code&gt;:?&lt;/code&gt; within &lt;code&gt;{}&lt;/code&gt; placeholders.</source>
          <target state="translated">&lt;code&gt;Debug&lt;/code&gt; 특성은 추가하여 표시 형식 문자열에 서식 디버그를 할 수 있습니다 &lt;code&gt;:?&lt;/code&gt; &lt;code&gt;{}&lt;/code&gt; 자리 표시 자 내에서</target>
        </trans-unit>
        <trans-unit id="6967ae462b0a2a18036d993e8418edd4a969bd40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Debug&lt;/code&gt; trait is required, for example, in use of the &lt;code&gt;assert_eq!&lt;/code&gt; macro. This macro prints the values of instances given as arguments if the equality assertion fails so programmers can see why the two instances weren&amp;rsquo;t equal.</source>
          <target state="translated">&lt;code&gt;Debug&lt;/code&gt; 특성은의 사용, 예를 들어, 필요 &lt;code&gt;assert_eq!&lt;/code&gt; 매크로. 이 매크로는 등식 어설 션이 실패하면 프로그래머가 두 인스턴스가 서로 다른 이유를 확인할 수있는 경우 인수로 제공된 인스턴스 값을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="aba43f90e22e0dfd98100913cb543e02752ca675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Default::default&lt;/code&gt; function is commonly used in combination with the struct update syntax discussed in the &lt;a href=&quot;ch05-01-defining-structs#creating-instances-from-other-instances-with-struct-update-syntax&quot;&gt;&amp;ldquo;Creating Instances From Other Instances With Struct Update Syntax&amp;rdquo;&lt;/a&gt; section in Chapter 5. You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using &lt;code&gt;..Default::default()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Default::default&lt;/code&gt; 기능은 일반적에서 논의 된 구조체 업데이트 구문과 함께 사용된다 &lt;a href=&quot;ch05-01-defining-structs#creating-instances-from-other-instances-with-struct-update-syntax&quot;&gt;&quot;구조체 업데이트 구문을 사용하여 다른 인스턴스에서 생성 인스턴스&quot;&lt;/a&gt; 설정 및 사용 A를 다음 구조체의 몇 가지 필드를 사용자 정의 할 수 있습니다 제 5 장에서 섹션 &lt;code&gt;..Default::default()&lt;/code&gt; 사용하여 나머지 필드의 기본값 입니다.</target>
        </trans-unit>
        <trans-unit id="4f7be30b5dee7044de3817ca4c87b66ab54682e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Default&lt;/code&gt; cannot be derived on an enum for the simple reason that the compiler doesn't know which value to pick by default whereas it can for a struct as long as all its fields implement the &lt;code&gt;Default&lt;/code&gt; trait as well.</source>
          <target state="translated">&lt;code&gt;Default&lt;/code&gt; 컴파일러가 할 수있는 반면 긴 모든 필드는 구현으로 같은 구조체 기본적으로 선택되는 값을 알고하지 않는 단순한 이유 열거에서 파생 할 수없는 &lt;code&gt;Default&lt;/code&gt; 뿐만 아니라 특성을.</target>
        </trans-unit>
        <trans-unit id="155c03f436324748d5a47629042098342e63a6ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Default&lt;/code&gt; trait allows you to create a default value for a type. Deriving &lt;code&gt;Default&lt;/code&gt; implements the &lt;code&gt;default&lt;/code&gt; function. The derived implementation of the &lt;code&gt;default&lt;/code&gt; function calls the &lt;code&gt;default&lt;/code&gt; function on each part of the type, meaning all fields or values in the type must also implement &lt;code&gt;Default&lt;/code&gt; to derive &lt;code&gt;Default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Default&lt;/code&gt; 특성은 유형에 대한 기본값을 만들 수 있습니다. &lt;code&gt;Default&lt;/code&gt; 파생 은 &lt;code&gt;default&lt;/code&gt; 기능을 구현합니다 . 의 파생 구현 &lt;code&gt;default&lt;/code&gt; 기능은 호출 &lt;code&gt;default&lt;/code&gt; 도 구현해야하는 유형의 모든 필드 또는 값을 의미하는 유형의 각 부분에 기능을 &lt;code&gt;Default&lt;/code&gt; 유도하기 위해 &lt;code&gt;Default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="417d240e17ea189069372338520fb02d077b097b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Default&lt;/code&gt; trait for types which may have meaningful default values.</source>
          <target state="translated">의미있는 기본값을 가질 수있는 유형 의 &lt;code&gt;Default&lt;/code&gt; 특성.</target>
        </trans-unit>
        <trans-unit id="e9ffe8630d56067e177ef382279c1fa4ad4f3ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Default&lt;/code&gt; trait is required when you use the method &lt;code&gt;unwrap_or_default&lt;/code&gt; on &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; instances, for example. If the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the method &lt;code&gt;unwrap_or_default&lt;/code&gt; will return the result of &lt;code&gt;Default::default&lt;/code&gt; for the type &lt;code&gt;T&lt;/code&gt; stored in the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Default&lt;/code&gt; 당신이 방법을 사용할 때 특성이 필요합니다 &lt;code&gt;unwrap_or_default&lt;/code&gt; 을 에 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 경우, 예를 들면. 경우 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 입니다 &lt;code&gt;None&lt;/code&gt; , 메소드 &lt;code&gt;unwrap_or_default&lt;/code&gt; 은 결과 리턴 &lt;code&gt;Default::default&lt;/code&gt; 타입에 대한 &lt;code&gt;T&lt;/code&gt; 에 기억 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="faec1eafc86ec050669e657d677254ae1cc5eb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Default&lt;/code&gt; trait was derived on an enum.</source>
          <target state="translated">&lt;code&gt;Default&lt;/code&gt; 특성은 열거에서 파생되었다.</target>
        </trans-unit>
        <trans-unit id="3bac5d0a36fa049d2b9d797796c56dde34fe6945" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DispatchFromDyn&lt;/code&gt; trait currently can only be implemented for builtin pointer types and structs that are newtype wrappers around them &amp;mdash; that is, the struct must have only one field (except for&lt;code&gt;PhantomData&lt;/code&gt;), and that field must itself implement &lt;code&gt;DispatchFromDyn&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DispatchFromDyn&lt;/code&gt; 는 현재는 주변 newtype은 래퍼 내장 포인터 유형과 구조체 구현 될 수있는 특성 - 즉, 구조체 (를 제외하고 단 하나의 필드가 있어야합니다 &lt;code&gt;PhantomData&lt;/code&gt; 을 ), 그 필드 자체가 구현해야 &lt;code&gt;DispatchFromDyn&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f4511d27b8bd2f5f7b72a8b815a18a15df561075" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DispatchFromDyn&lt;/code&gt; trait was implemented on something which is not a pointer or a newtype wrapper around a pointer.</source>
          <target state="translated">&lt;code&gt;DispatchFromDyn&lt;/code&gt; 의 특성은 포인터 또는 포인터 주위에 newtype은 래퍼없는 무언가에 구현되었다.</target>
        </trans-unit>
        <trans-unit id="b6986e696b5a0b081bb4012a05eb9e1b65dcc35b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DraftPost&lt;/code&gt; struct has an &lt;code&gt;add_text&lt;/code&gt; method, so we can add text to &lt;code&gt;content&lt;/code&gt; as before, but note that &lt;code&gt;DraftPost&lt;/code&gt; does not have a &lt;code&gt;content&lt;/code&gt; method defined! So now the program ensures all posts start as draft posts, and draft posts don&amp;rsquo;t have their content available for display. Any attempt to get around these constraints will result in a compiler error.</source>
          <target state="translated">&lt;code&gt;DraftPost&lt;/code&gt; 의 구조체는이 &lt;code&gt;add_text&lt;/code&gt; 의 우리가 텍스트를 추가 할 수 있도록 방법을 &lt;code&gt;content&lt;/code&gt; 이전과 만 유의 &lt;code&gt;DraftPost&lt;/code&gt; 가 이없는 &lt;code&gt;content&lt;/code&gt; 방법 정의를! 이제 프로그램은 모든 게시물이 초안 게시물로 시작하고 초안 게시물에 내용을 표시 할 수 없도록합니다. 이러한 제약 조건을 해결하려고하면 컴파일러 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b1de117663cb2f27f8306ea33629038001aac2df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Drop&lt;/code&gt; trait is included in the prelude, so we don&amp;rsquo;t need to bring it into scope. We implement the &lt;code&gt;Drop&lt;/code&gt; trait on &lt;code&gt;CustomSmartPointer&lt;/code&gt; and provide an implementation for the &lt;code&gt;drop&lt;/code&gt; method that calls &lt;code&gt;println!&lt;/code&gt;. The body of the &lt;code&gt;drop&lt;/code&gt; function is where you would place any logic that you wanted to run when an instance of your type goes out of scope. We&amp;rsquo;re printing some text here to demonstrate when Rust will call &lt;code&gt;drop&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Drop&lt;/code&gt; 우리가 범위로 가져 필요가 없습니다 특성은 전주곡에 포함되어 있습니다. &lt;code&gt;CustomSmartPointer&lt;/code&gt; 에서 &lt;code&gt;Drop&lt;/code&gt; 특성을 구현하고 &lt;code&gt;println!&lt;/code&gt; 을 호출 하는 &lt;code&gt;drop&lt;/code&gt; 메소드에 대한 구현을 제공합니다 . . &lt;code&gt;drop&lt;/code&gt; 함수 의 본문은 유형의 인스턴스가 범위를 벗어날 때 실행하려는 로직을 배치하는 위치입니다. Rust가 언제 &lt;code&gt;drop&lt;/code&gt; 을 호출하는지 보여주기 위해 여기에 텍스트를 인쇄하고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a67a7efec93a37792cb31993e146b2f7a5f7bc09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Eq&lt;/code&gt; trait has no methods. Its purpose is to signal that for every value of the annotated type, the value is equal to itself. The &lt;code&gt;Eq&lt;/code&gt; trait can only be applied to types that also implement &lt;code&gt;PartialEq&lt;/code&gt;, although not all types that implement &lt;code&gt;PartialEq&lt;/code&gt; can implement &lt;code&gt;Eq&lt;/code&gt;. One example of this is floating point number types: the implementation of floating point numbers states that two instances of the not-a-number (&lt;code&gt;NaN&lt;/code&gt;) value are not equal to each other.</source>
          <target state="translated">&lt;code&gt;Eq&lt;/code&gt; 특성은 어떠한 방법이 없다. 그 목적은 주석이 달린 유형의 모든 값에 대해 값이 자체와 동일하다는 신호를 보내는 것입니다. &lt;code&gt;Eq&lt;/code&gt; 특성은 또한 구현 유형에 적용될 수 &lt;code&gt;PartialEq&lt;/code&gt; 을 구현하지 않지만 모든 유형, &lt;code&gt;PartialEq&lt;/code&gt; 을 구현할 수 &lt;code&gt;Eq&lt;/code&gt; . 부동 소수점 숫자 유형의 예로는 부동 소수점 숫자 유형이 있습니다. 부동 소수점 숫자의 구현은 숫자 가 아닌 ( &lt;code&gt;NaN&lt;/code&gt; ) 값 의 두 인스턴스가 서로 같지 않다고 말합니다 .</target>
        </trans-unit>
        <trans-unit id="339e508d8f9f4467a3c3de396b4c7c19141c661f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;F&lt;/code&gt; type parameter also has the trait bound &lt;code&gt;Send&lt;/code&gt; and the lifetime bound &lt;code&gt;'static&lt;/code&gt;, which are useful in our situation: we need &lt;code&gt;Send&lt;/code&gt; to transfer the closure from one thread to another and &lt;code&gt;'static&lt;/code&gt; because we don&amp;rsquo;t know how long the thread will take to execute. Let&amp;rsquo;s create an &lt;code&gt;execute&lt;/code&gt; method on &lt;code&gt;ThreadPool&lt;/code&gt; that will take a generic parameter of type &lt;code&gt;F&lt;/code&gt; with these bounds:</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 의 유형 매개 변수도 특성 바인딩이 &lt;code&gt;Send&lt;/code&gt; 및 바인딩 수명 &lt;code&gt;'static&lt;/code&gt; 우리의 상황에서 유용하다, 우리가 필요 &lt;code&gt;Send&lt;/code&gt; 서로 하나 개의 스레드에서 폐쇄를 전송하는 &lt;code&gt;'static&lt;/code&gt; 우리가 모르기 때문에 얼마나 스레드 것 실행하십시오. &lt;code&gt;ThreadPool&lt;/code&gt; 에서 다음과 같은 범위의 &lt;code&gt;F&lt;/code&gt; 유형의 일반 매개 변수를 사용하는 &lt;code&gt;execute&lt;/code&gt; 메서드를 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="44f286163600e21778b5e8ddc538f3f66c2c5215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;F&lt;/code&gt; type parameter is the one we&amp;rsquo;re concerned with here; the &lt;code&gt;T&lt;/code&gt; type parameter is related to the return value, and we&amp;rsquo;re not concerned with that. We can see that &lt;code&gt;spawn&lt;/code&gt; uses &lt;code&gt;FnOnce&lt;/code&gt; as the trait bound on &lt;code&gt;F&lt;/code&gt;. This is probably what we want as well, because we&amp;rsquo;ll eventually pass the argument we get in &lt;code&gt;execute&lt;/code&gt; to &lt;code&gt;spawn&lt;/code&gt;. We can be further confident that &lt;code&gt;FnOnce&lt;/code&gt; is the trait we want to use because the thread for running a request will only execute that request&amp;rsquo;s closure one time, which matches the &lt;code&gt;Once&lt;/code&gt; in &lt;code&gt;FnOnce&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 의 유형 매개 변수는 우리가 여기에 관심있는 하나이며, &lt;code&gt;T&lt;/code&gt; 의 유형 매개 변수는 반환 값에 관련되어, 우리는 그와 관련 아닙니다. &lt;code&gt;spawn&lt;/code&gt; &lt;code&gt;F&lt;/code&gt; 에 바인딩 된 특성으로 &lt;code&gt;FnOnce&lt;/code&gt; 를 사용 하는 것을 볼 수 있습니다 . 이것은 아마도 우리가 원하는 것 일 것입니다. 우리는 결국 우리가 &lt;code&gt;execute&lt;/code&gt; 인수 를 &lt;code&gt;spawn&lt;/code&gt; 하기 때문에 전달합니다 . 요청을 실행하는 스레드는 해당 요청의 클로저를 한 번만 실행하므로 &lt;code&gt;Once&lt;/code&gt; in &lt;code&gt;FnOnce&lt;/code&gt; 와 일치하기 때문에 &lt;code&gt;FnOnce&lt;/code&gt; 가 사용하려는 특성이라고 더 확신 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2cc0c55739bb91f91d10f706c9cab70e100723e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fn&lt;/code&gt; traits are provided by the standard library. All closures implement at least one of the traits: &lt;code&gt;Fn&lt;/code&gt;, &lt;code&gt;FnMut&lt;/code&gt;, or &lt;code&gt;FnOnce&lt;/code&gt;. We&amp;rsquo;ll discuss the difference between these traits in the &lt;a href=&quot;#capturing-the-environment-with-closures&quot;&gt;&amp;ldquo;Capturing the Environment with Closures&amp;rdquo;&lt;/a&gt; section; in this example, we can use the &lt;code&gt;Fn&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Fn&lt;/code&gt; 특성은 표준 라이브러리에 의해 제공됩니다. 모든 클로저는 &lt;code&gt;Fn&lt;/code&gt; , &lt;code&gt;FnMut&lt;/code&gt; 또는 &lt;code&gt;FnOnce&lt;/code&gt; 특성 중 하나 이상을 구현 합니다. &lt;a href=&quot;#capturing-the-environment-with-closures&quot;&gt;&amp;ldquo;폐쇄 된 환경 캡처&amp;rdquo;&lt;/a&gt; 섹션 에서 이러한 특성의 차이점에 대해 설명합니다 . 이 예에서는 &lt;code&gt;Fn&lt;/code&gt; 특성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="851722264534e1910cdc1ef4f424b4a4414f9688" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;From&lt;/code&gt; is also very useful when performing error handling. When constructing a function that is capable of failing, the return type will generally be of the form &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. The &lt;code&gt;From&lt;/code&gt; trait simplifies error handling by allowing a function to return a single error type that encapsulate multiple error types. See the &quot;Examples&quot; section and &lt;a href=&quot;../../book/ch09-00-error-handling&quot;&gt;the book&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 오류 처리를 수행 할 때 매우 유용합니다. 실패 할 수있는 함수를 구성 할 때 반환 유형은 일반적으로 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 입니다. &lt;code&gt;From&lt;/code&gt; 함수가 여러 오류 유형을 캡슐화 한 오류 유형을 반환 할 수 있도록하여 특성 단순화 오류 처리. 자세한 내용은 &quot;예&quot;섹션과 &lt;a href=&quot;../../book/ch09-00-error-handling&quot;&gt;책&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="924c96483cec1214b829647e918270a4c12cbe49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorState&lt;/code&gt; enum returned from this function indicates what state the generator is in upon returning. If the &lt;code&gt;Yielded&lt;/code&gt; variant is returned then the generator has reached a suspension point and a value has been yielded out. Generators in this state are available for resumption at a later point.</source>
          <target state="translated">이 함수에서 반환 된 &lt;code&gt;GeneratorState&lt;/code&gt; 열거 형은 생성자가 반환 할 때의 상태를 나타냅니다. 경우] &lt;code&gt;Yielded&lt;/code&gt; 변형 후 리턴 발전기가 정지 지점에 도달하고있는 Value가 수득되었다. 이 상태의 발전기는 나중에 재개 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93144a0b07feb0dfc814fce370a7ec1878fc8518" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlobalAlloc&lt;/code&gt; trait is an &lt;code&gt;unsafe&lt;/code&gt; trait for a number of reasons, and implementors must ensure that they adhere to these contracts:</source>
          <target state="translated">&lt;code&gt;GlobalAlloc&lt;/code&gt; 에 특성은이다 &lt;code&gt;unsafe&lt;/code&gt; 이유에 대한 특성 및 구현은이 계약을 준수하는지 확인해야합니다 :</target>
        </trans-unit>
        <trans-unit id="ac746bf118e800d6204d1b9be35a781fccfa8fc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; trait allows you to take an instance of a type of arbitrary size and map that instance to a value of fixed size using a hash function. Deriving &lt;code&gt;Hash&lt;/code&gt; implements the &lt;code&gt;hash&lt;/code&gt; method. The derived implementation of the &lt;code&gt;hash&lt;/code&gt; method combines the result of calling &lt;code&gt;hash&lt;/code&gt; on each of the parts of the type, meaning all fields or values must also implement &lt;code&gt;Hash&lt;/code&gt; to derive &lt;code&gt;Hash&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; 특성은 임의의 크기의 형식의 인스턴스를 가지고 해시 함수를 사용하여 고정 된 크기의 값으로 해당 인스턴스를 매핑 할 수 있습니다. &lt;code&gt;Hash&lt;/code&gt; 파생 은 &lt;code&gt;hash&lt;/code&gt; 방법을 구현합니다 . 의 도출 구현 &lt;code&gt;hash&lt;/code&gt; 메소드 호출 결과 결합 &lt;code&gt;hash&lt;/code&gt; 의 종류의 부품의 각각에있는 모든 필드 또는 값도 구현해야 의미 &lt;code&gt;Hash&lt;/code&gt; 도출하도록 &lt;code&gt;Hash&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc2c322c74118357f702bcbb43acd3519194cb4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Iterator&lt;/code&gt; trait has a number of different methods with default implementations provided by the standard library; you can find out about these methods by looking in the standard library API documentation for the &lt;code&gt;Iterator&lt;/code&gt; trait. Some of these methods call the &lt;code&gt;next&lt;/code&gt; method in their definition, which is why you&amp;rsquo;re required to implement the &lt;code&gt;next&lt;/code&gt; method when implementing the &lt;code&gt;Iterator&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Iterator&lt;/code&gt; 표준 라이브러리에서 제공하는 기본 구현과 상이한 다수의 방법이있다 특성; &lt;code&gt;Iterator&lt;/code&gt; 특성에 대한 표준 라이브러리 API 문서에서 이러한 메소드에 대해 찾을 수 있습니다 . 이러한 메소드 중 일부는 정의에서 &lt;code&gt;next&lt;/code&gt; 메소드를 호출 하므로 &lt;code&gt;Iterator&lt;/code&gt; 특성을 구현할 때 &lt;code&gt;next&lt;/code&gt; 메소드를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d7674b68a4f6af8a05d48508e05e8b51cf5d1646" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Iterator&lt;/code&gt; trait only requires implementors to define one method: the &lt;code&gt;next&lt;/code&gt; method, which returns one item of the iterator at a time wrapped in &lt;code&gt;Some&lt;/code&gt; and, when iteration is over, returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Iterator&lt;/code&gt; : 하나의 방법 정의 구현을 필요로 특징 부 (trait) &lt;code&gt;next&lt;/code&gt; 방법에 싸여 한 번에 반복자의 한 항목을 반환 &lt;code&gt;Some&lt;/code&gt; 반복, 이상 반환하지 않는 경우, 및 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f9025083930c31cf7871ed20937306b52f26761a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinkedList&lt;/code&gt; allows pushing and popping elements at either end in constant time.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; 의는 밀고 일정 시간의 양쪽 끝에 요소를 보여주고 있습니다.</target>
        </trans-unit>
        <trans-unit id="4baf38aed9bf1ffe36a931bbfb0cb77e6aa0a43b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LowerExp&lt;/code&gt; trait should format its output in scientific notation with a lower-case &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LowerExp&lt;/code&gt; 이 특성은 소문자와 과학적 표기법의 출력을 포맷한다 &lt;code&gt;e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dc66d9062a365376bc4e9ff4cb202550c7cc32a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LowerHex&lt;/code&gt; trait should format its output as a number in hexadecimal, with &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; in lower case.</source>
          <target state="translated">&lt;code&gt;LowerHex&lt;/code&gt; 의 특성으로는, 16 진수 숫자로의 출력을 포맷한다 내지 &lt;code&gt;f&lt;/code&gt; 소문자. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b321c2a56af633f328bf4b8ba254ce361d7a954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Octal&lt;/code&gt; trait should format its output as a number in base-8.</source>
          <target state="translated">&lt;code&gt;Octal&lt;/code&gt; 특성은 염기 - 8의 수와, 그 출력을 포맷한다.</target>
        </trans-unit>
        <trans-unit id="eb10a578affd8a62e12f3ef265b344e167e3dcf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum is so useful that it&amp;rsquo;s even included in the prelude; you don&amp;rsquo;t need to bring it into scope explicitly. In addition, so are its variants: you can use &lt;code&gt;Some&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; directly without the &lt;code&gt;Option::&lt;/code&gt; prefix. The &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum is still just a regular enum, and &lt;code&gt;Some(T)&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; are still variants of type &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 열거 IS가도 전주곡에 포함되도록 유용한; 명시 적으로 범위로 가져올 필요가 없습니다. 또한 변형도 있습니다 . &lt;code&gt;Option::&lt;/code&gt; 접두사 없이 &lt;code&gt;Some&lt;/code&gt; 및 &lt;code&gt;None&lt;/code&gt; 을 직접 사용할 수 있습니다 . &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 열거 IS 여전히 정기적으로 열거하고, &lt;code&gt;Some(T)&lt;/code&gt; 과 &lt;code&gt;None&lt;/code&gt; 여전히 형 변종이다 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="757a8b38147115f7267a95ffaa6fac00dcad6a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Option&lt;/code&gt; type. See &lt;a href=&quot;index&quot;&gt;the module level documentation&lt;/a&gt; for more.</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; 유형입니다. 자세한 내용 &lt;a href=&quot;index&quot;&gt;은 모듈 수준 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6ec87aec96d36200bb49beb7ba67c5c626bb7aad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ord&lt;/code&gt; trait allows you to know that for any two values of the annotated type, a valid ordering will exist. The &lt;code&gt;Ord&lt;/code&gt; trait implements the &lt;code&gt;cmp&lt;/code&gt; method, which returns an &lt;code&gt;Ordering&lt;/code&gt; rather than an &lt;code&gt;Option&amp;lt;Ordering&amp;gt;&lt;/code&gt; because a valid ordering will always be possible. You can only apply the &lt;code&gt;Ord&lt;/code&gt; trait to types that also implement &lt;code&gt;PartialOrd&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; (and &lt;code&gt;Eq&lt;/code&gt; requires &lt;code&gt;PartialEq&lt;/code&gt;). When derived on structs and enums, &lt;code&gt;cmp&lt;/code&gt; behaves the same way as the derived implementation for &lt;code&gt;partial_cmp&lt;/code&gt; does with &lt;code&gt;PartialOrd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ord&lt;/code&gt; 특성은 주석 유형의 두 값에 대한 올바른 순서가 존재하는 것을 알 수 있습니다. &lt;code&gt;Ord&lt;/code&gt; 구현에게 형질 &lt;code&gt;cmp&lt;/code&gt; 반환 방법, &lt;code&gt;Ordering&lt;/code&gt; 보다는 &lt;code&gt;Option&amp;lt;Ordering&amp;gt;&lt;/code&gt; 올바른 순서는 항상 가능하기 때문. 경우에만 적용 할 수 있습니다 &lt;code&gt;Ord&lt;/code&gt; 도 구현 유형 특성을 &lt;code&gt;PartialOrd&lt;/code&gt; 와 &lt;code&gt;Eq&lt;/code&gt; (그리고 &lt;code&gt;Eq&lt;/code&gt; 필요 &lt;code&gt;PartialEq&lt;/code&gt; 을 ). 구조체와 열거 형에서 파생 된 &lt;code&gt;cmp&lt;/code&gt; 는 &lt;code&gt;partial_cmp&lt;/code&gt; 에 대한 파생 구현 이 &lt;code&gt;PartialOrd&lt;/code&gt; 와 동일한 방식으로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="711a8eb9ad73721345ff8b7d5d49057eb05ba2c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Orphan Check&lt;/code&gt; states that every trait implementation must meet either of the following conditions:</source>
          <target state="translated">&lt;code&gt;Orphan Check&lt;/code&gt; 모든 특성 구현이 다음 조건 중 하나에 부합해야합니다 상태 :</target>
        </trans-unit>
        <trans-unit id="c00d178bf6b2317cc12ea4871792b476ee2d6ac7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PartialEq&lt;/code&gt; trait allows you to compare instances of a type to check for equality and enables use of the &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.</source>
          <target state="translated">&lt;code&gt;PartialEq&lt;/code&gt; 당신이 어떤지를 확인하는 유형의 인스턴스를 비교할 수 있습니다 및 사용 가능 특성 &lt;code&gt;==&lt;/code&gt; 와 &lt;code&gt;!=&lt;/code&gt; 연산자를.</target>
        </trans-unit>
        <trans-unit id="43e89dc3eb492904f3da074b02b2cf97b105430c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PartialEq&lt;/code&gt; trait is required, for example, with the use of the &lt;code&gt;assert_eq!&lt;/code&gt; macro, which needs to be able to compare two instances of a type for equality.</source>
          <target state="translated">&lt;code&gt;PartialEq&lt;/code&gt; 의 특성은의 사용으로, 예를 들어, 필요 &lt;code&gt;assert_eq!&lt;/code&gt; 매크로는 유형의 두 인스턴스가 동일한 지 비교할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="a3b5763e3772b503d126748c966660daf7b02e86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PartialOrd&lt;/code&gt; trait allows you to compare instances of a type for sorting purposes. A type that implements &lt;code&gt;PartialOrd&lt;/code&gt; can be used with the &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt; operators. You can only apply the &lt;code&gt;PartialOrd&lt;/code&gt; trait to types that also implement &lt;code&gt;PartialEq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PartialOrd&lt;/code&gt; 의 특성은 당신이 목적을 정렬 유형의 인스턴스를 비교할 수 있습니다. &lt;code&gt;PartialOrd&lt;/code&gt; 를 구현하는 형식 은 &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; 및 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자 와 함께 사용할 수 있습니다 . 경우에만 적용 할 수 있습니다 &lt;code&gt;PartialOrd&lt;/code&gt; 의 도 구현 유형 특성을 &lt;code&gt;PartialEq&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d44604638bc3e14fe0790aae9645322a35831c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PartialOrd&lt;/code&gt; trait is required, for example, for the &lt;code&gt;gen_range&lt;/code&gt; method from the &lt;code&gt;rand&lt;/code&gt; crate that generates a random value in the range specified by a low value and a high value.</source>
          <target state="translated">&lt;code&gt;PartialOrd&lt;/code&gt; 의 특성은, 예를 들면, 필요 &lt;code&gt;gen_range&lt;/code&gt; 용 로부터있어서 &lt;code&gt;rand&lt;/code&gt; 낮은 값과 높은 값에 의해 지정된 범위 내의 임의의 값을 생성 상자.</target>
        </trans-unit>
        <trans-unit id="aa9b33d349ddf99a4aba8a405103bf7fb4c6e253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pointer&lt;/code&gt; trait should format its output as a memory location. This is commonly presented as hexadecimal.</source>
          <target state="translated">&lt;code&gt;Pointer&lt;/code&gt; 특징은 메모리 위치로의 출력을 포맷한다. 이것은 일반적으로 16 진수로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ab8bbad2b08fc48ec0e5ed2730d22da62501a267" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Range&lt;/code&gt;&lt;code&gt;start..end&lt;/code&gt; contains all values with &lt;code&gt;x &amp;gt;= start&lt;/code&gt; and &lt;code&gt;x &amp;lt; end&lt;/code&gt;. It is empty unless &lt;code&gt;start &amp;lt; end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Range&lt;/code&gt; &lt;code&gt;start..end&lt;/code&gt; 모든 값을 포함 &lt;code&gt;x &amp;gt;= start&lt;/code&gt; 하고 &lt;code&gt;x &amp;lt; end&lt;/code&gt; . &lt;code&gt;start &amp;lt; end&lt;/code&gt; 가 아니면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2aa0761be84214baf72bdc665e4aaa54d88ab96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RangeFrom&lt;/code&gt;&lt;code&gt;start..&lt;/code&gt; contains all values with &lt;code&gt;x &amp;gt;= start&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RangeFrom&lt;/code&gt; 의 &lt;code&gt;start..&lt;/code&gt; 모든 값을 포함하는 &lt;code&gt;x &amp;gt;= start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73c149dd90366bce823890f694cf867f1bb0a225" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RangeInclusive&lt;/code&gt;&lt;code&gt;start..=end&lt;/code&gt; contains all values with &lt;code&gt;x &amp;gt;= start&lt;/code&gt; and &lt;code&gt;x &amp;lt;= end&lt;/code&gt;. It is empty unless &lt;code&gt;start &amp;lt;= end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RangeInclusive&lt;/code&gt; &lt;code&gt;start..=end&lt;/code&gt; 모든 값을 포함 &lt;code&gt;x &amp;gt;= start&lt;/code&gt; 하고 &lt;code&gt;x &amp;lt;= end&lt;/code&gt; . &lt;code&gt;start &amp;lt;= end&lt;/code&gt; 아니면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cec61b7c44a745e689ab10fff029089cd54c5d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RangeTo&lt;/code&gt;&lt;code&gt;..end&lt;/code&gt; contains all values with &lt;code&gt;x &amp;lt; end&lt;/code&gt;. It cannot serve as an &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; because it doesn't have a starting point.</source>
          <target state="translated">&lt;code&gt;RangeTo&lt;/code&gt; 의 &lt;code&gt;..end&lt;/code&gt; 은 모든 값을 포함 &lt;code&gt;x &amp;lt; end&lt;/code&gt; . 시작점이 없기 때문에 &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 로 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0de78a1c773797166ef937a052ccd5e9331c867f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RangeTo&lt;/code&gt;&lt;code&gt;..end&lt;/code&gt; contains all values with &lt;code&gt;x &amp;lt; end&lt;/code&gt;. It cannot serve as an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; because it doesn't have a starting point.</source>
          <target state="translated">&lt;code&gt;RangeTo&lt;/code&gt; 의 &lt;code&gt;..end&lt;/code&gt; 은 모든 값을 포함 &lt;code&gt;x &amp;lt; end&lt;/code&gt; . 시작점이 없기 때문에 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 역할을 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8e2d4326e8450b1f620c09e80702de680708776b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RangeToInclusive&lt;/code&gt;&lt;code&gt;..=end&lt;/code&gt; contains all values with &lt;code&gt;x &amp;lt;= end&lt;/code&gt;. It cannot serve as an &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; because it doesn't have a starting point.</source>
          <target state="translated">&lt;code&gt;RangeToInclusive&lt;/code&gt; &lt;code&gt;..=end&lt;/code&gt; 모든 값을 포함 &lt;code&gt;x &amp;lt;= end&lt;/code&gt; . 시작점이 없기 때문에 &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 로 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0729997e88bb0119e0af233dfbcdefc61396cf4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RangeToInclusive&lt;/code&gt;&lt;code&gt;..=end&lt;/code&gt; contains all values with &lt;code&gt;x &amp;lt;= end&lt;/code&gt;. It cannot serve as an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; because it doesn't have a starting point.</source>
          <target state="translated">&lt;code&gt;RangeToInclusive&lt;/code&gt; &lt;code&gt;..=end&lt;/code&gt; 모든 값을 포함 &lt;code&gt;x &amp;lt;= end&lt;/code&gt; . 시작점이 없기 때문에 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 역할을 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ebdc80637c460a3fe51040149db057ee546f653a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rc::clone(&amp;amp;from)&lt;/code&gt; syntax is the most idiomatic because it conveys more explicitly the meaning of the code. In the example above, this syntax makes it easier to see that this code is creating a new reference rather than copying the whole content of foo.</source>
          <target state="translated">&lt;code&gt;Rc::clone(&amp;amp;from)&lt;/code&gt; 좀 더 명시 적으로 코드의 의미를 전달하기 때문에 구문은 대부분의 관용적이다. 위 예제에서이 구문을 사용하면이 코드가 foo의 전체 내용을 복사하지 않고 새로운 참조를 작성하고 있음을 쉽게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d18566a4555f118c35b2f7296c41294a80e62f05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Read&lt;/code&gt; trait allows for reading bytes from a source.</source>
          <target state="translated">&lt;code&gt;Read&lt;/code&gt; 특성은 소스에서 바이트를 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="167de79249a0cb690644cc2f30f26fd674ac84c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; keeps track of how many &lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; smart pointers are currently active. Every time we call &lt;code&gt;borrow&lt;/code&gt;, the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; increases its count of how many immutable borrows are active. When a &lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt; value goes out of scope, the count of immutable borrows goes down by one. Just like the compile-time borrowing rules, &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; lets us have many immutable borrows or one mutable borrow at any point in time.</source>
          <target state="translated">&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 의 추적 얼마나 많은 &lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt; 와 &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; 스마트 포인터가 현재 활성 상태입니다. 우리가 전화를 할 때마다 &lt;code&gt;borrow&lt;/code&gt; 의 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 많은 불변의 차용이 활성화 방법의 수를 증가시킨다. 때 &lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt; 값이 범위를 벗어나, 불변 차용의 카운트는 1 씩 아래로 진행한다. 컴파일 타임 차용 ​​규칙과 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 사용하면 언제든지 많은 불변의 차용 또는 하나의 변경 가능한 차용을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e6771afd6b14e03fc38f6d16106ee1f97bd4cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RefCell&lt;/code&gt; is already immutably borrowed, so this cannot fail.</source>
          <target state="translated">&lt;code&gt;RefCell&lt;/code&gt; 는 이미 불변 빌려, 그래서 이것은 실패 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c305974ea6149ae71e2c43fcd219e993594dd96e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RefCell&lt;/code&gt; is already mutably borrowed, so this cannot fail.</source>
          <target state="translated">&lt;code&gt;RefCell&lt;/code&gt; 는 이미 mutably 빌려, 그래서 이것은 실패 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="52b1edfc20b8e3433cc429a2a34dab08626e2ce2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Result&amp;lt;..., Error&amp;gt;&lt;/code&gt; is repeated a lot. As such, &lt;code&gt;std::io&lt;/code&gt; has this type of alias declaration:</source>
          <target state="translated">&lt;code&gt;Result&amp;lt;..., Error&amp;gt;&lt;/code&gt; 많이 반복한다. 따라서 &lt;code&gt;std::io&lt;/code&gt; 에는 다음 유형의 별칭 선언이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e71572578c618ddeccc701e84d14574b4552896" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Result&lt;/code&gt; enum is generic over two types, &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;, and has two variants: &lt;code&gt;Ok&lt;/code&gt;, which holds a value of type &lt;code&gt;T&lt;/code&gt;, and &lt;code&gt;Err&lt;/code&gt;, which holds a value of type &lt;code&gt;E&lt;/code&gt;. This definition makes it convenient to use the &lt;code&gt;Result&lt;/code&gt; enum anywhere we have an operation that might succeed (return a value of some type &lt;code&gt;T&lt;/code&gt;) or fail (return an error of some type &lt;code&gt;E&lt;/code&gt;). In fact, this is what we used to open a file in Listing 9-3, where &lt;code&gt;T&lt;/code&gt; was filled in with the type &lt;code&gt;std::fs::File&lt;/code&gt; when the file was opened successfully and &lt;code&gt;E&lt;/code&gt; was filled in with the type &lt;code&gt;std::io::Error&lt;/code&gt; when there were problems opening the file.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; 열거 두 종류 이상의 제네릭 &lt;code&gt;T&lt;/code&gt; 와 &lt;code&gt;E&lt;/code&gt; , 그리고 두 가지 변종이 있습니다 &lt;code&gt;Ok&lt;/code&gt; 유형의 값 보유, &lt;code&gt;T&lt;/code&gt; , 및 &lt;code&gt;Err&lt;/code&gt; 형의 값을 보유하고, &lt;code&gt;E&lt;/code&gt; 를 . 이 정의를 사용하면 성공 ( &lt;code&gt;T&lt;/code&gt; 유형의 값을 반환 ) 또는 실패 (일부 유형 &lt;code&gt;E&lt;/code&gt; 의 오류를 반환) 할 수있는 작업이있는 모든 위치 에서 &lt;code&gt;Result&lt;/code&gt; 열거 형을 편리하게 사용할 수 있습니다 . 사실, 이것은 우리가 목록 9-3에서 파일을 여는 데 사용되는 것입니다 &lt;code&gt;T&lt;/code&gt; 는 종류에 기입 된 &lt;code&gt;std::fs::File&lt;/code&gt; 파일이 성공적으로 열릴 때 &lt;code&gt;E&lt;/code&gt; 파일을 여는 데 문제가있을 때 &lt;code&gt;std::io::Error&lt;/code&gt; 유형으로 채워졌습니다 .</target>
        </trans-unit>
        <trans-unit id="67d17ec2155cc71f4cbd159b4631b04d17855080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Result&lt;/code&gt; types are &lt;a href=&quot;ch06-00-enums&quot;&gt;&lt;em&gt;enumerations&lt;/em&gt;&lt;/a&gt;, often referred to as &lt;em&gt;enums&lt;/em&gt;. An enumeration is a type that can have a fixed set of values, and those values are called the enum&amp;rsquo;s &lt;em&gt;variants&lt;/em&gt;. Chapter 6 will cover enums in more detail.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; 유형은 &lt;a href=&quot;ch06-00-enums&quot;&gt;&lt;em&gt;열거&lt;/em&gt;&lt;/a&gt; 종종 언급 &lt;em&gt;열거&lt;/em&gt; . 열거 형은 고정 된 값 세트를 가질 수있는 유형이며, 이러한 값을 열거 형 &lt;em&gt;variant&lt;/em&gt; 라고합니다 . 6 장에서는 열거 형에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="64d4c779a9a53da0609d26369514238e751f0a8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Seek&lt;/code&gt; trait provides a cursor which can be moved within a stream of bytes.</source>
          <target state="translated">는 &lt;code&gt;Seek&lt;/code&gt; 특성 바이트의 스트림 내에서 이동할 수있는 커서를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="45132395a8da1a9af17f15db9b29d073d0c74c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Self&lt;/code&gt; keyword is an alias for the type we&amp;rsquo;re implementing the traits or methods on. Trait objects must be object safe because once you&amp;rsquo;ve used a trait object, Rust no longer knows the concrete type that&amp;rsquo;s implementing that trait. If a trait method returns the concrete &lt;code&gt;Self&lt;/code&gt; type, but a trait object forgets the exact type that &lt;code&gt;Self&lt;/code&gt; is, there is no way the method can use the original concrete type. The same is true of generic type parameters that are filled in with concrete type parameters when the trait is used: the concrete types become part of the type that implements the trait. When the type is forgotten through the use of a trait object, there is no way to know what types to fill in the generic type parameters with.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; 키워드는 우리의 특성 또는 방법을 구현하고있는 유형의 별칭입니다. 특성 개체를 사용한 후에는 특성을 구현하는 콘크리트 유형을 더 이상 알 수 없으므로 특성 개체는 개체 안전해야합니다. 특성 메소드가 구체적 &lt;code&gt;Self&lt;/code&gt; 유형을 리턴 하지만 특성 오브젝트가 &lt;code&gt;Self&lt;/code&gt; 와 동일한 유형을 잊어 버린 경우 메소드가 원래 콘크리트 유형을 사용할 수있는 방법이 없습니다. 특성이 사용될 때 콘크리트 유형 매개 변수로 채워지는 일반 유형 매개 변수의 경우에도 마찬가지입니다. 콘크리트 유형은 특성을 구현하는 유형의 일부가됩니다. 특성 오브젝트를 사용하여 유형을 잊어 버린 경우 일반 유형 매개 변수를 채울 유형을 알 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="90a76b71efb75f391d26231783f81feb6c797a7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Self&lt;/code&gt; keyword represents the current type, which explains why it can only be used inside an impl, trait, or type definition. It gives access to the associated items of a type:</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; 키워드가 단지 IMPL, 특성, 또는 형식 정의 내에서 사용할 수있는 이유를 설명 현재의 형태를 나타냅니다. 유형의 관련 항목에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a02332e854d71300403fa93482ff8605d97eadb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Self&lt;/code&gt; keyword was used outside an impl, trait, or type definition.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; 키워드는 IMPL, 특성, 또는 형식 정의 외부에 사용되었다.</target>
        </trans-unit>
        <trans-unit id="6a3c6ecd1deb9539342b4b667c8f7da5207114d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Self&lt;/code&gt; term can be replaced with the type being implemented.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; 용어는 타입이 구현되고 대체 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="268068ec98ee8d589f1d0d25a4fa87cb52fefae1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Self&lt;/code&gt; terminal in this grammar denotes a type resolving to the implementing type. This can also include the contextual type alias &lt;code&gt;Self&lt;/code&gt;, other type aliases, or associated type projections resolving to the implementing type.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; 이 문법 단말기는 실시 형태에 해결 타입을 나타낸다. 여기에는 컨텍스트 형식 별칭 &lt;code&gt;Self&lt;/code&gt; , 기타 형식 별칭 또는 구현 형식으로 확인되는 관련 형식 프로젝션 이 포함될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d50619fe26b234beecf764a55ec164440b77b3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Send&lt;/code&gt; marker trait indicates that ownership of the type implementing &lt;code&gt;Send&lt;/code&gt; can be transferred between threads. Almost every Rust type is &lt;code&gt;Send&lt;/code&gt;, but there are some exceptions, including &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;: this cannot be &lt;code&gt;Send&lt;/code&gt; because if you cloned an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; value and tried to transfer ownership of the clone to another thread, both threads might update the reference count at the same time. For this reason, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is implemented for use in single-threaded situations where you don&amp;rsquo;t want to pay the thread-safe performance penalty.</source>
          <target state="translated">&lt;code&gt;Send&lt;/code&gt; 유형 구현의 소유권을 나타냅니다 특성 마커 &lt;code&gt;Send&lt;/code&gt; 스레드 사이에 전송 될 수있다. 거의 모든 녹 유형이 &lt;code&gt;Send&lt;/code&gt; 만 등 일부 예외가 있습니다 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; :이 될 수 없습니다 &lt;code&gt;Send&lt;/code&gt; 당신이 복제 된 경우 때문에 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 값을 다른 스레드 클론의 소유권 이전에 시도, 두 스레드가를 업데이트 할 수 있습니다 동시에 참조 카운트. 이러한 이유로 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 는 스레드 안전성 성능 저하를 원하지 않는 단일 스레드 상황에서 사용하도록 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="da7504f8cf4ba12a9f166abe295fe49d0cc29f7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sized&lt;/code&gt; trait is a special trait built-in to the compiler for types with a constant size known at compile-time. This trait is automatically implemented for types as needed by the compiler, and it is currently disallowed to explicitly implement it for a type.</source>
          <target state="translated">&lt;code&gt;Sized&lt;/code&gt; 특성은 내장 유형에 대한 컴파일러에 대한 컴파일 타임에 일정한 크기의 특별한 특징이다. 이 특성은 컴파일러에서 필요에 따라 유형에 대해 자동으로 구현되며 현재 유형에 대해 명시 적으로 구현할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="faed9283b4f09789ea3439cf47c62be8b01765b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sized&lt;/code&gt; trait was implemented explicitly.</source>
          <target state="translated">&lt;code&gt;Sized&lt;/code&gt; 특성은 명시 적으로 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="57ed07b6ec3a8248f3dbedbfe819f564dab9a89c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Some(5)&lt;/code&gt; value doesn&amp;rsquo;t match the pattern &lt;code&gt;None&lt;/code&gt;, so we continue to the next arm.</source>
          <target state="translated">&lt;code&gt;Some(5)&lt;/code&gt; 값은 패턴과 일치하지 않습니다 &lt;code&gt;None&lt;/code&gt; 우리는 다음 팔을 계속, 그래서.</target>
        </trans-unit>
        <trans-unit id="5cf7d1bcd1b02d8684f384aeb150bd3c1fada36f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;State&lt;/code&gt; trait defines the behavior shared by different post states, and the &lt;code&gt;Draft&lt;/code&gt;, &lt;code&gt;PendingReview&lt;/code&gt;, and &lt;code&gt;Published&lt;/code&gt; states will all implement the &lt;code&gt;State&lt;/code&gt; trait. For now, the trait doesn&amp;rsquo;t have any methods, and we&amp;rsquo;ll start by defining just the &lt;code&gt;Draft&lt;/code&gt; state because that is the state we want a post to start in.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 특성은 서로 다른 후 상태가 공유하는 동작을 정의하고, &lt;code&gt;Draft&lt;/code&gt; , &lt;code&gt;PendingReview&lt;/code&gt; 및 &lt;code&gt;Published&lt;/code&gt; 상태는 모두 구현할 &lt;code&gt;State&lt;/code&gt; 특성을. 지금은이 특성에 메소드가 없으며, &lt;code&gt;Draft&lt;/code&gt; 상태 만 정의 하여 시작합니다. 그 이유는 게시물을 시작하려는 상태이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a99c80ac2ff235e2978574f670cbd4660bb61703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; type implements the &lt;code&gt;Clone&lt;/code&gt; trait, and when we call the &lt;code&gt;clone&lt;/code&gt; method on an instance of &lt;code&gt;String&lt;/code&gt; we get back an instance of &lt;code&gt;String&lt;/code&gt;. Similarly, if we call &lt;code&gt;clone&lt;/code&gt; on an instance of &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, we get back an instance of &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. The signature of &lt;code&gt;clone&lt;/code&gt; needs to know what type will stand in for &lt;code&gt;Self&lt;/code&gt;, because that&amp;rsquo;s the return type.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 타입 구현하는 &lt;code&gt;Clone&lt;/code&gt; 의 특성, 우리가 호출 할 때 &lt;code&gt;clone&lt;/code&gt; 의 인스턴스에 방법을 &lt;code&gt;String&lt;/code&gt; 우리의 인스턴스 돌아가 &lt;code&gt;String&lt;/code&gt; . 우리가 호출하는 경우 마찬가지로, &lt;code&gt;clone&lt;/code&gt; 의 인스턴스에 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; , 우리의 인스턴스 돌아 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; . &lt;code&gt;clone&lt;/code&gt; 의 서명은 반환 유형이기 때문에 &lt;code&gt;Self&lt;/code&gt; 에 어떤 유형의 스탠드가 필요한지 알아야 합니다.</target>
        </trans-unit>
        <trans-unit id="ce3a0f98cdb5c97fe7ff53bab286ef96b0a0614f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; type is the most common string type that has ownership over the contents of the string. It has a close relationship with its borrowed counterpart, the primitive &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 타입은 문자열의 내용 소유권을 가지고있는 가장 일반적인 문자열 유형입니다. 빌린 대응하는 원시적 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 과 밀접한 관계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="75cb7ba1e6deab5f4a0c4ef1dddcb7ea6d8d2520" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; type, which is provided by Rust&amp;rsquo;s standard library rather than coded into the core language, is a growable, mutable, owned, UTF-8 encoded string type. When Rustaceans refer to &amp;ldquo;strings&amp;rdquo; in Rust, they usually mean the &lt;code&gt;String&lt;/code&gt; and the string slice &lt;code&gt;&amp;amp;str&lt;/code&gt; types, not just one of those types. Although this section is largely about &lt;code&gt;String&lt;/code&gt;, both types are used heavily in Rust&amp;rsquo;s standard library, and both &lt;code&gt;String&lt;/code&gt; and string slices are UTF-8 encoded.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 핵심 언어로 녹의 표준 라이브러리가 제공하는 것이 아니라 코딩 유형은, 가변 장, 가변, 소유, UTF-8 인코딩 된 문자열 유형입니다. Rustaceans가 Rust에서 &quot;문자열&quot;을 언급 할 때, 이들은 보통 해당 유형 중 하나가 아니라 &lt;code&gt;String&lt;/code&gt; 및 문자열 슬라이스 &lt;code&gt;&amp;amp;str&lt;/code&gt; 유형을 의미합니다 . 이 섹션은 주로 &lt;code&gt;String&lt;/code&gt; 에 관한 것이지만 두 유형 모두 Rust의 표준 라이브러리에서 많이 사용되며 &lt;code&gt;String&lt;/code&gt; 및 문자열 슬라이스는 모두 UTF-8로 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="e2f29f1c300ba36b21c6a01062d991f47ee83fd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sync&lt;/code&gt; and &lt;code&gt;Send&lt;/code&gt; traits, which extend Rust&amp;rsquo;s concurrency guarantees to user-defined types as well as types provided by the standard library</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; 및 &lt;code&gt;Send&lt;/code&gt; 표준 라이브러리에서 제공하는 사용자 정의 형식뿐만 아니라 종류에 녹의 동시성 보장을 확장 특성,</target>
        </trans-unit>
        <trans-unit id="546dfd59f5dde2a2d3bad5396a6d76cbe9696aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sync&lt;/code&gt; marker trait indicates that it is safe for the type implementing &lt;code&gt;Sync&lt;/code&gt; to be referenced from multiple threads. In other words, any type &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt; if &lt;code&gt;&amp;amp;T&lt;/code&gt; (a reference to &lt;code&gt;T&lt;/code&gt;) is &lt;code&gt;Send&lt;/code&gt;, meaning the reference can be sent safely to another thread. Similar to &lt;code&gt;Send&lt;/code&gt;, primitive types are &lt;code&gt;Sync&lt;/code&gt;, and types composed entirely of types that are &lt;code&gt;Sync&lt;/code&gt; are also &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; 마커 특성이 구현하는 유형의 안전을 나타냅니다 &lt;code&gt;Sync&lt;/code&gt; 여러 스레드에서 참조 할 수 있습니다. 즉, 어떤 종류의 &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;code&gt;Sync&lt;/code&gt; 경우 &lt;code&gt;&amp;amp;T&lt;/code&gt; (참조 &lt;code&gt;T&lt;/code&gt; )된다 &lt;code&gt;Send&lt;/code&gt; , 참조를 의미하는 다른 스레드에 안전하게 보낼 수 있습니다. 유사 &lt;code&gt;Send&lt;/code&gt; , 기본 유형은 &lt;code&gt;Sync&lt;/code&gt; , 그리고 완전히이다 유형으로 구성 유형의 &lt;code&gt;Sync&lt;/code&gt; 또한 &lt;code&gt;Sync&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="646e9a46a3198e5aae6cea0647712ac157d7125f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt; are generic type parameters: we&amp;rsquo;ll discuss generics in more detail in Chapter 10. What you need to know right now is that &lt;code&gt;T&lt;/code&gt; represents the type of the value that will be returned in a success case within the &lt;code&gt;Ok&lt;/code&gt; variant, and &lt;code&gt;E&lt;/code&gt; represents the type of the error that will be returned in a failure case within the &lt;code&gt;Err&lt;/code&gt; variant. Because &lt;code&gt;Result&lt;/code&gt; has these generic type parameters, we can use the &lt;code&gt;Result&lt;/code&gt; type and the functions that the standard library has defined on it in many different situations where the successful value and error value we want to return may differ.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 와 &lt;code&gt;E&lt;/code&gt; 는 제네릭 형식 매개 변수입니다 : 우리는 당신이 있다는 것입니다 지금 알아야 할 사항 제 10 장에서 더 자세히 제네릭을 논의 할 것이다 &lt;code&gt;T&lt;/code&gt; 는 내에서 성공하는 경우에 반환되는 값의 유형을 나타내는 &lt;code&gt;Ok&lt;/code&gt; 변형, 및 &lt;code&gt;E&lt;/code&gt; 는 내의 고장시 반환되는 오류 유형 나타내는 &lt;code&gt;Err&lt;/code&gt; 변형. 때문에 &lt;code&gt;Result&lt;/code&gt; 이러한 제네릭 형식 매개 변수가, 우리가 사용할 수있는 &lt;code&gt;Result&lt;/code&gt; 유형 및 반환에 우리가 원하는 성공 값 및 오류 값이 다를 수 있습니다 경우 표준 라이브러리는 여러 가지 상황에서 정의했다고 기능을.</target>
        </trans-unit>
        <trans-unit id="cb756122c49feafba4692e36792c9ec503818ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Thread&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;Thread&lt;/code&gt; 유형</target>
        </trans-unit>
        <trans-unit id="fadb7c71117e778367444a0d18f0442e8249124b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadPool&lt;/code&gt; will create a channel and hold on to the sending side of the channel.</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; 채널을 생성하고, 채널의 송신 측에 유지된다.</target>
        </trans-unit>
        <trans-unit id="e48c39ae08cbb88aef00b305b9017512b2fc007b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnsafeCell&lt;/code&gt; API itself is technically very simple: &lt;a href=&quot;struct.unsafecell#method.get&quot;&gt;&lt;code&gt;.get()&lt;/code&gt;&lt;/a&gt; gives you a raw pointer &lt;code&gt;*mut T&lt;/code&gt; to its contents. It is up to &lt;em&gt;you&lt;/em&gt; as the abstraction designer to use that raw pointer correctly.</source>
          <target state="translated">&lt;code&gt;UnsafeCell&lt;/code&gt; 의 : API 자체는 기술적으로 매우 간단합니다 &lt;a href=&quot;struct.unsafecell#method.get&quot;&gt; &lt;code&gt;.get()&lt;/code&gt; &lt;/a&gt; 당신에게 원시 포인터를 제공합니다 &lt;code&gt;*mut T&lt;/code&gt; 의 내용을. 그것은까지입니다 &lt;em&gt;당신이&lt;/em&gt; 제대로 그 원시 포인터를 사용하는 추상화 디자이너로.</target>
        </trans-unit>
        <trans-unit id="6a5cd0207b32d758dbbf9a6159c66155c77acce0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnsafeCell&lt;/code&gt; API itself is technically very simple: it gives you a raw pointer &lt;code&gt;*mut T&lt;/code&gt; to its contents. It is up to &lt;em&gt;you&lt;/em&gt; as the abstraction designer to use that raw pointer correctly.</source>
          <target state="translated">&lt;code&gt;UnsafeCell&lt;/code&gt; 의 API 자체는 기술적으로 매우 간단하다 : 그것은 당신에게 원시 포인터를 제공합니다 &lt;code&gt;*mut T&lt;/code&gt; 의 내용을. 원시 포인터를 올바르게 사용하는 것은 추상화 디자이너로서 &lt;em&gt;귀하에게&lt;/em&gt; 달려 &lt;em&gt;있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0a41c6aadefabb63fa74ac6fccd4136ec47ca08f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UpperExp&lt;/code&gt; trait should format its output in scientific notation with an upper-case &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UpperExp&lt;/code&gt; 이 특성은 상부 케이스와 과학적 표기법의 출력을 포맷한다 &lt;code&gt;E&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c532f0150ba601cb070b0fc006c6b873d809aeda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UpperHex&lt;/code&gt; trait should format its output as a number in hexadecimal, with &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; in upper case.</source>
          <target state="translated">&lt;code&gt;UpperHex&lt;/code&gt; 의 특성을 가진 16 진수 숫자로의 출력 포맷한다 내지 &lt;code&gt;F&lt;/code&gt; 를 대문자. &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1692dc51a2dd0859a66b3a15d1e8df4859265ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vec&lt;/code&gt; type allows to access values by index, because it implements the &lt;a href=&quot;../ops/trait.index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt; trait. An example will be more explicit:</source>
          <target state="translated">&lt;code&gt;Vec&lt;/code&gt; 가 구현하므로 유형은 인덱스로 액세스 값을 허용 &lt;a href=&quot;../ops/trait.index&quot;&gt; &lt;code&gt;Index&lt;/code&gt; &lt;/a&gt; 특성을. 보다 명확한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fdf15f1d79f5be8a81ff6d7d469c446ffbe09215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_&lt;/code&gt; pattern will match any value. By putting it after our other arms, the &lt;code&gt;_&lt;/code&gt; will match all the possible cases that aren&amp;rsquo;t specified before it. The &lt;code&gt;()&lt;/code&gt; is just the unit value, so nothing will happen in the &lt;code&gt;_&lt;/code&gt; case. As a result, we can say that we want to do nothing for all the possible values that we don&amp;rsquo;t list before the &lt;code&gt;_&lt;/code&gt; placeholder.</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; 패턴은 모든 값을 일치합니다. &lt;code&gt;_&lt;/code&gt; 를 다른 팔 뒤에 놓으면 _ 는 이전에 지정되지 않은 모든 가능한 경우와 일치합니다. 는 &lt;code&gt;()&lt;/code&gt; 아무것도에서 발생하지 않게, 단지 단위 값입니다 &lt;code&gt;_&lt;/code&gt; 경우. 결과적으로, 우리는 &lt;code&gt;_&lt;/code&gt; 자리 표시 자 앞에 나열하지 않은 모든 가능한 값에 대해 아무 것도 원하지 않는다고 말할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4f623218e4e907b6db896a6ba8ba2e0737f6051" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;abort&lt;/code&gt; function terminates the process, so the destructor will not get run on the example below:</source>
          <target state="translated">&lt;code&gt;abort&lt;/code&gt; 소멸자는 아래의 예에서 실행되지 않도록 기능, 프로세스를 종료한다 :</target>
        </trans-unit>
        <trans-unit id="1da31d2d7b88dbadae1ea02224cc02bf279c6b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add&lt;/code&gt; method adds the &lt;code&gt;x&lt;/code&gt; values of two &lt;code&gt;Point&lt;/code&gt; instances and the &lt;code&gt;y&lt;/code&gt; values of two &lt;code&gt;Point&lt;/code&gt; instances to create a new &lt;code&gt;Point&lt;/code&gt;. The &lt;code&gt;Add&lt;/code&gt; trait has an associated type named &lt;code&gt;Output&lt;/code&gt; that determines the type returned from the &lt;code&gt;add&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; 방법은 추가 &lt;code&gt;x&lt;/code&gt; 개의 값 &lt;code&gt;Point&lt;/code&gt; 인스턴스 및 &lt;code&gt;y&lt;/code&gt; 개의 값 &lt;code&gt;Point&lt;/code&gt; 새로운 인스턴스를 생성하는 &lt;code&gt;Point&lt;/code&gt; . &lt;code&gt;Add&lt;/code&gt; 특성은 이름이 연관된 유형이 &lt;code&gt;Output&lt;/code&gt; 으로부터 반환 유형 결정 &lt;code&gt;add&lt;/code&gt; 방법을.</target>
        </trans-unit>
        <trans-unit id="6b4f66cfe4d8578da648c05ce2a1d295046eb19d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add_text&lt;/code&gt; method takes a mutable reference to &lt;code&gt;self&lt;/code&gt;, because we&amp;rsquo;re changing the &lt;code&gt;Post&lt;/code&gt; instance that we&amp;rsquo;re calling &lt;code&gt;add_text&lt;/code&gt; on. We then call &lt;code&gt;push_str&lt;/code&gt; on the &lt;code&gt;String&lt;/code&gt; in &lt;code&gt;content&lt;/code&gt; and pass the &lt;code&gt;text&lt;/code&gt; argument to add to the saved &lt;code&gt;content&lt;/code&gt;. This behavior doesn&amp;rsquo;t depend on the state the post is in, so it&amp;rsquo;s not part of the state pattern. The &lt;code&gt;add_text&lt;/code&gt; method doesn&amp;rsquo;t interact with the &lt;code&gt;state&lt;/code&gt; field at all, but it is part of the behavior we want to support.</source>
          <target state="translated">&lt;code&gt;add_text&lt;/code&gt; 의 방법으로 변경 가능한 참조 소요 &lt;code&gt;self&lt;/code&gt; 우리가 변화하고 있기 때문에, &lt;code&gt;Post&lt;/code&gt; 우리가 호출하고 해당 인스턴스를 &lt;code&gt;add_text&lt;/code&gt; 을 에. 그런 다음 &lt;code&gt;content&lt;/code&gt; 의 &lt;code&gt;String&lt;/code&gt; 에서 &lt;code&gt;push_str&lt;/code&gt; 을 호출 하고 &lt;code&gt;text&lt;/code&gt; 인수를 전달 하여 저장된 &lt;code&gt;content&lt;/code&gt; 에 추가합니다 . 이 동작은 게시물의 상태에 의존하지 않으므로 상태 패턴의 일부가 아닙니다. &lt;code&gt;add_text&lt;/code&gt; 의 방법은 상호 작용하지 않는 &lt;code&gt;state&lt;/code&gt; 모두에서 필드,하지만 우리가 지원하려는 행동의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="2c3ad15ad6826ff34548cd3374a6a4eed3efc204" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;packed&lt;/code&gt; modifiers can be used to respectively raise or lower the alignment of &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;union&lt;/code&gt;s. &lt;code&gt;packed&lt;/code&gt; may also alter the padding between fields.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 과 &lt;code&gt;packed&lt;/code&gt; 개질제 높이거나 낮출의 배향 각각에 사용될 수있는 &lt;code&gt;struct&lt;/code&gt; 들 및 &lt;code&gt;union&lt;/code&gt; 들. &lt;code&gt;packed&lt;/code&gt; 은 필드 사이의 패딩을 변경할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e0634e43790fec0970517f968c2cdaea9942a64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;packed&lt;/code&gt; modifiers cannot be applied on the same type and a &lt;code&gt;packed&lt;/code&gt; type cannot transitively contain another &lt;code&gt;align&lt;/code&gt;ed type. &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;packed&lt;/code&gt; may only be applied to the &lt;a href=&quot;#the-default-representation&quot;&gt;default&lt;/a&gt; and &lt;a href=&quot;#the-c-representation&quot;&gt;&lt;code&gt;C&lt;/code&gt;&lt;/a&gt; representations.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 과 &lt;code&gt;packed&lt;/code&gt; 개질제는 동일한 유형에 적용되지 않을 수 있고, &lt;code&gt;packed&lt;/code&gt; 타입 이적 다른 포함될 수 &lt;code&gt;align&lt;/code&gt; 혼성 유형. &lt;code&gt;align&lt;/code&gt; 및 &lt;code&gt;packed&lt;/code&gt; 은 &lt;a href=&quot;#the-default-representation&quot;&gt;기본&lt;/a&gt; 및 &lt;a href=&quot;#the-c-representation&quot;&gt; &lt;code&gt;C&lt;/code&gt; &lt;/a&gt; 표현 에만 적용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba365c1b081658cee386344e9e2a04962a51bb04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;packed&lt;/code&gt; modifiers cannot be applied on the same type and a &lt;code&gt;packed&lt;/code&gt; type cannot transitively contain another &lt;code&gt;align&lt;/code&gt;ed type. &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;packed&lt;/code&gt; may only be applied to the &lt;a href=&quot;type-layout#the-default-representation&quot;&gt;default&lt;/a&gt; and &lt;a href=&quot;type-layout#the-c-representation&quot;&gt;&lt;code&gt;C&lt;/code&gt;&lt;/a&gt; representations.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 과 &lt;code&gt;packed&lt;/code&gt; 개질제는 동일한 유형에 적용되지 않을 수 있고, &lt;code&gt;packed&lt;/code&gt; 타입 이적 다른 포함될 수 &lt;code&gt;align&lt;/code&gt; 혼성 유형. &lt;code&gt;align&lt;/code&gt; 및 &lt;code&gt;packed&lt;/code&gt; 은 &lt;a href=&quot;type-layout#the-default-representation&quot;&gt;기본&lt;/a&gt; 및 &lt;a href=&quot;type-layout#the-c-representation&quot;&gt; &lt;code&gt;C&lt;/code&gt; &lt;/a&gt; 표현 에만 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53e65577e1cfa4684ae0b49bee71e8da03a67fa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; modifier can also be applied on an &lt;code&gt;enum&lt;/code&gt;. When it is, the effect on the &lt;code&gt;enum&lt;/code&gt;'s alignment is the same as if the &lt;code&gt;enum&lt;/code&gt; was wrapped in a newtype &lt;code&gt;struct&lt;/code&gt; with the same &lt;code&gt;align&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 수정은 또한 적용 할 수 &lt;code&gt;enum&lt;/code&gt; . 이 경우, 효과에 &lt;code&gt;enum&lt;/code&gt; 는 IF로의 정렬이 동일 &lt;code&gt;enum&lt;/code&gt; newtype이란 래핑 된 &lt;code&gt;struct&lt;/code&gt; 동일한 함께 &lt;code&gt;align&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="6ad8df46a380899eaf26791f29aae33e2b0b76bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;amt&lt;/code&gt; must be &lt;code&gt;&amp;lt;=&lt;/code&gt; the number of bytes in the buffer returned by &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;amt&lt;/code&gt; 있어야 &lt;code&gt;&amp;lt;=&lt;/code&gt; 버퍼의 바이트 수에 의해 반환 &lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6cdd430203e5d1bc8171135295b8e6a12c3f9ccb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;amt&lt;/code&gt; must be &lt;code&gt;&amp;lt;=&lt;/code&gt; the number of bytes in the buffer returned by &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;amt&lt;/code&gt; 있어야 &lt;code&gt;&amp;lt;=&lt;/code&gt; 버퍼의 바이트 수에 의해 반환 &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="45b714d09b6da61ea117e3601d5d1e5fd89a8774" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;approve&lt;/code&gt; method will be similar to the &lt;code&gt;request_review&lt;/code&gt; method: it will set &lt;code&gt;state&lt;/code&gt; to the value that the current state says it should have when that state is approved, as shown in Listing 17-16:</source>
          <target state="translated">는 &lt;code&gt;approve&lt;/code&gt; 방법은 유사합니다 &lt;code&gt;request_review&lt;/code&gt; 의 방법은 설정합니다 &lt;code&gt;state&lt;/code&gt; 현재 상태가이 목록 17-16에서와 같이 그 상태가 승인되면이 있어야 말한다 값 :</target>
        </trans-unit>
        <trans-unit id="0d99e2697c98f4ee00d53c8602d75f85424ebe1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;area&lt;/code&gt; function accesses the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; fields of the &lt;code&gt;Rectangle&lt;/code&gt; instance. Our function signature for &lt;code&gt;area&lt;/code&gt; now says exactly what we mean: calculate the area of &lt;code&gt;Rectangle&lt;/code&gt;, using its &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; fields. This conveys that the width and height are related to each other, and it gives descriptive names to the values rather than using the tuple index values of &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. This is a win for clarity.</source>
          <target state="translated">&lt;code&gt;area&lt;/code&gt; 함수는 액세스 &lt;code&gt;width&lt;/code&gt; 과 &lt;code&gt;height&lt;/code&gt; 의 필드 &lt;code&gt;Rectangle&lt;/code&gt; 인스턴스. &lt;code&gt;area&lt;/code&gt; 에 대한 함수 시그니처는 이제 정확히 의미하는대로 &lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 필드를 사용하여 &lt;code&gt;Rectangle&lt;/code&gt; 의 면적을 계산 합니다. 이것은 너비와 높이가 서로 관련되어 있음을 전달하며 튜플 인덱스 값 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;1&lt;/code&gt; 을 사용하는 대신 값에 설명적인 이름을 제공합니다 . 이것은 명확성을위한 승리입니다.</target>
        </trans-unit>
        <trans-unit id="f0f4d5c245d843fc107cb0d995f1cc0cbaafe380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;area&lt;/code&gt; function is supposed to calculate the area of one rectangle, but the function we wrote has two parameters. The parameters are related, but that&amp;rsquo;s not expressed anywhere in our program. It would be more readable and more manageable to group width and height together. We&amp;rsquo;ve already discussed one way we might do that in &lt;a href=&quot;ch03-02-data-types#the-tuple-type&quot;&gt;&amp;ldquo;The Tuple Type&amp;rdquo;&lt;/a&gt; section of Chapter 3: by using tuples.</source>
          <target state="translated">&lt;code&gt;area&lt;/code&gt; 기능을 하나 개의 사각형의 면적을 계산하기로되어 있지만, 우리가 작성한 함수는 두 개의 매개 변수를 가지고있다. 매개 변수는 관련되어 있지만 프로그램의 어느 곳에서도 표현되지 않았습니다. 너비와 높이를 함께 그룹화하는 것이 더 읽기 쉽고 관리하기 쉽습니다. 우리는 3 장의 &lt;a href=&quot;ch03-02-data-types#the-tuple-type&quot;&gt;&amp;ldquo;튜플 유형&amp;rdquo;&lt;/a&gt; 섹션에서 튜플을 사용하여 그렇게 할 수있는 한 가지 방법에 대해 이미 논의했습니다 .</target>
        </trans-unit>
        <trans-unit id="03663b761515431ad66c10f38033078682c6e595" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;art&lt;/code&gt; crate users can still see and use the internal structure from Listing 14-3 as demonstrated in Listing 14-4, or they can use the more convenient structure in Listing 14-5, as shown in Listing 14-6:</source>
          <target state="translated">&lt;code&gt;art&lt;/code&gt; 상자의 사용자는보고 목록 14-4에서 입증 된 바와 같이 리스팅 14-3에서 내부 구조를 사용하거나 14-6 목록과 같이 그들은 목록 14-5에서보다 편리 구조를 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="e825da57c4a60047ea61533b7c1bd5bca8251591" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as&lt;/code&gt; keyword can be used to change what the crate is referred to as in your project. If a crate name includes a dash, it is implicitly imported with the dashes replaced by underscores.</source>
          <target state="translated">&lt;code&gt;as&lt;/code&gt; 키워드는 상자가 프로젝트의라고하는 내용을 변경하는 데 사용할 수 있습니다. 상자 이름에 대시가 포함 된 경우 대시를 밑줄로 대체하여 암시 적으로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2dd2463e89570fe4f3bb6f6203a6c56b03267f94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert!&lt;/code&gt; macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to &lt;code&gt;true&lt;/code&gt;. We give the &lt;code&gt;assert!&lt;/code&gt; macro an argument that evaluates to a Boolean. If the value is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;assert!&lt;/code&gt; does nothing and the test passes. If the value is &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;assert!&lt;/code&gt; macro calls the &lt;code&gt;panic!&lt;/code&gt; macro, which causes the test to fail. Using the &lt;code&gt;assert!&lt;/code&gt; macro helps us check that our code is functioning in the way we intend.</source>
          <target state="translated">&lt;code&gt;assert!&lt;/code&gt; 표준 라이브러리에서 제공하는 매크로는 테스트의 일부 조건이 &lt;code&gt;true&lt;/code&gt; 로 평가되도록하려는 경우에 유용 합니다 . 우리는 &lt;code&gt;assert!&lt;/code&gt; 매크로 부울로 평가되는 인수. 값이 &lt;code&gt;true&lt;/code&gt; 인 경우 &lt;code&gt;assert!&lt;/code&gt; 아무것도하지 않고 테스트는 통과합니다. 값이 &lt;code&gt;false&lt;/code&gt; 인 경우 &lt;code&gt;assert!&lt;/code&gt; 매크로는 &lt;code&gt;panic!&lt;/code&gt; 호출합니다 ! 매크로는 테스트에 실패합니다. &lt;code&gt;assert!&lt;/code&gt; 사용 ! 매크로는 코드가 의도 한대로 작동하는지 확인하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="95f1355f51c209910ea66191ec2fc57f92344bfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert_ne!&lt;/code&gt; macro will pass if the two values we give it are not equal and fail if they&amp;rsquo;re equal. This macro is most useful for cases when we&amp;rsquo;re not sure what a value &lt;em&gt;will&lt;/em&gt; be, but we know what the value definitely &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; be if our code is functioning as we intend. For example, if we&amp;rsquo;re testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.</source>
          <target state="translated">&lt;code&gt;assert_ne!&lt;/code&gt; 우리가 제공 한 두 값이 같지 않으면 매크로가 통과하고 같으면 실패합니다. 이 매크로는 값 &lt;em&gt;이&lt;/em&gt; 무엇인지 확실하지 않은 경우에 가장 유용 하지만 코드가 의도 한대로 작동하면 값이 확실 &lt;em&gt;하지 않은&lt;/em&gt; 것을 알고 있습니다. 예를 들어, 어떤 식 으로든 입력을 변경할 수있는 함수를 테스트하고 있지만 입력을 변경하는 방법이 테스트를 실행하는 요일에 따라 달라지는 경우 가장 좋은 주장은 함수의 출력이 입력과 같지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bf35e012d7004404479ddec49cb6abc4ee90bc1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&lt;/code&gt; function in this scenario works like the &lt;code&gt;new&lt;/code&gt; function in that it will return a new &lt;code&gt;TcpListener&lt;/code&gt; instance. The reason the function is called &lt;code&gt;bind&lt;/code&gt; is that in networking, connecting to a port to listen to is known as &amp;ldquo;binding to a port.&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; 이 시나리오의 기능은 같은 작품 &lt;code&gt;new&lt;/code&gt; 가 새 돌려 보낼 함수 &lt;code&gt;TcpListener&lt;/code&gt; 의 인스턴스를. 이 기능을 &lt;code&gt;bind&lt;/code&gt; 라고 하는 이유는 네트워킹에서 수신 대기하는 포트에 연결하는 것을 &quot;포트에 바인딩&quot;이라고하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="3a9db4154e7cfc914c7af74a70f78787dc149e27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&lt;/code&gt; function returns a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, which indicates that binding might fail. For example, connecting to port 80 requires administrator privileges (nonadministrators can listen only on ports higher than 1024), so if we tried to connect to port 80 without being an administrator, binding wouldn&amp;rsquo;t work. As another example, binding wouldn&amp;rsquo;t work if we ran two instances of our program and so had two programs listening to the same port. Because we&amp;rsquo;re writing a basic server just for learning purposes, we won&amp;rsquo;t worry about handling these kinds of errors; instead, we use &lt;code&gt;unwrap&lt;/code&gt; to stop the program if errors happen.</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; 함수가 반환하는 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; , 바인딩 실패 할 수 있음을 나타냅니다. 예를 들어 포트 80에 연결하려면 관리자 권한이 필요합니다 (비 관리자는 1024보다 높은 포트에서만 수신 할 수 있음). 관리자가 아닌 포트 80에 연결하려고하면 바인딩이 작동하지 않습니다. 또 다른 예로, 프로그램의 두 인스턴스를 실행하여 두 개의 프로그램이 동일한 포트를 수신하는 경우 바인딩이 작동하지 않습니다. 학습 목적으로 만 기본 서버를 작성하기 때문에 이러한 종류의 오류 처리에 대해 걱정하지 않아도됩니다. 대신 오류가 발생하면 &lt;code&gt;unwrap&lt;/code&gt; 을 사용 하여 프로그램을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="86e869ec27553a2645d530ee9b57e980ad085326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bool&lt;/code&gt; represents a value, which could only be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If you cast a &lt;code&gt;bool&lt;/code&gt; into an integer, &lt;code&gt;true&lt;/code&gt; will be 1 and &lt;code&gt;false&lt;/code&gt; will be 0.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; 단지가 될 수있는 값을 나타내는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;bool&lt;/code&gt; 을 정수로 캐스트하면 &lt;code&gt;true&lt;/code&gt; 는 1이고 &lt;code&gt;false&lt;/code&gt; 는 0입니다.</target>
        </trans-unit>
        <trans-unit id="d4311662fb8a13303491e364af26bcbe8200bef8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bool&lt;/code&gt; type is a datatype which can be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. The boolean type uses one byte of memory. It is used in comparisons and bitwise operations like &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; 유형이 될 수있는 데이터 형이며, &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; . 부울 형식은 1 바이트의 메모리를 사용합니다. &lt;code&gt;&amp;amp;&lt;/code&gt; 와 같은 비교 및 ​​비트 연산에 사용됩니다 . &lt;code&gt;|&lt;/code&gt; , 그리고 &lt;code&gt;!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71b45beaeed4f4e8bb8cb42d1eee7255c7dfda23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; statement can take an argument (which will be the value of the loop expression if the &lt;code&gt;break&lt;/code&gt; statement is executed) in &lt;code&gt;loop&lt;/code&gt; loops, but not &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;while let&lt;/code&gt; loops.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 문합니다 (경우 루프 식의 값이됩니다 인수 걸릴 수 있습니다 &lt;code&gt;break&lt;/code&gt; 에 문이 실행될) &lt;code&gt;loop&lt;/code&gt; 루프를, 그러나 &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , 또는 &lt;code&gt;while let&lt;/code&gt; 루프.</target>
        </trans-unit>
        <trans-unit id="d4fc4821431bbe2f5d7ca950ef58b031fb001379" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bytes&lt;/code&gt; method returns each raw byte, which might be appropriate for your domain:</source>
          <target state="translated">는 &lt;code&gt;bytes&lt;/code&gt; 메소드가 리턴 도메인에 적합 할 수 있습니다 각 원시 바이트를 :</target>
        </trans-unit>
        <trans-unit id="0c67d48bb9bf16df95a3dc50a92dbdfe313c2a09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;can_hold&lt;/code&gt; method returns a Boolean, which means it&amp;rsquo;s a perfect use case for the &lt;code&gt;assert!&lt;/code&gt; macro. In Listing 11-6, we write a test that exercises the &lt;code&gt;can_hold&lt;/code&gt; method by creating a &lt;code&gt;Rectangle&lt;/code&gt; instance that has a width of 8 and a height of 7 and asserting that it can hold another &lt;code&gt;Rectangle&lt;/code&gt; instance that has a width of 5 and a height of 1.</source>
          <target state="translated">&lt;code&gt;can_hold&lt;/code&gt; 의 방법은이를위한 완벽한 유스 케이스의 의미 부울 반환 &lt;code&gt;assert!&lt;/code&gt; 매크로. 리스트 (11-6)에서는, 운동 시험 물품 &lt;code&gt;can_hold&lt;/code&gt; 의 만들어 방법 &lt;code&gt;Rectangle&lt;/code&gt; (8)의 폭 (7)의 높이가 예를하고 다른 보유 할 수 있음을 주장 &lt;code&gt;Rectangle&lt;/code&gt; (5)의 폭과 높이를 가지고 예를 1.</target>
        </trans-unit>
        <trans-unit id="5a25b55443c783de850a8f716e7e98dd68745de2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cargo install&lt;/code&gt; command allows you to install and use binary crates locally. This isn&amp;rsquo;t intended to replace system packages; it&amp;rsquo;s meant to be a convenient way for Rust developers to install tools that others have shared on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;. Note that you can only install packages that have binary targets. A &lt;em&gt;binary target&lt;/em&gt; is the runnable program that is created if the crate has a &lt;em&gt;src/main.rs&lt;/em&gt; file or another file specified as a binary, as opposed to a library target that isn&amp;rsquo;t runnable on its own but is suitable for including within other programs. Usually, crates have information in the &lt;em&gt;README&lt;/em&gt; file about whether a crate is a library, has a binary target, or both.</source>
          <target state="translated">&lt;code&gt;cargo install&lt;/code&gt; 명령은 설치 및 로컬 진 상자를 사용할 수 있습니다. 이것은 시스템 패키지를 대체하기위한 것이 아닙니다. Rust 개발자가 다른 사람들이 &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io에서&lt;/a&gt; 공유 한 도구를 설치하는 편리한 방법입니다 . 바이너리 대상이있는 패키지 만 설치할 수 있습니다. &lt;em&gt;진 대상은&lt;/em&gt; 나무 상자가있는 경우 생성되는 실행 가능한 프로그램입니다 &lt;em&gt;SRC / main.rs의&lt;/em&gt; 자체 실행 가능한 것이 아니라 다른 내 포함에 적합한 라이브러리 대상 반대로, 파일 또는 바이너리로 지정된 다른 파일을 프로그램들. 일반적으로 크레이트는 &lt;em&gt;README&lt;/em&gt; 파일에 크레이트가 라이브러리인지 바이너리 대상인지 또는 둘 다인지에 대한 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2664dcbe5273c6722a5b153d876b9b792f2ada2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cargo test&lt;/code&gt; command runs all tests in our project, as shown in Listing 11-2.</source>
          <target state="translated">&lt;code&gt;cargo test&lt;/code&gt; 목록 11-2에서와 같이 명령은, 우리의 프로젝트에 모든 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="375baaee400dee61b2707b887bd9af56fe2bc128" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;cfg&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="3c6c79dbe0366f164760e8fbd149ca95e0429eec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg&lt;/code&gt; attribute is allowed anywhere attributes are allowed.</source>
          <target state="translated">&lt;code&gt;cfg&lt;/code&gt; 속성은 어디 속성이 허용됩니다 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="c1be4a466f7709a98c138b8664fae5693d56dd2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg&lt;/code&gt; attribute supports only three kinds of predicates:</source>
          <target state="translated">&lt;code&gt;cfg&lt;/code&gt; 속성 지원 조건의 삼가지 :</target>
        </trans-unit>
        <trans-unit id="28422790bd7081a79bb025fb9d66e378219a525d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg&lt;/code&gt; macro</source>
          <target state="translated">&lt;code&gt;cfg&lt;/code&gt; 매크로</target>
        </trans-unit>
        <trans-unit id="fde18a15c12045ccc5f862ad4d07ffff9bb790a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; conditionally includes the thing it is attached to based on a configuration predicate.</source>
          <target state="translated">&lt;code&gt;cfg&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;속성은&lt;/a&gt; 조건이 구성 조건에 따라 부착되어있는 것을 포함한다.</target>
        </trans-unit>
        <trans-unit id="2223835f7d8034d74bbb5846af6ec97de49a67f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg_attr&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;cfg_attr&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="76546526e7489be649c0d74ada78ee80e5e85965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg_attr&lt;/code&gt; attribute is allowed anywhere attributes are allowed.</source>
          <target state="translated">&lt;code&gt;cfg_attr&lt;/code&gt; 의 속성은 어디 속성이 허용됩니다 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="548a83f876de36acae9e81967a808fe451cf7938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cfg_attr&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; conditionally includes &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; based on a configuration predicate.</source>
          <target state="translated">&lt;code&gt;cfg_attr&lt;/code&gt; 의&lt;a href=&quot;attributes&quot;&gt;속성은&lt;/a&gt; 조건부 포함 &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 구성 조건을 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="85a19bbf37eb56f0525c8c2436505adedd691250" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; type represents a single character. More specifically, since 'character' isn't a well-defined concept in Unicode, &lt;code&gt;char&lt;/code&gt; is a '&lt;a href=&quot;http://www.unicode.org/glossary/#unicode_scalar_value&quot;&gt;Unicode scalar value&lt;/a&gt;', which is similar to, but not the same as, a '&lt;a href=&quot;http://www.unicode.org/glossary/#code_point&quot;&gt;Unicode code point&lt;/a&gt;'.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 유형은 단일 문자를 나타냅니다. 보다 구체적으로, 'character'는 유니 코드에서 잘 정의 된 개념이 아니므로 &lt;code&gt;char&lt;/code&gt; 은 ' &lt;a href=&quot;http://www.unicode.org/glossary/#unicode_scalar_value&quot;&gt;Unicode scalar value&lt;/a&gt; '이며 ' &lt;a href=&quot;http://www.unicode.org/glossary/#code_point&quot;&gt;Unicode code point&lt;/a&gt; ' 와 유사하지만 동일하지는 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b73bedd4705331ddde92b218ee42ae14fd783b1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cold&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt;&lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; give suggestions to generate code in a way that may be faster than what it would do without the hint. The attributes are only hints, and may be ignored.</source>
          <target state="translated">&lt;code&gt;cold&lt;/code&gt; 와 &lt;code&gt;inline&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;속성은&lt;/a&gt; 더 빨리 힌트없이 할 것보다 될 수있는 방식으로 코드를 생성하기위한 제안을 제공합니다. 속성은 힌트 일 뿐이므로 무시해도됩니다.</target>
        </trans-unit>
        <trans-unit id="5e443e8933fc7022a9fff52a5391c70d8fc736a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cold&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;cold&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="f187d03d0870d5f7cf8d911158a2ad4bf8bfb1f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; keyword is also used in raw pointers in combination with &lt;code&gt;mut&lt;/code&gt;, as seen in &lt;code&gt;*const T&lt;/code&gt; and &lt;code&gt;*mut T&lt;/code&gt;. More about &lt;code&gt;const&lt;/code&gt; as used in raw pointers can be read at the Rust docs for the &lt;a href=&quot;primitive.pointer&quot;&gt;pointer primitive&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 키워드는 조합하여 원재료에 사용 포인터 &lt;code&gt;mut&lt;/code&gt; 된 바와 같이, &lt;code&gt;*const T&lt;/code&gt; 및 &lt;code&gt;*mut T&lt;/code&gt; . 원시 포인터에서 사용되는 &lt;code&gt;const&lt;/code&gt; 에 대한 자세한 내용 은 &lt;a href=&quot;primitive.pointer&quot;&gt;포인터 프리미티브에&lt;/a&gt; 대한 Rust 문서에서 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c647cbb39e778e9b3fee3b9f221a846f5e10198a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; keyword is also used in raw pointers in combination with &lt;code&gt;mut&lt;/code&gt;, as seen in &lt;code&gt;*const T&lt;/code&gt; and &lt;code&gt;*mut T&lt;/code&gt;. More about that can be read at the &lt;a href=&quot;primitive.pointer&quot;&gt;pointer&lt;/a&gt; primitive part of the Rust docs.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 키워드는 조합하여 원재료에 사용 포인터 &lt;code&gt;mut&lt;/code&gt; 된 바와 같이, &lt;code&gt;*const T&lt;/code&gt; 및 &lt;code&gt;*mut T&lt;/code&gt; . 이에 대한 자세한 내용 은 Rust 문서 의 &lt;a href=&quot;primitive.pointer&quot;&gt;포인터&lt;/a&gt; 기본 부분 에서 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="90ef70a34f1bf7aa0febc79627f67bbce0e1d9d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;core&lt;/code&gt; crate is always added to the extern prelude. The &lt;code&gt;std&lt;/code&gt; crate is added as long as the &lt;a href=&quot;../crates-and-source-files#preludes-and-no_std&quot;&gt;&lt;code&gt;no_std&lt;/code&gt;&lt;/a&gt; attribute is not specified in the crate root.</source>
          <target state="translated">&lt;code&gt;core&lt;/code&gt; 상자는 항상 통근 전주곡에 추가됩니다. &lt;code&gt;std&lt;/code&gt; 상자는 오랫동안만큼 추가 &lt;a href=&quot;../crates-and-source-files#preludes-and-no_std&quot;&gt; &lt;code&gt;no_std&lt;/code&gt; &lt;/a&gt; 속성이 상자 루트에 지정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38acae0d6ab176e191a45e1f1b54faccd4c7f448" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crate_name&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;crate_name&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="ef2c8badee302cb0baefa21db745a07eb79b3acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; pointer can be used to store arbitrary data as required by the executor. This could be e.g. a type-erased pointer to an &lt;code&gt;Arc&lt;/code&gt; that is associated with the task. The value of this poiner will get passed to all functions that are part of the &lt;code&gt;vtable&lt;/code&gt; as the first parameter.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 포인터 실행 프로그램에 의해 요구되는 임의의 데이터를 저장하는데 사용될 수있다. 예를 들어 작업과 관련된 &lt;code&gt;Arc&lt;/code&gt; 대한 유형이 지워진 포인터 일 수 있습니다 . 이 poiner의 값은 첫 번째 매개 변수로 &lt;code&gt;vtable&lt;/code&gt; 의 일부인 모든 함수에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="9e90fa7bb07af3f80ba061dbc0af88db5a79ba76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; pointer can be used to store arbitrary data as required by the executor. This could be e.g. a type-erased pointer to an &lt;code&gt;Arc&lt;/code&gt; that is associated with the task. The value of this pointer will get passed to all functions that are part of the &lt;code&gt;vtable&lt;/code&gt; as the first parameter.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 포인터 실행 프로그램에 의해 요구되는 임의의 데이터를 저장하는데 사용될 수있다. 이것은 예를 들어 작업과 관련된 &lt;code&gt;Arc&lt;/code&gt; 에 대한 형식 지워진 포인터 일 수 있습니다 . 이 포인터의 값은 &lt;code&gt;vtable&lt;/code&gt; 의 일부인 모든 함수 에 첫 번째 매개 변수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="a7af61314557c2255ce30f13387bf574343b8476" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg!(..)&lt;/code&gt; macro moves the input:</source>
          <target state="translated">&lt;code&gt;dbg!(..)&lt;/code&gt; 매크로 이동 입력은 :</target>
        </trans-unit>
        <trans-unit id="b7a4dd4c094bb75a82ed633489f0ec96c82a6296" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg!&lt;/code&gt; macro works exactly the same in release builds. This is useful when debugging issues that only occur in release builds or when debugging in release mode is significantly faster.</source>
          <target state="translated">&lt;code&gt;dbg!&lt;/code&gt; 매크로는 릴리스 빌드에서 정확히 동일하게 작동합니다. 릴리스 빌드에서만 발생하는 문제를 디버깅하거나 릴리스 모드에서 디버깅하는 것이 훨씬 빠를 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5a03c825d089a243f66f60fd9869adfb4b5c6857" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deprecated&lt;/code&gt; attribute</source>
          <target state="translated">더 &lt;code&gt;deprecated&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="8b0ffc1f78b8eb9694b4e7509ecdd919acc0c0cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deprecated&lt;/code&gt; attribute can only be present &lt;strong&gt;once&lt;/strong&gt; on an item.</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 속성은 존재할 수 &lt;strong&gt;번&lt;/strong&gt; 항목에.</target>
        </trans-unit>
        <trans-unit id="4c348bd3f38f8d7b286030ed2d1f972d4a02706b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deprecated&lt;/code&gt; attribute has several forms:</source>
          <target state="translated">더 &lt;code&gt;deprecated&lt;/code&gt; 속성에는 여러 가지 형태가 있습니다.</target>
        </trans-unit>
        <trans-unit id="44c311ce3d12b2d5a8a0632c6cd020f999b4ee16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deprecated&lt;/code&gt; attribute may be applied to any &lt;a href=&quot;../items&quot;&gt;item&lt;/a&gt;, &lt;a href=&quot;../items/traits&quot;&gt;trait item&lt;/a&gt;, &lt;a href=&quot;../items/enumerations&quot;&gt;enum variant&lt;/a&gt;, &lt;a href=&quot;../items/structs&quot;&gt;struct field&lt;/a&gt;, &lt;a href=&quot;../items/external-blocks&quot;&gt;external block item&lt;/a&gt;, or &lt;a href=&quot;../macros-by-example&quot;&gt;macro definition&lt;/a&gt;. It cannot be applied to &lt;a href=&quot;../items/implementations#trait-implementations&quot;&gt;trait implementation items&lt;/a&gt;. When applied to an item containing other items, such as a &lt;a href=&quot;../items/modules&quot;&gt;module&lt;/a&gt; or &lt;a href=&quot;../items/implementations&quot;&gt;implementation&lt;/a&gt;, all child items inherit the deprecation attribute.</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 특성 하나에 적용될 수있다 &lt;a href=&quot;../items&quot;&gt;아이템&lt;/a&gt; , &lt;a href=&quot;../items/traits&quot;&gt;특성 항목&lt;/a&gt; , &lt;a href=&quot;../items/enumerations&quot;&gt;ENUM 변형&lt;/a&gt; , &lt;a href=&quot;../items/structs&quot;&gt;구조체 필드&lt;/a&gt; , &lt;a href=&quot;../items/external-blocks&quot;&gt;외부 블록 항목&lt;/a&gt; 또는 &lt;a href=&quot;../macros-by-example&quot;&gt;매크로 정의&lt;/a&gt; . &lt;a href=&quot;../items/implementations#trait-implementations&quot;&gt;특성 구현 항목에는&lt;/a&gt; 적용 할 수 없습니다 . &lt;a href=&quot;../items/modules&quot;&gt;모듈&lt;/a&gt; 또는 &lt;a href=&quot;../items/implementations&quot;&gt;구현&lt;/a&gt; 과 같은 다른 항목을 포함하는 항목에 적용하면 모든 하위 항목이 deprecation 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="f1d23eb4050e4bb4bd6008dd3e0216cd81ba2cd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deprecated&lt;/code&gt; attribute may be applied to any &lt;a href=&quot;../items&quot;&gt;item&lt;/a&gt;, &lt;a href=&quot;../items/traits&quot;&gt;trait item&lt;/a&gt;, &lt;a href=&quot;../items/enumerations&quot;&gt;enum variant&lt;/a&gt;, &lt;a href=&quot;../items/structs&quot;&gt;struct field&lt;/a&gt;, or &lt;a href=&quot;../items/external-blocks&quot;&gt;external block item&lt;/a&gt;. It cannot be applied to &lt;a href=&quot;../items/implementations#trait-implementations&quot;&gt;trait implementation items&lt;/a&gt;. When applied to an item containing other items, such as a &lt;a href=&quot;../items/modules&quot;&gt;module&lt;/a&gt; or &lt;a href=&quot;../items/implementations&quot;&gt;implementation&lt;/a&gt;, all child items inherit the deprecation attribute.</source>
          <target state="translated">더 &lt;code&gt;deprecated&lt;/code&gt; 속성은 모든 &lt;a href=&quot;../items&quot;&gt;항목&lt;/a&gt; , &lt;a href=&quot;../items/traits&quot;&gt;특성 항목&lt;/a&gt; , &lt;a href=&quot;../items/enumerations&quot;&gt;열거 형 변형&lt;/a&gt; , &lt;a href=&quot;../items/structs&quot;&gt;구조체 필드&lt;/a&gt; 또는 &lt;a href=&quot;../items/external-blocks&quot;&gt;외부 블록 항목에&lt;/a&gt; 적용될 수 있습니다. . &lt;a href=&quot;../items/implementations#trait-implementations&quot;&gt;특성 구현 항목에는&lt;/a&gt; 적용 할 수 없습니다 . &lt;a href=&quot;../items/modules&quot;&gt;모듈&lt;/a&gt; 또는 &lt;a href=&quot;../items/implementations&quot;&gt;구현&lt;/a&gt; 과 같은 다른 항목을 포함하는 항목에 적용하면 모든 하위 항목이 지원 중단 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="6e7f4030e080734f98683be5c8344d101d0992db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; shown in this build output indicate that the compiler is using different profiles.</source>
          <target state="translated">&lt;code&gt;dev&lt;/code&gt; 및 &lt;code&gt;release&lt;/code&gt; 이 빌드 출력에 나타낸 컴파일러는 다른 정보를 사용하는 것을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="2bcbec4aff44a7472a393bc8eca9c7c00034401d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;drop&lt;/code&gt; method is called when &lt;code&gt;_x&lt;/code&gt; goes out of scope, and therefore &lt;code&gt;main&lt;/code&gt; prints &lt;code&gt;Dropping!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;drop&lt;/code&gt; 방법을 때 호출되는 &lt;code&gt;_x&lt;/code&gt; 범위를 벗어나, 따라서 &lt;code&gt;main&lt;/code&gt; 지문이 &lt;code&gt;Dropping!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa3edbdb8ad85c4d37e55b2e809f2f18d6f4e045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dst&lt;/code&gt; path will be a directory symbolic link pointing to the &lt;code&gt;src&lt;/code&gt; path.</source>
          <target state="translated">그만큼 &lt;code&gt;dst&lt;/code&gt; 경로를 가리키는 디렉토리 기호 링크가 될 것이다 &lt;code&gt;src&lt;/code&gt; 경로.</target>
        </trans-unit>
        <trans-unit id="f8ab040b8a001ca82f66534b2d20a3b8892fd2dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dst&lt;/code&gt; path will be a file symbolic link pointing to the &lt;code&gt;src&lt;/code&gt; path.</source>
          <target state="translated">그만큼 &lt;code&gt;dst&lt;/code&gt; 경로가 가리키는 파일을 기호 링크가 될 것이다 &lt;code&gt;src&lt;/code&gt; 경로.</target>
        </trans-unit>
        <trans-unit id="f0ecd1a2ccd0de8765e1ce7cbb8fab53800f6ce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dst&lt;/code&gt; path will be a link pointing to the &lt;code&gt;src&lt;/code&gt; path. Note that systems often require these two paths to both be located on the same filesystem.</source>
          <target state="translated">그만큼 &lt;code&gt;dst&lt;/code&gt; 경로를 가리키는 링크가 될 것이다 &lt;code&gt;src&lt;/code&gt; 경로. 시스템은 종종이 두 경로가 모두 동일한 파일 시스템에 위치해야합니다.</target>
        </trans-unit>
        <trans-unit id="b0f3651131fc6e4c0e98108eb60e32485bb1899b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dst&lt;/code&gt; path will be a symbolic link pointing to the &lt;code&gt;src&lt;/code&gt; path.</source>
          <target state="translated">그만큼 &lt;code&gt;dst&lt;/code&gt; 경로를 가리키는 기호 링크가 될 것이다 &lt;code&gt;src&lt;/code&gt; 경로.</target>
        </trans-unit>
        <trans-unit id="3c07e52fcb5c94a3c499bbc6e95804ccd5a8bfc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dst&lt;/code&gt; path will be a symbolic link pointing to the &lt;code&gt;src&lt;/code&gt; path. On Windows, this will be a file symlink, not a directory symlink; for this reason, the platform-specific &lt;a href=&quot;../os/unix/fs/fn.symlink&quot;&gt;&lt;code&gt;std::os::unix::fs::symlink&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../os/windows/fs/fn.symlink_file&quot;&gt;&lt;code&gt;std::os::windows::fs::symlink_file&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../os/windows/fs/fn.symlink_dir&quot;&gt;&lt;code&gt;symlink_dir&lt;/code&gt;&lt;/a&gt; should be used instead to make the intent explicit.</source>
          <target state="translated">&lt;code&gt;dst&lt;/code&gt; 경로를 가리키는 기호 링크가 될 것이다 &lt;code&gt;src&lt;/code&gt; 경로. Windows에서는 디렉토리 symlink가 아니라 파일 symlink가됩니다. 이러한 이유로 플랫폼 별 &lt;a href=&quot;../os/unix/fs/fn.symlink&quot;&gt; &lt;code&gt;std::os::unix::fs::symlink&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../os/windows/fs/fn.symlink_file&quot;&gt; &lt;code&gt;std::os::windows::fs::symlink_file&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../os/windows/fs/fn.symlink_dir&quot;&gt; &lt;code&gt;symlink_dir&lt;/code&gt; &lt;/a&gt; 을 사용하여 의도를 명시 적으로 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="fce5aa6e4c6fe0d2a117a0ec0a2f7f52bfd2748e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dyn&lt;/code&gt; keyword is used to highlight that calls to methods on the associated &lt;code&gt;Trait&lt;/code&gt; are dynamically dispatched. To use the trait this way, it must be 'object safe'.</source>
          <target state="translated">&lt;code&gt;dyn&lt;/code&gt; 키워드는 관련 메소드 호출 있음을 강조하기 위해 사용되는 &lt;code&gt;Trait&lt;/code&gt; 동적으로 전달됩니다. 이런 방식으로 특성을 사용하려면 '객체 안전'이어야합니다.</target>
        </trans-unit>
        <trans-unit id="f31eeeb70d8a71f4b93bd89156c38bf0e5709ff2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;edition&lt;/code&gt; key in &lt;em&gt;Cargo.toml&lt;/em&gt; indicates which edition the compiler should use for your code. If the key doesn&amp;rsquo;t exist, Rust uses &lt;code&gt;2015&lt;/code&gt; as the edition value for backward compatibility reasons.</source>
          <target state="translated">&lt;em&gt;Cargo.toml&lt;/em&gt; 의 &lt;code&gt;edition&lt;/code&gt; 키&lt;em&gt;&lt;/em&gt; 는 컴파일러가 코드에 사용해야하는 에디션을 나타냅니다. 키가 존재하지 않으면 Rust는 이전 버전과의 호환성을 위해 &lt;code&gt;2015&lt;/code&gt; 를 에디션 값으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d4302d0f2edafc20c30c1bca4c608a973532a107" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;else&lt;/code&gt; block of an &lt;code&gt;if&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 표현식 의 &lt;code&gt;else&lt;/code&gt; 블록 .</target>
        </trans-unit>
        <trans-unit id="25d57c60dcf697c3f5bb61f1ff343393baeeb72f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entry&lt;/code&gt; API is intended to provide an efficient mechanism for manipulating the contents of a map conditionally on the presence of a key or not. The primary motivating use case for this is to provide efficient accumulator maps. For instance, if one wishes to maintain a count of the number of times each key has been seen, they will have to perform some conditional logic on whether this is the first time the key has been seen or not. Normally, this would require a &lt;code&gt;find&lt;/code&gt; followed by an &lt;code&gt;insert&lt;/code&gt;, effectively duplicating the search effort on each insertion.</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; API는 조건부 키 또는하지의 존재에지도의 내용을 조작하기위한 효율적인 메커니즘을 제공하기위한 것입니다. 이를위한 주요 동기 사용 사례는 효율적인 누산기 맵을 제공하는 것입니다. 예를 들어, 각 키를 본 횟수를 유지하려면 키를 처음 본 것인지 아닌지에 대한 조건부 논리를 수행해야합니다. 일반적으로 &lt;code&gt;find&lt;/code&gt; 가 필요합니다 다음에 &lt;code&gt;insert&lt;/code&gt; 각 삽입에 대한 검색 노력을 효과적으로 복제합니다.</target>
        </trans-unit>
        <trans-unit id="f625c5b9aa8efa15984a630e2609a8460845d869" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enum&lt;/code&gt; type is analogous to a &lt;code&gt;data&lt;/code&gt; constructor declaration in ML, or a &lt;em&gt;pick ADT&lt;/em&gt; in Limbo.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 형은 유사 &lt;code&gt;data&lt;/code&gt; ML에서 생성자 선언, 또는 &lt;em&gt;픽업 ADT&lt;/em&gt; 림보한다.</target>
        </trans-unit>
        <trans-unit id="a4c06e2ed2dc5ac68975592625d2fc4a6fa31065" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;env::args&lt;/code&gt; function returns an iterator! Rather than collecting the iterator values into a vector and then passing a slice to &lt;code&gt;Config::new&lt;/code&gt;, now we&amp;rsquo;re passing ownership of the iterator returned from &lt;code&gt;env::args&lt;/code&gt; to &lt;code&gt;Config::new&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;env::args&lt;/code&gt; 함수는 반복자를 반환! 반복자 값을 벡터로 수집 한 다음 슬라이스를 &lt;code&gt;Config::new&lt;/code&gt; 에 전달하는 대신 &lt;code&gt;env::args&lt;/code&gt; 에서 &lt;code&gt;Config::new&lt;/code&gt; 로 리턴 된 반복자의 소유권을 직접 전달합니다.</target>
        </trans-unit>
        <trans-unit id="8c4edba08b3e0cbdebf585d9d18019162245f0c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method will send the job it wants to execute down the sending side of the channel.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 방법은이 채널의 송신 측을 실행하고자하는 작업을 보내드립니다.</target>
        </trans-unit>
        <trans-unit id="f04efaa242b2b0657b1281616eed7892b34b84f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expensive_test&lt;/code&gt; function is listed as &lt;code&gt;ignored&lt;/code&gt;. If we want to run only the ignored tests, we can use &lt;code&gt;cargo test -- --ignored&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;expensive_test&lt;/code&gt; 으로 기능이 나열되어 &lt;code&gt;ignored&lt;/code&gt; . 무시 된 테스트 만 실행하려면 &lt;code&gt;cargo test -- --ignored&lt;/code&gt; ignored를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3f7670e25e83de589c198657dfe09fdc1e175dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export_name&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;export_name&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="71ce9eba53db805fddc2d08a297018a65234c4f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extern&lt;/code&gt; function qualifier allows providing function &lt;em&gt;definitions&lt;/em&gt; that can be called with a particular ABI:</source>
          <target state="translated">&lt;code&gt;extern&lt;/code&gt; 기능 제공 있도록 규정 함수 &lt;em&gt;정의&lt;/em&gt; 특정 ABI으로 호출 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="40efbff38e084ea29f3140f45238b8f3a1480902" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extern&lt;/code&gt; keyword is used in two places in Rust. One is in conjunction with the &lt;a href=&quot;index&quot;&gt;&lt;code&gt;crate&lt;/code&gt;&lt;/a&gt; keyword to make your Rust code aware of other Rust crates in your project, i.e., &lt;code&gt;extern crate lazy_static;&lt;/code&gt;. The other use is in foreign function interfaces (FFI).</source>
          <target state="translated">&lt;code&gt;extern&lt;/code&gt; 키워드는 녹 두 곳에서 사용된다. 하나는 &lt;a href=&quot;index&quot;&gt; &lt;code&gt;crate&lt;/code&gt; &lt;/a&gt; 와 함께 키워드 사용하여 Rust 코드가 프로젝트의 다른 Rust 상자를 인식하도록합니다 (예 : &lt;code&gt;extern crate lazy_static;&lt;/code&gt; . 다른 용도는 외부 기능 인터페이스 (FFI)입니다.</target>
        </trans-unit>
        <trans-unit id="80a6e01d93b27f65515594890e0091001ba7b217" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;feature&lt;/code&gt; attribute only accept a &quot;feature flag&quot; and can only be used on nightly. Example:</source>
          <target state="translated">&lt;code&gt;feature&lt;/code&gt; 속성 만 &quot;기능 플래그를&quot;받아 들일 만 야간에 사용할 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="36584ecca666e59936c11f071bcfcb0da92fd4b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;feature&lt;/code&gt; attribute was badly formed.</source>
          <target state="translated">&lt;code&gt;feature&lt;/code&gt; 속성이 심하게 형성되었다.</target>
        </trans-unit>
        <trans-unit id="424a7adcc55a187f305df277831d5dda5afa7154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ffi_const&lt;/code&gt; attribute can only be used on foreign function declarations which have no side effects except for their return value:</source>
          <target state="translated">&lt;code&gt;ffi_const&lt;/code&gt; 의 속성은 자신의 반환 값을 제외하고 부작용이없는 외국 함수 선언에서 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f9fac3c8fa0259e175ffb5e9aab803c7bd9140ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ffi_const&lt;/code&gt; attribute was used on something other than a foreign function declaration.</source>
          <target state="translated">&lt;code&gt;ffi_const&lt;/code&gt; 의 속성은 외부 함수 선언 이외에서 사용되었다.</target>
        </trans-unit>
        <trans-unit id="bfe6d270783e8b73023767bbcd8ed3a773bacf0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ffi_pure&lt;/code&gt; attribute can only be used on foreign functions which do not have side effects or infinite loops:</source>
          <target state="translated">&lt;code&gt;ffi_pure&lt;/code&gt; 의 속성은하지 않는 부작용 또는 무한 루프가 외국 기능에서만 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="883b8dfd3c5fc179185e1d061b052f5f3e0fb52a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ffi_pure&lt;/code&gt; attribute was used on a non-foreign function.</source>
          <target state="translated">&lt;code&gt;ffi_pure&lt;/code&gt; 의 속성이 아닌 외국 기능에 사용되었다.</target>
        </trans-unit>
        <trans-unit id="e96870e73ec5eb32cc1bdf8256711d63dccde7e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fix_incorrect_order&lt;/code&gt; function is in the &lt;code&gt;back_of_house&lt;/code&gt; module, so we can use &lt;code&gt;super&lt;/code&gt; to go to the parent module of &lt;code&gt;back_of_house&lt;/code&gt;, which in this case is &lt;code&gt;crate&lt;/code&gt;, the root. From there, we look for &lt;code&gt;serve_order&lt;/code&gt; and find it. Success! We think the &lt;code&gt;back_of_house&lt;/code&gt; module and the &lt;code&gt;serve_order&lt;/code&gt; function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate&amp;rsquo;s module tree. Therefore, we used &lt;code&gt;super&lt;/code&gt; so we&amp;rsquo;ll have fewer places to update code in the future if this code gets moved to a different module.</source>
          <target state="translated">&lt;code&gt;fix_incorrect_order&lt;/code&gt; 의 기능은에 &lt;code&gt;back_of_house&lt;/code&gt; 의 우리가 사용할 수 있도록, 모듈 &lt;code&gt;super&lt;/code&gt; 의 부모 모듈로 이동 &lt;code&gt;back_of_house&lt;/code&gt; 이 경우에, &lt;code&gt;crate&lt;/code&gt; , 루트. 거기서부터 &lt;code&gt;serve_order&lt;/code&gt; 를 찾아서 찾으십시오. 성공! 우리 는 상자의 모듈 트리를 재구성하기로 결정 하면 &lt;code&gt;back_of_house&lt;/code&gt; 모듈과 &lt;code&gt;serve_order&lt;/code&gt; 함수가 서로 같은 관계를 유지하고 함께 움직일 것으로 생각합니다 . 따라서 우리는 &lt;code&gt;super&lt;/code&gt; 코드가 다른 모듈로 이동하는 경우 나중에 super 하여 코드를 업데이트 할 공간이 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="8941a23b194692ed51f3b950de07285880e660a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fn&lt;/code&gt; syntax declares a new function, the parentheses, &lt;code&gt;()&lt;/code&gt;, indicate there are no parameters, and the curly bracket, &lt;code&gt;{&lt;/code&gt;, starts the body of the function.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; 구문은 새로운 기능, 괄호 선언 &lt;code&gt;()&lt;/code&gt; ,,, 매개 변수가없는 표시하고 중괄호를 &lt;code&gt;{&lt;/code&gt; , 함수의 본문을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="2ec5406eba98b65177f08bb6b301125802a344f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; keyword is used in many syntactic locations:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 키워드가 많은 구문 위치에 사용된다 :</target>
        </trans-unit>
        <trans-unit id="f09d76fe1ac31bb0c6ea4013cf20271ea27e1d4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; loop variable is now named &lt;code&gt;_i&lt;/code&gt;, and the warning no longer appears.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프 변수는 이제 이름 &lt;code&gt;_i&lt;/code&gt; 하고, 경고가 더 이상 나타납니다.</target>
        </trans-unit>
        <trans-unit id="05236db55a3c27bea79ddd94d4c11b4238339e3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forbid&lt;/code&gt; lint setting, like &lt;code&gt;deny&lt;/code&gt;, turns the corresponding compiler warning into a hard error. Unlike &lt;code&gt;deny&lt;/code&gt;, &lt;code&gt;forbid&lt;/code&gt; prevents itself from being overridden by inner attributes.</source>
          <target state="translated">&lt;code&gt;forbid&lt;/code&gt; 보풀이 설정은 같은 &lt;code&gt;deny&lt;/code&gt; , 하드 오류에 해당하는 컴파일러 경고를 켭니다. 달리 &lt;code&gt;deny&lt;/code&gt; , &lt;code&gt;forbid&lt;/code&gt; 는 내부 속성에 의해 재정의되는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="4235fdb48267c248121e84a51ecfc4901ad84de8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; function takes an &lt;a href=&quot;struct.arguments&quot;&gt;&lt;code&gt;Arguments&lt;/code&gt;&lt;/a&gt; struct and returns the resulting formatted string.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 함수 취하는&lt;a href=&quot;struct.arguments&quot;&gt; &lt;code&gt;Arguments&lt;/code&gt; &lt;/a&gt; 구조체 및 결과 형식의 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d0e2c1abc11834d5ec0f9413abedb6a8d1f2b1d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; file does not exist.</source>
          <target state="translated">그만큼 &lt;code&gt;from&lt;/code&gt; 파일이 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0c95afec6a5645bced705f13162ada21e2af597c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; path is not a file.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; 경로는 파일이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="6acb8d35118f04b02cccbeee4ae943f064bc37b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global_allocator&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;global_allocator&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="ae2c6463795dadd5e649f9eb12f49008495df3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash_builder&lt;/code&gt; passed should implement the &lt;a href=&quot;../../hash/trait.buildhasher&quot;&gt;&lt;code&gt;BuildHasher&lt;/code&gt;&lt;/a&gt; trait for the HashMap to be useful, see its documentation for details.</source>
          <target state="translated">전달 된 &lt;code&gt;hash_builder&lt;/code&gt; 는 HashMap이 유용 하도록 &lt;a href=&quot;../../hash/trait.buildhasher&quot;&gt; &lt;code&gt;BuildHasher&lt;/code&gt; &lt;/a&gt; 특성을 구현해야합니다 . 자세한 내용은 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5b0ca98b2928cdd13f0ccd74c40e39e4e68ec9cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash_builder&lt;/code&gt; passed should implement the &lt;a href=&quot;../hash/trait.buildhasher&quot;&gt;&lt;code&gt;BuildHasher&lt;/code&gt;&lt;/a&gt; trait for the HashMap to be useful, see its documentation for details.</source>
          <target state="translated">전달 된 &lt;code&gt;hash_builder&lt;/code&gt; 는 HashMap이 유용 하도록 &lt;a href=&quot;../hash/trait.buildhasher&quot;&gt; &lt;code&gt;BuildHasher&lt;/code&gt; &lt;/a&gt; 특성을 구현해야합니다 . 자세한 내용은 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c35c9498a5a0a48423b3c0138b12569234cd1c61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hello_macro_derive&lt;/code&gt; function first converts the &lt;code&gt;input&lt;/code&gt; from a &lt;code&gt;TokenStream&lt;/code&gt; to a data structure that we can then interpret and perform operations on. This is where &lt;code&gt;syn&lt;/code&gt; comes into play. The &lt;code&gt;parse&lt;/code&gt; function in &lt;code&gt;syn&lt;/code&gt; takes a &lt;code&gt;TokenStream&lt;/code&gt; and returns a &lt;code&gt;DeriveInput&lt;/code&gt; struct representing the parsed Rust code. Listing 19-32 shows the relevant parts of the &lt;code&gt;DeriveInput&lt;/code&gt; struct we get from parsing the &lt;code&gt;struct Pancakes;&lt;/code&gt; string:</source>
          <target state="translated">&lt;code&gt;hello_macro_derive&lt;/code&gt; 함수는 먼저 변환하고 &lt;code&gt;input&lt;/code&gt; a로부터 &lt;code&gt;TokenStream&lt;/code&gt; 을 우리는 다음 해석 작업을 수행 할 수있는 데이터 구조에 관한 것이다. 여기에 &lt;code&gt;syn&lt;/code&gt; 이 등장합니다. &lt;code&gt;syn&lt;/code&gt; 의 &lt;code&gt;parse&lt;/code&gt; 함수 는 &lt;code&gt;TokenStream&lt;/code&gt; 을 &lt;code&gt;DeriveInput&lt;/code&gt; 구문 분석 된 Rust 코드를 나타내는 DeriveInput 구조체를 반환합니다 . Listing 19-32는 &lt;code&gt;struct Pancakes;&lt;/code&gt; 를 파싱하여 얻은 &lt;code&gt;DeriveInput&lt;/code&gt; 구조체 의 관련 부분을 보여줍니다 . 끈:</target>
        </trans-unit>
        <trans-unit id="004c835aa77c1c8e124a5716a58b7a6bffdd04f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hello_macro_derive&lt;/code&gt; function will be called when a user of our library specifies &lt;code&gt;#[derive(HelloMacro)]&lt;/code&gt; on a type. This is possible because we&amp;rsquo;ve annotated the &lt;code&gt;hello_macro_derive&lt;/code&gt; function here with &lt;code&gt;proc_macro_derive&lt;/code&gt; and specified the name, &lt;code&gt;HelloMacro&lt;/code&gt;, which matches our trait name; this is the convention most procedural macros follow.</source>
          <target state="translated">&lt;code&gt;hello_macro_derive&lt;/code&gt; 함수가 호출 될 때 도서관 지정하는 사용자 &lt;code&gt;#[derive(HelloMacro)]&lt;/code&gt; 유형에. 우리가 주석 한 때문입니다 &lt;code&gt;hello_macro_derive&lt;/code&gt; 여기에 기능을 &lt;code&gt;proc_macro_derive&lt;/code&gt; 와 이름, 지정된 &lt;code&gt;HelloMacro&lt;/code&gt; 우리의 특성 이름과 일치; 이것은 대부분의 절차 적 매크로가 따르는 규칙입니다.</target>
        </trans-unit>
        <trans-unit id="f6187e2c81223b9029c3a44a9c821bc39754afaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if let&lt;/code&gt; syntax lets you combine &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; into a less verbose way to handle values that match one pattern while ignoring the rest. Consider the program in Listing 6-6 that matches on an &lt;code&gt;Option&amp;lt;u8&amp;gt;&lt;/code&gt; value but only wants to execute code if the value is 3.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 구문은 결합 할 &lt;code&gt;if&lt;/code&gt; 와 &lt;code&gt;let&lt;/code&gt; 나머지를 무시하면서 핸들 값 방법 자세한 덜에 일치하는 하나 개의 패턴을. Listing 6-6의 &lt;code&gt;Option&amp;lt;u8&amp;gt;&lt;/code&gt; 값 과 일치 하지만 값이 3 인 경우에만 코드를 실행하려는 프로그램을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="4dd0a50c18a24fd3e6c3d1653fdf8d2add1e5c54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; condition evaluates to a value of &lt;code&gt;3&lt;/code&gt; this time, and Rust throws an error:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 의 값을 조건 평가하여 &lt;code&gt;3&lt;/code&gt; 이 3 되고 Rust에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3b97788abf2717f652bd87cae2841d2689fe301c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; expression checks whether our value is out of range, tells the user about the problem, and calls &lt;code&gt;continue&lt;/code&gt; to start the next iteration of the loop and ask for another guess. After the &lt;code&gt;if&lt;/code&gt; expression, we can proceed with the comparisons between &lt;code&gt;guess&lt;/code&gt; and the secret number knowing that &lt;code&gt;guess&lt;/code&gt; is between 1 and 100.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 우리의 값이 범위를 벗어 여부를 발현 검사 문제에 대해 사용자에게 알려줍니다, 그리고 전화는 &lt;code&gt;continue&lt;/code&gt; 루프의 다음 반복을 시작하고 또 다른 추측을 요청. 애프터 &lt;code&gt;if&lt;/code&gt; 표현, 우리 사이의 비교를 진행할 수 있습니다 &lt;code&gt;guess&lt;/code&gt; 하고 아는 비밀 번호를 &lt;code&gt;guess&lt;/code&gt; 1에서 100 사이입니다.</target>
        </trans-unit>
        <trans-unit id="21d4200f741c0e5d495167ba918e66c0fa127463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; keyword is used in one other place in Rust, namely as a part of pattern matching itself, allowing patterns such as &lt;code&gt;Some(x) if x &amp;gt; 200&lt;/code&gt; to be used.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 키워드, 즉 패턴의 일부와 같은 패턴의 수를 알아 내는데 같이 녹 하나의 다른 곳에서 사용되는 &lt;code&gt;Some(x) if x &amp;gt; 200&lt;/code&gt; 사용한다.</target>
        </trans-unit>
        <trans-unit id="60fa964e136b0f0fd7616e520f7abaf2ebfa7111" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignore&lt;/code&gt; attribute</source>
          <target state="translated">는 &lt;code&gt;ignore&lt;/code&gt; 속성을</target>
        </trans-unit>
        <trans-unit id="1f363aa597e809eee39b1326a49009f8ed22190d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignore&lt;/code&gt; attribute may optionally be written with the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify a reason why the test is ignored.</source>
          <target state="translated">&lt;code&gt;ignore&lt;/code&gt; 속성은 선택적으로 기록 될 수있다&lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt; MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 테스트가 무시되는 이유를 지정하는 구문.</target>
        </trans-unit>
        <trans-unit id="db8fdc6685b8fc701d318f4f3dec52f0b9a4e868" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;impl Trait&lt;/code&gt; return type captures lifetime parameters that do not appear within the &lt;code&gt;impl Trait&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; 내에서 표시되지 않는 반환 형식 캡처 수명 매개 변수 &lt;code&gt;impl Trait&lt;/code&gt; 자체.</target>
        </trans-unit>
        <trans-unit id="c9150ca2fdc92a2e0f4ccf4f986d692afa5493d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;impl Trait&lt;/code&gt; syntax is convenient and makes for more concise code in simple cases. The trait bound syntax can express more complexity in other cases. For example, we can have two parameters that implement &lt;code&gt;Summary&lt;/code&gt;. Using the &lt;code&gt;impl Trait&lt;/code&gt; syntax looks like this:</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; 구문은 편리하고 간단한 경우 더 간결한 코드를 만든다. 특성 바인딩 구문은 다른 경우에 더 복잡한 것을 표현할 수 있습니다. 예를 들어, &lt;code&gt;Summary&lt;/code&gt; 를 구현하는 두 개의 매개 변수가있을 수 있습니다 . 사용 &lt;code&gt;impl Trait&lt;/code&gt; 구문을 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="778ea7a6b81f5bfa7d87e34cfb75fde414639934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;impl Trait&lt;/code&gt; syntax works for straightforward cases but is actually syntax sugar for a longer form, which is called a &lt;em&gt;trait bound&lt;/em&gt;; it looks like this:</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; 구문은 간단 경우에 작동하지만 실제로 호출되는 긴 형태, 구문 설탕입니다&lt;em&gt; 바인딩 특성을&lt;/em&gt; ; 다음과 같이 보입니다 :</target>
        </trans-unit>
        <trans-unit id="2ffdcc0f4b373da2777f00eb0b778b9205836471" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;impl&lt;/code&gt; keyword is primarily used to define implementations on types. Inherent implementations are standalone, while trait implementations are used to implement traits for types, or other traits.</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; 키워드는 주로 유형의 구현을 정의하는 데 사용됩니다. 고유 한 구현은 독립형이며 특성 구현은 유형 또는 다른 특성에 대한 특성을 구현하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="49b529510ff41b8ce0e4f03d01af2d0795d82946" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;incoming&lt;/code&gt; method on &lt;code&gt;TcpListener&lt;/code&gt; returns an iterator that gives us a sequence of streams (more specifically, streams of type &lt;code&gt;TcpStream&lt;/code&gt;). A single &lt;em&gt;stream&lt;/em&gt; represents an open connection between the client and the server. A &lt;em&gt;connection&lt;/em&gt; is the name for the full request and response process in which a client connects to the server, the server generates a response, and the server closes the connection. As such, &lt;code&gt;TcpStream&lt;/code&gt; will read from itself to see what the client sent and then allow us to write our response to the stream. Overall, this &lt;code&gt;for&lt;/code&gt; loop will process each connection in turn and produce a series of streams for us to handle.</source>
          <target state="translated">&lt;code&gt;TcpListener&lt;/code&gt; 의 &lt;code&gt;incoming&lt;/code&gt; 메소드 는 일련의 스트림 (특히 &lt;code&gt;TcpStream&lt;/code&gt; 유형의 스트림)을 제공하는 반복자를 리턴합니다 . 단일 &lt;em&gt;스트림&lt;/em&gt; 은 클라이언트와 서버 간의 열린 연결을 나타냅니다. &lt;em&gt;연결&lt;/em&gt; 서버에 클라이언트 커넥트에서, 서버는 응답을 생성하는 전체 요청 및 응답 프로세스의 이름, 서버는 연결을 닫는다. 따라서 &lt;code&gt;TcpStream&lt;/code&gt; 은 클라이언트가 무엇을 보냈는지 확인하고 응답을 스트림에 쓸 수 있도록합니다. 전반적으로,이 &lt;code&gt;for&lt;/code&gt; &lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt; 루프는 각 연결을 차례로 처리하고 처리 할 일련의 스트림을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3ae3f99054fefa43fcfe679af5b3d84ea2c62ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="f0d784eef56974f3daef0d597995f18b5e5f8afb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; attribute only supports two arguments:</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 속성은 두 개의 인수를 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="bc1a141c850728d98b956fd0716ebc10f9ffb6e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; attribute was malformed.</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 속성의 형식이 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="4788ad11ac891125e5295255c9d02cd7b36750e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isize&lt;/code&gt; type is a signed integer type with the same number of bits as the platform's pointer type. The theoretical upper bound on object and array size is the maximum &lt;code&gt;isize&lt;/code&gt; value. This ensures that &lt;code&gt;isize&lt;/code&gt; can be used to calculate differences between pointers into an object or array and can address every byte within an object along with one byte past the end.</source>
          <target state="translated">&lt;code&gt;isize&lt;/code&gt; 유형은 플랫폼의 포인터 유형으로 동일한 비트 수의 부호있는 정수 유형입니다. 객체 및 배열 크기의 이론 상한은 최대 &lt;code&gt;isize&lt;/code&gt; 값입니다. 이렇게하면 &lt;code&gt;isize&lt;/code&gt; 를 사용하여 객체 또는 배열에 대한 포인터 간의 차이를 계산할 수 있고 객체 내의 모든 바이트와 끝을지나 1 바이트를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="7d599bd6c4aa9e941662680b3c4cf55e952c7777" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;it_works&lt;/code&gt; function now has a return type, &lt;code&gt;Result&amp;lt;(), String&amp;gt;&lt;/code&gt;. In the body of the function, rather than calling the &lt;code&gt;assert_eq!&lt;/code&gt; macro, we return &lt;code&gt;Ok(())&lt;/code&gt; when the test passes and an &lt;code&gt;Err&lt;/code&gt; with a &lt;code&gt;String&lt;/code&gt; inside when the test fails.</source>
          <target state="translated">&lt;code&gt;it_works&lt;/code&gt; 가 이제 복귀 유형 작용, &lt;code&gt;Result&amp;lt;(), String&amp;gt;&lt;/code&gt; . &lt;code&gt;assert_eq!&lt;/code&gt; 호출하는 대신 함수 본문에서 ! 매크로, 테스트가 통과되면 &lt;code&gt;Ok(())&lt;/code&gt; 반환 하고 &lt;code&gt;Err&lt;/code&gt; 은 &lt;code&gt;String&lt;/code&gt; 하고 테스트에 실패하면 내부 합니다.</target>
        </trans-unit>
        <trans-unit id="d7cf351f8d0a069e43102c73f4dd09e2f7958bd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;largest&lt;/code&gt; function has a parameter called &lt;code&gt;list&lt;/code&gt;, which represents any concrete slice of &lt;code&gt;i32&lt;/code&gt; values that we might pass into the function. As a result, when we call the function, the code runs on the specific values that we pass in.</source>
          <target state="translated">&lt;code&gt;largest&lt;/code&gt; 함수가 호출 매개 변수가 &lt;code&gt;list&lt;/code&gt; 의 콘크리트 조각 나타내며, &lt;code&gt;i32&lt;/code&gt; 우리가 함수에 전달할 수 있다는 값을. 결과적으로 함수를 호출하면 전달한 특정 값에서 코드가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="29c272390da5b69d23c340bb06b514ca355b63f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;largest_i32&lt;/code&gt; function is the one we extracted in Listing 10-3 that finds the largest &lt;code&gt;i32&lt;/code&gt; in a slice. The &lt;code&gt;largest_char&lt;/code&gt; function finds the largest &lt;code&gt;char&lt;/code&gt; in a slice. The function bodies have the same code, so let&amp;rsquo;s eliminate the duplication by introducing a generic type parameter in a single function.</source>
          <target state="translated">&lt;code&gt;largest_i32&lt;/code&gt; 의 기능은 최대의 발견 우리가 목록 10-3에서 추출 된 하나 &lt;code&gt;i32&lt;/code&gt; 조각에. &lt;code&gt;largest_char&lt;/code&gt; 의 기능이 가장 큰 발견 &lt;code&gt;char&lt;/code&gt; 조각에 있습니다. 함수 본문에는 동일한 코드가 있으므로 단일 함수에 일반 형식 매개 변수를 도입하여 중복을 제거합시다.</target>
        </trans-unit>
        <trans-unit id="d1c6673a10646101d9e252f3f63c9d87dc9cd482" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;len&lt;/code&gt; argument is the number of &lt;strong&gt;elements&lt;/strong&gt;, not the number of bytes.</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; 인수의 수입니다 &lt;strong&gt;요소&lt;/strong&gt; 가 아닌 바이트 수.</target>
        </trans-unit>
        <trans-unit id="eabd24b648d02186aedafa8c6e64a26cd4789b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let y = 6&lt;/code&gt; statement does not return a value, so there isn&amp;rsquo;t anything for &lt;code&gt;x&lt;/code&gt; to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write &lt;code&gt;x = y = 6&lt;/code&gt; and have both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; have the value &lt;code&gt;6&lt;/code&gt;; that is not the case in Rust.</source>
          <target state="translated">&lt;code&gt;let y = 6&lt;/code&gt; 문은 그렇게 아무것도가없는, 값을 반환하지 않는 &lt;code&gt;x&lt;/code&gt; 에 바인딩. 이는 할당이 할당 값을 반환하는 C 및 Ruby와 같은 다른 언어에서 발생하는 것과 다릅니다. 해당 언어로 &lt;code&gt;x = y = 6&lt;/code&gt; 쓸 수 있으며 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 모두 &lt;code&gt;6&lt;/code&gt; 의 값을 갖습니다 . Rust에서는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38e40fe06999fccdbadcd0aed2907afe5c6e93b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lines&lt;/code&gt; method returns an iterator. We&amp;rsquo;ll talk about iterators in depth in &lt;a href=&quot;ch13-02-iterators&quot;&gt;Chapter 13&lt;/a&gt;, but recall that you saw this way of using an iterator in &lt;a href=&quot;ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Listing 3-5&lt;/a&gt;, where we used a &lt;code&gt;for&lt;/code&gt; loop with an iterator to run some code on each item in a collection.</source>
          <target state="translated">&lt;code&gt;lines&lt;/code&gt; 방법은 반복자를 반환합니다. 이터레이터에 대해서는 &lt;a href=&quot;ch13-02-iterators&quot;&gt;13 장&lt;/a&gt; 에서 자세히 설명 할 것이지만, &lt;a href=&quot;ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Listing 3-5&lt;/a&gt; 에서 이터레이터를 사용하는 방법을 본 것을 기억하십시오 . 여기서는 컬렉션의 각 항목에 대해 일부 코드를 실행하기 위해 이터레이터가 있는 &lt;code&gt;for&lt;/code&gt; 루프를 사용 했습니다.</target>
        </trans-unit>
        <trans-unit id="eb368f642161e00040244b9fcf42bf09c020466c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lines&lt;/code&gt; method returns an iterator. We&amp;rsquo;ll talk about iterators in depth in [Chapter 13][ch13], but recall that you saw this way of using an iterator in &lt;a href=&quot;ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Listing 3-5&lt;/a&gt;, where we used a &lt;code&gt;for&lt;/code&gt; loop with an iterator to run some code on each item in a collection.</source>
          <target state="translated">&lt;code&gt;lines&lt;/code&gt; 방법은 반복자를 반환합니다. [Chapter 13] [ch13]에서 반복자에 대해 자세히 설명하지만, 반복자에 &lt;code&gt;for&lt;/code&gt; 루프를 사용하여 각 항목에 대해 일부 코드를 실행하는 &lt;a href=&quot;ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Listing 3-5&lt;/a&gt; 의 반복자를 사용하는 방법을 살펴 보았다. 컬렉션에서.</target>
        </trans-unit>
        <trans-unit id="eb1d841506acd030675c6922085c83e81e995a8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="49ce3813b3cc29f6621eed5040dfcafe494f7af6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link_name&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;link_name&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="affa85dfaaac9c19595e178102133ab86d473f6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link_name&lt;/code&gt; attribute may be specified on declarations inside an &lt;code&gt;extern&lt;/code&gt; block to indicate the symbol to import for the given function or static. It uses the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify the name of the symbol.</source>
          <target state="translated">&lt;code&gt;link_name&lt;/code&gt; 의 속성은 내부 선언에서 지정 될 수있다 &lt;code&gt;extern&lt;/code&gt; 지정된 기능 또는 정적 위해 가져 기호를 나타내는 블록. 그것은 사용 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 심볼의 이름을 지정하는 구문을.</target>
        </trans-unit>
        <trans-unit id="76e0be66315f639652150dfe37a31422ede56b88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link_section&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;link_section&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="5d3ac97ce0e51b7500958397678a0747500d6a86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locality&lt;/code&gt; argument must be a constant integer and is a temporal locality specifier ranging from (0) - no locality, to (3) - extremely local keep in cache</source>
          <target state="translated">&lt;code&gt;locality&lt;/code&gt; 인수는 상수 정수이어야하며, 시간적 지역의 지정 (0)에 이르기까지한다 - 캐시에서 매우 현지 킵 - (3)에, 아니 지역</target>
        </trans-unit>
        <trans-unit id="08d3f68a2cf00952341cb92b2cabeabf4f7aad60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locality&lt;/code&gt; argument must be a constant integer and is a temporal locality specifier ranging from (0) - no locality, to (3) - extremely local keep in cache.</source>
          <target state="translated">&lt;code&gt;locality&lt;/code&gt; 인수는 상수 정수이어야하며 (0)에 이르기까지 시간적 지역 지정자입니다 - 어떤 지역에 (3) - 캐시에 매우 지역 킵은.</target>
        </trans-unit>
        <trans-unit id="ef1c91d4a25bd321565ee99def8880c9e7e661ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop&lt;/code&gt; keyword creates an infinite loop. We&amp;rsquo;ll add that now to give users more chances at guessing the number:</source>
          <target state="translated">&lt;code&gt;loop&lt;/code&gt; 키워드는 무한 루프를 만듭니다. 이제 사용자가 숫자를 추측 할 수있는 더 많은 기회를 제공하기 위해 추가하겠습니다.</target>
        </trans-unit>
        <trans-unit id="ebe9e1bcc2f0843b5208a2b5109915be71857732" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop&lt;/code&gt; keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.</source>
          <target state="translated">&lt;code&gt;loop&lt;/code&gt; 키워드는 녹에 걸쳐 코드 블록을 실행하고 다시 영원히 또는 명시 적으로 중지를 말할 때까지 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="9910971bdcb643aec0b768364519db2f99d5aff4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;macro_use&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;macro_use&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="c25fb9655125d01a5a1e9d67f7f0780bc361281a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function here creates an instance of the &lt;code&gt;ImportantExcerpt&lt;/code&gt; struct that holds a reference to the first sentence of the &lt;code&gt;String&lt;/code&gt; owned by the variable &lt;code&gt;novel&lt;/code&gt;. The data in &lt;code&gt;novel&lt;/code&gt; exists before the &lt;code&gt;ImportantExcerpt&lt;/code&gt; instance is created. In addition, &lt;code&gt;novel&lt;/code&gt; doesn&amp;rsquo;t go out of scope until after the &lt;code&gt;ImportantExcerpt&lt;/code&gt; goes out of scope, so the reference in the &lt;code&gt;ImportantExcerpt&lt;/code&gt; instance is valid.</source>
          <target state="translated">여기서 &lt;code&gt;main&lt;/code&gt; 함수 는 변수 &lt;code&gt;novel&lt;/code&gt; 소유 한 &lt;code&gt;String&lt;/code&gt; 의 첫 문장에 대한 참조를 보유하는 &lt;code&gt;ImportantExcerpt&lt;/code&gt; 구조체 의 인스턴스를 만듭니다 . &lt;code&gt;ImportantExcerpt&lt;/code&gt; 인스턴스가 생성 되기 전에 &lt;code&gt;novel&lt;/code&gt; 데이터가 존재합니다 . 또한 &lt;code&gt;ImportantExcerpt&lt;/code&gt; 가 범위를 벗어날 때까지 &lt;code&gt;novel&lt;/code&gt; 이 범위 를 벗어나지 않으므로 &lt;code&gt;ImportantExcerpt&lt;/code&gt; 인스턴스 의 참조 가 유효합니다.</target>
        </trans-unit>
        <trans-unit id="db5fe1609c8c74f709a4f1880a24bb8f27550e1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function is special, and there are restrictions on what its return type must be. One valid return type for main is &lt;code&gt;()&lt;/code&gt;, and conveniently, another valid return type is &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, as shown here:</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 기능은 특별하다, 그것의 반환 형식이 있어야합니다 무엇에 제한이 있습니다. main에 대한 하나의 유효한 반환 유형은 &lt;code&gt;()&lt;/code&gt; 이며, 다른 유효한 반환 유형은 다음 과 같이 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df8be9695315286ea699a84bc57bf274e0dcbb5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function prototype should never take arguments. Example:</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 함수 프로토 타입 인수를해서는 안됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="db6afd48cca2e467a026116d5334792843766266" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function was defined with generic parameters.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 기능은 일반적인 매개 변수로 정의 하였다.</target>
        </trans-unit>
        <trans-unit id="b77f7c754f9c38d3041a1e299a31ef7eeecfa144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function was incorrectly declared.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 기능은 잘못 선언했다.</target>
        </trans-unit>
        <trans-unit id="43e2fa6b27c55d262177050d71a4a20b71217bb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;move&lt;/code&gt; closure is often used alongside &lt;code&gt;thread::spawn&lt;/code&gt; because it allows you to use data from one thread in another thread.</source>
          <target state="translated">&lt;code&gt;move&lt;/code&gt; 폐쇄는 종종 함께 사용되는 &lt;code&gt;thread::spawn&lt;/code&gt; 이 다른 스레드에서 하나 개의 스레드에서 데이터를 사용할 수 있기 때문이다.</target>
        </trans-unit>
        <trans-unit id="619f2d182d04cd2437b9280f0034a655e725227f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mpsc::channel&lt;/code&gt; function returns a tuple, the first element of which is the sending end and the second element is the receiving end. The abbreviations &lt;code&gt;tx&lt;/code&gt; and &lt;code&gt;rx&lt;/code&gt; are traditionally used in many fields for &lt;em&gt;transmitter&lt;/em&gt; and &lt;em&gt;receiver&lt;/em&gt; respectively, so we name our variables as such to indicate each end. We&amp;rsquo;re using a &lt;code&gt;let&lt;/code&gt; statement with a pattern that destructures the tuples; we&amp;rsquo;ll discuss the use of patterns in &lt;code&gt;let&lt;/code&gt; statements and destructuring in Chapter 18. Using a &lt;code&gt;let&lt;/code&gt; statement this way is a convenient approach to extract the pieces of the tuple returned by &lt;code&gt;mpsc::channel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mpsc::channel&lt;/code&gt; 기능 튜플을 반환 첫번째 엘리먼트는의 송신단이고 두번째 요소는 수신 측이다. 약어 &lt;code&gt;tx&lt;/code&gt; 와 &lt;code&gt;rx&lt;/code&gt; 는 전통적으로 &lt;em&gt;송신기&lt;/em&gt; 와 &lt;em&gt;수신기의&lt;/em&gt; 여러 필드에서 각각 사용되므로 각 끝을 나타내는 변수의 이름을 지정합니다. 우리는 튜플을 구조화하는 패턴 으로 &lt;code&gt;let&lt;/code&gt; 문을 사용하고 있습니다 . &lt;code&gt;let&lt;/code&gt; 문과 destructuring에서 패턴 사용에 대해서는 18 장 에서 논의 할 것이다 . &lt;code&gt;let&lt;/code&gt; 문을 이런 식으로 사용하는 것은 &lt;code&gt;mpsc::channel&lt;/code&gt; 의해 리턴 된 튜플 조각을 추출하는 편리한 방법 이다.</target>
        </trans-unit>
        <trans-unit id="0a5adaf35abd6fb52abc875dfd1ff8ace4487057" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;must_use&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;must_use&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="4dc21fbdabdadeb25794ca5fcb0a8eb690cc55f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;must_use&lt;/code&gt; attribute may include a message by using the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax such as &lt;code&gt;#[must_use = &quot;example message&quot;]&lt;/code&gt;. The message will be given alongside the warning.</source>
          <target state="translated">&lt;code&gt;must_use&lt;/code&gt; 의 특성을 사용하여 메시지를 포함 할 수있다 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; 구문 등 &lt;code&gt;#[must_use = &quot;example message&quot;]&lt;/code&gt; . 경고와 함께 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="fa08dd7bde9ed9336c6bf68b835c76ace5a2b281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; key must be included if &lt;code&gt;kind&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 경우 키가 포함되어야합니다 &lt;code&gt;kind&lt;/code&gt; 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="4f5d61c5238b80d1372117cdc9301f7c5a015909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no_builtins&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;no_builtins&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="0e25b9ca8aa17342df965438e7d8b3912387ac96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no_link&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;no_link&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="4c0b9a2602cdb8c2f59fe6476a9d0299ede88a3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no_main&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;no_main&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="63ed748c3f1f47aec501358b0494a62e8e33119a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no_mangle&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;no_mangle&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="f6746e3c0ec6ce06b907e0392a7e5f26c1647e02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;not&lt;/code&gt; cfg-predicate was malformed.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; CFG-술어의 형식이 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="522f2fe5c8ca134ded384cd8e598baad904cbb06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;not&lt;/code&gt; predicate expects one cfg-pattern. Example:</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; 술어 예상하는 하나의 CFG 패턴. 예:</target>
        </trans-unit>
        <trans-unit id="b32d84af66b0734455999894598a8249aed66fbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;number&lt;/code&gt; variable will be bound to a value based on the outcome of the &lt;code&gt;if&lt;/code&gt; expression. Run this code to see what happens:</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 변수는 결과에 기초하는 값으로 결합 될 &lt;code&gt;if&lt;/code&gt; 식. 이 코드를 실행하여 어떤 일이 발생하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="60fb1fa966c95caff6ec3f67558fb81ff746c1d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;op_string_ref&lt;/code&gt; binding has type &lt;code&gt;&amp;amp;Option&amp;lt;&amp;amp;String&amp;gt;&lt;/code&gt; in both cases.</source>
          <target state="translated">&lt;code&gt;op_string_ref&lt;/code&gt; 바인딩 유형이있다 &lt;code&gt;&amp;amp;Option&amp;lt;&amp;amp;String&amp;gt;&lt;/code&gt; 두 경우 모두를.</target>
        </trans-unit>
        <trans-unit id="2d0c9a8f467995322cb26a15b43a2ed10bd928bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opt-level&lt;/code&gt; setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3. Applying more optimizations extends compiling time, so if you&amp;rsquo;re in development and compiling your code often, you&amp;rsquo;ll want faster compiling even if the resulting code runs slower. That is the reason the default &lt;code&gt;opt-level&lt;/code&gt; for &lt;code&gt;dev&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. When you&amp;rsquo;re ready to release your code, it&amp;rsquo;s best to spend more time compiling. You&amp;rsquo;ll only compile in release mode once, but you&amp;rsquo;ll run the compiled program many times, so release mode trades longer compile time for code that runs faster. That is why the default &lt;code&gt;opt-level&lt;/code&gt; for the &lt;code&gt;release&lt;/code&gt; profile is &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;opt-level&lt;/code&gt; 제어를 최적화의 수를 설정 녹 당신이 개발하고 자주 코드를 컴파일있어 만약 그렇다면, 시간을 컴파일 연장 0 3에 적용 더욱 최적화의 범위와, 코드에 적용됩니다, 당신은 빨리 할 것 결과 코드가 느리게 실행 되더라도 컴파일 이것이 &lt;code&gt;dev&lt;/code&gt; 에 대한 기본 &lt;code&gt;opt-level&lt;/code&gt; 이 &lt;code&gt;0&lt;/code&gt; 인 이유 입니다. 코드를 배포 할 준비가되면 컴파일에 더 많은 시간을 보내는 것이 가장 좋습니다. 릴리스 모드에서는 한 번만 컴파일하지만 컴파일 된 프로그램을 여러 번 실행하므로 릴리스 모드는 더 빨리 실행되는 코드에 대해 컴파일 시간이 길어집니다. 기본 이유입니다 &lt;code&gt;opt-level&lt;/code&gt; 에 대한 &lt;code&gt;release&lt;/code&gt; 프로필이다 &lt;code&gt;3&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a0e04095b896f42634e32e5783ee8a2f1b36521" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;or_insert&lt;/code&gt; method on &lt;code&gt;Entry&lt;/code&gt; is defined to return a mutable reference to the value for the corresponding &lt;code&gt;Entry&lt;/code&gt; key if that key exists, and if not, inserts the parameter as the new value for this key and returns a mutable reference to the new value. This technique is much cleaner than writing the logic ourselves and, in addition, plays more nicely with the borrow checker.</source>
          <target state="translated">&lt;code&gt;Entry&lt;/code&gt; 의 &lt;code&gt;or_insert&lt;/code&gt; 메소드 는 해당 키가 존재하는 경우 해당 &lt;code&gt;Entry&lt;/code&gt; 키 의 값에 대한 변경 가능한 참조를 리턴하고 , 존재하지 않는 경우이 키의 새 값으로 매개 변수를 삽입하고 새 값에 대한 변경 가능한 참조를 리턴하도록 정의됩니다. 이 기술은 로직을 직접 작성하는 것보다 훨씬 깨끗하며 빌림 검사기에서 더 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6774c9469b6011fbcb32c16aad7d03e8b6f6c4d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;panic_handler&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;panic_handler&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="a6291890b4261d452b074ebd1ea09861364cf569" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="eca9cdb5a96c8de323e434d012e339f61d08ae9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; points at a non-directory file.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 가 아닌 디렉토리 파일에서 포인트.</target>
        </trans-unit>
        <trans-unit id="34ed0df01305ce0f75ec5fd43922003af97a525e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;poll&lt;/code&gt; function is not called repeatedly in a tight loop -- instead, it should only be called when the future indicates that it is ready to make progress (by calling &lt;code&gt;wake()&lt;/code&gt;). If you're familiar with the &lt;code&gt;poll(2)&lt;/code&gt; or &lt;code&gt;select(2)&lt;/code&gt; syscalls on Unix it's worth noting that futures typically do &lt;em&gt;not&lt;/em&gt; suffer the same problems of &quot;all wakeups must poll all events&quot;; they are more like &lt;code&gt;epoll(4)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;poll&lt;/code&gt; 기능이 꽉 루프에서 반복적으로 호출되지 않는다 - 대신, 그것은 단지 호출해야 미래가 진전을 이룰 준비가되어 있음을 나타냅니다 경우 (호출하여 &lt;code&gt;wake()&lt;/code&gt; ). 유닉스 에서 &lt;code&gt;poll(2)&lt;/code&gt; 또는 &lt;code&gt;select(2)&lt;/code&gt; syscalls에 익숙하다면 선물은 일반적으로 &quot;모든 웨이크 업이 모든 이벤트를 폴링해야합니다&quot;와 같은 문제가 발생 하지 &lt;em&gt;않습니다&lt;/em&gt; . 그것들은 &lt;code&gt;epoll(4)&lt;/code&gt; 와 비슷 합니다.</target>
        </trans-unit>
        <trans-unit id="a4cdf57409266ff4ceaefa41a5aa6a9d06ca0f60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;poll&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;poll&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="f69f8390bb6f3d4deb2545de4fdfa29877369556" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefetch&lt;/code&gt; intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a no-op. Prefetches have no effect on the behavior of the program but can change its performance characteristics.</source>
          <target state="translated">&lt;code&gt;prefetch&lt;/code&gt; 극한 지원한다면 프리 페치 명령을 삽입하는 코드 생성기 힌트; 그렇지 않으면, 그것은 no-op입니다. 프리 페치는 프로그램의 동작에 영향을 미치지 않지만 성능 특성을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa7fa9cd2241a28cad4fa12a2f135f7ef3c12daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;println!&lt;/code&gt; function is only capable of printing to standard output, so we have to use something else to print to standard error.</source>
          <target state="translated">&lt;code&gt;println!&lt;/code&gt; 함수는 표준 출력으로 만 인쇄 할 수 있으므로 표준 오류로 인쇄하려면 다른 것을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="f554c0d8cd003f0dac64077248339772aef74465" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;println!&lt;/code&gt; macro can do many kinds of formatting, and by default, the curly brackets tell &lt;code&gt;println!&lt;/code&gt; to use formatting known as &lt;code&gt;Display&lt;/code&gt;: output intended for direct end user consumption. The primitive types we&amp;rsquo;ve seen so far implement &lt;code&gt;Display&lt;/code&gt; by default, because there&amp;rsquo;s only one way you&amp;rsquo;d want to show a &lt;code&gt;1&lt;/code&gt; or any other primitive type to a user. But with structs, the way &lt;code&gt;println!&lt;/code&gt; should format the output is less clear because there are more display possibilities: Do you want commas or not? Do you want to print the curly brackets? Should all the fields be shown? Due to this ambiguity, Rust doesn&amp;rsquo;t try to guess what we want, and structs don&amp;rsquo;t have a provided implementation of &lt;code&gt;Display&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;println!&lt;/code&gt; 매크로는 여러 가지 형식을 지정할 수 있으며 기본적으로 중괄호는 &lt;code&gt;println!&lt;/code&gt; 알려줍니다 ! 최종 사용자가 직접 소비 할 수 있도록 &lt;code&gt;Display&lt;/code&gt; : 출력 이라는 형식을 사용 합니다. 지금까지 본 기본 유형은 사용자 에게 &lt;code&gt;1&lt;/code&gt; 또는 다른 기본 유형을 표시하려는 방법이 하나뿐이기 때문에 기본적으로 &lt;code&gt;Display&lt;/code&gt; 를 구현 합니다. 그러나 구조체와 함께 &lt;code&gt;println!&lt;/code&gt; 더 많은 표시 가능성이 있으므로 출력 형식을 명확하게 지정해야합니다. 쉼표를 원하십니까? 중괄호를 인쇄 하시겠습니까? 모든 필드가 표시되어야합니까? 이러한 모호성 때문에 Rust는 우리가 원하는 것을 추측하려고 시도하지 않으며 구조체에는 제공된 구현이 없습니다. &lt;code&gt;Display&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02931ec361bbc5f61952272ead50c2b1cc721cb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;println!&lt;/code&gt; macro is only capable of printing to standard output, so we have to use something else to print to standard error.</source>
          <target state="translated">&lt;code&gt;println!&lt;/code&gt; 매크로는 표준 출력으로 만 인쇄 할 수 있으므로 표준 오류로 인쇄하려면 다른 것을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="df3a7253c874e9c54aed370b97b0410e823ccbd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;proc_macro&lt;/code&gt; crate</source>
          <target state="translated">&lt;code&gt;proc_macro&lt;/code&gt; 상자</target>
        </trans-unit>
        <trans-unit id="0ebc19fdeafa41e303e045832093f26b01f1011c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pub&lt;/code&gt; keyword was used inside a function.</source>
          <target state="translated">&lt;code&gt;pub&lt;/code&gt; 키워드는 함수 내에서 사용되었다.</target>
        </trans-unit>
        <trans-unit id="a4aeb159d9e69df04b16b32d0a540b4e48d1c2ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pub&lt;/code&gt; keyword was used inside a function. Erroneous code example:</source>
          <target state="translated">&lt;code&gt;pub&lt;/code&gt; 키워드는 함수 내에서 사용되었다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="b670fe1e664ec6db0ea27f497b8f300d96565afa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pub&lt;/code&gt; keyword was used inside a public enum.</source>
          <target state="translated">&lt;code&gt;pub&lt;/code&gt; 키워드는 공공 열거 내부에 사용되었다.</target>
        </trans-unit>
        <trans-unit id="d36ebedc5c61f3368fb308364706ea53f77e634b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pub&lt;/code&gt; keyword was used inside a public enum. Erroneous code example:</source>
          <target state="translated">&lt;code&gt;pub&lt;/code&gt; 키워드는 공공 열거 내부에 사용되었다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="855c30613293c5803da1be19530bcff46d089f73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;push&lt;/code&gt; method takes a single character as a parameter and adds it to the &lt;code&gt;String&lt;/code&gt;. Listing 8-17 shows code that adds the letter &lt;em&gt;l&lt;/em&gt; to a &lt;code&gt;String&lt;/code&gt; using the &lt;code&gt;push&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 방법은 매개 변수로 단일 문자를 취하고에 추가 &lt;code&gt;String&lt;/code&gt; . 코드 8-17은 &lt;code&gt;push&lt;/code&gt; 메소드를 사용하여 문자 &lt;em&gt;l&lt;/em&gt; 을 &lt;code&gt;String&lt;/code&gt; 추가하는 코드를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e7c0b086ee3b65e9ef7299c70cf8f6fd0c56999e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quote!&lt;/code&gt; macro also provides some very cool templating mechanics: we can enter &lt;code&gt;#name&lt;/code&gt;, and &lt;code&gt;quote!&lt;/code&gt; will replace it with the value in the variable &lt;code&gt;name&lt;/code&gt;. You can even do some repetition similar to the way regular macros work. Check out &lt;a href=&quot;https://docs.rs/quote&quot;&gt;the &lt;code&gt;quote&lt;/code&gt; crate&amp;rsquo;s docs&lt;/a&gt; for a thorough introduction.</source>
          <target state="translated">&lt;code&gt;quote!&lt;/code&gt; 매크로는 또한 매우 멋진 템플릿 기법을 제공합니다 : &lt;code&gt;#name&lt;/code&gt; 을 입력 하고 &lt;code&gt;quote!&lt;/code&gt; 할 수 있습니다 ! 변수 &lt;code&gt;name&lt;/code&gt; 의 값으로 대체합니다 . 일반 매크로가 작동하는 방식과 유사한 반복을 수행 할 수도 있습니다. 확인 &lt;a href=&quot;https://docs.rs/quote&quot;&gt; &lt;code&gt;quote&lt;/code&gt; &lt;/a&gt; 상자의 문서를 철저하게 도입.</target>
        </trans-unit>
        <trans-unit id="62ab310a7862369bfdb3998e805adaae0cd4f2e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quote!&lt;/code&gt; macro lets us define the Rust code that we want to return. The compiler expects something different to the direct result of the &lt;code&gt;quote!&lt;/code&gt; macro&amp;rsquo;s execution, so we need to convert it to a &lt;code&gt;TokenStream&lt;/code&gt;. We do this by calling the &lt;code&gt;into&lt;/code&gt; method, which consumes this intermediate representation and returns a value of the required &lt;code&gt;TokenStream&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;quote!&lt;/code&gt; 매크로를 사용하면 반환하려는 Rust 코드를 정의 할 수 있습니다. 컴파일러는 &lt;code&gt;quote!&lt;/code&gt; 의 직접적인 결과와 다른 것을 기대합니다 ! 매크로의 실행으로 인해이를 &lt;code&gt;TokenStream&lt;/code&gt; 으로 변환해야합니다 . 이 중간 표현을 소비하고 필요한 &lt;code&gt;TokenStream&lt;/code&gt; 유형 의 값을 반환하는 &lt;code&gt;into&lt;/code&gt; 메소드 를 호출하여이를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="b83941e960f12671a681a1df28d6d59cb442a02e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursion_limit&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;recursion_limit&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="7fd3ec074e9dd99ae0db784fdf399ea43dd43516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ref&lt;/code&gt; and/or &lt;code&gt;mut&lt;/code&gt;&lt;em&gt;IDENTIFIER&lt;/em&gt; syntax matches any value and binds it to a variable with the same name as the given field.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 및 / 또는 &lt;code&gt;mut&lt;/code&gt; &lt;em&gt;식별자&lt;/em&gt; 구문은 특정 필드와 같은 이름의 변수에 대한 값을 귀속 일치한다.</target>
        </trans-unit>
        <trans-unit id="a07e646920bfd0169ef8462620bb6bf857e50545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repeat()&lt;/code&gt; function repeats a single value over and over again.</source>
          <target state="translated">&lt;code&gt;repeat()&lt;/code&gt; 함수는 반복해서 하나의 값을 반복한다.</target>
        </trans-unit>
        <trans-unit id="ca6b7fab269378f975039696a9d029f43743fe55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repeat_with()&lt;/code&gt; function calls the repeater over and over again.</source>
          <target state="translated">&lt;code&gt;repeat_with()&lt;/code&gt; 함수는 또 다시 리피터를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="203b4d4e0f959a4e516770bf1c8acd411f9645d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request_review&lt;/code&gt; and &lt;code&gt;approve&lt;/code&gt; methods take ownership of &lt;code&gt;self&lt;/code&gt;, thus consuming the &lt;code&gt;DraftPost&lt;/code&gt; and &lt;code&gt;PendingReviewPost&lt;/code&gt; instances and transforming them into a &lt;code&gt;PendingReviewPost&lt;/code&gt; and a published &lt;code&gt;Post&lt;/code&gt;, respectively. This way, we won&amp;rsquo;t have any lingering &lt;code&gt;DraftPost&lt;/code&gt; instances after we&amp;rsquo;ve called &lt;code&gt;request_review&lt;/code&gt; on them, and so forth. The &lt;code&gt;PendingReviewPost&lt;/code&gt; struct doesn&amp;rsquo;t have a &lt;code&gt;content&lt;/code&gt; method defined on it, so attempting to read its content results in a compiler error, as with &lt;code&gt;DraftPost&lt;/code&gt;. Because the only way to get a published &lt;code&gt;Post&lt;/code&gt; instance that does have a &lt;code&gt;content&lt;/code&gt; method defined is to call the &lt;code&gt;approve&lt;/code&gt; method on a &lt;code&gt;PendingReviewPost&lt;/code&gt;, and the only way to get a &lt;code&gt;PendingReviewPost&lt;/code&gt; is to call the &lt;code&gt;request_review&lt;/code&gt; method on a &lt;code&gt;DraftPost&lt;/code&gt;, we&amp;rsquo;ve now encoded the blog post workflow into the type system.</source>
          <target state="translated">&lt;code&gt;request_review&lt;/code&gt; 및 &lt;code&gt;approve&lt;/code&gt; 방법의 소유권을 가지고 &lt;code&gt;self&lt;/code&gt; , 따라서 소비 &lt;code&gt;DraftPost&lt;/code&gt; 및 &lt;code&gt;PendingReviewPost&lt;/code&gt; 인스턴스를하고로 변환 &lt;code&gt;PendingReviewPost&lt;/code&gt; 및 게시 된 &lt;code&gt;Post&lt;/code&gt; 각각을,. 이런 식으로 &lt;code&gt;request_review&lt;/code&gt; 등 을 호출 한 후 남아있는 &lt;code&gt;DraftPost&lt;/code&gt; 인스턴스 가 없습니다 . &lt;code&gt;PendingReviewPost&lt;/code&gt; 의 구조체는없는 &lt;code&gt;content&lt;/code&gt; 때문에와 같은 컴파일러 오류에 컨텐츠 결과를 읽으려고, 그 위에 정의 된 방법을 &lt;code&gt;DraftPost&lt;/code&gt; . 게시 된 &lt;code&gt;Post&lt;/code&gt; 을 얻는 유일한 방법은가지고 예를 &lt;code&gt;content&lt;/code&gt; 정의 방법은 호출하는 것입니다 &lt;code&gt;approve&lt;/code&gt; A의 방법을 &lt;code&gt;PendingReviewPost&lt;/code&gt; 하고 얻을 수있는 유일한 방법 &lt;code&gt;PendingReviewPost&lt;/code&gt; 은 부르는 것입니다 &lt;code&gt;request_review&lt;/code&gt; 의 A의 방법을 &lt;code&gt;DraftPost&lt;/code&gt; 우리가 지금 형 시스템에 블로그 게시물 워크 플로우를 인코딩했습니다.</target>
        </trans-unit>
        <trans-unit id="14e654a0e6edb832d7ec2e9f01e2cec2e8fc8293" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request_review&lt;/code&gt; method on &lt;code&gt;Draft&lt;/code&gt; needs to return a new, boxed instance of a new &lt;code&gt;PendingReview&lt;/code&gt; struct, which represents the state when a post is waiting for a review. The &lt;code&gt;PendingReview&lt;/code&gt; struct also implements the &lt;code&gt;request_review&lt;/code&gt; method but doesn&amp;rsquo;t do any transformations. Rather, it returns itself, because when we request a review on a post already in the &lt;code&gt;PendingReview&lt;/code&gt; state, it should stay in the &lt;code&gt;PendingReview&lt;/code&gt; state.</source>
          <target state="translated">&lt;code&gt;Draft&lt;/code&gt; 의 &lt;code&gt;request_review&lt;/code&gt; 메소드 는 게시물이 검토 대기중인 상태를 나타내는 새로운 &lt;code&gt;PendingReview&lt;/code&gt; 구조체 의 새로운 박스형 인스턴스를 반환해야합니다 . &lt;code&gt;PendingReview&lt;/code&gt; 의 구조체는 또한 구현 &lt;code&gt;request_review&lt;/code&gt; 의 방법을하지만, 어떤 변환을하지 않습니다. 우리가 이미 게시물에 검토를 요청할 때 때문에 오히려 그 자체를 반환 &lt;code&gt;PendingReview&lt;/code&gt; 의 상태가를 유지해야 &lt;code&gt;PendingReview&lt;/code&gt; 의 상태입니다.</target>
        </trans-unit>
        <trans-unit id="e74e1506742074d3eac6be2b7d8e21235520da47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; command comes in handy when you need to rapidly iterate on a project, as we&amp;rsquo;ll do in this game, quickly testing each iteration before moving on to the next one.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 우리는이 게임에서 할 수 있습니다 당신이 빨리 다음 단계로 이동하기 전에 각 반복 테스트, 프로젝트를 빠르게 반복 할 필요가있을 때 명령이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="46e85b1a08cc19eee77379933feec0b53082268f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; function definition</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 함수 정의</target>
        </trans-unit>
        <trans-unit id="5e5f409e03a8829700c6b7a5a46ab61b65379877" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; function now contains all the remaining logic from &lt;code&gt;main&lt;/code&gt;, starting from reading the file. The &lt;code&gt;run&lt;/code&gt; function takes the &lt;code&gt;Config&lt;/code&gt; instance as an argument.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 기능은 지금부터 나머지 모든 로직을 포함 &lt;code&gt;main&lt;/code&gt; 파일을 읽는부터. &lt;code&gt;run&lt;/code&gt; 기능은 필요 &lt;code&gt;Config&lt;/code&gt; 인수로 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="6fc1541b8f6585c0ffe5cd745827dfb79f574e45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rustfmt&lt;/code&gt; tool reformats your code according to the community code style. Many collaborative projects use &lt;code&gt;rustfmt&lt;/code&gt; to prevent arguments about which style to use when writing Rust: everyone formats their code using the tool.</source>
          <target state="translated">&lt;code&gt;rustfmt&lt;/code&gt; 의 도구는 지역 코드 스타일에 따라 코드를 다시 포맷합니다. 많은 협업 프로젝트는 &lt;code&gt;rustfmt&lt;/code&gt; 를 사용 하여 Rust를 작성할 때 어떤 스타일을 사용 해야하는지 에 대한 논쟁을 막습니다. 모두가 도구를 사용하여 코드를 포맷합니다.</target>
        </trans-unit>
        <trans-unit id="f41fbdae4087d677734daccb36bd68168ac22c54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;same_bucket&lt;/code&gt; function is passed references to two elements from the slice and must determine if the elements compare equal. The elements are passed in opposite order from their order in the slice, so if &lt;code&gt;same_bucket(a, b)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is moved at the end of the slice.</source>
          <target state="translated">&lt;code&gt;same_bucket&lt;/code&gt; 의 함수는 슬라이스에서 두 개의 요소에 대한 참조를 전달하고, 요소가 동일한 경우, 비교 판단한다. 요소는 그렇다면 슬라이스에서 순서 역순으로 전달된다 &lt;code&gt;same_bucket(a, b)&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; 슬라이스의 끝으로 이동한다.</target>
        </trans-unit>
        <trans-unit id="51106981f7e1a09193991d8a2ebd9672888c0e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;same_bucket&lt;/code&gt; function is passed references to two elements from the vector and must determine if the elements compare equal. The elements are passed in opposite order from their order in the slice, so if &lt;code&gt;same_bucket(a, b)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is removed.</source>
          <target state="translated">&lt;code&gt;same_bucket&lt;/code&gt; 의 함수는 벡터에서 두 개의 요소에 대한 참조를 전달하고, 요소가 동일한 경우, 비교 판단한다. 요소는 슬라이스의 순서와 반대 순서로 전달되므로 &lt;code&gt;same_bucket(a, b)&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 &lt;code&gt;a&lt;/code&gt; 가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="a14ee345d1496dff6fbc5e218ae3b33c17f09dd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search_case_insensitive&lt;/code&gt; function, shown in Listing 12-21, will be almost the same as the &lt;code&gt;search&lt;/code&gt; function. The only difference is that we&amp;rsquo;ll lowercase the &lt;code&gt;query&lt;/code&gt; and each &lt;code&gt;line&lt;/code&gt; so whatever the case of the input arguments, they&amp;rsquo;ll be the same case when we check whether the line contains the query.</source>
          <target state="translated">&lt;code&gt;search_case_insensitive&lt;/code&gt; 목록 12-21에 표시된 기능은,는 거의 동일합니다 &lt;code&gt;search&lt;/code&gt; 기능. 유일한 차이점은 &lt;code&gt;query&lt;/code&gt; 와 각 &lt;code&gt;line&lt;/code&gt; 소문자로 입력하므로 입력 인수의 경우에 상관없이 줄에 쿼리가 포함되어 있는지 확인할 때와 같은 경우가됩니다.</target>
        </trans-unit>
        <trans-unit id="bbcc387564e51cca06178b88f2766991af78a4d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; crate may be imported which creates a binding to the current crate. In this case the &lt;code&gt;as&lt;/code&gt; clause must be used to specify the name to bind it to.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 상자는 현재의 상자에 바인딩을 생성하는 가져올 수 있습니다. 이 경우 &lt;code&gt;as&lt;/code&gt; 절을 사용하여 바인딩 할 이름을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="5df3512b09c8677b58f509f70a4092543dbb8630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; import appears more than once in the list.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 수입은 더 목록에 두 번 이상 나타납니다.</target>
        </trans-unit>
        <trans-unit id="776137337eaf5141c6cf75f1ef731869806d23fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; keyword can only be used inside methods, which are associated functions (functions defined inside of a &lt;code&gt;trait&lt;/code&gt; or &lt;code&gt;impl&lt;/code&gt; block) that have a &lt;code&gt;self&lt;/code&gt; receiver as its first parameter, like &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;&amp;amp;self&lt;/code&gt;, &lt;code&gt;&amp;amp;mut self&lt;/code&gt; or &lt;code&gt;self: &amp;amp;mut Pin&amp;lt;Self&amp;gt;&lt;/code&gt; (this last one is an example of an &lt;a href=&quot;https://github.com/rust-lang/rust/issues/44874&quot;&gt;&quot;abitrary &lt;code&gt;self&lt;/code&gt; type&quot;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 키워드은 함수 (a 내부에 정의 된 함수 연관되는 방법 내에서 사용될 수있는 &lt;code&gt;trait&lt;/code&gt; 또는 &lt;code&gt;impl&lt;/code&gt; 가 차단) &lt;code&gt;self&lt;/code&gt; 와 같은, 첫번째 파라미터로서 수신기 &lt;code&gt;self&lt;/code&gt; , &lt;code&gt;&amp;amp;self&lt;/code&gt; , &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 또는 &lt;code&gt;self: &amp;amp;mut Pin&amp;lt;Self&amp;gt;&lt;/code&gt; (이 마지막 항목은 &lt;a href=&quot;https://github.com/rust-lang/rust/issues/44874&quot;&gt;&quot;비 &lt;code&gt;self&lt;/code&gt; 유형&quot;&lt;/a&gt; 의 예입니다 ).</target>
        </trans-unit>
        <trans-unit id="ca20974e52a0607307348bb19d0d894eb2389060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; keyword cannot appear alone as the last segment in a &lt;code&gt;use&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 키워드는의 마지막 부분으로 만 나타날 수 없습니다 &lt;code&gt;use&lt;/code&gt; 선언.</target>
        </trans-unit>
        <trans-unit id="3baa95a2b4735c8ad9eb06f47e895376f593ffa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; keyword was used in a static method.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 키워드는 정적 방법에 사용되었다.</target>
        </trans-unit>
        <trans-unit id="a9568dcdfe3a23be1dee117543923d717013ab13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; keyword was used inside of an associated function without a &quot;&lt;code&gt;self&lt;/code&gt; receiver&quot; parameter.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 키워드는 &quot;없이 연관 함수의 내부를 사용한 &lt;code&gt;self&lt;/code&gt; 수신기&quot;파라미터.</target>
        </trans-unit>
        <trans-unit id="f67620c2fbc5330097742f848b2b9886ad0ef4ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; parameter in a method has an invalid &quot;receiver type&quot;.</source>
          <target state="translated">메소드 의 &lt;code&gt;self&lt;/code&gt; 매개 변수에 유효하지 않은 &quot;수신자 유형&quot;이 있습니다.</target>
        </trans-unit>
        <trans-unit id="71e55d8484323ba680a4d79f359c6a8e4726809e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sent_messages&lt;/code&gt; field is now of type &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt;. In the &lt;code&gt;new&lt;/code&gt; function, we create a new &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; instance around the empty vector.</source>
          <target state="translated">&lt;code&gt;sent_messages&lt;/code&gt; 의 필드는 이제 유형 인 &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 대신 &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; . 에서 &lt;code&gt;new&lt;/code&gt; 기능, 우리는 새로운 만들 &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 빈 벡터 주변의 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="337c62942744e545dcf717c6319edbedc18f313b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shoes_in_my_size&lt;/code&gt; function takes ownership of a vector of shoes and a shoe size as parameters. It returns a vector containing only shoes of the specified size.</source>
          <target state="translated">&lt;code&gt;shoes_in_my_size&lt;/code&gt; 의 기능은 신발의 벡터 및 매개 변수로 신발 사이즈의 소유권을 가져옵니다. 지정된 크기의 신발 만 포함하는 벡터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="16a60caa064b42a78f27eb4d74ff02e2b3b32b36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;should_panic&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;should_panic&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="639f1b128b2e8340c54ba2df925fcc505b0aa67b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;should_panic&lt;/code&gt; attribute may optionally take an input string that must appear within the panic message. If the string is not found in the message, then the test will fail. The string may be passed using the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax or the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListNameValueStr&lt;/em&gt;&lt;/a&gt; syntax with an &lt;code&gt;expected&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;should_panic&lt;/code&gt; 속성은 선택적으로 패닉 메시지 안에 있어야 입력 문자열이 걸릴 수 있습니다. 메시지에 문자열이 없으면 테스트가 실패합니다. 문자열은 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; 구문 또는 &lt;code&gt;expected&lt;/code&gt; 필드 가있는 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListNameValueStr&lt;/em&gt;&lt;/a&gt; 구문을 사용하여 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="47db49dacc0e9fe0c5ab4b84de0a525fbcc167ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;simd_shuffle&lt;/code&gt; function needs the length of the array passed as last parameter in its name. Example:</source>
          <target state="translated">&lt;code&gt;simd_shuffle&lt;/code&gt; 함수 이름 마지막 매개 변수로 전달 된 배열의 길이가 필요하다. 예:</target>
        </trans-unit>
        <trans-unit id="1728894948cd279e5a554b1af44ad631d3c73ca8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spawn&lt;/code&gt; function returns a &lt;code&gt;JoinHandle&amp;lt;T&amp;gt;&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type that the closure returns. Let&amp;rsquo;s try using &lt;code&gt;JoinHandle&lt;/code&gt; too and see what happens. In our case, the closures we&amp;rsquo;re passing to the thread pool will handle the connection and not return anything, so &lt;code&gt;T&lt;/code&gt; will be the unit type &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; 함수 리턴 &lt;code&gt;JoinHandle&amp;lt;T&amp;gt;&lt;/code&gt; , &lt;code&gt;T&lt;/code&gt; 는 밀폐 반환하는 타입이다. &lt;code&gt;JoinHandle&lt;/code&gt; 도 사용 해보고 어떻게되는지 보자 . 우리의 경우 스레드 풀에 전달되는 클로저는 연결을 처리하고 아무것도 반환하지 않으므로 &lt;code&gt;T&lt;/code&gt; 는 단위 유형 &lt;code&gt;()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="566807adf1a1b2e0676b75e750b724f0403f4cce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; path is not a file or doesn't exist.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 경로는 파일이 아니거나 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="07635229348f3268d25fca1958c374b441ce892b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; function was defined with a where clause.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 기능은 where 절에 정의 하였다.</target>
        </trans-unit>
        <trans-unit id="a73480c4afd7847e00e31fe3aafec20a20c54b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; keyword, on the other hand, guarantees a fixed location in memory. This does not always mean that the value is constant. For example, a global mutex can be declared &lt;code&gt;static&lt;/code&gt; as well.</source>
          <target state="translated">반면 &lt;code&gt;static&lt;/code&gt; 키워드는 메모리에서 고정 된 위치를 보장합니다. 이것이 항상 값이 일정하다는 것을 의미하지는 않습니다. 예를 들어, 전역 뮤텍스도 &lt;code&gt;static&lt;/code&gt; 으로 선언 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d33afa111381148e1c91bd2523fbea89118180e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;std::env&lt;/code&gt; module contains many more useful features for dealing with environment variables: check out its documentation to see what is available.</source>
          <target state="translated">&lt;code&gt;std::env&lt;/code&gt; 모듈은 환경 변수를 처리하기위한 더 많은 유용한 기능을 포함 : 가능한 것이 무엇인지 알아보기 위해 문서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="bcaf28a16adceb8447193d5235bef5d8bd3335ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;std::io&lt;/code&gt; module contains a number of common things you'll need when doing input and output. The most core part of this module is the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt; traits, which provide the most general interface for reading and writing input and output.</source>
          <target state="translated">&lt;code&gt;std::io&lt;/code&gt; 모듈은 입력 및 출력을 할 때 당신이 필요합니다 일반적인 여러 가지가 포함되어 있습니다. 이 모듈의 가장 핵심 부분은 입력 및 출력을 읽고 쓰는 데 가장 일반적인 인터페이스를 제공하는 &lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt; 특성입니다.</target>
        </trans-unit>
        <trans-unit id="4a54af6bd4d1bf95ed93c13cd61787ff3a49ae58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;std::mem::drop&lt;/code&gt; function is different from the &lt;code&gt;drop&lt;/code&gt; method in the &lt;code&gt;Drop&lt;/code&gt; trait. We call it by passing the value we want to force to be dropped early as an argument. The function is in the prelude, so we can modify &lt;code&gt;main&lt;/code&gt; in Listing 15-15 to call the &lt;code&gt;drop&lt;/code&gt; function, as shown in Listing 15-16:</source>
          <target state="translated">&lt;code&gt;std::mem::drop&lt;/code&gt; 기능은 상이한 &lt;code&gt;drop&lt;/code&gt; 메소드 &lt;code&gt;Drop&lt;/code&gt; 특성. 우리는 그것을 강제로 포기하고 싶은 가치를 인수로 전달하여 그것을 부릅니다. 이 함수는 전주곡에 있으므로 Listing 15-16에서와 같이 Listing 15-15에서 &lt;code&gt;main&lt;/code&gt; 을 수정 하여 &lt;code&gt;drop&lt;/code&gt; 함수 를 호출 할 수있다 .</target>
        </trans-unit>
        <trans-unit id="964c58feb2d7a0e4b6c63c315388a37636bb2ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;steps_between&lt;/code&gt; function provides a way to efficiently compare two &lt;code&gt;Step&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;steps_between&lt;/code&gt; 의 효율적이 비교에 함수는 방법을 제공합니다 &lt;code&gt;Step&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="3d6948e046aa3d769d70c7d7f5831db7b61d283e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;str&lt;/code&gt; type, also called a 'string slice', is the most primitive string type. It is usually seen in its borrowed form, &lt;code&gt;&amp;amp;str&lt;/code&gt;. It is also the type of string literals, &lt;code&gt;&amp;amp;'static str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 도 '문자열 조각'이라는 유형은, 가장 원시적 인 문자열 유형입니다. 일반적으로 빌린 형태 인 &lt;code&gt;&amp;amp;str&lt;/code&gt; 됩니다. 또한 문자열 리터럴의 유형 인 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4ea4c33d08beaf7c17c84c4930138d5a7a1f80fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stringify!&lt;/code&gt; macro used here is built into Rust. It takes a Rust expression, such as &lt;code&gt;1 + 2&lt;/code&gt;, and at compile time turns the expression into a string literal, such as &lt;code&gt;&quot;1 + 2&quot;&lt;/code&gt;. This is different than &lt;code&gt;format!&lt;/code&gt; or &lt;code&gt;println!&lt;/code&gt;, macros which evaluate the expression and then turn the result into a &lt;code&gt;String&lt;/code&gt;. There is a possibility that the &lt;code&gt;#name&lt;/code&gt; input might be an expression to print literally, so we use &lt;code&gt;stringify!&lt;/code&gt;. Using &lt;code&gt;stringify!&lt;/code&gt; also saves an allocation by converting &lt;code&gt;#name&lt;/code&gt; to a string literal at compile time.</source>
          <target state="translated">&lt;code&gt;stringify!&lt;/code&gt; 여기에 사용 된 매크로는 Rust에 내장되어 있습니다. &lt;code&gt;1 + 2&lt;/code&gt; 와 같은 Rust 표현식을 취하고 컴파일 타임에 표현식을 &lt;code&gt;&quot;1 + 2&quot;&lt;/code&gt; 와 같은 문자열 리터럴로 바꿉니다 . 이것은 &lt;code&gt;format!&lt;/code&gt; 과 다릅니다 ! 또는 &lt;code&gt;println!&lt;/code&gt; 매크로는 표현식을 평가 한 다음 결과를 &lt;code&gt;String&lt;/code&gt; 로 바꿉니다 . &lt;code&gt;#name&lt;/code&gt; 입력은 문자 그대로 인쇄하는 표현식 일 가능성이 있으므로 &lt;code&gt;stringify!&lt;/code&gt; 를 사용합니다 ! . &lt;code&gt;stringify!&lt;/code&gt; 사용 ! 또한 컴파일 할 때 &lt;code&gt;#name&lt;/code&gt; 을 문자열 리터럴 로 변환하여 할당을 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="5e2bbf89c9d53502f02966909193300b8b8e39a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;syn&lt;/code&gt; crate parses Rust code from a string into a data structure that we can perform operations on. The &lt;code&gt;quote&lt;/code&gt; crate turns &lt;code&gt;syn&lt;/code&gt; data structures back into Rust code. These crates make it much simpler to parse any sort of Rust code we might want to handle: writing a full parser for Rust code is no simple task.</source>
          <target state="translated">&lt;code&gt;syn&lt;/code&gt; 상자는 우리가 작업을 수행 할 수있는 데이터 구조로 문자열에서 녹 코드를 구문 분석합니다. &lt;code&gt;quote&lt;/code&gt; 상자의 회전 &lt;code&gt;syn&lt;/code&gt; 데이터 구조 녹 코드로 백업 할 수 있습니다. 이 상자들은 우리가 처리하고자하는 모든 종류의 Rust 코드를 파싱하는 것을 훨씬 간단하게 만듭니다 : Rust 코드를위한 완전한 파서를 작성하는 것은 간단한 일이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="4c2f6cfbefda1dc3521b2af3bf1923ea6ba12d89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;take&lt;/code&gt; method is defined in the &lt;code&gt;Iterator&lt;/code&gt; trait and limits the iteration to the first two items at most. The &lt;code&gt;ThreadPool&lt;/code&gt; will go out of scope at the end of &lt;code&gt;main&lt;/code&gt;, and the &lt;code&gt;drop&lt;/code&gt; implementation will run.</source>
          <target state="translated">&lt;code&gt;take&lt;/code&gt; 방법은 정의되어 &lt;code&gt;Iterator&lt;/code&gt; 특성에 가장 처음 두 항목 반복을 제한한다. &lt;code&gt;ThreadPool&lt;/code&gt; 의 끝에서 범위 밖으로 이동합니다 &lt;code&gt;main&lt;/code&gt; 및 &lt;code&gt;drop&lt;/code&gt; 구현이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="f4261b148ae0a22c8791698e09a2d9939e795de1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target_feature&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;target_feature&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="0bfa2ee4e02addd4c71ab19bd1f7c85cc21dadfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="c6b28a9d1db605fca4af25fdaf7d2f63f3f4ff7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;track_caller&lt;/code&gt; attribute may be applied to any function with &lt;a href=&quot;../items/external-blocks#abi&quot;&gt;&lt;code&gt;&quot;Rust&quot;&lt;/code&gt; ABI&lt;/a&gt; with the exception of the entry point &lt;code&gt;fn main&lt;/code&gt;. When applied to functions and methods in trait declarations, the attribute applies to all implementations. If the trait provides a default implementation with the attribute, then the attribute also applies to override implementations.</source>
          <target state="translated">&lt;code&gt;track_caller&lt;/code&gt; 의 속성은 어떤 기능을 적용 할 수있다 &lt;a href=&quot;../items/external-blocks#abi&quot;&gt; &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; ABI&lt;/a&gt; 엔트리 포인트를 제외한 &lt;code&gt;fn main&lt;/code&gt; . 특성 선언의 함수 및 메서드에 적용될 때 속성은 모든 구현에 적용됩니다. 특성이 특성과 함께 기본 구현을 제공하는 경우 특성은 재정의 구현에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="dbbce8f10ed8de46d53a88134091400a4cad8f24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparent&lt;/code&gt; Representation</source>
          <target state="translated">&lt;code&gt;transparent&lt;/code&gt; 표현</target>
        </trans-unit>
        <trans-unit id="16cfac7d668a26094fafdea930dd55dadb7672de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparent&lt;/code&gt; representation can only be used on &lt;code&gt;struct&lt;/code&gt;s that have a single non-zero sized field and any number of zero-sized fields, including &lt;a href=&quot;special-types-and-traits#phantomdatat&quot;&gt;&lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;transparent&lt;/code&gt; 표현에서만 사용할 수있는 &lt;code&gt;struct&lt;/code&gt; 는 단일 비 - 제로 필드 크기를 포함한 크기 0의 필드의 개수가 S &lt;a href=&quot;special-types-and-traits#phantomdatat&quot;&gt; &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="811b48cd1ea2c8f7773b17e401a6ef4a6664ee6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparent&lt;/code&gt; representation can only be used on a &lt;a href=&quot;items/structs&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt; with a single variant that has:</source>
          <target state="translated">&lt;code&gt;transparent&lt;/code&gt; 표현 만 사용할 수 있습니다 &lt;a href=&quot;items/structs&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; &lt;/a&gt; 갖는 단일 변종 :</target>
        </trans-unit>
        <trans-unit id="01d7d7afaf943b9e9b10757db03a01818240c2c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try_recv&lt;/code&gt; method doesn&amp;rsquo;t block, but will instead return a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; immediately: an &lt;code&gt;Ok&lt;/code&gt; value holding a message if one is available and an &lt;code&gt;Err&lt;/code&gt; value if there aren&amp;rsquo;t any messages this time. Using &lt;code&gt;try_recv&lt;/code&gt; is useful if this thread has other work to do while waiting for messages: we could write a loop that calls &lt;code&gt;try_recv&lt;/code&gt; every so often, handles a message if one is available, and otherwise does other work for a little while until checking again.</source>
          <target state="translated">&lt;code&gt;try_recv&lt;/code&gt; 의 방법은 차단하지 않고, 대신 돌아갑니다 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 즉시 : &lt;code&gt;Ok&lt;/code&gt; 하나가 가능하며, 경우에 값이 메시지를 들고 &lt;code&gt;Err&lt;/code&gt; 이 시간 모든 메시지가없는 경우 값을. 이 스레드가 메시지를 기다리는 동안 다른 작업을 수행하는 경우 &lt;code&gt;try_recv&lt;/code&gt; 를 사용하면 유용합니다. 우리는 &lt;code&gt;try_recv&lt;/code&gt; 를 호출하는 루프를 자주 작성하고, 사용 가능한 경우 메시지를 처리하고, 다시 검사 할 때까지 잠시 동안 다른 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c06a34327e19720b6fdb343c408e7c55dd84e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type Target = T;&lt;/code&gt; syntax defines an associated type for the &lt;code&gt;Deref&lt;/code&gt; trait to use. Associated types are a slightly different way of declaring a generic parameter, but you don&amp;rsquo;t need to worry about them for now; we&amp;rsquo;ll cover them in more detail in Chapter 19.</source>
          <target state="translated">&lt;code&gt;type Target = T;&lt;/code&gt; 구문은 &lt;code&gt;Deref&lt;/code&gt; 특성이 사용할 관련 유형을 정의합니다 . 연관된 유형은 일반 매개 변수를 선언하는 약간 다른 방법이지만 지금은 걱정할 필요가 없습니다. 이에 대해서는 19 장에서 자세히 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="ed8f6c9e0893fd91a5e6d611722172ed9ef6f6c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type_length_limit&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;type_length_limit&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="88b76f9ce33c0af8e240ed6b37ada9e83ea43da5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; keyword is currently reserved but unimplemented.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 키워드는 현재 예약 만 구현되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7495ddf8e7dd908218ee8fe0115f879a8fb5ec94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; keyword is currently reserved but unimplemented. Erroneous code example:</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 키워드는 현재 예약 만 구현되지 않습니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="dd3cfc211f63708e7ec9409ea2198c30928717cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unsafe&lt;/code&gt; keyword has two uses: to declare the existence of contracts the compiler can't check (&lt;code&gt;unsafe fn&lt;/code&gt; and &lt;code&gt;unsafe trait&lt;/code&gt;), and to declare that a programmer has checked that these contracts have been upheld (&lt;code&gt;unsafe {}&lt;/code&gt; and &lt;code&gt;unsafe impl&lt;/code&gt;, but also &lt;code&gt;unsafe fn&lt;/code&gt; -- see below). They are not mutually exclusive, as can be seen in &lt;code&gt;unsafe fn&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; 키워드는 두 가지 용도가 있습니다 컴파일러 (확인할 수 없습니다 계약의 존재를 선언하는 &lt;code&gt;unsafe fn&lt;/code&gt; 과 &lt;code&gt;unsafe trait&lt;/code&gt; ), 그리고 프로그래머가 이러한 계약이 확정 된 것을 확인했다고 선언 ( &lt;code&gt;unsafe {}&lt;/code&gt; 와 &lt;code&gt;unsafe impl&lt;/code&gt; 하지만, 또한 &lt;code&gt;unsafe fn&lt;/code&gt; 아래 참조). &lt;code&gt;unsafe fn&lt;/code&gt; 에서 볼 수 있듯이 상호 배타적이지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a346e1081bfa2911e1aa0fde6117ab4a081928a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unsafe&lt;/code&gt; qualifier indicates that the type's value is an &lt;a href=&quot;../unsafe-functions&quot;&gt;unsafe function&lt;/a&gt;, and the &lt;code&gt;extern&lt;/code&gt; qualifier indicates it is an &lt;a href=&quot;../items/functions#extern-function-qualifier&quot;&gt;extern function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; 규정이 타입의 값이 있음을 나타내는 &lt;a href=&quot;../unsafe-functions&quot;&gt;안전 기능&lt;/a&gt; 및 &lt;code&gt;extern&lt;/code&gt; 규정은 그것이하다고되어 &lt;a href=&quot;../items/functions#extern-function-qualifier&quot;&gt;통근 기능&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="994e471fd3da940319d1417edcfca60d6a3db828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unsafe&lt;/code&gt; qualifier indicates that the type's value is an &lt;a href=&quot;../unsafe-functions&quot;&gt;unsafe function&lt;/a&gt;, and the &lt;code&gt;extern&lt;/code&gt; qualifier indicates it is an &lt;a href=&quot;../items/functions#extern-functions&quot;&gt;extern function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; 규정이 타입의 값이 있음을 나타내는 &lt;a href=&quot;../unsafe-functions&quot;&gt;안전 기능&lt;/a&gt; 및 &lt;code&gt;extern&lt;/code&gt; 규정은 그것이하다고되어 &lt;a href=&quot;../items/functions#extern-functions&quot;&gt;통근 기능&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="78ba9e0cc65cc7840eaadd16f98f7cca440cd4f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unwind&lt;/code&gt; attribute was malformed.</source>
          <target state="translated">&lt;code&gt;unwind&lt;/code&gt; 속성의 형식이 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="a60fd78a94b551f1746c4a391dd52899994edd99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;used&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;used&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="762cbbe7d454d7148fa1b85ecdd6dd222c5646ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;usize&lt;/code&gt; type is an unsigned integer type with the same number of bits as the platform's pointer type. It can represent every memory address in the process.</source>
          <target state="translated">&lt;code&gt;usize&lt;/code&gt; 의 타입 플랫폼의 포인터 타입과 동일한 수의 비트를 갖는 부호없는 정수 형태이다. 프로세스의 모든 메모리 주소를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca7074c2679596c96e2d40f1a9e7060f1f83b71a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; field is of type &lt;code&gt;Option&amp;lt;u32&amp;gt;&lt;/code&gt;. Before we execute the closure, &lt;code&gt;value&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt;. When code using a &lt;code&gt;Cacher&lt;/code&gt; asks for the &lt;em&gt;result&lt;/em&gt; of the closure, the &lt;code&gt;Cacher&lt;/code&gt; will execute the closure at that time and store the result within a &lt;code&gt;Some&lt;/code&gt; variant in the &lt;code&gt;value&lt;/code&gt; field. Then if the code asks for the result of the closure again, instead of executing the closure again, the &lt;code&gt;Cacher&lt;/code&gt; will return the result held in the &lt;code&gt;Some&lt;/code&gt; variant.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 필드는 유형이다 &lt;code&gt;Option&amp;lt;u32&amp;gt;&lt;/code&gt; . 클로저를 실행하기 전에 &lt;code&gt;value&lt;/code&gt; 는 &lt;code&gt;None&lt;/code&gt; 입니다. &lt;code&gt;Cacher&lt;/code&gt; 사용하는 코드 가 클로저 &lt;em&gt;결과&lt;/em&gt; 를 요청 하면, &lt;code&gt;Cacher&lt;/code&gt; 는 그 시점에 클로저를 실행하고 결과를 &lt;code&gt;value&lt;/code&gt; 필드 의 &lt;code&gt;Some&lt;/code&gt; 변형 내에 저장합니다 . 그런 다음 코드가 클로저 결과를 다시 요청하면 클로저를 다시 실행하는 대신 &lt;code&gt;Cacher&lt;/code&gt; 는 &lt;code&gt;Some&lt;/code&gt; 변형 에서 보유한 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5defa2a7e24b93d29be444c6bce3655062b73aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vtable&lt;/code&gt; customizes the behavior of a &lt;code&gt;Waker&lt;/code&gt; which gets created from a &lt;code&gt;RawWaker&lt;/code&gt;. For each operation on the &lt;code&gt;Waker&lt;/code&gt;, the associated function in the &lt;code&gt;vtable&lt;/code&gt; of the underlying &lt;code&gt;RawWaker&lt;/code&gt; will be called.</source>
          <target state="translated">&lt;code&gt;vtable&lt;/code&gt; a의 동작을 사용자 정의 &lt;code&gt;Waker&lt;/code&gt; A로부터 작성되는 &lt;code&gt;RawWaker&lt;/code&gt; 을 . &lt;code&gt;Waker&lt;/code&gt; 의 각 작업에 대해 기본 &lt;code&gt;RawWaker&lt;/code&gt; 의 &lt;code&gt;vtable&lt;/code&gt; 에있는 관련 함수 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="58deddf572f1c05716c0aff255109ee68c618f77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wasm_import_module&lt;/code&gt; key may be used to specify the &lt;a href=&quot;https://webassembly.github.io/spec/core/syntax/modules.html&quot;&gt;WebAssembly module&lt;/a&gt; name for the items within an &lt;code&gt;extern&lt;/code&gt; block when importing symbols from the host environment. The default module name is &lt;code&gt;env&lt;/code&gt; if &lt;code&gt;wasm_import_module&lt;/code&gt; is not specified.</source>
          <target state="translated">&lt;code&gt;wasm_import_module&lt;/code&gt; 의 키를 지정하는데 사용될 수있다 &lt;a href=&quot;https://webassembly.github.io/spec/core/syntax/modules.html&quot;&gt;WebAssembly 모듈&lt;/a&gt; 내의 항목 이름 &lt;code&gt;extern&lt;/code&gt; 호스트 환경에서 심볼을 가져올 때 블록. &lt;code&gt;wasm_import_module&lt;/code&gt; 이 지정되지 않은 경우 기본 모듈 이름은 &lt;code&gt;env&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="03b2e1ae71fdcbd9ffac8eca408ab8d4e8472f94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;label&lt;/code&gt; fields on &lt;code&gt;Button&lt;/code&gt; will differ from the fields on other components, such as a &lt;code&gt;TextField&lt;/code&gt; type, that might have those fields plus a &lt;code&gt;placeholder&lt;/code&gt; field instead. Each of the types we want to draw on the screen will implement the &lt;code&gt;Draw&lt;/code&gt; trait but will use different code in the &lt;code&gt;draw&lt;/code&gt; method to define how to draw that particular type, as &lt;code&gt;Button&lt;/code&gt; has here (without the actual GUI code, which is beyond the scope of this chapter). The &lt;code&gt;Button&lt;/code&gt; type, for instance, might have an additional &lt;code&gt;impl&lt;/code&gt; block containing methods related to what happens when a user clicks the button. These kinds of methods won&amp;rsquo;t apply to types like &lt;code&gt;TextField&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Button&lt;/code&gt; 의 &lt;code&gt;width&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; 및 &lt;code&gt;label&lt;/code&gt; 필드 는 &lt;code&gt;TextField&lt;/code&gt; 유형 과 같은 다른 구성 요소의 필드와 다른 필드 및 &lt;code&gt;placeholder&lt;/code&gt; 필드 가있는 필드와 다릅니다 . 우리가 화면에 그리려는 각 유형은 &lt;code&gt;Draw&lt;/code&gt; 특성 을 구현 하지만 &lt;code&gt;Button&lt;/code&gt; 이 여기에있는 것처럼 (범위를 벗어난 실제 GUI 코드없이) 특정 유형을 그리는 방법을 정의하기 위해 &lt;code&gt;draw&lt;/code&gt; 메소드 에서 다른 코드 를 사용합니다 이 장의). &lt;code&gt;Button&lt;/code&gt; 타입은, 예를 들어, 추가 할 수도 있습니다 &lt;code&gt;impl&lt;/code&gt; 사용자가 버튼을 클릭 할 때 발생하는 것과 관련된 방법을 포함하는 블록. 이러한 종류의 메소드는 &lt;code&gt;TextField&lt;/code&gt; 와 같은 유형에는 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="49fef96b0756f10c5fd5c7fedcccb9ee963b501d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;windows_subsystem&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;windows_subsystem&lt;/code&gt; 의 속성</target>
        </trans-unit>
        <trans-unit id="fe674a5495eedc22d7ae598194abec96fa238a33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; function takes an output stream, and an &lt;code&gt;Arguments&lt;/code&gt; struct that can be precompiled with the &lt;code&gt;format_args!&lt;/code&gt; macro.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 기능은 출력 스트림을 얻어, 및 &lt;code&gt;Arguments&lt;/code&gt; 프리 컴파일 될 수있는 구조체 &lt;code&gt;format_args!&lt;/code&gt; 매크로.</target>
        </trans-unit>
        <trans-unit id="5644d7245fdec36266e15ee66f56202b01bc587d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x&lt;/code&gt; part is a pattern! As we did with &lt;code&gt;let&lt;/code&gt;, we could match a tuple in a function&amp;rsquo;s arguments to the pattern. Listing 18-7 splits the values in a tuple as we pass it to a function.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 부분은 패턴이다! &lt;code&gt;let&lt;/code&gt; 으로 했던 것처럼 함수 인수의 튜플을 패턴과 일치시킬 수 있습니다. 코드 18-7은 값을 함수에 전달할 때 튜플의 값을 분할합니다.</target>
        </trans-unit>
        <trans-unit id="90c7cb6860c6df5927660a73f110e2f9166750a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x&lt;/code&gt; value is moved into the closure when the closure is defined, because we added the &lt;code&gt;move&lt;/code&gt; keyword. The closure then has ownership of &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;main&lt;/code&gt; isn&amp;rsquo;t allowed to use &lt;code&gt;x&lt;/code&gt; anymore in the &lt;code&gt;println!&lt;/code&gt; statement. Removing &lt;code&gt;println!&lt;/code&gt; will fix this example.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 폐쇄를 정의 할 때 우리는 추가 때문에 값이 폐쇄로 이동 &lt;code&gt;move&lt;/code&gt; 키워드를. 폐쇄는 다음의 소유권이 &lt;code&gt;x&lt;/code&gt; 하고, &lt;code&gt;main&lt;/code&gt; 사용 용도에 사용할 수 없습니다 &lt;code&gt;x&lt;/code&gt; 에 더 이상 &lt;code&gt;println!&lt;/code&gt; 성명서. &lt;code&gt;println!&lt;/code&gt; 제거하는 중 ! 이 예제를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="693d3b957625a8e3df8f4384a832c7be5cfa15d0" translate="yes" xml:space="preserve">
          <source>The &lt;em id=&quot;the-tests-directory&quot;&gt;tests&lt;/em&gt; Directory</source>
          <target state="translated">는 &lt;em id=&quot;the-tests-directory&quot;&gt;테스트&lt;/em&gt; 디렉토리</target>
        </trans-unit>
        <trans-unit id="2382217293f35827ef839ef57a6e0636f3faa56f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;automatically_derived&lt;/code&gt; attribute&lt;/em&gt; is automatically added to &lt;a href=&quot;../items/implementations&quot;&gt;implementations&lt;/a&gt; created by the &lt;code&gt;derive&lt;/code&gt; attribute for built-in traits. It has no direct effect, but it may be used by tools and diagnostic lints to detect these automatically generated implementations.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;automatically_derived&lt;/code&gt; 속성이&lt;/em&gt; 자동으로 추가됩니다 &lt;a href=&quot;../items/implementations&quot;&gt;구현&lt;/a&gt; 에 의해 생성 된 &lt;code&gt;derive&lt;/code&gt; 에 대한 속성 내장 특성. 직접적인 영향은 없지만 자동으로 생성 된 구현을 감지하기 위해 도구 및 진단 린트에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d372f8b0a676dc2ae354b920b56c31e1ed0230f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;cold&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;attribute&lt;/a&gt;&lt;/em&gt; suggests that the attributed function is unlikely to be called.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;cold&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;속성은&lt;/a&gt;&lt;/em&gt; 특성 사용 함수가 호출 될 가능성이 있음을 시사한다.</target>
        </trans-unit>
        <trans-unit id="c8dd94fd6bb692bd54e04ee95744533de367bad8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;crate_name&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt;&lt;/em&gt; may be applied at the crate level to specify the name of the crate with the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;crate_name&lt;/code&gt; 의 &lt;a href=&quot;attributes&quot;&gt;특성&lt;/a&gt;&lt;/em&gt; 와 상자의 이름 지정 상자 레벨에 적용될 수있다 &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 구문.</target>
        </trans-unit>
        <trans-unit id="2db8e6439808a243c5fa24e648c2e0fab8ef4d83" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;deprecated&lt;/code&gt; attribute&lt;/em&gt; marks an item as deprecated. &lt;code&gt;rustc&lt;/code&gt; will issue warnings on usage of &lt;code&gt;#[deprecated]&lt;/code&gt; items. &lt;code&gt;rustdoc&lt;/code&gt; will show item deprecation, including the &lt;code&gt;since&lt;/code&gt; version and &lt;code&gt;note&lt;/code&gt;, if available.</source>
          <target state="translated">더 &lt;em&gt; &lt;code&gt;deprecated&lt;/code&gt; 속성&lt;/em&gt; 은 항목을 더 &lt;em&gt;이상 사용되지 않는&lt;/em&gt;&lt;em&gt; 것으로&lt;/em&gt; 표시합니다. &lt;code&gt;rustc&lt;/code&gt; 는 &lt;code&gt;#[deprecated]&lt;/code&gt; 항목 사용에 대한 경고를 발행 합니다. &lt;code&gt;rustdoc&lt;/code&gt; 은 &lt;code&gt;since&lt;/code&gt; 버전 및 &lt;code&gt;note&lt;/code&gt; 를 포함하여 사용되지 않는 항목을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="fa15bab6a083f19d9ae9cd7eaa338e697eaf4832" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;derive&lt;/code&gt; attribute&lt;/em&gt; allows new &lt;a href=&quot;../items&quot;&gt;items&lt;/a&gt; to be automatically generated for data structures. It uses the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListPaths&lt;/em&gt;&lt;/a&gt; syntax to specify a list of traits to implement or paths to &lt;a href=&quot;../procedural-macros#derive-macros&quot;&gt;derive macros&lt;/a&gt; to process.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;derive&lt;/code&gt; 속성은&lt;/em&gt; 새로운 수 있습니다 &lt;a href=&quot;../items&quot;&gt;항목이&lt;/a&gt; 자동으로 데이터 구조를 생성 할 수 있습니다. 그것은 사용 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListPaths의&lt;/em&gt;&lt;/a&gt; 에 구현하는 특성 또는 경로의 목록을 지정하는 구문을 &lt;a href=&quot;../procedural-macros#derive-macros&quot;&gt;파생 매크로&lt;/a&gt; 프로세스를.</target>
        </trans-unit>
        <trans-unit id="a97c3213ab817ab892d8f6e5c3157736e74b3b32" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;export_name&lt;/code&gt; attribute&lt;/em&gt; specifies the name of the symbol that will be exported on a &lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; or &lt;a href=&quot;items/static-items&quot;&gt;static&lt;/a&gt;. It uses the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify the symbol name.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;export_name&lt;/code&gt; 의 특성&lt;/em&gt; (A)에 내보낼 심볼 이름 지정 &lt;a href=&quot;items/functions&quot;&gt;기능&lt;/a&gt; 또는 &lt;a href=&quot;items/static-items&quot;&gt;정적&lt;/a&gt; . 그것은 사용 &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 심볼 이름을 지정하는 구문을.</target>
        </trans-unit>
        <trans-unit id="9d1fbcf19af41adeefc0b92335ae4b007c4dadfa" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;global_allocator&lt;/code&gt; attribute&lt;/em&gt; is used on a &lt;a href=&quot;items/static-items&quot;&gt;static item&lt;/a&gt; implementing the &lt;a href=&quot;https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html&quot;&gt;&lt;code&gt;GlobalAlloc&lt;/code&gt;&lt;/a&gt; trait to set the global allocator.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;global_allocator&lt;/code&gt; 의 속성은&lt;/em&gt; A의 사용 &lt;a href=&quot;items/static-items&quot;&gt;정적 항목을&lt;/a&gt; 구현하는 &lt;a href=&quot;https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html&quot;&gt; &lt;code&gt;GlobalAlloc&lt;/code&gt; 에&lt;/a&gt; 글로벌 할당을 설정하는 특성을.</target>
        </trans-unit>
        <trans-unit id="eb4af8649334dd85e9ba7979a0a444e3961c900a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;inline&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;attribute&lt;/a&gt;&lt;/em&gt; suggests that a copy of the attributed function should be placed in the caller, rather than generating code to call the function where it is defined.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;inline&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;속성&lt;/a&gt;&lt;/em&gt; 특성 사용 함수의 사본 오히려 정의 된 함수를 호출하는 코드를 생성하기보다는, 발신자에 배치되어야 함을 제안한다.</target>
        </trans-unit>
        <trans-unit id="1d9a7b1456b98dca1d8fed53edde3318db90e4c5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;link&lt;/code&gt; attribute&lt;/em&gt; specifies the name of a native library that the compiler should link with for the items within an &lt;code&gt;extern&lt;/code&gt; block. It uses the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify its inputs. The &lt;code&gt;name&lt;/code&gt; key is the name of the native library to link. The &lt;code&gt;kind&lt;/code&gt; key is an optional value which specifies the kind of library with the following possible values:</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;link&lt;/code&gt; 속성은&lt;/em&gt; 컴파일러가 내 항목과 연결해야하는 기본 라이브러리의 이름을 지정 &lt;code&gt;extern&lt;/code&gt; 블록을. 그것은 사용 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListNameValueStr에&lt;/em&gt;&lt;/a&gt; 의 입력을 지정하는 구문을. &lt;code&gt;name&lt;/code&gt; 키 링크 네이티브 라이브러리의 이름입니다. &lt;code&gt;kind&lt;/code&gt; 키 값을 가질 수 라이브러리의 종류를 지정하는 임의의 값이다 :</target>
        </trans-unit>
        <trans-unit id="6603167a8a5aa9df2deb989c68e33b760144ac17" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;link_section&lt;/code&gt; attribute&lt;/em&gt; specifies the section of the object file that a &lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; or &lt;a href=&quot;items/static-items&quot;&gt;static&lt;/a&gt;'s content will be placed into. It uses the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify the section name.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;link_section&lt;/code&gt; 의 특성&lt;/em&gt; 하는 대상 파일의 부분 지정 &lt;a href=&quot;items/functions&quot;&gt;기능&lt;/a&gt; 또는 &lt;a href=&quot;items/static-items&quot;&gt;정적&lt;/a&gt; 의 콘텐츠에 배치 될 것이다. 그것은 사용 &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 섹션 이름을 지정하는 구문을.</target>
        </trans-unit>
        <trans-unit id="806935dfacd2a07be8b57f073dcdf39509c2b1f7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;macro_use&lt;/code&gt; attribute&lt;/em&gt; has two purposes. First, it can be used to make a module's macro scope not end when the module is closed, by applying it to a module:</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;macro_use&lt;/code&gt; 의 속성은&lt;/em&gt; 두 가지 목적이있다. 먼저, 모듈에 모듈을 적용하여 모듈을 닫을 때 모듈의 매크로 범위가 끝나지 않도록하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05f0042fe91a37001bd65ea0d74fd9143e55659c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;must_use&lt;/code&gt; attribute&lt;/em&gt; is used to issue a diagnostic warning when a value is not &quot;used&quot;. It can be applied to user-defined composite types (&lt;a href=&quot;../items/structs&quot;&gt;&lt;code&gt;struct&lt;/code&gt;s&lt;/a&gt;, &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt;s&lt;/a&gt;, and &lt;a href=&quot;../items/unions&quot;&gt;&lt;code&gt;union&lt;/code&gt;s&lt;/a&gt;), &lt;a href=&quot;../items/functions&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../items/traits&quot;&gt;traits&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;must_use&lt;/code&gt; 의 속성은&lt;/em&gt; 값이 &quot;사용&quot;하지 않는 경우 진단 경고를 발행하는 데 사용됩니다. 이는 사용자 정의 복합 형 (적용 할 수있다 &lt;a href=&quot;../items/structs&quot;&gt; &lt;code&gt;struct&lt;/code&gt; 들&lt;/a&gt; , &lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; 들&lt;/a&gt; 및 &lt;a href=&quot;../items/unions&quot;&gt; &lt;code&gt;union&lt;/code&gt; 들&lt;/a&gt; ), &lt;a href=&quot;../items/functions&quot;&gt;기능&lt;/a&gt; 및 &lt;a href=&quot;../items/traits&quot;&gt;특성&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="df0d5b935c63e0d5d09ad34649237d79db006af9" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;no_builtins&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;attribute&lt;/a&gt;&lt;/em&gt; may be applied at the crate level to disable optimizing certain code patterns to invocations of library functions that are assumed to exist.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;no_builtins&lt;/code&gt; 의 &lt;a href=&quot;../attributes&quot;&gt;속성이&lt;/a&gt;&lt;/em&gt; 존재하는 가정 라이브러리 함수의 호출을 비활성화 최적화 특정 코드 패턴에 상자 수준에서 적용 할 수있다.</target>
        </trans-unit>
        <trans-unit id="1c5fb5c17e1ae5e93c491f3ff3864f7cf3700a82" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;no_link&lt;/code&gt; attribute&lt;/em&gt; may be specified on an &lt;code&gt;extern crate&lt;/code&gt; item to prevent linking the crate into the output. This is commonly used to load a crate to access only its macros.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;no_link&lt;/code&gt; 특성&lt;/em&gt; 온 지정할 수 &lt;code&gt;extern crate&lt;/code&gt; 출력에 연결 상자 방지하는 항목. 이것은 일반적으로 상자에만 적재하여 매크로에만 접근하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a894d89850015842793e60fc8f351c2309ee5ef4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;no_main&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt;&lt;/em&gt; may be applied at the crate level to disable emitting the &lt;code&gt;main&lt;/code&gt; symbol for an executable binary. This is useful when some other object being linked to defines &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;no_main&lt;/code&gt; 의 &lt;a href=&quot;attributes&quot;&gt;특성은&lt;/a&gt;&lt;/em&gt; 발광 비활성화 크레이트 레벨에 적용될 수있다 &lt;code&gt;main&lt;/code&gt; 실행 파일에 대한 이진 심볼. 이것은 연결된 다른 객체가 &lt;code&gt;main&lt;/code&gt; 을 정의 할 때 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="f3bcfb88f5c979d523b3f1a38c5f5b56a611b895" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;no_mangle&lt;/code&gt; attribute&lt;/em&gt; may be used on any &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; to disable standard symbol name mangling. The symbol for the item will be the identifier of the item's name.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;no_mangle&lt;/code&gt; 속성은&lt;/em&gt; 어떤에서 사용할 수 있습니다 &lt;a href=&quot;items&quot;&gt;항목을&lt;/a&gt; 비활성화 표준 기호 이름 맹 글링합니다. 항목의 기호는 항목 이름의 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="53a982d72d2f0894ccb0ac1653ff149a9b51224c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;panic_handler&lt;/code&gt; attribute&lt;/em&gt; can only be applied to a function with signature &lt;code&gt;fn(&amp;amp;PanicInfo) -&amp;gt; !&lt;/code&gt;. The function marked with this &lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; defines the behavior of panics. The &lt;a href=&quot;https://doc.rust-lang.org/core/panic/struct.PanicInfo.html&quot;&gt;&lt;code&gt;PanicInfo&lt;/code&gt;&lt;/a&gt; struct contains information about the location of the panic. There must be a single &lt;code&gt;panic_handler&lt;/code&gt; function in the dependency graph of a binary, dylib or cdylib crate.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;panic_handler&lt;/code&gt; 의 속성&lt;/em&gt; 에만 서명과 함수에 적용 할 수있는 &lt;code&gt;fn(&amp;amp;PanicInfo) -&amp;gt; !&lt;/code&gt; . 이 &lt;a href=&quot;attributes&quot;&gt;속성으로&lt;/a&gt; 표시된 기능 은 패닉의 동작을 정의합니다. &lt;a href=&quot;https://doc.rust-lang.org/core/panic/struct.PanicInfo.html&quot;&gt; &lt;code&gt;PanicInfo&lt;/code&gt; 의&lt;/a&gt; 구조체는 공황의 위치에 대한 정보가 포함되어 있습니다. 이진, dylib 또는 cdylib 상자의 종속성 그래프 에는 단일 &lt;code&gt;panic_handler&lt;/code&gt; 함수 가 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="12cdf01a779d8c77135d5a609c4b4e6849f40d6f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;recursion_limit&lt;/code&gt; attribute&lt;/em&gt; may be applied at the &lt;a href=&quot;../crates-and-source-files&quot;&gt;crate&lt;/a&gt; level to set the maximum depth for potentially infinitely-recursive compile-time operations like macro expansion or auto-dereference. It uses the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify the recursion depth.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;recursion_limit&lt;/code&gt; 의 속성은&lt;/em&gt; 상기 적용될 수 &lt;a href=&quot;../crates-and-source-files&quot;&gt;크레이트&lt;/a&gt; 매크로 확장 또는 자동 역 참조와 같은 잠재적으로 무한히 반복적 컴파일시 동작에 대한 최대 깊이를 설정하는 단계. 그것은 사용 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 재귀 수준을 지정하는 구문을.</target>
        </trans-unit>
        <trans-unit id="a7c71f7f4ce5a08ecec5e3cb423add9b9986d9b2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;target_feature&lt;/code&gt; &lt;a href=&quot;../attributes&quot;&gt;attribute&lt;/a&gt;&lt;/em&gt; may be applied to an &lt;a href=&quot;../unsafe-functions&quot;&gt;unsafe function&lt;/a&gt; to enable code generation of that function for specific platform architecture features. It uses the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListNameValueStr&lt;/em&gt;&lt;/a&gt; syntax with a single key of &lt;code&gt;enable&lt;/code&gt; whose value is a string of comma-separated feature names to enable.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;target_feature&lt;/code&gt; 의 &lt;a href=&quot;../attributes&quot;&gt;속성은&lt;/a&gt;&lt;/em&gt; 에 적용 할 수 있습니다 &lt;a href=&quot;../unsafe-functions&quot;&gt;안전하지 않은 기능&lt;/a&gt; 특정 플랫폼 아키텍처 기능에 대한 그 함수의 코드 생성을 가능하게 할 수 있습니다. 이 값은 &lt;code&gt;enable&lt;/code&gt; 단일 쉼표로 구분 된 기능 이름의 문자열 인 단일 키 enable 과 함께 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListNameValueStr&lt;/em&gt;&lt;/a&gt; 구문 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3aa1c2ce8a0a269a928c5414e9b6749a40da4909" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;test&lt;/code&gt; attribute&lt;/em&gt; marks a function to be executed as a test. These functions are only compiled when in test mode. Test functions must be free, monomorphic functions that take no arguments, and the return type must be one of the following:</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;test&lt;/code&gt; 속성&lt;/em&gt; 은 &lt;em&gt;테스트&lt;/em&gt; 로 실행될 기능을 표시합니다. 이 기능은 테스트 모드에서만 컴파일됩니다. 테스트 함수는 인수를 사용하지 않는 자유롭고 단일 한 함수 여야하며 리턴 유형은 다음 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="8e32e2a7306abe757340b9bbe77da987dbdce7fd" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;type_length_limit&lt;/code&gt; attribute&lt;/em&gt; limits the maximum number of type substitutions made when constructing a concrete type during monomorphization. It is applied at the &lt;a href=&quot;../crates-and-source-files&quot;&gt;crate&lt;/a&gt; level, and uses the &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to set the limit based on the number of type substitutions.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;type_length_limit&lt;/code&gt; 속성&lt;/em&gt; 은 &lt;em&gt;단형 화&lt;/em&gt; 중에 콘크리트 유형을 구성 할 때 수행되는 최대 유형 대체 수를 제한합니다. &lt;a href=&quot;../crates-and-source-files&quot;&gt;크레이트&lt;/a&gt; 수준 에서 적용되며 &lt;a href=&quot;../attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; 구문을 사용하여 유형 대체 수에 따라 한계를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="6e74f839ef9f1efad1a8f9c7c9bbeff2f9cc5cae" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;used&lt;/code&gt; attribute&lt;/em&gt; can only be applied to &lt;a href=&quot;items/static-items&quot;&gt;&lt;code&gt;static&lt;/code&gt; items&lt;/a&gt;. This &lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; forces the compiler to keep the variable in the output object file (.o, .rlib, etc. excluding final binaries) even if the variable is not used, or referenced, by any other item in the crate. However, the linker is still free to remove such an item.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;used&lt;/code&gt; 속성&lt;/em&gt; 에만 적용 할 수있는 &lt;a href=&quot;items/static-items&quot;&gt; &lt;code&gt;static&lt;/code&gt; 항목&lt;/a&gt; . 이 &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 은 변수가 크레이트의 다른 항목에서 사용되지 않거나 참조되지 않더라도 컴파일러가 출력 개체 파일 (최종 바이너리를 제외한 .o, .rlib 등)에 변수를 유지하도록합니다. 그러나 링커는 이러한 항목을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9f3929d821839852e44df6684413a39c02b618f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;used&lt;/code&gt; attribute&lt;/em&gt; can only be applied to &lt;a href=&quot;items/static-items&quot;&gt;&lt;code&gt;static&lt;/code&gt; items&lt;/a&gt;. This &lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; forces the compiler to keep the variable in the output object file (.o, .rlib, etc.) even if the variable is not used, or referenced, by any other item in the crate.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;used&lt;/code&gt; 속성&lt;/em&gt; 에만 적용 할 수있는 &lt;a href=&quot;items/static-items&quot;&gt; &lt;code&gt;static&lt;/code&gt; 항목&lt;/a&gt; . 이 &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 은 변수가 상자의 다른 항목에 의해 사용되거나 참조되지 않더라도 컴파일러가 변수를 출력 객체 파일 (.o, .rlib 등)에 유지하도록합니다.</target>
        </trans-unit>
        <trans-unit id="cabd9dd1fe1f065b8657354c25edb014ad53f468" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;code&gt;windows_subsystem&lt;/code&gt; attribute&lt;/em&gt; may be applied at the crate level to set the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx&quot;&gt;subsystem&lt;/a&gt; when linking on a Windows target. It uses the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr&lt;/em&gt;&lt;/a&gt; syntax to specify the subsystem with a value of either &lt;code&gt;console&lt;/code&gt; or &lt;code&gt;windows&lt;/code&gt;. This attribute is ignored on non-Windows targets, and for non-&lt;code&gt;bin&lt;/code&gt;&lt;a href=&quot;linkage&quot;&gt;crate types&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;windows_subsystem&lt;/code&gt; 의 속성&lt;/em&gt; 세트에 나무 상자 수준에서 적용 할 수있다 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx&quot;&gt;서브 시스템을&lt;/a&gt; 윈도우 대상에 연결할 때. 그것은 사용 &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaNameValueStr의&lt;/em&gt;&lt;/a&gt; 하나의 값으로 서브 시스템을 지정하는 구문을 &lt;code&gt;console&lt;/code&gt; 이나 &lt;code&gt;windows&lt;/code&gt; . 이 속성은 비 Windows 대상에서 무시하고 비 대한되는 &lt;code&gt;bin&lt;/code&gt; &lt;a href=&quot;linkage&quot;&gt;상자 유형&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="637d9dddc1ad4617a0c58ddffc3922ae87e9baab" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;alignment&lt;/em&gt; of a value specifies what addresses are valid to store the value at. A value of alignment &lt;code&gt;n&lt;/code&gt; must only be stored at an address that is a multiple of n. For example, a value with an alignment of 2 must be stored at an even address, while a value with an alignment of 1 can be stored at any address. Alignment is measured in bytes, and must be at least 1, and always a power of 2. The alignment of a value can be checked with the &lt;a href=&quot;../std/mem/fn.align_of_val&quot;&gt;&lt;code&gt;align_of_val&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">값 의 &lt;em&gt;정렬&lt;/em&gt; 은 값을 저장할 수있는 주소를 지정합니다. 정렬 &lt;code&gt;n&lt;/code&gt; 값은 n 의 배수 인 주소에만 저장해야합니다. 예를 들어, 정렬이 2 인 값은 짝수 주소에 저장되어야하고, 정렬이 1 인 값은 모든 주소에 저장 될 수 있습니다. 정렬은 바이트 단위로 측정되며 1 이상이어야하며 항상 2의 &lt;a href=&quot;../std/mem/fn.align_of_val&quot;&gt; &lt;code&gt;align_of_val&lt;/code&gt; &lt;/a&gt; 합니다. 값의 정렬은 align_of_val 함수 로 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="caa4287ee2eae29f4b7097731528e2f984499328" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;at&lt;/em&gt; operator (&lt;code&gt;@&lt;/code&gt;) lets us create a variable that holds a value at the same time we&amp;rsquo;re testing that value to see whether it matches a pattern. Listing 18-29 shows an example where we want to test that a &lt;code&gt;Message::Hello&lt;/code&gt;&lt;code&gt;id&lt;/code&gt; field is within the range &lt;code&gt;3...7&lt;/code&gt;. But we also want to bind the value to the variable &lt;code&gt;id_variable&lt;/code&gt; so we can use it in the code associated with the arm. We could name this variable &lt;code&gt;id&lt;/code&gt;, the same as the field, but for this example we&amp;rsquo;ll use a different name.</source>
          <target state="translated">&lt;em&gt;에서&lt;/em&gt; 연산자 ( &lt;code&gt;@&lt;/code&gt; ) 우리가이 패턴과 일치 여부를 확인하기 위해 그 값을 테스트하는 동시에 값을 유지하는 변수를 만들 수 있습니다. Listing 18-29는 &lt;code&gt;Message::Hello&lt;/code&gt; &lt;code&gt;id&lt;/code&gt; 필드가 &lt;code&gt;3...7&lt;/code&gt; 범위 내에 있는지 테스트하려는 예제를 보여준다 . 그러나 값을 변수 &lt;code&gt;id_variable&lt;/code&gt; 에 바인딩 하여 arm과 관련된 코드에서 값을 사용할 수도 있습니다. 이 변수의 이름을 필드와 동일하게 &lt;code&gt;id&lt;/code&gt; 수 있지만이 예제에서는 다른 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6fe3095ea3510353b505863afd4ade90995e4e2e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;at&lt;/em&gt; operator (&lt;code&gt;@&lt;/code&gt;) lets us create a variable that holds a value at the same time we&amp;rsquo;re testing that value to see whether it matches a pattern. Listing 18-29 shows an example where we want to test that a &lt;code&gt;Message::Hello&lt;/code&gt;&lt;code&gt;id&lt;/code&gt; field is within the range &lt;code&gt;3..=7&lt;/code&gt;. But we also want to bind the value to the variable &lt;code&gt;id_variable&lt;/code&gt; so we can use it in the code associated with the arm. We could name this variable &lt;code&gt;id&lt;/code&gt;, the same as the field, but for this example we&amp;rsquo;ll use a different name.</source>
          <target state="translated">&lt;em&gt;에서&lt;/em&gt; 연산자 ( &lt;code&gt;@&lt;/code&gt; ) 우리가이 패턴과 일치 여부를 확인하기 위해 그 값을 테스트하는 동시에 값을 유지하는 변수를 만들 수 있습니다. Listing 18-29는 &lt;code&gt;Message::Hello&lt;/code&gt; &lt;code&gt;id&lt;/code&gt; 필드가 &lt;code&gt;3..=7&lt;/code&gt; 범위 내에 있는지 테스트하려는 예제를 보여줍니다 . 그러나 우리는 또한 값을 변수 &lt;code&gt;id_variable&lt;/code&gt; 에 바인딩 하여 팔과 관련된 코드에서 사용할 수 있기를 원합니다 . 이 변수의 이름을 필드와 동일하게 &lt;code&gt;id&lt;/code&gt; 수 있지만이 예에서는 다른 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="491e011fde2c63e7287e5968a958f99a0e0608ea" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;backslash escape&lt;/em&gt; is the character &lt;code&gt;U+005C&lt;/code&gt; (&lt;code&gt;\&lt;/code&gt;) which must be escaped in order to denote its ASCII encoding &lt;code&gt;0x5C&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;백 슬래시 이스케이프는&lt;/em&gt; 문자 인 &lt;code&gt;U+005C&lt;/code&gt; ( &lt;code&gt;\&lt;/code&gt; 의 ASCII 인코딩 나타 내기 위해 이스케이프해야합니다) &lt;code&gt;0x5C&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e78bebf05e1ce9e264a960c4a634448ed6a163c1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;backslash escape&lt;/em&gt; is the character &lt;code&gt;U+005C&lt;/code&gt; (&lt;code&gt;\&lt;/code&gt;) which must be escaped in order to denote itself.</source>
          <target state="translated">&lt;em&gt;백 슬래시 이스케이프는&lt;/em&gt; 문자 인 &lt;code&gt;U+005C&lt;/code&gt; ( &lt;code&gt;\&lt;/code&gt; 자체를 나타 내기 위해 이스케이프해야합니다).</target>
        </trans-unit>
        <trans-unit id="863e56925d2ff8675a4dd9c4a460d825a809b69e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;heap&lt;/em&gt; is a general term that describes boxes. The lifetime of an allocation in the heap depends on the lifetime of the box values pointing to it. Since box values may themselves be passed in and out of frames, or stored in the heap, heap allocations may outlive the frame they are allocated within. An allocation in the heap is guaranteed to reside at a single location in the heap for the whole lifetime of the allocation - it will never be relocated as a result of moving a box value.</source>
          <target state="translated">&lt;em&gt;힙&lt;/em&gt; 상자를 설명하는 일반적인 용어입니다. 힙에서 할당 수명은이를 가리키는 상자 값의 수명에 따라 다릅니다. 상자 값 자체가 프레임 안팎으로 전달되거나 힙에 저장 될 수 있으므로 힙 할당은 할당 된 프레임보다 오래 지속될 수 있습니다. 힙의 할당은 할당의 전체 수명 동안 힙의 단일 위치에 상주하게됩니다. 이는 상자 값을 이동 한 결과로 절대 재배치되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="21ffe4f08baa3ee5d8fcae0ac2b2640039bc170b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;items&lt;/em&gt; of a program are those functions, modules and types that have their value calculated at compile-time and stored uniquely in the memory image of the rust process. Items are neither dynamically allocated nor freed.</source>
          <target state="translated">프로그램 의 &lt;em&gt;항목&lt;/em&gt; 은 컴파일 타임에 계산되고 녹 프로세스의 메모리 이미지에 고유하게 저장되는 기능, 모듈 및 유형입니다. 항목은 동적으로 할당되거나 해제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f297b31862071391a99da1af535c50f23bb4ea5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;items&lt;/em&gt; of a program are those functions, modules, and types that have their value calculated at compile-time and stored uniquely in the memory image of the rust process. Items are neither dynamically allocated nor freed.</source>
          <target state="translated">프로그램 의 &lt;em&gt;항목&lt;/em&gt; 은 컴파일 시간에 값이 계산되고 rust 프로세스의 메모리 이미지에 고유하게 저장되는 함수, 모듈 및 유형입니다. 항목은 동적으로 할당되거나 해제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="867bacda5c963969dd78331f878c031b22f73cbb" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;null escape&lt;/em&gt; is the character &lt;code&gt;U+0030&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;) and denotes the Unicode value &lt;code&gt;U+0000&lt;/code&gt; (NUL).</source>
          <target state="translated">&lt;em&gt;널 탈출&lt;/em&gt; 문자 인 &lt;code&gt;U+0030&lt;/code&gt; ( &lt;code&gt;0&lt;/code&gt; )과 유니 코드 값을 나타내고, &lt;code&gt;U+0000&lt;/code&gt; (NUL 참조).</target>
        </trans-unit>
        <trans-unit id="c0460a3f4832868522908bad2876d5f8fef36d49" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;null escape&lt;/em&gt; is the character &lt;code&gt;U+0030&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;) and denotes the byte value &lt;code&gt;0x00&lt;/code&gt; (ASCII NUL).</source>
          <target state="translated">&lt;em&gt;널 탈출&lt;/em&gt; 문자 인 &lt;code&gt;U+0030&lt;/code&gt; ( &lt;code&gt;0&lt;/code&gt; )와 바이트 값 의미 &lt;code&gt;0x00&lt;/code&gt; 으로 (ASCII의 NUL 참조).</target>
        </trans-unit>
        <trans-unit id="b4b356718e399f8a05dc4012731a26a28084f252" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;prelude&lt;/em&gt; is the list of things that Rust automatically imports into every Rust program. It's kept as small as possible, and is focused on things, particularly traits, which are used in almost every single Rust program.</source>
          <target state="translated">&lt;em&gt;전주곡은&lt;/em&gt; 사물의 목록입니다 모든 녹 프로그램에 녹 자동 수입. 가능한 한 작게 유지되며 거의 모든 Rust 프로그램에서 사용되는 특성, 특히 특성에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="c5fc79bf9688aa8e786959c2742e411818e5d89a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;primitive representations&lt;/em&gt; are the representations with the same names as the primitive integer types. That is: &lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;u16&lt;/code&gt;, &lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;u64&lt;/code&gt;, &lt;code&gt;u128&lt;/code&gt;, &lt;code&gt;usize&lt;/code&gt;, &lt;code&gt;i8&lt;/code&gt;, &lt;code&gt;i16&lt;/code&gt;, &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;i128&lt;/code&gt;, and &lt;code&gt;isize&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;원시적 인 표현은&lt;/em&gt; 원시 정수 타입과 동일한 이름을 가진 표현입니다. 즉 : &lt;code&gt;u8&lt;/code&gt; , &lt;code&gt;u16&lt;/code&gt; , &lt;code&gt;u32&lt;/code&gt; , &lt;code&gt;u64&lt;/code&gt; , &lt;code&gt;u128&lt;/code&gt; , &lt;code&gt;usize&lt;/code&gt; , &lt;code&gt;i8&lt;/code&gt; , &lt;code&gt;i16&lt;/code&gt; , &lt;code&gt;i32&lt;/code&gt; , &lt;code&gt;i64&lt;/code&gt; , &lt;code&gt;i128&lt;/code&gt; 및 &lt;code&gt;isize&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3ce8f949608b1daede8105623fa327eab5c410b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;rest pattern&lt;/em&gt; (the &lt;code&gt;..&lt;/code&gt; token) acts as a variable-length pattern which matches zero or more elements that haven't been matched already before and after. It may only be used in &lt;a href=&quot;#tuple-patterns&quot;&gt;tuple&lt;/a&gt;, &lt;a href=&quot;#tuple-struct-patterns&quot;&gt;tuple struct&lt;/a&gt;, and &lt;a href=&quot;#slice-patterns&quot;&gt;slice&lt;/a&gt; patterns, and may only appear once as one of the elements in those patterns. It is also allowed in an &lt;a href=&quot;#identifier-patterns&quot;&gt;identifier pattern&lt;/a&gt; for &lt;a href=&quot;#slice-patterns&quot;&gt;slice patterns&lt;/a&gt; only.</source>
          <target state="translated">&lt;em&gt;나머지 패턴&lt;/em&gt; 합니다 ( &lt;code&gt;..&lt;/code&gt; 토큰) 전후 아직 매칭되지 않은 영 이상의 요소와 일치하는, 가변 길이 패턴으로서 작용한다. 이는 단지 사용될 수있다 &lt;a href=&quot;#tuple-patterns&quot;&gt;튜플&lt;/a&gt; , &lt;a href=&quot;#tuple-struct-patterns&quot;&gt;튜플 구조체&lt;/a&gt; 및 &lt;a href=&quot;#slice-patterns&quot;&gt;슬라이스&lt;/a&gt; 패턴에만 그 패턴의 요소의 하나로서 한 번에 표시 할 수있다. 그것은 또한 허용되는 &lt;a href=&quot;#identifier-patterns&quot;&gt;식별자 패턴&lt;/a&gt; 에 대한 &lt;a href=&quot;#slice-patterns&quot;&gt;슬라이스 패턴&lt;/a&gt; 만.</target>
        </trans-unit>
        <trans-unit id="4971362f3b5f40470a74c81b64c44c61022c0ae5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;size&lt;/em&gt; of a value is the offset in bytes between successive elements in an array with that item type including alignment padding. The size of a value is always a multiple of its alignment. The size of a value can be checked with the &lt;a href=&quot;../std/mem/fn.size_of_val&quot;&gt;&lt;code&gt;size_of_val&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">값 의 &lt;em&gt;크기&lt;/em&gt; 는 정렬 패딩을 포함하여 해당 항목 유형의 배열에서 연속 요소 사이의 바이트 단위 오프셋입니다. 값의 크기는 항상 정렬의 배수입니다. &lt;a href=&quot;../std/mem/fn.size_of_val&quot;&gt; &lt;code&gt;size_of_val&lt;/code&gt; &lt;/a&gt; 함수 로 값의 크기를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="608607007d0795edd59e30f51aeabc80ca46b5f6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;state pattern&lt;/em&gt; is an object-oriented design pattern. The crux of the pattern is that a value has some internal state, which is represented by a set of &lt;em&gt;state objects&lt;/em&gt;, and the value&amp;rsquo;s behavior changes based on the internal state. The state objects share functionality: in Rust, of course, we use structs and traits rather than objects and inheritance. Each state object is responsible for its own behavior and for governing when it should change into another state. The value that holds a state object knows nothing about the different behavior of the states or when to transition between states.</source>
          <target state="translated">&lt;em&gt;상태 패턴은&lt;/em&gt; 객체 지향 디자인 패턴입니다. 패턴의 요점은 값에 &lt;em&gt;상태 객체&lt;/em&gt; 세트로 표시되는 내부 상태가 있고 내부 상태에 따라 값의 동작이 변경 된다는 것입니다 . 상태 객체는 기능을 공유합니다. 물론 Rust에서는 객체와 상속보다는 구조체와 특성을 사용합니다. 각 상태 개체는 자체 동작과 다른 상태로 변경 될시기를 관리합니다. 상태 객체를 보유하는 값은 상태의 다른 동작 또는 상태 간 전환시기에 대해 전혀 알지 못합니다.</target>
        </trans-unit>
        <trans-unit id="ec835310b404eed2cb3a60731c66a0fc7069cf96" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;successor&lt;/em&gt; operation moves towards values that compare greater. The &lt;em&gt;predecessor&lt;/em&gt; operation moves towards values that compare lesser.</source>
          <target state="translated">&lt;em&gt;후속&lt;/em&gt; 큰 값과 비교 연산을 향해 이동한다. &lt;em&gt;이전의&lt;/em&gt; 낮은 비교 값에 대한 작업을 이동합니다.</target>
        </trans-unit>
        <trans-unit id="71b31d9fd96bdd059ab3da8b882ee0c455f89891" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;temporary scope&lt;/em&gt; of an expression is the scope that is used for the temporary variable that holds the result of that expression when used in a &lt;a href=&quot;expressions#place-expressions-and-value-expressions&quot;&gt;place context&lt;/a&gt;, unless it is &lt;a href=&quot;destructors#constant-promotion&quot;&gt;promoted&lt;/a&gt;.</source>
          <target state="translated">표현식 의 &lt;em&gt;임시 범위&lt;/em&gt; 는 &lt;a href=&quot;destructors#constant-promotion&quot;&gt;승격&lt;/a&gt; 되지 않는 한 &lt;a href=&quot;expressions#place-expressions-and-value-expressions&quot;&gt;장소 컨텍스트&lt;/a&gt; 에서 사용될 때 해당 표현식의 결과를 보유하는 임시 변수에 사용되는 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="50c8131f661492ad3eb04d5338d01ccf9f429562" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;wildcard pattern&lt;/em&gt; (an underscore symbol) matches any value. It is used to ignore values when they don't matter. Inside other patterns it matches a single data field (as opposed to the &lt;code&gt;..&lt;/code&gt; which matches the remaining fields). Unlike identifier patterns, it does not copy, move or borrow the value it matches.</source>
          <target state="translated">&lt;em&gt;와일드 패턴&lt;/em&gt; (밑줄 심볼)의 값과 일치. 중요하지 않은 값을 무시하는 데 사용됩니다. 다른 패턴 내에서는 단일 데이터 필드 와 일치합니다 (나머지 필드와 일치하는 &lt;code&gt;..&lt;/code&gt; 와 반대 ). 식별자 패턴과 달리 일치하는 값을 복사, 이동 또는 차용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c707e6c38639fd82e39cc81120827bce74e177e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;wildcard pattern&lt;/em&gt; matches any value. It is used to ignore values when they don't matter. Inside other patterns it matches a single data field (as opposed to the &lt;code&gt;..&lt;/code&gt; which matches the remaining fields). Unlike identifier patterns, it does not copy, move or borrow the value it matches.</source>
          <target state="translated">&lt;em&gt;와일드 카드 패턴은&lt;/em&gt; 임의의 값과 일치합니다. 중요하지 않을 때 값을 무시하는 데 사용됩니다. 다른 패턴 내에서는 단일 데이터 필드 와 일치합니다 (나머지 필드와 일치하는 &lt;code&gt;..&lt;/code&gt; 와 반대 ). 식별자 패턴과 달리 일치하는 값을 복사, 이동 또는 차용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="75f0595163c83b48141e476739787cd1006a8d33" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;channel&lt;/strong&gt;'s sending half has become disconnected, and there will never be any more data received on it.</source>
          <target state="translated">&lt;strong&gt;채널은&lt;/strong&gt; '절반의 연결이 끊어되었다 보내는 S, 그것에받은 더 많은 데이터가 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7d020769b0b6d90680db8e09c6dc6e9b663dc909" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;compiler&lt;/strong&gt; reordering instructions: If the compiler can issue an instruction at an earlier point, it will try to do so. For example, it might hoist memory loads at the top of a code block, so that the CPU can start &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_prefetching&quot;&gt;prefetching&lt;/a&gt; the values from memory.</source>
          <target state="translated">&lt;strong&gt;컴파일러&lt;/strong&gt; 지침을 재정렬 : 컴파일러가 이전 시점에서 명령을 발행 할 수 있다면, 그것은 그렇게하려고합니다. 예를 들어, CPU가 메모리에서 값을 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_prefetching&quot;&gt;프리 페치&lt;/a&gt; 하기 시작할 수 있도록 코드 블록의 맨 위에 메모리로드를 들어 올릴 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="314b68cd7b660a21edb44d2117cd4a156ae245a5" translate="yes" xml:space="preserve">
          <source>The API documentation that &lt;code&gt;cargo doc&lt;/code&gt; generates for this crate will now list and link re-exports on the front page, as shown in Figure 14-4, making the &lt;code&gt;PrimaryColor&lt;/code&gt; and &lt;code&gt;SecondaryColor&lt;/code&gt; types and the &lt;code&gt;mix&lt;/code&gt; function easier to find.</source>
          <target state="translated">&lt;code&gt;cargo doc&lt;/code&gt; 상자가이 상자에 대해 생성 하는 API 문서 는 이제 그림 14-4에 표시된 것처럼 첫 페이지에 다시 내보내기를 나열하고 연결하여 &lt;code&gt;PrimaryColor&lt;/code&gt; 및 &lt;code&gt;SecondaryColor&lt;/code&gt; 유형과 &lt;code&gt;mix&lt;/code&gt; 기능을보다 쉽게 ​​찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe97d53a4341ff985473c7759453c7f0b6f51809" translate="yes" xml:space="preserve">
          <source>The API is typically used by acquiring a handle to the current thread, placing that handle in a shared data structure so that other threads can find it, and then &lt;code&gt;park&lt;/code&gt;ing in a loop. When some desired condition is met, another thread calls &lt;a href=&quot;struct.thread#method.unpark&quot;&gt;&lt;code&gt;unpark&lt;/code&gt;&lt;/a&gt; on the handle.</source>
          <target state="translated">API는 일반적으로 다른 스레드를 찾을 수 있도록 공유 데이터 구조에 그 핸들을 배치, 현재 스레드에 대한 핸들을 획득하여 사용하고있다 &lt;code&gt;park&lt;/code&gt; 루프에서 보내고. 원하는 조건이 충족되면 다른 스레드가 핸들에서 &lt;a href=&quot;struct.thread#method.unpark&quot;&gt; &lt;code&gt;unpark&lt;/code&gt; &lt;/a&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="bdef16eb0aad1c8443510daaf0eaf64f22da449f" translate="yes" xml:space="preserve">
          <source>The API of &lt;code id=&quot;the-api-of-mutext&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;the-api-of-mutext&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 의 API</target>
        </trans-unit>
        <trans-unit id="da2fca5419425bb1dfeff3a19e5e6b522b71b9f7" translate="yes" xml:space="preserve">
          <source>The Anatomy of a Test Function</source>
          <target state="translated">테스트 함수의 분석</target>
        </trans-unit>
        <trans-unit id="6ff9dd46af7ebe72f506f56aea2ffd15b7f82cfe" translate="yes" xml:space="preserve">
          <source>The Array Type</source>
          <target state="translated">배열 유형</target>
        </trans-unit>
        <trans-unit id="4c7fdb8a442bced7fcc6b743d86e4b178b1bc140" translate="yes" xml:space="preserve">
          <source>The Boolean Type</source>
          <target state="translated">부울 타입</target>
        </trans-unit>
        <trans-unit id="7a47e0b8b6b1bfa40f74993b9ed02984c335782d" translate="yes" xml:space="preserve">
          <source>The Boolean type, &lt;code&gt;bool&lt;/code&gt;, with values &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">부울 유형 &lt;code&gt;bool&lt;/code&gt; 은 &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; 값을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="d554fe4c508301c7dd79586706f031038650a679" translate="yes" xml:space="preserve">
          <source>The Borrow Checker</source>
          <target state="translated">차용 검사기</target>
        </trans-unit>
        <trans-unit id="706bc5bdd045092d3c34365727a87c607d4ff3a3" translate="yes" xml:space="preserve">
          <source>The C side must &lt;strong&gt;not&lt;/strong&gt; modify the length of the string (by writing a &lt;code&gt;NULL&lt;/code&gt; somewhere inside the string or removing the final one) before it makes it back into Rust using &lt;a href=&quot;struct.cstring#method.from_raw&quot;&gt;&lt;code&gt;CString::from_raw&lt;/code&gt;&lt;/a&gt;. See the safety section in &lt;a href=&quot;struct.cstring#method.from_raw&quot;&gt;&lt;code&gt;CString::from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C 측은 &lt;a href=&quot;struct.cstring#method.from_raw&quot;&gt; &lt;code&gt;CString::from_raw&lt;/code&gt; &lt;/a&gt; 사용하여 Rust로 다시 만들기 전에 문자열의 길이를 수정 해서는 &lt;strong&gt;안됩니다&lt;/strong&gt; (문자열 어딘가에 &lt;code&gt;NULL&lt;/code&gt; 을 쓰거나 마지막 문자열을 제거하여) . &lt;a href=&quot;struct.cstring#method.from_raw&quot;&gt; &lt;code&gt;CString::from_raw&lt;/code&gt; &lt;/a&gt; 의 안전 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="096fc2c3eb95fb5d0ee6aa092c0689c069929e6f" translate="yes" xml:space="preserve">
          <source>The C-main function only supports to return integers as return type. So, every type implementing the &lt;code&gt;Termination&lt;/code&gt; trait has to be converted to an integer.</source>
          <target state="translated">C-main 함수는 반환 유형으로 정수 반환 만 지원합니다. 따라서 &lt;code&gt;Termination&lt;/code&gt; 특성을 구현하는 모든 유형 은 정수로 변환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="da6976366f57ccb20ad430117c89098f7fb1348a" translate="yes" xml:space="preserve">
          <source>The C-variadic type &lt;code&gt;...&lt;/code&gt; has been nested inside another type.</source>
          <target state="translated">C-variadic 유형 &lt;code&gt;...&lt;/code&gt; 이 다른 유형 내에 중첩되었습니다.</target>
        </trans-unit>
        <trans-unit id="86641abf85c69d8c4f7c9c71c79144e3a2832005" translate="yes" xml:space="preserve">
          <source>The Character Type</source>
          <target state="translated">캐릭터 타입</target>
        </trans-unit>
        <trans-unit id="35e39875eebfabcb5b0b8cd30288767fc0b6add8" translate="yes" xml:space="preserve">
          <source>The Clippy tool is a collection of lints to analyze your code so you can catch common mistakes and improve your Rust code.</source>
          <target state="translated">Clippy 도구는 코드를 분석하여 일반적인 실수를 발견하고 Rust 코드를 개선 할 수있는 보풀 모음입니다.</target>
        </trans-unit>
        <trans-unit id="bb08bad287d0caba2752b58d322b62f2942d38e6" translate="yes" xml:space="preserve">
          <source>The Default Representation</source>
          <target state="translated">기본 표현</target>
        </trans-unit>
        <trans-unit id="f9e1a59444e395f067802b105261ac31a11eac66" translate="yes" xml:space="preserve">
          <source>The Difference Between Macros and Functions</source>
          <target state="translated">매크로와 함수의 차이점</target>
        </trans-unit>
        <trans-unit id="47f6987535ee435e225cb875fe024ba6f3b75e49" translate="yes" xml:space="preserve">
          <source>The Glob Operator</source>
          <target state="translated">글로벌 운영자</target>
        </trans-unit>
        <trans-unit id="a0a1aaf98c3bce57246183f1baadfe83da9b49cd" translate="yes" xml:space="preserve">
          <source>The HTML format is available online at &lt;a href=&quot;https://doc.rust-lang.org/stable/book/index.html&quot;&gt;https://doc.rust-lang.org/stable/book/&lt;/a&gt; and offline with installations of Rust made with &lt;code&gt;rustup&lt;/code&gt;; run &lt;code&gt;rustup docs --book&lt;/code&gt; to open.</source>
          <target state="translated">HTML 형식은 &lt;a href=&quot;https://doc.rust-lang.org/stable/book/index.html&quot;&gt;https://doc.rust-lang.org/stable/book/&lt;/a&gt; 에서 온라인으로 사용할 수 있으며 &lt;code&gt;rustup&lt;/code&gt; 으로 만든 Rust를 설치하면 오프라인으로 사용할 수 있습니다 . &lt;code&gt;rustup docs --book&lt;/code&gt; to open을 실행 하십시오 .</target>
        </trans-unit>
        <trans-unit id="00df77514c97d921fca4a972435309219a163a06" translate="yes" xml:space="preserve">
          <source>The I/O Prelude</source>
          <target state="translated">I / O 서곡</target>
        </trans-unit>
        <trans-unit id="6979c051972c7d2da3658847fabbf6a31d84bdb5" translate="yes" xml:space="preserve">
          <source>The I/O operation's timeout expired, causing it to be canceled.</source>
          <target state="translated">I / O 조작의 시간 종료가 만료되어 취소되었습니다.</target>
        </trans-unit>
        <trans-unit id="dc9c14a7eb4854c512e7ed69d5ba6a43f9c253aa" translate="yes" xml:space="preserve">
          <source>The IEEE 754-2008 &quot;binary32&quot; and &quot;binary64&quot; floating-point types are &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt;, respectively.</source>
          <target state="translated">는 IEEE 754-2008 &quot;binary32&quot;와 &quot;binary64&quot;부동 소수점 유형은 &lt;code&gt;f32&lt;/code&gt; 및 &lt;code&gt;f64&lt;/code&gt; 각각.</target>
        </trans-unit>
        <trans-unit id="a46bc695392f8c742f4e678a79ed2375790074cb" translate="yes" xml:space="preserve">
          <source>The Matcher Invariants</source>
          <target state="translated">매처 불변</target>
        </trans-unit>
        <trans-unit id="5eece4981b24083c68ecabd071b66fe17ba1ce62" translate="yes" xml:space="preserve">
          <source>The Never Type that Never Returns</source>
          <target state="translated">결코 반환하지 않는 Never Type</target>
        </trans-unit>
        <trans-unit id="41b8e7692f976fe91f0cb8053dcf33a7090a4f8c" translate="yes" xml:space="preserve">
          <source>The Pattern API provides a generic mechanism for using different pattern types when searching through a string.</source>
          <target state="translated">패턴 API는 문자열을 통해 검색 할 때 다양한 패턴 유형을 사용하기위한 일반 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ba8021c95f458659340856b34b5ce555bddda300" translate="yes" xml:space="preserve">
          <source>The RFC Process and Teams</source>
          <target state="translated">RFC 프로세스 및 팀</target>
        </trans-unit>
        <trans-unit id="667bd8e20b1ba8153f27c9ff6c220024562a73c6" translate="yes" xml:space="preserve">
          <source>The Rules of References</source>
          <target state="translated">참조 규칙</target>
        </trans-unit>
        <trans-unit id="161ef3f14aee5229baf3e48cdbbdab5a784349b3" translate="yes" xml:space="preserve">
          <source>The Rust Language Server powers Integrated Development Environment (IDE) integration for code completion and inline error messages.</source>
          <target state="translated">Rust Language Server는 코드 완성 및 인라인 오류 메시지를 위해 IDE (Integrated Development Environment) 통합을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="efbadde43b4ea2876af269fef5bbeff660435dad" translate="yes" xml:space="preserve">
          <source>The Rust Prelude</source>
          <target state="translated">녹 서곡</target>
        </trans-unit>
        <trans-unit id="1e47c327d13b68cc315d8c0718500294854d4bd4" translate="yes" xml:space="preserve">
          <source>The Rust Prelude.</source>
          <target state="translated">녹 서곡.</target>
        </trans-unit>
        <trans-unit id="64d4853b323b63d9ca56f4771bf913212d9ace7a" translate="yes" xml:space="preserve">
          <source>The Rust Programming Language</source>
          <target state="translated">녹 프로그래밍 언어</target>
        </trans-unit>
        <trans-unit id="0bb645ae646711df91105c5e5d03daf9c88ee91b" translate="yes" xml:space="preserve">
          <source>The Rust Standard Library</source>
          <target state="translated">녹 표준 라이브러리</target>
        </trans-unit>
        <trans-unit id="9c789ddc154274d796ddc2e963326017f63c2958" translate="yes" xml:space="preserve">
          <source>The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the &lt;a href=&quot;https://crates.io&quot;&gt;broader Rust ecosystem&lt;/a&gt;. It offers core types, like &lt;a href=&quot;vec/index&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;option/enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, library-defined &lt;a href=&quot;#primitives&quot;&gt;operations on language primitives&lt;/a&gt;, &lt;a href=&quot;#macros&quot;&gt;standard macros&lt;/a&gt;, &lt;a href=&quot;io/index&quot;&gt;I/O&lt;/a&gt; and &lt;a href=&quot;thread/index&quot;&gt;multithreading&lt;/a&gt;, among &lt;a href=&quot;#what-is-in-the-standard-library-documentation&quot;&gt;many other things&lt;/a&gt;.</source>
          <target state="translated">Rust 표준 라이브러리는 휴대용 Rust 소프트웨어의 토대이며, &lt;a href=&quot;https://crates.io&quot;&gt;광범위한 Rust 생태계를&lt;/a&gt; 위해 최소한의 전투 테스트 공유 공유 세트입니다 . 그것은, 핵심 유형을 제공합니다 같은 &lt;a href=&quot;vec/index&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;option/enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; , 라이브러리 정의 &lt;a href=&quot;#primitives&quot;&gt;언어의 기본 요소에 대한 작업&lt;/a&gt; , &lt;a href=&quot;#macros&quot;&gt;표준 매크로&lt;/a&gt; , &lt;a href=&quot;io/index&quot;&gt;I / O&lt;/a&gt; 및 &lt;a href=&quot;thread/index&quot;&gt;멀티 스레딩&lt;/a&gt; , 중 &lt;a href=&quot;#what-is-in-the-standard-library-documentation&quot;&gt;많은 다른 것들&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4d3f2d23ee5d88e5e35ea9e8e79bcbc0fd6e3b11" translate="yes" xml:space="preserve">
          <source>The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the &lt;a href=&quot;https://crates.io&quot;&gt;broader Rust ecosystem&lt;/a&gt;. It offers core types, like &lt;a href=&quot;vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;option/enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, library-defined &lt;a href=&quot;#primitives&quot;&gt;operations on language primitives&lt;/a&gt;, &lt;a href=&quot;#macros&quot;&gt;standard macros&lt;/a&gt;, &lt;a href=&quot;io/index&quot;&gt;I/O&lt;/a&gt; and &lt;a href=&quot;thread/index&quot;&gt;multithreading&lt;/a&gt;, among &lt;a href=&quot;#what-is-in-the-standard-library-documentation&quot;&gt;many other things&lt;/a&gt;.</source>
          <target state="translated">Rust 표준 라이브러리는 &lt;a href=&quot;https://crates.io&quot;&gt;더 넓은 Rust 생태계를&lt;/a&gt; 위한 최소한의 전투 테스트를 거친 공유 추상화 세트 인 휴대용 Rust 소프트웨어의 기초입니다 . 그것은, 핵심 유형을 제공합니다 같은 &lt;a href=&quot;vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;option/enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; , 라이브러리 정의 &lt;a href=&quot;#primitives&quot;&gt;언어의 기본 요소에 대한 작업&lt;/a&gt; , &lt;a href=&quot;#macros&quot;&gt;표준 매크로&lt;/a&gt; , &lt;a href=&quot;io/index&quot;&gt;I / O&lt;/a&gt; 및 &lt;a href=&quot;thread/index&quot;&gt;멀티 스레딩&lt;/a&gt; , 중 &lt;a href=&quot;#what-is-in-the-standard-library-documentation&quot;&gt;많은 다른 것들&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c3853d774e4956749b7c91653db336f2eec58d4" translate="yes" xml:space="preserve">
          <source>The Rust compiler does not consider the following behaviors &lt;em&gt;unsafe&lt;/em&gt;, though a programmer may (should) find them undesirable, unexpected, or erroneous.</source>
          <target state="translated">Rust 컴파일러는 다음과 같은 동작을 &lt;em&gt;안전&lt;/em&gt; 하지 않은 것으로 간주하지 않지만 프로그래머는 바람직하지 않거나 예상치 못한 또는 잘못된 동작을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21b3dd0203ec587beb1963c1f4feb0c5c3e73b91" translate="yes" xml:space="preserve">
          <source>The Rust compiler has a &lt;em&gt;borrow checker&lt;/em&gt; that compares scopes to determine whether all borrows are valid. Listing 10-18 shows the same code as Listing 10-17 but with annotations showing the lifetimes of the variables.</source>
          <target state="translated">Rust 컴파일러에는 범위를 비교하여 모든 차용이 유효한지 확인 하는 &lt;em&gt;차용 검사기&lt;/em&gt; 가 있습니다. Listing 10-18은 Listing 10-17과 동일한 코드이지만 변수의 수명을 나타내는 주석이있다.</target>
        </trans-unit>
        <trans-unit id="bac79421ac7e7f4a69670a43a87279fa1ea360c9" translate="yes" xml:space="preserve">
          <source>The Rust compiler is always invoked with a single source file as input, and always produces a single output crate. The processing of that source file may result in other source files being loaded as modules. Source files have the extension &lt;code&gt;.rs&lt;/code&gt;.</source>
          <target state="translated">Rust 컴파일러는 항상 단일 소스 파일을 입력으로 호출하고 항상 단일 출력 상자를 생성합니다. 해당 소스 파일을 처리하면 다른 소스 파일이 모듈로로드 될 수 있습니다. 소스 파일의 확장자는 &lt;code&gt;.rs&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="edecdb50208b6b73bf12c25a96c41ebd3a559a66" translate="yes" xml:space="preserve">
          <source>The Rust language and compiler have a six-week release cycle, meaning users get a constant stream of new features. Other programming languages release larger changes less often; Rust releases smaller updates more frequently. After a while, all of these tiny changes add up. But from release to release, it can be difficult to look back and say, &amp;ldquo;Wow, between Rust 1.10 and Rust 1.31, Rust has changed a lot!&amp;rdquo;</source>
          <target state="translated">Rust 언어와 컴파일러는 6 주 릴리스주기를 가지며 이는 사용자가 새로운 기능을 지속적으로 제공한다는 것을 의미합니다. 다른 프로그래밍 언어는 더 큰 변경을 덜 자주 릴리스합니다. 녹은 더 작은 업데이트를 더 자주 릴리스합니다. 잠시 후,이 작은 변화들이 모두 합쳐집니다. 그러나 릴리스에서 릴리스까지&amp;ldquo;와트 1.10과 Rust 1.31 사이에서 Rust가 많이 바뀌 었습니다!&amp;rdquo;라고 회상하기가 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb670b9e802863986c803bc2c279a2c3ad127d26" translate="yes" xml:space="preserve">
          <source>The Rust language has a set of &lt;em&gt;keywords&lt;/em&gt; that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you&amp;rsquo;ll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in &lt;a href=&quot;appendix-01-keywords&quot;&gt;Appendix A&lt;/a&gt;.</source>
          <target state="translated">Rust 언어에는 다른 언어와 마찬가지로 해당 언어에서만 사용하도록 예약 된 &lt;em&gt;키워드&lt;/em&gt; 세트가 있습니다. 이러한 단어는 변수 나 함수의 이름으로 사용할 수 없습니다. 대부분의 키워드는 특별한 의미를 가지고 있으며,이를 사용하여 Rust 프로그램에서 다양한 작업을 수행하게됩니다. 몇몇은 그들과 관련된 현재 기능이 없지만 향후 Rust에 추가 될 기능을 위해 예약되어 있습니다. &lt;a href=&quot;appendix-01-keywords&quot;&gt;부록 A&lt;/a&gt; 에서 키워드 목록을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4db8a730c896d57ac8ae13218ced391891bc4c9e" translate="yes" xml:space="preserve">
          <source>The Rust language has a set of &lt;em&gt;keywords&lt;/em&gt; that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you&amp;rsquo;ll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in Appendix A.</source>
          <target state="translated">Rust 언어에는 다른 언어와 마찬가지로 해당 언어에서만 사용하도록 예약 된 &lt;em&gt;키워드&lt;/em&gt; 세트가 있습니다. 이 단어를 변수 또는 함수의 이름으로 사용할 수 없습니다. 대부분의 키워드는 특별한 의미를 지니고 있으며 Rust 프로그램에서 다양한 작업을 수행 할 때 사용합니다. 일부는 현재 기능과 관련이 없지만 향후 Rust에 추가 될 수있는 기능을 위해 예약되었습니다. 부록 A에서 키워드 목록을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c421a36adf32e1316c136776ce05dd83536c6c8" translate="yes" xml:space="preserve">
          <source>The Rust language hopes to support many other users as well; those mentioned here are merely some of the biggest stakeholders. Overall, Rust&amp;rsquo;s greatest ambition is to eliminate the trade-offs that programmers have accepted for decades by providing safety &lt;em&gt;and&lt;/em&gt; productivity, speed &lt;em&gt;and&lt;/em&gt; ergonomics. Give Rust a try and see if its choices work for you.</source>
          <target state="translated">Rust 언어는 다른 많은 사용자들도 지원하기를 희망합니다. 여기에 언급 된 것은 가장 큰 이해 관계자 중 일부일뿐입니다. 전반적으로 Rust의 가장 큰 야심은 안전 &lt;em&gt;과&lt;/em&gt; 생산성, 속도 &lt;em&gt;및&lt;/em&gt; 인체 공학 을 제공함으로써 프로그래머가 수십 년 동안 받아온 트레이드 오프를 제거하는 것 입니다. Rust를 시험 해보고 그 선택이 당신에게 적합한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="596e2b7dbc791cd3cfc77236ae00a927665967e2" translate="yes" xml:space="preserve">
          <source>The Rust runtime</source>
          <target state="translated">녹 런타임</target>
        </trans-unit>
        <trans-unit id="6be65bd73ad861e62f3888e1cc3672c017c1636b" translate="yes" xml:space="preserve">
          <source>The Rust standard library provides channels for message passing and smart pointer types, such as &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, that are safe to use in concurrent contexts. The type system and the borrow checker ensure that the code using these solutions won&amp;rsquo;t end up with data races or invalid references. Once you get your code to compile, you can rest assured that it will happily run on multiple threads without the kinds of hard-to-track-down bugs common in other languages. Concurrent programming is no longer a concept to be afraid of: go forth and make your programs concurrent, fearlessly!</source>
          <target state="translated">Rust 표준 라이브러리는 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 및 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 와 같이 동시 컨텍스트에서 사용하기에 안전한 메시지 전달 및 스마트 포인터 유형을위한 채널을 제공 합니다. 유형 시스템과 차용 검사기는 이러한 솔루션을 사용하는 코드가 데이터 경쟁이나 유효하지 않은 참조로 끝나지 않도록합니다. 코드를 컴파일하면 다른 언어에서 흔히 볼 수있는 추적하기 어려운 버그없이 여러 스레드에서 행복하게 실행될 수 있습니다. 동시 프로그래밍은 더 이상 두려워 할 개념이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ca0e948d58962dbdfe194b991ab15a2f509a074c" translate="yes" xml:space="preserve">
          <source>The Rust type system has some features that we&amp;rsquo;ve mentioned in this book but haven&amp;rsquo;t yet discussed. We&amp;rsquo;ll start by discussing newtypes in general as we examine why newtypes are useful as types. Then we&amp;rsquo;ll move on to type aliases, a feature similar to newtypes but with slightly different semantics. We&amp;rsquo;ll also discuss the &lt;code&gt;!&lt;/code&gt; type and dynamically sized types.</source>
          <target state="translated">Rust 타입 시스템은이 책에서 언급했지만 아직 논의하지 않은 기능을 가지고 있습니다. 새로운 유형이 유형으로 유용한 이유를 조사하면서 일반적으로 새로운 유형에 대해 논의하는 것으로 시작하겠습니다. 그런 다음 새로운 유형과 비슷하지만 의미가 약간 다른 기능인 유형 별칭으로 넘어갑니다. 우리는 또한 논의 할 것입니다 &lt;code&gt;!&lt;/code&gt; 유형 및 동적 크기 유형.</target>
        </trans-unit>
        <trans-unit id="1e24d83679bf4a662ce93151d4c79beb7bc3d976" translate="yes" xml:space="preserve">
          <source>The Slice Type</source>
          <target state="translated">슬라이스 타입</target>
        </trans-unit>
        <trans-unit id="b60a9b411326be4b7b78e74a3c2736078d2cb936" translate="yes" xml:space="preserve">
          <source>The Stack and the Heap</source>
          <target state="translated">스택과 힙</target>
        </trans-unit>
        <trans-unit id="ea9187c27f13ce2d0fda228c7804b1eacb2a7df4" translate="yes" xml:space="preserve">
          <source>The Static Lifetime</source>
          <target state="translated">정적 수명</target>
        </trans-unit>
        <trans-unit id="dcc1bdcf64d9ba08b8c546b48a03373f9d896f1a" translate="yes" xml:space="preserve">
          <source>The Tests Module and &lt;code id=&quot;the-tests-module-and-cfgtest&quot;&gt;#[cfg(test)]&lt;/code&gt;</source>
          <target state="translated">테스트 모듈 및 &lt;code id=&quot;the-tests-module-and-cfgtest&quot;&gt;#[cfg(test)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43d375d205a43568d44e006351aba054a3a6df0e" translate="yes" xml:space="preserve">
          <source>The Trade-Offs of Using &lt;code id=&quot;the-trade-offs-of-using-clone&quot;&gt;clone&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;the-trade-offs-of-using-clone&quot;&gt;clone&lt;/code&gt; 사용의 단점</target>
        </trans-unit>
        <trans-unit id="874f680f597dff734725c0edb8d1cdbdc1c687fb" translate="yes" xml:space="preserve">
          <source>The Transmission Control Protocol is specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc793&quot;&gt;IETF RFC 793&lt;/a&gt;.</source>
          <target state="translated">전송 제어 프로토콜은 &lt;a href=&quot;https://tools.ietf.org/html/rfc793&quot;&gt;IETF RFC 793에&lt;/a&gt; 지정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d2bc0207cf3386e89a8ff90f2a45c74d008dd6b" translate="yes" xml:space="preserve">
          <source>The Tuple Type</source>
          <target state="translated">튜플 타입</target>
        </trans-unit>
        <trans-unit id="720acae72ae852d88680bc6199aaf2a3185402bd" translate="yes" xml:space="preserve">
          <source>The Unsize trait should not be implemented directly. All implementations of Unsize are provided automatically by the compiler.</source>
          <target state="translated">Unsize 특성은 직접 구현해서는 안됩니다. Unsize의 모든 구현은 컴파일러에 의해 자동으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9d8c2343fd3b49fd50014f949ed7698cf46aba4f" translate="yes" xml:space="preserve">
          <source>The ability to return a type that is only specified by the trait it implements is especially useful in the context of closures and iterators, which we cover in Chapter 13. Closures and iterators create types that only the compiler knows or types that are very long to specify. The &lt;code&gt;impl Trait&lt;/code&gt; syntax lets you concisely specify that a function returns some type that implements the &lt;code&gt;Iterator&lt;/code&gt; trait without needing to write out a very long type.</source>
          <target state="translated">구현 한 특성에 의해서만 지정된 유형을 반환하는 기능은 13 장에서 다루는 클로저 및 반복기의 컨텍스트에서 특히 유용합니다. 클로저 및 반복기는 컴파일러가 알고있는 유형 또는 매우 긴 유형 지정하십시오. &lt;code&gt;impl Trait&lt;/code&gt; 구문은 간결하게하는 기능이 몇 가지 유형을 반환 지정할 수 있습니다 그 구현 &lt;code&gt;Iterator&lt;/code&gt; 매우 긴 타입을 쓸 필요없이 특성.</target>
        </trans-unit>
        <trans-unit id="8344955111fdc074c9729e11010ee2eab0af03c1" translate="yes" xml:space="preserve">
          <source>The above example can be resolved by either reducing the number of lifetime bounds to one or by making the trait object lifetime explicit, like so:</source>
          <target state="translated">위의 예는 수명 경계의 수를 1로 줄이거 나 특성 객체 수명을 명시 적으로 만들면 해결 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cde40ac9fea8ec2f55d9ca0d422fc89008496087" translate="yes" xml:space="preserve">
          <source>The above indirection is the additional runtime cost of calling a function on a &lt;code&gt;dyn Trait&lt;/code&gt;. Methods called by dynamic dispatch generally cannot be inlined by the compiler.</source>
          <target state="translated">위의 간접적 인 &lt;code&gt;dyn Trait&lt;/code&gt; 는 dyn Trait 에서 함수를 호출하는 추가 런타임 비용입니다 . 일반적으로 동적 디스패치에 의해 호출되는 메서드는 컴파일러에서 인라인 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="deb20b7d624d1708cb7603af7f7d5931910cd966" translate="yes" xml:space="preserve">
          <source>The above is &lt;em&gt;still&lt;/em&gt; an expression but it will always evaluate to &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">위는 &lt;em&gt;여전히&lt;/em&gt; 표현식이지만 항상 &lt;code&gt;()&lt;/code&gt; 로 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="ede9c72b891dfc1d92b0b9fffc4f21007f9ae902" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i128::MIN&lt;/code&gt; cannot be represented as an &lt;code&gt;i128&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i128::MIN&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i128::MIN&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i128&lt;/code&gt; 하고, 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 유발하고 최적화 된 코드는 패닉없이 &lt;code&gt;i128::MIN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="e4ff7b2880604f74445f905b71fdee96836fc628" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i128::min_value()&lt;/code&gt; cannot be represented as an &lt;code&gt;i128&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i128::min_value()&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i128::min_value()&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i128&lt;/code&gt; 하고, 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 트리거하고 최적화 된 코드는 패닉없이 &lt;code&gt;i128::min_value()&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="68e6f1c95dcf27a099d3d4e155f55896bf8faf93" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i16::MIN&lt;/code&gt; cannot be represented as an &lt;code&gt;i16&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i16::MIN&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i16::MIN&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i16&lt;/code&gt; 하고 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 유발하고 최적화 된 코드는 패닉없이 &lt;code&gt;i16::MIN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c6634b50eb0aa3afe906f4e13b4800cc26454c92" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i16::min_value()&lt;/code&gt; cannot be represented as an &lt;code&gt;i16&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i16::min_value()&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i16::min_value()&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i16&lt;/code&gt; 하고 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 트리거하고 최적화 된 코드는 패닉없이 &lt;code&gt;i16::min_value()&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="37e2f0833c2e3fce2e0d86c6e578d1435f9c3b8f" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i32::MIN&lt;/code&gt; cannot be represented as an &lt;code&gt;i32&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i32::MIN&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i32::MIN&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i32&lt;/code&gt; 하고 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 유발하고 최적화 된 코드는 패닉없이 &lt;code&gt;i32::MIN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="91a991a9b7dce7a35eefa5dff81ee4a280a7e4f1" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i32::min_value()&lt;/code&gt; cannot be represented as an &lt;code&gt;i32&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i32::min_value()&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i32::min_value()&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i32&lt;/code&gt; 하고 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 트리거하고 최적화 된 코드는 패닉없이 &lt;code&gt;i32::min_value()&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2ddae722d1b9330d37bd61655516374aae130695" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i64::MIN&lt;/code&gt; cannot be represented as an &lt;code&gt;i64&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i64::MIN&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i64::MIN&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i64&lt;/code&gt; 하고 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 유발하고 최적화 된 코드는 패닉없이 &lt;code&gt;i64::MIN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="4c50c4d71fa72eabc1e0818c0a858ae1903c1c3c" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i64::min_value()&lt;/code&gt; cannot be represented as an &lt;code&gt;i64&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i64::min_value()&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i64::min_value()&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i64&lt;/code&gt; 하고 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 트리거하고 최적화 된 코드는 패닉없이 &lt;code&gt;i64::min_value()&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="94540f2ba32a8d4e2123f1b683b0ff15f6511fa8" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i8::MIN&lt;/code&gt; cannot be represented as an &lt;code&gt;i8&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i8::MIN&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i8::MIN&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i8&lt;/code&gt; 하고, 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 유발하고 최적화 된 코드는 패닉없이 &lt;code&gt;i8::MIN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5adbbbaac9cedf98e39759b8920bdb3431d04107" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;i8::min_value()&lt;/code&gt; cannot be represented as an &lt;code&gt;i8&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;i8::min_value()&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;i8::min_value()&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;i8&lt;/code&gt; 하고, 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 트리거하고 최적화 된 코드는 패닉없이 &lt;code&gt;i8::min_value()&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f3616827787c274826d0feb8bc695ca0f90e8398" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;isize::MIN&lt;/code&gt; cannot be represented as an &lt;code&gt;isize&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;isize::MIN&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;isize::MIN&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;isize&lt;/code&gt; 하고, 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 유발하고 최적화 된 코드는 패닉없이 &lt;code&gt;isize::MIN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5fa62dd0a50bd4c5554cb57272ae5164c2e1f601" translate="yes" xml:space="preserve">
          <source>The absolute value of &lt;code&gt;isize::min_value()&lt;/code&gt; cannot be represented as an &lt;code&gt;isize&lt;/code&gt;, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return &lt;code&gt;isize::min_value()&lt;/code&gt; without a panic.</source>
          <target state="translated">의 절대 값 &lt;code&gt;isize::min_value()&lt;/code&gt; int로서 표현할 수없는 &lt;code&gt;isize&lt;/code&gt; 하고, 오버 플로우가 발생할 계산하려고. 즉, 디버그 모드의 코드는이 경우 패닉을 트리거하고 최적화 된 코드는 패닉없이 &lt;code&gt;isize::min_value()&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="409fd764bcabc3595ffe004849ff8f4e30564756" translate="yes" xml:space="preserve">
          <source>The actual desugaring is more complex:</source>
          <target state="translated">실제 탈당은 더 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="88133b615f1381b0a02c487a3edbc253bc8ee09f" translate="yes" xml:space="preserve">
          <source>The actual stack size may be greater than this value if the platform specifies a minimal stack size.</source>
          <target state="translated">플랫폼에서 최소 스택 크기를 지정하면 실제 스택 크기가이 값보다 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e09eb4195a6425d3d0a7b968cb406d8968af9926" translate="yes" xml:space="preserve">
          <source>The addition assignment operator &lt;code&gt;+=&lt;/code&gt;.</source>
          <target state="translated">더하기 대입 연산자 &lt;code&gt;+=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="097ca9dd7ade97007d85b522a25e6d04cefa5c67" translate="yes" xml:space="preserve">
          <source>The addition operator &lt;code&gt;+&lt;/code&gt;.</source>
          <target state="translated">더하기 연산자 &lt;code&gt;+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="161b60a028315218a44d6ebb4a0a56ea64addb73" translate="yes" xml:space="preserve">
          <source>The address of temporary value was taken.</source>
          <target state="translated">임시 값의 주소를 가져 왔습니다.</target>
        </trans-unit>
        <trans-unit id="67b3b3b11425c46c946b0ed067dfaec63ac739cb" translate="yes" xml:space="preserve">
          <source>The address type can be any implementor of &lt;a href=&quot;trait.tosocketaddrs&quot;&gt;&lt;code&gt;ToSocketAddrs&lt;/code&gt;&lt;/a&gt; trait. See its documentation for concrete examples.</source>
          <target state="translated">주소 유형은 &lt;a href=&quot;trait.tosocketaddrs&quot;&gt; &lt;code&gt;ToSocketAddrs&lt;/code&gt; &lt;/a&gt; 특성의 구현 자일 수 있습니다 . 구체적인 예는 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="554a0871d5bd274c4e9a4646e480108243a7e12e" translate="yes" xml:space="preserve">
          <source>The advantage of checking the borrowing rules at runtime instead is that certain memory-safe scenarios are then allowed, whereas they are disallowed by the compile-time checks. Static analysis, like the Rust compiler, is inherently conservative. Some properties of code are impossible to detect by analyzing the code: the most famous example is the Halting Problem, which is beyond the scope of this book but is an interesting topic to research.</source>
          <target state="translated">런타임시 차용 규칙을 확인하는 이점은 특정 메모리 안전 시나리오가 허용되는 반면 컴파일 타임 검사에서는 허용되지 않는다는 것입니다. Rust 컴파일러와 같은 정적 분석은 본질적으로 보수적입니다. 코드의 일부 특성은 코드를 분석하여 감지 할 수 없습니다. 가장 유명한 예는 Halting Problem이며,이 책의 범위를 벗어나지 만 연구하기에 흥미로운 주제입니다.</target>
        </trans-unit>
        <trans-unit id="cf97cfec24f32bdc09751ee8bbb19e7117656381" translate="yes" xml:space="preserve">
          <source>The advantage of using trait objects and Rust&amp;rsquo;s type system to write code similar to code using duck typing is that we never have to check whether a value implements a particular method at runtime or worry about getting errors if a value doesn&amp;rsquo;t implement a method but we call it anyway. Rust won&amp;rsquo;t compile our code if the values don&amp;rsquo;t implement the traits that the trait objects need.</source>
          <target state="translated">덕 타이핑을 사용하여 코드와 유사한 코드를 작성하기 위해 특성 객체와 Rust 유형 시스템을 사용하는 이점은 런타임에 값이 특정 메소드를 구현하는지 여부를 확인할 필요가 없으며 값이 메소드를 구현하지 않으면 오류가 발생할 염려가 없다는 것입니다. 우리는 어쨌든 그것을 부릅니다. 값이 특성 오브젝트에 필요한 특성을 구현하지 않으면 Rust는 코드를 컴파일하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1f36aabbacdf9ecb5c08c91a08fabb8510a201b8" translate="yes" xml:space="preserve">
          <source>The advantages of checking the borrowing rules at compile time are that errors will be caught sooner in the development process, and there is no impact on runtime performance because all the analysis is completed beforehand. For those reasons, checking the borrowing rules at compile time is the best choice in the majority of cases, which is why this is Rust&amp;rsquo;s default.</source>
          <target state="translated">컴파일 타임에 차용 규칙을 확인하는 이점은 개발 프로세스에서 오류가 더 빨리 포착되며 모든 분석이 사전에 완료되므로 런타임 성능에 영향을 미치지 않는다는 것입니다. 이러한 이유로 대부분의 경우 컴파일 타임에 차용 규칙을 확인하는 것이 최선의 선택이므로 이것이 Rust의 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="802cd88adc867c6ed95af7c7632a5b9312da114b" translate="yes" xml:space="preserve">
          <source>The alignment is specified as an integer parameter in the form of &lt;code&gt;#[repr(align(x))]&lt;/code&gt; or &lt;code&gt;#[repr(packed(x))]&lt;/code&gt;. The alignment value must be a power of two from 1 up to 2&lt;sup&gt;29&lt;/sup&gt;. For &lt;code&gt;packed&lt;/code&gt;, if no value is given, as in &lt;code&gt;#[repr(packed)]&lt;/code&gt;, then the value is 1.</source>
          <target state="translated">정렬은 &lt;code&gt;#[repr(align(x))]&lt;/code&gt; 또는 &lt;code&gt;#[repr(packed(x))]&lt;/code&gt; 형식으로 정수 매개 변수로 지정됩니다 . 정렬 값은 1에서 2 &lt;sup&gt;29&lt;/sup&gt; 사이의 2의 거듭 제곱이어야합니다 . 들면 &lt;code&gt;packed&lt;/code&gt; , 값이 같이 주어지지 않으면 &lt;code&gt;#[repr(packed)]&lt;/code&gt; , 그 값은 1이다.</target>
        </trans-unit>
        <trans-unit id="4210b5f1c3a4d7626a8282b8b0091e3127367f26" translate="yes" xml:space="preserve">
          <source>The alignment may be raised or lowered with the &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;packed&lt;/code&gt; modifiers respectively. They alter the representation specified in the attribute. If no representation is specified, the default one is altered.</source>
          <target state="translated">정렬은 &lt;code&gt;align&lt;/code&gt; 및 &lt;code&gt;packed&lt;/code&gt; 수정 자로 각각 증가 또는 감소 될 수있다 . 속성에 지정된 표현을 변경합니다. 표현을 지정하지 않으면 기본 표현이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="0bbd4814e74e1731ea096a3e29eb0e49a6112a9b" translate="yes" xml:space="preserve">
          <source>The alignment modifiers</source>
          <target state="translated">정렬 수정 자</target>
        </trans-unit>
        <trans-unit id="9a801ec59d9d78b1342286bf3c47cdf72d8754c9" translate="yes" xml:space="preserve">
          <source>The alignment of a value specifies what addresses values are preferred to start at. Always a power of two. References to a value must be aligned. &lt;a href=&quot;type-layout#size-and-alignment&quot;&gt;More&lt;/a&gt;.</source>
          <target state="translated">값의 정렬은 시작하는 데 선호되는 주소 값을 지정합니다. 항상 2의 거듭 제곱. 값에 대한 참조는 정렬되어야합니다. &lt;a href=&quot;type-layout#size-and-alignment&quot;&gt;더&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d7d8131883a9466d9495401638572f0f7002cb80" translate="yes" xml:space="preserve">
          <source>The alignment of the struct is the alignment of the most-aligned field in it.</source>
          <target state="translated">구조체의 정렬은 가장 정렬 된 필드의 정렬입니다.</target>
        </trans-unit>
        <trans-unit id="cb2d786ce814f96269971824a7ca8c85b85a4a91" translate="yes" xml:space="preserve">
          <source>The allocated block of memory may or may not be initialized.</source>
          <target state="translated">할당 된 메모리 블록은 초기화되거나 초기화되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a853460caf9660ad50bba38269de71834329efaf" translate="yes" xml:space="preserve">
          <source>The allocation error hook is a global resource.</source>
          <target state="translated">할당 오류 후크는 글로벌 리소스입니다.</target>
        </trans-unit>
        <trans-unit id="dd622480c0a0d020ad0c83e155629929c531f8bd" translate="yes" xml:space="preserve">
          <source>The allocation error hook is invoked when an infallible memory allocation fails, before the runtime aborts. The default hook prints a message to standard error, but this behavior can be customized with the &lt;a href=&quot;fn.set_alloc_error_hook&quot;&gt;&lt;code&gt;set_alloc_error_hook&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.take_alloc_error_hook&quot;&gt;&lt;code&gt;take_alloc_error_hook&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">런타임 오류가 발생하기 전에 오류가없는 메모리 할당이 실패하면 할당 오류 후크가 호출됩니다. 기본 후크는 메시지를 표준 오류로 인쇄하지만이 동작은 &lt;a href=&quot;fn.set_alloc_error_hook&quot;&gt; &lt;code&gt;set_alloc_error_hook&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.take_alloc_error_hook&quot;&gt; &lt;code&gt;take_alloc_error_hook&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="460b0be997a504bd93f9a5f2102be17a4fe4f237" translate="yes" xml:space="preserve">
          <source>The alternate flag, &lt;code&gt;#&lt;/code&gt;, adds a &lt;code&gt;0b&lt;/code&gt; in front of the output.</source>
          <target state="translated">대체 플래그 &lt;code&gt;#&lt;/code&gt; 는 출력 앞에 &lt;code&gt;0b&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="b053ed1e6052a16bbf0f4a89d40e16ee9bf6a88d" translate="yes" xml:space="preserve">
          <source>The alternate flag, &lt;code&gt;#&lt;/code&gt;, adds a &lt;code&gt;0o&lt;/code&gt; in front of the output.</source>
          <target state="translated">대체 플래그 &lt;code&gt;#&lt;/code&gt; 는 출력 앞에 &lt;code&gt;0o&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="1a67677d2b4895bdc1fb6847161bf39c61cb99f4" translate="yes" xml:space="preserve">
          <source>The alternate flag, &lt;code&gt;#&lt;/code&gt;, adds a &lt;code&gt;0x&lt;/code&gt; in front of the output.</source>
          <target state="translated">대체 플래그 &lt;code&gt;#&lt;/code&gt; 는 출력 앞에 &lt;code&gt;0x&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="11ba8acfe40883baf3a25418d4023d5eeae6eb43" translate="yes" xml:space="preserve">
          <source>The answer to this problem is the &lt;em&gt;Cargo.lock&lt;/em&gt; file, which was created the first time you ran &lt;code&gt;cargo build&lt;/code&gt; and is now in your &lt;em&gt;guessing_game&lt;/em&gt; directory. When you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the &lt;em&gt;Cargo.lock&lt;/em&gt; file. When you build your project in the future, Cargo will see that the &lt;em&gt;Cargo.lock&lt;/em&gt; file exists and use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at &lt;code&gt;0.3.14&lt;/code&gt; until you explicitly upgrade, thanks to the &lt;em&gt;Cargo.lock&lt;/em&gt; file.</source>
          <target state="translated">이 문제에 대한 답은 &lt;em&gt;Cargo.lock&lt;/em&gt; 파일입니다.이 파일은 &lt;code&gt;cargo build&lt;/code&gt; 처음 실행할 때 만들어졌으며 이제 &lt;em&gt;guessing_game&lt;/em&gt; 디렉토리에 있습니다. 처음으로 프로젝트를 빌드 할 때 Cargo는 기준에 맞는 모든 버전의 종속성을 파악한 다음 &lt;em&gt;Cargo.lock&lt;/em&gt; 파일에 씁니다 . 나중에 프로젝트를 빌드 할 때 Cargo는 &lt;em&gt;Cargo.lock&lt;/em&gt; 파일이 존재 함을 확인하고 버전을 다시 알아내는 모든 작업을 수행하는 대신 지정된 버전을 사용합니다. 이를 통해 자동으로 재현 가능한 빌드를 만들 수 있습니다. 즉, 당신의 프로젝트에 남아 &lt;code&gt;0.3.14&lt;/code&gt; , 당신은 명시 적으로 업그레이드 할 때까지 덕분에 &lt;em&gt;Cargo.lock을&lt;/em&gt; 파일.</target>
        </trans-unit>
        <trans-unit id="8fb95ccc8cbb2b44a80d4d0a731ecb5bea70e713" translate="yes" xml:space="preserve">
          <source>The answer to this problem is the &lt;em&gt;Cargo.lock&lt;/em&gt; file, which was created the first time you ran &lt;code&gt;cargo build&lt;/code&gt; and is now in your &lt;em&gt;guessing_game&lt;/em&gt; directory. When you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the &lt;em&gt;Cargo.lock&lt;/em&gt; file. When you build your project in the future, Cargo will see that the &lt;em&gt;Cargo.lock&lt;/em&gt; file exists and use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at &lt;code&gt;0.5.5&lt;/code&gt; until you explicitly upgrade, thanks to the &lt;em&gt;Cargo.lock&lt;/em&gt; file.</source>
          <target state="translated">이 문제에 대한 답은 &lt;em&gt;Cargo.lock&lt;/em&gt; 파일입니다.이 파일은 &lt;code&gt;cargo build&lt;/code&gt; 처음 실행할 때 생성되었으며 이제 &lt;em&gt;guessing_game&lt;/em&gt; 디렉토리에 있습니다. 처음으로 프로젝트를 빌드 할 때 Cargo는 기준에 맞는 모든 버전의 종속성을 파악한 다음이를 &lt;em&gt;Cargo.lock&lt;/em&gt; 파일에 기록합니다 . 나중에 프로젝트를 빌드 할 때 Cargo는 &lt;em&gt;Cargo.lock&lt;/em&gt; 파일이 있음을 확인하고 버전을 다시 파악하는 모든 작업을 수행하는 대신 여기에 지정된 버전을 사용합니다. 이를 통해 자동으로 재현 가능한 빌드를 가질 수 있습니다. 즉, 당신의 프로젝트에 남아 &lt;code&gt;0.5.5&lt;/code&gt; , 명시 적으로 업그레이드 할 때까지 덕분에 &lt;em&gt;Cargo.lock을&lt;/em&gt; 파일.</target>
        </trans-unit>
        <trans-unit id="c50839f5b75ebf2449202c65bd78e83e2a04633c" translate="yes" xml:space="preserve">
          <source>The argument order should be changed to match the parameter declaration order, as in the following:</source>
          <target state="translated">인수 순서는 다음과 같이 매개 변수 선언 순서와 일치하도록 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="ff3b9111423732cd0796ed3af4340d1aeaddff87" translate="yes" xml:space="preserve">
          <source>The argument to the &lt;code&gt;llvm_asm&lt;/code&gt; macro is not well-formed.</source>
          <target state="translated">&lt;code&gt;llvm_asm&lt;/code&gt; 매크로에 대한 인수의 형식 이 올바르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d5e37bb48121061d7a9d1253e50cf299206b8ed" translate="yes" xml:space="preserve">
          <source>The argument, &lt;code&gt;mid&lt;/code&gt;, should be a byte offset from the start of the string. It must also be on the boundary of a UTF-8 code point.</source>
          <target state="translated">&lt;code&gt;mid&lt;/code&gt; 인수 는 문자열의 시작 부분에서 바이트 오프셋이어야합니다. 또한 UTF-8 코드 포인트의 경계에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="843c167795952476fd4949d773d09e67f37bae5c" translate="yes" xml:space="preserve">
          <source>The arguments will be formatted according to the specified format string into the output stream provided.</source>
          <target state="translated">인수는 지정된 형식 문자열에 따라 제공된 출력 스트림으로 형식화됩니다.</target>
        </trans-unit>
        <trans-unit id="47d8ae2e6d2ad4b4b9256e9f4136431f5f0ee17f" translate="yes" xml:space="preserve">
          <source>The array index expression can be implemented for types other than arrays and slices by implementing the &lt;a href=&quot;../../std/ops/trait.index&quot;&gt;Index&lt;/a&gt; and &lt;a href=&quot;../../std/ops/trait.indexmut&quot;&gt;IndexMut&lt;/a&gt; traits.</source>
          <target state="translated">&lt;a href=&quot;../../std/ops/trait.index&quot;&gt;Index&lt;/a&gt; 및 &lt;a href=&quot;../../std/ops/trait.indexmut&quot;&gt;IndexMut&lt;/a&gt; 특성 을 구현하여 배열 및 슬라이스 이외의 유형에 대해 배열 색인 표현식을 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="43b42b264d53f00eb4d50d966bdebfe503d9e502" translate="yes" xml:space="preserve">
          <source>The array named &lt;code&gt;a&lt;/code&gt; will contain &lt;code&gt;5&lt;/code&gt; elements that will all be set to the value &lt;code&gt;3&lt;/code&gt; initially. This is the same as writing &lt;code&gt;let a = [3, 3, 3, 3, 3];&lt;/code&gt; but in a more concise way.</source>
          <target state="translated">이름이 &lt;code&gt;a&lt;/code&gt; 인 배열 에는 처음에 값 &lt;code&gt;3&lt;/code&gt; 으로 설정되는 &lt;code&gt;5&lt;/code&gt; 개의 요소 가 포함 됩니다 . 이것은 &lt;code&gt;let a = [3, 3, 3, 3, 3];&lt;/code&gt; 을 쓰는 것과 같습니다 . 그러나 더 간결한 방식으로.</target>
        </trans-unit>
        <trans-unit id="bda6f38466d2f9f90243514e2e1d1d622e872f82" translate="yes" xml:space="preserve">
          <source>The associated error which can be returned from parsing.</source>
          <target state="translated">구문 분석에서 리턴 될 수있는 연관된 오류입니다.</target>
        </trans-unit>
        <trans-unit id="264397f1a1d81bc0bfb862d1058ae5d080545332" translate="yes" xml:space="preserve">
          <source>The associated type used was not defined in the trait.</source>
          <target state="translated">사용 된 관련 유형이 특성에 정의되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="95b071fe52a22a379b9072dba9b8116f1e91d5e0" translate="yes" xml:space="preserve">
          <source>The assumed lifetime of references held by a &lt;a href=&quot;types/trait-object&quot;&gt;trait object&lt;/a&gt; is called its &lt;em&gt;default object lifetime bound&lt;/em&gt;. These were defined in &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md&quot;&gt;RFC 599&lt;/a&gt; and amended in &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md&quot;&gt;RFC 1156&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;types/trait-object&quot;&gt;특성 오브젝트&lt;/a&gt; 가 보유하는 가정 된 참조 수명을 &lt;em&gt;기본 오브젝트 수명 바운드&lt;/em&gt; 라고합니다 . 이들은 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md&quot;&gt;RFC 599&lt;/a&gt; 에서 정의 되었고 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md&quot;&gt;RFC 1156&lt;/a&gt; 에서 수정되었습니다 .</target>
        </trans-unit>
        <trans-unit id="4a633a670846190d4e317682018f539e771650d4" translate="yes" xml:space="preserve">
          <source>The atomic intrinsics provide common atomic operations on machine words, with multiple possible memory orderings. They obey the same semantics as C++11. See the LLVM documentation on [&lt;a href=&quot;http://llvm.org/docs/Atomics.html&quot;&gt;atomics&lt;/a&gt;].</source>
          <target state="translated">원자 내장 함수는 여러 가능한 메모리 순서와 함께 기계어에 대한 일반적인 원자 연산을 제공합니다. 그들은 C ++ 11과 동일한 의미를 따릅니다. [ &lt;a href=&quot;http://llvm.org/docs/Atomics.html&quot;&gt;atomics&lt;/a&gt; ] 에 대한 LLVM 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4eacfc8c255cb1ef132a6a65b58c2019ebea9baf" translate="yes" xml:space="preserve">
          <source>The atomic types in this module may not be available on all platforms. The atomic types here are all widely available, however, and can generally be relied upon existing. Some notable exceptions are:</source>
          <target state="translated">이 모듈의 원자 유형은 모든 플랫폼에서 사용 가능하지 않을 수 있습니다. 그러나 여기서 원자 유형은 모두 널리 사용 가능하며 일반적으로 기존 유형에 의존 할 수 있습니다. 몇 가지 주목할만한 예외는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="71cc0f45759d249e1ba21744ede7b9ef7445260e" translate="yes" xml:space="preserve">
          <source>The attribute consists of a path to the attribute, followed by an optional delimited token tree whose interpretation is defined by the attribute. Attributes other than macro attributes also allow the input to be an equals sign (&lt;code&gt;=&lt;/code&gt;) followed by a literal expression. See the &lt;a href=&quot;#meta-item-attribute-syntax&quot;&gt;meta item syntax&lt;/a&gt; below for more details.</source>
          <target state="translated">속성은 속성에 대한 경로와 속성에 의해 해석이 정의 된 선택적 구분 토큰 트리로 구성됩니다. 매크로 속성 이외의 속성은 입력이 등호 ( &lt;code&gt;=&lt;/code&gt; ) 뒤에 리터럴 표현식이 되도록 허용합니다 . 자세한 내용은 아래 &lt;a href=&quot;#meta-item-attribute-syntax&quot;&gt;메타 항목 구문&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c5f89ad9ce66636388cf7509f930392e52eeb867" translate="yes" xml:space="preserve">
          <source>The attribute consists of a path to the attribute, followed by an optional delimited token tree whose interpretation is defined by the attribute. Attributes other than macro attributes also allow the input to be an equals sign (&lt;code&gt;=&lt;/code&gt;) followed by a literal expression. See the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;meta item syntax&lt;/a&gt; below for more details.</source>
          <target state="translated">속성은 속성에 대한 경로와 속성으로 해석이 정의 된 선택적 구분 토큰 트리로 구성됩니다. 매크로 속성 이외의 속성을 사용하면 입력이 등호 ( &lt;code&gt;=&lt;/code&gt; ) 다음에 리터럴 표현식이 될 수도 있습니다. 자세한 내용은 아래 &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;메타 항목 구문&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b79be106b3314bbccaaacf6171952db704c5419b" translate="yes" xml:space="preserve">
          <source>The attribute is used on a &lt;code&gt;static&lt;/code&gt; item whose type implements the &lt;a href=&quot;https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html&quot;&gt;&lt;code&gt;GlobalAlloc&lt;/code&gt;&lt;/a&gt; trait. This type can be provided by an external library:</source>
          <target state="translated">이 속성은 유형이 &lt;a href=&quot;https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html&quot;&gt; &lt;code&gt;GlobalAlloc&lt;/code&gt; &lt;/a&gt; 특성을 구현 하는 &lt;code&gt;static&lt;/code&gt; 항목 에서 사용됩니다 . 이 유형은 외부 라이브러리에서 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="638938ad1b96ca367b1ad29ad316e67748e69b45" translate="yes" xml:space="preserve">
          <source>The attribute is used on a &lt;code&gt;static&lt;/code&gt; item whose type implements the &lt;a href=&quot;trait.globalalloc&quot;&gt;&lt;code&gt;GlobalAlloc&lt;/code&gt;&lt;/a&gt; trait. This type can be provided by an external library:</source>
          <target state="translated">속성은 유형이 &lt;a href=&quot;trait.globalalloc&quot;&gt; &lt;code&gt;GlobalAlloc&lt;/code&gt; &lt;/a&gt; 특성을 구현 하는 &lt;code&gt;static&lt;/code&gt; 항목 에 사용됩니다 . 이 유형은 외부 라이브러리에서 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07001b94d9ec08710a57474a9ab6a5a7c57ed031" translate="yes" xml:space="preserve">
          <source>The attributes that have meaning on a block expression are &lt;a href=&quot;../conditional-compilation&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;the lint check attributes&lt;/a&gt;.</source>
          <target state="translated">블록 표현식에서 의미가있는 속성은 &lt;a href=&quot;../conditional-compilation&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;lint check 속성&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="db84623389bc5fe968094b478ac6446a9f7cd32b" translate="yes" xml:space="preserve">
          <source>The attributes that have meaning on a function are &lt;a href=&quot;../conditional-compilation&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt;&lt;code&gt;deprecated&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../abi#the-export_name-attribute&quot;&gt;&lt;code&gt;export_name&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../abi#the-link_section-attribute&quot;&gt;&lt;code&gt;link_section&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../abi#the-no_mangle-attribute&quot;&gt;&lt;code&gt;no_mangle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;the lint check attributes&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#the-must_use-attribute&quot;&gt;&lt;code&gt;must_use&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../procedural-macros&quot;&gt;the procedural macro attributes&lt;/a&gt;, &lt;a href=&quot;../attributes/testing&quot;&gt;the testing attributes&lt;/a&gt;, and &lt;a href=&quot;../attributes/codegen#optimization-hints&quot;&gt;the optimization hint attributes&lt;/a&gt;. Functions also accept attributes macros.</source>
          <target state="translated">함수에 의미가있는 속성은 &lt;a href=&quot;../conditional-compilation&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt; &lt;code&gt;deprecated&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt; &lt;code&gt;doc&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../abi#the-export_name-attribute&quot;&gt; &lt;code&gt;export_name&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../abi#the-link_section-attribute&quot;&gt; &lt;code&gt;link_section&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../abi#the-no_mangle-attribute&quot;&gt; &lt;code&gt;no_mangle&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;lint check 속성&lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#the-must_use-attribute&quot;&gt; &lt;code&gt;must_use&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../procedural-macros&quot;&gt;절차 적 매크로 속성&lt;/a&gt; , &lt;a href=&quot;../attributes/testing&quot;&gt;테스트 속성&lt;/a&gt; 및 &lt;a href=&quot;../attributes/codegen#optimization-hints&quot;&gt;최적화 힌트 속성&lt;/a&gt; 입니다. 함수는 속성 매크로도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="622c3bad6ebce7dda9ab10b347056427bd42a746" translate="yes" xml:space="preserve">
          <source>The attributes that have meaning on a function are &lt;a href=&quot;../conditional-compilation#the-cfg-attribute&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../conditional-compilation#the-cfg_attr-attribute&quot;&gt;&lt;code&gt;cfg_attr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt;&lt;code&gt;deprecated&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../abi#the-export_name-attribute&quot;&gt;&lt;code&gt;export_name&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../abi#the-link_section-attribute&quot;&gt;&lt;code&gt;link_section&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../abi#the-no_mangle-attribute&quot;&gt;&lt;code&gt;no_mangle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;the lint check attributes&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#the-must_use-attribute&quot;&gt;&lt;code&gt;must_use&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../procedural-macros&quot;&gt;the procedural macro attributes&lt;/a&gt;, &lt;a href=&quot;../attributes/testing&quot;&gt;the testing attributes&lt;/a&gt;, and &lt;a href=&quot;../attributes/codegen#optimization-hints&quot;&gt;the optimization hint attributes&lt;/a&gt;. Functions also accept attributes macros.</source>
          <target state="translated">함수에 의미가있는 속성은 &lt;a href=&quot;../conditional-compilation#the-cfg-attribute&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../conditional-compilation#the-cfg_attr-attribute&quot;&gt; &lt;code&gt;cfg_attr&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt; &lt;code&gt;deprecated&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt; &lt;code&gt;doc&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../abi#the-export_name-attribute&quot;&gt; &lt;code&gt;export_name&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../abi#the-link_section-attribute&quot;&gt; &lt;code&gt;link_section&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../abi#the-no_mangle-attribute&quot;&gt; &lt;code&gt;no_mangle&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;lint 검사 속성&lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#the-must_use-attribute&quot;&gt; &lt;code&gt;must_use&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../procedural-macros&quot;&gt;절차 적 매크로 속성&lt;/a&gt; , &lt;a href=&quot;../attributes/testing&quot;&gt;테스트 속성&lt;/a&gt; 및 &lt;a href=&quot;../attributes/codegen#optimization-hints&quot;&gt;최적화 힌트 속성&lt;/a&gt; 입니다. 함수는 속성 매크로도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a9286c2061446f78d1eb0dacb8ad2bed2198b3a3" translate="yes" xml:space="preserve">
          <source>The author of the code in Listing 14-4, which uses the &lt;code&gt;art&lt;/code&gt; crate, had to figure out that &lt;code&gt;PrimaryColor&lt;/code&gt; is in the &lt;code&gt;kinds&lt;/code&gt; module and &lt;code&gt;mix&lt;/code&gt; is in the &lt;code&gt;utils&lt;/code&gt; module. The module structure of the &lt;code&gt;art&lt;/code&gt; crate is more relevant to developers working on the &lt;code&gt;art&lt;/code&gt; crate than to developers using the &lt;code&gt;art&lt;/code&gt; crate. The internal structure that organizes parts of the crate into the &lt;code&gt;kinds&lt;/code&gt; module and the &lt;code&gt;utils&lt;/code&gt; module doesn&amp;rsquo;t contain any useful information for someone trying to understand how to use the &lt;code&gt;art&lt;/code&gt; crate. Instead, the &lt;code&gt;art&lt;/code&gt; crate&amp;rsquo;s module structure causes confusion because developers have to figure out where to look, and the structure is inconvenient because developers must specify the module names in the &lt;code&gt;use&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;art&lt;/code&gt; 크레이트 를 사용하는 Listing 14-4의 코드 작성자는 &lt;code&gt;PrimaryColor&lt;/code&gt; 가 &lt;code&gt;kinds&lt;/code&gt; 모듈에 있고 &lt;code&gt;mix&lt;/code&gt; 가 &lt;code&gt;utils&lt;/code&gt; 모듈에 있음을 알아 내야했다 . 의 모듈 구조 &lt;code&gt;art&lt;/code&gt; 상자는 작업을 개발자들에게 더 관련이 &lt;code&gt;art&lt;/code&gt; 보다 사용하는 개발자에 상자 &lt;code&gt;art&lt;/code&gt; 상자를. 상자의 일부를 &lt;code&gt;kinds&lt;/code&gt; 모듈과 &lt;code&gt;utils&lt;/code&gt; 모듈 로 구성하는 내부 구조 에는 &lt;code&gt;art&lt;/code&gt; 상자 사용법을 이해하려는 사람에게 유용한 정보가 포함되어 있지 않습니다 . 대신 &lt;code&gt;art&lt;/code&gt; crate의 모듈 구조는 개발자가 어디를 찾아야하는지에 대한 혼란을 야기하고, 개발자가 &lt;code&gt;use&lt;/code&gt; 문 에 모듈 이름을 지정해야하기 때문에 구조가 불편합니다 .</target>
        </trans-unit>
        <trans-unit id="d8ebf8e3de6c2376fc1a32c2614c0e8023f7f60e" translate="yes" xml:space="preserve">
          <source>The author of this code probably wants &lt;code&gt;collect()&lt;/code&gt; to return a &lt;code&gt;Result&amp;lt;Vec&amp;lt;bool&amp;gt;, ()&amp;gt;&lt;/code&gt;, but the compiler can't be sure that there isn't another type &lt;code&gt;T&lt;/code&gt; implementing both &lt;code&gt;Try&lt;/code&gt; and &lt;code&gt;FromIterator&amp;lt;Result&amp;lt;bool, ()&amp;gt;&amp;gt;&lt;/code&gt; in scope such that &lt;code&gt;T::Ok == Vec&amp;lt;bool&amp;gt;&lt;/code&gt;. Hence, this code is ambiguous and an error is returned.</source>
          <target state="translated">이 코드의 저자는 아마도 원 &lt;code&gt;collect()&lt;/code&gt; 반환하는 &lt;code&gt;Result&amp;lt;Vec&amp;lt;bool&amp;gt;, ()&amp;gt;&lt;/code&gt; 하지만, 컴파일러는 다른 타입이 아니라고 확신 할 수 없다 &lt;code&gt;T&lt;/code&gt; 를 모두 구현하는 &lt;code&gt;Try&lt;/code&gt; 와 &lt;code&gt;FromIterator&amp;lt;Result&amp;lt;bool, ()&amp;gt;&amp;gt;&lt;/code&gt; &lt;code&gt;T::Ok == Vec&amp;lt;bool&amp;gt;&lt;/code&gt; 범위의 () &amp;gt;&amp;gt; . 따라서이 코드는 모호하며 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="946c3c8468dffe1ee08b57091aa458b31b356f72" translate="yes" xml:space="preserve">
          <source>The automatically generated &quot;drop glue&quot; which recursively calls the destructors of the all fields of this value.</source>
          <target state="translated">이 값의 모든 필드에 대한 소멸자를 재귀 적으로 호출하는 자동 생성 &quot;드롭 글루&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="442e142fa9a496c6c2ff3a02ee78aa50e228d6e4" translate="yes" xml:space="preserve">
          <source>The bad state is not something that&amp;rsquo;s &lt;em&gt;expected&lt;/em&gt; to happen occasionally.</source>
          <target state="translated">나쁜 상태는 때때로 일어날 &lt;em&gt;것으로 예상되는&lt;/em&gt; 것이 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="1030d03bed1910f08091eb456180338b656dc0aa" translate="yes" xml:space="preserve">
          <source>The base of a &lt;a href=&quot;expressions/struct-expr#functional-update-syntax&quot;&gt;functional update&lt;/a&gt; struct expression.</source>
          <target state="translated">a의 기본 &lt;a href=&quot;expressions/struct-expr#functional-update-syntax&quot;&gt;기능 업데이트&lt;/a&gt; 구조체 식입니다.</target>
        </trans-unit>
        <trans-unit id="1da424ed8fd790e722f71cc50f820022f89f696b" translate="yes" xml:space="preserve">
          <source>The behavior of the returned &lt;code&gt;Waker&lt;/code&gt; is undefined if the contract defined in &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;'s and &lt;a href=&quot;struct.rawwakervtable&quot;&gt;&lt;code&gt;RawWakerVTable&lt;/code&gt;&lt;/a&gt;'s documentation is not upheld. Therefore this method is unsafe.</source>
          <target state="translated">&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.rawwakervtable&quot;&gt; &lt;code&gt;RawWakerVTable&lt;/code&gt; &lt;/a&gt; 설명서에 정의 된 계약이 유지되지 않으면 반환 된 &lt;code&gt;Waker&lt;/code&gt; 의 동작 은 정의되지 않습니다. 따라서이 방법은 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c7f5bfcda53c0f0ccac4fbf04091f03de55bc719" translate="yes" xml:space="preserve">
          <source>The behavior of this method must be independent of the state of the &lt;code&gt;Read&lt;/code&gt;er - the method only takes &lt;code&gt;&amp;amp;self&lt;/code&gt; so that it can be used through trait objects.</source>
          <target state="translated">이 방법의 동작은 상태 독립적이어야 &lt;code&gt;Read&lt;/code&gt; 어 -이 방법은 소요 &lt;code&gt;&amp;amp;self&lt;/code&gt; 특성 객체를 통해 사용할 수 있도록.</target>
        </trans-unit>
        <trans-unit id="92a385c5078364ae9300fa907e25a19462c00810" translate="yes" xml:space="preserve">
          <source>The benefit of having this restriction is that Rust can prevent data races at compile time. A &lt;em&gt;data race&lt;/em&gt; is similar to a race condition and happens when these three behaviors occur:</source>
          <target state="translated">이 제한이있는 이점은 Rust가 컴파일시 데이터 경쟁을 막을 수 있다는 것입니다. &lt;em&gt;데이터 레이스&lt;/em&gt; 경쟁 조건과 유사하며이 세 가지 행동이 발생할 때 발생합니다</target>
        </trans-unit>
        <trans-unit id="94345eda8bccf9faca124acc23e9dfc7f68245ec" translate="yes" xml:space="preserve">
          <source>The bits that define the access mode are masked out with &lt;code&gt;O_ACCMODE&lt;/code&gt;, to ensure they do not interfere with the access mode set by Rusts options.</source>
          <target state="translated">액세스 모드를 정의하는 비트는 &lt;code&gt;O_ACCMODE&lt;/code&gt; 로 마스킹 되어 Rusts 옵션에 의해 설정된 액세스 모드를 방해하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eaa8e0a3053148a58d441c5d948ef0afd09016e9" translate="yes" xml:space="preserve">
          <source>The bitwise AND assignment operator &lt;code&gt;&amp;amp;=&lt;/code&gt;.</source>
          <target state="translated">비트 단위 AND 연산자를 대입 &lt;code&gt;&amp;amp;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1dd8ef8a8d73fdf98095248d6c0b2047cb203cf0" translate="yes" xml:space="preserve">
          <source>The bitwise AND operator &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">비트 단위 AND 연산자 &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2bfdab4f43dd337afc8fc0552897bf0d88f4fb0e" translate="yes" xml:space="preserve">
          <source>The bitwise OR assignment operator &lt;code&gt;|=&lt;/code&gt;.</source>
          <target state="translated">비트 OR 대입 연산자 &lt;code&gt;|=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a78ed80e19856e33ead5257328ef19e1b110eb08" translate="yes" xml:space="preserve">
          <source>The bitwise OR operator &lt;code&gt;|&lt;/code&gt;.</source>
          <target state="translated">비트 OR 연산자 &lt;code&gt;|&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eafeed4a6ad02f43abd1d07f62b4dea554b3a79c" translate="yes" xml:space="preserve">
          <source>The bitwise XOR assignment operator &lt;code&gt;^=&lt;/code&gt;.</source>
          <target state="translated">비트 XOR 대입 연산자 &lt;code&gt;^=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e805a1bbc089611af418b7bd9e638939dac553c5" translate="yes" xml:space="preserve">
          <source>The bitwise XOR operator &lt;code&gt;^&lt;/code&gt;.</source>
          <target state="translated">비트 단위의 XOR 연산자 &lt;code&gt;^&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="423b8775203e06b0ca354c4f4e97825a7d00a713" translate="yes" xml:space="preserve">
          <source>The block of a function is conceptually wrapped in a block that binds the argument patterns and then &lt;code&gt;return&lt;/code&gt;s the value of the function's block. This means that the tail expression of the block, if evaluated, ends up being returned to the caller. As usual, an explicit return expression within the body of the function will short-cut that implicit return, if reached.</source>
          <target state="translated">함수의 블록은 개념적으로 인수 패턴을 묶은 블록에 싸여 함수 블록 의 값 을 &lt;code&gt;return&lt;/code&gt; 합니다. 이것은 블록의 테일 표현식이 평가되면 호출자에게 리턴됨을 의미합니다. 평소와 같이 함수 본문 내에서 명시 적 리턴 표현식은 해당 암시 적 리턴에 도달하면이를 단축시킵니다.</target>
        </trans-unit>
        <trans-unit id="761ca0a326eb25085e5f1ebfbcef3b94f323b7c7" translate="yes" xml:space="preserve">
          <source>The block's size must fall in the range &lt;code&gt;[use_min, use_max]&lt;/code&gt;, where:</source>
          <target state="translated">블록의 크기는 &lt;code&gt;[use_min, use_max]&lt;/code&gt; 범위에 있어야합니다 . 여기서 :</target>
        </trans-unit>
        <trans-unit id="0d55dd5d42feb75840d81a2ee396cf125ff6a36f" translate="yes" xml:space="preserve">
          <source>The block's starting address must be aligned to &lt;code&gt;layout.align()&lt;/code&gt;.</source>
          <target state="translated">블록의 시작 주소는 &lt;code&gt;layout.align()&lt;/code&gt; 정렬되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="6fb5efe10f486c51a18bce4f54350dd31c9d18ad" translate="yes" xml:space="preserve">
          <source>The bodies of the &lt;code&gt;if let&lt;/code&gt; and the &lt;code&gt;unwrap_or_else&lt;/code&gt; functions are the same in both cases: we print the error and exit.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 및 &lt;code&gt;unwrap_or_else&lt;/code&gt; 함수 의 본문은 두 경우 모두 동일합니다. 오류를 인쇄하고 종료합니다.</target>
        </trans-unit>
        <trans-unit id="a084bd821dcd5af3bead7d20966da99b85c8d3d6" translate="yes" xml:space="preserve">
          <source>The body of a &lt;a href=&quot;expressions/if-expr#if-expressions&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;expressions/loop-expr#predicate-loops&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;expressions/loop-expr#infinite-loops&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt; expression.</source>
          <target state="translated">&lt;a href=&quot;expressions/if-expr#if-expressions&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;expressions/loop-expr#predicate-loops&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;expressions/loop-expr#infinite-loops&quot;&gt; &lt;code&gt;loop&lt;/code&gt; &lt;/a&gt; 표현식 의 본문입니다 .</target>
        </trans-unit>
        <trans-unit id="8d22837f9a0a24391528e1a0b3b2365c1d2579bc" translate="yes" xml:space="preserve">
          <source>The body of the function starts by calling the &lt;code&gt;File::open&lt;/code&gt; function. Then we handle the &lt;code&gt;Result&lt;/code&gt; value returned with a &lt;code&gt;match&lt;/code&gt; similar to the &lt;code&gt;match&lt;/code&gt; in Listing 9-4, only instead of calling &lt;code&gt;panic!&lt;/code&gt; in the &lt;code&gt;Err&lt;/code&gt; case, we return early from this function and pass the error value from &lt;code&gt;File::open&lt;/code&gt; back to the calling code as this function&amp;rsquo;s error value. If &lt;code&gt;File::open&lt;/code&gt; succeeds, we store the file handle in the variable &lt;code&gt;f&lt;/code&gt; and continue.</source>
          <target state="translated">함수의 본문은 &lt;code&gt;File::open&lt;/code&gt; 함수를 호출하여 시작 합니다. 그런 다음 &lt;code&gt;panic!&lt;/code&gt; 을 호출하는 대신 목록 9-4 의 &lt;code&gt;match&lt;/code&gt; &lt;code&gt;match&lt;/code&gt; 유사한 일치 로 반환 된 &lt;code&gt;Result&lt;/code&gt; 값 을 처리합니다 ! 에 &lt;code&gt;Err&lt;/code&gt; 경우, 우리는 초기에이 함수의 반환과에서 오류 값에 합격 &lt;code&gt;File::open&lt;/code&gt; 이 기능의 오류 값으로 호출 코드에 다시. 경우 &lt;code&gt;File::open&lt;/code&gt; 성공, 우리는 변수에 파일 핸들을 저장 &lt;code&gt;f&lt;/code&gt; 계속.</target>
        </trans-unit>
        <trans-unit id="9ba4d0e4523a23a56b57272682f48b03a790c657" translate="yes" xml:space="preserve">
          <source>The body of the method would use &lt;code&gt;self&lt;/code&gt; to get the value that we called the method on. In this example, we&amp;rsquo;ve created a variable &lt;code&gt;m&lt;/code&gt; that has the value &lt;code&gt;Message::Write(String::from(&quot;hello&quot;))&lt;/code&gt;, and that is what &lt;code&gt;self&lt;/code&gt; will be in the body of the &lt;code&gt;call&lt;/code&gt; method when &lt;code&gt;m.call()&lt;/code&gt; runs.</source>
          <target state="translated">메소드의 본문은 &lt;code&gt;self&lt;/code&gt; 를 사용 하여 메소드를 호출 한 값을 얻습니다. 이 예제에서, 우리는 변수 만든 &lt;code&gt;m&lt;/code&gt; 값이 &lt;code&gt;Message::Write(String::from(&quot;hello&quot;))&lt;/code&gt; , 그리고 그 무엇인가 &lt;code&gt;self&lt;/code&gt; 의 몸에있을 것이다 &lt;code&gt;call&lt;/code&gt; 할 때 방법 &lt;code&gt;m.call()&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9c00fd6128e2bdd1cc90bd415df84de85499f4fb" translate="yes" xml:space="preserve">
          <source>The book &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley Professional, 1994) colloquially referred to as &lt;em&gt;The Gang of Four&lt;/em&gt; book, is a catalog of object-oriented design patterns. It defines OOP this way:</source>
          <target state="translated">Erich Gamma, Richard Helm, Ralph Johnson 및 John Vlissides (Addison-Wesley Professional, 1994) 의 책 &lt;em&gt;Design Patterns : Reusable Object-Oriented Software의 요소는&lt;/em&gt; 구어 ( &lt;em&gt;The Gang of Four)의&lt;/em&gt; 책 이라고 불리며 , 객체 지향 카탈로그입니다. 디자인 패턴. 다음과 같이 OOP를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="0ab81c05a8d6cbaec3e9dfb9c8caa2a16dab19bf" translate="yes" xml:space="preserve">
          <source>The boolean type.</source>
          <target state="translated">부울 유형입니다.</target>
        </trans-unit>
        <trans-unit id="06283747a377154700dbba912c9e77d60011a87e" translate="yes" xml:space="preserve">
          <source>The borrow lasts until the returned &lt;code&gt;Ref&lt;/code&gt; exits scope. Multiple immutable borrows can be taken out at the same time.</source>
          <target state="translated">대여는 반환 된 &lt;code&gt;Ref&lt;/code&gt; 가 범위를 종료 할 때까지 지속됩니다 . 여러 불변의 차용을 동시에 꺼낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45376451530857b96a10ec4a5e20bb51cfc0ed12" translate="yes" xml:space="preserve">
          <source>The borrow lasts until the returned &lt;code&gt;RefMut&lt;/code&gt; or all &lt;code&gt;RefMut&lt;/code&gt;s derived from it exit scope. The value cannot be borrowed while this borrow is active.</source>
          <target state="translated">대여는 반환 된 &lt;code&gt;RefMut&lt;/code&gt; 또는 &lt;code&gt;RefMut&lt;/code&gt; 부터 파생 된 모든 RefMut 이 종료 범위 까지 지속됩니다 . 이 빌림이 활성화되어있는 동안에는 값을 빌릴 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f968733bf846dacfb002493e18e27a27864a5d95" translate="yes" xml:space="preserve">
          <source>The buffer is written out before returning the writer.</source>
          <target state="translated">버퍼는 기록기를 반환하기 전에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="8d2f5c9c4df44bd26200b02c526dd9675a0b62ea" translate="yes" xml:space="preserve">
          <source>The buffer specified was 0 bytes in length.</source>
          <target state="translated">지정된 버퍼 길이는 0 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="aac2e47b3535d051db39f7a14fa1dba18fc6a121" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;cfg&lt;/code&gt; macro takes in a single configuration predicate and evaluates to the &lt;code&gt;true&lt;/code&gt; literal when the predicate is true and the &lt;code&gt;false&lt;/code&gt; literal when it is false.</source>
          <target state="translated">내장 된 &lt;code&gt;cfg&lt;/code&gt; 매크로는 단일 구성 조건 및 평가하여 취하는 &lt;code&gt;true&lt;/code&gt; 술어가 사실 때 문자 &lt;code&gt;false&lt;/code&gt; 이 거짓 일 때 리터럴.</target>
        </trans-unit>
        <trans-unit id="87ae881f172e3eab463a1dba119d942ed8deaed7" translate="yes" xml:space="preserve">
          <source>The built-in attributes that have meaning on a function are &lt;a href=&quot;../conditional-compilation&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt;&lt;code&gt;deprecated&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;the lint check attributes&lt;/a&gt;, &lt;code&gt;path&lt;/code&gt;, and &lt;code&gt;no_implicit_prelude&lt;/code&gt;. Modules also accept macro attributes.</source>
          <target state="translated">함수에 의미가있는 내장 속성은 &lt;a href=&quot;../conditional-compilation&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt; &lt;code&gt;deprecated&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt; &lt;code&gt;doc&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;lint check 속성&lt;/a&gt; , &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;no_implicit_prelude&lt;/code&gt; 입니다. 모듈은 매크로 속성도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="0658caeac4e6cc6250807a10a1d1127da8f7b8cb" translate="yes" xml:space="preserve">
          <source>The built-in attributes that have meaning on a module are &lt;a href=&quot;../conditional-compilation&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt;&lt;code&gt;deprecated&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;the lint check attributes&lt;/a&gt;, &lt;code&gt;path&lt;/code&gt;, and &lt;code&gt;no_implicit_prelude&lt;/code&gt;. Modules also accept macro attributes.</source>
          <target state="translated">모듈에서 의미가있는 내장 속성은 &lt;a href=&quot;../conditional-compilation&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#the-deprecated-attribute&quot;&gt; &lt;code&gt;deprecated&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt; &lt;code&gt;doc&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../attributes/diagnostics#lint-check-attributes&quot;&gt;lint 검사 속성&lt;/a&gt; , &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;no_implicit_prelude&lt;/code&gt; 입니다. 모듈은 매크로 속성도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="7917b1e20d5567c345241cec71cc654edebdd434" translate="yes" xml:space="preserve">
          <source>The built-in function traits are generic over a tuple of the function arguments. If one uses angle-bracket notation (&lt;code&gt;Fn&amp;lt;(T,), Output=U&amp;gt;&lt;/code&gt;) instead of parentheses (&lt;code&gt;Fn(T) -&amp;gt; U&lt;/code&gt;) to denote the function trait, the type parameter should be a tuple. Otherwise function call notation cannot be used and the trait will not be implemented by closures.</source>
          <target state="translated">내장 함수 특성은 함수 인수의 튜플에 일반적입니다. 함수 특성을 나타 내기 위해 괄호 ( &lt;code&gt;Fn(T) -&amp;gt; U&lt;/code&gt; ) 대신 꺾쇠 괄호 표기법 ( &lt;code&gt;Fn&amp;lt;(T,), Output=U&amp;gt;&lt;/code&gt; )을 사용하는 경우 유형 매개 변수는 튜플이어야합니다. 그렇지 않으면 함수 호출 표기법을 사용할 수 없으며 특성이 클로저로 구현되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a9e1ef14ad9c5016cccb06e0dae0b41ca0441837" translate="yes" xml:space="preserve">
          <source>The c-main function only supports to return integers as return type. So, every type implementing the &lt;code&gt;Termination&lt;/code&gt; trait has to be converted to an integer.</source>
          <target state="translated">c-main 함수는 정수를 반환 유형으로 반환 만 지원합니다. 따라서 &lt;code&gt;Termination&lt;/code&gt; 특성을 구현하는 모든 유형 은 정수로 변환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="98a1e057ef0866ad400391fbf23a2daa11b28012" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;lock&lt;/code&gt; would fail if another thread holding the lock panicked. In that case, no one would ever be able to get the lock, so we&amp;rsquo;ve chosen to &lt;code&gt;unwrap&lt;/code&gt; and have this thread panic if we&amp;rsquo;re in that situation.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 을 잡고있는 다른 스레드가 당황한 경우 잠금 호출 이 실패합니다. 이 경우 아무도 잠금을 &lt;code&gt;unwrap&lt;/code&gt; 할 수 없으므로 상황에 처한 경우이 스레드 를 풀고 패닉 상태 로 만들었습니다 .</target>
        </trans-unit>
        <trans-unit id="a399c55a0729e88865a33bb045bf002d26006429" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;panic!&lt;/code&gt; causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: &lt;em&gt;src/main.rs:2:5&lt;/em&gt; indicates that it&amp;rsquo;s the second line, fifth character of our &lt;em&gt;src/main.rs&lt;/em&gt; file.</source>
          <target state="translated">&lt;code&gt;panic!&lt;/code&gt; 전화 ! 마지막 두 줄에 포함 된 오류 메시지가 발생합니다. 첫 번째 줄은 패닉 메시지와 패닉이 발생한 소스 코드의 위치를 ​​보여줍니다. &lt;em&gt;src / main.rs : 2 : 5&lt;/em&gt; 는 이것이 &lt;em&gt;src / main.rs&lt;/em&gt; 파일 의 다섯 번째 문자 인 두 번째 &lt;em&gt;줄임을&lt;/em&gt; 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="76991560cfa9d5bcd0a2eea05c7ac9259a741680" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;parse&lt;/code&gt; could easily cause an error. If, for example, the string contained &lt;code&gt;A👍%&lt;/code&gt;, there would be no way to convert that to a number. Because it might fail, the &lt;code&gt;parse&lt;/code&gt; method returns a &lt;code&gt;Result&lt;/code&gt; type, much as the &lt;code&gt;read_line&lt;/code&gt; method does (discussed earlier in &lt;a href=&quot;#handling-potential-failure-with-the-result-type&quot;&gt;&amp;ldquo;Handling Potential Failure with the &lt;code&gt;Result&lt;/code&gt; Type&amp;rdquo;&lt;/a&gt;). We&amp;rsquo;ll treat this &lt;code&gt;Result&lt;/code&gt; the same way by using the &lt;code&gt;expect&lt;/code&gt; method again. If &lt;code&gt;parse&lt;/code&gt; returns an &lt;code&gt;Err&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; variant because it couldn&amp;rsquo;t create a number from the string, the &lt;code&gt;expect&lt;/code&gt; call will crash the game and print the message we give it. If &lt;code&gt;parse&lt;/code&gt; can successfully convert the string to a number, it will return the &lt;code&gt;Ok&lt;/code&gt; variant of &lt;code&gt;Result&lt;/code&gt;, and &lt;code&gt;expect&lt;/code&gt; will return the number that we want from the &lt;code&gt;Ok&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;parse&lt;/code&gt; 호출로 인해 쉽게 오류가 발생할 수 있습니다. 예를 들어 문자열에 &lt;code&gt;A👍%&lt;/code&gt; 포함되어 있으면 문자열 을 숫자로 변환 할 방법이 없습니다. 실패 할 수 있기 때문에 &lt;code&gt;parse&lt;/code&gt; 메소드는 &lt;code&gt;read_line&lt;/code&gt; 메소드 와 마찬가지로 &lt;code&gt;Result&lt;/code&gt; 유형을 리턴합니다 (이전의 &lt;a href=&quot;#handling-potential-failure-with-the-result-type&quot;&gt;&quot; &lt;/a&gt; &lt;code&gt;Result&lt;/code&gt; 유형으로 잠재적 실패 처리&quot; 에서 논의 됨 ). &lt;code&gt;expect&lt;/code&gt; 메소드를 다시 사용 하여이 &lt;code&gt;Result&lt;/code&gt; 를 같은 방식으로 처리합니다. 경우 &lt;code&gt;parse&lt;/code&gt; 반환 &lt;code&gt;Err&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 변종이 (가) 문자열의 숫자를 생성 할 수 있기 때문에 &lt;code&gt;expect&lt;/code&gt; 호출은 게임을 중단시키고 우리가 제공 한 메시지를 인쇄합니다. 경우 &lt;code&gt;parse&lt;/code&gt; 성공적으로 문자열을 숫자로 변환 할 수 있습니다, 그것은 반환 &lt;code&gt;Ok&lt;/code&gt; 의 변형 &lt;code&gt;Result&lt;/code&gt; 및 &lt;code&gt;expect&lt;/code&gt; 으로부터 우리가 원하는 숫자를 반환 &lt;code&gt;Ok&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="7b69e26d39a3f8839842ab3c559f82019ca9b310" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;recv&lt;/code&gt; blocks, so if there is no job yet, the current thread will wait until a job becomes available. The &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; ensures that only one &lt;code&gt;Worker&lt;/code&gt; thread at a time is trying to request a job.</source>
          <target state="translated">&lt;code&gt;recv&lt;/code&gt; 에 대한 호출이 차단되므로 아직 작업이 없으면 현재 스레드는 작업을 사용할 수있을 때까지 기다립니다. &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 보장하지만 단 하나의 그 &lt;code&gt;Worker&lt;/code&gt; 한 번에 스레드가 작업을 요청하기 위해 노력하고있다.</target>
        </trans-unit>
        <trans-unit id="8993444f4968db6cec0c3f76e82220cf7def7574" translate="yes" xml:space="preserve">
          <source>The caller has to ensure that no references in the supplied thread closure or its return type can outlive the spawned thread's lifetime. This can be guaranteed in two ways:</source>
          <target state="translated">호출자는 제공된 스레드 클로저 또는 해당 반환 유형의 참조가 생성 된 스레드 수명보다 오래 걸리지 않도록해야합니다. 이것은 두 가지 방법으로 보장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="093036972d7bffcd0b16a57c6e2ba75deeb1dca1" translate="yes" xml:space="preserve">
          <source>The caller must also ensure that the memory the pointer (non-transitively) points to is never written to (except inside an &lt;code&gt;UnsafeCell&lt;/code&gt;) using this pointer or any pointer derived from it. If you need to mutate the contents of the slice, use &lt;a href=&quot;#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 또한 이 포인터 또는 그 포인터에서 파생 된 포인터를 사용하여 (비전 이적으로) 포인터가 가리키는 메모리가 ( &lt;code&gt;UnsafeCell&lt;/code&gt; 내부 제외 ) 쓰지 않도록해야합니다. 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbd8e378206e5ebe48537e21894c0d0196aa5c37" translate="yes" xml:space="preserve">
          <source>The caller must also ensure that the memory the pointer (non-transitively) points to is never written to (except inside an &lt;code&gt;UnsafeCell&lt;/code&gt;) using this pointer or any pointer derived from it. If you need to mutate the contents of the slice, use &lt;a href=&quot;struct.vec#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 또한 포인터가 가리키는 메모리 (비전 이적) 가이 포인터 또는 그로부터 파생 된 포인터를 사용하여 ( &lt;code&gt;UnsafeCell&lt;/code&gt; 내부를 제외하고) 절대 기록되지 않도록해야합니다. 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;struct.vec#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2daa4ea0adccac77e0ee2e5186b78bccb935a23d" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the content of the slice is valid UTF-8 before the borrow ends and the underlying &lt;code&gt;str&lt;/code&gt; is used.</source>
          <target state="translated">호출자는 차용이 끝나고 기본 &lt;code&gt;str&lt;/code&gt; 이 사용 되기 전에 슬라이스의 내용이 유효한 UTF-8인지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ac3ada34e0728cb1a740ac35a9a92bd4109e42c8" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the returned pointer is never written to. If you need to mutate the contents of the string slice, use &lt;a href=&quot;#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 반환 된 포인터가 쓰여지지 않도록해야합니다. 문자열 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0c95ecf028004da1510b460935745006e917bea1" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the returned pointer is never written to. If you need to mutate the contents of the string slice, use &lt;a href=&quot;../primitive.str#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 반환 된 포인터가 기록되지 않도록해야합니다. 문자열 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;../primitive.str#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="de2dba4a5088d0450aaa1d7584230c3882b4aa0e" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the returned pointer is never written to. If you need to mutate the contents of the string slice, use &lt;a href=&quot;primitive.str#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출자는 반환 된 포인터가 기록되지 않도록해야합니다. 문자열 슬라이스의 내용을 변경해야하는 경우 &lt;a href=&quot;primitive.str#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0392a3d2bc79f7cc36923d474ab5bb48f657c119" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the slice outlives the pointer this function returns, or else it will end up pointing to garbage.</source>
          <target state="translated">호출자는 슬라이스가이 함수가 반환하는 포인터보다 오래 지속되도록해야합니다. 그렇지 않으면 가비지를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="bf480a8080607d02f4b53d9ea9e935964787c02b" translate="yes" xml:space="preserve">
          <source>The caller must ensure that the vector outlives the pointer this function returns, or else it will end up pointing to garbage. Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid.</source>
          <target state="translated">호출자는 벡터가이 함수가 반환하는 포인터보다 오래 지속되도록해야합니다. 그렇지 않으면 가비지를 가리 킵니다. 벡터를 수정하면 버퍼가 재 할당 될 수 있으며 이에 대한 포인터도 유효하지 않게됩니다.</target>
        </trans-unit>
        <trans-unit id="09005f0066a1b73d30e33e09129bf20aee61c736" translate="yes" xml:space="preserve">
          <source>The calling thread will be blocked until there are no more writers which hold the lock. There may be other readers currently inside the lock when this method returns. This method does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.</source>
          <target state="translated">잠금을 보유한 더 이상 기록기가 없을 때까지 호출 스레드가 차단됩니다. 이 메소드가 리턴 될 때 현재 잠금 내부에 다른 리더가있을 수 있습니다. 이 방법은 논쟁적인 독자 또는 작가가 우선 잠금을 획득 할 것인지의 순서와 관련하여 어떠한 보장도 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c684d1da6df1a86528a2f3d33b0bb20fea3d352" translate="yes" xml:space="preserve">
          <source>The calls to &lt;code&gt;thread::sleep&lt;/code&gt; force a thread to stop its execution for a short duration, allowing a different thread to run. The threads will probably take turns, but that isn&amp;rsquo;t guaranteed: it depends on how your operating system schedules the threads. In this run, the main thread printed first, even though the print statement from the spawned thread appears first in the code. And even though we told the spawned thread to print until &lt;code&gt;i&lt;/code&gt; is 9, it only got to 5 before the main thread shut down.</source>
          <target state="translated">&lt;code&gt;thread::sleep&lt;/code&gt; 대한 호출은 스레드 가 짧은 시간 동안 실행을 중지하도록하여 다른 스레드가 실행될 수 있도록합니다. 스레드는 교대로 진행될 수 있지만 보장되지는 않습니다. 운영 체제가 스레드를 예약하는 방법에 따라 다릅니다. 이 실행에서는 생성 된 스레드의 인쇄 명령문이 코드에서 첫 번째로 표시 되더라도 기본 스레드가 먼저 인쇄됩니다. 그리고 우리가 &lt;code&gt;i&lt;/code&gt; 가 9가 될 때까지 스폰 된 스레드에 인쇄하도록 지시했지만 주 스레드가 종료되기 전에 5에 도달했습니다.</target>
        </trans-unit>
        <trans-unit id="c7560eebffb8ae3cdb259698d7be211bc4620b7e" translate="yes" xml:space="preserve">
          <source>The canonical ExitCode for successful termination on this platform.</source>
          <target state="translated">이 플랫폼에서 성공적인 종료를위한 표준 종료 코드입니다.</target>
        </trans-unit>
        <trans-unit id="8f6ef1b9ea50b970966541a96ea6f822d628893b" translate="yes" xml:space="preserve">
          <source>The canonical ExitCode for unsuccessful termination on this platform.</source>
          <target state="translated">이 플랫폼에서 종료에 실패한 표준 종료 코드입니다.</target>
        </trans-unit>
        <trans-unit id="edfe5292e463236ad7502b40af63d1dc3846bebd" translate="yes" xml:space="preserve">
          <source>The canonical path is only meaningful within a given crate. There is no global namespace across crates; an item's canonical path merely identifies it within the crate.</source>
          <target state="translated">정식 경로는 주어진 상자 내에서만 의미가 있습니다. 상자에 전역 네임 스페이스가 없습니다. 품목의 정식 경로는 상자 내에서 단순히 항목을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="42b8d1ea1b4247711765802c026fc2d790b1362d" translate="yes" xml:space="preserve">
          <source>The canonical safe use of &lt;code&gt;mem::forget&lt;/code&gt; is to circumvent a value's destructor implemented by the &lt;code&gt;Drop&lt;/code&gt; trait. For example, this will leak a &lt;code&gt;File&lt;/code&gt;, i.e. reclaim the space taken by the variable but never close the underlying system resource:</source>
          <target state="translated">&lt;code&gt;mem::forget&lt;/code&gt; 의 표준 안전한 사용은 &lt;code&gt;Drop&lt;/code&gt; 특성에 의해 구현 된 값의 소멸자를 우회하는 것 입니다 . 예를 들어, 이것은 &lt;code&gt;File&lt;/code&gt; 을 누출합니다 . 즉, 변수가 차지하는 공간을 되찾지 만 기본 시스템 리소스를 닫지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1aa3ddcbed06fec001e59bb6f3f1f1da2ef18ef6" translate="yes" xml:space="preserve">
          <source>The capacity may be increased by more than &lt;code&gt;additional&lt;/code&gt; bytes if it chooses, to prevent frequent reallocations.</source>
          <target state="translated">빈번한 재 할당을 방지하기 위해 원하는 경우 용량을 &lt;code&gt;additional&lt;/code&gt; 바이트 이상 늘릴 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e527152d8f3ca4ddc869842d5ee9ae2a46a82fb" translate="yes" xml:space="preserve">
          <source>The capacity of a vector is the amount of space allocated for any future elements that will be added onto the vector. This is not to be confused with the &lt;em&gt;length&lt;/em&gt; of a vector, which specifies the number of actual elements within the vector. If a vector's length exceeds its capacity, its capacity will automatically be increased, but its elements will have to be reallocated.</source>
          <target state="translated">벡터의 용량은 벡터에 추가 될 향후 요소에 할당 된 공간의 양입니다. 이것은 벡터 내의 실제 요소의 수를 지정하는 벡터 의 &lt;em&gt;길이&lt;/em&gt; 와 혼동되어서는 안됩니다 . 벡터의 길이가 용량을 초과하면 용량이 자동으로 증가하지만 요소를 재 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="a70fb21498dabd7b592b7614b4af0ad2efc52b05" translate="yes" xml:space="preserve">
          <source>The capacity will remain at least as large as both the length and the supplied value.</source>
          <target state="translated">용량은 최소한 길이와 제공된 값보다 크게 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="f2f4d42ff0e5eed287aac391d229f38ad7615e31" translate="yes" xml:space="preserve">
          <source>The captured values of a &lt;a href=&quot;types/closure&quot;&gt;closure&lt;/a&gt; are dropped in an unspecified order.</source>
          <target state="translated">&lt;a href=&quot;types/closure&quot;&gt;클로저&lt;/a&gt; 의 캡처 된 값은 지정되지 않은 순서로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="138edd42fa740c68b92f8f2886d9a7cfd608a2f8" translate="yes" xml:space="preserve">
          <source>The changes we needed to make to &lt;code&gt;main&lt;/code&gt; to reassign &lt;code&gt;post&lt;/code&gt; mean that this implementation doesn&amp;rsquo;t quite follow the object-oriented state pattern anymore: the transformations between the states are no longer encapsulated entirely within the &lt;code&gt;Post&lt;/code&gt; implementation. However, our gain is that invalid states are now impossible because of the type system and the type checking that happens at compile time! This ensures that certain bugs, such as display of the content of an unpublished post, will be discovered before they make it to production.</source>
          <target state="translated">우리가 만드는 데 필요한 변경 &lt;code&gt;main&lt;/code&gt; 재 할당 &lt;code&gt;post&lt;/code&gt; 상태 사이의 변환이 더 이상 전적으로 내에서 캡슐화 :이 구현은 상당히 더 이상 객체 지향 상태의 패턴을 따라하지 않는 것을 의미 &lt;code&gt;Post&lt;/code&gt; 구현을. 그러나 우리의 이득은 타입 시스템과 컴파일 타임에 발생하는 타입 검사로 인해 무효 상태가 불가능하다는 것입니다! 이렇게하면 게시되지 않은 게시물의 내용 표시와 같은 특정 버그가 프로덕션에 적용되기 전에 발견 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c6978553f5d9c2a253b6007e164ab1e1253e787" translate="yes" xml:space="preserve">
          <source>The character represented by this escape</source>
          <target state="translated">이 탈출로 대표되는 캐릭터</target>
        </trans-unit>
        <trans-unit id="444f11cad1e3ea489affb1093e4cfe00aec033b8" translate="yes" xml:space="preserve">
          <source>The character type, &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">문자 유형, &lt;code&gt;char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2ab8aadbe1c6203ddb8254dc62679ad2d0d6a50" translate="yes" xml:space="preserve">
          <source>The child inherits from the corresponding parent descriptor.</source>
          <target state="translated">자식은 해당 부모 설명자에서 상속합니다.</target>
        </trans-unit>
        <trans-unit id="57f64da60a0aae4c7ca65b39d52634b157698777" translate="yes" xml:space="preserve">
          <source>The chunks are array references and do not overlap. If &lt;code&gt;N&lt;/code&gt; does not divide the length of the slice, then the last up to &lt;code&gt;N-1&lt;/code&gt; elements will be omitted and can be retrieved from the &lt;code&gt;remainder&lt;/code&gt; function of the iterator.</source>
          <target state="translated">청크는 배열 참조이며 겹치지 않습니다. 경우 &lt;code&gt;N&lt;/code&gt; 은 슬라이스의 길이에 그 마지막 나눌 않는 &lt;code&gt;N-1&lt;/code&gt; 생략한다 요소를 상기에서 검색 할 수 &lt;code&gt;remainder&lt;/code&gt; 반복기의 기능.</target>
        </trans-unit>
        <trans-unit id="15fa38fbe64a63fe95b52b94271d4ba554613043" translate="yes" xml:space="preserve">
          <source>The chunks are mutable array references and do not overlap. If &lt;code&gt;N&lt;/code&gt; does not divide the length of the slice, then the last up to &lt;code&gt;N-1&lt;/code&gt; elements will be omitted and can be retrieved from the &lt;code&gt;into_remainder&lt;/code&gt; function of the iterator.</source>
          <target state="translated">청크는 가변 배열 참조이며 겹치지 않습니다. 경우 &lt;code&gt;N&lt;/code&gt; 은 슬라이스의 길이에 그 마지막 나눌 않는 &lt;code&gt;N-1&lt;/code&gt; 생략한다 요소를 상기에서 검색 할 수 &lt;code&gt;into_remainder&lt;/code&gt; 의 반복기의 기능.</target>
        </trans-unit>
        <trans-unit id="22f36eeee32622c7a505cef344bfce71a990d798" translate="yes" xml:space="preserve">
          <source>The chunks are mutable slices, and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last chunk will not have length &lt;code&gt;chunk_size&lt;/code&gt;.</source>
          <target state="translated">청크는 변경 가능한 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 다음 마지막 청크 길이가 없습니다 &lt;code&gt;chunk_size&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a56cc46096f73dcb9c3581ef24840c1b8a52d3e3" translate="yes" xml:space="preserve">
          <source>The chunks are mutable slices, and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last up to &lt;code&gt;chunk_size-1&lt;/code&gt; elements will be omitted and can be retrieved from the &lt;code&gt;into_remainder&lt;/code&gt; function of the iterator.</source>
          <target state="translated">청크는 가변 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 그 최종 업 할 &lt;code&gt;chunk_size-1&lt;/code&gt; 요소는 생략되며로부터 검색 될 수 &lt;code&gt;into_remainder&lt;/code&gt; 의 반복기의 기능.</target>
        </trans-unit>
        <trans-unit id="b9b82e1f955649f5c987c92e4ad59440a3cb7655" translate="yes" xml:space="preserve">
          <source>The chunks are slices and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last chunk will not have length &lt;code&gt;chunk_size&lt;/code&gt;.</source>
          <target state="translated">청크는 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 다음 마지막 청크 길이가 없습니다 &lt;code&gt;chunk_size&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93ee6025794c31565e33ecdc52225cb4e18501bf" translate="yes" xml:space="preserve">
          <source>The chunks are slices and do not overlap. If &lt;code&gt;chunk_size&lt;/code&gt; does not divide the length of the slice, then the last up to &lt;code&gt;chunk_size-1&lt;/code&gt; elements will be omitted and can be retrieved from the &lt;code&gt;remainder&lt;/code&gt; function of the iterator.</source>
          <target state="translated">청크는 슬라이스이며 겹치지 않습니다. 경우 &lt;code&gt;chunk_size&lt;/code&gt; 슬라이스의 길이를 분할하지 않고, 그 최종 업 할 &lt;code&gt;chunk_size-1&lt;/code&gt; 요소는 생략되며로부터 검색 될 수있는 &lt;code&gt;remainder&lt;/code&gt; 반복기의 기능.</target>
        </trans-unit>
        <trans-unit id="5ab8cfd0030cc999866ad155de372dfc9a291653" translate="yes" xml:space="preserve">
          <source>The closure &lt;code&gt;f&lt;/code&gt; is yielded a &lt;a href=&quot;struct.oncestate&quot;&gt;&lt;code&gt;OnceState&lt;/code&gt;&lt;/a&gt; structure which can be used to query the poison status of the &lt;a href=&quot;struct.once&quot;&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">클로저 &lt;code&gt;f&lt;/code&gt; 는 &lt;a href=&quot;struct.once&quot;&gt; &lt;code&gt;Once&lt;/code&gt; &lt;/a&gt; 의 포이즌 상태를 쿼리하는 데 사용할 수 있는 &lt;a href=&quot;struct.oncestate&quot;&gt; &lt;code&gt;OnceState&lt;/code&gt; &lt;/a&gt; 구조를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="8464cb339a91ac7f9edf87e86826287afbdde678" translate="yes" xml:space="preserve">
          <source>The closure &lt;code&gt;f&lt;/code&gt; is yielded a &lt;a href=&quot;struct.oncestate&quot;&gt;&lt;code&gt;OnceState&lt;/code&gt;&lt;/a&gt; structure which can be used to query the poison status of the &lt;code&gt;Once&lt;/code&gt;.</source>
          <target state="translated">클로저 &lt;code&gt;f&lt;/code&gt; 는 &lt;code&gt;Once&lt;/code&gt; 의 포이즌 상태를 쿼리하는 데 사용할 수 있는 &lt;a href=&quot;struct.oncestate&quot;&gt; &lt;code&gt;OnceState&lt;/code&gt; &lt;/a&gt; 구조를 산출합니다 .</target>
        </trans-unit>
        <trans-unit id="6122336d1e3dc25f0e6a48ca5c6617d72884ddeb" translate="yes" xml:space="preserve">
          <source>The closure &lt;code&gt;f&lt;/code&gt; will only be executed once if this is called concurrently amongst many threads. If that closure panics, however, then it will &lt;em&gt;poison&lt;/em&gt; this &lt;a href=&quot;struct.once&quot;&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt; instance, causing all future invocations of &lt;code&gt;call_once&lt;/code&gt; to also panic.</source>
          <target state="translated">클로저 &lt;code&gt;f&lt;/code&gt; 는 여러 스레드에서 동시에 호출되는 경우 한 번만 실행됩니다. 그 폐쇄 패닉 경우, 그러나, 그것은 것입니다 &lt;em&gt;중독&lt;/em&gt; 이 &lt;a href=&quot;struct.once&quot;&gt; &lt;code&gt;Once&lt;/code&gt; &lt;/a&gt; 이후의 모든 호출의 원인, 예를 &lt;code&gt;call_once&lt;/code&gt; 을 또한 공황에.</target>
        </trans-unit>
        <trans-unit id="1151c6060a40c30d933870c684e8f8c1c9ce7a79" translate="yes" xml:space="preserve">
          <source>The closure &lt;code&gt;f&lt;/code&gt; will only be executed once if this is called concurrently amongst many threads. If that closure panics, however, then it will &lt;em&gt;poison&lt;/em&gt; this &lt;code&gt;Once&lt;/code&gt; instance, causing all future invocations of &lt;code&gt;call_once&lt;/code&gt; to also panic.</source>
          <target state="translated">클로저 &lt;code&gt;f&lt;/code&gt; 는 여러 스레드에서 동시에 호출되는 경우 한 번만 실행됩니다. 그러나 해당 폐쇄 패닉 이 발생 &lt;code&gt;Once&lt;/code&gt; 이 Once 인스턴스 를 &lt;em&gt;중독&lt;/em&gt; 시켜 향후 &lt;code&gt;call_once&lt;/code&gt; 호출이 모두 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="9a9ae7f6f31f6430eeec94354c414e42d745c712" translate="yes" xml:space="preserve">
          <source>The closure can use captures and its environment to track state across iterations. Depending on how the iterator is used, this may require specifying the &lt;a href=&quot;../keyword.move&quot;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt; keyword on the closure.</source>
          <target state="translated">클로저는 캡처 및 해당 환경을 사용하여 반복에서 상태를 추적 할 수 있습니다. 반복기가 사용되는 방법 에 따라 클로저에 &lt;a href=&quot;../keyword.move&quot;&gt; &lt;code&gt;move&lt;/code&gt; &lt;/a&gt; 키워드를 지정해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cbba645c0f92459c3e584dd2aad4e56b6422ddeb" translate="yes" xml:space="preserve">
          <source>The closure can use captures and its environment to track state across iterations. Depending on how the iterator is used, this may require specifying the &lt;code&gt;move&lt;/code&gt; keyword on the closure.</source>
          <target state="translated">클로저는 캡처와 해당 환경을 사용하여 반복에서 상태를 추적 할 수 있습니다. 반복자가 사용되는 방식 에 따라 클로저에 &lt;code&gt;move&lt;/code&gt; 키워드를 지정해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e57e2087c6fad9eaa8a18bdb745b2ddd95bd84c" translate="yes" xml:space="preserve">
          <source>The closure captures the &lt;code&gt;shoe_size&lt;/code&gt; parameter from the environment and compares the value with each shoe&amp;rsquo;s size, keeping only shoes of the size specified. Finally, calling &lt;code&gt;collect&lt;/code&gt; gathers the values returned by the adapted iterator into a vector that&amp;rsquo;s returned by the function.</source>
          <target state="translated">클로저는 환경에서 &lt;code&gt;shoe_size&lt;/code&gt; 매개 변수를 캡처하고 지정된 크기의 신발 만 유지하면서 각 신발의 크기와 값을 비교합니다. 마지막으로 &lt;code&gt;collect&lt;/code&gt; 를 호출 하면 수정 된 반복자가 반환 한 값을 함수가 반환 한 벡터로 수집합니다.</target>
        </trans-unit>
        <trans-unit id="0112db2feb7312ad3c6512257c24783293514225" translate="yes" xml:space="preserve">
          <source>The closure definition comes after the &lt;code&gt;=&lt;/code&gt; to assign it to the variable &lt;code&gt;expensive_closure&lt;/code&gt;. To define a closure, we start with a pair of vertical pipes (&lt;code&gt;|&lt;/code&gt;), inside which we specify the parameters to the closure; this syntax was chosen because of its similarity to closure definitions in Smalltalk and Ruby. This closure has one parameter named &lt;code&gt;num&lt;/code&gt;: if we had more than one parameter, we would separate them with commas, like &lt;code&gt;|param1, param2|&lt;/code&gt;.</source>
          <target state="translated">클로저 정의는 &lt;code&gt;=&lt;/code&gt; 다음에 와서 변수 &lt;code&gt;expensive_closure&lt;/code&gt; 에 할당합니다 . 클로저를 정의하기 위해 클로저에 대한 매개 변수를 지정 하는 한 쌍의 수직 파이프 ( &lt;code&gt;|&lt;/code&gt; )로 시작합니다. 이 구문은 Smalltalk 및 Ruby의 클로저 정의와 유사하기 때문에 선택되었습니다. 이 클로저에는 &lt;code&gt;num&lt;/code&gt; 이라는 하나의 매개 변수가 있습니다. 하나 이상의 매개 변수가 있으면 &lt;code&gt;|param1, param2|&lt;/code&gt; 와 같이 쉼표로 구분합니다. .</target>
        </trans-unit>
        <trans-unit id="1b467eb6733245bc29dea650b68390c954774c96" translate="yes" xml:space="preserve">
          <source>The closure is allowed to return an I/O error whose OS error code will be communicated back to the parent and returned as an error from when the spawn was requested.</source>
          <target state="translated">클로저는 OS 에러 코드가 부모에게 다시 전달되고 스폰이 요청되었을 때의 에러로 반환되는 I / O 에러를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d07950c5510607459c97a1e9bf4b42e15a155b7" translate="yes" xml:space="preserve">
          <source>The closure must return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;filter()&lt;/code&gt; creates an iterator which calls this closure on each element. If the closure returns &lt;code&gt;true&lt;/code&gt;, then the element is returned. If the closure returns &lt;code&gt;false&lt;/code&gt;, it will try again, and call the closure on the next element, seeing if it passes the test.</source>
          <target state="translated">클로저는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다 . &lt;code&gt;filter()&lt;/code&gt; 는 각 요소에서이 클로저를 호출하는 반복자를 만듭니다. 클로저가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 요소가 반환됩니다. 클로저가 &lt;code&gt;false&lt;/code&gt; 를 반환하면 다시 시도하고 다음 요소에서 클로저를 호출하여 테스트를 통과했는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0dfbb8ddc807c0ec7e308a6bcf0502df62203387" translate="yes" xml:space="preserve">
          <source>The closure must return an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;filter_map&lt;/code&gt; creates an iterator which calls this closure on each element. If the closure returns &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(element)&lt;/code&gt;&lt;/a&gt;, then that element is returned. If the closure returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, it will try again, and call the closure on the next element, seeing if it will return &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">클로저는 &lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 반환해야합니다 . &lt;code&gt;filter_map&lt;/code&gt; 은 각 요소에서이 클로저를 호출하는 반복자를 만듭니다. 클로저가 &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(element)&lt;/code&gt; &lt;/a&gt; 반환하면 해당 요소가 반환됩니다. 클로저가 &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; 을&lt;/a&gt; 반환하면 다시 시도하고 다음 요소에서 클로저를 호출하여 &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 이 반환되는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="7a4c6af8980cc5834794f8ba584bb6cebd16567c" translate="yes" xml:space="preserve">
          <source>The closure provided is required to adhere to the &lt;a href=&quot;trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt; trait to ensure that all captured variables are safe to cross this boundary. The purpose of this bound is to encode the concept of &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;exception safety&lt;/a&gt; in the type system. Most usage of this function should not need to worry about this bound as programs are naturally unwind safe without &lt;code&gt;unsafe&lt;/code&gt; code. If it becomes a problem the &lt;a href=&quot;struct.assertunwindsafe&quot;&gt;&lt;code&gt;AssertUnwindSafe&lt;/code&gt;&lt;/a&gt; wrapper struct can be used to quickly assert that the usage here is indeed unwind safe.</source>
          <target state="translated">제공된 폐쇄는 &lt;a href=&quot;trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; &lt;/a&gt; 특성 을 준수하여 캡처 된 모든 변수가이 경계를 안전하게 통과 할 수 있도록해야합니다. 이 범위의 목적은 형식 시스템에서 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;예외 안전&lt;/a&gt; 개념을 인코딩하는 것입니다 . 프로그램이 안전하지 &lt;code&gt;unsafe&lt;/code&gt; 코드 없이 자연스럽게 안전하기 때문에이 기능의 대부분의 사용은이 한계에 대해 걱정할 필요가 없습니다 . 이것이 문제가 &lt;a href=&quot;struct.assertunwindsafe&quot;&gt; &lt;code&gt;AssertUnwindSafe&lt;/code&gt; &lt;/a&gt; 래퍼 구조체를 사용하여 여기에서 사용법이 실제로 안전하다는 것을 신속하게 주장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1db2515eb35827d3b48808ed11db89506d167098" translate="yes" xml:space="preserve">
          <source>The closure uses &lt;code&gt;v&lt;/code&gt;, so it will capture &lt;code&gt;v&lt;/code&gt; and make it part of the closure&amp;rsquo;s environment. Because &lt;code&gt;thread::spawn&lt;/code&gt; runs this closure in a new thread, we should be able to access &lt;code&gt;v&lt;/code&gt; inside that new thread. But when we compile this example, we get the following error:</source>
          <target state="translated">폐쇄의 용도는 &lt;code&gt;v&lt;/code&gt; 에 이 포착 있도록, &lt;code&gt;v&lt;/code&gt; 과 폐쇄의 환경의 일부합니다. 때문에 &lt;code&gt;thread::spawn&lt;/code&gt; 새 스레드에서이 폐쇄를 실행, 우리는 액세스 할 수 있어야 &lt;code&gt;v&lt;/code&gt; 가 새로운 스레드 내부. 그러나이 예제를 컴파일하면 다음과 같은 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d7aca11a6ac0f9ea5173acf1c9757981e77e687c" translate="yes" xml:space="preserve">
          <source>The code associated with each arm is an expression, and the resulting value of the expression in the matching arm is the value that gets returned for the entire &lt;code&gt;match&lt;/code&gt; expression.</source>
          <target state="translated">각 팔과 관련된 코드는 표현식이며 일치하는 팔의 표현식 결과 값은 전체 &lt;code&gt;match&lt;/code&gt; 표현식에 대해 반환되는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="86ec55efa28e5ccc120a1f5241fba708e750dd58" translate="yes" xml:space="preserve">
          <source>The code in Listing 13-17 doesn&amp;rsquo;t do anything; the closure we&amp;rsquo;ve specified never gets called. The warning reminds us why: iterator adaptors are lazy, and we need to consume the iterator here.</source>
          <target state="translated">Listing 13-17의 코드는 아무것도하지 않는다. 우리가 지정한 클로저는 결코 호출되지 않습니다. 경고는 이유를 알려줍니다. 이터레이터 어댑터가 게으 르며 여기에서 이터레이터를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="27595e3e42c890c6fdee5b82c7f1d2b1399713f0" translate="yes" xml:space="preserve">
          <source>The code in Listing 13-3 has multiple calls to the slow calculation function. The first &lt;code&gt;if&lt;/code&gt; block calls &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; twice, the &lt;code&gt;if&lt;/code&gt; inside the outer &lt;code&gt;else&lt;/code&gt; doesn&amp;rsquo;t call it at all, and the code inside the second &lt;code&gt;else&lt;/code&gt; case calls it once.</source>
          <target state="translated">코드 13-3의 코드에는 느린 계산 함수를 여러 번 호출했습니다. 첫 번째 &lt;code&gt;if&lt;/code&gt; 블록 통화 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 두 배의 &lt;code&gt;if&lt;/code&gt; 외부 내부에 &lt;code&gt;else&lt;/code&gt; 전혀 호출하지 않으며, 제 2 내측 코드 &lt;code&gt;else&lt;/code&gt; 경우가 한 번 호출합니다.</target>
        </trans-unit>
        <trans-unit id="984f7b754ab17440aa0c07b718b002aed1594b7a" translate="yes" xml:space="preserve">
          <source>The code in Listing 16-1 not only stops the spawned thread prematurely most of the time due to the main thread ending, but also can&amp;rsquo;t guarantee that the spawned thread will get to run at all. The reason is that there is no guarantee on the order in which threads run!</source>
          <target state="translated">Listing 16-1의 코드는 메인 스레드 종료로 인해 생성 된 스레드를 대부분 조기에 중지 할뿐만 아니라 생성 된 스레드가 전혀 실행되지 않을 수도 있습니다. 스레드 실행 순서가 보장되지 않기 때문입니다!</target>
        </trans-unit>
        <trans-unit id="4d5adfd375cd377b4763e2eeee96a84687acf4e5" translate="yes" xml:space="preserve">
          <source>The code in Listing 16-8 compiled and ran, but it didn&amp;rsquo;t clearly show us that two separate threads were talking to each other over the channel. In Listing 16-10 we&amp;rsquo;ve made some modifications that will prove the code in Listing 16-8 is running concurrently: the spawned thread will now send multiple messages and pause for a second between each message.</source>
          <target state="translated">Listing 16-8의 코드는 컴파일되어 실행되었지만 두 개의 개별 스레드가 채널을 통해 서로 대화하고 있음을 명확하게 보여주지는 못했다. Listing 16-10에서는 Listing 16-8의 코드가 동시에 실행되고 있음을 나타내는 몇 가지 수정 사항이있다. 스폰 된 스레드는 이제 여러 메시지를 보내고 각 메시지 사이에서 1 초 동안 일시 정지한다.</target>
        </trans-unit>
        <trans-unit id="9e7e0566bf3de2c83a460b61c17bb70770c4b1c5" translate="yes" xml:space="preserve">
          <source>The code in Listing 18-1 shows a series of checks for several conditions that decide what the background color should be. For this example, we&amp;rsquo;ve created variables with hardcoded values that a real program might receive from user input.</source>
          <target state="translated">목록 18-1의 코드는 배경색을 결정하는 몇 가지 조건에 대한 일련의 검사를 보여줍니다. 이 예에서는 실제 프로그램이 사용자 입력으로부터 수신 할 수있는 하드 코드 된 값으로 변수를 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="c12405c78a2c0d83f529e2201871e22f52a8474e" translate="yes" xml:space="preserve">
          <source>The code in Listing 18-3 will print the following:</source>
          <target state="translated">목록 18-3의 코드는 다음을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="efe51698d475c0b9864955b57e12d5b79c9bbf35" translate="yes" xml:space="preserve">
          <source>The code in Listing 20-14 will compile but doesn&amp;rsquo;t create any threads yet. We&amp;rsquo;ve changed the definition of &lt;code&gt;ThreadPool&lt;/code&gt; to hold a vector of &lt;code&gt;thread::JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; instances, initialized the vector with a capacity of &lt;code&gt;size&lt;/code&gt;, set up a &lt;code&gt;for&lt;/code&gt; loop that will run some code to create the threads, and returned a &lt;code&gt;ThreadPool&lt;/code&gt; instance containing them.</source>
          <target state="translated">Listing 20-14의 코드는 컴파일되지만 아직 스레드를 생성하지는 않는다. 우리의 정의 변경했습니다 &lt;code&gt;ThreadPool&lt;/code&gt; 이을 (A)의 벡터 개최 &lt;code&gt;thread::JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; 의 용량 벡터 초기화, 인스턴스 &lt;code&gt;size&lt;/code&gt; 설정하는 &lt;code&gt;for&lt;/code&gt; 스레드를 생성하는 몇 가지 코드를 실행 루프, 및 반환 된 그것들을 포함한 &lt;code&gt;ThreadPool&lt;/code&gt; 인스턴스.</target>
        </trans-unit>
        <trans-unit id="d3a6f7dff2487d4bcc7b7e0489bef3c4a5207416" translate="yes" xml:space="preserve">
          <source>The code in Listing 20-20 is responding to requests asynchronously through the use of a thread pool, as we intended. We get some warnings about the &lt;code&gt;workers&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;thread&lt;/code&gt; fields that we&amp;rsquo;re not using in a direct way that reminds us we&amp;rsquo;re not cleaning up anything. When we use the less elegant ctrl-c method to halt the main thread, all other threads are stopped immediately as well, even if they&amp;rsquo;re in the middle of serving a request.</source>
          <target state="translated">목록 20-20의 코드는 의도 한대로 스레드 풀을 사용하여 요청에 비동기 적으로 응답합니다. 우리가 아무것도 정리하지 않는다는 것을 상기시키는 직접적인 방식으로 사용하지 않는 &lt;code&gt;workers&lt;/code&gt; , &lt;code&gt;id&lt;/code&gt; 및 &lt;code&gt;thread&lt;/code&gt; 필드 에 대한 경고를받습니다 . 덜 우아한 ctrl-c 메서드를 사용하여 메인 스레드를 중지하면 요청을 처리하는 중에도 다른 모든 스레드도 즉시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="b9b3fdc249a44ebef0cd41734527cea5bbbbc841" translate="yes" xml:space="preserve">
          <source>The code in Listing 20-21 is responding to requests asynchronously through the use of a thread pool, as we intended. We get some warnings about the &lt;code&gt;workers&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;thread&lt;/code&gt; fields that we&amp;rsquo;re not using in a direct way that reminds us we&amp;rsquo;re not cleaning up anything. When we use the less elegant ctrl-c method to halt the main thread, all other threads are stopped immediately as well, even if they&amp;rsquo;re in the middle of serving a request.</source>
          <target state="translated">Listing 20-21의 코드는 의도 한대로 스레드 풀을 사용하여 비동기 적으로 요청에 응답합니다. 우리는 아무것도 청소하지 않는다는 것을 상기시켜주는 직접적인 방식으로 사용하지 않는 &lt;code&gt;workers&lt;/code&gt; , &lt;code&gt;id&lt;/code&gt; 및 &lt;code&gt;thread&lt;/code&gt; 필드 에 대한 경고를받습니다 . 덜 우아한 ctrl-c 메소드를 사용하여 기본 스레드를 중단하면 다른 모든 스레드는 요청을 처리하는 중이라도 즉시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="af00e0657ebb48c72ab0e8023da460e28c0f23c3" translate="yes" xml:space="preserve">
          <source>The code in Listing 5-7 also creates an instance in &lt;code&gt;user2&lt;/code&gt; that has a different value for &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; but has the same values for the &lt;code&gt;active&lt;/code&gt; and &lt;code&gt;sign_in_count&lt;/code&gt; fields from &lt;code&gt;user1&lt;/code&gt;.</source>
          <target state="translated">Listing 5-7의 코드는 또한 &lt;code&gt;user2&lt;/code&gt; 에서 &lt;code&gt;email&lt;/code&gt; 및 &lt;code&gt;username&lt;/code&gt; 값은 &lt;code&gt;sign_in_count&lt;/code&gt; &lt;code&gt;user1&lt;/code&gt; 과 &lt;code&gt;active&lt;/code&gt; 및 sign_in_count 필드 값은 동일한 인스턴스를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="0531b3f098e465468fd76e222f809f69ed8edfae" translate="yes" xml:space="preserve">
          <source>The code in Listing 8-7 might look like it should work: why should a reference to the first element care about what changes at the end of the vector? This error is due to the way vectors work: adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space, if there isn&amp;rsquo;t enough room to put all the elements next to each other where the vector currently is. In that case, the reference to the first element would be pointing to deallocated memory. The borrowing rules prevent programs from ending up in that situation.</source>
          <target state="translated">Listing 8-7의 코드는 작동하는 것처럼 보일 수있다. 왜 첫 번째 요소에 대한 참조가 벡터의 끝에서 어떤 변화를 고려해야 하는가? 이 오류는 벡터가 작동하는 방식 때문입니다. 벡터 끝에 새 요소를 추가하려면 각 요소 옆에 모든 요소를 ​​배치 할 공간이 충분하지 않은 경우 새 메모리를 할당하고 이전 요소를 새 공간에 복사해야합니다. 벡터가 현재있는 다른 곳. 이 경우 첫 번째 요소에 대한 참조는 할당 해제 된 메모리를 가리 킵니다. 차용 규칙은 프로그램이 해당 상황에서 종료되는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="94cc2f51904c3f9ddd0cfd3520b820c4eb301ad4" translate="yes" xml:space="preserve">
          <source>The code in Listing 9-4 will &lt;code&gt;panic!&lt;/code&gt; no matter why &lt;code&gt;File::open&lt;/code&gt; failed. What we want to do instead is take different actions for different failure reasons: if &lt;code&gt;File::open&lt;/code&gt; failed because the file doesn&amp;rsquo;t exist, we want to create the file and return the handle to the new file. If &lt;code&gt;File::open&lt;/code&gt; failed for any other reason&amp;mdash;for example, because we didn&amp;rsquo;t have permission to open the file&amp;mdash;we still want the code to &lt;code&gt;panic!&lt;/code&gt; in the same way as it did in Listing 9-4. Look at Listing 9-5, which adds an inner &lt;code&gt;match&lt;/code&gt; expression.</source>
          <target state="translated">목록 9-4의 코드는 &lt;code&gt;panic!&lt;/code&gt; &lt;code&gt;File::open&lt;/code&gt; 실패한 이유에 관계없이 우리가 대신하고 싶은 것은 다른 실패 이유로 다른 조치를 취하는 것입니다 . 파일이 존재하지 않아 &lt;code&gt;File::open&lt;/code&gt; 실패한 경우 파일 을 작성하고 핸들을 새 파일로 리턴하려고합니다. 경우 &lt;code&gt;File::open&lt;/code&gt; 우리가 열 수있는 권한이 없어서, 다른 이유로 - 예를 들면 실패 파일을-우리는 여전히 코드가 원하는 &lt;code&gt;panic!&lt;/code&gt; Listing 9-4에서와 같은 방식으로. 내부 &lt;code&gt;match&lt;/code&gt; 표현식 을 추가하는 목록 9-5를보십시오 .</target>
        </trans-unit>
        <trans-unit id="e95fa13e369d6a99c35a00c2091e07ffadc180a6" translate="yes" xml:space="preserve">
          <source>The code is trying to pass &lt;code&gt;receiver&lt;/code&gt; to multiple &lt;code&gt;Worker&lt;/code&gt; instances. This won&amp;rsquo;t work, as you&amp;rsquo;ll recall from Chapter 16: the channel implementation that Rust provides is multiple &lt;em&gt;producer&lt;/em&gt;, single &lt;em&gt;consumer&lt;/em&gt;. This means we can&amp;rsquo;t just clone the consuming end of the channel to fix this code. Even if we could, that is not the technique we would want to use; instead, we want to distribute the jobs across threads by sharing the single &lt;code&gt;receiver&lt;/code&gt; among all the workers.</source>
          <target state="translated">코드가 &lt;code&gt;receiver&lt;/code&gt; 를 여러 &lt;code&gt;Worker&lt;/code&gt; 인스턴스 로 전달하려고 합니다. 16 장 : Rust가 제공하는 채널 구현은 여러 &lt;em&gt;생산자&lt;/em&gt; , 단일 &lt;em&gt;소비자&lt;/em&gt; 라는 것을 기억 하겠지만 이것은 작동하지 않습니다 . 즉,이 코드를 수정하기 위해 채널의 소비 측을 복제 할 수는 없습니다. 우리가 할 수 있더라도 그것은 우리가 사용하고 싶은 기술이 아닙니다. 대신, 모든 작업자간에 단일 &lt;code&gt;receiver&lt;/code&gt; 를 공유하여 스레드간에 작업을 분배하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="404cdeaf9f9f5734a0b6eb5da98e14aed6b8934d" translate="yes" xml:space="preserve">
          <source>The code refers to a trait that is not in scope.</source>
          <target state="translated">코드는 범위에없는 특성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f585d5dc0ef34cc30960f293fe10c97e69068fe3" translate="yes" xml:space="preserve">
          <source>The code that calls this code will then handle getting either an &lt;code&gt;Ok&lt;/code&gt; value that contains a username or an &lt;code&gt;Err&lt;/code&gt; value that contains an &lt;code&gt;io::Error&lt;/code&gt;. We don&amp;rsquo;t know what the calling code will do with those values. If the calling code gets an &lt;code&gt;Err&lt;/code&gt; value, it could call &lt;code&gt;panic!&lt;/code&gt; and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don&amp;rsquo;t have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.</source>
          <target state="translated">이 코드를 호출하는 코드는 사용자 이름이 포함 된 &lt;code&gt;Ok&lt;/code&gt; 값 또는 &lt;code&gt;io::Error&lt;/code&gt; 가 포함 된 &lt;code&gt;Err&lt;/code&gt; 값을 가져 옵니다 . 우리는 호출 코드가 그 값으로 무엇을 할 것인지 모른다. 호출 코드가 &lt;code&gt;Err&lt;/code&gt; 값을 얻으면 &lt;code&gt;panic!&lt;/code&gt; 호출 할 수 있습니다 ! 예를 들어 프로그램을 중단 시키거나 기본 사용자 이름을 사용하거나 파일이 아닌 다른 곳에서 사용자 이름을 검색하십시오. 호출 코드가 실제로 수행하려는 작업에 대한 정보가 충분하지 않으므로 모든 성공 또는 오류 정보를 상향 처리하여 적절하게 처리합니다.</target>
        </trans-unit>
        <trans-unit id="cfac4f190729188f4689af6ae5b0042be7b9afad" translate="yes" xml:space="preserve">
          <source>The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="translated">컬렉션은 빈번한 재 할당을 피하기 위해 더 많은 공간을 예약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a921d34f1378e463d6297235d9b237b6a37c1373" translate="yes" xml:space="preserve">
          <source>The comma following &lt;code&gt;$()&lt;/code&gt; indicates that a literal comma separator character could optionally appear after the code that matches the code in &lt;code&gt;$()&lt;/code&gt;. The &lt;code&gt;*&lt;/code&gt; specifies that the pattern matches zero or more of whatever precedes the &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">쉼표 다음 &lt;code&gt;$()&lt;/code&gt; 리터럴 쉼표 구분 문자가 선택적으로의 코드와 일치하는 코드 뒤에 나타날 수 있음을 나타냅니다 &lt;code&gt;$()&lt;/code&gt; . &lt;code&gt;*&lt;/code&gt; 지정 패턴 일치 제로 것을 이상 무엇이든의 앞에 &lt;code&gt;*&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="1bacb24582ff767b21e31f4cc1ad3d6012f25a0b" translate="yes" xml:space="preserve">
          <source>The command downloads a script and starts the installation of the &lt;code&gt;rustup&lt;/code&gt; tool, which installs the latest stable version of Rust. You might be prompted for your password. If the install is successful, the following line will appear:</source>
          <target state="translated">이 명령은 스크립트를 다운로드 하고 최신 안정 버전의 Rust를 설치하는 &lt;code&gt;rustup&lt;/code&gt; 도구 설치를 시작합니다 . 비밀번호를 묻는 메시지가 표시 될 수 있습니다. 성공적으로 설치되면 다음 줄이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="73b43b32097905758197f28a5b18a2fd54ae6279" translate="yes" xml:space="preserve">
          <source>The common part of these two paths is &lt;code&gt;std::io&lt;/code&gt;, and that&amp;rsquo;s the complete first path. To merge these two paths into one &lt;code&gt;use&lt;/code&gt; statement, we can use &lt;code&gt;self&lt;/code&gt; in the nested path, as shown in Listing 7-20.</source>
          <target state="translated">이 두 경로의 공통 부분은 &lt;code&gt;std::io&lt;/code&gt; 이며 이것이 첫 번째 전체 경로입니다. 이 두 경로를 하나의 &lt;code&gt;use&lt;/code&gt; 문 으로 병합하기 위해 Listing 7-20에 표시된 것처럼 중첩 경로에서 &lt;code&gt;self&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3e8778a56f7c16d517be41bfd502f5b861a15290" translate="yes" xml:space="preserve">
          <source>The comparator function must define a total ordering for the elements in the slice. If the ordering is not total, the order of the elements is unspecified. An order is a total order if it is (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">비교기 함수는 슬라이스의 요소에 대한 총 순서를 정의해야합니다. 순서가 총계가 아닌 경우 요소의 순서는 지정되지 않습니다. 주문은 다음과 같은 경우 총 주문입니다 (모든 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="aebc23a2aec802159973c4b13320302322bbb426" translate="yes" xml:space="preserve">
          <source>The comparator function must define a total ordering for the elements in the slice. If the ordering is not total, the order of the elements is unspecified. An order is a total order if it is (for all a, b and c):</source>
          <target state="translated">비교기 함수는 슬라이스의 요소에 대한 총 순서를 정의해야합니다. 순서가 총계가 아닌 경우 요소의 순서는 지정되지 않습니다. 주문은 다음과 같은 경우 총 주문입니다 (모든 a, b 및 c에 해당).</target>
        </trans-unit>
        <trans-unit id="92ccf3fc61c0a63453fa6ca42d0beca2274f875f" translate="yes" xml:space="preserve">
          <source>The comparator function should implement an order consistent with the sort order of the underlying slice, returning an order code that indicates whether its argument is &lt;code&gt;Less&lt;/code&gt;, &lt;code&gt;Equal&lt;/code&gt; or &lt;code&gt;Greater&lt;/code&gt; the desired target.</source>
          <target state="translated">비교기 함수는 기본 슬라이스의 정렬 순서와 일치하는 순서를 구현하여 인수가 &lt;code&gt;Less&lt;/code&gt; , &lt;code&gt;Equal&lt;/code&gt; 또는 &lt;code&gt;Greater&lt;/code&gt; 인지 여부를 나타내는 순서 코드를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="45e688bbffc9733765a7b6aca03992e2d5e377a5" translate="yes" xml:space="preserve">
          <source>The comparison must satisfy, for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;:</source>
          <target state="translated">비교는 모든 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; 를 충족시켜야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c2765074489dd525efeb165a25dbc97454a652e" translate="yes" xml:space="preserve">
          <source>The compilation didn&amp;rsquo;t produce any errors, but the program resulted in a &lt;em&gt;runtime&lt;/em&gt; error and didn&amp;rsquo;t exit successfully. When you attempt to access an element using indexing, Rust will check that the index you&amp;rsquo;ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic.</source>
          <target state="translated">컴파일 &lt;em&gt;시&lt;/em&gt; 오류가 발생하지 않았지만 프로그램에서 &lt;em&gt;런타임&lt;/em&gt; 오류가 발생하여 종료되지 않았습니다. 색인 생성을 사용하여 요소에 액세스하려고하면 Rust는 지정한 색인이 배열 길이보다 작은 지 확인합니다. 인덱스가 배열 길이보다 크거나 같으면 Rust가 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="0a0cf1febd61e4c4aeb0165c7c721394953162c8" translate="yes" xml:space="preserve">
          <source>The compilation model centers on artifacts called &lt;em&gt;crates&lt;/em&gt;. Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or some sort of library.&lt;sup&gt;&lt;a href=&quot;#cratesourcefile&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">컴파일 모델은 &lt;em&gt;crates&lt;/em&gt; 라는 아티팩트를 중심으로합니다 . 각 컴파일은 소스 형식의 단일 크레이트를 처리하고, 성공하면 실행 파일 또는 일종의 라이브러리와 같은 바이너리 형식의 단일 크레이트를 생성합니다. &lt;sup&gt;&lt;a href=&quot;#cratesourcefile&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="25f0592827e30de97cacdd81a110584696dcea70" translate="yes" xml:space="preserve">
          <source>The compilation model centers on artifacts called &lt;em&gt;crates&lt;/em&gt;. Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or some sort of library.&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#cratesourcefile&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">컴파일 모델은 &lt;em&gt;크레이트&lt;/em&gt; 라는 아티팩트를 중심으로합니다 . 각 컴파일은 소스 형태로 단일 상자를 처리하고 성공하면 실행 파일 또는 일종의 라이브러리와 같은 이진 형태로 단일 상자를 생성합니다. &lt;sup&gt;&lt;a href=&quot;crates-and-source-files#cratesourcefile&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
