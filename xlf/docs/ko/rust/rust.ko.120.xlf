<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="f4251e0f413cd3f41f3df9bb22d15a8115a98157" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );* $(h)*&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt;, &amp;epsilon;, &lt;code&gt;h&lt;/code&gt; }</source>
          <target state="translated">LAST ( &lt;code&gt;$( $d:ident $e:expr );* $(h)*&lt;/code&gt; ) = { &lt;code&gt;$e:expr&lt;/code&gt; , &amp;epsilon;, &lt;code&gt;h&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="7ff61fa787f2c62adc8ee173405366e66cca6711" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );*&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt;, &amp;epsilon; }</source>
          <target state="translated">LAST ( &lt;code&gt;$( $d:ident $e:expr );*&lt;/code&gt; ) = { &lt;code&gt;$e:expr&lt;/code&gt; , &amp;epsilon;}</target>
        </trans-unit>
        <trans-unit id="37aef063f183280d4f7dc041920c02a28b503744" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$d:ident $e:expr&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt; }</source>
          <target state="translated">마지막 ( &lt;code&gt;$d:ident $e:expr&lt;/code&gt; ) = { &lt;code&gt;$e:expr&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="7fab544af8af2c23b62871343f4c928563121b43" translate="yes" xml:space="preserve">
          <source>LAST(M), defined by case analysis on M itself (a sequence of token-trees):</source>
          <target state="translated">M 자체 (시퀀스 트리 시퀀스)에 대한 사례 분석으로 정의 된 LAST (M) :</target>
        </trans-unit>
        <trans-unit id="f85099a357b111ba1d477f0dbd426a597f6e3435" translate="yes" xml:space="preserve">
          <source>LAST(M): collects the tokens potentially used last when matching a fragment to M.</source>
          <target state="translated">LAST (M) : 프래그먼트를 M과 일치시킬 때 마지막으로 사용 된 토큰을 수집합니다.</target>
        </trans-unit>
        <trans-unit id="e8ea6b99f854e01dbe363d86b29cecae5304f225" translate="yes" xml:space="preserve">
          <source>LIFETIME_OR_LABEL</source>
          <target state="translated">LIFETIME_OR_LABEL</target>
        </trans-unit>
        <trans-unit id="40a1fdbb26c080098fc98bb4705851d4859ab4d3" translate="yes" xml:space="preserve">
          <source>LIFETIME_OR_LABEL :</source>
          <target state="translated">LIFETIME_OR_LABEL :</target>
        </trans-unit>
        <trans-unit id="46318a9c5b3843dedcc74d3eda791e4202987f7e" translate="yes" xml:space="preserve">
          <source>LIFETIME_TOKEN :</source>
          <target state="translated">LIFETIME_TOKEN :</target>
        </trans-unit>
        <trans-unit id="ed2747925f72878526dce1d4b02fb7c509e9b22b" translate="yes" xml:space="preserve">
          <source>LINE_COMMENT :</source>
          <target state="translated">LINE_COMMENT :</target>
        </trans-unit>
        <trans-unit id="f87b1be490e7f2bd1d43aa401d9acb86c892b5d9" translate="yes" xml:space="preserve">
          <source>LLVM checks the validity of the constraints and the assembly string passed to it. This error implies that LLVM seems something wrong with the inline assembly call.</source>
          <target state="translated">LLVM은 구속 조건의 유효성과 전달 된 어셈블리 문자열을 확인합니다. 이 오류는 LLVM이 인라인 어셈블리 호출에 문제가있는 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b658c08127be6d116e98bc8876055e873db0602" translate="yes" xml:space="preserve">
          <source>LLVM-style inline assembly.</source>
          <target state="translated">LLVM 스타일 인라인 어셈블리.</target>
        </trans-unit>
        <trans-unit id="4c275bc5d1a4e6d0414829b996cfcec4698e44c4" translate="yes" xml:space="preserve">
          <source>LN_10</source>
          <target state="translated">LN_10</target>
        </trans-unit>
        <trans-unit id="6a259766cb7d3ece474214d8a5b06e89f14ab44c" translate="yes" xml:space="preserve">
          <source>LN_2</source>
          <target state="translated">LN_2</target>
        </trans-unit>
        <trans-unit id="98673bb5e17015cbf16ed84d89d8f970845d818b" translate="yes" xml:space="preserve">
          <source>LOG10_2</source>
          <target state="translated">LOG10_2</target>
        </trans-unit>
        <trans-unit id="66e6842f3da223e16de827da3acf936ddc9d0df5" translate="yes" xml:space="preserve">
          <source>LOG10_E</source>
          <target state="translated">LOG10_E</target>
        </trans-unit>
        <trans-unit id="615a1422d501618265e393e3550ecb5f40f525ea" translate="yes" xml:space="preserve">
          <source>LOG2_10</source>
          <target state="translated">LOG2_10</target>
        </trans-unit>
        <trans-unit id="1e3656097aebf0f10597eae43f1c807651a96817" translate="yes" xml:space="preserve">
          <source>LOG2_E</source>
          <target state="translated">LOG2_E</target>
        </trans-unit>
        <trans-unit id="64b87b109e5db684a74aa921ff29dc63050bf704" translate="yes" xml:space="preserve">
          <source>Lang items are already implemented in the standard library. Unless you are writing a free-standing application (e.g., a kernel), you do not need to provide them yourself.</source>
          <target state="translated">Lang 항목은 이미 표준 라이브러리에 구현되어 있습니다. 독립형 응용 프로그램 (예 : 커널)을 작성하지 않는 한 직접 제공 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="ec882b1a036e4071e5191bd244e46720429e3479" translate="yes" xml:space="preserve">
          <source>Languages without case are not changed:</source>
          <target state="translated">대소 문자가없는 언어는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8f3396549fa1fe2041e1f31d203c0b16d63a7207" translate="yes" xml:space="preserve">
          <source>Large amounts of data are being stored</source>
          <target state="translated">많은 양의 데이터가 저장되고 있습니다</target>
        </trans-unit>
        <trans-unit id="d3612663cc19e49c3a2d261d922690a9fc7582ed" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f32&lt;/code&gt; value.</source>
          <target state="translated">가장 큰 유한 &lt;code&gt;f32&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="cdef2a389723afff7da4b608a1325e2bd13839b5" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f32&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f32#associatedconstant.MAX&quot;&gt;&lt;code&gt;f32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">최대 유한 &lt;code&gt;f32&lt;/code&gt; 값입니다. 대신 &lt;a href=&quot;../primitive.f32#associatedconstant.MAX&quot;&gt; &lt;code&gt;f32::MAX&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f275a12dc16bf46e1c9b02d6b9bdd0fdd3cd4f44" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f64&lt;/code&gt; value.</source>
          <target state="translated">가장 큰 유한 &lt;code&gt;f64&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="caa7ded1cda53ab540342fa3edd4f2916d1b87b9" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f64&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f64#associatedconstant.MAX&quot;&gt;&lt;code&gt;f64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">최대 유한 &lt;code&gt;f64&lt;/code&gt; 값입니다. 대신 &lt;a href=&quot;../primitive.f64#associatedconstant.MAX&quot;&gt; &lt;code&gt;f64::MAX&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a58d72036ad47fa0a1439cec22ee87f753fd7e3f" translate="yes" xml:space="preserve">
          <source>Last, but certainly not least, is &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;. This type is used as the return type of many &lt;code&gt;std::io&lt;/code&gt; functions that can cause an error, and can be returned from your own functions as well. Many of the examples in this module use the &lt;a href=&quot;../../book/appendix-02-operators&quot;&gt;&lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="translated">마지막으로 &lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; 입니다. 이 유형은 오류가 발생할 수있는 많은 &lt;code&gt;std::io&lt;/code&gt; 함수 의 리턴 유형으로 사용되며 자체 함수에서도 리턴 될 수 있습니다. 이 모듈의 많은 예제는 &lt;a href=&quot;../../book/appendix-02-operators&quot;&gt; &lt;code&gt;?&lt;/code&gt; 운영자&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="972ad8d8a50397ba8c02433ed8f048eeb4074b85" translate="yes" xml:space="preserve">
          <source>Layout</source>
          <target state="translated">Layout</target>
        </trans-unit>
        <trans-unit id="ae8568d10c64dba6b746ac76005e66dab74cb9ab" translate="yes" xml:space="preserve">
          <source>Layout of a block of memory.</source>
          <target state="translated">메모리 블록의 레이아웃.</target>
        </trans-unit>
        <trans-unit id="7d4179a87c3ab99e827a9f6e1aa71781644d0b85" translate="yes" xml:space="preserve">
          <source>Layout::align</source>
          <target state="translated">Layout::align</target>
        </trans-unit>
        <trans-unit id="2b7cae98e285326dfa8874cd827b7060dafbb97f" translate="yes" xml:space="preserve">
          <source>Layout::align_to</source>
          <target state="translated">Layout::align_to</target>
        </trans-unit>
        <trans-unit id="6ffbac24ba5cb9cdd880e70819658687db1a163d" translate="yes" xml:space="preserve">
          <source>Layout::array</source>
          <target state="translated">Layout::array</target>
        </trans-unit>
        <trans-unit id="faf545bb524583c428a14d8796fd332e8b1f4538" translate="yes" xml:space="preserve">
          <source>Layout::borrow</source>
          <target state="translated">Layout::borrow</target>
        </trans-unit>
        <trans-unit id="6e7c904826d6356b87a5fd10b67922e27e248f36" translate="yes" xml:space="preserve">
          <source>Layout::borrow_mut</source>
          <target state="translated">Layout::borrow_mut</target>
        </trans-unit>
        <trans-unit id="e98c55355125dbd6a52d2480ae5f678bafc47354" translate="yes" xml:space="preserve">
          <source>Layout::clone</source>
          <target state="translated">Layout::clone</target>
        </trans-unit>
        <trans-unit id="2687d55f8151ff4e3d3dfd56105fc50d005dbef6" translate="yes" xml:space="preserve">
          <source>Layout::clone_from</source>
          <target state="translated">Layout::clone_from</target>
        </trans-unit>
        <trans-unit id="d247f8af0b3641c1febfca5a66104f7e6cd7ae07" translate="yes" xml:space="preserve">
          <source>Layout::clone_into</source>
          <target state="translated">Layout::clone_into</target>
        </trans-unit>
        <trans-unit id="28c4c39a207293b5ac856dadaca01591e69acdf2" translate="yes" xml:space="preserve">
          <source>Layout::eq</source>
          <target state="translated">Layout::eq</target>
        </trans-unit>
        <trans-unit id="807fbd84446164c635ef92d05b4f032e4e469c63" translate="yes" xml:space="preserve">
          <source>Layout::extend</source>
          <target state="translated">Layout::extend</target>
        </trans-unit>
        <trans-unit id="8a66e95e85ef65243dad3fec906d59a444e63307" translate="yes" xml:space="preserve">
          <source>Layout::extend_packed</source>
          <target state="translated">Layout::extend_packed</target>
        </trans-unit>
        <trans-unit id="ebdf1907153114cac58ba5ec846d319f09e3c275" translate="yes" xml:space="preserve">
          <source>Layout::fmt</source>
          <target state="translated">Layout::fmt</target>
        </trans-unit>
        <trans-unit id="aab6fc5da3370994e8eb6ae5619aeb20b2942b01" translate="yes" xml:space="preserve">
          <source>Layout::for_value</source>
          <target state="translated">Layout::for_value</target>
        </trans-unit>
        <trans-unit id="804e6daf71de8cbddc2847d4efac40f08b730f12" translate="yes" xml:space="preserve">
          <source>Layout::from</source>
          <target state="translated">Layout::from</target>
        </trans-unit>
        <trans-unit id="9c52da202dbc1e86eb154e999a408fd8e5fbffba" translate="yes" xml:space="preserve">
          <source>Layout::from_size_align</source>
          <target state="translated">Layout::from_size_align</target>
        </trans-unit>
        <trans-unit id="97f7ac20412edfee9be62fc236598951052b803a" translate="yes" xml:space="preserve">
          <source>Layout::from_size_align_unchecked</source>
          <target state="translated">Layout::from_size_align_unchecked</target>
        </trans-unit>
        <trans-unit id="9cb8530d3128b6bd4c274c8e7e0e34f2f70b863a" translate="yes" xml:space="preserve">
          <source>Layout::into</source>
          <target state="translated">Layout::into</target>
        </trans-unit>
        <trans-unit id="e888b6d02ea4794c5fef327a295c976cc60f99e3" translate="yes" xml:space="preserve">
          <source>Layout::ne</source>
          <target state="translated">Layout::ne</target>
        </trans-unit>
        <trans-unit id="f8038f15aebe6dce4d4de95b3c13e472d2b02064" translate="yes" xml:space="preserve">
          <source>Layout::new</source>
          <target state="translated">Layout::new</target>
        </trans-unit>
        <trans-unit id="c67933e7b53ec19707602158f0983ec3386107e4" translate="yes" xml:space="preserve">
          <source>Layout::pad_to_align</source>
          <target state="translated">Layout::pad_to_align</target>
        </trans-unit>
        <trans-unit id="fb534b2d9180d9c41c85be4f3cc7a5e10900d871" translate="yes" xml:space="preserve">
          <source>Layout::padding_needed_for</source>
          <target state="translated">Layout::padding_needed_for</target>
        </trans-unit>
        <trans-unit id="a53e256b922777e3d8b52ed41502d58861453b8a" translate="yes" xml:space="preserve">
          <source>Layout::repeat</source>
          <target state="translated">Layout::repeat</target>
        </trans-unit>
        <trans-unit id="ac76fcd730f9145d3ef5771a73793f24557f189a" translate="yes" xml:space="preserve">
          <source>Layout::repeat_packed</source>
          <target state="translated">Layout::repeat_packed</target>
        </trans-unit>
        <trans-unit id="39b88a7f119bc78ddb9f4adea7781765100ba7de" translate="yes" xml:space="preserve">
          <source>Layout::size</source>
          <target state="translated">Layout::size</target>
        </trans-unit>
        <trans-unit id="4fc54c6aa1d00c912811a3198ba6c26a31cb141d" translate="yes" xml:space="preserve">
          <source>Layout::to_owned</source>
          <target state="translated">Layout::to_owned</target>
        </trans-unit>
        <trans-unit id="ec3e4dd97b8bdfbb69e8e8a4fe407933742763da" translate="yes" xml:space="preserve">
          <source>Layout::try_from</source>
          <target state="translated">Layout::try_from</target>
        </trans-unit>
        <trans-unit id="e7254c8b2c904f17a579a6512de1c3f53903e338" translate="yes" xml:space="preserve">
          <source>Layout::try_into</source>
          <target state="translated">Layout::try_into</target>
        </trans-unit>
        <trans-unit id="69613b626753f65b515ca28b5fe4fd7436a0a88d" translate="yes" xml:space="preserve">
          <source>Layout::type_id</source>
          <target state="translated">Layout::type_id</target>
        </trans-unit>
        <trans-unit id="6b15514a909ca7b027740ad8a4c4fe6fbfdeead1" translate="yes" xml:space="preserve">
          <source>LayoutErr</source>
          <target state="translated">LayoutErr</target>
        </trans-unit>
        <trans-unit id="18ae5986925972906df162748403c4571a3bd382" translate="yes" xml:space="preserve">
          <source>LayoutErr::borrow</source>
          <target state="translated">LayoutErr::borrow</target>
        </trans-unit>
        <trans-unit id="92579002fabcdb4525eb6353397c1fc960583290" translate="yes" xml:space="preserve">
          <source>LayoutErr::borrow_mut</source>
          <target state="translated">LayoutErr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1c9995b499c2000f5ea89f003f69988ad4d9295a" translate="yes" xml:space="preserve">
          <source>LayoutErr::cause</source>
          <target state="translated">LayoutErr::cause</target>
        </trans-unit>
        <trans-unit id="8694453e9f4b16d83cc25ab2975ab170ff1ad8c9" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone</source>
          <target state="translated">LayoutErr::clone</target>
        </trans-unit>
        <trans-unit id="b630e1b5713feb7087721a06315e5b984a418a6f" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone_from</source>
          <target state="translated">LayoutErr::clone_from</target>
        </trans-unit>
        <trans-unit id="c42cb73e4c87ec15d8bccdf73bd650c9df417b9b" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone_into</source>
          <target state="translated">LayoutErr::clone_into</target>
        </trans-unit>
        <trans-unit id="3d5c517ec7fe54611274ae766b7e9a7911dc4865" translate="yes" xml:space="preserve">
          <source>LayoutErr::description</source>
          <target state="translated">LayoutErr::description</target>
        </trans-unit>
        <trans-unit id="497868f6f797da1325f8a9e9334379ca52fe4d37" translate="yes" xml:space="preserve">
          <source>LayoutErr::eq</source>
          <target state="translated">LayoutErr::eq</target>
        </trans-unit>
        <trans-unit id="3e42ce22d91446434898d46efd3223372301d536" translate="yes" xml:space="preserve">
          <source>LayoutErr::fmt</source>
          <target state="translated">LayoutErr::fmt</target>
        </trans-unit>
        <trans-unit id="73c4ad8234e8ca96453bac67aff91d0248f854d8" translate="yes" xml:space="preserve">
          <source>LayoutErr::from</source>
          <target state="translated">LayoutErr::from</target>
        </trans-unit>
        <trans-unit id="c3349dca57dd20451bc1fb01674dae961d63e9ce" translate="yes" xml:space="preserve">
          <source>LayoutErr::into</source>
          <target state="translated">LayoutErr::into</target>
        </trans-unit>
        <trans-unit id="f0f74e1ec8093e352aa9e8a3fd380fef9597b057" translate="yes" xml:space="preserve">
          <source>LayoutErr::ne</source>
          <target state="translated">LayoutErr::ne</target>
        </trans-unit>
        <trans-unit id="13438de55c63f100651925816f56012c5f1b1197" translate="yes" xml:space="preserve">
          <source>LayoutErr::source</source>
          <target state="translated">LayoutErr::source</target>
        </trans-unit>
        <trans-unit id="3bbdcbefa6e28507c6b0c6c634c7c7dc826a8bf4" translate="yes" xml:space="preserve">
          <source>LayoutErr::to_owned</source>
          <target state="translated">LayoutErr::to_owned</target>
        </trans-unit>
        <trans-unit id="2ec834ea6aa3644afac64a7ad23be1e1d6c10755" translate="yes" xml:space="preserve">
          <source>LayoutErr::to_string</source>
          <target state="translated">LayoutErr::to_string</target>
        </trans-unit>
        <trans-unit id="569d09cda7ad780d06bfd86cc93c53c21d1d507f" translate="yes" xml:space="preserve">
          <source>LayoutErr::try_from</source>
          <target state="translated">LayoutErr::try_from</target>
        </trans-unit>
        <trans-unit id="da95ddd29b8a42941df811e96eda4d3f3b529f15" translate="yes" xml:space="preserve">
          <source>LayoutErr::try_into</source>
          <target state="translated">LayoutErr::try_into</target>
        </trans-unit>
        <trans-unit id="b157e123211e4f6e633b31e52c5a1dcb6f18cc93" translate="yes" xml:space="preserve">
          <source>LayoutErr::type_id</source>
          <target state="translated">LayoutErr::type_id</target>
        </trans-unit>
        <trans-unit id="882d7824546e260d7aecb582ca23a9e9525d35d8" translate="yes" xml:space="preserve">
          <source>Laziness</source>
          <target state="translated">Laziness</target>
        </trans-unit>
        <trans-unit id="84e98cf97551805d46a1030b73cb47aa40988008" translate="yes" xml:space="preserve">
          <source>Lazy</source>
          <target state="translated">Lazy</target>
        </trans-unit>
        <trans-unit id="1a855a2a58b53f62fc3df50bb4fbd170d6d9104f" translate="yes" xml:space="preserve">
          <source>Lazy boolean operators</source>
          <target state="translated">게으른 부울 연산자</target>
        </trans-unit>
        <trans-unit id="7e80f065af51812290038b5aef5b515381e7b069" translate="yes" xml:space="preserve">
          <source>Lazy values and one-time initialization of static data.</source>
          <target state="translated">지연 값 및 정적 데이터의 일회성 초기화.</target>
        </trans-unit>
        <trans-unit id="e07edacb2555a09c495279c3384f36a675435d8d" translate="yes" xml:space="preserve">
          <source>Le</source>
          <target state="translated">Le</target>
        </trans-unit>
        <trans-unit id="5c517a3f3609c8f91e1addb0b08b45eb552a8056" translate="yes" xml:space="preserve">
          <source>Leading and trailing whitespace represent an error.</source>
          <target state="translated">선행 및 후행 공백은 오류를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="171d90f8bc7e44b38d039153f89d2f57be6e9170" translate="yes" xml:space="preserve">
          <source>Leak an I/O object, never closing the file:</source>
          <target state="translated">파일을 닫지 않고 I / O 객체를 누출시킵니다.</target>
        </trans-unit>
        <trans-unit id="0c87712acc6d428c2446529002e5d51f0d06f2b8" translate="yes" xml:space="preserve">
          <source>Leaks of memory and other resources</source>
          <target state="translated">기억과 다른 자원의 누수</target>
        </trans-unit>
        <trans-unit id="4a0f6a000e4abc155c2355349886b493447a871e" translate="yes" xml:space="preserve">
          <source>Learn a bit about TCP and HTTP.</source>
          <target state="translated">TCP 및 HTTP에 대해 조금 배우십시오.</target>
        </trans-unit>
        <trans-unit id="3b3bf48bce1a18fd95b7ca358e1f16b46d7a4f20" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;reference/attributes#conditional-compilation&quot;&gt;Conditional Compilation&lt;/a&gt; section of the Reference.</source>
          <target state="translated">참조 의 &lt;a href=&quot;reference/attributes#conditional-compilation&quot;&gt;조건부 컴파일&lt;/a&gt; 섹션 에서 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="ffa043ac5ac41e3aca9c9c60cce1514c7ae3f12a" translate="yes" xml:space="preserve">
          <source>Least upper bound coercions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee627fb00174e09c28a9f8c4feb833b6e5f743c" translate="yes" xml:space="preserve">
          <source>Leaves the original &lt;code&gt;Option&lt;/code&gt; in-place, creating a new one containing a mutable reference to the inner type's &lt;code&gt;Deref::Target&lt;/code&gt; type.</source>
          <target state="translated">원래 &lt;code&gt;Option&lt;/code&gt; 을 제자리에두고 내부 유형의 &lt;code&gt;Deref::Target&lt;/code&gt; 유형에 대한 변경 가능한 참조를 포함하는 새 옵션 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d7cf535c3451fcfd6307510b8776e34c835efbed" translate="yes" xml:space="preserve">
          <source>Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">원래 옵션을 제자리에두고 원래 옵션에 대한 참조가있는 새 옵션을 만들고 &lt;a href=&quot;../ops/trait.deref&quot;&gt; &lt;code&gt;Deref&lt;/code&gt; &lt;/a&gt; 를 통해 콘텐츠를 추가로 강제합니다 .</target>
        </trans-unit>
        <trans-unit id="c2c694f6b8cb7b00330c4d48a5ced6de4ae07bc6" translate="yes" xml:space="preserve">
          <source>Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">원본 옵션을 그대로두고 원본 옵션을 참조하여 새 옵션을 만들고 &lt;code&gt;Deref&lt;/code&gt; 를 통해 내용을 추가로 강제합니다 .</target>
        </trans-unit>
        <trans-unit id="fbc8d1a601145e0b8a0f4e2783062a13702a5915" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing both the &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; arms of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">원래 결과를 제자리에두고 원래 결과를 참조하여 새 결과를 &lt;code&gt;Deref&lt;/code&gt; 를 통해 결과 의 &lt;code&gt;Ok&lt;/code&gt; 및 &lt;code&gt;Err&lt;/code&gt; 팔을 추가로 강제합니다 .</target>
        </trans-unit>
        <trans-unit id="35c9a587594a401fda69e05b935e4d8b2ac65ada" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing the &lt;code&gt;Err&lt;/code&gt; arm of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">원래 결과를 제자리에 남겨두고 원래 결과를 참조하여 새 결과를 &lt;code&gt;Deref&lt;/code&gt; 를 통해 결과 의 &lt;code&gt;Err&lt;/code&gt; 팔을 추가로 강제합니다 .</target>
        </trans-unit>
        <trans-unit id="50d3f8b919eb6aee8c76227d9ffbe9d9e4ef3631" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing the &lt;code&gt;Ok&lt;/code&gt; arm of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">원래 결과를 제자리에 남겨두고 원래 결과를 참조하여 새 결과를 &lt;code&gt;Deref&lt;/code&gt; 를 통해 결과 의 &lt;code&gt;Ok&lt;/code&gt; 암을 추가로 강제합니다 .</target>
        </trans-unit>
        <trans-unit id="494064e70529e54389ad678d759801779c5c72df" translate="yes" xml:space="preserve">
          <source>Left Shift</source>
          <target state="translated">왼쪽 시프트</target>
        </trans-unit>
        <trans-unit id="357a167cfbb492462507b9b8569ac04e39500116" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; expressions.</source>
          <target state="translated">&lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;배열 인덱싱&lt;/a&gt; 표현식 에서 왼쪽 피연산자입니다 .</target>
        </trans-unit>
        <trans-unit id="802deb5f6a24f0153e1b52a743d60aef22ab93a7" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/call-expr&quot;&gt;call expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/call-expr&quot;&gt;호출 표현식&lt;/a&gt; 에서 왼쪽 피연산자 .</target>
        </trans-unit>
        <trans-unit id="3463667b7fa2b91f4f33b26ea8c6945778008832" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/field-expr&quot;&gt;field&lt;/a&gt; expressions.</source>
          <target state="translated">&lt;a href=&quot;expressions/field-expr&quot;&gt;필드&lt;/a&gt; 표현식 에서 왼쪽 피연산자</target>
        </trans-unit>
        <trans-unit id="604e7ca527ffc17876e5a83a46e96dfa0fc8df57" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/method-call-expr&quot;&gt;method-call&lt;/a&gt; expressions.</source>
          <target state="translated">&lt;a href=&quot;expressions/method-call-expr&quot;&gt;메소드 호출&lt;/a&gt; 표현식 에서 왼쪽 피연산자</target>
        </trans-unit>
        <trans-unit id="eb226dadb2d69601a2e88f0aff30921d841ff9e2" translate="yes" xml:space="preserve">
          <source>Left operands of the &lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;compound assignment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;복합 할당&lt;/a&gt; 의 왼쪽 피연산자 .</target>
        </trans-unit>
        <trans-unit id="c80da6a471da3578e154404c086273e1a0815411" translate="yes" xml:space="preserve">
          <source>Left-shift</source>
          <target state="translated">Left-shift</target>
        </trans-unit>
        <trans-unit id="b5ac21daa5921e49b42d9ee7f63e24eef4f4e0f5" translate="yes" xml:space="preserve">
          <source>Left-shift and assignment</source>
          <target state="translated">왼쪽 교대와 과제</target>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="translated">Length</target>
        </trans-unit>
        <trans-unit id="1d3d412a0852cc56c28ad0c2a1153229aa365b43" translate="yes" xml:space="preserve">
          <source>Less than</source>
          <target state="translated">이하</target>
        </trans-unit>
        <trans-unit id="2dd999a5f745b11640e747579b45ca334f6bd164" translate="yes" xml:space="preserve">
          <source>Less than comparison</source>
          <target state="translated">비교 미만</target>
        </trans-unit>
        <trans-unit id="33331a5bba7154831ad991e3d73f2368d8a52f4d" translate="yes" xml:space="preserve">
          <source>Less than or equal to</source>
          <target state="translated">이하</target>
        </trans-unit>
        <trans-unit id="4c0c7f8feba1a3be504536a32e6253de66037beb" translate="yes" xml:space="preserve">
          <source>Less than or equal to comparison</source>
          <target state="translated">비교 이하</target>
        </trans-unit>
        <trans-unit id="2bf9b5b6040aab2674d9953c9b7c713583f20dae" translate="yes" xml:space="preserve">
          <source>Less-than comparison for two &lt;code&gt;Arc&lt;/code&gt;s.</source>
          <target state="translated">두 &lt;code&gt;Arc&lt;/code&gt; 대한 비교보다 적습니다 .</target>
        </trans-unit>
        <trans-unit id="e86e08a482dea944d87e01c7d1358debb5cc8f8f" translate="yes" xml:space="preserve">
          <source>Less-than comparison for two &lt;code&gt;Rc&lt;/code&gt;s.</source>
          <target state="translated">두 &lt;code&gt;Rc&lt;/code&gt; 에 대한 비교보다 적습니다 .</target>
        </trans-unit>
        <trans-unit id="023a23666ee1826dd775c67ffcc792722addcad9" translate="yes" xml:space="preserve">
          <source>Let ALPHA_SET(M) = FIRST(&lt;code&gt;&amp;alpha;&lt;/code&gt;) if OP = &lt;code&gt;\*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; and ALPHA_SET(M) = {} if OP = &lt;code&gt;+&lt;/code&gt;.</source>
          <target state="translated">OP = &lt;code&gt;\*&lt;/code&gt; 또는 &lt;code&gt;?&lt;/code&gt; 인 경우 ALPHA_SET (M) = FIRST ( &lt;code&gt;&amp;alpha;&lt;/code&gt; ) 및 ALPHA_SET (M) = {} = 경우 OP &lt;code&gt;+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c00ee374b6dc82a14932bb4fd3e12ef63fb5d55f" translate="yes" xml:space="preserve">
          <source>Let SEP_SET(M) = { SEP } if SEP is present and &amp;epsilon; &amp;isin; FIRST(&lt;code&gt;tt ...&lt;/code&gt;); otherwise SEP_SET(M) = {}.</source>
          <target state="translated">SEP가 존재하고 &amp;epsilon; &amp;isin; FIRST ( &lt;code&gt;tt ...&lt;/code&gt; ) 이면 SEP_SET (M) = {SEP} ; 그렇지 않으면 SEP_SET (M) = {}입니다.</target>
        </trans-unit>
        <trans-unit id="53530264e4da661c5ecd3e262365a6de39f515ea" translate="yes" xml:space="preserve">
          <source>Let sep_set = { SEP } if SEP present; otherwise sep_set = {}.</source>
          <target state="translated">SEP가 존재하면 sep_set = {SEP}로 설정하십시오. 그렇지 않으면 sep_set = {}.</target>
        </trans-unit>
        <trans-unit id="911e3ff1d34feb7b7cd623e6d1a6a2dd2992b8d3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add another test, but this time we&amp;rsquo;ll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. We talked about the simplest way to cause a panic in Chapter 9, which is to call the &lt;code&gt;panic!&lt;/code&gt; macro. Enter the new test, &lt;code&gt;another&lt;/code&gt;, so your &lt;em&gt;src/lib.rs&lt;/em&gt; file looks like Listing 11-3.</source>
          <target state="translated">다른 테스트를 추가해 봅시다. 이번에는 실패한 테스트를하겠습니다! 테스트 기능에 문제가있는 경우 테스트가 실패합니다. 각 테스트는 새 스레드에서 실행되며 기본 스레드에서 테스트 스레드가 종료 된 것으로 확인되면 테스트가 실패한 것으로 표시됩니다. 9 장에서 공황을 일으키는 가장 간단한 방법에 대해 이야기했습니다 &lt;code&gt;panic!&lt;/code&gt; 매크로. 새로운 테스트를 입력, &lt;code&gt;another&lt;/code&gt; , 당신 때문에 &lt;em&gt;SRC / lib.rs&lt;/em&gt; 11-3 목록과 같은 파일 모습을.</target>
        </trans-unit>
        <trans-unit id="862ded2868716c0b1f9c7eb816092a939af7bcb0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s address the second error, which points to the code at the end of &lt;code&gt;Worker::new&lt;/code&gt;; we need to wrap the &lt;code&gt;thread&lt;/code&gt; value in &lt;code&gt;Some&lt;/code&gt; when we create a new &lt;code&gt;Worker&lt;/code&gt;. Make the following changes to fix this error:</source>
          <target state="translated">&lt;code&gt;Worker::new&lt;/code&gt; 끝에있는 코드를 가리키는 두 번째 오류를 해결해 봅시다 . 새 &lt;code&gt;Worker&lt;/code&gt; 를 만들 때 &lt;code&gt;thread&lt;/code&gt; 값을 &lt;code&gt;Some&lt;/code&gt; 에 래핑해야합니다 . 이 오류를 수정하려면 다음을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="2f2efb01063714d86b5480ed1b824b067b1a031d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s address these four problems by refactoring our project.</source>
          <target state="translated">프로젝트를 리팩토링하여이 네 가지 문제를 해결해 봅시다.</target>
        </trans-unit>
        <trans-unit id="533040ac56d9f1aa4e4c0e2a9a9719c3755f6d7a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s also make the &lt;code&gt;add_to_waitlist&lt;/code&gt; function public by adding the &lt;code&gt;pub&lt;/code&gt; keyword before its definition, as in Listing 7-7.</source>
          <target state="translated">Listing 7-7에서와 같이 정의 앞에 &lt;code&gt;pub&lt;/code&gt; 키워드를 추가 하여 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수를 public으로 만들어 보자 .</target>
        </trans-unit>
        <trans-unit id="ea4a0f30216adf2bf51b73cd6dbecc829205bb86" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s apply the first rule: each parameter gets its own lifetime. This time we have two parameters instead of one, so we have two lifetimes:</source>
          <target state="translated">첫 번째 규칙을 적용 해 봅시다. 각 매개 변수는 고유 한 수명을 갖습니다. 이번에는 하나가 아닌 두 개의 매개 변수가 있으므로 두 개의 수명이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bfaeb7ed44c7ba50fa8b27070055c189f55db1b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s break down the &lt;code&gt;match&lt;/code&gt; in the &lt;code&gt;value_in_cents&lt;/code&gt; function. First, we list the &lt;code&gt;match&lt;/code&gt; keyword followed by an expression, which in this case is the value &lt;code&gt;coin&lt;/code&gt;. This seems very similar to an expression used with &lt;code&gt;if&lt;/code&gt;, but there&amp;rsquo;s a big difference: with &lt;code&gt;if&lt;/code&gt;, the expression needs to return a Boolean value, but here, it can be any type. The type of &lt;code&gt;coin&lt;/code&gt; in this example is the &lt;code&gt;Coin&lt;/code&gt; enum that we defined on line 1.</source>
          <target state="translated">&lt;code&gt;value_in_cents&lt;/code&gt; 함수 에서 &lt;code&gt;match&lt;/code&gt; 을 분류합시다 . 먼저 &lt;code&gt;match&lt;/code&gt; 키워드와 표현식 (이 경우 값 &lt;code&gt;coin&lt;/code&gt; ) 이 나열 됩니다. 이것은 &lt;code&gt;if&lt;/code&gt; 와 함께 사용되는 표현식과 매우 비슷해 보이지만 큰 차이가 있습니다. &lt;code&gt;if&lt;/code&gt; 와 함께 표현식은 부울 값을 반환해야하지만 여기서는 모든 유형이 될 수 있습니다. 이 예에서 &lt;code&gt;coin&lt;/code&gt; 의 유형은 1 행에서 정의한 &lt;code&gt;Coin&lt;/code&gt; 열거 형입니다.</target>
        </trans-unit>
        <trans-unit id="f56b403e93973d8ea8cf3d0611a5804ed42ec21f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s break down this request data to understand what the browser is asking of our program.</source>
          <target state="translated">이 요청 데이터를 분석하여 브라우저가 프로그램에 요구하는 내용을 이해하십시오.</target>
        </trans-unit>
        <trans-unit id="b36a5ce769815370ab06336595b70e1c5c477b25" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!</source>
          <target state="translated">하나의 함수에서 제네릭 형식 매개 변수, 특성 범위 및 수명을 지정하는 구문을 간단히 살펴 보겠습니다!</target>
        </trans-unit>
        <trans-unit id="0b5fe379df9523f20646a85915698650e52f567f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s build a smart pointer similar to the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type provided by the standard library to experience how smart pointers behave differently from references by default. Then we&amp;rsquo;ll look at how to add the ability to use the dereference operator.</source>
          <target state="translated">스마트 라이브러리가 기본적으로 참조와 다르게 동작하는 방법을 경험하기 위해 표준 라이브러리에서 제공 하는 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 유형 과 유사한 스마트 포인터를 작성해 봅시다 . 그런 다음 역 참조 연산자를 사용하는 기능을 추가하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="a51f4557e798f86ab9a943604a40558633731ed7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s build the workspace by running &lt;code&gt;cargo build&lt;/code&gt; in the top-level &lt;em&gt;add&lt;/em&gt; directory!</source>
          <target state="translated">최상위 레벨 &lt;em&gt;추가&lt;/em&gt; 디렉토리 에서 &lt;code&gt;cargo build&lt;/code&gt; 를 실행하여 작업 공간을 구축합시다 !&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f04507c41a7a28beafb3cead61fdadb3dea0a6f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s call a function that returns a &lt;code&gt;Result&lt;/code&gt; value because the function could fail. In Listing 9-3 we try to open a file.</source>
          <target state="translated">함수가 실패 할 수 있기 때문에 &lt;code&gt;Result&lt;/code&gt; 값 을 반환하는 함수를 호출 해 봅시다 . Listing 9-3에서 파일을 열려고한다.</target>
        </trans-unit>
        <trans-unit id="a513da811ee53d6a1f83cac6544789f14693ebd9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s change our working example in Listing 15-18 so we can see the reference counts changing as we create and drop references to the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">Listing 15-18에서 작업 예제를 변경하여 a에서 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 에 &lt;code&gt;a&lt;/code&gt; 참조를 작성하고 삭제함에 따라 참조 횟수가 변경되는 것을 확인할 수 있다 .</target>
        </trans-unit>
        <trans-unit id="13b7e2a02ac5f6f1d6e7771973bf7e4e8630f77c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s change the &lt;code&gt;area&lt;/code&gt; function that has a &lt;code&gt;Rectangle&lt;/code&gt; instance as a parameter and instead make an &lt;code&gt;area&lt;/code&gt; method defined on the &lt;code&gt;Rectangle&lt;/code&gt; struct, as shown in Listing 5-13.</source>
          <target state="translated">&lt;code&gt;Rectangle&lt;/code&gt; 인스턴스를 매개 변수로하는 &lt;code&gt;area&lt;/code&gt; 함수를 변경 하고 대신 &lt;code&gt;Rectangle&lt;/code&gt; 구조체 에 정의 된 &lt;code&gt;area&lt;/code&gt; 메소드 를 작성합니다 ( 목록 5-13 참조).</target>
        </trans-unit>
        <trans-unit id="a1f781d100edd0654c8707256174d0183b82ca21" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s change the name of our test to see how that changes the test output. Change the &lt;code&gt;it_works&lt;/code&gt; function to a different name, such as &lt;code&gt;exploration&lt;/code&gt;, like so:</source>
          <target state="translated">테스트 이름을 변경하여 테스트 결과가 어떻게 바뀌는 지 봅시다. &lt;code&gt;it_works&lt;/code&gt; 함수를 &lt;code&gt;exploration&lt;/code&gt; 과 같은 다른 이름으로 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="e085a2cf9e4bfbccd609eb67b047befe0756bfad" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s check that it passes!</source>
          <target state="translated">통과하는지 확인합시다!</target>
        </trans-unit>
        <trans-unit id="6e6584addded7d162e25546426216dd008dbd0f0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s check the code again:</source>
          <target state="translated">코드를 다시 확인하자 :</target>
        </trans-unit>
        <trans-unit id="58ec20357926eeae9e87a4ac077cb4fc985ca821" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s combine the knowledge you learned in this chapter and in previous chapters to work on a project!</source>
          <target state="translated">이 장과 이전 장에서 배운 지식을 결합하여 프로젝트를 수행해 봅시다!</target>
        </trans-unit>
        <trans-unit id="7729d445e0c4aa723c02605775741a07569ce3c0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s consider the first part of &lt;code&gt;main&lt;/code&gt; in Listing 17-11:</source>
          <target state="translated">Listing 17-11에서 &lt;code&gt;main&lt;/code&gt; 의 첫 번째 부분을 살펴 보자 .</target>
        </trans-unit>
        <trans-unit id="9bd7feb2aa1c163d92ba2edc07ccaeec3f556691" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a crate named &lt;code&gt;hello_macro&lt;/code&gt; that defines a trait named &lt;code&gt;HelloMacro&lt;/code&gt; with one associated function named &lt;code&gt;hello_macro&lt;/code&gt;. Rather than making our crate users implement the &lt;code&gt;HelloMacro&lt;/code&gt; trait for each of their types, we&amp;rsquo;ll provide a procedural macro so users can annotate their type with &lt;code&gt;#[derive(HelloMacro)]&lt;/code&gt; to get a default implementation of the &lt;code&gt;hello_macro&lt;/code&gt; function. The default implementation will print &lt;code&gt;Hello, Macro! My name is TypeName!&lt;/code&gt; where &lt;code&gt;TypeName&lt;/code&gt; is the name of the type on which this trait has been defined. In other words, we&amp;rsquo;ll write a crate that enables another programmer to write code like Listing 19-30 using our crate.</source>
          <target state="translated">하자라는 이름의 상자 만들 &lt;code&gt;hello_macro&lt;/code&gt; 을 정의하는 특성 이름이 &lt;code&gt;HelloMacro&lt;/code&gt; 일 개 관련 기능의 이름으로 &lt;code&gt;hello_macro&lt;/code&gt; . 상자 사용자 가 각 유형에 대해 &lt;code&gt;HelloMacro&lt;/code&gt; 특성을 구현하지 않고 절차 매크로를 제공하여 사용자가 &lt;code&gt;#[derive(HelloMacro)]&lt;/code&gt; 로 유형에 주석을 달아 &lt;code&gt;hello_macro&lt;/code&gt; 함수 의 기본 구현을 얻을 수 있습니다. 기본 구현은 &lt;code&gt;Hello, Macro! My name is TypeName!&lt;/code&gt; 여기서 &lt;code&gt;TypeName&lt;/code&gt; 은이 특성이 정의 된 유형의 이름입니다. 다시 말해, 다른 프로그래머가 상자를 사용하여 Listing 19-30과 같은 코드를 작성할 수있는 상자를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9e2142a26e44f4e6756b16f8090c68fc06e7085b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new library project called &lt;code&gt;adder&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;adder&lt;/code&gt; 라는 새로운 라이브러리 프로젝트를 만들어 봅시다 :</target>
        </trans-unit>
        <trans-unit id="9c7399eee11ccb14463b23d58e457c71508e98d8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new project using Cargo and look at how it differs from our original &amp;ldquo;Hello, world!&amp;rdquo; project. Navigate back to your &lt;em&gt;projects&lt;/em&gt; directory (or wherever you decided to store your code). Then, on any operating system, run the following:</source>
          <target state="translated">Cargo를 사용하여 새 프로젝트를 만들고 원래 &quot;Hello, world!&quot;와 어떻게 다른지 살펴 보겠습니다. 계획. &lt;em&gt;프로젝트&lt;/em&gt; 디렉토리 (또는 코드를 저장하기로 결정한 위치)로 다시 이동 합니다. 그런 다음 모든 운영 체제에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="41d473890aa102e1a8805b09a6342b2b1e9d3dd1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new project using Cargo and look at how it differs from our original Hello, world! project. Navigate back to your &lt;em&gt;projects&lt;/em&gt; directory (or wherever you decided to store your code). Then, on any operating system, run the following:</source>
          <target state="translated">Cargo를 사용하여 새 프로젝트를 만들고 원래 Hello, world와 어떻게 다른지 살펴 봅시다! 계획. &lt;em&gt;프로젝트&lt;/em&gt; 디렉토리 (또는 코드를 저장하기로 결정한 곳)로 다시 이동 하십시오. 그런 다음 모든 운영 체제에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="74b1a7e7740baca8e782bfd3b97f4ca92299f7fa" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new project with, as always, &lt;code&gt;cargo new&lt;/code&gt;. We&amp;rsquo;ll call our project &lt;code&gt;minigrep&lt;/code&gt; to distinguish it from the &lt;code&gt;grep&lt;/code&gt; tool that you might already have on your system.</source>
          <target state="translated">의는 항상 새 프로젝트, 만들어 보자 &lt;code&gt;cargo new&lt;/code&gt; . 우리는 프로젝트 &lt;code&gt;minigrep&lt;/code&gt; 을 호출 하여 시스템에 이미있는 &lt;code&gt;grep&lt;/code&gt; 도구 와 구별합니다 .</target>
        </trans-unit>
        <trans-unit id="7498e03400c34fc782316cecb8cfae701609c72c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create an integration test. With the code in Listing 11-12 still in the &lt;em&gt;src/lib.rs&lt;/em&gt; file, make a &lt;em&gt;tests&lt;/em&gt; directory, create a new file named &lt;em&gt;tests/integration_test.rs&lt;/em&gt;, and enter the code in Listing 11-13.</source>
          <target state="translated">통합 테스트를 만들어 봅시다. Listing 11-12의 코드가 여전히 &lt;em&gt;src / lib.rs&lt;/em&gt; 파일에있는 상태에서 &lt;em&gt;tests&lt;/em&gt; 디렉토리를 만들고 &lt;em&gt;tests / integration_test.rs&lt;/em&gt; 라는 새 파일을 작성한 후 Listing 11-13에 코드를 입력한다.</target>
        </trans-unit>
        <trans-unit id="76a754330b004eb7ac6a2d3134c0ac997e30ee22" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dig into the details of a dynamically sized type called &lt;code&gt;str&lt;/code&gt;, which we&amp;rsquo;ve been using throughout the book. That&amp;rsquo;s right, not &lt;code&gt;&amp;amp;str&lt;/code&gt;, but &lt;code&gt;str&lt;/code&gt; on its own, is a DST. We can&amp;rsquo;t know how long the string is until runtime, meaning we can&amp;rsquo;t create a variable of type &lt;code&gt;str&lt;/code&gt;, nor can we take an argument of type &lt;code&gt;str&lt;/code&gt;. Consider the following code, which does not work:</source>
          <target state="translated">책 전체에서 사용했던 &lt;code&gt;str&lt;/code&gt; 이라는 동적 크기 유형의 세부 사항을 살펴 보겠습니다 . 맞습니다. &lt;code&gt;&amp;amp;str&lt;/code&gt; 이 아니라 &lt;code&gt;str&lt;/code&gt; 자체가 DST입니다. 우리는 우리가 형의 변수를 만들 수 없습니다 의미 문자열이 런타임 때까지 얼마나 오래 알 수 &lt;code&gt;str&lt;/code&gt; ,도 우리는 형의 인수를 취할 수 &lt;code&gt;str&lt;/code&gt; . 작동하지 않는 다음 코드를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="135058566e52c47af5c9c244e255bc4ce73db5f0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dive in!</source>
          <target state="translated">뛰어 들자!</target>
        </trans-unit>
        <trans-unit id="5ea067197cecc0dcafe00ab16ce7bc41edb2cce3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine the difference between the two concepts with an example from Chapter 13 that implements the &lt;code&gt;Iterator&lt;/code&gt; trait on the &lt;code&gt;Counter&lt;/code&gt; struct. In Listing 13-21, we specified that the &lt;code&gt;Item&lt;/code&gt; type was &lt;code&gt;u32&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Counter&lt;/code&gt; 구조체 에 &lt;code&gt;Iterator&lt;/code&gt; 특성 을 구현하는 13 장의 예제를 통해 두 개념의 차이점을 살펴 보겠습니다 . Listing 13-21에서 우리는 &lt;code&gt;Item&lt;/code&gt; 타입이 &lt;code&gt;u32&lt;/code&gt; 임을 명시했다 .</target>
        </trans-unit>
        <trans-unit id="51c8e9031bf91446f9115b59a4810cccd5e08ba7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine the first execution of &lt;code&gt;plus_one&lt;/code&gt; in more detail. When we call &lt;code&gt;plus_one(five)&lt;/code&gt;, the variable &lt;code&gt;x&lt;/code&gt; in the body of &lt;code&gt;plus_one&lt;/code&gt; will have the value &lt;code&gt;Some(5)&lt;/code&gt;. We then compare that against each match arm.</source>
          <target state="translated">&lt;code&gt;plus_one&lt;/code&gt; 의 첫 번째 실행에 대해 자세히 살펴 보겠습니다. 우리가 호출하면 &lt;code&gt;plus_one(five)&lt;/code&gt; 의 변수 &lt;code&gt;x&lt;/code&gt; 의 몸에 &lt;code&gt;plus_one&lt;/code&gt; 는 값이됩니다 &lt;code&gt;Some(5)&lt;/code&gt; . 그런 다음 각 경기 암과 비교합니다.</target>
        </trans-unit>
        <trans-unit id="6e71d1e8c50827371eaf73f583536f9bfaf50c55" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore the &lt;em&gt;cons list&lt;/em&gt;, which is a data type common in functional programming languages, as an example of a recursive type. The cons list type we&amp;rsquo;ll define is straightforward except for the recursion; therefore, the concepts in the example we&amp;rsquo;ll work with will be useful any time you get into more complex situations involving recursive types.</source>
          <target state="translated">재귀 유형의 예로 함수형 프로그래밍 언어에서 공통적 인 데이터 유형 인 &lt;em&gt;cons list를&lt;/em&gt; 살펴 보겠습니다 . 우리가 정의 할 단점 목록 유형은 재귀를 제외하고 간단합니다. 따라서 우리가 다루게 될 예제의 개념은 재귀 유형과 관련된 더 복잡한 상황에 처할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8dd4037a982ed3562f2f33f83b29e377988c8c74" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore this concept by looking at the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type that follows the interior mutability pattern.</source>
          <target state="translated">내부 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 패턴을 따르는 RefCell &amp;lt;T&amp;gt; 유형을 살펴보면서이 개념을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="33abe13cd0e5ac2dde5cfd9e196411eace5691ef" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s figure this out by simplifying the program. Instead of making 10 threads in a &lt;code&gt;for&lt;/code&gt; loop, let&amp;rsquo;s just make two threads without a loop and see what happens. Replace the first &lt;code&gt;for&lt;/code&gt; loop in Listing 16-13 with this code instead:</source>
          <target state="translated">프로그램을 단순화하여 이것을 알아 봅시다. &lt;code&gt;for&lt;/code&gt; 루프 에서 10 개의 스레드를 만드는 대신 루프없이 두 개의 스레드를 만들고 결과를 확인하십시오. Listing 16-13 의 첫 번째 &lt;code&gt;for&lt;/code&gt; 루프를이 코드로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="f074800650aafbfc4673a0db2d7d24603b94e675" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s finally implement the &lt;code&gt;execute&lt;/code&gt; method on &lt;code&gt;ThreadPool&lt;/code&gt;. We&amp;rsquo;ll also change &lt;code&gt;Job&lt;/code&gt; from a struct to a type alias for a trait object that holds the type of closure that &lt;code&gt;execute&lt;/code&gt; receives. As discussed in the &lt;a href=&quot;ch19-04-advanced-types#creating-type-synonyms-with-type-aliases&quot;&gt;&amp;ldquo;Creating Type Synonyms with Type Aliases&amp;rdquo;&lt;/a&gt; section of Chapter 19, type aliases allow us to make long types shorter. Look at Listing 20-19.</source>
          <target state="translated">마지막 으로 &lt;code&gt;ThreadPool&lt;/code&gt; 에 &lt;code&gt;execute&lt;/code&gt; 메소드를 구현해 봅시다 . 우리는 또한 변경할 수 있습니다 &lt;code&gt;Job&lt;/code&gt; 폐쇄의 유형을 유지하는 특성 개체의 유형 별칭 구조체에서 &lt;code&gt;execute&lt;/code&gt; 수신합니다. 19 장의 &lt;a href=&quot;ch19-04-advanced-types#creating-type-synonyms-with-type-aliases&quot;&gt;&quot;유형 별명으로 유형 동의어 작성&quot;&lt;/a&gt; 섹션 에서 논의한 것처럼 , 유형 별명을 사용하면 긴 유형을 더 짧게 만들 수 있습니다. Listing 20-19를보십시오.</target>
        </trans-unit>
        <trans-unit id="8d1bc217cc494100da333abaf87d765e4a86b4ca" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first look at how the dereference operator works with regular references. Then we&amp;rsquo;ll try to define a custom type that behaves like &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and see why the dereference operator doesn&amp;rsquo;t work like a reference on our newly defined type. We&amp;rsquo;ll explore how implementing the &lt;code&gt;Deref&lt;/code&gt; trait makes it possible for smart pointers to work in a similar way as references. Then we&amp;rsquo;ll look at Rust&amp;rsquo;s &lt;em&gt;deref coercion&lt;/em&gt; feature and how it lets us work with either references or smart pointers.</source>
          <target state="translated">먼저 역 참조 연산자가 정규 참조와 작동하는 방식을 살펴 보겠습니다. 그런 다음 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 와 같이 작동하는 사용자 정의 유형을 정의하려고 시도 하고 역 참조 연산자가 새로 정의 된 유형에 대한 참조처럼 작동하지 않는 이유를 확인합니다. &lt;code&gt;Deref&lt;/code&gt; 특성을 구현하여 스마트 포인터가 참조와 유사한 방식으로 작동 하는 방법을 살펴 보겠습니다 . 그런 다음 Rust의 역 참조 &lt;em&gt;강제&lt;/em&gt; 기능과 참조 또는 스마트 포인터로 작업하는 방법을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="16b3f7c211345e679774caea38315635e0c83e2f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first look at how the dereference operator works with regular references. Then we&amp;rsquo;ll try to define a custom type that behaves like &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and see why the dereference operator doesn&amp;rsquo;t work like a reference on our newly defined type. We&amp;rsquo;ll explore how implementing the &lt;code&gt;Deref&lt;/code&gt; trait makes it possible for smart pointers to work in ways similar to references. Then we&amp;rsquo;ll look at Rust&amp;rsquo;s &lt;em&gt;deref coercion&lt;/em&gt; feature and how it lets us work with either references or smart pointers.</source>
          <target state="translated">먼저 역 참조 연산자가 일반 참조와 함께 작동하는 방식을 살펴 보겠습니다. 그런 다음 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 처럼 동작하는 사용자 지정 형식을 정의 하고 역 참조 연산자가 새로 정의 된 형식에 대한 참조처럼 작동하지 않는 이유를 확인합니다. &lt;code&gt;Deref&lt;/code&gt; 트레이 트를 구현하여 스마트 포인터가 참조와 유사한 방식으로 작동하는 방법을 살펴 보겠습니다 . 그런 다음 Rust의 &lt;em&gt;deref 강제&lt;/em&gt; 기능을 살펴보고 어떻게 참조 또는 스마트 포인터로 작업 할 수 있는지 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="5282924b8e4ccd503b1b10249bbf09058e192d22" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s get started on the implementation of the library! We know we need a public &lt;code&gt;Post&lt;/code&gt; struct that holds some content, so we&amp;rsquo;ll start with the definition of the struct and an associated public &lt;code&gt;new&lt;/code&gt; function to create an instance of &lt;code&gt;Post&lt;/code&gt;, as shown in Listing 17-12. We&amp;rsquo;ll also make a private &lt;code&gt;State&lt;/code&gt; trait. Then &lt;code&gt;Post&lt;/code&gt; will hold a trait object of &lt;code&gt;Box&amp;lt;dyn State&amp;gt;&lt;/code&gt; inside an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; in a private field named &lt;code&gt;state&lt;/code&gt;. You&amp;rsquo;ll see why the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is necessary in a bit.</source>
          <target state="translated">라이브러리 구현을 시작합시다! 컨텐츠를 보유한 public &lt;code&gt;Post&lt;/code&gt; 구조체 가 필요하다는 것을 알고 있으므로 Listing 17-12에 표시된 것처럼 구조체 정의와 관련 public &lt;code&gt;new&lt;/code&gt; 함수를 사용하여 &lt;code&gt;Post&lt;/code&gt; 인스턴스를 생성한다 . 우리는 또한 개인 &lt;code&gt;State&lt;/code&gt; 특성을 만들 것 입니다. 그러면 &lt;code&gt;Post&lt;/code&gt; 는 &lt;code&gt;state&lt;/code&gt; 라는 개인 필드 의 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 안에 &lt;code&gt;Box&amp;lt;dyn State&amp;gt;&lt;/code&gt; 의 특성 오브젝트를 보유합니다 . &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 가 왜 필요한지 알게 될 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6cf0779362e5e6e79905eb41dbbcf314ec8be6ec" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s give it a try! First, we&amp;rsquo;ll run our program without the environment variable set and with the query &lt;code&gt;to&lt;/code&gt;, which should match any line that contains the word &amp;ldquo;to&amp;rdquo; in all lowercase:</source>
          <target state="translated">한번 해보자! 먼저 환경 변수를 설정하지 않고 query &lt;code&gt;to&lt;/code&gt; 로 프로그램을 실행 합니다.이 단어는 &quot;to&quot;라는 단어가 모두 포함 된 모든 줄과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="e21e94e46417f5d70be1f74cdc80a0200cf7ab38" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine that a friend of ours is trying to collect all 50 state quarters. While we sort our loose change by coin type, we&amp;rsquo;ll also call out the name of the state associated with each quarter so if it&amp;rsquo;s one our friend doesn&amp;rsquo;t have, they can add it to their collection.</source>
          <target state="translated">우리 친구가 50 개 주 분기를 모두 모 으려고한다고 가정 해 봅시다. 코인 유형별로 느슨한 변경 사항을 정렬하는 동안 각 분기와 관련된 주 이름을 호출하므로 친구가없는 경우 컬렉션에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d46ead76362decf8ea1c4631f151578daeb7b13e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s implement the functionality for returning more than a blank page. Create a new file, &lt;em&gt;hello.html&lt;/em&gt;, in the root of your project directory, not in the &lt;em&gt;src&lt;/em&gt; directory. You can input any HTML you want; Listing 20-4 shows one possibility.</source>
          <target state="translated">빈 페이지 이상을 반환하는 기능을 구현해 봅시다. &lt;em&gt;src&lt;/em&gt; 디렉토리가 아닌 프로젝트 디렉토리의 루트에 &lt;em&gt;hello.html&lt;/em&gt; 파일을 새로 작성하십시오 . 원하는 HTML을 입력 할 수 있습니다. Listing 20-4는 한 가지 가능성을 보여준다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="875e251ee421cd235e0091a3ea3fc8e405d04cfd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s implement the functionality to read the request from the browser! To separate the concerns of first getting a connection and then taking some action with the connection, we&amp;rsquo;ll start a new function for processing connections. In this new &lt;code&gt;handle_connection&lt;/code&gt; function, we&amp;rsquo;ll read data from the TCP stream and print it so we can see the data being sent from the browser. Change the code to look like Listing 20-2.</source>
          <target state="translated">브라우저에서 요청을 읽는 기능을 구현합시다! 먼저 연결을 얻은 다음 연결로 조치를 취해야하는 문제를 분리하기 위해 연결 처리를위한 새로운 기능을 시작합니다. 이 새로운 &lt;code&gt;handle_connection&lt;/code&gt; 함수에서는 TCP 스트림에서 데이터를 읽고 인쇄하여 브라우저에서 전송되는 데이터를 볼 수 있습니다. Listing 20-2와 같이 코드를 변경한다.</target>
        </trans-unit>
        <trans-unit id="b145c020f35d5cf12c1f16d9ae23adffafb9cf49" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s introduce a bug into our code to see what it looks like when a test that uses &lt;code&gt;assert_eq!&lt;/code&gt; fails. Change the implementation of the &lt;code&gt;add_two&lt;/code&gt; function to instead add &lt;code&gt;3&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;assert_eq!&lt;/code&gt; 를 사용하는 테스트에서 어떻게 보이는지 확인하기 위해 코드에 버그를 도입하자 ! 실패합니다. &lt;code&gt;add_two&lt;/code&gt; 함수 의 구현을 &lt;code&gt;3&lt;/code&gt; 대신에 추가하도록 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a740028676c8b0002977c98fe2eec37d0bee51d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s introduce a bug into this code by changing &lt;code&gt;greeting&lt;/code&gt; to not include &lt;code&gt;name&lt;/code&gt; to see what this test failure looks like:</source>
          <target state="translated">&lt;code&gt;greeting&lt;/code&gt; 에 &lt;code&gt;name&lt;/code&gt; 을 포함하지 않도록 이 테스트 실패의 모양 을 변경하여이 코드에 버그를 도입 해 보겠습니다</target>
        </trans-unit>
        <trans-unit id="19083fee6a8cc87ffd6b0d04bb94a51935ddddce" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You&amp;rsquo;ll learn about &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, methods, associated functions, using external crates, and more! The following chapters will explore these ideas in more detail. In this chapter, you&amp;rsquo;ll practice the fundamentals.</source>
          <target state="translated">실습 프로젝트를 함께 진행하여 Rust로 뛰어 갑시다! 이 장에서는 실제 프로그램에서 사용하는 방법을 보여줌으로써 몇 가지 일반적인 Rust 개념을 소개합니다. &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;match&lt;/code&gt; , 메소드, 관련 함수, 외부 상자 사용 등에 대해 배웁니다 ! 다음 장에서는 이러한 아이디어에 대해 자세히 설명합니다. 이 장에서는 기본 사항을 연습합니다.</target>
        </trans-unit>
        <trans-unit id="63819f186c88b0330ee047bed09e478063cb1dae" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. These are the only possibilities for an IP address that our program will come across: we can &lt;em&gt;enumerate&lt;/em&gt; all possible values, which is where enumeration gets its name.</source>
          <target state="translated">코드로 표현하고 싶은 상황을 살펴보고이 경우에 열거 형이 구조체보다 유용하고 더 적합한 이유를 살펴 보겠습니다. IP 주소로 작업해야한다고 가정 해보십시오. 현재 IP 주소에는 버전 4와 버전 6의 두 가지 주요 표준이 사용됩니다. 이것들은 우리 프로그램이 접할 수있는 IP 주소에 대한 유일한 가능성 입니다. 열거가 이름을 얻는 모든 가능한 값을 &lt;em&gt;열거&lt;/em&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="983a8ae99cfeef9a151c58849d32ffe20aab79f5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. These are the only possibilities for an IP address that our program will come across: we can &lt;em&gt;enumerate&lt;/em&gt; all possible variants, which is where enumeration gets its name.</source>
          <target state="translated">코드로 표현하고 싶은 상황을 살펴보고이 경우에 열거 형이 구조체보다 유용하고 더 적절한 이유를 살펴 보겠습니다. IP 주소로 작업해야한다고 가정 해 보겠습니다. 현재 IP 주소에는 버전 4와 버전 6의 두 가지 주요 표준이 사용됩니다. 이것들은 우리 프로그램이 보게 될 IP 주소에 대한 유일한 가능성 입니다. 열거가 그 이름을 얻는 모든 가능한 변형을 &lt;em&gt;열거&lt;/em&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b455b737e0cc051701700c07362ed0b4be96ade0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example of what happens when we try to use a refutable pattern where Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a &lt;code&gt;let&lt;/code&gt; statement, but for the pattern we&amp;rsquo;ve specified &lt;code&gt;Some(x)&lt;/code&gt;, a refutable pattern. As you might expect, this code will not compile.</source>
          <target state="translated">Rust가 반박 할 수없는 패턴을 요구하고 그 반대의 경우에도 반박 할 수있는 패턴을 사용하려고 할 때 어떤 일이 발생하는지에 대한 예를 보자. Listing 18-8은 &lt;code&gt;let&lt;/code&gt; 문을 보여 주지만 패턴 에 대해 반박 가능한 패턴 &lt;code&gt;Some(x)&lt;/code&gt; 지정했다 . 예상 한대로이 코드는 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18ece25ab1e94beac903ba47f460140cd6525deb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another enum in the standard library that is very common and useful: &lt;code&gt;Option&lt;/code&gt;.</source>
          <target state="translated">매우 일반적이고 유용한 표준 라이브러리의 다른 열거 형을 살펴 보겠습니다. &lt;code&gt;Option&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c5a86e48ba4d029ee5e559b44f91369e39297f3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example of an enum in Listing 6-2: this one has a wide variety of types embedded in its variants.</source>
          <target state="translated">Listing 6-2에서 열거 형의 또 다른 예를 살펴 보자.이 형식에는 변형에 포함 된 다양한 유형이있다.</target>
        </trans-unit>
        <trans-unit id="eb252b4c369cd56d53d91f13fd045947d1bc97a2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example to see what it&amp;rsquo;s like when a &lt;code&gt;panic!&lt;/code&gt; call comes from a library because of a bug in our code instead of from our code calling the macro directly. Listing 9-1 has some code that attempts to access an element by index in a vector.</source>
          <target state="translated">&lt;code&gt;panic!&lt;/code&gt; 어떤지보기 위해 다른 예를 살펴 보자 ! 매크로를 직접 호출하는 코드가 아니라 코드의 버그로 인해 라이브러리에서 호출이 발생합니다. Listing 9-1에는 벡터의 인덱스로 요소에 액세스를 시도하는 코드가있다.</target>
        </trans-unit>
        <trans-unit id="6282a087fac47a7a9f015495370791f1a001baba" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example, this time using the &lt;code&gt;longest&lt;/code&gt; function that had no lifetime parameters when we started working with it in Listing 10-21:</source>
          <target state="translated">이번에 는 Listing 10-21에서 작업을 시작할 때 수명 매개 변수가없는 &lt;code&gt;longest&lt;/code&gt; 기능을 사용하는 또 다른 예를 살펴 보자 .</target>
        </trans-unit>
        <trans-unit id="79d263a7d612b559cee379001fac98bd72d76b84" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example:</source>
          <target state="translated">다른 예를 보자.</target>
        </trans-unit>
        <trans-unit id="4d45845f16951bf95eef2bf35703a5d1765d659f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at each of the five unsafe superpowers in turn. We&amp;rsquo;ll also look at some abstractions that provide a safe interface to unsafe code.</source>
          <target state="translated">5 개의 안전하지 않은 초강대국을 차례로 살펴 보겠습니다. 또한 안전하지 않은 코드에 대한 안전한 인터페이스를 제공하는 몇 가지 추상화도 살펴볼 것입니다.</target>
        </trans-unit>
        <trans-unit id="2e8b25580ad4eac065cdf4b9269d34a342f40133" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at each of the four unsafe superpowers in turn. We&amp;rsquo;ll also look at some abstractions that provide a safe interface to unsafe code.</source>
          <target state="translated">안전하지 않은 4 가지 초강대국을 차례로 살펴 보자. 또한 안전하지 않은 코드에 안전한 인터페이스를 제공하는 몇 가지 추상화를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="df2bdcb8a48c5ab6b335860afc48b8bc078015c4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how a reference cycle might happen and how to prevent it, starting with the definition of the &lt;code&gt;List&lt;/code&gt; enum and a &lt;code&gt;tail&lt;/code&gt; method in Listing 15-25:</source>
          <target state="translated">Listing 15-25 의 &lt;code&gt;List&lt;/code&gt; 열거 형과 &lt;code&gt;tail&lt;/code&gt; 메소드 의 정의부터 시작하여 참조주기가 어떻게 발생하고 방지하는지 살펴 보자.</target>
        </trans-unit>
        <trans-unit id="0944037c3cfba2d633f74e95d90cd2030445a3ef" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how the &lt;code&gt;strong_count&lt;/code&gt; and &lt;code&gt;weak_count&lt;/code&gt; values of the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; instances change by creating a new inner scope and moving the creation of &lt;code&gt;branch&lt;/code&gt; into that scope. By doing so, we can see what happens when &lt;code&gt;branch&lt;/code&gt; is created and then dropped when it goes out of scope. The modifications are shown in Listing 15-29:</source>
          <target state="translated">새로운 내부 범위를 만들고 &lt;code&gt;branch&lt;/code&gt; 생성 을 해당 범위로 이동하여 &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; 인스턴스 의 &lt;code&gt;strong_count&lt;/code&gt; 및 &lt;code&gt;weak_count&lt;/code&gt; 값이 어떻게 변경되는지 살펴 보겠습니다 . 이렇게하면 &lt;code&gt;branch&lt;/code&gt; 가 만들어지고 범위를 벗어나면 삭제 될 때 발생하는 상황을 확인할 수 있습니다 . 수정 사항은 목록 15-29에 표시되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cefbc5ea6d98c6566c78f52ee80e603c9ecbe131" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how the lifetime annotations restrict the &lt;code&gt;longest&lt;/code&gt; function by passing in references that have different concrete lifetimes. Listing 10-23 is a straightforward example.</source>
          <target state="translated">구체적인 수명이 다른 참조를 전달 하여 수명 주석이 &lt;code&gt;longest&lt;/code&gt; 기능을 제한하는 방법을 살펴 보겠습니다 . Listing 10-23은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="2d907807641db37c8b548f8e680fff80ec47014d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how this works with an example that uses the standard library&amp;rsquo;s &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum:</source>
          <target state="translated">표준 라이브러리의 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 열거 형 을 사용하는 예제에서 이것이 어떻게 작동하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="017d18fbfa7c60f454e03eabc7d8ac1aa92c2937" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the different kinds of procedural macros. We&amp;rsquo;ll start with a custom derive macro and then explain the small dissimilarities that make the other forms different.</source>
          <target state="translated">서로 다른 종류의 절차 적 매크로를 살펴 보겠습니다. 우리는 커스텀 파생 매크로로 시작한 다음 다른 형태를 다르게 만드는 작은 차이를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="47696a65864265aca3d18b3b28f87964618b9312" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the features Rust provides specifically for writing tests that take these actions, which include the &lt;code&gt;test&lt;/code&gt; attribute, a few macros, and the &lt;code&gt;should_panic&lt;/code&gt; attribute.</source>
          <target state="translated">Rust가 &lt;code&gt;test&lt;/code&gt; 속성, 몇 가지 매크로 및 &lt;code&gt;should_panic&lt;/code&gt; 속성 을 포함하여 이러한 작업을 수행하는 테스트 작성을 위해 특별히 제공하는 기능을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="3a9e9db94ec59c60082aa0b5bcf4f78e81ff1885" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at what happens if we use the &lt;code&gt;?&lt;/code&gt; operator in the &lt;code&gt;main&lt;/code&gt; function, which you&amp;rsquo;ll recall has a return type of &lt;code&gt;()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 를 사용하면 어떻게되는지 봅시다 . 당신이 기억할 &lt;code&gt;main&lt;/code&gt; 함수의 연산자 는 반환 유형이 &lt;code&gt;()&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="994a941f48d3bb1b233dbddd0cea3be0ad22a0a6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s make a new binary project with Cargo called &lt;em&gt;rectangles&lt;/em&gt; that will take the width and height of a rectangle specified in pixels and calculate the area of the rectangle. Listing 5-8 shows a short program with one way of doing exactly that in our project&amp;rsquo;s &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">의 카고와 새로운 바이너리 프로젝트라고 만들어 보자 &lt;em&gt;사각형&lt;/em&gt; 픽셀로 지정되는 구형의 폭과 높이를 가지고 직사각형의 면적을 계산합니다. 리스트 5-8은 프로젝트의 &lt;em&gt;src / main.rs&lt;/em&gt; 에서 정확히 수행하는 한 가지 방법으로 간단한 프로그램을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="c3c6a3325302ea36dd5b079af7f9dcc2a96f2a1b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s make the following changes to what happens when we create a &lt;code&gt;ThreadPool&lt;/code&gt;. We&amp;rsquo;ll implement the code that sends the closure to the thread after we have &lt;code&gt;Worker&lt;/code&gt; set up in this way:</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; 을 만들 때 발생하는 사항을 다음과 같이 변경해 봅시다 . &lt;code&gt;Worker&lt;/code&gt; 다음과 같이 설정 한 후 클로저를 스레드로 보내는 코드를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="d6f3986ccdbd0c969d703b2cf489c2df505e5f38" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s move all the code that isn&amp;rsquo;t the &lt;code&gt;main&lt;/code&gt; function from &lt;em&gt;src/main.rs&lt;/em&gt; to &lt;em&gt;src/lib.rs&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 기능 이 아닌 모든 코드를 &lt;em&gt;src / main.rs&lt;/em&gt; 에서 &lt;em&gt;src / lib.rs로 옮깁니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e0993d86e241fd6659cd1a45b6773ecb8b7a697f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s move on and talk about the module system!</source>
          <target state="translated">계속해서 모듈 시스템에 대해 이야기합시다!</target>
        </trans-unit>
        <trans-unit id="a8ee98777403910d66295d417b2df29ea314fb29" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s move the transmitting end into a spawned thread and have it send one string so the spawned thread is communicating with the main thread, as shown in Listing 16-7. This is like putting a rubber duck in the river upstream or sending a chat message from one thread to another.</source>
          <target state="translated">전송 엔드를 생성 된 스레드로 옮기고 생성 된 스레드가 메인 스레드와 통신하도록 하나의 문자열을 보내도록한다 (Listing 16-7 참조). 이것은 고무 오리를 강 상류에 두거나 한 스레드에서 다른 스레드로 채팅 메시지를 보내는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7d7bc5a1faae0876b47946a48ddda878ed24b40e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s practice using methods by implementing a second method on the &lt;code&gt;Rectangle&lt;/code&gt; struct. This time, we want an instance of &lt;code&gt;Rectangle&lt;/code&gt; to take another instance of &lt;code&gt;Rectangle&lt;/code&gt; and return &lt;code&gt;true&lt;/code&gt; if the second &lt;code&gt;Rectangle&lt;/code&gt; can fit completely within &lt;code&gt;self&lt;/code&gt;; otherwise it should return &lt;code&gt;false&lt;/code&gt;. That is, we want to be able to write the program shown in Listing 5-14, once we&amp;rsquo;ve defined the &lt;code&gt;can_hold&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Rectangle&lt;/code&gt; 구조체 에 두 번째 메서드를 구현하여 메서드를 사용하여 연습 해 봅시다 . 이 시간, 우리의 인스턴스 원하는 &lt;code&gt;Rectangle&lt;/code&gt; 의 또 다른 예를 취할 &lt;code&gt;Rectangle&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; 두 번째 경우 &lt;code&gt;Rectangle&lt;/code&gt; 안에 완전히 들어갈 수있는 &lt;code&gt;self&lt;/code&gt; ; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다 . 즉, 일단 &lt;code&gt;can_hold&lt;/code&gt; 메소드를 정의하면 Listing 5-14에 표시된 프로그램을 작성할 수 있기를 원한다 .</target>
        </trans-unit>
        <trans-unit id="2f6a747ae7e60532bbff7c109c117027e46d5672" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s pretend we&amp;rsquo;re the compiler. We&amp;rsquo;ll apply these rules to figure out what the lifetimes of the references in the signature of the &lt;code&gt;first_word&lt;/code&gt; function in Listing 10-26 are. The signature starts without any lifetimes associated with the references:</source>
          <target state="translated">우리가 컴파일러 인 척하자. 이 규칙을 적용 하여 Listing 10-26 의 &lt;code&gt;first_word&lt;/code&gt; 함수 시그니처에서 참조의 수명이 무엇인지 알아낼 것이다 . 서명은 참조와 관련된 수명없이 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="93c702edd44f0391f6b49bca85a25bb1c08f5ed4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s program the game to quit when the user wins by adding a &lt;code&gt;break&lt;/code&gt; statement:</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 문 을 추가하여 사용자가 이길 때 게임이 종료되도록 프로그래밍합시다 :</target>
        </trans-unit>
        <trans-unit id="37e690afeb6a44a19f29feff1bce10a2708fa622" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s re-implement the counter iterator from &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;모듈 수준 문서&lt;/a&gt; 에서 카운터 반복자를 다시 구현해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="f8fcc9bf7aa350b392444e733b230aa170212b80" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s re-implement the counter iterator from the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12315912398a998ea0c31348f27e33b72d707ec2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap what we&amp;rsquo;ve discussed about references:</source>
          <target state="translated">참고 문헌에 대해 논의한 내용을 다시 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="28953519c0667e1646cf53e71f06f86d4e114c07" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap what we&amp;rsquo;ve learned so far about Cargo:</source>
          <target state="translated">화물에 대해 지금까지 배운 내용을 다시 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="2c9a7290077df3cf275a9a0becb103de92fc4b1c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to our cons list example in Listing 15-5. Recall that we defined it using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. This time, we&amp;rsquo;ll create two lists that both share ownership of a third list. Conceptually, this looks similar to Figure 15-3:</source>
          <target state="translated">Listing 15-5의 단점 목록 예제로 돌아가 보자. &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 사용하여 정의했음을 상기하십시오 . 이번에는 세 번째 목록의 소유권을 공유하는 두 개의 목록을 만듭니다. 개념적으로 이것은 그림 15-3과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="4d5406eb80899f442e99be52053a8af746acbb33" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to our example: &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; have the same API, so we fix our program by changing the &lt;code&gt;use&lt;/code&gt; line, the call to &lt;code&gt;new&lt;/code&gt;, and the call to &lt;code&gt;clone&lt;/code&gt;. The code in Listing 16-15 will finally compile and run:</source>
          <target state="translated">예제로 돌아가 봅시다 : &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 와 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 는 같은 API를 가지고 있습니다. 따라서 우리는 &lt;code&gt;use&lt;/code&gt; 라인, &lt;code&gt;new&lt;/code&gt; 호출 , &lt;code&gt;clone&lt;/code&gt; 호출로 프로그램을 수정합니다 . Listing 16-15의 코드는 마침내 컴파일되고 실행될 것이다 :</target>
        </trans-unit>
        <trans-unit id="38b65fe4b5d3898a7fcecb397aa7533be4bdc414" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to our workout generation app. In Listing 13-6, our code was still calling the expensive calculation closure more times than it needed to. One option to solve this issue is to save the result of the expensive closure in a variable for reuse and use the variable in each place we need the result, instead of calling the closure again. However, this method could result in a lot of repeated code.</source>
          <target state="translated">운동 생성 앱으로 돌아 갑시다. Listing 13-6에서 코드는 여전히 비싼 계산 클로저를 필요한 것보다 더 많이 호출했다. 이 문제를 해결하는 한 가지 방법은 값 비싼 클로저의 결과를 재사용 할 변수에 저장하고 클로저를 다시 호출하는 대신 결과가 필요한 각 위치에서 변수를 사용하는 것입니다. 그러나이 방법을 사용하면 코드가 많이 반복 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42c033ee17d1839060442674688298fa9208193f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the error in Listing 7-4 that told us the &lt;code&gt;hosting&lt;/code&gt; module is private. We want the &lt;code&gt;eat_at_restaurant&lt;/code&gt; function in the parent module to have access to the &lt;code&gt;add_to_waitlist&lt;/code&gt; function in the child module, so we mark the &lt;code&gt;hosting&lt;/code&gt; module with the &lt;code&gt;pub&lt;/code&gt; keyword, as shown in Listing 7-5.</source>
          <target state="translated">&lt;code&gt;hosting&lt;/code&gt; 모듈이 비공개 라는 것을 알려주는 Listing 7-4의 오류로 돌아가 보자 . 우리는 원하는 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 의 부모 모듈의 기능은 액세스하도록 &lt;code&gt;add_to_waitlist&lt;/code&gt; 의 우리가 표시되도록 하위 모듈의 기능을 &lt;code&gt;hosting&lt;/code&gt; 와 모듈 &lt;code&gt;pub&lt;/code&gt; 키워드를 7-5 목록과 같이.</target>
        </trans-unit>
        <trans-unit id="f0f51e7669e18c0438bddca7e592dae1d7afb926" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the example in Listing 7-1. How do we call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? This is the same as asking, what&amp;rsquo;s the path of the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? In Listing 7-3, we simplified our code a bit by removing some of the modules and functions. We&amp;rsquo;ll show two ways to call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function from a new function &lt;code&gt;eat_at_restaurant&lt;/code&gt; defined in the crate root. The &lt;code&gt;eat_at_restaurant&lt;/code&gt; function is part of our library crate&amp;rsquo;s public API, so we mark it with the &lt;code&gt;pub&lt;/code&gt; keyword. In the &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;&amp;rdquo;Exposing Paths with the &lt;code&gt;pub&lt;/code&gt; Keyword&amp;rdquo;&lt;/a&gt; section, we&amp;rsquo;ll go into more detail about &lt;code&gt;pub&lt;/code&gt;.</source>
          <target state="translated">Listing 7-1의 예제로 돌아가 보자. &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수를 어떻게 호출 합니까? &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수 의 경로는 무엇 입니까? Listing 7-3에서는 일부 모듈과 함수를 제거하여 코드를 약간 단순화했다. 상자 루트에 정의 된 새로운 함수 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 에서 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수 를 호출하는 두 가지 방법을 보여줍니다 . &lt;code&gt;eat_at_restaurant&lt;/code&gt; 우리가 함께 표시 할 수 있도록 기능, 도서관 상자의 공개 API의 일부 &lt;code&gt;pub&lt;/code&gt; 키워드. 에서 &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;의 &quot;과 노출 경로 &lt;/a&gt; &lt;code&gt;pub&lt;/code&gt; 키워드 ' 섹션, 우리가에 대한 세부로 갈거야 &lt;code&gt;pub&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5708c518fe3a8a47dd6a9247e9757413e4ab26a1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the example in Listing 7-1. How do we call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? This is the same as asking, what&amp;rsquo;s the path of the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? In Listing 7-3, we simplified our code a bit by removing some of the modules and functions. We&amp;rsquo;ll show two ways to call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function from a new function &lt;code&gt;eat_at_restaurant&lt;/code&gt; defined in the crate root. The &lt;code&gt;eat_at_restaurant&lt;/code&gt; function is part of our library crate&amp;rsquo;s public API, so we mark it with the &lt;code&gt;pub&lt;/code&gt; keyword. In the &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;&amp;rdquo;Exposing Paths with the &lt;code&gt;pub&lt;/code&gt; Keyword&amp;rdquo;&lt;/a&gt; section, we&amp;rsquo;ll go into more detail about &lt;code&gt;pub&lt;/code&gt;. Note that this example won&amp;rsquo;t compile just yet; we&amp;rsquo;ll explain why in a bit.</source>
          <target state="translated">Listing 7-1의 예제로 돌아 갑시다. &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수를 어떻게 호출 합니까? 이것은 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수 의 경로가 무엇인지 묻는 것과 같습니다 . Listing 7-3에서는 일부 모듈과 함수를 제거하여 코드를 약간 단순화했습니다. 크레이트 루트에 정의 된 새로운 함수 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 에서 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수 를 호출하는 두 가지 방법을 보여 드리겠습니다 . &lt;code&gt;eat_at_restaurant&lt;/code&gt; 우리가 함께 표시 할 수 있도록 기능, 도서관 상자의 공개 API의 일부 &lt;code&gt;pub&lt;/code&gt; 키워드. 에서 &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;의 &quot;과 노출 경로 &lt;/a&gt; &lt;code&gt;pub&lt;/code&gt; 키워드 ' 섹션, 우리가에 대한 세부로 갈거야 &lt;code&gt;pub&lt;/code&gt; . 이 예제는 아직 컴파일되지 않습니다. 그 이유를 잠시 후 설명하겠습니다.</target>
        </trans-unit>
        <trans-unit id="477b6d3273f07c6abd6b664ce37ceef78d0f7dbb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the guessing game program. You now know that &lt;code&gt;let mut guess&lt;/code&gt; will introduce a mutable variable named &lt;code&gt;guess&lt;/code&gt;. On the other side of the equal sign (&lt;code&gt;=&lt;/code&gt;) is the value that &lt;code&gt;guess&lt;/code&gt; is bound to, which is the result of calling &lt;code&gt;String::new&lt;/code&gt;, a function that returns a new instance of a &lt;code&gt;String&lt;/code&gt;. &lt;a href=&quot;../std/string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.</source>
          <target state="translated">추측 게임 프로그램으로 돌아 갑시다. 이제 &lt;code&gt;let mut guess&lt;/code&gt; 가 &lt;code&gt;guess&lt;/code&gt; 라는 가변 변수를 도입 할 것임을 알게되었습니다 . 등호의 다른 측면에서 ( &lt;code&gt;=&lt;/code&gt; ) 한 값입니다 &lt;code&gt;guess&lt;/code&gt; 호출의 결과에 바인딩, &lt;code&gt;String::new&lt;/code&gt; , 함수가 리턴의 새로운 인스턴스 &lt;code&gt;String&lt;/code&gt; . &lt;a href=&quot;../std/string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 은 표준 라이브러리에서 제공하는 확장 가능한 UTF-8 인코딩 텍스트 비트 인 문자열 유형입니다.</target>
        </trans-unit>
        <trans-unit id="1b391440eed0071039b3e089734bb6dbffc57331" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s review in detail what just happened in your &amp;ldquo;Hello, world!&amp;rdquo; program. Here&amp;rsquo;s the first piece of the puzzle:</source>
          <target state="translated">&quot;Hello, world!&quot;에서 방금 일어난 일을 자세히 살펴 보겠습니다. 프로그램. 다음은 퍼즐의 첫 번째 조각입니다.</target>
        </trans-unit>
        <trans-unit id="4e9b8de2d5b44130b83fee9c1ecdc0d98e51930d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s review in detail what just happened in your Hello, world! program. Here&amp;rsquo;s the first piece of the puzzle:</source>
          <target state="translated">Hello, world에서 무슨 일이 있었는지 자세히 검토합시다! 프로그램. 퍼즐의 첫 번째 조각은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="158e58c1e56ad7bd97dd01d2a60cf00e419cdf7a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run the program again with arguments that don&amp;rsquo;t cause an error but still redirect standard output to a file, like so:</source>
          <target state="translated">오류를 일으키지 않지만 여전히 표준 출력을 파일로 리디렉션하는 인수를 사용하여 프로그램을 다시 실행 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c402a40660ac8a0f30bee1587ae0160a6f7fa3c1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run the program now!</source>
          <target state="translated">지금 프로그램을 실행하자!</target>
        </trans-unit>
        <trans-unit id="a23620a8daca09feb45d362acea31eb531fda8ce" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run this code with any string as the first command line argument (because we haven&amp;rsquo;t implemented the searching part yet) and the &lt;em&gt;poem.txt&lt;/em&gt; file as the second argument:</source>
          <target state="translated">검색 코드를 아직 구현하지 않았기 때문에 첫 번째 명령 줄 인수로 문자열 을 사용하고 두 번째 인수로 &lt;em&gt;poem.txt&lt;/em&gt; 파일을 사용 하여이 코드를 실행 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="a00a1c9672a401c35b2df73be4edbb0185a8d666" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say a regression is found. Good thing we had some time to test the beta release before the regression snuck into a stable release! The fix is applied to &lt;code&gt;master&lt;/code&gt;, so that nightly is fixed, and then the fix is backported to the &lt;code&gt;beta&lt;/code&gt; branch, and a new release of beta is produced:</source>
          <target state="translated">회귀가 발견되었다고 가정 해 봅시다. 회귀가 안정적인 릴리스로 들어가기 전에 베타 릴리스를 테스트 할 시간이있었습니다. 수정 프로그램은 &lt;code&gt;master&lt;/code&gt; 에 적용되어 야간에 수정 된 다음 수정 프로그램이 &lt;code&gt;beta&lt;/code&gt; 분기로 백 포트되고 새로운 베타 릴리스가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="9f9ce6103baa4662da2c83f8f5cc76efdcd0525f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we want to write a function that takes an &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; and, if there&amp;rsquo;s a value inside, adds 1 to that value. If there isn&amp;rsquo;t a value inside, the function should return the &lt;code&gt;None&lt;/code&gt; value and not attempt to perform any operations.</source>
          <target state="translated">&lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; 를 취하는 함수를 작성하고 내부에 값이 있으면 그 값에 1을 더 한다고 가정 해 봅시다 . 내부에 값이 없으면 함수는 &lt;code&gt;None&lt;/code&gt; 값을 반환하고 작업을 수행하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="2d4331831e839f96e4320b04d84f9d160c78c289" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have a variable of type &lt;code&gt;u8&lt;/code&gt; that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, &lt;em&gt;integer overflow&lt;/em&gt; will occur. Rust has some interesting rules involving this behavior. When you&amp;rsquo;re compiling in debug mode, Rust includes checks for integer overflow that cause your program to &lt;em&gt;panic&lt;/em&gt; at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we&amp;rsquo;ll discuss panics in more depth in the &lt;a href=&quot;ch09-01-unrecoverable-errors-with-panic&quot;&gt;&amp;ldquo;Unrecoverable Errors with &lt;code&gt;panic!&lt;/code&gt;&amp;rdquo;&lt;/a&gt; section in Chapter 9.</source>
          <target state="translated">0과 255 사이의 값을 보유 할 수있는 &lt;code&gt;u8&lt;/code&gt; 유형의 변수가 있다고 가정 합니다. 변수를 해당 범위 밖의 값 (예 : 256)으로 변경하려고하면 &lt;em&gt;정수 오버 플로우&lt;/em&gt; 가 발생합니다. Rust는이 행동과 관련된 흥미로운 규칙을 가지고 있습니다. 디버그 모드에서 컴파일 할 때 Rust에는 정수 오버플로 검사가 포함되어이 동작이 발생하면 런타임에 프로그램이 &lt;em&gt;패닉 상태&lt;/em&gt; 가됩니다. Rust는 프로그램이 오류와 함께 종료 될 때 당황이라는 용어를 사용합니다. 우리는 패닉에 대해 더 깊이 논의 할 것입니다.&lt;a href=&quot;ch09-01-unrecoverable-errors-with-panic&quot;&gt; 함께 &quot;복구 할 수없는 오류 &lt;code&gt;panic!&lt;/code&gt; &amp;rdquo;&lt;/a&gt; 섹션 9 장.</target>
        </trans-unit>
        <trans-unit id="f0e1d796103ec14a5789c6d54a9113a4a736b9aa" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see if this implementation passes the tests:</source>
          <target state="translated">이 구현이 테스트를 통과했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e75f56bc99e0b08a29707c986c241848f766cec0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see what happens when we try to implement &lt;code&gt;OutlinePrint&lt;/code&gt; on a type that doesn&amp;rsquo;t implement &lt;code&gt;Display&lt;/code&gt;, such as the &lt;code&gt;Point&lt;/code&gt; struct:</source>
          <target state="translated">&lt;code&gt;Display&lt;/code&gt; 를 구현하지 않는 유형에서 &lt;code&gt;OutlinePrint&lt;/code&gt; 를 구현하려고 할 때 어떤 일이 발생하는지 봅시다 . &lt;code&gt;Point&lt;/code&gt; 구조체 .</target>
        </trans-unit>
        <trans-unit id="c59bb772f42d6153c276f779685fbcbc51239a51" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start a new binary project named &lt;em&gt;functions&lt;/em&gt; to explore functions further. Place the &lt;code&gt;another_function&lt;/code&gt; example in &lt;em&gt;src/main.rs&lt;/em&gt; and run it. You should see the following output:</source>
          <target state="translated">&lt;em&gt;함수&lt;/em&gt; 라는 새로운 바이너리 프로젝트를 시작하여 &lt;em&gt;함수&lt;/em&gt; 를 자세히 살펴 보겠습니다. 장소 &lt;code&gt;another_function&lt;/code&gt; 의 예를 &lt;em&gt;SRC / main.rs을&lt;/em&gt; 실행하십시오. 다음과 같은 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="97cf07881b2328430539d964be0df2b91b35c6ed" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by creating a channel in &lt;code&gt;ThreadPool::new&lt;/code&gt; and holding the sending side in the &lt;code&gt;ThreadPool&lt;/code&gt; instance, as shown in Listing 20-16. The &lt;code&gt;Job&lt;/code&gt; struct doesn&amp;rsquo;t hold anything for now but will be the type of item we&amp;rsquo;re sending down the channel.</source>
          <target state="translated">&lt;code&gt;ThreadPool::new&lt;/code&gt; 에서 채널을 만들고 &lt;code&gt;ThreadPool&lt;/code&gt; 인스턴스 에서 전송 측을 잡고 시작합니다 ( Listing 20-16). &lt;code&gt;Job&lt;/code&gt; 구조체 지금은 아무것도 보유하지 않고 우리가 채널을 보내는 항목의 유형이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="bf13023ab8a50a9cde566fb86f6034b24ede9e80" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with implementing &lt;code&gt;Drop&lt;/code&gt; on our thread pool. When the pool is dropped, our threads should all join to make sure they finish their work. Listing 20-22 shows a first attempt at a &lt;code&gt;Drop&lt;/code&gt; implementation; this code won&amp;rsquo;t quite work yet.</source>
          <target state="translated">스레드 풀에서 &lt;code&gt;Drop&lt;/code&gt; 을 구현하는 것으로 시작하겠습니다 . 풀이 삭제되면 스레드가 모두 참여하여 작업을 완료해야합니다. 목록 20-22는 &lt;code&gt;Drop&lt;/code&gt; 구현 의 첫 번째 시도를 보여줍니다 . 이 코드는 아직 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="590a1a269af356fe7eb20ade960ec2172988f407" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with implementing &lt;code&gt;Drop&lt;/code&gt; on our thread pool. When the pool is dropped, our threads should all join to make sure they finish their work. Listing 20-23 shows a first attempt at a &lt;code&gt;Drop&lt;/code&gt; implementation; this code won&amp;rsquo;t quite work yet.</source>
          <target state="translated">스레드 풀에서 &lt;code&gt;Drop&lt;/code&gt; 을 구현하는 것으로 시작하겠습니다 . 풀이 떨어지면 스레드가 모두 연결되어 작업을 완료해야합니다. Listing 20-23은 &lt;code&gt;Drop&lt;/code&gt; 구현 . 이 코드는 아직 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="17bad3ae86bcd63a6cce044cc99494cc4fff84d4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start your Rust journey! There&amp;rsquo;s a lot to learn, but every journey starts somewhere. In this chapter, we&amp;rsquo;ll discuss:</source>
          <target state="translated">녹 여행을 시작합시다! 배울 것이 많지만 모든 여행은 어딘가에서 시작됩니다. 이 장에서는 다음에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0457bf0b3ac99ac66b1f341140a99488a66fb382" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s switch to something a bit less complex: hash maps!</source>
          <target state="translated">좀 덜 복잡한 것으로 전환 해 봅시다 : 해시 맵!</target>
        </trans-unit>
        <trans-unit id="27749ea9200d1a0f4c7054bf492ec3c0b20e784f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a closer look at exactly what&amp;rsquo;s happening at each stage of our &lt;code&gt;dangle&lt;/code&gt; code:</source>
          <target state="translated">&lt;code&gt;dangle&lt;/code&gt; 코드 의 각 단계에서 무슨 일이 일어나고 있는지 자세히 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="7d9a8307e36aca49fe8db4d93f11fe8c7cef9311" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a closer look at the function call here:</source>
          <target state="translated">함수 호출을 자세히 살펴 보자.</target>
        </trans-unit>
        <trans-unit id="9a0c63ba49eeceb9940e6cb267159151436db7f3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take advantage of this newfound modularity by doing something that would have been difficult with the old code but is easy with the new code: we&amp;rsquo;ll write some tests!</source>
          <target state="translated">이전 코드로는 어려웠지만 새 코드로는 쉬운 작업을 수행하여이 새로운 모듈 식을 활용 해 봅시다. 테스트를 작성하겠습니다!</target>
        </trans-unit>
        <trans-unit id="1e8a01207efa7ffcc3d9fbd6fc8377d0a2bd28de" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take the idea of using Rust&amp;rsquo;s type system to ensure we have a valid value one step further and look at creating a custom type for validation. Recall the guessing game in Chapter 2 in which our code asked the user to guess a number between 1 and 100. We never validated that the user&amp;rsquo;s guess was between those numbers before checking it against our secret number; we only validated that the guess was positive. In this case, the consequences were not very dire: our output of &amp;ldquo;Too high&amp;rdquo; or &amp;ldquo;Too low&amp;rdquo; would still be correct. But it would be a useful enhancement to guide the user toward valid guesses and have different behavior when a user guesses a number that&amp;rsquo;s out of range versus when a user types, for example, letters instead.</source>
          <target state="translated">Rust의 유형 시스템을 사용하여 한 단계 더 유효한 가치를 보장하고 유효성 검사를위한 사용자 정의 유형을 만드는 방법을 살펴 보겠습니다. 코드가 사용자에게 1에서 100 사이의 숫자를 추측하도록 요청한 2 장의 추측 게임을 상기하십시오. 우리는 사용자의 추측이 비밀 번호와 비교하기 전에 그 숫자 사이에 있다는 것을 검증하지 않았습니다. 우리는 추측이 긍정적이라는 것을 확인했습니다. 이 경우 그 결과는 그리 심각하지 않았습니다.&amp;ldquo;너무 높음&amp;rdquo;또는&amp;ldquo;너무 낮음&amp;rdquo;에 대한 출력은 여전히 ​​정확합니다. 그러나 사용자를 올바른 추측으로 안내하고 사용자가 범위를 벗어난 숫자를 추측 할 때와 사용자가 문자를 입력 할 때와 같이 입력 할 때 다른 동작을하는 것이 유용한 향상이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="10bbc468cc51314953c3274a9c50cb0da6662c26" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s test the first part of the guessing game. Run it using &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="translated">추측 게임의 첫 부분을 테스트 해 봅시다. &lt;code&gt;cargo run&lt;/code&gt; 사용하여 실행 .</target>
        </trans-unit>
        <trans-unit id="5f2f9297e2dc6cf0f3bff432893229470763f14d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s think about the signature of this function:</source>
          <target state="translated">이 함수의 서명에 대해 생각해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="0e370a4cd7c7ee7160c1da9e21eeb3426aa051c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try adding the &lt;code&gt;main&lt;/code&gt; function in Listing 15-7 to Listing 15-8 and changing it to use the &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type we&amp;rsquo;ve defined instead of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. The code in Listing 15-9 won&amp;rsquo;t compile because Rust doesn&amp;rsquo;t know how to dereference &lt;code&gt;MyBox&lt;/code&gt;.</source>
          <target state="translated">Listing 15-7 의 &lt;code&gt;main&lt;/code&gt; 함수를 Listing 15-8에 추가하고 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 대신 정의한 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 유형 을 사용하도록 변경해 보자 . Rust가 &lt;code&gt;MyBox&lt;/code&gt; 를 역 참조하는 방법을 모르기 때문에 Listing 15-9의 코드는 컴파일되지 않는다 .</target>
        </trans-unit>
        <trans-unit id="f6856c71f770128395912c9e4d84ed22f9c2d61c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try calling &lt;code&gt;panic!&lt;/code&gt; in a simple program:</source>
          <target state="translated">&lt;code&gt;panic!&lt;/code&gt; 전화를 해보자 !간단한 프로그램에서 :</target>
        </trans-unit>
        <trans-unit id="495c15a2fcdcf4917d9c1bfab9452d52f6946a12" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try changing the value of &lt;code&gt;number&lt;/code&gt; to a value that makes the condition &lt;code&gt;false&lt;/code&gt; to see what happens:</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 의 값을 조건을 &lt;code&gt;false&lt;/code&gt; 로 만드는 값으로 변경해 봅시다 으로 어떤 일이 발생하는지 .</target>
        </trans-unit>
        <trans-unit id="7e7646ea7f3a1ac4db23658ee4f242a38dc0f2d4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try it! The &lt;code&gt;println!&lt;/code&gt; macro call will now look like &lt;code&gt;println!(&quot;rect1 is {:?}&quot;, rect1);&lt;/code&gt;. Putting the specifier &lt;code&gt;:?&lt;/code&gt; inside the curly brackets tells &lt;code&gt;println!&lt;/code&gt; we want to use an output format called &lt;code&gt;Debug&lt;/code&gt;. The &lt;code&gt;Debug&lt;/code&gt; trait enables us to print our struct in a way that is useful for developers so we can see its value while we&amp;rsquo;re debugging our code.</source>
          <target state="translated">해 봅시다! &lt;code&gt;println!&lt;/code&gt; 매크로 호출은 이제 &lt;code&gt;println!(&quot;rect1 is {:?}&quot;, rect1);&lt;/code&gt; 처럼 보일 것입니다 ! ( &quot;rect1 is {:?}&quot;, rect1); . 지정자 &lt;code&gt;:?&lt;/code&gt; 중괄호 안에 &lt;code&gt;println!&lt;/code&gt; 알려줍니다 ! &lt;code&gt;Debug&lt;/code&gt; 라는 출력 형식을 사용하려고합니다 . &lt;code&gt;Debug&lt;/code&gt; 우리를있게 특성은 우리가 우리의 코드를 디버깅하는 동안 우리는 그 값을 볼 수 있도록 개발자를위한 유용한 방법으로 우리의 구조체를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="bd95d7f3d11c94bb095fdce37f40a8188a0a9f0c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try passing a receiving end of the channel into each worker as the thread pool creates the channel. We know we want to use the receiving end in the thread that the workers spawn, so we&amp;rsquo;ll reference the &lt;code&gt;receiver&lt;/code&gt; parameter in the closure. The code in Listing 20-17 won&amp;rsquo;t quite compile yet.</source>
          <target state="translated">스레드 풀이 채널을 만들 때 채널의 수신 쪽을 각 작업자에게 전달해 봅시다. 우리는 워커가 생성하는 스레드에서 수신 끝을 사용하고 싶다는 것을 알고 있으므로 &lt;code&gt;receiver&lt;/code&gt; 참조합니다. 클로저에서 매개 변수를 . Listing 20-17의 코드는 아직 컴파일되지 않았다.</target>
        </trans-unit>
        <trans-unit id="1369c278ca19b1e056ddf12681c203bea51b902a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try running this code! Invoke &lt;code&gt;cargo run&lt;/code&gt; in the terminal and then load &lt;em&gt;127.0.0.1:7878&lt;/em&gt; in a web browser. The browser should show an error message like &amp;ldquo;Connection reset,&amp;rdquo; because the server isn&amp;rsquo;t currently sending back any data. But when you look at your terminal, you should see several messages that were printed when the browser connected to the server!</source>
          <target state="translated">이 코드를 실행 해 봅시다! 터미널에서 &lt;code&gt;cargo run&lt;/code&gt; 을 호출 한 다음 &lt;em&gt;127.0.0.1:7878&lt;/em&gt; 을로드하십시오.&lt;em&gt;&lt;/em&gt; 웹 브라우저에서. 서버가 현재 데이터를 다시 보내지 않기 때문에 브라우저에 &quot;연결 재설정&quot;과 같은 오류 메시지가 표시되어야합니다. 그러나 터미널을 보면 브라우저가 서버에 연결되었을 때 인쇄 된 몇 가지 메시지가 표시됩니다!</target>
        </trans-unit>
        <trans-unit id="b5df448e7bbf55b42cbf4762a517bb598ff93363" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try running this code. Replace the program currently in your &lt;em&gt;functions&lt;/em&gt; project&amp;rsquo;s &lt;em&gt;src/main.rs&lt;/em&gt; file with the preceding example and run it using &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="translated">이 코드를 실행 해 봅시다. 현재 &lt;em&gt;함수&lt;/em&gt; 프로젝트의 &lt;em&gt;src / main.rs&lt;/em&gt; 파일에있는 프로그램을 이전 예제로 &lt;em&gt;바꾸고 &lt;/em&gt; &lt;code&gt;cargo run&lt;/code&gt; 을 사용하여 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="41e20d578122ffb945b15f0ad510b73ca09a5d3f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try this code! Start the program and make a request in a web browser again. Note that we&amp;rsquo;ll still get an error page in the browser, but our program&amp;rsquo;s output in the terminal will now look similar to this:</source>
          <target state="translated">이 코드를 사용해 봅시다! 프로그램을 시작하고 웹 브라우저에서 다시 요청하십시오. 브라우저에는 여전히 오류 페이지가 표시되지만 터미널의 프로그램 출력은 이제 다음과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="7cc97ca0df32f4fb1eb75d95da6a337fcd334535" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try to compile Listing 7-3 and find out why it won&amp;rsquo;t compile yet! The error we get is shown in Listing 7-4.</source>
          <target state="translated">Listing 7-3을 컴파일하고 아직 컴파일되지 않는 이유를 알아 보자! 우리가 얻는 오류는 Listing 7-4에 표시되어있다.</target>
        </trans-unit>
        <trans-unit id="11ff9da674c818134a4406c35f39622fa04e8cbd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try to create a dangling reference, which Rust will prevent with a compile-time error:</source>
          <target state="translated">Rust가 컴파일 타임 오류로 방지하는 매달려있는 참조를 만들어 봅시다.</target>
        </trans-unit>
        <trans-unit id="ad30420ec21f7046e9cdcc78a94ec41a99a4cd28" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through an example of what would happen with the &lt;code&gt;match&lt;/code&gt; expression used here. Say that the user has guessed 50 and the randomly generated secret number this time is 38. When the code compares 50 to 38, the &lt;code&gt;cmp&lt;/code&gt; method will return &lt;code&gt;Ordering::Greater&lt;/code&gt;, because 50 is greater than 38. The &lt;code&gt;match&lt;/code&gt; expression gets the &lt;code&gt;Ordering::Greater&lt;/code&gt; value and starts checking each arm&amp;rsquo;s pattern. It looks at the first arm&amp;rsquo;s pattern, &lt;code&gt;Ordering::Less&lt;/code&gt;, and sees that the value &lt;code&gt;Ordering::Greater&lt;/code&gt; does not match &lt;code&gt;Ordering::Less&lt;/code&gt;, so it ignores the code in that arm and moves to the next arm. The next arm&amp;rsquo;s pattern, &lt;code&gt;Ordering::Greater&lt;/code&gt;, &lt;em&gt;does&lt;/em&gt; match &lt;code&gt;Ordering::Greater&lt;/code&gt;! The associated code in that arm will execute and print &lt;code&gt;Too big!&lt;/code&gt; to the screen. The &lt;code&gt;match&lt;/code&gt; expression ends because it has no need to look at the last arm in this scenario.</source>
          <target state="translated">여기에 사용 된 &lt;code&gt;match&lt;/code&gt; 표현식에서 발생할 수있는 예를 살펴 보겠습니다 . 사용자가 50을 추측하고 이번에는 임의로 생성 된 비밀 번호가 38이라고 가정합니다. 코드가 50과 38을 비교할 때 &lt;code&gt;cmp&lt;/code&gt; 메소드는 50이 38보다 크기 때문에 &lt;code&gt;Ordering::Greater&lt;/code&gt; 를 반환합니다 . &lt;code&gt;match&lt;/code&gt; 표현식은 &lt;code&gt;Ordering::Greater&lt;/code&gt; 값이 클수록 각 팔의 패턴을 확인하기 시작합니다. 첫 번째 팔의 패턴 인 &lt;code&gt;Ordering::Less&lt;/code&gt; 를보고 &lt;code&gt;Ordering::Greater&lt;/code&gt; 값이 &lt;code&gt;Ordering::Less&lt;/code&gt; 와 일치하지 않음을 확인 하여 해당 팔의 코드를 무시하고 다음 팔로 이동합니다. 다음 팔의 패턴은 &lt;code&gt;Ordering::Greater&lt;/code&gt; , &lt;em&gt;하지&lt;/em&gt; 매치 &lt;code&gt;Ordering::Greater&lt;/code&gt; ! 해당 팔의 관련 코드가 실행되어 &lt;code&gt;Too big!&lt;/code&gt; 화면에. &lt;code&gt;match&lt;/code&gt; 표현의 끝은이 시나리오의 마지막 팔을보고 할 필요가 없기 때문에.</target>
        </trans-unit>
        <trans-unit id="7603084911e7c02de0fffb01fc0d07271e8ab207" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through what happens when the &lt;code&gt;match&lt;/code&gt; expression runs. The pattern in the first match arm doesn&amp;rsquo;t match the defined value of &lt;code&gt;x&lt;/code&gt;, so the code continues.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 표현식이 실행될 때 어떤 일이 발생하는지 살펴 보겠습니다 . 첫 번째 일치 암의 패턴이 정의 된 &lt;code&gt;x&lt;/code&gt; 값과 일치하지 않으므로 코드가 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="9dbd7c7d9a346617c48d1fe6e1ab8464dd12c2ee" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through what happens when we create a package. First, we enter the command &lt;code&gt;cargo new&lt;/code&gt;:</source>
          <target state="translated">패키지를 만들 때 어떤 일이 발생하는지 살펴 보겠습니다. 먼저, 우리는 &lt;code&gt;cargo new&lt;/code&gt; 을 입력합니다 :</target>
        </trans-unit>
        <trans-unit id="85979a5d9f34f3050620ce86eda10daa14a1b88f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s work on an example of a situation in which it&amp;rsquo;s useful to store a closure to be executed later. Along the way, we&amp;rsquo;ll talk about the syntax of closures, type inference, and traits.</source>
          <target state="translated">나중에 실행할 클로저를 저장하는 것이 유용한 상황의 예를 살펴 보겠습니다. 그 과정에서 클로저 구문, 형식 유추 및 특성에 대해 이야기하겠습니다.</target>
        </trans-unit>
        <trans-unit id="dde68cf723b263931fff6274e2649443a376d09e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s work through a practical example where we can use &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; to mutate an immutable value and see why that is useful.</source>
          <target state="translated">&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용 하여 불변 값을 변경하고 그 이유가 유용한 이유를 살펴볼 수있는 실용적인 예를 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="48386f6d1144155006a32871e15dfe1b9ce157fb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s work through each step, starting with iterating through lines.</source>
          <target state="translated">라인 반복을 시작으로 각 단계를 수행해 봅시다.</target>
        </trans-unit>
        <trans-unit id="a1a52fb721ec0d05f400a261580d4ddb22293c65" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write a function that returns the longer of two string slices. This function will take two string slices and return a string slice. After we&amp;rsquo;ve implemented the &lt;code&gt;longest&lt;/code&gt; function, the code in Listing 10-20 should print &lt;code&gt;The longest string is abcd&lt;/code&gt;.</source>
          <target state="translated">두 문자열 슬라이스 중 더 긴 문자열을 반환하는 함수를 작성해 봅시다. 이 함수는 두 개의 문자열 슬라이스를 사용하여 문자열 슬라이스를 반환합니다. &lt;code&gt;longest&lt;/code&gt; 함수를 구현 한 후 , 목록 10-20의 코드는 인쇄해야합니다 &lt;code&gt;The longest string is abcd&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="31701d3a630b4f1aa08c2b129407ae716eb89b88" translate="yes" xml:space="preserve">
          <source>Let's cover each of those in turn:</source>
          <target state="translated">각각을 차례로 커버합시다 :</target>
        </trans-unit>
        <trans-unit id="4c315b125c5927660bb768b8b3fda2b0a5ee7326" translate="yes" xml:space="preserve">
          <source>Let's make an iterator named &lt;code&gt;Counter&lt;/code&gt; which counts from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; 에서 &lt;code&gt;5&lt;/code&gt; 까지 카운트하는 &lt;code&gt;Counter&lt;/code&gt; 라는 이름의 반복자를 만들어 봅시다 .</target>
        </trans-unit>
        <trans-unit id="6c6a4583ed007c9bb1513143277357a280135d4c" translate="yes" xml:space="preserve">
          <source>Let's start with some erroneous code examples:</source>
          <target state="translated">잘못된 코드 예제로 시작해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="de018a296a31a1ffdcd9d1c61756c91e2595cea1" translate="yes" xml:space="preserve">
          <source>Let's walk through each step of the iteration here:</source>
          <target state="translated">반복의 각 단계를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="44815d1f0973ea841fa50391ff27766e7a1e43e1" translate="yes" xml:space="preserve">
          <source>Let's write the numbers one through ten to a &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; 에&lt;/a&gt; 1부터 10까지의 숫자를 씁니다 .</target>
        </trans-unit>
        <trans-unit id="a46a79428acd36421f88fb475bcbddfbea0e22e5" translate="yes" xml:space="preserve">
          <source>Lexical structure</source>
          <target state="translated">어휘 구조</target>
        </trans-unit>
        <trans-unit id="fb7bfffe6d495d7455834fc0f0e45a868cd0eed3" translate="yes" xml:space="preserve">
          <source>Lexicographical comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3213812f1ac887dc64277b785662c91c2be6f0d" translate="yes" xml:space="preserve">
          <source>Lexicographical comparison is an operation with the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ced95f3282c2304ccbd2d1176522c359d54ea9" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../../iter/trait.iterator#method.cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d2cca5450332e424d128448475a6775439ff31f6" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0f0dc7378d16e255ed01aabc2a54a07e3e6629f4" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d55096d24feded547137c63c7a384f3c4c0f255" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bddaf8f2edd0c91cf260c1ac14934d6aa825ae88" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../iter/trait.iterator#method.cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8a76c78472395e823b945082e38bc5d303e55719" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d126c71de93d47651f31c95e0aa450c4800fd88" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="609c60c9d5603d69bbf35fffd3566a6af30afb36" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43c25090a4ef088c71ace7e293566a76c0bb25be" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../iter/trait.iterator#method.cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="668bd83da9d322ea78d016864c5ab95e76011dec" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2bff3a67247c3882318b7f41ce97184a0411570f" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd5c8cdaa83d4509b191af2c71b1b48c60f72b24" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dcf6b114d1123581ae2c9e4273fca508b0fdbde3" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;iter/trait.iterator#method.cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d4ebf62364837d04d562c736d452c744c46f6e4" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;iter/trait.iterator#method.partial_cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3953e041c330441a75e1dfa61d597df8c7d470e" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc2ad7e98b8195217ed6030e622bceaccf34c46b" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="513ec20a4e8698e9bbbff2e3985a29e06196f05c" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function.</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="a2e31f29d209ae250a7a227132954b7d8fe04deb" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;trait.iterator#method.cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1b3f1a9e4282d09a166c49d84325b88085f57ffa" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련 하여이 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소를 다른 요소의 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;trait.iterator#method.partial_cmp_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f489f2a5cd07e538c7596d152dd9c17e3db469d7" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another.</source>
          <target state="translated">이 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="15c8e7753b0c8e6c7481529dc1eff5f203de8fd0" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39c64287527264c710512a6ae1c3417e504fcde8" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 요소 를 다른 요소와 사 전적으로 비교합니다 . &lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f22f0e1553138efb51680148ef1747ad26c97982" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another.</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="d38859ceb7b6303a207032995bde9d03c3feea29" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca4735197429808d0efeb2b253fe9bcfce18fe50" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da9611fc3a83516ea2471a2bc5512aa400680e0d" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="baa7a6a1172224029d4ace92b0dcc42af5ea43dc" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df2d601aaa116406a1d3ed2d19ce7ccb8eda9f6d" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e11c383f8dbc8d0d02a7e4c42f755738eaa3bd8b" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5193c64367cbcdbfcac47602ae539c77c733dbd" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50753dbaf3a4231173ff7ea3444ae3faef6bec15" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a26e03f1b58a87f3e69a164fb32f2308387a9a0d" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77268650d6474077dd95b0c1034d89e6138d9c8a" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">사 전적으로이 &lt;code&gt;Iterator&lt;/code&gt; 의 요소 를 다른 반복자 와 비교합니다 . &lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cdfc7b1ef1b25862c1df7bf310283ec505f2f9e" translate="yes" xml:space="preserve">
          <source>Library authors should usually not directly implement this trait, but should prefer implementing the &lt;a href=&quot;trait.tryfrom&quot;&gt;&lt;code&gt;TryFrom&lt;/code&gt;&lt;/a&gt; trait, which offers greater flexibility and provides an equivalent &lt;code&gt;TryInto&lt;/code&gt; implementation for free, thanks to a blanket implementation in the standard library. For more information on this, see the documentation for &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">라이브러리 작성자는 일반적으로이 특성을 직접 구현하지 말고 표준 라이브러리의 블랭킷 구현 덕분에 유연성이 &lt;code&gt;TryInto&lt;/code&gt; 무료 로 동등한 TryInto 구현을 제공하는 &lt;a href=&quot;trait.tryfrom&quot;&gt; &lt;code&gt;TryFrom&lt;/code&gt; &lt;/a&gt; 특성을 구현해야합니다 . 이에 대한 자세한 내용은 &lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4758ec4228804e6ab30fe33d5019e3936dc6e0ac" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License, Version 2.0 or the MIT license, at your option.</source>
          <target state="translated">선택에 따라 Apache 라이센스, 버전 2.0 또는 MIT 라이센스에 따라 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="5ef0008f25a377dd2d246f55bb6f44f04dd3b9a3" translate="yes" xml:space="preserve">
          <source>Lifetime Annotation Syntax</source>
          <target state="translated">평생 주석 구문</target>
        </trans-unit>
        <trans-unit id="d684ab1615c80d05a111e3a5d43f3dd40b1f7fc7" translate="yes" xml:space="preserve">
          <source>Lifetime Annotations in Function Signatures</source>
          <target state="translated">함수 시그니처의 수명 주석</target>
        </trans-unit>
        <trans-unit id="ff9298a957239ce20a277b248758f21de5df0edf" translate="yes" xml:space="preserve">
          <source>Lifetime Annotations in Method Definitions</source>
          <target state="translated">분석법 정의의 수명 주석</target>
        </trans-unit>
        <trans-unit id="bf7eeb5a85880b38a5e28e77bcee94cc13003db0" translate="yes" xml:space="preserve">
          <source>Lifetime Annotations in Struct Definitions</source>
          <target state="translated">구조 정의의 수명 주석</target>
        </trans-unit>
        <trans-unit id="674c9a2bca3da0091dd89b55224da7caea179e1f" translate="yes" xml:space="preserve">
          <source>Lifetime Elision</source>
          <target state="translated">평생 소원</target>
        </trans-unit>
        <trans-unit id="717ff13cd888c9b3f73863d8fc6f55fb70c424ad" translate="yes" xml:space="preserve">
          <source>Lifetime annotations don&amp;rsquo;t change how long any of the references live. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter. Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.</source>
          <target state="translated">수명 주석은 참조의 수명 기간을 변경하지 않습니다. 서명이 제네릭 형식 매개 변수를 지정할 때 함수가 모든 형식을 허용 할 수있는 것처럼 함수는 일반 수명 매개 변수를 지정하여 수명이있는 참조를 허용 할 수 있습니다. 수명 주석은 수명에 영향을 미치지 않으면 서 여러 참조 수명의 관계를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="afdff3576da5c17c6d56a74897ff356724bed98a" translate="yes" xml:space="preserve">
          <source>Lifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (&lt;code&gt;'&lt;/code&gt;) and are usually all lowercase and very short, like generic types. Most people use the name &lt;code&gt;'a&lt;/code&gt;. We place lifetime parameter annotations after the &lt;code&gt;&amp;amp;&lt;/code&gt; of a reference, using a space to separate the annotation from the reference&amp;rsquo;s type.</source>
          <target state="translated">수명 주석에는 약간 특이한 구문이 있습니다. 수명 매개 변수의 이름은 아포스트로피 ( &lt;code&gt;'&lt;/code&gt; )로 시작해야하며 일반적으로 일반 유형과 같이 모두 소문자이며 매우 짧습니다. 대부분의 사람들은 &lt;code&gt;'a&lt;/code&gt; ' 라는 이름을 사용합니다 . 우리는 평생 매개 변수 주석을 참조 의 &lt;code&gt;&amp;amp;&lt;/code&gt; 뒤에 배치 하고 주석을 참조 유형과 분리하는 공백을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1135a93608f0c4c9693be849ed8d4d3c3627b3b8" translate="yes" xml:space="preserve">
          <source>Lifetime bounds</source>
          <target state="translated">수명 한계</target>
        </trans-unit>
        <trans-unit id="251f40e2a7cdcbd4967d480a9d96d101163e7557" translate="yes" xml:space="preserve">
          <source>Lifetime bounds can be applied to types or other lifetimes. The bound &lt;code&gt;'a: 'b&lt;/code&gt; is usually read as &lt;code&gt;'a&lt;/code&gt;&lt;em&gt;outlives&lt;/em&gt;&lt;code&gt;'b&lt;/code&gt;. &lt;code&gt;'a: 'b&lt;/code&gt; means that &lt;code&gt;'a&lt;/code&gt; lasts longer than &lt;code&gt;'b&lt;/code&gt;, so a reference &lt;code&gt;&amp;amp;'a ()&lt;/code&gt; is valid whenever &lt;code&gt;&amp;amp;'b ()&lt;/code&gt; is valid.</source>
          <target state="translated">수명 범위는 유형 또는 다른 수명에 적용될 수 있습니다. 바운드는 &lt;code&gt;'a: 'b&lt;/code&gt; 일반적으로 읽기 &lt;code&gt;'a&lt;/code&gt; &lt;em&gt;들보 다 오래 남았습니다 &lt;/em&gt; &lt;code&gt;'b&lt;/code&gt; . &lt;code&gt;'a: 'b&lt;/code&gt; 것을 의미 &lt;code&gt;'a&lt;/code&gt; 이상 지속을 &lt;code&gt;'b&lt;/code&gt; 기준이므로 &lt;code&gt;&amp;amp;'a ()&lt;/code&gt; 언제 유효 &lt;code&gt;&amp;amp;'b ()&lt;/code&gt; 유효하다.</target>
        </trans-unit>
        <trans-unit id="4dbeb69ffc17e7e2b0614af0534a87d095aeab01" translate="yes" xml:space="preserve">
          <source>Lifetime elision</source>
          <target state="translated">평생 소원</target>
        </trans-unit>
        <trans-unit id="4ed17519ce5dbd6c80c5942b9e801bd65600d677" translate="yes" xml:space="preserve">
          <source>Lifetime elision in functions</source>
          <target state="translated">기능의 수명 제거</target>
        </trans-unit>
        <trans-unit id="cdf660f0b0e8334138261c27b1ecaed43d9845fb" translate="yes" xml:space="preserve">
          <source>Lifetime elision is a special, limited kind of inference for lifetimes in function signatures which allows you to leave out lifetimes in certain cases. For more background on lifetime elision see &lt;a href=&quot;book/ch10-03-lifetime-syntax#lifetime-elision&quot;&gt;the book&lt;/a&gt;.</source>
          <target state="translated">수명 제거는 함수 시그니처에서 수명에 대한 특별하고 제한된 종류의 추론으로 특정 경우 수명을 생략 할 수 있습니다. 평생 소실에 대한 자세한 배경은&lt;a href=&quot;book/ch10-03-lifetime-syntax#lifetime-elision&quot;&gt; 은 책을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3c1728f6f98aaf9465cf90c15cd1b748f66e76ad" translate="yes" xml:space="preserve">
          <source>Lifetime names for struct fields always need to be declared after the &lt;code&gt;impl&lt;/code&gt; keyword and then used after the struct&amp;rsquo;s name, because those lifetimes are part of the struct&amp;rsquo;s type.</source>
          <target state="translated">구조체 필드의 수명 이름은 항상 &lt;code&gt;impl&lt;/code&gt; 키워드 다음 구조체 이름 뒤에 사용해야합니다. 수명은 구조체 유형의 일부이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a900c570930642dfc60a61e8d7bac83d7d6ce835" translate="yes" xml:space="preserve">
          <source>Lifetime parameters and &lt;a href=&quot;expressions/loop-expr&quot;&gt;loop labels&lt;/a&gt; use LIFETIME_OR_LABEL tokens. Any LIFETIME_TOKEN will be accepted by the lexer, and for example, can be used in macros.</source>
          <target state="translated">수명 매개 변수 및 &lt;a href=&quot;expressions/loop-expr&quot;&gt; 루프 레이블&lt;/a&gt; 은 LIFETIME_OR_LABEL 토큰을 사용합니다. LIFETIME_TOKEN은 어휘 분석기에 의해 허용되며, 예를 들어 매크로에서 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ff5a6b571244bea88cc86b164846e047b3ec7b5" translate="yes" xml:space="preserve">
          <source>Lifetime parameters or &lt;a href=&quot;expressions/loop-expr#loop-labels&quot;&gt;loop labels&lt;/a&gt;</source>
          <target state="translated">수명 매개 변수 또는 &lt;a href=&quot;expressions/loop-expr#loop-labels&quot;&gt; 루프 레이블&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec6b2b953ecf8f329d7e04b783de42bfc3652a53" translate="yes" xml:space="preserve">
          <source>Lifetimes</source>
          <target state="translated">Lifetimes</target>
        </trans-unit>
        <trans-unit id="6e3d4513c00b42e75eeb4d12543903cf3991d567" translate="yes" xml:space="preserve">
          <source>Lifetimes and loop labels</source>
          <target state="translated">수명 및 루프 라벨</target>
        </trans-unit>
        <trans-unit id="44ebe0741417aa78ef5defc6e06797a635cee244" translate="yes" xml:space="preserve">
          <source>Lifetimes on function or method parameters are called &lt;em&gt;input lifetimes&lt;/em&gt;, and lifetimes on return values are called &lt;em&gt;output lifetimes&lt;/em&gt;.</source>
          <target state="translated">함수 또는 메서드 매개 변수의 &lt;em&gt;수명을 입력 수명&lt;/em&gt; 이라고 하고 반환 값의 수명을 &lt;em&gt;출력 수명&lt;/em&gt; 이라고 &lt;em&gt;합니다.&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b0908dfa434be81e3deb0facdeb85bcd33472550" translate="yes" xml:space="preserve">
          <source>Lifetimes used in &lt;code&gt;fn&lt;/code&gt; or &lt;code&gt;Fn&lt;/code&gt; syntax must be explicitly declared using &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; binders. For example:</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; 또는 &lt;code&gt;Fn&lt;/code&gt; 구문에 사용되는 수명 은 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 바인더를 사용하여 명시 적으로 선언해야합니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="711484ebabd34c5bee47c2a0196b50ef7c53c764" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="translated">&lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; 처럼 , 타임 아웃의 경과 여부에 관계없이이 함수가 반환 될 때 지정된 잠금이 다시 획득됩니다.</target>
        </trans-unit>
        <trans-unit id="9143067c5010240235e5098fdd6d0b035ca2de7f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#method.wait_until&quot;&gt;&lt;code&gt;wait_until&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="translated">&lt;a href=&quot;#method.wait_until&quot;&gt; &lt;code&gt;wait_until&lt;/code&gt; &lt;/a&gt; 처럼 , 시간 초과 여부에 관계없이이 함수가 리턴 될 때 지정된 잠금이 다시 획득됩니다.</target>
        </trans-unit>
        <trans-unit id="841a9a19b58dd6630bdc34ede04fb57fa218eece" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../../io/trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">같이 &lt;a href=&quot;../../../io/trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; ,이 버퍼의 조각에서 쓰는 것을 제외하고. &lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="090c127fd35edc1d60b1dabd86f3ca4ea132ca47" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../io/trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">같이 &lt;a href=&quot;../io/trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; ,이 버퍼의 조각에서 쓰는 것을 제외하고. &lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85cbabaec83102adcf38ba2f63965f7483dc4ff0" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;copy&lt;/code&gt; 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 &lt;code&gt;*src&lt;/code&gt; 에서 시작하는 영역과 &lt;code&gt;*dst&lt;/code&gt; 에서 시작하는 영역의 값을 모두 사용하십시오.&lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt; 메모리 안전을 위반할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6b5f673832d554b3ba278cb3e90ddc20575f12f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;copy_nonoverlapping&lt;/code&gt; 은 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 &lt;code&gt;*src&lt;/code&gt; 에서 시작하는 영역과 &lt;code&gt;*dst&lt;/code&gt; 에서 시작하는 영역의 값 을 &lt;em&gt;모두&lt;/em&gt; 사용 &lt;em&gt;하면 &lt;/em&gt;&lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;메모리 안전을 위반할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bbf650a829b373e9102813a508f7fe2ddc52356d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;copy_nonoverlapping&lt;/code&gt; 은 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 &lt;code&gt;*src&lt;/code&gt; 로 시작하는 영역과 &lt;code&gt;*dst&lt;/code&gt; 로 시작 하는 영역의 값 을 &lt;em&gt;모두&lt;/em&gt; 사용 &lt;em&gt;하면 &lt;/em&gt;&lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;메모리 안전을 위반할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="673f6dbc7b8c22dd58a3649d0763e6d47086e689" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;AcqRel&lt;/code&gt;&lt;/a&gt; (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Release&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;AcqRel&lt;/code&gt; &lt;/a&gt; 모든 스레드가 같은 순서로 모든 순차적으로 일관 작업을 참조하는 추가 보장과 (로드, 저장 및로드와 매장 운영, 각각의 경우).</target>
        </trans-unit>
        <trans-unit id="ddf9f8511904c5069b83f4fd094004a94b015444" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.forget&quot;&gt;&lt;code&gt;forget&lt;/code&gt;&lt;/a&gt;, but also accepts unsized values.</source>
          <target state="translated">&lt;a href=&quot;fn.forget&quot;&gt; &lt;code&gt;forget&lt;/code&gt; &lt;/a&gt; 과 마찬가지로 크기가 지정되지 않은 값도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="4b60bd7f4df6aad7fa80856c1bd518eaad347be6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;copy&lt;/code&gt; 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 &lt;code&gt;*src&lt;/code&gt; 에서 시작하는 영역과 &lt;code&gt;*dst&lt;/code&gt; 에서 시작하는 영역의 값을 모두 사용하십시오.&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt; 메모리 안전을 위반할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ae45f3009db76dae79642054ed9d2e4707eced76" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;copy_nonoverlapping&lt;/code&gt; 은 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 있다&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 &lt;code&gt;*src&lt;/code&gt; 에서 시작하는 영역과 &lt;code&gt;*dst&lt;/code&gt; 에서 시작하는 영역의 값 을 &lt;em&gt;모두&lt;/em&gt; 사용 &lt;em&gt;하면 &lt;/em&gt;&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;메모리 안전을 위반할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecfb87516d3e691309e3183e393372085b3eb5c7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;copy_nonoverlapping&lt;/code&gt; 은 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 &lt;code&gt;*src&lt;/code&gt; 로 시작하는 영역과 &lt;code&gt;*dst&lt;/code&gt; 로 시작 하는 영역의 값 을 &lt;em&gt;모두&lt;/em&gt; 사용 &lt;em&gt;하면 &lt;/em&gt;&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;메모리 안전을 위반할&lt;/a&gt; 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29fb501f0793a6ba4173aacc2026afb59ff625c1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;read_unaligned&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the returned value and the value at &lt;code&gt;*src&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;read_unaligned&lt;/code&gt; 은 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . 경우 &lt;code&gt;T&lt;/code&gt; 가 아닌 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 반환 값과의 값을 모두 사용하여, &lt;code&gt;*src&lt;/code&gt; 캔을&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt; 메모리 안전을 위반할&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf95f150b3e045a75caa61fd8dd299e1f6177de4" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;read_volatile&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the returned value and the value at &lt;code&gt;*src&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;. However, storing non-&lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; types in volatile memory is almost certainly incorrect.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;read_volatile&lt;/code&gt; 의 비트 사본 생성 &lt;code&gt;T&lt;/code&gt; 를 여부에 관계없이의, &lt;code&gt;T&lt;/code&gt; 는 것입니다 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 리턴 된 값과 &lt;code&gt;*src&lt;/code&gt; 의 값을 모두 사용하면 &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;메모리 안전을 위반할&lt;/a&gt; 수 있습니다 . 그러나 비 &lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; 저장 휘발성 메모리에 유형을 것은 거의 정확하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a2ef8c40adbd6ce1d9e2b9decbefda1339ad636f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt;&lt;code&gt;AcqRel&lt;/code&gt;&lt;/a&gt; (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.</source>
          <target state="translated">&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt; &lt;code&gt;Release&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt; &lt;code&gt;AcqRel&lt;/code&gt; &lt;/a&gt; 처럼 모든 스레드가 같은 순서로 모든 순차적으로 일관 작업을 참조하는 추가 보장과 (로드, 저장 및로드와 매장 운영, 각각의 경우).</target>
        </trans-unit>
        <trans-unit id="10040ebca04aab631b833e06ce9af822e9824086" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;io/trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">같이 &lt;a href=&quot;io/trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; ,이 버퍼의 조각에서 쓰는 것을 제외하고. &lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3cb3f2bd27f2c64ea34e80152dae14864b47bd75" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;keyword.struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;s and &lt;a href=&quot;keyword.enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt;s, a module and its content are private by default, unaccessible to code outside of the module.</source>
          <target state="translated">&lt;a href=&quot;keyword.struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;keyword.enum&quot;&gt; &lt;code&gt;enum&lt;/code&gt; &lt;/a&gt; 과 마찬가지로 모듈과 그 내용은 기본적으로 비공개이며 모듈 외부의 코드에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c4a2b45437346496bd0f17702b7e91d1466c2799" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt;, this macro also has a second version, where a custom panic message can be provided.</source>
          <target state="translated">&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt; 처럼 !이 매크로에는 맞춤 패닉 메시지를 제공 할 수있는 두 번째 버전도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a3d6c41c117ef0813067fce9ad6d2c797819f20" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt;, this macro has a second form, where a custom panic message can be provided.</source>
          <target state="translated">&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt; 처럼 ! 이 매크로는 두 번째 형식으로되어 있으며 사용자 지정 패닉 메시지를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f9660f47631acac7f2a52b8ab96514dc036d49e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;struct.bufwriter&quot;&gt;&lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;LineWriter&lt;/code&gt;&amp;rsquo;s buffer will also be flushed when the &lt;code&gt;LineWriter&lt;/code&gt; goes out of scope or when its internal buffer is full.</source>
          <target state="translated">추천 &lt;a href=&quot;struct.bufwriter&quot;&gt; &lt;code&gt;BufWriter&lt;/code&gt; &lt;/a&gt; 하는 &lt;code&gt;LineWriter&lt;/code&gt; 때의 버퍼는 플러시 &lt;code&gt;LineWriter&lt;/code&gt; 이 범위하거나 내부 버퍼가 가득 벗어나.</target>
        </trans-unit>
        <trans-unit id="58df427e5bbce21caf2fe2b837297d163849e77b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;struct.condvar#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="translated">&lt;a href=&quot;struct.condvar#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 지정된 잠금은 시간 초과 경과 여부에 관계없이이 함수가 반환 될 때 다시 획득됩니다.</target>
        </trans-unit>
        <trans-unit id="30c450b5b408d7fbd12d604817a55adc65281b8d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;struct.condvar#method.wait_while&quot;&gt;&lt;code&gt;wait_while&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="translated">&lt;a href=&quot;struct.condvar#method.wait_while&quot;&gt; &lt;code&gt;wait_while&lt;/code&gt; &lt;/a&gt; 과 마찬가지로 지정된 잠금은 시간 제한이 경과했는지 여부에 관계없이이 함수가 반환 될 때 다시 획득됩니다.</target>
        </trans-unit>
        <trans-unit id="bb8fc695456a6957ca08bda068f50835ca6480df" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;, if there is a value, it is wrapped in a &lt;code&gt;Some(T)&lt;/code&gt;. But if the iteration is over, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; 와 같이 값이 있으면 &lt;code&gt;Some(T)&lt;/code&gt; 래핑됩니다 . 그러나 반복이 끝나면 &lt;code&gt;None&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="375e88d0fb45924c13a3ac3d25d35cc53e0b6dbf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers.</source>
          <target state="translated">같이 &lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; ,이 버퍼의 조각에서 쓰는 것을 제외하고.</target>
        </trans-unit>
        <trans-unit id="3ece68e98c367b427da7eda601344bdda8373dc9" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">같이 &lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; ,이 버퍼의 조각에서 쓰는 것을 제외하고. &lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e96e1257fda431003f96a740ec957795754307e9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; is normally associated with the innermost enclosing loop, but &lt;code&gt;continue 'label&lt;/code&gt; may be used to specify the loop affected. A &lt;code&gt;continue&lt;/code&gt; expression is only permitted in the body of a loop.</source>
          <target state="translated">마찬가지로 &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;continue&lt;/code&gt; 일반적으로 루프를 둘러싸는 가장 안쪽과 관련되어 있지만 &lt;code&gt;continue 'label&lt;/code&gt; 영향을 루프를 지정하는 데 사용할 수 있습니다. A는 &lt;code&gt;continue&lt;/code&gt; 표현은 루프의 본문에 허용된다.</target>
        </trans-unit>
        <trans-unit id="4e6414b7dcb2bf632ebca1570eac937be87ca89a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; is normally associated with the innermost enclosing loop, but labels may be used to specify the affected loop.</source>
          <target state="translated">마찬가지로 &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;continue&lt;/code&gt; 일반적으로 가장 안쪽의 루프와 연결되어 있지만, 라벨은 영향을받는 루프를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="088a111a2146143c269622f6720bedf46b4095af" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ctlz&lt;/code&gt;, but extra-unsafe as it returns &lt;code&gt;undef&lt;/code&gt; when given an &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ctlz&lt;/code&gt; 와 비슷 하지만 값이 &lt;code&gt;0&lt;/code&gt; 인 &lt;code&gt;x&lt;/code&gt; 가 주어지면 &lt;code&gt;undef&lt;/code&gt; 를 반환하므로 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0441e738f2dd6cd8b8b2b78d7c0e5293c433e051" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cttz&lt;/code&gt;, but extra-unsafe as it returns &lt;code&gt;undef&lt;/code&gt; when given an &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cttz&lt;/code&gt; 와 비슷 하지만 값이 &lt;code&gt;0&lt;/code&gt; 인 &lt;code&gt;x&lt;/code&gt; 가 주어지면 &lt;code&gt;undef&lt;/code&gt; 를 반환하므로 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="aafea1bc859a7c488e520cc6c530088c8d2d86f9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;panic!&lt;/code&gt;, this macro has a second form for displaying custom values.</source>
          <target state="translated">&lt;code&gt;panic!&lt;/code&gt; 처럼 ! ,이 매크로에는 사용자 지정 값을 표시하는 두 번째 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0af819e7752cc0d0f79bda85b3236f2d4d09b2e2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers.</source>
          <target state="translated">등 &lt;code&gt;read&lt;/code&gt; 는 버퍼의 조각으로 읽는 것을 제외하고.</target>
        </trans-unit>
        <trans-unit id="c398915090a8fe75043794195cb2a1010511d11d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;../../../io/trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">등 &lt;code&gt;read&lt;/code&gt; 는 버퍼의 조각으로 읽는 것을 제외하고. &lt;a href=&quot;../../../io/trait.read#method.read_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4193e9abdbffc61433821360262b7ce147ba44be" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;../io/trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">등 &lt;code&gt;read&lt;/code&gt; 는 버퍼의 조각으로 읽는 것을 제외하고. &lt;a href=&quot;../io/trait.read#method.read_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19a11d624c5ac2fd3c32083744114569a63b8be1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;io/trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">등 &lt;code&gt;read&lt;/code&gt; 는 버퍼의 조각으로 읽는 것을 제외하고. &lt;a href=&quot;io/trait.read#method.read_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab91074c2b287fdf8a7b212edaf2da1655891bbf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">등 &lt;code&gt;read&lt;/code&gt; 는 버퍼의 조각으로 읽는 것을 제외하고. &lt;a href=&quot;trait.read#method.read_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d0c137ee5317a547c2505ef5380b9708644889bf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 처럼버퍼 슬라이스에서 쓰는 것을 제외하고 .</target>
        </trans-unit>
        <trans-unit id="52fa708382c8776f6cbe3b5227e8d830d96b01c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">버퍼 슬라이스에서 쓰는 것을 제외하고 &lt;code&gt;write&lt;/code&gt; 처럼 . &lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c5724f707420fb63c78e29f6894aa5e96feb279b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">버퍼 슬라이스에서 쓰는 것을 제외하고 &lt;code&gt;write&lt;/code&gt; 처럼 . &lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c8e23cd5a3cb733eb5eff3ebaeba471859348fb4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">버퍼 슬라이스에서 쓰는 것을 제외하고 &lt;code&gt;write&lt;/code&gt; 처럼 . &lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be2823934efbd612499317ea4eb64b49a897e3b9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">버퍼 슬라이스에서 쓰는 것을 제외하고 &lt;code&gt;write&lt;/code&gt; 처럼 . &lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d163289ae1b6264709c7aa2ecd53f71e394c044b" translate="yes" xml:space="preserve">
          <source>Like above with accuracy platform support is done on a best effort basis. Sometimes libraries may not be available at runtime or something may go wrong which would cause a backtrace to not be captured. Please feel free to report issues with platforms where a backtrace cannot be captured though!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902993443cc36d88600a8cb05ef8c36915632034" translate="yes" xml:space="preserve">
          <source>Like all instances of UB, if this assumption turns out to be wrong, i.e., the &lt;code&gt;unreachable_unchecked()&lt;/code&gt; call is actually reachable among all possible control flow, the compiler will apply the wrong optimization strategy, and may sometimes even corrupt seemingly unrelated code, causing difficult-to-debug problems.</source>
          <target state="translated">UB의 모든 인스턴스와 마찬가지로이 가정이 잘못된 것으로 판명되면, 즉 모든 가능한 제어 흐름 중에서 &lt;code&gt;unreachable_unchecked()&lt;/code&gt; 호출에 실제로 도달 할 수있는 경우 컴파일러는 잘못된 최적화 전략을 적용하고 때로는 관련이없는 것처럼 보이는 코드를 손상시킬 수 있습니다. 디버그하기 어려운 문제.</target>
        </trans-unit>
        <trans-unit id="649ba6cfd601ba5aca37823d799268a81f5dc250" translate="yes" xml:space="preserve">
          <source>Like all technical books, this book has certain conventions in how it displays information. These conventions are documented here.</source>
          <target state="translated">모든 기술 서적과 마찬가지로이 서적에는 정보를 표시하는 방법에 대한 특정 규칙이 있습니다. 이러한 규칙은 여기에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="44d26e3390ffce91f282ebeb751d71157005049b" translate="yes" xml:space="preserve">
          <source>Like any literal, an integer literal may be followed (immediately, without any spaces) by an &lt;em&gt;integer suffix&lt;/em&gt;, which forcibly sets the type of the literal. The integer suffix must be the name of one of the integral types: &lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;i8&lt;/code&gt;, &lt;code&gt;u16&lt;/code&gt;, &lt;code&gt;i16&lt;/code&gt;, &lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;u64&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;u128&lt;/code&gt;, &lt;code&gt;i128&lt;/code&gt;, &lt;code&gt;usize&lt;/code&gt;, or &lt;code&gt;isize&lt;/code&gt;.</source>
          <target state="translated">다른 리터럴과 마찬가지로 정수 리터럴 뒤에는 &lt;em&gt;정수 접미어가&lt;/em&gt; 붙을 수 있으며 (즉시 공백없이) 리터럴의 유형을 강제로 설정합니다. 정수 접미 부는 정수 유형 중 하나의 이름이어야합니다 : &lt;code&gt;u8&lt;/code&gt; , &lt;code&gt;i8&lt;/code&gt; , &lt;code&gt;u16&lt;/code&gt; , &lt;code&gt;i16&lt;/code&gt; , &lt;code&gt;u32&lt;/code&gt; , &lt;code&gt;i32&lt;/code&gt; , &lt;code&gt;u64&lt;/code&gt; , &lt;code&gt;i64&lt;/code&gt; , &lt;code&gt;u128&lt;/code&gt; , &lt;code&gt;i128&lt;/code&gt; , &lt;code&gt;usize&lt;/code&gt; 또는 &lt;code&gt;isize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fe96ba09f6c5b465c5068945c430d86210b786b4" translate="yes" xml:space="preserve">
          <source>Like any other &lt;code&gt;struct&lt;/code&gt;, a vector is freed when it goes out of scope, as annotated in Listing 8-4.</source>
          <target state="translated">다른 &lt;code&gt;struct&lt;/code&gt; 와 마찬가지로 벡터는 목록 8-4에 주석이 달린 범위를 벗어나면 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="05c02c45bd9fe3c41ff9466036864fee28d10e75" translate="yes" xml:space="preserve">
          <source>Like asynchronous channels, if the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; is disconnected while trying to &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; method will return a &lt;a href=&quot;struct.senderror&quot;&gt;&lt;code&gt;SendError&lt;/code&gt;&lt;/a&gt;. Similarly, If the &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt; is disconnected while trying to &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; method will return a &lt;a href=&quot;struct.recverror&quot;&gt;&lt;code&gt;RecvError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 비동기 채널과 마찬가지로, &lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt; 하는 동안 연결이 끊어 &lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 방법은 반환 &lt;a href=&quot;struct.senderror&quot;&gt; &lt;code&gt;SendError&lt;/code&gt; &lt;/a&gt; . 마찬가지로 &lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt; 를 시도하는 중에 &lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt; 연결이 끊어 지면 &lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt; 메소드가 &lt;a href=&quot;struct.recverror&quot;&gt; &lt;code&gt;RecvError&lt;/code&gt; &lt;/a&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="63fa7681b448a37e99bdacc82ff7e62da032c766" translate="yes" xml:space="preserve">
          <source>Like for structs and enums, it is possible to &lt;code&gt;impl Drop&lt;/code&gt; for a union to manually define what happens when it gets dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd1e9ca100e56c39d22da6780c99428a65b3f19" translate="yes" xml:space="preserve">
          <source>Like in a &lt;code&gt;match&lt;/code&gt; expression, the pattern can be optionally followed by &lt;code&gt;if&lt;/code&gt; and a guard expression that has access to names bound by the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aebd2c614f88bfe78d840f656119aee198d25e8" translate="yes" xml:space="preserve">
          <source>Like integer literals, a floating-point literal may be followed by a suffix, so long as the pre-suffix part does not end with &lt;code&gt;U+002E&lt;/code&gt; (&lt;code&gt;.&lt;/code&gt;). The suffix forcibly sets the type of the literal. There are two valid &lt;em&gt;floating-point suffixes&lt;/em&gt;, &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; (the 32-bit and 64-bit floating point types), which explicitly determine the type of the literal.</source>
          <target state="translated">정수 리터럴과 마찬가지로, 접미사 &lt;code&gt;U+002E&lt;/code&gt; 부분이 U + 002E ( &lt;code&gt;.&lt;/code&gt; )로 끝나지 않는 한 부동 소수점 리터럴 뒤에 접미사가 올 수 있습니다 . 접미사는 리터럴의 유형을 강제로 설정합니다. 두 유효있다 &lt;em&gt;부동 소수점 접미사&lt;/em&gt; , &lt;code&gt;f32&lt;/code&gt; 및 &lt;code&gt;f64&lt;/code&gt; 명시 문자 유형을 결정 (32 비트 및 64 비트 부동 소수점 유형).</target>
        </trans-unit>
        <trans-unit id="75d8318497142cc1c07dc08759286ca5f2b7edc7" translate="yes" xml:space="preserve">
          <source>Like items, &lt;code&gt;use&lt;/code&gt; declarations are private to the containing module, by default. Also like items, a &lt;code&gt;use&lt;/code&gt; declaration can be public, if qualified by the &lt;code&gt;pub&lt;/code&gt; keyword. Such a &lt;code&gt;use&lt;/code&gt; declaration serves to &lt;em&gt;re-export&lt;/em&gt; a name. A public &lt;code&gt;use&lt;/code&gt; declaration can therefore &lt;em&gt;redirect&lt;/em&gt; some public name to a different target definition: even a definition with a private canonical path, inside a different module. If a sequence of such redirections form a cycle or cannot be resolved unambiguously, they represent a compile-time error.</source>
          <target state="translated">항목과 마찬가지로 &lt;code&gt;use&lt;/code&gt; 선언은 기본적으로 포함 모듈에 대해 비공개입니다. 항목과 마찬가지로 &lt;code&gt;pub&lt;/code&gt; 키워드로 한정된 경우 &lt;code&gt;use&lt;/code&gt; 선언을 공개 할 수 있습니다 . 이러한 &lt;code&gt;use&lt;/code&gt; 선언은 이름 을 &lt;em&gt;다시 내보내는&lt;/em&gt; 역할을 합니다. 따라서 공용 &lt;code&gt;use&lt;/code&gt; 선언은 일부 공용 이름을 다른 대상 정의 (다른 모듈 내부의 개인 표준 경로가있는 정의)로 경로 &lt;em&gt;재 지정할&lt;/em&gt; 수 있습니다 . 이러한 리디렉션 시퀀스가주기를 형성하거나 명확하게 해결할 수없는 경우 컴파일 타임 오류를 나타냅니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4455a5352379b9bfb84306293e10135e6768efff" translate="yes" xml:space="preserve">
          <source>Like most indexing operations, the count starts from zero, so &lt;code&gt;nth(0)&lt;/code&gt; returns the first value, &lt;code&gt;nth(1)&lt;/code&gt; the second, and so on.</source>
          <target state="translated">대부분의 인덱싱 작업과 마찬가지로 카운트는 0부터 시작하므로 &lt;code&gt;nth(0)&lt;/code&gt; 은 첫 번째 값, &lt;code&gt;nth(1)&lt;/code&gt; 은 두 번째 값 등을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="808e2460e25efca05f0265071060604e1e534bac" translate="yes" xml:space="preserve">
          <source>Like references in rust, function pointers are assumed to not be null, so if you want to pass a function pointer over FFI and be able to accommodate null pointers, make your type &lt;code&gt;Option&amp;lt;fn()&amp;gt;&lt;/code&gt; with your required signature.</source>
          <target state="translated">rust의 참조와 같이 함수 포인터는 널이 아닌 것으로 가정하므로 FFI에 함수 포인터를 전달하고 널 포인터를 수용 할 수 있으 려면 필수 서명으로 &lt;code&gt;Option&amp;lt;fn()&amp;gt;&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="8e44ee89e79563bdf5dbc7eeeb4e89ae7df53d96" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;keyword.for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; expression, we can use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;. A &lt;code&gt;while&lt;/code&gt; expression cannot break with a value and always evaluates to &lt;code&gt;()&lt;/code&gt; unlike &lt;a href=&quot;keyword.loop&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;keyword.for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; 표현식 과 마찬가지로 &lt;code&gt;break&lt;/code&gt; 및 &lt;code&gt;continue&lt;/code&gt; 를 사용할 수 있습니다 . &lt;code&gt;while&lt;/code&gt; 표현식은 값으로 휴식 항상 평가 수 &lt;code&gt;()&lt;/code&gt; 와 달리 &lt;a href=&quot;keyword.loop&quot;&gt; &lt;code&gt;loop&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fdec5b5891f0978d4130ee94d9517ad5371a9c05" translate="yes" xml:space="preserve">
          <source>Likewise, combining the &lt;code&gt;C&lt;/code&gt; representation with a primitive representation, the layout is unspecified.</source>
          <target state="translated">마찬가지로 &lt;code&gt;C&lt;/code&gt; 표현을 기본 표현과 결합하면 레이아웃이 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="43eac78cc95cdbd3213a6055d8d48f1d53720313" translate="yes" xml:space="preserve">
          <source>Likewise, combining two primitive representations together is unspecified.</source>
          <target state="translated">마찬가지로 두 개의 기본 표현을 결합하는 것은 지정되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="a87f62e5c0ad27b39b657994af4f2f6af6bcd4e4" translate="yes" xml:space="preserve">
          <source>Likewise, the signature of the function uses &lt;code&gt;&amp;amp;&lt;/code&gt; to indicate that the type of the parameter &lt;code&gt;s&lt;/code&gt; is a reference. Let&amp;rsquo;s add some explanatory annotations:</source>
          <target state="translated">마찬가지로, 함수의 서명은 &lt;code&gt;&amp;amp;&lt;/code&gt; 를 사용 하여 매개 변수 &lt;code&gt;s&lt;/code&gt; 의 유형이 참조 임을 나타냅니다 . 설명 주석을 추가해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="01de4d38c5a9265699ce4ab27dfaf087bbe8ecf6" translate="yes" xml:space="preserve">
          <source>Limitations of the &lt;code id=&quot;limitations-of-the-cacher-implementation&quot;&gt;Cacher&lt;/code&gt; Implementation</source>
          <target state="translated">&lt;code id=&quot;limitations-of-the-cacher-implementation&quot;&gt;Cacher&lt;/code&gt; 구현의 한계</target>
        </trans-unit>
        <trans-unit id="61a0ae3b849d95fb8185df69b96d0ec676fb0688" translate="yes" xml:space="preserve">
          <source>Limits</source>
          <target state="translated">Limits</target>
        </trans-unit>
        <trans-unit id="6374b1b52339bde3abd0bb8e4d466f1af18a84f0" translate="yes" xml:space="preserve">
          <source>Line comment</source>
          <target state="translated">라인 코멘트</target>
        </trans-unit>
        <trans-unit id="deea94a5bfb30ea2c7507a3f03c99253e4272a0a" translate="yes" xml:space="preserve">
          <source>Line comments beginning with &lt;code&gt;//!&lt;/code&gt; and block comments &lt;code&gt;/*! ... */&lt;/code&gt; are doc comments that apply to the parent of the comment, rather than the item that follows. That is, they are equivalent to writing &lt;code&gt;#![doc=&quot;...&quot;]&lt;/code&gt; around the body of the comment. &lt;code&gt;//!&lt;/code&gt; comments are usually used to document modules that occupy a source file.</source>
          <target state="translated">&lt;code&gt;//!&lt;/code&gt; 시작하는 줄 설명 댓글을 차단하고 &lt;code&gt;/*! ... */&lt;/code&gt; 는 뒤에 나오는 항목이 아니라 주석의 부모에게 적용되는 문서 주석입니다. 즉 , 주석 본문 주위에 &lt;code&gt;#![doc=&quot;...&quot;]&lt;/code&gt; 을 쓰는 것과 같습니다 . &lt;code&gt;//!&lt;/code&gt; 주석은 일반적으로 소스 파일을 차지하는 모듈을 문서화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="762dee2b9cd8a9da4291e16ff13ceac56af56d99" translate="yes" xml:space="preserve">
          <source>Line doc comments beginning with exactly &lt;em&gt;three&lt;/em&gt; slashes (&lt;code&gt;///&lt;/code&gt;), and block doc comments (&lt;code&gt;/** ... */&lt;/code&gt;), both inner doc comments, are interpreted as a special syntax for &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt;&lt;code&gt;doc&lt;/code&gt; attributes&lt;/a&gt;. That is, they are equivalent to writing &lt;code&gt;#[doc=&quot;...&quot;]&lt;/code&gt; around the body of the comment, i.e., &lt;code&gt;/// Foo&lt;/code&gt; turns into &lt;code&gt;#[doc=&quot;Foo&quot;]&lt;/code&gt; and &lt;code&gt;/** Bar */&lt;/code&gt; turns into &lt;code&gt;#[doc=&quot;Bar&quot;]&lt;/code&gt;.</source>
          <target state="translated">정확히 &lt;em&gt;세 개의&lt;/em&gt; 슬래시 ( &lt;code&gt;///&lt;/code&gt; ) 로 시작하는 행 문서 주석 및 내부 문서 주석 인 블록 문서 주석 ( &lt;code&gt;/** ... */&lt;/code&gt; )은 &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt; &lt;code&gt;doc&lt;/code&gt; 속성에&lt;/a&gt; 대한 특수 구문으로 해석됩니다 . 그것이 그들이 작성하는 동일입니다 &lt;code&gt;#[doc=&quot;...&quot;]&lt;/code&gt; 하여 주석의 몸, 즉, 주위 &lt;code&gt;/// Foo&lt;/code&gt; 에 회전 &lt;code&gt;#[doc=&quot;Foo&quot;]&lt;/code&gt; 및 &lt;code&gt;/** Bar */&lt;/code&gt; 회전에 &lt;code&gt;#[doc=&quot;Bar&quot;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0f09e1a35a919b04916a657dcaf775def02ecc3" translate="yes" xml:space="preserve">
          <source>Line feed is escaped as &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">줄 바꿈은 &lt;code&gt;\n&lt;/code&gt; 이스케이프됩니다 .</target>
        </trans-unit>
        <trans-unit id="11a574794cee21df3f3bbe1f9331a0946b02f437" translate="yes" xml:space="preserve">
          <source>Line-break characters are allowed in string literals. Normally they represent themselves (i.e. no translation), but as a special exception, when an unescaped &lt;code&gt;U+005C&lt;/code&gt; character (&lt;code&gt;\&lt;/code&gt;) occurs immediately before the newline (&lt;code&gt;U+000A&lt;/code&gt;), the &lt;code&gt;U+005C&lt;/code&gt; character, the newline, and all whitespace at the beginning of the next line are ignored. Thus &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal:</source>
          <target state="translated">줄 바꿈 문자는 문자열 리터럴에 허용됩니다. 일반적으로 그것들은 자신을 나타냅니다 (즉, 번역 없음). 그러나 특별한 예외로, 이스케이프 처리되지 않은 &lt;code&gt;U+005C&lt;/code&gt; 문자 ( &lt;code&gt;\&lt;/code&gt; )가 개행 ( &lt;code&gt;U+000A&lt;/code&gt; ), &lt;code&gt;U+005C&lt;/code&gt; 문자, 개행 및 모든 공백의 바로 앞에 나타날 때 다음 줄의 시작은 무시됩니다. 따라서 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 는 같습니다.</target>
        </trans-unit>
        <trans-unit id="d7a69d21787a597ee70bd4037b342464706e333a" translate="yes" xml:space="preserve">
          <source>Line-breaks are allowed in string literals. A line-break is either a newline (&lt;code&gt;U+000A&lt;/code&gt;) or a pair of carriage return and newline (&lt;code&gt;U+000D&lt;/code&gt;, &lt;code&gt;U+000A&lt;/code&gt;). Both byte sequences are normally translated to &lt;code&gt;U+000A&lt;/code&gt;, but as a special exception, when an unescaped &lt;code&gt;U+005C&lt;/code&gt; character (&lt;code&gt;\&lt;/code&gt;) occurs immediately before the line-break, then the &lt;code&gt;U+005C&lt;/code&gt; character, the line-break, and all whitespace at the beginning of the next line are ignored. Thus &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal:</source>
          <target state="translated">줄 바꿈은 문자열 리터럴에서 허용됩니다. 줄 바꿈은 줄 바꿈 ( &lt;code&gt;U+000A&lt;/code&gt; ) 또는 캐리지 리턴과 줄 바꿈 쌍 ( &lt;code&gt;U+000D&lt;/code&gt; , &lt;code&gt;U+000A&lt;/code&gt; )입니다. 두 바이트 시퀀스 모두 일반적으로 &lt;code&gt;U+000A&lt;/code&gt; 로 변환 되지만 특별한 예외로, 이스케이프 처리되지 않은 &lt;code&gt;U+005C&lt;/code&gt; 문자 ( &lt;code&gt;\&lt;/code&gt; )가 줄 바꿈 바로 전에 발생하면 &lt;code&gt;U+005C&lt;/code&gt; 문자, 줄 바꿈 및 모든 공백 다음 줄의 시작 부분은 무시됩니다. 따라서 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="2830ad93f43cfc81ed338845630996d89e8c3581" translate="yes" xml:space="preserve">
          <source>LineWriter</source>
          <target state="translated">LineWriter</target>
        </trans-unit>
        <trans-unit id="a467a8d1c87cedc92c6a62d00ba608ee83995811" translate="yes" xml:space="preserve">
          <source>LineWriter::borrow</source>
          <target state="translated">LineWriter::borrow</target>
        </trans-unit>
        <trans-unit id="be9800c1f2dec531de8f863888451a1e1e2311ab" translate="yes" xml:space="preserve">
          <source>LineWriter::borrow_mut</source>
          <target state="translated">LineWriter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="2c13ce7518167bb16bb38a5b26d00211f5dffbd5" translate="yes" xml:space="preserve">
          <source>LineWriter::by_ref</source>
          <target state="translated">LineWriter::by_ref</target>
        </trans-unit>
        <trans-unit id="ad5e984ff0e6171936808b93fcf31ce4b80c212c" translate="yes" xml:space="preserve">
          <source>LineWriter::flush</source>
          <target state="translated">LineWriter::flush</target>
        </trans-unit>
        <trans-unit id="df10811fc6539a5582a3d6ba85fdf94454c319b5" translate="yes" xml:space="preserve">
          <source>LineWriter::fmt</source>
          <target state="translated">LineWriter::fmt</target>
        </trans-unit>
        <trans-unit id="99043611351dc9ff3e05b31b6386acec9bd4d9f9" translate="yes" xml:space="preserve">
          <source>LineWriter::from</source>
          <target state="translated">LineWriter::from</target>
        </trans-unit>
        <trans-unit id="ac69fff03ab2476a267ab98b2b6890c7cf1cc55d" translate="yes" xml:space="preserve">
          <source>LineWriter::get_mut</source>
          <target state="translated">LineWriter::get_mut</target>
        </trans-unit>
        <trans-unit id="1f40adca93e9d87127f3dcb17bebb2d113f8e8fe" translate="yes" xml:space="preserve">
          <source>LineWriter::get_ref</source>
          <target state="translated">LineWriter::get_ref</target>
        </trans-unit>
        <trans-unit id="e241aca740fc32914d91f0be104b82973eb66e5e" translate="yes" xml:space="preserve">
          <source>LineWriter::into</source>
          <target state="translated">LineWriter::into</target>
        </trans-unit>
        <trans-unit id="775f2c8ae9898d577c81da95ed4fcd902133aac3" translate="yes" xml:space="preserve">
          <source>LineWriter::into_inner</source>
          <target state="translated">LineWriter::into_inner</target>
        </trans-unit>
        <trans-unit id="dc3a9d15cfff5be7e19c52c4a56f2c5757e1f703" translate="yes" xml:space="preserve">
          <source>LineWriter::new</source>
          <target state="translated">LineWriter::new</target>
        </trans-unit>
        <trans-unit id="24e05e7c8c89d11d5f69df6388a9b0041bdc7c12" translate="yes" xml:space="preserve">
          <source>LineWriter::try_from</source>
          <target state="translated">LineWriter::try_from</target>
        </trans-unit>
        <trans-unit id="61eebd307b1c261703d7a99419578cfb8f7603b3" translate="yes" xml:space="preserve">
          <source>LineWriter::try_into</source>
          <target state="translated">LineWriter::try_into</target>
        </trans-unit>
        <trans-unit id="af6ffe50802be602950bd895cf9e0cb854fb1812" translate="yes" xml:space="preserve">
          <source>LineWriter::type_id</source>
          <target state="translated">LineWriter::type_id</target>
        </trans-unit>
        <trans-unit id="554b503c3ba754005e39b90ec87f0d92638d2c6e" translate="yes" xml:space="preserve">
          <source>LineWriter::with_capacity</source>
          <target state="translated">LineWriter::with_capacity</target>
        </trans-unit>
        <trans-unit id="221f080203de74c4a951139b8978acaf6b428212" translate="yes" xml:space="preserve">
          <source>LineWriter::write</source>
          <target state="translated">LineWriter::write</target>
        </trans-unit>
        <trans-unit id="718afa20219fcf1aa652f5865af9a7a30b0cf90f" translate="yes" xml:space="preserve">
          <source>LineWriter::write_all</source>
          <target state="translated">LineWriter::write_all</target>
        </trans-unit>
        <trans-unit id="e92db461a6c35320c65374e4144e5044c1b88bad" translate="yes" xml:space="preserve">
          <source>LineWriter::write_fmt</source>
          <target state="translated">LineWriter::write_fmt</target>
        </trans-unit>
        <trans-unit id="d174a06b1546e4b7fde2c0cdcd5ca37b66ded43b" translate="yes" xml:space="preserve">
          <source>LineWriter::write_vectored</source>
          <target state="translated">LineWriter::write_vectored</target>
        </trans-unit>
        <trans-unit id="c6fd3870c86e7422a0146e1e2a052437fb8e51e2" translate="yes" xml:space="preserve">
          <source>Lines</source>
          <target state="translated">Lines</target>
        </trans-unit>
        <trans-unit id="34d99e5c2f3cbf7a2f6c06ae38bf6f1437170c72" translate="yes" xml:space="preserve">
          <source>Lines are ended with either a newline (&lt;code&gt;\n&lt;/code&gt;) or a carriage return with a line feed (&lt;code&gt;\r\n&lt;/code&gt;).</source>
          <target state="translated">줄은 개행 ( &lt;code&gt;\n&lt;/code&gt; ) 또는 줄 바꿈 ( &lt;code&gt;\r\n&lt;/code&gt; )이 있는 캐리지 리턴으로 끝납니다 .</target>
        </trans-unit>
        <trans-unit id="8372047979cef10f511e256735d06fdb5834080a" translate="yes" xml:space="preserve">
          <source>Lines::all</source>
          <target state="translated">Lines::all</target>
        </trans-unit>
        <trans-unit id="ab3890e2134cb7b243711c9eb9d91f7d2b2bdbb5" translate="yes" xml:space="preserve">
          <source>Lines::any</source>
          <target state="translated">Lines::any</target>
        </trans-unit>
        <trans-unit id="70cb6c67edb194cbf85640b28d5918c1d359d3b1" translate="yes" xml:space="preserve">
          <source>Lines::borrow</source>
          <target state="translated">Lines::borrow</target>
        </trans-unit>
        <trans-unit id="18b3ef85cc38f93f055a82652080b268c1813b05" translate="yes" xml:space="preserve">
          <source>Lines::borrow_mut</source>
          <target state="translated">Lines::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ddcac326a974acb99a5bdd0266258af4cf68f560" translate="yes" xml:space="preserve">
          <source>Lines::by_ref</source>
          <target state="translated">Lines::by_ref</target>
        </trans-unit>
        <trans-unit id="2210ca2bf58eac1157cb91245ab84bdb9fbfa42e" translate="yes" xml:space="preserve">
          <source>Lines::chain</source>
          <target state="translated">Lines::chain</target>
        </trans-unit>
        <trans-unit id="819432c98b0ed8115a058abc108fe41e16c028a7" translate="yes" xml:space="preserve">
          <source>Lines::clone</source>
          <target state="translated">Lines::clone</target>
        </trans-unit>
        <trans-unit id="3a9a20c42d37180cc289d3ed86b67aeef7065926" translate="yes" xml:space="preserve">
          <source>Lines::clone_from</source>
          <target state="translated">Lines::clone_from</target>
        </trans-unit>
        <trans-unit id="6d03cc14ec75314e6e9cd97f6317e2bfc576a512" translate="yes" xml:space="preserve">
          <source>Lines::clone_into</source>
          <target state="translated">Lines::clone_into</target>
        </trans-unit>
        <trans-unit id="2cc7e95a9a252a0e4512584de05d3735eda6c7e4" translate="yes" xml:space="preserve">
          <source>Lines::cloned</source>
          <target state="translated">Lines::cloned</target>
        </trans-unit>
        <trans-unit id="a59dde6acd33a5348665946c0a8673f286d24d8a" translate="yes" xml:space="preserve">
          <source>Lines::cmp</source>
          <target state="translated">Lines::cmp</target>
        </trans-unit>
        <trans-unit id="5fc1ed1cda1fe359bfcd4cfa1c08b06a6870ed72" translate="yes" xml:space="preserve">
          <source>Lines::collect</source>
          <target state="translated">Lines::collect</target>
        </trans-unit>
        <trans-unit id="40c012a06c39d10c7006c0601e73b3570aeddd35" translate="yes" xml:space="preserve">
          <source>Lines::copied</source>
          <target state="translated">Lines::copied</target>
        </trans-unit>
        <trans-unit id="484755e089b99c626b30d970a194b907cb3dceef" translate="yes" xml:space="preserve">
          <source>Lines::count</source>
          <target state="translated">Lines::count</target>
        </trans-unit>
        <trans-unit id="f9088b84e14bdd699a44622c6a8c96e4ac54b67c" translate="yes" xml:space="preserve">
          <source>Lines::cycle</source>
          <target state="translated">Lines::cycle</target>
        </trans-unit>
        <trans-unit id="bb1a7e9933496da163e7e92f98497488344c4b65" translate="yes" xml:space="preserve">
          <source>Lines::enumerate</source>
          <target state="translated">Lines::enumerate</target>
        </trans-unit>
        <trans-unit id="e403dedf91eb2082514d2e5162543f8e68efb7da" translate="yes" xml:space="preserve">
          <source>Lines::eq</source>
          <target state="translated">Lines::eq</target>
        </trans-unit>
        <trans-unit id="707ccf8dfe7d6c9bee6828f27010842e078217cf" translate="yes" xml:space="preserve">
          <source>Lines::filter</source>
          <target state="translated">Lines::filter</target>
        </trans-unit>
        <trans-unit id="a534415e9a683c0f1753824a42c9cbb20a22d8de" translate="yes" xml:space="preserve">
          <source>Lines::filter_map</source>
          <target state="translated">Lines::filter_map</target>
        </trans-unit>
        <trans-unit id="9cf3e71d3dcafee27e61b5c5dc18ec5190e4a6f7" translate="yes" xml:space="preserve">
          <source>Lines::find</source>
          <target state="translated">Lines::find</target>
        </trans-unit>
        <trans-unit id="044bf04c2ed739fe25a222a030d6a47c121839e1" translate="yes" xml:space="preserve">
          <source>Lines::find_map</source>
          <target state="translated">Lines::find_map</target>
        </trans-unit>
        <trans-unit id="97efef8f8787ccd14203890a8c6fb78edff59d37" translate="yes" xml:space="preserve">
          <source>Lines::flat_map</source>
          <target state="translated">Lines::flat_map</target>
        </trans-unit>
        <trans-unit id="65ef759afb112e68b767e18f273666c72384a91e" translate="yes" xml:space="preserve">
          <source>Lines::flatten</source>
          <target state="translated">Lines::flatten</target>
        </trans-unit>
        <trans-unit id="4b0ac679142d24795b97a7958a854ecd7203e55e" translate="yes" xml:space="preserve">
          <source>Lines::fmt</source>
          <target state="translated">Lines::fmt</target>
        </trans-unit>
        <trans-unit id="c3dc638376e90ff805be8e51030bb57d3840ea9a" translate="yes" xml:space="preserve">
          <source>Lines::fold</source>
          <target state="translated">Lines::fold</target>
        </trans-unit>
        <trans-unit id="66c9909e05322956c99e0fe47fb62c577fed4240" translate="yes" xml:space="preserve">
          <source>Lines::for_each</source>
          <target state="translated">Lines::for_each</target>
        </trans-unit>
        <trans-unit id="667de94ff8bf99b4ebe79233fe18adb64bcaff80" translate="yes" xml:space="preserve">
          <source>Lines::from</source>
          <target state="translated">Lines::from</target>
        </trans-unit>
        <trans-unit id="06cb1e1125b4bf27dded9704734bb28a0c78413a" translate="yes" xml:space="preserve">
          <source>Lines::fuse</source>
          <target state="translated">Lines::fuse</target>
        </trans-unit>
        <trans-unit id="d42ae29069080bc9b30d98905789c40023c12eda" translate="yes" xml:space="preserve">
          <source>Lines::ge</source>
          <target state="translated">Lines::ge</target>
        </trans-unit>
        <trans-unit id="ef1d6e461d3fafca9f89de1099d0fd6eedc21377" translate="yes" xml:space="preserve">
          <source>Lines::gt</source>
          <target state="translated">Lines::gt</target>
        </trans-unit>
        <trans-unit id="bc084e6d75aef85c94f9d68bb9567acbfe64d484" translate="yes" xml:space="preserve">
          <source>Lines::inspect</source>
          <target state="translated">Lines::inspect</target>
        </trans-unit>
        <trans-unit id="4fa7291665d8e5f97646712135a4875f5b9d3561" translate="yes" xml:space="preserve">
          <source>Lines::into</source>
          <target state="translated">Lines::into</target>
        </trans-unit>
        <trans-unit id="0d57694ef2c4c437b26216323de2554d517e3b1d" translate="yes" xml:space="preserve">
          <source>Lines::into_iter</source>
          <target state="translated">Lines::into_iter</target>
        </trans-unit>
        <trans-unit id="c2f6f57ace4c1b46ab3dddd2d03b614261e882c7" translate="yes" xml:space="preserve">
          <source>Lines::is_sorted</source>
          <target state="translated">Lines::is_sorted</target>
        </trans-unit>
        <trans-unit id="df56ad513194b7e2615c4a161a02c782cfa18597" translate="yes" xml:space="preserve">
          <source>Lines::is_sorted_by</source>
          <target state="translated">Lines::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="549348b6c236b9c5e489ba42d3701a55b7d82734" translate="yes" xml:space="preserve">
          <source>Lines::is_sorted_by_key</source>
          <target state="translated">Lines::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="ad23821ab124391e5844e617b2135a7792080eb6" translate="yes" xml:space="preserve">
          <source>Lines::last</source>
          <target state="translated">Lines::last</target>
        </trans-unit>
        <trans-unit id="49581840f25939eddba1a97ed61a8fbe4af98228" translate="yes" xml:space="preserve">
          <source>Lines::le</source>
          <target state="translated">Lines::le</target>
        </trans-unit>
        <trans-unit id="5ce22f9e08daae05dcadead96ca9b7d089849e7b" translate="yes" xml:space="preserve">
          <source>Lines::lt</source>
          <target state="translated">Lines::lt</target>
        </trans-unit>
        <trans-unit id="b5d8079e18823a97d5ae8655d5e52f10ef635bcb" translate="yes" xml:space="preserve">
          <source>Lines::map</source>
          <target state="translated">Lines::map</target>
        </trans-unit>
        <trans-unit id="614a9ae44545096b1b3884e6d3ad82e53cc4197f" translate="yes" xml:space="preserve">
          <source>Lines::max</source>
          <target state="translated">Lines::max</target>
        </trans-unit>
        <trans-unit id="a1e90714b091971df104c2796a19294ed2d5f3d0" translate="yes" xml:space="preserve">
          <source>Lines::max_by</source>
          <target state="translated">Lines::max_by</target>
        </trans-unit>
        <trans-unit id="9ba3c4cb804a87fe02fb30b20033fc0256239fa9" translate="yes" xml:space="preserve">
          <source>Lines::max_by_key</source>
          <target state="translated">Lines::max_by_key</target>
        </trans-unit>
        <trans-unit id="2f81bc3f5bd28c127716ebc99f7df429ea02916a" translate="yes" xml:space="preserve">
          <source>Lines::min</source>
          <target state="translated">Lines::min</target>
        </trans-unit>
        <trans-unit id="f6bdf94f2b137aeb300d6f6a8204f93132d08729" translate="yes" xml:space="preserve">
          <source>Lines::min_by</source>
          <target state="translated">Lines::min_by</target>
        </trans-unit>
        <trans-unit id="ea0817f76e8de97f3fd13d10a74c69ddec44ba5d" translate="yes" xml:space="preserve">
          <source>Lines::min_by_key</source>
          <target state="translated">Lines::min_by_key</target>
        </trans-unit>
        <trans-unit id="2e06e53012386709149d18416c71406bb5e98308" translate="yes" xml:space="preserve">
          <source>Lines::ne</source>
          <target state="translated">Lines::ne</target>
        </trans-unit>
        <trans-unit id="8a3c7bb05e3ee78b02e8112decd76c436a757a41" translate="yes" xml:space="preserve">
          <source>Lines::next</source>
          <target state="translated">Lines::next</target>
        </trans-unit>
        <trans-unit id="0ba2ba17bc83abe3966ea3c60ccf5c4a415b799e" translate="yes" xml:space="preserve">
          <source>Lines::next_back</source>
          <target state="translated">Lines::next_back</target>
        </trans-unit>
        <trans-unit id="d260f942e190abf0b5dae16ba0924921789ac4e3" translate="yes" xml:space="preserve">
          <source>Lines::nth</source>
          <target state="translated">Lines::nth</target>
        </trans-unit>
        <trans-unit id="4a8106340de71e1bf2735749672deafa0a99f4ac" translate="yes" xml:space="preserve">
          <source>Lines::nth_back</source>
          <target state="translated">Lines::nth_back</target>
        </trans-unit>
        <trans-unit id="b1c90091b1493451d224f2a812760ca68c93f023" translate="yes" xml:space="preserve">
          <source>Lines::partial_cmp</source>
          <target state="translated">Lines::partial_cmp</target>
        </trans-unit>
        <trans-unit id="1f7e4ad2b6e278cb1d7bb93dbb041bfcb8314693" translate="yes" xml:space="preserve">
          <source>Lines::partition</source>
          <target state="translated">Lines::partition</target>
        </trans-unit>
        <trans-unit id="5a40d6042d715f33d512b8fded4c4ad0004d7fc8" translate="yes" xml:space="preserve">
          <source>Lines::peekable</source>
          <target state="translated">Lines::peekable</target>
        </trans-unit>
        <trans-unit id="0ef8c9b2deeebbbfb28d8bedbe2082467a73887b" translate="yes" xml:space="preserve">
          <source>Lines::position</source>
          <target state="translated">Lines::position</target>
        </trans-unit>
        <trans-unit id="3c0f2b535c534a1201dc481c2a7d0b6cee88a3a3" translate="yes" xml:space="preserve">
          <source>Lines::product</source>
          <target state="translated">Lines::product</target>
        </trans-unit>
        <trans-unit id="ee91dbe8f1da9b3fdffc602c4f0cc913ff3f2c6c" translate="yes" xml:space="preserve">
          <source>Lines::rev</source>
          <target state="translated">Lines::rev</target>
        </trans-unit>
        <trans-unit id="935e7b6c713c89c4b6463979362772b4bb8880e5" translate="yes" xml:space="preserve">
          <source>Lines::rfind</source>
          <target state="translated">Lines::rfind</target>
        </trans-unit>
        <trans-unit id="5224ea274084b3029f8b8f5bc6ae514a00367d1e" translate="yes" xml:space="preserve">
          <source>Lines::rfold</source>
          <target state="translated">Lines::rfold</target>
        </trans-unit>
        <trans-unit id="abfe637f00690ca8200a91d76b479147eae91467" translate="yes" xml:space="preserve">
          <source>Lines::rposition</source>
          <target state="translated">Lines::rposition</target>
        </trans-unit>
        <trans-unit id="ed340f68a3327e076346b4e2959b2b266e5f29be" translate="yes" xml:space="preserve">
          <source>Lines::scan</source>
          <target state="translated">Lines::scan</target>
        </trans-unit>
        <trans-unit id="a761a161c1b6098bcf94f0747288f3a45541eadd" translate="yes" xml:space="preserve">
          <source>Lines::size_hint</source>
          <target state="translated">Lines::size_hint</target>
        </trans-unit>
        <trans-unit id="6d336ec41b198e5804695aa74f33628c93668506" translate="yes" xml:space="preserve">
          <source>Lines::skip</source>
          <target state="translated">Lines::skip</target>
        </trans-unit>
        <trans-unit id="44138b1da9b8676439196e1ec1fcc0142e26e1a8" translate="yes" xml:space="preserve">
          <source>Lines::skip_while</source>
          <target state="translated">Lines::skip_while</target>
        </trans-unit>
        <trans-unit id="3e1e1c98f1dd0b3f7c1acacbe9283e9f5daefa55" translate="yes" xml:space="preserve">
          <source>Lines::step_by</source>
          <target state="translated">Lines::step_by</target>
        </trans-unit>
        <trans-unit id="f9aedc09849901ec1642ba9f8605eeecf09123b2" translate="yes" xml:space="preserve">
          <source>Lines::sum</source>
          <target state="translated">Lines::sum</target>
        </trans-unit>
        <trans-unit id="2470663a295dc56e3c0e4448c703ce1212863df7" translate="yes" xml:space="preserve">
          <source>Lines::take</source>
          <target state="translated">Lines::take</target>
        </trans-unit>
        <trans-unit id="7f3cf9305dbf5474d9b0f33812e5fd684f4fbb90" translate="yes" xml:space="preserve">
          <source>Lines::take_while</source>
          <target state="translated">Lines::take_while</target>
        </trans-unit>
        <trans-unit id="0ada82aa2035b3f1815ea9d773b202ed4b385c8b" translate="yes" xml:space="preserve">
          <source>Lines::to_owned</source>
          <target state="translated">Lines::to_owned</target>
        </trans-unit>
        <trans-unit id="7ec163e8f2aeb66139ccb0cc3aebd5bf021096fb" translate="yes" xml:space="preserve">
          <source>Lines::try_fold</source>
          <target state="translated">Lines::try_fold</target>
        </trans-unit>
        <trans-unit id="6149ef40d421bda4326426968395287948355d1f" translate="yes" xml:space="preserve">
          <source>Lines::try_for_each</source>
          <target state="translated">Lines::try_for_each</target>
        </trans-unit>
        <trans-unit id="9dd788cd9514958a2bed95827ef9d3ab2a7d8662" translate="yes" xml:space="preserve">
          <source>Lines::try_from</source>
          <target state="translated">Lines::try_from</target>
        </trans-unit>
        <trans-unit id="d13bc84fbefcf93bf19a9f1d84a64464f6629ff5" translate="yes" xml:space="preserve">
          <source>Lines::try_into</source>
          <target state="translated">Lines::try_into</target>
        </trans-unit>
        <trans-unit id="f6b94c7395422c8d615bd9a8b770a3fdb8996dda" translate="yes" xml:space="preserve">
          <source>Lines::try_rfold</source>
          <target state="translated">Lines::try_rfold</target>
        </trans-unit>
        <trans-unit id="d2d1ff092a3d5ae3ca53dbacc4143a867f2c28d3" translate="yes" xml:space="preserve">
          <source>Lines::type_id</source>
          <target state="translated">Lines::type_id</target>
        </trans-unit>
        <trans-unit id="110721733261af4f5659ab3ceb7281d54724ddce" translate="yes" xml:space="preserve">
          <source>Lines::unzip</source>
          <target state="translated">Lines::unzip</target>
        </trans-unit>
        <trans-unit id="ac2ef626b02ca1a7104e3bf68147862f9b00b92b" translate="yes" xml:space="preserve">
          <source>Lines::zip</source>
          <target state="translated">Lines::zip</target>
        </trans-unit>
        <trans-unit id="a5b4e4fe083c9638e8c24b728512839d5a24eb13" translate="yes" xml:space="preserve">
          <source>LinesAny</source>
          <target state="translated">LinesAny</target>
        </trans-unit>
        <trans-unit id="50d0696b9d771c6e32ae4a231c173f8b12162e7d" translate="yes" xml:space="preserve">
          <source>LinesAny::all</source>
          <target state="translated">LinesAny::all</target>
        </trans-unit>
        <trans-unit id="ea7ca371f3792d191b9f429c5069dc7ca5811714" translate="yes" xml:space="preserve">
          <source>LinesAny::any</source>
          <target state="translated">LinesAny::any</target>
        </trans-unit>
        <trans-unit id="eaceee1395c9c33b7e4bac14838c806691f2a171" translate="yes" xml:space="preserve">
          <source>LinesAny::borrow</source>
          <target state="translated">LinesAny::borrow</target>
        </trans-unit>
        <trans-unit id="339874a8b3611df4cc512b190364de9c9f58daf1" translate="yes" xml:space="preserve">
          <source>LinesAny::borrow_mut</source>
          <target state="translated">LinesAny::borrow_mut</target>
        </trans-unit>
        <trans-unit id="00ce4a72aad018bb6423092293375bfc3ffe2ebd" translate="yes" xml:space="preserve">
          <source>LinesAny::by_ref</source>
          <target state="translated">LinesAny::by_ref</target>
        </trans-unit>
        <trans-unit id="6826627d501ec9fefb82fead830643f42fca94aa" translate="yes" xml:space="preserve">
          <source>LinesAny::chain</source>
          <target state="translated">LinesAny::chain</target>
        </trans-unit>
        <trans-unit id="a0f1ca375c39b5b68c51a049618944aab22e5c4d" translate="yes" xml:space="preserve">
          <source>LinesAny::clone</source>
          <target state="translated">LinesAny::clone</target>
        </trans-unit>
        <trans-unit id="d95229b0609b9737636c3aa8cd3e14eb5caa254f" translate="yes" xml:space="preserve">
          <source>LinesAny::clone_from</source>
          <target state="translated">LinesAny::clone_from</target>
        </trans-unit>
        <trans-unit id="66c18f49eea62023263263eef98cf41c6d20343e" translate="yes" xml:space="preserve">
          <source>LinesAny::clone_into</source>
          <target state="translated">LinesAny::clone_into</target>
        </trans-unit>
        <trans-unit id="441e3a29dded76521c347e082c9fb1a1edcecb86" translate="yes" xml:space="preserve">
          <source>LinesAny::cloned</source>
          <target state="translated">LinesAny::cloned</target>
        </trans-unit>
        <trans-unit id="744f2399ba085b68d3b164300950552188b8649e" translate="yes" xml:space="preserve">
          <source>LinesAny::cmp</source>
          <target state="translated">LinesAny::cmp</target>
        </trans-unit>
        <trans-unit id="9124d4bf7bfee707b3b64ff8baec01ab9f6fb23f" translate="yes" xml:space="preserve">
          <source>LinesAny::collect</source>
          <target state="translated">LinesAny::collect</target>
        </trans-unit>
        <trans-unit id="ac50d9d978088bbaa0f2ff2dc92c8fbbc85a5a02" translate="yes" xml:space="preserve">
          <source>LinesAny::copied</source>
          <target state="translated">LinesAny::copied</target>
        </trans-unit>
        <trans-unit id="e7886c392db1f35abe056203ae1f365bf23a0a55" translate="yes" xml:space="preserve">
          <source>LinesAny::count</source>
          <target state="translated">LinesAny::count</target>
        </trans-unit>
        <trans-unit id="5454bbe08e402e348146a7efca7478704b3da2b2" translate="yes" xml:space="preserve">
          <source>LinesAny::cycle</source>
          <target state="translated">LinesAny::cycle</target>
        </trans-unit>
        <trans-unit id="c24d5b0d6dd39913088966449818bbe16578daf1" translate="yes" xml:space="preserve">
          <source>LinesAny::enumerate</source>
          <target state="translated">LinesAny::enumerate</target>
        </trans-unit>
        <trans-unit id="abc1e38165bcb0ac9b62d71a7837b7e18d9f4257" translate="yes" xml:space="preserve">
          <source>LinesAny::eq</source>
          <target state="translated">LinesAny::eq</target>
        </trans-unit>
        <trans-unit id="e5e500790b218dc637b9d16594dcb7b20b604692" translate="yes" xml:space="preserve">
          <source>LinesAny::filter</source>
          <target state="translated">LinesAny::filter</target>
        </trans-unit>
        <trans-unit id="0b4b79b532d3f050e5db10eea09df678c183c686" translate="yes" xml:space="preserve">
          <source>LinesAny::filter_map</source>
          <target state="translated">LinesAny::filter_map</target>
        </trans-unit>
        <trans-unit id="6dae73ef1c5ba58c3dd4f63922662214ab41d4ac" translate="yes" xml:space="preserve">
          <source>LinesAny::find</source>
          <target state="translated">LinesAny::find</target>
        </trans-unit>
        <trans-unit id="82e3de07ed537a18ee9c9daee8978809db88327e" translate="yes" xml:space="preserve">
          <source>LinesAny::find_map</source>
          <target state="translated">LinesAny::find_map</target>
        </trans-unit>
        <trans-unit id="23ea470b1a5602c9960b681ccc40896e0a2733fa" translate="yes" xml:space="preserve">
          <source>LinesAny::flat_map</source>
          <target state="translated">LinesAny::flat_map</target>
        </trans-unit>
        <trans-unit id="f47898454b86b4ade9cac1430477a47e263ec329" translate="yes" xml:space="preserve">
          <source>LinesAny::flatten</source>
          <target state="translated">LinesAny::flatten</target>
        </trans-unit>
        <trans-unit id="791173e564b78ab8046ea408aec24e254b6a6465" translate="yes" xml:space="preserve">
          <source>LinesAny::fmt</source>
          <target state="translated">LinesAny::fmt</target>
        </trans-unit>
        <trans-unit id="df42199169b96a89fd0c9cb75443f3371649afda" translate="yes" xml:space="preserve">
          <source>LinesAny::fold</source>
          <target state="translated">LinesAny::fold</target>
        </trans-unit>
        <trans-unit id="fda57c64ce5316c6fb14a1f54d52b531eed49bf1" translate="yes" xml:space="preserve">
          <source>LinesAny::for_each</source>
          <target state="translated">LinesAny::for_each</target>
        </trans-unit>
        <trans-unit id="aa7305638a550afce84c4c0991f5b023d09e95de" translate="yes" xml:space="preserve">
          <source>LinesAny::from</source>
          <target state="translated">LinesAny::from</target>
        </trans-unit>
        <trans-unit id="4b978968906021109eb0659ef6292e83b37ec7e3" translate="yes" xml:space="preserve">
          <source>LinesAny::fuse</source>
          <target state="translated">LinesAny::fuse</target>
        </trans-unit>
        <trans-unit id="75839dadae44fefdf84240ff40835f1b349b7ac8" translate="yes" xml:space="preserve">
          <source>LinesAny::ge</source>
          <target state="translated">LinesAny::ge</target>
        </trans-unit>
        <trans-unit id="fcd54e506a54e7305a5338ce5812c515a8fee462" translate="yes" xml:space="preserve">
          <source>LinesAny::gt</source>
          <target state="translated">LinesAny::gt</target>
        </trans-unit>
        <trans-unit id="f79879fbcf669d23f594e4af159c637f901995e6" translate="yes" xml:space="preserve">
          <source>LinesAny::inspect</source>
          <target state="translated">LinesAny::inspect</target>
        </trans-unit>
        <trans-unit id="866cd90cd57d116e560361e595ffb8f22fa4503f" translate="yes" xml:space="preserve">
          <source>LinesAny::into</source>
          <target state="translated">LinesAny::into</target>
        </trans-unit>
        <trans-unit id="891a441411f2b0f48b870e672955000579690807" translate="yes" xml:space="preserve">
          <source>LinesAny::into_iter</source>
          <target state="translated">LinesAny::into_iter</target>
        </trans-unit>
        <trans-unit id="3db1aceb19bd3aba6ac4d268f7b2f34de4efeb6d" translate="yes" xml:space="preserve">
          <source>LinesAny::is_sorted</source>
          <target state="translated">LinesAny::is_sorted</target>
        </trans-unit>
        <trans-unit id="69f6a048e7f5a4bf2b54b2c1af0630aac3870afb" translate="yes" xml:space="preserve">
          <source>LinesAny::is_sorted_by</source>
          <target state="translated">LinesAny::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="b6a9e8ff41ed3a22713730cab9a8f1633beeed0d" translate="yes" xml:space="preserve">
          <source>LinesAny::is_sorted_by_key</source>
          <target state="translated">LinesAny::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="ee2177488ef8fb35e82ae7fab76c336c05999467" translate="yes" xml:space="preserve">
          <source>LinesAny::last</source>
          <target state="translated">LinesAny::last</target>
        </trans-unit>
        <trans-unit id="ded3552233521574fe0102c5ea2a5c55e58df15d" translate="yes" xml:space="preserve">
          <source>LinesAny::le</source>
          <target state="translated">LinesAny::le</target>
        </trans-unit>
        <trans-unit id="9c86864322572e3c7ba8d0e2cbdf9aac3e7575ff" translate="yes" xml:space="preserve">
          <source>LinesAny::lt</source>
          <target state="translated">LinesAny::lt</target>
        </trans-unit>
        <trans-unit id="927528cee0c90892c7acd207c34bcb5cad130e10" translate="yes" xml:space="preserve">
          <source>LinesAny::map</source>
          <target state="translated">LinesAny::map</target>
        </trans-unit>
        <trans-unit id="069c73fac06d0eb14fd21a8df7bd35cb026f80f2" translate="yes" xml:space="preserve">
          <source>LinesAny::max</source>
          <target state="translated">LinesAny::max</target>
        </trans-unit>
        <trans-unit id="e80485cba09f901bcea49a646821a905fbab42f3" translate="yes" xml:space="preserve">
          <source>LinesAny::max_by</source>
          <target state="translated">LinesAny::max_by</target>
        </trans-unit>
        <trans-unit id="6ce44e8ab15c62c1c3c68a11512817d4b90b12ac" translate="yes" xml:space="preserve">
          <source>LinesAny::max_by_key</source>
          <target state="translated">LinesAny::max_by_key</target>
        </trans-unit>
        <trans-unit id="1713376a6937668b9cdc36fcd74d71514e312a80" translate="yes" xml:space="preserve">
          <source>LinesAny::min</source>
          <target state="translated">LinesAny::min</target>
        </trans-unit>
        <trans-unit id="effd6f4bc710ee4003d3ed2ab2e7e8a7dd1b246e" translate="yes" xml:space="preserve">
          <source>LinesAny::min_by</source>
          <target state="translated">LinesAny::min_by</target>
        </trans-unit>
        <trans-unit id="cfbe522a9b0c7a529e31a382923bec416e3ebb2b" translate="yes" xml:space="preserve">
          <source>LinesAny::min_by_key</source>
          <target state="translated">LinesAny::min_by_key</target>
        </trans-unit>
        <trans-unit id="761424028541c41bf56adc55dbbcfe22e06a5641" translate="yes" xml:space="preserve">
          <source>LinesAny::ne</source>
          <target state="translated">LinesAny::ne</target>
        </trans-unit>
        <trans-unit id="bbc0eca474d568f89d7cec3cba132add4c81aa92" translate="yes" xml:space="preserve">
          <source>LinesAny::next</source>
          <target state="translated">LinesAny::next</target>
        </trans-unit>
        <trans-unit id="1cd393bcdce512664f7285f8c4e981c72c25faa6" translate="yes" xml:space="preserve">
          <source>LinesAny::next_back</source>
          <target state="translated">LinesAny::next_back</target>
        </trans-unit>
        <trans-unit id="348866f6e8632eb200d982720eee7c7f6a304bc2" translate="yes" xml:space="preserve">
          <source>LinesAny::nth</source>
          <target state="translated">LinesAny::nth</target>
        </trans-unit>
        <trans-unit id="35ade955861a0acb638430cb079e5172b172adc4" translate="yes" xml:space="preserve">
          <source>LinesAny::nth_back</source>
          <target state="translated">LinesAny::nth_back</target>
        </trans-unit>
        <trans-unit id="036f1ed8cf2808058067780cf9a56693aea9533e" translate="yes" xml:space="preserve">
          <source>LinesAny::partial_cmp</source>
          <target state="translated">LinesAny::partial_cmp</target>
        </trans-unit>
        <trans-unit id="e7a277d7600859cd1276cecfde64f2c58e6b270a" translate="yes" xml:space="preserve">
          <source>LinesAny::partition</source>
          <target state="translated">LinesAny::partition</target>
        </trans-unit>
        <trans-unit id="2a376b60138b3f9ab3489e4397a96386f383976f" translate="yes" xml:space="preserve">
          <source>LinesAny::peekable</source>
          <target state="translated">LinesAny::peekable</target>
        </trans-unit>
        <trans-unit id="b2f7b49c5f22a22521eb3b4f5bc9411aa536a9d4" translate="yes" xml:space="preserve">
          <source>LinesAny::position</source>
          <target state="translated">LinesAny::position</target>
        </trans-unit>
        <trans-unit id="d83cedb5fed8302d8ce91b0ec10a295706e82f9a" translate="yes" xml:space="preserve">
          <source>LinesAny::product</source>
          <target state="translated">LinesAny::product</target>
        </trans-unit>
        <trans-unit id="c0a1fa23f765931fbfa76a9576dab1f2a14d27e5" translate="yes" xml:space="preserve">
          <source>LinesAny::rev</source>
          <target state="translated">LinesAny::rev</target>
        </trans-unit>
        <trans-unit id="fb23acde77ed2fa2ecaf814134742ddfb68a6387" translate="yes" xml:space="preserve">
          <source>LinesAny::rfind</source>
          <target state="translated">LinesAny::rfind</target>
        </trans-unit>
        <trans-unit id="440fcf5a2976a4375e5ec4abc4701ae6f02a1d57" translate="yes" xml:space="preserve">
          <source>LinesAny::rfold</source>
          <target state="translated">LinesAny::rfold</target>
        </trans-unit>
        <trans-unit id="8dee856d06d7c509572aba5e43848bb1e6e538d6" translate="yes" xml:space="preserve">
          <source>LinesAny::rposition</source>
          <target state="translated">LinesAny::rposition</target>
        </trans-unit>
        <trans-unit id="e4ba89a4858b4a56d5e05371a82d02c208e0c740" translate="yes" xml:space="preserve">
          <source>LinesAny::scan</source>
          <target state="translated">LinesAny::scan</target>
        </trans-unit>
        <trans-unit id="7689104a5e0e4ed4cad1f816312ca7576e1e7785" translate="yes" xml:space="preserve">
          <source>LinesAny::size_hint</source>
          <target state="translated">LinesAny::size_hint</target>
        </trans-unit>
        <trans-unit id="246ed84cdb667d9ea94b597e4f282b8a55042d26" translate="yes" xml:space="preserve">
          <source>LinesAny::skip</source>
          <target state="translated">LinesAny::skip</target>
        </trans-unit>
        <trans-unit id="909e73392045bc759da125f28487c615065d6a92" translate="yes" xml:space="preserve">
          <source>LinesAny::skip_while</source>
          <target state="translated">LinesAny::skip_while</target>
        </trans-unit>
        <trans-unit id="d2ff3f837735bd2c1a9bc5cc75f48bf8843a6c4d" translate="yes" xml:space="preserve">
          <source>LinesAny::step_by</source>
          <target state="translated">LinesAny::step_by</target>
        </trans-unit>
        <trans-unit id="b30cdb62236eea6a9b5f35a665261e7a72c628ab" translate="yes" xml:space="preserve">
          <source>LinesAny::sum</source>
          <target state="translated">LinesAny::sum</target>
        </trans-unit>
        <trans-unit id="32fab65ff6a39e7a4e8ef2e1b59230a0ba2fff08" translate="yes" xml:space="preserve">
          <source>LinesAny::take</source>
          <target state="translated">LinesAny::take</target>
        </trans-unit>
        <trans-unit id="d8d313d2bce93b25cf57221dc2c4ff7216402612" translate="yes" xml:space="preserve">
          <source>LinesAny::take_while</source>
          <target state="translated">LinesAny::take_while</target>
        </trans-unit>
        <trans-unit id="c67e6599ac7b7afa3ef22132e2c06d4c070d63ed" translate="yes" xml:space="preserve">
          <source>LinesAny::to_owned</source>
          <target state="translated">LinesAny::to_owned</target>
        </trans-unit>
        <trans-unit id="20c912a580ad096620b75e76687c0ee1fce8b870" translate="yes" xml:space="preserve">
          <source>LinesAny::try_fold</source>
          <target state="translated">LinesAny::try_fold</target>
        </trans-unit>
        <trans-unit id="b380c671d14cfe8524018e00f615da7712116b33" translate="yes" xml:space="preserve">
          <source>LinesAny::try_for_each</source>
          <target state="translated">LinesAny::try_for_each</target>
        </trans-unit>
        <trans-unit id="9bde719197639fab83e9e9e39c418d04bc5fabc0" translate="yes" xml:space="preserve">
          <source>LinesAny::try_from</source>
          <target state="translated">LinesAny::try_from</target>
        </trans-unit>
        <trans-unit id="4523c2974b49c9e499a06112b673bce79a5682ca" translate="yes" xml:space="preserve">
          <source>LinesAny::try_into</source>
          <target state="translated">LinesAny::try_into</target>
        </trans-unit>
        <trans-unit id="adaacb5f58637c1818991eb057725b1bddcbde60" translate="yes" xml:space="preserve">
          <source>LinesAny::try_rfold</source>
          <target state="translated">LinesAny::try_rfold</target>
        </trans-unit>
        <trans-unit id="65df302a36a5fd90859abbc45f6bb82dd545c392" translate="yes" xml:space="preserve">
          <source>LinesAny::type_id</source>
          <target state="translated">LinesAny::type_id</target>
        </trans-unit>
        <trans-unit id="79aaf64b0da1522cdfbe1d1c8bf9bb55bf34aec3" translate="yes" xml:space="preserve">
          <source>LinesAny::unzip</source>
          <target state="translated">LinesAny::unzip</target>
        </trans-unit>
        <trans-unit id="fd9d3ff7199d26e6f488d2dae1459473aa35580f" translate="yes" xml:space="preserve">
          <source>LinesAny::zip</source>
          <target state="translated">LinesAny::zip</target>
        </trans-unit>
        <trans-unit id="71af1e2770b43b7090642140fa16af5bed8944e7" translate="yes" xml:space="preserve">
          <source>Link to or import external code.</source>
          <target state="translated">외부 코드에 연결하거나 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b27dc31140950c016978fcb4c144b7b2d3cbc47c" translate="yes" xml:space="preserve">
          <source>Linkage</source>
          <target state="translated">Linkage</target>
        </trans-unit>
        <trans-unit id="bab055db373c2bd47845a4b8346d451b92d62d04" translate="yes" xml:space="preserve">
          <source>LinkedList</source>
          <target state="translated">LinkedList</target>
        </trans-unit>
        <trans-unit id="1d7221a28e2cfaffe53101715b4d86de4a7dfd66" translate="yes" xml:space="preserve">
          <source>LinkedList::append</source>
          <target state="translated">LinkedList::append</target>
        </trans-unit>
        <trans-unit id="1895cbb1840fda13a9cc8ade4ba2697d6ee535ba" translate="yes" xml:space="preserve">
          <source>LinkedList::back</source>
          <target state="translated">LinkedList::back</target>
        </trans-unit>
        <trans-unit id="fb9b42c2685a8dbac5e3324f563be3cf1796e0f7" translate="yes" xml:space="preserve">
          <source>LinkedList::back_mut</source>
          <target state="translated">LinkedList::back_mut</target>
        </trans-unit>
        <trans-unit id="aeefad8183cfacb39ce919c344e239ec9862670a" translate="yes" xml:space="preserve">
          <source>LinkedList::borrow</source>
          <target state="translated">LinkedList::borrow</target>
        </trans-unit>
        <trans-unit id="f0472e58357878f0d621d8e733e25008c34ff0d4" translate="yes" xml:space="preserve">
          <source>LinkedList::borrow_mut</source>
          <target state="translated">LinkedList::borrow_mut</target>
        </trans-unit>
        <trans-unit id="9f3aa78515eb4fc9deb2a76686b78a146f73eb38" translate="yes" xml:space="preserve">
          <source>LinkedList::clamp</source>
          <target state="translated">LinkedList::clamp</target>
        </trans-unit>
        <trans-unit id="3baba029bff9f9a8da41e69bf275599409315dea" translate="yes" xml:space="preserve">
          <source>LinkedList::clear</source>
          <target state="translated">LinkedList::clear</target>
        </trans-unit>
        <trans-unit id="b972add787b37d5ea83979a9babf5c655421182c" translate="yes" xml:space="preserve">
          <source>LinkedList::clone</source>
          <target state="translated">LinkedList::clone</target>
        </trans-unit>
        <trans-unit id="d21432942f743319b674b435f05ab6c5ff5ceb45" translate="yes" xml:space="preserve">
          <source>LinkedList::clone_from</source>
          <target state="translated">LinkedList::clone_from</target>
        </trans-unit>
        <trans-unit id="e521e60d987254a0a5060550d04ba661cea61182" translate="yes" xml:space="preserve">
          <source>LinkedList::clone_into</source>
          <target state="translated">LinkedList::clone_into</target>
        </trans-unit>
        <trans-unit id="9f29b8bd9f1deec7cb7860f77db7caed1761fde0" translate="yes" xml:space="preserve">
          <source>LinkedList::cmp</source>
          <target state="translated">LinkedList::cmp</target>
        </trans-unit>
        <trans-unit id="ccd5a8c5a791726f4df2343870cdf109d703dabe" translate="yes" xml:space="preserve">
          <source>LinkedList::contains</source>
          <target state="translated">LinkedList::contains</target>
        </trans-unit>
        <trans-unit id="a76836ecf8c9b26fd2d43cce79e0fe84c227ac1c" translate="yes" xml:space="preserve">
          <source>LinkedList::default</source>
          <target state="translated">LinkedList::default</target>
        </trans-unit>
        <trans-unit id="ad6cfc9a10d865a130da8928e34af1d02ab576ea" translate="yes" xml:space="preserve">
          <source>LinkedList::drain_filter</source>
          <target state="translated">LinkedList::drain_filter</target>
        </trans-unit>
        <trans-unit id="583ae501326187c6a589c8d5408fb366f81fec10" translate="yes" xml:space="preserve">
          <source>LinkedList::drop</source>
          <target state="translated">LinkedList::drop</target>
        </trans-unit>
        <trans-unit id="6301ceeaee9df1ed7f193c202b13ffc15e661714" translate="yes" xml:space="preserve">
          <source>LinkedList::eq</source>
          <target state="translated">LinkedList::eq</target>
        </trans-unit>
        <trans-unit id="77b4598013cab9585f2476223b3e1be72456832b" translate="yes" xml:space="preserve">
          <source>LinkedList::extend</source>
          <target state="translated">LinkedList::extend</target>
        </trans-unit>
        <trans-unit id="608037fd51a0ef7ad03cdc898ed57c030bba5615" translate="yes" xml:space="preserve">
          <source>LinkedList::fmt</source>
          <target state="translated">LinkedList::fmt</target>
        </trans-unit>
        <trans-unit id="e8bf373454052a6ba258ffae57c3fffe801621c8" translate="yes" xml:space="preserve">
          <source>LinkedList::from</source>
          <target state="translated">LinkedList::from</target>
        </trans-unit>
        <trans-unit id="fff7a5e258af5f94d02ad10517105bd6ae19ad1c" translate="yes" xml:space="preserve">
          <source>LinkedList::from_iter</source>
          <target state="translated">LinkedList::from_iter</target>
        </trans-unit>
        <trans-unit id="62f83fd14d02c88124237f88b98c0568c81763fe" translate="yes" xml:space="preserve">
          <source>LinkedList::front</source>
          <target state="translated">LinkedList::front</target>
        </trans-unit>
        <trans-unit id="1abcf1046d63b3865baff546477ab93014ed41d5" translate="yes" xml:space="preserve">
          <source>LinkedList::front_mut</source>
          <target state="translated">LinkedList::front_mut</target>
        </trans-unit>
        <trans-unit id="9da5a1a1956863555de3271d6dce56a14e82b81b" translate="yes" xml:space="preserve">
          <source>LinkedList::ge</source>
          <target state="translated">LinkedList::ge</target>
        </trans-unit>
        <trans-unit id="b68f64c55807bad13d66aad77d1f280b61acff1d" translate="yes" xml:space="preserve">
          <source>LinkedList::gt</source>
          <target state="translated">LinkedList::gt</target>
        </trans-unit>
        <trans-unit id="3a3f99a3bcea8cbedb769508fda844b7b1adb456" translate="yes" xml:space="preserve">
          <source>LinkedList::hash</source>
          <target state="translated">LinkedList::hash</target>
        </trans-unit>
        <trans-unit id="e95d9cb92e64928cbc90c39d314a48a48dfea313" translate="yes" xml:space="preserve">
          <source>LinkedList::hash_slice</source>
          <target state="translated">LinkedList::hash_slice</target>
        </trans-unit>
        <trans-unit id="e33fed4b6351f89714c72f7b2a4177412286fec6" translate="yes" xml:space="preserve">
          <source>LinkedList::into</source>
          <target state="translated">LinkedList::into</target>
        </trans-unit>
        <trans-unit id="766e05fb903f7eb9ff25ac17cf4e06d9f1929fd9" translate="yes" xml:space="preserve">
          <source>LinkedList::into_iter</source>
          <target state="translated">LinkedList::into_iter</target>
        </trans-unit>
        <trans-unit id="2e0e79f453a69656dc466af6d05746d624ff1ae4" translate="yes" xml:space="preserve">
          <source>LinkedList::is_empty</source>
          <target state="translated">LinkedList::is_empty</target>
        </trans-unit>
        <trans-unit id="e88e61cdc633b79e95bbe6590b23dc45f89946fc" translate="yes" xml:space="preserve">
          <source>LinkedList::iter</source>
          <target state="translated">LinkedList::iter</target>
        </trans-unit>
        <trans-unit id="cee708cef5fa86c3ff958ea2f950f6db04049589" translate="yes" xml:space="preserve">
          <source>LinkedList::iter_mut</source>
          <target state="translated">LinkedList::iter_mut</target>
        </trans-unit>
        <trans-unit id="3d957ea408e1550352277ca227fc2f829c0460ad" translate="yes" xml:space="preserve">
          <source>LinkedList::le</source>
          <target state="translated">LinkedList::le</target>
        </trans-unit>
        <trans-unit id="424eaf002d8d7ba6a77b2ab1ede535f4b32c15f5" translate="yes" xml:space="preserve">
          <source>LinkedList::len</source>
          <target state="translated">LinkedList::len</target>
        </trans-unit>
        <trans-unit id="2a534bb5f111c0bc831ab86c366d42b98c74650b" translate="yes" xml:space="preserve">
          <source>LinkedList::lt</source>
          <target state="translated">LinkedList::lt</target>
        </trans-unit>
        <trans-unit id="254aa9ae679e95aa432b0fcdbdcf6b656e7fc7c6" translate="yes" xml:space="preserve">
          <source>LinkedList::max</source>
          <target state="translated">LinkedList::max</target>
        </trans-unit>
        <trans-unit id="ecfe0d937bdf6f89217a83803176ba27706d5dca" translate="yes" xml:space="preserve">
          <source>LinkedList::min</source>
          <target state="translated">LinkedList::min</target>
        </trans-unit>
        <trans-unit id="ab4c7b8f4e56759824516d40590391af73cac9fa" translate="yes" xml:space="preserve">
          <source>LinkedList::ne</source>
          <target state="translated">LinkedList::ne</target>
        </trans-unit>
        <trans-unit id="333d62ab1ea8e3e4dc30bac4d5d9f0b5e6c77c22" translate="yes" xml:space="preserve">
          <source>LinkedList::new</source>
          <target state="translated">LinkedList::new</target>
        </trans-unit>
        <trans-unit id="a2b7ac726387587715d52ebb92e5c29e77cb33e1" translate="yes" xml:space="preserve">
          <source>LinkedList::partial_cmp</source>
          <target state="translated">LinkedList::partial_cmp</target>
        </trans-unit>
        <trans-unit id="f8293c7077106d4b63d69b4d72f6a4fe40792d01" translate="yes" xml:space="preserve">
          <source>LinkedList::pop_back</source>
          <target state="translated">LinkedList::pop_back</target>
        </trans-unit>
        <trans-unit id="3f993ac47755f3392ca56cfccda9ecba6405e26b" translate="yes" xml:space="preserve">
          <source>LinkedList::pop_front</source>
          <target state="translated">LinkedList::pop_front</target>
        </trans-unit>
        <trans-unit id="701fbf3a6d15709aea76308d3e9d1527b1c4edd8" translate="yes" xml:space="preserve">
          <source>LinkedList::push_back</source>
          <target state="translated">LinkedList::push_back</target>
        </trans-unit>
        <trans-unit id="758742c4eae9921c4b4523a6a8ffb689a56b27e5" translate="yes" xml:space="preserve">
          <source>LinkedList::push_front</source>
          <target state="translated">LinkedList::push_front</target>
        </trans-unit>
        <trans-unit id="7409b474e7f0cc7aa75edcf54dff71677de4e953" translate="yes" xml:space="preserve">
          <source>LinkedList::split_off</source>
          <target state="translated">LinkedList::split_off</target>
        </trans-unit>
        <trans-unit id="06254639b024854066be47e53a3fdd1bd51afd6f" translate="yes" xml:space="preserve">
          <source>LinkedList::to_owned</source>
          <target state="translated">LinkedList::to_owned</target>
        </trans-unit>
        <trans-unit id="975eb49c7c314d4af7f629e3d17e72a12525eee7" translate="yes" xml:space="preserve">
          <source>LinkedList::try_from</source>
          <target state="translated">LinkedList::try_from</target>
        </trans-unit>
        <trans-unit id="02f1a7bb831be2a961fab78ae0060fcc91a42277" translate="yes" xml:space="preserve">
          <source>LinkedList::try_into</source>
          <target state="translated">LinkedList::try_into</target>
        </trans-unit>
        <trans-unit id="cd0830f00f50909bc1064993774e70d85f94caff" translate="yes" xml:space="preserve">
          <source>LinkedList::type_id</source>
          <target state="translated">LinkedList::type_id</target>
        </trans-unit>
        <trans-unit id="8def6848fe71172506103d61fb17e6920134fdbf" translate="yes" xml:space="preserve">
          <source>Linking with &lt;code&gt;kind=framework&lt;/code&gt; is only supported when targeting macOS, as frameworks are specific to that operating system.</source>
          <target state="translated">&lt;code&gt;kind=framework&lt;/code&gt; 는 해당 운영 체제에 따라 다르므로 kind = framework 와의 연결 은 macOS를 대상으로하는 경우에만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="bb2acd3d0a8a476d7ebbe9759952a9cb78815b1f" translate="yes" xml:space="preserve">
          <source>Lint attributes only accept a list of identifiers (where each identifier is a lint name). Ensure the attribute is of this form:</source>
          <target state="translated">보푸라기 속성은 식별자 목록 만 허용합니다 (각 식별자는 보푸라기 이름 임). 속성이 다음 형식인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f633dc23b558481af643afd30a88abcf9c4150e9" translate="yes" xml:space="preserve">
          <source>Lint check attributes</source>
          <target state="translated">린트 점검 속성</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="c598f23c3c7247b9cca836018ec6ace3cd22938a" translate="yes" xml:space="preserve">
          <source>Linux-specific definitions</source>
          <target state="translated">리눅스 특정 정의</target>
        </trans-unit>
        <trans-unit id="3cf4d01174137c549cf6f469c1808221a6913a57" translate="yes" xml:space="preserve">
          <source>Linux-specific definitions.</source>
          <target state="translated">Linux 특정 정의.</target>
        </trans-unit>
        <trans-unit id="ebce14ef973d4e86761e4a1e5af7d41a0f7d561c" translate="yes" xml:space="preserve">
          <source>Linux-specific extensions to primitives in the &lt;code&gt;std::fs&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;std::fs&lt;/code&gt; 모듈의 기본에 대한 Linux 특정 확장 .</target>
        </trans-unit>
        <trans-unit id="655fb3817fa9880a35bd412dfea28c6b355f79d0" translate="yes" xml:space="preserve">
          <source>Linux-specific raw type definitions</source>
          <target state="translated">Linux 특정 원시 유형 정의</target>
        </trans-unit>
        <trans-unit id="5fc8bfaeb191b0f4decd3381991ca9ea5a7c9358" translate="yes" xml:space="preserve">
          <source>Linux-specific raw type definitions.</source>
          <target state="translated">Linux 특정 원시 유형 정의.</target>
        </trans-unit>
        <trans-unit id="c0bf51dca9ad41726a0ce1d53a9ddf560a97cbe3" translate="yes" xml:space="preserve">
          <source>List of all items</source>
          <target state="translated">모든 항목 목록</target>
        </trans-unit>
        <trans-unit id="ad863bfa3ec2a8731acc0682128beedfee0d1c25" translate="yes" xml:space="preserve">
          <source>Listen for TCP connections on a socket.</source>
          <target state="translated">소켓에서 TCP 연결을 청취하십시오.</target>
        </trans-unit>
        <trans-unit id="0f71a0caf69d45adcd56f43ef19c4828127d7dfd" translate="yes" xml:space="preserve">
          <source>Listening to the TCP Connection</source>
          <target state="translated">TCP 연결 청취</target>
        </trans-unit>
        <trans-unit id="000eca635bbec1c8b03148386174299cd0ac7bc3" translate="yes" xml:space="preserve">
          <source>Listing 1-1: A program that prints &lt;code&gt;Hello, world!&lt;/code&gt;</source>
          <target state="translated">Listing 1-1 : &lt;code&gt;Hello, world!&lt;/code&gt; 를 인쇄하는 프로그램 !</target>
        </trans-unit>
        <trans-unit id="b687784614bd2cea58910d0e427db67a0386ccf0" translate="yes" xml:space="preserve">
          <source>Listing 1-2: Contents of &lt;em&gt;Cargo.toml&lt;/em&gt; generated by &lt;code&gt;cargo new&lt;/code&gt;</source>
          <target state="translated">Listing 1-2 : &lt;code&gt;cargo new&lt;/code&gt; 생성 된 &lt;em&gt;Cargo.toml의&lt;/em&gt; 내용</target>
        </trans-unit>
        <trans-unit id="d69c613a4dbd2d9b96a6c273fabfeeb75c302d08" translate="yes" xml:space="preserve">
          <source>Listing 10-10: An &lt;code&gt;impl&lt;/code&gt; block that only applies to a struct with a particular concrete type for the generic type parameter &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">Listing 10-10 : 일반 타입 매개 변수 &lt;code&gt;T&lt;/code&gt; 에 대한 구체적인 구체적 타입을 가진 구조체에만 적용되는 &lt;code&gt;impl&lt;/code&gt; 블록</target>
        </trans-unit>
        <trans-unit id="0f5202dea4805314e71b6d9bc482bf479c967fce" translate="yes" xml:space="preserve">
          <source>Listing 10-11: A method that uses different generic types from its struct&amp;rsquo;s definition</source>
          <target state="translated">코드 10-11 : 구조체 정의와 다른 제네릭 형식을 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="fe08fd9b19ee480cba2ab27759199b72d161b78a" translate="yes" xml:space="preserve">
          <source>Listing 10-12: A &lt;code&gt;Summary&lt;/code&gt; trait that consists of the behavior provided by a &lt;code&gt;summarize&lt;/code&gt; method</source>
          <target state="translated">코드 10-12 : &lt;code&gt;summarize&lt;/code&gt; 메소드가 제공하는 동작으로 구성된 &lt;code&gt;Summary&lt;/code&gt; 특성</target>
        </trans-unit>
        <trans-unit id="f858d0a318247c8524e6194f908444c2dd7b6a7c" translate="yes" xml:space="preserve">
          <source>Listing 10-13: Implementing the &lt;code&gt;Summary&lt;/code&gt; trait on the &lt;code&gt;NewsArticle&lt;/code&gt; and &lt;code&gt;Tweet&lt;/code&gt; types</source>
          <target state="translated">Listing 10-13 : &lt;code&gt;NewsArticle&lt;/code&gt; 및 &lt;code&gt;Tweet&lt;/code&gt; 유형 에 대한 &lt;code&gt;Summary&lt;/code&gt; 특성 구현</target>
        </trans-unit>
        <trans-unit id="0c2939a5b3aa237684a06426fda3254a38689ee2" translate="yes" xml:space="preserve">
          <source>Listing 10-14 shows how to specify a default string for the &lt;code&gt;summarize&lt;/code&gt; method of the &lt;code&gt;Summary&lt;/code&gt; trait instead of only defining the method signature, as we did in Listing 10-12.</source>
          <target state="translated">Listing 10-14는 Listing 10-12에서와 같이 메소드 서명 만 정의하는 대신 &lt;code&gt;Summary&lt;/code&gt; 특성 의 &lt;code&gt;summarize&lt;/code&gt; 메소드에 기본 문자열을 지정하는 방법을 보여 준다 .</target>
        </trans-unit>
        <trans-unit id="0eda626113b95538f2b58d77e3a158bc3fb384ff" translate="yes" xml:space="preserve">
          <source>Listing 10-14: Definition of a &lt;code&gt;Summary&lt;/code&gt; trait with a default implementation of the &lt;code&gt;summarize&lt;/code&gt; method</source>
          <target state="translated">Listing 10-14 : &lt;code&gt;summarize&lt;/code&gt; 메소드 의 기본 구현으로 &lt;code&gt;Summary&lt;/code&gt; 특성 정의</target>
        </trans-unit>
        <trans-unit id="3d3f5beaa880b557bbf950778ea6d843b28c2edd" translate="yes" xml:space="preserve">
          <source>Listing 10-15: A working definition of the &lt;code&gt;largest&lt;/code&gt; function that works on any generic type that implements the &lt;code&gt;PartialOrd&lt;/code&gt; and &lt;code&gt;Copy&lt;/code&gt; traits</source>
          <target state="translated">Listing 10-15 : &lt;code&gt;PartialOrd&lt;/code&gt; 및 &lt;code&gt;Copy&lt;/code&gt; 특성 을 구현하는 모든 일반 유형에서 작동 하는 &lt;code&gt;largest&lt;/code&gt; 함수 의 작업 정의</target>
        </trans-unit>
        <trans-unit id="f215c1a3fe409bbb8c9f543a15d9c5622d086343" translate="yes" xml:space="preserve">
          <source>Listing 10-16: Conditionally implement methods on a generic type depending on trait bounds</source>
          <target state="translated">코드 10-16 : 특성 경계에 따라 제네릭 형식에서 조건부로 메서드를 구현</target>
        </trans-unit>
        <trans-unit id="c9a836a730288e3b26429843a74b8737cf9da160" translate="yes" xml:space="preserve">
          <source>Listing 10-17: An attempt to use a reference whose value has gone out of scope</source>
          <target state="translated">Listing 10-17 : 값이 범위를 벗어난 참조를 사용하려는 시도</target>
        </trans-unit>
        <trans-unit id="9ad5b72420956c593772603b787e8a64675cb059" translate="yes" xml:space="preserve">
          <source>Listing 10-18: Annotations of the lifetimes of &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, named &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;'b&lt;/code&gt;, respectively</source>
          <target state="translated">의 수명의 주석 : 10-18 리스팅 &lt;code&gt;r&lt;/code&gt; 및 &lt;code&gt;x&lt;/code&gt; 라는 &lt;code&gt;'a&lt;/code&gt; 과 &lt;code&gt;'b&lt;/code&gt; 각각을</target>
        </trans-unit>
        <trans-unit id="6f0d74437b0b11c64f9bc42e955988c7e4c63e87" translate="yes" xml:space="preserve">
          <source>Listing 10-19 fixes the code so it doesn&amp;rsquo;t have a dangling reference and compiles without any errors.</source>
          <target state="translated">코드 10-19는 코드가 매달려있는 참조가없고 오류없이 컴파일되도록 코드를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="320ea9cdf60881bf8c53102bd42e44f1ac78cf9d" translate="yes" xml:space="preserve">
          <source>Listing 10-19: A valid reference because the data has a longer lifetime than the reference</source>
          <target state="translated">리스팅 10-19 : 데이터가 참조보다 수명이 길기 때문에 유효한 참조</target>
        </trans-unit>
        <trans-unit id="428105c6c3f48847f9a6db3d7935b282600e843e" translate="yes" xml:space="preserve">
          <source>Listing 10-1: Code to find the largest number in a list of numbers</source>
          <target state="translated">코드 10-1 : 숫자 목록에서 가장 큰 숫자를 찾는 코드</target>
        </trans-unit>
        <trans-unit id="66b6555b4c7bece5ed7002dc31c9389ead9a69af" translate="yes" xml:space="preserve">
          <source>Listing 10-20: A &lt;code&gt;main&lt;/code&gt; function that calls the &lt;code&gt;longest&lt;/code&gt; function to find the longer of two string slices</source>
          <target state="translated">코드 10-20 : &lt;code&gt;longest&lt;/code&gt; 함수를 호출하여 두 문자열 슬라이스 중 더 긴 것을 찾는 &lt;code&gt;main&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="f783ca5d0ba6bb131bda7299c84bb28122223a0f" translate="yes" xml:space="preserve">
          <source>Listing 10-21: An implementation of the &lt;code&gt;longest&lt;/code&gt; function that returns the longer of two string slices but does not yet compile</source>
          <target state="translated">Listing 10-21 : 두 문자열 슬라이스 중 더 긴 문자열을 반환하지만 아직 컴파일하지 않는 &lt;code&gt;longest&lt;/code&gt; 함수 구현</target>
        </trans-unit>
        <trans-unit id="aaf3cbf8878f3cdb39331e6656cf6c2a012e46f1" translate="yes" xml:space="preserve">
          <source>Listing 10-22: The &lt;code&gt;longest&lt;/code&gt; function definition specifying that all the references in the signature must have the same lifetime &lt;code&gt;'a&lt;/code&gt;</source>
          <target state="translated">10-22 리스팅 다음 &lt;code&gt;longest&lt;/code&gt; 함수 정의가 서명에있는 모든 참조가 같은 수명이 있어야 지정 &lt;code&gt;'a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7d43de8a6a7d0dddb054a46fe89c681a077224e" translate="yes" xml:space="preserve">
          <source>Listing 10-23: Using the &lt;code&gt;longest&lt;/code&gt; function with references to &lt;code&gt;String&lt;/code&gt; values that have different concrete lifetimes</source>
          <target state="translated">Listing 10-23 : 구체적인 수명이 다른 &lt;code&gt;String&lt;/code&gt; 값에 대한 참조와 함께 &lt;code&gt;longest&lt;/code&gt; 함수 사용</target>
        </trans-unit>
        <trans-unit id="152dda571254cbe64f53382aaba9a1165e9c78dd" translate="yes" xml:space="preserve">
          <source>Listing 10-24: Attempting to use &lt;code&gt;result&lt;/code&gt; after &lt;code&gt;string2&lt;/code&gt; has gone out of scope</source>
          <target state="translated">Listing 10-24 : &lt;code&gt;string2&lt;/code&gt; 가 범위를 벗어난 후 &lt;code&gt;result&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0e3d08cfc75a3e760350ab76ffa641dae696768e" translate="yes" xml:space="preserve">
          <source>Listing 10-25: A struct that holds a reference, so its definition needs a lifetime annotation</source>
          <target state="translated">코드 10-25 : 참조를 보유한 구조체이므로 정의에 수명 주석이 필요합니다</target>
        </trans-unit>
        <trans-unit id="0ad37b59fb9959c9e9937f7b00c202068f572669" translate="yes" xml:space="preserve">
          <source>Listing 10-26: A function we defined in Listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references</source>
          <target state="translated">Listing 10-26 : Listing 4-9에서 정의한 함수 (매개 변수와 리턴 타입이 참조 임에도 불구하고 수명 주석없이 컴파일 됨)</target>
        </trans-unit>
        <trans-unit id="8945acfd7307f375b353403628127c294243126c" translate="yes" xml:space="preserve">
          <source>Listing 10-2: Code to find the largest number in &lt;em&gt;two&lt;/em&gt; lists of numbers</source>
          <target state="translated">코드 10-2 : &lt;em&gt;두&lt;/em&gt; 숫자 목록 에서 가장 큰 숫자를 찾는 코드</target>
        </trans-unit>
        <trans-unit id="d54bf4bc462c613f282e10138aab127e4859709f" translate="yes" xml:space="preserve">
          <source>Listing 10-3: Abstracted code to find the largest number in two lists</source>
          <target state="translated">Listing 10-3 : 두 목록에서 가장 큰 숫자를 찾는 추상 코드</target>
        </trans-unit>
        <trans-unit id="9f511a6e488da24eb1846119f6145be6fda9dc51" translate="yes" xml:space="preserve">
          <source>Listing 10-4: Two functions that differ only in their names and the types in their signatures</source>
          <target state="translated">Listing 10-4 : 이름과 시그니처 형식 만 다른 두 가지 함수</target>
        </trans-unit>
        <trans-unit id="ff1ba52b39d8dd460657964860b8df2c48ffd5a7" translate="yes" xml:space="preserve">
          <source>Listing 10-5 shows the combined &lt;code&gt;largest&lt;/code&gt; function definition using the generic data type in its signature. The listing also shows how we can call the function with either a slice of &lt;code&gt;i32&lt;/code&gt; values or &lt;code&gt;char&lt;/code&gt; values. Note that this code won&amp;rsquo;t compile yet, but we&amp;rsquo;ll fix it later in this chapter.</source>
          <target state="translated">리스팅 10-5는 서명에서 일반 데이터 유형을 사용하여 결합 된 &lt;code&gt;largest&lt;/code&gt; 함수 정의를 보여줍니다 . 이 목록은 또한 &lt;code&gt;i32&lt;/code&gt; 값 또는 &lt;code&gt;char&lt;/code&gt; 값 조각으로 함수를 호출하는 방법을 보여줍니다 . 이 코드는 아직 컴파일되지 않지만이 장의 후반부에서 수정 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="143c8015eb195c0a855921a232d48882fdfa6199" translate="yes" xml:space="preserve">
          <source>Listing 10-5: A definition of the &lt;code&gt;largest&lt;/code&gt; function that uses generic type parameters but doesn&amp;rsquo;t compile yet</source>
          <target state="translated">코드 10-5 : 제네릭 형식 매개 변수를 사용하지만 아직 컴파일하지 않는 &lt;code&gt;largest&lt;/code&gt; 함수 의 정의</target>
        </trans-unit>
        <trans-unit id="9f174805e0992f398e1f1ca5f29a19ffc4d27694" translate="yes" xml:space="preserve">
          <source>Listing 10-6: A &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; struct that holds &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">10-6 리스팅하십시오 &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; 구조체 보유하는 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 입력 값 &lt;code&gt;T&lt;/code&gt; 를</target>
        </trans-unit>
        <trans-unit id="9448d8af833108533fe15031b8b4d2802fea9fee" translate="yes" xml:space="preserve">
          <source>Listing 10-7: The fields &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be the same type because both have the same generic data type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">Listing 10-7 : 필드 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 는 모두 동일한 일반 데이터 유형 &lt;code&gt;T&lt;/code&gt; 를 갖기 때문에 동일한 유형이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ec2d0e7e138a4ceaea7913152f5ca90e974321a2" translate="yes" xml:space="preserve">
          <source>Listing 10-8: A &lt;code&gt;Point&amp;lt;T, U&amp;gt;&lt;/code&gt; generic over two types so that &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; can be values of different types</source>
          <target state="translated">Listing 10-8 : &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 다른 유형의 값이 될 수 있도록 두 유형에 대해 일반적인 &lt;code&gt;Point&amp;lt;T, U&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a1c307d9f0bcac61ab42e1c9f84f9ed3a3202b8" translate="yes" xml:space="preserve">
          <source>Listing 10-9: Implementing a method named &lt;code&gt;x&lt;/code&gt; on the &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; struct that will return a reference to the &lt;code&gt;x&lt;/code&gt; field of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">10-9 목록 : 구현 방법이라는 &lt;code&gt;x&lt;/code&gt; 온 &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; 구조체 그에 대한 참조를 반환합니다 &lt;code&gt;x&lt;/code&gt; 타입의 필드 &lt;code&gt;T&lt;/code&gt; 를</target>
        </trans-unit>
        <trans-unit id="b7dd9fb7fe8716f9d589702be6d64391b88eca59" translate="yes" xml:space="preserve">
          <source>Listing 11-10: Tests for a function that calls &lt;code&gt;println!&lt;/code&gt;</source>
          <target state="translated">코드 11-10 : &lt;code&gt;println!&lt;/code&gt; 을 호출하는 함수를 테스트합니다 !</target>
        </trans-unit>
        <trans-unit id="663eca965c3ba885e4efda1cc01d265ba7ee909d" translate="yes" xml:space="preserve">
          <source>Listing 11-11: Three tests with three different names</source>
          <target state="translated">코드 11-11 : 세 가지 이름을 가진 세 가지 테스트</target>
        </trans-unit>
        <trans-unit id="5efd2a052ff2542d536b8502f2b4980df1a6dce1" translate="yes" xml:space="preserve">
          <source>Listing 11-12: Testing a private function</source>
          <target state="translated">코드 11-12 : 개인 함수 테스트</target>
        </trans-unit>
        <trans-unit id="48cb3400c4a8ad4b6166188f2fab6bc60bd6219b" translate="yes" xml:space="preserve">
          <source>Listing 11-13: An integration test of a function in the &lt;code&gt;adder&lt;/code&gt; crate</source>
          <target state="translated">코드 11-13 : &lt;code&gt;adder&lt;/code&gt; 상자 에있는 함수의 통합 테스트</target>
        </trans-unit>
        <trans-unit id="5c2257fe8ef1d882180458c1b0a1e7508b4520a8" translate="yes" xml:space="preserve">
          <source>Listing 11-1: The test module and function generated automatically by &lt;code&gt;cargo new&lt;/code&gt;</source>
          <target state="translated">Listing 11-1 : &lt;code&gt;cargo new&lt;/code&gt; 의해 자동으로 생성 된 테스트 모듈 및 기능</target>
        </trans-unit>
        <trans-unit id="0accc31dbd879e03e4b3df35e4dd459a3f9f0143" translate="yes" xml:space="preserve">
          <source>Listing 11-2: The output from running the automatically generated test</source>
          <target state="translated">Listing 11-2 : 자동 생성 된 테스트 실행 결과</target>
        </trans-unit>
        <trans-unit id="babcd8d1af7abd24adae555edfe6cd481e6cae56" translate="yes" xml:space="preserve">
          <source>Listing 11-3: Adding a second test that will fail because we call the &lt;code&gt;panic!&lt;/code&gt; macro</source>
          <target state="translated">Listing 11-3 : &lt;code&gt;panic!&lt;/code&gt; 이라고 부르기 때문에 실패 할 두 번째 테스트 추가 ! 매크로</target>
        </trans-unit>
        <trans-unit id="4cb738beadb392cdb38f964fe0049b8a6cd5aed2" translate="yes" xml:space="preserve">
          <source>Listing 11-4: Test results when one test passes and one test fails</source>
          <target state="translated">코드 11-4 : 하나의 테스트에 합격하고 하나의 테스트에 실패한 테스트 결과</target>
        </trans-unit>
        <trans-unit id="f608215f970b53734ae2ff526021fb4584f351c0" translate="yes" xml:space="preserve">
          <source>Listing 11-5: Using the &lt;code&gt;Rectangle&lt;/code&gt; struct and its &lt;code&gt;can_hold&lt;/code&gt; method from Chapter 5</source>
          <target state="translated">Listing 11-5 : &lt;code&gt;Rectangle&lt;/code&gt; 구조체와 5 장의 &lt;code&gt;can_hold&lt;/code&gt; 메소드 사용</target>
        </trans-unit>
        <trans-unit id="cbf4f2ecb4a4d91a58dc52248033e7b4438801c5" translate="yes" xml:space="preserve">
          <source>Listing 11-6: A test for &lt;code&gt;can_hold&lt;/code&gt; that checks whether a larger rectangle can indeed hold a smaller rectangle</source>
          <target state="translated">Listing 11-6 : 큰 사각형이 실제로 작은 사각형을 보유 할 수 있는지 확인하는 &lt;code&gt;can_hold&lt;/code&gt; 테스트</target>
        </trans-unit>
        <trans-unit id="28966420c99003306fc854d334fa7af6144c41bc" translate="yes" xml:space="preserve">
          <source>Listing 11-7: Testing the function &lt;code&gt;add_two&lt;/code&gt; using the &lt;code&gt;assert_eq!&lt;/code&gt; macro</source>
          <target state="translated">Listing 11-7 : &lt;code&gt;assert_eq!&lt;/code&gt; 를 사용하여 &lt;code&gt;add_two&lt;/code&gt; 함수 테스트 ! 매크로</target>
        </trans-unit>
        <trans-unit id="e5898c0a82131240c22ccdbdf94ab76399fc2b4c" translate="yes" xml:space="preserve">
          <source>Listing 11-8 shows a test that checks that the error conditions of &lt;code&gt;Guess::new&lt;/code&gt; happen when we expect them to.</source>
          <target state="translated">목록 11-8은 &lt;code&gt;Guess::new&lt;/code&gt; 의 오류 조건이 예상대로 발생 하는지 확인하는 테스트를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="cd5aa075b275eade7c7d7e99fea41082cd8af299" translate="yes" xml:space="preserve">
          <source>Listing 11-8: Testing that a condition will cause a &lt;code&gt;panic!&lt;/code&gt;</source>
          <target state="translated">리스팅 11-8 : 조건을 테스트하면 &lt;code&gt;panic!&lt;/code&gt; 이 발생할 수 있습니다 !</target>
        </trans-unit>
        <trans-unit id="4f460b91faeba4e72a7576be481019852c7d4fdb" translate="yes" xml:space="preserve">
          <source>Listing 11-9: Testing that a condition will cause a &lt;code&gt;panic!&lt;/code&gt; with a particular panic message</source>
          <target state="translated">리스팅 11-9 : 조건 테스트로 &lt;code&gt;panic!&lt;/code&gt; 이 발생할 수 있습니다 ! 특정 공황 메시지와 함께</target>
        </trans-unit>
        <trans-unit id="4f134241495345d158e8b7f88921150d7b3ca097" translate="yes" xml:space="preserve">
          <source>Listing 12-10: Exiting with an error code if creating a new &lt;code&gt;Config&lt;/code&gt; fails</source>
          <target state="translated">코드 12-10 : 새로운 &lt;code&gt;Config&lt;/code&gt; 생성에 실패하면 오류 코드로 종료</target>
        </trans-unit>
        <trans-unit id="6100ad5acae99c7b724fe077757f25e7675de7e3" translate="yes" xml:space="preserve">
          <source>Listing 12-11 shows the extracted &lt;code&gt;run&lt;/code&gt; function. For now, we&amp;rsquo;re just making the small, incremental improvement of extracting the function. We&amp;rsquo;re still defining the function in &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">목록 12-11은 추출 된 &lt;code&gt;run&lt;/code&gt; 기능을 보여줍니다 . 지금은 함수 추출을 조금씩 점진적으로 개선하고 있습니다. 우리는 여전히 &lt;em&gt;src / main.rs에&lt;/em&gt; 함수를 정의하고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0b9d339a7a3fad65f074e91633f3a486cf5d1dc" translate="yes" xml:space="preserve">
          <source>Listing 12-11: Extracting a &lt;code&gt;run&lt;/code&gt; function containing the rest of the program logic</source>
          <target state="translated">코드 12-11 : 나머지 프로그램 로직을 포함 하는 &lt;code&gt;run&lt;/code&gt; 함수 추출</target>
        </trans-unit>
        <trans-unit id="071e594cc8170d80aa9bc71ff858621d1899a043" translate="yes" xml:space="preserve">
          <source>Listing 12-12: Changing the &lt;code&gt;run&lt;/code&gt; function to return &lt;code&gt;Result&lt;/code&gt;</source>
          <target state="translated">Listing 12-12 : &lt;code&gt;Result&lt;/code&gt; 를 반환 하도록 &lt;code&gt;run&lt;/code&gt; 함수 변경</target>
        </trans-unit>
        <trans-unit id="d824d780291730903dc2319912f456db3829c564" translate="yes" xml:space="preserve">
          <source>Listing 12-13: Moving &lt;code&gt;Config&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; into &lt;em&gt;src/lib.rs&lt;/em&gt;</source>
          <target state="translated">12 ~ 13 목록 : 이동 &lt;code&gt;Config&lt;/code&gt; 하고 &lt;code&gt;run&lt;/code&gt; 에 &lt;em&gt;SRC / lib.rs&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6fb1cb1b4e65216801e3218d95f344b132cc146a" translate="yes" xml:space="preserve">
          <source>Listing 12-14: Using the &lt;code&gt;minigrep&lt;/code&gt; library crate in &lt;em&gt;src/main.rs&lt;/em&gt;</source>
          <target state="translated">코드 12-14 : &lt;em&gt;src / main.rs&lt;/em&gt; 에서 &lt;code&gt;minigrep&lt;/code&gt; 라이브러리 상자 사용&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ba33c7dbff2c2c8d4b81943f7e619dccb2b6031f" translate="yes" xml:space="preserve">
          <source>Listing 12-15: Creating a failing test for the &lt;code&gt;search&lt;/code&gt; function we wish we had</source>
          <target state="translated">Listing 12-15 : 원하는 &lt;code&gt;search&lt;/code&gt; 기능에 대한 테스트 실패 만들기</target>
        </trans-unit>
        <trans-unit id="c0ea2c4739dd16d7a6fa7fcfdf260b295ac3decc" translate="yes" xml:space="preserve">
          <source>Listing 12-16: Defining just enough of the &lt;code&gt;search&lt;/code&gt; function so our test will compile</source>
          <target state="translated">코드 12-16 : &lt;code&gt;search&lt;/code&gt; 기능을 충분히 정의하여 테스트를 컴파일</target>
        </trans-unit>
        <trans-unit id="32e6e3eee0c053057b6f77c7c5b9d802b4cc73c4" translate="yes" xml:space="preserve">
          <source>Listing 12-17: Iterating through each line in &lt;code&gt;contents&lt;/code&gt;</source>
          <target state="translated">Listing 12-17 : &lt;code&gt;contents&lt;/code&gt; 각 줄을 반복</target>
        </trans-unit>
        <trans-unit id="c02811c0f1c14decbed9426d6b0febf448d0ad63" translate="yes" xml:space="preserve">
          <source>Listing 12-18: Adding functionality to see whether the line contains the string in &lt;code&gt;query&lt;/code&gt;</source>
          <target state="translated">코드 12-18 : 행에 &lt;code&gt;query&lt;/code&gt; 문자열이 포함되어 있는지 확인하는 기능 추가</target>
        </trans-unit>
        <trans-unit id="e8c0bf83172641bd14312b287174ce7c6681e599" translate="yes" xml:space="preserve">
          <source>Listing 12-19: Storing the lines that match so we can return them</source>
          <target state="translated">Listing 12-19 : 일치하는 행 저장하기</target>
        </trans-unit>
        <trans-unit id="1a59c8d9212a6f20636dbe6da9d958e26cc84022" translate="yes" xml:space="preserve">
          <source>Listing 12-1: Collecting the command line arguments into a vector and printing them</source>
          <target state="translated">Listing 12-1 : 명령 행 인수를 벡터로 수집하여 인쇄</target>
        </trans-unit>
        <trans-unit id="f317c7f104c988109cb3c81369fd4b06d393e012" translate="yes" xml:space="preserve">
          <source>Listing 12-20: Adding a new failing test for the case-insensitive function we&amp;rsquo;re about to add</source>
          <target state="translated">Listing 12-20 : 대소 문자를 구분하지 않는 함수에 대해 새로운 실패 테스트 추가</target>
        </trans-unit>
        <trans-unit id="55f540c39355861fcbe6e846e58e7bf1c320bd0c" translate="yes" xml:space="preserve">
          <source>Listing 12-21: Defining the &lt;code&gt;search_case_insensitive&lt;/code&gt; function to lowercase the query and the line before comparing them</source>
          <target state="translated">Listing 12-21 : &lt;code&gt;search_case_insensitive&lt;/code&gt; 함수를 정의하여 쿼리와 행을 소문자로 비교하기</target>
        </trans-unit>
        <trans-unit id="4e64dc195f705cb4fdb5732e62697fe0cab8f439" translate="yes" xml:space="preserve">
          <source>Listing 12-22: Calling either &lt;code&gt;search&lt;/code&gt; or &lt;code&gt;search_case_insensitive&lt;/code&gt; based on the value in &lt;code&gt;config.case_sensitive&lt;/code&gt;</source>
          <target state="translated">Listing 12-22 : &lt;code&gt;config.case_sensitive&lt;/code&gt; 의 값을 기반으로 &lt;code&gt;search&lt;/code&gt; 또는 &lt;code&gt;search_case_insensitive&lt;/code&gt; 호출</target>
        </trans-unit>
        <trans-unit id="aed5e25bcf29d25806081a3a082c45cb79431e31" translate="yes" xml:space="preserve">
          <source>Listing 12-23: Checking for an environment variable named &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt;</source>
          <target state="translated">Listing 12-23 : &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; 라는 환경 변수 확인</target>
        </trans-unit>
        <trans-unit id="17975e81e1315570ab62387c45a7551d6be46ab4" translate="yes" xml:space="preserve">
          <source>Listing 12-24: Writing error messages to standard error instead of standard output using &lt;code&gt;eprintln!&lt;/code&gt;</source>
          <target state="translated">Listing 12-24 : &lt;code&gt;eprintln!&lt;/code&gt; 사용하여 표준 출력 대신 표준 오류에 오류 메시지 쓰기 !</target>
        </trans-unit>
        <trans-unit id="2100519198b29bb694c8c3bf5e50660d96fba9c0" translate="yes" xml:space="preserve">
          <source>Listing 12-2: Creating variables to hold the query argument and filename argument</source>
          <target state="translated">Listing 12-2 : 쿼리 인수와 파일 이름 인수를 보유 할 변수 작성</target>
        </trans-unit>
        <trans-unit id="65656de032616e9461082746ce3cf116869d59f3" translate="yes" xml:space="preserve">
          <source>Listing 12-3: A poem by Emily Dickinson makes a good test case</source>
          <target state="translated">리스팅 12-3 : Emily Dickinson의시</target>
        </trans-unit>
        <trans-unit id="2708e6a7de1a0c8cd2be27bbd3101e9316ac8cab" translate="yes" xml:space="preserve">
          <source>Listing 12-4: Reading the contents of the file specified by the second argument</source>
          <target state="translated">Listing 12-4 : 두 번째 인수로 지정된 파일의 내용 읽기</target>
        </trans-unit>
        <trans-unit id="44ac99f1a4a9b342d4cebb2df5d3d20cf394f7e8" translate="yes" xml:space="preserve">
          <source>Listing 12-5: Extracting a &lt;code&gt;parse_config&lt;/code&gt; function from &lt;code&gt;main&lt;/code&gt;</source>
          <target state="translated">Listing 12-5 : &lt;code&gt;main&lt;/code&gt; 에서 &lt;code&gt;parse_config&lt;/code&gt; 함수 추출</target>
        </trans-unit>
        <trans-unit id="f8216ac0279c2a1d8888d7f8093192a3d5c178c6" translate="yes" xml:space="preserve">
          <source>Listing 12-6 shows the improvements to the &lt;code&gt;parse_config&lt;/code&gt; function.</source>
          <target state="translated">목록 12-6은 &lt;code&gt;parse_config&lt;/code&gt; 함수 의 개선 사항을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="17631a08e95f9920334df800a9a0124d754e4805" translate="yes" xml:space="preserve">
          <source>Listing 12-6: Refactoring &lt;code&gt;parse_config&lt;/code&gt; to return an instance of a &lt;code&gt;Config&lt;/code&gt; struct</source>
          <target state="translated">Listing 12-6 : &lt;code&gt;Config&lt;/code&gt; 구조체 의 인스턴스를 반환하도록 &lt;code&gt;parse_config&lt;/code&gt; 리팩토링</target>
        </trans-unit>
        <trans-unit id="7902640f876db106ab145779028aded337b2c352" translate="yes" xml:space="preserve">
          <source>Listing 12-7: Changing &lt;code&gt;parse_config&lt;/code&gt; into &lt;code&gt;Config::new&lt;/code&gt;</source>
          <target state="translated">Listing 12-7 : &lt;code&gt;parse_config&lt;/code&gt; 를 &lt;code&gt;Config::new&lt;/code&gt; 로 변경</target>
        </trans-unit>
        <trans-unit id="5b72df7dc9d2d8227aea5105dc4b73b3170cf864" translate="yes" xml:space="preserve">
          <source>Listing 12-8: Adding a check for the number of arguments</source>
          <target state="translated">Listing 12-8 : 인수 개수 검사 추가</target>
        </trans-unit>
        <trans-unit id="debaf0a840041a5dc0446ff5c7d52150222ea8f8" translate="yes" xml:space="preserve">
          <source>Listing 12-9 shows the changes we need to make to the return value of &lt;code&gt;Config::new&lt;/code&gt; and the body of the function needed to return a &lt;code&gt;Result&lt;/code&gt;. Note that this won&amp;rsquo;t compile until we update &lt;code&gt;main&lt;/code&gt; as well, which we&amp;rsquo;ll do in the next listing.</source>
          <target state="translated">Listing 12-9는 &lt;code&gt;Config::new&lt;/code&gt; 의 반환 값 과 &lt;code&gt;Result&lt;/code&gt; 를 반환하는 데 필요한 함수 본문에 대한 변경 사항을 보여줍니다 . 이것은 &lt;code&gt;main&lt;/code&gt; 을 업데이트 할 때까지 컴파일되지 않으며 , 다음 리스팅에서 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="56f489680a7fc898fdbd78a5b08e9663a6a39260" translate="yes" xml:space="preserve">
          <source>Listing 12-9: Returning a &lt;code&gt;Result&lt;/code&gt; from &lt;code&gt;Config::new&lt;/code&gt;</source>
          <target state="translated">Listing 12-9 : &lt;code&gt;Config::new&lt;/code&gt; 에서 &lt;code&gt;Result&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="2387a086e5c0e15c533fcf1cd082be6cbf9aa789" translate="yes" xml:space="preserve">
          <source>Listing 13-10: The caching logic of &lt;code&gt;Cacher&lt;/code&gt;</source>
          <target state="translated">Listing 13-10 : &lt;code&gt;Cacher&lt;/code&gt; 의 캐싱 로직</target>
        </trans-unit>
        <trans-unit id="c0d5d1186250f866b96050820ef8cebe60ec2357" translate="yes" xml:space="preserve">
          <source>Listing 13-11 shows how we can use this &lt;code&gt;Cacher&lt;/code&gt; struct in the function &lt;code&gt;generate_workout&lt;/code&gt; from Listing 13-6.</source>
          <target state="translated">Listing 13-11은 Listing 13-6의 &lt;code&gt;generate_workout&lt;/code&gt; 함수 에서이 &lt;code&gt;Cacher&lt;/code&gt; 구조체를 사용하는 방법을 보여준다 .</target>
        </trans-unit>
        <trans-unit id="f28a86f3bf9c417b2c6867c9b6d5d47f75ce8201" translate="yes" xml:space="preserve">
          <source>Listing 13-11: Using &lt;code&gt;Cacher&lt;/code&gt; in the &lt;code&gt;generate_workout&lt;/code&gt; function to abstract away the caching logic</source>
          <target state="translated">Listing 13-11 : &lt;code&gt;generate_workout&lt;/code&gt; 함수 에서 &lt;code&gt;Cacher&lt;/code&gt; 를 사용 하여 캐싱 로직을 추상화</target>
        </trans-unit>
        <trans-unit id="2faa47ae3b7b90c66c9482115f3da7f41aa52274" translate="yes" xml:space="preserve">
          <source>Listing 13-12 has an example of a closure stored in the &lt;code&gt;equal_to_x&lt;/code&gt; variable that uses the &lt;code&gt;x&lt;/code&gt; variable from the closure&amp;rsquo;s surrounding environment.</source>
          <target state="translated">Listing 13-12에는 클로저 주변 환경의 &lt;code&gt;x&lt;/code&gt; 변수 를 사용하는 &lt;code&gt;equal_to_x&lt;/code&gt; 변수에 저장된 클로저의 예제가있다 .</target>
        </trans-unit>
        <trans-unit id="4b1488c608b861242d66483cb6d6cc0f1e815ff9" translate="yes" xml:space="preserve">
          <source>Listing 13-12: Example of a closure that refers to a variable in its enclosing scope</source>
          <target state="translated">코드 13-12 : 둘러싸는 범위에서 변수를 참조하는 클로저 예제</target>
        </trans-unit>
        <trans-unit id="da63b2d988a14d06ef71cb8b080de74948afbde8" translate="yes" xml:space="preserve">
          <source>Listing 13-13: Creating an iterator</source>
          <target state="translated">Listing 13-13 : 이터레이터 만들기</target>
        </trans-unit>
        <trans-unit id="b86de7f7c1fa8c222e474e9c97fe8e6310b36b9f" translate="yes" xml:space="preserve">
          <source>Listing 13-14: Using an iterator in a &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">Listing 13-14 : &lt;code&gt;for&lt;/code&gt; 루프 에서 반복자 사용</target>
        </trans-unit>
        <trans-unit id="c79b5eddb38c77dbd707c89f54888b0bdeada307" translate="yes" xml:space="preserve">
          <source>Listing 13-15: Calling the &lt;code&gt;next&lt;/code&gt; method on an iterator</source>
          <target state="translated">Listing 13-15 : 이터레이터 에서 &lt;code&gt;next&lt;/code&gt; 메소드 호출</target>
        </trans-unit>
        <trans-unit id="125af72ce93e94ec340894f82d46ac99edb00c53" translate="yes" xml:space="preserve">
          <source>Listing 13-16: Calling the &lt;code&gt;sum&lt;/code&gt; method to get the total of all items in the iterator</source>
          <target state="translated">코드 13-16 : &lt;code&gt;sum&lt;/code&gt; 메소드를 호출 하여 이터레이터에있는 모든 항목의 총계 가져 오기</target>
        </trans-unit>
        <trans-unit id="16d39d11b76de673f004e0cb84eeebbc76c1a985" translate="yes" xml:space="preserve">
          <source>Listing 13-17 shows an example of calling the iterator adaptor method &lt;code&gt;map&lt;/code&gt;, which takes a closure to call on each item to produce a new iterator. The closure here creates a new iterator in which each item from the vector has been incremented by 1. However, this code produces a warning:</source>
          <target state="translated">Listing 13-17은 반복자 어댑터 메소드 &lt;code&gt;map&lt;/code&gt; 을 호출하는 예제를 보여 주며 , 새 반복자를 생성하기 위해 각 항목을 호출하는 클로저가 필요하다. 여기서 클로저는 벡터의 각 항목이 1 씩 증가하는 새 반복자를 만듭니다. 그러나이 코드는 경고를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="74e4c24dcd4bb7010313a46b632eb7e3e0bcbf8a" translate="yes" xml:space="preserve">
          <source>Listing 13-17: Calling the iterator adaptor &lt;code&gt;map&lt;/code&gt; to create a new iterator</source>
          <target state="translated">Listing 13-17 : 반복자 어댑터 &lt;code&gt;map&lt;/code&gt; 을 호출하여 새로운 반복자를 생성</target>
        </trans-unit>
        <trans-unit id="2be4e84f69b4adab1b4d170f1e30558330571e73" translate="yes" xml:space="preserve">
          <source>Listing 13-18: Calling the &lt;code&gt;map&lt;/code&gt; method to create a new iterator and then calling the &lt;code&gt;collect&lt;/code&gt; method to consume the new iterator and create a vector</source>
          <target state="translated">Listing 13-18 : 새로운 반복자를 생성하기 위해 &lt;code&gt;map&lt;/code&gt; 메소드를 호출 하고 새로운 반복자를 소비하고 벡터를 생성하기 &lt;code&gt;collect&lt;/code&gt; 메소드를 호출</target>
        </trans-unit>
        <trans-unit id="ba7997d2aa4a1fe2c0cb954b987afd20498ab3c9" translate="yes" xml:space="preserve">
          <source>Listing 13-19: Using the &lt;code&gt;filter&lt;/code&gt; method with a closure that captures &lt;code&gt;shoe_size&lt;/code&gt;</source>
          <target state="translated">Listing 13-19 : &lt;code&gt;shoe_size&lt;/code&gt; 를 캡처하는 클로저와 함께 &lt;code&gt;filter&lt;/code&gt; 메소드 사용</target>
        </trans-unit>
        <trans-unit id="dd6d62e95821a0b66750c36c66b400adfb911df1" translate="yes" xml:space="preserve">
          <source>Listing 13-1: A function to stand in for a hypothetical calculation that takes about 2 seconds to run</source>
          <target state="translated">Listing 13-1 : 실행하는데 약 2 초가 걸리는 가상 계산을위한 함수</target>
        </trans-unit>
        <trans-unit id="7fb1602dc439c9b7bbc58a83ab300ac5d803f979" translate="yes" xml:space="preserve">
          <source>Listing 13-20 has the definition of the &lt;code&gt;Counter&lt;/code&gt; struct and an associated &lt;code&gt;new&lt;/code&gt; function to create instances of &lt;code&gt;Counter&lt;/code&gt;:</source>
          <target state="translated">의 정의 13 ~ 20있다 목록 &lt;code&gt;Counter&lt;/code&gt; 구조체와 관련된 &lt;code&gt;new&lt;/code&gt; 인스턴스를 생성하는 기능 &lt;code&gt;Counter&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8181813f6c8a4c159df9ec9e8f1a995891d7d2ee" translate="yes" xml:space="preserve">
          <source>Listing 13-20: Defining the &lt;code&gt;Counter&lt;/code&gt; struct and a &lt;code&gt;new&lt;/code&gt; function that creates instances of &lt;code&gt;Counter&lt;/code&gt; with an initial value of 0 for &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">Listing 13-20 : &lt;code&gt;Counter&lt;/code&gt; 구조체 정의 및 &lt;code&gt;count&lt;/code&gt; 에 대해 초기 값이 0 인 &lt;code&gt;Counter&lt;/code&gt; 인스턴스를 생성 하는 &lt;code&gt;new&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="6233753eb41dfa24a3ddaa88cba60601ad3de5a5" translate="yes" xml:space="preserve">
          <source>Listing 13-21: Implementing the &lt;code&gt;Iterator&lt;/code&gt; trait on our &lt;code&gt;Counter&lt;/code&gt; struct</source>
          <target state="translated">Listing 13-21 : &lt;code&gt;Counter&lt;/code&gt; 구조체 에서 &lt;code&gt;Iterator&lt;/code&gt; 특성 구현</target>
        </trans-unit>
        <trans-unit id="2b2a8e3fb2d3e085dd30354800fa389304957721" translate="yes" xml:space="preserve">
          <source>Listing 13-22: Testing the functionality of the &lt;code&gt;next&lt;/code&gt; method implementation</source>
          <target state="translated">Listing 13-22 : &lt;code&gt;next&lt;/code&gt; 메소드 구현 의 기능 테스트</target>
        </trans-unit>
        <trans-unit id="da3fc01280d52625be3ca08e26ae2fa24dfde1fe" translate="yes" xml:space="preserve">
          <source>Listing 13-23: Using a variety of &lt;code&gt;Iterator&lt;/code&gt; trait methods on our &lt;code&gt;Counter&lt;/code&gt; iterator</source>
          <target state="translated">Listing 13-23 : &lt;code&gt;Counter&lt;/code&gt; 반복자 에서 다양한 &lt;code&gt;Iterator&lt;/code&gt; 특성 메소드 사용</target>
        </trans-unit>
        <trans-unit id="5e663b49266d8969f34b8c945a8b5c23f1c23005" translate="yes" xml:space="preserve">
          <source>Listing 13-24: Reproduction of the &lt;code&gt;Config::new&lt;/code&gt; function from Listing 12-23</source>
          <target state="translated">Listing 13-24 : &lt;code&gt;Config::new&lt;/code&gt; 재생산 Listing 12-23에서 함수</target>
        </trans-unit>
        <trans-unit id="d1c0cbe18c08917bd508572befe258731e8d0c73" translate="yes" xml:space="preserve">
          <source>Listing 13-25: Passing the return value of &lt;code&gt;env::args&lt;/code&gt; to &lt;code&gt;Config::new&lt;/code&gt;</source>
          <target state="translated">Listing 13-25 : &lt;code&gt;env::args&lt;/code&gt; 의 리턴 값 을 &lt;code&gt;Config::new&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3f8ec648e823023a760a73b1ae768971e60ce99" translate="yes" xml:space="preserve">
          <source>Listing 13-26: Updating the signature of &lt;code&gt;Config::new&lt;/code&gt; to expect an iterator</source>
          <target state="translated">Listing 13-26 : 반복자를 기대하기 위해 &lt;code&gt;Config::new&lt;/code&gt; 의 서명 업데이트</target>
        </trans-unit>
        <trans-unit id="479c71589c0890fd86b9106201066824aafbb7e8" translate="yes" xml:space="preserve">
          <source>Listing 13-27: Changing the body of &lt;code&gt;Config::new&lt;/code&gt; to use iterator methods</source>
          <target state="translated">Listing 13-27 : 반복자 메소드를 사용하도록 &lt;code&gt;Config::new&lt;/code&gt; 본문 변경</target>
        </trans-unit>
        <trans-unit id="5f663f3002d51332d0f316ca52efc1a5298e65ad" translate="yes" xml:space="preserve">
          <source>Listing 13-28: The implementation of the &lt;code&gt;search&lt;/code&gt; function from Listing 12-19</source>
          <target state="translated">Listing 13-28 : Listing 12-19 의 &lt;code&gt;search&lt;/code&gt; 기능 구현</target>
        </trans-unit>
        <trans-unit id="00809d8c531a58edc4a71d30c95dce8274ef6558" translate="yes" xml:space="preserve">
          <source>Listing 13-29: Using iterator adaptor methods in the implementation of the &lt;code&gt;search&lt;/code&gt; function</source>
          <target state="translated">Listing 13-29 : &lt;code&gt;search&lt;/code&gt; 함수 구현에서 반복자 어댑터 메소드 사용</target>
        </trans-unit>
        <trans-unit id="8eec05356035a6ca1daa8a69ca4ecc3b566296ba" translate="yes" xml:space="preserve">
          <source>Listing 13-2: A &lt;code&gt;main&lt;/code&gt; function with hardcoded values to simulate user input and random number generation</source>
          <target state="translated">Listing 13-2 : 사용자 입력 및 난수 생성을 시뮬레이션하기 위해 하드 코딩 된 값을 가진 &lt;code&gt;main&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="f83b6300bc14114e05e03cb1f9f9626d016c53af" translate="yes" xml:space="preserve">
          <source>Listing 13-3: The business logic that prints the workout plans based on the inputs and calls to the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function</source>
          <target state="translated">Listing 13-3 : 입력을 기반으로 운동 계획을 인쇄하고 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 함수를 호출하는 비즈니스 로직</target>
        </trans-unit>
        <trans-unit id="2edbf03045ec8c5f834002ca00be94b30e0aa87a" translate="yes" xml:space="preserve">
          <source>Listing 13-4: Extracting the calls to &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; to one place and storing the result in the &lt;code&gt;expensive_result&lt;/code&gt; variable</source>
          <target state="translated">Listing 13-4 : &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 에 대한 호출을 한 곳으로 추출 하고 결과를 &lt;code&gt;expensive_result&lt;/code&gt; 변수 에 저장</target>
        </trans-unit>
        <trans-unit id="a86253d9b369eae803d9058251bc99d23da0889b" translate="yes" xml:space="preserve">
          <source>Listing 13-5: Defining a closure and storing it in the &lt;code&gt;expensive_closure&lt;/code&gt; variable</source>
          <target state="translated">Listing 13-5 : 클로저 정의 및 그것을 &lt;code&gt;expensive_closure&lt;/code&gt; _ 클로저 변수에 저장</target>
        </trans-unit>
        <trans-unit id="d8c320c43d8902d778cae87e5afeb403eb8a266d" translate="yes" xml:space="preserve">
          <source>Listing 13-6: Calling the &lt;code&gt;expensive_closure&lt;/code&gt; we&amp;rsquo;ve defined</source>
          <target state="translated">Listing 13-6 : 우리가 정의한 &lt;code&gt;expensive_closure&lt;/code&gt; 호출</target>
        </trans-unit>
        <trans-unit id="21017b48d3e58c3173aef6dbf1c0a3327de3b5dc" translate="yes" xml:space="preserve">
          <source>Listing 13-7: Adding optional type annotations of the parameter and return value types in the closure</source>
          <target state="translated">Listing 13-7 : 클로저에 매개 변수 및 리턴 값 유형의 선택적 유형 주석 추가</target>
        </trans-unit>
        <trans-unit id="1d8fb36f3f80735be807df8d78ab69e660e1c09c" translate="yes" xml:space="preserve">
          <source>Listing 13-8: Attempting to call a closure whose types are inferred with two different types</source>
          <target state="translated">코드 13-8 : 두 가지 유형으로 유추 된 유형의 클로저 호출 시도</target>
        </trans-unit>
        <trans-unit id="02ff816302e38ee65fb0d068c9401b4880f61139" translate="yes" xml:space="preserve">
          <source>Listing 13-9 shows the definition of the &lt;code&gt;Cacher&lt;/code&gt; struct that holds a closure and an optional result value.</source>
          <target state="translated">Listing 13-9는 클로저와 선택적 결과 값을 보유한 &lt;code&gt;Cacher&lt;/code&gt; 구조체 의 정의를 보여준다 .</target>
        </trans-unit>
        <trans-unit id="48023ada352043377af19dc5e8d175de8b277881" translate="yes" xml:space="preserve">
          <source>Listing 13-9: Defining a &lt;code&gt;Cacher&lt;/code&gt; struct that holds a closure in &lt;code&gt;calculation&lt;/code&gt; and an optional result in &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">Listing 13-9 : &lt;code&gt;calculation&lt;/code&gt; 에서 클로저를 보유하고 선택적인 &lt;code&gt;value&lt;/code&gt; 갖는 &lt;code&gt;Cacher&lt;/code&gt; 구조체 정의</target>
        </trans-unit>
        <trans-unit id="b3710bfc4e4b00a06976126eb583e8b02c16a616" translate="yes" xml:space="preserve">
          <source>Listing 14-1: A documentation comment for a function</source>
          <target state="translated">Listing 14-1 : 함수에 대한 문서 주석</target>
        </trans-unit>
        <trans-unit id="5c31ed7521a1ab0cc7ad26027c51931cae668d2d" translate="yes" xml:space="preserve">
          <source>Listing 14-2: Documentation for the &lt;code&gt;my_crate&lt;/code&gt; crate as a whole</source>
          <target state="translated">Listing 14-2 : &lt;code&gt;my_crate&lt;/code&gt; 상자 전체에 대한 문서</target>
        </trans-unit>
        <trans-unit id="08cd4d7276034ce4fb54ef404f77f04a4bf925e3" translate="yes" xml:space="preserve">
          <source>Listing 14-3: An &lt;code&gt;art&lt;/code&gt; library with items organized into &lt;code&gt;kinds&lt;/code&gt; and &lt;code&gt;utils&lt;/code&gt; modules</source>
          <target state="translated">Listing 14-3 : &lt;code&gt;kinds&lt;/code&gt; 와 &lt;code&gt;utils&lt;/code&gt; 모듈 로 구성된 아이템이 있는 &lt;code&gt;art&lt;/code&gt; 라이브러리</target>
        </trans-unit>
        <trans-unit id="18652571126ad8386cecac32ff97a3b38f9bc500" translate="yes" xml:space="preserve">
          <source>Listing 14-4: A crate using the &lt;code&gt;art&lt;/code&gt; crate&amp;rsquo;s items with its internal structure exported</source>
          <target state="translated">목록 14-4 : 내부 구조를 내 보낸 &lt;code&gt;art&lt;/code&gt; 상자 항목을 사용하는 상자</target>
        </trans-unit>
        <trans-unit id="6a570b6b6186a46bce3ac4aacbabe088d013d0f3" translate="yes" xml:space="preserve">
          <source>Listing 14-5: Adding &lt;code&gt;pub use&lt;/code&gt; statements to re-export items</source>
          <target state="translated">Listing 14-5 : &lt;code&gt;pub use&lt;/code&gt; 문을 추가 하여 아이템을 다시 내보내기</target>
        </trans-unit>
        <trans-unit id="d6312f93c5be154192161b883eed38925109f013" translate="yes" xml:space="preserve">
          <source>Listing 14-6: A program using the re-exported items from the &lt;code&gt;art&lt;/code&gt; crate</source>
          <target state="translated">리스팅 14-6 : &lt;code&gt;art&lt;/code&gt; 크레이트 에서 재수출 된 아이템을 사용하는 프로그램</target>
        </trans-unit>
        <trans-unit id="0fb0cc53aeca164991b29eb0d8ab6b1af71d3326" translate="yes" xml:space="preserve">
          <source>Listing 14-7: Using the &lt;code&gt;add-one&lt;/code&gt; library crate from the &lt;code&gt;adder&lt;/code&gt; crate</source>
          <target state="translated">코드 14-7 : &lt;code&gt;adder&lt;/code&gt; 상자 에서 &lt;code&gt;add-one&lt;/code&gt; 라이브러리 상자 사용</target>
        </trans-unit>
        <trans-unit id="d17fa866aef39e9d7d0c17f7358038f314c318c1" translate="yes" xml:space="preserve">
          <source>Listing 15-1 shows how to use a box to store an &lt;code&gt;i32&lt;/code&gt; value on the heap:</source>
          <target state="translated">Listing 15-1은 상자를 사용 하여 힙에 &lt;code&gt;i32&lt;/code&gt; 값 을 저장하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0d4242924fb6c785f162a09bc5d2fe1ca847e116" translate="yes" xml:space="preserve">
          <source>Listing 15-10: Implementing &lt;code&gt;Deref&lt;/code&gt; on &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">리스팅 15-10 : &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 에 &lt;code&gt;Deref&lt;/code&gt; 구현하기</target>
        </trans-unit>
        <trans-unit id="1a37d11ccc3798c8adeb9d5bd2484dc552c633d9" translate="yes" xml:space="preserve">
          <source>Listing 15-11: A &lt;code&gt;hello&lt;/code&gt; function that has the parameter &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;&amp;amp;str&lt;/code&gt;</source>
          <target state="translated">코드 15-11 : &lt;code&gt;&amp;amp;str&lt;/code&gt; 유형 의 매개 변수 &lt;code&gt;name&lt;/code&gt; 을 가진 &lt;code&gt;hello&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="5568aa245c3ca44a1e76ee65f95d3578696c3468" translate="yes" xml:space="preserve">
          <source>Listing 15-12: Calling &lt;code&gt;hello&lt;/code&gt; with a reference to a &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; value, which works because of deref coercion</source>
          <target state="translated">Listing 15-12 : &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; 값에 대한 참조로 &lt;code&gt;hello&lt;/code&gt; 호출 하기</target>
        </trans-unit>
        <trans-unit id="6c024965fb7532f846db55d2fce103e6ef71bc94" translate="yes" xml:space="preserve">
          <source>Listing 15-13: The code we would have to write if Rust didn&amp;rsquo;t have deref coercion</source>
          <target state="translated">Listing 15-13 : Rust가 역 참조를하지 않으면 작성해야 할 코드</target>
        </trans-unit>
        <trans-unit id="adff6d0cc3f4fa1a4ed3e66ddcf814db60a02d4f" translate="yes" xml:space="preserve">
          <source>Listing 15-14 shows a &lt;code&gt;CustomSmartPointer&lt;/code&gt; struct whose only custom functionality is that it will print &lt;code&gt;Dropping CustomSmartPointer!&lt;/code&gt; when the instance goes out of scope. This example demonstrates when Rust runs the &lt;code&gt;drop&lt;/code&gt; function.</source>
          <target state="translated">15-14 쇼 목록 &lt;code&gt;CustomSmartPointer&lt;/code&gt; 의 그의 유일한 사용자 정의 기능은 인쇄 것입니다 구조체 &lt;code&gt;Dropping CustomSmartPointer!&lt;/code&gt; 인스턴스가 범위를 벗어난 경우 이 예제는 Rust가 &lt;code&gt;drop&lt;/code&gt; 함수를 실행할 때를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="52d47c448cdc64e5a91e1c4aca16ea47ef0beae3" translate="yes" xml:space="preserve">
          <source>Listing 15-14: A &lt;code&gt;CustomSmartPointer&lt;/code&gt; struct that implements the &lt;code&gt;Drop&lt;/code&gt; trait where we would put our cleanup code</source>
          <target state="translated">Listing 15-14 : 정리 코드를 넣을 &lt;code&gt;Drop&lt;/code&gt; 특성 을 구현 하는 &lt;code&gt;CustomSmartPointer&lt;/code&gt; 구조체</target>
        </trans-unit>
        <trans-unit id="ec4aa44fb09e06c7ceb13b695dde967f5f1ef075" translate="yes" xml:space="preserve">
          <source>Listing 15-15: Attempting to call the &lt;code&gt;drop&lt;/code&gt; method from the &lt;code&gt;Drop&lt;/code&gt; trait manually to clean up early</source>
          <target state="translated">Listing 15-15 : &lt;code&gt;Drop&lt;/code&gt; 특성 에서 &lt;code&gt;drop&lt;/code&gt; 메소드를 수동으로 호출하여 조기 정리</target>
        </trans-unit>
        <trans-unit id="2f40ac96f3ccd291a6c6fe1c9540aec6b3f9c290" translate="yes" xml:space="preserve">
          <source>Listing 15-16: Calling &lt;code&gt;std::mem::drop&lt;/code&gt; to explicitly drop a value before it goes out of scope</source>
          <target state="translated">코드 15-16 : &lt;code&gt;std::mem::drop&lt;/code&gt; 을 호출 하여 값이 범위를 벗어나기 전에 명시 적으로 삭제</target>
        </trans-unit>
        <trans-unit id="5329453e171ad9ee51b2ac0e7343fd6536e1d7d4" translate="yes" xml:space="preserve">
          <source>Listing 15-17: Demonstrating we&amp;rsquo;re not allowed to have two lists using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; that try to share ownership of a third list</source>
          <target state="translated">Listing 15-17 : &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용하여 세 번째 목록의 소유권을 공유하려는 두 개의 목록을 가질 수 없음을 시연</target>
        </trans-unit>
        <trans-unit id="c433ad64df45e2defd53333d59e3199258515577" translate="yes" xml:space="preserve">
          <source>Listing 15-18: A definition of &lt;code&gt;List&lt;/code&gt; that uses &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 15-18 : &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용 하는 &lt;code&gt;List&lt;/code&gt; 의 정의</target>
        </trans-unit>
        <trans-unit id="d261e75633f42f6dc65090559e1101742762de87" translate="yes" xml:space="preserve">
          <source>Listing 15-19: Printing the reference count</source>
          <target state="translated">리스팅 15-19 : 참조 카운트 인쇄</target>
        </trans-unit>
        <trans-unit id="93277309dd71d80340ae8cdbc4d8dcde0239642c" translate="yes" xml:space="preserve">
          <source>Listing 15-1: Storing an &lt;code&gt;i32&lt;/code&gt; value on the heap using a box</source>
          <target state="translated">Listing 15-1 : 상자를 사용하여 힙에 &lt;code&gt;i32&lt;/code&gt; 값 저장</target>
        </trans-unit>
        <trans-unit id="97eb3e5299e49169210e147956f4d2e6505373a4" translate="yes" xml:space="preserve">
          <source>Listing 15-2 contains an enum definition for a cons list. Note that this code won&amp;rsquo;t compile yet because the &lt;code&gt;List&lt;/code&gt; type doesn&amp;rsquo;t have a known size, which we&amp;rsquo;ll demonstrate.</source>
          <target state="translated">Listing 15-2에는 단점 목록에 대한 열거 형 정의가 포함되어 있습니다. &lt;code&gt;List&lt;/code&gt; 유형의 크기가 알려지지 않았으므로이 코드는 아직 컴파일 되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eb67b3e6a05499f9fa0c058da14b25fa79ce9ca2" translate="yes" xml:space="preserve">
          <source>Listing 15-20: A library to keep track of how close a value is to a maximum value and warn when the value is at certain levels</source>
          <target state="translated">코드 15-20 : 값이 최대 값에 얼마나 가까운 지 추적하고 값이 특정 레벨에있을 때 경고하는 라이브러리</target>
        </trans-unit>
        <trans-unit id="141fe822d1303f26d8ebe1f7c46b8da90b350088" translate="yes" xml:space="preserve">
          <source>Listing 15-21: An attempt to implement a &lt;code&gt;MockMessenger&lt;/code&gt; that isn&amp;rsquo;t allowed by the borrow checker</source>
          <target state="translated">Listing 15-21 : 빌리 체커가 허용하지 않는 &lt;code&gt;MockMessenger&lt;/code&gt; 를 구현하려는 시도</target>
        </trans-unit>
        <trans-unit id="dfe14058820e9ed9b4226d26f07c498f5696cf00" translate="yes" xml:space="preserve">
          <source>Listing 15-22: Using &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; to mutate an inner value while the outer value is considered immutable</source>
          <target state="translated">Listing 15-22 : &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용 하여 내부 값을 변경하고 외부 값은 변경 불가능한 것으로 간주</target>
        </trans-unit>
        <trans-unit id="266fca035b941bba83ca32885d5d4117eab995c6" translate="yes" xml:space="preserve">
          <source>Listing 15-23: Creating two mutable references in the same scope to see that &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; will panic</source>
          <target state="translated">Listing 15-23 : &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 이 패닉 상태 가 되도록 동일한 범위에서 두 개의 가변 참조 생성</target>
        </trans-unit>
        <trans-unit id="d6cf153a700dd2365ffdecaf10f183c9db90ffbd" translate="yes" xml:space="preserve">
          <source>Listing 15-24: Using &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; to create a &lt;code&gt;List&lt;/code&gt; that we can mutate</source>
          <target state="translated">Listing 15-24 : &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; 를 사용하여 변경 가능한 &lt;code&gt;List&lt;/code&gt; 생성</target>
        </trans-unit>
        <trans-unit id="6af6872cc0a942bf5139e47e216845b27497ede4" translate="yes" xml:space="preserve">
          <source>Listing 15-25: A cons list definition that holds a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; so we can modify what a &lt;code&gt;Cons&lt;/code&gt; variant is referring to</source>
          <target state="translated">Listing 15-25 : &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 하는 &lt;code&gt;Cons&lt;/code&gt; 목록 정의 로 Cons 변형이 참조하는 것을 수정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="3a094be147b7c64eca30f8e42d1612142f388e50" translate="yes" xml:space="preserve">
          <source>Listing 15-26: Creating a reference cycle of two &lt;code&gt;List&lt;/code&gt; values pointing to each other</source>
          <target state="translated">Listing 15-26 : 서로를 가리키는 두 &lt;code&gt;List&lt;/code&gt; 값 의 참조주기 생성</target>
        </trans-unit>
        <trans-unit id="2b292b9e3cc1d351a84971007501fea9cfdf3e8b" translate="yes" xml:space="preserve">
          <source>Listing 15-27: Creating a &lt;code&gt;leaf&lt;/code&gt; node with no children and a &lt;code&gt;branch&lt;/code&gt; node with &lt;code&gt;leaf&lt;/code&gt; as one of its children</source>
          <target state="translated">15-27 리스팅하십시오 만들기 &lt;code&gt;leaf&lt;/code&gt; 자녀가없는 노드와 &lt;code&gt;branch&lt;/code&gt; 와 노드 &lt;code&gt;leaf&lt;/code&gt; 의 아이 중 하나를</target>
        </trans-unit>
        <trans-unit id="4850f36c959e35928aff734682b70b668ef71d6d" translate="yes" xml:space="preserve">
          <source>Listing 15-28: A &lt;code&gt;leaf&lt;/code&gt; node with a weak reference to its parent node &lt;code&gt;branch&lt;/code&gt;</source>
          <target state="translated">Listing 15-28 : 상위 노드 &lt;code&gt;branch&lt;/code&gt; 대한 참조가 약한 &lt;code&gt;leaf&lt;/code&gt; 노드</target>
        </trans-unit>
        <trans-unit id="25aad53c5c945f94794c65dc3226cacbda5a3baf" translate="yes" xml:space="preserve">
          <source>Listing 15-29: Creating &lt;code&gt;branch&lt;/code&gt; in an inner scope and examining strong and weak reference counts</source>
          <target state="translated">Listing 15-29 : 내부 범위에서 &lt;code&gt;branch&lt;/code&gt; 를 생성 하고 강력하고 약한 참조 카운트 검사</target>
        </trans-unit>
        <trans-unit id="c6497eba51055bb620a815c36e345353e4a2ed22" translate="yes" xml:space="preserve">
          <source>Listing 15-2: The first attempt at defining an enum to represent a cons list data structure of &lt;code&gt;i32&lt;/code&gt; values</source>
          <target state="translated">Listing 15-2 : &lt;code&gt;i32&lt;/code&gt; 값 의 cons 목록 데이터 구조를 나타 내기 위해 열거를 정의하려는 첫 번째 시도</target>
        </trans-unit>
        <trans-unit id="18a28eccb4368989461114ac735559ffeda1ae5d" translate="yes" xml:space="preserve">
          <source>Listing 15-3: Using the &lt;code&gt;List&lt;/code&gt; enum to store the list &lt;code&gt;1, 2, 3&lt;/code&gt;</source>
          <target state="translated">Listing 15-3 : &lt;code&gt;List&lt;/code&gt; 열거 형을 사용하여 목록 &lt;code&gt;1, 2, 3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8c9e2eacb25fd51c5f9aa6cab37ed11e4904210" translate="yes" xml:space="preserve">
          <source>Listing 15-4: The error we get when attempting to define a recursive enum</source>
          <target state="translated">Listing 15-4 : 재귀 열거 형을 정의 할 때 발생하는 오류</target>
        </trans-unit>
        <trans-unit id="9b95eec03025f86a4b7c65652e8650c21c75dcf1" translate="yes" xml:space="preserve">
          <source>Listing 15-5: Definition of &lt;code&gt;List&lt;/code&gt; that uses &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; in order to have a known size</source>
          <target state="translated">Listing 15-5 : 알려진 크기를 얻기 위해 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용 하는 &lt;code&gt;List&lt;/code&gt; 의 정의</target>
        </trans-unit>
        <trans-unit id="db518804f21a5ed0346fef393226cf0ad66acbbb" translate="yes" xml:space="preserve">
          <source>Listing 15-6: Using the dereference operator to follow a reference to an &lt;code&gt;i32&lt;/code&gt; value</source>
          <target state="translated">Listing 15-6 : 역 참조 연산자를 사용하여 &lt;code&gt;i32&lt;/code&gt; 값에 대한 참조 수행</target>
        </trans-unit>
        <trans-unit id="8c02623422daee0586c70cf6a359e0861d9f1b06" translate="yes" xml:space="preserve">
          <source>Listing 15-7: Using the dereference operator on a &lt;code&gt;Box&amp;lt;i32&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 15-7 : &lt;code&gt;Box&amp;lt;i32&amp;gt;&lt;/code&gt; 에서 역 참조 연산자 사용</target>
        </trans-unit>
        <trans-unit id="fa36d540c04da6649b5d6b1c22bcef700a30ebdf" translate="yes" xml:space="preserve">
          <source>Listing 15-8: Defining a &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type</source>
          <target state="translated">Listing 15-8 : &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 타입 정의</target>
        </trans-unit>
        <trans-unit id="d36831d626698b1a2a5afad342468e8d5abc296e" translate="yes" xml:space="preserve">
          <source>Listing 15-9: Attempting to use &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; in the same way we used references and &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 15-9 : 레퍼런스와 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 사용한 것과 같은 방식으로 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용하려고 시도</target>
        </trans-unit>
        <trans-unit id="d143c5026e771bdcccc60743806891ca08f66e55" translate="yes" xml:space="preserve">
          <source>Listing 16-10: Sending multiple messages and pausing between each</source>
          <target state="translated">Listing 16-10 : 여러 메시지 보내기와 각 메시지 사이에 일시 중지</target>
        </trans-unit>
        <trans-unit id="3eef54e3734b51cf6e6ecfea094438d79e4e019b" translate="yes" xml:space="preserve">
          <source>Listing 16-11: Sending multiple messages from multiple producers</source>
          <target state="translated">Listing 16-11 : 여러 제작자로부터 여러 메시지 보내기</target>
        </trans-unit>
        <trans-unit id="19b196c633c201dfd93feaef8a0419886e1e93ac" translate="yes" xml:space="preserve">
          <source>Listing 16-12: Exploring the API of &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; in a single-threaded context for simplicity</source>
          <target state="translated">Listing 16-12 : 단순성을 위해 단일 스레드 컨텍스트에서 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 의 API 탐색</target>
        </trans-unit>
        <trans-unit id="d56dbf3e369ad2af3540bb140a7f2f160cce5bd9" translate="yes" xml:space="preserve">
          <source>Listing 16-13: Ten threads each increment a counter guarded by a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 16-13 : 각각 10 개의 스레드가 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 의해 보호되는 카운터를 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="e59ce5d5fc1d8f6572bb99a6381037738df73f26" translate="yes" xml:space="preserve">
          <source>Listing 16-14: Attempting to use &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; to allow multiple threads to own the &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 16-14 : &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용하여 여러 스레드가 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 를 소유 하려고 시도</target>
        </trans-unit>
        <trans-unit id="9e895f072015f06fead0b93e19086e73b96613c3" translate="yes" xml:space="preserve">
          <source>Listing 16-15: Using an &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; to wrap the &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; to be able to share ownership across multiple threads</source>
          <target state="translated">Listing 16-15 : &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용 하여 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 를 감싸서 여러 스레드에서 소유권을 공유 할 수 있음</target>
        </trans-unit>
        <trans-unit id="57b4aee93626458741b433d91d9361d5dad177bd" translate="yes" xml:space="preserve">
          <source>Listing 16-1: Creating a new thread to print one thing while the main thread prints something else</source>
          <target state="translated">Listing 16-1 : 메인 스레드가 다른 것을 인쇄하는 동안 하나를 인쇄하기 위해 새 스레드 작성</target>
        </trans-unit>
        <trans-unit id="12b5c01907f295f047c10aa39f8c1176ebcbef5e" translate="yes" xml:space="preserve">
          <source>Listing 16-2: Saving a &lt;code&gt;JoinHandle&lt;/code&gt; from &lt;code&gt;thread::spawn&lt;/code&gt; to guarantee the thread is run to completion</source>
          <target state="translated">Listing 16-2 : 스레드가 완료 될 때 까지 &lt;code&gt;thread::spawn&lt;/code&gt; 에서 &lt;code&gt;JoinHandle&lt;/code&gt; 저장</target>
        </trans-unit>
        <trans-unit id="0e4bc84471eecfbbd51f5d5fcb65303d39e0056a" translate="yes" xml:space="preserve">
          <source>Listing 16-3: Attempting to use a vector created by the main thread in another thread</source>
          <target state="translated">Listing 16-3 : 다른 스레드에서 메인 스레드에 의해 생성 된 벡터를 사용하려고 시도</target>
        </trans-unit>
        <trans-unit id="3f4840d59493ebbe6c316eb6dc48412a423666ec" translate="yes" xml:space="preserve">
          <source>Listing 16-4 provides a scenario that&amp;rsquo;s more likely to have a reference to &lt;code&gt;v&lt;/code&gt; that won&amp;rsquo;t be valid:</source>
          <target state="translated">리스팅 16-4는 유효하지 않은 &lt;code&gt;v&lt;/code&gt; 에 대한 참조를 가질 가능성이 높은 시나리오를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="2f52a1d931528f94a1108b3ee0c94c630b939635" translate="yes" xml:space="preserve">
          <source>Listing 16-4: A thread with a closure that attempts to capture a reference to &lt;code&gt;v&lt;/code&gt; from a main thread that drops &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">16-4 목록 : 스레드를 폐쇄로하는 시도에 대한 참조를 캡처하는 것을 &lt;code&gt;v&lt;/code&gt; 떨어 메인 스레드에서 &lt;code&gt;v&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68f36abd65cb9617fabc96bec1214eb384c2e559" translate="yes" xml:space="preserve">
          <source>Listing 16-5: Using the &lt;code&gt;move&lt;/code&gt; keyword to force a closure to take ownership of the values it uses</source>
          <target state="translated">Listing 16-5 : &lt;code&gt;move&lt;/code&gt; 키워드를 사용하여 클로저가 사용하는 값의 소유권을 갖도록 강제</target>
        </trans-unit>
        <trans-unit id="65c3c68257b787d358e1d7e814f67e1c00947c24" translate="yes" xml:space="preserve">
          <source>Listing 16-6: Creating a channel and assigning the two halves to &lt;code&gt;tx&lt;/code&gt; and &lt;code&gt;rx&lt;/code&gt;</source>
          <target state="translated">Listing 16-6 : 채널을 만들고 두 반쪽을 &lt;code&gt;tx&lt;/code&gt; 와 &lt;code&gt;rx&lt;/code&gt; 에 할당</target>
        </trans-unit>
        <trans-unit id="b1b5995d0b3553dd50483e1b1dd727985f856aa6" translate="yes" xml:space="preserve">
          <source>Listing 16-7: Moving &lt;code&gt;tx&lt;/code&gt; to a spawned thread and sending &amp;ldquo;hi&amp;rdquo;</source>
          <target state="translated">Listing 16-7 : &lt;code&gt;tx&lt;/code&gt; 를 생성 된 스레드로 옮기고 &quot;hi&quot;</target>
        </trans-unit>
        <trans-unit id="1c6ea482518596009c65da1decd55a62b5a09488" translate="yes" xml:space="preserve">
          <source>Listing 16-8: Receiving the value &amp;ldquo;hi&amp;rdquo; in the main thread and printing it</source>
          <target state="translated">Listing 16-8 : 메인 스레드에서&amp;ldquo;hi&amp;rdquo;값을 받아서 출력</target>
        </trans-unit>
        <trans-unit id="1321b4024ee76a7d19ba0581eab40c25717ed32c" translate="yes" xml:space="preserve">
          <source>Listing 16-9: Attempting to use &lt;code&gt;val&lt;/code&gt; after we&amp;rsquo;ve sent it down the channel</source>
          <target state="translated">Listing 16-9 : &lt;code&gt;val&lt;/code&gt; 을 채널로 보낸 후 val 을 사용하려고 시도</target>
        </trans-unit>
        <trans-unit id="9f53b0bfbe1f71798882606e57ac86baae11de72" translate="yes" xml:space="preserve">
          <source>Listing 17-10: Attempting to use a type that doesn&amp;rsquo;t implement the trait object&amp;rsquo;s trait</source>
          <target state="translated">Listing 17-10 : 특성 객체의 특성을 구현하지 않는 유형을 사용하려고 시도</target>
        </trans-unit>
        <trans-unit id="616b6032949e86e604e03baeb242990f1a755bad" translate="yes" xml:space="preserve">
          <source>Listing 17-11 showed that we want to be able to call a method named &lt;code&gt;add_text&lt;/code&gt; and pass it a &lt;code&gt;&amp;amp;str&lt;/code&gt; that is then added to the text content of the blog post. We implement this as a method rather than exposing the &lt;code&gt;content&lt;/code&gt; field as &lt;code&gt;pub&lt;/code&gt;. This means we can implement a method later that will control how the &lt;code&gt;content&lt;/code&gt; field&amp;rsquo;s data is read. The &lt;code&gt;add_text&lt;/code&gt; method is pretty straightforward, so let&amp;rsquo;s add the implementation in Listing 17-13 to the &lt;code&gt;impl Post&lt;/code&gt; block:</source>
          <target state="translated">Listing 17-11에서는 &lt;code&gt;add_text&lt;/code&gt; 라는 메소드를 호출 하고 &lt;code&gt;&amp;amp;str&lt;/code&gt; 을 전달한 다음 블로그 게시물의 텍스트 컨텐츠에 추가 할 수 있음을 보여 주었다 . &lt;code&gt;content&lt;/code&gt; 필드를 &lt;code&gt;pub&lt;/code&gt; 로 노출시키지 않고 메소드로 구현합니다 . 즉, &lt;code&gt;content&lt;/code&gt; 필드의 데이터를 읽는 방법을 제어하는 ​​메소드를 나중에 구현할 수 있습니다 . &lt;code&gt;add_text&lt;/code&gt; 의 방법은 그래서이 리스팅을 17-13의 구현을 추가 할 수 있도록, 매우 간단 &lt;code&gt;impl Post&lt;/code&gt; 블록 :</target>
        </trans-unit>
        <trans-unit id="9146f8d1f83432c6766686b385badbf73153717d" translate="yes" xml:space="preserve">
          <source>Listing 17-11 shows this workflow in code form: this is an example usage of the API we&amp;rsquo;ll implement in a library crate named &lt;code&gt;blog&lt;/code&gt;. This won&amp;rsquo;t compile yet because we haven&amp;rsquo;t implemented the &lt;code&gt;blog&lt;/code&gt; crate yet.</source>
          <target state="translated">Listing 17-11은이 워크 플로우를 코드 형식으로 보여준다. 이것은 &lt;code&gt;blog&lt;/code&gt; 라는 라이브러리 상자에서 구현할 API 사용법의 예제이다 . &lt;code&gt;blog&lt;/code&gt; 상자를 아직 구현하지 않았기 때문에 아직 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e503a37b208823b1fe53cabe8334c7ca42c80dba" translate="yes" xml:space="preserve">
          <source>Listing 17-11: Code that demonstrates the desired behavior we want our &lt;code&gt;blog&lt;/code&gt; crate to have</source>
          <target state="translated">코드 17-11 : &lt;code&gt;blog&lt;/code&gt; 상자에 원하는 동작을 보여주는 코드</target>
        </trans-unit>
        <trans-unit id="f1620b3de9e638fc5e39afeef2145569e6847def" translate="yes" xml:space="preserve">
          <source>Listing 17-12: Definition of a &lt;code&gt;Post&lt;/code&gt; struct and a &lt;code&gt;new&lt;/code&gt; function that creates a new &lt;code&gt;Post&lt;/code&gt; instance, a &lt;code&gt;State&lt;/code&gt; trait, and a &lt;code&gt;Draft&lt;/code&gt; struct</source>
          <target state="translated">17-12 리스팅하십시오의 정의 &lt;code&gt;Post&lt;/code&gt; 구조체와 &lt;code&gt;new&lt;/code&gt; 새로운 생성 기능 &lt;code&gt;Post&lt;/code&gt; 예를하는 &lt;code&gt;State&lt;/code&gt; 특성을, 그리고 &lt;code&gt;Draft&lt;/code&gt; 구조체</target>
        </trans-unit>
        <trans-unit id="771eeb1af445ce7599b9b49829f583fe06060e94" translate="yes" xml:space="preserve">
          <source>Listing 17-13: Implementing the &lt;code&gt;add_text&lt;/code&gt; method to add text to a post&amp;rsquo;s &lt;code&gt;content&lt;/code&gt;</source>
          <target state="translated">Listing 17-13 : &lt;code&gt;add_text&lt;/code&gt; 메소드를 구현하여 게시물의 &lt;code&gt;content&lt;/code&gt; 텍스트 추가</target>
        </trans-unit>
        <trans-unit id="7247d1c523b6527219b67cc4b27e57c78e329f65" translate="yes" xml:space="preserve">
          <source>Listing 17-14: Adding a placeholder implementation for the &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; that always returns an empty string slice</source>
          <target state="translated">Listing 17-14 : 항상 빈 문자열 슬라이스를 리턴하는 &lt;code&gt;Post&lt;/code&gt; 의 &lt;code&gt;content&lt;/code&gt; 메소드에 대한 플레이스 홀더 구현 추가</target>
        </trans-unit>
        <trans-unit id="7e2baf957d0f7561fcdd554cf11ea8c05c575b7f" translate="yes" xml:space="preserve">
          <source>Listing 17-15: Implementing &lt;code&gt;request_review&lt;/code&gt; methods on &lt;code&gt;Post&lt;/code&gt; and the &lt;code&gt;State&lt;/code&gt; trait</source>
          <target state="translated">Listing 17-15 : &lt;code&gt;Post&lt;/code&gt; 및 &lt;code&gt;State&lt;/code&gt; 특성 에 &lt;code&gt;request_review&lt;/code&gt; 메소드 구현</target>
        </trans-unit>
        <trans-unit id="cdbb4624526d447f365d0c2c9d058213c72af6f1" translate="yes" xml:space="preserve">
          <source>Listing 17-16: Implementing the &lt;code&gt;approve&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; and the &lt;code&gt;State&lt;/code&gt; trait</source>
          <target state="translated">Listing 17-16 : &lt;code&gt;Post&lt;/code&gt; 및 &lt;code&gt;State&lt;/code&gt; 특성 에 대한 &lt;code&gt;approve&lt;/code&gt; 방법 구현</target>
        </trans-unit>
        <trans-unit id="7f4eb5c03e760160f8826b08a4d43cdb29409364" translate="yes" xml:space="preserve">
          <source>Listing 17-17: Updating the &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; to delegate to a &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;State&lt;/code&gt;</source>
          <target state="translated">Listing 17-17 : &lt;code&gt;Post&lt;/code&gt; 의 &lt;code&gt;content&lt;/code&gt; 메소드를 업데이트하여 &lt;code&gt;State&lt;/code&gt; 의 &lt;code&gt;content&lt;/code&gt; 메소드에 위임</target>
        </trans-unit>
        <trans-unit id="a326b346b73e4afdc2a1733c02f0e9fd20e8b7d5" translate="yes" xml:space="preserve">
          <source>Listing 17-18: Adding the &lt;code&gt;content&lt;/code&gt; method to the &lt;code&gt;State&lt;/code&gt; trait</source>
          <target state="translated">Listing 17-18 : &lt;code&gt;State&lt;/code&gt; 특성에 &lt;code&gt;content&lt;/code&gt; 메소드 추가</target>
        </trans-unit>
        <trans-unit id="a7b8a363eb5ab143105af7e7ab0e366d9e8e76c3" translate="yes" xml:space="preserve">
          <source>Listing 17-19: A &lt;code&gt;Post&lt;/code&gt; with a &lt;code&gt;content&lt;/code&gt; method and a &lt;code&gt;DraftPost&lt;/code&gt; without a &lt;code&gt;content&lt;/code&gt; method</source>
          <target state="translated">17 ~ 19 목록, &amp;bull; &lt;code&gt;Post&lt;/code&gt; A의 &lt;code&gt;content&lt;/code&gt; 방법 및 &lt;code&gt;DraftPost&lt;/code&gt; 없이 &lt;code&gt;content&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="20fae4c7b40d2fe79a0f2f5ecda0ff6fbf94e76b" translate="yes" xml:space="preserve">
          <source>Listing 17-1: An &lt;code&gt;AveragedCollection&lt;/code&gt; struct that maintains a list of integers and the average of the items in the collection</source>
          <target state="translated">Listing 17-1 : 정수 목록과 컬렉션의 항목 평균을 유지 하는 &lt;code&gt;AveragedCollection&lt;/code&gt; 구조체</target>
        </trans-unit>
        <trans-unit id="b1b1a0c2ff1d0c5537eceea61cc356e7c360c7f4" translate="yes" xml:space="preserve">
          <source>Listing 17-20: A &lt;code&gt;PendingReviewPost&lt;/code&gt; that gets created by calling &lt;code&gt;request_review&lt;/code&gt; on &lt;code&gt;DraftPost&lt;/code&gt; and an &lt;code&gt;approve&lt;/code&gt; method that turns a &lt;code&gt;PendingReviewPost&lt;/code&gt; into a published &lt;code&gt;Post&lt;/code&gt;</source>
          <target state="translated">Listing 17-20 : &lt;code&gt;DraftPost&lt;/code&gt; 에서 &lt;code&gt;request_review&lt;/code&gt; 를 호출하여 생성 된 &lt;code&gt;PendingReviewPost&lt;/code&gt; 및 &lt;code&gt;PendingReviewPost&lt;/code&gt; 를 게시 된 &lt;code&gt;Post&lt;/code&gt; 로 바꾸는 &lt;code&gt;approve&lt;/code&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="58dea3744e2c0be352925a0e7cd74ffdedb9028f" translate="yes" xml:space="preserve">
          <source>Listing 17-21: Modifications to &lt;code&gt;main&lt;/code&gt; to use the new implementation of the blog post workflow</source>
          <target state="translated">Listing 17-21 : &lt;code&gt;main&lt;/code&gt; 수정 블로그 포스트 워크 플로우의 새로운 구현을 사용</target>
        </trans-unit>
        <trans-unit id="834ba7425b4ceae322feab13f35479b714e61ef1" translate="yes" xml:space="preserve">
          <source>Listing 17-2: Implementations of the public methods &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;average&lt;/code&gt; on &lt;code&gt;AveragedCollection&lt;/code&gt;</source>
          <target state="translated">public 메소드의 구현은 : 17-2 목록 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 하고, &lt;code&gt;average&lt;/code&gt; 에 &lt;code&gt;AveragedCollection&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af397fd71809e54f0083b7e608d6c0b4c9b0bf08" translate="yes" xml:space="preserve">
          <source>Listing 17-3 shows how to define a trait named &lt;code&gt;Draw&lt;/code&gt; with one method named &lt;code&gt;draw&lt;/code&gt;:</source>
          <target state="translated">Listing 17-3은 &lt;code&gt;draw&lt;/code&gt; 라는 하나의 메소드 를 사용하여 &lt;code&gt;Draw&lt;/code&gt; 라는 특성을 정의하는 방법을 보여줍니다. .</target>
        </trans-unit>
        <trans-unit id="4f10326f38470efd1f683c6be6bac4e63a3ff831" translate="yes" xml:space="preserve">
          <source>Listing 17-3: Definition of the &lt;code&gt;Draw&lt;/code&gt; trait</source>
          <target state="translated">리스팅 17-3 : &lt;code&gt;Draw&lt;/code&gt; 정의 특성의</target>
        </trans-unit>
        <trans-unit id="53f4d30f17cd4871bb579fc6d6ab9fa64fdf9e11" translate="yes" xml:space="preserve">
          <source>Listing 17-4: Definition of the &lt;code&gt;Screen&lt;/code&gt; struct with a &lt;code&gt;components&lt;/code&gt; field holding a vector of trait objects that implement the &lt;code&gt;Draw&lt;/code&gt; trait</source>
          <target state="translated">Listing 17-4 : &lt;code&gt;Draw&lt;/code&gt; 특성 을 구현하는 특성 오브젝트의 벡터를 보유하는 &lt;code&gt;components&lt;/code&gt; 필드를 가진 &lt;code&gt;Screen&lt;/code&gt; 구조체의 정의</target>
        </trans-unit>
        <trans-unit id="b367bafd62da00b39f0f29178ba139044ac6e392" translate="yes" xml:space="preserve">
          <source>Listing 17-5: A &lt;code&gt;run&lt;/code&gt; method on &lt;code&gt;Screen&lt;/code&gt; that calls the &lt;code&gt;draw&lt;/code&gt; method on each component</source>
          <target state="translated">Listing 17-5 : 각 컴포넌트 에서 &lt;code&gt;draw&lt;/code&gt; 메소드 를 호출하는 &lt;code&gt;Screen&lt;/code&gt; 의 &lt;code&gt;run&lt;/code&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="deeebbdce767d8f16391b9fb2bdfc0e4741a956c" translate="yes" xml:space="preserve">
          <source>Listing 17-6: An alternate implementation of the &lt;code&gt;Screen&lt;/code&gt; struct and its &lt;code&gt;run&lt;/code&gt; method using generics and trait bounds</source>
          <target state="translated">Listing 17-6 : 제네릭과 특성 경계를 사용하여 &lt;code&gt;Screen&lt;/code&gt; 구조체와 &lt;code&gt;run&lt;/code&gt; 메소드 의 대체 구현</target>
        </trans-unit>
        <trans-unit id="b8a2b70499d48a841aff1d4e0201a4639e08dfd3" translate="yes" xml:space="preserve">
          <source>Listing 17-7: A &lt;code&gt;Button&lt;/code&gt; struct that implements the &lt;code&gt;Draw&lt;/code&gt; trait</source>
          <target state="translated">코드 17-7 : &lt;code&gt;Draw&lt;/code&gt; 특성 을 구현 하는 &lt;code&gt;Button&lt;/code&gt; 구조체</target>
        </trans-unit>
        <trans-unit id="f85ea6c0e85c436b267fdc78309b821b846f93e5" translate="yes" xml:space="preserve">
          <source>Listing 17-8: Another crate using &lt;code&gt;gui&lt;/code&gt; and implementing the &lt;code&gt;Draw&lt;/code&gt; trait on a &lt;code&gt;SelectBox&lt;/code&gt; struct</source>
          <target state="translated">Listing 17-8 : &lt;code&gt;gui&lt;/code&gt; 를 사용 하고 &lt;code&gt;SelectBox&lt;/code&gt; 구조체 에 &lt;code&gt;Draw&lt;/code&gt; 특성을 구현하는 또 다른 상자</target>
        </trans-unit>
        <trans-unit id="cc429d3edf954109de11b803bc39958b6b784d5b" translate="yes" xml:space="preserve">
          <source>Listing 17-9: Using trait objects to store values of different types that implement the same trait</source>
          <target state="translated">코드 17-9 : 특성 오브젝트를 사용하여 동일한 특성을 구현하는 다른 유형의 값 저장</target>
        </trans-unit>
        <trans-unit id="ddfe1c7f701b93852d2a31044c55db0f52b05397" translate="yes" xml:space="preserve">
          <source>Listing 18-1 shows that it&amp;rsquo;s also possible to mix and match &lt;code&gt;if let&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else if let&lt;/code&gt; expressions. Doing so gives us more flexibility than a &lt;code&gt;match&lt;/code&gt; expression in which we can express only one value to compare with the patterns. Also, the conditions in a series of &lt;code&gt;if let&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else if let&lt;/code&gt; arms aren&amp;rsquo;t required to relate to each other.</source>
          <target state="translated">Listing 18-1은 &lt;code&gt;if let&lt;/code&gt; , &lt;code&gt;else if&lt;/code&gt; , &lt;code&gt;else if let&lt;/code&gt; 식 을 혼합하여 사용할 수도 있음을 보여줍니다 . 그렇게하면 패턴과 비교하기 위해 하나의 값만 표현할 수 있는 &lt;code&gt;match&lt;/code&gt; 표현식 보다 유연성이 더 커집니다 . 또한 일련의 &lt;code&gt;if let&lt;/code&gt; , &lt;code&gt;else if&lt;/code&gt; , &lt;code&gt;else if let&lt;/code&gt; arm이 서로 관련 될 필요가없는 경우 의 조건 .</target>
        </trans-unit>
        <trans-unit id="6144661c623085286d9e6c1f25f8fba184c50d92" translate="yes" xml:space="preserve">
          <source>Listing 18-10: Attempting to use an irrefutable pattern with &lt;code&gt;if let&lt;/code&gt;</source>
          <target state="translated">Listing 18-10 : &lt;code&gt;if let&lt;/code&gt; 과 함께 반박 할 수없는 패턴을 사용하려고 시도</target>
        </trans-unit>
        <trans-unit id="4fb327bd75f9cb8728aaf90ca3b872fcf04c7b03" translate="yes" xml:space="preserve">
          <source>Listing 18-11: A &lt;code&gt;match&lt;/code&gt; expression with an arm that introduces a shadowed variable &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">코드 18-11 : 그림자 변수 &lt;code&gt;y&lt;/code&gt; 를 도입하는 팔과 &lt;code&gt;match&lt;/code&gt; 표현식</target>
        </trans-unit>
        <trans-unit id="9c2b55120c0d8dc746b9a11845e36ee6b0454a61" translate="yes" xml:space="preserve">
          <source>Listing 18-12 shows a &lt;code&gt;Point&lt;/code&gt; struct with two fields, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, that we can break apart using a pattern with a &lt;code&gt;let&lt;/code&gt; statement.</source>
          <target state="translated">Listing 18-12는 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 라는 두 개의 필드를 가진 &lt;code&gt;Point&lt;/code&gt; 구조체를 보여 주며 &lt;code&gt;let&lt;/code&gt; 문과 함께 패턴을 사용하여 분리 할 수있다 .</target>
        </trans-unit>
        <trans-unit id="8fcd90b374859cce38828ebaf8d6bead41442a33" translate="yes" xml:space="preserve">
          <source>Listing 18-12: Destructuring a struct&amp;rsquo;s fields into separate variables</source>
          <target state="translated">Listing 18-12 : 구조체의 필드를 별도의 변수로 구조화</target>
        </trans-unit>
        <trans-unit id="4ffbbc6877a6d05b9d9c472765b5d7903d9e7479" translate="yes" xml:space="preserve">
          <source>Listing 18-13: Destructuring struct fields using struct field shorthand</source>
          <target state="translated">Listing 18-13 : 구조체 필드 속기를 사용하여 구조체 필드 구조화</target>
        </trans-unit>
        <trans-unit id="11235cfa0778ac436ff2f043900aa97ca456308b" translate="yes" xml:space="preserve">
          <source>Listing 18-14 shows a &lt;code&gt;match&lt;/code&gt; expression that separates &lt;code&gt;Point&lt;/code&gt; values into three cases: points that lie directly on the &lt;code&gt;x&lt;/code&gt; axis (which is true when &lt;code&gt;y = 0&lt;/code&gt;), on the &lt;code&gt;y&lt;/code&gt; axis (&lt;code&gt;x = 0&lt;/code&gt;), or neither.</source>
          <target state="translated">18-14 프로그램리스트 &lt;code&gt;match&lt;/code&gt; 분리 식 &lt;code&gt;Point&lt;/code&gt; 상의 직접 놓여 점의 세 가지 경우로 값을 &lt;code&gt;x&lt;/code&gt; 축 (true로되는 &lt;code&gt;y = 0&lt;/code&gt; 온) &lt;code&gt;y&lt;/code&gt; 축 ( &lt;code&gt;x = 0&lt;/code&gt; ), 또는 어느 쪽도.</target>
        </trans-unit>
        <trans-unit id="fb8ab1d9675afe7b1be1ae05d4ffa8df574bad5c" translate="yes" xml:space="preserve">
          <source>Listing 18-14: Destructuring and matching literal values in one pattern</source>
          <target state="translated">코드 18-14 : 하나의 패턴으로 리터럴 값을 파괴하고 일치시키기</target>
        </trans-unit>
        <trans-unit id="2c53ca816acb5a98311e74b746cebc27259ca9cd" translate="yes" xml:space="preserve">
          <source>Listing 18-15: Destructuring enum variants that hold different kinds of values</source>
          <target state="translated">Listing 18-15 : 다른 종류의 값을 보유하는 열거 형 변형 파괴</target>
        </trans-unit>
        <trans-unit id="8d017024ad074a5a0b7ed0110f548b4814b94a7f" translate="yes" xml:space="preserve">
          <source>Listing 18-16: Matching on nested enums</source>
          <target state="translated">Listing 18-16 : 중첩 된 열거 형에서 일치</target>
        </trans-unit>
        <trans-unit id="f6f8fe0574320b6bc647539f95a9151cef4615db" translate="yes" xml:space="preserve">
          <source>Listing 18-17: Using &lt;code&gt;_&lt;/code&gt; in a function signature</source>
          <target state="translated">코드 18-17 : 함수 서명에서 &lt;code&gt;_&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="8578bd30c83decb05fa742779b0e3e4b88f7c284" translate="yes" xml:space="preserve">
          <source>Listing 18-18: Using an underscore within patterns that match &lt;code&gt;Some&lt;/code&gt; variants when we don&amp;rsquo;t need to use the value inside the &lt;code&gt;Some&lt;/code&gt;</source>
          <target state="translated">18-18 목록 : 일치하는 패턴 내에서 밑줄을 사용하여 &lt;code&gt;Some&lt;/code&gt; 우리가 내부의 값을 사용할 필요가 없습니다 때 변형 &lt;code&gt;Some&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37c8915871f50b9721bed2e69eaf1a05338e87bd" translate="yes" xml:space="preserve">
          <source>Listing 18-19: Ignoring multiple parts of a tuple</source>
          <target state="translated">Listing 18-19 : 튜플의 여러 부분 무시</target>
        </trans-unit>
        <trans-unit id="04e7b01d790581aedba062883153a4872da1e4bc" translate="yes" xml:space="preserve">
          <source>Listing 18-1: Mixing &lt;code&gt;if let&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else if let&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt;</source>
          <target state="translated">혼합 : 18-1 리스팅 &lt;code&gt;if let&lt;/code&gt; , &lt;code&gt;else if&lt;/code&gt; , &lt;code&gt;else if let&lt;/code&gt; , 그리고 &lt;code&gt;else&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0192d0fe46e2149dd08840da1d83030a4ae539d" translate="yes" xml:space="preserve">
          <source>Listing 18-20: Starting a variable name with an underscore to avoid getting unused variable warnings</source>
          <target state="translated">Listing 18-20 : 밑줄로 변수 이름을 시작하여 사용되지 않은 변수 경고를 피하는 방법</target>
        </trans-unit>
        <trans-unit id="b01ab99d779b491e654cdd969c4904697cb0151a" translate="yes" xml:space="preserve">
          <source>Listing 18-21: An unused variable starting with an underscore still binds the value, which might take ownership of the value</source>
          <target state="translated">Listing 18-21 : 밑줄로 시작하는 사용되지 않은 변수는 여전히 값을 바인딩하며, 이는 값의 소유권을 가질 수 있습니다</target>
        </trans-unit>
        <trans-unit id="02ba42be73f9aaf4aecf0fb121bd2897610211e9" translate="yes" xml:space="preserve">
          <source>Listing 18-22: Using an underscore does not bind the value</source>
          <target state="translated">목록 18-22 : 밑줄을 사용하면 값이 바인딩되지 않습니다</target>
        </trans-unit>
        <trans-unit id="84f4057dde8da9e2423dedf021ccca0489c6ac8b" translate="yes" xml:space="preserve">
          <source>Listing 18-23: Ignoring all fields of a &lt;code&gt;Point&lt;/code&gt; except for &lt;code&gt;x&lt;/code&gt; by using &lt;code&gt;..&lt;/code&gt;</source>
          <target state="translated">Listing 18-23 : &lt;code&gt;..&lt;/code&gt; 를 사용하여 &lt;code&gt;x&lt;/code&gt; 를 제외한 &lt;code&gt;Point&lt;/code&gt; 의 모든 필드 무시</target>
        </trans-unit>
        <trans-unit id="3275bf1924f1fbc7d62858e211ba0873cc0669da" translate="yes" xml:space="preserve">
          <source>Listing 18-24: Matching only the first and last values in a tuple and ignoring all other values</source>
          <target state="translated">Listing 18-24 : 튜플의 첫 번째 값과 마지막 값만 일치시키고 다른 모든 값은 무시</target>
        </trans-unit>
        <trans-unit id="0e55fccc60bd6fc7526f10678d21072747686831" translate="yes" xml:space="preserve">
          <source>Listing 18-25: An attempt to use &lt;code&gt;..&lt;/code&gt; in an ambiguous way</source>
          <target state="translated">Listing 18-25 : &lt;code&gt;..&lt;/code&gt; 을 모호하게 사용하려는 시도</target>
        </trans-unit>
        <trans-unit id="97cebea2424bf45c8bf6c663a2503dbf6d8034ad" translate="yes" xml:space="preserve">
          <source>Listing 18-26: Adding a match guard to a pattern</source>
          <target state="translated">Listing 18-26 : 패턴에 매치 가드 추가</target>
        </trans-unit>
        <trans-unit id="f95d9bacb005429d46b172980ece5949fe65c37d" translate="yes" xml:space="preserve">
          <source>Listing 18-27: Using a match guard to test for equality with an outer variable</source>
          <target state="translated">Listing 18-27 : 매치 가드를 사용하여 외부 변수와의 동등성 테스트</target>
        </trans-unit>
        <trans-unit id="0704830d46f846b74b5397dfd28e0cc52ee3748c" translate="yes" xml:space="preserve">
          <source>Listing 18-28: Combining multiple patterns with a match guard</source>
          <target state="translated">Listing 18-28 : 여러 패턴을 매치 가드와 결합</target>
        </trans-unit>
        <trans-unit id="7e4e4163a76cf16ed52305f58c5002629978394b" translate="yes" xml:space="preserve">
          <source>Listing 18-29: Using &lt;code&gt;@&lt;/code&gt; to bind to a value in a pattern while also testing it</source>
          <target state="translated">Listing 18-29 : &lt;code&gt;@&lt;/code&gt; 를 사용하여 테스트하면서 패턴의 값에 바인딩</target>
        </trans-unit>
        <trans-unit id="23efe349dec0a7214e63201a66162129b04c6e4c" translate="yes" xml:space="preserve">
          <source>Listing 18-2: Using a &lt;code&gt;while let&lt;/code&gt; loop to print values for as long as &lt;code&gt;stack.pop()&lt;/code&gt; returns &lt;code&gt;Some&lt;/code&gt;</source>
          <target state="translated">Listing 18-2 : &lt;code&gt;while let&lt;/code&gt; 루프를 사용하여 &lt;code&gt;stack.pop()&lt;/code&gt; 이 &lt;code&gt;Some&lt;/code&gt; 를 반환하는 한 값을 인쇄</target>
        </trans-unit>
        <trans-unit id="442e4a943f8db50a444be69278c2e7871bcc0a79" translate="yes" xml:space="preserve">
          <source>Listing 18-3 demonstrates how to use a pattern in a &lt;code&gt;for&lt;/code&gt; loop to destructure, or break apart, a tuple as part of the &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">18-3 목록 것은에서 패턴을 사용하는 방법을 보여줍니다 &lt;code&gt;for&lt;/code&gt; 의 일환으로 튜플을 destructure에 루프, 또는 떨어져 휴식 &lt;code&gt;for&lt;/code&gt; 루프.</target>
        </trans-unit>
        <trans-unit id="50a3b88c90e0ff821d1a59ab4a6da154261b1017" translate="yes" xml:space="preserve">
          <source>Listing 18-3: Using a pattern in a &lt;code&gt;for&lt;/code&gt; loop to destructure a tuple</source>
          <target state="translated">Listing 18-3 : &lt;code&gt;for&lt;/code&gt; 루프 에서 패턴을 사용 하여 튜플 구조화</target>
        </trans-unit>
        <trans-unit id="e1d043e4088371824844d59ed215594c594ada98" translate="yes" xml:space="preserve">
          <source>Listing 18-4: Using a pattern to destructure a tuple and create three variables at once</source>
          <target state="translated">Listing 18-4 : 패턴을 사용하여 튜플을 구조화하고 한 번에 세 개의 변수 생성</target>
        </trans-unit>
        <trans-unit id="e661b97edf1bb133ffbc7fc27e8a7bb308aef2f6" translate="yes" xml:space="preserve">
          <source>Listing 18-5: Incorrectly constructing a pattern whose variables don&amp;rsquo;t match the number of elements in the tuple</source>
          <target state="translated">Listing 18-5 : 변수가 튜플의 요소 수와 일치하지 않는 패턴을 잘못 구성</target>
        </trans-unit>
        <trans-unit id="a385d299c12c18dc1cff0477057573295b51144e" translate="yes" xml:space="preserve">
          <source>Listing 18-6: A function signature uses patterns in the parameters</source>
          <target state="translated">코드 18-6 : 함수 시그니처는 매개 변수의 패턴을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d3aee3d1bb78e1ecec2ead5910893a0623b90b19" translate="yes" xml:space="preserve">
          <source>Listing 18-7: A function with parameters that destructure a tuple</source>
          <target state="translated">코드 18-7 : 터플을 구조화하는 매개 변수가있는 함수</target>
        </trans-unit>
        <trans-unit id="21e573f160e40fcf18eb94c2061a631cb291a5f6" translate="yes" xml:space="preserve">
          <source>Listing 18-8: Attempting to use a refutable pattern with &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">Listing 18-8 : &lt;code&gt;let&lt;/code&gt; 과 함께 반박 가능한 패턴을 사용하려고 시도</target>
        </trans-unit>
        <trans-unit id="675529134474b9f9be7b4829f297213ca94319fa" translate="yes" xml:space="preserve">
          <source>Listing 18-9: Using &lt;code&gt;if let&lt;/code&gt; and a block with refutable patterns instead of &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">18-10 목록 : 사용 &lt;code&gt;if let&lt;/code&gt; 대신의 논박 패턴 블록 &lt;code&gt;let&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf63cbd65b20995fab2c3177f0bdf18c81ec5bba" translate="yes" xml:space="preserve">
          <source>Listing 19-1 shows how to create an immutable and a mutable raw pointer from references.</source>
          <target state="translated">Listing 19-1은 참조로부터 불변의 가변 포인터를 만드는 방법을 보여준다.</target>
        </trans-unit>
        <trans-unit id="1c28635772518e1ad661ea27fce0ffdf6d63713e" translate="yes" xml:space="preserve">
          <source>Listing 19-10: Reading from or writing to a mutable static variable is unsafe</source>
          <target state="translated">코드 19-10 : 가변 정적 변수 읽기 또는 쓰기는 안전하지 않습니다</target>
        </trans-unit>
        <trans-unit id="9e5c9abfc65b6f4d1aa6e66f7ef07fe278c65c7d" translate="yes" xml:space="preserve">
          <source>Listing 19-11: Defining and implementing an unsafe trait</source>
          <target state="translated">Listing 19-11 : 안전하지 않은 특성 정의 및 구현</target>
        </trans-unit>
        <trans-unit id="97e7d182f69683a4f3a68c22cc9d9c54c17d0703" translate="yes" xml:space="preserve">
          <source>Listing 19-12: The definition of the &lt;code&gt;Iterator&lt;/code&gt; trait that has an associated type &lt;code&gt;Item&lt;/code&gt;</source>
          <target state="translated">Listing 19-12 : 연관된 유형 &lt;code&gt;Item&lt;/code&gt; 을 갖는 &lt;code&gt;Iterator&lt;/code&gt; 특성 의 정의</target>
        </trans-unit>
        <trans-unit id="4e26c92b1d14183f38e41790c29afe868e637f42" translate="yes" xml:space="preserve">
          <source>Listing 19-13: A hypothetical definition of the &lt;code&gt;Iterator&lt;/code&gt; trait using generics</source>
          <target state="translated">Listing 19-13 : 제네릭을 사용한 &lt;code&gt;Iterator&lt;/code&gt; 특성 의 가상 정의</target>
        </trans-unit>
        <trans-unit id="a6225ec091be9ac5ca264bd8b927cc4c37328abc" translate="yes" xml:space="preserve">
          <source>Listing 19-14: Implementing the &lt;code&gt;Add&lt;/code&gt; trait to overload the &lt;code&gt;+&lt;/code&gt; operator for &lt;code&gt;Point&lt;/code&gt; instances</source>
          <target state="translated">Listing 19-14 : &lt;code&gt;Add&lt;/code&gt; 특성을 구현하여 &lt;code&gt;Point&lt;/code&gt; 인스턴스에 &lt;code&gt;+&lt;/code&gt; 연산자 를 오버로드</target>
        </trans-unit>
        <trans-unit id="8e21c1e69cc727098d370a83f01461649e24252b" translate="yes" xml:space="preserve">
          <source>Listing 19-15: Implementing the &lt;code&gt;Add&lt;/code&gt; trait on &lt;code&gt;Millimeters&lt;/code&gt; to add &lt;code&gt;Millimeters&lt;/code&gt; to &lt;code&gt;Meters&lt;/code&gt;</source>
          <target state="translated">19-15 리스팅 다음 구현 &lt;code&gt;Add&lt;/code&gt; 에 대한 특성 &lt;code&gt;Millimeters&lt;/code&gt; 추가 &lt;code&gt;Millimeters&lt;/code&gt; 하는 &lt;code&gt;Meters&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8cfa717336348c447e94e7f1e44c3038c63118f" translate="yes" xml:space="preserve">
          <source>Listing 19-16: Two traits are defined to have a &lt;code&gt;fly&lt;/code&gt; method and are implemented on the &lt;code&gt;Human&lt;/code&gt; type, and a &lt;code&gt;fly&lt;/code&gt; method is implemented on &lt;code&gt;Human&lt;/code&gt; directly</source>
          <target state="translated">Listing 19-16 : 두 가지 특성이 &lt;code&gt;fly&lt;/code&gt; 메소드 를 갖도록 정의되고 &lt;code&gt;Human&lt;/code&gt; 유형에 구현되고 &lt;code&gt;fly&lt;/code&gt; 메소드가 &lt;code&gt;Human&lt;/code&gt; 구현된다 직접</target>
        </trans-unit>
        <trans-unit id="db633a5a017661e7a7146fde17cdac691e8db4a1" translate="yes" xml:space="preserve">
          <source>Listing 19-17: Calling &lt;code&gt;fly&lt;/code&gt; on an instance of &lt;code&gt;Human&lt;/code&gt;</source>
          <target state="translated">Listing 19-17 : &lt;code&gt;Human&lt;/code&gt; 인스턴스에서 &lt;code&gt;fly&lt;/code&gt; 호출</target>
        </trans-unit>
        <trans-unit id="23834c33f73df40768a1dd5e5beec6df8bf7b48e" translate="yes" xml:space="preserve">
          <source>Listing 19-18: Specifying which trait&amp;rsquo;s &lt;code&gt;fly&lt;/code&gt; method we want to call</source>
          <target state="translated">Listing 19-18 : 호출 할 특성의 &lt;code&gt;fly&lt;/code&gt; 메소드 지정</target>
        </trans-unit>
        <trans-unit id="0a1f4647a45d92385555a03bf4ecb4d0623b48a1" translate="yes" xml:space="preserve">
          <source>Listing 19-19: A trait with an associated function and a type with an associated function of the same name that also implements the trait</source>
          <target state="translated">Listing 19-19 : 관련 함수가있는 특성과 특성을 구현하는 동일한 이름의 관련 함수가있는 유형</target>
        </trans-unit>
        <trans-unit id="192efdc88660736ee00124c16674e9b849c2f715" translate="yes" xml:space="preserve">
          <source>Listing 19-1: Creating raw pointers from references</source>
          <target state="translated">Listing 19-1 : 참조에서 raw 포인터 만들기</target>
        </trans-unit>
        <trans-unit id="8d83b1ebdf623a809ae1dbc744f5cfb736315160" translate="yes" xml:space="preserve">
          <source>Listing 19-20: Attempting to call the &lt;code&gt;baby_name&lt;/code&gt; function from the &lt;code&gt;Animal&lt;/code&gt; trait, but Rust doesn&amp;rsquo;t know which implementation to use</source>
          <target state="translated">Listing 19-20 : &lt;code&gt;Animal&lt;/code&gt; 특성 에서 &lt;code&gt;baby_name&lt;/code&gt; 함수 를 호출하려고 시도 하지만 Rust가 어떤 구현을 사용해야하는지 모른다</target>
        </trans-unit>
        <trans-unit id="ac581d7a4053cba32c760b99f0af0222300b5bb1" translate="yes" xml:space="preserve">
          <source>Listing 19-21: Using fully qualified syntax to specify that we want to call the &lt;code&gt;baby_name&lt;/code&gt; function from the &lt;code&gt;Animal&lt;/code&gt; trait as implemented on &lt;code&gt;Dog&lt;/code&gt;</source>
          <target state="translated">Listing 19-21 : 정규화 된 구문을 사용 하여 &lt;code&gt;Dog&lt;/code&gt; 에 구현 된대로 &lt;code&gt;Animal&lt;/code&gt; 특성 에서 &lt;code&gt;baby_name&lt;/code&gt; 함수 를 호출하도록 지정</target>
        </trans-unit>
        <trans-unit id="8205ecf7d4f5d4f3830c5045853af8331fa47133" translate="yes" xml:space="preserve">
          <source>Listing 19-22: Implementing the &lt;code&gt;OutlinePrint&lt;/code&gt; trait that requires the functionality from &lt;code&gt;Display&lt;/code&gt;</source>
          <target state="translated">Listing 19-22 : &lt;code&gt;Display&lt;/code&gt; 의 기능이 필요한 &lt;code&gt;OutlinePrint&lt;/code&gt; 특성 구현</target>
        </trans-unit>
        <trans-unit id="c5e43e2c666b627080372728cabf0cc1d1c6ff63" translate="yes" xml:space="preserve">
          <source>Listing 19-23: Creating a &lt;code&gt;Wrapper&lt;/code&gt; type around &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; to implement &lt;code&gt;Display&lt;/code&gt;</source>
          <target state="translated">Listing 19-23 : &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; 주위에 &lt;code&gt;Wrapper&lt;/code&gt; 유형을 생성하여 &lt;code&gt;Display&lt;/code&gt; 구현</target>
        </trans-unit>
        <trans-unit id="1131b7eb93a0bacee5469c6f2b5469b17091340d" translate="yes" xml:space="preserve">
          <source>Listing 19-24: Using a long type in many places</source>
          <target state="translated">Listing 19-24 : 여러 장소에서 긴 타입 사용하기</target>
        </trans-unit>
        <trans-unit id="1987562b13a9a144a67a61660918cc709b89a4d7" translate="yes" xml:space="preserve">
          <source>Listing 19-25: Introducing a type alias &lt;code&gt;Thunk&lt;/code&gt; to reduce repetition</source>
          <target state="translated">Listing 19-25 : 타입 별칭 소개 반복을 줄이기위한 &lt;code&gt;Thunk&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad147945642e08a211cbe9d3bd11a5fcd950dc97" translate="yes" xml:space="preserve">
          <source>Listing 19-26: A &lt;code&gt;match&lt;/code&gt; with an arm that ends in &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="translated">Listing 19-26 : &lt;code&gt;continue&lt;/code&gt; 암과 의 &lt;code&gt;match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66fc36103a8a4f76e0bc69209e8f9d1bde9445a7" translate="yes" xml:space="preserve">
          <source>Listing 19-27: Using the &lt;code&gt;fn&lt;/code&gt; type to accept a function pointer as an argument</source>
          <target state="translated">Listing 19-27 : &lt;code&gt;fn&lt;/code&gt; 유형을 사용하여 함수 포인터를 인수로 허용</target>
        </trans-unit>
        <trans-unit id="769c84eb503c23780b93699d2159e4cf8959b7f5" translate="yes" xml:space="preserve">
          <source>Listing 19-28 shows a slightly simplified definition of the &lt;code&gt;vec!&lt;/code&gt; macro.</source>
          <target state="translated">Listing 19-28은 약간 단순화 된 정의를 보여준다. &lt;code&gt;vec!&lt;/code&gt; 매크로.</target>
        </trans-unit>
        <trans-unit id="60ab4c545d5a0a14c36d0f048ed889fbad1b867a" translate="yes" xml:space="preserve">
          <source>Listing 19-28: A simplified version of the &lt;code&gt;vec!&lt;/code&gt; macro definition</source>
          <target state="translated">Listing 19-28 : 단순화 된 버전 &lt;code&gt;vec!&lt;/code&gt; 매크로 정의</target>
        </trans-unit>
        <trans-unit id="97631e592572572bb56effe84f77bb58203d289e" translate="yes" xml:space="preserve">
          <source>Listing 19-29: An example of using a procedural macro</source>
          <target state="translated">Listing 19-29 : 절차 적 매크로를 사용하는 예제</target>
        </trans-unit>
        <trans-unit id="83ea168fb44a9c48159cac238fc94515fe3427d1" translate="yes" xml:space="preserve">
          <source>Listing 19-2: Creating a raw pointer to an arbitrary memory address</source>
          <target state="translated">Listing 19-2 : 임의의 메모리 주소에 대한 raw 포인터 만들기</target>
        </trans-unit>
        <trans-unit id="eb0cf59c32c33cd655b69f707870bf310b1c110b" translate="yes" xml:space="preserve">
          <source>Listing 19-30: The code a user of our crate will be able to write when using our procedural macro</source>
          <target state="translated">코드 19-30 : 프로 시저 매크로를 사용할 때 상자의 사용자가 작성할 수있는 코드</target>
        </trans-unit>
        <trans-unit id="3c1a2c71019296d6475855f5967a82c656b5e4de" translate="yes" xml:space="preserve">
          <source>Listing 19-31: Code that most procedural macro crates will require in order to process Rust code</source>
          <target state="translated">Listing 19-31 : Rust 코드를 처리하기 위해 대부분의 절차 적 매크로 상자에 필요한 코드</target>
        </trans-unit>
        <trans-unit id="e7d6f9e676482d1db15035f09578f137f1526cbb" translate="yes" xml:space="preserve">
          <source>Listing 19-32: The &lt;code&gt;DeriveInput&lt;/code&gt; instance we get when parsing the code that has the macro&amp;rsquo;s attribute in Listing 19-30</source>
          <target state="translated">리스팅 19-32 : &lt;code&gt;DeriveInput&lt;/code&gt; Listing 19-30에서 매크로 속성을 가진 코드를 파싱 할 때 얻는 인스턴스</target>
        </trans-unit>
        <trans-unit id="4397782d319dbdc638cec0fd47d1fda0eee85db9" translate="yes" xml:space="preserve">
          <source>Listing 19-33: Implementing the &lt;code&gt;HelloMacro&lt;/code&gt; trait using the parsed Rust code</source>
          <target state="translated">Listing &lt;code&gt;HelloMacro&lt;/code&gt; : HelloMacro 구현 파싱 ​​된 Rust 코드를 사용하여 특성</target>
        </trans-unit>
        <trans-unit id="d539ea03dc90a8cca36f3eccb659307c38fa618f" translate="yes" xml:space="preserve">
          <source>Listing 19-3: Dereferencing raw pointers within an &lt;code&gt;unsafe&lt;/code&gt; block</source>
          <target state="translated">Listing 19-3 : &lt;code&gt;unsafe&lt;/code&gt; 원시 포인터 역 참조 블록</target>
        </trans-unit>
        <trans-unit id="e1edf730fefc0104cc30acf2b246856d97d9d073" translate="yes" xml:space="preserve">
          <source>Listing 19-4: Using the safe &lt;code&gt;split_at_mut&lt;/code&gt; function</source>
          <target state="translated">Listing 19-4 : 안전한 &lt;code&gt;split_at_mut&lt;/code&gt; 함수 사용</target>
        </trans-unit>
        <trans-unit id="f23a70c40857b6360828ef033504db89b40caa91" translate="yes" xml:space="preserve">
          <source>Listing 19-5: An attempted implementation of &lt;code&gt;split_at_mut&lt;/code&gt; using only safe Rust</source>
          <target state="translated">Listing 19-5 : 안전한 Rust 만 사용하여 &lt;code&gt;split_at_mut&lt;/code&gt; 구현 시도</target>
        </trans-unit>
        <trans-unit id="b16487162d78fe10005b7a33219b8cdbf681490c" translate="yes" xml:space="preserve">
          <source>Listing 19-6 shows how to use an &lt;code&gt;unsafe&lt;/code&gt; block, a raw pointer, and some calls to unsafe functions to make the implementation of &lt;code&gt;split_at_mut&lt;/code&gt; work.</source>
          <target state="translated">Listing 19-6은 &lt;code&gt;unsafe&lt;/code&gt; 블록, 원시 포인터 및 안전하지 않은 함수에 대한 일부 호출을 사용하여 &lt;code&gt;split_at_mut&lt;/code&gt; 의 구현을 작동 시키는 방법을 보여 줍니다.</target>
        </trans-unit>
        <trans-unit id="7c4d157139d16d96be67cd8da8488a5e81f88057" translate="yes" xml:space="preserve">
          <source>Listing 19-6: Using unsafe code in the implementation of the &lt;code&gt;split_at_mut&lt;/code&gt; function</source>
          <target state="translated">Listing 19-6 : &lt;code&gt;split_at_mut&lt;/code&gt; 함수 구현에 안전하지 않은 코드 사용</target>
        </trans-unit>
        <trans-unit id="64cec9a7a8da122e95db8329b6350a018c6c3b45" translate="yes" xml:space="preserve">
          <source>Listing 19-7: Creating a slice from an arbitrary memory location</source>
          <target state="translated">Listing 19-7 : 임의의 메모리 위치에서 슬라이스 생성</target>
        </trans-unit>
        <trans-unit id="b7c3d4646ff2dd9b36dc16b78f39d822eb6a30ba" translate="yes" xml:space="preserve">
          <source>Listing 19-8 demonstrates how to set up an integration with the &lt;code&gt;abs&lt;/code&gt; function from the C standard library. Functions declared within &lt;code&gt;extern&lt;/code&gt; blocks are always unsafe to call from Rust code. The reason is that other languages don&amp;rsquo;t enforce Rust&amp;rsquo;s rules and guarantees, and Rust can&amp;rsquo;t check them, so responsibility falls on the programmer to ensure safety.</source>
          <target state="translated">Listing 19-8 은 C 표준 라이브러리에서 &lt;code&gt;abs&lt;/code&gt; 함수 와의 통합을 설정하는 방법을 보여줍니다 . &lt;code&gt;extern&lt;/code&gt; 내에서 선언 된 함수 블록 Rust 코드에서 호출하는 것이 항상 안전하지 않습니다. 그 이유는 다른 언어는 Rust의 규칙과 보증을 시행하지 않으며 Rust가이를 확인할 수 없기 때문에 안전을 보장 할 책임은 프로그래머에게 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d7de98a6e48ac42520eafd23cc5b99e287c6f4c" translate="yes" xml:space="preserve">
          <source>Listing 19-8: Declaring and calling an &lt;code&gt;extern&lt;/code&gt; function defined in another language</source>
          <target state="translated">코드 19-8 : 다른 언어로 정의 된 &lt;code&gt;extern&lt;/code&gt; 함수 선언 및 호출</target>
        </trans-unit>
        <trans-unit id="02f5f37df24f5c7f8252fdc4fd720c05520b5ccb" translate="yes" xml:space="preserve">
          <source>Listing 19-9: Defining and using an immutable static variable</source>
          <target state="translated">Listing 19-9 : 불변 정적 변수 정의 및 사용</target>
        </trans-unit>
        <trans-unit id="906850d60d2bfc7a434b9df477636efeaef160de" translate="yes" xml:space="preserve">
          <source>Listing 2-1: Code that gets a guess from the user and prints it</source>
          <target state="translated">Listing 2-1 : 사용자로부터 추측하여 출력하는 코드</target>
        </trans-unit>
        <trans-unit id="e55456b745b2d799b62d95f492ba0fa4228d6a0d" translate="yes" xml:space="preserve">
          <source>Listing 2-2: The output from running &lt;code&gt;cargo build&lt;/code&gt; after adding the rand crate as a dependency</source>
          <target state="translated">리스팅 2-2 : 랜드 상자를 종속성으로 추가 한 후 &lt;code&gt;cargo build&lt;/code&gt; 실행 결과</target>
        </trans-unit>
        <trans-unit id="a5914c0d7edb00b8b1ca144c272f874cd675df48" translate="yes" xml:space="preserve">
          <source>Listing 2-3: Adding code to generate a random number</source>
          <target state="translated">Listing 2-3 : 난수를 생성하는 코드 추가</target>
        </trans-unit>
        <trans-unit id="af8d17e9229f2c43969b2a69094d2f3e5fe3e655" translate="yes" xml:space="preserve">
          <source>Listing 2-4: Handling the possible return values of comparing two numbers</source>
          <target state="translated">Listing 2-4 : 두 숫자를 비교할 수있는 리턴 값 처리</target>
        </trans-unit>
        <trans-unit id="33a15234f088792400d37a594c696c9143e6c6ec" translate="yes" xml:space="preserve">
          <source>Listing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program</source>
          <target state="translated">코드 2-5 : 숫자가 아닌 추측을 무시하고 프로그램을 중단시키는 대신 다른 추측을 요구</target>
        </trans-unit>
        <trans-unit id="0d0918b00c7ec6bb184545ca63e60fa4939bef0d" translate="yes" xml:space="preserve">
          <source>Listing 2-6: Complete guessing game code</source>
          <target state="translated">코드 2-6 : 완전한 추측 게임 코드</target>
        </trans-unit>
        <trans-unit id="6186619545c6ee347071e7ca7d304239cefd9d87" translate="yes" xml:space="preserve">
          <source>Listing 20-10: Simulating a slow request by recognizing &lt;em&gt;/sleep&lt;/em&gt; and sleeping for 5 seconds</source>
          <target state="translated">Listing 20-10 : 5 초 동안 &lt;em&gt;/ sleep&lt;/em&gt; 및 &lt;em&gt;sleep&lt;/em&gt; 을 인식하여 느린 요청 시뮬레이션</target>
        </trans-unit>
        <trans-unit id="c77c5f9f8216534967e6aa65016f2ce1e522d44b" translate="yes" xml:space="preserve">
          <source>Listing 20-11: Spawning a new thread for each stream</source>
          <target state="translated">Listing 20-11 : 각 스트림에 새로운 스레드 생성</target>
        </trans-unit>
        <trans-unit id="490b74dd78fbac67e3686c02aa9503e4dfb82b08" translate="yes" xml:space="preserve">
          <source>Listing 20-12: Our ideal &lt;code&gt;ThreadPool&lt;/code&gt; interface</source>
          <target state="translated">Listing 20-12 : 이상적인 &lt;code&gt;ThreadPool&lt;/code&gt; 인터페이스</target>
        </trans-unit>
        <trans-unit id="2522ba33dbd20be373e69103631f87861291c162" translate="yes" xml:space="preserve">
          <source>Listing 20-13: Implementing &lt;code&gt;ThreadPool::new&lt;/code&gt; to panic if &lt;code&gt;size&lt;/code&gt; is zero</source>
          <target state="translated">Listing 20-13 : &lt;code&gt;ThreadPool::new&lt;/code&gt; 구현 :: &lt;code&gt;size&lt;/code&gt; 가 0 인 경우 공황 상태에 빠짐</target>
        </trans-unit>
        <trans-unit id="17f32c438999cbe2243fdcfe5e366cb33ba2affa" translate="yes" xml:space="preserve">
          <source>Listing 20-14: Creating a vector for &lt;code&gt;ThreadPool&lt;/code&gt; to hold the threads</source>
          <target state="translated">Listing 20-14 : 스레드를 보유 할 &lt;code&gt;ThreadPool&lt;/code&gt; 용 벡터 만들기</target>
        </trans-unit>
        <trans-unit id="9da4f1d3e6c1f786010f397f2fd75fddc7491385" translate="yes" xml:space="preserve">
          <source>Listing 20-15: Modifying &lt;code&gt;ThreadPool&lt;/code&gt; to hold &lt;code&gt;Worker&lt;/code&gt; instances instead of holding threads directly</source>
          <target state="translated">Listing 20-15 : 스레드를 직접 유지하는 대신 &lt;code&gt;Worker&lt;/code&gt; 인스턴스 를 유지하도록 &lt;code&gt;ThreadPool&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="56fbc0b9cc0275a64d6a40c9a37ce081653cc6f5" translate="yes" xml:space="preserve">
          <source>Listing 20-16: Modifying &lt;code&gt;ThreadPool&lt;/code&gt; to store the sending end of a channel that sends &lt;code&gt;Job&lt;/code&gt; instances</source>
          <target state="translated">Listing 20-16 : &lt;code&gt;Job&lt;/code&gt; 인스턴스 를 전송하는 채널의 전송 끝을 저장하도록 &lt;code&gt;ThreadPool&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="f85cb389f568fb1fa76f6154929625041a887ad1" translate="yes" xml:space="preserve">
          <source>Listing 20-17: Passing the receiving end of the channel to the workers</source>
          <target state="translated">Listing 20-17 : 채널의 수신 끝을 작업자에게 전달</target>
        </trans-unit>
        <trans-unit id="d30a183ff11a61e9b38867b8a86d78ca2fa07d93" translate="yes" xml:space="preserve">
          <source>Listing 20-18: Sharing the receiving end of the channel among the workers using &lt;code&gt;Arc&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt;</source>
          <target state="translated">Listing 20-18 : &lt;code&gt;Arc&lt;/code&gt; 와 &lt;code&gt;Mutex&lt;/code&gt; 를 사용하여 작업자들 사이에서 채널의 수신단 공유</target>
        </trans-unit>
        <trans-unit id="841cf9bc324d23f260e6d9ec8f63c8e66b6e6aae" translate="yes" xml:space="preserve">
          <source>Listing 20-19: Creating a &lt;code&gt;Job&lt;/code&gt; type alias for a &lt;code&gt;Box&lt;/code&gt; that holds each closure and then sending the job down the channel</source>
          <target state="translated">목록 20-19 : 각 클로저를 보유한 &lt;code&gt;Box&lt;/code&gt; 에 대한 &lt;code&gt;Job&lt;/code&gt; 유형 별명 작성 후 작업을 채널로 전송</target>
        </trans-unit>
        <trans-unit id="0a2d9c3b8202a9c489e5874aab92dcbb628c7914" translate="yes" xml:space="preserve">
          <source>Listing 20-1: Listening for incoming streams and printing a message when we receive a stream</source>
          <target state="translated">Listing 20-1 : 수신 스트림 수신 및 스트림 수신시 메시지 인쇄</target>
        </trans-unit>
        <trans-unit id="4d16d200911e1c27e67c19a6df63099563502faf" translate="yes" xml:space="preserve">
          <source>Listing 20-20: Receiving and executing the jobs in the worker&amp;rsquo;s thread</source>
          <target state="translated">Listing 20-20 : 작업자 스레드에서 작업 수신 및 실행</target>
        </trans-unit>
        <trans-unit id="647644f5eafb20cf48cea22601269ed2b77605f4" translate="yes" xml:space="preserve">
          <source>Listing 20-21: Adding a new trait &lt;code&gt;FnBox&lt;/code&gt; to work around the current limitations of &lt;code&gt;Box&amp;lt;FnOnce()&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 20-21 : &lt;code&gt;Box&amp;lt;FnOnce()&amp;gt;&lt;/code&gt; 의 현재 한계를 해결하기 위해 새로운 특성 &lt;code&gt;FnBox&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="b7ce8f7a4b9223ab75f3a0d79b7b0cfb48ad0809" translate="yes" xml:space="preserve">
          <source>Listing 20-21: An alternative implementation of &lt;code&gt;Worker::new&lt;/code&gt; using &lt;code&gt;while let&lt;/code&gt;</source>
          <target state="translated">목록 20-21 : 다른 구현 &lt;code&gt;Worker::new&lt;/code&gt; 사용 &lt;code&gt;while let&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9951af4e66c939c862100b93f3e377ad1bab764f" translate="yes" xml:space="preserve">
          <source>Listing 20-22: An alternative implementation of &lt;code&gt;Worker::new&lt;/code&gt; using &lt;code&gt;while let&lt;/code&gt;</source>
          <target state="translated">Listing 20-22 : &lt;code&gt;while let&lt;/code&gt; 을 사용하여 &lt;code&gt;Worker::new&lt;/code&gt; 의 대체 구현</target>
        </trans-unit>
        <trans-unit id="2d09a00b2f6c7708a05aff5e7b9697cffa40d67f" translate="yes" xml:space="preserve">
          <source>Listing 20-22: Joining each thread when the thread pool goes out of scope</source>
          <target state="translated">목록 20-22 : 스레드 풀이 범위를 벗어날 때 각 스레드 결합</target>
        </trans-unit>
        <trans-unit id="a296253ebec40fe8302bfd2243313af4f8547a4e" translate="yes" xml:space="preserve">
          <source>Listing 20-23: Joining each thread when the thread pool goes out of scope</source>
          <target state="translated">Listing 20-23 : 스레드 풀이 범위를 벗어날 때 각 스레드 결합</target>
        </trans-unit>
        <trans-unit id="9b22686838aacbc9e57545b76a48f6eb54b3fbbe" translate="yes" xml:space="preserve">
          <source>Listing 20-23: Sending and receiving &lt;code&gt;Message&lt;/code&gt; values and exiting the loop if a &lt;code&gt;Worker&lt;/code&gt; receives &lt;code&gt;Message::Terminate&lt;/code&gt;</source>
          <target state="translated">목록 20-23 : &lt;code&gt;Worker&lt;/code&gt; 수신 하는 경우 &lt;code&gt;Message&lt;/code&gt; 값 송수신 및 루프 종료 &lt;code&gt;Message::Terminate&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21ba4cb1a9d207e86986a91e29b5c0edb2efd0c3" translate="yes" xml:space="preserve">
          <source>Listing 20-24: Sending &lt;code&gt;Message::Terminate&lt;/code&gt; to the workers before calling &lt;code&gt;join&lt;/code&gt; on each worker thread</source>
          <target state="translated">Listing 20-24 : &lt;code&gt;join&lt;/code&gt; 호출하기 전에 워커에게 &lt;code&gt;Message::Terminate&lt;/code&gt; 보내기 각 작업자 스레드에서 을</target>
        </trans-unit>
        <trans-unit id="c4ce0ae841f01e7178673adbbf0ad07461277ddc" translate="yes" xml:space="preserve">
          <source>Listing 20-24: Sending and receiving &lt;code&gt;Message&lt;/code&gt; values and exiting the loop if a &lt;code&gt;Worker&lt;/code&gt; receives &lt;code&gt;Message::Terminate&lt;/code&gt;</source>
          <target state="translated">Listing 20-24 : &lt;code&gt;Worker&lt;/code&gt; 가 &lt;code&gt;Message::Terminate&lt;/code&gt; 수신 하면 &lt;code&gt;Message&lt;/code&gt; 값을 주고 받고 루프를 종료한다</target>
        </trans-unit>
        <trans-unit id="29d2ea0bbc5319f33a55cd0b85d771dffd7474e4" translate="yes" xml:space="preserve">
          <source>Listing 20-25: Sending &lt;code&gt;Message::Terminate&lt;/code&gt; to the workers before calling &lt;code&gt;join&lt;/code&gt; on each worker thread</source>
          <target state="translated">Listing 20-25 : 각 작업자 스레드에서 &lt;code&gt;join&lt;/code&gt; 을 호출하기 전에 &lt;code&gt;Message::Terminate&lt;/code&gt; 보내기 :: 종료</target>
        </trans-unit>
        <trans-unit id="ae8cc5a7cf07b2270161c49e58dcfe19c9ee4304" translate="yes" xml:space="preserve">
          <source>Listing 20-25: Shut down the server after serving two requests by exiting the loop</source>
          <target state="translated">목록 20-25 : 루프를 종료하여 두 개의 요청을 처리 한 후 서버 종료</target>
        </trans-unit>
        <trans-unit id="e608ac3da55b751debf169a89c8e9a8691843148" translate="yes" xml:space="preserve">
          <source>Listing 20-26: Shut down the server after serving two requests by exiting the loop</source>
          <target state="translated">Listing 20-26 : 루프를 종료하여 두 개의 요청을 처리 한 후 서버 종료</target>
        </trans-unit>
        <trans-unit id="f173c615ede21211278d9807de835c93a5e1f4ea" translate="yes" xml:space="preserve">
          <source>Listing 20-2: Reading from the &lt;code&gt;TcpStream&lt;/code&gt; and printing the data</source>
          <target state="translated">Listing 20-2 : &lt;code&gt;TcpStream&lt;/code&gt; 에서 읽고 데이터 인쇄하기</target>
        </trans-unit>
        <trans-unit id="fd05c1361038c612312e8cc1d37b42ca715be238" translate="yes" xml:space="preserve">
          <source>Listing 20-3: Writing a tiny successful HTTP response to the stream</source>
          <target state="translated">Listing 20-3 : 스트림에 작은 성공적인 HTTP 응답 작성</target>
        </trans-unit>
        <trans-unit id="a8a7e3303b2df74786cd8877ab67f397f5337c03" translate="yes" xml:space="preserve">
          <source>Listing 20-4: A sample HTML file to return in a response</source>
          <target state="translated">Listing 20-4 : 응답으로 반환 할 샘플 HTML 파일</target>
        </trans-unit>
        <trans-unit id="00ae38e218c5bb3f97a75cad8df12e9b0d020593" translate="yes" xml:space="preserve">
          <source>Listing 20-5: Sending the contents of &lt;em&gt;hello.html&lt;/em&gt; as the body of the response</source>
          <target state="translated">Listing 20-5 : &lt;em&gt;hello.html&lt;/em&gt; 의 내용을 응답 본문으로 보내기</target>
        </trans-unit>
        <trans-unit id="9d1f02cb4b09980a87d79d0547c49358fc614eb0" translate="yes" xml:space="preserve">
          <source>Listing 20-6: Matching the request and handling requests to &lt;em&gt;/&lt;/em&gt; differently from other requests</source>
          <target state="translated">Listing 20-6 : 요청 일치 및 다른 요청과 다르게 &lt;em&gt;/&lt;/em&gt; 요청 처리</target>
        </trans-unit>
        <trans-unit id="f8348546992791302bf0d85900165079b1714256" translate="yes" xml:space="preserve">
          <source>Listing 20-7: Responding with status code 404 and an error page if anything other than &lt;em&gt;/&lt;/em&gt; was requested</source>
          <target state="translated">Listing 20-7 : 상태 코드 404로 응답하고 &lt;em&gt;/&lt;/em&gt; 이외의 요청이있는 경우 오류 페이지</target>
        </trans-unit>
        <trans-unit id="b07ae72c083b1a899a2a424356f010f0e77e0f78" translate="yes" xml:space="preserve">
          <source>Listing 20-8: Sample content for the page to send back with any 404 response</source>
          <target state="translated">리스팅 20-8 : 페이지가 404 응답으로 다시 보낼 샘플 컨텐츠</target>
        </trans-unit>
        <trans-unit id="979c0bf09be8b693a0b7eb5bf1b313cf1df5527a" translate="yes" xml:space="preserve">
          <source>Listing 20-9: Refactoring the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks to contain only the code that differs between the two cases</source>
          <target state="translated">Listing 20-9 : &lt;code&gt;if&lt;/code&gt; 와 &lt;code&gt;else&lt;/code&gt; 블록을 리팩토링 하여 두 경우간에 다른 코드 만 포함</target>
        </trans-unit>
        <trans-unit id="9b9fceb9eb03a3f9c4e1d74cfa6029d7dcce46bb" translate="yes" xml:space="preserve">
          <source>Listing 3-1: A &lt;code&gt;main&lt;/code&gt; function declaration containing one statement</source>
          <target state="translated">Listing 3-1 : 하나의 문장을 포함 하는 &lt;code&gt;main&lt;/code&gt; 함수 선언</target>
        </trans-unit>
        <trans-unit id="e6d53ab22ffb27dcb257a8700d46cbd5dfced9fc" translate="yes" xml:space="preserve">
          <source>Listing 3-2: Assigning the result of an &lt;code&gt;if&lt;/code&gt; expression to a variable</source>
          <target state="translated">Listing 3-2 : &lt;code&gt;if&lt;/code&gt; 표현식 의 결과를 변수에 할당</target>
        </trans-unit>
        <trans-unit id="ff679afd5d6d867cbcc39b449d2a998a25435cd2" translate="yes" xml:space="preserve">
          <source>Listing 3-3: Using a &lt;code&gt;while&lt;/code&gt; loop to run code while a condition holds true</source>
          <target state="translated">Listing 3-3 : 조건을 만족 하는 &lt;code&gt;while&lt;/code&gt; 루프를 사용하여 코드 실행</target>
        </trans-unit>
        <trans-unit id="583d2039afeb95cdf5c7e0b2a32879f9b935cc5f" translate="yes" xml:space="preserve">
          <source>Listing 3-4: Looping through each element of a collection using a &lt;code&gt;while&lt;/code&gt; loop</source>
          <target state="translated">Listing 3-4 : &lt;code&gt;while&lt;/code&gt; 루프를 사용하여 컬렉션의 각 요소 를 반복</target>
        </trans-unit>
        <trans-unit id="87438bb574a616fffd251f60fd596f3c3d541ee3" translate="yes" xml:space="preserve">
          <source>Listing 3-5: Looping through each element of a collection using a &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">Listing 3-5 : &lt;code&gt;for&lt;/code&gt; 루프를 사용하여 컬렉션의 각 요소 를 반복</target>
        </trans-unit>
        <trans-unit id="071776e108222090fe7e34b6b12a0635af1ea613" translate="yes" xml:space="preserve">
          <source>Listing 4-1: A variable and the scope in which it is valid</source>
          <target state="translated">Listing 4-1 : 변수와 ​​변수의 유효 범위</target>
        </trans-unit>
        <trans-unit id="a8bd4a8ada8ca53b2cd329e28cf012af8595d26c" translate="yes" xml:space="preserve">
          <source>Listing 4-2: Assigning the integer value of variable &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">Listing 4-2 : 변수 &lt;code&gt;x&lt;/code&gt; 의 정수 값 을 &lt;code&gt;y&lt;/code&gt; 에 할당</target>
        </trans-unit>
        <trans-unit id="f80135eeedb7d42bfb604d43634f10e56b9276d8" translate="yes" xml:space="preserve">
          <source>Listing 4-3: Functions with ownership and scope annotated</source>
          <target state="translated">Listing 4-3 : 소유권과 범위가 주석이 달린 함수</target>
        </trans-unit>
        <trans-unit id="08743211367b36a2bf28bc72aee62ce3d8e0a427" translate="yes" xml:space="preserve">
          <source>Listing 4-4: Transferring ownership of return values</source>
          <target state="translated">Listing 4-4 ​​: 반환 값의 소유권 이전</target>
        </trans-unit>
        <trans-unit id="c4cdffa6571f231b7e6fd5e7bf3f5073aceb67af" translate="yes" xml:space="preserve">
          <source>Listing 4-5: Returning ownership of parameters</source>
          <target state="translated">Listing 4-5 : 매개 변수 소유권 반환</target>
        </trans-unit>
        <trans-unit id="3222eb0c315d3632f2a93aa2c946727b3f3aa187" translate="yes" xml:space="preserve">
          <source>Listing 4-6: Attempting to modify a borrowed value</source>
          <target state="translated">리스팅 4-6 : 빌린 값 수정</target>
        </trans-unit>
        <trans-unit id="e224cd6b255dc9146281f3ef7b7408c55d16c747" translate="yes" xml:space="preserve">
          <source>Listing 4-7: The &lt;code&gt;first_word&lt;/code&gt; function that returns a byte index value into the &lt;code&gt;String&lt;/code&gt; parameter</source>
          <target state="translated">Listing 4-7 : 바이트 인덱스 값을 &lt;code&gt;String&lt;/code&gt; 매개 변수 로 반환하는 &lt;code&gt;first_word&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="5d0609b7dcfd67002e143a43f1ddecb06483b85d" translate="yes" xml:space="preserve">
          <source>Listing 4-8: Storing the result from calling the &lt;code&gt;first_word&lt;/code&gt; function and then changing the &lt;code&gt;String&lt;/code&gt; contents</source>
          <target state="translated">Listing 4-8 : &lt;code&gt;first_word&lt;/code&gt; 함수 를 호출 한 후 &lt;code&gt;String&lt;/code&gt; 내용 을 변경 한 결과 저장</target>
        </trans-unit>
        <trans-unit id="87c1cb4aabafa6069efb32d5af61cd0fb08e6796" translate="yes" xml:space="preserve">
          <source>Listing 4-9: Improving the &lt;code&gt;first_word&lt;/code&gt; function by using a string slice for the type of the &lt;code&gt;s&lt;/code&gt; parameter</source>
          <target state="translated">코드 4-9 : &lt;code&gt;s&lt;/code&gt; 매개 변수 유형에 문자열 슬라이스를 사용하여 &lt;code&gt;first_word&lt;/code&gt; 함수 개선</target>
        </trans-unit>
        <trans-unit id="f5936c4459ffd7d02b56c5c0e59e5f7deb06c81b" translate="yes" xml:space="preserve">
          <source>Listing 5-10: Defining a &lt;code&gt;Rectangle&lt;/code&gt; struct</source>
          <target state="translated">리스팅 5-10 : &lt;code&gt;Rectangle&lt;/code&gt; 구조체 정의</target>
        </trans-unit>
        <trans-unit id="215d7b48452bb1a7e4e29de9b63af2a7536d6502" translate="yes" xml:space="preserve">
          <source>Listing 5-11: Attempting to print a &lt;code&gt;Rectangle&lt;/code&gt; instance</source>
          <target state="translated">Listing 5-11 : &lt;code&gt;Rectangle&lt;/code&gt; 인스턴스 인쇄 시도</target>
        </trans-unit>
        <trans-unit id="51e4581a0a69246f469790078df639c28316484a" translate="yes" xml:space="preserve">
          <source>Listing 5-12: Adding the annotation to derive the &lt;code&gt;Debug&lt;/code&gt; trait and printing the &lt;code&gt;Rectangle&lt;/code&gt; instance using debug formatting</source>
          <target state="translated">코드 5-12 : &lt;code&gt;Debug&lt;/code&gt; 특성 을 도출하기 위해 주석 추가 및 디버그 형식을 사용하여 &lt;code&gt;Rectangle&lt;/code&gt; 인스턴스 인쇄</target>
        </trans-unit>
        <trans-unit id="699bc91c771ab1aa757989a11761198687ddb028" translate="yes" xml:space="preserve">
          <source>Listing 5-13: Defining an &lt;code&gt;area&lt;/code&gt; method on the &lt;code&gt;Rectangle&lt;/code&gt; struct</source>
          <target state="translated">Listing 5-13 : &lt;code&gt;Rectangle&lt;/code&gt; 구조체 에서 &lt;code&gt;area&lt;/code&gt; 메서드 정의</target>
        </trans-unit>
        <trans-unit id="a7947d12bdeedd386158963338c53b8bc7ffe517" translate="yes" xml:space="preserve">
          <source>Listing 5-14: Using the as-yet-unwritten &lt;code&gt;can_hold&lt;/code&gt; method</source>
          <target state="translated">Listing 5-14 : 아직 기록되지 않은 &lt;code&gt;can_hold&lt;/code&gt; 메소드 사용</target>
        </trans-unit>
        <trans-unit id="ac5804944047dd0d4d02603d3156bc632d3eb2b1" translate="yes" xml:space="preserve">
          <source>Listing 5-15: Implementing the &lt;code&gt;can_hold&lt;/code&gt; method on &lt;code&gt;Rectangle&lt;/code&gt; that takes another &lt;code&gt;Rectangle&lt;/code&gt; instance as a parameter</source>
          <target state="translated">Listing 5-15 : 다른 &lt;code&gt;Rectangle&lt;/code&gt; 인스턴스를 매개 변수로 사용하는 &lt;code&gt;Rectangle&lt;/code&gt; 에서 &lt;code&gt;can_hold&lt;/code&gt; 메소드 구현</target>
        </trans-unit>
        <trans-unit id="c33d8fdde14f54cb5966c1287889cdff4840627d" translate="yes" xml:space="preserve">
          <source>Listing 5-16: Rewriting Listing 5-15 using multiple &lt;code&gt;impl&lt;/code&gt; blocks</source>
          <target state="translated">Listing 5-16 : 여러 &lt;code&gt;impl&lt;/code&gt; 블록을 사용하여 Listing 5-15 재 작성</target>
        </trans-unit>
        <trans-unit id="0d520975db988eb4fce4d70d69c7071a6ef03266" translate="yes" xml:space="preserve">
          <source>Listing 5-1: A &lt;code&gt;User&lt;/code&gt; struct definition</source>
          <target state="translated">Listing 5-1 : &lt;code&gt;User&lt;/code&gt; 구조체 정의</target>
        </trans-unit>
        <trans-unit id="8977673d81d2f7d288e8671e5db4e29f849d9ecf" translate="yes" xml:space="preserve">
          <source>Listing 5-2: Creating an instance of the &lt;code&gt;User&lt;/code&gt; struct</source>
          <target state="translated">Listing 5-2 : &lt;code&gt;User&lt;/code&gt; 구조체 의 인스턴스 만들기</target>
        </trans-unit>
        <trans-unit id="1f41e38c696b4c7289ac53c56e434aedcaeb6f66" translate="yes" xml:space="preserve">
          <source>Listing 5-3: Changing the value in the &lt;code&gt;email&lt;/code&gt; field of a &lt;code&gt;User&lt;/code&gt; instance</source>
          <target state="translated">Listing 5-3 : &lt;code&gt;User&lt;/code&gt; 인스턴스 의 &lt;code&gt;email&lt;/code&gt; 필드 에서 값 변경</target>
        </trans-unit>
        <trans-unit id="db94d7ba29205268f6081fc57937619cd38d7b59" translate="yes" xml:space="preserve">
          <source>Listing 5-4 shows a &lt;code&gt;build_user&lt;/code&gt; function that returns a &lt;code&gt;User&lt;/code&gt; instance with the given email and username. The &lt;code&gt;active&lt;/code&gt; field gets the value of &lt;code&gt;true&lt;/code&gt;, and the &lt;code&gt;sign_in_count&lt;/code&gt; gets a value of &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">리스트 5-4는 주어진 이메일과 사용자 이름 으로 &lt;code&gt;User&lt;/code&gt; 인스턴스 를 반환 하는 &lt;code&gt;build_user&lt;/code&gt; 함수를 보여줍니다 . &lt;code&gt;active&lt;/code&gt; 필드의 값을 얻을 &lt;code&gt;true&lt;/code&gt; , 그리고 &lt;code&gt;sign_in_count&lt;/code&gt; 값 얻는다 &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6180049bbfd730536060167de16372ef8ac3e4b9" translate="yes" xml:space="preserve">
          <source>Listing 5-4: A &lt;code&gt;build_user&lt;/code&gt; function that takes an email and username and returns a &lt;code&gt;User&lt;/code&gt; instance</source>
          <target state="translated">Listing 5-4 : 이메일과 사용자 이름을 &lt;code&gt;build_user&lt;/code&gt; &lt;code&gt;User&lt;/code&gt; 인스턴스를 반환하는 build_user 함수</target>
        </trans-unit>
        <trans-unit id="34728d882e237dc7414c13bed692d3b4929c4000" translate="yes" xml:space="preserve">
          <source>Listing 5-5: A &lt;code&gt;build_user&lt;/code&gt; function that uses field init shorthand because the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; parameters have the same name as struct fields</source>
          <target state="translated">Listing 5-5 : &lt;code&gt;email&lt;/code&gt; 및 &lt;code&gt;username&lt;/code&gt; 매개 변수의 이름이 struct 필드 와 같기 때문에 field init 속기를 사용 하는 &lt;code&gt;build_user&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="ec811ef73f249a9f5effaa4a387e2b4034ee1f33" translate="yes" xml:space="preserve">
          <source>Listing 5-6: Creating a new &lt;code&gt;User&lt;/code&gt; instance using some of the values from &lt;code&gt;user1&lt;/code&gt;</source>
          <target state="translated">Listing 5-6 : &lt;code&gt;user1&lt;/code&gt; 의 일부 값을 사용하여 새 &lt;code&gt;User&lt;/code&gt; 인스턴스 만들기</target>
        </trans-unit>
        <trans-unit id="b1042745496de77683494947cb9ddb8ceed34b79" translate="yes" xml:space="preserve">
          <source>Listing 5-7: Using struct update syntax to set new &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; values for a &lt;code&gt;User&lt;/code&gt; instance but use the rest of the values from the fields of the instance in the &lt;code&gt;user1&lt;/code&gt; variable</source>
          <target state="translated">Listing 5-7 : struct update 구문을 사용 하여 &lt;code&gt;User&lt;/code&gt; 인스턴스에 새 &lt;code&gt;email&lt;/code&gt; 및 &lt;code&gt;username&lt;/code&gt; 값 을 설정 하지만 &lt;code&gt;user1&lt;/code&gt; 변수 에있는 인스턴스 필드의 나머지 값을 사용</target>
        </trans-unit>
        <trans-unit id="e14121427e21bb563614dab69325b3429a192108" translate="yes" xml:space="preserve">
          <source>Listing 5-8: Calculating the area of a rectangle specified by separate width and height variables</source>
          <target state="translated">코드 5-8 : 별도의 너비 및 높이 변수로 지정된 사각형의 면적 계산</target>
        </trans-unit>
        <trans-unit id="7bbfc498e81af47ae5c6d73043fae00ce626556b" translate="yes" xml:space="preserve">
          <source>Listing 5-9 shows another version of our program that uses tuples.</source>
          <target state="translated">리스트 5-9는 튜플을 사용하는 다른 버전의 프로그램을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="6a953b763de90df2dde4e24bf54ab976b248c596" translate="yes" xml:space="preserve">
          <source>Listing 5-9: Specifying the width and height of the rectangle with a tuple</source>
          <target state="translated">Listing 5-9 : 튜플로 사각형의 너비와 높이 지정</target>
        </trans-unit>
        <trans-unit id="317a48edaf28b6e0bc990dd7fdac683d53540196" translate="yes" xml:space="preserve">
          <source>Listing 6-1: Storing the data and &lt;code&gt;IpAddrKind&lt;/code&gt; variant of an IP address using a &lt;code&gt;struct&lt;/code&gt;</source>
          <target state="translated">Listing 6-1 : &lt;code&gt;struct&lt;/code&gt; 사용하여 IP 주소 의 데이터 및 &lt;code&gt;IpAddrKind&lt;/code&gt; 변형 저장</target>
        </trans-unit>
        <trans-unit id="1601efc6142f63b762ff62527eea307503181b6a" translate="yes" xml:space="preserve">
          <source>Listing 6-2: A &lt;code&gt;Message&lt;/code&gt; enum whose variants each store different amounts and types of values</source>
          <target state="translated">Listing 6-2 : 변형마다 각각 다른 양과 유형의 값을 저장 하는 &lt;code&gt;Message&lt;/code&gt; 열거 형</target>
        </trans-unit>
        <trans-unit id="bb2eab7c4a0535ef9e635c657b2617ba75b207b2" translate="yes" xml:space="preserve">
          <source>Listing 6-3: An enum and a &lt;code&gt;match&lt;/code&gt; expression that has the variants of the enum as its patterns</source>
          <target state="translated">Listing 6-3 : 열거 형 의 변형을 패턴으로 갖는 열거 형 및 &lt;code&gt;match&lt;/code&gt; 표현식</target>
        </trans-unit>
        <trans-unit id="d6c517233a50d5aa0d34c931713369f59c96a142" translate="yes" xml:space="preserve">
          <source>Listing 6-4: A &lt;code&gt;Coin&lt;/code&gt; enum in which the &lt;code&gt;Quarter&lt;/code&gt; variant also holds a &lt;code&gt;UsState&lt;/code&gt; value</source>
          <target state="translated">리스팅 6-4 : &lt;code&gt;Quarter&lt;/code&gt; 변형이 &lt;code&gt;UsState&lt;/code&gt; 값을 보유한 &lt;code&gt;Coin&lt;/code&gt; 열거 형</target>
        </trans-unit>
        <trans-unit id="366c8a5cb8f6569790b9502993e020f80e58e7d9" translate="yes" xml:space="preserve">
          <source>Listing 6-5: A function that uses a &lt;code&gt;match&lt;/code&gt; expression on an &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Listing 6-5 : &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;match&lt;/code&gt; 표현식 을 사용하는 함수</target>
        </trans-unit>
        <trans-unit id="b44856bc0b2ade67a9a9034ba41c6088eb8b5876" translate="yes" xml:space="preserve">
          <source>Listing 6-6: A &lt;code&gt;match&lt;/code&gt; that only cares about executing code when the value is &lt;code&gt;Some(3)&lt;/code&gt;</source>
          <target state="translated">코드 6-6 : 값이 &lt;code&gt;Some(3)&lt;/code&gt; 경우 코드 실행에만 관심이 있는 &lt;code&gt;match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9aea56a1642523d4f586445bbbe1e6df04bda515" translate="yes" xml:space="preserve">
          <source>Listing 7-10: Designating an enum as public makes all its variants public</source>
          <target state="translated">Listing 7-10 : 열거 형을 퍼블릭으로 지정하면 모든 변형이 공개됩니다</target>
        </trans-unit>
        <trans-unit id="bf59002e067b4260f78026ae1cbff2f4c945bcd3" translate="yes" xml:space="preserve">
          <source>Listing 7-11: Bringing a module into scope with &lt;code&gt;use&lt;/code&gt;</source>
          <target state="translated">코드 7-11 : &lt;code&gt;use&lt;/code&gt; 범위 내에서 모듈 가져 오기</target>
        </trans-unit>
        <trans-unit id="627f0fb141903559b8c35dc9a30c45aa787531ae" translate="yes" xml:space="preserve">
          <source>Listing 7-12: Bringing a module into scope with &lt;code&gt;use&lt;/code&gt; and a relative path</source>
          <target state="translated">목록 7-12 : &lt;code&gt;use&lt;/code&gt; 및 상대 경로 를 사용 하여 모듈을 범위로 가져 오기</target>
        </trans-unit>
        <trans-unit id="2eaa640be3385f0ca9c0fa9e7ba534043bef56b3" translate="yes" xml:space="preserve">
          <source>Listing 7-12: Bringing a module into scope with &lt;code&gt;use&lt;/code&gt; and a relative path starting with &lt;code&gt;self&lt;/code&gt;</source>
          <target state="translated">코드 7-12 : 모듈을 범위 내에서 &lt;code&gt;use&lt;/code&gt; 하고 &lt;code&gt;self&lt;/code&gt; 로 시작하는 상대 경로</target>
        </trans-unit>
        <trans-unit id="7307f72b192d3253733cf7ac65bc967e5201e698" translate="yes" xml:space="preserve">
          <source>Listing 7-13: Bringing the &lt;code&gt;add_to_waitlist&lt;/code&gt; function into scope with &lt;code&gt;use&lt;/code&gt;, which is unidiomatic</source>
          <target state="translated">7-13 리스팅 다음 가져 오는 &lt;code&gt;add_to_waitlist&lt;/code&gt; 과 범위에 기능을 &lt;code&gt;use&lt;/code&gt; , unidiomatic이다</target>
        </trans-unit>
        <trans-unit id="4bfe10f5f56827d0c30e6d426efc295cb82f3011" translate="yes" xml:space="preserve">
          <source>Listing 7-14: Bringing &lt;code&gt;HashMap&lt;/code&gt; into scope in an idiomatic way</source>
          <target state="translated">Listing 7-14 : 관용적 방식으로 &lt;code&gt;HashMap&lt;/code&gt; 을 범위 내로 가져 오기</target>
        </trans-unit>
        <trans-unit id="13cc4e98f442cfec3a674fc14b744bd81731e983" translate="yes" xml:space="preserve">
          <source>Listing 7-15: Bringing two types with the same name into the same scope requires using their parent modules.</source>
          <target state="translated">예제 7-15 : 이름이 같은 두 유형을 같은 범위로 가져 오려면 상위 모듈을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="84d695a06193ab052dbc08a9625b8eec61fc744f" translate="yes" xml:space="preserve">
          <source>Listing 7-16: Renaming a type when it&amp;rsquo;s brought into scope with the &lt;code&gt;as&lt;/code&gt; keyword</source>
          <target state="translated">예제 7-16 : &lt;code&gt;as&lt;/code&gt; 키워드를 사용하여 유형을 가져올 때 유형 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="b9a4845143b70c35aeb28053a3eeca0d2c48207c" translate="yes" xml:space="preserve">
          <source>Listing 7-17 shows the code in Listing 7-11 with &lt;code&gt;use&lt;/code&gt; in the root module changed to &lt;code&gt;pub use&lt;/code&gt;.</source>
          <target state="translated">함께 목록 7-11 7-17 쇼 코드 목록 &lt;code&gt;use&lt;/code&gt; 루트 모듈로 변경 &lt;code&gt;pub use&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5775bbe7f173f5b092d3b5595e5501b634454927" translate="yes" xml:space="preserve">
          <source>Listing 7-17: Making a name available for any code to use from a new scope with &lt;code&gt;pub use&lt;/code&gt;</source>
          <target state="translated">코드 7-17 : &lt;code&gt;pub use&lt;/code&gt; 하여 새 범위에서 모든 코드를 사용할 수 있도록 이름 만들기</target>
        </trans-unit>
        <trans-unit id="912681010ae055ad4a4e14893b49ef9e67bf7a57" translate="yes" xml:space="preserve">
          <source>Listing 7-18: Specifying a nested path to bring multiple items with the same prefix into scope</source>
          <target state="translated">Listing 7-18 : 접두사가 동일한 여러 항목을 범위로 가져 오기 위해 중첩 경로 지정</target>
        </trans-unit>
        <trans-unit id="7929ee4086c93140005baff67b15092af266a6f9" translate="yes" xml:space="preserve">
          <source>Listing 7-19: Two &lt;code&gt;use&lt;/code&gt; statements where one is a subpath of the other</source>
          <target state="translated">Listing 7-19 : 하나는 다른 것의 서브 패스 인 두 개의 &lt;code&gt;use&lt;/code&gt; 문장</target>
        </trans-unit>
        <trans-unit id="a2aaaa4b01d1723ea36359ddbffb4df019af229b" translate="yes" xml:space="preserve">
          <source>Listing 7-1: A &lt;code&gt;front_of_house&lt;/code&gt; module containing other modules that then contain functions</source>
          <target state="translated">Listing 7-1 : 함수를 포함하는 다른 모듈을 포함 하는 &lt;code&gt;front_of_house&lt;/code&gt; 모듈</target>
        </trans-unit>
        <trans-unit id="7ace7d42180fea41417a89f31ff66a7a735c654d" translate="yes" xml:space="preserve">
          <source>Listing 7-2 shows the module tree for the structure in Listing 7-1.</source>
          <target state="translated">목록 7-2는 목록 7-1의 구조에 대한 모듈 트리를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5cce3b1fe3cef4127713826e0a1511402930e99e" translate="yes" xml:space="preserve">
          <source>Listing 7-20: Combining the paths in Listing 7-19 into one &lt;code&gt;use&lt;/code&gt; statement</source>
          <target state="translated">Listing 7-20 : Listing 7-19의 경로를 하나의 &lt;code&gt;use&lt;/code&gt; 문 으로 결합</target>
        </trans-unit>
        <trans-unit id="0657fcf2cf161292e1ede5fad919e1df2f0ae319" translate="yes" xml:space="preserve">
          <source>Listing 7-21: Declaring the &lt;code&gt;front_of_house&lt;/code&gt; module whose body will be in &lt;em&gt;src/front_of_house.rs&lt;/em&gt;</source>
          <target state="translated">Listing 7-21 : 본문이 &lt;em&gt;src / front_of_house.rs&lt;/em&gt; 에 있는 &lt;code&gt;front_of_house&lt;/code&gt; 모듈 선언&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12fed27a189eb7e953d8431926a31688a62084bf" translate="yes" xml:space="preserve">
          <source>Listing 7-22: Definitions inside the &lt;code&gt;front_of_house&lt;/code&gt; module in &lt;em&gt;src/front_of_house.rs&lt;/em&gt;</source>
          <target state="translated">Listing 7-22 : &lt;em&gt;src / front_of_house.rs&lt;/em&gt; 의 &lt;code&gt;front_of_house&lt;/code&gt; 모듈 내부 정의&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c69834f077cc0ac84e532ef8edf36827562c8532" translate="yes" xml:space="preserve">
          <source>Listing 7-2: The module tree for the code in Listing 7-1</source>
          <target state="translated">Listing 7-2 : Listing 7-1의 코드를위한 모듈 트리</target>
        </trans-unit>
        <trans-unit id="17c05eb6de82b1aab0786252e0e077ec97ff008c" translate="yes" xml:space="preserve">
          <source>Listing 7-3: Calling the &lt;code&gt;add_to_waitlist&lt;/code&gt; function using absolute and relative paths</source>
          <target state="translated">Listing 7-3 : 절대 및 상대 경로를 사용하여 &lt;code&gt;add_to_waitlist&lt;/code&gt; 함수 호출</target>
        </trans-unit>
        <trans-unit id="138953296933de5b725582f9130d0b608bf9580f" translate="yes" xml:space="preserve">
          <source>Listing 7-4: Compiler errors from building the code in Listing 7-3</source>
          <target state="translated">코드 7-4 : 코드 7-3에서 코드를 빌드 할 때 발생하는 컴파일러 오류</target>
        </trans-unit>
        <trans-unit id="5358874765e3618db092d71798863b6af357d074" translate="yes" xml:space="preserve">
          <source>Listing 7-5: Declaring the &lt;code&gt;hosting&lt;/code&gt; module as &lt;code&gt;pub&lt;/code&gt; to use it from &lt;code&gt;eat_at_restaurant&lt;/code&gt;</source>
          <target state="translated">Listing 7-5 : &lt;code&gt;hosting&lt;/code&gt; 모듈을 &lt;code&gt;pub&lt;/code&gt; 으로 선언하여 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 에서 사용하기</target>
        </trans-unit>
        <trans-unit id="dbd4236a7438fe70ec1b7611b01adfc75ff00c6f" translate="yes" xml:space="preserve">
          <source>Listing 7-6: Compiler errors from building the code in Listing 7-5</source>
          <target state="translated">코드 7-6 : 코드 7-5에서 코드를 빌드 할 때 발생하는 컴파일러 오류</target>
        </trans-unit>
        <trans-unit id="c3941587d9eaf9be7f1ce3c3583d7701dc52a95d" translate="yes" xml:space="preserve">
          <source>Listing 7-7: Adding the &lt;code&gt;pub&lt;/code&gt; keyword to &lt;code&gt;mod hosting&lt;/code&gt; and &lt;code&gt;fn add_to_waitlist&lt;/code&gt; lets us call the function from &lt;code&gt;eat_at_restaurant&lt;/code&gt;</source>
          <target state="translated">7-7 목록 : 추가 중 &lt;code&gt;pub&lt;/code&gt; 에 키워드를 &lt;code&gt;mod hosting&lt;/code&gt; 및 &lt;code&gt;fn add_to_waitlist&lt;/code&gt; 우리의 함수를 호출 할 수 있습니다 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="a76fe093faad5f27e1a067c78c0aafcf4b039312" translate="yes" xml:space="preserve">
          <source>Listing 7-8: Calling a function using a relative path starting with &lt;code&gt;super&lt;/code&gt;</source>
          <target state="translated">코드 7-8 : &lt;code&gt;super&lt;/code&gt; 로 시작하는 상대 경로를 사용하여 함수 호출</target>
        </trans-unit>
        <trans-unit id="26a8780dbfd1610ed031bd14769f19fc17e857a7" translate="yes" xml:space="preserve">
          <source>Listing 7-9: A struct with some public fields and some private fields</source>
          <target state="translated">Listing 7-9 : 일부 공개 필드와 일부 개인 필드가있는 구조체</target>
        </trans-unit>
        <trans-unit id="ec9e6adb30859e7e4f29693403f451b5e7def42d" translate="yes" xml:space="preserve">
          <source>Listing 8-10: Defining an &lt;code&gt;enum&lt;/code&gt; to store values of different types in one vector</source>
          <target state="translated">리스팅 8-10 : 하나의 벡터에 다른 유형의 값을 저장 하기위한 &lt;code&gt;enum&lt;/code&gt; 정의</target>
        </trans-unit>
        <trans-unit id="cea93b472282b28767ac501d12597afbe6576f40" translate="yes" xml:space="preserve">
          <source>Listing 8-11: Creating a new, empty &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">Listing 8-11 : 비어있는 새 &lt;code&gt;String&lt;/code&gt; 만들기</target>
        </trans-unit>
        <trans-unit id="449bcdecf538f70bac98718626559a9dec686219" translate="yes" xml:space="preserve">
          <source>Listing 8-12: Using the &lt;code&gt;to_string&lt;/code&gt; method to create a &lt;code&gt;String&lt;/code&gt; from a string literal</source>
          <target state="translated">8-12 리스팅 다음 사용 &lt;code&gt;to_string&lt;/code&gt; 의 만드는 방법을 &lt;code&gt;String&lt;/code&gt; 문자열 리터럴에서을</target>
        </trans-unit>
        <trans-unit id="525ec57ebd9d64b742269ef80a5a9e1a1645f7b6" translate="yes" xml:space="preserve">
          <source>Listing 8-13: Using the &lt;code&gt;String::from&lt;/code&gt; function to create a &lt;code&gt;String&lt;/code&gt; from a string literal</source>
          <target state="translated">8-13 리스팅 다음 사용하여 &lt;code&gt;String::from&lt;/code&gt; 생성하는 기능을 &lt;code&gt;String&lt;/code&gt; 문자열 리터럴에서</target>
        </trans-unit>
        <trans-unit id="d906213ccce95be9469d5e7e1272b3c261eb636e" translate="yes" xml:space="preserve">
          <source>Listing 8-14: Storing greetings in different languages in strings</source>
          <target state="translated">코드 8-14 : 인사말을 다른 언어로 문자열에 저장</target>
        </trans-unit>
        <trans-unit id="4e16d57b32c6bb58e6e98758f0d5544954c88fbe" translate="yes" xml:space="preserve">
          <source>Listing 8-15: Appending a string slice to a &lt;code&gt;String&lt;/code&gt; using the &lt;code&gt;push_str&lt;/code&gt; method</source>
          <target state="translated">8-15 목록 : A를 문자열 조각을 덧붙이 &lt;code&gt;String&lt;/code&gt; 은 Using &lt;code&gt;push_str&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="895983d0f0dfd6b316691d0a283fc6f26b14574d" translate="yes" xml:space="preserve">
          <source>Listing 8-16: Using a string slice after appending its contents to a &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">8-16 목록 : A와 내용을 추가 한 후 문자열 조각을 사용하여 &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be1c3cc71d267147b47e57349e732c62e6e14554" translate="yes" xml:space="preserve">
          <source>Listing 8-17: Adding one character to a &lt;code&gt;String&lt;/code&gt; value using &lt;code&gt;push&lt;/code&gt;</source>
          <target state="translated">코드 8-17 : &lt;code&gt;push&lt;/code&gt; 를 사용하여 하나의 문자를 &lt;code&gt;String&lt;/code&gt; 값에 추가</target>
        </trans-unit>
        <trans-unit id="8e49cdf5a7dd6bf63cd0813321de49b8b65881bd" translate="yes" xml:space="preserve">
          <source>Listing 8-18: Using the &lt;code&gt;+&lt;/code&gt; operator to combine two &lt;code&gt;String&lt;/code&gt; values into a new &lt;code&gt;String&lt;/code&gt; value</source>
          <target state="translated">Listing 8-18 : &lt;code&gt;+&lt;/code&gt; 연산자를 사용하여 두 개의 &lt;code&gt;String&lt;/code&gt; 값을 새로운 &lt;code&gt;String&lt;/code&gt; 값 으로 결합</target>
        </trans-unit>
        <trans-unit id="5330837200303e59f08e75f294793b7ee402fe39" translate="yes" xml:space="preserve">
          <source>Listing 8-19: Attempting to use indexing syntax with a String</source>
          <target state="translated">코드 8-19 : 문자열과 함께 색인 구문 사용</target>
        </trans-unit>
        <trans-unit id="223eba8ee062db2b78f2b0de95ae46f68365d0b3" translate="yes" xml:space="preserve">
          <source>Listing 8-1: Creating a new, empty vector to hold values of type &lt;code&gt;i32&lt;/code&gt;</source>
          <target state="translated">목록 8-1 : &lt;code&gt;i32&lt;/code&gt; 유형의 값을 보유 할 비어있는 새 벡터 만들기</target>
        </trans-unit>
        <trans-unit id="74238a9658332d19668b2827615b25fb5c8271c5" translate="yes" xml:space="preserve">
          <source>Listing 8-20: Creating a new hash map and inserting some keys and values</source>
          <target state="translated">코드 8-20 : 새로운 해시 맵 생성 및 일부 키와 값 삽입</target>
        </trans-unit>
        <trans-unit id="05be5b643eed350dd5cafe3fdd6536c472f47ed7" translate="yes" xml:space="preserve">
          <source>Listing 8-21: Creating a hash map from a list of teams and a list of scores</source>
          <target state="translated">목록 8-21 : 팀 목록과 점수 목록에서 해시 맵 작성</target>
        </trans-unit>
        <trans-unit id="c1972681fe611d0dc8b4a05a054a71a52a976fa0" translate="yes" xml:space="preserve">
          <source>Listing 8-22: Showing that keys and values are owned by the hash map once they&amp;rsquo;re inserted</source>
          <target state="translated">Listing 8-22 : 키와 값이 삽입되면 해시 맵이 소유하고 있음을 보여줌</target>
        </trans-unit>
        <trans-unit id="e3917d0559c741a7086f2a76463784d8190476d3" translate="yes" xml:space="preserve">
          <source>Listing 8-23: Accessing the score for the Blue team stored in the hash map</source>
          <target state="translated">목록 8-23 : 해시 맵에 저장된 Blue 팀의 점수에 액세스</target>
        </trans-unit>
        <trans-unit id="2c2c2fb6f8789b4a667ac47de037219e5bfa607d" translate="yes" xml:space="preserve">
          <source>Listing 8-24: Replacing a value stored with a particular key</source>
          <target state="translated">코드 8-24 : 특정 키로 저장된 값 바꾸기</target>
        </trans-unit>
        <trans-unit id="da51f9790954bb7ba88a08baf3bbfb3c719c031b" translate="yes" xml:space="preserve">
          <source>Listing 8-25: Using the &lt;code&gt;entry&lt;/code&gt; method to only insert if the key does not already have a value</source>
          <target state="translated">코드 8-25 : &lt;code&gt;entry&lt;/code&gt; 방법을 사용하여 키에 값이없는 경우에만 삽입</target>
        </trans-unit>
        <trans-unit id="0728ab93b8e476a6cb26b8c39bda73e6af7fad94" translate="yes" xml:space="preserve">
          <source>Listing 8-26: Counting occurrences of words using a hash map that stores words and counts</source>
          <target state="translated">코드 8-26 : 단어와 개수를 저장하는 해시 맵을 사용하여 단어의 개수 계산</target>
        </trans-unit>
        <trans-unit id="5b801284224f3b692ce8aba962be2604afe8af86" translate="yes" xml:space="preserve">
          <source>Listing 8-2: Creating a new vector containing values</source>
          <target state="translated">Listing 8-2 : 값을 포함하는 새로운 벡터 만들기</target>
        </trans-unit>
        <trans-unit id="5ec25985edb7d257137523f2e85542597e022b7c" translate="yes" xml:space="preserve">
          <source>Listing 8-3: Using the &lt;code&gt;push&lt;/code&gt; method to add values to a vector</source>
          <target state="translated">Listing 8-3 : &lt;code&gt;push&lt;/code&gt; 메소드를 사용하여 벡터에 값 추가</target>
        </trans-unit>
        <trans-unit id="156f483c8c709fefaaa433516c634cc9665e65bd" translate="yes" xml:space="preserve">
          <source>Listing 8-4: Showing where the vector and its elements are dropped</source>
          <target state="translated">Listing 8-4 : 벡터와 요소가 놓인 위치 표시</target>
        </trans-unit>
        <trans-unit id="f15358ebeb06032f8545e418cd9bf9d9b52e722b" translate="yes" xml:space="preserve">
          <source>Listing 8-5 shows both methods of accessing a value in a vector, either with indexing syntax or the &lt;code&gt;get&lt;/code&gt; method.</source>
          <target state="translated">리스팅 8-5는 색인 구문 또는 &lt;code&gt;get&lt;/code&gt; 메소드 를 사용하여 벡터의 값에 액세스하는 두 가지 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="475e3ef70b582308fcd81d0204ad1d386df12e13" translate="yes" xml:space="preserve">
          <source>Listing 8-5: Using indexing syntax or the &lt;code&gt;get&lt;/code&gt; method to access an item in a vector</source>
          <target state="translated">Listing 8-5 : 색인 구문 또는 &lt;code&gt;get&lt;/code&gt; 메소드를 사용하여 벡터의 항목에 액세스</target>
        </trans-unit>
        <trans-unit id="b50a442cace32e79598ac4b4608fcfde6c143dd2" translate="yes" xml:space="preserve">
          <source>Listing 8-6: Attempting to access the element at index 100 in a vector containing five elements</source>
          <target state="translated">Listing 8-6 : 다섯 개의 요소를 포함하는 벡터의 인덱스 100에서 요소에 액세스하려고 시도</target>
        </trans-unit>
        <trans-unit id="bb8bfe9b988191756b3150651d6052a13005b6d8" translate="yes" xml:space="preserve">
          <source>Listing 8-7: Attempting to add an element to a vector while holding a reference to an item</source>
          <target state="translated">목록 8-7 : 항목에 대한 참조를 유지하면서 벡터에 요소를 추가하려고 시도</target>
        </trans-unit>
        <trans-unit id="4f50ef1e57a7d65ae00af617aaadd291853ff28f" translate="yes" xml:space="preserve">
          <source>Listing 8-8: Printing each element in a vector by iterating over the elements using a &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">Listing 8-8 : &lt;code&gt;for&lt;/code&gt; 루프를 사용하여 요소를 반복하여 벡터의 각 요소 인쇄</target>
        </trans-unit>
        <trans-unit id="dca8580f66c3e936ba07ecc234ef4bdeafdcb3eb" translate="yes" xml:space="preserve">
          <source>Listing 8-9: Iterating over mutable references to elements in a vector</source>
          <target state="translated">Listing 8-9 : 벡터의 요소에 대한 가변 참조에 대한 반복</target>
        </trans-unit>
        <trans-unit id="6cc132939bab570f42d87e47a7642c3f25c61e61" translate="yes" xml:space="preserve">
          <source>Listing 9-10: A &lt;code&gt;Guess&lt;/code&gt; type that will only continue with values between 1 and 100</source>
          <target state="translated">예제 9-10 : 1과 100 사이의 값으로 만 계속되는 &lt;code&gt;Guess&lt;/code&gt; 유형</target>
        </trans-unit>
        <trans-unit id="4c2e59eaf97a41a1a63401fdbff79c890dd98f4e" translate="yes" xml:space="preserve">
          <source>Listing 9-1: Attempting to access an element beyond the end of a vector, which will cause a call to &lt;code&gt;panic!&lt;/code&gt;</source>
          <target state="translated">Listing 9-1 : 벡터 끝 이외의 요소에 액세스하려고하면 호출이 &lt;code&gt;panic!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="582171a62a2171fac9838d42c4fd1d2f090cbd88" translate="yes" xml:space="preserve">
          <source>Listing 9-2: The backtrace generated by a call to &lt;code&gt;panic!&lt;/code&gt; displayed when the environment variable &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; is set</source>
          <target state="translated">리스팅 9-2 : &lt;code&gt;panic!&lt;/code&gt; 에 대한 호출에 의해 생성 된 역 추적 ! 환경 변수 &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; 가 설정 되면 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="036c67bd6abf8505561ce1f6632e697e4db21dff" translate="yes" xml:space="preserve">
          <source>Listing 9-3: Opening a file</source>
          <target state="translated">Listing 9-3 : 파일 열기</target>
        </trans-unit>
        <trans-unit id="564e77476cbfc201bd8532f0aa35b867559d7dc1" translate="yes" xml:space="preserve">
          <source>Listing 9-4: Using a &lt;code&gt;match&lt;/code&gt; expression to handle the &lt;code&gt;Result&lt;/code&gt; variants that might be returned</source>
          <target state="translated">Listing 9-4 : &lt;code&gt;match&lt;/code&gt; 표현식을 사용하여 반환 될 수 있는 &lt;code&gt;Result&lt;/code&gt; 변형 처리</target>
        </trans-unit>
        <trans-unit id="f7ff4b6392fc3709756a7aad7bdbd5c0684d1e92" translate="yes" xml:space="preserve">
          <source>Listing 9-5: Handling different kinds of errors in different ways</source>
          <target state="translated">코드 9-5 : 다양한 방식으로 다양한 종류의 오류 처리</target>
        </trans-unit>
        <trans-unit id="9fc8faf439c8af703e6a0f9b1214df4e47fbaae9" translate="yes" xml:space="preserve">
          <source>Listing 9-6: A function that returns errors to the calling code using &lt;code&gt;match&lt;/code&gt;</source>
          <target state="translated">코드 9-6 : &lt;code&gt;match&lt;/code&gt; 를 사용하여 호출 코드에 오류를 반환하는 함수</target>
        </trans-unit>
        <trans-unit id="45a1042ad1f9e9c0e92fd770a77a7ce6f879369b" translate="yes" xml:space="preserve">
          <source>Listing 9-7 shows an implementation of &lt;code&gt;read_username_from_file&lt;/code&gt; that has the same functionality as it had in Listing 9-6, but this implementation uses the &lt;code&gt;?&lt;/code&gt; operator.</source>
          <target state="translated">Listing 9-7은 Listing 9-6 에서와 동일한 기능을 가진 &lt;code&gt;read_username_from_file&lt;/code&gt; 의 구현을 보여 주지만이 구현은 &lt;code&gt;?&lt;/code&gt; 운영자.</target>
        </trans-unit>
        <trans-unit id="1b41b326b2c47edfb23652f3a3e5c56b62eebefe" translate="yes" xml:space="preserve">
          <source>Listing 9-7: A function that returns errors to the calling code using the &lt;code&gt;?&lt;/code&gt; operator</source>
          <target state="translated">코드 9-7 : &lt;code&gt;?&lt;/code&gt; 를 사용하여 호출 코드에 오류를 반환하는 함수 운영자</target>
        </trans-unit>
        <trans-unit id="90eaec2e8c17e57c827774a3de0679e7b72594d6" translate="yes" xml:space="preserve">
          <source>Listing 9-8: Chaining method calls after the &lt;code&gt;?&lt;/code&gt; operator</source>
          <target state="translated">코드 9-8 : &lt;code&gt;?&lt;/code&gt; 뒤에 체인 메소드 호출 운영자</target>
        </trans-unit>
        <trans-unit id="c49300b204d24f4d50d859027f56937d5db530ef" translate="yes" xml:space="preserve">
          <source>Listing 9-9: Using &lt;code&gt;fs::read_to_string&lt;/code&gt; instead of opening and then reading the file</source>
          <target state="translated">코드 9-9 : 파일을 열고 &lt;code&gt;fs::read_to_string&lt;/code&gt; 대신 fs :: read_to_string 사용</target>
        </trans-unit>
        <trans-unit id="927a3229b33488046e185d2eb8d7db010dbdbc8a" translate="yes" xml:space="preserve">
          <source>Literal Examples:</source>
          <target state="translated">리터럴 예 :</target>
        </trans-unit>
        <trans-unit id="9919907746fd6b7c7a456650766c572064bd9e4b" translate="yes" xml:space="preserve">
          <source>Literal expressions</source>
          <target state="translated">리터럴 표현</target>
        </trans-unit>
        <trans-unit id="7f5a73aa50395bb3fad4e850b2c352c0ecd8a3f6" translate="yes" xml:space="preserve">
          <source>Literal expressions in meta items must not include integer or float type suffixes.</source>
          <target state="translated">메타 항목의 리터럴 표현식에는 정수 또는 부동 유형 접미 부가 포함되지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="c0ba27c437e0ce3b461bf46459f4604a52e37849" translate="yes" xml:space="preserve">
          <source>Literal patterns</source>
          <target state="translated">리터럴 패턴</target>
        </trans-unit>
        <trans-unit id="82e462e8f97c8bdd6276f4b5c373ba583b4f9370" translate="yes" xml:space="preserve">
          <source>Literal patterns are always refutable.</source>
          <target state="translated">리터럴 패턴은 항상 반박 가능합니다.</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="9bbdaa21e6555e891cb763804578f26091a26229" translate="yes" xml:space="preserve">
          <source>Literals in attributes are new and largely unsupported in built-in attributes. Work to support literals where appropriate is ongoing. Try using an unquoted name instead:</source>
          <target state="translated">속성의 리터럴은 새로운 속성이며 기본적으로 내장 속성에서 지원되지 않습니다. 적절한 경우 리터럴을 지원하도록 노력하십시오. 따옴표없는 이름을 대신 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="dbc8c5decc9f83fed394247a86e8a4ca9e1d7d8b" translate="yes" xml:space="preserve">
          <source>Loading content...</source>
          <target state="translated">콘텐츠로드 중 ...</target>
        </trans-unit>
        <trans-unit id="7febd461607e330888c39c4c3dd6d9b42a80af25" translate="yes" xml:space="preserve">
          <source>Loads a value from the atomic integer.</source>
          <target state="translated">원자 정수에서 값을로드합니다.</target>
        </trans-unit>
        <trans-unit id="fb84f17c620d261c4856d3c111914ab16da7ffce" translate="yes" xml:space="preserve">
          <source>Loads a value from the bool.</source>
          <target state="translated">부울에서 값을로드합니다.</target>
        </trans-unit>
        <trans-unit id="7943a687e92d5ccd3fba97225b68ef38f3dab8b9" translate="yes" xml:space="preserve">
          <source>Loads a value from the pointer.</source>
          <target state="translated">포인터에서 값을로드합니다.</target>
        </trans-unit>
        <trans-unit id="499843b110d742760d4d0c2a5bdb0fce66483737" translate="yes" xml:space="preserve">
          <source>Loads the current value of the pointer.</source>
          <target state="translated">포인터의 현재 값을로드합니다.</target>
        </trans-unit>
        <trans-unit id="547dc7d8078ab1ae5287beebc8050b70c988e773" translate="yes" xml:space="preserve">
          <source>Loads the current value of the pointer. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">포인터의 현재 값을로드합니다. 이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;order&lt;/code&gt; 로 전달 하여 &lt;code&gt;load&lt;/code&gt; 방법을 통해 &lt;code&gt;std::sync::atomic&lt;/code&gt; 유형에서 사용 가능합니다 . 예를 들어, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3dae14c51da8e1782cd500b2c3aa7b9a70d4fafd" translate="yes" xml:space="preserve">
          <source>Loads the current value of the pointer. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">포인터의 현재 값을로드합니다. 이 내장 함수의 안정화 된 버전은 &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;order&lt;/code&gt; 로 전달 하여 &lt;code&gt;load&lt;/code&gt; 방법을 통해 &lt;code&gt;std::sync::atomic&lt;/code&gt; 유형에서 사용 가능합니다 . 예를 들어, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
