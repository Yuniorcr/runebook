<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="4a1a063010e523349572dfe2f3d4599fdbf7faf0" translate="yes" xml:space="preserve">
          <source>The vector will not allocate until elements are pushed onto it.</source>
          <target state="translated">벡터는 요소가 푸시 될 때까지 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0be7c75604b320ccdf03b29c2cf5dc9816b16f93" translate="yes" xml:space="preserve">
          <source>The version of &lt;a href=&quot;http://www.unicode.org/&quot;&gt;Unicode&lt;/a&gt; that the Unicode parts of &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; methods are based on.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 및 &lt;code&gt;str&lt;/code&gt; 메서드 의 유니 코드 부분 이 기반으로 하는 유니 &lt;a href=&quot;http://www.unicode.org/&quot;&gt;코드&lt;/a&gt; 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="2e7d7937a98ae8b5db75096586d34257981a3b35" translate="yes" xml:space="preserve">
          <source>The version of the call operator that takes a by-value receiver.</source>
          <target state="translated">값별 수신자를 취하는 호출 연산자의 버전입니다.</target>
        </trans-unit>
        <trans-unit id="98bb0c84eb64933810db44150740704106b58e5b" translate="yes" xml:space="preserve">
          <source>The version of the call operator that takes a mutable receiver.</source>
          <target state="translated">변경 가능한 수신자를 취하는 호출 연산자의 버전입니다.</target>
        </trans-unit>
        <trans-unit id="a10ea779af62c4002732377426c5466fd9b100f8" translate="yes" xml:space="preserve">
          <source>The version of the call operator that takes an immutable receiver.</source>
          <target state="translated">변경 불가능한 수신자를 취하는 호출 연산자의 버전입니다.</target>
        </trans-unit>
        <trans-unit id="69df36660018fe57f4bfd6fa17c4ad5d9397540f" translate="yes" xml:space="preserve">
          <source>The volatile intrinsics provide operations intended to act on I/O memory, which are guaranteed to not be reordered by the compiler across other volatile intrinsics. See the LLVM documentation on [&lt;a href=&quot;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&quot;&gt;volatile&lt;/a&gt;].</source>
          <target state="translated">휘발성 내장 함수는 I / O 메모리에서 작동하도록 의도 된 작업을 제공하며 다른 휘발성 내장 함수에서 컴파일러가 순서를 다시 지정할 수는 없습니다. [ &lt;a href=&quot;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&quot;&gt;volatile&lt;/a&gt; ] 에 대한 LLVM 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3879e8ab569a056c97968189092bda667116aee8" translate="yes" xml:space="preserve">
          <source>The volatile parameter is set to &lt;code&gt;true&lt;/code&gt;, so it will not be optimized out unless size is equal to zero.</source>
          <target state="translated">휘발성 매개 변수가 &lt;code&gt;true&lt;/code&gt; 로 설정 되므로 크기가 0이 아닌 한 최적화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="545e192087f2dee8a1244b50285f56354faded13" translate="yes" xml:space="preserve">
          <source>The warning suggests that we use &lt;code&gt;_i&lt;/code&gt; as a name instead: the underscore indicates that we intend for this variable to be unused. We can automatically apply that suggestion using the &lt;code&gt;rustfix&lt;/code&gt; tool by running the command &lt;code&gt;cargo fix&lt;/code&gt;:</source>
          <target state="translated">경고는 &lt;code&gt;_i&lt;/code&gt; 를 대신 이름으로 사용하도록 제안합니다 . 밑줄은이 변수를 사용하지 않을 것임을 나타냅니다. &lt;code&gt;cargo fix&lt;/code&gt; 명령을 실행하여 &lt;code&gt;rustfix&lt;/code&gt; 도구를 사용하여 제안을 자동으로 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71e5980a6bfd716abaaef858ffaa58512cff6b9e" translate="yes" xml:space="preserve">
          <source>The warning we get is this:</source>
          <target state="translated">우리가 얻는 경고는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01d3cf24ed7ac31e045df84ed43b543301d5071c" translate="yes" xml:space="preserve">
          <source>The way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the &lt;code&gt;longest&lt;/code&gt; function to always return the first parameter rather than the longest string slice, we wouldn&amp;rsquo;t need to specify a lifetime on the &lt;code&gt;y&lt;/code&gt; parameter. The following code will compile:</source>
          <target state="translated">수명 매개 변수를 지정해야하는 방법은 함수가 수행하는 작업에 따라 다릅니다. 예를 들어 가장 긴 문자열 슬라이스 대신 항상 첫 번째 매개 변수를 반환 하도록 &lt;code&gt;longest&lt;/code&gt; 함수 의 구현을 변경 한 경우 &lt;code&gt;y&lt;/code&gt; 매개 변수 에 수명을 지정할 필요가 없습니다 . 다음 코드는 컴파일됩니다 :</target>
        </trans-unit>
        <trans-unit id="5b549318fc3f4ca028012969aeab8043ad858528" translate="yes" xml:space="preserve">
          <source>The way privacy works in Rust is that all items (functions, methods, structs, enums, modules, and constants) are private by default. Items in a parent module can&amp;rsquo;t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. The reason is that child modules wrap and hide their implementation details, but the child modules can see the context in which they&amp;rsquo;re defined. To continue with the restaurant metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant in which they operate.</source>
          <target state="translated">Rust에서 프라이버시가 작동하는 방식은 모든 아이템 (함수, 메소드, 구조체, 열거 형, 모듈 및 상수)이 기본적으로 비공개입니다. 상위 모듈의 항목은 하위 모듈 내부의 개인 항목을 사용할 수 없지만 하위 모듈의 항목은 상위 모듈의 항목을 사용할 수 있습니다. 그 이유는 자식 모듈이 구현 세부 사항을 감싸고 숨기지 만 자식 모듈은 자신이 정의 된 컨텍스트를 볼 수 있기 때문입니다. 식당의 은유를 계속하려면 개인 정보 보호 규칙을 식당의 백 오피스와 같다고 생각하십시오. 식당 고객에게는 개인이 있지만 사무실 관리자는 식당이 운영하는 식당에서 모든 것을보고 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c954766baf952dffb19514bc82ccc04508ad4747" translate="yes" xml:space="preserve">
          <source>The way to define helper attributes is to put an &lt;code&gt;attributes&lt;/code&gt; key in the &lt;code&gt;proc_macro_derive&lt;/code&gt; macro with a comma separated list of identifiers that are the names of the helper attributes.</source>
          <target state="translated">헬퍼 속성을 정의하는 방법은 헬퍼 속성 의 이름 인 쉼표로 구분 된 식별자 목록과 함께 &lt;code&gt;attributes&lt;/code&gt; 키를 &lt;code&gt;proc_macro_derive&lt;/code&gt; 매크로 에 넣는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b4ad5969b00a7de4e50dcfbec4f420300a121d22" translate="yes" xml:space="preserve">
          <source>The way to demonstrate this behavior is by running the program with &lt;code&gt;&amp;gt;&lt;/code&gt; and the filename, &lt;em&gt;output.txt&lt;/em&gt;, that we want to redirect the standard output stream to. We won&amp;rsquo;t pass any arguments, which should cause an error:</source>
          <target state="translated">이 동작을 보여주는 방법 은 표준 출력 스트림을 리디렉션하려는 &lt;code&gt;&amp;gt;&lt;/code&gt; 및 파일 이름 &lt;em&gt;output.txt로&lt;/em&gt; 프로그램을 실행하는 것입니다. 인수를 전달하지 않으므로 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4860fccc5b2b1b15ffbccd4a99af016a4e435d30" translate="yes" xml:space="preserve">
          <source>The wildcard pattern is always irrefutable.</source>
          <target state="translated">와일드 카드 패턴은 항상 반박 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6ed876d97357afb4218b62acc26e1fb7fcb7f367" translate="yes" xml:space="preserve">
          <source>The workspace has one &lt;em&gt;target&lt;/em&gt; directory at the top level for the compiled artifacts to be placed into; the &lt;code&gt;adder&lt;/code&gt; crate doesn&amp;rsquo;t have its own &lt;em&gt;target&lt;/em&gt; directory. Even if we were to run &lt;code&gt;cargo build&lt;/code&gt; from inside the &lt;em&gt;adder&lt;/em&gt; directory, the compiled artifacts would still end up in &lt;em&gt;add/target&lt;/em&gt; rather than &lt;em&gt;add/adder/target&lt;/em&gt;. Cargo structures the &lt;em&gt;target&lt;/em&gt; directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own &lt;em&gt;target&lt;/em&gt; directory, each crate would have to recompile each of the other crates in the workspace to have the artifacts in its own &lt;em&gt;target&lt;/em&gt; directory. By sharing one &lt;em&gt;target&lt;/em&gt; directory, the crates can avoid unnecessary rebuilding.</source>
          <target state="translated">작업 공간에는 컴파일 된 아티팩트를 배치 할 하나의 &lt;em&gt;대상&lt;/em&gt; 디렉토리가 최상위 레벨에 있습니다. &lt;code&gt;adder&lt;/code&gt; 상자 자체가없는 &lt;em&gt;대상&lt;/em&gt; 디렉토리를. &lt;em&gt;adder&lt;/em&gt; 디렉토리 내부에서 &lt;code&gt;cargo build&lt;/code&gt; 를 실행하더라도 컴파일 된 아티팩트는 여전히 &lt;em&gt;add / adder / target&lt;/em&gt; 대신 &lt;em&gt;add / target으로&lt;/em&gt; 끝납니다 . 화물 은 작업 공간의 상자가 서로 의존하기 때문에 작업 공간에서 &lt;em&gt;대상&lt;/em&gt; 디렉토리를 구조화합니다 . 각 상자에 자체 &lt;em&gt;대상&lt;/em&gt; 디렉토리 가있는 경우 각 상자는 작업 공간에서 다른 상자를 각각 다시 컴파일하여 아티팩트를 소유해야합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;대상&lt;/em&gt; 디렉토리. 하나의 &lt;em&gt;대상&lt;/em&gt; 디렉토리 를 공유함으로써 상자는 불필요한 재 구축을 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99d51b0abe084f304807f0bb44acfa16e7f4af5a" translate="yes" xml:space="preserve">
          <source>The worst case cost of &lt;code&gt;pop&lt;/code&gt; on a heap containing &lt;em&gt;n&lt;/em&gt; elements is O(log n).</source>
          <target state="translated">&lt;em&gt;n 개의&lt;/em&gt; 요소를 포함하는 힙에서 최악의 &lt;code&gt;pop&lt;/code&gt; 비용 은 O (log n)입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="238b65c05553bd00df49cce92fea6a1b783b67b3" translate="yes" xml:space="preserve">
          <source>The worst case cost of a &lt;em&gt;single&lt;/em&gt; call to &lt;code&gt;push&lt;/code&gt; is O(n). The worst case occurs when capacity is exhausted and needs a resize. The resize cost has been amortized in the previous figures.</source>
          <target state="translated">&lt;em&gt;단일&lt;/em&gt; 호출 &lt;code&gt;push&lt;/code&gt; 의 최악의 경우 비용 은 O (n)입니다. 최악의 경우는 용량이 소진되어 크기를 조정해야 할 때 발생합니다. 크기 조정 비용은 이전 수치에서 상각되었습니다.</target>
        </trans-unit>
        <trans-unit id="9abd2f24e6d1b46930e8a99311ffd002b596e31a" translate="yes" xml:space="preserve">
          <source>The writing portion of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt; 의 쓰기 부분을 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="4a689baec3acd327f6907f5ce5547d1d13e010a8" translate="yes" xml:space="preserve">
          <source>Their definition should always match the ABI defined in &lt;code&gt;rustc::back::abi&lt;/code&gt;.</source>
          <target state="translated">그들의 정의는 항상 &lt;code&gt;rustc::back::abi&lt;/code&gt; 정의 된 ABI와 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="534bcf9b4ee06ae0b390b746db849c9e3d0f83df" translate="yes" xml:space="preserve">
          <source>Then create a new directory, &lt;em&gt;src/bin&lt;/em&gt;, and move the binary crate rooted in &lt;em&gt;src/main.rs&lt;/em&gt; into &lt;em&gt;src/bin/main.rs&lt;/em&gt;. Doing so will make the library crate the primary crate in the &lt;em&gt;hello&lt;/em&gt; directory; we can still run the binary in &lt;em&gt;src/bin/main.rs&lt;/em&gt; using &lt;code&gt;cargo run&lt;/code&gt;. After moving the &lt;em&gt;main.rs&lt;/em&gt; file, edit it to bring the library crate in and bring &lt;code&gt;ThreadPool&lt;/code&gt; into scope by adding the following code to the top of &lt;em&gt;src/bin/main.rs&lt;/em&gt;:</source>
          <target state="translated">그런 다음 새 디렉토리 인 &lt;em&gt;src / bin을&lt;/em&gt; 작성하고 &lt;em&gt;src / main.rs&lt;/em&gt; 에있는 2 진 크레이트 를 &lt;em&gt;src / bin / main.rs로 이동하십시오&lt;/em&gt; . 이렇게하면 라이브러리 상자가 &lt;em&gt;hello&lt;/em&gt; 디렉토리 의 기본 상자가됩니다 . &lt;code&gt;cargo run&lt;/code&gt; 사용하여 &lt;em&gt;src / bin / main.rs&lt;/em&gt; 에서 바이너리를 계속 실행할 수 있습니다 . &lt;em&gt;main.rs&lt;/em&gt; 파일을 옮긴 후 &lt;em&gt;src / bin / main.rs&lt;/em&gt; 맨 위에 다음 코드를 추가하여 라이브러리 상자를 가져오고 &lt;code&gt;ThreadPool&lt;/code&gt; 을 범위 로 가져 &lt;em&gt;오려면&lt;/em&gt; 파일을 편집하십시오 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="848cf8d4f1542ccd5c9500b227f162479dfe2c8c" translate="yes" xml:space="preserve">
          <source>Then generate a new library crate named &lt;code&gt;add-one&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;add-one&lt;/code&gt; 이라는 새 라이브러리 상자를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="02ec96ae1b226ff410efb69c0d4d60e58a7042ce" translate="yes" xml:space="preserve">
          <source>Then implementing the &lt;code&gt;OutlinePrint&lt;/code&gt; trait on &lt;code&gt;Point&lt;/code&gt; will compile successfully, and we can call &lt;code&gt;outline_print&lt;/code&gt; on a &lt;code&gt;Point&lt;/code&gt; instance to display it within an outline of asterisks.</source>
          <target state="translated">그런 다음 &lt;code&gt;Point&lt;/code&gt; 에서 &lt;code&gt;OutlinePrint&lt;/code&gt; 특성을 구현하면 성공적으로 컴파일 되며 &lt;code&gt;Point&lt;/code&gt; 인스턴스에서 &lt;code&gt;outline_print&lt;/code&gt; 를 호출 하여 별표로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3aac37973a618f0b45f35c262a8297327ce65a0e" translate="yes" xml:space="preserve">
          <source>Then install the language server support in your particular IDE; you&amp;rsquo;ll gain abilities such as autocompletion, jump to definition, and inline errors.</source>
          <target state="translated">그런 다음 특정 IDE에 언어 서버 지원을 설치하십시오. 자동 완성, 정의로 이동 및 인라인 오류와 같은 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="636019afbd1be275dc1f855f27602c31a7743704" translate="yes" xml:space="preserve">
          <source>Then run &lt;code&gt;cargo test&lt;/code&gt; again. The output now shows &lt;code&gt;exploration&lt;/code&gt; instead of &lt;code&gt;it_works&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;cargo test&lt;/code&gt; 다시 실행 하십시오. 이제 출력 에 &lt;code&gt;it_works&lt;/code&gt; 대신 &lt;code&gt;exploration&lt;/code&gt; 됩니다 .</target>
        </trans-unit>
        <trans-unit id="7eae4a5123d629fb5914cfbce2d33e244889b442" translate="yes" xml:space="preserve">
          <source>Then the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We&amp;rsquo;ll call it &lt;code&gt;'a&lt;/code&gt; as usual, so now the signature is this:</source>
          <target state="translated">그런 다음 컴파일러는 첫 번째 규칙을 적용합니다.이 규칙은 각 매개 변수가 고유 한 수명을 갖도록 지정합니다. 우리는 그것을 전화 할게 &lt;code&gt;'a&lt;/code&gt; 평소와 같이, 이제 서명이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fe1bb69db1725d721fdb3af05034044cb61cb940" translate="yes" xml:space="preserve">
          <source>Then we add five new lines at the bottom that use the &lt;code&gt;Ordering&lt;/code&gt; type. The &lt;code&gt;cmp&lt;/code&gt; method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it&amp;rsquo;s comparing the &lt;code&gt;guess&lt;/code&gt; to the &lt;code&gt;secret_number&lt;/code&gt;. Then it returns a variant of the &lt;code&gt;Ordering&lt;/code&gt; enum we brought into scope with the &lt;code&gt;use&lt;/code&gt; statement. We use a &lt;a href=&quot;ch06-02-match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; expression to decide what to do next based on which variant of &lt;code&gt;Ordering&lt;/code&gt; was returned from the call to &lt;code&gt;cmp&lt;/code&gt; with the values in &lt;code&gt;guess&lt;/code&gt; and &lt;code&gt;secret_number&lt;/code&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;Ordering&lt;/code&gt; 유형 을 사용하는 맨 아래에 5 개의 새 줄을 추가 합니다. &lt;code&gt;cmp&lt;/code&gt; 방법은 두 값을 비교하고 비교 될 수있는 일에 호출 할 수 있습니다. 비교하려는 대상에 대한 참조가 필요합니다. 여기에서 &lt;code&gt;guess&lt;/code&gt; 을 &lt;code&gt;secret_number&lt;/code&gt; 와 비교합니다 . 그런 다음 &lt;code&gt;use&lt;/code&gt; 문을 사용 하여 범위에 넣은 &lt;code&gt;Ordering&lt;/code&gt; 열거 형 의 변형을 반환합니다 . &lt;a href=&quot;ch06-02-match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; 표현식을 사용하여 &lt;code&gt;guess&lt;/code&gt; 및 &lt;code&gt;secret_number&lt;/code&gt; 값을 사용하여 &lt;code&gt;cmp&lt;/code&gt; 호출에서 반환 된 &lt;code&gt;Ordering&lt;/code&gt; 변형을 기반으로 다음에 수행 할 작업을 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="42504942265ee7c7c73ee70d30a7653d906cc136" translate="yes" xml:space="preserve">
          <source>Then we create a &lt;em&gt;src/front_of_house&lt;/em&gt; directory and a file &lt;em&gt;src/front_of_house/hosting.rs&lt;/em&gt; to contain the definitions made in the &lt;code&gt;hosting&lt;/code&gt; module:</source>
          <target state="translated">그런 다음 &lt;em&gt;src / front_of_house&lt;/em&gt; 디렉토리와 &lt;em&gt;src / front_of_house / hosting.rs&lt;/em&gt; 파일을 작성하여 &lt;code&gt;hosting&lt;/code&gt; 모듈 에서 &lt;em&gt;작성된&lt;/em&gt; 정의를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="8c054131a62b68de933e0bf587b858ee6793392b" translate="yes" xml:space="preserve">
          <source>Then we create a new &lt;code&gt;String&lt;/code&gt; in variable &lt;code&gt;s&lt;/code&gt; and call the &lt;code&gt;read_to_string&lt;/code&gt; method on the file handle in &lt;code&gt;f&lt;/code&gt; to read the contents of the file into &lt;code&gt;s&lt;/code&gt;. The &lt;code&gt;read_to_string&lt;/code&gt; method also returns a &lt;code&gt;Result&lt;/code&gt; because it might fail, even though &lt;code&gt;File::open&lt;/code&gt; succeeded. So we need another &lt;code&gt;match&lt;/code&gt; to handle that &lt;code&gt;Result&lt;/code&gt;: if &lt;code&gt;read_to_string&lt;/code&gt; succeeds, then our function has succeeded, and we return the username from the file that&amp;rsquo;s now in &lt;code&gt;s&lt;/code&gt; wrapped in an &lt;code&gt;Ok&lt;/code&gt;. If &lt;code&gt;read_to_string&lt;/code&gt; fails, we return the error value in the same way that we returned the error value in the &lt;code&gt;match&lt;/code&gt; that handled the return value of &lt;code&gt;File::open&lt;/code&gt;. However, we don&amp;rsquo;t need to explicitly say &lt;code&gt;return&lt;/code&gt;, because this is the last expression in the function.</source>
          <target state="translated">그런 다음 변수 &lt;code&gt;s&lt;/code&gt; 에 새 &lt;code&gt;String&lt;/code&gt; 을 만들고 &lt;code&gt;f&lt;/code&gt; 의 파일 핸들에서 &lt;code&gt;read_to_string&lt;/code&gt; 메서드를 호출 하여 파일 의 내용을 &lt;code&gt;s&lt;/code&gt; 로 읽습니다 . &lt;code&gt;read_to_string&lt;/code&gt; 방법도 반환 &lt;code&gt;Result&lt;/code&gt; 는 실패 할 수 있기 때문에, 비록 &lt;code&gt;File::open&lt;/code&gt; 성공했다. 우리가 또 다른 필요 그래서 &lt;code&gt;match&lt;/code&gt; 그 처리 &lt;code&gt;Result&lt;/code&gt; 다음과 같은 경우 &lt;code&gt;read_to_string&lt;/code&gt; 이 성공하고 우리의 기능은 성공, 우리는 지금의 파일에서 사용자 이름을 반환 한 &lt;code&gt;s&lt;/code&gt; 에 싸여 &lt;code&gt;Ok&lt;/code&gt; . &lt;code&gt;read_to_string&lt;/code&gt; 인 경우실패하면 &lt;code&gt;File::open&lt;/code&gt; 의 반환 값을 처리 한 &lt;code&gt;match&lt;/code&gt; 에서 오류 값을 반환 한 것과 같은 방식으로 오류 값을 반환합니다 . 그러나 함수에서 마지막 표현식이므로 &lt;code&gt;return&lt;/code&gt; 이라고 명시 적으로 말할 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="deae9012508053fe94f96907583eae7e4c8a687f" translate="yes" xml:space="preserve">
          <source>Then we implement an associated function named &lt;code&gt;new&lt;/code&gt; on &lt;code&gt;Guess&lt;/code&gt; that creates instances of &lt;code&gt;Guess&lt;/code&gt; values. The &lt;code&gt;new&lt;/code&gt; function is defined to have one parameter named &lt;code&gt;value&lt;/code&gt; of type &lt;code&gt;i32&lt;/code&gt; and to return a &lt;code&gt;Guess&lt;/code&gt;. The code in the body of the &lt;code&gt;new&lt;/code&gt; function tests &lt;code&gt;value&lt;/code&gt; to make sure it&amp;rsquo;s between 1 and 100. If &lt;code&gt;value&lt;/code&gt; doesn&amp;rsquo;t pass this test, we make a &lt;code&gt;panic!&lt;/code&gt; call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a &lt;code&gt;Guess&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt; outside this range would violate the contract that &lt;code&gt;Guess::new&lt;/code&gt; is relying on. The conditions in which &lt;code&gt;Guess::new&lt;/code&gt; might panic should be discussed in its public-facing API documentation; we&amp;rsquo;ll cover documentation conventions indicating the possibility of a &lt;code&gt;panic!&lt;/code&gt; in the API documentation that you create in Chapter 14. If &lt;code&gt;value&lt;/code&gt; does pass the test, we create a new &lt;code&gt;Guess&lt;/code&gt; with its &lt;code&gt;value&lt;/code&gt; field set to the &lt;code&gt;value&lt;/code&gt; parameter and return the &lt;code&gt;Guess&lt;/code&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;Guess&lt;/code&gt; 값의 인스턴스를 생성 하는 &lt;code&gt;Guess&lt;/code&gt; 에 &lt;code&gt;new&lt;/code&gt; 라는 관련 함수를 구현 합니다. &lt;code&gt;new&lt;/code&gt; 함수라는 하나의 파라미터가 정의된다 &lt;code&gt;value&lt;/code&gt; 유형의 &lt;code&gt;i32&lt;/code&gt; 하고 반환 &lt;code&gt;Guess&lt;/code&gt; . &lt;code&gt;new&lt;/code&gt; 함수 본문의 코드는 &lt;code&gt;value&lt;/code&gt; 을 1에서 100 사이의 값 으로 테스트 합니다 . &lt;code&gt;value&lt;/code&gt; 이이 테스트를 통과하지 못하면 &lt;code&gt;panic!&lt;/code&gt; 호출 코드를 작성하는 프로그래머에게 수정해야 할 버그가 있음을 경고합니다 . &lt;code&gt;value&lt;/code&gt; 으로 &lt;code&gt;Guess&lt;/code&gt; 을 작성하기 때문 입니다.이 범위를 벗어나면 &lt;code&gt;Guess::new&lt;/code&gt; 가 의존 하는 계약을 위반하게 됩니다. &lt;code&gt;Guess::new&lt;/code&gt; might panic 의 조건은 공개 API 문서에서 논의해야합니다. &lt;code&gt;panic!&lt;/code&gt; 가능성을 나타내는 문서 규칙을 다룰 것입니다 ! 경우에는 제 14 장에서 생성되는 API 문서에 &lt;code&gt;value&lt;/code&gt; 테스트를 통과 않습니다, 우리는 새로운 만들 &lt;code&gt;Guess&lt;/code&gt; 그와 &lt;code&gt;value&lt;/code&gt; 받는 사람 필드 설정 &lt;code&gt;value&lt;/code&gt; 매개 변수와 반환 &lt;code&gt;Guess&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06b6b70a87228a4df8ed0e498c6c809f243dabd9" translate="yes" xml:space="preserve">
          <source>Then we return two mutable slices in a tuple: one from the start of the original slice to the &lt;code&gt;mid&lt;/code&gt; index and another from &lt;code&gt;mid&lt;/code&gt; to the end of the slice.</source>
          <target state="translated">그런 다음 튜플에서 두 개의 가변 슬라이스를 반환합니다. 하나는 원래 슬라이스의 시작에서 &lt;code&gt;mid&lt;/code&gt; 인덱스로, 다른 하나 는 슬라이스의 &lt;code&gt;mid&lt;/code&gt; 에서 끝까지입니다.</target>
        </trans-unit>
        <trans-unit id="884190657324310c04e2504f5fc0e76845d895ae" translate="yes" xml:space="preserve">
          <source>Then you must define an implementation for &lt;code&gt;cmp()&lt;/code&gt;. You may find it useful to use &lt;code&gt;cmp()&lt;/code&gt; on your type's fields.</source>
          <target state="translated">그런 다음 &lt;code&gt;cmp()&lt;/code&gt; 구현을 정의해야합니다 . 타입 필드에 &lt;code&gt;cmp()&lt;/code&gt; 를 사용하면 유용 할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0d177ce772cf21906084a9438690b47406434422" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll learn how to use &lt;em&gt;traits&lt;/em&gt; to define behavior in a generic way. You can combine traits with generic types to constrain a generic type to only those types that have a particular behavior, as opposed to just any type.</source>
          <target state="translated">그런 다음 &lt;em&gt;특성&lt;/em&gt; 을 사용하여 일반적인 방식으로 동작을 정의 하는 방법을 배웁니다 . 특성을 일반 유형과 결합하여 일반 유형을 특정 유형이 아닌 특정 동작이있는 유형으로 만 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddeec83a6e1ebd77d0b40c2a12564ec960334a02" translate="yes" xml:space="preserve">
          <source>Then, for each candidate type &lt;code&gt;T&lt;/code&gt;, search for a &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visible&lt;/a&gt; method with a receiver of that type in the following places:</source>
          <target state="translated">그런 다음 각 후보 유형 &lt;code&gt;T&lt;/code&gt; 에 대해 다음 위치에서 해당 유형의 수신자로 &lt;a href=&quot;../visibility-and-privacy&quot;&gt;가시적 인&lt;/a&gt; 메소드를 검색 하십시오.</target>
        </trans-unit>
        <trans-unit id="c7f32ff9ae959e326529e5b742ae1c333e7b2254" translate="yes" xml:space="preserve">
          <source>Then, in your new &lt;em&gt;variables&lt;/em&gt; directory, open &lt;em&gt;src/main.rs&lt;/em&gt; and replace its code with the following code that won&amp;rsquo;t compile just yet:</source>
          <target state="translated">그런 다음 새 &lt;em&gt;변수&lt;/em&gt; 디렉토리에서 &lt;em&gt;src / main.rs를&lt;/em&gt; 열고 아직 컴파일되지 않은 다음 코드로 해당 코드를 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="cbbc8078ba28a9ecb4224d46afd42558773fa640" translate="yes" xml:space="preserve">
          <source>Then, to bring &lt;code&gt;rand&lt;/code&gt; definitions into the scope of our package, we added a &lt;code&gt;use&lt;/code&gt; line starting with the name of the package, &lt;code&gt;rand&lt;/code&gt;, and listed the items we wanted to bring into scope. Recall that in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;&amp;ldquo;Generating a Random Number&amp;rdquo;&lt;/a&gt; section in Chapter 2, we brought the &lt;code&gt;Rng&lt;/code&gt; trait into scope and called the &lt;code&gt;rand::thread_rng&lt;/code&gt; function:</source>
          <target state="translated">그런 다음 &lt;code&gt;rand&lt;/code&gt; 정의를 패키지 범위로 가져 오기 위해 패키지 이름 &lt;code&gt;rand&lt;/code&gt; 로 시작 하는 &lt;code&gt;use&lt;/code&gt; 라인 을 추가하고 범위로 가져 오려는 항목을 나열했습니다. 리콜은에 있음 &lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;&quot;난수 발생&quot;&lt;/a&gt; 제 2 장 섹션, 우리는 가져 &lt;code&gt;Rng&lt;/code&gt; 범위에 특성 및 호출 &lt;code&gt;rand::thread_rng&lt;/code&gt; 기능 :</target>
        </trans-unit>
        <trans-unit id="ea0671790854fadbc007a7d3ab3c99a7a0c53f74" translate="yes" xml:space="preserve">
          <source>Theoretically, this code should compile. Unfortunately, the Rust compiler isn&amp;rsquo;t perfect yet, and we get this error:</source>
          <target state="translated">이론적으로이 코드는 컴파일되어야합니다. 불행히도 Rust 컴파일러는 아직 완벽하지 않으며 다음과 같은 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7bb0fb711ce84d52df9718e0b2a2ec2dabc6a07f" translate="yes" xml:space="preserve">
          <source>There are a couple of solutions for this.</source>
          <target state="translated">이를위한 몇 가지 솔루션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="530488aa6f064fc1ecb7dc7a5a0bf4b2dc63964c" translate="yes" xml:space="preserve">
          <source>There are a few things that &lt;code&gt;transmute&lt;/code&gt; is really useful for.</source>
          <target state="translated">&lt;code&gt;transmute&lt;/code&gt; 이 실제로 유용한 몇 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e38257a0874550d292627aecb2605763613ccaf1" translate="yes" xml:space="preserve">
          <source>There are a handful of shortcuts provided to make writing constructors more convenient, most common of which is the Field Init shorthand. When there is a variable and a field of the same name, the assignment can be simplified from &lt;code&gt;field: field&lt;/code&gt; into simply &lt;code&gt;field&lt;/code&gt;. The following example of a hypothetical constructor demonstrates this:</source>
          <target state="translated">생성자를보다 편리하게 작성하기 위해 제공되는 몇 가지 단축키가 있으며, 가장 일반적인 것은 Field Init 속기입니다. 변수와 이름이 같은 필드가 있으면 &lt;code&gt;field: field&lt;/code&gt; 에서 simply &lt;code&gt;field&lt;/code&gt; 로 할당을 단순화 할 수 있습니다 . 가상 생성자의 다음 예는이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="63a966968ec2346aede6a0d18395aa406c237072" translate="yes" xml:space="preserve">
          <source>There are a number of &lt;a href=&quot;#functions-1&quot;&gt;functions&lt;/a&gt; that offer access to various features. For example, we can use three of these functions to copy everything from standard input to standard output:</source>
          <target state="translated">가 있습니다 &lt;a href=&quot;#functions-1&quot;&gt;기능&lt;/a&gt; 다양한 기능에 대한 액세스를 제공합니다. 예를 들어, 다음 세 가지 함수를 사용하여 표준 입력에서 표준 출력으로 모든 것을 복사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f79d0ffb253cf5d15cccef1c760f3edf4c3cd7b" translate="yes" xml:space="preserve">
          <source>There are a number of &lt;code&gt;debug_*&lt;/code&gt; methods on &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; to help you with manual implementations, such as &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;debug_struct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; 에는 &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;debug_struct&lt;/code&gt; &lt;/a&gt; 와 같은 수동 구현에 도움 이되는 많은 &lt;code&gt;debug_*&lt;/code&gt; 메소드 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="087920b8740a66ec282180bff3885f708e5bb842" translate="yes" xml:space="preserve">
          <source>There are a number of related macros in the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; family. The ones that are currently implemented are:</source>
          <target state="translated">&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt; 에는 여러 관련 매크로가 있습니다 ! 가족. 현재 구현 된 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="28043d56de08a63f7e30e165bfcf6d512b961039" translate="yes" xml:space="preserve">
          <source>There are also some platform-specific ABI strings:</source>
          <target state="translated">플랫폼 별 ABI 문자열도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb600a231699778e7c442e8d1b0c5af1c6ce3e98" translate="yes" xml:space="preserve">
          <source>There are conflicting trait implementations for the same type. Example of erroneous code:</source>
          <target state="translated">동일한 유형에 대해 충돌하는 특성 구현이 있습니다. 잘못된 코드의 예 :</target>
        </trans-unit>
        <trans-unit id="c7d32d1dc6c93776049af2c0d8da18ad1a5c107b" translate="yes" xml:space="preserve">
          <source>There are insufficient permissions to access the current directory.</source>
          <target state="translated">현재 디렉토리에 액세스 할 수있는 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="c57d9d7a8463095f936949e3bd422fd7ce763db3" translate="yes" xml:space="preserve">
          <source>There are multiple trade-offs to consider in addition to the prevention of bugs. For example, in cases where you&amp;rsquo;re using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances. With smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be a worthwhile penalty for gaining that clarity.</source>
          <target state="translated">버그 방지 외에도 고려해야 할 여러 가지 상충 관계가 있습니다. 예를 들어, 큰 데이터 구조를 사용하는 경우 인스턴스를 변경하는 것이 새로 할당 된 인스턴스를 복사하고 반환하는 것보다 빠를 수 있습니다. 더 작은 데이터 구조를 사용하면 새로운 인스턴스를 작성하고 더 기능적인 프로그래밍 스타일로 작성하는 것이 생각하기가 쉬울 수 있으므로 성능을 낮추면 명확성을 얻는 데 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d53022046c1585c76ce2c3d1de0757bc5d58a5d7" translate="yes" xml:space="preserve">
          <source>There are multiple ways to create a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; from a string literal:</source>
          <target state="translated">문자열 리터럴에서 새 &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 을 만드는 방법에는 여러 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b89e39f486cb11ae236a0c1ba092d84b1be61d5a" translate="yes" xml:space="preserve">
          <source>There are multiple ways we could change how our web server works to avoid having more requests back up behind a slow request; the one we&amp;rsquo;ll implement is a thread pool.</source>
          <target state="translated">느린 요청 뒤에 더 많은 요청을 백업하지 않도록 웹 서버의 작동 방식을 변경할 수있는 여러 가지 방법이 있습니다. 우리가 구현할 것은 스레드 풀입니다.</target>
        </trans-unit>
        <trans-unit id="cbbb8fb2683dd85eb0ca22283c9bb44fdd37598e" translate="yes" xml:space="preserve">
          <source>There are no function calls, macros, or even &lt;code&gt;let&lt;/code&gt; statements in the &lt;code&gt;five&lt;/code&gt; function&amp;mdash;just the number &lt;code&gt;5&lt;/code&gt; by itself. That&amp;rsquo;s a perfectly valid function in Rust. Note that the function&amp;rsquo;s return type is specified too, as &lt;code&gt;-&amp;gt; i32&lt;/code&gt;. Try running this code; the output should look like this:</source>
          <target state="translated">&lt;code&gt;five&lt;/code&gt; 함수 에는 함수 호출, 매크로 또는 &lt;code&gt;let&lt;/code&gt; 문 이 없으며 숫자 &lt;code&gt;5&lt;/code&gt; 만 있습니다. 그것은 Rust에서 완벽하게 유효한 기능입니다. 함수의 리턴 유형도 &lt;code&gt;-&amp;gt; i32&lt;/code&gt; 로 지정됩니다 . 이 코드를 실행 해보십시오. 출력은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="e3048305fc74fc67f0b28e1af09fa647633b200c" translate="yes" xml:space="preserve">
          <source>There are no generic type parameters.</source>
          <target state="translated">일반 유형 매개 변수가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6dc334d98456ba931a1cb0e3e3cebe2b287fda18" translate="yes" xml:space="preserve">
          <source>There are no guarantees of data layout made by this representation.</source>
          <target state="translated">이 표현에 의한 데이터 레이아웃은 보장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a86100f636fbb472fb5b1863356f0448a9ae85a5" translate="yes" xml:space="preserve">
          <source>There are no guarantees whatsover that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.</source>
          <target state="translated">포인터를 오프셋하면 포인터가 가리키는 할당량을 초과하거나 초과하지 않는다는 보장이 없습니다. 반환 된 오프셋이 정렬 이외의 모든 용어에서 올바른지 확인하는 것은 호출자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="19e4b768de5872c5fc351b9acc570966e33874d6" translate="yes" xml:space="preserve">
          <source>There are several functions and structs in this module that have a counterpart ending in &lt;code&gt;os&lt;/code&gt;. Those ending in &lt;code&gt;os&lt;/code&gt; will return an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and those without will be returning a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 모듈에는 &lt;code&gt;os&lt;/code&gt; 로 끝나는 대응 기능이있는 몇 가지 기능과 구조체가 있습니다 . &lt;code&gt;os&lt;/code&gt; 로 끝나는 사람들 은 &lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; 을 반환 하고 그렇지 않은 사람들은 &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="171ee597fab4c6d0bdea510dd3f56d6a9c12c0b6" translate="yes" xml:space="preserve">
          <source>There are several implementations of common traits for slices. Some examples include:</source>
          <target state="translated">슬라이스에 대한 공통 특성의 몇 가지 구현이 있습니다. 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0f5d6b4dc4e0f0d18f10b896c43b04863d873b17" translate="yes" xml:space="preserve">
          <source>There are several kinds of items:</source>
          <target state="translated">여러 종류의 항목이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ab16cf7d574dfc1dbe1b281f7a85326a916ba94" translate="yes" xml:space="preserve">
          <source>There are several structs that are useful for slices, such as &lt;a href=&quot;struct.iter&quot;&gt;&lt;code&gt;Iter&lt;/code&gt;&lt;/a&gt;, which represents iteration over a slice.</source>
          <target state="translated">슬라이스에 대한 반복을 나타내는 &lt;a href=&quot;struct.iter&quot;&gt; &lt;code&gt;Iter&lt;/code&gt; &lt;/a&gt; 와 같이 슬라이스에 유용한 여러 구조체가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="567ae72d32f4d2be3989eaf8a9904e62f889b537" translate="yes" xml:space="preserve">
          <source>There are six &lt;code&gt;char&lt;/code&gt; values here, but the fourth and sixth are not letters: they&amp;rsquo;re diacritics that don&amp;rsquo;t make sense on their own. Finally, if we look at them as grapheme clusters, we&amp;rsquo;d get what a person would call the four letters that make up the Hindi word:</source>
          <target state="translated">여기에는 6 개의 &lt;code&gt;char&lt;/code&gt; 값이 있지만 4 번째와 6 번째 문자는 글자가 아닙니다.이 문자는 이해가되지 않는 분음 부호입니다. 마지막으로, 우리가 그것들을 grapheme 클러스터로 본다면, 우리는 힌디어 단어를 구성하는 4 개의 글자를 사람들이 얻게 될 것입니다 :</target>
        </trans-unit>
        <trans-unit id="6ce75e9d71dbebf75ae807b3a16056d1528fd37b" translate="yes" xml:space="preserve">
          <source>There are some known bugs that trigger this message.</source>
          <target state="translated">이 메시지를 유발하는 알려진 버그가 있습니다.</target>
        </trans-unit>
        <trans-unit id="926439ef5401fe133e30f193394b46730a6ce040" translate="yes" xml:space="preserve">
          <source>There are some strange edge cases with &lt;code&gt;macro_rules!&lt;/code&gt;. In the future, Rust will have a second kind of declarative macro that will work in a similar fashion but fix some of these edge cases. After that update, &lt;code&gt;macro_rules!&lt;/code&gt; will be effectively deprecated. With this in mind, as well as the fact that most Rust programmers will &lt;em&gt;use&lt;/em&gt; macros more than &lt;em&gt;write&lt;/em&gt; macros, we won&amp;rsquo;t discuss &lt;code&gt;macro_rules!&lt;/code&gt; any further. To learn more about how to write macros, consult the online documentation or other resources, such as &lt;a href=&quot;https://danielkeep.github.io/tlborm/book/index.html&quot;&gt;&amp;ldquo;The Little Book of Rust Macros&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;macro_rules!&lt;/code&gt; 와 함께 몇 가지 이상한 경우가 있습니다! . 앞으로 Rust는 비슷한 방식으로 작동하지만 이러한 엣지 케이스 중 일부를 수정하는 두 번째 종류의 선언적 매크로를 갖게 될 것입니다. 업데이트 후 &lt;code&gt;macro_rules!&lt;/code&gt; 효과적으로 사용되지 않습니다. 이 점을 염두에두고 대부분의 Rust 프로그래머가 매크로를 &lt;em&gt;쓰는&lt;/em&gt; 것보다 매크로를 더 많이 &lt;em&gt;사용&lt;/em&gt; 한다는 사실과 함께 &lt;code&gt;macro_rules!&lt;/code&gt; 않습니다 ! 더. 매크로를 작성하는 방법에 대한 자세한 내용은 온라인 설명서 또는 &lt;a href=&quot;https://danielkeep.github.io/tlborm/book/index.html&quot;&gt;&amp;ldquo;The Rusbook of Rust Macros&amp;rdquo;&lt;/a&gt; 와 같은 기타 자료를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="720348f040959c3669acec057ca2d47ad7fb3d69" translate="yes" xml:space="preserve">
          <source>There are three ABI strings which are cross-platform, and which all compilers are guaranteed to support:</source>
          <target state="translated">크로스 플랫폼 인 3 개의 ABI 문자열이 있으며 모든 컴파일러에서 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0142bb3f41cab04708310e3fe823a323c32ee0b3" translate="yes" xml:space="preserve">
          <source>There are three common methods which can create iterators from a collection:</source>
          <target state="translated">컬렉션에서 반복자를 만들 수있는 일반적인 세 ​​가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="987579e087a6ff5bbf6e70931c97c8842a5d0e0c" translate="yes" xml:space="preserve">
          <source>There are three possible ways to specify the desired &lt;code&gt;precision&lt;/code&gt;:</source>
          <target state="translated">원하는 &lt;code&gt;precision&lt;/code&gt; 를 지정하는 세 가지 방법이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a65e426e444ff8c29bebad4488c8514ade91574" translate="yes" xml:space="preserve">
          <source>There are three ways to use the inline attribute:</source>
          <target state="translated">인라인 속성을 사용하는 세 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="481486972e8a90ddff463b54cf1c4f208b0477e6" translate="yes" xml:space="preserve">
          <source>There are two input lifetimes, so Rust applies the first lifetime elision rule and gives both &lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;announcement&lt;/code&gt; their own lifetimes. Then, because one of the parameters is &lt;code&gt;&amp;amp;self&lt;/code&gt;, the return type gets the lifetime of &lt;code&gt;&amp;amp;self&lt;/code&gt;, and all lifetimes have been accounted for.</source>
          <target state="translated">두 개의 입력 수명이 있으므로 Rust는 첫 번째 수명 제거 규칙을 적용하고 &lt;code&gt;&amp;amp;self&lt;/code&gt; 와 &lt;code&gt;announcement&lt;/code&gt; 에 자체 수명을 제공합니다. 그런 다음 매개 변수 중 하나가 &lt;code&gt;&amp;amp;self&lt;/code&gt; 이므로 리턴 유형은 &lt;code&gt;&amp;amp;self&lt;/code&gt; 의 수명을 가져오고 모든 수명이 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="c1575bd4949a087cd0961e57e825f5b7d2464821" translate="yes" xml:space="preserve">
          <source>There are two main ways to read this document.</source>
          <target state="translated">이 문서를 읽는 데는 두 가지 주요 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="86663982f114c71c4b638d9b0fa35d92d8fc55c4" translate="yes" xml:space="preserve">
          <source>There are two options that would work instead. The first would be to change the line &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; to &lt;code&gt;example_func(example_string.as_str());&lt;/code&gt;, using the method &lt;a href=&quot;struct.string#method.as_str&quot;&gt;&lt;code&gt;as_str()&lt;/code&gt;&lt;/a&gt; to explicitly extract the string slice containing the string. The second way changes &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; to &lt;code&gt;example_func(&amp;amp;*example_string);&lt;/code&gt;. In this case we are dereferencing a &lt;code&gt;String&lt;/code&gt; to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, then referencing the &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; back to &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. The second way is more idiomatic, however both work to do the conversion explicitly rather than relying on the implicit conversion.</source>
          <target state="translated">대신 작동하는 두 가지 옵션이 있습니다. 첫 번째는 &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; 행을 변경하는 것입니다 . 행 &lt;code&gt;example_func(example_string.as_str());&lt;/code&gt; &lt;a href=&quot;struct.string#method.as_str&quot;&gt; &lt;code&gt;as_str()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 문자열이 포함 된 문자열 슬라이스를 명시 적으로 추출하십시오. 두 번째 방법은 &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; 에 &lt;code&gt;example_func(&amp;amp;*example_string);&lt;/code&gt; . 이 경우 &lt;code&gt;String&lt;/code&gt; 을 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 로 참조한 다음 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 을 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt; 다시 참조합니다 . 두 번째 방법은 관용적이지만 암시 적 변환에 의존하기보다는 명시 적으로 변환을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="022a56e5687a1a83c185eae56c2be99a7be6379c" translate="yes" xml:space="preserve">
          <source>There are two options to work around this issue. The first is simply to rename one of the types. Alternatively, one can specify the intended type using the following syntax:</source>
          <target state="translated">이 문제를 해결하려면 두 가지 옵션이 있습니다. 첫 번째는 단순히 유형 중 하나의 이름을 바꾸는 것입니다. 또는 다음 구문을 사용하여 원하는 유형을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7601f9a3aa302729abcf51730ab0dacad11e1f7d" translate="yes" xml:space="preserve">
          <source>There are two possible solutions:</source>
          <target state="translated">가능한 두 가지 해결책이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f08d38f311f1d8aebf1cc8c4c04305ba58884d5" translate="yes" xml:space="preserve">
          <source>There are two syntactic forms for creating an array:</source>
          <target state="translated">배열을 생성하는 두 가지 구문 양식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="86a631e5c1cd817983c93f98903db4ea59d68db2" translate="yes" xml:space="preserve">
          <source>There are two types of implementations:</source>
          <target state="translated">두 가지 유형의 구현이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa155718008a683c96cef5cc6a71a54ea03f305c" translate="yes" xml:space="preserve">
          <source>There are two ways to define new macros:</source>
          <target state="translated">새로운 매크로를 정의하는 두 가지 방법이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9880ebdf9a583de2d652297bd89e0b5ff4d36ffb" translate="yes" xml:space="preserve">
          <source>There are two ways to implement &lt;code&gt;Copy&lt;/code&gt; on your type. The simplest is to use &lt;code&gt;derive&lt;/code&gt;:</source>
          <target state="translated">유형에 &lt;code&gt;Copy&lt;/code&gt; 를 구현하는 방법에는 두 가지가 있습니다. 가장 간단한 방법은 &lt;code&gt;derive&lt;/code&gt; 를 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="dc647999e3aa70d53b9f18def550d41889259047" translate="yes" xml:space="preserve">
          <source>There are various restrictions on transmuting between types in Rust; for example types being transmuted must have the same size. To apply all these restrictions, the compiler must know the exact types that may be transmuted. When type parameters are involved, this cannot always be done.</source>
          <target state="translated">Rust에서 유형 간 변환에 대한 다양한 제한이 있습니다. 예를 들어, 변형 된 유형은 크기가 같아야합니다. 이러한 모든 제한을 적용하려면 컴파일러는 변환 될 수있는 정확한 유형을 알고 있어야합니다. 유형 매개 변수가 관련된 경우 항상 수행 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="0019607d06d61b11d32e87172ee0ea679ebbb977" translate="yes" xml:space="preserve">
          <source>There are various rules:</source>
          <target state="translated">다양한 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d6ed4037ecbcc5953e35640da903ed6a8a40981" translate="yes" xml:space="preserve">
          <source>There can only be one owner at a time.</source>
          <target state="translated">한 번에 한 명의 소유자 만있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4471e590e73989497aca327361dde4b0c93c59c" translate="yes" xml:space="preserve">
          <source>There is a difference between what the &lt;code&gt;match&lt;/code&gt; expression from Listing 9-6 and the &lt;code&gt;?&lt;/code&gt; operator do: error values that have the &lt;code&gt;?&lt;/code&gt; operator called on them go through the &lt;code&gt;from&lt;/code&gt; function, defined in the &lt;code&gt;From&lt;/code&gt; trait in the standard library, which is used to convert errors from one type into another. When the &lt;code&gt;?&lt;/code&gt; operator calls the &lt;code&gt;from&lt;/code&gt; function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the &lt;code&gt;from&lt;/code&gt; function to define how to convert itself to the returned error type, the &lt;code&gt;?&lt;/code&gt; operator takes care of the conversion automatically.</source>
          <target state="translated">Listing 9-6 의 &lt;code&gt;match&lt;/code&gt; 표현식과 &lt;code&gt;?&lt;/code&gt; 연산자 수행 : &lt;code&gt;?&lt;/code&gt; 호출 된 연산자 는 표준 라이브러리 의 &lt;code&gt;From&lt;/code&gt; 특성에 정의 된 &lt;code&gt;from&lt;/code&gt; 함수를 통해 오류를 한 유형에서 다른 유형으로 변환하는 데 사용됩니다. 언제 &lt;code&gt;?&lt;/code&gt; 연산자가 &lt;code&gt;from&lt;/code&gt; 함수를 호출하면 수신 된 오류 유형이 현재 함수의 반환 유형에 정의 된 오류 유형으로 변환됩니다. 이는 여러 가지 이유로 파트가 실패하더라도 함수가 하나의 오류 유형을 리턴하여 함수가 실패 할 수있는 모든 방법을 나타내는 경우에 유용합니다. 각 오류 유형이 &lt;code&gt;from&lt;/code&gt; 을 구현하는 한반환 된 오류 유형으로 변환하는 방법을 정의하는 함수 &lt;code&gt;?&lt;/code&gt; 교환 원이 자동으로 변환을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="6b478d4cf3daf7fb5af886fd070b460cffb3f99a" translate="yes" xml:space="preserve">
          <source>There is a large variety of prefix types, see &lt;a href=&quot;enum.prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt;&lt;/a&gt;'s documentation for more.</source>
          <target state="translated">접두사 유형은 매우 다양 합니다. 자세한 내용은 &lt;a href=&quot;enum.prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9b02d233f669a1e206e4e2c20ce1d2df695bab4c" translate="yes" xml:space="preserve">
          <source>There is a natural point at which we can return the memory our &lt;code&gt;String&lt;/code&gt; needs to the operating system: when &lt;code&gt;s&lt;/code&gt; goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called &lt;code&gt;drop&lt;/code&gt;, and it&amp;rsquo;s where the author of &lt;code&gt;String&lt;/code&gt; can put the code to return the memory. Rust calls &lt;code&gt;drop&lt;/code&gt; automatically at the closing curly bracket.</source>
          <target state="translated">우리는 우리의 메모리 반환 할 수있는 자연 지점이 &lt;code&gt;String&lt;/code&gt; 운영 체제에 필요는 :시 &lt;code&gt;s&lt;/code&gt; 범위를 벗어나. 변수가 범위를 벗어날 때 Rust는 우리를 위해 특별한 함수를 호출합니다. 이 함수를 &lt;code&gt;drop&lt;/code&gt; 이라고 하며 &lt;code&gt;String&lt;/code&gt; 작성자가 메모리를 반환하도록 코드를 넣을 수 있습니다. 녹 통화 &lt;code&gt;drop&lt;/code&gt; 닫는 중괄호 자동으로.</target>
        </trans-unit>
        <trans-unit id="f99c36775b0b7e1c59faa2f7b94f6fd5d85206bb" translate="yes" xml:space="preserve">
          <source>There is a small difference between the two: the &lt;code&gt;derive&lt;/code&gt; strategy will also place a &lt;code&gt;Copy&lt;/code&gt; bound on type parameters, which isn't always desired.</source>
          <target state="translated">이 둘 사이에는 약간의 차이 가 있습니다 . &lt;code&gt;derive&lt;/code&gt; 전략은 항상 바람직하지 않은 유형 매개 변수에 &lt;code&gt;Copy&lt;/code&gt; 바인딩을 배치합니다 .</target>
        </trans-unit>
        <trans-unit id="ba88e1e16f5f4f6fd310c5a8bb2e8dd5b7b7dc78" translate="yes" xml:space="preserve">
          <source>There is currently a known issue (see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/39364&quot;&gt;&lt;code&gt;#39364&lt;/code&gt;&lt;/a&gt;) that causes &lt;code&gt;recv_timeout&lt;/code&gt; to panic unexpectedly with the following example:</source>
          <target state="translated">다음 예제에서 &lt;code&gt;recv_timeout&lt;/code&gt; 이 예기치 않게 패닉 되게 하는 알려진 문제 ( &lt;a href=&quot;https://github.com/rust-lang/rust/issues/39364&quot;&gt; &lt;code&gt;#39364&lt;/code&gt; &lt;/a&gt; 참조 )가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac69e37cd6f18587422e7c6b701f3aed59b4a925" translate="yes" xml:space="preserve">
          <source>There is currently no supported way to create a raw pointer or reference to a field of a struct inside &lt;code&gt;MaybeUninit&amp;lt;Struct&amp;gt;&lt;/code&gt;. That means it is not possible to create a struct by calling &lt;code&gt;MaybeUninit::uninit::&amp;lt;Struct&amp;gt;()&lt;/code&gt; and then writing to its fields.</source>
          <target state="translated">현재 &lt;code&gt;MaybeUninit&amp;lt;Struct&amp;gt;&lt;/code&gt; 안에 구조체의 필드에 대한 원시 포인터 또는 참조를 만드는 방법은 지원되지 않습니다 . 이는 &lt;code&gt;MaybeUninit::uninit::&amp;lt;Struct&amp;gt;()&lt;/code&gt; 를 호출 한 다음 해당 필드에 쓰면 구조체 를 작성할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="06e1ced9251455647a44280e8880c2f024531277" translate="yes" xml:space="preserve">
          <source>There is no consensus in the programming community about what features a language must have to be considered object oriented. Rust is influenced by many programming paradigms, including OOP; for example, we explored the features that came from functional programming in Chapter 13. Arguably, OOP languages share certain common characteristics, namely objects, encapsulation, and inheritance. Let&amp;rsquo;s look at what each of those characteristics means and whether Rust supports it.</source>
          <target state="translated">프로그래밍 커뮤니티에서 언어가 객체 지향으로 간주되어야하는 기능에 대한 합의는 없습니다. 녹은 OOP를 포함한 많은 프로그래밍 패러다임의 영향을받습니다. 예를 들어, 13 장의 함수형 프로그래밍에서 제공되는 기능을 살펴 보았습니다. 물론 OOP 언어는 특정 공통 특성, 즉 객체, 캡슐화 및 상속을 공유합니다. 이러한 각 특성의 의미와 Rust가이를 지원하는지 여부를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="3940029042247daa011ed3a6db287dfc70d15650" translate="yes" xml:space="preserve">
          <source>There is no guarantee that an all-zero byte-pattern represents a valid value of some type &lt;code&gt;T&lt;/code&gt;. For example, the all-zero byte-pattern is not a valid value for reference types (&lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt;). Using &lt;code&gt;zeroed&lt;/code&gt; on such types causes immediate &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that there always is a valid value in a variable it considers initialized.</source>
          <target state="translated">0이 아닌 바이트 패턴이 일부 유형 &lt;code&gt;T&lt;/code&gt; 의 유효한 값을 나타내는 것은 아닙니다 . 예를 들어, 0이 아닌 바이트 패턴은 참조 유형 ( &lt;code&gt;&amp;amp;T&lt;/code&gt; 및 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; )에 유효한 값이 아닙니다 . 이러한 유형에서 &lt;code&gt;zeroed&lt;/code&gt; 을 사용 &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;하면 Rust 컴파일러는&lt;/a&gt; 초기화 된 것으로 간주되는 변수에 항상 유효한 값이 있다고 가정 하기 때문에 즉시 &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;정의되지 않은 동작이&lt;/a&gt; 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="77cd938f61b73cdc8199024bd862cf47becca43c" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the memory pointed to by &lt;code&gt;ptr&lt;/code&gt; contains a valid nul terminator byte at the end of the string.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; 이 가리키는 메모리 에 문자열 끝에 유효한 널 종결 자 바이트가 포함되어 있다고 보장 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="37d385330ea581c420be55585ac9b53b42ed4426" translate="yes" xml:space="preserve">
          <source>There is no guarantee to the validity of &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; 의 유효성을 보장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="96d59d760142fd31188eb3940b02911fcbc69887" translate="yes" xml:space="preserve">
          <source>There is no implementation of &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Drop.html&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; for child processes, so if you do not ensure the &lt;code&gt;Child&lt;/code&gt; has exited then it will continue to run, even after the &lt;code&gt;Child&lt;/code&gt; handle to the child process has gone out of scope.</source>
          <target state="translated">하위 프로세스에 대한 &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Drop.html&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; 의&lt;/a&gt; 구현은 없으므로 &lt;code&gt;Child&lt;/code&gt; 가 종료 되었는지 확인하지 않으면 하위 프로세스 의 &lt;code&gt;Child&lt;/code&gt; 핸들이 범위를 벗어난 후에도 계속 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="f7865277b670de1ac383b78686d6c6c3ef225ff1" translate="yes" xml:space="preserve">
          <source>There is no implicit capture of the containing function's generic parameters, parameters, and local variables. For example, &lt;code&gt;inner&lt;/code&gt; may not access &lt;code&gt;outer_var&lt;/code&gt;.</source>
          <target state="translated">포함하는 함수의 일반 매개 변수, 매개 변수 및 로컬 변수에 대한 암시 적 캡처는 없습니다. 예를 들어, &lt;code&gt;inner&lt;/code&gt; 는 &lt;code&gt;outer_var&lt;/code&gt; 에 액세스 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="98bc5a98bb823e7a07123a40b084c3311e58d239" translate="yes" xml:space="preserve">
          <source>There is no meaningful value to associate with your keys.</source>
          <target state="translated">키와 연관시킬 의미있는 값은 없습니다.</target>
        </trans-unit>
        <trans-unit id="e47f071471a1ed59d24ce5598360fe16b663897e" translate="yes" xml:space="preserve">
          <source>There is no syntax that directly refers to a function item type, but the compiler will display the type as something like &lt;code&gt;fn(u32) -&amp;gt; i32 {fn_name}&lt;/code&gt; in error messages.</source>
          <target state="translated">함수 항목 유형을 직접 참조하는 구문은 없지만 컴파일러는 오류 메시지에서 유형을 &lt;code&gt;fn(u32) -&amp;gt; i32 {fn_name}&lt;/code&gt; 과 같은 형식으로 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="6352ff90262f746d2ceb9b5382b99f239203c508" translate="yes" xml:space="preserve">
          <source>There is no way to express the &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; condition within a pattern, so the match guard gives us the ability to express this logic.</source>
          <target state="translated">패턴 내 에서 &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; 조건 을 표현할 수있는 방법이 없으므로 매치 가드는이 논리를 표현할 수있는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f04c5e1cecb9254e859f18bc80c9ad5ecd03b1f1" translate="yes" xml:space="preserve">
          <source>There is no way to refer to all trait objects generically, so the only way to create values of this type is with functions like &lt;a href=&quot;../intrinsics/fn.transmute&quot;&gt;&lt;code&gt;std::mem::transmute&lt;/code&gt;&lt;/a&gt;. Similarly, the only way to create a true trait object from a &lt;code&gt;TraitObject&lt;/code&gt; value is with &lt;code&gt;transmute&lt;/code&gt;.</source>
          <target state="translated">모든 특성 객체를 일반적으로 참조하는 방법은 없으므로이 유형의 값을 작성하는 유일한 방법은 &lt;a href=&quot;../intrinsics/fn.transmute&quot;&gt; &lt;code&gt;std::mem::transmute&lt;/code&gt; &lt;/a&gt; 와 같은 함수를 사용하는 것 입니다. 마찬가지로 &lt;code&gt;TraitObject&lt;/code&gt; 값 에서 진정한 특성 객체를 생성하는 유일한 방법 은 &lt;code&gt;transmute&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9f689cb8e372a1fb3e4dbcf70bbf33a833163e2" translate="yes" xml:space="preserve">
          <source>There is no wrong way to read this book: if you want to skip ahead, go for it! You might have to jump back to earlier chapters if you experience any confusion. But do whatever works for you.</source>
          <target state="translated">이 책을 읽는 잘못된 방법은 없습니다. 앞으로 건너 뛰고 싶다면 가십시오! 혼동이 발생하면 이전 장으로 되돌아 가야 할 수도 있습니다. 그러나 당신에게 효과가있는 것은 무엇이든하십시오</target>
        </trans-unit>
        <trans-unit id="f89524ca0c10b9d4f1257c768a5b98aab1c4ca9b" translate="yes" xml:space="preserve">
          <source>There is one more similarity between enums and structs: just as we&amp;rsquo;re able to define methods on structs using &lt;code&gt;impl&lt;/code&gt;, we&amp;rsquo;re also able to define methods on enums. Here&amp;rsquo;s a method named &lt;code&gt;call&lt;/code&gt; that we could define on our &lt;code&gt;Message&lt;/code&gt; enum:</source>
          <target state="translated">열거 형과 구조체 사이에 하나의 유사성 이 있습니다. &lt;code&gt;impl&lt;/code&gt; 을 사용하여 구조체에 메소드를 정의 할 수있는 것처럼 열거 형에 메소드를 정의 할 수도 있습니다. &lt;code&gt;Message&lt;/code&gt; 열거 형 에서 정의 할 수있는 &lt;code&gt;call&lt;/code&gt; 이라는 메소드가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="602b0e48a3f43914053d4b199337461ae231047f" translate="yes" xml:space="preserve">
          <source>There is usually no need to create a &lt;code&gt;Thread&lt;/code&gt; struct yourself, one should instead use a function like &lt;code&gt;spawn&lt;/code&gt; to create new threads, see the docs of &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">일반적으로 &lt;code&gt;Thread&lt;/code&gt; 구조체를 직접 만들 필요는 없습니다. 대신 &lt;code&gt;spawn&lt;/code&gt; 과 같은 함수 를 사용하여 새 스레드를 만들어야 합니다. 자세한 내용 은 &lt;a href=&quot;struct.builder&quot;&gt; &lt;code&gt;Builder&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt; 문서 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f5aa017ba54ffa17080a39771f2c83f220593384" translate="yes" xml:space="preserve">
          <source>There will be an error about &lt;code&gt;bool&lt;/code&gt; not implementing &lt;code&gt;Index&amp;lt;u8&amp;gt;&lt;/code&gt;, followed by a note saying &quot;the type &lt;code&gt;bool&lt;/code&gt; cannot be indexed by &lt;code&gt;u8&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; 이 &lt;code&gt;Index&amp;lt;u8&amp;gt;&lt;/code&gt; 구현하지 않는 것에 대한 오류가 있고 &quot; &lt;code&gt;bool&lt;/code&gt; 유형 을 &lt;code&gt;u8&lt;/code&gt; 로 색인화 할 수 없습니다 &quot;라는 메모가 나옵니다 .</target>
        </trans-unit>
        <trans-unit id="7649fb68743c30fa670731965f40aa4090d73b82" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot more to say about &lt;a href=&quot;http://doc.crates.io&quot;&gt;Cargo&lt;/a&gt; and &lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;its ecosystem&lt;/a&gt; which we&amp;rsquo;ll discuss in Chapter 14, but for now, that&amp;rsquo;s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.</source>
          <target state="translated">14 장에서 논의 할 &lt;a href=&quot;http://doc.crates.io&quot;&gt;Cargo&lt;/a&gt; 와 &lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;그 생태계&lt;/a&gt; 에 대해 더 많은 이야기를 할 것이지만 지금은 당신이 알아야 할 전부입니다. Cargo를 사용하면 라이브러리를 매우 쉽게 재사용 할 수 있으므로 Rustaceans는 여러 패키지로 구성된 소규모 프로젝트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bf65550ac389c6cc7469a24526e0ae8bf661af9" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a tendency among many Rustaceans to avoid using &lt;code&gt;clone&lt;/code&gt; to fix ownership problems because of its runtime cost. In &lt;a href=&quot;ch13-00-functional-features&quot;&gt;Chapter 13&lt;/a&gt;, you&amp;rsquo;ll learn how to use more efficient methods in this type of situation. But for now, it&amp;rsquo;s okay to copy a few strings to continue making progress because you&amp;rsquo;ll make these copies only once and your filename and query string are very small. It&amp;rsquo;s better to have a working program that&amp;rsquo;s a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it&amp;rsquo;ll be easier to start with the most efficient solution, but for now, it&amp;rsquo;s perfectly acceptable to call &lt;code&gt;clone&lt;/code&gt;.</source>
          <target state="translated">많은 Rustaceans 는 런타임 비용으로 인해 소유권 문제를 해결 하기 위해 &lt;code&gt;clone&lt;/code&gt; 을 사용하지 않는 경향이 있습니다 . &lt;a href=&quot;ch13-00-functional-features&quot;&gt;13 장&lt;/a&gt; 에서는 이러한 상황에서보다 효율적인 방법을 사용하는 방법을 배웁니다. 그러나 지금은 한 번만 복사하면 파일 이름과 쿼리 문자열이 매우 작으므로 몇 개의 문자열을 복사하여 계속 진행할 수 있습니다. 첫 번째 패스에서 코드를 과도하게 최적화하는 것보다 약간 비효율적 인 작업 프로그램을 사용하는 것이 좋습니다. Rust에 익숙해지면 가장 효율적인 솔루션으로 시작하는 것이 더 쉬울 것이지만 지금은 &lt;code&gt;clone&lt;/code&gt; 을 호출하는 것이 완벽 합니다.</target>
        </trans-unit>
        <trans-unit id="66fb5ab158cd4be714eaa0eeb00d2ccbb6eb7bd5" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four type IP addresses will always have four numeric components that will have values between 0 and 255. If we wanted to store &lt;code&gt;V4&lt;/code&gt; addresses as four &lt;code&gt;u8&lt;/code&gt; values but still express &lt;code&gt;V6&lt;/code&gt; addresses as one &lt;code&gt;String&lt;/code&gt; value, we wouldn&amp;rsquo;t be able to with a struct. Enums handle this case with ease:</source>
          <target state="translated">구조체 대신 열거 형을 사용하면 또 다른 이점이 있습니다. 각 변형은 서로 다른 유형과 양의 관련 데이터를 가질 수 있습니다. 버전 4 유형 IP 주소는 항상 0과 255 사이의 값을 갖는 4 개의 숫자 구성 요소를 갖습니다. &lt;code&gt;V4&lt;/code&gt; 주소를 4 개의 &lt;code&gt;u8&lt;/code&gt; 값 으로 저장하고 &lt;code&gt;V6&lt;/code&gt; 주소를 하나의 &lt;code&gt;String&lt;/code&gt; 값 으로 표현 하려는 경우에는 구조체. 열거 형은이 경우를 쉽게 처리합니다.</target>
        </trans-unit>
        <trans-unit id="a401bf0a884425f212fc0c2849df8bdacf839a70" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another solution to the problem of bringing two types of the same name into the same scope with &lt;code&gt;use&lt;/code&gt;: after the path, we can specify &lt;code&gt;as&lt;/code&gt; and a new local name, or alias, for the type. Listing 7-16 shows another way to write the code in Listing 7-15 by renaming one of the two &lt;code&gt;Result&lt;/code&gt; types using &lt;code&gt;as&lt;/code&gt;.</source>
          <target state="translated">와 동일한 범위에 같은 이름의 두 가지 유형을 가져 오는 문제에 대한 또 다른 해결 방법이 있습니다 &lt;code&gt;use&lt;/code&gt; : 경로 후, 우리는 지정할 수 있습니다 &lt;code&gt;as&lt;/code&gt; 유형에 대한, 새로운 지역의 이름 또는 별명을. Listing 7-16은 &lt;code&gt;as&lt;/code&gt; 를 사용하여 두 개의 &lt;code&gt;Result&lt;/code&gt; 타입 중 하나의 이름을 바꾸어 Listing 7-15에서 코드를 작성하는 다른 방법을 보여준다 .</target>
        </trans-unit>
        <trans-unit id="04733e00c121b49528c905aab2fa6e90d06dc6c3" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another wrinkle we haven&amp;rsquo;t talked about yet. This code using integers, part of which was shown in Listing 4-2, works and is valid:</source>
          <target state="translated">아직 이야기하지 않은 또 다른 주름이 있습니다. 정수를 사용하는이 코드는 목록 4-2에 표시된 일부가 작동하며 유효합니다.</target>
        </trans-unit>
        <trans-unit id="6058c5e16c87f1a91c60dc38f9f510ce010e9805" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s debate within the testing community about whether or not private functions should be tested directly, and other languages make it difficult or impossible to test private functions. Regardless of which testing ideology you adhere to, Rust&amp;rsquo;s privacy rules do allow you to test private functions. Consider the code in Listing 11-12 with the private function &lt;code&gt;internal_adder&lt;/code&gt;.</source>
          <target state="translated">테스트 커뮤니티 내에서 개인 기능을 직접 테스트해야하는지 여부에 대한 토론이 있으며 다른 언어로 인해 개인 기능을 테스트하기가 어렵거나 불가능합니다. 어떤 테스트 이념을 준수하든 Rust의 개인 정보 보호 규칙을 통해 개인 기능을 테스트 할 수 있습니다. private 함수 &lt;code&gt;internal_adder&lt;/code&gt; 를 사용하여 목록 11-12의 코드를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="908f1205edb5e08b15769591fe9ecf304d371a0b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no mechanism being used to synchronize access to the data.</source>
          <target state="translated">데이터에 대한 액세스를 동기화하는 데 사용되는 메커니즘은 없습니다.</target>
        </trans-unit>
        <trans-unit id="8e1fa626ffc94c26aaee1b60bc06a3539eef3bfd" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no reason to separate these methods into multiple &lt;code&gt;impl&lt;/code&gt; blocks here, but this is valid syntax. We&amp;rsquo;ll see a case in which multiple &lt;code&gt;impl&lt;/code&gt; blocks are useful in Chapter 10, where we discuss generic types and traits.</source>
          <target state="translated">이 메소드를 여러 개의 &lt;code&gt;impl&lt;/code&gt; 블록 으로 분리 할 이유 는 없지만 이것이 유효한 구문입니다. 제 10 장에서 일반적인 유형과 특성에 대해 설명 하는 여러 &lt;code&gt;impl&lt;/code&gt; 블록이 유용한 경우를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="68d4631903746cfba7c6e6864ab36c77a56f918c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no strong reason behind this idiom: it&amp;rsquo;s just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.</source>
          <target state="translated">이 관용구 뒤에는 강력한 이유가 없습니다. 그것은 단지 나타난 관습 일 뿐이며, 사람들은 이런 식으로 녹 코드를 읽고 쓰는 데 익숙해졌습니다.</target>
        </trans-unit>
        <trans-unit id="c6cc13f913f5af22a31d9a866ef0ab4e915bc64e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s not a good way to encode this information in the types you use.</source>
          <target state="translated">이 정보를 사용하는 형식으로 인코딩하는 좋은 방법은 없습니다.</target>
        </trans-unit>
        <trans-unit id="42ede15289d883de11e0a80cc68d82337478321c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one more catch with this release model: unstable features. Rust uses a technique called &amp;ldquo;feature flags&amp;rdquo; to determine what features are enabled in a given release. If a new feature is under active development, it lands on &lt;code&gt;master&lt;/code&gt;, and therefore, in nightly, but behind a &lt;em&gt;feature flag&lt;/em&gt;. If you, as a user, wish to try out the work-in-progress feature, you can, but you must be using a nightly release of Rust and annotate your source code with the appropriate flag to opt in.</source>
          <target state="translated">이 릴리스 모델에는 불안정한 기능이 하나 더 있습니다. Rust는&amp;ldquo;feature flags&amp;rdquo;라는 기술을 사용하여 특정 릴리스에서 어떤 기능을 사용할 수 있는지 결정합니다. 새로운 기능이 활발하게 개발중인 경우 &lt;code&gt;master&lt;/code&gt; 에 도착 하므로 야간에 &lt;em&gt;기능 플래그&lt;/em&gt; 뒤에있게 됩니다. 사용자가 진행중인 작업 기능을 사용해보고 싶다면 할 수 있지만 Rust의 야간 릴리스를 사용하고 적절한 플래그로 소스 코드에 주석을 달아 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="daaeaab720a0d66e562ebf5f2bea02ac0a5abbb2" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one more situation involving &lt;code&gt;pub&lt;/code&gt; that we haven&amp;rsquo;t covered, and that is our last module system feature: the &lt;code&gt;use&lt;/code&gt; keyword. We&amp;rsquo;ll cover &lt;code&gt;use&lt;/code&gt; by itself first, and then we&amp;rsquo;ll show how to combine &lt;code&gt;pub&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">우리가 다루지 않은 &lt;code&gt;pub&lt;/code&gt; 과 관련된 또 하나의 상황이 있으며, 이것이 마지막 모듈 시스템 기능인 &lt;code&gt;use&lt;/code&gt; 키워드입니다. 먼저 &lt;code&gt;use&lt;/code&gt; 자체를 다루고 &lt;code&gt;pub&lt;/code&gt; 와 &lt;code&gt;use&lt;/code&gt; 를 결합하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5e8c77371d51b56070c8afcedaaaf9336a342d93" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one other aspect of &lt;code&gt;match&lt;/code&gt; we need to discuss. Consider this version of our &lt;code&gt;plus_one&lt;/code&gt; function that has a bug and won&amp;rsquo;t compile:</source>
          <target state="translated">우리가 논의해야 할 또 다른 &lt;code&gt;match&lt;/code&gt; 측면이 있습니다. 버그가 있고 컴파일되지 않는 이 버전의 &lt;code&gt;plus_one&lt;/code&gt; 함수를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cab02a3373b42bd604f431d95c5d649fedd71e0" translate="yes" xml:space="preserve">
          <source>There's a trait in the standard library for converting something into an iterator: &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;. This trait has one method, &lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt;, which converts the thing implementing &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; into an iterator. Let's take a look at that &lt;code&gt;for&lt;/code&gt; loop again, and what the compiler converts it into:</source>
          <target state="translated">표준 라이브러리에는 무언가를 반복자로 변환하는 특성이 있습니다 : &lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt; . 이 특성에는 &lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt; 를 구현하는 것을 iterator로 변환하는 &lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt; 메소드가 있습니다. &lt;code&gt;for&lt;/code&gt; 루프를 다시 살펴보고 컴파일러가이를 루프로 변환하는 내용 을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="126dd99b7c8920c551aa5435d3f5f50326fcb2aa" translate="yes" xml:space="preserve">
          <source>There's no easy fix for this, generally code will need to be refactored so that you no longer need to derive from &lt;code&gt;Super&amp;lt;Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이에 대한 쉬운 해결책은 없으며 일반적으로 코드를 리팩터링하여 더 이상 &lt;code&gt;Super&amp;lt;Self&amp;gt;&lt;/code&gt; 에서 파생시킬 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="488dc2b946582ce5502bb699e0ad78fcce8b394c" translate="yes" xml:space="preserve">
          <source>There's one more subtle bit here: the standard library contains an interesting implementation of &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">표준 라이브러리에는 흥미로운 &lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt; 구현이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="943a55d68bc8d1a8af15546966743386da3f91a8" translate="yes" xml:space="preserve">
          <source>Therefore, Rust&amp;rsquo;s type system and trait bounds ensure that you can never accidentally send an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; value across threads unsafely. When we tried to do this in Listing 16-14, we got the error &lt;code&gt;the trait Send is not implemented for Rc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt;. When we switched to &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, which is &lt;code&gt;Send&lt;/code&gt;, the code compiled.</source>
          <target state="translated">따라서 Rust의 유형 시스템 및 특성 경계는 실수로 스레드를 통해 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 값을 안전하지 않게 보낼 수 없도록합니다 . Listing 16-14에서이 작업을 시도했을 때 &lt;code&gt;the trait Send is not implemented for Rc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; 오류가 발생 했습니다 . 우리가 스위치를 켜면 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 되고, &lt;code&gt;Send&lt;/code&gt; , 코드는 컴파일.</target>
        </trans-unit>
        <trans-unit id="a965d0af2f94e5f3318be18d630d6ce398f8ad8c" translate="yes" xml:space="preserve">
          <source>Therefore, pinning also comes with a &lt;code&gt;drop&lt;/code&gt;-related guarantee.</source>
          <target state="translated">따라서 고정에는 &lt;code&gt;drop&lt;/code&gt; 관련 보증이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="f3da5db36b6a5c8b63c646979b9f9638e2ffed72" translate="yes" xml:space="preserve">
          <source>These abstractions can be built out of lower-level primitives. For efficiency, the sync objects in the standard library are usually implemented with help from the operating system's kernel, which is able to reschedule the threads while they are blocked on acquiring a lock.</source>
          <target state="translated">이러한 추상화는 하위 레벨 기본 요소로 빌드 될 수 있습니다. 효율성을 높이기 위해 표준 라이브러리의 동기화 객체는 일반적으로 운영 체제 커널의 도움을 받아 구현되며, 잠금을 획득 할 때 스레드를 다시 예약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b4543381c3d34027ca13b9d929f743b5e4c9c39" translate="yes" xml:space="preserve">
          <source>These also point to memory owned by some other value. A mutable reference type is written &lt;code&gt;&amp;amp;mut type&lt;/code&gt; or &lt;code&gt;&amp;amp;'a mut type&lt;/code&gt;. A mutable reference (that hasn't been borrowed) is the only way to access the value it points to, so is not &lt;code&gt;Copy&lt;/code&gt;.</source>
          <target state="translated">이것들은 다른 값이 소유 한 메모리를 가리 킵니다. 변경 가능한 참조 유형은 &lt;code&gt;&amp;amp;mut type&lt;/code&gt; 또는 &lt;code&gt;&amp;amp;'a mut type&lt;/code&gt; 입니다. 빌려지지 않은 변경 가능한 참조는 그것이 가리키는 값에 액세스하는 유일한 방법이므로 &lt;code&gt;Copy&lt;/code&gt; 는 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="1edbd620f4ea3fb93fdd0d7dd71adad12120dfa7" translate="yes" xml:space="preserve">
          <source>These ampersands are &lt;em&gt;references&lt;/em&gt;, and they allow you to refer to some value without taking ownership of it. Figure 4-5 shows a diagram.</source>
          <target state="translated">이 앰퍼샌드는 &lt;em&gt;참조&lt;/em&gt; 이며, 소유권을 가지지 않고 일부 값을 참조 할 수 있습니다. 그림 4-5는 다이어그램을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3f42eae85e77f8aae9c5335f688c216fd7101df0" translate="yes" xml:space="preserve">
          <source>These are fairly high-level and quick break-downs of when each collection should be considered. Detailed discussions of strengths and weaknesses of individual collections can be found on their own documentation pages.</source>
          <target state="translated">이는 각 컬렉션을 고려해야 할시기에 대한 상당히 높은 수준의 빠른 분석입니다. 개별 컬렉션의 장단점에 대한 자세한 내용은 해당 설명서 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="69b2114a065741874c57309ba27c70784c7ddedd" translate="yes" xml:space="preserve">
          <source>These are the last two unary operators. This table summarizes the behavior of them on primitive types and which traits are used to overload these operators for other types. Remember that signed integers are always represented using two's complement. The operands of all of these operators are evaluated in &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression context&lt;/a&gt; so are moved or copied.</source>
          <target state="translated">이들은 마지막 두 개의 단항 연산자입니다. 이 표는 기본 유형에 대한 해당 동작과 다른 유형에 대해 이러한 연산자를 오버로드하는 데 사용되는 특성을 요약합니다. 부호있는 정수는 항상 2의 보수를 사용하여 표현됩니다. 이러한 모든 연산자의 피연산자는 &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;값 표현식 컨텍스트&lt;/a&gt; 에서 평가 되므로 이동하거나 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="b6db5a380dbbbf8a2cd7b3c9d1a9637a5d119ab4" translate="yes" xml:space="preserve">
          <source>These attributes do not work on typedefs, since typedefs are just aliases.</source>
          <target state="translated">typedef는 별명 일 뿐이므로 이러한 속성은 typedef에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="45e9c8e478d7d23050c1bb7760888996d75acd57" translate="yes" xml:space="preserve">
          <source>These axioms, along with careful use of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt; for pointer arithmetic, are enough to correctly implement many useful things in unsafe code. Stronger guarantees will be provided eventually, as the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/aliasing.html&quot;&gt;aliasing&lt;/a&gt; rules are being determined. For more information, see the &lt;a href=&quot;../../book/ch19-01-unsafe-rust#dereferencing-a-raw-pointer&quot;&gt;book&lt;/a&gt; as well as the section in the reference devoted to &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">포인터 산술 에 &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt; 을 신중하게 사용하는 것과 같은 이러한 공리 는 안전하지 않은 코드에서 많은 유용한 것들을 올바르게 구현하기에 충분합니다. &lt;a href=&quot;https://doc.rust-lang.org/nomicon/aliasing.html&quot;&gt;앨리어싱&lt;/a&gt; 규칙이 결정 되면 더 강력한 보증이 제공 될 것 입니다. 자세한 내용은 &lt;a href=&quot;../../book/ch19-01-unsafe-rust#dereferencing-a-raw-pointer&quot;&gt;책&lt;/a&gt; 과 &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;정의되지 않은 동작&lt;/a&gt; 에 관한 참조 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7913b3c72a22fc6b243e0539a47297d89428aedf" translate="yes" xml:space="preserve">
          <source>These can all be interpreted as flags for a particular formatter.</source>
          <target state="translated">이들은 모두 특정 포맷터에 대한 플래그로 해석 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e39a0bd16ba8ecfd732cbb117c3248fda60a735" translate="yes" xml:space="preserve">
          <source>These can be fixed by declaring lifetime parameters:</source>
          <target state="translated">수명 매개 변수를 선언하여이를 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d454f3116d0aed2fb7a537cae1b229f52b361113" translate="yes" xml:space="preserve">
          <source>These channels come in two flavors:</source>
          <target state="translated">이 채널은 두 가지 맛이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c31b94922e5b65f02fef2f529b0b7e4859486143" translate="yes" xml:space="preserve">
          <source>These components describe the shape of the data we&amp;rsquo;re working with, which we then match against values to determine whether our program has the correct data to continue running a particular piece of code.</source>
          <target state="translated">이 컴포넌트들은 우리가 작업하고있는 데이터의 형태를 기술 한 다음, 특정 코드를 계속 실행하기 위해 프로그램에 올바른 데이터가 있는지를 결정하기 위해 값과 비교합니다.</target>
        </trans-unit>
        <trans-unit id="01d073371ba3433dace28c44e03a57f2a2d8dbcd" translate="yes" xml:space="preserve">
          <source>These default object lifetime bounds are used instead of the lifetime parameter elision rules defined above when the lifetime bound is omitted entirely. If &lt;code&gt;'_&lt;/code&gt; is used as the lifetime bound then the bound follows the usual elision rules.</source>
          <target state="translated">이러한 기본 객체 수명 범위는 수명 한계가 완전히 생략 될 때 위에서 정의 된 수명 매개 변수 제거 규칙 대신 사용됩니다. 경우 &lt;code&gt;'_&lt;/code&gt; 바인딩 수명으로 사용 후 바운드는 보통 생략 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="3cb556ed4e688a43a755806e0180a1ae20f4245d" translate="yes" xml:space="preserve">
          <source>These enumerations can be cast to integer types with the &lt;code&gt;as&lt;/code&gt; operator by a &lt;a href=&quot;../expressions/operator-expr#semantics&quot;&gt;numeric cast&lt;/a&gt;. The enumeration can optionally specify which integer each discriminant gets by following the variant name with &lt;code&gt;=&lt;/code&gt; followed by a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;. If the first variant in the declaration is unspecified, then it is set to zero. For every other unspecified discriminant, it is set to one higher than the previous variant in the declaration.</source>
          <target state="translated">이러한 열거 형은 &lt;a href=&quot;../expressions/operator-expr#semantics&quot;&gt;숫자 캐스트 &lt;/a&gt; &lt;code&gt;as&lt;/code&gt; 연산자를 사용하여 정수 유형으로 캐스트 할 수 있습니다 . 열거 형은 선택적으로 각 식별 변수에 &lt;code&gt;=&lt;/code&gt; 가 포함 된 변형 이름 뒤에 &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;상수 표현식이&lt;/a&gt; 오는 정수를 지정할 수 있습니다 . 선언의 첫 번째 변형이 지정되지 않은 경우 0으로 설정됩니다. 다른 모든 지정되지 않은 판별 변수에 대해서는 선언에서 이전 변형보다 하나 더 높게 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="56f44a74054755cd230d668bfd5dc0a8f5aa2ac0" translate="yes" xml:space="preserve">
          <source>These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords. The reasoning behind this is to make current programs forward compatible with future versions of Rust by forbidding them to use these keywords.</source>
          <target state="translated">이 키워드는 아직 사용되지 않지만 나중에 사용하기 위해 예약되어 있습니다. 엄격한 키워드와 동일한 제한 사항이 있습니다. 그 이유는 현재 프로그램이 이러한 키워드를 사용하지 못하도록하여 향후 프로그램의 Rust와 호환되도록하기 위해서입니다.</target>
        </trans-unit>
        <trans-unit id="f2eab53396d35c8dd4df2e3ab58dfee415a7015e" translate="yes" xml:space="preserve">
          <source>These keywords can only be used in their correct contexts. They cannot be used as the names of:</source>
          <target state="translated">이 키워드는 올바른 컨텍스트에서만 사용할 수 있습니다. 다음 이름으로 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="aec421e6db4795c07bbf5e8ae6411e119af0b089" translate="yes" xml:space="preserve">
          <source>These keywords have special meaning only in certain contexts. For example, it is possible to declare a variable or method with the name &lt;code&gt;union&lt;/code&gt;.</source>
          <target state="translated">이러한 키워드는 특정 상황에서만 특별한 의미를 갖습니다. 예를 들어 이름이 &lt;code&gt;union&lt;/code&gt; 인 변수 또는 메소드를 선언 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24355b40ed9274fe2bce5ed7512a65c55ffdfb11" translate="yes" xml:space="preserve">
          <source>These lines define a function in Rust. The &lt;code&gt;main&lt;/code&gt; function is special: it is always the first code that runs in every executable Rust program. The first line declares a function named &lt;code&gt;main&lt;/code&gt; that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses, &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">이 라인들은 Rust에서 함수를 정의합니다. &lt;code&gt;main&lt;/code&gt; 기능은 특별하다 : 그것은 항상 첫 번째 코드는 그 모든 실행 녹 프로그램에서 실행됩니다. 첫 번째 줄은 매개 변수가없는 &lt;code&gt;main&lt;/code&gt; 함수를 선언하고 아무것도 반환하지 않습니다. 매개 변수가 있으면 괄호 안에 &lt;code&gt;()&lt;/code&gt; 가 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="78ee21b3b578a8828b900a4d7bb5e92af7fdfb9f" translate="yes" xml:space="preserve">
          <source>These lines show Cargo only updates the build with your tiny change to the &lt;em&gt;src/main.rs&lt;/em&gt; file. Your dependencies haven&amp;rsquo;t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those. It just rebuilds your part of the code.</source>
          <target state="translated">이 줄은 Cargo가 &lt;em&gt;src / main.rs&lt;/em&gt; 파일 을 약간 변경하여 빌드 만 업데이트 함을 보여줍니다 . 의존성은 변경되지 않았으므로 Cargo는 이미 다운로드하여 컴파일 한 것을 재사용 할 수 있다는 것을 알고 있습니다. 코드의 일부만 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c77584f3dda90ac8527f5ef32d9ad1f6daeca4c8" translate="yes" xml:space="preserve">
          <source>These macros are defined by a &lt;a href=&quot;visibility-and-privacy&quot;&gt;public&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; and a signature of &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt;. The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is what is inside the delimiters of the macro invocation and the output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; replaces the entire macro invocation. It may contain an arbitrary number of &lt;a href=&quot;items&quot;&gt;items&lt;/a&gt;. These macros cannot expand to syntax that defines new &lt;code&gt;macro_rules&lt;/code&gt; style macros.</source>
          <target state="translated">이 매크로는에 의해 정의 된 &lt;a href=&quot;visibility-and-privacy&quot;&gt;공공 &lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;기능&lt;/a&gt; 와 &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 및 서명 &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt; . 입력 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt; 은 매크로 호출의 분리 문자 안에 있으며 출력 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt; 은 전체 매크로 호출을 대체합니다. 임의의 수의 &lt;a href=&quot;items&quot;&gt;항목을&lt;/a&gt; 포함 할 수 있습니다 . 이러한 매크로는 새로운 &lt;code&gt;macro_rules&lt;/code&gt; 스타일 매크로 를 정의하는 구문으로 확장 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="254739acb173823a2863a1c41d3ebb09cfa13aeb" translate="yes" xml:space="preserve">
          <source>These macros are only invokable in &lt;a href=&quot;items/modules&quot;&gt;modules&lt;/a&gt;. They cannot even be invoked to create &lt;a href=&quot;statements#item-declarations&quot;&gt;item declaration statements&lt;/a&gt;. Furthermore, they must either be invoked with curly braces and no semicolon or a different delimiter followed by a semicolon. For example, &lt;code&gt;make_answer&lt;/code&gt; from the previous example can be invoked as &lt;code&gt;make_answer!{}&lt;/code&gt;, &lt;code&gt;make_answer!();&lt;/code&gt; or &lt;code&gt;make_answer![];&lt;/code&gt;.</source>
          <target state="translated">이 매크로는 &lt;a href=&quot;items/modules&quot;&gt;모듈&lt;/a&gt; 에서만 호출 할 수 있습니다. &lt;a href=&quot;statements#item-declarations&quot;&gt;항목 선언문&lt;/a&gt; 을 작성하기 위해 호출 할 수도 없습니다 . 또한 중괄호없이 세미콜론이나 다른 구분 기호 뒤에 세미콜론을 사용하여 호출해야합니다. 예를 들어, &lt;code&gt;make_answer&lt;/code&gt; 이전 예제는 다음과 같이 호출 할 수 있습니다 &lt;code&gt;make_answer!{}&lt;/code&gt; , &lt;code&gt;make_answer!();&lt;/code&gt; 또는 &lt;code&gt;make_answer![];&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5391198458bfd8d81a447bc30f66734e6f03394d" translate="yes" xml:space="preserve">
          <source>These markers can be combined, so &lt;code&gt;unsafe extern &quot;stdcall&quot; fn()&lt;/code&gt; is a valid type.</source>
          <target state="translated">이러한 마커를 결합 할 수 있으므로 &lt;code&gt;unsafe extern &quot;stdcall&quot; fn()&lt;/code&gt; 은 유효한 유형입니다.</target>
        </trans-unit>
        <trans-unit id="8c3ea3ec32e230deeef1943701b442105e65b661" translate="yes" xml:space="preserve">
          <source>These operators cannot be overloaded.</source>
          <target state="translated">이 연산자는 오버로드 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3fc236a778b843e2aeed416fa4b2cc9e1a08823c" translate="yes" xml:space="preserve">
          <source>These point to memory &lt;em&gt;owned by some other value&lt;/em&gt;. When a shared reference to a value is created it prevents direct mutation of the value. &lt;a href=&quot;../interior-mutability&quot;&gt;Interior mutability&lt;/a&gt; provides an exception for this in certain circumstances. As the name suggests, any number of shared references to a value may exist. A shared reference type is written &lt;code&gt;&amp;amp;type&lt;/code&gt;, or &lt;code&gt;&amp;amp;'a type&lt;/code&gt; when you need to specify an explicit lifetime. Copying a reference is a &quot;shallow&quot; operation: it involves only copying the pointer itself, that is, pointers are &lt;code&gt;Copy&lt;/code&gt;. Releasing a reference has no effect on the value it points to, but referencing of a &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;temporary value&lt;/a&gt; will keep it alive during the scope of the reference itself.</source>
          <target state="translated">이것들은 &lt;em&gt;다른 가치가 소유 한&lt;/em&gt; 메모리를 가리킨다 . 값에 대한 공유 참조가 작성되면 값의 직접적인 돌연변이가 방지됩니다. &lt;a href=&quot;../interior-mutability&quot;&gt;내부 변경&lt;/a&gt; 은 특정 상황에서 이에 대한 예외를 제공합니다. 이름에서 알 수 있듯이 값에 대한 공유 참조는 여러 개 존재할 수 있습니다. 공유 참조 유형은 &lt;code&gt;&amp;amp;type&lt;/code&gt; 또는 명시적인 수명을 지정해야 할 경우 &lt;code&gt;&amp;amp;'a type&lt;/code&gt; 입니다. 참조 복사는 &quot;얕은&quot;작업입니다. 포인터 자체 만 복사하면됩니다. 즉 포인터는 &lt;code&gt;Copy&lt;/code&gt; 입니다. 참조를 해제해도 해당 값에 영향을 미치지 않지만 &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;임시 값&lt;/a&gt; 을 참조하면 참조 자체의 범위 내에서 참조가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="e5e8141a80455494c8061b88eb7d52c5630351cf" translate="yes" xml:space="preserve">
          <source>These profile names might be familiar from the output of your builds:</source>
          <target state="translated">이 프로파일 이름은 빌드 결과에 익숙 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ad28c50cb4ab16e536724b4f61aca4d7477f454" translate="yes" xml:space="preserve">
          <source>These safety checks can be relaxed for a section of the code by wrapping the unsafe instructions with an &lt;code&gt;unsafe&lt;/code&gt; block. For instance:</source>
          <target state="translated">안전하지 않은 명령어를 &lt;code&gt;unsafe&lt;/code&gt; 블록 으로 감싸서 코드 섹션에 대해 이러한 안전 점검을 완화 할 수 있습니다 . 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="7c9be14b653ccb0fc4412a262bd32a7bb0662862" translate="yes" xml:space="preserve">
          <source>These traits, along with &lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;, work in conjunction so that it is possible to &lt;strong&gt;round-trip&lt;/strong&gt; strings from Windows and back, with no loss of data, even if the strings are ill-formed UTF-16.</source>
          <target state="translated">이러한 특성은 &lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt; 과 함께 작동 하여 문자열이 잘못 구성된 UTF-16 인 경우에도 데이터 손실없이 Windows에서 문자열을 &lt;strong&gt;왕복&lt;/strong&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0cc726c49519e90aab3de25bfe65c626d294217a" translate="yes" xml:space="preserve">
          <source>These two cases are surprisingly powerful for creating module hierarchies exposing public APIs while hiding internal implementation details. To help explain, here's a few use cases and what they would entail:</source>
          <target state="translated">이 두 가지 경우는 내부 구현 세부 정보를 숨기고 공개 API를 노출하는 모듈 계층을 만드는 데 놀랍도록 강력합니다. 설명을 돕기 위해 다음은 몇 가지 사용 사례와 그에 따른 내용입니다.</target>
        </trans-unit>
        <trans-unit id="8ac19292e9dd15d2d45f1f79b996a19bf6206f30" translate="yes" xml:space="preserve">
          <source>These two examples illustrate the problem:</source>
          <target state="translated">이 두 예는 문제를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="dca9d4b1de7c5a2be4c4d5727e7917fd8aab654c" translate="yes" xml:space="preserve">
          <source>These two formatting traits have distinct purposes:</source>
          <target state="translated">이 두 가지 서식 특성은 고유 한 용도가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f982f08c4e46524b8318daa35d1f6508b56f9c5" translate="yes" xml:space="preserve">
          <source>These two terms are often used interchangeably, and what they are attempting to convey is the answer to the question &quot;Can this item be used at this location?&quot;</source>
          <target state="translated">이 두 용어는 종종 같은 의미로 사용되며,이 항목을 &quot;이 위치에서 사용할 수 있습니까?&quot;라는 질문에 대한 답이 전달하려고합니다.</target>
        </trans-unit>
        <trans-unit id="327e657798ef3a0fe98594c42be8998daff24b69" translate="yes" xml:space="preserve">
          <source>These types provide access to the underlying data through references to the type of that data. They are said to be &amp;lsquo;borrowed as&amp;rsquo; that type. For instance, a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; can be borrowed as &lt;code&gt;T&lt;/code&gt; while a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; can be borrowed as &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">이러한 유형은 해당 데이터 유형에 대한 참조를 통해 기본 데이터에 대한 액세스를 제공합니다. 그들은 그 유형으로 '차용 된'것으로 알려져 있습니다. 예를 들어, &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 로 대여 할 수 &lt;code&gt;T&lt;/code&gt; 잠시 &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 로 빌릴 수 있습니다 &lt;code&gt;str&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a24b18110788da060d08a87d6e0370b2f3f11b2d" translate="yes" xml:space="preserve">
          <source>These will always be ORed with &lt;code&gt;CREATE_UNICODE_ENVIRONMENT&lt;/code&gt;.</source>
          <target state="translated">이들은 항상 &lt;code&gt;CREATE_UNICODE_ENVIRONMENT&lt;/code&gt; 로 OR됩니다 .</target>
        </trans-unit>
        <trans-unit id="4d9283345c9b012905e98bac4c4ff6bf77874d49" translate="yes" xml:space="preserve">
          <source>They are &lt;code&gt;'static&lt;/code&gt; because they're stored directly in the final binary, and so will be valid for the &lt;code&gt;'static&lt;/code&gt; duration.</source>
          <target state="translated">그들은는 &lt;code&gt;'static&lt;/code&gt; 들이 최종 바이너리에 직접 저장하고, 그래서 유효합니다 때문에 &lt;code&gt;'static&lt;/code&gt; 기간입니다.</target>
        </trans-unit>
        <trans-unit id="86b3fa967e9ddc952d15703cad09add6ed0fe12c" translate="yes" xml:space="preserve">
          <source>They are never allowed before:</source>
          <target state="translated">그들은 전에 허용되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="a91c6bc4d714ec79e34b3b499dac181a1c8a5b61" translate="yes" xml:space="preserve">
          <source>They are written as &lt;code&gt;impl&lt;/code&gt; followed by a set of trait bounds.</source>
          <target state="translated">그것들은 일련의 특성 범위에 따라 &lt;code&gt;impl&lt;/code&gt; 으로 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="d6f10b3f0570fbded7ab662d2bff2e38078266a6" translate="yes" xml:space="preserve">
          <source>They can be used as targets of transmutes in unsafe code for manipulating the raw representations directly.</source>
          <target state="translated">원시 표현을 직접 조작하기 위해 안전하지 않은 코드에서 변환 대상으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3eb09871747750e3ee06b75fa9a63f7cfbbd1d29" translate="yes" xml:space="preserve">
          <source>Thin pointers are &quot;simple&quot; pointers: they are purely a reference to a memory address.</source>
          <target state="translated">얇은 포인터는 &quot;간단한&quot;포인터입니다. 순전히 메모리 주소에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="4d4a58caf1c3fd49804715c525d371aaf6cc87c9" translate="yes" xml:space="preserve">
          <source>Things can get a little tricky once you start intermingling the two types of positional specifiers. The &quot;next argument&quot; specifier can be thought of as an iterator over the argument. Each time a &quot;next argument&quot; specifier is seen, the iterator advances. This leads to behavior like this:</source>
          <target state="translated">두 가지 유형의 위치 지정자를 혼합하기 시작하면 약간 까다로울 수 있습니다. &quot;다음 인수&quot;지정자는 인수에 대한 반복자로 생각할 수 있습니다. &quot;다음 인수&quot;지정자가 보일 때마다 반복자가 진행됩니다. 이것은 다음과 같은 동작으로 이어집니다.</target>
        </trans-unit>
        <trans-unit id="9af9ddcb5af382b3006b61fbf3f41b42b2b57797" translate="yes" xml:space="preserve">
          <source>Think of a &lt;code&gt;match&lt;/code&gt; expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a &lt;code&gt;match&lt;/code&gt;, and at the first pattern the value &amp;ldquo;fits,&amp;rdquo; the value falls into the associated code block to be used during execution.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 표현은 동전 분류 기계와 같다고 생각하십시오 . 동전은 다양한 크기의 구멍이있는 트랙을 따라 내려 가고 각 동전은 맞은 첫 번째 구멍을 통해 떨어집니다. 같은 방식으로 값은 &lt;code&gt;match&lt;/code&gt; 에서 각 패턴을 통과 하고 첫 번째 패턴에서 값이 &quot;적합&quot;합니다. 값은 실행 중에 사용되는 관련 코드 블록에 속합니다.</target>
        </trans-unit>
        <trans-unit id="1fdd8b4a97ce68f59e33b3f6b509748be1aa6f2f" translate="yes" xml:space="preserve">
          <source>Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you&amp;rsquo;ve been seated to find you.</source>
          <target state="translated">식당에 앉는 것을 생각하십시오. 입장하면 그룹의 인원 수를 알려주고 직원이 모든 사람에게 적합한 빈 테이블을 찾아서 안내합니다. 그룹의 누군가가 늦게 오면 내 자리를 찾은 위치를 물어볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0748eff7f6f3425a675a552a35d84af9fe1be56c" translate="yes" xml:space="preserve">
          <source>Thinking about the relationships another way, a parent node should own its children: if a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: if we drop a child node, the parent should still exist. This is a case for weak references!</source>
          <target state="translated">관계를 다른 방식으로 생각할 때 부모 노드는 자식을 소유해야합니다. 부모 노드를 삭제하면 자식 노드도 삭제해야합니다. 그러나 자식은 부모를 소유해서는 안됩니다. 자식 노드를 삭제해도 부모는 여전히 존재해야합니다. 이것은 약한 참조의 경우입니다!</target>
        </trans-unit>
        <trans-unit id="399cffdf26999603bae93a3715241addff90c419" translate="yes" xml:space="preserve">
          <source>Thinking in Terms of Lifetimes</source>
          <target state="translated">평생의 생각</target>
        </trans-unit>
        <trans-unit id="7407b5aadd0d88118f5b7bf8fb59e7e1d6d93882" translate="yes" xml:space="preserve">
          <source>Third, the &lt;code&gt;run&lt;/code&gt; function now returns an &lt;code&gt;Ok&lt;/code&gt; value in the success case. We&amp;rsquo;ve declared the &lt;code&gt;run&lt;/code&gt; function&amp;rsquo;s success type as &lt;code&gt;()&lt;/code&gt; in the signature, which means we need to wrap the unit type value in the &lt;code&gt;Ok&lt;/code&gt; value. This &lt;code&gt;Ok(())&lt;/code&gt; syntax might look a bit strange at first, but using &lt;code&gt;()&lt;/code&gt; like this is the idiomatic way to indicate that we&amp;rsquo;re calling &lt;code&gt;run&lt;/code&gt; for its side effects only; it doesn&amp;rsquo;t return a value we need.</source>
          <target state="translated">셋째, &lt;code&gt;run&lt;/code&gt; 함수는 이제 성공 사례에서 &lt;code&gt;Ok&lt;/code&gt; 값을 반환합니다 . &lt;code&gt;run&lt;/code&gt; 함수의 성공 유형을 서명에서 &lt;code&gt;()&lt;/code&gt; 로 선언했습니다. 즉, 단위 유형 값을 &lt;code&gt;Ok&lt;/code&gt; 값 으로 줄 바꿈해야 합니다. 이 &lt;code&gt;Ok(())&lt;/code&gt; 구문은 처음에는 조금 이상하게 보일 수 있지만, 이와 같이 &lt;code&gt;()&lt;/code&gt; 를 사용 하면 부작용에 대해서만 &lt;code&gt;run&lt;/code&gt; 을 호출한다는 것을 나타내는 관용적 방법입니다 . 필요한 값을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5ed975d1877254eff4f647cec29b338bbca64ef4" translate="yes" xml:space="preserve">
          <source>Third, the standard library defines &lt;a href=&quot;prelude/index&quot;&gt;The Rust Prelude&lt;/a&gt;, a small collection of items - mostly traits - that are imported into every module of every crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.</source>
          <target state="translated">셋째, 표준 라이브러리는 모든 상자의 모든 모듈로 가져 오는 소량의 항목 (주로 특성)의 컬렉션 인 &lt;a href=&quot;prelude/index&quot;&gt;Rust Prelude를&lt;/a&gt; 정의합니다 . 전주곡의 특성이 널리 퍼져있어서 전주 문서를 도서관에 대해 배우기에 좋은 진입 점으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2c016402b0d7abec88d04b55dd5a8f4c018ceb4a" translate="yes" xml:space="preserve">
          <source>Third, you see the &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; string. We pass this string as an argument to &lt;code&gt;println!&lt;/code&gt;, and the string is printed to the screen.</source>
          <target state="translated">셋째, &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; 끈. 이 문자열을 &lt;code&gt;println!&lt;/code&gt; 대한 인수로 전달합니다 ! 문자열이 화면에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="756c69ab3ae5844d50aa9add76723030b90c2e84" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; will be an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; if there's some sort of intermittent IO error during iteration.</source>
          <target state="translated">이 &lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; 될 것입니다 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 반복하는 동안 간헐적 인 IO 오류의 일종이 있다면.</target>
        </trans-unit>
        <trans-unit id="45e5b6731a2eea68db70299dc76799ac1e3d8403" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;'s receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.</source>
          <target state="translated">이 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt; 의 수신 절반이 연결 해제되어 데이터를 전송할 수 없습니다. 이 경우 데이터는 수신자에게 다시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e029dc532e12308a313b095f5b88bb0b2db85884" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;#[route]&lt;/code&gt; attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:</source>
          <target state="translated">이 &lt;code&gt;#[route]&lt;/code&gt; 속성은 프레임 워크에 의해 절차 적 매크로로 정의됩니다. 매크로 정의 함수의 서명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dc8fa4acf3fa662b100c7f01811572d66ca46b05" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Message&lt;/code&gt; enum will either be a &lt;code&gt;NewJob&lt;/code&gt; variant that holds the &lt;code&gt;Job&lt;/code&gt; the thread should run, or it will be a &lt;code&gt;Terminate&lt;/code&gt; variant that will cause the thread to exit its loop and stop.</source>
          <target state="translated">이 &lt;code&gt;Message&lt;/code&gt; 열거 형은 스레드가 실행해야하는 &lt;code&gt;Job&lt;/code&gt; 을 보유 하는 &lt;code&gt;NewJob&lt;/code&gt; 변형 이거나 스레드가 루프를 종료하고 정지 하게하는 &lt;code&gt;Terminate&lt;/code&gt; 변형입니다.</target>
        </trans-unit>
        <trans-unit id="df201a49abc9a95b4b9db82dff3855ec3856b74c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;struct.btreemap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;code&gt;enum&lt;/code&gt; 은 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreemap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; 방법으로 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="78b77c0bae34af9fbe0dd6db2b8a03354e7c6a07" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;struct.hashmap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;code&gt;enum&lt;/code&gt; 은 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; 메소드로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="e49b2cde36d96ef41241461160aaa7f39ffe4733" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed through the &lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;raw_entry_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, then calling one of the methods of that &lt;a href=&quot;struct.rawentrybuildermut&quot;&gt;&lt;code&gt;RawEntryBuilderMut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;code&gt;enum&lt;/code&gt; 은 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;raw_entry_mut&lt;/code&gt; &lt;/a&gt; 메소드를 통해 생성 된 다음 해당 &lt;a href=&quot;struct.rawentrybuildermut&quot;&gt; &lt;code&gt;RawEntryBuilderMut&lt;/code&gt; &lt;/a&gt; 의 메소드 중 하나를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="484cddb60aced3f0fd2c66d36c2d02b11434898c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is created by iterating over &lt;a href=&quot;struct.components&quot;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;, which in turn is created by the &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;code&gt;enum&lt;/code&gt; 은 &lt;a href=&quot;struct.components&quot;&gt; &lt;code&gt;Components&lt;/code&gt; &lt;/a&gt; 를 반복하여 만들어지며,이 &lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 의 구성 요소 메서드로 만들어집니다 .</target>
        </trans-unit>
        <trans-unit id="94a9ddcdadd6c80893c9aa067a5c5342d16c5ca8" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is slightly awkward: it will never actually exist. This error is part of the type signature of the implementation of &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. The return type of &lt;a href=&quot;../str/trait.fromstr#tymethod.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt;, requires that an error be defined, but, given that a &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; can always be made into a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; without error, this type will never actually be returned. As such, it is only here to satisfy said signature, and is useless otherwise.</source>
          <target state="translated">이 &lt;code&gt;enum&lt;/code&gt; 은 약간 어색합니다. 실제로는 존재하지 않습니다. 이 오류는 &lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt; on &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 구현의 형식 서명의 일부입니다 . &lt;a href=&quot;../str/trait.fromstr#tymethod.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; &lt;/a&gt; 의 반환 유형은 오류를 정의해야하지만, 오류없이 &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 을 항상 새 &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 로 만들 수있는 경우이 유형은 실제로 반환되지 않습니다. 따라서, 상기 서명을 만족시키는 것은 단지 여기에 있으며, 그렇지 않으면 쓸모가 없다.</target>
        </trans-unit>
        <trans-unit id="7bafcd26f5f930140b3a1e3e5a967a8f857b2aca" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is used as the return type for &lt;a href=&quot;../primitive.f32#method.classify&quot;&gt;&lt;code&gt;f32::classify&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.f64#method.classify&quot;&gt;&lt;code&gt;f64::classify&lt;/code&gt;&lt;/a&gt;. See their documentation for more.</source>
          <target state="translated">이 &lt;code&gt;enum&lt;/code&gt; 은 &lt;a href=&quot;../primitive.f32#method.classify&quot;&gt; &lt;code&gt;f32::classify&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../primitive.f64#method.classify&quot;&gt; &lt;code&gt;f64::classify&lt;/code&gt; &lt;/a&gt; 의 반환 유형으로 사용됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="779a09142baa1b4c0c25a858cbd603a82e00fb14" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;new&lt;/code&gt; function creates a new, empty string. You&amp;rsquo;ll find a &lt;code&gt;new&lt;/code&gt; function on many types, because it&amp;rsquo;s a common name for a function that makes a new value of some kind.</source>
          <target state="translated">이 &lt;code&gt;new&lt;/code&gt; 함수는 새로운 빈 문자열을 만듭니다. 어떤 종류의 새로운 가치를 만드는 함수의 일반적인 이름이기 때문에 많은 유형에서 &lt;code&gt;new&lt;/code&gt; 함수를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04527249225c0957b4a2dad0cb713b606320b989" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_debug&quot;&gt;&lt;code&gt;escape_debug&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../primitive.char#method.escape_debug&quot;&gt; &lt;code&gt;escape_debug&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="db12edeeb870acc98aa06b33b39a8bb3d306d517" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../primitive.char#method.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cc81870e647a4c66d45285572c3d1fa6c0473baa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_unicode&quot;&gt;&lt;code&gt;escape_unicode&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../primitive.char#method.escape_unicode&quot;&gt; &lt;code&gt;escape_unicode&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1fe84815a63364d86bf9311c9ac78e8bdb20701b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.to_lowercase&quot;&gt;&lt;code&gt;to_lowercase&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../primitive.char#method.to_lowercase&quot;&gt; &lt;code&gt;to_lowercase&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="27eb64d64fc617e07c6f09849f8a1efd113c9e7c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.to_uppercase&quot;&gt;&lt;code&gt;to_uppercase&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../primitive.char#method.to_uppercase&quot;&gt; &lt;code&gt;to_uppercase&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="df020e51f3f4500bc1f8be7714b7e55fb7923be6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.into_iter&quot;&gt;&lt;code&gt;Option::into_iter&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;enum.option#method.into_iter&quot;&gt; &lt;code&gt;Option::into_iter&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="ed85839c71b9b41d697c086ba092e08ee354cb7a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.iter&quot;&gt;&lt;code&gt;Option::iter&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;enum.option#method.iter&quot;&gt; &lt;code&gt;Option::iter&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="f832fbc0a1897989e972bccbdf14ab8c06df2a8b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.iter_mut&quot;&gt;&lt;code&gt;Option::iter_mut&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;enum.option#method.iter_mut&quot;&gt; &lt;code&gt;Option::iter_mut&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="f3c09e42d5e7d0d1aee87da5c6a31ae546137c1a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.empty&quot;&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="583b1959fdeeb9dda8ffebe215f3e85158c8bc2e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="be7c13071482b2c3923f2e736bd014b0019bfa3c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.from_fn&quot;&gt;&lt;code&gt;iter::from_fn&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.from_fn&quot;&gt; &lt;code&gt;iter::from_fn&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b2d0d0c848c068f0195f43a41a604e9ed15435ea" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once&quot;&gt;&lt;code&gt;once&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.once&quot;&gt; &lt;code&gt;once&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="582110272ac53674cd7341259d0b80e92c531007" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once_with&quot;&gt;&lt;code&gt;once_with&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.once_with&quot;&gt; &lt;code&gt;once_with&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f750c0f224dd89d4b261959a2e6c2e0e53f46764" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat&quot;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.repeat&quot;&gt; &lt;code&gt;repeat&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="937c3c66fd7a919cfaca746517ec0915d37c92b5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat_with&quot;&gt;&lt;code&gt;repeat_with&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.repeat_with&quot;&gt; &lt;code&gt;repeat_with&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aab81d3f94443c5e362d592846bb5f615688f696" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;thread::Builder::spawn&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt; 함수와 &lt;a href=&quot;struct.builder#method.spawn&quot;&gt; &lt;code&gt;thread::Builder::spawn&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="2bba3b7b1d3ddee116465f88074412d173b46ad3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.successors&quot;&gt;&lt;code&gt;successors&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;fn.successors&quot;&gt; &lt;code&gt;successors&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="750025df63cee4f9476b600e410c271d4dc26282" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.binaryheap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 메서드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e18a9e9bb705ac20d27c1b54b01a06909af9f5aa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.binaryheap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt; 메소드 ( &lt;code&gt;IntoIterator&lt;/code&gt; 특성으로 제공)에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="41506355b29f22e9b8811a8d2b60d92fed5ea6d5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.binaryheap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e9675a6cb1b893dbb78e5cb9089bf79a6f234027" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.peek_mut&quot;&gt;&lt;code&gt;peek_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.binaryheap#method.peek_mut&quot;&gt; &lt;code&gt;peek_mut&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a3e0e69a8fe926bff3713eb4f60caf8069defb24" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.btreemap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 용&lt;/a&gt; 에있어서 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; (의해 제공 &lt;code&gt;IntoIterator&lt;/code&gt; 의 특성). 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="514e5b56a0002147cc9f7ac8a43433a6a65225d9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreemap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f716d42a3e459fcee9b6f36db5dc5c8168d480b5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.btreemap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt; 에 방법 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1f4535b44687ead67d4ff87d0edaec473f93f580" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreemap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d31858adce6dfcdec67ca057f391304b96efe373" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreemap#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="beff4242dfe6af7e412bdc0cbf43b9ab3e974e59" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.range_mut&quot;&gt;&lt;code&gt;range_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.btreemap#method.range_mut&quot;&gt; &lt;code&gt;range_mut&lt;/code&gt; 의&lt;/a&gt; 에 방법 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="61ccad7bbc2caef64224c9df6c46da6d30f71236" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreemap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt; 메서드에 의해 생성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="32f656567e75b1c61207668fdcd4fee681fb158f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.btreemap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; 의&lt;/a&gt; 에 방법 &lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="954c25018729177ec5a7cd425af966f38ad45de9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreeset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt; 방법으로 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="311036e0ac34eb0ce755d849d1ee9dcf0da2fa6d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreeset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt; 방법에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cd64d67da228b8471603fbb0b2df44241b404edf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.btreeset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 용&lt;/a&gt; 에있어서 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; (의해 제공된 &lt;code&gt;IntoIterator&lt;/code&gt; 의 특성). 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b2d51f3eed3f11c0fe92a56c05aa30ba63101b5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreeset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4952396a08a80db78884e7472ef4fcdc98f30b89" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreeset#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="03065ec43e94189db8db5b6c22bcd04c4d9e3d5f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreeset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="06c95a89e54823ffe6dff81406fba47c36a4dc6c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.btreeset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="512853e49000d203253875f2ca8249d15ea7353e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.cstring#method.into_string&quot;&gt;&lt;code&gt;into_string&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.cstring#method.into_string&quot;&gt; &lt;code&gt;into_string&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="faa8b1395fad10dcbfc423094256b61e6d205866" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0800ef408d255e0937c01c82d43d77be20d45343" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 ( &lt;code&gt;IntoIterator&lt;/code&gt; 특성으로 제공). 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0608e2c033c0bbc3bd28c971540c2b970498e946" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0d3d57080a3c9ea2da73c2cffa1d26e9e4a02705" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="24475378883de5203105dba62856d4abf99e3544" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9d0295f8ffe26eaa9c9d5777a9c742f561e9829a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt; 메서드에 의해 생성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="29c5ae45f57800a030c9d11a0a477ba58c24833e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashmap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 됩니다. 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7513d477a389bb5cb5a430e327122b1af796c3fd" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="86301ec13deb5075922cbd995e23feac257a9d81" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3ebb8dfa5cf525c05fe6f08d21ee543480482796" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b4fe9a5189ce4199be4828187c5779ad99c77194" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 ( IntoIterator 에 의해 &lt;code&gt;IntoIterator&lt;/code&gt; 특성에서 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d0c83c37cc0812ff3b4a5b7bded4f379cae37eda" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2eb620627c49c8366b81c168c1e2da24ad0ba352" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="150f20ec4e603307925c0aee02dfd449f9a510cf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.hashset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2d89966c70887a327798b302de57b322446d731d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.linkedlist#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt; 메소드 ( &lt;code&gt;IntoIterator&lt;/code&gt; 특성으로 제공)에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="58115891c3a0ac7312c6ea2a52ac61968cc4906c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.linkedlist#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f0659eea6bed999fa3680d324080162cd5e8a132" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.linkedlist#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0aae0dd86db056d40eff085617d4cf75e5ca4cd1" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.ancestors&quot;&gt;&lt;code&gt;ancestors&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.path#method.ancestors&quot;&gt; &lt;code&gt;ancestors&lt;/code&gt; &lt;/a&gt; 메서드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="678416258ee794f65fdd4a1cd12a337537c5938c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f7998e185f302bc549a882f13518743e61ee46ed" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.path#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2cd612b3807ec02a5c6d66e1f1c48af60492df83" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt;&lt;code&gt;strip_prefix&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt; &lt;code&gt;strip_prefix&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b5816e88e64a2f2821568b7180ce9b608c65d11" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt;&lt;code&gt;incoming&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt; &lt;code&gt;incoming&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1f4d8367fad76ae04d5e19a5385a27f59c0aaf13" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.vec#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 메서드에 의해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="5f3bc5ceaa1713a6dc6144c9424b5691a097a496" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.vecdeque#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b345fb68ea41cbf5a17dfb308f9d1a6e9820cc06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.vecdeque#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 용&lt;/a&gt; 에있어서 &lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt; (의해 제공 &lt;code&gt;IntoIterator&lt;/code&gt; 의 특성). 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5c15922d5946c2fdadf8c55e5b28d91817f56274" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.vecdeque#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6dcf16ee1a7554354a5a44529cc2c194dcf3a513" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 에 의해 생성 &lt;a href=&quot;struct.vecdeque#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt; 에 방법 &lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c378dde9d0a6525bd047bdf905231180a99f3491" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;chain&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b7e65fcf3ce565260fcf0013397e867c30f8522f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.cloned&quot;&gt;&lt;code&gt;cloned&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.cloned&quot;&gt; &lt;code&gt;cloned&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f5b898ca8f830f2683dbb470bc2669fdcc151557" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.copied&quot;&gt;&lt;code&gt;copied&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.copied&quot;&gt; &lt;code&gt;copied&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6792715370c3a92e84d28374f5832cff5986bd03" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.cycle&quot;&gt;&lt;code&gt;cycle&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.cycle&quot;&gt; &lt;code&gt;cycle&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="eef34875ae92021a31b6bedf0e5ef3ef03a55346" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt; &lt;code&gt;enumerate&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9fb0d2f619194cb6fd2c5912cd0ab4f8aa1436b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7b10e5f9bf83042ee3e1d8a41324ee574deb204c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt;&lt;code&gt;filter_map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt; &lt;code&gt;filter_map&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e8efe5c2b3a46412d14b079c4efde7503ec17047" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt;&lt;code&gt;flat_map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt; &lt;code&gt;flat_map&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="06ac94503cae6df0f4ea2938d28112afa01fe8f9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.flatten&quot;&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.flatten&quot;&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b8c0c8898fdf0a69bb894be3b262576aa94693ed" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;fuse&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;fuse&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="16538eabad39936ba061176498ea306e212f6f92" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.inspect&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.inspect&quot;&gt; &lt;code&gt;inspect&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a0b5389b001bb0bbe98e28bcb36e5aebd8a66723" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2a63b8c96bdf4e631228dfff76c51a72895aa1c2" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.peekable&quot;&gt;&lt;code&gt;peekable&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.peekable&quot;&gt; &lt;code&gt;peekable&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="77b9d3dc967cfc65e7923a1d25d998d0359bf8da" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;&lt;code&gt;rev&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.rev&quot;&gt; &lt;code&gt;rev&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0c534d67b85da417a0620daeb199532327c51e03" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.scan&quot;&gt; &lt;code&gt;scan&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d55ea7e68cc78050a3929f56a9674ef3cbe9031c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.skip&quot;&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.skip&quot;&gt; &lt;code&gt;skip&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="752b3b9ee442b1ede4f01e7280612ee155b893b6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt;&lt;code&gt;skip_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt; &lt;code&gt;skip_while&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e4194d8e81f0d479a0971b522dc10170de8177ce" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.step_by&quot;&gt;&lt;code&gt;step_by&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.step_by&quot;&gt; &lt;code&gt;step_by&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ae2f32a2383fa23779c3295dfc6285ad6be64c98" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다. . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="431a8793b970c81fcc0ab5b7d979a63311ac642a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.take_while&quot;&gt;&lt;code&gt;take_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.take_while&quot;&gt; &lt;code&gt;take_while&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f6420f53e024dcbfd568efb25b94839f7a579e39" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;trait.iterator#method.zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt; 메소드로 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8be96a57f8e063c35aa0cfee79161d9fbe1f4027" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;code&gt;into_iter&lt;/code&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; (provided by the &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; trait).</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 &lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;into_iter&lt;/code&gt; 메소드 ( &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt; 특성으로 제공)에 의해 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="75da1f33c5a1b29ca9ce3084de81aca63a2c8c06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is used to represent the exit status of a child process. Child processes are created via the &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; struct and their exit status is exposed through the &lt;a href=&quot;struct.command#method.status&quot;&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; method, or the &lt;a href=&quot;struct.child#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt; process.</source>
          <target state="translated">이 &lt;code&gt;struct&lt;/code&gt; 는 자식 프로세스의 종료 상태를 나타내는 데 사용됩니다. 하위 프로세스는 &lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt; 구조체 를 통해 작성되며 종료 상태는 &lt;a href=&quot;struct.command#method.status&quot;&gt; &lt;code&gt;status&lt;/code&gt; &lt;/a&gt; 메소드 또는 &lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt; 프로세스 의 &lt;a href=&quot;struct.child#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; 메소드를 통해 노출 됩니다.</target>
        </trans-unit>
        <trans-unit id="5f5bb1decbaa26846cd44955c2f8ab7127199a37" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;use&lt;/code&gt; statement brings all public items defined in &lt;code&gt;std::collections&lt;/code&gt; into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.</source>
          <target state="translated">이 &lt;code&gt;use&lt;/code&gt; 문은 &lt;code&gt;std::collections&lt;/code&gt; 에 정의 된 모든 공용 항목을 현재 범위로 가져옵니다 . glob 연산자를 사용할 때주의하십시오! Glob은 범위에 속하는 이름과 프로그램에서 사용 된 이름이 정의 된 위치를 파악하기 어렵게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="caecafb5a4fb0937d47c4a448338d709acd25fe7" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;channel&lt;/strong&gt; is currently empty, but the &lt;strong&gt;Sender&lt;/strong&gt;(s) have not yet disconnected, so data may yet become available.</source>
          <target state="translated">이 &lt;strong&gt;채널&lt;/strong&gt; 은 현재 비어 있지만 &lt;strong&gt;발신자&lt;/strong&gt; 연결이 아직 끊어지지 않아 데이터를 아직 사용할 수 없게 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8266d9d9a47bf63d7284fb3019e831be816c08a4" translate="yes" xml:space="preserve">
          <source>This Greek letter convention is usually just employed when the presence of a sequence is a technical detail; in particular, when we wish to &lt;em&gt;emphasize&lt;/em&gt; that we are operating on a sequence of token-trees, we will use the notation &quot;tt ...&quot; for the sequence, not a Greek letter.</source>
          <target state="translated">이 그리스 문자 표기법은 일반적으로 시퀀스의 존재가 기술적 세부 사항 일 때 사용됩니다. 특히, 일련의 토큰 트리에서 작업 &lt;em&gt;하고&lt;/em&gt; 있음 을 &lt;em&gt;강조&lt;/em&gt; 하고 싶다면 그리스 문자가 아닌 시퀀스에 &quot;tt ...&quot;표기법을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6b20bc4e00b7823d1d79ae42b369f4aec802629c" translate="yes" xml:space="preserve">
          <source>This allows a program to terminate immediately and provide feedback to the caller of the program. &lt;code&gt;panic!&lt;/code&gt; should be used when a program reaches an unrecoverable state.</source>
          <target state="translated">이를 통해 프로그램이 즉시 종료되고 프로그램 호출자에게 피드백을 제공 할 수 있습니다. &lt;code&gt;panic!&lt;/code&gt; 프로그램이 복구 불가능한 상태에 도달하면 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="8257259a712f5169c7b4c3c0a8b238e35c31bcfe" translate="yes" xml:space="preserve">
          <source>This allows creating a custom iterator with any behavior without using the more verbose syntax of creating a dedicated type and implementing the &lt;code&gt;Iterator&lt;/code&gt; trait for it.</source>
          <target state="translated">이를 통해 전용 유형을 작성하고 이에 대한 &lt;code&gt;Iterator&lt;/code&gt; 특성을 구현하는 더 자세한 구문을 사용하지 않고도 모든 동작으로 사용자 정의 반복자를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df65a862360a6e0bd203ebc75d215550a55a7ec8" translate="yes" xml:space="preserve">
          <source>This allows the value to be dropped again.</source>
          <target state="translated">이를 통해 값을 다시 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e583956f9df46a2ff992eeadbf1d346839209a48" translate="yes" xml:space="preserve">
          <source>This allows writing a projection that creates a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt;, thus witnessing that the field is pinned:</source>
          <target state="translated">이를 통해 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; 를 생성하는 투영을 작성 하여 필드가 고정되었음을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d056f20cad4a501761c404be3055779184b1614f" translate="yes" xml:space="preserve">
          <source>This also in turn requires the annotation &lt;code&gt;T: 'a&lt;/code&gt;, indicating that any references in &lt;code&gt;T&lt;/code&gt; are valid over the lifetime &lt;code&gt;'a&lt;/code&gt;.</source>
          <target state="translated">이것은 또한 주석 &lt;code&gt;T: 'a&lt;/code&gt; 필요로 하며 , 이는 &lt;code&gt;T&lt;/code&gt; 의 모든 참조 가 수명 동안 유효하다는 &lt;code&gt;'a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="60e1ada09db527973a7bebfb74dc7b9bbc576185" translate="yes" xml:space="preserve">
          <source>This also means that all resources such as file descriptors and memory-mapped regions got duplicated. It is your responsibility to make sure that the closure does not violate library invariants by making invalid use of these duplicates.</source>
          <target state="translated">이는 또한 파일 디스크립터 및 메모리 매핑 영역과 같은 모든 리소스가 복제되었음을 의미합니다. 이러한 복제본을 잘못 사용하여 클로저가 라이브러리 변형을 위반하지 않도록하는 것은 귀하의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="c5dab5f83abd965944fb4f235779eceb37146b12" translate="yes" xml:space="preserve">
          <source>This and &lt;a href=&quot;../macro.println&quot;&gt;&lt;code&gt;println!&lt;/code&gt;&lt;/a&gt; emit their output to stdout. Similarly to the &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt; macro, the goal of these macros is to avoid intermediate allocations when printing output. Example usage is:</source>
          <target state="translated">이것과 &lt;a href=&quot;../macro.println&quot;&gt; &lt;code&gt;println!&lt;/code&gt; &lt;/a&gt;출력을 stdout으로 내 보냅니다. &lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt; 비슷합니다 ! 매크로, 이러한 매크로의 목표는 출력을 인쇄 할 때 중간 할당을 피하는 것입니다. 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="acaf201fd6cc02b279b5987151a707c144a7e5c9" translate="yes" xml:space="preserve">
          <source>This and &lt;a href=&quot;../macro.writeln&quot;&gt;&lt;code&gt;writeln!&lt;/code&gt;&lt;/a&gt; are two macros which are used to emit the format string to a specified stream. This is used to prevent intermediate allocations of format strings and instead directly write the output. Under the hood, this function is actually invoking the &lt;a href=&quot;../io/trait.write#method.write_fmt&quot;&gt;&lt;code&gt;write_fmt&lt;/code&gt;&lt;/a&gt; function defined on the &lt;a href=&quot;../io/trait.write&quot;&gt;&lt;code&gt;std::io::Write&lt;/code&gt;&lt;/a&gt; trait. Example usage is:</source>
          <target state="translated">이것과 &lt;a href=&quot;../macro.writeln&quot;&gt; &lt;code&gt;writeln!&lt;/code&gt; &lt;/a&gt;형식 문자열을 지정된 스트림으로 내보내는 데 사용되는 두 개의 매크로입니다. 형식 문자열의 중간 할당을 방지하고 대신 출력을 직접 작성하는 데 사용됩니다. 후드에서이 함수는 실제로 &lt;a href=&quot;../io/trait.write&quot;&gt; &lt;code&gt;std::io::Write&lt;/code&gt; &lt;/a&gt; 특성 에 정의 된 &lt;a href=&quot;../io/trait.write#method.write_fmt&quot;&gt; &lt;code&gt;write_fmt&lt;/code&gt; &lt;/a&gt; 함수 를 호출합니다 . 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7dd14a6dd33e863c7c3a9afcbc1b94db44474940" translate="yes" xml:space="preserve">
          <source>This appendix contains a glossary of Rust&amp;rsquo;s syntax, including operators and other symbols that appear by themselves or in the context of paths, generics, trait bounds, macros, attributes, comments, tuples, and brackets.</source>
          <target state="translated">이 부록에는 그 자체로 또는 경로, 제네릭, 특성 범위, 매크로, 속성, 주석, 튜플 및 괄호와 관련하여 나타나는 연산자 및 기타 기호를 포함하여 Rust 구문에 대한 용어집이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="98f7d37c50386fc1a7bc45c602df60e2a6b2f88d" translate="yes" xml:space="preserve">
          <source>This appendix is about how Rust is made and how that affects you as a Rust developer.</source>
          <target state="translated">이 부록은 Rust의 제작 방법과 Rust 개발자로서의 영향에 관한 것입니다.</target>
        </trans-unit>
        <trans-unit id="cf4d5070c48104546a550c9a051a5f05bc584068" translate="yes" xml:space="preserve">
          <source>This associated type corresponds to the &lt;code&gt;yield&lt;/code&gt; expression and the values which are allowed to be returned each time a generator yields. For example an iterator-as-a-generator would likely have this type as &lt;code&gt;T&lt;/code&gt;, the type being iterated over.</source>
          <target state="translated">이 연관된 유형은 &lt;code&gt;yield&lt;/code&gt; 표현식 및 생성기가 생성 할 때마다 리턴 될 수있는 값에 해당합니다. 예를 들어, 반복자로서의 반복자는이 유형이 &lt;code&gt;T&lt;/code&gt; 로 반복 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="fe55ae487fde4fa4dff7b2d6d6cdbe76cfbf6518" translate="yes" xml:space="preserve">
          <source>This attribute allows configuring the choice of global allocator. You can use this to implement a completely custom global allocator to route all default allocation requests to a custom object.</source>
          <target state="translated">이 속성을 사용하면 글로벌 할당 자의 선택을 구성 할 수 있습니다. 이를 사용하여 모든 기본 할당 요청을 사용자 정의 오브젝트로 라우트하기 위해 완전히 사용자 정의 된 전역 할당자를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef26e5c3cab23c11bb733ef68934315ad78b85fb" translate="yes" xml:space="preserve">
          <source>This avoids reallocating where possible, but the conditions for that are strict, and subject to change, and so shouldn't be relied upon unless the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; came from &lt;code&gt;From&amp;lt;VecDeque&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; and hasn't been reallocated.</source>
          <target state="translated">이렇게하면 가능한 경우 재 할당을 피할 수 있지만 조건은 엄격하고 변경 될 수 있으므로 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 가 &lt;code&gt;From&amp;lt;VecDeque&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 왔으며 재 할당되지 않은 경우에만 의존해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="c09355cbc8b51304e7c4f53224a50044b1a70814" translate="yes" xml:space="preserve">
          <source>This book also does not serve as a reference to the &lt;a href=&quot;../std/index&quot;&gt;standard library&lt;/a&gt; included in the language distribution. Those libraries are documented separately by extracting documentation attributes from their source code. Many of the features that one might expect to be language features are library features in Rust, so what you're looking for may be there, not here.</source>
          <target state="translated">이 책은 또한 언어 분배에 포함 된 &lt;a href=&quot;../std/index&quot;&gt;표준 라이브러리에&lt;/a&gt; 대한 참조로 사용되지 않습니다 . 해당 라이브러리는 소스 코드에서 문서 속성을 추출하여 별도로 문서화됩니다. 언어 기능으로 예상되는 많은 기능은 Rust의 라이브러리 기능이므로 원하는 것은 여기에 없을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e20080fb8e1699ed580bf1c766151d2b69a59c9" translate="yes" xml:space="preserve">
          <source>This book also only serves as a reference to what is available in stable Rust. For unstable features being worked on, see the &lt;a href=&quot;https://doc.rust-lang.org/nightly/unstable-book/index.html&quot;&gt;Unstable Book&lt;/a&gt;.</source>
          <target state="translated">이 책은 또한 안정된 녹에서 사용할 수있는 것에 대한 참조로만 사용됩니다. 작업중인 불안정한 기능에 대해서는 &lt;a href=&quot;https://doc.rust-lang.org/nightly/unstable-book/index.html&quot;&gt;불안정한 책을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="32b7e021bdc132a2756c978c8a1d27d9e8d25d04" translate="yes" xml:space="preserve">
          <source>This book assumes that you&amp;rsquo;ve written code in another programming language but doesn&amp;rsquo;t make any assumptions about which one. We&amp;rsquo;ve tried to make the material broadly accessible to those from a wide variety of programming backgrounds. We don&amp;rsquo;t spend a lot of time talking about what programming &lt;em&gt;is&lt;/em&gt; or how to think about it. If you&amp;rsquo;re entirely new to programming, you would be better served by reading a book that specifically provides an introduction to programming.</source>
          <target state="translated">이 책은 다른 프로그래밍 언어로 코드를 작성했지만 어떤 언어로 가정하지는 않는다고 가정합니다. 우리는 다양한 프로그래밍 배경을 가진 사람들이 자료에 광범위하게 접근 할 수 있도록 노력했습니다. 우리는 프로그래밍 &lt;em&gt;이&lt;/em&gt; 무엇인지 또는 어떻게 생각하는지에 대해 많은 시간을 소비하지 않습니다 . 프로그래밍에 익숙하지 않다면 프로그래밍에 대한 소개를 제공하는 책을 읽으면 더 나은 서비스를받을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb8d9819998123cf06ddd8f5a1ff9953b5c7298e" translate="yes" xml:space="preserve">
          <source>This book does not assume you are reading this book sequentially. Each chapter generally can be read standalone, but will cross-link to other chapters for facets of the language they refer to, but do not discuss.</source>
          <target state="translated">이 책은이 책을 순차적으로 읽는 것으로 가정하지 않습니다. 각 챕터는 일반적으로 독립형으로 읽을 수 있지만 참조하는 언어의 측면에 대해서는 다른 챕터와 상호 링크됩니다.</target>
        </trans-unit>
        <trans-unit id="74d346bfc5c0837e4df013dba9f47fd4b57ffe9b" translate="yes" xml:space="preserve">
          <source>This book does not serve as an introduction to the language. Background familiarity with the language is assumed. A separate &lt;a href=&quot;../index&quot;&gt;book&lt;/a&gt; is available to help acquire such background familiarity.</source>
          <target state="translated">이 책은 언어를 소개하는 역할을하지 않습니다. 언어에 대한 배경 지식이 있다고 가정합니다. 그러한 배경 지식을 얻는 데 도움이 되는 별도의 &lt;a href=&quot;../index&quot;&gt;책&lt;/a&gt; 을 이용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4589512ba2ae3140ba2d5cf22da84c708acf0a3c" translate="yes" xml:space="preserve">
          <source>This book fully embraces the potential of Rust to empower its users. It&amp;rsquo;s a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn&amp;mdash;and welcome to the Rust community!</source>
          <target state="translated">이 책은 Rust가 사용자에게 권한을 부여 할 수있는 잠재력을 충분히 수용합니다. Rust에 대한 지식뿐만 아니라 프로그래머로서의 범위와 자신감을 높이는 데 도움이되는 친근하고 접근하기 쉬운 텍스트입니다. 그러니 뛰어 들어 배울 준비를 하시고 Rust 커뮤니티에 오신 것을 환영합니다!</target>
        </trans-unit>
        <trans-unit id="5eac84b162d067e7c7224575575cec18251ae81c" translate="yes" xml:space="preserve">
          <source>This book is the primary reference for the Rust programming language. It provides three kinds of material:</source>
          <target state="translated">이 책은 Rust 프로그래밍 언어에 대한 기본 참고서입니다. 세 가지 종류의 자료를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4dac54ff1b6d498bb0e5ad5ca44a29d6b2c3c87b" translate="yes" xml:space="preserve">
          <source>This book only contains information about stable features, as in-progress features are still changing, and surely they&amp;rsquo;ll be different between when this book was written and when they get enabled in stable builds. You can find documentation for nightly-only features online.</source>
          <target state="translated">이 책에는 진행중인 기능이 계속 변경되므로 안정적인 기능에 대한 정보 만 포함되어 있으며이 책이 작성된 시점과 안정적인 빌드에서 사용 가능한 시점에 따라 달라질 수 있습니다. 야간 전용 기능에 대한 설명서는 온라인에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b40452b3457baf6eb9c9eb4c95b596dc78a3493" translate="yes" xml:space="preserve">
          <source>This broken invariant is then later observed.</source>
          <target state="translated">이 깨진 불변은 나중에 관찰됩니다.</target>
        </trans-unit>
        <trans-unit id="626674212943f16d78b9c64b216d4813683d4bcd" translate="yes" xml:space="preserve">
          <source>This buffer is always stored on the heap.</source>
          <target state="translated">이 버퍼는 항상 힙에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="533f834501c9981cf01926064551726140f691d1" translate="yes" xml:space="preserve">
          <source>This builder also supports platform-specific options.</source>
          <target state="translated">이 빌더는 플랫폼 별 옵션도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="828127de31395e4a312b7fc3b3384b3f2a31aa51" translate="yes" xml:space="preserve">
          <source>This builder exposes the ability to configure how a &lt;a href=&quot;struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; is opened and what operations are permitted on the open file. The &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.file#method.create&quot;&gt;&lt;code&gt;File::create&lt;/code&gt;&lt;/a&gt; methods are aliases for commonly used options using this builder.</source>
          <target state="translated">이 빌더는 &lt;a href=&quot;struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 을 여는 방법 및 열린 파일에서 허용되는 조작 을 구성하는 기능을 제공 합니다. &lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.file#method.create&quot;&gt; &lt;code&gt;File::create&lt;/code&gt; &lt;/a&gt; 방법이 빌더를 사용하여 일반적으로 사용되는 옵션에 대한 별칭이다.</target>
        </trans-unit>
        <trans-unit id="e3a75e262b3ddd48064e08eaf81396d4af4ef1e5" translate="yes" xml:space="preserve">
          <source>This call borrows &lt;code&gt;Cell&lt;/code&gt; mutably (at compile-time) which guarantees that we possess the only reference.</source>
          <target state="translated">이 호출은 &lt;code&gt;Cell&lt;/code&gt; 가변적으로 빌려 (컴파일 타임에) 우리가 유일한 참조를 가지고 있음을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="5a4e17ce4bfa3ac12c6fb727cdafac307c2e7b00" translate="yes" xml:space="preserve">
          <source>This call borrows &lt;code&gt;RefCell&lt;/code&gt; mutably (at compile-time) so there is no need for dynamic checks.</source>
          <target state="translated">이 호출은 &lt;code&gt;RefCell&lt;/code&gt; 을 (컴파일 타임에) 가변적으로 빌리 므로 동적 검사가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bafb9cba9c70e76a1a3bb46e83a3fb5e4a1e4a73" translate="yes" xml:space="preserve">
          <source>This can also be thought of as the fallible form of &lt;a href=&quot;#method.for_each&quot;&gt;&lt;code&gt;for_each()&lt;/code&gt;&lt;/a&gt; or as the stateless version of &lt;a href=&quot;#method.try_fold&quot;&gt;&lt;code&gt;try_fold()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;#method.for_each&quot;&gt; &lt;code&gt;for_each()&lt;/code&gt; &lt;/a&gt; 의 잘못된 형식 또는 &lt;a href=&quot;#method.try_fold&quot;&gt; &lt;code&gt;try_fold()&lt;/code&gt; &lt;/a&gt; 의 상태 비 저장 버전으로 생각할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc5e7768aa508543b82b361f251df561c08e6d32" translate="yes" xml:space="preserve">
          <source>This can also be used in multithreaded applications, in order to send a message to other threads warning that a thread has panicked (e.g., for monitoring purposes).</source>
          <target state="translated">스레드가 패닉되었다는 경고 메시지를 다른 스레드에 보내기 위해 멀티 스레드 응용 프로그램에서도 사용할 수 있습니다 (예 : 모니터링 목적으로).</target>
        </trans-unit>
        <trans-unit id="115ef26a79f6ceeca6376e7547342f4fb025dc8d" translate="yes" xml:space="preserve">
          <source>This can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, and ensure that there are no mutations or mutable aliases going on when casting to &lt;code&gt;&amp;amp;T&lt;/code&gt;</source>
          <target state="translated">이것은 모든 종류의 포인터로 캐스트 될 수 있습니다. &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 캐스팅 할 때 액세스가 고유한지 (활성 참조가 없는지, 변경 가능한지 아닌지) 확인하고 &lt;code&gt;&amp;amp;T&lt;/code&gt; 캐스팅 할 때 진행중인 돌연변이 또는 변경 가능한 별명이 없는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="214edc09ead3c27edfef862878240910ed92a93e" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_list&quot;&gt;&lt;code&gt;Formatter::debug_list&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.formatter#method.debug_list&quot;&gt; &lt;code&gt;Formatter::debug_list&lt;/code&gt; &lt;/a&gt; 메소드 로 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7514961910752b90460d88f227b5817215d7f6e" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_map&quot;&gt;&lt;code&gt;Formatter::debug_map&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.formatter#method.debug_map&quot;&gt; &lt;code&gt;Formatter::debug_map&lt;/code&gt; &lt;/a&gt; 메소드 로 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db45b1697100bb4357e93b4848fb22d93091bccd" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_set&quot;&gt;&lt;code&gt;Formatter::debug_set&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.formatter#method.debug_set&quot;&gt; &lt;code&gt;Formatter::debug_set&lt;/code&gt; &lt;/a&gt; 메소드 로 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="efbf03337e671dc0f2d75f1c2d72ed7746b99e34" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;Formatter::debug_struct&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;Formatter::debug_struct&lt;/code&gt; &lt;/a&gt; 메소드 로 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="daed88198496b5861ca72aa01db8f1e07a7a1fbc" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_tuple&quot;&gt;&lt;code&gt;Formatter::debug_tuple&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.formatter#method.debug_tuple&quot;&gt; &lt;code&gt;Formatter::debug_tuple&lt;/code&gt; &lt;/a&gt; 메소드 로 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2479ae89d6780ca289ef37404c0461658bc53872" translate="yes" xml:space="preserve">
          <source>This can be used to compare &lt;code&gt;&amp;amp;T&lt;/code&gt; references (which coerce to &lt;code&gt;*const T&lt;/code&gt; implicitly) by their address rather than comparing the values they point to (which is what the &lt;code&gt;PartialEq for &amp;amp;T&lt;/code&gt; implementation does).</source>
          <target state="translated">이것은 ( &lt;code&gt;PartialEq for &amp;amp;T&lt;/code&gt; 구현을 위한 PartialEq가하는) 비교하는 값을 비교하는 대신 주소로 &lt;code&gt;&amp;amp;T&lt;/code&gt; 참조 ( 암시 적 으로 &lt;code&gt;*const T&lt;/code&gt; 로 강제 하는)를 비교하는 데 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3720c96ba6b1476408a923be1876044bc567298" translate="yes" xml:space="preserve">
          <source>This can be used to compare enums that carry data, while disregarding the actual data:</source>
          <target state="translated">실제 데이터를 무시하면서 데이터를 전달하는 열거 형을 비교하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27925db5758baea8a7b4ada29852f78f4d3d7a94" translate="yes" xml:space="preserve">
          <source>This can be used to handle errors that would otherwise only be caught when the &lt;code&gt;File&lt;/code&gt; is closed. Dropping a file will ignore errors in synchronizing this in-memory data.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 을 닫을 때만 발생하는 오류를 처리하는 데 사용할 수 있습니다 . 파일을 삭제하면이 메모리 내 데이터 동기화시 오류가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9856559b29a29e0f25c3e61f2c093f50c7905e19" translate="yes" xml:space="preserve">
          <source>This can be used to hash a &lt;code&gt;&amp;amp;T&lt;/code&gt; reference (which coerces to &lt;code&gt;*const T&lt;/code&gt; implicitly) by its address rather than the value it points to (which is what the &lt;code&gt;Hash for &amp;amp;T&lt;/code&gt; implementation does).</source>
          <target state="translated">이것은 ( &lt;code&gt;Hash for &amp;amp;T&lt;/code&gt; 구현에 대한 해시 가 수행하는) 값이 가리키는 값이 아닌 주소 로 &lt;code&gt;&amp;amp;T&lt;/code&gt; 참조 ( 암시 적 으로 &lt;code&gt;*const T&lt;/code&gt; 로 강제 변환) 를 해시하는 데 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="13a7b507773148ef054095424c9d9ac4d8251d3e" translate="yes" xml:space="preserve">
          <source>This can be used to safely get a strong reference (by calling &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt; later) or to deallocate the weak count by dropping the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이를 통해 강력한 참조를 안전하게 얻 거나 (나중에 &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; 를 호출 하여) &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 삭제하여 약한 수를 할당 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb4c5fc4f14344c508855aa0c67808589d2ea5df" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code type-check, or if you're implementing a trait that requires multiple methods, and you're only planning on using one of them.</source>
          <target state="translated">프로토 타입을 작성하고 코드 유형을 확인하려고하거나 여러 방법이 필요한 특성을 구현하고 있고 그 중 하나만 사용하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="13e97c3892555defded3caf3fd786d6a9bf7c197" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code typecheck. &lt;code&gt;todo!&lt;/code&gt; works exactly like &lt;code&gt;unimplemented!&lt;/code&gt;. The only difference between the two macros is the name.</source>
          <target state="translated">프로토 타입을 작성하고 코드 유형을 확인하려는 경우 유용합니다. &lt;code&gt;todo!&lt;/code&gt; &lt;code&gt;unimplemented!&lt;/code&gt; 것처럼 정확하게 작동합니다 ! . 두 매크로의 유일한 차이점은 이름입니다.</target>
        </trans-unit>
        <trans-unit id="b8075fc432fec0682f4342dc70f37276a8d8a19f" translate="yes" xml:space="preserve">
          <source>This can never cause a problem in safe code because implementing a type that relies on pinning requires unsafe code, but be aware that deciding to make use of pinning in your type (for example by implementing some operation on &lt;code&gt;Pin&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; or &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;) has consequences for your &lt;code&gt;Drop&lt;/code&gt; implementation as well: if an element of your type could have been pinned, you must treat Drop as implicitly taking &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">피닝에 의존하는 유형을 구현하려면 안전하지 않은 코드가 필요하기 때문에 안전 코드에서 문제를 일으킬 수는 없지만 유형에 고정을 사용하기로 결정하는 경우 (예 : &lt;code&gt;Pin&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; )는 &lt;code&gt;Drop&lt;/code&gt; 구현에도 영향을 미칩니다 . 유형의 요소를 고정 할 수 있으면 Drop을 암시 적으로 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 하는 것으로 간주해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cadc6079abb6a4bbc592c234ce0da222e1a2fdc1" translate="yes" xml:space="preserve">
          <source>This change unifies all the calls to &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; and solves the problem of the first &lt;code&gt;if&lt;/code&gt; block unnecessarily calling the function twice. Unfortunately, we&amp;rsquo;re now calling this function and waiting for the result in all cases, which includes the inner &lt;code&gt;if&lt;/code&gt; block that doesn&amp;rsquo;t use the result value at all.</source>
          <target state="translated">이 변경은 모든 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; _expensive_calculation 호출을 통합하고 불필요하게 함수를 두 번 호출하는 첫 번째 &lt;code&gt;if&lt;/code&gt; 블록 의 문제를 해결합니다 . 불행하게도, 우리는 이제이 함수를 호출 하고 결과 값을 전혀 사용하지 않는 내부 &lt;code&gt;if&lt;/code&gt; 블록을 포함하여 모든 경우에 결과를 기다리고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d160910b055fc36b0155788ef2b0b90383b734d2" translate="yes" xml:space="preserve">
          <source>This channel has an internal buffer on which messages will be queued. &lt;code&gt;bound&lt;/code&gt; specifies the buffer size. When the internal buffer becomes full, future sends will &lt;em&gt;block&lt;/em&gt; waiting for the buffer to open up. Note that a buffer size of 0 is valid, in which case this becomes &quot;rendezvous channel&quot; where each &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; will not return until a &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; is paired with it.</source>
          <target state="translated">이 채널에는 메시지가 대기 할 내부 버퍼가 있습니다. &lt;code&gt;bound&lt;/code&gt; 는 버퍼 크기를 지정합니다. 내부 버퍼가 가득 차면 향후 송신은 버퍼가 열리기를 기다리는 것을 &lt;em&gt;차단&lt;/em&gt; 합니다. 버퍼 크기 0은 유효합니다.이 경우 &quot; &lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 채널&quot;이 되어 &lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt; 와 페어링 될 때까지 각 전송 이 반환되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fb1d7eb08fcc70de9ba8181af70c6fc4dce88829" translate="yes" xml:space="preserve">
          <source>This chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type has a known size and points to data allocated on the heap. The &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; type keeps track of the number of references to data on the heap so that data can have multiple owners. The &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.</source>
          <target state="translated">이 장에서는 스마트 포인터를 사용하여 Rust가 정기적으로 참조하는 것과 다른 보증 및 상충 관계를 만드는 방법을 다루었습니다. &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 타입은 힙에 할당 된 데이터에 알려진 크기와 포인트를 가지고있다. &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 데이터가 여러 소유자를 가질 수 있도록 유형은 힙의 데이터에 대한 참조의 수를 추적합니다. 내부 변경이 가능한 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 유형은 변경 불가능한 유형이 필요하지만 해당 유형의 내부 값을 변경해야 할 때 사용할 수있는 유형을 제공합니다. 또한 컴파일 타임이 아닌 런타임시 차용 규칙을 시행합니다.</target>
        </trans-unit>
        <trans-unit id="d76b58ff9e32a83f32bdf3cb1438b47bc33ded06" translate="yes" xml:space="preserve">
          <source>This chapter covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we&amp;rsquo;ll discuss them in the context of Rust and explain the conventions around using these concepts.</source>
          <target state="translated">이 장에서는 거의 모든 프로그래밍 언어로 나타나는 개념과 Rust에서 작동하는 방식에 대해 설명합니다. 많은 프로그래밍 언어가 핵심에서 공통점이 많습니다. 이 장에서 제시된 개념 중 어느 것도 Rust에 고유 한 것은 아니지만 Rust와 관련하여 논의하고 이러한 개념을 사용하는 것에 관한 규칙을 설명 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="29ea0fbfb2601396e36f35e6ef2ff2eccf09482a" translate="yes" xml:space="preserve">
          <source>This chapter is a recap of the many skills you&amp;rsquo;ve learned so far and an exploration of a few more standard library features. We&amp;rsquo;ll build a command line tool that interacts with file and command line input/output to practice some of the Rust concepts you now have under your belt.</source>
          <target state="translated">이 장에서는 지금까지 배운 많은 기술과 몇 가지 표준 라이브러리 기능에 대해 살펴 봅니다. 파일 및 명령 줄 입력 / 출력과 상호 작용하여 현재 사용중인 Rust 개념 중 일부를 연습하는 명령 줄 도구를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="ba9d120769583a2b06ff5bcafb1b013c4c1c420a" translate="yes" xml:space="preserve">
          <source>This chapter is a reference on all things related to patterns. We&amp;rsquo;ll cover the valid places to use patterns, the difference between refutable and irrefutable patterns, and the different kinds of pattern syntax that you might see. By the end of the chapter, you&amp;rsquo;ll know how to use patterns to express many concepts in a clear way.</source>
          <target state="translated">이 장은 패턴과 관련된 모든 것에 대한 참조입니다. 패턴을 사용할 수있는 유효한 장소, 반박 가능 패턴과 반박 불가능 패턴의 차이점 및 표시되는 다양한 패턴 구문에 대해 다룰 것입니다. 이 장을 마치면 패턴을 사용하여 많은 개념을 분명하게 표현하는 방법을 알게됩니다.</target>
        </trans-unit>
        <trans-unit id="4ca695707d3d924a4c7520a559258f62a52be801" translate="yes" xml:space="preserve">
          <source>This chapter recapped some of the major concepts you&amp;rsquo;ve learned so far and covered how to perform common I/O operations in Rust. By using command line arguments, files, environment variables, and the &lt;code&gt;eprintln!&lt;/code&gt; macro for printing errors, you&amp;rsquo;re now prepared to write command line applications. By using the concepts in previous chapters, your code will be well organized, store data effectively in the appropriate data structures, handle errors nicely, and be well tested.</source>
          <target state="translated">이 장에서는 지금까지 배운 주요 개념 중 일부를 살펴보고 Rust에서 일반적인 I / O 작업을 수행하는 방법을 설명했습니다. 명령 행 인수, 파일, 환경 변수 및 &lt;code&gt;eprintln!&lt;/code&gt; 인쇄 오류에 대한 매크로를 사용하면 이제 명령 줄 응용 프로그램을 작성할 준비가되었습니다. 이전 장의 개념을 사용하면 코드를 체계적으로 구성하고 데이터를 적절한 데이터 구조에 효과적으로 저장하며 오류를 잘 처리하고 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f14f23451903925edc1325ae4f6812d472301ab" translate="yes" xml:space="preserve">
          <source>This closure will be run in the context of the child process after a &lt;code&gt;fork&lt;/code&gt;. This primarily means that any modifications made to memory on behalf of this closure will &lt;strong&gt;not&lt;/strong&gt; be visible to the parent process. This is often a very constrained environment where normal operations like &lt;code&gt;malloc&lt;/code&gt; or acquiring a mutex are not guaranteed to work (due to other threads perhaps still running when the &lt;code&gt;fork&lt;/code&gt; was run).</source>
          <target state="translated">이 폐쇄는 &lt;code&gt;fork&lt;/code&gt; 후 자식 프로세스의 컨텍스트에서 실행됩니다 . 이는 주로이 클로저를 대신하여 메모리를 수정 한 내용이 부모 프로세스에 표시 &lt;strong&gt;되지 않음을&lt;/strong&gt; 의미합니다. 이것은 &lt;code&gt;malloc&lt;/code&gt; 이나 mutex를 얻는 것과 같은 정상적인 작업이 ( &lt;code&gt;fork&lt;/code&gt; 가 실행될 때 여전히 실행중인 다른 스레드로 인해) 작동하지 않는 매우 제한된 환경 입니다.</target>
        </trans-unit>
        <trans-unit id="22a1461b442324db65b2ce2aa52db0c09471bd28" translate="yes" xml:space="preserve">
          <source>This code also sets &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;tic-tac-toe&lt;/code&gt;. The &lt;code&gt;format!&lt;/code&gt; macro works in the same way as &lt;code&gt;println!&lt;/code&gt;, but instead of printing the output to the screen, it returns a &lt;code&gt;String&lt;/code&gt; with the contents. The version of the code using &lt;code&gt;format!&lt;/code&gt; is much easier to read and doesn&amp;rsquo;t take ownership of any of its parameters.</source>
          <target state="translated">이 코드는 또한 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;tic-tac-toe&lt;/code&gt; 로 설정 합니다. &lt;code&gt;format!&lt;/code&gt; 매크로는 &lt;code&gt;println!&lt;/code&gt; 과 같은 방식으로 작동합니다 ! 출력을 화면에 인쇄하는 대신 내용이 포함 된 &lt;code&gt;String&lt;/code&gt; 을 반환합니다 . &lt;code&gt;format!&lt;/code&gt; 사용하는 코드 버전 ! 읽기 쉽고 매개 변수의 소유권을 가지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d361c400527932085f404cf9d818fa511cfc4bc4" translate="yes" xml:space="preserve">
          <source>This code block contains unsafe code.</source>
          <target state="translated">이 코드 블록에는 안전하지 않은 코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8be923288a70fe6e854b5bc75a5a5f3ea2e87376" translate="yes" xml:space="preserve">
          <source>This code compiles and runs but doesn&amp;rsquo;t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the &lt;code&gt;Mutex&lt;/code&gt; struct has no public &lt;code&gt;unlock&lt;/code&gt; method because the ownership of the lock is based on the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; within the &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; that the &lt;code&gt;lock&lt;/code&gt; method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a &lt;code&gt;Mutex&lt;/code&gt; cannot be accessed unless we hold the lock. But this implementation can also result in the lock being held longer than intended if we don&amp;rsquo;t think carefully about the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt;. Because the values in the &lt;code&gt;while&lt;/code&gt; expression remain in scope for the duration of the block, the lock remains held for the duration of the call to &lt;code&gt;job.call_box()&lt;/code&gt;, meaning other workers cannot receive jobs.</source>
          <target state="translated">이 코드는 컴파일 및 실행되지만 원하는 스레딩 동작이 발생하지 않습니다. 느린 요청은 여전히 ​​다른 요청이 처리되기를 기다립니다. 그 이유는 다소 미묘한 다음 &lt;code&gt;Mutex&lt;/code&gt; 구조체는 공용이없는 &lt;code&gt;unlock&lt;/code&gt; 방법을 잠금의 소유권이의 수명을 기반으로하기 때문에 &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 내 &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 그 &lt;code&gt;lock&lt;/code&gt; 방식으로 돌아갑니다. 컴파일 타임에 차용 검사기는 잠금을 유지하지 않으면 &lt;code&gt;Mutex&lt;/code&gt; 에 의해 보호되는 리소스에 액세스 할 수 없다는 규칙을 시행 할 수 있습니다. 그러나이 구현으로 인해 &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 의 수명에 대해 신중하게 생각하지 않으면 잠금이 의도 한 것보다 오래 유지 될 수 있습니다.. &lt;code&gt;while&lt;/code&gt; 표현식 의 값 은 블록 기간 동안 범위 내에 있으므로, &lt;code&gt;job.call_box()&lt;/code&gt; 호출 기간 동안 잠금이 유지 되므로 다른 작업자가 작업을 수신 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a9ddcc8d0db1cdd5bd0507394434501db1a0bedf" translate="yes" xml:space="preserve">
          <source>This code contains a lot of information, so let&amp;rsquo;s go over it line by line. To obtain user input and then print the result as output, we need to bring the &lt;code&gt;io&lt;/code&gt; (input/output) library into scope. The &lt;code&gt;io&lt;/code&gt; library comes from the standard library (which is known as &lt;code&gt;std&lt;/code&gt;):</source>
          <target state="translated">이 코드에는 많은 정보가 포함되어 있으므로 한 줄씩 살펴 보겠습니다. 사용자 입력을 얻은 다음 결과를 출력으로 인쇄하려면 &lt;code&gt;io&lt;/code&gt; (입력 / 출력) 라이브러리를 범위 로 가져와야합니다 . &lt;code&gt;io&lt;/code&gt; 라이브러리 (로 알려진 표준 라이브러리에서 제공 &lt;code&gt;std&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="a2cf7c9b3ea591cd958e0136c121e6bf9f333d13" translate="yes" xml:space="preserve">
          <source>This code creates a string containing &lt;code&gt;initial contents&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;initial contents&lt;/code&gt; 포함하는 문자열을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="37eb73353618177bcb3ef1d909b78d97976287b7" translate="yes" xml:space="preserve">
          <source>This code creates the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; that match the values of the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields of the &lt;code&gt;p&lt;/code&gt; struct. This example shows that the names of the variables in the pattern don&amp;rsquo;t have to match the field names of the struct. But it&amp;rsquo;s common to want the variable names to match the field names to make it easier to remember which variables came from which fields.</source>
          <target state="translated">이 코드 는 &lt;code&gt;p&lt;/code&gt; 구조체 의 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 필드 값과 일치 하는 변수 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 만듭니다 . 이 예제는 패턴의 변수 이름이 구조체의 필드 이름과 일치하지 않아도됨을 보여줍니다. 그러나 변수 이름이 필드 이름과 일치하여 어떤 변수가 어떤 필드에서 왔는지 기억하기 쉽도록하는 것이 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="4c6b27e7fab9563bf2abcf70ff023ebf232f1887" translate="yes" xml:space="preserve">
          <source>This code creates the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; that match the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields of the &lt;code&gt;p&lt;/code&gt; variable. The outcome is that the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; contain the values from the &lt;code&gt;p&lt;/code&gt; struct.</source>
          <target state="translated">이 코드 는 &lt;code&gt;p&lt;/code&gt; 변수 의 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 필드 와 일치 하는 변수 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 를 만듭니다 . 결과적으로 변수 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 에는 &lt;code&gt;p&lt;/code&gt; 구조체 의 값이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="519fd3df45d223b502667d31300a65c73f22de3a" translate="yes" xml:space="preserve">
          <source>This code does not compile!</source>
          <target state="translated">이 코드는 컴파일되지 않습니다!</target>
        </trans-unit>
        <trans-unit id="a8563da8c7fd875eb235c5cf17bc917dd4b6aba0" translate="yes" xml:space="preserve">
          <source>This code does not produce the desired behavior.</source>
          <target state="translated">이 코드는 원하는 동작을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0426964d440764948892b9452f7b1a751866e79c" translate="yes" xml:space="preserve">
          <source>This code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum! Also, standard library types are often not much more complicated than what you might come up with.</source>
          <target state="translated">이 코드는 문자열, 숫자 유형 또는 구조체와 같은 열거 형 변형 안에 모든 종류의 데이터를 넣을 수 있음을 보여줍니다. 다른 열거 형을 포함시킬 수도 있습니다! 또한 표준 라이브러리 유형은 종종 여러분이 생각하는 것보다 훨씬 복잡하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="23d4be6e177cb0763cfd5315e376249487e60755" translate="yes" xml:space="preserve">
          <source>This code is a bit messy, but it&amp;rsquo;s good enough for simulation purposes. We created a second request &lt;code&gt;sleep&lt;/code&gt;, whose data our server recognizes. We added an &lt;code&gt;else if&lt;/code&gt; after the &lt;code&gt;if&lt;/code&gt; block to check for the request to &lt;em&gt;/sleep&lt;/em&gt;. When that request is received, the server will sleep for 5 seconds before rendering the successful HTML page.</source>
          <target state="translated">이 코드는 약간 지저분하지만 시뮬레이션 목적으로 충분합니다. 우리는 서버가 인식하는 데이터를 두 번째 요청 &lt;code&gt;sleep&lt;/code&gt; 으로 만들었습니다 . &lt;code&gt;if&lt;/code&gt; 블록 뒤에 &lt;code&gt;else if&lt;/code&gt; 추가하여 &lt;em&gt;/ sleep&lt;/em&gt; 요청을 확인했습니다 . 해당 요청이 수신되면 서버는 5 초 동안 휴면 상태가되어 HTML 페이지를 렌더링합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9400019c8ed3d0b61a4a67558c972e785c9498d4" translate="yes" xml:space="preserve">
          <source>This code is a bit nicer, isn&amp;rsquo;t it?</source>
          <target state="translated">이 코드는 조금 더 낫지 않습니까?</target>
        </trans-unit>
        <trans-unit id="a9d573288ab51576cf8efa92e3fc2409e71975a4" translate="yes" xml:space="preserve">
          <source>This code is for an animal shelter that wants to name all puppies Spot, which is implemented in the &lt;code&gt;baby_name&lt;/code&gt; associated function that is defined on &lt;code&gt;Dog&lt;/code&gt;. The &lt;code&gt;Dog&lt;/code&gt; type also implements the trait &lt;code&gt;Animal&lt;/code&gt;, which describes characteristics that all animals have. Baby dogs are called puppies, and that is expressed in the implementation of the &lt;code&gt;Animal&lt;/code&gt; trait on &lt;code&gt;Dog&lt;/code&gt; in the &lt;code&gt;baby_name&lt;/code&gt; function associated with the &lt;code&gt;Animal&lt;/code&gt; trait.</source>
          <target state="translated">이 코드는 &lt;code&gt;Dog&lt;/code&gt; 에 정의 된 &lt;code&gt;baby_name&lt;/code&gt; 관련 함수 에서 구현되는 모든 강아지 스팟의 이름을 지정하려는 동물 보호소를위한 것입니다 . &lt;code&gt;Dog&lt;/code&gt; 유형은 또한 특성 구현 &lt;code&gt;Animal&lt;/code&gt; 모든 동물이 가지고 특성을 설명합니다. 아기 강아지는 강아지라고하며, 그는의 구현에 표현되는 &lt;code&gt;Animal&lt;/code&gt; 에 대한 특성 &lt;code&gt;Dog&lt;/code&gt; 에서 &lt;code&gt;baby_name&lt;/code&gt; 의 과 관련된 기능 &lt;code&gt;Animal&lt;/code&gt; 특징.</target>
        </trans-unit>
        <trans-unit id="28ab5f7e147cb2d4d661943464a31c7e543917cd" translate="yes" xml:space="preserve">
          <source>This code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (&lt;em&gt;thunk&lt;/em&gt; is a word for code to be evaluated at a later time, so it&amp;rsquo;s an appropriate name for a closure that gets stored).</source>
          <target state="translated">이 코드는 읽고 쓰는 것이 훨씬 쉽습니다! 유형 별명에 대해 의미있는 이름을 선택하면 의도를 전달하는 데 도움 이 될 수 있습니다. 나중에 &lt;em&gt;썽 크는&lt;/em&gt; 코드를 평가하는 단어이므로 저장되는 클로저에 적합한 이름입니다.</target>
        </trans-unit>
        <trans-unit id="49a0f8f422e51179065e97042cbf65579f27fccc" translate="yes" xml:space="preserve">
          <source>This code is not legal: it is not possible to specialize &lt;code&gt;Drop&lt;/code&gt; to a subset of implementations of a generic type. In order for this code to work, &lt;code&gt;MyStruct&lt;/code&gt; must also require that &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Foo&lt;/code&gt;. Alternatively, another option is to wrap the generic type in another that specializes appropriately:</source>
          <target state="translated">이 코드는 합법적이지 않습니다. &lt;code&gt;Drop&lt;/code&gt; 을 제네릭 형식의 구현 하위 집합으로 특수화 할 수는 없습니다 . 이 코드가 작동 하려면 &lt;code&gt;MyStruct&lt;/code&gt; 에서 &lt;code&gt;T&lt;/code&gt; 도 &lt;code&gt;Foo&lt;/code&gt; 를 구현 해야합니다 . 또는 다른 옵션은 제네릭 형식을 적절하게 다른 형식으로 래핑하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e6419e6d86ad5d4d771d701592b7c8059bf718cc" translate="yes" xml:space="preserve">
          <source>This code is not legal: it is not possible to specialize &lt;code&gt;Drop&lt;/code&gt; to a subset of implementations of a generic type. One workaround for this is to wrap the generic type, as shown below:</source>
          <target state="translated">이 코드는 합법적이지 않습니다. &lt;code&gt;Drop&lt;/code&gt; 을 제네릭 형식의 구현 하위 집합으로 특수화 할 수는 없습니다 . 이에 대한 한 가지 해결 방법은 다음과 같이 제네릭 형식을 래핑하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7561545f94912a4c2f636ef3be71bf5e25ba09fc" translate="yes" xml:space="preserve">
          <source>This code is printing a prompt stating what the game is and requesting input from the user.</source>
          <target state="translated">이 코드는 게임이 무엇인지 알려주고 사용자에게 입력을 요청하는 프롬프트를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="7103520ca1aa03619df8713fc5365e846d9c5ad3" translate="yes" xml:space="preserve">
          <source>This code is read as &amp;ldquo;the function &lt;code&gt;bar&lt;/code&gt; returns never.&amp;rdquo; Functions that return never are called &lt;em&gt;diverging functions&lt;/em&gt;. We can&amp;rsquo;t create values of the type &lt;code&gt;!&lt;/code&gt; so &lt;code&gt;bar&lt;/code&gt; can never possibly return.</source>
          <target state="translated">이 코드는 &quot;기능 &lt;code&gt;bar&lt;/code&gt; 반환되지 않음 &quot;으로 읽습니다 . 리턴 &lt;em&gt;하는 함수를 분기 함수&lt;/em&gt; 라고 &lt;em&gt;합니다&lt;/em&gt; . 유형의 값을 만들 수 없습니다 &lt;code&gt;!&lt;/code&gt; 그래서 &lt;code&gt;bar&lt;/code&gt; 는 결코 돌아올 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bcd0c3078c2294c0e6fda3c229de0e1561bef882" translate="yes" xml:space="preserve">
          <source>This code is similar to &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#creating-custom-types-for-validation&quot;&gt;the &lt;code&gt;Guess::new&lt;/code&gt; function we wrote in Listing 9-10&lt;/a&gt;, where we called &lt;code&gt;panic!&lt;/code&gt; when the &lt;code&gt;value&lt;/code&gt; argument was out of the range of valid values. Instead of checking for a range of values here, we&amp;rsquo;re checking that the length of &lt;code&gt;args&lt;/code&gt; is at least 3 and the rest of the function can operate under the assumption that this condition has been met. If &lt;code&gt;args&lt;/code&gt; has fewer than three items, this condition will be true, and we call the &lt;code&gt;panic!&lt;/code&gt; macro to end the program immediately.</source>
          <target state="translated">이 코드는 비슷합니다 &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#creating-custom-types-for-validation&quot;&gt; &lt;code&gt;Guess::new&lt;/code&gt; &lt;/a&gt; 우리는 목록 9-10에 쓴 기능 , 우리는라는 곳 &lt;code&gt;panic!&lt;/code&gt; 때 &lt;code&gt;value&lt;/code&gt; 인자는 유효 값 범위 밖이었다. 여기서 값의 범위를 확인하는 대신 &lt;code&gt;args&lt;/code&gt; 의 길이가 3 이상인지 확인 하고 나머지 조건은이 조건이 충족되었다는 가정하에 작동 할 수 있습니다. 경우 &lt;code&gt;args&lt;/code&gt; 세 개 미만의 항목이,이 조건이 만족되어야하며, 우리는 전화 &lt;code&gt;panic!&lt;/code&gt; 매크로를 사용하여 프로그램을 즉시 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="7a83ac1e4ecf68353438d16df2a11f1d38c56035" translate="yes" xml:space="preserve">
          <source>This code is the automatically generated test module. The attribute &lt;code&gt;cfg&lt;/code&gt; stands for &lt;em&gt;configuration&lt;/em&gt; and tells Rust that the following item should only be included given a certain configuration option. In this case, the configuration option is &lt;code&gt;test&lt;/code&gt;, which is provided by Rust for compiling and running tests. By using the &lt;code&gt;cfg&lt;/code&gt; attribute, Cargo compiles our test code only if we actively run the tests with &lt;code&gt;cargo test&lt;/code&gt;. This includes any helper functions that might be within this module, in addition to the functions annotated with &lt;code&gt;#[test]&lt;/code&gt;.</source>
          <target state="translated">이 코드는 자동으로 생성 된 테스트 모듈입니다. &lt;code&gt;cfg&lt;/code&gt; 속성 은 &lt;em&gt;구성을&lt;/em&gt; 나타내며 Rust에게 특정 구성 옵션이 주어지면 다음 항목 만 포함되어야 함을 알려줍니다. 이 경우 구성 옵션은 &lt;code&gt;test&lt;/code&gt; 이며 이는 테스트 컴파일 및 실행을 위해 Rust에서 제공합니다. &lt;code&gt;cfg&lt;/code&gt; 속성 을 사용하여 Cargo는 &lt;code&gt;cargo test&lt;/code&gt; 로 테스트를 적극적으로 실행하는 경우에만 테스트 코드를 컴파일합니다 . 여기에는 &lt;code&gt;#[test]&lt;/code&gt; 로 주석이 달린 함수 외에도이 모듈 내에있을 수있는 모든 도우미 함수가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="fb14b558eed9a012f6129027202f61756e6e0b8d" translate="yes" xml:space="preserve">
          <source>This code lets us break complex types into their component parts so we can use the values we&amp;rsquo;re interested in separately.</source>
          <target state="translated">이 코드를 사용하면 복잡한 유형을 구성 요소 부분으로 나눌 수 있으므로 관심있는 값을 별도로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf80b97b3cceef068893acf5a419fa57178f1aed" translate="yes" xml:space="preserve">
          <source>This code means the type &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; will have a method named &lt;code&gt;distance_from_origin&lt;/code&gt; and other instances of &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is not of type &lt;code&gt;f32&lt;/code&gt; will not have this method defined. The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating point types.</source>
          <target state="translated">이 코드는 입력 수단 &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; 하는 방법이라는 것이다 &lt;code&gt;distance_from_origin&lt;/code&gt; 그리고 다른 경우 &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 타입이 아닌 &lt;code&gt;f32&lt;/code&gt; 정의 된 본 방법이 없을 것이다. 이 방법은 좌표 (0.0, 0.0)에서 점과의 거리를 측정하고 부동 소수점 유형에만 사용할 수있는 수학 연산을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="edb9c9f6097f3c4e5bd16a047b4ef0c91c5eda3e" translate="yes" xml:space="preserve">
          <source>This code overrides the default setting of &lt;code&gt;0&lt;/code&gt;. Now when we run &lt;code&gt;cargo build&lt;/code&gt;, Cargo will use the defaults for the &lt;code&gt;dev&lt;/code&gt; profile plus our customization to &lt;code&gt;opt-level&lt;/code&gt;. Because we set &lt;code&gt;opt-level&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, Cargo will apply more optimizations than the default, but not as many as in a release build.</source>
          <target state="translated">이 코드는 기본 설정 인 &lt;code&gt;0&lt;/code&gt; 을 무시합니다 . &lt;code&gt;cargo build&lt;/code&gt; 실행 하면 Cargo는 &lt;code&gt;dev&lt;/code&gt; 프로파일 의 기본값 과 &lt;code&gt;opt-level&lt;/code&gt; 에 대한 사용자 정의를 사용 합니다 . &lt;code&gt;opt-level&lt;/code&gt; 을 &lt;code&gt;1&lt;/code&gt; 로 설정했기 때문에 Cargo는 기본값보다 더 많은 최적화를 적용하지만 릴리스 빌드만큼 많지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="cbd474aff68e6272a4d817ab514ba2ba338dc2b1" translate="yes" xml:space="preserve">
          <source>This code panics!</source>
          <target state="translated">이 코드는 패닉 상태입니다!</target>
        </trans-unit>
        <trans-unit id="1520d0fd722c3577359ba16db239ceb0ddeebd5f" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;1 new tweet: (Read more from @horse_ebooks...)&lt;/code&gt;.</source>
          <target state="translated">이 코드는 인쇄 &lt;code&gt;1 new tweet: (Read more from @horse_ebooks...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d78693e95ef2bffb056748f86ea7d4fd87f6784" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;1 new tweet: horse_ebooks: of course, as you probably already know, people&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;1 new tweet: horse_ebooks: of course, as you probably already know, people&lt;/code&gt; 출력합니다 : horse_ebooks : 물론 이미 알고 있듯이 people .</target>
        </trans-unit>
        <trans-unit id="a4e90b820e3471ed9be465d87743c5461551a7f0" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;Current location: (3, 5)&lt;/code&gt;. The values &lt;code&gt;&amp;amp;(3, 5)&lt;/code&gt; match the pattern &lt;code&gt;&amp;amp;(x, y)&lt;/code&gt;, so &lt;code&gt;x&lt;/code&gt; is the value &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is the value &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;Current location: (3, 5)&lt;/code&gt; 인쇄합니다 . 값 &lt;code&gt;&amp;amp;(3, 5)&lt;/code&gt; 는 패턴 &lt;code&gt;&amp;amp;(x, y)&lt;/code&gt; ) 와 일치 하므로 &lt;code&gt;x&lt;/code&gt; 는 값 &lt;code&gt;3&lt;/code&gt; 이고 &lt;code&gt;y&lt;/code&gt; 는 값 &lt;code&gt;5&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fb3c413eeb04880ff8b53ff489dddef4151c97bb" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;New article available! (Read more...)&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;New article available! (Read more...)&lt;/code&gt; 인쇄 합니다! (더 읽기 ...) .</target>
        </trans-unit>
        <trans-unit id="4bdc1d17208e27666bda4fd318b994f6acf7818b" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;The answer is: 12&lt;/code&gt;. We specify that the parameter &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;do_twice&lt;/code&gt; is an &lt;code&gt;fn&lt;/code&gt; that takes one parameter of type &lt;code&gt;i32&lt;/code&gt; and returns an &lt;code&gt;i32&lt;/code&gt;. We can then call &lt;code&gt;f&lt;/code&gt; in the body of &lt;code&gt;do_twice&lt;/code&gt;. In &lt;code&gt;main&lt;/code&gt;, we can pass the function name &lt;code&gt;add_one&lt;/code&gt; as the first argument to &lt;code&gt;do_twice&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;The answer is: 12&lt;/code&gt; . 우리는 매개 변수 지정 &lt;code&gt;f&lt;/code&gt; 에서 &lt;code&gt;do_twice&lt;/code&gt; 가 이다 &lt;code&gt;fn&lt;/code&gt; 타입의 하나 개의 매개 변수 소요 &lt;code&gt;i32&lt;/code&gt; 하고 반환 &lt;code&gt;i32&lt;/code&gt; . 그런 다음 &lt;code&gt;do_twice&lt;/code&gt; 본문에서 &lt;code&gt;f&lt;/code&gt; 를 호출 할 수 있습니다 . 에서 &lt;code&gt;main&lt;/code&gt; , 우리는 함수 이름을 전달할 수 있습니다 &lt;code&gt;add_one&lt;/code&gt; 에 첫 번째 인수로 &lt;code&gt;do_twice&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f51af940300a3743a5ab26b4b6248a93015d25fc" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;one or two&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;one or two&lt;/code&gt; 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="fa3fc2ca0fc1e2ca4079f6b9c2e26f148c6f028f" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;one&lt;/code&gt; because the value in &lt;code&gt;x&lt;/code&gt; is 1. This syntax is useful when you want your code to take an action if it gets a particular concrete value.</source>
          <target state="translated">이 코드 는 &lt;code&gt;x&lt;/code&gt; 의 값 이 &lt;code&gt;one&lt;/code&gt; 이기 때문에 하나를 인쇄합니다 .이 구문은 코드가 특정한 구체적 값을 얻는 경우 조치를 취하려고 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f76e20cf8d5177f5195a6770ae0f2388492d5a80" translate="yes" xml:space="preserve">
          <source>This code prints the following:</source>
          <target state="translated">이 코드는 다음을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="2da1adcf6ac7d40ff872dbb16e9f7a36210c0c52" translate="yes" xml:space="preserve">
          <source>This code should compile and produce the result we want when we use it with the &lt;code&gt;main&lt;/code&gt; function in Listing 10-20.</source>
          <target state="translated">이 코드는 Listing 10-20 의 &lt;code&gt;main&lt;/code&gt; 함수 와 함께 사용할 때 원하는 결과를 컴파일하고 생성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="fc992e6806cb1bd5a9c534e91522711af45f4b36" translate="yes" xml:space="preserve">
          <source>This code should look generally familiar: a trait with one method and an associated type. The new part is &lt;code&gt;RHS=Self&lt;/code&gt;: this syntax is called &lt;em&gt;default type parameters&lt;/em&gt;. The &lt;code&gt;RHS&lt;/code&gt; generic type parameter (short for &amp;ldquo;right hand side&amp;rdquo;) defines the type of the &lt;code&gt;rhs&lt;/code&gt; parameter in the &lt;code&gt;add&lt;/code&gt; method. If we don&amp;rsquo;t specify a concrete type for &lt;code&gt;RHS&lt;/code&gt; when we implement the &lt;code&gt;Add&lt;/code&gt; trait, the type of &lt;code&gt;RHS&lt;/code&gt; will default to &lt;code&gt;Self&lt;/code&gt;, which will be the type we&amp;rsquo;re implementing &lt;code&gt;Add&lt;/code&gt; on.</source>
          <target state="translated">이 코드는 일반적으로 친숙해 보일 것입니다. 하나의 메소드와 관련 유형이있는 특성입니다. 새로운 부분은 &lt;code&gt;RHS=Self&lt;/code&gt; 입니다 .이 구문을 &lt;em&gt;기본 유형 매개 변수&lt;/em&gt; 라고 합니다. &lt;code&gt;RHS&lt;/code&gt; (줄여서 &quot;우측&quot;에 대한) 일반적인 타입 파라미터의 타입을 정의 &lt;code&gt;rhs&lt;/code&gt; 파라미터에 &lt;code&gt;add&lt;/code&gt; 방법. 우리가에 대한 구체적인 유형을 지정하지 않으면 &lt;code&gt;RHS&lt;/code&gt; 우리가 구현할 때 &lt;code&gt;Add&lt;/code&gt; 특성을의 종류 &lt;code&gt;RHS&lt;/code&gt; 는 기본값으로 사용됩니다 &lt;code&gt;Self&lt;/code&gt; 우리가 구현하고있는 유형이 될 것이다, &lt;code&gt;Add&lt;/code&gt; 에.</target>
        </trans-unit>
        <trans-unit id="9916bd76554811c91bac8fdab30ae1e7bf834537" translate="yes" xml:space="preserve">
          <source>This code still won&amp;rsquo;t work, but let&amp;rsquo;s check it again to get the next error that we need to address:</source>
          <target state="translated">이 코드는 여전히 작동하지 않지만 해결해야 할 다음 오류가 발생하는지 다시 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d27513508379ea6cd339c0bb4a46ef6e82c466b9" translate="yes" xml:space="preserve">
          <source>This code stores a list of integers in the variable &lt;code&gt;number_list&lt;/code&gt; and places the first number in the list in a variable named &lt;code&gt;largest&lt;/code&gt;. Then it iterates through all the numbers in the list, and if the current number is greater than the number stored in &lt;code&gt;largest&lt;/code&gt;, it replaces the number in that variable. However, if the current number is less than or equal to the largest number seen so far, the variable doesn&amp;rsquo;t change, and the code moves on to the next number in the list. After considering all the numbers in the list, &lt;code&gt;largest&lt;/code&gt; should hold the largest number, which in this case is 100.</source>
          <target state="translated">이 코드는 변수 &lt;code&gt;number_list&lt;/code&gt; 에 정수 목록을 저장하고 &lt;code&gt;largest&lt;/code&gt; 변수에 목록의 첫 번째 숫자를 배치합니다 . 그런 다음 목록의 모든 숫자를 반복하고 현재 숫자가 &lt;code&gt;largest&lt;/code&gt; 저장된 숫자보다 큰 경우 해당 변수의 숫자를 대체합니다. 그러나 현재 숫자가 지금까지 표시된 최대 숫자보다 작거나 같으면 변수가 변경되지 않고 코드가 목록의 다음 숫자로 이동합니다. 목록에있는 모든 숫자를 고려하면, &lt;code&gt;largest&lt;/code&gt; 이 경우 100 가장 큰 수를 유지해야한다.</target>
        </trans-unit>
        <trans-unit id="65e3fdd29c21c5766164366857eab04eba8f916b" translate="yes" xml:space="preserve">
          <source>This code will compile and will store the number of &lt;code&gt;Worker&lt;/code&gt; instances we specified as an argument to &lt;code&gt;ThreadPool::new&lt;/code&gt;. But we&amp;rsquo;re &lt;em&gt;still&lt;/em&gt; not processing the closure that we get in &lt;code&gt;execute&lt;/code&gt;. Let&amp;rsquo;s look at how to do that next.</source>
          <target state="translated">이 코드는 &lt;code&gt;ThreadPool::new&lt;/code&gt; 대한 인수로 지정한 &lt;code&gt;Worker&lt;/code&gt; 인스턴스 수를 컴파일하고 저장합니다 . 그러나 우리는 &lt;em&gt;여전히 &lt;/em&gt; &lt;code&gt;execute&lt;/code&gt; 중인 클로저를 처리하지 않습니다 . 다음에 어떻게해야하는지 봅시다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="045fdd180c10e009660c1c81e0cc6eab5a5aa968" translate="yes" xml:space="preserve">
          <source>This code will compile just fine. For more about trait objects, refer to the section &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects That Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; in Chapter 17.</source>
          <target state="translated">이 코드는 잘 컴파일됩니다. 형질 개체에 대한 자세한 내용은 17 장의 &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&quot;다른 유형의 값을 허용하는 특성 개체 사용&quot;&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="457c8af0abaf5c3ca5e095102658cc6466fc1c3e" translate="yes" xml:space="preserve">
          <source>This code will compile without any errors. Note the &lt;code&gt;r#&lt;/code&gt; prefix on the function name in its definition as well as where the function is called in &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">이 코드는 오류없이 컴파일됩니다. 함수 정의에서 함수 이름 의 &lt;code&gt;r#&lt;/code&gt; 접두어와 &lt;code&gt;main&lt;/code&gt; 에서 함수가 호출되는 위치에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4e6558f8bd1055ab8e1efd4008b36e362cb01bc" translate="yes" xml:space="preserve">
          <source>This code will completely ignore the value passed as the first argument, &lt;code&gt;3&lt;/code&gt;, and will print &lt;code&gt;This code only uses the y parameter: 4&lt;/code&gt;.</source>
          <target state="translated">이 코드는 완전히 첫 번째 인수로서 전달 된 값을 무시하고 &lt;code&gt;3&lt;/code&gt; 및 인쇄 될 &lt;code&gt;This code only uses the y parameter: 4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f597cb1c1231379b4a9ac9b16a64f6f09dac15f9" translate="yes" xml:space="preserve">
          <source>This code will now print &lt;code&gt;Default case, x = Some(5)&lt;/code&gt;. The pattern in the second match arm doesn&amp;rsquo;t introduce a new variable &lt;code&gt;y&lt;/code&gt; that would shadow the outer &lt;code&gt;y&lt;/code&gt;, meaning we can use the outer &lt;code&gt;y&lt;/code&gt; in the match guard. Instead of specifying the pattern as &lt;code&gt;Some(y)&lt;/code&gt;, which would have shadowed the outer &lt;code&gt;y&lt;/code&gt;, we specify &lt;code&gt;Some(n)&lt;/code&gt;. This creates a new variable &lt;code&gt;n&lt;/code&gt; that doesn&amp;rsquo;t shadow anything because there is no &lt;code&gt;n&lt;/code&gt; variable outside the &lt;code&gt;match&lt;/code&gt;.</source>
          <target state="translated">이 코드는 이제 &lt;code&gt;Default case, x = Some(5)&lt;/code&gt; 합니다. 두 번째 매치 암의 패턴 은 외부 &lt;code&gt;y&lt;/code&gt; 를 가리는 새로운 변수 &lt;code&gt;y&lt;/code&gt; 를 도입하지 않습니다 . 즉, 우리는 매치 가드에서 외부 &lt;code&gt;y&lt;/code&gt; 를 사용할 수 있습니다 . 외부 &lt;code&gt;y&lt;/code&gt; 를 음영 처리 한 &lt;code&gt;Some(y)&lt;/code&gt; 로 패턴을 지정하는 대신 &lt;code&gt;Some(n)&lt;/code&gt; 지정 합니다. 이것은 &lt;code&gt;match&lt;/code&gt; 외부에 &lt;code&gt;n&lt;/code&gt; 변수 가 없기 때문에 아무것도 가리지 않는 새로운 변수 &lt;code&gt;n&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="1bcf93c595538a9e0c98606ec2aa75cae859981c" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Can't overwrite an existing customized value&lt;/code&gt; and then &lt;code&gt;setting is Some(5)&lt;/code&gt;. In the first match arm, we don&amp;rsquo;t need to match on or use the values inside either &lt;code&gt;Some&lt;/code&gt; variant, but we do need to test for the case when &lt;code&gt;setting_value&lt;/code&gt; and &lt;code&gt;new_setting_value&lt;/code&gt; are the &lt;code&gt;Some&lt;/code&gt; variant. In that case, we print why we&amp;rsquo;re not changing &lt;code&gt;setting_value&lt;/code&gt;, and it doesn&amp;rsquo;t get changed.</source>
          <target state="translated">이 코드는 인쇄됩니다 &lt;code&gt;Can't overwrite an existing customized value&lt;/code&gt; 다음 &lt;code&gt;setting is Some(5)&lt;/code&gt; . 첫 번째 일치 항목에서는 &lt;code&gt;Some&lt;/code&gt; 변형 내에서 값을 일치 시키거나 사용할 필요가 없지만 &lt;code&gt;setting_value&lt;/code&gt; 및 &lt;code&gt;new_setting_value&lt;/code&gt; 가 &lt;code&gt;Some&lt;/code&gt; 변형 인 경우를 테스트해야합니다 . 이 경우 &lt;code&gt;setting_value&lt;/code&gt; 를 변경하지 않는 이유를 인쇄하고 변경 되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="59fe6f0c2e0e4f24920973a91f227ffd825f4348" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Change the color to red 0, green 160, and blue 255&lt;/code&gt;. Try changing the value of &lt;code&gt;msg&lt;/code&gt; to see the code from the other arms run.</source>
          <target state="translated">이 코드는 &lt;code&gt;Change the color to red 0, green 160, and blue 255&lt;/code&gt; . 다른 arm 실행 코드를 보려면 &lt;code&gt;msg&lt;/code&gt; 값을 변경 하십시오.</target>
        </trans-unit>
        <trans-unit id="3c54f68158af593ed8370c89b1e792c808e333b9" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Hello, Macro! My name is Pancakes!&lt;/code&gt; when we&amp;rsquo;re done. The first step is to make a new library crate, like this:</source>
          <target state="translated">이 코드는 &lt;code&gt;Hello, Macro! My name is Pancakes!&lt;/code&gt; 우리가 끝나면. 첫 번째 단계는 다음과 같이 새 라이브러리 상자를 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6ef0c24b1ac6e78f32662fb7a47aa078602f7661" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Some numbers: 2, 8, 32&lt;/code&gt;, and the values 4 and 16 will be ignored.</source>
          <target state="translated">이 코드는 &lt;code&gt;Some numbers: 2, 8, 32&lt;/code&gt; 를 인쇄 하며 값 4와 16은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6e7f6cc166031d911beb7caaef0389c2805500c8" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;{&quot;Blue&quot;: 25}&lt;/code&gt;. The original value of &lt;code&gt;10&lt;/code&gt; has been overwritten.</source>
          <target state="translated">이 코드는 &lt;code&gt;{&quot;Blue&quot;: 25}&lt;/code&gt; 인쇄 합니다. 원래 값인 &lt;code&gt;10&lt;/code&gt; 을 덮어 썼습니다.</target>
        </trans-unit>
        <trans-unit id="4c7854ef3442e5dc7384d2ebe52264fddb2a172b" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;{&quot;world&quot;: 2, &quot;hello&quot;: 1, &quot;wonderful&quot;: 1}&lt;/code&gt;. The &lt;code&gt;or_insert&lt;/code&gt; method actually returns a mutable reference (&lt;code&gt;&amp;amp;mut V&lt;/code&gt;) to the value for this key. Here we store that mutable reference in the &lt;code&gt;count&lt;/code&gt; variable, so in order to assign to that value, we must first dereference &lt;code&gt;count&lt;/code&gt; using the asterisk (&lt;code&gt;*&lt;/code&gt;). The mutable reference goes out of scope at the end of the &lt;code&gt;for&lt;/code&gt; loop, so all of these changes are safe and allowed by the borrowing rules.</source>
          <target state="translated">이 코드는 &lt;code&gt;{&quot;world&quot;: 2, &quot;hello&quot;: 1, &quot;wonderful&quot;: 1}&lt;/code&gt; 합니다. &lt;code&gt;or_insert&lt;/code&gt; 의 방법은 실제로 가변 레퍼런스 (반환 &lt;code&gt;&amp;amp;mut V&lt;/code&gt; 이 키 값을 참조). 여기서는 가변 변수 참조를 &lt;code&gt;count&lt;/code&gt; 변수에 저장하므로 해당 값에 할당하려면 먼저 별표 ( &lt;code&gt;*&lt;/code&gt; )를 사용하여 &lt;code&gt;count&lt;/code&gt; 를 역 참조해야합니다 . 변경 가능한 참조는 &lt;code&gt;for&lt;/code&gt; 루프 가 끝날 때 범위를 벗어남에 따라 이러한 모든 변경 사항이 안전하고 차용 규칙에 의해 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="d2527fb52597f9416819ef1fc01a194d639282f6" translate="yes" xml:space="preserve">
          <source>This code will print each pair in an arbitrary order:</source>
          <target state="translated">이 코드는 각 쌍을 임의의 순서로 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="bacd4441a056463b6c76d4dcb3493a2106b165e0" translate="yes" xml:space="preserve">
          <source>This code will print the 18 bytes that make up this &lt;code&gt;String&lt;/code&gt;:</source>
          <target state="translated">이 코드는이 &lt;code&gt;String&lt;/code&gt; 을 구성하는 18 바이트를 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="df66479dcc3e1d9cca2a55caf3dadeea76d13542" translate="yes" xml:space="preserve">
          <source>This code will print the following:</source>
          <target state="translated">이 코드는 다음을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="6cf1c1dee0071b4d526326a9881c97e561ec0f1a" translate="yes" xml:space="preserve">
          <source>This code will result in the following error:</source>
          <target state="translated">이 코드는 다음과 같은 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bd9279581006b04d3fb15d53d9a31240a9bda944" translate="yes" xml:space="preserve">
          <source>This code works just fine because we never bind &lt;code&gt;s&lt;/code&gt; to anything; it isn&amp;rsquo;t moved.</source>
          <target state="translated">이 코드는 &lt;code&gt;s&lt;/code&gt; 를 절대로 바인딩하지 않기 때문에 제대로 작동합니다 . 움직이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a72012f28327d683a9fda9d6b4835b6ec97dd74b" translate="yes" xml:space="preserve">
          <source>This code works the way the business wants it to now, but let&amp;rsquo;s say the data science team decides that we need to make some changes to the way we call the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function in the future. To simplify the update when those changes happen, we want to refactor this code so it calls the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function only once. We also want to cut the place where we&amp;rsquo;re currently unnecessarily calling the function twice without adding any other calls to that function in the process. That is, we don&amp;rsquo;t want to call it if the result isn&amp;rsquo;t needed, and we still want to call it only once.</source>
          <target state="translated">이 코드는 현재 비즈니스가 원하는 방식으로 작동하지만 데이터 과학 팀 이 향후 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 함수를 호출하는 방식을 일부 변경해야한다고 결정합니다 . 이러한 변경이 발생할 때 업데이트를 단순화하기 위해이 코드를 리팩터링하여이 코드를 다시 한 번 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 함수를 호출하려고합니다 . 또한 프로세스에서 해당 함수에 다른 호출을 추가하지 않고 현재 불필요하게 함수를 두 번 호출하는 위치를 줄이고 싶습니다. 즉, 결과가 필요하지 않은 경우 호출하지 않고 여전히 한 번만 호출하려고합니다.</target>
        </trans-unit>
        <trans-unit id="29594b80ae15e7f3a6760f8d699f1007a88ab197" translate="yes" xml:space="preserve">
          <source>This code would attempt to link with &lt;code&gt;libmy_c_library.so&lt;/code&gt; on unix-like systems and &lt;code&gt;my_c_library.dll&lt;/code&gt; on Windows at runtime, and panic if it can't find something to link to. Rust code could then use &lt;code&gt;my_c_function&lt;/code&gt; as if it were any other unsafe Rust function. Working with non-Rust languages and FFI is inherently unsafe, so wrappers are usually built around C APIs.</source>
          <target state="translated">이 코드와 링크를 시도 할 것 &lt;code&gt;libmy_c_library.so&lt;/code&gt; 에 유닉스 계열 시스템 및 &lt;code&gt;my_c_library.dll&lt;/code&gt; Windows에서 실행시, 그리고 그것을 링크에 뭔가를 찾을 수없는 경우 당황. 그러면 Rust 코드는 다른 안전하지 않은 Rust 함수 인 것처럼 &lt;code&gt;my_c_function&lt;/code&gt; 을 사용할 수 있습니다. 비 Rust 언어 및 FFI로 작업하는 것은 본질적으로 안전하지 않으므로 래퍼는 일반적으로 C API를 중심으로 구축됩니다.</target>
        </trans-unit>
        <trans-unit id="94ac7a59ef0f9f139e040ad72861c14b2eb19308" translate="yes" xml:space="preserve">
          <source>This code would print &lt;code&gt;x = 5 and y = 10&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;x = 5 and y = 10&lt;/code&gt; 인쇄 합니다.</target>
        </trans-unit>
        <trans-unit id="0be10b63965c309b87ed0545b477401b58dc21cb" translate="yes" xml:space="preserve">
          <source>This command creates an executable file in &lt;em&gt;target/debug/hello_cargo&lt;/em&gt; (or &lt;em&gt;target\debug\hello_cargo.exe&lt;/em&gt; on Windows) rather than in your current directory. You can run the executable with this command:</source>
          <target state="translated">이 명령은 현재 디렉토리가 아닌 &lt;em&gt;target / debug / hello_cargo&lt;/em&gt; (또는 Windows의 경우 &lt;em&gt;target \ debug \ hello_cargo.exe)&lt;/em&gt; 에 실행 파일을 만듭니다 . 이 명령으로 실행 파일을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dd02fcb167dbab5d0f3cc67c54c6c5da2a62c5e" translate="yes" xml:space="preserve">
          <source>This command gives you &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt;, similar to how Rust gives you both &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;. To format any Cargo project, enter the following:</source>
          <target state="translated">이 명령은 &lt;code&gt;rustfmt&lt;/code&gt; 및 &lt;code&gt;cargo-fmt&lt;/code&gt; 를 제공합니다. Rust가 &lt;code&gt;rustc&lt;/code&gt; 및 &lt;code&gt;cargo&lt;/code&gt; 를 제공하는 방식과 유사합니다 . 화물 프로젝트를 형식화하려면 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="616fc540cd704c55f34b7ddb4249c489ab431fea" translate="yes" xml:space="preserve">
          <source>This command ran all tests with &lt;code&gt;add&lt;/code&gt; in the name and filtered out the test named &lt;code&gt;one_hundred&lt;/code&gt;. Also note that the module in which a test appears becomes part of the test&amp;rsquo;s name, so we can run all the tests in a module by filtering on the module&amp;rsquo;s name.</source>
          <target state="translated">이 명령은 이름 이 &lt;code&gt;add&lt;/code&gt; 인 모든 테스트를 실행하고 이름이 &lt;code&gt;one_hundred&lt;/code&gt; 인 테스트를 필터링했습니다 . 또한 테스트가 나타나는 모듈은 테스트 이름의 일부가되므로 모듈 이름을 필터링하여 모듈에서 모든 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ea7582e38a836907de1d30ee5b58334fa20a196" translate="yes" xml:space="preserve">
          <source>This command runs only the tests in the &lt;em&gt;tests/integration_test.rs&lt;/em&gt; file.</source>
          <target state="translated">이 명령은 &lt;em&gt;tests / integration_test.rs&lt;/em&gt; 파일 의 &lt;em&gt;테스트&lt;/em&gt; 만 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="0760093e6150870ee34facc6b7a5327edc5dc69d" translate="yes" xml:space="preserve">
          <source>This command will inform Cargo of your API token and store it locally in &lt;em&gt;~/.cargo/credentials&lt;/em&gt;. Note that this token is a &lt;em&gt;secret&lt;/em&gt;: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;.</source>
          <target state="translated">이 명령은 Cargo에 API 토큰을 알리고 &lt;em&gt;~ / .cargo / credentials에&lt;/em&gt; 로컬로 저장합니다 . 이 토큰은 &lt;em&gt;비밀&lt;/em&gt; 입니다. 다른 사람과 공유하지 마십시오. 어떤 이유로 든 다른 사람과 공유하는 경우이를 취소하고 &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; 에서 새 토큰을 생성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3f29dc82f5ad5c21f66ea4c65c4df005f9bfa118" translate="yes" xml:space="preserve">
          <source>This computes the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt;, with &lt;code&gt;0 &amp;lt;= self.rem_euclid(rhs) &amp;lt; rhs&lt;/code&gt;.</source>
          <target state="translated">이것은 정수 계산 &lt;code&gt;n&lt;/code&gt; 등 그 &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt; 와 &lt;code&gt;0 &amp;lt;= self.rem_euclid(rhs) &amp;lt; rhs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="92466c99e75537fb86fdcb8b6177060d58e36e85" translate="yes" xml:space="preserve">
          <source>This computes the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt;. In other words, the result is &lt;code&gt;self / rhs&lt;/code&gt; rounded to the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self &amp;gt;= n * rhs&lt;/code&gt;.</source>
          <target state="translated">이것은 정수 계산 &lt;code&gt;n&lt;/code&gt; 되도록 &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt; . 즉, 결과는 &lt;code&gt;self / rhs&lt;/code&gt; 정수로 반올림 &lt;code&gt;n&lt;/code&gt; 되도록 &lt;code&gt;self &amp;gt;= n * rhs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30ff452f5fae3358ab149e5ae5cfa16c08f607d2" translate="yes" xml:space="preserve">
          <source>This concept&amp;mdash;of being concerned only with the messages a value responds to rather than the value&amp;rsquo;s concrete type&amp;mdash;is similar to the concept &lt;em&gt;duck typing&lt;/em&gt; in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; in Listing 17-5, &lt;code&gt;run&lt;/code&gt; doesn&amp;rsquo;t need to know what the concrete type of each component is. It doesn&amp;rsquo;t check whether a component is an instance of a &lt;code&gt;Button&lt;/code&gt; or a &lt;code&gt;SelectBox&lt;/code&gt;, it just calls the &lt;code&gt;draw&lt;/code&gt; method on the component. By specifying &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; as the type of the values in the &lt;code&gt;components&lt;/code&gt; vector, we&amp;rsquo;ve defined &lt;code&gt;Screen&lt;/code&gt; to need values that we can call the &lt;code&gt;draw&lt;/code&gt; method on.</source>
          <target state="translated">값의 구체적인 유형이 아닌 값이 응답하는 메시지에만 관심이있는이 개념 은 동적으로 유형이 지정된 언어로 &lt;em&gt;입력&lt;/em&gt; 하는 &lt;em&gt;오리&lt;/em&gt; 개념과 유사합니다. &lt;em&gt;오리&lt;/em&gt; 처럼 걷고 오리처럼 like 거리면 오리! 의 구현에서 &lt;code&gt;run&lt;/code&gt; 에 &lt;code&gt;Screen&lt;/code&gt; 목록 17-5에서, &lt;code&gt;run&lt;/code&gt; 각 구성 요소의 구체적인 유형이 무엇인지 알 필요가 없습니다. 구성 요소가 &lt;code&gt;Button&lt;/code&gt; 또는 &lt;code&gt;SelectBox&lt;/code&gt; 인스턴스인지 확인하지 않고 구성 요소 에서 &lt;code&gt;draw&lt;/code&gt; 메서드를 호출 하기 만합니다 . 지정하여 &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; 의 값의 유형으로 &lt;code&gt;components&lt;/code&gt; 벡터, 우리가 정의한 &lt;code&gt;Screen&lt;/code&gt; &lt;code&gt;draw&lt;/code&gt; 메소드를 호출 할 수있는 값이 필요한 화면</target>
        </trans-unit>
        <trans-unit id="918897f830b93edc22b990902ff69a6fc36b08cc" translate="yes" xml:space="preserve">
          <source>This conditional structure lets us support complex requirements. With the hardcoded values we have here, this example will print &lt;code&gt;Using purple as the background color&lt;/code&gt;.</source>
          <target state="translated">이 조건부 구조를 통해 복잡한 요구 사항을 지원할 수 있습니다. 여기에 하드 코딩 된 값을 &lt;code&gt;Using purple as the background color&lt;/code&gt; 이 예제는 자주색을 배경색으로 사용하여 인쇄 합니다 .</target>
        </trans-unit>
        <trans-unit id="3dcd38b0035fd15b13996ae1be8e3f24e8144a2a" translate="yes" xml:space="preserve">
          <source>This constant is defined to be &quot;1970-01-01 00:00:00 UTC&quot; on all systems with respect to the system clock. Using &lt;code&gt;duration_since&lt;/code&gt; on an existing &lt;a href=&quot;struct.systemtime&quot;&gt;&lt;code&gt;SystemTime&lt;/code&gt;&lt;/a&gt; instance can tell how far away from this point in time a measurement lies, and using &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; can be used to create a &lt;a href=&quot;struct.systemtime&quot;&gt;&lt;code&gt;SystemTime&lt;/code&gt;&lt;/a&gt; instance to represent another fixed point in time.</source>
          <target state="translated">이 상수는 시스템 시계와 관련하여 모든 시스템에서 &quot;1970-01-01 00:00:00 UTC&quot;로 정의됩니다. 기존 &lt;a href=&quot;struct.systemtime&quot;&gt; &lt;code&gt;SystemTime&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 &lt;code&gt;duration_since&lt;/code&gt; 를 사용하면 이 시점에서 얼마나 멀리 떨어져 있는지 알 수 있으며 &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; 을 사용하여 다른 고정 된 특정 시점을 나타내는 &lt;a href=&quot;struct.systemtime&quot;&gt; &lt;code&gt;SystemTime&lt;/code&gt; &lt;/a&gt; 인스턴스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b5d0e066df6c05d48b8ed4d894544fa1aeed7cdf" translate="yes" xml:space="preserve">
          <source>This constant is defined to be &quot;1970-01-01 00:00:00 UTC&quot; on all systems with respect to the system clock. Using &lt;code&gt;duration_since&lt;/code&gt; on an existing &lt;code&gt;SystemTime&lt;/code&gt; instance can tell how far away from this point in time a measurement lies, and using &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; can be used to create a &lt;code&gt;SystemTime&lt;/code&gt; instance to represent another fixed point in time.</source>
          <target state="translated">이 상수는 시스템 시계와 관련하여 모든 시스템에서 &quot;1970-01-01 00:00:00 UTC&quot;로 정의됩니다. 기존 &lt;code&gt;SystemTime&lt;/code&gt; 인스턴스 에서 &lt;code&gt;duration_since&lt;/code&gt; 를 사용하면 이 시점에서 얼마나 멀리 떨어져 있는지 알 수 있으며 &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; 을 사용하여 다른 고정 된 특정 시점을 나타내는 &lt;code&gt;SystemTime&lt;/code&gt; 인스턴스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2173ef48f94c265cfdd9db0c9cedd205cdc4005" translate="yes" xml:space="preserve">
          <source>This construct eliminates a lot of nesting that would be necessary if you used &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;, and it&amp;rsquo;s clearer. While a condition holds true, the code runs; otherwise, it exits the loop.</source>
          <target state="translated">이 구문은 &lt;code&gt;loop&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;break&lt;/code&gt; 를 사용했을 때 필요한 많은 중첩을 제거하며 더 명확합니다. 조건이 충족되는 동안 코드가 실행됩니다. 그렇지 않으면 루프를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="0f3921b041a98aaf2f8084439e4ed88136086a63" translate="yes" xml:space="preserve">
          <source>This construct is allowed because the first &lt;code&gt;spaces&lt;/code&gt; variable is a string type and the second &lt;code&gt;spaces&lt;/code&gt; variable, which is a brand-new variable that happens to have the same name as the first one, is a number type. Shadowing thus spares us from having to come up with different names, such as &lt;code&gt;spaces_str&lt;/code&gt; and &lt;code&gt;spaces_num&lt;/code&gt;; instead, we can reuse the simpler &lt;code&gt;spaces&lt;/code&gt; name. However, if we try to use &lt;code&gt;mut&lt;/code&gt; for this, as shown here, we&amp;rsquo;ll get a compile-time error:</source>
          <target state="translated">제 때문에 구조가 허용되는 &lt;code&gt;spaces&lt;/code&gt; 변수 문자열 유형 및 두 번째 &lt;code&gt;spaces&lt;/code&gt; 처음과 동일한 이름이 우연히 아주 새로운 변수 변수는 숫자 형이다. 따라서 섀도 잉은 &lt;code&gt;spaces_str&lt;/code&gt; 및 &lt;code&gt;spaces_num&lt;/code&gt; 과 같은 다른 이름을 사용 하지 않아도됩니다 . 대신 간단한 &lt;code&gt;spaces&lt;/code&gt; 이름을 재사용 할 수 있습니다 . 그러나 여기에 표시된 것처럼 &lt;code&gt;mut&lt;/code&gt; 를 사용하려고 하면 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2fc6477635d5d363ee444b003b473b1635177727" translate="yes" xml:space="preserve">
          <source>This constructor is unsafe because we cannot guarantee that the data pointed to by &lt;code&gt;pointer&lt;/code&gt; is pinned, meaning that the data will not be moved or its storage invalidated until it gets dropped. If the constructed &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; does not guarantee that the data &lt;code&gt;P&lt;/code&gt; points to is pinned, that is a violation of the API contract and may lead to undefined behavior in later (safe) operations.</source>
          <target state="translated">&lt;code&gt;pointer&lt;/code&gt; 가 가리키는 데이터 가 고정 되었음을 보장 할 수 없으므로이 생성자는 안전하지 않습니다. 즉, 데이터 가 삭제 될 때까지 데이터가 이동되지 않거나 스토리지가 무효화됩니다. 생성 된 &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; 가 데이터 &lt;code&gt;P&lt;/code&gt; 가 가리키는 것을 보장하지 않으면 이는 API 계약을 위반하는 것이며 이후 (안전한) 작업에서 정의되지 않은 동작으로 이어질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff43397602787e15a0f1ce39d92c367ec0e4e2ba" translate="yes" xml:space="preserve">
          <source>This constructor will panic if &lt;code&gt;secs&lt;/code&gt; is not finite, negative or overflows &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;secs&lt;/code&gt; 가 유한, 음수 또는 오버플로 &lt;code&gt;Duration&lt;/code&gt; 이 아닌 경우이 생성자는 패닉 상태가됩니다 .</target>
        </trans-unit>
        <trans-unit id="62c6e72ea916575b1c7e9925b7cd6a1ec78f970b" translate="yes" xml:space="preserve">
          <source>This constructor will panic if the carry from the nanoseconds overflows the seconds counter.</source>
          <target state="translated">이 생성자는 나노초의 캐리가 초 카운터를 초과하면 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="6b22e102a899811cfc691dccd223a5bfd8615f73" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt; on the left-hand side and re-uses its buffer (growing it if necessary). This is done to avoid allocating a new &lt;code&gt;String&lt;/code&gt; and copying the entire contents on every operation, which would lead to &lt;code&gt;O(n^2)&lt;/code&gt; running time when building an &lt;code&gt;n&lt;/code&gt;-byte string by repeated concatenation.</source>
          <target state="translated">이것은 왼쪽 에서 &lt;code&gt;String&lt;/code&gt; 을 소비 하고 버퍼를 재사용합니다 (필요한 경우 커짐). 이것은 새로운 &lt;code&gt;String&lt;/code&gt; 할당하고 모든 작업에서 전체 내용을 복사하는 것을 피하기 위해 수행되며 , 반복 연결로 &lt;code&gt;n&lt;/code&gt; 바이트 문자열을 작성할 때 &lt;code&gt;O(n^2)&lt;/code&gt; 실행 시간 으로 이어집니다.</target>
        </trans-unit>
        <trans-unit id="9c1a59da820eab802e08d64caefd05fd88b5910a" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt;, so we do not need to copy its contents.</source>
          <target state="translated">이것은 &lt;code&gt;String&lt;/code&gt; 을 소비 하므로 내용을 복사 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="bdf3d0a305b0dd41c0720025809f7bbdfc2e29a7" translate="yes" xml:space="preserve">
          <source>This conversion allocates a new error with a simple representation of error kind.</source>
          <target state="translated">이 변환은 간단한 오류 종류 표현으로 새 오류를 할당합니다.</target>
        </trans-unit>
        <trans-unit id="680616b748f55e8f2a3a0b7bc442fa697101f3ab" translate="yes" xml:space="preserve">
          <source>This conversion allocates on the heap and performs a copy of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">이 변환은 힙에 할당하고 &lt;code&gt;s&lt;/code&gt; 사본을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="9a31c836c91541651df449cd7fae82a0fb324fe3" translate="yes" xml:space="preserve">
          <source>This conversion allocates on the heap and performs a copy of &lt;code&gt;slice&lt;/code&gt;.</source>
          <target state="translated">이 변환은 힙에 할당하고 &lt;code&gt;slice&lt;/code&gt; 사본을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="191fbbeba587abac9c4a996c422eb2e1a86f8da6" translate="yes" xml:space="preserve">
          <source>This conversion creates a &lt;a href=&quot;../net/enum.socketaddr#variant.V4&quot;&gt;&lt;code&gt;SocketAddr::V4&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;../net/enum.ipaddr#variant.V4&quot;&gt;&lt;code&gt;IpAddr::V4&lt;/code&gt;&lt;/a&gt; and creates a &lt;a href=&quot;../net/enum.socketaddr#variant.V6&quot;&gt;&lt;code&gt;SocketAddr::V6&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;../net/enum.ipaddr#variant.V6&quot;&gt;&lt;code&gt;IpAddr::V6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변환은 &lt;a href=&quot;../net/enum.ipaddr#variant.V4&quot;&gt; &lt;code&gt;IpAddr::V4&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../net/enum.socketaddr#variant.V4&quot;&gt; &lt;code&gt;SocketAddr::V4&lt;/code&gt; &lt;/a&gt; 대해 SocketAddr :: V4 를 작성 하고 &lt;a href=&quot;../net/enum.ipaddr#variant.V6&quot;&gt; &lt;code&gt;IpAddr::V6&lt;/code&gt; &lt;/a&gt; 대해 &lt;a href=&quot;../net/enum.socketaddr#variant.V6&quot;&gt; &lt;code&gt;SocketAddr::V6&lt;/code&gt; &lt;/a&gt; 을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="e3e202dba3c3f87c15f9baf72668c6b89f20fb13" translate="yes" xml:space="preserve">
          <source>This conversion creates a &lt;a href=&quot;enum.socketaddr#variant.V4&quot;&gt;&lt;code&gt;SocketAddr::V4&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;enum.ipaddr#variant.V4&quot;&gt;&lt;code&gt;IpAddr::V4&lt;/code&gt;&lt;/a&gt; and creates a &lt;a href=&quot;enum.socketaddr#variant.V6&quot;&gt;&lt;code&gt;SocketAddr::V6&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;enum.ipaddr#variant.V6&quot;&gt;&lt;code&gt;IpAddr::V6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변환은 &lt;a href=&quot;enum.ipaddr#variant.V4&quot;&gt; &lt;code&gt;IpAddr::V4&lt;/code&gt; &lt;/a&gt; 대한 &lt;a href=&quot;enum.socketaddr#variant.V4&quot;&gt; &lt;code&gt;SocketAddr::V4&lt;/code&gt; &lt;/a&gt; 를 작성하고 &lt;a href=&quot;enum.socketaddr#variant.V6&quot;&gt; &lt;code&gt;SocketAddr::V6&lt;/code&gt; &lt;/a&gt; 작성합니다. 하고 &lt;a href=&quot;enum.ipaddr#variant.V6&quot;&gt; &lt;code&gt;IpAddr::V6&lt;/code&gt; &lt;/a&gt; 대해 을 .</target>
        </trans-unit>
        <trans-unit id="3b1a65936a10e1c346d064991eab656396fb2bba" translate="yes" xml:space="preserve">
          <source>This conversion currently should not allocate memory, but this behavior is not guaranteed on all platforms or in all future versions.</source>
          <target state="translated">이 변환은 현재 메모리를 할당하지 않아야하지만이 동작이 모든 플랫폼 또는 모든 향후 버전에서 보장되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e7f2cebd3b32b1fc620100acfba14583ac5721f8" translate="yes" xml:space="preserve">
          <source>This conversion does not allocate on the heap and happens in place.</source>
          <target state="translated">이 변환은 힙에 할당되지 않으며 제자리에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ece3abafa7c5e7855afc6b2c712b92113a0c3cfa" translate="yes" xml:space="preserve">
          <source>This conversion does not allocate or copy memory.</source>
          <target state="translated">이 변환은 메모리를 할당하거나 복사하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eb0a6b0407963e31db76813c54686486ddeb6e67" translate="yes" xml:space="preserve">
          <source>This conversion may entail doing a check for UTF-8 validity.</source>
          <target state="translated">이 변환에는 UTF-8 유효성 검사가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2f146b8b2fc9fbff68e3aacb1296a0b784db40b" translate="yes" xml:space="preserve">
          <source>This converts the weak pointer into a raw pointer, preserving the original weak count. It can be turned back into the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.weak#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 약한 포인터를 원래의 약한 수를 유지하면서 원시 포인터로 변환합니다. 그것은 다시 설정할 수 있습니다 &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 와 &lt;a href=&quot;struct.weak#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c699db8a5191d953bd2f9a766d34a17f9fc7bd1" translate="yes" xml:space="preserve">
          <source>This corresponds to the type returned from a generator either with a &lt;code&gt;return&lt;/code&gt; statement or implicitly as the last expression of a generator literal. For example futures would use this as &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; as it represents a completed future.</source>
          <target state="translated">이는 &lt;code&gt;return&lt;/code&gt; 문을 사용하거나 암시 적으로 생성기 리터럴의 마지막 표현식으로 생성기에서 반환 된 유형에 해당합니다 . 예를 들어 선물은 완료된 미래를 나타내므로이를 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4049b3c18034165d976b921c99656187a99b1c48" translate="yes" xml:space="preserve">
          <source>This could be called as &lt;code&gt;&amp;lt;Foo as Foo&amp;gt;::foo()&lt;/code&gt;, which would not be able to pick an implementation.</source>
          <target state="translated">이를 &lt;code&gt;&amp;lt;Foo as Foo&amp;gt;::foo()&lt;/code&gt; 호출 하면 구현을 선택할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="287539a4f23b39a26818b82e9ae17d404cfd326d" translate="yes" xml:space="preserve">
          <source>This could be caused by a typo. Did you misspell the macro's name?</source>
          <target state="translated">오타가 원인 일 수 있습니다. 매크로 이름의 철자가 틀렸습니까?</target>
        </trans-unit>
        <trans-unit id="13b235947bdbb45d737ce6790102efc941982f83" translate="yes" xml:space="preserve">
          <source>This crate primarily contains a &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; type. Procedural macros operate over &lt;em&gt;token streams&lt;/em&gt; instead of AST nodes, which is a far more stable interface over time for both the compiler and for procedural macros to target. A &lt;em&gt;token stream&lt;/em&gt; is roughly equivalent to &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; where a &lt;code&gt;TokenTree&lt;/code&gt; can roughly be thought of as lexical token. For example &lt;code&gt;foo&lt;/code&gt; is an &lt;code&gt;Ident&lt;/code&gt; token, &lt;code&gt;.&lt;/code&gt; is a &lt;code&gt;Punct&lt;/code&gt; token, and &lt;code&gt;1.2&lt;/code&gt; is a &lt;code&gt;Literal&lt;/code&gt; token. The &lt;code&gt;TokenStream&lt;/code&gt; type, unlike &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt;, is cheap to clone.</source>
          <target state="translated">이 상자에는 주로 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt; 유형이 포함됩니다. 절차 적 매크로는 AST 노드 대신 &lt;em&gt;토큰 스트림을&lt;/em&gt; 통해 작동합니다 . 이는 컴파일러와 절차 적 매크로가 대상으로하는 시간이 지남에 따라 훨씬 안정적인 인터페이스입니다. &lt;em&gt;토큰 스트림은&lt;/em&gt; 대략 동등 &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; &lt;code&gt;TokenTree&lt;/code&gt; 가 대략 어휘 토큰으로 간주 될 수있다. 예를 들어 &lt;code&gt;foo&lt;/code&gt; 는 &lt;code&gt;Ident&lt;/code&gt; 토큰 &lt;code&gt;.&lt;/code&gt; A는 &lt;code&gt;Punct&lt;/code&gt; 토큰 및 &lt;code&gt;1.2&lt;/code&gt; A는 &lt;code&gt;Literal&lt;/code&gt; 토큰. &lt;code&gt;TokenStream&lt;/code&gt; 의 유형은, 달리 &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; , 복제에 도착하는 저렴한이다.</target>
        </trans-unit>
        <trans-unit id="cff1a339d3f6091f32453655f9ee1f32c7930920" translate="yes" xml:space="preserve">
          <source>This creates another pointer to the same inner value, increasing the strong reference count.</source>
          <target state="translated">이렇게하면 동일한 내부 값에 대한 다른 포인터가 만들어져 강력한 참조 횟수가 증가합니다.</target>
        </trans-unit>
        <trans-unit id="c793b99248db7ed16f6d7097d8baba33c4688bf2" translate="yes" xml:space="preserve">
          <source>This defines a trait with two methods. All values that have &lt;a href=&quot;implementations&quot;&gt;implementations&lt;/a&gt; of this trait while the trait is in scope can have their &lt;code&gt;draw&lt;/code&gt; and &lt;code&gt;bounding_box&lt;/code&gt; methods called.</source>
          <target state="translated">이것은 두 가지 방법으로 특성을 정의합니다. 특성이 범위 내에있는 동안이 특성을 &lt;a href=&quot;implementations&quot;&gt;구현&lt;/a&gt; 하는 모든 값은 &lt;code&gt;draw&lt;/code&gt; 및 &lt;code&gt;bounding_box&lt;/code&gt; 메소드를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d48ec195193e5a8a6ddc6d7306e5931fc440ce0" translate="yes" xml:space="preserve">
          <source>This definition is similar to the custom derive macro&amp;rsquo;s signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.</source>
          <target state="translated">이 정의는 사용자 지정 파생 매크로의 서명과 유사합니다. 괄호 안에있는 토큰을 받고 생성하려는 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ec7ae52304bec8c18c92988cc904eba30640fe1" translate="yes" xml:space="preserve">
          <source>This definition should now make more sense to you. As you can see, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is an enum that is generic over type &lt;code&gt;T&lt;/code&gt; and has two variants: &lt;code&gt;Some&lt;/code&gt;, which holds one value of type &lt;code&gt;T&lt;/code&gt;, and a &lt;code&gt;None&lt;/code&gt; variant that doesn&amp;rsquo;t hold any value. By using the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum, we can express the abstract concept of having an optional value, and because &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is generic, we can use this abstraction no matter what the type of the optional value is.</source>
          <target state="translated">이 정의는 이제 더 의미가 있습니다. 당신이 볼 수 있듯이, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 종류 이상의 제네릭 열거입니다 &lt;code&gt;T&lt;/code&gt; : 두 개의 변종이 &lt;code&gt;Some&lt;/code&gt; 한 종류의 값 보유 &lt;code&gt;T&lt;/code&gt; 및 &lt;code&gt;None&lt;/code&gt; 모든 값을 유지하지 않는 변형을. 사용하여 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 열거, 우리는 옵션 값을 가지고있는 추상적 인 개념을 표현할 수 있고, 때문에 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 일반, 우리는이 추상화는 어떤 옵션 값의 유형이 무엇인지는 중요 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a1dc77bf501a21c3fcf8fcfdb984f36618d4b9d8" translate="yes" xml:space="preserve">
          <source>This demonstrates that we&amp;rsquo;re now using standard output for successful output and standard error for error output as appropriate.</source>
          <target state="translated">이는 이제 성공적인 출력을 위해 표준 출력을 사용하고 오류 출력을 위해 표준 오류를 적절하게 사용하고 있음을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0501267bf2be740a305fdf189b227a4c7486d27e" translate="yes" xml:space="preserve">
          <source>This distinction would also exist in an interpreter. Static checks like syntactic analysis, type checking, and lints should happen before the program is executed regardless of when it is executed.</source>
          <target state="translated">이 차이는 통역사에도 존재합니다. 구문 분석, 유형 검사 및 보푸라기와 같은 정적 검사는 프로그램 실행시기에 관계없이 프로그램이 실행되기 전에 수행되어야합니다.</target>
        </trans-unit>
        <trans-unit id="f074ad4712bf36f567466c2e78802eda538edf52" translate="yes" xml:space="preserve">
          <source>This documentation describes a number of methods and trait implementations on the &lt;code&gt;char&lt;/code&gt; type. For technical reasons, there is additional, separate documentation in &lt;a href=&quot;char/index&quot;&gt;the &lt;code&gt;std::char&lt;/code&gt; module&lt;/a&gt; as well.</source>
          <target state="translated">이 문서는 &lt;code&gt;char&lt;/code&gt; 유형 에 대한 여러 가지 메소드 및 특성 구현에 대해 설명합니다 . 기술적 인 이유로 &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;std::char&lt;/code&gt; &lt;/a&gt; 모듈 에는 별도의 추가 설명서가 있습니다.</target>
        </trans-unit>
        <trans-unit id="68839ac29f4116303cf30db2371868d96097990a" translate="yes" xml:space="preserve">
          <source>This does call the argument's implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 인수의 &lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt; 구현을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="cc3143ca0c8ed5c4ad51a7f5632b38d278a744be" translate="yes" xml:space="preserve">
          <source>This does not preserve ordering, but is O(1).</source>
          <target state="translated">이것은 순서를 유지하지 않지만 O (1)입니다.</target>
        </trans-unit>
        <trans-unit id="302cbd1c584e8c39bda1206e23be2bed7460cc52" translate="yes" xml:space="preserve">
          <source>This does not take ownership of the original allocation and requires no resource management later, but you must not use the pointer after its lifetime.</source>
          <target state="translated">이것은 원래 할당의 소유권을 가지지 않으며 나중에 리소스 관리가 필요하지 않지만 수명이 지난 후에는 포인터를 사용하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="7ec03adb1087f5abb7a8507c877e74407679b28c" translate="yes" xml:space="preserve">
          <source>This doesn't actually allocate if &lt;code&gt;T&lt;/code&gt; is zero-sized.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 의 크기가 0 인 경우 실제로 할당되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1a27813265527dd550d73a565f67475ec4a26516" translate="yes" xml:space="preserve">
          <source>This effectively does nothing for types which implement &lt;code&gt;Copy&lt;/code&gt;, e.g. integers. Such values are copied and &lt;em&gt;then&lt;/em&gt; moved into the function, so the value persists after this function call.</source>
          <target state="translated">이것은 정수를 포함하여 &lt;code&gt;Copy&lt;/code&gt; 를 구현하는 유형에 대해서는 아무런 효과가 없습니다 . 이러한 값은 복사 된 &lt;em&gt;후&lt;/em&gt; 함수로 이동되므로이 함수 호출 후에도 값이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="eb1f652575dd2244737e0203d7e6859c386e1f92" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI128&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i128&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어 &lt;code&gt;Option&amp;lt;NonZeroI128&amp;gt;&lt;/code&gt; 은 i128 과 크기가 &lt;code&gt;i128&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f67f6cc0c2c10dc19997b3839443098a644f1d26" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI16&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i16&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroI16&amp;gt;&lt;/code&gt; 은 i16 과 크기가 &lt;code&gt;i16&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="734061adf87b0795fad2886322ea47c0aec2f2ad" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI32&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i32&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어 &lt;code&gt;Option&amp;lt;NonZeroI32&amp;gt;&lt;/code&gt; 는 &lt;code&gt;i32&lt;/code&gt; 와 크기가 같습니다.</target>
        </trans-unit>
        <trans-unit id="00340c6c435ce7c1fdb4cf194be81cf07905d3dd" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI64&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i64&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroI64&amp;gt;&lt;/code&gt; 는 i64 와 크기가 &lt;code&gt;i64&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="278e3b6e04cd3eac83950c68db7f2e8e510eb775" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI8&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i8&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroI8&amp;gt;&lt;/code&gt; 은 &lt;code&gt;i8&lt;/code&gt; 과 크기가 같습니다.</target>
        </trans-unit>
        <trans-unit id="d6a41567af1e9968e9c90e92ec21b8804316cfe8" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroIsize&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;isize&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroIsize&amp;gt;&lt;/code&gt; 는 isize 와 크기가 &lt;code&gt;isize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf2e6ed40009c7af3e4c82c9a64e0f2f0797bce2" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU128&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u128&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroU128&amp;gt;&lt;/code&gt; 은 u128 과 크기가 &lt;code&gt;u128&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76da8b2ba60cec40f8f5e62e107f1dbcb755bbbb" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU16&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u16&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroU16&amp;gt;&lt;/code&gt; 은 u16 과 크기가 &lt;code&gt;u16&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ccbf5b5bf97bc9198c28f18b82543d27c5b27285" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU32&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u32&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroU32&amp;gt;&lt;/code&gt; 는 &lt;code&gt;u32&lt;/code&gt; 와 크기가 같습니다.</target>
        </trans-unit>
        <trans-unit id="538d2876995cecf5e64928ddfeb01ab1a800bbde" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU64&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u64&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroU64&amp;gt;&lt;/code&gt; 는 u64 와 크기가 &lt;code&gt;u64&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0129491a9c802e31402a256b2ed3248526999bd" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU8&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u8&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어, &lt;code&gt;Option&amp;lt;NonZeroU8&amp;gt;&lt;/code&gt; 은 &lt;code&gt;u8&lt;/code&gt; 과 크기가 같습니다.</target>
        </trans-unit>
        <trans-unit id="444ef8a1b6149aa40edb45ac918d2fcc6dd0e6a5" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroUsize&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;usize&lt;/code&gt;:</source>
          <target state="translated">이것은 일부 메모리 레이아웃 최적화를 가능하게합니다. 예를 들어 &lt;code&gt;Option&amp;lt;NonZeroUsize&amp;gt;&lt;/code&gt; 는 usize 와 크기가 &lt;code&gt;usize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05b9c29faea2a683215e0b23ceda6c29cb84253c" translate="yes" xml:space="preserve">
          <source>This enum can contain either an &lt;a href=&quot;struct.ipv4addr&quot;&gt;&lt;code&gt;Ipv4Addr&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;struct.ipv6addr&quot;&gt;&lt;code&gt;Ipv6Addr&lt;/code&gt;&lt;/a&gt;, see their respective documentation for more details.</source>
          <target state="translated">이 열거 형은 하나 포함 할 수 &lt;a href=&quot;struct.ipv4addr&quot;&gt; &lt;code&gt;Ipv4Addr&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;struct.ipv6addr&quot;&gt; &lt;code&gt;Ipv6Addr&lt;/code&gt; 이&lt;/a&gt; , 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="760b8f1ec007bba813777fc9f56dd941c92b8841" translate="yes" xml:space="preserve">
          <source>This enum has four variants with different types:</source>
          <target state="translated">이 열거 형에는 유형이 다른 네 가지 변형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ced6caa3ad1703b55bcd5c2e59bf560b6691cb01" translate="yes" xml:space="preserve">
          <source>This enum has the same role as &lt;a href=&quot;../primitive.never&quot;&gt;the &lt;code&gt;!&lt;/code&gt; &amp;ldquo;never&amp;rdquo; type&lt;/a&gt;, which is unstable in this version of Rust. When &lt;code&gt;!&lt;/code&gt; is stabilized, we plan to make &lt;code&gt;Infallible&lt;/code&gt; a type alias to it:</source>
          <target state="translated">이 열거 형과 같은 역할이 &lt;a href=&quot;../primitive.never&quot;&gt;을 &lt;code&gt;!&lt;/code&gt; &lt;/a&gt;이 버전의 Rust에서는 불안정한 &quot;never&quot;type 입니다. 언제 &lt;code&gt;!&lt;/code&gt; &lt;code&gt;Infallible&lt;/code&gt; 을 유형 별명으로 만들 계획입니다 .</target>
        </trans-unit>
        <trans-unit id="6ee104c9c1676af30fcb1ff39c18e2ed9e455f59" translate="yes" xml:space="preserve">
          <source>This enum is returned from the &lt;code&gt;Generator::resume&lt;/code&gt; method and indicates the possible return values of a generator. Currently this corresponds to either a suspension point (&lt;code&gt;Yielded&lt;/code&gt;) or a termination point (&lt;code&gt;Complete&lt;/code&gt;).</source>
          <target state="translated">이 열거 형은 &lt;code&gt;Generator::resume&lt;/code&gt; 메소드 에서 리턴되며 생성기 의 가능한 리턴 값을 나타냅니다. 현재 이것은 일시 중단 지점 ( &lt;code&gt;Yielded&lt;/code&gt; ) 또는 종료 지점 ( &lt;code&gt;Complete&lt;/code&gt; )에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="1703fcf1fccea6643fefc20e49e4c80e84f95499" translate="yes" xml:space="preserve">
          <source>This enumeration is the list of possible errors that made &lt;a href=&quot;struct.receiver#method.recv_timeout&quot;&gt;&lt;code&gt;recv_timeout&lt;/code&gt;&lt;/a&gt; unable to return data when called. This can occur with both a &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 열거는 &lt;a href=&quot;struct.receiver#method.recv_timeout&quot;&gt; &lt;code&gt;recv_timeout&lt;/code&gt; 이&lt;/a&gt; 호출 될 때 데이터를 리턴 할 수 없게 만든 가능한 오류 목록입니다 . &lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt; 모두에서 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cbe05c4f5a229c7e20d58b03f49460f0df3da02f" translate="yes" xml:space="preserve">
          <source>This enumeration is the list of the possible error outcomes for the &lt;a href=&quot;struct.syncsender#method.try_send&quot;&gt;&lt;code&gt;try_send&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 열거는 &lt;a href=&quot;struct.syncsender#method.try_send&quot;&gt; &lt;code&gt;try_send&lt;/code&gt; &lt;/a&gt; 메소드에 가능한 오류 결과 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="6dc63139830daa8f080f2bf636d153d6ed98ad21" translate="yes" xml:space="preserve">
          <source>This enumeration is the list of the possible reasons that &lt;a href=&quot;struct.receiver#method.try_recv&quot;&gt;&lt;code&gt;try_recv&lt;/code&gt;&lt;/a&gt; could not return data when called. This can occur with both a &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 열거는 &lt;a href=&quot;struct.receiver#method.try_recv&quot;&gt; &lt;code&gt;try_recv&lt;/code&gt; &lt;/a&gt; 가 호출 될 때 데이터를 리턴 할 수없는 가능한 이유의 목록입니다 . &lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt; 모두에서 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c1093396faf4de8ad558d41dcf5187f56b3280a8" translate="yes" xml:space="preserve">
          <source>This error also frequently arises with iteration:</source>
          <target state="translated">이 오류는 반복과 함께 자주 발생합니다.</target>
        </trans-unit>
        <trans-unit id="94b9a993ad00befb67d90a954bbd93d2df863b1b" translate="yes" xml:space="preserve">
          <source>This error appears when the curly braces contain an identifier which doesn't match with any of the type parameters or the string &lt;code&gt;Self&lt;/code&gt;. This might happen if you misspelled a type parameter, or if you intended to use literal curly braces. If it is the latter, escape the curly braces with a second curly brace of the same type; e.g., a literal &lt;code&gt;{&lt;/code&gt; is &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">이 오류는 중괄호에 형식 매개 변수 또는 문자열 &lt;code&gt;Self&lt;/code&gt; 와 일치하지 않는 식별자가 포함 된 경우에 나타납니다 . 유형 매개 변수의 철자가 틀리거나 리터럴 중괄호를 사용하려는 경우에 발생할 수 있습니다. 후자 인 경우 동일한 유형의 두 번째 중괄호를 사용하여 중괄호를 이스케이프 처리하십시오. 예를 들어 리터럴 &lt;code&gt;{&lt;/code&gt; 은 &lt;code&gt;{{&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="584182c12fbcdc7236283566d4fe892f8514a84a" translate="yes" xml:space="preserve">
          <source>This error appears when the curly braces do not contain an identifier. Please add one of the same name as a type parameter. If you intended to use literal braces, use &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; to escape them.</source>
          <target state="translated">중괄호에 식별자가없는 경우이 오류가 나타납니다. 유형 매개 변수와 동일한 이름 중 하나를 추가하십시오. 리터럴 괄호를 사용하려면 &lt;code&gt;{{&lt;/code&gt; 및 &lt;code&gt;}}&lt;/code&gt; 를 사용하여 괄호 를 피하십시오.</target>
        </trans-unit>
        <trans-unit id="0250b09263b0cf211b3144438a4935e1e43d799a" translate="yes" xml:space="preserve">
          <source>This error can be fixed by changing &lt;code&gt;demo&lt;/code&gt; so that the destructor does not run while the string-data is borrowed; for example by taking &lt;code&gt;S&lt;/code&gt; by reference:</source>
          <target state="translated">문자열 데이터를 빌리는 동안 소멸자가 실행되지 않도록 &lt;code&gt;demo&lt;/code&gt; 를 변경 하여이 오류를 해결할 수 있습니다 . 예를 들어 &lt;code&gt;S&lt;/code&gt; 를 참조로 사용하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cf00137495add2df4af51c96509efb72f8de11bd" translate="yes" xml:space="preserve">
          <source>This error can be fixed by creating a reference to the fields of a struct, enum, or tuple using the &lt;code&gt;ref&lt;/code&gt; keyword:</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 키워드를 사용하여 구조체, 열거 형 또는 튜플의 필드에 대한 참조를 작성하면이 오류를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0dff7bc132443224671e948d9ffe4c7e1624395f" translate="yes" xml:space="preserve">
          <source>This error can be fixed by fully reinitializing the structure in question:</source>
          <target state="translated">이 오류는 해당 구조를 완전히 다시 초기화하여 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f0e10eb9c6b47c452a0e1f4fb8a082452a2d703" translate="yes" xml:space="preserve">
          <source>This error code indicates a mismatch between the lifetimes appearing in the function signature (i.e., the parameter types and the return type) and the data-flow found in the function body.</source>
          <target state="translated">이 오류 코드는 함수 시그니처 (예 : 매개 변수 유형 및 반환 유형)에 나타나는 수명과 함수 본문에있는 데이터 흐름이 일치하지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="21caa47590bc7c04cd88dfba7269f8c13368e7a3" translate="yes" xml:space="preserve">
          <source>This error generally appears when two items with the same name are imported into a module. Here, the &lt;code&gt;foo&lt;/code&gt; functions are imported and reexported from the &lt;code&gt;collider&lt;/code&gt; module and therefore, when we're using &lt;code&gt;collider::foo()&lt;/code&gt;, both functions collide.</source>
          <target state="translated">이 오류는 일반적으로 이름이 같은 두 항목을 모듈로 가져올 때 나타납니다. 여기서 &lt;code&gt;foo&lt;/code&gt; 함수는 &lt;code&gt;collider&lt;/code&gt; 모듈 에서 가져오고 다시 내보내 므로 &lt;code&gt;collider::foo()&lt;/code&gt; 하면 두 함수가 충돌합니다.</target>
        </trans-unit>
        <trans-unit id="5926fa6825473ce8b14051d29bff524913459d93" translate="yes" xml:space="preserve">
          <source>This error indicates a violation of one of Rust's orphan rules for trait implementations. The rule concerns the use of type parameters in an implementation of a foreign trait (a trait defined in another crate), and states that type parameters must be &quot;covered&quot; by a local type. To understand what this means, it is perhaps easiest to consider a few examples.</source>
          <target state="translated">이 오류는 특성 구현에 대한 Rust의 고아 규칙 중 하나를 위반했음을 나타냅니다. 이 규칙은 외래 특성 (다른 상자에 정의 된 특성)을 구현할 때 형식 매개 변수를 사용하는 것과 관련이 있으며 형식 매개 변수는 로컬 형식으로 &quot;덮어야&quot;합니다. 이것이 의미하는 바를 이해하려면 몇 가지 예를 고려하는 것이 가장 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="62c66f8f6d53d3993670c86c1f09308676282e5b" translate="yes" xml:space="preserve">
          <source>This error indicates a violation of one of Rust's orphan rules for trait implementations. The rule prohibits any implementation of a foreign trait (a trait defined in another crate) where</source>
          <target state="translated">이 오류는 특성 구현에 대한 Rust의 고아 규칙 중 하나를 위반했음을 나타냅니다. 이 규칙은 외국 특성 (다른 상자에 정의 된 특성)의 구현을 금지합니다.</target>
        </trans-unit>
        <trans-unit id="447a5e9fa4c8cf25c5cd5302f4311b3fbd33ec5e" translate="yes" xml:space="preserve">
          <source>This error indicates that a &lt;code&gt;#[lang = &quot;..&quot;]&lt;/code&gt; attribute was placed on the wrong type of item.</source>
          <target state="translated">이 오류는 &lt;code&gt;#[lang = &quot;..&quot;]&lt;/code&gt; 속성이 잘못된 유형의 항목에 있음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="04b6c6e07e059a0181ccbe377eeeabdfa436d081" translate="yes" xml:space="preserve">
          <source>This error indicates that a &lt;code&gt;#[non_exhaustive]&lt;/code&gt; attribute was incorrectly placed on something other than a struct or enum.</source>
          <target state="translated">이 오류는 &lt;code&gt;#[non_exhaustive]&lt;/code&gt; 속성이 구조체 나 열거 형 이외의 항목에 잘못 배치 되었음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="7022f431bbd32573cf9101aaa229f54136c6e815" translate="yes" xml:space="preserve">
          <source>This error indicates that a &lt;code&gt;#[repr(..)]&lt;/code&gt; attribute was placed on an unsupported item.</source>
          <target state="translated">이 오류는 &lt;code&gt;#[repr(..)]&lt;/code&gt; 속성이 지원되지 않는 항목에 있음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="ca9d1588d95295137d9296e3cc73990ee881720a" translate="yes" xml:space="preserve">
          <source>This error indicates that a binary assignment operator like &lt;code&gt;+=&lt;/code&gt; or &lt;code&gt;^=&lt;/code&gt; was applied to a type that doesn't support it. For example:</source>
          <target state="translated">이 오류는 &lt;code&gt;+=&lt;/code&gt; 또는 &lt;code&gt;^=&lt;/code&gt; 와 같은 이진 대입 연산자 가 지원하지 않는 형식에 적용 되었음을 나타냅니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="942586ad68f246da14ea422c40de5e3f0b9face6" translate="yes" xml:space="preserve">
          <source>This error indicates that a incorrect visibility restriction was specified.</source>
          <target state="translated">이 오류는 잘못된 가시성 제한이 지정되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0ed5220e5bb81a5a254920c1211412f9ef92a217" translate="yes" xml:space="preserve">
          <source>This error indicates that a lifetime is missing from a type. If it is an error inside a function signature, the problem may be with failing to adhere to the lifetime elision rules (see below).</source>
          <target state="translated">이 오류는 유형에서 수명이 누락되었음을 나타냅니다. 함수 서명 내부에 오류가있는 경우 수명 제거 규칙을 준수하지 못하는 문제 일 수 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="163c07e3082230bfd9dd310e7a36d455707b90b1" translate="yes" xml:space="preserve">
          <source>This error indicates that a mutable variable is being used while it is still captured by a closure. Because the closure has borrowed the variable, it is not available for use until the closure goes out of scope.</source>
          <target state="translated">이 오류는 변수 변수가 클로저에 의해 여전히 캡처되는 동안 사용되고 있음을 나타냅니다. 클로저가 변수를 빌려 왔기 때문에 클로저가 범위를 벗어날 때까지 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f276e617d109dc1e2831917bc3e9ec17e8a46ef1" translate="yes" xml:space="preserve">
          <source>This error indicates that a pattern for a struct fails to specify a sub-pattern for every one of the struct's fields. Ensure that each field from the struct's definition is mentioned in the pattern, or use &lt;code&gt;..&lt;/code&gt; to ignore unwanted fields.</source>
          <target state="translated">이 오류는 구조체의 패턴이 구조체의 모든 필드에 대해 하위 패턴을 지정하지 못했음을 나타냅니다. 구조체 정의의 각 필드가 패턴에 언급되어 있는지 확인하거나 &lt;code&gt;..&lt;/code&gt; 을 사용 하여 원하지 않는 필드를 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="cf2673db078cb233aef2cf4d975d04209851d888" translate="yes" xml:space="preserve">
          <source>This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, this type has no compile-time size. Therefore, all accesses to trait types must be through pointers. If you encounter this error you should try to avoid dereferencing the pointer.</source>
          <target state="translated">이 오류는 특성 유형에 대한 포인터를 패턴으로 내재적으로 역 참조 할 수 없음을 나타냅니다. 모든 특성은 유형을 정의하지만 특성 구현 자의 크기는 고정되어 있지 않기 때문에이 유형에는 컴파일 타임 크기가 없습니다. 따라서 형질 유형에 대한 모든 액세스는 포인터를 통해 이루어져야합니다. 이 오류가 발생하면 포인터 역 참조를 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="828017bc333a648d7ba2ba05b6d8defb66538498" translate="yes" xml:space="preserve">
          <source>This error indicates that a struct pattern attempted to extract a non-existent field from a struct. Struct fields are identified by the name used before the colon &lt;code&gt;:&lt;/code&gt; so struct patterns should resemble the declaration of the struct type being matched.</source>
          <target state="translated">이 오류는 구조체 패턴이 구조체에서 존재하지 않는 필드를 추출하려고 시도했음을 나타냅니다. 구조체 필드는 콜론 전에 사용 된 이름에 의해 식별됩니다 &lt;code&gt;:&lt;/code&gt; 구조체 패턴이 구조체 형식의 선언이 일치되고 유사합니다 그래서.</target>
        </trans-unit>
        <trans-unit id="8fe4ff510197fbaaaaa06c8b33b203c1e4dc7f1a" translate="yes" xml:space="preserve">
          <source>This error indicates that a temporary value is being dropped while a borrow is still in active use.</source>
          <target state="translated">이 오류는 대출이 여전히 사용중인 동안 임시 값이 삭제됨을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="29f636e2d8527491e9c968890f3142a6d2d79a49" translate="yes" xml:space="preserve">
          <source>This error indicates that a type or lifetime parameter has been declared but not actually used. Here is an example that demonstrates the error:</source>
          <target state="translated">이 오류는 유형 또는 수명 매개 변수가 선언되었지만 실제로 사용되지 않았 음을 나타냅니다. 다음은 오류를 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="021899c7481112f5b1115194dfebb6c6433d75e6" translate="yes" xml:space="preserve">
          <source>This error indicates that a variable usage inside an inner function is invalid because the variable comes from a dynamic environment. Inner functions do not have access to their containing environment.</source>
          <target state="translated">이 오류는 변수가 동적 환경에서 제공되므로 내부 함수 내부의 변수 사용법이 유효하지 않음을 나타냅니다. 내부 함수는 포함 환경에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ee2b7895f62fe245340d50c3f8c134d38d139ea0" translate="yes" xml:space="preserve">
          <source>This error indicates that an &lt;code&gt;#[inline(..)]&lt;/code&gt; attribute was incorrectly placed on something other than a function or method.</source>
          <target state="translated">이 오류는 &lt;code&gt;#[inline(..)]&lt;/code&gt; 속성이 함수 나 메소드 이외의 것에 잘못 배치 되었음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="b354ce81cf352c1f70206a250c5709ec2f51795d" translate="yes" xml:space="preserve">
          <source>This error indicates that an attempted implementation of a trait method has the wrong number of function parameters.</source>
          <target state="translated">이 오류는 특성 메소드의 구현 시도에 잘못된 수의 함수 매개 변수가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e0c31ba5c6bda555cd8ea81a836bf176c496c77b" translate="yes" xml:space="preserve">
          <source>This error indicates that an attempted implementation of a trait method has the wrong number of type or const parameters.</source>
          <target state="translated">이 오류는 특성 메소드의 구현 시도에 잘못된 유형 또는 const 매개 변수 수가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b75e5fdc31d31d1c4e71b1b39da466c4c14335c3" translate="yes" xml:space="preserve">
          <source>This error indicates that an empty match expression is invalid because the type it is matching on is non-empty (there exist values of this type). In safe code it is impossible to create an instance of an empty type, so empty match expressions are almost never desired. This error is typically fixed by adding one or more cases to the match expression.</source>
          <target state="translated">이 오류는 일치하는 유형이 비어 있지 않기 때문에 빈 일치 표현식이 유효하지 않음을 나타냅니다 (이 유형의 값이 있음). 안전한 코드에서는 빈 형식의 인스턴스를 만드는 것이 불가능하므로 빈 일치 식은 거의 필요하지 않습니다. 이 오류는 일반적으로 하나 이상의 사례를 일치 표현식에 추가하여 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="aa5d0ed3544dd02116d741311bf5dc31cbf1e877" translate="yes" xml:space="preserve">
          <source>This error indicates that during an attempt to build a struct or struct-like enum variant, one of the fields was not provided. Erroneous code example:</source>
          <target state="translated">이 오류는 구조체 또는 구조체와 유사한 열거 형 변형을 작성하려고 시도하는 동안 필드 중 하나가 제공되지 않았 음을 나타냅니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="3e8ed17cc79bcd070351fc2c779882f025c94d0d" translate="yes" xml:space="preserve">
          <source>This error indicates that during an attempt to build a struct or struct-like enum variant, one of the fields was specified more than once. Erroneous code example:</source>
          <target state="translated">이 오류는 구조체 또는 구조체와 같은 열거 형 변형을 작성하는 중에 필드 중 하나가 두 번 이상 지정되었음을 나타냅니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="184a0c9f21c2159367397ab03b1af11810a4b7a9" translate="yes" xml:space="preserve">
          <source>This error indicates that next we need to create an associated function named &lt;code&gt;new&lt;/code&gt; for &lt;code&gt;ThreadPool&lt;/code&gt;. We also know that &lt;code&gt;new&lt;/code&gt; needs to have one parameter that can accept &lt;code&gt;4&lt;/code&gt; as an argument and should return a &lt;code&gt;ThreadPool&lt;/code&gt; instance. Let&amp;rsquo;s implement the simplest &lt;code&gt;new&lt;/code&gt; function that will have those characteristics:</source>
          <target state="translated">이 오류는 다음 에 &lt;code&gt;ThreadPool&lt;/code&gt; 에 대해 &lt;code&gt;new&lt;/code&gt; 라는 관련 함수를 작성해야 함을 나타냅니다 . 또한 &lt;code&gt;new&lt;/code&gt; 에는 인수로 &lt;code&gt;4&lt;/code&gt; 를 허용 하고 &lt;code&gt;ThreadPool&lt;/code&gt; 인스턴스를 반환 해야하는 하나의 매개 변수가 있어야한다는 것도 알고 있습니다 . 이러한 특성을 가진 가장 간단한 &lt;code&gt;new&lt;/code&gt; 기능을 구현해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="2dad13e650883f25d2104ae52eca1fef407497bf" translate="yes" xml:space="preserve">
          <source>This error indicates that not enough type parameters were found in a type or trait.</source>
          <target state="translated">이 오류는 유형 또는 특성에서 유형 매개 변수가 충분하지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ca21a72c98d3df2023442d374a3dadbb098c691b" translate="yes" xml:space="preserve">
          <source>This error indicates that some types or traits depend on each other and therefore cannot be constructed.</source>
          <target state="translated">이 오류는 일부 유형 또는 특성이 서로 종속되어 구성 할 수 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="04671a501f0a2d188e9fcc11f1a02fbc634b9fe6" translate="yes" xml:space="preserve">
          <source>This error indicates that the bindings in a match arm would require a value to be moved into more than one location, thus violating unique ownership. Code like the following is invalid as it requires the entire &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;/code&gt; to be moved into a variable called &lt;code&gt;op_string&lt;/code&gt; while simultaneously requiring the inner &lt;code&gt;String&lt;/code&gt; to be moved into a variable called &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">이 오류는 일치 암의 바인딩이 하나 이상의 위치로 값을 이동해야하므로 고유 소유권을 위반 함을 나타냅니다. 다음과 같은 코드는 전체 &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;/code&gt; 을 &lt;code&gt;op_string&lt;/code&gt; 이라는 변수로 이동 해야하는 동시에 내부 &lt;code&gt;String&lt;/code&gt; 을 &lt;code&gt;s&lt;/code&gt; 라는 변수로 이동 해야하므로 유효하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e6ec80fb058ca19fb5e7892d541e007d08b04d8f" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler cannot guarantee a matching pattern for one or more possible inputs to a match expression. Guaranteed matches are required in order to assign values to match expressions, or alternatively, determine the flow of execution. Erroneous code example:</source>
          <target state="translated">이 오류는 컴파일러가 일치 표현식에 대한 하나 이상의 가능한 입력에 대한 일치 패턴을 보장 할 수 없음을 나타냅니다. 표현식과 일치하는 값을 할당하거나 실행 흐름을 결정하려면 보장 된 일치가 필요합니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="561856cda5e25152013aec070f3d54bab7aa1df8" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler found multiple functions with the &lt;code&gt;#[main]&lt;/code&gt; attribute. This is an error because there must be a unique entry point into a Rust program. Example:</source>
          <target state="translated">이 오류는 컴파일러가 &lt;code&gt;#[main]&lt;/code&gt; 속성을 가진 여러 함수를 찾았 음을 나타냅니다 . Rust 프로그램에 고유 한 진입 점이 있어야하기 때문에 이는 오류입니다. 예:</target>
        </trans-unit>
        <trans-unit id="5bea3375dcc80f531e3766516bd9f6d7115c2ccf" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler found multiple functions with the &lt;code&gt;#[start]&lt;/code&gt; attribute. This is an error because there must be a unique entry point into a Rust program. Example:</source>
          <target state="translated">이 오류는 컴파일러가 &lt;code&gt;#[start]&lt;/code&gt; 속성을 가진 여러 함수를 찾았 음을 나타냅니다 . Rust 프로그램에 고유 한 진입 점이 있어야하기 때문에 이는 오류입니다. 예:</target>
        </trans-unit>
        <trans-unit id="f36d8b8d1d8446198729b807cb2a4a2419af004e" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler was unable to sensibly evaluate an constant expression that had to be evaluated. Attempting to divide by 0 or causing integer overflow are two ways to induce this error. For example:</source>
          <target state="translated">이 오류는 컴파일러가 평가해야하는 상수 표현식을 현명하게 평가할 수 없음을 나타냅니다. 0으로 나누거나 정수 오버플로를 발생시키는 것은이 오류를 유발하는 두 가지 방법입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6a1e2255560b86b2d9499ff55662d827b519b332" translate="yes" xml:space="preserve">
          <source>This error indicates that the numeric value for the method being passed exists but the type of the numeric value or binding could not be identified.</source>
          <target state="translated">이 오류는 전달중인 메소드의 숫자 값이 존재하지만 숫자 값 또는 바인딩 유형을 식별 할 수 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="148347b598d68fa69c31f92c37c1da55d76c0063" translate="yes" xml:space="preserve">
          <source>This error indicates that the struct, enum or enum variant cannot be instantiated from outside of the defining crate as it has been marked as &lt;code&gt;non_exhaustive&lt;/code&gt; and as such more fields/variants may be added in future that could cause adverse side effects for this code.</source>
          <target state="translated">이 오류는 struct, enum 또는 enum 변형이 정의되지 않은 크레이트 외부에서 인스턴스화 할 수 없음을 나타냅니다. 이는 비 &lt;code&gt;non_exhaustive&lt;/code&gt; 이라고 표시되어 향후이 코드에 부작용을 일으킬 수있는 더 많은 필드 / 변형이 추가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcad2c51ea5b37a57bae2601eed616fe3e726b2e" translate="yes" xml:space="preserve">
          <source>This error indicates that the struct, enum or enum variant must be matched non-exhaustively as it has been marked as &lt;code&gt;non_exhaustive&lt;/code&gt;.</source>
          <target state="translated">이 오류는 구조체, 열거 형 또는 열거 형 변형이 &lt;code&gt;non_exhaustive&lt;/code&gt; 로 표시 되었으므로 전체적으로 일치하지 않아야 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="37c7a2a28ca533246457e808e16c999f3f050492" translate="yes" xml:space="preserve">
          <source>This error indicates that there is a mismatch between generic parameters and impl Trait parameters in a trait declaration versus its impl.</source>
          <target state="translated">이 오류는 특성 선언에서 일반 매개 변수와 impl 특성 매개 변수와 해당 impl간에 불일치가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="51a28020fb3170ca33d27d23beb6ff4c2ae9ce5c" translate="yes" xml:space="preserve">
          <source>This error indicates that too many type parameters were found in a type or trait.</source>
          <target state="translated">이 오류는 유형 또는 특성에서 너무 많은 유형 매개 변수가 발견되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="52a40c02e70b32e434b6bbe135867f805601219b" translate="yes" xml:space="preserve">
          <source>This error indicates that type inference did not result in one unique possible type, and extra information is required. In most cases this can be provided by adding a type annotation. Sometimes you need to specify a generic type parameter manually.</source>
          <target state="translated">이 오류는 형식 유추로 인해 하나의 고유 한 형식이 만들어지지 않았으며 추가 정보가 필요함을 나타냅니다. 대부분의 경우 유형 주석을 추가하여 제공 할 수 있습니다. 때로는 일반 유형 매개 변수를 수동으로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="4c3b94702358e1162bf8effa04b8b4b7e098714c" translate="yes" xml:space="preserve">
          <source>This error indicates that you are trying to borrow a variable as mutable when it has already been borrowed as immutable.</source>
          <target state="translated">이 오류는 변수가 이미 변경 불가능한 것으로 빌려 졌을 때 변수를 변경 가능으로 빌리려고 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5d266dd2a168d28b90102ea5f40d828bae3909b4" translate="yes" xml:space="preserve">
          <source>This error indicates the use of a loop keyword (&lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt;) inside a closure but outside of any loop. Erroneous code example:</source>
          <target state="translated">이 오류는 클로저 내부에서 루프 외부 에서 루프 키워드 ( &lt;code&gt;break&lt;/code&gt; 또는 &lt;code&gt;continue&lt;/code&gt; )를 사용함을 나타냅니다 . 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="a14d78d3da966b89fe122674705e062ddb4c4c41" translate="yes" xml:space="preserve">
          <source>This error indicates the use of a loop keyword (&lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt;) outside of a loop. Without a loop to break out of or continue in, no sensible action can be taken. Erroneous code example:</source>
          <target state="translated">이 오류는 루프 외부 에서 루프 키워드 ( &lt;code&gt;break&lt;/code&gt; 또는 &lt;code&gt;continue&lt;/code&gt; )를 사용함을 나타냅니다 . 루프가 끊어 지거나 계속 진행되지 않으면 현명한 조치를 취할 수 없습니다. 잘못된 코드 예 :</target>
        </trans-unit>
        <trans-unit id="1b9e91e9541342a47e9d0b1ac521444fa8e68a88" translate="yes" xml:space="preserve">
          <source>This error is created by the &lt;a href=&quot;struct.cstr#method.from_bytes_with_nul&quot;&gt;&lt;code&gt;from_bytes_with_nul&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 오류는 &lt;a href=&quot;struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.cstr#method.from_bytes_with_nul&quot;&gt; &lt;code&gt;from_bytes_with_nul&lt;/code&gt; &lt;/a&gt; 메소드에 의해 작성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7f88231c82f77383d008a182af5374b0e8d20578" translate="yes" xml:space="preserve">
          <source>This error is created by the &lt;a href=&quot;struct.cstring#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">이 에러는 &lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.cstring#method.new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 메소드에 의해 생성됩니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e66887716e5bc2fbc972f3ffc3450120cd6c7b7e" translate="yes" xml:space="preserve">
          <source>This error is fairly cryptic because the problem is fairly cryptic. To call a &lt;code&gt;FnOnce&lt;/code&gt; closure that is stored in a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; (which is what our &lt;code&gt;Job&lt;/code&gt; type alias is), the closure needs to move itself &lt;em&gt;out&lt;/em&gt; of the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; because the closure takes ownership of &lt;code&gt;self&lt;/code&gt; when we call it. In general, Rust doesn&amp;rsquo;t allow us to move a value out of a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; because Rust doesn&amp;rsquo;t know how big the value inside the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; will be: recall in Chapter 15 that we used &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; precisely because we had something of an unknown size that we wanted to store in a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; to get a value of a known size.</source>
          <target state="translated">이 오류는 문제가 상당히 복잡하기 때문에 상당히 복잡합니다. 통화에 &lt;code&gt;FnOnce&lt;/code&gt; 의 (A)에 저장되어있는 폐쇄 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; (우리의 것입니다 &lt;code&gt;Job&lt;/code&gt; 유형의 별칭입니다), 폐쇄 요구 자체를 이동 &lt;em&gt;밖으로&lt;/em&gt; 의 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 폐쇄가의 소유권을하기 때문에 &lt;code&gt;self&lt;/code&gt; 우리가 그것을 호출 할 때. 일반적으로, 녹 우리가 밖으로 값을 이동하는 것을 허용하지 않습니다 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 녹 알고하지 않기 때문에 얼마나 큰 내부 값 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 될 것입니다 장 : 우리가 사용했던 15 리콜 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 정확히 알려지지 않은 크기의 무언가가 있었기 때문에 알려진 크기의 값을 얻기 위해 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 에 저장하려고했습니다 .</target>
        </trans-unit>
        <trans-unit id="ac1c7bfe67c403881a0d5e5220daf766f18ab15b" translate="yes" xml:space="preserve">
          <source>This error is used as the error type for the &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; implementation for &lt;a href=&quot;../primitive.f32&quot;&gt;&lt;code&gt;f32&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 오류는 대한 오류 유형으로 사용되는 &lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; 에&lt;/a&gt; 대한 구현 &lt;a href=&quot;../primitive.f32&quot;&gt; &lt;code&gt;f32&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../primitive.f64&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a413bd30b0780353f6f0cb9ec7112a60510b4c1b" translate="yes" xml:space="preserve">
          <source>This error is used as the error type for the &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; implementation for &lt;a href=&quot;enum.ipaddr&quot;&gt;&lt;code&gt;IpAddr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.ipv4addr&quot;&gt;&lt;code&gt;Ipv4Addr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.ipv6addr&quot;&gt;&lt;code&gt;Ipv6Addr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.socketaddrv4&quot;&gt;&lt;code&gt;SocketAddrV4&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.socketaddrv6&quot;&gt;&lt;code&gt;SocketAddrV6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 오류는 &lt;a href=&quot;enum.ipaddr&quot;&gt; &lt;code&gt;IpAddr&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;struct.ipv4addr&quot;&gt; &lt;code&gt;Ipv4Addr&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;struct.ipv6addr&quot;&gt; &lt;code&gt;Ipv6Addr&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;struct.socketaddrv4&quot;&gt; &lt;code&gt;SocketAddrV4&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;struct.socketaddrv6&quot;&gt; &lt;code&gt;SocketAddrV6&lt;/code&gt; &lt;/a&gt; 에 대한 &lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt; 구현 의 오류 유형으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="dbd5a817ebd0158354fc9b6704f3a0f2b0fc517f" translate="yes" xml:space="preserve">
          <source>This error is used as the error type for the &lt;code&gt;from_str_radix()&lt;/code&gt; functions on the primitive integer types, such as &lt;a href=&quot;../primitive.i8#method.from_str_radix&quot;&gt;&lt;code&gt;i8::from_str_radix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 오류는 기본 정수 유형 (예 : &lt;a href=&quot;../primitive.i8#method.from_str_radix&quot;&gt; &lt;code&gt;i8::from_str_radix&lt;/code&gt; &lt;/a&gt; &lt;code&gt;from_str_radix()&lt;/code&gt; 에서 from_str_radix () 함수 의 오류 유형으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="022d759f57798a79780636ae9f03f6fedf32312c" translate="yes" xml:space="preserve">
          <source>This error lets us know that either we&amp;rsquo;re passing something to &lt;code&gt;Screen&lt;/code&gt; we didn&amp;rsquo;t mean to pass and we should pass a different type or we should implement &lt;code&gt;Draw&lt;/code&gt; on &lt;code&gt;String&lt;/code&gt; so that &lt;code&gt;Screen&lt;/code&gt; is able to call &lt;code&gt;draw&lt;/code&gt; on it.</source>
          <target state="translated">이 오류는 우리가 하나 우리가 무언가를 전달하는 것을 알 수 있습니다 &lt;code&gt;Screen&lt;/code&gt; 우리가 전달하는 의미하지 않았다 우리는 다른 종류의를 통과해야 또는 우리가 구현해야 &lt;code&gt;Draw&lt;/code&gt; 에 &lt;code&gt;String&lt;/code&gt; 있도록 &lt;code&gt;Screen&lt;/code&gt; 호출 할 수있다 &lt;code&gt;draw&lt;/code&gt; 그 위에.</target>
        </trans-unit>
        <trans-unit id="7089a49860a1eeefd308980067bc3b5e6f3e5841" translate="yes" xml:space="preserve">
          <source>This error lets you know that Rust has this constant defined more precisely and that your program would be more correct if you used the constant instead. You would then change your code to use the &lt;code&gt;PI&lt;/code&gt; constant. The following code doesn&amp;rsquo;t result in any errors or warnings from Clippy:</source>
          <target state="translated">이 오류는 Rust가이 상수를보다 정확하게 정의했으며 상수를 대신 사용하면 프로그램이 더 정확하다는 것을 알려줍니다. 그런 다음 &lt;code&gt;PI&lt;/code&gt; 상수 를 사용하도록 코드를 변경합니다 . 다음 코드는 Clippy에서 오류나 경고를 발생시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7527f99b3dbab9d3281da26cc0de240205ca3ed7" translate="yes" xml:space="preserve">
          <source>This error may also commonly be found when working with unsafe code. For example, when using raw pointers one may wish to specify the lifetime for which the pointed-at data is valid. An initial attempt (below) causes this error:</source>
          <target state="translated">안전하지 않은 코드로 작업 할 때이 오류가 일반적으로 발견 될 수 있습니다. 예를 들어, 원시 포인터를 사용할 때 지정된 데이터가 유효한 수명을 지정할 수 있습니다. 초기 시도 (아래)는이 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1e7204b5ea49e32896ab0ba12a29a6e3937bc0f3" translate="yes" xml:space="preserve">
          <source>This error means that an attempt was made to match a struct type enum variant as a non-struct type:</source>
          <target state="translated">이 오류는 구조체 형식 열거 형 변형을 구조체 이외의 형식으로 일치 시키려고 시도했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c1988ee636e2a4d68092372fb6c89de2473339d3" translate="yes" xml:space="preserve">
          <source>This error means that an incorrect number of generic arguments were provided:</source>
          <target state="translated">이 오류는 잘못된 수의 일반 인수가 제공되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="368e8d1bf22974707354d4d21e3f6ab34ed1757e" translate="yes" xml:space="preserve">
          <source>This error means you can&amp;rsquo;t use this trait as a trait object in this way. If you&amp;rsquo;re interested in more details on object safety, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md&quot;&gt;Rust RFC 255&lt;/a&gt;.</source>
          <target state="translated">이 오류는이 특성을 이런 방식으로 특성 오브젝트로 사용할 수 없음을 의미합니다. 객체 안전에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md&quot;&gt;Rust RFC 255를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="027a2fdf6a3f9948a9c92b0f1c99c26f859c6929" translate="yes" xml:space="preserve">
          <source>This error message refers to a feature we haven&amp;rsquo;t covered yet: lifetimes. We&amp;rsquo;ll discuss lifetimes in detail in Chapter 10. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:</source>
          <target state="translated">이 오류 메시지는 아직 다루지 않은 기능인 수명을 나타냅니다. 수명에 대해서는 10 장에서 자세히 설명 할 것입니다. 그러나 수명에 대한 부분을 무시하면이 코드가 왜 문제가 되는가에 대한 메시지가 메시지에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b934f7e266f094b4b999e8bf2f04c71dea6d6829" translate="yes" xml:space="preserve">
          <source>This error message states that we&amp;rsquo;re not allowed to explicitly call &lt;code&gt;drop&lt;/code&gt;. The error message uses the term &lt;em&gt;destructor&lt;/em&gt;, which is the general programming term for a function that cleans up an instance. A &lt;em&gt;destructor&lt;/em&gt; is analogous to a &lt;em&gt;constructor&lt;/em&gt;, which creates an instance. The &lt;code&gt;drop&lt;/code&gt; function in Rust is one particular destructor.</source>
          <target state="translated">이 오류 메시지는 &lt;code&gt;drop&lt;/code&gt; 호출을 명시 적으로 호출 할 수 없음을 나타 냅니다. 오류 메시지에는 &lt;em&gt;소멸 자라는&lt;/em&gt; 용어가 사용 되는데, 이는 인스턴스를 정리하는 함수의 일반적인 프로그래밍 용어입니다. &lt;em&gt;소멸자&lt;/em&gt; A와 유사 &lt;em&gt;생성자&lt;/em&gt; 인스턴스를 생성한다. Rust 의 &lt;code&gt;drop&lt;/code&gt; 함수는 특정 소멸자입니다.</target>
        </trans-unit>
        <trans-unit id="2c2b32b5586db42f3b0dff4da46b1782d86e698e" translate="yes" xml:space="preserve">
          <source>This error occurs because a borrow in a generator persists across a yield point.</source>
          <target state="translated">이 오류는 생성기의 차용이 항복점에 걸쳐 지속되기 때문에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1e6bf835d8f1dd37c8b25ebb4f51cc6621c79aa9" translate="yes" xml:space="preserve">
          <source>This error occurs because a borrow of a thread-local variable was made inside a function which outlived the lifetime of the function.</source>
          <target state="translated">이 오류는 함수의 수명보다 오래 지속되는 함수 내에서 스레드 로컬 변수를 빌려 왔기 때문에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="249f7bc8f6d82a80564f1c3f396aa42dbc6e451f" translate="yes" xml:space="preserve">
          <source>This error occurs because a value was dropped while it was still borrowed</source>
          <target state="translated">이 오류는 여전히 빌린 동안 값이 삭제 되었기 때문에 발생합니다</target>
        </trans-unit>
        <trans-unit id="074bebec9bc1d161aacdccb6e09fa091949d4c0d" translate="yes" xml:space="preserve">
          <source>This error occurs because you tried to mutably borrow a non-mutable variable.</source>
          <target state="translated">이 오류는 변경 불가능한 변수를 변경 가능하게 차용하려고했기 때문에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1c3db0f8ef7d737dfd4c2dc90ac02bc9a5c77f3f" translate="yes" xml:space="preserve">
          <source>This error occurs when a bound in an implementation of a trait does not match the bounds specified in the original trait. For example:</source>
          <target state="translated">이 오류는 특성 구현에서 바운드가 원래 특성에 지정된 범위와 일치하지 않을 때 발생합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="093dfc68eae74dcc328a7c8a1a3d68f0b36d7fb4" translate="yes" xml:space="preserve">
          <source>This error occurs when a method is used on a type which doesn't implement it:</source>
          <target state="translated">이 오류는 메소드를 구현하지 않는 유형에서 메소드를 사용할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="da941b6947e460e43f6112767122feb782f16207" translate="yes" xml:space="preserve">
          <source>This error occurs when an &lt;code&gt;if&lt;/code&gt; expression without an &lt;code&gt;else&lt;/code&gt; block is used in a context where a type other than &lt;code&gt;()&lt;/code&gt; is expected, for example a &lt;code&gt;let&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; 블록이 없는 &lt;code&gt;if&lt;/code&gt; 표현식 이 &lt;code&gt;()&lt;/code&gt; 이외의 유형 ( 예 : &lt;code&gt;let&lt;/code&gt; ) 이 필요한 컨텍스트에서 사용될 경우이 오류가 발생합니다. : 표현식 .</target>
        </trans-unit>
        <trans-unit id="d0370ddda8b1bb558216506bbbbafb414b273904" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to assign to a borrowed value.</source>
          <target state="translated">이 오류는 빌린 값에 할당하려고 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="81568110c66c811e652efe84f4e84d35ccd0ca5f" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to borrow state past the end of the lifetime of a type that implements the &lt;code&gt;Drop&lt;/code&gt; trait.</source>
          <target state="translated">이 오류는 &lt;code&gt;Drop&lt;/code&gt; 을 구현하는 형식의 수명이 끝났을 때 상태를 차용하려고 할 때 발생합니다. 특성 특성 .</target>
        </trans-unit>
        <trans-unit id="552e357ec5f4118a4e87577f4bd866d88ddeba4b" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to move a borrowed variable into a closure.</source>
          <target state="translated">이 오류는 빌린 변수를 클로저로 이동하려고 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="08dbd4d1c622d91c2a3b2e7680f087d95c0c0ad4" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to move out of a value whose type implements the &lt;code&gt;Drop&lt;/code&gt; trait.</source>
          <target state="translated">이 오류는 유형이 &lt;code&gt;Drop&lt;/code&gt; 을 구현하는 값에서 벗어나려고 할 때 발생합니다. 특성을 .</target>
        </trans-unit>
        <trans-unit id="b0cd32a89f254835e1067e05e21bdf36f5041728" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to mutate or mutably reference data that a closure has captured immutably. Examples of this error are shown below:</source>
          <target state="translated">이 오류는 클로저가 변경 불가능하게 캡처 한 데이터를 변경하거나 변경 가능하게 참조하려고 할 때 발생합니다. 이 오류의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e494d266acb1b46fd28c9cc0c8ca718e819da16c" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to partially reinitialize a structure that is currently uninitialized.</source>
          <target state="translated">이 오류는 현재 초기화되지 않은 구조를 부분적으로 다시 초기화하려고 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8feee21757ea4763c54c8d19077d7ff7e0dd5208" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to reassign an immutable variable. For example:</source>
          <target state="translated">이 오류는 불변 변수를 재 할당하려고 할 때 발생합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b105f193c377f1f9fe2f520a0094f3220a7d20d3" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to use a variable after its contents have been moved elsewhere. For example:</source>
          <target state="translated">이 오류는 변수 내용을 다른 곳으로 옮긴 후 변수를 사용하려고 할 때 발생합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="47a25aa9b1a97609269b45b233bf81af91519446" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to use data captured by a closure, when that data may no longer exist. It's most commonly seen when attempting to return a closure:</source>
          <target state="translated">이 오류는 해당 데이터가 더 이상 존재하지 않을 때 클로저로 캡처 한 데이터를 사용하려고 할 때 발생합니다. 클로저를 반환하려고 할 때 가장 일반적으로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="fa2c4bec036eb23e59f4739f281ec16e241dd98a" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler doesn't have enough information to unambiguously choose an implementation.</source>
          <target state="translated">이 오류는 컴파일러에 구현을 명확하게 선택할 수있는 충분한 정보가 없을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f68d6da4cba1c2fe73a0bdd6ed998a8c685d2f7a" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler is unable to unambiguously infer the return type of a function or method which is generic on return type, such as the &lt;code&gt;collect&lt;/code&gt; method for &lt;code&gt;Iterator&lt;/code&gt;s.</source>
          <target state="translated">이 오류는 컴파일러가 &lt;code&gt;Iterator&lt;/code&gt; 의 &lt;code&gt;collect&lt;/code&gt; 메소드 와 같이 리턴 유형에 일반적인 함수 또는 메소드의 리턴 유형을 명확하게 유추 할 수없는 경우 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="f8852702dc84baa326e19b865b76e83190126314" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler was unable to infer the concrete type of a variable. It can occur for several cases, the most common of which is a mismatch in the expected type that the compiler inferred for a variable's initializing expression, and the actual type explicitly assigned to the variable.</source>
          <target state="translated">이 오류는 컴파일러가 구체적인 유형의 변수를 유추 할 수 없을 때 발생합니다. 여러 경우에 발생할 수 있는데, 그 중 가장 일반적인 것은 컴파일러가 변수의 초기화 표현식에 대해 유추 한 예상 유형과 변수에 명시 적으로 지정된 실제 유형이 일치하지 않는 것입니다.</target>
        </trans-unit>
        <trans-unit id="40572c6042150247d80f8e73ff85712050d543de" translate="yes" xml:space="preserve">
          <source>This error occurs when there was a recursive trait requirement that overflowed before it could be evaluated. Often this means that there is unbounded recursion in resolving some type bounds.</source>
          <target state="translated">이 오류는 재귀 특성 요구 사항이 평가되기 전에 오버플로 된 경우에 발생합니다. 이것은 종종 일부 유형 범위를 해결하는 데 무한 재귀가 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7b6569d564fb77649858b1d55f9d8b2a0efd5a34" translate="yes" xml:space="preserve">
          <source>This error occurs when you defined methods or associated functions with same name.</source>
          <target state="translated">이 오류는 동일한 이름으로 메소드 또는 연관된 함수를 정의 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="31aab3dcb3c76822f5a50ebdbab3c624e3384795" translate="yes" xml:space="preserve">
          <source>This error points at a file we didn&amp;rsquo;t write, &lt;em&gt;libcore/slice/mod.rs&lt;/em&gt;. That&amp;rsquo;s the implementation of &lt;code&gt;slice&lt;/code&gt; in the Rust source code. The code that gets run when we use &lt;code&gt;[]&lt;/code&gt; on our vector &lt;code&gt;v&lt;/code&gt; is in &lt;em&gt;libcore/slice/mod.rs&lt;/em&gt;, and that is where the &lt;code&gt;panic!&lt;/code&gt; is actually happening.</source>
          <target state="translated">이 오류는 우리가 작성하지 않은 파일 인 &lt;em&gt;libcore / slice / mod.rs를 가리 킵니다&lt;/em&gt; . 이것이 Rust 소스 코드에서 &lt;code&gt;slice&lt;/code&gt; 의 구현입니다 . 벡터 &lt;code&gt;v&lt;/code&gt; 에서 &lt;code&gt;[]&lt;/code&gt; 를 사용할 때 실행되는 코드 는 &lt;em&gt;libcore / slice / mod.rs&lt;/em&gt; 에 있으며, 여기서 &lt;code&gt;panic!&lt;/code&gt; 이 발생합니다 ! 실제로 일어나고 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="daff356f50087f066d8d7f295e45f7db503c47eb" translate="yes" xml:space="preserve">
          <source>This error points out that we&amp;rsquo;re only allowed to use the &lt;code&gt;?&lt;/code&gt; operator in a function that returns &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. When you&amp;rsquo;re writing code in a function that doesn&amp;rsquo;t return &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, and you want to use &lt;code&gt;?&lt;/code&gt; when you call other functions that return &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, you have two choices to fix this problem. One technique is to change the return type of your function to be &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; if you have no restrictions preventing that. The other technique is to use a &lt;code&gt;match&lt;/code&gt; or one of the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; methods to handle the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; in whatever way is appropriate.</source>
          <target state="translated">이 오류는 &lt;code&gt;?&lt;/code&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 를 반환하는 함수의 연산자 . &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 반환하지 않는 함수에서 코드를 작성 하고 싶 &lt;code&gt;?&lt;/code&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 를 리턴하는 다른 함수를 호출 할 때이 문제를 해결하기위한 두 가지 선택 사항이 있습니다. 이를 방지하는 데 제한이없는 경우 함수의 반환 유형을 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 로 변경하는 방법이 있습니다 . 다른 기술은 사용하는 &lt;code&gt;match&lt;/code&gt; 의 하나 또는 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 핸들하는 방법 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 방법은 적절한 무엇이든에 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5d927c97470a6bdf532b94621efe13e0092f99e" translate="yes" xml:space="preserve">
          <source>This error suggests that the expression arm corresponding to the noted pattern will never be reached as for all possible values of the expression being matched, one of the preceding patterns will match.</source>
          <target state="translated">이 오류는 일치하는 표현식의 모든 가능한 값에 대해 언급 된 패턴에 해당하는 표현식 암에 도달하지 않으며, 이전 패턴 중 하나가 일치 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f4cd2a99a6de016ca859c1b751566814099aa1c3" translate="yes" xml:space="preserve">
          <source>This error type&amp;rsquo;s methods can be used to create functionality similar to &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; without allocating heap memory:</source>
          <target state="translated">이 오류 유형의 메소드를 사용하여 &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; 와 유사한 기능을 작성할 수 있습니다. 힙 메모리를 할당하지 않고 .</target>
        </trans-unit>
        <trans-unit id="fb422fab14fffbfe5c78207ee2ae02a65418bd40" translate="yes" xml:space="preserve">
          <source>This error usually happens when trying to pass in a value to an input inline assembly operand that is actually a pair of values. In particular, this can happen when trying to pass in a slice, for instance a &lt;code&gt;&amp;amp;str&lt;/code&gt;. In Rust, these values are represented internally as a pair of values, the pointer and its length. When passed as an input operand, this pair of values can not be coerced into a register and thus we must fail with an error.</source>
          <target state="translated">이 오류는 일반적으로 실제로 값 쌍인 입력 인라인 어셈블리 피연산자에 값을 전달하려고 할 때 발생합니다. 특히 이것은 슬라이스를 전달하려고 할 때 발생할 수 있습니다 (예 : &lt;code&gt;&amp;amp;str&lt;/code&gt; . Rust에서 이러한 값은 내부적으로 한 쌍의 값, 포인터 및 길이로 표시됩니다. 입력 피연산자로 전달되면이 값 쌍을 레지스터로 강제 변환 할 수 없으므로 오류와 함께 실패해야합니다.</target>
        </trans-unit>
        <trans-unit id="46906d1c89db9bd7d3aa62947de98893bb4109ab" translate="yes" xml:space="preserve">
          <source>This error was returned when attempting to write the internal buffer.</source>
          <target state="translated">내부 버퍼를 쓰려고 할 때이 오류가 리턴되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f5335a8d7c6f37faeab381d52fe1092a252bd8d" translate="yes" xml:space="preserve">
          <source>This example also shows how to use &lt;code&gt;move&lt;/code&gt;, in order to give ownership of values to a thread.</source>
          <target state="translated">이 예제는 값 소유권을 스레드에 부여하기 위해 &lt;code&gt;move&lt;/code&gt; 를 사용하는 방법도 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="175716bea92c9d941f0898dc29c4ed209e64c353" translate="yes" xml:space="preserve">
          <source>This example builds a string, starting with an initial value and continuing with each element from the back until the front:</source>
          <target state="translated">이 예제는 초기 값부터 시작하여 각 요소를 뒤에서 앞으로 계속하여 문자열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="4d013525fa73f401dcf7648ce7d8e69f8100f085" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;Point&lt;/code&gt; struct that implements &lt;a href=&quot;trait.add&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.sub&quot;&gt;&lt;code&gt;Sub&lt;/code&gt;&lt;/a&gt;, and then demonstrates adding and subtracting two &lt;code&gt;Point&lt;/code&gt;s.</source>
          <target state="translated">이 예제에서는 &lt;a href=&quot;trait.add&quot;&gt; &lt;code&gt;Add&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;trait.sub&quot;&gt; &lt;code&gt;Sub&lt;/code&gt; &lt;/a&gt; 을 구현 하는 &lt;code&gt;Point&lt;/code&gt; 구조체를 만든 다음 두 &lt;code&gt;Point&lt;/code&gt; 를 더하고 빼는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="612bd6352093018ae655e26b99b1150fb9f0d9dc" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;Point&lt;/code&gt; struct that implements the &lt;code&gt;AddAssign&lt;/code&gt; trait, and then demonstrates add-assigning to a mutable &lt;code&gt;Point&lt;/code&gt;.</source>
          <target state="translated">이 예제에서는 &lt;code&gt;AddAssign&lt;/code&gt; 특성 을 구현 하는 &lt;code&gt;Point&lt;/code&gt; 구조체를 만든 다음 변경 가능한 &lt;code&gt;Point&lt;/code&gt; 에 대한 추가 할당을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="84b61046cfa323fa19b23ac20e12034ef787e01b" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;Point&lt;/code&gt; struct that implements the &lt;code&gt;SubAssign&lt;/code&gt; trait, and then demonstrates sub-assigning to a mutable &lt;code&gt;Point&lt;/code&gt;.</source>
          <target state="translated">이 예제 는 &lt;code&gt;SubAssign&lt;/code&gt; 특성 을 구현 하는 &lt;code&gt;Point&lt;/code&gt; 구조체를 만든 다음 변경 가능한 &lt;code&gt;Point&lt;/code&gt; 에 대한 하위 할당을 보여줍니다. .</target>
        </trans-unit>
        <trans-unit id="979ade7fbba01641154de5a065a6e6890cf54db4" translate="yes" xml:space="preserve">
          <source>This example creates a function with two parameters, both of which are &lt;code&gt;i32&lt;/code&gt; types. The function then prints the values in both of its parameters. Note that function parameters don&amp;rsquo;t all need to be the same type, they just happen to be in this example.</source>
          <target state="translated">이 예는 &lt;code&gt;i32&lt;/code&gt; 유형 인 두 개의 매개 변수로 함수를 작성합니다 . 그런 다음이 함수는 두 매개 변수 모두에 값을 인쇄합니다. 함수 매개 변수가 모두 같은 유형일 필요는 없으며이 예제에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="701db2e46c2038eecc101dd4ef0779ff5ad8d4cc" translate="yes" xml:space="preserve">
          <source>This example implements &lt;code&gt;Rem&lt;/code&gt; on a &lt;code&gt;SplitSlice&lt;/code&gt; object. After &lt;code&gt;Rem&lt;/code&gt; is implemented, one can use the &lt;code&gt;%&lt;/code&gt; operator to find out what the remaining elements of the slice would be after splitting it into equal slices of a given length.</source>
          <target state="translated">이 예제 는 &lt;code&gt;SplitSlice&lt;/code&gt; 객체 에서 &lt;code&gt;Rem&lt;/code&gt; 을 구현 합니다. &lt;code&gt;Rem&lt;/code&gt; 이 구현 된 후 &lt;code&gt;%&lt;/code&gt; 를 사용할 수 있습니다 연산자를 하여 슬라이스의 나머지 요소를 주어진 길이의 동일한 슬라이스로 분할 한 후의 나머지 요소를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d81c01c409b8ce1936b460c9219c2266b9648d9" translate="yes" xml:space="preserve">
          <source>This example prints 3, 2, and then 1. The &lt;code&gt;pop&lt;/code&gt; method takes the last element out of the vector and returns &lt;code&gt;Some(value)&lt;/code&gt;. If the vector is empty, &lt;code&gt;pop&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;. The &lt;code&gt;while&lt;/code&gt; loop continues running the code in its block as long as &lt;code&gt;pop&lt;/code&gt; returns &lt;code&gt;Some&lt;/code&gt;. When &lt;code&gt;pop&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;, the loop stops. We can use &lt;code&gt;while let&lt;/code&gt; to pop every element off our stack.</source>
          <target state="translated">이 예제는 3, 2, 1을 인쇄합니다. &lt;code&gt;pop&lt;/code&gt; 메서드는 벡터에서 마지막 요소를 가져와 &lt;code&gt;Some(value)&lt;/code&gt; 반환합니다 . 벡터가 비어 있으면 &lt;code&gt;pop&lt;/code&gt; 은 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 . &lt;code&gt;while&lt;/code&gt; 루프는 길이만큼의 블록의 코드를 계속 실행 &lt;code&gt;pop&lt;/code&gt; 반환 &lt;code&gt;Some&lt;/code&gt; . 때 &lt;code&gt;pop&lt;/code&gt; 반환 &lt;code&gt;None&lt;/code&gt; , 루프가 중지됩니다. 스택에서 모든 요소를 ​​튀기는 &lt;code&gt;while let&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="33bd3bf0b7b00466cfe4514bc631cc4d45b75356" translate="yes" xml:space="preserve">
          <source>This example shows an inner attribute on a function. The function will only be available while running tests.</source>
          <target state="translated">이 예제는 함수의 내부 속성을 보여줍니다. 이 기능은 테스트를 실행하는 동안에 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02dcd48945408a840f3079c83663da1b30b196c7" translate="yes" xml:space="preserve">
          <source>This example shows how one can use &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; to toggle a particular check on and off:</source>
          <target state="translated">이 예제는 &lt;code&gt;allow&lt;/code&gt; 와 &lt;code&gt;warn&lt;/code&gt; 을 사용 하여 특정 검사를 켜고 끄는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="b51a82804a004969c18f750e315e49a925f322a3" translate="yes" xml:space="preserve">
          <source>This example shows how one can use &lt;code&gt;forbid&lt;/code&gt; to disallow uses of &lt;code&gt;allow&lt;/code&gt; for that lint check:</source>
          <target state="translated">사람이 사용할 수있는 방법이 예제 쇼 &lt;code&gt;forbid&lt;/code&gt; 의 용도를 허용하지 &lt;code&gt;allow&lt;/code&gt; 하는 보풀 확인을 위해 :</target>
        </trans-unit>
        <trans-unit id="20dcd5999998e80d936e0fa700c4a9a09932a423" translate="yes" xml:space="preserve">
          <source>This example shows how the compiler helps you find errors in your programs. Even though compiler errors can be frustrating, they only mean your program isn&amp;rsquo;t safely doing what you want it to do yet; they do &lt;em&gt;not&lt;/em&gt; mean that you&amp;rsquo;re not a good programmer! Experienced Rustaceans still get compiler errors.</source>
          <target state="translated">이 예제는 컴파일러가 프로그램에서 오류를 찾는 방법을 보여줍니다. 컴파일러 오류는 실망 스러울 수 있지만 프로그램이 아직 원하는 작업을 안전하게 수행하고 있지 않다는 것을 의미합니다. 그들은 당신이 좋은 프로그래머 가 &lt;em&gt;아니라는&lt;/em&gt; 것을 의미 하지는 &lt;em&gt;않습니다&lt;/em&gt; ! 경험 많은 Rustaceans는 여전히 컴파일러 오류를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2cb4570e4e31d810429621e0a69fd89abfdb2ea3" translate="yes" xml:space="preserve">
          <source>This example shows using a custom derive attribute to modify the meaning of a generic parameter.</source>
          <target state="translated">이 예는 사용자 정의 파생 속성을 사용하여 일반 매개 변수의 의미를 수정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e1b71afb4f7ccdfd339dd3d129a43084a3b35c6b" translate="yes" xml:space="preserve">
          <source>This example spawns a thread which will update the boolean value and then wait 100 milliseconds before notifying the condvar.</source>
          <target state="translated">이 예제는 부울 값을 업데이트 한 다음 100 밀리 초 동안 기다렸다가 condvar에 알리는 스레드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b7617cea2234e7524bc25112d50668635c06f962" translate="yes" xml:space="preserve">
          <source>This example will print &lt;code&gt;Found an id in range: 5&lt;/code&gt;. By specifying &lt;code&gt;id_variable @&lt;/code&gt; before the range &lt;code&gt;3...7&lt;/code&gt;, we&amp;rsquo;re capturing whatever value matched the range while also testing that the value matched the range pattern.</source>
          <target state="translated">이 예제는 &lt;code&gt;Found an id in range: 5&lt;/code&gt; 를 인쇄 합니다. &lt;code&gt;3...7&lt;/code&gt; 범위 앞에 &lt;code&gt;id_variable @&lt;/code&gt; 을 지정하여 와 일치하는 값을 캡처하는 동시에 값이 범위 패턴과 일치하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="0792a7553f859fe5307a072fac84a140057b4ecf" translate="yes" xml:space="preserve">
          <source>This example will print &lt;code&gt;less than five: 4&lt;/code&gt;. When &lt;code&gt;num&lt;/code&gt; is compared to the pattern in the first arm, it matches, because &lt;code&gt;Some(4)&lt;/code&gt; matches &lt;code&gt;Some(x)&lt;/code&gt;. Then the match guard checks whether the value in &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;5&lt;/code&gt;, and because it is, the first arm is selected.</source>
          <target state="translated">이 예는 &lt;code&gt;less than five: 4&lt;/code&gt; 을 인쇄합니다 : 4 . 경우 &lt;code&gt;num&lt;/code&gt; 제 1 아암의 패턴과 비교된다 때문 일치 &lt;code&gt;Some(4)&lt;/code&gt; 과 일치하는 &lt;code&gt;Some(x)&lt;/code&gt; . 그런 다음 매치 가드는 &lt;code&gt;x&lt;/code&gt; 의 값 이 &lt;code&gt;5&lt;/code&gt; 보다 작은 지 여부를 확인하고 그 값 이므로 첫 번째 팔이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="13f35b34cb9f0940df9ede968c0941933fe5a63e" translate="yes" xml:space="preserve">
          <source>This explicitly states that you expect the trait object &lt;code&gt;SomeTrait&lt;/code&gt; to contain references (with a maximum lifetime of &lt;code&gt;'a&lt;/code&gt;).</source>
          <target state="translated">이는 특성 오브젝트 &lt;code&gt;SomeTrait&lt;/code&gt; 에 참조 (최대 수명이 &lt;code&gt;'a&lt;/code&gt; ' ) 를 포함 할 것으로 예상 함을 명시 적으로 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="55550702354f0f532a45a47534287ba31230892e" translate="yes" xml:space="preserve">
          <source>This expression:</source>
          <target state="translated">이 표현은 :</target>
        </trans-unit>
        <trans-unit id="d4d243a04a2e7c3baa5aaa70386526d20f9c61fb" translate="yes" xml:space="preserve">
          <source>This fails because &lt;code&gt;&amp;amp;mut T&lt;/code&gt; is not &lt;code&gt;Copy&lt;/code&gt;, even when &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Copy&lt;/code&gt; (this differs from the behavior for &lt;code&gt;&amp;amp;T&lt;/code&gt;, which is always &lt;code&gt;Copy&lt;/code&gt;).</source>
          <target state="translated">이는 실패 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 아닌 &lt;code&gt;Copy&lt;/code&gt; 하더라도, &lt;code&gt;T&lt;/code&gt; 는 이다 &lt;code&gt;Copy&lt;/code&gt; (대한 동작에서이 다릅니다 &lt;code&gt;&amp;amp;T&lt;/code&gt; 항상, &lt;code&gt;Copy&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="96a49ec58cf9d3de1eca61f7643ce5de9d8c4e5e" translate="yes" xml:space="preserve">
          <source>This fails because &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; does not implement &lt;code&gt;Copy&lt;/code&gt; for any &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 가 &lt;code&gt;T&lt;/code&gt; 에 대해 &lt;code&gt;Copy&lt;/code&gt; 를 구현하지 않기 때문에 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="77c78e0cdd88af63c9805574659b7e0844c8f178" translate="yes" xml:space="preserve">
          <source>This fails to compile because &lt;code&gt;T&lt;/code&gt; does not appear in the trait or in the implementing type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 는 특성 또는 구현 유형에 나타나지 않기 때문에 컴파일에 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="0c5af671ad45076c8c92a16a6b71ec7dd6cf3c8d" translate="yes" xml:space="preserve">
          <source>This field contains the file system attribute information for a file or directory. For possible values and their descriptions, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx&quot;&gt;File Attribute Constants&lt;/a&gt; in the Windows Dev Center.</source>
          <target state="translated">이 필드에는 파일 또는 디렉토리에 대한 파일 시스템 속성 정보가 있습니다. 가능한 값과 설명은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx&quot;&gt;파일 속성 상수를&lt;/a&gt; 참조하십시오. 은 Windows 개발자 센터의 를 .</target>
        </trans-unit>
        <trans-unit id="fed8ac050f10d4961483960b90a8bb5fa116bf7c" translate="yes" xml:space="preserve">
          <source>This field may not be available on all platforms, and will return an &lt;code&gt;Err&lt;/code&gt; on platforms where it is not available.</source>
          <target state="translated">이 필드는 모든 플랫폼에서 사용 가능하지 않을 수 있으며 사용할 수없는 플랫폼에서는 &lt;code&gt;Err&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5368359fd79a3572b28925e44099327d749ce6f1" translate="yes" xml:space="preserve">
          <source>This file is in the &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;&lt;em&gt;TOML&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;Tom&amp;rsquo;s Obvious, Minimal Language&lt;/em&gt;) format, which is Cargo&amp;rsquo;s configuration format.</source>
          <target state="translated">이 파일은 &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;&lt;em&gt;TOML&lt;/em&gt;&lt;/a&gt; ( &lt;em&gt;Tom 's Obvious, Minimal Language&lt;/em&gt; ) 형식이며, 이는 Cargo의 구성 형식입니다.</target>
        </trans-unit>
        <trans-unit id="f0537f20b3c4c0b16d4802ffcd175906f9816b83" translate="yes" xml:space="preserve">
          <source>This following example shows the stringified &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;s&lt;/a&gt; that the attribute macros see. The output will show in the output of the compiler. The output is shown in the comments after the function prefixed with &quot;out:&quot;.</source>
          <target state="translated">이 다음 예제 표시는도 캐릭터 라인 &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; 의&lt;/a&gt; 속성 매크로를 참조하는 것이 있습니다. 출력은 컴파일러의 출력에 표시됩니다. &quot;out :&quot;접두사가 붙은 함수 뒤에 주석에 출력이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a9c265b88652152ca2b28f53cb136d7ff3a25c8d" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;consumes ownership&lt;/strong&gt; of the specified file descriptor. The returned object will take responsibility for closing it when the object goes out of scope.</source>
          <target state="translated">이 함수 &lt;strong&gt;는 소유권을 소비합니다&lt;/strong&gt; 지정된 파일 디스크립터의 을 합니다. 반환 된 객체는 객체가 범위를 벗어날 때 객체를 닫는 책임을집니다.</target>
        </trans-unit>
        <trans-unit id="7770f6814daf86198289168c0cb8b4e0eaa39b97" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying file descriptor to the caller. Callers are then the unique owners of the file descriptor and must close the descriptor once it's no longer needed.</source>
          <target state="translated">이 함수 는 기본 파일 디스크립터의 &lt;strong&gt;소유권&lt;/strong&gt; 을 호출자에게 &lt;strong&gt;전송&lt;/strong&gt; 합니다. 그러면 호출자는 파일 디스크립터의 고유 한 소유자이며 더 이상 필요하지 않은 디스크립터를 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="9e16870fdc5324388fb513d47d710cb2a9d23e70" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying handle to the caller. Callers are then the unique owners of the handle and must close it once it's no longer needed.</source>
          <target state="translated">이 함수 는 기본 핸들의 &lt;strong&gt;소유권&lt;/strong&gt; 을 호출자에게 &lt;strong&gt;전송&lt;/strong&gt; 합니다. 그러면 발신자는 핸들의 고유 한 소유자이므로 더 이상 필요하지 않으면 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="90c9a08f16b0c10b615b5b0843cebfac39017e99" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying pthread_t to the caller. Callers are then the unique owners of the pthread_t and must either detach or join the pthread_t once it's no longer needed.</source>
          <target state="translated">이 함수 는 기본 pthread_t의 &lt;strong&gt;소유권&lt;/strong&gt; 을 호출자에게 &lt;strong&gt;전송&lt;/strong&gt; 합니다. 그러면 호출자는 pthread_t의 고유 한 소유자이며 더 이상 필요하지 않은 pthread_t를 분리하거나 결합해야합니다.</target>
        </trans-unit>
        <trans-unit id="06669b18e93261495eb1fcf2252cb895da69c39a" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying socket to the caller. Callers are then the unique owners of the socket and must close it once it's no longer needed.</source>
          <target state="translated">이 함수 는 기본 소켓의 &lt;strong&gt;소유권&lt;/strong&gt; 을 호출자에게 &lt;strong&gt;전송&lt;/strong&gt; 합니다. 그러면 호출자는 소켓의 고유 한 소유자이므로 더 이상 필요하지 않으면 소켓을 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="3028ce76268abc4493b0febc5668a0c85baa5e06" translate="yes" xml:space="preserve">
          <source>This function accepts strings such as</source>
          <target state="translated">이 함수는 다음과 같은 문자열을 받아들입니다.</target>
        </trans-unit>
        <trans-unit id="e1eb2ceefa3b664d9a9270981fa8cbdd469bffdd" translate="yes" xml:space="preserve">
          <source>This function can be used for control flow based on &lt;code&gt;Result&lt;/code&gt; values.</source>
          <target state="translated">이 기능은 &lt;code&gt;Result&lt;/code&gt; 값을 기준으로 제어 흐름에 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="069d719c6868f05d1ad9a84a0abe1540eb6a83ca" translate="yes" xml:space="preserve">
          <source>This function can be used for control flow based on result values.</source>
          <target state="translated">이 기능은 결과 값을 기준으로 제어 흐름에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f2e8570607d30aa900e189937d7916fe8ed3230" translate="yes" xml:space="preserve">
          <source>This function can be used to compose the results of two functions.</source>
          <target state="translated">이 기능은 두 가지 기능의 결과를 구성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="890b1ba5d17963460809400c8357e2da154ed2a6" translate="yes" xml:space="preserve">
          <source>This function can be used to pass through a successful result while handling an error.</source>
          <target state="translated">이 기능을 사용하면 오류를 처리하는 동안 성공적인 결과를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f898974fbfac52e97eb29d82afb416cf7dbf9a7a" translate="yes" xml:space="preserve">
          <source>This function can be used to unpack a successful result while handling an error.</source>
          <target state="translated">이 기능을 사용하면 오류를 처리하는 동안 성공적인 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="663e29d3010e4fe834fdfef457c75d87463c66ed" translate="yes" xml:space="preserve">
          <source>This function can be written in a much shorter way, but we&amp;rsquo;re going to start by doing a lot of it manually in order to explore error handling; at the end, we&amp;rsquo;ll show the shorter way. Let&amp;rsquo;s look at the return type of the function first: &lt;code&gt;Result&amp;lt;String, io::Error&amp;gt;&lt;/code&gt;. This means the function is returning a value of the type &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; where the generic parameter &lt;code&gt;T&lt;/code&gt; has been filled in with the concrete type &lt;code&gt;String&lt;/code&gt; and the generic type &lt;code&gt;E&lt;/code&gt; has been filled in with the concrete type &lt;code&gt;io::Error&lt;/code&gt;. If this function succeeds without any problems, the code that calls this function will receive an &lt;code&gt;Ok&lt;/code&gt; value that holds a &lt;code&gt;String&lt;/code&gt;&amp;mdash;the username that this function read from the file. If this function encounters any problems, the code that calls this function will receive an &lt;code&gt;Err&lt;/code&gt; value that holds an instance of &lt;code&gt;io::Error&lt;/code&gt; that contains more information about what the problems were. We chose &lt;code&gt;io::Error&lt;/code&gt; as the return type of this function because that happens to be the type of the error value returned from both of the operations we&amp;rsquo;re calling in this function&amp;rsquo;s body that might fail: the &lt;code&gt;File::open&lt;/code&gt; function and the &lt;code&gt;read_to_string&lt;/code&gt; method.</source>
          <target state="translated">이 함수는 훨씬 짧은 방식으로 작성 될 수 있지만 오류 처리를 탐색하기 위해 수동으로 많은 기능을 수행하는 것으로 시작합니다. 마지막에 더 짧은 방법을 보여 드리겠습니다. 함수의 반환 유형을 먼저 보자 : &lt;code&gt;Result&amp;lt;String, io::Error&amp;gt;&lt;/code&gt; . 이는 함수가 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 유형의 값을 리턴한다는 것을 의미합니다. 여기서 일반 매개 변수 &lt;code&gt;T&lt;/code&gt; 는 콘크리트 유형 &lt;code&gt;String&lt;/code&gt; 으로 채워지고 일반 유형 &lt;code&gt;E&lt;/code&gt; 는 콘크리트 유형 &lt;code&gt;io::Error&lt;/code&gt; 로 채워집니다 . 이 함수가 아무런 문제없이 성공하면이 함수를 호출하는 코드 는 &lt;code&gt;String&lt;/code&gt; 을 보유한 &lt;code&gt;Ok&lt;/code&gt; 값을 받습니다.&amp;mdash;이 함수가 파일에서 읽은 사용자 이름. 이 함수에 문제가 발생하면이 함수를 호출하는 코드 는 문제의 원인에 대한 자세한 정보가 포함 된 &lt;code&gt;io::Error&lt;/code&gt; 인스턴스를 보유하는 &lt;code&gt;Err&lt;/code&gt; 값을 받습니다 . 이 함수의 반환 유형으로 &lt;code&gt;io::Error&lt;/code&gt; 를 선택했습니다. 실패했을 수있는이 함수의 본문에서 호출하는 두 작업 모두에서 반환 된 오류 값의 유형이기 때문입니다. &lt;code&gt;File::open&lt;/code&gt; 함수 및 &lt;code&gt;read_to_string&lt;/code&gt; 메소드.</target>
        </trans-unit>
        <trans-unit id="cb45099429d3a43cd1fd9c5de5abe0335d7b7e9d" translate="yes" xml:space="preserve">
          <source>This function corresponds to &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;std::mem::replace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;std::mem::replace&lt;/code&gt; &lt;/a&gt; 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="bc55369db6754d8ec7579c34bfc5b97438f6a7f6" translate="yes" xml:space="preserve">
          <source>This function corresponds to &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;std::mem::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;std::mem::swap&lt;/code&gt; &lt;/a&gt; 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="ac167c5922dc46db61626cca7bc837d30e8e8d77" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to &lt;code&gt;opendir&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; and &lt;code&gt;rmdir&lt;/code&gt; functions on Unix and the &lt;code&gt;FindFirstFile&lt;/code&gt;, &lt;code&gt;GetFileAttributesEx&lt;/code&gt;, &lt;code&gt;DeleteFile&lt;/code&gt;, and &lt;code&gt;RemoveDirectory&lt;/code&gt; functions on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix의 &lt;code&gt;opendir&lt;/code&gt; , &lt;code&gt;lstat&lt;/code&gt; , &lt;code&gt;rm&lt;/code&gt; 및 &lt;code&gt;rmdir&lt;/code&gt; 함수 및 Windows 의 &lt;code&gt;FindFirstFile&lt;/code&gt; , &lt;code&gt;GetFileAttributesEx&lt;/code&gt; , &lt;code&gt;DeleteFile&lt;/code&gt; 및 &lt;code&gt;RemoveDirectory&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bea785a55c87ae52504d49f8f95ea16d8aa3ce9e" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;chmod&lt;/code&gt; function on Unix and the &lt;code&gt;SetFileAttributes&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;chmod&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;SetFileAttributes&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04e383479b2228c3ffffa98975698e9dda256dbb" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;fchmod&lt;/code&gt; function on Unix and the &lt;code&gt;SetFileInformationByHandle&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;fchmod&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;SetFileInformationByHandle&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0176ddcd073fa8b60d6460114db8d5951e367349" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;link&lt;/code&gt; function on Unix and the &lt;code&gt;CreateHardLink&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 기능은 현재 Unix 의 &lt;code&gt;link&lt;/code&gt; 기능과 Windows 의 &lt;code&gt;CreateHardLink&lt;/code&gt; 기능에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="01e2694d82da90e8f24cd10e750a58377e07410c" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;lstat&lt;/code&gt; function on Unix and the &lt;code&gt;GetFileAttributesEx&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;lstat&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;GetFileAttributesEx&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3537e3f2c9af1f7a17489b68fe05b364816b75fc" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;mkdir&lt;/code&gt; function on Unix and the &lt;code&gt;CreateDirectory&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;mkdir&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;CreateDirectory&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4ffbba2d718a3b3920d07fee5dfb64d2a84ce583" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;open&lt;/code&gt; function in Unix with &lt;code&gt;O_RDONLY&lt;/code&gt; for &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;O_WRONLY&lt;/code&gt;, &lt;code&gt;O_CREAT&lt;/code&gt;, and &lt;code&gt;O_TRUNC&lt;/code&gt; for &lt;code&gt;to&lt;/code&gt;. &lt;code&gt;O_CLOEXEC&lt;/code&gt; is set for returned file descriptors. On Windows, this function currently corresponds to &lt;code&gt;CopyFileEx&lt;/code&gt;. Alternate NTFS streams are copied but only the size of the main stream is returned by this function. On MacOS, this function corresponds to &lt;code&gt;fclonefileat&lt;/code&gt; and &lt;code&gt;fcopyfile&lt;/code&gt;. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 기능은 현재 &lt;code&gt;open&lt;/code&gt; 해당합니다 &lt;code&gt;from&lt;/code&gt; 에 대해 &lt;code&gt;O_RDONLY&lt;/code&gt; 를 사용 하고 &lt;code&gt;to&lt;/code&gt; 에 대해 &lt;code&gt;O_WRONLY&lt;/code&gt; , &lt;code&gt;O_CREAT&lt;/code&gt; 및 &lt;code&gt;O_TRUNC&lt;/code&gt; 를 사용 하는 Unix 함수에 합니다 . 리턴 된 파일 디스크립터에 대해 &lt;code&gt;O_CLOEXEC&lt;/code&gt; 가 설정되었습니다. Windows에서이 기능은 현재 &lt;code&gt;CopyFileEx&lt;/code&gt; 에 해당합니다 . 대체 NTFS 스트림은 복사되지만이 기능은 주 스트림 크기 만 반환합니다. MacOS에서이 기능은 &lt;code&gt;fclonefileat&lt;/code&gt; 및 &lt;code&gt;fcopyfile&lt;/code&gt; 에 해당합니다 . 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="85bdcb1c22d0b90cfc515b44a49195abde2937e0" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;opendir&lt;/code&gt; function on Unix and the &lt;code&gt;FindFirstFile&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;opendir&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;FindFirstFile&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c6d0089b9c1b95a34e4ecb4a009ec095c9db172d" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;readlink&lt;/code&gt; function on Unix and the &lt;code&gt;CreateFile&lt;/code&gt; function with &lt;code&gt;FILE_FLAG_OPEN_REPARSE_POINT&lt;/code&gt; and &lt;code&gt;FILE_FLAG_BACKUP_SEMANTICS&lt;/code&gt; flags on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;readlink&lt;/code&gt; 함수와 Windows의 &lt;code&gt;FILE_FLAG_OPEN_REPARSE_POINT&lt;/code&gt; 및 &lt;code&gt;FILE_FLAG_BACKUP_SEMANTICS&lt;/code&gt; 플래그가 있는 &lt;code&gt;CreateFile&lt;/code&gt; 함수 에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="83d811fb4fcc08f1492a059a3536fbb7a2a90ca2" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;realpath&lt;/code&gt; function on Unix and the &lt;code&gt;CreateFile&lt;/code&gt; and &lt;code&gt;GetFinalPathNameByHandle&lt;/code&gt; functions on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;realpath&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;CreateFile&lt;/code&gt; 및 &lt;code&gt;GetFinalPathNameByHandle&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e8892007c2c9e02432f47cff4848a4e40ebbc10c" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;rename&lt;/code&gt; function on Unix and the &lt;code&gt;MoveFileEx&lt;/code&gt; function with the &lt;code&gt;MOVEFILE_REPLACE_EXISTING&lt;/code&gt; flag on Windows.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;rename&lt;/code&gt; 기능과 Windows 의 &lt;code&gt;MOVEFILE_REPLACE_EXISTING&lt;/code&gt; 플래그를 가진 &lt;code&gt;MoveFileEx&lt;/code&gt; 함수에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="8dd8f559f50531dc710476fe85e80e2f8d9753bd" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;rmdir&lt;/code&gt; function on Unix and the &lt;code&gt;RemoveDirectory&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 기능은 현재 Unix 의 &lt;code&gt;rmdir&lt;/code&gt; 기능과 Windows 의 &lt;code&gt;RemoveDirectory&lt;/code&gt; 기능에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b504889b373cb94fdb7ee56e28d937c2f36d6f0b" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;stat&lt;/code&gt; function on Unix and the &lt;code&gt;GetFileAttributesEx&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 함수는 현재 Unix 의 &lt;code&gt;stat&lt;/code&gt; 함수와 Windows 의 &lt;code&gt;GetFileAttributesEx&lt;/code&gt; 함수에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6672293739936665c26201ef3156432a0e98fd87" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;unlink&lt;/code&gt; function on Unix and the &lt;code&gt;DeleteFile&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">이 기능은 현재 Unix 의 &lt;code&gt;unlink&lt;/code&gt; 기능과 Windows 의 &lt;code&gt;DeleteFile&lt;/code&gt; 기능에 해당합니다. 그 참고이 &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;미래에 변경 될 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c94bdac48da7a0fc40fd1e5a086497b625f64825" translate="yes" xml:space="preserve">
          <source>This function does &lt;strong&gt;not&lt;/strong&gt; follow symbolic links and it will simply remove the symbolic link itself.</source>
          <target state="translated">이 기능은 심볼릭 링크를 따르지 &lt;strong&gt;않으며&lt;/strong&gt; 단순히 심볼릭 링크 자체를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="977a8c203f0461d37e9d1afc3c85702bdcf54979" translate="yes" xml:space="preserve">
          <source>This function does not block.</source>
          <target state="translated">이 기능은 차단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6f6f2506f47f0d38fd935eda8f1d3f32af31d36c" translate="yes" xml:space="preserve">
          <source>This function does not provide any guarantees about whether it blocks waiting for data, but if an object needs to block for a read but cannot it will typically signal this via an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; return value.</source>
          <target state="translated">이 함수는 데이터 대기를 차단하는지 여부에 대한 보장을 제공하지 않지만 객체가 읽기를 차단해야하지만 일반적으로 &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 반환 값을 통해 신호를 보내지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c9eb6fee31ded1ada354009451436d0884930106" translate="yes" xml:space="preserve">
          <source>This function does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.</source>
          <target state="translated">이 기능은 논쟁적인 독자 또는 작가가 우선 잠금을 획득 할 것인지의 순서와 관련하여 어떠한 보장도 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4305826482cc10423eedc0c48122ffd5b51fb63b" translate="yes" xml:space="preserve">
          <source>This function doesn't create the file if it doesn't exist. Use the &lt;a href=&quot;#method.create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt; method to do so.</source>
          <target state="translated">이 함수는 파일이 존재하지 않으면 파일을 생성하지 않습니다. 그렇게 하려면 &lt;a href=&quot;#method.create&quot;&gt; &lt;code&gt;create&lt;/code&gt; &lt;/a&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2ecd58992bf3950332fa012ed014d7ac0b8bc7f" translate="yes" xml:space="preserve">
          <source>This function first gets the total length of the slice. Then it asserts that the index given as a parameter is within the slice by checking whether it&amp;rsquo;s less than or equal to the length. The assertion means that if we pass an index that is greater than the index to split the slice at, the function will panic before it attempts to use that index.</source>
          <target state="translated">이 함수는 먼저 슬라이스의 전체 길이를 가져옵니다. 그런 다음 매개 변수로 제공된 인덱스가 길이보다 작거나 같은지 확인하여 슬라이스 내에 있다고 주장합니다. 어설 션은 슬라이스를 분할하기 위해 인덱스보다 큰 인덱스를 전달하면 해당 인덱스를 사용하기 전에 함수가 패닉 상태임을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="457e092a949142d636a9e03fab0c159238f5daa4" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt;&lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">이 함수는 호출을 &lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt; &lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt; &lt;/a&gt; 전달합니다. &lt;code&gt;#[global_allocator]&lt;/code&gt; 속성 또는 &lt;code&gt;std&lt;/code&gt; crate의 기본값 이있는 경우 # [global_allocator] 속성으로 등록 된 할당 메소드로 .</target>
        </trans-unit>
        <trans-unit id="dac6968f4833b95b4cfc0a37edb3317e41dafb8d" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;&lt;code&gt;GlobalAlloc::realloc&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">이 함수는 호출을 &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt; &lt;code&gt;GlobalAlloc::realloc&lt;/code&gt; &lt;/a&gt; 전달합니다. &lt;code&gt;#[global_allocator]&lt;/code&gt; 속성 또는 &lt;code&gt;std&lt;/code&gt; crate의 기본값 이있는 경우 # [global_allocator] 속성으로 등록 된 할당 메소드로 .</target>
        </trans-unit>
        <trans-unit id="0ee226de8b2847b4bcaa66f0141bab39ef9c2e4e" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;&lt;code&gt;GlobalAlloc::alloc&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">이 함수는 에 할당 된 할당 자의 &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt; &lt;code&gt;GlobalAlloc::alloc&lt;/code&gt; &lt;/a&gt; 메소드로 호출을 전달합니다 . &lt;code&gt;#[global_allocator]&lt;/code&gt; 속성 또는 &lt;code&gt;std&lt;/code&gt; crate의 기본값 이있는 경우 # [global_allocator] 속성으로 .</target>
        </trans-unit>
        <trans-unit id="43408a3e60cf657f5104a853eae37001a5663e2b" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt;&lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">이 함수는 에 할당 된 할당 자의 &lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt; &lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt; &lt;/a&gt; 메소드로 호출을 전달합니다 . &lt;code&gt;#[global_allocator]&lt;/code&gt; 속성 또는 &lt;code&gt;std&lt;/code&gt; crate의 기본값 이있는 경우 # [global_allocator] 속성으로 .</target>
        </trans-unit>
        <trans-unit id="438ebff47f84838c22c79fbc8bfdda182cd513dc" translate="yes" xml:space="preserve">
          <source>This function gets called when a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; gets dropped.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 가 삭제.</target>
        </trans-unit>
        <trans-unit id="13819f0b7aa144e5ea6bcb9cc9f9a6808e198851" translate="yes" xml:space="preserve">
          <source>This function has the same error semantics as &lt;a href=&quot;#method.read_until&quot;&gt;&lt;code&gt;read_until&lt;/code&gt;&lt;/a&gt; and will also return an error if the read bytes are not valid UTF-8. If an I/O error is encountered then &lt;code&gt;buf&lt;/code&gt; may contain some bytes already read in the event that all data read so far was valid UTF-8.</source>
          <target state="translated">이 함수는 오류 의미와 동일한 &lt;a href=&quot;#method.read_until&quot;&gt; &lt;code&gt;read_until&lt;/code&gt; &lt;/a&gt; 과 가지며 읽기 바이트가 유효한 UTF-8이 아닌 경우 오류를 리턴합니다. I / O 오류가 발생하면 &lt;code&gt;buf&lt;/code&gt; 는 지금까지 읽은 모든 데이터가 유효한 UTF-8 인 경우 이미 읽은 일부 바이트를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="adea46a33368b546562d3adbbc93c24db07769c5" translate="yes" xml:space="preserve">
          <source>This function has the same safety guarantees as the &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;size_hint&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;size_hint&lt;/code&gt; &lt;/a&gt; 함수합니다.</target>
        </trans-unit>
        <trans-unit id="1b144c49949055dde44dc3050173804acf39c11f" translate="yes" xml:space="preserve">
          <source>This function internally uses the &lt;a href=&quot;#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt; method on this trait and hence will continuously write data so long as no errors are received. This also means that partial writes are not indicated in this signature.</source>
          <target state="translated">이 기능은 내부적으로 &lt;a href=&quot;#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt;으로이 특성에 write_all 메소드를하므로 오류가 수신되지 않는 한 지속적으로 데이터를 작성합니다. 또한이 서명에는 부분 쓰기가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1f9b7d260474b82b56786f2b96849de01b420191" translate="yes" xml:space="preserve">
          <source>This function is a lower-level call. It needs to be paired with the &lt;a href=&quot;#tymethod.consume&quot;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/a&gt; method to function properly. When calling this method, none of the contents will be &quot;read&quot; in the sense that later calling &lt;code&gt;read&lt;/code&gt; may return the same contents. As such, &lt;a href=&quot;#tymethod.consume&quot;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/a&gt; must be called with the number of bytes that are consumed from this buffer to ensure that the bytes are never returned twice.</source>
          <target state="translated">이 기능은 하위 수준 호출입니다. 올바르게 작동 하려면 &lt;a href=&quot;#tymethod.consume&quot;&gt; &lt;code&gt;consume&lt;/code&gt; r&lt;/a&gt; 메소드 와 쌍을 이루어야합니다 . 이 메소드를 호출 할 때, 나중에 호출을 &lt;code&gt;read&lt;/code&gt; 는 의미에서 어떤 내용도 &quot;읽지&quot;않습니다. 하면 동일한 내용을 반환 할 수 . 따라서&lt;a href=&quot;#tymethod.consume&quot;&gt; &lt;code&gt;consume&lt;/code&gt; &lt;/a&gt;바이트가 두 번 리턴되지 않도록이 버퍼에서 소비 된 바이트 수로 소비 를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="1da3425b653a05b924f0c013401f366dcdf5aa2c" translate="yes" xml:space="preserve">
          <source>This function is a lower-level call. It needs to be paired with the &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt; method to function properly. This function does not perform any I/O, it simply informs this object that some amount of its buffer, returned from &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;, has been consumed and should no longer be returned. As such, this function may do odd things if &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt; isn't called before calling it.</source>
          <target state="translated">이 기능은 하위 수준 호출입니다. 올바르게 작동 하려면 &lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt; 메소드 와 쌍을 이루어야 합니다. 이 함수는 I / O를 수행하지 않으며, &lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt; 에서 리턴 된 일부 버퍼 가 소비되어 더 이상 리턴되지 않아야 함을 이 오브젝트에 알립니다 . 따라서이 기능은 다음과 같은 경우 이상한 일을 할 수 있습니다&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt; 가 호출되기 전에 호출되지 않으면수 있습니다.</target>
        </trans-unit>
        <trans-unit id="415a263593c43f00d8f5a632e9e771b274ca8329" translate="yes" xml:space="preserve">
          <source>This function is a no-op, and does not even read from &lt;code&gt;dummy&lt;/code&gt;.</source>
          <target state="translated">이 기능은 작동하지 않으며 읽을 수 없습니다. &lt;code&gt;dummy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04e44698b394de41883f1cf69eb125285be21b0e" translate="yes" xml:space="preserve">
          <source>This function is also unsafe as the primitives currently returned have the contract that they are the sole owner of the file descriptor they are wrapping. Usage of this function could accidentally allow violating this contract which can cause memory unsafety in code that relies on it being true.</source>
          <target state="translated">이 함수는 현재 반환 된 프리미티브가 랩핑하는 파일 디스크립터의 유일한 소유자라는 계약을 가지고 있기 때문에 안전하지 않습니다. 이 기능을 사용하면 실수로이 계약을 위반할 수 있으며 이로 인해 코드에 의존하는 코드에서 메모리 안전 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2844b634a91113f81bf8561b54a56d96807ba95f" translate="yes" xml:space="preserve">
          <source>This function is different than &lt;a href=&quot;../../thread/fn.yield_now&quot;&gt;&lt;code&gt;std::thread::yield_now&lt;/code&gt;&lt;/a&gt; which directly yields to the system's scheduler, whereas &lt;code&gt;spin_loop_hint&lt;/code&gt; only signals the processor that it is entering a busy-wait spin-loop without yielding control to the system's scheduler.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;../../thread/fn.yield_now&quot;&gt; &lt;code&gt;std::thread::yield_now&lt;/code&gt; &lt;/a&gt; 시스템 스케줄러에 직접 양보하는 반면 &lt;code&gt;spin_loop_hint&lt;/code&gt; 는 시스템 스케줄러에 대한 제어를 제공하지 않고 프로세서에게 통화 중 대기 스핀 루프로 들어간다는 신호 만 보냅니다.</target>
        </trans-unit>
        <trans-unit id="98f804e178831934e2704907d9977fcb07b49649" translate="yes" xml:space="preserve">
          <source>This function is different than &lt;a href=&quot;../thread/fn.yield_now&quot;&gt;&lt;code&gt;std::thread::yield_now&lt;/code&gt;&lt;/a&gt; which directly yields to the system's scheduler, whereas &lt;code&gt;spin_loop&lt;/code&gt; only signals the processor that it is entering a busy-wait spin-loop without yielding control to the system's scheduler.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;../thread/fn.yield_now&quot;&gt; &lt;code&gt;std::thread::yield_now&lt;/code&gt; &lt;/a&gt; 시스템 스케줄러에 직접 양보하는 반면 &lt;code&gt;spin_loop&lt;/code&gt; 는 시스템 스케줄러에 대한 제어를 제공하지 않고 프로세서가 통화 중 대기 스핀 루프에 진입하고 있음을 프로세서에만 신호로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="467a74dd68a231eab8ded24aa170197676eb9466" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;alloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">이 기능은 추천되지 않게 될 것으로 예상된다 &lt;code&gt;alloc&lt;/code&gt; 의 방법 &lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt; IT 및 유형 &lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt; 안정 될 특징.</target>
        </trans-unit>
        <trans-unit id="6654c3116763d1cd428eebcad450e10896b561da" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;alloc_zeroed&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt; 특성이 안정 될 때 &lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt; 유형 의 &lt;code&gt;alloc_zeroed&lt;/code&gt; 메소드를 위해 더 이상 사용되지 않을 것으로 예상됩니다 .</target>
        </trans-unit>
        <trans-unit id="0400d9b530af2cdc75200e564b1d3df4717e5b0d" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;dealloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">이 기능은 추천되지 않게 될 것으로 예상된다 &lt;code&gt;dealloc&lt;/code&gt; 의 방법 &lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt; IT 및 유형 &lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt; 안정 될 특징.</target>
        </trans-unit>
        <trans-unit id="9c9fc6e063817eb54b121ff88e105f246093f7ff" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;realloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt; 특성이 안정 될 때 &lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt; 유형 의 &lt;code&gt;realloc&lt;/code&gt; 방법을 위해 사용되지 않을 것으로 예상됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b11361fb076bd1f28fd827ccd142c64af2b467e" translate="yes" xml:space="preserve">
          <source>This function is just a shim intended to be removed when the &lt;code&gt;unsized_locals&lt;/code&gt; feature gets stabilized.</source>
          <target state="translated">이 기능은 &lt;code&gt;unsized_locals&lt;/code&gt; 기능이 안정화 될 때 제거하기위한 심입니다 .</target>
        </trans-unit>
        <trans-unit id="177431c922c0d0a7a204582e17b86736e812c93b" translate="yes" xml:space="preserve">
          <source>This function is mainly useful for data that lives for the remainder of the program's life. Dropping the returned reference will cause a memory leak. If this is not acceptable, the reference should first be wrapped with the &lt;a href=&quot;struct.box#method.from_raw&quot;&gt;&lt;code&gt;Box::from_raw&lt;/code&gt;&lt;/a&gt; function producing a &lt;code&gt;Box&lt;/code&gt;. This &lt;code&gt;Box&lt;/code&gt; can then be dropped which will properly destroy &lt;code&gt;T&lt;/code&gt; and release the allocated memory.</source>
          <target state="translated">이 기능은 주로 프로그램 수명의 나머지 기간 동안 유지되는 데이터에 유용합니다. 반환 된 참조를 삭제하면 메모리 누수가 발생합니다. 이것이 허용되지 않으면, 참조는 먼저 &lt;a href=&quot;struct.box#method.from_raw&quot;&gt; &lt;code&gt;Box::from_raw&lt;/code&gt; &lt;/a&gt; 함수로 감싸서 &lt;code&gt;Box&lt;/code&gt; 를 생성해야합니다 . 그런 다음 이 &lt;code&gt;Box&lt;/code&gt; 를 떨어 뜨려서 &lt;code&gt;T&lt;/code&gt; 를 올바르게 파괴 하고 할당 된 메모리를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="59cb1896e3dcd115f785bf2479cb4580b1b9722d" translate="yes" xml:space="preserve">
          <source>This function is not magic; it is literally defined as</source>
          <target state="translated">이 기능은 마술이 아닙니다. 말 그대로 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="eeccb3e706f48a212133104a654e31843b7b7b92" translate="yes" xml:space="preserve">
          <source>This function is primarily used for optimization purposes.</source>
          <target state="translated">이 기능은 주로 최적화 목적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9a9053fe38824d2de0054cbaba771d8a6b62c54f" translate="yes" xml:space="preserve">
          <source>This function is semantically equivalent to &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt; except that it operates on raw pointers instead of references. When references are available, &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt; should be preferred.</source>
          <target state="translated">이 함수는 의미 적으로 &lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt; 동일하지만 참조 대신 원시 포인터에서 작동한다는 점이 다릅니다. 참조가 가능하면 &lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt; 를 선호해야합니다.</target>
        </trans-unit>
        <trans-unit id="7bc2ee69e11ff49cf8f44aa7be972ea956317ef2" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;struct.file#method.sync_all&quot;&gt;&lt;code&gt;sync_all&lt;/code&gt;&lt;/a&gt;, except that it may not synchronize file metadata to the filesystem.</source>
          <target state="translated">이 함수는 파일 메타 데이터를 파일 시스템과 동기화하지 않을 수 있다는 점을 제외하고 &lt;a href=&quot;struct.file#method.sync_all&quot;&gt; &lt;code&gt;sync_all&lt;/code&gt; &lt;/a&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="c9cbe9f2a91fb1ea199b620a6bb920ab34b40788" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;code&gt;wake&lt;/code&gt;, but must not consume the provided data pointer.</source>
          <target state="translated">이 함수는 &lt;code&gt;wake&lt;/code&gt; 와 유사 하지만 제공된 데이터 포인터를 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="b2a62d49d2d0f2fe0fb6a0071ccf5e43d3885dc1" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of &lt;a href=&quot;#method.to_bytes&quot;&gt;&lt;code&gt;to_bytes&lt;/code&gt;&lt;/a&gt; except that it will retain the trailing nul terminator instead of chopping it off.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#method.to_bytes&quot;&gt; &lt;code&gt;to_bytes&lt;/code&gt; 와&lt;/a&gt; 동일합니다. 단, 종료하지 않고 후미 널 종결자를 유지한다는 점이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="bbca71aedd00db40d26ceff11e63bc8c656a9f3e" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;a href=&quot;#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;#method.offset&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt; 의 역수입니다 .</target>
        </trans-unit>
        <trans-unit id="60af8a75ca29fd4b9524979a42c65b475dac17ca" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;a href=&quot;#method.offset-1&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;#method.offset-1&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt; 의 역수입니다 .</target>
        </trans-unit>
        <trans-unit id="f4e91aa4b5730d86849f9ad126912325901a438a" translate="yes" xml:space="preserve">
          <source>This function is unsafe as it does not verify the preconditions from &lt;a href=&quot;#method.from_size_align&quot;&gt;&lt;code&gt;Layout::from_size_align&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#method.from_size_align&quot;&gt; &lt;code&gt;Layout::from_size_align&lt;/code&gt; &lt;/a&gt; 에서 전제 조건을 확인하지 않으므로 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c0adf1d1fbca05371274b33d836dbb8ba3b0da96" translate="yes" xml:space="preserve">
          <source>This function is unsafe as there is no guarantee that the given pointer is valid for &lt;code&gt;len&lt;/code&gt; elements, nor whether the lifetime inferred is a suitable lifetime for the returned slice.</source>
          <target state="translated">주어진 포인터가 &lt;code&gt;len&lt;/code&gt; 요소에 유효 하거나 유추 된 수명이 반환 된 슬라이스에 적합한 수명인지 여부 가 보장되지 않으므로이 함수는 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ead8661237451bd45c2559207ff2f0d2dcefd5f7" translate="yes" xml:space="preserve">
          <source>This function is unsafe because improper use may lead to memory problems. For example, a double-free may occur if the function is called twice on the same raw pointer.</source>
          <target state="translated">이 기능은 잘못 사용하면 메모리 문제가 발생할 수 있으므로 안전하지 않습니다. 예를 들어, 동일한 원시 포인터에서 함수가 두 번 호출되면 double-free가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f0606f18b84a9d14096f66fc981df0b42c6d0bf" translate="yes" xml:space="preserve">
          <source>This function is unsafe because it does not check that the bytes passed to it are valid UTF-8. If this constraint is violated, it may cause memory unsafety issues with future users of the &lt;code&gt;String&lt;/code&gt;, as the rest of the standard library assumes that &lt;code&gt;String&lt;/code&gt;s are valid UTF-8.</source>
          <target state="translated">이 함수는 전달 된 바이트가 유효한 UTF-8인지 확인하지 않으므로 안전하지 않습니다. 이 제약 조건을 위반 하면 표준 라이브러리의 나머지 부분에서 &lt;code&gt;String&lt;/code&gt; 이 유효한 UTF-8 이라고 가정하므로 향후 &lt;code&gt;String&lt;/code&gt; 사용자에게 메모리 안전 문제가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36c2b1be1ffd545e988489f24fde5b599256ff94" translate="yes" xml:space="preserve">
          <source>This function is unsafe because it does not check that the bytes passed to it are valid UTF-8. If this constraint is violated, undefined behavior results, as the rest of Rust assumes that &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;s are valid UTF-8.</source>
          <target state="translated">이 함수는 전달 된 바이트가 유효한 UTF-8인지 확인하지 않으므로 안전하지 않습니다. 이 제약 조건을 위반하면 Rust의 나머지 부분은 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt; 이 유효한 UTF-8 이라고 가정하므로 정의되지 않은 동작 결과 가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="d26d0eb0451d8006697165ba21e7f4a6d2affd96" translate="yes" xml:space="preserve">
          <source>This function is unsafe because undefined behavior can result if the caller does not ensure all of the following:</source>
          <target state="translated">호출자가 다음을 모두 보장하지 않으면 정의되지 않은 동작이 발생할 수 있으므로이 기능은 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="42a04935e77664a45c1ca55344796f0f9622e5b5" translate="yes" xml:space="preserve">
          <source>This function is unsafe because undefined behavior can result if the caller does not ensure both:</source>
          <target state="translated">호출자가 두 가지 모두를 보장하지 않으면 정의되지 않은 동작이 발생할 수 있으므로이 함수는 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b81cd2be550f8d99eeb1700fa914c58868e2867c" translate="yes" xml:space="preserve">
          <source>This function is unsafe because undefined behavior can result if the caller does not ensure that &lt;code&gt;layout&lt;/code&gt; has non-zero size.</source>
          <target state="translated">호출자가 &lt;code&gt;layout&lt;/code&gt; 크기가 0 이 아닌지 확인하지 않으면 정의되지 않은 동작이 발생할 수 있으므로이 함수는 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="454ec0a5acadcaac0aa85170f5ed93cb46c13302" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons as &lt;a href=&quot;fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;, as well as not being able to provide a non-aliasing guarantee of the returned mutable slice. &lt;code&gt;data&lt;/code&gt; must be non-null and aligned even for zero-length slices as with &lt;a href=&quot;fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;. The total size of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;&lt;strong&gt;bytes&lt;/strong&gt; in memory.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt; 와 같은 이유로 안전하지 않으며 반환 된 가변 슬라이스의 앨리어싱 제거를 제공 할 수 없습니다. &lt;a href=&quot;fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt; 와 같이 길이가 0 인 슬라이스라도 &lt;code&gt;data&lt;/code&gt; 는 null이 아니고 정렬되어야합니다 . 슬라이스의 총 크기는 메모리의 &lt;code&gt;isize::MAX&lt;/code&gt; &lt;strong&gt;바이트&lt;/strong&gt; 보다 크지 않아야 합니다.</target>
        </trans-unit>
        <trans-unit id="eecdc0e72496ca31779009b14276f9c964f0fc63" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons that &lt;code&gt;alloc&lt;/code&gt; is.</source>
          <target state="translated">이 함수는 &lt;code&gt;alloc&lt;/code&gt; 과 같은 이유로 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f46ccfd28f902efc152ad3d0bc725d272999fa8f" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons that &lt;code&gt;alloc&lt;/code&gt; is. However the allocated block of memory is guaranteed to be initialized.</source>
          <target state="translated">이 기능은 다음과 같은 이유로 안전하지 않습니다 &lt;code&gt;alloc&lt;/code&gt; . 그러나 할당 된 메모리 블록은 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="c8935ef267a58bf14edf52661928291938f416d8" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons that &lt;code&gt;realloc&lt;/code&gt; is.</source>
          <target state="translated">이 기능은 &lt;code&gt;realloc&lt;/code&gt; 과 같은 이유로 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="010c54d09909e31d21b794c4e10275c4b255b332" translate="yes" xml:space="preserve">
          <source>This function is unsafe, as it may construct invalid &lt;code&gt;char&lt;/code&gt; values.</source>
          <target state="translated">이 함수는 유효하지 않은 &lt;code&gt;char&lt;/code&gt; 생성 할 수 있으므로 안전하지 않습니다. 값을 .</target>
        </trans-unit>
        <trans-unit id="71a1e970e4af15e1e28b626518e246fe2beaa9ff" translate="yes" xml:space="preserve">
          <source>This function is unsafe. You must guarantee that the data you return will not move so long as the argument value does not move (for example, because it is one of the fields of that value), and also that you do not move out of the argument you receive to the interior function.</source>
          <target state="translated">이 기능은 안전하지 않습니다. 인수 값이 이동하지 않는 한 (예를 들어, 해당 값의 필드 중 하나이므로) 반환하는 데이터가 이동하지 않으며 수신 한 인수에서 이동하지 않아야합니다. 내부 기능.</target>
        </trans-unit>
        <trans-unit id="39a3dbf4634bdba5a0505dade8771f96ac64c22f" translate="yes" xml:space="preserve">
          <source>This function is unsafe. You must guarantee that you will continue to treat the pointer &lt;code&gt;P&lt;/code&gt; as pinned after you call this function, so that the invariants on the &lt;code&gt;Pin&lt;/code&gt; type can be upheld. If the code using the resulting &lt;code&gt;P&lt;/code&gt; does not continue to maintain the pinning invariants that is a violation of the API contract and may lead to undefined behavior in later (safe) operations.</source>
          <target state="translated">이 기능은 안전하지 않습니다. 이 함수를 호출 한 후에도 포인터 &lt;code&gt;P&lt;/code&gt; 를 고정 된 상태로 계속 처리 하여 &lt;code&gt;Pin&lt;/code&gt; 유형 의 불변 값을 유지할 수 있도록해야합니다 . 결과를 사용하여 코드가 &lt;code&gt;P&lt;/code&gt; 를 가 API 계약을 위반하는 고정 고정 변수를 계속 유지하지 않고 이후 (안전한) 작업에서 정의되지 않은 동작을 유발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c0c82733953c468905548df35ad6822c84f6c7f" translate="yes" xml:space="preserve">
          <source>This function is unsafe. You must guarantee that you will never move the data out of the mutable reference you receive when you call this function, so that the invariants on the &lt;code&gt;Pin&lt;/code&gt; type can be upheld.</source>
          <target state="translated">이 기능은 안전하지 않습니다. 당신은 당신이에,이 함수를 호출 할 때받는 가변 기준에서 그래서 그 불변의 데이터를 이동하지 않을 것이라는 점을 보장해야한다 &lt;code&gt;Pin&lt;/code&gt; 유형 유지할 수 .</target>
        </trans-unit>
        <trans-unit id="94b97e70917e2ec0dff12c2bd6e40f05c9be7d64" translate="yes" xml:space="preserve">
          <source>This function is used to generically create I/O errors which do not originate from the OS itself. The &lt;code&gt;error&lt;/code&gt; argument is an arbitrary payload which will be contained in this &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">이 기능은 일반적으로 OS 자체에서 발생하지 않는 I / O 오류를 생성하는 데 사용됩니다. &lt;code&gt;error&lt;/code&gt; 인수는이에 포함됩니다 임의의 페이로드 &lt;code&gt;Error&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0bf849f4d8fe700d85a6260475a19ac69c25acf8" translate="yes" xml:space="preserve">
          <source>This function is very easy to write, thanks to &lt;code&gt;match&lt;/code&gt;, and will look like Listing 6-5.</source>
          <target state="translated">이 기능은 &lt;code&gt;match&lt;/code&gt; 하기 때문에 쓰기가 매우 쉽습니다. Listing 6-5와 같다.</target>
        </trans-unit>
        <trans-unit id="19c2bab36fa633ea4bf26b73afdd5bd0e16edc9a" translate="yes" xml:space="preserve">
          <source>This function is, in some sense, the opposite of &lt;a href=&quot;#method.zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능은 어떤 의미에서는 &lt;a href=&quot;#method.zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt; 의 반대입니다. .</target>
        </trans-unit>
        <trans-unit id="f705e261edec6d4798f68322cebb8b5768877e5d" translate="yes" xml:space="preserve">
          <source>This function may fail as the underlying system clock is susceptible to drift and updates (e.g., the system clock could go backwards), so this function may not always succeed. If successful, &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&quot;struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; is returned where the duration represents the amount of time elapsed from this time measurement to the current time.</source>
          <target state="translated">기본 시스템 클럭이 드리프트 및 업데이트되기 쉬운 (예 : 시스템 클럭이 뒤로 갈 수 있음)이 기능이 실패 할 수 있으므로이 기능이 항상 성공하지 못할 수 있습니다. 성공하면 &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(&lt;/code&gt; &lt;a href=&quot;struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt; &lt;code&gt;)&lt;/code&gt; 이 반환되며 여기서 지속 시간은이 시간 측정에서 현재 시간까지의 경과 시간을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a43d8a17e850a82c732c367bf89a844d3d96e4fe" translate="yes" xml:space="preserve">
          <source>This function may fail because measurements taken earlier are not guaranteed to always be before later measurements (due to anomalies such as the system clock being adjusted either forwards or backwards).</source>
          <target state="translated">이 기능은 이전에 측정 한 값이 나중에 측정하기 전에 항상 보장되는 것은 아니기 때문에 (시스템 클럭이 앞뒤로 조정되는 등의 이상으로 인해) 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5904fd4e8b5ae82205f779a00c5c8f588077b44a" translate="yes" xml:space="preserve">
          <source>This function may panic if &lt;code&gt;key&lt;/code&gt; is empty, contains an ASCII equals sign &lt;code&gt;'='&lt;/code&gt; or the NUL character &lt;code&gt;'\0'&lt;/code&gt;, or when the value contains the NUL character.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 가 비어 있거나 ASCII 등호 &lt;code&gt;'='&lt;/code&gt; 또는 NUL 문자 &lt;code&gt;'\0'&lt;/code&gt; 을 포함하거나 값에 NUL 문자가 포함되어 있으면이 기능이 패닉 상태 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a0dc67c9d122eb74decfcdabf36a2e9b439b108" translate="yes" xml:space="preserve">
          <source>This function may panic if it is called after the &lt;code&gt;Complete&lt;/code&gt; variant has been returned previously. While generator literals in the language are guaranteed to panic on resuming after &lt;code&gt;Complete&lt;/code&gt;, this is not guaranteed for all implementations of the &lt;code&gt;Generator&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Complete&lt;/code&gt; 변형이 이전에 반환 된 후이 함수가 호출되면이 함수가 패닉 상태 일 수 있습니다 . 언어의 생성기 리터럴 이 &lt;code&gt;Complete&lt;/code&gt; 후에 다시 시작하면 패닉이 보장되지만 &lt;code&gt;Generator&lt;/code&gt; 특성 의 모든 구현에 대해 이것이 보장되는 것은 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="22c11ebcd140410550c98ffdd0ada9fb8238ab32" translate="yes" xml:space="preserve">
          <source>This function may panic if the current time is earlier than this instant, which is something that can happen if an &lt;code&gt;Instant&lt;/code&gt; is produced synthetically.</source>
          <target state="translated">현재 시간은 경우에 일어날 수있는 일이다이 순간, 이전의 경우이 기능은 당황 할 수 &lt;code&gt;Instant&lt;/code&gt; 가 합성 적으로 생성 된 .</target>
        </trans-unit>
        <trans-unit id="8aed85a838914397cfff90a6f158e84b7b3b4829" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;../time/struct.instant#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">결과 시점을 기본 데이터 구조로 표시 할 수없는 경우이 함수가 패닉 상태가 될 수 있습니다. 패닉이없는 버전 은 &lt;a href=&quot;../time/struct.instant#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="366269740ca74a1798b4e975775caf12fd1ce852" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;../time/struct.systemtime#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">결과 시점을 기본 데이터 구조로 표시 할 수없는 경우이 함수가 패닉 상태가 될 수 있습니다. 패닉이없는 버전 은 &lt;a href=&quot;../time/struct.systemtime#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f02bfc3fdf0149848c26b5693e3c3c2e193c842" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;struct.instant#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">결과 시점을 기본 데이터 구조로 표시 할 수없는 경우이 함수가 패닉 상태가 될 수 있습니다. 패닉이없는 버전 은 &lt;a href=&quot;struct.instant#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="df93ffa2c06e7d9c793296fff9096b1f4a09746a" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;struct.systemtime#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">결과 시점을 기본 데이터 구조로 표시 할 수없는 경우이 함수가 패닉 상태가 될 수 있습니다. 패닉이없는 버전 은 &lt;a href=&quot;struct.systemtime#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f047ee1947a40935115c87e9ff5da84ba7c716fb" translate="yes" xml:space="preserve">
          <source>This function may panic on some platforms if a thread attempts to join itself or otherwise may create a deadlock with joining threads.</source>
          <target state="translated">스레드가 자체 결합을 시도하거나 스레드 결합으로 교착 상태를 발생시키는 경우 일부 플랫폼에서이 기능이 패닉 상태가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aa9c9fbe6e7d8e79dbcc09f82ff622cc49e7e8c" translate="yes" xml:space="preserve">
          <source>This function might panic if the iterator has more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="translated">이터레이터에 &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; 요소 이상이 있으면이 함수가 패닉 상태가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1fc6a40a80536289c51eca2e61adf3162489e6d" translate="yes" xml:space="preserve">
          <source>This function might panic if the iterator has more than &lt;code&gt;usize::MAX&lt;/code&gt; non-matching elements.</source>
          <target state="translated">반복자가 &lt;code&gt;usize::MAX&lt;/code&gt; 비 일치 요소를 초과하면이 함수가 패닉 상태가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e85b3c94c6e63ddd25298570364b3a6122b73135" translate="yes" xml:space="preserve">
          <source>This function might panic when called if the lock is already held by the current thread.</source>
          <target state="translated">현재 스레드가 잠금을 이미 보유한 경우이 함수는 호출 될 때 패닉 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3552c30ec404d25019fce8d0e95a821dc885077" translate="yes" xml:space="preserve">
          <source>This function panics if &lt;code&gt;T&lt;/code&gt; is a Zero-Sized Type (&quot;ZST&quot;).</source>
          <target state="translated">이 함수는 &lt;code&gt;T&lt;/code&gt; 인 경우 패닉 는 가 제로 크기 유형 ( &quot;ZST&quot;) 인 .</target>
        </trans-unit>
        <trans-unit id="101814bfeeecf8436008ed4880368756ae5c8d29" translate="yes" xml:space="preserve">
          <source>This function panics if &lt;code&gt;T&lt;/code&gt; is a zero-sized type.</source>
          <target state="translated">이 함수 는 &lt;code&gt;T&lt;/code&gt; 가 제로 크기 인 경우 패닉 상태 입니다.</target>
        </trans-unit>
        <trans-unit id="9eaa9b63e5ef7b899f75363fe8681ac3e3da2fd4" translate="yes" xml:space="preserve">
          <source>This function panics if &lt;code&gt;radix&lt;/code&gt; is not in the range from 2 to 36.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; 가 2에서 36 사이가 아닌 경우이 기능은 패닉 상태 입니다.</target>
        </trans-unit>
        <trans-unit id="f62c2a73ad1ab98a4ef40a980a80cd47e78cfc5e" translate="yes" xml:space="preserve">
          <source>This function reads as many bytes as necessary to completely fill the specified buffer &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">이 함수는 지정된 버퍼 &lt;code&gt;buf&lt;/code&gt; 를 완전히 채우는 데 필요한만큼의 바이트를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="32152f76d2e83d5c89836d9aa45ce33c14bc03d9" translate="yes" xml:space="preserve">
          <source>This function reads the value of &lt;code&gt;errno&lt;/code&gt; for the target platform (e.g. &lt;code&gt;GetLastError&lt;/code&gt; on Windows) and will return a corresponding instance of &lt;code&gt;Error&lt;/code&gt; for the error code.</source>
          <target state="translated">이 함수 는 대상 플랫폼에 대한 &lt;code&gt;errno&lt;/code&gt; 값 (예 : Windows의 &lt;code&gt;GetLastError&lt;/code&gt; )을 읽고 오류 코드에 해당하는 &lt;code&gt;Error&lt;/code&gt; 인스턴스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="05ed95f7312c1878141bc36d8d210b9fa11581c5" translate="yes" xml:space="preserve">
          <source>This function returns a &lt;a href=&quot;../borrow/enum.cow&quot;&gt;&lt;code&gt;Cow&amp;lt;'a, str&amp;gt;&lt;/code&gt;&lt;/a&gt;. If our byte slice is invalid UTF-8, then we need to insert the replacement characters, which will change the size of the string, and hence, require a &lt;code&gt;String&lt;/code&gt;. But if it's already valid UTF-8, we don't need a new allocation. This return type allows us to handle both cases.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;../borrow/enum.cow&quot;&gt; &lt;code&gt;Cow&amp;lt;'a, str&amp;gt;&lt;/code&gt; &lt;/a&gt; 반환합니다 . 우리 바이트 슬라이스가 무효 UTF-8의 경우, 우리는 필요, 따라서 문자열의 크기를 변경 한 것이다 교체 문자를 삽입해야 할 &lt;code&gt;String&lt;/code&gt; . 그러나 이미 유효한 UTF-8이면 새로운 할당이 필요하지 않습니다. 이 반환 유형을 사용하면 두 경우를 모두 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="6f72ba6fb91e1ce3e00f9d70494a4d758f1ff97b" translate="yes" xml:space="preserve">
          <source>This function returns a new instance of &lt;code&gt;Read&lt;/code&gt; which will read at most &lt;code&gt;limit&lt;/code&gt; bytes, after which it will always return EOF (&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;). Any read errors will not count towards the number of bytes read and future calls to &lt;a href=&quot;trait.read#tymethod.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; may succeed.</source>
          <target state="translated">이 함수는 최대 &lt;code&gt;limit&lt;/code&gt; 바이트를 읽은 후 항상 EOF ( &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; &lt;/a&gt; )를 반환하는 새로운 &lt;code&gt;Read&lt;/code&gt; 인스턴스를 반환합니다 . 읽기 오류는 읽은 바이트 수에 포함되지 않으며 향후 &lt;a href=&quot;trait.read#tymethod.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt; 호출 이 성공할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef0ad46bb886f62fbf2201ba9b9f859d8daf73a5" translate="yes" xml:space="preserve">
          <source>This function returns:</source>
          <target state="translated">이 함수는 다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e286b47aa27a1649f35422e9cb038c26279f95e3" translate="yes" xml:space="preserve">
          <source>This function runs the destructor of the contained value and thus the wrapped value now represents uninitialized data. It is up to the user of this method to ensure the uninitialized data is not actually used.</source>
          <target state="translated">이 함수는 포함 된 값의 소멸자를 실행하므로 랩핑 된 값은 이제 초기화되지 않은 데이터를 나타냅니다. 초기화되지 않은 데이터가 실제로 사용되지 않도록하는 것은이 방법의 사용자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="e07f846f13b5b07afd4d29501d5ea48bcae4f64b" translate="yes" xml:space="preserve">
          <source>This function semantically moves out the contained value without preventing further usage. It is up to the user of this method to ensure that this container is not used again.</source>
          <target state="translated">이 기능은 추가 사용을 막지 않고 포함 된 값을 의미 적으로 제거합니다. 이 컨테이너를 다시 사용하지 않는 것은이 방법의 사용자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="b73fe46d5d15372cef97957fc6bcb2aba3a35b19" translate="yes" xml:space="preserve">
          <source>This function specifies a new multicast group for this socket to join. The address must be a valid multicast address, and &lt;code&gt;interface&lt;/code&gt; is the address of the local interface with which the system should join the multicast group. If it's equal to &lt;code&gt;INADDR_ANY&lt;/code&gt; then an appropriate interface is chosen by the system.</source>
          <target state="translated">이 함수는이 소켓이 참가할 새로운 멀티 캐스트 그룹을 지정합니다. 주소는 유효한 멀티 캐스트 주소 여야하며 &lt;code&gt;interface&lt;/code&gt; 는 시스템이 멀티 캐스트 그룹에 가입해야하는 로컬 인터페이스의 주소입니다. &lt;code&gt;INADDR_ANY&lt;/code&gt; 와 같으면 시스템에서 적절한 인터페이스를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="1f12ea05478bb3baf501603f551862b3ebf72f88" translate="yes" xml:space="preserve">
          <source>This function specifies a new multicast group for this socket to join. The address must be a valid multicast address, and &lt;code&gt;interface&lt;/code&gt; is the index of the interface to join/leave (or 0 to indicate any interface).</source>
          <target state="translated">이 함수는이 소켓이 참가할 새로운 멀티 캐스트 그룹을 지정합니다. 주소는 유효한 멀티 캐스트 주소 및 &lt;code&gt;interface&lt;/code&gt; 여야합니다 는 결합 / 탈출 할 인터페이스의 색인입니다 (또는 인터페이스를 나타내려면 0).</target>
        </trans-unit>
        <trans-unit id="24119e41ff16fdb059a46c613efe17ad7fc57293" translate="yes" xml:space="preserve">
          <source>This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:</source>
          <target state="translated">이 함수는 문자열 슬라이스를 사용하여 지정된 관련 형식 지정 플래그를 적용한 후 내부 버퍼로 방출합니다. 일반 문자열로 인식되는 플래그는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5aebd3cecb06bef11683a2b627652c498c3d60b0" translate="yes" xml:space="preserve">
          <source>This function will &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; if it is used with more than one mutex over time. Each condition variable is dynamically bound to exactly one mutex to ensure defined behavior across platforms. If this functionality is not desired, then unsafe primitives in &lt;code&gt;sys&lt;/code&gt; are provided.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt; 할 것입니다 ! 시간이 지남에 둘 이상의 뮤텍스와 함께 사용되는 경우. 각 조건 변수는 플랫폼간에 정의 된 동작을 보장하기 위해 정확히 하나의 뮤텍스에 동적으로 바인딩됩니다. 이 기능을 원하지 않으면 &lt;code&gt;sys&lt;/code&gt; 의 안전하지 않은 프리미티브 가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="78327b333ccf6b689aaecb9ee26d119fa6c5777a" translate="yes" xml:space="preserve">
          <source>This function will &lt;code&gt;panic!()&lt;/code&gt; if the key currently has its destructor running, and it &lt;strong&gt;may&lt;/strong&gt; panic if the destructor has previously been run for this thread.</source>
          <target state="translated">이 기능은 것 &lt;code&gt;panic!()&lt;/code&gt; 키가 현재 소멸자 실행이있는 경우, 그것은 &lt;strong&gt;할 수있다&lt;/strong&gt; 이되고이 스레드에 대해 소멸자가 이전에 실행 된 경우 패닉 발생할 .</target>
        </trans-unit>
        <trans-unit id="de2e867f0f0c2461353251de2093fad37d9de75b" translate="yes" xml:space="preserve">
          <source>This function will &lt;em&gt;block&lt;/em&gt; until space in the internal buffer becomes available or a receiver is available to hand off the message to.</source>
          <target state="translated">이 기능은 내부 버퍼의 공간이 사용 가능해 지거나 수신자가 메시지를 전달할 수 있을 때까지 &lt;em&gt;차단&lt;/em&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="aa7ba2de98a6c309498a7c489e34ef4ae855d255" translate="yes" xml:space="preserve">
          <source>This function will &lt;strong&gt;consume ownership&lt;/strong&gt; of the handle given, passing responsibility for closing the handle to the returned object.</source>
          <target state="translated">이 함수는 주어진 핸들의 &lt;strong&gt;소유권&lt;/strong&gt; 을 &lt;strong&gt;소비&lt;/strong&gt; 하여 반환 된 객체에 핸들을 닫는 책임을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="b6de52c208f12c4efe8542e2cc11b06fa42d2cf9" translate="yes" xml:space="preserve">
          <source>This function will &lt;strong&gt;consume ownership&lt;/strong&gt; of the socket provided and it will be closed when the returned object goes out of scope.</source>
          <target state="translated">이 함수는 제공된 소켓의 &lt;strong&gt;소유권&lt;/strong&gt; 을 &lt;strong&gt;소비&lt;/strong&gt; 하며 반환 된 객체가 범위를 벗어날 때 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="34a9593fc439cb6bab67a9e273e42357e335b574" translate="yes" xml:space="preserve">
          <source>This function will &lt;strong&gt;overwrite&lt;/strong&gt; the contents of &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">이 기능은됩니다 &lt;strong&gt;덮어 쓰기&lt;/strong&gt; 의 내용 &lt;code&gt;to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b50d15cbddd54c77fb77c9639aae5bb9352e901e" translate="yes" xml:space="preserve">
          <source>This function will always block the current thread if there is no data available and it's possible for more data to be sent. Once a message is sent to the corresponding &lt;a href=&quot;struct.sender&quot;&gt;&lt;code&gt;Sender&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt;), then this receiver will wake up and return that message.</source>
          <target state="translated">사용 가능한 데이터가없고 더 많은 데이터를 전송할 수있는 경우이 함수는 항상 현재 스레드를 차단합니다. 해당 &lt;a href=&quot;struct.sender&quot;&gt; &lt;code&gt;Sender&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt; )에게 메시지가 전송되면 ) 이 수신자는 깨어나 해당 메시지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2f7bc7c7785b26db5d2ba1d43d57ec9e10153387" translate="yes" xml:space="preserve">
          <source>This function will atomically unlock the mutex specified (represented by &lt;code&gt;guard&lt;/code&gt;) and block the current thread. This means that any calls to &lt;a href=&quot;#method.notify_one&quot;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#method.notify_all&quot;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt; which happen logically after the mutex is unlocked are candidates to wake this thread up. When this function call returns, the lock specified will have been re-acquired.</source>
          <target state="translated">이 함수는 지정된 mutex를 원자 적으로 잠금 해제하고 ( &lt;code&gt;guard&lt;/code&gt; 로 표시 ) 현재 스레드를 차단합니다. 이것은 mutex가 잠금 해제 된 후 논리적으로 발생 하는 &lt;a href=&quot;#method.notify_one&quot;&gt; &lt;code&gt;notify_one&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#method.notify_all&quot;&gt; &lt;code&gt;notify_all&lt;/code&gt; 에&lt;/a&gt; 대한 호출 이이 스레드를 깨울 수있는 후보 임을 의미 합니다. 이 함수 호출이 리턴되면 지정된 잠금이 다시 획득됩니다.</target>
        </trans-unit>
        <trans-unit id="d633c453ad140c0449c1db8cbeeaa851bc2659b6" translate="yes" xml:space="preserve">
          <source>This function will attempt to ensure that all in-memory data reaches the filesystem before returning.</source>
          <target state="translated">이 함수는 반환하기 전에 모든 메모리 내 데이터가 파일 시스템에 도달하도록합니다.</target>
        </trans-unit>
        <trans-unit id="3cdc162bace3b7e0f3af0944a143fb84bab4d03d" translate="yes" xml:space="preserve">
          <source>This function will attempt to write the entire contents of &lt;code&gt;buf&lt;/code&gt;, but the entire write may not succeed, or the write may also generate an error. A call to &lt;code&gt;write&lt;/code&gt; represents &lt;em&gt;at most one&lt;/em&gt; attempt to write to any wrapped object.</source>
          <target state="translated">이 함수는 &lt;code&gt;buf&lt;/code&gt; 의 전체 내용을 쓰려고 시도 하지만 전체 쓰기가 성공하지 못하거나 쓰기도 오류를 생성 할 수 있습니다. &lt;code&gt;write&lt;/code&gt; 요청 &lt;em&gt;은 최대 하나를&lt;/em&gt; 나타냅니다 &lt;em&gt;.&lt;/em&gt; 랩핑 된 객체에 대한 쓰기 시도를 .</target>
        </trans-unit>
        <trans-unit id="d59143ff7e9860f113062c67363bd75c2092c35a" translate="yes" xml:space="preserve">
          <source>This function will be called when &lt;code&gt;wake&lt;/code&gt; is called on the &lt;a href=&quot;struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt;. It must wake up the task associated with this &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;wake&lt;/code&gt; 가 호출 될 때 호출됩니다 . 이 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 와 관련된 작업을 깨워 야합니다 .</target>
        </trans-unit>
        <trans-unit id="12cb59dc2a2a1b37303ef992097df532faaa8b94" translate="yes" xml:space="preserve">
          <source>This function will be called when &lt;code&gt;wake_by_ref&lt;/code&gt; is called on the &lt;a href=&quot;struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt;. It must wake up the task associated with this &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;wake_by_ref&lt;/code&gt; 가 호출 될 때 호출됩니다 . 이 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 와 관련된 작업을 깨워 야합니다 .</target>
        </trans-unit>
        <trans-unit id="76c72888278b0a8cb4941353a709e0ecd237c2c8" translate="yes" xml:space="preserve">
          <source>This function will be called when the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; gets cloned, e.g. when the &lt;a href=&quot;struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt; in which the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; is stored gets cloned.</source>
          <target state="translated">때이 함수가 호출됩니다 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; 가&lt;/a&gt; 복제됩니다, 예를 들면 때 &lt;a href=&quot;struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt; 하는 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 저장이 복제됩니다.</target>
        </trans-unit>
        <trans-unit id="83e27c1cac935244e1d8ce7e9b3bc5a49eb326cd" translate="yes" xml:space="preserve">
          <source>This function will block the calling thread until a new TCP connection is established. When established, the corresponding &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; and the remote peer's address will be returned.</source>
          <target state="translated">이 기능은 새로운 TCP 연결이 설정 될 때까지 호출 스레드를 차단합니다. 설정되면 해당 &lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt; 과 원격 피어의 주소가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b771e75bfd99083821bb9279c74d5a51cd594b6a" translate="yes" xml:space="preserve">
          <source>This function will block the calling thread until a new Unix connection is established. When established, the corresponding &lt;a href=&quot;struct.unixstream&quot;&gt;&lt;code&gt;UnixStream&lt;/code&gt;&lt;/a&gt; and the remote peer's address will be returned.</source>
          <target state="translated">이 함수는 새로운 유닉스 연결이 설정 될 때까지 호출 스레드를 차단합니다. 설정되면 해당 &lt;a href=&quot;struct.unixstream&quot;&gt; &lt;code&gt;UnixStream&lt;/code&gt; &lt;/a&gt; 과 원격 피어의 주소가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4d1cb142862a95e8531c0e6c5eeff4f29562add6" translate="yes" xml:space="preserve">
          <source>This function will block the local thread until it is available to acquire the mutex. Upon returning, the thread is the only thread with the lock held. An RAII guard is returned to allow scoped unlock of the lock. When the guard goes out of scope, the mutex will be unlocked.</source>
          <target state="translated">이 함수는 뮤텍스를 획득 할 수있을 때까지 로컬 스레드를 차단합니다. 돌아올 때 스레드는 잠금 장치가있는 유일한 스레드입니다. 범위의 잠금을 해제 할 수 있도록 RAII 보호대가 반환됩니다. 가드가 범위를 벗어나면 뮤텍스가 잠금 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="e63b5a3d38dde4813e2c02e7906910d9bbecad76" translate="yes" xml:space="preserve">
          <source>This function will cast the provided &lt;code&gt;bytes&lt;/code&gt; to a &lt;code&gt;CStr&lt;/code&gt; wrapper after ensuring that the byte slice is nul-terminated and does not contain any interior nul bytes.</source>
          <target state="translated">이 함수는 바이트 슬라이스가 널 종료되고 내부 널 바이트를 포함하지 않는지 확인한 후 제공된 &lt;code&gt;bytes&lt;/code&gt; 를 &lt;code&gt;CStr&lt;/code&gt; 랩퍼 로 캐스트합니다 .</target>
        </trans-unit>
        <trans-unit id="8c3891c10a9a0ae62223a6915ab48a717d1803e4" translate="yes" xml:space="preserve">
          <source>This function will cast the provided &lt;code&gt;bytes&lt;/code&gt; to a &lt;code&gt;CStr&lt;/code&gt; wrapper without performing any sanity checks. The provided slice &lt;strong&gt;must&lt;/strong&gt; be nul-terminated and not contain any interior nul bytes.</source>
          <target state="translated">이 함수는 온 전성 검사를 수행하지 않고 제공된 &lt;code&gt;bytes&lt;/code&gt; 를 &lt;code&gt;CStr&lt;/code&gt; 랩퍼 로 캐스트 합니다. 제공된 슬라이스 &lt;strong&gt;는&lt;/strong&gt; 널로 끝나야하며 내부 널 바이트를 포함하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="8f259ce0614bcf2d0063ac4400649f231860a760" translate="yes" xml:space="preserve">
          <source>This function will cause all pending and future I/O calls on the specified portions to immediately return with an appropriate value (see the documentation of &lt;a href=&quot;../../../net/enum.shutdown&quot;&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 기능을 사용하면 지정된 부분에서 보류중인 모든 향후 I / O 호출이 즉시 적절한 값으로 반환됩니다 ( &lt;a href=&quot;../../../net/enum.shutdown&quot;&gt; &lt;code&gt;Shutdown&lt;/code&gt; &lt;/a&gt; 문서 참조 ).</target>
        </trans-unit>
        <trans-unit id="f2081c3bcdd573e767785b3929fff378af8293c8" translate="yes" xml:space="preserve">
          <source>This function will cause all pending and future I/O on the specified portions to return immediately with an appropriate value (see the documentation of &lt;a href=&quot;enum.shutdown&quot;&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 기능을 사용하면 지정된 부분의 모든 보류 중 및 향후 I / O가 적절한 값으로 즉시 반환됩니다 ( &lt;a href=&quot;enum.shutdown&quot;&gt; &lt;code&gt;Shutdown&lt;/code&gt; &lt;/a&gt; 설명서 참조 ).</target>
        </trans-unit>
        <trans-unit id="e9782cf601eece8d5d886326b28d5030905f50d6" translate="yes" xml:space="preserve">
          <source>This function will consume the provided data and use the underlying bytes to construct a new string, ensuring that there is a trailing 0 byte. This trailing 0 byte will be appended by this function; the provided data should &lt;em&gt;not&lt;/em&gt; contain any 0 bytes in it.</source>
          <target state="translated">이 함수는 제공된 데이터를 소비하고 기본 바이트를 사용하여 새 문자열을 구성하여 후행 0 바이트가 있는지 확인합니다. 이 후행 0 바이트에이 함수가 추가됩니다. 제공된 데이터 에는 0 바이트가 포함 &lt;em&gt;되지 않아야&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4a81f58ae0af06c0e29ed9547bff428e9a075df5" translate="yes" xml:space="preserve">
          <source>This function will continuously read data from &lt;code&gt;reader&lt;/code&gt; and then write it into &lt;code&gt;writer&lt;/code&gt; in a streaming fashion until &lt;code&gt;reader&lt;/code&gt; returns EOF.</source>
          <target state="translated">이 기능은 &lt;code&gt;reader&lt;/code&gt; 에서 지속적으로 데이터를 읽은 다음 &lt;code&gt;reader&lt;/code&gt; 까지 스트리밍 방식 으로 &lt;code&gt;writer&lt;/code&gt; 에 기록합니다. 가 EOF를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="74b77ba5c4f9d07323cf0380138b2c4acac538aa" translate="yes" xml:space="preserve">
          <source>This function will correctly account for the flags provided as well as the minimum width. It will not take precision into account.</source>
          <target state="translated">이 함수는 제공되는 플래그와 최소 너비를 올바르게 설명합니다. 정밀도는 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0e2de984561c8e2a215768e0c15afc535bb75bf0" translate="yes" xml:space="preserve">
          <source>This function will create a file if it does not exist, and will entirely replace its contents if it does.</source>
          <target state="translated">이 함수는 파일이 존재하지 않으면 파일을 작성하고 파일이 있으면 그 내용을 완전히 대체합니다.</target>
        </trans-unit>
        <trans-unit id="f65976cf8345e044488976485c5a6e346af5a578" translate="yes" xml:space="preserve">
          <source>This function will create a file if it does not exist, and will truncate it if it does.</source>
          <target state="translated">이 함수는 파일이 존재하지 않으면 파일을 작성하고 파일이 있으면 잘립니다.</target>
        </trans-unit>
        <trans-unit id="0e1b8893ba63c7e2758784f05b5644780ac55d15" translate="yes" xml:space="preserve">
          <source>This function will ignore all instances of &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; and will otherwise return any errors returned by &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 의 모든 인스턴스를 무시하고 그렇지 않으면 &lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt; 가 반환 한 오류를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="326c8120454de566fb3a6866a530ebb7b6b992dc" translate="yes" xml:space="preserve">
          <source>This function will never panic, but it may return &lt;a href=&quot;../../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; if the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; has disconnected and is no longer able to receive information.</source>
          <target state="translated">이 함수는 패닉이 발생하지 않지만 &lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; 을&lt;/a&gt; 반환 하면 가 연결을 끊고 더 이상 정보를 수신 할 수없는 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fc6b983aea89da54a39cad92dbfed108559d536" translate="yes" xml:space="preserve">
          <source>This function will never return and will immediately terminate the current process. The exit code is passed through to the underlying OS and will be available for consumption by another process.</source>
          <target state="translated">이 함수는 절대 반환되지 않으며 현재 프로세스를 즉시 종료합니다. 종료 코드는 기본 OS로 전달되며 다른 프로세스에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4fd0f129a9f8ea495fd3f5d41ad244c1f805fd1" translate="yes" xml:space="preserve">
          <source>This function will not block the calling thread and will only check to see if the child process has exited or not. If the child has exited then on Unix the process ID is reaped. This function is guaranteed to repeatedly return a successful exit status so long as the child has already exited.</source>
          <target state="translated">이 함수는 호출 스레드를 차단하지 않으며 하위 프로세스가 종료되었는지 여부 만 확인합니다. 자식이 종료되면 Unix에서 프로세스 ID가 나타납니다. 이 함수는 자식이 이미 종료 된 한 성공적인 종료 상태를 반복해서 반환합니다.</target>
        </trans-unit>
        <trans-unit id="db8a9f6074ffbe2434b96b3349b436c824d317bf" translate="yes" xml:space="preserve">
          <source>This function will not return while other writers or other readers currently have access to the lock.</source>
          <target state="translated">다른 작성자 나 다른 독자가 현재 잠금에 액세스하는 동안에는이 기능이 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f40a0312ebfb2b0e54e13329e7ace227d51b5cf1" translate="yes" xml:space="preserve">
          <source>This function will not traverse symlinks if this entry points at a symlink.</source>
          <target state="translated">이 항목이 심볼릭 링크를 가리키는 경우이 기능은 심볼릭 링크를 통과하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c834f424a9053dbdf6234c9da264d70e8ba7b880" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;earlier&lt;/code&gt; is later than &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">경우 당황 것이 기능 &lt;code&gt;earlier&lt;/code&gt; 보다 이후 &lt;code&gt;self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="255f788a8373ceb0a89289a41ca323624e5b7999" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;k&lt;/code&gt; is greater than the length of the slice. Note that &lt;code&gt;k == self.len()&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; panic and is a no-op rotation.</source>
          <target state="translated">이 함수는 &lt;code&gt;k&lt;/code&gt; 가 슬라이스 길이보다 길면 패닉 상태가됩니다 . 참고 &lt;code&gt;k == self.len()&lt;/code&gt; 않는다 &lt;em&gt;하지&lt;/em&gt; 당황 무 조작 회전이다.</target>
        </trans-unit>
        <trans-unit id="95270b721e4d05b72ba071aee1067eda4042613d" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;mid&lt;/code&gt; is greater than the length of the slice. Note that &lt;code&gt;mid == self.len()&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; panic and is a no-op rotation.</source>
          <target state="translated">&lt;code&gt;mid&lt;/code&gt; 가 슬라이스 길이보다 길면 이 기능이 패닉 상태가됩니다 . 참고 &lt;code&gt;mid == self.len()&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 당황을하고, 무 조작 회전이다.</target>
        </trans-unit>
        <trans-unit id="46e96193daf65415936b126b06264ed8418f5b5e" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;rhs&lt;/code&gt; is 0.</source>
          <target state="translated">&lt;code&gt;rhs&lt;/code&gt; 가 0 이면이 함수는 패닉 상태가됩니다 .</target>
        </trans-unit>
        <trans-unit id="d72d270dceb6908b40e770de6a7cca4ee6d954fb" translate="yes" xml:space="preserve">
          <source>This function will panic if either range exceeds the end of the slice, or if the end of &lt;code&gt;src&lt;/code&gt; is before the start.</source>
          <target state="translated">이 함수는 범위 중 하나가 슬라이스의 끝을 초과하거나 &lt;code&gt;src&lt;/code&gt; 의 끝 이 시작하기 전에 패닉 상태가됩니다 .</target>
        </trans-unit>
        <trans-unit id="ffa5cde970751a9af3f3c95b9bc636f122bbdd4f" translate="yes" xml:space="preserve">
          <source>This function will panic if the capacity would overflow.</source>
          <target state="translated">용량이 오버플로되면이 기능이 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="b80c161450352b3f264fa270e71aafac41ce5a3b" translate="yes" xml:space="preserve">
          <source>This function will panic if the two slices have different lengths.</source>
          <target state="translated">이 기능은 두 슬라이스의 길이가 다른 경우 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="f9a04d3eaea11b5bf70c2b1e292fe13090c46ff0" translate="yes" xml:space="preserve">
          <source>This function will read bytes from the underlying stream until the delimiter or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">이 함수는 분리 문자 또는 EOF가 발견 될 때까지 기본 스트림에서 바이트를 읽습니다. 일단 발견되면, 분리 문자 (발견 된 경우)까지의 모든 바이트가 &lt;code&gt;buf&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="1dad503d6df9a455b05b17e9982a9b93c55eab53" translate="yes" xml:space="preserve">
          <source>This function will read bytes from the underlying stream until the newline delimiter (the 0xA byte) or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">이 함수는 개행 분리 문자 (0xA 바이트) 또는 EOF가 발견 될 때까지 기본 스트림에서 바이트를 읽습니다. 일단 발견되면, 분리 문자 (발견 된 경우)까지의 모든 바이트가 &lt;code&gt;buf&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="5509bdb3a49d4f3afca9be3c4e49fc0d8f43d023" translate="yes" xml:space="preserve">
          <source>This function will resume execution of the generator or start execution if it hasn't already. This call will return back into the generator's last suspension point, resuming execution from the latest &lt;code&gt;yield&lt;/code&gt;. The generator will continue executing until it either yields or returns, at which point this function will return.</source>
          <target state="translated">이 함수는 생성기의 실행을 재개하거나 아직 실행하지 않은 경우 실행을 시작합니다. 이 호출은 최신 &lt;code&gt;yield&lt;/code&gt; 에서 실행을 다시 시작하여 생성기의 마지막 중단 지점으로 다시 돌아갑니다 . 제너레이터는 생성 또는 리턴 될 때까지 계속 실행되며이 시점에서이 함수는 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="379fb0237a1103a33f0bdfcecfb22299eb043557" translate="yes" xml:space="preserve">
          <source>This function will return &lt;code&gt;Ok&lt;/code&gt; with the closure's result if the closure does not panic, and will return &lt;code&gt;Err(cause)&lt;/code&gt; if the closure panics. The &lt;code&gt;cause&lt;/code&gt; returned is the object with which panic was originally invoked.</source>
          <target state="translated">이 함수는 클로저가 패닉 상태가 아닌 경우 클로저 결과와 함께 &lt;code&gt;Ok&lt;/code&gt; 를 반환 하고 클로저 패닉이 &lt;code&gt;Err(cause)&lt;/code&gt; 반환합니다. 리턴 된 &lt;code&gt;cause&lt;/code&gt; 은 공황이 원래 호출 된 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="d89140f93781fe909c3c1a3e0e29b63c7e369dd7" translate="yes" xml:space="preserve">
          <source>This function will return an I/O error if the underlying reader was read, but returned an error.</source>
          <target state="translated">이 함수는 기본 판독기를 읽은 경우 I / O 오류를 반환하지만 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="53872c0f37fe2cee76394788d7b1f123503054e5" translate="yes" xml:space="preserve">
          <source>This function will return an error if &lt;code&gt;path&lt;/code&gt; does not already exist. Other errors may also be returned according to &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;code&gt;path&lt;/code&gt; 가 없으면 오류를 반환 합니다. &lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt; 에 따라 다른 오류가 반환 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="89c6971a5e8debeb3922f37bf3a67af3e6b7d708" translate="yes" xml:space="preserve">
          <source>This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will be returned when the lock is acquired.</source>
          <target state="translated">이 기능은 RwLock이 감염된 경우 오류를 반환합니다. RwLock은 독자적인 잠금을 유지하면서 라이터가 패닉 할 때마다 중독됩니다. 잠금을 획득하면 오류가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="dd9f12f8f4834cac09e7d8702d9c30c5d7a3ff26" translate="yes" xml:space="preserve">
          <source>This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired.</source>
          <target state="translated">이 기능은 RwLock이 감염된 경우 오류를 반환합니다. RwLock은 독자적인 잠금을 유지하면서 라이터가 패닉 할 때마다 중독됩니다. 잠금을 획득 한 경우에만 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="853f4abcb0adc2f4d392d459e3d4bcbfc1ffde02" translate="yes" xml:space="preserve">
          <source>This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. The failure will occur immediately after the lock has been acquired.</source>
          <target state="translated">이 기능은 RwLock이 감염된 경우 오류를 반환합니다. RwLock은 독자적인 잠금을 유지하면서 라이터가 패닉 할 때마다 중독됩니다. 잠금이 획득 된 직후 실패가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="08332f9ce278762f6fd52afefe704489d0688f37" translate="yes" xml:space="preserve">
          <source>This function will return an error if the file is not opened for writing.</source>
          <target state="translated">파일을 쓰기 위해 열지 않은 경우이 함수는 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b6cdf441223c3eb9f4334399883d69c73ecd1bf4" translate="yes" xml:space="preserve">
          <source>This function will return an error if the mutex being waited on is poisoned when this thread re-acquires the lock. For more information, see information about &lt;a href=&quot;struct.mutex#poisoning&quot;&gt;poisoning&lt;/a&gt; on the &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">이 스레드가 잠금을 다시 획득 할 때 대기중인 뮤텍스가 중독되면이 함수는 오류를 리턴합니다. 자세한 정보 는 &lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt; 유형의 &lt;a href=&quot;struct.mutex#poisoning&quot;&gt;중독&lt;/a&gt; 에 대한 정보를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="27a931587ff628dc51ea9585254e81a44150f056" translate="yes" xml:space="preserve">
          <source>This function will return an error if the supplied bytes contain an internal 0 byte. The &lt;a href=&quot;struct.nulerror&quot;&gt;&lt;code&gt;NulError&lt;/code&gt;&lt;/a&gt; returned will contain the bytes as well as the position of the nul byte.</source>
          <target state="translated">제공된 바이트에 내부 0 바이트가 포함 된 경우이 함수는 오류를 반환합니다. 반환 된 &lt;a href=&quot;struct.nulerror&quot;&gt; &lt;code&gt;NulError&lt;/code&gt; &lt;/a&gt; 는 바이트와 널 바이트의 위치를 ​​포함합니다.</target>
        </trans-unit>
        <trans-unit id="dbf84289e9d9e4926b496bd897b3083ec6312b71" translate="yes" xml:space="preserve">
          <source>This function will return an error if the user lacks permission change attributes on the underlying file. It may also return an error in other os-specific unspecified cases.</source>
          <target state="translated">이 함수는 사용자에게 기본 파일에 대한 권한 변경 속성이없는 경우 오류를 반환합니다. 또한 다른 OS 별 지정되지 않은 경우 오류를 반환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6020fefae74dafb3cbf7677aedde54d28946007d" translate="yes" xml:space="preserve">
          <source>This function will return an error immediately if any call to &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; returns an error. All instances of &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; are handled by this function and the underlying operation is retried.</source>
          <target state="translated">이 함수는 &lt;code&gt;read&lt;/code&gt; 또는 &lt;code&gt;write&lt;/code&gt; 호출이 오류를 반환하면 즉시 오류를 반환합니다. &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; 의 모든 인스턴스는 이 함수에 의해 처리되며 기본 작업이 재 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="789ed5daa8073ac179354d082eb69d8ff28cdee6" translate="yes" xml:space="preserve">
          <source>This function will return an error in the following situations, but is not limited to just these cases:</source>
          <target state="translated">이 함수는 다음 상황에서 오류를 반환하지만 이러한 경우에만 국한되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c2926688126ed0bb4700cfc41330adcd34075d1" translate="yes" xml:space="preserve">
          <source>This function will return an error under a number of different circumstances. Some of these error conditions are listed here, together with their &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt;. The mapping to &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt;s is not part of the compatibility contract of the function, especially the &lt;code&gt;Other&lt;/code&gt; kind might change to more specific kinds in the future.</source>
          <target state="translated">이 함수는 여러 가지 다른 상황에서 오류를 반환합니다. 이러한 오류 조건 중 일부는 &lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; &lt;/a&gt; 와 함께 여기에 나열됩니다 . &lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; 에&lt;/a&gt; 대한 매핑 은 함수의 호환성 계약의 일부가 아니며 특히 &lt;code&gt;Other&lt;/code&gt; 유형은 향후 더 구체적인 유형으로 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6a8bd83b584fa0f13cb1bcd08f12c3e0060dff9" translate="yes" xml:space="preserve">
          <source>This function will return an instance of &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; on error.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 시 오류 인스턴스를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6fae4edeb2bc2b830762c223977c0f9e31e7f71d" translate="yes" xml:space="preserve">
          <source>This function will return any I/O error reported while formatting.</source>
          <target state="translated">이 함수는 포맷 중에보고 된 모든 I / O 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="82d9dcac7df30707ace2de701aba5471ae21281c" translate="yes" xml:space="preserve">
          <source>This function will return the first error of non-&lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind that &lt;a href=&quot;#tymethod.write_at&quot;&gt;&lt;code&gt;write_at&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#tymethod.write_at&quot;&gt; &lt;code&gt;write_at&lt;/code&gt; 이&lt;/a&gt; 반환 하는 ErrorKind &lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 종류가 아닌 첫 번째 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e505864f4a28d60809a69e771d2b212f82c7410c" translate="yes" xml:space="preserve">
          <source>This function will return the first error of non-&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind that &lt;a href=&quot;#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 오류가 아닌 &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 종류 의 첫 번째 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="749cf49b6adfac5a93f23dcbbade901579686611" translate="yes" xml:space="preserve">
          <source>This function will still &lt;code&gt;panic!()&lt;/code&gt; if the key is uninitialized and the key's initializer panics.</source>
          <target state="translated">이 함수는 여전히 &lt;code&gt;panic!()&lt;/code&gt; 키가 초기화되지 않고 키의 이니셜 라이저가 패닉 인 경우 .</target>
        </trans-unit>
        <trans-unit id="aa2dcaf81660e38d976b3c073799f64e35c409b8" translate="yes" xml:space="preserve">
          <source>This function will traverse symbolic links to query information about the destination file.</source>
          <target state="translated">이 함수는 심볼릭 링크를 탐색하여 대상 파일에 대한 정보를 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="7a60f9a71c97e3c48d6ddbb61757095cfb7454e6" translate="yes" xml:space="preserve">
          <source>This function will traverse symbolic links to query information about the destination file. In case of broken symbolic links this will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 함수는 심볼릭 링크를 탐색하여 대상 파일에 대한 정보를 쿼리합니다. 심볼릭 링크가 끊어지면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2144ac018e241484dd88280c401709723264165b" translate="yes" xml:space="preserve">
          <source>This function will unsafely assume the pointer &lt;code&gt;src&lt;/code&gt; is valid for &lt;a href=&quot;fn.size_of&quot;&gt;&lt;code&gt;size_of::&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/a&gt; bytes by transmuting &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; and then reading the &lt;code&gt;&amp;amp;U&lt;/code&gt;. It will also unsafely create a copy of the contained value instead of moving out of &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">안전하지 포인터 가정합니다이 기능 &lt;code&gt;src&lt;/code&gt; 유효 &lt;a href=&quot;fn.size_of&quot;&gt; &lt;code&gt;size_of::&amp;lt;U&amp;gt;&lt;/code&gt; &lt;/a&gt; 변형의에 의해 바이트 &lt;code&gt;&amp;amp;T&lt;/code&gt; 에 &lt;code&gt;&amp;amp;U&lt;/code&gt; 다음 읽기 &lt;code&gt;&amp;amp;U&lt;/code&gt; . 또한 &lt;code&gt;src&lt;/code&gt; 밖으로 이동하는 대신 포함 된 값의 복사본을 안전하지 않게 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d5bb3f5f774e85331b120930c24070df4dbb7ef1" translate="yes" xml:space="preserve">
          <source>This function will wrap the provided &lt;code&gt;ptr&lt;/code&gt; with a &lt;code&gt;CStr&lt;/code&gt; wrapper, which allows inspection and interoperation of non-owned C strings. This method is unsafe for a number of reasons:</source>
          <target state="translated">이 함수는 제공된 &lt;code&gt;ptr&lt;/code&gt; 을 &lt;code&gt;CStr&lt;/code&gt; 로 래핑합니다. 랩퍼로 소유하지 않은 C 문자열의 검사 및 상호 운용이 가능합니다. 이 방법은 여러 가지 이유로 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eb6de22f90abba9d8b2e22f07508357043cd45b1" translate="yes" xml:space="preserve">
          <source>This function will yield errors whenever &lt;a href=&quot;#method.read_until&quot;&gt;&lt;code&gt;read_until&lt;/code&gt;&lt;/a&gt; would have also yielded an error.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#method.read_until&quot;&gt; &lt;code&gt;read_until&lt;/code&gt; &lt;/a&gt; 이 오류를 생성 할 때마다 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="761c3823fedfe961f64b60f5bbf8dadb1c015978" translate="yes" xml:space="preserve">
          <source>This function works on a best-effort basis, and may return false even when the &lt;code&gt;Waker&lt;/code&gt;s would awaken the same task. However, if this function returns &lt;code&gt;true&lt;/code&gt;, it is guaranteed that the &lt;code&gt;Waker&lt;/code&gt;s will awaken the same task.</source>
          <target state="translated">이 함수는 최선의 노력으로 작동하며 &lt;code&gt;Waker&lt;/code&gt; 가 동일한 작업을 깨워 도 거짓을 반환 할 수 있습니다 . 그러나이 함수가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 &lt;code&gt;Waker&lt;/code&gt; 가 동일한 작업을 깨울 것입니다.</target>
        </trans-unit>
        <trans-unit id="7ae0840523d6333733f66bb75a006add83e1ec36" translate="yes" xml:space="preserve">
          <source>This function works similar to &lt;code&gt;Iterator::filter()&lt;/code&gt;. You can imagine the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; being an iterator over one or zero elements. &lt;code&gt;filter()&lt;/code&gt; lets you decide which elements to keep.</source>
          <target state="translated">이 함수는 &lt;code&gt;Iterator::filter()&lt;/code&gt; 와 유사하게 작동합니다 . &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 가 하나 또는 0 개의 요소에 대한 반복 자라고 상상할 수 있습니다 . &lt;code&gt;filter()&lt;/code&gt; 사용하면 유지할 요소를 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="113d936138ddc7ae4f63a1a50d8105ac5a7add0d" translate="yes" xml:space="preserve">
          <source>This function&amp;rsquo;s signature is less cluttered: the function name, parameter list, and return type are close together, similar to a function without lots of trait bounds.</source>
          <target state="translated">이 함수의 서명은 덜 복잡합니다. 함수 이름, 매개 변수 목록 및 리턴 유형은 많은 특성 한계가없는 함수와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="59db1f1ce2d556d00a44653625d9c4310aa82a71" translate="yes" xml:space="preserve">
          <source>This function, &lt;code&gt;first_word&lt;/code&gt;, has a &lt;code&gt;&amp;amp;String&lt;/code&gt; as a parameter. We don&amp;rsquo;t want ownership, so this is fine. But what should we return? We don&amp;rsquo;t really have a way to talk about &lt;em&gt;part&lt;/em&gt; of a string. However, we could return the index of the end of the word. Let&amp;rsquo;s try that, as shown in Listing 4-7.</source>
          <target state="translated">이 함수 &lt;code&gt;first_word&lt;/code&gt; 는 매개 변수로 &lt;code&gt;&amp;amp;String&lt;/code&gt; 을 갖습니다 . 우리는 소유권을 원하지 않으므로 괜찮습니다. 그러나 우리는 무엇을 반환해야합니까? 우리는 실제로 문자열의 &lt;em&gt;일부&lt;/em&gt; 에 대해 이야기 할 수있는 방법이 없습니다 . 그러나 단어 끝의 색인을 반환 할 수 있습니다. Listing 4-7에 표시된 것처럼 시도해 보자.</target>
        </trans-unit>
        <trans-unit id="c0b65dd63b8d87baa6cb2781b4c83fe9b710f211" translate="yes" xml:space="preserve">
          <source>This function, unlike &lt;code&gt;spawn&lt;/code&gt;, will &lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;fork&lt;/code&gt; the process to create a new child. Like spawn, however, the default behavior for the stdio descriptors will be to inherited from the current process.</source>
          <target state="translated">이 기능을 달리 &lt;code&gt;spawn&lt;/code&gt; , 것입니다 &lt;strong&gt;하지 &lt;/strong&gt; &lt;code&gt;fork&lt;/code&gt; 새로운 아이를 만드는 과정을. 그러나 스폰처럼 stdio 디스크립터의 기본 동작은 현재 프로세스에서 상속됩니다.</target>
        </trans-unit>
        <trans-unit id="a7e07fc3dba284598652a13174e554562e5525f8" translate="yes" xml:space="preserve">
          <source>This handle encapsulates a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; instance, which defines the executor-specific wakeup behavior.</source>
          <target state="translated">이 핸들 은 실행 프로그램 별 웨이크 업 동작을 정의 하는 &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; 인스턴스를 캡슐화합니다 .</target>
        </trans-unit>
        <trans-unit id="d605d26d55dc2758f0b6de9e17a49a349f074534" translate="yes" xml:space="preserve">
          <source>This handle implements both the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.bufread&quot;&gt;&lt;code&gt;BufRead&lt;/code&gt;&lt;/a&gt; traits, and is constructed via the &lt;a href=&quot;struct.stdin#method.lock&quot;&gt;&lt;code&gt;Stdin::lock&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 핸들은 &lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;trait.bufread&quot;&gt; &lt;code&gt;BufRead&lt;/code&gt; &lt;/a&gt; 특성을 모두 구현 하며 &lt;a href=&quot;struct.stdin#method.lock&quot;&gt; &lt;code&gt;Stdin::lock&lt;/code&gt; &lt;/a&gt; 메서드 를 통해 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="f7258bae2e88ec63ae3dd338b65d64451a9b331b" translate="yes" xml:space="preserve">
          <source>This handle implements the &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt; trait, and is constructed via the &lt;a href=&quot;struct.stdout#method.lock&quot;&gt;&lt;code&gt;Stdout::lock&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 핸들은 &lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt; 특성을 구현하며 &lt;a href=&quot;struct.stdout#method.lock&quot;&gt; &lt;code&gt;Stdout::lock&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="d288bcdc54960c2a1210bed705519ebb1c8b509b" translate="yes" xml:space="preserve">
          <source>This handle implements the &lt;code&gt;Read&lt;/code&gt; trait, but beware that concurrent reads of &lt;code&gt;Stdin&lt;/code&gt; must be executed with care.</source>
          <target state="translated">이 핸들은 &lt;code&gt;Read&lt;/code&gt; 특성을 구현 하지만 &lt;code&gt;Stdin&lt;/code&gt; 의 동시 읽기를주의하십시오. 해서 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="01441d3c1d26b75fb46c2c721477af0652ee7979" translate="yes" xml:space="preserve">
          <source>This handle implements the &lt;code&gt;Write&lt;/code&gt; trait and is constructed via the &lt;a href=&quot;struct.stderr#method.lock&quot;&gt;&lt;code&gt;Stderr::lock&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 핸들은 &lt;code&gt;Write&lt;/code&gt; 특성을 구현하며 &lt;a href=&quot;struct.stderr#method.lock&quot;&gt; &lt;code&gt;Stderr::lock&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="2708f4eb8582ea4d70309feff62a1d2748e13184" translate="yes" xml:space="preserve">
          <source>This handle is not buffered.</source>
          <target state="translated">이 핸들은 버퍼링되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c48d5f61a1b6b181a01656b1e94697dc7bb9249" translate="yes" xml:space="preserve">
          <source>This happens because the pointer returned by &lt;code&gt;as_ptr&lt;/code&gt; does not carry any lifetime information and the &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt; is deallocated immediately after the &lt;code&gt;CString::new(&quot;Hello&quot;).expect(&quot;CString::new failed&quot;).as_ptr()&lt;/code&gt; expression is evaluated. To fix the problem, bind the &lt;code&gt;CString&lt;/code&gt; to a local variable:</source>
          <target state="translated">이는 &lt;code&gt;as_ptr&lt;/code&gt; 에서 반환 한 포인터에 수명 정보가없고 &lt;code&gt;CString::new(&quot;Hello&quot;).expect(&quot;CString::new failed&quot;).as_ptr()&lt;/code&gt; 식이 평가 된 직후 &lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt; 이 할당 해제 되기 때문에 발생 합니다 . 문제를 해결하려면 &lt;code&gt;CString&lt;/code&gt; 을 로컬 변수에 바인딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="6047b82331195849fba72da79674452a117df64d" translate="yes" xml:space="preserve">
          <source>This happens when a trait has a method like the following:</source>
          <target state="translated">이것은 특성에 다음과 같은 방법이있을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="863bad715d4f6d1bd75efa3884a2cc5b250ca381" translate="yes" xml:space="preserve">
          <source>This has the same behavior as the &lt;a href=&quot;../string/struct.string#method.push_str&quot;&gt;&lt;code&gt;push_str&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;../string/struct.string#method.push_str&quot;&gt; &lt;code&gt;push_str&lt;/code&gt; &lt;/a&gt; 메소드 와 동일한 동작을합니다 .</target>
        </trans-unit>
        <trans-unit id="6a3c452ab4ee63f33d895b0f991faaa23887feb8" translate="yes" xml:space="preserve">
          <source>This has the same behavior as the &lt;a href=&quot;struct.string#method.push_str&quot;&gt;&lt;code&gt;push_str&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.string#method.push_str&quot;&gt; &lt;code&gt;push_str&lt;/code&gt; &lt;/a&gt; 메소드 와 동일한 동작을합니다 .</target>
        </trans-unit>
        <trans-unit id="b58a8c2add590746e5048b4f132cbbc19047500f" translate="yes" xml:space="preserve">
          <source>This has the same effect as &lt;a href=&quot;union.maybeuninit#method.zeroed&quot;&gt;&lt;code&gt;MaybeUninit::zeroed().assume_init()&lt;/code&gt;&lt;/a&gt;. It is useful for FFI sometimes, but should generally be avoided.</source>
          <target state="translated">이것은 &lt;a href=&quot;union.maybeuninit#method.zeroed&quot;&gt; &lt;code&gt;MaybeUninit::zeroed().assume_init()&lt;/code&gt; &lt;/a&gt; 와 동일한 효과를 갖습니다 . 때때로 FFI에 유용하지만 일반적으로 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="c7eb4340faf9e85d2da20b4776ce2bebbe29c12a" translate="yes" xml:space="preserve">
          <source>This has the same lifetime as the original slice, and so the iterator can continue to be used while this exists.</source>
          <target state="translated">이것은 원래 슬라이스와 동일한 수명을 가지므로 이것이 존재하는 동안 반복기를 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65d35375dd8acb85bc9eba434584e8313fb0a245" translate="yes" xml:space="preserve">
          <source>This hasher is not guaranteed to be the same as all other &lt;code&gt;DefaultHasher&lt;/code&gt; instances, but is the same as all other &lt;code&gt;DefaultHasher&lt;/code&gt; instances created through &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">이 hasher는 다른 모든 &lt;code&gt;DefaultHasher&lt;/code&gt; 인스턴스와 동일하지는 않지만 &lt;code&gt;new&lt;/code&gt; 또는 &lt;code&gt;default&lt;/code&gt; 를 통해 작성된 다른 모든 &lt;code&gt;DefaultHasher&lt;/code&gt; 인스턴스 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="90feee4915436dfe2be982f4c15a9da7834c5004" translate="yes" xml:space="preserve">
          <source>This implementation is specialized for slice iterators, where it uses &lt;a href=&quot;../primitive.slice#method.copy_from_slice&quot;&gt;&lt;code&gt;copy_from_slice&lt;/code&gt;&lt;/a&gt; to append the entire slice at once.</source>
          <target state="translated">이 구현은 슬라이스 반복기에 특화되어 있으며 여기서 &lt;a href=&quot;../primitive.slice#method.copy_from_slice&quot;&gt; &lt;code&gt;copy_from_slice&lt;/code&gt; &lt;/a&gt; 를 사용 하여 전체 슬라이스를 한 번에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0b6b99c1c8632506c647afb83336adc1ee13b73f" translate="yes" xml:space="preserve">
          <source>This information corresponds to the &lt;code&gt;sin6_flowinfo&lt;/code&gt; field in C's &lt;code&gt;netinet/in.h&lt;/code&gt;, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553, Section 3.3&lt;/a&gt;. It combines information about the flow label and the traffic class as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2460&quot;&gt;IETF RFC 2460&lt;/a&gt;, respectively &lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-6&quot;&gt;Section 6&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-7&quot;&gt;Section 7&lt;/a&gt;.</source>
          <target state="translated">이 정보 는 &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553 섹션 3.3에&lt;/a&gt; 지정된 C의 &lt;code&gt;netinet/in.h&lt;/code&gt; 에 있는 &lt;code&gt;sin6_flowinfo&lt;/code&gt; 필드에 해당합니다 . &lt;a href=&quot;https://tools.ietf.org/html/rfc2460&quot;&gt;IETF RFC 2460&lt;/a&gt; , &lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-6&quot;&gt;섹션 6&lt;/a&gt; 및 &lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-7&quot;&gt;섹션 7에&lt;/a&gt; 지정된대로 플로우 레이블 및 트래픽 클래스에 대한 정보를 결합합니다 .</target>
        </trans-unit>
        <trans-unit id="3af31b70c11ef4a3b608a04beaf7ba9284e068c3" translate="yes" xml:space="preserve">
          <source>This information corresponds to the &lt;code&gt;sin6_scope_id&lt;/code&gt; field in C's &lt;code&gt;netinet/in.h&lt;/code&gt;, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553, Section 3.3&lt;/a&gt;.</source>
          <target state="translated">이 정보 는 &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553 섹션 3.3에&lt;/a&gt; 지정된 C의 &lt;code&gt;netinet/in.h&lt;/code&gt; 에 있는 &lt;code&gt;sin6_scope_id&lt;/code&gt; 필드에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="63ed31757d724807cc9238c95c5432cd39c9735a" translate="yes" xml:space="preserve">
          <source>This instance may reach &lt;code&gt;EOF&lt;/code&gt; after reading fewer bytes than indicated by this method if the underlying &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; instance reaches EOF.</source>
          <target state="translated">기본 &lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt; 인스턴스가 EOF에 도달하면 이 메소드가 나타내는 것보다 적은 바이트를 읽은 &lt;code&gt;EOF&lt;/code&gt; 인스턴스가 EOF에 도달 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1fa64cf4a4634521305dce783239fdfdeec13027" translate="yes" xml:space="preserve">
          <source>This is a &quot;helper marker trait&quot; used to provide impl blocks for the &lt;a href=&quot;trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt; trait, for more information see that documentation.</source>
          <target state="translated">&lt;a href=&quot;trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; 에&lt;/a&gt; impl 블록을 제공하는 데 사용되는 &quot;도우미 마커 특성&quot;입니다. 특성에 대한 입니다. 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dca2a0780f1a583478627dae521a3cd19fa18332" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.create&quot;&gt;&lt;code&gt;File::create&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.write#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt; with fewer imports.</source>
          <target state="translated">가져 오기 &lt;a href=&quot;../io/trait.write#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt; 가 적은 &lt;a href=&quot;struct.file#method.create&quot;&gt; &lt;code&gt;File::create&lt;/code&gt; &lt;/a&gt; 및 write_all 을 사용하기위한 편리한 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="187131cff0eb9e697908b49a26f702ec337c3799" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.read#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; with fewer imports and without an intermediate variable. It pre-allocates a buffer based on the file size when available, so it is generally faster than reading into a vector created with &lt;code&gt;Vec::new()&lt;/code&gt;.</source>
          <target state="translated">이는 가져 오기 &lt;a href=&quot;../io/trait.read#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt; 가 적고 중간 변수없이 &lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt; 및 read_to_end 를 사용하기위한 편리한 기능입니다 . 사용 가능한 경우 파일 크기를 기준으로 버퍼를 미리 할당하므로 일반적으로 &lt;code&gt;Vec::new()&lt;/code&gt; 만든 벡터를 읽는 것보다 빠릅니다 .</target>
        </trans-unit>
        <trans-unit id="9c7392177420bfa03e5c328d086366669dabd90c" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.read#method.read_to_string&quot;&gt;&lt;code&gt;read_to_string&lt;/code&gt;&lt;/a&gt; with fewer imports and without an intermediate variable. It pre-allocates a buffer based on the file size when available, so it is generally faster than reading into a string created with &lt;code&gt;String::new()&lt;/code&gt;.</source>
          <target state="translated">이것은 수입이 적고 중간 변수없이 &lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../io/trait.read#method.read_to_string&quot;&gt; &lt;code&gt;read_to_string&lt;/code&gt; &lt;/a&gt; 을 사용하기위한 편리한 기능입니다 . 사용 가능한 경우 파일 크기에 따라 버퍼를 미리 할당하므로 일반적으로 &lt;code&gt;String::new()&lt;/code&gt; 만든 문자열을 읽는 것보다 빠릅니다 .</target>
        </trans-unit>
        <trans-unit id="dac9be08ca6ab3c0d6956dc411e028285b59848d" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs::metadata&lt;/a&gt; and handle its Result. Then call &lt;a href=&quot;../fs/struct.metadata#method.is_dir&quot;&gt;fs::Metadata::is_dir&lt;/a&gt; if it was Ok.</source>
          <target state="translated">이것은 에러를 거짓으로 강제하는 편리한 함수입니다. 오류를 확인하려면 &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs :: metadata를&lt;/a&gt; 호출 하고 결과를 처리하십시오. 그런 다음 괜찮 으면 &lt;a href=&quot;../fs/struct.metadata#method.is_dir&quot;&gt;fs :: Metadata :: is_dir을&lt;/a&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="78d539aab76737f8cf396eefb6d1ce6f5b6f255b" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs::metadata&lt;/a&gt; and handle its Result. Then call &lt;a href=&quot;../fs/struct.metadata#method.is_file&quot;&gt;fs::Metadata::is_file&lt;/a&gt; if it was Ok.</source>
          <target state="translated">이것은 에러를 거짓으로 강제하는 편리한 함수입니다. 오류를 확인하려면 &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs :: metadata를&lt;/a&gt; 호출 하고 결과를 처리하십시오. 그런 다음 괜찮 으면 &lt;a href=&quot;../fs/struct.metadata#method.is_file&quot;&gt;fs :: Metadata :: is_file을&lt;/a&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="63bfc9edacf3bb27391de3d729c554b4c3c2df6a" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs::metadata&lt;/a&gt;.</source>
          <target state="translated">이것은 에러를 거짓으로 강제하는 편리한 함수입니다. 오류를 확인하려면 &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs :: metadata를&lt;/a&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="748753921bdcefd01924d5e43ae2dad4f042e3b3" translate="yes" xml:space="preserve">
          <source>This is a cost-free conversion.</source>
          <target state="translated">이 비용은 무료입니다.</target>
        </trans-unit>
        <trans-unit id="29fa7c971247c161eeccc64d10b730dfdf57cf6f" translate="yes" xml:space="preserve">
          <source>This is a curious macro which is used to safely pass around an opaque object describing the format string. This object does not require any heap allocations to create, and it only references information on the stack. Under the hood, all of the related macros are implemented in terms of this. First off, some example usage is:</source>
          <target state="translated">이것은 형식 문자열을 설명하는 불투명 한 객체를 안전하게 전달하는 데 사용되는 호기심 매크로입니다. 이 객체는 생성하는 데 힙 할당이 필요하지 않으며 스택의 정보 만 참조합니다. 후드 아래에서 모든 관련 매크로가 이와 관련하여 구현됩니다. 먼저 몇 가지 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a5cb34f6e2e869f23ba4b01f87c2789e85bd0de1" translate="yes" xml:space="preserve">
          <source>This is a generic method to go from &lt;code&gt;&amp;amp;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Pin&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt;. It is safe because, as part of the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;, the pointee cannot move after &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; got created. &quot;Malicious&quot; implementations of &lt;code&gt;Pointer::Deref&lt;/code&gt; are likewise ruled out by the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;&amp;amp;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;Pin&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; 로 이동하는 일반적인 방법 입니다. &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 의 계약의 일부로 &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 가 생성 된 후 포인트를 이동할 수 없기 때문에 안전 합니다. &lt;code&gt;Pointer::Deref&lt;/code&gt; 의 &quot;악의적 인&quot;구현 은 &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 의 계약에 의해 배제됩니다 .</target>
        </trans-unit>
        <trans-unit id="56c4f5951c7828ae5ee50cc814a919ce365cfc61" translate="yes" xml:space="preserve">
          <source>This is a generic method to go from &lt;code&gt;&amp;amp;mut Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt;. It is safe because, as part of the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;, the pointee cannot move after &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; got created. &quot;Malicious&quot; implementations of &lt;code&gt;Pointer::DerefMut&lt;/code&gt; are likewise ruled out by the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;&amp;amp;mut Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; 로 이동하는 일반적인 방법 입니다. &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 의 계약의 일부로 &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 가 생성 된 후 포인트를 이동할 수 없기 때문에 안전 합니다. &lt;code&gt;Pointer::DerefMut&lt;/code&gt; 의 &quot;악의적 인&quot;구현 은 &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 의 계약에 의해 배제됩니다 .</target>
        </trans-unit>
        <trans-unit id="89763ee5b7958c417ffa6362fe62836bd12504df" translate="yes" xml:space="preserve">
          <source>This is a great time to build a more substantial program to get used to reading and writing Rust code. So, in Chapter 2, we&amp;rsquo;ll build a guessing game program. If you would rather start by learning how common programming concepts work in Rust, see Chapter 3 and then return to Chapter 2.</source>
          <target state="translated">Rust 코드를 읽고 쓰는 데 익숙한보다 실질적인 프로그램을 구축하기에 좋은시기입니다. 따라서 2 장에서는 추측 게임 프로그램을 작성합니다. Rust에서 일반적인 프로그래밍 개념의 작동 방식을 배우는 것부터 시작하려면 3 장을 참조한 다음 2 장으로 돌아가십시오.</target>
        </trans-unit>
        <trans-unit id="88ca2eb8b4f8037d6f9bc35aac9a7c204a66255a" translate="yes" xml:space="preserve">
          <source>This is a larger example that implements &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra's algorithm&lt;/a&gt; to solve the &lt;a href=&quot;http://en.wikipedia.org/wiki/Shortest_path_problem&quot;&gt;shortest path problem&lt;/a&gt; on a &lt;a href=&quot;http://en.wikipedia.org/wiki/Directed_graph&quot;&gt;directed graph&lt;/a&gt;. It shows how to use &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt; with custom types.</source>
          <target state="translated">이것은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra의 알고리즘&lt;/a&gt; 을 구현 하여 유 &lt;a href=&quot;http://en.wikipedia.org/wiki/Directed_graph&quot;&gt;방향 그래프&lt;/a&gt; 의 &lt;a href=&quot;http://en.wikipedia.org/wiki/Shortest_path_problem&quot;&gt;최단 경로 문제&lt;/a&gt; 를 해결 하는 더 큰 예입니다 . &lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt; 을 사용자 정의 유형과 함께 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="26c511330b7bfd645fe1ae62ba92f808907b836b" translate="yes" xml:space="preserve">
          <source>This is a low-level operation that maintains none of the normal invariants of the type. Normally changing the length of a vector is done using one of the safe operations instead, such as &lt;a href=&quot;#method.truncate&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#method.resize&quot;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#method.extend-1&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 유형의 정규 변량을 유지하지 않는 저수준 연산입니다. 일반적으로 벡터 길이 변경은 &lt;a href=&quot;#method.truncate&quot;&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#method.resize&quot;&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#method.extend-1&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#method.clear&quot;&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/a&gt; 와 같은 안전한 작업 중 하나를 사용하여 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="e5a83358209b9d321dd626221b446c20e90a835f" translate="yes" xml:space="preserve">
          <source>This is a lower-level version of &lt;a href=&quot;enum.entry&quot;&gt;&lt;code&gt;Entry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 하위 버전의 &lt;a href=&quot;enum.entry&quot;&gt; &lt;code&gt;Entry&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d779513c1e09f65a072541be686df3371c86d19d" translate="yes" xml:space="preserve">
          <source>This is a minimal HTML5 document with a heading and some text. To return this from the server when a request is received, we&amp;rsquo;ll modify &lt;code&gt;handle_connection&lt;/code&gt; as shown in Listing 20-5 to read the HTML file, add it to the response as a body, and send it.</source>
          <target state="translated">제목과 텍스트가 포함 된 최소 HTML5 문서입니다. 요청이 수신 될 때 서버에서이를 반환하기 위해 Listing 20-5에 표시된 것처럼 &lt;code&gt;handle_connection&lt;/code&gt; 을 수정 하여 HTML 파일을 읽고 응답에 본문으로 추가 한 후 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3a7bcaac4b774ad822d1d354cccc21a6015fca6e" translate="yes" xml:space="preserve">
          <source>This is a parameter for the &quot;minimum width&quot; that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.</source>
          <target state="translated">형식이 사용하는 &quot;최소 너비&quot;에 대한 매개 변수입니다. 값의 문자열이이 많은 문자를 채우지 않으면 채우기 / 정렬로 지정된 패딩이 필요한 공간을 차지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b084ef158428b63f0e7eeac68dee8b3d095bdb3c" translate="yes" xml:space="preserve">
          <source>This is a situation in which interior mutability can help! We&amp;rsquo;ll store the &lt;code&gt;sent_messages&lt;/code&gt; within a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;, and then the &lt;code&gt;send&lt;/code&gt; message will be able to modify &lt;code&gt;sent_messages&lt;/code&gt; to store the messages we&amp;rsquo;ve seen. Listing 15-22 shows what that looks like:</source>
          <target state="translated">이것은 내부 변이가 도움이 될 수있는 상황입니다! 우리는 저장할 수 있습니다 &lt;code&gt;sent_messages&lt;/code&gt; 을 내 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; , 다음 &lt;code&gt;send&lt;/code&gt; 메시지는 수정할 수 있습니다 &lt;code&gt;sent_messages&lt;/code&gt; 을 우리가 본 적이 메시지를 저장합니다. Listing 15-22는 다음과 같은 모습을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e698a362ad50285269b0f450993154391ed3fb9c" translate="yes" xml:space="preserve">
          <source>This is a syntax error at the level of attribute declarations. The proper syntax for macro imports is the following:</source>
          <target state="translated">이것은 속성 선언 수준에서 구문 오류입니다. 매크로 가져 오기에 대한 올바른 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7207d1f263b95ee330100ad60d168c6bbd00e341" translate="yes" xml:space="preserve">
          <source>This is a very simple case, of course. In more complex cases, we may wish to have more than one reference to the value that was borrowed -- in those cases, something like the &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt; types may be useful.</source>
          <target state="translated">물론 이것은 매우 간단한 경우입니다. 좀 더 복잡한 경우에는 빌린 값에 대해 둘 이상의 참조를 원할 수 있습니다. 이러한 경우 &lt;code&gt;Rc&lt;/code&gt; 또는 &lt;code&gt;Arc&lt;/code&gt; 유형 과 같은 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="795aa426a1aadc3299f800d117f15424e179c91c" translate="yes" xml:space="preserve">
          <source>This is a wrapper around a kind of pointer which makes that pointer &quot;pin&quot; its value in place, preventing the value referenced by that pointer from being moved unless it implements &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 포인터는 일종의 포인터를 감싸는 래퍼로, 포인터가 해당 값을 &quot;핀&quot;하여 해당 포인터가 참조하는 값이 &lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; &lt;/a&gt; 을 구현하지 않는 한 이동되지 않도록 합니다 .</target>
        </trans-unit>
        <trans-unit id="40cc1dd050d81853f1d6473844a8f5105ed4ba71" translate="yes" xml:space="preserve">
          <source>This is also available via &lt;a href=&quot;../convert/trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../convert/trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; 을&lt;/a&gt; 통해서도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69c7de76e4d6cac4ead699615a01132090109223" translate="yes" xml:space="preserve">
          <source>This is an &lt;code&gt;O(n)&lt;/code&gt; operation as it requires copying every element in the buffer.</source>
          <target state="translated">이것은 버퍼의 모든 요소를 ​​복사해야하므로 &lt;code&gt;O(n)&lt;/code&gt; 연산입니다.</target>
        </trans-unit>
        <trans-unit id="7714852846e41026b7148ab604a67c761a44e811" translate="yes" xml:space="preserve">
          <source>This is an &lt;code&gt;O(n)&lt;/code&gt; operation, as it requires copying every element in the buffer.</source>
          <target state="translated">이는 버퍼의 모든 요소를 ​​복사해야하므로 &lt;code&gt;O(n)&lt;/code&gt; 연산입니다.</target>
        </trans-unit>
        <trans-unit id="e7773930b7607b5b74b44eb47accc2cfca7d33e4" translate="yes" xml:space="preserve">
          <source>This is an &lt;em&gt;unsized&lt;/em&gt; type, meaning that it must always be used behind a pointer like &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;. For an owned version of this type, see &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;em&gt;크기&lt;/em&gt; 가 조정되지 &lt;em&gt;않은&lt;/em&gt; 유형이므로 항상 &lt;code&gt;&amp;amp;&lt;/code&gt; 또는 &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt; 와 같은 포인터 뒤에 사용해야합니다 . 이 유형의 소유 버전은 &lt;a href=&quot;struct.pathbuf&quot;&gt; &lt;code&gt;PathBuf&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae5b715f0a76526280a5abae050e91bd520680ba" translate="yes" xml:space="preserve">
          <source>This is an absolute path starting with &lt;code&gt;std&lt;/code&gt;, the name of the standard library crate.</source>
          <target state="translated">이것은 표준 라이브러리 상자의 이름 인 &lt;code&gt;std&lt;/code&gt; 로 시작하는 절대 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="fb3851cbc0fb3af560d20b0226cbd7a0adc72483" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.canonicalize&quot;&gt;&lt;code&gt;fs::canonicalize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../fs/fn.canonicalize&quot;&gt; &lt;code&gt;fs::canonicalize&lt;/code&gt; &lt;/a&gt; 의 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="ccff757092656f4cd5645f893d07b3a2270144b9" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../fs/fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt; 의 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="fe9cf4a133a88b8bc470c4394f4eb8cf3b306e68" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.read_dir&quot;&gt;&lt;code&gt;fs::read_dir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../fs/fn.read_dir&quot;&gt; &lt;code&gt;fs::read_dir&lt;/code&gt; &lt;/a&gt; 의 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="f461dafd60906d9babd38850b381951321bafa0a" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.read_link&quot;&gt;&lt;code&gt;fs::read_link&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../fs/fn.read_link&quot;&gt; &lt;code&gt;fs::read_link&lt;/code&gt; &lt;/a&gt; 의 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="8a772f821d093dc45f53501fe5deb3218dd74356" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.symlink_metadata&quot;&gt;&lt;code&gt;fs::symlink_metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../fs/fn.symlink_metadata&quot;&gt; &lt;code&gt;fs::symlink_metadata&lt;/code&gt; &lt;/a&gt; 의 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="d34ac7564172d2ff8117857aff9df3320c42fae5" translate="yes" xml:space="preserve">
          <source>This is an associated function that needs to be used as &lt;code&gt;Ref::clone(...)&lt;/code&gt;. A &lt;code&gt;Clone&lt;/code&gt; implementation or a method would interfere with the widespread use of &lt;code&gt;r.borrow().clone()&lt;/code&gt; to clone the contents of a &lt;code&gt;RefCell&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;Ref::clone(...)&lt;/code&gt; 으로 사용해야하는 관련 함수입니다 . &lt;code&gt;Clone&lt;/code&gt; 구현이나 방법의 광범위한 사용을 방해 할 &lt;code&gt;r.borrow().clone()&lt;/code&gt; a의 내용을 복제 할 &lt;code&gt;RefCell&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f83e3e547dadb3f845f93bfeaf6231ee030e91c8" translate="yes" xml:space="preserve">
          <source>This is an associated function that needs to be used as &lt;code&gt;Ref::map(...)&lt;/code&gt;. A method would interfere with methods of the same name on the contents of a &lt;code&gt;RefCell&lt;/code&gt; used through &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;Ref::map(...)&lt;/code&gt; 으로 사용해야하는 관련 함수입니다 . 방법은 내용에 같은 이름의 방법 방해 &lt;code&gt;RefCell&lt;/code&gt; 통해 사용 &lt;code&gt;Deref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f18aedd0b02030c35b1012078adf973833d874e" translate="yes" xml:space="preserve">
          <source>This is an associated function that needs to be used as &lt;code&gt;Ref::map_split(...)&lt;/code&gt;. A method would interfere with methods of the same name on the contents of a &lt;code&gt;RefCell&lt;/code&gt; used through &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">이 기능은 다음과 같이 사용해야합니다. &lt;code&gt;Ref::map_split(...)&lt;/code&gt; . 방법은 내용에 같은 이름의 방법 방해 &lt;code&gt;RefCell&lt;/code&gt; 통해 사용 &lt;code&gt;Deref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="14ab5139ea01a60d2224bebc358fd7f5a09aee7b" translate="yes" xml:space="preserve">
          <source>This is an associated function that needs to be used as &lt;code&gt;RefMut::map(...)&lt;/code&gt;. A method would interfere with methods of the same name on the contents of a &lt;code&gt;RefCell&lt;/code&gt; used through &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">이 기능은 다음과 같이 사용해야합니다. &lt;code&gt;RefMut::map(...)&lt;/code&gt; . 방법은 내용에 같은 이름의 방법 방해 &lt;code&gt;RefCell&lt;/code&gt; 통해 사용 &lt;code&gt;Deref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="202f23e551bc61ba34f51a486b60ddfce30150ab" translate="yes" xml:space="preserve">
          <source>This is an associated function that needs to be used as &lt;code&gt;RefMut::map_split(...)&lt;/code&gt;. A method would interfere with methods of the same name on the contents of a &lt;code&gt;RefCell&lt;/code&gt; used through &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">이 기능은 다음과 같이 사용해야합니다. &lt;code&gt;RefMut::map_split(...)&lt;/code&gt; . 방법은 내용에 같은 이름의 방법 방해 &lt;code&gt;RefCell&lt;/code&gt; 통해 사용 &lt;code&gt;Deref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb3bd037be08bb82591900e7ddf468637a2b8c80" translate="yes" xml:space="preserve">
          <source>This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; from.</source>
          <target state="translated">초기화되지 않은 메모리를 초기화하거나 이전에 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; 메모리를 덮어 쓰는 데 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="856709efbf0ee049257184bc9760c0b3d18a43eb" translate="yes" xml:space="preserve">
          <source>This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been read with &lt;a href=&quot;fn.read_unaligned&quot;&gt;&lt;code&gt;read_unaligned&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">초기화되지 않은 메모리를 초기화하거나 이전에 읽은 메모리를 덮어 쓰는 데 적합합니다. &lt;a href=&quot;fn.read_unaligned&quot;&gt; &lt;code&gt;read_unaligned&lt;/code&gt; 로 적합&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9049d14f9f0cb6f47694e4f8dd6256baa32e595c" translate="yes" xml:space="preserve">
          <source>This is based on &lt;code&gt;malloc&lt;/code&gt; on Unix platforms and &lt;code&gt;HeapAlloc&lt;/code&gt; on Windows, plus related functions.</source>
          <target state="translated">이것은 기반으로합니다 &lt;code&gt;malloc&lt;/code&gt; Unix 플랫폼의 malloc 과 Windows의 &lt;code&gt;HeapAlloc&lt;/code&gt; 및 관련 기능을 합니다.</target>
        </trans-unit>
        <trans-unit id="d9e17b1971fcc8ebac923ca9bdcdbe86fd7ccc27" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;AddAssign&lt;/code&gt; is not automatically implemented, so you need to manually implement it for your type.</source>
          <target state="translated">이는 &lt;code&gt;AddAssign&lt;/code&gt; 이 자동으로 구현되지 않기 때문에 사용자 유형에 맞게 수동으로 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="5c0cfc8e697e9e04f2ac8988522860bd36ed371a" translate="yes" xml:space="preserve">
          <source>This is because cell types do operations that are not thread-safe. Due to this, they don't implement Sync and thus can't be placed in statics.</source>
          <target state="translated">셀 유형이 스레드로부터 안전하지 않은 작업을 수행하기 때문입니다. 이로 인해 동기화를 구현하지 않으므로 스태틱에 배치 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="43247ccf0e7189f6826d62c195b63176c827f652" translate="yes" xml:space="preserve">
          <source>This is because of a type mismatch between the associated type of some trait (e.g., &lt;code&gt;T::Bar&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;trait Quux { type Bar; }&lt;/code&gt;) and another type &lt;code&gt;U&lt;/code&gt; that is required to be equal to &lt;code&gt;T::Bar&lt;/code&gt;, but is not. Examples follow.</source>
          <target state="translated">이는 일부 특성의 연관된 유형 (예 : &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;trait Quux { type Bar; }&lt;/code&gt; 구현 하는 T &lt;code&gt;T::Bar&lt;/code&gt; )과 &lt;code&gt;T::Bar&lt;/code&gt; 동일해야하는 다른 유형 &lt;code&gt;U&lt;/code&gt; 간의 유형이 일치하지 않기 때문입니다 . 와 아니다. 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a641717e833808f9f0bc4f5f362a54b6a1faff5b" translate="yes" xml:space="preserve">
          <source>This is borrow-generalized version of &lt;code&gt;Clone::clone_from&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;Clone::clone_from&lt;/code&gt; 의 차용 일반화 버전입니다. .</target>
        </trans-unit>
        <trans-unit id="834216017331c86ca1e125eb990783c9079a99f6" translate="yes" xml:space="preserve">
          <source>This is called the &amp;ldquo;train model&amp;rdquo; because every six weeks, a release &amp;ldquo;leaves the station&amp;rdquo;, but still has to take a journey through the beta channel before it arrives as a stable release.</source>
          <target state="translated">6 주마다 릴리스가 &quot;스테이션을 떠나지 만&quot;베타 채널이 안정적인 릴리스로 도착하기 전에 여행해야하기 때문에 이것을 &quot;기차 모델&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="a9e339d64ba30c9973394f6282049233c7be4f71" translate="yes" xml:space="preserve">
          <source>This is catastrophic, it means we can first pin the content of the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; (using &lt;code&gt;RefCell::get_pin_mut&lt;/code&gt;) and then move that content using the mutable reference we got later.</source>
          <target state="translated">이것은 치명적이므로 먼저 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 의 내용을 고정하고 ( &lt;code&gt;RefCell::get_pin_mut&lt;/code&gt; ) 나중에 얻은 가변 참조를 사용하여 해당 내용을 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67913f9219472099fcca84773f5f227006ffbcce" translate="yes" xml:space="preserve">
          <source>This is commonly used to adapt a single value generator into a &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; of other kinds of iteration. Maybe you have an iterator that covers almost everything, but you need an extra special case. Maybe you have a function which works on iterators, but you only need to process one value.</source>
          <target state="translated">이것은 일반적으로 단일 값 생성기를 다른 종류의 반복 &lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;chain&lt;/code&gt; &lt;/a&gt; 에 적용하는 데 사용됩니다 . 어쩌면 거의 모든 것을 다루는 반복자가 있지만 특별한 경우가 필요합니다. 반복자에서 작동하는 함수가 있지만 하나의 값만 처리하면됩니다.</target>
        </trans-unit>
        <trans-unit id="764e0240ad7ec9a9585ed8305ceb8e8099f2723d" translate="yes" xml:space="preserve">
          <source>This is commonly used to adapt a single value into a &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; of other kinds of iteration. Maybe you have an iterator that covers almost everything, but you need an extra special case. Maybe you have a function which works on iterators, but you only need to process one value.</source>
          <target state="translated">이것은 일반적으로 단일 값을 &lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;chain&lt;/code&gt; &lt;/a&gt; 에 적용하는 데 사용됩니다 다른 종류의 반복 에 . 어쩌면 거의 모든 것을 다루는 반복자가 있지만 특별한 경우가 필요합니다. 반복자에서 작동하는 함수가 있지만 하나의 값만 처리하면됩니다.</target>
        </trans-unit>
        <trans-unit id="f239b530d28c30ec1070f1658b16620a287e3251" translate="yes" xml:space="preserve">
          <source>This is correct (explicit):</source>
          <target state="translated">이것은 정확합니다 (명시 적).</target>
        </trans-unit>
        <trans-unit id="7d6342cfa6f9200a801992dcf925b5cee5be4a5b" translate="yes" xml:space="preserve">
          <source>This is currently identical to &lt;code&gt;transmute::&amp;lt;f32, u32&amp;gt;(self)&lt;/code&gt; on all platforms.</source>
          <target state="translated">이것은 현재 모든 플랫폼 에서 &lt;code&gt;transmute::&amp;lt;f32, u32&amp;gt;(self)&lt;/code&gt; 와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a48f92d085d1c5423be432a065e6504acd5a4a36" translate="yes" xml:space="preserve">
          <source>This is currently identical to &lt;code&gt;transmute::&amp;lt;f64, u64&amp;gt;(self)&lt;/code&gt; on all platforms.</source>
          <target state="translated">이것은 현재 모든 플랫폼 에서 &lt;code&gt;transmute::&amp;lt;f64, u64&amp;gt;(self)&lt;/code&gt; 와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="918c5990ef12f35794f26c0b83e42a5d2ef0c694" translate="yes" xml:space="preserve">
          <source>This is currently identical to &lt;code&gt;transmute::&amp;lt;u32, f32&amp;gt;(v)&lt;/code&gt; on all platforms. It turns out this is incredibly portable, for two reasons:</source>
          <target state="translated">이것은 현재 모든 플랫폼 에서 &lt;code&gt;transmute::&amp;lt;u32, f32&amp;gt;(v)&lt;/code&gt; 와 동일합니다. 이것은 두 가지 이유로 믿을 수 없을만큼 이식성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="00309d71e504692e129d008c7a1eff96961c44fc" translate="yes" xml:space="preserve">
          <source>This is currently identical to &lt;code&gt;transmute::&amp;lt;u64, f64&amp;gt;(v)&lt;/code&gt; on all platforms. It turns out this is incredibly portable, for two reasons:</source>
          <target state="translated">이것은 현재 모든 플랫폼 에서 &lt;code&gt;transmute::&amp;lt;u64, f64&amp;gt;(v)&lt;/code&gt; 와 동일합니다. 이것은 두 가지 이유로 믿을 수 없을만큼 이식성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="de7179edea4813efbd79fdfefd23f0fcc07d0700" translate="yes" xml:space="preserve">
          <source>This is defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc5737&quot;&gt;IETF RFC 5737&lt;/a&gt;:</source>
          <target state="translated">이것은 &lt;a href=&quot;https://tools.ietf.org/html/rfc5737&quot;&gt;IETF RFC 5737에&lt;/a&gt; 정의되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59a6ad6e6ae513088e0c1bb8ed9888b474a9dbba" translate="yes" xml:space="preserve">
          <source>This is designed to be used in conjunction with &lt;a href=&quot;fn.catch_unwind&quot;&gt;&lt;code&gt;catch_unwind&lt;/code&gt;&lt;/a&gt; to, for example, carry a panic across a layer of C code.</source>
          <target state="translated">예를 들어 C 코드 계층에 패닉을 전달하기 위해 &lt;a href=&quot;fn.catch_unwind&quot;&gt; &lt;code&gt;catch_unwind&lt;/code&gt; &lt;/a&gt; 와 함께 사용하도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="5fdeff8202418046160b5ede029f4ae17e4cb706" translate="yes" xml:space="preserve">
          <source>This is different than the &lt;code&gt;C&lt;/code&gt; representation because a struct with the &lt;code&gt;C&lt;/code&gt; representation will always have the ABI of a &lt;code&gt;C&lt;/code&gt;&lt;code&gt;struct&lt;/code&gt; while, for example, a struct with the &lt;code&gt;transparent&lt;/code&gt; representation with a primitive field will have the ABI of the primitive field.</source>
          <target state="translated">이것은 다르다 &lt;code&gt;C&lt;/code&gt; 의 가진 구조체 때문에 표현 &lt;code&gt;C&lt;/code&gt; 의 표현은 항상의 ABI있을 것이다 &lt;code&gt;C&lt;/code&gt; 의 &lt;code&gt;struct&lt;/code&gt; , 예를 들면, 함께 구조체 중에 &lt;code&gt;transparent&lt;/code&gt; 원시적 필드 표현 프리미티브 필드 ABI있을 것이다.</target>
        </trans-unit>
        <trans-unit id="f40a48629593c80076df828df6524a31bbb5832c" translate="yes" xml:space="preserve">
          <source>This is done as if by the Euclidean division algorithm -- given &lt;code&gt;r = self.rem_euclid(rhs)&lt;/code&gt;, &lt;code&gt;self = rhs * self.div_euclid(rhs) + r&lt;/code&gt;, and &lt;code&gt;0 &amp;lt;= r &amp;lt; abs(rhs)&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;r = self.rem_euclid(rhs)&lt;/code&gt; , &lt;code&gt;self = rhs * self.div_euclid(rhs) + r&lt;/code&gt; 및 &lt;code&gt;0 &amp;lt;= r &amp;lt; abs(rhs)&lt;/code&gt; 주어진 유클리드 분할 알고리즘에 의해 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="261341fb7dbde0853cc1e229f30dada63a712ac0" translate="yes" xml:space="preserve">
          <source>This is enforced by the Rust compiler. However, there are situations where this rule is not flexible enough. Sometimes it is required to have multiple references to an object and yet mutate it.</source>
          <target state="translated">이것은 Rust 컴파일러에 의해 시행됩니다. 그러나이 규칙이 충분히 유연하지 않은 상황이 있습니다. 때로는 객체에 대한 여러 참조가 있어야하지만 여전히 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="1a48a3285621637ef35ee331d4de4979ad866379" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;self.seek(SeekFrom::Current(0))&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;self.seek(SeekFrom::Current(0))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea3c08c47d3f2c239e1b0612d35fd093489ce76f" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a97a7d1bcb8cd7cc77582edff43cedf5b5f9e7ec" translate="yes" xml:space="preserve">
          <source>This is equivalent to adding the result of &lt;code&gt;padding_needed_for&lt;/code&gt; to the layout's current size.</source>
          <target state="translated">이는 &lt;code&gt;padding_needed_for&lt;/code&gt; 의 결과를 레이아웃의 현재 크기 에 추가하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f6cc1d085b275d07a515f10b6c1293ccce68e246" translate="yes" xml:space="preserve">
          <source>This is equivalent to sending a SIGKILL on Unix platforms.</source>
          <target state="translated">이것은 Unix 플랫폼에서 SIGKILL을 보내는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dbb80b753a6a285f62ca3be46d0ca7ebb71f7211" translate="yes" xml:space="preserve">
          <source>This is equivalent to using a &lt;a href=&quot;../../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop on the iterator, although &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; are not possible from a closure. It's generally more idiomatic to use a &lt;code&gt;for&lt;/code&gt; loop, but &lt;code&gt;for_each&lt;/code&gt; may be more legible when processing items at the end of longer iterator chains. In some cases &lt;code&gt;for_each&lt;/code&gt; may also be faster than a loop, because it will use internal iteration on adaptors like &lt;code&gt;Chain&lt;/code&gt;.</source>
          <target state="translated">이것은을 사용하는 것과 같습니다 &lt;a href=&quot;../../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; 있지만, 반복자에 루프 &lt;code&gt;break&lt;/code&gt; 과 &lt;code&gt;continue&lt;/code&gt; 폐쇄에서 가능하지 않습니다. 일반적으로 &lt;code&gt;for&lt;/code&gt; 루프 를 사용하는 것이 관용적 이지만 &lt;code&gt;for_each&lt;/code&gt; 는 더 긴 반복자 체인 끝에서 항목을 처리 할 때 더 읽기 쉽습니다 . 경우에 따라 &lt;code&gt;for_each&lt;/code&gt; 는 &lt;code&gt;Chain&lt;/code&gt; 과 같은 어댑터에서 내부 반복을 사용하기 때문에 루프보다 빠를 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d5fc7a87669eb5a575d2a14569feb14339d998c" translate="yes" xml:space="preserve">
          <source>This is essentially the reversed version of &lt;a href=&quot;trait.iterator#method.nth&quot;&gt;&lt;code&gt;nth&lt;/code&gt;&lt;/a&gt;. Although like most indexing operations, the count starts from zero, so &lt;code&gt;nth_back(0)&lt;/code&gt; returns the first value fro the end, &lt;code&gt;nth_back(1)&lt;/code&gt; the second, and so on.</source>
          <target state="translated">이것은 본질적으로 &lt;a href=&quot;trait.iterator#method.nth&quot;&gt; &lt;code&gt;nth&lt;/code&gt; &lt;/a&gt; 의 반대 버전입니다 . 대부분의 인덱싱 작업과 마찬가지로 카운트는 0부터 시작하므로 &lt;code&gt;nth_back(0)&lt;/code&gt; 은 끝의 첫 번째 값, &lt;code&gt;nth_back(1)&lt;/code&gt; 의 두 번째 값 등을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="da357ed847b3be924604524d54de90650dc840c5" translate="yes" xml:space="preserve">
          <source>This is exactly the kind of guarantee that the intrusive linked list from the previous section needs to function correctly.</source>
          <target state="translated">이것은 이전 섹션의 침입 링크 목록이 올바르게 작동해야한다는 보장입니다.</target>
        </trans-unit>
        <trans-unit id="bb45c58beba541079b29f983c2bd8c56db26b71e" translate="yes" xml:space="preserve">
          <source>This is exploited by the compiler for various optimizations, such as eliding run-time checks and optimizing &lt;code&gt;enum&lt;/code&gt; layout.</source>
          <target state="translated">컴파일러는 런타임 검사 생략 및 &lt;code&gt;enum&lt;/code&gt; 레이아웃 최적화와 같은 다양한 최적화를 위해 컴파일러를 이용 합니다.</target>
        </trans-unit>
        <trans-unit id="2800cba431c3f0317ff7290328c22feda7e8a245" translate="yes" xml:space="preserve">
          <source>This is fixed by declaring the impl block like this:</source>
          <target state="translated">이것은 다음과 같이 impl 블록을 선언하여 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="7800b5b60ece10a2bb3977b34790a457f9ba1d9b" translate="yes" xml:space="preserve">
          <source>This is generally created by methods like &lt;a href=&quot;struct.mutex#method.lock&quot;&gt;&lt;code&gt;Mutex::lock&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.rwlock#method.read&quot;&gt;&lt;code&gt;RwLock::read&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 일반적으로 &lt;a href=&quot;struct.mutex#method.lock&quot;&gt; &lt;code&gt;Mutex::lock&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;struct.rwlock#method.read&quot;&gt; &lt;code&gt;RwLock::read&lt;/code&gt; &lt;/a&gt; 와 같은 메소드에 의해 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="d04e3acde7f8ef92dfb6b7b52b3e3c3811cad1e0" translate="yes" xml:space="preserve">
          <source>This is generally not recommended, use with caution! For a safe alternative see &lt;a href=&quot;#method.get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 일반적으로 권장되지 않으므로주의해서 사용하십시오! 안전한 대안을 &lt;a href=&quot;#method.get&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4bd5c92d6bc3bc69b3d544b464184377050cce05" translate="yes" xml:space="preserve">
          <source>This is generally not recommended, use with caution! For a safe alternative see &lt;a href=&quot;#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 일반적으로 권장되지 않으므로주의해서 사용하십시오! 안전한 대안은 &lt;a href=&quot;#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="60f2e569769a80d9853e1327c13dd3289346f0be" translate="yes" xml:space="preserve">
          <source>This is generally not recommended, use with caution! For a safe alternative see &lt;a href=&quot;primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ops/trait.index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 일반적으로 권장되지 않으므로주의해서 사용하십시오! 안전한 대안은 &lt;a href=&quot;primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;ops/trait.index&quot;&gt; &lt;code&gt;Index&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5835397a3648f1790072b1697b1686de073dd8a5" translate="yes" xml:space="preserve">
          <source>This is highly unsafe, due to the number of invariants that aren't checked:</source>
          <target state="translated">이것은 확인되지 않은 불변의 수로 인해 매우 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="75907ab0f8297b43f4704528d57293015e32b770" translate="yes" xml:space="preserve">
          <source>This is implemented as an intrinsic to avoid converting to and from an integer, since the conversion inhibits certain optimizations.</source>
          <target state="translated">이것은 변환이 특정 최적화를 방해하기 때문에 정수로 변환하거나 정수에서 변환하는 것을 피하기 위해 본질적으로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="11f5a22e0c8092b2e830a298d3f000dd528e1ac9" translate="yes" xml:space="preserve">
          <source>This is implemented as an intrinsic to avoid converting to and from an integer, since the conversion would throw away aliasing information.</source>
          <target state="translated">이것은 변환이 앨리어싱 정보를 버릴 것이기 때문에 정수로 변환하거나 정수에서 변환하는 것을 피하기 위해 본질적으로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="0d148f9608c961194f7d8d82b9462e528bb48245" translate="yes" xml:space="preserve">
          <source>This is in contrast to the default behaviour of &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; which unwinds the current thread's stack and calls all destructors. When &lt;code&gt;panic=&quot;abort&quot;&lt;/code&gt; is set, either as an argument to &lt;code&gt;rustc&lt;/code&gt; or in a crate's Cargo.toml, &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;abort&lt;/code&gt; are similar. However, &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; will still call the &lt;a href=&quot;../panic/fn.set_hook&quot;&gt;panic hook&lt;/a&gt; while &lt;code&gt;abort&lt;/code&gt; will not.</source>
          <target state="translated">이것은 &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt; 의 기본 행동과 대조적입니다 ! 현재 스레드의 스택을 풀고 모든 소멸자를 호출합니다. 때 &lt;code&gt;panic=&quot;abort&quot;&lt;/code&gt; 설정되어, 하나의 인수로 &lt;code&gt;rustc&lt;/code&gt; 또는 상자의 Cargo.toml에, &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;및 &lt;code&gt;abort&lt;/code&gt; 유사하다. 그러나, &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt; &lt;code&gt;abort&lt;/code&gt; 되지 않는 동안 여전히 &lt;a href=&quot;../panic/fn.set_hook&quot;&gt;공황 고리&lt;/a&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="abc319fa8d54bb7f30ec3fbd3c75a33f269dda0d" translate="yes" xml:space="preserve">
          <source>This is intended for use cases that must synchronize content, but don't need the metadata on disk. The goal of this method is to reduce disk operations.</source>
          <target state="translated">콘텐츠를 동기화해야하지만 디스크의 메타 데이터가 필요없는 사용 사례를위한 것입니다. 이 방법의 목표는 디스크 작업을 줄이는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8a817bf3dc422e9202ff238105af54d744a0e12d" translate="yes" xml:space="preserve">
          <source>This is lossless: calling &lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt;&lt;code&gt;encode_wide&lt;/code&gt;&lt;/a&gt; on the resulting string will always return the original code units.</source>
          <target state="translated">이는 손실이 없습니다. 결과 문자열에서 &lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt; &lt;code&gt;encode_wide&lt;/code&gt; &lt;/a&gt; 를 호출 하면 항상 원래 코드 단위가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="628dc171fde34c2da2657493d9e0d1f50a03e413" translate="yes" xml:space="preserve">
          <source>This is lossless: calling &lt;a href=&quot;trait.osstringext#tymethod.from_wide&quot;&gt;&lt;code&gt;OsString::from_wide&lt;/code&gt;&lt;/a&gt; and then &lt;code&gt;encode_wide&lt;/code&gt; on the result will yield the original code units. Note that the encoding does not add a final null terminator.</source>
          <target state="translated">전화 : 이것은 손실이 &lt;a href=&quot;trait.osstringext#tymethod.from_wide&quot;&gt; &lt;code&gt;OsString::from_wide&lt;/code&gt; &lt;/a&gt; 다음 &lt;code&gt;encode_wide&lt;/code&gt; 결과에 원래의 코드 단위를 얻을 것입니다. 인코딩은 최종 널 종료자를 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0151e5762979bf36757d9fa68f187e7676c048da" translate="yes" xml:space="preserve">
          <source>This is more useful when combined with higher-level abstractions, like collecting to a &lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;/code&gt; where you only care about errors:</source>
          <target state="translated">이것은 오류에만 관심 이있는 &lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;/code&gt; 로 수집과 같은 상위 레벨 추상화와 결합 할 때 더 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="e2fe1510c25bad6c81eb0b6402e2bd1a4066b7f9" translate="yes" xml:space="preserve">
          <source>This is not currently supported: &lt;code&gt;v&lt;/code&gt; should be defined as &lt;code&gt;Vec&amp;lt;&amp;amp;str&amp;gt;&lt;/code&gt;. Parentheses are currently only used with generic types when defining parameters for &lt;code&gt;Fn&lt;/code&gt;-family traits.</source>
          <target state="translated">이것은 현재 지원되지 않습니다. &lt;code&gt;v&lt;/code&gt; 는 &lt;code&gt;Vec&amp;lt;&amp;amp;str&amp;gt;&lt;/code&gt; 으로 정의되어야합니다 . 괄호는 현재 &lt;code&gt;Fn&lt;/code&gt; 계열 특성에 대한 매개 변수를 정의 할 때 일반 유형에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="711ce4ce5401a3c09d45281217695490f1c55a87" translate="yes" xml:space="preserve">
          <source>This is often the correct thing to use when building data structures using raw pointers, but is ultimately more dangerous to use because of its additional properties. If you're not sure if you should use &lt;code&gt;NonNull&amp;lt;T&amp;gt;&lt;/code&gt;, just use &lt;code&gt;*mut T&lt;/code&gt;!</source>
          <target state="translated">원시 포인터를 사용하여 데이터 구조를 빌드 할 때 사용하는 것이 올바른 경우가 많지만 추가 특성으로 인해 사용하는 것이 더 위험합니다. &lt;code&gt;NonNull&amp;lt;T&amp;gt;&lt;/code&gt; 사용 해야하는지 확실하지 않으면 &lt;code&gt;*mut T&lt;/code&gt; 만 사용하십시오 !</target>
        </trans-unit>
        <trans-unit id="fa820eea81b725c2fa4febe2a3901035a1fc9e49" translate="yes" xml:space="preserve">
          <source>This is one of the reasons Rust projects that provide a binary have a straightforward &lt;em&gt;src/main.rs&lt;/em&gt; file that calls logic that lives in the &lt;em&gt;src/lib.rs&lt;/em&gt; file. Using that structure, integration tests &lt;em&gt;can&lt;/em&gt; test the library crate with &lt;code&gt;use&lt;/code&gt; to make the important functionality available. If the important functionality works, the small amount of code in the &lt;em&gt;src/main.rs&lt;/em&gt; file will work as well, and that small amount of code doesn&amp;rsquo;t need to be tested.</source>
          <target state="translated">이 이유 녹 바이너리 가지고 간단 제공하는 프로젝트 중 하나입니다 &lt;em&gt;SRC / main.rs&lt;/em&gt; 파일이 호출 논리를 그의 삶 &lt;em&gt;SRC / lib.rs의&lt;/em&gt; 파일. 그 구조를 사용하여 통합 테스트는 &lt;em&gt;수&lt;/em&gt; 와 라이브러리 상자를 테스트 &lt;code&gt;use&lt;/code&gt; 중요한 기능을 사용할 수 있도록. 중요한 기능이 작동하면 &lt;em&gt;src / main.rs&lt;/em&gt; 파일 의 소량의 코드 도 잘 작동하며 소량의 코드는 테스트 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="73e2aa9ae5cc887b643d8522a473733b99e09722" translate="yes" xml:space="preserve">
          <source>This is only available on unix platforms and must be imported in order to call the method. Windows platforms have a corresponding &lt;code&gt;AsRawHandle&lt;/code&gt; and &lt;code&gt;AsRawSocket&lt;/code&gt; set of traits.</source>
          <target state="translated">유닉스 플랫폼에서만 사용할 수 있으며 메소드를 호출하려면 가져와야합니다. Windows 플랫폼에는 해당 &lt;code&gt;AsRawHandle&lt;/code&gt; 및 &lt;code&gt;AsRawSocket&lt;/code&gt; 특성 세트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b95758d57810f70a3e0dda910c113e0c41898398" translate="yes" xml:space="preserve">
          <source>This is only possible if the iterator has an end, so &lt;code&gt;rev()&lt;/code&gt; only works on &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">이것은 iterator에 끝이있는 경우에만 가능하므로 &lt;code&gt;rev()&lt;/code&gt; 는 &lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; &lt;/a&gt; 에서만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="3a074412ade07f77d614925409e4080a4208783e" translate="yes" xml:space="preserve">
          <source>This is optimal if:</source>
          <target state="translated">다음과 같은 경우에 최적입니다.</target>
        </trans-unit>
        <trans-unit id="d34b82a0a85b619783fe065420d506ce185b6196" translate="yes" xml:space="preserve">
          <source>This is purely an optimization hint, and may be implemented conservatively: it may return &lt;code&gt;true&lt;/code&gt; for types that don't actually need to be dropped. As such always returning &lt;code&gt;true&lt;/code&gt; would be a valid implementation of this function. However if this function actually returns &lt;code&gt;false&lt;/code&gt;, then you can be certain dropping &lt;code&gt;T&lt;/code&gt; has no side effect.</source>
          <target state="translated">이것은 순전히 최적화 힌트이며 보수적으로 구현 될 수 있습니다 . 실제로 삭제하지 않아도되는 유형에 대해서는 &lt;code&gt;true&lt;/code&gt; 를 반환 할 수 있습니다. 따라서 항상 &lt;code&gt;true&lt;/code&gt; 를 반환 하면이 함수의 유효한 구현이됩니다. 그러나이 함수가 실제로 &lt;code&gt;false&lt;/code&gt; 를 반환 하면 &lt;code&gt;T&lt;/code&gt; 를 떨어 뜨리면 부작용이 없을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5e7810a8956ac37cd206f449b307f75cea11f52b" translate="yes" xml:space="preserve">
          <source>This is returned in a Result by either the &lt;a href=&quot;struct.command#method.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&quot;struct.child#method.wait_with_output&quot;&gt;&lt;code&gt;wait_with_output&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt; process.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;struct.command#method.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt; 메소드 또는 &lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt; 프로세스 의 &lt;a href=&quot;struct.child#method.wait_with_output&quot;&gt; &lt;code&gt;wait_with_output&lt;/code&gt; &lt;/a&gt; 메소드에 의해 결과로 리턴 됩니다.</target>
        </trans-unit>
        <trans-unit id="b6ad57d3243660eeae5c83dc6d6e37580997866e" translate="yes" xml:space="preserve">
          <source>This is safe because it is not possible to move out of a shared reference. It may seem like there is an issue here with interior mutability: in fact, it &lt;em&gt;is&lt;/em&gt; possible to move a &lt;code&gt;T&lt;/code&gt; out of a &lt;code&gt;&amp;amp;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;. However, this is not a problem as long as there does not also exist a &lt;code&gt;Pin&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; pointing to the same data, and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; does not let you create a pinned reference to its contents. See the discussion on &lt;a href=&quot;index#projections-and-structural-pinning&quot;&gt;&quot;pinning projections&quot;&lt;/a&gt; for further details.</source>
          <target state="translated">공유 참조에서 벗어날 수 없기 때문에 안전합니다. 문제는 내부 가변성 여기가 것처럼 보일 수 있습니다 : 사실, &lt;em&gt;이다&lt;/em&gt; 이동 할 수 &lt;code&gt;T&lt;/code&gt; 를 에서 &lt;code&gt;&amp;amp;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; . 그러나 동일한 데이터를 가리키는 &lt;code&gt;Pin&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; 없고 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용하면 해당 내용에 대한 고정 된 참조를 만들 수없는 한 문제가되지 않습니다. 자세한 내용은 &lt;a href=&quot;index#projections-and-structural-pinning&quot;&gt;&quot;투영 고정&quot;&lt;/a&gt; 에 대한 설명을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="559d85299736482aa3edc92867921c11931dac34" translate="yes" xml:space="preserve">
          <source>This is safe because passing &lt;code&gt;self&lt;/code&gt; by value guarantees that no other threads are concurrently accessing the atomic data.</source>
          <target state="translated">값으로 &lt;code&gt;self&lt;/code&gt; 를 전달 하면 다른 스레드가 원자 데이터에 동시에 액세스하지 못 하므로 안전 합니다.</target>
        </trans-unit>
        <trans-unit id="fdcd86e75de03ac238cab2145da08762d1c1fa0e" translate="yes" xml:space="preserve">
          <source>This is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data.</source>
          <target state="translated">변경 가능한 참조는 다른 스레드가 원자 데이터에 동시에 액세스하지 않도록하기 때문에 안전합니다.</target>
        </trans-unit>
        <trans-unit id="62f1c9ceb59d3f4f94d3d3fedf2ebcb7110ae8d6" translate="yes" xml:space="preserve">
          <source>This is semantically equivalent to calling &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; and discarding the result, but has the following advantages:</source>
          <target state="translated">이것은 의미 적으로 &lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt; 를 호출 하고 결과를 버리는 것과 동일 하지만 다음과 같은 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8249e0d4f2746bf5b8aa8a678e0e1e5a321179d" translate="yes" xml:space="preserve">
          <source>This is semantically equivalent to calling &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; and discarding the result, but has the following advantages:</source>
          <target state="translated">이것은 의미 적으로 &lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt; 를 호출 하고 결과를 버리는 것과 동일 하지만 다음과 같은 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb69e9b77c8f67d2dd23964f55732bc6174eb1f3" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;struct.mutex#poisoning&quot;&gt;poisoning with mutexes&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;struct.mutex#poisoning&quot;&gt;뮤텍스&lt;/a&gt; 를 이용한 중독과 유사하다 .</target>
        </trans-unit>
        <trans-unit id="323433898b799fb03eed09fdd2d727e9828c9a3d" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;wake&lt;/code&gt;, but may be slightly less efficient in the case where an owned &lt;code&gt;Waker&lt;/code&gt; is available. This method should be preferred to calling &lt;code&gt;waker.clone().wake()&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;wake&lt;/code&gt; 와 비슷 하지만 소유 한 &lt;code&gt;Waker&lt;/code&gt; 를 사용할 수 있는 경우 약간 덜 효율적일 수 있습니다. 이 메소드는 &lt;code&gt;waker.clone().wake()&lt;/code&gt; 를 호출하는 것보다 선호됩니다 .</target>
        </trans-unit>
        <trans-unit id="67ff9ed313be1a208e09d5213c1e87906d1b8ae8" translate="yes" xml:space="preserve">
          <source>This is similar to taking a reference to the whole &lt;code&gt;String&lt;/code&gt; but with the extra &lt;code&gt;[0..5]&lt;/code&gt; bit. Rather than a reference to the entire &lt;code&gt;String&lt;/code&gt;, it&amp;rsquo;s a reference to a portion of the &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">이것은 전체 &lt;code&gt;String&lt;/code&gt; 참조 하지만 여분의 &lt;code&gt;[0..5]&lt;/code&gt; 비트 를 갖는 것과 유사합니다 . 전체 &lt;code&gt;String&lt;/code&gt; 에 대한 참조가 아니라 &lt;code&gt;String&lt;/code&gt; 의 일부에 대한 참조 입니다.</target>
        </trans-unit>
        <trans-unit id="8e7a7ddaef0be30145306f6816d2b3ff35a14d32" translate="yes" xml:space="preserve">
          <source>This is similar to the second sub-error, but subtler. It happens in situations like the following:</source>
          <target state="translated">이것은 두 번째 하위 오류와 비슷하지만 미묘합니다. 다음과 같은 상황에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7512abd4f4f8baf21d2fa3f6cea905e84ac77b34" translate="yes" xml:space="preserve">
          <source>This is simply a special - but common - case of the previous: hiding mutability for operations that appear to be immutable. The &lt;code&gt;clone&lt;/code&gt; method is expected to not change the source value, and is declared to take &lt;code&gt;&amp;amp;self&lt;/code&gt;, not &lt;code&gt;&amp;amp;mut self&lt;/code&gt;. Therefore, any mutation that happens in the &lt;code&gt;clone&lt;/code&gt; method must use cell types. For example, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; maintains its reference counts within a &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이것은 단순히 이전의 특별한 경우이지만 일반적인 경우입니다. 변경 불가능한 것으로 보이는 조작에 대해 변경 가능한 숨기기. &lt;code&gt;clone&lt;/code&gt; 방법은 소스 값을 변경할 것으로 예상되며, 취할 선언 &lt;code&gt;&amp;amp;self&lt;/code&gt; ,하지 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; . 따라서 &lt;code&gt;clone&lt;/code&gt; 방법 에서 발생하는 모든 돌연변이는 세포 유형을 사용해야합니다. 예를 들어, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 는 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; 내에서 참조 횟수를 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="022f67943cd560f4bdb5afc8c97b7f6c6d3167eb" translate="yes" xml:space="preserve">
          <source>This is sometimes done as part of an FFI:</source>
          <target state="translated">이것은 때때로 FFI의 일부로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="ce79f7fec51f65c567a6d4b960b891ab223ea0af" translate="yes" xml:space="preserve">
          <source>This is supported on Linux only.</source>
          <target state="translated">이것은 Linux에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="5d02662201a60807bdb13970d8ae5dbd58d92a03" translate="yes" xml:space="preserve">
          <source>This is supported on Unix only.</source>
          <target state="translated">이것은 유닉스에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="fe81960399abac0748704c3a05349d9cd7f1ac2c" translate="yes" xml:space="preserve">
          <source>This is supported on Windows only.</source>
          <target state="translated">이것은 Windows에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="7dbd409e3c209511b0279195cd6826fb5e1a2b3b" translate="yes" xml:space="preserve">
          <source>This is the &lt;code&gt;longest&lt;/code&gt; function from Listing 10-22 that returns the longer of two string slices. But now it has an extra parameter named &lt;code&gt;ann&lt;/code&gt; of the generic type &lt;code&gt;T&lt;/code&gt;, which can be filled in by any type that implements the &lt;code&gt;Display&lt;/code&gt; trait as specified by the &lt;code&gt;where&lt;/code&gt; clause. This extra parameter will be printed before the function compares the lengths of the string slices, which is why the &lt;code&gt;Display&lt;/code&gt; trait bound is necessary. Because lifetimes are a type of generic, the declarations of the lifetime parameter &lt;code&gt;'a&lt;/code&gt; and the generic type parameter &lt;code&gt;T&lt;/code&gt; go in the same list inside the angle brackets after the function name.</source>
          <target state="translated">이것은 Listing 10-22에서 &lt;code&gt;longest&lt;/code&gt; 함수로, 두 문자열 슬라이스 중 더 긴 문자열을 반환합니다. 그러나 이제 일반 유형 &lt;code&gt;T&lt;/code&gt; 의 &lt;code&gt;ann&lt;/code&gt; 이라는 추가 매개 변수 가 있으며 , &lt;code&gt;where&lt;/code&gt; 절에 지정된대로 &lt;code&gt;Display&lt;/code&gt; 특성 을 구현하는 모든 유형으로 채울 수 있습니다 . 이 추가 매개 변수는 함수가 문자열 슬라이스의 길이를 비교하기 전에 인쇄되므로 &lt;code&gt;Display&lt;/code&gt; 특성 제한이 필요한 이유 입니다. 수명은 제네릭 형식이므로 수명 매개 변수 &lt;code&gt;'a&lt;/code&gt; 와 제네릭 형식 매개 변수 &lt;code&gt;T&lt;/code&gt; 의 선언은 함수 이름 뒤에 꺾쇠 괄호 안에있는 동일한 목록에 있습니다.</target>
        </trans-unit>
        <trans-unit id="771b5400b1697f2e03b3ff52d8994e98c72fb56e" translate="yes" xml:space="preserve">
          <source>This is the alignment used for struct fields. It may be smaller than the preferred alignment.</source>
          <target state="translated">구조체 필드에 사용되는 정렬입니다. 선호하는 정렬보다 작을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ea5fa4cdf245151000dcd8208cd57fa7396ef40" translate="yes" xml:space="preserve">
          <source>This is the correct syntax:</source>
          <target state="translated">이것은 올바른 구문입니다.</target>
        </trans-unit>
        <trans-unit id="540ad0b8406b1727e0f455b9b013663295117df7" translate="yes" xml:space="preserve">
          <source>This is the difference between &lt;code&gt;1.0&lt;/code&gt; and the next largest representable number.</source>
          <target state="translated">이것은 &lt;code&gt;1.0&lt;/code&gt; 과 다음으로 가장 큰 표현 가능한 숫자의 차이입니다.</target>
        </trans-unit>
        <trans-unit id="c620ac5f199d804600d9e6fa867d20d7e4f16f11" translate="yes" xml:space="preserve">
          <source>This is the first example of Rust&amp;rsquo;s safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust&amp;rsquo;s error handling.</source>
          <target state="translated">이것이 Rust의 안전 원칙의 첫 번째 예입니다. 많은 저수준 언어에서 이러한 종류의 검사는 수행되지 않으며 잘못된 인덱스를 제공하면 유효하지 않은 메모리에 액세스 할 수 있습니다. Rust는 메모리 액세스를 허용하고 계속하는 대신 즉시 종료하여 이러한 종류의 오류로부터 사용자를 보호합니다. 9 장에서는 Rust의 오류 처리에 대해 더 설명합니다.</target>
        </trans-unit>
        <trans-unit id="96d082bf8459464d47b35442a1fa45813a325a53" translate="yes" xml:space="preserve">
          <source>This is the main iterator trait. For more about the concept of iterators generally, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;. In particular, you may want to know how to &lt;a href=&quot;index#implementing-iterator&quot;&gt;implement &lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것이 주요 반복자 특성입니다. 반복자의 개념에 대한 자세한 내용은 &lt;a href=&quot;index&quot;&gt;모듈 수준 설명서&lt;/a&gt; 를 참조하십시오 . 특히, &lt;a href=&quot;index#implementing-iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 구현 방법을 알고 싶을 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="289f1434eafb60316aca77ad31a00e3c0eb9323a" translate="yes" xml:space="preserve">
          <source>This is the non-panicking alternative to indexing the &lt;code&gt;str&lt;/code&gt;. Returns &lt;a href=&quot;option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; whenever equivalent indexing operation would panic.</source>
          <target state="translated">이것은 &lt;code&gt;str&lt;/code&gt; 인덱싱에 대한 당황하지 않는 대안 입니다. 동등한 색인 작업이 패닉 상태가 될 때마다 &lt;a href=&quot;option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="759018d521d201d38bc076c0727a5d9a6e429fac" translate="yes" xml:space="preserve">
          <source>This is the non-panicking variant of &lt;a href=&quot;#method.borrow&quot;&gt;&lt;code&gt;borrow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 당황스럽지 않은 &lt;a href=&quot;#method.borrow&quot;&gt; &lt;code&gt;borrow&lt;/code&gt; &lt;/a&gt; 변형입니다 .</target>
        </trans-unit>
        <trans-unit id="70fed40b0a485aa104ed49c92498ff0b436cf03b" translate="yes" xml:space="preserve">
          <source>This is the non-panicking variant of &lt;a href=&quot;#method.borrow_mut&quot;&gt;&lt;code&gt;borrow_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;#method.borrow_mut&quot;&gt; &lt;code&gt;borrow_mut&lt;/code&gt; &lt;/a&gt; 당황하지 않은 변형입니다 .</target>
        </trans-unit>
        <trans-unit id="cce445e189c1252f0055062d54b89751ff0fb729" translate="yes" xml:space="preserve">
          <source>This is the reverse version of &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;: it takes elements starting from the back of the iterator.</source>
          <target state="translated">이것은 &lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt; 의 역 버전입니다 : 반복자의 뒤에서 시작하는 요소를 취합니다.</target>
        </trans-unit>
        <trans-unit id="53f33f9266690c3f1f82aab587ca29e140daa7ab" translate="yes" xml:space="preserve">
          <source>This is the reverse version of &lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;&lt;code&gt;try_fold()&lt;/code&gt;&lt;/a&gt;: it takes elements starting from the back of the iterator.</source>
          <target state="translated">이것은 &lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt; &lt;code&gt;try_fold()&lt;/code&gt; &lt;/a&gt; 의 역 버전입니다 . 그것은 반복자의 뒤에서 시작하는 요소를 취합니다.</target>
        </trans-unit>
        <trans-unit id="d46122a89a465fda704ceb8118ba4c1126be2832" translate="yes" xml:space="preserve">
          <source>This is the reverse version of [&lt;code&gt;try_fold()&lt;/code&gt;]: it takes elements starting from the back of the iterator. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.try_rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이것은 [ &lt;code&gt;try_fold()&lt;/code&gt; ] 의 역 버전입니다 . 반복자의 뒤에서 시작하는 요소가 필요합니다. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.try_rfold&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f495531f8eacf0a1680dc0219ed83707197faddd" translate="yes" xml:space="preserve">
          <source>This is the reverse version of [&lt;code&gt;try_fold()&lt;/code&gt;]: it takes elements starting from the back of the iterator. &lt;a href=&quot;../iter/trait.doubleendediterator#method.try_rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이것은 [ &lt;code&gt;try_fold()&lt;/code&gt; ] 의 역 버전입니다 . 반복자의 뒤에서 시작하는 요소가 필요합니다. &lt;a href=&quot;../iter/trait.doubleendediterator#method.try_rfold&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ec81940d41390cbbcb80997a4e3d957d2b9a317" translate="yes" xml:space="preserve">
          <source>This is the reverse version of [&lt;code&gt;try_fold()&lt;/code&gt;]: it takes elements starting from the back of the iterator. &lt;a href=&quot;iter/trait.doubleendediterator#method.try_rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이것은 [ &lt;code&gt;try_fold()&lt;/code&gt; ] 의 역 버전입니다 . 반복자의 뒤에서 시작하는 요소가 필요합니다. &lt;a href=&quot;iter/trait.doubleendediterator#method.try_rfold&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ff3fa51ad38f312277040719826a7c977bbcd8a" translate="yes" xml:space="preserve">
          <source>This is the reverse version of [&lt;code&gt;try_fold()&lt;/code&gt;]: it takes elements starting from the back of the iterator. &lt;a href=&quot;trait.doubleendediterator#method.try_rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이것은 [ &lt;code&gt;try_fold()&lt;/code&gt; ] 의 역 버전입니다 . 반복자의 뒤에서 시작하는 요소가 필요합니다. &lt;a href=&quot;trait.doubleendediterator#method.try_rfold&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="383e94e01b1343c9d6bcfb23e7f045e384d94336" translate="yes" xml:space="preserve">
          <source>This is the same as using the &lt;code&gt;==&lt;/code&gt; operator, but less generic: the arguments have to be &lt;code&gt;*const T&lt;/code&gt; raw pointers, not anything that implements &lt;code&gt;PartialEq&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;==&lt;/code&gt; 연산자 를 사용하는 것과 동일 하지만 덜 일반적입니다. 인수는 &lt;code&gt;PartialEq&lt;/code&gt; 를 구현하는 것이 아니라 &lt;code&gt;*const T&lt;/code&gt; 원시 포인터 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="22b2f39cdef64a09df83167c24366e9e24591fdf" translate="yes" xml:space="preserve">
          <source>This is the unchecked alternative to indexing the &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;str&lt;/code&gt; 인덱싱에 대한 확인되지 않은 대안 입니다.</target>
        </trans-unit>
        <trans-unit id="589a4243aa6d42e7fc5ac36f0baed5a47e1de444" translate="yes" xml:space="preserve">
          <source>This is used for object safety, to check that a method's receiver type can be dispatched on.</source>
          <target state="translated">메소드의 수신자 유형을 전달할 수 있는지 확인하기 위해 오브젝트 안전에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9aea807f1415223ad9d946b1ace7fbf6d55fe5aa" translate="yes" xml:space="preserve">
          <source>This is used when the programmer knows that the thread will have nothing to do for some time, and thus avoid wasting computing time.</source>
          <target state="translated">이것은 프로그래머가 스레드가 한동안 아무 것도 할 일이 없다는 것을 알고 컴퓨팅 시간 낭비를 피할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5ce1e416198eb464ee0a2977f8013c35c0e89565" translate="yes" xml:space="preserve">
          <source>This is useful any time that the compiler can't determine that some code is unreachable. For example:</source>
          <target state="translated">이것은 컴파일러가 일부 코드에 도달 할 수 없다고 판단 할 수 없을 때 유용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="85e4c5ffc08236fd25e25201dcbaaa8757900c78" translate="yes" xml:space="preserve">
          <source>This is useful for</source>
          <target state="translated">이것은 유용합니다</target>
        </trans-unit>
        <trans-unit id="a885d8fe460e46c9230b0d468a457bef6acf54a6" translate="yes" xml:space="preserve">
          <source>This is useful for a flavor of &quot;optimistic check&quot; before deciding to block on a receiver.</source>
          <target state="translated">이는 수신기에서 차단을 결정하기 전에 &quot;낙관적 검사&quot;의 특징에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="79e1d9086d9f417d98c9a3f1df01e78fe0db96d9" translate="yes" xml:space="preserve">
          <source>This is useful for initializing types which lazily allocate, like &lt;code&gt;Vec::new&lt;/code&gt; does.</source>
          <target state="translated">이것은 &lt;code&gt;Vec::new&lt;/code&gt; 처럼 지연 할당하는 타입을 초기화하는데 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="08ec962229a27774cdabf85bddcaa5d6f625b9ff" translate="yes" xml:space="preserve">
          <source>This is useful to allow applying iterator adaptors while still retaining ownership of the original iterator.</source>
          <target state="translated">이것은 원래 반복자의 소유권을 계속 유지하면서 반복자 어댑터를 적용 할 수 있도록하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="63ccb84e9a4faa353cb290ddc5e855748a76c17b" translate="yes" xml:space="preserve">
          <source>This is useful when you are doing a type conversion that may trivially succeed but may also need special handling. For example, there is no way to convert an &lt;code&gt;i64&lt;/code&gt; into an &lt;code&gt;i32&lt;/code&gt; using the &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; trait, because an &lt;code&gt;i64&lt;/code&gt; may contain a value that an &lt;code&gt;i32&lt;/code&gt; cannot represent and so the conversion would lose data. This might be handled by truncating the &lt;code&gt;i64&lt;/code&gt; to an &lt;code&gt;i32&lt;/code&gt; (essentially giving the &lt;code&gt;i64&lt;/code&gt;'s value modulo &lt;code&gt;i32::MAX&lt;/code&gt;) or by simply returning &lt;code&gt;i32::MAX&lt;/code&gt;, or by some other method. The &lt;code&gt;From&lt;/code&gt; trait is intended for perfect conversions, so the &lt;code&gt;TryFrom&lt;/code&gt; trait informs the programmer when a type conversion could go bad and lets them decide how to handle it.</source>
          <target state="translated">사소하게 성공할 수도 있지만 특수 처리가 필요할 수도있는 유형 변환을 수행 할 때 유용합니다. 예를 들어, 변환 할 수있는 방법이 없습니다 &lt;code&gt;i64&lt;/code&gt; 로 &lt;code&gt;i32&lt;/code&gt; 를 사용 &lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt; 때문에, 특성 &lt;code&gt;i64&lt;/code&gt; 하는 값이 포함될 수 있습니다 &lt;code&gt;i32&lt;/code&gt; 변환이 데이터를 잃을 수 있도록 표현하고 할 수 있습니다. 이것은 &lt;code&gt;i64&lt;/code&gt; 를 &lt;code&gt;i32&lt;/code&gt; 로자르거나 (필수적으로 &lt;code&gt;i64&lt;/code&gt; 의 값 modulo &lt;code&gt;i32::MAX&lt;/code&gt; ) 또는 단순히 &lt;code&gt;i32::MAX&lt;/code&gt; 를 반환 하거나 다른 방법으로 처리 할 수 ​​있습니다. &lt;code&gt;From&lt;/code&gt; 특성은, 완벽한 전환을위한 소위되어 &lt;code&gt;TryFrom&lt;/code&gt; trait는 프로그래머에게 타입 변환이 나빠질 때 알려주고 처리 방법을 결정할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="878335df341d736b2b477f7d269d41d041479a70" translate="yes" xml:space="preserve">
          <source>This is useful when you have an iterator of iterators or an iterator of things that can be turned into iterators and you want to remove one level of indirection.</source>
          <target state="translated">이터레이터의 이터레이터 또는 이터레이터로 변환 될 수있는 것들의 이터레이터가 있고 한 레벨의 간접적 인 제거를 원할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bc06069272831e3fab63600d60da8286a4aa9faf" translate="yes" xml:space="preserve">
          <source>This is useful when you have an iterator over &lt;code&gt;&amp;amp;T&lt;/code&gt;, but you need an iterator over &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">당신의 반복자가있을 때 유용 &lt;code&gt;&amp;amp;T&lt;/code&gt; ,하지만 당신은 반복자 필요 &lt;code&gt;T&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="28c350dd4bfc1f4f50a6db4a558fce8f481fa714" translate="yes" xml:space="preserve">
          <source>This is useful when you wish to output a formatted list of items as a part of your &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;&lt;code&gt;Debug::fmt&lt;/code&gt;&lt;/a&gt; implementation.</source>
          <target state="translated">형식화 된 항목 목록을 &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt; &lt;code&gt;Debug::fmt&lt;/code&gt; &lt;/a&gt; 구현 의 일부로 출력하려는 ​​경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="023c37d743c95a28f62cb66dc28c6981840e275e" translate="yes" xml:space="preserve">
          <source>This is useful when you wish to output a formatted map as a part of your &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;&lt;code&gt;Debug::fmt&lt;/code&gt;&lt;/a&gt; implementation.</source>
          <target state="translated">형식화 된 맵을 &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt; &lt;code&gt;Debug::fmt&lt;/code&gt; &lt;/a&gt; 구현 의 일부로 출력하려는 ​​경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="5a019c845f0ac55c26e73d5fc98b9e29c14a5266" translate="yes" xml:space="preserve">
          <source>This is useful when you wish to output a formatted set of items as a part of your &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;&lt;code&gt;Debug::fmt&lt;/code&gt;&lt;/a&gt; implementation.</source>
          <target state="translated">형식화 된 항목 집합을 &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt; &lt;code&gt;Debug::fmt&lt;/code&gt; &lt;/a&gt; 구현 의 일부로 출력하려는 ​​경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="742e4efaa0964cab1a9b13d64aa3f1ee505fbe93" translate="yes" xml:space="preserve">
          <source>This is useful when you wish to output a formatted struct as a part of your &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;&lt;code&gt;Debug::fmt&lt;/code&gt;&lt;/a&gt; implementation.</source>
          <target state="translated">형식화 된 구조체를 &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt; &lt;code&gt;Debug::fmt&lt;/code&gt; &lt;/a&gt; 구현 의 일부로 출력하려는 ​​경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="7450774ae735743f9affac51ccc2935a02180916" translate="yes" xml:space="preserve">
          <source>This is useful when you wish to output a formatted tuple as a part of your &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;&lt;code&gt;Debug::fmt&lt;/code&gt;&lt;/a&gt; implementation.</source>
          <target state="translated">형식화 된 튜플을 &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt; &lt;code&gt;Debug::fmt&lt;/code&gt; &lt;/a&gt; 구현 의 일부로 출력하려는 ​​경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="678189b9778744d56a77a9ddbd180a89dff66dd0" translate="yes" xml:space="preserve">
          <source>This is usually not needed when writing safe code, as &lt;a href=&quot;../sync/struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;es&lt;/a&gt; already poison themselves when a thread panics while holding the lock.</source>
          <target state="translated">&lt;a href=&quot;../sync/struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; es&lt;/a&gt; 는 잠금 장치를 잡고있는 동안 스레드 패닉이 발생하면 이미 중독 되기 때문에 일반적으로 안전한 코드를 작성할 때는 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="73513599023f5ddb254ee6ed0d00bccac264c338" translate="yes" xml:space="preserve">
          <source>This is usually the same as &lt;code&gt;size_of::&amp;lt;T&amp;gt;()&lt;/code&gt;. However, when &lt;code&gt;T&lt;/code&gt;&lt;em&gt;has&lt;/em&gt; no statically-known size, e.g., a slice &lt;a href=&quot;../primitive.slice&quot;&gt;&lt;code&gt;[T]&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../../book/ch17-02-trait-objects&quot;&gt;trait object&lt;/a&gt;, then &lt;code&gt;size_of_val&lt;/code&gt; can be used to get the dynamically-known size.</source>
          <target state="translated">일반적으로 &lt;code&gt;size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; 와 동일 합니다. 그러나 &lt;code&gt;T&lt;/code&gt; &lt;em&gt;에&lt;/em&gt; 정적으로 알려진 크기, 예를 들어 슬라이스 &lt;a href=&quot;../primitive.slice&quot;&gt; &lt;code&gt;[T]&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../book/ch17-02-trait-objects&quot;&gt;특성 객체&lt;/a&gt; 가없는 경우 &lt;code&gt;size_of_val&lt;/code&gt; 을 사용하여 동적으로 알려진 크기를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8abe6d863c59136664f0a7528f19c0cd3ff2fed7" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t the exact signature that&amp;rsquo;s in the standard library: in the standard library, &lt;code&gt;add&lt;/code&gt; is defined using generics. Here, we&amp;rsquo;re looking at the signature of &lt;code&gt;add&lt;/code&gt; with concrete types substituted for the generic ones, which is what happens when we call this method with &lt;code&gt;String&lt;/code&gt; values. We&amp;rsquo;ll discuss generics in Chapter 10. This signature gives us the clues we need to understand the tricky bits of the &lt;code&gt;+&lt;/code&gt; operator.</source>
          <target state="translated">이것은 표준 라이브러리에있는 정확한 서명이 아닙니다. 표준 라이브러리에서 &lt;code&gt;add&lt;/code&gt; 는 제네릭을 사용하여 정의됩니다. 여기서는 일반적인 타입으로 대체 된 구체적인 타입을 가진 &lt;code&gt;add&lt;/code&gt; 의 시그니처를보고 있는데, 이것은 &lt;code&gt;String&lt;/code&gt; 값 으로이 메소드를 호출 할 때 발생 합니다. 10 장에서 제네릭에 대해 논의 할 것입니다.이 서명은 &lt;code&gt;+&lt;/code&gt; 연산자 의 까다로운 비트를 이해하는 데 필요한 단서를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="677e3e0ad58a3857efcf5b71bd28f251f1ad71c2" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t the last you&amp;rsquo;ll see of concurrency in this book: the project in Chapter 20 will use the concepts in this chapter in a more realistic situation than the smaller examples discussed here.</source>
          <target state="translated">이 책에서 동시성에 대해 마지막으로 볼 수있는 것은 아닙니다. 20 장의 프로젝트는 여기에서 논의 된 작은 예제보다 더 현실적인 상황에서이 장의 개념을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c724cabc6d2e28a46495b5e9f7308161c3ff4773" translate="yes" xml:space="preserve">
          <source>This isn't allowed, but using a trait to implement a method is a good solution. Example:</source>
          <target state="translated">이것은 허용되지 않지만 특성을 사용하여 메소드를 구현하는 것이 좋습니다. 예:</target>
        </trans-unit>
        <trans-unit id="ca75bc59c45502aa721dfcf6b2008b560ce93b8c" translate="yes" xml:space="preserve">
          <source>This issue also ties into the second problem: although &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; are configuration variables to our program, variables like &lt;code&gt;contents&lt;/code&gt; are used to perform the program&amp;rsquo;s logic. The longer &lt;code&gt;main&lt;/code&gt; becomes, the more variables we&amp;rsquo;ll need to bring into scope; the more variables we have in scope, the harder it will be to keep track of the purpose of each. It&amp;rsquo;s best to group the configuration variables into one structure to make their purpose clear.</source>
          <target state="translated">이 문제는 두 번째 문제와도 관련이 있습니다. &lt;code&gt;query&lt;/code&gt; 와 &lt;code&gt;filename&lt;/code&gt; 은 프로그램의 구성 변수 이지만 &lt;code&gt;contents&lt;/code&gt; 과 같은 변수 는 프로그램의 논리를 수행하는 데 사용됩니다. &lt;code&gt;main&lt;/code&gt; 이 길어질 수록 범위에 더 많은 변수를 가져와야합니다. 범위에있는 변수가 많을수록 각각의 목적을 추적하기가 더 어려워집니다. 구성 변수를 하나의 구조로 그룹화하여 목적을 명확하게하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f6ff2f3673f7e2d10b1136073892f6a7e26909fe" translate="yes" xml:space="preserve">
          <source>This iterator is &lt;a href=&quot;../iter/trait.fusediterator&quot;&gt;fused&lt;/a&gt;, but the specific values of &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; after iteration has finished are &lt;strong&gt;unspecified&lt;/strong&gt; other than that &lt;a href=&quot;#method.is_empty&quot;&gt;&lt;code&gt;.is_empty()&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;true&lt;/code&gt; once no more values will be produced.</source>
          <target state="translated">이 반복자입니다 &lt;a href=&quot;../iter/trait.fusediterator&quot;&gt;융합&lt;/a&gt; 만의 특정 값 &lt;code&gt;start&lt;/code&gt; 과 &lt;code&gt;end&lt;/code&gt; 반복이 완료된 후에는 &lt;strong&gt;지정되지 않은&lt;/strong&gt; 그 이외의 &lt;a href=&quot;#method.is_empty&quot;&gt; &lt;code&gt;.is_empty()&lt;/code&gt; &lt;/a&gt; 반환 &lt;code&gt;true&lt;/code&gt; 더 이상 값이 생성되지 않습니다 번.</target>
        </trans-unit>
        <trans-unit id="22ff5b740b07569a5d9914bbdea6a0fe28474b82" translate="yes" xml:space="preserve">
          <source>This iterator is returned from the &lt;a href=&quot;fn.read_dir&quot;&gt;&lt;code&gt;read_dir&lt;/code&gt;&lt;/a&gt; function of this module and will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;struct.direntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Through a &lt;a href=&quot;struct.direntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt; information like the entry's path and possibly other metadata can be learned.</source>
          <target state="translated">이 반복자는 이 모듈 의 &lt;a href=&quot;fn.read_dir&quot;&gt; &lt;code&gt;read_dir&lt;/code&gt; &lt;/a&gt; 함수 에서 반환되며 &lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;struct.direntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 의 인스턴스를 생성합니다 . &lt;a href=&quot;struct.direntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; 를&lt;/a&gt; 통해 항목의 경로 및 기타 메타 데이터와 같은 정보를 학습 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="039cfdd22f7232d788dc3924aaf58e6af89b9b42" translate="yes" xml:space="preserve">
          <source>This iterator will block whenever &lt;a href=&quot;../../iter/trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; is called, waiting for a new message, and &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; will be returned if the corresponding channel has hung up.</source>
          <target state="translated">이 반복자는 &lt;a href=&quot;../../iter/trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; 메시지가 호출 될 때마다 차단 되고 새 메시지를 기다리며 해당 채널이 중단되면 &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="47622e0905704752b067e8fb130b53a4d875da6d" translate="yes" xml:space="preserve">
          <source>This iterator will block whenever &lt;a href=&quot;../../iter/trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; is called, waiting for a new message, and &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; will be returned when the corresponding channel has hung up.</source>
          <target state="translated">이 반복자는 &lt;a href=&quot;../../iter/trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; 이 호출 될 때마다 차단 되고 새 메시지를 기다리며 해당 채널이 중단되면 &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3d5f1a4f383a40c5608e98cdb7f233b0d0bd50b4" translate="yes" xml:space="preserve">
          <source>This iterator will never block the caller in order to wait for data to become available. Instead, it will return &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 반복기는 데이터를 사용할 수있을 때까지 호출자를 차단하지 않습니다. 대신 &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2ded90014878b45a9d1013952a0eeccef1815fa3" translate="yes" xml:space="preserve">
          <source>This iterator yields mutable references to the slice's elements, so while the element type of the slice is &lt;code&gt;i32&lt;/code&gt;, the element type of the iterator is &lt;code&gt;&amp;amp;mut i32&lt;/code&gt;.</source>
          <target state="translated">이 반복자는 슬라이스의 요소에 대해 변경 가능한 참조를 생성하므로 슬라이스의 요소 유형은 &lt;code&gt;i32&lt;/code&gt; 이고 반복자의 요소 유형은 &lt;code&gt;&amp;amp;mut i32&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f11293328eb4e550149e3eb11d18b4b99dadeb4a" translate="yes" xml:space="preserve">
          <source>This key uses the fastest possible implementation available to it for the target platform. It is instantiated with the &lt;a href=&quot;../macro.thread_local&quot;&gt;&lt;code&gt;thread_local!&lt;/code&gt;&lt;/a&gt; macro and the primary method is the &lt;a href=&quot;struct.localkey#method.with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 키는 대상 플랫폼에 대해 가장 빠른 구현을 사용합니다. &lt;a href=&quot;../macro.thread_local&quot;&gt; &lt;code&gt;thread_local!&lt;/code&gt; &lt;/a&gt; 로 인스턴스화됩니다 ! 매크로와 기본 방법은 &lt;a href=&quot;struct.localkey#method.with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 방법입니다.</target>
        </trans-unit>
        <trans-unit id="8ba72c9f8d060c616c313ff46104db0834e023c2" translate="yes" xml:space="preserve">
          <source>This kind of reordering is handled transparently by the CPU.</source>
          <target state="translated">이러한 종류의 재정렬은 CPU에 의해 투명하게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="01e9e67a62e244fe3547a3a6a38b452018a02bd0" translate="yes" xml:space="preserve">
          <source>This kind of string &lt;em&gt;can&lt;/em&gt; be mutated:</source>
          <target state="translated">이러한 종류의 문자열 &lt;em&gt;은 변경&lt;/em&gt; 될 &lt;em&gt;수&lt;/em&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="a40000b09a25d1541d4b670c6d1a695e653d4397" translate="yes" xml:space="preserve">
          <source>This last example is different because it is not possible to use the suffix syntax with a floating point literal ending in a period. &lt;code&gt;2.f64&lt;/code&gt; would attempt to call a method named &lt;code&gt;f64&lt;/code&gt; on &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">이 마지막 예제는 마침표로 끝나는 부동 소수점 리터럴과 함께 접미어 구문을 사용할 수 없기 때문에 다릅니다. &lt;code&gt;2.f64&lt;/code&gt; 는 방법이라는 호출을 시도 할 &lt;code&gt;f64&lt;/code&gt; 에 &lt;code&gt;2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d48b41e91473a0fe92d3d1ed63ecf51de63aefff" translate="yes" xml:space="preserve">
          <source>This length is in bytes, not &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s or graphemes. In other words, it may not be what a human considers the length of the string.</source>
          <target state="translated">이 길이는 &lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 grapheme이 아닌 바이트 단위 입니다. 다시 말해, 인간이 줄의 길이를 고려하는 것이 아닐 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="903d848487fc64b3813a8038fcea8db3d845066a" translate="yes" xml:space="preserve">
          <source>This length is in bytes, not &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s or graphemes. In other words, it may not be what a human considers the length of the string.</source>
          <target state="translated">이 길이는 &lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 grapheme이 아닌 바이트 단위 입니다. 다시 말해, 인간이 줄의 길이를 고려하는 것이 아닐 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f8980a7dcbb36debff75ad398d722c2e476b435" translate="yes" xml:space="preserve">
          <source>This limitation may be removed in a future version of Rust.</source>
          <target state="translated">이 제한은 이후 버전의 Rust에서 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65d7d6e48995b9a8b70ff571d23a4947777c0d68" translate="yes" xml:space="preserve">
          <source>This limitation on the size &lt;code&gt;N&lt;/code&gt; exists because Rust does not yet support code that is generic over the size of an array type. &lt;code&gt;[Foo; 3]&lt;/code&gt; and &lt;code&gt;[Bar; 3]&lt;/code&gt; are instances of same generic type &lt;code&gt;[T; 3]&lt;/code&gt;, but &lt;code&gt;[Foo; 3]&lt;/code&gt; and &lt;code&gt;[Foo; 5]&lt;/code&gt; are entirely different types. As a stopgap, trait implementations are statically generated up to size 32.</source>
          <target state="translated">Rust가 배열 유형의 크기보다 일반적인 코드를 아직 지원하지 않기 때문에 크기 &lt;code&gt;N&lt;/code&gt; 에 대한 이러한 제한이 존재합니다. &lt;code&gt;[Foo; 3]&lt;/code&gt; 및 &lt;code&gt;[Bar; 3]&lt;/code&gt; 은 동일한 제네릭 형식 &lt;code&gt;[T; 3]&lt;/code&gt; 이지만 &lt;code&gt;[Foo; 3]&lt;/code&gt; 및 &lt;code&gt;[Foo; 5]&lt;/code&gt; 는 완전히 다른 유형입니다. 스탑 갭으로서, 특성 구현은 정적으로 32까지 정적으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="08204384af7f77c5b07543f234ee809fc102751e" translate="yes" xml:space="preserve">
          <source>This line brings &lt;code&gt;std::io&lt;/code&gt; and &lt;code&gt;std::io::Write&lt;/code&gt; into scope.</source>
          <target state="translated">이 줄은 &lt;code&gt;std::io&lt;/code&gt; 및 &lt;code&gt;std::io::Write&lt;/code&gt; 를 범위로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="c84219e32c60c562866367e57dce5465f094cc72" translate="yes" xml:space="preserve">
          <source>This line creates a new empty string called &lt;code&gt;s&lt;/code&gt;, which we can then load data into. Often, we&amp;rsquo;ll have some initial data that we want to start the string with. For that, we use the &lt;code&gt;to_string&lt;/code&gt; method, which is available on any type that implements the &lt;code&gt;Display&lt;/code&gt; trait, as string literals do. Listing 8-12 shows two examples.</source>
          <target state="translated">이 줄은 &lt;code&gt;s&lt;/code&gt; 라는 빈 문자열을 새로 만들어 데이터를로드 할 수 있습니다. 종종 문자열을 시작하려는 초기 데이터가 있습니다. 이를 위해 &lt;code&gt;to_string&lt;/code&gt; 메소드를 사용합니다 .이 메소드는 문자열 리터럴처럼 &lt;code&gt;Display&lt;/code&gt; 특성 을 구현하는 모든 유형에서 사용할 수 있습니다 . 목록 8-12는 두 가지 예를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c6d1af215b1b045e01e47bacfa1ae42f66655d33" translate="yes" xml:space="preserve">
          <source>This line creates a new variable named &lt;code&gt;foo&lt;/code&gt; and binds it to the value of the &lt;code&gt;bar&lt;/code&gt; variable. In Rust, variables are immutable by default. We&amp;rsquo;ll be discussing this concept in detail in the &lt;a href=&quot;ch03-01-variables-and-mutability#variables-and-mutability&quot;&gt;&amp;ldquo;Variables and Mutability&amp;rdquo;&lt;/a&gt; section in Chapter 3. The following example shows how to use &lt;code&gt;mut&lt;/code&gt; before the variable name to make a variable mutable:</source>
          <target state="translated">이 행은 &lt;code&gt;foo&lt;/code&gt; 라는 새 변수를 작성하고 이를 &lt;code&gt;bar&lt;/code&gt; 변수 의 값에 바인드합니다 . Rust에서 변수는 기본적으로 불변입니다. 이 개념에 &lt;a href=&quot;ch03-01-variables-and-mutability#variables-and-mutability&quot;&gt;대해서는&lt;/a&gt; 3 장의 &quot;변수 및 변경 가능성&quot; 섹션 에서 자세히 설명합니다 . 다음 예제는 변수 이름 앞에 &lt;code&gt;mut&lt;/code&gt; 를 사용 하여 변수를 변경 가능하게 만드는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5d9eacc9407c12ec62c5abf0aec26e9081e77d6a" translate="yes" xml:space="preserve">
          <source>This line does all the work in this little program: it prints text to the screen. There are four important details to notice here. First, Rust style is to indent with four spaces, not a tab.</source>
          <target state="translated">이 줄은이 작은 프로그램의 모든 작업을 수행합니다. 화면에 텍스트를 인쇄합니다. 여기에 주목해야 할 네 가지 중요한 세부 사항이 있습니다. 먼저, 녹 스타일은 탭이 아닌 네 개의 공백으로 들여 쓰기됩니다.</target>
        </trans-unit>
        <trans-unit id="6bb12529672d4d91a104d1b5e1346fffbd28c07c" translate="yes" xml:space="preserve">
          <source>This line prints the string we saved the user&amp;rsquo;s input in. The set of curly brackets, &lt;code&gt;{}&lt;/code&gt;, is a placeholder: think of &lt;code&gt;{}&lt;/code&gt; as little crab pincers that hold a value in place. You can print more than one value using curly brackets: the first set of curly brackets holds the first value listed after the format string, the second set holds the second value, and so on. Printing multiple values in one call to &lt;code&gt;println!&lt;/code&gt; would look like this:</source>
          <target state="translated">이 줄은 사용자의 입력을 저장 한 문자열을 인쇄합니다. 중괄호 &lt;code&gt;{}&lt;/code&gt; 는 자리 표시 자입니다. &lt;code&gt;{}&lt;/code&gt; 는 값을 유지하는 작은 게 집게로 생각하십시오 . 중괄호를 사용하여 둘 이상의 값을 인쇄 할 수 있습니다. 첫 번째 중괄호 세트는 형식 문자열 뒤에 나열된 첫 번째 값을 보유하고 두 번째 세트는 두 번째 값을 보유합니다. 한 번의 호출로 &lt;code&gt;println!&lt;/code&gt; 다음과 같이 보일 것입니다 :</target>
        </trans-unit>
        <trans-unit id="250f132a4cd3e14f1923c5e6c25a460649fabde4" translate="yes" xml:space="preserve">
          <source>This list is intended to grow over time and it is not recommended to exhaustively match against it.</source>
          <target state="translated">이 목록은 시간이 지남에 따라 증가하기위한 것이며 철저하게 일치시키는 것은 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="308882c8bb15621452c72c71d1e862ba6ca42816" translate="yes" xml:space="preserve">
          <source>This longer form is equivalent to the example in the previous section but is more verbose. We place trait bounds with the declaration of the generic type parameter after a colon and inside angle brackets.</source>
          <target state="translated">이 긴 형식은 이전 섹션의 예와 동일하지만 더 장황합니다. 콜론과 꺾쇠 괄호 뒤에 generic 형식 매개 변수를 선언하여 특성 경계를 배치합니다.</target>
        </trans-unit>
        <trans-unit id="cc7e694b75fd14e7d2942129d96e2363378281a2" translate="yes" xml:space="preserve">
          <source>This looks very similar to the previous code, so we might assume that the way it works would be the same: that is, the second line would make a copy of the value in &lt;code&gt;s1&lt;/code&gt; and bind it to &lt;code&gt;s2&lt;/code&gt;. But this isn&amp;rsquo;t quite what happens.</source>
          <target state="translated">이것은 이전 코드와 매우 비슷해 보이므로 작동 방식이 동일하다고 가정 할 수 있습니다. 즉, 두 번째 줄은 &lt;code&gt;s1&lt;/code&gt; 의 값을 복사 하여 &lt;code&gt;s2&lt;/code&gt; 에 바인딩합니다 . 그러나 이것은 일어나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e9c26f6e16b6bec90033e045df684b9983904c03" translate="yes" xml:space="preserve">
          <source>This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be formatted according to the specified format string and the result will be passed to the writer. The writer may be any value with a &lt;code&gt;write_fmt&lt;/code&gt; method; generally this comes from an implementation of either the &lt;a href=&quot;fmt/trait.write&quot;&gt;&lt;code&gt;std::fmt::Write&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;io/trait.write&quot;&gt;&lt;code&gt;std::io::Write&lt;/code&gt;&lt;/a&gt; trait. The macro returns whatever the &lt;code&gt;write_fmt&lt;/code&gt; method returns; commonly a &lt;a href=&quot;fmt/type.result&quot;&gt;&lt;code&gt;std::fmt::Result&lt;/code&gt;&lt;/a&gt;, or an &lt;a href=&quot;io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 매크로는 형식 문자열, 인수 목록 및 '작성자'를 허용합니다. 인수는 지정된 형식 문자열에 따라 형식이 지정되고 결과는 작성기에 전달됩니다. 기록기는 &lt;code&gt;write_fmt&lt;/code&gt; 메소드를 사용하는 임의의 값일 수 있습니다 . 일반적으로 이것은 &lt;a href=&quot;fmt/trait.write&quot;&gt; &lt;code&gt;std::fmt::Write&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;io/trait.write&quot;&gt; &lt;code&gt;std::io::Write&lt;/code&gt; &lt;/a&gt; 특성 의 구현에서 비롯됩니다 . 매크로는 &lt;code&gt;write_fmt&lt;/code&gt; 메소드가 리턴하는 모든 것을 리턴합니다. 일반적으로 &lt;a href=&quot;fmt/type.result&quot;&gt; &lt;code&gt;std::fmt::Result&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9104464c61f2440f3d22798d14bf9b51373598ab" translate="yes" xml:space="preserve">
          <source>This macro functions by taking a formatting string literal containing &lt;code&gt;{}&lt;/code&gt; for each additional argument passed. &lt;code&gt;format_args!&lt;/code&gt; prepares the additional parameters to ensure the output can be interpreted as a string and canonicalizes the arguments into a single type. Any value that implements the &lt;a href=&quot;fmt/trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; trait can be passed to &lt;code&gt;format_args!&lt;/code&gt;, as can any &lt;a href=&quot;fmt/trait.debug&quot;&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt; implementation be passed to a &lt;code&gt;{:?}&lt;/code&gt; within the formatting string.</source>
          <target state="translated">이 매크로 는 전달 된 각 추가 인수에 대해 &lt;code&gt;{}&lt;/code&gt; 를 포함하는 형식화 문자열 리터럴을 사용하여 작동합니다 . &lt;code&gt;format_args!&lt;/code&gt; 출력이 문자열로 해석 될 수 있도록 추가 매개 변수를 준비하고 인수를 단일 유형으로 정규화합니다. &lt;a href=&quot;fmt/trait.display&quot;&gt; &lt;code&gt;Display&lt;/code&gt; &lt;/a&gt; 특성 을 구현하는 모든 값 을 &lt;code&gt;format_args!&lt;/code&gt; 전달할 수 있습니다 ! 형식화 문자열 내에서 모든 &lt;a href=&quot;fmt/trait.debug&quot;&gt; &lt;code&gt;Debug&lt;/code&gt; &lt;/a&gt; 구현을 &lt;code&gt;{:?}&lt;/code&gt; 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0f46ebdcffb6d5939dcac636e4ba0ac8074178d" translate="yes" xml:space="preserve">
          <source>This macro has a second form, where a custom panic message can be provided with or without arguments for formatting. See &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for syntax for this form.</source>
          <target state="translated">이 매크로는 두 번째 형식으로, 사용자 정의 패닉 메시지를 형식화를위한 인수와 함께 또는 인수없이 제공 할 수 있습니다. 이 양식의 구문 은 &lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b5986245d717af402afebe47105d05cdf22c051" translate="yes" xml:space="preserve">
          <source>This macro is provided in the standard library and will detect at runtime whether the specified CPU feature is detected. This does &lt;strong&gt;not&lt;/strong&gt; resolve at compile time unless the specified feature is already enabled for the entire crate. Runtime detection currently relies mostly on the &lt;code&gt;cpuid&lt;/code&gt; instruction.</source>
          <target state="translated">이 매크로는 표준 라이브러리에 제공되며 지정된 CPU 기능이 감지되는지 런타임에 감지합니다. 지정된 기능이 전체 상자에서 이미 활성화되어 있지 않으면 컴파일 타임에 해결 되지 &lt;strong&gt;않습니다&lt;/strong&gt; . 런타임 감지는 현재 대부분 &lt;code&gt;cpuid&lt;/code&gt; 명령어 에 의존 합니다.</target>
        </trans-unit>
        <trans-unit id="80d199c9b2bbee396aca26a7f3417fd4e87ff814" translate="yes" xml:space="preserve">
          <source>This macro is the perfect way to assert conditions in example code and in tests. &lt;code&gt;panic!&lt;/code&gt; is closely tied with the &lt;code&gt;unwrap&lt;/code&gt; method of both &lt;a href=&quot;option/enum.option#method.unwrap&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;result/enum.result#method.unwrap&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; enums. Both implementations call &lt;code&gt;panic!&lt;/code&gt; when they are set to None or Err variants.</source>
          <target state="translated">이 매크로는 예제 코드와 테스트에서 조건을 확인하는 완벽한 방법입니다. &lt;code&gt;panic!&lt;/code&gt; &lt;a href=&quot;option/enum.option#method.unwrap&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;result/enum.result#method.unwrap&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; 열거 형 의 &lt;code&gt;unwrap&lt;/code&gt; 메소드 와 밀접하게 연결되어 있습니다. 두 가지 구현 모두 &lt;code&gt;panic!&lt;/code&gt; None 또는 Err 변형으로 설정된 경우</target>
        </trans-unit>
        <trans-unit id="cf0774da3df0d29e08106daf482fff334bcea403" translate="yes" xml:space="preserve">
          <source>This macro is used to inject panic into a Rust thread, causing the thread to panic entirely. Each thread's panic can be reaped as the &lt;code&gt;Box&amp;lt;Any&amp;gt;&lt;/code&gt; type, and the single-argument form of the &lt;code&gt;panic!&lt;/code&gt; macro will be the value which is transmitted.</source>
          <target state="translated">이 매크로는 패닉을 Rust 스레드에 주입하여 스레드가 완전히 패닉되도록하는 데 사용됩니다. 각 스레드의 패닉은 &lt;code&gt;Box&amp;lt;Any&amp;gt;&lt;/code&gt; 유형과 단일 인수 형태의 &lt;code&gt;panic!&lt;/code&gt; 매크로는 전송되는 값입니다.</target>
        </trans-unit>
        <trans-unit id="e7802aaf0db102edbab92f402c03063ff3b73be4" translate="yes" xml:space="preserve">
          <source>This macro only takes one argument which is a string literal of the feature being tested for. The feature names supported are the lowercase versions of the ones defined by Intel in &lt;a href=&quot;https://software.intel.com/sites/landingpage/IntrinsicsGuide&quot;&gt;their documentation&lt;/a&gt;.</source>
          <target state="translated">이 매크로는 테스트 할 기능의 문자열 리터럴 인 하나의 인수 만 사용합니다. 지원되는 기능 이름은 &lt;a href=&quot;https://software.intel.com/sites/landingpage/IntrinsicsGuide&quot;&gt;설명서&lt;/a&gt; 에서 인텔이 정의한 소문자 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="4bd8a54709ee381edf667e1b754c2dd4776028dd" translate="yes" xml:space="preserve">
          <source>This macro produces a value of type &lt;a href=&quot;fmt/struct.arguments&quot;&gt;&lt;code&gt;fmt::Arguments&lt;/code&gt;&lt;/a&gt;. This value can be passed to the macros within &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for performing useful redirection. All other formatting macros (&lt;a href=&quot;macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;macro.println&quot;&gt;&lt;code&gt;println!&lt;/code&gt;&lt;/a&gt;, etc) are proxied through this one. &lt;code&gt;format_args!&lt;/code&gt;, unlike its derived macros, avoids heap allocations.</source>
          <target state="translated">이 매크로는 &lt;a href=&quot;fmt/struct.arguments&quot;&gt; &lt;code&gt;fmt::Arguments&lt;/code&gt; &lt;/a&gt; 유형의 값을 생성합니다 . 이 값은 유용한 리디렉션을 수행하기 위해 &lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt; 내의 매크로에 전달 될 수 있습니다 . 다른 모든 형식의 매크로 ( &lt;a href=&quot;macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;macro.println&quot;&gt; &lt;code&gt;println!&lt;/code&gt; &lt;/a&gt; 등)이 하나를 통해 프락시된다. &lt;code&gt;format_args!&lt;/code&gt; 파생 매크로와 달리 힙 할당을 피합니다.</target>
        </trans-unit>
        <trans-unit id="d49c196cc9f23d7594245f1cc87a1f518746592e" translate="yes" xml:space="preserve">
          <source>This macro should be used when a crate uses a conditional compilation strategy to provide better error messages for erroneous conditions. It's the compiler-level form of &lt;a href=&quot;macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt;, which emits an error at &lt;em&gt;runtime&lt;/em&gt;, rather than during compilation.</source>
          <target state="translated">상자에서 조건부 컴파일 전략을 사용하여 잘못된 조건에 대해 더 나은 오류 메시지를 제공 할 때이 매크로를 사용해야합니다. 컴파일러 수준의 &lt;a href=&quot;macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;컴파일 중이 아닌 &lt;em&gt;런타임시&lt;/em&gt; 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="68d15cf83524f34dd8d8be7a2a8e7bed6740e783" translate="yes" xml:space="preserve">
          <source>This macro supports the same names that &lt;code&gt;#[target_feature]&lt;/code&gt; supports. Unlike &lt;code&gt;#[target_feature]&lt;/code&gt;, however, this macro does not support names separated with a comma. Instead testing for multiple features must be done through separate macro invocations for now.</source>
          <target state="translated">이 매크로는 &lt;code&gt;#[target_feature]&lt;/code&gt; 가 지원하는 것과 동일한 이름을 지원합니다. 그러나 &lt;code&gt;#[target_feature]&lt;/code&gt; 와 달리이 매크로는 쉼표로 구분 된 이름을 지원하지 않습니다. 대신 여러 기능에 대한 테스트는 현재 별도의 매크로 호출을 통해 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="fefc6add454f34259443790785050840eebbeb57" translate="yes" xml:space="preserve">
          <source>This macro takes any number of comma-separated identifiers, and concatenates them all into one, yielding an expression which is a new identifier. Note that hygiene makes it such that this macro cannot capture local variables. Also, as a general rule, macros are only allowed in item, statement or expression position. That means while you may use this macro for referring to existing variables, functions or modules etc, you cannot define a new one with it.</source>
          <target state="translated">이 매크로는 임의의 수의 쉼표로 구분 된 식별자를 가져 와서 모두 하나로 결합하여 새로운 식별자 인 표현식을 생성합니다. 위생은이 매크로가 지역 변수를 캡처 할 수 없도록합니다. 또한 일반적으로 매크로는 항목, 명령문 또는 표현식 위치에서만 허용됩니다. 즉, 기존 변수, 함수 또는 모듈 등을 참조하기 위해이 매크로를 사용할 수 있지만 새 변수를 정의 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="a79ce9bb3fa69012483f80e7a1a2541065700d68" translate="yes" xml:space="preserve">
          <source>This macro takes any number of comma-separated literals, yielding an expression of type &lt;code&gt;&amp;amp;'static str&lt;/code&gt; which represents all of the literals concatenated left-to-right.</source>
          <target state="translated">이 매크로는 임의의 수의 쉼표로 구분 된 리터럴을 사용하여 왼쪽에서 오른쪽으로 연결된 모든 리터럴을 나타내는 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; 유형의 표현식을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="79fc3c2904becf8aa3c820c279472de0fe3a1f68" translate="yes" xml:space="preserve">
          <source>This macro will expand to the value of the named environment variable at compile time, yielding an expression of type &lt;code&gt;&amp;amp;'static str&lt;/code&gt;.</source>
          <target state="translated">이 매크로는 컴파일 타임에 명명 된 환경 변수의 값으로 확장되어 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; 유형의 표현식을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="95e973b1ebc33842358cee19e0dba22c8a81f994" translate="yes" xml:space="preserve">
          <source>This macro will yield an expression of type &lt;code&gt;&amp;amp;'static [u8; N]&lt;/code&gt; which is the contents of the file.</source>
          <target state="translated">이 매크로는 &lt;code&gt;&amp;amp;'static [u8; N]&lt;/code&gt; 파일의 내용입니다.</target>
        </trans-unit>
        <trans-unit id="9cdb0bb59a3aefac2ea084695df47352b8cc7f18" translate="yes" xml:space="preserve">
          <source>This macro will yield an expression of type &lt;code&gt;&amp;amp;'static str&lt;/code&gt; which is the contents of the file.</source>
          <target state="translated">이 매크로는 파일의 내용 인 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; 유형의 표현식을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="8d3907f6b0e9a61a4bdb55de9a362a92915237c3" translate="yes" xml:space="preserve">
          <source>This macro will yield an expression of type &lt;code&gt;&amp;amp;'static str&lt;/code&gt; which is the stringification of all the tokens passed to the macro. No restrictions are placed on the syntax of the macro invocation itself.</source>
          <target state="translated">이 매크로는 매크로에 전달 된 모든 토큰의 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; 유형의 표현식을 생성합니다 . 매크로 호출 자체의 구문에는 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="96f8e740156b1fe8242bb1857eb516b34c772e7e" translate="yes" xml:space="preserve">
          <source>This macro would parse the SQL statement inside it and check that it&amp;rsquo;s syntactically correct, which is much more complex processing than a &lt;code&gt;macro_rules!&lt;/code&gt; macro can do. The &lt;code&gt;sql!&lt;/code&gt; macro would be defined like this:</source>
          <target state="translated">이 매크로는 그 안에있는 SQL 문을 구문 분석하고 구문 상 올바른지 확인합니다. 이는 &lt;code&gt;macro_rules!&lt;/code&gt; 보다 훨씬 복잡한 처리입니다 ! 매크로가 할 수 있습니다. &lt;code&gt;sql!&lt;/code&gt; 매크로는 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f58f7dcc462ef7387fceff17b5cae04e3cbcbf04" translate="yes" xml:space="preserve">
          <source>This makes the trait implemented on all types in the scope. So if you try to implement it on another one after that, the implementations will conflict. Example:</source>
          <target state="translated">이를 통해 범위의 모든 유형에 특성이 구현됩니다. 따라서 그 후에 다른 것을 구현하려고하면 구현이 충돌합니다. 예:</target>
        </trans-unit>
        <trans-unit id="dafc2f14b4f56d8dc5d075ff34c826a36e387880" translate="yes" xml:space="preserve">
          <source>This may not actually increase the capacity:</source>
          <target state="translated">실제로 용량을 늘리지 못할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="af903b6fc00acf0d280f6c29b1e0e8d3aeb94082" translate="yes" xml:space="preserve">
          <source>This may only be called by &lt;code&gt;Read&lt;/code&gt;ers which guarantee that they will not read from buffers passed to &lt;code&gt;Read&lt;/code&gt; methods, and that the return value of the method accurately reflects the number of bytes that have been written to the head of the buffer.</source>
          <target state="translated">이은으로 호출 할 수 &lt;code&gt;Read&lt;/code&gt; 가 전달 버퍼에서 읽을 것이라는 점을 보증 ERS &lt;code&gt;Read&lt;/code&gt; 방법 및 메소드의 반환 값은 정확하게 버퍼의 머리에 기록 된 바이트 수를 반영.</target>
        </trans-unit>
        <trans-unit id="14a8a7c42cf833272747226b7446d6fe81b3ec47" translate="yes" xml:space="preserve">
          <source>This may require additional type hints in the function body.</source>
          <target state="translated">함수 본문에 추가 유형 힌트가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b07ba109060bf875c034ba50fdb9ffdabfec4929" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;&amp;lt;T: 'a + ?Sized&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;T: 'b + Sized&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; are all permitted.</source>
          <target state="translated">이것은 &lt;code&gt;&amp;lt;T: 'a + ?Sized&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;T: 'b + Sized&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 가 모두 허용됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7a8c1c98c2b07fe7a77662bf8cf1e31aa75a3d05" translate="yes" xml:space="preserve">
          <source>This means that any external crate referencing &lt;code&gt;implementation::api::f&lt;/code&gt; would receive a privacy violation, while the path &lt;code&gt;api::f&lt;/code&gt; would be allowed.</source>
          <target state="translated">즉, 외부 상자 참조 &lt;code&gt;implementation::api::f&lt;/code&gt; 는 개인 정보 보호 위반을 수신하지만 경로 &lt;code&gt;api::f&lt;/code&gt; 는 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="be2e4dfa333e1a56bbed2f9ca40e5f02293eda70" translate="yes" xml:space="preserve">
          <source>This means that perhaps some of the preceding patterns are too general, this one is too specific or the ordering is incorrect.</source>
          <target state="translated">이것은 아마도 앞의 패턴 중 일부가 너무 일반적이거나,이 패턴이 너무 구체적이거나 순서가 잘못되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3a6a30f5c049c4edc23b7fd66710a9051982b10a" translate="yes" xml:space="preserve">
          <source>This means that someone can specify such a function:</source>
          <target state="translated">이것은 누군가가 그러한 기능을 지정할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="cb26a69e23fbbf1b07ba0d9979e852887a91fd3d" translate="yes" xml:space="preserve">
          <source>This means that the contents of the first string above &lt;em&gt;will&lt;/em&gt; fit into a &lt;code&gt;char&lt;/code&gt; while the contents of the second string &lt;em&gt;will not&lt;/em&gt;. Trying to create a &lt;code&gt;char&lt;/code&gt; literal with the contents of the second string gives an error:</source>
          <target state="translated">제 문자열의 내용이 상술 한 것을 의미 &lt;em&gt;한다&lt;/em&gt; (A) 내로 맞 &lt;code&gt;char&lt;/code&gt; 동안 제 문자열의 내용은 &lt;em&gt;하지 않을 것이다&lt;/em&gt; . 두 번째 문자열의 내용으로 &lt;code&gt;char&lt;/code&gt; 리터럴 을 만들려고 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f9131c9dc6b963db63fbff2769fe5ceda6bacdcc" translate="yes" xml:space="preserve">
          <source>This means that the operands don't have to be moved out of.</source>
          <target state="translated">이것은 피연산자가 이동할 필요가 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b2ca51239acb100a6dd5efb03e14c814a0a94286" translate="yes" xml:space="preserve">
          <source>This means that when &lt;code&gt;s&lt;/code&gt; reaches the end of &lt;code&gt;demo&lt;/code&gt;, its destructor gets exclusive access to its &lt;code&gt;&amp;amp;mut&lt;/code&gt;-borrowed string data. allowing another borrow of that string data (&lt;code&gt;p&lt;/code&gt;), to exist across the drop of &lt;code&gt;s&lt;/code&gt; would be a violation of the principle that &lt;code&gt;&amp;amp;mut&lt;/code&gt;-borrows have exclusive, unaliased access to their referenced data.</source>
          <target state="translated">이것은 &lt;code&gt;s&lt;/code&gt; 가 &lt;code&gt;demo&lt;/code&gt; 의 끝에 도달하면 소멸자는 &lt;code&gt;&amp;amp;mut&lt;/code&gt; borrowed 문자열 데이터에 독점적으로 액세스 할 수 있음을 의미합니다. 해당 문자열 데이터 ( &lt;code&gt;p&lt;/code&gt; ) 의 다른 차용이 &lt;code&gt;s&lt;/code&gt; 의 드롭에 걸쳐 존재 하게하는 것은 &lt;code&gt;&amp;amp;mut&lt;/code&gt; borrows가 참조 된 데이터에 대한 독점적이고 별명으로 액세스 할 수 없다는 원칙을 위반하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="382ebf724244bccd694c658a6e7769ce6b7c071d" translate="yes" xml:space="preserve">
          <source>This means, that in addition to &lt;code&gt;a == b&lt;/code&gt; and &lt;code&gt;a != b&lt;/code&gt; being strict inverses, the equality must be (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">즉, &lt;code&gt;a == b&lt;/code&gt; 및 &lt;code&gt;a != b&lt;/code&gt; 외에 엄격한 역수를 갖는 등호 (모든 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; ) 는 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="f2cb7c4ca14739fd7d110ae41517acd9e412a5c2" translate="yes" xml:space="preserve">
          <source>This method by itself is safe, but using it correctly requires extra care. Another thread can change the strong count at any time, including potentially between calling this method and acting on the result.</source>
          <target state="translated">이 방법 자체는 안전하지만 올바르게 사용하려면 특별한주의가 필요합니다. 다른 스레드는이 메소드 호출과 결과 수행 사이를 포함하여 언제든지 강력한 수를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="949f62fcaa7fc2070951a1bf81357a1eb29cd126" translate="yes" xml:space="preserve">
          <source>This method by itself is safe, but using it correctly requires extra care. Another thread can change the weak count at any time, including potentially between calling this method and acting on the result.</source>
          <target state="translated">이 방법 자체는 안전하지만 올바르게 사용하려면 특별한주의가 필요합니다. 다른 스레드는이 메소드 호출과 결과 수행 사이를 포함하여 언제든지 약한 수를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3282baf6619178b04f6e093d59df95e6b50b4f0b" translate="yes" xml:space="preserve">
          <source>This method can be used for string data that is &lt;em&gt;terminated&lt;/em&gt;, rather than &lt;em&gt;separated&lt;/em&gt; by a pattern.</source>
          <target state="translated">이 메소드는 패턴으로 &lt;em&gt;구분&lt;/em&gt; 되지 않고 &lt;em&gt;종료&lt;/em&gt; 되는 문자열 데이터에 사용할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3369ccac8ace2a653ec652b1d0a5f9f1bd24f346" translate="yes" xml:space="preserve">
          <source>This method can be used to reverse a comparison:</source>
          <target state="translated">이 방법을 사용하면 비교를 반대로 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f13cbe122409bed70a7bfa8652dd2b252fa340b" translate="yes" xml:space="preserve">
          <source>This method can be useful for situations in which the vector is serving as a buffer for other code, particularly over FFI:</source>
          <target state="translated">이 방법은 벡터가 다른 코드, 특히 FFI를위한 버퍼 역할을하는 상황에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="ce975c1398d44efbe8c10a5c85f55c0075a45068" translate="yes" xml:space="preserve">
          <source>This method can only succeed if the entire byte slice was successfully written, and this method will not return until all data has been written or an error occurs.</source>
          <target state="translated">이 방법은 전체 바이트 슬라이스가 성공적으로 기록 된 경우에만 성공할 수 있으며 모든 데이터가 기록되거나 오류가 발생할 때까지 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b1f7d3cdb0bfa41dd91aa3d1bf03416a16ee48f3" translate="yes" xml:space="preserve">
          <source>This method differs from &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; by returning immediately if the channel's buffer is full or no receiver is waiting to acquire some data. Compared with &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt;, this function has two failure cases instead of one (one for disconnection, one for a full buffer).</source>
          <target state="translated">이 방법은 채널의 버퍼가 가득 찼거나 수신자가 데이터를 수집하기 위해 대기하지 않는 경우 즉시 리턴 하여 &lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 과 다릅니다 . &lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; 와 비교할 때이 함수는 하나 대신 두 개의 실패 사례가 있습니다 (하나는 연결 해제, 하나는 전체 버퍼).</target>
        </trans-unit>
        <trans-unit id="028002d34f3fafd7bc54cd77bcaa912497a3b074" translate="yes" xml:space="preserve">
          <source>This method does &lt;strong&gt;not&lt;/strong&gt; pass ownership of the raw file descriptor to the caller. The descriptor is only guaranteed to be valid while the original object has not yet been destroyed.</source>
          <target state="translated">이 메소드는 원시 파일 디스크립터의 소유권을 호출자에게 전달 하지 &lt;strong&gt;않습니다&lt;/strong&gt; . 디스크립터는 원래 오브젝트가 아직 파괴되지 않은 동안에 만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="5fd9fa51612a49edd496cd80117e23b29a509eb6" translate="yes" xml:space="preserve">
          <source>This method does &lt;strong&gt;not&lt;/strong&gt; return the length of the duration when represented by microseconds. The returned number always represents a fractional portion of a second (i.e., it is less than one million).</source>
          <target state="translated">이 메소드는 마이크로 초로 표시 될 때 지속 시간의 길이를 리턴 하지 &lt;strong&gt;않습니다&lt;/strong&gt; . 반환 된 숫자는 항상 초의 소수 부분을 나타냅니다 (즉, 백만 미만).</target>
        </trans-unit>
        <trans-unit id="d3a3c1cf0cc150bd1c72971205d2190e708b8d2b" translate="yes" xml:space="preserve">
          <source>This method does &lt;strong&gt;not&lt;/strong&gt; return the length of the duration when represented by milliseconds. The returned number always represents a fractional portion of a second (i.e., it is less than one thousand).</source>
          <target state="translated">이 메소드는 밀리 초로 표시 될 때 지속 시간의 길이를 리턴 하지 &lt;strong&gt;않습니다&lt;/strong&gt; . 반환 된 숫자는 항상 초의 소수 부분을 나타냅니다 (즉, 1000 미만).</target>
        </trans-unit>
        <trans-unit id="e8135547d5a3a3a5006fe1cbd5d76d770ff2a7a9" translate="yes" xml:space="preserve">
          <source>This method does &lt;strong&gt;not&lt;/strong&gt; return the length of the duration when represented by nanoseconds. The returned number always represents a fractional portion of a second (i.e., it is less than one billion).</source>
          <target state="translated">이 메소드는 나노초로 표시 될 때 지속 시간의 길이를 리턴 하지 &lt;strong&gt;않습니다&lt;/strong&gt; . 반환 된 숫자는 항상 초의 소수 부분을 나타냅니다 (즉, 10 억 미만).</target>
        </trans-unit>
        <trans-unit id="16f6f5d172fff1f1f8e9b8bb728e19c58e51b4b5" translate="yes" xml:space="preserve">
          <source>This method doesn't produce a value, but the write may fail. It's crucial to handle the error case, and &lt;em&gt;not&lt;/em&gt; write something like this:</source>
          <target state="translated">이 방법은 값을 생성하지 않지만 쓰기가 실패 할 수 있습니다. 오류 사례를 처리하고 다음과 같이 쓰지 &lt;em&gt;않는&lt;/em&gt; 것이 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="803e98a2b6e5f0d6a98c75881fdb55c1597f80f0" translate="yes" xml:space="preserve">
          <source>This method has a default implementation using &lt;code&gt;self.len()&lt;/code&gt;, so you don't need to implement it yourself.</source>
          <target state="translated">이 메소드에는 &lt;code&gt;self.len()&lt;/code&gt; 사용하는 기본 구현이 있으므로 직접 구현할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="02fc3c4c098f9a864e6c45270c0a8ae6ffc408ef" translate="yes" xml:space="preserve">
          <source>This method has a default implementation, so you usually should not implement it directly. However, if you can provide a more efficient implementation, you can do so. See the &lt;a href=&quot;trait.exactsizeiterator&quot;&gt;trait-level&lt;/a&gt; docs for an example.</source>
          <target state="translated">이 메소드에는 기본 구현이 있으므로 일반적으로 직접 구현하지 않아야합니다. 그러나보다 효율적인 구현을 제공 할 수 있다면 그렇게 할 수 있습니다. 예를 들어 &lt;a href=&quot;trait.exactsizeiterator&quot;&gt;특성 수준&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="89f3649aa28c1d3c90be74ebfb70d517cce77458" translate="yes" xml:space="preserve">
          <source>This method has no purpose when either input element &lt;code&gt;T&lt;/code&gt; or output element &lt;code&gt;U&lt;/code&gt; are zero-sized and will return the original slice without splitting anything.</source>
          <target state="translated">이 방법은 입력 요소 &lt;code&gt;T&lt;/code&gt; 또는 출력 요소 &lt;code&gt;U&lt;/code&gt; 가 크기가 0 인 경우 아무 목적도 없으며 아무 것도 나누지 않고 원래 슬라이스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="37d2a8db1a00abc88d21d10b6113bf279aaebd51" translate="yes" xml:space="preserve">
          <source>This method is called implicitly when the value goes out of scope, and cannot be called explicitly (this is compiler error &lt;a href=&quot;../../error-index#E0040&quot;&gt;E0040&lt;/a&gt;). However, the &lt;a href=&quot;../mem/fn.drop&quot;&gt;&lt;code&gt;std::mem::drop&lt;/code&gt;&lt;/a&gt; function in the prelude can be used to call the argument's &lt;code&gt;Drop&lt;/code&gt; implementation.</source>
          <target state="translated">이 메소드는 값이 범위를 벗어날 때 내재적으로 호출되며 명시 적으로 호출 할 수 없습니다 (이는 컴파일러 오류 &lt;a href=&quot;../../error-index#E0040&quot;&gt;E0040입니다&lt;/a&gt; ). 그러나, prelude 의 &lt;a href=&quot;../mem/fn.drop&quot;&gt; &lt;code&gt;std::mem::drop&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 인수의 &lt;code&gt;Drop&lt;/code&gt; 구현 을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0b2c9d3aaaa76ea8e330a8973b644085bc25e3bb" translate="yes" xml:space="preserve">
          <source>This method is carefully constructed to avoid allocation. It will consume the error, moving out the bytes, so that a copy of the bytes does not need to be made.</source>
          <target state="translated">이 방법은 할당을 피하기 위해 신중하게 구성됩니다. 바이트를 옮길 때 오류가 발생하여 바이트 사본을 만들 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="84886aa1dad1934a5c9bdd981667f36e45fab018" translate="yes" xml:space="preserve">
          <source>This method is equivalent to &lt;a href=&quot;#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; except that no runtime assertion is made that &lt;code&gt;v&lt;/code&gt; contains no 0 bytes, and it requires an actual byte vector, not anything that can be converted to one with Into.</source>
          <target state="translated">이 방법은 &lt;code&gt;v&lt;/code&gt; 에 0 바이트가 포함되지 않는다는 런타임 어설 션이 없고 실제 바이트 벡터가 필요 하다는 점을 제외하고는 &lt;a href=&quot;#method.new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 와 동등합니다 . Into를 사용하여 변환 할 수있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0358b021b2254c197a04c16c02e67b7c9901af56" translate="yes" xml:space="preserve">
          <source>This method is essentially a &lt;code&gt;transmute&lt;/code&gt; with respect to the elements in the returned middle slice, so all the usual caveats pertaining to &lt;code&gt;transmute::&amp;lt;T, U&amp;gt;&lt;/code&gt; also apply here.</source>
          <target state="translated">이 방법은 반환 된 중간 슬라이스의 요소와 관련하여 본질적으로 &lt;code&gt;transmute&lt;/code&gt; 이므로 변환식과 관련된 모든 일반적인주의 사항 &lt;code&gt;transmute::&amp;lt;T, U&amp;gt;&lt;/code&gt; 도 여기에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="dd229ccab2f3fea46c41c098065dd891d877a2e6" translate="yes" xml:space="preserve">
          <source>This method is identical to &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;thread::Builder::spawn&lt;/code&gt;&lt;/a&gt;, except for the relaxed lifetime bounds, which render it unsafe. For a more complete documentation see &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 편안한 수명 한계를 제외하고 &lt;a href=&quot;struct.builder#method.spawn&quot;&gt; &lt;code&gt;thread::Builder::spawn&lt;/code&gt; &lt;/a&gt; 과 동일하므로 안전하지 않습니다. 보다 완전한 문서는 &lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bc2506b00444cfc62462ac1af4908c0bbe44456" translate="yes" xml:space="preserve">
          <source>This method is implemented using up to three seek operations. If this method returns successfully, the seek position is unchanged (i.e. the position before calling this method is the same as afterwards). However, if this method returns an error, the seek position is unspecified.</source>
          <target state="translated">이 방법은 최대 3 개의 탐색 작업을 사용하여 구현됩니다. 이 메소드가 성공적으로 리턴되면 탐색 위치는 변경되지 않습니다 (즉,이 메소드를 호출하기 전의 위치는 이후와 동일 함). 그러나이 메소드가 오류를 리턴하면 탐색 위치는 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f531cfc3a2c409d73bd0f5c2e2364c282b1a69bd" translate="yes" xml:space="preserve">
          <source>This method is primarily intended for moving out values in drop. Instead of using &lt;a href=&quot;#method.drop&quot;&gt;&lt;code&gt;ManuallyDrop::drop&lt;/code&gt;&lt;/a&gt; to manually drop the value, you can use this method to take the value and use it however desired. &lt;code&gt;Drop&lt;/code&gt; will be invoked on the returned value following normal end-of-scope rules.</source>
          <target state="translated">이 방법은 주로 값을 떨어 뜨리기위한 것입니다. &lt;a href=&quot;#method.drop&quot;&gt; &lt;code&gt;ManuallyDrop::drop&lt;/code&gt; &lt;/a&gt; 을 사용 하여 값을 수동으로 삭제하는 대신 이 방법을 사용하여 값을 가져와 원하는대로 사용할 수 있습니다. 일반적인 범위 끝 규칙에 따라 반환 된 값에 대해 &lt;code&gt;Drop&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="923fe0c4f9dba0ad8dc8e37a00ed66b6a9da0759" translate="yes" xml:space="preserve">
          <source>This method is primarily used to interface with the &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro, but it is rare that this should explicitly be called. The &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt; macro should be favored to invoke this method instead.</source>
          <target state="translated">이 메소드는 주로 &lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt; 와 인터페이스하는 데 사용됩니다 ! 매크로, 그러나 명시 적으로 호출해야하는 경우는 거의 없습니다. &lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;대신이 메소드를 호출하기 위해 매크로를 선호해야합니다.</target>
        </trans-unit>
        <trans-unit id="80fc60d5306ac7d19519f64033eaf35397e48023" translate="yes" xml:space="preserve">
          <source>This method is soft-deprecated. &lt;a href=&quot;../../error/trait.error#method.description&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 더 이상 사용되지 않습니다. &lt;a href=&quot;../../error/trait.error#method.description&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e4625fa8bf128959917fb79c2180bb0bb7de232" translate="yes" xml:space="preserve">
          <source>This method is soft-deprecated. &lt;a href=&quot;../error/trait.error#method.description&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 더 이상 사용되지 않습니다. &lt;a href=&quot;../error/trait.error#method.description&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a9beb6c54e6c8b198cf2df220314195725bd7bb" translate="yes" xml:space="preserve">
          <source>This method is soft-deprecated. &lt;a href=&quot;error/trait.error#method.description&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 더 이상 사용되지 않습니다. &lt;a href=&quot;error/trait.error#method.description&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5490d12dcf25f9008acb9584a8ddf0c95e1664f2" translate="yes" xml:space="preserve">
          <source>This method is stable and usable, but it should be unsafe. To fix that, it got deprecated in favor of the unsafe &lt;a href=&quot;#tymethod.pre_exec&quot;&gt;&lt;code&gt;pre_exec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 안정적이고 사용 가능하지만 안전하지 않아야합니다. 이 문제를 해결하기 위해 안전하지 않은 &lt;a href=&quot;#tymethod.pre_exec&quot;&gt; &lt;code&gt;pre_exec&lt;/code&gt; &lt;/a&gt; 를 선호합니다 .</target>
        </trans-unit>
        <trans-unit id="881a668b22b8af1fbfcb4abff65037dd8a73fd44" translate="yes" xml:space="preserve">
          <source>This method is unsafe because a &lt;code&gt;Read&lt;/code&gt;er could otherwise return a non-zeroing &lt;code&gt;Initializer&lt;/code&gt; from another &lt;code&gt;Read&lt;/code&gt; type without an &lt;code&gt;unsafe&lt;/code&gt; block.</source>
          <target state="translated">때문에이 방법은 안전하지 않은 &lt;code&gt;Read&lt;/code&gt; 어 그렇지 않으면 비 제로 반환 할 수 &lt;code&gt;Initializer&lt;/code&gt; 서로 &lt;code&gt;Read&lt;/code&gt; 없이 형 &lt;code&gt;unsafe&lt;/code&gt; 블록.</target>
        </trans-unit>
        <trans-unit id="b649b72cfd66bc53cdd1236dc499f467fbbbfc65" translate="yes" xml:space="preserve">
          <source>This method requires &lt;a href=&quot;../clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; to be able clone the passed value. If you need more flexibility (or want to rely on &lt;a href=&quot;../default/trait.default&quot;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;), use &lt;a href=&quot;#method.resize_with&quot;&gt;&lt;code&gt;resize_with&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법을 사용하려면 &lt;a href=&quot;../clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 에서 전달 된 값을 복제 할 수 있어야합니다. 더 많은 유연성이 필요하거나 &lt;a href=&quot;../clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../default/trait.default&quot;&gt; &lt;code&gt;Default&lt;/code&gt; &lt;/a&gt; 를 사용하려면 &lt;a href=&quot;#method.resize_with&quot;&gt; &lt;code&gt;resize_with&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b95f081db21ce8cf4e6f46e10880425784f2765c" translate="yes" xml:space="preserve">
          <source>This method returns &lt;a href=&quot;../primitive.bool&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/a&gt; for addresses in the range reserved by [RFC 4291 section 2.4], i.e. addresses with the following format:</source>
          <target state="translated">이 메소드는 [RFC 4291 섹션 2.4]에 의해 예약 된 범위의 주소, 즉 다음 형식의 주소에 대해 &lt;a href=&quot;../primitive.bool&quot;&gt; &lt;code&gt;true&lt;/code&gt; &lt;/a&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="14217d50c79e4eb45c163835b69cd4e673a45e20" translate="yes" xml:space="preserve">
          <source>This method returns &lt;a href=&quot;../primitive.bool&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/a&gt; for site-local addresses as per &lt;a href=&quot;https://tools.ietf.org/html/rfc4291#section-2.5.7&quot;&gt;RFC 4291 section 2.5.7&lt;/a&gt;</source>
          <target state="translated">이 방법은 &lt;a href=&quot;https://tools.ietf.org/html/rfc4291#section-2.5.7&quot;&gt;RFC 4291 섹션 2.5.7에&lt;/a&gt; 따라 사이트 로컬 주소에 대해 &lt;a href=&quot;../primitive.bool&quot;&gt; &lt;code&gt;true&lt;/code&gt; &lt;/a&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="1fe438568aa64ab40ad3ae63a4e80c06e5f2d121" translate="yes" xml:space="preserve">
          <source>This method returns &lt;code&gt;true&lt;/code&gt; after iteration has finished:</source>
          <target state="translated">이 메소드는 반복이 완료된 후 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="da8759d1633206733343524980d7a489afd16956" translate="yes" xml:space="preserve">
          <source>This method returns an &lt;code&gt;Ordering&lt;/code&gt; between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 사이 의 &lt;code&gt;Ordering&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9f3bbc3554d60688630609ad13846c405e876fac" translate="yes" xml:space="preserve">
          <source>This method returns an &lt;code&gt;Ordering&lt;/code&gt; between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. &lt;a href=&quot;../../cmp/trait.ord#tymethod.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 사이 의 &lt;code&gt;Ordering&lt;/code&gt; 을 리턴합니다 . &lt;a href=&quot;../../cmp/trait.ord#tymethod.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e875552f6e4025920ca5a71d7c281b1fbfaaa2a8" translate="yes" xml:space="preserve">
          <source>This method returns an &lt;code&gt;Ordering&lt;/code&gt; between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. &lt;a href=&quot;../cmp/trait.ord#tymethod.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 사이 의 &lt;code&gt;Ordering&lt;/code&gt; 을 리턴합니다 . &lt;a href=&quot;../cmp/trait.ord#tymethod.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="400399c6db28cb18bc3db2944eff105cd4fca3da" translate="yes" xml:space="preserve">
          <source>This method returns an &lt;code&gt;Ordering&lt;/code&gt; between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. &lt;a href=&quot;cmp/trait.ord#tymethod.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 사이 의 &lt;code&gt;Ordering&lt;/code&gt; 을 리턴합니다 . &lt;a href=&quot;cmp/trait.ord#tymethod.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a47b24f63b5fe410c6da12441f9c98d2fe17c15" translate="yes" xml:space="preserve">
          <source>This method returns an &lt;code&gt;Ordering&lt;/code&gt; between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. &lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 사이 의 &lt;code&gt;Ordering&lt;/code&gt; 을 리턴합니다 . &lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3cf087c16e29fe754de64f334036b96fe0b3931" translate="yes" xml:space="preserve">
          <source>This method returns an ordering between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values if one exists.</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 값 사이의 순서를 리턴합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="eb17b52a796e0693ad06487790fde93b26d1d781" translate="yes" xml:space="preserve">
          <source>This method returns an ordering between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values if one exists. &lt;a href=&quot;../../cmp/trait.partialord#tymethod.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 값 사이의 순서를 리턴합니다 (있는 경우). &lt;a href=&quot;../../cmp/trait.partialord#tymethod.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39953b189e90eb45e12641b5213bac17fb6a067f" translate="yes" xml:space="preserve">
          <source>This method returns an ordering between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values if one exists. &lt;a href=&quot;../cmp/trait.partialord#tymethod.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 값 사이의 순서를 리턴합니다 (있는 경우). &lt;a href=&quot;../cmp/trait.partialord#tymethod.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a426df736d2450e1483768eb842876560c3cb8d7" translate="yes" xml:space="preserve">
          <source>This method returns an ordering between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values if one exists. &lt;a href=&quot;cmp/trait.partialord#tymethod.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 값 사이의 순서를 리턴합니다 (있는 경우). &lt;a href=&quot;cmp/trait.partialord#tymethod.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d64233d3af8194ec0eefc11c727f80c62d14630a" translate="yes" xml:space="preserve">
          <source>This method returns an ordering between &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values if one exists. &lt;a href=&quot;trait.partialord#tymethod.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 값 사이의 순서를 리턴합니다 (있는 경우). &lt;a href=&quot;trait.partialord#tymethod.partial_cmp&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="edb583eeb291a512bd3d2447d1fbe080bc3b9dce" translate="yes" xml:space="preserve">
          <source>This method should generally not be invoked manually, but rather through the &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt; macro itself.</source>
          <target state="translated">이 메소드는 일반적으로 수동으로 호출되는 것이 아니라 &lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt; 통해 호출되어야합니다 ! 매크로 자체.</target>
        </trans-unit>
        <trans-unit id="d7174476c42e976c470e5d3d833837447fe7b624" translate="yes" xml:space="preserve">
          <source>This method splits the slice into three distinct slices: prefix, correctly aligned middle slice of a new type, and the suffix slice. The method does a best effort to make the middle slice the greatest length possible for a given type and input slice, but only your algorithm's performance should depend on that, not its correctness.</source>
          <target state="translated">이 방법은 슬라이스를 접두사, 올바르게 정렬 된 새 유형의 중간 슬라이스 및 접미사 슬라이스의 세 가지 개별 슬라이스로 분할합니다. 이 방법은 중간 슬라이스를 주어진 유형과 입력 슬라이스에 대해 가능한 최대 길이로 만들기 위해 최선의 노력을 다하지만 알고리즘의 정확성 만이 아니라 그 성능에 의존해야합니다.</target>
        </trans-unit>
        <trans-unit id="8000abb209a936f78ade63de708f2749dd5748c7" translate="yes" xml:space="preserve">
          <source>This method tests for &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;!=&lt;/code&gt; 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="3639f2a22177e5f40d5314d575e638c54018960a" translate="yes" xml:space="preserve">
          <source>This method tests for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values to be equal, and is used by &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; 값이 같은지 테스트 하고 &lt;code&gt;==&lt;/code&gt; 에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f00abfa17fbf62bab913260c77c4736307dd6b08" translate="yes" xml:space="preserve">
          <source>This method tests for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values to be equal, and is used by &lt;code&gt;==&lt;/code&gt;. &lt;a href=&quot;../../cmp/trait.partialeq#tymethod.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; 값이 같은지 테스트 하고 &lt;code&gt;==&lt;/code&gt; 에 의해 사용됩니다 . &lt;a href=&quot;../../cmp/trait.partialeq#tymethod.eq&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c257c51217cc2c43c24273fbc2f10164037dd5b1" translate="yes" xml:space="preserve">
          <source>This method tests for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values to be equal, and is used by &lt;code&gt;==&lt;/code&gt;. &lt;a href=&quot;../cmp/trait.partialeq#tymethod.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; 값이 같은지 테스트 하고 &lt;code&gt;==&lt;/code&gt; 에 의해 사용됩니다 . &lt;a href=&quot;../cmp/trait.partialeq#tymethod.eq&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34550195d18fa1542599bef9324d74efad99aeb1" translate="yes" xml:space="preserve">
          <source>This method tests for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values to be equal, and is used by &lt;code&gt;==&lt;/code&gt;. &lt;a href=&quot;cmp/trait.partialeq#tymethod.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; 값이 같은지 테스트 하고 &lt;code&gt;==&lt;/code&gt; 에 의해 사용됩니다 . &lt;a href=&quot;cmp/trait.partialeq#tymethod.eq&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d32084f8ce776d9a529be0f1da6ec9ca22e44396" translate="yes" xml:space="preserve">
          <source>This method tests for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; values to be equal, and is used by &lt;code&gt;==&lt;/code&gt;. &lt;a href=&quot;trait.partialeq#tymethod.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; 값이 같은지 테스트 하고 &lt;code&gt;==&lt;/code&gt; 에 의해 사용됩니다 . &lt;a href=&quot;trait.partialeq#tymethod.eq&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9893b74b381c1707e88afd0a7ed6401e06b38424" translate="yes" xml:space="preserve">
          <source>This method tests greater than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;&lt;/code&gt; operator.</source>
          <target state="translated">이 방법은보다 큰 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 테스트 하고 &lt;code&gt;&amp;gt;&lt;/code&gt; 연산자에서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9be75e39e05fc52a961a6f8a30bebafa3abc619e" translate="yes" xml:space="preserve">
          <source>This method tests greater than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;&lt;/code&gt; operator. &lt;a href=&quot;../../cmp/trait.partialord#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은보다 큰 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 테스트 하고 &lt;code&gt;&amp;gt;&lt;/code&gt; 연산자에서 사용합니다. &lt;a href=&quot;../../cmp/trait.partialord#method.gt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8b084733b90b43f4725bbd31294cb1f36404ce0a" translate="yes" xml:space="preserve">
          <source>This method tests greater than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;&lt;/code&gt; operator. &lt;a href=&quot;../cmp/trait.partialord#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은보다 큰 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 테스트 하고 &lt;code&gt;&amp;gt;&lt;/code&gt; 연산자에서 사용합니다. &lt;a href=&quot;../cmp/trait.partialord#method.gt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44184bc5bd845c73d3a6bdc521b7927b64cd5369" translate="yes" xml:space="preserve">
          <source>This method tests greater than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;&lt;/code&gt; operator. &lt;a href=&quot;cmp/trait.partialord#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은보다 큰 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 테스트 하고 &lt;code&gt;&amp;gt;&lt;/code&gt; 연산자에서 사용합니다. &lt;a href=&quot;cmp/trait.partialord#method.gt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8eec657a4246dd487288b986e3d57dfd9657b208" translate="yes" xml:space="preserve">
          <source>This method tests greater than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;&lt;/code&gt; operator. &lt;a href=&quot;trait.partialord#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은보다 큰 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 테스트 하고 &lt;code&gt;&amp;gt;&lt;/code&gt; 연산자에서 사용합니다. &lt;a href=&quot;trait.partialord#method.gt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0eabc442f100ec2b7e353c049aaaf4ca623d1f2c" translate="yes" xml:space="preserve">
          <source>This method tests greater than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator.</source>
          <target state="translated">이 방법은 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 크거나 같고 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="4194eb24934481036250e733ab18937ab48da677" translate="yes" xml:space="preserve">
          <source>This method tests greater than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator. &lt;a href=&quot;../../cmp/trait.partialord#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 크거나 같고 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;../../cmp/trait.partialord#method.ge&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="219eec29ea3645fe37ee0a3de43c26a2abe5b61f" translate="yes" xml:space="preserve">
          <source>This method tests greater than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator. &lt;a href=&quot;../cmp/trait.partialord#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 크거나 같고 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;../cmp/trait.partialord#method.ge&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a7907168214aeaea1aa4db413b937e0f747bd41c" translate="yes" xml:space="preserve">
          <source>This method tests greater than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator. &lt;a href=&quot;cmp/trait.partialord#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 크거나 같고 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;cmp/trait.partialord#method.ge&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e579d59fed2657492555041f61545aa7206f59b6" translate="yes" xml:space="preserve">
          <source>This method tests greater than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator. &lt;a href=&quot;trait.partialord#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 방법은 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 크거나 같고 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;trait.partialord#method.ge&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0e789163efc5086c683b5a1f62c9a3bb50e4538" translate="yes" xml:space="preserve">
          <source>This method tests less than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;&lt;/code&gt; operator.</source>
          <target state="translated">이 메소드는보다 적은 테스트 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; )를 수행하며 &lt;code&gt;&amp;lt;&lt;/code&gt; 연산자 가 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="a9a38093c98e8f8478fc7a4cb9a47c1ad908df47" translate="yes" xml:space="preserve">
          <source>This method tests less than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;&lt;/code&gt; operator. &lt;a href=&quot;../../cmp/trait.partialord#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는보다 적은 테스트 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; )를 수행하며 &lt;code&gt;&amp;lt;&lt;/code&gt; 연산자 가 사용합니다 . &lt;a href=&quot;../../cmp/trait.partialord#method.lt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d167afca39913e71e4062a05ae7a9d99838896ab" translate="yes" xml:space="preserve">
          <source>This method tests less than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;&lt;/code&gt; operator. &lt;a href=&quot;../cmp/trait.partialord#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는보다 적은 테스트 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; )를 수행하며 &lt;code&gt;&amp;lt;&lt;/code&gt; 연산자 가 사용합니다 . &lt;a href=&quot;../cmp/trait.partialord#method.lt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ebc7cc22118ac04d1f984d545d5be0d85818a1e" translate="yes" xml:space="preserve">
          <source>This method tests less than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;&lt;/code&gt; operator. &lt;a href=&quot;cmp/trait.partialord#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는보다 적은 테스트 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; )를 수행하며 &lt;code&gt;&amp;lt;&lt;/code&gt; 연산자 가 사용합니다 . &lt;a href=&quot;cmp/trait.partialord#method.lt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="54945ad3f8cac4a154fb7b9e35518b30ae999d4d" translate="yes" xml:space="preserve">
          <source>This method tests less than (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;&lt;/code&gt; operator. &lt;a href=&quot;trait.partialord#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는보다 적은 테스트 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; )를 수행하며 &lt;code&gt;&amp;lt;&lt;/code&gt; 연산자 가 사용합니다 . &lt;a href=&quot;trait.partialord#method.lt&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d161a6ff3e691349ec054ac0d4002d49a30e7893" translate="yes" xml:space="preserve">
          <source>This method tests less than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;=&lt;/code&gt; operator.</source>
          <target state="translated">이 메소드는 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 이하의 테스트를 수행 하며 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산자에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="aadf89f483a504081f46ca5ef3749d0af43a4387" translate="yes" xml:space="preserve">
          <source>This method tests less than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;=&lt;/code&gt; operator. &lt;a href=&quot;../../cmp/trait.partialord#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 이하의 테스트를 수행 하며 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;../../cmp/trait.partialord#method.le&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ddb1ab74197bbadea31b206cbb3f4c8f2c4d9f37" translate="yes" xml:space="preserve">
          <source>This method tests less than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;=&lt;/code&gt; operator. &lt;a href=&quot;../cmp/trait.partialord#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 이하의 테스트를 수행 하며 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;../cmp/trait.partialord#method.le&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db00fc514ef8b2e5769c8d739b13605dcfb91f42" translate="yes" xml:space="preserve">
          <source>This method tests less than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;=&lt;/code&gt; operator. &lt;a href=&quot;cmp/trait.partialord#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 이하의 테스트를 수행 하며 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;cmp/trait.partialord#method.le&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bca462ad1eb0c753d442b14b7fe002228f03d1ee" translate="yes" xml:space="preserve">
          <source>This method tests less than or equal to (for &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;) and is used by the &lt;code&gt;&amp;lt;=&lt;/code&gt; operator. &lt;a href=&quot;trait.partialord#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메소드는 ( &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; ) 이하의 테스트를 수행 하며 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산자에 의해 사용됩니다 . &lt;a href=&quot;trait.partialord#method.le&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f2ae443e73d5f88ef06a1d6b529c7d18527f78a" translate="yes" xml:space="preserve">
          <source>This method uses &lt;a href=&quot;../default/trait.default&quot;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; to create new values on every push. If you'd rather &lt;a href=&quot;../clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; a given value, use &lt;a href=&quot;#method.resize&quot;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 &lt;a href=&quot;../default/trait.default&quot;&gt; &lt;code&gt;Default&lt;/code&gt; &lt;/a&gt; 을 사용하여 모든 푸시에서 새 값을 만듭니다. 당신은 오히려 줄 경우 &lt;a href=&quot;../clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 주어진 값, 사용 &lt;a href=&quot;#method.resize&quot;&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a5ffc4fb20de54f6e75ded6f37d7e6542ba4dcb3" translate="yes" xml:space="preserve">
          <source>This method uses a closure to create new values on every push. If you'd rather &lt;a href=&quot;../clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; a given value, use &lt;a href=&quot;#method.resize&quot;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;. If you want to use the &lt;a href=&quot;../default/trait.default&quot;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; trait to generate values, you can pass &lt;a href=&quot;../default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;Default::default()&lt;/code&gt;&lt;/a&gt; as the second argument.</source>
          <target state="translated">이 방법은 클로저를 사용하여 모든 푸시에서 새 값을 만듭니다. 당신은 오히려 줄 경우 &lt;a href=&quot;../clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt; 주어진 값, 사용 &lt;a href=&quot;#method.resize&quot;&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;../default/trait.default&quot;&gt; &lt;code&gt;Default&lt;/code&gt; &lt;/a&gt; 특성 을 사용하여 값을 생성 하려는 경우 두 번째 인수로 &lt;a href=&quot;../default/trait.default#tymethod.default&quot;&gt; &lt;code&gt;Default::default()&lt;/code&gt; &lt;/a&gt; 를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57f44223f055f4bc85ef6eebc9a26838b98e07df" translate="yes" xml:space="preserve">
          <source>This method validates the format defined in the RFC and won't recognize the following addresses such as &lt;code&gt;fe80:0:0:1::&lt;/code&gt; or &lt;code&gt;fe81::&lt;/code&gt; as unicast link-local addresses for example. If you need a less strict validation use &lt;a href=&quot;struct.ipv6addr#method.is_unicast_link_local&quot;&gt;&lt;code&gt;is_unicast_link_local()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 방법은 RFC에 정의 된 형식의 유효성을 검사하고 &lt;code&gt;fe80:0:0:1::&lt;/code&gt; 또는 &lt;code&gt;fe81::&lt;/code&gt; 와 같은 다음 주소 를 유니 캐스트 링크 로컬 주소로 인식하지 않습니다 . 덜 엄격한 유효성 검사가 필요한 경우 대신 &lt;a href=&quot;struct.ipv6addr#method.is_unicast_link_local&quot;&gt; &lt;code&gt;is_unicast_link_local()&lt;/code&gt; &lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="34a9aeb12096c73821e3d3f2146e3bcd68d312a7" translate="yes" xml:space="preserve">
          <source>This method will be deprecated in favor of the identically-named inherent methods on &lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;[u8]&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;u8&lt;/code&gt; , &lt;code&gt;char&lt;/code&gt; , &lt;code&gt;[u8]&lt;/code&gt; 및 &lt;code&gt;str&lt;/code&gt; 에서 동일한 이름의 고유 메소드를 위해 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="dab63bf4ac92d7a8265610c22503839aea1e5938" translate="yes" xml:space="preserve">
          <source>This method will block the calling thread if another initialization routine is currently running.</source>
          <target state="translated">이 메소드는 다른 초기화 루틴이 현재 실행중인 경우 호출 스레드를 차단합니다.</target>
        </trans-unit>
        <trans-unit id="4dcd7df93995d5669f9a19d9090b19b5d2473592" translate="yes" xml:space="preserve">
          <source>This method will continuously call &lt;a href=&quot;#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; until there is no more data to be written or an error of non-&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind is returned. This method will not return until the entire buffer has been successfully written or such an error occurs. The first error that is not of &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind generated from this method will be returned.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 데이터가 더 이상 &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 종류 의 오류 가 리턴 될 때까지 쓰기 를 계속 호출 합니다. 이 메소드는 전체 버퍼가 성공적으로 작성되거나 그러한 오류가 발생할 때까지 리턴되지 않습니다. 이 메소드에서 생성 된 &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 종류 가 아닌 첫 번째 오류가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0bf4855a0328106cbe0baa3671aad93298aa630b" translate="yes" xml:space="preserve">
          <source>This method will continuously call &lt;a href=&quot;#tymethod.write_at&quot;&gt;&lt;code&gt;write_at&lt;/code&gt;&lt;/a&gt; until there is no more data to be written or an error of non-&lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind is returned. This method will not return until the entire buffer has been successfully written or such an error occurs. The first error that is not of &lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind generated from this method will be returned.</source>
          <target state="translated">이 메소드는 쓸 데이터가 더 이상 &lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 종류 의 오류 가 리턴 될 때까지 &lt;a href=&quot;#tymethod.write_at&quot;&gt; &lt;code&gt;write_at&lt;/code&gt; &lt;/a&gt; 를 계속 호출 합니다. 이 메소드는 전체 버퍼가 성공적으로 작성되거나 그러한 오류가 발생할 때까지 리턴되지 않습니다. 이 메소드에서 생성 된 &lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt; 종류 가 아닌 첫 번째 오류가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="b531b20d0eb83c8a34e8a69001999cab52351ebf" translate="yes" xml:space="preserve">
          <source>This method will currently always return &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt;, but this may change in future versions.</source>
          <target state="translated">이 메소드는 현재 항상 &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; 을&lt;/a&gt; 리턴 하지만 이후 버전에서는 변경 될 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
