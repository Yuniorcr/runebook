<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="9d100ce5589542ca940be1976bd5873a4f885c2a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element from the end of the iterator. &lt;a href=&quot;../iter/trait.doubleendediterator#method.nth_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 끝에서 &lt;code&gt;n&lt;/code&gt; 번째 요소를 반환 합니다. &lt;a href=&quot;../iter/trait.doubleendediterator#method.nth_back&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="38ef14d37b67e942e2153f5c9d696c3418ebb368" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element from the end of the iterator. &lt;a href=&quot;iter/trait.doubleendediterator#method.nth_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 끝에서 &lt;code&gt;n&lt;/code&gt; 번째 요소를 반환 합니다. &lt;a href=&quot;iter/trait.doubleendediterator#method.nth_back&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58ca0a7a5ea51c978b54d16bf5bd591fb190a5fe" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element from the end of the iterator. &lt;a href=&quot;trait.doubleendediterator#method.nth_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 끝에서 &lt;code&gt;n&lt;/code&gt; 번째 요소를 반환 합니다. &lt;a href=&quot;trait.doubleendediterator#method.nth_back&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="14e269878aad58bfba0f8a6b9a5d62a272706507" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator.</source>
          <target state="translated">반복자 의 &lt;code&gt;n&lt;/code&gt; 번째 요소를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="b9033512050d13ee4fd6379769391e49de67e8a0" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자 의 &lt;code&gt;n&lt;/code&gt; 번째 요소를 리턴 합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.nth&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18689ac1d66567743c12371477712deb272ddff6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;../../iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자 의 &lt;code&gt;n&lt;/code&gt; 번째 요소를 리턴 합니다. &lt;a href=&quot;../../iter/trait.iterator#method.nth&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77dd18914e5d697fcef45b39830d0a4287533017" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;../iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자 의 &lt;code&gt;n&lt;/code&gt; 번째 요소를 리턴 합니다. &lt;a href=&quot;../iter/trait.iterator#method.nth&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f21157c3f7a41ca454f82ba07d4877e4e38fc48" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">를 반환 &lt;code&gt;n&lt;/code&gt; 반복자 n 번째 요소를 합니다. &lt;a href=&quot;iter/trait.iterator#method.nth&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e55a448e57797917ffc9942478894a44fc7c5bea" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">를 반환 &lt;code&gt;n&lt;/code&gt; 반복자 n 번째 요소를 합니다. &lt;a href=&quot;trait.iterator#method.nth&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="460ca8fe4283e5e27aa6b84168d1789b45971471" translate="yes" xml:space="preserve">
          <source>Returns the ID of the device containing the file.</source>
          <target state="translated">파일이 포함 된 장치의 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="390b0b5c091fdc42b36c6c1a6468dfd2992db22c" translate="yes" xml:space="preserve">
          <source>Returns the ID of the device containing the file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.dev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일이 포함 된 장치의 ID를 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.dev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a836ea954851ab388f8e87a14fae0a9de53bc224" translate="yes" xml:space="preserve">
          <source>Returns the IP address associated with this socket address.</source>
          <target state="translated">이 소켓 주소와 관련된 IP 주소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4cd21405eac57719d505795085caf6e1f1cbb2ff" translate="yes" xml:space="preserve">
          <source>Returns the OS error that this error represents (if any).</source>
          <target state="translated">이 에러가 나타내는 OS 에러를 돌려줍니다 (존재하는 경우).</target>
        </trans-unit>
        <trans-unit id="00c287196a9bc77774ec1ee000e67c43c9ddee81" translate="yes" xml:space="preserve">
          <source>Returns the OS-assigned process identifier associated with this child.</source>
          <target state="translated">이 자식과 관련된 OS 할당 프로세스 식별자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="af01d0b295d0e18424cfa1df98f194156ee4be60" translate="yes" xml:space="preserve">
          <source>Returns the OS-assigned process identifier associated with this process's parent.</source>
          <target state="translated">이 프로세스의 부모와 관련된 OS 할당 프로세스 식별자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2642c21b17ad0bbc68b66a3f6af93dcd035e754" translate="yes" xml:space="preserve">
          <source>Returns the OS-assigned process identifier associated with this process.</source>
          <target state="translated">이 프로세스와 관련된 OS 할당 프로세스 식별자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7f153b8459edfc5a0116cdf6d7bab65fb3039366" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 절대 값을 반환 .</target>
        </trans-unit>
        <trans-unit id="95dfcf5e56a7c2e226404c8515fc2a003c87d1b1" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 절대 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4b47d10077be98d2837baa6f429539b4ba07be79" translate="yes" xml:space="preserve">
          <source>Returns the address of this socket's peer.</source>
          <target state="translated">이 소켓 피어의 주소를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="1096db2ef0d57868e6fc5de2530c28afaab9c5c4" translate="yes" xml:space="preserve">
          <source>Returns the address of this socket.</source>
          <target state="translated">이 소켓의 주소를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="f68892931676b291794ef02d77f7452d92d980e3" translate="yes" xml:space="preserve">
          <source>Returns the address's multicast scope if the address is multicast.</source>
          <target state="translated">주소가 멀티 캐스트 인 경우 주소의 멀티 캐스트 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="571a27f18f24855498fe4bc29f0edc5098eb7508" translate="yes" xml:space="preserve">
          <source>Returns the amount of padding we must insert after &lt;code&gt;self&lt;/code&gt; to ensure that the following address will satisfy &lt;code&gt;align&lt;/code&gt; (measured in bytes).</source>
          <target state="translated">다음 주소가 &lt;code&gt;align&lt;/code&gt; (바이트 단위로 측정)을 만족시키기 위해 &lt;code&gt;self&lt;/code&gt; 뒤에 삽입해야하는 패딩 양을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="83f57dc9849811be04d028f0498d59905edc2d8c" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from an earlier point in time.</source>
          <target state="translated">이전 시점에서 경과 된 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="661f516e7ce38ed44d8bed6493a9d9f2fa25da91" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or None if that instant is earlier than this one.</source>
          <target state="translated">다른 순간에서이 순간까지 경과 한 시간을 반환하거나 해당 시점이 이전보다 빠른 경우 없음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ea5b1537a461194a8a8070b9f16e33cf940fbf4b" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or None if that instant is later than this one.</source>
          <target state="translated">다른 순간에서이 순간까지 경과 한 시간을 반환하거나 해당 순간이이 순간보다 늦으면 None을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6648173167bfd6e04de078f1133974688e8e73d5" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or zero duration if that instant is earlier than this one.</source>
          <target state="translated">다른 순간에서이 순간까지 경과 한 시간을 반환하거나 해당 시점이 이전보다 빠른 경우 지속 시간을 0으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ebbde0901130c337b5daccbbe55bba4893561a1a" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or zero duration if that instant is later than this one.</source>
          <target state="translated">다른 순간에서이 순간까지 경과 한 시간을 반환하거나, 해당 순간이이 순간보다 늦으면 지속 시간을 0으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="481ac3655a5f50eefcf07bd434a47b2156a2b005" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one.</source>
          <target state="translated">다른 순간에서이 순간까지 경과 한 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a5e6b1a067c8544d3444c8c0c62e8c7492579150" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed since this instant was created.</source>
          <target state="translated">이 인스턴트가 작성된 이후 경과 된 시간을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4c335823604c40ba9a05d70db0422f547fa50030" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed since this system time was created.</source>
          <target state="translated">이 시스템 시간이 작성된 이후 경과 된 시간을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9c7b60f00593f18e99c03513fef76bfdb8651c3a" translate="yes" xml:space="preserve">
          <source>Returns the arguments that this program was started with (normally passed via the command line).</source>
          <target state="translated">이 프로그램이 시작된 인수를 반환합니다 (일반적으로 명령 줄을 통해 전달됨).</target>
        </trans-unit>
        <trans-unit id="eddd2de90acb530a0cd14a32cb480accd0e13dad" translate="yes" xml:space="preserve">
          <source>Returns the arguments which this program was started with (normally passed via the command line).</source>
          <target state="translated">이 프로그램이 시작된 인수를 리턴합니다 (일반적으로 명령 행을 통해 전달됨).</target>
        </trans-unit>
        <trans-unit id="db2a0c893c8bdbce488ae7385c9b4f666ffeb5df" translate="yes" xml:space="preserve">
          <source>Returns the bare file name of this directory entry without any other leading path component.</source>
          <target state="translated">다른 선행 경로 구성 요소없이이 디렉토리 항목의 기본 파일 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3999977e878d4aa0df89e8853564ae3d1f1c567f" translate="yes" xml:space="preserve">
          <source>Returns the base 10 logarithm of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 밑이 10 인 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="df12b968d4a5f671f7a70567b9e9ead6d13963a5" translate="yes" xml:space="preserve">
          <source>Returns the base 10 logarithm of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 밑이 10 인 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e1db5ea5edb2aaee417a72427aba39448ccf01d9" translate="yes" xml:space="preserve">
          <source>Returns the base 10 logarithm of the number.</source>
          <target state="translated">숫자의 밑이 10 인 로그를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6151fcf3f9961fbd57add2141f31d87f2d6ce8ee" translate="yes" xml:space="preserve">
          <source>Returns the base 2 logarithm of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 밑이 2 인 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7c3d2718f63f9ae2596878aaf828552f161b630a" translate="yes" xml:space="preserve">
          <source>Returns the base 2 logarithm of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 밑이 2 인 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="71d28db9d18df1e09f50774b6e91e66160fb9960" translate="yes" xml:space="preserve">
          <source>Returns the base 2 logarithm of the number.</source>
          <target state="translated">숫자의 밑이 2 인 로그를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f7c1584217383858ca96b2bfee2d773c2a8de3d7" translate="yes" xml:space="preserve">
          <source>Returns the block size for filesystem I/O.</source>
          <target state="translated">파일 시스템 I / O의 블록 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="240a0cf3374a2fba84e36a7cd86f62cc346d0b41" translate="yes" xml:space="preserve">
          <source>Returns the block size for filesystem I/O. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일 시스템 I / O의 블록 크기를 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c5839565fa033887cf64e24322a4b97f0c1be77" translate="yes" xml:space="preserve">
          <source>Returns the blocksize for filesystem I/O.</source>
          <target state="translated">파일 시스템 I / O의 블록 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a707b00168a099a156be97cf00c9be0bc23f3e8" translate="yes" xml:space="preserve">
          <source>Returns the blocksize for filesystem I/O. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일 시스템 I / O의 블록 크기를 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f4e14676896dc292fcb2906c4529e0d9b8ddb708" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator.</source>
          <target state="translated">반복자의 나머지 길이에 대한 경계를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d2a3690a9a9438438e3196a0f625ac7a1a2c741c" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 나머지 길이에 대한 경계를 리턴합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.size_hint&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8891999a029776a6e5e86fccbe09d33ed70b4be9" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;../../iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 나머지 길이에 대한 경계를 리턴합니다. &lt;a href=&quot;../../iter/trait.iterator#method.size_hint&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1229a7eaa643cf7a2a40fae1eb4dcdc17b538bfa" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;../iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 나머지 길이에 대한 경계를 리턴합니다. &lt;a href=&quot;../iter/trait.iterator#method.size_hint&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85cfd8e260500745daa31eee7d23e3e22d4b7d22" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 나머지 길이에 대한 경계를 리턴합니다. &lt;a href=&quot;iter/trait.iterator#method.size_hint&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3f770f0e889ff8f81994451fc65d944f57657d5" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 나머지 길이에 대한 경계를 리턴합니다. &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a4e2be8472a8a9457bd5d5e78f8221e9bef80138" translate="yes" xml:space="preserve">
          <source>Returns the buffered writer instance which generated the error.</source>
          <target state="translated">오류를 생성 한 버퍼 된 기록기 인스턴스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a9e06b89d312a13a698accce9ab692b3154b3aee" translate="yes" xml:space="preserve">
          <source>Returns the byte index for the first character of the rightmost match of the pattern in this string slice.</source>
          <target state="translated">이 문자열 조각에서 패턴의 가장 오른쪽 일치 항목의 첫 번째 문자에 대한 바이트 인덱스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3e5a4ca96fd13952f46f410156017da97dafd2ff" translate="yes" xml:space="preserve">
          <source>Returns the byte index of the first character of this string slice that matches the pattern.</source>
          <target state="translated">패턴과 일치하는이 문자열 슬라이스의 첫 문자의 바이트 색인을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="02b84b401fc0589b3df759db66246dbfed302080" translate="yes" xml:space="preserve">
          <source>Returns the byte index of the last character of this string slice that matches the pattern.</source>
          <target state="translated">패턴과 일치하는이 문자열 슬라이스의 마지막 문자의 바이트 인덱스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7d24ad341a0641c6eb96d57c5580b7c6c6becab8" translate="yes" xml:space="preserve">
          <source>Returns the bytes that were attempted to convert to a &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt; 으로 변환하려고 시도한 바이트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3152ec978afaed4f94ff8a3c0c87e246ebf77786" translate="yes" xml:space="preserve">
          <source>Returns the bytes that were attempted to convert to a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 으로 변환하려고 시도한 바이트를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d28550fb4c351327cf7364182abd1608f112396c" translate="yes" xml:space="preserve">
          <source>Returns the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved.</source>
          <target state="translated">모든 중간 구성 요소가 정규화되고 심볼릭 링크가 해결 된 정식 절대 경로 형식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b22f913bd6b9484a1f42e1902c6c01f377894183" translate="yes" xml:space="preserve">
          <source>Returns the canonical, absolute form of the path with all intermediate components normalized and symbolic links resolved.</source>
          <target state="translated">모든 중간 구성 요소가 정규화되고 심볼릭 링크가 해결 된 정식 절대 경로 형식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cac6fc43f3588b9f8aef8eac8588d180eb977700" translate="yes" xml:space="preserve">
          <source>Returns the capacity of the buffer.</source>
          <target state="translated">버퍼의 용량을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e9ab6128abe535c42ef1eeb3f662fdd9ea0274b3" translate="yes" xml:space="preserve">
          <source>Returns the capacity this &lt;code&gt;OsString&lt;/code&gt; can hold without reallocating.</source>
          <target state="translated">이 &lt;code&gt;OsString&lt;/code&gt; 이 재할 당하지 않고 보유 할 수 있는 용량을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d967275614b5f84a38f46f57abee9525f99c53e0" translate="yes" xml:space="preserve">
          <source>Returns the column from which the panic originated.</source>
          <target state="translated">패닉이 발생한 열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="15a54fdcea23bc3207c0820544f58b05251853f2" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value or a default</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 값 또는 기본값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="95f55a258801e09e8855a2e49b7f314eeea3c5c0" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value or a provided default.</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 값 또는 제공된 기본값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="89c70929838869ba6753c741e2fae771ce02a01f" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value or computes it from a closure.</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 값을 반환 하거나 클로저에서 계산합니다.</target>
        </trans-unit>
        <trans-unit id="f89e8b695fae613ce3f3aff08b41d6f7db5c060a" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value, consuming the &lt;code&gt;self&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 값을 사용 하여 포함 된 &lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3623b1354b4df0775e774ded0153095c27a36b6c" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; value, consuming the &lt;code&gt;self&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 값을 사용 하여 포함 된 &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="08d6548ed9286025a9ddf59bce14c4eca7ad8203" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value or a default</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 값 또는 기본값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6a4e0c85ed3449ae717cac97c7edd7bd13a5252d" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value or a provided default.</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 값 또는 제공된 기본값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="79aab72d6ce60ac70b1927592b9e210cae775c74" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value or computes it from a closure.</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 값을 반환 하거나 클로저에서 계산합니다.</target>
        </trans-unit>
        <trans-unit id="70edb5dd3948fc277210f0ef7acb0105b034649c" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value, but never panics.</source>
          <target state="translated">포함 된 &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 값을 반환 하지만 패닉은 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e39c151183f347a1bcafac05f20de48e8149381e" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value, consuming the &lt;code&gt;self&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 값을 사용 하여 포함 된 &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a5b065deea9e2ccfc3e580aca6f6c5988a80c071" translate="yes" xml:space="preserve">
          <source>Returns the contained value or a default</source>
          <target state="translated">포함 된 값 또는 기본값을 반환합니다</target>
        </trans-unit>
        <trans-unit id="93f961829488fd9c219fce4ac6ca7541e9dadd92" translate="yes" xml:space="preserve">
          <source>Returns the contained value or a default.</source>
          <target state="translated">포함 된 값 또는 기본값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="67ad33ae23070362998c7baca57e9a9f374d5f1c" translate="yes" xml:space="preserve">
          <source>Returns the contained value or computes it from a closure.</source>
          <target state="translated">포함 된 값을 반환하거나 클로저에서 계산합니다.</target>
        </trans-unit>
        <trans-unit id="8ad8e32a54b07c26a39be9ab7bd26314d57e3768" translate="yes" xml:space="preserve">
          <source>Returns the contained value, if the &lt;code&gt;Arc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">&lt;code&gt;Arc&lt;/code&gt; 에 정확히 하나의 강한 참조가있는 경우 포함 된 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="293a13a062c053cd7511db6be9751e6c3c51d924" translate="yes" xml:space="preserve">
          <source>Returns the contained value, if the &lt;code&gt;Rc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">&lt;code&gt;Rc&lt;/code&gt; 에 정확히 하나의 강력한 참조가 있으면 포함 된 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="61717e1212e78080790cfa608d226ba09775fff4" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty.</source>
          <target state="translated">내부 버퍼의 내용을 반환하여 비어있는 경우 내부 판독기의 추가 데이터로 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="62a8f07433d90548504485b3f2bd761a7d3e7f35" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. &lt;a href=&quot;../io/trait.bufread#tymethod.fill_buf&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">내부 버퍼의 내용을 반환하여 비어있는 경우 내부 판독기의 추가 데이터로 채 웁니다. &lt;a href=&quot;../io/trait.bufread#tymethod.fill_buf&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bffb5d5e3bef8e89831b85ce20b9dbe7bef0b262" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. &lt;a href=&quot;io/trait.bufread#tymethod.fill_buf&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">내부 버퍼의 내용을 반환하여 비어있는 경우 내부 판독기의 추가 데이터로 채 웁니다. &lt;a href=&quot;io/trait.bufread#tymethod.fill_buf&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b56cc621e993a837e4a3d3762bf2b8e4393543fc" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">내부 버퍼의 내용을 반환하여 비어있는 경우 내부 판독기의 추가 데이터로 채 웁니다. &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f885e71cdbfbcea491b671f027f8bb7b577a086f" translate="yes" xml:space="preserve">
          <source>Returns the contents of this &lt;code&gt;CString&lt;/code&gt; as a slice of bytes.</source>
          <target state="translated">이 &lt;code&gt;CString&lt;/code&gt; 의 내용 을 바이트 슬라이스로서 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="3d26a0158e604a34cfc901250ba325c7db826bd5" translate="yes" xml:space="preserve">
          <source>Returns the contents of this address if it is a &lt;code&gt;pathname&lt;/code&gt; address.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; 주소 인 경우이 주소의 내용을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="28fc865a2862de98a872098b58fe7c7f86082f67" translate="yes" xml:space="preserve">
          <source>Returns the corresponding &lt;a href=&quot;enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt; for this error.</source>
          <target state="translated">이 오류에 해당하는 &lt;a href=&quot;enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; &lt;/a&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b03b5dda5aedfc46816e9b36b141e565db65ce6c" translate="yes" xml:space="preserve">
          <source>Returns the corresponding &lt;code&gt;ErrorKind&lt;/code&gt; for this error.</source>
          <target state="translated">이 에러에 대응하는 &lt;code&gt;ErrorKind&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0290d0663939a4a469aef359cdde538eed028a13" translate="yes" xml:space="preserve">
          <source>Returns the cosine of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 코사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a14a6e9cbec9670ac4b4ccae6c476cf435f754d9" translate="yes" xml:space="preserve">
          <source>Returns the cosine of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 코사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d6085cc922831cf44bc01ee1fda8b427a3535d5f" translate="yes" xml:space="preserve">
          <source>Returns the creation time listed in this metadata.</source>
          <target state="translated">이 메타 데이터에 나열된 생성 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="084ce23da0d611b52ee355c6c2e6eab564e8d293" translate="yes" xml:space="preserve">
          <source>Returns the cubic root of a number.</source>
          <target state="translated">숫자의 세제곱근을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="997023fe32fbfc90fbf5d802c09ec861905c3cbd" translate="yes" xml:space="preserve">
          <source>Returns the current position of this cursor.</source>
          <target state="translated">이 커서의 현재 위치를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="39488e0dd8d1a6a459ff877c39a362351edd5507" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream.</source>
          <target state="translated">스트림의 시작부터 현재 탐색 위치를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="35a7977795b1c187ff460d7619e6740e7eab4a31" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream. &lt;a href=&quot;../io/trait.seek#method.stream_position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">스트림의 시작부터 현재 탐색 위치를 반환합니다. &lt;a href=&quot;../io/trait.seek#method.stream_position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4a57476cd33067734277138c4a7c3301e250e6c2" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream. &lt;a href=&quot;io/trait.seek#method.stream_position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">스트림의 시작부터 현재 탐색 위치를 반환합니다. &lt;a href=&quot;io/trait.seek#method.stream_position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba7239a7b3b1a78bcc00446cc6158fc282e3b433" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream. &lt;a href=&quot;trait.seek#method.stream_position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">스트림의 시작부터 현재 탐색 위치를 반환합니다. &lt;a href=&quot;trait.seek#method.stream_position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6ddab0dded93136752be9b842101b1d6ba6ef77" translate="yes" xml:space="preserve">
          <source>Returns the current working directory as a &lt;a href=&quot;../path/struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재 작업 디렉토리를 &lt;a href=&quot;../path/struct.pathbuf&quot;&gt; &lt;code&gt;PathBuf&lt;/code&gt; &lt;/a&gt; 로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9bc0aaf9066d9dd63671e4cca867635aaa19f66a" translate="yes" xml:space="preserve">
          <source>Returns the cursor position index within the &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; 내의 커서 위치 인덱스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="74804b705faa501c028edeb8453a757ad2f8932d" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; 의 기본값을 반환</target>
        </trans-unit>
        <trans-unit id="5722a2e73eb46920ce6f3053e0e53b893eaff195" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;0.0&lt;/code&gt;</source>
          <target state="translated">기본값 &lt;code&gt;0.0&lt;/code&gt; 을 반환합니다</target>
        </trans-unit>
        <trans-unit id="ab62f83932e8f488bbfc7d7430c307c63931ad3a" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">기본값 &lt;code&gt;0&lt;/code&gt; 을 반환합니다</target>
        </trans-unit>
        <trans-unit id="64f6f0364caff5aaf72ec04bdaab6f6b9b41494f" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;\x00&lt;/code&gt;</source>
          <target state="translated">기본값 &lt;code&gt;\x00&lt;/code&gt; 반환합니다</target>
        </trans-unit>
        <trans-unit id="28b7bcae2b6814bbd77abceec8d6747ba4de557b" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">기본값 인 &lt;code&gt;false&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c69ba2a59bc2c58f7569f9f294f9ca9c73dea195" translate="yes" xml:space="preserve">
          <source>Returns the device ID of this file (if it is a special one).</source>
          <target state="translated">이 파일의 장치 ID를 리턴합니다 (특별한 경우).</target>
        </trans-unit>
        <trans-unit id="f3b0d9ec42b53df755966f88296c9569ef0a5c50" translate="yes" xml:space="preserve">
          <source>Returns the device ID of this file (if it is a special one). &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.rdev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일의 장치 ID를 리턴합니다 (특별한 경우). &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.rdev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="181f80a2944af3f709e8a5acb7280ec496506acd" translate="yes" xml:space="preserve">
          <source>Returns the device ID on which this file resides.</source>
          <target state="translated">이 파일이있는 장치 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b98ab569fab62e7bf6f2b06c0a56e45794878166" translate="yes" xml:space="preserve">
          <source>Returns the device ID on which this file resides. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_dev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일이있는 장치 ID를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_dev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2631a317e4b16bd101a2adbfbc04fa29b56c076a" translate="yes" xml:space="preserve">
          <source>Returns the device ID that this file represents. Only relevant for special file.</source>
          <target state="translated">이 파일이 나타내는 장치 ID를 리턴합니다. 특수 파일에만 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="0a33c1cec7f8f0efea3df218ed7eedf1c0eee109" translate="yes" xml:space="preserve">
          <source>Returns the device ID that this file represents. Only relevant for special file. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_rdev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일이 나타내는 장치 ID를 리턴합니다. 특수 파일에만 해당됩니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_rdev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e71fcc7d553990b9c89d36828565d2b0078328c0" translate="yes" xml:space="preserve">
          <source>Returns the difference between the clock time when this system time was created, and the current clock time.</source>
          <target state="translated">이 시스템 시간이 생성되었을 때의 시계 시간과 현재 시계 시간의 차이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b9d24e33a3a33bd79f939093cab0c11b18014a34" translate="yes" xml:space="preserve">
          <source>Returns the difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 차이를 새로운 &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; 로서 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="2b212cfed5a4fd26409beb817968c4efa9bf8ad6" translate="yes" xml:space="preserve">
          <source>Returns the difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 차이를 새로운 &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; 줍니다.</target>
        </trans-unit>
        <trans-unit id="83d19ce03568322fde7a0c72ea57be816c0d6480" translate="yes" xml:space="preserve">
          <source>Returns the eight 16-bit segments that make up this address.</source>
          <target state="translated">이 주소를 구성하는 8 개의 16 비트 세그먼트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7745d26921de367760bb15cf644b3f30226872f4" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function.</source>
          <target state="translated">지정된 함수에서 최대 값을 제공하는 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bb5381765a00a3d0ce3096269a3ba471a59a41f1" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;../../../iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최대 값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.max_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50163f43ee0e83a5976c23424822af3ffc3e92ee" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;../../iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최대 값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.max_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="82c531284da35ffcb3cfd25a321e3624a7fb85d1" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;../iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최대 값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.max_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c4eb2b8585ef4b9491f95a16f72ae832b96ef1d" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최대 값을 제공하는 요소를 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.max_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f75f1849f6ee013d414fbfd16341df18e9596e05" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최대 값을 제공하는 요소를 반환합니다. &lt;a href=&quot;trait.iterator#method.max_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f3e0642512129975c59c5b67eafdcfa17585e45c" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function.</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 값을 제공하는 요소를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="6942069630752434b69fa518af7af4b843040c02" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 값을 제공하는 요소를 리턴합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.max_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39d42b9245417e2e45664c1c452af8c2dcad7575" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 값을 제공하는 요소를 리턴합니다. &lt;a href=&quot;../../iter/trait.iterator#method.max_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6cf2f94c83e1a777636c1b8f13f98fbfbb359792" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 값을 제공하는 요소를 리턴합니다. &lt;a href=&quot;../iter/trait.iterator#method.max_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="462a8b6200c132c1659a6c5483922c1765c25183" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 값을 제공하는 요소를 리턴합니다. &lt;a href=&quot;iter/trait.iterator#method.max_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2309005f0fef3ccdfc8ea8129d2a5047595bf152" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 값을 제공하는 요소를 리턴합니다. &lt;a href=&quot;trait.iterator#method.max_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="41d83b5d88e22e38a9dbe39585dfa0b7f240246d" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function.</source>
          <target state="translated">지정된 함수에서 최소값을 제공하는 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0443cbe148f4f0ed1cfe84b5c27315d8e03b5854" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;../../../iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.min_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1443a6dce791dde1d9c5b46639ac6741d15d9f98" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;../../iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.min_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="053f1091cc4eb8e27c85d8e13b6f1e8608ba77bd" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;../iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.min_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d0fae82fca1af93f383d20d37602f56e408a86a" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.min_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9038e7ba8c46a00e367d3da9d09547296b444fdd" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 함수에서 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;trait.iterator#method.min_by_key&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7bbb81860f75085b883db3a6921a708a002d3b8d" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function.</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소값을 제공하는 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="320318de598a123e57f84cb3c025f97baa6e0ab7" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.min_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da5ce4a73e39e1032840752e4915959b46d0fde5" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.min_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6424f2c5a1c6d95fadd173fa9aa97613bd314826" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.min_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="953a6bb221b5c86e51fd26a772d8fff3e7727473" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.min_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a475ae2f4ab13dedea41258d28190b0454ac6f63" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소값을 제공하는 요소를 반환합니다. &lt;a href=&quot;trait.iterator#method.min_by&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4eec695ac77816e8f920ba066e16824a3607a343" translate="yes" xml:space="preserve">
          <source>Returns the end value as a &lt;code&gt;Bound&lt;/code&gt;.</source>
          <target state="translated">종료 값을 &lt;code&gt;Bound&lt;/code&gt; 로서 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="7b4333bce3947fcbaadfabbfd651c4c43e347ae8" translate="yes" xml:space="preserve">
          <source>Returns the error which caused the call to &lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt;&lt;code&gt;BufWriter::into_inner()&lt;/code&gt;&lt;/a&gt; to fail.</source>
          <target state="translated">&lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt; &lt;code&gt;BufWriter::into_inner()&lt;/code&gt; &lt;/a&gt; 호출 이 실패한 오류를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9930d7737e0e2c08ecaaff5d4a74e1cd7210948e" translate="yes" xml:space="preserve">
          <source>Returns the error which caused the call to &lt;code&gt;into_inner()&lt;/code&gt; to fail.</source>
          <target state="translated">&lt;code&gt;into_inner()&lt;/code&gt; 호출에 실패한 오류를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f9d8e85ef34ebf5088d10366b034b3fff3297d03" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator.</source>
          <target state="translated">반복기의 정확한 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dfb022eb139d6da0c86a4c0a88440bfa66ab499d" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 정확한 길이를 반환합니다. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e2261c216ed4bce171da1f8702941faa654f02b" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 정확한 길이를 반환합니다. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="537356a268fb5f824034c12f05bb64f93221075a" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 정확한 길이를 반환합니다. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="158867de75e65092e06f8e09c644a429790fc3fc" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 정확한 길이를 반환합니다. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5962202649ec673f7ee6fdf337862f68a375c939" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate.</source>
          <target state="translated">반복자가 반복 할 정확한 횟수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f033612b812dcb115ee88f27537d36043163b376" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자가 반복 할 정확한 횟수를 반환합니다. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="16c5ccfc9ac661fe921b2a21b9103ff312f84598" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자가 반복 할 정확한 횟수를 반환합니다. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02fb630e12001e45abb9046cd431397c5a161393" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자가 반복 할 정확한 횟수를 반환합니다. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8e6bc996c28438070b2c4d7500cec4888863af5a" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자가 반복 할 정확한 횟수를 반환합니다. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eaee2eeccb629c630e5905f0b3ce242f0e70e55f" translate="yes" xml:space="preserve">
          <source>Returns the exit code of the process, if any.</source>
          <target state="translated">프로세스의 종료 코드가 있으면이를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c46549fd4519eac200d7025db93e7bb82ec51c56" translate="yes" xml:space="preserve">
          <source>Returns the exponential of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 지수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f3da97caa1fafcb8a130fff71bf53e2faf622790" translate="yes" xml:space="preserve">
          <source>Returns the exponential of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 지수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="20054b5c455db28478d1a0abc7636b79620b24c9" translate="yes" xml:space="preserve">
          <source>Returns the file type and mode.</source>
          <target state="translated">파일 형식과 모드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="29173c277e0a8fc5747faccd34be42ea6c198ad4" translate="yes" xml:space="preserve">
          <source>Returns the file type and mode. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일 형식과 모드를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mode&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c7ca6382527376d2edcd8da3d859ce37e7911a9" translate="yes" xml:space="preserve">
          <source>Returns the file type for the file that this entry points at.</source>
          <target state="translated">이 항목이 가리키는 파일의 파일 형식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a1534c8640f4fe800de9cb7dae21a242a9864c27" translate="yes" xml:space="preserve">
          <source>Returns the file type for this metadata.</source>
          <target state="translated">이 메타 데이터의 파일 형식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9e847b6bb3f5504d2cf5374472d3451d7e9bd580" translate="yes" xml:space="preserve">
          <source>Returns the final component of the &lt;code&gt;Path&lt;/code&gt;, if there is one.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 의 최종 컴포넌트가있는 경우이를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f986133e42ae70418cc420c3e41e12a1f3fe07ef" translate="yes" xml:space="preserve">
          <source>Returns the first and all the rest of the elements of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">슬라이스의 첫 번째 요소와 나머지 요소를 모두 반환하거나 비어 있으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6df3b2311101bc474f1cbb40155b6f5441324bdd" translate="yes" xml:space="preserve">
          <source>Returns the first argument if the comparison determines them to be equal.</source>
          <target state="translated">비교에서 동일한 것으로 판단되면 첫 번째 인수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="437b18f8639cc9b926df56af39e4604c50f764f9" translate="yes" xml:space="preserve">
          <source>Returns the first element of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">슬라이스의 첫 번째 요소를 반환하거나 비어 있으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0b3e99069b488a7f51f60669058e47a93b76b677" translate="yes" xml:space="preserve">
          <source>Returns the first entry in the map for in-place manipulation. The key of this entry is the minimum key in the map.</source>
          <target state="translated">내부 조작을 위해 맵의 첫 번째 항목을 반환합니다. 이 항목의 키는 맵의 최소 키입니다.</target>
        </trans-unit>
        <trans-unit id="74530f1b5938d1658bbab73d4adb5f515bf97643" translate="yes" xml:space="preserve">
          <source>Returns the first key-value pair in the map. The key in this pair is the minimum key in the map.</source>
          <target state="translated">지도에서 첫 번째 키-값 쌍을 반환합니다. 이 쌍의 키는 맵의 최소 키입니다.</target>
        </trans-unit>
        <trans-unit id="75d47ad3e742059ef698b5878928948b880b76e9" translate="yes" xml:space="preserve">
          <source>Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.</source>
          <target state="translated">숫자의 부동 소수점 범주를 반환합니다. 하나의 특성 만 테스트 할 경우 일반적으로 특정 술어를 사용하는 것이 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="49e202e605b7bd28c9cd4b32f5e972ed286ed689" translate="yes" xml:space="preserve">
          <source>Returns the flow information associated with this address.</source>
          <target state="translated">이 주소와 관련된 흐름 정보를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ebc964882a27c9907c13d4408b850f0c053463ad" translate="yes" xml:space="preserve">
          <source>Returns the four eight-bit integers that make up this address.</source>
          <target state="translated">이 주소를 구성하는 4 개의 8 비트 정수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23a2c0dcfd31b6c2e9c9888d0121bf38980344c7" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of a number.</source>
          <target state="translated">숫자의 소수 부분을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c9ae259a22b2843e1409b67296fea665b489b3c0" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of this &lt;code&gt;Duration&lt;/code&gt;, in nanoseconds.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 의 소수 부분을 나노초로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="bef624893ef149ad78a29ca49323a67983fcf807" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of this &lt;code&gt;Duration&lt;/code&gt;, in whole microseconds.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 의 소수 부분을 마이크로 초 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="429fb28498e19cb96e485fa379316b5cdb475039" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of this &lt;code&gt;Duration&lt;/code&gt;, in whole milliseconds.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 의 소수 부분을 밀리 세컨드 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="4fe276fd03e779f2448dc9c5743f17bdbd043791" translate="yes" xml:space="preserve">
          <source>Returns the full filesystem path of the current running executable.</source>
          <target state="translated">현재 실행중인 실행 파일의 전체 파일 시스템 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d7d90dec7d9868f5e5e1932b8128e5811ca21180" translate="yes" xml:space="preserve">
          <source>Returns the full path to the file that this entry represents.</source>
          <target state="translated">이 항목이 나타내는 파일의 전체 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="71eba06405f179b611cd49f0368d873651d1e32d" translate="yes" xml:space="preserve">
          <source>Returns the greatest item in the binary heap, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">이진 힙에서 가장 큰 항목을 반환하거나 비어 있으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="045b7e93299e7237bee97de9a0dbf3ddda51f3c5" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the file owner.</source>
          <target state="translated">파일 소유자의 그룹 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4a557d49ccda95ec6e0b99ed25a0ee4823c94f97" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the file owner. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_gid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일 소유자의 그룹 ID를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_gid&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2c114378ffcffa33547a268c64967ffa367a1de" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the owner of this file.</source>
          <target state="translated">이 파일 소유자의 그룹 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cb37218b7673220aef8159e0e33e6e616d1ec2d3" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the owner of this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.gid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일 소유자의 그룹 ID를 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.gid&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc1701d228422894681a4f69e8a12241974ea7ee" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far.</source>
          <target state="translated">지금까지 작성된 값의 해시 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1074a0bc0454984fa22f8f545cef825d19b02694" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;../../hash/trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지금까지 작성된 값의 해시 값을 반환합니다. &lt;a href=&quot;../../hash/trait.hasher#tymethod.finish&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e7dae3c3c526bc02d0f5433fee81441a9191f70" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;../hash/trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지금까지 작성된 값의 해시 값을 반환합니다. &lt;a href=&quot;../hash/trait.hasher#tymethod.finish&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bb75a36c996ce5b24d080509086ed2a565c1634" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;hash/trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지금까지 작성된 값의 해시 값을 반환합니다. &lt;a href=&quot;hash/trait.hasher#tymethod.finish&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="891e6e5d9637f6e0543be915bdd8db7a0eb16e60" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">지금까지 작성된 값의 해시 값을 반환합니다. &lt;a href=&quot;trait.hasher#tymethod.finish&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75c0b203793b8b7484a5f62aa01cd8599798558c" translate="yes" xml:space="preserve">
          <source>Returns the index in the given string up to which valid UTF-8 was verified.</source>
          <target state="translated">유효한 UTF-8이 확인 될 때까지 주어진 문자열의 색인을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="fa1ff971c586fc730f98793935b6144319f4808c" translate="yes" xml:space="preserve">
          <source>Returns the index of the partition point according to the given predicate (the index of the first element of the second partition).</source>
          <target state="translated">주어진 조건 자 (두 번째 파티션의 첫 번째 요소 인덱스)에 따라 파티션 지점의 인덱스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8d717e336600fb2761f002896412c5a624281f80" translate="yes" xml:space="preserve">
          <source>Returns the inner pointer to this C string.</source>
          <target state="translated">이 C 캐릭터 라인의 내부 포인터를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="b784d9da31090d15aa9f5a33e60503c49931dee0" translate="yes" xml:space="preserve">
          <source>Returns the inner value, if the &lt;code&gt;Arc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">&lt;code&gt;Arc&lt;/code&gt; 에 정확히 하나의 강력한 참조가있는 경우 내부 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f509e24ecece50330c3bd7ac415fcdf7a6b5a997" translate="yes" xml:space="preserve">
          <source>Returns the inner value, if the &lt;code&gt;Rc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">&lt;code&gt;Rc&lt;/code&gt; 에 정확히 하나의 강력한 참조가있는 경우 내부 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4f8d72748348ad00715db12f5684b27b98cb0442" translate="yes" xml:space="preserve">
          <source>Returns the inode number.</source>
          <target state="translated">아이 노드 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2ba37e26258afa6e8cd7aa434389d5c1d115e02" translate="yes" xml:space="preserve">
          <source>Returns the inode number. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">아이 노드 번호를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ino&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a71311f22ec6788f34a10389ef2a3f732a47c264" translate="yes" xml:space="preserve">
          <source>Returns the inode number. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">아이 노드 번호를 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ino&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b08a689f37adf08d820155dd21fe59b2c115d985" translate="yes" xml:space="preserve">
          <source>Returns the integer part of a number.</source>
          <target state="translated">숫자의 정수 부분을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ca9424867c58d209b837105a4ec6eb48b25b0236" translate="yes" xml:space="preserve">
          <source>Returns the integer part of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 정수 부분을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4162d7ee466feb25cbea3134d78b69877eb6af9d" translate="yes" xml:space="preserve">
          <source>Returns the integer part of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 정수 부분을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9a27800e3a9a14d645a518f397df1f0296b050f8" translate="yes" xml:space="preserve">
          <source>Returns the intersection of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 교집합을 새로운 &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; 로서 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="ae38197230c1ca8d7ed05ba875d9f766bc5916a3" translate="yes" xml:space="preserve">
          <source>Returns the intersection of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 교점을 새로운 &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; 줍니다.</target>
        </trans-unit>
        <trans-unit id="000b142c65f0ffc55c0952e16185ceec069c6a97" translate="yes" xml:space="preserve">
          <source>Returns the iterator of the control messages.</source>
          <target state="translated">제어 메시지의 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f591b6d3dce26e4e5d951568101e01b047f0c4d6" translate="yes" xml:space="preserve">
          <source>Returns the key-value pair corresponding to the supplied key.</source>
          <target state="translated">제공된 키에 해당하는 키-값 쌍을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0f241c8b9c22095b4caa4196cdf8d6baf6f075e3" translate="yes" xml:space="preserve">
          <source>Returns the largest integer less than or equal to a number.</source>
          <target state="translated">숫자보다 작거나 같은 가장 큰 정수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3905281a5c2304e35d4706f9df6f06d9b6c21621" translate="yes" xml:space="preserve">
          <source>Returns the largest integer less than or equal to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 이하의 가장 큰 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="58468e60f3c653924ae6b45c987a06a90c0fc64d" translate="yes" xml:space="preserve">
          <source>Returns the largest integer less than or equal to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 이하의 가장 큰 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="25554e99150223030893966c6cc41386280e3d36" translate="yes" xml:space="preserve">
          <source>Returns the largest value that can be represented by this integer type.</source>
          <target state="translated">이 정수형으로 나타낼 수있는 가장 큰 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0bef1b8ab72414262be32c625754b59f61edb577" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.atime&quot;&gt;&lt;code&gt;atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.atime&quot;&gt; &lt;code&gt;atime&lt;/code&gt; &lt;/a&gt; 이후 파일의 마지막 액세스 시간을 나노초로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fe53d0ce6581a799fd9d7d619aff8a495115546d" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt; 이후 파일의 마지막 액세스 시간을 나노초로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="73eda5b60e08be7e100d8681c7cbf1eb2eb360d1" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 액세스 시간을 반환합니다 . &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18f319c5d1287f14eda4fd2bed89fbada163b589" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt;&lt;code&gt;atime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt; &lt;code&gt;atime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 액세스 시간을 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9cd07c2b53c400adc569f5664fe3d7c004966501" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.atime&quot;&gt;&lt;code&gt;atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.metadataext#tymethod.atime&quot;&gt; &lt;code&gt;atime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 액세스 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="019f38f66a7253a180beacdbf1b3adaf12f22d1d" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.metadataext#tymethod.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 액세스 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="126c5e2645067d74de261356df1c0ca59bb916ca" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since [&lt;code&gt;atime&lt;/code&gt;]. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;atime&lt;/code&gt; ] 이후 파일의 마지막 액세스 시간을 나노초로 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f99b0d5ca8429f1fc89d18b6df2974236e019252" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since [&lt;code&gt;st_atime&lt;/code&gt;]. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;st_atime&lt;/code&gt; ] 이후 파일의 마지막 액세스 시간을 나노초로 반환합니다 . &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc00d6fc33d00a791780097af4452b2ea413ef76" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in seconds since Unix Epoch.</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 액세스 시간을 초 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5dac7cdb7c4c3eb84d94b6cb55c0b864850f06b1" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 액세스 시간을 초 단위로 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb45cce5245c0281778ccc23f057ed2218a32288" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 액세스 시간을 초 단위로 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c268f1dd33e61836bff10ee9c3dd2908a1617fac" translate="yes" xml:space="preserve">
          <source>Returns the last access time of this metadata.</source>
          <target state="translated">이 메타 데이터의 마지막 액세스 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="429d7b4cdcf9eb4b7652bca97f6ee66d4a73f574" translate="yes" xml:space="preserve">
          <source>Returns the last and all the rest of the elements of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">슬라이스 요소의 마지막 요소와 나머지 요소를 모두 반환하거나 비어 있으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9f374a694761f83970c8b898112ca6744a644713" translate="yes" xml:space="preserve">
          <source>Returns the last element of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">슬라이스의 마지막 요소를 반환하거나 비어 있으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5f57ae38a720939527bfddebf1f8bb089a52d737" translate="yes" xml:space="preserve">
          <source>Returns the last entry in the map for in-place manipulation. The key of this entry is the maximum key in the map.</source>
          <target state="translated">내부 조작을 위해 맵의 마지막 항목을 반환합니다. 이 항목의 키는 맵의 최대 키입니다.</target>
        </trans-unit>
        <trans-unit id="29992e35b286e8e2fc2845c6d800039d86309da3" translate="yes" xml:space="preserve">
          <source>Returns the last key-value pair in the map. The key in this pair is the maximum key in the map.</source>
          <target state="translated">맵의 마지막 키-값 쌍을 반환합니다. 이 쌍의 키는 맵의 최대 키입니다.</target>
        </trans-unit>
        <trans-unit id="e7e83cf50f9f20b4e01791f0c4d1472f628fa234" translate="yes" xml:space="preserve">
          <source>Returns the last modification time listed in this metadata.</source>
          <target state="translated">이 메타 데이터에 나열된 마지막 수정 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b3444fc5884888c4149406ecabaf1ef2ee33450b" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt; 이후 파일의 마지막 수정 시간을 나노초로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e060d444a8564a17f555e558ace75cc5cd5d2643" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt; 이후 파일의 마지막 수정 시간을 나노초로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="20e9acca0a22f7d3e5550e4125b0911f44d51f67" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 수정 시간을 반환합니다 . &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="092018db95b8c650c86aa7709203df8159fb4244" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 수정 시간을 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c8576dfc2ca4942ca770cd0e32d4f66b1da52ae" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.metadataext#tymethod.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 수정 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8de92934b5231894c5c4fa85564215381b1179bf" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.metadataext#tymethod.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 수정 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b091b94d117baa719c72b97a49c167ab605b9dfe" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since [&lt;code&gt;mtime&lt;/code&gt;]. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;mtime&lt;/code&gt; ] 이후 파일의 마지막 수정 시간을 나노초로 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e5b592106d2c023ba4785eba5178823e1c980ef" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since [&lt;code&gt;st_mtime&lt;/code&gt;]. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;st_mtime&lt;/code&gt; ] 이후 파일의 마지막 수정 시간을 나노초 단위로 반환합니다 . &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc8c7fac340274a6084a4e051cbfe4396730a8c5" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in seconds since Unix Epoch.</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 수정 시간을 초 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2fe56bd33e7e0772a902d69c107c402cce5ad5b7" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 수정 시간을 초 단위로 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44a75fafadbb2629c831f6f75c39838bf00b601b" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 수정 시간을 초 단위로 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1372c8863cf9cb3a180a94cd4db833598d425e7e" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.ctime&quot;&gt;&lt;code&gt;ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.ctime&quot;&gt; &lt;code&gt;ctime&lt;/code&gt; &lt;/a&gt; 이후 파일의 마지막 상태 변경 시간을 나노초로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="76869f2d7d1d679722a686863fde8180a44ee1f3" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt; 이후 파일의 마지막 상태 변경 시간을 나노초로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9474ea59bcf20e1ce71a573d1205fbc2507593b1" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 상태 변경 시간을 반환합니다 . &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="750574dfb11b2c8f23426829e7c5a6bf6fd7b3d2" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt;&lt;code&gt;ctime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt; &lt;code&gt;ctime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 상태 변경 시간을 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d90d94e0c4c344d3c9434c93a7f8c301b656e10c" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.ctime&quot;&gt;&lt;code&gt;ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.metadataext#tymethod.ctime&quot;&gt; &lt;code&gt;ctime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 상태 변경 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a286484c1ca204bfbf797dc7fbe17dceb44fd791" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.metadataext#tymethod.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt; 이후의 나노초 단위로 파일의 마지막 상태 변경 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="57bcb38dad77fdd499a13fefde02fa0fa7784902" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since [&lt;code&gt;ctime&lt;/code&gt;]. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;ctime&lt;/code&gt; ] 이후 파일의 마지막 상태 변경 시간을 나노초로 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="38211dd62e14ec33ec3e4596407a9d4393423172" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since [&lt;code&gt;st_ctime&lt;/code&gt;]. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;st_ctime&lt;/code&gt; ] 이후 파일의 마지막 상태 변경 시간을 나노초로 반환합니다 . &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="00ffec13fd3490355665d7c7f61413e58cba13e2" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in seconds since Unix Epoch.</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 상태 변경 시간을 초 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="963e3a7bee6fc1221e9e031fc0406c8bfe9c5c81" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 상태 변경 시간을 초 단위로 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c6aa771a5359a820e246f0834b0187ff59562cc" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unix Epoch 이후 파일의 마지막 상태 변경 시간을 초 단위로 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="520e1369a3755aa0a1447abf256749b096f14815" translate="yes" xml:space="preserve">
          <source>Returns the length of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 길이를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4c30f16bbcbb944348ccb41dc99138faf1df12c9" translate="yes" xml:space="preserve">
          <source>Returns the length of a non-null raw slice.</source>
          <target state="translated">null이 아닌 원시 조각의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="70a81ea088dfb28cd7b0e7259a380e2b8f279569" translate="yes" xml:space="preserve">
          <source>Returns the length of a raw slice.</source>
          <target state="translated">원시 조각의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4b766728b43f92f96c53be68bd6aa3bc18704fa8" translate="yes" xml:space="preserve">
          <source>Returns the length of the &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; 의 길이를 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="5788b1a53289e0e37aae8baadc110091ba5ce966" translate="yes" xml:space="preserve">
          <source>Returns the length of the binary heap.</source>
          <target state="translated">이진 힙의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="31b2f87e85d573faa9db9993fefaf0dcf7dd5d9c" translate="yes" xml:space="preserve">
          <source>Returns the length of this &lt;code&gt;OsStr&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;OsStr&lt;/code&gt; 의 길이를 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="fcff822dfed2e93a8caeff9931edb93305c3e7f7" translate="yes" xml:space="preserve">
          <source>Returns the length of this &lt;code&gt;String&lt;/code&gt;, in bytes, not &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s or graphemes. In other words, it may not be what a human considers the length of the string.</source>
          <target state="translated">&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 또는 graphemes가 아닌 이 &lt;code&gt;String&lt;/code&gt; 의 길이를 바이트 단위로 반환합니다 . 즉, 인간이 현의 길이를 고려하는 것과 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c1a3ee91a2ad73ea92e9bcfe3a438fd902e5a98" translate="yes" xml:space="preserve">
          <source>Returns the length of this &lt;code&gt;String&lt;/code&gt;, in bytes.</source>
          <target state="translated">이 &lt;code&gt;String&lt;/code&gt; 의 길이를 바이트 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="795fed791a9e8a31900da01797052f66e0a6a4fa" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes).</source>
          <target state="translated">이 스트림의 길이를 바이트 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="dd26ded6c352bda77f7a3083b091a4db9ce330e3" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes). &lt;a href=&quot;../io/trait.seek#method.stream_len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 스트림의 길이를 바이트 단위로 돌려줍니다. &lt;a href=&quot;../io/trait.seek#method.stream_len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3093bd7216ddc6503c04245839bb9066034a9c12" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes). &lt;a href=&quot;io/trait.seek#method.stream_len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 스트림의 길이를 바이트 단위로 돌려줍니다. &lt;a href=&quot;io/trait.seek#method.stream_len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="73cd7d7e328372f3f88cd0d3c8536595de82b2a6" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes). &lt;a href=&quot;trait.seek#method.stream_len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 스트림의 길이를 바이트 단위로 돌려줍니다. &lt;a href=&quot;trait.seek#method.stream_len&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e22395aa1b3ef8348ba981d896ef437bd6045935" translate="yes" xml:space="preserve">
          <source>Returns the line number from which the panic originated.</source>
          <target state="translated">공황이 시작된 줄 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dbdf91714d79ece726f4db7ba9256f266be6b45c" translate="yes" xml:space="preserve">
          <source>Returns the local socket address of this listener.</source>
          <target state="translated">이 리스너의 로컬 소켓 주소를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="55697a7e6e463058024c2512d8554f0f3212443d" translate="yes" xml:space="preserve">
          <source>Returns the logarithm of the number with respect to an arbitrary base.</source>
          <target state="translated">임의의 밑을 기준으로 한 숫자의 로그를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4b628909503d6cf3eeeeb0549626a7bf17505461" translate="yes" xml:space="preserve">
          <source>Returns the lower bound of the range (inclusive).</source>
          <target state="translated">범위의 하한을 반환합니다 (포함).</target>
        </trans-unit>
        <trans-unit id="272641259261755267f1cba14521e8322a467656" translate="yes" xml:space="preserve">
          <source>Returns the lowercase equivalent of this string slice, as a new &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 문자열 슬라이스에 해당하는 소문자를 새 &lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 으로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0a465e9c28cd028d5e1df8477b3548ec6f461fca" translate="yes" xml:space="preserve">
          <source>Returns the lowercase equivalent of this string slice, as a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 문자열 슬라이스에 해당하는 소문자를 새 &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 으로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e039685c308ed74e0730672f176d0db99cb9020e" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator.</source>
          <target state="translated">반복자의 최대 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2135561cb6b2b9c756db5a4559f01d27eda7e19e" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최대 요소를 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.max&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3359996d97c36b7ac95ba00680611de0c76fe2f8" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최대 요소를 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.max&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50186ac96fa893850730c9ee56859eb47b531105" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최대 요소를 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.max&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3019abfd5e8950da5748e3ac7432cfdd9a4d8305" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최대 요소를 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.max&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3c9ee65dcb7d1e0ac427c46da554f19b9be65e0" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최대 요소를 반환합니다. &lt;a href=&quot;trait.iterator#method.max&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fd61b1f3c3b7358c36d58923a9f04dacedfdfc5" translate="yes" xml:space="preserve">
          <source>Returns the maximum of the two numbers.</source>
          <target state="translated">두 숫자의 최대 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="30c3b32049dbb64746fe6d73975b99a2dc6c4f66" translate="yes" xml:space="preserve">
          <source>Returns the maximum of two &lt;code&gt;f32&lt;/code&gt; values.</source>
          <target state="translated">최대 2 개의 &lt;code&gt;f32&lt;/code&gt; 를 반환합니다 값을 합니다.</target>
        </trans-unit>
        <trans-unit id="247cc627a7ac900b32b26fb9b8c6d5ad9385c7f8" translate="yes" xml:space="preserve">
          <source>Returns the maximum of two &lt;code&gt;f64&lt;/code&gt; values.</source>
          <target state="translated">최대 2 개의 &lt;code&gt;f64&lt;/code&gt; 를 반환합니다 값을 합니다.</target>
        </trans-unit>
        <trans-unit id="4962568c93c1a037a9696e5bca9fbffeabf92088" translate="yes" xml:space="preserve">
          <source>Returns the maximum of two values with respect to the specified comparison function.</source>
          <target state="translated">지정된 비교 함수와 관련하여 최대 두 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a3de35e96efd02a2755cead497840bb3d6839e3e" translate="yes" xml:space="preserve">
          <source>Returns the metadata for the file that this entry points at.</source>
          <target state="translated">이 항목이 가리키는 파일의 메타 데이터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f17d644b364550b8b9020fb92c8806c2c9812b48" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator.</source>
          <target state="translated">반복자의 최소 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="205b01799fe0e02bada45f6baef02bf547a4717c" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최소 요소를 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.min&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcf6d8f76d948c4e400182f514005c8a0d110c32" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최소 요소를 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.min&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5e2d130f2bfef7b60c573f849d6ecfa0c2f2f976" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최소 요소를 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.min&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="901b9764f12d444a30a37a9ade0622026900fa66" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최소 요소를 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.min&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3700b3a95f0c02c2283ada4be60a59f814923832" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 최소 요소를 반환합니다. &lt;a href=&quot;trait.iterator#method.min&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca84abbb5e5ae81280f44971ed9a2a687c192be8" translate="yes" xml:space="preserve">
          <source>Returns the minimum of the two numbers.</source>
          <target state="translated">두 숫자의 최소값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ecda6fabdc2696641b0ec126986b008c51cc454e" translate="yes" xml:space="preserve">
          <source>Returns the minimum of two &lt;code&gt;f32&lt;/code&gt; values.</source>
          <target state="translated">최소 2 개의 &lt;code&gt;f32&lt;/code&gt; 를 반환합니다 값을 합니다.</target>
        </trans-unit>
        <trans-unit id="52c45a95830729cd310f3809848b0e7067a0096d" translate="yes" xml:space="preserve">
          <source>Returns the minimum of two &lt;code&gt;f64&lt;/code&gt; values.</source>
          <target state="translated">최소 2 개의 &lt;code&gt;f64&lt;/code&gt; 를 반환합니다 값을 합니다.</target>
        </trans-unit>
        <trans-unit id="42b2132694a69312ad1525e463be14b3fe5ae0f5" translate="yes" xml:space="preserve">
          <source>Returns the minimum of two values with respect to the specified comparison function.</source>
          <target state="translated">지정된 비교 함수와 관련하여 최소 두 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dc6615edb5165359b08e1212e95589fae45987d7" translate="yes" xml:space="preserve">
          <source>Returns the name of a type as a string slice.</source>
          <target state="translated">유형의 이름을 문자열 조각으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a828256461022107db16350b7504b0d9239c081a" translate="yes" xml:space="preserve">
          <source>Returns the name of the source file from which the panic originated.</source>
          <target state="translated">패닉이 발생한 소스 파일의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3f4e19eee28692cda80dc81ade04047c7c8a9f55" translate="yes" xml:space="preserve">
          <source>Returns the name of the type of the pointed-to value as a string slice. This is the same as &lt;code&gt;type_name::&amp;lt;T&amp;gt;()&lt;/code&gt;, but can be used where the type of a variable is not easily available.</source>
          <target state="translated">가리키는 값 유형의 이름을 문자열 조각으로 반환합니다. 이것은 동일하다 &lt;code&gt;type_name::&amp;lt;T&amp;gt;()&lt;/code&gt; 하지만, 변수의 종류를 쉽게 사용할 수없는 곳에서 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="83333fccf6ef75f54e0218546c7f725da1ebface" translate="yes" xml:space="preserve">
          <source>Returns the natural logarithm of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 자연 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a5ab689a5bae1343ba9a9f3bfb72e68ef394c018" translate="yes" xml:space="preserve">
          <source>Returns the natural logarithm of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 자연 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dd24a7328e5a280a50328c4d1161c9e543f887b5" translate="yes" xml:space="preserve">
          <source>Returns the natural logarithm of the number.</source>
          <target state="translated">숫자의 자연 로그를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7237905abd66fd12dcfc26285a6307a450f5654f" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to a number. Round half-way cases away from &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">가장 가까운 정수를 숫자로 반환합니다. 반 중간 케이스는 &lt;code&gt;0.0&lt;/code&gt; 에서 멀어집니다 .</target>
        </trans-unit>
        <trans-unit id="cb642cb9e0d9834abf0326cb195f07477b421233" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 에 가장 가까운 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8c2a297f62690660d2c8c66bf770c97c7d792116" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f32&lt;/code&gt;. May raise an inexact floating-point exception if the argument is not an integer.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 에 가장 가까운 정수를 반환합니다 . 인수가 정수가 아닌 경우 부정확 한 부동 소수점 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21886742e30f552ab55260a40c0dfc411b212b95" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f32&lt;/code&gt;. Rounds half-way cases away from zero.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 에 가장 가까운 정수를 반환합니다 . 중간 케이스를 0에서 멀어지게 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="64d2e0d5f5f9bf1f5571360f810d07d13da9fc4c" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 에 가장 가까운 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c4ac32407096b500363b8636a1dc0b5f0a8b79dc" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f64&lt;/code&gt;. May raise an inexact floating-point exception if the argument is not an integer.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 에 가장 가까운 정수를 반환합니다 . 인수가 정수가 아닌 경우 부정확 한 부동 소수점 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc52ce4b4d190d8db6e2e9afd8bd2d3a54c597c7" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f64&lt;/code&gt;. Rounds half-way cases away from zero.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 에 가장 가까운 정수를 반환합니다 . 중간 케이스를 0에서 멀어지게 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="e4f5b3c77ebb2efbd715912995a73410c47b8d5b" translate="yes" xml:space="preserve">
          <source>Returns the number of 16-bit code units this &lt;code&gt;char&lt;/code&gt; would need if encoded in UTF-16.</source>
          <target state="translated">UTF-16으로 인코딩 된 경우이 &lt;code&gt;char&lt;/code&gt; 필요한 16 비트 코드 단위 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6281e8c8df622284747d80c8ac8f829737dc6435" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;em&gt;successor&lt;/em&gt; steps required to get from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 부터 &lt;code&gt;end&lt;/code&gt; 데 필요한 &lt;em&gt;후속&lt;/em&gt; 단계 의 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="720495806ad0e14053a539d5ed16665ef8c1b45b" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;em&gt;successor&lt;/em&gt; steps required to get from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;. &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 부터 &lt;code&gt;end&lt;/code&gt; 데 필요한 &lt;em&gt;후속&lt;/em&gt; 단계 의 수를 반환합니다 . &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0a7f3574ab5097dd0265c4a9d8549969beb7906" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;em&gt;whole&lt;/em&gt; seconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">반환의 수를 &lt;em&gt;전체&lt;/em&gt; 초이에 포함 된 &lt;code&gt;Duration&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96930962b8edcd03a1fa8561a83c6fec41c9989a" translate="yes" xml:space="preserve">
          <source>Returns the number of bits set in an integer type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">정수 타입 &lt;code&gt;T&lt;/code&gt; 에 설정된 비트 수를 반환</target>
        </trans-unit>
        <trans-unit id="28c529d34cbb9a98aaac0741ad1eeebbae42b8dc" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, 512-byte units.</source>
          <target state="translated">파일에 할당 된 블록 수 (512 바이트 단위)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eddff80318319ea022b5496c8822b394111ee355" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, 512-byte units. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_blocks&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일에 할당 된 블록 수 (512 바이트 단위)를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_blocks&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e890b8da5e9f5ed3855b2c0ebaf360294627c90" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, in 512-byte units.</source>
          <target state="translated">파일에 할당 된 블록 수를 512 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="855d42c182e54c20593bc45e8be3be8b7d7f8735" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, in 512-byte units. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blocks&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일에 할당 된 블록 수를 512 바이트 단위로 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blocks&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6434b6944d2238b15a52d8a3e969badaeca1acd5" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes read.</source>
          <target state="translated">읽은 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ee242ec486fc4bd3b3ac4fa373d2caf18fa97a52" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes that can be read before this instance will return EOF.</source>
          <target state="translated">이 인스턴스가 EOF를 리턴하기 전에 읽을 수있는 바이트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="03258f40d4ec53e1df9bba9496419fe9c8eacad5" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes the internal buffer can hold at once.</source>
          <target state="translated">내부 버퍼가 한 번에 저장할 수있는 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dc667e25a161ffe5f865ed1e184f902a17a34a4b" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes the internal buffer can hold without flushing.</source>
          <target state="translated">내부 버퍼가 플러시하지 않고 보유 할 수있는 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="34295ce135f3d1c1247d249b273d39da97aa1a1b" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes this &lt;code&gt;char&lt;/code&gt; would need if encoded in UTF-8.</source>
          <target state="translated">이 &lt;code&gt;char&lt;/code&gt; 의 바이트 수를 돌려줍니다UTF-8로 인코딩 된 필요한 .</target>
        </trans-unit>
        <trans-unit id="1851900c6b83fd96b21463287e58ed074d952fb8" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes written.</source>
          <target state="translated">쓴 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b10d409e1330d3f9dc58defe912aa849299ede80" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; 의 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="24c3b1fe85f698a84f93ffe3c38ed093349a4fbc" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the map.</source>
          <target state="translated">지도의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1cbf3b2f459f250f2c2d9e23c7b2faf808ddc568" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the set.</source>
          <target state="translated">세트 내의 요소 수를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="c012fe0604da402f4dc1758c756c9188e1bbdc5c" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the slice.</source>
          <target state="translated">슬라이스의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8e3bc830d0ddf8fdc5d4aec673164e97e3d68f19" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the vector, also referred to as its 'length'.</source>
          <target state="translated">벡터의 요소 수를 '길이'라고도합니다.</target>
        </trans-unit>
        <trans-unit id="c545b209598e28721cdaf0bee4a0d709a4638984" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the &lt;code&gt;VecDeque&lt;/code&gt; can hold without reallocating.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; 가 재 할당없이 보유 할 수있는 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8cdab4b15f25c7eb0c9ed75a8262458f6c286463" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the binary heap can hold without reallocating.</source>
          <target state="translated">이진 힙이 재 할당없이 보유 할 수있는 요소 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="1becc1d39ab8dbc391f6aad03e1c15b64ad56109" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the map can hold without reallocating.</source>
          <target state="translated">재 할당없이 맵이 보유 할 수있는 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2e970bbfaa04c221f60030aec585bd8dddfe9864" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the set can hold without reallocating.</source>
          <target state="translated">재 할당없이 집합이 보유 할 수있는 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32e1df76d723addf95da715139184ea2ec30efc5" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the vector can hold without reallocating.</source>
          <target state="translated">재 할당없이 벡터가 보유 할 수있는 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7df2aa4d3dc9f6d3ff4c9009c185489b61395196" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links pointing to this file.</source>
          <target state="translated">이 파일을 가리키는 하드 링크 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4c9a095340d4ec401e05ccf76c5ebdfb6820d552" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links pointing to this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.nlink&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일을 가리키는 하드 링크 수를 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.nlink&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ad0b9dafd2155adc5c331e542d5a8a2c3c9b01a" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links to file.</source>
          <target state="translated">파일에 대한 하드 링크 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d78e77a67dbf1414bcf10daa7d2a7ed9f95eb421" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links to file. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_nlink&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일에 대한 하드 링크 수를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_nlink&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9cc5c3d3aacafec3b4f9c9e53f0b47bc73aeecd" translate="yes" xml:space="preserve">
          <source>Returns the number of hardware threads available to the program.</source>
          <target state="translated">프로그램에서 사용할 수있는 하드웨어 스레드 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="94b420c8d458f142295c871d40b6fad08bd72b03" translate="yes" xml:space="preserve">
          <source>Returns the number of leading ones in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 이진 표현에서 선행 숫자의 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a92db6deee30912ade983794ce70aad03edb0b0f" translate="yes" xml:space="preserve">
          <source>Returns the number of leading unset bits (zeroes) in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">정수 유형 &lt;code&gt;T&lt;/code&gt; 의 선행 설정 비트 수 (0)를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dae5a5045ddc829a1383c4ac50a88d9dcf10d66d" translate="yes" xml:space="preserve">
          <source>Returns the number of leading zeros in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 이진 표현에서 선행 0의 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d832cefaae934438ce2d4ef386004669cb52ba4b" translate="yes" xml:space="preserve">
          <source>Returns the number of ones in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 이진 표현에서 1의 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="97655611ca81b408277e39f6a5decfef237a405a" translate="yes" xml:space="preserve">
          <source>Returns the number of seconds contained by this &lt;code&gt;Duration&lt;/code&gt; as &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 에 포함되는 초수 를 &lt;code&gt;f32&lt;/code&gt; 로 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="0b5e2120974f53ae492dacc5bfc48941d7abe632" translate="yes" xml:space="preserve">
          <source>Returns the number of seconds contained by this &lt;code&gt;Duration&lt;/code&gt; as &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 에 포함되는 초수 를 &lt;code&gt;f64&lt;/code&gt; 로 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="63a46f40f8ef8cc408902bd6c925cd90edfaa7b7" translate="yes" xml:space="preserve">
          <source>Returns the number of steps between two step objects. The count is inclusive of &lt;code&gt;start&lt;/code&gt; and exclusive of &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">두 단계 오브젝트 사이의 단계 수를 리턴합니다. 카운트는 &lt;code&gt;start&lt;/code&gt; 포함 하고 &lt;code&gt;end&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="427639049bb9cfb4a7d577a0181f28d0bf88bae0" translate="yes" xml:space="preserve">
          <source>Returns the number of steps between two step objects. The count is inclusive of &lt;code&gt;start&lt;/code&gt; and exclusive of &lt;code&gt;end&lt;/code&gt;. &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">두 단계 오브젝트 사이의 단계 수를 리턴합니다. 카운트는 &lt;code&gt;start&lt;/code&gt; 포함 하고 &lt;code&gt;end&lt;/code&gt; 합니다. &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3903587ab9df7f73d17b443d8e643044dd070f41" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing ones in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 이진 표현에서 후행 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6671fd92a76e925fab2823d109d27a8de831276a" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing unset bits (zeroes) in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">정수 유형 &lt;code&gt;T&lt;/code&gt; 의 후행 설정되지 않은 비트 수 (0)를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eab9f3d5e6f6155d60647266e42f2a504f019bbe" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing zeros in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 이진 표현에서 후행 0의 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7265b51e472568d48ac8c1b69e47a4e011138184" translate="yes" xml:space="preserve">
          <source>Returns the number of used bytes.</source>
          <target state="translated">사용 된 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="29aa7f303b62d8d46db345a5c69b269a2bd376d4" translate="yes" xml:space="preserve">
          <source>Returns the number of variants in the enum type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">열거 형 &lt;code&gt;T&lt;/code&gt; 의 변형 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d28178561c062cbbb07342994184104c8af4e2d5" translate="yes" xml:space="preserve">
          <source>Returns the number of variants of the type &lt;code&gt;T&lt;/code&gt; cast to a &lt;code&gt;usize&lt;/code&gt;; if &lt;code&gt;T&lt;/code&gt; has no variants, returns 0. Uninhabited variants will be counted.</source>
          <target state="translated">반환 유형의 변종의 수 &lt;code&gt;T&lt;/code&gt; 가 A를 캐스팅 &lt;code&gt;usize&lt;/code&gt; ; 경우 &lt;code&gt;T&lt;/code&gt; 가 0 무인도가 변형 더 변형, 반환이 없습니다 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="bd348e230a91a18bbcc6c0bb5c3e441a0cca4cf3" translate="yes" xml:space="preserve">
          <source>Returns the number of zeros in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 의 이진 표현에서 0의 개수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="45352dec964cff88c866e11d68ce5116072729fc" translate="yes" xml:space="preserve">
          <source>Returns the option if it contains a value, otherwise calls &lt;code&gt;f&lt;/code&gt; and returns the result.</source>
          <target state="translated">값이 포함 된 옵션을 반환하고, 그렇지 않으면 &lt;code&gt;f&lt;/code&gt; 를 호출 하고 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bf06fc2805b54388d8ded252fa41db96d725052b" translate="yes" xml:space="preserve">
          <source>Returns the option if it contains a value, otherwise returns &lt;code&gt;optb&lt;/code&gt;.</source>
          <target state="translated">값이 포함 된 옵션을 반환하고, 그렇지 않으면 &lt;code&gt;optb&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a1316e8e7b8a477f38d0ee7bfc3da417f22443f6" translate="yes" xml:space="preserve">
          <source>Returns the parsed prefix data.</source>
          <target state="translated">파싱 ​​된 접두사 데이터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b117b7285a3c2821075991e8b1033779e34a0299" translate="yes" xml:space="preserve">
          <source>Returns the path of a temporary directory.</source>
          <target state="translated">임시 디렉토리의 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f563d04b456eaf4db8367341d7334d73bc450a66" translate="yes" xml:space="preserve">
          <source>Returns the path of the current user's home directory if known.</source>
          <target state="translated">알려진 경우 현재 사용자의 홈 디렉토리 경로를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="77153ca4078bcb66c4d4032735b644ce465f0ba7" translate="yes" xml:space="preserve">
          <source>Returns the path to the program that was given to &lt;a href=&quot;struct.command#method.new&quot;&gt;&lt;code&gt;Command::new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.command#method.new&quot;&gt; &lt;code&gt;Command::new&lt;/code&gt; &lt;/a&gt; 에 주어진 프로그램의 경로를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6e3f5fb3a7dd65253c6914c653f8edf30e8c49a8" translate="yes" xml:space="preserve">
          <source>Returns the payload associated with the panic.</source>
          <target state="translated">패닉과 관련된 페이로드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fca8b37c782fe927223a8e8018197d19aeba86d6" translate="yes" xml:space="preserve">
          <source>Returns the permissions of the file this metadata is for.</source>
          <target state="translated">이 메타 데이터가있는 파일의 권한을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2720e85bef6b0dbe798fe6e2d3c68a82211bb1c4" translate="yes" xml:space="preserve">
          <source>Returns the port number associated with this socket address.</source>
          <target state="translated">이 소켓 주소와 관련된 포트 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9f005ac121d3b3785fafcb15a6d606f9d600acb9" translate="yes" xml:space="preserve">
          <source>Returns the position of the nul byte in the slice that caused &lt;a href=&quot;struct.cstring#method.new&quot;&gt;&lt;code&gt;CString::new&lt;/code&gt;&lt;/a&gt; to fail.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring#method.new&quot;&gt; &lt;code&gt;CString::new&lt;/code&gt; &lt;/a&gt; 가 실패한 슬라이스의 널 바이트 위치를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e153e3cdb60ebf2bb17cc783e5a6250ad233aa99" translate="yes" xml:space="preserve">
          <source>Returns the positive duration which represents how far forward the second system time was from the first.</source>
          <target state="translated">두 번째 시스템 시간이 첫 번째 시스템에서 얼마나 멀리 왔는지 나타내는 양의 지속 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1201f05ed3305d32cba2b7425d656cbb7cd2fe1f" translate="yes" xml:space="preserve">
          <source>Returns the previous value.</source>
          <target state="translated">이전 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c186f4f82806ac77dac17f3f7d7d9eccefbb2c57" translate="yes" xml:space="preserve">
          <source>Returns the raw &lt;a href=&quot;../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; slice for this prefix.</source>
          <target state="translated">이 접두사에 대한 원시 &lt;a href=&quot;../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt; 슬라이스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b78e6c162194bf676f86c06904e67bb4f8e7600f" translate="yes" xml:space="preserve">
          <source>Returns the raw pointer to the underlying data, the length of the string (in bytes), and the allocated capacity of the data (in bytes). These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.string#method.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 데이터에 대한 원시 포인터, 문자열 길이 (바이트) 및 할당 된 데이터 용량 (바이트)을 반환합니다. 이들은 &lt;a href=&quot;struct.string#method.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; 에&lt;/a&gt; 대한 인수와 동일한 순서로 동일한 인수입니다 .</target>
        </trans-unit>
        <trans-unit id="429e163c7cf1f3e8308132df2a867e58aa484cb4" translate="yes" xml:space="preserve">
          <source>Returns the raw pointer to the underlying data, the length of the vector (in elements), and the allocated capacity of the data (in elements). These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.vec#method.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 데이터에 대한 원시 포인터, 벡터 길이 (요소) 및 데이터의 할당 된 용량 (요소)을 반환합니다. 이들은 &lt;a href=&quot;struct.vec#method.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; 에&lt;/a&gt; 대한 인수와 동일한 순서로 동일한 인수입니다 .</target>
        </trans-unit>
        <trans-unit id="8c881c82669753a4e11654cc018eaa4d3811a032" translate="yes" xml:space="preserve">
          <source>Returns the raw pointer to the underlying data, the length of the vector (in elements), the allocated capacity of the data (in elements), and the allocator. These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.vec#method.from_raw_parts_in&quot;&gt;&lt;code&gt;from_raw_parts_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 데이터, 벡터의 길이 (요소), 데이터의 할당 된 용량 (요소) 및 할당 자에 대한 원시 포인터를 반환합니다. 이들은 &lt;a href=&quot;struct.vec#method.from_raw_parts_in&quot;&gt; &lt;code&gt;from_raw_parts_in&lt;/code&gt; 에&lt;/a&gt; 대한 인수와 동일한 순서의 동일한 인수입니다 .</target>
        </trans-unit>
        <trans-unit id="88640dffcf207b874bdca27192e40ad25f550caf" translate="yes" xml:space="preserve">
          <source>Returns the read timeout of this socket.</source>
          <target state="translated">이 소켓의 읽기 타임 아웃을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="5ea8cd21e899dde4ef3730be8e94fce1fe13c572" translate="yes" xml:space="preserve">
          <source>Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = &lt;code&gt;T::MIN&lt;/code&gt; and y = -1</source>
          <target state="translated">확인되지 않은 분할의 나머지를 반환하여 y = 0 또는 x = &lt;code&gt;T::MIN&lt;/code&gt; 및 y = -1 인 경우 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b3ef261a1b92a9a4b088c4c70c49986d741571ac" translate="yes" xml:space="preserve">
          <source>Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = &lt;code&gt;T::min_value()&lt;/code&gt; and y = -1</source>
          <target state="translated">검사되지 않은 나눗셈의 나머지를 반환하여 y = 0 또는 x = &lt;code&gt;T::min_value()&lt;/code&gt; 및 y = -1 인 경우 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="806d06dcbf92ab05dcfe63d70b146835efc0932e" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most &lt;code&gt;N-1&lt;/code&gt; elements.</source>
          <target state="translated">반복기에 의해 반환되지 않을 원래 조각의 나머지를 반환합니다. 반환 된 슬라이스에는 최대 &lt;code&gt;N-1&lt;/code&gt; 개의 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc5f23684b71c80bcea64e7b07dfcd58a70e8023" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most &lt;code&gt;chunk_size-1&lt;/code&gt; elements.</source>
          <target state="translated">반복자가 반환하지 않을 원본 슬라이스의 나머지를 반환합니다. 반환 된 슬라이스는 최대 &lt;code&gt;chunk_size-1&lt;/code&gt; 요소를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="fd0dfb5ec6eaddd847ec72cc05e6d88b1bed5b75" translate="yes" xml:space="preserve">
          <source>Returns the remaining (sub)string of this iterator as a slice.</source>
          <target state="translated">이 반복기의 나머지 (하위) 문자열을 슬라이스로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="04a157d0e715a8c9d1c559dc1fad65fa0f8ba1d9" translate="yes" xml:space="preserve">
          <source>Returns the remaining items of this iterator as a mutable slice.</source>
          <target state="translated">이 이터레이터의 나머지 항목을 변경 가능한 슬라이스로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="027545cdbb69dd8feabe3057b3d85880ce87cfaf" translate="yes" xml:space="preserve">
          <source>Returns the remaining items of this iterator as a slice.</source>
          <target state="translated">이 반복자의 나머지 항목을 슬라이스로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5ab3aa67dfc786bc08d01fb6227be4aea4004418" translate="yes" xml:space="preserve">
          <source>Returns the remaining spare capacity of the vector as a slice of &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">벡터의 남은 여유 용량을 &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; 슬라이스로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="abbc1df3f511a61b305b46fcb9fdb889f766936b" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked addition, resulting in undefined behavior when &lt;code&gt;x + y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x + y &amp;lt; T::MIN&lt;/code&gt;.</source>
          <target state="translated">확인되지 않은 더하기의 결과를 반환하여 &lt;code&gt;x + y &amp;gt; T::MAX&lt;/code&gt; 또는 &lt;code&gt;x + y &amp;lt; T::MIN&lt;/code&gt; 때 정의되지 않은 동작이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="70fc3f0c75305aeeca36c3927e9f1404a9e09390" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked addition, resulting in undefined behavior when &lt;code&gt;x + y &amp;gt; T::max_value()&lt;/code&gt; or &lt;code&gt;x + y &amp;lt; T::min_value()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x + y &amp;gt; T::max_value()&lt;/code&gt; 또는 &lt;code&gt;x + y &amp;lt; T::min_value()&lt;/code&gt; 때 확인되지 않은 더하기의 결과를 반환하여 정의되지 않은 동작이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="b5737e2a90e952931b3da37731b673f06fdd1624" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked multiplication, resulting in undefined behavior when &lt;code&gt;x * y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x * y &amp;lt; T::MIN&lt;/code&gt;.</source>
          <target state="translated">확인되지 않은 곱셈의 결과를 반환하여 &lt;code&gt;x * y &amp;gt; T::MAX&lt;/code&gt; 또는 &lt;code&gt;x * y &amp;lt; T::MIN&lt;/code&gt; 때 정의되지 않은 동작이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="b9745bee6c80d896cf8f39d7600119e7d9e0b6e6" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked multiplication, resulting in undefined behavior when &lt;code&gt;x * y &amp;gt; T::max_value()&lt;/code&gt; or &lt;code&gt;x * y &amp;lt; T::min_value()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x * y &amp;gt; T::max_value()&lt;/code&gt; 또는 &lt;code&gt;x * y &amp;lt; T::min_value()&lt;/code&gt; 인 경우 검사되지 않은 곱셈의 결과를 반환하여 정의되지 않은 동작을 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="de414e90ec1393c95c07a4e47e5e93f614417b18" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked substraction, resulting in undefined behavior when &lt;code&gt;x - y &amp;gt; T::max_value()&lt;/code&gt; or &lt;code&gt;x - y &amp;lt; T::min_value()&lt;/code&gt;.</source>
          <target state="translated">검사되지 않은 빼기 결과를 반환하여 &lt;code&gt;x - y &amp;gt; T::max_value()&lt;/code&gt; 또는 &lt;code&gt;x - y &amp;lt; T::min_value()&lt;/code&gt; 때 정의되지 않은 동작이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="64c4926926f86f33410ade9b87a59fa898e299fa" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked subtraction, resulting in undefined behavior when &lt;code&gt;x - y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x - y &amp;lt; T::MIN&lt;/code&gt;.</source>
          <target state="translated">확인되지 않은 빼기의 결과를 반환하여 &lt;code&gt;x - y &amp;gt; T::MAX&lt;/code&gt; 또는 &lt;code&gt;x - y &amp;lt; T::MIN&lt;/code&gt; 때 정의되지 않은 동작이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="8ae3db5fb2b9f920328b0a1c07245a941fda453a" translate="yes" xml:space="preserve">
          <source>Returns the rights applied to this file.</source>
          <target state="translated">이 파일에 적용된 권한을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fa0c068d11859365b18192e20c77088112832e94" translate="yes" xml:space="preserve">
          <source>Returns the rights applied to this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일에 적용된 권한을 반환합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mode&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee530c291660835f1f45ef41a5ab581ece61ca13" translate="yes" xml:space="preserve">
          <source>Returns the scope ID associated with this address.</source>
          <target state="translated">이 주소와 관련된 범위 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="678c9b03c50c34623a2e47a9879f160e0a560b4f" translate="yes" xml:space="preserve">
          <source>Returns the second argument if the comparison determines them to be equal.</source>
          <target state="translated">비교에서 동일한 것으로 판단되면 두 번째 인수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ff680bbab3415d4c9f332372b7218874374e1ad6" translate="yes" xml:space="preserve">
          <source>Returns the sine of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="488db317dfe78ab272e32db4af358f727947f930" translate="yes" xml:space="preserve">
          <source>Returns the sine of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="893ab8c9895f0365c4b58fcc52206bd9e9ee20c1" translate="yes" xml:space="preserve">
          <source>Returns the sixteen eight-bit integers the IPv6 address consists of.</source>
          <target state="translated">IPv6 주소로 구성된 16 개의 8 비트 정수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ad6de0505e79afe733be59c25c78e77748c9ec6" translate="yes" xml:space="preserve">
          <source>Returns the size of a type in bytes.</source>
          <target state="translated">유형의 크기를 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4ab55a093c4d747f70a70ca22d5f574fecd8954f" translate="yes" xml:space="preserve">
          <source>Returns the size of the file (if it is a regular file or a symbolic link) in bytes.</source>
          <target state="translated">파일의 크기 (일반 파일 또는 심볼릭 링크 인 경우)를 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ab6857e7ad65f594a548e2232b4c32d4c45dc30a" translate="yes" xml:space="preserve">
          <source>Returns the size of the file (if it is a regular file or a symbolic link) in bytes. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일의 크기 (일반 파일 또는 심볼릭 링크 인 경우)를 바이트 단위로 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_size&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="596ea0232a4d065a64fde2f486071c2a597a139d" translate="yes" xml:space="preserve">
          <source>Returns the size of the file, in bytes, this metadata is for.</source>
          <target state="translated">이 메타 데이터의 파일 크기를 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e3c2387c476eb088dd4a2b997b29073bc3408f87" translate="yes" xml:space="preserve">
          <source>Returns the size of the pointed-to value in bytes.</source>
          <target state="translated">지정된 값의 크기를 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32bf033f7107839197600c893b817513a6c17e0d" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to a number.</source>
          <target state="translated">숫자보다 크거나 같은 가장 작은 정수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b59a3f2aa87e88bf5431631e4df52338b23c8902" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 보다 크거나 같은 가장 작은 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="28bd143b890a1dd19b9c42465e4a4e0673681aeb" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 보다 크거나 같은 가장 작은 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b7e460cb206a1385113e4f9b7160a6a8e71b5cd3" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;n&lt;/code&gt;. If the next power of two is greater than the type's maximum value, &lt;code&gt;None&lt;/code&gt; is returned, otherwise the power of two is wrapped in &lt;code&gt;Some&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 보다 크거나 같은 2의 최소 제곱을 반환합니다 . 다음에 2의 거듭 제곱이 유형의 최대 값보다 크면 &lt;code&gt;None&lt;/code&gt; 이 반환되고, 그렇지 않으면 2의 거듭 제곱이 &lt;code&gt;Some&lt;/code&gt; 에 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c18590c98b090fd7b97738ceeb4be855663893a" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;n&lt;/code&gt;. If the next power of two is greater than the type's maximum value, the return value is wrapped to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 보다 크거나 같은 2의 최소 제곱을 반환합니다 . 다음 2의 거듭 제곱이 유형의 최대 값보다 크면 반환 값이 &lt;code&gt;0&lt;/code&gt; 으로 줄어 듭니다 .</target>
        </trans-unit>
        <trans-unit id="4cd3eec23838310ec32b907db88edb3cc932a796" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">Returns the smallest power of two greater than or equal to &lt;code&gt;self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7ad453b16957fdb2bb77c37c31544afecd12301" translate="yes" xml:space="preserve">
          <source>Returns the smallest value that can be represented by this integer type.</source>
          <target state="translated">이 정수형으로 나타낼 수있는 가장 작은 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="290cdc5140b6389d4b43579e0a84d62136cf1260" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the local half of this TCP connection.</source>
          <target state="translated">이 TCP 연결 로컬 절반의 소켓 주소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8c7f1ae8ae82d29fa352423e4b438aa08dc9cba8" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the local half of this connection.</source>
          <target state="translated">이 접속 로컬 절반의 소켓 주소를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="006b46ce56639d41f45e56bf9edb9ba2eea62e08" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote half of this connection.</source>
          <target state="translated">이 접속의 리모트 절반의 소켓 주소를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="3356af1c420785b78b73f03cb8b8639ef4169753" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote peer of this TCP connection.</source>
          <target state="translated">이 TCP 접속의 리모트 피어의 소켓 주소를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="be0156fe45dd769b5dac60a507d422d80dac537b" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote peer this socket was connected to.</source>
          <target state="translated">이 소켓이 연결된 원격 피어의 소켓 주소를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="95355a6d70618c715f149c9a5ebd25a9a16c9ce9" translate="yes" xml:space="preserve">
          <source>Returns the socket address that this socket was created from.</source>
          <target state="translated">이 소켓이 작성된 소켓 주소를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="91ccde3304769ed5877c00e052aec5a0535d7ea9" translate="yes" xml:space="preserve">
          <source>Returns the source location of the caller of this function. If that function's caller is annotated then its call location will be returned, and so on up the stack to the first call within a non-tracked function body.</source>
          <target state="translated">이 함수 호출자의 소스 위치를 반환합니다. 해당 함수의 호출자가 주석을 달면 해당 호출 위치가 반환되고 추적되지 않는 함수 본문 내에서 첫 번째 호출까지 스택 위로 올라갑니다.</target>
        </trans-unit>
        <trans-unit id="d91af5a12b9cefb8820321cc141efdd296d7610c" translate="yes" xml:space="preserve">
          <source>Returns the square root of a number.</source>
          <target state="translated">숫자의 제곱근을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="460cfbdbb3f494bb341f4d449e902bb3420d8045" translate="yes" xml:space="preserve">
          <source>Returns the square root of an &lt;code&gt;f32&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 의 제곱근을 반환</target>
        </trans-unit>
        <trans-unit id="bd0e705be2c1897c62ebbdeff195d246b2dda06d" translate="yes" xml:space="preserve">
          <source>Returns the square root of an &lt;code&gt;f64&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 의 제곱근을 반환합니다</target>
        </trans-unit>
        <trans-unit id="6a1843677592374dc17851134c3d54d3f7223126" translate="yes" xml:space="preserve">
          <source>Returns the start value as a &lt;code&gt;Bound&lt;/code&gt;.</source>
          <target state="translated">시작 값을 &lt;code&gt;Bound&lt;/code&gt; 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="116a6689c371cfd5ef6c7093fabfdfa749dde9ca" translate="yes" xml:space="preserve">
          <source>Returns the status of this backtrace, indicating whether this backtrace request was unsupported, disabled, or a stack trace was actually captured.</source>
          <target state="translated">이 역 추적 요청이 지원되지 않았는지, 비활성화되었는지 또는 스택 추적이 실제로 캡처되었는지 여부를 나타내는이 역 추적의 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e6b86a33bd5aa1ecdb4f8e9a240ff20d86b527ec" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 대칭적인 차이를 새로운 &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; 로서 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="dc1aaf74dc56c8a619e913235e8c7aa762c9a44d" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 대칭적인 차이를 새로운 &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; 줍니다.</target>
        </trans-unit>
        <trans-unit id="21d51347b12d3977a2076de884aca1ad5ba99d04" translate="yes" xml:space="preserve">
          <source>Returns the system time corresponding to &quot;now&quot;.</source>
          <target state="translated">&quot;now&quot;에 해당하는 시스템 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="afe3d9242e2d934af6d07a4b1dac82abbdabeb6a" translate="yes" xml:space="preserve">
          <source>Returns the total number of nanoseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 에 포함되는 총 나노초 수를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="b247e92aea7b5cee1ffa599a624b89bcad6f6857" translate="yes" xml:space="preserve">
          <source>Returns the total number of whole microseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 에 포함되는 전체 마이크로 초의 총수를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="b345394e3cbbefe1c77de3c579ece46340bb34f8" translate="yes" xml:space="preserve">
          <source>Returns the total number of whole milliseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 에 포함되는 총 밀리 세컨드 수를 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="ed5f25a2b2709329320e75ee032e7a629d1410c5" translate="yes" xml:space="preserve">
          <source>Returns the total size of this file in bytes.</source>
          <target state="translated">이 파일의 전체 크기를 바이트 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="8622948abb4c3129687690dd304247bb6571bcc2" translate="yes" xml:space="preserve">
          <source>Returns the total size of this file in bytes. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일의 전체 크기를 바이트 단위로 돌려줍니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.size&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4040f71366469bc690c4ccd7ecefc49d3e076068" translate="yes" xml:space="preserve">
          <source>Returns the two raw pointers spanning the slice.</source>
          <target state="translated">슬라이스에 걸쳐있는 두 개의 원시 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1ea66515e0299f048802d6c53a06e60586e915e7" translate="yes" xml:space="preserve">
          <source>Returns the two unsafe mutable pointers spanning the slice.</source>
          <target state="translated">슬라이스에 걸쳐있는 두 개의 안전하지 않은 가변 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c25cff868d33e26c28d926991fe9caa5cb98d81" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;d_ino&lt;/code&gt; field in the contained &lt;code&gt;dirent&lt;/code&gt; structure.</source>
          <target state="translated">포함 된 &lt;code&gt;dirent&lt;/code&gt; 구조 에서 기본 &lt;code&gt;d_ino&lt;/code&gt; 필드를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b89f96114e1ef82606c3f4d6bfbaaa27228d7362" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;d_ino&lt;/code&gt; field in the contained &lt;code&gt;dirent&lt;/code&gt; structure. &lt;a href=&quot;../os/unix/fs/trait.direntryext#tymethod.ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">포함 된 &lt;code&gt;dirent&lt;/code&gt; 구조 에서 기본 &lt;code&gt;d_ino&lt;/code&gt; 필드를 반환합니다 . &lt;a href=&quot;../os/unix/fs/trait.direntryext#tymethod.ino&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="71b833977f125414585afe78c2a30e982ea7a3c2" translate="yes" xml:space="preserve">
          <source>Returns the underlying raw &lt;code&gt;st_mode&lt;/code&gt; bits that contain the standard Unix permissions for this file.</source>
          <target state="translated">이 파일에 대한 표준 Unix 권한이 포함 된 기본 원시 &lt;code&gt;st_mode&lt;/code&gt; 비트를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="e0e96412d993c2edb28c5bf3ea18e69b86632385" translate="yes" xml:space="preserve">
          <source>Returns the underlying raw &lt;code&gt;st_mode&lt;/code&gt; bits that contain the standard Unix permissions for this file. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일에 대한 표준 Unix 권한이 포함 된 기본 원시 &lt;code&gt;st_mode&lt;/code&gt; 비트를 반환 합니다. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.mode&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a0e272c3d22ad5b5acb84c6c9e56981705ea1a81" translate="yes" xml:space="preserve">
          <source>Returns the union of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 결합을 새로운 &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; 로서 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="334d0670ad0fa6aca1264ca018365740fad472eb" translate="yes" xml:space="preserve">
          <source>Returns the union of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 결합을 새로운 &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d905f4d6997cd1a5fd676b9c358c17f6454381c4" translate="yes" xml:space="preserve">
          <source>Returns the unpaired surrogate which caused this error.</source>
          <target state="translated">이 오류를 일으킨 페어링되지 않은 대리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d89ba898545e92c59008e3e9e9e9e2ca5c4c79b6" translate="yes" xml:space="preserve">
          <source>Returns the upper bound of the range (inclusive).</source>
          <target state="translated">범위의 상한을 리턴합니다 (포함).</target>
        </trans-unit>
        <trans-unit id="99d0f8c4096bad66de3f1182c097eca425647b98" translate="yes" xml:space="preserve">
          <source>Returns the uppercase equivalent of this string slice, as a new &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 문자열 슬라이스와 동등한 대문자를 새 &lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 으로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="101c75b29fcce7c17fe86967d0f82bfb6bee7742" translate="yes" xml:space="preserve">
          <source>Returns the uppercase equivalent of this string slice, as a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 문자열 슬라이스에 해당하는 대문자를 새 &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 으로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="489a80d3875efc73c9834c732a48c5d439a2a33b" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the file owner.</source>
          <target state="translated">파일 소유자의 사용자 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a2fd3d78d551c5bf85a307804e004ebbb3d4322f" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the file owner. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">파일 소유자의 사용자 ID를 반환합니다. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_uid&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abc0b77fc35d749ebc9192e80bcc0edc4e827a6a" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the owner of this file.</source>
          <target state="translated">이 파일 소유자의 사용자 ID를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a7f382c8ce378856de3a313aabb11958470a144d" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the owner of this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 파일 소유자의 사용자 ID를 리턴합니다. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.uid&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="938f665fa2f6e8ca3e23318a1ecb7d846f60d130" translate="yes" xml:space="preserve">
          <source>Returns the value as a primitive type.</source>
          <target state="translated">기본 유형으로 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d96c8a0ebc9847b35c0e2a2a28868ecaf96fbf28" translate="yes" xml:space="preserve">
          <source>Returns the value of the 'HOME' environment variable if it is set (including to an empty string).</source>
          <target state="translated">'HOME'환경 변수가 설정된 경우 (빈 문자열 포함) 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="40325bf8bdeef6e2f82bd584359925e59eeee6af" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;SO_ERROR&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;SO_ERROR&lt;/code&gt; 옵션 의 값을 돌려 줍니다 .</target>
        </trans-unit>
        <trans-unit id="a764c124837649c50395d3b1b211f5a4c46e3f3b" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable if it is set, otherwise for non-Android it returns &lt;code&gt;/tmp&lt;/code&gt;. If Android, since there is no global temporary folder (it is usually allocated per-app), it returns &lt;code&gt;/data/local/tmp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TMPDIR&lt;/code&gt; 환경 변수가 설정된 경우 값을 반환하고 , 그렇지 않으면 Android 이외의 경우 &lt;code&gt;/tmp&lt;/code&gt; 를 반환 합니다 . Android의 경우 전역 임시 폴더가 없으므로 (일반적으로 앱마다 할당 됨) &lt;code&gt;/data/local/tmp&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5adecd48691250a49a6bd206b4e6fcc12d6525bb" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwFileAttributes&lt;/code&gt; field of this metadata.</source>
          <target state="translated">의 값을 반환 &lt;code&gt;dwFileAttributes&lt;/code&gt; 이 메타 데이터 dwFileAttributes 필드 .</target>
        </trans-unit>
        <trans-unit id="eb6bb8145f27615c9229db90c0fe499b900ef0ea" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwFileAttributes&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_attributes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;dwFileAttributes&lt;/code&gt; 필드 값을 리턴합니다 .&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_attributes&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92c89ad0443d60c2d2d860a665d8f99956fad746" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; field of this metadata.</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; 필드 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cc2dcbb3b4c800dce7f5527955c1d938dd6f017b" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.volume_serial_number&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; 필드 값을 반환합니다 . &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.volume_serial_number&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65f909ba283b06a81bab19947ad469aad37c5efd" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftCreationTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">&lt;code&gt;ftCreationTime&lt;/code&gt; 의 값을 반환이 메타 데이터 필드 .</target>
        </trans-unit>
        <trans-unit id="4f356ec43deb2e4831bb93733877a52e387ecf9d" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftCreationTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.creation_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;ftCreationTime&lt;/code&gt; 필드 값을 리턴합니다 .&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.creation_time&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56a140ac2b221e638070ae238ebc2bdf5c096e84" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">&lt;code&gt;ftLastAccessTime&lt;/code&gt; 의 값을 반환이 메타 데이터 필드 .</target>
        </trans-unit>
        <trans-unit id="dcadee8deeeed464b969afc782db57ebcafd4549" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_access_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;ftLastAccessTime&lt;/code&gt; 필드 값을 리턴합니다 .&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_access_time&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1622e337a803cf23bc08cec15d271a505df66512" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">&lt;code&gt;ftLastWriteTime&lt;/code&gt; 의 값을 반환이 메타 데이터 필드 .</target>
        </trans-unit>
        <trans-unit id="5ebe4f26442072092bdd9babe655a0f41b85b722" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_write_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;ftLastWriteTime&lt;/code&gt; 필드 값을 리턴합니다 . &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_write_time&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="86848c8c28c9c755c8dca8d6501fd14db86b7db5" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; fields of this metadata.</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; 필드 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d00c41e7ccae89f6778864a834d489d285339736" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; fields of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_index&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; 필드 값을 반환합니다 . &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_index&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5649276827c26014c5e106c3e981ac3641c878b8" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; fields of this metadata.</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; 필드 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0fd27516b70428468d6098230117b2dc0a8b22af" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; fields of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; 필드 값을 반환합니다 . &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_size&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dffd4114a3206536e7e9263202c4210aa1b2b397" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nNumberOfLinks&lt;/code&gt; field of this metadata.</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;nNumberOfLinks&lt;/code&gt; 필드 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="eb52e882245afc361d616ab9c767b7235abaa798" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nNumberOfLinks&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.number_of_links&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이 메타 데이터 의 &lt;code&gt;nNumberOfLinks&lt;/code&gt; 필드 값을 리턴합니다 . &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.number_of_links&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="828c16ee28a67cc49cb771d93b72e813c86e66af" translate="yes" xml:space="preserve">
          <source>Returns the value of the discriminant for the variant in 'v', cast to a &lt;code&gt;u64&lt;/code&gt;; if &lt;code&gt;T&lt;/code&gt; has no discriminant, returns 0.</source>
          <target state="translated">'v'의 변형에 대한 판별 값을 &lt;code&gt;u64&lt;/code&gt; 로 캐스트합니다 . 경우 &lt;code&gt;T&lt;/code&gt; 가 더 판별이 없습니다, 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6d250788706415d21292031499161c1e7e5e50ae" translate="yes" xml:space="preserve">
          <source>Returns the value of type &lt;code&gt;T&lt;/code&gt; represented by the all-zero byte-pattern.</source>
          <target state="translated">모두 0 바이트 패턴으로 표시되는 유형 &lt;code&gt;T&lt;/code&gt; 의 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="dce4c05888323014bf6fe3b384ec95b46c0f3d51" translate="yes" xml:space="preserve">
          <source>Returns the value of, in order, the &lt;code&gt;TMP&lt;/code&gt;, &lt;code&gt;TEMP&lt;/code&gt;, &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if any are set and not the empty string. Otherwise, &lt;code&gt;temp_dir&lt;/code&gt; returns the path of the Windows directory. This behavior is identical to that of &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha&quot;&gt;&lt;code&gt;GetTempPath&lt;/code&gt;&lt;/a&gt;, which this function uses internally.</source>
          <target state="translated">빈 문자열이 아닌 &lt;code&gt;TMP&lt;/code&gt; , &lt;code&gt;TEMP&lt;/code&gt; , &lt;code&gt;USERPROFILE&lt;/code&gt; 환경 변수가 설정되어있는 경우 순서대로 값을 반환합니다 . 그렇지 않으면 &lt;code&gt;temp_dir&lt;/code&gt; 은 Windows 디렉터리의 경로를 반환합니다. 이 동작은 이 함수가 내부적으로 사용하는 &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha&quot;&gt; &lt;code&gt;GetTempPath&lt;/code&gt; 의&lt;/a&gt; 동작과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="8a219748648d60dfa73d595fe4f723347de2ea15" translate="yes" xml:space="preserve">
          <source>Returns the value of, in order, the &lt;code&gt;TMP&lt;/code&gt;, &lt;code&gt;TEMP&lt;/code&gt;, &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if any are set and not the empty string. Otherwise, &lt;code&gt;temp_dir&lt;/code&gt; returns the path of the Windows directory. This behavior is identical to that of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx&quot;&gt;&lt;code&gt;GetTempPath&lt;/code&gt;&lt;/a&gt;, which this function uses internally.</source>
          <target state="translated">빈 문자열이 아닌 &lt;code&gt;TMP&lt;/code&gt; , &lt;code&gt;TEMP&lt;/code&gt; , &lt;code&gt;USERPROFILE&lt;/code&gt; 환경 변수가 설정된 경우 순서대로 값을 리턴합니다 . 그렇지 않으면 &lt;code&gt;temp_dir&lt;/code&gt; 은 Windows 디렉토리의 경로를 리턴합니다. 이 동작은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx&quot;&gt; &lt;code&gt;GetTempPath&lt;/code&gt; 와&lt;/a&gt; 동일합니다. 이 함수가 내부적으로 사용하는 .</target>
        </trans-unit>
        <trans-unit id="9572733b23def3bda923317c53e2462509fdef4f" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;선행자&lt;/em&gt; 를 취하여 얻을 수있는 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="403367a2c73e6abb177e2cafc577b6dc88e29ebe" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.backward&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;선행자&lt;/em&gt; 를 취하여 얻을 수있는 값을 리턴합니다 . &lt;a href=&quot;iter/trait.step#method.backward&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1df4381fa032c7f3be63e70b1bb68a16ea9a6c33" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.backward_unchecked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;선행자&lt;/em&gt; 를 취하여 얻을 수있는 값을 리턴합니다 . &lt;a href=&quot;iter/trait.step#method.backward_unchecked&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c9466d5ae5f2ed727012926d1a526795f93812c" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;후속 작업&lt;/em&gt; 을 수행하여 얻을 수있는 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="63a2e27926b3ea97136c2cbeae2a696f26714a4c" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.forward&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;후속 작업&lt;/em&gt; 을 수행하여 얻을 수있는 값을 반환합니다 . &lt;a href=&quot;iter/trait.step#method.forward&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="943537b7ccdeae46a9e14e22e0be87747384997b" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.forward_unchecked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;후속 작업&lt;/em&gt; 을 수행하여 얻을 수있는 값을 반환합니다 . &lt;a href=&quot;iter/trait.step#method.forward_unchecked&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="180c7bc8bee0b2996a708179ca2a1339202ef346" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#tymethod.backward_checked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;후속 작업&lt;/em&gt; 을 수행하여 얻을 수있는 값을 반환합니다 . &lt;a href=&quot;iter/trait.step#tymethod.backward_checked&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ee676444ff6fb19214e9757a17a060a2fb301a6" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#tymethod.forward_checked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 시간 의 &lt;em&gt;후속 작업&lt;/em&gt; 을 수행하여 얻을 수있는 값을 반환합니다 . &lt;a href=&quot;iter/trait.step#tymethod.forward_checked&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b1bd9a4882eef9e73cc693287c83649ea87c4eb" translate="yes" xml:space="preserve">
          <source>Returns the working directory for the child process.</source>
          <target state="translated">자식 프로세스의 작업 디렉터리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a67b8ba6d2c094a98d9d77b92a4224f63a9b3a0a" translate="yes" xml:space="preserve">
          <source>Returns the write timeout of this socket.</source>
          <target state="translated">이 소켓의 쓰기 타임 아웃을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="8caec21be10402429ae482b8b4f054e8779889c5" translate="yes" xml:space="preserve">
          <source>Returns this &lt;code&gt;String&lt;/code&gt;'s capacity, in bytes.</source>
          <target state="translated">이 &lt;code&gt;String&lt;/code&gt; 용량을 바이트 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="308a7c84947e79b1e736191bfde42d8448c456e8" translate="yes" xml:space="preserve">
          <source>Returns true if the data is borrowed, i.e. if &lt;code&gt;to_mut&lt;/code&gt; would require additional work.</source>
          <target state="translated">데이터를 빌린 경우, 즉 &lt;code&gt;to_mut&lt;/code&gt; 에 추가 작업이 필요한 경우 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9e745d96228426bb4c41181e369568fe5b8ee672" translate="yes" xml:space="preserve">
          <source>Returns true if the data is owned, i.e. if &lt;code&gt;to_mut&lt;/code&gt; would be a no-op.</source>
          <target state="translated">데이터가 소유 된 경우 true를 반환합니다. 즉, &lt;code&gt;to_mut&lt;/code&gt; 이 작동하지 않는 경우 입니다.</target>
        </trans-unit>
        <trans-unit id="8eebdc50ab4275c0509d65d8f6e232f5ca9d4782" translate="yes" xml:space="preserve">
          <source>Returns true if this &lt;code&gt;Duration&lt;/code&gt; spans no time.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 이 시간에 걸쳐 있지 않으면 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="21c916f27ab0290429e470d20dd116e3f85dc9cc" translate="yes" xml:space="preserve">
          <source>Returns two &lt;code&gt;UnixDatagrams&lt;/code&gt;s which are connected to each other.</source>
          <target state="translated">서로 연결된 두 개의 &lt;code&gt;UnixDatagrams&lt;/code&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="1997def92c07aa40771a479b14582d7c9199601a" translate="yes" xml:space="preserve">
          <source>Returns two &lt;code&gt;UnixStream&lt;/code&gt;s which are connected to each other.</source>
          <target state="translated">서로 연결된 두 개의 &lt;code&gt;UnixStream&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="58b5908caa858b790207e758925108c2f9bb59b2" translate="yes" xml:space="preserve">
          <source>Returns two slices. The first contains no consecutive repeated elements. The second contains all the duplicates in no specified order.</source>
          <target state="translated">두 조각을 반환합니다. 첫 번째 요소에는 연속 된 반복 요소가 없습니다. 두 번째는 지정된 순서없이 모든 중복 항목을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="a705988224286fd86b2b12e8e04c9bf23cfd2249" translate="yes" xml:space="preserve">
          <source>Returns whether the given expression matches any of the given patterns.</source>
          <target state="translated">주어진 표현식이 주어진 패턴과 일치하는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c1b01afed4877df00cb2e26656f68975f1855f4a" translate="yes" xml:space="preserve">
          <source>Returns whether two pointers are guaranteed to be equal.</source>
          <target state="translated">두 포인터가 동일한 지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8e478b8166bf08569ea56ce3a1298383c77bc647" translate="yes" xml:space="preserve">
          <source>Returns whether two pointers are guaranteed to be unequal.</source>
          <target state="translated">두 포인터가 같지 않은지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2e7c2bb1bfe446ed32e1ab9672cc673aa173f1ca" translate="yes" xml:space="preserve">
          <source>Rev</source>
          <target state="translated">Rev</target>
        </trans-unit>
        <trans-unit id="1b23bbd2e4082fee5f5c745e3cbf4bdcf5bca02f" translate="yes" xml:space="preserve">
          <source>Rev::all</source>
          <target state="translated">Rev::all</target>
        </trans-unit>
        <trans-unit id="ea75cddccbdebb8689380f055fe25d5c97e641e8" translate="yes" xml:space="preserve">
          <source>Rev::any</source>
          <target state="translated">Rev::any</target>
        </trans-unit>
        <trans-unit id="8cc8e88e690bc6681b64607317f27b5ce469bacf" translate="yes" xml:space="preserve">
          <source>Rev::borrow</source>
          <target state="translated">Rev::borrow</target>
        </trans-unit>
        <trans-unit id="e2c9f6498ab8be3ec1160607f061244988a68069" translate="yes" xml:space="preserve">
          <source>Rev::borrow_mut</source>
          <target state="translated">Rev::borrow_mut</target>
        </trans-unit>
        <trans-unit id="73dedb69b68b627e1da0fa0ad68f89639ea0dc58" translate="yes" xml:space="preserve">
          <source>Rev::by_ref</source>
          <target state="translated">Rev::by_ref</target>
        </trans-unit>
        <trans-unit id="6de60f5aa1ad60301b61eeb377b5ccf5c544536c" translate="yes" xml:space="preserve">
          <source>Rev::chain</source>
          <target state="translated">Rev::chain</target>
        </trans-unit>
        <trans-unit id="e4d458e0e8c6b2df185803f6fa9e267ace7c591d" translate="yes" xml:space="preserve">
          <source>Rev::clone</source>
          <target state="translated">Rev::clone</target>
        </trans-unit>
        <trans-unit id="8404df5a18edcc0d8879c9cf2b77a33bf8b7dcef" translate="yes" xml:space="preserve">
          <source>Rev::clone_from</source>
          <target state="translated">Rev::clone_from</target>
        </trans-unit>
        <trans-unit id="1e0d93f9be1c00147e833a50c4a743cb53a3ee55" translate="yes" xml:space="preserve">
          <source>Rev::clone_into</source>
          <target state="translated">Rev::clone_into</target>
        </trans-unit>
        <trans-unit id="7b0e62b62cf92f3958926fdad9beac39623add70" translate="yes" xml:space="preserve">
          <source>Rev::cloned</source>
          <target state="translated">Rev::cloned</target>
        </trans-unit>
        <trans-unit id="4587b57f8345a4a3e332998677d7623ed93892bf" translate="yes" xml:space="preserve">
          <source>Rev::cmp</source>
          <target state="translated">Rev::cmp</target>
        </trans-unit>
        <trans-unit id="6c408188f25a62347600f9f6f7efc47d107ffba5" translate="yes" xml:space="preserve">
          <source>Rev::collect</source>
          <target state="translated">Rev::collect</target>
        </trans-unit>
        <trans-unit id="0a4354f5e33fdf26d7b5b515676d4cb202a571e7" translate="yes" xml:space="preserve">
          <source>Rev::copied</source>
          <target state="translated">Rev::copied</target>
        </trans-unit>
        <trans-unit id="fa1132674a1131c0a0397182fa3fd35714b88c64" translate="yes" xml:space="preserve">
          <source>Rev::count</source>
          <target state="translated">Rev::count</target>
        </trans-unit>
        <trans-unit id="e7f33ff3b18fb0f96be20642157a1c5b94d511be" translate="yes" xml:space="preserve">
          <source>Rev::cycle</source>
          <target state="translated">Rev::cycle</target>
        </trans-unit>
        <trans-unit id="7d9d010b059a96e262ac8e5a6cdaab5542ee4687" translate="yes" xml:space="preserve">
          <source>Rev::enumerate</source>
          <target state="translated">Rev::enumerate</target>
        </trans-unit>
        <trans-unit id="bf2b839bd26ba50d8e6e5fedcd66fb40e0954dbb" translate="yes" xml:space="preserve">
          <source>Rev::eq</source>
          <target state="translated">Rev::eq</target>
        </trans-unit>
        <trans-unit id="e7db1b47702a233fc622c97b15e840fcf2355811" translate="yes" xml:space="preserve">
          <source>Rev::filter</source>
          <target state="translated">Rev::filter</target>
        </trans-unit>
        <trans-unit id="c0636967a7dd6c6b5fee9571848c89e0e6b37fa4" translate="yes" xml:space="preserve">
          <source>Rev::filter_map</source>
          <target state="translated">Rev::filter_map</target>
        </trans-unit>
        <trans-unit id="7e246913ec9f2d6ac5302634f16110029ac885b8" translate="yes" xml:space="preserve">
          <source>Rev::find</source>
          <target state="translated">Rev::find</target>
        </trans-unit>
        <trans-unit id="0190e76cc1988765fc2380f700844d31a354a7bb" translate="yes" xml:space="preserve">
          <source>Rev::find_map</source>
          <target state="translated">Rev::find_map</target>
        </trans-unit>
        <trans-unit id="9ec5179cd3ca49c74bb4e760048b7220f38d9284" translate="yes" xml:space="preserve">
          <source>Rev::flat_map</source>
          <target state="translated">Rev::flat_map</target>
        </trans-unit>
        <trans-unit id="225d34652551554f3a89a77e062a7a155988bda8" translate="yes" xml:space="preserve">
          <source>Rev::flatten</source>
          <target state="translated">Rev::flatten</target>
        </trans-unit>
        <trans-unit id="62575efece92a283feda80baa61c2a97054001e2" translate="yes" xml:space="preserve">
          <source>Rev::fmt</source>
          <target state="translated">Rev::fmt</target>
        </trans-unit>
        <trans-unit id="7d95ad31053fb338311f4d08c6d297a8a283a2b6" translate="yes" xml:space="preserve">
          <source>Rev::fold</source>
          <target state="translated">Rev::fold</target>
        </trans-unit>
        <trans-unit id="1593c69705065114910fc862fec9b3464e7a1e61" translate="yes" xml:space="preserve">
          <source>Rev::for_each</source>
          <target state="translated">Rev::for_each</target>
        </trans-unit>
        <trans-unit id="a39bffcf3500f02b5b324ace604d5f73f4508502" translate="yes" xml:space="preserve">
          <source>Rev::from</source>
          <target state="translated">Rev::from</target>
        </trans-unit>
        <trans-unit id="cbd60e5ba280b4f4324145a1adda2da6a971136b" translate="yes" xml:space="preserve">
          <source>Rev::fuse</source>
          <target state="translated">Rev::fuse</target>
        </trans-unit>
        <trans-unit id="873cbd9880d26c0cdf87aa55ef6d401f65c26c7f" translate="yes" xml:space="preserve">
          <source>Rev::ge</source>
          <target state="translated">Rev::ge</target>
        </trans-unit>
        <trans-unit id="25fe417873e9bf8d09530ff11b2a90f30504e382" translate="yes" xml:space="preserve">
          <source>Rev::gt</source>
          <target state="translated">Rev::gt</target>
        </trans-unit>
        <trans-unit id="f92c8c41775902f0d18700f58581689338de0da4" translate="yes" xml:space="preserve">
          <source>Rev::inspect</source>
          <target state="translated">Rev::inspect</target>
        </trans-unit>
        <trans-unit id="de43a1487bfa1f9ce9ac44d597b981808c53d44e" translate="yes" xml:space="preserve">
          <source>Rev::into</source>
          <target state="translated">Rev::into</target>
        </trans-unit>
        <trans-unit id="41b12c6f490ca67e5c059f82cd7f389f81691d0d" translate="yes" xml:space="preserve">
          <source>Rev::into_iter</source>
          <target state="translated">Rev::into_iter</target>
        </trans-unit>
        <trans-unit id="78dc9bcc5c42dbf0e33ca10baa365d630a987c3b" translate="yes" xml:space="preserve">
          <source>Rev::is_empty</source>
          <target state="translated">Rev::is_empty</target>
        </trans-unit>
        <trans-unit id="ee1895eadacc62b4170b5e3c9dc596b78a2e596b" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted</source>
          <target state="translated">Rev::is_sorted</target>
        </trans-unit>
        <trans-unit id="0b14e8596fb406e0e5a02fb4edae19c0c0f50bf8" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted_by</source>
          <target state="translated">Rev::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="a0339aa17e6fee4a535dfa746c5ebffcbbc064ff" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted_by_key</source>
          <target state="translated">Rev::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="69271a231d2a43f1ce9b3323a711616c3ae5178e" translate="yes" xml:space="preserve">
          <source>Rev::last</source>
          <target state="translated">Rev::last</target>
        </trans-unit>
        <trans-unit id="62a279d095cd31928b407efcc98deec091e8388e" translate="yes" xml:space="preserve">
          <source>Rev::le</source>
          <target state="translated">Rev::le</target>
        </trans-unit>
        <trans-unit id="9d8b8b5216a3192ea158a98424a34191c93833cd" translate="yes" xml:space="preserve">
          <source>Rev::len</source>
          <target state="translated">Rev::len</target>
        </trans-unit>
        <trans-unit id="8e9ac96d4de2466ecd316c1f91603ec27b26f6dc" translate="yes" xml:space="preserve">
          <source>Rev::lt</source>
          <target state="translated">Rev::lt</target>
        </trans-unit>
        <trans-unit id="a309ff1b530a86315f29996f8e5e95f42d96df65" translate="yes" xml:space="preserve">
          <source>Rev::map</source>
          <target state="translated">Rev::map</target>
        </trans-unit>
        <trans-unit id="13fc0b5b7e4061cfabc93fd97e77df45f8bf14de" translate="yes" xml:space="preserve">
          <source>Rev::max</source>
          <target state="translated">Rev::max</target>
        </trans-unit>
        <trans-unit id="f2a8f41d4959a1a4b0b54bf592703f38eda6e0cc" translate="yes" xml:space="preserve">
          <source>Rev::max_by</source>
          <target state="translated">Rev::max_by</target>
        </trans-unit>
        <trans-unit id="3a57fc722077bd36001915718274271fa4c84941" translate="yes" xml:space="preserve">
          <source>Rev::max_by_key</source>
          <target state="translated">Rev::max_by_key</target>
        </trans-unit>
        <trans-unit id="ae572218c9ac7eef60e456cb22b794f75d7e0ca3" translate="yes" xml:space="preserve">
          <source>Rev::min</source>
          <target state="translated">Rev::min</target>
        </trans-unit>
        <trans-unit id="717b07a4d2d09558b9eeb735fd03732d28942baf" translate="yes" xml:space="preserve">
          <source>Rev::min_by</source>
          <target state="translated">Rev::min_by</target>
        </trans-unit>
        <trans-unit id="b635b9d188dc18da9a1c7e703b8e4a520ac3c126" translate="yes" xml:space="preserve">
          <source>Rev::min_by_key</source>
          <target state="translated">Rev::min_by_key</target>
        </trans-unit>
        <trans-unit id="09141d32e008f2b05aadaf1044ecf1a4840592ce" translate="yes" xml:space="preserve">
          <source>Rev::ne</source>
          <target state="translated">Rev::ne</target>
        </trans-unit>
        <trans-unit id="9c639ae7e696436752695f9128ab7443996d43be" translate="yes" xml:space="preserve">
          <source>Rev::next</source>
          <target state="translated">Rev::next</target>
        </trans-unit>
        <trans-unit id="68086698a40e9aec1c5dec320ad4b73283d254df" translate="yes" xml:space="preserve">
          <source>Rev::next_back</source>
          <target state="translated">Rev::next_back</target>
        </trans-unit>
        <trans-unit id="05d6eba031162aff3541fcb21f99e39a85d56d67" translate="yes" xml:space="preserve">
          <source>Rev::nth</source>
          <target state="translated">Rev::nth</target>
        </trans-unit>
        <trans-unit id="a81bfd09b0b8a63e11fb54e6a20098189b515425" translate="yes" xml:space="preserve">
          <source>Rev::nth_back</source>
          <target state="translated">Rev::nth_back</target>
        </trans-unit>
        <trans-unit id="49153ede378f17d37a9c87e1ca317129d8b017a1" translate="yes" xml:space="preserve">
          <source>Rev::partial_cmp</source>
          <target state="translated">Rev::partial_cmp</target>
        </trans-unit>
        <trans-unit id="170d9a09a9560f1dd862ddfcb40722d73ffda2fb" translate="yes" xml:space="preserve">
          <source>Rev::partition</source>
          <target state="translated">Rev::partition</target>
        </trans-unit>
        <trans-unit id="c5affa24edae4f7086a827c7943e67c9ad19eca7" translate="yes" xml:space="preserve">
          <source>Rev::peekable</source>
          <target state="translated">Rev::peekable</target>
        </trans-unit>
        <trans-unit id="746df81e7e44e4774446265edbe5fdc1b8168630" translate="yes" xml:space="preserve">
          <source>Rev::position</source>
          <target state="translated">Rev::position</target>
        </trans-unit>
        <trans-unit id="06891f0cbd66b42213b0a521d231f478938da958" translate="yes" xml:space="preserve">
          <source>Rev::product</source>
          <target state="translated">Rev::product</target>
        </trans-unit>
        <trans-unit id="61b3079d136894c7e064b5b52e1d2ad981672e74" translate="yes" xml:space="preserve">
          <source>Rev::rev</source>
          <target state="translated">Rev::rev</target>
        </trans-unit>
        <trans-unit id="606dc7c354c4c3f0a918e0dd90f032f63a4d96ea" translate="yes" xml:space="preserve">
          <source>Rev::rfind</source>
          <target state="translated">Rev::rfind</target>
        </trans-unit>
        <trans-unit id="d93e6da3d5fa06554cb27eecda1ab00a2639f4ca" translate="yes" xml:space="preserve">
          <source>Rev::rfold</source>
          <target state="translated">Rev::rfold</target>
        </trans-unit>
        <trans-unit id="69887a513371a72a506e9e2b72d6574e1a006ab7" translate="yes" xml:space="preserve">
          <source>Rev::rposition</source>
          <target state="translated">Rev::rposition</target>
        </trans-unit>
        <trans-unit id="2ac558d4958028cac5d050c97576307d3b0c7e90" translate="yes" xml:space="preserve">
          <source>Rev::scan</source>
          <target state="translated">Rev::scan</target>
        </trans-unit>
        <trans-unit id="32bf46d57176ec58a7308c23938fc7a8a6065450" translate="yes" xml:space="preserve">
          <source>Rev::size_hint</source>
          <target state="translated">Rev::size_hint</target>
        </trans-unit>
        <trans-unit id="745daae6d469e14032d310fcbbe039b267f61011" translate="yes" xml:space="preserve">
          <source>Rev::skip</source>
          <target state="translated">Rev::skip</target>
        </trans-unit>
        <trans-unit id="dc68a43da7c6b96a30d49d1450c76f344182303e" translate="yes" xml:space="preserve">
          <source>Rev::skip_while</source>
          <target state="translated">Rev::skip_while</target>
        </trans-unit>
        <trans-unit id="054143a0994b6cd5dd1b483213f5a6c9b1c0b2d1" translate="yes" xml:space="preserve">
          <source>Rev::step_by</source>
          <target state="translated">Rev::step_by</target>
        </trans-unit>
        <trans-unit id="d9663cdc74ad7a47d90d5d997ca949efed24b49c" translate="yes" xml:space="preserve">
          <source>Rev::sum</source>
          <target state="translated">Rev::sum</target>
        </trans-unit>
        <trans-unit id="544a9b94c47ffe3adf4fb88e67c57140817601d9" translate="yes" xml:space="preserve">
          <source>Rev::take</source>
          <target state="translated">Rev::take</target>
        </trans-unit>
        <trans-unit id="7ef936397559c6de4b345f55afcfa6da8c20a28c" translate="yes" xml:space="preserve">
          <source>Rev::take_while</source>
          <target state="translated">Rev::take_while</target>
        </trans-unit>
        <trans-unit id="db658a06bd7f55c9638ea4ee61d0f929584e7346" translate="yes" xml:space="preserve">
          <source>Rev::to_owned</source>
          <target state="translated">Rev::to_owned</target>
        </trans-unit>
        <trans-unit id="4a55fa5472997f719fcb65ca32e38a9494c590c7" translate="yes" xml:space="preserve">
          <source>Rev::try_fold</source>
          <target state="translated">Rev::try_fold</target>
        </trans-unit>
        <trans-unit id="cd736368392119bec6e68191bd957a8b923eac5e" translate="yes" xml:space="preserve">
          <source>Rev::try_for_each</source>
          <target state="translated">Rev::try_for_each</target>
        </trans-unit>
        <trans-unit id="dbeb577d71ccd2a54b3e5a954ded27049870aadb" translate="yes" xml:space="preserve">
          <source>Rev::try_from</source>
          <target state="translated">Rev::try_from</target>
        </trans-unit>
        <trans-unit id="966fc760987fd15f6fba61c00189cc38fffafabd" translate="yes" xml:space="preserve">
          <source>Rev::try_into</source>
          <target state="translated">Rev::try_into</target>
        </trans-unit>
        <trans-unit id="e03bbf2925edcd0e55fbf87c143dcf7214a33801" translate="yes" xml:space="preserve">
          <source>Rev::try_rfold</source>
          <target state="translated">Rev::try_rfold</target>
        </trans-unit>
        <trans-unit id="4866aacf5f321e53501fb39991d7e92a23530109" translate="yes" xml:space="preserve">
          <source>Rev::type_id</source>
          <target state="translated">Rev::type_id</target>
        </trans-unit>
        <trans-unit id="d40b36de24f921fb9d83203737a9d9313e304ed4" translate="yes" xml:space="preserve">
          <source>Rev::unzip</source>
          <target state="translated">Rev::unzip</target>
        </trans-unit>
        <trans-unit id="d26061185131ee794acff98f8cdee42eb789c3a8" translate="yes" xml:space="preserve">
          <source>Rev::zip</source>
          <target state="translated">Rev::zip</target>
        </trans-unit>
        <trans-unit id="57f9933768794f845d000833d367d5698393211d" translate="yes" xml:space="preserve">
          <source>Reverse</source>
          <target state="translated">Reverse</target>
        </trans-unit>
        <trans-unit id="855b7acdf3d35ac4f2adcc88572889dbbd152c8d" translate="yes" xml:space="preserve">
          <source>Reverse::borrow</source>
          <target state="translated">Reverse::borrow</target>
        </trans-unit>
        <trans-unit id="b2b7d426909b05c0abe69fafc7ad9a3373457083" translate="yes" xml:space="preserve">
          <source>Reverse::borrow_mut</source>
          <target state="translated">Reverse::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ae49fc0d147862750a761b423bb48bdac7aea4ed" translate="yes" xml:space="preserve">
          <source>Reverse::clamp</source>
          <target state="translated">Reverse::clamp</target>
        </trans-unit>
        <trans-unit id="e018a9a3e3f5e4a17f25be205ffa5619450a465e" translate="yes" xml:space="preserve">
          <source>Reverse::clone</source>
          <target state="translated">Reverse::clone</target>
        </trans-unit>
        <trans-unit id="1acbb09e0fd503239dfba6d9885e42b30ce68ef2" translate="yes" xml:space="preserve">
          <source>Reverse::clone_from</source>
          <target state="translated">Reverse::clone_from</target>
        </trans-unit>
        <trans-unit id="6fae25f3227a651fa4dab3d82eae4c6d090bf5f7" translate="yes" xml:space="preserve">
          <source>Reverse::clone_into</source>
          <target state="translated">Reverse::clone_into</target>
        </trans-unit>
        <trans-unit id="3576dde77728ccb6dac97f18c9329186fcd25b47" translate="yes" xml:space="preserve">
          <source>Reverse::cmp</source>
          <target state="translated">Reverse::cmp</target>
        </trans-unit>
        <trans-unit id="87d225b7af09dcef297be52eee959d2c55588a88" translate="yes" xml:space="preserve">
          <source>Reverse::default</source>
          <target state="translated">Reverse::default</target>
        </trans-unit>
        <trans-unit id="a524d78b7983211c5e0bd0dfb57a20e67c068d6b" translate="yes" xml:space="preserve">
          <source>Reverse::eq</source>
          <target state="translated">Reverse::eq</target>
        </trans-unit>
        <trans-unit id="27d1dc581d53e247cf1e2bafb5f52a5822dffafb" translate="yes" xml:space="preserve">
          <source>Reverse::fmt</source>
          <target state="translated">Reverse::fmt</target>
        </trans-unit>
        <trans-unit id="ec878d46af0f49ce6792c30cd0b6e1b7235b1958" translate="yes" xml:space="preserve">
          <source>Reverse::from</source>
          <target state="translated">Reverse::from</target>
        </trans-unit>
        <trans-unit id="7c6d0cd9a450b5ac7a9861f8ecd935be369486df" translate="yes" xml:space="preserve">
          <source>Reverse::ge</source>
          <target state="translated">Reverse::ge</target>
        </trans-unit>
        <trans-unit id="ce7cdbde47d875eaad55efb2ef9ffe90f4a03ed4" translate="yes" xml:space="preserve">
          <source>Reverse::gt</source>
          <target state="translated">Reverse::gt</target>
        </trans-unit>
        <trans-unit id="ff3888b2d1d36cd518958cda6a06bbafd40ca557" translate="yes" xml:space="preserve">
          <source>Reverse::hash</source>
          <target state="translated">Reverse::hash</target>
        </trans-unit>
        <trans-unit id="0132646776d34a7463118179e279a28498b7466b" translate="yes" xml:space="preserve">
          <source>Reverse::hash_slice</source>
          <target state="translated">Reverse::hash_slice</target>
        </trans-unit>
        <trans-unit id="e9e019daf91ab04cdc269196e09f2db10403fa64" translate="yes" xml:space="preserve">
          <source>Reverse::into</source>
          <target state="translated">Reverse::into</target>
        </trans-unit>
        <trans-unit id="d9b1e02561cb84eb59fa254f199d5e53c05c8368" translate="yes" xml:space="preserve">
          <source>Reverse::le</source>
          <target state="translated">Reverse::le</target>
        </trans-unit>
        <trans-unit id="4d9a8bfcbe29163526e5bc5a1ad6df0efaa28d68" translate="yes" xml:space="preserve">
          <source>Reverse::lt</source>
          <target state="translated">Reverse::lt</target>
        </trans-unit>
        <trans-unit id="fce2114bbd923c0c4b66d5fbd541e6a46db8b2b1" translate="yes" xml:space="preserve">
          <source>Reverse::max</source>
          <target state="translated">Reverse::max</target>
        </trans-unit>
        <trans-unit id="744f7afa0a87464baa627359381d12071537458e" translate="yes" xml:space="preserve">
          <source>Reverse::min</source>
          <target state="translated">Reverse::min</target>
        </trans-unit>
        <trans-unit id="2947ceb046e4341b0a7b1b01d461498d6d47d77c" translate="yes" xml:space="preserve">
          <source>Reverse::ne</source>
          <target state="translated">Reverse::ne</target>
        </trans-unit>
        <trans-unit id="1a0af82a6b449d1fc4be8050ad565202d480b99c" translate="yes" xml:space="preserve">
          <source>Reverse::partial_cmp</source>
          <target state="translated">Reverse::partial_cmp</target>
        </trans-unit>
        <trans-unit id="dfc38fb2b46e97d4339fe9223ac9e35b911966f9" translate="yes" xml:space="preserve">
          <source>Reverse::to_owned</source>
          <target state="translated">Reverse::to_owned</target>
        </trans-unit>
        <trans-unit id="6b9dbc8067fbcb99860916ed4280269ddf4b0187" translate="yes" xml:space="preserve">
          <source>Reverse::try_from</source>
          <target state="translated">Reverse::try_from</target>
        </trans-unit>
        <trans-unit id="4198456beaa5540ba8be310ee2d5cc7d8f48ea67" translate="yes" xml:space="preserve">
          <source>Reverse::try_into</source>
          <target state="translated">Reverse::try_into</target>
        </trans-unit>
        <trans-unit id="6860559d5fa051e4b834b6077771242282766826" translate="yes" xml:space="preserve">
          <source>Reverse::type_id</source>
          <target state="translated">Reverse::type_id</target>
        </trans-unit>
        <trans-unit id="de938e717e63356d75f69d3afd8292bf2f96a32f" translate="yes" xml:space="preserve">
          <source>ReverseSearcher</source>
          <target state="translated">ReverseSearcher</target>
        </trans-unit>
        <trans-unit id="8d7236df59f914f9071c6e16648b2ef0addf66a1" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction.</source>
          <target state="translated">반복자의 방향을 반대로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="eb8aead23318719eb265935da0734b397d74d732" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../../../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 방향을 반대로 바꿉니다. &lt;a href=&quot;../../../iter/trait.iterator#method.rev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da5c53b657810a4cbe93c7e2f2fa480619340afb" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 방향을 반대로 바꿉니다. &lt;a href=&quot;../../iter/trait.iterator#method.rev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a52ff52ba0845d9c1a9b2c750fd96d9a3a6a3c27" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 방향을 반대로 바꿉니다. &lt;a href=&quot;../iter/trait.iterator#method.rev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9284c1c2c9fd85ba7767c59c99017b534d9eee9" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 방향을 반대로 바꿉니다. &lt;a href=&quot;iter/trait.iterator#method.rev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="729ff069e224b910aab08299c613befadec11121" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 방향을 반대로 바꿉니다. &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="42ebe1d1b22b768e5e0a52d253bd9764dab488b1" translate="yes" xml:space="preserve">
          <source>Reverses the &lt;code&gt;Ordering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ordering&lt;/code&gt; 반대로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="2bd561cb07cd33c0a2ed2162929bc80a36033f08" translate="yes" xml:space="preserve">
          <source>Reverses the bit pattern of the integer.</source>
          <target state="translated">정수의 비트 패턴을 반전시킵니다.</target>
        </trans-unit>
        <trans-unit id="c045f20a6ee66e7b7d06320153c9befa95e70b3f" translate="yes" xml:space="preserve">
          <source>Reverses the bits in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">정수형 &lt;code&gt;T&lt;/code&gt; 의 비트를 반전시킵니다 .</target>
        </trans-unit>
        <trans-unit id="79e3db360b190aa279792f3cec009bf516b1404c" translate="yes" xml:space="preserve">
          <source>Reverses the byte order of the integer.</source>
          <target state="translated">정수의 바이트 순서를 반대로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="64b09f1db72cf0ec7ade643d2317db8963d83387" translate="yes" xml:space="preserve">
          <source>Reverses the bytes in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">정수형 &lt;code&gt;T&lt;/code&gt; 의 바이트를 반전시킵니다 .</target>
        </trans-unit>
        <trans-unit id="4ba3654366e538ecbe6a202e08718e335edbe9a1" translate="yes" xml:space="preserve">
          <source>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</source>
          <target state="translated">정수에서 비트 순서를 반대로 바꿉니다. 최하위 비트는 최상위 비트가되고 두 ​​번째 최하위 비트는 두 번째 최상위 비트가됩니다.</target>
        </trans-unit>
        <trans-unit id="eb94381be35515f566147dc309094fe9e5f3b42c" translate="yes" xml:space="preserve">
          <source>Reverses the order of elements in the slice, in place.</source>
          <target state="translated">슬라이스에서 요소의 순서를 반대로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="043399b4f9587dfd6e880bb527cf9885c51d0675" translate="yes" xml:space="preserve">
          <source>Rewrite the expression without functional record update syntax:</source>
          <target state="translated">기능적 레코드 업데이트 구문없이 표현식을 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="5c8afd877c560b80edb72541a6eaea0dba68d13a" translate="yes" xml:space="preserve">
          <source>Right Shift**</source>
          <target state="translated">오른쪽 교대 **</target>
        </trans-unit>
        <trans-unit id="9ef3e151188d7e4dfc0cdde88b74ac2276235a35" translate="yes" xml:space="preserve">
          <source>Right now, our web server will return the HTML in the file no matter what the client requested. Let&amp;rsquo;s add functionality to check that the browser is requesting &lt;em&gt;/&lt;/em&gt; before returning the HTML file and return an error if the browser requests anything else. For this we need to modify &lt;code&gt;handle_connection&lt;/code&gt;, as shown in Listing 20-6. This new code checks the content of the request received against what we know a request for &lt;em&gt;/&lt;/em&gt; looks like and adds &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks to treat requests differently.</source>
          <target state="translated">현재 웹 서버는 클라이언트가 요청한 내용에 관계없이 파일에 HTML을 반환합니다. 하자의 추가 기능은 브라우저가 요청하는지 확인 &lt;em&gt;/&lt;/em&gt; HTML 파일을 반환하기 전에 브라우저가 무엇을 요청하면 오류를 반환합니다. 이를 위해 Listing 20-6에 표시된 것처럼 &lt;code&gt;handle_connection&lt;/code&gt; 을 수정해야합니다 . 요청의 내용이 우리에 대한 요청 알고에 대해받은이 새로운 코드 검사 &lt;em&gt;/&lt;/em&gt; 같은 외모를하고 추가 &lt;code&gt;if&lt;/code&gt; 와 &lt;code&gt;else&lt;/code&gt; 블록 다르게 치료 요구에.</target>
        </trans-unit>
        <trans-unit id="18ab96a1810297bde0b9141142db3dfb5bb9d2bc" translate="yes" xml:space="preserve">
          <source>Right now, the program generated by &lt;code&gt;cargo new&lt;/code&gt; cannot process arguments we give it. Some existing libraries on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; can help with writing a program that accepts command line arguments, but because you&amp;rsquo;re just learning this concept, let&amp;rsquo;s implement this capability ourselves.</source>
          <target state="translated">현재 &lt;code&gt;cargo new&lt;/code&gt; 생성 된 프로그램은 우리가 제공 한 인수를 처리 할 수 ​​없습니다. &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io의&lt;/a&gt; 일부 기존 라이브러리 는 명령 줄 인수를 허용하는 프로그램을 작성하는 데 도움이 될 수 있지만이 개념을 배우기 때문에이 기능을 직접 구현해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="7b9dbd2a05c55e3ec29e51c514e9c4050f82aedb" translate="yes" xml:space="preserve">
          <source>Right now, the server will process each request in turn, meaning it won&amp;rsquo;t process a second connection until the first is finished processing. If the server received more and more requests, this serial execution would be less and less optimal. If the server receives a request that takes a long time to process, subsequent requests will have to wait until the long request is finished, even if the new requests can be processed quickly. We&amp;rsquo;ll need to fix this, but first, we&amp;rsquo;ll look at the problem in action.</source>
          <target state="translated">현재 서버는 각 요청을 차례로 처리하므로 첫 번째 처리가 완료 될 때까지 두 번째 연결을 처리하지 않습니다. 서버가 점점 더 많은 요청을 수신 한 경우이 직렬 실행은 점점 덜 최적화됩니다. 서버가 처리하는 데 시간이 오래 걸리는 요청을 받으면 후속 요청은 새 요청을 빠르게 처리 할 수있는 경우에도 긴 요청이 완료 될 때까지 기다려야합니다. 이 문제를 해결해야하지만 먼저 문제의 실제 작동을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c480af39db009c0318ae7e74d0323b0c502a0fd5" translate="yes" xml:space="preserve">
          <source>Right-exclusive range literal</source>
          <target state="translated">오른쪽 배타적 범위 리터럴</target>
        </trans-unit>
        <trans-unit id="59325f597d1c37aeeec754c26100e96a2e30be66" translate="yes" xml:space="preserve">
          <source>Right-inclusive range literal</source>
          <target state="translated">오른쪽 포함 범위 리터럴</target>
        </trans-unit>
        <trans-unit id="9b48ae49c811eaa74c51d9a2c4444bab2f4e6c28" translate="yes" xml:space="preserve">
          <source>Right-shift</source>
          <target state="translated">Right-shift</target>
        </trans-unit>
        <trans-unit id="f367c94b8369cb645d39410fa6aec58a35c66b87" translate="yes" xml:space="preserve">
          <source>Right-shift and assignment</source>
          <target state="translated">오른쪽 교대 및 과제</target>
        </trans-unit>
        <trans-unit id="87ab4fb697063b10dcdc96979db348b5d934b10e" translate="yes" xml:space="preserve">
          <source>Rotate a subslice:</source>
          <target state="translated">하위 슬라이스를 회전합니다 :</target>
        </trans-unit>
        <trans-unit id="e2e2300fcc3d5d8ec414a7eaacdbbcb51bb451c4" translate="yes" xml:space="preserve">
          <source>Rotates &lt;code&gt;len() - k&lt;/code&gt; places to the left.</source>
          <target state="translated">왼쪽으로 &lt;code&gt;len() - k&lt;/code&gt; 자리를 회전 합니다.</target>
        </trans-unit>
        <trans-unit id="ce3f746edcfb3b9e0b1137f1b27b633f9dbc1e06" translate="yes" xml:space="preserve">
          <source>Rotates &lt;code&gt;len() - mid&lt;/code&gt; places to the right.</source>
          <target state="translated">&lt;code&gt;len() - mid&lt;/code&gt; 오른쪽 중간 위치를 회전 합니다.</target>
        </trans-unit>
        <trans-unit id="96b03b8904b0a15cce1085562454a38f8c416656" translate="yes" xml:space="preserve">
          <source>Rotates item &lt;code&gt;mid&lt;/code&gt; into the first position.</source>
          <target state="translated">회전 항목 &lt;code&gt;mid&lt;/code&gt; 첫 번째 위치에.</target>
        </trans-unit>
        <trans-unit id="435514cee1befe7c5f78629addaceeb41d851af0" translate="yes" xml:space="preserve">
          <source>Rotates the double-ended queue &lt;code&gt;k&lt;/code&gt; places to the right.</source>
          <target state="translated">회전합니다 덱의 &lt;code&gt;k&lt;/code&gt; 오른쪽에 위치.</target>
        </trans-unit>
        <trans-unit id="f6e0de855ccd5f7c0b8c806d3b9f3e85016db057" translate="yes" xml:space="preserve">
          <source>Rotates the double-ended queue &lt;code&gt;mid&lt;/code&gt; places to the left.</source>
          <target state="translated">이중 엔드 큐를 &lt;code&gt;mid&lt;/code&gt; 위치 왼쪽으로 회전합니다 .</target>
        </trans-unit>
        <trans-unit id="a3eb1eddf6dbbb2384431fa9dbaf6f2680d9416d" translate="yes" xml:space="preserve">
          <source>Rotates the first item into position &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">첫 번째 항목을 위치 &lt;code&gt;k&lt;/code&gt; 로 회전시킵니다 .</target>
        </trans-unit>
        <trans-unit id="1ed009359b30c6f889c504f86a394c588c0f7b7a" translate="yes" xml:space="preserve">
          <source>Rotates the slice in-place such that the first &lt;code&gt;mid&lt;/code&gt; elements of the slice move to the end while the last &lt;code&gt;self.len() - mid&lt;/code&gt; elements move to the front. After calling &lt;code&gt;rotate_left&lt;/code&gt;, the element previously at index &lt;code&gt;mid&lt;/code&gt; will become the first element in the slice.</source>
          <target state="translated">슬라이스의 첫 번째 &lt;code&gt;mid&lt;/code&gt; 요소가 끝으로 이동하고 마지막 &lt;code&gt;self.len() - mid&lt;/code&gt; 요소가 앞쪽으로 이동하도록 슬라이스를 제자리로 회전합니다 . &lt;code&gt;rotate_left&lt;/code&gt; 를 호출 하면 이전에 인덱스 &lt;code&gt;mid&lt;/code&gt; 에 있던 요소가 슬라이스의 첫 번째 요소가됩니다.</target>
        </trans-unit>
        <trans-unit id="04b7ac171ea5b32f47f9900517a2fadf3a9c0d83" translate="yes" xml:space="preserve">
          <source>Rotates the slice in-place such that the first &lt;code&gt;self.len() - k&lt;/code&gt; elements of the slice move to the end while the last &lt;code&gt;k&lt;/code&gt; elements move to the front. After calling &lt;code&gt;rotate_right&lt;/code&gt;, the element previously at index &lt;code&gt;self.len() - k&lt;/code&gt; will become the first element in the slice.</source>
          <target state="translated">슬라이스의 첫 번째 &lt;code&gt;self.len() - k&lt;/code&gt; 요소가 끝으로 이동하고 마지막 &lt;code&gt;k&lt;/code&gt; 요소가 앞쪽으로 이동하도록 슬라이스를 제자리로 회전합니다 . &lt;code&gt;rotate_right&lt;/code&gt; 를 호출 하면 이전에 인덱스 &lt;code&gt;self.len() - k&lt;/code&gt; 요소가 슬라이스의 첫 번째 요소가됩니다.</target>
        </trans-unit>
        <trans-unit id="5c601ca5828939fb30e1667600554d785890002f" translate="yes" xml:space="preserve">
          <source>Rotating a subslice:</source>
          <target state="translated">하위 슬라이스 회전 :</target>
        </trans-unit>
        <trans-unit id="4e37bfdd52117be2c062494638d3e5c44c84094a" translate="yes" xml:space="preserve">
          <source>Round up the current size to the nearest multiple of the next field's &lt;a href=&quot;fn.align_of&quot;&gt;alignment&lt;/a&gt;.</source>
          <target state="translated">현재 크기를 다음 필드 &lt;a href=&quot;fn.align_of&quot;&gt;정렬&lt;/a&gt; 의 가장 가까운 배수로 올림합니다 .</target>
        </trans-unit>
        <trans-unit id="50e5426091a53777b8711a517e2b93745535294e" translate="yes" xml:space="preserve">
          <source>Rounds toward zero and converts to any primitive integer type, assuming that the value is finite and fits in that type.</source>
          <target state="translated">값이 유한하고 해당 유형에 적합하다고 가정하여 0으로 반올림하고 모든 기본 정수 유형으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="58cf18a9ecd627eed5f1c04bd8628968731bb80a" translate="yes" xml:space="preserve">
          <source>Ruby: &lt;strike&gt;block syntax&lt;/strike&gt;</source>
          <target state="translated">루비 : &lt;strike&gt;블록 구문&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="ecf5f644a238902f7f393f69b82ea575cf5c3b7f" translate="yes" xml:space="preserve">
          <source>Ruby: closure syntax, &lt;strike&gt;block syntax&lt;/strike&gt;</source>
          <target state="translated">루비 : 클로저 구문, &lt;strike&gt; 블록 구문 &lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="0b36b4e006f637aa6590232050c05151c7ad67ec" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;cargo publish&lt;/code&gt; command again. It should succeed now:</source>
          <target state="translated">실행 &lt;code&gt;cargo publish&lt;/code&gt; 다시 명령을. 이제 성공해야합니다.</target>
        </trans-unit>
        <trans-unit id="923b0697706f694d4ca0d13f16f9a1afd423c9a4" translate="yes" xml:space="preserve">
          <source>Run the code with this change. Drat! We still get an error:</source>
          <target state="translated">이 변경으로 코드를 실행하십시오. 드랏! 여전히 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3f16915758c73edf89a7ea497581557bcdd0d1f8" translate="yes" xml:space="preserve">
          <source>Run the code you want to test.</source>
          <target state="translated">테스트하려는 코드를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e196a338a67e0d1bafa6837b0b8c2270766eed56" translate="yes" xml:space="preserve">
          <source>Run the program again, and look at the output:</source>
          <target state="translated">프로그램을 다시 실행하고 출력을보십시오.</target>
        </trans-unit>
        <trans-unit id="fab2784a99af076ad38bcd6561c56938260806b6" translate="yes" xml:space="preserve">
          <source>Run the tests again using &lt;code&gt;cargo test&lt;/code&gt;. The output should look like Listing 11-4, which shows that our &lt;code&gt;exploration&lt;/code&gt; test passed and &lt;code&gt;another&lt;/code&gt; failed.</source>
          <target state="translated">&lt;code&gt;cargo test&lt;/code&gt; 사용하여 테스트를 다시 실행하십시오 . 결과는 Listing 11-4와 같아야한다. 이것은 우리의 &lt;code&gt;exploration&lt;/code&gt; 테스트가 통과되었고 &lt;code&gt;another&lt;/code&gt; 실패는 실패했음을 보여준다.</target>
        </trans-unit>
        <trans-unit id="d0d45a5d41408cca9fc6eeaa7d959b93e0fc34a3" translate="yes" xml:space="preserve">
          <source>Run the tests again:</source>
          <target state="translated">테스트를 다시 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="513c6246dbce19675f37c27f2bbb4ac8a4d4b4e2" translate="yes" xml:space="preserve">
          <source>Run this code now and request &lt;em&gt;127.0.0.1:7878&lt;/em&gt;; you should get the HTML in &lt;em&gt;hello.html&lt;/em&gt;. If you make any other request, such as &lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt;, you&amp;rsquo;ll get a connection error like those you saw when running the code in Listing 20-1 and Listing 20-2.</source>
          <target state="translated">이 코드를 지금 실행하여 &lt;em&gt;127.0.0.1:7878을&lt;/em&gt; 요청하십시오 . &lt;em&gt;hello.html&lt;/em&gt; 에서 HTML을 &lt;em&gt;가져와야&lt;/em&gt; 합니다. &lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt; 와 같은 다른 요청을 하면 Listing 20-1 및 Listing 20-2에서 코드를 실행할 때 본 것과 같은 연결 오류가 발생한다.</target>
        </trans-unit>
        <trans-unit id="e35c6b16535d8da5f5670a5eab95ccaf77d4012a" translate="yes" xml:space="preserve">
          <source>Run this code with &lt;code&gt;cargo run&lt;/code&gt; and load &lt;em&gt;127.0.0.1:7878&lt;/em&gt; in your browser; you should see your HTML rendered!</source>
          <target state="translated">&lt;code&gt;cargo run&lt;/code&gt; 과로드 로이 코드를 실행&lt;em&gt;&lt;/em&gt; 브라우저에 &lt;em&gt;127.0.0.1:7878&lt;/em&gt; 을 하십시오. HTML이 렌더링되는 것을 볼 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="23437fed19097bdfdfbe0b8267f38604c310de83" translate="yes" xml:space="preserve">
          <source>Run this test with the &lt;code&gt;Cacher&lt;/code&gt; implementation in Listing 13-9 and Listing 13-10, and the test will fail on the &lt;code&gt;assert_eq!&lt;/code&gt; with this message:</source>
          <target state="translated">Listing 13-9 및 Listing 13-10 의 &lt;code&gt;Cacher&lt;/code&gt; 구현 으로이 테스트를 실행 하면 &lt;code&gt;assert_eq!&lt;/code&gt; 에서 테스트가 실패한다 !이 메시지와 함께 :</target>
        </trans-unit>
        <trans-unit id="d3d8bf74c1c629197f4536b35815a9f7a259419d" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;cargo clippy&lt;/code&gt; on this project results in this error:</source>
          <target state="translated">실행 &lt;code&gt;cargo clippy&lt;/code&gt; 이 프로젝트에서 를 하면 다음 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f395b53628f20c5c4b3bbd548137966e23fc9dab" translate="yes" xml:space="preserve">
          <source>Running Code on Cleanup with the &lt;code id=&quot;running-code-on-cleanup-with-the-drop-trait&quot;&gt;Drop&lt;/code&gt; Trait</source>
          <target state="translated">&lt;code id=&quot;running-code-on-cleanup-with-the-drop-trait&quot;&gt;Drop&lt;/code&gt; 로 정리할 때 코드 실행 Trait</target>
        </trans-unit>
        <trans-unit id="564030da0f34d36e19aa75d7720530ab88c94b03" translate="yes" xml:space="preserve">
          <source>Running Single Tests</source>
          <target state="translated">단일 테스트 실행</target>
        </trans-unit>
        <trans-unit id="e69e378bddb35dc41b1601835b2e69f3cbc1a82e" translate="yes" xml:space="preserve">
          <source>Running Tests in Parallel or Consecutively</source>
          <target state="translated">병렬 또는 연속 테스트 실행</target>
        </trans-unit>
        <trans-unit id="1e1d8cbafc2cddc28df09bc7a99cf83551dd23e4" translate="yes" xml:space="preserve">
          <source>Running a Subset of Tests by Name</source>
          <target state="translated">이름별로 테스트 하위 세트 실행</target>
        </trans-unit>
        <trans-unit id="103fa497687d08956605ccfefaf1c40f881c8239" translate="yes" xml:space="preserve">
          <source>Running the code in Listing 8-25 will print &lt;code&gt;{&quot;Yellow&quot;: 50, &quot;Blue&quot;: 10}&lt;/code&gt;. The first call to &lt;code&gt;entry&lt;/code&gt; will insert the key for the Yellow team with the value 50 because the Yellow team doesn&amp;rsquo;t have a value already. The second call to &lt;code&gt;entry&lt;/code&gt; will not change the hash map because the Blue team already has the value 10.</source>
          <target state="translated">목록 8-25에서 코드를 실행하면 &lt;code&gt;{&quot;Yellow&quot;: 50, &quot;Blue&quot;: 10}&lt;/code&gt; 이 인쇄됩니다 . 노란색 팀에는 아직 값이 없으므로 첫 번째 &lt;code&gt;entry&lt;/code&gt; 호출 은 노란색 팀의 키를 값 50으로 삽입합니다. Blue 팀의 값은 이미 10이므로 두 번째 &lt;code&gt;entry&lt;/code&gt; 호출 은 해시 맵을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1c9add0452877e9f24dc2bf7d578c6ed2f3e1d8b" translate="yes" xml:space="preserve">
          <source>Running the tests now produces the following:</source>
          <target state="translated">테스트를 실행하면 다음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f25b19c8b9c8cd64ad4a2e8f5f7c3c28f70fa2a3" translate="yes" xml:space="preserve">
          <source>Running this code prints the following:</source>
          <target state="translated">이 코드를 실행하면 다음이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="1e3c357826826fa11f1cba26866e53be103107ea" translate="yes" xml:space="preserve">
          <source>Running this code using &lt;code&gt;cargo run&lt;/code&gt; produces the following result:</source>
          <target state="translated">&lt;code&gt;cargo run&lt;/code&gt; 사용하여이 코드를 실행 하면 다음 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="c569a779f618ce9a2967d5affac56fe27ca64ca3" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;*waving arms furiously*&lt;/code&gt;, showing that Rust called the &lt;code&gt;fly&lt;/code&gt; method implemented on &lt;code&gt;Human&lt;/code&gt; directly.</source>
          <target state="translated">이 코드를 실행하면 &lt;code&gt;*waving arms furiously*&lt;/code&gt; 가 인쇄 되어 Rust 가 &lt;code&gt;Human&lt;/code&gt; 에 직접 구현 된 &lt;code&gt;fly&lt;/code&gt; 메소드를 호출했습니다 .</target>
        </trans-unit>
        <trans-unit id="050611088b4215f09f3ddc0798cae6177d1f772f" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;The value of x is: 6&lt;/code&gt;. But if we place a semicolon at the end of the line containing &lt;code&gt;x + 1&lt;/code&gt;, changing it from an expression to a statement, we&amp;rsquo;ll get an error.</source>
          <target state="translated">이 코드를 실행하면 &lt;code&gt;The value of x is: 6&lt;/code&gt; 이 인쇄됩니다 : 6 . 그러나 &lt;code&gt;x + 1&lt;/code&gt; 포함하는 행의 끝에 세미콜론을 배치하고 표현식에서 명령문으로 변경하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0cf90b9dd90262dc86c7e18ab1cd2e79c2411dea" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;number was something other than zero&lt;/code&gt;.</source>
          <target state="translated">이 코드를 실행하면 &lt;code&gt;number was something other than zero&lt;/code&gt; 인쇄 됩니다 .</target>
        </trans-unit>
        <trans-unit id="d3da00eed1960155f07dbe554383fc0ea4f0b115" translate="yes" xml:space="preserve">
          <source>Running this code will print the following:</source>
          <target state="translated">이 코드를 실행하면 다음이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="e4fcdd04ec6ff3e0b0277e41acfba1bf839f5a18" translate="yes" xml:space="preserve">
          <source>Running this command reformats all the Rust code in the current crate. This should only change the code style, not the code semantics. For more information on &lt;code&gt;rustfmt&lt;/code&gt;, see &lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">이 명령을 실행하면 현재 상자의 모든 녹 코드가 재 포맷됩니다. 이것은 코드 시맨틱이 아닌 코드 스타일 만 변경해야합니다. &lt;code&gt;rustfmt&lt;/code&gt; 에 대한 자세한 내용 은 &lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;해당 설명서를&lt;/a&gt; 참조하십시오. .</target>
        </trans-unit>
        <trans-unit id="7d1170a5c907c3d621f9e3318eb8f67085d5957f" translate="yes" xml:space="preserve">
          <source>Running this test produces the following:</source>
          <target state="translated">이 테스트를 실행하면 다음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="c4740e4ca28c9c8d6a8447aef5c33425e6de4802" translate="yes" xml:space="preserve">
          <source>Runtime</source>
          <target state="translated">Runtime</target>
        </trans-unit>
        <trans-unit id="5359eea6ab0e87db9479836bb9761e7ad6a157fe" translate="yes" xml:space="preserve">
          <source>Runtime characteristics</source>
          <target state="translated">런타임 특성</target>
        </trans-unit>
        <trans-unit id="581d4fec52b7eb5bd873dc892c1ee2b7004ec350" translate="yes" xml:space="preserve">
          <source>Runtime checks are present to ensure there is only one nul byte in the &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;, its last element.</source>
          <target state="translated">&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt; 에 마지막 요소 인 하나의 nul 바이트 만 있는지 확인하는 런타임 검사가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2ae20d9ae7fcacb605c03c198e0a1c51d446f50" translate="yes" xml:space="preserve">
          <source>Rust</source>
          <target state="translated">Rust</target>
        </trans-unit>
        <trans-unit id="1fc5c6604c5a3ad4a813390059fa989765293b6c" translate="yes" xml:space="preserve">
          <source>Rust 2015 does not permit the use of &lt;code&gt;async fn&lt;/code&gt;.</source>
          <target state="translated">Rust 2015에서는 &lt;code&gt;async fn&lt;/code&gt; 을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a577c02cc01ad8b1a35ad9c0d2cad0f98a6cf0b5" translate="yes" xml:space="preserve">
          <source>Rust &lt;em&gt;does&lt;/em&gt; include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the annotation &lt;code&gt;#[derive(Debug)]&lt;/code&gt; just before the struct definition, as shown in Listing 5-12.</source>
          <target state="translated">Rust 에는 디버깅 정보를 출력하는 기능 &lt;em&gt;이&lt;/em&gt; 포함되어 있지만 구조체에서 해당 기능을 사용할 수 있도록 명시 적으로 선택해야합니다. 이를 위해 주석 &lt;code&gt;#[derive(Debug)]&lt;/code&gt; 추가합니다 . Listing 5-12와 같이 구조체 정의 바로 앞에 .</target>
        </trans-unit>
        <trans-unit id="2c33a40099b2ccd85bf32fbbe3e68ef69581fe7f" translate="yes" xml:space="preserve">
          <source>Rust &lt;em&gt;infers&lt;/em&gt; how to capture &lt;code&gt;v&lt;/code&gt;, and because &lt;code&gt;println!&lt;/code&gt; only needs a reference to &lt;code&gt;v&lt;/code&gt;, the closure tries to borrow &lt;code&gt;v&lt;/code&gt;. However, there&amp;rsquo;s a problem: Rust can&amp;rsquo;t tell how long the spawned thread will run, so it doesn&amp;rsquo;t know if the reference to &lt;code&gt;v&lt;/code&gt; will always be valid.</source>
          <target state="translated">Rust &lt;em&gt;는 &lt;/em&gt; &lt;code&gt;v&lt;/code&gt; 를 캡처하는 방법을 &lt;em&gt;추론&lt;/em&gt; 하고 &lt;code&gt;println!&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; 에 대한 참조 만 있으면 클로저는 &lt;code&gt;v&lt;/code&gt; 를 빌리려고 시도합니다 . 그러나 문제가 있습니다 : Rust는 생성 된 스레드가 얼마나 오래 실행 될지 알 수 없으므로 &lt;code&gt;v&lt;/code&gt; 에 대한 참조가 있는지 알 수 없습니다. 가 항상 유효한지 .</target>
        </trans-unit>
        <trans-unit id="a0209ede66a299d6f835fa4fdb4f3764cda36010" translate="yes" xml:space="preserve">
          <source>Rust Compiler Error Index</source>
          <target state="translated">녹 컴파일러 오류 색인</target>
        </trans-unit>
        <trans-unit id="e86e2f7e2be516ce0300d8b3591468341035e99b" translate="yes" xml:space="preserve">
          <source>Rust Documentation</source>
          <target state="translated">녹 문서</target>
        </trans-unit>
        <trans-unit id="bdda1ab5e01f657b125db05f2df30c737c186ccb" translate="yes" xml:space="preserve">
          <source>Rust accomplishes this by performing monomorphization of the code that is using generics at compile time. &lt;em&gt;Monomorphization&lt;/em&gt; is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.</source>
          <target state="translated">Rust는 컴파일 타임에 제네릭을 사용하는 코드의 단일 변형을 수행하여이를 수행합니다. &lt;em&gt;Monomorphization&lt;/em&gt; 은 컴파일 할 때 사용되는 구체적 유형을 채워 일반 코드를 특정 코드로 변환하는 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="effe1b768c4ce9dd07e450e0add6036006e9bc1f" translate="yes" xml:space="preserve">
          <source>Rust actually makes it somewhat difficult to produce this loop in the first place. In order to end up with two values that point at each other, one of them needs to be mutable. This is difficult because &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; enforces memory safety by only giving out shared references to the value it wraps, and these don't allow direct mutation. We need to wrap the part of the value we wish to mutate in a &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, which provides &lt;em&gt;interior mutability&lt;/em&gt;: a method to achieve mutability through a shared reference. &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; enforces Rust's borrowing rules at runtime.</source>
          <target state="translated">녹은 실제로이 루프를 처음부터 생성하는 것을 다소 어렵게 만듭니다. 서로를 가리키는 두 개의 값으로 끝내려면 그 중 하나를 변경할 수 있어야합니다. &lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt; 는 랩핑 된 값에 대한 공유 참조 만 제공하여 메모리 안전성을 강화하고 직접 돌연변이를 허용하지 않기 때문에 어렵습니다 . &lt;em&gt;내부&lt;/em&gt; 변이 를 제공 하는 &lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt; 에서 변이하려는 값의 일부를 랩핑해야합니다 . 공유 참조를 통해 변이 를 달성하는 방법입니다. &lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt; 은 런타임에 Rust의 대출 규칙을 시행합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae0d2b578d61b694ca8792ea668e7a392f999440" translate="yes" xml:space="preserve">
          <source>Rust allows publicly re-exporting items through a &lt;code&gt;pub use&lt;/code&gt; directive. Because this is a public directive, this allows the item to be used in the current module through the rules above. It essentially allows public access into the re-exported item. For example, this program is valid:</source>
          <target state="translated">Rust는 &lt;code&gt;pub use&lt;/code&gt; 통해 항목을 공개적으로 재수출 할 수 있습니다 지시문을 . 이것은 공개 지시문이므로 위의 규칙을 통해 현재 모듈에서 항목을 사용할 수 있습니다. 본질적으로 재수출 된 품목에 대한 공개 액세스를 허용합니다. 예를 들어,이 프로그램은 유효합니다 :</target>
        </trans-unit>
        <trans-unit id="4985d4ad4c4fe1e9dd624f9f2f34b2f73c6ed42b" translate="yes" xml:space="preserve">
          <source>Rust also brings contemporary developer tools to the systems programming world:</source>
          <target state="translated">Rust는 또한 시스템 개발자에게 현대 개발자 도구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5dd2b7d9e5548848e20c79e786ff2b0d3869e782" translate="yes" xml:space="preserve">
          <source>Rust also has a pattern we can use when we don&amp;rsquo;t want to list all possible values. For example, a &lt;code&gt;u8&lt;/code&gt; can have valid values of 0 through 255. If we only care about the values 1, 3, 5, and 7, we don&amp;rsquo;t want to have to list out 0, 2, 4, 6, 8, 9 all the way up to 255. Fortunately, we don&amp;rsquo;t have to: we can use the special pattern &lt;code&gt;_&lt;/code&gt; instead:</source>
          <target state="translated">Rust는 또한 가능한 모든 값을 나열하고 싶지 않을 때 사용할 수있는 패턴을 가지고 있습니다. 예를 들어, &lt;code&gt;u8&lt;/code&gt; 은 0에서 255까지의 유효한 값을 가질 수 있습니다. 1, 3, 5 및 7 값만 신경 쓰면 0, 2, 4, 6, 8, 9, 255까지 가능합니다. 다행히도, 우리는 필요하지 않습니다. 대신 특수 패턴 &lt;code&gt;_&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e19038a4b8947e67e71fb4a5db45a42bb503b2ee" translate="yes" xml:space="preserve">
          <source>Rust also has another kind of comment, documentation comments, which we&amp;rsquo;ll discuss in the &amp;ldquo;Publishing a Crate to Crates.io&amp;rdquo; section of Chapter 14.</source>
          <target state="translated">Rust는 14 장의 &quot;Crates.io에 상자 게시&quot;섹션에서 논의 할 또 다른 종류의 주석, 문서 주석을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbdbd64aac3d17c7509c8b7d6b785d5bd17d6f9e" translate="yes" xml:space="preserve">
          <source>Rust also has two primitive types for &lt;em&gt;floating-point numbers&lt;/em&gt;, which are numbers with decimal points. Rust&amp;rsquo;s floating-point types are &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt;, which are 32 bits and 64 bits in size, respectively. The default type is &lt;code&gt;f64&lt;/code&gt; because on modern CPUs it&amp;rsquo;s roughly the same speed as &lt;code&gt;f32&lt;/code&gt; but is capable of more precision.</source>
          <target state="translated">Rust에는 &lt;em&gt;부동 소수점 숫자에&lt;/em&gt; 대한 두 가지 기본 유형이 있는데, 소수점이있는 숫자입니다. Rust의 부동 소수점 유형은 &lt;code&gt;f32&lt;/code&gt; 및 &lt;code&gt;f64&lt;/code&gt; 이며 각각 32 비트 및 64 비트입니다. 최신 CPU에서는 &lt;code&gt;f32&lt;/code&gt; 와 거의 같은 속도 이지만 더 정밀 할 수 있기 때문에 기본 유형은 &lt;code&gt;f64&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="29c1f1ea8c701993d0c6c3c7c3f0fda1a6673205" translate="yes" xml:space="preserve">
          <source>Rust and Cargo have features that help make your published package easier for people to use and to find in the first place. We&amp;rsquo;ll talk about some of these features next and then explain how to publish a package.</source>
          <target state="translated">Rust and Cargo에는 게시 된 패키지를 사람들이 더 쉽게 사용하고 찾을 수 있도록하는 기능이 있습니다. 다음으로 이러한 기능 중 일부에 대해 이야기하고 패키지를 게시하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7f3133698a0220ad7c68f52e85cdd6fbb05996b0" translate="yes" xml:space="preserve">
          <source>Rust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.</source>
          <target state="translated">Rust는 쓰레드 사용의 부정적인 영향을 완화 시키려고하지만 멀티 스레드 컨텍스트에서의 프로그래밍은 여전히 ​​신중하게 생각해야하며 단일 쓰레드에서 실행되는 프로그램과는 다른 코드 구조를 요구합니다.</target>
        </trans-unit>
        <trans-unit id="c689ed78369011848abbd3ac8af6ba4c0ea496a6" translate="yes" xml:space="preserve">
          <source>Rust automatically called &lt;code&gt;drop&lt;/code&gt; for us when our instances went out of scope, calling the code we specified. Variables are dropped in the reverse order of their creation, so &lt;code&gt;d&lt;/code&gt; was dropped before &lt;code&gt;c&lt;/code&gt;. This example gives you a visual guide to how the &lt;code&gt;drop&lt;/code&gt; method works; usually you would specify the cleanup code that your type needs to run rather than a print message.</source>
          <target state="translated">Rust 는 인스턴스가 범위를 벗어나면 지정한 코드를 호출하여 자동으로 &lt;code&gt;drop&lt;/code&gt; 을 호출했습니다. 변수는 생성 순서와 반대로 삭제되므로 &lt;code&gt;d&lt;/code&gt; 가 &lt;code&gt;c&lt;/code&gt; 보다 먼저 삭제되었습니다 . 이 예제는 &lt;code&gt;drop&lt;/code&gt; 방법의 작동 방식 을 시각적으로 안내 합니다. 일반적으로 인쇄 메시지 대신 유형을 실행해야하는 정리 코드를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="cb4fa52344abf16e13622ef8bb3c3893fe286a01" translate="yes" xml:space="preserve">
          <source>Rust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to &amp;ldquo;dip down&amp;rdquo; into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.</source>
          <target state="translated">녹은 오래된 함정을 제거하고 길을 따라갈 수 있도록 친절하고 세련된 도구 세트를 제공하여 이러한 장벽을 무너 뜨립니다. 낮은 수준의 제어에&amp;ldquo;강하&amp;rdquo;해야하는 프로그래머는 일반적인 충돌 또는 보안 허점의 위험을 감수하지 않고 주근깨 툴체인의 장점을 배울 필요없이 Rust를 사용할 수 있습니다. 또한 언어는 속도와 메모리 사용 측면에서 효율적인 안정적인 코드로 자연스럽게 안내하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="cdaf4a6bf131d48ffa2af0a612ccc9c24734bcff" translate="yes" xml:space="preserve">
          <source>Rust can tell that &lt;code&gt;c&lt;/code&gt; is within the first pattern&amp;rsquo;s range and prints &lt;code&gt;early ASCII letter&lt;/code&gt;.</source>
          <target state="translated">Rust는 &lt;code&gt;c&lt;/code&gt; 가 첫 번째 패턴의 범위 내에 있고 &lt;code&gt;early ASCII letter&lt;/code&gt; 인쇄 한다는 것을 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0aa4b6eb356ff042802f189c6b9ce9b6d9bb7f5" translate="yes" xml:space="preserve">
          <source>Rust can&amp;rsquo;t figure out how much space to allocate for recursively defined types, so the compiler gives the error in Listing 15-4. But the error does include this helpful suggestion:</source>
          <target state="translated">Rust는 재귀 적으로 정의 된 타입에 할당 할 공간이 얼마나되는지 알 수 없으므로 컴파일러는 Listing 15-4에 오류를 준다. 그러나 오류에는 다음과 같은 유용한 제안이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9cb61601ebccc0f0be25f7b4aa2fa6eed3577955" translate="yes" xml:space="preserve">
          <source>Rust can&amp;rsquo;t possibly know which of the two arguments we need, so we need to tell it. Because &lt;code&gt;contents&lt;/code&gt; is the argument that contains all of our text and we want to return the parts of that text that match, we know &lt;code&gt;contents&lt;/code&gt; is the argument that should be connected to the return value using the lifetime syntax.</source>
          <target state="translated">Rust는 우리가 필요로하는 두 가지 주장 중 어느 것을 알지 못하므로이를 알려야합니다. &lt;code&gt;contents&lt;/code&gt; 은 모든 텍스트를 포함하는 인수 이므로 해당 텍스트의 일부를 일치 시키려면 &lt;code&gt;contents&lt;/code&gt; 을 알고 있습니다. 평생 구문을 사용하여 반환 값에 연결해야하는 인수입니다.</target>
        </trans-unit>
        <trans-unit id="51a6c6ddffe8c70b5e18c5cd678688a6e33bff5b" translate="yes" xml:space="preserve">
          <source>Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules code to outer ancestor modules by using the &lt;code&gt;pub&lt;/code&gt; keyword to make an item public.</source>
          <target state="translated">Rust는 내부 구현 세부 사항을 숨기는 것이 기본이되도록 모듈 시스템 기능을 이런 식으로 선택했습니다. 이렇게하면 외부 코드를 손상시키지 않고 내부 코드의 어떤 부분을 변경할 수 있는지 알 수 있습니다. 그러나 &lt;code&gt;pub&lt;/code&gt; 을 사용하여 하위 모듈 코드의 내부 부분을 외부 조상 모듈에 노출시킬 수 있습니다 키워드를 사용하여 항목을 공개하면 .</target>
        </trans-unit>
        <trans-unit id="b4ffd6d9ef1384aeb9bcafe5fc321bee1c46b8a9" translate="yes" xml:space="preserve">
          <source>Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules' code to outer ancestor modules by using the &lt;code&gt;pub&lt;/code&gt; keyword to make an item public.</source>
          <target state="translated">Rust는 내부 구현 세부 사항을 숨기는 것이 기본값이되도록 모듈 시스템 기능을이 방식으로 선택했습니다. 이렇게하면 외부 코드를 깨지 않고 변경할 수있는 내부 코드 부분을 알 수 있습니다. 그러나 &lt;code&gt;pub&lt;/code&gt; 키워드를 사용하여 항목을 공개 함으로써 자식 모듈 코드의 내부 부분을 외부 조상 모듈에 노출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aed85801e6aa03885ea34ff196d1f5d07d63ebd2" translate="yes" xml:space="preserve">
          <source>Rust code is incorrect if it exhibits any of the behaviors in the following list. This includes code within &lt;code&gt;unsafe&lt;/code&gt; blocks and &lt;code&gt;unsafe&lt;/code&gt; functions. &lt;code&gt;unsafe&lt;/code&gt; only means that avoiding undefined behavior is on the programmer; it does not change anything about the fact that Rust programs must never cause undefined behavior.</source>
          <target state="translated">Rust 코드는 다음 목록에있는 동작 중 하나를 나타내면 잘못된 것입니다. 여기에는 &lt;code&gt;unsafe&lt;/code&gt; 블록 및 &lt;code&gt;unsafe&lt;/code&gt; 함수 내의 코드가 포함됩니다 . &lt;code&gt;unsafe&lt;/code&gt; 않음은 정의되지 않은 동작을 피하는 것이 프로그래머에게 있음을 의미합니다. Rust 프로그램이 정의되지 않은 동작을 유발해서는 안된다는 사실에 대해서는 아무것도 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e084b33e4de65ea0dae7e0617381c6117a4a157d" translate="yes" xml:space="preserve">
          <source>Rust code uses &lt;em&gt;snake case&lt;/em&gt; as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. Here&amp;rsquo;s a program that contains an example function definition:</source>
          <target state="translated">녹 코드는 &lt;em&gt;뱀 케이스를 사용&lt;/em&gt; 를 함수 및 변수 이름의 일반적인 스타일로 합니다. 뱀의 경우 모든 문자는 소문자이며 밑줄은 별도의 단어입니다. 함수 정의 예제가 포함 된 프로그램은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e2a256ae150c413740aa7cd085658b2d9a62fbaa" translate="yes" xml:space="preserve">
          <source>Rust code, including within &lt;code&gt;unsafe&lt;/code&gt; blocks and &lt;code&gt;unsafe&lt;/code&gt; functions is incorrect if it exhibits any of the behaviors in the following list. It is the programmer's responsibility when writing &lt;code&gt;unsafe&lt;/code&gt; code that it is not possible to let &lt;code&gt;safe&lt;/code&gt; code exhibit these behaviors.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; 블록 및 &lt;code&gt;unsafe&lt;/code&gt; 기능을 포함하여 녹 코드 는 다음 목록에 동작이있는 경우 올바르지 않습니다. &lt;code&gt;unsafe&lt;/code&gt; 코드를 작성할 때 &lt;code&gt;safe&lt;/code&gt; 코드로 이러한 동작을 수행 할 수 없도록하는 것은 프로그래머의 책임 입니다.</target>
        </trans-unit>
        <trans-unit id="267e97a30b8e7e2b82eb0bd15c0545ae0f9ce0a2" translate="yes" xml:space="preserve">
          <source>Rust comes with a variety of things in its standard library. However, if you had to manually import every single thing that you used, it would be very verbose. But importing a lot of things that a program never uses isn't good either. A balance needs to be struck.</source>
          <target state="translated">Rust는 표준 라이브러리에 다양한 것들을 제공합니다. 그러나 사용한 모든 단일 항목을 수동으로 가져와야한다면 매우 장황합니다. 그러나 프로그램이 절대 사용하지 않는 많은 것을 가져 오는 것도 좋지 않습니다. 균형을 맞출 필요가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5b94cc5e4660404ce6dbefdb4f8787d02d4269a" translate="yes" xml:space="preserve">
          <source>Rust compilers, including &lt;code&gt;rustc&lt;/code&gt;, will perform optimizations. The reference does not specify what optimizations are allowed or disallowed. Instead, think of the compiled program as a black box. You can only probe by running it, feeding it input and observing its output. Everything that happens that way must conform to what the reference says.</source>
          <target state="translated">&lt;code&gt;rustc&lt;/code&gt; 를 포함한 Rust 컴파일러 는 최적화를 수행합니다. 참조는 허용되거나 허용되지 않는 최적화를 지정하지 않습니다. 대신 컴파일 된 프로그램을 블랙 박스로 생각하십시오. 실행하고 입력을 공급하고 출력을 관찰하는 방법으로 만 프로브 할 수 있습니다. 그런 식으로 일어나는 모든 일은 참조가 말하는 것과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="30050a292030028105b725a80cfd11137e292a84" translate="yes" xml:space="preserve">
          <source>Rust complains that it doesn&amp;rsquo;t make sense to use &lt;code&gt;if let&lt;/code&gt; with an irrefutable pattern:</source>
          <target state="translated">녹는 사용에 이해가되지 않는다고 불평 &lt;code&gt;if let&lt;/code&gt; 반박 할 수없는 패턴 :</target>
        </trans-unit>
        <trans-unit id="151a36819a9041707f7a83143365261d69ad15c3" translate="yes" xml:space="preserve">
          <source>Rust de-sugars this into:</source>
          <target state="translated">녹 제거 설탕으로 :</target>
        </trans-unit>
        <trans-unit id="7f9478ac9f9f1e9c53d0bbd8f2f29a740e10b88f" translate="yes" xml:space="preserve">
          <source>Rust development operates on a &lt;em&gt;train schedule&lt;/em&gt;. That is, all development is done on the &lt;code&gt;master&lt;/code&gt; branch of the Rust repository. Releases follow a software release train model, which has been used by Cisco IOS and other software projects. There are three &lt;em&gt;release channels&lt;/em&gt; for Rust:</source>
          <target state="translated">녹 개발은 &lt;em&gt;열차 일정&lt;/em&gt; 에 따라 운영됩니다 . 즉, 모든 개발은 Rust 저장소 의 &lt;code&gt;master&lt;/code&gt; 브랜치에서 수행됩니다 . 릴리즈는 Cisco IOS 및 기타 소프트웨어 프로젝트에서 사용 된 소프트웨어 릴리즈 트레인 모델을 따릅니다. Rust 에는 3 가지 &lt;em&gt;릴리즈 채널&lt;/em&gt; 이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c1ceba7cafe03c43c23515eea22061c0156f8ee3" translate="yes" xml:space="preserve">
          <source>Rust divides keywords into three categories:</source>
          <target state="translated">Rust는 키워드를 세 가지 범주로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="520af2b0caca1d9f181466e2056d3f0b0b57619e" translate="yes" xml:space="preserve">
          <source>Rust does deref coercion when it finds types and trait implementations in three cases:</source>
          <target state="translated">Rust는 세 가지 경우에 유형과 특성 구현을 찾을 때 강제를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="44dd2f2386da2c0cdd5e7d3c775c2fc5131419be" translate="yes" xml:space="preserve">
          <source>Rust does not currently have a rigorously and formally defined memory model, so the precise semantics of what &quot;volatile&quot; means here is subject to change over time. That being said, the semantics will almost always end up pretty similar to &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11's definition of volatile&lt;/a&gt;.</source>
          <target state="translated">Rust는 현재 엄격하고 공식적으로 정의 된 메모리 모델을 가지고 있지 않으므로 여기서 &quot;휘발성&quot;의 의미에 대한 정확한 의미는 시간이 지남에 따라 변경 될 수 있습니다. 즉, 시맨틱은 거의 항상 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11의 volatile 정의&lt;/a&gt; 와 거의 비슷합니다 .</target>
        </trans-unit>
        <trans-unit id="fbbe7c11a19a771711fe824dd3e7ec32cef70acb" translate="yes" xml:space="preserve">
          <source>Rust does not currently support this.</source>
          <target state="translated">Rust는 현재 이것을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2f345e86ce4bdfb609568cfe8dcd5b348d517588" translate="yes" xml:space="preserve">
          <source>Rust does not permit a closure to directly reference its own type, either through an argument (as in the example above) or by capturing itself through its environment. This restriction helps keep closure inference tractable.</source>
          <target state="translated">Rust는 클로저가 인수 (위의 예에서와 같이)를 통해 또는 자신의 환경을 통해 자신의 유형을 직접 참조하는 것을 허용하지 않습니다. 이 제한은 클로저 추론을 다루기 쉽게 유지하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="e25c8c25102888075b13676dc7cdde6255be9b8e" translate="yes" xml:space="preserve">
          <source>Rust does not yet have a defined memory model. Various academics and industry are working on various proposals, but for now, this is an under-defined place in the language.</source>
          <target state="translated">Rust에는 아직 정의 된 메모리 모델이 없습니다. 다양한 학계와 산업계가 다양한 제안을 진행하고 있지만 현재로서는 언어의 정의가 부족한 곳입니다.</target>
        </trans-unit>
        <trans-unit id="0eb864e233b19fcb363897f43533f05fca7a7717" translate="yes" xml:space="preserve">
          <source>Rust does not yet have a defined memory model. Various academics and industry professionals are working on various proposals, but for now, this is an under-defined place in the language.</source>
          <target state="translated">Rust에는 아직 정의 된 메모리 모델이 없습니다. 다양한 학계와 업계 전문가들이 다양한 제안에 대해 작업하고 있지만 현재로서는이 언어에서 정의되지 않은 곳입니다.</target>
        </trans-unit>
        <trans-unit id="34f3af8d8ef49dee8de54e673fbeb4ddba63eab4" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t allow you to create your own operators or overload arbitrary operators. But you can overload the operations and corresponding traits listed in &lt;code&gt;std::ops&lt;/code&gt; by implementing the traits associated with the operator. For example, in Listing 19-14 we overload the &lt;code&gt;+&lt;/code&gt; operator to add two &lt;code&gt;Point&lt;/code&gt; instances together. We do this by implementing the &lt;code&gt;Add&lt;/code&gt; trait on a &lt;code&gt;Point&lt;/code&gt; struct:</source>
          <target state="translated">Rust는 자신 만의 연산자를 만들거나 임의의 연산자를 오버로드 할 수 없습니다. 그러나 연산자와 관련된 특성을 구현하여 &lt;code&gt;std::ops&lt;/code&gt; 에 나열된 작업 및 해당 특성을 오버로드 할 수 있습니다 . 예를 들어, 목록 19-14에서 &lt;code&gt;+&lt;/code&gt; 연산자를 오버로드하여 두 개의 &lt;code&gt;Point&lt;/code&gt; 인스턴스를 함께 추가 합니다. 우리는 &lt;code&gt;Point&lt;/code&gt; 에 &lt;code&gt;Add&lt;/code&gt; 특성을 구현하여이를 수행합니다 구조체 .</target>
        </trans-unit>
        <trans-unit id="c421a151bfbb2f6d54a7d626539462864b68cd48" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t have an equivalent to the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator; instead, Rust has a feature called &lt;em&gt;automatic referencing and dereferencing&lt;/em&gt;. Calling methods is one of the few places in Rust that has this behavior.</source>
          <target state="translated">Rust에는 &lt;code&gt;-&amp;gt;&lt;/code&gt; 연산자 와 같은 것이 없습니다 . 대신 Rust에는 &lt;em&gt;자동 참조 및 역 참조&lt;/em&gt; 라는 기능이 있습니다.&lt;em&gt;&lt;/em&gt; 있습니다. 메소드 호출은이 동작이있는 Rust의 몇 안되는 장소 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="5b42e515beb4780bad0d430e54e0d456e0ed5719" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t have objects in the same sense as other languages have objects, and Rust doesn&amp;rsquo;t have mock object functionality built into the standard library as some other languages do. However, you can definitely create a struct that will serve the same purposes as a mock object.</source>
          <target state="translated">Rust에는 다른 언어와 동일한 의미의 객체가 없으며 다른 언어와 마찬가지로 표준 라이브러리에 모의 객체 기능이 내장되어 있지 않습니다. 그러나 모의 객체와 동일한 목적을 제공하는 구조체를 확실히 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="742db479bb4771b176a5e708d26cf5692112a273" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t let us call &lt;code&gt;drop&lt;/code&gt; explicitly because Rust would still automatically call &lt;code&gt;drop&lt;/code&gt; on the value at the end of &lt;code&gt;main&lt;/code&gt;. This would be a &lt;em&gt;double free&lt;/em&gt; error because Rust would be trying to clean up the same value twice.</source>
          <target state="translated">Rust는 &lt;code&gt;main&lt;/code&gt; 의 끝에서 값에 대해 &lt;code&gt;drop&lt;/code&gt; 을 자동으로 호출하기 때문에 명시 적으로 &lt;code&gt;drop&lt;/code&gt; 을 호출 할 수 없습니다 . 이것은 &lt;em&gt;이중 무료입니다&lt;/em&gt;&lt;em&gt;&lt;/em&gt; 녹 두 번 같은 값을 정리하려고 할 것이기 때문에 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="a5ddfc059c10a99d099217277479972f1dff9d9d" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;swap_with_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rust는 특정 범위의 특정 데이터 조각에 대해 하나의 변경 가능한 참조 만있을 수 있도록합니다. 이 때문에 &lt;code&gt;swap_with_slice&lt;/code&gt; 를 사용하려고합니다. 단일 슬라이스에서 하면 컴파일이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="b8796c82063dd394ca7b901b43bcdd5623524f60" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;clone_from_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rust는 특정 범위의 특정 데이터에 대한 변경 불가능한 참조가없는 변경 가능한 참조가 하나만있을 수 있도록합니다. 이 때문에 단일 슬라이스에서 &lt;code&gt;clone_from_slice&lt;/code&gt; 를 사용 하면 컴파일이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="706c743ee2c8c57c9cf12e956040ea8994faeb61" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;copy_from_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rust는 특정 범위의 특정 데이터에 대한 변경 불가능한 참조가없는 변경 가능한 참조가 하나만있을 수 있도록합니다. 이 때문에 단일 슬라이스에서 &lt;code&gt;copy_from_slice&lt;/code&gt; 를 사용 하면 컴파일이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="89181f89a95db183f5b3d8303bfdfb2bc964fac0" translate="yes" xml:space="preserve">
          <source>Rust groups errors into two major categories: &lt;em&gt;recoverable&lt;/em&gt; and &lt;em&gt;unrecoverable&lt;/em&gt; errors. For a recoverable error, such as a file not found error, it&amp;rsquo;s reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.</source>
          <target state="translated">Rust는 오류를 &lt;em&gt;복구 가능&lt;/em&gt; 및 &lt;em&gt;복구 불가능의&lt;/em&gt; 두 가지 주요 범주로 분류합니다.&lt;em&gt;&lt;/em&gt; 오류 오류의 합니다. 파일을 찾을 수 없음 오류와 같은 복구 가능한 오류의 경우 문제를 사용자에게보고하고 작업을 재 시도하는 것이 합리적입니다. 복구 할 수없는 오류는 배열 끝을 넘어 위치에 액세스하려는 경우와 같이 항상 버그 증상입니다.</target>
        </trans-unit>
        <trans-unit id="946b8888318bdae2b8d175a0fe4086722fd4b5fc" translate="yes" xml:space="preserve">
          <source>Rust guarantees to optimize the following types &lt;code&gt;T&lt;/code&gt; such that &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has the same size as &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">녹 보증은 다음과 같은 유형의 최적화 &lt;code&gt;T&lt;/code&gt; 등이 &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; 같은 크기가 &lt;code&gt;T&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="48061a332738260059547f58be5cc62d50260cf9" translate="yes" xml:space="preserve">
          <source>Rust guarantees to optimize the following types &lt;code&gt;T&lt;/code&gt; such that [&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;] has the same size as &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">Rust 는 [ &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; ]가 &lt;code&gt;T&lt;/code&gt; 와 같은 크기를 갖도록 다음 유형 &lt;code&gt;T&lt;/code&gt; 를 최적화하도록 보장합니다 .</target>
        </trans-unit>
        <trans-unit id="17426c688445460fafbc02d6e3ab0f35fb6f21ba" translate="yes" xml:space="preserve">
          <source>Rust has a helpful method to handle line-by-line iteration of strings, conveniently named &lt;code&gt;lines&lt;/code&gt;, that works as shown in Listing 12-17. Note this won&amp;rsquo;t compile yet.</source>
          <target state="translated">녹 문자열, 편리라는 이름의 핸들 라인 별 반복에 도움이되는 방법이 &lt;code&gt;lines&lt;/code&gt; 작품으로는 12 ~ 17 목록에 표시된 것을. 아직 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d698a54ce65a1a8a252d0c52823bbef706cfe2a" translate="yes" xml:space="preserve">
          <source>Rust has a number of features that allow you to manage your code&amp;rsquo;s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the &lt;em&gt;module system&lt;/em&gt;, and include:</source>
          <target state="translated">Rust에는 노출 된 세부 정보, 개인 정보, 프로그램의 각 범위에있는 이름 등 코드 구성을 관리 할 수있는 다양한 기능이 있습니다. 이러한 기능은 총칭하여 &lt;em&gt;모듈 시스템&lt;/em&gt; 이라고 하며 다음을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="d0ae5edd5a8810915e1c78a72e4cc1021a8ebd40" translate="yes" xml:space="preserve">
          <source>Rust has a number of features that allow you to manage your code&amp;rsquo;s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the &lt;em&gt;module system&lt;/em&gt;, include:</source>
          <target state="translated">Rust는 어떤 세부 사항이 노출되는지, 어떤 세부 사항이 비공개인지, 프로그램의 각 범위에 어떤 이름이 있는지를 포함하여 코드의 구성을 관리 할 수있는 많은 기능을 가지고 있습니다. 통합적으로 &lt;em&gt;모듈 시스템&lt;/em&gt; 이라고도하는 이러한 기능 에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="49935161924130a0652e8dffafd8b2c317e5e61b" translate="yes" xml:space="preserve">
          <source>Rust has a special annotation called the &lt;code&gt;Copy&lt;/code&gt; trait that we can place on types like integers that are stored on the stack (we&amp;rsquo;ll talk more about traits in Chapter 10). If a type has the &lt;code&gt;Copy&lt;/code&gt; trait, an older variable is still usable after assignment. Rust won&amp;rsquo;t let us annotate a type with the &lt;code&gt;Copy&lt;/code&gt; trait if the type, or any of its parts, has implemented the &lt;code&gt;Drop&lt;/code&gt; trait. If the type needs something special to happen when the value goes out of scope and we add the &lt;code&gt;Copy&lt;/code&gt; annotation to that type, we&amp;rsquo;ll get a compile-time error. To learn about how to add the &lt;code&gt;Copy&lt;/code&gt; annotation to your type, see &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits&amp;rdquo;&lt;/a&gt; in Appendix C.</source>
          <target state="translated">Rust에는 스택에 저장된 정수와 같은 유형에 배치 할 수 있는 &lt;code&gt;Copy&lt;/code&gt; 특성 이라는 특수 주석이 있습니다 (10 장에서 특성에 대해 자세히 설명하겠습니다). 유형에 &lt;code&gt;Copy&lt;/code&gt; 특성 이있는 경우 할당 후에도 이전 변수를 계속 사용할 수 있습니다. 유형 또는 그 일부가 &lt;code&gt;Drop&lt;/code&gt; 특성을 구현 한 경우 Rust는 &lt;code&gt;Copy&lt;/code&gt; 특성 으로 유형에 주석을 달 수 없습니다 . 값이 범위를 벗어날 때 유형에 특별한 무언가가 필요하고 해당 유형에 &lt;code&gt;Copy&lt;/code&gt; 주석을 추가하면 컴파일 타임 오류가 발생합니다. 타입에 &lt;code&gt;Copy&lt;/code&gt; 주석 을 추가하는 방법에 대해서는 부록 C의 &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits&amp;rdquo;&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d250dac13ee732a5203fad399c6c0a0094b44fcf" translate="yes" xml:space="preserve">
          <source>Rust has a special annotation called the &lt;code&gt;Copy&lt;/code&gt; trait that we can place on types like integers that are stored on the stack (we&amp;rsquo;ll talk more about traits in Chapter 10). If a type implements the &lt;code&gt;Copy&lt;/code&gt; trait, an older variable is still usable after assignment. Rust won&amp;rsquo;t let us annotate a type with the &lt;code&gt;Copy&lt;/code&gt; trait if the type, or any of its parts, has implemented the &lt;code&gt;Drop&lt;/code&gt; trait. If the type needs something special to happen when the value goes out of scope and we add the &lt;code&gt;Copy&lt;/code&gt; annotation to that type, we&amp;rsquo;ll get a compile-time error. To learn about how to add the &lt;code&gt;Copy&lt;/code&gt; annotation to your type to implement the trait, see &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits&amp;rdquo;&lt;/a&gt; in Appendix C.</source>
          <target state="translated">Rust에는 스택에 저장된 정수와 같은 유형에 배치 할 수 있는 &lt;code&gt;Copy&lt;/code&gt; 특성 이라는 특수 주석이 있습니다 (특성에 대해서는 10 장에서 자세히 설명합니다). 유형이 &lt;code&gt;Copy&lt;/code&gt; 특성을 구현하는 경우 할당 후에도 이전 변수를 계속 사용할 수 있습니다. Rust는 유형 또는 그 일부가 &lt;code&gt;Drop&lt;/code&gt; 특성을 구현 한 경우 &lt;code&gt;Copy&lt;/code&gt; 특성 으로 유형에 주석을 달 수 없습니다 . 값이 범위를 벗어나고 해당 유형에 &lt;code&gt;Copy&lt;/code&gt; 주석을 추가 할 때 유형에 특별한 일이 발생해야하는 경우 컴파일 타임 오류가 발생합니다. 특성을 구현하기 위해 유형에 &lt;code&gt;Copy&lt;/code&gt; 주석 을 추가하는 방법에 대한 자세한 내용 은 부록 C의 &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&quot;&lt;/a&gt; 파생 특성&quot; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb74ed2b9f402bf372b86ede78b5b956776b5eac" translate="yes" xml:space="preserve">
          <source>Rust has a special type named &lt;code&gt;!&lt;/code&gt; that&amp;rsquo;s known in type theory lingo as the &lt;em&gt;empty type&lt;/em&gt; because it has no values. We prefer to call it the &lt;em&gt;never type&lt;/em&gt; because it stands in the place of the return type when a function will never return. Here is an example:</source>
          <target state="translated">Rust는 &lt;code&gt;!&lt;/code&gt; 라는 특별한 타입을 가지고 있습니다 . 그것은 유형 이론 용어에서 값이 없기 때문에 &lt;em&gt;빈 유형&lt;/em&gt; 으로 알려져 있습니다. 함수가 절대로 리턴하지 않을 때 리턴 유형 대신에 있기 때문에 &lt;em&gt;never 유형&lt;/em&gt; 이라고 부릅니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="706acaa256465c2dcf2f521cfbdce1b8adb60b94" translate="yes" xml:space="preserve">
          <source>Rust has a well-defined &lt;a href=&quot;../../reference/destructors&quot;&gt;drop order&lt;/a&gt; of values. To make sure that fields or locals are dropped in a specific order, reorder the declarations such that the implicit drop order is the correct one.</source>
          <target state="translated">Rust는 잘 정의 된 값의 &lt;a href=&quot;../../reference/destructors&quot;&gt;드롭 순서&lt;/a&gt; 를 가지고 있습니다. 필드 또는 로컬이 특정 순서로 삭제되도록하려면 암시 ​​적 삭제 순서가 올바른 순서가되도록 선언의 순서를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="e20f831507fc3015fa4b5f62f8ae95078cffc507" translate="yes" xml:space="preserve">
          <source>Rust has an extremely powerful control flow operator called &lt;code&gt;match&lt;/code&gt; that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things; Chapter 18 covers all the different kinds of patterns and what they do. The power of &lt;code&gt;match&lt;/code&gt; comes from the expressiveness of the patterns and the fact that the compiler confirms that all possible cases are handled.</source>
          <target state="translated">Rust에는 &lt;code&gt;match&lt;/code&gt; 라는 매우 강력한 제어 흐름 연산자가 있어 일련의 패턴과 값을 비교 한 다음 패턴 일치에 따라 코드를 실행할 수 있습니다. 패턴은 리터럴 값, 변수 이름, 와일드 카드 및 기타 여러 가지로 구성 될 수 있습니다. 18 장에서는 모든 종류의 패턴과 그 역할을 다룹니다. &lt;code&gt;match&lt;/code&gt; 의 힘은 패턴의 표현 성과 컴파일러가 모든 가능한 경우가 처리되었음을 확인한다는 사실에서 비롯됩니다.</target>
        </trans-unit>
        <trans-unit id="274075ef85f35df55435242c1d906ad5d8960c88" translate="yes" xml:space="preserve">
          <source>Rust has provided a number of traits for us to use with the &lt;code&gt;derive&lt;/code&gt; annotation that can add useful behavior to our custom types. Those traits and their behaviors are listed in Appendix C. We&amp;rsquo;ll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter 10.</source>
          <target state="translated">Rust는 사용자 정의 유형에 유용한 동작을 추가 할 수 있는 &lt;code&gt;derive&lt;/code&gt; 주석 과 함께 사용할 수있는 여러 가지 특성을 제공했습니다 . 이러한 특성과 동작은 부록 C에 나와 있습니다.이 특성을 사용자 정의 동작으로 구현하는 방법과 10 장에서 자신 만의 특성을 만드는 방법을 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="9abfc06989ca660b27a8bdfcf34e581735c33394" translate="yes" xml:space="preserve">
          <source>Rust has rules that allow lifetimes to be elided in various places where the compiler can infer a sensible default choice.</source>
          <target state="translated">Rust에는 컴파일러가 합리적인 기본 선택을 유추 할 수있는 다양한 위치에서 수명을 생략 할 수있는 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8345bc804bda40bffec95786aae64fa77a56f07" translate="yes" xml:space="preserve">
          <source>Rust has three kinds of loops: &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt;. Let&amp;rsquo;s try each one.</source>
          <target state="translated">Rust에는 &lt;code&gt;loop&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; 및 &lt;code&gt;for&lt;/code&gt; 의 세 가지 종류의 루프 가 있습니다. 각각 시도해 봅시다.</target>
        </trans-unit>
        <trans-unit id="69ac847beaa0b2c5daa7fb301847708a789caa24" translate="yes" xml:space="preserve">
          <source>Rust has two kinds of statement: &lt;a href=&quot;#declaration-statements&quot;&gt;declaration statements&lt;/a&gt; and &lt;a href=&quot;#expression-statements&quot;&gt;expression statements&lt;/a&gt;.</source>
          <target state="translated">Rust는 &lt;a href=&quot;#declaration-statements&quot;&gt;선언문&lt;/a&gt; 과 &lt;a href=&quot;#expression-statements&quot;&gt;표현 문의&lt;/a&gt; 두 종류의 문장을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a4b07d2a6fb6a7fe95444fa2c7afda8086fcf0c" translate="yes" xml:space="preserve">
          <source>Rust has two kinds of statement: &lt;a href=&quot;statements#declaration-statements&quot;&gt;declaration statements&lt;/a&gt; and &lt;a href=&quot;statements#expression-statements&quot;&gt;expression statements&lt;/a&gt;.</source>
          <target state="translated">Rust에는 &lt;a href=&quot;statements#declaration-statements&quot;&gt;선언문&lt;/a&gt; 과 &lt;a href=&quot;statements#expression-statements&quot;&gt;표현 문의&lt;/a&gt; 두 가지 문장이 있습니다.</target>
        </trans-unit>
        <trans-unit id="005babc4bad22226436a0f4a1424db5097b9ced6" translate="yes" xml:space="preserve">
          <source>Rust has two ways to reference an element so you can choose how the program behaves when you try to use an index value that the vector doesn&amp;rsquo;t have an element for. As an example, let&amp;rsquo;s see what a program will do if it has a vector that holds five elements and then tries to access an element at index 100, as shown in Listing 8-6.</source>
          <target state="translated">Rust에는 요소를 참조하는 두 가지 방법이 있으므로 벡터에 요소가없는 인덱스 값을 사용하려고 할 때 프로그램의 작동 방식을 선택할 수 있습니다. 예를 들어, 목록 8-6에 표시된 것처럼 5 개의 요소를 보유한 벡터가 있고 인덱스 100에서 요소에 액세스하려고하면 프로그램이 어떻게 수행하는지 봅시다.</target>
        </trans-unit>
        <trans-unit id="8024edbf38de66c89e3d81c184c687bc31f1dd00" translate="yes" xml:space="preserve">
          <source>Rust input is interpreted as a sequence of Unicode code points encoded in UTF-8.</source>
          <target state="translated">녹 입력은 UTF-8로 인코딩 된 일련의 유니 코드 코드 포인트로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="c8cbae13f648a692e7452cc98631131e1d6323f2" translate="yes" xml:space="preserve">
          <source>Rust instead uses generics to abstract over different possible types and trait bounds to impose constraints on what those types must provide. This is sometimes called &lt;em&gt;bounded parametric polymorphism&lt;/em&gt;.</source>
          <target state="translated">대신 Rust는 제네릭을 사용하여 가능한 다른 유형과 특성 범위를 추상화하여 해당 유형이 제공해야하는 것에 제약을가합니다. 이것을 &lt;em&gt;경계 매개 변수 다형성&lt;/em&gt; 이라고도 합니다.</target>
        </trans-unit>
        <trans-unit id="b1053cabf6d03bc378398388561e05d76d497e05" translate="yes" xml:space="preserve">
          <source>Rust is &lt;em&gt;primarily&lt;/em&gt; an expression language. This means that most forms of value-producing or effect-causing evaluation are directed by the uniform syntax category of &lt;em&gt;expressions&lt;/em&gt;. Each kind of expression can typically &lt;em&gt;nest&lt;/em&gt; within each other kind of expression, and rules for evaluation of expressions involve specifying both the value produced by the expression and the order in which its sub-expressions are themselves evaluated.</source>
          <target state="translated">녹은 &lt;em&gt;주로&lt;/em&gt; 표현 언어입니다. 이는 대부분의 형태의 가치 창출 또는 효과를 유발하는 평가는 통일 된 구문 범주 &lt;em&gt;표현식에&lt;/em&gt; 의해 지시된다는 것을 의미합니다 . 각 종류의 표현식은 일반적으로 서로 다른 종류의 표현식 내에 &lt;em&gt;중첩&lt;/em&gt; 될 수 있으며 , 표현식 평가 규칙에는 표현식에 의해 생성 된 값과 하위 표현식 자체가 평가되는 순서를 지정하는 것이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5db5878515e4389bbf8421d74fcb5d667d66d9ab" translate="yes" xml:space="preserve">
          <source>Rust is a &quot;free-form&quot; language, meaning that all forms of whitespace serve only to separate &lt;em&gt;tokens&lt;/em&gt; in the grammar, and have no semantic significance.</source>
          <target state="translated">Rust는 &quot;자유형&quot;언어입니다. 즉, 모든 형태의 공백 은 문법에서 &lt;em&gt;토큰&lt;/em&gt; 을 분리하는 데만 사용되며 의미 상 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3cea4d3df9c4c79e41064c918cdf547361978c7e" translate="yes" xml:space="preserve">
          <source>Rust is for people who crave speed and stability in a language. By speed, we mean the speed of the programs that you can create with Rust and the speed at which Rust lets you write them. The Rust compiler&amp;rsquo;s checks ensure stability through feature additions and refactoring. This is in contrast to the brittle legacy code in languages without these checks, which developers are often afraid to modify. By striving for zero-cost abstractions, higher-level features that compile to lower-level code as fast as code written manually, Rust endeavors to make safe code be fast code as well.</source>
          <target state="translated">녹은 언어로 속도와 안정성을 원하는 사람들을위한 것입니다. 속도로 말하면 Rust로 작성할 수있는 프로그램의 속도와 Rust가 작성할 수있는 속도를 의미합니다. Rust 컴파일러 검사는 기능 추가 및 리팩토링을 통해 안정성을 보장합니다. 이것은 개발자가 종종 수정하기를 두려워하는 이러한 검사가없는 언어의 취성있는 레거시 코드와 대조적입니다. Rust는 수동으로 작성된 코드만큼 낮은 수준의 코드로 빠르게 컴파일되는 고급 기능인 비용없는 추상화를 위해 노력함으로써 안전한 코드도 빠른 코드로 만들기 위해 노력합니다.</target>
        </trans-unit>
        <trans-unit id="7bf10b5f2d62512e2d305590c2208014f45470d4" translate="yes" xml:space="preserve">
          <source>Rust is for people who want to build the Rust programming language, community, developer tools, and libraries. We&amp;rsquo;d love to have you contribute to the Rust language.</source>
          <target state="translated">Rust은 Rust 프로그래밍 언어, 커뮤니티, 개발자 도구 및 라이브러리를 구축하려는 사람들을위한 것입니다. Rust 언어에 공헌하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="2dd06888c30776a4c25d59c7d1262374011d3d0b" translate="yes" xml:space="preserve">
          <source>Rust is for students and those who are interested in learning about systems concepts. Using Rust, many people have learned about topics like operating systems development. The community is very welcoming and happy to answer student questions. Through efforts such as this book, the Rust teams want to make systems concepts more accessible to more people, especially those new to programming.</source>
          <target state="translated">녹은 학생들과 시스템 개념에 대해 배우고 자하는 사람들을위한 것입니다. Rust를 사용하여 많은 사람들이 운영 체제 개발과 같은 주제에 대해 배웠습니다. 커뮤니티는 매우 환영하며 학생의 질문에 기꺼이 답변합니다. 이 책과 같은 노력을 통해 Rust 팀은 더 많은 사람들, 특히 프로그래밍에 익숙하지 않은 사람들이 시스템 개념에보다 쉽게 ​​접근 할 수 있도록하려고합니다.</target>
        </trans-unit>
        <trans-unit id="fe5a0dfe919ae890cb83e73c25365cbc5b82b5b4" translate="yes" xml:space="preserve">
          <source>Rust is ideal for many people for a variety of reasons. Let&amp;rsquo;s look at a few of the most important groups.</source>
          <target state="translated">녹은 여러 가지 이유로 많은 사람들에게 이상적입니다. 가장 중요한 그룹 몇 개를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="42421e785d37bc9b73d820b74a50d1fba537bea2" translate="yes" xml:space="preserve">
          <source>Rust is not a particularly original language, with design elements coming from a wide range of sources. Some of these are listed below (including elements that have since been removed):</source>
          <target state="translated">녹은 특히 독창적 인 언어가 아니며, 디자인 요소는 광범위한 소스에서 제공됩니다. 다음 중 일부가 아래에 나열되어 있습니다 (이후 제거 된 요소 포함).</target>
        </trans-unit>
        <trans-unit id="b44eb4eed4591a2484384d8f13e00b4678784a52" translate="yes" xml:space="preserve">
          <source>Rust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge. Low-level code is prone to a variety of subtle bugs, which in most other languages can be caught only through extensive testing and careful code review by experienced developers. In Rust, the compiler plays a gatekeeper role by refusing to compile code with these elusive bugs, including concurrency bugs. By working alongside the compiler, the team can spend their time focusing on the program&amp;rsquo;s logic rather than chasing down bugs.</source>
          <target state="translated">Rust는 다양한 수준의 시스템 프로그래밍 지식을 가진 대규모 개발자 팀과 협력 할 수있는 생산적인 도구임을 입증하고 있습니다. 저수준 코드는 다양한 미묘한 버그가 발생하기 쉽습니다. 대부분의 다른 언어에서는 숙련 된 개발자가 광범위한 테스트와 신중한 코드 검토를 통해서만 포착 할 수 있습니다. Rust에서 컴파일러는 동시성 버그를 포함하여 이러한 어려운 버그로 코드를 컴파일하는 것을 거부함으로써 게이트 키퍼 역할을 수행합니다. 팀은 컴파일러와 함께 작업함으로써 버그를 추적하지 않고 프로그램의 논리에 집중할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7fcfa2c0e9d01cf1bef3a319720c713bacd4522" translate="yes" xml:space="preserve">
          <source>Rust is still a work in progress with places where the compiler could be improved, but in the future, the code in Listing 20-20 should work just fine. People just like you are working to fix this and other issues! After you&amp;rsquo;ve finished this book, we would love for you to join in.</source>
          <target state="translated">Rust는 여전히 컴파일러를 개선 할 수있는 곳에서 진행중인 작업이지만 앞으로는 목록 20-20의 코드가 제대로 작동합니다. 당신과 같은 사람들이이 문제와 다른 문제를 해결하기 위해 노력하고 있습니다! 이 책을 마친 후에는 참여해 주셔서 감사합니다.</target>
        </trans-unit>
        <trans-unit id="414ef5b7fed42f865260a7cd152d3f2a763ca163" translate="yes" xml:space="preserve">
          <source>Rust itself does not have a Python-like equivalent of named parameters to a function, but the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is a syntax extension that allows it to leverage named parameters. Named parameters are listed at the end of the argument list and have the syntax:</source>
          <target state="translated">Rust 자체에는 함수에 대한 명명 된 매개 변수에 해당하는 Python과 유사한 기능이 없지만 &lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;매크로는 명명 된 매개 변수를 활용할 수있는 구문 확장입니다. 명명 된 매개 변수는 인수 목록 끝에 나열되며 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="009bd344314f5929e591a576862f0addd792ad2d" translate="yes" xml:space="preserve">
          <source>Rust itself does not have a Python-like equivalent of named parameters to a function, but the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is a syntax extension which allows it to leverage named parameters. Named parameters are listed at the end of the argument list and have the syntax:</source>
          <target state="translated">Rust 자체에는 함수와 비슷한 이름의 매개 변수와 같은 Python과 같은 &lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt; 없지만 형식이 있습니다! 매크로는 명명 된 매개 변수를 활용할 수있는 구문 확장입니다. 명명 된 매개 변수는 인수 목록의 끝에 나열되며 다음 구문을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="2f45412f8a16ab817b5f0812176d720466554450" translate="yes" xml:space="preserve">
          <source>Rust itself has no notion of immovable types, and considers moves (e.g., through assignment or &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt;) to always be safe.</source>
          <target state="translated">Rust 자체에는 고정 유형에 대한 개념이 없으며 이동 (예 : 할당 또는 &lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt; )이 항상 안전하다고 간주합니다.</target>
        </trans-unit>
        <trans-unit id="bf73204b9a4eab7a093c6de5aa1aad6f2361e93a" translate="yes" xml:space="preserve">
          <source>Rust knows that we didn&amp;rsquo;t cover every possible case and even knows which pattern we forgot! Matches in Rust are &lt;em&gt;exhaustive&lt;/em&gt;: we must exhaust every last possibility in order for the code to be valid. Especially in the case of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, when Rust prevents us from forgetting to explicitly handle the &lt;code&gt;None&lt;/code&gt; case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier impossible.</source>
          <target state="translated">Rust는 우리가 가능한 모든 경우를 다루지 않았고 우리가 잊은 패턴도 알고 있다는 것을 알고 있습니다! Rust의 매치는 &lt;em&gt;완전&lt;/em&gt; 합니다. 코드가 유효하려면 마지막 가능성을 모두 &lt;em&gt;소진&lt;/em&gt; 해야합니다. 특히 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 의 경우 Rust가 명시 적으로 &lt;code&gt;None&lt;/code&gt; 케이스를 처리하는 것을 잊는 것을 막을 때 null이있을 때 가치가 있다고 가정하지 못하도록 보호하므로 앞서 논의한 10 억 달러의 실수를 불가능하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5773a78f91f6dd61a894f54aca9217a3e2589f2c" translate="yes" xml:space="preserve">
          <source>Rust knows that we didn&amp;rsquo;t cover every possible case and even knows which pattern we forgot! Matches in Rust are &lt;em&gt;exhaustive&lt;/em&gt;: we must exhaust every last possibility in order for the code to be valid. Especially in the case of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, when Rust prevents us from forgetting to explicitly handle the &lt;code&gt;None&lt;/code&gt; case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier.</source>
          <target state="translated">Rust는 우리가 가능한 모든 경우를 다루지 않았다는 것을 알고 심지어 우리가 잊어 버린 패턴을 알고 있습니다! Rust의 일치 항목은 &lt;em&gt;철저&lt;/em&gt; 합니다. 코드가 유효하려면 마지막 가능성을 모두 &lt;em&gt;소진&lt;/em&gt; 해야합니다. 특히 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 의 경우 Rust가 &lt;code&gt;None&lt;/code&gt; 사례 를 명시 적으로 처리하는 것을 잊어 버리지 않으면 null 일 때 가치가 있다고 가정하지 못하므로 앞에서 논의한 10 억 달러의 실수가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6037ceeea4fb74411f6b08d6b6645ce5f8d0bdce" translate="yes" xml:space="preserve">
          <source>Rust lets you organize your packages into crates and your crates into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a &lt;code&gt;use&lt;/code&gt; statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the &lt;code&gt;pub&lt;/code&gt; keyword.</source>
          <target state="translated">Rust를 사용하면 패키지를 상자로 구성하고 상자를 모듈로 구성 할 수 있으므로 다른 모듈에서 한 모듈에 정의 된 항목을 참조 할 수 있습니다. 절대 또는 상대 경로를 지정하여이를 수행 할 수 있습니다. 이러한 경로는 &lt;code&gt;use&lt;/code&gt; 문을 사용 하여 범위로 가져올 수 있으므로 해당 범위에서 항목을 여러 번 사용할 때 더 짧은 경로를 사용할 수 있습니다. 모듈 코드는 기본적으로 비공개이지만 &lt;code&gt;pub&lt;/code&gt; 키워드 를 추가하여 정의를 공개 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a48891d4f88805e4179ad3fd74a5e413f7ca1c9b" translate="yes" xml:space="preserve">
          <source>Rust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a &lt;code&gt;use&lt;/code&gt; statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the &lt;code&gt;pub&lt;/code&gt; keyword.</source>
          <target state="translated">Rust를 사용하면 패키지를 여러 상자로 분할하고 상자를 모듈로 분할하여 한 모듈에 정의 된 항목을 다른 모듈에서 참조 할 수 있습니다. 절대 또는 상대 경로를 지정하여이를 수행 할 수 있습니다. 이러한 경로는 &lt;code&gt;use&lt;/code&gt; 문을 사용 하여 범위로 가져올 수 있으므로 해당 범위에서 항목을 여러 번 사용하기 위해 더 짧은 경로를 사용할 수 있습니다. 모듈 코드는 기본적으로 비공개이지만 &lt;code&gt;pub&lt;/code&gt; 키워드 를 추가하여 정의를 공개 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3bfbc1a861d0c5db39d3370b938cda066a42dac" translate="yes" xml:space="preserve">
          <source>Rust memory safety is based on this rule: Given an object &lt;code&gt;T&lt;/code&gt;, it is only possible to have one of the following:</source>
          <target state="translated">녹 메모리 안전은이 규칙을 기반으로합니다. 객체 &lt;code&gt;T&lt;/code&gt; 가 주어지면 다음 중 하나만 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86b4aec68c04f34ea15c657bcbc637e9391e2aab" translate="yes" xml:space="preserve">
          <source>Rust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two &lt;code&gt;str&lt;/code&gt; values would need to take up the same amount of space. But they have different lengths: &lt;code&gt;s1&lt;/code&gt; needs 12 bytes of storage and &lt;code&gt;s2&lt;/code&gt; needs 15. This is why it&amp;rsquo;s not possible to create a variable holding a dynamically sized type.</source>
          <target state="translated">Rust는 특정 유형의 값에 할당 할 메모리 양을 알아야하며, 유형의 모든 값은 동일한 양의 메모리를 사용해야합니다. Rust가이 코드를 작성할 수 있다면이 두 &lt;code&gt;str&lt;/code&gt; 값은 같은 양의 공간을 차지해야합니다. 그러나 길이는 서로 다릅니다. &lt;code&gt;s1&lt;/code&gt; 에는 12 바이트의 저장 공간 이 필요 하고 &lt;code&gt;s2&lt;/code&gt; 에는 15가 필요합니다. 이것이 동적 크기 유형을 보유하는 변수를 작성할 수없는 이유입니다.</target>
        </trans-unit>
        <trans-unit id="1b76d3101d775a50daedde876a1dc0606265c7b7" translate="yes" xml:space="preserve">
          <source>Rust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element. A secondary advantage is that we can be explicit about what types are allowed in this vector. If Rust allowed a vector to hold any type, there would be a chance that one or more of the types would cause errors with the operations performed on the elements of the vector. Using an enum plus a &lt;code&gt;match&lt;/code&gt; expression means that Rust will ensure at compile time that every possible case is handled, as discussed in Chapter 6.</source>
          <target state="translated">Rust는 컴파일 타임에 벡터에 어떤 유형이 있는지 알아야하므로 각 요소를 저장하는 데 힙의 메모리 양이 정확히 무엇인지 알아야합니다. 두 번째 이점은이 벡터에 어떤 유형이 허용되는지 명시 적으로 표현할 수 있다는 것입니다. Rust가 벡터에 임의의 유형을 보유하도록 허용 한 경우 하나 이상의 유형이 벡터 요소에 대해 수행 된 작업에 오류를 일으킬 가능성이 있습니다. 열거 형과 &lt;code&gt;match&lt;/code&gt; 표현식을 함께 사용 한다는 것은 6 장에서 설명한 것처럼 Rust가 컴파일 할 때 가능한 모든 경우를 처리 할 수 ​​있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2c1cfd45b3ac0b28a948d8b4a2f4de2f8d870925" translate="yes" xml:space="preserve">
          <source>Rust only looks at the signature of the called function, as such it must already specify all requirements that will be used for every type parameter.</source>
          <target state="translated">Rust는 호출 된 함수의 서명 만 검토하므로 모든 유형 매개 변수에 사용될 모든 요구 사항을 이미 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="1ed887a173c68a2fae7555ba7b47d26cdae56e96" translate="yes" xml:space="preserve">
          <source>Rust only supports variadic parameters for interoperability with C code in its FFI. As such, variadic parameters can only be used with functions which are using the C ABI. Examples of erroneous code:</source>
          <target state="translated">Rust는 FFI에서 C 코드와의 상호 운용성을 위해 가변 매개 변수 만 지원합니다. 따라서 가변 변수는 C ABI를 사용하는 함수에만 사용할 수 있습니다. 잘못된 코드의 예 :</target>
        </trans-unit>
        <trans-unit id="8006f3ad63420cf97d2756a811368615cb17cc79" translate="yes" xml:space="preserve">
          <source>Rust only supports variadic parameters for interoperability with C code in its FFI. As such, variadic parameters can only be used with functions which are using the C ABI. To fix such code, put them in an extern &quot;C&quot; block:</source>
          <target state="translated">Rust는 FFI에서 C 코드와의 상호 운용성을 위해 가변 매개 변수 만 지원합니다. 따라서 가변 매개 변수는 C ABI를 사용하는 함수에서만 사용할 수 있습니다. 이러한 코드를 수정하려면 extern &quot;C&quot;블록에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="e7d6720314fd90db94a4f0505ed35c899b634d9a" translate="yes" xml:space="preserve">
          <source>Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.</source>
          <target state="translated">Rust는 컴퓨터가 저장하는 원시 문자열 데이터를 해석하는 다양한 방법을 제공하므로 데이터가 어떤 언어에 관계없이 각 프로그램이 필요한 해석을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a9d1ac483b5a0d5a30d4a6b20b099a21ce7d1ed" translate="yes" xml:space="preserve">
          <source>Rust releases every six weeks, like clockwork. If you know the date of one Rust release, you can know the date of the next one: it&amp;rsquo;s six weeks later. A nice aspect of having releases scheduled every six weeks is that the next train is coming soon. If a feature happens to miss a particular release, there&amp;rsquo;s no need to worry: another one is happening in a short time! This helps reduce pressure to sneak possibly unpolished features in close to the release deadline.</source>
          <target state="translated">녹은 시계처럼 6 주마다 방출됩니다. 하나의 Rust 릴리스 날짜를 알고 있다면 다음 릴리스 날짜를 알 수 있습니다. 6 주 후입니다. 6 주마다 릴리스가 예정되어 있다는 좋은 점은 다음 열차가 곧 출시 될 것입니다. 기능이 특정 릴리스를 놓치면 걱정할 필요가 없습니다. 짧은 시간 안에 다른 기능이 발생합니다! 이를 통해 릴리스 마감 시간에 근접한 폴리싱되지 않은 기능을 몰래 가야하는 압력을 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14633826285dcf815682cf46efd1f87adcad6f15" translate="yes" xml:space="preserve">
          <source>Rust represents owned strings with the &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; type, and borrowed slices of strings with the &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; primitive. Both are always in UTF-8 encoding, and may contain nul bytes in the middle, i.e., if you look at the bytes that make up the string, there may be a &lt;code&gt;\0&lt;/code&gt; among them. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; store their length explicitly; there are no nul terminators at the end of strings like in C.</source>
          <target state="translated">Rust는 &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 유형의 소유 한 문자열과 &lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 프리미티브 의 빌린 문자열 조각을 나타냅니다 . 둘 다 항상 UTF-8 인코딩이며 중간에 널 바이트를 포함 할 수 있습니다. 즉, 문자열을 구성하는 바이트를 보면 그 중에 &lt;code&gt;\0&lt;/code&gt; 이있을 수 있습니다 . &lt;code&gt;String&lt;/code&gt; 과 &lt;code&gt;str&lt;/code&gt; 은 모두 길이를 명시 적으로 저장합니다. C와 같이 문자열 끝에 널 종결자가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b115ba9be271d9cb748571eff2d355ec3f4582c1" translate="yes" xml:space="preserve">
          <source>Rust represents owned strings with the &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; type, and borrowed slices of strings with the &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.str.html&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; primitive. Both are always in UTF-8 encoding, and may contain nul bytes in the middle, i.e., if you look at the bytes that make up the string, there may be a &lt;code&gt;\0&lt;/code&gt; among them. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; store their length explicitly; there are no nul terminators at the end of strings like in C.</source>
          <target state="translated">Rust는 &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 유형으로 소유 된 문자열을 나타내고 &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.str.html&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 프리미티브를 사용하여 빌린 문자열 조각을 나타냅니다 . 둘 다 항상 UTF-8 인코딩이며 중간에 nul 바이트를 포함 할 수 있습니다. 즉, 문자열을 구성하는 바이트를 보면 그 사이에 &lt;code&gt;\0&lt;/code&gt; 이있을 수 있습니다 . &lt;code&gt;String&lt;/code&gt; 과 &lt;code&gt;str&lt;/code&gt; 은 모두 길이를 명시 적으로 저장합니다. C에서와 같이 문자열 끝에 nul 종결자가 없습니다.</target>
        </trans-unit>
        <trans-unit id="a1035dbea9907a4eef978b13fc5c640f49f6ff75" translate="yes" xml:space="preserve">
          <source>Rust substitutes the &lt;code&gt;*&lt;/code&gt; operator with a call to the &lt;code&gt;deref&lt;/code&gt; method and then a plain dereference so we don&amp;rsquo;t have to think about whether or not we need to call the &lt;code&gt;deref&lt;/code&gt; method. This Rust feature lets us write code that functions identically whether we have a regular reference or a type that implements &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">Rust는 &lt;code&gt;*&lt;/code&gt; 연산자를 &lt;code&gt;deref&lt;/code&gt; 메소드에 대한 호출로 대체 한 다음 일반 역 참조를 대체 하므로 &lt;code&gt;deref&lt;/code&gt; 메소드 를 호출해야하는지 여부를 생각할 필요가 없습니다 . 이 Rust 기능을 사용하면 일반 참조가 있는지 또는 &lt;code&gt;Deref&lt;/code&gt; 를 구현하는 유형이 있는지에 관계없이 동일하게 작동하는 코드를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aef02265ae4e5b20b25f7169f2eb182b32c41901" translate="yes" xml:space="preserve">
          <source>Rust supports four loop expressions:</source>
          <target state="translated">Rust는 4 가지 루프 표현식을 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="39846c5622487afb1918e636190776d3ba8814ed" translate="yes" xml:space="preserve">
          <source>Rust supports the basic mathematical operations you&amp;rsquo;d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you&amp;rsquo;d use each one in a &lt;code&gt;let&lt;/code&gt; statement:</source>
          <target state="translated">Rust는 더하기, 빼기, 곱하기, 나누기 및 나머지와 같은 모든 숫자 유형에 대해 예상되는 기본 수학 연산을 지원합니다. 다음 코드는 &lt;code&gt;let&lt;/code&gt; 문 에서 각각을 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="f198f3079c114496b224a182d1c6f07406996d50" translate="yes" xml:space="preserve">
          <source>Rust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here&amp;rsquo;s a version of our scope example from Listing 4-1 using a &lt;code&gt;String&lt;/code&gt; instead of a string literal:</source>
          <target state="translated">Rust는 다른 경로를 사용합니다. 메모리를 소유 한 변수가 범위를 벗어나면 메모리가 자동으로 반환됩니다. 다음 은 문자열 리터럴 대신 &lt;code&gt;String&lt;/code&gt; 사용하는 Listing 4-1의 범위 예제 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="995e5bc0763da76eea3b582149feb3d425499836" translate="yes" xml:space="preserve">
          <source>Rust tells us that our code ignored the &lt;code&gt;Result&lt;/code&gt; value and the &lt;code&gt;Result&lt;/code&gt; value might indicate that an error occurred. But we&amp;rsquo;re not checking to see whether or not there was an error, and the compiler reminds us that we probably meant to have some error-handling code here! Let&amp;rsquo;s rectify that problem now.</source>
          <target state="translated">녹는 우리의 코드는 무시 것을 우리에게 &lt;code&gt;Result&lt;/code&gt; 값을하고 &lt;code&gt;Result&lt;/code&gt; 값이 오류가 발생했음을 나타낼 수 있습니다. 그러나 우리는 오류가 있는지 여부를 확인하지 않고 있으며 컴파일러는 여기에 오류 처리 코드가 있음을 상기시킵니다. 이제 그 문제를 해결하자.</target>
        </trans-unit>
        <trans-unit id="703d493ad79917201eb0acd3b321d61700389d3a" translate="yes" xml:space="preserve">
          <source>Rust treats all function calls as sugar for a more explicit, &lt;a href=&quot;../paths#qualified-paths&quot;&gt;fully-qualified syntax&lt;/a&gt;. Upon compilation, Rust will desugar all function calls into the explicit form. Rust may sometimes require you to qualify function calls with trait, depending on the ambiguity of a call in light of in-scope items.</source>
          <target state="translated">Rust는 모든 함수 호출을 더 명확하고 &lt;a href=&quot;../paths#qualified-paths&quot;&gt;정규화 된 구문을&lt;/a&gt; 위해 설탕으로 취급 합니다 . 컴파일시 Rust는 모든 함수 호출을 명시적인 형식으로 desugar합니다. Rust는 때때로 범위 내 항목에 비추어 호출의 모호성에 따라 트레이 트로 함수 호출을 한정하도록 요구할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="438b72da10259b8d5d86767186b4d727d3dbea23" translate="yes" xml:space="preserve">
          <source>Rust treats all function calls as sugar for a more explicit, fully-qualified syntax. Upon compilation, Rust will desugar all function calls into the explicit form. Rust may sometimes require you to qualify function calls with trait, depending on the ambiguity of a call in light of in-scope items.</source>
          <target state="translated">Rust는보다 명확하고 완전한 구문을 위해 모든 함수 호출을 설탕으로 취급합니다. 컴파일시 Rust는 모든 함수 호출을 명시 적 형태로 제거합니다. Rust는 때때로 범위 내 항목에 비추어 호출의 모호성에 따라 특성을 가진 함수 호출을 규정해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2dc323b3d2c25d779075b9140a6d1e2c6e50939" translate="yes" xml:space="preserve">
          <source>Rust types can be classified in various useful ways according to their intrinsic properties. These classifications are represented as traits.</source>
          <target state="translated">녹 유형은 고유 속성에 따라 다양한 유용한 방식으로 분류 할 수 있습니다. 이러한 분류는 특성으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f77a840183554b84c65d125ee38f75c043f2f8d3" translate="yes" xml:space="preserve">
          <source>Rust uses the WhatWG Infra Standard's &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;definition of ASCII whitespace&lt;/a&gt;. There are several other definitions in wide use. For instance, &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;the POSIX locale&lt;/a&gt; includes U+000B VERTICAL TAB as well as all the above characters, but&amp;mdash;from the very same specification&amp;mdash;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;the default rule for &quot;field splitting&quot; in the Bourne shell&lt;/a&gt; considers &lt;em&gt;only&lt;/em&gt; SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.</source>
          <target state="translated">Rust는 WhatWG Infra Standard의 &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;ASCII 공백 정의를&lt;/a&gt; 사용합니다 . 널리 사용되는 몇 가지 다른 정의가 있습니다. 예를 들어, &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;POSIX 로케일&lt;/a&gt; 에는 위의 모든 문자뿐만 아니라 U + 000B VERTICAL TAB이 포함되지만 &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;Bourne 쉘의 &quot;필드 분할&quot;에 대한 기본 규칙은&lt;/a&gt; SPACE, HORIZONTAL TAB 및 LINE FEED &lt;em&gt;만&lt;/em&gt; 고려 &lt;em&gt;합니다.&lt;/em&gt; 공백으로.</target>
        </trans-unit>
        <trans-unit id="fdff20aa431c99de38501d6abd35bac6090fd863" translate="yes" xml:space="preserve">
          <source>Rust uses the WhatWG Infra Standard's &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;definition of ASCII whitespace&lt;/a&gt;. There are several other definitions in wide use. For instance, &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;the POSIX locale&lt;/a&gt; includes U+000B VERTICAL TAB as well as all the above characters, but&amp;mdash;from the very same specification&amp;mdash;&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;the default rule for &quot;field splitting&quot; in the Bourne shell&lt;/a&gt; considers &lt;em&gt;only&lt;/em&gt; SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.</source>
          <target state="translated">Rust는 WhatWG Infra Standard의 &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;ASCII 공백 정의를&lt;/a&gt; 사용합니다 . 널리 사용되는 몇 가지 다른 정의가 있습니다. 예를 들어 &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;POSIX 로케일&lt;/a&gt; 에는 U + 000B VERTICAL TAB 및 위의 모든 문자가 포함되지만 매우 동일한 사양 &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;에서 Bourne 쉘의 &quot;필드 분할&quot;에 대한 기본 규칙은&lt;/a&gt; SPACE, HORIZONTAL TAB 및 LINE FEED &lt;em&gt;만&lt;/em&gt; 고려 &lt;em&gt;합니다.&lt;/em&gt; 공백으로.</target>
        </trans-unit>
        <trans-unit id="80250cb612ec2f012c7bb709a162afa7cc99b219" translate="yes" xml:space="preserve">
          <source>Rust warns that you haven&amp;rsquo;t used the &lt;code&gt;Result&lt;/code&gt; value returned from &lt;code&gt;read_line&lt;/code&gt;, indicating that the program hasn&amp;rsquo;t handled a possible error.</source>
          <target state="translated">Rust은 &lt;code&gt;read_line&lt;/code&gt; 에서 반환 된 &lt;code&gt;Result&lt;/code&gt; 값을 사용하지 않았다는 경고를 표시하여 프로그램이 가능한 오류를 처리하지 않았 음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="63dc74fc48d1edb7e36f8812dc661ae955f4d16d" translate="yes" xml:space="preserve">
          <source>Rust will first call &lt;code&gt;Drop::drop&lt;/code&gt; for &lt;code&gt;_x&lt;/code&gt; and then for both &lt;code&gt;_x.one&lt;/code&gt; and &lt;code&gt;_x.two&lt;/code&gt;, meaning that running this will print</source>
          <target state="translated">녹 먼저 호출합니다 &lt;code&gt;Drop::drop&lt;/code&gt; 에 대한 &lt;code&gt;_x&lt;/code&gt; 모두에 대해 다음과 &lt;code&gt;_x.one&lt;/code&gt; 및 &lt;code&gt;_x.two&lt;/code&gt; 이를 실행하면 인쇄 할 수 있음을 의미</target>
        </trans-unit>
        <trans-unit id="99846f3671ba325d4d0a5778686542964bf3788a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid &lt;code&gt;char&lt;/code&gt; values in Rust. Unicode Scalar Values range from &lt;code&gt;U+0000&lt;/code&gt; to &lt;code&gt;U+D7FF&lt;/code&gt; and &lt;code&gt;U+E000&lt;/code&gt; to &lt;code&gt;U+10FFFF&lt;/code&gt; inclusive. However, a &amp;ldquo;character&amp;rdquo; isn&amp;rsquo;t really a concept in Unicode, so your human intuition for what a &amp;ldquo;character&amp;rdquo; is may not match up with what a &lt;code&gt;char&lt;/code&gt; is in Rust. We&amp;rsquo;ll discuss this topic in detail in &lt;a href=&quot;ch08-02-strings#storing-utf-8-encoded-text-with-strings&quot;&gt;&amp;ldquo;Storing UTF-8 Encoded Text with Strings&amp;rdquo;&lt;/a&gt; in Chapter 8.</source>
          <target state="translated">Rust의 &lt;code&gt;char&lt;/code&gt; 유형은 크기가 4 바이트이며 유니 코드 스칼라 값을 나타냅니다. 즉, ASCII보다 훨씬 더 많은 것을 나타낼 수 있습니다. 악센트 문자; 중국어, 일본어 및 한국어 문자; 이모 지; 너비가 0 인 공백은 Rust에서 모두 유효한 &lt;code&gt;char&lt;/code&gt; 값입니다. 유니 코드 스칼라 값의 범위는 &lt;code&gt;U+0000&lt;/code&gt; ~ &lt;code&gt;U+D7FF&lt;/code&gt; 및 &lt;code&gt;U+E000&lt;/code&gt; ~ &lt;code&gt;U+10FFFF&lt;/code&gt; 입니다. 그러나&amp;ldquo;문자&amp;rdquo;는 실제로 유니 코드의 개념이 아니기 때문에&amp;ldquo;문자&amp;rdquo;가 무엇인지에 대한 인간의 직감 은 Rust 의 &lt;code&gt;char&lt;/code&gt; 와 일치하지 않을 수 있습니다 . 이 주제에 대해서는 &lt;a href=&quot;ch08-02-strings#storing-utf-8-encoded-text-with-strings&quot;&gt;8&lt;/a&gt; 장의 &quot;문자열을 사용하여 UTF-8 인코딩 텍스트 저장&quot; 에서 자세히 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="a5a4edf491f9a6786fd28bf09333db3dadc399c0" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s borrow checker can&amp;rsquo;t understand that we&amp;rsquo;re borrowing different parts of the slice; it only knows that we&amp;rsquo;re borrowing from the same slice twice. Borrowing different parts of a slice is fundamentally okay because the two slices aren&amp;rsquo;t overlapping, but Rust isn&amp;rsquo;t smart enough to know this. When we know code is okay, but Rust doesn&amp;rsquo;t, it&amp;rsquo;s time to reach for unsafe code.</source>
          <target state="translated">Rust의 빌림 검사기는 슬라이스의 다른 부분을 빌리고 있음을 이해할 수 없습니다. 우리가 같은 슬라이스에서 두 번 빌려오고 있다는 것만 알고 있습니다. 두 조각이 겹치지 않기 때문에 조각의 다른 부분을 빌리는 것은 기본적으로 괜찮지 만 Rust는 이것을 알만큼 똑똑하지 않습니다. 코드는 괜찮지 만 Rust는 그렇지 않다는 것을 알면 안전하지 않은 코드를 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="8c55a2a82b7377101f0771c9bcd044aae6cf6540" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s central feature is &lt;em&gt;ownership&lt;/em&gt;. Although the feature is straightforward to explain, it has deep implications for the rest of the language.</source>
          <target state="translated">Rust의 핵심 기능은 &lt;em&gt;소유권&lt;/em&gt; 입니다. 이 기능은 간단하게 설명 할 수 있지만 나머지 언어에는 깊은 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="5d2271b00baf8fce0728901fd42c87e83d55abd0" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s closures are anonymous functions you can save in a variable or pass as arguments to other functions. You can create the closure in one place and then call the closure to evaluate it in a different context. Unlike functions, closures can capture values from the scope in which they&amp;rsquo;re defined. We&amp;rsquo;ll demonstrate how these closure features allow for code reuse and behavior customization.</source>
          <target state="translated">Rust의 클로저는 변수에 저장하거나 다른 함수에 인수로 전달할 수있는 익명 함수입니다. 한 곳에서 클로저를 생성 한 다음 다른 컨텍스트에서 클로저를 평가하기 위해 클로저를 호출 할 수 있습니다. 함수와 달리 클로저는 정의 된 범위에서 값을 캡처 할 수 있습니다. 이러한 클로저 기능이 코드 재사용 및 동작 사용자 정의를 허용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="fd4c91ef23d0c1a58d5181596522ff41f1f360e9" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s commitment to reliability extends to error handling. Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you&amp;rsquo;ll discover errors and handle them appropriately before you&amp;rsquo;ve deployed your code to production!</source>
          <target state="translated">신뢰성에 대한 Rust의 약속은 오류 처리까지 확대됩니다. 오류는 소프트웨어 생활의 사실이므로 Rust는 문제가 발생하는 상황을 처리하기위한 많은 기능을 가지고 있습니다. 대부분의 경우 Rust는 오류 가능성을 인정하고 코드가 컴파일되기 전에 조치를 취해야합니다. 이 요구 사항은 코드를 프로덕션에 배포하기 전에 오류를 발견하고 적절하게 처리 할 수 ​​있도록하여 프로그램을보다 강력하게 만듭니다!</target>
        </trans-unit>
        <trans-unit id="50fd346e441893c513c7336bf8c9281fb59b1c1a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s design has taken inspiration from many existing languages and techniques, and one significant influence is &lt;em&gt;functional programming&lt;/em&gt;. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.</source>
          <target state="translated">Rust의 디자인은 기존의 많은 언어와 기술에서 영감을 얻었으며 &lt;em&gt;함수 프로그래밍에&lt;/em&gt; 큰 영향을 미칩니다 . 함수형 프로그래밍은 종종 함수를 인수로 전달하고, 다른 함수에서 반환하고, 나중에 실행할 수 있도록 변수에 할당하는 등의 방법으로 함수를 값으로 사용하는 것을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="4cc35a990ff86bc53c3ee8555d1b3d65805dc72a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s error handling features are designed to help you write more robust code. The &lt;code&gt;panic!&lt;/code&gt; macro signals that your program is in a state it can&amp;rsquo;t handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values. The &lt;code&gt;Result&lt;/code&gt; enum uses Rust&amp;rsquo;s type system to indicate that operations might fail in a way that your code could recover from. You can use &lt;code&gt;Result&lt;/code&gt; to tell code that calls your code that it needs to handle potential success or failure as well. Using &lt;code&gt;panic!&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; in the appropriate situations will make your code more reliable in the face of inevitable problems.</source>
          <target state="translated">Rust의 오류 처리 기능은보다 강력한 코드를 작성하도록 도와줍니다. &lt;code&gt;panic!&lt;/code&gt; 매크로는 프로그램이 처리 할 수없는 상태임을 알리고 유효하지 않거나 잘못된 값으로 진행하는 대신 프로세스가 중지되도록 지시합니다. &lt;code&gt;Result&lt;/code&gt; 열거 형 작업 코드를 복구 할 수있는 방법으로 실패 할 수 있음을 나타 내기 위해 녹의 형식 시스템을 사용합니다. &lt;code&gt;Result&lt;/code&gt; 를 사용 하여 잠재적 인 성공 또는 실패를 처리해야하는 코드를 호출하는 코드를 알 수 있습니다 . 사용 &lt;code&gt;panic!&lt;/code&gt; 및 &lt;code&gt;Result&lt;/code&gt; 피할 수없는 문제에 직면 코드를 더 신뢰할 것 적절한 상황에서.</target>
        </trans-unit>
        <trans-unit id="0978df93a2cae0fac3519f383fbc09538259dfbb" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a &lt;em&gt;memory leak&lt;/em&gt;). Preventing memory leaks entirely is not one of Rust&amp;rsquo;s guarantees in the same way that disallowing data races at compile time is, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;: it&amp;rsquo;s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.</source>
          <target state="translated">Rust의 메모리 안전 보장은 실수로 정리되지 않은 메모리를 생성하는 것을 어렵지만 불가능하지는 않습니다 ( &lt;em&gt;메모리 누수&lt;/em&gt; 라고 함 ). 메모리 누수 방지는 컴파일 타임에 데이터 경쟁을 금지하는 것과 같은 방식으로 Rust의 보장 중 하나가 아닙니다. 이는 Rust에서 메모리 누수가 메모리에 안전하다는 의미입니다. Rust가 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 와 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 를 사용하여 메모리 누수를 허용한다는 것을 알 수 있습니다 . 사이클에서 항목들이 서로 참조하는 참조를 생성 할 수 있습니다. 사이클에서 각 항목의 참조 카운트가 0에 도달하지 않고 값이 삭제되지 않기 때문에 메모리 누수가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c83ae6d5141700914f4870b9a16bff718d75b311" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s ownership rules have saved us again! We got an error from the code in Listing 16-3 because Rust was being conservative and only borrowing &lt;code&gt;v&lt;/code&gt; for the thread, which meant the main thread could theoretically invalidate the spawned thread&amp;rsquo;s reference. By telling Rust to move ownership of &lt;code&gt;v&lt;/code&gt; to the spawned thread, we&amp;rsquo;re guaranteeing Rust that the main thread won&amp;rsquo;t use &lt;code&gt;v&lt;/code&gt; anymore. If we change Listing 16-4 in the same way, we&amp;rsquo;re then violating the ownership rules when we try to use &lt;code&gt;v&lt;/code&gt; in the main thread. The &lt;code&gt;move&lt;/code&gt; keyword overrides Rust&amp;rsquo;s conservative default of borrowing; it doesn&amp;rsquo;t let us violate the ownership rules.</source>
          <target state="translated">Rust의 소유권 규칙은 우리를 다시 구했습니다! Rust가 보수적이고 스레드에 대해 &lt;code&gt;v&lt;/code&gt; 만 빌 렸기 때문에 Listing 16-3의 코드에서 오류가 발생했다. 이는 메인 스레드가 이론적으로 스폰 된 스레드의 참조를 무효화 할 수 있음을 의미했다. Rust에게 &lt;code&gt;v&lt;/code&gt; 의 소유권을 스폰 된 스레드 로 옮기라고 말함으로써 , 우리는 Rust가 메인 스레드가 더 이상 &lt;code&gt;v&lt;/code&gt; 를 사용하지 않도록 보장 합니다. 동일한 방식으로 Listing 16-4를 변경 하면 메인 스레드에서 &lt;code&gt;v&lt;/code&gt; 를 사용하려고 할 때 소유권 규칙을 위반하게됩니다 . &lt;code&gt;move&lt;/code&gt; 차입의 키워드 무시 녹의 보수적 인 기본; 소유권 규칙을 위반하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="acb5b5af69714850a9eaace832e90521d0ab51b4" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s patterns are very useful in that they help distinguish between different kinds of data. When used in &lt;code&gt;match&lt;/code&gt; expressions, Rust ensures your patterns cover every possible value, or your program won&amp;rsquo;t compile. Patterns in &lt;code&gt;let&lt;/code&gt; statements and function parameters make those constructs more useful, enabling the destructuring of values into smaller parts at the same time as assigning to variables. We can create simple or complex patterns to suit our needs.</source>
          <target state="translated">Rust의 패턴은 서로 다른 종류의 데이터를 구별하는 데 도움이된다는 점에서 매우 유용합니다. &lt;code&gt;match&lt;/code&gt; 표현식에 사용될 때 Rust는 패턴이 가능한 모든 값을 커버하도록 보장하거나 프로그램이 컴파일되지 않도록합니다. &lt;code&gt;let&lt;/code&gt; 문 및 함수 매개 변수의 패턴은 이러한 구문을보다 유용하게 만들어 변수에 할당하는 것과 동시에 값을 더 작은 부분으로 구성 해제 할 수 있습니다. 필요에 따라 단순하거나 복잡한 패턴을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dce982e836868a2e5286452911eb980f53708aba" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we&amp;rsquo;ll make our own version of the classic command line tool &lt;code&gt;grep&lt;/code&gt; (&lt;strong&gt;g&lt;/strong&gt;lobally search a &lt;strong&gt;r&lt;/strong&gt;egular &lt;strong&gt;e&lt;/strong&gt;xpression and &lt;strong&gt;p&lt;/strong&gt;rint). In the simplest use case, &lt;code&gt;grep&lt;/code&gt; searches a specified file for a specified string. To do so, &lt;code&gt;grep&lt;/code&gt; takes as its arguments a filename and a string. Then it reads the file, finds lines in that file that contain the string argument, and prints those lines.</source>
          <target state="translated">녹의 속도, 안전, 하나의 바이너리 출력 및 크로스 플랫폼 지원은 그래서 우리의 프로젝트를 위해, 우리는 고전적인 명령 행 도구의 우리의 자신의 버전을 만들 수 있습니다, 그것은 명령 줄 도구를 만들기위한 이상적인 언어로 만들어 &lt;code&gt;grep&lt;/code&gt; ( &lt;strong&gt;g는&lt;/strong&gt; lobally 검색 &lt;strong&gt;R을&lt;/strong&gt; egular &lt;strong&gt;전자&lt;/strong&gt; xpression 및 &lt;strong&gt;P의&lt;/strong&gt; RINT). 가장 간단한 사용 사례에서 &lt;code&gt;grep&lt;/code&gt; 은 지정된 파일에서 지정된 문자열을 검색합니다. 이를 위해 &lt;code&gt;grep&lt;/code&gt; 은 파일 이름과 문자열을 인수로 사용합니다. 그런 다음 파일을 읽고 해당 파일에서 문자열 인수가 포함 된 행을 찾아 해당 행을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="c6ca1c192ffb4864e88d3222cca77235e6772b0f" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s standard library also includes a number of other string types, such as &lt;code&gt;OsString&lt;/code&gt;, &lt;code&gt;OsStr&lt;/code&gt;, &lt;code&gt;CString&lt;/code&gt;, and &lt;code&gt;CStr&lt;/code&gt;. Library crates can provide even more options for storing string data. See how those names all end in &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Str&lt;/code&gt;? They refer to owned and borrowed variants, just like the &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; types you&amp;rsquo;ve seen previously. These string types can store text in different encodings or be represented in memory in a different way, for example. We won&amp;rsquo;t discuss these other string types in this chapter; see their API documentation for more about how to use them and when each is appropriate.</source>
          <target state="translated">Rust의 표준 라이브러리에는 &lt;code&gt;OsString&lt;/code&gt; , &lt;code&gt;OsStr&lt;/code&gt; , &lt;code&gt;CString&lt;/code&gt; 및 &lt;code&gt;CStr&lt;/code&gt; 과 같은 여러 다른 문자열 유형도 포함됩니다 . 라이브러리 상자는 문자열 데이터를 저장하기위한 훨씬 더 많은 옵션을 제공 할 수 있습니다. 이러한 이름이 모두 &lt;code&gt;String&lt;/code&gt; 또는 &lt;code&gt;Str&lt;/code&gt; 로 끝나는 방법을 참조하십시오 . 이전에 본 &lt;code&gt;String&lt;/code&gt; 및 &lt;code&gt;str&lt;/code&gt; 유형 과 마찬가지로 소유 및 빌린 변형을 나타냅니다. 이러한 문자열 유형은 예를 들어 텍스트를 다른 인코딩으로 저장하거나 메모리에 다른 방식으로 표시 할 수 있습니다. 이 장에서는 이러한 다른 문자열 유형에 대해서는 다루지 않습니다. 사용 방법 및 적절한시기에 대한 자세한 내용은 API 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aa9ff7a849c1640cd4cc865fda33cc9c81cac848" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s standard library includes a number of very useful data structures called &lt;em&gt;collections&lt;/em&gt;. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you&amp;rsquo;ll develop over time. In this chapter, we&amp;rsquo;ll discuss three collections that are used very often in Rust programs:</source>
          <target state="translated">Rust의 표준 라이브러리에는 &lt;em&gt;collections&lt;/em&gt; 라는 매우 유용한 데이터 구조가 많이 &lt;em&gt;있습니다&lt;/em&gt; . 대부분의 다른 데이터 형식은 하나의 특정 값을 나타내지 만 컬렉션에는 여러 값이 포함될 수 있습니다. 내장 배열 및 튜플 형식과 달리 이러한 컬렉션이 가리키는 데이터는 힙에 저장되므로 컴파일시 데이터 양을 알 필요가 없으며 프로그램이 실행될 때 커지거나 줄어들 수 있습니다. 각 컬렉션에는 기능과 비용이 다르므로 현재 상황에 적합한 컬렉션을 선택하는 것은 시간이 지남에 따라 개발할 기술입니다. 이 장에서는 Rust 프로그램에서 매우 자주 사용되는 세 가지 컬렉션에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="98e2048971bf413ef392b0aef43b635b310936b3" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s testing features provide a way to specify how code should function to ensure it continues to work as you expect, even as you make changes. Unit tests exercise different parts of a library separately and can test private implementation details. Integration tests check that many parts of the library work together correctly, and they use the library&amp;rsquo;s public API to test the code in the same way external code will use it. Even though Rust&amp;rsquo;s type system and ownership rules help prevent some kinds of bugs, tests are still important to reduce logic bugs having to do with how your code is expected to behave.</source>
          <target state="translated">Rust의 테스트 기능을 사용하면 코드를 변경하더라도 예상대로 계속 작동하도록 코드의 작동 방식을 지정할 수 있습니다. 단위 테스트는 라이브러리의 다른 부분을 개별적으로 실행하며 개인 구현 세부 사항을 테스트 할 수 있습니다. 통합 테스트는 라이브러리의 많은 부분이 올바르게 함께 작동하는지 확인하고 외부 코드와 동일한 방식으로 라이브러리의 공용 API를 사용하여 코드를 테스트합니다. Rust의 유형 시스템 및 소유권 규칙이 일부 종류의 버그를 방지하는 데 도움이되지만 코드의 동작 방식과 관련된 논리 버그를 줄이려면 테스트가 여전히 중요합니다.</target>
        </trans-unit>
        <trans-unit id="acb8e83983bd289d54829daf197d511dbb760356" translate="yes" xml:space="preserve">
          <source>Rust's &quot;try catch&quot; construct which invokes the function pointer &lt;code&gt;f&lt;/code&gt; with the data pointer &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">데이터 포인터 &lt;code&gt;data&lt;/code&gt; 로 함수 포인터 &lt;code&gt;f&lt;/code&gt; 를 호출하는 Rust의 &quot;try catch&quot;구문 .</target>
        </trans-unit>
        <trans-unit id="560fa4c9da40b172f0797c154c93d28849453df3" translate="yes" xml:space="preserve">
          <source>Rust's &quot;try catch&quot; construct which invokes the function pointer &lt;code&gt;try_fn&lt;/code&gt; with the data pointer &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">데이터 포인터 &lt;code&gt;data&lt;/code&gt; 와 함께 함수 포인터 &lt;code&gt;try_fn&lt;/code&gt; 을 호출하는 Rust의 &quot;try catch&quot;구조 .</target>
        </trans-unit>
        <trans-unit id="8dbe1f8233c456628e66e6df4dd93fab7b6e6c9e" translate="yes" xml:space="preserve">
          <source>Rust's &lt;code&gt;for&lt;/code&gt; loop syntax is actually sugar for iterators. Here's a basic example of &lt;code&gt;for&lt;/code&gt;:</source>
          <target state="translated">Rust의 &lt;code&gt;for&lt;/code&gt; 루프 구문은 실제로 반복자의 설탕입니다. 다음의 기본 예제 &lt;code&gt;for&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c2b907ea71a52b75f8ec4f141b77e18171f372ef" translate="yes" xml:space="preserve">
          <source>Rust's collections can be grouped into four major categories:</source>
          <target state="translated">Rust의 컬렉션은 다음 4 가지 주요 범주로 분류 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3518a40c6313dc64fda74604f5d48c205fe14878" translate="yes" xml:space="preserve">
          <source>Rust's memory orderings are &lt;a href=&quot;https://en.cppreference.com/w/cpp/atomic/memory_order&quot;&gt;the same as those of C++20&lt;/a&gt;.</source>
          <target state="translated">Rust의 메모리 순서는 &lt;a href=&quot;https://en.cppreference.com/w/cpp/atomic/memory_order&quot;&gt;C ++ 20의 것과 동일&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="66232bbafcf2029b1b02f4fd6262d62c2d92282a" translate="yes" xml:space="preserve">
          <source>Rust's memory orderings are &lt;a href=&quot;https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations&quot;&gt;the same as LLVM's&lt;/a&gt;.</source>
          <target state="translated">Rust의 메모리 순서는 &lt;a href=&quot;https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations&quot;&gt;LLVM과 동일&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="a7ab800f18895158ef3a0e63fde445a7b639f33a" translate="yes" xml:space="preserve">
          <source>Rust's name resolution operates on a global hierarchy of namespaces. Each level in the hierarchy can be thought of as some item. The items are one of those mentioned above, but also include external crates. Declaring or defining a new module can be thought of as inserting a new tree into the hierarchy at the location of the definition.</source>
          <target state="translated">Rust의 이름 확인은 네임 스페이스의 전역 계층에서 작동합니다. 계층 구조의 각 수준은 일부 항목으로 생각할 수 있습니다. 아이템은 위에서 언급 한 아이템 중 하나이지만 외부 상자도 포함됩니다. 새 모듈을 선언하거나 정의하는 것은 정의 위치의 계층에 새 트리를 삽입하는 것으로 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="319f62fa60443741e4ab911db14f80e727aef59a" translate="yes" xml:space="preserve">
          <source>Rust's pointer types must always point to a valid location; there are no &quot;null&quot; pointers. Instead, Rust has &lt;em&gt;optional&lt;/em&gt; pointers, like the optional owned box, &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Rust의 포인터 유형은 항상 유효한 위치를 가리켜 야합니다. &quot;널&quot;포인터가 없습니다. 대신, 녹이 &lt;em&gt;선택 사항&lt;/em&gt; (옵션) 소유의 상자처럼 포인터 &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f768c498112456486bf63d48fcb7291968abac38" translate="yes" xml:space="preserve">
          <source>Rust's pointer types must always point to a valid location; there are no &quot;null&quot; references. Instead, Rust has &lt;em&gt;optional&lt;/em&gt; pointers, like the optional owned box, &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Rust의 포인터 유형은 항상 유효한 위치를 가리켜 야합니다. &quot;null&quot;참조가 없습니다. 대신, 녹이 &lt;em&gt;선택 사항&lt;/em&gt; (옵션) 소유의 상자처럼 포인터 &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="8d6e2726524f65a330ec27f3f5f1fe94fb053aa0" translate="yes" xml:space="preserve">
          <source>Rust's semantics obey a &lt;em&gt;phase distinction&lt;/em&gt; between compile-time and run-time.&lt;sup&gt;&lt;a href=&quot;#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Semantic rules that have a &lt;em&gt;static interpretation&lt;/em&gt; govern the success or failure of compilation, while semantic rules that have a &lt;em&gt;dynamic interpretation&lt;/em&gt; govern the behavior of the program at run-time.</source>
          <target state="translated">Rust의 의미론 은 컴파일 타임과 런타임 사이 의 &lt;em&gt;단계적 차이&lt;/em&gt; 를 따릅니다 . &lt;sup&gt;&lt;a href=&quot;#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이 시맨틱 규칙 &lt;em&gt;정적 해석은&lt;/em&gt; 이 의미 규칙 동안, 성공 또는 컴파일의 실패를 제어하는 &lt;em&gt;동적 해석은&lt;/em&gt; 실행시 프로그램의 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="a2aff2ec84d10e9cd75ff34f3e37a6ab05271846" translate="yes" xml:space="preserve">
          <source>Rust's semantics obey a &lt;em&gt;phase distinction&lt;/em&gt; between compile-time and run-time.&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Semantic rules that have a &lt;em&gt;static interpretation&lt;/em&gt; govern the success or failure of compilation, while semantic rules that have a &lt;em&gt;dynamic interpretation&lt;/em&gt; govern the behavior of the program at run-time.</source>
          <target state="translated">Rust의 시맨틱 은 컴파일 타임과 런타임 간의 &lt;em&gt;위상 구분을&lt;/em&gt; 따릅니다 . &lt;sup&gt;&lt;a href=&quot;crates-and-source-files#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이 시맨틱 규칙 &lt;em&gt;정적 해석은&lt;/em&gt; 이 의미 규칙 동안, 성공 또는 컴파일의 실패를 제어하는 &lt;em&gt;동적 해석은&lt;/em&gt; 실행시 프로그램의 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="54f00e0c31d6eace7a6ea3416d8819187abd4302" translate="yes" xml:space="preserve">
          <source>Rust's standard collection library provides efficient implementations of the most common general purpose programming data structures. By using the standard implementations, it should be possible for two libraries to communicate without significant data conversion.</source>
          <target state="translated">Rust의 표준 콜렉션 라이브러리는 가장 일반적인 범용 프로그래밍 데이터 구조를 효율적으로 구현합니다. 표준 구현을 사용하면 두 개의 라이브러리가 상당한 데이터 변환없이 통신 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="ab17aa57ae62fb04a69af0b7a8f3f507e272a3c7" translate="yes" xml:space="preserve">
          <source>Rust's type system is a conservative approximation of the dynamic safety requirements, so in some cases there is a performance cost to using safe code. For example, a doubly-linked list is not a tree structure and can only be represented with reference-counted pointers in safe code. By using &lt;code&gt;unsafe&lt;/code&gt; blocks to represent the reverse links as raw pointers, it can be implemented with only boxes.</source>
          <target state="translated">Rust 타입 시스템은 동적 안전 요구 사항을 보수적으로 근사하기 때문에 경우에 따라 안전 코드를 사용하는 데 성능 비용이 발생합니다. 예를 들어 이중 연결 목록은 트리 구조가 아니며 안전한 코드에서 참조 횟수 포인터로만 나타낼 수 있습니다. &lt;code&gt;unsafe&lt;/code&gt; 블록을 사용 하여 역방향 링크를 원시 포인터로 나타내면 상자 만 사용하여 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95599064eb377b63b994bbd7ad3f097bbf8eb92c" translate="yes" xml:space="preserve">
          <source>Rustfmt ensures a consistent coding style across developers.</source>
          <target state="translated">Rustfmt는 개발자간에 일관된 코딩 스타일을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="7b00c77b80323c6107761b3476057383a88402b5" translate="yes" xml:space="preserve">
          <source>Rustup and the Role of Rust Nightly</source>
          <target state="translated">Rustup과 Rust Nightly의 역할</target>
        </trans-unit>
        <trans-unit id="baf8407c83848beb2a63399a672432e0718f8d96" translate="yes" xml:space="preserve">
          <source>Rustup makes it easy to change between different release channels of Rust, on a global or per-project basis. By default, you&amp;rsquo;ll have stable Rust installed. To install nightly, for example:</source>
          <target state="translated">Rustup을 사용하면 전 세계 또는 프로젝트별로 Rust의 서로 다른 릴리스 채널간에 쉽게 변경할 수 있습니다. 기본적으로 안정적인 Rust가 설치되어 있습니다. 야간에 설치하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="d6a79be61e4215763db3baff3a7d68db38c8b2c3" translate="yes" xml:space="preserve">
          <source>RwLock</source>
          <target state="translated">RwLock</target>
        </trans-unit>
        <trans-unit id="3365fb12186db42cf39d5ce267adfc330507d4c2" translate="yes" xml:space="preserve">
          <source>RwLock::borrow</source>
          <target state="translated">RwLock::borrow</target>
        </trans-unit>
        <trans-unit id="bb95ca5081bbeb594b1afea186814e0d4f3253b7" translate="yes" xml:space="preserve">
          <source>RwLock::borrow_mut</source>
          <target state="translated">RwLock::borrow_mut</target>
        </trans-unit>
        <trans-unit id="032d2409c530ffd60c7c9c9f5aca0a52823fe35c" translate="yes" xml:space="preserve">
          <source>RwLock::default</source>
          <target state="translated">RwLock::default</target>
        </trans-unit>
        <trans-unit id="9f88cff40297be1aa94fa7e0823c98c7da6761a9" translate="yes" xml:space="preserve">
          <source>RwLock::drop</source>
          <target state="translated">RwLock::drop</target>
        </trans-unit>
        <trans-unit id="6eb75710cfca86f6ddcbd36cc0b480fab516efae" translate="yes" xml:space="preserve">
          <source>RwLock::fmt</source>
          <target state="translated">RwLock::fmt</target>
        </trans-unit>
        <trans-unit id="c39d1dd0d486dff9ebac4064c7f836672e22c020" translate="yes" xml:space="preserve">
          <source>RwLock::from</source>
          <target state="translated">RwLock::from</target>
        </trans-unit>
        <trans-unit id="f7459df51d92ce400094c19b830db9351fd1b575" translate="yes" xml:space="preserve">
          <source>RwLock::get_mut</source>
          <target state="translated">RwLock::get_mut</target>
        </trans-unit>
        <trans-unit id="dd170c316defa574a85c99622fe930a63bdba387" translate="yes" xml:space="preserve">
          <source>RwLock::into</source>
          <target state="translated">RwLock::into</target>
        </trans-unit>
        <trans-unit id="eb5fe8aa0193d0a1e704de4241f5c0a52119717b" translate="yes" xml:space="preserve">
          <source>RwLock::into_inner</source>
          <target state="translated">RwLock::into_inner</target>
        </trans-unit>
        <trans-unit id="597790ef6ee26d29fd19484b562c98ca7fe22839" translate="yes" xml:space="preserve">
          <source>RwLock::is_poisoned</source>
          <target state="translated">RwLock::is_poisoned</target>
        </trans-unit>
        <trans-unit id="b30631b8ae7fdfb2874a8151b77ee5739805b2a2" translate="yes" xml:space="preserve">
          <source>RwLock::new</source>
          <target state="translated">RwLock::new</target>
        </trans-unit>
        <trans-unit id="4524aac3589f9c6e93e60d12fae19353e0443eda" translate="yes" xml:space="preserve">
          <source>RwLock::read</source>
          <target state="translated">RwLock::read</target>
        </trans-unit>
        <trans-unit id="10894ce864637dc75066a6e702be6357e58a0ade" translate="yes" xml:space="preserve">
          <source>RwLock::try_from</source>
          <target state="translated">RwLock::try_from</target>
        </trans-unit>
        <trans-unit id="3c79ebfc0ddf697963209773c64e4debde0a15e5" translate="yes" xml:space="preserve">
          <source>RwLock::try_into</source>
          <target state="translated">RwLock::try_into</target>
        </trans-unit>
        <trans-unit id="27f9f9706495b3fa597d7283c5f6d5aa96cad168" translate="yes" xml:space="preserve">
          <source>RwLock::try_read</source>
          <target state="translated">RwLock::try_read</target>
        </trans-unit>
        <trans-unit id="2cc72c47f44da367af1f6c95ad58fcbe7aabe9f8" translate="yes" xml:space="preserve">
          <source>RwLock::try_write</source>
          <target state="translated">RwLock::try_write</target>
        </trans-unit>
        <trans-unit id="51d4ce46fd209b39c881192d2c4a306b0c6af7e1" translate="yes" xml:space="preserve">
          <source>RwLock::type_id</source>
          <target state="translated">RwLock::type_id</target>
        </trans-unit>
        <trans-unit id="75bc0e47bce9b9726f4994afdff85b10cc3177b6" translate="yes" xml:space="preserve">
          <source>RwLock::write</source>
          <target state="translated">RwLock::write</target>
        </trans-unit>
        <trans-unit id="1eaef0c1b72634db80d0da04d80181a719336691" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard</source>
          <target state="translated">RwLockReadGuard</target>
        </trans-unit>
        <trans-unit id="0a54fda840526b11982d5a172884305a72f1ca53" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::borrow</source>
          <target state="translated">RwLockReadGuard::borrow</target>
        </trans-unit>
        <trans-unit id="c10f603294158a203e3030a16eeb77610e66012d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::borrow_mut</source>
          <target state="translated">RwLockReadGuard::borrow_mut</target>
        </trans-unit>
        <trans-unit id="480c8174e6d098df5d439363919b8fc988424a6a" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::deref</source>
          <target state="translated">RwLockReadGuard::deref</target>
        </trans-unit>
        <trans-unit id="96929e2bf6e62cb9881175383a8c72f54d7b407d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::drop</source>
          <target state="translated">RwLockReadGuard::drop</target>
        </trans-unit>
        <trans-unit id="0630cc72c5534d080bc3a4d09dfe50c25c31af45" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::fmt</source>
          <target state="translated">RwLockReadGuard::fmt</target>
        </trans-unit>
        <trans-unit id="71fd112b2871ddf5eac0a9570c1f499e0f71e75c" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::from</source>
          <target state="translated">RwLockReadGuard::from</target>
        </trans-unit>
        <trans-unit id="9c60a6eeb95abf755a1eead5ad53991ff0cb74d1" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::into</source>
          <target state="translated">RwLockReadGuard::into</target>
        </trans-unit>
        <trans-unit id="74ee51ebc9a6d12c966b59ef0ecb6343b0e0c6eb" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::to_string</source>
          <target state="translated">RwLockReadGuard::to_string</target>
        </trans-unit>
        <trans-unit id="0ee2730589747bc1dcb5c453d764648feefc433d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::try_from</source>
          <target state="translated">RwLockReadGuard::try_from</target>
        </trans-unit>
        <trans-unit id="2f498acbf30669bd7f472bd5abfc012da4c81500" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::try_into</source>
          <target state="translated">RwLockReadGuard::try_into</target>
        </trans-unit>
        <trans-unit id="a25712e2a0bf4758e52e5eff9b33eef96baad24b" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::type_id</source>
          <target state="translated">RwLockReadGuard::type_id</target>
        </trans-unit>
        <trans-unit id="9646cc55e4cc9faafa8ece87c06c08f6b888f1fd" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard</source>
          <target state="translated">RwLockWriteGuard</target>
        </trans-unit>
        <trans-unit id="baedc99a4037b217d239bb9bc2bebea8bc2c7b05" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::borrow</source>
          <target state="translated">RwLockWriteGuard::borrow</target>
        </trans-unit>
        <trans-unit id="0c8f19451559b2d3e5a6164478662b652678e260" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::borrow_mut</source>
          <target state="translated">RwLockWriteGuard::borrow_mut</target>
        </trans-unit>
        <trans-unit id="630e28276d78c2514d28310665f4fbd77b887ea3" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::deref</source>
          <target state="translated">RwLockWriteGuard::deref</target>
        </trans-unit>
        <trans-unit id="39d9907938496daf9bc33b22be826e596782bce1" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::deref_mut</source>
          <target state="translated">RwLockWriteGuard::deref_mut</target>
        </trans-unit>
        <trans-unit id="79f1ca0d2c6b0fad41ae7415d45c5eb9a7acfbb9" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::drop</source>
          <target state="translated">RwLockWriteGuard::drop</target>
        </trans-unit>
        <trans-unit id="fde0bc83a3fb9bf572594f7ed1454a2e150083e6" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::fmt</source>
          <target state="translated">RwLockWriteGuard::fmt</target>
        </trans-unit>
        <trans-unit id="2c0a3448edb216dbb966834cc4ad56db6eb11560" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::from</source>
          <target state="translated">RwLockWriteGuard::from</target>
        </trans-unit>
        <trans-unit id="3193eae71ac8c5c78d9a237c77ce0e37b3805579" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::into</source>
          <target state="translated">RwLockWriteGuard::into</target>
        </trans-unit>
        <trans-unit id="8c6e6d90fe4c368b63537f92416cb8aaff689f72" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::to_string</source>
          <target state="translated">RwLockWriteGuard::to_string</target>
        </trans-unit>
        <trans-unit id="5f6159162b69b6697a022b81d0b5f2b64a1c0cb9" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::try_from</source>
          <target state="translated">RwLockWriteGuard::try_from</target>
        </trans-unit>
        <trans-unit id="6959809c31f98cada5a72df18f7f305cf5bec8cb" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::try_into</source>
          <target state="translated">RwLockWriteGuard::try_into</target>
        </trans-unit>
        <trans-unit id="701e18958d5f1087e9d3ad9d6157e1b774a80327" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::type_id</source>
          <target state="translated">RwLockWriteGuard::type_id</target>
        </trans-unit>
        <trans-unit id="e9366a47f607b6f46c1a48c0cd690894f0ebbadb" translate="yes" xml:space="preserve">
          <source>SGX</source>
          <target state="translated">SGX</target>
        </trans-unit>
        <trans-unit id="725c79ab8f9df970d196bb5d5f72df4504fce381" translate="yes" xml:space="preserve">
          <source>SHEBANG : &lt;code&gt;#!&lt;/code&gt; ~&lt;code&gt;\n&lt;/code&gt;&lt;sup&gt;+&lt;/sup&gt;&lt;a href=&quot;#shebang&quot;&gt;&amp;dagger;&lt;/a&gt;</source>
          <target state="translated">셰뱅 : &lt;code&gt;#!&lt;/code&gt; ~ &lt;code&gt;\n&lt;/code&gt; &lt;sup&gt;+ &lt;/sup&gt;&lt;a href=&quot;#shebang&quot;&gt;&amp;dagger;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a6ea37b53bc27138b60916fd0439bdf3ab78ec1" translate="yes" xml:space="preserve">
          <source>SHEBANG : &lt;code&gt;#!&lt;/code&gt; ~[&lt;code&gt;[&lt;/code&gt;&lt;code&gt;\n&lt;/code&gt;] ~&lt;code&gt;\n&lt;/code&gt;&lt;sup&gt;*&lt;/sup&gt;</source>
          <target state="translated">셰방 : &lt;code&gt;#!&lt;/code&gt; ~ [ &lt;code&gt;[&lt;/code&gt; &lt;code&gt;\n&lt;/code&gt; ] ~ &lt;code&gt;\n&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3c4b26856c9be2e3649537787b8c0e28472a0786" translate="yes" xml:space="preserve">
          <source>SHEBANG&lt;sup&gt;?&lt;/sup&gt;</source>
          <target state="translated">SHEBANG&lt;sup&gt;?&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6de691384f5963f51651150662473268acfe159d" translate="yes" xml:space="preserve">
          <source>SIMD</source>
          <target state="translated">SIMD</target>
        </trans-unit>
        <trans-unit id="22eeb276e780b6ff6b8c438850d1f60bc7878e9e" translate="yes" xml:space="preserve">
          <source>SML, OCaml: algebraic data types, pattern matching, type inference, semicolon statement separation</source>
          <target state="translated">SML, OCaml : 대수 데이터 형식, 패턴 일치, 형식 유추, 세미콜론 문 구분</target>
        </trans-unit>
        <trans-unit id="1de58b523ce999eba59e4751ca7a7e72e85af4e7" translate="yes" xml:space="preserve">
          <source>SOCKET</source>
          <target state="translated">SOCKET</target>
        </trans-unit>
        <trans-unit id="f648fd3aed746e2278113a2f8a9ee9de6ce669d2" translate="yes" xml:space="preserve">
          <source>SQRT_2</source>
          <target state="translated">SQRT_2</target>
        </trans-unit>
        <trans-unit id="e417c0c14e2d13af7eccbb6839d6c2e941c30381" translate="yes" xml:space="preserve">
          <source>STRING_CONTINUE :</source>
          <target state="translated">STRING_CONTINUE :</target>
        </trans-unit>
        <trans-unit id="920882e835fec2971971f3c5aa2aa60559e73a5f" translate="yes" xml:space="preserve">
          <source>STRING_LITERAL :</source>
          <target state="translated">STRING_LITERAL :</target>
        </trans-unit>
        <trans-unit id="b78310097f7848cdd92f6380a2ed0c9ed3dd8c55" translate="yes" xml:space="preserve">
          <source>Safe traits should not have unsafe implementations, therefore marking an implementation for a safe trait unsafe will cause a compiler error. Removing the unsafe marker on the trait noted in the error will resolve this problem.</source>
          <target state="translated">안전한 특성에는 안전하지 않은 구현이 없어야합니다. 따라서 안전한 특성의 구현을 안전하지 않은 것으로 표시하면 컴파일러 오류가 발생합니다. 오류에 표시된 특성에서 안전하지 않은 마커를 제거하면이 문제가 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="6758124b257320aba8b357219dd55b902618ce28" translate="yes" xml:space="preserve">
          <source>Safe traits should not have unsafe implementations, therefore marking an implementation for a safe trait unsafe will cause a compiler error. Removing the unsafe marker on the trait noted in the error will resolve this problem:</source>
          <target state="translated">안전한 특성에는 안전하지 않은 구현이 있어서는 안되므로 안전 특성에 대한 구현을 안전하지 않은 것으로 표시하면 컴파일러 오류가 발생합니다. 오류에 표시된 특성에서 안전하지 않은 마커를 제거하면이 문제가 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="3638107f2c733ebae270af45af8092f6fb19ef0a" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_div&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_div&quot;&gt;&lt;code&gt;u32::checked_div&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이 내장 함수에 대한 안전한 래퍼는 &lt;code&gt;checked_div&lt;/code&gt; 메서드 를 통해 정수 프리미티브에서 사용할 수 있습니다 . 예 : &lt;a href=&quot;../primitive.u32#method.checked_div&quot;&gt; &lt;code&gt;u32::checked_div&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dcbced17202ea49cef90383c30f1c92012e82c83" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_rem&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_rem&quot;&gt;&lt;code&gt;u32::checked_rem&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이 내장 함수에 대한 안전한 래퍼는 &lt;code&gt;checked_rem&lt;/code&gt; 메서드 를 통해 정수 프리미티브에서 사용할 수 있습니다 . 예 : &lt;a href=&quot;../primitive.u32#method.checked_rem&quot;&gt; &lt;code&gt;u32::checked_rem&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1add6a43fe6ea1b39bbf1a37130e2c55f3cd481c" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_shl&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_shl&quot;&gt;&lt;code&gt;u32::checked_shl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이 내장 함수에 대한 안전한 래퍼는 &lt;code&gt;checked_shl&lt;/code&gt; 메서드 를 통해 정수 프리미티브에서 사용할 수 있습니다 . 예 : &lt;a href=&quot;../primitive.u32#method.checked_shl&quot;&gt; &lt;code&gt;u32::checked_shl&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d924e081d2fe23775f79251bd6628bfebb9f15f" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_shr&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_shr&quot;&gt;&lt;code&gt;u32::checked_shr&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이 내장 함수에 대한 안전한 래퍼는 &lt;code&gt;checked_shr&lt;/code&gt; 메서드 를 통해 정수 프리미티브에서 사용할 수 있습니다 . 예 : &lt;a href=&quot;../primitive.u32#method.checked_shr&quot;&gt; &lt;code&gt;u32::checked_shr&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db6e7e410412f58574f766c3911f49badd42beca" translate="yes" xml:space="preserve">
          <source>Safety</source>
          <target state="translated">Safety</target>
        </trans-unit>
        <trans-unit id="c73f4568bd312963e8efa5d1ebe757bec11ce99e" translate="yes" xml:space="preserve">
          <source>Safety is guaranteed by requiring a mutable reference.</source>
          <target state="translated">가변 참조를 요구함으로써 안전성이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="d6527d5e90816a6b0e07f8bdbc358e99dffa1bdc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;format_args&lt;/code&gt;, but adds a newline in the end.</source>
          <target state="translated">&lt;code&gt;format_args&lt;/code&gt; 와 동일 하지만 끝에 개행을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="c5b8fb7a6bc8b245138411045130aa3d0bdb87c5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt;, but without allocating and copying temporaries.</source>
          <target state="translated">동일 &lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt; , 그러나 할당하고 임시 변수를 복사하지 않고.</target>
        </trans-unit>
        <trans-unit id="56bb3d7f43f257954be309e5e815a47ced6af0fb" translate="yes" xml:space="preserve">
          <source>Saturate at the value's minimum or maximum values with &lt;code&gt;saturating_*&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;saturating_*&lt;/code&gt; 메서드 를 사용하여 값의 최소 또는 최대 값으로 포화</target>
        </trans-unit>
        <trans-unit id="59d1427a10dfc5dee5a89b2eda66ab1e83377430" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; addition. Computes &lt;code&gt;self + other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt;&lt;code&gt;Duration::MAX&lt;/code&gt;&lt;/a&gt; if overflow occurred.</source>
          <target state="translated">포화 &lt;code&gt;Duration&lt;/code&gt; 추가. &lt;code&gt;self + other&lt;/code&gt; 계산 하고 오버플로가 발생하면 &lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt; &lt;code&gt;Duration::MAX&lt;/code&gt; &lt;/a&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c2be18c955cc49c826816b30bcfc290c616c5960" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; multiplication. Computes &lt;code&gt;self * other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt;&lt;code&gt;Duration::MAX&lt;/code&gt;&lt;/a&gt; if overflow occurred.</source>
          <target state="translated">포화 &lt;code&gt;Duration&lt;/code&gt; 곱셈. &lt;code&gt;self * other&lt;/code&gt; 계산 하고 오버플로가 발생하면 &lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt; &lt;code&gt;Duration::MAX&lt;/code&gt; &lt;/a&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b6bf815786dcb43a5074e0c164ed807d841df425" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; subtraction. Computes &lt;code&gt;self - other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.MIN&quot;&gt;&lt;code&gt;Duration::MIN&lt;/code&gt;&lt;/a&gt; if the result would be negative or if overflow occurred.</source>
          <target state="translated">포화 &lt;code&gt;Duration&lt;/code&gt; 빼기. 로 계산 된 &lt;code&gt;self - other&lt;/code&gt; , 반환 &lt;a href=&quot;struct.duration#associatedconstant.MIN&quot;&gt; &lt;code&gt;Duration::MIN&lt;/code&gt; &lt;/a&gt; 결과는 음수가 될 것인지 또는 오버 플로우가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8138311aec0a35834542daea416fa9678b0d1cab" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; subtraction. Computes &lt;code&gt;self - other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.ZERO&quot;&gt;&lt;code&gt;Duration::ZERO&lt;/code&gt;&lt;/a&gt; if the result would be negative or if overflow occurred.</source>
          <target state="translated">포화 &lt;code&gt;Duration&lt;/code&gt; 빼기. 로 계산 된 &lt;code&gt;self - other&lt;/code&gt; , 반환 &lt;a href=&quot;struct.duration#associatedconstant.ZERO&quot;&gt; &lt;code&gt;Duration::ZERO&lt;/code&gt; &lt;/a&gt; 결과는 음수가 될 것인지 또는 오버 플로우가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c03bf99c5e921d67f76a77fc0f90dc0a457c4266" translate="yes" xml:space="preserve">
          <source>Saturating absolute value. Computes &lt;code&gt;self.abs()&lt;/code&gt;, returning &lt;code&gt;MAX&lt;/code&gt; if &lt;code&gt;self == MIN&lt;/code&gt; instead of overflowing.</source>
          <target state="translated">포화 절대 값. &lt;code&gt;self.abs()&lt;/code&gt; 계산 하여 오버플로 대신 &lt;code&gt;self == MIN&lt;/code&gt; 경우 &lt;code&gt;MAX&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="109dd1091641bc8ecebd701747ce54878af442b0" translate="yes" xml:space="preserve">
          <source>Saturating integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">포화 정수 추가. &lt;code&gt;self + rhs&lt;/code&gt; 계산 하여 넘치지 않고 숫자 범위에서 포화 상태로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="57c9631709dc7db15f7aaacb3d3f0fcd0d500a59" translate="yes" xml:space="preserve">
          <source>Saturating integer exponentiation. Computes &lt;code&gt;self.pow(exp)&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">포화 지수 지수. &lt;code&gt;self.pow(exp)&lt;/code&gt; 계산 하여 넘치지 않고 숫자 범위에서 채도를 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="6a26ed5271afaadaf17f7bb99258598a883dbde5" translate="yes" xml:space="preserve">
          <source>Saturating integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">포화 정수 곱셈. &lt;code&gt;self * rhs&lt;/code&gt; 계산 하여 넘치지 않고 숫자 범위에서 채도를 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="4e9045498e8f92673c01343fe3158929d9ad0d53" translate="yes" xml:space="preserve">
          <source>Saturating integer negation. Computes &lt;code&gt;-self&lt;/code&gt;, returning &lt;code&gt;MAX&lt;/code&gt; if &lt;code&gt;self == MIN&lt;/code&gt; instead of overflowing.</source>
          <target state="translated">포화 정수 부정. &lt;code&gt;-self&lt;/code&gt; 를 계산 하고 넘치지 않고 &lt;code&gt;self == MIN&lt;/code&gt; 이면 &lt;code&gt;MAX&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="bba0f92a2b8115b3e1c85e5395b32ac513ceaf4c" translate="yes" xml:space="preserve">
          <source>Saturating integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">포화 정수 빼기. 오버플로 대신 숫자 경계에서 포화되는 &lt;code&gt;self - rhs&lt;/code&gt; 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="94d7918aa6bb0576d26a84c1d4e645527e1b43b1" translate="yes" xml:space="preserve">
          <source>Save and run the program using &lt;code&gt;cargo run&lt;/code&gt;. You should receive an error message, as shown in this output:</source>
          <target state="translated">&lt;code&gt;cargo run&lt;/code&gt; 을 사용하여 프로그램을 저장하고 실행하십시오 . 이 출력에 표시된대로 오류 메시지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="f699547c1a083d346822dc0ad796b31a9ab59d87" translate="yes" xml:space="preserve">
          <source>Save the file and go back to your terminal window. On Linux or macOS, enter the following commands to compile and run the file:</source>
          <target state="translated">파일을 저장하고 터미널 창으로 돌아갑니다. Linux 또는 macOS에서 다음 명령을 입력하여 파일을 컴파일하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a78cbddc900d04991e91d2fb8a0c3d608d5fa9d3" translate="yes" xml:space="preserve">
          <source>Saving the Argument Values in Variables</source>
          <target state="translated">변수에 인수 값 저장</target>
        </trans-unit>
        <trans-unit id="4aa91b74ad835b979f38d439d43f44e254945a4d" translate="yes" xml:space="preserve">
          <source>Say we have a trait &lt;code&gt;Foo&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Foo&lt;/code&gt; 특성이 있다고 가정 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="9ce8f737a0ce307980f869c94d0a5ceba9f4cfab" translate="yes" xml:space="preserve">
          <source>Scalar Types</source>
          <target state="translated">스칼라 유형</target>
        </trans-unit>
        <trans-unit id="28cba55d2aadf568463a9e7e645f8c7b1eed5e8b" translate="yes" xml:space="preserve">
          <source>Scan</source>
          <target state="translated">Scan</target>
        </trans-unit>
        <trans-unit id="a83428f0f19b6d4372010255ff2ef9ab272578d1" translate="yes" xml:space="preserve">
          <source>Scan::all</source>
          <target state="translated">Scan::all</target>
        </trans-unit>
        <trans-unit id="fdda2ce8b15a6d2075229afe525b7e8a55d35d11" translate="yes" xml:space="preserve">
          <source>Scan::any</source>
          <target state="translated">Scan::any</target>
        </trans-unit>
        <trans-unit id="8ae964ef6b78e951ac3b26e79dfd44bec458e86b" translate="yes" xml:space="preserve">
          <source>Scan::borrow</source>
          <target state="translated">Scan::borrow</target>
        </trans-unit>
        <trans-unit id="1d1fa2d81c469a644938a10e857fd20595b68115" translate="yes" xml:space="preserve">
          <source>Scan::borrow_mut</source>
          <target state="translated">Scan::borrow_mut</target>
        </trans-unit>
        <trans-unit id="dcdbeb94289a891920ae7362a81de3677cc1e082" translate="yes" xml:space="preserve">
          <source>Scan::by_ref</source>
          <target state="translated">Scan::by_ref</target>
        </trans-unit>
        <trans-unit id="44a5d113010b539112c7aebbe1efadf9df2440bf" translate="yes" xml:space="preserve">
          <source>Scan::chain</source>
          <target state="translated">Scan::chain</target>
        </trans-unit>
        <trans-unit id="7c3cbcfdfe9b063409170df12dc8d39dc6dc99d3" translate="yes" xml:space="preserve">
          <source>Scan::clone</source>
          <target state="translated">Scan::clone</target>
        </trans-unit>
        <trans-unit id="c6db19d8a19119f74425bfa04127af8420e4efc4" translate="yes" xml:space="preserve">
          <source>Scan::clone_from</source>
          <target state="translated">Scan::clone_from</target>
        </trans-unit>
        <trans-unit id="ac3ef15de8d0ee0bec5955a3a3ab25a55df08f3a" translate="yes" xml:space="preserve">
          <source>Scan::clone_into</source>
          <target state="translated">Scan::clone_into</target>
        </trans-unit>
        <trans-unit id="2ee78a8b1e01eb5cb984ff82e377950705941cbe" translate="yes" xml:space="preserve">
          <source>Scan::cloned</source>
          <target state="translated">Scan::cloned</target>
        </trans-unit>
        <trans-unit id="1d217f90eb9953f90f7cee01645024cf8b353e47" translate="yes" xml:space="preserve">
          <source>Scan::cmp</source>
          <target state="translated">Scan::cmp</target>
        </trans-unit>
        <trans-unit id="f624c4e941292af5212a257f7d7e45e1f746c610" translate="yes" xml:space="preserve">
          <source>Scan::collect</source>
          <target state="translated">Scan::collect</target>
        </trans-unit>
        <trans-unit id="140d6d7c8506b513cdbb183e0de556d84140332b" translate="yes" xml:space="preserve">
          <source>Scan::copied</source>
          <target state="translated">Scan::copied</target>
        </trans-unit>
        <trans-unit id="37be80a9aeac96c59cb970c7ab59d3d0750db5f5" translate="yes" xml:space="preserve">
          <source>Scan::count</source>
          <target state="translated">Scan::count</target>
        </trans-unit>
        <trans-unit id="6ba6c8f1417e8d7b7f648fd7ce48940adf9144f3" translate="yes" xml:space="preserve">
          <source>Scan::cycle</source>
          <target state="translated">Scan::cycle</target>
        </trans-unit>
        <trans-unit id="7ec31279e2f8b96943422c4871166206fb63dfed" translate="yes" xml:space="preserve">
          <source>Scan::enumerate</source>
          <target state="translated">Scan::enumerate</target>
        </trans-unit>
        <trans-unit id="25a5e40162d5f49695e798626fd7358037ea86f6" translate="yes" xml:space="preserve">
          <source>Scan::eq</source>
          <target state="translated">Scan::eq</target>
        </trans-unit>
        <trans-unit id="bba6fdabd86b647187c140d88b617db38d432ecc" translate="yes" xml:space="preserve">
          <source>Scan::filter</source>
          <target state="translated">Scan::filter</target>
        </trans-unit>
        <trans-unit id="22b9545f456094f84f04af42526f62045be3f6e5" translate="yes" xml:space="preserve">
          <source>Scan::filter_map</source>
          <target state="translated">Scan::filter_map</target>
        </trans-unit>
        <trans-unit id="ec6b0559d3037a1ec9affdf74744f00da3bcd772" translate="yes" xml:space="preserve">
          <source>Scan::find</source>
          <target state="translated">Scan::find</target>
        </trans-unit>
        <trans-unit id="ce8589a77e6e6f30ec5a666a8478289269d79b74" translate="yes" xml:space="preserve">
          <source>Scan::find_map</source>
          <target state="translated">Scan::find_map</target>
        </trans-unit>
        <trans-unit id="1dba7e901c826e550e1d530ba916001117fa283f" translate="yes" xml:space="preserve">
          <source>Scan::flat_map</source>
          <target state="translated">Scan::flat_map</target>
        </trans-unit>
        <trans-unit id="5ba5682fc67c867be5c841cec5f95757e352b127" translate="yes" xml:space="preserve">
          <source>Scan::flatten</source>
          <target state="translated">Scan::flatten</target>
        </trans-unit>
        <trans-unit id="54d858c081c6321abe7f407a8a917413095b9e98" translate="yes" xml:space="preserve">
          <source>Scan::fmt</source>
          <target state="translated">Scan::fmt</target>
        </trans-unit>
        <trans-unit id="ee544b0cc856e0647a04c15e5aa58914fff7d3dd" translate="yes" xml:space="preserve">
          <source>Scan::fold</source>
          <target state="translated">Scan::fold</target>
        </trans-unit>
        <trans-unit id="877effb4069116cb008b7b02185836741deeb1bd" translate="yes" xml:space="preserve">
          <source>Scan::for_each</source>
          <target state="translated">Scan::for_each</target>
        </trans-unit>
        <trans-unit id="d596133dfad2ba2eb63caf025a1006ba5d46cdbe" translate="yes" xml:space="preserve">
          <source>Scan::from</source>
          <target state="translated">Scan::from</target>
        </trans-unit>
        <trans-unit id="05f2371a703b3bb956c34eefeb2778aa851dc375" translate="yes" xml:space="preserve">
          <source>Scan::fuse</source>
          <target state="translated">Scan::fuse</target>
        </trans-unit>
        <trans-unit id="5c5199789fc91ccfc059a9513dde8cc16dc76c24" translate="yes" xml:space="preserve">
          <source>Scan::ge</source>
          <target state="translated">Scan::ge</target>
        </trans-unit>
        <trans-unit id="b10b247c902a2bfa3e7132b61f9fc779d22e5f18" translate="yes" xml:space="preserve">
          <source>Scan::gt</source>
          <target state="translated">Scan::gt</target>
        </trans-unit>
        <trans-unit id="02d37e0f76b525bbfed8d07b3144e6b3574d8747" translate="yes" xml:space="preserve">
          <source>Scan::inspect</source>
          <target state="translated">Scan::inspect</target>
        </trans-unit>
        <trans-unit id="e77e489028848d463f401f4c49d8009a9ef763fb" translate="yes" xml:space="preserve">
          <source>Scan::into</source>
          <target state="translated">Scan::into</target>
        </trans-unit>
        <trans-unit id="8f74006cbeb828113f5fc9538a8101d864393fe2" translate="yes" xml:space="preserve">
          <source>Scan::into_iter</source>
          <target state="translated">Scan::into_iter</target>
        </trans-unit>
        <trans-unit id="97aceb0807e7408fc95fa9e8207b84bd8085b8c9" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted</source>
          <target state="translated">Scan::is_sorted</target>
        </trans-unit>
        <trans-unit id="7ee340cb30ed71bb397fabe21931f6dab7264f46" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted_by</source>
          <target state="translated">Scan::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="58036d9ce660f7aef80fc0b987f4b2d1d619f2fd" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted_by_key</source>
          <target state="translated">Scan::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="8f663c380aa3d6bda22377b6769b2cb7e3745f74" translate="yes" xml:space="preserve">
          <source>Scan::last</source>
          <target state="translated">Scan::last</target>
        </trans-unit>
        <trans-unit id="62a5c990f54f0366a46db77c2e2b1ef1c18f7174" translate="yes" xml:space="preserve">
          <source>Scan::le</source>
          <target state="translated">Scan::le</target>
        </trans-unit>
        <trans-unit id="cfa5cf71030074646966407091c6fa5aa1ba85eb" translate="yes" xml:space="preserve">
          <source>Scan::lt</source>
          <target state="translated">Scan::lt</target>
        </trans-unit>
        <trans-unit id="44e4a34744c1e0cdc7555d5c68d6d19573656894" translate="yes" xml:space="preserve">
          <source>Scan::map</source>
          <target state="translated">Scan::map</target>
        </trans-unit>
        <trans-unit id="f2a07a63439a0ebcde98f43e8b3fbb80d4952811" translate="yes" xml:space="preserve">
          <source>Scan::max</source>
          <target state="translated">Scan::max</target>
        </trans-unit>
        <trans-unit id="3cfafd3b9dad17f4287fad1302263c256bdb9da2" translate="yes" xml:space="preserve">
          <source>Scan::max_by</source>
          <target state="translated">Scan::max_by</target>
        </trans-unit>
        <trans-unit id="c65b07c42c554193abc8eceb99ec17650b947d6e" translate="yes" xml:space="preserve">
          <source>Scan::max_by_key</source>
          <target state="translated">Scan::max_by_key</target>
        </trans-unit>
        <trans-unit id="75992f861a2f69a877ca4c109354b275b180bd95" translate="yes" xml:space="preserve">
          <source>Scan::min</source>
          <target state="translated">Scan::min</target>
        </trans-unit>
        <trans-unit id="b26db00332d6adb34cd1adc934b3dc8b34c8f9dc" translate="yes" xml:space="preserve">
          <source>Scan::min_by</source>
          <target state="translated">Scan::min_by</target>
        </trans-unit>
        <trans-unit id="8bd0f12b39a926d27ef33306910f880301f2454a" translate="yes" xml:space="preserve">
          <source>Scan::min_by_key</source>
          <target state="translated">Scan::min_by_key</target>
        </trans-unit>
        <trans-unit id="29d50c77efde6dbc085b208d7c218943a0ea0714" translate="yes" xml:space="preserve">
          <source>Scan::ne</source>
          <target state="translated">Scan::ne</target>
        </trans-unit>
        <trans-unit id="1ab71f992ffe8596c0341900bef028b3308973f8" translate="yes" xml:space="preserve">
          <source>Scan::next</source>
          <target state="translated">Scan::next</target>
        </trans-unit>
        <trans-unit id="c5850266e5e6c46cb795904dd076371082aa08f3" translate="yes" xml:space="preserve">
          <source>Scan::nth</source>
          <target state="translated">Scan::nth</target>
        </trans-unit>
        <trans-unit id="ff5105bc82f317b54ad32741845c344dd57225c9" translate="yes" xml:space="preserve">
          <source>Scan::partial_cmp</source>
          <target state="translated">Scan::partial_cmp</target>
        </trans-unit>
        <trans-unit id="23ebf388b9af419edd8a10316e92a28cdcc54ea5" translate="yes" xml:space="preserve">
          <source>Scan::partition</source>
          <target state="translated">Scan::partition</target>
        </trans-unit>
        <trans-unit id="78ca9808b2d539ab3576f5e1204530b9bd1adc02" translate="yes" xml:space="preserve">
          <source>Scan::peekable</source>
          <target state="translated">Scan::peekable</target>
        </trans-unit>
        <trans-unit id="2b0d89811cd472d52b60e91c8231f7ff0add786d" translate="yes" xml:space="preserve">
          <source>Scan::position</source>
          <target state="translated">Scan::position</target>
        </trans-unit>
        <trans-unit id="d8e52b56df09d900a46a0d11405db4d163939745" translate="yes" xml:space="preserve">
          <source>Scan::product</source>
          <target state="translated">Scan::product</target>
        </trans-unit>
        <trans-unit id="f564b9f823c397c793d11fee1b39b46f01f0e5a0" translate="yes" xml:space="preserve">
          <source>Scan::rev</source>
          <target state="translated">Scan::rev</target>
        </trans-unit>
        <trans-unit id="2b6ef2d07d09325ad0a4156fe82830daa7c2000c" translate="yes" xml:space="preserve">
          <source>Scan::rposition</source>
          <target state="translated">Scan::rposition</target>
        </trans-unit>
        <trans-unit id="e16bad2125996665ff244f29435a894ef4dd3342" translate="yes" xml:space="preserve">
          <source>Scan::scan</source>
          <target state="translated">Scan::scan</target>
        </trans-unit>
        <trans-unit id="7948a9c7ae9eaead157d3b15d36b95efb521f5d8" translate="yes" xml:space="preserve">
          <source>Scan::size_hint</source>
          <target state="translated">Scan::size_hint</target>
        </trans-unit>
        <trans-unit id="e80e6e3937516c92e418a5fe916bfac2e483b066" translate="yes" xml:space="preserve">
          <source>Scan::skip</source>
          <target state="translated">Scan::skip</target>
        </trans-unit>
        <trans-unit id="242d9090f46800125c301ef29b2906cc536d0877" translate="yes" xml:space="preserve">
          <source>Scan::skip_while</source>
          <target state="translated">Scan::skip_while</target>
        </trans-unit>
        <trans-unit id="9f63e26973be9f3afb89ae3f4e2ed85606b635af" translate="yes" xml:space="preserve">
          <source>Scan::step_by</source>
          <target state="translated">Scan::step_by</target>
        </trans-unit>
        <trans-unit id="6b16e51cd58da3de9d5f7eea0e0f07ca046d979c" translate="yes" xml:space="preserve">
          <source>Scan::sum</source>
          <target state="translated">Scan::sum</target>
        </trans-unit>
        <trans-unit id="a7282175f1d0da9413967d85f69c6e868558487e" translate="yes" xml:space="preserve">
          <source>Scan::take</source>
          <target state="translated">Scan::take</target>
        </trans-unit>
        <trans-unit id="a150dc4d16df56db4605174e979cea6899d1ad9c" translate="yes" xml:space="preserve">
          <source>Scan::take_while</source>
          <target state="translated">Scan::take_while</target>
        </trans-unit>
        <trans-unit id="13a823d246b96299ec57e999197efc7fa9ae0a31" translate="yes" xml:space="preserve">
          <source>Scan::to_owned</source>
          <target state="translated">Scan::to_owned</target>
        </trans-unit>
        <trans-unit id="3ef6fcb77ca31a6f969ff19b4b3aa9051300806f" translate="yes" xml:space="preserve">
          <source>Scan::try_fold</source>
          <target state="translated">Scan::try_fold</target>
        </trans-unit>
        <trans-unit id="db1f0815536f2e7e0fccb46f579eb7c1f5f467fc" translate="yes" xml:space="preserve">
          <source>Scan::try_for_each</source>
          <target state="translated">Scan::try_for_each</target>
        </trans-unit>
        <trans-unit id="e3ca0918eba1feb0dd819a8739d918a22b7a106d" translate="yes" xml:space="preserve">
          <source>Scan::try_from</source>
          <target state="translated">Scan::try_from</target>
        </trans-unit>
        <trans-unit id="bd50714b4294891b30df26cd83bd683f7dc15be8" translate="yes" xml:space="preserve">
          <source>Scan::try_into</source>
          <target state="translated">Scan::try_into</target>
        </trans-unit>
        <trans-unit id="046b6bc008c7041f8edf76e7602802d827d08367" translate="yes" xml:space="preserve">
          <source>Scan::type_id</source>
          <target state="translated">Scan::type_id</target>
        </trans-unit>
        <trans-unit id="569da91365c91b5131222d7de125089d3f265484" translate="yes" xml:space="preserve">
          <source>Scan::unzip</source>
          <target state="translated">Scan::unzip</target>
        </trans-unit>
        <trans-unit id="e947a087f9ad656a226215379de2667c1377de6e" translate="yes" xml:space="preserve">
          <source>Scan::zip</source>
          <target state="translated">Scan::zip</target>
        </trans-unit>
        <trans-unit id="fb63302c6f22a6965dfa609e8e20a66d7199f9dd" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 함수가 호출 되기 직전에 클로저가 실행되도록 예약합니다 .</target>
        </trans-unit>
        <trans-unit id="c21507c1a91d893abdec9840fa9ae19963c02140" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked. &lt;a href=&quot;../os/unix/process/trait.commandext#method.before_exec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 함수가 호출 되기 직전에 클로저가 실행되도록 예약합니다 . &lt;a href=&quot;../os/unix/process/trait.commandext#method.before_exec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3828bb2307999d77ee3cc9989b1f128ccf8cc518" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.pre_exec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 함수가 호출 되기 직전에 클로저가 실행되도록 예약합니다 . &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.pre_exec&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99d69565bd3ab366d37906300f1bf9bb70804a55" translate="yes" xml:space="preserve">
          <source>Scheme: hygienic macros</source>
          <target state="translated">구성표 : 위생적인 ​​매크로</target>
        </trans-unit>
        <trans-unit id="6c6abe90bb72b66441d41ac5ea68bcc18fc33627" translate="yes" xml:space="preserve">
          <source>ScmCredentials</source>
          <target state="translated">ScmCredentials</target>
        </trans-unit>
        <trans-unit id="a200cf855faba05cda0d2309cd6e668524d6c5a3" translate="yes" xml:space="preserve">
          <source>ScmRights</source>
          <target state="translated">ScmRights</target>
        </trans-unit>
        <trans-unit id="1649d47e247b7878486f68b1541b0892af4985f8" translate="yes" xml:space="preserve">
          <source>Scopes of function parameters</source>
          <target state="translated">기능 매개 변수의 범위</target>
        </trans-unit>
        <trans-unit id="5279c09b56d10415b7fbdf488ada570b3a82608c" translate="yes" xml:space="preserve">
          <source>Scopes of local variables</source>
          <target state="translated">지역 변수의 범위</target>
        </trans-unit>
        <trans-unit id="f869c7563d63df9f222d947a975a45138e95b942" translate="yes" xml:space="preserve">
          <source>Scoping, Exporting, and Importing</source>
          <target state="translated">범위 지정, 내보내기 및 가져 오기</target>
        </trans-unit>
        <trans-unit id="d908d24ab618c48e6ae073715a0ab05f7bb4153e" translate="yes" xml:space="preserve">
          <source>Scripts without case are not changed:</source>
          <target state="translated">대소 문자가없는 스크립트는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="92f5c17a4180087f0927972817e9d930fd2be3b1" translate="yes" xml:space="preserve">
          <source>Scrutinee</source>
          <target state="translated">Scrutinee</target>
        </trans-unit>
        <trans-unit id="057c00f982acbbd131543e7b48e94d17da16d57d" translate="yes" xml:space="preserve">
          <source>SearchStep</source>
          <target state="translated">SearchStep</target>
        </trans-unit>
        <trans-unit id="3373ce77abd3e6c254656b5ae418e3b5a03551cc" translate="yes" xml:space="preserve">
          <source>Searcher</source>
          <target state="translated">Searcher</target>
        </trans-unit>
        <trans-unit id="b1094720881ccb3d2dd5eb17b06070402b7b9239" translate="yes" xml:space="preserve">
          <source>Searches for &lt;a href=&quot;../../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s that match the given predicate.</source>
          <target state="translated">에 대한 검색 &lt;a href=&quot;../../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 주어진 조건과 일치의.</target>
        </trans-unit>
        <trans-unit id="11363ade1d3d6a9830725b9ee63abd37a1ea1520" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index.</source>
          <target state="translated">반복자의 요소를 오른쪽에서 검색하여 색인을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ea94f8f1fd65b3e808118ecb3c6a64d1be80abc0" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../../../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소를 오른쪽에서 검색하여 색인을 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.rposition&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a32b846472e7629b89337b736deb7cba8899702b" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소를 오른쪽에서 검색하여 색인을 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.rposition&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fbabe20f2ae80e8b4000f5a8fda30a8bcd233af" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소를 오른쪽에서 검색하여 색인을 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.rposition&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58a6f63decee1650a72cc8d3d4b0dc8ae926d3ea" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소를 오른쪽에서 검색하여 색인을 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.rposition&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe2da068b1383ba78d78179215e20384ebd856f5" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">반복자의 요소를 오른쪽에서 검색하여 색인을 반환합니다. &lt;a href=&quot;trait.iterator#method.rposition&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="888aace1ecfca3a664f3926fcdf9d9c8737ed80d" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index.</source>
          <target state="translated">이터레이터에서 요소를 검색하여 색인을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b1e4dd5c105e14ff5ce136025420dedeece55e5c" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../../../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이터레이터에서 요소를 검색하여 색인을 반환합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5cf7f1d717e2cb1cdd88f6ee856563d8c126e03" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이터레이터에서 요소를 검색하여 색인을 반환합니다. &lt;a href=&quot;../../iter/trait.iterator#method.position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="898fb33cb492658409d014bf819e485b96a05d7f" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이터레이터에서 요소를 검색하여 색인을 반환합니다. &lt;a href=&quot;../iter/trait.iterator#method.position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1eb70845c5eb53f54ffe500cb5ff9dd1a042ee65" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이터레이터에서 요소를 검색하여 색인을 반환합니다. &lt;a href=&quot;iter/trait.iterator#method.position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="736c00e0587ecd076f8c2f0471322e982b180ef4" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">이터레이터에서 요소를 검색하여 색인을 반환합니다. &lt;a href=&quot;trait.iterator#method.position&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d823a12940ddccec2fac026ab8506ebd4fce1ad" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate.</source>
          <target state="translated">술어를 만족시키는 반복자 요소를 뒤에서 검색합니다.</target>
        </trans-unit>
        <trans-unit id="532083e20b7883df5506427bdf3897cf9c69ee57" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자 요소를 뒤에서 검색합니다. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfind&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="746936471fbd43113547a89d6d3b931297227e42" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;../iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자 요소를 뒤에서 검색합니다. &lt;a href=&quot;../iter/trait.doubleendediterator#method.rfind&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85288c4b67b128aa63ce0cba0a0f6c128e49b4a1" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자 요소를 뒤에서 검색합니다. &lt;a href=&quot;iter/trait.doubleendediterator#method.rfind&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65a626fe71f749af973dfce0d72fd7e24c3b262a" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자 요소를 뒤에서 검색합니다. &lt;a href=&quot;trait.doubleendediterator#method.rfind&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5689009b2419d56c677d881fa744acad45be906" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate.</source>
          <target state="translated">술어를 만족시키는 반복자의 요소를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="b92e1c9d3102e3784e7bf1b1ae13ecbed92601c8" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자의 요소를 검색합니다. &lt;a href=&quot;../../../iter/trait.iterator#method.find&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3cdaab1b181a213143c872a425525e5ad8e5466c" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자의 요소를 검색합니다. &lt;a href=&quot;../../iter/trait.iterator#method.find&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf92031246f6c4823820728ce733391b75632750" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자의 요소를 검색합니다. &lt;a href=&quot;../iter/trait.iterator#method.find&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f547a648c4bbc4e82d48e90d04b24d4601646c0" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자의 요소를 검색합니다. &lt;a href=&quot;iter/trait.iterator#method.find&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87ac7333a913b0c4084d8e023b09ac4cdffe8559" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">술어를 만족시키는 반복자의 요소를 검색합니다. &lt;a href=&quot;trait.iterator#method.find&quot;&gt;더 읽어보기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c42de42bc1907a5a1b52e8ec0a64dca1b9461a58" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given &lt;a href=&quot;../../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;../../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; 와&lt;/a&gt; 동일한 문자를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="39893e15426279064c0dd333dd4107082c8ca7bc" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; 와&lt;/a&gt; 동일한 문자를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="333fc641daf7d2737df9c4e746769731b83136e8" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given char</source>
          <target state="translated">주어진 문자와 같은 문자를 검색합니다</target>
        </trans-unit>
        <trans-unit id="b8a402e814cd46ffe3e7a6aaa73558922c84e3c1" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the &lt;a href=&quot;../../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s in the slice.</source>
          <target state="translated">슬라이스 에있는 &lt;a href=&quot;../../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 와 동일한 문자를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="75af8b18236695d52f22ca858507f8eedc4a8e0c" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s in the slice.</source>
          <target state="translated">슬라이스 에있는 &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; 와 동일한 문자를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="702c314d5b30f1accfdbb832ab87fbb0b341a336" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the chars in the array</source>
          <target state="translated">배열의 모든 문자와 동일한 문자를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="ba66da2741c0ff78a37e961a37db7788a9edb5a8" translate="yes" xml:space="preserve">
          <source>Searches for chars that match the given predicate</source>
          <target state="translated">주어진 술어와 일치하는 문자를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="f79707c4ffd13504e8a620181e79d250b74fd521" translate="yes" xml:space="preserve">
          <source>Searching Each Line for the Query</source>
          <target state="translated">쿼리에 대한 각 줄 검색</target>
        </trans-unit>
        <trans-unit id="554e5e25f0d86fc7d48da5b753f3b192e04d6a22" translate="yes" xml:space="preserve">
          <source>Second example:</source>
          <target state="translated">두 번째 예 :</target>
        </trans-unit>
        <trans-unit id="ddb8f6a409190e926fb7592f2d1a6011c5f9d5bd" translate="yes" xml:space="preserve">
          <source>Second, &lt;code&gt;println!&lt;/code&gt; calls a Rust macro. If it called a function instead, it would be entered as &lt;code&gt;println&lt;/code&gt; (without the &lt;code&gt;!&lt;/code&gt;). We&amp;rsquo;ll discuss Rust macros in more detail in Chapter 19. For now, you just need to know that using a &lt;code&gt;!&lt;/code&gt; means that you&amp;rsquo;re calling a macro instead of a normal function.</source>
          <target state="translated">둘째, &lt;code&gt;println!&lt;/code&gt; 녹 매크로를 호출합니다. 대신 함수를 호출하면 &lt;code&gt;println&lt;/code&gt; 으로 입력됩니다 ( &lt;code&gt;!&lt;/code&gt; 없이 ). Rust 매크로에 대해서는 19 장에서 더 자세하게 설명 할 것입니다. 지금은 &lt;code&gt;!&lt;/code&gt; 일반 함수 대신 매크로를 호출한다는 의미입니다.</target>
        </trans-unit>
        <trans-unit id="e0edb499b1c552b3dc16b17f7114852ca1f2a36c" translate="yes" xml:space="preserve">
          <source>Second, each repetition in the transcriber must contain at least one metavariable to decide now many times to expand it. If multiple metavariables appear in the same repetition, they must be bound to the same number of fragments. For instance, &lt;code&gt;( $( $i:ident ),* ; $( $j:ident ),* ) =&amp;gt; ( $( ($i,$j) ),*&lt;/code&gt; must bind the same number of &lt;code&gt;$i&lt;/code&gt; fragments as &lt;code&gt;$j&lt;/code&gt; fragments. This means that invoking the macro with &lt;code&gt;(a, b, c; d, e, f&lt;/code&gt;) is legal and expands to &lt;code&gt;((a,d), (b,e), c,f))&lt;/code&gt;, but &lt;code&gt;(a, b, c; d, e)&lt;/code&gt; is illegal because it does not have the same number. This requirement applies to every layer of nested repetitions.</source>
          <target state="translated">둘째, transcriber의 각 반복에는 하나 이상의 메타 변수가 포함되어 있어야 여러 번 확장 할 수 있습니다. 여러 메타 변수가 동일한 반복에 나타나는 경우 동일한 수의 조각에 바인딩되어야합니다. 인스턴스 용 &lt;code&gt;( $( $i:ident ),* ; $( $j:ident ),* ) =&amp;gt; ( $( ($i,$j) ),*&lt;/code&gt; 동일한 수의 결합해야 &lt;code&gt;$i&lt;/code&gt; 와 같은 단편 &lt;code&gt;$j&lt;/code&gt; 가진 매크로 호출한다는 단편이 방법. &lt;code&gt;(a, b, c; d, e, f&lt;/code&gt; 법적이고 팽창) &lt;code&gt;((a,d), (b,e), c,f))&lt;/code&gt; , 그러나 &lt;code&gt;(a, b, c; d, e)&lt;/code&gt; 번호가 같지 않기 때문에 불법입니다. 이 요구 사항은 중첩 된 반복의 모든 계층에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="9a073c305891d074dfc05591aefc3b14e4c5555c" translate="yes" xml:space="preserve">
          <source>Second, implicit methods on &lt;a href=&quot;../book/ch03-02-data-types&quot;&gt;primitive types&lt;/a&gt; are documented here. This can be a source of confusion for two reasons:</source>
          <target state="translated">둘째, &lt;a href=&quot;../book/ch03-02-data-types&quot;&gt;기본 유형&lt;/a&gt; 에 대한 암시 적 메소드 가 여기에 문서화되어 있습니다. 이것은 두 가지 이유로 혼란의 원인이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc4af03ac46d7dd2d589609d8142afb265cb45e5" translate="yes" xml:space="preserve">
          <source>Second, it can be used to import macros from another crate, by attaching it to an &lt;code&gt;extern crate&lt;/code&gt; declaration appearing in the crate's root module. Macros imported this way are imported into the prelude of the crate, not textually, which means that they can be shadowed by any other name. While macros imported by &lt;code&gt;#[macro_use]&lt;/code&gt; can be used before the import statement, in case of a conflict, the last macro imported wins. Optionally, a list of macros to import can be specified using the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListIdents&lt;/em&gt;&lt;/a&gt; syntax; this is not supported when &lt;code&gt;#[macro_use]&lt;/code&gt; is applied to a module.</source>
          <target state="translated">둘째, 상자의 루트 모듈에 나타나는 &lt;code&gt;extern crate&lt;/code&gt; 선언에 매크로를 첨부하여 다른 상자에서 매크로를 가져 오는 데 사용할 수 있습니다 . 이 방법으로 가져온 매크로는 텍스트가 아닌 상자의 서곡으로 가져 오므로 다른 이름으로 음영 처리 될 수 있습니다. &lt;code&gt;#[macro_use]&lt;/code&gt; 로 가져온 매크로를 import 문 전에 사용할 수 있지만 충돌이 발생하면 마지막으로 가져온 매크로가 우선합니다. 선택적으로, 가져올 매크로 목록은 &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListIdents&lt;/em&gt;&lt;/a&gt; 구문을 사용하여 지정할 수 있습니다 . &lt;code&gt;#[macro_use]&lt;/code&gt; 가 모듈에 적용될 때는 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="97208cc673dd09ce82f68d9602b8fe562c39c03b" translate="yes" xml:space="preserve">
          <source>Second, the &lt;code&gt;five&lt;/code&gt; function has no parameters and defines the type of the return value, but the body of the function is a lonely &lt;code&gt;5&lt;/code&gt; with no semicolon because it&amp;rsquo;s an expression whose value we want to return.</source>
          <target state="translated">둘째, &lt;code&gt;five&lt;/code&gt; 함수에는 매개 변수가없고 반환 값의 유형을 정의하지만 함수의 본문은 값이 반환하려는 식이므로 세미콜론이없는 외로운 &lt;code&gt;5&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4edacf5668ae7bc8aecc8dd49a240019787fb54c" translate="yes" xml:space="preserve">
          <source>Second, we can see in the signature that &lt;code&gt;add&lt;/code&gt; takes ownership of &lt;code&gt;self&lt;/code&gt;, because &lt;code&gt;self&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have an &lt;code&gt;&amp;amp;&lt;/code&gt;. This means &lt;code&gt;s1&lt;/code&gt; in Listing 8-18 will be moved into the &lt;code&gt;add&lt;/code&gt; call and no longer be valid after that. So although &lt;code&gt;let s3 = s1 + &amp;amp;s2;&lt;/code&gt; looks like it will copy both strings and create a new one, this statement actually takes ownership of &lt;code&gt;s1&lt;/code&gt;, appends a copy of the contents of &lt;code&gt;s2&lt;/code&gt;, and then returns ownership of the result. In other words, it looks like it&amp;rsquo;s making a lot of copies but isn&amp;rsquo;t; the implementation is more efficient than copying.</source>
          <target state="translated">둘째, 우리는 그 서명에 볼 수있는 &lt;code&gt;add&lt;/code&gt; 의 소유권 소요 &lt;code&gt;self&lt;/code&gt; 때문에, &lt;code&gt;self&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 있다 &lt;code&gt;&amp;amp;&lt;/code&gt; . 이것은 Listing 8-18의 &lt;code&gt;s1&lt;/code&gt; 이 &lt;code&gt;add&lt;/code&gt; 호출 로 이동하고 그 후에는 더 이상 유효하지 않음을 의미합니다. 하지만 그래서 것은 &lt;code&gt;let s3 = s1 + &amp;amp;s2;&lt;/code&gt; 두 문자열을 모두 복사하고 새 문자열을 생성하는 것처럼 보입니다.이 명령문은 실제로 &lt;code&gt;s1&lt;/code&gt; 의 소유권을 취하고 &lt;code&gt;s2&lt;/code&gt; 의 컨텐츠 사본을 추가 한 다음 결과의 소유권을 리턴합니다. 다시 말해, 많은 사본을 만드는 것처럼 보이지만 그렇지 않습니다. 복사보다 구현이 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="945d69a3e9b1262e6a65728582125632ae46e284" translate="yes" xml:space="preserve">
          <source>Second, we convert the bytes in the buffer to a string and print that string. The &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; function takes a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; and produces a &lt;code&gt;String&lt;/code&gt; from it. The &amp;ldquo;lossy&amp;rdquo; part of the name indicates the behavior of this function when it sees an invalid UTF-8 sequence: it will replace the invalid sequence with &lt;code&gt;�&lt;/code&gt;, the &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;. You might see replacement characters for characters in the buffer that aren&amp;rsquo;t filled by request data.</source>
          <target state="translated">둘째, 버퍼의 바이트를 문자열로 변환하고 해당 문자열을 인쇄합니다. &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; 기능은 얻어 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 과 생산 &lt;code&gt;String&lt;/code&gt; 그로부터. 그것은 잘못된 UTF-8 시퀀스를 볼 때 이름의 &quot;손실&quot;부분은이 함수의 동작을 나타냅니다가와 잘못된 시퀀스를 대체 할 &lt;code&gt;�&lt;/code&gt; 의 &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt; . 요청 데이터로 채워지지 않은 버퍼의 문자 대체 문자가 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e79dfeb52515135908df7ef8a4402c9cf237457" translate="yes" xml:space="preserve">
          <source>Second, we&amp;rsquo;ve removed the call to &lt;code&gt;expect&lt;/code&gt; in favor of the &lt;code&gt;?&lt;/code&gt; operator, as we talked about in &lt;a href=&quot;ch09-02-recoverable-errors-with-result#a-shortcut-for-propagating-errors-the--operator&quot;&gt;Chapter 9&lt;/a&gt;. Rather than &lt;code&gt;panic!&lt;/code&gt; on an error, &lt;code&gt;?&lt;/code&gt; will return the error value from the current function for the caller to handle.</source>
          <target state="translated">둘째, 우리는 할 수있는 전화 삭제 한 &lt;code&gt;expect&lt;/code&gt; 의 찬성을 &lt;code&gt;?&lt;/code&gt; 운영자, 우리가에 대한 이야기로 &lt;a href=&quot;ch09-02-recoverable-errors-with-result#a-shortcut-for-propagating-errors-the--operator&quot;&gt;제 9 장&lt;/a&gt; . &lt;code&gt;panic!&lt;/code&gt; 아니라 ! 오류가 &lt;code&gt;?&lt;/code&gt; 호출자가 처리 할 수 ​​있도록 현재 함수에서 오류 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="a08ef173524e85733e2fbdcb76c18c7d0fe1cb13" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt; for warnings on using these pointers. The end pointer requires extra caution, as it does not point to a valid element in the slice.</source>
          <target state="translated">이러한 포인터 사용에 대한 경고는 &lt;a href=&quot;#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 . 끝 포인터는 슬라이스의 유효한 요소를 가리 키지 않으므로 특별히주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="dc7b9eb9b1f619eda6273cca2a8eb01bfee4bdc8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.as_ptr&quot;&gt;&lt;code&gt;as_ptr&lt;/code&gt;&lt;/a&gt; for warnings on using these pointers. The end pointer requires extra caution, as it does not point to a valid element in the slice.</source>
          <target state="translated">이러한 포인터 사용에 대한 경고는 &lt;a href=&quot;#method.as_ptr&quot;&gt; &lt;code&gt;as_ptr&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 . 끝 포인터는 슬라이스의 유효한 요소를 가리 키지 않으므로 특별히주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="8a13fe09bb6db614bb3789b1ed210e6989bc7612" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">나머지를 더 작은 청크로 리턴하는이 반복기의 변형에 대해서는 &lt;a href=&quot;#method.chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt; 를 참조 하고 동일한 반복자에 대해서는 슬라이스의 끝에서 시작하여 &lt;a href=&quot;#method.rchunks_exact&quot;&gt; &lt;code&gt;rchunks_exact&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ad53b94a6533ff2d11534623a32f3e1cf407ac05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">참조 &lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt; 의 반환 덩어리가 항상 정확하게이 반복자의 변형에 대한 &lt;code&gt;chunk_size&lt;/code&gt; 요소 및 &lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; 을&lt;/a&gt; 같은 반복자에 대한하지만 조각의 조각의 끝에서 시작.</target>
        </trans-unit>
        <trans-unit id="7331f140b489d73bbe09f65e667098eb66b0b425" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">항상 정확히 &lt;code&gt;chunk_size&lt;/code&gt; 요소의 청크를 반환하는이 반복자의 변형에 대해서는 &lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt; 를 참조 하고 슬라이스의 끝에서 시작하는 동일한 반복기에 대한 &lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; &lt;/a&gt; 를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="a301ebf0252ab69de735b799a6daa8fd205fac9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">항상 정확하게 &lt;code&gt;chunk_size&lt;/code&gt; 요소의 청크를 리턴하는이 반복기의 변형에 대해서는 &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . 동일한 반복자에 대해서는 슬라이스 슬라이스의 끝에서 시작하여 &lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4a01c2cfedaa79a1ad54d5b4fd46b6cab923e1b8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">항상 정확히 &lt;code&gt;chunk_size&lt;/code&gt; 요소의 청크를 반환하는이 반복기의 변형은 &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt; 을 참조 하고 , 슬라이스 끝에서 시작하는 동일한 반복기에 대해서는 &lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="edaf8a9ebbe2ba6f933b491ded7f7c453a863e8c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">나머지를 더 작은 청크로 리턴하는이 반복기의 변형에 대해서는 &lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt; 를 참조 하고 동일한 반복자에 대해서는 슬라이스 슬라이스의 끝에서 시작하는 &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="13ac2320700c36fa95f13d8b9f03ffb61022a898" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">나머지도 더 작은 청크로 반환하는이 반복기의 변형에 대해서는 &lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt; 을 참조 하고 슬라이스 끝에서 시작하는 동일한 반복기에 대해서는 &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7214a0c4565a2b79c37054fc238c92ff1ed1713c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.is_absolute&quot;&gt;&lt;code&gt;is_absolute&lt;/code&gt;&lt;/a&gt;'s documentation for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#method.is_absolute&quot;&gt; &lt;code&gt;is_absolute&lt;/code&gt; &lt;/a&gt; 의 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b50f34b335847aa8295f6b01826574d74bbc15e2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">참조 &lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; 을&lt;/a&gt; 또한 작은 덩어리, 그리고 나머지 반환이 반복자의 변형에 대한 &lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt; 같은 반복자를하지만 슬라이스의 시작 부분에서 시작.</target>
        </trans-unit>
        <trans-unit id="9979021bccd2efc766458b56892f3b499ecbd6ef" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">항상 정확하게 &lt;code&gt;chunk_size&lt;/code&gt; 요소의 &lt;a href=&quot;#method.chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt; 와 슬라이스의 시작 부분에서 시작하는 동일한 반복자에 대한 청크를 리턴하는이 반복자의 변형에 대해서는 &lt;a href=&quot;#method.rchunks_exact&quot;&gt; &lt;code&gt;rchunks_exact&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aff7ed3f854512f12d681629cf01f859b8f4ed24" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">항상 정확하게 &lt;code&gt;chunk_size&lt;/code&gt; 요소의 청크를 반환하는이 반복기의 변형에 대해서는 &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt; 를 참조 하고 동일한 반복자에 대해서는 슬라이스의 시작 부분에서 시작하는 &lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7e05e55b1d4fcd0ae7cfc2ecc3606e1d31985ac7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">나머지를 더 작은 청크로 리턴하는이 반복기의 변형에 대해서는 &lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt; 를 참조 하고 슬라이스의 시작 부분부터 시작하여 동일한 반복기에 대해서는 &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="30b44f2b97828c5798bd74c5cb56ed3adcd6cab6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; for other error semantics.</source>
          <target state="translated">다른 오류 의미는 &lt;a href=&quot;#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cb8374b4383c115aa6bb93fe476933ce8d82c2c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#variant.Read&quot;&gt;&lt;code&gt;Shutdown::Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.Write&quot;&gt;&lt;code&gt;Shutdown::Write&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#variant.Read&quot;&gt; &lt;code&gt;Shutdown::Read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#variant.Write&quot;&gt; &lt;code&gt;Shutdown::Write&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="04eb879e476542c9d6688cad0ed5c27155fc0106" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../mem/union.maybeuninit#method.zeroed&quot;&gt;&lt;code&gt;MaybeUninit::zeroed&lt;/code&gt;&lt;/a&gt; for examples of correct and incorrect usage of this method.</source>
          <target state="translated">이 메서드의 올 바르고 잘못된 사용 예는 &lt;a href=&quot;../mem/union.maybeuninit#method.zeroed&quot;&gt; &lt;code&gt;MaybeUninit::zeroed&lt;/code&gt; &lt;/a&gt; 를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="d6a22e1a0e367e3204d83a4c4ea76f0342d3fb7a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../reference/expressions/loop-expr#continue-expressions&quot;&gt;continue expressions&lt;/a&gt; from the reference for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;../reference/expressions/loop-expr#continue-expressions&quot;&gt;은&lt;/a&gt; 참조에서 continue 표현식 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="409331ea9c5566f36765b941c91e09355dd2b84b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;'s documentation for a detailed discussion of this collection's performance benefits and drawbacks.</source>
          <target state="translated">이 컬렉션의 성능 이점과 단점에 대한 자세한 내용은 &lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd02ad7b79cb810db76f32ac11a1d341441c6c18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.ipaddr&quot;&gt;&lt;code&gt;IpAddr&lt;/code&gt;&lt;/a&gt; for a type encompassing both IPv4 and IPv6 addresses.</source>
          <target state="translated">IPv4 및 IPv6 주소를 모두 포함하는 유형은 &lt;a href=&quot;enum.ipaddr&quot;&gt; &lt;code&gt;IpAddr&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d0d20fe1b5c6691e296fc4ad9d04188bc107d2e9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt;&lt;/a&gt;'s documentation for more information on the different kinds of prefixes.</source>
          <target state="translated">다른 종류의 접두사에 대한 자세한 내용 은 &lt;a href=&quot;enum.prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="43f84a643e49bae1b13c6849a2d13e25d575392c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.shutdown#variant.Read&quot;&gt;&lt;code&gt;Shutdown::Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;enum.shutdown#variant.Write&quot;&gt;&lt;code&gt;Shutdown::Write&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;enum.shutdown#variant.Read&quot;&gt; &lt;code&gt;Shutdown::Read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;enum.shutdown#variant.Write&quot;&gt; &lt;code&gt;Shutdown::Write&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="27f023fba6e8d14455766073d8c5d21b58e5464b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; for a type encompassing both IPv4 and IPv6 socket addresses.</source>
          <target state="translated">IPv4 및 IPv6 소켓 주소를 모두 포함하는 유형은 &lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="70683490ae88162ba5317936bdeb81eac5791fbb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information on the format string syntax.</source>
          <target state="translated">참조 &lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt; 포맷 문자열 구문에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="29f60592601875cc5a5ce38cc10ec59d5cbb6de7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fn.remove_file&quot;&gt;&lt;code&gt;fs::remove_file&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.remove_dir&quot;&gt;&lt;code&gt;fs::remove_dir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fn.remove_file&quot;&gt; &lt;code&gt;fs::remove_file&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fn.remove_dir&quot;&gt; &lt;code&gt;fs::remove_dir&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="27fa9b008bf74c8f9891483f29a0ddfd4a23c5bc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information on the format string syntax.</source>
          <target state="translated">형식 문자열 구문에 대한 자세한 내용 은 &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7c18a8a03336ae70998b8592562c66c653cc40cd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;the Nomicon&lt;/a&gt; for more details about &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">참조 &lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;Nomicon&lt;/a&gt; 에 대한 자세한 내용은 &lt;code&gt;Sync&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
