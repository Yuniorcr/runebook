<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="52c9142e5de962948c4f681ac43d392af27642b8" translate="yes" xml:space="preserve">
          <source>Creates a function wrapper object (either &lt;code&gt;&lt;a href=&quot;pointer_to_unary_function&quot;&gt;std::pointer_to_unary_function&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;pointer_to_binary_function&quot;&gt;std::pointer_to_binary_function&lt;/a&gt;&lt;/code&gt;), deducing the target type from the template arguments.</source>
          <target state="translated">함수 인수 랩퍼 오브젝트 ( &lt;code&gt;&lt;a href=&quot;pointer_to_unary_function&quot;&gt;std::pointer_to_unary_function&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;pointer_to_binary_function&quot;&gt;std::pointer_to_binary_function&lt;/a&gt;&lt;/code&gt; )를 작성하여 템플리트 인수에서 대상 유형을 추론합니다.</target>
        </trans-unit>
        <trans-unit id="3d8bb885b227328dbae175f37fca6e51d702c96f" translate="yes" xml:space="preserve">
          <source>Creates a hard link &lt;code&gt;link&lt;/code&gt; with its target set to &lt;code&gt;target&lt;/code&gt; as if by POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/link.html&quot;&gt;link()&lt;/a&gt;: the pathname &lt;code&gt;target&lt;/code&gt; must exist.</source>
          <target state="translated">POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/link.html&quot;&gt;link ()에&lt;/a&gt; 의해 &lt;code&gt;target&lt;/code&gt; 으로 설정된 하드 링크 &lt;code&gt;link&lt;/code&gt; 를 작성 합니다. 경로 이름 &lt;code&gt;target&lt;/code&gt; 이 존재해야합니다.</target>
        </trans-unit>
        <trans-unit id="66eaeb6b29a609024a96d1938b0e99a12d8de311" translate="yes" xml:space="preserve">
          <source>Creates a lvalue or rvalue reference type of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">lvalue 또는 rvalue 참조 유형을 &lt;code&gt;T&lt;/code&gt; 로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e32f042122d21448445d2a2323ca8c606106c2c7" translate="yes" xml:space="preserve">
          <source>Creates a member function wrapper object, deducing the target type from the template arguments. The wrapper object expects a pointer to an object of type &lt;code&gt;T&lt;/code&gt; as the first parameter to its &lt;code&gt;operator()&lt;/code&gt;.</source>
          <target state="translated">템플릿 인수에서 대상 유형을 추론하는 멤버 함수 래퍼 객체를 만듭니다. 랩퍼 오브젝트는 &lt;code&gt;operator()&lt;/code&gt; 의 첫 번째 매개 변수로 &lt;code&gt;T&lt;/code&gt; 유형의 오브젝트에 대한 포인터를 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="41f81d431c090b7d4478d434cb435232ee46185f" translate="yes" xml:space="preserve">
          <source>Creates a member function wrapper object, deducing the target type from the template arguments. The wrapper object expects a reference to an object of type &lt;code&gt;T&lt;/code&gt; as the first parameter to its &lt;code&gt;operator()&lt;/code&gt;.</source>
          <target state="translated">템플릿 인수에서 대상 유형을 추론하는 멤버 함수 래퍼 객체를 만듭니다. 랩퍼 오브젝트는 &lt;code&gt;operator()&lt;/code&gt; 의 첫 번째 매개 변수로 &lt;code&gt;T&lt;/code&gt; 유형의 오브젝트에 대한 참조를 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="9a994164f301e54a7996fd7634faff6725913079" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; that shares ownership of the managed object. If there is no managed object, i.e. &lt;code&gt;*this&lt;/code&gt; is empty, then the returned &lt;code&gt;shared_ptr&lt;/code&gt; also is empty.</source>
          <target state="translated">관리 객체의 소유권을 공유 하는 새 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 을 만듭니다 . 관리 객체가없는 경우, 즉 &lt;code&gt;*this&lt;/code&gt; 가 비어 있으면 반환 된 &lt;code&gt;shared_ptr&lt;/code&gt; 도 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c02f9bee7c2583e4c73e8a3d36fe6b7b04633b73" translate="yes" xml:space="preserve">
          <source>Creates a new instance of &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; whose stored pointer is obtained from &lt;code&gt;r&lt;/code&gt;'s stored pointer using a cast expression.</source>
          <target state="translated">캐스트 표현식을 사용하여 &lt;code&gt;r&lt;/code&gt; 의 저장된 포인터 에서 저장된 포인터를 얻는 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 의 새 인스턴스를 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="8fcdbb05970d352ea0b7936f4cccb305d7a15b77" translate="yes" xml:space="preserve">
          <source>Creates a new instance of &lt;code&gt;std::scoped_allocator_adaptor&lt;/code&gt;, where the outer allocator base class and each inner allocator subobject are obtained by calling &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;A&amp;gt;::select_on_container_copy_construction()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::scoped_allocator_adaptor&lt;/code&gt; 의 새 인스턴스를 작성합니다 . 여기서 &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;A&amp;gt;::select_on_container_copy_construction()&lt;/code&gt; 을 호출하여 외부 할당 자 기본 클래스 및 각 내부 할당 자 하위 오브젝트를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="94f42536e05c5b870c26e3b3a9141665c60dbc0b" translate="yes" xml:space="preserve">
          <source>Creates a new value in-place, in an existing &lt;code&gt;variant&lt;/code&gt; object.</source>
          <target state="translated">기존 &lt;code&gt;variant&lt;/code&gt; 객체 에서 적절한 새 값을 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="ea024d55b247a4c919cfa0c2266ec64a016b825f" translate="yes" xml:space="preserve">
          <source>Creates a seed sequence based on the supplied input bits by [&lt;code&gt;ib&lt;/code&gt;,&lt;code&gt;ie&lt;/code&gt;)</source>
          <target state="translated">[ &lt;code&gt;ib&lt;/code&gt; , &lt;code&gt;ie&lt;/code&gt; )에 의해 제공된 입력 비트를 기반으로 시드 시퀀스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="17a2c869ab69406e1105a6cf5f4b62f92e33e886" translate="yes" xml:space="preserve">
          <source>Creates a seed sequence with the same default values as other objects of type &lt;code&gt;S&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; 유형의 다른 객체와 동일한 기본값으로 시드 시퀀스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f74324016dceef1f6353280b1c57e4578f1bf89e" translate="yes" xml:space="preserve">
          <source>Creates a string view of a character array literal</source>
          <target state="translated">문자형 배열 리터럴의 문자열 뷰를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="57ee0eba859ad91a98dc2fcc69fd3c3897862638" translate="yes" xml:space="preserve">
          <source>Creates a symbolic link &lt;code&gt;link&lt;/code&gt; with its target set to &lt;code&gt;target&lt;/code&gt; as if by POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html&quot;&gt;symlink()&lt;/a&gt;: the pathname &lt;code&gt;target&lt;/code&gt; may be invalid or non-existing.</source>
          <target state="translated">POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html&quot;&gt;symlink ()에&lt;/a&gt; 의해 &lt;code&gt;target&lt;/code&gt; 으로 설정된 기호 링크 &lt;code&gt;link&lt;/code&gt; 를 작성 합니다. 경로 이름 &lt;code&gt;target&lt;/code&gt; 이 유효하지 않거나 존재하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ab72ecf35e0b5a786e554c64fcb69027494777d" translate="yes" xml:space="preserve">
          <source>Creates a tuple object, deducing the target type from the types of arguments.</source>
          <target state="translated">인수 유형에서 대상 유형을 추론하는 튜플 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9f659b8b8d1d5d928e245b471f15eb0b3b9e7263" translate="yes" xml:space="preserve">
          <source>Creates a tuple of lvalue references to its arguments or instances of &lt;code&gt;&lt;a href=&quot;ignore&quot;&gt;std::ignore&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">인수 또는 &lt;code&gt;&lt;a href=&quot;ignore&quot;&gt;std::ignore&lt;/a&gt;&lt;/code&gt; 인스턴스에 대한 lvalue 참조의 튜플을 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="c3f9d9859ac81a3a97b82e97d2be93012eee8ae7" translate="yes" xml:space="preserve">
          <source>Creates a unique filename that does not name a currently existing file, and stores it in the character string pointed to by &lt;code&gt;filename&lt;/code&gt;. The function is capable of generating up to &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;TMP_MAX&lt;/a&gt;&lt;/code&gt; of unique filenames, but some or all of them may already be in use, and thus not suitable return values.</source>
          <target state="translated">가 가리키는 문자열에 고유 한 현재 기존 파일의 이름이없는 파일 이름 및 저장을 작성 &lt;code&gt;filename&lt;/code&gt; . 이 함수는 고유 한 파일 이름을 최대 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;TMP_MAX&lt;/a&gt;&lt;/code&gt; 까지 생성 할 수 있지만 일부 또는 전부가 이미 사용 중일 수 있으므로 반환 값이 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="913e757d7909b699ca21dba4db9b21a9e9c6a7ee" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; that holds a reference to a copy of &lt;code&gt;e&lt;/code&gt;. This is done as if executing the following code:</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 의 사본에 대한 참조를 보유 하는 &lt;code&gt;&lt;a href=&quot;exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; 합니다 . 이것은 다음 코드를 실행하는 것처럼 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="edcc02fece525d4d4e2f1a65830e91471fffbc9b" translate="yes" xml:space="preserve">
          <source>Creates an engine whose initial state is determined by a single call to &lt;code&gt;q.generate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;q.generate&lt;/code&gt; 에 대한 단일 호출로 초기 상태를 판별하는 엔진을 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="a89d0ad7a607045e71c3807f701d9fc1f09825da" translate="yes" xml:space="preserve">
          <source>Creates an engine whose initial state is determined by the integer &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">초기 상태가 정수 &lt;code&gt;s&lt;/code&gt; 에 의해 결정되는 엔진을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="148159479240d106ee9f0ad6c2c0e769cd427793" translate="yes" xml:space="preserve">
          <source>Creates an engine with the same state as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 동일한 상태의 엔진을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="40399613d20119576e9b1da89bfa9b3fcd33b5c6" translate="yes" xml:space="preserve">
          <source>Creates an engine with the same state as all other default-constructed engines of type &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;E&lt;/code&gt; 유형의 다른 모든 기본 생성 엔진과 동일한 상태로 엔진을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="8e54837fd73bd5ab96e8b420af12f66fce1dc0d8" translate="yes" xml:space="preserve">
          <source>Creates an error condition for an &lt;code&gt;errc&lt;/code&gt; value &lt;code&gt;e&lt;/code&gt;. Sets the error code to &lt;code&gt;int(e)&lt;/code&gt; and error category to &lt;code&gt;&lt;a href=&quot;../generic_category&quot;&gt;std::generic_category&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;errc&lt;/code&gt; 값 &lt;code&gt;e&lt;/code&gt; 에 대한 오류 조건을 작성 합니다 . 오류 코드를 &lt;code&gt;int(e)&lt;/code&gt; 하고 오류 범주를 &lt;code&gt;&lt;a href=&quot;../generic_category&quot;&gt;std::generic_category&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b21796864bb41a45bdfed8fc0620ddbf19378343" translate="yes" xml:space="preserve">
          <source>Creates an object of the given type &lt;code&gt;T&lt;/code&gt; by means of &lt;a href=&quot;uses_allocator&quot;&gt;uses-allocator construction&lt;/a&gt; at the uninitialized memory location indicated by p.</source>
          <target state="translated">주어진 타입의 객체 생성 &lt;code&gt;T&lt;/code&gt; 의해 &lt;a href=&quot;uses_allocator&quot;&gt;사용-할당 구조&lt;/a&gt; 초기화되지 않은 메모리 위치는 P로 표시.</target>
        </trans-unit>
        <trans-unit id="93df60768885203c342ac561a3fec7f5847257ef" translate="yes" xml:space="preserve">
          <source>Creates an object of the given type &lt;code&gt;T&lt;/code&gt; by means of &lt;a href=&quot;uses_allocator&quot;&gt;uses-allocator construction&lt;/a&gt;.</source>
          <target state="translated">주어진 타입의 객체 생성 &lt;code&gt;T&lt;/code&gt; 의해 &lt;a href=&quot;uses_allocator&quot;&gt;사용-할당 건설&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1400fd7cf9222ba93821b1cdbeaba74d754cb0d1" translate="yes" xml:space="preserve">
          <source>Creates and initializes objects with dynamic &lt;a href=&quot;storage_duration&quot;&gt;storage duration&lt;/a&gt;, that is, objects whose lifetime is not limited by the scope in which they were created.</source>
          <target state="translated">동적 &lt;a href=&quot;storage_duration&quot;&gt;스토리지 기간&lt;/a&gt; , 즉 수명이 생성 된 범위에 의해 제한되지 않는 객체를 사용하여 객체를 생성하고 초기화합니다 .</target>
        </trans-unit>
        <trans-unit id="19c674d439e2671a053a307a5296872bf883eac3" translate="yes" xml:space="preserve">
          <source>Creates and opens a temporary file with a unique auto-generated filename.</source>
          <target state="translated">고유 한 자동 생성 된 파일 이름으로 임시 파일을 만들고 엽니 다.</target>
        </trans-unit>
        <trans-unit id="509cb55d8085a7e4390dea8b5a4ccd483c3de7dd" translate="yes" xml:space="preserve">
          <source>Creates error code value for errc enum &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">errc enum &lt;code&gt;e&lt;/code&gt; 에 대한 오류 코드 값을 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="b11a34fd71070cf737065d5f1e05ecdae72488b5" translate="yes" xml:space="preserve">
          <source>Cross-device link</source>
          <target state="translated">교차 기기 링크</target>
        </trans-unit>
        <trans-unit id="8a813bd533048f502b50b678fe403056b2a31dd3" translate="yes" xml:space="preserve">
          <source>Curiously Recurring Template Pattern</source>
          <target state="translated">흥미롭게 반복되는 템플릿 패턴</target>
        </trans-unit>
        <trans-unit id="ba9af4814a084c82b1a4b7be3b9f7e9fb92dca0f" translate="yes" xml:space="preserve">
          <source>Current calendar time encoded as &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; object on success, &lt;code&gt;(&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;)(-1)&lt;/code&gt; on error. If &lt;code&gt;arg&lt;/code&gt; is not null, the return value is also stored in the object pointed to by &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">로 인코딩 현재 달력 시간 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 성공 객체 &lt;code&gt;(&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;)(-1)&lt;/code&gt; 오류에. 경우 &lt;code&gt;arg&lt;/code&gt; null는 아니고, 반환 값은 개체가 가리키는에 저장됩니다 &lt;code&gt;arg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bcda17299c380bd2f520f96837977a0db32e2ad5" translate="yes" xml:space="preserve">
          <source>Current depth of the directory hierarchy.</source>
          <target state="translated">디렉토리 계층의 현재 깊이</target>
        </trans-unit>
        <trans-unit id="7938dcdba09fa9194d35fd38e5e702630c956dfa" translate="yes" xml:space="preserve">
          <source>Current instantiation</source>
          <target state="translated">현재 인스턴스화</target>
        </trans-unit>
        <trans-unit id="1f5eb1d8d6e1ebd3a2c56ba4ce665d7a75ca8097" translate="yes" xml:space="preserve">
          <source>Current regular expression syntax flags.</source>
          <target state="translated">현재 정규식 구문 플래그.</target>
        </trans-unit>
        <trans-unit id="2b749506dccffa58a2758c5dd8045acb52017bf3" translate="yes" xml:space="preserve">
          <source>Custom allocators may contain state. Each container or another allocator-aware object stores an instance of the supplied allocator and controls allocator replacement through &lt;code&gt;&lt;a href=&quot;allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">사용자 지정 할당자는 상태를 포함 할 수 있습니다. 각 컨테이너 또는 다른 할당 자 인식 객체는 제공된 할당 자의 인스턴스를 저장하고 &lt;code&gt;&lt;a href=&quot;allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; 통해 할당 자의 교체를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="4652e9bfd80ccfdbd65344616bfd43a29e73c2cd" translate="yes" xml:space="preserve">
          <source>Custom comparisons</source>
          <target state="translated">맞춤 비교</target>
        </trans-unit>
        <trans-unit id="815149a4ba7d4be337caff3f8273d1029b540d00" translate="yes" xml:space="preserve">
          <source>Custom overloads of &lt;code&gt;begin&lt;/code&gt; may be provided for classes that do not expose a suitable &lt;code&gt;begin()&lt;/code&gt; member function, yet can be iterated. The following overloads are already provided by the standard library:</source>
          <target state="translated">적합한 &lt;code&gt;begin()&lt;/code&gt; 멤버 함수를 노출시키지 않지만 반복 될 수있는 클래스에 대해 사용자 정의 &lt;code&gt;begin&lt;/code&gt; 과부하 가 제공 될 수 있습니다. 표준 라이브러리에서 이미 다음과 같은 과부하가 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="5c417f54ada6e5e89845124b64b176d00056f35e" translate="yes" xml:space="preserve">
          <source>Custom overloads of &lt;code&gt;end&lt;/code&gt; may be provided for classes that do not expose a suitable &lt;code&gt;end()&lt;/code&gt; member function, yet can be iterated. The following overloads are already provided by the standard library:</source>
          <target state="translated">맞춤 과부하 &lt;code&gt;end&lt;/code&gt; 적절한 노출되지 않은 클래스에 대해 제공 될 수있다 &lt;code&gt;end()&lt;/code&gt; 멤버 함수를, 아직 반복 될 수있다. 표준 라이브러리에서 이미 다음과 같은 과부하가 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="c33c221de64519a4ece4d9877257ea07d0374514" translate="yes" xml:space="preserve">
          <source>Custom overloads of &lt;code&gt;rbegin&lt;/code&gt; may be provided for classes that do not expose a suitable &lt;code&gt;rbegin()&lt;/code&gt; member function, yet can be iterated. The following overload is already provided by the standard library:</source>
          <target state="translated">적절한 &lt;code&gt;rbegin()&lt;/code&gt; 멤버 함수를 노출시키지 않지만 반복 될 수있는 클래스에 대해 &lt;code&gt;rbegin&lt;/code&gt; 의 사용자 정의 과부하 가 제공 될 수 있습니다. 표준 라이브러리에서 이미 다음과 같은 과부하가 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="e512eb0f1f0537e8ef277a9c82abbe1bcd479238" translate="yes" xml:space="preserve">
          <source>Custom overloads of &lt;code&gt;rend&lt;/code&gt; may be provided for classes that do not expose a suitable &lt;code&gt;rend()&lt;/code&gt; member function, yet can be iterated. The following overload is already provided by the standard library:</source>
          <target state="translated">맞춤 과부하 &lt;code&gt;rend&lt;/code&gt; 적절한 노출되지 않은 클래스에 대해 제공 될 수있다 &lt;code&gt;rend()&lt;/code&gt; 멤버 함수를, 아직 반복 될 수있다. 표준 라이브러리에서 이미 다음과 같은 과부하가 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="e8befa2d831c23d93022e75dd169d8e2c39ae25d" translate="yes" xml:space="preserve">
          <source>Custom placement forms of operator new can be used for any purpose, for example, to fill the allocated array.</source>
          <target state="translated">연산자 new의 사용자 정의 배치 양식은 할당 된 배열을 채우는 등의 모든 목적으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4220389917ffd77263f2d1b7dda637ee7339d457" translate="yes" xml:space="preserve">
          <source>Custom specializations of the type trait &lt;code&gt;std::uses_allocator&lt;/code&gt; are allowed for types that do not have the member typedef &lt;code&gt;allocator_type&lt;/code&gt; but satisfy one of the following two requirements:</source>
          <target state="translated">유형 특성 &lt;code&gt;std::uses_allocator&lt;/code&gt; 의 사용자 정의 특수화는 typedef &lt;code&gt;allocator_type&lt;/code&gt; 멤버는 없지만 다음 두 요구 사항 중 하나를 충족 하는 유형에 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6f5aed9214615184fd9b11bf88a9c7c8c930f5a5" translate="yes" xml:space="preserve">
          <source>Customization point objects</source>
          <target state="translated">사용자 화 지점 객체</target>
        </trans-unit>
        <trans-unit id="1802a660fff8b02624d9fdb84a51ff6252d50268" translate="yes" xml:space="preserve">
          <source>Customizes the C++ operators for operands of user-defined types.</source>
          <target state="translated">사용자 정의 유형의 피연산자에 대한 C ++ 연산자를 사용자 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d1a550d08342a0a1a6248c5f115bf82d6658049a" translate="yes" xml:space="preserve">
          <source>D within thread 2, nothing prevents D from appearing before A in the modification order of y, and B from appearing before C in the modification order of x. The side-effect of D on y could be visible to the load A in thread 1 while the side effect of B on x could be visible to the load C in thread 2. In particular, this may occur if D is completed before C in thread 2, either due to compiler reordering or at runtime.</source>
          <target state="translated">스레드 2 내에서 D는 y의 수정 순서에서 D 앞에 D가 나타나고 x의 수정 순서에서 B 앞에 C가 나타나지 않습니다. y에 대한 D의 부작용은 나사산 1의 하중 A에서 볼 수 있지만 x에 대한 B의 부작용은 나사산 2의 하중 C에서 볼 수 있습니다. 특히 C in 컴파일러 재정렬로 인해 또는 런타임에 스레드 2</target>
        </trans-unit>
        <trans-unit id="312a9854e1aeecf15042026409cbeb39a0222139" translate="yes" xml:space="preserve">
          <source>D. Abrahams (2001) &lt;a href=&quot;http://www.boost.org/community/error_handling.html&quot;&gt;&quot;Error and Exception Handling&quot;&lt;/a&gt;</source>
          <target state="translated">D. Abrahams (2001) &lt;a href=&quot;http://www.boost.org/community/error_handling.html&quot;&gt;&quot;오류 및 예외 처리&quot;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0040e38760f0bba65628f8d1c5c5c74492508f1d" translate="yes" xml:space="preserve">
          <source>D. Abrahams (2001) &lt;a href=&quot;http://www.boost.org/community/exception_safety.html&quot;&gt;&quot;Exception Safety in Generic Components&quot;&lt;/a&gt;</source>
          <target state="translated">D. Abrahams (2001) &lt;a href=&quot;http://www.boost.org/community/exception_safety.html&quot;&gt;&quot;일반 구성 요소의 예외 안전&quot;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12130df9add30c0ad6c8facc749f7941f22cb5a0" translate="yes" xml:space="preserve">
          <source>DECIMAL_DIG</source>
          <target state="translated">DECIMAL_DIG</target>
        </trans-unit>
        <trans-unit id="a5aab846de1014f95987a2dbc9908b1b7ae5f78a" translate="yes" xml:space="preserve">
          <source>DIARESIS</source>
          <target state="translated">DIARESIS</target>
        </trans-unit>
        <trans-unit id="2a46f2dda49bd5dae6fba5018707d7e35212aa20" translate="yes" xml:space="preserve">
          <source>DINGBAT NEGATIVE CIRCLED DIGIT ONE - DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN</source>
          <target state="translated">DINGBAT NEGATIVE CIRCLED DIGIT ONE-DINGBAT NEGATIVE CIRCLED SANS-SERIF 번호 10</target>
        </trans-unit>
        <trans-unit id="005a885558154b4db13a62435eaf2fb010200a94" translate="yes" xml:space="preserve">
          <source>DR</source>
          <target state="translated">DR</target>
        </trans-unit>
        <trans-unit id="ed8d40efa18c2a0b4b4355a2dfe4a221cc884e3b" translate="yes" xml:space="preserve">
          <source>Dangling iterator handling</source>
          <target state="translated">매달려 반복자 처리</target>
        </trans-unit>
        <trans-unit id="ab01b4cf3c26d78b8ee4bcc378cce3f3efbdafaf" translate="yes" xml:space="preserve">
          <source>Dangling references</source>
          <target state="translated">매달려있는 참조</target>
        </trans-unit>
        <trans-unit id="2eda97b92537eb19b5c7dcc9c326fe148dc7cdee" translate="yes" xml:space="preserve">
          <source>Data members</source>
          <target state="translated">데이터 멤버</target>
        </trans-unit>
        <trans-unit id="2d1df1e76038d57ea00e3dd0686a5e2fe8b90691" translate="yes" xml:space="preserve">
          <source>Data models</source>
          <target state="translated">데이터 모델</target>
        </trans-unit>
        <trans-unit id="cedc7364b9c54060c8937af16ca1f7f300c926d1" translate="yes" xml:space="preserve">
          <source>Data read in from a text stream is guaranteed to compare equal to the data that were earlier written out to that stream only if all of the following is true:</source>
          <target state="translated">텍스트 스트림에서 읽은 데이터는 다음 사항이 모두 해당되는 경우에만 해당 스트림에 이전에 작성된 데이터와 동일하게 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="07c9c3a5e0d97aef72f69b7e5ba94a6765f2a6d3" translate="yes" xml:space="preserve">
          <source>Date and time</source>
          <target state="translated">날짜와 시간</target>
        </trans-unit>
        <trans-unit id="5b0b556cd60211a5522983788620b6746c7543cf" translate="yes" xml:space="preserve">
          <source>Date and time utilities</source>
          <target state="translated">날짜 및 시간 유틸리티</target>
        </trans-unit>
        <trans-unit id="987b9ced08d4ac5d11d286ca4b54b99a4f69164b" translate="yes" xml:space="preserve">
          <source>Day</source>
          <target state="translated">Day</target>
        </trans-unit>
        <trans-unit id="a2dfedeffd1ead187411349e305b1fe627303452" translate="yes" xml:space="preserve">
          <source>Day of the week</source>
          <target state="translated">요일</target>
        </trans-unit>
        <trans-unit id="1efe459545896a080ea552260e3ba2caa4f8d75e" translate="yes" xml:space="preserve">
          <source>Day of the year/month</source>
          <target state="translated">년 / 월의 일</target>
        </trans-unit>
        <trans-unit id="248e596c477c3545299fc6806379c38122c76851" translate="yes" xml:space="preserve">
          <source>Day, month, year (european) order</source>
          <target state="translated">일, 월, 년 (유럽) 주문</target>
        </trans-unit>
        <trans-unit id="8fa7848b2be3ca4b1659ed978010f39a06d41489" translate="yes" xml:space="preserve">
          <source>Daylight Saving Time flag. The value is positive if DST is in effect, zero if not and negative if no information is available</source>
          <target state="translated">일광 절약 시간제 플래그입니다. DST가 유효하면 값은 양수이고, 정보가 없으면 0이고, 정보가없는 경우 음수입니다.</target>
        </trans-unit>
        <trans-unit id="6514c58d4405b9a4a694b5469a98ca24ca3885e7" translate="yes" xml:space="preserve">
          <source>Deallocate memory</source>
          <target state="translated">메모리 할당 해제</target>
        </trans-unit>
        <trans-unit id="2d739d111fe91051bea2a8439e47d029eaae9c21" translate="yes" xml:space="preserve">
          <source>Deallocates all memory owned by this resource by calling &lt;code&gt;this-&amp;gt;release()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this-&amp;gt;release()&lt;/code&gt; 호출하여이 리소스가 소유 한 모든 메모리를 할당 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="b1ec4fd7815e58b3c0bfa469c80f5de68a55f3ed" translate="yes" xml:space="preserve">
          <source>Deallocates storage previously allocated by a matching &lt;code&gt;&lt;a href=&quot;operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt;. These deallocation functions are called by &lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt; and by &lt;a href=&quot;../../language/new&quot;&gt;new-expressions&lt;/a&gt; to deallocate memory after destructing (or failing to construct) objects with dynamic storage duration. They may also be called using regular function call syntax.</source>
          <target state="translated">일치하는 &lt;code&gt;&lt;a href=&quot;operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; 의해 이전에 할당 된 스토리지를 할당 해제합니다 . 이러한 할당 해제 함수는 동적 저장 기간을 사용하여 객체를 소멸 (또는 구성하지 못한) 한 후 메모리를 할당 해제하기 위해 &lt;a href=&quot;../../language/delete&quot;&gt;delete-expression&lt;/a&gt; 및 &lt;a href=&quot;../../language/new&quot;&gt;new-expression&lt;/a&gt; 에 의해 호출됩니다 . 정규 함수 호출 구문을 사용하여 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="910d97bedd7a2e7ad9f03aa4550dc1d7c8025dc0" translate="yes" xml:space="preserve">
          <source>Deallocates storage previously allocated with &lt;code&gt;&lt;a href=&quot;get_temporary_buffer&quot;&gt;std::get_temporary_buffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이전에 &lt;code&gt;&lt;a href=&quot;get_temporary_buffer&quot;&gt;std::get_temporary_buffer&lt;/a&gt;&lt;/code&gt; 할당 된 스토리지를 할당 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="021a7a50aac44c40c7c1c5f3a5860ac0aee1285a" translate="yes" xml:space="preserve">
          <source>Deallocates the space previously allocated by &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt;(since C++17), or &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt; (C ++ 17부터) 또는 &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt; 의해 이전에 할당 된 공간을 할당 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="6e33d9e38f5ced0e62d5dacd9353bd69a40e5845" translate="yes" xml:space="preserve">
          <source>Deallocates the storage pointed to by &lt;code&gt;p&lt;/code&gt;, which must have been allocated from a &lt;code&gt;&lt;a href=&quot;../memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; that compares equal to &lt;code&gt;*resource()&lt;/code&gt; using &lt;code&gt;x.allocate(n * sizeof(T), alignof(T))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 가리키는 스토리지를 할당 해제합니다.이 스토리지는 &lt;code&gt;x.allocate(n * sizeof(T), alignof(T))&lt;/code&gt; 사용하여 &lt;code&gt;*resource()&lt;/code&gt; 동일한 &lt;code&gt;&lt;a href=&quot;../memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 에서 할당되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="450e83cc71434e370eaf3d23fc080c595535a783" translate="yes" xml:space="preserve">
          <source>Deallocates the storage pointed to by &lt;code&gt;p&lt;/code&gt;, which must have been allocated from a &lt;code&gt;&lt;a href=&quot;../memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; that compares equal to &lt;code&gt;*resource()&lt;/code&gt;. using &lt;code&gt;x.allocate(n*sizeof(U), alignof(U))&lt;/code&gt;, typically through a call to &lt;code&gt;allocate_object&amp;lt;U&amp;gt;(n)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 가리키는 스토리지를 할당 해제합니다.이 스토리지는 &lt;code&gt;*resource()&lt;/code&gt; 비교 되는 &lt;code&gt;&lt;a href=&quot;../memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 에서 할당되어야합니다 . 사용 &lt;code&gt;x.allocate(n*sizeof(U), alignof(U))&lt;/code&gt; , 일반적으로 호출하여 &lt;code&gt;allocate_object&amp;lt;U&amp;gt;(n)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5165f83689349828e6f61c5d3886647a076807a1" translate="yes" xml:space="preserve">
          <source>Deallocates the storage pointed to by &lt;code&gt;p&lt;/code&gt;, which must have been allocated from a &lt;code&gt;&lt;a href=&quot;../memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; that compares equal to &lt;code&gt;*resource()&lt;/code&gt;. using &lt;code&gt;x.allocate(nbytes, alignment)&lt;/code&gt;, typically through a call to &lt;code&gt;allocate_bytes(nbytes, alignment&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 가리키는 스토리지를 할당 해제합니다.이 스토리지는 &lt;code&gt;*resource()&lt;/code&gt; 비교 되는 &lt;code&gt;&lt;a href=&quot;../memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 에서 할당되어야합니다 . 사용 &lt;code&gt;x.allocate(nbytes, alignment)&lt;/code&gt; 일반적으로 호출을 통해 &lt;code&gt;allocate_bytes(nbytes, alignment&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb7b5b0db644857760d2edeaba871fc95ea6e23c" translate="yes" xml:space="preserve">
          <source>Deallocates the storage pointed to by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 가리키는 스토리지를 할당 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="92c36ff499a32a4561faba3b4b3f5a9eb10737ad" translate="yes" xml:space="preserve">
          <source>Deallocates the storage pointed to by &lt;code&gt;p&lt;/code&gt;. &lt;code&gt;p&lt;/code&gt; shall have been returned by a prior call to &lt;code&gt;allocate(bytes, alignment)&lt;/code&gt; on a &lt;code&gt;memory_resource&lt;/code&gt; that compares equal to &lt;code&gt;*this&lt;/code&gt;, and the storage it points to shall not yet have been deallocated.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 가리키는 스토리지를 할당 해제합니다 . &lt;code&gt;p&lt;/code&gt; 는 &lt;code&gt;*this&lt;/code&gt; 와 비교 되는 &lt;code&gt;memory_resource&lt;/code&gt; 에 대한 &lt;code&gt;allocate(bytes, alignment)&lt;/code&gt; 에 대한 이전 호출에 의해 리턴되었으며 , 지정된 스토리지가 아직 할당 해제되지 않았어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="44321d97caca67cd120e242b166dcecd70914c44" translate="yes" xml:space="preserve">
          <source>Deallocates the storage referenced by the pointer &lt;code&gt;p&lt;/code&gt;, which must be a pointer obtained by an earlier call to &lt;code&gt;&lt;a href=&quot;allocate&quot;&gt;allocate()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">포인터 &lt;code&gt;p&lt;/code&gt; 가 참조하는 스토리지를 할당 해제합니다 . 이것은 &lt;code&gt;&lt;a href=&quot;allocate&quot;&gt;allocate()&lt;/a&gt;&lt;/code&gt; 에 대한 이전 호출로 얻은 포인터 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="aa8d74287bc96a6e4dd0fa75dbb5d835317af867" translate="yes" xml:space="preserve">
          <source>Deallocation function template</source>
          <target state="translated">할당 해제 기능 템플릿</target>
        </trans-unit>
        <trans-unit id="1565140dc81ea96c7876f224cb9d5f44632af99f" translate="yes" xml:space="preserve">
          <source>Deallocation functions (17-24) may be defined as static member functions of a class. These deallocation functions, if provided, are called by &lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt; when deleting objects (17,19,21) and arrays (18,20,22) of this class, unless the delete expression used the form &lt;code&gt;::delete&lt;/code&gt; which bypasses class-scope lookup. The keyword &lt;code&gt;static&lt;/code&gt; is optional for these function declarations: whether the keyword is used or not, the deallocation function is always a static member function.</source>
          <target state="translated">할당 해제 함수 (17-24)는 클래스의 정적 멤버 함수로 정의 될 수 있습니다. 이 할당 해제 기능이 제공되는 경우에 의해 호출 &lt;a href=&quot;../../language/delete&quot;&gt;삭제 표현식&lt;/a&gt; 이 클래스의 객체 (17,19,21)과 배열 (18,20,22)를 삭제할 때 삭제 표현 양식을 사용하지 않는 &lt;code&gt;::delete&lt;/code&gt; 하는 바이 패스 클래스 - 범위 조회. 키워드 &lt;code&gt;static&lt;/code&gt; 은 이러한 함수 선언에서 선택 사항입니다. 키워드 사용 여부에 관계없이 할당 해제 함수는 항상 정적 멤버 함수입니다.</target>
        </trans-unit>
        <trans-unit id="dba27fac42f13a3dee8d1f95ea1838cd72d499d3" translate="yes" xml:space="preserve">
          <source>Decimal point characters (&lt;code&gt;'.'&lt;/code&gt;) are replaced by &lt;code&gt;&lt;a href=&quot;../use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(str.getloc()).decimal_point()&lt;/code&gt;</source>
          <target state="translated">소수점 문자 ( &lt;code&gt;'.'&lt;/code&gt; )는 &lt;code&gt;&lt;a href=&quot;../use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(str.getloc()).decimal_point()&lt;/code&gt; &amp;lt; &lt;a href=&quot;../numpunct&quot;&gt;std :: numpunct&lt;/a&gt; &amp;lt;CharT &amp;gt;&amp;gt; (str.getloc ()). decimal_point () 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="7bf1ce05015cbb49091fcb7335d128b3cd13b50d" translate="yes" xml:space="preserve">
          <source>Decimal scientific notation is used, meaning that the value of the floating-point literal is the significand mutiplied by the number 10 raised to the power of exponent. The mathematical meaning of &lt;code&gt;123e4&lt;/code&gt; is</source>
          <target state="translated">십진 과학 표기법이 사용되는데, 이는 부동 소수점 리터럴의 값이 지수의 거듭 제곱으로 제기 된 숫자 10으로 의미가 있고 의미가 있음을 의미합니다. &lt;code&gt;123e4&lt;/code&gt; 의 수학적 의미 는</target>
        </trans-unit>
        <trans-unit id="6d9cbe2836f88558f497965a82c429a3488a7d4a" translate="yes" xml:space="preserve">
          <source>Declaration of a &lt;a href=&quot;deduction_guide#Explicit_deduction_guides&quot;&gt;deduction guide&lt;/a&gt; (does not define any entities)</source>
          <target state="translated">&lt;a href=&quot;deduction_guide#Explicit_deduction_guides&quot;&gt;추론 가이드&lt;/a&gt; 선언 (엔터티를 정의하지 않음)</target>
        </trans-unit>
        <trans-unit id="ef6a461029a5d619985d4dddf1f756f0dc92a73a" translate="yes" xml:space="preserve">
          <source>Declaration of a &lt;a href=&quot;template_parameters&quot;&gt;template parameter&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;template_parameters&quot;&gt;템플릿 매개 변수&lt;/a&gt; 선언</target>
        </trans-unit>
        <trans-unit id="751a3a57479db0f823eb404d1178386f4e32e9ac" translate="yes" xml:space="preserve">
          <source>Declaration of a class name (by &lt;a href=&quot;class#Forward_declaration&quot;&gt;forward declaration&lt;/a&gt; or by the use of the elaborated type specifier in another declaration)</source>
          <target state="translated">클래스 이름 &lt;a href=&quot;class#Forward_declaration&quot;&gt;선언&lt;/a&gt; ( 앞으로 선언 하거나 다른 선언에서 정교한 형식 지정자를 사용하여)</target>
        </trans-unit>
        <trans-unit id="083bfeb901fdc87fcbebc82d35f568d5fb8bbcb2" translate="yes" xml:space="preserve">
          <source>Declaration of a non-inline(since C++17)&lt;a href=&quot;static&quot;&gt;static data member&lt;/a&gt; inside a class definition</source>
          <target state="translated">클래스 정의 내부의 비 인라인 (C ++ 17 이후) &lt;a href=&quot;static&quot;&gt;정적 데이터 멤버&lt;/a&gt; 선언</target>
        </trans-unit>
        <trans-unit id="ad7f0f1bc1be302dc31f6e0503afb02524f6855a" translate="yes" xml:space="preserve">
          <source>Declaration of a template</source>
          <target state="translated">템플릿 선언</target>
        </trans-unit>
        <trans-unit id="91438d2d2b6624a9fbc68ea296ef780428e22d07" translate="yes" xml:space="preserve">
          <source>Declaration of an inline assembly block</source>
          <target state="translated">인라인 어셈블리 블록 선언</target>
        </trans-unit>
        <trans-unit id="267eb363b3f106e3005ab1c50b0101debef66501" translate="yes" xml:space="preserve">
          <source>Declaration statements</source>
          <target state="translated">선언문</target>
        </trans-unit>
        <trans-unit id="10af7ff462bf54154590f9a7f92304085d274356" translate="yes" xml:space="preserve">
          <source>Declaration statements introduce one or more identifiers into a block.</source>
          <target state="translated">선언문은 하나 이상의 식별자를 블록에 도입합니다.</target>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="ade787c183e721001b1ca5a743a7f0d93d088bee" translate="yes" xml:space="preserve">
          <source>Declarations in a nested class can use any members of the enclosing class, following the &lt;a href=&quot;data_members#Usage&quot;&gt;usual usage rules&lt;/a&gt; for the non-static members.</source>
          <target state="translated">중첩 클래스의 선언 은 비 정적 멤버에 대한 &lt;a href=&quot;data_members#Usage&quot;&gt;일반적인 사용 규칙&lt;/a&gt; 에 따라 둘러싸는 클래스의 모든 멤버를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1c83d0969a47246833d8b85bf9da316db3838036" translate="yes" xml:space="preserve">
          <source>Declarations in a nested class can use only type names, static members, and enumerators from the enclosing class.</source>
          <target state="translated">중첩 클래스의 선언은 둘러싸는 클래스의 형식 이름, 정적 멤버 및 열거 자만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2487e41670058d63f8493da3e66e37364b0bb53c" translate="yes" xml:space="preserve">
          <source>Declarators</source>
          <target state="translated">Declarators</target>
        </trans-unit>
        <trans-unit id="ae5c41f33ce223c44c5a61d038c68173df55276b" translate="yes" xml:space="preserve">
          <source>Declared objects and declared references that are not &lt;a href=&quot;data_members&quot;&gt;non-static data members&lt;/a&gt; are</source>
          <target state="translated">&lt;a href=&quot;data_members&quot;&gt;비 정적 데이터 멤버&lt;/a&gt; 가 아닌 선언 된 오브젝트 및 선언 된 참조 는</target>
        </trans-unit>
        <trans-unit id="fdfc504efbeafa9e21eaf307b84cfb9935985cce" translate="yes" xml:space="preserve">
          <source>Declares a class data member with explicit size, in bits. Adjacent bit field members may be packed to share and straddle the individual bytes.</source>
          <target state="translated">명시 적 크기의 클래스 데이터 멤버를 비트 단위로 선언합니다. 인접 비트 필드 멤버는 개별 바이트를 공유하고 스트래핑하도록 압축 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82a92ac3222b2b1aee6731b3659277f2b5af1c38" translate="yes" xml:space="preserve">
          <source>Declares a class type which will be defined later in this scope. Until the definition appears, this class name has &lt;a href=&quot;incomplete_type&quot;&gt;incomplete type&lt;/a&gt;. This allows classes that refer to each other:</source>
          <target state="translated">이 범위에서 나중에 정의 될 클래스 유형을 선언합니다. 정의가 나타날 때까지이 클래스 이름은 &lt;a href=&quot;incomplete_type&quot;&gt;불완전한 type&lt;/a&gt; 입니다. 이것은 서로를 참조하는 클래스를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="4237d60134baf06f904eb81aee2f9529e166c30c" translate="yes" xml:space="preserve">
          <source>Declares a named variable as a reference, that is, an alias to an already-existing object or function.</source>
          <target state="translated">명명 된 변수를 참조, 즉 기존 객체 또는 함수의 별칭으로 선언합니다.</target>
        </trans-unit>
        <trans-unit id="de10f7f68b33d575d4856ec4022e5cbe5d08ee50" translate="yes" xml:space="preserve">
          <source>Declares a variable of a pointer or pointer-to-member type.</source>
          <target state="translated">포인터 또는 포인터 대 멤버 유형의 변수를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="02c5149083241a9cd229bb5d89c10c3105edde95" translate="yes" xml:space="preserve">
          <source>Declares an object of array type.</source>
          <target state="translated">배열 유형의 객체를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="852ceb27e5eb0ab38cf3ed9c0e0a8b74a7fa323b" translate="yes" xml:space="preserve">
          <source>Declares the object referenced by the pointer &lt;code&gt;p&lt;/code&gt; reachable. Reachable objects will not be deleted by the garbage collector or considered to be a leak by a leak detector even if all pointers to it are destroyed. An object may be declared reachable multiple times, in which case multiple calls to &lt;code&gt;&lt;a href=&quot;undeclare_reachable&quot;&gt;std::undeclare_reachable&lt;/a&gt;&lt;/code&gt; would be needed to remove this property. For example, a &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_linked_list&quot;&gt;XOR linked list&lt;/a&gt; needs to declare its nodes reachable if the implementation has garbage collection enabled.</source>
          <target state="translated">도달 할 수 있는 포인터 &lt;code&gt;p&lt;/code&gt; 가 참조하는 객체를 선언합니다 . 접근 가능한 객체는 가비지 컬렉터에 의해 삭제되지 않으며 객체에 대한 모든 포인터가 파괴 된 경우에도 누출 감지기에 의한 누출로 간주됩니다. 객체는 여러 번 도달 할 수있는 것으로 선언 될 수 &lt;code&gt;&lt;a href=&quot;undeclare_reachable&quot;&gt;std::undeclare_reachable&lt;/a&gt;&lt;/code&gt; 경우이 속성을 제거 하려면 std :: undeclare_reachable 을 여러 번 호출해야 합니다. 예를 들어, 구현에 가비지 콜렉션이 사용 가능한 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_linked_list&quot;&gt;XOR 링크 된 목록에&lt;/a&gt; 도달 가능한 노드를 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="a33efab1e8fabc9494684a162b13cd6be81e3f08" translate="yes" xml:space="preserve">
          <source>Declaring &lt;a href=&quot;language/template_parameters#Non-type_template_parameter&quot;&gt;non-type template parameters&lt;/a&gt; with &lt;code&gt;auto&lt;/code&gt;</source>
          <target state="translated">선언 &lt;a href=&quot;language/template_parameters#Non-type_template_parameter&quot;&gt;비 형 템플릿 매개 변수&lt;/a&gt; 와 &lt;code&gt;auto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c21b7aaab0577c1f222d87d2be130e2fec8bd354" translate="yes" xml:space="preserve">
          <source>Decomposition</source>
          <target state="translated">Decomposition</target>
        </trans-unit>
        <trans-unit id="773e546480d278e8d2b68de8d9cd0faeadd916a9" translate="yes" xml:space="preserve">
          <source>Deduces the return type of an INVOKE expression at compile time.</source>
          <target state="translated">컴파일시 INVOKE 표현식의 리턴 유형을 추론합니다.</target>
        </trans-unit>
        <trans-unit id="cb8504f39c52787c5fc419e185e2808be8cffdb5" translate="yes" xml:space="preserve">
          <source>Deduction from a function call</source>
          <target state="translated">함수 호출에서 공제</target>
        </trans-unit>
        <trans-unit id="bab9911939325a1d4126025b66fe94ecd80ee098" translate="yes" xml:space="preserve">
          <source>Deduction from a type</source>
          <target state="translated">유형에서 공제</target>
        </trans-unit>
        <trans-unit id="e6ba2ea0d0ea0c04a7fea4713d16d685a7d5bfd6" translate="yes" xml:space="preserve">
          <source>Deduction guides</source>
          <target state="translated">추론 가이드</target>
        </trans-unit>
        <trans-unit id="ccd061f7e61c8c9af50e08b9aa64b8f2bfca469c" translate="yes" xml:space="preserve">
          <source>Deduction guides for &lt;code&gt;std::chrono::zoned_time&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::chrono::zoned_time&lt;/code&gt; 대한 추론 가이드</target>
        </trans-unit>
        <trans-unit id="b9e3605cbdd14c4179070cb474ba954eb46090b4" translate="yes" xml:space="preserve">
          <source>Deduction guides for std::chrono::zoned_time</source>
          <target state="translated">std :: chrono :: zoned_time에 대한 추론 가이드</target>
        </trans-unit>
        <trans-unit id="6596f0986c3d458a53271f5cac9dcfe752ba502b" translate="yes" xml:space="preserve">
          <source>Deduction of template template parameter can use the type used in the template specialization used in the function call:</source>
          <target state="translated">템플리트 템플리트 매개 변수의 추론은 함수 호출에 사용 된 템플리트 전문화에 사용 된 유형을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a63a80f985299c7768fe4dcd427cd87bf524f0c" translate="yes" xml:space="preserve">
          <source>Default argument</source>
          <target state="translated">기본 인수</target>
        </trans-unit>
        <trans-unit id="6bcca2541d3f4eb99df509a0ef05a98d2f536b6d" translate="yes" xml:space="preserve">
          <source>Default arguments</source>
          <target state="translated">기본 인수</target>
        </trans-unit>
        <trans-unit id="a56e748f244a3e7db82c615df3624b108a97eea2" translate="yes" xml:space="preserve">
          <source>Default arguments are only allowed in the parameter lists of &lt;a href=&quot;function&quot;&gt;function declarations&lt;/a&gt; and &lt;a href=&quot;lambda&quot;&gt;lambda-expressions&lt;/a&gt;,(since C++14) and are not allowed in the declarations of pointers to functions, references to functions, or in &lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; declarations. Template parameter lists use similar syntax for their &lt;a href=&quot;template_parameters#Default_template_arguments&quot;&gt;default template arguments&lt;/a&gt;.</source>
          <target state="translated">기본 인수는 &lt;a href=&quot;function&quot;&gt;함수 선언&lt;/a&gt; 및 &lt;a href=&quot;lambda&quot;&gt;람다 식&lt;/a&gt; 의 매개 변수 목록 (C ++ 14부터)에만 허용되며 함수에 대한 포인터 선언, 함수 참조 또는 &lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; 선언 에는 허용되지 않습니다 . 템플릿 매개 변수 목록은 &lt;a href=&quot;template_parameters#Default_template_arguments&quot;&gt;기본 템플릿 인수에&lt;/a&gt; 비슷한 구문을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="6f62551d711c3dfa627a536636300954cceb2897" translate="yes" xml:space="preserve">
          <source>Default arguments are used in place of the missing trailing arguments in a function call:</source>
          <target state="translated">함수 호출에서 누락 된 후행 인수 대신 기본 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3fcbdce763c7f2755083717fc8489e3a8b01ae82" translate="yes" xml:space="preserve">
          <source>Default comparisons(since C++20)</source>
          <target state="translated">기본 비교 (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="5ed48b55cefa2e1cbe887c3bc7dc35462e0ae28d" translate="yes" xml:space="preserve">
          <source>Default constructor</source>
          <target state="translated">기본 생성자</target>
        </trans-unit>
        <trans-unit id="3f40ff32236c5b97eee71a7291eea7f2cf15cd7a" translate="yes" xml:space="preserve">
          <source>Default constructors</source>
          <target state="translated">기본 생성자</target>
        </trans-unit>
        <trans-unit id="879f4d4fc0618cd5cffb7c4247bf58e8bb8abe3c" translate="yes" xml:space="preserve">
          <source>Default constructors are called during &lt;a href=&quot;default_initialization&quot;&gt;default initializations&lt;/a&gt; and &lt;a href=&quot;value_initialization&quot;&gt;value initializations&lt;/a&gt;.</source>
          <target state="translated">기본 생성자는 &lt;a href=&quot;default_initialization&quot;&gt;기본 초기화&lt;/a&gt; 및 &lt;a href=&quot;value_initialization&quot;&gt;값 초기화&lt;/a&gt; 중에 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="b104340a89759bdb5f1b6be6df4efb604e2881cb" translate="yes" xml:space="preserve">
          <source>Default constructs a &lt;code&gt;&lt;a href=&quot;../sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;matched&lt;/code&gt; member is set to</source>
          <target state="translated">기본은 &lt;code&gt;&lt;a href=&quot;../sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt; 구성합니다 . &lt;code&gt;matched&lt;/code&gt; 부재로 설정된</target>
        </trans-unit>
        <trans-unit id="d42b664c9a4888352e95b71398bbe8405f2650af" translate="yes" xml:space="preserve">
          <source>Default conversions</source>
          <target state="translated">기본 전환</target>
        </trans-unit>
        <trans-unit id="f43e33909cfd86bd654d46b7d187bed7cd231714" translate="yes" xml:space="preserve">
          <source>Default initialization</source>
          <target state="translated">기본 초기화</target>
        </trans-unit>
        <trans-unit id="869757fb826112abadfdecc5eb3feef7ddc5d068" translate="yes" xml:space="preserve">
          <source>Default initialization is performed in three situations:</source>
          <target state="translated">기본 초기화는 세 가지 상황에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="26cc4f1e27bef2eda9d0683779cfb0ebfb9abdd4" translate="yes" xml:space="preserve">
          <source>Default initialization of non-class variables with automatic and dynamic storage duration produces objects with indeterminate values (static and thread-local objects get &lt;a href=&quot;zero_initialization&quot;&gt;zero initialized&lt;/a&gt;).</source>
          <target state="translated">자동 및 동적 저장 시간으로 클래스가 아닌 변수를 기본 초기화하면 불확실한 값을 가진 객체가 생성됩니다 (정적 및 스레드 로컬 객체는 &lt;a href=&quot;zero_initialization&quot;&gt;0으로 초기화 됨&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="6fb460b30fddd52fe933e36d2c7c8fa3a429a608" translate="yes" xml:space="preserve">
          <source>Default member initializers are not allowed for &lt;a href=&quot;bit_field&quot;&gt;bit field&lt;/a&gt; members.</source>
          <target state="translated">&lt;a href=&quot;bit_field&quot;&gt;비트 필드&lt;/a&gt; 멤버 에는 기본 멤버 이니셜 라이저가 허용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="861376513f31704e238477699a12da1415b2c0e9" translate="yes" xml:space="preserve">
          <source>Default member initializers are not allowed to cause the implicit definition of a defaulted &lt;a href=&quot;default_constructor&quot;&gt;default constructor&lt;/a&gt; for the enclosing class or the exception specification of that constructor :</source>
          <target state="translated">기본 멤버 이니셜 라이저는 포함 클래스 의 기본 &lt;a href=&quot;default_constructor&quot;&gt;기본 생성자&lt;/a&gt; 또는 해당 생성자의 예외 스펙을 내재적으로 정의 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6ab0c587d82cd20845d8d9e5f98c5db18f79a0fd" translate="yes" xml:space="preserve">
          <source>Default parameters are not allowed.</source>
          <target state="translated">기본 매개 변수는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="418ac8b68820e3245b14c1a0c4a2f9e1b79b5674" translate="yes" xml:space="preserve">
          <source>Default template argument of a variable template is implicitly instantiated when the variable template is used in the context that requires the value of the argument.</source>
          <target state="translated">변수 템플릿의 기본 템플릿 인수는 변수 값이 필요한 컨텍스트에서 변수 템플릿이 사용될 때 암시 적으로 인스턴스화됩니다.</target>
        </trans-unit>
        <trans-unit id="032a3d954a05d00d05b3e724e779509d924ef180" translate="yes" xml:space="preserve">
          <source>Default template arguments</source>
          <target state="translated">기본 템플릿 인수</target>
        </trans-unit>
        <trans-unit id="08054751608b6101e8e75181798057af1e82cce4" translate="yes" xml:space="preserve">
          <source>Default template arguments are specified in the parameter lists after the &lt;code&gt;=&lt;/code&gt; sign. Defaults can be specified for any kind of template parameter (type, non-type, or template), but not to parameter packs.</source>
          <target state="translated">기본 템플릿 인수는 &lt;code&gt;=&lt;/code&gt; 기호 뒤에 매개 변수 목록에 지정됩니다 . 모든 종류의 템플릿 매개 변수 (유형, 비 유형 또는 템플릿)에 대해 기본값을 지정할 수 있지만 매개 변수 팩에는 지정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4a2af5e4a428bf53b428dc18fde36faf0e280465" translate="yes" xml:space="preserve">
          <source>Default template arguments that appear in the declarations and the definition are merged similarly to default function arguments:</source>
          <target state="translated">선언과 정의에 나타나는 기본 템플릿 인수는 기본 함수 인수와 유사하게 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="5a72d725c58cf1c1b2c6af6bf4c90363cc726a30" translate="yes" xml:space="preserve">
          <source>Default-constructed &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; facets use this table for classification.</source>
          <target state="translated">기본 구성 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 패싯은이 테이블을 분류에 사용합니다.</target>
        </trans-unit>
        <trans-unit id="273bcb15f24dc0bd96fdfa27a762c3dde7442067" translate="yes" xml:space="preserve">
          <source>Default-constructs a new thread identifier. The identifier does not represent a thread.</source>
          <target state="translated">새 스레드 식별자를 기본값으로 구성합니다. 식별자는 스레드를 나타내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="43e91c18a027d13fc1c186f51b7e95e3fac5acf1" translate="yes" xml:space="preserve">
          <source>Default-constructs the &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; object, including default-constructing the private &lt;code&gt;&lt;a href=&quot;../../locale/locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; member or any other internal state as necessary.</source>
          <target state="translated">Private &lt;code&gt;&lt;a href=&quot;../../locale/locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 멤버 또는 필요에 따라 다른 내부 상태 를 기본값으로 구성하는 것을 포함 하여 &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; 객체를 기본값으로 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="58cb5820b514d0a3ba026f6997ffe417fb03256b" translate="yes" xml:space="preserve">
          <source>DefaultConstructible</source>
          <target state="translated">DefaultConstructible</target>
        </trans-unit>
        <trans-unit id="9156c437987ffc945884480949189dec4bb4a0fd" translate="yes" xml:space="preserve">
          <source>DefaultInsertable</source>
          <target state="translated">DefaultInsertable</target>
        </trans-unit>
        <trans-unit id="fe830a04c89cdd772a5eee391655c0f42a91257f" translate="yes" xml:space="preserve">
          <source>Defaulted &lt;a href=&quot;move_constructor&quot;&gt;move constructor&lt;/a&gt; and &lt;a href=&quot;move_operator&quot;&gt;move assignment&lt;/a&gt; that are defined as deleted are never included in the list of candidate functions.</source>
          <target state="translated">부실 &lt;a href=&quot;move_constructor&quot;&gt;이동 생성자&lt;/a&gt; 와 &lt;a href=&quot;move_operator&quot;&gt;이동 할당&lt;/a&gt; 삭제 된 것으로 정의된다 후보 함수 목록에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c15359d771d53339146640e08a9f6b2381e9698c" translate="yes" xml:space="preserve">
          <source>Defaulted three-way comparison</source>
          <target state="translated">기본 3 방향 비교</target>
        </trans-unit>
        <trans-unit id="0d3e84ae80c406b63d16e374e352e4fbc1757b8e" translate="yes" xml:space="preserve">
          <source>Defaulted two-way comparisons</source>
          <target state="translated">기본 양방향 비교</target>
        </trans-unit>
        <trans-unit id="43b373538581e7f5ef6967a217af2f40753b8e90" translate="yes" xml:space="preserve">
          <source>Defaulting of the relational operators can be useful in order to create functions whose addresses may be taken. For other uses, it is sufficient to provide only the &lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">관계 연산자의 기본 설정은 주소를 가질 수있는 함수를 작성하는 데 유용 할 수 있습니다. 다른 용도로는 &lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt; 만 제공하면 충분합니다 .</target>
        </trans-unit>
        <trans-unit id="413a04c8f38ffa8ac95467151f9a11a7e831ebd9" translate="yes" xml:space="preserve">
          <source>Defect Reports</source>
          <target state="translated">결함 보고서</target>
        </trans-unit>
        <trans-unit id="d2f347d439c709567d4485e4cce1ddf0c578140a" translate="yes" xml:space="preserve">
          <source>Defect report</source>
          <target state="translated">결함 보고서</target>
        </trans-unit>
        <trans-unit id="f3b22ab84cd0d03671c5f246c9cf73802cd68073" translate="yes" xml:space="preserve">
          <source>Defect reports</source>
          <target state="translated">결함 보고서</target>
        </trans-unit>
        <trans-unit id="84aa8ba66f467f94209906300dfa4ab255335e46" translate="yes" xml:space="preserve">
          <source>Deferencing a &lt;code&gt;proxy&lt;/code&gt; object with &lt;code&gt;operator*&lt;/code&gt; yields the stored character.</source>
          <target state="translated">&lt;code&gt;operator*&lt;/code&gt; 로 &lt;code&gt;proxy&lt;/code&gt; 객체를 참조 하면 저장된 문자가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="1b7786573f501951512e7e922f459f44752443ca" translate="yes" xml:space="preserve">
          <source>Deferred dynamic initialization</source>
          <target state="translated">지연된 동적 초기화</target>
        </trans-unit>
        <trans-unit id="7db7e51a57cdf6895bec7a84a47b1bed5bbfff2c" translate="yes" xml:space="preserve">
          <source>Define OUTERMOST_ALLOC_TRAITS(x) as &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;decltype(OUTERMOST(x))&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">OUTERMOST_ALLOC_TRAITS (x)를 &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;decltype(OUTERMOST(x))&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b7002324a3aec8c88291bfa1680eb235ffb1b72" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b0b6d36300a786a152649f0bd86a8c7e1b213867" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="a85c944e71e11dff92b178caa9419af06c1fc911" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="1c429464c4728b515cfd5afb80058f030a383777" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="755c8c71ed5d89dfcbdaccc0bc3f8a685593fcd0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="04161c0ec898822123bd3eb3eb79061da2a4ed05" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f2a6aa1f6103d82ec0139f53d92b39e94d1ee500" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt; 헤더에 정의</target>
        </trans-unit>
        <trans-unit id="03572eff5845d3fdd92a662712e93c3993b90da7" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="fffd5ba0b5b3d804dd5ca0872d39b70ef2592b2c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cfloat&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cfloat&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="622e7edad04b81beff1024ad709bcc582d594c6f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;charconv&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;charconv&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="a7ee518eede4d53656029efb2dfc6d7adc3400a7" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2e85ef1c7bc1657647f75fae28c1d9e5f1b13c5f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d7187c70d9a8ea62e01f7e76c500b8e52014ab63" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;climits&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;climits&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="5dfa3052c3cccbe16207d38b25ebfa222dacf45f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="ca1158bf3bddd4fc7aa82b841215549825bbb2bf" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="9fbf573c1542ff704c3b7a10bb631c7604201454" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="436267303f934d12f02c601016dbcb073531ae5e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;compare&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;compare&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b10aac2152df52489add5d6c4a9e0bbf10f5c9bd" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;complex&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;complex&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="db2f7b5dd14eeab1a7a62640a50799c0df3ac0d6" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="37e6b12ecef54b2f4e594a005f788fa0682bc228" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;condition_variable&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;condition_variable&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b5d48c84894e8ecbb79bffbfe29d03a71557a851" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;contract&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;contract&amp;gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="136acaaaaa748466d7c1a502bc8cc47182f288a1" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7d97ce127cfb7a32e7ac0b9cb3620de99ec32820" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2ea037c3802e8c1337efcc2beb3f1567eae2f263" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;(until C++20)</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt; 에 정의 됨 (C ++ 20까지)</target>
        </trans-unit>
        <trans-unit id="3a074aa94a3389ca8a71557463067221a7673e7d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7f14e501602e64ad69bd477e5f9b638fe15b1268" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;(until C++20)</source>
          <target state="translated">&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt; 헤더에 정의 됨 (C ++ 20까지)</target>
        </trans-unit>
        <trans-unit id="a78ec1da5d17ea9bad31d3792a29be2c5759050a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="5d49d83dabb1f994b6a89a039897090a9de5c72f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="3712b97fc6d816ec1a256595898d75e5cc976f0d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="756208695e22ed6687f51b6e92d537e059f5a748" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="23e497356ecadb42d5681449abaa2d34b4c603a0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="20d3158d6ddecdb26cadea6a7bb4bb53d002484d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;ctime&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;ctime&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="0958a463db000de96a48bbd475f997c73b9e295e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="3b311de0a28d5da40649b167fb713534d13b9471" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="ae0d5b1d9de7a2d06fd5ff47c6d1a2f64013f916" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2f2e07cf1ea12c8a1218174d05ea51bfb9c617b7" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;exception&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;exception&amp;gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="91823408d6ada0aa428271157d268809172ea33f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;execution&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;execution&amp;gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="ea2553c3d87a089527d41e9d55ee2d8c28adc47f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="07046224267b8233ed08a6e34ed6d6a341152686" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;fstream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;fstream&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="78669189f5a6ef572cc871add6f3198d9a0578aa" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7bddc36739de116e7ac35792df8d6cd439d4599f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;future&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;future&amp;gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d145b21cc1b9d478b94a18390134c6b459a4b9a1" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="1732c9a921cccaad0497a2644f8120fbc0009933" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;ios&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;ios&amp;gt;&lt;/code&gt; 헤더에서 정의</target>
        </trans-unit>
        <trans-unit id="dff5dbee8d9c864a20c34dc7cd881e2285ebea1f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="fd09337b8f56baf0751eb68fc7f06da12e8a84d2" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="a7930bf497440167b7272df9327e44d00bb39084" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="a730f666771c61df11572636deb7015521991d70" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="607658adaec838a7fb6f67b94d1079d17cbe5cd3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt; 헤더에 정의</target>
        </trans-unit>
        <trans-unit id="9d0ecbed50d5482e1927204affeba74adb2f2997" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="55207e1bcb066bfaefa64a79631010e9d6c5c2d6" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;memory_resource&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;memory_resource&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="05617c26a07270f916078ae5c17cb3fe480bdb84" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="119aa33a1271fa8bf72dcf598999000097f0283f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="1fa0bba3aa7a1698ffb5761a449982c99d853ad4" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="7a85d9cb2dec495c585ea935ed2622954fbff088" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;optional&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;optional&amp;gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="7241b5ab12cb753ea3f43d4eaed5adbc70e76467" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="faa16319c2e7ade82a4eaafddd36e356611d71e5" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f9fc2b8e9c71920d16bd9ee153f26098136cb497" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="051bc6c488684cb9adb77a7b72c4b62bc423c07c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="b938bace9c8d9d9b47b40216754864ba1d024ee3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="406bd6de880f74cdbcf953ec3610b41720c7d6f0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d38f7fc2163856e774a6af122eaca98a7705b461" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;shared_mutex&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;shared_mutex&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="bfc36c7448040bd354f0d5ec8511ccff871868c0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;sstream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;sstream&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="53031c947e0190bfa35551ccad1808f03a3dc551" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="44bd52d9978efb0a1decd9140bc80c9c2ad81856" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f40006a8df0f50dbe4fab690730122da19420789" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="c56c5c437aa5be35c92e925b7a64322377c217bd" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;streambuf&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;streambuf&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d927557e4b99e2932f3f0487a3bb4c4195a7dd0b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="5f2f4924c9111a87c78eb8e72b806ac6f2995927" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="ffc0f39149a09c34fb6bc0fabeaa872a9d97c589" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;strstream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;strstream&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="52fe330abb1bf7bb17312d6dcad1e95d85833c99" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;syncstream&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;syncstream&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="0c925bdb4907486e30bb9fc70948d0cd426616eb" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="11c04e8975d3cd63794087e384ed3f1e755bd81a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="dd4a1afc7866979d8ed461fe3703fe43c3986356" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2c21d0644de6d71ebf34c033f96abc604bbbfa2f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;typeindex&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;typeindex&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="3d3a8f6d29758cc5b73b49b97f9384f3d6ef4f0c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;typeinfo&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;typeinfo&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d7c62f24d308310c4dc68addc21cae4f46b97766" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="11c329d3fbb996b8403ffc14f9c43e8eea5a7ce8" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;valarray&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;valarray&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="3ba0db2f37d84472d34bd5ef427add2a60a2afcc" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&amp;lt;variant&amp;gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&amp;lt;variant&amp;gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="187679f52dc36114d84d0d7620527eb45525bdb0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../../header/functional&quot;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../../header/functional&quot;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2d44346fe3dc1c266151cee9671dcd0d16ec548a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../../header/locale&quot;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../../header/locale&quot;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의</target>
        </trans-unit>
        <trans-unit id="8c46a20a69d65ed3528789941e74c4c97de7b684" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../../header/thread&quot;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../../header/thread&quot;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="34a41877a438051a3d754ea65c882d899fd86d78" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/algorithm&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/algorithm&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="685f05e4a1f039c82fe26323265e4e1028af0501" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/any&quot;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/any&quot;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="65e9d86e94c3a810f293e371428ecacc8110e75b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/array&quot;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/array&quot;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="f6e83387e3866acc212a296490a8e8897596e6c0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/atomic&quot;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/atomic&quot;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="8fcd5bf3619531bf9d8d5a14c18ae2a146087257" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cctype&quot;&gt;&amp;lt;cctype&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cctype&quot;&gt;&amp;lt;cctype&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b52cb20ccedcd62337bc14b6b073db635a3792aa" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cfenv&quot;&gt;&amp;lt;cfenv&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cfenv&quot;&gt;&amp;lt;cfenv&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f2b996add91ab653ea67e6f1f2e053a0ce9dff7e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cfloat&quot;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cfloat&quot;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="be64c53f7f84e90848989b739d5907e0f51f4fef" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/chrono&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/chrono&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="984c997b073137ca1e2dc1e8bdf46727a71a947a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cinttypes&quot;&gt;&amp;lt;cinttypes&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cinttypes&quot;&gt;&amp;lt;cinttypes&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="79fa132d0f519f0bb187c623aea83e96e944ea21" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cmath&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cmath&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="897612870f498b3a7f0134ea9d935d75dde1fff0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/compare&quot;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/compare&quot;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="374fef0925458971d756c602b94c20d85949855e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/complex&quot;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/complex&quot;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7d4e34c902fbc3a9372c0379ec0e937bdab08437" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/concepts&quot;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/concepts&quot;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="dac4bcf85db3558481f14cd08bf0c77ef1833bfd" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/csetjmp&quot;&gt;&amp;lt;csetjmp&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/csetjmp&quot;&gt;&amp;lt;csetjmp&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="13f80e7b96abaf6b87756c20261a6955ed10be00" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/csignal&quot;&gt;&amp;lt;csignal&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/csignal&quot;&gt;&amp;lt;csignal&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="bc55f711fc441f57c65126f59cdbf7db0cadcbca" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cstdarg&quot;&gt;&amp;lt;cstdarg&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cstdarg&quot;&gt;&amp;lt;cstdarg&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="56f1715218c58690d0991b8f4e1a1d7a0d6315d3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cstdio&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cstdio&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2ad8bf1eed4589d397c0322576eb52c780f146d8" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cstdlib&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cstdlib&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="fbc439d5d227b3da61a6624b2fbf7c57959a700f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cstring&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../header/cstring&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="406dada5fc4dc6fd9e7012377c553ed8ef73ce70" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/ctime&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/ctime&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="98bbc984cfa369828eda431d2ee167514a13d3f9" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cuchar&quot;&gt;&amp;lt;cuchar&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cuchar&quot;&gt;&amp;lt;cuchar&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f782a96e882b2c1ddc288a110611003d61d1610c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cwchar&quot;&gt;&amp;lt;cwchar&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cwchar&quot;&gt;&amp;lt;cwchar&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="df7fe308e0aedafeca3990f17960c3c11a963e87" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/cwctype&quot;&gt;&amp;lt;cwctype&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/cwctype&quot;&gt;&amp;lt;cwctype&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b011f4c8687911b6a296c2093e07136dd9ae1d68" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/deque&quot;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/deque&quot;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="534d1881cd3d5b235f5e6bba6ae3c57506bed9d8" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/exception&quot;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/exception&quot;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="79af84d458ac2629ec82536a2fdd45518831b4f3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/filesystem&quot;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/filesystem&quot;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="9cd2fd5163f3979f9db17af458ee41c56995c9f5" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/forward_list&quot;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/forward_list&quot;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="bcf09e606db4d11a6082f911a0da6f765872e6d7" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/functional&quot;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/functional&quot;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="e7e36ae89f95c4a5a043082d927bc3ac4406c533" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/future&quot;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../header/future&quot;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="28489f8203fa51d660595fcd97cdca76f8948b0b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/iomanip&quot;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/iomanip&quot;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="9791bd69d40bd93a636a5edb40217c0e0bca94f5" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/ios&quot;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../header/ios&quot;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에서 정의</target>
        </trans-unit>
        <trans-unit id="c69222ec853c7b6fe230d7f656f2a0ea82189cc5" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/istream&quot;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../header/istream&quot;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="558a085c5d7a5c44866db07ea297e7518f71e9fd" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/iterator&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/iterator&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="46adfaae3a1e35360eae073ce6bac79e6c00c5da" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/limits&quot;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/limits&quot;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="6d1ed809da7620471841688a5db17c59cc36bffe" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/list&quot;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/list&quot;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="8b897f0d24e91bbfabe0889fd6d6d9c5889e0b26" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/locale&quot;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../header/locale&quot;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의</target>
        </trans-unit>
        <trans-unit id="9ec7b07559694f2d20bfd2c49102ff03a403baf2" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/map&quot;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/map&quot;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="628ff141852e8211b7937247af6a22e5febbd357" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/memory&quot;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/memory&quot;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="aa44399915f8afd596209f04e2220e6521dffd3e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/new&quot;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/new&quot;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="0585f525560bef47017ccf3cc1f3c76fa4d55120" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/optional&quot;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/optional&quot;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="c9bf316a212f2bcf5e8a68bc6f3f28a99be9980d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/ostream&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/ostream&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="31bc04d1489c8e0ffbbeb9fc56425f21eec1c5f9" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/queue&quot;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/queue&quot;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="e27d625df9c193b365510ec26f34ccf382b2956b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/random&quot;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/random&quot;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="6a8c659e55e8d9b1d470f1fb7ecf1aae01890b35" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/ranges&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/ranges&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="5a76e081b14dfed53d59bb152d5c066ec5942f74" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/ratio&quot;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/ratio&quot;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="4ac2cd1c1dd1e42e3206c455333477dede174273" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/regex&quot;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/regex&quot;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="d834762a100dce692d04a341b477161f11cd06e3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/scoped_allocator&quot;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/scoped_allocator&quot;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="6aeff1b20c59efd54171d76a9ee37acb87f4ae82" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/set&quot;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/set&quot;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b6c138f68a123e56aab6ab8f50d6293d24371c89" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/span&quot;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/span&quot;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f8c8dbd47c1a1af4338fe5bced8bb93d93b9f4f1" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/stack&quot;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/stack&quot;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="cbd3b88474c8ea93791c06fc3282698836046597" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/stdexcept&quot;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/stdexcept&quot;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="945322de526ddf0ac95a1d247c09b12e7f3c913b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../header/string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="98b0c867f0a365f34071996b56fd07353476ade8" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/string_view&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/string_view&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="6c5a6227535eff136bbc49288978c45a96bd5b84" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/system_error&quot;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/system_error&quot;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2d13401b077fba38b4d081052b8d08925d5672bf" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/thread&quot;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/thread&quot;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="6d6aec65991df5bb8e39484814c14a57aec71301" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/tuple&quot;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/tuple&quot;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="14c77a843888f6c61a7269c45f04d18261f7d920" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/typeindex&quot;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/typeindex&quot;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="a6ae95167260f3b6af5f984e206701f4b157071a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/unordered_map&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/unordered_map&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="26b55520f4a8385b55adeea257a9c4891e4b2733" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/unordered_set&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/unordered_set&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="c6011d0a28a76d63ee46f7682d30eb95f7362adf" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/utility&quot;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/utility&quot;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="80111172444509fe2a8f767756be8768e33519a1" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/valarray&quot;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/valarray&quot;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="1204fd93496741dfe28307840879f7518060216d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/variant&quot;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/variant&quot;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="51fb2972d01489c2ec8e27314fcc1a89266e34bc" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../../header/vector&quot;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../../header/vector&quot;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b524186eab605c8202b143d1cf28d2b4d7f53f75" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/algorithm&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/algorithm&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="1e9239fa7e874f94f230a2a376e53c589791ef30" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/any&quot;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/any&quot;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b8c5323f550287f881043b3c087150b807d7ba5d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/array&quot;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/array&quot;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="3ffc00e7df91fdfb437b07f7bafcaee0075e3947" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/atomic&quot;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/atomic&quot;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="96cb0e0f12a980db0cbab225d93c64ff417a9724" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/bit&quot;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/bit&quot;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="a7bec353350c6575337de3c99838b1b04c7b8174" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/bitset&quot;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/bitset&quot;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d51a4393f4cadb909e9226bf318e27987a80c604" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cassert&quot;&gt;&amp;lt;cassert&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/cassert&quot;&gt;&amp;lt;cassert&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="fd85b7b0d69065539c4cb10e7902ab20cf6560f2" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cerrno&quot;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/cerrno&quot;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의</target>
        </trans-unit>
        <trans-unit id="62a7584658896911bb0987360d2cceb299d7b465" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/charconv&quot;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/charconv&quot;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="418fd99ab58d5c214217c535b9bf9cf34a942113" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/chrono&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/chrono&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="829fff3f345e911446767fc75c3bc08e8651da62" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/clocale&quot;&gt;&amp;lt;clocale&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/clocale&quot;&gt;&amp;lt;clocale&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="035066f6a17abc3fcacc82ac64104dec51492081" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cmath&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/cmath&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7c9f1ae5fe8f7548dd9b8bfe3f1d965b207a287b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/codecvt&quot;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/codecvt&quot;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="c59f4c5f93ffd94e15584f18fa84679453006e55" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/complex&quot;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/complex&quot;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7f2058694b429b1c658ef374e4b5acb5bd7ba0dc" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/concepts&quot;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/concepts&quot;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d0d299006a6f4054d2b3dde1676b2c0d728b4742" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/condition_variable&quot;&gt;&amp;lt;condition_variable&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/condition_variable&quot;&gt;&amp;lt;condition_variable&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="683ce6379db9667d65d8758926ce173b52427118" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/contract&quot;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/contract&quot;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="d98148a11c37152fd2f2396a8c996d123bc9f2d2" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cstddef&quot;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/cstddef&quot;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="3220fb7287e9a51a334429a7765eb608c71c069b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cstdio&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/cstdio&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="da09c8f76271dbbaf5fc907a4172f93767c4acd9" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cstdlib&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/cstdlib&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="c1c4c77a1629cb54592e6df3268d60a9afc8bca4" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cstring&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/cstring&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="e385cbcd4d2268b05f62be7125ea37961ed8c2c0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/ctime&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/ctime&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="75cc5dae5834678fc5a409f50402028440331e6e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/cwchar&quot;&gt;&amp;lt;cwchar&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/cwchar&quot;&gt;&amp;lt;cwchar&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="cfa9c3b5369052352885fb9fef31f83aed8d0644" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/deque&quot;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/deque&quot;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d277ee24d144dc597b3bf7ef72e8a6a34650182d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/exception&quot;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/exception&quot;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="e7ab9262525d868cde2d3cc2d6425ec8f5bdf71e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/execution&quot;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/execution&quot;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="1acfb1608d405c6a4e53e12bba0a298397d818e9" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/filesystem&quot;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/filesystem&quot;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="5285278f50b4e113e70a4cf28bc5fa7f262095c3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="56b4ef11932bdbc28e455292881dc8e3f352ba93" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/fstream&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/fstream&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="bcca24edce6d421b0a1ffbcaf5491a3efee6497c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/functional&quot;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/functional&quot;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="16da4e1bf82adedc65f1947573d4a65337343bf7" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/future&quot;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/future&quot;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="004cdb7f5cdbac64ae2240007f800205c06ad831" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/initializer_list&quot;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/initializer_list&quot;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="c0994f207db65222d2e4f1cc4cb96215c3447e33" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/ios&quot;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/ios&quot;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에서 정의</target>
        </trans-unit>
        <trans-unit id="52abf2566637c92aff802c6dbbdead6a9e284313" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/iostream&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/iostream&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b3c94cf1950ee3265ea77e2ff921d0fdcef404d2" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/istream&quot;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/istream&quot;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="933b4679353f81a9a421d7a127e205737627c35c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/iterator&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/iterator&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="64b62224d63c182938d680605cd4689e16d54a8f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/limits&quot;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/limits&quot;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="5a42a4f8691607ad9db0419fd464fa324d103ec7" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/list&quot;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/list&quot;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="37a025b77935057a8203a12d8b0db73fdf341b66" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/locale&quot;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/locale&quot;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의</target>
        </trans-unit>
        <trans-unit id="fd948158767fe21c2880f56dcf4536ec1ffa3d07" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/map&quot;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/map&quot;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2b2342f1cbeba3ac36fcf5fbc3a9b99652b0744f" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/memory&quot;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/memory&quot;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="fd5a054e1485bce892b8193863a96caac5406e6d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/memory_resource&quot;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/memory_resource&quot;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="ccf1a50054c4d319b307322d9220c09ab9c0a829" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/mutex&quot;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/mutex&quot;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="0e69bbbf34b93b14c8577c863c1a4f605dd6c4f1" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/new&quot;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/new&quot;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="56a70aeb76731ae05258d18bf792032e5769e90c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/numeric&quot;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/numeric&quot;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="62c6d6126e71a82e772df646829db32865b6b2eb" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/optional&quot;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/optional&quot;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="3983c036a4975c269fa355c39490405cf8eebff3" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/ostream&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/ostream&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="516fe8de6520829ac4b1ff717ef5edb3e3be6b9c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/queue&quot;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/queue&quot;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="75fc1da3c3f476b49c0c529d891bd2c0c466fb51" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/ranges&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/ranges&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="90c02173433fcbe03d18ecb451bee49819734d1b" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/regex&quot;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/regex&quot;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="fbc0fc0b5ea1240ed99e8d363a22b5fb1ff5a09a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/scoped_allocator&quot;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/scoped_allocator&quot;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="17eea21840a92fb6ea5e752320dbfd9d7097236d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/set&quot;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/set&quot;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="dc990092317666be867a6088e022d4854309425a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/shared_mutex&quot;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/shared_mutex&quot;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="445d6444cf9c7a741c2ccfec68a4aa7edb7f9c95" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/span&quot;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/span&quot;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="2e5213ad46e74eaae20f4cafa718d746ba40d79e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/sstream&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/sstream&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="e7be6b7ab05bc10461d0239ce2ccac51a06656d9" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/stack&quot;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/stack&quot;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="e492a5b7cc2c16ac57c41be8e2e6173ad4a11923" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/stdexcept&quot;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/stdexcept&quot;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="ed569e2cd855376d77619d81257c045919fc5cec" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/streambuf&quot;&gt;&amp;lt;streambuf&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/streambuf&quot;&gt;&amp;lt;streambuf&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f9ac67f187f8fa4f6d9c2a093c2da480cd52418c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../header/string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b6f66d98ff63d75dd64622e6f86e18e786003a5c" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="3486ea14a8068edd38695b8b2470ed365a25e42d" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/strstream&quot;&gt;&amp;lt;strstream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/strstream&quot;&gt;&amp;lt;strstream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="7d6c8bc932f4eb3fe6d125ab034fd0ec265235ae" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/syncstream&quot;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/syncstream&quot;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="e9390ecba334d37d78fd91b3f7c0f15cc97cfff4" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/system_error&quot;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/system_error&quot;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="b67f61dfe96489cbfbf13a9142628598f4e45491" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/thread&quot;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/thread&quot;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d81ffc0ecf834550ab6cea44993a03ac527367c4" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/tuple&quot;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/tuple&quot;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="8feb9ab01eaeac50fd8532c5969920bc7c79bfc4" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/type_traits&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/type_traits&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f9a4de1af92a78e291add7127f2c0e5484a97acf" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/typeindex&quot;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/typeindex&quot;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="c8181c6ca7fdf3023b4e2acd7633f1cf0d78c051" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/typeinfo&quot;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/typeinfo&quot;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="4b9d67071df79d4982cfd27433dfd33ee4f30e2a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="1615f0569d2e827380ce099d565a9b67e9532d2e" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="a0fcd851ac5ff193bdaab465576c4be7699e6411" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/utility&quot;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/utility&quot;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="9078b3b7ec19050da9b218ece40b82030596ae5a" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/valarray&quot;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/valarray&quot;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="1d5493e0218090adec239dd90f736731e4389ec0" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/variant&quot;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/variant&quot;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="4fd6f342e0efc87f5e120632057495727e03f672" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;../header/vector&quot;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;../header/vector&quot;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="d0eebef9e0e578e3dd3227aca85d28788cbcc581" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;header/ranges&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">헤더 &lt;code&gt;&lt;a href=&quot;header/ranges&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="24d125f1289cffa7d2d03cb3910ef00941079b90" translate="yes" xml:space="preserve">
          <source>Defined in header &lt;code&gt;&lt;a href=&quot;header/string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;header/string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt; 헤더에 정의 됨</target>
        </trans-unit>
        <trans-unit id="52163f3915ed8d03b4b3309017aeb31a3bcf2a93" translate="yes" xml:space="preserve">
          <source>Defined in inline namespace &lt;code&gt;std::literals::chrono_literals&lt;/code&gt;</source>
          <target state="translated">인라인 네임 스페이스 &lt;code&gt;std::literals::chrono_literals&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="4b62fb260aded32c5358acefdbe3540a2393ce68" translate="yes" xml:space="preserve">
          <source>Defined in inline namespace &lt;code&gt;std::literals::complex_literals&lt;/code&gt;</source>
          <target state="translated">인라인 네임 스페이스 &lt;code&gt;std::literals::complex_literals&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="92e3d93935e9c0cd5cd8a5e6838a0a21523c4f3d" translate="yes" xml:space="preserve">
          <source>Defined in inline namespace &lt;code&gt;std::literals::string_literals&lt;/code&gt;</source>
          <target state="translated">인라인 네임 스페이스 &lt;code&gt;std::literals::string_literals&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="1f6640d0b5afff8c0982e7447d398f959247ee82" translate="yes" xml:space="preserve">
          <source>Defined in inline namespace &lt;code&gt;std::literals::string_view_literals&lt;/code&gt;</source>
          <target state="translated">인라인 네임 스페이스 &lt;code&gt;std::literals::string_view_literals&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="02bd587718d4b7a6d67f8a15a1e87e9515231fbd" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;execution&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;execution&lt;/code&gt; 정의</target>
        </trans-unit>
        <trans-unit id="f6f9e18c9f9ac025f277ea80ff4b5e05d1b149d1" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;filesystem&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;filesystem&lt;/code&gt; 정의</target>
        </trans-unit>
        <trans-unit id="8fbe5106a4107832d48e5ef26ab2da5962ec6b28" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;pmr&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;pmr&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="fb98d58fe36bb62a7c5172220a3175273e809a75" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::chrono&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::chrono&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="ab5e8ccb7b3e8df21b2a04650524c2d61156b4dc" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::execution&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::execution&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="8a55363bb3f868efc19c08ece0d2fac4242590ce" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::placeholders&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::placeholders&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="c20e93b0752b41de7774e8e2322b960d7428cfcb" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::ranges&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::ranges&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="75c8cb42400e2f42798ef34fdd0b067739c32018" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::regex_constants&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::regex_constants&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="3fc290c1e54d0842d8cb2ab436d4881aed4889d1" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::rel_ops&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::rel_ops&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="c326d9f0176372dd9373af363ad5966661d11bbb" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std::this_thread&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std::this_thread&lt;/code&gt; 정의 됨</target>
        </trans-unit>
        <trans-unit id="fc5e0b9672fe16fddeac40802b0cbbad2a3a74d1" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;std&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;std&lt;/code&gt; 에 정의</target>
        </trans-unit>
        <trans-unit id="a867882930a6d80b4a8bfca743b614272c2e99c2" translate="yes" xml:space="preserve">
          <source>Defined in namespace &lt;code&gt;this_thread&lt;/code&gt;</source>
          <target state="translated">네임 스페이스 &lt;code&gt;this_thread&lt;/code&gt; 에 정의 됨</target>
        </trans-unit>
        <trans-unit id="f7cd8ddaa42db755c67e2c1cebeb18479de512f7" translate="yes" xml:space="preserve">
          <source>Defined operations</source>
          <target state="translated">정의 된 작업</target>
        </trans-unit>
        <trans-unit id="5cb56809f3919f8a7f1fbb02679c6251f18aa5ea" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;&lt;a href=&quot;../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; 정의합니다</target>
        </trans-unit>
        <trans-unit id="758e8e856491ac3d93e16d4f2b657612b6162cfb" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception to report that an attempt was made to convert a ambiguous &lt;code&gt;std::chrono::local_time&lt;/code&gt; to a &lt;code&gt;std::chrono::sys_time&lt;/code&gt; without specifying a &lt;code&gt;std::chrono::choose&lt;/code&gt; (such as &lt;code&gt;choose::earliest&lt;/code&gt; or &lt;code&gt;choose::latest&lt;/code&gt;).</source>
          <target state="translated">객체의 유형이 시도는 모호한 변환하기 위해 만들어 졌다고 보고서에 예외로 던져 질을 정의 &lt;code&gt;std::chrono::local_time&lt;/code&gt; 에 대한 &lt;code&gt;std::chrono::sys_time&lt;/code&gt; 지정하지 않고 &lt;code&gt;std::chrono::choose&lt;/code&gt; 으로 (예를 &lt;code&gt;choose::earliest&lt;/code&gt; 또는 &lt;code&gt;choose::latest&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0c217abeaafe3719dee97644c57473dc58cec800" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception to report that an attempt was made to convert a nonexistent &lt;code&gt;std::chrono::local_time&lt;/code&gt; to a &lt;code&gt;std::chrono::sys_time&lt;/code&gt; without specifying a &lt;code&gt;std::chrono::choose&lt;/code&gt; (such as &lt;code&gt;choose::earliest&lt;/code&gt; or &lt;code&gt;choose::latest&lt;/code&gt;).</source>
          <target state="translated">객체의 유형이 시도 변환 만들어 졌다고 보고서에 예외로 던져 질을 정의 존재하지 않는 &lt;code&gt;std::chrono::local_time&lt;/code&gt; 에 대한 &lt;code&gt;std::chrono::sys_time&lt;/code&gt; 지정하지 않고 &lt;code&gt;std::chrono::choose&lt;/code&gt; 으로 (예를 &lt;code&gt;choose::earliest&lt;/code&gt; 또는 &lt;code&gt;choose::latest&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="854e6efb23b9879bdfeeeec76d11d3c57c78842e" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It can be used to report arithmetic overflow errors (that is, situations where a result of a computation is too large for the destination type).</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 산술 오버플로 오류 (즉, 계산 결과가 대상 유형에 비해 너무 큰 상황)를보고하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="553324e37510b46c787dc9928ff0087c6d2e608a" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It can be used to report range errors (that is, situations where a result of a computation cannot be represented by the destination type).</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 범위 오류 (즉, 계산 결과를 대상 유형으로 표시 할 수없는 상황)를보고하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60496e05cea8d78394c6697b6ce5ac922d51a6cb" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It may be used by the implementation to report domain errors, that is, situations where the inputs are outside of the domain on which an operation is defined.</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 구현에서 도메인 오류, 즉 입력이 조작이 정의 된 도메인 외부에있는 상황을보고하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51ade43643d56852176d39238afb0e85587352f9" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It may be used to report arithmetic underflow errors (that is, situations where the result of a computation is a subnormal floating-point value).</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 산술 언더 플로우 오류 (즉, 계산 결과가 비정규 부동 소수점 값인 상황)를보고하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="701cab6f4e14c2038b0a71cad17e4b8b5b8f72c9" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable.</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 논리적 전제 조건 위반 또는 클래스 불변 값과 같이 프로그램 내에서 잘못된 로직의 결과 인 오류를보고하며 예방할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50c5ff8cb8cfbe176f01cf5ea922238db2c314be" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It reports errors that are consequence of attempt to access elements out of defined range.</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 정의 된 범위를 벗어난 요소에 액세스하려고 시도한 결과로 발생하는 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="95c1c97e4b1e9947c7de0beb151a6a623d535e06" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It reports errors that are due to events beyond the scope of the program and can not be easily predicted.</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 프로그램 범위를 벗어난 이벤트로 인한 오류를보고하며 쉽게 예측할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="55f1a8ab86d5dbfbedd7b95cb1f5ae6ec708fe99" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It reports errors that arise because an argument value has not been accepted.</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 인수 값이 승인되지 않아 발생하는 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="904a97b8bdbd0dd2abc60a5130ad00b75f469bfc" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown as exception. It reports errors that result from attempts to exceed implementation defined length limits for some object.</source>
          <target state="translated">예외로 throw 할 객체 유형을 정의합니다. 일부 오브젝트에 대해 구현 정의 길이 제한을 초과하려는 시도로 인해 발생한 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="3345610ec8208dba5b632dfefb4bda18971579f1" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown by &lt;a href=&quot;value&quot;&gt;&lt;code&gt;std::optional::value&lt;/code&gt;&lt;/a&gt; when accessing an optional object that does not contain a value.</source>
          <target state="translated">&lt;a href=&quot;value&quot;&gt; &lt;code&gt;std::optional::value&lt;/code&gt; &lt;/a&gt; 이 포함되지 않은 선택적 객체에 액세스 할 때 std :: optional :: value에 의해 발생 될 객체 유형을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="cbaddb3371763de41bf5da1072aa6d697564609d" translate="yes" xml:space="preserve">
          <source>Defines a type of object to be thrown by the value-returning forms of &lt;code&gt;&lt;a href=&quot;any_cast&quot;&gt;std::any_cast&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">실패시 &lt;code&gt;&lt;a href=&quot;any_cast&quot;&gt;std::any_cast&lt;/a&gt;&lt;/code&gt; 의 값을 반환하는 형식에 의해 발생되는 개체 유형을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="90a12bfd024badabaab30980f61542f3c815df32" translate="yes" xml:space="preserve">
          <source>Defines a type that can be used to represent a set of constant values or any combination of those values. This trait is typically implemented by integer types, &lt;code&gt;&lt;a href=&quot;../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;, or enumerations (scoped and unscoped) with additional operator overloads.</source>
          <target state="translated">상수 값 세트 또는 해당 값의 조합을 나타내는 데 사용할 수있는 유형을 정의합니다. 이 특성은 일반적으로 정수 연산자 , &lt;code&gt;&lt;a href=&quot;../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; 또는 추가 연산자 오버로드가 포함 된 열거 (범위 및 범위가 지정되지 않음)로 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="201309873622e37fc8d4b5fcde5358675150e58f" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; that can be evaluated at compile time.</source>
          <target state="translated">컴파일 타임에 평가할 수 있는 &lt;a href=&quot;expressions&quot;&gt;표현식&lt;/a&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="65895f663917521b7684fa14a678716dce77effd" translate="yes" xml:space="preserve">
          <source>Defines an abstract type which cannot be instantiated, but can be used as a base class.</source>
          <target state="translated">인스턴스화 할 수 없지만 기본 클래스로 사용할 수있는 추상 유형을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="3812a71d1d3ec10a837f3f382420e5ac8f74675e" translate="yes" xml:space="preserve">
          <source>Defines an exception type that can be used to cancel and roll back an atomic transaction initiated by the keyword &lt;a href=&quot;../language/transactional_memory&quot;&gt;&lt;code&gt;atomic_cancel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">키워드 &lt;a href=&quot;../language/transactional_memory&quot;&gt; &lt;code&gt;atomic_cancel&lt;/code&gt; 에&lt;/a&gt; 의해 시작된 원자 트랜잭션을 취소하고 롤백하는 데 사용할 수있는 예외 유형을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="929e38e7505a1fa8a6beab86560828679425ea6e" translate="yes" xml:space="preserve">
          <source>Defines placeholders for the unbound arguments in a std::bind expression</source>
          <target state="translated">std :: bind 표현식에서 언 바운드 인수의 자리 표시자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="49646220082ede39e3f153e41f0f79c8c113c1e1" translate="yes" xml:space="preserve">
          <source>Defines the category of an iterator. Each tag is an empty type and corresponds to one of the five(until C++20)six(since C++20) iterator categories:</source>
          <target state="translated">반복자의 범주를 정의합니다. 각 태그는 빈 유형이며 5 개 (C ++ 20까지) 6 개 (C ++ 20부터) 반복자 범주 중 하나에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="d34e471b76278d14ae3462ab78ffc7141358900f" translate="yes" xml:space="preserve">
          <source>Defines the expression which can be used to initialize &lt;code&gt;&lt;a href=&quot;atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; to clear (false) state with the statement &lt;code&gt;&lt;a href=&quot;atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt; v = ATOMIC_FLAG_INIT;&lt;/code&gt;. It is unspecified if it can be used with other initialization contexts.</source>
          <target state="translated">로 초기화 사용할 수있는 표현을 정의 &lt;code&gt;&lt;a href=&quot;atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; 문으로 지 웁니다 (거짓) 상태가 &lt;code&gt;&lt;a href=&quot;atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt; v = ATOMIC_FLAG_INIT;&lt;/code&gt; . 다른 초기화 컨텍스트와 함께 사용할 수 있으면 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8fb640dd50202818734f8b5c01ea951ef0d9c48a" translate="yes" xml:space="preserve">
          <source>Defines the semantics of computer memory storage for the purpose of the C++ abstract machine.</source>
          <target state="translated">C ++ 추상 머신을 위해 컴퓨터 메모리 스토리지의 시맨틱을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="0542ae9bba1af034474a2b7152ddc71f0017d9c0" translate="yes" xml:space="preserve">
          <source>Defines the type of exception object thrown to report errors in the regular expressions library.</source>
          <target state="translated">정규식 라이브러리에서 오류를보고하기 위해 발생하는 예외 개체 유형을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="80eb063c97ceebd4ea76813f503698fc7052fc59" translate="yes" xml:space="preserve">
          <source>Defining &lt;code&gt;equiv(a, b)&lt;/code&gt; as &lt;code&gt;!(a &amp;lt; b) &amp;amp;&amp;amp; !(b &amp;lt; a)&lt;/code&gt;, if &lt;code&gt;equiv(a, b)&lt;/code&gt; and &lt;code&gt;equiv(b, c)&lt;/code&gt;, then &lt;code&gt;equiv(a, c)&lt;/code&gt;</source>
          <target state="translated">정의 &lt;code&gt;equiv(a, b)&lt;/code&gt; 등을 &lt;code&gt;!(a &amp;lt; b) &amp;amp;&amp;amp; !(b &amp;lt; a)&lt;/code&gt; , 만약 &lt;code&gt;equiv(a, b)&lt;/code&gt; 및 &lt;code&gt;equiv(b, c)&lt;/code&gt; 다음 &lt;code&gt;equiv(a, c)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf1be2b7ad07bae2fe92475d10173eb638774def" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>
        </trans-unit>
        <trans-unit id="bcfdc0907ccacdbe97a582f530bf0cac78052807" translate="yes" xml:space="preserve">
          <source>Definition of a C++11 constexpr function which computes factorials and a literal type that extends string literals:</source>
          <target state="translated">계승 및 문자열 리터럴을 확장하는 리터럴 유형을 계산하는 C ++ 11 constexpr 함수의 정의 :</target>
        </trans-unit>
        <trans-unit id="bfe1e1dfbf2f100221263b585bf7aa4dce39d8c3" translate="yes" xml:space="preserve">
          <source>Definition outside of its namespace</source>
          <target state="translated">네임 스페이스 외부의 정의</target>
        </trans-unit>
        <trans-unit id="15225baac48fc3d689cb2b0f74b936eff4339ff7" translate="yes" xml:space="preserve">
          <source>Definitions</source>
          <target state="translated">Definitions</target>
        </trans-unit>
        <trans-unit id="d0850b4a184d661ddcdef7091f7ff5f3b7e2c613" translate="yes" xml:space="preserve">
          <source>Definitions and ODR</source>
          <target state="translated">정의 및 ODR</target>
        </trans-unit>
        <trans-unit id="4302c989e3d937c115256b88dde79c67954c4641" translate="yes" xml:space="preserve">
          <source>Definitions of functions include sequences of &lt;a href=&quot;statements&quot;&gt;statements&lt;/a&gt;, some of which include &lt;a href=&quot;expressions&quot;&gt;expressions&lt;/a&gt;, which specify the computations to be performed by the program.</source>
          <target state="translated">함수의 정의에는 일련의 &lt;a href=&quot;statements&quot;&gt;명령문&lt;/a&gt; 이 포함되며, 그 중 일부에는 &lt;a href=&quot;expressions&quot;&gt;표현식&lt;/a&gt; 이 포함 되며 프로그램에서 수행 할 계산을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="57c104813acef4be6b7e4f585311194bc379c951" translate="yes" xml:space="preserve">
          <source>Delegating constructor</source>
          <target state="translated">위임 생성자</target>
        </trans-unit>
        <trans-unit id="0764d131931a2bcd7499c4f987ada3fc0dc2d87a" translate="yes" xml:space="preserve">
          <source>Delegating constructors</source>
          <target state="translated">위임 생성자</target>
        </trans-unit>
        <trans-unit id="d5f92766c5341fccedff26c733e2de98d997fd34" translate="yes" xml:space="preserve">
          <source>Delegating constructors cannot be recursive.</source>
          <target state="translated">위임 생성자는 재귀적일 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="48158a1db6589fe2cf945d957f938af51ed1d2a1" translate="yes" xml:space="preserve">
          <source>Deleted functions</source>
          <target state="translated">삭제 된 기능</target>
        </trans-unit>
        <trans-unit id="06207f3faa7e88eda42715ca5c8c70179f943df3" translate="yes" xml:space="preserve">
          <source>Deleted implicitly-declared copy assignment operator</source>
          <target state="translated">암시 적으로 선언 된 복사 할당 연산자를 삭제했습니다.</target>
        </trans-unit>
        <trans-unit id="ecdb1493a892a1dfc424b9dd7f015a7b679b1c47" translate="yes" xml:space="preserve">
          <source>Deleted implicitly-declared copy constructor</source>
          <target state="translated">암시 적으로 선언 된 복사 생성자 삭제</target>
        </trans-unit>
        <trans-unit id="69c38a1734494471248c099cfc35d4bb2a652041" translate="yes" xml:space="preserve">
          <source>Deleted implicitly-declared default constructor</source>
          <target state="translated">암시 적으로 선언 된 기본 생성자를 삭제했습니다.</target>
        </trans-unit>
        <trans-unit id="0c108b67add00bbf50dcb5e63479b28b023f7813" translate="yes" xml:space="preserve">
          <source>Deleted implicitly-declared destructor</source>
          <target state="translated">암시 적으로 선언 된 소멸자를 삭제했습니다.</target>
        </trans-unit>
        <trans-unit id="80cdeac4b5c620300c5eba755ff645bb43194724" translate="yes" xml:space="preserve">
          <source>Deleted implicitly-declared move assignment operator</source>
          <target state="translated">암시 적으로 선언 된 이동 할당 연산자를 삭제했습니다.</target>
        </trans-unit>
        <trans-unit id="3fcc03029724761aa46496c40a685594f3b2922b" translate="yes" xml:space="preserve">
          <source>Deleted implicitly-declared move constructor</source>
          <target state="translated">암시 적으로 선언 된 이동 생성자를 삭제했습니다.</target>
        </trans-unit>
        <trans-unit id="d5c2f3b1691c162974666c6b32fe851f22334bf1" translate="yes" xml:space="preserve">
          <source>Deletes the file identified by character string pointed to by &lt;code&gt;fname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fname&lt;/code&gt; 이 가리키는 문자열로 식별 된 파일을 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="2955e3de18d568a77f11e806e6b89eaa0486dfd6" translate="yes" xml:space="preserve">
          <source>Deleting an object through pointer to base invokes undefined behavior unless the destructor in the base class is &lt;a href=&quot;virtual&quot;&gt;virtual&lt;/a&gt;:</source>
          <target state="translated">기본에 대한 포인터를 통해 객체를 삭제하면 기본 클래스의 소멸자가 &lt;a href=&quot;virtual&quot;&gt;가상&lt;/a&gt; 이 아닌 한 정의되지 않은 동작이 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="5887b33001cc70c593715f50dfab15ef60b475f4" translate="yes" xml:space="preserve">
          <source>Demonstates the underlying bit structure of the denorm_min() and prints the values.</source>
          <target state="translated">denorm_min ()의 기본 비트 구조를 악마 화하고 값을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="4ac5dd3274eaac1a40a4bc8cdc04692fd997feae" translate="yes" xml:space="preserve">
          <source>Demonstrates a locale-aware unordered container.</source>
          <target state="translated">로케일 인식 비 순차 컨테이너를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="55a726a4a6da5cedb1a6c8cdb317b9236e2d8da0" translate="yes" xml:space="preserve">
          <source>Demonstrates calling the constructor of basic_stringbuf directly.</source>
          <target state="translated">basic_stringbuf의 생성자를 직접 호출하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c98c18cc7aae8564444f2ea5d3ad8c9fac3c31cd" translate="yes" xml:space="preserve">
          <source>Demonstrates construction and recursion through a nested exception object.</source>
          <target state="translated">중첩 된 예외 개체를 통한 구성 및 재귀를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0b1fa0a97d9542a6b6cc4ce1d3fc54ac2c93bd45" translate="yes" xml:space="preserve">
          <source>Demonstrates how compare_exchange_strong either changes the value of the atomic variable or the variable used for comparison.</source>
          <target state="translated">compare_exchange_strong이 원자 변수 또는 비교에 사용 된 변수의 값을 변경하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8b64994658f672bcd55b7863c3ff6f497a2dfa30" translate="yes" xml:space="preserve">
          <source>Demonstrates how expired is used to check validity of the pointer.</source>
          <target state="translated">포인터의 유효성을 검사하는 데 만료 된 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7c7861fd264ba6742ea4fab0f0c38fb2bd38bc0e" translate="yes" xml:space="preserve">
          <source>Demonstrates how lock is used to ensure validity of the pointer.</source>
          <target state="translated">포인터의 유효성을 보장하기 위해 잠금을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="cd78fa3072e86fe6acf1dbdeeb2c62db5acd2835" translate="yes" xml:space="preserve">
          <source>Demonstrates how nullptr allows forwarding via a template function.</source>
          <target state="translated">nullptr이 템플릿 함수를 통해 전달하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="353342e687930feea659caf51246417ff729f5d5" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create a system_error exception from an &lt;code&gt;errno&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;errno&lt;/code&gt; 값 에서 system_error 예외를 작성하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="84bf9855c31207f391d6d372326df356ca9224d6" translate="yes" xml:space="preserve">
          <source>Demonstrates min, max, and lowest for floating-point types.</source>
          <target state="translated">부동 소수점 유형의 최소, 최대 및 최저를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c8f807985ad565ff109e4f8447a4df490bbe054d" translate="yes" xml:space="preserve">
          <source>Demonstrates mixed-mode arithmetic on a user-defined class.</source>
          <target state="translated">사용자 정의 클래스에서 혼합 모드 산술을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="695b3d78f3e6859f3f472f12082a845aac47e82b" translate="yes" xml:space="preserve">
          <source>Demonstrates some uses of reinterpret_cast:</source>
          <target state="translated">reinterpret_cast의 일부 사용법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1fd48fa0d0c18fd7590843978eb2a403378c356a" translate="yes" xml:space="preserve">
          <source>Demonstrates swapping of subranges from different containers.</source>
          <target state="translated">다른 컨테이너에서 하위 범위의 교체를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3fbb6638951dec2ea2bbe61cedf8d7376346d733" translate="yes" xml:space="preserve">
          <source>Demonstrates the behavior of modulo types.</source>
          <target state="translated">모듈로 형식의 동작을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b18e80385735d0709e280655e0efd4008a44eeec" translate="yes" xml:space="preserve">
          <source>Demonstrates the meaning of open interval (first, last) in the third form of splice_after(): the first element of l1 is not moved.</source>
          <target state="translated">splice_after ()의 세 번째 형식에서 열린 간격 (첫 번째, 마지막)의 의미를 보여줍니다. l1의 첫 번째 요소는 이동되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="08badaec5eb4d2de7da62d64ef98227a975fb587" translate="yes" xml:space="preserve">
          <source>Demonstrates the regex feature that works through transform_primary().</source>
          <target state="translated">transform_primary ()를 통해 작동하는 정규식 기능을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="961f07df5c0dbc6ede3dbd5ebf73f6c79d9ad5e4" translate="yes" xml:space="preserve">
          <source>Demonstrates the relationships of max_exponent, max_exponent10, and max() for the type float:</source>
          <target state="translated">float 유형에 대한 max_exponent, max_exponent10 및 max ()의 관계를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="257ae609140605990f58abb2480831d8b69d8917" translate="yes" xml:space="preserve">
          <source>Demonstrates the relationships of min_exponent, min_exponent10, min, and radix for the type float:</source>
          <target state="translated">float 유형에 대한 min_exponent, min_exponent10, min 및 radix의 관계를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1ea2810cc6d35f6fcf6b24d14ce836c5acf2c6fd" translate="yes" xml:space="preserve">
          <source>Demonstrates the two commonly available types of &lt;code&gt;std::random_device&lt;/code&gt; on Linux.</source>
          <target state="translated">Linux에서 일반적으로 사용 가능한 두 가지 유형의 &lt;code&gt;std::random_device&lt;/code&gt; 를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="de45b3bafc70401d7faedce83c72352d1e99e3bc" translate="yes" xml:space="preserve">
          <source>Demonstrates the typical prologue of a locale-sensitive program (cross-platform).</source>
          <target state="translated">로케일 구분 프로그램 (크로스 플랫폼)의 일반적인 프롤로그를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="39910ca04b07971e2fbc99c296da24e3a0a6fc41" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of &lt;code&gt;iswspace()&lt;/code&gt; with different locales.</source>
          <target state="translated">다른 로케일 에서 &lt;code&gt;iswspace()&lt;/code&gt; 사용을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="f9346944092408f8427cbd2fae7de50989c4acbf" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of a signaling NaN to raise a floating-point exception.</source>
          <target state="translated">부동 소수점 예외를 발생시키기 위해 신호 NaN을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f4f1e39812502a0888aec6f7790df94f71ffb37e" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of input stream sync() with file input, as implemented on some platforms.</source>
          <target state="translated">일부 플랫폼에서 구현 된대로 파일 입력과 함께 입력 스트림 sync () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="107363e042b2a4793f67270f98d3c7305ba956f9" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isalnum() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 isalnum ()을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8bec99b36261ae64217d042ec118a2c264d9ce33" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isalpha() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 isalpha () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="251296f4822352ec5b1a0a6b87a2ae46960f2a69" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isblank() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 isblank () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="cb6c8c7149a785e0dc9cb0bfe5f7a170edb04066" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of iscntrl() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 iscntrl () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="537b17f24dd73feea9d4f1d66dd3fafc4f278df6" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isgraph() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 isgraph () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b071669881e42003ad8c82555f821edfd10537de" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of islower() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 islower () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4ec1d24b0f3b339663db50810233947ceb72ce7c" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isprint() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 isprint () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4473ea357bf08f3daca0d203b5d5e6995640a35d" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of ispunct() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 별)과 함께 ispunct ()를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b90b5b6881ca402f37d0adef83c2f41c2d977971" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isspace() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 별)과 함께 isspace ()를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f88fa024d063d13891a27afd9dbed7ca7542d7fa" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of isupper() with different locales (OS-specific).</source>
          <target state="translated">다른 로케일 (OS 특정)과 함께 isupper () 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e828a24c221d5b88f9501a90c48a02318ff565d4" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of machine epsilon to compare floating-point values for equality.</source>
          <target state="translated">부동 소수점 값이 동일한 지 비교하기 위해 머신 엡실론을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ca8b8d2308bbb1ad46c1512bd03cd1b3c8be21e6" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of max() with some fundamental types and some standard library typedefs (the output is system-specific).</source>
          <target state="translated">일부 기본 유형 및 일부 표준 라이브러리 유형 정의와 함께 max () 사용을 보여줍니다 (출력은 시스템마다 다릅니다).</target>
        </trans-unit>
        <trans-unit id="93cc18ceb213be54cd291ce683e0aaa4aa51a30e" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of reference_wrapper as a container of references, which makes it possible to access the same container using multiple indexes.</source>
          <target state="translated">reference_wrapper를 참조 컨테이너로 사용하는 방법을 보여줌으로써 여러 인덱스를 사용하여 동일한 컨테이너에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="693496b51720b1a4f8df97d70a64e73cc7a3d417" translate="yes" xml:space="preserve">
          <source>Demonstrates the use with typedef types, and the difference in the sign of the result between integer and floating-point types.</source>
          <target state="translated">typedef 유형에서의 사용과 정수 및 부동 소수점 유형의 결과 부호 차이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a63c702834457678a2cf34507112d9d169923430" translate="yes" xml:space="preserve">
          <source>Demonstrates two kinds of inline assembly syntax offered by the GCC compiler. This program will only work correctly on x86_64 platform under Linux.</source>
          <target state="translated">GCC 컴파일러가 제공하는 두 가지 종류의 인라인 어셈블리 구문을 보여줍니다. 이 프로그램은 Linux의 x86_64 플랫폼에서만 올바르게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2b4616312665e1f96fc41f44754b6b1eee0f4387" translate="yes" xml:space="preserve">
          <source>Dependency-ordered before</source>
          <target state="translated">종속성 주문 전</target>
        </trans-unit>
        <trans-unit id="3f049d4603c79ebaec4e70cfb62ab63cfc6422b2" translate="yes" xml:space="preserve">
          <source>Dependent names</source>
          <target state="translated">종속 이름</target>
        </trans-unit>
        <trans-unit id="95192f6d1bba39be1eb8f1bbae5b705835c62afd" translate="yes" xml:space="preserve">
          <source>Dependent types</source>
          <target state="translated">종속 유형</target>
        </trans-unit>
        <trans-unit id="79a46e2fc5f3435f85a6d0aeb588cdea17cb3c33" translate="yes" xml:space="preserve">
          <source>Depending on context, the initializer may invoke:</source>
          <target state="translated">컨텍스트에 따라 초기화 프로그램은 다음을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cf248e25422345ccafedea8885989f2f2bef07b" translate="yes" xml:space="preserve">
          <source>Depending on the computer architecture, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte&quot;&gt;byte&lt;/a&gt; may consist of 8</source>
          <target state="translated">컴퓨터 아키텍처에 따라 &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte&quot;&gt;바이트&lt;/a&gt; 는 8로 구성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02ee6acb16bb092f59bc0ed7fa64a09d7c98af3a" translate="yes" xml:space="preserve">
          <source>Depending on where the expansion takes place, the resulting comma-separated list is a different kind of list: function parameter list, member initializer list, attribute list, etc. The following is the list of all allowed contexts.</source>
          <target state="translated">확장이 발생하는 위치에 따라 쉼표로 구분 된 결과 목록은 함수 매개 변수 목록, 멤버 이니셜 라이저 목록, 속성 목록 등 다른 유형의 목록입니다. 다음은 허용되는 모든 컨텍스트 목록입니다.</target>
        </trans-unit>
        <trans-unit id="6d5ab1fa86198c904c8c05633982c0c834cf71d6" translate="yes" xml:space="preserve">
          <source>Deprecated headers</source>
          <target state="translated">더 이상 사용되지 않는 헤더</target>
        </trans-unit>
        <trans-unit id="11507c6c55728cada3b89c3574405596fc066f82" translate="yes" xml:space="preserve">
          <source>Deprecated in C++11 and removed in C++17</source>
          <target state="translated">C ++ 11에서 더 이상 사용되지 않고 C ++ 17에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="4bc1b220ed421428a9d9427c84031bfac98dcef8" translate="yes" xml:space="preserve">
          <source>Deprecated in C++17 and removed in C++20</source>
          <target state="translated">C ++ 17에서 더 이상 사용되지 않고 C ++ 20에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="260a5d1e8a69c8bbc1eeb1f8865c8c1225df4b0f" translate="yes" xml:space="preserve">
          <source>Deprecated member types</source>
          <target state="translated">더 이상 사용되지 않는 멤버 유형</target>
        </trans-unit>
        <trans-unit id="8e971cb63bf15de005d3167cafc4dbeb856ab016" translate="yes" xml:space="preserve">
          <source>Deprecates</source>
          <target state="translated">Deprecates</target>
        </trans-unit>
        <trans-unit id="1c117d17ffca5fbe04b0b01ca8f79fb298ad94d6" translate="yes" xml:space="preserve">
          <source>Dereferenceable iterators</source>
          <target state="translated">역 참조 가능한 반복자</target>
        </trans-unit>
        <trans-unit id="16d746efcfd5a4401b55fce2c10651603c45efc4" translate="yes" xml:space="preserve">
          <source>Dereferences a pointer to the managed object. The first version requires &lt;code&gt;get() != 0&lt;/code&gt;.</source>
          <target state="translated">관리 객체에 대한 포인터를 역 참조합니다. 첫 번째 버전에는 &lt;code&gt;get() != 0&lt;/code&gt; 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="a13df57c4ab2badae3abd7620771b30073900a38" translate="yes" xml:space="preserve">
          <source>Dereferences the iterator.</source>
          <target state="translated">반복자를 참조 해제합니다.</target>
        </trans-unit>
        <trans-unit id="d7ea73bcaa9f92c653c994ae3b1b76a072009e84" translate="yes" xml:space="preserve">
          <source>Dereferences the stored pointer. The behavior is undefined if the stored pointer is null.</source>
          <target state="translated">저장된 포인터를 역 참조합니다. 저장된 포인터가 null 인 경우 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8dfa86d6d615c89ba9959ecfa04179193b561d7e" translate="yes" xml:space="preserve">
          <source>Dereferencing a function pointer yields the lvalue identifying the pointed-to function:</source>
          <target state="translated">함수 포인터를 역 참조하면 지정된 함수를 식별하는 lvalue가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="49060c10b11c868d979cf75fc91c285b108f6533" translate="yes" xml:space="preserve">
          <source>Derived classes</source>
          <target state="translated">파생 클래스</target>
        </trans-unit>
        <trans-unit id="66f2dbf127dcdd9d03cb3d51c834c33df0a4ceb6" translate="yes" xml:space="preserve">
          <source>DerivedFrom</source>
          <target state="translated">DerivedFrom</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="0516ff5ec29eb29d528c9d27743cfd402d8afee1" translate="yes" xml:space="preserve">
          <source>Description for the error number values</source>
          <target state="translated">오류 번호 값에 대한 설명</target>
        </trans-unit>
        <trans-unit id="7400472cd5f39d6c30148d8514d332ae16889878" translate="yes" xml:space="preserve">
          <source>Description of algorithm facilities, given above, is crude and intended to explain Predicate in simple terms. For detailed info, refer to individual pages.</source>
          <target state="translated">위에 제공된 알고리즘 기능에 대한 설명은 조잡하며 조건자를 간단한 용어로 설명하기위한 것입니다. 자세한 내용은 개별 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="80574cd46ca091203eb281af07073e23f241ab4d" translate="yes" xml:space="preserve">
          <source>Designated initializer can be used to initialize a &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; into the state other than the first. Only one initializer may be provided for a union.</source>
          <target state="translated">지정된 이니셜 라이저를 사용 하여 첫 번째 이외의 상태로 &lt;a href=&quot;union&quot;&gt;통합&lt;/a&gt; 을 초기화 할 수 있습니다 . 공용체에는 하나의 이니셜 라이저 만 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d963fc3b80f7f8b423949e32ac6784fd0c644841" translate="yes" xml:space="preserve">
          <source>Designated initializers</source>
          <target state="translated">지정된 이니셜 라이저</target>
        </trans-unit>
        <trans-unit id="6c9d44b687335b1232762b5cc523490e90903932" translate="yes" xml:space="preserve">
          <source>Despite a lack of constructors, it is possible to create non-empty initializer lists. Instances of &lt;code&gt;std::initializer_list&lt;/code&gt; are implicitly constructed when:</source>
          <target state="translated">생성자가 부족하더라도 비어 있지 않은 초기화 목록을 만들 수 있습니다. &lt;code&gt;std::initializer_list&lt;/code&gt; 인스턴스는 다음과 같은 경우에 내재적으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="610f156c20d234448921295ff4988daf62847556" translate="yes" xml:space="preserve">
          <source>Despite being specified &quot;as if&quot; a temporary buffer is used, actual implementations of this function do not incur the overhead of double copying or extra memory. For small &lt;code&gt;count&lt;/code&gt;, it may load up and write out registers; for larger blocks, a common approach (glibc and bsd libc) is to copy bytes forwards from the beginning of the buffer if the destination starts before the source, and backwards from the end otherwise, with a fall back to &lt;code&gt;&lt;a href=&quot;memcpy&quot;&gt;std::memcpy&lt;/a&gt;&lt;/code&gt; when there is no overlap at all.</source>
          <target state="translated">&quot;있는 것처럼&quot;임시 버퍼가 사용됨에도 불구하고이 기능의 실제 구현은 이중 복사 또는 추가 메모리의 오버 헤드를 발생시키지 않습니다. 적은 &lt;code&gt;count&lt;/code&gt; 경우 레지스터를로드하고 쓸 수 있습니다. 큰 블록, 일반적인 접근 방식 (glibc에와 BSD의 libc의)에 대한 사본에 가을 다시와, 버퍼의 처음부터 전달하면 끝에서 대상 소스 전에 시작, 이전 버전과 달리 바이트입니다 &lt;code&gt;&lt;a href=&quot;memcpy&quot;&gt;std::memcpy&lt;/a&gt;&lt;/code&gt; 때이 전혀 겹치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="af0b2933da32307d48414b0e43084ea4d67221a0" translate="yes" xml:space="preserve">
          <source>Despite the name, C++, C, and POSIX standards do not require this function to be implemented using &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot;&gt;quicksort&lt;/a&gt; or make any complexity or stability guarantees.</source>
          <target state="translated">이름에도 불구하고 C ++, C 및 POSIX 표준에서는이 기능을 &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot;&gt;퀵 정렬을&lt;/a&gt; 사용하여 구현 하거나 복잡성 또는 안정성을 보장 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b78d139cdf486e1acc85058934b061d098dfdcab" translate="yes" xml:space="preserve">
          <source>Despite the name, neither C nor POSIX standards require this function to be implemented using binary search or make any complexity guarantees.</source>
          <target state="translated">이름에도 불구하고 C 또는 POSIX 표준에서는이 기능을 이진 검색을 사용하여 구현하거나 복잡성을 보장 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="bd4a473e8abcd551e3cd7a107bed9d0b25fdcec6" translate="yes" xml:space="preserve">
          <source>Despite the name, the function checks for the file status of &lt;code&gt;file_type::none&lt;/code&gt; (meaning an error occurred), not &lt;code&gt;file_type::unknown&lt;/code&gt; (meaning file exists, but its type cannot be determined).</source>
          <target state="translated">이름에도 불구하고이 함수는 &lt;code&gt;file_type::unknown&lt;/code&gt; 아닌 file_type :: &lt;code&gt;file_type::none&lt;/code&gt; (오류가 발생 했음을 의미 함) 의 파일 상태를 확인합니다 (파일이 존재하지만 해당 유형을 판별 할 수 없음).</target>
        </trans-unit>
        <trans-unit id="f6f646066bdf4b1ec66764f189ea43f9555404f9" translate="yes" xml:space="preserve">
          <source>Destination address required</source>
          <target state="translated">필요한 목적지 주소</target>
        </trans-unit>
        <trans-unit id="b9d905395bd276c25153223a4722e1f4c2fc3e88" translate="yes" xml:space="preserve">
          <source>Destroy contents</source>
          <target state="translated">내용 파괴</target>
        </trans-unit>
        <trans-unit id="7ccb27301181b7b63544ff6446f08303ce41ecf9" translate="yes" xml:space="preserve">
          <source>Destroys &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 를 파괴 합니다 .</target>
        </trans-unit>
        <trans-unit id="a3f3f7fedf7771d48e0a67b29c2b97491699c6e1" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;monotonic_buffer_resource&lt;/code&gt;, releasing all allocated memory</source>
          <target state="translated">할당 된 모든 메모리를 해제 하여 &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; 를 제거 합니다</target>
        </trans-unit>
        <trans-unit id="5b6b69f0fcd83cb4f6e2fea889761699caa26111" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;monotonic_buffer_resource&lt;/code&gt;.</source>
          <target state="translated">파기 &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="476f1a95d5f654e0472d8cb72832d3df773ea881" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;std::istrstream&lt;/code&gt; object, which also destroys the member &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">파기 &lt;code&gt;std::istrstream&lt;/code&gt; 또한 회원 파괴 개체, &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c85fb0eb5e69c3635f19c2a6ceb3ca0fd3a0d1ef" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;std::ostrstream&lt;/code&gt; object, which also destroys the member &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;, which may call the deallocation function if the underlying buffer was dynamically-allocated and not frozen.</source>
          <target state="translated">파기 &lt;code&gt;std::ostrstream&lt;/code&gt; 도 멤버 파괴 객체 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; , 기본 버퍼를 동적으로 할당하고 고정되지 않은 경우 해제 함수를 호출 할 수있다.</target>
        </trans-unit>
        <trans-unit id="70183200d219df4ac607d79ad5e64415961017c8" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;std::strstream&lt;/code&gt; object, which also destroys the member &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;, which may call the deallocation function if the underlying buffer was dynamically-allocated and not frozen.</source>
          <target state="translated">파기 &lt;code&gt;std::strstream&lt;/code&gt; 도 멤버 파괴 객체 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; , 기본 버퍼를 동적으로 할당하고 고정되지 않은 경우 해제 함수를 호출 할 수있다.</target>
        </trans-unit>
        <trans-unit id="58e410d47e74a80a4afda9d15eec2926831453c9" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;std::strstreambuf&lt;/code&gt; object. if the object is managing a dynamically-allocated buffer (the buffer state is &quot;allocated&quot;) and if the object is not frozen, then deallocates the buffer using the deallocation function provided at construction or &lt;code&gt;delete[]&lt;/code&gt; if none was provided.</source>
          <target state="translated">&lt;code&gt;std::strstreambuf&lt;/code&gt; 객체를 파괴 합니다. 객체가 동적으로 할당 된 버퍼를 관리하는 경우 (버퍼 상태가 &quot;할당 됨&quot;) 객체가 고정되지 않은 경우, 구축시 제공된 할당 해제 기능을 사용하여 버퍼를 할당 해제하거나, 제공된 것이없는 경우 &lt;code&gt;delete[]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c8887c7844324524ceda0e9c397c318f055e60e" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;synchronized_pool_resource&lt;/code&gt;, releasing all allocated memory</source>
          <target state="translated">파괴 &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 모든 할당 된 메모리를 해제</target>
        </trans-unit>
        <trans-unit id="2859417243dababd09410efd5e81950405c6811f" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;synchronized_pool_resource&lt;/code&gt;.</source>
          <target state="translated">파기 &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ed1f6996f00a8912203b6b09e1a85998cfb791a0" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;, releasing all allocated memory</source>
          <target state="translated">할당 &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; 모든 메모리를 해제 하여 unsynchronized_pool_resource를 제거 합니다</target>
        </trans-unit>
        <trans-unit id="df96956649f09fbca393d9728a7a7324dd3019ba" translate="yes" xml:space="preserve">
          <source>Destroys a &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;.</source>
          <target state="translated">을 파괴 &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bee701b3eb820568ae2e95928ee384529b002910" translate="yes" xml:space="preserve">
          <source>Destroys a synchronized output stream.</source>
          <target state="translated">동기화 된 출력 스트림을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="2aa1671e33ced0b6807708c1917ad35b6d3ff629" translate="yes" xml:space="preserve">
          <source>Destroys all elements in &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">모든 요소 파기 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48e6f1149fa8e27264a38af743d2042363f3bf6f" translate="yes" xml:space="preserve">
          <source>Destroys an object in allocated storage</source>
          <target state="translated">할당 된 스토리지에서 오브젝트를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="1d7fdf781a6a9d348aeb6d41e8ca0b68d0b8246e" translate="yes" xml:space="preserve">
          <source>Destroys and deallocates an object</source>
          <target state="translated">객체를 파괴하고 할당 해제</target>
        </trans-unit>
        <trans-unit id="0631008559b1a6f930dcbd5eb218d8cbefd7d630" translate="yes" xml:space="preserve">
          <source>Destroys object(s) previously allocated by the &lt;a href=&quot;new&quot;&gt; new expression&lt;/a&gt; and releases obtained memory area.</source>
          <target state="translated">&lt;a href=&quot;new&quot;&gt;새 표현식으로&lt;/a&gt; 이전에 할당 된 객체를 제거 하고 획득 한 메모리 영역을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="5a110e39138560816ec835aaba0ae0dc1e3717a4" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; instance. If the &lt;code&gt;std::function&lt;/code&gt; is not</source>
          <target state="translated">파괴 &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; 인스턴스를. 경우 &lt;code&gt;std::function&lt;/code&gt; 아니다</target>
        </trans-unit>
        <trans-unit id="e8695828ebab5bcdb93036df474c78826f4e76ea" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;code&gt;basic_ios&lt;/code&gt; object. No operations on &lt;code&gt;rdbuf&lt;/code&gt; are performed, it is not destroyed.</source>
          <target state="translated">파기 &lt;code&gt;basic_ios&lt;/code&gt; 의 개체를. &lt;code&gt;rdbuf&lt;/code&gt; 에 대한 작업 이 수행되지 않으며 삭제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f1705627bbf6af7071935f88d95057255fe69164" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;code&gt;basic_ostream&lt;/code&gt; object. This destructor does not perform any operation on the underlying streambuffer (&lt;code&gt;rdbuf()&lt;/code&gt;): the destructors of the derived output streams such as &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; are responsible for calling the destructors of the stream buffers.</source>
          <target state="translated">파기 &lt;code&gt;basic_ostream&lt;/code&gt; 의 개체를. 이 소멸자는 기본 스트림 버퍼 ( &lt;code&gt;rdbuf()&lt;/code&gt; ) 에서 작업을 수행하지 않습니다 . &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; 과 같은 파생 출력 스트림 의 소멸자는 스트림 버퍼의 소멸자를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f77be2c9b9d1d27dedbbd9ed51569a33cdde9523" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;code&gt;ios_base&lt;/code&gt; object.</source>
          <target state="translated">파기 &lt;code&gt;ios_base&lt;/code&gt; 의 개체를.</target>
        </trans-unit>
        <trans-unit id="8d9a304c46dfc80d1cc798a4e47d0122f88a3285" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;code&gt;weak_ptr&lt;/code&gt; object. Results in no effect to the managed object.</source>
          <target state="translated">&lt;code&gt;weak_ptr&lt;/code&gt; 오브젝트를 파기 합니다. 관리 대상 개체에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d89a563c4297efc7411f315898f41397202a6d4" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;code&gt;wstring_convert&lt;/code&gt; object and deletes the pointer to the conversion facet.</source>
          <target state="translated">파기 &lt;code&gt;wstring_convert&lt;/code&gt; 의 개체 및 변환면에 포인터를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="e03e67a658456c2a51d415d8fef71185b04bef14" translate="yes" xml:space="preserve">
          <source>Destroys the contained object, if any, as if by a call to &lt;code&gt;reset()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reset()&lt;/code&gt; 호출로 포함 된 객체가있는 경우이를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="5158f375cc33ef0fcf49731ad26c681b98620f70" translate="yes" xml:space="preserve">
          <source>Destroys the default allocator.</source>
          <target state="translated">기본 할당자를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="9b3d4afde24169206471106962eacbb1f39be99c" translate="yes" xml:space="preserve">
          <source>Destroys the exception object.</source>
          <target state="translated">예외 객체를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="28596a348dc1fcea683b9fe15440b9ca2da4dc89" translate="yes" xml:space="preserve">
          <source>Destroys the facet.</source>
          <target state="translated">패싯을 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="46b2ed534c971a42a750c22ae3d346d9269b443c" translate="yes" xml:space="preserve">
          <source>Destroys the facet. Unlike the locale-managed facets, this facet's destructor is public.</source>
          <target state="translated">패싯을 파괴합니다. 로케일 관리 패싯과 달리이 패싯의 소멸자는 공개입니다.</target>
        </trans-unit>
        <trans-unit id="1898838fb94432139ecc1a2ebaa566fe64e4d99b" translate="yes" xml:space="preserve">
          <source>Destroys the first element.</source>
          <target state="translated">첫 번째 요소를 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="a78fc658367c235782d25c6919608beb99f102f4" translate="yes" xml:space="preserve">
          <source>Destroys the indexes in the array. The elements referred to by the object are not modified.</source>
          <target state="translated">배열의 인덱스를 삭제합니다. 객체가 참조하는 요소는 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="367080b7b6faa15f4ee964379be9fa13cb5a633c" translate="yes" xml:space="preserve">
          <source>Destroys the last element</source>
          <target state="translated">마지막 요소를 파괴</target>
        </trans-unit>
        <trans-unit id="50a0b4c73b45bbe3faa941b99af4d80f26e51e74" translate="yes" xml:space="preserve">
          <source>Destroys the lock.</source>
          <target state="translated">자물쇠를 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="a4bb4b64b8966d75d29c21f448dd6170bd96c5bf" translate="yes" xml:space="preserve">
          <source>Destroys the lock. If &lt;code&gt;*this&lt;/code&gt; has an associated mutex and has acquired ownership of it, the mutex is unlocked.</source>
          <target state="translated">자물쇠를 파괴합니다. 경우 &lt;code&gt;*this&lt;/code&gt; 연관된 뮤텍스를 가지고 있으며, 그것의 소유권을 인수했다, 뮤텍스 잠금이 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="8ac718f87925ba3c38018823f63bceac6d7b7b1d" translate="yes" xml:space="preserve">
          <source>Destroys the managed object. Calls &lt;code&gt;delete get()&lt;/code&gt;.</source>
          <target state="translated">관리 대상 객체를 삭제합니다. &lt;code&gt;delete get()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="0c2654684df4cbd6f8edae15967449e98a9b7160" translate="yes" xml:space="preserve">
          <source>Destroys the mutex.</source>
          <target state="translated">뮤텍스를 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="6ca8b67cd0b9283cb8d87536a6e8f425b5145d62" translate="yes" xml:space="preserve">
          <source>Destroys the nested exception object.</source>
          <target state="translated">중첩 된 예외 객체를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="7e0facb0e36aa1b8dee7f4844081166414be337f" translate="yes" xml:space="preserve">
          <source>Destroys the object of type &lt;code&gt;&lt;a href=&quot;../condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="efce0816594c40526d5789a5d0ef78fa1e278c8a" translate="yes" xml:space="preserve">
          <source>Destroys the object of type &lt;code&gt;&lt;a href=&quot;../condition_variable_any&quot;&gt;std::condition_variable_any&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../condition_variable_any&quot;&gt;std::condition_variable_any&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="74b95fef2aa5751d53bf644c3d5ff386c02d363b" translate="yes" xml:space="preserve">
          <source>Destroys the object of type U and deallocates storage allocated for it.</source>
          <target state="translated">U 유형의 오브젝트를 삭제하고 할당 된 스토리지를 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="6e9690d5f1b61fcad3a03e12effd5b5571773cd2" translate="yes" xml:space="preserve">
          <source>Destroys the object pointed to by &lt;code&gt;p&lt;/code&gt;, as if by calling &lt;code&gt;p-&amp;gt;~U()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p-&amp;gt;~U()&lt;/code&gt; 호출하는 것처럼 &lt;code&gt;p&lt;/code&gt; 가 가리키는 객체를 파기합니다 .</target>
        </trans-unit>
        <trans-unit id="acfdf768e4377d9f0f9e092a419fea17f8026930" translate="yes" xml:space="preserve">
          <source>Destroys the object.</source>
          <target state="translated">객체를 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="0bcd1e53f36b639665648fbb2e5c02c261ece03c" translate="yes" xml:space="preserve">
          <source>Destroys the path object.</source>
          <target state="translated">경로 객체를 파기합니다.</target>
        </trans-unit>
        <trans-unit id="d3270237bbbdb409b851d2eeae79254ab7b8155f" translate="yes" xml:space="preserve">
          <source>Destroys the reference.</source>
          <target state="translated">참조를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="3377bc414ab5338346bed10ec103944261b9610e" translate="yes" xml:space="preserve">
          <source>Destroys the regular expression object.</source>
          <target state="translated">정규식 객체를 파기합니다.</target>
        </trans-unit>
        <trans-unit id="70e026f2d04897cc1fcca2f9e71a4cdceab4af01" translate="yes" xml:space="preserve">
          <source>Destroys the scoped allocator adaptor.</source>
          <target state="translated">범위가 지정된 할당 자 어댑터를 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="3d926e59a5446fd8dbbaf81f8cbe9b8392039574" translate="yes" xml:space="preserve">
          <source>Destroys the thread object.</source>
          <target state="translated">스레드 객체를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="e0e915808582df27563fcad6c531e912b37a1c5e" translate="yes" xml:space="preserve">
          <source>Destroys the wbuffer_convert object and deletes the pointer to the conversion facet.</source>
          <target state="translated">wbuffer_convert 객체를 제거하고 변환 패싯에 대한 포인터를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="957f2c7905048f8b5c3d93c325cb4ffe19dda416" translate="yes" xml:space="preserve">
          <source>Destructible</source>
          <target state="translated">Destructible</target>
        </trans-unit>
        <trans-unit id="b118b980cb190a2e5a9c30c471c3474ead0539d5" translate="yes" xml:space="preserve">
          <source>Destruction sequence</source>
          <target state="translated">파괴 순서</target>
        </trans-unit>
        <trans-unit id="c9d7cee8d831e6fbdb0fb4f7b79b60e43b939cbf" translate="yes" xml:space="preserve">
          <source>Destructor</source>
          <target state="translated">Destructor</target>
        </trans-unit>
        <trans-unit id="bcf6c17f9da73e467a073ac5e6e487e5bdc36429" translate="yes" xml:space="preserve">
          <source>Destructors</source>
          <target state="translated">Destructors</target>
        </trans-unit>
        <trans-unit id="895cb568b03ede1e9ba17c0dd98fec995926b7dd" translate="yes" xml:space="preserve">
          <source>Destructors and copy constructors cannot be templates. If a template constructor is declared which could be instantiated with the type signature of a &lt;a href=&quot;copy_constructor&quot;&gt;copy constructor&lt;/a&gt;, the implicitly-declared copy constructor is used instead.</source>
          <target state="translated">소멸자와 복사 생성자는 템플릿이 될 수 없습니다. &lt;a href=&quot;copy_constructor&quot;&gt;copy constructor&lt;/a&gt; 의 형식 서명으로 인스턴스화 할 수있는 템플릿 생성자가 선언 되면 암시 적으로 선언 된 copy 생성자가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1f904aefcf2f8f3911907415445e28f4ab0112d6" translate="yes" xml:space="preserve">
          <source>Destructors are called implicitly at the end of &lt;a href=&quot;../language/lifetime&quot;&gt;object lifetime&lt;/a&gt; such as when leaving &lt;a href=&quot;../language/scope&quot;&gt;scope&lt;/a&gt; or by the &lt;a href=&quot;../language/delete&quot;&gt;delete-expression&lt;/a&gt;. Explicit destructor call as shown in the type requirement table is rare.</source>
          <target state="translated">&lt;a href=&quot;../language/scope&quot;&gt;범위를&lt;/a&gt; 벗어나 거나 &lt;a href=&quot;../language/delete&quot;&gt;delete-expression&lt;/a&gt; 과 같이 &lt;a href=&quot;../language/lifetime&quot;&gt;객체 수명&lt;/a&gt; 이 끝나면 소멸자가 암시 적으로 호출 됩니다 . 형식 요구 사항 표에 나와있는 명시 적 소멸자 호출은 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="cd04ea3df5572be8e92443acb39f87965421dc4a" translate="yes" xml:space="preserve">
          <source>Destructors of variables with automatic, thread local and static storage durations are not called. Functions passed to &lt;code&gt;&lt;a href=&quot;at_quick_exit&quot;&gt;std::at_quick_exit()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;atexit&quot;&gt;std::atexit()&lt;/a&gt;&lt;/code&gt; are not called. Whether open resources such as files are closed is implementation defined.</source>
          <target state="translated">자동, 스레드 로컬 및 정적 저장 기간을 갖는 변수의 소멸자는 호출되지 않습니다. &lt;code&gt;&lt;a href=&quot;at_quick_exit&quot;&gt;std::at_quick_exit()&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;atexit&quot;&gt;std::atexit()&lt;/a&gt;&lt;/code&gt; 전달 된 함수는 호출되지 않습니다. 파일과 같은 열린 리소스가 닫히는 지 여부는 구현 정의입니다.</target>
        </trans-unit>
        <trans-unit id="36aa2d6d8ad67a2d641081636bf0aca7af3b6c68" translate="yes" xml:space="preserve">
          <source>Destructors of variables with automatic, thread local(since C++11) and static &lt;a href=&quot;../../language/storage_duration&quot;&gt; storage durations&lt;/a&gt; are not called. Functions registered with &lt;code&gt;&lt;a href=&quot;atexit&quot;&gt;std::atexit()&lt;/a&gt;&lt;/code&gt;and &lt;code&gt;&lt;a href=&quot;at_quick_exit&quot;&gt;std::at_quick_exit&lt;/a&gt;&lt;/code&gt;(since C++11) are also not called. Whether open resources such as files are closed is implementation defined. An implementation defined status is returned to the host environment that indicates unsuccessful execution.</source>
          <target state="translated">자동 스레드 로컬 (C ++ 11부터) 및 정적 &lt;a href=&quot;../../language/storage_duration&quot;&gt;저장 기간을&lt;/a&gt; 갖는 변수의 소멸자는 호출되지 않습니다. &lt;code&gt;&lt;a href=&quot;atexit&quot;&gt;std::atexit()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;at_quick_exit&quot;&gt;std::at_quick_exit&lt;/a&gt;&lt;/code&gt; (C ++ 11부터 )에 등록 된 함수 도 호출되지 않습니다. 파일과 같은 열린 리소스가 닫히는 지 여부는 구현 정의입니다. 구현 정의 상태가 실패한 실행을 나타내는 호스트 환경으로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="84fcaac5ecb676f597a455376be36db4b0b13807" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 같이 &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; 에서 파생되어 a를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="c94dcba57166d33132e1c417c9b1a843a4857873" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; 에서 파생되어 a를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="887bcd1dab2ce07a5611766b65facd8b985a3d75" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 에서 파생 된 경우 에만 파괴 할 수 있습니다. &amp;lt;char&amp;gt; 이며 공개 소멸자를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="923fc1b245639693612714746efdd0cf3172fbef" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; 에서 파생되어 a를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="80dc9ca90ab48683c3060109908d809aad363098" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 같이 &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="01f7f68f7efa80ea43207d2b9d1ac25b113a6056" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="fd0c8d8ff84c771158014c1b2f6caf86dc55adaf" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 같이 &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="90cb5cece44e639029cc05f125bec23e34e4f82b" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; 에서 파생되어 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="15fc272ae7bcea9654bfe126bc61cee51f95f98c" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="cb55aad2d0c8253b559b25430be92a5eebba470b" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="5872e07a2c6a3edbe849dec653289a9ad87f8325" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; 에서 파생되어 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="637dcd3c13a753a10b63f6bcde88a4647d9c6335" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="d8a3c846098ae1ef6f343bbe914146bd7546c8df" translate="yes" xml:space="preserve">
          <source>Destructs a &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; facet. This destructor is protected and virtual (due to &lt;a href=&quot;../locale/facet&quot;&gt;base class&lt;/a&gt; destructor being virtual). An object of type &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt;, like most facets, can only be destroyed when the last &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object that implements this facet goes out of scope or if a user-defined class is derived from &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; and implements a public destructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; 패싯을 파괴합니다 . 이 소멸자는 &lt;a href=&quot;../locale/facet&quot;&gt;기본 클래스&lt;/a&gt; 소멸자가 가상 이기 때문에 보호 되고 가상적입니다. 대부분의 패싯과 마찬가지로 &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; 유형의 오브젝트는 이 패싯을 구현 하는 마지막 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 범위를 벗어나거나 사용자 정의 클래스가 &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; 에서 파생되고 a 를 구현하는 경우에만 파괴 될 수 있습니다 . 공공 소멸자.</target>
        </trans-unit>
        <trans-unit id="74a593edb08ae96848e014504a041254782806d0" translate="yes" xml:space="preserve">
          <source>Destructs an object of type &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;. This destructor is public virtual, allowing objects of classes, derived from &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; to be safely deleted through pointers to base class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 유형의 객체를 제거합니다 . 이 소멸자는 공개 가상이므로 &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 에서 파생 된 클래스의 객체 를 기본 클래스에 대한 포인터를 통해 안전하게 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd14c32445ea40c9010763c31ab4d8e46a1e7299" translate="yes" xml:space="preserve">
          <source>Destructs an object of type &lt;code&gt;X&lt;/code&gt; pointed to by &lt;code&gt;xptr&lt;/code&gt;, but does not deallocate any storage.</source>
          <target state="translated">&lt;code&gt;xptr&lt;/code&gt; 이 가리키는 &lt;code&gt;X&lt;/code&gt; 유형의 오브젝트를 소멸 하지만 스토리지 할당을 해제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5218131b3a0ae96ef9f9a38e5015fbf850eb7704" translate="yes" xml:space="preserve">
          <source>Destructs the &lt;code&gt;match_results&lt;/code&gt; object and the associated sub-matches.</source>
          <target state="translated">자폭 &lt;code&gt;match_results&lt;/code&gt; 객체 및 관련 하위 일치.</target>
        </trans-unit>
        <trans-unit id="9682141f25f04417d93a7ee3aaadea3e126ad7b4" translate="yes" xml:space="preserve">
          <source>Destructs the container adaptor. The destructors of the elements are called and the used storage is deallocated. Note, that if the elements are pointers, the pointed-to objects are not destroyed.</source>
          <target state="translated">컨테이너 어댑터를 파괴합니다. 요소의 소멸자가 호출되고 사용 된 스토리지가 할당 해제됩니다. 요소가 포인터이면 지정된 객체가 파괴되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5cfde21e64e430cc651c5ed92f3ae2cfe5434f61" translate="yes" xml:space="preserve">
          <source>Destructs the container. The destructors of the elements are called and the used storage is deallocated. Note, that if the elements are pointers, the pointed-to objects are not destroyed.</source>
          <target state="translated">컨테이너를 파괴합니다. 요소의 소멸자가 호출되고 사용 된 스토리지가 할당 해제됩니다. 요소가 포인터이면 지정된 객체가 파괴되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4e63f505d1337169553e61c3125915a3b60d0263" translate="yes" xml:space="preserve">
          <source>Destructs the input stream.</source>
          <target state="translated">입력 스트림을 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="e57658f04c041440145f13f0b889b4a32611fa51" translate="yes" xml:space="preserve">
          <source>Destructs the input/output stream.</source>
          <target state="translated">입 / 출력 스트림을 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="fa10ef48cc2ea80413d435847d755b1d9b453790" translate="yes" xml:space="preserve">
          <source>Destructs the iterator. Does not affect the associated output stream.</source>
          <target state="translated">반복자를 소멸시킵니다. 연관된 출력 스트림에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c775ade5d231ed6844ba6f5d200fbf85fc54c35b" translate="yes" xml:space="preserve">
          <source>Destructs the numeric array. The destructors of the elements are called and the used storage is deallocated.</source>
          <target state="translated">숫자 형 배열을 소멸시킵니다. 요소의 소멸자가 호출되고 사용 된 스토리지가 할당 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="6115a21dfa26363ed174adc27d35cdba412cca2d" translate="yes" xml:space="preserve">
          <source>Detects whether the function call occurs within a constant-evaluated context. Returns &lt;code&gt;true&lt;/code&gt; if the evaluation of the call occurs within the evaluation of an expression or conversion that is</source>
          <target state="translated">함수 호출이 일정하게 평가 된 컨텍스트 내에서 발생하는지 감지합니다. 호출 평가가 다음 식 또는 변환 평가 내에서 발생하면 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="39cdea7e4582f14a634bc797f3bb509432202e25" translate="yes" xml:space="preserve">
          <source>Determines how string representations of pathnames are interpreted by the constructors of &lt;a href=&quot;../path&quot;&gt;&lt;code&gt;std::filesystem::path&lt;/code&gt;&lt;/a&gt; that accept strings.</source>
          <target state="translated">문자열 을 허용하는 &lt;a href=&quot;../path&quot;&gt; &lt;code&gt;std::filesystem::path&lt;/code&gt; &lt;/a&gt; 의 생성자가 경로 이름의 문자열 표현을 해석하는 방법을 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="9f8112d78a0cb971116f6e08c0b8d6a17b32f161" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;*this&lt;/code&gt; represents a leap year in the proleptic Gregorian calendar.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 음순 한 그레고리력에서 윤년을 나타내는 지 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="87b5a43e9a901138bd5d7ad5f3471d6dc3d6e062" translate="yes" xml:space="preserve">
          <source>Determines if the regular expression &lt;code&gt;e&lt;/code&gt; matches the entire target character sequence, which may be specified as &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt;, a C-string, or an iterator pair.</source>
          <target state="translated">정규 표현식 &lt;code&gt;e&lt;/code&gt; 가 전체 대상 문자 시퀀스와 일치 하는지 판별합니다. 이는 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; , C-string 또는 반복자 쌍 으로 지정 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb43679fe9e6525f59f5623b0433906639cf670f" translate="yes" xml:space="preserve">
          <source>Determines if there is a match between the regular expression &lt;code&gt;e&lt;/code&gt; and some subsequence in the target character sequence.</source>
          <target state="translated">대상 문자 시퀀스에서 정규 표현식 &lt;code&gt;e&lt;/code&gt; 와 일부 하위 시퀀스 가 일치하는지 판별합니다 .</target>
        </trans-unit>
        <trans-unit id="87d24931714671b360d8c56b07778fb47b978905" translate="yes" xml:space="preserve">
          <source>Determines the common reference type of the types &lt;code&gt;T...&lt;/code&gt;, that is, the type to which all the types in &lt;code&gt;T...&lt;/code&gt; can be converted or bound. If such a type exists (as determined according to the rules below), the member &lt;code&gt;type&lt;/code&gt; names that type. Otherwise, there is no member &lt;code&gt;type&lt;/code&gt;. The behavior is undefined if any of the types in &lt;code&gt;T...&lt;/code&gt; is an incomplete type other than (possibly cv-qualified) &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">유형의 공통 참조 형 결정 &lt;code&gt;T...&lt;/code&gt; , 즉, 입력이되는 모든 종류의 &lt;code&gt;T...&lt;/code&gt; 변환 또는 결합 될 수있다. 이러한 유형이 존재하는 경우 (아래 규칙에 따라 결정됨) 멤버 &lt;code&gt;type&lt;/code&gt; 이름이 해당 유형입니다. 그렇지 않으면 멤버 &lt;code&gt;type&lt;/code&gt; 이 없습니다 . &lt;code&gt;T...&lt;/code&gt; 유형 중 하나가 (cv-qualified) &lt;code&gt;void&lt;/code&gt; 이외의 불완전한 유형 인 경우 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b2249999b66890d5e3f24ced66fa7e0daf3d2c1a" translate="yes" xml:space="preserve">
          <source>Determines the common type among all types &lt;code&gt;T...&lt;/code&gt;, that is the type all &lt;code&gt;T...&lt;/code&gt; can be implicitly converted to. If such a type exists (as determined according to the rules below), the member &lt;code&gt;type&lt;/code&gt; names that type. Otherwise, there is no member &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">모든 유형 &lt;code&gt;T...&lt;/code&gt; 중 공통 유형을 결정합니다 . 즉 , 모든 &lt;code&gt;T...&lt;/code&gt; 를 내재적으로 변환 할 수있는 유형 입니다. 이러한 유형이 존재하는 경우 (아래 규칙에 따라 결정됨) 멤버 &lt;code&gt;type&lt;/code&gt; 이름이 해당 유형입니다. 그렇지 않으면 멤버 &lt;code&gt;type&lt;/code&gt; 이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="49285691043e711fe7479db764e9ecdd0bf208a3" translate="yes" xml:space="preserve">
          <source>Determines the information about the filesystem on which the pathname &lt;code&gt;p&lt;/code&gt; is located, as if by POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/statvfs.html&quot;&gt;statvfs&lt;/a&gt;.</source>
          <target state="translated">POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/statvfs.html&quot;&gt;statvfs에&lt;/a&gt; 의한 것처럼 경로 이름 &lt;code&gt;p&lt;/code&gt; 가 있는 파일 시스템에 대한 정보를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="d9abcfdbe740f7564155ea43385bb7b128ce45b2" translate="yes" xml:space="preserve">
          <source>Determines the size, in bytes, of the multibyte character whose first byte is pointed to by &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">첫 번째 바이트가 &lt;code&gt;s&lt;/code&gt; 로 가리키는 멀티 바이트 문자의 크기 (바이트)를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="bd254ef7cdb724382fbd38ffe99d2cfc45041db1" translate="yes" xml:space="preserve">
          <source>Determines the size, in bytes, of the remainder of the multibyte character whose first byte is pointed to by &lt;code&gt;s&lt;/code&gt;, given the current conversion state &lt;code&gt;ps&lt;/code&gt;.</source>
          <target state="translated">현재 변환 상태 &lt;code&gt;ps&lt;/code&gt; 가 주어지면 첫 번째 바이트가 &lt;code&gt;s&lt;/code&gt; 로 가리키는 멀티 바이트 문자의 나머지 멀티 바이트 문자 크기를 바이트 단위로 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="dcb1703d56d40dc87733c157a9e4e2770a099ea2" translate="yes" xml:space="preserve">
          <source>Determines the value represented by the digit &lt;code&gt;ch&lt;/code&gt; in the numeric base &lt;code&gt;radix&lt;/code&gt;, given the currently imbued locale. This function is called by &lt;code&gt;&lt;a href=&quot;../basic_regex&quot;&gt;std::regex&lt;/a&gt;&lt;/code&gt; when processing &lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Quantifiers&quot;&gt;Quantifiers&lt;/a&gt; such as &lt;code&gt;{1&lt;/code&gt;} or &lt;code&gt;{2,5&lt;/code&gt;}, &lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Backreferences&quot;&gt;Backreferences&lt;/a&gt; such as &lt;code&gt;\1&lt;/code&gt;, and hexadecimal and Unicode character escapes.</source>
          <target state="translated">현재 임베딩 된 로케일이 주어지면 숫자 기본 &lt;code&gt;radix&lt;/code&gt; 의 숫자 &lt;code&gt;ch&lt;/code&gt; 로 표시되는 값을 결정합니다 . 이 함수는 &lt;code&gt;{1&lt;/code&gt; } 또는 &lt;code&gt;{2,5&lt;/code&gt; } 와 같은 &lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Quantifiers&quot;&gt;수량 자&lt;/a&gt; , &lt;code&gt;\1&lt;/code&gt; 과 같은 &lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Backreferences&quot;&gt;역 참조&lt;/a&gt; 및 16 진 및 유니 코드 문자 이스케이프를 처리 할 때 &lt;code&gt;&lt;a href=&quot;../basic_regex&quot;&gt;std::regex&lt;/a&gt;&lt;/code&gt; 의해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd5995f3233785280994a7767d8b9d8cec522b9e" translate="yes" xml:space="preserve">
          <source>Determines whether the character &lt;code&gt;c&lt;/code&gt; belongs to the character class identified by &lt;code&gt;f&lt;/code&gt;, which, in turn, is a value returned by &lt;code&gt;&lt;a href=&quot;lookup_classname&quot;&gt;lookup_classname()&lt;/a&gt;&lt;/code&gt; or a bitwise OR of several such values.</source>
          <target state="translated">문자 &lt;code&gt;c&lt;/code&gt; 가 &lt;code&gt;f&lt;/code&gt; 로 식별되는 문자 클래스에 속 하는지 여부를 판별합니다.이 클래스 는 &lt;code&gt;&lt;a href=&quot;lookup_classname&quot;&gt;lookup_classname()&lt;/a&gt;&lt;/code&gt; 의해 리턴 된 값 이거나 여러 값의 비트 단위 OR입니다.</target>
        </trans-unit>
        <trans-unit id="038f29003d488f27de2f0e12ce8577094a03bb51" translate="yes" xml:space="preserve">
          <source>Determines whether this &lt;code&gt;month_day&lt;/code&gt; stores a valid month-day combination.</source>
          <target state="translated">이 &lt;code&gt;month_day&lt;/code&gt; 가 유효한 월-일 조합을 저장 할지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="c69c802d70e0e3f6788cfc1779895445bfc77a31" translate="yes" xml:space="preserve">
          <source>Determines which of the specified subset of the floating point exceptions are currently set. The argument &lt;code&gt;excepts&lt;/code&gt; is a bitwise OR of the &lt;a href=&quot;fe_exceptions&quot;&gt;floating point exception macros&lt;/a&gt;.</source>
          <target state="translated">부동 소수점 예외의 지정된 서브 세트 중 현재 설정되어있는 것을 판별합니다. &lt;code&gt;excepts&lt;/code&gt; 인수 는 &lt;a href=&quot;fe_exceptions&quot;&gt;부동 소수점 예외 매크로&lt;/a&gt; 의 비트 단위 OR입니다 .</target>
        </trans-unit>
        <trans-unit id="e914a8417a836459823812aa69a567d2573691c0" translate="yes" xml:space="preserve">
          <source>Device or resource busy</source>
          <target state="translated">장치 또는 리소스 사용량이 많음</target>
        </trans-unit>
        <trans-unit id="0d3a3771d727fe204d2df32971206ca839fb6ce3" translate="yes" xml:space="preserve">
          <source>Difference between two times in seconds.</source>
          <target state="translated">두 번의 초 차이.</target>
        </trans-unit>
        <trans-unit id="1ee0ab656384525af45140ee8395c3cf3d467e44" translate="yes" xml:space="preserve">
          <source>Different elements in the same container can be modified concurrently by different threads, except for the elements of &lt;code&gt;std::vector&amp;lt;bool&amp;gt;&lt;/code&gt; (for example, a vector of &lt;code&gt;&lt;a href=&quot;thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; objects can be receiving values from multiple threads).</source>
          <target state="translated">&lt;code&gt;std::vector&amp;lt;bool&amp;gt;&lt;/code&gt; 의 요소 (예 &lt;code&gt;&lt;a href=&quot;thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; 객체 의 벡터가 여러 스레드에서 값을 수신 할 수 있음)를 제외하고 동일한 컨테이너의 다른 요소를 다른 스레드에서 동시에 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6e454f4bfcb74e0dd9511c511a5b4297daf0636" translate="yes" xml:space="preserve">
          <source>Different implementations return different non-negative numbers: some return the last character written, some return the number of characters written (or &lt;code&gt;INT_MAX&lt;/code&gt; if the string was longer than that), some simply return a non-negative constant.</source>
          <target state="translated">다른 구현은 음수가 아닌 다른 숫자를 반환합니다. 어떤 것은 마지막으로 쓴 문자를, 어떤 것은 쓴 문자 수를 반환하거나 ( 문자열이 그보다 긴 경우 &lt;code&gt;INT_MAX&lt;/code&gt; 를 반환), 어떤 것은 음이 아닌 상수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6170f244847af7dbbce945574fb4f39ec9c7c16b" translate="yes" xml:space="preserve">
          <source>Different implementations return different non-negative numbers: some return the last character written, some return the number of characters written (or INT_MAX if the string was longer than that), some simply return a non-negative constant such as zero.</source>
          <target state="translated">다른 구현은 음수가 아닌 다른 숫자를 반환합니다. 어떤 것은 마지막으로 쓴 문자를, 어떤 것은 쓴 문자의 수를 반환합니다 (또는 문자열이 그보다 긴 경우 INT_MAX를 반환), 어떤 것은 단순히 0과 같은 음이 아닌 상수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4cec1e48ed8268246c17cdf0e9f5b5116725afd5" translate="yes" xml:space="preserve">
          <source>Different threads of execution are always allowed to access (read and modify) different</source>
          <target state="translated">다른 실행 스레드는 항상 다른 액세스 (읽기 및 수정)가 가능합니다</target>
        </trans-unit>
        <trans-unit id="6102a7f0fe44d0815c805b369337c3518cfa1342" translate="yes" xml:space="preserve">
          <source>Digits from the input are extracted in order in which they appear and are placed in &lt;code&gt;digits&lt;/code&gt; (after widening by &lt;code&gt;ct.widen()&lt;/code&gt; as necessary), or into a temporary buffer &lt;code&gt;buf1&lt;/code&gt;, from which the value of &lt;code&gt;units&lt;/code&gt; is constructed as if by.</source>
          <target state="translated">입력의 자릿수는 표시되는 순서대로 추출되고 &lt;code&gt;digits&lt;/code&gt; ( 필요에 따라 &lt;code&gt;ct.widen()&lt;/code&gt; 로 확장 한 후 ) 또는 임시 버퍼 &lt;code&gt;buf1&lt;/code&gt; 에 &lt;code&gt;units&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="3c01fca60aa6589b9f36d453d6b47860b07ada49" translate="yes" xml:space="preserve">
          <source>Direct comparison</source>
          <target state="translated">직접 비교</target>
        </trans-unit>
        <trans-unit id="3b5a431b2992d941f86c2dfe208b68e7062d2dd0" translate="yes" xml:space="preserve">
          <source>Direct initialization</source>
          <target state="translated">직접 초기화</target>
        </trans-unit>
        <trans-unit id="7274d8820c5fee9c5db6c1776fcd5cb91b3310d6" translate="yes" xml:space="preserve">
          <source>Direct initialization is performed in the following situations:</source>
          <target state="translated">직접 초기화는 다음 상황에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f347c23fb94afe99ca29d2298bd820db7bf1c6f2" translate="yes" xml:space="preserve">
          <source>Direct input/output</source>
          <target state="translated">직접 입출력</target>
        </trans-unit>
        <trans-unit id="a2ab92ed650895a2a45a32b3a3e754cd83b0792e" translate="yes" xml:space="preserve">
          <source>Direct-initialization is more permissive than copy-initialization: copy-initialization only considers non-&lt;a href=&quot;explicit&quot;&gt;explicit&lt;/a&gt; constructors and non-explicit user-defined &lt;a href=&quot;cast_operator&quot;&gt;conversion functions&lt;/a&gt;, while direct-initialization considers all constructors and all user-defined conversion functions.</source>
          <target state="translated">직접 초기화는 복사 초기화보다 허용됩니다. 복사 초기화는 &lt;a href=&quot;explicit&quot;&gt;명시&lt;/a&gt; 적이 지 않은 생성자와 명시 적이 지 않은 사용자 정의 &lt;a href=&quot;cast_operator&quot;&gt;변환 함수&lt;/a&gt; 만 고려 하고 직접 초기화는 모든 생성자와 모든 사용자 정의 변환 함수를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="ca827528d6904965fcebbbcad976a987f5f845b3" translate="yes" xml:space="preserve">
          <source>Directory not empty</source>
          <target state="translated">비어 있지 않은 디렉토리</target>
        </trans-unit>
        <trans-unit id="dbf41e0d56a898224a22116e416700301220633b" translate="yes" xml:space="preserve">
          <source>Disables recursion to the currently referred subdirectory, if any.</source>
          <target state="translated">현재 참조 된 서브 디렉토리에 대한 재귀를 사용하지 않습니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="f58ecc81435d11acb0a67c30b1e22e68e49f8cdc" translate="yes" xml:space="preserve">
          <source>Discarded-value expressions</source>
          <target state="translated">폐기 된 값 표현</target>
        </trans-unit>
        <trans-unit id="2df36c679013c753c1824914229ac0e9ed0ef85a" translate="yes" xml:space="preserve">
          <source>Discards any whitespace characters (as identified by calling &lt;code&gt;isspace()&lt;/code&gt;) until the first non-whitespace character is found, then takes as many characters as possible to form a valid</source>
          <target state="translated">공백이 아닌 첫 번째 문자를 찾을 때까지 공백 문자 ( &lt;code&gt;isspace()&lt;/code&gt; 를 호출하여 식별)를 버린 다음 가능한 한 많은 문자를 사용하여 유효한 문자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3f47e884dde353c0a64ae183f652592cd28d42e5" translate="yes" xml:space="preserve">
          <source>Discards any whitespace characters until the first non-whitespace character is found, then takes as many characters as possible to form a valid integer number representation and converts them to an integer value. The valid integer value consists of the following parts:</source>
          <target state="translated">공백이 아닌 첫 번째 문자가 발견 될 때까지 공백 문자를 버린 다음 가능한 한 많은 문자를 사용하여 유효한 정수 숫자 표현을 만들고 정수 값으로 변환합니다. 유효한 정수 값은 다음 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="c81179bcdd9b3307af4adf08188d3d07a7bac1e7" translate="yes" xml:space="preserve">
          <source>Discards leading whitespace from an input stream.</source>
          <target state="translated">입력 스트림에서 선행 공백을 버립니다.</target>
        </trans-unit>
        <trans-unit id="377cb5a5bea7348ac1e68f60141d93c4bdb87307" translate="yes" xml:space="preserve">
          <source>Discovered in 1969 by Lewis, Goodman and Miller, adopted as &quot;Minimal standard&quot; in 1988 by Park and Miller.</source>
          <target state="translated">1969 년 Lewis, Goodman 및 Miller에 의해 발견되었으며 1988 년 Park and Miller에 의해 &quot;최소 표준&quot;으로 채택되었습니다.</target>
        </trans-unit>
        <trans-unit id="ae6cfa9dc335d18070af803b70390536451ba542" translate="yes" xml:space="preserve">
          <source>Disjunction is short-circuiting: if there is a template type argument &lt;code&gt;Bi&lt;/code&gt; with &lt;code&gt;bool(Bi::value) != false&lt;/code&gt;, then instantiating &lt;code&gt;disjunction&amp;lt;B1, ..., BN&amp;gt;::value&lt;/code&gt; does not require the instantiation of &lt;code&gt;Bj::value&lt;/code&gt; for &lt;code&gt;j &amp;gt; i&lt;/code&gt;.</source>
          <target state="translated">분리는 단락은 다음과 같습니다 템플릿 형식 인수가있는 경우 &lt;code&gt;Bi&lt;/code&gt; 으로 &lt;code&gt;bool(Bi::value) != false&lt;/code&gt; , 다음 인스턴스 &lt;code&gt;disjunction&amp;lt;B1, ..., BN&amp;gt;::value&lt;/code&gt; 의 인스턴스가 필요하지 않습니다 &lt;code&gt;Bj::value&lt;/code&gt; 에 대한 &lt;code&gt;j &amp;gt; i&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9abf9890e32d8464e44790555cd72d60afabf52d" translate="yes" xml:space="preserve">
          <source>Disjunctions</source>
          <target state="translated">Disjunctions</target>
        </trans-unit>
        <trans-unit id="caf10f190392f2faa7bc482c7b22ad42731921f6" translate="yes" xml:space="preserve">
          <source>Display the 3-letter currency name used by the user's preferred locale.</source>
          <target state="translated">사용자가 선호하는 로캘에서 사용하는 3 자리 통화 이름을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="5954fe83c7a49121a1880508ed6ac624fee378e2" translate="yes" xml:space="preserve">
          <source>Display the time 100 months ago.</source>
          <target state="translated">100 개월 전에 시간을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="423208095dd7fc394399b8c356f8f00cd260869b" translate="yes" xml:space="preserve">
          <source>Distance</source>
          <target state="translated">Distance</target>
        </trans-unit>
        <trans-unit id="fd1524d48300936cbceec263f758a5a96bbb76bd" translate="yes" xml:space="preserve">
          <source>Distance between two points &lt;code&gt;(x1,y1,z1)&lt;/code&gt; and &lt;code&gt;(x2,y2,z2)&lt;/code&gt;on 3D space can be calculated as &lt;code&gt;std::hypot(x2-x1, y2-y1, z2-z1)&lt;/code&gt;.</source>
          <target state="translated">3D 공간 에서 두 점 &lt;code&gt;(x1,y1,z1)&lt;/code&gt; 과 &lt;code&gt;(x2,y2,z2)&lt;/code&gt; 사이의 거리는 &lt;code&gt;std::hypot(x2-x1, y2-y1, z2-z1)&lt;/code&gt; 로 계산할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f01d02880976f7e1838ff3f3df13cbfd002b1cb9" translate="yes" xml:space="preserve">
          <source>Do not copy un-matched strings to the output in &lt;code&gt;&lt;a href=&quot;regex_replace&quot;&gt;std::regex_replace&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">일치하지 않는 문자열을 &lt;code&gt;&lt;a href=&quot;regex_replace&quot;&gt;std::regex_replace&lt;/a&gt;&lt;/code&gt; 의 출력으로 복사하지 마십시오</target>
        </trans-unit>
        <trans-unit id="43711db88a28af64ea923db8648c0b480391f977" translate="yes" xml:space="preserve">
          <source>Do not match empty sequences</source>
          <target state="translated">빈 시퀀스와 일치하지 않습니다</target>
        </trans-unit>
        <trans-unit id="c9d95f10082b9d81d8079b3f0964bf8e567ba911" translate="yes" xml:space="preserve">
          <source>Does at most &lt;code&gt;(S*N)&lt;/code&gt; comparisons where &lt;code&gt;S = distance(s_first, s_last)&lt;/code&gt; and &lt;code&gt;N = distance(first, last)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S = distance(s_first, s_last)&lt;/code&gt; 및 &lt;code&gt;N = distance(first, last)&lt;/code&gt; 최대 &lt;code&gt;(S*N)&lt;/code&gt; 비교를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="3f9c3bd38274ec438ed28d5047eed8da3fcf8767" translate="yes" xml:space="preserve">
          <source>Does at most &lt;code&gt;S*(N-S+1)&lt;/code&gt; comparisons where &lt;code&gt;S = distance(s_first, s_last)&lt;/code&gt; and &lt;code&gt;N = distance(first, last)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S = distance(s_first, s_last)&lt;/code&gt; 이고 &lt;code&gt;N = distance(first, last)&lt;/code&gt; 최대 &lt;code&gt;S*(N-S+1)&lt;/code&gt; 비교를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="d5d72eae9001902f19e8bcae08d0e964043b4f4b" translate="yes" xml:space="preserve">
          <source>Does not guarantee that different elements in the same container can be modified concurrently by different threads.</source>
          <target state="translated">동일한 컨테이너의 다른 요소가 다른 스레드에 의해 동시에 수정 될 수 있다고 보장하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="883788dd08cfff4ca7998ab00b3759b56b7c7364" translate="yes" xml:space="preserve">
          <source>Does not necessarily store its elements as a contiguous array (so &lt;code&gt;&amp;amp;v[0] + n != &amp;amp;v[n]&lt;/code&gt;)</source>
          <target state="translated">요소를 연속 배열로 저장할 필요는 없습니다 (그래서 &lt;code&gt;&amp;amp;v[0] + n != &amp;amp;v[n]&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a21856d9cbd28e59dbf465574aba99bebff8b13b" translate="yes" xml:space="preserve">
          <source>Does not report errors.</source>
          <target state="translated">오류를보고하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3447823bd5fc25223d30bab3969dc0aac7621717" translate="yes" xml:space="preserve">
          <source>Does not throw exceptions unless one of the specified operations (e.g. constructor of an element) throws.</source>
          <target state="translated">지정된 연산 (예 : 요소의 생성자) 중 하나가 발생하지 않으면 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ae37e8f62f675a219235d32ec20c826c3e5eabb7" translate="yes" xml:space="preserve">
          <source>Does not throw exceptions.</source>
          <target state="translated">예외를 던지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="01f94754c933a1a64cefb5f8f91745fcf33fd610" translate="yes" xml:space="preserve">
          <source>Does not throw unless &lt;code&gt;rdbuf()-&amp;gt;pubseekoff()&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;rdbuf()-&amp;gt;pubseekoff()&lt;/code&gt; 가 발생 하지 않으면 던지지 않습니다</target>
        </trans-unit>
        <trans-unit id="01556bc47bc3694b4b418d4f1e066538ed180410" translate="yes" xml:space="preserve">
          <source>Does not throw unless an exception is thrown by the assignment operator of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 의 대입 연산자에 의해 예외가 발생하지 않으면 throw되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="7da49f71de70eb13d71c8949fb9902236b774a83" translate="yes" xml:space="preserve">
          <source>Does not throw unless comparison throws.</source>
          <target state="translated">비교가 발생하지 않으면 던지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ab1a8b368b338f93d4491fdb723ff6761a2acb94" translate="yes" xml:space="preserve">
          <source>Does not throw.</source>
          <target state="translated">던지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5604c151d5ed4c1bdc37c788640e4dbc08e5439c" translate="yes" xml:space="preserve">
          <source>Does not use &lt;code&gt;std::allocator_traits::construct&lt;/code&gt; to construct bit values.</source>
          <target state="translated">비트 값을 &lt;code&gt;std::allocator_traits::construct&lt;/code&gt; 하기 위해 std :: allocator_traits :: construct 를 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8b8009c818a431f9633c10b87e1762114c449a6f" translate="yes" xml:space="preserve">
          <source>Does nothing, this member function is provided to satisfy the requirements of &lt;a href=&quot;../../named_req/outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;.</source>
          <target state="translated">이 멤버 함수는 &lt;a href=&quot;../../named_req/outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt; 의 요구 사항을 충족시키기 위해 제공되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ba0fbc930c6e3020b850bcdf93ff4cec216cd367" translate="yes" xml:space="preserve">
          <source>Does nothing.</source>
          <target state="translated">아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0f9904708556559b5e56c69bdf3b2842e3b3a8f0" translate="yes" xml:space="preserve">
          <source>Does nothing. These operator overloads are provided to satisfy the requirements of &lt;a href=&quot;../../named_req/outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;. They make it possible for the expressions &lt;code&gt;*iter++=value&lt;/code&gt; and &lt;code&gt;*++iter=value&lt;/code&gt; to be used to output (insert) a value into the underlying stream.</source>
          <target state="translated">아무것도하지 않습니다. 이러한 연산자 과부하는 &lt;a href=&quot;../../named_req/outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt; 의 요구 사항을 충족시키기 위해 제공됩니다 . &lt;code&gt;*iter++=value&lt;/code&gt; 및 &lt;code&gt;*++iter=value&lt;/code&gt; 표현식 을 사용하여 값을 기본 스트림에 출력 (삽입)하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66063ff9aefb79f28754d81a94879672fa1a3599" translate="yes" xml:space="preserve">
          <source>Does nothing; returns &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">아무것도하지 않습니다. &lt;code&gt;*this&lt;/code&gt; 를 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="26c986c0b2a8c981af75cc9b323e96898b596d78" translate="yes" xml:space="preserve">
          <source>Domain error</source>
          <target state="translated">도메인 오류</target>
        </trans-unit>
        <trans-unit id="683ae4a82c0162283d391c1cde234ae848eeb039" translate="yes" xml:space="preserve">
          <source>Domain error may occur if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are both zero.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 모두 0 이면 도메인 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="209a993b5d06ebc1189ef12bc6140d9643c1f5b5" translate="yes" xml:space="preserve">
          <source>Domain error may occur if &lt;code&gt;y&lt;/code&gt; is zero.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; 가 0 이면 도메인 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f953ae32bdac16ba6277a0e47315c5bfadd7dae5" translate="yes" xml:space="preserve">
          <source>Domain error occurs if &lt;code&gt;arg&lt;/code&gt; is less than -1.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 가 -1보다 작은 경우 도메인 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="1b2c79d3977fa1e82c68257e4ee3be3430c9d49f" translate="yes" xml:space="preserve">
          <source>Domain error occurs if &lt;code&gt;arg&lt;/code&gt; is less than zero.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 가 0보다 작은 경우 도메인 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="66c8123220ba44c0910486f001f0263ba3075efa" translate="yes" xml:space="preserve">
          <source>Domain error occurs if &lt;code&gt;arg&lt;/code&gt; is outside the range &lt;code&gt;[-1.0, 1.0]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 가 &lt;code&gt;[-1.0, 1.0]&lt;/code&gt; 범위를 벗어나 면 도메인 오류가 발생합니다</target>
        </trans-unit>
        <trans-unit id="30b1970ca78476223062c512a821c8789e06506b" translate="yes" xml:space="preserve">
          <source>Domain or range error may occur if &lt;code&gt;arg&lt;/code&gt; is zero.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 가 0 이면 도메인 또는 범위 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3dfbcc21b3b4446b365a8930285669893de92ba8" translate="yes" xml:space="preserve">
          <source>Due to &lt;a href=&quot;../language/copy_elision&quot;&gt;guaranteed copy elision&lt;/a&gt;, &lt;code&gt;T&lt;/code&gt; need not be movable.</source>
          <target state="translated">로 인해 &lt;a href=&quot;../language/copy_elision&quot;&gt;보장 복사 생략&lt;/a&gt; , &lt;code&gt;T&lt;/code&gt; 의 필요 이동 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="85ed910624b68de5d871231ce556275ce20ffde5" translate="yes" xml:space="preserve">
          <source>Due to &lt;a href=&quot;translation_phases#maximal_munch&quot;&gt;maximal munch&lt;/a&gt;, hexadecimal integer literals ending in &lt;code&gt;e&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;, when followed by the operators &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, must be separated from the operator with whitespace or parentheses in the source:</source>
          <target state="translated">&lt;a href=&quot;translation_phases#maximal_munch&quot;&gt;최대 munch&lt;/a&gt; 로 인해 &lt;code&gt;e&lt;/code&gt; 및 &lt;code&gt;E&lt;/code&gt; 로 끝나는 16 진 정수 리터럴은 뒤에 연산자 &lt;code&gt;+&lt;/code&gt; 또는 &lt;code&gt;-&lt;/code&gt; 가 오는 경우 소스에서 공백 또는 괄호로 연산자와 분리해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2268bc8a6426632a7bff4d4be3dcb9684418c19" translate="yes" xml:space="preserve">
          <source>Due to &lt;a href=&quot;translation_phases#maximal_munch&quot;&gt;maximal munch&lt;/a&gt;, user-defined integer and floating point literals ending in &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;,(since C++17)&lt;code&gt;e&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;, when followed by the operators &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, must be separated from the operator with whitespace or parentheses in the source:</source>
          <target state="translated">&lt;a href=&quot;translation_phases#maximal_munch&quot;&gt;최대 뭉치&lt;/a&gt; 로 인해 &lt;code&gt;p&lt;/code&gt; , &lt;code&gt;P&lt;/code&gt; , (C ++ 17부터) &lt;code&gt;e&lt;/code&gt; 및 &lt;code&gt;E&lt;/code&gt; 로 끝나는 사용자 정의 정수 및 부동 소수점 리터럴 은 연산자 &lt;code&gt;+&lt;/code&gt; 또는 &lt;code&gt;-&lt;/code&gt; 뒤에 오는 공백이나 괄호로 연산자와 분리해야합니다. 소스 :</target>
        </trans-unit>
        <trans-unit id="aaeafd6d95c5e5ffe164343f7d8af418f31a6b31" translate="yes" xml:space="preserve">
          <source>Due to its infinite intermediate precision, &lt;code&gt;fma&lt;/code&gt; is a common building block of other correctly-rounded mathematical operations, such as &lt;code&gt;&lt;a href=&quot;sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt; or even the division (where not provided by the CPU, e.g. Itanium).</source>
          <target state="translated">중간 정밀도가 무한하기 때문에 &lt;code&gt;fma&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt; 또는 심지어 분할 (예 : Itanium과 같이 CPU에서 제공하지 않은 경우) 과 같이 올바르게 반올림 된 수학적 연산의 공통 빌딩 블록입니다 .</target>
        </trans-unit>
        <trans-unit id="a8edf7aed52e22273ca006dc7586e6c5a889a81c" translate="yes" xml:space="preserve">
          <source>Due to the alignment requirements, the number of allocated bytes is not necessarily equal to &lt;code&gt;num*size&lt;/code&gt;.</source>
          <target state="translated">정렬 요구 사항으로 인해 할당 된 바이트 수가 반드시 &lt;code&gt;num*size&lt;/code&gt; 와 같을 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c8a686755c24fd1b57bfaeafef9554ec197bba41" translate="yes" xml:space="preserve">
          <source>Due to the special rules for &lt;a href=&quot;unqualified_lookup&quot;&gt;unqualified name lookup&lt;/a&gt; for template names in member access expressions, when a non-dependent template name appears in a member access expression (after &lt;code&gt;-&amp;gt;&lt;/code&gt; or after &lt;code&gt;.&lt;/code&gt;), the disambiguator is unnecessary if there is a class(since C++11) template with the same name found by ordinary lookup in the context of the expression. However, if the template found by lookup in the context of the expression differs from the one found in the context of the class, the program is ill-formed(until C++11).</source>
          <target state="translated">때문에 대한 특별한 규칙에 &lt;a href=&quot;unqualified_lookup&quot;&gt;규정되지 않은 이름 조회&lt;/a&gt; 멤버 액세스 식, 멤버 액세스 식의 비에 의존하는 템플릿 이름이 나타납니다 (후에서 템플릿 이름 &lt;code&gt;-&amp;gt;&lt;/code&gt; 또는 후 &lt;code&gt;.&lt;/code&gt; ) 클래스가 있기 때문에 (이 경우 disambiguator 불필요 C ++ 11) 이름이 같은 템플릿을 사용하여 표현식 컨텍스트에서 일반 조회를 통해 찾습니다. 그러나 표현식 컨텍스트에서 찾아보기로 찾은 템플리트가 클래스 컨텍스트에서 찾은 템플리트와 다른 경우 프로그램이 잘못 구성됩니다 (C ++ 11까지).</target>
        </trans-unit>
        <trans-unit id="8b8517db5ae4e741126537abdeae16c1f75f49e7" translate="yes" xml:space="preserve">
          <source>Duplicate placeholders in the same bind expression (multiple &lt;code&gt;_1&lt;/code&gt;'s for example) are allowed, but the results are only well defined if the corresponding argument (&lt;code&gt;u1&lt;/code&gt;) is an lvalue or non-movable rvalue.</source>
          <target state="translated">동일한 바인드 표현식 ( 예 : 여러 &lt;code&gt;_1&lt;/code&gt; ) 에 중복 된 자리 표시 자가 허용되지만 해당 인수 ( &lt;code&gt;u1&lt;/code&gt; )가 lvalue 또는 움직일 수없는 rvalue 인 경우에만 결과가 잘 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="37b2e6de1e683f0c0de43a8baca3b0d711a52bfd" translate="yes" xml:space="preserve">
          <source>Durations that are convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, but not &lt;code&gt;std::chrono::years&lt;/code&gt;, can be directly added to or subtracted from a &lt;code&gt;year_month&lt;/code&gt;. Durations convertible to &lt;code&gt;std::chrono::years&lt;/code&gt; cannot because such durations are also convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, resulting in an ambiguity:</source>
          <target state="translated">&lt;code&gt;std::chrono::months&lt;/code&gt; 로 변환 가능 하지만 &lt;code&gt;std::chrono::years&lt;/code&gt; 로 변환 할 수없는 기간 은 &lt;code&gt;year_month&lt;/code&gt; 에 직접 더하거나 뺄 수 있습니다 . 기간 컨버터블에 &lt;code&gt;std::chrono::years&lt;/code&gt; 수없는 그런 기간도 전환이 있기 때문에 &lt;code&gt;std::chrono::months&lt;/code&gt; , 모호한 결과 :</target>
        </trans-unit>
        <trans-unit id="8696e4e642da0c139c25bcb3ebbe47306cc0a92a" translate="yes" xml:space="preserve">
          <source>Durations that are convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, but not &lt;code&gt;std::chrono::years&lt;/code&gt;, can be directly added to or subtracted from a &lt;code&gt;year_month_day&lt;/code&gt;. Durations convertible to &lt;code&gt;std::chrono::years&lt;/code&gt; cannot because such durations are also convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, resulting in an ambiguity:</source>
          <target state="translated">&lt;code&gt;std::chrono::months&lt;/code&gt; 로 변환 가능 하지만 &lt;code&gt;std::chrono::years&lt;/code&gt; 로 변환 할 수없는 기간 은 &lt;code&gt;year_month_day&lt;/code&gt; 에서 직접 더하거나 뺄 수 있습니다 . 기간 컨버터블에 &lt;code&gt;std::chrono::years&lt;/code&gt; 수없는 그런 기간도 전환이 있기 때문에 &lt;code&gt;std::chrono::months&lt;/code&gt; , 모호한 결과 :</target>
        </trans-unit>
        <trans-unit id="b1963fe5979feac2a2b65cfc53186f53a23590b8" translate="yes" xml:space="preserve">
          <source>Durations that are convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, but not &lt;code&gt;std::chrono::years&lt;/code&gt;, can be directly added to or subtracted from a &lt;code&gt;year_month_day_last&lt;/code&gt;. Durations convertible to &lt;code&gt;std::chrono::years&lt;/code&gt; cannot because such durations are also convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, resulting in an ambiguity:</source>
          <target state="translated">&lt;code&gt;std::chrono::months&lt;/code&gt; 로 변환 가능 하지만 &lt;code&gt;std::chrono::years&lt;/code&gt; 로 변환 할 수없는 기간 은 &lt;code&gt;year_month_day_last&lt;/code&gt; 에 직접 더하거나 뺄 수 있습니다 . 기간 컨버터블에 &lt;code&gt;std::chrono::years&lt;/code&gt; 수없는 그런 기간도 전환이 있기 때문에 &lt;code&gt;std::chrono::months&lt;/code&gt; , 모호한 결과 :</target>
        </trans-unit>
        <trans-unit id="cfd576dbf223ee5134e62a27758b4d8d78c9badd" translate="yes" xml:space="preserve">
          <source>Durations that are convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, but not &lt;code&gt;std::chrono::years&lt;/code&gt;, can be directly added to or subtracted from a &lt;code&gt;year_month_weekday&lt;/code&gt;. Durations convertible to &lt;code&gt;std::chrono::years&lt;/code&gt; cannot because such durations are also convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, resulting in an ambiguity:</source>
          <target state="translated">&lt;code&gt;std::chrono::months&lt;/code&gt; 로 변환 가능 하지만 &lt;code&gt;std::chrono::years&lt;/code&gt; 로 변환 할 수없는 기간 은 &lt;code&gt;year_month_weekday&lt;/code&gt; 에서 직접 더하거나 뺄 수 있습니다 . 기간 컨버터블에 &lt;code&gt;std::chrono::years&lt;/code&gt; 수없는 그런 기간도 전환이 있기 때문에 &lt;code&gt;std::chrono::months&lt;/code&gt; , 모호한 결과 :</target>
        </trans-unit>
        <trans-unit id="4fd2311a63f909a64b0e086233db7978876d60b8" translate="yes" xml:space="preserve">
          <source>Durations that are convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, but not &lt;code&gt;std::chrono::years&lt;/code&gt;, can be directly added to or subtracted from a &lt;code&gt;year_month_weekday_last&lt;/code&gt;. Durations convertible to &lt;code&gt;std::chrono::years&lt;/code&gt; cannot because such durations are also convertible to &lt;code&gt;std::chrono::months&lt;/code&gt;, resulting in an ambiguity:</source>
          <target state="translated">&lt;code&gt;std::chrono::months&lt;/code&gt; 로 변환 가능 하지만 &lt;code&gt;std::chrono::years&lt;/code&gt; 로 변환 할 수없는 기간 은 &lt;code&gt;year_month_weekday_last&lt;/code&gt; 에서 직접 더하거나 뺄 수 있습니다 . 기간 컨버터블에 &lt;code&gt;std::chrono::years&lt;/code&gt; 수없는 그런 기간도 전환이 있기 때문에 &lt;code&gt;std::chrono::months&lt;/code&gt; , 모호한 결과 :</target>
        </trans-unit>
        <trans-unit id="1ecb17b798b8270fd6e0a67bf2ccd6bde4ae2191" translate="yes" xml:space="preserve">
          <source>During &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, specializations of conversion function templates are not found by &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt;. Instead, all visible conversion function templates are considered, and every specialization produced by &lt;a href=&quot;template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; (which has special rules for conversion function templates) is used as if found by name lookup.</source>
          <target state="translated">&lt;a href=&quot;overload_resolution&quot;&gt;과부하 해결&lt;/a&gt; 중에는 &lt;a href=&quot;lookup&quot;&gt;이름 조회&lt;/a&gt; 로 변환 함수 템플릿의 전문화를 찾을 수 없습니다 . 대신, 모든 가시적 인 변환 함수 템플릿이 고려되고, 변환 함수 템플릿에 대한 특별한 규칙이있는 &lt;a href=&quot;template_argument_deduction&quot;&gt;템플릿 인수 공제에&lt;/a&gt; 의해 생성 된 모든 전문화 는 이름 조회에서 찾은 것처럼 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0fe2b09316cdb96600749d753c3dc995ca0876dc" translate="yes" xml:space="preserve">
          <source>During &lt;a href=&quot;reference_initialization&quot;&gt;reference initialization&lt;/a&gt;, where the reference to cv1 &lt;code&gt;T&lt;/code&gt; is bound to the lvalue or rvalue result of a conversion from the initializer expression from the class type cv2 &lt;code&gt;S&lt;/code&gt;, the following functions are selected for the candidate set:</source>
          <target state="translated">cv1 &lt;code&gt;T&lt;/code&gt; 에 대한 참조가 클래스 유형 cv2 &lt;code&gt;S&lt;/code&gt; 에서 이니셜 라이저 표현식으로부터의 변환의 lvalue 또는 rvalue 결과에 바인드 되는 &lt;a href=&quot;reference_initialization&quot;&gt;참조 초기화&lt;/a&gt; 동안 후보 세트에 대해 다음 함수가 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="6fa255a72ea55581ea7cfbf7c6d74f1bec14ef0c" translate="yes" xml:space="preserve">
          <source>During constant expression evaluation, only predicates of checked contracts are evaluated. In all other contexts, it is unspecified whether the predicate of a contract that is not checked is evaluated; the behavior is undefined if it would evaluate to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">상수 표현식 평가 중에는 점검 된 계약의 술어 만 평가됩니다. 다른 모든 상황에서, 점검되지 않은 계약의 술어가 평가되는지 여부는 지정되지 않습니다. &lt;code&gt;false&lt;/code&gt; 로 평가되면 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0e05f57e97e63644b32e6b937d47922f81c74c57" translate="yes" xml:space="preserve">
          <source>During construction and destruction</source>
          <target state="translated">건설 및 파괴 중</target>
        </trans-unit>
        <trans-unit id="da096fb394b10afe4fab30a42fd0ddcc339f1983" translate="yes" xml:space="preserve">
          <source>During construction and destruction, other restrictions apply, see &lt;a href=&quot;virtual#During_construction_and_destruction&quot;&gt;virtual function calls during construction and destruction&lt;/a&gt;.</source>
          <target state="translated">시공 및 파기 중에는 다른 제한 사항이 적용됩니다 . &lt;a href=&quot;virtual#During_construction_and_destruction&quot;&gt;시공 및 파기시 가상 함수 호출을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="27c254a01195f1f14d46f3eec8cd27131b7bd8a4" translate="yes" xml:space="preserve">
          <source>During program startup, the equivalent of &lt;code&gt;std::setlocale(&lt;a href=&quot;lc_categories&quot;&gt;LC_ALL&lt;/a&gt;, &quot;C&quot;);&lt;/code&gt; is executed before any user code is run.</source>
          <target state="translated">프로그램 시작 중 &lt;code&gt;std::setlocale(&lt;a href=&quot;lc_categories&quot;&gt;LC_ALL&lt;/a&gt;, &quot;C&quot;);&lt;/code&gt; 사용자 코드가 실행되기 전에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bc9e940260c92a652944f95d9ab298383890c48e" translate="yes" xml:space="preserve">
          <source>During template argument deduction within the partial ordering process, template parameters don't require to be matched with arguments, if the argument is not used in any of the types considered for partial ordering.</source>
          <target state="translated">부분 순서화 프로세스 내에서 템플리트 인수를 공제하는 동안 인수가 부분 순서로 간주되는 유형에 사용되지 않는 경우 템플리트 매개 변수를 인수와 일치시킬 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="1a22fef7d069133b1931b54fed22645a382de57b" translate="yes" xml:space="preserve">
          <source>During the execution of a parallel algorithm with any of these three execution policies, if the invocation of an element access function exits via an uncaught exception, &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; is called, but the implementations may define additional execution policies that handle exceptions differently.</source>
          <target state="translated">이 세 가지 실행 정책 중 하나를 사용하여 병렬 알고리즘을 실행하는 동안 요소 액세스 함수 호출이 포착되지 않은 예외를 통해 종료되면 &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 가 호출되지만 구현에서는 예외를 다르게 처리하는 추가 실행 정책을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10cb4fe7aa78a48d25d96fc9efe5c2a17e8792e9" translate="yes" xml:space="preserve">
          <source>Dynamic exception specification</source>
          <target state="translated">동적 예외 사양</target>
        </trans-unit>
        <trans-unit id="d4e7c810185c106fce2bb543d92e3cd83ac2f751" translate="yes" xml:space="preserve">
          <source>Dynamic exception specifications</source>
          <target state="translated">동적 예외 사양</target>
        </trans-unit>
        <trans-unit id="32076ef1b6fcb7d2d58e1588d4381bebbd47fdac" translate="yes" xml:space="preserve">
          <source>Dynamic initialization</source>
          <target state="translated">동적 초기화</target>
        </trans-unit>
        <trans-unit id="125b9b04c1f5ba28141a63e460a3dd4919bd44d4" translate="yes" xml:space="preserve">
          <source>Dynamic initialization and destruction with concurrency</source>
          <target state="translated">동시성으로 동적 초기화 및 소멸</target>
        </trans-unit>
        <trans-unit id="242265ad106d08797fcf49e4123a59717b58562d" translate="yes" xml:space="preserve">
          <source>Dynamic memory allocation</source>
          <target state="translated">동적 메모리 할당</target>
        </trans-unit>
        <trans-unit id="28d5c21ecaf9e72ac8c4552a27950bcee688d7b3" translate="yes" xml:space="preserve">
          <source>Dynamic memory allocation for over-aligned data</source>
          <target state="translated">과도하게 정렬 된 데이터를위한 동적 메모리 할당</target>
        </trans-unit>
        <trans-unit id="a40b51b4d356e9babd59b992be7f06decfd0df24" translate="yes" xml:space="preserve">
          <source>Dynamic memory deallocation</source>
          <target state="translated">동적 메모리 할당 해제</target>
        </trans-unit>
        <trans-unit id="27eaec4864e4b466246e5081a68f0b07f10aafac" translate="yes" xml:space="preserve">
          <source>Dynamic memory management</source>
          <target state="translated">동적 메모리 관리</target>
        </trans-unit>
        <trans-unit id="ed3e54e8b18cda2cc72860ed470b89371118970c" translate="yes" xml:space="preserve">
          <source>Dynamic non-local initialization</source>
          <target state="translated">동적 비 로컬 초기화</target>
        </trans-unit>
        <trans-unit id="46984d75bba7835539a3eef58aaa62fa55e1f01a" translate="yes" xml:space="preserve">
          <source>Dynamic type</source>
          <target state="translated">다이나믹 타입</target>
        </trans-unit>
        <trans-unit id="bef9dbe55793bb04876cef0c528de5fbf13396ac" translate="yes" xml:space="preserve">
          <source>E is an expression that names a &lt;a href=&quot;functions&quot;&gt;function&lt;/a&gt;</source>
          <target state="translated">E는 &lt;a href=&quot;functions&quot;&gt;함수의&lt;/a&gt; 이름을 나타내는 표현식입니다</target>
        </trans-unit>
        <trans-unit id="27e24deea027b03af8e4a5fb9af1cd7edd9a1f02" translate="yes" xml:space="preserve">
          <source>E1&lt;code&gt;,&lt;/code&gt;E2</source>
          <target state="translated">E1&lt;code&gt;,&lt;/code&gt;E2</target>
        </trans-unit>
        <trans-unit id="f3ec84741be13257ce2ee84e60ec5deb18086873" translate="yes" xml:space="preserve">
          <source>E1&lt;code&gt;?&lt;/code&gt;E2&lt;code&gt;:&lt;/code&gt;E3</source>
          <target state="translated">E1&lt;code&gt;?&lt;/code&gt;E2&lt;code&gt;:&lt;/code&gt;E3</target>
        </trans-unit>
        <trans-unit id="61b2e0689caf0c4613eeb4eb402a0f3c26d5dd61" translate="yes" xml:space="preserve">
          <source>E2BIG</source>
          <target state="translated">E2BIG</target>
        </trans-unit>
        <trans-unit id="7c3cba5cfb875c54a838f8fb7c062f2ab636df56" translate="yes" xml:space="preserve">
          <source>E2BIG, EACCES, ..., EXDEV</source>
          <target state="translated">E2BIG, EACCES, ..., EXDEV</target>
        </trans-unit>
        <trans-unit id="802d04b34945f49f4ebc93496672d16304220d60" translate="yes" xml:space="preserve">
          <source>E&lt;code&gt;(&lt;/code&gt;A1, A2, A3,...&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;(&lt;/code&gt; A1, A2, A3, ... &lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c647bb6f149b39d230acec772127b3daffb4740a" translate="yes" xml:space="preserve">
          <source>EACCES</source>
          <target state="translated">EACCES</target>
        </trans-unit>
        <trans-unit id="87d84f9303527f583682c77fa1314a98be13dd27" translate="yes" xml:space="preserve">
          <source>EADDRINUSE</source>
          <target state="translated">EADDRINUSE</target>
        </trans-unit>
        <trans-unit id="24293791b4634b113e67e33fce2841ff04fc595c" translate="yes" xml:space="preserve">
          <source>EADDRNOTAVAIL</source>
          <target state="translated">EADDRNOTAVAIL</target>
        </trans-unit>
        <trans-unit id="4695494c6ceeb6375fda93f91e84a2a76c2dd986" translate="yes" xml:space="preserve">
          <source>EAFNOSUPPORT</source>
          <target state="translated">EAFNOSUPPORT</target>
        </trans-unit>
        <trans-unit id="f42213f477376615f2fe8db1b07dd4225329d135" translate="yes" xml:space="preserve">
          <source>EAGAIN</source>
          <target state="translated">EAGAIN</target>
        </trans-unit>
        <trans-unit id="f450fe110c12178a323ae79eb6fe8622f5874cb2" translate="yes" xml:space="preserve">
          <source>EALREADY</source>
          <target state="translated">EALREADY</target>
        </trans-unit>
        <trans-unit id="3081495350d368283dc5a330d7642a660f677ef0" translate="yes" xml:space="preserve">
          <source>EBADF</source>
          <target state="translated">EBADF</target>
        </trans-unit>
        <trans-unit id="757ad17f231332891a5e76f3da7ef2e096bd6ead" translate="yes" xml:space="preserve">
          <source>EBADMSG</source>
          <target state="translated">EBADMSG</target>
        </trans-unit>
        <trans-unit id="d80c8b1f1aecf6dcfe4edfbbe23efd20d9163d68" translate="yes" xml:space="preserve">
          <source>EBO</source>
          <target state="translated">EBO</target>
        </trans-unit>
        <trans-unit id="d3ba1e9ebfbbf902bad89947b3a13c0a11d874e4" translate="yes" xml:space="preserve">
          <source>EBUSY</source>
          <target state="translated">EBUSY</target>
        </trans-unit>
        <trans-unit id="c0635ea2b9eebbe714ea107429e32fe387325083" translate="yes" xml:space="preserve">
          <source>ECANCELED</source>
          <target state="translated">ECANCELED</target>
        </trans-unit>
        <trans-unit id="10e43a4301978488af8f79f89c6824fed846b278" translate="yes" xml:space="preserve">
          <source>ECHILD</source>
          <target state="translated">ECHILD</target>
        </trans-unit>
        <trans-unit id="1ddd59a907dd21d0934d912942672c0bcf22a5e3" translate="yes" xml:space="preserve">
          <source>ECONNABORTED</source>
          <target state="translated">ECONNABORTED</target>
        </trans-unit>
        <trans-unit id="4957984e0d267a52c5513242a08a9852d1fad203" translate="yes" xml:space="preserve">
          <source>ECONNREFUSED</source>
          <target state="translated">ECONNREFUSED</target>
        </trans-unit>
        <trans-unit id="5840eab8479bb9c6bd05c8cb8b13e40c38957065" translate="yes" xml:space="preserve">
          <source>ECONNRESET</source>
          <target state="translated">ECONNRESET</target>
        </trans-unit>
        <trans-unit id="f44b4a2fa6ffeda2db1f47995a4197d23da6e1f7" translate="yes" xml:space="preserve">
          <source>EDEADLK</source>
          <target state="translated">EDEADLK</target>
        </trans-unit>
        <trans-unit id="e67b5bcad636f31676995fe070ad1c36587b12f3" translate="yes" xml:space="preserve">
          <source>EDESTADDRREQ</source>
          <target state="translated">EDESTADDRREQ</target>
        </trans-unit>
        <trans-unit id="4a50ae31fdb1876dd49f36fd10696a265ad4f349" translate="yes" xml:space="preserve">
          <source>EDOM</source>
          <target state="translated">EDOM</target>
        </trans-unit>
        <trans-unit id="1fd5093ce355f848ff39abbdca545269b7cbe840" translate="yes" xml:space="preserve">
          <source>EEXIST</source>
          <target state="translated">EEXIST</target>
        </trans-unit>
        <trans-unit id="ade95ab74dffe6ba4405349a4a3e87f4aa91b183" translate="yes" xml:space="preserve">
          <source>EFAULT</source>
          <target state="translated">EFAULT</target>
        </trans-unit>
        <trans-unit id="db6737edaaa5a588551497212bc4ba78426e3495" translate="yes" xml:space="preserve">
          <source>EFBIG</source>
          <target state="translated">EFBIG</target>
        </trans-unit>
        <trans-unit id="9ef722398207cc04f627d4081ce9b112b2be0b70" translate="yes" xml:space="preserve">
          <source>EHOSTUNREACH</source>
          <target state="translated">EHOSTUNREACH</target>
        </trans-unit>
        <trans-unit id="7f8eec4fb27679b2da51cc4bc15a8f1a32db18cf" translate="yes" xml:space="preserve">
          <source>EIDRM</source>
          <target state="translated">EIDRM</target>
        </trans-unit>
        <trans-unit id="bafb9dc439b47e39a5166a169171eda5a0ccd069" translate="yes" xml:space="preserve">
          <source>EILSEQ</source>
          <target state="translated">EILSEQ</target>
        </trans-unit>
        <trans-unit id="df696d3064c7c1661089f279491d1d34e5facc24" translate="yes" xml:space="preserve">
          <source>EINPROGRESS</source>
          <target state="translated">EINPROGRESS</target>
        </trans-unit>
        <trans-unit id="bfad52f5126e6610aecdb447af8fc21938df1bcd" translate="yes" xml:space="preserve">
          <source>EINTR</source>
          <target state="translated">EINTR</target>
        </trans-unit>
        <trans-unit id="bf1e810d7d521485ebd20ce7b250c75ca28fbba3" translate="yes" xml:space="preserve">
          <source>EINVAL</source>
          <target state="translated">EINVAL</target>
        </trans-unit>
        <trans-unit id="b0fa993d41c42f8971227fd3909960a221a5fbfa" translate="yes" xml:space="preserve">
          <source>EIO</source>
          <target state="translated">EIO</target>
        </trans-unit>
        <trans-unit id="f7d639d978bb57981bb84feba408a157b8142319" translate="yes" xml:space="preserve">
          <source>EISCONN</source>
          <target state="translated">EISCONN</target>
        </trans-unit>
        <trans-unit id="58babbb6d0a2886bf762a718adec8c6f7294d13f" translate="yes" xml:space="preserve">
          <source>EISDIR</source>
          <target state="translated">EISDIR</target>
        </trans-unit>
        <trans-unit id="1eeb27393bb4d694f018238c2c74ee56100ac1f3" translate="yes" xml:space="preserve">
          <source>ELOOP</source>
          <target state="translated">ELOOP</target>
        </trans-unit>
        <trans-unit id="321c04ac464f1d174988ef9c20d8f27ac2258543" translate="yes" xml:space="preserve">
          <source>EMFILE</source>
          <target state="translated">EMFILE</target>
        </trans-unit>
        <trans-unit id="bde1ac3a73edf0de230021befea6ce4a0b574b4b" translate="yes" xml:space="preserve">
          <source>EMLINK</source>
          <target state="translated">EMLINK</target>
        </trans-unit>
        <trans-unit id="a821a7e79cf0280bacc2376ab7833b7e1347825c" translate="yes" xml:space="preserve">
          <source>EMSGSIZE</source>
          <target state="translated">EMSGSIZE</target>
        </trans-unit>
        <trans-unit id="595bc7ec7c278738942a211c417d6a92cb5cfc49" translate="yes" xml:space="preserve">
          <source>ENAMETOOLONG</source>
          <target state="translated">ENAMETOOLONG</target>
        </trans-unit>
        <trans-unit id="bcac35cfe02d30a67f9f0b7f8c41387d159852cc" translate="yes" xml:space="preserve">
          <source>ENETDOWN</source>
          <target state="translated">ENETDOWN</target>
        </trans-unit>
        <trans-unit id="52d02793aa63e03eb3bd5b9222558225b1135743" translate="yes" xml:space="preserve">
          <source>ENETRESET</source>
          <target state="translated">ENETRESET</target>
        </trans-unit>
        <trans-unit id="f6fea489b9caae1659ee8dcbf0113af84a6eb93d" translate="yes" xml:space="preserve">
          <source>ENETUNREACH</source>
          <target state="translated">ENETUNREACH</target>
        </trans-unit>
        <trans-unit id="c8c25974cd2d09a211048430124180ed694d899e" translate="yes" xml:space="preserve">
          <source>ENFILE</source>
          <target state="translated">ENFILE</target>
        </trans-unit>
        <trans-unit id="a58a8e470a7ffe85595a681dad4f728635440e9c" translate="yes" xml:space="preserve">
          <source>ENOBUFS</source>
          <target state="translated">ENOBUFS</target>
        </trans-unit>
        <trans-unit id="621347f0e941d30f9327a576e77668c8bb6c1e4e" translate="yes" xml:space="preserve">
          <source>ENODATA</source>
          <target state="translated">ENODATA</target>
        </trans-unit>
        <trans-unit id="ccbdbd955876b98e23b9e0041708c952c370c512" translate="yes" xml:space="preserve">
          <source>ENODEV</source>
          <target state="translated">ENODEV</target>
        </trans-unit>
        <trans-unit id="f052a2dfc5a4b7d99a0ff2ffa44457b50c74fa40" translate="yes" xml:space="preserve">
          <source>ENOENT</source>
          <target state="translated">ENOENT</target>
        </trans-unit>
        <trans-unit id="8a9a1045babfea4961472c0660917c4ea64f7e56" translate="yes" xml:space="preserve">
          <source>ENOEXEC</source>
          <target state="translated">ENOEXEC</target>
        </trans-unit>
        <trans-unit id="a9ea5f88fcbd757a5680eebf2f0cdc9e6a2d0471" translate="yes" xml:space="preserve">
          <source>ENOLCK</source>
          <target state="translated">ENOLCK</target>
        </trans-unit>
        <trans-unit id="b40f60e82830da68d192c9d84f564a0a00f9fc8d" translate="yes" xml:space="preserve">
          <source>ENOLINK</source>
          <target state="translated">ENOLINK</target>
        </trans-unit>
        <trans-unit id="223119dcef86439a0397ba5f4c60d7c554879d3b" translate="yes" xml:space="preserve">
          <source>ENOMEM</source>
          <target state="translated">ENOMEM</target>
        </trans-unit>
        <trans-unit id="8d70ea31905fa489991ce9a93446017f3b7608a6" translate="yes" xml:space="preserve">
          <source>ENOMSG</source>
          <target state="translated">ENOMSG</target>
        </trans-unit>
        <trans-unit id="4466b75cfa7f8d15f643c5f896ce600d6839b84e" translate="yes" xml:space="preserve">
          <source>ENOPROTOOPT</source>
          <target state="translated">ENOPROTOOPT</target>
        </trans-unit>
        <trans-unit id="1bcbb1f9614ca8001005481a41fe82b737c2f6f2" translate="yes" xml:space="preserve">
          <source>ENOSPC</source>
          <target state="translated">ENOSPC</target>
        </trans-unit>
        <trans-unit id="54ec7a7f59fe2869c7bc2e8a1e2b942edcedf780" translate="yes" xml:space="preserve">
          <source>ENOSR</source>
          <target state="translated">ENOSR</target>
        </trans-unit>
        <trans-unit id="0d3cd37a648dc0f095bd9c5c5f7e25eac436afdf" translate="yes" xml:space="preserve">
          <source>ENOSTR</source>
          <target state="translated">ENOSTR</target>
        </trans-unit>
        <trans-unit id="2e4c602e5ae5341e77af7ac139f430fbcdc39295" translate="yes" xml:space="preserve">
          <source>ENOSYS</source>
          <target state="translated">ENOSYS</target>
        </trans-unit>
        <trans-unit id="895e3202f9a8fa235f3569c2f86ba47ecbc7b60b" translate="yes" xml:space="preserve">
          <source>ENOTCONN</source>
          <target state="translated">ENOTCONN</target>
        </trans-unit>
        <trans-unit id="4240a3799ff4d66a85906f9f36727591cad13428" translate="yes" xml:space="preserve">
          <source>ENOTDIR</source>
          <target state="translated">ENOTDIR</target>
        </trans-unit>
        <trans-unit id="fc065579cfbdc6a0f9aec616968cc59d56b64a9c" translate="yes" xml:space="preserve">
          <source>ENOTEMPTY</source>
          <target state="translated">ENOTEMPTY</target>
        </trans-unit>
        <trans-unit id="bdc075a7c91a975683687a1d1c82fafecd73c4af" translate="yes" xml:space="preserve">
          <source>ENOTRECOVERABLE</source>
          <target state="translated">ENOTRECOVERABLE</target>
        </trans-unit>
        <trans-unit id="e392af52c87ea971290fa115906fcfc1824ef8af" translate="yes" xml:space="preserve">
          <source>ENOTSOCK</source>
          <target state="translated">ENOTSOCK</target>
        </trans-unit>
        <trans-unit id="961b8264390393b3421a5033f9d8e21632a6c973" translate="yes" xml:space="preserve">
          <source>ENOTSUP</source>
          <target state="translated">ENOTSUP</target>
        </trans-unit>
        <trans-unit id="1e56f3f7090468a32c36c83276c9e9b428277d7a" translate="yes" xml:space="preserve">
          <source>ENOTTY</source>
          <target state="translated">ENOTTY</target>
        </trans-unit>
        <trans-unit id="c085c0323c99171fbee71cd5a0d9d69e98f812c1" translate="yes" xml:space="preserve">
          <source>ENXIO</source>
          <target state="translated">ENXIO</target>
        </trans-unit>
        <trans-unit id="cda4aab5bcbd0ed38717196ad5a3684cd59490a3" translate="yes" xml:space="preserve">
          <source>EOF</source>
          <target state="translated">EOF</target>
        </trans-unit>
        <trans-unit id="a431c5a93dad4961590acf5ab172d7b5f2e8de79" translate="yes" xml:space="preserve">
          <source>EOPNOTSUPP</source>
          <target state="translated">EOPNOTSUPP</target>
        </trans-unit>
        <trans-unit id="d9bb81809d8e290b27dbaf556dc9dc443df30d82" translate="yes" xml:space="preserve">
          <source>EOVERFLOW</source>
          <target state="translated">EOVERFLOW</target>
        </trans-unit>
        <trans-unit id="d63069a4e5d3556e3ba2595e16588f073d0a2284" translate="yes" xml:space="preserve">
          <source>EOWNERDEAD</source>
          <target state="translated">EOWNERDEAD</target>
        </trans-unit>
        <trans-unit id="d9cc3c0b90243ec6c94085119a51f361b4eb5304" translate="yes" xml:space="preserve">
          <source>EPERM</source>
          <target state="translated">EPERM</target>
        </trans-unit>
        <trans-unit id="8151c105df2d7fef2b915d3a645fbabe9fddc4a8" translate="yes" xml:space="preserve">
          <source>EPIPE</source>
          <target state="translated">EPIPE</target>
        </trans-unit>
        <trans-unit id="84f18cf6c622f03572caec2535453eacbe28946e" translate="yes" xml:space="preserve">
          <source>EPROTO</source>
          <target state="translated">EPROTO</target>
        </trans-unit>
        <trans-unit id="b5b5bafb5f50104146c50213cca76cc4eca336f8" translate="yes" xml:space="preserve">
          <source>EPROTONOSUPPORT</source>
          <target state="translated">EPROTONOSUPPORT</target>
        </trans-unit>
        <trans-unit id="04b829bf10eeded9260d2bcd0ac90e9e86b07267" translate="yes" xml:space="preserve">
          <source>EPROTOTYPE</source>
          <target state="translated">EPROTOTYPE</target>
        </trans-unit>
        <trans-unit id="027a5d6bd60d44a140b125f5e6c684b7bb796a30" translate="yes" xml:space="preserve">
          <source>ERANGE</source>
          <target state="translated">ERANGE</target>
        </trans-unit>
        <trans-unit id="c78077e99ba180c676ffbd99d9a572ae36be6840" translate="yes" xml:space="preserve">
          <source>EROFS</source>
          <target state="translated">EROFS</target>
        </trans-unit>
        <trans-unit id="c84fd2f319af4d7f97e444f8d4ffcad6f99cf6c6" translate="yes" xml:space="preserve">
          <source>ESPIPE</source>
          <target state="translated">ESPIPE</target>
        </trans-unit>
        <trans-unit id="3014f52993bf0c9145e72ce9724ebcd9deb34cd6" translate="yes" xml:space="preserve">
          <source>ESRCH</source>
          <target state="translated">ESRCH</target>
        </trans-unit>
        <trans-unit id="378c256822d49355ae4a8b70e4f055ceb5852633" translate="yes" xml:space="preserve">
          <source>ETIME</source>
          <target state="translated">ETIME</target>
        </trans-unit>
        <trans-unit id="f70ec840ad30c5e3713aac7b4bb60e5cb4a91249" translate="yes" xml:space="preserve">
          <source>ETIMEDOUT</source>
          <target state="translated">ETIMEDOUT</target>
        </trans-unit>
        <trans-unit id="3feeec2e1bec70dfc0c6cd754525c13db2258740" translate="yes" xml:space="preserve">
          <source>ETXTBSY</source>
          <target state="translated">ETXTBSY</target>
        </trans-unit>
        <trans-unit id="52d158262bd1e5946ab759b4571575a7fa344d5a" translate="yes" xml:space="preserve">
          <source>EWOULDBLOCK</source>
          <target state="translated">EWOULDBLOCK</target>
        </trans-unit>
        <trans-unit id="d105a7604896143d39cb55c5f4b58d0d9c4e4d8c" translate="yes" xml:space="preserve">
          <source>EXDEV</source>
          <target state="translated">EXDEV</target>
        </trans-unit>
        <trans-unit id="c1f146ea81ae03fae7db256856fdde169c5d5e44" translate="yes" xml:space="preserve">
          <source>EXIT_SUCCESS</source>
          <target state="translated">EXIT_SUCCESS</target>
        </trans-unit>
        <trans-unit id="5c2b8a61f8fe437d39117db5b2fb0b332818fd1a" translate="yes" xml:space="preserve">
          <source>EXIT_SUCCESS, EXIT_FAILURE</source>
          <target state="translated">EXIT_SUCCESS, EXIT_FAILURE</target>
        </trans-unit>
        <trans-unit id="69fa19d78ab53209ccdb3bf9ac261f7db68a9cbc" translate="yes" xml:space="preserve">
          <source>EXIT_SUCCESSEXIT_FAILURE</source>
          <target state="translated">EXIT_SUCCESSEXIT_FAILURE</target>
        </trans-unit>
        <trans-unit id="e509f53ab56222e162c5349a7efd348ed2caaf8e" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../language/enum&quot;&gt;enumeration type&lt;/a&gt; has an</source>
          <target state="translated">각 &lt;a href=&quot;../language/enum&quot;&gt;열거 형&lt;/a&gt; 에는</target>
        </trans-unit>
        <trans-unit id="f91893a2ffe6e207825e86a0a3fc3625f6fdb98a" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;implicit_cast&quot;&gt;type of standard conversion sequence&lt;/a&gt; is assigned one of three ranks:</source>
          <target state="translated">&lt;a href=&quot;implicit_cast&quot;&gt;표준 변환 순서의&lt;/a&gt; 각 유형에는 다음 세 가지 등급 중 하나가 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="cf1ae6e08bf04ca0b7edf4094041fd10ca9271e3" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;name&quot;&gt;name&lt;/a&gt; that appears in a C++ program is only valid in some possibly discontiguous portion of the source code called its</source>
          <target state="translated">C ++ 프로그램에 나타나는 각 &lt;a href=&quot;name&quot;&gt;이름&lt;/a&gt; 은 소스 코드의 불연속적인 부분에서만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="034551eb33d55611bebf58f023be8399816d5832" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;memory_order_seq_cst&lt;/code&gt; operation B that loads from atomic variable M, observes one of the following:</source>
          <target state="translated">원자 변수 M에서로드되는 각 &lt;code&gt;memory_order_seq_cst&lt;/code&gt; 작업 B는 다음 중 하나를 관찰합니다.</target>
        </trans-unit>
        <trans-unit id="95ad2b711c188f4f5f9f6d9b1d901e22e1f4a14f" translate="yes" xml:space="preserve">
          <source>Each C++ &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a</source>
          <target state="translated">각 C ++ &lt;a href=&quot;expressions&quot;&gt;표현식&lt;/a&gt; (피연산자, 리터럴, 변수 이름 등이있는 연산자)은 두 개의 독립적 인 특성으로 특징 지어집니다.</target>
        </trans-unit>
        <trans-unit id="e9858a67ac17b934a76274d332bc94c80a445ddc" translate="yes" xml:space="preserve">
          <source>Each argument in &lt;code&gt;args&lt;/code&gt; is perfectly forwarded, as if by &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; 의 각 인수는 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; 처럼 완벽하게 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="48cddb4f82983d8c607f2a8d26be36c334490c0c" translate="yes" xml:space="preserve">
          <source>Each call to &lt;code&gt;mblen&lt;/code&gt; updates the internal global conversion state (a static object of type &lt;code&gt;&lt;a href=&quot;mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt;, only known to this function). If the multibyte encoding uses shift states, care must be taken to avoid backtracking or multiple scans. In any case, multiple threads should not call &lt;code&gt;mblen&lt;/code&gt; without synchronization: &lt;code&gt;&lt;a href=&quot;mbrlen&quot;&gt;std::mbrlen&lt;/a&gt;&lt;/code&gt; may be used instead.</source>
          <target state="translated">&lt;code&gt;mblen&lt;/code&gt; 을 호출 할 때 마다 내부 전역 변환 상태 ( &lt;code&gt;&lt;a href=&quot;mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt; 유형의 정적 객체 ,이 함수에만 알려짐)가 업데이트됩니다. 멀티 바이트 인코딩이 시프트 상태를 사용하는 경우 역 추적 또는 여러 스캔을 피하기 위해주의를 기울여야합니다. 어쨌든 여러 스레드가 동기화없이 &lt;code&gt;mblen&lt;/code&gt; 을 호출하면 안됩니다 . &lt;code&gt;&lt;a href=&quot;mbrlen&quot;&gt;std::mbrlen&lt;/a&gt;&lt;/code&gt; 이 대신 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1749a9bb149882f85b7442c016b1ff6ac428f906" translate="yes" xml:space="preserve">
          <source>Each call to &lt;code&gt;mbtowc&lt;/code&gt; updates the internal global conversion state (a static object of type &lt;code&gt;&lt;a href=&quot;mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt;, only known to this function). If the multibyte encoding uses shift states, care must be taken to avoid backtracking or multiple scans. In any case, multiple threads should not call &lt;code&gt;mbtowc&lt;/code&gt; without synchronization: &lt;code&gt;&lt;a href=&quot;mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt; may be used instead.</source>
          <target state="translated">&lt;code&gt;mbtowc&lt;/code&gt; 를 호출 할 때 마다 내부 전역 변환 상태 ( &lt;code&gt;&lt;a href=&quot;mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt; 유형의 정적 객체 ,이 함수에만 알려짐)가 업데이트됩니다. 멀티 바이트 인코딩이 시프트 상태를 사용하는 경우 역 추적 또는 여러 스캔을 피하기 위해주의를 기울여야합니다. 어쨌든 여러 스레드가 동기화없이 &lt;code&gt;mbtowc&lt;/code&gt; 를 호출하면 안됩니다 . 대신 &lt;code&gt;&lt;a href=&quot;mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="647c571d19041dc67134ab9a3a77b5ec05ad00a0" translate="yes" xml:space="preserve">
          <source>Each call to &lt;code&gt;wctomb&lt;/code&gt; updates the internal global conversion state (a static object of type &lt;code&gt;&lt;a href=&quot;mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt;, only known to this function). If the multibyte encoding uses shift states, this function is not reentrant. In any case, multiple threads should not call &lt;code&gt;wctomb&lt;/code&gt; without synchronization: &lt;code&gt;&lt;a href=&quot;wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt; may be used instead.</source>
          <target state="translated">&lt;code&gt;wctomb&lt;/code&gt; 를 호출 할 때마다 내부 전역 변환 상태 ( &lt;code&gt;&lt;a href=&quot;mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt; 유형의 정적 오브젝트 ,이 함수에만 알려짐)가 업데이트됩니다. 멀티 바이트 인코딩이 시프트 상태를 사용하는 경우이 기능은 재진입되지 않습니다. 어쨌든 여러 스레드가 동기화없이 &lt;code&gt;wctomb&lt;/code&gt; 를 호출하면 안됩니다 . &lt;code&gt;&lt;a href=&quot;wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt; 가 대신 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ba78d91ff0685b781f294f35cf96b3aeac069ef" translate="yes" xml:space="preserve">
          <source>Each call to this function modifies a static variable: is not thread safe.</source>
          <target state="translated">이 함수를 호출 할 때마다 정적 변수가 수정됩니다. 스레드 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3ab9cffc0d267e536e5b572ed1fcbb7720b493f" translate="yes" xml:space="preserve">
          <source>Each character is converted as if by a call to &lt;code&gt;&lt;a href=&quot;mbtowc&quot;&gt;std::mbtowc&lt;/a&gt;&lt;/code&gt;, except that the mbtowc conversion state is unaffected. The conversion stops if:</source>
          <target state="translated">각 문자는 mbtowc 변환 상태가 영향을받지 않는 것을 제외하고 &lt;code&gt;&lt;a href=&quot;mbtowc&quot;&gt;std::mbtowc&lt;/a&gt;&lt;/code&gt; 호출하는 것처럼 변환됩니다 . 다음과 같은 경우 변환이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="4888fd9b1bb265c8883a47b9841024e5781f7881" translate="yes" xml:space="preserve">
          <source>Each character is converted as if by a call to &lt;code&gt;&lt;a href=&quot;wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt;. The conversion stops if:</source>
          <target state="translated">각 문자는 &lt;code&gt;&lt;a href=&quot;wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt; 호출하는 것처럼 변환됩니다 . 다음과 같은 경우 변환이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="581fba368fd29095e8e9336b6730bf71763b66e9" translate="yes" xml:space="preserve">
          <source>Each character is converted as if by a call to &lt;code&gt;&lt;a href=&quot;wctomb&quot;&gt;std::wctomb&lt;/a&gt;&lt;/code&gt;, except that the wctomb's conversion state is unaffected. The conversion stops if:</source>
          <target state="translated">각 문자는 wctomb의 변환 상태가 영향을받지 않는 것을 제외하고 &lt;code&gt;&lt;a href=&quot;wctomb&quot;&gt;std::wctomb&lt;/a&gt;&lt;/code&gt; 호출하는 것처럼 변환됩니다 . 다음과 같은 경우 변환이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="184225c284c10aa3727a0dd46fee2e8fef5bdaf8" translate="yes" xml:space="preserve">
          <source>Each character stored in the string may occupy more than one byte. The encoding used to represent characters in a multibyte character string is locale-specific: it may be UTF-8, GB18030, EUC-JP, Shift-JIS, etc. For example, the char array &lt;code&gt;{'\xe4','\xbd','\xa0','\xe5','\xa5','\xbd','\0'}&lt;/code&gt; is an NTMBS holding the string &lt;code&gt;&quot;你好&quot;&lt;/code&gt; in UTF-8 multibyte encoding: the first three bytes encode the character 你, the next three bytes encode the character 好. The same string encoded in GB18030 is the char array &lt;code&gt;{'\xc4', '\xe3', '\xba', '\xc3', '\0'}&lt;/code&gt;, where each of the two characters is encoded as a two-byte sequence.</source>
          <target state="translated">문자열에 저장된 각 문자는 둘 이상의 바이트를 차지할 수 있습니다. 멀티 바이트 문자열에서 문자를 나타내는 데 사용되는 인코딩은 로케일마다 다릅니다 (UTF-8, GB18030, EUC-JP, Shift-JIS 등). 예를 들어 char 배열 &lt;code&gt;{'\xe4','\xbd','\xa0','\xe5','\xa5','\xbd','\0'}&lt;/code&gt; 은 문자열 &lt;code&gt;&quot;你好&quot;&lt;/code&gt; 를 UTF-8 멀티 바이트 인코딩으로 유지하는 NTMBS입니다 . 첫 3 바이트는 문자 你, 다음 3 바이트는 문자 好를 인코딩합니다. GB18030으로 인코딩 된 동일한 문자열은 문자 배열 &lt;code&gt;{'\xc4', '\xe3', '\xba', '\xc3', '\0'}&lt;/code&gt; . 여기서 두 문자 각각은 2 바이트로 인코딩됩니다. 순서.</target>
        </trans-unit>
        <trans-unit id="ce8db6e8c8e956f4b1dd6fb803b052b5d3883b2b" translate="yes" xml:space="preserve">
          <source>Each compound statement introduces its own block &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;; variables declared inside a block are destroyed at the closing brace in reverse order:</source>
          <target state="translated">각 복합 명령문은 자체 블록 &lt;a href=&quot;scope&quot;&gt;범위를&lt;/a&gt; 소개합니다 . 블록 안에 선언 된 변수는 닫는 중괄호에서 역순으로 파괴됩니다.</target>
        </trans-unit>
        <trans-unit id="e10aca3ca4ae678c3c45ca111bea8d16eacdc1c3" translate="yes" xml:space="preserve">
          <source>Each constrained parameter &lt;code&gt;P&lt;/code&gt; whose type-constraint is Q designating the concept &lt;code&gt;C&lt;/code&gt; introduces a &lt;a href=&quot;constraints&quot;&gt;constraint-expression&lt;/a&gt;&lt;code&gt;E&lt;/code&gt; according to the following rules:</source>
          <target state="translated">개념 &lt;a href=&quot;constraints&quot;&gt;구속 조건 &lt;/a&gt; &lt;code&gt;C&lt;/code&gt; 를 지정하는 유형 제한 조건이 Q 인 각 제한 매개 변수 &lt;code&gt;P&lt;/code&gt; 는 다음 규칙에 따라 제한 조건 표현식 &lt;code&gt;E&lt;/code&gt; 를 도입합니다 .</target>
        </trans-unit>
        <trans-unit id="26d6f64e34a52a8adbfd8a16b2867ec94a6c22d3" translate="yes" xml:space="preserve">
          <source>Each coroutine is associated with.</source>
          <target state="translated">각 코 루틴은 관련되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cc044c8c13de01549b2da2a65b8c3ea213a4e54" translate="yes" xml:space="preserve">
          <source>Each declarator introduces exactly one object, reference, function, or (for typedef declarations) type alias, whose type is provided by decl-specifier-seq and optionally modified by operators such as &lt;code&gt;&amp;amp;&lt;/code&gt; (reference to) or &lt;code&gt;[]&lt;/code&gt; (array of) or &lt;code&gt;()&lt;/code&gt; (function returning) in the declarator. These operators can be applied recursively, as shown below.</source>
          <target state="translated">각 선언자는 정확히 하나의 객체, 참조, 함수 또는 (typedef 선언의 경우) 유형 별명을 도입합니다. 유형 별명은 decl-specifier-seq에 의해 제공되며 선택적으로 &lt;code&gt;&amp;amp;&lt;/code&gt; (참조) 또는 &lt;code&gt;[]&lt;/code&gt; (배열) 또는 선언자에서 &lt;code&gt;()&lt;/code&gt; (함수 반환). 이 연산자는 아래와 같이 재귀 적으로 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7410b5b9817e77f8ec46f067c25931c805faaad" translate="yes" xml:space="preserve">
          <source>Each direct and indirect base class is present, as</source>
          <target state="translated">각 직간접 기본 클래스는 다음과 같이 존재합니다.</target>
        </trans-unit>
        <trans-unit id="e8f97a66fce74cebf360db6e0a1fe8d4d9a286a9" translate="yes" xml:space="preserve">
          <source>Each direct non-static data member named by the designated initializer is initialized from the corresponding brace-or-equals initializer that follows the designator. Narrowing conversions are prohibited.</source>
          <target state="translated">지정된 이니셜 라이저로 명명 된 각 직접 비 정적 데이터 멤버는 지정자 다음에 오는 해당 중괄호 이니셜 라이저에서 초기화됩니다. 축소 변환은 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="5c67dfb465922cbde92cfcfef8547497643ced41" translate="yes" xml:space="preserve">
          <source>Each direct public base,(since C++17) array element, or non-static class member, in order of array subscript/appearance in the class definition, is &lt;a href=&quot;copy_initialization&quot;&gt;copy-initialized&lt;/a&gt; from the corresponding clause of the initializer list.</source>
          <target state="translated">클래스 정의의 배열 첨자 / 모양 순서에 따라 (C ++ 17 이후) 각 직접 공개 기반 배열 요소 또는 비 정적 클래스 멤버 는 초기화 목록의 해당 절에서 &lt;a href=&quot;copy_initialization&quot;&gt;복사&lt;/a&gt; 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="0f8584fa5607fa1c5f6818117f7b347cdeba8e4a" translate="yes" xml:space="preserve">
          <source>Each enumerator becomes a named constant of the enumeration's type (that is, name), visible in the enclosing scope, and can be used whenever constants are required.</source>
          <target state="translated">각 열거자는 열거 유형의 이름 지정된 상수 (즉, 이름)가되며 둘러싸는 범위에서 볼 수 있으며 상수가 필요할 때마다 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff8c6d8b46a0192ef4ec8c7cfb2a3e892897e3b2" translate="yes" xml:space="preserve">
          <source>Each enumerator becomes a named constant of the enumeration's type (that is, name), which is contained within the scope of the enumeration, and can be accessed using scope resolution operator. There are no implicit conversions from the values of a scoped enumerator to integral types, although &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; may be used to obtain the numeric value of the enumerator.</source>
          <target state="translated">각 열거자는 열거의 범위 내에 포함 된 열거 유형 (즉, 이름)의 명명 된 상수가되며 범위 확인 연산자를 사용하여 액세스 할 수 있습니다. &lt;a href=&quot;static_cast&quot;&gt;static_cast를&lt;/a&gt; 사용하여 열거 자의 숫자 값을 얻을 수 있지만 범위가 지정된 열거 자의 값에서 정수 유형으로의 암시 적 변환은 없습니다 .</target>
        </trans-unit>
        <trans-unit id="3d7d3b536030a689a1355242b1d09c34f7630ad9" translate="yes" xml:space="preserve">
          <source>Each enumerator is associated with a value of the underlying type. When initializers are provided in the enumerator-list, the values of enumerators are defined by those initializers. If the first enumerator does not have an initializer, the associated value is zero. For any other enumerator whose definition does not have an initializer, the associated value is the value of the previous enumerator plus one.</source>
          <target state="translated">각 열거자는 기본 유형의 값과 연관됩니다. 열거 자 목록에 이니셜 라이저가 제공되면 열거 자 값이 열거 자에 의해 정의됩니다. 첫 번째 열거 자에 이니셜 라이저가없는 경우 연관된 값은 0입니다. 정의에 이니셜 라이저가없는 다른 열거 자의 경우 연관된 값은 이전 열거 자의 값에 1을 더한 값입니다.</target>
        </trans-unit>
        <trans-unit id="ce194bc5f34b0f5e972e7f25f466a288ac877d42" translate="yes" xml:space="preserve">
          <source>Each expression &lt;code&gt;e&lt;/code&gt; has a</source>
          <target state="translated">각 표현 &lt;code&gt;e&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="f02b5f57473fd3c3b692b3ee10fb706807145e4a" translate="yes" xml:space="preserve">
          <source>Each function &lt;code&gt;f&lt;/code&gt;, pointer to function &lt;code&gt;pf&lt;/code&gt;, and pointer to member function &lt;code&gt;pmf&lt;/code&gt; has a</source>
          <target state="translated">각 함수 &lt;code&gt;f&lt;/code&gt; , 함수 &lt;code&gt;pf&lt;/code&gt; 에 대한 포인터 및 멤버 함수 &lt;code&gt;pmf&lt;/code&gt; 에 대한 포인터 에는</target>
        </trans-unit>
        <trans-unit id="15ab4e45404b24bcfcb6d29f14ecc2df49d329e2" translate="yes" xml:space="preserve">
          <source>Each function has a type, which consists of the function's return type, the types of all parameters (after array-to-pointer and function-to-pointer transformations, see &lt;a href=&quot;function#Parameter_list&quot;&gt;parameter list&lt;/a&gt;) , whether the function is noexcept or not(since C++17), and, for member functions, cv-qualification and ref-qualification. Function types also have &lt;a href=&quot;language_linkage&quot;&gt;language linkage&lt;/a&gt;. There are no cv-qualified function types (not to be confused with the types of &lt;a href=&quot;member_functions&quot;&gt;cv-qualified functions&lt;/a&gt; such as &lt;code&gt;int f() const;&lt;/code&gt; or functions returning &lt;a href=&quot;cv&quot;&gt;cv-qualified types&lt;/a&gt;, such as &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt; const f();&lt;/code&gt;).</source>
          <target state="translated">각 함수에는 함수의 반환 유형, 모든 매개 변수의 유형 (배열 간 포인터 및 함수 간 포인터 변환 후 &lt;a href=&quot;function#Parameter_list&quot;&gt;매개 변수 목록&lt;/a&gt; 참조 )으로 구성되며, 함수가 제외 여부에 관계없이 (C + 이후) +17) 및 멤버 함수의 경우 cv-qualification 및 ref-qualification. 함수 유형에는 &lt;a href=&quot;language_linkage&quot;&gt;언어 연결&lt;/a&gt; 도 있습니다 . cv-qualified 함수 유형이 없습니다 ( &lt;code&gt;int f() const;&lt;/code&gt; 와 같은 &lt;a href=&quot;member_functions&quot;&gt;cv-qualified 함수&lt;/a&gt; 유형과 혼동하지 말아야합니다 . 또는 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt; const f();&lt;/code&gt; const f (); ) 와 같은 &lt;a href=&quot;cv&quot;&gt;cv-qualified 유형을&lt;/a&gt; 반환하는 함수는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7827d39fd4287cda35c9bf87a7031c7608a06592" translate="yes" xml:space="preserve">
          <source>Each function parameter is initialized with its corresponding argument after &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt; if necessary. If there is no corresponding argument, the corresponding &lt;a href=&quot;default_arguments&quot;&gt;default argument&lt;/a&gt; is used, and if there is none, the program is ill-formed. If the call is made to a member function, then the &lt;code&gt;this&lt;/code&gt; pointer to current object is converted as if by explicit cast to the &lt;code&gt;this&lt;/code&gt; pointer expected by the function. The initialization and destruction of each parameter occurs in the context of the caller, which means, for example, that if constructor of a parameter throws an exception, the exception handlers defined within the function, even as a function-try block, are not considered. If the function is a variadic function, &lt;a href=&quot;variadic_arguments#Default_conversions&quot;&gt;default argument promotions&lt;/a&gt; are applied to all arguments matched by the ellipsis parameter. It is implementation-defined whether the &lt;a href=&quot;lifetime&quot;&gt;lifetime&lt;/a&gt; of a parameter ends when the function in which it is defined returns or at the end of the enclosing full-expression.</source>
          <target state="translated">각 함수 매개 변수는 필요한 경우 &lt;a href=&quot;implicit_cast&quot;&gt;암시 적 변환&lt;/a&gt; 후 해당 인수로 초기화됩니다 . 해당하는 인수가 없으면 해당하는 &lt;a href=&quot;default_arguments&quot;&gt;기본 인수&lt;/a&gt; 가 사용되며,없는 경우 프로그램이 잘못 작성됩니다. 통화가 멤버 함수로 만든 경우, &lt;code&gt;this&lt;/code&gt; 현재 개체에 대한 포인터는 명시 적 캐스트에 의해 것처럼 변환되고 &lt;code&gt;this&lt;/code&gt; 함수에 의해 예상 포인터. 각 매개 변수의 초기화 및 소멸은 호출자의 컨텍스트에서 발생합니다. 예를 들어, 매개 변수의 생성자가 예외를 발생시키는 경우 함수 내에 정의 된 예외 핸들러는 함수 트리 블록으로도 고려되지 않습니다. . 함수가 가변 함수 인 경우&lt;a href=&quot;variadic_arguments#Default_conversions&quot;&gt;&lt;/a&gt;생략 인수 매개 변수와 일치하는 모든 인수에 기본 인수 승격 이 적용됩니다. 정의 된 함수가 반환 될 때 또는 둘러싸는 전체 표현식의 끝에서 매개 변수 의 &lt;a href=&quot;lifetime&quot;&gt;수명&lt;/a&gt; 이 종료 되는지 여부는 구현에서 정의 됩니다.</target>
        </trans-unit>
        <trans-unit id="024fc24cc30811af6621b82fa21ceea14a9d9a83" translate="yes" xml:space="preserve">
          <source>Each function template has a single function parameter whose type is a specialization of &lt;code&gt;X&lt;/code&gt; with template arguments corresponding to the template parameters from the respective function template where, for each template parameter &lt;code&gt;PP&lt;/code&gt; in the template parameter list of the function template, a corresponding template argument &lt;code&gt;AA&lt;/code&gt; is formed. If &lt;code&gt;PP&lt;/code&gt; declares a parameter pack, then &lt;code&gt;AA&lt;/code&gt; is the pack expansion &lt;code&gt;PP...&lt;/code&gt;; otherwise, &lt;code&gt;AA&lt;/code&gt; is the id-expression &lt;code&gt;PP&lt;/code&gt;.</source>
          <target state="translated">각 함수 템플릿에는 해당 함수 템플릿의 템플릿 매개 변수에 해당하는 템플릿 인수를 사용하여 &lt;code&gt;X&lt;/code&gt; 를 전문화하는 단일 함수 매개 변수가 있습니다. 여기서 함수 템플릿 의 템플릿 매개 변수 목록에있는 각 템플릿 매개 변수 &lt;code&gt;PP&lt;/code&gt; 의 경우 해당 템플릿 인수 &lt;code&gt;AA&lt;/code&gt; 로 이루어져. 경우 &lt;code&gt;PP&lt;/code&gt; 는 매개 변수 팩을 선언 한 후 &lt;code&gt;AA&lt;/code&gt; 는 팩 확장이다 &lt;code&gt;PP...&lt;/code&gt; ; 그렇지 않으면 &lt;code&gt;AA&lt;/code&gt; 는 id- 표현 &lt;code&gt;PP&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1a98f6c7ea817f2341e17dd01c32f697fb61a3b0" translate="yes" xml:space="preserve">
          <source>Each identifier in identifier-list becomes the name of an lvalue that refers to the next member of &lt;code&gt;&lt;i&gt;e&lt;/i&gt;&lt;/code&gt; in declaration order (bit fields are supported); the type of the lvalue is &lt;code&gt;&lt;i&gt;cv&lt;/i&gt; T_i&lt;/code&gt;, where &lt;code&gt;&lt;i&gt;cv&lt;/i&gt;&lt;/code&gt; is the cv-qualifiers of &lt;code&gt;&lt;i&gt;E&lt;/i&gt;&lt;/code&gt; and &lt;code&gt;T_i&lt;/code&gt; is the declared type of the i-th member.</source>
          <target state="translated">identifier-list의 각 식별자는 선언 순서에서 &lt;code&gt;&lt;i&gt;e&lt;/i&gt;&lt;/code&gt; 의 다음 멤버를 참조하는 lvalue의 이름 이됩니다 (비트 필드는 지원됨). lvalue의 유형은 &lt;code&gt;&lt;i&gt;cv&lt;/i&gt; T_i&lt;/code&gt; 이며, 여기서 &lt;code&gt;&lt;i&gt;cv&lt;/i&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;i&gt;E&lt;/i&gt;&lt;/code&gt; 의 cv 규정 자 이고 &lt;code&gt;T_i&lt;/code&gt; 는 i 번째 멤버의 선언 된 유형입니다.</target>
        </trans-unit>
        <trans-unit id="4749fbbc9b4998ff59b7afd6ec4e7925bff9dad6" translate="yes" xml:space="preserve">
          <source>Each identifier in the identifier-list becomes the name of an lvalue that refers to the corresponding element of the array. The number of identifiers must equal the number of array elements.</source>
          <target state="translated">identifier-list의 각 식별자는 배열의 해당 요소를 나타내는 lvalue의 이름이됩니다. 식별자의 수는 배열 요소의 수와 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="aab367436e639682ef23d341c9f7e6fc5b519474" translate="yes" xml:space="preserve">
          <source>Each individual memory location in the C++ memory model, including the hidden memory locations used by language features (e.g virtual table pointer), has scalar type (or is a sequence of adjacent bit-fields of non-zero length). Sequencing of side-effects in expression evaluation, interthread synchronization, and dependency ordering are all defined in terms of individual scalar objects.</source>
          <target state="translated">언어 기능 (예 : 가상 테이블 포인터)에서 사용하는 숨겨진 메모리 위치를 포함하여 C ++ 메모리 모델의 각 개별 메모리 위치는 스칼라 형식 (또는 길이가 0이 아닌 인접한 비트 필드 시퀀스)입니다. 식 평가, 스레드 간 동기화 및 종속성 순서에서 부작용의 순서는 모두 개별 스칼라 개체로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="8f96f9a4648f631d6b9f203d0c427d103a2edcd2" translate="yes" xml:space="preserve">
          <source>Each init-declaractor in a init-declarator sequence &lt;code&gt;S D1, D2, D3;&lt;/code&gt; is processed as if it were a standalone declaration with the same specifiers: &lt;code&gt;S D1; S D2; S D3;&lt;/code&gt;.</source>
          <target state="translated">초기화 선언자 시퀀스 ( &lt;code&gt;S D1, D2, D3;&lt;/code&gt; 각 초기화 선언자 ; 동일한 지정자를 가진 독립형 선언 인 것처럼 처리됩니다. &lt;code&gt;S D1; S D2; S D3;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76d1f0a2780c3871ae462845131e8419f728d146" translate="yes" xml:space="preserve">
          <source>Each instantiation and full specialization of the &lt;code&gt;std::atomic&lt;/code&gt; template defines an atomic type. If one thread writes to an atomic object while another thread reads from it, the behavior is well-defined (see &lt;a href=&quot;../language/memory_model&quot;&gt;memory model&lt;/a&gt; for details on data races).</source>
          <target state="translated">&lt;code&gt;std::atomic&lt;/code&gt; 템플리트 의 각 인스턴스화 및 전체 특수화 는 원자 유형을 정의합니다. 한 스레드가 원자 개체에 쓰는 동안 다른 스레드가 그 스레드를 읽는 경우 동작이 잘 정의되어 있습니다 ( 데이터 레이스에 대한 자세한 내용 은 &lt;a href=&quot;../language/memory_model&quot;&gt;메모리 모델&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3a47755df6799b46aa3c8b9d1968b8906e1ccf1a" translate="yes" xml:space="preserve">
          <source>Each iterator in &lt;code&gt;[i,j)&lt;/code&gt; is dereferenced once</source>
          <target state="translated">&lt;code&gt;[i,j)&lt;/code&gt; 의 각 반복자는 한 번 역 참조됩니다.</target>
        </trans-unit>
        <trans-unit id="7578cd056fca0ea5f9035e6301114f4c5f4ff0ba" translate="yes" xml:space="preserve">
          <source>Each iterator in &lt;code&gt;[i,j)&lt;/code&gt; is dereferenced once. Returned iterator points at the copy of the first element inserted into &lt;code&gt;a&lt;/code&gt; or is &lt;code&gt;p&lt;/code&gt; for &lt;code&gt;i==j&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[i,j)&lt;/code&gt; 의 각 반복자는 한 번 역 참조됩니다. &lt;code&gt;i==j&lt;/code&gt; 대해 &lt;code&gt;a&lt;/code&gt; 또는 &lt;code&gt;p&lt;/code&gt; 에 삽입 된 첫 번째 요소의 사본에서 리턴 된 반복기 포인트</target>
        </trans-unit>
        <trans-unit id="80d712b7df58d7e72aa6b208320bd35af9aa3e85" translate="yes" xml:space="preserve">
          <source>Each locale constructed in a C++ program holds at least the following standard facets, but a program may define additional specializations or completely new facets and add them to any existing locale object.</source>
          <target state="translated">C ++ 프로그램에서 작성된 각 로케일은 최소한 다음과 같은 표준 패싯을 보유하지만 프로그램은 추가 전문화 또는 완전히 새로운 패싯을 정의하여 기존 로케일 오브젝트에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb61dffae64843e2204820d0aa5ebddc88d420ef" translate="yes" xml:space="preserve">
          <source>Each member is allocated as if it is the only member of the class.</source>
          <target state="translated">각 멤버는 마치 클래스의 유일한 멤버 인 것처럼 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="3311f389aedfa1b0599dee128438c29f83f90cd4" translate="yes" xml:space="preserve">
          <source>Each member of an inline namespace can be partially specialized , explicitly instantiated or explicitly specialized as if it were a member of the enclosing namespace.</source>
          <target state="translated">인라인 네임 스페이스의 각 멤버는 마치 마치 네임 스페이스의 멤버 인 것처럼 명시 적으로 인스턴스화되거나 명시 적으로 특수화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="581916dae2f7df23915c380fbb75be21a8bdb10d" translate="yes" xml:space="preserve">
          <source>Each multibyte character is converted as if by a call to &lt;code&gt;&lt;a href=&quot;mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt;. The conversion stops if:</source>
          <target state="translated">각 멀티 바이트 문자는 &lt;code&gt;&lt;a href=&quot;mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt; 호출하는 것처럼 변환됩니다 . 다음과 같은 경우 변환이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="cbaf8d3cdc887aa6a45f89c2b260c032df0b6f0a" translate="yes" xml:space="preserve">
          <source>Each next pointer is repositioned as follows:</source>
          <target state="translated">다음 각 포인터는 다음과 같이 재배치됩니다.</target>
        </trans-unit>
        <trans-unit id="4ef4c91fe9a6ee5426a6c6af1a21882ebe4e04c1" translate="yes" xml:space="preserve">
          <source>Each object type imposes its alignment requirement on every object of that type; stricter alignment (with larger alignment requirement) can be requested using &lt;a href=&quot;alignas&quot;&gt;alignas&lt;/a&gt;.</source>
          <target state="translated">각 객체 유형은 해당 유형의 모든 객체에 대한 정렬 요구 사항을 부과합니다. &lt;a href=&quot;alignas&quot;&gt;alignas를&lt;/a&gt; 사용하여보다 엄격한 정렬 (더 큰 정렬 요구 사항 포함)을 요청할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6671b4feb74e02e296972f53062e84af469e7d7" translate="yes" xml:space="preserve">
          <source>Each object, reference, function, expression in C++ is associated with a &lt;a href=&quot;type-id&quot;&gt;type&lt;/a&gt;, which may be &lt;a href=&quot;types&quot;&gt;fundamental&lt;/a&gt;, compound, or &lt;a href=&quot;classes&quot;&gt;user-defined&lt;/a&gt;, complete or &lt;a href=&quot;incomplete_type&quot;&gt;incomplete&lt;/a&gt;, etc.</source>
          <target state="translated">C ++의 각 객체, 참조, 함수, 표현식은 &lt;a href=&quot;type-id&quot;&gt;type&lt;/a&gt; 과 연관되어 있으며 , 이는 &lt;a href=&quot;types&quot;&gt;기본&lt;/a&gt; , 복합 또는 &lt;a href=&quot;classes&quot;&gt;사용자 정의&lt;/a&gt; , 완전 또는 &lt;a href=&quot;incomplete_type&quot;&gt;불완전&lt;/a&gt; 등일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ab69a8bef468ce601f715e0ee48e7dcda2e15cd" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;#if&lt;/code&gt;, &lt;code&gt;#elif&lt;/code&gt;, &lt;code&gt;#else&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt; and &lt;code&gt;#ifndef&lt;/code&gt; directives control code block until first &lt;code&gt;#elif&lt;/code&gt;, &lt;code&gt;#else&lt;/code&gt;, &lt;code&gt;#endif&lt;/code&gt; directive not belonging to any inner conditional preprocessing blocks.</source>
          <target state="translated">각 &lt;code&gt;#if&lt;/code&gt; , &lt;code&gt;#elif&lt;/code&gt; , &lt;code&gt;#else&lt;/code&gt; , &lt;code&gt;#ifdef&lt;/code&gt; 및 &lt;code&gt;#ifndef&lt;/code&gt; 지시문 은 내부 조건부 전처리 블록에 속하지 않는 첫 번째 &lt;code&gt;#elif&lt;/code&gt; , &lt;code&gt;#else&lt;/code&gt; , &lt;code&gt;#endif&lt;/code&gt; 지시문 까지 코드 블록을 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="703b64945301e3e5410ef5bd9528b95bfbc6ba1d" translate="yes" xml:space="preserve">
          <source>Each of following macros is defined if the header &lt;a href=&quot;../header/version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt; or one of the corresponding headers specified in the table is included.</source>
          <target state="translated">헤더 &lt;a href=&quot;../header/version&quot;&gt; &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; &lt;/a&gt; 또는 테이블에 지정된 해당 헤더 중 하나 가 포함 된 경우 다음 매크로 각각이 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="e32f10d25d6cf17e2fa9840aedb3b1cf8ae5e5ca" translate="yes" xml:space="preserve">
          <source>Each of the above macro constants expand to integer constant expressions with distinct values that are suitable for use as the first argument of &lt;code&gt;&lt;a href=&quot;setlocale&quot;&gt;std::setlocale&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">위의 각 매크로 상수는 &lt;code&gt;&lt;a href=&quot;setlocale&quot;&gt;std::setlocale&lt;/a&gt;&lt;/code&gt; 의 첫 번째 인수로 사용하기에 적합한 고유 값을 갖는 정수 상수 표현식으로 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="47dec134a6d556ab62aff5d62d028d693acc8498" translate="yes" xml:space="preserve">
          <source>Each of the above macro constants expands to an integer constant expression with distinct values, which represent different signals sent to the program.</source>
          <target state="translated">위의 각 매크로 상수는 고유 한 값을 갖는 정수 상수 표현식으로 확장되며, 이는 프로그램으로 전송되는 다른 신호를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c43b83619fe2409c42d3f06ca3dd12b393c08be6" translate="yes" xml:space="preserve">
          <source>Each of the macros defined in &lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt; expands to integer constant expressions with type &lt;code&gt;int&lt;/code&gt;, each with a positive value, matching most of the &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html&quot;&gt;POSIX error codes&lt;/a&gt;. The following constants are defined (the implementation may define more, as long as they begin with &lt;code&gt;'E'&lt;/code&gt; followed by digits or uppercase letters).</source>
          <target state="translated">&lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt; 에 정의 된 각 매크로는 대부분의 &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html&quot;&gt;POSIX 오류 코드&lt;/a&gt; 와 일치하는 양수 값을 가진 &lt;code&gt;int&lt;/code&gt; 유형의 정수 상수 표현식으로 확장됩니다 . 다음 상수가 정의됩니다 (구현은 &lt;code&gt;'E'&lt;/code&gt; 로 시작하고 숫자 나 대문자로 시작하는 한 더 많이 정의 할 수 있습니다 ).</target>
        </trans-unit>
        <trans-unit id="f3065bc03ae2bb1c3d3bb64cbf4db5536ebd08ba" translate="yes" xml:space="preserve">
          <source>Each of the operators can only be instantiated if the following requirements are met:</source>
          <target state="translated">각 연산자는 다음 요구 사항이 충족되는 경우에만 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be33016e9d888a0d101953660153e9d734520df4" translate="yes" xml:space="preserve">
          <source>Each of the predefined duration types &lt;code&gt;days&lt;/code&gt;, &lt;code&gt;weeks&lt;/code&gt;, &lt;code&gt;months&lt;/code&gt; and &lt;code&gt;years&lt;/code&gt; covers a range of at least &amp;plusmn;40000 years. &lt;code&gt;years&lt;/code&gt; is equal to 365.2425 &lt;code&gt;days&lt;/code&gt; (the average length of a Gregorian year). &lt;code&gt;months&lt;/code&gt; is equal to 30.436875 &lt;code&gt;days&lt;/code&gt; (exactly 1/12 of &lt;code&gt;years&lt;/code&gt;).</source>
          <target state="translated">미리 정의 된 기간 유형 &lt;code&gt;days&lt;/code&gt; , &lt;code&gt;weeks&lt;/code&gt; , &lt;code&gt;months&lt;/code&gt; 및 &lt;code&gt;years&lt;/code&gt; 은 각각 &amp;plusmn; 40000 년 이상의 범위를 포함합니다. &lt;code&gt;years&lt;/code&gt; 은 365.2425 &lt;code&gt;days&lt;/code&gt; (그레고리력 연도의 평균 길이)과 같습니다. &lt;code&gt;months&lt;/code&gt; 은 30.436875 &lt;code&gt;days&lt;/code&gt; (정확히 1/12 &lt;code&gt;years&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="55b43d853964afd1da13d3135d19d7345abb2ae3" translate="yes" xml:space="preserve">
          <source>Each of the three cases is described in more detail below.</source>
          <target state="translated">세 가지 경우 각각에 대해 아래에서 더 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="611acd37092b6ac0a7976aa97c37ac5c314ce935" translate="yes" xml:space="preserve">
          <source>Each of the two function templates has the same template parameters, respectively, as &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">두 함수 템플릿 각각은 각각 &lt;code&gt;P&lt;/code&gt; 또는 &lt;code&gt;A&lt;/code&gt; 와 동일한 템플릿 매개 변수를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="5b119ce0fc93ca69da0a602ebf3a0ffa0abb9703" translate="yes" xml:space="preserve">
          <source>Each of these macro constants expands to a nonnegative integer constant expression, which can be used with &lt;code&gt;&lt;a href=&quot;feround&quot;&gt;std::fesetround&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;feround&quot;&gt;std::fegetround&lt;/a&gt;&lt;/code&gt; to indicate one of the supported floating-point rounding modes. The implementation may define additional rounding mode constants in &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;, which should all begin with &lt;code&gt;FE_&lt;/code&gt; followed by at least one uppercase letter. Each macro is only defined if it is supported.</source>
          <target state="translated">이러한 각 매크로 상수는 음이 아닌 정수 상수 표현식으로 확장되며, &lt;code&gt;&lt;a href=&quot;feround&quot;&gt;std::fesetround&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;feround&quot;&gt;std::fegetround&lt;/a&gt;&lt;/code&gt; 와 함께 사용 하여 지원되는 부동 소수점 반올림 모드 중 하나를 나타냅니다. 구현시 &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt; 에서 추가 반올림 모드 상수를 정의 할 수 있으며 , 모두 &lt;code&gt;FE_&lt;/code&gt; 로 시작하고 그 뒤에 하나 이상의 대문자가 와야합니다. 각 매크로는 지원되는 경우에만 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="d4e1a6ce129168b09fb72e8057b1780dfd45a1d6" translate="yes" xml:space="preserve">
          <source>Each parameter in parameter-list may be:</source>
          <target state="translated">parameter-list의 각 매개 변수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4c0dc187eb8ef6fde49b0e0c96f88bc856b76cc0" translate="yes" xml:space="preserve">
          <source>Each placeholder is declared as if by &lt;code&gt;extern /*unspecified*/ _1;&lt;/code&gt;</source>
          <target state="translated">각 자리 표시자는 &lt;code&gt;extern /*unspecified*/ _1;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="42f2f1efb809913a73bf018a6d178248adc9beef" translate="yes" xml:space="preserve">
          <source>Each promise is associated with a</source>
          <target state="translated">각 약속은</target>
        </trans-unit>
        <trans-unit id="366dca4214c4e2e839b844486e2409a1b06faa84" translate="yes" xml:space="preserve">
          <source>Each representable bitmask element is defined as a &lt;code&gt;inline&lt;/code&gt;(since C++17)&lt;code&gt;constexpr&lt;/code&gt; value of the bitmask type.</source>
          <target state="translated">표현 가능한 각 비트 마스크 요소는 비트 마스크 유형 의 &lt;code&gt;inline&lt;/code&gt; (C ++ 17 이후) &lt;code&gt;constexpr&lt;/code&gt; 값으로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="06b759032bfec9baff9e8a0a156fb5e37facc380" translate="yes" xml:space="preserve">
          <source>Each requirement in the requirements-seq is one of the following:</source>
          <target state="translated">requirements-seq의 각 요구 사항은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="8f6f2072889e717697a35b60905bf0202bf68050" translate="yes" xml:space="preserve">
          <source>Each specialization has an implicitly-declared default constructor, copy constructor, move constructor, copy assignment operator, move assignment operator, and destructor.</source>
          <target state="translated">각 전문화에는 암시 적으로 선언 된 기본 생성자, 복사 생성자, 이동 생성자, 복사 할당 연산자, 이동 할당 연산자 및 소멸자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b130938fe317f97554309f26280f27a769cde10a" translate="yes" xml:space="preserve">
          <source>Each specialization of &lt;code&gt;time_of_day&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;time_of_day&lt;/code&gt; 의 각 전문화 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8f22c49dd1f84f4ebe09b31330cac9495a2d5cf3" translate="yes" xml:space="preserve">
          <source>Each specialization of this template is either</source>
          <target state="translated">이 템플릿의 각 전문 분야는</target>
        </trans-unit>
        <trans-unit id="0e43069eece5e9b342fdd731a5a678c300feb20a" translate="yes" xml:space="preserve">
          <source>Each standard library header that declares the template &lt;code&gt;std::hash&lt;/code&gt; provides enabled specializations of &lt;code&gt;std::hash&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; and all cv-unqualified arithmetic types (including any extended integer types), all enumeration types, and all pointer types.</source>
          <target state="translated">&lt;code&gt;std::hash&lt;/code&gt; 템플리트를 선언하는 각 표준 라이브러리 헤더는 &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; 및 모든 cv-unqualified 산술 유형 (확장 정수 유형 포함), 모든 열거 유형 및 모든 포인터 유형에 대해 &lt;code&gt;std::hash&lt;/code&gt; 의 사용 가능한 전문화를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="d10e8ed56d80dd4a2c8941639d7df4ed886db8d3" translate="yes" xml:space="preserve">
          <source>Each structured binding has a</source>
          <target state="translated">각 구조적 바인딩에는</target>
        </trans-unit>
        <trans-unit id="a1ba84155474982bd999c9d6b101e9a6c0217bc0" translate="yes" xml:space="preserve">
          <source>Each time &lt;code&gt;rand()&lt;/code&gt; is seeded with &lt;code&gt;srand()&lt;/code&gt;, it must produce the same sequence of values on successive calls. Other functions in the standard library may call &lt;code&gt;rand&lt;/code&gt;, it is implementation-defined which functions do so.</source>
          <target state="translated">&lt;code&gt;rand()&lt;/code&gt; 가 &lt;code&gt;srand()&lt;/code&gt; () 로 시드 될 때마다 연속적인 호출에서 동일한 순서의 값을 생성해야합니다. 표준 라이브러리의 다른 함수는 &lt;code&gt;rand&lt;/code&gt; 를 호출 할 수 있으며 , 구현 된 함수는 어떤 함수입니다.</target>
        </trans-unit>
        <trans-unit id="7b2f6db2798b2b2d64fe6857e20c316d195be57c" translate="yes" xml:space="preserve">
          <source>Each time &lt;code&gt;rand()&lt;/code&gt; is seeded with the same &lt;code&gt;seed&lt;/code&gt;, it must produce the same sequence of values.</source>
          <target state="translated">&lt;code&gt;rand()&lt;/code&gt; 에 동일한 &lt;code&gt;seed&lt;/code&gt; 가 시드 될 때마다 동일한 값 시퀀스를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="aa2217b43e096469ccfc56039975fc50a6fb6d6b" translate="yes" xml:space="preserve">
          <source>Each translation unit is examined to produce a list of required template instantiations, including the ones requested by &lt;a href=&quot;class_template&quot;&gt;explicit instantiations&lt;/a&gt;. The definitions of the templates are located, and the required instantiations are performed to produce</source>
          <target state="translated">각 번역 단위는 &lt;a href=&quot;class_template&quot;&gt;명시 적 인스턴스화에&lt;/a&gt; 의해 요청 된 것을 포함하여 필요한 템플릿 인스턴스화 목록을 생성하기 위해 검사됩니다 . 템플릿의 정의가 있으며 필요한 인스턴스화가 수행되어 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="8a50e4d4bba8297778eae4ee1a813ba8dd4b487d" translate="yes" xml:space="preserve">
          <source>Each type from the list above from the parameter template is deduced. Before deduction begins, each parameter &lt;code&gt;P&lt;/code&gt; of the parameter template and the corresponding argument &lt;code&gt;A&lt;/code&gt; of the argument template is adjusted as follows:</source>
          <target state="translated">매개 변수 템플리트에서 위 목록의 각 유형이 추론됩니다. 추론이 시작되기 전에 매개 변수 템플리트의 각 매개 변수 &lt;code&gt;P&lt;/code&gt; 와 인수 템플리트 의 해당 인수 &lt;code&gt;A&lt;/code&gt; 가 다음과 같이 조정됩니다.</target>
        </trans-unit>
        <trans-unit id="b2c8b6c180c6b31ceb1fb3363c0e43db53231edb" translate="yes" xml:space="preserve">
          <source>Each unmodified conversion specifier begins with a &lt;code&gt;%&lt;/code&gt; character followed by a character that determines the behavior of the specifier. Some conversion specifiers have a modified form in which an &lt;code&gt;E&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt; modifier character is inserted after the &lt;code&gt;%&lt;/code&gt; character. Some conversion specifiers have a modified form in which a width parameter given as a positive decimal integer (shown as</source>
          <target state="translated">수정되지 않은 각 변환 지정자는 &lt;code&gt;%&lt;/code&gt; 문자로 시작하고 그 뒤에 지정자의 동작을 결정하는 문자가옵니다. 일부 변환 지정 자는 &lt;code&gt;%&lt;/code&gt; 문자 다음에 &lt;code&gt;E&lt;/code&gt; 또는 &lt;code&gt;O&lt;/code&gt; 수정 자 문자가 삽입 되는 수정 된 형식을 갖습니다 . 일부 변환 지정자는 양의 십진 정수로 제공된 너비 매개 변수가 다음과 같이 수정 된 형식을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="327c7376995104f3ba337dabfe6f66d68b639102" translate="yes" xml:space="preserve">
          <source>Each whitespace character matches zero or more whitespace characters in the input stream.</source>
          <target state="translated">각 공백 문자는 입력 스트림에서 0 개 이상의 공백 문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="98fb11e9def1cb2310b08ef4e6d4b7561a05b24c" translate="yes" xml:space="preserve">
          <source>Early dynamic initialization</source>
          <target state="translated">초기 동적 초기화</target>
        </trans-unit>
        <trans-unit id="720b5dbc53190f0e13902f7885ccaf43bb9991de" translate="yes" xml:space="preserve">
          <source>Effect</source>
          <target state="translated">Effect</target>
        </trans-unit>
        <trans-unit id="f3471aec7ef2eba24a8eee725d22a80d674903de" translate="yes" xml:space="preserve">
          <source>Effect(s)</source>
          <target state="translated">Effect(s)</target>
        </trans-unit>
        <trans-unit id="7f04d3229726277eead2c01d17e615029d8536d2" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;a href=&quot;../basic_filebuf/close&quot;&gt;&lt;code&gt;rdbuf()-&amp;gt;close()&lt;/code&gt;&lt;/a&gt;. If an error occurs during operation, &lt;code&gt;setstate(failbit)&lt;/code&gt; is called.</source>
          <target state="translated">효과적으로 &lt;a href=&quot;../basic_filebuf/close&quot;&gt; &lt;code&gt;rdbuf()-&amp;gt;close()&lt;/code&gt; &lt;/a&gt; 호출합니다 . 작동 중 오류가 발생하면 &lt;code&gt;setstate(failbit)&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7601fa579803d6ec0f51f85e245a52774f6ddbb0" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;a href=&quot;../basic_filebuf/is_open&quot;&gt;&lt;code&gt;rdbuf()-&amp;gt;is_open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">효과적으로 &lt;a href=&quot;../basic_filebuf/is_open&quot;&gt; &lt;code&gt;rdbuf()-&amp;gt;is_open()&lt;/code&gt; &lt;/a&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="d3d6dbb7c00e9f5c47a2c61c804506792936fe0f" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt; &lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char_type&amp;gt; &amp;gt;(getloc()).narrow(c, dfault);&lt;/code&gt;.</source>
          <target state="translated">효과적으로 &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt; &lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char_type&amp;gt; &amp;gt;(getloc()).narrow(c, dfault);&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73e3689f50e365236839e9a92d9892f606fb5c83" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt; &lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char_type&amp;gt; &amp;gt;(getloc()).widen(c)&lt;/code&gt;.</source>
          <target state="translated">효과적으로 &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt; &lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char_type&amp;gt; &amp;gt;(getloc()).widen(c)&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="cd13223cca12badeca10d7e2ee88a18ea7c31901" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;c.emplace_back(&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...); &lt;a href=&quot;../../algorithm/push_heap&quot;&gt;std::push_heap&lt;/a&gt;(c.begin(), c.end(), comp);&lt;/code&gt;</source>
          <target state="translated">효과적으로 &lt;code&gt;c.emplace_back(&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...); &lt;a href=&quot;../../algorithm/push_heap&quot;&gt;std::push_heap&lt;/a&gt;(c.begin(), c.end(), comp);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="450230df360001863ebacfb5b579d26f327d0a06" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;c.emplace_back(&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;</source>
          <target state="translated">효과적으로 &lt;code&gt;c.emplace_back(&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a4a8d9c7ada740981dd2a69618a2a7c7ea7b3b2" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;m.unlock()&lt;/code&gt; where &lt;code&gt;m&lt;/code&gt; is the mutex passed to the &lt;code&gt;lock_guard&lt;/code&gt;'s constructor.</source>
          <target state="translated">효과적으로 &lt;code&gt;m.unlock()&lt;/code&gt; 호출합니다. 여기서 &lt;code&gt;m&lt;/code&gt; 은 &lt;code&gt;lock_guard&lt;/code&gt; 의 생성자에 전달 된 뮤텍스 입니다.</target>
        </trans-unit>
        <trans-unit id="5774542de2f8024e4af68ee3fce8f21598cf3444" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;mutex()-&amp;gt;try_lock_shared_until(timeout_time)&lt;/code&gt;.</source>
          <target state="translated">효과적으로 &lt;code&gt;mutex()-&amp;gt;try_lock_shared_until(timeout_time)&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="eb59edfde1695c19d5757cb33ffe1d4e21f0429f" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;mutex()-&amp;gt;try_lock_until(timeout_time)&lt;/code&gt;.</source>
          <target state="translated">효과적으로 &lt;code&gt;mutex()-&amp;gt;try_lock_until(timeout_time)&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="49de2ada116e840ddfd4708e04e0ffdbe76be9dc" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;traits_i.getloc()&lt;/code&gt; where &lt;code&gt;traits_i&lt;/code&gt; is a default initialized instance of the type &lt;code&gt;Traits&lt;/code&gt;, stored within the regular expression object.</source>
          <target state="translated">&lt;code&gt;traits_i.getloc()&lt;/code&gt; 효과적으로 호출합니다. 여기서 &lt;code&gt;traits_i&lt;/code&gt; 는 정규 표현식 객체 내에 저장된 &lt;code&gt;Traits&lt;/code&gt; 유형의 기본 초기화 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="f134f68248218c95273185efc61bd6b6a20323fc" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;traits_i.imbue(loc)&lt;/code&gt; where &lt;code&gt;traits_i&lt;/code&gt; is a default initialized instance of the type &lt;code&gt;Traits&lt;/code&gt; stored within the regular expression object.</source>
          <target state="translated">&lt;code&gt;traits_i.imbue(loc)&lt;/code&gt; 효과적으로 호출합니다. 여기서 &lt;code&gt;traits_i&lt;/code&gt; 는 정규 표현식 객체 내에 저장된 유형 &lt;code&gt;Traits&lt;/code&gt; 의 기본 초기화 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="0129f80eaab20073e36837a5e246dcf1482fcb1d" translate="yes" xml:space="preserve">
          <source>Effectively calls &lt;code&gt;unlock()&lt;/code&gt; on every mutex from the pack of mutexes passed to the &lt;code&gt;scoped_lock&lt;/code&gt;'s constructor.</source>
          <target state="translated">&lt;code&gt;scoped_lock&lt;/code&gt; 생성자로 전달 된 뮤텍스 팩에서 모든 뮤텍스에 대해 &lt;code&gt;unlock()&lt;/code&gt; 을 효과적으로 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="39af00ab0dc1d2b7a9a11bded952b4276f2879dd" translate="yes" xml:space="preserve">
          <source>Effectively does &lt;code&gt;INVOKE&amp;lt;R&amp;gt;(f, &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...)&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is the target object of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;INVOKE&lt;/code&gt; is the operation described in &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;INVOKE&amp;lt;R&amp;gt;(f, &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...)&lt;/code&gt; 효과적으로 수행합니다 . 여기서 &lt;code&gt;f&lt;/code&gt; 는 &lt;code&gt;*this&lt;/code&gt; 의 대상 객체 이고 &lt;code&gt;INVOKE&lt;/code&gt; 는 &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable에&lt;/a&gt; 설명 된 작업 입니다.</target>
        </trans-unit>
        <trans-unit id="85291f0c3524799c19d669bb390aeca43cd17b1b" translate="yes" xml:space="preserve">
          <source>Effectively executes &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(weak_this)&lt;/code&gt;, where &lt;code&gt;weak_this&lt;/code&gt; is the private mutable &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; member of &lt;code&gt;enable_shared_from_this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(weak_this)&lt;/code&gt; 효과적으로 실행합니다 . &lt;code&gt;weak_this&lt;/code&gt; 는 private mutable &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;enable_shared_from_this&lt;/code&gt; 의 멤버입니다 .</target>
        </trans-unit>
        <trans-unit id="fa7f577084524fdbed6f4d823c16379f66ece749" translate="yes" xml:space="preserve">
          <source>Effectively executes &lt;code&gt;seekoff(off_type(sp), &lt;a href=&quot;../ios_base/seekdir&quot;&gt;std::ios_base::beg&lt;/a&gt;, which)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seekoff(off_type(sp), &lt;a href=&quot;../ios_base/seekdir&quot;&gt;std::ios_base::beg&lt;/a&gt;, which)&lt;/code&gt; 효과적으로 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="6b63f2be9f07e4a649d3eaf58f49468b0db1bc9c" translate="yes" xml:space="preserve">
          <source>Effectively increments a private static data member of &lt;code&gt;std::ios_base&lt;/code&gt;, as if by executing &lt;code&gt;return index++;&lt;/code&gt;, if &lt;code&gt;index&lt;/code&gt; is the name of that static member (which may be &lt;code&gt;&lt;a href=&quot;../../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; to support concurrent access by multiple threads, or otherwise synchronized)(since C++14).</source>
          <target state="translated">&lt;code&gt;return index++;&lt;/code&gt; 를 실행하는 것처럼 &lt;code&gt;std::ios_base&lt;/code&gt; 의 개인 정적 데이터 멤버를 효과적으로 증가시킵니다 . &lt;code&gt;index&lt;/code&gt; 가 정적 멤버의 이름 인 경우 ( 여러 스레드에 의한 동시 액세스를 지원하기 위해 &lt;code&gt;&lt;a href=&quot;../../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; 일 수 있거나 동기화되지 않은 경우) (C ++ 14부터).</target>
        </trans-unit>
        <trans-unit id="cbd63a5a19c62ded4cababbeadb0e33cc72dc361" translate="yes" xml:space="preserve">
          <source>Effectively modifies the path member by &lt;code&gt;path.replace_filename(p)&lt;/code&gt; and calls &lt;a href=&quot;refresh&quot;&gt;&lt;code&gt;refresh&lt;/code&gt;&lt;/a&gt; to update the cached attributes. If an error occurs, the values of the cached attributes are unspecified.</source>
          <target state="translated">&lt;code&gt;path.replace_filename(p)&lt;/code&gt; 의해 경로 멤버를 효과적으로 수정하고 캐시 된 속성을 업데이트하기 위해 &lt;a href=&quot;refresh&quot;&gt; &lt;code&gt;refresh&lt;/code&gt; &lt;/a&gt; 를 호출 합니다. 오류가 발생하면 캐시 된 속성 값이 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3299f16e39f77fffb2a982539ad26a2c31d82eb0" translate="yes" xml:space="preserve">
          <source>Effectively returns &lt;code&gt;expired() ? shared_ptr&amp;lt;T&amp;gt;() : shared_ptr&amp;lt;T&amp;gt;(*this)&lt;/code&gt;, executed atomically.</source>
          <target state="translated">효과적으로 &lt;code&gt;expired() ? shared_ptr&amp;lt;T&amp;gt;() : shared_ptr&amp;lt;T&amp;gt;(*this)&lt;/code&gt; 반환 합니까? shared_ptr &amp;lt;T&amp;gt; () : shared_ptr &amp;lt;T&amp;gt; (* this) 는 원자 적으로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="c3abdbd600324c602c5fe7a773586bc3f30a661c" translate="yes" xml:space="preserve">
          <source>Effectively returns &lt;code&gt;path(lhs) /= rhs&lt;/code&gt;.</source>
          <target state="translated">효과적으로 &lt;code&gt;path(lhs) /= rhs&lt;/code&gt; 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="1922822f34f0ccbc56f858340bff0e5a80cfd1c7" translate="yes" xml:space="preserve">
          <source>Effectively returns.</source>
          <target state="translated">효과적으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2f1c87a022150f836357534d055c759214143f98" translate="yes" xml:space="preserve">
          <source>Effectively, returns the following: &lt;code&gt;root_name() / root_directory()&lt;/code&gt;.</source>
          <target state="translated">효과적으로 다음을 리턴합니다. &lt;code&gt;root_name() / root_directory()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f25a859269ca51039632dd6bba28fb061cfb8d4" translate="yes" xml:space="preserve">
          <source>Effects</source>
          <target state="translated">Effects</target>
        </trans-unit>
        <trans-unit id="e52313fd46e586954450b967b56535fc412c4fff" translate="yes" xml:space="preserve">
          <source>Efficient insertion/deletion at the beginning and at the end of the sequence</source>
          <target state="translated">시퀀스의 시작과 끝에서 효율적인 삽입 / 삭제</target>
        </trans-unit>
        <trans-unit id="75b1e6a17c57567fac9cb185174cf56e2f941e66" translate="yes" xml:space="preserve">
          <source>Efficient insertion/deletion in the middle of the sequence</source>
          <target state="translated">시퀀스 중간에 효율적인 삽입 / 삭제</target>
        </trans-unit>
        <trans-unit id="3bb3b33251059cb5f93747019aa489c21ce5547c" translate="yes" xml:space="preserve">
          <source>Either</source>
          <target state="translated">Either</target>
        </trans-unit>
        <trans-unit id="3ecdb5b2742f293b4389f386c4e056ed95427a34" translate="yes" xml:space="preserve">
          <source>Either way, the argument list for the purpose of overload resolution consists of a single argument which is the initializer expression, which will be compared against the first argument of the constructor or against the implicit object argument of the conversion function.</source>
          <target state="translated">어느 쪽이든, 오버로드 해결을위한 인수 목록은 이니셜 라이저 표현식 인 단일 인수로 구성되며, 이는 생성자의 첫 번째 인수 또는 변환 함수의 내재적 오브젝트 인수와 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="8405e6c9ad2d667c74829716cb6055e01f68839c" translate="yes" xml:space="preserve">
          <source>Either way, the argument list for the purpose of overload resolution consists of a single argument which is the initializer expression, which will be compared against the implicit object argument of the conversion function.</source>
          <target state="translated">어느 쪽이든, 과부하 해결을 목적으로하는 인수 목록은 이니셜 라이저 표현식 인 단일 인수로 구성되며 변환 함수의 암시 적 객체 인수와 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="a3c83451a36c5dab6301c4d1b8a07367d890bc2e" translate="yes" xml:space="preserve">
          <source>Either way, when examining the bases from which the class is derived, the following rules, sometime referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Dominance_(C%20%20)&quot;&gt;dominance in virtual inheritance&lt;/a&gt;, are followed:</source>
          <target state="translated">어느 쪽이든 클래스가 파생 된 기본을 검사 할 때 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dominance_(C%20%20)&quot;&gt;가상 상속에서 지배적&lt;/a&gt; 이라고하는 다음 규칙 을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="c8078d924b19f64b223a6df8142a489104063237" translate="yes" xml:space="preserve">
          <source>Either:</source>
          <target state="translated">Either:</target>
        </trans-unit>
        <trans-unit id="d52e8ccbd68661e80b0065d6aebada264056139f" translate="yes" xml:space="preserve">
          <source>Elaborated type specifier</source>
          <target state="translated">정교한 타입 지정자</target>
        </trans-unit>
        <trans-unit id="e9f6c822f18b7c0c06389c00604bb382958c96e9" translate="yes" xml:space="preserve">
          <source>Elaborated type specifiers</source>
          <target state="translated">정교한 타입 지정자</target>
        </trans-unit>
        <trans-unit id="e37e1762318eedd8265c3414807fd415de27c0c5" translate="yes" xml:space="preserve">
          <source>Elaborated type specifiers may be used to refer to a previously-declared class name (class, struct, or union) or to a previously-declared enum name even if the name was &lt;a href=&quot;lookup&quot;&gt;hidden by a non-type declaration&lt;/a&gt;. They may also be used to declare new class names.</source>
          <target state="translated">정교한 유형 지정자는 이름이 &lt;a href=&quot;lookup&quot;&gt;유형이 아닌 선언에 의해 숨겨져&lt;/a&gt; 있어도 이전에 선언 된 클래스 이름 (클래스, 구조체 또는 공용체) 또는 이전에 선언 된 열거 이름을 나타내는 데 사용될 수 있습니다 . 새 클래스 이름을 선언하는 데 사용될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="843257c5fd02f4b1d166359cd226ccf0c5e6b1e3" translate="yes" xml:space="preserve">
          <source>Elem</source>
          <target state="translated">Elem</target>
        </trans-unit>
        <trans-unit id="49fa9fd831096c82ab950bc7aa0a0a7ef8a10998" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">Element</target>
        </trans-unit>
        <trans-unit id="59c0b6f3e240794ae6be625705aa430a63eaead1" translate="yes" xml:space="preserve">
          <source>Element access</source>
          <target state="translated">요소 접근</target>
        </trans-unit>
        <trans-unit id="8fbca26a4ffebf75263c2ab0302778eb0abcd9e3" translate="yes" xml:space="preserve">
          <source>Element type</source>
          <target state="translated">요소 유형</target>
        </trans-unit>
        <trans-unit id="239810115401e3f7bdaba63dc51c46c767c09ae1" translate="yes" xml:space="preserve">
          <source>Elementary string conversions</source>
          <target state="translated">초등 문자열 변환</target>
        </trans-unit>
        <trans-unit id="60692d007aff96579d0ad8c7c810f4ad59f154ac" translate="yes" xml:space="preserve">
          <source>Elementary string conversions (&lt;code&gt;std::to_chars&lt;/code&gt;, &lt;code&gt;std::from_chars&lt;/code&gt;)</source>
          <target state="translated">초등학교 문자열 변환 ( &lt;code&gt;std::to_chars&lt;/code&gt; , &lt;code&gt;std::from_chars&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="91a16c85b3cea6ac9eae29e2662aac2bbcfeee22" translate="yes" xml:space="preserve">
          <source>Elements in an unordered associative container are organized into buckets, keys with the same hash will end up in the same bucket. The number of buckets is increased when the size of the container increases to keep the average number of elements in each bucket under a certain value.</source>
          <target state="translated">정렬되지 않은 연관 컨테이너의 요소는 버킷으로 구성되며 동일한 해시를 가진 키는 동일한 버킷에있게됩니다. 각 버킷의 평균 요소 수를 특정 값으로 유지하기 위해 컨테이너 크기가 증가하면 버킷 수가 증가합니다.</target>
        </trans-unit>
        <trans-unit id="f4f5436d841e1f51579273a19d4465114fbdc05a" translate="yes" xml:space="preserve">
          <source>Elements of the same container can be modified concurrently with those member functions that are not specified to access these elements. More generally, the C++ standard library functions do not read objects indirectly accessible through their arguments (including other elements of a container) except when required by its specification.</source>
          <target state="translated">동일한 컨테이너의 요소는 이러한 요소에 액세스하도록 지정되지 않은 멤버 함수와 동시에 수정할 수 있습니다. 보다 일반적으로 C ++ 표준 라이브러리 함수는 사양에서 요구하는 경우를 제외하고 인수 (컨테이너의 다른 요소 포함)를 통해 간접적으로 액세스 가능한 객체를 읽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a93e21e36da0edf6200796f9cc533e8ce81e616f" translate="yes" xml:space="preserve">
          <source>Elements that are in the original range but not the new range are left in a valid but unspecified state.</source>
          <target state="translated">원래 범위에 있지만 새 범위가 아닌 요소는 유효하지만 지정되지 않은 상태로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="abb7133a48569dfaf7c36e3a0551a5361641f563" translate="yes" xml:space="preserve">
          <source>Eliminates all but the first element from every consecutive group of equivalent elements from the range &lt;code&gt;[first, last)&lt;/code&gt; and returns a past-the-end iterator for the new</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위에서 동등한 요소 그룹의 모든 연속 그룹에서 첫 번째 요소를 제외한 모든 요소를 ​​제거하고 새 요소에 대한 과거 반복기를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e12e83fcbb69e8b9ad4b50dbe931d9023e9fc745" translate="yes" xml:space="preserve">
          <source>Else a positive value</source>
          <target state="translated">다른 긍정적 인 가치</target>
        </trans-unit>
        <trans-unit id="05fcae8b3558a211322b167761847a0be1960558" translate="yes" xml:space="preserve">
          <source>Else some unspecified value</source>
          <target state="translated">지정되지 않은 일부 값</target>
        </trans-unit>
        <trans-unit id="59fec72c5094a935a88a4a77e86cb5db3a831f95" translate="yes" xml:space="preserve">
          <source>Else, a negative value if</source>
          <target state="translated">그렇지 않으면 음수 값</target>
        </trans-unit>
        <trans-unit id="da2eade102ad94065963d47a1be37556a4615b31" translate="yes" xml:space="preserve">
          <source>Else, returns a &lt;code&gt;sys_days&lt;/code&gt; that represents the date &lt;code&gt;(index() - 1) * 7&lt;/code&gt; days after the first &lt;code&gt;weekday()&lt;/code&gt; of the year and month.</source>
          <target state="translated">그렇지 않으면, 연도 및 월 의 첫 번째 &lt;code&gt;weekday()&lt;/code&gt; 후 &lt;code&gt;(index() - 1) * 7&lt;/code&gt; 일 (index ()-1) * 7 일 을 나타내는 &lt;code&gt;sys_days&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5f86da119e41ea457e85578329bf85d62aa0260a" translate="yes" xml:space="preserve">
          <source>Emits all buffered output and executes any pending flushes, by calling &lt;a href=&quot;../basic_syncbuf/emit&quot;&gt;&lt;code&gt;emit()&lt;/code&gt;&lt;/a&gt; on the underlying &lt;a href=&quot;../basic_syncbuf&quot;&gt;&lt;code&gt;std::basic_syncbuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 &lt;a href=&quot;../basic_syncbuf&quot;&gt; &lt;code&gt;std::basic_syncbuf&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;../basic_syncbuf/emit&quot;&gt; &lt;code&gt;emit()&lt;/code&gt; &lt;/a&gt; 를 호출하여 버퍼링 된 모든 출력을 내보내고 보류중인 플러시를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="3dc501e56e4e53d3d5c8c2761905f51958040cc6" translate="yes" xml:space="preserve">
          <source>EmplaceConstructible</source>
          <target state="translated">EmplaceConstructible</target>
        </trans-unit>
        <trans-unit id="45adf69500a2e4d26af6fc850ddcd68dc3c799fb" translate="yes" xml:space="preserve">
          <source>Emptiness-checking functions</source>
          <target state="translated">공허 확인 기능</target>
        </trans-unit>
        <trans-unit id="f2f259854bff361290ccf710361dde2047b6f2c7" translate="yes" xml:space="preserve">
          <source>Empty Base Optimization</source>
          <target state="translated">빈베이스 최적화</target>
        </trans-unit>
        <trans-unit id="586dbdfc3d61168d4de20bcce6f35e8869377034" translate="yes" xml:space="preserve">
          <source>Empty C headers</source>
          <target state="translated">빈 C 헤더</target>
        </trans-unit>
        <trans-unit id="72525079cdbc51b7908c1c917eb71972d0b1171d" translate="yes" xml:space="preserve">
          <source>Empty base optimization</source>
          <target state="translated">빈 기본 최적화</target>
        </trans-unit>
        <trans-unit id="1b46dd232df387892923a4a14eecc4e527b4dbd5" translate="yes" xml:space="preserve">
          <source>Empty base optimization is</source>
          <target state="translated">빈 기본 최적화는</target>
        </trans-unit>
        <trans-unit id="1366bc3f66098546f1876b6af6566d788de8bb52" translate="yes" xml:space="preserve">
          <source>Empty base optimization is commonly used by allocator-aware standard library classes (&lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;, etc) to avoid occupying any additional storage for its allocator member if the allocator is stateless. This is achieved by storing one of the required data members (e.g., begin, end, or capacity pointer for the vector) in an equivalent of &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/utility/compressed_pair.htm&quot;&gt;boost::compressed_pair&lt;/a&gt; with the allocator.</source>
          <target state="translated">빈 기본 최적화는 할당자가 상태 비 저장 인 경우 할당 자 멤버의 추가 스토리지를 차지하지 않도록 할당 자 인식 표준 라이브러리 클래스 ( &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 등)에서 일반적으로 사용됩니다 . 이는 할당 자와 의 &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/utility/compressed_pair.htm&quot;&gt;boost :: compressed_pair&lt;/a&gt; 와 동등하게 필요한 데이터 멤버 중 하나 (예 : 벡터의 시작, 종료 또는 용량 포인터)를 저장하여 달성됩니다 .</target>
        </trans-unit>
        <trans-unit id="4bba5b5ef7ff4af3b5db014da12cb36912b3882e" translate="yes" xml:space="preserve">
          <source>Empty base optimization is prohibited if one of the empty base classes is also the type or the base of the type of the first non-static data member, since the two base subobjects of the same type are required to have different addresses within the object representation of the most derived type.</source>
          <target state="translated">비어있는 기본 클래스 중 하나가 첫 번째 비 정적 데이터 멤버의 유형이거나 기본 인 경우 비어있는 기본 최적화는 금지됩니다. 동일한 유형의 두 기본 서브 오브젝트는 오브젝트 표현 내에서 다른 주소를 가져야하기 때문입니다. 가장 많이 파생 된 유형의</target>
        </trans-unit>
        <trans-unit id="9e256bc73716ba1a6fea5898df1250c41df5234b" translate="yes" xml:space="preserve">
          <source>Empty declaration (&lt;code&gt;;&lt;/code&gt;) (since C++11)</source>
          <target state="translated">빈 선언 ( &lt;code&gt;;&lt;/code&gt; ) (C ++ 11부터)</target>
        </trans-unit>
        <trans-unit id="8dbc23a37e9f199f286818545676a300a57b9d7e" translate="yes" xml:space="preserve">
          <source>Enables &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt; or &lt;a href=&quot;explicit_cast&quot;&gt;explicit conversion&lt;/a&gt; from a &lt;a href=&quot;class&quot;&gt;class type&lt;/a&gt; to another type.</source>
          <target state="translated">가능 &lt;a href=&quot;implicit_cast&quot;&gt;암시 적 변환&lt;/a&gt; 또는 &lt;a href=&quot;explicit_cast&quot;&gt;명시 적 변환&lt;/a&gt; A로부터 &lt;a href=&quot;class&quot;&gt;클래스 유형의&lt;/a&gt; 다른 유형을.</target>
        </trans-unit>
        <trans-unit id="90db46c771755978beb86ba5b54ba73617d135a7" translate="yes" xml:space="preserve">
          <source>Enables or disables automatic flushing of the output stream after any output operation. Has no effect on input.</source>
          <target state="translated">출력 조작 후 출력 스트림의 자동 플러시를 사용 가능 또는 사용 불가능하게합니다. 입력에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a4959a667ca07d06861b5aa5cf6b0dbc92c356b7" translate="yes" xml:space="preserve">
          <source>Enables or disables skipping of leading whitespace by the formatted input functions (enabled by default). Has no effect on output.</source>
          <target state="translated">포맷 된 입력 기능에 의한 선행 공백 건너 뛰기를 활성화하거나 비활성화합니다 (기본적으로 활성화되어 있음). 출력에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e5f54e6ab0bd8727f1f6e6b9ef90e70273706533" translate="yes" xml:space="preserve">
          <source>Enables or disables the display of the plus sign &lt;code&gt;'+'&lt;/code&gt; in non-negative integer output. Has no effect on input.</source>
          <target state="translated">음수가 아닌 정수 출력에서 더하기 부호 &lt;code&gt;'+'&lt;/code&gt; 표시를 활성화하거나 비활성화합니다 . 입력에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7508711bb1f387fc3f2c1e7a19c36f594a9407b5" translate="yes" xml:space="preserve">
          <source>Enables or disables the unconditional inclusion of the decimal point character in floating-point output. Has no effect on input.</source>
          <target state="translated">부동 소수점 출력에 소수점 문자의 무조건 포함을 활성화하거나 비활성화합니다. 입력에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3713887c26e89c154b4cdff6654a7b1b44e6c079" translate="yes" xml:space="preserve">
          <source>Enables the use of uppercase characters in floating-point and hexadecimal integer output. Has no effect on input.</source>
          <target state="translated">부동 소수점 및 16 진 정수 출력에서 ​​대문자를 사용할 수 있습니다. 입력에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d26eed3fde6989b9169d1709c26f0edf0f6fd1af" translate="yes" xml:space="preserve">
          <source>Encapsulates strategies for access/addressing, allocation/deallocation and construction/destruction of objects.</source>
          <target state="translated">개체의 액세스 / 주소 지정, 할당 / 할당 해제 및 구성 / 파괴 전략을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="0e481a4d447d0cc00ee5b6a4c1fcedf60b242575" translate="yes" xml:space="preserve">
          <source>Endian</source>
          <target state="translated">Endian</target>
        </trans-unit>
        <trans-unit id="928e3f8fc9f5bcd32a35c516cf18b80e790e6541" translate="yes" xml:space="preserve">
          <source>Endian (since C++20)</source>
          <target state="translated">엔디안 (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="ca8c72105bcbb031048af5eeff38e7865bacd1a6" translate="yes" xml:space="preserve">
          <source>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed) and reading more data in from the input sequence (if applicable). Returns the value of that character (converted to &lt;code&gt;int_type&lt;/code&gt; with &lt;code&gt;Traits::to_int_type(c)&lt;/code&gt;) on success or &lt;code&gt;Traits::eof()&lt;/code&gt; on failure.</source>
          <target state="translated">입력 영역에 대한 포인터를 업데이트하고 (필요한 경우) 입력 시퀀스에서 더 많은 데이터를 읽어 (적용 가능한 경우) 입력 영역에서 하나 이상의 문자를 사용할 수 있도록합니다. 성공 하면 해당 문자의 값 ( &lt;code&gt;Traits::to_int_type(c)&lt;/code&gt; 으로 &lt;code&gt;int_type&lt;/code&gt; 으로 변환 &lt;code&gt;Traits::eof()&lt;/code&gt; 을, 실패하면 Traits :: eof ()로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="e22320c08f0e5f367049a484123240b79d9e0a1b" translate="yes" xml:space="preserve">
          <source>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed). On success returns the value of that character and advances the value of the</source>
          <target state="translated">입력 영역에 대한 포인터를 업데이트하여 (필요한 경우) 입력 영역에서 하나 이상의 문자를 사용할 수 있도록합니다. 성공하면 해당 문자의 값을 반환하고</target>
        </trans-unit>
        <trans-unit id="b903b7034c3b21b9085dc5657b594c201d462006" translate="yes" xml:space="preserve">
          <source>Ensures that there is space at the &lt;a href=&quot;../basic_streambuf&quot;&gt;put area&lt;/a&gt; for at least one character by saving some initial subsequence of characters starting at &lt;code&gt;&lt;a href=&quot;pptr&quot;&gt;pbase()&lt;/a&gt;&lt;/code&gt; to the output sequence and updating the pointers to the put area (if needed). If &lt;code&gt;ch&lt;/code&gt; is not &lt;code&gt;Traits::eof()&lt;/code&gt; (i.e. &lt;code&gt;Traits::eq_int_type(ch, Traits::eof()) != true&lt;/code&gt;), it is either put to the put area or directly saved to the output sequence.</source>
          <target state="translated">상기 공간이 보장 &lt;a href=&quot;../basic_streambuf&quot;&gt;넣어 영역&lt;/a&gt; 에서 시작 문자의 몇 가지 초기 서브 저장하여 적어도 하나 개의 문자 &lt;code&gt;&lt;a href=&quot;pptr&quot;&gt;pbase()&lt;/a&gt;&lt;/code&gt; 출력 시퀀스를하고 (필요한 경우) 풋 영역에 포인터를 업데이트. &lt;code&gt;ch&lt;/code&gt; 가 &lt;code&gt;Traits::eof()&lt;/code&gt; 가 아닌 경우 (즉, &lt;code&gt;Traits::eq_int_type(ch, Traits::eof()) != true&lt;/code&gt; ) put 영역에 놓이거나 출력 순서에 직접 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="fe03a35a24ccf8bc0edfb2212ab66d2f0b846771" translate="yes" xml:space="preserve">
          <source>Entering a synchronized block by goto or switch is not allowed.</source>
          <target state="translated">goto 또는 switch로 동기화 된 블록을 입력 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e9c5be384877d88314bbf20fa19172408eade8f3" translate="yes" xml:space="preserve">
          <source>Entities are introduced by &lt;a href=&quot;declarations&quot;&gt;declarations&lt;/a&gt;, which associate them with &lt;a href=&quot;name&quot;&gt;names&lt;/a&gt; and define their properties. The declarations that define all properties required to use an entity are &lt;a href=&quot;definition&quot;&gt;definitions&lt;/a&gt;. A program must contain only one definition of any non-inline function or variable that is &lt;a href=&quot;definition&quot;&gt;odr-used&lt;/a&gt;.</source>
          <target state="translated">엔터티는 &lt;a href=&quot;declarations&quot;&gt;선언&lt;/a&gt; 과 함께 도입되어 &lt;a href=&quot;name&quot;&gt;이름&lt;/a&gt; 과 연결 되고 속성을 정의합니다. 엔터티를 사용하는 데 필요한 모든 속성을 정의하는 선언은 &lt;a href=&quot;definition&quot;&gt;정의&lt;/a&gt; 입니다. 프로그램은 &lt;a href=&quot;definition&quot;&gt;odr-used&lt;/a&gt; 인라인이 아닌 함수 또는 변수에 대한 하나의 정의 만 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7b88dbe45bc8e3bded46fdf26fc862660adff286" translate="yes" xml:space="preserve">
          <source>Enumeration constant</source>
          <target state="translated">열거 상수</target>
        </trans-unit>
        <trans-unit id="e361596f3da573b2fa3218f02f05f6336dff8db9" translate="yes" xml:space="preserve">
          <source>Enumeration constants</source>
          <target state="translated">열거 상수</target>
        </trans-unit>
        <trans-unit id="94a89cab175ef88a4bc5fc98faa4939646c8aa6d" translate="yes" xml:space="preserve">
          <source>Enumeration constants of type &lt;code&gt;std::float_denorm_style&lt;/code&gt; indicate support of subnormal values by floating-point types.</source>
          <target state="translated">&lt;code&gt;std::float_denorm_style&lt;/code&gt; 유형의 열거 상수는 부동 소수점 유형으로 비정규 값을 지원함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9867934156857b46d923a545ddb1058b1b98c984" translate="yes" xml:space="preserve">
          <source>Enumeration constants of type &lt;code&gt;std::float_round_style&lt;/code&gt; indicate the rounding style used by floating-point arithmetics whenever a result of an expression is stored in an object of a floating-point type. The values are:</source>
          <target state="translated">&lt;code&gt;std::float_round_style&lt;/code&gt; 유형의 열거 상수 는 표현식의 결과가 부동 소수점 유형의 오브젝트에 저장 될 때마다 부동 소수점 산술에 의해 사용되는 반올림 스타일을 나타냅니다. 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="73dbd67220f608ddd0d20646055a8f5ded3c737a" translate="yes" xml:space="preserve">
          <source>Enumeration declaration</source>
          <target state="translated">열거 선언</target>
        </trans-unit>
        <trans-unit id="02e55ea191b47e4596b9114d4d226fba07a17713" translate="yes" xml:space="preserve">
          <source>Enumeration scope</source>
          <target state="translated">열거 범위</target>
        </trans-unit>
        <trans-unit id="ea9874dfa2aac14b5273b07c871b8d56f7c0763f" translate="yes" xml:space="preserve">
          <source>Enumerations and enumerators</source>
          <target state="translated">열거와 열거 자</target>
        </trans-unit>
        <trans-unit id="4b0e8e1da7da06fe152010a80c78749058d3bb61" translate="yes" xml:space="preserve">
          <source>Enumerator declaration</source>
          <target state="translated">열거 자 선언</target>
        </trans-unit>
        <trans-unit id="8f18bdd05bc64bab79b39b50adcbddecc7bb42bb" translate="yes" xml:space="preserve">
          <source>Enumerators</source>
          <target state="translated">Enumerators</target>
        </trans-unit>
        <trans-unit id="af53586480b0918646f6d07a1a7fe6859361bc31" translate="yes" xml:space="preserve">
          <source>Equal to the complexity of &lt;code&gt;Container::pop_back&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Container::pop_back&lt;/code&gt; 의 복잡성과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="289914ccfb868f8a38c44485839624a978bf0be5" translate="yes" xml:space="preserve">
          <source>Equal to the complexity of &lt;code&gt;Container::pop_front&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Container::pop_front&lt;/code&gt; 의 복잡성과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="32f2d9f506daaeda1d2a1eaf8d3709309aced082" translate="yes" xml:space="preserve">
          <source>Equal to the complexity of &lt;code&gt;Container::push_back&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Container::push_back&lt;/code&gt; 의 복잡성과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="808c64ac1993745b831a03ead6e0df310856aebd" translate="yes" xml:space="preserve">
          <source>Equality and inequality comparison is defined over all iterators for the same underlying sequence and the value initialized-iterators(since C++14).</source>
          <target state="translated">평등과 불평등 비교는 동일한 기본 시퀀스와 초기화 된 반복자 (C ++ 14 이후)에 대한 모든 반복자에 대해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f11b9a3f9d107b9a56a6819233b85ca7c9bc74ac" translate="yes" xml:space="preserve">
          <source>Equality and inequality may not be defined for output iterators. Even if an &lt;code&gt;operator==&lt;/code&gt; is defined, &lt;code&gt;x == y&lt;/code&gt; need not imply &lt;code&gt;++x == ++y&lt;/code&gt;.</source>
          <target state="translated">출력 반복자에 대해 평등과 불평등이 정의되지 않을 수 있습니다. &lt;code&gt;operator==&lt;/code&gt; 가 정의되어 있어도 &lt;code&gt;x == y&lt;/code&gt; 는 &lt;code&gt;++x == ++y&lt;/code&gt; 의미 할 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="1d98596d1a3cfe4c779a9bed022e956f24b9c2f6" translate="yes" xml:space="preserve">
          <source>Equality of two paths is determined by comparing each component separately, so, for example &lt;code&gt;&quot;a//b&quot;&lt;/code&gt; equals &lt;code&gt;&quot;a/b&quot;&lt;/code&gt; and has the same &lt;code&gt;hash_value&lt;/code&gt;.</source>
          <target state="translated">두 경로의 동일성은 예를 들면, 따라서 개별적으로 각 성분을 비교함으로써 결정된다 &lt;code&gt;&quot;a//b&quot;&lt;/code&gt; 같음 &lt;code&gt;&quot;a/b&quot;&lt;/code&gt; 동일 갖는다 &lt;code&gt;hash_value&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="11988aecc8a08c1b962149ae5ba30a660356633e" translate="yes" xml:space="preserve">
          <source>Equality preservation</source>
          <target state="translated">평등 보존</target>
        </trans-unit>
        <trans-unit id="b824328f7a54677a860ada8e1174301ba4893908" translate="yes" xml:space="preserve">
          <source>EqualityComparable</source>
          <target state="translated">EqualityComparable</target>
        </trans-unit>
        <trans-unit id="f26e161e2741334c01a46601e10a72f63c620fbe" translate="yes" xml:space="preserve">
          <source>EqualityComparableEqualityComparableWith</source>
          <target state="translated">EqualityComparableEqualityComparableWith</target>
        </trans-unit>
        <trans-unit id="64a91e71f522cc96771d7e5c2ebef0d8bc91bc17" translate="yes" xml:space="preserve">
          <source>Equals &lt;code&gt;true&lt;/code&gt; if this atomic type is always lock-free and &lt;code&gt;false&lt;/code&gt; if it is never or sometimes lock-free.</source>
          <target state="translated">같음 &lt;code&gt;true&lt;/code&gt; 이 원자 유형은 항상 잠금 무료 인 경우 &lt;code&gt;false&lt;/code&gt; 은 결코 때로는 잠이없는없는 경우.</target>
        </trans-unit>
        <trans-unit id="746d6cea150e3e296ccf55b51dad2d40ca1fc97b" translate="yes" xml:space="preserve">
          <source>Equals &lt;code&gt;true&lt;/code&gt; if this operations on this &lt;code&gt;atomic_ref&lt;/code&gt; type is always lock-free and &lt;code&gt;false&lt;/code&gt; if it is never or sometimes lock-free.</source>
          <target state="translated">같음 &lt;code&gt;true&lt;/code&gt; 이에이 작업하는 경우 &lt;code&gt;atomic_ref&lt;/code&gt; 의 유형은 항상 잠금 무료이며 &lt;code&gt;false&lt;/code&gt; 은 결코 때로는 잠이없는없는 경우.</target>
        </trans-unit>
        <trans-unit id="1f55cac8623bcd3e718c002528aa20c26ca69289" translate="yes" xml:space="preserve">
          <source>Equivalent</source>
          <target state="translated">Equivalent</target>
        </trans-unit>
        <trans-unit id="78c97e7651ba102425c044632cd72907f2eb4524" translate="yes" xml:space="preserve">
          <source>Equivalent POSIX Error</source>
          <target state="translated">동등한 POSIX 오류</target>
        </trans-unit>
        <trans-unit id="f629c80a1605c8062eb27b5bea5847a550c5a10f" translate="yes" xml:space="preserve">
          <source>Equivalent expression</source>
          <target state="translated">동등한 표현</target>
        </trans-unit>
        <trans-unit id="1f7c0c8a29af64aa5156682868f0115cdcd7df91" translate="yes" xml:space="preserve">
          <source>Equivalent operation:</source>
          <target state="translated">동등한 작업 :</target>
        </trans-unit>
        <trans-unit id="fdd6abe4d3e43555fd6a8a4c1cf45b848e487e53" translate="yes" xml:space="preserve">
          <source>Equivalent to</source>
          <target state="translated">에 해당</target>
        </trans-unit>
        <trans-unit id="254f6b3dd63220a53335904504aa3dd8f0e63323" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&quot;%H:%M&quot;&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;&quot;%H:%M&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8735cba36cc40689d6cd8b71603f8710377be14a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&quot;%H:%M:%S&quot;&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;&quot;%H:%M:%S&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="747f5efb9818fa6aefeb907f76b9edc6beeda75c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&quot;%Y-%m-%d&quot;&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;&quot;%Y-%m-%d&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21e739d4b285661143043c8a868b8e5d52778c4f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&quot;%Y-%m-%d&quot;&lt;/code&gt;. If the width is specified, it is only applied to the &lt;code&gt;%Y&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;&quot;%Y-%m-%d&quot;&lt;/code&gt; . 너비가 지정되면 &lt;code&gt;%Y&lt;/code&gt; 에만 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d23fab1a01d5ba8338e81ce197017f24468963e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&quot;%m/%d/%y&quot;&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;&quot;%m/%d/%y&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be189a753853235e94e9a76a4b472a8942e287f2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;*(n + a.begin())&lt;/code&gt;</source>
          <target state="translated">상당 &lt;code&gt;*(n + a.begin())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="452d06ee3fd4854cd75168d83bddb932473ee688" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;*(n + a.begin())&lt;/code&gt;, except that &lt;code&gt;out_of_range&lt;/code&gt; is thrown if &lt;code&gt;n&amp;gt;=size()&lt;/code&gt;</source>
          <target state="translated">상당 &lt;code&gt;*(n + a.begin())&lt;/code&gt; 것을 제외 &lt;code&gt;out_of_range&lt;/code&gt; 가 발생되면 &lt;code&gt;n&amp;gt;=size()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a09f650a2c90c75b077a3dad428125a608c35a03" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;*a.begin()&lt;/code&gt;</source>
          <target state="translated">상당 &lt;code&gt;*a.begin()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dae7e43dd90cce5db1d81d7b7bec3ab193e364d3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;*this = error_code(0, &lt;a href=&quot;../system_category&quot;&gt;std::system_category&lt;/a&gt;())&lt;/code&gt;.</source>
          <target state="translated">당량 &lt;code&gt;*this = error_code(0, &lt;a href=&quot;../system_category&quot;&gt;std::system_category&lt;/a&gt;())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c57a1721331215b377bd4b6f39ce5a28f4396bbb" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;*this = packaged_task(std::move(f))&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is the stored task.</source>
          <target state="translated">당량 &lt;code&gt;*this = packaged_task(std::move(f))&lt;/code&gt; , 여기서, &lt;code&gt;f&lt;/code&gt; 는 상기 저장된 작업이다.</target>
        </trans-unit>
        <trans-unit id="b3cd9f2f94f342121e69037ee16bdfbb2106a640" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;*this = std::make_error_code(e)&lt;/code&gt;. The overload participates in overload resolutions only if &lt;code&gt;&lt;a href=&quot;is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;.</source>
          <target state="translated">상당 &lt;code&gt;*this = std::make_error_code(e)&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt; 경우에만 과부하가 과부하 해결에 참여 합니다 .</target>
        </trans-unit>
        <trans-unit id="1f3ee74295669fbb5c4a1ff6b24ed16238345213" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;../error_code&quot;&gt;std::error_code&lt;/a&gt;(static_cast&amp;lt;int&amp;gt;(e), &lt;a href=&quot;../generic_category&quot;&gt;std::generic_category&lt;/a&gt;())&lt;/code&gt;.</source>
          <target state="translated">등가 &lt;code&gt;&lt;a href=&quot;../error_code&quot;&gt;std::error_code&lt;/a&gt;(static_cast&amp;lt;int&amp;gt;(e), &lt;a href=&quot;../generic_category&quot;&gt;std::generic_category&lt;/a&gt;())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4b62066e821797d8d3a0e564da5a9ee80d7609f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;../error_condition&quot;&gt;std::error_condition&lt;/a&gt;(code, *this)&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;&lt;a href=&quot;../error_condition&quot;&gt;std::error_condition&lt;/a&gt;(code, *this)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6e7eac0d3fbd004b8f4d3302f9e0f08f473929ae" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;fgetc&quot;&gt;std::getc&lt;/a&gt;(stdin)&lt;/code&gt;.</source>
          <target state="translated">상응하는 &lt;code&gt;&lt;a href=&quot;fgetc&quot;&gt;std::getc&lt;/a&gt;(stdin)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16a09f680c5a2397e84dda67e22dee206d5c22d2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;fmax&quot;&gt;std::fmax&lt;/a&gt;(x-y, 0)&lt;/code&gt;, except for the NaN handling requirements.</source>
          <target state="translated">상응하는 &lt;code&gt;&lt;a href=&quot;fmax&quot;&gt;std::fmax&lt;/a&gt;(x-y, 0)&lt;/code&gt; 은 NaN이 처리 요구를 제외.</target>
        </trans-unit>
        <trans-unit id="e5e06cab1e3a4b75a963c062516ac8247e8e32f6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;Traits::copy(dest, data() + pos, rcount)&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;Traits::copy(dest, data() + pos, rcount)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd1387ffa56a0afce8316e850060eb8a03056c34" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;X(il.begin(), il.end());&lt;/code&gt;</source>
          <target state="translated">동등 &lt;code&gt;X(il.begin(), il.end());&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a07ae9503dc11c3ebcc067c7354138d94329a5e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;all | set_uid | set_gid | sticky_bit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;all | set_uid | set_gid | sticky_bit&lt;/code&gt; 와 동일 | set_uid | set_gid | sticky_bit .</target>
        </trans-unit>
        <trans-unit id="ce1dcc10a1fd1cd861cdb39bbe85fb835f738216" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;category().default_error_condition(value())&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;category().default_error_condition(value())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f91b0de27ade371438b0a789264d59d6cd03e0e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;category().message(value())&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;category().message(value())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6bb68a284e806a290344b1de0c5830b5fc1d9a69" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;deallocate_bytes(p, n*sizeof(U), alignof(U));&lt;/code&gt;</source>
          <target state="translated">상당 &lt;code&gt;deallocate_bytes(p, n*sizeof(U), alignof(U));&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7074b3683f71b2b3ef2ebb26f3673f65ea36c5e8" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;do_deallocate(p, bytes, alignment);&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;do_deallocate(p, bytes, alignment);&lt;/code&gt; 와 동일합니다 . .</target>
        </trans-unit>
        <trans-unit id="5f8b267b719509dac3acb787f8168f3e19fc8ada" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;erase(end()-1)&lt;/code&gt;. The behavior is undefined if the string is empty.</source>
          <target state="translated">상당 &lt;code&gt;erase(end()-1)&lt;/code&gt; . 문자열이 비어 있으면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b437251dbed88a27041c326a2cce98454ec17dca" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;function(allocator_arg, alloc, &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)).swap(*this)&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;function(allocator_arg, alloc, &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)).swap(*this)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="681b71864e66445b208103ba55a34618d552dd53" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;group_read | group_write | group_exec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;group_read | group_write | group_exec&lt;/code&gt; 와 동일 | group_write | group_exec .</target>
        </trans-unit>
        <trans-unit id="65b7cf35933a2063ec815b49fb5d22291eda205f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;os &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; ':' &amp;lt;&amp;lt; ec.value()&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;os &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; ':' &amp;lt;&amp;lt; ec.value()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d921fb5562330a664c82ac360e8e032242593e58" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;os &amp;lt;&amp;lt; m.str()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os &amp;lt;&amp;lt; m.str()&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="2316e345d42ecfc386cef985780c3f9be9574f63" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;os &amp;lt;&amp;lt; p.get()&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;os &amp;lt;&amp;lt; p.get()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bcaec786bc646aa144058510b3539dc934df60c3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;os &amp;lt;&amp;lt; ptr.get()&lt;/code&gt;.</source>
          <target state="translated">동등 &lt;code&gt;os &amp;lt;&amp;lt; ptr.get()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1fbbb3a1507d2fa77389bace7304a522a20a692" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;others_read | others_write | others_exec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;others_read | others_write | others_exec&lt;/code&gt; 와 동일 | others_write | others_exec .</target>
        </trans-unit>
        <trans-unit id="36e3d2db84a7c81c9b3d0b512b453e7364303d57" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;owner_all | group_all | others_all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;owner_all | group_all | others_all&lt;/code&gt; 동일 | group_all | others_all .</target>
        </trans-unit>
        <trans-unit id="616d02d65e5e7a0ff5be87f9a9a6339640957205" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;owner_read | owner_write | owner_exec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;owner_read | owner_write | owner_exec&lt;/code&gt; 와 동일 | owner_write | owner_exec .</target>
        </trans-unit>
        <trans-unit id="6e796b5118f4623f5ec17a9e48510bbf5c7898ec" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;putc(ch, stdout)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;putc(ch, stdout)&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="eb7072e38ede8e4bd9fd2b1fc02de57f0619d688" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;relative_path().empty() ? path() : *--end()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;relative_path().empty() ? path() : *--end()&lt;/code&gt; 와 동일 합니까? path () : *-end () 입니다.</target>
        </trans-unit>
        <trans-unit id="f44b0518b7717aed5baf6b9b5cfffbdb58fe9c4e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;resorce()-&amp;gt;deallocate(p, nbytes, alignment);&lt;/code&gt;</source>
          <target state="translated">등가 &lt;code&gt;resorce()-&amp;gt;deallocate(p, nbytes, alignment);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0810249cdd1c4cab721cf0926eb355cefc71a6f9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return !(x == y);&lt;/code&gt; and &lt;code&gt;return !(y == x);&lt;/code&gt; respectively.</source>
          <target state="translated">&lt;code&gt;return !(x == y);&lt;/code&gt; 를 반환하는 것과 같습니다 . 그리고 &lt;code&gt;return !(y == x);&lt;/code&gt; 각기.</target>
        </trans-unit>
        <trans-unit id="78d090431b0546b8aaf1566e4bc9246f41de00b4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return *r_;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return *r_;&lt;/code&gt; 를 반환하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8dad49fa656dd982549862fa37d108c7fd7e9e4e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return base_;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return base_;&lt;/code&gt; 를 반환하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="3af275e865947370112ddad9fbcb236aab207cf8" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return do_allocate(bytes, alignment);&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return do_allocate(bytes, alignment);&lt;/code&gt; 를 반환하는 것과 같습니다 . .</target>
        </trans-unit>
        <trans-unit id="142ba2a2e9321d226c59fd6349058ee445624185" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return do_is_equal(other);&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return do_is_equal(other);&lt;/code&gt; 을 반환하는 것과 같습니다 . .</target>
        </trans-unit>
        <trans-unit id="616a27605456c624b01d2b67ee47074db2ecb48e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return load();&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return load();&lt;/code&gt; 를 반환하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="4ca628bc05532f3c34709d4fe5953849ed430eab" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return ranges::begin(*r_);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return ranges::begin(*r_);&lt;/code&gt; 와 같습니다 :: begin (* r_);</target>
        </trans-unit>
        <trans-unit id="1fef4f4c2dd1f60e2a84d2c020a48b73e41175ab" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return ranges::empty(*r_);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return ranges::empty(*r_);&lt;/code&gt; 와 같습니다 :: empty (* r_);</target>
        </trans-unit>
        <trans-unit id="5b180f1db75d7e2b17c53ff60403cc6b3f20e5a1" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;return ranges::end(*r_);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return ranges::end(*r_);&lt;/code&gt; 와 같습니다. :: end (* r_);</target>
        </trans-unit>
        <trans-unit id="f0b6949e40a743c8c0064e3dca5a950080682b39" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;this-&amp;gt;resource()-&amp;gt;deallocate(p, n * sizeof(T), alignof(T));&lt;/code&gt;</source>
          <target state="translated">동등 &lt;code&gt;this-&amp;gt;resource()-&amp;gt;deallocate(p, n * sizeof(T), alignof(T));&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1df958b169144679efc56063ba03f82bf46c22cc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;use_count() == 0&lt;/code&gt;. The destructor for the managed object may not yet have been called, but this object's destruction is imminent (or may have already happened).</source>
          <target state="translated">동등 &lt;code&gt;use_count() == 0&lt;/code&gt; . 관리 객체의 소멸자가 아직 호출되지 않았지만이 객체의 파기가 임박했거나 이미 발생했을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ca2f3458b9f26ed7a31cb72ddd2ca13a8d46711" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;{ auto tmp = a.end(); --tmp; return *tmp; }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{ auto tmp = a.end(); --tmp; return *tmp; }&lt;/code&gt; 와 같습니다 . --tmp; return * tmp; }</target>
        </trans-unit>
        <trans-unit id="5910bb363d729a6e601a3f406d9cbdf748bde64e" translate="yes" xml:space="preserve">
          <source>Equivalent to that of &lt;code&gt;operator=&lt;/code&gt; of the underlying container.</source>
          <target state="translated">기본 컨테이너 의 &lt;code&gt;operator=&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="0bb7be094f6e6b7c7f7fa96e7270020dc9a0b48c" translate="yes" xml:space="preserve">
          <source>Equivalent to the following:</source>
          <target state="translated">다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eb512a6755b72e580881201f6a1a175d84d47f95" translate="yes" xml:space="preserve">
          <source>Equivalent to.</source>
          <target state="translated">에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="0d2264a241784f1de0a4164890d06c708e1211da" translate="yes" xml:space="preserve">
          <source>Equivalent to: &lt;code&gt;return IntegerType(b);&lt;/code&gt; This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_integral&quot;&gt;std::is_integral_v&lt;/a&gt;&amp;lt;IntegerType&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">다음과 같습니다. &lt;code&gt;return IntegerType(b);&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;is_integral&quot;&gt;std::is_integral_v&lt;/a&gt;&amp;lt;IntegerType&amp;gt;&lt;/code&gt; 이 true 인 경우이 과부하는 과부하 해결에만 참여 합니다.</target>
        </trans-unit>
        <trans-unit id="268e46dd00ca8323057712453991afe3c060030f" translate="yes" xml:space="preserve">
          <source>Equivalent to: &lt;code&gt;return end_;&lt;/code&gt;</source>
          <target state="translated">다음과 같습니다. &lt;code&gt;return end_;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf19760ad565746ccac14093a4ab0d8b8386dd54" translate="yes" xml:space="preserve">
          <source>Equivalent to: &lt;code&gt;return x.current_ == y.end_;&lt;/code&gt; and &lt;code&gt;return y == x;&lt;/code&gt; respectively.</source>
          <target state="translated">다음과 같습니다 : &lt;code&gt;return x.current_ == y.end_;&lt;/code&gt; 및 &lt;code&gt;return y == x;&lt;/code&gt; 각기.</target>
        </trans-unit>
        <trans-unit id="b1fc9fdbf40e0fc2c8e277ab4cd05f216d944ae6" translate="yes" xml:space="preserve">
          <source>Equivalent to: &lt;code&gt;x.value_&amp;shy; == y.bound_&amp;shy;;&lt;/code&gt; and &lt;code&gt;return y == x;&lt;/code&gt; respectively.</source>
          <target state="translated">다음과 같습니다. &lt;code&gt;x.value_&amp;shy; == y.bound_&amp;shy;;&lt;/code&gt; 및 &lt;code&gt;return y == x;&lt;/code&gt; 각기.</target>
        </trans-unit>
        <trans-unit id="3afb8f001e247060377e8e5e40c5712afc040c31" translate="yes" xml:space="preserve">
          <source>Equivalent type</source>
          <target state="translated">동등한 유형</target>
        </trans-unit>
        <trans-unit id="71b5e299997f2a75a2abd4c7623ba1cba403534a" translate="yes" xml:space="preserve">
          <source>Equivalent values are..</source>
          <target state="translated">동등한 값은</target>
        </trans-unit>
        <trans-unit id="b5da03c24d5657c9ba251d348e9f7c67f1a7716b" translate="yes" xml:space="preserve">
          <source>Erasable</source>
          <target state="translated">Erasable</target>
        </trans-unit>
        <trans-unit id="f4b3391bb1f55278fc1cb1bed5ef1ae780928504" translate="yes" xml:space="preserve">
          <source>Eraseable</source>
          <target state="translated">Eraseable</target>
        </trans-unit>
        <trans-unit id="1ee8611c915ed4d51c2aa1fd913e6cc42413c873" translate="yes" xml:space="preserve">
          <source>Erased elements + all elements after them (including &lt;code&gt;&lt;a href=&quot;vector/end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">지워진 요소 + 그 이후의 모든 요소 ( &lt;code&gt;&lt;a href=&quot;vector/end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a57062a6e18711b31dda59ab1723e8773a34c7e8" translate="yes" xml:space="preserve">
          <source>Erases all elements from the container. After this call, &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; returns zero.</source>
          <target state="translated">컨테이너에서 모든 요소를 ​​지 웁니다. 이 호출 후 &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; 는 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="335fc996c808feb1721b4e019eed82fbce98c821" translate="yes" xml:space="preserve">
          <source>Erases all elements from the container. After this call, &lt;code&gt;size()&lt;/code&gt; returns zero.</source>
          <target state="translated">컨테이너에서 모든 요소를 ​​지 웁니다. 이 호출 후 &lt;code&gt;size()&lt;/code&gt; 는 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2a33d62b3c4ed379cb2a532d85a6905566221204" translate="yes" xml:space="preserve">
          <source>Erases all elements satisfying specific criteria</source>
          <target state="translated">특정 기준을 만족하는 모든 요소를 ​​지 웁니다.</target>
        </trans-unit>
        <trans-unit id="48a44d7d91bebd82eb353f148baba4da30dad32a" translate="yes" xml:space="preserve">
          <source>Erases all elements that satisfy the predicate &lt;code&gt;pred&lt;/code&gt; from the container. Equivalent to.</source>
          <target state="translated">술어 만족하는 모든 요소 삭제합니다 &lt;code&gt;pred&lt;/code&gt; 컨테이너에서합니다. 에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="8be44911adfaa08fb2735396cf8c0c4a3a62b9a3" translate="yes" xml:space="preserve">
          <source>Erases elements in &lt;code&gt;[q1,q2)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[q1,q2)&lt;/code&gt; 의 요소를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="f3c64e578444b81e9abad32572bc60400d0eba9d" translate="yes" xml:space="preserve">
          <source>Erases the &lt;code&gt;std::chrono::tzdb&lt;/code&gt; referred to by the iterator following &lt;code&gt;p&lt;/code&gt;. The behavior is undefined if that iterator is not dereferenceable. No pointers, references, or iterators are invalidated except for those referring to the erased element.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 다음에 반복자가 참조 하는 &lt;code&gt;std::chrono::tzdb&lt;/code&gt; 웁니다 . 해당 반복자를 역 참조 할 수없는 경우 동작이 정의되지 않습니다. 지워진 요소를 참조하는 포인터를 제외하고는 포인터, 참조 또는 반복자가 무효화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c049d877287aa8e1404dc752b6cc8a5db5913e50" translate="yes" xml:space="preserve">
          <source>Erases the element pointed to by &lt;code&gt;q&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;q&lt;/code&gt; 가 가리키는 요소를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="6f115ad441244a522d0851c2987336fe3e1e1d11" translate="yes" xml:space="preserve">
          <source>Erases the specified elements from the container.</source>
          <target state="translated">컨테이너에서 지정된 요소를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="c60871aec92a76dda616d9c296dbb8c9975150be" translate="yes" xml:space="preserve">
          <source>Error Conditions</source>
          <target state="translated">오류 조건</target>
        </trans-unit>
        <trans-unit id="9fc37eb09ee0018dcccc12a37a104dbad90d4bbf" translate="yes" xml:space="preserve">
          <source>Error and gamma functions</source>
          <target state="translated">오류 및 감마 기능</target>
        </trans-unit>
        <trans-unit id="d0fb46024f5870a9062dc5dd7931112a10048187" translate="yes" xml:space="preserve">
          <source>Error category interface</source>
          <target state="translated">오류 범주 인터페이스</target>
        </trans-unit>
        <trans-unit id="f02584714cc7d9bcca7175c54795758822ae5245" translate="yes" xml:space="preserve">
          <source>Error code corresponding to &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 에 해당하는 오류 코드 .</target>
        </trans-unit>
        <trans-unit id="e2c122b983239b87ee736077ee58b0d01aa9bd09" translate="yes" xml:space="preserve">
          <source>Error condition for &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 에 대한 오류 조건 .</target>
        </trans-unit>
        <trans-unit id="5343729b1e8d28fc4392758181e1915608251253" translate="yes" xml:space="preserve">
          <source>Error directive</source>
          <target state="translated">오류 지시어</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">오류 처리</target>
        </trans-unit>
        <trans-unit id="f9c4c6711618f251c4a454ba58410243568d56b8" translate="yes" xml:space="preserve">
          <source>Error handling and special values</source>
          <target state="translated">오류 처리 및 특수 값</target>
        </trans-unit>
        <trans-unit id="a70dcd4b1cc80d9067639e0fc5853ef1c8bcd9a3" translate="yes" xml:space="preserve">
          <source>Error numbers</source>
          <target state="translated">오류 번호</target>
        </trans-unit>
        <trans-unit id="261b943d1143c03312bb73f499787d66496ca441" translate="yes" xml:space="preserve">
          <source>Errors and special cases are handled as if the function is implemented as &lt;code&gt;&lt;a href=&quot;../math/atan2&quot;&gt;std::atan2&lt;/a&gt;(&lt;a href=&quot;imag2&quot;&gt;std::imag&lt;/a&gt;(z), &lt;a href=&quot;real2&quot;&gt;std::real&lt;/a&gt;(z))&lt;/code&gt;.</source>
          <target state="translated">함수가 &lt;code&gt;&lt;a href=&quot;../math/atan2&quot;&gt;std::atan2&lt;/a&gt;(&lt;a href=&quot;imag2&quot;&gt;std::imag&lt;/a&gt;(z), &lt;a href=&quot;real2&quot;&gt;std::real&lt;/a&gt;(z))&lt;/code&gt; 로 구현 된 것처럼 오류 및 특수 사례가 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="372423c34044a94108eb5a656f09bda4868b1ede" translate="yes" xml:space="preserve">
          <source>Errors and special cases are handled as if the function is implemented as &lt;code&gt;&lt;a href=&quot;../math/hypot&quot;&gt;std::hypot&lt;/a&gt;(&lt;a href=&quot;real2&quot;&gt;std::real&lt;/a&gt;(z), &lt;a href=&quot;imag2&quot;&gt;std::imag&lt;/a&gt;(z))&lt;/code&gt;.</source>
          <target state="translated">함수가 &lt;code&gt;&lt;a href=&quot;../math/hypot&quot;&gt;std::hypot&lt;/a&gt;(&lt;a href=&quot;real2&quot;&gt;std::real&lt;/a&gt;(z), &lt;a href=&quot;imag2&quot;&gt;std::imag&lt;/a&gt;(z))&lt;/code&gt; 로 구현 된 것처럼 오류 및 특수 사례가 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="989beee23bbe1146e942c12afc0dd1ed484a6128" translate="yes" xml:space="preserve">
          <source>Errors and special cases are handled as if the operation is implemented by &lt;code&gt;-i * &lt;a href=&quot;asinh&quot;&gt;std::asinh&lt;/a&gt;(i*z)&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the imaginary unit.</source>
          <target state="translated">오류와 특수한 경우는 &lt;code&gt;-i * &lt;a href=&quot;asinh&quot;&gt;std::asinh&lt;/a&gt;(i*z)&lt;/code&gt; 의해 작업이 구현되는 것처럼 처리됩니다 . 여기서 &lt;code&gt;i&lt;/code&gt; 는 허수 단위입니다.</target>
        </trans-unit>
        <trans-unit id="bef45cb2df2b9e38f709902466622a3bf764d455" translate="yes" xml:space="preserve">
          <source>Errors and special cases are handled as if the operation is implemented by &lt;code&gt;-i * &lt;a href=&quot;atanh&quot;&gt;std::atanh&lt;/a&gt;(i*z)&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the imaginary unit.</source>
          <target state="translated">오류와 특수한 경우는 &lt;code&gt;-i * &lt;a href=&quot;atanh&quot;&gt;std::atanh&lt;/a&gt;(i*z)&lt;/code&gt; 의해 작업이 구현되는 것처럼 처리됩니다 . 여기서 &lt;code&gt;i&lt;/code&gt; 는 허수 단위입니다.</target>
        </trans-unit>
        <trans-unit id="717d9c459c2bef30a6c33f313693ec4205d5332a" translate="yes" xml:space="preserve">
          <source>Errors and special cases are handled as if the operation is implemented by &lt;code&gt;-i * &lt;a href=&quot;sinh&quot;&gt;std::sinh&lt;/a&gt;(i*z)&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the imaginary unit.</source>
          <target state="translated">오류와 특수한 경우는 &lt;code&gt;-i * &lt;a href=&quot;sinh&quot;&gt;std::sinh&lt;/a&gt;(i*z)&lt;/code&gt; 의해 작업이 구현되는 것처럼 처리됩니다 . 여기서 &lt;code&gt;i&lt;/code&gt; 는 허수 단위입니다.</target>
        </trans-unit>
        <trans-unit id="8e409aedb592cd65558f5ed7e9b6a0268682c0c9" translate="yes" xml:space="preserve">
          <source>Errors and special cases are handled as if the operation is implemented by &lt;code&gt;-i * &lt;a href=&quot;tanh&quot;&gt;std::tanh&lt;/a&gt;(i*z)&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the imaginary unit.</source>
          <target state="translated">오류와 특수한 경우는 &lt;code&gt;-i * &lt;a href=&quot;tanh&quot;&gt;std::tanh&lt;/a&gt;(i*z)&lt;/code&gt; 의해 작업이 구현되는 것처럼 처리됩니다 . 여기서 &lt;code&gt;i&lt;/code&gt; 는 허수 단위입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
