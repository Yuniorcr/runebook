<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="3c43c4b56b0bcbad2ca7fbcf999df357050cd5ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::span&lt;/code&gt; view</source>
          <target state="translated">&lt;code&gt;std::span&lt;/code&gt; 보기</target>
        </trans-unit>
        <trans-unit id="022aee2c614401246f82162884b2a5730dddc045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::sqrt&lt;/code&gt; is required by the IEEE standard to be exact. The only other operations required to be exact are the &lt;a href=&quot;../../language/operator_arithmetic&quot;&gt;arithmetic operators&lt;/a&gt; and the function &lt;code&gt;&lt;a href=&quot;fma&quot;&gt;std::fma&lt;/a&gt;&lt;/code&gt;. After rounding to the return type (using default rounding mode), the result of &lt;code&gt;std::sqrt&lt;/code&gt; is indistinguishable from the infinitely precise result. In other words, the error is less than 0.5 ulp. Other functions, including &lt;code&gt;&lt;a href=&quot;pow&quot;&gt;std::pow&lt;/a&gt;&lt;/code&gt;, are not so constrained.</source>
          <target state="translated">&lt;code&gt;std::sqrt&lt;/code&gt; IEEE 표준에서는 std :: sqrt 가 정확해야합니다. 정확해야하는 다른 연산은 &lt;a href=&quot;../../language/operator_arithmetic&quot;&gt;산술 연산자&lt;/a&gt; 와 &lt;code&gt;&lt;a href=&quot;fma&quot;&gt;std::fma&lt;/a&gt;&lt;/code&gt; 함수 입니다. 리턴 유형으로 반올림 한 후 (기본 반올림 모드 사용) &lt;code&gt;std::sqrt&lt;/code&gt; 의 결과 는 무한정의 정확한 결과와 구별 할 수 없습니다. 즉, 오차는 0.5ulp 미만입니다. &lt;code&gt;&lt;a href=&quot;pow&quot;&gt;std::pow&lt;/a&gt;&lt;/code&gt; 포함한 다른 함수 는 그렇게 제한되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a8d30cec9b43e6f974c8d36ed546411518d333cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::streampos&lt;/code&gt; and &lt;code&gt;std::wstreampos&lt;/code&gt; are required to be the same type because &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;char&amp;gt;::state_type&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;wchar_t&amp;gt;::state_type&lt;/code&gt; are required to both be &lt;code&gt;&lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt;. C++98 had a self-contradictory statement that they may be different if the implementation supports no shift encoding in narrow-oriented iostreams but supports one or more shift encodings in wide-oriented streams, but that was corrected in C++03.</source>
          <target state="translated">&lt;code&gt;std::streampos&lt;/code&gt; 와 &lt;code&gt;std::wstreampos&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;char&amp;gt;::state_type&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;wchar_t&amp;gt;::state_type&lt;/code&gt; 이 모두 &lt;code&gt;&lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt; 이어야 하기 때문에 동일한 유형 이어야 합니다 . C ++ 98은 구현이 좁은 방향의 iostream에서 시프트 인코딩을 지원하지 않지만 넓은 방향의 스트림에서 하나 이상의 시프트 인코딩을 지원하지만 C ++ 03에서 수정 된 경우 다를 수 있다는 자기 모순적 진술을했습니다.</target>
        </trans-unit>
        <trans-unit id="ff0eafa74a74dee03ea9a69e23b551865010e207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_equality::equal&lt;/code&gt; if &lt;code&gt;p == q&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::strong_equality::equal&lt;/code&gt; &lt;code&gt;p == q&lt;/code&gt; 경우 같음</target>
        </trans-unit>
        <trans-unit id="88deaa9e64ae8679b6a5d73ef18b59c37a1452b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_equality::equal&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;std::strong_equality::nonequal&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::strong_equality::equal&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이다 &lt;code&gt;equivalent&lt;/code&gt; 또는 &lt;code&gt;equal&lt;/code&gt; , &lt;code&gt;std::strong_equality::nonequal&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 인 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b2828c1fd0dac296e742caf4bff22f7533be6f4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_equality::unequal&lt;/code&gt; if &lt;code&gt;p != q&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::strong_equality::unequal&lt;/code&gt; 않으면 &lt;code&gt;p != q&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdce79e381b03cf3c0ed3a09ab095fa0f7f8dd55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_equality&lt;/code&gt; is implicitly-convertible to &lt;code&gt;std::weak_equality&lt;/code&gt;, and &lt;code&gt;std::strong_ordering&lt;/code&gt; is implicitly-convertible to &lt;code&gt;strong_equality&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::strong_equality&lt;/code&gt; 암시 적-컨버터블이다 &lt;code&gt;std::weak_equality&lt;/code&gt; 하고, &lt;code&gt;std::strong_ordering&lt;/code&gt; 암시 적으로 변환 가능하다 &lt;code&gt;strong_equality&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c1bcf62941b855cdd0eac5af9fa875bd46144dbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering::equal&lt;/code&gt; if &lt;code&gt;p == q&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::strong_ordering::equal&lt;/code&gt; &lt;code&gt;p == q&lt;/code&gt; 이면 같음</target>
        </trans-unit>
        <trans-unit id="fa83ac2e7a33bc297d6c81b58884fdb954ee3802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering::equal&lt;/code&gt; if both operands are arithmetically equal,</source>
          <target state="translated">&lt;code&gt;std::strong_ordering::equal&lt;/code&gt; 피연산자 모두 산술적으로 동일하면</target>
        </trans-unit>
        <trans-unit id="a181c69bdfa2c3d7090838be67bdd8fbd3d75e3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering::greater&lt;/code&gt; if &lt;code&gt;p &amp;gt; q&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::strong_ordering::greater&lt;/code&gt; &lt;code&gt;p &amp;gt; q&lt;/code&gt; 보다 큰 경우 q&amp;gt; q .</target>
        </trans-unit>
        <trans-unit id="71b898ba9d170e3716779c1c92981e7382e24f08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering::greater&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;std::strong_ordering::greater&lt;/code&gt; 그렇지 않으면 더 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="94f91bbaa05a1c0e4e86bdd725dfda6ed828496c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering::less&lt;/code&gt; if &lt;code&gt;q &amp;gt; p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::strong_ordering::less&lt;/code&gt; if &lt;code&gt;q &amp;gt; p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd73a567570412ceb0f011855a55d1be0b51206d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering::less&lt;/code&gt; if the first operand is arithmetically less than the second</source>
          <target state="translated">&lt;code&gt;std::strong_ordering::less&lt;/code&gt; 첫 번째 피연산자가 산술적으로 두 번째 피연산자 보다 작은 경우</target>
        </trans-unit>
        <trans-unit id="a0be3656c320241f0794e9dd6c9a8f164ba69337" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strong_ordering&lt;/code&gt; is the strongest of the five comparison categories: it is not implicitly-convertible from any other category and is implicitly-convertible to the other four.</source>
          <target state="translated">&lt;code&gt;std::strong_ordering&lt;/code&gt; 은 다섯 가지 비교 범주 중 가장 강한 범주입니다. 다른 범주에서 암시 적으로 변환 할 수 없으며 다른 네 가지 범주에서 암시 적으로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18a339f4bc94136e209672e86712fa4b5c74a67e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::strstreambuf&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; whose associated character sequence is a character array, which may be constant (e.g. a string literal), modifyable but not dynamic (e.g. a stack-allocated array), or dynamic, in which case the &lt;code&gt;std::strstreambuf&lt;/code&gt; may be allowed to reallocate the array as necessary to accomodate output (e.g. by calling &lt;code&gt;delete[]&lt;/code&gt; and &lt;code&gt;new[]&lt;/code&gt; or user-provided functions).</source>
          <target state="translated">&lt;code&gt;std::strstreambuf&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 이며, 연관된 문자 순서는 문자 배열이며, 상수 (예 : 문자열 리터럴), 수정 가능하지만 동적이지만 (예 : 스택 할당 배열) 동적 일 수 있습니다. &lt;code&gt;std::strstreambuf&lt;/code&gt; 는 출력을 수용하기 위해 필요에 따라 배열을 재 할당 할 수 있습니다 (예 : &lt;code&gt;delete[]&lt;/code&gt; 및 &lt;code&gt;new[]&lt;/code&gt; 또는 사용자 제공 함수 호출).</target>
        </trans-unit>
        <trans-unit id="20b1262a3ef1cef77b3b6dd08e920d63edd3d503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::student_t_distribution&lt;/code&gt; satisfies all requirements of &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::student_t_distribution&lt;/code&gt; 은 &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution의&lt;/a&gt; 모든 요구 사항을 충족 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="d1a1bd7eb4ef8c03ea4109507696644c4ffb2d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::sub_match&lt;/code&gt; and &lt;code&gt;std::basic_string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::sub_match&lt;/code&gt; 및 &lt;code&gt;std::basic_string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a5b5ab885216f8f5912119ae5ca87c8090e2875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::sub_match&lt;/code&gt; and &lt;code&gt;std::iterator_traits&amp;lt;BidirIt&amp;gt;::value_type*&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::sub_match&lt;/code&gt; 및 &lt;code&gt;std::iterator_traits&amp;lt;BidirIt&amp;gt;::value_type*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff93371d4eb96a58db4fdb372bc81e5853b46bb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::sub_match&lt;/code&gt; and &lt;code&gt;std::iterator_traits&amp;lt;BidirIt&amp;gt;::value_type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::sub_match&lt;/code&gt; 및 &lt;code&gt;std::iterator_traits&amp;lt;BidirIt&amp;gt;::value_type&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba31ca36a3af295296b1e09f75fa13408fe38921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::swap&lt;/code&gt; may be &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/extending_std&quot;&gt;specialized in namespace std&lt;/a&gt; for program-defined types, but such specializations are not found by &lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt; (the namespace std is not the associated namespace for the program-defined type).</source>
          <target state="translated">&lt;code&gt;std::swap&lt;/code&gt; 은 프로그램 정의 유형의 &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/extending_std&quot;&gt;네임 스페이스 std&lt;/a&gt; 로 특수화 될 수 있지만 이러한 전문화는 &lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt; 에서 찾을 수 없습니다 (네임 스페이스 std는 프로그램 정의 유형의 연관된 네임 스페이스가 아닙니다).</target>
        </trans-unit>
        <trans-unit id="3cdfd51faa9c8fac8ac4c8f19556e6aaf7087b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::system_error&lt;/code&gt; is the type of the exception thrown by various library functions (typically the functions that interface with the OS facilities, e.g. the constructor of &lt;code&gt;&lt;a href=&quot;../thread/thread&quot;&gt;std::thread&lt;/a&gt;&lt;/code&gt;) when the exception has an associated &lt;code&gt;&lt;a href=&quot;error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt;, which may be reported.</source>
          <target state="translated">&lt;code&gt;std::system_error&lt;/code&gt; 다양한 라이브러리 함수에서 예외 처리 타입이다 (일반적 기능 그 OS 설비의 예 생성자 인터페이스 &lt;code&gt;&lt;a href=&quot;../thread/thread&quot;&gt;std::thread&lt;/a&gt;&lt;/code&gt; ) 예외가 연관 지어 &lt;code&gt;&lt;a href=&quot;error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; 보고 될 수있다 .</target>
        </trans-unit>
        <trans-unit id="9b97e66f36eaf86ebef226240b01fec6a5931292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::terminate()&lt;/code&gt; is called by the C++ runtime when exception handling fails for any of the following reasons:</source>
          <target state="translated">&lt;code&gt;std::terminate()&lt;/code&gt; 는 다음과 같은 이유로 예외 처리가 실패 할 때 C ++ 런타임에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="707766d49466f7eb486764ecef0242827a563761" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::terminate()&lt;/code&gt; may also be called directly from the program.</source>
          <target state="translated">&lt;code&gt;std::terminate()&lt;/code&gt; 는 프로그램에서 직접 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="967f01400b555a0590b6a06e03c381f0be0d2748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::terminate_handler&lt;/code&gt; is the function pointer type (pointer to function that takes no arguments and returns void), which is installed and queried by the functions &lt;code&gt;&lt;a href=&quot;set_terminate&quot;&gt;std::set_terminate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_terminate&quot;&gt;std::get_terminate&lt;/a&gt;&lt;/code&gt; and called by &lt;code&gt;&lt;a href=&quot;terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::terminate_handler&lt;/code&gt; 는 함수 포인터 유형 (인수를 취하지 않고 void를 리턴하는 함수를 가리키는 포인터)이며 &lt;code&gt;&lt;a href=&quot;set_terminate&quot;&gt;std::set_terminate&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;get_terminate&quot;&gt;std::get_terminate&lt;/a&gt;&lt;/code&gt; 함수에 의해 설치 및 조회 되며 &lt;code&gt;&lt;a href=&quot;terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 의해 호출 됩니다 .</target>
        </trans-unit>
        <trans-unit id="13cc468c9dc5514d2fac80612f05a11f45487235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::thread&lt;/code&gt; objects may also be in the state that does not represent any thread (after default construction, move from, &lt;code&gt;&lt;a href=&quot;thread/detach&quot;&gt;detach&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;thread/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;), and a thread of execution may be not associated with any &lt;code&gt;thread&lt;/code&gt; objects (after &lt;code&gt;&lt;a href=&quot;thread/detach&quot;&gt;detach&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;std::thread&lt;/code&gt; 오브젝트는 스레드 를 나타내지 않는 상태 (기본 구성 후, 이동, &lt;code&gt;&lt;a href=&quot;thread/detach&quot;&gt;detach&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;thread/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; )가 될 수 있으며 실행 스레드는 &lt;code&gt;thread&lt;/code&gt; 오브젝트 와 &lt;code&gt;&lt;a href=&quot;thread/detach&quot;&gt;detach&lt;/a&gt;&lt;/code&gt; 되지 않을 수 있습니다 ( detach 후 ).</target>
        </trans-unit>
        <trans-unit id="9efd773c6198d21cd58d5624e73cb6260c84320b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::tie&lt;/code&gt; can be used to introduce lexicographical comparison to a struct or to unpack a tuple:</source>
          <target state="translated">&lt;code&gt;std::tie&lt;/code&gt; 는 구조체에 사전 사전을 도입하거나 튜플의 압축을 푸는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d306d0d73a611a68233912abbfd10d0645a66545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::tie&lt;/code&gt; may be used to unpack a &lt;code&gt;&lt;a href=&quot;../pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; because &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; has a &lt;a href=&quot;operator=&quot;&gt;converting assignment&lt;/a&gt; from pairs:</source>
          <target state="translated">&lt;code&gt;std::tie&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; 에는 쌍에서 &lt;a href=&quot;operator=&quot;&gt;변환 할당&lt;/a&gt; 이 있기 때문에 std :: tie를 사용하여 &lt;code&gt;&lt;a href=&quot;../pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; 압축을 풀 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="afe708861136a7c969234dc59c3e1714fbac45b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::time_get_byname&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; facet which encapsulates time and date parsing rules of the locale specified at its construction.</source>
          <target state="translated">&lt;code&gt;std::time_get_byname&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; 패싯으로, 구성시 지정된 로케일의 시간 및 날짜 구문 분석 규칙을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="7c370603c900e9e11ba920686444d55c087581b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::time_put_byname&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; facet which encapsulates time and date formatting rules of the locale specified at its construction.</source>
          <target state="translated">&lt;code&gt;std::time_put_byname&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; 패싯으로, 구성시 지정된 로케일의 시간 및 날짜 형식화 규칙을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="168ace59259188176403e2196b7d0ba75671c5a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::tmpnam&lt;/code&gt; modifies static state and is not required to be thread-safe.</source>
          <target state="translated">&lt;code&gt;std::tmpnam&lt;/code&gt; 은 정적 상태를 수정하며 스레드로부터 안전하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="dedb51abfca7405582b2d0f7f2e6c3a75a98b2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::to_address&lt;/code&gt; can be used even when &lt;code&gt;p&lt;/code&gt; does not reference storage that has an object constructed in it, in which case &lt;code&gt;&lt;a href=&quot;addressof&quot;&gt;std::addressof&lt;/a&gt;(*p)&lt;/code&gt; cannot be used because there's no valid object for the parameter of &lt;code&gt;&lt;a href=&quot;addressof&quot;&gt;std::addressof&lt;/a&gt;&lt;/code&gt; to bind to.</source>
          <target state="translated">&lt;code&gt;std::to_address&lt;/code&gt; 경우에도 사용할 수 &lt;code&gt;p&lt;/code&gt; 는 경우가있는 것이 구성된 객체 갖는다 기준 저장하지 않는 &lt;code&gt;&lt;a href=&quot;addressof&quot;&gt;std::addressof&lt;/a&gt;(*p)&lt;/code&gt; 의 파라미터에 대한 유효 물체가 없기 때문에 사용할 수없는 &lt;code&gt;&lt;a href=&quot;addressof&quot;&gt;std::addressof&lt;/a&gt;&lt;/code&gt; 행을 에 바인딩하십시오.</target>
        </trans-unit>
        <trans-unit id="b46c993ce36788048b268c1696eb73f8b98374f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::to_chars&lt;/code&gt; and &lt;code&gt;std::from_chars&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::to_chars&lt;/code&gt; &lt;code&gt;std::from_chars&lt;/code&gt; 및 std :: from_chars</target>
        </trans-unit>
        <trans-unit id="a9cd7760eccc84b707a50eaebab892d1d3e5f509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::to_string&lt;/code&gt; relies on the current locale for formatting purposes, and therefore concurrent calls to &lt;code&gt;std::to_string&lt;/code&gt; from multiple threads may result in partial serialization of calls. C++17 provides &lt;a href=&quot;../../utility/to_chars&quot;&gt;&lt;code&gt;std::to_chars&lt;/code&gt;&lt;/a&gt; as a higher-performance locale-independent alternative.</source>
          <target state="translated">&lt;code&gt;std::to_string&lt;/code&gt; 은 형식화를 위해 현재 로케일에 의존하므로 여러 스레드에서 &lt;code&gt;std::to_string&lt;/code&gt; 을 동시에 호출하면 호출이 부분적으로 직렬화 될 수 있습니다. C ++ 17은 &lt;a href=&quot;../../utility/to_chars&quot;&gt; &lt;code&gt;std::to_chars&lt;/code&gt; &lt;/a&gt; 를 고성능 로케일 독립적 대안으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="be1a0d836b90531682a592a8c05709e53004c149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::transform&lt;/code&gt; applies the given function to a range and stores the result in another range, beginning at &lt;code&gt;d_first&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::transform&lt;/code&gt; 은 주어진 함수를 범위에 적용하고 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하여 다른 범위에 결과를 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="c6cd4e102829d3895559858e0d9124b27ca438a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::transform&lt;/code&gt; does not guarantee in-order application of &lt;code&gt;unary_op&lt;/code&gt; or &lt;code&gt;binary_op&lt;/code&gt;. To apply a function to a sequence in-order or to apply a function that modifies the elements of a sequence, use &lt;code&gt;&lt;a href=&quot;for_each&quot;&gt;std::for_each&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::transform&lt;/code&gt; 은 &lt;code&gt;unary_op&lt;/code&gt; 또는 &lt;code&gt;binary_op&lt;/code&gt; 의 순 서적 적용을 보장하지 않습니다 . 시퀀스에 순서대로 함수를 적용하거나 시퀀스의 요소를 수정하는 함수를 적용하려면 &lt;code&gt;&lt;a href=&quot;for_each&quot;&gt;std::for_each&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="369cbe5d59701bacdbac57d4ffbdb1d3005d5fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::u16string&lt;/code&gt;(C++11)</source>
          <target state="translated">&lt;code&gt;std::u16string&lt;/code&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="5c664f67d51845abae95b5f4eff5530a5e4e852d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::u32string&lt;/code&gt;(C++11)</source>
          <target state="translated">&lt;code&gt;std::u32string&lt;/code&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="d018d8459afcf08b3a64d2e43507143d97d66702" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::u8string&lt;/code&gt;(C++20)</source>
          <target state="translated">&lt;code&gt;std::u8string&lt;/code&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="8db402252e2247e1115923d033d3fdbc01c24ffa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::u8string&lt;/code&gt;(since C++20)</source>
          <target state="translated">&lt;code&gt;std::u8string&lt;/code&gt; (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="28dc2a65207cfa538de9d0d3c83868d7291c3a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::u8string_view&lt;/code&gt;(since C++20)</source>
          <target state="translated">&lt;code&gt;std::u8string_view&lt;/code&gt; (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="fc05d3bc1c5239c2cb1fa3a05f95d7b3bcb6d04a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unexpected()&lt;/code&gt; is called by the C++ runtime when a &lt;a href=&quot;../../language/except_spec&quot;&gt;dynamic exception specification&lt;/a&gt; is violated: an exception is thrown from a function whose exception specification forbids exceptions of this type.</source>
          <target state="translated">&lt;code&gt;std::unexpected()&lt;/code&gt; 는 &lt;a href=&quot;../../language/except_spec&quot;&gt;동적 예외 사양&lt;/a&gt; 이 위반 될 때 C ++ 런타임에 의해 호출됩니다. 예외 사양이이 유형의 예외를 금지하는 함수에서 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f92d15dc42ce35ff57483e797d7c8f8b1f9636b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unexpected()&lt;/code&gt; may also be called directly from the program.</source>
          <target state="translated">&lt;code&gt;std::unexpected()&lt;/code&gt; 도 프로그램에서 직접 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43b8f5b3528d14822224152dd25f600ede9e7c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unexpected_handler&lt;/code&gt; is the function pointer type (pointer to function that takes no arguments and returns void), which is installed and queried by the functions &lt;code&gt;&lt;a href=&quot;set_unexpected&quot;&gt;std::set_unexpected&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_unexpected&quot;&gt;std::get_unexpected&lt;/a&gt;&lt;/code&gt; and called by &lt;code&gt;&lt;a href=&quot;unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::unexpected_handler&lt;/code&gt; 는 함수 포인터 유형 (인수를 취하지 않고 void를 리턴하는 함수를 가리키는 포인터)이며 &lt;code&gt;&lt;a href=&quot;set_unexpected&quot;&gt;std::set_unexpected&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;get_unexpected&quot;&gt;std::get_unexpected&lt;/a&gt;&lt;/code&gt; 함수에 의해 설치 및 조회 되며 &lt;code&gt;&lt;a href=&quot;unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt; 의해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="749f7fda0e2e18379142e674b99f477616d0b136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::uniform_int_distribution&lt;/code&gt; satisfies all requirements of &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::uniform_int_distribution&lt;/code&gt; 은 &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution의&lt;/a&gt; 모든 요구 사항을 충족 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="c444092291162ae7558c84afd48c45cb9322484f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::uniform_real_distribution&lt;/code&gt; satisfies all requirements of &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::uniform_real_distribution&lt;/code&gt; 은 &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution의&lt;/a&gt; 모든 요구 사항을 충족 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="eb35955ee270e54b7c81eaa739704d3de5f1583a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unique_ptr&lt;/code&gt; is a smart pointer that owns and manages another object through a pointer and disposes of that object when the &lt;code&gt;unique_ptr&lt;/code&gt; goes out of scope.</source>
          <target state="translated">&lt;code&gt;std::unique_ptr&lt;/code&gt; 은 포인터를 통해 다른 객체를 소유하고 관리하고 &lt;code&gt;unique_ptr&lt;/code&gt; 이 범위를 벗어날 때 해당 객체를 처리하는 스마트 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="58e8a960823be282cfdc5e0d6c9be212b22d9797" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unique_ptr&lt;/code&gt; is commonly used to manage the lifetime of objects, including:</source>
          <target state="translated">&lt;code&gt;std::unique_ptr&lt;/code&gt; 은 일반적으로 다음을 포함하여 객체의 수명을 관리하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e307c436ff83a7f2f77edf798287d471ee601de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unique_ptr&lt;/code&gt; may be constructed for an &lt;a href=&quot;../language/incomplete_type&quot;&gt;incomplete type&lt;/a&gt;&lt;code&gt;T&lt;/code&gt;, such as to facilitate the use as a handle in the &lt;a href=&quot;../language/pimpl&quot;&gt;pImpl idiom&lt;/a&gt;. If the default deleter is used, &lt;code&gt;T&lt;/code&gt; must be complete at the point in code where the deleter is invoked, which happens in the destructor, move assignment operator, and &lt;code&gt;reset&lt;/code&gt; member function of &lt;code&gt;std::unique_ptr&lt;/code&gt;. (Conversely, &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; can't be constructed from a raw pointer to incomplete type, but can be destroyed where &lt;code&gt;T&lt;/code&gt; is incomplete). Note that if &lt;code&gt;T&lt;/code&gt; is a class template specialization, use of &lt;code&gt;unique_ptr&lt;/code&gt; as an operand, e.g. &lt;code&gt;!p&lt;/code&gt; requires &lt;code&gt;T&lt;/code&gt;'s parameters to be complete due to &lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::unique_ptr&lt;/code&gt; 은 &lt;a href=&quot;../language/pimpl&quot;&gt;pImpl 관용구&lt;/a&gt; 에서 핸들로 사용하기 쉽도록 &lt;a href=&quot;../language/incomplete_type&quot;&gt;불완전한 유형 &lt;/a&gt; &lt;code&gt;T&lt;/code&gt; 에 대해 구성 될 수 있습니다 . 기본 삭제자를 사용 하는 경우 소멸자에서 발생하는 삭제자가 호출 된 코드 포인트에서 &lt;code&gt;T&lt;/code&gt; 가 완료되어야합니다. 이는 소멸자에서 할당 연산자를 이동하고 &lt;code&gt;std::unique_ptr&lt;/code&gt; 의 멤버 함수를 &lt;code&gt;reset&lt;/code&gt; 합니다. 반대로, &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 은 원시 포인터에서 불완전한 유형으로 구성 할 수 없지만 &lt;code&gt;T&lt;/code&gt; 가 불완전한 경우 파괴 될 수 있습니다 . &lt;code&gt;T&lt;/code&gt; 가 클래스 템플릿 전문화 되는 경우 &lt;code&gt;unique_ptr&lt;/code&gt; 을 피연산자로 사용합니다 (예 : &lt;code&gt;!p&lt;/code&gt; 필요 &lt;code&gt;T&lt;/code&gt; 완전한 인해 수의 매개 변수를 &lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5079e3d431da34e17f51ffaa54dd7ef2654096f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_map&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::unordered_map&lt;/code&gt; 은 &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; , &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt; , &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt; 의 요구 사항을 충족합니다 .</target>
        </trans-unit>
        <trans-unit id="3daecff2774ca781da783cafc7f153a374109626" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_multimap&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::unordered_multimap&lt;/code&gt; 은 &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; , &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt; , &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderAssociativeContainer&lt;/a&gt; 의 요구 사항을 충족합니다 .</target>
        </trans-unit>
        <trans-unit id="58f19508666532022fef13bc38392999c400ffc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_multiset&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::unordered_multiset&lt;/code&gt; 은 &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; , &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt; , &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderAssociativeContainer&lt;/a&gt; 의 요구 사항을 충족합니다 .</target>
        </trans-unit>
        <trans-unit id="ca370fc8c24a3e12bcb4e3d8d92db80276664014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_set&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::unordered_set&lt;/code&gt; 은 &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; , &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt; , &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt; 의 요구 사항을 충족합니다 .</target>
        </trans-unit>
        <trans-unit id="040602002425ccc8f281fedb7657336bbbd830b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unwrap_ref_decay&lt;/code&gt; performs the same transformation as used by &lt;code&gt;&lt;a href=&quot;../pair/make_pair&quot;&gt;std::make_pair&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../tuple/make_tuple&quot;&gt;std::make_tuple&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::unwrap_ref_decay&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../pair/make_pair&quot;&gt;std::make_pair&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../tuple/make_tuple&quot;&gt;std::make_tuple&lt;/a&gt;&lt;/code&gt; 과 동일한 변환을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="b8db3a9ed4cca1914878705608c3f4ee37d3ab72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::valarray&lt;/code&gt; and helper classes are defined to be free of certain forms of aliasing, thus allowing operations on these classes to be optimized similar to the effect of the keyword &lt;a href=&quot;http://en.cppreference.com/w/c/language/restrict.html&quot;&gt;restrict&lt;/a&gt; in the C programming language. In addition, functions and operators that take &lt;code&gt;valarray&lt;/code&gt; arguments are allowed to return proxy objects to make it possible for the compiler to optimize an expression such as &lt;code&gt;v1 = a*v2 + v3;&lt;/code&gt; as a single loop that executes &lt;code&gt;v1[i] = a*v2[i] + v3[i];&lt;/code&gt; avoiding any temporaries or multiple passes. However, &lt;a href=&quot;https://en.wikipedia.org/wiki/Expression_templates&quot;&gt;expression templates&lt;/a&gt; make the same optimization technique available for any C++ container, and the majority of numeric libraries prefer expression templates to valarrays for flexibility. Some C++ standard library implementations use expression templates to implement efficient operations on &lt;code&gt;std::valarray&lt;/code&gt; (e.g. GNU libstdc++ and LLVM libc++). Only rarely are valarrays optimized any further, as in e.g. &lt;a href=&quot;https://software.intel.com/en-us/node/684140&quot;&gt;Intel Integrated Performance Primitives&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::valarray&lt;/code&gt; 및 helper 클래스에는 특정 형태의 앨리어싱이없는 것으로 정의되므로 C 프로그래밍 언어에서 키워드 &lt;a href=&quot;http://en.cppreference.com/w/c/language/restrict.html&quot;&gt;제한&lt;/a&gt; 의 효과와 유사하게 이러한 클래스의 작업을 최적화 할 수 있습니다. 또한, &lt;code&gt;valarray&lt;/code&gt; 인수를 사용 하는 함수와 연산자는 프록시 객체를 반환하여 컴파일러가 &lt;code&gt;v1 = a*v2 + v3;&lt;/code&gt; 과 같은 표현식을 최적화 할 수 있도록합니다 . &lt;code&gt;v1[i] = a*v2[i] + v3[i];&lt;/code&gt; 를 실행하는 단일 루프로서 ; 임시 또는 여러 패스를 피하십시오. 그러나 &lt;a href=&quot;https://en.wikipedia.org/wiki/Expression_templates&quot;&gt;표현식 템플릿&lt;/a&gt;모든 C ++ 컨테이너에 동일한 최적화 기술을 사용할 수 있으며 대부분의 숫자 라이브러리는 유연성을 위해 표현 템플릿을 valarray보다 선호합니다. 일부 C ++ 표준 라이브러리 구현에서는 식 템플릿을 사용하여 &lt;code&gt;std::valarray&lt;/code&gt; (예 : GNU libstdc ++ 및 LLVM libc ++) 에서 효율적인 작업을 구현합니다 . 예를 들어 &lt;a href=&quot;https://software.intel.com/en-us/node/684140&quot;&gt;인텔 통합 성능 프리미티브 (Integrated Performance Primitives)&lt;/a&gt; 에서와 같이 발라 레이가 더 이상 최적화되는 경우는 거의 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b20d004774c851fdc0796598dc359ee1dd1fac93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::valarray&lt;/code&gt; is the class for representing and manipulating arrays of values. It supports element-wise mathematical operations and various forms of generalized subscript operators, slicing and indirect access.</source>
          <target state="translated">&lt;code&gt;std::valarray&lt;/code&gt; 는 값 배열을 나타내고 조작하기위한 클래스입니다. 요소 별 수학 연산과 다양한 형태의 일반화 된 첨자 연산자, 슬라이싱 및 간접 액세스를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="66a79f67afe03ecaf3481e25bf09fad7741f31c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::vector&lt;/code&gt; (for &lt;code&gt;T&lt;/code&gt; other than &lt;code&gt;bool&lt;/code&gt;) meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/sequencecontainer&quot;&gt;SequenceContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/contiguouscontainer&quot;&gt;ContiguousContainer&lt;/a&gt;(since C++17) and &lt;a href=&quot;../named_req/reversiblecontainer&quot;&gt;ReversibleContainer&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::vector&lt;/code&gt; ( &lt;code&gt;bool&lt;/code&gt; 이외의 &lt;code&gt;T&lt;/code&gt; 의 경우 )는 &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; , &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt; , &lt;a href=&quot;../named_req/sequencecontainer&quot;&gt;SequenceContainer&lt;/a&gt; , &lt;a href=&quot;../named_req/contiguouscontainer&quot;&gt;ContiguousContainer&lt;/a&gt; (C ++ 17부터) 및 &lt;a href=&quot;../named_req/reversiblecontainer&quot;&gt;ReversibleContainer&lt;/a&gt; 의 요구 사항을 충족합니다 .</target>
        </trans-unit>
        <trans-unit id="e68dae847aabbd16cd93d3f879e7971cdf10e709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wbuffer_convert&lt;/code&gt; is a wrapper over stream buffer of type &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; which gives it the appearance of &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&amp;lt;Elem&amp;gt;&lt;/code&gt;. All I/O performed through &lt;code&gt;std::wbuffer_convert&lt;/code&gt; undergoes character conversion as defined by the facet &lt;code&gt;Codecvt&lt;/code&gt;. &lt;code&gt;std::wbuffer_convert&lt;/code&gt; assumes ownership of the conversion facet, and cannot use a facet managed by a locale. The standard facets suitable for use with &lt;code&gt;std::wbuffer_convert&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt; for UTF-8/UCS2 and UTF-8/UCS4 conversions and &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; for UTF-8/UTF-16 conversions.</source>
          <target state="translated">&lt;code&gt;std::wbuffer_convert&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 유형의 스트림 버퍼에 대한 랩퍼 이며 &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&amp;lt;Elem&amp;gt;&lt;/code&gt; 의 모양을 제공합니다 . &lt;code&gt;std::wbuffer_convert&lt;/code&gt; 를 통해 수행 된 모든 I / O 는 패싯 &lt;code&gt;Codecvt&lt;/code&gt; 에 정의 된대로 문자 변환을 거칩니다 . &lt;code&gt;std::wbuffer_convert&lt;/code&gt; 는 변환 패싯의 소유권을 가정하며 로케일이 관리하는 패싯을 사용할 수 없습니다. 사용하기에 적합 표준 측면 &lt;code&gt;std::wbuffer_convert&lt;/code&gt; 있습니다 &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt; UTF-8 / UCS2 및 UTF-8 / UCS4 변환 및 대한 &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; UTF-8 / UTF-16 변환에.</target>
        </trans-unit>
        <trans-unit id="aa98bfc69be64ea7f590ca3281f0a779c81d2441" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wctrans_t&lt;/code&gt; object suitable for use with &lt;code&gt;&lt;a href=&quot;towctrans&quot;&gt;std::towctrans&lt;/a&gt;&lt;/code&gt; to map wide characters according to the named mapping of the current C locale or zero if &lt;code&gt;str&lt;/code&gt; does not name a mapping supported by the current C locale.</source>
          <target state="translated">&lt;code&gt;std::wctrans_t&lt;/code&gt; 오브젝트는 &lt;code&gt;&lt;a href=&quot;towctrans&quot;&gt;std::towctrans&lt;/a&gt;&lt;/code&gt; 와 함께 사용 하여 현재 C 로케일의 이름 지정된 맵핑에 따라 넓은 문자를 맵핑하거나 &lt;code&gt;str&lt;/code&gt; 이 현재 C 로케일이 지원하는 맵핑의 이름을 지정하지 않으면 0 입니다.</target>
        </trans-unit>
        <trans-unit id="ee24a8db61effffbf5bb45fcf3ddb9dfa64496df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wctype_t&lt;/code&gt; object suitable for use with &lt;code&gt;&lt;a href=&quot;iswctype&quot;&gt;std::iswctype&lt;/a&gt;&lt;/code&gt; to classify wide characters according to the named category of the current C locale or zero if &lt;code&gt;str&lt;/code&gt; does not name a category supported by the current C locale.</source>
          <target state="translated">&lt;code&gt;std::wctype_t&lt;/code&gt; 객체는 &lt;code&gt;&lt;a href=&quot;iswctype&quot;&gt;std::iswctype&lt;/a&gt;&lt;/code&gt; 과 함께 사용 하여 현재 C 로캘의 명명 된 범주에 따라 넓은 문자를 분류하거나 &lt;code&gt;str&lt;/code&gt; 이 현재 C 로캘이 지원하는 범주의 이름을 지정하지 않으면 0 입니다.</target>
        </trans-unit>
        <trans-unit id="1864ac005fcbd2a93ddb1571e43e44be4412c438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equal&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 인 &lt;code&gt;equal&lt;/code&gt; 또는 &lt;code&gt;equivalent&lt;/code&gt; , &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이고 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b77f56bda7b2c39003f6704ac1a7716aeb8c07cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;nonequivalent&lt;/code&gt; or &lt;code&gt;nonequal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 있다 &lt;code&gt;equivalent&lt;/code&gt; 또는 &lt;code&gt;equal&lt;/code&gt; , &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이다 &lt;code&gt;nonequivalent&lt;/code&gt; 또는 &lt;code&gt;nonequal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="85c506eefc85ae85f48bf0f4fc2f5830f0001145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; , &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 있습니다 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3804df5f9a847e123ce8343bff6e9097fc73071b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;greater&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; , &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;less&lt;/code&gt; , &lt;code&gt;greater&lt;/code&gt; , 또는 &lt;code&gt;unordered&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ac1453ccae0097d87ebcd87f032b12287e72982" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality&lt;/code&gt; is the weakest comparison category type: it is not implicitly-convertible to any other comparison category, but the other four comparison categories (&lt;code&gt;std::strong_equality&lt;/code&gt;, &lt;code&gt;std::partial_ordering&lt;/code&gt;, &lt;code&gt;std::weak_ordering&lt;/code&gt;, &lt;code&gt;std::strong_ordering&lt;/code&gt;) are implicitly-convertible to &lt;code&gt;std::weak_equality&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_equality&lt;/code&gt; 는 가장 약한 비교 범주 유형입니다. 다른 비교 범주로 암시 적으로 변환 할 수 없지만 다른 네 가지 비교 범주 ( &lt;code&gt;std::strong_equality&lt;/code&gt; , &lt;code&gt;std::partial_ordering&lt;/code&gt; , &lt;code&gt;std::weak_ordering&lt;/code&gt; , &lt;code&gt;std::strong_ordering&lt;/code&gt; ) &lt;code&gt;std::weak_equality&lt;/code&gt; 로 암시 적으로 변환 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="d9943353a2fae41e6e01e739d2c063eec3fad775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ordering::less&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;std::weak_ordering::greater&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;std::weak_ordering::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equal&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_ordering::less&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 있다 &lt;code&gt;less&lt;/code&gt; , &lt;code&gt;std::weak_ordering::greater&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 인 &lt;code&gt;greater&lt;/code&gt; , &lt;code&gt;std::weak_ordering::equivalent&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 인 &lt;code&gt;equal&lt;/code&gt; 또는 &lt;code&gt;equivalent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9aa4827d40c046df632eebcc4aaf27a23a99c366" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ordering&lt;/code&gt; is implicitly-convertible to &lt;code&gt;std::weak_equality&lt;/code&gt; and &lt;code&gt;std::partial_ordering&lt;/code&gt;, while &lt;code&gt;std::strong_ordering&lt;/code&gt; is implicitly-convertible to &lt;code&gt;weak_ordering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::weak_ordering&lt;/code&gt; 암시 적-컨버터블이다 &lt;code&gt;std::weak_equality&lt;/code&gt; 및 &lt;code&gt;std::partial_ordering&lt;/code&gt; , 동안 &lt;code&gt;std::strong_ordering&lt;/code&gt; 암시 적으로 변환 가능하다 &lt;code&gt;weak_ordering&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ed6ce6014df72db0fd24242c93b9ed9e7cb3aec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ptr&lt;/code&gt; is a smart pointer that holds a non-owning (&quot;weak&quot;) reference to an object that is managed by &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;. It must be converted to &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; in order to access the referenced object.</source>
          <target state="translated">&lt;code&gt;std::weak_ptr&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 의해 관리되는 오브젝트에 대한 비 소유 ( &quot;약한&quot;) 참조를 보유하는 스마트 포인터입니다 . 참조 된 오브젝트에 액세스하려면 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 로 변환해야 합니다.</target>
        </trans-unit>
        <trans-unit id="20112f6fadc4cc459253cb7dc0888944be0042a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ptr&lt;/code&gt; models temporary ownership: when an object needs to be accessed only if it exists, and it may be deleted at any time by someone else, &lt;code&gt;std::weak_ptr&lt;/code&gt; is used to track the object, and it is converted to &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; to assume temporary ownership. If the original &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; is destroyed at this time, the object's lifetime is extended until the temporary &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; is destroyed as well.</source>
          <target state="translated">&lt;code&gt;std::weak_ptr&lt;/code&gt; 은 임시 소유권을 모델링합니다. 개체가 존재하는 경우에만 개체에 액세스해야하고 다른 사람이 언제든지 삭제할 수있는 경우 &lt;code&gt;std::weak_ptr&lt;/code&gt; 은 개체를 추적하는 데 사용되며 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 로 변환됩니다 . : shared_ptr 은 임시 소유권을 가정합니다. 이때 원래 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 이 소멸되면 임시 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 도 소멸 될 때까지 오브젝트의 수명이 연장 됩니다.</target>
        </trans-unit>
        <trans-unit id="bb6353c433bc54cd97c2fc1bfe2d4c98a8b7060b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weibull_distribution&lt;/code&gt; satisfies &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;std::weibull_distribution&lt;/code&gt; 은 RandomNumberDistribution을 충족 &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;시킵니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="84e91f7a19bd8ff768f38ce1406082b15581be4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wint_t&lt;/code&gt; is also defined in the following headers:</source>
          <target state="translated">&lt;code&gt;std::wint_t&lt;/code&gt; 는 다음 헤더에도 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7adc953ee7471ea5c0f9a9b8a59866a1d47329a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; (reference to the stream after manipulation).</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; (조작 후 스트림 참조).</target>
        </trans-unit>
        <trans-unit id="6ca1b1119f74c8027d6a698cddd2f8621287cabd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; on an error.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 성공시 str , 에러시 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8465c65bcc1337f8b180748b84ca0fcba853f24f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 성공시 str , 실패시 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f91a44d85f3bcd9436fc7535a5fe94b3b849eb2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; on success, null pointer on failure.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 성공시 str , 실패시 null 포인터.</target>
        </trans-unit>
        <trans-unit id="21622e3910fb74b6ee7ee52d4f92044495f1db4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 성공시 스트림 , 실패시 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eee64be3381662ff0f135c2138d9a8a8326cb5cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamoff&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;streamoff&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="084c321dc9490f55a8140c401932094a4b1f37d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streampos&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;streampos&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="429d6494a5962b61408966f06074e9d5accf58c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string_view&lt;/code&gt; overload causes ambiguity in some cases</source>
          <target state="translated">&lt;code&gt;string_view&lt;/code&gt; 과부하로 인해 모호함</target>
        </trans-unit>
        <trans-unit id="37d147c625f9c05ae1ae1cdc4935ea2e562430c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strstream&lt;/code&gt; has been deprecated since C++98, &lt;code&gt;&lt;a href=&quot;basic_stringstream&quot;&gt;std::stringstream&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/iostreams/doc/classes/array.html#array&quot;&gt;boost::iostreams::array&lt;/a&gt; are the recommended replacements.</source>
          <target state="translated">&lt;code&gt;strstream&lt;/code&gt; C ++ 98부터 strstream 은 더 이상 사용되지 않습니다. &lt;code&gt;&lt;a href=&quot;basic_stringstream&quot;&gt;std::stringstream&lt;/a&gt;&lt;/code&gt; 및 &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/iostreams/doc/classes/array.html#array&quot;&gt;boost :: iostreams :: array&lt;/a&gt; 가 권장되는 대체입니다.</target>
        </trans-unit>
        <trans-unit id="59a4bdd437227db5db98fe353e155610819fc8c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strstream&lt;/code&gt; has been deprecated since C++98, &lt;code&gt;&lt;a href=&quot;basic_stringstream&quot;&gt;std::stringstream&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;https://www.boost.org/doc/libs/release/libs/iostreams/doc/classes/array.html#array&quot;&gt;boost::iostreams::array&lt;/a&gt; are the recommended replacements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25aeda6590fba592dce6baae63ea15f2c4d06097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sub_match&lt;/code&gt; inherits from &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;BidirIt, BidirIt&amp;gt;&lt;/code&gt;, although it cannot be treated as a &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; object because member functions such as swap and assignment will not work as expected.</source>
          <target state="translated">&lt;code&gt;sub_match&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;BidirIt, BidirIt&amp;gt;&lt;/code&gt; 에서 상속 하지만 스왑 및 할당과 같은 멤버 함수는 예상대로 작동하지 않으므로 &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; 객체 로 처리 할 수 ​​없습니다 .</target>
        </trans-unit>
        <trans-unit id="7b1b70d5d87abfd9b6383734974030d74b7355ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subseconds()&lt;/code&gt; returns the integral number of fractional seconds &lt;code&gt;since_midnight&lt;/code&gt; is after &lt;code&gt;(00:00:00 + hours() + minutes() + seconds())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subseconds()&lt;/code&gt; 는 &lt;code&gt;since_midnight&lt;/code&gt; 가 &lt;code&gt;(00:00:00 + hours() + minutes() + seconds())&lt;/code&gt; 이후 의 분수 초의 정수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="bd3b6a00f8223f337fd1e49dff2412160c541b3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subtract_with_carry_engine&lt;/code&gt; is a random number engine that uses &lt;a href=&quot;https://en.wikipedia.org/wiki/subtract_with_carry&quot;&gt;subtract with carry&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;subtract_with_carry_engine&lt;/code&gt; 은 &lt;a href=&quot;https://en.wikipedia.org/wiki/subtract_with_carry&quot;&gt;캐리&lt;/a&gt; 알고리즘 과 함께 빼기 를 사용하는 난수 엔진입니다 .</target>
        </trans-unit>
        <trans-unit id="4af73ccbde7fe6b4935d451d20bedd896acc9824" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="93f0e9b4c17c3584eca8f331f5237ce885f1fe70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync()&lt;/code&gt; or its equivalent is implicitly called by &lt;code&gt;close()&lt;/code&gt;, &lt;code&gt;seekoff()&lt;/code&gt;, and &lt;code&gt;seekpos()&lt;/code&gt; and explicitly called by &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;std::basic_streambuf::pubsync()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sync()&lt;/code&gt; 또는 동등한 항목은 &lt;code&gt;close()&lt;/code&gt; , &lt;code&gt;seekoff()&lt;/code&gt; 및 &lt;code&gt;seekpos()&lt;/code&gt; 의해 내재적 으로 호출되며 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;std::basic_streambuf::pubsync()&lt;/a&gt;&lt;/code&gt; 의해 명시 적으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="679a3e4e6d2bfb15eb2d8b5c5738cb4f6396cdfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync()&lt;/code&gt; or its equivalent is implicitly called for output streams by &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubseekoff&quot;&gt;seekoff()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubseekpos&quot;&gt;seekpos()&lt;/a&gt;&lt;/code&gt; and explicitly called by &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;std::basic_streambuf::pubsync()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sync()&lt;/code&gt; 또는 동등한 항목은 &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubseekoff&quot;&gt;seekoff()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubseekpos&quot;&gt;seekpos()&lt;/a&gt;&lt;/code&gt; 의해 출력 스트림에 대해 내재적 으로 호출되며 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;std::basic_streambuf::pubsync()&lt;/a&gt;&lt;/code&gt; 의해 명시 적으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="f095f3da868331adba8129bec9b1a69b1750d68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized&lt;/code&gt;compound-statement</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt;compound-statement</target>
        </trans-unit>
        <trans-unit id="84fc76b9652e4658fe7884a74c72cd38a463d744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized&lt;/code&gt;compound-statement.</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt;compound-statement.</target>
        </trans-unit>
        <trans-unit id="054851ea09d5f2815e5123d31e8f59874d9d3c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized_pool_resource&lt;/code&gt; may be accessed from multiple threads without external synchronization, and may have thread-specific pools to reduce synchronization costs. If the memory resource is only accessed from one thread, &lt;a href=&quot;unsynchronized_pool_resource&quot;&gt;&lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;&lt;/a&gt; is more efficient.</source>
          <target state="translated">&lt;code&gt;synchronized_pool_resource&lt;/code&gt; 는 외부 동기화없이 여러 스레드에서 액세스 할 수 있으며 동기화 비용을 줄이기 위해 스레드 별 풀을 가질 수 있습니다. 하나의 스레드에서만 메모리 자원에 액세스하는 경우 &lt;a href=&quot;unsynchronized_pool_resource&quot;&gt; &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; &lt;/a&gt; 가 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="1198634d869eb8501699c0d2c005e9cbe2ef230b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;system_clock&lt;/code&gt; measures Unix Time (i.e., time since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970, not counting leap seconds).</source>
          <target state="translated">&lt;code&gt;system_clock&lt;/code&gt; 은 Unix Time (즉, 윤초를 계산하지 않고 1970 년 1 월 1 일 목요일 00:00:00 협정 세계시 (UTC) 이후의 시간)을 측정합니다.</target>
        </trans-unit>
        <trans-unit id="975fc5dd020b3a62835d5173c6970e7eb1cfe4db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt;, a modifiable &lt;a href=&quot;../language/value_category&quot;&gt;lvalue expression&lt;/a&gt; of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 타입, &lt;code&gt;T&lt;/code&gt; 타입 의 수정 가능한 &lt;a href=&quot;../language/value_category&quot;&gt;lvalue 표현식&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dd4b1dcb80b90cf277b526a5334315150881931f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt;, an lvalue or const rvalue of type &lt;code&gt;X::value_type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; &lt;code&gt;X::value_type&lt;/code&gt; 유형의 lvalue 또는 const rvalue</target>
        </trans-unit>
        <trans-unit id="38259447ed982d05a15aa3ba189f25664f32d43e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table_size&lt;/code&gt;(static const)</source>
          <target state="translated">&lt;code&gt;table_size&lt;/code&gt; (정적 const)</target>
        </trans-unit>
        <trans-unit id="1b5c0793defdd57124cafb9905809907ddf8535c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tai_clock&lt;/code&gt; meets the &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; requirements. It does not meet the &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; requirements unless the implementation can guarantee that &lt;a href=&quot;tai_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; does not throw an exception.</source>
          <target state="translated">&lt;code&gt;tai_clock&lt;/code&gt; 은 &lt;a href=&quot;../named_req/clock&quot;&gt;시계&lt;/a&gt; 요구 사항을 충족합니다 . 구현에서 &lt;a href=&quot;tai_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 가 예외를 발생시키지 않는다고 보장 할 수 없으면 &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; 요구 사항을 충족 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4f4fc1efa78ee5255898d3df98d6ec199babc3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;declaration</target>
        </trans-unit>
        <trans-unit id="cef4701fc60fb9db1676a3441c4bbdca08768e70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;concept&lt;/code&gt;concept-name&lt;code&gt;= &lt;/code&gt;constraint-expression&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; 파라미터리스트 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;concept&lt;/code&gt; concept-name &lt;code&gt;= &lt;/code&gt; constraint-expression &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd238e2b39add944be3fc34637a8b950b767690e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;requires&lt;/code&gt;constraintfunction-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;requires&lt;/code&gt;constraintfunction-declaration</target>
        </trans-unit>
        <trans-unit id="4ed12cb5824696f2f82dc9852fe33d25ef698375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</target>
        </trans-unit>
        <trans-unit id="eb46ad9c8935ecee4a2243f54359151abf200cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;name(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;name(optional)</target>
        </trans-unit>
        <trans-unit id="d5eccbf394c6f73fe09755e2c36c060ddaca42b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)</target>
        </trans-unit>
        <trans-unit id="930be1c6b6df26e405d142037c1461164676a081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)&lt;code&gt;=&lt;/code&gt;default</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)&lt;code&gt;=&lt;/code&gt;default</target>
        </trans-unit>
        <trans-unit id="6658b3ed79c02b4a958bf0b5e15db64b1b5a49b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-declaration</target>
        </trans-unit>
        <trans-unit id="f736579485815cfbe84869cb1d48765dd18d564c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-keyclass-head-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-keyclass-head-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</target>
        </trans-unit>
        <trans-unit id="c98897f309016293ec5eafb1df5701ee759926e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;decl-specifier-seqdeclarator&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;initializer(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;decl-specifier-seqdeclarator&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;initializer(optional)</target>
        </trans-unit>
        <trans-unit id="0ee15a833b8bfe2782d45e5e1f58950123cc161b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</target>
        </trans-unit>
        <trans-unit id="28e88f8bca8f7529eaa4eb74fb031f498b72a72b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;function-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;function-declaration</target>
        </trans-unit>
        <trans-unit id="3bced8978a9eec83b278bb70e57f6c78726997a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;requires-clause(C++20)(optional)declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;requires-clause(C++20)(optional)declaration</target>
        </trans-unit>
        <trans-unit id="bdba698e8040b1c5726158fac45c4ad1e7b9c43b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;variable-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;variable-declaration</target>
        </trans-unit>
        <trans-unit id="0ee65e78f54239d6be70a938940cf4da37aa6a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;template-parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;template-parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31926f20abea388376d54e3542df3c3b972c58e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;class|struct&lt;/code&gt;template-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&amp;nbsp;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;class|struct&lt;/code&gt;template-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&amp;nbsp;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ed6d7cc9df0204a2a1cb436e21786938aebd872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36792954e2a87b9a2654165406419c9cfe4647dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64c46d9da989307152254e779af06f6aa927ce80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this == &amp;amp;other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this == &amp;amp;other&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c64bb1972a884a64d9c938447deb510bc6797fa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 이다</target>
        </trans-unit>
        <trans-unit id="86c609c169c348c8de843d34491bbc9163ad341b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; on success, a null pointer on failure.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 성공하면 실패에 대한 널 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="1513e2cac5aaea270abb0d7ce912eea28af8c3fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; pointer</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 포인터</target>
        </trans-unit>
        <trans-unit id="3bbce60906bfffde46cd61b39564a9723741d068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;, if the class is a dependent type.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 클래스가 종속 유형 인 경우 this 입니다.</target>
        </trans-unit>
        <trans-unit id="1dd7c7da4f2db512c36ff60aea324bbf46d7f1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="08aa582f31c0d72a47b48b6014e9681e01c7d45b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread_local&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;thread_local&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="699119966bdd1b85af68fc960d1b82c22d66a7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw &lt;/code&gt;object&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;throw &lt;/code&gt; 개체 &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3bf225abaa03f16050908b861154f0c280035fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;throw(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a08d21925c481be53c04af8bcf1210d5cae0c12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw(&lt;/code&gt;typeid, typeid, ...&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;throw(&lt;/code&gt; typeid, typeid, ... &lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ffa4dfba6723ea3bd941615fc019dfa44a515828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; 식을 던지다</target>
        </trans-unit>
        <trans-unit id="e984aa98a16d5f8c796f0fc5f05d8b5733366b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt;-expression</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt;-expression</target>
        </trans-unit>
        <trans-unit id="111860c5720c2462723c7be35ea67cd3338eeee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt;expression</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt;expression</target>
        </trans-unit>
        <trans-unit id="0893d51f0b8564356f4e175f506e1f035224a7a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_of_day&lt;/code&gt; splits a duration representing time elapsed since midnight into hours, minutes, seconds, and fractional seconds, as applicable. It is primarily a formatting tool.</source>
          <target state="translated">&lt;code&gt;time_of_day&lt;/code&gt; 는 자정 이후 경과 된 시간을 나타내는 지속 시간을 해당하는 경우시, 분, 초 및 분수 초로 분할합니다. 주로 서식 도구입니다.</target>
        </trans-unit>
        <trans-unit id="41774b2b7834a7c9300db964e82aa508cd2a0f23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_point&lt;/code&gt; to convert from</source>
          <target state="translated">&lt;code&gt;time_point&lt;/code&gt; 변환 할 time_point</target>
        </trans-unit>
        <trans-unit id="c4c332ad4cbd24983bad1615133aa4a05f6df52a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_point_cast&lt;/code&gt; will only participate in overload resolution if &lt;code&gt;ToDuration&lt;/code&gt; is an instantiation of &lt;code&gt;duration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time_point_cast&lt;/code&gt; 는 &lt;code&gt;ToDuration&lt;/code&gt; 이 &lt;code&gt;duration&lt;/code&gt; 의 인스턴스 인 경우에만 과부하 해결에 참여 합니다.</target>
        </trans-unit>
        <trans-unit id="c7e87fc979fdc276061810e2061ff505dce08a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_zone&lt;/code&gt; is not copyable but does have a defaulted move constructor and a defaulted move assignment operator. However, as users have only &lt;code&gt;const&lt;/code&gt; access to &lt;code&gt;time_zone&lt;/code&gt; objects, these functions cannot be called in user code without invoking &lt;a href=&quot;../language/ub&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;time_zone&lt;/code&gt; 은 복사 할 수 없지만 기본 이동 생성자와 기본 이동 할당 연산자가 있습니다. 그러나 사용자는 &lt;code&gt;time_zone&lt;/code&gt; 객체에 대한 &lt;code&gt;const&lt;/code&gt; 액세스 권한 만 있으므로 &lt;a href=&quot;../language/ub&quot;&gt;정의되지 않은 동작&lt;/a&gt; 을 호출하지 않으면 사용자 코드에서 이러한 함수를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="98ed1571b14b52948622ae54ee17b9eb2346abfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_hour&lt;/code&gt;, &lt;code&gt;tm_min&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tm_hour&lt;/code&gt; , &lt;code&gt;tm_min&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcef5aa07b56fab4d3d4675bab67cdc9dfcccbae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_hour&lt;/code&gt;, &lt;code&gt;tm_min&lt;/code&gt;, &lt;code&gt;tm_sec&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tm_hour&lt;/code&gt; , &lt;code&gt;tm_min&lt;/code&gt; , &lt;code&gt;tm_sec&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6bdfa63e81df26250a2e98f008c873a2fa67236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_mon&lt;/code&gt;, &lt;code&gt;tm_mday&lt;/code&gt;, &lt;code&gt;tm_year&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tm_mon&lt;/code&gt; , &lt;code&gt;tm_mday&lt;/code&gt; , &lt;code&gt;tm_year&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aba4b8128692116b64dcf6ddb4289880069fe8f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_year&lt;/code&gt;, &lt;code&gt;tm_wday&lt;/code&gt;, &lt;code&gt;tm_yday&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tm_year&lt;/code&gt; , &lt;code&gt;tm_wday&lt;/code&gt; , &lt;code&gt;tm_yday&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08674887a45d43a5333632cd5641dfa15872c949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_sys&lt;/code&gt; and &lt;code&gt;from_sys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;to_sys&lt;/code&gt; 및 &lt;code&gt;from_sys&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb430c8f780a57e1fa2afa81dc729ec9cf4927dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_utc&lt;/code&gt; and &lt;code&gt;from_utc&lt;/code&gt;; or</source>
          <target state="translated">&lt;code&gt;to_utc&lt;/code&gt; 및 &lt;code&gt;from_utc&lt;/code&gt; ; 또는</target>
        </trans-unit>
        <trans-unit id="db2863c1409fb265e8989d65ec8fa7b3822629f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trivial-clock&lt;/code&gt; is an implementation-defined type that satisfies &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; and is sufficient to represent the resolution and range of the file time values offered by the filesystem.</source>
          <target state="translated">&lt;code&gt;trivial-clock&lt;/code&gt; 은 &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; 을 충족하는 구현 정의 유형이며 파일 시스템이 제공하는 파일 시간 값의 해상도 및 범위를 나타내 기에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="c758ae651b4b1b8f58cd6578ccb94902f484afd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; (the entire sequence is matched)</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; (전체 시퀀스가 ​​일치 함)</target>
        </trans-unit>
        <trans-unit id="b337fa35a98c22ea1fef2a94b3acc654600c1dcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if *this refers to a shared state, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; , 그렇지 않으면,이 공유 상태를 말한다 * 경우 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b61da87ca14a1ea93e23f30d760508222e39716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*obj&lt;/code&gt; is a lock-free atomic, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*obj&lt;/code&gt; 가 잠금이없는 원자이고 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="c806da6c27933be3771ba51bfd83f1f030953d68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; contains a value, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; does not contain a value.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 값 이 포함되어 있으면 true 이고, * 에 값 &lt;code&gt;*this&lt;/code&gt; 없으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b02eeb5182d007bfa0f02b2d018a170329f05658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; has a shared state, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 공유 상태를 가지고, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="897cf60c64bf6c8adf9c9f2a86f2b56069816509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; has an associated mutex and has acquired ownership of it, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 연관된 뮤텍스를 가지고 있으며, 그것의 소유권을 인수했다 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="d64904471fddc80d155bcc3c1a8fbc8b6eebdd92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; has an associated mutex and has acquired shared ownership of it, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 연관된 뮤텍스를 가지고 있으며, 그 공유 소유권을 인수했다 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="c1ecc1ea7a6675da55238f817af0748e552ccb14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; is the only &lt;code&gt;shared_ptr&lt;/code&gt; instance managing the current object, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 가 현재 객체를 관리하는 유일한 &lt;code&gt;shared_ptr&lt;/code&gt; 인스턴스 이면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b8a882da1b9219101479a684aa071a48b32d21f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; owns an object, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 객체 소유 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="e2e3f46c4ddef883c52589ca44ce3c6082f9843b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; precedes &lt;code&gt;other&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. Common implementations compare the addresses of the control blocks.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; &lt;code&gt;other&lt;/code&gt; 앞에 오면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다. 일반적인 구현은 제어 블록의 주소를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="7e04b16279af2d729bbf6cd62d4eac83598ae689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; represents a leap year, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 그렇지 않으면, 윤년을 나타냅니다 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8dd04bed382509c381a323fcf9d8480497f19a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; stores a callable function target, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 함수는 호출 가능한 함수 대상을 저장하면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bc78a5870c6f3c121fa269d0106efd29f247d601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; stores a pointer, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 저장 포인터, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="b7504e43d07538ac694058dac7796a005977fa99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; has a member &lt;code&gt;::value&lt;/code&gt; that is &lt;code&gt;false&lt;/code&gt; when explicitly converted to &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;B&lt;/code&gt; 는 회원이 &lt;code&gt;::value&lt;/code&gt; 입니다 &lt;code&gt;false&lt;/code&gt; 명시 적으로 변환 할 때 &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , 그렇지 않은</target>
        </trans-unit>
        <trans-unit id="54718d3dce95fd672e8bd5fd850dfed66817adcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Derived&lt;/code&gt; is derived from &lt;code&gt;Base&lt;/code&gt; or if both are the same non-union class (in both cases ignoring cv-qualification), &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;Derived&lt;/code&gt; 에서 파생 된 &lt;code&gt;Base&lt;/code&gt; 또는 모두 (CV-자격을 무시하고 두 경우 모두에서) 같은 비 노조 클래스,있는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지 않은</target>
        </trans-unit>
        <trans-unit id="54db9751ef6490d27fa40e1f9becf5b364291cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;From&lt;/code&gt; is convertible to &lt;code&gt;To&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;From&lt;/code&gt; 을 &lt;code&gt;To&lt;/code&gt; 로 변환 할 수 있으면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3a7977e38535151910cc2005a6cdb14f682feea5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;INVOKE&amp;lt;R&amp;gt;(declval&amp;lt;Fn&amp;gt;(), declval&amp;lt;ArgTypes&amp;gt;()...)&lt;/code&gt; is well formed when treated as an unevaluated operand , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;INVOKE&amp;lt;R&amp;gt;(declval&amp;lt;Fn&amp;gt;(), declval&amp;lt;ArgTypes&amp;gt;()...)&lt;/code&gt; 평가되지 않은 피연산자로 처리 할 때 잘 형성하고, &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="2f3a8ee493790bf7c371c0f3450a29207c404245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num != R2::num || R1::den != R2::den&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R1::num != R2::num || R1::den != R2::den&lt;/code&gt; , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a08e76506577efbeb03359b9d52d87b7ce810a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;gt; R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R1::num * R2::den &amp;gt; R2::num * R1::den&lt;/code&gt; 또는 등가 식 없애서 오버플 &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="95e8d910890e3034111d598805c5835c9d7a49fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;gt;= R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R1::num * R2::den &amp;gt;= R2::num * R1::den&lt;/code&gt; 또는 등가 식 없애서 오버플 &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="5f87bfce095afdfbdcf90fdc6ddbf83770b7f8de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;lt; R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R1::num * R2::den &amp;lt; R2::num * R1::den&lt;/code&gt; 또는 등가 식 없애서 오버플 &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="af1fd7f25c867a50ecc417b26562c7513f389167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;lt;= R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R1::num * R2::den &amp;lt;= R2::num * R1::den&lt;/code&gt; 또는 등가 식 없애서 오버플 &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="c3324c06c5e5ebd6613ba663481a8b0079f9bafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num == R2::num &amp;amp;&amp;amp; R1::den == R2::den&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R1::num == R2::num &amp;amp;&amp;amp; R1::den == R2::den&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="33656bb5f9fe41fe760e6396a3d5de0ea1b922bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; is the same type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 와 &lt;code&gt;U&lt;/code&gt; 는 같은 종류이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="28d2a44b105fc2ea4ebdc7759f674772926f44cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has a virtual destructor , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 에 가상 소멸자가 있으면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b1ea84e60254ccf0bc4d7b305a8fd07948179e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has unique object representations , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 에 고유 한 객체 표현이 있으면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82e1d272aa759771f50df20c70a2a1821a276e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a &lt;a href=&quot;../language/objects#Polymorphic_objects&quot;&gt;polymorphic&lt;/a&gt; class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 A는 &lt;a href=&quot;../language/objects#Polymorphic_objects&quot;&gt;다형성&lt;/a&gt; 클래스 유형, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="86841b918c3b5aa4bf6fc74125e065809f54b4ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a POD type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 POD 타입 인 경우 는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43256d3a170a8216ec596aadf18c944e03c3ed60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a compound type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 복합 형인 경우 는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a13bbc1373ef76774c00ac24575b9d248ef4411a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a const-qualified type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 CONST 자격 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="279886cc647fdc4cca818d9056acf5f16f60c12e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a final class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 최종 클래스 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="70cb39a09cbf2fb91ae701cbc53458f4103c456a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a floating-point type (possibly cv-qualified) , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 부동 소수점 형 (아마도 이력서 자격)이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="e398e25abbacd4f152b58b55b2aef70ff760978e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a function object generated by &lt;code&gt;&lt;a href=&quot;bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 에 의해 생성 된 함수 객체입니다 &lt;code&gt;&lt;a href=&quot;bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="6db029207e8fad628125a73e66af658bd7490544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a function type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 함수 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="fa15bfdc348748fdd841cec9e3f10b601e80bdea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a fundamental type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 기본 유형 인, &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="1b5926e2c0d952fd494d2c25a2b92c6490fb93aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a literal type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 문자 그대로의 형태이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="2b21c0d3bfcdd769318e02e20bf1655360865501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a member function pointer type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 멤버 함수 포인터 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="e5c5fb109382eb6d9136b4c98dda10aad8b5cf2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a member pointer type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 멤버 포인터 타입이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="be9a692aec6f60f510972993792edb7ceb7df5f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a non-union class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 비 노조 클래스 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="2824cf3958551b1a80b8c2d2cd9b6be31d3d839b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a pointer to member object , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 구성원 개체에 대한 포인터이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="0f846a03755bfee500bf1b837d438744fdfcb478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a pointer type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 포인터 타입이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="59994ac5601571758017d10da075720b84207343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a reference type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 참조 형식이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="c851cfdaae239a4932cf46a4bf49005fff543a7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a scalar type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 스칼라 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="40e42e209b8dc9ce5c3a915b032c008bb4766af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a signed arithmetic type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 서명 된 연산 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="3f77b3c510bb9cdbe2e50d97cc8d0858f7b5a3f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a standard or implementation-defined execution policy type, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 표준 또는 구현 정의 실행 정책의 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="8a3375c55c67fb5ae89ea7f9c82c389ab4d7ac0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a standard-layout type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 표준 레이아웃 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="1d9b4b3f04f3269a9aa9306396a67df7352c4dc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a trivial type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 사소한 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="9fce0d9947325cbe66f55912b102dae643e80c2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a trivially copyable type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 하찮게 복사 가능한 타입이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="2d4aa77f49812db3b334e3b5180ef7d6667eefed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a union type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 노동 조합의 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="a75dd5387fe28e777a5f982e97246bafb4257330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a volatile-qualified type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 volatile 한정 형인 경우 는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee52ffe3e1e9db1ab92779afa612a128eab077df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an &lt;a href=&quot;../language/abstract_class&quot;&gt;abstract class&lt;/a&gt; type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 입니다 &lt;a href=&quot;../language/abstract_class&quot;&gt;추상 클래스의&lt;/a&gt; 유형, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="ac70f06310b441c83c89b23ccd0c0202a32fa2bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an aggregate type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 집계 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="7b902a3d8ac661c09ed64f9f9a7f16f605af31b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an arithmetic type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 산술 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="1a4d0c31fc9b80a52cc721fb10318915cfc64399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 배열 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="746a1efd9c6be9574e5a3c051dea3c0d6cf9f762" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type of known bound , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 결합 알려진 배열 형이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="c4435b83f2f3a16ede189f4fb38973638ceac4a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type of unknown bound , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 결합 된 알의 배열 형식입니다 &lt;code&gt;false&lt;/code&gt; , 그렇지</target>
        </trans-unit>
        <trans-unit id="e494cf9a7b159e777048b9cbafffaffee8f0fb06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an empty class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 빈 클래스 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="85977cd0c1de1cd0fc141622bcf061529af2b9ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an enumeration type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 열거 형인 경우 는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="81682909c7e426be61907ad56980301f487845fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an error code enum, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 오류 코드 열거는, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="506f07c315456ae21dc7facce92a56b94ea92085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an error condition enum, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 오류 조건을 열거이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="4b0659e11e4997678ec43608a5c78b47dfa6aee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an integral type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 가 중요한 유형 인, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="c2d306c4928199ac6fbd1a6c460c8bc2bf6a1340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an lvalue reference type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 좌변 참조 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="3ded384ef7e4fc508beb30fd6ff06ab75b813108" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an object type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 오브젝트 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="c1d3754f063e3ddf7aefad55063a55ae0e36d800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an rvalue reference type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 를 rvalue 참조 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="3a4af62411a901ee93d4980d9a31b5d15a419aa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an unsigned arithmetic type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 부호없는 산술 유형이, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="b221cc0617be6c204f1353e23be2c22563ffd342" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is assignable from &lt;code&gt;U&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;U&lt;/code&gt; 에서 할당 가능 하면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4134cd012a586b5444536b97bb0f38101fd897e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is constructible from &lt;code&gt;Args...&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;Args...&lt;/code&gt; 에서 구성 가능한 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b1518f0d88691783a47c4afcf07fe97c56ed83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is copy-assignable, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 복사 가능 하면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc3d5dacd9704415fc7ae19973a5eb670b1c240d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is copy-constructible , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 복사 가능한 경우 는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7255ba501a7ea18af0e9a3ee9e275a102e3efe60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is default-constructible , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 기본적으로 작도이며, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="4c90c0251b9cf81d28e241e382735232d932efea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is destructible, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 , 파괴입니다 &lt;code&gt;false&lt;/code&gt; 그렇지</target>
        </trans-unit>
        <trans-unit id="064f1de49c7177f9dd8e9434d185c52649ed3243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is move-assignable, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 이동 가능 하면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f539d21334f1da6b7d57b70c873d27951c1760c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is move-constructible , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 이동 구성 가능한 경우 는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8c0f7184a949f32a7ec895603b600e432bbe8fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is swappable with &lt;code&gt;U&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;U&lt;/code&gt; 와 교체 가능한 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d448a819bcf27f4ec633cf0094aa1a7d2ee39cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is the type &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; (possibly cv-qualified) , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 타입이다 &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; (아마도 이력서 자격), &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="c17d7a11237304f4520a6f20f473ff3666a6df77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is the type &lt;code&gt;void&lt;/code&gt; (possibly cv-qualified) , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 타입이다 &lt;code&gt;void&lt;/code&gt; (아마도 이력서 자격), &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="2d63fe38bfcd036222292c5760431d3f80f9cb41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; satisfies the &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; requirements , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 의 만족 &lt;a href=&quot;../named_req/clock&quot;&gt;시계&lt;/a&gt; 요구, &lt;code&gt;false&lt;/code&gt; , 그렇지 않으면</target>
        </trans-unit>
        <trans-unit id="84579fe6f08f4d9738e271efa674582fbc88ee4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; uses allocator &lt;code&gt;Alloc&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 가 할당 자 &lt;code&gt;Alloc&lt;/code&gt; 을 사용 하면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c976f52872c9e7db630750172899cc9ba9d70657" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;[first2, last2)&lt;/code&gt; is a subsequence of &lt;code&gt;[first1, last1)&lt;/code&gt;; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;[first2, last2)&lt;/code&gt; 의 시퀀스이다 &lt;code&gt;[first1, last1)&lt;/code&gt; ; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7a3107a7616b2db76470a54bac83fcd6b7525b81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; has finite value, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;arg&lt;/code&gt; 에 유한 값이 있으면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4da9c5ba40ea5b12b1d46ad9a5a9a785224aa8b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is a NaN, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;arg&lt;/code&gt; NaN의입니다 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="1a2c60f7711706b0465ae8b89f2d3ec94073f688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is infinite, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 만약 &lt;code&gt;arg&lt;/code&gt; 무한하다, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="62fa0c1018e3cb3f8bc1a88b2597787cda700f96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is negative, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;arg&lt;/code&gt; 부정적이고, &lt;code&gt;false&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="fecb1cd84a1e1205e0e304db06b224b9ac956588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is normal, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;arg&lt;/code&gt; 가 정상 이면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="faa7833673d1c90323b97e307b34f34143d63144" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;c1&lt;/code&gt; is equal to &lt;code&gt;c2&lt;/code&gt; under the rules described above, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 위에서 설명한 규칙에 따라 &lt;code&gt;c1&lt;/code&gt; 이 &lt;code&gt;c2&lt;/code&gt; 와 같으면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bfde577449d3c931501c92f9f615c9fef117ab26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; is classified by &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 가 &lt;code&gt;f&lt;/code&gt; 로 분류 되면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9471eccc5eceaefffe96fd9e74753f4fcf6ae633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs != rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;lhs != rhs&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="c34c057f2b3c9d49a2fbba50809fc0b1f96df1d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt; 인 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d87881830cf931ab34fb8defb4e94a371a82589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="a5a3fb1ff563932ada0f7186267a650708df9c20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt; 인 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1815fa824b66b43983f869b0185ca44208eb0c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt; 인 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5aa0c137d83e5a0625fa238a2db2cefb6108c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs == rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;lhs == rhs&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="10124b38ef58c34919e2466e22dbc6f366279c37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;lhs&lt;/code&gt; 가 true 이면</target>
        </trans-unit>
        <trans-unit id="121513d78d5683ce9aa8a6fef90e00b12683aca7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s1&lt;/code&gt; is lexicographically less than &lt;code&gt;s2&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;s1&lt;/code&gt; 이 사전 순으로 &lt;code&gt;s2&lt;/code&gt; 보다 작은 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c80743604d10bb3b71ba8a58403f5e3d38167cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;t1 &amp;lt;= t2&lt;/code&gt; is always &lt;code&gt;true&lt;/code&gt; and the time between clock ticks is constant, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;t1 &amp;lt;= t2&lt;/code&gt; 항상 &lt;code&gt;true&lt;/code&gt; 클럭 간의 시간 틱 일정 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e460e2e5e079e5662b4e089f5c7009cf0329ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이다 &lt;code&gt;equivalent&lt;/code&gt; 또는 &lt;code&gt;equal&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 있는 경우 &lt;code&gt;v&lt;/code&gt; 이고 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e9fcef073d847fd38d855f9dd6d94e9a9d99ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;nonequivalent&lt;/code&gt; or &lt;code&gt;nonequal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이다 &lt;code&gt;equivalent&lt;/code&gt; 또는 &lt;code&gt;equal&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이다 &lt;code&gt;nonequivalent&lt;/code&gt; 또는 &lt;code&gt;nonequal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9051662129b0f3a242c1fc7fd3934749e257f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것이다 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0cd71e9db7a3d6d42ce18717cc17a10b74519f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;greater&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;less&lt;/code&gt; , &lt;code&gt;greater&lt;/code&gt; , 또는 &lt;code&gt;unordered&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a266773c69ddb66bead70edb14dd7a049288e42e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;nonequivalent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;nonequivalent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7db4f4f0bc9f1a0dcd72631564298824e2e92327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이고 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이다 &lt;code&gt;equivalent&lt;/code&gt; 또는 &lt;code&gt;equal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="778d1d451ff063eb89d0eeb062b70547ec3f2c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 있습니다 &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; , 그리고 &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3172d9505adf7149c196e4dda25da24ca250fd6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;unordered&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, or &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 있다 &lt;code&gt;unordered&lt;/code&gt; , &lt;code&gt;less&lt;/code&gt; 또는 &lt;code&gt;greater&lt;/code&gt; , 그리고 &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 것입니다 &lt;code&gt;equivalent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f95842d952618d968d8af18ffccae287456d293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;value != 0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;value != 0&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="9dbbe6801d842b13ea984c2582992a4df054fef2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;weekday().ok() == true&lt;/code&gt; and &lt;code&gt;index()&lt;/code&gt; is in the range [1, 5]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;weekday().ok() == true&lt;/code&gt; 과 &lt;code&gt;index()&lt;/code&gt; 범위이다 [1,5]. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3255749cce076a7c942ed9f7b8fbc3cd58aec8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;gt; y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x &amp;gt; y&lt;/code&gt; 인 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="243af8a752ac91218f7d49c89c0975cf342ec397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;gt;= y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x &amp;gt;= y&lt;/code&gt; 인 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8cb5e31412b0703f778e3fb0aa406771e46c3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;lt; y || x &amp;gt; y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;x &amp;lt; y || x &amp;gt; y&lt;/code&gt; , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3901f105376f20d001995960f0199deb46e3ab9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;lt; y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x &amp;lt; y&lt;/code&gt; 인 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2885ac2556988f547ff4eceb0b04382fefc5eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;lt;= y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x &amp;lt;= y&lt;/code&gt; 인 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2a5221dfda344f736e743802c2676734e20b3b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are in the same state (such that repeated future calls to &lt;code&gt;x()&lt;/code&gt; and &lt;code&gt;y()&lt;/code&gt; will produce identical sequences). Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 동일한 상태에있는 (예를 들면 반복하는 미래의 호출에 &lt;code&gt;x()&lt;/code&gt; 와 &lt;code&gt;y()&lt;/code&gt; 와 동일한 시퀀스를 생성 할 것이다). 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b52764c8952951fbe08c47ae1c319748495f62c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is an integral power of two; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;x&lt;/code&gt; 두개의 중요한 전력이고; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="daf77f8a170a0b7cf8e197edd700f2ee2f4bb8c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if a directory was created for the directory &lt;code&gt;p&lt;/code&gt; resolves to, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 디렉토리 &lt;code&gt;p&lt;/code&gt; 에 대해 디렉토리가 작성된 경우 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bece88ec75292f03199bedab744dd32715f9f3fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if a non-recoverable error has occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 회복 불가능한 에러가 발생한 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52b5e95de12ba5f427bc8ef00820d95d83c03b6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if all of the following is true:</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 다음 모두에 해당 하면 true입니다.</target>
        </trans-unit>
        <trans-unit id="7feebd08c17d9d05f1b452049b1dcc58556833b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element equal to &lt;code&gt;value&lt;/code&gt; is found, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 동일한 요소 경우 &lt;code&gt;value&lt;/code&gt; 발견하고, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="e3e5e513c6d623da9a26a53e3347bbe0718a8a36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an end-of-file has occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일 끝이 발생한 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="c9bcc7f1ae93cb6825b5741398d2898147f778bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an error has occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 에러가 발생한 경우는 true , 그렇지 않은 경우는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abb7a945f2cf54748f4dc8cbe0d588d6f1b8dd0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if any two allocators of type &lt;code&gt;A&lt;/code&gt; always compare equal. If not provided, &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; defaults this to equal &lt;code&gt;&lt;a href=&quot;../types/is_empty&quot;&gt;std::is_empty&lt;/a&gt;&amp;lt;A&amp;gt;::type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 유형 &lt;code&gt;A&lt;/code&gt; 의 두 할당자가 항상 동일하게 비교 되면 true 입니다. 제공되지 않은 경우 &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; 기본적으로 &lt;code&gt;&lt;a href=&quot;../types/is_empty&quot;&gt;std::is_empty&lt;/a&gt;&amp;lt;A&amp;gt;::type&lt;/code&gt; &amp;lt;A&amp;gt; :: type 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d75e79f96736cec0da4422496d046ca43a70e271" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if both &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; are valid, or both are invalid, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 모두 &lt;code&gt;*this&lt;/code&gt; 하고 &lt;code&gt;it&lt;/code&gt; 유효, 또는 둘, 무효 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="31889d3052d3523de793be538c512f07dc006883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; is NaN, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 또는 &lt;code&gt;y&lt;/code&gt; 가 NaN 이면 true 이고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8061fcebee76efb0b8e9ac2a22fa95246d06fcc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if instance contains a value, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; instance에 값이 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7c9ae7df0b2daeb373a9564900c7b4397aab26e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if sub-expression n participated in the match, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 하위 표현식 n이 일치하는 경우 참 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62d0d5062dc8915e17eac40523474e716b5a465c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt; refer to the same file or directory and their file status is the same. &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;p1&lt;/code&gt; 및 &lt;code&gt;p2&lt;/code&gt; 가 동일한 파일 또는 디렉토리를 참조하고 파일 상태가 동일한 경우 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40efafedf9595e8b040c61bd1fe3b8737ecb15bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the allocator of type &lt;code&gt;A&lt;/code&gt; needs to be copied when the container that uses it is copy-assigned. Note that if the allocators of the source and the target containers do not compare equal, copy assignment has to deallocate the target's memory using the old allocator and then allocate it using the new allocator before copying the elements (and the allocator).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; 를 사용하는 컨테이너를 복사 할 때 A 유형의 할당자를 복사해야하는 경우 true 입니다. 소스의 할당 자와 대상 컨테이너가 동일하게 비교되지 않으면 복사 할당은 이전 할당자를 사용하여 대상의 메모리를 할당 해제 한 다음 요소 (및 할당 자)를 복사하기 전에 새 할당자를 사용하여 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="ebb4243227b7226e633bdbcd4bccf181169d0463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the allocator of type &lt;code&gt;A&lt;/code&gt; needs to be moved when the container that uses it is move-assigned. If this member is &lt;code&gt;false&lt;/code&gt; and the allocators of the source and the target containers do not compare equal, move assignment cannot take ownership of the source memory and must move-assign or move-construct the elements individually, resizing its own memory as needed.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; 를 사용하는 컨테이너를 이동 할당 할 때 유형 A 의 할당자를 이동해야하는 경우 true 입니다. 이 멤버가 &lt;code&gt;false&lt;/code&gt; 이고 소스 및 대상 컨테이너의 할당자가 동일하게 비교하지 않으면 이동 할당은 소스 메모리의 소유권을 가질 수 없으며 요소를 개별적으로 이동 할당 또는 이동 구성하여 필요에 따라 자체 메모리 크기를 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="71a989fc0f089a5f2c131ec55fc8697d2393cc43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the allocators of type &lt;code&gt;A&lt;/code&gt; need to be swapped when two containers that use them are swapped. If this member is &lt;code&gt;false&lt;/code&gt; and the allocators of the two containers do not compare equal, the behavior of container swap is undefined.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; 를 사용하는 두 개의 컨테이너를 교체 할 때 유형 A 의 할당자를 교체해야하는 경우 true 입니다. 이 멤버가 &lt;code&gt;false&lt;/code&gt; 이고 두 컨테이너의 할당자가 동일하게 비교되지 않으면 컨테이너 스왑 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cee4cc0fe61898eb81b940b710d64eb02581a195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the associated file is open, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 연결된 파일이 열려 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9ae99d24f74b5f27a9747f1d3cab7010946cc1fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the atomic operations on the objects of this type are lock-free, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이러한 유형의 개체에 대한 원자 조작 잠금이없는,있는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="a044a836193b2fcd330a7eef9108235358717dfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the atomic operations on this object are lock-free, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 객체에 원자 작업이 잠금이없는,있는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="2e9c546ffd5869e527989105c7215720bd4cc77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the comparison operation holds true, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 비교 작업이 진정한 보유하고있는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="f5c802c6770f394195ba68520f04a36dbb7d0900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the container doesn't have any element.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 컨테이너에 요소가 없으면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="303ff36ac39b8c4990f443a72372a2023f3f4237" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the container is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 컨테이너가 비어 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e38fd6596dbb120ce644b9a46e404db9f612ea4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison holds as defined by &lt;code&gt;&lt;a href=&quot;compare&quot;&gt;std::sub_match::compare()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 해당 비교에 의해 정의 된 보유하고있는 경우 &lt;code&gt;&lt;a href=&quot;compare&quot;&gt;std::sub_match::compare()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="d1836e5d6e1e7a62ca904ac434d76f8282910904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison holds, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 해당 비교가 보유하고있는 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="7627d1e51ad70c5ee2cc9dd8de593da75ce7f349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison yields &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 해당 비교 산출한다면 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 달리.</target>
        </trans-unit>
        <trans-unit id="3248f847849692a6a913a9efef092510b6022911" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison yields, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 해당 비교 결과가 나오면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4b2fd32bb5096e718894f9ec6381a6279c5b27a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding path component is not empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 해당 경로의 요소가 비어 있지 않은 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="435ba71d15fe35847d288669d7ffe64adaf2e965" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding relation holds, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; , 대응 관계가 보유하고있는 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="21e34dfd5278ce73774a6aadf8a971b3a87aca54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the day value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [1, 31]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 에 저장된 일 값 이 [1, 31] 범위 에 있으면 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ade861a9f26fc914acd9e634902525dd6a953d53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the elements in the range are sorted in ascending order.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 범위의 요소가 오름차순으로 정렬 된 경우 true 입니다.</target>
        </trans-unit>
        <trans-unit id="c37e3745ea8db57d240782b0e1208288841ed7ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the error code is equivalent to the given error condition for the error category represented by &lt;code&gt;*this&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 에러 코드가 나타내는 에러 종류에 대한 특정 오류 조건이 동일한 경우 &lt;code&gt;*this&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="eabc4af8891e069a58fae80b1c67c853047fc2cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the evaluation of the call occurs within the evaluation of an expression or conversion that is</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 호출 평가가 다음 식 또는 변환 평가 내에서 발생하는 경우 true</target>
        </trans-unit>
        <trans-unit id="91b753a908c7f39ef67704c38b88b576b17d7364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a FIFO pipe, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일로 표시하면 &lt;code&gt;p&lt;/code&gt; 또는 유형이 표시하면 &lt;code&gt;s&lt;/code&gt; 하는 FIFO 파이프 지칭 &lt;code&gt;false&lt;/code&gt; 그렇지. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="eb296ce49a6b4b1ee3cdf1483ce9f110cf19507c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a block device. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; 로 표시된 파일 또는 &lt;code&gt;s&lt;/code&gt; 로 표시된 유형 이 블록 장치를 참조하는 경우 true 입니다. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="fd1abad0e5c34ad61a53735cbc5cc10677251b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a character device, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일로 표시하면 &lt;code&gt;p&lt;/code&gt; 또는 유형이 표시하면 &lt;code&gt;s&lt;/code&gt; , 문자 장치 지칭 &lt;code&gt;false&lt;/code&gt; 그렇지. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="d5285a63242b06b02607f5c6e9847e68696cc861" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a directory, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일로 표시하면 &lt;code&gt;p&lt;/code&gt; 또는 유형이 표시된 경우 &lt;code&gt;s&lt;/code&gt; , 디렉토리를 참조 &lt;code&gt;false&lt;/code&gt; 그렇지. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="68c4658f587b6b5415938a087542db2e1d03af29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a file that is not regular file, directory, or a symlink, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일로 표시하면 &lt;code&gt;p&lt;/code&gt; 또는 유형이 표시된 경우 &lt;code&gt;s&lt;/code&gt; 일반 파일, 디렉토리 또는 심볼릭 링크,없는 파일을 참조 &lt;code&gt;false&lt;/code&gt; 그렇지. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a444768282eb1b92ae8ccae062b31180fc15fe7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a named socket. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; 로 표시된 파일 또는 &lt;code&gt;s&lt;/code&gt; 로 표시된 유형 이 명명 된 소켓을 참조하는 경우 true 입니다. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="803fdbe29d448217cc25db1a57957352277b853d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a symbolic link. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; 로 표시된 파일 또는 &lt;code&gt;s&lt;/code&gt; 로 표시된 유형 이 기호 링크를 참조하는 경우 true 입니다. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="511cfdc5bfa36df8669b7dd625f008c5da5a67e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to an empty file or directory, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일로 표시하면 &lt;code&gt;p&lt;/code&gt; 또는 유형이 표시된 경우 &lt;code&gt;s&lt;/code&gt; 빈 파일이나 디렉토리를 의미 &lt;code&gt;false&lt;/code&gt; 그렇지. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="32b18a5c93be2c1a6c3f4c03d3053ebed3c6dc6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated by &lt;code&gt;s&lt;/code&gt; refers to a regular file, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일로 표시하면 &lt;code&gt;p&lt;/code&gt; 또는 경우에 표시된 유형 &lt;code&gt;s&lt;/code&gt; 일반 파일을 참조, &lt;code&gt;false&lt;/code&gt; 그렇지. 오류가 발생하면 비 투사 과부하가 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2af666181e84886a66959b355855d2f51c65ea1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file stream has an associated file, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 파일 스트림에 연결된 파일이 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="813e4dc8203e2000a880994e7765d1083e858af9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the first range is lexicographically</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 첫 번째 범위가 사전 식인 경우 true</target>
        </trans-unit>
        <trans-unit id="774d06495aeafee6200a549323ec527e82d9d366" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given file status is a known file status.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 주어진 파일 상태가 알려진 파일 상태 이면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="eed3fc3725cb6878c89beee27879806a1bd02904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given path or file status corresponds to an existing file or directory, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경우 기존 파일이나 디렉토리에, 지정된 경로 또는 파일 상태에 대응 &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="4d2d21e1658d176456b4e1fa0d48b7bdcd9cdfd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the initialization of the input stream was successful, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 입력 스트림의 초기화에 성공한 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a34bc9ab000349629a64c34fba20806bdafc5f19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was acquired successfully, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 잠금이 성공적으로 획득되면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ff41e350b367f7a3de8bc91240afaaa1c5a0fb19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was acquired, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 잠금을 획득 한 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fed8e9e1aad9d50cab487c82cc96bf9a2d76504e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was acquired, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 잠금이 인수 한 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="56d1e54d3b787c77666338119d196f840e48e1f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the managed object has already been deleted, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 관리되는 개체가 이미 삭제 된 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="3777ed7fa1cc6d603efabbdf42cb72de04079673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the match results are ready, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경기 결과는 준비가되었는지, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="e87ee071efee810a7e378350dc083eb150c477f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the month and day combination is valid, otherwise false.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 월과 일 조합이 유효하면 true 이고, 그렇지 않으면 false입니다.</target>
        </trans-unit>
        <trans-unit id="1b5a5de7c58b60d34d97d7aa15766326699bb85c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the month value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [1, 12]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 에 저장된 월 값 이 [1, 12] 범위 에 있으면 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3326a1a8b0006cb0d54e3b41e3129045db78d1a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the new permutation is lexicographically greater than the old. &lt;code&gt;false&lt;/code&gt; if the last permutation was reached and the range was reset to the first permutation.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 새로운 순열이 사전 순으로 이전 순열보다 큰 경우 true 입니다. 마지막 순열에 도달하고 범위가 첫 번째 순열로 재설정 된 경우 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f78bf4c0f66bafc6942692c75330fcbb627cd5a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the new permutation precedes the old in lexicographical order. &lt;code&gt;false&lt;/code&gt; if the first permutation was reached and the range was reset to the last permutation.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 새로운 순열이 사전 순으로 된 이전보다 우선하면 true 입니다. 첫 번째 순열에 도달하고 범위가 마지막 순열로 재설정 된 경우 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0b7bab2f9360fc758ef20de3e35f5aac543f29b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the next increment will iterate into the currently referred directory, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 다음 증가가 현재 참조 된 디렉토리로 반복 될 경우 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83d76b62497880f5b40c16493988543b02bd069a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the ownership of the mutex has been acquired successfully, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 뮤텍스의 소유권을 성공적으로 인수 한 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="9f06c2e4e785e50910ebe499c6237c23507b67a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the path is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 경로가 비어 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e365ddb5f6f998821c36060394be37e4901853f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the preparation of the output stream was successful, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 출력 스트림의 준비가 성공하면, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="a0aff1ec423245460fcbe6f21acd5be965fe98d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range &lt;code&gt;[first, last)&lt;/code&gt; is empty or is partitioned by &lt;code&gt;p&lt;/code&gt;. &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;[first, last)&lt;/code&gt; 범위 가 비어 있거나 &lt;code&gt;p&lt;/code&gt; 로 분할 된 경우 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc6ccfbdc802abe5dfa166b5b5c67bf5853aa443" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range &lt;code&gt;[first1, last1)&lt;/code&gt; is a permutation of the range &lt;code&gt;[first2, last2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 범위 경우 &lt;code&gt;[first1, last1)&lt;/code&gt; 범위에 순열 &lt;code&gt;[first2, last2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="58330fe78a5001387856c05f256100f19ad78e79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range is</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 범위가 이면 true</target>
        </trans-unit>
        <trans-unit id="3069cc79408f4d8e829ff11d845f47c4ee4786ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the referenced object was successfully changed, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 참조 된 개체가 성공적으로 변경된 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="b5a1a4bb5d5ae5450f52f36b17307ebe8739bdd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the requested bit is set, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 요구 비트가 설정되어있는 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="9929406820c7779b502a413dafbbbaa8bbfc3bb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the shared lock ownership was acquired successfully, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 공유 잠금 소유권이 성공적으로 획득되면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3bd20391ffe9ee2218f1a41aa8879768386dd45a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the span is empty (i.e., &lt;code&gt;size() == 0&lt;/code&gt;); &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 범위가 비어 있으면 true입니다 (예 : &lt;code&gt;size() == 0&lt;/code&gt; ). 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1de7a24712053b231df65723b4ec357d6680ae2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the stream has no errors occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 스트림에 에러가없는 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48e08fcd7a0a4e227fde2ff7de33cc45fa4ca3d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the stream has no errors, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 스트림에 에러가없는 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="edac865f305e3b32d3d0afeb1b336cd21ba7d1cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string begins with the provided prefix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 문자열이 제공된 접두어로 시작하면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b0fc360715bdfada84f522a4dc85f82bff4674b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string ends with the provided suffix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 문자열이 제공된 접미어로 끝나는 경우 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="edebbec2750e41c9fa1b31f94f56a7fbec8cbd98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 문자열이 비어 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="29b119bb7d305012320621645ec7d7b6036e3bf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string view begins with the provided prefix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 문자열 뷰가 제공된 접두어로 시작하면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8a1be56d1cdaa07eed47d303ee331017a8bc6a2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string view ends with the provided suffix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 캐릭터 라인 뷰가 지정된 접미 말로 끝나는 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b463ac5fc5feae4718114e1642e26b6014b6569d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the thread object identifies an active thread of execution, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 스레드 객체가 활성 실행 스레드를 식별하면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6424740ec90619dfa2062e4901878d09eef08776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;file_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 진드기 사이의 시간이 항상 일정한 경우 true , 즉 외부 시계 조정의 경우에도 &lt;a href=&quot;file_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 호출 은 단조 증가하는 값을 반환하고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a630c6a3fed2983afdf951e2e600510907bf48e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;gps_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 진드기 사이의 시간이 항상 일정한 경우 true , 즉 외부 시계 조정의 경우에도 &lt;a href=&quot;gps_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 호출 은 단조 증가하는 값을 반환하고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2489102da4d878fbb76a0b0fdf9a1793d05fdc9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;high_resolution_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 진드기 사이의 시간이 항상 일정한 경우 true , 즉 외부 시계 조정의 경우에도 &lt;a href=&quot;high_resolution_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 호출 은 단조 증가하는 값을 반환하고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="077807af7dc617f9b0ac57a7837c08e8be3ce5e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;system_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 진드기 사이의 시간이 항상 일정한 경우 true , 즉 외부 시계 조정의 경우에도 &lt;a href=&quot;system_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 호출 은 단조 증가하는 값을 반환하고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7ea55852419a54b76982a7674a5f38c1e663d44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;tai_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 진드기 사이의 시간이 항상 일정한 경우 true , 즉 외부 시계 조정의 경우에도 &lt;a href=&quot;tai_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 호출 은 단조 증가하는 값을 반환하고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a49aea1fc683785d84be61de2bb37d61b6c8adce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;utc_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 진드기 사이의 시간이 항상 일정한 경우 true , 즉 외부 시계 조정의 경우에도 &lt;a href=&quot;utc_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 호출 은 단조 증가하는 값을 반환하고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff58a3c356ca070f6a1c170a72de9b83fe3547a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the type of this &lt;code&gt;type_info&lt;/code&gt; precedes the type of &lt;code&gt;rhs&lt;/code&gt; in the implementation's collation order.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 구현의 데이터 정렬 순서 에서이 &lt;code&gt;type_info&lt;/code&gt; 유형이 &lt;code&gt;rhs&lt;/code&gt; 유형보다 우선하면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="ad1c9abd2ced7b84aa1820e0f302f4bc7eb14bd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the underlying atomic value was successfully changed, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 기본 원자 값이 성공적으로 변경된 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="8a514e3ff53d006e7cf424694f0f2f6778f8dfda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the underlying container is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 기본이되는 컨테이너가 비어있는 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98dc0a1dbecc18d60fbdf9198447d7ec1a406274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the variant currently holds the alternative &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 변형이 현재 대체 &lt;code&gt;T&lt;/code&gt; 를 보유하고 있으면 true , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="adb2ccb5647e22ef6d4a62b2865f9acfc03d5256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the view is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 뷰가 비어있는 경우는 true , 그렇지 않은 경우 는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2cc5dc402f2a4907f306ce93d1cf2af04766403" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the weekday value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [0, 6]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 주중에 저장된 요일 값 이 [0, 6] 범위 에 있으면 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b760143e6b082f23d6f84c8f41b51e6ba7c434f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the year value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [-32767, 32767]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 년에 저장된 연도 값 이 [-32767, 32767] 범위에있는 경우 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="295f927c87d8ffc3644979227a1f101847767bb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is such an element, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이러한 요소가 있으면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ef420065b2e0c8de6d4211fa9b75fd656e687cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;year_month_day&lt;/code&gt; object represents a valid calendar date, that is, the stored year, month, and day values are all valid and the stored day value is within the number of days in the given year and month. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 &lt;code&gt;year_month_day&lt;/code&gt; 객체가 유효한 달력 날짜를 나타내는 경우 , 즉 저장된 연도, 월 및 일 값이 모두 유효하고 저장된 일 값이 주어진 연도 및 월의 일 수 내에있는 경우 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d3e10659de6feea748f52a5416bf587d731ebe80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;year_month_weekday&lt;/code&gt; object represents a valid date, that is, &lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok() &amp;amp;&amp;amp; weekday_indexed().ok()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and there are at least &lt;code&gt;index()&lt;/code&gt;&lt;code&gt;weekday()&lt;/code&gt;s in the specified year and month. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;year_month_weekday&lt;/code&gt; 의 객체가있는 유효한 날짜 나타냅니다 &lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok() &amp;amp;&amp;amp; weekday_indexed().ok()&lt;/code&gt; 이다 &lt;code&gt;true&lt;/code&gt; 적어도 거기 &lt;code&gt;index()&lt;/code&gt; &lt;code&gt;weekday()&lt;/code&gt; 들 지정된 연도 및 월에 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7dd06bf0d24487129e4b00e112b9056c8fbbc8a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this conversion facet performs no conversions, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 변환면에는 변환 수행하지 않는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="4725d92516906e6f03e996e862a13abdd8a51577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this iterator has encountered the end-of-file condition on output, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 반복자가 출력에서 ​​파일 끝 조건을 발견하면 true 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5d65e4befd976a67a21d82aec175068938f6093c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if whitespace should not be skipped</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 공백을 건너 뛰지 않으면 true</target>
        </trans-unit>
        <trans-unit id="a83d2169879b0aa42483de374dcd2ac1ed3bab42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try-catch&lt;/code&gt; block</source>
          <target state="translated">&lt;code&gt;try-catch&lt;/code&gt; 블록</target>
        </trans-unit>
        <trans-unit id="5bd6fd9312a844bbe6fce212b1683528ce3069e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; 블록</target>
        </trans-unit>
        <trans-unit id="42bc2057e5dbe568da2aabf57ac10b34a9cb934f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;compound-statementhandler-sequence</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt;compound-statementhandler-sequence</target>
        </trans-unit>
        <trans-unit id="a44587a235521ddc1cfdf9d009aa4374ac981518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;ctor-initializer(optional)compound-statementhandler-sequence</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt;ctor-initializer(optional)compound-statementhandler-sequence</target>
        </trans-unit>
        <trans-unit id="82eeb6a7ab38369f465c1d77559d0a5ec2f5ac15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts-&amp;gt;tv_nsec&lt;/code&gt; member is set to the integral number of nanoseconds, rounded to the resolution of the system clock</source>
          <target state="translated">&lt;code&gt;ts-&amp;gt;tv_nsec&lt;/code&gt; 멤버는 시스템 시계의 해상도로 반올림 된 정수 나노초 수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3d525bc62418789da89010b3ec4eb3ba2c35c7de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts-&amp;gt;tv_sec&lt;/code&gt; is set to the number of seconds since an implementation defined epoch, truncated to a whole value</source>
          <target state="translated">&lt;code&gt;ts-&amp;gt;tv_sec&lt;/code&gt; 는 구현 정의 에포크 (epoch) 전체 값으로 잘린 이후 초 수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="06d3e1b60310229ce03023299f1789fad98dd5bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type T::*&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type T::*&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="d397f9b3cca04459a457f0f4508319254c8ba900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(T)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(T)&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="e9b225142a59874a5af48fb2cb2ff6c2036a07f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(T::*)()&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(T::*)()&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="a824328744413c39d2f7793ad3177ac500339f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(T::*)(T)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(T::*)(T)&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="4a584059349e3a582dae3c67017bbcdab8580b31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(type::*)(T)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(type::*)(T)&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="aafc0b5f36ff54f028806207775987efb8d8b426" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is a value of type &lt;a href=&quot;event&quot;&gt;&lt;code&gt;ios_base::event&lt;/code&gt;&lt;/a&gt; which indicates the type of the event that will invoke this callback.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 은이 콜백을 호출 할 이벤트의 유형을 나타내는 &lt;a href=&quot;event&quot;&gt; &lt;code&gt;ios_base::event&lt;/code&gt; &lt;/a&gt; 유형의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="c7b7c304bd4784c39254973694bcec11e330084d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is an &lt;a href=&quot;array#Arrays_of_unknown_bound&quot;&gt;array of unknown bound&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 은 &lt;a href=&quot;array#Arrays_of_unknown_bound&quot;&gt;알 수없는 바인딩&lt;/a&gt; 의 배열입니다</target>
        </trans-unit>
        <trans-unit id="2995620a4f91ca2e21ef7e3da750d3147d16c3a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type[i]&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type[i]&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="1dc0b9ef834cb16bbd5ef2267cd0cc18088cc036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type_identity&lt;/code&gt; can be used to block &lt;a href=&quot;../language/template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;type_identity&lt;/code&gt; 를 사용하여 &lt;a href=&quot;../language/template_argument_deduction&quot;&gt;템플릿 인수 공제&lt;/a&gt; 를 차단할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e63b5f60b1be86a2b3588590f005f1ac675fed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typedef&lt;/code&gt; - creates an alias that can be used anywhere in place of a (possibly complex) type name.</source>
          <target state="translated">&lt;code&gt;typedef&lt;/code&gt; - (아마도 복잡한) 유형 이름 대신 어디에서나 사용할 수있는 별명을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="de7a9779f47003ed47e1df85596570bc18454a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typedef&lt;/code&gt; declaration</source>
          <target state="translated">&lt;code&gt;typedef&lt;/code&gt; 선언</target>
        </trans-unit>
        <trans-unit id="3de2cf9e83fbd80ae09f8fe29fd226e4ebadc219" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid(&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;typeid(&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac3cb88475920d8182df9d2ed2d5990f8869ec12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid(&lt;/code&gt;type&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;typeid(&lt;/code&gt;type&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="adf6128ae48441019db83a6f7bb8b02694f423e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid(T)&lt;/code&gt; if the stored function has type &lt;code&gt;T&lt;/code&gt;, otherwise &lt;code&gt;typeid(void)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;typeid(T)&lt;/code&gt; 저장 기능은 입력이 있으면 &lt;code&gt;T&lt;/code&gt; 를 달리 &lt;code&gt;typeid(void)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="517d87c5c43705d5a420aca2ea6263ee06628131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;typeid&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="b37a4b3b078f5755746bed488bc1678080b93c5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typename|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</source>
          <target state="translated">&lt;code&gt;typename|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</target>
        </trans-unit>
        <trans-unit id="d08f8111368f1ddb9c373cbdc2bcbe28b9ece2bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tzdb_list&lt;/code&gt; is a singleton list of &lt;code&gt;std::chrono::tzdb&lt;/code&gt;s, each of which represents a copy of the IANA time zone database. Users cannot construct a &lt;code&gt;tzdb_list&lt;/code&gt; and can only obtain access to one via the &lt;code&gt;std::chrono::get_tzdb_list&lt;/code&gt; free function.</source>
          <target state="translated">&lt;code&gt;tzdb_list&lt;/code&gt; 는 &lt;code&gt;std::chrono::tzdb&lt;/code&gt; 의 단일 목록이며 , 각 목록은 IANA 표준 시간대 데이터베이스의 복사본을 나타냅니다. 사용자는 &lt;code&gt;tzdb_list&lt;/code&gt; 를 구성 할 수 없으며 &lt;code&gt;std::chrono::get_tzdb_list&lt;/code&gt; free 함수 를 통해서만 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a9128a24fc7b8ef6f6bf0d2717e3f62e0b25563" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tzdb_list&lt;/code&gt; is intended to be implementable as a singly linked list, and its interface resembles that of &lt;code&gt;&lt;a href=&quot;../../container/forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;. It has no &lt;code&gt;before_begin()&lt;/code&gt;, however, and so it is not possible to erase the first element.</source>
          <target state="translated">&lt;code&gt;tzdb_list&lt;/code&gt; 는 단일 링크 목록으로 구현할 수 있으며 인터페이스는 &lt;code&gt;&lt;a href=&quot;../../container/forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt; 와 유사합니다 . 이것은 전혀 없다 &lt;code&gt;before_begin()&lt;/code&gt; 는 첫번째 요소를 삭제하는 것은 불가능하지만, 및 정도.</target>
        </trans-unit>
        <trans-unit id="7f99d130506cd61b59950fb41e91e4a928c2778a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u.time_since_epoch() - t.time_since_epoch()&lt;/code&gt; is equal to the number of leap seconds that was inserted between &lt;code&gt;t&lt;/code&gt; and 1 January 1970. If &lt;code&gt;t&lt;/code&gt; is the exact date of a leap second insertion, that leap second is counted as inserted.</source>
          <target state="translated">&lt;code&gt;u.time_since_epoch() - t.time_since_epoch()&lt;/code&gt; 사이에 삽입 된 윤초의 수와 동일한 &lt;code&gt;t&lt;/code&gt; 경우 1970 년 1 월 1 &lt;code&gt;t&lt;/code&gt; 는 삽입으로 도약 2 삽입의 정확한 날짜, 즉 윤초가 카운트된다.</target>
        </trans-unit>
        <trans-unit id="cfe2c5b0ce0658607dcfb726e551be62e7f65f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u16streampos&lt;/code&gt;(since C++11)</source>
          <target state="translated">&lt;code&gt;u16streampos&lt;/code&gt; (C ++ 11부터)</target>
        </trans-unit>
        <trans-unit id="c4814eaac3d4ecd2429b4a776bb615b582ba3501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u2&lt;/code&gt;, a distinct object of type &lt;code&gt;T&lt;/code&gt; equal to &lt;code&gt;rv&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;u2&lt;/code&gt; &lt;code&gt;rv&lt;/code&gt; 와 동일한 &lt;code&gt;T&lt;/code&gt; 유형의 고유 한 객체 u2</target>
        </trans-unit>
        <trans-unit id="57db0a8466ac43fcd90a34e0c4547ad7239f6411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u32streampos&lt;/code&gt;(since C++11)</source>
          <target state="translated">&lt;code&gt;u32streampos&lt;/code&gt; (C ++ 11부터)</target>
        </trans-unit>
        <trans-unit id="36c9a8281869ac88661281bdab1dfa3ffd9a9cc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u8&lt;/code&gt;&lt;code&gt;&quot;&lt;/code&gt; (unescaped_character|escaped_character)* &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u8&lt;/code&gt; &lt;code&gt;&quot;&lt;/code&gt; (unescaped_character | escaped_character) * &lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be344e3f5f32c095aa25477b5153de7ab3de0a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u8&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u8&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0aed6e2a7b5f7ea363afed888d00510f5d4d0c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u8streampos&lt;/code&gt;(since C++20)</source>
          <target state="translated">&lt;code&gt;u8streampos&lt;/code&gt; (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="b862923dfef5545e9fd093c00ccc69ff73d8717e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; has the same elements and an equal allocator as &lt;code&gt;rv&lt;/code&gt; had before the construction</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 는 건설 전에 &lt;code&gt;rv&lt;/code&gt; 와 동일한 요소와 동일한 할당자를 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="6da56dfd30f6deec8b4520bda102f2fe373ebdb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; is not modified</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 수정되지 않았다</target>
        </trans-unit>
        <trans-unit id="4fd56cfe051500d67db105f75e508c8c6a419ba0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; or &lt;code&gt;U&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 또는 &lt;code&gt;U&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7ab55407db5281155ee5bf30c58dbf9293ba77e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, a expression of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; , &lt;code&gt;T&lt;/code&gt; 유형의 표현식</target>
        </trans-unit>
        <trans-unit id="051bf391911e4aab231cebc9601fc1c13c6c795f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, an &lt;a href=&quot;../language/value_category&quot;&gt;lvalue&lt;/a&gt; expression of type &lt;code&gt;Key&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; , &lt;code&gt;Key&lt;/code&gt; 타입 의 &lt;a href=&quot;../language/value_category&quot;&gt;lvalue&lt;/a&gt; 표현</target>
        </trans-unit>
        <trans-unit id="d2fda841c0ca87e969fe78f01d450f12e7c89faf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, an arbitrary identifier</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; , 임의의 식별자</target>
        </trans-unit>
        <trans-unit id="4a19cf1d961c56713e870300433a23a8ba99133c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, an object of type &lt;code&gt;X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; , &lt;code&gt;X&lt;/code&gt; 유형의 객체</target>
        </trans-unit>
        <trans-unit id="30ee6b8b1a2bbac26dc6881470d3e7953a7748c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;&lt;code&gt;&quot;&lt;/code&gt; (unescaped_character|escaped_character)* &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; &lt;code&gt;&quot;&lt;/code&gt; (unescaped_character | escaped_character) * &lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6913183b4af1099459d7623d44ba81c41567a296" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ae0f9caeed3c71ed2060f7d905673464c7a2045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_function&lt;/code&gt; does not define &lt;code&gt;operator()&lt;/code&gt;; it is expected that derived classes will define this. &lt;code&gt;unary_function&lt;/code&gt; provides only two types - &lt;code&gt;argument_type&lt;/code&gt; and &lt;code&gt;result_type&lt;/code&gt; - defined by the template parameters.</source>
          <target state="translated">&lt;code&gt;unary_function&lt;/code&gt; 은 &lt;code&gt;operator()&lt;/code&gt; 정의하지 않습니다 . 파생 클래스가이를 정의 할 것으로 예상됩니다. &lt;code&gt;unary_function&lt;/code&gt; 은 템플리트 매개 변수로 정의 된 &lt;code&gt;argument_type&lt;/code&gt; 및 &lt;code&gt;result_type&lt;/code&gt; 의 두 가지 유형 만 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1ad2a10f0c1c9ea5ce7f234bd81d7359b3bf436d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_function&lt;/code&gt; is a base class for creating function objects with one argument.</source>
          <target state="translated">&lt;code&gt;unary_function&lt;/code&gt; 은 하나의 인수로 함수 객체를 작성하기위한 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="e1dc8652926eb2e6f9767a80ba13142785009506" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_function&lt;/code&gt; is deprecated in C++11.</source>
          <target state="translated">&lt;code&gt;unary_function&lt;/code&gt; 은 C ++ 11에서 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cba5e8f5350c003d5c58ebd4b2607495cbf39edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_negate&lt;/code&gt; is a wrapper function object returning the complement of the unary predicate it holds.</source>
          <target state="translated">&lt;code&gt;unary_negate&lt;/code&gt; 는 보유하고있는 단항 술어의 보수를 리턴하는 랩퍼 함수 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="4b5a9365f8731c0cddb4511ae19e3c99dda4774b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_negate&lt;/code&gt; objects are easily constructed with helper function &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unary_negate&lt;/code&gt; 객체는 &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt; 도우미 함수를 사용하여 쉽게 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="90ef3f8e5496a5592ae17a5cc6d803a81d4acc08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; and &lt;code&gt;binary_op&lt;/code&gt; must not have side effects.</source>
          <target state="translated">&lt;code&gt;unary_op&lt;/code&gt; 및 &lt;code&gt;binary_op&lt;/code&gt; 에는 부작용이 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="1575dd8d6c070f48e9f2e57b1ba9326e37fb9787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; and &lt;code&gt;binary_op&lt;/code&gt; must not invalidate any iterators, including the end iterators, or modify any elements of the ranges involved.</source>
          <target state="translated">&lt;code&gt;unary_op&lt;/code&gt; 및 &lt;code&gt;binary_op&lt;/code&gt; 는 종료 반복자를 포함하여 반복자를 무효화하거나 관련된 범위의 요소를 수정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e64e195dd5d60a5b1b5780ff083112a2c11f8a45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; and &lt;code&gt;binary_op&lt;/code&gt; shall not invalidate iterators (including the end iterators) or subranges, nor modify elements in the ranges [first, last) or [d_first, d_first + (last - first)). Otherwise, the behavior is undefined.</source>
          <target state="translated">&lt;code&gt;unary_op&lt;/code&gt; 및 &lt;code&gt;binary_op&lt;/code&gt; 는 반복자 (종료 반복자를 포함) 또는 하위 범위를 무효화하거나 [first, last) 또는 [d_first, d_first + (last-first)) 범위의 요소를 수정하지 않아야합니다. 그렇지 않으면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a8104674065f73930b5cea90af0e6dec99838d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; is not applied to &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unary_op&lt;/code&gt; 는 &lt;code&gt;init&lt;/code&gt; 에 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="87af23090c499fa6f26f76442b03aa86764efc01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union&lt;/code&gt;&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; &lt;code&gt;{ &lt;/code&gt; 회원 사양 &lt;code&gt;} &lt;/code&gt; &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52e7d275f8c45e1582856069b6a949e604a62624" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union&lt;/code&gt;attrclass-head-name&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; attrclass 헤드 이름 &lt;code&gt;{ &lt;/code&gt; 회원-사양 &lt;code&gt;} &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed95d00a85745136c8a23d993a6e6b42d1713b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::element_type(*)[]&lt;/code&gt; is convertible to &lt;code&gt;element_type(*)[]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::element_type(*)[]&lt;/code&gt; 하는 컨버터블 &lt;code&gt;element_type(*)[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="518e3975526ba1045b4424be875670889b42cae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::pointer&lt;/code&gt; is the same type as &lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::element_type*&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::pointer&lt;/code&gt; 는 &lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::element_type*&lt;/code&gt; 과 동일한 유형입니다.</target>
        </trans-unit>
        <trans-unit id="b9fe7af9266774360734e8f967fee38bcf7c2331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_ptr&lt;/code&gt;s to compare</source>
          <target state="translated">&lt;code&gt;unique_ptr&lt;/code&gt; 비교</target>
        </trans-unit>
        <trans-unit id="6b9dbe1f32aa4084ee5ab7dc348eda3409980535" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlock()&lt;/code&gt; is usually not called directly: &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../lock_guard&quot;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt; are used to manage exclusive locking.</source>
          <target state="translated">&lt;code&gt;unlock()&lt;/code&gt; 은 일반적으로 직접 호출되지 않습니다. &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../lock_guard&quot;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt; 는 독점 잠금을 관리하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="35662fb8108ff91f9281162bf4be4f02ae5e7b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlock_shared()&lt;/code&gt; is usually not called directly: &lt;code&gt;&lt;a href=&quot;../shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt; is used to manage shared locking.</source>
          <target state="translated">&lt;code&gt;unlock_shared()&lt;/code&gt; 는 일반적으로 직접 호출되지 않습니다. &lt;code&gt;&lt;a href=&quot;../shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt; 은 공유 잠금을 관리하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f6690db3689521fcd10086053cfb4efd5422d12f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned char&lt;/code&gt; - type for unsigned character representation. Also used to inspect &lt;a href=&quot;objects&quot;&gt;object representations&lt;/a&gt; (raw memory).</source>
          <target state="translated">&lt;code&gt;unsigned char&lt;/code&gt; -부호없는 문자 표현을위한 유형입니다. &lt;a href=&quot;objects&quot;&gt;객체 표현&lt;/a&gt; (원시 메모리) 을 검사하는 데에도 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="34d10a02b0359dc23adffdddaee386ca253c6f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned char&lt;/code&gt;, &lt;code&gt;char8_t&lt;/code&gt;(since C++20) or &lt;code&gt;unsigned short&lt;/code&gt; can be converted to &lt;code&gt;int&lt;/code&gt; if it can hold its entire value range, and &lt;code&gt;unsigned int&lt;/code&gt; otherwise;</source>
          <target state="translated">&lt;code&gt;unsigned char&lt;/code&gt; , &lt;code&gt;char8_t&lt;/code&gt; (C ++ 20부터) 또는 &lt;code&gt;unsigned short&lt;/code&gt; 는 전체 값 범위를 보유 할 수 있으면 &lt;code&gt;int&lt;/code&gt; 로 변환되고 그렇지 않으면 &lt;code&gt;unsigned int&lt;/code&gt; 로 변환 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e75b86f035bafc5645aea51fb33b9d4a7420a089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long int&lt;/code&gt;(since C++11)</source>
          <target state="translated">&lt;code&gt;unsigned long int&lt;/code&gt; (C ++ 11부터)</target>
        </trans-unit>
        <trans-unit id="a0721b84a07f82cdd47d16de3f220f4e833f44da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long int&lt;/code&gt;(until C++11)</source>
          <target state="translated">&lt;code&gt;unsigned long int&lt;/code&gt; (C ++ 11까지)</target>
        </trans-unit>
        <trans-unit id="ae7589747cd83f594d7fca7a6db8037e86e65ae4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long long int&lt;/code&gt;(since C++11)</source>
          <target state="translated">&lt;code&gt;unsigned long long int&lt;/code&gt; (C ++ 11부터)</target>
        </trans-unit>
        <trans-unit id="7069f0c151b94b027488e32f2e344c48fcf6ce4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long long int&lt;/code&gt;(since C++11).</source>
          <target state="translated">&lt;code&gt;unsigned long long int&lt;/code&gt; (C ++ 11부터).</target>
        </trans-unit>
        <trans-unit id="ab52e38281fe2bd6f7decfe23d4fba0844cb64ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long&lt;/code&gt; and &lt;code&gt;unsigned long long&lt;/code&gt; respectively</source>
          <target state="translated">&lt;code&gt;unsigned long&lt;/code&gt; 와 &lt;code&gt;unsigned long long&lt;/code&gt; 각각</target>
        </trans-unit>
        <trans-unit id="8455afbdd956b2a11aa3ea45d77ef2c6a1a600d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned&lt;/code&gt; - target type will have unsigned representation</source>
          <target state="translated">&lt;code&gt;unsigned&lt;/code&gt; -대상 유형에는 부호없는 표현이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c057ee1fbd30414bcac97819eb080010b5363d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned&lt;/code&gt; type modifier</source>
          <target state="translated">&lt;code&gt;unsigned&lt;/code&gt; 유형 수정 자</target>
        </trans-unit>
        <trans-unit id="57eb3c7ce1dddb1b2f7506cfccc04e826d27be1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; is not thread-safe, and cannot be accessed from multiple threads simultaneously; use &lt;a href=&quot;synchronized_pool_resource&quot;&gt;&lt;code&gt;synchronized_pool_resource&lt;/code&gt;&lt;/a&gt; if access from multiple threads is required.</source>
          <target state="translated">&lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; 는 스레드로부터 안전하지 않으며 여러 스레드에서 동시에 액세스 할 수 없습니다. 여러 스레드에서 액세스해야하는 경우 &lt;a href=&quot;synchronized_pool_resource&quot;&gt; &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a6fea5bc72f1892d15a8a447790f0ebd7ee1a8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;&lt;code&gt;namespace&lt;/code&gt;ns_name&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;&lt;code&gt;namespace&lt;/code&gt;ns_name&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d278c9edabfb9eda27d65de107001905dae6703c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;&lt;code&gt;typename&lt;/code&gt;(optional)nested-name-specifierunqualified-id&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;&lt;code&gt;typename&lt;/code&gt;(optional)nested-name-specifierunqualified-id&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa5e91139c765ba4f918441b3fb66f7d282dbe3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;declarator-list&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;declarator-list&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6f798a4897c77634336f49cdfbbb1fa0bae3515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;identifierattr(optional)&lt;code&gt;=&lt;/code&gt;type-id&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;identifierattr(optional)&lt;code&gt;=&lt;/code&gt;type-id&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d3b795ed7956b8bf4a1df7c2360d71f258a32e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;ns_name&lt;code&gt;::&lt;/code&gt;name&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;ns_name&lt;code&gt;::&lt;/code&gt;name&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52d01fa5e2d0726e451cf4dabccd494e0f4a8b28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utc_clock&lt;/code&gt; meets the &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; requirements. It does not meet the &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; requirements unless the implementation can guarantee that &lt;a href=&quot;utc_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; does not throw an exception.</source>
          <target state="translated">&lt;code&gt;utc_clock&lt;/code&gt; 은 &lt;a href=&quot;../named_req/clock&quot;&gt;클럭&lt;/a&gt; 요구 사항을 충족합니다 . 구현에서 &lt;a href=&quot;utc_clock/now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 가 예외를 발생시키지 않는다고 보장 할 수 없으면 &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; 요구 사항을 충족 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="80f844ce61486a912c1ac6304ab652935722cd1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, a lvalue of type (possibly &lt;code&gt;const&lt;/code&gt;) &lt;code&gt;T&lt;/code&gt; or an rvalue of type &lt;code&gt;const T&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; 입력의 좌변 (아마도 &lt;code&gt;const&lt;/code&gt; ) &lt;code&gt;T&lt;/code&gt; 또는 유형의 r- 수치 &lt;code&gt;const T&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="063424f5eee45c47ae79839aaa6c43b3b888a22a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, an &lt;a href=&quot;../language/value_category&quot;&gt;lvalue&lt;/a&gt; expression of type &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;const T&lt;/code&gt; or an &lt;a href=&quot;../language/value_category&quot;&gt;rvalue&lt;/a&gt; expression of type &lt;code&gt;const T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; , &lt;a href=&quot;../language/value_category&quot;&gt;좌변&lt;/a&gt; 형의 발현 &lt;code&gt;T&lt;/code&gt; 또는 &lt;code&gt;const T&lt;/code&gt; 또는 &lt;a href=&quot;../language/value_category&quot;&gt;r- 수치의&lt;/a&gt; 유형 발현 &lt;code&gt;const T&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91503257136738c35307458d70330377812a8a3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, an lvalue of type &lt;code&gt;E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; , &lt;code&gt;E&lt;/code&gt; 유형의 lvalue</target>
        </trans-unit>
        <trans-unit id="ba07318fc0c4f1af8149efdc02dbcd4b652776bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, an object of type &lt;code&gt;const X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; , &lt;code&gt;const X&lt;/code&gt; 유형의 객체</target>
        </trans-unit>
        <trans-unit id="e34c4416f39e0878b444ba859de73a5b58e49d29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="29259b082f4f35d83ab5951b7527700fdf0f1013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;va_list&lt;/code&gt; is a complete object type suitable for holding the information needed by the macros &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;va_list&lt;/code&gt; 는 매크로 &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt; 에 필요한 정보를 보유하는 데 적합한 완전한 객체 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="98b885d27c78d93d337bfa1d653693a6de532cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;va_start&lt;/code&gt; is required to support &lt;code&gt;parm_n&lt;/code&gt; with overloaded &lt;code&gt;operator&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;va_start&lt;/code&gt; 오버로드 된 &lt;code&gt;operator&amp;amp;&lt;/code&gt; &lt;code&gt;parm_n&lt;/code&gt; 을 지원하려면 va_start 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="244ea60427b7ea36d5e364f7880ab7ee9eeba132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;va_start&lt;/code&gt; should be invoked with an instance to a valid &lt;code&gt;&lt;a href=&quot;va_list&quot;&gt;va_list&lt;/a&gt;&lt;/code&gt; object &lt;code&gt;ap&lt;/code&gt; before any calls to &lt;code&gt;&lt;a href=&quot;va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;va_start&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt; 를 호출하기 전에 유효한 &lt;code&gt;&lt;a href=&quot;va_list&quot;&gt;va_list&lt;/a&gt;&lt;/code&gt; 객체 &lt;code&gt;ap&lt;/code&gt; 에 대한 인스턴스와 함께 호출되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="de5e8da9dfaece9fca5c0e0b64e6fbf9c069f912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;. If the corresponding comparison expression between &lt;code&gt;*opt&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; is not well-formed, or if its result is not convertible to &lt;code&gt;bool&lt;/code&gt;, the behavior is undefined.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; . &lt;code&gt;*opt&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; 사이의 해당 비교 표현식의 형식 이 올바르지 않거나 결과가 &lt;code&gt;bool&lt;/code&gt; 로 변환 할 수없는 경우 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f09f818c7afe536609ebe1148466b7ceb9252704" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_compare&lt;/code&gt;(C++17)</source>
          <target state="translated">&lt;code&gt;value_compare&lt;/code&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="96ec5806d68c61f73bf0a2d99a0203b3053cc09a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt; - the type of the values that can be obtained by dereferencing the iterator. This type is &lt;code&gt;void&lt;/code&gt; for output iterators.</source>
          <target state="translated">&lt;code&gt;value_type&lt;/code&gt; - 반복자를 역 참조하여 얻을 수있는 값의 유형 이 타입은 출력 반복자 에게는 &lt;code&gt;void&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3b203cb9a14e449e95d3ccffdaa7838d6fe39b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt; is intended for use with &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; types such as iterators. It is not intended for use with ranges.</source>
          <target state="translated">&lt;code&gt;value_type&lt;/code&gt; 은 반복자와 같은 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 유형과 함께 사용하기위한 것입니다 . 범위와 함께 사용하도록 고안되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="cc796815e522cfcbede9c22e925c36e36dbbae67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;(only for &lt;code&gt;atomic&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt;and &lt;code&gt;atomic&amp;lt;&lt;i&gt;Floating&lt;/i&gt;&amp;gt;&lt;/code&gt;(since C++20) specializations)</source>
          <target state="translated">&lt;code&gt;value_type&lt;/code&gt; ( &lt;code&gt;atomic&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;atomic&amp;lt;&lt;i&gt;Floating&lt;/i&gt;&amp;gt;&lt;/code&gt; (C ++ 20 이후) 전문화 에만 해당 )</target>
        </trans-unit>
        <trans-unit id="2d677ae77ff8d9f5ec51a8a1019d4c25d92a1993" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;(only for &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Floating&lt;/i&gt;&amp;gt;&lt;/code&gt; specializations)</source>
          <target state="translated">&lt;code&gt;value_type&lt;/code&gt; ( &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Floating&lt;/i&gt;&amp;gt;&lt;/code&gt; 전문화 에만 해당 )</target>
        </trans-unit>
        <trans-unit id="b62290441f5cde5f7a330f16c5c46b5b2fa72c5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;, the type denoted by &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&amp;lt;It&amp;gt;::value_type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;value_type&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&amp;lt;It&amp;gt;::value_type&lt;/code&gt; &amp;lt;It&amp;gt; :: value_type으로 표시되는 유형</target>
        </trans-unit>
        <trans-unit id="7a714e5c088704d678835294f3bc2b29889803c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;&lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; and &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt; into &lt;code&gt;X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;value_type&lt;/code&gt; &lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; 및 &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt; 을 &lt;code&gt;X&lt;/code&gt; 로</target>
        </trans-unit>
        <trans-unit id="09ff06c5aabc30348413625a644624552c13d1e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variant&lt;/code&gt; objects whose values to swap</source>
          <target state="translated">&lt;code&gt;variant&lt;/code&gt; 값을 바꿀 변형 객체</target>
        </trans-unit>
        <trans-unit id="d8b28e8b4fe0cba53749b278031f1b3ab35c4e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; specific modifiers</source>
          <target state="translated">&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; 특정 한정자</target>
        </trans-unit>
        <trans-unit id="f239366cc019d108dd7f6f29b11e25d94f017d5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;virtual&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;virtual&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38054e2eb7f573a496877dd86276cd670d819f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void*&lt;/code&gt; to any pointer-to-object type</source>
          <target state="translated">&lt;code&gt;void*&lt;/code&gt; 포인터-객체 유형에 대한 void *</target>
        </trans-unit>
        <trans-unit id="26b97b7b91d0799c052220d69f6aba03b7b5ec9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; - type with an empty set of values. It is an &lt;a href=&quot;incomplete_type&quot;&gt;incomplete type&lt;/a&gt; that cannot be completed (consequently, objects of type &lt;code&gt;void&lt;/code&gt; are disallowed). There are no &lt;a href=&quot;array&quot;&gt;arrays&lt;/a&gt; of &lt;code&gt;void&lt;/code&gt;, nor &lt;a href=&quot;reference&quot;&gt;references&lt;/a&gt; to &lt;code&gt;void&lt;/code&gt;. However, &lt;a href=&quot;pointer#Pointers_to_void&quot;&gt;pointers to &lt;code&gt;void&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt; returning type &lt;code&gt;void&lt;/code&gt; (</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; - 값이 비어있는 타입. 그것이 인 &lt;a href=&quot;incomplete_type&quot;&gt;불완전 형&lt;/a&gt; 완료 될 수 없다 (결과적으로, 유형의 오브젝트 &lt;code&gt;void&lt;/code&gt; 허용된다). 어떤이 없습니다 &lt;a href=&quot;array&quot;&gt;배열&lt;/a&gt; 의 &lt;code&gt;void&lt;/code&gt; ,도 &lt;a href=&quot;reference&quot;&gt;참고&lt;/a&gt; 로 &lt;code&gt;void&lt;/code&gt; . 그러나 &lt;a href=&quot;pointer#Pointers_to_void&quot;&gt; &lt;code&gt;void&lt;/code&gt; 에&lt;/a&gt; 대한 포인터 및 &lt;code&gt;void&lt;/code&gt; 유형을 반환하는 &lt;a href=&quot;function&quot;&gt;함수&lt;/a&gt; (</target>
        </trans-unit>
        <trans-unit id="ae27c766ee93a054f5ae2c4fa3798f5058d167fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; and the other is a pointer to</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 다른 하나는</target>
        </trans-unit>
        <trans-unit id="0e916546e65b0242d16066ab188eac85febd1b6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 타입</target>
        </trans-unit>
        <trans-unit id="ef12088f7d72e3b257eb6db30f55f98b13ded92c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt;&quot;, where</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; &quot;, 여기서</target>
        </trans-unit>
        <trans-unit id="00589ca6c611df0e84ab6cd8016e6600cebd5b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;volatile&lt;/code&gt; &amp;lt; &lt;code&gt;const volatile&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;volatile&lt;/code&gt; &amp;lt; &lt;code&gt;const volatile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3781ea6e1d03e237f25c89033ea5d9eed218bdd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;volatile&lt;/code&gt; - defines that the type is</source>
          <target state="translated">&lt;code&gt;volatile&lt;/code&gt; -유형이</target>
        </trans-unit>
        <trans-unit id="f87be0d785341a8c6e6e48ac9a96cf29d54b7542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;volatile&lt;/code&gt; type qualifier</source>
          <target state="translated">&lt;code&gt;volatile&lt;/code&gt; 타입 한정자</target>
        </trans-unit>
        <trans-unit id="dba989cd478e2d2eb7af631f638f0f9fd3fb9b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vptr&lt;/code&gt;, a value of type &lt;code&gt;allocator_traits&amp;lt;A&amp;gt;::void_pointer&lt;/code&gt;, obtained by conversion from &lt;code&gt;ptr&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;vptr&lt;/code&gt; &lt;code&gt;ptr&lt;/code&gt; 에서 변환하여 얻은 &lt;code&gt;allocator_traits&amp;lt;A&amp;gt;::void_pointer&lt;/code&gt; 유형의 값인 vptr</target>
        </trans-unit>
        <trans-unit id="deb0dc0dea1148518594b201d69879ee202d263d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w1&lt;/code&gt; and &lt;code&gt;w2&lt;/code&gt;, objects of type &lt;code&gt;X::void_pointer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;w1&lt;/code&gt; 및 &lt;code&gt;w2&lt;/code&gt; , 타입의 객체 &lt;code&gt;X::void_pointer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd271a977e2bf6d3ca2dd5391bcb65ba6253f2a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; causes the current thread to block until the condition variable is notified or a spurious wakeup occurs, optionally looping until some predicate is satisfied.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; 는 조건 변수가 통지되거나 가짜 웨이크 업이 발생할 때까지 현재 스레드가 차단되도록하며 선택적으로 일부 술어가 충족 될 때까지 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="1860d86e57814b34cd16a0d8e560a229e623332b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait_until&lt;/code&gt; causes the current thread to block until the condition variable is notified, a specific time is reached, or a spurious wakeup occurs, optionally looping until some predicate is satisfied.</source>
          <target state="translated">&lt;code&gt;wait_until&lt;/code&gt; 은 조건 변수가 통지되거나 특정 시간에 도달하거나 가짜 웨이크 업이 발생할 때까지 현재 스레드를 차단하여 선택적으로 일부 술어가 충족 될 때까지 반복합니다.</target>
        </trans-unit>
        <trans-unit id="283727972081fa440406b238620226685ae0c0f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait_until&lt;/code&gt; waits for a result to become available. It blocks until specified &lt;code&gt;timeout_time&lt;/code&gt; has been reached or the result becomes available, whichever comes first. The return value indicates why &lt;code&gt;wait_until&lt;/code&gt; returned.</source>
          <target state="translated">&lt;code&gt;wait_until&lt;/code&gt; 은 결과가 나오기를 기다립니다. 지정된 &lt;code&gt;timeout_time&lt;/code&gt; 에 도달하거나 결과가 사용 가능 해질 때까지 차단합니다 . 리턴 값은 &lt;code&gt;wait_until&lt;/code&gt; 이 리턴 된 이유를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="227f3f7a4e52bd1b39031247c70c318577230e3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wchar_t&lt;/code&gt; - type for wide character representation (see &lt;a href=&quot;../string/wide&quot;&gt;wide strings&lt;/a&gt;). Required to be large enough to represent any supported character code point (32 bits on systems that support Unicode. A notable exception is Windows, where wchar_t is 16 bits and holds UTF-16 code units) It has the same size, signedness, and alignment as one of the integer types, but is a distinct type.</source>
          <target state="translated">&lt;code&gt;wchar_t&lt;/code&gt; - 와이드 문자 표현을위한 유형 ( &lt;a href=&quot;../string/wide&quot;&gt;와이드 문자열&lt;/a&gt; 참조 ). 지원되는 문자 코드 포인트 (유니 코드를 지원하는 시스템의 32 비트)를 나타내기에 충분히 커야합니다. wchar_t가 16 비트이고 UTF-16 코드 단위를 보유하는 Windows는 예외입니다. 크기, 부호 및 정렬이 동일합니다. 정수 유형 중 하나이지만 고유 한 유형입니다.</target>
        </trans-unit>
        <trans-unit id="bbbe03b5b4f46b5c3d05df7f45e8551e7692ae91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wchar_t&lt;/code&gt;, &lt;code&gt;char16_t&lt;/code&gt;, and &lt;code&gt;char32_t&lt;/code&gt;(since C++11) can be converted to the first type from the following list able to hold their entire value range: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;unsigned long&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;, &lt;code&gt;unsigned long long&lt;/code&gt;(since C++11);</source>
          <target state="translated">&lt;code&gt;wchar_t&lt;/code&gt; , &lt;code&gt;char16_t&lt;/code&gt; 및 &lt;code&gt;char32_t&lt;/code&gt; (C ++ 11부터)는 다음 목록에서 첫 번째 유형으로 변환하여 전체 값 범위를 보유 할 수 있습니다. &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;unsigned int&lt;/code&gt; , &lt;code&gt;long&lt;/code&gt; , &lt;code&gt;unsigned long&lt;/code&gt; , &lt;code&gt;long long&lt;/code&gt; , &lt;code&gt;unsigned long long&lt;/code&gt; (since C ++ 11);</target>
        </trans-unit>
        <trans-unit id="a1e47e76d1a12efd124c4f04f389d0690efb628b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weak_ptr::owner_before&lt;/code&gt; isn't noexcept while its &lt;code&gt;shared_ptr&lt;/code&gt; counterpart is</source>
          <target state="translated">&lt;code&gt;weak_ptr::owner_before&lt;/code&gt; 는 norecept 가 아닌 반면, &lt;code&gt;shared_ptr&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="cfdcbd980369eeb475f8a897f011a0a46e4015b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weak_this&lt;/code&gt;(private)(C++17)</source>
          <target state="translated">&lt;code&gt;weak_this&lt;/code&gt;(private)(C++17)</target>
        </trans-unit>
        <trans-unit id="147b5e88caa408397b030378173221842a717795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weak_type&lt;/code&gt;(since C++17)</source>
          <target state="translated">&lt;code&gt;weak_type&lt;/code&gt; (C ++ 17부터)</target>
        </trans-unit>
        <trans-unit id="e3a16a046ce017fbeee44f170a6a09877b100ff0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday().ok()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;weekday().ok()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="da3c2c9506b7585f9384eb7c9d7d843a0460b580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt; does not support the &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; operators because there is no universal consensus on which day is the first day of the week.</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; 는 &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산자를 지원하지 않습니다 . 어떤 요일이 요일의 첫 요일인지에 대한 공통된 합의가 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="cf95a66daedede5a021016f837333beb4248dffa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; 은 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b9f5b55dff9019261f541df87079a8b862c3f6e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday_indexed&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;weekday_indexed&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5f9e853b620badffe7580fd13fcb6cd0ca45eb81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday_last&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;weekday_last&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6b91d4266ca1e0e6681dd746c58fddc43a8c91a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while (&lt;/code&gt;condition&lt;code&gt;) {&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;while (&lt;/code&gt; 조건 &lt;code&gt;) {&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b26f0e02f3cf224c624ceb73917e56b416228fef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt;=&amp;gt; x&lt;/code&gt; is a valid expression of type &lt;code&gt;std::strong_ordering&lt;/code&gt; or &lt;code&gt;std::strong_equality&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;x &amp;lt;=&amp;gt; x&lt;/code&gt; 는 &lt;code&gt;std::strong_ordering&lt;/code&gt; 또는 &lt;code&gt;std::strong_equality&lt;/code&gt; 유형의 유효한 표현식입니다 .</target>
        </trans-unit>
        <trans-unit id="e1697cdbb4e445df18652fd50ce66db37d4a70d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;, objects of (possibly different) types &lt;code&gt;X::void_pointer&lt;/code&gt;, &lt;code&gt;X::const_void_pointer&lt;/code&gt;, &lt;code&gt;X::pointer&lt;/code&gt;, or &lt;code&gt;X::const_pointer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x1&lt;/code&gt; 및 &lt;code&gt;x2&lt;/code&gt; , &lt;code&gt;X::void_pointer&lt;/code&gt; , &lt;code&gt;X::const_void_pointer&lt;/code&gt; , &lt;code&gt;X::pointer&lt;/code&gt; 또는 &lt;code&gt;X::const_pointer&lt;/code&gt; 유형이 다른 객체</target>
        </trans-unit>
        <trans-unit id="c43f77e88a653d942e0823918bf4e2ee166c59e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, (possibly const) values of type &lt;code&gt;D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; , 유형 &lt;code&gt;D&lt;/code&gt; 의 (아마도 const) 값</target>
        </trans-unit>
        <trans-unit id="1554ef8dede17deda94d594a8d3275646307e489" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, possibly const values of type &lt;code&gt;E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; , 가능하면 &lt;code&gt;E&lt;/code&gt; 유형의 const 값</target>
        </trans-unit>
        <trans-unit id="4fd70e96c2f99fe42eefc9bea55555018f270bbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; , &lt;code&gt;X&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a95586357e722cca209ca195703d25c6d2ae2414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x==x&lt;/code&gt; is well-formed when contextually converted to bool, and</source>
          <target state="translated">&lt;code&gt;x==x&lt;/code&gt; 문맥 상으로 bool로 변환 할 때 x == x 가 잘 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="2596512f87e015c1af109a05dd1a1d2d413b60e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xptr&lt;/code&gt;, a dereferencable pointer to some cv-unqualified object type &lt;code&gt;X&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;xptr&lt;/code&gt; , 일부 CV-규정되지 않은 오브젝트 유형에 dereferencable 포인터 &lt;code&gt;X&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="8c3de148c8aa14f6115723ac173d431f5d4e2358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok() &amp;amp;&amp;amp; weekday().ok()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok() &amp;amp;&amp;amp; weekday().ok()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4e44aa3653c0e031deb6893126f89918ae2d122d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43bb543a61e65ca35a0bf87743f312f01082cfcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="93154ed41e381754d187f27e3b576b0836a4437d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;year_month&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eea540b3f619624b9c2166a63aa3bbe494ddf6bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_day&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_day&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="539cce5a3a6b35d76a5b261db5828fe2abc36f3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_day_last&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_day_last&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b32a9850aad2ce8e25c4abaf8fc3149e76ae589f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_weekday&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_weekday&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4cec78f0d015c091194d3a2156b597deb7bdec3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_weekday_last&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_weekday_last&lt;/code&gt; 는 &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;간단하게 복사 가능한 &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f8cd13d473ed5fc38b0e275923884fd359982fa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy&lt;/code&gt; - 4-digit year from &lt;code&gt;timeptr-&amp;gt;tm_year + 1900&lt;/code&gt; as if printed by &lt;code&gt;sprintf&lt;/code&gt; using &lt;code&gt;%4d&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yyyy&lt;/code&gt; - &lt;code&gt;timeptr-&amp;gt;tm_year + 1900&lt;/code&gt; 에서 4 자리 연도 ( &lt;code&gt;%4d&lt;/code&gt; 사용하여 &lt;code&gt;sprintf&lt;/code&gt; 로 인쇄 한 것처럼)</target>
        </trans-unit>
        <trans-unit id="9378d3a9dfca283bf98967e8546c637766701f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy&lt;/code&gt; - years</source>
          <target state="translated">&lt;code&gt;yyyy&lt;/code&gt; - 년</target>
        </trans-unit>
        <trans-unit id="560f1f3590105bf75381edb24d3eb03f9ac05308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt;, a value of type &lt;code&gt;unsigned long long&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; , &lt;code&gt;unsigned long long&lt;/code&gt; 유형의 값</target>
        </trans-unit>
        <trans-unit id="07e3142bbe268171c386fc35bda121e902fe0a84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone-&amp;gt;get_info(tp)&lt;/code&gt;, where &lt;code&gt;zone&lt;/code&gt; is the non-static data member holding the time zone pointer, and &lt;code&gt;tp&lt;/code&gt; is the non-static data member holding the stored time point (as a &lt;code&gt;&lt;a href=&quot;../system_clock&quot;&gt;std::chrono::sys_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;zone-&amp;gt;get_info(tp)&lt;/code&gt; , 여기서 &lt;code&gt;zone&lt;/code&gt; 은 표준 시간대 포인터를 보유한 비 정적 데이터 멤버이고 &lt;code&gt;tp&lt;/code&gt; 는 저장된 시점을 보유한 비 정적 데이터 멤버입니다 ( &lt;code&gt;&lt;a href=&quot;../system_clock&quot;&gt;std::chrono::sys_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cee0c780e7d068c3b31b2c9dfeceb23e7bd42618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoned_time&lt;/code&gt; does not have a move constructor and attempting to move one will perform a copy instead using the defaulted copy constructor (3). Thus, when &lt;code&gt;TimeZonePtr&lt;/code&gt; is a move-only type, &lt;code&gt;zoned_time&lt;/code&gt; is immovable: it can be neither moved nor copied.</source>
          <target state="translated">&lt;code&gt;zoned_time&lt;/code&gt; 에는 이동 생성자가 없으며 이동하려고하면 기본 복사 생성자 (3)를 사용하여 복사를 수행합니다. 따라서 &lt;code&gt;TimeZonePtr&lt;/code&gt; 이 이동 전용 유형 인 경우 &lt;code&gt;zoned_time&lt;/code&gt; 은 이동할 수 없습니다. 이동하거나 복사 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0365fc220ec4659675a47cbf32ef27ee70178dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &lt;/code&gt;initializer-list&lt;code&gt;} &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{ &lt;/code&gt; 이니셜 라이저 목록 &lt;code&gt;} &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c8733e5bebd3efb8967a3c95958ea98af29c097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;expression&lt;code&gt;} &lt;/code&gt;&lt;code&gt;noexcept&lt;/code&gt;(optional)return-type-requirement(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt; expression &lt;code&gt;} &lt;/code&gt; &lt;code&gt;noexcept&lt;/code&gt; (선택 사항) 반환 유형 요구 사항 (선택 사항) &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fb3e4b8b0c087ee5c6c6184486b98d926212f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09706282683540bade3afc32ef6a567d9570f239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;rhs</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt;rhs</target>
        </trans-unit>
        <trans-unit id="d7932fc1b0fea0ce21603af1d6068a186b7ed999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; for the built-in atomic types that are never lock-free</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 의 내장 결코 잠금 무료 원자 유형</target>
        </trans-unit>
        <trans-unit id="7d8e536304568023542773e9fe063f084de7f3a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 경우 &lt;code&gt;lhs&lt;/code&gt; 있다</target>
        </trans-unit>
        <trans-unit id="37261588294ca7ee356026691cb04fa11731147e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if &lt;code&gt;ps&lt;/code&gt; is not a null pointer and does not represent the initial conversion state, nonzero value otherwise.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 경우 &lt;code&gt;ps&lt;/code&gt; NULL 포인터 아니고 달리 초기 변환 상태, 0이 아닌 값을 나타내지 않는다.</target>
        </trans-unit>
        <trans-unit id="58c415628492a23576706c374175b7fea1c709b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if &lt;code&gt;s1&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 경우 &lt;code&gt;s1&lt;/code&gt; 있다</target>
        </trans-unit>
        <trans-unit id="28e66bba4048ae66ec89f29af47761af206a35b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all &lt;code&gt;count&lt;/code&gt; bytes of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are equal.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 모든 경우에 &lt;code&gt;count&lt;/code&gt; 바이트 &lt;code&gt;lhs&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 동일하다.</target>
        </trans-unit>
        <trans-unit id="bd5296046e4ff3776a2227cc99562246c76cdc42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all &lt;code&gt;count&lt;/code&gt; wide characters of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are equal.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 모든 경우 &lt;code&gt;count&lt;/code&gt; 의 와이드 문자 &lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ecb59e53e0ccb63dfdfbc44bcb505e617e783dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all indicated exceptions were successfully cleared or if &lt;code&gt;excepts&lt;/code&gt; is zero. Returns a non-zero value on error.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 모든 지정된 예외가 성공적으로 제거되지 않거나 경우에 있다면 &lt;code&gt;excepts&lt;/code&gt; 제로이다. 오류시 0이 아닌 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a914abe33320a923cd695193c20cc7bf085ab6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all listed exceptions were raised, non-zero value otherwise.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 나열된 모든 예외는 달리, 아닌 값을 제기 한 경우.</target>
        </trans-unit>
        <trans-unit id="ece37d70924447cb2e2181b2d01b748688ca04fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;*pc16&lt;/code&gt; if non-null) was the null character</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 에서 변환 된 문자 경우 &lt;code&gt;s&lt;/code&gt; (및 저장 &lt;code&gt;*pc16&lt;/code&gt; 널이 아닌 경우) 널 문자였다</target>
        </trans-unit>
        <trans-unit id="5c7020d6c04aeffb6b059d1c341b3ba094b22d54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;*pc32&lt;/code&gt; if non-null) was the null character</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 에서 변환 된 문자 경우 &lt;code&gt;s&lt;/code&gt; (및 저장 &lt;code&gt;*pc32&lt;/code&gt; 널이 아닌 경우) 널 문자였다</target>
        </trans-unit>
        <trans-unit id="698a0d9c35386893d7fe5ac31222d3d3bd9ad0a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;*pc8&lt;/code&gt; if non-null) was the null character</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 에서 변환 된 문자 경우 &lt;code&gt;s&lt;/code&gt; (및 저장 &lt;code&gt;*pc8&lt;/code&gt; 널이 아닌 경우) 널 문자였다</target>
        </trans-unit>
        <trans-unit id="47033aa3b25969c000aba5cf85e6545ef1dce198" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;pwc&lt;/code&gt; if non-null) was the null character</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 에서 변환 된 문자 경우 &lt;code&gt;s&lt;/code&gt; (및 저장 &lt;code&gt;pwc&lt;/code&gt; 널이 아닌 경우) 널 문자였다</target>
        </trans-unit>
        <trans-unit id="b4c8fb680806e009c8d40bf36b65357dea663124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the macro was called by the original code and the execution context was saved to &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 매크로가 원래의 코드와 실행 컨텍스트에 의해 호출 된 경우는에 저장된 &lt;code&gt;env&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a18f5833c0887fa407bd79d2ddc5d106ce1f03bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the next &lt;code&gt;n&lt;/code&gt; or fewer bytes complete the null character.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 다음 경우 &lt;code&gt;n&lt;/code&gt; 이하 바이트 널 문자를 완료합니다.</target>
        </trans-unit>
        <trans-unit id="fb8fec550067ccb4777a2711c5e8cf6af313a5a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the registration succeeds, nonzero value otherwise.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 등록 그렇지 않으면 0이 아닌 값을 성공하면.</target>
        </trans-unit>
        <trans-unit id="a92d8e6b14f7155165ff9ca87fdc74df420ee004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; in case of success, &lt;code&gt;-1&lt;/code&gt; in case of failure.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공한 경우, &lt;code&gt;-1&lt;/code&gt; 실패한 경우이다.</target>
        </trans-unit>
        <trans-unit id="7a17fc6e51794f5aed7876fde1e62d146f44ab53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success or nonzero on failure.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 실패 성공 또는 제로에.</target>
        </trans-unit>
        <trans-unit id="2ee3a370a5f11adc6d6a3e265cbc76ce74ac3f4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success, &lt;code&gt;-1&lt;/code&gt; on failure or if the stream does not support this operation (is unbuffered).</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공, &lt;code&gt;-1&lt;/code&gt; 스트림이 조작을 지원하지 않는 경우, 또는 실패 (버퍼링)입니다.</target>
        </trans-unit>
        <trans-unit id="1c51ca0f18151b653cbbd1987e211bdf0527d1b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공, &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="12b3574ac232ea1e748f9706cbe8074b413f87af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success, non-zero otherwise.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공, 그렇지 않으면 비는 제로.</target>
        </trans-unit>
        <trans-unit id="087c0288e3e5dcd9422b80d2b28fc2c457be72ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success or non-zero value on error.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 오류에 성공 아닌 값에 따라.</target>
        </trans-unit>
        <trans-unit id="5d5882faeb3b6aa8692d1cecc132bbb371a9ca6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, non-zero value on failure.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 실패 성공, 아닌 값에 따라.</target>
        </trans-unit>
        <trans-unit id="50828e4f1a6516607804a376eecf2f160873f527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, nonzero value otherwise.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공시 0이 아닌 값, 그렇지 않으면.</target>
        </trans-unit>
        <trans-unit id="8ffd9a66825ddde10a2ec3ec7e9e16fab9f07dbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, nonzero value otherwise. Also sets &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공시 0이 아닌 값, 그렇지 않으면. 또한 실패시 &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="9fc83bf7a04c5ef5607f314231fcba3a93d958bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, nonzero value otherwise. Also, sets &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;​0​&lt;/code&gt; 성공시 0이 아닌 값, 그렇지 않으면. 또한 실패시 &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="5a99753c2ece599fb8a7453bd9d560a46a80ee81" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; emplace_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; emplace_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1039db3ded9f1b8efba5ccab789508423063a96b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; erase_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; erase_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ef0ed6a572805b96c73fa9768076791bd6660c73" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; insert_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; insert_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="44b8d0560f88e7059a3d9db52ef71135df178604" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; remove_if &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; remove_if &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="bc5f8291164c088f69c7271355567efea7aa0f05" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; splice_after &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; splice_after &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2c9c9ddaec816f735ad6bac682b8abeff585c093" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4c8f76c8010506393cdc465e4ee52f21d5c52888" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f0f6eda813113951b07ba598258cb6c43a1d2ab6" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;array&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;array&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1595023cf3b80020f94c87c629b8b46832a64e9b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5f3827a61d952db2f416d9c192320602e3658eb5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;at&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;at&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="339fdfb633f07790991d8d49fb9c34d66b859b9f" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4dc7eab7ae27f4b811b0ac54f04a761a02c8579d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;begin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;cbegin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;td&gt; &lt;code&gt;begin&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;cbegin&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="47ea2d3025aa2d40752596636cd4d753fb3eaed1" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;bucket_count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;bucket_count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="19b157c54bf375804dec71b2734cee920508a287" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;capacity&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;capacity&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="dd4b7c89cb65790f4c90daee8c44a2d85606c0a9" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="8456e0ff781f2b1ab2c8fa139111a61f449bf109" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ad0c6c38c82ca89b7877e82458f021c9a28c8ff9" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a7fd443d0e47546b4937fc59eb1e2c3286e00b58" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;data&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;data&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="25fb09dd3e5784a1bd9e396b1a3363347a376e07" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4ad5f22c0958dbe3dd050166d55233d3e9831748" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9d0590c7bdd2e6f89051c14c6cb3bfeb1c2e4fec" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="e121808c98d12faa95b110838ae4bb7518b61184" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7a4638dbb2c7d80f70f0cfc827a3ada729ce6036" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_hint&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_hint&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7a07648691e6ba934807d3c92ebcf45fe3eb6085" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ecf1f805909efb15adb170ddd022ee3ca353e00b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;end&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;cend&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;td&gt; &lt;code&gt;end&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;cend&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5c5c4f9df1e2e0a7f8606157b6de3a647f8814a5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;equal_range&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;equal_range&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="65fc852393e939e41f494df9e54a7469cfc62c3a" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;erase&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;erase&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9b19511d06f53aeac7b2d19ab9154ffd900dc77c" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;extract&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;extract&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5ed0c93f7d4e01d5d508ca7def9fffd528026469" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;find&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;find&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4c55f1852454bc5e380f3ef0cd1f78a461da36f6" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2e462a67d213d546b6c51a5bf45c63e630f90481" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="8d51877ea8b562a4a4b7d9dbfdbb510b76bcccab" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;get_allocator&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;get_allocator&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="db3a44033774ba9186609458ee5b20dfc7db8e91" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;hash_function&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;hash_function&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7033f2f454381e8cf8bd30b335786e04238ee0cb" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="e1c4baeec4f128d6767a28d8a040432edac70e7b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert_or_assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert_or_assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="6a59ce5493171a8820f4f5f4b4787f5c5a294d12" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="c251e4acde064c3fea584b047d538884b1e5a628" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_eq&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_eq&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1b0f47fa45059e7ac3088be12da38518526ecc61" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="e59fdaa82ef7dc4fdce5a68d150bebd5673c3500" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;lower_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;lower_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="39bb3ef104f3d2a7d210f5409d3897f32362eac5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7c535e5c0b32736143eea3306d527c279bbb4f89" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;max_size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;max_size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="abb2539f81832af375acbf3418794fb6bb04e262" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;merge&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;merge&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="65585c84def82d301f38d78baf1bdbad7aaaae76" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a3565006316fe624f2c22a25c89001ccae478ead" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5d0701462818f70a476672b2fa75dcef784a7b98" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator=&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator=&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="c6c0905988daa895e9ee8e8fdfe725ecacf39d37" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator[]&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator[]&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="05cc0629962cbf580a4bf4a3cbc4084505a90bc8" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="608f414b868178aa2f90d4a74def48bf184de33b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4d2c61dfe06c5424520a893a898d0d1999b10ebc" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="0f0e0b5aedd040b47a9a7a15f380cf1045e6ffa3" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="84d65cd23047d1c38afd112e5f28fc991e1cd0b5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2ca43da22744a13ae395a8ed92453f7783917a12" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="396bf1a8aa6daaedc36db8d87fa513dcdbe16a4d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="27ac608d5234380bfefa50e6762ce47c22921978" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f820bc789c47dbe8ed0f622d5036b7c5c21b3419" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;rbegin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;crbegin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;td&gt; &lt;code&gt;rbegin&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;crbegin&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2365c6354339b1b40a14b24d42948bf97d18f10b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a1935680e56dc98666ded9bd0ac9353cfbef661e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;rend&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;crend&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;td&gt; &lt;code&gt;rend&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;crend&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f875272241a946eee59ba5279a4eb0d0a51e9a5c" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reserve&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reserve&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="db773fdfad37bfd8f4e42dad5f45137e7cccf6e3" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a198f2888104a0f10422154051a609c48619d593" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reverse&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reverse&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="fc6a52808b3873b40bab572817d4b0f9036af357" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="3c1c2fd5d2b58b2b3f2e0fadfaba053ddee25491" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;shrink_to_fit&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;shrink_to_fit&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ee1c39bd42a332daa3c81c26a9437413b55422c4" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="0929261832a0463074650cffff77e84cec7c9a8e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7d369548d816437770e8df34048ad8157250b6b9" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9c3c4d02a07c81ce87c676b40752c1adf63f881d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="bc1d9a4a5578e80b60eccca7d96f0fcfe157428d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;swap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;swap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="27141b9bffd336360a39af9755a7021082366a6e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;try_emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;try_emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ade09b53bf15505ca98a22c01bb0e6d00be2be88" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="698afbcf7a137318b5036ee63d3b0c09f0434a1e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="b07b888e1fe646846f37568aed45add0693b1f4e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="0755f03baf3ebd5492ebd0300cf22ed181c9b043" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="478555da61974884338e46986de4798e4db817b7" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9ae1cdec6067877e372be92a741da6a734b44123" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;upper_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;upper_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="441eb1b5428a3d4bffe4e5942f27e6adb5cf32cf" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;value_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;value_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9515246a479b696608ab6de7ad49cd576b828dbb" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="94bcd8dbd7c71dcceb4e771828c7cb63602aeef2" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5206bf5efd9835c3812440183c45d7122100eb46" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ba1b00224b70e58d9730943299ce0eb170a95327" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="6e08313bc988d15fd83dca0b08e3f7ef0cff64e4" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2a6e204eeac6587a67b55de8ee9b41c71e9cced2" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="09d69c095b33a33c3570989830a85c1f98d26184" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5449a97d6fe5f8cf517f297d2446d6e0eb7b574d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1d3ed2d83c3b1f7fb0f2151d8293c4d927d6210f" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5dcfab48a50c90cb0d45fced8daca61713aba44b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="08224dd6a20ce0c242d0f1dfc5d6b83e120508fd" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4f8305b9b39f90a6956359d30a017b10c69b7696" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="73b53133a068b3e2eab1c27027e3615537c7e130" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f601c1f132e6afcec31730c7f77c33af41f5b3d4" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4d27878fc104b2b866573b11c01bc86e59a3d1a0" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="b8e0211ff1dec650808acce19edb4d4b9c6e161c" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="10e8babbe7f17544e7428f5a5692547c7d6c6563" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;(See also &lt;a href=&quot;language/type-id&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; for type system overview)&lt;/small&gt;.</source>
          <target state="translated">&lt;small&gt;유형 시스템 개요 는 &lt;a href=&quot;language/type-id&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt; 을 참조하십시오&lt;/small&gt; .</target>
        </trans-unit>
        <trans-unit id="96feca7b635ec24c159206129d87a2ee7bf9b264" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;(See also &lt;a href=&quot;type-id&quot;&gt;type&lt;/a&gt; for type system overview and &lt;a href=&quot;../types&quot;&gt; the list of type-related utilities&lt;/a&gt; that are provided by the C++ library)&lt;/small&gt;.</source>
          <target state="translated">&lt;small&gt;유형 시스템 개요 및 C ++ 라이브러리에서 제공하는 &lt;a href=&quot;../types&quot;&gt;유형 관련 유틸리티 목록은 &lt;/a&gt;&lt;a href=&quot;type-id&quot;&gt;유형&lt;/a&gt; 을 참조하십시오&lt;/small&gt; .</target>
        </trans-unit>
        <trans-unit id="aad2e997d2d0a61a8a4b7bb9a6bb901008f0dd2f" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6ba38749c5e6b67dd9354f5c899f43f42a91d903" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1ee96709da677b917693b6fb5d00a73fb2ed0dce" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5ae52889b7d8f6d01e7e58d29b1ffaad898ad8fc" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;N/A&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;N/A&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="07b6fb7da60721dc2b32ebb573b22e308f9446fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; (constructor)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; (constructor)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="153efd22d0e3a6d22df13daf85901c581362a809" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; (destructor)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; (destructor)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10efdd3c2d7049538022820f79e0e37bd094fe06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; arithmetic&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; arithmetic&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e19ff83b6ec415b70737af40a6ed2c2d6b27413e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; assignment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; assignment&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c375dfd990bd58d5c9dcb8640e80b7e6cea53f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; comparison&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec766f8c27808b6ffc35e0a36b2b84225aa5a5e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; fputws&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; fputws&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="00c59ef536a9cebe544605a2173393bc418fbbcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; increment&lt;br/&gt;decrement&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; increment&lt;br/&gt;decrement&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26a0d3cc3592706ee85cb536674e68e9cdde3e1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; logical&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; logical&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dc3c883f0aa139e7be93514b09f8dc375a287f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; member&lt;br/&gt;access&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; member&lt;br/&gt;access&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd04c55596e5ec0f8f02bca1a8be3350a5c1cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator bool&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; 운영자 부울&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26122c150bc8519ade15b737afa2dc7f5a1423b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator partial_ordering&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; 연산자 partial_ordering&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e0c7a5a9e37198bc2342f65dcc27840adcf92cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator strong_equality&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; 연산자 strong_equality&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04a87b3748298b8e66ce67b75219f04964bbf0dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator value_type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; 연산자 value_type&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35c343cc79f9075b26e78c63861dc1ce158d69d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator weak_equality&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; 연산자 weak_equality&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="13875aa4b22f134be01bcbcd417de55150ca15cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator weak_ordering&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; 연산자 weak_ordering&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="578aed685a05664fab89f7788198ac983624bbab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc45177980127df3fe1b5389211625aca365f531" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator=&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator=&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="730279814bc8f4254fab280aa04c813f90f9df73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator==operator!=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator==operator!=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d02a711597ec84b06523f4f45d9fcd2747bb6134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator==operator!=operator&amp;lt;operator&amp;gt;operator&amp;lt;=operator&amp;gt;=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator==operator!=operator&amp;lt;operator&amp;gt;operator&amp;lt;=operator&amp;gt;=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="46bf7c32b091bac31f177b6538a857bc4f99a593" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; other&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; other&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9b32461f08873ada69d54d94941c3a7c338cd6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; size&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; size&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d854b5fdfcf42d66b53f84ef33fb2e2bfea6df5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; startsizestride&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; startsizestride&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a5cdabacf237fbab2c12a67fd21865ad6a90a8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; try_lock&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; try_lock&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b225a45dd0a883a31aeb8e8fa7361f9fcfb31d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; try_lock_shared&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; try_lock_shared&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a132afaeab415796a3537044b4b2c136c0eddf36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; what&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; what&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f200a0325ed69f6c1a09fb15a9e717939f5d390f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;adjustfield&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;adjustfield&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11d7829ab5f46ce0f1e5ab89f1cd27ac6b1b7bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;app&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;app&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="207ba86c7b820157628715f842616b5fe2b19795" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="797633d5d4189cf9a82cf1bb4a60ec90b86c343c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;bad()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;bad()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="94e8d7d8d59d3ea56b5859b8dd9901f5fff6f9a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;badbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;badbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="490d187214876ec1d6a6fa8b4d353d8e23ce7619" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;basefield&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;basefield&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8394a89164419e5ae8805758370d0bc591b0d398" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;beg&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;beg&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3b41f8787abad9f1de91bdf988f30d88b5cae27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca904f5a2bc637d2ab165d54ed63641b6b3d6a11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;boolalpha&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;boolalpha&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39fd955930d5b6d2c04a3f3ae63e899990726e90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t, char, mbstate_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;codecvt&lt;/code&gt; &lt;/strong&gt; &amp;lt;char16_t, char, mbstate_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e44cc1b44e806b4ecbf3ece838e1fcc86b3ad96c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t, char, mbstate_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;codecvt&lt;/code&gt; &lt;/strong&gt; &amp;lt;char32_t, char, mbstate_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1186ed3f9f3cb2913028b31e1785411aeb8ee32b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6cc7fe315faaf26b76174e5e4960a0bc086c4d48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="16293df922894be5b54283c9c06b6d1cd695fb2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</target>
        </trans-unit>
        <trans-unit id="634e0b3a497880d753634d52388e3f4114c7dbfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</target>
        </trans-unit>
        <trans-unit id="90619993abce6efa13e90d8c475577a28162c84a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3c390eda96de3990966e6e3f5b70c34cff490b78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8f1b37452d04e6b6366b9876df35ff435317878b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</target>
        </trans-unit>
        <trans-unit id="2a89050cf0079a1ca971a87ce6bc682e36ce85fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</target>
        </trans-unit>
        <trans-unit id="96125c75dde278d8d0f871e4334afcdc27a36363" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="88a2b15ebbc68b5f82e81cc5ab58332d2967d38f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="83fc04b422cb426c23c7cfcf467789b248ace939" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ae27c86baa41196f9ec215dbe1b5bc431716076c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="439fbf5155a1ea718b93b58268a1c57891eab887" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dec&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;dec&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c1d04628c7923a69571836e8d89294d36abc3c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;end&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;end&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="905439cb453fef652fdc756024a420525ef3aff5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;eof()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;eof()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb18b1ab4b23021fe64c3c2b58e8c683cbf49ceb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;eofbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;eofbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c3ffa2dcebf476b8b2982919bee211ba06eb715" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7bfe985904d6f7420e382db1aed815889e93c210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa30018e4e8957e4ddd74cc31e9493ab5311801c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="079f5f6da10ffb45eced653ff321fb2607004ded" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;floatfield&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;floatfield&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1159208dece7e8e3c44f57f1ac06f43db0839325" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="182d19ac93f9f5aef49ec907440a4810b670ddd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;goodbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;goodbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d1f428f94e61c6d958a957a41eaa9924236ea08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee49dcc63798c51cfdac1e9f8d68c932675b00cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="070cdcaac0aa985f0515fb4737a5b4140229081c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d1bfe18cb401bb305798e66198b3e97beee76dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/strong&gt; flags</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/strong&gt; 플래그</target>
        </trans-unit>
        <trans-unit id="537b1d1edf82aeba0b417c8ba71838968c5a62b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isalnum&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isalnum&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f9eb092cbcfe95bdcd0259dd8a630d5021ccbbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isalpha&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isalpha&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9ce04988731330541a991eb5e7d06dccb14ef08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isblank&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isblank&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a1eaa994d3269906b2a47c32a8e547fa6acd48b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iscntrl&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iscntrl&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6c38fada3181e93f98fd6a5cc64d639bb008f4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isdigit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isdigit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ee2ff1dcd24794fdc2eeb658a043d3eddab9f4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isgraph&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isgraph&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc805695234d5269f3894979b9d4d5055e0e4e03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;islower&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;islower&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d368a53b3e50cbe2b60f751d23c615e71f69a2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isprint&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isprint&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edf5be6051afddc9d51019cf62964a443b980d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ispunct&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;ispunct&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dab79137a8c3f41f95cb2fdba1f4f613fc1cba2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isspace&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isspace&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2547b4f8a0a99767af9245458421d60678dfee26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isupper&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isupper&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92651ef970d99cc14c98cd615af602f9a84c504b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="a9721c714438e2959a6b2dd93edc8f3f8d158f25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="63cf242f16b8eed04f50e80e12b7fe53c7b60e96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="ef1646ab343b83d122b0efbf0b1327ad179544ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="57132c82e4d7dd23822d5e2b00c1360c20c46cad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="eaaeeeb6bf702b4f78258a052af4452dc2690218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="eef504bf43cd6c27be30cb125fbc497a56a78de2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="de60e8e30084fb3e157dd6de773b4737e7169d88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="4615b2011e8d972dea535045f94bc13827ee65bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="c5fdebcc026d6a68db49f4b74165ce7f0d912453" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="20e51610dd3a8beabcd2f164c21da31478eafe74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="375e0bd774ab74de342f79f6cb82415b12d14f35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="d84d8f51eeb0c0fa8768438cbf4a31a1157bc640" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isxdigit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isxdigit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e572948cf28b84dce522b683b04bae9479a39e3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7403dd93dfc53229e1ea0a9778cecb32e4c7e40a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f42a5932a495654a37e143884365c4537c3b8fbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;operator bool&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;operator bool&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d000f0e64c90f633b97c4412053ddda15f10b1e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;operator!&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;operator!&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ac80db2beea97adbd46f76aabc716591057664f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;out&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;out&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b725f898e8732391b7386c81f074cb14a5160f42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a24c517c21a6fd0cbe1e2b0556452dcf2b565bbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;scientific&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;scientific&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab70d72589c80e1717023e9faae7f00ad127bdbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;showbase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;showbase&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bcc3287b88890731d4b680872287e29a7b38ed44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;showpoint&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;showpoint&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a98817f7bc4fc0d9a4209c60d30a7b6cc32d0f0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;showpos&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;showpos&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73ae238410dc063681db8a6b63f07ddca01cdec5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;skipws&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;skipws&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecd433aa9bdbd6d7303e5311712ea1bfd7e3e27f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af054887e1b0ba5f251054b58298064ee68ae466" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;unitbuf&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;unitbuf&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9682821636709e0d7a2f13d6a2515da32bc44b2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="afcbb20a9dadf71e43a33169ab4cb2d482027a57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BinaryPredicate&lt;/strong&gt; is a set of requirements expected by some of the standard library facilities from the user-provided arguments.</source>
          <target state="translated">&lt;strong&gt;BinaryPredicate&lt;/strong&gt; 는 사용자가 제공 한 인수에서 일부 표준 라이브러리 기능에 의해 예상되는 요구 사항 집합입니다.</target>
        </trans-unit>
        <trans-unit id="daf7d8e16b0681bcc7c5063a26b9edcda88942c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CharTraits&lt;/strong&gt; is a traits class that abstracts basic character and string operations for a given character type. Most standard library string and input/output classes require a CharTraits template type parameter alongside a corresponding character template type parameter.</source>
          <target state="translated">&lt;strong&gt;CharTraits&lt;/strong&gt; 는 주어진 문자 유형에 대한 기본 문자 및 문자열 연산을 추상화하는 특성 클래스입니다. 대부분의 표준 라이브러리 문자열 및 입력 / 출력 클래스에는 해당 문자 템플리트 유형 매개 변수와 함께 CharTraits 템플리트 유형 매개 변수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="e2c13017e7e8f2d9adf08adb882b4db09b62cc37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compare&lt;/strong&gt; is a set of requirements expected by some of the standard library facilities from the user-provided function object types.</source>
          <target state="translated">&lt;strong&gt;비교&lt;/strong&gt; 는 사용자 제공 함수 오브젝트 유형에서 일부 표준 라이브러리 기능에 필요한 요구 사항 세트입니다.</target>
        </trans-unit>
        <trans-unit id="4eb392e0f136e6afc3f20b792ae99c34e364dd5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RegexTraits&lt;/strong&gt; is a traits class that abstracts operations needed for a given character type when as template type parameters for &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;RegexTraits&lt;/strong&gt; 는 &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; 템플리트 유형 매개 변수로 지정된 문자 유형에 필요한 조작을 추상화하는 특성 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="81c351228e8e2cb7718bc5af2c6012b6ddb15f26" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-t2&lt;br/&gt;&lt;/sup&gt;d</source>
          <target state="translated">&lt;sup&gt;-t2&lt;br/&gt;&lt;/sup&gt;d</target>
        </trans-unit>
        <trans-unit id="fd164f598fc73f42c8916519c717c436b330ba1f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-t&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;-t&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="06084185252914fb80c48390ac42871dd29d6c0a" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-t&lt;/sup&gt; d</source>
          <target state="translated">&lt;sup&gt;-t&lt;/sup&gt; d</target>
        </trans-unit>
        <trans-unit id="b60fc4d5c34892cba397c7ae6b1871dbbe57af08" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-x/2&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;-x/2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="083ce944a9c81e89965f0e91e2f5e1f2b207c6a8" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-x2&lt;br/&gt;&lt;/sup&gt;, is returned.</source>
          <target state="translated">&lt;sup&gt;-x2&lt;br/&gt;&lt;/sup&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="965d3f320957be3ad72e928e912186a77e19275b" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-x&lt;/sup&gt;), is returned.</source>
          <target state="translated">&lt;sup&gt;-x&lt;/sup&gt; )를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="149a72ad8e00441ffe95eba131c80e578d0adde4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x2&lt;br/&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;x2&lt;br/&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="2fcc36bd610640f21c1ee441c879323d8ee5aabd" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;x&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0bfc5228282d755daf15fff800045061a14771e5" translate="yes" xml:space="preserve">
          <source>= -1 and the related exponents.</source>
          <target state="translated">= -1 및 관련 지수</target>
        </trans-unit>
        <trans-unit id="0c97bb15e4b25bdec35638f2b1bc7761899184bd" translate="yes" xml:space="preserve">
          <source>= -2nu.</source>
          <target state="translated">= -2nu.</target>
        </trans-unit>
        <trans-unit id="02defd0662f5031a7cb6eeb79c6b3ed327cf9329" translate="yes" xml:space="preserve">
          <source>= 0, and</source>
          <target state="translated">= 0이고</target>
        </trans-unit>
        <trans-unit id="bcd4ff98d65c01bef15947a0dae533467a1e03a0" translate="yes" xml:space="preserve">
          <source>= 1,</source>
          <target state="translated">= 1,</target>
        </trans-unit>
        <trans-unit id="76556565fc31fd629ab558daaa54df88fec792b4" translate="yes" xml:space="preserve">
          <source>= 1.</source>
          <target state="translated">= 1.</target>
        </trans-unit>
        <trans-unit id="a520a1e8ed14533a28c00393129807aaabdf3279" translate="yes" xml:space="preserve">
          <source>== !=</source>
          <target state="translated">==! =</target>
        </trans-unit>
        <trans-unit id="532c1bc43406f64ae3a933341259e4a3e66a150a" translate="yes" xml:space="preserve">
          <source>== != &amp;lt; &amp;gt; &amp;lt;= &amp;gt;=</source>
          <target state="translated">==! = &amp;lt;&amp;gt; &amp;lt;=&amp;gt; =</target>
        </trans-unit>
        <trans-unit id="ecb9d9cc5013291f759497f08cec925224751c83" translate="yes" xml:space="preserve">
          <source>=arg.</source>
          <target state="translated">=arg.</target>
        </trans-unit>
        <trans-unit id="d1e097af8f9be2971caa79bdfe9fa4c236c7094c" translate="yes" xml:space="preserve">
          <source>?:with a void can be lvalue</source>
          <target state="translated">? : 공백이 있으면 lvalue가 될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="0e980cc0d0cefbf7b079d7df0c9109a8a1af5c70" translate="yes" xml:space="preserve">
          <source>@a</source>
          <target state="translated">@a</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="59069913e8774ab5a94eb0c4b0e9875d089c7bb2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;standard-layout class&lt;/a&gt; is a class that satisfies &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;표준 레이아웃 클래스는&lt;/a&gt; 클래스가 만족입니다 &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f6b704dc30d966683c3fb7d0835b304be1d6931" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../language/union&quot;&gt;union&lt;/a&gt; can be marked &lt;code&gt;final&lt;/code&gt; (and &lt;code&gt;std::is_final&lt;/code&gt; will detect that), even though unions cannot be used as bases in any case.</source>
          <target state="translated">&lt;a href=&quot;../language/union&quot;&gt;조합은&lt;/a&gt; 표시 할 수 있습니다 &lt;code&gt;final&lt;/code&gt; (및 &lt;code&gt;std::is_final&lt;/code&gt; 노조가 어떤 경우에 기지로 사용될 수 없습니다에도 불구하고, 그 감지합니다).</target>
        </trans-unit>
        <trans-unit id="e331c264669e17c1ada1276954d97de48d813354" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../language/value_initialization&quot;&gt;value-initialized&lt;/a&gt; LegacyForwardIterator behaves like the past-the-end iterator of some unspecified empty container: it compares equal to all value-initialized LegacyForwardIterators of the same type.</source>
          <target state="translated">&lt;a href=&quot;../language/value_initialization&quot;&gt;값 초기화&lt;/a&gt; 일부 지정되지 않은 빈 용기의 past-the-end 반복자 같은 LegacyForwardIterator의 동작합니다 : 그것은 같은 유형의 모든 값 초기화 LegacyForwardIterators 동등 비교합니다.</target>
        </trans-unit>
        <trans-unit id="86a0caf1b58ecd7b529638ebaa55885c40a23bbe" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; used to specify floating-point formatting for &lt;a href=&quot;to_chars&quot;&gt;&lt;code&gt;std::to_chars&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;from_chars&quot;&gt;&lt;code&gt;std::from_chars&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType이&lt;/a&gt; 서식 부동 소수점 지정하는 데 사용되는 &lt;a href=&quot;to_chars&quot;&gt; &lt;code&gt;std::to_chars&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;from_chars&quot;&gt; &lt;code&gt;std::from_chars&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="91d46acba3408bb6e2bdc0002bf788ce2379719e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt; type providing a strict weak ordering.</source>
          <target state="translated">&lt;a href=&quot;../named_req/compare&quot;&gt;비교&lt;/a&gt; 엄격한 약한 순서를 제공하는 유형입니다.</target>
        </trans-unit>
        <trans-unit id="0e9c3b9454b4b9275159b43f9778c44bee18ad11" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../node_handle&quot;&gt;node handle&lt;/a&gt; that owns the extracted element, or empty node handle in case the element is not found in overload (2).</source>
          <target state="translated">추출 된 요소를 소유 한 &lt;a href=&quot;../node_handle&quot;&gt;노드 핸들&lt;/a&gt; 또는 요소가 과부하에서 찾을 수없는 경우 빈 노드 핸들 (2).</target>
        </trans-unit>
        <trans-unit id="d12c64beefdbab4d8cfc39f0de5f154d31d8878c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; type that represents a particular character classification.</source>
          <target state="translated">&lt;a href=&quot;bitmasktype&quot;&gt;BitmaskType의&lt;/a&gt; 특정 문자 분류를 표시하는 유형.</target>
        </trans-unit>
        <trans-unit id="db065190b60edd23d995ed1f71c3c8f1a8a40599" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;consteval&quot;&gt;&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt; virtual function must not override or be overidden by a non-&lt;code&gt;consteval&lt;/code&gt; virtual function.</source>
          <target state="translated">&lt;a href=&quot;consteval&quot;&gt; &lt;code&gt;consteval&lt;/code&gt; &lt;/a&gt; 가상 함수 오버라이드 (override) 또는 비 겹쳐 쓸 수 안 &lt;code&gt;consteval&lt;/code&gt; 가상 함수.</target>
        </trans-unit>
        <trans-unit id="8401f79dfc902e5dee5b4604132f9b8a156fa3e2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; type that represents the locale used by the traits class.</source>
          <target state="translated">&lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible (복사 가능 생성자)의&lt;/a&gt; 형질 클래스가 사용하는 로케일을 표시하는 유형.</target>
        </trans-unit>
        <trans-unit id="d342e221a05a9be698f1bedcecd4188f19c14cba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt; may appear in any scope, but a &lt;a href=&quot;function&quot;&gt;function definition&lt;/a&gt; may only appear in namespace scope or, for &lt;a href=&quot;member_functions&quot;&gt;member&lt;/a&gt; and &lt;a href=&quot;friend&quot;&gt;friend&lt;/a&gt; functions, in class scope. A function that is declared in a class body without a friend specifier is a class member function. Such functions have many additional properties, see &lt;a href=&quot;member_functions&quot;&gt;member functions&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;function&quot;&gt;함수 선언은&lt;/a&gt; 어떤 범위에 나타날 수 있지만, &lt;a href=&quot;function&quot;&gt;함수 정의&lt;/a&gt; 에만, 네임 스페이스 범위에 나타나거나 할 수 있습니다 &lt;a href=&quot;member_functions&quot;&gt;회원&lt;/a&gt; 및 &lt;a href=&quot;friend&quot;&gt;친구&lt;/a&gt; 클래스 범위에서 작동합니다. 친구 지정자가없는 클래스 본문에 선언 된 함수는 클래스 멤버 함수입니다. 이러한 함수에는 많은 추가 속성이 있습니다 . 자세한 내용 은 &lt;a href=&quot;member_functions&quot;&gt;멤버 함수&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="67bc573d7995338e82b2c28d9dfe52514d24a4e7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;name&quot;&gt;name&lt;/a&gt; can be declared to refer to a type by means of:</source>
          <target state="translated">다음 을 통해 유형을 참조하도록 &lt;a href=&quot;name&quot;&gt;이름&lt;/a&gt; 을 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bedaf8c98056acf96dfaddd1299d4f039fe604ea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;namespace#Using-directives&quot;&gt;using-directive&lt;/a&gt; (does not define any entities)</source>
          <target state="translated">&lt;a href=&quot;namespace#Using-directives&quot;&gt;사용-지침&lt;/a&gt; (모든 엔티티를 정의하지 않습니다)</target>
        </trans-unit>
        <trans-unit id="9163fdc28977121d141ccf44bc7ada6509a9af52" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;statements#Labels&quot;&gt;label (and only a label)&lt;/a&gt; declared inside a function is in scope everywhere in that function, in all nested blocks, before and after its own declaration.</source>
          <target state="translated">함수 내에서 선언 된 &lt;a href=&quot;statements#Labels&quot;&gt;레이블 (및 레이블 만)&lt;/a&gt; 은 해당 함수의 모든 위치, 모든 중첩 된 블록에서 자체 선언 전후에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="1b94cd720a0b9b666d8b797b4a606a381f288cd6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;static_assert&quot;&gt;static_assert&lt;/a&gt; declaration (does not define any entities)</source>
          <target state="translated">&lt;a href=&quot;static_assert&quot;&gt;static_assert의&lt;/a&gt; 선언 (모든 엔티티를 정의하지 않습니다)</target>
        </trans-unit>
        <trans-unit id="328e0c692735d868d8afff33ca718835c5030894" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;structured_binding&quot;&gt;structured binding declaration&lt;/a&gt; is also a simple declaration.(since C++17).</source>
          <target state="translated">&lt;a href=&quot;structured_binding&quot;&gt;구성된 바인딩 선언문&lt;/a&gt; 또한 간단 선언한다. (17 ++ C입니다).</target>
        </trans-unit>
        <trans-unit id="0ccab5bb72be9677dc24a858f86edcb56f470cbd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; declaration</source>
          <target state="translated">&lt;a href=&quot;typedef&quot;&gt;형식 정의의&lt;/a&gt; 선언</target>
        </trans-unit>
        <trans-unit id="c5a0e54f0a399281d2a79bcb72537f48a28e653d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;types/byte&quot;&gt;byte type&lt;/a&gt; definition</source>
          <target state="translated">&lt;a href=&quot;types/byte&quot;&gt;바이트 타입&lt;/a&gt; 정의</target>
        </trans-unit>
        <trans-unit id="17026508a329cc2cdaa5428897328f21d76befcf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;using_declaration&quot;&gt;using-declaration&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using_declaration&quot;&gt;사용하여 선언&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="116191517e8ca5619b7cc289a50c5d18452024d7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#glvalue&quot;&gt;glvalue&lt;/a&gt; of any non-function, non-array type &lt;code&gt;T&lt;/code&gt; can be implicitly converted to a &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of the same type. If &lt;code&gt;T&lt;/code&gt; is a non-class type, this conversion also removes cv-qualifiers.</source>
          <target state="translated">&lt;a href=&quot;value_category#glvalue&quot;&gt;glvalue&lt;/a&gt; 비 기능 비 어레이 형의 &lt;code&gt;T&lt;/code&gt; 는 암시 적으로 변환 될 수 &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 동일한 타입. 경우 &lt;code&gt;T&lt;/code&gt; 가 아닌 클래스 유형이,이 변환은 CV-한정자를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8a0f85c362fc8f1b2298be8e6762cb9b513d80c6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of a floating-point type can be converted to a prvalue of any other floating-point type. If the conversion is listed under floating-point promotions, it is a promotion and not a conversion.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 부동 소수점 형은 다른 부동 소수점 타입의 prvalue로 변환 할 수 있습니다. 전환이 부동 소수점 프로모션 아래에 표시되는 경우 이는 프로모션이 아니라 전환입니다.</target>
        </trans-unit>
        <trans-unit id="baac3f5f28f67e1840f0932b9f8a084aa8900efa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of an integer type or of an unscoped enumeration type can be converted to any other integer type. If the conversion is listed under integral promotions, it is a promotion and not a conversion.</source>
          <target state="translated">정수 유형 또는 범위가 지정되지 않은 열거 유형 의 &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 는 다른 정수 유형으로 변환 될 수 있습니다. 전환이 통합 프로모션 아래에 표시되는 경우 전환이 아니라 프로모션입니다.</target>
        </trans-unit>
        <trans-unit id="ea5e6ce4839d6a91b85d165b9801732b24cac54e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of any complete type &lt;code&gt;T&lt;/code&gt; can be converted to an xvalue of the same type &lt;code&gt;T&lt;/code&gt;. This conversion initializes a temporary object of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object. If &lt;code&gt;T&lt;/code&gt; is a class or array of class type, it must have an accessible and non-deleted destructor.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 어떤 완전한 타입의 &lt;code&gt;T&lt;/code&gt; 는 같은 유형의가 xValue로 변환 할 수 있습니다 &lt;code&gt;T&lt;/code&gt; . 이 변환은 임시 오브젝트를 결과 오브젝트로 사용하여 prvalue를 평가하여 prvalue에서 T 유형의 임시 오브젝트를 초기화하고 임시 오브젝트를 나타내는 xvalue를 생성합니다. 경우 &lt;code&gt;T&lt;/code&gt; 는 클래스 또는 클래스 형의 배열, 그것은 접근 및 비 삭제 된 소멸자가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6acddb420a369aaaea57c1ed0fa976136d77d295" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of floating-point type can be converted to a prvalue of any integer type. The fractional part is truncated, that is, the fractional part is discarded. If the value cannot fit into the destination type, the behavior is undefined (even when the destination type is unsigned, modulo arithmetic does not apply). If the destination type is &lt;code&gt;bool&lt;/code&gt;, this is a boolean conversion (see below).</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 부동 소수점 형은 정수 유형의 prvalue로 변환 할 수 있습니다. 소수 부분이 잘립니다. 즉 소수 부분이 삭제됩니다. 값이 대상 유형에 맞지 않으면 동작이 정의되지 않습니다 (대상 유형이 서명되지 않은 경우에도 모듈러스 산술은 적용되지 않음). 대상 유형이 &lt;code&gt;bool&lt;/code&gt; 인 경우 부울 변환입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="9595a48ce286bf7bb5ea683a992403b7e38c5b11" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of integral, floating-point, unscoped enumeration, pointer, and pointer-to-member types can be converted to a prvalue of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 정수, 부동 소수점, 범위가 지정되지 않은 열거, 포인터, 포인터 - 투 - 회원 유형이 유형의 prvalue로 변환 할 수 있습니다 &lt;code&gt;bool&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="248c4d689ff54b4ebea54581d48f39f34d696cbb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of type &lt;code&gt;float&lt;/code&gt; can be converted to a prvalue of type &lt;code&gt;double&lt;/code&gt;. The value does not change.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 타입의 &lt;code&gt;float&lt;/code&gt; 타입의 prvalue로 변환 할 수 있습니다 &lt;code&gt;double&lt;/code&gt; . 값은 변하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="050d671c38e77c9933a5b17936a6f05c42137e2c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of type pointer to &lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt; type &lt;code&gt;T&lt;/code&gt; can be converted to a prvalue pointer to a more cv-qualified same type &lt;code&gt;T&lt;/code&gt; (in other words, constness and volatility can be added).</source>
          <target state="translated">&lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt; type &lt;code&gt;T&lt;/code&gt; 에 대한 포인터 유형 의 &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 는 cv-qualified 같은 type &lt;code&gt;T&lt;/code&gt; 에 대한 prvalue 포인터로 변환 될 수 있습니다 (즉, constness 및 volatility가 추가 될 수 있음).</target>
        </trans-unit>
        <trans-unit id="3c6ca63328114163ca430edcfeff8a53f07a1eeb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of type pointer to non-throwing function can be converted to a prvalue pointer to potentially-throwing function.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 비 던지고 함수에 입력 포인터의 기능을 잠재적으로 던지는 prvalue 포인터로 전환시킬 수있다.</target>
        </trans-unit>
        <trans-unit id="5f2dae328679253c6053c8e9aa9baf65ddc220eb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; pointer to any (optionally cv-qualified) object type &lt;code&gt;T&lt;/code&gt; can be converted to a prvalue pointer to (identically cv-qualified) &lt;code&gt;void&lt;/code&gt;. The resulting pointer represents the same location in memory as the original pointer value. If the original pointer is a null pointer value, the result is a null pointer value of the destination type.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 임의 (임의로 CV 수식) 오브젝트 유형에 포인터 &lt;code&gt;T&lt;/code&gt; 는 에 prvalue 포인터 (CV 동일 수식)로 전환 될 수있다 &lt;code&gt;void&lt;/code&gt; . 결과 포인터는 원래 포인터 값과 동일한 메모리 위치를 나타냅니다. 원래 포인터가 널 포인터 값인 경우 결과는 대상 유형의 널 포인터 값입니다.</target>
        </trans-unit>
        <trans-unit id="c324e6feefa2419f089ec2e794b74acdf72faaea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; pointer to member of some type &lt;code&gt;T&lt;/code&gt; in a base class &lt;code&gt;B&lt;/code&gt; can be converted to a &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; pointer to member of the same type &lt;code&gt;T&lt;/code&gt; in its derived class &lt;code&gt;D&lt;/code&gt;. If &lt;code&gt;B&lt;/code&gt; is inaccessible, ambiguous, or virtual base of &lt;code&gt;D&lt;/code&gt; or is a base of some intermediate virtual base of &lt;code&gt;D&lt;/code&gt;, the conversion is ill-formed (won't compile). The resulting pointer can be dereferenced with a &lt;code&gt;D&lt;/code&gt; object, and it will access the member within the &lt;code&gt;B&lt;/code&gt; base subobject of that &lt;code&gt;D&lt;/code&gt; object. The null pointer value is converted to the null pointer value of the destination type.</source>
          <target state="translated">&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 일부 유형의 부재 포인터 &lt;code&gt;T&lt;/code&gt; 기본 클래스에서 &lt;code&gt;B&lt;/code&gt; 는 A를 변환 할 수 &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; 동일한 유형의 부재로 포인터 &lt;code&gt;T&lt;/code&gt; 파생 클래스에서 &lt;code&gt;D&lt;/code&gt; . 경우 &lt;code&gt;B&lt;/code&gt; 는 의 모호한 액세스 또는 가상베이스이고 &lt;code&gt;D&lt;/code&gt; 는 또는 몇몇 중간 가상베이스의베이스 인 &lt;code&gt;D&lt;/code&gt; 변환이 (컴파일되지 않음) 잘못 형성된다. 생성 된 포인터는 역 참조와 수 &lt;code&gt;D&lt;/code&gt; 의 목적, 그리고 그것은 내부 부재에 액세스 &lt;code&gt;B&lt;/code&gt; 의 그 기지국 서브 오브젝트 &lt;code&gt;D&lt;/code&gt; 의 개체. 널 포인터 값은 대상 유형의 널 포인터 값으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="e2034981a656fb7ac446092dcd3862bd1eb6e26a" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;code&gt;constexpr&lt;/code&gt; constructor&lt;/b&gt; must satisfy the following requirements:</source>
          <target state="translated">&lt;b&gt; &lt;code&gt;constexpr&lt;/code&gt; 의 생성자는&lt;/b&gt; 다음과 같은 요구 사항을 충족해야합니다 :</target>
        </trans-unit>
        <trans-unit id="4d85283fd2f80f425dad280d54b6a26e71f2409c" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;code&gt;constexpr&lt;/code&gt; function&lt;/b&gt; must satisfy the following requirements:</source>
          <target state="translated">&lt;b&gt; &lt;code&gt;constexpr&lt;/code&gt; 의 기능은&lt;/b&gt; 다음과 같은 요구 사항을 충족해야합니다 :</target>
        </trans-unit>
        <trans-unit id="f32b24bd92dc157d8b5fd15f06fda38e09a3c372" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;code&gt;constexpr&lt;/code&gt; variable&lt;/b&gt; must satisfy the following requirements:</source>
          <target state="translated">&lt;b&gt; &lt;code&gt;constexpr&lt;/code&gt; 의 변수는&lt;/b&gt; 다음과 같은 요구 사항을 충족해야합니다 :</target>
        </trans-unit>
        <trans-unit id="9dfcd740d489150fc3da15e6802bd232839f4946" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;##&lt;/code&gt; operator between any two successive identifiers in the replacement-list runs parameter replacement on the two identifiers (which are not macro-expanded first) and then concatenates the result. This operation is called &quot;concatenation&quot; or &quot;token pasting&quot;. Only tokens that form a valid token together may be pasted: identifiers that form a longer identifier, digits that form a number, or operators &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; that form a &lt;code&gt;+=&lt;/code&gt;. A comment cannot be created by pasting &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; because comments are removed from text before macro substitution is considered. If the result of concatenation is not a valid token, the behavior is undefined.</source>
          <target state="translated">replacement-list에서 두 개의 연속 식별자 사이 의 &lt;code&gt;##&lt;/code&gt; 연산자는 두 개의 식별자 (매크로 확장되지 않은)에서 매개 변수 교체를 실행 한 다음 결과를 연결합니다. 이 작업을 &quot;연결&quot;또는 &quot;토큰 붙여 넣기&quot;라고합니다. 유효한 토큰을 구성하는 토큰 만 붙여 넣을 수 있습니다. 더 긴 식별자를 구성하는 식별자, 숫자를 구성하는 숫자 또는 &lt;code&gt;+&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 를 구성하는 연산자 + 및 &lt;code&gt;+=&lt;/code&gt; . 매크로 대체를 고려하기 전에 텍스트에서 주석이 제거되므로 &lt;code&gt;/&lt;/code&gt; 및 &lt;code&gt;*&lt;/code&gt; 를 붙여 주석을 작성할 수 없습니다 . 연결 결과가 유효한 토큰이 아닌 경우 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="99eeaccfefc49e26835b8d22f35d5c39c1ab7ebf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;(&lt;/code&gt; token that follows &lt;code&gt;explicit&lt;/code&gt; is parsed as part of the explicit specifier:</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; 다음 그 토큰을 &lt;code&gt;explicit&lt;/code&gt; 명시 적 지정자의 일부로서 구문 분석됩니다 :</target>
        </trans-unit>
        <trans-unit id="5d4f371e6cfc089e9bad3fb9e1a02d3a3e6ebef8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; value representing &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">A는 &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 값을 나타내는 &lt;code&gt;t&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="868f119e73dbded620fe1cb16470762fa2e5a7d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing hours</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 을 나타내는 시간 리터럴</target>
        </trans-unit>
        <trans-unit id="1c42352645a8189c1429ee2696f10ca948be8349" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing microseconds</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 나타내는 마이크로 문자</target>
        </trans-unit>
        <trans-unit id="78d107733f4e382adf585c4f075de4efa6ae36f9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing milliseconds</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 을 나타내는 밀리 초 리터럴</target>
        </trans-unit>
        <trans-unit id="45b112595ead2793d19409cc024edaae36a28d8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing minutes</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 을 나타내는 분 문자</target>
        </trans-unit>
        <trans-unit id="46e49d7befae60139b94e7ed86e2cb104b8ee3a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing nanoseconds</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 나타내는 나노 문자</target>
        </trans-unit>
        <trans-unit id="ee1fb7aa42faa26b444faf1ccdd8c108d4443f14" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing seconds</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 을 나타내는 초 리터럴</target>
        </trans-unit>
        <trans-unit id="584bf4d30ceb026e59fcdadf0dcfe7cc0edb19b2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; literal representing pure imaginary number</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; 순수한 허수를 나타내는 문자</target>
        </trans-unit>
        <trans-unit id="676046ceac2b10d24849718b854809bcbbdfe0db" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../local_t&quot;&gt;std::chrono::local_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; computed as if by &lt;code&gt;zone-&amp;gt;to_local(get_sys_time())&lt;/code&gt;, where &lt;code&gt;zone&lt;/code&gt; is the non-static data member holding the stored time zone pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../local_t&quot;&gt;std::chrono::local_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; 계산에 의한 경우와 같은 &lt;code&gt;zone-&amp;gt;to_local(get_sys_time())&lt;/code&gt; , 여기서, &lt;code&gt;zone&lt;/code&gt; 저장 시간대 포인터 채 비 정적 데이터 부재이다.</target>
        </trans-unit>
        <trans-unit id="905b7565ea1e869a495cf3fd31aebfd6122f657c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; literal representing pure imaginary number</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; 순수한 허수를 나타내는 문자</target>
        </trans-unit>
        <trans-unit id="2b272a54de3b48f4175a4c0be9f62f50ee85ff8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt; object containing the shared state previously held by &lt;code&gt;*this&lt;/code&gt;, if any, constructed as if by &lt;code&gt;&lt;a href=&quot;../shared_future&quot;&gt;std::shared_future&lt;/a&gt;&amp;lt;T&amp;gt;(std:move(*this))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../shared_future&quot;&gt;std::shared_future&lt;/a&gt;&amp;lt;T&amp;gt;(std:move(*this))&lt;/code&gt; &amp;lt;T&amp;gt; (std : move (* this))에 의해 구성된 것처럼 &lt;code&gt;*this&lt;/code&gt; 에 의해 이전에 보유 된 공유 상태를 포함 하는 &lt;code&gt;&lt;a href=&quot;../shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt; 객체입니다 (있는 경우 ) .</target>
        </trans-unit>
        <trans-unit id="82ab3bbe2cbf6df55afb329345463883466fb77e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; that contains the version of the database</source>
          <target state="translated">데이터베이스 버전을 포함 하는 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be5f16889ef84c8dc358ec78aeceb5df8087ed6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../system_clock&quot;&gt;std::chrono::sys_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; representing the same point in time as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../system_clock&quot;&gt;std::chrono::sys_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; 와 같은 동일한 시점을 나타내는 &lt;code&gt;*this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6409d3752b791019a403647eb2b007e5e6b67811" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object composed of all elements of all argument tuples constructed from &lt;code&gt;std::get&amp;lt;i&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Ti&amp;gt;(arg))&lt;/code&gt; for each individual element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; 로 구성 모든 인자 튜플의 모든 요소들로 구성 객체 &lt;code&gt;std::get&amp;lt;i&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Ti&amp;gt;(arg))&lt;/code&gt; 각 요소.</target>
        </trans-unit>
        <trans-unit id="438f3055a7496f3d32d7f973749edcad6fb07d47" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object containing lvalue references.</source>
          <target state="translated">lvalue 참조가 포함 된 &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="6644b37c8775a359000eee0f3eb80abd2b3ebdc5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object containing the given values, created as if by &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;VTypes...&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Types&amp;gt;(t)...).&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;VTypes...&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Types&amp;gt;(t)...).&lt;/code&gt; &amp;lt;VTypes ...&amp;gt; ( &lt;a href=&quot;../forward&quot;&gt;std :: forward&lt;/a&gt; &amp;lt;Types&amp;gt; (t) ...)에 의해 생성 된 것처럼 주어진 값을 포함 하는 &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="c7af38062d7eec7845bc9d7b866e1ba62f0bc955" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object created as if by &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Types&amp;amp;&amp;amp;...&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Types&amp;gt;(args)...)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; 개체를 생성했을 경우와 같은 &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Types&amp;amp;&amp;amp;...&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Types&amp;gt;(args)...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fba570ad426b2cc7767aa08de7d3051fc4589c97" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; constructed from the iterator to the end of the &lt;code&gt;d_first_true&lt;/code&gt; range and the iterator to the end of the &lt;code&gt;d_first_false&lt;/code&gt; range.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; 의 끝 반복기로 구성 &lt;code&gt;d_first_true&lt;/code&gt; 범위의 끝 반복자 &lt;code&gt;d_first_false&lt;/code&gt; 범위.</target>
        </trans-unit>
        <trans-unit id="00a70af051214dc14db350ad174c3eee725d7ad2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; which can be used to add elements to the end of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">A는 &lt;code&gt;&lt;a href=&quot;back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; 용기의 단부에 요소를 추가 할 수 &lt;code&gt;c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f75531b5cf7348a4e886834d0ef1434d8a57cad7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt; which can be used to add elements to the beginning of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">A는 &lt;code&gt;&lt;a href=&quot;front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt; 컨테이너의 시작 부분에 요소를 추가 할 수 있습니다 &lt;code&gt;c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd677c01d58a2a294e686b8e803ad350dbbc522b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt; which can be used to insert elements into the container &lt;code&gt;c&lt;/code&gt; at the position indicated by &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt; 용기 요소로 삽입하는데 사용될 수 &lt;code&gt;c&lt;/code&gt; 로 나타낸 위치에서 &lt;code&gt;i&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d5376beac287220a0a9748f55af65f5c5bfa197" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt; which can be used to move from the elements accessed through &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt; 통해 액세스 요소로부터 이동하는 데 사용할 수있는 &lt;code&gt;i&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2e6cdf022bdbbe8ab886fea76cb81fdf2f05a841" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt; constructed from &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">A는 &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt; 로 구성 &lt;code&gt;i&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f13978d47a30d4f6eb9300a5a76627192cbeab4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;__has_include&lt;/code&gt; result of &lt;code&gt;1&lt;/code&gt; only means that a header or source file with the specified name exists. It does not mean that the header or source file, when included, would not cause an error or would contain anything useful. For example, on a C++ implementation that supports both C++14 and C++17 modes (and provides &lt;code&gt;__has_include&lt;/code&gt; in its C++14 mode as a conforming extension), &lt;code&gt;__has_include(&amp;lt;optional&amp;gt;)&lt;/code&gt; may be &lt;code&gt;1&lt;/code&gt; in C++14 mode, but actually &lt;code&gt;#include &amp;lt;optional&amp;gt;&lt;/code&gt; may cause an error.</source>
          <target state="translated">&lt;code&gt;__has_include&lt;/code&gt; 의 결과 &lt;code&gt;1&lt;/code&gt; 지정된 이름 헤더 또는 소스 파일이 존재하는 유일한 수단. 헤더 나 소스 파일이 포함 된 경우 오류가 발생하지 않거나 유용한 정보가 포함되어있는 것은 아닙니다. 예를 들어, C ++에서 구현이 모두 지원하는 C ++ 14 ++ 17 개 C 모드 (및 제공 &lt;code&gt;__has_include&lt;/code&gt; 을 그 C ++ 순응 확장으로 14 모드), &lt;code&gt;__has_include(&amp;lt;optional&amp;gt;)&lt;/code&gt; 가 될 수있다 &lt;code&gt;1&lt;/code&gt; C ++에서 14 모드이지만 실제로 &lt;code&gt;#include &amp;lt;optional&amp;gt;&lt;/code&gt; 은 오류를 일으킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae90f301d0c1ef74c9731aa90072e62f80ba7189" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;basic_streambuf&lt;/code&gt; object may support input (in which case the buffer described by the beginning, next, and end pointers is called</source>
          <target state="translated">&lt;code&gt;basic_streambuf&lt;/code&gt; 의 목적은, 다음에, 버퍼가 처음으로 설명되는 경우에는 입력 (지원할 수 있으며, 최종 포인터라고</target>
        </trans-unit>
        <trans-unit id="357b8db4e0d10e9f4ade042c2b099a74a9d9c6f5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;byte_string&lt;/code&gt; object containing the results of the wide to multibyte conversion. If the conversion failed and there was a user-supplied byte-error string provided to the constructor of this &lt;code&gt;wstring_convert&lt;/code&gt;, returns that byte-error string.</source>
          <target state="translated">와이드에서 멀티 바이트로 변환 한 결과를 포함 하는 &lt;code&gt;byte_string&lt;/code&gt; 객체입니다. 변환이 실패하고이 &lt;code&gt;wstring_convert&lt;/code&gt; 생성자에 사용자 제공 바이트 오류 문자열이 제공된 경우 해당 바이트 오류 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8f79b46b0a6455310e69f4eaaba2516ca3a8f9e1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;proxy&lt;/code&gt; object holds a &lt;code&gt;char_type&lt;/code&gt; character and a &lt;code&gt;streambuf_type*&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; 객체는 보유 &lt;code&gt;char_type&lt;/code&gt; 의 문자와 &lt;code&gt;streambuf_type*&lt;/code&gt; 포인터.</target>
        </trans-unit>
        <trans-unit id="f13c688bb7131c906343beee334bf6ea60a8e93d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;recursive_directory_iterator&lt;/code&gt; typically holds a reference-counted</source>
          <target state="translated">&lt;code&gt;recursive_directory_iterator&lt;/code&gt; 는 일반적으로 참조 카운트를 보유</target>
        </trans-unit>
        <trans-unit id="c63249cfc3e64169680f46ea81fd58bc53ce4f9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_future&lt;/code&gt; may be used to signal multiple threads simultaneously, similar to &lt;code&gt;&lt;a href=&quot;condition_variable/notify_all&quot;&gt;std::condition_variable::notify_all()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shared_future&lt;/code&gt; 가 동시에 다수의 스레드를 알리기 위해 유사한 사용될 수있는 &lt;code&gt;&lt;a href=&quot;condition_variable/notify_all&quot;&gt;std::condition_variable::notify_all()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3e789bb486beef08f12cb2eb86c0def84fdf724" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; can share ownership of an object while storing a pointer to another object. This feature can be used to point to member objects while owning the object they belong to. The stored pointer is the one accessed by &lt;code&gt;get()&lt;/code&gt;, the dereference and the comparison operators. The managed pointer is the one passed to the deleter when use count reaches zero.</source>
          <target state="translated">&lt;code&gt;shared_ptr&lt;/code&gt; 다른 개체에 대한 포인터를 저장하는 동안 개체의 소유권을 공유 할 수 있습니다. 이 기능은 속해있는 개체를 소유 한 상태에서 멤버 개체를 가리키는 데 사용할 수 있습니다. 저장된 포인터는 &lt;code&gt;get()&lt;/code&gt; , 역 참조 및 비교 연산자에 의해 액세스되는 포인터입니다 . 관리 포인터는 사용 횟수가 0에 도달 할 때 삭제기로 전달되는 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="3f727339e73ce27b458015a2d537d9270fcfc075" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; may also own no objects, in which case it is called</source>
          <target state="translated">&lt;code&gt;shared_ptr&lt;/code&gt; 의 가 호출되는 경우에도 어떤 물체를 소유하지 않을 수,</target>
        </trans-unit>
        <trans-unit id="318f5810ea278abe782814534eb028673b885280" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; may share ownership of an object while storing a pointer to another object. &lt;code&gt;get()&lt;/code&gt; returns the stored pointer, not the managed pointer.</source>
          <target state="translated">&lt;code&gt;shared_ptr&lt;/code&gt; 다른 개체에 대한 포인터를 저장하는 동안 개체의 소유권을 공유 할 수 있습니다. &lt;code&gt;get()&lt;/code&gt; 은 관리되는 포인터가 아니라 저장된 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b9ac680d20b940dffdab9f9b4a8957e713db1ede" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; which shares ownership of the owned object if &lt;code&gt;&lt;a href=&quot;expired&quot;&gt;std::weak_ptr::expired&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Else returns default-constructed &lt;code&gt;shared_ptr&lt;/code&gt; of type T.</source>
          <target state="translated">&lt;code&gt;shared_ptr&lt;/code&gt; 을 하는 공유하면 소유 개체의 소유권 &lt;code&gt;&lt;a href=&quot;expired&quot;&gt;std::weak_ptr::expired&lt;/a&gt;&lt;/code&gt; 반환 &lt;code&gt;false&lt;/code&gt; . Else는 T 유형의 기본 생성 된 &lt;code&gt;shared_ptr&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5b5fa36c01d32a099ce1778a4bedb47802628926" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;span&lt;/code&gt; is a non-owning view over a contiguous sequence of objects, the storage of which is owned by some other object.</source>
          <target state="translated">&lt;code&gt;span&lt;/code&gt; 다른 객체에 의해 소유되는 스토리지있는 오브젝트의 연속적 시퀀스 위에 비 소유이다.</target>
        </trans-unit>
        <trans-unit id="12d6b0ee54de9a6e4ef517699a07a922b4703992" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::day&lt;/code&gt; literal representing a day of a month</source>
          <target state="translated">한 달의 일을 나타내는 &lt;code&gt;std::chrono::day&lt;/code&gt; 리터럴</target>
        </trans-unit>
        <trans-unit id="50b6218c6d097daeacfbc5012c160d59ef5eeba2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::day&lt;/code&gt; storing &lt;code&gt;d&lt;/code&gt;. If &lt;code&gt;d &amp;gt; 255&lt;/code&gt;, the stored value is unspecified.</source>
          <target state="translated">&lt;code&gt;std::chrono::day&lt;/code&gt; 기억 &lt;code&gt;d&lt;/code&gt; . 경우 &lt;code&gt;d &amp;gt; 255&lt;/code&gt; , 상기 저장된 값을 지정한다.</target>
        </trans-unit>
        <trans-unit id="67839b6284c5d13ec52f28b0361505200e7ade56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing hours</source>
          <target state="translated">&lt;code&gt;std::chrono::duration&lt;/code&gt; 을 나타내는 시간 리터럴</target>
        </trans-unit>
        <trans-unit id="bf5d53d49f6a9a88aadd40d22eb67960839368ec" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing microseconds</source>
          <target state="translated">&lt;code&gt;std::chrono::duration&lt;/code&gt; 나타내는 마이크로 문자</target>
        </trans-unit>
        <trans-unit id="af480ece4f0a8f0c3051974ec0c02f5b5994684b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing milliseconds</source>
          <target state="translated">&lt;code&gt;std::chrono::duration&lt;/code&gt; 을 나타내는 밀리 초 리터럴</target>
        </trans-unit>
        <trans-unit id="1805a5da80d0c2d5870f37bb85c5d81803674d25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing minutes</source>
          <target state="translated">&lt;code&gt;std::chrono::duration&lt;/code&gt; 을 나타내는 분 문자</target>
        </trans-unit>
        <trans-unit id="39a1c47e010795bb4c005e19610cdd3ce0f3c7a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing nanoseconds</source>
          <target state="translated">&lt;code&gt;std::chrono::duration&lt;/code&gt; 나타내는 나노 문자</target>
        </trans-unit>
        <trans-unit id="855d32b25ba236683ebd8c472ad73561e5953186" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing seconds</source>
          <target state="translated">&lt;code&gt;std::chrono::duration&lt;/code&gt; 을 나타내는 초 리터럴</target>
        </trans-unit>
        <trans-unit id="1c5a2b265260794d50833d832b95a07df9d40ae6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::gps_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and subtracting &lt;code&gt;315964809s&lt;/code&gt;. (315964809 is the number of seconds between the epochs of the two clocks: 1980-01-06 00:00:00 UTC for &lt;code&gt;gps_clock&lt;/code&gt; and 1970-01-01 00:00:00 UTC for &lt;code&gt;utc_clock&lt;/code&gt;.).</source>
          <target state="translated">&lt;code&gt;std::chrono::gps_time&lt;/code&gt; 같이 동일한 시점을 나타내는 &lt;code&gt;t&lt;/code&gt; 마치의 리턴 타입의 값에 의해 계산 구성, &lt;code&gt;t.time_since_epoch()&lt;/code&gt; 감산 &lt;code&gt;315964809s&lt;/code&gt; 를 . (315,964,809 두 클록의 에포크 사이의 시간 (초)이다 1980년 1월 6일 대한 세계 협정시 00시 00분 0초 &lt;code&gt;gps_clock&lt;/code&gt; 및 대 1970-01-01 세계 협정시 00시 00분 0초 &lt;code&gt;utc_clock&lt;/code&gt; 이 .).</target>
        </trans-unit>
        <trans-unit id="d2bc347e689b7ed20fabc8c3eb986c42ba120d5f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::sys_seconds&lt;/code&gt; representing the date and time at which the leap second was inserted.</source>
          <target state="translated">&lt;code&gt;std::chrono::sys_seconds&lt;/code&gt; 윤초가 삽입 된 날짜와 시간을 나타내는.</target>
        </trans-unit>
        <trans-unit id="0554d008c5ddcb923a07e86f2f8e3e45d810c460" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::tai_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and adding &lt;code&gt;378691210s&lt;/code&gt;. (378691210 is the number of seconds between the epochs of the two clocks: 1958-01-01 00:00:00 TAI and 1970-01-01 00:00:00 UTC.).</source>
          <target state="translated">&lt;code&gt;std::chrono::tai_time&lt;/code&gt; 같이 동일한 시점을 나타내는 &lt;code&gt;t&lt;/code&gt; 마치의 리턴 타입의 값에 의해 계산 구성, &lt;code&gt;t.time_since_epoch()&lt;/code&gt; 과 가산 &lt;code&gt;378691210s&lt;/code&gt; 를 . (378691210은 두 시계 (1958-01-01 00:00:00 TAI 및 1970-01-01 00:00:00 UTC) 사이의 시간 (초)입니다.)</target>
        </trans-unit>
        <trans-unit id="1803e0676180e6423d4a462a6c44d55a10b0087d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::utc_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and adding &lt;code&gt;315964809s&lt;/code&gt;. (315964809 is the number of seconds between the epochs of the two clocks: 1980-01-06 00:00:00 UTC for &lt;code&gt;gps_clock&lt;/code&gt; and 1970-01-01 00:00:00 UTC for &lt;code&gt;utc_clock&lt;/code&gt;.).</source>
          <target state="translated">&lt;code&gt;std::chrono::utc_time&lt;/code&gt; 같이 동일한 시점을 나타내는 &lt;code&gt;t&lt;/code&gt; 마치의 리턴 타입의 값에 의해 계산 구성, &lt;code&gt;t.time_since_epoch()&lt;/code&gt; 과 가산 &lt;code&gt;315964809s&lt;/code&gt; 를 . (315,964,809 두 클록의 에포크 사이의 시간 (초)이다 1980년 1월 6일 대한 세계 협정시 00시 00분 0초 &lt;code&gt;gps_clock&lt;/code&gt; 및 대 1970-01-01 세계 협정시 00시 00분 0초 &lt;code&gt;utc_clock&lt;/code&gt; 이 .).</target>
        </trans-unit>
        <trans-unit id="ca2a9c59e6ba4f0548b3c04909b0e8262184603f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::utc_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and subtracting &lt;code&gt;378691210s&lt;/code&gt;. (378691210 is the number of seconds between the epochs of the two clocks: 1958-01-01 00:00:00 TAI and 1970-01-01 00:00:00 UTC.).</source>
          <target state="translated">&lt;code&gt;std::chrono::utc_time&lt;/code&gt; 같이 동일한 시점을 나타내는 &lt;code&gt;t&lt;/code&gt; 마치의 리턴 타입의 값에 의해 계산 구성, &lt;code&gt;t.time_since_epoch()&lt;/code&gt; 감산 &lt;code&gt;378691210s&lt;/code&gt; 를 . (378691210은 두 시계 (1958-01-01 00:00:00 TAI 및 1970-01-01 00:00:00 UTC) 사이의 시간 (초)입니다.)</target>
        </trans-unit>
        <trans-unit id="c8cbd7a47650f6823fccd8a99b574e7080bec72c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::year&lt;/code&gt; initialized from &lt;code&gt;int(y)&lt;/code&gt;. If &lt;code&gt;y &amp;gt; 32767&lt;/code&gt;, the stored value is unspecified.</source>
          <target state="translated">&lt;code&gt;std::chrono::year&lt;/code&gt; 에서 초기화 &lt;code&gt;int(y)&lt;/code&gt; . 경우 &lt;code&gt;y &amp;gt; 32767&lt;/code&gt; , 저장된 값이 지정된다.</target>
        </trans-unit>
        <trans-unit id="4e2dd57acc931672f6fc13d7f0383403c2b9582b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::year&lt;/code&gt; literal representing a particular year</source>
          <target state="translated">&lt;code&gt;std::chrono::year&lt;/code&gt; 특정 연도를 나타내는 문자</target>
        </trans-unit>
        <trans-unit id="196182dc3cdc030f6309ac4496be42a5a51c133b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::complex&lt;/code&gt; literal representing pure imaginary number</source>
          <target state="translated">&lt;code&gt;std::complex&lt;/code&gt; 순수한 허수를 나타내는 문자</target>
        </trans-unit>
        <trans-unit id="03db70d5464af7188e0952d2cdd53f2ec7603f25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::initializer_list&lt;/code&gt; object is automatically constructed when:</source>
          <target state="translated">&lt;code&gt;std::initializer_list&lt;/code&gt; 객체 때 자동으로 구성됩니다 :</target>
        </trans-unit>
        <trans-unit id="2416d5002cbb5c36f532d8063f03389d8b5422e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;sys_days&lt;/code&gt; in the range &lt;code&gt;[&lt;a href=&quot;../duration&quot;&gt;std::chrono::days&lt;/a&gt;{-12687428}, &lt;a href=&quot;../duration&quot;&gt;std::chrono::days&lt;/a&gt;{11248737}]&lt;/code&gt;, when converted to &lt;code&gt;year_month_day&lt;/code&gt; and back, yields the same value.</source>
          <target state="translated">&lt;code&gt;sys_days&lt;/code&gt; 범위 &lt;code&gt;[&lt;a href=&quot;../duration&quot;&gt;std::chrono::days&lt;/a&gt;{-12687428}, &lt;a href=&quot;../duration&quot;&gt;std::chrono::days&lt;/a&gt;{11248737}]&lt;/code&gt; 으로 변환 할 때 &lt;code&gt;year_month_day&lt;/code&gt; 다시 동일한 값을 산출한다.</target>
        </trans-unit>
        <trans-unit id="31cd92d06ec407b65d4b95f11cad94c00e4f216c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;sys_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, or the last representable value prior to the insertion of the leap second if &lt;code&gt;t&lt;/code&gt; represents a time point during a leap second insertion.</source>
          <target state="translated">&lt;code&gt;sys_time&lt;/code&gt; 같이 동일한 시점을 나타내는 &lt;code&gt;t&lt;/code&gt; 않거나 윤초의 삽입에 앞서 마지막 표현할 값 &lt;code&gt;t&lt;/code&gt; 가 도약 2 삽입시의 시점을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="96937610b5550209f67220ea3c321e16035bef78" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;unique_ptr&lt;/code&gt; may alternatively own no object, in which case it is called</source>
          <target state="translated">&lt;code&gt;unique_ptr&lt;/code&gt; 는 다른 방법이 호출되는 경우에는 객체를 소유 할 수 없다</target>
        </trans-unit>
        <trans-unit id="a58dc72e1047681e454bfee09e90c66f270a4a56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;utc_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;utc_time&lt;/code&gt; 으로 동일한 시점 나타내는 &lt;code&gt;t&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="542de237e44dd13f9ee5ac62935835c294cf3b25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wchar_t&lt;/code&gt; was found that does not correspond to a valid character in the current C locale.</source>
          <target state="translated">&lt;code&gt;wchar_t&lt;/code&gt; 현재 C 로케일에서 유효한 문자에 해당하지 않는 것으로 확인되었다.</target>
        </trans-unit>
        <trans-unit id="d6bb2ad0d9cf240aee1dc9625749829b610808d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wchar_t&lt;/code&gt; was found that does not correspond to a valid character in the current C locale. &lt;code&gt;src&lt;/code&gt; is set to point at the first unconverted wide character.</source>
          <target state="translated">&lt;code&gt;wchar_t&lt;/code&gt; 현재 C 로케일에서 유효한 문자에 해당하지 않는 것으로 확인되었다. &lt;code&gt;src&lt;/code&gt; 는 변환되지 않은 첫 번째 넓은 문자를 가리 키도록 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="efe2d528997a53b0e651a1fe67793c99a6a83a88" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wide_string&lt;/code&gt; object containing the results of multibyte to wide conversion. If the conversion failed and there was a user-supplied wide-error string provided to the constructor of this &lt;code&gt;wstring_convert&lt;/code&gt;, returns that wide-error string.</source>
          <target state="translated">멀티 바이트에서 와이드로 변환 한 결과를 포함 하는 &lt;code&gt;wide_string&lt;/code&gt; 객체입니다. 변환이 실패하고이 &lt;code&gt;wstring_convert&lt;/code&gt; 생성자에 사용자 제공 와이드 오류 문자열이 제공된 경우 해당 오류 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a4c39ad849bdf8414052e5eda92f3192e3921aba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_day&lt;/code&gt; can also be created by combining one of the partial-date types &lt;code&gt;std::chrono::year_month&lt;/code&gt; and &lt;code&gt;std::chrono::month_day&lt;/code&gt; with the missing component (day and year, respectively) using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_day&lt;/code&gt; 은 또한 부분 일 유형 중 하나를 조합하여 생성 될 수있는 &lt;code&gt;std::chrono::year_month&lt;/code&gt; 및 &lt;code&gt;std::chrono::month_day&lt;/code&gt; 사용하여 누락 된 성분 (일, 연도, 각각)와 &lt;code&gt;operator/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a77e4a0861a72036d329d2332c611ef2a3df46bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_day_last&lt;/code&gt; can also be created by combining a &lt;code&gt;std::chrono::year_month&lt;/code&gt; with &lt;code&gt;std::chrono::last&lt;/code&gt; using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_day_last&lt;/code&gt; 은 또한 결합하여 생성 될 수있다 &lt;code&gt;std::chrono::year_month&lt;/code&gt; 와 &lt;code&gt;std::chrono::last&lt;/code&gt; 사용 &lt;code&gt;operator/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5e19abb7133397eac8a029f005bdd6aa33de7c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_weekday&lt;/code&gt; can also be created by combining one of the partial-date types &lt;code&gt;std::chrono::year_month&lt;/code&gt; and &lt;code&gt;std::chrono::month_weekday&lt;/code&gt; with the missing component (indexed weekday and year, respectively) using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_weekday&lt;/code&gt; 은 또한 부분 일 유형 중 하나를 조합하여 생성 될 수있는 &lt;code&gt;std::chrono::year_month&lt;/code&gt; 및 &lt;code&gt;std::chrono::month_weekday&lt;/code&gt; 사용하여 누락 된 성분 (인덱스 평일 년, 각각)와 &lt;code&gt;operator/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="14d12761fa97badaf88ea57a4fa81d56a010780f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_weekday_last&lt;/code&gt; can also be created by combining one of the partial-date types &lt;code&gt;std::chrono::year_month&lt;/code&gt; and &lt;code&gt;std::chrono::month_weekday_last&lt;/code&gt; with the missing component (&lt;code&gt;weekday_last&lt;/code&gt; and year, respectively) using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year_month_weekday_last&lt;/code&gt; 은 또한 부분 일 유형 중 하나를 조합하여 생성 될 수있는 &lt;code&gt;std::chrono::year_month&lt;/code&gt; 및 &lt;code&gt;std::chrono::month_weekday_last&lt;/code&gt; 누락 성분 (와 &lt;code&gt;weekday_last&lt;/code&gt; 사용 년 각각) &lt;code&gt;operator/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d0481828e02ad2ec4c7648d0ee942b6e9604e35" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;BinaryTypeTrait&lt;/strong&gt; is a class template that describes a relationship between its two template type parameters with a &lt;code&gt;intergral_constant&lt;/code&gt; (typically &lt;code&gt;bool_constant&lt;/code&gt;) specialization.</source>
          <target state="translated">&lt;strong&gt;BinaryTypeTrait는&lt;/strong&gt; A의 두 개의 템플릿 유형 파라미터 간의 관계를 설명하는 클래스 템플릿이다 &lt;code&gt;intergral_constant&lt;/code&gt; (전형적 &lt;code&gt;bool_constant&lt;/code&gt; ) 특성화.</target>
        </trans-unit>
        <trans-unit id="03f77f7f5aa436f0fcd1d57f9aa83f10776767c6" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Callable&lt;/strong&gt; type is a type for which the INVOKE operation (used by, e.g., &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../utility/functional/bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../thread/thread/thread&quot;&gt;std::thread::thread&lt;/a&gt;&lt;/code&gt;) is applicable. This operation may be performed explicitly using the library function &lt;code&gt;&lt;a href=&quot;../utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;.(since C++17).</source>
          <target state="translated">&lt;strong&gt;호출 가능&lt;/strong&gt; 타입이 INVOKE 동작하는 타입 (예를 사용하여, &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../utility/functional/bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../thread/thread/thread&quot;&gt;std::thread::thread&lt;/a&gt;&lt;/code&gt; )을 적용한다. 이 작업은 라이브러리 함수 &lt;code&gt;&lt;a href=&quot;../utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt; . (C ++ 17부터)를 사용하여 명시 적으로 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d906885655bf9a804f8f6a030da64ac3dddfa99a" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;ConstexprIterator&lt;/strong&gt; is an &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; that can be used during constant expression evaluation.</source>
          <target state="translated">&lt;strong&gt;ConstexprIterator는&lt;/strong&gt; 이다 &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; 상수 표현식 평가 동안 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="b7e302bba1d392155f11afdeef94647300309d97" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Container&lt;/strong&gt; is an object used to store other objects and taking care of the management of the memory used by the objects it contains.</source>
          <target state="translated">&lt;strong&gt;컨테이너는&lt;/strong&gt; 다른 개체를 저장하고 포함 된 개체에서 사용하는 메모리의 관리를 돌보는 데 사용되는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="ef432d007eef64eda22fb23e994185bf687b8d41" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;ContiguousContainer&lt;/strong&gt; is a &lt;a href=&quot;container&quot;&gt;Container&lt;/a&gt; that stores objects in contiguous memory locations.</source>
          <target state="translated">&lt;strong&gt;ContiguousContainer는&lt;/strong&gt; A는 &lt;a href=&quot;container&quot;&gt;컨테이너&lt;/a&gt; 저장 연속 메모리 위치에 객체 것이다.</target>
        </trans-unit>
        <trans-unit id="09782d636880ca6b88fb813351e643a436ea5022" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;FunctionObject&lt;/strong&gt; type is the type of an object that can be used on the left of the function call operator.</source>
          <target state="translated">&lt;strong&gt;FunctionObject의&lt;/strong&gt; 유형은 함수 호출 연산자의 왼쪽에 사용될 수있는 객체의 형태이다.</target>
        </trans-unit>
        <trans-unit id="3ce0ce08aa8b9e16f4544254c56ba6d53a80310c" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Hash&lt;/strong&gt; is a function object for which the output depends only on the input and has a very low probability of yielding the same output given different input values.</source>
          <target state="translated">&lt;strong&gt;해시&lt;/strong&gt; 출력만을 입력에 따라 상이한 입력 값 지정 동일한 결과를 얻었다 매우 낮은 확률을 갖는 해당하는 기능 개체이다.</target>
        </trans-unit>
        <trans-unit id="47a24a0b458d4254da449bbaf9a811ad9e4046f8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyBidirectionalIterator&lt;/strong&gt; is a &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; that can be moved in both directions (i.e. incremented and decremented).</source>
          <target state="translated">&lt;strong&gt;LegacyBidirectionalIterator는&lt;/strong&gt; A는 &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; 양 방향 (즉, 증가 및 감소)으로 이동 될 수있다.</target>
        </trans-unit>
        <trans-unit id="cbc607ab5fb7d859c4d05f308cf2a65173def1ca" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyContiguousIterator&lt;/strong&gt; is an &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; whose logically adjacent elements are also physically adjacent in memory.</source>
          <target state="translated">&lt;strong&gt;LegacyContiguousIterator는&lt;/strong&gt; 이다 &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; 그 논리적으로 인접하는 소자도 메모리의 물리적으로 인접한다.</target>
        </trans-unit>
        <trans-unit id="470f4b69f83c016ce72b5ffeb5d57c01dcf088df" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyForwardIterator&lt;/strong&gt; is an &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; that can read data from the pointed-to element.</source>
          <target state="translated">&lt;strong&gt;LegacyForwardIterator는&lt;/strong&gt; 입니다 &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; 뾰족한-에 요소에서 데이터를 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="269e94f6995b45ea6c1948760e89a0b4cf97fd0a" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyOutputIterator&lt;/strong&gt; is a &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; that can write to the pointed-to element.</source>
          <target state="translated">&lt;strong&gt;LegacyOutputIterator는&lt;/strong&gt; A는 &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; 뾰족한-에 요소에 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75ac349e2997555b025f8b5baec08dce263c3b77" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyRandomAccessIterator&lt;/strong&gt; is a &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; that can be moved to point to any element in constant time.</source>
          <target state="translated">&lt;strong&gt;LegacyRandomAccessIterator는&lt;/strong&gt; A는 &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; 일정 시간에 어느 엘리먼트 지점으로 이동 될 수있다.</target>
        </trans-unit>
        <trans-unit id="45f238db312f77ddc75f63bcb2f4b7dd188b9ca0" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;RandomNumberDistribution&lt;/strong&gt; is a function object returning random numbers according to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;probability density function&lt;/a&gt; p(x) or a &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_probability_distribution&quot;&gt;discrete probability distribution&lt;/a&gt; P(x</source>
          <target state="translated">&lt;strong&gt;RandomNumberDistribution는&lt;/strong&gt; (A)에있어서, 난수를 반환하는 함수의 목적은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;확률 밀도 함수&lt;/a&gt; P (X) 또는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_probability_distribution&quot;&gt;이산 확률 분포&lt;/a&gt; (X가 P를</target>
        </trans-unit>
        <trans-unit id="f50c4f828384cbf6b30efb948f97de179407962d" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;RandomNumberEngineAdaptor&lt;/strong&gt; is a &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt; that transforms the output of another &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt;, the latter of which is termed a</source>
          <target state="translated">&lt;strong&gt;RandomNumberEngineAdaptor는&lt;/strong&gt; A는 &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt; 다른 출력 변환 것을 &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt; 칭했다을이고 후자 어느</target>
        </trans-unit>
        <trans-unit id="89a0778ec161ee7c0d8a33a4dfb6f3357c1123a8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;ReversibleContainer&lt;/strong&gt; is a &lt;a href=&quot;container&quot;&gt;Container&lt;/a&gt; that has iterators that meet the requirements of either &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; or &lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;. Such iterators allow a ReversibleContainer to be iterated over in reverse.</source>
          <target state="translated">&lt;strong&gt;ReversibleContainer는&lt;/strong&gt; A는 &lt;a href=&quot;container&quot;&gt;컨테이너&lt;/a&gt; 중 하나의 요구 사항을 충족 반복자가 &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; 또는 &lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator을&lt;/a&gt; . 이러한 반복자를 사용하면 ReversibleContainer를 반대로 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5735cf87b01303c0476fb7de6f428ad78085fd5f" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;SeedSequence&lt;/strong&gt; is an object that produces unsigned integer values i in the range 0 &amp;le; i &amp;lt; 232</source>
          <target state="translated">&lt;strong&gt;SeedSequence는&lt;/strong&gt; 범위 0 &amp;le; I &amp;lt;232의 부호없는 정수 값 I를 생성하는 것을 목적으로한다</target>
        </trans-unit>
        <trans-unit id="32c52b339b2ee2ae49c5d3d6b7e0b4718f32c23b" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;SequenceContainer&lt;/strong&gt; is a &lt;a href=&quot;container&quot;&gt;Container&lt;/a&gt; that stores objects of the same type in a linear arrangement.</source>
          <target state="translated">&lt;strong&gt;SequenceContainer는&lt;/strong&gt; A는 &lt;a href=&quot;container&quot;&gt;컨테이너&lt;/a&gt; 저장 선형 배열에서 동일한 유형의 오브젝트있다.</target>
        </trans-unit>
        <trans-unit id="7328a0a4485037a3849a794b3c3bf0b9d9a84375" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;TransformationTrait&lt;/strong&gt; is a class template that provides a transformation of its template type parameter.</source>
          <target state="translated">&lt;strong&gt;TransformationTrait은&lt;/strong&gt; 그 템플릿 유형 파라미터의 변화를 제공하는 클래스 템플릿이다.</target>
        </trans-unit>
        <trans-unit id="18442a98240e08beb497c9b7b1b7656978b79bbf" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;UnaryTypeTrait&lt;/strong&gt; is a class template that describes a property of its template type parameter with a &lt;code&gt;intergral_constant&lt;/code&gt; (typically &lt;code&gt;bool_constant&lt;/code&gt;) specialization.</source>
          <target state="translated">&lt;strong&gt;UnaryTypeTrait는&lt;/strong&gt; 과의 템플릿 유형 파라미터의 속성을 설명하는 클래스 템플릿 인 &lt;code&gt;intergral_constant&lt;/code&gt; (전형적 &lt;code&gt;bool_constant&lt;/code&gt; ) 특성화.</target>
        </trans-unit>
        <trans-unit id="e115ee910c23585c67e89a8fa2a35bf9d48204fc" translate="yes" xml:space="preserve">
          <source>A C++ program is a sequence of text files (typically header and source files) that contain &lt;a href=&quot;declarations&quot;&gt;declarations&lt;/a&gt;. They undergo &lt;a href=&quot;translation_phases&quot;&gt;translation&lt;/a&gt; to become an executable program, which is executed when the C++ implementation calls its &lt;a href=&quot;main_function&quot;&gt;main function&lt;/a&gt;.</source>
          <target state="translated">C ++ 프로그램은 &lt;a href=&quot;declarations&quot;&gt;선언&lt;/a&gt; 을 포함하는 일련의 텍스트 파일 (일반적으로 헤더 및 소스 파일)입니다 . 그들은 받아야 &lt;a href=&quot;translation_phases&quot;&gt;번역&lt;/a&gt; 은 C ++ 구현이 호출 할 때 실행되는 실행 프로그램이 될 &lt;a href=&quot;main_function&quot;&gt;주요 기능을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="696e9ba46f0e89fbf8f3f739d39f78c01763ca69" translate="yes" xml:space="preserve">
          <source>A C++11 allocator, except for &lt;code&gt;[[nodiscard]]&lt;/code&gt; added to match C++20 style.</source>
          <target state="translated">C ++ 20 스타일과 일치하도록 &lt;code&gt;[[nodiscard]]&lt;/code&gt; 를 제외한 C ++ 11 할당 자 .</target>
        </trans-unit>
        <trans-unit id="4896bc1daebc0abb5b5e88f5eec065228bcfa2be" translate="yes" xml:space="preserve">
          <source>A FormattedInputFunction is a stream input function that performs the following:</source>
          <target state="translated">FormattedInputFunction은 다음을 수행하는 스트림 입력 함수입니다.</target>
        </trans-unit>
        <trans-unit id="ddcd781c7737cdfafcc92cbcad2f562fc4c7ae70" translate="yes" xml:space="preserve">
          <source>A FormattedOutputFunction is a stream output function that performs the following:</source>
          <target state="translated">FormattedOutputFunction은 다음을 수행하는 스트림 출력 함수입니다.</target>
        </trans-unit>
        <trans-unit id="6abbe7aacaeebe6afa784b8512377295c624db1f" translate="yes" xml:space="preserve">
          <source>A NaN never compares equal to itself. Copying a NaN is not required, by IEEE-754, to preserve its bit representation (sign and &lt;a href=&quot;../../numeric/math/nan.2&quot;&gt;payload&lt;/a&gt;), though most implementation do.</source>
          <target state="translated">NaN은 결코 자신과 동등하지 않습니다. IEEE-754에서는 비트 구현 (sign and &lt;a href=&quot;../../numeric/math/nan.2&quot;&gt;payload&lt;/a&gt; ) 을 유지하기 위해 NaN을 복사 할 필요가 없지만 대부분의 구현에서는 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8a1aff1a22674c9e44e7d2cb9b5dcdbeb2378294" translate="yes" xml:space="preserve">
          <source>A NaN never compares equal to itself. Copying a NaN may not preserve its bit representation.</source>
          <target state="translated">NaN은 결코 자신과 동등하지 않습니다. NaN을 복사하면 비트 표현이 유지되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd9f955fcda8cac3ebcaac018b3d6fbc14010819" translate="yes" xml:space="preserve">
          <source>A UnformattedOutputFunction is a stream output function that performs the following:</source>
          <target state="translated">UnformattedOutputFunction은 다음을 수행하는 스트림 출력 함수입니다.</target>
        </trans-unit>
        <trans-unit id="1fc097ea561cba47cf1b1abfdbd2daa3850ca001" translate="yes" xml:space="preserve">
          <source>A better matching explicit template specialization is declared after POR.</source>
          <target state="translated">POR 다음에보다 일치하는 명시 적 템플릿 전문화가 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="3ec4f21972dcc25fc3dbe2eb02d679bc9aca14fb" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR.</source>
          <target state="translated">POR 다음에 더 일치하는 템플릿 과부하가 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="d9e1361ec1bfb3cf535277cfe534bfbac9726d9d" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR. The best matching explicit template specialization is declared after the better matching overload.</source>
          <target state="translated">POR 다음에 더 일치하는 템플릿 과부하가 선언됩니다. 가장 일치하는 명시 적 템플릿 전문화는 더 나은 일치 오버로드 후에 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="5a33a0b60462971da28748bdaa245589f197f0bc" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR. The best matching explicit template specialization is declared before the better matching overload.</source>
          <target state="translated">POR 다음에 더 일치하는 템플릿 과부하가 선언됩니다. 가장 일치하는 명시 적 템플릿 전문화가 더 나은 일치하는 과부하 전에 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="e28e114d6ff514854c73183e6b9965eb392012a4" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR. The best matching explicit template specialization is declared last.</source>
          <target state="translated">POR 다음에 더 일치하는 템플릿 과부하가 선언됩니다. 가장 일치하는 명시 적 템플릿 전문화가 마지막에 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="de42b146f2986694468b2fff709419625959a04c" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator does not have to be dereferenceable to be decrementable (in particular, the end iterator is not dereferenceable but is decrementable).</source>
          <target state="translated">양방향 반복기는 감소 가능하도록 역 참조 될 필요가 없습니다 (특히, 최종 반복자는 역 참조 가능하지 않지만 감소 가능).</target>
        </trans-unit>
        <trans-unit id="cdcd7a03bb7e18117bc7d298831e7047b8a6eeaf" translate="yes" xml:space="preserve">
          <source>A bit field cannot be a &lt;a href=&quot;static&quot;&gt;static data member&lt;/a&gt;.</source>
          <target state="translated">비트 필드는 &lt;a href=&quot;static&quot;&gt;정적 데이터 멤버가&lt;/a&gt; 될 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f19fb2a2dadaaf50c7e2e46dd1749c808dab005d" translate="yes" xml:space="preserve">
          <source>A bit field declaration is a &lt;a href=&quot;data_members&quot;&gt;class data member declaration&lt;/a&gt; which uses the following declarator:</source>
          <target state="translated">비트 필드 선언은 다음 선언자를 사용 하는 &lt;a href=&quot;data_members&quot;&gt;클래스 데이터 멤버 선언&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a590718d11fd286b69f0c237198c6d1822013e63" translate="yes" xml:space="preserve">
          <source>A braced-init-list is not an expression and therefore has no type, e.g. &lt;code&gt;decltype({1,2})&lt;/code&gt; is ill-formed. Having no type implies that template type deduction cannot deduce a type that matches a braced-init-list, so given the declaration &lt;code&gt;template&amp;lt;class T&amp;gt; void f(T);&lt;/code&gt; the expression &lt;code&gt;f({1,2,3})&lt;/code&gt; is ill-formed. However, the template parameter can otherwise be deduced, as is the case for &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt; v(&lt;a href=&quot;../iterator/istream_iterator&quot;&gt;std::istream_iterator&lt;/a&gt;&amp;lt;int&amp;gt;(&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;), {})&lt;/code&gt;, where the iterator type is deduced by the first argument but also used in the second parameter position. A special exception is made for &lt;a href=&quot;template_argument_deduction#Other_contexts&quot;&gt;type deduction using the keyword &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt;, which deduces any braced-init-list as &lt;code&gt;&lt;a href=&quot;../utility/initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">braced-init-list는 표현식이 아니므로 유형이 없습니다. 예를 들어 &lt;code&gt;decltype({1,2})&lt;/code&gt; 은 형식이 잘못되었습니다. 타입이 없다는 것은 템플릿 타입 추론이 괄호로 묶은 초기리스트와 일치하는 타입을 추론 할 수 없다는 것을 암시합니다. 따라서 &lt;code&gt;template&amp;lt;class T&amp;gt; void f(T);&lt;/code&gt; &lt;code&gt;f({1,2,3})&lt;/code&gt; 표현식 이 잘못되었습니다. 그러나 &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt; v(&lt;a href=&quot;../iterator/istream_iterator&quot;&gt;std::istream_iterator&lt;/a&gt;&amp;lt;int&amp;gt;(&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;), {})&lt;/code&gt; 의 경우와 같이 템플릿 매개 변수를 추론 할 수 있습니다 . 여기서 반복자 유형은 첫 번째 인수이지만 두 번째 매개 변수 위치에도 사용됩니다. &lt;a href=&quot;template_argument_deduction#Other_contexts&quot;&gt;키워드 &lt;/a&gt; &lt;code&gt;auto&lt;/code&gt; 를 사용하여 유형 공제에 대한 특별한 예외가 발생합니다. 는 &lt;code&gt;&lt;a href=&quot;../utility/initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt; 로 braced-init-list를 추론합니다 .</target>
        </trans-unit>
        <trans-unit id="e25a945c48cf6f76f2a11977d7e5d96d55161783" translate="yes" xml:space="preserve">
          <source>A break statement cannot be used to break out of multiple nested loops. The &lt;a href=&quot;goto&quot;&gt;goto statement&lt;/a&gt; may be used for this purpose.</source>
          <target state="translated">여러 개의 중첩 된 루프를 중단하는 데 break 문을 사용할 수 없습니다. &lt;a href=&quot;goto&quot;&gt;GOTO 문은&lt;/a&gt; 이 목적을 위해 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="66079261f595fa39ab0f9aaf1e689bbee78c00a3" translate="yes" xml:space="preserve">
          <source>A byte can be converted to a numeric value (such as to produce an integer hash of an object) using &lt;code&gt;std::to_integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::to_integer&lt;/code&gt; 사용하여 바이트를 숫자 값으로 변환 할 수 있습니다 (예 : 객체의 정수 해시 생성) .</target>
        </trans-unit>
        <trans-unit id="6ac00aaac3e166d5f02787d362ff61a7dbdfec8c" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;&lt;a href=&quot;deque/resize&quot;&gt;resize&lt;/a&gt;&lt;/code&gt; with a bigger size does not invalidate any references to elements of the deque.</source>
          <target state="translated">더 큰 크기 로 &lt;code&gt;&lt;a href=&quot;deque/resize&quot;&gt;resize&lt;/a&gt;&lt;/code&gt; 를 조정 해도 호출 요소에 대한 참조는 무효화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7a3bd25a45a77ef2cd90ffdff2bbd6a3f417bccc" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;&lt;a href=&quot;deque/resize&quot;&gt;resize&lt;/a&gt;&lt;/code&gt; with a smaller size does not invalidate any references to non-erased elements.</source>
          <target state="translated">더 작은 크기 로 &lt;code&gt;&lt;a href=&quot;deque/resize&quot;&gt;resize&lt;/a&gt;&lt;/code&gt; 을 호출 해도 삭제되지 않은 요소에 대한 참조는 무효화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6f4085f69cdbe79bbedc544a370d8a6d054d8e3f" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;ranges::swap&lt;/code&gt; is equivalent to:</source>
          <target state="translated">&lt;code&gt;ranges::swap&lt;/code&gt; 호출 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="97bf0ef2a40ed34d578e8eca5302265c933381c1" translate="yes" xml:space="preserve">
          <source>A call to the function &lt;code&gt;signal()&lt;/code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;synchronizes-with&lt;/a&gt; any resulting invocation of the signal handler.</source>
          <target state="translated">&lt;code&gt;signal()&lt;/code&gt; 함수 에 대한 호출은 신호 처리기의 모든 호출 &lt;a href=&quot;../../atomic/memory_order&quot;&gt;과 동기화&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="957db833b4f5ab4bc58ee300bdf3f470c8067752" translate="yes" xml:space="preserve">
          <source>A call to this function that is the first reference to the time zone database will cause it to be initialized.</source>
          <target state="translated">표준 시간대 데이터베이스에 대한 첫 번째 참조 인이 함수를 호출하면 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="b4d98bb60ccfb29934166b50b7654ddc55d041fb" translate="yes" xml:space="preserve">
          <source>A calling thread</source>
          <target state="translated">호출 스레드</target>
        </trans-unit>
        <trans-unit id="88af58fe68e08793c307053c2cc426819b7e729a" translate="yes" xml:space="preserve">
          <source>A calling thread must not own the &lt;code&gt;mutex&lt;/code&gt; prior to calling &lt;a href=&quot;mutex/lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;mutex/try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출 스레드는 &lt;a href=&quot;mutex/lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;mutex/try_lock&quot;&gt; &lt;code&gt;try_lock&lt;/code&gt; &lt;/a&gt; 호출 전에 &lt;code&gt;mutex&lt;/code&gt; 소유해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="457b0cebf001afcb67715849a7b3d5889a26f274" translate="yes" xml:space="preserve">
          <source>A capture with an initializer acts as if it declares and explicitly captures a variable declared with type &lt;a href=&quot;auto&quot;&gt;auto&lt;/a&gt;, whose declarative region is the body of the lambda expression (that is, it is not in scope within its initializer), except that:</source>
          <target state="translated">이니셜 라이저를 사용한 캡처는 &lt;a href=&quot;auto&quot;&gt;auto&lt;/a&gt; 유형으로 선언 된 변수를 선언하고 명시 적으로 캡처하는 것처럼 작동합니다. 선언 영역은 다음을 제외하고 람다 식의 본문입니다 (즉, 이니셜 라이저 내의 범위에 있지 않습니다).</target>
        </trans-unit>
        <trans-unit id="93b1cdee087afad1d8f06a49a9f05eb930d33022" translate="yes" xml:space="preserve">
          <source>A character sequence consisting of &lt;code&gt;count1&lt;/code&gt; characters starting at &lt;code&gt;data1&lt;/code&gt; is compared to a character sequence consisting of &lt;code&gt;count2&lt;/code&gt; characters starting at &lt;code&gt;data2&lt;/code&gt; as follows. First, calculate the number of characters to compare, as if by &lt;code&gt;size_type rlen = &lt;a href=&quot;../../algorithm/min&quot;&gt;std::min&lt;/a&gt;(count1, count2)&lt;/code&gt;. Then compare the sequences by calling &lt;code&gt;Traits::compare(data1, data2, rlen)&lt;/code&gt;. For standard strings this function performs character-by-character lexicographical comparison. If the result is zero (the character sequences are equal so far), then their sizes are compared as follows:</source>
          <target state="translated">&lt;code&gt;data1&lt;/code&gt; 에서 시작 하는 &lt;code&gt;count1&lt;/code&gt; 문자 로 구성된 문자 시퀀스 는 &lt;code&gt;data2&lt;/code&gt; 과 같이 data2 에서 시작 하는 &lt;code&gt;count2&lt;/code&gt; 문자 로 구성된 문자 시퀀스와 비교됩니다 . 먼저 &lt;code&gt;size_type rlen = &lt;a href=&quot;../../algorithm/min&quot;&gt;std::min&lt;/a&gt;(count1, count2)&lt;/code&gt; &lt;a href=&quot;../../algorithm/min&quot;&gt;std :: min&lt;/a&gt; (count1, count2) 처럼 비교할 문자 수를 계산하십시오 . 그런 다음 &lt;code&gt;Traits::compare(data1, data2, rlen)&lt;/code&gt; 을 호출하여 시퀀스를 비교하십시오 . 표준 문자열의 경우이 기능은 문자 별 사전 비교를 수행합니다. 결과가 0이면 (문자 시퀀스가 ​​지금까지 동일 함) 크기는 다음과 같이 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="3e69c116e40fb317f2e25cb8dbfec22a28aa6519" translate="yes" xml:space="preserve">
          <source>A character sequence in the format string that begins with a &lt;code&gt;%&lt;/code&gt; but does not match one of the conversion specifiers below is interpreted as ordinary characters.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; 로 시작 하지만 아래의 변환 지정자와 일치하지 않는 형식 문자열의 문자 순서는 일반 문자로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="666a543460952ac2d59725854a64fe41ab3657d8" translate="yes" xml:space="preserve">
          <source>A character sequence in the format string that begins with a &lt;code&gt;%&lt;/code&gt; but does not match one of the format specifiers below is interpreted as ordinary characters.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; 로 시작 하지만 아래의 형식 지정자 중 하나와 일치하지 않는 형식 문자열의 문자 순서는 일반 문자로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="0d718390377b6b62f30fd556cf96e27540adb5b7" translate="yes" xml:space="preserve">
          <source>A character sequence made of any source character but parentheses, backslash and &lt;a href=&quot;../string/byte/isspace&quot;&gt;spaces&lt;/a&gt; (can be empty, and at most 16 characters long)</source>
          <target state="translated">소스 문자로 구성되지만 괄호, 백 슬래시 및 &lt;a href=&quot;../string/byte/isspace&quot;&gt;공백으로&lt;/a&gt; 구성된 문자 시퀀스 (비어있을 수 있으며 최대 16 자)</target>
        </trans-unit>
        <trans-unit id="c2079fc01e090f90cbd9362f60edfe4448456c14" translate="yes" xml:space="preserve">
          <source>A class can have multiple copy assignment operators, e.g. both &lt;code&gt;T&amp;amp; T::operator=(const T&amp;amp;)&lt;/code&gt; and &lt;code&gt;T&amp;amp; T::operator=(T)&lt;/code&gt;. If some user-defined copy assignment operators are present, the user may still force the generation of the implicitly declared copy assignment operator with the keyword &lt;code&gt;default&lt;/code&gt;.(since C++11).</source>
          <target state="translated">클래스에는 여러 개의 복사 할당 연산자가있을 수 있습니다 (예 : &lt;code&gt;T&amp;amp; T::operator=(const T&amp;amp;)&lt;/code&gt; 및 &lt;code&gt;T&amp;amp; T::operator=(T)&lt;/code&gt; . 일부 사용자 정의 사본 할당 연산자가 존재하더라도 사용자는 여전히 키워드 &lt;code&gt;default&lt;/code&gt; 를 사용하여 암시 적으로 선언 된 사본 할당 연산자를 강제로 생성 할 수 있습니다 (C ++ 11부터).</target>
        </trans-unit>
        <trans-unit id="08294a0fbe1cdc67a6e89a0a3196176e7255ac69" translate="yes" xml:space="preserve">
          <source>A class can have multiple copy constructors, e.g. both &lt;code&gt;T::T(const T&amp;amp;)&lt;/code&gt; and &lt;code&gt;T::T(T&amp;amp;)&lt;/code&gt;. If some user-defined copy constructors are present, the user may still force the generation of the implicitly declared copy constructor with the keyword &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">클래스에는 여러 개의 복사 생성자가있을 수 있습니다 (예 : &lt;code&gt;T::T(const T&amp;amp;)&lt;/code&gt; 및 &lt;code&gt;T::T(T&amp;amp;)&lt;/code&gt; . 일부 사용자 정의 복사 생성자가 존재하더라도 사용자는 키워드 &lt;code&gt;default&lt;/code&gt; 를 사용하여 암시 적으로 선언 된 복사 생성자를 강제로 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea0fd74db644a3b140608452cb77e014bcf47686" translate="yes" xml:space="preserve">
          <source>A class can have multiple move assignment operators, e.g. both &lt;code&gt;T&amp;amp; T::operator=(const T&amp;amp;&amp;amp;)&lt;/code&gt; and &lt;code&gt;T&amp;amp; T::operator=(T&amp;amp;&amp;amp;)&lt;/code&gt;. If some user-defined move assignment operators are present, the user may still force the generation of the implicitly declared move assignment operator with the keyword &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">클래스에는 여러 이동 할당 연산자가있을 수 있습니다 (예 : &lt;code&gt;T&amp;amp; T::operator=(const T&amp;amp;&amp;amp;)&lt;/code&gt; 및 &lt;code&gt;T&amp;amp; T::operator=(T&amp;amp;&amp;amp;)&lt;/code&gt; . 일부 사용자 정의 이동 할당 연산자가 존재하더라도 사용자는 키워드 &lt;code&gt;default&lt;/code&gt; 를 사용하여 암시 적으로 선언 된 이동 할당 연산자를 강제로 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ec44d659593732e41afb1335fa632c9e9922aaf7" translate="yes" xml:space="preserve">
          <source>A class can have multiple move constructors, e.g. both &lt;code&gt;T::T(const T&amp;amp;&amp;amp;)&lt;/code&gt; and &lt;code&gt;T::T(T&amp;amp;&amp;amp;)&lt;/code&gt;. If some user-defined move constructors are present, the user may still force the generation of the implicitly declared move constructor with the keyword &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">클래스에는 여러 이동 생성자가있을 수 있습니다 (예 : &lt;code&gt;T::T(const T&amp;amp;&amp;amp;)&lt;/code&gt; 및 &lt;code&gt;T::T(T&amp;amp;&amp;amp;)&lt;/code&gt; . 일부 사용자 정의 이동 생성자가 존재하더라도 사용자는 키워드 &lt;code&gt;default&lt;/code&gt; 를 사용하여 암시 적으로 선언 된 이동 생성자를 강제로 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c42002dfe680b51a69be519ba49b54f8867cdcf8" translate="yes" xml:space="preserve">
          <source>A class can have the following kinds of members.</source>
          <target state="translated">클래스에는 다음과 같은 종류의 멤버가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b609924b6cbf0e0eb45f7692c32df793ac93816" translate="yes" xml:space="preserve">
          <source>A class declaration can appear in namespace scope (in which case it defines an ordinary class), inside another class definition (in which case it defines a &lt;a href=&quot;nested_classes&quot;&gt;nested class&lt;/a&gt;), and inside the body of a function, in which case it defines a</source>
          <target state="translated">클래스 선언은 네임 스페이스 범위 (이 경우 일반 클래스를 정의하는 경우), 다른 클래스 정의 (이 경우 &lt;a href=&quot;nested_classes&quot;&gt;중첩 된 클래스를&lt;/a&gt; 정의하는 경우 ) 및 함수 본문 내에 나타날 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1e3849ae6dd831af666fcb3de9bb2eb1299702a7" translate="yes" xml:space="preserve">
          <source>A class defined with the keyword &lt;code&gt;class&lt;/code&gt; has private access for its members and its base classes by default. A class defined with the keyword &lt;code&gt;struct&lt;/code&gt; has public access for its members and its base classes by default. A &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; has public access for its members by default.</source>
          <target state="translated">키워드 class로 정의 된 &lt;code&gt;class&lt;/code&gt; 는 기본적으로 멤버 및 기본 클래스에 대한 개인 액세스 권한을 갖습니다. 키워드 &lt;code&gt;struct&lt;/code&gt; 로 정의 된 클래스는 기본적으로 멤버 및 기본 클래스에 대한 공개 액세스 권한을 갖습니다. &lt;a href=&quot;union&quot;&gt;노동 조합이&lt;/a&gt; 기본적으로 회원을위한 공공 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a1ff8f108445c52327d9383ef06a59f94e3314e" translate="yes" xml:space="preserve">
          <source>A class does not have to implement a &lt;a href=&quot;../language/move_constructor&quot;&gt;move constructor&lt;/a&gt; to satisfy this type requirement: a &lt;a href=&quot;../language/copy_constructor&quot;&gt;copy constructor&lt;/a&gt; that takes a &lt;code&gt;const T&amp;amp;&lt;/code&gt; argument can bind rvalue expressions.</source>
          <target state="translated">클래스는 이 형식 요구 사항을 충족시키기 위해 &lt;a href=&quot;../language/move_constructor&quot;&gt;이동 생성자&lt;/a&gt; 를 구현할 필요가 없습니다 . &lt;code&gt;const T&amp;amp;&lt;/code&gt; 인수를 사용 하는 &lt;a href=&quot;../language/copy_constructor&quot;&gt;복사 생성자&lt;/a&gt; 는 rvalue 식을 바인딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f68d393bb94a50c56452d4c3cf44c1268630ecc" translate="yes" xml:space="preserve">
          <source>A class is a user-defined type.</source>
          <target state="translated">클래스는 사용자 정의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="be9d6f5d743dcff79fee7ca9e10287f1a607fc17" translate="yes" xml:space="preserve">
          <source>A class or struct declared &lt;a href=&quot;final&quot;&gt;final&lt;/a&gt; cannot appear in base-clause.</source>
          <target state="translated">&lt;a href=&quot;final&quot;&gt;final로&lt;/a&gt; 선언 된 클래스 또는 구조체는 기본 절에 나타날 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8c698751e9d04b7a69e80ad9f11830612c93f3b4" translate="yes" xml:space="preserve">
          <source>A class suitable for use with &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Searcher&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;Searcher&lt;/a&gt; overload of &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; that delegates the search operation to the pre-C++17 standard library's &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">검색 작업을 C ++ 17 이전 표준 라이브러리의 &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; 위임하는 &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; 의 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Searcher&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;검색기&lt;/a&gt; 과부하 와 함께 사용하기에 적합한 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="9545590496a9d558d293c83054fde0d9082d80d1" translate="yes" xml:space="preserve">
          <source>A class template by itself is not a type, or an object, or any other entity. No code is generated from a source file that contains only template definitions. In order for any code to appear, a template must be instantiated: the template arguments must be provided so that the compiler can generate an actual class (or function, from a function template).</source>
          <target state="translated">클래스 템플릿 자체는 유형, 객체 또는 다른 엔터티가 아닙니다. 템플릿 정의 만 포함 된 소스 파일에서 코드가 생성되지 않습니다. 코드를 표시하려면 템플릿을 인스턴스화해야합니다. 컴파일러가 실제 클래스 (또는 함수 템플릿에서 함수)를 생성 할 수 있도록 템플릿 인수를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="0844379dd4087d82f156f2ab29d7b71f6865d4d7" translate="yes" xml:space="preserve">
          <source>A class template defines a family of classes.</source>
          <target state="translated">클래스 템플릿은 클래스 제품군을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="2e1368668d87864c4bddcbf53db914a3e9406651" translate="yes" xml:space="preserve">
          <source>A class type (such as &lt;code&gt;class X&lt;/code&gt;) might be incomplete at one point in a translation unit and complete later on; the type &lt;code&gt;class X&lt;/code&gt; is the same type at both points:</source>
          <target state="translated">클래스 유형 (예 : &lt;code&gt;class X&lt;/code&gt; )은 번역 단위의 한 시점에서 불완전하고 나중에 완료 될 수 있습니다. 유형 &lt;code&gt;class X&lt;/code&gt; 는 두 지점에서 모두 동일한 유형입니다.</target>
        </trans-unit>
        <trans-unit id="a8e03c028d42dc38b8cf8cd0fe8b5a855a9e6d9b" translate="yes" xml:space="preserve">
          <source>A class type is defined by class-specifier, which appears in decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; syntax. The class specifier has the following syntax:</source>
          <target state="translated">클래스 유형은 클래스 지정자에 의해 정의되며 &lt;a href=&quot;declarations&quot;&gt;선언&lt;/a&gt; 구문 의 decl-specifier-seq에 나타납니다 . 클래스 지정자의 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="06181cd201ffa4d51b2b613c3753e0ce34e5fade" translate="yes" xml:space="preserve">
          <source>A class where all non-static data members have the same access control and certain other conditions are satisfied is known as</source>
          <target state="translated">모든 비 정적 데이터 멤버가 동일한 액세스 제어를 가지며 다른 특정 조건이 충족되는 클래스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="81dd9fa511a1f4bfc547397a6914049ad4c807de" translate="yes" xml:space="preserve">
          <source>A class with a &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; constructor is a &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType&lt;/a&gt;: objects of this type can be manipulated by &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; functions at compile time.</source>
          <target state="translated">&lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; 생성자가있는 클래스 는 &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType입니다&lt;/a&gt; .이 유형의 객체는 컴파일 타임 에 &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; 함수 로 조작 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1ede003b438e80024f7b8c4a5d601ed8d8879ed" translate="yes" xml:space="preserve">
          <source>A class with at least one declared or inherited &lt;a href=&quot;virtual&quot;&gt;virtual&lt;/a&gt; member function is</source>
          <target state="translated">선언되거나 상속 된 &lt;a href=&quot;virtual&quot;&gt;가상&lt;/a&gt; 멤버 함수가 하나 이상있는 클래스 는</target>
        </trans-unit>
        <trans-unit id="0ebf84457058090a601656446d4e44106dd20573" translate="yes" xml:space="preserve">
          <source>A class with at least one declared or inherited pure virtual member function is an &lt;a href=&quot;abstract_class&quot;&gt;abstract class&lt;/a&gt;. Objects of this type cannot be created.</source>
          <target state="translated">선언되거나 상속 된 순수 가상 멤버 함수가 하나 이상있는 클래스는 &lt;a href=&quot;abstract_class&quot;&gt;추상 클래스&lt;/a&gt; 입니다. 이 유형의 개체는 만들 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="719ec93f6620db49be098a31ed71d87cddeed13b" translate="yes" xml:space="preserve">
          <source>A clock consists of a starting point (or epoch) and a tick rate. For example, a clock may have an epoch of January 1, 1970 and tick every second. C++ defines several clock types:</source>
          <target state="translated">시계는 시작점 (또는 에포크)과 틱 속도로 구성됩니다. 예를 들어, 시계는 1970 년 1 월 1 일의 에포크 (epoch)를 가질 수 있으며 매 초마다 틱 (틱) 할 수 있습니다. C ++은 몇 가지 시계 유형을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a0e39b90a6cb653ffa38cbd92a158bb59c3fe2b6" translate="yes" xml:space="preserve">
          <source>A common error is setting the buffer of stdin or stdout to an array whose lifetime ends before the program terminates:</source>
          <target state="translated">일반적인 오류는 stdin 또는 stdout의 버퍼를 프로그램이 종료되기 전에 수명이 끝나는 배열로 설정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cc307299d5ed9d552e26de173efa748ec8760cfc" translate="yes" xml:space="preserve">
          <source>A common guideline is that a destructor for a base class must be &lt;a href=&quot;http://www.gotw.ca/publications/mill18.htm&quot;&gt;either public and virtual or protected and nonvirtual&lt;/a&gt;.</source>
          <target state="translated">일반적인 지침은 기본 클래스의 소멸자가 &lt;a href=&quot;http://www.gotw.ca/publications/mill18.htm&quot;&gt;공개 및 가상이거나 보호되고 비 가상적&lt;/a&gt; 이어야한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="afac72f5ab6e0fcd2aca25cac87606b663fdcfca" translate="yes" xml:space="preserve">
          <source>A common idiom is to use expression SFINAE on the return type, where the expression uses the comma operator, whose left subexpression is the one that is being examined (cast to void to ensure the user-defined operator comma on the returned type is not selected), and the right subexpression has the type that the function is supposed to return.</source>
          <target state="translated">일반적인 관용구는 리턴 유형에 SFINAE 표현식을 사용하는 것입니다. 여기서 표현식은 쉼표 연산자를 사용합니다. 왼쪽 하위 표현식은 검사중인 유형입니다 (반환 된 유형의 사용자 정의 연산자 쉼표가 선택되지 않도록하기 위해 void로 캐스트 됨). ), 오른쪽 하위 표현식에는 함수가 리턴해야하는 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7837d1b2ad2344135b3ced236eedd67243ea95ab" translate="yes" xml:space="preserve">
          <source>A common implementation for &lt;code&gt;enable_shared_from_this&lt;/code&gt; is to hold a weak reference (such as &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;) to &lt;code&gt;this&lt;/code&gt;. The constructors of &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; detect the presence of an unambiguous and accessible(since C++17)&lt;code&gt;enable_shared_from_this&lt;/code&gt; base and assign the newly created &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; to the internally stored weak reference if not already owned by a live &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;(since C++17). Constructing a &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; for an object that is already managed by another &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; will not consult the internally stored weak reference and thus will lead to undefined behavior.</source>
          <target state="translated">&lt;code&gt;enable_shared_from_this&lt;/code&gt; 의 일반적인 구현 은 이것에 대한 약한 참조 (예 : &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt; )를 보유 &lt;code&gt;this&lt;/code&gt; 입니다. &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 의 생성자는 C ++ 17 이후 &lt;code&gt;enable_shared_from_this&lt;/code&gt; 부터 명확하고 액세스 가능한 존재를 감지하고 라이브 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 아직 소유하지 않은 경우 새로 작성된 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 을 내부적으로 저장된 약한 참조에 지정합니다. (C ++ 17부터). 건설 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 이미 다른 의해 관리되는 객체에 대해 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 하므로 내부에 저장 약한 참조 협의되지 정의되지 않은 동작이 발생할 것이다.</target>
        </trans-unit>
        <trans-unit id="d0627f677b6bfa79bd80b2e27378433051033d60" translate="yes" xml:space="preserve">
          <source>A common mistake is to declare two function templates that differ only in their default template arguments. This is illegal because default template arguments are not part of function template's signature, and declaring two different function templates with the same signature is illegal.</source>
          <target state="translated">일반적인 실수는 기본 템플릿 인수에서만 다른 두 개의 함수 템플릿을 선언하는 것입니다. 기본 템플릿 인수가 함수 템플릿의 서명의 일부가 아니므로 동일한 서명으로 두 개의 다른 함수 템플릿을 선언하는 것은 불법이기 때문에 이것은 불법입니다.</target>
        </trans-unit>
        <trans-unit id="903cfada6023cc984b76c527f017096ab2951ca5" translate="yes" xml:space="preserve">
          <source>A common requirement for &lt;a href=&quot;operators#Relational_operators&quot;&gt;user-defined operator&amp;lt;&lt;/a&gt; is &lt;a href=&quot;https://en.wikipedia.org/wiki/Strict_weak_ordering&quot;&gt;strict weak ordering&lt;/a&gt;. In particular, this is required by the standard algorithms and containers that work with &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt; types: &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../algorithm/max_element&quot;&gt;std::max_element&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;a href=&quot;operators#Relational_operators&quot;&gt;사용자 정의 연산자 &amp;lt;&lt;/a&gt; 의 일반적인 요구 사항 은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Strict_weak_ordering&quot;&gt;엄격한 약한 순서&lt;/a&gt; 입니다. 특히, &lt;a href=&quot;../named_req/compare&quot;&gt;비교&lt;/a&gt; 유형 : &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../algorithm/max_element&quot;&gt;std::max_element&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; 등과 함께 작동하는 표준 알고리즘 및 컨테이너에 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="edb21f3ed0a362e2b913da91c1d4edf3f68ea44c" translate="yes" xml:space="preserve">
          <source>A common use case for &lt;code&gt;optional&lt;/code&gt; is the return value of a function that may fail. As opposed to other approaches, such as &lt;code&gt;&lt;a href=&quot;pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T,bool&amp;gt;&lt;/code&gt;, &lt;code&gt;optional&lt;/code&gt; handles expensive-to-construct objects well and is more readable, as the intent is expressed explicitly.</source>
          <target state="translated">&lt;code&gt;optional&lt;/code&gt; 일반적인 사용 사례 는 실패 할 수있는 함수의 반환 값입니다. 같은 다른 방법, 반대로 &lt;code&gt;&lt;a href=&quot;pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T,bool&amp;gt;&lt;/code&gt; , &lt;code&gt;optional&lt;/code&gt; 핸들 비싼 투 구조체 잘 목적과 취지가 명시 적으로 표현 된 바와 같이보다 판독된다.</target>
        </trans-unit>
        <trans-unit id="288296bf65cd832fd0b7a3defc250adc0a788f8f" translate="yes" xml:space="preserve">
          <source>A common use case for template friends is declaration of a non-member operator overload that acts on a class template, e.g. &lt;code&gt;operator&amp;lt;&amp;lt;(&lt;a href=&quot;../io/basic_ostream&quot;&gt;std::ostream&lt;/a&gt;&amp;amp;, const Foo&amp;lt;T&amp;gt;&amp;amp;)&lt;/code&gt; for some user-defined &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">템플릿 친구의 일반적인 사용 사례는 클래스 템플릿에서 작동하는 비 멤버 연산자 오버로드 선언입니다. 예를 들어 일부 사용자 정의 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;operator&amp;lt;&amp;lt;(&lt;a href=&quot;../io/basic_ostream&quot;&gt;std::ostream&lt;/a&gt;&amp;amp;, const Foo&amp;lt;T&amp;gt;&amp;amp;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b78a767c7077e09f1e58aaf3b98e4d2d1181c576" translate="yes" xml:space="preserve">
          <source>A comparison category type as defined above.</source>
          <target state="translated">위에서 정의한 비교 범주 유형</target>
        </trans-unit>
        <trans-unit id="e2c8e7e9442f401e4bb64c1c926d73cc5c662c80" translate="yes" xml:space="preserve">
          <source>A compound requirement has the form.</source>
          <target state="translated">복합 요구 사항의 형태는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="004add19ac089f9af13dd0de25e22e4dd4bf731c" translate="yes" xml:space="preserve">
          <source>A concept is a named set of requirements. The definition of a concept must appear at namespace scope.</source>
          <target state="translated">개념은 명명 된 요구 사항 집합입니다. 개념의 정의는 네임 스페이스 범위에 나타나야합니다.</target>
        </trans-unit>
        <trans-unit id="b6ad6c9aef9077feccf8de5bd5a8137f3d35ccf1" translate="yes" xml:space="preserve">
          <source>A condition variable is a synchronization primitive that allows multiple threads to communicate with each other. It allows some number of threads to wait (possibly with a timeout) for notification from another thread that they may proceed. A condition variable is always associated with a mutex.</source>
          <target state="translated">조건 변수는 여러 스레드가 서로 통신 할 수있는 동기화 기본 요소입니다. 일부 스레드 수는 다른 스레드로부터 진행될 수 있음을 알리기 위해 시간 종료 상태로 대기 할 수 있습니다. 조건 변수는 항상 뮤텍스와 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="d7ab0d471e579c2147626b7312bd2b1604067ff3" translate="yes" xml:space="preserve">
          <source>A conjunction of two constraints is satisfied only if both constraints are satisfied. Conjunctions are evaluated left to right and short-circuited (if the left constraint is not satisfied, template argument substitution into the right constraint is not attempted: this prevents failures due to substitution outside of immediate context).</source>
          <target state="translated">두 제한 조건의 결합은 두 제한 조건이 모두 충족되는 경우에만 충족됩니다. 연결은 왼쪽에서 오른쪽으로 평가되고 단락됩니다 (왼쪽 제약 조건이 충족되지 않으면 오른쪽 제약 조건으로의 템플릿 인수 대체는 시도되지 않습니다. 이렇게하면 즉각적인 컨텍스트 외부의 대체로 인한 실패를 방지 할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="e673a73d3eb19872ccad1f3f2d1fc1cc3cbd3451" translate="yes" xml:space="preserve">
          <source>A constrained declaration may only be redeclared using the same syntactic form. No diagnostic is required.</source>
          <target state="translated">제한된 선언은 동일한 구문 형식을 사용해서 만 다시 선언 될 수 있습니다. 진단이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7d5bfc3eeaa1ced79aadc223c5464ddedf9364c5" translate="yes" xml:space="preserve">
          <source>A constraint &lt;code&gt;P&lt;/code&gt; is said to</source>
          <target state="translated">구속 조건 &lt;code&gt;P&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="75835360ca2a8c81162f02f752c4ad0955c3bbb3" translate="yes" xml:space="preserve">
          <source>A constraint is a sequence of logical operations and operands that specifies requirements on template arguments. They can appear within</source>
          <target state="translated">제약 조건은 템플릿 인수에 대한 요구 사항을 지정하는 일련의 논리 연산 및 피연산자입니다. 그들은 안에 나타날 수 있습니다</target>
        </trans-unit>
        <trans-unit id="201d162ff74c75b39c099eafe0856ca091082e61" translate="yes" xml:space="preserve">
          <source>A constructor</source>
          <target state="translated">생성자</target>
        </trans-unit>
        <trans-unit id="1cc0004e44d74512bcd82773523e4ea2e9520116" translate="yes" xml:space="preserve">
          <source>A constructor (including default constructors) for a class is odr-used by the &lt;a href=&quot;initialization&quot;&gt;initialization&lt;/a&gt; that selects it.</source>
          <target state="translated">클래스의 생성자 (기본 생성자 포함)는 클래스 를 선택 하는 &lt;a href=&quot;initialization&quot;&gt;초기화에&lt;/a&gt; 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="154f81a48f0df5cddfe21451d0ef22feca0bdd6b" translate="yes" xml:space="preserve">
          <source>A constructor is</source>
          <target state="translated">생성자는</target>
        </trans-unit>
        <trans-unit id="cf82d4cf1aa18950145c2a2e92b194366d9a05e9" translate="yes" xml:space="preserve">
          <source>A constructor is called a 'move constructor' when it takes an rvalue reference as a parameter. It is not obligated to move anything, the class is not required to have a resource to be moved and a 'move constructor' may not be able to move a resource as in the allowable (but maybe not sensible) case where the parameter is a const rvalue reference (const T&amp;amp;&amp;amp;).</source>
          <target state="translated">rvalue 참조를 매개 변수로 사용하는 생성자를 '이동 생성자'라고합니다. 아무것도 이동해야 할 의무는 없으며 클래스는 이동할 리소스가 없어도되며 'move constructor'은 매개 변수가 다음과 같은 허용 가능한 (그러나 합당하지 않은) 경우처럼 리소스를 이동할 수 없습니다. const rvalue 참조 (const T &amp;amp;&amp;amp;).</target>
        </trans-unit>
        <trans-unit id="786a4fb43ed69e1b336387fd02859d1a82132b52" translate="yes" xml:space="preserve">
          <source>A constructor that is not declared with the specifier &lt;a href=&quot;explicit&quot;&gt;explicit&lt;/a&gt;and which can be called with a single parameter(until C++11) is called a</source>
          <target state="translated">지정자로 &lt;a href=&quot;explicit&quot;&gt;명시 적으로&lt;/a&gt; 선언되지 않고 단일 매개 변수 (C ++ 11까지)로 호출 할 수있는 생성자를</target>
        </trans-unit>
        <trans-unit id="0d1831b55f122e16e65ae0cefc89a50ccdaa10e4" translate="yes" xml:space="preserve">
          <source>A constructor with a single non-default parameter(until C++11) that is declared without the function specifier &lt;code&gt;explicit&lt;/code&gt; is called a &lt;a href=&quot;converting_constructor&quot;&gt;converting constructor&lt;/a&gt;.</source>
          <target state="translated">함수 지정자가 &lt;code&gt;explicit&lt;/code&gt; 선언되지 않은 단일 비 기본 매개 변수 (C ++ 11까지)가 있는 &lt;a href=&quot;converting_constructor&quot;&gt;생성자를 변환 생성자&lt;/a&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="04cb17190fa300b187e4a29716390493694b575f" translate="yes" xml:space="preserve">
          <source>A conversion-type-id in a &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion&lt;/a&gt; function name is first looked up in the scope of the class. If not found, the name is then looked up in the current scope.</source>
          <target state="translated">&lt;a href=&quot;cast_operator&quot;&gt;사용자 정의 변환&lt;/a&gt; 함수 이름 의 conversion-type-id 가 먼저 클래스 범위에서 검색됩니다. 찾을 수 없으면 이름이 현재 범위에서 조회됩니다.</target>
        </trans-unit>
        <trans-unit id="e775fcf05b002de801de31f682bafa87ff617bac" translate="yes" xml:space="preserve">
          <source>A copy assignment operator for a class that holds resources that can handle multiple readers, but only one writer.</source>
          <target state="translated">여러 독자를 처리 할 수 ​​있지만 하나의 작성자 만 처리 할 수있는 리소스를 보유하는 클래스의 복사 할당 연산자</target>
        </trans-unit>
        <trans-unit id="abc22353bec9f50f8b299a8a8a723ea9e8cdc66a" translate="yes" xml:space="preserve">
          <source>A copy assignment operator of class &lt;code&gt;T&lt;/code&gt; is a non-template &lt;a href=&quot;member_functions&quot;&gt;non-static member function&lt;/a&gt; with the name &lt;code&gt;operator=&lt;/code&gt; that takes exactly one parameter of type &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;T&amp;amp;&lt;/code&gt;, &lt;code&gt;const T&amp;amp;&lt;/code&gt;, &lt;code&gt;volatile T&amp;amp;&lt;/code&gt;, or &lt;code&gt;const volatile T&amp;amp;&lt;/code&gt;. For a type to be &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;, it must have a public copy assignment operator.</source>
          <target state="translated">클래스 &lt;code&gt;T&lt;/code&gt; 의 복사 할당 연산자 는 이름이 &lt;code&gt;operator=&lt;/code&gt; 인&lt;a href=&quot;member_functions&quot;&gt;비&lt;/a&gt; 템플릿 비 정적 멤버 함수 이며 유형 &lt;code&gt;T&lt;/code&gt; , &lt;code&gt;T&amp;amp;&lt;/code&gt; , &lt;code&gt;const T&amp;amp;&lt;/code&gt; , &lt;code&gt;volatile T&amp;amp;&lt;/code&gt; 또는 &lt;code&gt;const volatile T&amp;amp;&lt;/code&gt; 정확히 하나의 매개 변수를 사용합니다 . 유형이 &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; 이 되려면 공용 사본 할당 연산자가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="e583729bec2b79b7851639a4a20cb9009a77edb6" translate="yes" xml:space="preserve">
          <source>A copy constructor of class &lt;code&gt;T&lt;/code&gt; is a non-template &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt; whose first parameter is &lt;code&gt;T&amp;amp;&lt;/code&gt;&amp;zwj;, &lt;code&gt;const T&amp;amp;&lt;/code&gt;&amp;zwj;, &lt;code&gt;volatile T&amp;amp;&lt;/code&gt;&amp;zwj;, or &lt;code&gt;const volatile T&amp;amp;&lt;/code&gt;&amp;zwj;, and either there are no other parameters, or the rest of the parameters all have default values.</source>
          <target state="translated">클래스 &lt;code&gt;T&lt;/code&gt; 의 복사 생성자는 첫 번째 매개 변수가 &lt;code&gt;T&amp;amp;&lt;/code&gt; &amp;zwj;, &lt;code&gt;const T&amp;amp;&lt;/code&gt; &amp;zwj;, &lt;code&gt;volatile T&amp;amp;&lt;/code&gt; &amp;zwj; 또는 &lt;code&gt;const volatile T&amp;amp;&lt;/code&gt; &amp;zwj; 인 템플릿이 아닌 &lt;a href=&quot;constructor&quot;&gt;생성자&lt;/a&gt; 이며 다른 매개 변수가 없거나 나머지 매개 변수가 모두 기본값을 갖습니다. 가치.</target>
        </trans-unit>
        <trans-unit id="be82bccc96946d36b70dc97ec2624b93f79fe9d6" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt;, which may be a null pointer.</source>
          <target state="translated">널 포인터 일 수있는 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt; 사본 .</target>
        </trans-unit>
        <trans-unit id="9dfe87d9637a86fea3e2c59b1422de774a3386b8" translate="yes" xml:space="preserve">
          <source>A copy of the &lt;code&gt;std::chrono::month&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">의 사본 &lt;code&gt;std::chrono::month&lt;/code&gt; 객체에 저장 &lt;code&gt;*this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f3a37b6f13d1c644a8ead2349862e390c24471b" translate="yes" xml:space="preserve">
          <source>A copy of the &lt;code&gt;std::chrono::weekday&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">의 사본 &lt;code&gt;std::chrono::weekday&lt;/code&gt; 객체에 저장 &lt;code&gt;*this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9f1bd488dfb48b629618e2a1d06482488ffb310" translate="yes" xml:space="preserve">
          <source>A copy of the returned string along with the category used in this call to &lt;code&gt;std::setlocale&lt;/code&gt; may be used later in the program to restore the locale back to the state at the end of this call.</source>
          <target state="translated">&lt;code&gt;std::setlocale&lt;/code&gt; 에 대한이 호출에 사용 된 범주와 함께 리턴 된 문자열의 사본은 프로그램에서 나중에이 호출의 끝에서 로케일을 복원하기 위해 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c62723db0b8ca37045a0c9bb3b70acae310e0c1" translate="yes" xml:space="preserve">
          <source>A copy of the stored time zone pointer.</source>
          <target state="translated">저장된 시간대 포인터의 사본.</target>
        </trans-unit>
        <trans-unit id="6b693cce6ae5221a781b8a07c471b1f15ee61bea" translate="yes" xml:space="preserve">
          <source>A coroutine is a function that can suspend execution to be resumed later. Coroutines are stackless: they suspend execution by returning to the caller. This allows for sequential code that executes asynchronously (e.g. to handle non-blocking I/O without explicit callbacks), and also supports algorithms on lazy-computed infinite sequences and other uses.</source>
          <target state="translated">코 루틴은 나중에 다시 시작하기 위해 실행을 일시 중지 할 수있는 기능입니다. 코 루틴은 스택이 없으므로 호출자에게 반환하여 실행을 일시 중단합니다. 이를 통해 비동기식으로 실행되는 순차적 코드 (예 : 명시 적 콜백없이 비 차단 I / O 처리)를 수행 할 수 있으며 지연 계산 된 무한 시퀀스 및 기타 용도의 알고리즘도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ba75a881abd2a6557e91f8b47ac8a6575d6bd0c9" translate="yes" xml:space="preserve">
          <source>A counted range &lt;code&gt;[i, n)&lt;/code&gt; is the &lt;code&gt;n&lt;/code&gt; elements starting with the element pointed to by &lt;code&gt;i&lt;/code&gt; and up to but not including the element, if any, pointed to by the result of &lt;code&gt;n&lt;/code&gt; applications of &lt;code&gt;++i&lt;/code&gt;.</source>
          <target state="translated">카운트 된 범위는 &lt;code&gt;[i, n)&lt;/code&gt; 은 IS &lt;code&gt;n&lt;/code&gt; 요소가 가리키는로 시작하는 요소 &lt;code&gt;i&lt;/code&gt; 임의의 결과에 의해 지정된 경우, 소자를 포함한 최대 아니지만 및 &lt;code&gt;n&lt;/code&gt; 의 응용 &lt;code&gt;++i&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="448d103896a72988a86efcfd3d4dff473c54647a" translate="yes" xml:space="preserve">
          <source>A counted view presents a &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; of the elements of the</source>
          <target state="translated">계산 된보기는 요소의 &lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="d7756ec5996ae63b7229d1cb191ddbaa0002df17" translate="yes" xml:space="preserve">
          <source>A deallocation function for a class is odr-used by a &lt;a href=&quot;delete&quot;&gt;delete expression&lt;/a&gt; appearing in a potentially-evaluated expression</source>
          <target state="translated">클래스에 대한 할당 해제 함수 는 잠재적으로 평가되는 &lt;a href=&quot;delete&quot;&gt;표현식에&lt;/a&gt; 나타나는 삭제 표현식 에 의해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="68c3d6d57bebaaed7123b28c5dc529f120ec4034" translate="yes" xml:space="preserve">
          <source>A declaration directly contained in a language linkage specification is treated as if it contains the &lt;a href=&quot;storage_duration&quot;&gt;extern specifier&lt;/a&gt; for the purpose of determining the &lt;a href=&quot;storage_duration#Linkage&quot;&gt;linkage&lt;/a&gt; of the declared name and whether it is a &lt;a href=&quot;definition&quot;&gt;definition&lt;/a&gt;.</source>
          <target state="translated">언어 연결 사양에 직접 포함 된 선언은 선언 된 이름 의 &lt;a href=&quot;storage_duration#Linkage&quot;&gt;연결&lt;/a&gt; 및 &lt;a href=&quot;definition&quot;&gt;정의&lt;/a&gt; 여부 를 결정하기 위해 &lt;a href=&quot;storage_duration&quot;&gt;extern 지정자&lt;/a&gt; 를 포함하는 것처럼 취급됩니다 .</target>
        </trans-unit>
        <trans-unit id="f5ece06d6cbf7b0b2875beacd53b2ad0a1206cfd" translate="yes" xml:space="preserve">
          <source>A declaration is one of the following:</source>
          <target state="translated">선언은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="e0bd7b84e776165bb84d865d05b5e10b11415e15" translate="yes" xml:space="preserve">
          <source>A declaration of a &lt;a href=&quot;class&quot;&gt;class/struct&lt;/a&gt; or &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; may appear in within another class. Such declaration declares a</source>
          <target state="translated">&lt;a href=&quot;class&quot;&gt;클래스 / 구조&lt;/a&gt; 또는 &lt;a href=&quot;union&quot;&gt;공용체&lt;/a&gt; 선언이 다른 클래스 내에 나타날 수 있습니다. 그러한 선언은</target>
        </trans-unit>
        <trans-unit id="3c1639813cef172042dde9fb318ca556d46fc2fb" translate="yes" xml:space="preserve">
          <source>A declaration of the following form.</source>
          <target state="translated">다음 형식의 선언.</target>
        </trans-unit>
        <trans-unit id="ad6c3d5789c9ebe1eee9600961b3add313476bfa" translate="yes" xml:space="preserve">
          <source>A declaration of the form &lt;code&gt;T a[N];&lt;/code&gt;, declares &lt;code&gt;a&lt;/code&gt; as an array object that consists of &lt;code&gt;N&lt;/code&gt; contiguously allocated objects of type &lt;code&gt;T&lt;/code&gt;. The elements of an array are numbered &lt;code&gt;0, &amp;hellip;, N - 1&lt;/code&gt;, and may be accessed with the &lt;a href=&quot;operator_member_access#Built-in_subscript_operator&quot;&gt;subscript operator []&lt;/a&gt;, as in &lt;code&gt;a[0]&lt;/code&gt;, &amp;hellip;, &lt;code&gt;a[N - 1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T a[N];&lt;/code&gt; 형식의 선언 ; 는 &lt;code&gt;T&lt;/code&gt; 유형 의 &lt;code&gt;N&lt;/code&gt; 개의 연속적으로 할당 된 객체 로 구성된 배열 객체로 선언 &lt;code&gt;a&lt;/code&gt; . 배열의 요소는 &lt;code&gt;0, &amp;hellip;, N - 1&lt;/code&gt; 로 번호가 지정되며 &lt;code&gt;a[0]&lt;/code&gt; ,&amp;hellip;, &lt;code&gt;a[N - 1]&lt;/code&gt; 에서 와 같이 &lt;a href=&quot;operator_member_access#Built-in_subscript_operator&quot;&gt;아래 첨자 연산자 []를&lt;/a&gt; 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="735d6ea64d95c8eae5f31d5fa950b36294f92359" translate="yes" xml:space="preserve">
          <source>A declarator is one of the following:</source>
          <target state="translated">선언자는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="aa37ccd8d8d756aada7ae1d3f6fecf8c8f8f3061" translate="yes" xml:space="preserve">
          <source>A deduction guide is not a function and does not have a body. Deduction guides are not found by name lookup and do not participate in overload resolution except for the &lt;a href=&quot;overload_resolution#Best_viable_function&quot;&gt;overload resolution against other deduction guides&lt;/a&gt; when deducing class template arguments. Deduction guides cannot be redeclared in the same translation unit for the same class template.</source>
          <target state="translated">추론 가이드는 기능이 아니며 신체가 없습니다. 추론 가이드는 이름 조회로 찾을 수 없으며 클래스 템플릿 인수를 추론 할 때 &lt;a href=&quot;overload_resolution#Best_viable_function&quot;&gt;다른 추론 가이드에&lt;/a&gt; 대한 오버로드 확인을 제외하고 오버로드 확인에 참여하지 않습니다 . 동일한 클래스 템플릿에 대해 동일한 번역 단위로 추론 가이드를 다시 선언 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="18b582f9b8089c8fad2b6aef72209d901f622aa9" translate="yes" xml:space="preserve">
          <source>A default constructor is a &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt; which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter). A type with a public default constructor is &lt;a href=&quot;../named_req/defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt;.</source>
          <target state="translated">기본 생성자는 인수없이 호출 할 수 있는 &lt;a href=&quot;constructor&quot;&gt;생성자&lt;/a&gt; 입니다 (빈 매개 변수 목록으로 정의되거나 모든 매개 변수에 제공된 기본 인수로). 공개 기본 생성자를 가진 유형은 &lt;a href=&quot;../named_req/defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="81b02953ca7f1049034ff96ba7a7ca2b845b9e42" translate="yes" xml:space="preserve">
          <source>A default constructor that stores an offset of zero and value-initializes the state object.</source>
          <target state="translated">오프셋을 0으로 저장하고 상태 객체를 값으로 초기화하는 기본 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="3c176eb04610d0c2c8b2b59432032e7462678854" translate="yes" xml:space="preserve">
          <source>A default-constructed &lt;code&gt;polymorphic_allocator&lt;/code&gt; object.</source>
          <target state="translated">기본 구성 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="2f0375fb83f5610006b9da824ecc4d5adbd26863" translate="yes" xml:space="preserve">
          <source>A default-constructed &lt;code&gt;std::exception_ptr&lt;/code&gt; is a null pointer; it does not point to an exception object.</source>
          <target state="translated">기본 구성 &lt;code&gt;std::exception_ptr&lt;/code&gt; 은 널 포인터입니다. 예외 객체를 가리 키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="36e2b61a7ee3861a6a6cf3d23e07970d73ec3a31" translate="yes" xml:space="preserve">
          <source>A default-constructed match result has no result state (is not</source>
          <target state="translated">기본 생성 된 일치 결과에는 결과 상태가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0ada824ffc3c79281079e53b6cb3db89386ccf30" translate="yes" xml:space="preserve">
          <source>A defaulted copy assignment operator for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="translated">클래스 &lt;code&gt;T&lt;/code&gt; 에 대한 기본 복사 할당 연산자 는 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="9f4fde283c8ff24d3d454915c90ed3c9ab54ae88" translate="yes" xml:space="preserve">
          <source>A deleted function is implicitly an inline function: its (deleted) definition can appear in more than one translation unit.</source>
          <target state="translated">삭제 된 함수는 암시 적으로 인라인 함수입니다. (삭제 된) 정의는 둘 이상의 번역 단위로 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38e46a775f8271d46ac8ba6c6f050dd4aa8321fc" translate="yes" xml:space="preserve">
          <source>A deleted implicitly-declared move assignment operator is ignored by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;.</source>
          <target state="translated">삭제 된 암시 적으로 선언 된 이동 할당 연산자는 &lt;a href=&quot;overload_resolution&quot;&gt;과부하 해결에&lt;/a&gt; 의해 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="7ab7519b7a1ef3ffb0c871d7f2e721a2e2b8da2f" translate="yes" xml:space="preserve">
          <source>A dereferenceable pointer to &lt;code&gt;r&lt;/code&gt;, of the type pointer_traits&amp;lt;&amp;gt;::pointer.</source>
          <target state="translated">pointer_traits &amp;lt;&amp;gt; :: pointer 유형의 &lt;code&gt;r&lt;/code&gt; 에 대한 역 참조 가능한 포인터.</target>
        </trans-unit>
        <trans-unit id="3da43daef68b5251310c750e2919f29567a2f121" translate="yes" xml:space="preserve">
          <source>A destructor for a class is odr-used if it is potentially invoked</source>
          <target state="translated">클래스의 소멸자가 잠재적으로 호출되면 odr 사용됩니다</target>
        </trans-unit>
        <trans-unit id="9913efa427029f2603afafd45776c72670630d06" translate="yes" xml:space="preserve">
          <source>A destructor is a special &lt;a href=&quot;member_functions&quot;&gt;member function&lt;/a&gt; that is called when the &lt;a href=&quot;lifetime&quot;&gt;lifetime of an object&lt;/a&gt; ends. The purpose of the destructor is to free the resources that the object may have acquired during its lifetime.</source>
          <target state="translated">소멸자는 &lt;a href=&quot;lifetime&quot;&gt;개체&lt;/a&gt; 의 수명이 끝날 때 호출 되는 특수 &lt;a href=&quot;member_functions&quot;&gt;멤버 함수&lt;/a&gt; 입니다 . 소멸자의 목적은 객체가 수명 동안 획득했을 수있는 리소스를 해제하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="233d8857531b55ad102039f2d423d152b10acdcd" translate="yes" xml:space="preserve">
          <source>A destructor is looked up as described above (in the scope of the name to the left of ::)</source>
          <target state="translated">위에서 설명한대로 소멸자가 조회됩니다 (:: 왼쪽의 이름 범위에서).</target>
        </trans-unit>
        <trans-unit id="dd75f21c22d3624cfc21c2eaf157652238adfd51" translate="yes" xml:space="preserve">
          <source>A destructor may be declared &lt;a href=&quot;abstract_class&quot;&gt;pure virtual&lt;/a&gt;, for example in a base class which needs to be made abstract, but has no other suitable functions that could be declared pure virtual. Such destructor must have a definition, since all base class destructors are always called when the derived class is destroyed:</source>
          <target state="translated">소멸자는 &lt;a href=&quot;abstract_class&quot;&gt;순수 가상&lt;/a&gt; 으로 선언 될 수 있습니다 ( 예 : 추상 클래스로 작성해야하는 기본 클래스에서 순수 가상 으로 선언 될 수있는 다른 적절한 기능이 없음). 파생 클래스가 소멸 될 때 모든 기본 클래스 소멸자가 항상 호출되므로 이러한 소멸자는 정의를 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="35a0bdae03b190e366e55aaedf802460df63da63" translate="yes" xml:space="preserve">
          <source>A deterministic random number generator (e.g. a pseudo-random engine) has entropy zero.</source>
          <target state="translated">결정 난수 생성기 (예 : 의사 난수 엔진)는 엔트로피 0을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="2ba4368c481f7e07c3699c3a67e9a78a76dcb42e" translate="yes" xml:space="preserve">
          <source>A directory suitable for temporary files. The path is guaranteed to exist and to be a directory. The overload that takes &lt;code&gt;error_code&amp;amp;&lt;/code&gt; argument returns an empty path on error.</source>
          <target state="translated">임시 파일에 적합한 디렉토리입니다. 경로는 존재하고 디렉토리 여야합니다. &lt;code&gt;error_code&amp;amp;&lt;/code&gt; 인수 를 사용하는 과부하는 오류시 빈 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2c9c094be632a0a865a6166ec40c981fbc2b8fac" translate="yes" xml:space="preserve">
          <source>A disjunction of two constraints is satisfied if either constraint is satisfied. Disjunctions are evaluated left to right and short-circuited (if the left constraint is satisfied, template argument substitution into the right constraint is not attempted).</source>
          <target state="translated">두 제약 조건 중 하나가 충족되면 두 제약 조건의 분리가 충족됩니다. 분리는 왼쪽에서 오른쪽으로 평가되고 단락됩니다 (왼쪽 제한 조건이 충족되면 오른쪽 제한 조건으로 템플리트 인수 대체가 시도되지 않음).</target>
        </trans-unit>
        <trans-unit id="089c028655f5931200be1bc3ff6ad58ddd4abdfd" translate="yes" xml:space="preserve">
          <source>A domain error or range error may occur if &lt;code&gt;arg&lt;/code&gt; is zero, infinite, or NaN.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 가 0, 무한 또는 NaN 이면 도메인 오류 또는 범위 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53e473a92e89597b00e7916dbd0a636020aa56b0" translate="yes" xml:space="preserve">
          <source>A downcast can also be performed with &lt;code&gt;static_cast&lt;/code&gt;, which avoids the cost of the runtime check, but it's only safe if the program can guarantee (through some other logic) that the object pointed to by expression is definitely &lt;code&gt;Derived&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; 를 사용 하여 다운 캐스트를 수행 할 수도 있습니다 . 런타임 검사 비용을 피할 수 있지만, 프로그램이 (다른 로직을 통해) 표현식이 가리키는 오브젝트가 확실히 &lt;code&gt;Derived&lt;/code&gt; 되었음을 보장 할 수있는 경우에만 안전합니다 .</target>
        </trans-unit>
        <trans-unit id="20a6c97456730ebe82433bded5f34157e8861bdc" translate="yes" xml:space="preserve">
          <source>A duration consists of a span of time, defined as some number of ticks of some time unit. For example, &quot;42 seconds&quot; could be represented by a duration consisting of 42 ticks of a 1-second time unit.</source>
          <target state="translated">지속 시간은 일부 시간 단위의 틱 수로 정의 된 시간 범위로 구성됩니다. 예를 들어, &quot;42 초&quot;는 1 초 단위의 42 틱으로 구성된 지속 시간으로 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9d5f985455aec9d5b30cd29942a2a8b4f2dc3ae" translate="yes" xml:space="preserve">
          <source>A friend class declaration cannot define a new class (&lt;code&gt;friend class X {};&lt;/code&gt; is an error).</source>
          <target state="translated">프렌드 클래스 선언은 새 클래스를 정의 할 수 없습니다 ( &lt;code&gt;friend class X {};&lt;/code&gt; 오류입니다).</target>
        </trans-unit>
        <trans-unit id="c164b8418ab75a2e5bbac8718c7afdde0672f0ad" translate="yes" xml:space="preserve">
          <source>A fully-sorted range meets these criteria.</source>
          <target state="translated">완전히 분류 된 범위는 이러한 기준을 충족합니다.</target>
        </trans-unit>
        <trans-unit id="05f4bc669919c7a0f9df3b62e5450b1a7ad8db7f" translate="yes" xml:space="preserve">
          <source>A function can be explicitly declared to be transaction-safe by using the keyword &lt;code&gt;transaction_safe&lt;/code&gt; in its declaration.</source>
          <target state="translated">함수가 명시 적으로 트랜잭션 안전 키워드를 사용하여 선언 할 수 &lt;code&gt;transaction_safe&lt;/code&gt; 을 선언합니다.</target>
        </trans-unit>
        <trans-unit id="da4396153ec7254552c3bf758717ccd722434b42" translate="yes" xml:space="preserve">
          <source>A function can be re-declared without a linkage specification after it was declared with a language specification, the second declaration will reuse the first language linkage. The opposite is not true: if the first declaration has no language linkage, it is assumed &lt;code&gt;&quot;C++&quot;&lt;/code&gt;, and redeclaring with another language is an error.</source>
          <target state="translated">언어 사양으로 선언 된 후 연결 사양없이 함수를 다시 선언 할 수 있으며, 두 번째 선언은 첫 번째 언어 연결을 재사용합니다. 반대의 경우는 사실이 아닙니다. 첫 번째 선언에 언어 연결이 없으면 &lt;code&gt;&quot;C++&quot;&lt;/code&gt; 간주 되고 다른 언어로 다시 선언하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d48dbb4188a44c75a7c9c9bb0ae4fd5694fac0ce" translate="yes" xml:space="preserve">
          <source>A function can terminate by &lt;a href=&quot;return&quot;&gt;returning&lt;/a&gt; or by &lt;a href=&quot;throw&quot;&gt;throwing&lt;/a&gt; an &lt;a href=&quot;exceptions&quot;&gt;exception&lt;/a&gt;.</source>
          <target state="translated">함수는로 종료 할 수 &lt;a href=&quot;return&quot;&gt;복귀&lt;/a&gt; 하거나하여 &lt;a href=&quot;throw&quot;&gt;던지는 &lt;/a&gt;&lt;a href=&quot;exceptions&quot;&gt;예외&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e906d7d09117dff8da8e93d630b0ab6f1f193aed" translate="yes" xml:space="preserve">
          <source>A function declaration introduces the function name and its type. A function definition associates the function name/type with the function body.</source>
          <target state="translated">함수 선언은 함수 이름과 유형을 소개합니다. 함수 정의는 함수 이름 / 유형을 함수 본문과 연관시킵니다.</target>
        </trans-unit>
        <trans-unit id="ffb38575cbb95e86066c28731cb8ece89ed7d8b5" translate="yes" xml:space="preserve">
          <source>A function declaration without a decl-specifier-seq:</source>
          <target state="translated">decl-specifier-seq가없는 함수 선언 :</target>
        </trans-unit>
        <trans-unit id="64fee3be6cbfe3de470be017d74181e41a6c7c68" translate="yes" xml:space="preserve">
          <source>A function declaration without a function body</source>
          <target state="translated">함수 본문이없는 함수 선언</target>
        </trans-unit>
        <trans-unit id="f7b426bce9474a4c0c0191d7e862f822ce490168" translate="yes" xml:space="preserve">
          <source>A function declarator.</source>
          <target state="translated">함수 선언자</target>
        </trans-unit>
        <trans-unit id="53b921ac337f009bc154b162ea1a058102eaf4c7" translate="yes" xml:space="preserve">
          <source>A function declared &lt;code&gt;constexpr&lt;/code&gt; is implicitly an inline function.</source>
          <target state="translated">&lt;code&gt;constexpr&lt;/code&gt; 로 선언 된 함수 는 암시 적으로 인라인 함수입니다.</target>
        </trans-unit>
        <trans-unit id="2a0d470a4bd8c8b0af0d879cf6c92c40a35e57cd" translate="yes" xml:space="preserve">
          <source>A function defined entirely inside a &lt;a href=&quot;classes&quot;&gt;class/struct/union definition&lt;/a&gt;, whether it's a member function or a non-member &lt;code&gt;friend&lt;/code&gt; function, is implicitly an inline function.</source>
          <target state="translated">멤버 함수이든 비 멤버 &lt;code&gt;friend&lt;/code&gt; 함수 이든 관계없이 &lt;a href=&quot;classes&quot;&gt;클래스 / 구조 / 연합 정의&lt;/a&gt; 내에 완전히 정의 된 함수는 암시 적으로 인라인 함수입니다.</target>
        </trans-unit>
        <trans-unit id="ec194f104337987654a52dcbe1e1e845c65a6e93" translate="yes" xml:space="preserve">
          <source>A function is a coroutine if its definition does any of the following:</source>
          <target state="translated">정의가 다음 중 하나를 수행하는 경우 함수는 코 루틴입니다.</target>
        </trans-unit>
        <trans-unit id="ecaa114236d48b6a12bf949ca33d8212d95b820c" translate="yes" xml:space="preserve">
          <source>A function may be a &lt;a href=&quot;coroutines&quot;&gt;coroutine&lt;/a&gt;, in which case it can suspend execution to be resumed later.</source>
          <target state="translated">함수는 &lt;a href=&quot;coroutines&quot;&gt;코 루틴&lt;/a&gt; 일 수 있으며 ,이 경우 나중에 다시 시작하기 위해 실행을 일시 중단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c56d11a7df52c37599040edb3e3c979bb33e10d" translate="yes" xml:space="preserve">
          <source>A function object of type &lt;code&gt;T&lt;/code&gt; that is unspecified, except that the types of objects returned by two calls to &lt;code&gt;std::bind_front&lt;/code&gt; with the same arguments are the same.</source>
          <target state="translated">동일한 인수를 가진 &lt;code&gt;std::bind_front&lt;/code&gt; 에 대한 두 번의 호출로 리턴 된 오브젝트 유형이 동일하다는 점을 제외하고 지정되지 않은 &lt;code&gt;T&lt;/code&gt; 유형의 함수 오브젝트</target>
        </trans-unit>
        <trans-unit id="17217496cc5f94cbdfb5993024f235b2c8a86e13" translate="yes" xml:space="preserve">
          <source>A function object of unspecified type &lt;code&gt;T&lt;/code&gt;, for which &lt;code&gt;&lt;a href=&quot;is_bind_expression&quot;&gt;std::is_bind_expression&lt;/a&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;. It has the following members:</source>
          <target state="translated">불특정 형 함수 객체 &lt;code&gt;T&lt;/code&gt; ,되는 &lt;code&gt;&lt;a href=&quot;is_bind_expression&quot;&gt;std::is_bind_expression&lt;/a&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt; . 다음과 같은 멤버가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd0c0b84b48029cbc70889b717ce5ad45fdf5e5a" translate="yes" xml:space="preserve">
          <source>A function object of unspecified type T. It has the following members:</source>
          <target state="translated">지정되지 않은 유형 T의 함수 객체. 다음과 같은 멤버가 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e9b21027ea5a8a4208fd40ea14715037c69c73e" translate="yes" xml:space="preserve">
          <source>A function object that binds an argument to a binary function.</source>
          <target state="translated">이진 함수에 인수를 바인딩하는 함수 객체입니다.</target>
        </trans-unit>
        <trans-unit id="8beb5d22ba2ef9b675efbb24b26bb9c7feae1fbd" translate="yes" xml:space="preserve">
          <source>A function object wrapping &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 와 &lt;code&gt;x&lt;/code&gt; 를 감싸는 함수 객체 .</target>
        </trans-unit>
        <trans-unit id="b8264f450d0f4a0eb5479a6403725c4e108a20b0" translate="yes" xml:space="preserve">
          <source>A function object wrapping &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">함수 객체 줄 바꿈 &lt;code&gt;f&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="29da7a46779a8fa96aa7886be30dbab4d7228995" translate="yes" xml:space="preserve">
          <source>A function template by itself is not a type, or a function, or any other entity. No code is generated from a source file that contains only template definitions. In order for any code to appear, a template must be instantiated: the template arguments must be determined so that the compiler can generate an actual function (or class, from a class template).</source>
          <target state="translated">함수 템플릿 자체는 유형, 함수 또는 다른 엔티티가 아닙니다. 템플릿 정의 만 포함 된 소스 파일에서 코드가 생성되지 않습니다. 코드가 나타나려면 템플릿을 인스턴스화해야합니다. 템플릿 인수는 컴파일러가 실제 함수 (또는 클래스 템플릿에서 클래스)를 생성 할 수 있도록 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="a399a5571cd60b0b35ad275684677bba886f47d6" translate="yes" xml:space="preserve">
          <source>A function template defines a family of functions.</source>
          <target state="translated">함수 템플릿은 함수 계열을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="cb41387b211eb02fafa2b0588377b1b56a1f6afc" translate="yes" xml:space="preserve">
          <source>A function template generated from a guide is preferred over one implicitly generated from a constructor or constructor template.</source>
          <target state="translated">가이드에서 생성 된 함수 템플릿은 생성자 또는 생성자 템플릿에서 암시 적으로 생성 된 것보다 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="132a68593e81a964739bd14a8da36430256f7483" translate="yes" xml:space="preserve">
          <source>A function template implicitly generated from a non-template constructor is preferred over a function template implicitly generated from a constructor template.</source>
          <target state="translated">템플릿이 아닌 생성자에서 암시 적으로 생성 된 함수 템플릿은 생성자 템플릿에서 암시 적으로 생성 된 함수 템플릿보다 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="9fa81bf06ed5ca7fac6664a9eb3439cbd75e0bc5" translate="yes" xml:space="preserve">
          <source>A function whose name appears as a potentially-evaluated expression (including named function, overloaded operator, &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion&lt;/a&gt;, user-defined placement forms of operator new, non-default initialization) is odr-used if it is selected by overload resolution, except when it is an unqualified pure virtual member function or a pointer-to-member to a pure virtual function(since C++17).</source>
          <target state="translated">이름이 잠재적으로 평가되는 식 (명명 된 함수, 오버로드 된 연산자, &lt;a href=&quot;cast_operator&quot;&gt;사용자 정의 변환&lt;/a&gt; , 사용자 정의 된 연산자의 새로운 정의, 기본이 아닌 초기화 포함)으로 표시되는 함수 는 과부하 해결에 의해 선택된 경우 odr-used, 정규화되지 않은 순수 가상 멤버 함수이거나 순수 가상 함수에 대한 포인터 (C ++ 17 이후) 인 경우를 제외하고.</target>
        </trans-unit>
        <trans-unit id="d0cff2e7a5d83d3ba9fb6bc996e4806115df5169" translate="yes" xml:space="preserve">
          <source>A function with the same name and the same argument list as a specialization is not a specialization (see template overloading in &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt;).</source>
          <target state="translated">전문화와 이름 및 인수 목록이 동일한 함수는 전문화가 아닙니다 ( &lt;a href=&quot;function_template&quot;&gt;함수 템플리트의&lt;/a&gt; 템플리트 오버로드 참조 ).</target>
        </trans-unit>
        <trans-unit id="528dad90604f19a889e64c08e79cee382c5e3c31" translate="yes" xml:space="preserve">
          <source>A function with the same name but different parameter list does not override the base function of the same name, but</source>
          <target state="translated">이름은 같지만 매개 변수 목록이 다른 함수는 동일한 이름의 기본 함수를 대체하지 않지만</target>
        </trans-unit>
        <trans-unit id="32311fb20f46258c03d2446ebb5b51b21c54c36b" translate="yes" xml:space="preserve">
          <source>A future referring to the shared state of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 공유 상태를 참조하는 미래 .</target>
        </trans-unit>
        <trans-unit id="b4485a66d15239df845a6f9e93994e9cf8a6c68f" translate="yes" xml:space="preserve">
          <source>A future which shares the same shared state as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 동일한 공유 상태를 공유하는 미래 .</target>
        </trans-unit>
        <trans-unit id="e0c478b6ebdeb08cc8b5ae99d5822e50d913def2" translate="yes" xml:space="preserve">
          <source>A generic captureless lambda has a user-defined conversion function template with the same invented template parameter list as the function-call operator template. If the return type is empty or auto, it is obtained by return type deduction on the function template specialization, which, in turn, is obtained by &lt;a href=&quot;template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; for conversion function templates.</source>
          <target state="translated">일반 캡처리스 람다는 함수 호출 연산자 템플릿과 동일한 발명의 템플릿 매개 변수 목록을 가진 사용자 정의 변환 함수 템플릿을 가지고 있습니다. 리턴 유형이 비어 있거나 자동 인 경우, 함수 템플리트 전문화에 대한 리턴 유형 공제에 의해 구해지고, 변환 함수 템플리트에 대한 &lt;a href=&quot;template_argument_deduction&quot;&gt;템플리트 인수 공제&lt;/a&gt; 에 의해 구해집니다 .</target>
        </trans-unit>
        <trans-unit id="faee911640b7bcb780b8ce78e1d67e4a8a1f4c11" translate="yes" xml:space="preserve">
          <source>A glvalue can have &lt;a href=&quot;type-id#Incomplete_type&quot;&gt;incomplete type&lt;/a&gt;, where permitted by the expression.</source>
          <target state="translated">glvalue는 표현식이 허용하는 경우 &lt;a href=&quot;type-id#Incomplete_type&quot;&gt;불완전한 type을&lt;/a&gt; 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6b0fe9a2db69c91f90e3611345c407e88159cd56" translate="yes" xml:space="preserve">
          <source>A glvalue may be &lt;a href=&quot;objects#Polymorphic_objects&quot;&gt;polymorphic&lt;/a&gt;: the &lt;a href=&quot;type-id#Dynamic_type&quot;&gt;dynamic type&lt;/a&gt; of the object it identifies is not necessarily the static type of the expression.</source>
          <target state="translated">glvalue는 &lt;a href=&quot;objects#Polymorphic_objects&quot;&gt;다형성&lt;/a&gt; 일 수 있습니다 . 식별하는 객체 의 &lt;a href=&quot;type-id#Dynamic_type&quot;&gt;동적 유형&lt;/a&gt; 이 반드시 정적 유형의 표현은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e0737b0db85c64af3308f6e0773890b7a42053f7" translate="yes" xml:space="preserve">
          <source>A glvalue may be implicitly converted to a prvalue with lvalue-to-rvalue, array-to-pointer, or function-to-pointer &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt;.</source>
          <target state="translated">glvalue는 lvalue-to-rvalue, array-to-pointer 또는 function-to-pointer &lt;a href=&quot;implicit_cast&quot;&gt;암시&lt;/a&gt; 적 변환을 통해 암시 적으로 prvalue로 변환 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cea983824512d3d15a34a2db0846ed086638210c" translate="yes" xml:space="preserve">
          <source>A hash value such that if for two paths, &lt;code&gt;p1 == p2&lt;/code&gt; then &lt;code&gt;hash_value(p1) == hash_value(p2)&lt;/code&gt;.</source>
          <target state="translated">두 경로에 대해 &lt;code&gt;p1 == p2&lt;/code&gt; 이면 &lt;code&gt;hash_value(p1) == hash_value(p2)&lt;/code&gt; 와 같은 해시 값 입니다.</target>
        </trans-unit>
        <trans-unit id="15292f4673498136ecff031fb3f30153a4dc7b04" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::bool_constant&lt;/code&gt; is defined for the common case where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">도우미 별칭 템플릿 &lt;code&gt;std::bool_constant&lt;/code&gt; 는 &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;bool&lt;/code&gt; 인 일반적인 경우에 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="0b3c2467c41e2b75c0a9c40219370cc5f3f2dacc" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::index_sequence&lt;/code&gt; is defined for the common case where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">도우미 별칭 템플릿 &lt;code&gt;std::index_sequence&lt;/code&gt; 는 &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 일반적인 경우에 대해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="4184acb56c1e7d627626f8d37bc2e5a0e6fcdbc2" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::index_sequence_for&lt;/code&gt; is defined to convert any type parameter pack into an index sequence of the same length.</source>
          <target state="translated">헬퍼 별명 템플리트 &lt;code&gt;std::index_sequence_for&lt;/code&gt; 는 모든 유형 매개 변수 팩을 동일한 길이의 색인 순서로 변환하도록 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="9a32a1c6ab3b77893556fe5ee65c2d9a42a41be5" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::make_integer_sequence&lt;/code&gt; is defined to simplify creation of &lt;code&gt;std::integer_sequence&lt;/code&gt; and &lt;code&gt;std::index_sequence&lt;/code&gt; types with 0, 1, 2, ..., &lt;code&gt;N-1&lt;/code&gt; as &lt;code&gt;Ints&lt;/code&gt;:</source>
          <target state="translated">도우미 별칭 템플릿 &lt;code&gt;std::make_integer_sequence&lt;/code&gt; 는 0, 1, 2, ..., &lt;code&gt;N-1&lt;/code&gt; 을 &lt;code&gt;Ints&lt;/code&gt; 로 사용 하여 &lt;code&gt;std::integer_sequence&lt;/code&gt; 및 &lt;code&gt;std::index_sequence&lt;/code&gt; 유형 을 간단하게 만들기 위해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="8b96bb19789c3bb31d9a6d33b876372301de6683" translate="yes" xml:space="preserve">
          <source>A implicitly-declared copy assignment operator for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="translated">클래스 &lt;code&gt;T&lt;/code&gt; 에 대해 암시 적으로 선언 된 복사 할당 연산자 는 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="15422e25d782ee0aaf32e9d2f486b686dbdfbf2f" translate="yes" xml:space="preserve">
          <source>A is performed on an atomic object M, the longest continuous subsequence of the modification order of M that consists of.</source>
          <target state="translated">A는 M의 수정 순서의 가장 긴 연속 서브 시퀀스 인 원자 오브젝트 M에 대해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="e61a00b266a84e226d1254d5beab581ed782765d" translate="yes" xml:space="preserve">
          <source>A lambda expression can read the value of a variable without capturing it if the variable.</source>
          <target state="translated">람다 식은 변수 인 경우 변수를 캡처하지 않고 변수의 값을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f802f1c1fef8ac6ac571575c62abeda5c0664b3" translate="yes" xml:space="preserve">
          <source>A lambda expression can use a variable without capturing it if the variable.</source>
          <target state="translated">람다 식은 변수 인 경우 변수를 캡처하지 않고 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="465859edc342e145e6c5df96a92ee34ac4c2a74a" translate="yes" xml:space="preserve">
          <source>A literal type is any of the following:</source>
          <target state="translated">리터럴 유형은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="970388d0171fba77b4f60c1b13ea5429bb78c066" translate="yes" xml:space="preserve">
          <source>A load operation with this memory order performs a</source>
          <target state="translated">이 메모리 순서로로드 조작은</target>
        </trans-unit>
        <trans-unit id="04adb94f807f9fc41a4b16df95c597991972fc35" translate="yes" xml:space="preserve">
          <source>A load operation with this memory order performs an</source>
          <target state="translated">이 메모리 순서로로드 조작은</target>
        </trans-unit>
        <trans-unit id="3b21ef2a1cadb419bb1ba1c86579963e83c28347" translate="yes" xml:space="preserve">
          <source>A load operation with this memory order performs the</source>
          <target state="translated">이 메모리 순서로로드 조작은</target>
        </trans-unit>
        <trans-unit id="3c57a71a01f996550e0f74266e8009688dfaf530" translate="yes" xml:space="preserve">
          <source>A local class cannot have static data members</source>
          <target state="translated">로컬 클래스는 정적 데이터 멤버를 가질 수 없습니다</target>
        </trans-unit>
        <trans-unit id="60a4d1e136eb143a0bef8fa64a6da1d5c7287563" translate="yes" xml:space="preserve">
          <source>A local class inside a function (including member function) can access the same names that the enclosing function can access.</source>
          <target state="translated">함수 (멤버 함수 포함) 내의 로컬 클래스는 둘러싸는 함수가 액세스 할 수있는 것과 동일한 이름에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="662fb60735dae12caa47ef3645a724e39bd9cdeb" translate="yes" xml:space="preserve">
          <source>A lookup that finds an injected-class-name can result in an ambiguity in certain cases (for example, if it is found in more than one base class). If all of the injected-class-names that are found refer to specializations of the same class template, and if the name is used as a template-name, the reference refers to the class template itself and not a specialization thereof, and is not ambiguous.</source>
          <target state="translated">주입 된 클래스 이름을 찾는 경우 특정 경우 (예 : 둘 이상의 기본 클래스에서 발견 된 경우) 모호성이 생길 수 있습니다. 발견 된 모든 주입 된 클래스 이름이 동일한 클래스 템플리트의 특수화를 참조하고, 이름이 템플리트 이름으로 사용되는 경우, 참조는 클래스 템플리트 자체를 나타내며 그 특수화는 아닙니다. 모호한.</target>
        </trans-unit>
        <trans-unit id="83fefb521f44bd11a11c759eec7e0999f170af11" translate="yes" xml:space="preserve">
          <source>A member function template cannot be virtual, and a member function template in a derived class cannot override a virtual member function from the base class.</source>
          <target state="translated">멤버 함수 템플릿은 가상 일 수 없으며 파생 클래스의 멤버 함수 템플릿은 기본 클래스의 가상 멤버 함수를 재정의 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7f230d1a09bc7b6bdfcbc967fa62f2a1068e4aa4" translate="yes" xml:space="preserve">
          <source>A member name found in a sub-object &lt;code&gt;B&lt;/code&gt; hides the same member name in any sub-object &lt;code&gt;A&lt;/code&gt; if &lt;code&gt;A&lt;/code&gt; is a base class sub-object of &lt;code&gt;B&lt;/code&gt;. (Note that this does not hide the name in any additional, non-virtual, copies of &lt;code&gt;A&lt;/code&gt; on the inheritance lattice that aren't bases of &lt;code&gt;B&lt;/code&gt;: this rule only has an effect on virtual inheritance.) Names introduced by using-declarations are treated as names in the class containing the declaration. After examining each base, the resulting set must either include declarations of a static member from subobjects of the same type, or declarations of non-static members from the same subobject</source>
          <target state="translated">멤버 이름이 서브 오브젝트 검색된 &lt;code&gt;B&lt;/code&gt; 의 수피 하위 개체에서 동일한 부재 이름 &lt;code&gt;A&lt;/code&gt; 경우 &lt;code&gt;A&lt;/code&gt; 의 기본 클래스 서브 목적 &lt;code&gt;B&lt;/code&gt; 는 . (참고 이것의 추가적인 비 가상 복사본으로 이름을 숨기지 않도록 의 염기하지 상속 격자에 &lt;code&gt;B&lt;/code&gt; :.이 규칙은 단지 가상 상속에 영향을 미친다) 이름은-선언하여 도입 선언을 포함하는 클래스에서 이름으로 취급됩니다. 각 기준을 검사 한 후 결과 집합에는 동일한 유형의 하위 오브젝트에서 정적 멤버 선언 또는 동일한 하위 오브젝트에서 비 정적 멤버 선언이 포함되어야합니다. &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
