<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="cmake">
    <body>
      <group id="cmake">
        <trans-unit id="b0893228adce4289d5b396e84ec30e920be704d8" translate="yes" xml:space="preserve">
          <source>Flags to pass to the MPI compiler wrapper during interrogation. Some compiler wrappers support linking debug or tracing libraries if a specific flag is passed and this variable may be used to obtain them.</source>
          <target state="translated">질문하는 동안 MPI 컴파일러 래퍼에 전달할 플래그입니다. 일부 컴파일러 랩퍼는 특정 플래그가 전달되고이 변수를 사용하여 디버그 또는 추적 라이브러리 링크를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="2099d96a48c8ab9805baa4693d2a42b2571232e6" translate="yes" xml:space="preserve">
          <source>Flex scanners often use tokens defined by Bison: the code generated by Flex depends of the header generated by Bison. This module also defines a macro:</source>
          <target state="translated">Flex 스캐너는 종종 Bison에 의해 정의 된 토큰을 사용합니다. Flex에 의해 생성 된 코드는 Bison에 의해 생성 된 헤더에 따라 다릅니다. 이 모듈은 또한 매크로를 정의합니다 :</target>
        </trans-unit>
        <trans-unit id="ecd66ad40e54641d3a3c168fee9ef1e44989daf7" translate="yes" xml:space="preserve">
          <source>Following example of Application Bundle:</source>
          <target state="translated">애플리케이션 번들의 다음 예 :</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="b5fc1e094e8ee45f822d939a0f2a06b6810ecc2f" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt;, if, for some sources, the &lt;code&gt;USE_SWIG_DEPENDENCIES&lt;/code&gt; property is &lt;code&gt;FALSE&lt;/code&gt;, &lt;code&gt;swig_add_library&lt;/code&gt; does not track file dependencies, so depending on the &lt;code&gt;&amp;lt;name&amp;gt;_swig_compilation&lt;/code&gt; custom target is required for targets which require the &lt;code&gt;swig&lt;/code&gt;-generated files to exist. Other generators may depend on the source files that would be generated by SWIG.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae9c6c7c2ca3a8a51428ebc613e265ccf02b84f" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt;, this option cannot be specified at the same time as &lt;code&gt;IMPLICIT_DEPENDS&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01694a71f98a06dad13df64ddd3d4bde3106ddb2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt; with VS 2005 and above this specifies the target architecture.</source>
          <target state="translated">대한 &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;비주얼 스튜디오 발전기&lt;/a&gt; 목표 아키텍처 VS 2005이 지정 위.</target>
        </trans-unit>
        <trans-unit id="676b591184115b110288825c6883cb0d535205b5" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../prop_gbl/generator_is_multi_config#prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot; id=&quot;index-0-prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot;&gt;&lt;code&gt;multi configuration generators&lt;/code&gt;&lt;/a&gt;, the include directory is &lt;code&gt;&amp;lt;AUTOGEN_BUILD_DIR&amp;gt;/include_&amp;lt;CONFIG&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">들어 &lt;a href=&quot;../prop_gbl/generator_is_multi_config#prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot; id=&quot;index-0-prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot;&gt; &lt;code&gt;multi configuration generators&lt;/code&gt; &lt;/a&gt; 의 디렉토리가 포함 &lt;code&gt;&amp;lt;AUTOGEN_BUILD_DIR&amp;gt;/include_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b8dc549b0e9aa703c72eb6d64eb6e9bdd043daf" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../prop_gbl/generator_is_multi_config#prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot; id=&quot;index-1-prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot;&gt;&lt;code&gt;multi configuration generators&lt;/code&gt;&lt;/a&gt;, the include directory is &lt;code&gt;&amp;lt;AUTOGEN_BUILD_DIR&amp;gt;/include_&amp;lt;CONFIG&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">들어 &lt;a href=&quot;../prop_gbl/generator_is_multi_config#prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot; id=&quot;index-1-prop_gbl:GENERATOR_IS_MULTI_CONFIG&quot;&gt; &lt;code&gt;multi configuration generators&lt;/code&gt; &lt;/a&gt; 의 디렉토리가 포함 &lt;code&gt;&amp;lt;AUTOGEN_BUILD_DIR&amp;gt;/include_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="828bb84fea80688ea2c1ced1f875cac3206c07fb" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-3-prop_tgt:AUTOMOC&quot;&gt;&lt;code&gt;AUTOMOC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-3-prop_tgt:AUTORCC&quot;&gt;&lt;code&gt;AUTORCC&lt;/code&gt;&lt;/a&gt; specific overrides see &lt;a href=&quot;automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; respectively.</source>
          <target state="translated">들어 &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-3-prop_tgt:AUTOMOC&quot;&gt; &lt;code&gt;AUTOMOC&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-3-prop_tgt:AUTORCC&quot;&gt; &lt;code&gt;AUTORCC&lt;/code&gt; &lt;/a&gt; 특정 재정의를 참조 &lt;a href=&quot;automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; 각각을.</target>
        </trans-unit>
        <trans-unit id="11b534974a2cf72537398fc024e47c45b56b83cf" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; and the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator, CMake expects one of these environments:</source>
          <target state="translated">들어 &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;메이크 발생기&lt;/a&gt; 와 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발전기, CMake는 이러한 환경 중 하나를 예상 :</target>
        </trans-unit>
        <trans-unit id="4cb2e25b943a5fd6f0364b9ae2c01d755cff8038" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; and the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator, CMake expects one of these environments:</source>
          <target state="translated">들어 &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;메이크 발생기&lt;/a&gt; 와 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발전기, CMake는 이러한 환경 중 하나를 예상 :</target>
        </trans-unit>
        <trans-unit id="3e07b7cc751fc8153c73eac302287f963e97e493" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; and the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator, CMake expects one of these environments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b1555cc187c8aecc3b3912bd9c768d658f4390" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt;, CMake expects &lt;a href=&quot;#cross-compiling-for-android-with-nvidia-nsight-tegra-visual-studio-edition&quot;&gt;NVIDIA Nsight Tegra Visual Studio Edition&lt;/a&gt; or the &lt;a href=&quot;#cross-compiling-for-android-with-the-ndk&quot;&gt;Visual Studio tools for Android&lt;/a&gt; to be installed. See those sections for further configuration details.</source>
          <target state="translated">들어 &lt;a href=&quot;cmake-generators.7#visual-studio-generators&quot;&gt;비주얼 스튜디오 발생기&lt;/a&gt; , CMake는 기대 &lt;a href=&quot;#cross-compiling-for-android-with-nvidia-nsight-tegra-visual-studio-edition&quot;&gt;NVIDIA Nsight 테그 라 비주얼 스튜디오 에디션&lt;/a&gt; 또는 &lt;a href=&quot;#cross-compiling-for-android-with-the-ndk&quot;&gt;안드로이드에 대한 Visual Studio 도구를&lt;/a&gt; 설치해야합니다. 자세한 구성 세부 사항은 해당 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="69cfda955d5b523bf8970a2c40f156c1154bc513" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt;, CMake expects &lt;a href=&quot;#cross-compiling-for-android-with-nvidia-nsight-tegra-visual-studio-edition&quot;&gt;NVIDIA Nsight Tegra Visual Studio Edition&lt;/a&gt; to be installed. See that section for further configuration details.</source>
          <target state="translated">들어 &lt;a href=&quot;cmake-generators.7#visual-studio-generators&quot;&gt;비주얼 스튜디오 발생기&lt;/a&gt; , CMake는 기대 &lt;a href=&quot;#cross-compiling-for-android-with-nvidia-nsight-tegra-visual-studio-edition&quot;&gt;NVIDIA Nsight 테그 라 비주얼 스튜디오 Edition을&lt;/a&gt; 설치해야합니다. 추가 구성 세부 사항은 해당 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="56414514d422e2e7f3a6a9083bdd81e5329a286c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt;&lt;code&gt;Green Hills MULTI&lt;/code&gt;&lt;/a&gt; this specifies the target architecture.</source>
          <target state="translated">들어 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt; &lt;code&gt;Green Hills MULTI&lt;/code&gt; &lt;/a&gt; 이 대상 아키텍처를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="0a90adf6640e2f2416230d937b8571223bf70f06" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt;&lt;code&gt;Green Hills MULTI&lt;/code&gt;&lt;/a&gt; this specifies the target architecture.</source>
          <target state="translated">들어 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt; &lt;code&gt;Green Hills MULTI&lt;/code&gt; &lt;/a&gt; 이 대상 아키텍처를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f268f225fd97dcd24e4afcb5021d57ead75899a1" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt;&lt;code&gt;Green Hills MULTI&lt;/code&gt;&lt;/a&gt; this specifies the target architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee29c8e65af0c9a65105879191d6e569eb85f706" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; equal to &lt;code&gt;SYSCONFDIR&lt;/code&gt;, &lt;code&gt;LOCALSTATEDIR&lt;/code&gt; or &lt;code&gt;RUNSTATEDIR&lt;/code&gt;, the &lt;code&gt;CMAKE_INSTALL_FULL_&amp;lt;dir&amp;gt;&lt;/code&gt; is computed by &lt;em&gt;appending&lt;/em&gt; the prefix to the value of &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt; if it is not user-specified as an absolute path. For example, the &lt;code&gt;SYSCONFDIR&lt;/code&gt; value &lt;code&gt;etc&lt;/code&gt; becomes &lt;code&gt;/etc/opt/...&lt;/code&gt;. This is defined by the &lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html&quot;&gt;Filesystem Hierarchy Standard&lt;/a&gt;.</source>
          <target state="translated">들면 &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; 동일 &lt;code&gt;SYSCONFDIR&lt;/code&gt; , &lt;code&gt;LOCALSTATEDIR&lt;/code&gt; 또는 &lt;code&gt;RUNSTATEDIR&lt;/code&gt; 상기 &lt;code&gt;CMAKE_INSTALL_FULL_&amp;lt;dir&amp;gt;&lt;/code&gt; IS 계산하여 &lt;em&gt;추가&lt;/em&gt; 의 값 프리픽스 &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt; 은 사용자가 지정한 절대 경로로하지 않은 경우. 예를 들어 &lt;code&gt;SYSCONFDIR&lt;/code&gt; 값 &lt;code&gt;etc&lt;/code&gt; 는 &lt;code&gt;/etc/opt/...&lt;/code&gt; 가 됩니다. 이것은 &lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html&quot;&gt;파일 시스템 계층 표준에&lt;/a&gt; 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="c8dbaf4fd34ebce0b6c7e46f331b8127deb631c9" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; equal to &lt;code&gt;SYSCONFDIR&lt;/code&gt;, &lt;code&gt;LOCALSTATEDIR&lt;/code&gt; or &lt;code&gt;RUNSTATEDIR&lt;/code&gt;, the &lt;code&gt;CMAKE_INSTALL_FULL_&amp;lt;dir&amp;gt;&lt;/code&gt; is computed by prepending just &lt;code&gt;/&lt;/code&gt; to the value of &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt; if it is not user-specified as an absolute path. For example, the &lt;code&gt;SYSCONFDIR&lt;/code&gt; value &lt;code&gt;etc&lt;/code&gt; becomes &lt;code&gt;/etc&lt;/code&gt;. This is required by the &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Directory-Variables.html&quot;&gt;GNU Coding Standards&lt;/a&gt;.</source>
          <target state="translated">들면 &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; 동일 &lt;code&gt;SYSCONFDIR&lt;/code&gt; , &lt;code&gt;LOCALSTATEDIR&lt;/code&gt; 또는 &lt;code&gt;RUNSTATEDIR&lt;/code&gt; 상기 &lt;code&gt;CMAKE_INSTALL_FULL_&amp;lt;dir&amp;gt;&lt;/code&gt; IS 계산 바로 앞에 추가하여 &lt;code&gt;/&lt;/code&gt; 값으로 &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt; 은 사용자가 지정한 절대 경로로하지 않은 경우. 예를 들어 &lt;code&gt;SYSCONFDIR&lt;/code&gt; 값 &lt;code&gt;etc&lt;/code&gt; 는 &lt;code&gt;/etc&lt;/code&gt; 가 됩니다. 이것은 &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Directory-Variables.html&quot;&gt;GNU 코딩 표준에&lt;/a&gt; 의해 요구됩니다 .</target>
        </trans-unit>
        <trans-unit id="26e44ee0616f28cc8a319269270fd7315b8a9082" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; other than the &lt;code&gt;SYSCONFDIR&lt;/code&gt;, &lt;code&gt;LOCALSTATEDIR&lt;/code&gt; and &lt;code&gt;RUNSTATEDIR&lt;/code&gt;, the value of &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt; is prefixed with &lt;code&gt;usr/&lt;/code&gt; if it is not user-specified as an absolute path. For example, the &lt;code&gt;INCLUDEDIR&lt;/code&gt; value &lt;code&gt;include&lt;/code&gt; becomes &lt;code&gt;usr/include&lt;/code&gt;. This is required by the &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Directory-Variables.html&quot;&gt;GNU Coding Standards&lt;/a&gt;, which state:</source>
          <target state="translated">들면 &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; 댄 다른 &lt;code&gt;SYSCONFDIR&lt;/code&gt; , &lt;code&gt;LOCALSTATEDIR&lt;/code&gt; 및 &lt;code&gt;RUNSTATEDIR&lt;/code&gt; 의 값 &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt; IS하게 앞에 함께 &lt;code&gt;usr/&lt;/code&gt; 은 사용자가 지정한 절대 경로로하지 않은 경우. 예를 들어 &lt;code&gt;INCLUDEDIR&lt;/code&gt; 값 &lt;code&gt;include&lt;/code&gt; 는 &lt;code&gt;usr/include&lt;/code&gt; 가됩니다 . 이것은 &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Directory-Variables.html&quot;&gt;GNU 코딩 표준에&lt;/a&gt; 의해 요구됩니다 .</target>
        </trans-unit>
        <trans-unit id="87427333a55bc1ce7527474a0debed6392654736" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Clang&lt;/code&gt;: the oldest architecture that works.</source>
          <target state="translated">대한 &lt;code&gt;Clang&lt;/code&gt; 작동 가장 오래된 아키텍처 :.</target>
        </trans-unit>
        <trans-unit id="021b3933a1419a79f1acb70ec434086dab687b78" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;GNU GCC&lt;/code&gt;:</source>
          <target state="translated">내용은 &lt;code&gt;GNU GCC&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0c13bea379b484b4d9e5329c84574f82bcdaa498" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;HAS_PARENT_PATH&lt;/code&gt;, the root directory is also considered to have a parent, which will be itself. The result is true except if the path consists of just a &lt;a href=&quot;#filename-def&quot;&gt;filename&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b611b60b9793d6a0e5e507651b5a0930c4734583" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;HAS_ROOT_PATH&lt;/code&gt;, a true result will only be returned if at least one of &lt;code&gt;root-name&lt;/code&gt; or &lt;code&gt;root-directory&lt;/code&gt; is non-empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dc24ae0ef16a82124f723687c21bc606583607" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;MODULE&lt;/code&gt; library type, if option &lt;code&gt;WITH_SOABI&lt;/code&gt; is specified, the module suffix will include the &lt;code&gt;Python3_SOABI&lt;/code&gt; value, if any.</source>
          <target state="translated">들어 &lt;code&gt;MODULE&lt;/code&gt; 옵션의 경우 라이브러리 유형, &lt;code&gt;WITH_SOABI&lt;/code&gt; 가 지정, 모듈 접미사가 포함됩니다 &lt;code&gt;Python3_SOABI&lt;/code&gt; 의 값 (있는 경우)를.</target>
        </trans-unit>
        <trans-unit id="90d54ac0e061831e8526501804cec771b5d4badc" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;MODULE&lt;/code&gt; library type, if option &lt;code&gt;WITH_SOABI&lt;/code&gt; is specified, the module suffix will include the &lt;code&gt;Python_SOABI&lt;/code&gt; value, if any.</source>
          <target state="translated">들어 &lt;code&gt;MODULE&lt;/code&gt; 옵션의 경우 라이브러리 유형, &lt;code&gt;WITH_SOABI&lt;/code&gt; 가 지정, 모듈 접미사가 포함됩니다 &lt;code&gt;Python_SOABI&lt;/code&gt; 의 값 (있는 경우)를.</target>
        </trans-unit>
        <trans-unit id="1946806345f6dc0d37df29f9eccdb5b15041776a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Makefile&lt;/code&gt; based systems, &lt;code&gt;/fast&lt;/code&gt; variants of binary build targets are provided. The &lt;code&gt;/fast&lt;/code&gt; variants are used to build the specified target without regard for its dependencies. The dependencies are not checked and are not rebuilt if out of date. The &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-4-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator is sufficiently fast at dependency checking that such targets are not provided for that generator.</source>
          <target state="translated">들어 &lt;code&gt;Makefile&lt;/code&gt; 기반 시스템 &lt;code&gt;/fast&lt;/code&gt; 바이너리 빌드 타겟이 제공되는 변종. &lt;code&gt;/fast&lt;/code&gt; 변종 종속 관계없이 지정된 대상을 구축하는 데 사용됩니다. 종속성이 확인되지 않으며 오래된 경우 다시 빌드되지 않습니다. &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-4-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발생기는 목표 발전기가 제공되지 않는다는 의존성 검사에 충분히 빠르다.</target>
        </trans-unit>
        <trans-unit id="0da4b046bfb93ee3c9542416af19071435f2648c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Makefile&lt;/code&gt; based systems, &lt;code&gt;/fast&lt;/code&gt; variants of binary build targets are provided. The &lt;code&gt;/fast&lt;/code&gt; variants are used to build the specified target without regard for its dependencies. The dependencies are not checked and are not rebuilt if out of date. The &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-4-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator is sufficiently fast at dependency checking that such targets are not provided for that generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e186e64f8447d96db84fae496342b4c6c1112336" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;NVIDIA&lt;/code&gt;: the default architecture chosen by the compiler. See policy &lt;a href=&quot;../policy/cmp0104#policy:CMP0104&quot; id=&quot;index-0-policy:CMP0104&quot;&gt;&lt;code&gt;CMP0104&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">의 경우 &lt;code&gt;NVIDIA&lt;/code&gt; : 기본 아키텍처는 컴파일러에 의해 선택된. 정책 &lt;a href=&quot;../policy/cmp0104#policy:CMP0104&quot; id=&quot;index-0-policy:CMP0104&quot;&gt; &lt;code&gt;CMP0104&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1860fee90b9a6f2fd3ec2633b0a54b77f20304d" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;PARENT_PATH&lt;/code&gt;, if the &lt;a href=&quot;#has-relative-part&quot;&gt;HAS_RELATIVE_PART&lt;/a&gt; subcommand returns false, the result is a copy of &lt;code&gt;&amp;lt;path-var&amp;gt;&lt;/code&gt;. Note that this implies that a root directory is considered to have a parent, with that parent being itself. Where &lt;a href=&quot;#has-relative-part&quot;&gt;HAS_RELATIVE_PART&lt;/a&gt; returns true, the result will essentially be &lt;code&gt;&amp;lt;path-var&amp;gt;&lt;/code&gt; with one less element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b131cc8c0d9adeb2bf7bfa46e11597c5d0832e4" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;https://&lt;/code&gt; URLs CMake must be built with OpenSSL support. &lt;code&gt;TLS/SSL&lt;/code&gt; certificates are not checked by default. Set &lt;code&gt;TLS_VERIFY&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt; to check certificates and/or use &lt;code&gt;EXPECTED_HASH&lt;/code&gt; to verify downloaded content. If neither &lt;code&gt;TLS&lt;/code&gt; option is given CMake will check variables &lt;code&gt;CMAKE_TLS_VERIFY&lt;/code&gt; and &lt;code&gt;CMAKE_TLS_CAINFO&lt;/code&gt;, respectively.</source>
          <target state="translated">들어 &lt;code&gt;https://&lt;/code&gt; 로 URL을 CMake는 OpenSSL을 지원 구축해야합니다. &lt;code&gt;TLS/SSL&lt;/code&gt; 인증서는 기본적으로 확인되지 않습니다. 인증서를 확인하거나 &lt;code&gt;EXPECTED_HASH&lt;/code&gt; 를 사용 하여 다운로드 한 컨텐츠를 확인 하려면 &lt;code&gt;TLS_VERIFY&lt;/code&gt; 를 &lt;code&gt;ON&lt;/code&gt; 으로 설정하십시오 . &lt;code&gt;TLS&lt;/code&gt; 옵션이 제공 되지 않으면 CMake는 변수 &lt;code&gt;CMAKE_TLS_VERIFY&lt;/code&gt; 및 &lt;code&gt;CMAKE_TLS_CAINFO&lt;/code&gt; 를 각각 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="8397cb396b0af41a4ac61ecb7bf046f92356647a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;https://&lt;/code&gt; URLs CMake must be built with OpenSSL support. &lt;code&gt;TLS/SSL&lt;/code&gt; certificates are not checked by default. Set &lt;code&gt;TLS_VERIFY&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt; to check certificates. If neither &lt;code&gt;TLS&lt;/code&gt; option is given CMake will check variables &lt;code&gt;CMAKE_TLS_VERIFY&lt;/code&gt; and &lt;code&gt;CMAKE_TLS_CAINFO&lt;/code&gt;, respectively.</source>
          <target state="translated">들어 &lt;code&gt;https://&lt;/code&gt; 로 URL을 CMake는 OpenSSL을 지원 구축해야합니다. &lt;code&gt;TLS/SSL&lt;/code&gt; 인증서는 기본적으로 확인되지 않습니다. 인증서를 확인하려면 &lt;code&gt;TLS_VERIFY&lt;/code&gt; 를 &lt;code&gt;ON&lt;/code&gt; 으로 설정 하십시오. &lt;code&gt;TLS&lt;/code&gt; 옵션이 제공 되지 않으면 CMake는 &lt;code&gt;CMAKE_TLS_VERIFY&lt;/code&gt; 및 &lt;code&gt;CMAKE_TLS_CAINFO&lt;/code&gt; 변수를 각각 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="53d384a90a0cfb318368e2f44c1181f5f961ecf7" translate="yes" xml:space="preserve">
          <source>For Apple platforms, a project may be built for more than one architecture. This is controlled by the &lt;a href=&quot;../variable/cmake_osx_architectures#variable:CMAKE_OSX_ARCHITECTURES&quot; id=&quot;index-0-variable:CMAKE_OSX_ARCHITECTURES&quot;&gt;&lt;code&gt;CMAKE_OSX_ARCHITECTURES&lt;/code&gt;&lt;/a&gt; variable. For all but the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator, CMake invokes compilers once per source file and passes multiple &lt;code&gt;-arch&lt;/code&gt; flags, leading to a single object file which will be a universal binary. Such object files work well when listed in the &lt;code&gt;IMPORTED_OBJECTS&lt;/code&gt; of a separate CMake build, even for the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-1-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator. But producing such object files with the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-2-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator is more difficult, since it invokes the compiler once per architecture for each source file. Unlike the other generators, it does not generate universal object file binaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d577f1c775f4e755ad369a27abc74e0d6dd42f78" translate="yes" xml:space="preserve">
          <source>For C++ 11 and C++ 14, compilers were sometimes slow to implement certain language features. CMake provided some individual compile features to help projects determine whether specific features were available. These individual features are now less relevant and projects should generally prefer to use the high level meta features instead. Individual compile features are not provided for C++ 17 or later.</source>
          <target state="translated">C ++ 11 및 C ++ 14의 경우 컴파일러가 특정 언어 기능을 구현하는 데 때때로 느 렸습니다. CMake는 프로젝트가 특정 기능을 사용할 수 있는지 여부를 결정하는 데 도움이되는 몇 가지 개별 컴파일 기능을 제공했습니다. 이러한 개별 기능은 이제 관련성이 떨어지며 프로젝트는 일반적으로 대신 높은 수준의 메타 기능을 사용하는 것을 선호해야합니다. C ++ 17 이상에는 개별 컴파일 기능이 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3c5e3ae194a6a81b2421ed3312865f47da614e34" translate="yes" xml:space="preserve">
          <source>For CMake 2.4 compatibility only. Use &lt;a href=&quot;compile_definitions#prop_dir:COMPILE_DEFINITIONS&quot; id=&quot;index-0-prop_dir:COMPILE_DEFINITIONS&quot;&gt;&lt;code&gt;COMPILE_DEFINITIONS&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">CMake 2.4 호환성에만 해당됩니다. 대신 &lt;a href=&quot;compile_definitions#prop_dir:COMPILE_DEFINITIONS&quot; id=&quot;index-0-prop_dir:COMPILE_DEFINITIONS&quot;&gt; &lt;code&gt;COMPILE_DEFINITIONS&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4374ce0fc12038cdab122aa7d87c07706ef2a5eb" translate="yes" xml:space="preserve">
          <source>For EGL targets the client must rely on GLVND support on the user&amp;rsquo;s system. Linking should use the &lt;code&gt;OpenGL::OpenGL OpenGL::EGL&lt;/code&gt; targets. Using GLES* libraries is theoretically possible in place of &lt;code&gt;OpenGL::OpenGL&lt;/code&gt;, but this module does not currently support that; contributions welcome.</source>
          <target state="translated">EGL 대상의 경우 클라이언트는 사용자 시스템의 GLVND 지원에 의존해야합니다. 링크는 &lt;code&gt;OpenGL::OpenGL OpenGL::EGL&lt;/code&gt; 대상을 사용해야합니다 . 이론적으로 &lt;code&gt;OpenGL::OpenGL&lt;/code&gt; 대신 GLES * 라이브러리를 사용할 수 있지만이 모듈은 현재이를 지원하지 않습니다. 기부를 환영합니다.</target>
        </trans-unit>
        <trans-unit id="dcb8ff4bcb265694cef74b16c520d745291c490a" translate="yes" xml:space="preserve">
          <source>For EGL targets the client must rely on GLVND support on the user's system. Linking should use the &lt;code&gt;OpenGL::OpenGL OpenGL::EGL&lt;/code&gt; targets. Using GLES* libraries is theoretically possible in place of &lt;code&gt;OpenGL::OpenGL&lt;/code&gt;, but this module does not currently support that; contributions welcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf32282897053fcd205b354c5b97eb530fe4d019" translate="yes" xml:space="preserve">
          <source>For Fortran:</source>
          <target state="translated">포트란의 경우 :</target>
        </trans-unit>
        <trans-unit id="951856ef0d61834c966b38d7df53ddc925cac602" translate="yes" xml:space="preserve">
          <source>For Linux, such CMake script produce following files:</source>
          <target state="translated">Linux의 경우 이러한 CMake 스크립트는 다음 파일을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e37df45d7e5cb7a8e07f5519838a95baea23204d" translate="yes" xml:space="preserve">
          <source>For Make-based generators, &lt;code&gt;swig_add_library&lt;/code&gt; does not track file dependencies, so depending on the &lt;code&gt;&amp;lt;name&amp;gt;_swig_compilation&lt;/code&gt; custom target is required for targets which require the &lt;code&gt;swig&lt;/code&gt;-generated files to exist. Other generators may depend on the source files that would be generated by SWIG.</source>
          <target state="translated">메이크업 기반의 발전기를 들어, &lt;code&gt;swig_add_library&lt;/code&gt; 는 그래서에 따라 파일 종속성을 추적하지 않습니다 &lt;code&gt;&amp;lt;name&amp;gt;_swig_compilation&lt;/code&gt; 지정 대상이 요구하는 목표에 필요한 &lt;code&gt;swig&lt;/code&gt; 존재하는 파일을 -generated. 다른 생성기는 SWIG에 의해 생성되는 소스 파일에 의존 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3fedebeb3b9b1b2bdc6d90d1c6e75191559ed4e" translate="yes" xml:space="preserve">
          <source>For Visual Studio based generators, this is set to the form recognized by the Visual Studio IDE: &lt;code&gt;$file($line) : $text&lt;/code&gt;. For all other generators, Doxygen&amp;rsquo;s default value is not overridden.</source>
          <target state="translated">Visual Studio 기반 생성기의 경우 Visual Studio IDE에서 인식하는 형식으로 설정됩니다 : &lt;code&gt;$file($line) : $text&lt;/code&gt; . 다른 모든 생성기의 경우 Doxygen의 기본값이 무시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d4253d5c86e232e54ae0febd0cb650ccaac1af78" translate="yes" xml:space="preserve">
          <source>For Visual Studio based generators, this is set to the form recognized by the Visual Studio IDE: &lt;code&gt;$file($line) : $text&lt;/code&gt;. For all other generators, Doxygen's default value is not overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cadc61b5ff5e4a27b65b095c1887450d90f94b" translate="yes" xml:space="preserve">
          <source>For Windows 10. Specifies the minimum version of the OS that is being targeted. For example &lt;code&gt;10.0.10240.0&lt;/code&gt;. If the value is not specified, the value of &lt;a href=&quot;../variable/cmake_vs_windows_target_platform_version#variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION&quot; id=&quot;index-0-variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION&quot;&gt;&lt;code&gt;CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION&lt;/code&gt;&lt;/a&gt; will be used on WindowsStore projects otherwise the target platform minimum version will not be specified for the project.</source>
          <target state="translated">Windows 10의 경우. 대상이되는 최소 OS 버전을 지정합니다. 예를 들어 &lt;code&gt;10.0.10240.0&lt;/code&gt; 입니다. 값을 지정하지 않으면 &lt;a href=&quot;../variable/cmake_vs_windows_target_platform_version#variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION&quot; id=&quot;index-0-variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION&quot;&gt; &lt;code&gt;CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION&lt;/code&gt; &lt;/a&gt; 의 값이 WindowsStore 프로젝트에서 사용되며 그렇지 않으면 프로젝트에 대해 대상 플랫폼 최소 버전이 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="009cabe7ef9fb8a630be78f32c8c689fb190b18f" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;FindXxx.cmake&lt;/code&gt; module that takes the approach of setting variables (either instead of or in addition to creating imported targets), the following variable names should be used to keep things consistent between Find modules. Note that all variables start with &lt;code&gt;Xxx_&lt;/code&gt;, which (unless otherwise noted) must match exactly the name of the &lt;code&gt;FindXxx.cmake&lt;/code&gt; file, including upper/lowercase. This prefix on the variable names ensures that they do not conflict with variables of other Find modules. The same pattern should also be followed for any macros, functions and imported targets defined by the Find module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72aaa7d847c1a85f3b479368053564083c9174c7" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;FindXxx.cmake&lt;/code&gt; module that takes the approach of setting variables (either instead of or in addition to creating imported targets), the following variable names should be used to keep things consistent between find modules. Note that all variables start with &lt;code&gt;Xxx_&lt;/code&gt; to make sure they do not interfere with other find modules; the same consideration applies to macros, functions and imported targets.</source>
          <target state="translated">변수를 가져 오는 대상을 만들거나 추가하는 대신 변수를 설정 하는 &lt;code&gt;FindXxx.cmake&lt;/code&gt; 모듈의 경우 다음 변수 이름을 사용하여 찾기 모듈간에 일관성을 유지해야합니다. 모든 변수는 &lt;code&gt;Xxx_&lt;/code&gt; 로 시작 하여 다른 찾기 모듈을 방해하지 않도록합니다. 매크로, 함수 및 가져온 대상에도 동일한 고려 사항이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="185f67b10a4d0819b96df4a34a6592191444cf05" translate="yes" xml:space="preserve">
          <source>For a list of available generators, see &lt;a href=&quot;../manual/cpack-generators.7#manual:cpack-generators(7)&quot; id=&quot;index-0-manual:cpack-generators(7)&quot;&gt;&lt;code&gt;cpack-generators(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 가능한 생성기 목록은 &lt;a href=&quot;../manual/cpack-generators.7#manual:cpack-generators(7)&quot; id=&quot;index-0-manual:cpack-generators(7)&quot;&gt; &lt;code&gt;cpack-generators(7)&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7322c5dd99f484e282072ffdc307e6859b1c624e" translate="yes" xml:space="preserve">
          <source>For a list of standard properties you can type &lt;code&gt;cmake --help-property-list&lt;/code&gt;.</source>
          <target state="translated">표준 속성 목록을 보려면 &lt;code&gt;cmake --help-property-list&lt;/code&gt; 를 입력 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4eeff0cac35387551deae3ed904a6956c48563ae" translate="yes" xml:space="preserve">
          <source>For a non-imported target, this property is provided for compatibility with CMake 2.4 and below. It was meant to get the location of an executable target&amp;rsquo;s output file for use in &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-0-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt;. The path may contain a build-system-specific portion that is replaced at build time with the configuration getting built (such as &lt;code&gt;$(ConfigurationName)&lt;/code&gt; in VS). In CMake 2.6 and above &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-1-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt; automatically recognizes a target name in its &lt;code&gt;COMMAND&lt;/code&gt; and &lt;code&gt;DEPENDS&lt;/code&gt; options and computes the target location. In CMake 2.8.4 and above &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-2-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt; recognizes &lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt;&lt;code&gt;generator expressions&lt;/code&gt;&lt;/a&gt; to refer to target locations anywhere in the command. Therefore this property is not needed for creating custom commands.</source>
          <target state="translated">가져 오지 않은 대상의 경우이 속성은 CMake 2.4 이하와의 호환성을 위해 제공됩니다. &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-0-command:add_custom_command&quot;&gt; &lt;code&gt;add_custom_command()&lt;/code&gt; &lt;/a&gt; 에서 사용하기 위해 실행 가능한 대상의 출력 파일 위치를 가져옵니다 . 경로에는 빌드시 구성이 빌드되는 구성 (예 : VS의 &lt;code&gt;$(ConfigurationName)&lt;/code&gt; 으로 대체되는 빌드 시스템 별 부분이 포함될 수 있습니다 . CMake 2.6 이상에서 &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-1-command:add_custom_command&quot;&gt; &lt;code&gt;add_custom_command()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;COMMAND&lt;/code&gt; 및 &lt;code&gt;DEPENDS&lt;/code&gt; 옵션 에서 대상 이름을 자동으로 인식 하고 대상 위치를 계산합니다. CMake 2.8.4 이상에서 &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-2-command:add_custom_command&quot;&gt; &lt;code&gt;add_custom_command()&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt; &lt;code&gt;generator expressions&lt;/code&gt; &lt;/a&gt; 인식 합니다.명령의 어느 곳에서나 대상 위치를 나타냅니다. 따라서이 특성은 사용자 정의 명령을 작성하는 데 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="29fa85f343615f6d5d6b31d5a344250842d44868" translate="yes" xml:space="preserve">
          <source>For a non-imported target, this property is provided for compatibility with CMake 2.4 and below. It was meant to get the location of an executable target's output file for use in &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-0-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt;. The path may contain a build-system-specific portion that is replaced at build time with the configuration getting built (such as &lt;code&gt;$(ConfigurationName)&lt;/code&gt; in VS). In CMake 2.6 and above &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-1-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt; automatically recognizes a target name in its &lt;code&gt;COMMAND&lt;/code&gt; and &lt;code&gt;DEPENDS&lt;/code&gt; options and computes the target location. In CMake 2.8.4 and above &lt;a href=&quot;../command/add_custom_command#command:add_custom_command&quot; id=&quot;index-2-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt; recognizes &lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt;&lt;code&gt;generator expressions&lt;/code&gt;&lt;/a&gt; to refer to target locations anywhere in the command. Therefore this property is not needed for creating custom commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe7903e8235434744f1affa4154a5881f9481e6" translate="yes" xml:space="preserve">
          <source>For all C++ source files &lt;code&gt;&amp;lt;source_base&amp;gt;.&amp;lt;source_extension&amp;gt;&lt;/code&gt; in the target&amp;rsquo;s sources, CMake searches for</source>
          <target state="translated">대상 소스의 모든 C ++ 소스 파일 &lt;code&gt;&amp;lt;source_base&amp;gt;.&amp;lt;source_extension&amp;gt;&lt;/code&gt; 에 대해 CMake는</target>
        </trans-unit>
        <trans-unit id="d2c0112adc41c66405daf76bfeaf4eba4e17181a" translate="yes" xml:space="preserve">
          <source>For all C++ source files &lt;code&gt;&amp;lt;source_base&amp;gt;.&amp;lt;source_extension&amp;gt;&lt;/code&gt; in the target's sources, CMake searches for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb084abf22fb4ce29e107b59d7eca378bbaee033" translate="yes" xml:space="preserve">
          <source>For all generators, it is possible to run the underlying build tool after invoking CMake. For example, &lt;code&gt;make&lt;/code&gt; may be executed after generating with the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-1-generator:Unix Makefiles&quot;&gt;&lt;code&gt;Unix Makefiles&lt;/code&gt;&lt;/a&gt; generator to invoke the build, or &lt;code&gt;ninja&lt;/code&gt; after generating with the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-2-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator etc. The IDE buildsystems usually provide command line tooling for building a project which can also be invoked.</source>
          <target state="translated">모든 생성기의 경우 CMake를 호출 한 후 기본 빌드 도구를 실행할 수 있습니다. 예컨대, &lt;code&gt;make&lt;/code&gt; 으로 생성 한 후에 실행될 수있다 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-1-generator:Unix Makefiles&quot;&gt; &lt;code&gt;Unix Makefiles&lt;/code&gt; &lt;/a&gt; 빌드 또는 호출 발생기 &lt;code&gt;ninja&lt;/code&gt; 으로 생성 후 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-2-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발생기 등 IDE의 buildsystems은 또한 일반적으로 호출 할 수있는 프로젝트를 구축하기위한 커맨드 라인 공구를 제공한다.</target>
        </trans-unit>
        <trans-unit id="a3d50300391bb5963b22b361599b6c7adaf3b693" translate="yes" xml:space="preserve">
          <source>For all generators, it is possible to run the underlying build tool after invoking CMake. For example, &lt;code&gt;make&lt;/code&gt; may be executed after generating with the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-1-generator:Unix Makefiles&quot;&gt;&lt;code&gt;Unix Makefiles&lt;/code&gt;&lt;/a&gt; generator to invoke the build, or &lt;code&gt;ninja&lt;/code&gt; after generating with the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-2-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator etc. The IDE buildsystems usually provide command line tooling for building a project which can also be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626c186e6d4c38622989e7197a19dc1ece02b605" translate="yes" xml:space="preserve">
          <source>For all languages the following variables are additionally considered:</source>
          <target state="translated">모든 언어에서 다음 변수가 추가로 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="6e7799fe2a44fcc2d8c1703111cf05a8d60fcb5a" translate="yes" xml:space="preserve">
          <source>For all other cases, the libraries will be linked by specifying the linker flags directly.</source>
          <target state="translated">다른 모든 경우에는 링커 플래그를 직접 지정하여 라이브러리가 링크됩니다.</target>
        </trans-unit>
        <trans-unit id="59e3616c5c6248867250faae76d22bcd75d8c05e" translate="yes" xml:space="preserve">
          <source>For an example see below the documentation for &lt;a href=&quot;#command:write_basic_package_version_file&quot; id=&quot;index-1-command:write_basic_package_version_file&quot;&gt;&lt;code&gt;write_basic_package_version_file()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어 아래의 &lt;a href=&quot;#command:write_basic_package_version_file&quot; id=&quot;index-1-command:write_basic_package_version_file&quot;&gt; &lt;code&gt;write_basic_package_version_file()&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f59d33c56af7eee86b39716efbe3e54a9840d88" translate="yes" xml:space="preserve">
          <source>For an imported target, this read-only property returns the value of the &lt;code&gt;LOCATION_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; property for an unspecified configuration &lt;code&gt;&amp;lt;CONFIG&amp;gt;&lt;/code&gt; provided by the target.</source>
          <target state="translated">가져온 대상의 경우이 읽기 전용 특성 은 대상이 제공 한 지정되지 않은 구성 &lt;code&gt;&amp;lt;CONFIG&amp;gt;&lt;/code&gt; 의 &lt;code&gt;LOCATION_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; 특성 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6abe8dae68f1a37b61c57e24ea226fca1ca3d69a" translate="yes" xml:space="preserve">
          <source>For an optimum usage of option &lt;code&gt;GENERATE_NATIVE_HEADERS&lt;/code&gt;, it is recommended to include module JNI before any call to &lt;code&gt;add_jar()&lt;/code&gt;. The produced target for native headers can then be used to compile C/C++ sources with the &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;GENERATE_NATIVE_HEADERS&lt;/code&gt; 옵션을 최적으로 사용 하려면 &lt;code&gt;add_jar()&lt;/code&gt; 호출하기 전에 모듈 JNI를 포함시키는 것이 좋습니다 . 그런 다음 기본 헤더에 대해 생성 된 대상을 사용하여 &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; 명령으로 C / C ++ 소스를 컴파일 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="08244790c2bdeb42126a886b98bbed26a0f1fae8" translate="yes" xml:space="preserve">
          <source>For any of the various &lt;code&gt;..._COMMAND&lt;/code&gt; options, replace &lt;code&gt;;&lt;/code&gt; with &lt;code&gt;&amp;lt;sep&amp;gt;&lt;/code&gt; in the specified command lines. This can be useful where list variables may be given in commands where they should end up as space-separated arguments (&lt;code&gt;&amp;lt;sep&amp;gt;&lt;/code&gt; would be a single space character string in this case).</source>
          <target state="translated">다양한 &lt;code&gt;..._COMMAND&lt;/code&gt; 옵션 중 하나를 바꾸 려면 &lt;code&gt;;&lt;/code&gt; 와 &lt;code&gt;&amp;lt;sep&amp;gt;&lt;/code&gt; 지정된 명령 라인이다. 공백으로 구분 된 인수로 끝나야하는 명령에서 목록 변수를 제공 할 수있는 경우 유용합니다 (이 경우 &lt;code&gt;&amp;lt;sep&amp;gt;&lt;/code&gt; 는 단일 공백 ​​문자 문자열 임).</target>
        </trans-unit>
        <trans-unit id="310529614776eec9983e7b0c8702cb04489ea104" translate="yes" xml:space="preserve">
          <source>For backward compatibility reasons, &lt;code&gt;--loglevel&lt;/code&gt; is also accepted as a synonym for this option.</source>
          <target state="translated">이전 버전과의 호환성을 위해 &lt;code&gt;--loglevel&lt;/code&gt; 도이 옵션의 동의어로 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="c3ce08785858464d082e8e4cad741d5b9574c0b5" translate="yes" xml:space="preserve">
          <source>For backward compatibility the following variables are also set:</source>
          <target state="translated">이전 버전과의 호환성을 위해 다음 변수도 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="bcf9ec985c9fdcf442454d1379e70677bf7489af" translate="yes" xml:space="preserve">
          <source>For backward compatibility with older versions of FindMPI, these variables are set, but deprecated:</source>
          <target state="translated">이전 버전의 FindMPI와의 호환성을 위해 이러한 변수는 설정되었지만 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c9d119c62982fa0df049c5cacd5c7695098207d4" translate="yes" xml:space="preserve">
          <source>For backward compatibility with older versions of FindMPI, these variables are set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e93264695adf104d882e55e2e000f44897fc36" translate="yes" xml:space="preserve">
          <source>For backward compatibility, the following form is also supported:</source>
          <target state="translated">이전 버전과의 호환성을 위해 다음 형식도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="846d7167ad6715d588db17eaa7f219b06b397c75" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, the short-hand signature</source>
          <target state="translated">이전 버전과의 호환성을 위해 짧은 서명</target>
        </trans-unit>
        <trans-unit id="dd014a7359322263b7c051fa7c11019ce25f1714" translate="yes" xml:space="preserve">
          <source>For broader exclusion control see &lt;a href=&quot;skip_autogen#prop_sf:SKIP_AUTOGEN&quot; id=&quot;index-0-prop_sf:SKIP_AUTOGEN&quot;&gt;&lt;code&gt;SKIP_AUTOGEN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">더 넓은 제외 제어는 &lt;a href=&quot;skip_autogen#prop_sf:SKIP_AUTOGEN&quot; id=&quot;index-0-prop_sf:SKIP_AUTOGEN&quot;&gt; &lt;code&gt;SKIP_AUTOGEN&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e4acca6134773c4dbefd202a6ece8f8231bd554" translate="yes" xml:space="preserve">
          <source>For build trees generated by CMake using one of the &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; or the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator, specify whether the &lt;code&gt;CTEST_USE_LAUNCHERS&lt;/code&gt; feature is enabled by the &lt;a href=&quot;../module/ctestuselaunchers#module:CTestUseLaunchers&quot; id=&quot;index-0-module:CTestUseLaunchers&quot;&gt;&lt;code&gt;CTestUseLaunchers&lt;/code&gt;&lt;/a&gt; module (also included by the &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-30-module:CTest&quot;&gt;&lt;code&gt;CTest&lt;/code&gt;&lt;/a&gt; module). When enabled, the generated build system wraps each invocation of the compiler, linker, or custom command line with a &amp;ldquo;launcher&amp;rdquo; that communicates with CTest via environment variables and files to report granular build warning and error information. Otherwise, CTest must &amp;ldquo;scrape&amp;rdquo; the build output log for diagnostics.</source>
          <target state="translated">중 하나를 사용하여 생성 된 빌드 CMake 나무의 &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;메이크 발생기&lt;/a&gt; 또는 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발생기의 여부를 지정 &lt;code&gt;CTEST_USE_LAUNCHERS&lt;/code&gt; 의 기능에 의해 활성화된다 &lt;a href=&quot;../module/ctestuselaunchers#module:CTestUseLaunchers&quot; id=&quot;index-0-module:CTestUseLaunchers&quot;&gt; &lt;code&gt;CTestUseLaunchers&lt;/code&gt; 의&lt;/a&gt; (도 포함하여 모듈 &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-30-module:CTest&quot;&gt; &lt;code&gt;CTest&lt;/code&gt; 의&lt;/a&gt; 모듈). 사용 가능한 경우 생성 된 빌드 시스템은 컴파일러, 링커 또는 사용자 정의 명령 행의 각 호출을 환경 변수 및 파일을 통해 CTest와 통신하여 세분화 된 빌드 경고 및 오류 정보를보고하는 &quot;실행기&quot;로 랩핑합니다. 그렇지 않으면 CTest는 진단을 위해 빌드 출력 로그를 &quot;스크래핑&quot;해야합니다.</target>
        </trans-unit>
        <trans-unit id="b087b57a4c8784ffdc8202e69e061434e3a682ec" translate="yes" xml:space="preserve">
          <source>For build trees generated by CMake using one of the &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; or the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator, specify whether the &lt;code&gt;CTEST_USE_LAUNCHERS&lt;/code&gt; feature is enabled by the &lt;a href=&quot;../module/ctestuselaunchers#module:CTestUseLaunchers&quot; id=&quot;index-0-module:CTestUseLaunchers&quot;&gt;&lt;code&gt;CTestUseLaunchers&lt;/code&gt;&lt;/a&gt; module (also included by the &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-30-module:CTest&quot;&gt;&lt;code&gt;CTest&lt;/code&gt;&lt;/a&gt; module). When enabled, the generated build system wraps each invocation of the compiler, linker, or custom command line with a &amp;ldquo;launcher&amp;rdquo; that communicates with CTest via environment variables and files to report granular build warning and error information. Otherwise, CTest must &amp;ldquo;scrape&amp;rdquo; the build output log for diagnostics.</source>
          <target state="translated">중 하나를 사용하여 생성 된 빌드 CMake 나무의 &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;메이크 발생기&lt;/a&gt; 또는 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발생기의 여부를 지정 &lt;code&gt;CTEST_USE_LAUNCHERS&lt;/code&gt; 의 기능에 의해 활성화된다 &lt;a href=&quot;../module/ctestuselaunchers#module:CTestUseLaunchers&quot; id=&quot;index-0-module:CTestUseLaunchers&quot;&gt; &lt;code&gt;CTestUseLaunchers&lt;/code&gt; 의&lt;/a&gt; (도 포함하여 모듈 &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-30-module:CTest&quot;&gt; &lt;code&gt;CTest&lt;/code&gt; 의&lt;/a&gt; 모듈). 활성화되면 생성 된 빌드 시스템은 컴파일러, 링커 또는 사용자 지정 명령 줄의 각 호출을 환경 변수 및 파일을 통해 CTest와 통신하여 세분화 된 빌드 경고 및 오류 정보를보고하는 &quot;실행기&quot;로 래핑합니다. 그렇지 않으면 CTest는 진단을 위해 빌드 출력 로그를 &quot;스크래핑&quot;해야합니다.</target>
        </trans-unit>
        <trans-unit id="a02700604d4e605b1cc8c89863732caed3ceca88" translate="yes" xml:space="preserve">
          <source>For build trees generated by CMake using one of the &lt;a href=&quot;cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; or the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-0-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generator, specify whether the &lt;code&gt;CTEST_USE_LAUNCHERS&lt;/code&gt; feature is enabled by the &lt;a href=&quot;../module/ctestuselaunchers#module:CTestUseLaunchers&quot; id=&quot;index-0-module:CTestUseLaunchers&quot;&gt;&lt;code&gt;CTestUseLaunchers&lt;/code&gt;&lt;/a&gt; module (also included by the &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-30-module:CTest&quot;&gt;&lt;code&gt;CTest&lt;/code&gt;&lt;/a&gt; module). When enabled, the generated build system wraps each invocation of the compiler, linker, or custom command line with a &quot;launcher&quot; that communicates with CTest via environment variables and files to report granular build warning and error information. Otherwise, CTest must &quot;scrape&quot; the build output log for diagnostics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10c6a7d7d3678ae5d1770e742715d9ce5983121" translate="yes" xml:space="preserve">
          <source>For cache entries with type &lt;code&gt;STRING&lt;/code&gt;, this enumerates a set of values. CMake GUIs may use this to provide a selection widget instead of a generic string entry field. This is for convenience only. CMake does not enforce that the value matches one of those listed.</source>
          <target state="translated">&lt;code&gt;STRING&lt;/code&gt; 유형의 캐시 항목 의 경우 값 세트를 열거합니다. CMake GUI는이를 사용하여 일반 문자열 입력 필드 대신 선택 위젯을 제공 할 수 있습니다. 이것은 단지 편의를위한 것입니다. CMake는 값이 나열된 값 중 하나와 일치하도록 강제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="16f8313dba98a10b349196e2f651fc75ef12d0a4" translate="yes" xml:space="preserve">
          <source>For certain configurations (namely VS generating object files with &lt;code&gt;CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE&lt;/code&gt; set to &lt;code&gt;ON&lt;/code&gt;), no generated file will be produced for the given cuda file. This is because when you add the cuda file to Visual Studio it knows that this file produces an object file and will link in the resulting object file automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfd4004b882aea2028c5dbc954aeb03c4409efb" translate="yes" xml:space="preserve">
          <source>For certain kinds of binary installers (including the graphical installers on macOS and Windows), CPack generates installers that allow users to select individual application components to install. See &lt;a href=&quot;cpackcomponent#module:CPackComponent&quot; id=&quot;index-0-module:CPackComponent&quot;&gt;&lt;code&gt;CPackComponent&lt;/code&gt;&lt;/a&gt; module for further details.</source>
          <target state="translated">특정 종류의 이진 설치 프로그램 (macOS 및 Windows의 그래픽 설치 프로그램 포함)의 경우 CPack은 설치할 개별 응용 프로그램 구성 요소를 선택할 수있는 설치 프로그램을 생성합니다. 자세한 내용은 &lt;a href=&quot;cpackcomponent#module:CPackComponent&quot; id=&quot;index-0-module:CPackComponent&quot;&gt; &lt;code&gt;CPackComponent&lt;/code&gt; &lt;/a&gt; 모듈을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="73c0662f6a889d5d5209c3bf8d2fd9b5e5357b38" translate="yes" xml:space="preserve">
          <source>For certain kinds of binary installers (including the graphical installers on macOS and Windows), CPack generates installers that allow users to select individual application components to install. The contents of each of the components are identified by the COMPONENT argument of CMake&amp;rsquo;s INSTALL command. These components can be annotated with user-friendly names and descriptions, inter-component dependencies, etc., and grouped in various ways to customize the resulting installer. See the cpack_add_* commands, described below, for more information about component-specific installations.</source>
          <target state="translated">특정 종류의 이진 설치 프로그램 (macOS 및 Windows의 그래픽 설치 프로그램 포함)의 경우 CPack은 설치할 개별 응용 프로그램 구성 요소를 선택할 수있는 설치 프로그램을 생성합니다. 각 구성 요소의 내용은 CMake의 INSTALL 명령의 COMPONENT 인수로 식별됩니다. 이러한 구성 요소는 사용자에게 친숙한 이름과 설명, 구성 요소 간 종속성 등으로 주석을 달고 다양한 방법으로 그룹화하여 결과 설치 관리자를 사용자 지정할 수 있습니다. 구성 요소 별 설치에 대한 자세한 정보는 아래 설명 된 cpack_add_ * 명령을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e23c3808c7d8a8e1cfdb50a560ebce60b34b356c" translate="yes" xml:space="preserve">
          <source>For commands in this section, &lt;em&gt;native&lt;/em&gt; refers to the host platform, not the target platform when cross-compiling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cec804909a503519a4b5e120e8811c7b55db833" translate="yes" xml:space="preserve">
          <source>For compatibility with previous versions of CMake, the following variables are also defined but they are deprecated and should no longer be used:</source>
          <target state="translated">이전 버전의 CMake와의 호환성을 위해 다음 변수도 정의되어 있지만 더 이상 사용되지 않으며 더 이상 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="85141a7f770e1388476592ca3ec075bcfcfa555e" translate="yes" xml:space="preserve">
          <source>For compatibility with versions of CMake prior to 3.0, if a user or project explicitly adds &lt;code&gt;CMAKE_MAKE_PROGRAM&lt;/code&gt; to the CMake cache then CMake will use the specified value if possible.</source>
          <target state="translated">사용자 또는 프로젝트가 &lt;code&gt;CMAKE_MAKE_PROGRAM&lt;/code&gt; 을 명시 적으로 추가하는 경우 3.0 이전의 CMake 버전과의 호환성을 위해 을 CMake 캐시에 CMake는 가능한 경우 지정된 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ecc8fc6d5698e27b1ec42225c074bae9d0abfba7" translate="yes" xml:space="preserve">
          <source>For compatibility with versions of CMake prior to 3.2, if a user or project explicitly adds &lt;code&gt;CMAKE_MAKE_PROGRAM&lt;/code&gt; to the CMake cache then CMake will use the specified value.</source>
          <target state="translated">3.2 이전의 CMake 버전과의 호환성을 위해 사용자 또는 프로젝트가 &lt;code&gt;CMAKE_MAKE_PROGRAM&lt;/code&gt; 을 CMake 캐시에 명시 적으로 추가 하면 CMake는 지정된 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="635886b626fb7a301acd0ab0663c6babed904048" translate="yes" xml:space="preserve">
          <source>For consumption use &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_INCLUDE_DIRS&lt;/code&gt; and for specifying folders use &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_ADDITIONAL_INCLUDE_DIRS&lt;/code&gt; instead.</source>
          <target state="translated">소비를 위해서는 &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_INCLUDE_DIRS&lt;/code&gt; 를 사용 하고 폴더를 지정하려면 &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_ADDITIONAL_INCLUDE_DIRS&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a4f42d4359d94652248150f661e82ce935179d2a" translate="yes" xml:space="preserve">
          <source>For controlling the &lt;code&gt;MPIEXEC_EXECUTABLE&lt;/code&gt; step, the following variables may be set:</source>
          <target state="translated">&lt;code&gt;MPIEXEC_EXECUTABLE&lt;/code&gt; 단계 를 제어하기 위해 다음 변수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31faf86d1469f5a56a01504e992af23dc0547bc1" translate="yes" xml:space="preserve">
          <source>For controlling the compiler wrapper step, the following variables may be set:</source>
          <target state="translated">컴파일러 래퍼 단계를 제어하기 위해 다음 변수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80a2b2e165b60723c09a95961d251dac9d8cca4a" translate="yes" xml:space="preserve">
          <source>For controlling the second step, the following variables may be set:</source>
          <target state="translated">두 번째 단계를 제어하기 위해 다음 변수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e66c306a4b6ad793d5677331766dffe4ba6bd85" translate="yes" xml:space="preserve">
          <source>For convenience include Use_wxWindows.cmake in your project&amp;rsquo;s CMakeLists.txt using include(${CMAKE_CURRENT_LIST_DIR}/Use_wxWindows.cmake).</source>
          <target state="translated">편의를 위해 include ($ {CMAKE_CURRENT_LIST_DIR} /Use_wxWindows.cmake)를 사용하여 프로젝트의 CMakeLists.txt에 Use_wxWindows.cmake를 포함 시키십시오.</target>
        </trans-unit>
        <trans-unit id="25bfab85e345b7e904417004addb130e24b47eba" translate="yes" xml:space="preserve">
          <source>For convenience include Use_wxWindows.cmake in your project's CMakeLists.txt using include(${CMAKE_CURRENT_LIST_DIR}/Use_wxWindows.cmake).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d99b73a2c94dd98f0b1c98abc44e728071503a1" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;a href=&quot;../../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-2-manual:cmake-gui(1)&quot;&gt;&lt;code&gt;cmake-gui(1)&lt;/code&gt;&lt;/a&gt; provides an environment variable editor.</source>
          <target state="translated">편의를 위해 &lt;a href=&quot;../../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-2-manual:cmake-gui(1)&quot;&gt; &lt;code&gt;cmake-gui(1)&lt;/code&gt; &lt;/a&gt; 는 환경 변수 편집기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0cf3671efafbd1634922f96200cc24d7abd5ddf0" translate="yes" xml:space="preserve">
          <source>For convenience, you may set the ENV variable CTEST_USE_LAUNCHERS_DEFAULT in your ctest -S script, too. Then, as long as your CMakeLists uses include(CTest) or include(CTestUseLaunchers), it will use the value of the ENV variable to initialize a CTEST_USE_LAUNCHERS cache variable. This cache variable initialization only occurs if CTEST_USE_LAUNCHERS is not already defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda8adaf38f3675a73a71c8d631652db2d8467e3" translate="yes" xml:space="preserve">
          <source>For convenience, you may set the ENV variable CTEST_USE_LAUNCHERS_DEFAULT in your ctest -S script, too. Then, as long as your CMakeLists uses include(CTest) or include(CTestUseLaunchers), it will use the value of the ENV variable to initialize a CTEST_USE_LAUNCHERS cache variable. This cache variable initialization only occurs if CTEST_USE_LAUNCHERS is not already defined. If CTEST_USE_LAUNCHERS is on in a ctest -S script the ctest_configure command will add -DCTEST_USE_LAUNCHERS:BOOL=TRUE to the cmake command used to configure the project.</source>
          <target state="translated">편의상 ctest -S 스크립트에서 ENV 변수 CTEST_USE_LAUNCHERS_DEFAULT를 설정할 수도 있습니다. 그런 다음 CMakeLists가 include (CTest) 또는 include (CTestUseLaunchers)를 사용하는 한 ENV 변수의 값을 사용하여 CTEST_USE_LAUNCHERS 캐시 변수를 초기화합니다. 이 캐시 변수 초기화는 CTEST_USE_LAUNCHERS가 아직 정의되지 않은 경우에만 발생합니다. CTEST_USE_LAUNCHERS가 ctest -S 스크립트에 있으면 ctest_configure 명령은 프로젝트를 구성하는 데 사용 된 cmake 명령에 -DCTEST_USE_LAUNCHERS : BOOL = TRUE를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="751dc3f1b34f16f040771e4e9421060441c70fea" translate="yes" xml:space="preserve">
          <source>For cross-compiling to iOS, tvOS, or watchOS, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator is recommended. The &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-0-generator:Unix Makefiles&quot;&gt;&lt;code&gt;Unix Makefiles&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-3-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generators can also be used, but they require the project to handle more areas like target CPU selection and code signing.</source>
          <target state="translated">iOS, tvOS 또는 watchOS 로의 크로스 컴파일을 위해서는 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 생성기가 권장됩니다. &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-0-generator:Unix Makefiles&quot;&gt; &lt;code&gt;Unix Makefiles&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-3-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발전기도 사용할 수 있지만 대상 CPU 선택 및 코드 서명과 같은 많은 영역을 처리하기 위해 프로젝트를 필요로한다.</target>
        </trans-unit>
        <trans-unit id="3b54adb80208596952de4c1c75921ff162ec673c" translate="yes" xml:space="preserve">
          <source>For cross-compiling to iOS, tvOS, or watchOS, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator is recommended. The &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-0-generator:Unix Makefiles&quot;&gt;&lt;code&gt;Unix Makefiles&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-2-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generators can also be used, but they require the project to handle more areas like target CPU selection and code signing.</source>
          <target state="translated">iOS, tvOS 또는 watchOS로 교차 컴파일하려면 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 생성기를 사용하는 것이 좋습니다. &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-0-generator:Unix Makefiles&quot;&gt; &lt;code&gt;Unix Makefiles&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-2-generator:Ninja&quot;&gt; &lt;code&gt;Ninja&lt;/code&gt; &lt;/a&gt; 발전기도 사용할 수 있지만 대상 CPU 선택 및 코드 서명과 같은 많은 영역을 처리하기 위해 프로젝트를 필요로한다.</target>
        </trans-unit>
        <trans-unit id="7d3d63490ea781e04a730fab9865fd6872d53136" translate="yes" xml:space="preserve">
          <source>For cross-compiling to iOS, tvOS, or watchOS, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator is recommended. The &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Unix%20Makefiles.html#generator:Unix%20Makefiles&quot; id=&quot;index-0-generator:Unix Makefiles&quot;&gt;&lt;code&gt;Unix Makefiles&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Ninja.html#generator:Ninja&quot; id=&quot;index-2-generator:Ninja&quot;&gt;&lt;code&gt;Ninja&lt;/code&gt;&lt;/a&gt; generators can also be used, but they require the project to handle more areas like target CPU selection and code signing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8028d73e40ccbb342157eea13abb78130974fda" translate="yes" xml:space="preserve">
          <source>For custom steps, the &lt;a href=&quot;../module/externalproject#command:externalproject_add_step&quot; id=&quot;index-0-command:externalproject_add_step&quot;&gt;&lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt;&lt;/a&gt; command provides an &lt;code&gt;INDEPENDENT&lt;/code&gt; option to mark them as independent. It is an error to mark a step as independent if it depends on other steps that are not. Note that this use of the term &quot;independent&quot; refers only to independence from external targets and is orthogonal to a step's dependencies on other steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcac30c298cb323c0492221c79f070bf75877b1" translate="yes" xml:space="preserve">
          <source>For custom steps, the &lt;a href=&quot;../module/externalproject#command:externalproject_add_step&quot; id=&quot;index-0-command:externalproject_add_step&quot;&gt;&lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt;&lt;/a&gt; command provides an &lt;code&gt;INDEPENDENT&lt;/code&gt; option to mark them as independent. It is an error to mark a step as independent if it depends on other steps that are not. Note that this use of the term &amp;ldquo;independent&amp;rdquo; refers only to independence from external targets and is orthogonal to a step&amp;rsquo;s dependencies on other steps.</source>
          <target state="translated">사용자 정의 단계의 경우 &lt;a href=&quot;../module/externalproject#command:externalproject_add_step&quot; id=&quot;index-0-command:externalproject_add_step&quot;&gt; &lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt; &lt;/a&gt; 명령은 독립적으로 표시 하는 &lt;code&gt;INDEPENDENT&lt;/code&gt; 옵션을 제공합니다 . 단계가 다른 단계에 종속되어 있지 않은 경우 독립된 것으로 표시하는 것은 오류입니다. &quot;독립&quot;이라는 용어의 사용은 외부 대상으로부터의 독립만을 의미하며 다른 단계에 대한 단계의 종속성과 직교합니다.</target>
        </trans-unit>
        <trans-unit id="2ffedb2f176d7a1db653f46f66188402ab146535" translate="yes" xml:space="preserve">
          <source>For custom targets, if such files can be captured as outputs or byproducts instead, then that should be preferred over adding them to this property. If an additional clean file is used by multiple targets or isn&amp;rsquo;t target-specific, then the &lt;a href=&quot;../prop_dir/additional_clean_files#prop_dir:ADDITIONAL_CLEAN_FILES&quot; id=&quot;index-0-prop_dir:ADDITIONAL_CLEAN_FILES&quot;&gt;&lt;code&gt;ADDITIONAL_CLEAN_FILES&lt;/code&gt;&lt;/a&gt; directory property may be the more appropriate property to use.</source>
          <target state="translated">사용자 정의 대상의 경우, 해당 파일을 출력 또는 부산물로 대신 캡처 할 수 있으면이 특성에 파일을 추가하는 것보다 선호되어야합니다. 추가 정리 파일이 여러 대상에서 사용되거나 대상별로 &lt;a href=&quot;../prop_dir/additional_clean_files#prop_dir:ADDITIONAL_CLEAN_FILES&quot; id=&quot;index-0-prop_dir:ADDITIONAL_CLEAN_FILES&quot;&gt; &lt;code&gt;ADDITIONAL_CLEAN_FILES&lt;/code&gt; &lt;/a&gt; 않으면 ADDITIONAL_CLEAN_FILES 디렉토리 특성이 사용하기에 더 적합한 특성 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="520dcb31c0ad0153af139dc691da80e1b0c0bead" translate="yes" xml:space="preserve">
          <source>For custom targets, if such files can be captured as outputs or byproducts instead, then that should be preferred over adding them to this property. If an additional clean file is used by multiple targets or isn't target-specific, then the &lt;a href=&quot;../prop_dir/additional_clean_files#prop_dir:ADDITIONAL_CLEAN_FILES&quot; id=&quot;index-0-prop_dir:ADDITIONAL_CLEAN_FILES&quot;&gt;&lt;code&gt;ADDITIONAL_CLEAN_FILES&lt;/code&gt;&lt;/a&gt; directory property may be the more appropriate property to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a7d4017b794872d23b490da661afd3c86bf738" translate="yes" xml:space="preserve">
          <source>For developers starting a project using CMake, the &lt;a href=&quot;guide/tutorial/index#guide:CMake%20Tutorial&quot; id=&quot;index-0-guide:CMake Tutorial&quot;&gt;&lt;code&gt;CMake Tutorial&lt;/code&gt;&lt;/a&gt; is a suitable starting point. The &lt;a href=&quot;manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)&quot; id=&quot;index-0-manual:cmake-buildsystem(7)&quot;&gt;&lt;code&gt;cmake-buildsystem(7)&lt;/code&gt;&lt;/a&gt; manual is aimed at developers expanding their knowledge of maintaining a buildsystem and becoming familiar with the build targets that can be represented in CMake. The &lt;a href=&quot;manual/cmake-packages.7#manual:cmake-packages(7)&quot; id=&quot;index-0-manual:cmake-packages(7)&quot;&gt;&lt;code&gt;cmake-packages(7)&lt;/code&gt;&lt;/a&gt; manual explains how to create packages which can easily be consumed by third-party CMake-based buildsystems.</source>
          <target state="translated">CMake를 사용하여 프로젝트를 시작하는 개발자의 경우 &lt;a href=&quot;guide/tutorial/index#guide:CMake%20Tutorial&quot; id=&quot;index-0-guide:CMake Tutorial&quot;&gt; &lt;code&gt;CMake Tutorial&lt;/code&gt; &lt;/a&gt; 이 적합한 시작점입니다. &lt;a href=&quot;manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)&quot; id=&quot;index-0-manual:cmake-buildsystem(7)&quot;&gt; &lt;code&gt;cmake-buildsystem(7)&lt;/code&gt; &lt;/a&gt; 매뉴얼은 buildsystem을 유지하고 CMake으로 표현 될 수있는 빌드 타겟에 익숙해에 대한 지식을 확장하는 개발자를 대상으로합니다. &lt;a href=&quot;manual/cmake-packages.7#manual:cmake-packages(7)&quot; id=&quot;index-0-manual:cmake-packages(7)&quot;&gt; &lt;code&gt;cmake-packages(7)&lt;/code&gt; &lt;/a&gt; 매뉴얼은 쉽게 타사 CMake 기반 buildsystems에 의해 소비 될 수있는 패키지를 만드는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="ff0ba4cca2bc4b7bd6bb83010efae10165b11596" translate="yes" xml:space="preserve">
          <source>For developers wishing to use CMake to consume a third party binary package, there are multiple possibilities regarding how to optimally do so, depending on how CMake-aware the third-party library is.</source>
          <target state="translated">CMake를 사용하여 타사 바이너리 패키지를 사용하려는 개발자의 경우 타사 라이브러리가 CMake를 인식하는 방식에 따라 최적으로 수행하는 방법에 대한 여러 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="523e8de08de834972fd8b6c4d2487ca9e8dac9eb" translate="yes" xml:space="preserve">
          <source>For directory-wide settings, there is the command &lt;a href=&quot;add_compile_options#command:add_compile_options&quot; id=&quot;index-0-command:add_compile_options&quot;&gt;&lt;code&gt;add_compile_options()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">디렉토리 전체 설정의 경우 &lt;a href=&quot;add_compile_options#command:add_compile_options&quot; id=&quot;index-0-command:add_compile_options&quot;&gt; &lt;code&gt;add_compile_options()&lt;/code&gt; &lt;/a&gt; 명령이 있습니다. 있습니다.</target>
        </trans-unit>
        <trans-unit id="b831b1459c8229e6e703eda60e3e619fc888e72b" translate="yes" xml:space="preserve">
          <source>For each compiler, a preprocessor macro is generated matching &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_IS_&amp;lt;compiler&amp;gt;&lt;/code&gt; which has the content either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;, depending on the compiler in use. Preprocessor macros for compiler version components are generated matching &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_VERSION_MAJOR&lt;/code&gt;&lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_VERSION_MINOR&lt;/code&gt; and &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_VERSION_PATCH&lt;/code&gt; containing decimal values for the corresponding compiler version components, if defined.</source>
          <target state="translated">각 컴파일러에 대해 사용중인 컴파일러에 따라 컨텐츠가 &lt;code&gt;0&lt;/code&gt; 또는 &lt;code&gt;1&lt;/code&gt; 인 &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_IS_&amp;lt;compiler&amp;gt;&lt;/code&gt; 와 일치하는 전 처리기 매크로가 생성 됩니다. &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_VERSION_MAJOR&lt;/code&gt; &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_VERSION_MINOR&lt;/code&gt; 및 &lt;code&gt;&amp;lt;PREFIX&amp;gt;_COMPILER_VERSION_PATCH&lt;/code&gt; 와 일치하는 컴파일러 버전 구성 요소의 전 처리기 매크로가 생성됩니다. 가 정의되어있는 경우 해당 컴파일러 버전 구성 요소에 대한 10 진수 값을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="0781192f3976f7206e67cee9169da7f48ec6f340" translate="yes" xml:space="preserve">
          <source>For each feature listed in &lt;code&gt;FEATURES&lt;/code&gt;, a preprocessor definition is created in the header file, and defined to either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FEATURES&lt;/code&gt; 에 나열된 각 기능에 대해 전 처리기 정의가 헤더 파일에 작성되고 &lt;code&gt;1&lt;/code&gt; 또는 &lt;code&gt;0&lt;/code&gt; 으로 정의됩니다. .</target>
        </trans-unit>
        <trans-unit id="1aa3ffa15eea5037fe52855657adaee1c7223201" translate="yes" xml:space="preserve">
          <source>For each installer or package format, &lt;strong&gt;cpack&lt;/strong&gt; has a specific backend, called &quot;generator&quot;. A generator is responsible for generating the required inputs and invoking the specific package creation tools. These installer or package generators are not to be confused with the makefile generators of the &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c706a321e479d1c6268174fd39db27f16005e23" translate="yes" xml:space="preserve">
          <source>For each installer or package format, &lt;strong&gt;cpack&lt;/strong&gt; has a specific backend, called &amp;ldquo;generator&amp;rdquo;. A generator is responsible for generating the required inputs and invoking the specific package creation tools. These installer or package generators are not to be confused with the makefile generators of the &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">각 설치 프로그램 또는 패키지 형식에 대해 &lt;strong&gt;cpack&lt;/strong&gt; 에는&amp;ldquo;generator&amp;rdquo;라는 특정 백엔드가 있습니다. 생성기는 필요한 입력을 생성하고 특정 패키지 작성 도구를 호출합니다. 이러한 설치 프로그램 또는 패키지 생성기는 &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake&lt;/code&gt; &lt;/a&gt; 명령 의 makefile 생성기와 혼동해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2012f4a0d1f782c09b72cc3242856d7a1621322" translate="yes" xml:space="preserve">
          <source>For each language checked, two boolean cache variables are defined.</source>
          <target state="translated">검사 된 각 언어에 대해 두 개의 부울 캐시 변수가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="584679b13e51d0169fea8e9303ac7d0d1d3fe8c1" translate="yes" xml:space="preserve">
          <source>For each language, find the output of &lt;code&gt;MPI_Get_library_version&lt;/code&gt; and make it available as &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_LIBRARY_VERSION_STRING&lt;/code&gt;. This information is usually tied to the runtime component of an MPI implementation and might differ depending on &lt;code&gt;&amp;lt;lang&amp;gt;&lt;/code&gt;. Note that the return value is entirely implementation defined. This information might be used to identify the MPI vendor and for example pick the correct one of multiple third party binaries that matches the MPI vendor.</source>
          <target state="translated">각 언어에 대해 &lt;code&gt;MPI_Get_library_version&lt;/code&gt; 의 출력을 찾아 &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_LIBRARY_VERSION_STRING&lt;/code&gt; 으로 사용 가능하게하십시오 . 이 정보는 일반적으로 MPI 구현의 런타임 구성 요소에 연결되며 &lt;code&gt;&amp;lt;lang&amp;gt;&lt;/code&gt; 에 따라 다를 수 있습니다 . 반환 값은 전적으로 구현 정의입니다. 이 정보는 MPI 공급 업체를 식별하고 MPI 공급 업체와 일치하는 여러 타사 바이너리 중 하나를 선택하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6901bb1b432c8504f077f662b9f1dea76e7c757" translate="yes" xml:space="preserve">
          <source>For each of these arguments given, the arguments following them only apply to the target or file type specified in the argument. If none is given, the installation properties apply to all target types. If only one is given then only targets of that type will be installed (which can be used to install just a DLL or just an import library.)</source>
          <target state="translated">주어진 각 인수에 대해, 그 뒤에 오는 인수는 인수에 지정된 대상 또는 파일 유형에만 적용됩니다. 아무 것도 지정하지 않으면 설치 속성이 모든 대상 유형에 적용됩니다. 하나만 제공하면 해당 유형의 대상 만 설치됩니다 (DLL 또는 가져 오기 라이브러리 만 설치하는 데 사용할 수 있음).</target>
        </trans-unit>
        <trans-unit id="e3ee5965cc98b16fa92035cfa1a73dd982629a64" translate="yes" xml:space="preserve">
          <source>For each package type &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; defined by the &lt;a href=&quot;#variable:FeatureSummary_PKG_TYPES&quot; id=&quot;index-2-variable:FeatureSummary_PKG_TYPES&quot;&gt;&lt;code&gt;FeatureSummary_PKG_TYPES&lt;/code&gt;&lt;/a&gt; global property, the following information can also be used:</source>
          <target state="translated">&lt;a href=&quot;#variable:FeatureSummary_PKG_TYPES&quot; id=&quot;index-2-variable:FeatureSummary_PKG_TYPES&quot;&gt; &lt;code&gt;FeatureSummary_PKG_TYPES&lt;/code&gt; &lt;/a&gt; 글로벌 특성으로 정의 된 각 패키지 유형 &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; 에 대해 다음 정보를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ea9c760ebbfca153d8350e72bae487f0dd5eccb" translate="yes" xml:space="preserve">
          <source>For each requested object kind CMake will choose the &lt;em&gt;first&lt;/em&gt; version that it recognizes for that kind among those listed in the request. The response will use the selected &lt;em&gt;major&lt;/em&gt; version with the highest &lt;em&gt;minor&lt;/em&gt; version known to the running CMake for that major version. Therefore clients should list all supported major versions in preferred order along with the minimal minor version required for each major version.</source>
          <target state="translated">요청 된 객체 종류마다 CMake는 요청에 나열된 것 중에서 해당 종류에 대해 인식 하는 &lt;em&gt;첫 번째&lt;/em&gt; 버전을 선택합니다 . 응답은 해당 메이저 버전에 대해 CMake를 실행하는 것으로 알려진 가장 &lt;em&gt;작은 마이너&lt;/em&gt; 버전 의 선택된 &lt;em&gt;메이저&lt;/em&gt; 버전을 사용합니다 . 따라서 클라이언트는 지원되는 모든 주요 버전을 각 주요 버전에 필요한 최소 부 버전과 함께 우선 순위대로 나열해야합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="3bbb38575bf554367fd05faa0db5419e828aa0d2" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;CMAKE_C_COMPILER_VERSION&lt;/code&gt; and &lt;code&gt;CMAKE_CXX_COMPILER_VERSION&lt;/code&gt; might indicate the respective C and C++ compiler version.</source>
          <target state="translated">예를 들어 &lt;code&gt;CMAKE_C_COMPILER_VERSION&lt;/code&gt; 및 &lt;code&gt;CMAKE_CXX_COMPILER_VERSION&lt;/code&gt; 은 각각의 C 및 C ++ 컴파일러 버전을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="946cbe1fd9f5a9f1f980aaa03ee054614c42285f" translate="yes" xml:space="preserve">
          <source>For example creating imported C++ library &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">예를 들어 가져온 C ++ 라이브러리 &lt;code&gt;foo&lt;/code&gt; 생성 :</target>
        </trans-unit>
        <trans-unit id="f41da85c24789a836192e20436d86ecc5bde85ee" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;&quot;LINKER:-z,defs&quot;&lt;/code&gt; becomes &lt;code&gt;-Xlinker -z -Xlinker defs&lt;/code&gt; for &lt;code&gt;Clang&lt;/code&gt; and &lt;code&gt;-Wl,-z,defs&lt;/code&gt; for &lt;code&gt;GNU GCC&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;&quot;LINKER:-z,defs&quot;&lt;/code&gt; 이된다 &lt;code&gt;-Xlinker -z -Xlinker defs&lt;/code&gt; 에 대한 &lt;code&gt;Clang&lt;/code&gt; 와 &lt;code&gt;-Wl,-z,defs&lt;/code&gt; 를위한 &lt;code&gt;GNU GCC&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d021d162ab664820dbc095de50dbede9c1c9bd5" translate="yes" xml:space="preserve">
          <source>For example, C++ code can be wrapped into Java or Python, using SWIG. If &lt;code&gt;WRAP_EXCLUDE&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, that indicates that this source file should not be wrapped.</source>
          <target state="translated">예를 들어, SW ++을 사용하여 C ++ 코드를 Java 또는 Python으로 랩핑 할 수 있습니다. &lt;code&gt;WRAP_EXCLUDE&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 이 소스 파일을 랩핑하지 않아야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9c793ffa8e54a087f8d1cc42924067ce2b6429d7" translate="yes" xml:space="preserve">
          <source>For example, a header at &lt;code&gt;with_variadics/interface.h&lt;/code&gt; may contain:</source>
          <target state="translated">예를 들어 &lt;code&gt;with_variadics/interface.h&lt;/code&gt; 의 헤더 는 다음을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2930e20bdd21c8ed8be9970193d2fe4ffb67086f" translate="yes" xml:space="preserve">
          <source>For example, a toolchain file might contain:</source>
          <target state="translated">예를 들어 툴체인 파일에는 다음이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b33eb51ecad9639dc1ea16b615e0486238e61af" translate="yes" xml:space="preserve">
          <source>For example, for &lt;code&gt;Clang&lt;/code&gt; we have:</source>
          <target state="translated">예를 들어 &lt;code&gt;Clang&lt;/code&gt; 의 경우 다음이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a9ca035d5b03743722a60a445fc597e6b406cb3" translate="yes" xml:space="preserve">
          <source>For example, from the command line we could navigate to the &lt;code&gt;Help/guide/tutorial&lt;/code&gt; directory of the CMake source code tree and create a build directory:</source>
          <target state="translated">예를 들어 명령 줄 에서 CMake 소스 코드 트리 의 &lt;code&gt;Help/guide/tutorial&lt;/code&gt; 디렉터리로 이동하여 빌드 디렉터리를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60ebe30e446221ade4ce17779194fd7d9b6f2236" translate="yes" xml:space="preserve">
          <source>For example, given a framework called &lt;code&gt;my_fw&lt;/code&gt;, a value of &lt;code&gt;_debug&lt;/code&gt; for the &lt;code&gt;FRAMEWORK_MULTI_CONFIG_POSTFIX_DEBUG&lt;/code&gt; property, and &lt;code&gt;Debug;Release&lt;/code&gt; in &lt;a href=&quot;../variable/cmake_configuration_types#variable:CMAKE_CONFIGURATION_TYPES&quot; id=&quot;index-0-variable:CMAKE_CONFIGURATION_TYPES&quot;&gt;&lt;code&gt;CMAKE_CONFIGURATION_TYPES&lt;/code&gt;&lt;/a&gt;, the following relevant files would be created for the &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; configurations:</source>
          <target state="translated">예를 들어, 주어진 프레임 워크라는 &lt;code&gt;my_fw&lt;/code&gt; 의 값 &lt;code&gt;_debug&lt;/code&gt; 에 대한 &lt;code&gt;FRAMEWORK_MULTI_CONFIG_POSTFIX_DEBUG&lt;/code&gt; 의 특성 및 &lt;code&gt;Debug;Release&lt;/code&gt; 에 &lt;a href=&quot;../variable/cmake_configuration_types#variable:CMAKE_CONFIGURATION_TYPES&quot; id=&quot;index-0-variable:CMAKE_CONFIGURATION_TYPES&quot;&gt; &lt;code&gt;CMAKE_CONFIGURATION_TYPES&lt;/code&gt; &lt;/a&gt; ,하여 생성 될 관련 파일 다음 &lt;code&gt;Debug&lt;/code&gt; 및 &lt;code&gt;Release&lt;/code&gt; : 구성</target>
        </trans-unit>
        <trans-unit id="5aa6b0e7012324bd40e2e27abe7a41d351b319f5" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;SubprojectA&lt;/code&gt; showed &lt;code&gt;100 sec*proc&lt;/code&gt; and &lt;code&gt;SubprojectB&lt;/code&gt; showed &lt;code&gt;10 sec*proc&lt;/code&gt;, then CTest allocated approximately 10 times the CPU/core time to run the tests for &lt;code&gt;SubprojectA&lt;/code&gt; than for &lt;code&gt;SubprojectB&lt;/code&gt; (e.g. so if effort is going to be expended to reduce the cost of the test suite for the whole project, then reducing the cost of the test suite for &lt;code&gt;SubprojectA&lt;/code&gt; would likely have a larger impact than effort to reduce the cost of the test suite for &lt;code&gt;SubprojectB&lt;/code&gt;).</source>
          <target state="translated">예를 들어, &lt;code&gt;SubprojectA&lt;/code&gt; 보여 &lt;code&gt;100 sec*proc&lt;/code&gt; 하고 &lt;code&gt;SubprojectB&lt;/code&gt; 은 보여 &lt;code&gt;10 sec*proc&lt;/code&gt; , 다음 CTest 약 할당에 대한 테스트를 실행하는 10 배 CPU / 코어 시간 &lt;code&gt;SubprojectA&lt;/code&gt; 보다 &lt;code&gt;SubprojectB&lt;/code&gt; 을 (예를 들어, 그래서 노력을 줄이기 위해 소비 될 것입니다 경우 전체 프로젝트에 대한 테스트 스위트 비용, &lt;code&gt;SubprojectA&lt;/code&gt; 에 대한 테스트 스위트 비용 감소는 &lt;code&gt;SubprojectB&lt;/code&gt; 에 대한 테스트 스위트 비용 절감 노력보다 더 큰 영향을 미칩니다 ).</target>
        </trans-unit>
        <trans-unit id="9dabedc1f3c9b04751f1a8e52a4ebda88e3c40ba" translate="yes" xml:space="preserve">
          <source>For example, if C++ 11 features are used extensively in a project&amp;rsquo;s header files, then clients must use a compiler mode aware of C++ 11 or above. This can be requested with the code:</source>
          <target state="translated">예를 들어, C ++ 11 기능이 프로젝트의 헤더 파일에서 광범위하게 사용되는 경우 클라이언트는 C ++ 11 이상을 인식하는 컴파일러 모드를 사용해야합니다. 이것은 코드로 요청할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="4ac2b894eb73ee47df5edbe70ff971b7abfcf8bd" translate="yes" xml:space="preserve">
          <source>For example, if C++ 11 features are used extensively in a project&amp;rsquo;s header files, then clients must use a compiler mode that is no less than C++ 11. This can be requested with the code:</source>
          <target state="translated">예를 들어 C ++ 11 기능이 프로젝트의 헤더 파일에서 광범위하게 사용되는 경우 클라이언트는 C ++ 11 이상의 컴파일러 모드를 사용해야합니다. 이는 다음 코드로 요청할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbeb5ffc8f4b3971d43e59bf6a6d1612ce1eb8d5" translate="yes" xml:space="preserve">
          <source>For example, if C++ 11 features are used extensively in a project's header files, then clients must use a compiler mode that is no less than C++ 11. This can be requested with the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f97645cb48b4b3453ca5af61696928a75e91cc0" translate="yes" xml:space="preserve">
          <source>For example, if a preset named &lt;code&gt;ninja&lt;/code&gt; specifies &lt;code&gt;Ninja&lt;/code&gt; as the generator and &lt;code&gt;${sourceDir}/build&lt;/code&gt; as the build directory, instead of running:</source>
          <target state="translated">예를 들어 &lt;code&gt;ninja&lt;/code&gt; 라는 사전 설정이 &lt;code&gt;Ninja&lt;/code&gt; 를 생성기로 지정 하고 &lt;code&gt;${sourceDir}/build&lt;/code&gt; 를 빌드 디렉터리로 지정하는 경우 다음을 실행하는 대신 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="50aae5da56050c0048c5505bc04a209ebc7f99e0" translate="yes" xml:space="preserve">
          <source>For example, if the linked libraries for a target must be specified in the order &lt;code&gt;lib1&lt;/code&gt;&lt;code&gt;lib2&lt;/code&gt;&lt;code&gt;lib3&lt;/code&gt; , but the include directories must be specified in the order &lt;code&gt;lib3&lt;/code&gt;&lt;code&gt;lib1&lt;/code&gt;&lt;code&gt;lib2&lt;/code&gt;:</source>
          <target state="translated">예를 들어, 대상의 링크 된 라이브러리가 &lt;code&gt;lib1&lt;/code&gt; &lt;code&gt;lib2&lt;/code&gt; &lt;code&gt;lib3&lt;/code&gt; 순서 로 지정되어야하지만 포함 디렉토리는 &lt;code&gt;lib3&lt;/code&gt; &lt;code&gt;lib1&lt;/code&gt; &lt;code&gt;lib2&lt;/code&gt; 순서로 지정되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="a575ad3908796268e9301813f7ae313228b6b010" translate="yes" xml:space="preserve">
          <source>For example, if we have:</source>
          <target state="translated">예를 들어 다음과 같은 경우</target>
        </trans-unit>
        <trans-unit id="968a334c5ad23a7de81ad22ce22f1d332a5354db" translate="yes" xml:space="preserve">
          <source>For example, if you set &lt;a href=&quot;cmake_default_build_type#variable:CMAKE_DEFAULT_BUILD_TYPE&quot; id=&quot;index-1-variable:CMAKE_DEFAULT_BUILD_TYPE&quot;&gt;&lt;code&gt;CMAKE_DEFAULT_BUILD_TYPE&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Release&lt;/code&gt;, but set &lt;a href=&quot;#variable:CMAKE_DEFAULT_CONFIGS&quot; id=&quot;index-0-variable:CMAKE_DEFAULT_CONFIGS&quot;&gt;&lt;code&gt;CMAKE_DEFAULT_CONFIGS&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Debug&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;, all &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; aliases in &lt;code&gt;build.ninja&lt;/code&gt; will resolve to &lt;code&gt;&amp;lt;target&amp;gt;:Debug&lt;/code&gt; or &lt;code&gt;&amp;lt;target&amp;gt;:all&lt;/code&gt;, but custom commands will still use the &lt;code&gt;Release&lt;/code&gt; configuration.</source>
          <target state="translated">예를 들어, 당신은 설정 &lt;a href=&quot;cmake_default_build_type#variable:CMAKE_DEFAULT_BUILD_TYPE&quot; id=&quot;index-1-variable:CMAKE_DEFAULT_BUILD_TYPE&quot;&gt; &lt;code&gt;CMAKE_DEFAULT_BUILD_TYPE&lt;/code&gt; 을&lt;/a&gt; 에 &lt;code&gt;Release&lt;/code&gt; 하지만 세트 &lt;a href=&quot;#variable:CMAKE_DEFAULT_CONFIGS&quot; id=&quot;index-0-variable:CMAKE_DEFAULT_CONFIGS&quot;&gt; &lt;code&gt;CMAKE_DEFAULT_CONFIGS&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;Debug&lt;/code&gt; 또는 &lt;code&gt;all&lt;/code&gt; , 모든 &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; 의 별칭 &lt;code&gt;build.ninja&lt;/code&gt; 는 에 해결할 수 &lt;code&gt;&amp;lt;target&amp;gt;:Debug&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;target&amp;gt;:all&lt;/code&gt; 하지만, 사용자 정의 명령은 여전히 사용할 &lt;code&gt;Release&lt;/code&gt; 구성.</target>
        </trans-unit>
        <trans-unit id="cd86fee3ce64eed302e5d32a6b6f9e3bfdca8d95" translate="yes" xml:space="preserve">
          <source>For example, the code</source>
          <target state="translated">예를 들어, 코드</target>
        </trans-unit>
        <trans-unit id="0daafbfc8f622fbbbf3dc05ed0fe2f79d7ba67f6" translate="yes" xml:space="preserve">
          <source>For example, the code:</source>
          <target state="translated">예를 들어 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="51ec667d72c3e5fbb3faf595d324e6b9dac712e8" translate="yes" xml:space="preserve">
          <source>For example, the path to the linker is:</source>
          <target state="translated">예를 들어, 링커의 경로는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b417f99294d8e1827b7152e925dd5042d887d155" translate="yes" xml:space="preserve">
          <source>For example, to create a CMake configuration for iOS, the following command is sufficient:</source>
          <target state="translated">예를 들어, iOS 용 CMake 구성을 작성하려면 다음 명령으로 충분합니다.</target>
        </trans-unit>
        <trans-unit id="46a749577210ca2939238d845d23a1895f8709cc" translate="yes" xml:space="preserve">
          <source>For example, to use Intel MKL libraries and/or Intel compiler:</source>
          <target state="translated">예를 들어, Intel MKL 라이브러리 및 / 또는 Intel 컴파일러를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc435718799fbc969f75db00865251a03ebaae2b" translate="yes" xml:space="preserve">
          <source>For executable targets, the link step is controlled by the &lt;a href=&quot;../policy/cmp0083#policy:CMP0083&quot; id=&quot;index-0-policy:CMP0083&quot;&gt;&lt;code&gt;CMP0083&lt;/code&gt;&lt;/a&gt; policy and the &lt;a href=&quot;../module/checkpiesupported#module:CheckPIESupported&quot; id=&quot;index-0-module:CheckPIESupported&quot;&gt;&lt;code&gt;CheckPIESupported&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">실행 가능한 대상의 경우 링크 단계는 &lt;a href=&quot;../policy/cmp0083#policy:CMP0083&quot; id=&quot;index-0-policy:CMP0083&quot;&gt; &lt;code&gt;CMP0083&lt;/code&gt; &lt;/a&gt; 정책 및 &lt;a href=&quot;../module/checkpiesupported#module:CheckPIESupported&quot; id=&quot;index-0-module:CheckPIESupported&quot;&gt; &lt;code&gt;CheckPIESupported&lt;/code&gt; &lt;/a&gt; 모듈에 의해 제어됩니다 .</target>
        </trans-unit>
        <trans-unit id="15f4bca2b0bf9c432d67c463c8da7610b16b1d27" translate="yes" xml:space="preserve">
          <source>For executables, shared libraries, and modules, this sets the language whose compiler is used to link the target (such as &quot;C&quot; or &quot;CXX&quot;). A typical value for an executable is the language of the source file providing the program entry point (main). If not set, the language with the highest linker preference value is the default. See documentation of &lt;code&gt;CMAKE_&amp;lt;LANG&amp;gt;_LINKER_PREFERENCE&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a462c7c860cd46dba49d240b00fa328d1a801725" translate="yes" xml:space="preserve">
          <source>For executables, shared libraries, and modules, this sets the language whose compiler is used to link the target (such as &amp;ldquo;C&amp;rdquo; or &amp;ldquo;CXX&amp;rdquo;). A typical value for an executable is the language of the source file providing the program entry point (main). If not set, the language with the highest linker preference value is the default. See documentation of &lt;code&gt;CMAKE_&amp;lt;LANG&amp;gt;_LINKER_PREFERENCE&lt;/code&gt; variables.</source>
          <target state="translated">실행 파일, 공유 라이브러리 및 모듈의 경우 대상을 연결하는 데 컴파일러를 사용하는 언어 (예 : &quot;C&quot;또는 &quot;CXX&quot;)를 설정합니다. 실행 파일의 일반적인 값은 프로그램 진입 점 (메인)을 제공하는 소스 파일의 언어입니다. 설정하지 않으면 링커 기본 설정 값이 가장 높은 언어가 기본값입니다. &lt;code&gt;CMAKE_&amp;lt;LANG&amp;gt;_LINKER_PREFERENCE&lt;/code&gt; 변수의 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9accd48ac66581f0223d4c374a0388e6f66a775" translate="yes" xml:space="preserve">
          <source>For file-specific settings, there is the source file property &lt;a href=&quot;../prop_sf/compile_options#prop_sf:COMPILE_OPTIONS&quot; id=&quot;index-0-prop_sf:COMPILE_OPTIONS&quot;&gt;&lt;code&gt;COMPILE_OPTIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일 별 설정의 경우 소스 파일 속성 &lt;a href=&quot;../prop_sf/compile_options#prop_sf:COMPILE_OPTIONS&quot; id=&quot;index-0-prop_sf:COMPILE_OPTIONS&quot;&gt; &lt;code&gt;COMPILE_OPTIONS&lt;/code&gt; 가&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d9df4b1daec44aaea119810cfbc544c64a8be7d" translate="yes" xml:space="preserve">
          <source>For finer exclusion control see &lt;a href=&quot;skip_automoc#prop_sf:SKIP_AUTOMOC&quot; id=&quot;index-0-prop_sf:SKIP_AUTOMOC&quot;&gt;&lt;code&gt;SKIP_AUTOMOC&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;skip_autouic#prop_sf:SKIP_AUTOUIC&quot; id=&quot;index-0-prop_sf:SKIP_AUTOUIC&quot;&gt;&lt;code&gt;SKIP_AUTOUIC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;skip_autorcc#prop_sf:SKIP_AUTORCC&quot; id=&quot;index-0-prop_sf:SKIP_AUTORCC&quot;&gt;&lt;code&gt;SKIP_AUTORCC&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">더 자세한 제외 제어는 &lt;a href=&quot;skip_automoc#prop_sf:SKIP_AUTOMOC&quot; id=&quot;index-0-prop_sf:SKIP_AUTOMOC&quot;&gt; &lt;code&gt;SKIP_AUTOMOC&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;skip_autouic#prop_sf:SKIP_AUTOUIC&quot; id=&quot;index-0-prop_sf:SKIP_AUTOUIC&quot;&gt; &lt;code&gt;SKIP_AUTOUIC&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;skip_autorcc#prop_sf:SKIP_AUTORCC&quot; id=&quot;index-0-prop_sf:SKIP_AUTORCC&quot;&gt; &lt;code&gt;SKIP_AUTORCC&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="038197bba369df2be4147cf38e70ff4df42eb3c0" translate="yes" xml:space="preserve">
          <source>For framework targets, this property is initialized by the value of the &lt;code&gt;CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; variable if it is set when a target is created.</source>
          <target state="translated">프레임 워크 대상의 경우이 속성은 대상이 생성 될 때 설정된 경우 &lt;code&gt;CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; 변수 의 값으로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="59635090b7d9f004e81468e450e179ac9a50014c" translate="yes" xml:space="preserve">
          <source>For general information on environment variables, see the &lt;a href=&quot;cmake-language.7#cmake-language-environment-variables&quot;&gt;Environment Variables&lt;/a&gt; section in the cmake-language manual.</source>
          <target state="translated">환경 변수에 대한 일반적인 정보 는 cmake-language 매뉴얼 의 &lt;a href=&quot;cmake-language.7#cmake-language-environment-variables&quot;&gt;환경 변수&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="77a62a6cb69d1b31d8f5c2707ac53e3b612b6f83" translate="yes" xml:space="preserve">
          <source>For general information on variables, see the &lt;a href=&quot;cmake-language.7#cmake-language-variables&quot;&gt;Variables&lt;/a&gt; section in the cmake-language manual.</source>
          <target state="translated">변수에 대한 일반적인 정보 는 cmake-language 매뉴얼 의 &lt;a href=&quot;cmake-language.7#cmake-language-variables&quot;&gt;변수&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8fa8b0c2df4aae1edbfb2e3a70f107cf8c85b53b" translate="yes" xml:space="preserve">
          <source>For graphical user interfaces that may be used in place of &lt;strong&gt;cmake&lt;/strong&gt;, see &lt;a href=&quot;ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt;&lt;code&gt;ccmake&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt;&lt;code&gt;cmake-gui&lt;/code&gt;&lt;/a&gt;. For command-line interfaces to the CMake testing and packaging facilities, see &lt;a href=&quot;ctest.1#manual:ctest(1)&quot; id=&quot;index-0-manual:ctest(1)&quot;&gt;&lt;code&gt;ctest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cpack.1#manual:cpack(1)&quot; id=&quot;index-0-manual:cpack(1)&quot;&gt;&lt;code&gt;cpack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;cmake&lt;/strong&gt; 대신 사용할 수있는 그래픽 사용자 인터페이스는 &lt;a href=&quot;ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt; &lt;code&gt;ccmake&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt; &lt;code&gt;cmake-gui&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 . CMake에 대한 명령 줄 인터페이스 테스트 시설을 포장은 다음을 참조 &lt;a href=&quot;ctest.1#manual:ctest(1)&quot; id=&quot;index-0-manual:ctest(1)&quot;&gt; &lt;code&gt;ctest&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;cpack.1#manual:cpack(1)&quot; id=&quot;index-0-manual:cpack(1)&quot;&gt; &lt;code&gt;cpack&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a70a43c212c2ea7cdf488f78b426f94eaaebbcdc" translate="yes" xml:space="preserve">
          <source>For help and discussion about using CMake, a mailing list is provided at &lt;a href=&quot;mailto:cmake%40cmake.org&quot;&gt;cmake@cmake.org&lt;/a&gt;. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at &lt;a href=&quot;https://cmake.org&quot;&gt;https://cmake.org&lt;/a&gt; before posting questions to the list.</source>
          <target state="translated">CMake 사용에 대한 도움말 및 토론을 위해 &lt;a href=&quot;mailto:cmake%40cmake.org&quot;&gt;cmake@cmake.org에&lt;/a&gt; 메일 링리스트가 제공됩니다 . 이 목록은 회원 만 게시 할 수 있지만 CMake 웹 페이지에 등록 할 수 있습니다. 목록에 질문을 게시하기 전에 먼저 &lt;a href=&quot;https://cmake.org&quot;&gt;https://cmake.org&lt;/a&gt; 에서 전체 설명서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="30b13679b6d414b7a601ab732567a56b75ac2b8f" translate="yes" xml:space="preserve">
          <source>For historical reasons in CMake 3.12 and below the &lt;a href=&quot;../command/option#command:option&quot; id=&quot;index-3-command:option&quot;&gt;&lt;code&gt;option()&lt;/code&gt;&lt;/a&gt; command &lt;em&gt;removes&lt;/em&gt; a normal (non-cached) variable of the same name when:</source>
          <target state="translated">CMake 3.12 이하의 역사적인 이유로 &lt;a href=&quot;../command/option#command:option&quot; id=&quot;index-3-command:option&quot;&gt; &lt;code&gt;option()&lt;/code&gt; &lt;/a&gt; 명령 &lt;em&gt;은&lt;/em&gt; 다음과 같은 경우 같은 이름의 일반 (캐시되지 않은) 변수를 &lt;em&gt;제거&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="3648c01748143e64ee90f636edc29837829c53bc" translate="yes" xml:space="preserve">
          <source>For internal implementation, it is a generally accepted convention that variables starting with underscore are for temporary use only.</source>
          <target state="translated">내부 구현의 경우 밑줄로 시작하는 변수가 임시로 사용되는 것이 일반적으로 허용되는 규칙입니다.</target>
        </trans-unit>
        <trans-unit id="8cc88fb32e784c998138115cd827db27a2d148b5" translate="yes" xml:space="preserve">
          <source>For linking with OpenMP code written in &lt;code&gt;&amp;lt;lang&amp;gt;&lt;/code&gt;, the following variables are provided:</source>
          <target state="translated">&lt;code&gt;&amp;lt;lang&amp;gt;&lt;/code&gt; 로 작성된 OpenMP 코드와 연결하기 위해 다음 변수가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="85fd7ba66cf9c894b99179491c84c6a0401d4f64" translate="yes" xml:space="preserve">
          <source>For logging contexts to work effectively, projects should generally &lt;code&gt;APPEND&lt;/code&gt; and &lt;code&gt;POP_BACK&lt;/code&gt; an item to the current value of &lt;code&gt;CMAKE_MESSAGE_CONTEXT&lt;/code&gt; rather than replace it. Projects should not assume the message context at the top of the source tree is empty, as there are scenarios where the context might have already been set (e.g. hierarchical projects).</source>
          <target state="translated">로깅 컨텍스트가 효과적으로 작동하려면 프로젝트는 일반적으로 항목을 &lt;code&gt;CMAKE_MESSAGE_CONTEXT&lt;/code&gt; 대신 CMAKE_MESSAGE_CONTEXT 의 현재 값에 항목을 &lt;code&gt;APPEND&lt;/code&gt; 및 &lt;code&gt;POP_BACK&lt;/code&gt; 해야 합니다. 컨텍스트가 이미 설정되었을 수있는 시나리오 (예 : 계층 적 프로젝트)가 있기 때문에 프로젝트는 소스 트리 상단의 메시지 컨텍스트가 비어 있다고 가정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="033af3c69a8f5693ceb361e6205a0030515bcef8" translate="yes" xml:space="preserve">
          <source>For macOS see also the &lt;a href=&quot;framework_version#prop_tgt:FRAMEWORK_VERSION&quot; id=&quot;index-0-prop_tgt:FRAMEWORK_VERSION&quot;&gt;&lt;code&gt;FRAMEWORK_VERSION&lt;/code&gt;&lt;/a&gt; target property.</source>
          <target state="translated">macOS의 경우 &lt;a href=&quot;framework_version#prop_tgt:FRAMEWORK_VERSION&quot; id=&quot;index-0-prop_tgt:FRAMEWORK_VERSION&quot;&gt; &lt;code&gt;FRAMEWORK_VERSION&lt;/code&gt; &lt;/a&gt; 대상 속성 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8e4fe346304a8b05240e123ec2dab026db12558" translate="yes" xml:space="preserve">
          <source>For macOS see also the &lt;code&gt;FRAMEWORK_MULTI_CONFIG_POSTFIX_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; target property.</source>
          <target state="translated">macOS의 경우 &lt;code&gt;FRAMEWORK_MULTI_CONFIG_POSTFIX_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; 대상 속성 도 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="febbb09d0c5d5ff78ec1206167a25694484b7029" translate="yes" xml:space="preserve">
          <source>For macOS systems it will produce following directory structure:</source>
          <target state="translated">macOS 시스템의 경우 다음 디렉토리 구조가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="5cc9cbe1de8e1ffd0a5adb4fb835e0760b03bce2" translate="yes" xml:space="preserve">
          <source>For more complicated cases set:</source>
          <target state="translated">더 복잡한 경우 설정 :</target>
        </trans-unit>
        <trans-unit id="ff837a8f0f4acaa0fef58d3f4c8913375ffc9b76" translate="yes" xml:space="preserve">
          <source>For more information on CMake at large, &lt;a href=&quot;#see-also&quot;&gt;see also&lt;/a&gt; the links at the end of this manual.</source>
          <target state="translated">CMake에 대한 자세한 내용 은이 설명서 끝에있는 링크 &lt;a href=&quot;#see-also&quot;&gt;도 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6dd5c92512b8cc02cd37d82b96cdc2540b943c64" translate="yes" xml:space="preserve">
          <source>For more information on regular expressions see also the &lt;a href=&quot;string#command:string&quot; id=&quot;index-1-command:string&quot;&gt;&lt;code&gt;string()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">정규식에 대한 자세한 내용은 &lt;a href=&quot;string#command:string&quot; id=&quot;index-1-command:string&quot;&gt; &lt;code&gt;string()&lt;/code&gt; &lt;/a&gt; 명령 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fed5ee03b71d61f133bc54b5748a2efd9bfa3d52" translate="yes" xml:space="preserve">
          <source>For most common scenarios, population means making content available to the main build according to previously declared details for that dependency. There are two main patterns for populating content, one based on calling &lt;a href=&quot;#command:fetchcontent_getproperties&quot; id=&quot;index-0-command:fetchcontent_getproperties&quot;&gt;&lt;code&gt;FetchContent_GetProperties()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#command:fetchcontent_populate&quot; id=&quot;index-0-command:fetchcontent_populate&quot;&gt;&lt;code&gt;FetchContent_Populate()&lt;/code&gt;&lt;/a&gt; for more precise control and the other on calling &lt;a href=&quot;#command:fetchcontent_makeavailable&quot; id=&quot;index-0-command:fetchcontent_makeavailable&quot;&gt;&lt;code&gt;FetchContent_MakeAvailable()&lt;/code&gt;&lt;/a&gt; for a simpler, more automated approach. The former generally follows this canonical pattern:</source>
          <target state="translated">대부분의 일반적인 시나리오에서 채우기는 해당 종속성에 대해 이전에 선언 된 세부 사항에 따라 기본 빌드에서 컨텐츠를 사용할 수있게하는 것을 의미합니다. 보다 정확한 제어를 위해 &lt;a href=&quot;#command:fetchcontent_getproperties&quot; id=&quot;index-0-command:fetchcontent_getproperties&quot;&gt; &lt;code&gt;FetchContent_GetProperties()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#command:fetchcontent_populate&quot; id=&quot;index-0-command:fetchcontent_populate&quot;&gt; &lt;code&gt;FetchContent_Populate()&lt;/code&gt; &lt;/a&gt; 를 호출 하고보다 간단하고 자동화 된 접근을 위해 &lt;a href=&quot;#command:fetchcontent_makeavailable&quot; id=&quot;index-0-command:fetchcontent_makeavailable&quot;&gt; &lt;code&gt;FetchContent_MakeAvailable()&lt;/code&gt; &lt;/a&gt; 을 호출 하는 두 가지 주요 패턴이 있습니다 . 전자는 일반적으로이 정식 패턴을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="fddbecb40e9f77a14039c97da74a972de34fe197" translate="yes" xml:space="preserve">
          <source>For most common scenarios, population means making content available to the main build according to previously declared details for that dependency. There are two main patterns for populating content, one based on calling &lt;a href=&quot;#command:fetchcontent_getproperties&quot; id=&quot;index-0-command:fetchcontent_getproperties&quot;&gt;&lt;code&gt;FetchContent_GetProperties()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#command:fetchcontent_populate&quot; id=&quot;index-0-command:fetchcontent_populate&quot;&gt;&lt;code&gt;FetchContent_Populate()&lt;/code&gt;&lt;/a&gt; for more precise control and the other on calling &lt;a href=&quot;#command:fetchcontent_makeavailable&quot; id=&quot;index-1-command:fetchcontent_makeavailable&quot;&gt;&lt;code&gt;FetchContent_MakeAvailable()&lt;/code&gt;&lt;/a&gt; for a simpler, more automated approach. The former generally follows this canonical pattern:</source>
          <target state="translated">대부분의 일반적인 시나리오에서 채우기는 해당 종속성에 대해 이전에 선언 된 세부 정보에 따라 기본 빌드에서 콘텐츠를 사용할 수 있도록하는 것을 의미합니다. 콘텐츠를 채우는 데는 두 가지 주요 패턴이 있습니다. 하나 는보다 정확한 제어를 위해 &lt;a href=&quot;#command:fetchcontent_getproperties&quot; id=&quot;index-0-command:fetchcontent_getproperties&quot;&gt; &lt;code&gt;FetchContent_GetProperties()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#command:fetchcontent_populate&quot; id=&quot;index-0-command:fetchcontent_populate&quot;&gt; &lt;code&gt;FetchContent_Populate()&lt;/code&gt; &lt;/a&gt; 를 호출하고 다른 하나 는 더 간단하고 자동화 된 접근 방식을 위해 &lt;a href=&quot;#command:fetchcontent_makeavailable&quot; id=&quot;index-1-command:fetchcontent_makeavailable&quot;&gt; &lt;code&gt;FetchContent_MakeAvailable()&lt;/code&gt; &lt;/a&gt; 을 호출 하는 것입니다. 전자는 일반적으로 다음과 같은 표준 패턴을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="2f1f7aca650096db11b9ec300769c8dde5414efa" translate="yes" xml:space="preserve">
          <source>For most typical cases, populating the content can then be done with a single command like so:</source>
          <target state="translated">대부분의 경우 다음과 같은 단일 명령으로 컨텐츠를 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbbc3430a3088f3769fcc2d3221a8e9885ca2327" translate="yes" xml:space="preserve">
          <source>For multi-config generators, this module does not support configuration-specific files generated by &lt;code&gt;SWIG&lt;/code&gt;. All build configurations must result in the same generated source file.</source>
          <target state="translated">다중 구성 생성기의 경우이 모듈은 &lt;code&gt;SWIG&lt;/code&gt; 에서 생성 한 구성 특정 파일을 지원하지 않습니다 . 모든 빌드 구성은 생성 된 소스 파일이 동일해야합니다.</target>
        </trans-unit>
        <trans-unit id="2af7ea9d0e47185ffb0e4181fd6d86f364615e8e" translate="yes" xml:space="preserve">
          <source>For multi-configuration generators, choose configuration &lt;code&gt;&amp;lt;cfg&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">다중 구성 생성기의 경우 구성 &lt;code&gt;&amp;lt;cfg&amp;gt;&lt;/code&gt; 를 선택하십시오 .</target>
        </trans-unit>
        <trans-unit id="b329fdaee4d5454baedf0b08dcb53fe81090eb5b" translate="yes" xml:space="preserve">
          <source>For multi-configuration tools, choose configuration &lt;code&gt;&amp;lt;cfg&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">다중 구성 도구의 경우 구성 &lt;code&gt;&amp;lt;cfg&amp;gt;&lt;/code&gt; 를 선택하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ef43578913bcc2ce08ed0b3838b9dfbdfa0a69f" translate="yes" xml:space="preserve">
          <source>For native build systems supporting multiple configurations in the build tree (such as &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt; and &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt;), the value is a reference to a build-time variable specifying the name of the per-configuration output subdirectory. On &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; this evaluates to &lt;code&gt;.&lt;/code&gt; because there is only one configuration in a build tree. Example values:</source>
          <target state="translated">빌드 트리에서 여러 구성을 지원하는 기본 빌드 시스템 (예 : &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt; 및 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; )&lt;/a&gt; )을 경우 값은 구성 별 출력 서브 디렉토리의 이름을 지정하는 빌드 시간 변수에 대한 참조입니다. 에 &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;메이크 발생기&lt;/a&gt; 이 평가됩니다에 &lt;code&gt;.&lt;/code&gt; 빌드 트리에는 하나의 구성 만 있기 때문입니다. 예제 값 :</target>
        </trans-unit>
        <trans-unit id="e6e84df5fa39720ac15c9dec245c744dfaf7fc5c" translate="yes" xml:space="preserve">
          <source>For native build systems supporting multiple configurations in the build tree (such as &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt; and &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt;), the value is a reference to a build-time variable specifying the name of the per-configuration output subdirectory. On &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; this evaluates to &lt;code&gt;.&lt;/code&gt; because there is only one configuration in a build tree. Example values:</source>
          <target state="translated">빌드 트리에서 여러 구성을 지원하는 네이티브 빌드 시스템 (예 : &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt; 및 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; )의 경우 값은 구성 별 출력 하위 디렉터리의 이름을 지정하는 빌드 시간 변수에 대한 참조입니다. 에 &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;메이크 발생기&lt;/a&gt; 이 평가됩니다에 &lt;code&gt;.&lt;/code&gt; 빌드 트리에는 구성이 하나만 있기 때문입니다. 값 예 :</target>
        </trans-unit>
        <trans-unit id="6ac06faa7124e6f2124610f08619163494863f47" translate="yes" xml:space="preserve">
          <source>For native build systems supporting multiple configurations in the build tree (such as &lt;a href=&quot;../manual/cmake-generators.7#visual-studio-generators&quot;&gt;Visual Studio Generators&lt;/a&gt; and &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt;), the value is a reference to a build-time variable specifying the name of the per-configuration output subdirectory. On &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; this evaluates to &lt;code&gt;.&lt;/code&gt; because there is only one configuration in a build tree. Example values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc56a0bd1220c7e3c6cdeadb6bd6a7524484b68" translate="yes" xml:space="preserve">
          <source>For other path manipulation, handling only syntactic aspects, have a look at &lt;a href=&quot;cmake_path#command:cmake_path&quot; id=&quot;index-0-command:cmake_path&quot;&gt;&lt;code&gt;cmake_path()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0037e46ac6691644167e1d26c8296722e706e00" translate="yes" xml:space="preserve">
          <source>For paths that are already up to date, installation may print lines like:</source>
          <target state="translated">이미 최신 경로 인 경우 설치시 다음과 같은 줄이 인쇄 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="051e2750f7ac1ad5ce70dae74ecda52eb51cb857" translate="yes" xml:space="preserve">
          <source>For platforms with import libraries (e.g. Windows) see also &lt;a href=&quot;imported_implib#prop_tgt:IMPORTED_IMPLIB&quot; id=&quot;index-0-prop_tgt:IMPORTED_IMPLIB&quot;&gt;&lt;code&gt;IMPORTED_IMPLIB&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">가져 오기 라이브러리가있는 플랫폼 (예 : Windows)의 경우 &lt;a href=&quot;imported_implib#prop_tgt:IMPORTED_IMPLIB&quot; id=&quot;index-0-prop_tgt:IMPORTED_IMPLIB&quot;&gt; &lt;code&gt;IMPORTED_IMPLIB&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c605f53cdf25e751a269a97b29119e1fdedc84f6" translate="yes" xml:space="preserve">
          <source>For reasons including the above, CMake 3.20 and above prefer to not provide the &lt;a href=&quot;../module/writecompilerdetectionheader#module:WriteCompilerDetectionHeader&quot; id=&quot;index-2-module:WriteCompilerDetectionHeader&quot;&gt;&lt;code&gt;WriteCompilerDetectionHeader&lt;/code&gt;&lt;/a&gt; module. This policy provides compatibility for projects that have not been ported away from it. Projects using the module should be updated to stop using it. Alternatives include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0054cdd733ea229342c90899c423d44576bccc" translate="yes" xml:space="preserve">
          <source>For reference, the algorithm used to compute the relative path is the same as that used by C++ &lt;a href=&quot;https://en.cppreference.com/w/cpp/filesystem/path/lexically_normal&quot;&gt;std::filesystem::path::lexically_relative&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545dfbc900cc7c6245a51d8b61f6d169217fd243" translate="yes" xml:space="preserve">
          <source>For regular executables, static libraries and shared libraries, the &lt;code&gt;DESTINATION&lt;/code&gt; argument is not required. For these target types, when &lt;code&gt;DESTINATION&lt;/code&gt; is omitted, a default destination will be taken from the appropriate variable from &lt;a href=&quot;../module/gnuinstalldirs#module:GNUInstallDirs&quot; id=&quot;index-0-module:GNUInstallDirs&quot;&gt;&lt;code&gt;GNUInstallDirs&lt;/code&gt;&lt;/a&gt;, or set to a built-in default value if that variable is not defined. The same is true for the public and private headers associated with the installed targets through the &lt;a href=&quot;../prop_tgt/public_header#prop_tgt:PUBLIC_HEADER&quot; id=&quot;index-2-prop_tgt:PUBLIC_HEADER&quot;&gt;&lt;code&gt;PUBLIC_HEADER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../prop_tgt/private_header#prop_tgt:PRIVATE_HEADER&quot; id=&quot;index-1-prop_tgt:PRIVATE_HEADER&quot;&gt;&lt;code&gt;PRIVATE_HEADER&lt;/code&gt;&lt;/a&gt; target properties. A destination must always be provided for module libraries, Apple bundles and frameworks. A destination can be omitted for interface and object libraries, but they are handled differently (see the discussion of this topic toward the end of this section).</source>
          <target state="translated">일반 실행 파일, 정적 라이브러리 및 공유 라이브러리의 경우 &lt;code&gt;DESTINATION&lt;/code&gt; 인수가 필요하지 않습니다. 이러한 대상 유형의 경우 &lt;code&gt;DESTINATION&lt;/code&gt; 을 생략하면 &lt;a href=&quot;../module/gnuinstalldirs#module:GNUInstallDirs&quot; id=&quot;index-0-module:GNUInstallDirs&quot;&gt; &lt;code&gt;GNUInstallDirs&lt;/code&gt; &lt;/a&gt; 의 해당 변수에서 기본 대상을 가져 오거나 해당 변수가 정의되지 않은 경우 기본 제공 기본값으로 설정됩니다. 를 통해 설치된 대상과 관련된 공개 및 개인 헤더에 대해서도 마찬가지입니다.&lt;a href=&quot;../prop_tgt/public_header#prop_tgt:PUBLIC_HEADER&quot; id=&quot;index-2-prop_tgt:PUBLIC_HEADER&quot;&gt; &lt;code&gt;PUBLIC_HEADER&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;../prop_tgt/private_header#prop_tgt:PRIVATE_HEADER&quot; id=&quot;index-1-prop_tgt:PRIVATE_HEADER&quot;&gt; &lt;code&gt;PRIVATE_HEADER&lt;/code&gt; 를&lt;/a&gt;대상 속성. 모듈 라이브러리, Apple 번들 및 프레임 워크에는 항상 대상이 제공되어야합니다. 인터페이스 및 객체 라이브러리의 경우 대상을 생략 할 수 있지만 다르게 처리됩니다 (이 항목의 끝 부분에 대해서는이 항목에 대한 설명 참조).</target>
        </trans-unit>
        <trans-unit id="4c64d2d4d4eb8f609b0e2d37d8d5f1bffd65d8d5" translate="yes" xml:space="preserve">
          <source>For reproducible builds it is recommended to keep headers that are &lt;code&gt;moc&lt;/code&gt; compiled in one of the target &lt;a href=&quot;../command/target_include_directories#command:target_include_directories&quot; id=&quot;index-2-command:target_include_directories&quot;&gt;&lt;code&gt;include directories&lt;/code&gt;&lt;/a&gt; and set &lt;a href=&quot;#prop_tgt:AUTOMOC_PATH_PREFIX&quot; id=&quot;index-1-prop_tgt:AUTOMOC_PATH_PREFIX&quot;&gt;&lt;code&gt;AUTOMOC_PATH_PREFIX&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;ON&lt;/code&gt;. This ensures that:</source>
          <target state="translated">재현 가능한 빌드 의 경우 대상 &lt;a href=&quot;../command/target_include_directories#command:target_include_directories&quot; id=&quot;index-2-command:target_include_directories&quot;&gt; &lt;code&gt;include directories&lt;/code&gt; &lt;/a&gt; 중 하나에서 &lt;code&gt;moc&lt;/code&gt; 컴파일 된 헤더를 유지 하고 &lt;a href=&quot;#prop_tgt:AUTOMOC_PATH_PREFIX&quot; id=&quot;index-1-prop_tgt:AUTOMOC_PATH_PREFIX&quot;&gt; &lt;code&gt;AUTOMOC_PATH_PREFIX&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;ON&lt;/code&gt; 으로 설정 하는 것이 좋습니다 . 이는 다음을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="ba6ee0e9867b83cdb5617412480047dbebdd54c9" translate="yes" xml:space="preserve">
          <source>For running MPI programs, the module sets the following variables</source>
          <target state="translated">MPI 프로그램을 실행하기 위해 모듈은 다음 변수를 설정합니다</target>
        </trans-unit>
        <trans-unit id="767e6255ec72fd9fd58ca68f24994d8b58f39aad" translate="yes" xml:space="preserve">
          <source>For shared libraries &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-0-prop_tgt:VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;SOVERSION&lt;/code&gt; can be used to specify the build version and API version respectively. When building or installing appropriate symlinks are created if the platform supports symlinks and the linker supports so-names. If only one of both is specified the missing is assumed to have the same version number. &lt;code&gt;SOVERSION&lt;/code&gt; is ignored if &lt;a href=&quot;no_soname#prop_tgt:NO_SONAME&quot; id=&quot;index-0-prop_tgt:NO_SONAME&quot;&gt;&lt;code&gt;NO_SONAME&lt;/code&gt;&lt;/a&gt; property is set.</source>
          <target state="translated">공유 라이브러리의 경우 &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-0-prop_tgt:VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;SOVERSION&lt;/code&gt; 을 사용하여 빌드 버전 및 API 버전을 각각 지정할 수 있습니다. 플랫폼에서 심볼릭 링크를 지원하고 링커에서 해당 이름을 지원하는 경우 적절한 심볼릭 링크를 작성하거나 설치할 때 작성됩니다. 둘 중 하나만 지정하면 누락 된 버전 번호가 동일한 것으로 간주됩니다. &lt;code&gt;SOVERSION&lt;/code&gt; 는 경우 무시됩니다 &lt;a href=&quot;no_soname#prop_tgt:NO_SONAME&quot; id=&quot;index-0-prop_tgt:NO_SONAME&quot;&gt; &lt;code&gt;NO_SONAME&lt;/code&gt; 의&lt;/a&gt; 속성이 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3cfc0ad2eea87c2b5af6a274a565b772d49b9927" translate="yes" xml:space="preserve">
          <source>For shared libraries &lt;code&gt;VERSION&lt;/code&gt; and &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-0-prop_tgt:SOVERSION&quot;&gt;&lt;code&gt;SOVERSION&lt;/code&gt;&lt;/a&gt; can be used to specify the build version and API version respectively. When building or installing appropriate symlinks are created if the platform supports symlinks and the linker supports so-names. If only one of both is specified the missing is assumed to have the same version number. For executables &lt;code&gt;VERSION&lt;/code&gt; can be used to specify the build version. When building or installing appropriate symlinks are created if the platform supports symlinks.</source>
          <target state="translated">공유 라이브러리의 경우 &lt;code&gt;VERSION&lt;/code&gt; 및 &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-0-prop_tgt:SOVERSION&quot;&gt; &lt;code&gt;SOVERSION&lt;/code&gt; &lt;/a&gt; 을 사용하여 빌드 버전 및 API 버전을 각각 지정할 수 있습니다. 플랫폼에서 심볼릭 링크를 지원하고 링커에서 해당 이름을 지원하는 경우 적절한 심볼릭 링크를 작성하거나 설치할 때 작성됩니다. 둘 중 하나만 지정하면 누락 된 버전 번호가 동일한 것으로 간주됩니다. 실행 파일의 경우 &lt;code&gt;VERSION&lt;/code&gt; 을 사용하여 빌드 버전을 지정할 수 있습니다. 플랫폼에서 심볼릭 링크를 지원하는 경우 적절한 심볼릭 링크를 만들거나 설치할 때 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="55f10b6c61d9c505d630fae54466aa9813f0ae96" translate="yes" xml:space="preserve">
          <source>For shared libraries and executables on Mach-O systems (e.g. macOS, iOS), the &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-1-prop_tgt:SOVERSION&quot;&gt;&lt;code&gt;SOVERSION&lt;/code&gt;&lt;/a&gt; property correspond to &lt;em&gt;compatibility version&lt;/em&gt; and &lt;code&gt;VERSION&lt;/code&gt; to &lt;em&gt;current version&lt;/em&gt;. See the &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt;&lt;code&gt;FRAMEWORK&lt;/code&gt;&lt;/a&gt; target property for an example. Versions of Mach-O binaries may be checked with the &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; command.</source>
          <target state="translated">Mach-O 시스템 (예 : macOS, iOS)에서 공유 라이브러리 및 실행 파일의 경우 &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-1-prop_tgt:SOVERSION&quot;&gt; &lt;code&gt;SOVERSION&lt;/code&gt; &lt;/a&gt; 속성은 &lt;em&gt;호환 버전&lt;/em&gt; 및 &lt;code&gt;VERSION&lt;/code&gt; to &lt;em&gt;current version에 해당&lt;/em&gt; 합니다. 예제 는 &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt; &lt;code&gt;FRAMEWORK&lt;/code&gt; &lt;/a&gt; 대상 속성을 참조하십시오 . Mach-O 바이너리의 버전은 &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; 명령 으로 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="93f3eec76c5f33b06d176829b3b85ad1224ee76b" translate="yes" xml:space="preserve">
          <source>For shared libraries and executables on Mach-O systems (e.g. macOS, iOS), the &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-1-prop_tgt:SOVERSION&quot;&gt;&lt;code&gt;SOVERSION&lt;/code&gt;&lt;/a&gt; property corresponds to the &lt;em&gt;compatibility version&lt;/em&gt; and &lt;code&gt;VERSION&lt;/code&gt; corresponds to the &lt;em&gt;current version&lt;/em&gt; (unless Mach-O specific overrides are provided, as discussed below). See the &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt;&lt;code&gt;FRAMEWORK&lt;/code&gt;&lt;/a&gt; target property for an example.</source>
          <target state="translated">Mach-O 시스템 (예 : macOS, iOS)의 공유 라이브러리 및 실행 파일의 경우 &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-1-prop_tgt:SOVERSION&quot;&gt; &lt;code&gt;SOVERSION&lt;/code&gt; &lt;/a&gt; 속성은 &lt;em&gt;호환성 버전에&lt;/em&gt; 해당 하고 &lt;code&gt;VERSION&lt;/code&gt; 은 &lt;em&gt;현재 버전에&lt;/em&gt; 해당합니다 (아래에서 설명하는 것처럼 Mach-O 특정 재정의가 제공되지 않는 한). 예제 는 &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt; &lt;code&gt;FRAMEWORK&lt;/code&gt; &lt;/a&gt; 대상 속성을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5faaf508b0271d5ec050630c21b95dca5d836f91" translate="yes" xml:space="preserve">
          <source>For shared libraries and executables on Mach-O systems (e.g. macOS, iOS), the &lt;code&gt;SOVERSION&lt;/code&gt; property corresponds to &lt;em&gt;compatibility version&lt;/em&gt; and &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-2-prop_tgt:VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; to &lt;em&gt;current version&lt;/em&gt;. See the &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt;&lt;code&gt;FRAMEWORK&lt;/code&gt;&lt;/a&gt; target property for an example. Versions of Mach-O binaries may be checked with the &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; command.</source>
          <target state="translated">Mach-O 시스템 (예 : macOS, iOS)에서 공유 라이브러리 및 실행 파일의 경우 &lt;code&gt;SOVERSION&lt;/code&gt; 속성은 &lt;em&gt;호환 버전&lt;/em&gt; 및 &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-2-prop_tgt:VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt; to &lt;em&gt;current version에 해당&lt;/em&gt; 합니다. 예제 는 &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt; &lt;code&gt;FRAMEWORK&lt;/code&gt; &lt;/a&gt; 대상 속성을 참조하십시오 . Mach-O 바이너리의 버전은 &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; 명령 으로 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="99b0dabf7abec48dfa2741cf39fda2a7b4b70853" translate="yes" xml:space="preserve">
          <source>For shared libraries and executables on Mach-O systems (e.g. macOS, iOS), the &lt;code&gt;SOVERSION&lt;/code&gt; property corresponds to the &lt;em&gt;compatibility version&lt;/em&gt; and &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-2-prop_tgt:VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; corresponds to the &lt;em&gt;current version&lt;/em&gt; (unless Mach-O specific overrides are provided, as discussed below). See the &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt;&lt;code&gt;FRAMEWORK&lt;/code&gt;&lt;/a&gt; target property for an example.</source>
          <target state="translated">Mach-O 시스템 (예 : macOS, iOS)의 공유 라이브러리 및 실행 파일의 경우 &lt;code&gt;SOVERSION&lt;/code&gt; 속성은 &lt;em&gt;호환성 버전에&lt;/em&gt; 해당 하고 &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-2-prop_tgt:VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt; 은 &lt;em&gt;현재 버전에&lt;/em&gt; 해당합니다 (아래에서 설명하는 것처럼 Mach-O 특정 재정의가 제공되지 않는 한). 예제 는 &lt;a href=&quot;framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-0-prop_tgt:FRAMEWORK&quot;&gt; &lt;code&gt;FRAMEWORK&lt;/code&gt; &lt;/a&gt; 대상 속성을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="39f86af2183ff1a86606ed87997962340f5645fd" translate="yes" xml:space="preserve">
          <source>For shared libraries and executables on Windows the &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-1-prop_tgt:VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; attribute is parsed to extract a &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; version number. These numbers are used as the image version of the binary.</source>
          <target state="translated">Windows에서 공유 라이브러리 및 실행 파일의 경우 &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-1-prop_tgt:VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt; 속성이 구문 분석되어 &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; 버전 번호 를 추출합니다 . 이 숫자는 바이너리의 이미지 버전으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="328862461510f85eaf0d78fb52e7e6cbdfa44083" translate="yes" xml:space="preserve">
          <source>For shared libraries and executables on Windows the &lt;code&gt;VERSION&lt;/code&gt; attribute is parsed to extract a &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; version number. These numbers are used as the image version of the binary.</source>
          <target state="translated">Windows에서 공유 라이브러리 및 실행 파일의 경우 &lt;code&gt;VERSION&lt;/code&gt; 속성이 구문 분석되어 &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; 버전 번호 를 추출합니다 . 이 숫자는 바이너리의 이미지 버전으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f80674b352136fc1aec79ec7932efb00a3401b2b" translate="yes" xml:space="preserve">
          <source>For shared libraries on Mach-O systems (e.g. macOS, iOS) the &lt;a href=&quot;macho_compatibility_version#prop_tgt:MACHO_COMPATIBILITY_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_COMPATIBILITY_VERSION&quot;&gt;&lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt;&lt;/a&gt; property corresponds to the &lt;em&gt;compatibility version&lt;/em&gt; and &lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt; corresponds to the &lt;em&gt;current version&lt;/em&gt;. These are both embedded in the shared library binary and can be checked with the &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; command.</source>
          <target state="translated">Mach-O 시스템 (예 : macOS, iOS)의 공유 라이브러리의 경우 &lt;a href=&quot;macho_compatibility_version#prop_tgt:MACHO_COMPATIBILITY_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_COMPATIBILITY_VERSION&quot;&gt; &lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt; &lt;/a&gt; 속성은 &lt;em&gt;호환성 버전에&lt;/em&gt; 해당 하고 &lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt; 은 &lt;em&gt;현재 버전에&lt;/em&gt; 해당합니다 . 이들은 모두 공유 라이브러리 바이너리에 포함되어 있으며 &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; 명령 으로 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6b5039093597af0fe418848e9012b06137d1a526" translate="yes" xml:space="preserve">
          <source>For shared libraries on Mach-O systems (e.g. macOS, iOS) the &lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt; property corresponds to the &lt;em&gt;compatibility version&lt;/em&gt; and &lt;a href=&quot;macho_current_version#prop_tgt:MACHO_CURRENT_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_CURRENT_VERSION&quot;&gt;&lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt;&lt;/a&gt; corresponds to the &lt;em&gt;current version&lt;/em&gt;. These are both embedded in the shared library binary and can be checked with the &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; command.</source>
          <target state="translated">Mach-O 시스템 (예 : macOS, iOS)의 공유 라이브러리의 경우 &lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt; 속성은 &lt;em&gt;호환성 버전에&lt;/em&gt; 해당 하고 &lt;a href=&quot;macho_current_version#prop_tgt:MACHO_CURRENT_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_CURRENT_VERSION&quot;&gt; &lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt; &lt;/a&gt; 은 &lt;em&gt;현재 버전에&lt;/em&gt; 해당합니다 . 이들은 모두 공유 라이브러리 바이너리에 포함되어 있으며 &lt;code&gt;otool -L &amp;lt;binary&amp;gt;&lt;/code&gt; 명령 으로 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e7e465311039445399c205d2137aa356efb502c" translate="yes" xml:space="preserve">
          <source>For shared libraries, the &lt;a href=&quot;macho_compatibility_version#prop_tgt:MACHO_COMPATIBILITY_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_COMPATIBILITY_VERSION&quot;&gt;&lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;macho_current_version#prop_tgt:MACHO_CURRENT_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_CURRENT_VERSION&quot;&gt;&lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt;&lt;/a&gt; properties can be used to override the &lt;em&gt;compatibility version&lt;/em&gt; and &lt;em&gt;current version&lt;/em&gt; respectively. Note that &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-2-prop_tgt:SOVERSION&quot;&gt;&lt;code&gt;SOVERSION&lt;/code&gt;&lt;/a&gt; will still be used to form the &lt;code&gt;install_name&lt;/code&gt; and both &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-3-prop_tgt:SOVERSION&quot;&gt;&lt;code&gt;SOVERSION&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;VERSION&lt;/code&gt; may also affect the file and symlink names.</source>
          <target state="translated">공유 라이브러리의 경우 &lt;a href=&quot;macho_compatibility_version#prop_tgt:MACHO_COMPATIBILITY_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_COMPATIBILITY_VERSION&quot;&gt; &lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;macho_current_version#prop_tgt:MACHO_CURRENT_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_CURRENT_VERSION&quot;&gt; &lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 &lt;em&gt;호환성 버전&lt;/em&gt; 과 &lt;em&gt;현재 버전을&lt;/em&gt; 각각 재정의 할 수 있습니다 . 참고 &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-2-prop_tgt:SOVERSION&quot;&gt; &lt;code&gt;SOVERSION&lt;/code&gt; 가&lt;/a&gt; 여전히 형성하는 데 사용됩니다 &lt;code&gt;install_name&lt;/code&gt; 모두 &lt;a href=&quot;soversion#prop_tgt:SOVERSION&quot; id=&quot;index-3-prop_tgt:SOVERSION&quot;&gt; &lt;code&gt;SOVERSION&lt;/code&gt; 을&lt;/a&gt; 하고 &lt;code&gt;VERSION&lt;/code&gt; 은 또한 파일과 심볼릭 링크 이름에 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9359c86180bc6c42c0b39f02b97c71880f93e083" translate="yes" xml:space="preserve">
          <source>For shared libraries, the &lt;a href=&quot;macho_compatibility_version#prop_tgt:MACHO_COMPATIBILITY_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_COMPATIBILITY_VERSION&quot;&gt;&lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;macho_current_version#prop_tgt:MACHO_CURRENT_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_CURRENT_VERSION&quot;&gt;&lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt;&lt;/a&gt; properties can be used to override the &lt;em&gt;compatibility version&lt;/em&gt; and &lt;em&gt;current version&lt;/em&gt; respectively. Note that &lt;code&gt;SOVERSION&lt;/code&gt; will still be used to form the &lt;code&gt;install_name&lt;/code&gt; and both &lt;code&gt;SOVERSION&lt;/code&gt; and &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-3-prop_tgt:VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; may also affect the file and symlink names.</source>
          <target state="translated">공유 라이브러리의 경우 &lt;a href=&quot;macho_compatibility_version#prop_tgt:MACHO_COMPATIBILITY_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_COMPATIBILITY_VERSION&quot;&gt; &lt;code&gt;MACHO_COMPATIBILITY_VERSION&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;macho_current_version#prop_tgt:MACHO_CURRENT_VERSION&quot; id=&quot;index-0-prop_tgt:MACHO_CURRENT_VERSION&quot;&gt; &lt;code&gt;MACHO_CURRENT_VERSION&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 &lt;em&gt;호환성 버전&lt;/em&gt; 과 &lt;em&gt;현재 버전을&lt;/em&gt; 각각 재정의 할 수 있습니다 . 참고 &lt;code&gt;SOVERSION&lt;/code&gt; 가 여전히 형성하는 데 사용됩니다 &lt;code&gt;install_name&lt;/code&gt; 모두 &lt;code&gt;SOVERSION&lt;/code&gt; 을 하고 &lt;a href=&quot;version#prop_tgt:VERSION&quot; id=&quot;index-3-prop_tgt:VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; 은&lt;/a&gt; 또한 파일과 심볼릭 링크 이름에 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4bb1f08bf3419296283deb0715ffabf2b64bd06" translate="yes" xml:space="preserve">
          <source>For some compilers, &lt;code&gt;NAG&lt;/code&gt;, &lt;code&gt;PGI&lt;/code&gt; and &lt;code&gt;Solaris Studio&lt;/code&gt;, setting this to &lt;code&gt;OFF&lt;/code&gt; will have no effect.</source>
          <target state="translated">일부 컴파일러, &lt;code&gt;NAG&lt;/code&gt; , &lt;code&gt;PGI&lt;/code&gt; 및 &lt;code&gt;Solaris Studio&lt;/code&gt; 의 경우이 값을 &lt;code&gt;OFF&lt;/code&gt; 로 설정해 도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c341443f46acf36ac4788b273afdf6dea6164f26" translate="yes" xml:space="preserve">
          <source>For some compilers, it may be necessary to add a header search path to find the relevant OpenMP headers. This location may be language-specific. Where this is needed, the module may attempt to find the location, but it can be provided directly by setting the &lt;code&gt;OpenMP_&amp;lt;lang&amp;gt;_INCLUDE_DIR&lt;/code&gt; cache variable. Note that this variable is an _input_ control to the module. Project code should use the &lt;code&gt;OpenMP_&amp;lt;lang&amp;gt;_INCLUDE_DIRS&lt;/code&gt; _output_ variable if it needs to know what include directories are needed.</source>
          <target state="translated">일부 컴파일러의 경우 관련 OpenMP 헤더를 찾기 위해 헤더 검색 경로를 추가해야 할 수 있습니다. 이 위치는 언어별로 다를 수 있습니다. 이것이 필요한 경우 모듈은 위치 찾기를 시도 할 수 있지만 &lt;code&gt;OpenMP_&amp;lt;lang&amp;gt;_INCLUDE_DIR&lt;/code&gt; 캐시 변수 를 설정하여 직접 제공 할 수 있습니다 . 이 변수는 모듈에 대한 _input_ 컨트롤입니다. 프로젝트 코드 는 필요한 포함 디렉토리를 알아야하는 경우 &lt;code&gt;OpenMP_&amp;lt;lang&amp;gt;_INCLUDE_DIRS&lt;/code&gt; _output_ 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e68926adaf5c0ebb082fc2a5580dcb7d3f80355" translate="yes" xml:space="preserve">
          <source>For targets created with the &lt;code&gt;IMPORTED&lt;/code&gt; option to &lt;a href=&quot;../command/add_executable#command:add_executable&quot; id=&quot;index-1-command:add_executable&quot;&gt;&lt;code&gt;add_executable()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../command/add_library#command:add_library&quot; id=&quot;index-1-command:add_library&quot;&gt;&lt;code&gt;add_library()&lt;/code&gt;&lt;/a&gt; but without the additional option &lt;code&gt;GLOBAL&lt;/code&gt; this is False, too. However, setting this property for such a locally &lt;code&gt;IMPORTED&lt;/code&gt; target to True promotes that target to global scope. This promotion can only be done in the same directory where that &lt;code&gt;IMPORTED&lt;/code&gt; target was created in the first place.</source>
          <target state="translated">로 만든 대상에 대해 &lt;code&gt;IMPORTED&lt;/code&gt; 에 옵션 &lt;a href=&quot;../command/add_executable#command:add_executable&quot; id=&quot;index-1-command:add_executable&quot;&gt; &lt;code&gt;add_executable()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../command/add_library#command:add_library&quot; id=&quot;index-1-command:add_library&quot;&gt; &lt;code&gt;add_library()&lt;/code&gt; &lt;/a&gt; 하지만 추가 옵션을 사용하지 않고 &lt;code&gt;GLOBAL&lt;/code&gt; 이 너무 False입니다. 그러나 이러한 로컬 &lt;code&gt;IMPORTED&lt;/code&gt; 대상에 대해이 특성을 설정하면 해당 대상이 글로벌 범위로 승격됩니다. 이 승격은 &lt;code&gt;IMPORTED&lt;/code&gt; 대상이 처음 작성된 동일한 디렉토리에서만 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fa795073563b4232a0bf4daedb66f4923acc2539" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt;, source dependencies are now, for a selection of compilers, generated by the compiler itself. By defining this variable with value &lt;code&gt;FALSE&lt;/code&gt;, you can restore the legacy behavior (i.e. using &lt;code&gt;CMake&lt;/code&gt; for dependencies discovery).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3a6449861a9be8a912e547b15232664f87fc46" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt;&lt;code&gt;Green Hills MULTI&lt;/code&gt;&lt;/a&gt; generator the GHS toolset and target system customization cache variables are also propagated into the test project.</source>
          <target state="translated">를 들어 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt; &lt;code&gt;Green Hills MULTI&lt;/code&gt; &lt;/a&gt; 발생기 GHS 도구 세트 및 대상 시스템의 사용자 정의 캐시 변수 또한 테스트 프로젝트에 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="fb1916b90ee3cf6a9dda884f2fae44030026bcad" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Visual%20Studio%2015%202017.html#generator:Visual%20Studio%2015%202017&quot; id=&quot;index-0-generator:Visual Studio 15 2017&quot;&gt;&lt;code&gt;Visual Studio 15 2017&lt;/code&gt;&lt;/a&gt; generator (and above) this specifies the absolute path to the VS installation directory of the selected VS instance.</source>
          <target state="translated">용 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Visual%20Studio%2015%202017.html#generator:Visual%20Studio%2015%202017&quot; id=&quot;index-0-generator:Visual Studio 15 2017&quot;&gt; &lt;code&gt;Visual Studio 15 2017&lt;/code&gt; &lt;/a&gt; (위) 발생이 지정 선택된 VS 인스턴스 VS 설치 디렉토리 절대 경로.</target>
        </trans-unit>
        <trans-unit id="71400d2ec1947c44804bc444a8239ae798a612e8" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt;&lt;code&gt;Green Hills MULTI&lt;/code&gt;&lt;/a&gt; generator the GHS toolset and target system customization cache variables are also propagated into the test project.</source>
          <target state="translated">를 들어 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI&quot; id=&quot;index-0-generator:Green Hills MULTI&quot;&gt; &lt;code&gt;Green Hills MULTI&lt;/code&gt; &lt;/a&gt; 발생기 GHS 도구 세트 및 대상 시스템의 사용자 정의 캐시 변수 또한 테스트 프로젝트에 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="a870cd61884be68978b8e27c7ae05a3249b943e5" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Visual%20Studio%2015%202017.html#generator:Visual%20Studio%2015%202017&quot; id=&quot;index-0-generator:Visual Studio 15 2017&quot;&gt;&lt;code&gt;Visual Studio 15 2017&lt;/code&gt;&lt;/a&gt; generator (and above) this specifies the absolute path to the VS installation directory of the selected VS instance.</source>
          <target state="translated">용 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Visual%20Studio%2015%202017.html#generator:Visual%20Studio%2015%202017&quot; id=&quot;index-0-generator:Visual Studio 15 2017&quot;&gt; &lt;code&gt;Visual Studio 15 2017&lt;/code&gt; &lt;/a&gt; (위) 발생이 지정 선택된 VS 인스턴스 VS 설치 디렉토리 절대 경로.</target>
        </trans-unit>
        <trans-unit id="400f24ee51281162258f1ac8e4ce14f29f9eea06" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Visual%20Studio%2015%202017.html#generator:Visual%20Studio%2015%202017&quot; id=&quot;index-0-generator:Visual Studio 15 2017&quot;&gt;&lt;code&gt;Visual Studio 15 2017&lt;/code&gt;&lt;/a&gt; generator (and above) this specifies the absolute path to the VS installation directory of the selected VS instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f843b942c42be49e22cda82217cfb0446bfc40" translate="yes" xml:space="preserve">
          <source>For the sake of the example, also define a second hypothetical external project called &lt;em&gt;SecretSauce&lt;/em&gt;, which is downloaded from a web server. Two URLs are given to take advantage of a faster internal network if available, with a fallback to a slower external server. The project is a typical &lt;code&gt;Makefile&lt;/code&gt; project with no configure step, so some of the default commands are overridden. The build is only required to build the &lt;em&gt;sauce&lt;/em&gt; target:</source>
          <target state="translated">예제를 위해 &lt;em&gt;SecretSauce&lt;/em&gt; 라는 두 번째 가상 외부 프로젝트를 정의하십시오.이 프로젝트 는 웹 서버에서 다운로드됩니다. 사용 가능한 경우 더 빠른 내부 네트워크를 이용하기 위해 두 개의 URL이 제공되며 더 느린 외부 서버로 대체됩니다. 이 프로젝트는 구성 단계가없는 일반적인 &lt;code&gt;Makefile&lt;/code&gt; 프로젝트이므로 일부 기본 명령이 무시됩니다. 빌드는 &lt;em&gt;소스&lt;/em&gt; 대상 을 빌드하는 데만 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="13b0e1e9e646d410c2151bb5bb6e36368b844632" translate="yes" xml:space="preserve">
          <source>For these components the following variables are set:</source>
          <target state="translated">이러한 구성 요소의 경우 다음 변수가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="1ac8b90eff988efeca9a410ddb80d2331ccd48b6" translate="yes" xml:space="preserve">
          <source>For these reasons, CMake 3.3 and above prefer to drop the special case and link libraries by full path even when they are in implicit link directories. Policy &lt;code&gt;CMP0060&lt;/code&gt; provides compatibility for existing projects.</source>
          <target state="translated">이러한 이유로 CMake 3.3 이상은 암시 적 링크 디렉토리에있는 경우에도 특수 경로 및 링크 라이브러리를 전체 경로로 삭제하는 것을 선호합니다. 정책 &lt;code&gt;CMP0060&lt;/code&gt; 은 기존 프로젝트와의 호환성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c6249244bb06ee694e7432ff56742a8183360405" translate="yes" xml:space="preserve">
          <source>For this tutorial we will put the library into a subdirectory called &lt;code&gt;MathFunctions&lt;/code&gt;. This directory already contains a header file, &lt;code&gt;MathFunctions.h&lt;/code&gt;, and a source file &lt;code&gt;mysqrt.cxx&lt;/code&gt;. The source file has one function called &lt;code&gt;mysqrt&lt;/code&gt; that provides similar functionality to the compiler&amp;rsquo;s &lt;code&gt;sqrt&lt;/code&gt; function.</source>
          <target state="translated">이 튜토리얼에서는 라이브러리를 &lt;code&gt;MathFunctions&lt;/code&gt; 라는 하위 디렉토리에 넣습니다 . 이 디렉토리에는 이미 헤더 파일 인 &lt;code&gt;MathFunctions.h&lt;/code&gt; 및 소스 파일 &lt;code&gt;mysqrt.cxx&lt;/code&gt; 가 포함되어 있습니다. 소스 파일에는 컴파일러의 &lt;code&gt;sqrt&lt;/code&gt; 함수 와 유사한 기능을 제공하는 &lt;code&gt;mysqrt&lt;/code&gt; 라는 함수가 하나 있습니다.</target>
        </trans-unit>
        <trans-unit id="a067fdc1edf0d6c108e8792a6a210b4f62c3089b" translate="yes" xml:space="preserve">
          <source>For this tutorial we will put the library into a subdirectory called &lt;code&gt;MathFunctions&lt;/code&gt;. This directory already contains a header file, &lt;code&gt;MathFunctions.h&lt;/code&gt;, and a source file &lt;code&gt;mysqrt.cxx&lt;/code&gt;. The source file has one function called &lt;code&gt;mysqrt&lt;/code&gt; that provides similar functionality to the compiler's &lt;code&gt;sqrt&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648dfcf4ae1d183d2abb628bad0efb35437ad6fb" translate="yes" xml:space="preserve">
          <source>For unix style it uses the wx-config utility. You can select between debug/release, unicode/ansi, universal/non-universal, and static/shared in the QtDialog or ccmake interfaces by turning ON/OFF the following variables:</source>
          <target state="translated">유닉스 스타일의 경우 wx-config 유틸리티를 사용합니다. 다음 변수를 ON / OFF하여 QtDialog 또는 ccmake 인터페이스에서 디버그 / 릴리스, 유니 코드 / 안시, 범용 / 비 유니버설 및 정적 / 공유를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5a7ad843bca603e57c0f7eeab8001c5a277c77d" translate="yes" xml:space="preserve">
          <source>For users of Squish version 3.x the macro squish_v3_add_test() is provided:</source>
          <target state="translated">Squish 버전 3.x 사용자의 경우 매크로 squish_v3_add_test ()가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="cd8dc90610dc5c48e577295a29be63922ceed8ca" translate="yes" xml:space="preserve">
          <source>For users who wish to edit and control the module behavior, this module reads hints about search locations from the following variables:</source>
          <target state="translated">모듈 동작을 편집하고 제어하려는 사용자를 위해이 모듈은 다음 변수에서 검색 위치에 대한 힌트를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="ba7fd73a8c318b5eb7e6dbc302f8a8e627cf2d3c" translate="yes" xml:space="preserve">
          <source>For variables of this form, &lt;code&gt;Yy&lt;/code&gt; is the name of a component for the module. It should match exactly one of the valid component names that may be passed to the &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-2-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; command for the module. If a variable of this form is set to false, it means that the &lt;code&gt;Yy&lt;/code&gt; component of module &lt;code&gt;Xxx&lt;/code&gt; was not found or is not available. Variables of this form would typically be used for optional components so that the caller can check whether an optional component is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="12523cb7e535595f5c4cc21107ec42ac579cd9ff" translate="yes" xml:space="preserve">
          <source>Fortran default module output directory.</source>
          <target state="translated">포트란 기본 모듈 출력 디렉토리.</target>
        </trans-unit>
        <trans-unit id="6df950e3e084a45be30369286f7c0c5ba643f57a" translate="yes" xml:space="preserve">
          <source>Fortran flag for module output directory.</source>
          <target state="translated">모듈 출력 디렉토리의 포트란 플래그.</target>
        </trans-unit>
        <trans-unit id="61de5651712cb6a79f2f88a8b431614ae4a308a1" translate="yes" xml:space="preserve">
          <source>Fortran flag to enable module output.</source>
          <target state="translated">모듈 출력을 활성화하는 포트란 플래그.</target>
        </trans-unit>
        <trans-unit id="b5e8eb068cf2a2b7f6a2565b591f9a4d524e9aad" translate="yes" xml:space="preserve">
          <source>Fortran library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bfea38d884305c220dbabefce29c29726d49af" translate="yes" xml:space="preserve">
          <source>Fortran module output directory.</source>
          <target state="translated">포트란 모듈 출력 디렉토리.</target>
        </trans-unit>
        <trans-unit id="da210ac58c711722f8cc7169b996624bd19d9a78" translate="yes" xml:space="preserve">
          <source>Fortran/C Interface Detection</source>
          <target state="translated">포트란 / C 인터페이스 감지</target>
        </trans-unit>
        <trans-unit id="27000c96f63d1cb098325bcf0f31340c2bfe4e4a" translate="yes" xml:space="preserve">
          <source>FortranCInterface</source>
          <target state="translated">FortranCInterface</target>
        </trans-unit>
        <trans-unit id="6898c907fb44fd3477d5d1c6bfb9b617395b59fc" translate="yes" xml:space="preserve">
          <source>FortranCInterface is aware of possible &lt;code&gt;GLOBAL&lt;/code&gt; and &lt;code&gt;MODULE&lt;/code&gt; manglings for many Fortran compilers, but it also provides an interface to specify new possible manglings. Set the variables:</source>
          <target state="translated">FortranCInterface는 많은 포트란 컴파일러의 &lt;code&gt;GLOBAL&lt;/code&gt; 및 &lt;code&gt;MODULE&lt;/code&gt; mangling에 대해 알고 있지만 새로운 가능한 mangling을 지정할 수있는 인터페이스도 제공합니다. 변수를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="0be9397497748cad06faef6367cfb61987dc56d9" translate="yes" xml:space="preserve">
          <source>Fortran_FORMAT</source>
          <target state="translated">Fortran_FORMAT</target>
        </trans-unit>
        <trans-unit id="5ca53a3307dc3414246966e423026d04d13c2e90" translate="yes" xml:space="preserve">
          <source>Fortran_MODULE_DIRECTORY</source>
          <target state="translated">Fortran_MODULE_DIRECTORY</target>
        </trans-unit>
        <trans-unit id="7954dd409ea40d1dacdd54140746c21a1d5a3249" translate="yes" xml:space="preserve">
          <source>Fortran_PREPROCESS</source>
          <target state="translated">Fortran_PREPROCESS</target>
        </trans-unit>
        <trans-unit id="45d5400b3d0817a3c8b476449b602cac46f8434f" translate="yes" xml:space="preserve">
          <source>Found the Google Protocol Buffers library (libprotobuf &amp;amp; header files)</source>
          <target state="translated">Google 프로토콜 버퍼 라이브러리 (libprotobuf 및 헤더 파일)를 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="17c8a11f98c1d85f7ba1bbb43b743ea418b6ee1b" translate="yes" xml:space="preserve">
          <source>Found the Google Testing framework</source>
          <target state="translated">Google 테스팅 프레임 워크를 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="a56851b713f677cac1c48301f735600bfbe6c67e" translate="yes" xml:space="preserve">
          <source>Fourth version number component of the &lt;a href=&quot;project_version#variable:PROJECT_VERSION&quot; id=&quot;index-0-variable:PROJECT_VERSION&quot;&gt;&lt;code&gt;PROJECT_VERSION&lt;/code&gt;&lt;/a&gt; variable as set by the &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령 으로 설정된 &lt;a href=&quot;project_version#variable:PROJECT_VERSION&quot; id=&quot;index-0-variable:PROJECT_VERSION&quot;&gt; &lt;code&gt;PROJECT_VERSION&lt;/code&gt; &lt;/a&gt; 변수 의 네 번째 버전 번호 구성 요소입니다 .</target>
        </trans-unit>
        <trans-unit id="07b8478506a1b51fb3469cbf65dadd7aeac88e7c" translate="yes" xml:space="preserve">
          <source>Fourth version number component of the &lt;code&gt;&amp;lt;PROJECT-NAME&amp;gt;_VERSION&lt;/code&gt; variable as set by the &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령 으로 설정 한 &lt;code&gt;&amp;lt;PROJECT-NAME&amp;gt;_VERSION&lt;/code&gt; 변수 의 네 번째 버전 번호 구성 요소입니다 .</target>
        </trans-unit>
        <trans-unit id="a2b139f44097efdd548ba4a9e836db1e21cfc5fa" translate="yes" xml:space="preserve">
          <source>From Qt 5.15.0 on this variable is ignored as moc is able to output the correct dependencies.</source>
          <target state="translated">moc가 올바른 종속성을 출력 할 수 있으므로 Qt 5.15.0부터이 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="532383f50fbea1b6eb50f5e572c8ab64b2c3cec3" translate="yes" xml:space="preserve">
          <source>From the &lt;code&gt;Step12&lt;/code&gt; directory, create &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; subbdirectories. The layout will look like:</source>
          <target state="translated">로부터 &lt;code&gt;Step12&lt;/code&gt; 의 디렉토리 생성, &lt;code&gt;debug&lt;/code&gt; 및 &lt;code&gt;release&lt;/code&gt; subbdirectories을. 레이아웃은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ce21210f9a1694eb0106322e865224506a6136c1" translate="yes" xml:space="preserve">
          <source>From the &lt;code&gt;Step12&lt;/code&gt; directory, run &lt;a href=&quot;../../manual/cpack.1#manual:cpack(1)&quot; id=&quot;index-1-manual:cpack(1)&quot;&gt;&lt;code&gt;cpack&lt;/code&gt;&lt;/a&gt; specifying our custom configuration file with the &lt;code&gt;config&lt;/code&gt; option:</source>
          <target state="translated">로부터 &lt;code&gt;Step12&lt;/code&gt; 의 디렉토리, 실행 &lt;a href=&quot;../../manual/cpack.1#manual:cpack(1)&quot; id=&quot;index-1-manual:cpack(1)&quot;&gt; &lt;code&gt;cpack&lt;/code&gt; 을&lt;/a&gt; 우리의 사용자 정의 구성 파일을 지정 &lt;code&gt;config&lt;/code&gt; 옵션 :</target>
        </trans-unit>
        <trans-unit id="b239fad4846b4792cef2464dd332b3270cf332bb" translate="yes" xml:space="preserve">
          <source>From this 3-tuple, various ABIs will be searched starting from the most specialized to the most general. Moreover, &lt;code&gt;debug&lt;/code&gt; versions will be searched &lt;strong&gt;after&lt;/strong&gt;&lt;code&gt;non-debug&lt;/code&gt; ones.</source>
          <target state="translated">이 3- 튜플에서 가장 전문화 된 것부터 가장 일반적인 것까지 다양한 ABI가 검색됩니다. 또한 &lt;code&gt;debug&lt;/code&gt; 버전은 디버그 가 &lt;code&gt;non-debug&lt;/code&gt; 버전 &lt;strong&gt;이후에&lt;/strong&gt; 검색 됩니다.</target>
        </trans-unit>
        <trans-unit id="cab17f11aca0fe19329ce997e99ec0c032a6ef98" translate="yes" xml:space="preserve">
          <source>Full Signature and Config Mode</source>
          <target state="translated">전체 서명 및 구성 모드</target>
        </trans-unit>
        <trans-unit id="870428bce0d580ea9338697ec0182d1792d0b2f3" translate="yes" xml:space="preserve">
          <source>Full directory of the listfile currently being processed.</source>
          <target state="translated">현재 처리중인 목록 파일의 전체 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="2ade314167aaa6b9cf1960e11742ae2e82b504d8" translate="yes" xml:space="preserve">
          <source>Full path to &lt;a href=&quot;../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt;&lt;code&gt;cmake-gui(1)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../manual/ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt;&lt;code&gt;ccmake(1)&lt;/code&gt;&lt;/a&gt;. Defined only for &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; when not using an &quot;extra&quot; generator for an IDE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fb4babaedfa20d4e0dd75861c5631acfe25587" translate="yes" xml:space="preserve">
          <source>Full path to &lt;a href=&quot;../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt;&lt;code&gt;cmake-gui(1)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../manual/ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt;&lt;code&gt;ccmake(1)&lt;/code&gt;&lt;/a&gt;. Defined only for &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt; when not using an &amp;ldquo;extra&amp;rdquo; generator for an IDE.</source>
          <target state="translated">&lt;a href=&quot;../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt; &lt;code&gt;cmake-gui(1)&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../manual/ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt; &lt;code&gt;ccmake(1)&lt;/code&gt; &lt;/a&gt; 전체 경로 입니다. IDE에 &quot;추가&quot;생성기를 사용하지 않는 경우 &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile 생성기&lt;/a&gt; 에만 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="da948220d55601b34b953ca6994471fea607dfb4" translate="yes" xml:space="preserve">
          <source>Full path to &lt;a href=&quot;../manual/cpack.1#manual:cpack(1)&quot; id=&quot;index-0-manual:cpack(1)&quot;&gt;&lt;code&gt;cpack(1)&lt;/code&gt;&lt;/a&gt; command installed with CMake.</source>
          <target state="translated">CMake와 함께 설치된 &lt;a href=&quot;../manual/cpack.1#manual:cpack(1)&quot; id=&quot;index-0-manual:cpack(1)&quot;&gt; &lt;code&gt;cpack(1)&lt;/code&gt; &lt;/a&gt; 명령의 전체 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="1e5342b4ddf16eed0c005bbdd7a8edb4d52c472d" translate="yes" xml:space="preserve">
          <source>Full path to &lt;a href=&quot;../manual/ctest.1#manual:ctest(1)&quot; id=&quot;index-0-manual:ctest(1)&quot;&gt;&lt;code&gt;ctest(1)&lt;/code&gt;&lt;/a&gt; command installed with CMake.</source>
          <target state="translated">CMake와 함께 설치된 &lt;a href=&quot;../manual/ctest.1#manual:ctest(1)&quot; id=&quot;index-0-manual:ctest(1)&quot;&gt; &lt;code&gt;ctest(1)&lt;/code&gt; &lt;/a&gt; 명령의 전체 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="13760be65cfaab71a8f4dc42669dbc43b0b28b5b" translate="yes" xml:space="preserve">
          <source>Full path to build directory for project.</source>
          <target state="translated">프로젝트 디렉토리를 빌드하기위한 전체 경로.</target>
        </trans-unit>
        <trans-unit id="66bcf0f5dc0a22ab4385a03a49086b7327776b1b" translate="yes" xml:space="preserve">
          <source>Full path to main file (.exe, .so.1.2, .a) where &lt;code&gt;tgt&lt;/code&gt; is the name of a target.</source>
          <target state="translated">기본 파일의 전체 경로 (.exe, .so.1.2, .a) 여기서 &lt;code&gt;tgt&lt;/code&gt; 는 대상의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="2e3d7b29dbb6d659ba4a59f2d7e3b29de8b2e941" translate="yes" xml:space="preserve">
          <source>Full path to the &lt;a href=&quot;../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-P&lt;/code&gt; script file currently being processed.</source>
          <target state="translated">현재 처리중인 &lt;a href=&quot;../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-P&lt;/code&gt; 스크립트 파일 의 전체 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="a54f5be7a2093b7dc0ce78337a93507f6cd603cc" translate="yes" xml:space="preserve">
          <source>Full path to the &lt;code&gt;tgt&lt;/code&gt; binary file.</source>
          <target state="translated">&lt;code&gt;tgt&lt;/code&gt; 바이너리 파일 의 전체 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="51d3804795f63a8c24045a444d0eb187d7370743" translate="yes" xml:space="preserve">
          <source>Full path to the CMake file that included the current one.</source>
          <target state="translated">현재 파일이 포함 된 CMake 파일의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="14a91015039c2617dee9a77e881be9c2d811d946" translate="yes" xml:space="preserve">
          <source>Full path to the bundle content directory where &lt;code&gt;tgt&lt;/code&gt; is the name of a target. For the macOS SDK it leads to &lt;code&gt;my.app/Contents&lt;/code&gt;, &lt;code&gt;my.framework&lt;/code&gt;, or &lt;code&gt;my.bundle/Contents&lt;/code&gt;. For all other SDKs (e.g. iOS) it leads to &lt;code&gt;my.app&lt;/code&gt;, &lt;code&gt;my.framework&lt;/code&gt;, or &lt;code&gt;my.bundle&lt;/code&gt; due to the flat bundle structure.</source>
          <target state="translated">번들 컨텐츠 디렉토리의 전체 경로. 여기서 &lt;code&gt;tgt&lt;/code&gt; 는 대상의 이름입니다. macOS SDK의 경우 &lt;code&gt;my.app/Contents&lt;/code&gt; , &lt;code&gt;my.framework&lt;/code&gt; 또는 &lt;code&gt;my.bundle/Contents&lt;/code&gt; 로 연결 됩니다. 다른 모든 SDK (예 : iOS)의 경우 플랫 번들 구조로 인해 &lt;code&gt;my.app&lt;/code&gt; , &lt;code&gt;my.framework&lt;/code&gt; 또는 &lt;code&gt;my.bundle&lt;/code&gt; 로 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="23c102afaf005bc55c8d65518b2be782b688594f" translate="yes" xml:space="preserve">
          <source>Full path to the bundle directory (&lt;code&gt;my.app&lt;/code&gt;, &lt;code&gt;my.framework&lt;/code&gt;, or &lt;code&gt;my.bundle&lt;/code&gt;) where &lt;code&gt;tgt&lt;/code&gt; is the name of a target.</source>
          <target state="translated">번들 디렉토리 ( &lt;code&gt;my.app&lt;/code&gt; , &lt;code&gt;my.framework&lt;/code&gt; 또는 &lt;code&gt;my.bundle&lt;/code&gt; )의 전체 경로입니다. 여기서 &lt;code&gt;tgt&lt;/code&gt; 는 대상의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="b7cd476172564de70a60ff176ff5dcdba2a1f510" translate="yes" xml:space="preserve">
          <source>Full path to the file doing the access.</source>
          <target state="translated">액세스를 수행하는 파일의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="0cf6384847bb9c642c9d204229be8999cac876a1" translate="yes" xml:space="preserve">
          <source>Full path to the import library for an &lt;code&gt;IMPORTED&lt;/code&gt; target.</source>
          <target state="translated">&lt;code&gt;IMPORTED&lt;/code&gt; 대상 의 가져 오기 라이브러리에 대한 전체 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="0922e02de4fe02949b5fd8b392b02f5d7c6b21ce" translate="yes" xml:space="preserve">
          <source>Full path to the linker generated program database file (.pdb) where &lt;code&gt;tgt&lt;/code&gt; is the name of a target.</source>
          <target state="translated">링커 생성 프로그램 데이터베이스 파일 (.pdb)의 전체 경로. 여기서 &lt;code&gt;tgt&lt;/code&gt; 는 대상의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e36cbf146bf5fd08e29fb7988a06028d0c3e8b02" translate="yes" xml:space="preserve">
          <source>Full path to the listfile currently being processed.</source>
          <target state="translated">현재 처리중인 목록 파일의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="09063f20a879e9bb7fae2d4502f875be8b5acc7f" translate="yes" xml:space="preserve">
          <source>Full path to the main file on disk for an &lt;code&gt;IMPORTED&lt;/code&gt; target.</source>
          <target state="translated">&lt;code&gt;IMPORTED&lt;/code&gt; 대상 에 대한 디스크의 기본 파일에 대한 전체 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="b8385bad65a14320fc341f299e4e04f5fab7c855" translate="yes" xml:space="preserve">
          <source>Full path to the precompile header file.</source>
          <target state="translated">사전 컴파일 헤더 파일의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="b7592eb86cc6484c1fd7423c4b6a96ed6aa5ebce" translate="yes" xml:space="preserve">
          <source>Full provided version string</source>
          <target state="translated">제공되는 버전 문자열</target>
        </trans-unit>
        <trans-unit id="1503ce65b3845747a3c929da4c8adde1411277f4" translate="yes" xml:space="preserve">
          <source>Full requested version range string</source>
          <target state="translated">전체 요청 버전 범위 문자열</target>
        </trans-unit>
        <trans-unit id="ff31683a7c8a333ca9fb2173f8406bd28e6ccaf3" translate="yes" xml:space="preserve">
          <source>Full requested version string</source>
          <target state="translated">전체 요청 된 버전 문자열</target>
        </trans-unit>
        <trans-unit id="2ca1c77045aa0b25275e660015211de7dda0304a" translate="yes" xml:space="preserve">
          <source>Full requested version string of the lower end point of the range</source>
          <target state="translated">범위의 하위 끝점에 대한 전체 요청 버전 문자열</target>
        </trans-unit>
        <trans-unit id="b8dcd454246af39259c712d8f031ed41fc633075" translate="yes" xml:space="preserve">
          <source>Full requested version string of the upper end point of the range</source>
          <target state="translated">범위의 상단 끝점에 대한 전체 요청 버전 문자열</target>
        </trans-unit>
        <trans-unit id="ec9bb1efc7dab118466e86e315394d6479fff813" translate="yes" xml:space="preserve">
          <source>Full version in the &lt;code&gt;X.Y&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfee4497ea3f3b276ea234a1192875a99041e0d" translate="yes" xml:space="preserve">
          <source>Fully qualified domain name</source>
          <target state="translated">정규화 된 도메인 이름</target>
        </trans-unit>
        <trans-unit id="d8e272707c7532fc5560f8c39a6c85f19bfc1644" translate="yes" xml:space="preserve">
          <source>Function DetermineVSServicePack sets the given variable to one of the following values or an empty string if unknown:</source>
          <target state="translated">함수 결정 VSServicePack은 주어진 변수를 다음 값 중 하나로 설정하거나 알 수없는 경우 빈 문자열을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="5c8224fb885f624660db62da8b1055688dda11c3" translate="yes" xml:space="preserve">
          <source>Function Scope</source>
          <target state="translated">기능 범위</target>
        </trans-unit>
        <trans-unit id="8e21ccbdee3c2478643e74015c553213d053dd78" translate="yes" xml:space="preserve">
          <source>Function for generation of export macros for libraries</source>
          <target state="translated">라이브러리 용 익스포트 매크로 생성 기능</target>
        </trans-unit>
        <trans-unit id="a51b0ef95a6a4c7f4eded724e553976495a22dde" translate="yes" xml:space="preserve">
          <source>Function prototypes, as defined in &lt;code&gt;ISO/IEC 9899:1990&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ISO/IEC 9899:1990&lt;/code&gt; 에 정의 된 기능 프로토 타입 .</target>
        </trans-unit>
        <trans-unit id="b2b403bc23eefb071d881eba2d8b53eafa58278c" translate="yes" xml:space="preserve">
          <source>Functionality for querying a JSON string.</source>
          <target state="translated">JSON 문자열 쿼리 기능.</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="ceb2fead5290536a3980ad741fa89fd7587830e5" translate="yes" xml:space="preserve">
          <source>Functions for generating a summary of enabled/disabled features.</source>
          <target state="translated">활성화 / 비활성화 된 기능의 요약을 생성하는 기능.</target>
        </trans-unit>
        <trans-unit id="5e195f845465268be27feef3bd729be37f3bb18b" translate="yes" xml:space="preserve">
          <source>Functions to analyze and list executable file prerequisites.</source>
          <target state="translated">실행 파일 전제 조건을 분석하고 나열하는 기능.</target>
        </trans-unit>
        <trans-unit id="8f54dc00c6607b559a6acc9c6315af10035e7152" translate="yes" xml:space="preserve">
          <source>Functions to help assemble a standalone Qt4 executable.</source>
          <target state="translated">독립형 Qt4 실행 파일을 조립하는 데 도움이되는 기능.</target>
        </trans-unit>
        <trans-unit id="db8d1fc5b5f5043e46036b0c2e9150f327086e5c" translate="yes" xml:space="preserve">
          <source>Functions to help assemble a standalone bundle application.</source>
          <target state="translated">독립형 번들 애플리케이션을 구성하는 데 도움이되는 기능.</target>
        </trans-unit>
        <trans-unit id="0fadc716a34d7d7928dd7c641c7615ab67b99589" translate="yes" xml:space="preserve">
          <source>Functions to help creating and executing XCTest bundles.</source>
          <target state="translated">XCTest 번들 작성 및 실행을 돕는 기능.</target>
        </trans-unit>
        <trans-unit id="b22b391271ee6602391c75d2ec6d37982eab837e" translate="yes" xml:space="preserve">
          <source>Functions to make configuration of CSharp/.NET targets easier.</source>
          <target state="translated">CSharp / .NET 대상을보다 쉽게 ​​구성 할 수있는 기능.</target>
        </trans-unit>
        <trans-unit id="789013049725deb2da8f961f0d9da97c212ae12b" translate="yes" xml:space="preserve">
          <source>Further variables are set by the optional arguments described in the following. If any of these arguments is not used, then the corresponding variables are set to the empty string.</source>
          <target state="translated">추가 변수는 다음에 설명 된 선택적 인수로 설정됩니다. 이러한 인수 중 하나를 사용하지 않으면 해당 변수가 빈 문자열로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="7aa29475c5a7078117102da98a20aa0ad7b1e34e" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;${ARGV}&lt;/code&gt; holds the list of all arguments given to the macro and &lt;code&gt;${ARGN}&lt;/code&gt; holds the list of arguments past the last expected argument. Referencing to &lt;code&gt;${ARGV#}&lt;/code&gt; arguments beyond &lt;code&gt;${ARGC}&lt;/code&gt; have undefined behavior. Checking that &lt;code&gt;${ARGC}&lt;/code&gt; is greater than &lt;code&gt;#&lt;/code&gt; is the only way to ensure that &lt;code&gt;${ARGV#}&lt;/code&gt; was passed to the function as an extra argument.</source>
          <target state="translated">또한 &lt;code&gt;${ARGV}&lt;/code&gt; 는 매크로에 제공된 모든 인수 목록을 보유하고 &lt;code&gt;${ARGN}&lt;/code&gt; 은 마지막 예상 인수 이후의 인수 목록을 보유합니다. &lt;code&gt;${ARGC}&lt;/code&gt; 이외의 &lt;code&gt;${ARGV#}&lt;/code&gt; 인수를 참조하면 동작이 정의되지 않습니다. 것을 확인 &lt;code&gt;${ARGC}&lt;/code&gt; 보다 큰 &lt;code&gt;#&lt;/code&gt; 하는 것을 보장하는 유일한 방법입니다 &lt;code&gt;${ARGV#}&lt;/code&gt; 추가 인수로 함수에 전달되었다.</target>
        </trans-unit>
        <trans-unit id="0551babb5fb1ceebcd214ab9d131e2a470a943ea" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;ARGV&lt;/code&gt; holds the list of all arguments given to the function and &lt;code&gt;ARGN&lt;/code&gt; holds the list of arguments past the last expected argument. Referencing to &lt;code&gt;ARGV#&lt;/code&gt; arguments beyond &lt;code&gt;ARGC&lt;/code&gt; have undefined behavior. Checking that &lt;code&gt;ARGC&lt;/code&gt; is greater than &lt;code&gt;#&lt;/code&gt; is the only way to ensure that &lt;code&gt;ARGV#&lt;/code&gt; was passed to the function as an extra argument.</source>
          <target state="translated">또한 &lt;code&gt;ARGV&lt;/code&gt; 는 함수에 제공된 모든 인수 목록을 보유 하고 &lt;code&gt;ARGN&lt;/code&gt; 은 마지막 예상 인수 이후의 인수 목록을 보유합니다. &lt;code&gt;ARGC&lt;/code&gt; 이외의 &lt;code&gt;ARGV#&lt;/code&gt; 인수를 참조하면 동작이 정의되지 않습니다. 것을 확인 &lt;code&gt;ARGC&lt;/code&gt; 이 보다 큰 &lt;code&gt;#&lt;/code&gt; 하는 것을 보장하는 유일한 방법입니다 &lt;code&gt;ARGV#&lt;/code&gt; 추가 인수로 함수에 전달했다.</target>
        </trans-unit>
        <trans-unit id="4f96aa68675ad70f6860898735d5a7fa1a4a9e68" translate="yes" xml:space="preserve">
          <source>Furthermore, the variable &lt;code&gt;${VARIABLE}_CODE&lt;/code&gt; holds C preprocessor code to define the macro &lt;code&gt;${VARIABLE}&lt;/code&gt; to the size of the type, or leave the macro undefined if the type does not exist.</source>
          <target state="translated">또한 &lt;code&gt;${VARIABLE}_CODE&lt;/code&gt; 변수 는 C $ 프로세서를 보유하여 &lt;code&gt;${VARIABLE}&lt;/code&gt; 매크로를 유형의 크기로 정의하거나 유형이 존재하지 않으면 매크로를 정의되지 않은 상태로 둡니다.</target>
        </trans-unit>
        <trans-unit id="abc9711cb22cb1160401e64669b51f5e5f2db0a5" translate="yes" xml:space="preserve">
          <source>GAbi++ Shared</source>
          <target state="translated">GAbi ++ 공유</target>
        </trans-unit>
        <trans-unit id="c3a33469bca04c3991a4aa404de06a3530597ec4" translate="yes" xml:space="preserve">
          <source>GAbi++ Static</source>
          <target state="translated">GAbi ++ 정적</target>
        </trans-unit>
        <trans-unit id="82cb2940a14f458fe56d211dffdcd12595e8b940" translate="yes" xml:space="preserve">
          <source>GENERATED</source>
          <target state="translated">GENERATED</target>
        </trans-unit>
        <trans-unit id="e6a795408b6e9233e85abe2b53fd36d5a620a0f4" translate="yes" xml:space="preserve">
          <source>GENERATOR_FILE_NAME</source>
          <target state="translated">GENERATOR_FILE_NAME</target>
        </trans-unit>
        <trans-unit id="6d027413349eb696466ade368926ba32ad47ac48" translate="yes" xml:space="preserve">
          <source>GENERATOR_IS_MULTI_CONFIG</source>
          <target state="translated">GENERATOR_IS_MULTI_CONFIG</target>
        </trans-unit>
        <trans-unit id="25a5d5d250bff8e8449e831fe58c5e5dbc661310" translate="yes" xml:space="preserve">
          <source>GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 &amp;hellip; fileN )</source>
          <target state="translated">GETTEXT_CREATE_TRANSLATIONS (outputFile [ALL] file1&amp;hellip; fileN)</target>
        </trans-unit>
        <trans-unit id="efb676eb352d0f714a40e4fa6d7ee376873265bc" translate="yes" xml:space="preserve">
          <source>GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 ... fileN )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497f0c803a27f5aa664b07ac4b8dc96ab8c0c5e9" translate="yes" xml:space="preserve">
          <source>GETTEXT_PROCESS_POT_FILE( &amp;lt;potfile&amp;gt; [ALL] [INSTALL_DESTINATION &amp;lt;destdir&amp;gt;] LANGUAGES &amp;lt;lang1&amp;gt; &amp;lt;lang2&amp;gt; &amp;hellip; )</source>
          <target state="translated">GETTEXT_PROCESS_POT_FILE (&amp;lt;potfile&amp;gt; [ALL] [INSTALL_DESTINATION &amp;lt;destdir&amp;gt;] LANGUAGES &amp;lt;lang1&amp;gt; &amp;lt;lang2&amp;gt;&amp;hellip;)</target>
        </trans-unit>
        <trans-unit id="e0a1e7616401b2908a7693806ccac1f721127ad1" translate="yes" xml:space="preserve">
          <source>GETTEXT_PROCESS_POT_FILE( &amp;lt;potfile&amp;gt; [ALL] [INSTALL_DESTINATION &amp;lt;destdir&amp;gt;] LANGUAGES &amp;lt;lang1&amp;gt; &amp;lt;lang2&amp;gt; ... )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68d60a7d7910a56b17563858f2a3ecb58c23eba" translate="yes" xml:space="preserve">
          <source>GETTEXT_PROCESS_PO_FILES( &amp;lt;lang&amp;gt; [ALL] [INSTALL_DESTINATION &amp;lt;dir&amp;gt;] PO_FILES &amp;lt;po1&amp;gt; &amp;lt;po2&amp;gt; &amp;hellip; )</source>
          <target state="translated">GETTEXT_PROCESS_PO_FILES (&amp;lt;lang&amp;gt; [ALL] [INSTALL_DESTINATION &amp;lt;dir&amp;gt;] PO_FILES &amp;lt;po1&amp;gt; &amp;lt;po2&amp;gt;&amp;hellip;)</target>
        </trans-unit>
        <trans-unit id="3ae00762268190a62e87068ce778cb04f44573fa" translate="yes" xml:space="preserve">
          <source>GETTEXT_PROCESS_PO_FILES( &amp;lt;lang&amp;gt; [ALL] [INSTALL_DESTINATION &amp;lt;dir&amp;gt;] PO_FILES &amp;lt;po1&amp;gt; &amp;lt;po2&amp;gt; ... )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbc44d742c299f850a858a778b582397968b84e" translate="yes" xml:space="preserve">
          <source>GHS-MULTI</source>
          <target state="translated">GHS-MULTI</target>
        </trans-unit>
        <trans-unit id="81c6102b84b3384eab76931dfa5a9238ea39fef2" translate="yes" xml:space="preserve">
          <source>GHS_INTEGRITY_APP</source>
          <target state="translated">GHS_INTEGRITY_APP</target>
        </trans-unit>
        <trans-unit id="b86810456604cf6750ba8c6e39afd252deb2ab6e" translate="yes" xml:space="preserve">
          <source>GHS_NO_SOURCE_GROUP_FILE</source>
          <target state="translated">GHS_NO_SOURCE_GROUP_FILE</target>
        </trans-unit>
        <trans-unit id="5129c7bb7d6db5ebee5e3e8389bc81dd404c2cfc" translate="yes" xml:space="preserve">
          <source>GLEW major version</source>
          <target state="translated">GLEW 메이저 버전</target>
        </trans-unit>
        <trans-unit id="f98f50a2519c99b7d66dc2ac94b728c1673774f5" translate="yes" xml:space="preserve">
          <source>GLEW micro version</source>
          <target state="translated">GLEW 마이크로 버전</target>
        </trans-unit>
        <trans-unit id="0b94c0f668cd3367fb248cc7ecb385a84699b5ab" translate="yes" xml:space="preserve">
          <source>GLEW minor version</source>
          <target state="translated">GLEW 부 버전</target>
        </trans-unit>
        <trans-unit id="1ba9a0b0f4e9236600d963878cc0e7ed5e6b3e2d" translate="yes" xml:space="preserve">
          <source>GLEW version</source>
          <target state="translated">GLEW 버전</target>
        </trans-unit>
        <trans-unit id="2da3404ce7db18aa92ec6b19e5f2da7daea15ad3" translate="yes" xml:space="preserve">
          <source>GLOBAL_DEPENDS_DEBUG_MODE</source>
          <target state="translated">GLOBAL_DEPENDS_DEBUG_MODE</target>
        </trans-unit>
        <trans-unit id="afbfb226c2ac210bcb90568a292eed014b1cf64f" translate="yes" xml:space="preserve">
          <source>GLOBAL_DEPENDS_NO_CYCLES</source>
          <target state="translated">GLOBAL_DEPENDS_NO_CYCLES</target>
        </trans-unit>
        <trans-unit id="d634d1fb59ea40e2b246cbb905e64e33153fc97e" translate="yes" xml:space="preserve">
          <source>GNU libstdc++ Shared</source>
          <target state="translated">GNU libstdc ++ 공유</target>
        </trans-unit>
        <trans-unit id="3d0c9239910fb8668e147248c1a0ef3f48305dce" translate="yes" xml:space="preserve">
          <source>GNU libstdc++ Static</source>
          <target state="translated">GNU libstdc ++ 정적</target>
        </trans-unit>
        <trans-unit id="064e6af736c77ba32907eaa5297a3d3e83efbd20" translate="yes" xml:space="preserve">
          <source>GNUInstallDirs</source>
          <target state="translated">GNUInstallDirs</target>
        </trans-unit>
        <trans-unit id="2d80350b945cc1fb15466512baded5b8c44aa9f2" translate="yes" xml:space="preserve">
          <source>GNUInstallDirs Variable</source>
          <target state="translated">GNUInstallDirs 변수</target>
        </trans-unit>
        <trans-unit id="f4f37c45dce497d965208eb81d65a7064e8d85d1" translate="yes" xml:space="preserve">
          <source>GNUPLOT_VERSION_STRING will not work for old versions like 3.7.1.</source>
          <target state="translated">GNUPLOT_VERSION_STRING은 3.7.1과 같은 이전 버전에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="de38109f848852177b2364e0cba87dba90c9e891" translate="yes" xml:space="preserve">
          <source>GNUtoMS</source>
          <target state="translated">GNUtoMS</target>
        </trans-unit>
        <trans-unit id="ca1bbb97a309dbc08b33cebc249e4564e09d70f8" translate="yes" xml:space="preserve">
          <source>GROUP names the component group of which this component is a part. If not provided, the component will be a standalone component, not part of any component group. Component groups are described with the cpack_add_component_group command, detailed below.</source>
          <target state="translated">GROUP은이 구성 요소가 속하는 구성 요소 그룹의 이름을 지정합니다. 제공되지 않은 경우 구성 요소는 구성 요소 그룹의 일부가 아닌 독립형 구성 요소입니다. 구성 요소 그룹은 cpack_add_component_group 명령으로 설명되며 아래에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ba3b57bc4a35f8be64d8c87439673ce1e4207bf" translate="yes" xml:space="preserve">
          <source>Gather all the keys for all the executables and libraries in a bundle, and then, for each key, copy each prerequisite into the bundle. Then fix each one up according to its own list of prerequisites.</source>
          <target state="translated">번들의 모든 실행 파일 및 라이브러리에 대한 모든 키를 수집 한 다음 각 키에 대해 각 전제 조건을 번들에 복사하십시오. 그런 다음 고유 한 전제 조건 목록에 따라 각각을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="e8dbc3a5e792325493d1a251b1517a4d2b253ce5" translate="yes" xml:space="preserve">
          <source>General Message Layout</source>
          <target state="translated">일반 메시지 레이아웃</target>
        </trans-unit>
        <trans-unit id="95ff2cd651a8f9461c195d143afca4a7d58118de" translate="yes" xml:space="preserve">
          <source>General messages</source>
          <target state="translated">일반 메시지</target>
        </trans-unit>
        <trans-unit id="bd5abe73b992767eaff8ffcab1489a5fb7d7e4dd" translate="yes" xml:space="preserve">
          <source>Generally the &lt;code&gt;TYPE&lt;/code&gt; of a cache entry should be set by the command which creates it ( &lt;a href=&quot;../command/set#command:set&quot; id=&quot;index-0-command:set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../command/option#command:option&quot; id=&quot;index-0-command:option&quot;&gt;&lt;code&gt;option()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../command/find_library#command:find_library&quot; id=&quot;index-0-command:find_library&quot;&gt;&lt;code&gt;find_library()&lt;/code&gt;&lt;/a&gt;, etc.).</source>
          <target state="translated">일반적으로 캐시 항목 의 &lt;code&gt;TYPE&lt;/code&gt; &lt;a href=&quot;../command/find_library#command:find_library&quot; id=&quot;index-0-command:find_library&quot;&gt; &lt;code&gt;find_library()&lt;/code&gt; &lt;/a&gt; 를 작성하는 명령 ( &lt;a href=&quot;../command/set#command:set&quot; id=&quot;index-0-command:set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../command/option#command:option&quot; id=&quot;index-0-command:option&quot;&gt; &lt;code&gt;option()&lt;/code&gt; &lt;/a&gt; , find_library () 등)으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6da92fd61e5b4de77766e4105457e4daaa3f948" translate="yes" xml:space="preserve">
          <source>Generally, a dependency should be specified in a use of &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-5-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;PRIVATE&lt;/code&gt; keyword if it is used by only the implementation of a library, and not in the header files. If a dependency is additionally used in the header files of a library (e.g. for class inheritance), then it should be specified as a &lt;code&gt;PUBLIC&lt;/code&gt; dependency. A dependency which is not used by the implementation of a library, but only by its headers should be specified as an &lt;code&gt;INTERFACE&lt;/code&gt; dependency. The &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-6-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt; command may be invoked with multiple uses of each keyword:</source>
          <target state="translated">일반적으로 헤더 파일이 아닌 라이브러리 구현에서만 사용되는 경우 &lt;code&gt;PRIVATE&lt;/code&gt; 키워드 와 함께 &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-5-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; 를 사용하여 종속성을 지정해야 합니다. 라이브러리의 헤더 파일에서 종속성이 추가로 사용되는 경우 (예 : 클래스 상속) &lt;code&gt;PUBLIC&lt;/code&gt; 종속성 으로 지정해야합니다 . 라이브러리 구현에서 사용되지 않고 헤더에서만 사용되는 종속성 은 &lt;code&gt;INTERFACE&lt;/code&gt; 종속성 으로 지정해야합니다 . &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-6-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; 명령이 각 키워드의 여러 용도로 호출 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="85bd622d15ab03a02836c48cc7157bcc1f03ca22" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;compile_commands.json&lt;/code&gt; file for use with clang-based tools</source>
          <target state="translated">clang 기반 도구와 함께 사용할 &lt;code&gt;compile_commands.json&lt;/code&gt; 파일 생성</target>
        </trans-unit>
        <trans-unit id="8bf5a9071c443c04e1302deec57050c67a062350" translate="yes" xml:space="preserve">
          <source>Generate a Project Buildsystem</source>
          <target state="translated">프로젝트 빌드 시스템 생성</target>
        </trans-unit>
        <trans-unit id="c7c0c36062ba2007bf1a9c4d39350b4c92ebb928" translate="yes" xml:space="preserve">
          <source>Generate a graphviz input file that will contain all the library and executable dependencies in the project. See the documentation for &lt;a href=&quot;../module/cmakegraphvizoptions#module:CMakeGraphVizOptions&quot; id=&quot;index-1-module:CMakeGraphVizOptions&quot;&gt;&lt;code&gt;CMakeGraphVizOptions&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">프로젝트의 모든 라이브러리 및 실행 파일 종속성을 포함 할 graphviz 입력 파일을 생성하십시오. 자세한 내용은 &lt;a href=&quot;../module/cmakegraphvizoptions#module:CMakeGraphVizOptions&quot; id=&quot;index-1-module:CMakeGraphVizOptions&quot;&gt; &lt;code&gt;CMakeGraphVizOptions&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="89cd1f9193b53155164b5216b4e507bb0c2e0c9b" translate="yes" xml:space="preserve">
          <source>Generate a list of files that match the &lt;code&gt;&amp;lt;globbing-expressions&amp;gt;&lt;/code&gt; and store it into the &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt;. Globbing expressions are similar to regular expressions, but much simpler. If &lt;code&gt;RELATIVE&lt;/code&gt; flag is specified, the results will be returned as relative paths to the given path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85d062dc865c15a1dda9096681546427c7a5c02" translate="yes" xml:space="preserve">
          <source>Generate a list of files that match the &lt;code&gt;&amp;lt;globbing-expressions&amp;gt;&lt;/code&gt; and store it into the &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt;. Globbing expressions are similar to regular expressions, but much simpler. If &lt;code&gt;RELATIVE&lt;/code&gt; flag is specified, the results will be returned as relative paths to the given path. The results will be ordered lexicographically.</source>
          <target state="translated">&lt;code&gt;&amp;lt;globbing-expressions&amp;gt;&lt;/code&gt; 와 일치하는 파일 목록을 생성 하고 &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; 에 저장하십시오 . 글 로빙 표현식은 정규 표현식과 비슷하지만 훨씬 간단합니다. 경우 &lt;code&gt;RELATIVE&lt;/code&gt; 플래그가 지정되고, 결과는 주어진 경로에 대한 상대 경로로 반환됩니다. 결과는 사전 식으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="3751e07291f5a1e17ba2c250aa979b8839bd739f" translate="yes" xml:space="preserve">
          <source>Generate an output file for each build configuration supported by the current &lt;a href=&quot;../manual/cmake-generators.7#manual:cmake-generators(7)&quot; id=&quot;index-0-manual:cmake-generators(7)&quot;&gt;&lt;code&gt;CMake Generator&lt;/code&gt;&lt;/a&gt;. Evaluate &lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt;&lt;code&gt;generator expressions&lt;/code&gt;&lt;/a&gt; from the input content to produce the output content. The options are:</source>
          <target state="translated">현재 &lt;a href=&quot;../manual/cmake-generators.7#manual:cmake-generators(7)&quot; id=&quot;index-0-manual:cmake-generators(7)&quot;&gt; &lt;code&gt;CMake Generator&lt;/code&gt; 가&lt;/a&gt; 지원하는 각 빌드 구성에 대한 출력 파일을 생성하십시오 . 입력 컨텐츠에서 &lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt; &lt;code&gt;generator expressions&lt;/code&gt; &lt;/a&gt; 을 평가 하여 출력 컨텐츠를 생성하십시오. 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5320bcc9fdb159b1393d66cac3a5b92c772a4beb" translate="yes" xml:space="preserve">
          <source>Generate an output file using the input given by &lt;code&gt;CONTENT&lt;/code&gt; and substitute variable values referenced as &lt;code&gt;@VAR@&lt;/code&gt; or &lt;code&gt;${VAR}&lt;/code&gt; contained therein. The substitution rules behave the same as the &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-1-command:configure_file&quot;&gt;&lt;code&gt;configure_file()&lt;/code&gt;&lt;/a&gt; command. In order to match &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-2-command:configure_file&quot;&gt;&lt;code&gt;configure_file()&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s behavior, generator expressions are not supported for both &lt;code&gt;OUTPUT&lt;/code&gt; and &lt;code&gt;CONTENT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CONTENT&lt;/code&gt; 에서 제공 한 입력을 사용하여 출력 파일을 생성하고 그 안에 포함 된 &lt;code&gt;@VAR@&lt;/code&gt; 또는 &lt;code&gt;${VAR}&lt;/code&gt; 로 참조되는 변수 값을 대체합니다 . 대체 규칙은 &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-1-command:configure_file&quot;&gt; &lt;code&gt;configure_file()&lt;/code&gt; &lt;/a&gt; 명령 과 동일하게 작동합니다 . &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-2-command:configure_file&quot;&gt; &lt;code&gt;configure_file()&lt;/code&gt; &lt;/a&gt; 의 동작 을 일치시키기 위해 생성기 표현식은 &lt;code&gt;OUTPUT&lt;/code&gt; 및 &lt;code&gt;CONTENT&lt;/code&gt; 모두에 대해 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="682a45a280b35506697346e9428d5700b4786026" translate="yes" xml:space="preserve">
          <source>Generate an output file using the input given by &lt;code&gt;CONTENT&lt;/code&gt; and substitute variable values referenced as &lt;code&gt;@VAR@&lt;/code&gt; or &lt;code&gt;${VAR}&lt;/code&gt; contained therein. The substitution rules behave the same as the &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-1-command:configure_file&quot;&gt;&lt;code&gt;configure_file()&lt;/code&gt;&lt;/a&gt; command. In order to match &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-2-command:configure_file&quot;&gt;&lt;code&gt;configure_file()&lt;/code&gt;&lt;/a&gt;'s behavior, generator expressions are not supported for both &lt;code&gt;OUTPUT&lt;/code&gt; and &lt;code&gt;CONTENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97380d1b94f655385a68fecdad7907b7a25b3992" translate="yes" xml:space="preserve">
          <source>Generate and install the package configuration and package version files:</source>
          <target state="translated">패키지 구성 및 패키지 버전 파일을 생성하고 설치합니다.</target>
        </trans-unit>
        <trans-unit id="383e42902ddd9bc9b36a1f4ab1d523812a783c26" translate="yes" xml:space="preserve">
          <source>Generate custom targets for the specified steps and prevent these targets from having the usual dependencies applied to them. If this option is not specified, the default value is taken from the &lt;code&gt;EP_INDEPENDENT_STEP_TARGETS&lt;/code&gt; directory property. This option is mostly useful for allowing individual steps to be driven independently, such as for a CDash setup where each step should be initiated and reported individually rather than as one whole build. See &lt;a href=&quot;#command:externalproject_add_step&quot; id=&quot;index-1-command:externalproject_add_step&quot;&gt;&lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt;&lt;/a&gt; below for further discussion of the effects of this option.</source>
          <target state="translated">지정된 단계에 대한 사용자 정의 대상을 생성하고 이러한 대상에 일반적인 종속성이 적용되지 않도록하십시오. 이 옵션을 지정하지 않으면 &lt;code&gt;EP_INDEPENDENT_STEP_TARGETS&lt;/code&gt; 디렉토리 특성 에서 기본값을 가져옵니다 . 이 옵션은 각 단계를 하나의 전체 빌드가 아닌 개별적으로 시작하고보고해야하는 CDash 설정과 같이 개별 단계를 독립적으로 구동 할 수 있도록하는 데 주로 유용합니다. 이 옵션의 효과에 대한 자세한 내용은 아래 &lt;a href=&quot;#command:externalproject_add_step&quot; id=&quot;index-1-command:externalproject_add_step&quot;&gt; &lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="71f0c52abe83461d6e7b668919cf31cb4769a1c7" translate="yes" xml:space="preserve">
          <source>Generate custom targets for the specified steps. This is required if the steps need to be triggered manually or if they need to be used as dependencies of other targets. If this option is not specified, the default value is taken from the &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; directory property. See &lt;a href=&quot;#command:externalproject_add_step&quot; id=&quot;index-0-command:externalproject_add_step&quot;&gt;&lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt;&lt;/a&gt; below for further discussion of the effects of this option.</source>
          <target state="translated">지정된 단계에 대한 사용자 정의 대상을 생성하십시오. 단계를 수동으로 트리거해야하거나 다른 대상의 종속성으로 사용해야하는 경우에 필요합니다. 이 옵션을 지정하지 않으면 &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; 디렉토리 특성 에서 기본값을 가져옵니다 . 이 옵션의 효과에 대한 자세한 내용은 아래 &lt;a href=&quot;#command:externalproject_add_step&quot; id=&quot;index-0-command:externalproject_add_step&quot;&gt; &lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3d665be7a61ac12b27ff40453b341b11299783f5" translate="yes" xml:space="preserve">
          <source>Generate custom targets for the specified steps. This is required if the steps need to be triggered manually or if they need to be used as dependencies of other targets. If this option is not specified, the default value is taken from the &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; directory property. See &lt;a href=&quot;#command:externalproject_add_steptargets&quot; id=&quot;index-1-command:externalproject_add_steptargets&quot;&gt;&lt;code&gt;ExternalProject_Add_StepTargets()&lt;/code&gt;&lt;/a&gt; below for further discussion of the effects of this option.</source>
          <target state="translated">지정된 단계에 대한 사용자 지정 대상을 생성합니다. 단계를 수동으로 트리거해야하거나 다른 대상의 종속성으로 사용해야하는 경우에 필요합니다. 이 옵션을 지정하지 않으면 &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; 디렉터리 속성 에서 기본값을 가져옵니다 . 이 옵션의 효과에 대한 자세한 내용은 아래 &lt;a href=&quot;#command:externalproject_add_steptargets&quot; id=&quot;index-1-command:externalproject_add_steptargets&quot;&gt; &lt;code&gt;ExternalProject_Add_StepTargets()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d6b880862554dcdff391ffc76093f483b24dbb72" translate="yes" xml:space="preserve">
          <source>Generate graphviz of dependencies, see &lt;a href=&quot;../module/cmakegraphvizoptions#module:CMakeGraphVizOptions&quot; id=&quot;index-0-module:CMakeGraphVizOptions&quot;&gt;&lt;code&gt;CMakeGraphVizOptions&lt;/code&gt;&lt;/a&gt; for more.</source>
          <target state="translated">종속성의 graphviz를 생성하십시오 . 자세한 내용은 &lt;a href=&quot;../module/cmakegraphvizoptions#module:CMakeGraphVizOptions&quot; id=&quot;index-0-module:CMakeGraphVizOptions&quot;&gt; &lt;code&gt;CMakeGraphVizOptions&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48da15687d5a0bfd39a243f8531ca555c42880e0" translate="yes" xml:space="preserve">
          <source>Generate the output file for a particular configuration only if the condition is true. The condition must be either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; after evaluating generator expressions.</source>
          <target state="translated">조건이 true 인 경우에만 특정 구성에 대한 출력 파일을 생성하십시오. 생성기 표현식을 평가 한 후 조건은 &lt;code&gt;0&lt;/code&gt; 또는 &lt;code&gt;1&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="4070bae39a6b450bedb0eb8e53d56bf979a79c66" translate="yes" xml:space="preserve">
          <source>GenerateExportHeader</source>
          <target state="translated">GenerateExportHeader</target>
        </trans-unit>
        <trans-unit id="f3791253c78d7ed107c926a452bd30c3c62690cf" translate="yes" xml:space="preserve">
          <source>Generated Installation Script</source>
          <target state="translated">생성 된 설치 스크립트</target>
        </trans-unit>
        <trans-unit id="8127550555977edf49fe2ac1bc6c6c702c06836c" translate="yes" xml:space="preserve">
          <source>Generated buildsystems should generally be treated as read-only. The CMake files as a primary artifact should completely specify the buildsystem and there should be no reason to populate properties manually in an IDE for example after generating the buildsystem. CMake will periodically rewrite the generated buildsystem, so modifications by users will be overwritten.</source>
          <target state="translated">생성 된 빌드 시스템은 일반적으로 읽기 전용으로 처리되어야합니다. 기본 아티팩트 인 CMake 파일은 빌드 시스템을 완전히 지정해야하며 예를 들어 빌드 시스템을 생성 한 후 IDE에서 속성을 수동으로 채울 이유가 없어야합니다. CMake는 생성 된 빌드 시스템을 주기적으로 다시 작성하므로 사용자가 수정 한 내용을 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="c2179812f7cf0d55a8cce3064b0f3f5b0a8fe66f" translate="yes" xml:space="preserve">
          <source>Generated sources may be hidden in some IDE tools, while in others they might be shown. For the special case of sources generated by CMake&amp;rsquo;s &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-0-prop_tgt:AUTOMOC&quot;&gt;&lt;code&gt;AUTOMOC&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-0-prop_tgt:AUTORCC&quot;&gt;&lt;code&gt;AUTORCC&lt;/code&gt;&lt;/a&gt; functionality, the &lt;a href=&quot;../prop_gbl/autogen_source_group#prop_gbl:AUTOGEN_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOGEN_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOGEN_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../prop_gbl/automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../prop_gbl/autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; target properties may influence where the generated sources are grouped in the project&amp;rsquo;s file lists.</source>
          <target state="translated">생성 된 소스는 일부 IDE 도구에서 숨겨 질 수 있지만 다른 도구에서는 표시 될 수 있습니다. CMake의 &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-0-prop_tgt:AUTOMOC&quot;&gt; &lt;code&gt;AUTOMOC&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-0-prop_tgt:AUTORCC&quot;&gt; &lt;code&gt;AUTORCC&lt;/code&gt; &lt;/a&gt; 기능으로 생성 된 특수한 소스의 경우 &lt;a href=&quot;../prop_gbl/autogen_source_group#prop_gbl:AUTOGEN_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOGEN_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTOGEN_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../prop_gbl/automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../prop_gbl/autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; 대상 속성이 생성 된 소스가 프로젝트의 파일 목록에서 그룹화되는 위치에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97c61032b96fd81c473efdb5fcc6df7a3a07ad0c" translate="yes" xml:space="preserve">
          <source>Generated sources may be hidden in some IDE tools, while in others they might be shown. For the special case of sources generated by CMake&amp;rsquo;s &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt;&lt;code&gt;AUTOMOC&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-1-prop_tgt:AUTORCC&quot;&gt;&lt;code&gt;AUTORCC&lt;/code&gt;&lt;/a&gt; functionality, the &lt;a href=&quot;../prop_gbl/autogen_source_group#prop_gbl:AUTOGEN_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOGEN_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOGEN_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../prop_gbl/automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../prop_gbl/autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; target properties may influence where the generated sources are grouped in the project&amp;rsquo;s file lists.</source>
          <target state="translated">생성 된 소스는 일부 IDE 도구에서 숨겨지고 다른 도구에서는 표시 될 수 있습니다. CMake의 &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt; &lt;code&gt;AUTOMOC&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-1-prop_tgt:AUTORCC&quot;&gt; &lt;code&gt;AUTORCC&lt;/code&gt; &lt;/a&gt; 기능에 의해 생성 된 소스의 특별한 경우의 경우 &lt;a href=&quot;../prop_gbl/autogen_source_group#prop_gbl:AUTOGEN_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOGEN_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTOGEN_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../prop_gbl/automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../prop_gbl/autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt; &lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt; &lt;/a&gt; 대상 속성은 생성 된 소스가 프로젝트의 파일 목록에서 그룹화되는 위치에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbdec49bd409e39a744a5d01a62e4e89a52a47d2" translate="yes" xml:space="preserve">
          <source>Generated sources may be hidden in some IDE tools, while in others they might be shown. For the special case of sources generated by CMake's &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt;&lt;code&gt;AUTOMOC&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../prop_tgt/autorcc#prop_tgt:AUTORCC&quot; id=&quot;index-1-prop_tgt:AUTORCC&quot;&gt;&lt;code&gt;AUTORCC&lt;/code&gt;&lt;/a&gt; functionality, the &lt;a href=&quot;../prop_gbl/autogen_source_group#prop_gbl:AUTOGEN_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOGEN_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOGEN_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../prop_gbl/automoc_source_group#prop_gbl:AUTOMOC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTOMOC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTOMOC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../prop_gbl/autorcc_source_group#prop_gbl:AUTORCC_SOURCE_GROUP&quot; id=&quot;index-0-prop_gbl:AUTORCC_SOURCE_GROUP&quot;&gt;&lt;code&gt;AUTORCC_SOURCE_GROUP&lt;/code&gt;&lt;/a&gt; target properties may influence where the generated sources are grouped in the project's file lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498b32e530f5074026af3a07cc462eb70331aec" translate="yes" xml:space="preserve">
          <source>Generates a file called &lt;code&gt;other_name_export.h&lt;/code&gt; containing the macros &lt;code&gt;OTHER_NAME_EXPORT&lt;/code&gt;, &lt;code&gt;OTHER_NAME_NO_EXPORT&lt;/code&gt; and &lt;code&gt;OTHER_NAME_DEPRECATED&lt;/code&gt; etc.</source>
          <target state="translated">매크로 &lt;code&gt;OTHER_NAME_EXPORT&lt;/code&gt; , &lt;code&gt;OTHER_NAME_NO_EXPORT&lt;/code&gt; 및 &lt;code&gt;OTHER_NAME_DEPRECATED&lt;/code&gt; 등을 포함하는 &lt;code&gt;other_name_export.h&lt;/code&gt; 파일을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="73cb5afedda8fd5fb9e0ba24b93c2f600d4a5e46" translate="yes" xml:space="preserve">
          <source>Generates code for avx2 and avx512skx target architectures.</source>
          <target state="translated">avx2 및 avx512skx 대상 아키텍처에 대한 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="750e3d25dd6fc36f1f819d9e50cb018fc3aaa055" translate="yes" xml:space="preserve">
          <source>Generates code for real and virtual architectures &lt;code&gt;30&lt;/code&gt;, &lt;code&gt;50&lt;/code&gt; and &lt;code&gt;72&lt;/code&gt;.</source>
          <target state="translated">실제 및 가상 아키텍처 &lt;code&gt;30&lt;/code&gt; , &lt;code&gt;50&lt;/code&gt; 및 &lt;code&gt;72&lt;/code&gt; 에 대한 코드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="66b7c2ba075a2a8f0b66a75e9750593f29c2143d" translate="yes" xml:space="preserve">
          <source>Generates code for real architecture &lt;code&gt;70&lt;/code&gt; and virtual architecture &lt;code&gt;72&lt;/code&gt;.</source>
          <target state="translated">실제 아키텍처 ( &lt;code&gt;70&lt;/code&gt; ) 및 가상 아키텍처 ( &lt;code&gt;72&lt;/code&gt; )에 대한 코드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="3a868dbab011aa5f72d6f0419cc71833a38b3484" translate="yes" xml:space="preserve">
          <source>Generates custom targets for the specified steps and prevent these targets from having the usual dependencies applied to them. If this option is not specified, the default value is taken from the &lt;code&gt;EP_INDEPENDENT_STEP_TARGETS&lt;/code&gt; directory property. This option is mostly useful for allowing individual steps to be driven independently, such as for a CDash setup where each step should be initiated and reported individually rather than as one whole build. See &lt;a href=&quot;#command:externalproject_add_steptargets&quot; id=&quot;index-2-command:externalproject_add_steptargets&quot;&gt;&lt;code&gt;ExternalProject_Add_StepTargets()&lt;/code&gt;&lt;/a&gt; below for further discussion of the effects of this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0e5604afd49a9dd8a09590d7585ccad2ea420a" translate="yes" xml:space="preserve">
          <source>Generates the link object required by separable compilation from the given object files. This is called automatically for &lt;code&gt;cuda_add_executable()&lt;/code&gt; and &lt;code&gt;cuda_add_library()&lt;/code&gt;, but can be called manually when using &lt;code&gt;cuda_wrap_srcs()&lt;/code&gt; directly. When called from &lt;code&gt;cuda_add_library()&lt;/code&gt; or &lt;code&gt;cuda_add_executable()&lt;/code&gt; the &lt;code&gt;&amp;lt;nvcc_flags&amp;gt;&lt;/code&gt; passed in are the same as the flags passed in via the &lt;code&gt;OPTIONS&lt;/code&gt; argument. The only nvcc flag added automatically is the bitness flag as specified by &lt;code&gt;CUDA_64_BIT_DEVICE_CODE&lt;/code&gt;. Note that this is a function instead of a macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745117c70eca0037812c61fa7cb5a43452328671" translate="yes" xml:space="preserve">
          <source>Generates the macros &lt;code&gt;VTK_SOMELIB_EXPORT&lt;/code&gt; etc.</source>
          <target state="translated">매크로 &lt;code&gt;VTK_SOMELIB_EXPORT&lt;/code&gt; 등을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="cd94900d926914d905ec350c17f9e295c9a2fec5" translate="yes" xml:space="preserve">
          <source>Generating Files</source>
          <target state="translated">파일 생성</target>
        </trans-unit>
        <trans-unit id="9889a4f8503eee54ec5c78d13e3de4e7db2e0c17" translate="yes" xml:space="preserve">
          <source>Generating Graphviz files</source>
          <target state="translated">Graphviz 파일 생성</target>
        </trans-unit>
        <trans-unit id="6ac8f4dd59ea6035ff11419451e534b0b82f40ec" translate="yes" xml:space="preserve">
          <source>Generating a Buildsystem</source>
          <target state="translated">빌드 시스템 생성</target>
        </trans-unit>
        <trans-unit id="14127d87e9e8e6a7f5884ba24fe9fec50c318b70" translate="yes" xml:space="preserve">
          <source>Generating a Package Configuration File</source>
          <target state="translated">패키지 구성 파일 생성</target>
        </trans-unit>
        <trans-unit id="a794470f3c76f45a05d4f5e39222ec7d22e6f421" translate="yes" xml:space="preserve">
          <source>Generating a Package Version File</source>
          <target state="translated">패키지 버전 파일 생성</target>
        </trans-unit>
        <trans-unit id="8d441fb5f62f87aca029a4bb398180b09920a3f5" translate="yes" xml:space="preserve">
          <source>Generation</source>
          <target state="translated">Generation</target>
        </trans-unit>
        <trans-unit id="1d20de03126b297e05c13a7d280f33e24c72c537" translate="yes" xml:space="preserve">
          <source>Generator</source>
          <target state="translated">Generator</target>
        </trans-unit>
        <trans-unit id="217dffa188c85186f3dde4d07c906c09c058f848" translate="yes" xml:space="preserve">
          <source>Generator Expressions</source>
          <target state="translated">생성기 표현식</target>
        </trans-unit>
        <trans-unit id="b078749c5f4a9972c059b40caf71ad301ee00820" translate="yes" xml:space="preserve">
          <source>Generator expressions are allowed in the context of many target properties, such as &lt;a href=&quot;../prop_tgt/link_libraries#prop_tgt:LINK_LIBRARIES&quot; id=&quot;index-0-prop_tgt:LINK_LIBRARIES&quot;&gt;&lt;code&gt;LINK_LIBRARIES&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-0-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS&quot; id=&quot;index-0-prop_tgt:COMPILE_DEFINITIONS&quot;&gt;&lt;code&gt;COMPILE_DEFINITIONS&lt;/code&gt;&lt;/a&gt; and others. They may also be used when using commands to populate those properties, such as &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../command/target_include_directories#command:target_include_directories&quot; id=&quot;index-0-command:target_include_directories&quot;&gt;&lt;code&gt;target_include_directories()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../command/target_compile_definitions#command:target_compile_definitions&quot; id=&quot;index-0-command:target_compile_definitions&quot;&gt;&lt;code&gt;target_compile_definitions()&lt;/code&gt;&lt;/a&gt; and others.</source>
          <target state="translated">생성기 표현식은 &lt;a href=&quot;../prop_tgt/link_libraries#prop_tgt:LINK_LIBRARIES&quot; id=&quot;index-0-prop_tgt:LINK_LIBRARIES&quot;&gt; &lt;code&gt;LINK_LIBRARIES&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-0-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS&quot; id=&quot;index-0-prop_tgt:COMPILE_DEFINITIONS&quot;&gt; &lt;code&gt;COMPILE_DEFINITIONS&lt;/code&gt; &lt;/a&gt; 등과 같은 많은 대상 속성의 컨텍스트에서 허용됩니다 . 또한 &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../command/target_include_directories#command:target_include_directories&quot; id=&quot;index-0-command:target_include_directories&quot;&gt; &lt;code&gt;target_include_directories()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../command/target_compile_definitions#command:target_compile_definitions&quot; id=&quot;index-0-command:target_compile_definitions&quot;&gt; &lt;code&gt;target_compile_definitions()&lt;/code&gt; &lt;/a&gt; 등과 같은 속성을 채우는 명령을 사용할 때 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e22fc90d2bd9ffae07f263ae665425b57fa1f93" translate="yes" xml:space="preserve">
          <source>Generator expressions are evaluated during build system generation to produce information specific to each build configuration.</source>
          <target state="translated">생성기 표현식은 빌드 시스템 생성 중에 평가되어 각 빌드 구성에 특정한 정보를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3ab4970882a19c420200f40d2e1a5aea28ef6fd5" translate="yes" xml:space="preserve">
          <source>Generator expressions are supported.</source>
          <target state="translated">생성기 표현식이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="2a2ad88db5facfd2e23bc2cd65027926178c16f5" translate="yes" xml:space="preserve">
          <source>Generator expressions can be nested, as shown in most of the examples below.</source>
          <target state="translated">아래 예의 대부분에 표시된 것처럼 생성기 표현식을 중첩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a027a52ac0a773482862864321b3c7662297f36f" translate="yes" xml:space="preserve">
          <source>Generator expressions have the form &lt;code&gt;$&amp;lt;...&amp;gt;&lt;/code&gt;. To avoid confusion, this page deviates from most of the CMake documentation in that it omits angular brackets &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; around placeholders like &lt;code&gt;condition&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;target&lt;/code&gt;, among others.</source>
          <target state="translated">생성기 표현식의 형식은 &lt;code&gt;$&amp;lt;...&amp;gt;&lt;/code&gt; 입니다. 혼동을 피하기 위해이 페이지 는 &lt;code&gt;condition&lt;/code&gt; , &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;target&lt;/code&gt; 과 같은 자리 표시 자 주위에 꺾쇠 괄호 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 를 생략한다는 점에서 대부분의 CMake 설명서와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="f25e293e244f548cc1355c7526795d977581c6db" translate="yes" xml:space="preserve">
          <source>Generator expressions should be preferred instead of setting the alternative per-configuration property.</source>
          <target state="translated">대체 구성 속성을 설정하는 대신 생성기 표현식을 선호해야합니다.</target>
        </trans-unit>
        <trans-unit id="a07e1c0df5dfbf7ad3988809863a11553d09775e" translate="yes" xml:space="preserve">
          <source>Generator expressions should be preferred instead of setting this property.</source>
          <target state="translated">이 속성을 설정하는 대신 생성기 식을 선호해야합니다.</target>
        </trans-unit>
        <trans-unit id="69d0012b8b57103c186d56581c01b4ef6dec8482" translate="yes" xml:space="preserve">
          <source>Generator specified in the preset&amp;rsquo;s &lt;code&gt;generator&lt;/code&gt; field.</source>
          <target state="translated">사전 설정의 &lt;code&gt;generator&lt;/code&gt; 필드에 지정된 생성기 .</target>
        </trans-unit>
        <trans-unit id="ada015ea84a5b424a4aa17faf0cc68f4db5fd83a" translate="yes" xml:space="preserve">
          <source>Generator specified in the preset's &lt;code&gt;generator&lt;/code&gt; field. For build and test presets, this will evaluate to the generator specified by &lt;code&gt;configurePreset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472f1d607575003a64a3164f50586cbda5177eb4" translate="yes" xml:space="preserve">
          <source>Generator&amp;rsquo;s file for this target.</source>
          <target state="translated">이 대상의 생성기 파일입니다.</target>
        </trans-unit>
        <trans-unit id="42f1ed9bb250dbc2071b40195c408f07cc5f8079" translate="yes" xml:space="preserve">
          <source>Generator's file for this target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d28e1ab02cf609d7da3b09658b136d73abdbb1" translate="yes" xml:space="preserve">
          <source>Generator-specific instance specification provided by user.</source>
          <target state="translated">사용자가 제공 한 생성자 별 인스턴스 사양.</target>
        </trans-unit>
        <trans-unit id="e4fddf6322e5ab699d3bffdbc51cef6ff631e2f7" translate="yes" xml:space="preserve">
          <source>Generator-specific target platform specification provided by user.</source>
          <target state="translated">사용자가 제공 한 발전기 별 대상 플랫폼 사양.</target>
        </trans-unit>
        <trans-unit id="a3e705cc61a19f33d7c9c030f107a70569966485" translate="yes" xml:space="preserve">
          <source>Generators</source>
          <target state="translated">Generators</target>
        </trans-unit>
        <trans-unit id="ff7613e54fc90271b8a71da3dfd9a50e5acd96c2" translate="yes" xml:space="preserve">
          <source>Generic</source>
          <target state="translated">Generic</target>
        </trans-unit>
        <trans-unit id="c0a2674fcda8600d0f9c20321e06825eac8e9344" translate="yes" xml:space="preserve">
          <source>Generic attributes, as defined in &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf&quot;&gt;N2761&lt;/a&gt;.</source>
          <target state="translated">일반 속성으로 정의 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf&quot;&gt;N2761&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="891fdda7ee944a3667480ab207f9f14002223cd1" translate="yes" xml:space="preserve">
          <source>Generic lambdas, as defined in &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html&quot;&gt;N3649&lt;/a&gt;.</source>
          <target state="translated">일반 람다, 같은 정의 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html&quot;&gt;N3649&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="230d70935166891abd03504ed52d04c79b677fcd" translate="yes" xml:space="preserve">
          <source>Get a command line to build the current project. This is mainly intended for internal use by the &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-0-module:CTest&quot;&gt;&lt;code&gt;CTest&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">현재 프로젝트를 빌드하는 명령 줄을 가져옵니다. 이것은 주로 &lt;a href=&quot;../module/ctest#module:CTest&quot; id=&quot;index-0-module:CTest&quot;&gt; &lt;code&gt;CTest&lt;/code&gt; &lt;/a&gt; 모듈 에서 내부적으로 사용하기위한 것입니다 .</target>
        </trans-unit>
        <trans-unit id="f5ffecb79c03086bf1c881dd9ccbe17dd2c21dca" translate="yes" xml:space="preserve">
          <source>Get a global property of the CMake instance.</source>
          <target state="translated">CMake 인스턴스의 전역 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ae1dc0406bffb0de35cb8ffd03ecf2585cac7800" translate="yes" xml:space="preserve">
          <source>Get a property for a source file.</source>
          <target state="translated">소스 파일의 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="995b2fac676bb8b6be744227eef362f69ee05773" translate="yes" xml:space="preserve">
          <source>Get a property from a target.</source>
          <target state="translated">대상에서 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b56e016ab205cd661c7e6a5926e991647ba616cf" translate="yes" xml:space="preserve">
          <source>Get a property from a target. The value of the property is stored in the variable &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt;. If the target property is not found, the behavior depends on whether it has been defined to be an &lt;code&gt;INHERITED&lt;/code&gt; property or not (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;). Non-inherited properties will set &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;VAR&amp;gt;-NOTFOUND&lt;/code&gt;, whereas inherited properties will search the relevant parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command and if still unable to find the property, &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; will be set to an empty string.</source>
          <target state="translated">대상에서 속성을 가져옵니다. 속성 값은 &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; 변수에 저장됩니다 . 대상 속성을 찾을 수없는 경우 동작은 &lt;code&gt;INHERITED&lt;/code&gt; 속성 으로 정의되었는지 여부에 따라 다릅니다 ( &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 참조 ). 상속되지 않은 속성은 &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; 를 &lt;code&gt;&amp;lt;VAR&amp;gt;-NOTFOUND&lt;/code&gt; 로 설정하는 반면, 상속 된 속성은 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령에 대해 설명 된대로 관련 상위 범위를 검색하며 여전히 속성을 찾을 수없는 경우 &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; 은 빈 문자열.</target>
        </trans-unit>
        <trans-unit id="415bf5d53ad829bae6419029f8b5164bd0ca9d19" translate="yes" xml:space="preserve">
          <source>Get a property from a target. The value of the property is stored in the variable &lt;code&gt;VAR&lt;/code&gt;. If the target property is not found, the behavior depends on whether it has been defined to be an &lt;code&gt;INHERITED&lt;/code&gt; property or not (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;). Non-inherited properties will set &lt;code&gt;VAR&lt;/code&gt; to &lt;code&gt;NOTFOUND&lt;/code&gt;, whereas inherited properties will search the relevant parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command and if still unable to find the property, &lt;code&gt;VAR&lt;/code&gt; will be set to an empty string.</source>
          <target state="translated">대상에서 속성을 가져옵니다. 특성 값은 변수 &lt;code&gt;VAR&lt;/code&gt; 에 저장됩니다 . 대상 속성을 찾을 수없는 경우 동작은 &lt;code&gt;INHERITED&lt;/code&gt; 속성 으로 정의되었는지 여부에 따라 달라집니다 ( &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 참조 ). 상속되지 않은 속성은 &lt;code&gt;VAR&lt;/code&gt; 을 &lt;code&gt;NOTFOUND&lt;/code&gt; 로 설정 하는 반면 상속 된 속성은 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령에 설명 된대로 관련 상위 범위를 검색하며 여전히 속성을 찾을 수없는 경우 &lt;code&gt;VAR&lt;/code&gt; 은 빈 문자열로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="d4594566ae69da291c89b9fc900b48ffbd9f5622" translate="yes" xml:space="preserve">
          <source>Get a property from the test. The value of the property is stored in the variable &lt;code&gt;VAR&lt;/code&gt;. If the test property is not found, the behavior depends on whether it has been defined to be an &lt;code&gt;INHERITED&lt;/code&gt; property or not (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;). Non-inherited properties will set &lt;code&gt;VAR&lt;/code&gt; to &quot;NOTFOUND&quot;, whereas inherited properties will search the relevant parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command and if still unable to find the property, &lt;code&gt;VAR&lt;/code&gt; will be set to an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c082e1ac641e64b08b9636ab809aa45ab9b8e968" translate="yes" xml:space="preserve">
          <source>Get a property from the test. The value of the property is stored in the variable &lt;code&gt;VAR&lt;/code&gt;. If the test property is not found, the behavior depends on whether it has been defined to be an &lt;code&gt;INHERITED&lt;/code&gt; property or not (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;). Non-inherited properties will set &lt;code&gt;VAR&lt;/code&gt; to &amp;ldquo;NOTFOUND&amp;rdquo;, whereas inherited properties will search the relevant parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command and if still unable to find the property, &lt;code&gt;VAR&lt;/code&gt; will be set to an empty string.</source>
          <target state="translated">시험에서 재산을 얻으십시오. 특성 값은 변수 &lt;code&gt;VAR&lt;/code&gt; 에 저장됩니다 . 테스트 특성을 찾을 수없는 경우 동작은 &lt;code&gt;INHERITED&lt;/code&gt; 특성 으로 정의되었는지 여부에 따라 다릅니다 ( &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 참조 ). 비 상속 된 속성을 설정합니다 &lt;code&gt;VAR&lt;/code&gt; 을 에 기재 한 바와 같이 상속 된 속성이 관련 상위 범위를 검색하는 반면, &quot;NOTFOUND&quot;에 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령과 속성을 찾을 수없는 여전히 경우, &lt;code&gt;VAR&lt;/code&gt; 는 빈 문자열로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="909668022005ccd0a307cbeea9d203fb9b7bb33a" translate="yes" xml:space="preserve">
          <source>Get a property of &lt;code&gt;DIRECTORY&lt;/code&gt; scope.</source>
          <target state="translated">&lt;code&gt;DIRECTORY&lt;/code&gt; 범위 의 속성을 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="75c86e8f61d56a68791e127748dd564d3594e0bd" translate="yes" xml:space="preserve">
          <source>Get a property of the test.</source>
          <target state="translated">테스트의 속성을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="f659b0e51ad6eca33c055e86d0bb86b4fe27b6e6" translate="yes" xml:space="preserve">
          <source>Get a property.</source>
          <target state="translated">재산을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="457af1379898b07a1d5b094bfbfbda524eade7c2" translate="yes" xml:space="preserve">
          <source>Get a specific component of a full filename.</source>
          <target state="translated">전체 파일 이름의 특정 구성 요소를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7e1f2db6974b15f6f412749c0a1e8561e8ec4301" translate="yes" xml:space="preserve">
          <source>Get a variable definition from a directory. This form is useful to get a variable definition from another directory.</source>
          <target state="translated">디렉토리에서 변수 정의를 가져옵니다. 이 형식은 다른 디렉토리에서 변수 정의를 얻는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f9534783e4c242e1224d0604b567cd003e946e77" translate="yes" xml:space="preserve">
          <source>Get an element from &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; at the location given by the list of &lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; arguments. Array and object elements will be returned as a JSON string. Boolean elements will be returned as &lt;code&gt;ON&lt;/code&gt; or &lt;code&gt;OFF&lt;/code&gt;. Null elements will be returned as an empty string. Number and string types will be returned as strings.</source>
          <target state="translated">&lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; 인수 목록에 지정된 위치의 &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; 에서 요소를 가져옵니다 . 배열 및 개체 요소는 JSON 문자열로 반환됩니다. 부울 요소는 &lt;code&gt;ON&lt;/code&gt; 또는 &lt;code&gt;OFF&lt;/code&gt; 로 반환됩니다 . Null 요소는 빈 문자열로 반환됩니다. 숫자 및 문자열 유형은 문자열로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6834fdd0e143789c157b1a2441ca081a584683d5" translate="yes" xml:space="preserve">
          <source>Get manually added dependencies to other top-level targets.</source>
          <target state="translated">다른 최상위 대상에 수동으로 추가 된 종속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="6e88bd77f5d00a7952d0e022ae4514563a01dec8" translate="yes" xml:space="preserve">
          <source>Get the direct/non-system prerequisites of the &lt;code&gt;&amp;lt;resolved_embedded_item&amp;gt;&lt;/code&gt;. For each prerequisite, change the way it is referenced to the value of the &lt;code&gt;_EMBEDDED_ITEM&lt;/code&gt; keyed variable for that prerequisite. (Most likely changing to an &lt;code&gt;@executable_path&lt;/code&gt; style reference.)</source>
          <target state="translated">&lt;code&gt;&amp;lt;resolved_embedded_item&amp;gt;&lt;/code&gt; 의 직접 / 비 시스템 전제 조건을 가져 오십시오 . 각 전제 조건에 대해 해당 전제 조건 의 &lt;code&gt;_EMBEDDED_ITEM&lt;/code&gt; 키 변수 의 값을 참조하는 방식을 변경하십시오 . 대부분 &lt;code&gt;@executable_path&lt;/code&gt; 스타일 참조로 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f5a182d9ac540340f107b8a94947766b979a201" translate="yes" xml:space="preserve">
          <source>Get the length of an element in &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; at the location given by the list of &lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; arguments. Requires an element of array or object type.</source>
          <target state="translated">&lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; 인수 목록에 지정된 위치 에서 &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; 의 요소 길이 를 가져옵니다 . 배열 또는 개체 유형의 요소가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5df4c540ae0257eabb835a1a57d74eb7262258ba" translate="yes" xml:space="preserve">
          <source>Get the list of shared library files required by &amp;lt;target&amp;gt;. The list in the variable named &amp;lt;prerequisites_var&amp;gt; should be empty on first entry to this function. On exit, &amp;lt;prerequisites_var&amp;gt; will contain the list of required shared library files.</source>
          <target state="translated">&amp;lt;target&amp;gt;에 필요한 공유 라이브러리 파일 목록을 가져옵니다. &amp;lt;prerequisites_var&amp;gt; 변수의 목록은이 함수를 처음 시작할 때 비어 있어야합니다. 종료시 &amp;lt;prerequisites_var&amp;gt;에는 필수 공유 라이브러리 파일 목록이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="82a35616ef6ff0a2e30452a178f725a715eeb624" translate="yes" xml:space="preserve">
          <source>Get the name of the &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt;-th member in &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; at the location given by the list of &lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; arguments. Requires an element of object type.</source>
          <target state="translated">&lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; 인수 목록이 제공하는 위치 에서 &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; 의 &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt; - 번째 멤버 의 이름을 가져옵니다 . 개체 유형의 요소가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="e77e512ed7352b099ba4e3f1c0adc5d604a9c31a" translate="yes" xml:space="preserve">
          <source>Get the type of an element in &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; at the location given by the list of &lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; arguments. The &lt;code&gt;&amp;lt;out-var&amp;gt;&lt;/code&gt; will be set to one of &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;NUMBER&lt;/code&gt;, &lt;code&gt;STRING&lt;/code&gt;, &lt;code&gt;BOOLEAN&lt;/code&gt;, &lt;code&gt;ARRAY&lt;/code&gt;, or &lt;code&gt;OBJECT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;member|index&amp;gt;&lt;/code&gt; 인수 목록에 지정된 위치 에서 &lt;code&gt;&amp;lt;json-string&amp;gt;&lt;/code&gt; 의 요소 유형을 가져 옵니다 . &lt;code&gt;&amp;lt;out-var&amp;gt;&lt;/code&gt; 중 하나로 설정됩니다 &lt;code&gt;NULL&lt;/code&gt; , &lt;code&gt;NUMBER&lt;/code&gt; , &lt;code&gt;STRING&lt;/code&gt; , &lt;code&gt;BOOLEAN&lt;/code&gt; , &lt;code&gt;ARRAY&lt;/code&gt; , 또는 &lt;code&gt;OBJECT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="941f4def77443762a65597419952cc38cccf93af" translate="yes" xml:space="preserve">
          <source>GetPrerequisites</source>
          <target state="translated">GetPrerequisites</target>
        </trans-unit>
        <trans-unit id="e33439743b5804a10c5dd006664a1f473ccfde7d" translate="yes" xml:space="preserve">
          <source>Gets a global property from the CMake instance. The value of the &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; is stored in the variable &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt;. If the property is not found, &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt; will be set to &lt;code&gt;NOTFOUND&lt;/code&gt;. See the &lt;a href=&quot;../manual/cmake-properties.7#manual:cmake-properties(7)&quot; id=&quot;index-0-manual:cmake-properties(7)&quot;&gt;&lt;code&gt;cmake-properties(7)&lt;/code&gt;&lt;/a&gt; manual for available properties.</source>
          <target state="translated">CMake 인스턴스에서 전역 속성을 가져옵니다. &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; 값은 &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt; 변수에 저장됩니다 . 속성을 찾을 수 없으면 &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt; 이 &lt;code&gt;NOTFOUND&lt;/code&gt; 로 설정됩니다 . 사용 가능한 등록 &lt;a href=&quot;../manual/cmake-properties.7#manual:cmake-properties(7)&quot; id=&quot;index-0-manual:cmake-properties(7)&quot;&gt; &lt;code&gt;cmake-properties(7)&lt;/code&gt; &lt;/a&gt; 는 cmake-properties (7) 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ddae00599ac80bd9d9c8012ae1169f68899dc87a" translate="yes" xml:space="preserve">
          <source>Gets a property from a source file. The value of the property is stored in the specified &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt;. If the source property is not found, the behavior depends on whether it has been defined to be an &lt;code&gt;INHERITED&lt;/code&gt; property or not (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;). Non-inherited properties will set &lt;code&gt;variable&lt;/code&gt; to &lt;code&gt;NOTFOUND&lt;/code&gt;, whereas inherited properties will search the relevant parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command and if still unable to find the property, &lt;code&gt;variable&lt;/code&gt; will be set to an empty string.</source>
          <target state="translated">소스 파일에서 속성을 가져옵니다. 속성 값은 지정된 &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; 에 저장됩니다 . 소스 속성을 찾을 수없는 경우 동작은 &lt;code&gt;INHERITED&lt;/code&gt; 속성 으로 정의되었는지 여부에 따라 다릅니다 ( &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 참조 ). 상속되지 않은 속성은 &lt;code&gt;variable&lt;/code&gt; 를 &lt;code&gt;NOTFOUND&lt;/code&gt; 로 설정 하는 반면, 상속 된 속성은 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령에 설명 된대로 관련 상위 범위를 검색하며 여전히 속성을 찾을 수없는 경우 &lt;code&gt;variable&lt;/code&gt; 는 빈 문자열로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3dc809fc960e23a8f6bd156ab5493ce879daa89b" translate="yes" xml:space="preserve">
          <source>Gets a property from a source file. The value of the property is stored in the variable &lt;code&gt;VAR&lt;/code&gt;. If the source property is not found, the behavior depends on whether it has been defined to be an &lt;code&gt;INHERITED&lt;/code&gt; property or not (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;). Non-inherited properties will set &lt;code&gt;VAR&lt;/code&gt; to &amp;ldquo;NOTFOUND&amp;rdquo;, whereas inherited properties will search the relevant parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command and if still unable to find the property, &lt;code&gt;VAR&lt;/code&gt; will be set to an empty string.</source>
          <target state="translated">소스 파일에서 속성을 가져옵니다. 특성 값은 변수 &lt;code&gt;VAR&lt;/code&gt; 에 저장됩니다 . 소스 특성을 찾을 수없는 경우 동작은 &lt;code&gt;INHERITED&lt;/code&gt; 특성 으로 정의되었는지 여부에 따라 다릅니다 ( &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 참조 ). 비 상속 된 속성을 설정합니다 &lt;code&gt;VAR&lt;/code&gt; 을 에 기재 한 바와 같이 상속 된 속성이 관련 상위 범위를 검색하는 반면, &quot;NOTFOUND&quot;에 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령과 속성을 찾을 수없는 여전히 경우, &lt;code&gt;VAR&lt;/code&gt; 는 빈 문자열로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="d4bd97b7e4f8dccc395f1af5fc06a398a6634dcc" translate="yes" xml:space="preserve">
          <source>Gets one property from one object in a scope.</source>
          <target state="translated">범위의 한 개체에서 하나의 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="540168ccd31e8b4c84acc4c96efaea986a0ad954" translate="yes" xml:space="preserve">
          <source>Git branch name, tag or commit hash. Note that branch names and tags should generally be specified as remote names (i.e. &lt;code&gt;origin/myBranch&lt;/code&gt; rather than simply &lt;code&gt;myBranch&lt;/code&gt;). This ensures that if the remote end has its tag moved or branch rebased or history rewritten, the local clone will still be updated correctly. In general, however, specifying a commit hash should be preferred for a number of reasons:</source>
          <target state="translated">힘내 분기 이름, 태그 또는 커밋 해시. 브랜치 이름과 태그는 일반적으로 원격 이름 (예 : 단순히 &lt;code&gt;myBranch&lt;/code&gt; 가 아닌 &lt;code&gt;origin/myBranch&lt;/code&gt; ) 으로 지정해야합니다 . 이렇게하면 원격 끝에서 태그를 이동했거나 분기 기반 또는 기록을 다시 쓴 경우에도 로컬 클론이 올바르게 업데이트됩니다. 그러나 일반적으로 다음과 같은 여러 가지 이유로 커밋 해시를 지정하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="98a305e7891e3830c8269c3ff6ff9a64d64119d9" translate="yes" xml:space="preserve">
          <source>Give the build step access to the terminal.</source>
          <target state="translated">빌드 단계에 터미널에 대한 액세스 권한을 부여하십시오.</target>
        </trans-unit>
        <trans-unit id="f1700fd2b02d645b76a9b72d2d42c7fecff1769b" translate="yes" xml:space="preserve">
          <source>Give the configure step access to the terminal.</source>
          <target state="translated">터미널에 대한 구성 단계 액세스를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="b3887b1cd9f4ebcfabbbc4197a1de8f193b34c29" translate="yes" xml:space="preserve">
          <source>Give the download step access to the terminal.</source>
          <target state="translated">터미널에 다운로드 단계 액세스 권한을 부여하십시오.</target>
        </trans-unit>
        <trans-unit id="ae7d512969c5dea1dd3194d9500dabacdb91b1f2" translate="yes" xml:space="preserve">
          <source>Give the install step access to the terminal.</source>
          <target state="translated">설치 단계에 터미널에 대한 액세스 권한을 부여하십시오.</target>
        </trans-unit>
        <trans-unit id="1af29228967413a12835f82fe2221b30d1134250" translate="yes" xml:space="preserve">
          <source>Give the patch step access to the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b740c0ae10ce35debd2566025ac1e1e5bc348bd" translate="yes" xml:space="preserve">
          <source>Give the test step access to the terminal.</source>
          <target state="translated">테스트 단계에 터미널에 대한 액세스 권한을 부여하십시오.</target>
        </trans-unit>
        <trans-unit id="d098c3812010a2ced994b81f55d6d94368b928a5" translate="yes" xml:space="preserve">
          <source>Give the update step access to the terminal.</source>
          <target state="translated">터미널에 대한 업데이트 단계 액세스를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="17123d8c9824cd13aca4e523709b3ccc094078dd" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; file name, generate &lt;code&gt;&amp;lt;key_var&amp;gt;&lt;/code&gt; key that should be unique considering the set of libraries that need copying or fixing up to make a bundle standalone. This is essentially the file name including extension with &lt;code&gt;.&lt;/code&gt; replaced by &lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">을 감안할 때 &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; 파일 이름, 생성 &lt;code&gt;&amp;lt;key_var&amp;gt;&lt;/code&gt; 복사하거나 번들 독립을 위해 고정 필요 라이브러리의 집합을 고려 고유해야합니다 키를 누릅니다. 기본적으로 확장자를 포함하는 파일 이름입니다 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;_&lt;/code&gt; 로 교체</target>
        </trans-unit>
        <trans-unit id="c799792334c6746264f214753c4cfce7c1f0304c" translate="yes" xml:space="preserve">
          <source>Given the following partial example:</source>
          <target state="translated">다음과 같은 부분 예제가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="72a9beb547d81208865dabbf298d4d78d51f8f27" translate="yes" xml:space="preserve">
          <source>Given the list of files &lt;code&gt;&amp;lt;file&amp;gt;...&lt;/code&gt; this macro generates custom commands that generate either PTX or linkable objects (use &lt;code&gt;PTX&lt;/code&gt; or &lt;code&gt;OBJ&lt;/code&gt; for the &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; argument to switch). Files that don't end with &lt;code&gt;.cu&lt;/code&gt; or have the &lt;code&gt;HEADER_FILE_ONLY&lt;/code&gt; property are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4975cd64a92e88880758085eef7772db2bdb4f4d" translate="yes" xml:space="preserve">
          <source>Given:</source>
          <target state="translated">Given:</target>
        </trans-unit>
        <trans-unit id="9ce5b9ee6a88f9e23557639655e58e51344bc688" translate="yes" xml:space="preserve">
          <source>Gives:</source>
          <target state="translated">Gives:</target>
        </trans-unit>
        <trans-unit id="f4b87fe101971039f700c6ff333ad0d29b7aff1f" translate="yes" xml:space="preserve">
          <source>Global Properties</source>
          <target state="translated">글로벌 속성</target>
        </trans-unit>
        <trans-unit id="d72240c615f2aaf934afa7bd6c1a5fe2add7c9f9" translate="yes" xml:space="preserve">
          <source>Global flag to cause &lt;a href=&quot;../command/add_library#command:add_library&quot; id=&quot;index-0-command:add_library&quot;&gt;&lt;code&gt;add_library()&lt;/code&gt;&lt;/a&gt; to create shared libraries if on.</source>
          <target state="translated">&lt;a href=&quot;../command/add_library#command:add_library&quot; id=&quot;index-0-command:add_library&quot;&gt; &lt;code&gt;add_library()&lt;/code&gt; &lt;/a&gt; 가 켜져있는 경우 공유 라이브러리를 작성하게 하는 글로벌 플래그 입니다.</target>
        </trans-unit>
        <trans-unit id="34fec1a92bdc5334d4dba33cf20a76851309ae73" translate="yes" xml:space="preserve">
          <source>Global subroutines and functions.</source>
          <target state="translated">글로벌 서브 루틴 및 기능</target>
        </trans-unit>
        <trans-unit id="a538e09b71560d8d5f1b4f67362e209b1d5ca68e" translate="yes" xml:space="preserve">
          <source>Global symbols with &amp;lsquo;_&amp;rsquo; : &lt;code&gt;call my_sub()&lt;/code&gt;</source>
          <target state="translated">'_'가있는 전역 기호 : &lt;code&gt;call my_sub()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a73caf27ed04932df87b42b21ba23a18f7b8176" translate="yes" xml:space="preserve">
          <source>Global symbols with '_' : &lt;code&gt;call my_sub()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138b971307e6315f0c92fd91fc82a8baaec06ea4" translate="yes" xml:space="preserve">
          <source>Global symbols without &amp;lsquo;_&amp;rsquo;: &lt;code&gt;call mysub()&lt;/code&gt;</source>
          <target state="translated">'_'이없는 전역 기호 : &lt;code&gt;call mysub()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0854ac5d60746ebaa3f3ec3d8a5dffbbcb4a3582" translate="yes" xml:space="preserve">
          <source>Global symbols without '_': &lt;code&gt;call mysub()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5324ebe550d864f49c5dd227cf638214f26a3680" translate="yes" xml:space="preserve">
          <source>GoogleTest</source>
          <target state="translated">GoogleTest</target>
        </trans-unit>
        <trans-unit id="0a9ffc4a328e6d21b11f3b8312d08e5b413aec49" translate="yes" xml:space="preserve">
          <source>Goto</source>
          <target state="translated">Goto</target>
        </trans-unit>
        <trans-unit id="6689d5a05da66408aece12a80a766b6acd714581" translate="yes" xml:space="preserve">
          <source>Green Hills MULTI</source>
          <target state="translated">그린힐 스 MULTI</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="24cd36a8a45516c791bb49f8bbefa149b0270d61" translate="yes" xml:space="preserve">
          <source>HAS_CXX</source>
          <target state="translated">HAS_CXX</target>
        </trans-unit>
        <trans-unit id="981d10cf2ce1d12cce07ef9cf85911eb41ece62e" translate="yes" xml:space="preserve">
          <source>HDF5 library has parallel IO support</source>
          <target state="translated">HDF5 라이브러리는 병렬 IO 지원</target>
        </trans-unit>
        <trans-unit id="6cb3222a5fef894409bbec34b69801cb46fb4880" translate="yes" xml:space="preserve">
          <source>HDF5 library version</source>
          <target state="translated">HDF5 라이브러리 버전</target>
        </trans-unit>
        <trans-unit id="6078ed2d3473646ac1c3ee58d3d5836e3a103e0a" translate="yes" xml:space="preserve">
          <source>HDF5 was found on the system</source>
          <target state="translated">시스템에서 HDF5를 찾았습니다</target>
        </trans-unit>
        <trans-unit id="807b12404bd85b77ee2da7641f9488ee27a18ce8" translate="yes" xml:space="preserve">
          <source>HEADER_FILE_ONLY</source>
          <target state="translated">HEADER_FILE_ONLY</target>
        </trans-unit>
        <trans-unit id="e8ebb047d3120b3d3bf8aacbea869b23b0fefe7a" translate="yes" xml:space="preserve">
          <source>HELPSTRING</source>
          <target state="translated">HELPSTRING</target>
        </trans-unit>
        <trans-unit id="70e28a589d9e45d663db100e55417a8195863a02" translate="yes" xml:space="preserve">
          <source>HIDDEN indicates that this component will be hidden in the graphical installer, so that the user cannot directly change whether it is installed or not.</source>
          <target state="translated">HIDDEN은이 구성 요소가 그래픽 설치 프로그램에서 숨겨져 사용자가 설치 여부를 직접 변경할 수 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="86a8f5d81c7cedf6ff1245c06099be4d3a3c1caa" translate="yes" xml:space="preserve">
          <source>HTTP header for operation. Suboption can be repeated several times.</source>
          <target state="translated">작동을위한 HTTP 헤더. 서브 옵션은 여러 번 반복 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b7b11bdd5cf8a675dd8b8a22d0bba4de0f4e546" translate="yes" xml:space="preserve">
          <source>Handling of &lt;code&gt;COMPONENTS&lt;/code&gt; and &lt;code&gt;OPTIONAL_COMPONENTS&lt;/code&gt; is defined by the package.</source>
          <target state="translated">&lt;code&gt;COMPONENTS&lt;/code&gt; 및 &lt;code&gt;OPTIONAL_COMPONENTS&lt;/code&gt; 의 처리는 패키지에 의해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="6e812e85ca072a0e5d286158e6c5eea008b70bcf" translate="yes" xml:space="preserve">
          <source>Hash Algorithms</source>
          <target state="translated">해시 알고리즘</target>
        </trans-unit>
        <trans-unit id="8950e3aa442e43b920af4e23bc19780f383be8ba" translate="yes" xml:space="preserve">
          <source>Hash of the archive file to be downloaded. The argument should be of the form &lt;code&gt;&amp;lt;algo&amp;gt;=&amp;lt;hashValue&amp;gt;&lt;/code&gt; where &lt;code&gt;algo&lt;/code&gt; can be any of the hashing algorithms supported by the &lt;a href=&quot;../command/file#command:file&quot; id=&quot;index-1-command:file&quot;&gt;&lt;code&gt;file()&lt;/code&gt;&lt;/a&gt; command. Specifying this option is strongly recommended for URL downloads, as it ensures the integrity of the downloaded content. It is also used as a check for a previously downloaded file, allowing connection to the remote location to be avoided altogether if the local directory already has a file from an earlier download that matches the specified hash.</source>
          <target state="translated">다운로드 할 아카이브 파일의 해시 인수는 &lt;code&gt;&amp;lt;algo&amp;gt;=&amp;lt;hashValue&amp;gt;&lt;/code&gt; 형식이어야합니다. 여기서 &lt;code&gt;algo&lt;/code&gt; 는 &lt;a href=&quot;../command/file#command:file&quot; id=&quot;index-1-command:file&quot;&gt; &lt;code&gt;file()&lt;/code&gt; &lt;/a&gt; 명령이 지원하는 해싱 알고리즘 중 하나 일 수 있습니다 . 다운로드 한 콘텐츠의 무결성을 보장하므로 URL 다운로드에는이 옵션을 지정하는 것이 좋습니다. 또한 로컬 디렉토리에 지정된 해시와 일치하는 이전 다운로드 파일이 이미 있으면 원격 위치에 대한 연결을 피할 수 있도록 이전에 다운로드 한 파일을 검사하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="53e49a69fb315c4f51afc9825055d4858a064cdc" translate="yes" xml:space="preserve">
          <source>Hashing</source>
          <target state="translated">Hashing</target>
        </trans-unit>
        <trans-unit id="54f69372392920603f2292925bbe1286c0909a18" translate="yes" xml:space="preserve">
          <source>Having the capability to evaluate generator expressions is very useful when you want to manage custom properties supporting generator expressions. For example:</source>
          <target state="translated">생성기 표현식을 평가하는 기능이 있으면 생성기 표현식을 지원하는 사용자 정의 특성을 관리 할 때 매우 유용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5425b647d83cb66c67f958d43a6c6c88e0e82047" translate="yes" xml:space="preserve">
          <source>Header &lt;code&gt;moc&lt;/code&gt; output files &lt;code&gt;moc_&amp;lt;base_name&amp;gt;.cpp&lt;/code&gt; can be included in source files. In the section &lt;a href=&quot;#including-header-moc-files-in-sources&quot;&gt;Including header moc files in sources&lt;/a&gt; there is more information on that topic.</source>
          <target state="translated">헤더 &lt;code&gt;moc&lt;/code&gt; 출력 파일 &lt;code&gt;moc_&amp;lt;base_name&amp;gt;.cpp&lt;/code&gt; 는 소스 파일에 포함될 수 있습니다. &lt;a href=&quot;#including-header-moc-files-in-sources&quot;&gt;소스에 헤더 moc 파일 포함&lt;/a&gt; 섹션 에는 해당 주제에 대한 자세한 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f12662d867a2aa019b845512ca1a6455fac3e75b" translate="yes" xml:space="preserve">
          <source>Header Generation</source>
          <target state="translated">헤더 생성</target>
        </trans-unit>
        <trans-unit id="c924a68237871974d3f6c526f1a4f403176c7958" translate="yes" xml:space="preserve">
          <source>Header and source file processing</source>
          <target state="translated">헤더 및 소스 파일 처리</target>
        </trans-unit>
        <trans-unit id="ed81ebcb9dd1eafac0140123493a1794a783f947" translate="yes" xml:space="preserve">
          <source>Header file names specified with angle brackets (e.g. &lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;) or explicit double quotes (escaped for the &lt;a href=&quot;../manual/cmake-language.7#manual:cmake-language(7)&quot; id=&quot;index-0-manual:cmake-language(7)&quot;&gt;&lt;code&gt;cmake-language(7)&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;[[&quot;other_header.h&quot;]]&lt;/code&gt;) will be treated as is, and include directories must be available for the compiler to find them. Other header file names (e.g. &lt;code&gt;project_header.h&lt;/code&gt;) are interpreted as being relative to the current source directory (e.g. &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt;&lt;/a&gt;) and will be included by absolute path. For example:</source>
          <target state="translated">꺾쇠 괄호 (예 : &lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt; ) 또는 명시 적 큰 따옴표 ( &lt;a href=&quot;../manual/cmake-language.7#manual:cmake-language(7)&quot; id=&quot;index-0-manual:cmake-language(7)&quot;&gt; &lt;code&gt;cmake-language(7)&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;[[&quot;other_header.h&quot;]]&lt;/code&gt; , 예 : [[ &quot;other_header.h&quot;]] )로 지정된 헤더 파일 이름 은있는 그대로 처리되며 포함 디렉터리는 다음과 같아야합니다. 컴파일러에서 찾을 수 있습니다. 다른 헤더 파일 이름 (예 : &lt;code&gt;project_header.h&lt;/code&gt; )은 현재 소스 디렉토리 (예 : &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt; &lt;/a&gt; ) 에 상대적인 것으로 해석 되며 절대 경로에 포함됩니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="c9324fcfbc451a9f5f0c0111a23a25eb33caa550" translate="yes" xml:space="preserve">
          <source>Header file processing</source>
          <target state="translated">헤더 파일 처리</target>
        </trans-unit>
        <trans-unit id="182f3433050ad0286e7650e962da823670580726" translate="yes" xml:space="preserve">
          <source>Help associated with entry in GUIs.</source>
          <target state="translated">GUI 입력과 관련된 도움말.</target>
        </trans-unit>
        <trans-unit id="a51749f23e352b7eceaa7448745d1c96f5c89995" translate="yes" xml:space="preserve">
          <source>Helper function which can be used to check if a &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is valid against version-related arguments of &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-5-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-5-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; 의 버전 관련 인수에 대해 &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; 이 유효한지 확인하는 데 사용할 수있는 도우미 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="eae460dcbb4d6818f99834d8e0ca61951c335f2e" translate="yes" xml:space="preserve">
          <source>Helper function which computes a list of key values to identify source files independently of relative/absolute paths given in cmake and eliminates case sensitivity:</source>
          <target state="translated">cmake에 제공된 상대 / 절대 경로와 독립적으로 소스 파일을 식별하기 위해 키 값 목록을 계산하고 대소 문자 구분을 제거하는 도우미 기능 :</target>
        </trans-unit>
        <trans-unit id="94c3a7ed11196dd1819c4293d2303111d187472a" translate="yes" xml:space="preserve">
          <source>Helper functions which are used by the above ones</source>
          <target state="translated">위의 것들에서 사용되는 도우미 기능</target>
        </trans-unit>
        <trans-unit id="d1031ad50520d4f68b062b3c5018a1ec3e80c710" translate="yes" xml:space="preserve">
          <source>Helper script for UseJava.cmake</source>
          <target state="translated">UseJava.cmake를위한 헬퍼 스크립트</target>
        </trans-unit>
        <trans-unit id="00fe7fec77dc2490982dc64ce1390e37ce992158" translate="yes" xml:space="preserve">
          <source>Helpers functions for creating config files that can be included by other projects to find and use a package.</source>
          <target state="translated">다른 프로젝트에 포함되어 패키지를 찾고 사용할 수있는 구성 파일을 작성하는 데 도움이되는 기능</target>
        </trans-unit>
        <trans-unit id="43bba353b0416c8e9fa9191d57b987dc44c81890" translate="yes" xml:space="preserve">
          <source>Here we use the &lt;a href=&quot;../../command/export#command:export&quot; id=&quot;index-1-command:export&quot;&gt;&lt;code&gt;export()&lt;/code&gt;&lt;/a&gt; command to generate the export targets for the build tree. In this case, we&amp;rsquo;ll create a file called &lt;code&gt;MathFunctionsTargets.cmake&lt;/code&gt; in the &lt;code&gt;cmake&lt;/code&gt; subdirectory of the build directory. The generated file contains the required code to import the target and may be loaded by an outside project that is aware of the project build tree. This file is specific to the build-tree, and &lt;strong&gt;is not relocatable&lt;/strong&gt;.</source>
          <target state="translated">여기서 &lt;a href=&quot;../../command/export#command:export&quot; id=&quot;index-1-command:export&quot;&gt; &lt;code&gt;export()&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 빌드 트리에 대한 내보내기 대상을 생성합니다. 이 경우 빌드 디렉터리 의 &lt;code&gt;cmake&lt;/code&gt; 하위 디렉터리에 &lt;code&gt;MathFunctionsTargets.cmake&lt;/code&gt; 라는 파일을 생성합니다 . 생성 된 파일에는 대상을 가져 오는 데 필요한 코드가 포함되어 있으며 프로젝트 빌드 트리를 인식하는 외부 프로젝트에서로드 할 수 있습니다. 이 파일은 빌드 트리에만 해당되며 &lt;strong&gt;재배치 할 수 없습니다&lt;/strong&gt; .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d24436abff3f5d6d0f634c653b16e403eb193c69" translate="yes" xml:space="preserve">
          <source>Here we use the &lt;a href=&quot;../../command/export#command:export&quot; id=&quot;index-1-command:export&quot;&gt;&lt;code&gt;export()&lt;/code&gt;&lt;/a&gt; command to generate the export targets for the build tree. In this case, we'll create a file called &lt;code&gt;MathFunctionsTargets.cmake&lt;/code&gt; in the &lt;code&gt;cmake&lt;/code&gt; subdirectory of the build directory. The generated file contains the required code to import the target and may be loaded by an outside project that is aware of the project build tree. This file is specific to the build-tree, and &lt;strong&gt;is not relocatable&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b711022bbdbc55a24bd7712dcd9c1fcf0e90f44" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how it works:</source>
          <target state="translated">작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dcae16de665cdab304c88fb675786b95de0fc2e3" translate="yes" xml:space="preserve">
          <source>Here's how it works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926420cb2600d4ad4346fd18d641b507d336ad76" translate="yes" xml:space="preserve">
          <source>Here, both &lt;code&gt;exe1&lt;/code&gt; and &lt;code&gt;exe2&lt;/code&gt; will be compiled as position-independent-code. &lt;code&gt;lib1&lt;/code&gt; will also be compiled as position-independent-code because that is the default setting for &lt;code&gt;SHARED&lt;/code&gt; libraries. If dependencies have conflicting, non-compatible requirements &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt; issues a diagnostic:</source>
          <target state="translated">여기서 &lt;code&gt;exe1&lt;/code&gt; 과 &lt;code&gt;exe2&lt;/code&gt; 는 위치 독립적 인 코드로 컴파일됩니다. &lt;code&gt;lib1&lt;/code&gt; 은 &lt;code&gt;SHARED&lt;/code&gt; 라이브러리 의 기본 설정이므로 위치 독립적 코드로 컴파일됩니다 . 종속성이 충돌하고 호환되지 않는 요구 사항 인 경우 &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; 는 진단을 발행합니다.</target>
        </trans-unit>
        <trans-unit id="b83ffc1308e755ecf2d0d36076fadc992892d417" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;ClimbingStats_NOT_FOUND_MESSAGE&lt;/code&gt; is set to a diagnosis that the package could not be found because an invalid component was specified. This message variable can be set for any case where the &lt;code&gt;_FOUND&lt;/code&gt; variable is set to &lt;code&gt;False&lt;/code&gt;, and will be displayed to the user.</source>
          <target state="translated">여기서 &lt;code&gt;ClimbingStats_NOT_FOUND_MESSAGE&lt;/code&gt; 는 유효하지 않은 구성 요소가 지정되어 패키지를 찾을 수 없다는 진단으로 설정됩니다. 이 메시지 변수는 &lt;code&gt;_FOUND&lt;/code&gt; 변수가 &lt;code&gt;False&lt;/code&gt; 로 설정된 경우 사용자에게 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86146fd0cbbbbac151b7533ab0549e63a27f7eb0" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;EXPORT&lt;/code&gt; option tells CMake to create an export called &lt;code&gt;MathFunctionsTargets&lt;/code&gt;. The generated &lt;a href=&quot;../../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-16-prop_tgt:IMPORTED&quot;&gt;&lt;code&gt;IMPORTED&lt;/code&gt;&lt;/a&gt; targets have appropriate properties set to define their &lt;a href=&quot;../../manual/cmake-buildsystem.7#target-usage-requirements&quot;&gt;usage requirements&lt;/a&gt;, such as &lt;a href=&quot;../../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS&quot; id=&quot;index-0-prop_tgt:INTERFACE_COMPILE_DEFINITIONS&quot;&gt;&lt;code&gt;INTERFACE_COMPILE_DEFINITIONS&lt;/code&gt;&lt;/a&gt; and other relevant built-in &lt;code&gt;INTERFACE_&lt;/code&gt; properties. The &lt;code&gt;INTERFACE&lt;/code&gt; variant of user-defined properties listed in &lt;a href=&quot;../../prop_tgt/compatible_interface_string#prop_tgt:COMPATIBLE_INTERFACE_STRING&quot; id=&quot;index-0-prop_tgt:COMPATIBLE_INTERFACE_STRING&quot;&gt;&lt;code&gt;COMPATIBLE_INTERFACE_STRING&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&quot;../../manual/cmake-buildsystem.7#compatible-interface-properties&quot;&gt;Compatible Interface Properties&lt;/a&gt; are also propagated to the generated &lt;a href=&quot;../../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-17-prop_tgt:IMPORTED&quot;&gt;&lt;code&gt;IMPORTED&lt;/code&gt;&lt;/a&gt; targets. For example, in this case, the &lt;a href=&quot;../../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-18-prop_tgt:IMPORTED&quot;&gt;&lt;code&gt;IMPORTED&lt;/code&gt;&lt;/a&gt; target will have its &lt;a href=&quot;../../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; property populated with the directory specified by the &lt;code&gt;INCLUDES DESTINATION&lt;/code&gt; property. As a relative path was given, it is treated as relative to the &lt;a href=&quot;../../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX&quot;&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;EXPORT&lt;/code&gt; 옵션은 &lt;code&gt;MathFunctionsTargets&lt;/code&gt; 라는 내보내기를 생성하도록 CMake에 지시 합니다. 생성 된 &lt;a href=&quot;../../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-16-prop_tgt:IMPORTED&quot;&gt; &lt;code&gt;IMPORTED&lt;/code&gt; &lt;/a&gt; 대상에는 &lt;a href=&quot;../../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS&quot; id=&quot;index-0-prop_tgt:INTERFACE_COMPILE_DEFINITIONS&quot;&gt; &lt;code&gt;INTERFACE_COMPILE_DEFINITIONS&lt;/code&gt; &lt;/a&gt; 및 기타 관련 기본 제공 &lt;code&gt;INTERFACE_&lt;/code&gt; 속성 과 같은 &lt;a href=&quot;../../manual/cmake-buildsystem.7#target-usage-requirements&quot;&gt;사용 요구 사항&lt;/a&gt; 을 정의하는 적절한 속성이 설정되어 있습니다. &lt;a href=&quot;../../prop_tgt/compatible_interface_string#prop_tgt:COMPATIBLE_INTERFACE_STRING&quot; id=&quot;index-0-prop_tgt:COMPATIBLE_INTERFACE_STRING&quot;&gt; &lt;code&gt;COMPATIBLE_INTERFACE_STRING&lt;/code&gt; &lt;/a&gt; 및 기타 &lt;a href=&quot;../../manual/cmake-buildsystem.7#compatible-interface-properties&quot;&gt;호환 가능한 인터페이스 속성에&lt;/a&gt; 나열된 사용자 정의 속성 의 &lt;code&gt;INTERFACE&lt;/code&gt; 변형 도 생성 된 &lt;a href=&quot;../../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-17-prop_tgt:IMPORTED&quot;&gt; &lt;code&gt;IMPORTED&lt;/code&gt; &lt;/a&gt; 대상으로 전파됩니다 . 예를 들어,이 경우 &lt;a href=&quot;../../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-18-prop_tgt:IMPORTED&quot;&gt; &lt;code&gt;IMPORTED&lt;/code&gt; &lt;/a&gt;대상 에는 &lt;code&gt;INCLUDES DESTINATION&lt;/code&gt; 속성에 지정된 디렉터리로 채워진 &lt;a href=&quot;../../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; 속성이 있습니다. 상대 경로가 제공 &lt;a href=&quot;../../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX&quot;&gt; &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; &lt;/a&gt; 상대적인 것으로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="6fa837d3561804b813c88610fff2b5a54f1dcd4b" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;MathFunctions_NOT_FOUND_MESSAGE&lt;/code&gt; is set to a diagnosis that the package could not be found because an invalid component was specified. This message variable can be set for any case where the &lt;code&gt;_FOUND&lt;/code&gt; variable is set to &lt;code&gt;False&lt;/code&gt;, and will be displayed to the user.</source>
          <target state="translated">여기서 &lt;code&gt;MathFunctions_NOT_FOUND_MESSAGE&lt;/code&gt; 는 유효하지 않은 구성 요소가 지정되어 패키지를 찾을 수 없다는 진단으로 설정됩니다. 이 메시지 변수는 &lt;code&gt;_FOUND&lt;/code&gt; 변수가 &lt;code&gt;False&lt;/code&gt; 로 설정된 모든 경우에 설정할 수 있으며 사용자에게 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ea5c9f6b987043fdcb70598b48aee2e5d2dc1dc1" translate="yes" xml:space="preserve">
          <source>Here, the usage requirements from the &lt;code&gt;Eigen&lt;/code&gt; target are consumed and used when compiling, but it has no effect on linking.</source>
          <target state="translated">여기서 &lt;code&gt;Eigen&lt;/code&gt; 대상 의 사용 요구 사항은 컴파일 할 때 소비 및 사용되지만 연결에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="75869edcf45ab8c18a2174fd696085a4c299a5c4" translate="yes" xml:space="preserve">
          <source>Hexadecimal notation as in C code, i. e. starting with &quot;0x&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58db593b968bcf829880cbe1dcabf061cdda86b" translate="yes" xml:space="preserve">
          <source>Hexadecimal notation as in C code, i. e. starting with &amp;ldquo;0x&amp;rdquo;.</source>
          <target state="translated">C 코드에서와 같이 16 진 표기법, 즉 &quot;0x&quot;로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="14d1bcde7ae7af5fe407915ebc81389c347f2d5c" translate="yes" xml:space="preserve">
          <source>Hexadecimal numbers are recognized when prefixed with &lt;code&gt;0x&lt;/code&gt;, as in C code.</source>
          <target state="translated">16 진수 는 C 코드에서 와 같이 &lt;code&gt;0x&lt;/code&gt; 접두사로 인식 될 때 인식됩니다 .</target>
        </trans-unit>
        <trans-unit id="edcaf11fad8da59b2abb088c2ffaf6e8a67af161" translate="yes" xml:space="preserve">
          <source>Hg_WC_INFO extracts information of a mercurial working copy at a given location. This macro defines the following variables:</source>
          <target state="translated">Hg_WC_INFO는 주어진 위치에서 수은 작업 사본의 정보를 추출합니다. 이 매크로는 다음 변수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d50649d078fda977871869795671157f27a1ffe7" translate="yes" xml:space="preserve">
          <source>High level meta features indicating C++ standard support</source>
          <target state="translated">C ++ 표준 지원을 나타내는 고급 메타 기능</target>
        </trans-unit>
        <trans-unit id="3948e0c41ff8c5782c9dceda5bbf72700445e9c2" translate="yes" xml:space="preserve">
          <source>High-level C library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408ac7a6bc87c50964820e2d2625ae3615abe18b" translate="yes" xml:space="preserve">
          <source>High-level C++ library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2efd248b11fe25ee30414b8da939760e0d2504f" translate="yes" xml:space="preserve">
          <source>High-level Fortran library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef8e89aeb708a408921fec1b9e87c4d04faaced" translate="yes" xml:space="preserve">
          <source>Hints</source>
          <target state="translated">Hints</target>
        </trans-unit>
        <trans-unit id="6554ac9b164601b0abd2901d8a594c7ed99add89" translate="yes" xml:space="preserve">
          <source>Historical short-hand for &lt;code&gt;EXPECTED_HASH MD5=&amp;lt;value&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EXPECTED_HASH MD5=&amp;lt;value&amp;gt;&lt;/code&gt; 의 과거 축약 형 .</target>
        </trans-unit>
        <trans-unit id="7910ddc7f0f5b941695cff38173926560fb61cf2" translate="yes" xml:space="preserve">
          <source>Historical short-hand for &lt;code&gt;EXPECTED_HASH MD5=&amp;lt;value&amp;gt;&lt;/code&gt;. It is an error to specify this if &lt;code&gt;DOWNLOAD&lt;/code&gt; is not given a &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EXPECTED_HASH MD5=&amp;lt;value&amp;gt;&lt;/code&gt; 의 역사적 약어 입니다. &lt;code&gt;DOWNLOAD&lt;/code&gt; 에 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 이 지정 되지 않은 경우이를 지정하는 것은 오류 입니다.</target>
        </trans-unit>
        <trans-unit id="b34cb16442be1950e0fe35ef6d5e7ae679a8b335" translate="yes" xml:space="preserve">
          <source>Holds query files written by clients. These may be &lt;a href=&quot;#v1-shared-stateless-query-files&quot;&gt;v1 Shared Stateless Query Files&lt;/a&gt;, &lt;a href=&quot;#v1-client-stateless-query-files&quot;&gt;v1 Client Stateless Query Files&lt;/a&gt;, or &lt;a href=&quot;#v1-client-stateful-query-files&quot;&gt;v1 Client Stateful Query Files&lt;/a&gt;.</source>
          <target state="translated">클라이언트가 작성한 쿼리 파일을 보유합니다. 이있을 수 있습니다 &lt;a href=&quot;#v1-shared-stateless-query-files&quot;&gt;공유 상태 비 쿼리 파일 V1&lt;/a&gt; , &lt;a href=&quot;#v1-client-stateless-query-files&quot;&gt;클라이언트 상태 비 쿼리 파일 V1&lt;/a&gt; 또는 &lt;a href=&quot;#v1-client-stateful-query-files&quot;&gt;V1 클라이언트 상태 저장 쿼리 파일&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc4e930958a8d16ef667bd1c5b1e2e66b677a25f" translate="yes" xml:space="preserve">
          <source>Holds reply files written by CMake whenever it runs to generate a build system. These are indexed by a &lt;a href=&quot;#v1-reply-index-file&quot;&gt;v1 Reply Index File&lt;/a&gt; file that may reference additional &lt;a href=&quot;#v1-reply-files&quot;&gt;v1 Reply Files&lt;/a&gt;. CMake owns all reply files. Clients must never remove them.</source>
          <target state="translated">빌드 시스템을 생성하기 위해 실행될 때마다 CMake가 작성한 응답 파일을 보유합니다. 이들은 추가 &lt;a href=&quot;#v1-reply-files&quot;&gt;v1 응답 파일을&lt;/a&gt; 참조 할 수 있는 &lt;a href=&quot;#v1-reply-index-file&quot;&gt;v1 응답 색인 파일&lt;/a&gt; 파일에 의해 색인됩니다 . CMake는 모든 응답 파일을 소유합니다. 고객은 절대 제거해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="bf2a3680cabd10d2203c08a1c0e159476bcbb243" translate="yes" xml:space="preserve">
          <source>Home Page</source>
          <target state="translated">홈페이지</target>
        </trans-unit>
        <trans-unit id="86761dbcfd8e4e20a77d96cbe1db6713598e48a4" translate="yes" xml:space="preserve">
          <source>Honor language standard in &lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt;&lt;code&gt;try_compile()&lt;/code&gt;&lt;/a&gt; source-file signature.</source>
          <target state="translated">&lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt; &lt;code&gt;try_compile()&lt;/code&gt; &lt;/a&gt; 소스 파일 서명의 언어 표준을 준수 하십시오.</target>
        </trans-unit>
        <trans-unit id="7895b858d15c33f1eda464dbe8494a5f16d2f9eb" translate="yes" xml:space="preserve">
          <source>Honor link flags in &lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt;&lt;code&gt;try_compile()&lt;/code&gt;&lt;/a&gt; source-file signature.</source>
          <target state="translated">&lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt; &lt;code&gt;try_compile()&lt;/code&gt; &lt;/a&gt; 소스 파일 서명 에서 링크 플래그를 존중하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1634ebefd2e582dac2bcdd6483c2950a9cb1192" translate="yes" xml:space="preserve">
          <source>Honor per-config flags in &lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt;&lt;code&gt;try_compile()&lt;/code&gt;&lt;/a&gt; source-file signature.</source>
          <target state="translated">&lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt; &lt;code&gt;try_compile()&lt;/code&gt; &lt;/a&gt; 소스 파일 서명 에서 구성 별 플래그를 존중 하십시오.</target>
        </trans-unit>
        <trans-unit id="48bf154a6f0b82ae2b04c58527e2c0691410eeed" translate="yes" xml:space="preserve">
          <source>Honor visibility properties for all target types.</source>
          <target state="translated">모든 대상 유형의 가시성 속성을 존중하십시오.</target>
        </trans-unit>
        <trans-unit id="c983a1551dcbdb6f0ce43637e89a8726577d4f4b" translate="yes" xml:space="preserve">
          <source>Hostname</source>
          <target state="translated">Hostname</target>
        </trans-unit>
        <trans-unit id="d6789a0d31020feb3b6e2fd4b76ea3bd0f165ea0" translate="yes" xml:space="preserve">
          <source>How many seconds to allow for this test.</source>
          <target state="translated">이 테스트에 몇 초가 걸리나요?</target>
        </trans-unit>
        <trans-unit id="ae18e5d714d7715da505ea03684f2dc10b3229ba" translate="yes" xml:space="preserve">
          <source>However this could be unmaintainable if there are many files to abstract. What is needed is to use alternative include directories depending on the compiler capabilities.</source>
          <target state="translated">그러나 추상화 할 파일이 많으면 유지 관리 할 수 ​​없습니다. 필요한 것은 컴파일러 기능에 따라 대체 include 디렉토리를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5e31f78939192ecd20277127868409534828ff9e" translate="yes" xml:space="preserve">
          <source>However, for the sake of readability, it is recommended that you order your parameters in the order listed at the top of this page.</source>
          <target state="translated">그러나 가독성을 위해이 페이지 상단에 나열된 순서대로 매개 변수를 주문하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8f7c0e42a27a744448057520f20f5d6c25f03f33" translate="yes" xml:space="preserve">
          <source>However, this is not sufficient in certain case, where for instance your MEX file is linking against libraries that are already loaded by Matlab, even if those libraries have different SONAMES. A possible solution is to hide the symbols of the libraries to which the MEX target is linking to. This can be achieved in GNU GCC compilers with the linker option &lt;code&gt;-Wl,--exclude-libs,ALL&lt;/code&gt;.</source>
          <target state="translated">그러나 MEX 파일이 다른 라이브러리의 SONAME을 가지고 있더라도 Matlab에 의해 이미로드 된 라이브러리와 링크되는 경우와 같이 특정 경우에는 충분하지 않습니다. 가능한 해결책은 MEX 대상이 연결되는 라이브러리의 심볼을 숨기는 것입니다. 이는 링커 옵션 &lt;code&gt;-Wl,--exclude-libs,ALL&lt;/code&gt; 사용하여 GNU GCC 컴파일러에서 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e3b79096c08b2eda6a6389e2573f93c29bbd74f9" translate="yes" xml:space="preserve">
          <source>Human readable full processor description</source>
          <target state="translated">사람이 읽을 수있는 전체 프로세서 설명</target>
        </trans-unit>
        <trans-unit id="d11af85b77b289e60b3ce1c952ce23dd2a900cc2" translate="yes" xml:space="preserve">
          <source>Human readable processor name</source>
          <target state="translated">사람이 읽을 수있는 프로세서 이름</target>
        </trans-unit>
        <trans-unit id="2b9db91ce498f68da8b62146cbf9e0938cd5c07b" translate="yes" xml:space="preserve">
          <source>Human-friendly output. This is not guaranteed to be stable. This is the default.</source>
          <target state="translated">인간 친화적 인 출력. 이것은 안정적으로 보장되지 않습니다. 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="ce7d142693747724bf84bbdc460b104823c55964" translate="yes" xml:space="preserve">
          <source>Human-readable string containing the version of OpenAL</source>
          <target state="translated">OpenAL 버전이 포함 된 사람이 읽을 수있는 문자열</target>
        </trans-unit>
        <trans-unit id="f358cadd8517fe6160ab9b9563c9ae85f39b4c8c" translate="yes" xml:space="preserve">
          <source>IBMESSL</source>
          <target state="translated">IBMESSL</target>
        </trans-unit>
        <trans-unit id="01d090c29eab1450a9c3cdf86b54a11b2a636a39" translate="yes" xml:space="preserve">
          <source>ICU component libraries are reported in:</source>
          <target state="translated">ICU 구성 요소 라이브러리는 다음에보고됩니다.</target>
        </trans-unit>
        <trans-unit id="9772984508c9757f0ead5430d90501d02108b241" translate="yes" xml:space="preserve">
          <source>ICU datafiles are reported in:</source>
          <target state="translated">ICU 데이터 파일은 다음에보고됩니다.</target>
        </trans-unit>
        <trans-unit id="66fd1de54d6b14ecd3fea32fa59855b32bf043e3" translate="yes" xml:space="preserve">
          <source>ICU programs are reported in:</source>
          <target state="translated">ICU 프로그램은 다음에보고됩니다.</target>
        </trans-unit>
        <trans-unit id="b2224dd8ef92307251f3684d48bee652a1f40dca" translate="yes" xml:space="preserve">
          <source>IDE Build Tool Generators</source>
          <target state="translated">IDE 빌드 도구 생성기</target>
        </trans-unit>
        <trans-unit id="c683e9b94f7983842d4948970e6b6563931d3423" translate="yes" xml:space="preserve">
          <source>IDE Integration Guide</source>
          <target state="translated">IDE 통합 가이드</target>
        </trans-unit>
        <trans-unit id="baf8d856aefb58c2b591c3700d5485343dc0ccb5" translate="yes" xml:space="preserve">
          <source>IDE vendors are encouraged to read and evaluate this file the same way CMake does, and present the user with the presets listed in the file. Users should be able to see (and possibly edit) the CMake cache variables, environment variables, and command line options that are defined for a given preset. The IDE should then construct the list of appropriate &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-1-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt; command line arguments based on these settings, rather than using the &lt;code&gt;--preset=&lt;/code&gt; option directly. The &lt;code&gt;--preset=&lt;/code&gt; option is intended only as a convenient frontend for command line users, and should not be used by the IDE.</source>
          <target state="translated">IDE 공급 업체는 CMake와 동일한 방식으로이 파일을 읽고 평가하고 파일에 나열된 사전 설정을 사용자에게 제공하는 것이 좋습니다. 사용자는 주어진 사전 설정에 대해 정의 된 CMake 캐시 변수, 환경 변수 및 명령 줄 옵션을 볼 수 있어야합니다 (그리고 편집 가능). 그런 다음 IDE는 &lt;code&gt;--preset=&lt;/code&gt; 옵션을 직접 사용하는 대신 이러한 설정을 기반으로 적절한 &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-1-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; 명령 줄 인수 목록을 구성해야합니다 . &lt;code&gt;--preset=&lt;/code&gt; 옵션은 명령 행 사용자를위한 편리한 프론트 엔드로 구성되고, IDE에 의해 사용되어서는 안된다.</target>
        </trans-unit>
        <trans-unit id="3ecd265cdeeb67fdbf87d7f302bb625b60434a18" translate="yes" xml:space="preserve">
          <source>IDEs should avoid creating more build trees than necessary, and only create multiple build trees if the user wishes to switch to a different compiler, use different compile flags, etc. In particular, IDEs should NOT create multiple single-config build trees which all have the same properties except for a differing &lt;a href=&quot;../../variable/cmake_build_type#variable:CMAKE_BUILD_TYPE&quot; id=&quot;index-0-variable:CMAKE_BUILD_TYPE&quot;&gt;&lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt;&lt;/a&gt;, effectively creating a multi-config environment. Instead, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja%20Multi-Config.html#generator:Ninja%20Multi-Config&quot; id=&quot;index-0-generator:Ninja Multi-Config&quot;&gt;&lt;code&gt;Ninja Multi-Config&lt;/code&gt;&lt;/a&gt; generator, in conjunction with the &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-1-manual:cmake-file-api(7)&quot;&gt;&lt;code&gt;File API&lt;/code&gt;&lt;/a&gt; to get the list of build configurations, should be used for this purpose.</source>
          <target state="translated">IDE는 필요 이상으로 빌드 트리를 생성하지 않아야하며 사용자가 다른 컴파일러로 전환하거나 다른 컴파일 플래그를 사용하려는 경우에만 여러 빌드 트리를 생성해야합니다. 특히 IDE는 모두 다른 &lt;a href=&quot;../../variable/cmake_build_type#variable:CMAKE_BUILD_TYPE&quot; id=&quot;index-0-variable:CMAKE_BUILD_TYPE&quot;&gt; &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; 을&lt;/a&gt; 제외하고 동일한 속성을 사용하여 효과적으로 다중 구성 환경을 만듭니다. 대신 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Ninja%20Multi-Config.html#generator:Ninja%20Multi-Config&quot; id=&quot;index-0-generator:Ninja Multi-Config&quot;&gt; &lt;code&gt;Ninja Multi-Config&lt;/code&gt; &lt;/a&gt; 생성기를 &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-1-manual:cmake-file-api(7)&quot;&gt; &lt;code&gt;File API&lt;/code&gt; &lt;/a&gt; 와 함께 사용하여 빌드 구성 목록을 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="28c814c6b92643b653e820618497adc2b233e1dd" translate="yes" xml:space="preserve">
          <source>IDEs should avoid creating more build trees than necessary, and only create multiple build trees if the user wishes to switch to a different compiler, use different compile flags, etc. In particular, IDEs should NOT create multiple single-config build trees which all have the same properties except for a differing &lt;a href=&quot;../../variable/cmake_build_type#variable:CMAKE_BUILD_TYPE&quot; id=&quot;index-0-variable:CMAKE_BUILD_TYPE&quot;&gt;&lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt;&lt;/a&gt;, effectively creating a multi-config environment. Instead, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Ninja%20Multi-Config.html#generator:Ninja%20Multi-Config&quot; id=&quot;index-0-generator:Ninja Multi-Config&quot;&gt;&lt;code&gt;Ninja Multi-Config&lt;/code&gt;&lt;/a&gt; generator, in conjunction with the &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-1-manual:cmake-file-api(7)&quot;&gt;&lt;code&gt;File API&lt;/code&gt;&lt;/a&gt; to get the list of build configurations, should be used for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7295b866b1efbb1fdddd04a487d850b68770f09e" translate="yes" xml:space="preserve">
          <source>IDEs should not invoke the &lt;code&gt;test&lt;/code&gt; target of the generated buildsystem. Instead, they should invoke &lt;a href=&quot;../../manual/ctest.1#manual:ctest(1)&quot; id=&quot;index-1-manual:ctest(1)&quot;&gt;&lt;code&gt;ctest(1)&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="translated">IDE는 생성 된 빌드 시스템 의 &lt;code&gt;test&lt;/code&gt; 대상을 호출해서는 안됩니다 . 대신 &lt;a href=&quot;../../manual/ctest.1#manual:ctest(1)&quot; id=&quot;index-1-manual:ctest(1)&quot;&gt; &lt;code&gt;ctest(1)&lt;/code&gt; &lt;/a&gt; 직접 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9428bdd8f6cff2f12c60f6e4dfac2223bf1d9e3c" translate="yes" xml:space="preserve">
          <source>IDEs should not use the &quot;extra generators&quot; with Makefile or Ninja generators, which generate IDE project files in addition to the Makefile or Ninja files. Instead the &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-2-manual:cmake-file-api(7)&quot;&gt;&lt;code&gt;File API&lt;/code&gt;&lt;/a&gt; should be used to get the list of build artifacts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1538e9f9920607f6f9622c12ad6b745f7d280b47" translate="yes" xml:space="preserve">
          <source>IDEs should not use the &amp;ldquo;extra generators&amp;rdquo; with Makefile or Ninja generators, which generate IDE project files in addition to the Makefile or Ninja files. Instead the &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-2-manual:cmake-file-api(7)&quot;&gt;&lt;code&gt;File API&lt;/code&gt;&lt;/a&gt; should be used to get the list of build artifacts.</source>
          <target state="translated">IDE는 Makefile 또는 Ninja 파일 외에 IDE 프로젝트 파일을 생성하는 Makefile 또는 Ninja 생성기와 함께 &quot;추가 생성기&quot;를 사용해서는 안됩니다. 대신 &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-2-manual:cmake-file-api(7)&quot;&gt; &lt;code&gt;File API&lt;/code&gt; &lt;/a&gt; 를 사용하여 빌드 아티팩트 목록을 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="3c3685a19f4c66f9bd944b77a4837df69fd8543c" translate="yes" xml:space="preserve">
          <source>IDEs that invoke &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-2-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt; to run the configure step may wish to receive information about the artifacts that the build will produce, as well as the include directories, compile definitions, etc. used to build the artifacts. Such information can be obtained by using the &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-0-manual:cmake-file-api(7)&quot;&gt;&lt;code&gt;File API&lt;/code&gt;&lt;/a&gt;. The manual page for the File API contains more information about the API and how to invoke it. &lt;a href=&quot;../../manual/cmake-server.7#manual:cmake-server(7)&quot; id=&quot;index-0-manual:cmake-server(7)&quot;&gt;&lt;code&gt;Server mode&lt;/code&gt;&lt;/a&gt; is deprecated and should not be used on CMake 3.14 or later.</source>
          <target state="translated">구성 단계를 실행하기 위해 &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-2-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; 을 호출하는 IDE 는 빌드가 생성 할 아티팩트에 대한 정보는 물론 아티팩트 빌드에 사용되는 포함 디렉토리, 컴파일 정의 등에 대한 정보를 수신 할 수 있습니다. 이러한 정보는 &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-0-manual:cmake-file-api(7)&quot;&gt; &lt;code&gt;File API&lt;/code&gt; &lt;/a&gt; 를 사용하여 얻을 수 있습니다 . File API의 매뉴얼 페이지에는 API 및 호출 방법에 대한 자세한 정보가 포함되어 있습니다. &lt;a href=&quot;../../manual/cmake-server.7#manual:cmake-server(7)&quot; id=&quot;index-0-manual:cmake-server(7)&quot;&gt; &lt;code&gt;Server mode&lt;/code&gt; &lt;/a&gt; 는 더 이상 사용되지 않으며 CMake 3.14 이상에서 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="ce0734c8a62459c51820e91f95af23933c510719" translate="yes" xml:space="preserve">
          <source>IDEs that invoke &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-2-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt; to run the configure step may wish to receive information about the artifacts that the build will produce, as well as the include directories, compile definitions, etc. used to build the artifacts. Such information can be obtained by using the &lt;a href=&quot;../../manual/cmake-file-api.7#manual:cmake-file-api(7)&quot; id=&quot;index-0-manual:cmake-file-api(7)&quot;&gt;&lt;code&gt;File API&lt;/code&gt;&lt;/a&gt;. The manual page for the File API contains more information about the API and how to invoke it. &lt;a href=&quot;../../manual/cmake-server.7#manual:cmake-server(7)&quot; id=&quot;index-0-manual:cmake-server(7)&quot;&gt;&lt;code&gt;Server mode&lt;/code&gt;&lt;/a&gt; was removed as of CMake 3.20 and should not be used on CMake 3.14 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8f9c6f03a07b171bb3e381a40bddc514de3b2e" translate="yes" xml:space="preserve">
          <source>IGNORE : create one package per component (ignore the groups)</source>
          <target state="translated">IGNORE : 구성 요소 당 하나의 패키지 생성 (그룹 무시)</target>
        </trans-unit>
        <trans-unit id="5658f64e4021f5fd2ea9feb805183f41c0309ade" translate="yes" xml:space="preserve">
          <source>IGNORE : creates one package per component, i.e. IGNORE component group</source>
          <target state="translated">IGNORE : 구성 요소 당 하나의 패키지, 즉 IGNORE 구성 요소 그룹을 작성합니다</target>
        </trans-unit>
        <trans-unit id="fe071d5ffbab2e4f28dccdd430aad3bbfc18db6e" translate="yes" xml:space="preserve">
          <source>IMPLICIT_DEPENDS_INCLUDE_TRANSFORM</source>
          <target state="translated">IMPLICIT_DEPENDS_INCLUDE_TRANSFORM</target>
        </trans-unit>
        <trans-unit id="a8818c8084e41ba4694077454a70b6260989ed58" translate="yes" xml:space="preserve">
          <source>IMPORTED</source>
          <target state="translated">IMPORTED</target>
        </trans-unit>
        <trans-unit id="dbb5bab824d7353704fa37ca3a83078d82134a65" translate="yes" xml:space="preserve">
          <source>IMPORTED Targets</source>
          <target state="translated">수입 목표</target>
        </trans-unit>
        <trans-unit id="d2c2da56c0b1c307d624c0b97a0fc21c4bd5590b" translate="yes" xml:space="preserve">
          <source>IMPORTED targets</source>
          <target state="translated">수입 목표</target>
        </trans-unit>
        <trans-unit id="bc52a6c65bbbb4a946bc82daa40f03265d2538e5" translate="yes" xml:space="preserve">
          <source>IMPORTED_COMMON_LANGUAGE_RUNTIME</source>
          <target state="translated">IMPORTED_COMMON_LANGUAGE_RUNTIME</target>
        </trans-unit>
        <trans-unit id="1b0a5b88f9229f8cfc51b77b980fd179d4993483" translate="yes" xml:space="preserve">
          <source>IMPORTED_CONFIGURATIONS</source>
          <target state="translated">IMPORTED_CONFIGURATIONS</target>
        </trans-unit>
        <trans-unit id="1a368e457518a3d16c4157e856630208bcae00b8" translate="yes" xml:space="preserve">
          <source>IMPORTED_GLOBAL</source>
          <target state="translated">IMPORTED_GLOBAL</target>
        </trans-unit>
        <trans-unit id="96efb1345112e09d36895a83a79d31b064a79050" translate="yes" xml:space="preserve">
          <source>IMPORTED_IMPLIB</source>
          <target state="translated">IMPORTED_IMPLIB</target>
        </trans-unit>
        <trans-unit id="0b849ed5ceed41093a65c426a04530b4b6dc9a3e" translate="yes" xml:space="preserve">
          <source>IMPORTED_IMPLIB_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_IMPLIB_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="436597f0f6cca55c46d9896701e7a6bc98396434" translate="yes" xml:space="preserve">
          <source>IMPORTED_IMPLIB_CONFIG</source>
          <target state="translated">IMPORTED_IMPLIB_CONFIG</target>
        </trans-unit>
        <trans-unit id="66b2dda94011f4000b6d13a833348daa0eb767fb" translate="yes" xml:space="preserve">
          <source>IMPORTED_LIBNAME</source>
          <target state="translated">IMPORTED_LIBNAME</target>
        </trans-unit>
        <trans-unit id="3a3eeb7f249297185b7deda6dac2d6759646c516" translate="yes" xml:space="preserve">
          <source>IMPORTED_LIBNAME_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_LIBNAME_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a33721e55151144425520fa00a6b038e69dc913b" translate="yes" xml:space="preserve">
          <source>IMPORTED_LIBNAME_CONFIG</source>
          <target state="translated">IMPORTED_LIBNAME_CONFIG</target>
        </trans-unit>
        <trans-unit id="33d18c93425765a4c5cbc9f71bf361baa01fed2f" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_DEPENDENT_LIBRARIES</source>
          <target state="translated">IMPORTED_LINK_DEPENDENT_LIBRARIES</target>
        </trans-unit>
        <trans-unit id="6578b9aeb6a9129ebd980e26c2a0977c289554fb" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_DEPENDENT_LIBRARIES_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_LINK_DEPENDENT_LIBRARIES_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b79dbb1cc47b8b3e9c3b2c846034a787b56b1928" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG</source>
          <target state="translated">IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG</target>
        </trans-unit>
        <trans-unit id="961ac7db8e8e9306edc532650cd0d7c6850aa014" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_LANGUAGES</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_LANGUAGES</target>
        </trans-unit>
        <trans-unit id="d54f569f35d440851a931e717ef258260a35982e" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_LANGUAGES_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_LANGUAGES_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ec34c9d24f565a0b7c84d38b8a5764e49944a1e7" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG</target>
        </trans-unit>
        <trans-unit id="3a3e55647551d0b7ccf0ce19070728b924ad7a63" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_LIBRARIES</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_LIBRARIES</target>
        </trans-unit>
        <trans-unit id="cc7b1c1ecfc3ae3e0413d1d0331e837e50db1937" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_LIBRARIES_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_LIBRARIES_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="976a9cc9892d3221d69bd3f64f290ce172de653e" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG</target>
        </trans-unit>
        <trans-unit id="b2893596d08e9cb603c9d1453830f4e7c818f98a" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_MULTIPLICITY</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_MULTIPLICITY</target>
        </trans-unit>
        <trans-unit id="8cd4ca95defb7332b3578d862b1600362325c96d" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_MULTIPLICITY_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_MULTIPLICITY_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3083a3b95d7e2486351fa855476f96a1a02e3c0b" translate="yes" xml:space="preserve">
          <source>IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG</source>
          <target state="translated">IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG</target>
        </trans-unit>
        <trans-unit id="63039aea6f043368e93b2200b3da0d4b2a831b65" translate="yes" xml:space="preserve">
          <source>IMPORTED_LOCATION</source>
          <target state="translated">IMPORTED_LOCATION</target>
        </trans-unit>
        <trans-unit id="c2b558f6fcae745b4c096a7ce2267ba19acb88de" translate="yes" xml:space="preserve">
          <source>IMPORTED_LOCATION_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_LOCATION_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="25ebc040138694a0cee8007f725eb5816023f577" translate="yes" xml:space="preserve">
          <source>IMPORTED_LOCATION_CONFIG</source>
          <target state="translated">IMPORTED_LOCATION_CONFIG</target>
        </trans-unit>
        <trans-unit id="9067d78903b60660a2b72d49c064adc17f1f882d" translate="yes" xml:space="preserve">
          <source>IMPORTED_NO_SONAME</source>
          <target state="translated">IMPORTED_NO_SONAME</target>
        </trans-unit>
        <trans-unit id="1a37a77c61552089491c1164a18dd4f95e87c323" translate="yes" xml:space="preserve">
          <source>IMPORTED_NO_SONAME_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_NO_SONAME_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a4e38edc9ebd204652d18f194c37f8f1b4587e62" translate="yes" xml:space="preserve">
          <source>IMPORTED_NO_SONAME_CONFIG</source>
          <target state="translated">IMPORTED_NO_SONAME_CONFIG</target>
        </trans-unit>
        <trans-unit id="77220d373622b46bebcd192547cfec53261ebdfd" translate="yes" xml:space="preserve">
          <source>IMPORTED_OBJECTS</source>
          <target state="translated">IMPORTED_OBJECTS</target>
        </trans-unit>
        <trans-unit id="33664292580c318fc0980568580f6917893309d2" translate="yes" xml:space="preserve">
          <source>IMPORTED_OBJECTS_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_OBJECTS_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b467666ac919c2ed244774409a16fc9ab664f5e2" translate="yes" xml:space="preserve">
          <source>IMPORTED_OBJECTS_CONFIG</source>
          <target state="translated">IMPORTED_OBJECTS_CONFIG</target>
        </trans-unit>
        <trans-unit id="381ad034dfa83bc3b514adc5d54ec26343f787db" translate="yes" xml:space="preserve">
          <source>IMPORTED_SONAME</source>
          <target state="translated">IMPORTED_SONAME</target>
        </trans-unit>
        <trans-unit id="c8060bbe2a75079bbe76669e04525191b9a5fb86" translate="yes" xml:space="preserve">
          <source>IMPORTED_SONAME_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">IMPORTED_SONAME_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4dbec324ac766c86a908a5eefcbafad682f3c57c" translate="yes" xml:space="preserve">
          <source>IMPORTED_SONAME_CONFIG</source>
          <target state="translated">IMPORTED_SONAME_CONFIG</target>
        </trans-unit>
        <trans-unit id="c564790b8573acdb925f15e9af2fad8abe1e64f0" translate="yes" xml:space="preserve">
          <source>IMPORT_PREFIX</source>
          <target state="translated">IMPORT_PREFIX</target>
        </trans-unit>
        <trans-unit id="8fb1170d88f66084fe919125d021b04855997671" translate="yes" xml:space="preserve">
          <source>IMPORT_SUFFIX</source>
          <target state="translated">IMPORT_SUFFIX</target>
        </trans-unit>
        <trans-unit id="0feb9ccb97066602201b88e214672fac0750004b" translate="yes" xml:space="preserve">
          <source>INCLUDE_DIRECTORIES</source>
          <target state="translated">INCLUDE_DIRECTORIES</target>
        </trans-unit>
        <trans-unit id="e2cf01b4d4f09a234fbbe17498cb0ccb3938614a" translate="yes" xml:space="preserve">
          <source>INCLUDE_REGULAR_EXPRESSION</source>
          <target state="translated">INCLUDE_REGULAR_EXPRESSION</target>
        </trans-unit>
        <trans-unit id="03fcf1dbb1e549db38c6a7e7181e4f147d41e728" translate="yes" xml:space="preserve">
          <source>INPUT Variables</source>
          <target state="translated">입력 변수</target>
        </trans-unit>
        <trans-unit id="b3f45d57a89b3ffa1e17e099dd4d0dc1c0e426c0" translate="yes" xml:space="preserve">
          <source>INSTALL_NAME_DIR</source>
          <target state="translated">INSTALL_NAME_DIR</target>
        </trans-unit>
        <trans-unit id="4e31197f9918e54a4825166ea0c91dd692e2c0fd" translate="yes" xml:space="preserve">
          <source>INSTALL_REMOVE_ENVIRONMENT_RPATH</source>
          <target state="translated">INSTALL_REMOVE_ENVIRONMENT_RPATH</target>
        </trans-unit>
        <trans-unit id="822f289e614cfbc66f06f6b266d5054386fe69f6" translate="yes" xml:space="preserve">
          <source>INSTALL_RPATH</source>
          <target state="translated">INSTALL_RPATH</target>
        </trans-unit>
        <trans-unit id="70d65f8c7acf43d33e5d5756a77fb8a0a8d8b3d2" translate="yes" xml:space="preserve">
          <source>INSTALL_RPATH_USE_LINK_PATH</source>
          <target state="translated">INSTALL_RPATH_USE_LINK_PATH</target>
        </trans-unit>
        <trans-unit id="e245d04f810b0dd7e6d93c7740f9d8b42040c3d7" translate="yes" xml:space="preserve">
          <source>INSTALL_TYPES lists the installation types of which this component is a part. When one of these installations types is selected, this component will automatically be selected. Installation types are described with the cpack_add_install_type command, detailed below.</source>
          <target state="translated">INSTALL_TYPES는이 구성 요소가 속하는 설치 유형을 나열합니다. 이러한 설치 유형 중 하나를 선택하면이 구성 요소가 자동으로 선택됩니다. 설치 유형은 cpack_add_install_type 명령으로 설명되며 아래에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa903d896b0fe747c7c5e9e38c607c2aae9b8d6c" translate="yes" xml:space="preserve">
          <source>INTERFACE_AUTOUIC_OPTIONS</source>
          <target state="translated">INTERFACE_AUTOUIC_OPTIONS</target>
        </trans-unit>
        <trans-unit id="ed01fa9f47e582cda3bdd9de77e9bb9cb01c4364" translate="yes" xml:space="preserve">
          <source>INTERFACE_COMPILE_DEFINITIONS</source>
          <target state="translated">INTERFACE_COMPILE_DEFINITIONS</target>
        </trans-unit>
        <trans-unit id="ca93a5bee4976592b801b145621fe8f191298bbe" translate="yes" xml:space="preserve">
          <source>INTERFACE_COMPILE_FEATURES</source>
          <target state="translated">INTERFACE_COMPILE_FEATURES</target>
        </trans-unit>
        <trans-unit id="f0b40beed53b04d76f061359c7293cc17b6763d5" translate="yes" xml:space="preserve">
          <source>INTERFACE_COMPILE_OPTIONS</source>
          <target state="translated">INTERFACE_COMPILE_OPTIONS</target>
        </trans-unit>
        <trans-unit id="0c19c8d04bb7d129196c338869c5c8c3ecc649e4" translate="yes" xml:space="preserve">
          <source>INTERFACE_INCLUDE_DIRECTORIES</source>
          <target state="translated">INTERFACE_INCLUDE_DIRECTORIES</target>
        </trans-unit>
        <trans-unit id="c9b5828418a3e1c24f9d587ae9f4df9319f92679" translate="yes" xml:space="preserve">
          <source>INTERFACE_LINK_DEPENDS</source>
          <target state="translated">INTERFACE_LINK_DEPENDS</target>
        </trans-unit>
        <trans-unit id="1501e02d10e8ce1f7dbe5f895507dacc97bfe9de" translate="yes" xml:space="preserve">
          <source>INTERFACE_LINK_DIRECTORIES</source>
          <target state="translated">INTERFACE_LINK_DIRECTORIES</target>
        </trans-unit>
        <trans-unit id="6fd73dcf57e1dee14fe719c5d6a34b4670481b82" translate="yes" xml:space="preserve">
          <source>INTERFACE_LINK_LIBRARIES</source>
          <target state="translated">INTERFACE_LINK_LIBRARIES</target>
        </trans-unit>
        <trans-unit id="bf47d61fe4614a8272f1cea5694e1b3a75a284cc" translate="yes" xml:space="preserve">
          <source>INTERFACE_LINK_OPTIONS</source>
          <target state="translated">INTERFACE_LINK_OPTIONS</target>
        </trans-unit>
        <trans-unit id="46da0c216c04ffbb9d833ea74b02dcd238c9e3ec" translate="yes" xml:space="preserve">
          <source>INTERFACE_POSITION_INDEPENDENT_CODE</source>
          <target state="translated">INTERFACE_POSITION_INDEPENDENT_CODE</target>
        </trans-unit>
        <trans-unit id="00c7af6a22108f1694458c7537863e0a1abc86b1" translate="yes" xml:space="preserve">
          <source>INTERFACE_PRECOMPILE_HEADERS</source>
          <target state="translated">INTERFACE_PRECOMPILE_HEADERS</target>
        </trans-unit>
        <trans-unit id="b9b18920f4d47089285d5acaaea130a2afef0f8c" translate="yes" xml:space="preserve">
          <source>INTERFACE_SOURCES</source>
          <target state="translated">INTERFACE_SOURCES</target>
        </trans-unit>
        <trans-unit id="3e7798c8051a37b1f478ecfdbe2544ee97ace640" translate="yes" xml:space="preserve">
          <source>INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</source>
          <target state="translated">INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</target>
        </trans-unit>
        <trans-unit id="076bb30cb3b66c1e3da62d78376d766f333bb64c" translate="yes" xml:space="preserve">
          <source>INTERPROCEDURAL_OPTIMIZATION</source>
          <target state="translated">INTERPROCEDURAL_OPTIMIZATION</target>
        </trans-unit>
        <trans-unit id="47b2205d1d0884f0e850437bcd1660e2a2bcbf1b" translate="yes" xml:space="preserve">
          <source>INTERPROCEDURAL_OPTIMIZATION_&amp;lt;CONFIG&amp;gt;</source>
          <target state="translated">INTERPROCEDURAL_OPTIMIZATION_&amp;lt;CONFIG&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ae14834930d3992190a52e293f142eb94041a2c8" translate="yes" xml:space="preserve">
          <source>INTERPROCEDURAL_OPTIMIZATION_CONFIG</source>
          <target state="translated">INTERPROCEDURAL_OPTIMIZATION_CONFIG</target>
        </trans-unit>
        <trans-unit id="7851f9c2656f6462f84727f7196fae10fc8d6257" translate="yes" xml:space="preserve">
          <source>IN_TRY_COMPILE</source>
          <target state="translated">IN_TRY_COMPILE</target>
        </trans-unit>
        <trans-unit id="d4ba35793b9b14a1c9dfe7552c4aadb3500b92b0" translate="yes" xml:space="preserve">
          <source>IOS</source>
          <target state="translated">IOS</target>
        </trans-unit>
        <trans-unit id="0e120263a4da29a38dc959d9dcb59482359a7325" translate="yes" xml:space="preserve">
          <source>IOS_INSTALL_COMBINED</source>
          <target state="translated">IOS_INSTALL_COMBINED</target>
        </trans-unit>
        <trans-unit id="37ed12747583ed3f6e72598286ddc8ca59cce09f" translate="yes" xml:space="preserve">
          <source>ISPC</source>
          <target state="translated">ISPC</target>
        </trans-unit>
        <trans-unit id="d5f76c645252afc8d2a4ee82c498cb4a801f17b9" translate="yes" xml:space="preserve">
          <source>ISPC generated header output directory.</source>
          <target state="translated">ISPC가 생성 한 헤더 출력 디렉토리.</target>
        </trans-unit>
        <trans-unit id="2a1753c1a7166af6e17e4a68d755cb548dcf070b" translate="yes" xml:space="preserve">
          <source>ISPCFLAGS</source>
          <target state="translated">ISPCFLAGS</target>
        </trans-unit>
        <trans-unit id="8bffd3ec9281c11c95af6b07fd1e4c41d3320e05" translate="yes" xml:space="preserve">
          <source>ISPC_HEADER_DIRECTORY</source>
          <target state="translated">ISPC_HEADER_DIRECTORY</target>
        </trans-unit>
        <trans-unit id="c0fa9640fee1aa3799d91876b0abb870f0807199" translate="yes" xml:space="preserve">
          <source>ISPC_HEADER_SUFFIX</source>
          <target state="translated">ISPC_HEADER_SUFFIX</target>
        </trans-unit>
        <trans-unit id="c3d01e230e16f0a91ea209f4feccb3ece4570607" translate="yes" xml:space="preserve">
          <source>ISPC_INSTRUCTION_SETS</source>
          <target state="translated">ISPC_INSTRUCTION_SETS</target>
        </trans-unit>
        <trans-unit id="93694faa1953a0c88a2103521f10e1538804da7c" translate="yes" xml:space="preserve">
          <source>Ice 3.7 and later also include C++11-specific components: &lt;code&gt;Glacier2++11&lt;/code&gt;, &lt;code&gt;Ice++11&lt;/code&gt;, &lt;code&gt;IceBox++11&lt;/code&gt;, &lt;code&gt;IceDiscovery++11&lt;/code&gt;&lt;code&gt;IceGrid&lt;/code&gt;, &lt;code&gt;IceLocatorDiscovery++11&lt;/code&gt;, &lt;code&gt;IceSSL++11&lt;/code&gt;, &lt;code&gt;IceStorm++11&lt;/code&gt;</source>
          <target state="translated">Ice 3.7 이상에는 C ++ 11 관련 구성 요소 : &lt;code&gt;Glacier2++11&lt;/code&gt; , &lt;code&gt;Ice++11&lt;/code&gt; , &lt;code&gt;IceBox++11&lt;/code&gt; , &lt;code&gt;IceDiscovery++11&lt;/code&gt; &lt;code&gt;IceGrid&lt;/code&gt; , &lt;code&gt;IceLocatorDiscovery++11&lt;/code&gt; , &lt;code&gt;IceSSL++11&lt;/code&gt; , &lt;code&gt;IceStorm++11&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd3749ab357174db21c2c5b3da02f69a21a15278" translate="yes" xml:space="preserve">
          <source>Ice component libraries are reported in:</source>
          <target state="translated">얼음 성분 라이브러리는 다음과 같이보고됩니다 :</target>
        </trans-unit>
        <trans-unit id="673398a749b2ae1ae98867117a664ea43f151486" translate="yes" xml:space="preserve">
          <source>Ice db programs (Windows only; standard system versions on all other platforms) are reported in:</source>
          <target state="translated">Ice db 프로그램 (Windows 만 해당, 다른 모든 플랫폼의 표준 시스템 버전)은 다음과 같이보고됩니다.</target>
        </trans-unit>
        <trans-unit id="aea0e97a8a8a3384aeff33708af24b70f547be3f" translate="yes" xml:space="preserve">
          <source>Ice programs are reported in:</source>
          <target state="translated">얼음 프로그램은 다음과 같이보고됩니다 :</target>
        </trans-unit>
        <trans-unit id="516f7d11bcb837e9e4551afd22ef4c89c2126246" translate="yes" xml:space="preserve">
          <source>Ice slice programs are reported in:</source>
          <target state="translated">아이스 슬라이스 프로그램은 다음과 같이보고됩니다.</target>
        </trans-unit>
        <trans-unit id="b59aba52ee1f7e01e9db3e4ff5ed214ca1a4ab0d" translate="yes" xml:space="preserve">
          <source>Ideally such dependencies should be used through their own &lt;a href=&quot;../../manual/cmake-buildsystem.7#imported-targets&quot;&gt;IMPORTED targets&lt;/a&gt; that have their own &lt;a href=&quot;../../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION&quot; id=&quot;index-3-prop_tgt:IMPORTED_LOCATION&quot;&gt;&lt;code&gt;IMPORTED_LOCATION&lt;/code&gt;&lt;/a&gt; and usage requirement properties such as &lt;a href=&quot;../../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; populated appropriately. Those imported targets may then be used with the &lt;a href=&quot;../../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt; command for &lt;code&gt;MathFunctions&lt;/code&gt;:</source>
          <target state="translated">이상적으로 이러한 종속성은 자체 &lt;a href=&quot;../../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION&quot; id=&quot;index-3-prop_tgt:IMPORTED_LOCATION&quot;&gt; &lt;code&gt;IMPORTED_LOCATION&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; 와 같은 사용 요구 사항 속성이 적절하게 채워진 자체 &lt;a href=&quot;../../manual/cmake-buildsystem.7#imported-targets&quot;&gt;IMPORTED 대상&lt;/a&gt; 을 통해 사용해야합니다 . 가져온 대상은 &lt;code&gt;MathFunctions&lt;/code&gt; 에 대한 &lt;a href=&quot;../../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; 명령 과 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="65d58e79a648ee3fbe64dc218d2202f43eeded0d" translate="yes" xml:space="preserve">
          <source>Ideally such dependencies should be used through their own &lt;a href=&quot;cmake-buildsystem.7#imported-targets&quot;&gt;IMPORTED targets&lt;/a&gt; that have their own &lt;a href=&quot;../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION&quot; id=&quot;index-0-prop_tgt:IMPORTED_LOCATION&quot;&gt;&lt;code&gt;IMPORTED_LOCATION&lt;/code&gt;&lt;/a&gt; and usage requirement properties such as &lt;a href=&quot;../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; populated appropriately. Those imported targets may then be used with the &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-1-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt; command for &lt;code&gt;ClimbingStats&lt;/code&gt;:</source>
          <target state="translated">이러한 종속성은 &lt;a href=&quot;../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION&quot; id=&quot;index-0-prop_tgt:IMPORTED_LOCATION&quot;&gt; &lt;code&gt;IMPORTED_LOCATION&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot; id=&quot;index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; 와 같은 사용 요구 사항 속성이 적절하게 채워진 자체 &lt;a href=&quot;cmake-buildsystem.7#imported-targets&quot;&gt;IMPORTED 대상&lt;/a&gt; 을 통해 이상적으로 사용되어야합니다 . 임포트 된 타겟은 &lt;code&gt;ClimbingStats&lt;/code&gt; 에 대한 &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-1-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; 명령 과 함께 사용될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="5f3c489fa514f15ec1e6d85a141ade9a04592653" translate="yes" xml:space="preserve">
          <source>Identification string of &quot;simulated&quot; compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b7cd9d088e4e4010e2d75a7c44239843830f1b" translate="yes" xml:space="preserve">
          <source>Identification string of &amp;ldquo;simulated&amp;rdquo; compiler.</source>
          <target state="translated">&quot;시뮬레이션 된&quot;컴파일러의 식별 문자열.</target>
        </trans-unit>
        <trans-unit id="bfdcc1c3809d00c314a8fc81e41ca83c80fac752" translate="yes" xml:space="preserve">
          <source>Identifiers must be unique within a resource type. However, they do not have to be unique across resource types. For example, it is valid to have a &lt;code&gt;gpus&lt;/code&gt; resource named &lt;code&gt;0&lt;/code&gt; and a &lt;code&gt;crypto_chips&lt;/code&gt; resource named &lt;code&gt;0&lt;/code&gt;, but not two &lt;code&gt;gpus&lt;/code&gt; resources both named &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">식별자는 리소스 유형 내에서 고유해야합니다. 그러나 리소스 유형간에 고유 할 필요는 없습니다. 예를 들어, 가지고 유효 &lt;code&gt;gpus&lt;/code&gt; 이름 지정된 자원 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;crypto_chips&lt;/code&gt; 라는 이름의 자원 &lt;code&gt;0&lt;/code&gt; ,하지만 두 &lt;code&gt;gpus&lt;/code&gt; 자원은 모두 이름이 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9208a8e2a5a5a7f150098435e8b4d0ef7f6f1ec1" translate="yes" xml:space="preserve">
          <source>Identifies the root on a filesystem with multiple roots (such as &lt;code&gt;&quot;C:&quot;&lt;/code&gt; or &lt;code&gt;&quot;//myserver&quot;&lt;/code&gt;). It is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ec3bb173952de5e276065ee7916bf20c584e7d" translate="yes" xml:space="preserve">
          <source>If &amp;lt;component&amp;gt; is set then anything installed will use this COMPONENT.</source>
          <target state="translated">&amp;lt;component&amp;gt;가 설정되어 있으면 설치된 모든 구성 요소가이 구성 요소를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9a6288afd6a9622caa8fb3603d42f7dea3940431" translate="yes" xml:space="preserve">
          <source>If &amp;lt;copy&amp;gt; is set to TRUE then the plugins will be copied rather than installed. This is to allow this module to be used at CMake time rather than install time.</source>
          <target state="translated">&amp;lt;copy&amp;gt;가 TRUE로 설정되면 플러그인이 설치되지 않고 복사됩니다. 설치 시간이 아닌 CMake 시간에이 모듈을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="056d840c91cf477468059cf4f45e1ec665e1aabf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-1-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; is called without an explicit mode option (&lt;code&gt;MODULE&lt;/code&gt;, &lt;code&gt;CONFIG&lt;/code&gt;, or &lt;code&gt;NO_MODULE&lt;/code&gt;) and no &lt;code&gt;Find&amp;lt;pkg&amp;gt;.cmake&lt;/code&gt; module is in &lt;a href=&quot;cmake_module_path#variable:CMAKE_MODULE_PATH&quot; id=&quot;index-0-variable:CMAKE_MODULE_PATH&quot;&gt;&lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt;&lt;/a&gt; then CMake implicitly assumes that the caller intends to search for a package configuration file. If no package configuration file is found then the wording of the failure message must account for both the case that the package is really missing and the case that the project has a bug and failed to provide the intended Find module. If instead the caller specifies an explicit mode option then the failure message can be more specific.</source>
          <target state="translated">경우 &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-1-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; 명시 적 모드 옵션 (없이 호출되지 &lt;code&gt;MODULE&lt;/code&gt; , &lt;code&gt;CONFIG&lt;/code&gt; , 또는 &lt;code&gt;NO_MODULE&lt;/code&gt; ) 더 &lt;code&gt;Find&amp;lt;pkg&amp;gt;.cmake&lt;/code&gt; 모듈에서 &lt;a href=&quot;cmake_module_path#variable:CMAKE_MODULE_PATH&quot; id=&quot;index-0-variable:CMAKE_MODULE_PATH&quot;&gt; &lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt; &lt;/a&gt; 다음 CMake가 암시 적으로 발신자가 패키지 구성 파일을 검색하고자하는 것으로 가정합니다. 패키지 구성 파일이 없으면 실패 메시지의 문구는 패키지가 실제로 누락 된 경우와 프로젝트에 버그가 있고 원하는 찾기 모듈을 제공하지 못한 경우를 모두 설명해야합니다. 대신 호출자가 명시 적 모드 옵션을 지정하면 실패 메시지가보다 구체적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdd54cc614605bf4be122eb480f2a773f6443015" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0056#policy:CMP0056&quot; id=&quot;index-0-policy:CMP0056&quot;&gt;&lt;code&gt;CMP0056&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;, then &lt;a href=&quot;../variable/cmake_exe_linker_flags#variable:CMAKE_EXE_LINKER_FLAGS&quot; id=&quot;index-0-variable:CMAKE_EXE_LINKER_FLAGS&quot;&gt;&lt;code&gt;CMAKE_EXE_LINKER_FLAGS&lt;/code&gt;&lt;/a&gt; is passed in as well.</source>
          <target state="translated">경우 &lt;a href=&quot;../policy/cmp0056#policy:CMP0056&quot; id=&quot;index-0-policy:CMP0056&quot;&gt; &lt;code&gt;CMP0056&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;NEW&lt;/code&gt; 다음 &lt;a href=&quot;../variable/cmake_exe_linker_flags#variable:CMAKE_EXE_LINKER_FLAGS&quot; id=&quot;index-0-variable:CMAKE_EXE_LINKER_FLAGS&quot;&gt; &lt;code&gt;CMAKE_EXE_LINKER_FLAGS&lt;/code&gt; 는&lt;/a&gt; 도에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="c5e2ce044c4b113f6126ca41c10413ccf84fc5f1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0067#policy:CMP0067&quot; id=&quot;index-0-policy:CMP0067&quot;&gt;&lt;code&gt;CMP0067&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;, or any of the &lt;code&gt;&amp;lt;LANG&amp;gt;_STANDARD&lt;/code&gt;, &lt;code&gt;&amp;lt;LANG&amp;gt;_STANDARD_REQUIRED&lt;/code&gt;, or &lt;code&gt;&amp;lt;LANG&amp;gt;_EXTENSIONS&lt;/code&gt; options are used, then the language standard variables are honored:</source>
          <target state="translated">경우 &lt;a href=&quot;../policy/cmp0067#policy:CMP0067&quot; id=&quot;index-0-policy:CMP0067&quot;&gt; &lt;code&gt;CMP0067&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;NEW&lt;/code&gt; , 또는의 &lt;code&gt;&amp;lt;LANG&amp;gt;_STANDARD&lt;/code&gt; , &lt;code&gt;&amp;lt;LANG&amp;gt;_STANDARD_REQUIRED&lt;/code&gt; , 또는 &lt;code&gt;&amp;lt;LANG&amp;gt;_EXTENSIONS&lt;/code&gt; 옵션이 사용되며, 다음 언어 표준 변수는 영광 :</target>
        </trans-unit>
        <trans-unit id="3a9da825fe3c982cd8540992f16ef1db1637b923" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0083#policy:CMP0083&quot; id=&quot;index-0-policy:CMP0083&quot;&gt;&lt;code&gt;CMP0083&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;, then in order to obtain correct behavior at link time, the &lt;code&gt;check_pie_supported()&lt;/code&gt; command from the &lt;a href=&quot;../module/checkpiesupported#module:CheckPIESupported&quot; id=&quot;index-0-module:CheckPIESupported&quot;&gt;&lt;code&gt;CheckPIESupported&lt;/code&gt;&lt;/a&gt; module must be called before using the &lt;a href=&quot;#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt;&lt;code&gt;try_compile()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">경우 &lt;a href=&quot;../policy/cmp0083#policy:CMP0083&quot; id=&quot;index-0-policy:CMP0083&quot;&gt; &lt;code&gt;CMP0083&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;NEW&lt;/code&gt; , 다음 순서로 링크시 올바른 동작을 얻으려면 &lt;code&gt;check_pie_supported()&lt;/code&gt; 로부터 명령 &lt;a href=&quot;../module/checkpiesupported#module:CheckPIESupported&quot; id=&quot;index-0-module:CheckPIESupported&quot;&gt; &lt;code&gt;CheckPIESupported&lt;/code&gt; 의&lt;/a&gt; 모듈은 사용하기 전에 호출해야 &lt;a href=&quot;#command:try_compile&quot; id=&quot;index-0-command:try_compile&quot;&gt; &lt;code&gt;try_compile()&lt;/code&gt; &lt;/a&gt; 명령을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="212b32b2bb797cd65520ab50608711936113c89e" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0090#policy:CMP0090&quot; id=&quot;index-1-policy:CMP0090&quot;&gt;&lt;code&gt;CMP0090&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; set to &lt;code&gt;NEW&lt;/code&gt; this variable does nothing, and the &lt;a href=&quot;cmake_export_no_package_registry#variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY&quot; id=&quot;index-0-variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY&quot;&gt;&lt;code&gt;CMAKE_EXPORT_NO_PACKAGE_REGISTRY&lt;/code&gt;&lt;/a&gt; variable controls the behavior instead.</source>
          <target state="translated">경우 &lt;a href=&quot;../policy/cmp0090#policy:CMP0090&quot; id=&quot;index-1-policy:CMP0090&quot;&gt; &lt;code&gt;CMP0090&lt;/code&gt; 가&lt;/a&gt; 되어 &lt;em&gt;있지&lt;/em&gt; 설정 &lt;code&gt;NEW&lt;/code&gt; 이 변수는 아무것도 실시하지 않습니다, 그리고 &lt;a href=&quot;cmake_export_no_package_registry#variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY&quot; id=&quot;index-0-variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY&quot;&gt; &lt;code&gt;CMAKE_EXPORT_NO_PACKAGE_REGISTRY&lt;/code&gt; 의&lt;/a&gt; 변수 대신 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="1b6e6a76767f8cf53ec74b9f91d0b851ffbae61a" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0090#policy:CMP0090&quot; id=&quot;index-1-policy:CMP0090&quot;&gt;&lt;code&gt;CMP0090&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt; this variable does nothing, and the &lt;a href=&quot;cmake_export_package_registry#variable:CMAKE_EXPORT_PACKAGE_REGISTRY&quot; id=&quot;index-0-variable:CMAKE_EXPORT_PACKAGE_REGISTRY&quot;&gt;&lt;code&gt;CMAKE_EXPORT_PACKAGE_REGISTRY&lt;/code&gt;&lt;/a&gt; variable controls the behavior instead.</source>
          <target state="translated">&lt;a href=&quot;../policy/cmp0090#policy:CMP0090&quot; id=&quot;index-1-policy:CMP0090&quot;&gt; &lt;code&gt;CMP0090&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;NEW&lt;/code&gt; 로 설정 되면 이 변수는 아무 것도 수행하지 않으며 &lt;a href=&quot;cmake_export_package_registry#variable:CMAKE_EXPORT_PACKAGE_REGISTRY&quot; id=&quot;index-0-variable:CMAKE_EXPORT_PACKAGE_REGISTRY&quot;&gt; &lt;code&gt;CMAKE_EXPORT_PACKAGE_REGISTRY&lt;/code&gt; &lt;/a&gt; 변수는 대신 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="a20c9751d930b3cdaeed1ef7037ca7d4b566d382" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-5-policy:CMP0114&quot;&gt;&lt;code&gt;CMP0114&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;, step targets are fully responsible for holding the custom commands implementing their steps. The primary target created by &lt;code&gt;ExternalProject_Add&lt;/code&gt; depends on the step targets, and the step targets depend on each other. The target-level dependencies match the file-level dependencies used by the custom commands for each step. The targets for steps created with &lt;a href=&quot;#command:externalproject_add_step&quot; id=&quot;index-3-command:externalproject_add_step&quot;&gt;&lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;INDEPENDENT&lt;/code&gt; option do not depend on the external targets specified by &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-7-command:externalproject_add&quot;&gt;&lt;code&gt;ExternalProject_Add()&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;DEPENDS&lt;/code&gt; option. The predefined steps &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;patch&lt;/code&gt; are independent.</source>
          <target state="translated">&lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-5-policy:CMP0114&quot;&gt; &lt;code&gt;CMP0114&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;NEW&lt;/code&gt; 로 설정된 경우 단계 대상은 해당 단계를 구현하는 사용자 정의 명령을 보유 할 책임이 있습니다. &lt;code&gt;ExternalProject_Add&lt;/code&gt; 에 의해 생성 된 기본 대상 은 단계 대상에 따라 다르며 단계 대상은 서로 종속됩니다. 대상 수준 종속성은 각 단계의 사용자 지정 명령에서 사용하는 파일 수준 종속성과 일치합니다. &lt;a href=&quot;#command:externalproject_add_step&quot; id=&quot;index-3-command:externalproject_add_step&quot;&gt; &lt;code&gt;ExternalProject_Add_Step()&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;INDEPENDENT&lt;/code&gt; 옵션으로 생성 된 단계의 대상은 &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-7-command:externalproject_add&quot;&gt; &lt;code&gt;ExternalProject_Add()&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;DEPENDS&lt;/code&gt; 옵션에 지정된 외부 대상에 종속되지 않습니다 . 사전 정의 된 단계 &lt;code&gt;mkdir&lt;/code&gt; , &lt;code&gt;download&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; 및 &lt;code&gt;patch&lt;/code&gt; 는 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="30eace7d81f14846e8f65d5fe6ac5cdbe00d03ac" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-6-policy:CMP0114&quot;&gt;&lt;code&gt;CMP0114&lt;/code&gt;&lt;/a&gt; is not &lt;code&gt;NEW&lt;/code&gt;, the following deprecated behavior is available:</source>
          <target state="translated">&lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-6-policy:CMP0114&quot;&gt; &lt;code&gt;CMP0114&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;NEW&lt;/code&gt; 가 아닌 경우 다음과 같은 더 이상 사용되지 않는 동작을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="96cdff75ca84131e50e96dd94b9d09d2d25bd354" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../prop_tgt/cuda_architectures#prop_tgt:CUDA_ARCHITECTURES&quot; id=&quot;index-4-prop_tgt:CUDA_ARCHITECTURES&quot;&gt;&lt;code&gt;CUDA_ARCHITECTURES&lt;/code&gt;&lt;/a&gt; is set to a false value no architectures flags are passed to the compiler. This is intended to support packagers and the rare cases where full control over the passed flags is required.</source>
          <target state="translated">&lt;a href=&quot;../prop_tgt/cuda_architectures#prop_tgt:CUDA_ARCHITECTURES&quot; id=&quot;index-4-prop_tgt:CUDA_ARCHITECTURES&quot;&gt; &lt;code&gt;CUDA_ARCHITECTURES&lt;/code&gt; &lt;/a&gt; 가 false 값으로 설정 되면 아키텍처 플래그가 컴파일러에 전달되지 않습니다. 이는 패키저 및 전달 된 플래그에 대한 완전한 제어가 필요한 드문 경우를 지원하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="999c9d83a4f7f8bf05f47fe5f8fb6bb079bb85be" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../prop_tgt/skip_build_rpath#prop_tgt:SKIP_BUILD_RPATH&quot; id=&quot;index-1-prop_tgt:SKIP_BUILD_RPATH&quot;&gt;&lt;code&gt;SKIP_BUILD_RPATH&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../variable/cmake_skip_rpath#variable:CMAKE_SKIP_RPATH&quot; id=&quot;index-1-variable:CMAKE_SKIP_RPATH&quot;&gt;&lt;code&gt;CMAKE_SKIP_RPATH&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../variable/cmake_skip_install_rpath#variable:CMAKE_SKIP_INSTALL_RPATH&quot; id=&quot;index-1-variable:CMAKE_SKIP_INSTALL_RPATH&quot;&gt;&lt;code&gt;CMAKE_SKIP_INSTALL_RPATH&lt;/code&gt;&lt;/a&gt; were used to strip the directory portion of the &lt;code&gt;install_name&lt;/code&gt; of a target, one may set &lt;code&gt;INSTALL_NAME_DIR=&quot;&quot;&lt;/code&gt; instead.</source>
          <target state="translated">경우 &lt;a href=&quot;../prop_tgt/skip_build_rpath#prop_tgt:SKIP_BUILD_RPATH&quot; id=&quot;index-1-prop_tgt:SKIP_BUILD_RPATH&quot;&gt; &lt;code&gt;SKIP_BUILD_RPATH&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../variable/cmake_skip_rpath#variable:CMAKE_SKIP_RPATH&quot; id=&quot;index-1-variable:CMAKE_SKIP_RPATH&quot;&gt; &lt;code&gt;CMAKE_SKIP_RPATH&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../variable/cmake_skip_install_rpath#variable:CMAKE_SKIP_INSTALL_RPATH&quot; id=&quot;index-1-variable:CMAKE_SKIP_INSTALL_RPATH&quot;&gt; &lt;code&gt;CMAKE_SKIP_INSTALL_RPATH&lt;/code&gt; 가&lt;/a&gt; 의 디렉토리 부 스트립 하였다 &lt;code&gt;install_name&lt;/code&gt; 타겟의를 하나 설정할 수 &lt;code&gt;INSTALL_NAME_DIR=&quot;&quot;&lt;/code&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="3f7183d57e29e6a586bf788f9c6fb9a37eed9fd2" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt;&lt;code&gt;AUTOMOC&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;autouic#prop_tgt:AUTOUIC&quot; id=&quot;index-1-prop_tgt:AUTOUIC&quot;&gt;&lt;code&gt;AUTOUIC&lt;/code&gt;&lt;/a&gt; depends on a file that is either</source>
          <target state="translated">경우 &lt;a href=&quot;automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt; &lt;code&gt;AUTOMOC&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;autouic#prop_tgt:AUTOUIC&quot; id=&quot;index-1-prop_tgt:AUTOUIC&quot;&gt; &lt;code&gt;AUTOUIC&lt;/code&gt; 는&lt;/a&gt; 중입니다 파일에 따라 달라집니다</target>
        </trans-unit>
        <trans-unit id="ca1c3d5099e33582dd0b1a43fe13187133686709" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt; is invoked with the command line parameter &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE=path/to/file&lt;/code&gt;, the file will be loaded early to set values for the compilers. The &lt;a href=&quot;../variable/cmake_crosscompiling#variable:CMAKE_CROSSCOMPILING&quot; id=&quot;index-0-variable:CMAKE_CROSSCOMPILING&quot;&gt;&lt;code&gt;CMAKE_CROSSCOMPILING&lt;/code&gt;&lt;/a&gt; variable is set to true when CMake is cross-compiling.</source>
          <target state="translated">경우 &lt;a href=&quot;cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; 커맨드 라인 파라미터를 호출 &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE=path/to/file&lt;/code&gt; , 파일이 컴파일러에 대해 설정된 값으로 초기에 로딩된다. &lt;a href=&quot;../variable/cmake_crosscompiling#variable:CMAKE_CROSSCOMPILING&quot; id=&quot;index-0-variable:CMAKE_CROSSCOMPILING&quot;&gt; &lt;code&gt;CMAKE_CROSSCOMPILING&lt;/code&gt; 의&lt;/a&gt; CMake 크로스 컴파일 할 때 변수가 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="086a5fd2de067a7bc414ebb51d410e7836b104ba" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;cmake_find_package_sort_order#variable:CMAKE_FIND_PACKAGE_SORT_ORDER&quot; id=&quot;index-1-variable:CMAKE_FIND_PACKAGE_SORT_ORDER&quot;&gt;&lt;code&gt;CMAKE_FIND_PACKAGE_SORT_ORDER&lt;/code&gt;&lt;/a&gt; is not set or is set to &lt;code&gt;NONE&lt;/code&gt; this variable has no effect.</source>
          <target state="translated">경우 &lt;a href=&quot;cmake_find_package_sort_order#variable:CMAKE_FIND_PACKAGE_SORT_ORDER&quot; id=&quot;index-1-variable:CMAKE_FIND_PACKAGE_SORT_ORDER&quot;&gt; &lt;code&gt;CMAKE_FIND_PACKAGE_SORT_ORDER&lt;/code&gt; 이&lt;/a&gt; 설정되지 않았거나 설정되어 &lt;code&gt;NONE&lt;/code&gt; 이 변수는 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b67e39f5b6775a0cbbc5e1d299f9974269a05bfb" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;cmake_osx_architectures#variable:CMAKE_OSX_ARCHITECTURES&quot; id=&quot;index-0-variable:CMAKE_OSX_ARCHITECTURES&quot;&gt;&lt;code&gt;CMAKE_OSX_ARCHITECTURES&lt;/code&gt;&lt;/a&gt; is not set, CMake adds explicit flags to tell the compiler to build for the host architecture so the toolchain does not have to guess based on the process tree's architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc866d8d787c08908c585aa0ac815435f892d9c" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;cmake_osx_architectures#variable:CMAKE_OSX_ARCHITECTURES&quot; id=&quot;index-0-variable:CMAKE_OSX_ARCHITECTURES&quot;&gt;&lt;code&gt;CMAKE_OSX_ARCHITECTURES&lt;/code&gt;&lt;/a&gt; specifies multiple architectures, the value of &lt;code&gt;CMAKE_&amp;lt;LANG&amp;gt;_BYTE_ORDER&lt;/code&gt; is non-empty only if all architectures share the same byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f835249454378340a4111493d27576acf11b129a" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;cmp0053#policy:CMP0053&quot; id=&quot;index-0-policy:CMP0053&quot;&gt;&lt;code&gt;CMP0053&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;, this policy has no effect and is treated as always being &lt;code&gt;NEW&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;cmp0053#policy:CMP0053&quot; id=&quot;index-0-policy:CMP0053&quot;&gt; &lt;code&gt;CMP0053&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;NEW&lt;/code&gt; ,이 정책이 적용되지 않습니다 항상 것으로 처리됩니다 &lt;code&gt;NEW&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae6583014ba68b5b0f7388a6af45affb7b936ce6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&amp;lt;PackageName&amp;gt;&lt;/code&gt; does not match &lt;code&gt;CMAKE_FIND_PACKAGE_NAME&lt;/code&gt; for the calling module, a warning that there is a mismatch is given. The &lt;code&gt;FPHSA_NAME_MISMATCHED&lt;/code&gt; variable may be set to bypass the warning if using the old signature and the &lt;code&gt;NAME_MISMATCHED&lt;/code&gt; argument using the new signature. To avoid forcing the caller to require newer versions of CMake for usage, the variable&amp;rsquo;s value will be used if defined when the &lt;code&gt;NAME_MISMATCHED&lt;/code&gt; argument is not passed for the new signature (but using both is an error)..</source>
          <target state="translated">경우 &lt;code&gt;&amp;lt;PackageName&amp;gt;&lt;/code&gt; 와 일치하지 않는 &lt;code&gt;CMAKE_FIND_PACKAGE_NAME&lt;/code&gt; 를 호출 모듈, 불일치가 있다는 경고가 주어집니다. &lt;code&gt;FPHSA_NAME_MISMATCHED&lt;/code&gt; 의 이전 서명과 사용하는 경우 변수는 경고 우회으로 설정 될 수 &lt;code&gt;NAME_MISMATCHED&lt;/code&gt; 새로운 서명을 사용하여 인수를. 호출자가 사용을 위해 최신 버전의 CMake를 요구하지 않도록하려면 &lt;code&gt;NAME_MISMATCHED&lt;/code&gt; 인수가 새 서명에 대해 전달되지 않을 때 정의 된 경우 변수 값이 사용됩니다 (둘 다 사용하는 것은 오류 임).</target>
        </trans-unit>
        <trans-unit id="26ea136b61cad5d2e0bd0c36737acf000d133740" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&amp;lt;PackageName&amp;gt;&lt;/code&gt; does not match &lt;code&gt;CMAKE_FIND_PACKAGE_NAME&lt;/code&gt; for the calling module, a warning that there is a mismatch is given. The &lt;code&gt;FPHSA_NAME_MISMATCHED&lt;/code&gt; variable may be set to bypass the warning if using the old signature and the &lt;code&gt;NAME_MISMATCHED&lt;/code&gt; argument using the new signature. To avoid forcing the caller to require newer versions of CMake for usage, the variable's value will be used if defined when the &lt;code&gt;NAME_MISMATCHED&lt;/code&gt; argument is not passed for the new signature (but using both is an error)..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f31d2056fc86020c9fed720804c1b3fd289cc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; is given, this command will be executed instead. The command will receive the following arguments: &lt;code&gt;COMMAND(&amp;lt;variable&amp;gt; &amp;lt;access&amp;gt; &amp;lt;value&amp;gt; &amp;lt;current_list_file&amp;gt; &amp;lt;stack&amp;gt;)&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; 주어,이 명령을 대신 실행됩니다. 명령은 다음 인수를받습니다. &lt;code&gt;COMMAND(&amp;lt;variable&amp;gt; &amp;lt;access&amp;gt; &amp;lt;value&amp;gt; &amp;lt;current_list_file&amp;gt; &amp;lt;stack&amp;gt;)&lt;/code&gt; _ 목록 _ 파일 &amp;gt; &amp;lt;스택&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="4559b3d40537d4943f39539c1e3949598239af9a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&amp;lt;path-var&amp;gt;&lt;/code&gt; is a relative path (&lt;a href=&quot;#is-relative&quot;&gt;IS_RELATIVE&lt;/a&gt; is true), it is evaluated relative to the given base directory specified by &lt;code&gt;BASE_DIRECTORY&lt;/code&gt; option. If &lt;code&gt;BASE_DIRECTORY&lt;/code&gt; is not specified, the default base directory will be &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-1-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cd0dd4f74c2b40af9876cd2e4d7f8a1ee8ef73" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ALL&lt;/code&gt; is set, the target will be added to the default build target.</source>
          <target state="translated">경우 &lt;code&gt;ALL&lt;/code&gt; 이 설정되어, 대상은 기본 빌드 대상에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="f8435f1282f29768734ad6e502d2791b6202ddf1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;APPEND&lt;/code&gt; is used, the existing &lt;code&gt;TAG&lt;/code&gt; is used rather than creating a new one based on the current time stamp. If you use &lt;code&gt;APPEND&lt;/code&gt;, you can omit the &lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt; and &lt;code&gt;GROUP &amp;lt;group&amp;gt;&lt;/code&gt; parameters, because they will be read from the generated &lt;code&gt;TAG&lt;/code&gt; file. For example:</source>
          <target state="translated">경우 &lt;code&gt;APPEND&lt;/code&gt; 가 사용되며, 기존의 &lt;code&gt;TAG&lt;/code&gt; 현재 타임 스탬프를 기반으로 새로운 하나를 만드는 대신 사용됩니다. &lt;code&gt;APPEND&lt;/code&gt; 를 사용하는 경우 생성 된 &lt;code&gt;TAG&lt;/code&gt; 파일 에서 읽어 오기 때문에 &lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt; 및 &lt;code&gt;GROUP &amp;lt;group&amp;gt;&lt;/code&gt; 매개 변수를 생략 할 수 있습니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="49bbea85a1338900c351fd4dd4f7d07eb076063a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;APPEND&lt;/code&gt; is used, the existing &lt;code&gt;TAG&lt;/code&gt; is used rather than creating a new one based on the current time stamp. If you use &lt;code&gt;APPEND&lt;/code&gt;, you can omit the &lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt; and &lt;code&gt;TRACK &amp;lt;track&amp;gt;&lt;/code&gt; parameters, because they will be read from the generated &lt;code&gt;TAG&lt;/code&gt; file. For example:</source>
          <target state="translated">경우 &lt;code&gt;APPEND&lt;/code&gt; 가 사용되며, 기존의 &lt;code&gt;TAG&lt;/code&gt; 현재 타임 스탬프를 기반으로 새로운 하나를 만드는 대신 사용됩니다. &lt;code&gt;APPEND&lt;/code&gt; 를 사용 하면 생성 된 &lt;code&gt;TAG&lt;/code&gt; 파일 에서 읽히므로 &lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt; 및 &lt;code&gt;TRACK &amp;lt;track&amp;gt;&lt;/code&gt; 매개 변수를 생략 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c01298778a26140626fb7eda5adacdd79870641b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARCH_INDEPENDENT&lt;/code&gt; is given, the installed package version will be considered compatible even if it was built for a different architecture than the requested architecture. Otherwise, an architecture check will be performed, and the package will be considered compatible only if the architecture matches exactly. For example, if the package is built for a 32-bit architecture, the package is only considered compatible if it is used on a 32-bit architecture, unless &lt;code&gt;ARCH_INDEPENDENT&lt;/code&gt; is given, in which case the package is considered compatible on any architecture.</source>
          <target state="translated">경우 &lt;code&gt;ARCH_INDEPENDENT&lt;/code&gt; 이 주어진다 설치된 패키지 버전이 요청 된 아키텍처와 다른 아키텍처 구축 된 경우에도 호환 간주됩니다. 그렇지 않으면 아키텍처 검사가 수행되고 아키텍처가 정확히 일치하는 경우에만 패키지가 호환되는 것으로 간주됩니다. 예를 들어, 패키지가 32 비트 아키텍처 용으로 구축 된 경우 &lt;code&gt;ARCH_INDEPENDENT&lt;/code&gt; 가 제공 되지 않는 한 패키지가 32 비트 아키텍처에서 사용되는 경우에만 패키지가 호환 가능한 것으로 간주됩니다 .이 경우 패키지는 모든 아키텍처에서 호환 가능한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="a74db8d35f854c4addddf4066d575e42890b0c2e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BARE_FEATURES cxx_final&lt;/code&gt; was given as argument the &lt;code&gt;final&lt;/code&gt; keyword will be defined for old compilers, too.</source>
          <target state="translated">경우 &lt;code&gt;BARE_FEATURES cxx_final&lt;/code&gt; 는 인수로 주어진 된 &lt;code&gt;final&lt;/code&gt; 키워드는 너무 오래된 컴파일러에 대해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="564e6a8c293229d1783c9cd5deb2ac613bdc83ad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BEFORE&lt;/code&gt; is specified, the content will be prepended to the property instead of being appended.</source>
          <target state="translated">경우 &lt;code&gt;BEFORE&lt;/code&gt; 지정, 내용 대신 추가되는 재산 앞에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="5c9800f883703f872ca11c62d06d44a1cc64ac57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BEFORE&lt;/code&gt; is specified, the content will be prepended to the relevant property instead of being appended.</source>
          <target state="translated">경우 &lt;code&gt;BEFORE&lt;/code&gt; 지정, 내용 대신 추가되는 관련 속성에 앞에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="50021641e849b0500ae53778486408eeb4d5785c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BRIEF_DOCS&lt;/code&gt; or &lt;code&gt;FULL_DOCS&lt;/code&gt; is given then the variable is set to a string containing documentation for the requested property. If documentation is requested for a property that has not been defined &lt;code&gt;NOTFOUND&lt;/code&gt; is returned.</source>
          <target state="translated">경우 &lt;code&gt;BRIEF_DOCS&lt;/code&gt; 또는 &lt;code&gt;FULL_DOCS&lt;/code&gt; 가 지정되고있는 변수는 요청 된 속성에 대한 문자열을 포함하는 문서로 설정됩니다. 정의되지 않은 특성에 대한 문서가 요청되면 &lt;code&gt;NOTFOUND&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="a544a3836790581808573f46b277091ab927ff60" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;CMAKE_SUPPRESS_REGENERATION&lt;/code&gt; is &lt;code&gt;OFF&lt;/code&gt;, which is default, then CMake adds a special target on which all other targets depend that checks the build system and optionally re-runs CMake to regenerate the build system when the target specification source changes.</source>
          <target state="translated">경우 &lt;code&gt;CMAKE_SUPPRESS_REGENERATION&lt;/code&gt; 가 있다 &lt;code&gt;OFF&lt;/code&gt; 기본이며, 다음 CMake 다른 모든 대상은 그 검사에게 빌드 시스템을 따라 선택적으로하는 특별 대상에 추가하는 빌드 시스템을 다시 생성 CMake를 다시 실행하면 대상 사양 소스 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="4799adbc4e5f3424900998b1651e28e7e04a00cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;COMMAND&lt;/code&gt; specifies an executable target name (created by the &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-0-command:add_executable&quot;&gt;&lt;code&gt;add_executable()&lt;/code&gt;&lt;/a&gt; command) it will automatically be replaced by the location of the executable created at build time. If set, the &lt;a href=&quot;../prop_tgt/crosscompiling_emulator#prop_tgt:CROSSCOMPILING_EMULATOR&quot; id=&quot;index-0-prop_tgt:CROSSCOMPILING_EMULATOR&quot;&gt;&lt;code&gt;CROSSCOMPILING_EMULATOR&lt;/code&gt;&lt;/a&gt; executable target property will also be prepended to the command to allow the executable to run on the host. (Use the &lt;code&gt;TARGET_FILE&lt;/code&gt;&lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt;&lt;code&gt;generator expression&lt;/code&gt;&lt;/a&gt; to reference an executable later in the command line.) Additionally a target-level dependency will be added so that the executable target will be built before any target using this custom command. However this does NOT add a file-level dependency that would cause the custom command to re-run whenever the executable is recompiled.</source>
          <target state="translated">경우 &lt;code&gt;COMMAND&lt;/code&gt; 가 (에 의해 생성 된 실행 대상 이름 지정 &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-0-command:add_executable&quot;&gt; &lt;code&gt;add_executable()&lt;/code&gt; &lt;/a&gt; 명령)를 자동으로 빌드시에 생성 된 실행 파일의 위치로 대체됩니다. 설정하면 &lt;a href=&quot;../prop_tgt/crosscompiling_emulator#prop_tgt:CROSSCOMPILING_EMULATOR&quot; id=&quot;index-0-prop_tgt:CROSSCOMPILING_EMULATOR&quot;&gt; &lt;code&gt;CROSSCOMPILING_EMULATOR&lt;/code&gt; &lt;/a&gt; 실행 파일 대상 속성도 명령 앞에 추가되어 실행 파일이 호스트에서 실행될 수 있습니다. ( &lt;code&gt;TARGET_FILE&lt;/code&gt; &lt;a href=&quot;../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)&quot; id=&quot;index-0-manual:cmake-generator-expressions(7)&quot;&gt; &lt;code&gt;generator expression&lt;/code&gt; &lt;/a&gt; 을 사용하여 나중에 명령 행에서 실행 파일을 참조하십시오.) 또한 대상 레벨 종속성이 추가되어 실행 파일 대상이이 사용자 정의 명령을 사용하는 대상보다 먼저 빌드됩니다. 그러나 이것은 파일 레벨 종속성을 추가하지 않으므로 실행 파일이 재 컴파일 될 때마다 사용자 정의 명령이 다시 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1039b0c854073fa0e00a7ae1d193e3930fb4ac8e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;COMMAND&lt;/code&gt; specifies an executable target name (created by the &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-0-command:add_executable&quot;&gt;&lt;code&gt;add_executable()&lt;/code&gt;&lt;/a&gt; command) it will automatically be replaced by the location of the executable created at build time. If set, the &lt;a href=&quot;../prop_tgt/crosscompiling_emulator#prop_tgt:CROSSCOMPILING_EMULATOR&quot; id=&quot;index-0-prop_tgt:CROSSCOMPILING_EMULATOR&quot;&gt;&lt;code&gt;CROSSCOMPILING_EMULATOR&lt;/code&gt;&lt;/a&gt; executable target property will also be prepended to the command to allow the executable to run on the host. Additionally a target-level dependency will be added so that the executable target will be built before this custom target.</source>
          <target state="translated">경우 &lt;code&gt;COMMAND&lt;/code&gt; 가 (에 의해 생성 된 실행 대상 이름 지정 &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-0-command:add_executable&quot;&gt; &lt;code&gt;add_executable()&lt;/code&gt; &lt;/a&gt; 명령)를 자동으로 빌드시에 생성 된 실행 파일의 위치로 대체됩니다. 설정하면 &lt;a href=&quot;../prop_tgt/crosscompiling_emulator#prop_tgt:CROSSCOMPILING_EMULATOR&quot; id=&quot;index-0-prop_tgt:CROSSCOMPILING_EMULATOR&quot;&gt; &lt;code&gt;CROSSCOMPILING_EMULATOR&lt;/code&gt; &lt;/a&gt; 실행 파일 대상 속성도 명령 앞에 추가되어 실행 파일이 호스트에서 실행될 수 있습니다. 또한 대상 레벨 종속성이 추가되어 실행 가능 대상이이 사용자 정의 대상보다 먼저 빌드됩니다.</target>
        </trans-unit>
        <trans-unit id="9ceab2132c7b829d66299d0a13fef029cb4a0809" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;COMMAND&lt;/code&gt; specifies an executable target name (created by the &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-0-command:add_executable&quot;&gt;&lt;code&gt;add_executable()&lt;/code&gt;&lt;/a&gt; command), it will automatically be replaced by the location of the executable created at build time if either of the following is true:</source>
          <target state="translated">경우 &lt;code&gt;COMMAND&lt;/code&gt; 가 (에 의해 생성 된 실행 대상 이름 지정 &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-0-command:add_executable&quot;&gt; &lt;code&gt;add_executable()&lt;/code&gt; &lt;/a&gt; 명령을), 자동으로 다음 중 하나에 해당하는 경우 빌드시에 생성 된 실행 파일의 위치로 대체 될 것입니다 :</target>
        </trans-unit>
        <trans-unit id="b3992870aadd618238810d4b35444dcb8b19f6a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;COMPONENTS&lt;/code&gt; are specified when the downstream uses &lt;a href=&quot;../../command/find_package#command:find_package&quot; id=&quot;index-4-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt;, they are listed in the &lt;code&gt;&amp;lt;PackageName&amp;gt;_FIND_COMPONENTS&lt;/code&gt; variable. We can use this variable to verify that all necessary component targets are included in &lt;code&gt;Config.cmake.in&lt;/code&gt;. At the same time, this function will act as a custom &lt;code&gt;check_required_components&lt;/code&gt; macro to ensure that the downstream only attempts to use supported components.</source>
          <target state="translated">경우 &lt;code&gt;COMPONENTS&lt;/code&gt; 하류 용도 때 지정된 &lt;a href=&quot;../../command/find_package#command:find_package&quot; id=&quot;index-4-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; , 그들은에 나열된 &lt;code&gt;&amp;lt;PackageName&amp;gt;_FIND_COMPONENTS&lt;/code&gt; 변수. 이 변수를 사용하여 필요한 모든 구성 요소 대상이 &lt;code&gt;Config.cmake.in&lt;/code&gt; 에 포함되어 있는지 확인할 수 있습니다 . &lt;code&gt;check_required_components&lt;/code&gt; 함수는 사용자 정의 check_required_components 매크로 역할 을하여 다운 스트림에서 지원되는 구성 요소 만 사용하도록합니다.</target>
        </trans-unit>
        <trans-unit id="dadb5167ca44b7444e37e7636d57292b406a376e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;COMPONENTS&lt;/code&gt; are specified when the downstream uses &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-12-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt;, they are listed in the &lt;code&gt;&amp;lt;PackageName&amp;gt;_FIND_COMPONENTS&lt;/code&gt; variable. If a particular component is non-optional, then the &lt;code&gt;&amp;lt;PackageName&amp;gt;_FIND_REQUIRED_&amp;lt;comp&amp;gt;&lt;/code&gt; will be true. This can be tested with logic in the package configuration file:</source>
          <target state="translated">경우 &lt;code&gt;COMPONENTS&lt;/code&gt; 하류 용도 때 지정된 &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-12-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; , 그들은에 나열된 &lt;code&gt;&amp;lt;PackageName&amp;gt;_FIND_COMPONENTS&lt;/code&gt; 변수. 특정 구성 요소가 선택 사항이 아닌 경우 &lt;code&gt;&amp;lt;PackageName&amp;gt;_FIND_REQUIRED_&amp;lt;comp&amp;gt;&lt;/code&gt; 는 true입니다. 패키지 구성 파일에서 논리를 사용하여 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b077716d5e4efaeb4e33b00f6d25de3eaf573a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;COMPONENTS&lt;/code&gt; or &lt;code&gt;OPTIONAL_COMPONENTS&lt;/code&gt; are requested, each available target language &lt;code&gt;&amp;lt;lang&amp;gt;&lt;/code&gt; (lowercase) will be set to TRUE.</source>
          <target state="translated">경우 &lt;code&gt;COMPONENTS&lt;/code&gt; 또는 &lt;code&gt;OPTIONAL_COMPONENTS&lt;/code&gt; 가 요청 가능한 각 타겟 언어 &lt;code&gt;&amp;lt;lang&amp;gt;&lt;/code&gt; (소문자)는 TRUE로 설정 될 것이다.</target>
        </trans-unit>
        <trans-unit id="59aab34a87f9b902e46f1912758df3e0d3161add" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DEFINE_NO_DEPRECATED&lt;/code&gt; is specified, then a macro &lt;code&gt;${BASE_NAME}_NO_DEPRECATED&lt;/code&gt; will be defined This macro can be used to remove deprecated code from preprocessor output:</source>
          <target state="translated">경우 &lt;code&gt;DEFINE_NO_DEPRECATED&lt;/code&gt; 을 지정하면 매크로 &lt;code&gt;${BASE_NAME}_NO_DEPRECATED&lt;/code&gt; 이 매크로는 전처리 출력에서 사용되지 않는 코드를 제거하는 데 사용할 수있는 정의 될 것이다 :</target>
        </trans-unit>
        <trans-unit id="66349c1346c9565e816922a1caa7f025d96b8360" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DEPENDS&lt;/code&gt; is not specified, the command will run whenever the &lt;code&gt;OUTPUT&lt;/code&gt; is missing; if the command does not actually create the &lt;code&gt;OUTPUT&lt;/code&gt;, the rule will always run.</source>
          <target state="translated">경우에 &lt;code&gt;DEPENDS&lt;/code&gt; 지정되지 않은 때마다 명령이 실행됩니다 &lt;code&gt;OUTPUT&lt;/code&gt; 이 누락 된 것입니다; 명령이 실제로 &lt;code&gt;OUTPUT&lt;/code&gt; 을 생성하지 않으면 규칙이 항상 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="5cbc90ab4f54e1228e91bf9bfdd2165cd292baa4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; is given the corresponding property will be set on the created target. See documentation of the &lt;a href=&quot;../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL&quot; id=&quot;index-0-prop_tgt:EXCLUDE_FROM_ALL&quot;&gt;&lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt;&lt;/a&gt; target property for details.</source>
          <target state="translated">경우 &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; 가 주어 해당 속성은 생성 대상으로 설정한다. 세부 사항 은 &lt;a href=&quot;../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL&quot; id=&quot;index-0-prop_tgt:EXCLUDE_FROM_ALL&quot;&gt; &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; &lt;/a&gt; 대상 특성의 문서를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="9d4d35154254039f961e79ebbf1cadba8dc31530" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FAIL_REGEX&lt;/code&gt; is provided, then failure is determined by checking if anything in the output matches any of the specified regular expressions.</source>
          <target state="translated">경우 &lt;code&gt;FAIL_REGEX&lt;/code&gt; 가 제공되고, 다음 실패는 출력에 아무것도 지정된 정규 표현식 중 하나와 일치하는지 확인하여 결정된다.</target>
        </trans-unit>
        <trans-unit id="fce2fd520cebf2defc9abc034da5ad5faf660dad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FOLLOW_SYMLINK_CHAIN&lt;/code&gt; is specified, &lt;code&gt;COPY&lt;/code&gt; will recursively resolve the symlinks at the paths given until a real file is found, and install a corresponding symlink in the destination for each symlink encountered. For each symlink that is installed, the resolution is stripped of the directory, leaving only the filename, meaning that the new symlink points to a file in the same directory as the symlink. This feature is useful on some Unix systems, where libraries are installed as a chain of symlinks with version numbers, with less specific versions pointing to more specific versions. &lt;code&gt;FOLLOW_SYMLINK_CHAIN&lt;/code&gt; will install all of these symlinks and the library itself into the destination directory. For example, if you have the following directory structure:</source>
          <target state="translated">경우 &lt;code&gt;FOLLOW_SYMLINK_CHAIN&lt;/code&gt; 가 지정되어, &lt;code&gt;COPY&lt;/code&gt; 는 재귀 적으로 실제 파일을 찾을 때까지 주어진 경로에서 심볼릭 링크를 해결하고, 발생 각 심볼릭 링크의 대상에 해당하는 심볼릭 링크를 설치합니다. 설치된 각 심볼릭 링크에 대해 해상도가 디렉토리에서 제거되어 파일 이름 만 남습니다. 즉, 새로운 심볼릭 링크가 심볼릭 링크와 동일한 디렉토리에있는 파일을 가리 킵니다. 이 기능은 라이브러리가 버전 번호가있는 심볼릭 링크 체인으로 설치되고 덜 구체적인 버전이보다 구체적인 버전을 가리키는 일부 Unix 시스템에서 유용합니다. &lt;code&gt;FOLLOW_SYMLINK_CHAIN&lt;/code&gt; 은 이러한 모든 심볼릭 링크와 라이브러리 자체를 대상 디렉토리에 설치합니다. 예를 들어, 다음 디렉토리 구조가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="cbe9de058e626ffbd96b44f958a2eb10db66e11c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FROM_EXT&lt;/code&gt; is specified, the resulting file will be compressed based on the file extension of the &lt;code&gt;&amp;lt;tarfile&amp;gt;&lt;/code&gt; (i.e. &lt;code&gt;.tar.gz&lt;/code&gt; will use &lt;code&gt;GZIP&lt;/code&gt; compression). File extensions that will produce compressed output include &lt;code&gt;.tar.gz&lt;/code&gt;, &lt;code&gt;.tgz&lt;/code&gt;, &lt;code&gt;.tar.bzip2&lt;/code&gt;, &lt;code&gt;.tbz&lt;/code&gt;, &lt;code&gt;.tar.xz&lt;/code&gt;, and &lt;code&gt;.txz&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;FROM_EXT&lt;/code&gt; 가 지정되어 생성 된 파일의 파일 확장자에 기초하여 압축한다 &lt;code&gt;&amp;lt;tarfile&amp;gt;&lt;/code&gt; (즉 &lt;code&gt;.tar.gz&lt;/code&gt; 를 사용 &lt;code&gt;GZIP&lt;/code&gt; 의 압축). 압축 된 출력을 생성하는 파일 확장자에는 &lt;code&gt;.tar.gz&lt;/code&gt; , &lt;code&gt;.tgz&lt;/code&gt; , &lt;code&gt;.tar.bzip2&lt;/code&gt; , &lt;code&gt;.tbz&lt;/code&gt; , &lt;code&gt;.tar.xz&lt;/code&gt; 및 &lt;code&gt;.txz&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3ffe9097d9885f5bbd4255d42e66833bc04ac31" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Foo_FIND_COMPONENTS&lt;/code&gt; is not set, which modules are searched for and required is up to the find module, but should be documented.</source>
          <target state="translated">&lt;code&gt;Foo_FIND_COMPONENTS&lt;/code&gt; 가 설정되지 않은 경우 검색 및 필요한 모듈은 찾기 모듈에 달려 있지만 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="e51112bc66cacab80784e0202455cecf89b3be94" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GIT_SHALLOW&lt;/code&gt; is enabled then &lt;code&gt;GIT_TAG&lt;/code&gt; works only with branch names and tags. A commit hash is not allowed.</source>
          <target state="translated">경우 &lt;code&gt;GIT_SHALLOW&lt;/code&gt; 는 다음 활성화 &lt;code&gt;GIT_TAG&lt;/code&gt; 는 단지 지점 이름과 태그와 함께 작동합니다. 커밋 해시는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a222671088a70bccbf97eedb8404ab62eb0faa41" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GROUP&lt;/code&gt; is used, the submissions will go to the specified group on the CDash server. If no &lt;code&gt;GROUP&lt;/code&gt; is specified, the name of the model is used by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026ee3b121a24fafec30fcc29e369027d79547dd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GROUP&lt;/code&gt; is used, the submissions will go to the specified group on the CDash server. If no &lt;code&gt;GROUP&lt;/code&gt; is specified, the name of the model is used by default. This replaces the deprecated option &lt;code&gt;TRACK&lt;/code&gt;. Despite the name change its behavior is unchanged.</source>
          <target state="translated">&lt;code&gt;GROUP&lt;/code&gt; 이 사용되는 경우 제출은 CDash 서버의 지정된 그룹으로 이동합니다. &lt;code&gt;GROUP&lt;/code&gt; 이 지정 되지 않은 경우 기본적으로 모델 이름이 사용됩니다. 이것은 더 이상 사용되지 않는 옵션 &lt;code&gt;TRACK&lt;/code&gt; 을 대체합니다 . 이름 변경에도 불구하고 그 동작은 변경되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="a84b8059c009f755b58c2a4e071b55fe0e475931" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LANGUAGE&lt;/code&gt; is set, the specified compiler will be used to perform the check. Acceptable values are &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;LANGUAGE&lt;/code&gt; 설정, 지정된 컴파일러는 검사를 수행하는 데 사용됩니다. 허용 가능한 값은 &lt;code&gt;C&lt;/code&gt; 및 &lt;code&gt;CXX&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a0c5c6bff69dee49373e9b4fa8c2ed356d71059c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LANGUAGE&lt;/code&gt; is set, the specified compiler will be used to perform the check. Acceptable values are &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt;. If not set, the C compiler will be used if enabled. If the C compiler is not enabled, the C++ compiler will be used if enabled.</source>
          <target state="translated">경우 &lt;code&gt;LANGUAGE&lt;/code&gt; 설정, 지정된 컴파일러는 검사를 수행하는 데 사용됩니다. 허용 가능한 값은 &lt;code&gt;C&lt;/code&gt; 및 &lt;code&gt;CXX&lt;/code&gt; 입니다. 설정하지 않으면 활성화 된 경우 C 컴파일러가 사용됩니다. C 컴파일러가 사용 가능하지 않으면 사용 가능한 경우 C ++ 컴파일러가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e49879e925e90fb110eabcb331c26c19f58156b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LIBRARY_TARGET&lt;/code&gt; is a static library, macros are defined without values.</source>
          <target state="translated">경우 &lt;code&gt;LIBRARY_TARGET&lt;/code&gt; 는 정적 라이브러리, 매크로는 값없이 정의된다.</target>
        </trans-unit>
        <trans-unit id="c48a6a4137169f6653d1222723c26405a94b37e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MACOSX_BUNDLE&lt;/code&gt; is given the corresponding property will be set on the created target. See documentation of the &lt;a href=&quot;../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE&quot; id=&quot;index-0-prop_tgt:MACOSX_BUNDLE&quot;&gt;&lt;code&gt;MACOSX_BUNDLE&lt;/code&gt;&lt;/a&gt; target property for details.</source>
          <target state="translated">경우 &lt;code&gt;MACOSX_BUNDLE&lt;/code&gt; 가 주어 해당 속성은 생성 대상으로 설정한다. 자세한 내용은 &lt;a href=&quot;../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE&quot; id=&quot;index-0-prop_tgt:MACOSX_BUNDLE&quot;&gt; &lt;code&gt;MACOSX_BUNDLE&lt;/code&gt; &lt;/a&gt; 대상 속성의 설명서를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="5223e155f3847f4d07db6f90e4725b0b01243e64" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NAMELINK_SKIP&lt;/code&gt; is specified, &lt;code&gt;NAMELINK_COMPONENT&lt;/code&gt; has no effect. It is not recommended to use &lt;code&gt;NAMELINK_SKIP&lt;/code&gt; in conjunction with &lt;code&gt;NAMELINK_COMPONENT&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;NAMELINK_SKIP&lt;/code&gt; 가 지정되어, &lt;code&gt;NAMELINK_COMPONENT&lt;/code&gt; 는 효과가 없습니다. &lt;code&gt;NAMELINK_SKIP&lt;/code&gt; 와 함께 &lt;code&gt;NAMELINK_COMPONENT&lt;/code&gt; 를) 사용하지 않는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a987270cba03c1cf8aac71225f3c8840a4d845d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NO_DEFAULT_PATH&lt;/code&gt; is specified, then no additional paths are added to the search. If &lt;code&gt;NO_DEFAULT_PATH&lt;/code&gt; is not specified, the search process is as follows:</source>
          <target state="translated">경우 &lt;code&gt;NO_DEFAULT_PATH&lt;/code&gt; 을 지정하면 추가 경로는 검색에 추가됩니다. 경우 &lt;code&gt;NO_DEFAULT_PATH&lt;/code&gt; 가 지정되지 않은 다음과 같이 검색 프로세스는 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="75b7a0417a2b55276855bf7958eb12cee4662fb1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OBJC&lt;/code&gt; is not defined, the &lt;a href=&quot;cc#envvar:CC&quot; id=&quot;index-0-envvar:CC&quot;&gt;&lt;code&gt;CC&lt;/code&gt;&lt;/a&gt; environment variable will be checked instead.</source>
          <target state="translated">경우 &lt;code&gt;OBJC&lt;/code&gt; 가 정의되지는 &lt;a href=&quot;cc#envvar:CC&quot; id=&quot;index-0-envvar:CC&quot;&gt; &lt;code&gt;CC&lt;/code&gt; 의&lt;/a&gt; 환경 변수 대신에 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="1983a499ccecab18da55abcd8ff3314d22b08562" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OBJCXX&lt;/code&gt; is not defined, the &lt;a href=&quot;cxx#envvar:CXX&quot; id=&quot;index-0-envvar:CXX&quot;&gt;&lt;code&gt;CXX&lt;/code&gt;&lt;/a&gt; environment variable will be checked instead.</source>
          <target state="translated">&lt;code&gt;OBJCXX&lt;/code&gt; 가 정의되지 않은 경우 &lt;a href=&quot;cxx#envvar:CXX&quot; id=&quot;index-0-envvar:CXX&quot;&gt; &lt;code&gt;CXX&lt;/code&gt; &lt;/a&gt; 환경 변수가 대신 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="c4568ab7c77947c5bced1a19f30b8cc46690e206" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OUTPUT_VARIABLE&lt;/code&gt; is not given, then after this function returns, &lt;a href=&quot;#has-filename&quot;&gt;HAS_FILENAME&lt;/a&gt; returns false for &lt;code&gt;&amp;lt;path-var&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1e97ca4fb52ee7a5c19b5e864755c0ce74ed69" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PARENT_SCOPE&lt;/code&gt; is present then the variable is removed from the scope above the current scope. See the same option in the &lt;a href=&quot;set#command:set&quot; id=&quot;index-0-command:set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; command for further details.</source>
          <target state="translated">경우 &lt;code&gt;PARENT_SCOPE&lt;/code&gt; 가 존재 다음 변수는 현재 범위 위의 범위에서 제거된다. 자세한 내용은 &lt;a href=&quot;set#command:set&quot; id=&quot;index-0-command:set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt; 명령 에서 동일한 옵션을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="9b49daf8b9bc2e87b53d7ce74829b289f82ac6b8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PATH_SUFFIXES&lt;/code&gt; is specified, the suffixes are appended to each (&lt;code&gt;W&lt;/code&gt;) or (&lt;code&gt;U&lt;/code&gt;) directory entry one-by-one.</source>
          <target state="translated">경우 &lt;code&gt;PATH_SUFFIXES&lt;/code&gt; 가 지정되어, 접미사 각 (에 추가됩니다 &lt;code&gt;W&lt;/code&gt; ) 또는 ( &lt;code&gt;U&lt;/code&gt; ) 디렉토리 엔트리 하나씩.</target>
        </trans-unit>
        <trans-unit id="9503111aebb1371246ff62fec6c68303438de54e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PREFIX_NAME&lt;/code&gt; is specified, the argument will be used as a prefix to all generated macros.</source>
          <target state="translated">경우 &lt;code&gt;PREFIX_NAME&lt;/code&gt; 지정되어 인수는 생성 된 모든 매크로의 접두사로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e9a78ed9af41c6fa770151641302a09ddd7547fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Python2_FIND_FRAMEWORK&lt;/code&gt; is not defined, &lt;a href=&quot;../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK&quot; id=&quot;index-1-variable:CMAKE_FIND_FRAMEWORK&quot;&gt;&lt;code&gt;CMAKE_FIND_FRAMEWORK&lt;/code&gt;&lt;/a&gt; variable will be used, if any.</source>
          <target state="translated">경우 &lt;code&gt;Python2_FIND_FRAMEWORK&lt;/code&gt; 가 정의되지 않은, &lt;a href=&quot;../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK&quot; id=&quot;index-1-variable:CMAKE_FIND_FRAMEWORK&quot;&gt; &lt;code&gt;CMAKE_FIND_FRAMEWORK&lt;/code&gt; 에&lt;/a&gt; 있는 경우 변수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4c3b50dbcd4132c7668313b729cabe43423050d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Python3_FIND_ABI&lt;/code&gt; is not defined, any ABI will be searched.</source>
          <target state="translated">&lt;code&gt;Python3_FIND_ABI&lt;/code&gt; 가 정의되지 않은 경우 모든 ABI가 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="d2777b6b755873811701320f4aca9e9c1e83bfbe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Python3_FIND_FRAMEWORK&lt;/code&gt; is not defined, &lt;a href=&quot;../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK&quot; id=&quot;index-1-variable:CMAKE_FIND_FRAMEWORK&quot;&gt;&lt;code&gt;CMAKE_FIND_FRAMEWORK&lt;/code&gt;&lt;/a&gt; variable will be used, if any.</source>
          <target state="translated">경우 &lt;code&gt;Python3_FIND_FRAMEWORK&lt;/code&gt; 가 정의되지 않은, &lt;a href=&quot;../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK&quot; id=&quot;index-1-variable:CMAKE_FIND_FRAMEWORK&quot;&gt; &lt;code&gt;CMAKE_FIND_FRAMEWORK&lt;/code&gt; 에&lt;/a&gt; 있는 경우 변수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2e95dff594588354af06ddd9c66b42ffff674a59" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Python_FIND_ABI&lt;/code&gt; is not defined, any ABI will be searched.</source>
          <target state="translated">&lt;code&gt;Python_FIND_ABI&lt;/code&gt; 가 정의되지 않은 경우 모든 ABI가 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="3833a52d19f3e3d17a5af71b1eaf6d032f375029" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Python_FIND_FRAMEWORK&lt;/code&gt; is not defined, &lt;a href=&quot;../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK&quot; id=&quot;index-1-variable:CMAKE_FIND_FRAMEWORK&quot;&gt;&lt;code&gt;CMAKE_FIND_FRAMEWORK&lt;/code&gt;&lt;/a&gt; variable will be used, if any.</source>
          <target state="translated">경우 &lt;code&gt;Python_FIND_FRAMEWORK&lt;/code&gt; 가 정의되지 않은, &lt;a href=&quot;../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK&quot; id=&quot;index-1-variable:CMAKE_FIND_FRAMEWORK&quot;&gt; &lt;code&gt;CMAKE_FIND_FRAMEWORK&lt;/code&gt; 에&lt;/a&gt; 있는 경우 변수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6e2dd30e2725c1dcc8b960390418dcdde4befb6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;QUIET&lt;/code&gt; is used, CTest will suppress any non-error messages that it otherwise would have printed to the console.</source>
          <target state="translated">경우 &lt;code&gt;QUIET&lt;/code&gt; 가 사용되며, CTest는 달리 콘솔에 인쇄 한 것이 아닌 오류 메시지가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6fe1769fb8cc752adf87915b060c38a505893b09" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SYMBOLIC&lt;/code&gt; (boolean) is set to &lt;code&gt;True&lt;/code&gt; the build system will be informed that the source file is not actually created on disk but instead used as a symbolic name for a build rule.</source>
          <target state="translated">경우 &lt;code&gt;SYMBOLIC&lt;/code&gt; (부울)이 설정되어 &lt;code&gt;True&lt;/code&gt; 빌드 시스템은 소스 파일이 실제로 디스크에 생성 대신 빌드 규칙에 대한 상징적 인 이름으로 사용되지 않음을 알려드립니다.</target>
        </trans-unit>
        <trans-unit id="c1f184a2031267879df091c13d595365978c40bc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TRACK&lt;/code&gt; is used, the submissions will go to the specified track on the CDash server. If no &lt;code&gt;TRACK&lt;/code&gt; is specified, the name of the model is used by default.</source>
          <target state="translated">경우 &lt;code&gt;TRACK&lt;/code&gt; 를 사용하는 경우, 제출은 CDash 서버의 지정된 트랙으로 이동합니다. &lt;code&gt;TRACK&lt;/code&gt; 을 지정 하지 않으면 기본적으로 모델 이름이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ae3c861fca4272f69bb87929089c24ba66cad1d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TRUE&lt;/code&gt;, CMake will neither generate installation rules nor will it generate &lt;code&gt;cmake_install.cmake&lt;/code&gt; files. This variable is &lt;code&gt;FALSE&lt;/code&gt; by default.</source>
          <target state="translated">&lt;code&gt;TRUE&lt;/code&gt; 인 경우 CMake는 설치 규칙을 생성하지 않으며 &lt;code&gt;cmake_install.cmake&lt;/code&gt; 파일을 생성하지 않습니다 . 이 변수는 기본적으로 &lt;code&gt;FALSE&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5af564aabb3bb252a1e6046d6ecc34806491ea66" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TRUE&lt;/code&gt;, use of deprecated functionality will issue fatal errors. If this variable is not set, CMake behaves as if it were set to &lt;code&gt;FALSE&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;TRUE&lt;/code&gt; , 사용되지 않는 기능의 사용은 치명적인 오류를 발행합니다. 이 변수를 설정하지 않으면 CMake는 마치 &lt;code&gt;FALSE&lt;/code&gt; 로 설정된 것처럼 동작 합니다 .</target>
        </trans-unit>
        <trans-unit id="62f0a3ad1a5544a1eb14cff4b6dac2459f264bb0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;USE_BAR&lt;/code&gt; is true and &lt;code&gt;USE_ZOT&lt;/code&gt; is false, this provides an option called &lt;code&gt;USE_FOO&lt;/code&gt; that defaults to ON. Otherwise, it sets &lt;code&gt;USE_FOO&lt;/code&gt; to OFF and hides the option from the user. If the status of &lt;code&gt;USE_BAR&lt;/code&gt; or &lt;code&gt;USE_ZOT&lt;/code&gt; ever changes, any value for the &lt;code&gt;USE_FOO&lt;/code&gt; option is saved so that when the option is re-enabled it retains its old value.</source>
          <target state="translated">경우 &lt;code&gt;USE_BAR&lt;/code&gt; 가 사실이고 &lt;code&gt;USE_ZOT&lt;/code&gt; 이 거짓이라는 옵션이 제공 &lt;code&gt;USE_FOO&lt;/code&gt; 그 기본값을 ON으로합니다. 그렇지 않으면 &lt;code&gt;USE_FOO&lt;/code&gt; 를 OFF로 설정 하고 사용자에게 옵션을 숨 깁니다. &lt;code&gt;USE_BAR&lt;/code&gt; 또는 &lt;code&gt;USE_ZOT&lt;/code&gt; 의 상태가 변경되면 &lt;code&gt;USE_FOO&lt;/code&gt; 옵션의 모든 값 이 저장되어 옵션이 다시 활성화 될 때 이전 값을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="b2f740024ee45ca83324b273739eadebf0d209c4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;USE_STAMP_FILE&lt;/code&gt; is set, the custom command defined by this function will create a stamp file with the name &lt;code&gt;&amp;lt;targetName&amp;gt;.stamp&lt;/code&gt; in the current binary directory whenever doxygen is re-run. With this option present, all items in &lt;code&gt;&amp;lt;filesOrDirs&amp;gt;&lt;/code&gt; must be files (i.e. no directories, symlinks or wildcards) and each of the files must exist at the time &lt;code&gt;doxygen_add_docs()&lt;/code&gt; is called. An error will be raised if any of the items listed is missing or is not a file when &lt;code&gt;USE_STAMP_FILE&lt;/code&gt; is given. A dependency will be created on each of the files so that doxygen will only be re-run if one of the files is updated. Without the &lt;code&gt;USE_STAMP_FILE&lt;/code&gt; option, doxygen will always be re-run if the &lt;code&gt;&amp;lt;targetName&amp;gt;&lt;/code&gt; target is built regardless of whether anything listed in &lt;code&gt;&amp;lt;filesOrDirs&amp;gt;&lt;/code&gt; has changed.</source>
          <target state="translated">경우 &lt;code&gt;USE_STAMP_FILE&lt;/code&gt; 가 설정되어,이 함수에 의해 정의 된 사용자 정의 명령은 이름 스탬프 파일이 생성됩니다 &lt;code&gt;&amp;lt;targetName&amp;gt;.stamp&lt;/code&gt; doxygen이 재 실행 될 때마다 현재 바이너리 디렉토리에 있습니다. 이 옵션이있는 경우 &lt;code&gt;&amp;lt;filesOrDirs&amp;gt;&lt;/code&gt; 의 모든 항목은 파일이어야하며 (즉, 디렉토리, 심볼릭 링크 또는 와일드 카드 없음) 각 파일은 &lt;code&gt;doxygen_add_docs()&lt;/code&gt; 가 호출 될 때 존재해야합니다 . 나열된 항목 중 하나라도 누락되었거나 &lt;code&gt;USE_STAMP_FILE&lt;/code&gt; 이 제공 될 때 파일이 아닌 경우 오류가 발생합니다 . 파일 중 하나가 업데이트 된 경우에만 doxygen이 다시 실행되도록 각 파일에 종속성이 생성됩니다. &lt;code&gt;USE_STAMP_FILE&lt;/code&gt; 옵션이 없으면 doxygen은 항상 다음과 같은 경우 다시 실행됩니다. &lt;code&gt;&amp;lt;targetName&amp;gt;&lt;/code&gt; 대상은 &lt;code&gt;&amp;lt;filesOrDirs&amp;gt;&lt;/code&gt; 에 나열된 항목 이 변경 되었는지 여부에 관계없이 빌드됩니다 .</target>
        </trans-unit>
        <trans-unit id="f1d7a072cc2cc9434ed312ac21e0598694df0fd2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UseSWIG_MODULE_VERSION&lt;/code&gt; is 1 or is undefined, output is written to the &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt;&lt;/a&gt; directory.</source>
          <target state="translated">경우 &lt;code&gt;UseSWIG_MODULE_VERSION&lt;/code&gt; 이 1 또는 정의되지, 출력에 기록됩니다 &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt; 의&lt;/a&gt; 디렉토리.</target>
        </trans-unit>
        <trans-unit id="0254fd4f3b09a96cc47349e95d2214257677bf43" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UseSWIG_MODULE_VERSION&lt;/code&gt; is 2, a dedicated directory will be used. The path of this directory can be retrieved from the &lt;code&gt;SWIG_SUPPORT_FILES_DIRECTORY&lt;/code&gt; target property.</source>
          <target state="translated">경우 &lt;code&gt;UseSWIG_MODULE_VERSION&lt;/code&gt; 은 2, 전용 디렉토리가 사용됩니다. 이 디렉토리의 경로는 &lt;code&gt;SWIG_SUPPORT_FILES_DIRECTORY&lt;/code&gt; 대상 특성 에서 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7800eac1bfef21c1f5ab9034fd7fabbcd20a3db" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UseSWIG_MODULE_VERSION&lt;/code&gt; is set to 2, it is &lt;strong&gt;strongly&lt;/strong&gt; recommended to use a dedicated directory unique to the target when either the &lt;code&gt;OUTPUT_DIR&lt;/code&gt; option or the &lt;code&gt;CMAKE_SWIG_OUTDIR&lt;/code&gt; variable are specified. The output directory contents are erased as part of the target build, so to prevent interference between targets or losing other important files, each target should have its own dedicated output directory.</source>
          <target state="translated">경우 &lt;code&gt;UseSWIG_MODULE_VERSION&lt;/code&gt; 가 2로 설정,된다 &lt;strong&gt;강하게&lt;/strong&gt; 중 하나를 할 때 대상에 고유의 전용 디렉토리를 사용하는 것이 좋습니다 &lt;code&gt;OUTPUT_DIR&lt;/code&gt; 의 옵션 또는 &lt;code&gt;CMAKE_SWIG_OUTDIR&lt;/code&gt; 의 변수가 지정됩니다. 출력 디렉토리 내용은 대상 빌드의 일부로 지워 지므로 대상 간의 간섭을 막거나 다른 중요한 파일이 손실되지 않도록 각 대상에는 고유 한 출력 디렉토리가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c82f0f51b5c571a01369715817ae9b73091b0162" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;WIN32&lt;/code&gt; is given the property &lt;a href=&quot;../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE&quot; id=&quot;index-0-prop_tgt:WIN32_EXECUTABLE&quot;&gt;&lt;code&gt;WIN32_EXECUTABLE&lt;/code&gt;&lt;/a&gt; will be set on the target created. See documentation of that target property for details.</source>
          <target state="translated">경우 &lt;code&gt;WIN32&lt;/code&gt; 가 주어진 속성 &lt;a href=&quot;../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE&quot; id=&quot;index-0-prop_tgt:WIN32_EXECUTABLE&quot;&gt; &lt;code&gt;WIN32_EXECUTABLE&lt;/code&gt; 이&lt;/a&gt; 생성 된 대상에 설정됩니다. 자세한 내용은 해당 대상 속성의 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9fb2ea5cf8b6a7fc3473d5e5d00dae9d1d62952d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bison&lt;/code&gt; is found, the module defines the macro:</source>
          <target state="translated">경우 &lt;code&gt;bison&lt;/code&gt; 발견, 모듈은 매크로를 정의한다 :</target>
        </trans-unit>
        <trans-unit id="fb0232c29e2f4502ca937571d7f6879d90fdf134" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;include(CPack)&lt;/code&gt; is used then by default this variable is set to the content of &lt;a href=&quot;cmake_install_default_directory_permissions#variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot; id=&quot;index-1-variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot;&gt;&lt;code&gt;CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;include(CPack)&lt;/code&gt; 기본적으로 다음 사용이 변수의 내용으로 설정되어 &lt;a href=&quot;cmake_install_default_directory_permissions#variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot; id=&quot;index-1-variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot;&gt; &lt;code&gt;CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="22d72e238fd63f1ca0ecbfc31e8151ef1131ef58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; are available on the system, then we will use them to compute the square root in the &lt;code&gt;mysqrt&lt;/code&gt; function. Add the following code to the &lt;code&gt;mysqrt&lt;/code&gt; function in &lt;code&gt;MathFunctions/mysqrt.cxx&lt;/code&gt; (don&amp;rsquo;t forget the &lt;code&gt;#endif&lt;/code&gt; before returning the result!):</source>
          <target state="translated">경우 &lt;code&gt;log&lt;/code&gt; 및 &lt;code&gt;exp&lt;/code&gt; 시스템에서 사용할 수있는, 우리는의 제곱근을 계산하는 데 사용할 것 &lt;code&gt;mysqrt&lt;/code&gt; 의 기능. &lt;code&gt;MathFunctions/mysqrt.cxx&lt;/code&gt; 의 &lt;code&gt;mysqrt&lt;/code&gt; 함수에 다음 코드를 추가합니다 ( 결과를 반환하기 전에 &lt;code&gt;#endif&lt;/code&gt; 를 잊지 마세요 !).</target>
        </trans-unit>
        <trans-unit id="361fa3070991bb1ee5aef34d2db2ec94b569eb00" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; are available on the system, then we will use them to compute the square root in the &lt;code&gt;mysqrt&lt;/code&gt; function. Add the following code to the &lt;code&gt;mysqrt&lt;/code&gt; function in &lt;code&gt;MathFunctions/mysqrt.cxx&lt;/code&gt; (don't forget the &lt;code&gt;#endif&lt;/code&gt; before returning the result!):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755dfbeb5796600eb5e5926c49b4e418d05d642b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;make install&lt;/code&gt; is invoked and directories are implicitly created they get permissions set by &lt;a href=&quot;#variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot; id=&quot;index-0-variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot;&gt;&lt;code&gt;CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&lt;/code&gt;&lt;/a&gt; variable or platform specific default permissions if the variable is not set.</source>
          <target state="translated">경우 &lt;code&gt;make install&lt;/code&gt; 호출되고 디렉토리가 암시 적으로 만들어 그들이 설정 권한을 얻을 &lt;a href=&quot;#variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot; id=&quot;index-0-variable:CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&quot;&gt; &lt;code&gt;CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS&lt;/code&gt; 의&lt;/a&gt; 변수가 설정되지 않은 경우 변수 또는 플랫폼 특정 기본 권한을.</target>
        </trans-unit>
        <trans-unit id="9b32ea172cfac162d3c08c5ef739c2385835347e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;make install&lt;/code&gt; is invoked or &lt;code&gt;INSTALL&lt;/code&gt; is built, this directory is prepended onto all install directories. This variable defaults to &lt;code&gt;/usr/local&lt;/code&gt; on UNIX and &lt;code&gt;c:/Program Files/${PROJECT_NAME}&lt;/code&gt; on Windows. See &lt;a href=&quot;cmake_install_prefix_initialized_to_default#variable:CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT&quot;&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT&lt;/code&gt;&lt;/a&gt; for how a project might choose its own default.</source>
          <target state="translated">경우 &lt;code&gt;make install&lt;/code&gt; 호출되거나 &lt;code&gt;INSTALL&lt;/code&gt; 내장되어,이 디렉토리는 모든 설치 디렉토리에 앞에 추가됩니다. 이 변수의 기본값 은 UNIX의 경우 &lt;code&gt;/usr/local&lt;/code&gt; 이고 Windows의 경우 &lt;code&gt;c:/Program Files/${PROJECT_NAME}&lt;/code&gt; 입니다. 프로젝트가 자체 기본값을 선택하는 방법 은 &lt;a href=&quot;cmake_install_prefix_initialized_to_default#variable:CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT&quot;&gt; &lt;code&gt;CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="33ff9193e8936ac26ee22f9207d8333e8480e4f5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pkg-config&lt;/code&gt; returns multiple values for the specified variable, &lt;code&gt;resultVar&lt;/code&gt; will contain a &lt;a href=&quot;../manual/cmake-language.7#cmake-language-lists&quot;&gt;;-list&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;pkg-config&lt;/code&gt; 지정된 변수에 대한 여러 값을 반환 &lt;code&gt;resultVar&lt;/code&gt; 는 를 포함합니다 &lt;a href=&quot;../manual/cmake-language.7#cmake-language-lists&quot;&gt;; -list&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bf1cd5e314dd0b71b22fedd85511647dc2ae1e11" translate="yes" xml:space="preserve">
          <source>If ALL is set, the target will be added to the default build target.</source>
          <target state="translated">ALL을 설정하면 대상이 기본 빌드 대상에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="16b256dd2471e93b77c29265347ae93f5d471be1" translate="yes" xml:space="preserve">
          <source>If Boost was built using the boost-cmake project or from Boost 1.70.0 on it provides a package configuration file for use with find_package&amp;rsquo;s config mode. This module looks for the package configuration file called &lt;code&gt;BoostConfig.cmake&lt;/code&gt; or &lt;code&gt;boost-config.cmake&lt;/code&gt; and stores the result in &lt;code&gt;CACHE&lt;/code&gt; entry &amp;ldquo;Boost_DIR&amp;rdquo;. If found, the package configuration file is loaded and this module returns with no further action. See documentation of the Boost CMake package configuration for details on what it provides.</source>
          <target state="translated">Boost가 boost-cmake 프로젝트 또는 Boost 1.70.0에서 빌드 된 경우 find_package의 구성 모드와 함께 사용할 패키지 구성 파일을 제공합니다. 이 모듈은 &lt;code&gt;BoostConfig.cmake&lt;/code&gt; 또는 &lt;code&gt;boost-config.cmake&lt;/code&gt; 라는 패키지 구성 파일을 찾아 결과를 &lt;code&gt;CACHE&lt;/code&gt; 항목&amp;ldquo;Boost_DIR&amp;rdquo; 에 저장합니다 . 발견되면 패키지 구성 파일이로드되고이 모듈은 추가 조치없이 리턴됩니다. 제공되는 기능에 대한 자세한 내용은 Boost CMake 패키지 구성 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dfe59f8703f54a762561432df56674688176fedc" translate="yes" xml:space="preserve">
          <source>If Boost was built using the boost-cmake project or from Boost 1.70.0 on it provides a package configuration file for use with find_package's config mode. This module looks for the package configuration file called &lt;code&gt;BoostConfig.cmake&lt;/code&gt; or &lt;code&gt;boost-config.cmake&lt;/code&gt; and stores the result in &lt;code&gt;CACHE&lt;/code&gt; entry &lt;code&gt;Boost_DIR&lt;/code&gt;. If found, the package configuration file is loaded and this module returns with no further action. See documentation of the Boost CMake package configuration for details on what it provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d91ec96a190cb075995286d5fc9e0cdae317050" translate="yes" xml:space="preserve">
          <source>If CMake is currently processing deferred calls scheduled by the &lt;a href=&quot;../command/cmake_language#command:cmake_language&quot; id=&quot;index-0-command:cmake_language&quot;&gt;&lt;code&gt;cmake_language(DEFER)&lt;/code&gt;&lt;/a&gt; command, this variable evaluates to &lt;code&gt;DEFERRED&lt;/code&gt; instead of a specific line number.</source>
          <target state="translated">CMake가 현재 &lt;a href=&quot;../command/cmake_language#command:cmake_language&quot; id=&quot;index-0-command:cmake_language&quot;&gt; &lt;code&gt;cmake_language(DEFER)&lt;/code&gt; &lt;/a&gt; 명령에 의해 예약 된 지연된 호출을 처리하고있는 경우이 변수 는 특정 줄 번호 대신 &lt;code&gt;DEFERRED&lt;/code&gt; 로 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="029bb713c83429f5d5e7995236e27a13ac47bb96" translate="yes" xml:space="preserve">
          <source>If CMake is run with the Makefile or Ninja generator, then &lt;code&gt;include(CPack)&lt;/code&gt; also generates a target &lt;code&gt;package_source&lt;/code&gt;. To build a source package, instead of &lt;code&gt;cpack -G TGZ --config CPackSourceConfig.cmake&lt;/code&gt; one may call &lt;code&gt;cmake --build . --target package_source&lt;/code&gt;, &lt;code&gt;make package_source&lt;/code&gt;, or &lt;code&gt;ninja package_source&lt;/code&gt;.</source>
          <target state="translated">CMake가 Makefile 또는 Ninja 생성기로 실행되는 경우 &lt;code&gt;include(CPack)&lt;/code&gt; 은 대상 &lt;code&gt;package_source&lt;/code&gt; 도 생성합니다 . 소스 패키지를 빌드하려면 &lt;code&gt;cpack -G TGZ --config CPackSourceConfig.cmake&lt;/code&gt; 대신 &lt;code&gt;cmake --build . --target package_source&lt;/code&gt; 호출 할 수 있습니다 . --target package_source , &lt;code&gt;make package_source&lt;/code&gt; 또는 &lt;code&gt;ninja package_source&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d825ba1b0d98086890654b869a50e96b19fd86f" translate="yes" xml:space="preserve">
          <source>If CMake is run with the Makefile, Ninja, or Xcode generator, then &lt;code&gt;include(CPack)&lt;/code&gt; generates a target &lt;code&gt;package&lt;/code&gt;. This makes it possible to build a binary installer from CMake, Make, or Ninja: Instead of &lt;code&gt;cpack&lt;/code&gt;, one may call &lt;code&gt;cmake --build . --target package&lt;/code&gt; or &lt;code&gt;make package&lt;/code&gt; or &lt;code&gt;ninja package&lt;/code&gt;. The VS generator creates an uppercase target &lt;code&gt;PACKAGE&lt;/code&gt;.</source>
          <target state="translated">CMake가 Makefile, Ninja 또는 Xcode 생성기로 실행되는 경우 &lt;code&gt;include(CPack)&lt;/code&gt; 은 대상 &lt;code&gt;package&lt;/code&gt; 생성 합니다 . 이를 통해 CMake, Make 또는 Ninja에서 바이너리 설치 프로그램을 빌드 할 수 있습니다 &lt;code&gt;cmake --build . --target package&lt;/code&gt; &lt;code&gt;cpack&lt;/code&gt; 대신 cmake --build를 호출 할 수 있습니다 . --target package 또는 &lt;code&gt;make package&lt;/code&gt; 또는 &lt;code&gt;ninja package&lt;/code&gt; . VS 생성기는 대문자 대상 &lt;code&gt;PACKAGE&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e6f339798b174d94e66a83a4fe08aba5893b9034" translate="yes" xml:space="preserve">
          <source>If CTest is asked to run only a subset of tests (e.g. using regular expressions or the &lt;code&gt;--rerun-failed&lt;/code&gt; option) and the cleanup test is not in the set of tests to run, it will automatically be added if any tests in the set require any fixture listed in &lt;code&gt;FIXTURES_CLEANUP&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--rerun-failed&lt;/code&gt; 에 테스트의 하위 집합 만 실행하도록 요청한 경우 (예 : 정규식 또는 --rerun-failed 옵션 사용) 정리 테스트가 실행할 테스트 세트에없는 경우 세트의 테스트가 있으면 자동으로 추가됩니다 &lt;code&gt;FIXTURES_CLEANUP&lt;/code&gt; 에 나열된 조명기가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="5d267b6bb4d5ef12baed307fada0f826a8ec855e" translate="yes" xml:space="preserve">
          <source>If CTest is asked to run only a subset of tests (e.g. using regular expressions or the &lt;code&gt;--rerun-failed&lt;/code&gt; option) and the setup test is not in the set of tests to run, it will automatically be added if any tests in the set require any fixture listed in &lt;code&gt;FIXTURES_SETUP&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--rerun-failed&lt;/code&gt; 에 테스트의 하위 집합 만 실행하도록 요청한 경우 (예 : 정규식 또는 --rerun-failed 옵션 사용) 설정 테스트가 실행할 테스트 세트에없는 경우 세트의 테스트가 있으면 자동으로 추가됩니다 &lt;code&gt;FIXTURES_SETUP&lt;/code&gt; 에 나열된 조명기가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="ec58b23c55b54b9b245b4918924f5e51892c14fc" translate="yes" xml:space="preserve">
          <source>If CURL was built using the CMake buildsystem then it provides its own &lt;code&gt;CURLConfig.cmake&lt;/code&gt; file for use with the &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-0-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; command&amp;rsquo;s config mode. This module looks for this file and, if found, returns its results with no further action.</source>
          <target state="translated">CURL이 CMake 빌드 시스템을 사용하여 빌드 된 경우 &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-0-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; 명령의 구성 모드 와 함께 사용할 자체 &lt;code&gt;CURLConfig.cmake&lt;/code&gt; 파일을 제공 합니다. 이 모듈은이 파일을 찾고 발견 된 경우 추가 작업없이 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7b4b6a8abb828410c54d0dab8f7db0592cd3fd20" translate="yes" xml:space="preserve">
          <source>If CURL was built using the CMake buildsystem then it provides its own &lt;code&gt;CURLConfig.cmake&lt;/code&gt; file for use with the &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-0-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; command's config mode. This module looks for this file and, if found, returns its results with no further action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf02ccdb2d3409a988d8d038ccd606ad63d705e" translate="yes" xml:space="preserve">
          <source>If False, do not try to use the relevant CMake wrapping command.</source>
          <target state="translated">False 인 경우 관련 CMake Wrapping 명령을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="45d44b1292592dc708ef500f8cba7911a8ffd925" translate="yes" xml:space="preserve">
          <source>If False, optional Yy part of Xxx system is not available.</source>
          <target state="translated">False이면 Xxx 시스템의 선택적 Yy 부분을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ab02204c2b483912e1b1bf78f7f3a02eccba3411" translate="yes" xml:space="preserve">
          <source>If GSL is found, this module defines the following &lt;a href=&quot;../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-0-prop_tgt:IMPORTED&quot;&gt;&lt;code&gt;IMPORTED&lt;/code&gt;&lt;/a&gt; targets:</source>
          <target state="translated">GSL을 찾으면이 모듈은 다음과 같은 &lt;a href=&quot;../prop_tgt/imported#prop_tgt:IMPORTED&quot; id=&quot;index-0-prop_tgt:IMPORTED&quot;&gt; &lt;code&gt;IMPORTED&lt;/code&gt; &lt;/a&gt; 대상을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="1b9301d9a14b3d0ef762051513d0e3346a23233c" translate="yes" xml:space="preserve">
          <source>If USE_BAR is true and USE_ZOT is false, this provides an option called USE_FOO that defaults to ON. Otherwise, it sets USE_FOO to OFF. If the status of USE_BAR or USE_ZOT ever changes, any value for the USE_FOO option is saved so that when the option is re-enabled it retains its old value.</source>
          <target state="translated">USE_BAR이 true이고 USE_ZOT가 false 인 경우 USE_FOO라는 옵션을 제공하며 기본값은 ON입니다. 그렇지 않으면 USE_FOO를 OFF로 설정합니다. USE_BAR 또는 USE_ZOT의 상태가 계속 변경되면 USE_FOO 옵션의 값이 저장되므로 옵션을 다시 사용할 때 이전 값을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="6133a60b4a2b7a6507e2c6571908a17624d85b99" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;CMAKE_TARGET_MESSAGES&lt;/code&gt; cache entry exists its value initializes the value of this property.</source>
          <target state="translated">경우 &lt;code&gt;CMAKE_TARGET_MESSAGES&lt;/code&gt; 의 캐시 항목이 존재 그 값이 속성의 값을 초기화한다.</target>
        </trans-unit>
        <trans-unit id="3fad0f185b326c67ebf57e84d47f4c6da4457dc2" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;FILENAME&lt;/code&gt; is given, the information is printed into this file. If &lt;code&gt;APPEND&lt;/code&gt; is used, it is appended to this file, otherwise the file is overwritten if it already existed. If the VAR option is used, the information is &quot;printed&quot; into the specified variable. If &lt;code&gt;FILENAME&lt;/code&gt; is not used, the information is printed to the terminal. Using the &lt;code&gt;DESCRIPTION&lt;/code&gt; option a description or headline can be set which will be printed above the actual content. If only one type of package was requested, no title is printed, unless it is explicitly set using either &lt;code&gt;DESCRIPTION&lt;/code&gt; to use a custom string, or &lt;code&gt;DEFAULT_DESCRIPTION&lt;/code&gt; to use a default title for the requested type. If &lt;code&gt;INCLUDE_QUIET_PACKAGES&lt;/code&gt; is given, packages which have been searched with &lt;code&gt;find_package(... QUIET)&lt;/code&gt; will also be listed. By default they are skipped. If &lt;code&gt;FATAL_ON_MISSING_REQUIRED_PACKAGES&lt;/code&gt; is given, CMake will abort if a package which is marked as one of the package types listed in the &lt;a href=&quot;#variable:FeatureSummary_REQUIRED_PKG_TYPES&quot; id=&quot;index-1-variable:FeatureSummary_REQUIRED_PKG_TYPES&quot;&gt;&lt;code&gt;FeatureSummary_REQUIRED_PKG_TYPES&lt;/code&gt;&lt;/a&gt; global property has not been found. The default value for the &lt;a href=&quot;#variable:FeatureSummary_REQUIRED_PKG_TYPES&quot; id=&quot;index-2-variable:FeatureSummary_REQUIRED_PKG_TYPES&quot;&gt;&lt;code&gt;FeatureSummary_REQUIRED_PKG_TYPES&lt;/code&gt;&lt;/a&gt; global property is &lt;code&gt;REQUIRED&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ad99888bdf2e2daa11c3fbdeb77bf0f28d6156" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;FILENAME&lt;/code&gt; is given, the information is printed into this file. If &lt;code&gt;APPEND&lt;/code&gt; is used, it is appended to this file, otherwise the file is overwritten if it already existed. If the VAR option is used, the information is &amp;ldquo;printed&amp;rdquo; into the specified variable. If &lt;code&gt;FILENAME&lt;/code&gt; is not used, the information is printed to the terminal. Using the &lt;code&gt;DESCRIPTION&lt;/code&gt; option a description or headline can be set which will be printed above the actual content. If only one type of package was requested, no title is printed, unless it is explicitly set using either &lt;code&gt;DESCRIPTION&lt;/code&gt; to use a custom string, or &lt;code&gt;DEFAULT_DESCRIPTION&lt;/code&gt; to use a default title for the requested type. If &lt;code&gt;INCLUDE_QUIET_PACKAGES&lt;/code&gt; is given, packages which have been searched with &lt;code&gt;find_package(... QUIET)&lt;/code&gt; will also be listed. By default they are skipped. If &lt;code&gt;FATAL_ON_MISSING_REQUIRED_PACKAGES&lt;/code&gt; is given, CMake will abort if a package which is marked as one of the package types listed in the &lt;a href=&quot;#variable:FeatureSummary_REQUIRED_PKG_TYPES&quot; id=&quot;index-1-variable:FeatureSummary_REQUIRED_PKG_TYPES&quot;&gt;&lt;code&gt;FeatureSummary_REQUIRED_PKG_TYPES&lt;/code&gt;&lt;/a&gt; global property has not been found. The default value for the &lt;a href=&quot;#variable:FeatureSummary_REQUIRED_PKG_TYPES&quot; id=&quot;index-2-variable:FeatureSummary_REQUIRED_PKG_TYPES&quot;&gt;&lt;code&gt;FeatureSummary_REQUIRED_PKG_TYPES&lt;/code&gt;&lt;/a&gt; global property is &lt;code&gt;REQUIRED&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;FILENAME&lt;/code&gt; 주어집니다, 정보가이 파일로 인쇄됩니다. 경우 &lt;code&gt;APPEND&lt;/code&gt; 가 사용됩니다, 이미 존재하는 경우, 그렇지 않으면 파일이 덮어 쓰기,이 파일에 추가됩니다. VAR 옵션을 사용하면 정보가 지정된 변수에 &quot;인쇄&quot;됩니다. 경우 &lt;code&gt;FILENAME&lt;/code&gt; 사용되지 않는, 정보 단말에 출력된다. &lt;code&gt;DESCRIPTION&lt;/code&gt; 옵션을 사용하면 실제 내용 위에 인쇄 될 설명이나 헤드 라인을 설정할 수 있습니다. 패키지 유형이 하나만 요청 된 경우 &lt;code&gt;DESCRIPTION&lt;/code&gt; 을 사용하여 사용자 지정 문자열 을 사용 하거나 &lt;code&gt;DEFAULT_DESCRIPTION&lt;/code&gt; 을 사용하여 요청 된 유형에 기본 제목을 사용 하지 않으면 제목이 인쇄되지 않습니다 . &lt;code&gt;INCLUDE_QUIET_PACKAGES&lt;/code&gt; 인 경우 &lt;code&gt;find_package(... QUIET)&lt;/code&gt; 로 검색된 패키지 도 표시됩니다. 기본적으로 생략됩니다. 경우 &lt;code&gt;FATAL_ON_MISSING_REQUIRED_PACKAGES&lt;/code&gt; 가 주어진다에 나열된 패키지 유형 중 하나로 표시되는 패키지 경우, CMake는 중단됩니다 &lt;a href=&quot;#variable:FeatureSummary_REQUIRED_PKG_TYPES&quot; id=&quot;index-1-variable:FeatureSummary_REQUIRED_PKG_TYPES&quot;&gt; &lt;code&gt;FeatureSummary_REQUIRED_PKG_TYPES&lt;/code&gt; &lt;/a&gt; 전역 속성이 발견되지 않았습니다. &lt;a href=&quot;#variable:FeatureSummary_REQUIRED_PKG_TYPES&quot; id=&quot;index-2-variable:FeatureSummary_REQUIRED_PKG_TYPES&quot;&gt; &lt;code&gt;FeatureSummary_REQUIRED_PKG_TYPES&lt;/code&gt; &lt;/a&gt; 글로벌 특성 의 기본값 은 &lt;code&gt;REQUIRED&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ce1ad6cc8b4cfafe232f565f2f1c4345ca358a16" translate="yes" xml:space="preserve">
          <source>If a Makefile or Ninja generator is used to generate the build tree, it is not recommended to invoke &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;ninja&lt;/code&gt; directly. Instead, it is recommended that the IDE invoke &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-3-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;--build&lt;/code&gt; argument, which will in turn invoke the appropriate build tool.</source>
          <target state="translated">Makefile 또는 Ninja 생성기를 사용하여 빌드 트리를 생성하는 경우 &lt;code&gt;make&lt;/code&gt; 또는 &lt;code&gt;ninja&lt;/code&gt; 를 직접 호출하지 않는 것이 좋습니다 . 대신 IDE 가 &lt;code&gt;--build&lt;/code&gt; 인수를 사용하여 &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-3-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; 를 호출하여 적절한 빌드 도구를 호출하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="30da87e82d95c1f6b4609119037e4119fc9a6375" translate="yes" xml:space="preserve">
          <source>If a Qt macro is found, then the C++ source file &lt;code&gt;&amp;lt;base&amp;gt;.&amp;lt;source_extension&amp;gt;&lt;/code&gt; is expected to as well contain an include statement</source>
          <target state="translated">Qt 매크로가 발견되면 C ++ 소스 파일 &lt;code&gt;&amp;lt;base&amp;gt;.&amp;lt;source_extension&amp;gt;&lt;/code&gt; 에 include 문이 포함될 것으로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="8f29417611d74a81e0c2da5b42b2e17268bca5ed" translate="yes" xml:space="preserve">
          <source>If a Qt macro is found, then the header will be compiled by the &lt;code&gt;moc&lt;/code&gt; to the output file &lt;code&gt;moc_&amp;lt;base_name&amp;gt;.cpp&lt;/code&gt;. The complete output file path is described in the section &lt;a href=&quot;#output-file-location&quot;&gt;Output file location&lt;/a&gt;.</source>
          <target state="translated">Qt 매크로가 발견되면 &lt;code&gt;moc&lt;/code&gt; 가 헤더를 출력 파일 &lt;code&gt;moc_&amp;lt;base_name&amp;gt;.cpp&lt;/code&gt; 로 컴파일합니다 . 전체 출력 파일 경로는 &lt;a href=&quot;#output-file-location&quot;&gt;출력 파일 위치&lt;/a&gt; 섹션에 설명되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4d81907809743ab71d2f0c569251fe08a3d45207" translate="yes" xml:space="preserve">
          <source>If a binary target is linked transitively to a macOS &lt;a href=&quot;../prop_tgt/framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-1-prop_tgt:FRAMEWORK&quot;&gt;&lt;code&gt;FRAMEWORK&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;Headers&lt;/code&gt; directory of the framework is also treated as a usage requirement. This has the same effect as passing the framework directory as an include directory.</source>
          <target state="translated">이진 대상이 macOS &lt;a href=&quot;../prop_tgt/framework#prop_tgt:FRAMEWORK&quot; id=&quot;index-1-prop_tgt:FRAMEWORK&quot;&gt; &lt;code&gt;FRAMEWORK&lt;/code&gt; 에&lt;/a&gt; 전 이적으로 연결되어 있으면 프레임 워크 의 &lt;code&gt;Headers&lt;/code&gt; 디렉토리도 사용 요구 사항으로 처리됩니다. 이는 프레임 워크 디렉토리를 포함 디렉토리로 전달하는 것과 동일한 효과를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="b38c16842af76f1a34b978439304e09452f61f1f" translate="yes" xml:space="preserve">
          <source>If a download method is specified, any existing contents of the source directory may be deleted. Only the URL download method checks whether this directory is either missing or empty before initiating the download, stopping with an error if it is not empty. All other download methods silently discard any previous contents of the source directory.</source>
          <target state="translated">다운로드 방법을 지정하면 소스 디렉토리의 기존 내용이 삭제 될 수 있습니다. URL 다운로드 방법 만 다운로드를 시작하기 전에이 디렉토리가 누락되었거나 비어 있는지 확인하고 비어 있지 않은 경우 오류와 함께 중지합니다. 다른 모든 다운로드 방법은 소스 디렉토리의 이전 내용을 자동으로 버립니다.</target>
        </trans-unit>
        <trans-unit id="bf495c6174880956522c16daa2126fbdc860de6a" translate="yes" xml:space="preserve">
          <source>If a file is specified, the version is written into it. The help is printed to a named &amp;lt;f&amp;gt;ile if given.</source>
          <target state="translated">파일이 지정되면 버전이 파일에 기록됩니다. 도움말은 이름이 지정된 &amp;lt;f&amp;gt; 파일로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="cde95a6fbde81056465c0717a39c7a9abf3c1717" translate="yes" xml:space="preserve">
          <source>If a library does not export any symbols, it must not be declared as a &lt;code&gt;SHARED&lt;/code&gt; library. For example, a Windows resource DLL or a managed C++/CLI DLL that exports no unmanaged symbols would need to be a &lt;code&gt;MODULE&lt;/code&gt; library. This is because CMake expects a &lt;code&gt;SHARED&lt;/code&gt; library to always have an associated import library on Windows.</source>
          <target state="translated">라이브러리가 심볼을 내 보내지 않으면 &lt;code&gt;SHARED&lt;/code&gt; 라이브러리 로 선언하면 안됩니다 . 예를 들어, 관리되지 않는 심볼을 내 보내지 않는 Windows 리소스 DLL 또는 관리되는 C ++ / CLI DLL은 &lt;code&gt;MODULE&lt;/code&gt; 라이브러리 여야합니다 . CMake는 Windows 에서 &lt;code&gt;SHARED&lt;/code&gt; 라이브러리가 항상 연관된 가져 오기 라이브러리를 갖기를 기대하기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="1c7c20d06b1ceb52bc20bce290d4a6ceed994c89" translate="yes" xml:space="preserve">
          <source>If a library search path must be provided, prefer to localize the effect where possible by using the &lt;a href=&quot;target_link_directories#command:target_link_directories&quot; id=&quot;index-0-command:target_link_directories&quot;&gt;&lt;code&gt;target_link_directories()&lt;/code&gt;&lt;/a&gt; command rather than &lt;code&gt;link_directories()&lt;/code&gt;. The target-specific command can also control how the search directories propagate to other dependent targets.</source>
          <target state="translated">라이브러리 검색 경로를 제공 &lt;code&gt;link_directories()&lt;/code&gt; 경우 link_directories () 대신 &lt;a href=&quot;target_link_directories#command:target_link_directories&quot; id=&quot;index-0-command:target_link_directories&quot;&gt; &lt;code&gt;target_link_directories()&lt;/code&gt; &lt;/a&gt; 명령 을 사용하여 가능한 경우 효과를 현지화하십시오 . 대상별 명령은 또한 검색 디렉토리가 다른 종속 대상으로 전파되는 방법을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61d8e546933123589d9c078b3fa2f1d940bed581" translate="yes" xml:space="preserve">
          <source>If a macro from &lt;a href=&quot;../prop_tgt/automoc_macro_names#prop_tgt:AUTOMOC_MACRO_NAMES&quot; id=&quot;index-0-prop_tgt:AUTOMOC_MACRO_NAMES&quot;&gt;&lt;code&gt;AUTOMOC_MACRO_NAMES&lt;/code&gt;&lt;/a&gt; is found in a header file, &lt;code&gt;moc&lt;/code&gt; will be run on the file. The result will be put into a file named according to &lt;code&gt;moc_&amp;lt;basename&amp;gt;.cpp&lt;/code&gt;. If the macro is found in a C++ implementation file, the moc output will be put into a file named according to &lt;code&gt;&amp;lt;basename&amp;gt;.moc&lt;/code&gt;, following the Qt conventions. The &lt;code&gt;&amp;lt;basename&amp;gt;.moc&lt;/code&gt; must be included by the user in the C++ implementation file with a preprocessor &lt;code&gt;#include&lt;/code&gt;.</source>
          <target state="translated">헤더 파일에 &lt;a href=&quot;../prop_tgt/automoc_macro_names#prop_tgt:AUTOMOC_MACRO_NAMES&quot; id=&quot;index-0-prop_tgt:AUTOMOC_MACRO_NAMES&quot;&gt; &lt;code&gt;AUTOMOC_MACRO_NAMES&lt;/code&gt; &lt;/a&gt; 의 매크로가 있으면 &lt;code&gt;moc&lt;/code&gt; 가 파일에서 실행됩니다. 결과는 &lt;code&gt;moc_&amp;lt;basename&amp;gt;.cpp&lt;/code&gt; 에 따라 이름이 지정된 파일에 저장됩니다 . 매크로가 C ++ 구현 파일에서 발견되면 mot 출력은 Qt 규칙 에 따라 &lt;code&gt;&amp;lt;basename&amp;gt;.moc&lt;/code&gt; 에 따라 이름이 지정된 파일에 저장됩니다 . 이 &lt;code&gt;&amp;lt;basename&amp;gt;.moc&lt;/code&gt; 전 처리기와 C ++ 실행 파일에 사용자가 포함되어야 &lt;code&gt;#include&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b5118a0725ca4c145abc986d741e5223705b89c8" translate="yes" xml:space="preserve">
          <source>If a module is found, the &lt;code&gt;&amp;lt;prefix&amp;gt;_MODULE_NAME&lt;/code&gt; variable will contain the name of the matching module. This variable can be used if you need to run &lt;a href=&quot;#command:pkg_get_variable&quot; id=&quot;index-1-command:pkg_get_variable&quot;&gt;&lt;code&gt;pkg_get_variable()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모듈이 발견되면 &lt;code&gt;&amp;lt;prefix&amp;gt;_MODULE_NAME&lt;/code&gt; 변수에 일치하는 모듈의 이름이 포함됩니다. 이 변수는 &lt;a href=&quot;#command:pkg_get_variable&quot; id=&quot;index-1-command:pkg_get_variable&quot;&gt; &lt;code&gt;pkg_get_variable()&lt;/code&gt; &lt;/a&gt; 을 실행해야하는 경우 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e61d89320b40aba27bcf79fccf87c4aed97f1b2b" translate="yes" xml:space="preserve">
          <source>If a module is specified instead of a file, the file with name &lt;code&gt;&amp;lt;modulename&amp;gt;.cmake&lt;/code&gt; is searched first in &lt;a href=&quot;../variable/cmake_module_path#variable:CMAKE_MODULE_PATH&quot; id=&quot;index-0-variable:CMAKE_MODULE_PATH&quot;&gt;&lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt;&lt;/a&gt;, then in the CMake module directory. There is one exception to this: if the file which calls &lt;code&gt;include()&lt;/code&gt; is located itself in the CMake builtin module directory, then first the CMake builtin module directory is searched and &lt;a href=&quot;../variable/cmake_module_path#variable:CMAKE_MODULE_PATH&quot; id=&quot;index-1-variable:CMAKE_MODULE_PATH&quot;&gt;&lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt;&lt;/a&gt; afterwards. See also policy &lt;a href=&quot;../policy/cmp0017#policy:CMP0017&quot; id=&quot;index-0-policy:CMP0017&quot;&gt;&lt;code&gt;CMP0017&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모듈이 대신 파일의 지정되는 경우, 이름의 파일 &lt;code&gt;&amp;lt;modulename&amp;gt;.cmake&lt;/code&gt; IS는 처음에 검색 &lt;a href=&quot;../variable/cmake_module_path#variable:CMAKE_MODULE_PATH&quot; id=&quot;index-0-variable:CMAKE_MODULE_PATH&quot;&gt; &lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt; &lt;/a&gt; 다음 CMake 모듈 디렉토리에. &lt;code&gt;include()&lt;/code&gt; 를 호출하는 파일이 CMake 내장 모듈 디렉토리에있는 경우 먼저 CMake 내장 모듈 디렉토리를 검색 한 후 &lt;a href=&quot;../variable/cmake_module_path#variable:CMAKE_MODULE_PATH&quot; id=&quot;index-1-variable:CMAKE_MODULE_PATH&quot;&gt; &lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt; 를 제외하십시오&lt;/a&gt; . 정책 &lt;a href=&quot;../policy/cmp0017#policy:CMP0017&quot; id=&quot;index-0-policy:CMP0017&quot;&gt; &lt;code&gt;CMP0017&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="51ffc6354b2e588493e140bc7b0710dcba5e576b" translate="yes" xml:space="preserve">
          <source>If a module library target has this property set to true it will be built as a &lt;code&gt;CFBundle&lt;/code&gt; when built on the mac. It will have the directory structure required for a &lt;code&gt;CFBundle&lt;/code&gt; and will be suitable to be used for creating Browser Plugins or other application resources.</source>
          <target state="translated">모듈 라이브러리 대상에이 속성이 true로 설정되어 있으면 Mac에서 빌드 될 때 &lt;code&gt;CFBundle&lt;/code&gt; 로 빌드됩니다 . &lt;code&gt;CFBundle&lt;/code&gt; 에 필요한 디렉토리 구조를 가지며 브라우저 플러그인 또는 기타 애플리케이션 자원을 작성하는 데 사용하기에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="56a4ad6e890033baf429a7642de0b3d8f0409c6b" translate="yes" xml:space="preserve">
          <source>If a module library target has this property set to true it will be built as a CFBundle when built on the Mac. It will have the directory structure required for a CFBundle.</source>
          <target state="translated">모듈 라이브러리 대상에이 속성이 true로 설정되어 있으면 Mac에서 빌드 될 때 CFBundle로 빌드됩니다. CFBundle에 필요한 디렉토리 구조를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="6bcc9eb162a4ea86518a1d45e609ab1ab92e7156" translate="yes" xml:space="preserve">
          <source>If a non-full path value is supplied then CMake will resolve the full path of the compiler.</source>
          <target state="translated">전체 경로가 아닌 값이 제공되면 CMake는 컴파일러의 전체 경로를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="09802ddc5835d1f8601e782f10eb13e94cff49c0" translate="yes" xml:space="preserve">
          <source>If a preprocessor &lt;code&gt;#include&lt;/code&gt; directive is found which matches &lt;code&gt;&amp;lt;path&amp;gt;ui_&amp;lt;basename&amp;gt;.h&lt;/code&gt;, and a &lt;code&gt;&amp;lt;basename&amp;gt;.ui&lt;/code&gt; file exists, then &lt;code&gt;uic&lt;/code&gt; will be executed to generate the appropriate file. The &lt;code&gt;&amp;lt;basename&amp;gt;.ui&lt;/code&gt; file is searched for in the following places</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;ui_&amp;lt;basename&amp;gt;.h&lt;/code&gt; 와 일치 하는 전 처리기 &lt;code&gt;#include&lt;/code&gt; 지시문이 있고 &lt;code&gt;&amp;lt;basename&amp;gt;.ui&lt;/code&gt; 파일이 있으면 적절한 파일을 생성하기 위해 &lt;code&gt;uic&lt;/code&gt; 이 실행됩니다. &lt;code&gt;&amp;lt;basename&amp;gt;.ui&lt;/code&gt; 파일은 다음 장소에서 검색됩니다</target>
        </trans-unit>
        <trans-unit id="d6da461134eb622c066a37f8f41e6aa35023f548" translate="yes" xml:space="preserve">
          <source>If a project arranges for package registry entries to exist, such as:</source>
          <target state="translated">프로젝트가 다음과 같은 패키지 레지스트리 항목이 존재하도록 정렬하는 경우 :</target>
        </trans-unit>
        <trans-unit id="69112ed1ca4287eda16218232add0593f5fa3361" translate="yes" xml:space="preserve">
          <source>If a project has presets available, either through &lt;code&gt;CMakePresets.json&lt;/code&gt; or &lt;code&gt;CMakeUserPresets.json&lt;/code&gt;, the list of presets will appear in a drop-down menu in &lt;a href=&quot;../../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-9-manual:cmake-gui(1)&quot;&gt;&lt;code&gt;cmake-gui(1)&lt;/code&gt;&lt;/a&gt; between the source directory and the binary directory. Choosing a preset sets the binary directory, generator, environment variables, and cache variables, but all of these options can be overridden after a preset is selected.</source>
          <target state="translated">프로젝트에 &lt;code&gt;CMakePresets.json&lt;/code&gt; 또는 &lt;code&gt;CMakeUserPresets.json&lt;/code&gt; 을 통해 사용 가능한 사전 설정이있는 경우 사전 설정 목록은 소스 디렉터리와 바이너리 디렉터리 사이의 &lt;a href=&quot;../../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-9-manual:cmake-gui(1)&quot;&gt; &lt;code&gt;cmake-gui(1)&lt;/code&gt; &lt;/a&gt; 드롭 다운 메뉴에 표시됩니다 . 사전 설정을 선택하면 이진 디렉터리, 생성기, 환경 변수 및 캐시 변수가 설정되지만 이러한 모든 옵션은 사전 설정을 선택한 후에 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65be43e974227fe9b147c8a92b603c8470a2b7e0" translate="yes" xml:space="preserve">
          <source>If a relative path is given it is interpreted relative to the value of the &lt;a href=&quot;../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX&quot;&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;&lt;/a&gt; variable. The prefix can be relocated at install time using the &lt;code&gt;DESTDIR&lt;/code&gt; mechanism explained in the &lt;a href=&quot;../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-1-variable:CMAKE_INSTALL_PREFIX&quot;&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;&lt;/a&gt; variable documentation.</source>
          <target state="translated">상대 경로가 제공되면 &lt;a href=&quot;../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX&quot;&gt; &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; &lt;/a&gt; 변수 의 값에 상대적으로 해석 됩니다. &lt;a href=&quot;../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-1-variable:CMAKE_INSTALL_PREFIX&quot;&gt; &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; &lt;/a&gt; 변수 문서에 설명 된 &lt;code&gt;DESTDIR&lt;/code&gt; 메커니즘을 사용하여 설치시 접두어를 재배치 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6b0e3d86168c4294e773dd8906f7ff54a260dd4c" translate="yes" xml:space="preserve">
          <source>If a requested component is not present in the path, an empty string will be stored in &lt;code&gt;&amp;lt;out-var&amp;gt;&lt;/code&gt;. For example, only Windows systems have the concept of a &lt;code&gt;root-name&lt;/code&gt;, so when the host machine is non-Windows, the &lt;code&gt;ROOT_NAME&lt;/code&gt; subcommand will always return an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47823b6d62c96e9277c973d24a085c76125200d" translate="yes" xml:space="preserve">
          <source>If a required dependency is not found by &lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt;&lt;code&gt;cmake(1)&lt;/code&gt;&lt;/a&gt;, the cache is populated with an entry which contains a &lt;code&gt;NOTFOUND&lt;/code&gt; value. This value can be replaced by specifying it on the command line, or in the &lt;a href=&quot;../../manual/ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt;&lt;code&gt;ccmake(1)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt;&lt;code&gt;cmake-gui(1)&lt;/code&gt;&lt;/a&gt; tool. See the &lt;a href=&quot;../user-interaction/index#guide:User%20Interaction%20Guide&quot; id=&quot;index-0-guide:User Interaction Guide&quot;&gt;&lt;code&gt;User Interaction Guide&lt;/code&gt;&lt;/a&gt; for more about setting cache entries.</source>
          <target state="translated">&lt;a href=&quot;../../manual/cmake.1#manual:cmake(1)&quot; id=&quot;index-0-manual:cmake(1)&quot;&gt; &lt;code&gt;cmake(1)&lt;/code&gt; &lt;/a&gt; 에서 필수 종속성을 찾지 못하면 캐시는 &lt;code&gt;NOTFOUND&lt;/code&gt; 값 을 포함하는 항목으로 채워집니다 . 이 값은 명령 줄이나 &lt;a href=&quot;../../manual/ccmake.1#manual:ccmake(1)&quot; id=&quot;index-0-manual:ccmake(1)&quot;&gt; &lt;code&gt;ccmake(1)&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../manual/cmake-gui.1#manual:cmake-gui(1)&quot; id=&quot;index-0-manual:cmake-gui(1)&quot;&gt; &lt;code&gt;cmake-gui(1)&lt;/code&gt; &lt;/a&gt; 도구 에서 지정하여 바꿀 수 있습니다 . 캐시 항목 설정에 대한 자세한 내용은 &lt;a href=&quot;../user-interaction/index#guide:User%20Interaction%20Guide&quot; id=&quot;index-0-guide:User Interaction Guide&quot;&gt; &lt;code&gt;User Interaction Guide&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c8196579aa746a6923b61258b6c04c94e465626" translate="yes" xml:space="preserve">
          <source>If a selected architecture is available for both: device SDK and simulator SDK it will be built for the SDK selected by &lt;a href=&quot;../variable/cmake_osx_sysroot#variable:CMAKE_OSX_SYSROOT&quot; id=&quot;index-0-variable:CMAKE_OSX_SYSROOT&quot;&gt;&lt;code&gt;CMAKE_OSX_SYSROOT&lt;/code&gt;&lt;/a&gt; and removed from the corresponding SDK.</source>
          <target state="translated">선택한 아키텍처가 장치 SDK 및 시뮬레이터 SDK 모두에 사용 가능한 경우 &lt;a href=&quot;../variable/cmake_osx_sysroot#variable:CMAKE_OSX_SYSROOT&quot; id=&quot;index-0-variable:CMAKE_OSX_SYSROOT&quot;&gt; &lt;code&gt;CMAKE_OSX_SYSROOT&lt;/code&gt; 에서&lt;/a&gt; 선택한 SDK에 대해 빌드 되고 해당 SDK에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="1ce4f4bc21be48080994173da37cb6c23cdc10a3" translate="yes" xml:space="preserve">
          <source>If a sequential execution of multiple commands is required, use multiple &lt;a href=&quot;#command:execute_process&quot; id=&quot;index-0-command:execute_process&quot;&gt;&lt;code&gt;execute_process()&lt;/code&gt;&lt;/a&gt; calls with a single &lt;code&gt;COMMAND&lt;/code&gt; argument.</source>
          <target state="translated">여러 명령을 순차적으로 실행해야하는 경우 단일 &lt;code&gt;COMMAND&lt;/code&gt; 인수 와 함께 여러 &lt;a href=&quot;#command:execute_process&quot; id=&quot;index-0-command:execute_process&quot;&gt; &lt;code&gt;execute_process()&lt;/code&gt; &lt;/a&gt; 호출을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="547e42797e310852adfe811b5914e22366c828a1" translate="yes" xml:space="preserve">
          <source>If a single target needs to produce more than one jar from its java source code, to prevent the accumulation of duplicate class files in subsequent jars, set/reset &lt;code&gt;CMAKE_JAR_CLASSES_PREFIX&lt;/code&gt; prior to calling the &lt;code&gt;add_jar()&lt;/code&gt; function:</source>
          <target state="translated">단일 대상이 Java 소스 코드에서 하나 이상의 jar을 생성해야하는 경우 후속 jar에 중복 클래스 파일이 누적되지 않도록 하려면 &lt;code&gt;add_jar()&lt;/code&gt; 함수 를 호출하기 전에 &lt;code&gt;CMAKE_JAR_CLASSES_PREFIX&lt;/code&gt; 를 설정 / 재설정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c641393cb0eece48d4dd44486eeb44abf009bad3" translate="yes" xml:space="preserve">
          <source>If a source file matches multiple groups, the &lt;em&gt;last&lt;/em&gt; group that explicitly lists the file with &lt;code&gt;FILES&lt;/code&gt; will be favored, if any. If no group explicitly lists the file, the &lt;em&gt;last&lt;/em&gt; group whose regular expression matches the file will be favored.</source>
          <target state="translated">소스 파일이 여러 그룹과 일치하면 &lt;code&gt;FILES&lt;/code&gt; 와 함께 파일 을 명시 적으로 나열하는 &lt;em&gt;마지막&lt;/em&gt; 그룹이 선호됩니다. 그룹이 파일을 명시 적으로 나열하지 않으면 정규식이 파일과 일치하는 &lt;em&gt;마지막&lt;/em&gt; 그룹이 선호됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="536c556452212ea95ed6c58cfeaa6b27e5dedb31" translate="yes" xml:space="preserve">
          <source>If a static or object library has dependency optimization enabled, it first discards all dependencies. Then, it looks through all of the direct and indirect dependencies that it initially had, and adds them back if they meet any of the following criteria:</source>
          <target state="translated">정적 또는 개체 라이브러리에 종속성 최적화가 활성화 된 경우 먼저 모든 종속성을 삭제합니다. 그런 다음 처음에 가졌던 모든 직접 및 간접 종속성을 살펴보고 다음 기준 중 하나라도 충족하면 다시 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1ff64afb256005e648317888f49a9ea8bedf5a29" translate="yes" xml:space="preserve">
          <source>If a step target is created for an independent step by the &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-3-command:externalproject_add&quot;&gt;&lt;code&gt;ExternalProject_Add()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;STEP_TARGETS&lt;/code&gt; option or by the &lt;a href=&quot;#command:externalproject_add_steptargets&quot; id=&quot;index-3-command:externalproject_add_steptargets&quot;&gt;&lt;code&gt;ExternalProject_Add_StepTargets()&lt;/code&gt;&lt;/a&gt; function, it will not depend on the external targets, but may depend on targets for other steps.</source>
          <target state="translated">&lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-3-command:externalproject_add&quot;&gt; &lt;code&gt;ExternalProject_Add()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;STEP_TARGETS&lt;/code&gt; 옵션 또는 &lt;a href=&quot;#command:externalproject_add_steptargets&quot; id=&quot;index-3-command:externalproject_add_steptargets&quot;&gt; &lt;code&gt;ExternalProject_Add_StepTargets()&lt;/code&gt; &lt;/a&gt; 함수에 의해 독립 단계에 대한 단계 대상이 생성 된 경우 외부 대상에 종속되지 않지만 다른 단계의 대상에 종속 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54c2368249cdcf215901649de3840031aae28a1e" translate="yes" xml:space="preserve">
          <source>If a supported thread library was found.</source>
          <target state="translated">지원되는 스레드 라이브러리가 발견 된 경우.</target>
        </trans-unit>
        <trans-unit id="94c4041072aa12a8170210a7c2481c4a26139cbb" translate="yes" xml:space="preserve">
          <source>If a target has &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; set to true, it may still be listed in an &lt;a href=&quot;../command/install#command:install&quot; id=&quot;index-0-command:install&quot;&gt;&lt;code&gt;install(TARGETS)&lt;/code&gt;&lt;/a&gt; command, but the user is responsible for ensuring that the target&amp;rsquo;s build artifacts are not missing or outdated when an install is performed.</source>
          <target state="translated">대상에 &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; 이 true로 설정된 경우 여전히 &lt;a href=&quot;../command/install#command:install&quot; id=&quot;index-0-command:install&quot;&gt; &lt;code&gt;install(TARGETS)&lt;/code&gt; &lt;/a&gt; 명령에 나열 될 수 있지만 사용자는 설치가 수행 될 때 대상의 빌드 아티팩트가 누락되거나 오래되지 않았는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="cd2e0c9504c44ec5c2f1b83b4752a252f7f86b98" translate="yes" xml:space="preserve">
          <source>If a target has &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; set to true, it may still be listed in an &lt;a href=&quot;../command/install#command:install&quot; id=&quot;index-0-command:install&quot;&gt;&lt;code&gt;install(TARGETS)&lt;/code&gt;&lt;/a&gt; command, but the user is responsible for ensuring that the target's build artifacts are not missing or outdated when an install is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268cbe75fdcd8fdd0afae3aae3c9376547806fc0" translate="yes" xml:space="preserve">
          <source>If a test in the set of tests to be executed requires a particular fixture, that fixture&amp;rsquo;s setup and cleanup tests would normally be added to the test set automatically. This option prevents adding setup or cleanup tests for fixtures matching the &lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;. Note that all other fixture behavior is retained, including test dependencies and skipping tests that have fixture setup tests that fail.</source>
          <target state="translated">실행할 테스트 세트의 테스트에 특정 픽스처가 필요한 경우 해당 픽스처의 설정 및 정리 테스트는 일반적으로 테스트 세트에 자동으로 추가됩니다. 이 옵션은 &lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt; 와 일치하는 조명기의 셋업 또는 클린업 테스트를 추가하지 못하게 합니다. 테스트 종속성 및 실패한 픽스처 설정 테스트가있는 테스트 건너 뛰기를 포함하여 다른 모든 픽스처 동작은 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="ac03952624b73b93b819d69115fbb8bbce0246f2" translate="yes" xml:space="preserve">
          <source>If a test in the set of tests to be executed requires a particular fixture, that fixture's setup and cleanup tests would normally be added to the test set automatically. This option prevents adding setup or cleanup tests for fixtures matching the &lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;. Note that all other fixture behavior is retained, including test dependencies and skipping tests that have fixture setup tests that fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef878935fc088712608718479f10bca7a3fe5b5" translate="yes" xml:space="preserve">
          <source>If a test with the &lt;a href=&quot;fixtures_setup#prop_test:FIXTURES_SETUP&quot; id=&quot;index-0-prop_test:FIXTURES_SETUP&quot;&gt;&lt;code&gt;FIXTURES_SETUP&lt;/code&gt;&lt;/a&gt; property set is &lt;code&gt;DISABLED&lt;/code&gt;, the fixture behavior will be as though that setup test was passing and any test case requiring that fixture will still run.</source>
          <target state="translated">&lt;a href=&quot;fixtures_setup#prop_test:FIXTURES_SETUP&quot; id=&quot;index-0-prop_test:FIXTURES_SETUP&quot;&gt; &lt;code&gt;FIXTURES_SETUP&lt;/code&gt; &lt;/a&gt; 속성이 설정된 테스트 가 &lt;code&gt;DISABLED&lt;/code&gt; 이면 픽스처 동작은 해당 설정 테스트가 통과 한 것처럼 보이며 해당 픽스처가 필요한 모든 테스트 케이스는 계속 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e25c4d39c99f143a71529fe04e60d393c28c3dc5" translate="yes" xml:space="preserve">
          <source>If a user passes &lt;code&gt;-DMY_CUSTOM_VARIABLE=SomeValue&lt;/code&gt; to CMake then this setting will be made visible to the toolchain file both for the main project and for test projects generated by the &lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-1-command:try_compile&quot;&gt;&lt;code&gt;try_compile()&lt;/code&gt;&lt;/a&gt; command source file signature.</source>
          <target state="translated">사용자가 &lt;code&gt;-DMY_CUSTOM_VARIABLE=SomeValue&lt;/code&gt; 를 CMake로 전달하면이 설정은 기본 프로젝트와 &lt;a href=&quot;../command/try_compile#command:try_compile&quot; id=&quot;index-1-command:try_compile&quot;&gt; &lt;code&gt;try_compile()&lt;/code&gt; &lt;/a&gt; 명령 소스 파일 서명으로 생성 된 테스트 프로젝트 모두에 대한 툴체인 파일에 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="a842b761fc2cc46d1bf8004e60de2d41c1f8aef7" translate="yes" xml:space="preserve">
          <source>If all of these parameters were not sufficient to find the right MPI implementation, a user may disable the entire autodetection process by specifying both a list of libraries in &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_LIBRARIES&lt;/code&gt; and a list of include directories in &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_ADDITIONAL_INCLUDE_DIRS&lt;/code&gt;. Any other variable may be set in addition to these two. The module will then validate the MPI settings and store the settings in the cache.</source>
          <target state="translated">이러한 매개 변수의 모든 권리 MPI 구현을 발견하기에 충분하지 있다면, 사용자는 도서관의 목록을 모두 지정하여 전체 자동 감지 프로세스를 비활성화 할 수 있습니다 &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_LIBRARIES&lt;/code&gt; 의 디렉토리 등의과 목록을 &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_ADDITIONAL_INCLUDE_DIRS&lt;/code&gt; . 이 두 가지 외에 다른 변수도 설정할 수 있습니다. 그런 다음 모듈은 MPI 설정을 확인하고 설정을 캐시에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="9f1067c13a7dcb4c490cdf987b03d674713e663a" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../command/install#command:install&quot; id=&quot;index-1-command:install&quot;&gt;&lt;code&gt;install()&lt;/code&gt;&lt;/a&gt; command is used without the &lt;code&gt;COMPONENT&lt;/code&gt; argument, these files will be grouped into a default component. The name of this default install component will be taken from this variable. It defaults to &lt;code&gt;Unspecified&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;a href=&quot;../command/install#command:install&quot; id=&quot;index-1-command:install&quot;&gt; &lt;code&gt;install()&lt;/code&gt; &lt;/a&gt; 명령이없이 사용 &lt;code&gt;COMPONENT&lt;/code&gt; 인수,이 파일은 기본 구성 요소로 분류됩니다. 이 기본 설치 구성 요소의 이름은이 변수에서 가져옵니다. 기본값은 &lt;code&gt;Unspecified&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3770be889285772cbcbfe827735f8497e101f896" translate="yes" xml:space="preserve">
          <source>If an IDE project generator is used, such as &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; or one of the Visual Studio generators, and the IDE understands the project format used, the IDE should read the project file and build it the same way it would otherwise.</source>
          <target state="translated">&lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 또는 Visual Studio 생성기 중 하나 와 같은 IDE 프로젝트 생성기가 사용되고 IDE가 사용 된 프로젝트 형식을 이해하는 경우 IDE는 프로젝트 파일을 읽고 다른 방법과 동일한 방식으로 빌드해야합니다.</target>
        </trans-unit>
        <trans-unit id="a244acdc1725ca54662ae54c25f11a632f38e68c" translate="yes" xml:space="preserve">
          <source>If an IDE project generator is used, such as &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; or one of the Visual Studio generators, and the IDE understands the project format used, the IDE should read the project file and build it the same way it would otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a6f86c5573059989c9d5d97e79a6d4a1c57901" translate="yes" xml:space="preserve">
          <source>If an absolute path (with a leading slash or drive letter) is given it is used verbatim.</source>
          <target state="translated">절대 경로 (선행 슬래시 또는 드라이브 문자 포함)가 제공되면 그대로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0e4127e7e02b19c3ee7c444efc55bb5a66de7c64" translate="yes" xml:space="preserve">
          <source>If an additional clean file is specific to a single target only, then the &lt;a href=&quot;../prop_tgt/additional_clean_files#prop_tgt:ADDITIONAL_CLEAN_FILES&quot; id=&quot;index-0-prop_tgt:ADDITIONAL_CLEAN_FILES&quot;&gt;&lt;code&gt;ADDITIONAL_CLEAN_FILES&lt;/code&gt;&lt;/a&gt; target property would usually be a better choice than this directory property.</source>
          <target state="translated">추가 정리 파일이 단일 대상에만 고유 한 경우 일반적으로 &lt;a href=&quot;../prop_tgt/additional_clean_files#prop_tgt:ADDITIONAL_CLEAN_FILES&quot; id=&quot;index-0-prop_tgt:ADDITIONAL_CLEAN_FILES&quot;&gt; &lt;code&gt;ADDITIONAL_CLEAN_FILES&lt;/code&gt; &lt;/a&gt; 대상 특성이이 디렉토리 특성보다 더 나은 선택입니다.</target>
        </trans-unit>
        <trans-unit id="686deca2ff89a7d4cf50a69d2978f830f599e5d6" translate="yes" xml:space="preserve">
          <source>If an imported library has the &lt;a href=&quot;../prop_tgt/imported_no_soname#prop_tgt:IMPORTED_NO_SONAME&quot; id=&quot;index-0-prop_tgt:IMPORTED_NO_SONAME&quot;&gt;&lt;code&gt;IMPORTED_NO_SONAME&lt;/code&gt;&lt;/a&gt; target property set, CMake may ask the linker to search for the library instead of using the full path (e.g. &lt;code&gt;/usr/lib/libfoo.so&lt;/code&gt; becomes &lt;code&gt;-lfoo&lt;/code&gt;).</source>
          <target state="translated">가져온 라이브러리에 &lt;a href=&quot;../prop_tgt/imported_no_soname#prop_tgt:IMPORTED_NO_SONAME&quot; id=&quot;index-0-prop_tgt:IMPORTED_NO_SONAME&quot;&gt; &lt;code&gt;IMPORTED_NO_SONAME&lt;/code&gt; &lt;/a&gt; 대상 속성이 설정 되어 있으면 CMake는 전체 경로를 사용하는 대신 링커에서 라이브러리를 검색하도록 요청할 수 있습니다 (예 : &lt;code&gt;/usr/lib/libfoo.so&lt;/code&gt; 는 &lt;code&gt;-lfoo&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="63071814530f0cecd16e2a7b5266265a6759857e" translate="yes" xml:space="preserve">
          <source>If an interface library has source files (i.e. the &lt;a href=&quot;../prop_tgt/sources#prop_tgt:SOURCES&quot; id=&quot;index-0-prop_tgt:SOURCES&quot;&gt;&lt;code&gt;SOURCES&lt;/code&gt;&lt;/a&gt; target property is set), it will appear in the generated buildsystem as a build target much like a target defined by the &lt;a href=&quot;add_custom_target#command:add_custom_target&quot; id=&quot;index-0-command:add_custom_target&quot;&gt;&lt;code&gt;add_custom_target()&lt;/code&gt;&lt;/a&gt; command. It does not compile any sources, but does contain build rules for custom commands created by the &lt;a href=&quot;add_custom_command#command:add_custom_command&quot; id=&quot;index-0-command:add_custom_command&quot;&gt;&lt;code&gt;add_custom_command()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">인터페이스 라이브러리에 소스 파일이있는 경우 (예 : &lt;a href=&quot;../prop_tgt/sources#prop_tgt:SOURCES&quot; id=&quot;index-0-prop_tgt:SOURCES&quot;&gt; &lt;code&gt;SOURCES&lt;/code&gt; &lt;/a&gt; 대상 속성이 설정 됨) 생성 된 빌드 시스템에 &lt;a href=&quot;add_custom_target#command:add_custom_target&quot; id=&quot;index-0-command:add_custom_target&quot;&gt; &lt;code&gt;add_custom_target()&lt;/code&gt; &lt;/a&gt; 명령으로 정의 된 대상과 매우 유사한 빌드 대상으로 나타납니다 . 소스를 컴파일하지는 않지만 &lt;a href=&quot;add_custom_command#command:add_custom_command&quot; id=&quot;index-0-command:add_custom_command&quot;&gt; &lt;code&gt;add_custom_command()&lt;/code&gt; &lt;/a&gt; 명령으로 만든 사용자 지정 명령에 대한 빌드 규칙을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="f340b5d202dc558a099da87acbeddfd7ee2cf4f1" translate="yes" xml:space="preserve">
          <source>If another project wishes to use &lt;code&gt;Foo&lt;/code&gt; it need only to locate the &lt;code&gt;FooConfig.cmake&lt;/code&gt; file and load it to get all the information it needs about package content locations. Since the package configuration file is provided by the package installation it already knows all the file locations.</source>
          <target state="translated">다른 프로젝트에서 &lt;code&gt;Foo&lt;/code&gt; 를 사용 하려면 &lt;code&gt;FooConfig.cmake&lt;/code&gt; 파일 을 찾아 로드하면 패키지 컨텐츠 위치에 필요한 모든 정보를 얻을 수 있습니다. 패키지 구성 파일은 패키지 설치에 의해 제공되므로 모든 파일 위치를 이미 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb3450146ea57e19ac69da16371933be619c4c5" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;RPATH&lt;/code&gt;/&lt;code&gt;RUNPATH&lt;/code&gt; entries passed to the linker contain the &lt;a href=&quot;#variable:CMAKE_STAGING_PREFIX&quot; id=&quot;index-1-variable:CMAKE_STAGING_PREFIX&quot;&gt;&lt;code&gt;CMAKE_STAGING_PREFIX&lt;/code&gt;&lt;/a&gt;, the matching path fragments are replaced with the &lt;a href=&quot;cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX&quot;&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">어떤 경우 &lt;code&gt;RPATH&lt;/code&gt; / &lt;code&gt;RUNPATH&lt;/code&gt; 의 링커에 전달 항목이 포함 &lt;a href=&quot;#variable:CMAKE_STAGING_PREFIX&quot; id=&quot;index-1-variable:CMAKE_STAGING_PREFIX&quot;&gt; &lt;code&gt;CMAKE_STAGING_PREFIX&lt;/code&gt; 를&lt;/a&gt; , 매칭 경로 단편이 대체된다 &lt;a href=&quot;cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-0-variable:CMAKE_INSTALL_PREFIX&quot;&gt; &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="713326adbaa23de577eae619f66cad00e92d9e75" translate="yes" xml:space="preserve">
          <source>If any dependency is an &lt;code&gt;OUTPUT&lt;/code&gt; of another custom command in the same directory (&lt;code&gt;CMakeLists.txt&lt;/code&gt; file), CMake automatically brings the other custom command into the target in which this command is built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551ced0b3d41b44343e965393c2779d700e688c8" translate="yes" xml:space="preserve">
          <source>If any dependency is an &lt;code&gt;OUTPUT&lt;/code&gt; of another custom command in the same directory (&lt;code&gt;CMakeLists.txt&lt;/code&gt; file), CMake automatically brings the other custom command into the target in which this command is built. A target-level dependency is added if any dependency is listed as &lt;code&gt;BYPRODUCTS&lt;/code&gt; of a target or any of its build events in the same directory to ensure the byproducts will be available.</source>
          <target state="translated">종속성이 동일한 디렉터리 ( &lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일) 에있는 다른 사용자 지정 명령 의 &lt;code&gt;OUTPUT&lt;/code&gt; 인 경우 CMake는 다른 사용자 지정 명령을이 명령이 빌드 된 대상으로 자동으로 가져옵니다. 종속 항목이 대상의 &lt;code&gt;BYPRODUCTS&lt;/code&gt; 또는 동일한 디렉토리에있는 빌드 이벤트로 나열되는 경우 대상 레벨 종속성이 추가되어 부산물을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc32bb81e8e11188b3e232ec2557ca4bbeaa0b4f" translate="yes" xml:space="preserve">
          <source>If any macros should be provided by the &lt;code&gt;MathFunctions&lt;/code&gt; package, they should be in a separate file which is installed to the same location as the &lt;code&gt;MathFunctionsConfig.cmake&lt;/code&gt; file, and included from there.</source>
          <target state="translated">&lt;code&gt;MathFunctions&lt;/code&gt; 패키지에서 매크로를 제공해야하는 경우 &lt;code&gt;MathFunctionsConfig.cmake&lt;/code&gt; 파일과 동일한 위치에 설치되고 여기에 포함 된 별도의 파일에 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="9aa302667eeacecadece2926953fee3342f3d2a5" translate="yes" xml:space="preserve">
          <source>If any of a fixture&amp;rsquo;s setup tests fail, none of the tests listing that fixture in its &lt;a href=&quot;fixtures_required#prop_test:FIXTURES_REQUIRED&quot; id=&quot;index-1-prop_test:FIXTURES_REQUIRED&quot;&gt;&lt;code&gt;FIXTURES_REQUIRED&lt;/code&gt;&lt;/a&gt; property will be run. Cleanup tests will, however, still be executed.</source>
          <target state="translated">조명기의 설정 테스트 중 하나라도 실패하면 &lt;a href=&quot;fixtures_required#prop_test:FIXTURES_REQUIRED&quot; id=&quot;index-1-prop_test:FIXTURES_REQUIRED&quot;&gt; &lt;code&gt;FIXTURES_REQUIRED&lt;/code&gt; &lt;/a&gt; 속성 에 해당 조명기를 나열하는 테스트 는 실행되지 않습니다. 그러나 정리 테스트는 계속 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="b7c79bd72a414446f4e28c36b80631cbdc3b1272" translate="yes" xml:space="preserve">
          <source>If any of a fixture's setup tests fail, none of the tests listing that fixture in its &lt;a href=&quot;fixtures_required#prop_test:FIXTURES_REQUIRED&quot; id=&quot;index-1-prop_test:FIXTURES_REQUIRED&quot;&gt;&lt;code&gt;FIXTURES_REQUIRED&lt;/code&gt;&lt;/a&gt; property will be run. Cleanup tests will, however, still be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31be31c1956c6ce625bb108b4d063dc37c13fc5c" translate="yes" xml:space="preserve">
          <source>If any of the above &lt;code&gt;..._DIR&lt;/code&gt; options are not specified, their defaults are computed as follows. If the &lt;code&gt;PREFIX&lt;/code&gt; option is given or the &lt;code&gt;EP_PREFIX&lt;/code&gt; directory property is set, then an external project is built and installed under the specified prefix:</source>
          <target state="translated">위의 &lt;code&gt;..._DIR&lt;/code&gt; 옵션 중 하나를 지정하지 않으면 기본값이 다음과 같이 계산됩니다. 는 IF &lt;code&gt;PREFIX&lt;/code&gt; 의 옵션이 주어 또는 &lt;code&gt;EP_PREFIX&lt;/code&gt; 의 디렉토리 속성을 설정 한 후 외부 프로젝트를 구축하고 지정된 접두사 아래에 설치됩니다</target>
        </trans-unit>
        <trans-unit id="ce0ab55359c26cf33d083e8b56a394029f52de2f" translate="yes" xml:space="preserve">
          <source>If any of the extracted files changes, then the &lt;code&gt;moc&lt;/code&gt; file for the source file gets rebuilt even when the source file itself doesn&amp;rsquo;t change.</source>
          <target state="translated">추출 된 파일이 변경 되면 소스 파일 자체가 변경되지 않은 경우에도 소스 파일 의 &lt;code&gt;moc&lt;/code&gt; 파일이 다시 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="dc8e7d21592745ed74ebcd61c8676b228202b752" translate="yes" xml:space="preserve">
          <source>If any of the extracted files changes, then the &lt;code&gt;moc&lt;/code&gt; file for the source file gets rebuilt even when the source file itself doesn't change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f56c9f2c1213410ff0686ab1ca0a54a2adec77" translate="yes" xml:space="preserve">
          <source>If any of the extracted files is &lt;a href=&quot;../prop_sf/generated#prop_sf:GENERATED&quot; id=&quot;index-0-prop_sf:GENERATED&quot;&gt;&lt;code&gt;GENERATED&lt;/code&gt;&lt;/a&gt; or if it is not in the target&amp;rsquo;s sources, then it might be necessary to add it to the &lt;code&gt;_autogen&lt;/code&gt; target dependencies. See &lt;a href=&quot;autogen_target_depends#prop_tgt:AUTOGEN_TARGET_DEPENDS&quot; id=&quot;index-0-prop_tgt:AUTOGEN_TARGET_DEPENDS&quot;&gt;&lt;code&gt;AUTOGEN_TARGET_DEPENDS&lt;/code&gt;&lt;/a&gt; for reference.</source>
          <target state="translated">추출 된 파일이 &lt;a href=&quot;../prop_sf/generated#prop_sf:GENERATED&quot; id=&quot;index-0-prop_sf:GENERATED&quot;&gt; &lt;code&gt;GENERATED&lt;/code&gt; &lt;/a&gt; 이거나 대상의 소스에없는 경우 &lt;code&gt;_autogen&lt;/code&gt; 대상 종속성에 파일 을 추가해야합니다 . 참조를 위해 &lt;a href=&quot;autogen_target_depends#prop_tgt:AUTOGEN_TARGET_DEPENDS&quot; id=&quot;index-0-prop_tgt:AUTOGEN_TARGET_DEPENDS&quot;&gt; &lt;code&gt;AUTOGEN_TARGET_DEPENDS&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2bf82060d400bd3b675c4d738de5d63230956c73" translate="yes" xml:space="preserve">
          <source>If any of the extracted files is &lt;a href=&quot;../prop_sf/generated#prop_sf:GENERATED&quot; id=&quot;index-0-prop_sf:GENERATED&quot;&gt;&lt;code&gt;GENERATED&lt;/code&gt;&lt;/a&gt; or if it is not in the target's sources, then it might be necessary to add it to the &lt;code&gt;_autogen&lt;/code&gt; target dependencies. See &lt;a href=&quot;autogen_target_depends#prop_tgt:AUTOGEN_TARGET_DEPENDS&quot; id=&quot;index-0-prop_tgt:AUTOGEN_TARGET_DEPENDS&quot;&gt;&lt;code&gt;AUTOGEN_TARGET_DEPENDS&lt;/code&gt;&lt;/a&gt; for reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0a307a07dcadfe82a662a32606b440a701e800" translate="yes" xml:space="preserve">
          <source>If available, use &lt;a href=&quot;../../command/target_compile_definitions#command:target_compile_definitions&quot; id=&quot;index-1-command:target_compile_definitions&quot;&gt;&lt;code&gt;target_compile_definitions()&lt;/code&gt;&lt;/a&gt; to specify &lt;code&gt;HAVE_LOG&lt;/code&gt; and &lt;code&gt;HAVE_EXP&lt;/code&gt; as &lt;code&gt;PRIVATE&lt;/code&gt; compile definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ace6fa6d0fc10df03ce17a8578176351f5c361" translate="yes" xml:space="preserve">
          <source>If called from within a find module loaded by &lt;a href=&quot;find_package#command:find_package&quot; id=&quot;index-2-command:find_package&quot;&gt;&lt;code&gt;find_package(&amp;lt;PackageName&amp;gt;)&lt;/code&gt;&lt;/a&gt;, search prefixes unique to the current package being found. Specifically look in the &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; CMake variable and the &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; environment variable. The package root variables are maintained as a stack so if called from nested find modules, root paths from the parent&amp;rsquo;s find module will be searched after paths from the current module, i.e. &lt;code&gt;&amp;lt;CurrentPackage&amp;gt;_ROOT&lt;/code&gt;, &lt;code&gt;ENV{&amp;lt;CurrentPackage&amp;gt;_ROOT}&lt;/code&gt;, &lt;code&gt;&amp;lt;ParentPackage&amp;gt;_ROOT&lt;/code&gt;, &lt;code&gt;ENV{&amp;lt;ParentPackage&amp;gt;_ROOT}&lt;/code&gt;, etc. This can be skipped if &lt;code&gt;NO_PACKAGE_ROOT_PATH&lt;/code&gt; is passed. See policy &lt;a href=&quot;../policy/cmp0074#policy:CMP0074&quot; id=&quot;index-0-policy:CMP0074&quot;&gt;&lt;code&gt;CMP0074&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;find_package#command:find_package&quot; id=&quot;index-2-command:find_package&quot;&gt; &lt;code&gt;find_package(&amp;lt;PackageName&amp;gt;)&lt;/code&gt; &lt;/a&gt; 의해로드 된 찾기 모듈 내에서 호출 된 경우 , 검색중인 현재 패키지에 고유 한 검색 접두어입니다. 특히 &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; CMake 변수 및 &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; 환경 변수를 확인하십시오. 패키지 루트 변수는 스택으로 유지되므로 중첩 된 찾기 모듈에서 호출 된 경우 현재 모듈의 경로 (예 : &lt;code&gt;&amp;lt;CurrentPackage&amp;gt;_ROOT&lt;/code&gt; , &lt;code&gt;ENV{&amp;lt;CurrentPackage&amp;gt;_ROOT}&lt;/code&gt; , &lt;code&gt;&amp;lt;ParentPackage&amp;gt;_ROOT&lt;/code&gt; 에서 상위 찾기 모듈의 루트 경로가 검색됩니다. &amp;gt; _ROOT , &lt;code&gt;ENV{&amp;lt;ParentPackage&amp;gt;_ROOT}&lt;/code&gt; 등 . &lt;code&gt;NO_PACKAGE_ROOT_PATH&lt;/code&gt; 가 전달 되면 건너 뛸 수 있습니다 .정책 &lt;a href=&quot;../policy/cmp0074#policy:CMP0074&quot; id=&quot;index-0-policy:CMP0074&quot;&gt; &lt;code&gt;CMP0074&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ace4bf92f50f5027cdb18f88aa1000fcd48f9168" translate="yes" xml:space="preserve">
          <source>If called from within a find module or any other script loaded by a call to &lt;a href=&quot;find_package#command:find_package&quot; id=&quot;index-0-command:find_package&quot;&gt;&lt;code&gt;find_package(&amp;lt;PackageName&amp;gt;)&lt;/code&gt;&lt;/a&gt;, search prefixes unique to the current package being found. Specifically, look in the &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; CMake variable and the &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; environment variable. The package root variables are maintained as a stack, so if called from nested find modules or config packages, root paths from the parent&amp;rsquo;s find module or config package will be searched after paths from the current module or package. In other words, the search order would be &lt;code&gt;&amp;lt;CurrentPackage&amp;gt;_ROOT&lt;/code&gt;, &lt;code&gt;ENV{&amp;lt;CurrentPackage&amp;gt;_ROOT}&lt;/code&gt;, &lt;code&gt;&amp;lt;ParentPackage&amp;gt;_ROOT&lt;/code&gt;, &lt;code&gt;ENV{&amp;lt;ParentPackage&amp;gt;_ROOT}&lt;/code&gt;, etc. This can be skipped if &lt;code&gt;NO_PACKAGE_ROOT_PATH&lt;/code&gt; is passed or by setting the &lt;a href=&quot;../variable/cmake_find_use_package_root_path#variable:CMAKE_FIND_USE_PACKAGE_ROOT_PATH&quot; id=&quot;index-0-variable:CMAKE_FIND_USE_PACKAGE_ROOT_PATH&quot;&gt;&lt;code&gt;CMAKE_FIND_USE_PACKAGE_ROOT_PATH&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;FALSE&lt;/code&gt;. See policy &lt;a href=&quot;../policy/cmp0074#policy:CMP0074&quot; id=&quot;index-0-policy:CMP0074&quot;&gt;&lt;code&gt;CMP0074&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;find_package#command:find_package&quot; id=&quot;index-0-command:find_package&quot;&gt; &lt;code&gt;find_package(&amp;lt;PackageName&amp;gt;)&lt;/code&gt; &lt;/a&gt; 에 대한 호출에 의해로드 된 찾기 모듈 또는 기타 스크립트 내에서 호출 되는 경우 현재 발견중인 패키지에 고유 한 검색 접두사를 검색합니다. 특히 &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; CMake 변수와 &lt;code&gt;&amp;lt;PackageName&amp;gt;_ROOT&lt;/code&gt; 환경 변수를 살펴보십시오 . 패키지 루트 변수는 스택으로 유지되므로 중첩 된 찾기 모듈 또는 구성 패키지에서 호출하면 부모의 찾기 모듈 또는 구성 패키지의 루트 경로가 현재 모듈 또는 패키지의 경로를 따라 검색됩니다. 즉, 검색 순서는 &lt;code&gt;&amp;lt;CurrentPackage&amp;gt;_ROOT&lt;/code&gt; , &lt;code&gt;ENV{&amp;lt;CurrentPackage&amp;gt;_ROOT}&lt;/code&gt; , &lt;code&gt;&amp;lt;ParentPackage&amp;gt;_ROOT&lt;/code&gt; , &lt;code&gt;ENV{&amp;lt;ParentPackage&amp;gt;_ROOT}&lt;/code&gt; 등입니다. &lt;code&gt;NO_PACKAGE_ROOT_PATH&lt;/code&gt; 가 전달되거나 &lt;a href=&quot;../variable/cmake_find_use_package_root_path#variable:CMAKE_FIND_USE_PACKAGE_ROOT_PATH&quot; id=&quot;index-0-variable:CMAKE_FIND_USE_PACKAGE_ROOT_PATH&quot;&gt; &lt;code&gt;CMAKE_FIND_USE_PACKAGE_ROOT_PATH&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;FALSE&lt;/code&gt; 로 설정하여 건너 뛸 수 있습니다 . 정책 &lt;a href=&quot;../policy/cmp0074#policy:CMP0074&quot; id=&quot;index-0-policy:CMP0074&quot;&gt; &lt;code&gt;CMP0074&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b31c93a143d375c1c52be3e439969375ba18588c" translate="yes" xml:space="preserve">
          <source>If calling both &lt;code&gt;find_package(PythonInterp)&lt;/code&gt; and &lt;code&gt;find_package(PythonLibs)&lt;/code&gt;, call &lt;code&gt;find_package(PythonInterp)&lt;/code&gt; first to get the currently active Python version by default with a consistent version of PYTHON_LIBRARIES.</source>
          <target state="translated">모두 호출하는 경우 &lt;code&gt;find_package(PythonInterp)&lt;/code&gt; 와 &lt;code&gt;find_package(PythonLibs)&lt;/code&gt; , 전화 &lt;code&gt;find_package(PythonInterp)&lt;/code&gt; 첫 PYTHON_LIBRARIES의 일관된 버전으로 기본적으로 현재 활성화 된 파이썬 버전을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fab332da51b5bc3f9f294a4e32e446bb209cb3e7" translate="yes" xml:space="preserve">
          <source>If compiling with MSVC, this variable can be set to &lt;code&gt;MT&lt;/code&gt; or &lt;code&gt;MD&lt;/code&gt; (the default) to enable searching a GTest build tree</source>
          <target state="translated">MSVC로 컴파일하는 경우이 변수를 &lt;code&gt;MT&lt;/code&gt; 또는 &lt;code&gt;MD&lt;/code&gt; (기본값)로 설정하여 GTest 빌드 트리를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77d41c846ee25d932a4b3832a4b3eb6ada1c88af" translate="yes" xml:space="preserve">
          <source>If component &lt;code&gt;Development&lt;/code&gt; is specified, it implies sub-components &lt;code&gt;Development.Module&lt;/code&gt; and &lt;code&gt;Development.Embed&lt;/code&gt;.</source>
          <target state="translated">구성 요소 &lt;code&gt;Development&lt;/code&gt; 가 지정되면 하위 구성 요소 &lt;code&gt;Development.Module&lt;/code&gt; 및 &lt;code&gt;Development.Embed&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="dbca474ee16576ce231953be33a7edeedf3a1746" translate="yes" xml:space="preserve">
          <source>If components &lt;code&gt;Interpreter&lt;/code&gt; and &lt;code&gt;Development&lt;/code&gt; (or one of its sub-components) are both specified, this module search only for interpreter with same platform architecture as the one defined by &lt;code&gt;CMake&lt;/code&gt; configuration. This constraint does not apply if only &lt;code&gt;Interpreter&lt;/code&gt; component is specified.</source>
          <target state="translated">구성 요소 &lt;code&gt;Interpreter&lt;/code&gt; 및 &lt;code&gt;Development&lt;/code&gt; (또는 하위 구성 요소 중 하나)가 모두 지정된 경우이 모듈은 &lt;code&gt;CMake&lt;/code&gt; 구성에 정의 된 것과 동일한 플랫폼 아키텍처를 가진 인터프리터 만 검색 합니다. &lt;code&gt;Interpreter&lt;/code&gt; 구성 요소 만 지정된 경우에는이 제약이 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f9c9240327accea955bd9cd5dbf01f37a734eb44" translate="yes" xml:space="preserve">
          <source>If components &lt;code&gt;Interpreter&lt;/code&gt; and &lt;code&gt;Development&lt;/code&gt; are both specified, this module search only for interpreter with same platform architecture as the one defined by &lt;code&gt;CMake&lt;/code&gt; configuration. This contraint does not apply if only &lt;code&gt;Interpreter&lt;/code&gt; component is specified.</source>
          <target state="translated">컴포넌트 &lt;code&gt;Interpreter&lt;/code&gt; 및 &lt;code&gt;Development&lt;/code&gt; 이 모두 지정된 경우이 모듈은 &lt;code&gt;CMake&lt;/code&gt; 구성으로 정의 된 것과 동일한 플랫폼 아키텍처를 가진 인터프리터 만 검색 합니다. &lt;code&gt;Interpreter&lt;/code&gt; 구성 요소 만 지정된 경우에는이 제약 조건이 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="23f33bf9f5310a8b358bb121e66d9ab06b833722" translate="yes" xml:space="preserve">
          <source>If enabled, generates a &lt;code&gt;compile_commands.json&lt;/code&gt; file containing the exact compiler calls for all translation units of the project in machine-readable form. The format of the JSON file looks like:</source>
          <target state="translated">사용 가능한 경우, 정확한 컴파일러 호출을 포함 하는 &lt;code&gt;compile_commands.json&lt;/code&gt; 파일을 시스템에서 읽을 수있는 형식으로 프로젝트의 모든 변환 단위에 대해 생성합니다 . JSON 파일의 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="40365f751e960380e567b1d5706111db75c88a28" translate="yes" xml:space="preserve">
          <source>If enabled, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator will generate only a single Xcode project file for the topmost &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command instead of generating one for every &lt;code&gt;project()&lt;/code&gt; command.</source>
          <target state="translated">활성화 된 경우 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 생성기는 모든 &lt;code&gt;project()&lt;/code&gt; 명령 마다 하나씩 생성하는 대신 최상위 &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령에 대해 단일 Xcode 프로젝트 파일 만 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="fb2c75d71e08090054aaa90c83b9d8ee337c6ac0" translate="yes" xml:space="preserve">
          <source>If enabled, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator will generate schema files. These are useful to invoke analyze, archive, build-for-testing and test actions from the command line.</source>
          <target state="translated">사용 가능한 경우 &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 생성기는 스키마 파일을 생성합니다. 명령 행에서 분석, 아카이브, 테스트 빌드 및 테스트 조치를 호출하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="867050304a7675288eaf8963cc56214d9f2847a0" translate="yes" xml:space="preserve">
          <source>If enabled, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator will generate only a single Xcode project file for the topmost &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command instead of generating one for every &lt;code&gt;project()&lt;/code&gt; command.</source>
          <target state="translated">활성화 된 경우 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 생성기는 모든 &lt;code&gt;project()&lt;/code&gt; 명령에 대해 하나를 생성하는 대신 최상위 &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령에 대해 단일 Xcode 프로젝트 파일 만 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="e9a4365232a4a7c505cff30323b768170bacd0a8" translate="yes" xml:space="preserve">
          <source>If enabled, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator will generate schema files. These are useful to invoke analyze, archive, build-for-testing and test actions from the command line.</source>
          <target state="translated">활성화하면 &lt;a href=&quot;https://cmake.org/cmake/help/v3.19/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt; &lt;code&gt;Xcode&lt;/code&gt; &lt;/a&gt; 생성기가 스키마 파일을 생성합니다. 이는 명령 줄에서 분석, 보관, 테스트 용 빌드 및 테스트 작업을 호출하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8d7d7880e4feab48c6741222440c3c0565a857f5" translate="yes" xml:space="preserve">
          <source>If enabled, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator will generate only a single Xcode project file for the topmost &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command instead of generating one for every &lt;code&gt;project()&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5467c7679909a35ea3e7d3bc7c18f359004103" translate="yes" xml:space="preserve">
          <source>If enabled, the &lt;a href=&quot;https://cmake.org/cmake/help/v3.20/generator/Xcode.html#generator:Xcode&quot; id=&quot;index-0-generator:Xcode&quot;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; generator will generate schema files. These are useful to invoke analyze, archive, build-for-testing and test actions from the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184b891eafb7658e9eb08bb9aaa68720d472cdf6" translate="yes" xml:space="preserve">
          <source>If enabled, the main build&amp;rsquo;s default ALL target will not depend on the test step. This can be a useful way of ensuring the test step is defined but only gets invoked when manually requested.</source>
          <target state="translated">활성화하면 기본 빌드의 기본 ALL 대상이 테스트 단계에 의존하지 않습니다. 이는 테스트 단계가 정의되었지만 수동 요청시에만 호출되도록하는 유용한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="fe34f0138ab67bac2c5b9512463a9e0d22ab71c0" translate="yes" xml:space="preserve">
          <source>If enabled, the main build&amp;rsquo;s default ALL target will not depend on the test step. This can be a useful way of ensuring the test step is defined but only gets invoked when manually requested. This may cause a step target to be created automatically for either the &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; step. See policy &lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-1-policy:CMP0114&quot;&gt;&lt;code&gt;CMP0114&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">활성화하면 기본 빌드의 기본 ALL 대상이 테스트 단계에 종속되지 않습니다. 이는 테스트 단계가 정의되었는지 확인하는 유용한 방법이 될 수 있지만 수동으로 요청한 경우에만 호출됩니다. 이로 인해 &lt;code&gt;install&lt;/code&gt; 또는 &lt;code&gt;build&lt;/code&gt; 단계에 대해 단계 대상이 자동으로 생성 될 수 있습니다 . 정책 &lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-1-policy:CMP0114&quot;&gt; &lt;code&gt;CMP0114&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a2481f234a6af724d900c685d633e80ccd1d3dc7" translate="yes" xml:space="preserve">
          <source>If enabled, the main build's default ALL target will not depend on the test step. This can be a useful way of ensuring the test step is defined but only gets invoked when manually requested. This may cause a step target to be created automatically for either the &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; step. See policy &lt;a href=&quot;../policy/cmp0114#policy:CMP0114&quot; id=&quot;index-1-policy:CMP0114&quot;&gt;&lt;code&gt;CMP0114&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f61f4d033b49a768ae71cfe043ec99e358b69f" translate="yes" xml:space="preserve">
          <source>If enabled, this gives the custom step direct access to the terminal if possible.</source>
          <target state="translated">활성화 된 경우 가능하면 사용자 지정 단계에서 터미널에 직접 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26201c8e30d3cbdebd02af3699dc887019c7afac" translate="yes" xml:space="preserve">
          <source>If enabling &lt;code&gt;ASM&lt;/code&gt;, enable it last so that CMake can check whether compilers for other languages like &lt;code&gt;C&lt;/code&gt; work for assembly too.</source>
          <target state="translated">가능하면 &lt;code&gt;ASM&lt;/code&gt; 을 , CMake 같은 다른 언어를위한 컴파일러 여부를 확인할 수 있습니다 지난 그래서 가능 &lt;code&gt;C&lt;/code&gt; 의 작업 조립도에 대해.</target>
        </trans-unit>
        <trans-unit id="7abbffa540742c7cf4fa1ebe0e74ebfd81b48ba7" translate="yes" xml:space="preserve">
          <source>If enabling &lt;code&gt;ASM&lt;/code&gt;, list it last so that CMake can check whether compilers for other languages like &lt;code&gt;C&lt;/code&gt; work for assembly too.</source>
          <target state="translated">&lt;code&gt;ASM&lt;/code&gt; 을 활성화 한 경우 CMake가 &lt;code&gt;C&lt;/code&gt; 와 같은 다른 언어의 컴파일러 가 어셈블리에서도 작동 하는지 확인할 수 있도록 마지막으로 나열하십시오 .</target>
        </trans-unit>
        <trans-unit id="1454d9f78cfb0a64ae2e61b388f844084cb6d4a9" translate="yes" xml:space="preserve">
          <source>If false, do not try to link to OpenAL</source>
          <target state="translated">거짓이면 OpenAL에 연결하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3cc02da9837a8f08b40d058d7d5eb6baf210fb68" translate="yes" xml:space="preserve">
          <source>If false, do not try to use GIF.</source>
          <target state="translated">false 인 경우 GIF를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3ea9918af87118318049529c8bdb3158bb864037" translate="yes" xml:space="preserve">
          <source>If false, do not try to use JPEG.</source>
          <target state="translated">false 인 경우 JPEG를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="7e6a05720011b912a1c5f9e7333daa111ad94d7d" translate="yes" xml:space="preserve">
          <source>If false, do not try to use PNG.</source>
          <target state="translated">false 인 경우 PNG를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="25876edcd37fcd6d58f200b27a90ab322adb7dcc" translate="yes" xml:space="preserve">
          <source>If false, don&amp;rsquo;t try to use Qt 4.</source>
          <target state="translated">False이면 Qt 4를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="05ff46dab8de8348fb8ae91792efa4efbdfbd4e1" translate="yes" xml:space="preserve">
          <source>If false, don&amp;rsquo;t try to use Qt 4. This variable is for compatibility only.</source>
          <target state="translated">거짓 인 경우 Qt 4를 사용하지 마십시오.이 변수는 호환성을 위해서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c937fd47bf1974552f241cf782ed4fef913739e" translate="yes" xml:space="preserve">
          <source>If false, don&amp;rsquo;t try to use Qt. This variable is for compatibility only.</source>
          <target state="translated">False이면 Qt를 사용하지 마십시오. 이 변수는 호환성을 위해서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="db85476ac0a8755989028948f7a87dc4bc2e674f" translate="yes" xml:space="preserve">
          <source>If false, don't try to use Qt 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968d33eb92b192bed10b3b2028318b3cb6dfbbde" translate="yes" xml:space="preserve">
          <source>If false, don't try to use Qt 4. This variable is for compatibility only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654b0b302f0815f4f33934a449a8c6ca5304481d" translate="yes" xml:space="preserve">
          <source>If false, don't try to use Qt. This variable is for compatibility only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b28576175ccb25f038fe5a0fef27b1a21ed678" translate="yes" xml:space="preserve">
          <source>If flex is found on the system, the module provides the macro:</source>
          <target state="translated">시스템에서 flex가 발견되면 모듈은 매크로를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="34048faf9083cbcc1bbe0d5f7656256ea69a678d" translate="yes" xml:space="preserve">
          <source>If it is not set, or is set to a non-integer value, a sensible default limit is used. If the recursion limit is reached, the script terminates immediately with a fatal error.</source>
          <target state="translated">설정되지 않았거나 정수가 아닌 값으로 설정된 경우 적절한 기본 제한이 사용됩니다. 재귀 제한에 도달하면 치명적인 오류와 함께 스크립트가 즉시 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="a9f6ad21f4bff30dad19b272775d6969dac0e7b3" translate="yes" xml:space="preserve">
          <source>If left out the &lt;code&gt;all&lt;/code&gt; target is built.</source>
          <target state="translated">생략하면 &lt;code&gt;all&lt;/code&gt; 대상이 빌드됩니다.</target>
        </trans-unit>
        <trans-unit id="5442bb15452a712ecfb89dd0bc8d4368d66e1ab9" translate="yes" xml:space="preserve">
          <source>If library type is not specified, &lt;code&gt;MODULE&lt;/code&gt; is assumed.</source>
          <target state="translated">라이브러리 유형을 지정하지 않으면 &lt;code&gt;MODULE&lt;/code&gt; 이 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="aeba8e375f0c783f9c209104440b7f2423c3045f" translate="yes" xml:space="preserve">
          <source>If mangling for a category is not known, its macro is left undefined. All macros require raw names in both lower case and upper case.</source>
          <target state="translated">범주에 대한 조작을 알 수없는 경우 매크로가 정의되지 않은 상태로 남아 있습니다. 모든 매크로에는 소문자와 대문자 모두에서 원시 이름이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="4e9f60ab0766159d96adfcbc5c7875194ce06d0f" translate="yes" xml:space="preserve">
          <source>If many external projects should have the same set of step targets, setting a directory property may be more convenient. The &lt;code&gt;build&lt;/code&gt; step target could be created automatically by setting the &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; directory property before creating the external projects with &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-10-command:externalproject_add&quot;&gt;&lt;code&gt;ExternalProject_Add()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">많은 외부 프로젝트에 동일한 단계 대상 집합이 있어야하는 경우 디렉터리 속성을 설정하는 것이 더 편리 할 수 ​​있습니다. &lt;code&gt;build&lt;/code&gt; 단계의 목표는 설정에 의해 자동으로 생성 할 수 &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; 의 와 외부 프로젝트를 생성하기 전에 디렉토리 속성을 &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-10-command:externalproject_add&quot;&gt; &lt;code&gt;ExternalProject_Add()&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="81fd05cbc2865f3191f4c14fc220507bd602549d" translate="yes" xml:space="preserve">
          <source>If many external projects should have the same set of step targets, setting a directory property may be more convenient. The &lt;code&gt;build&lt;/code&gt; step target could be created automatically by setting the &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; directory property before creating the external projects with &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-6-command:externalproject_add&quot;&gt;&lt;code&gt;ExternalProject_Add()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">많은 외부 프로젝트에 동일한 단계 대상 세트가 있어야하는 경우 디렉토리 특성을 설정하는 것이 더 편리 할 수 ​​있습니다. &lt;code&gt;build&lt;/code&gt; 단계의 목표는 설정에 의해 자동으로 생성 할 수 &lt;code&gt;EP_STEP_TARGETS&lt;/code&gt; 의 와 외부 프로젝트를 생성하기 전에 디렉토리 속성을 &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-6-command:externalproject_add&quot;&gt; &lt;code&gt;ExternalProject_Add()&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="557efab8af7815cb81652f809b79455810cd6fcc" translate="yes" xml:space="preserve">
          <source>If more than one &lt;code&gt;OUTPUT_*&lt;/code&gt; or &lt;code&gt;ERROR_*&lt;/code&gt; option is given for the same pipe the precedence is not specified. If no &lt;code&gt;OUTPUT_*&lt;/code&gt; or &lt;code&gt;ERROR_*&lt;/code&gt; options are given the output will be shared with the corresponding pipes of the CMake process itself.</source>
          <target state="translated">동일한 파이프에 대해 둘 이상의 &lt;code&gt;OUTPUT_*&lt;/code&gt; 또는 &lt;code&gt;ERROR_*&lt;/code&gt; 옵션이 제공된 경우 우선 순위가 지정되지 않습니다. NO이면 &lt;code&gt;OUTPUT_*&lt;/code&gt; 또는 &lt;code&gt;ERROR_*&lt;/code&gt; 옵션 출력이 CMake 프로세스 자체의 대응 파이프와 공유한다 주어진다.</target>
        </trans-unit>
        <trans-unit id="1bf10a4079d54118f50926664fe4d801b72e746b" translate="yes" xml:space="preserve">
          <source>If more than one artifact is specified, it is the user&amp;rsquo;s responsibility to ensure the consistency of the various artifacts.</source>
          <target state="translated">둘 이상의 아티팩트가 지정된 경우 다양한 아티팩트의 일관성을 보장하는 것은 사용자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="1e90db275484de60cfaf9281c80efbb87344c206" translate="yes" xml:space="preserve">
          <source>If more than one artifact is specified, it is the user's responsibility to ensure the consistency of the various artifacts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7929c846614bb3c192a2fe8907908cc5e956f0" translate="yes" xml:space="preserve">
          <source>If more than one library was found, all of them should be included in these variables (see the &lt;a href=&quot;#standard-variable-names&quot;&gt;Standard Variable Names&lt;/a&gt; section for more information).</source>
          <target state="translated">둘 이상의 라이브러리가 발견되면 모든 변수가이 변수에 포함되어야합니다 (자세한 내용은 &lt;a href=&quot;#standard-variable-names&quot;&gt;표준 변수 이름&lt;/a&gt; 섹션 참조).</target>
        </trans-unit>
        <trans-unit id="2b7d1e9bc9224820618f618eb5f12dad67320006" translate="yes" xml:space="preserve">
          <source>If multiple tests specify the same resource lock, they are guaranteed not to run concurrently.</source>
          <target state="translated">여러 테스트에서 동일한 리소스 잠금을 지정하면 동시에 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="738e91e7a3f68b153b759e799475035fdec70559" translate="yes" xml:space="preserve">
          <source>If neither &lt;a href=&quot;#prop_tgt:JOB_POOL_PRECOMPILE_HEADER&quot; id=&quot;index-0-prop_tgt:JOB_POOL_PRECOMPILE_HEADER&quot;&gt;&lt;code&gt;JOB_POOL_PRECOMPILE_HEADER&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;../variable/cmake_job_pool_precompile_header#variable:CMAKE_JOB_POOL_PRECOMPILE_HEADER&quot; id=&quot;index-1-variable:CMAKE_JOB_POOL_PRECOMPILE_HEADER&quot;&gt;&lt;code&gt;CMAKE_JOB_POOL_PRECOMPILE_HEADER&lt;/code&gt;&lt;/a&gt; are set then &lt;a href=&quot;job_pool_compile#prop_tgt:JOB_POOL_COMPILE&quot; id=&quot;index-0-prop_tgt:JOB_POOL_COMPILE&quot;&gt;&lt;code&gt;JOB_POOL_COMPILE&lt;/code&gt;&lt;/a&gt; will be used for this task.</source>
          <target state="translated">어느 경우 &lt;a href=&quot;#prop_tgt:JOB_POOL_PRECOMPILE_HEADER&quot; id=&quot;index-0-prop_tgt:JOB_POOL_PRECOMPILE_HEADER&quot;&gt; &lt;code&gt;JOB_POOL_PRECOMPILE_HEADER&lt;/code&gt; &lt;/a&gt; 도 &lt;a href=&quot;../variable/cmake_job_pool_precompile_header#variable:CMAKE_JOB_POOL_PRECOMPILE_HEADER&quot; id=&quot;index-1-variable:CMAKE_JOB_POOL_PRECOMPILE_HEADER&quot;&gt; &lt;code&gt;CMAKE_JOB_POOL_PRECOMPILE_HEADER&lt;/code&gt; 이&lt;/a&gt; 다음 설정 &lt;a href=&quot;job_pool_compile#prop_tgt:JOB_POOL_COMPILE&quot; id=&quot;index-0-prop_tgt:JOB_POOL_COMPILE&quot;&gt; &lt;code&gt;JOB_POOL_COMPILE&lt;/code&gt; 는&lt;/a&gt; 이 작업에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1ec764198dd1c6663dfba4bd8e0bdc9f8b206129" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;NETRC&lt;/code&gt; option is given CMake will check variables &lt;code&gt;CMAKE_NETRC&lt;/code&gt; and &lt;code&gt;CMAKE_NETRC_FILE&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;NETRC&lt;/code&gt; 옵션이 제공 되지 않으면 CMake는 각각 &lt;code&gt;CMAKE_NETRC&lt;/code&gt; 및 &lt;code&gt;CMAKE_NETRC_FILE&lt;/code&gt; 변수를 검사합니다 .</target>
        </trans-unit>
        <trans-unit id="d8d3c352b14aac248dc3a1c47bd89084829f5acb" translate="yes" xml:space="preserve">
          <source>If neither of the above conditions are met, it is assumed that the command name is a program to be found on the &lt;code&gt;PATH&lt;/code&gt; at build time.</source>
          <target state="translated">위의 조건 중 어느 것도 충족되지 않는 경우 명령 이름은 빌드시 &lt;code&gt;PATH&lt;/code&gt; 에서 찾을 수있는 프로그램이라고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="72bbd38d1eb0d3712acbba4fd016c2da07213906" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;COMPONENTS&lt;/code&gt; are specified, &lt;code&gt;Interpreter&lt;/code&gt; is assumed.</source>
          <target state="translated">&lt;code&gt;COMPONENTS&lt;/code&gt; 가 지정 되지 않은 경우 &lt;code&gt;Interpreter&lt;/code&gt; 로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="e7bed97e422d1a916929ce04438590b9a8a9859e" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;COMPONENTS&lt;/code&gt; is specified, &lt;code&gt;Interpreter&lt;/code&gt; is assumed.</source>
          <target state="translated">&lt;code&gt;COMPONENTS&lt;/code&gt; 를 지정 하지 않으면 &lt;code&gt;Interpreter&lt;/code&gt; 로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="326df0ed4b9d0688a5041a3173717fc7cdfb9152" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;PREFIX&lt;/code&gt;, &lt;code&gt;EP_PREFIX&lt;/code&gt;, or &lt;code&gt;EP_BASE&lt;/code&gt; is specified, then the default is to set &lt;code&gt;PREFIX&lt;/code&gt; to &lt;code&gt;&amp;lt;name&amp;gt;-prefix&lt;/code&gt;. Relative paths are interpreted with respect to &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt;&lt;/a&gt; at the point where &lt;code&gt;ExternalProject_Add()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;PREFIX&lt;/code&gt; , &lt;code&gt;EP_PREFIX&lt;/code&gt; 또는 &lt;code&gt;EP_BASE&lt;/code&gt; 가 지정 되지 않은 경우 기본값은 &lt;code&gt;PREFIX&lt;/code&gt; 를 &lt;code&gt;&amp;lt;name&amp;gt;-prefix&lt;/code&gt; 로 설정하는 것 입니다. 상대 경로는 &lt;code&gt;ExternalProject_Add()&lt;/code&gt; 가 호출 되는 지점에서 &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt; &lt;/a&gt; 과 관련하여 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="9e4e8532d2c76f3d90ea05988211445b1992dd4c" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;VERSION&lt;/code&gt; is given, the &lt;a href=&quot;../variable/project_version#variable:PROJECT_VERSION&quot; id=&quot;index-0-variable:PROJECT_VERSION&quot;&gt;&lt;code&gt;PROJECT_VERSION&lt;/code&gt;&lt;/a&gt; variable is used. If this hasn&amp;rsquo;t been set, it errors out.</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; 이 제공 되지 않으면 &lt;a href=&quot;../variable/project_version#variable:PROJECT_VERSION&quot; id=&quot;index-0-variable:PROJECT_VERSION&quot;&gt; &lt;code&gt;PROJECT_VERSION&lt;/code&gt; &lt;/a&gt; 변수가 사용됩니다. 이것이 설정되지 않으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c1911466a71cf29f4f1f5f790e59e1bc1b1da338" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;VERSION&lt;/code&gt; is given, the &lt;a href=&quot;../variable/project_version#variable:PROJECT_VERSION&quot; id=&quot;index-0-variable:PROJECT_VERSION&quot;&gt;&lt;code&gt;PROJECT_VERSION&lt;/code&gt;&lt;/a&gt; variable is used. If this hasn't been set, it errors out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45101166804a3c8302449d2b26279989369cfd35" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;[version]&lt;/code&gt; and/or component list is given to a recursive invocation inside a find-module, the corresponding arguments are forwarded automatically from the outer call (including the &lt;code&gt;EXACT&lt;/code&gt; flag for &lt;code&gt;[version]&lt;/code&gt;). Version support is currently provided only on a package-by-package basis (see the &lt;a href=&quot;#version-selection&quot;&gt;Version Selection&lt;/a&gt; section below). When a version range is specified but the package is only designed to expect a single version, the package will ignore the upper end point of the range and only take the single version at the lower end of the range into account.</source>
          <target state="translated">find-module 내부의 재귀 호출에 &lt;code&gt;[version]&lt;/code&gt; 및 / 또는 구성 요소 목록이 제공 되지 않으면 해당 인수가 외부 호출에서 자동으로 전달됩니다 ( &lt;code&gt;[version]&lt;/code&gt; 에 대한 &lt;code&gt;EXACT&lt;/code&gt; 플래그 포함 ). 버전 지원은 현재 패키지 단위로만 제공됩니다 (아래 &lt;a href=&quot;#version-selection&quot;&gt;버전 선택&lt;/a&gt; 섹션 참조). 버전 범위가 지정되었지만 패키지가 단일 버전 만 예상하도록 설계된 경우 패키지는 범위의 상단 끝점을 무시하고 범위의 하단에있는 단일 버전 만 고려합니다.</target>
        </trans-unit>
        <trans-unit id="c2f698832628ef5f8c4ead002990c5e31959a51e" translate="yes" xml:space="preserve">
          <source>If no argument is given after &lt;code&gt;ENV{&amp;lt;variable&amp;gt;}&lt;/code&gt; or if &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; is an empty string, then this command will clear any existing value of the environment variable.</source>
          <target state="translated">&lt;code&gt;ENV{&amp;lt;variable&amp;gt;}&lt;/code&gt; 뒤에 인수가 제공되지 않거나 &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; 가 빈 문자열 인 경우이 명령은 환경 변수의 기존 값을 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="f67727e80d8df0633da95ebe9836eda8c2e1d01f" translate="yes" xml:space="preserve">
          <source>If no arguments given, &lt;code&gt;include_guard&lt;/code&gt; has the same scope as a variable, meaning that the include guard effect is isolated by the most recent function scope or current directory if no inner function scopes exist. In this case the command behavior is the same as:</source>
          <target state="translated">인수가 제공되지 않으면 &lt;code&gt;include_guard&lt;/code&gt; 는 변수와 동일한 범위를 갖습니다. 즉, 내부 함수 범위가 존재하지 않으면 포함 가드 효과가 최신 함수 범위 또는 현재 디렉토리에 의해 분리됩니다. 이 경우 명령 동작은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e0ddeddd7faedd568ef8d5b7b2c671f916f2220d" translate="yes" xml:space="preserve">
          <source>If no component is specified in the &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-1-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; call, then it only searches for the ImageMagick executable directory. This code defines the following variables:</source>
          <target state="translated">&lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-1-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; 호출 에 구성 요소가 지정되지 않은 경우 ImageMagick 실행 파일 디렉토리 만 검색합니다. 이 코드는 다음 변수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="429bbff986c1aecd35eada0718b113ebdb0a04ec" translate="yes" xml:space="preserve">
          <source>If no explicit &lt;a href=&quot;#prop_tgt:UNITY_BUILD_MODE&quot; id=&quot;index-0-prop_tgt:UNITY_BUILD_MODE&quot;&gt;&lt;code&gt;UNITY_BUILD_MODE&lt;/code&gt;&lt;/a&gt; has been specified, CMake will default to &lt;code&gt;BATCH&lt;/code&gt;.</source>
          <target state="translated">명시 적 &lt;a href=&quot;#prop_tgt:UNITY_BUILD_MODE&quot; id=&quot;index-0-prop_tgt:UNITY_BUILD_MODE&quot;&gt; &lt;code&gt;UNITY_BUILD_MODE&lt;/code&gt; &lt;/a&gt; 가 지정 되지 않은 경우 CMake는 기본적으로 &lt;code&gt;BATCH&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="9f96038217144684da1eb206e8c7a554ea9017ad" translate="yes" xml:space="preserve">
          <source>If no explicit &lt;a href=&quot;unity_build_mode#prop_tgt:UNITY_BUILD_MODE&quot; id=&quot;index-1-prop_tgt:UNITY_BUILD_MODE&quot;&gt;&lt;code&gt;UNITY_BUILD_MODE&lt;/code&gt;&lt;/a&gt; has been specified, CMake will default to &lt;code&gt;BATCH&lt;/code&gt;.</source>
          <target state="translated">명시 적 &lt;a href=&quot;unity_build_mode#prop_tgt:UNITY_BUILD_MODE&quot; id=&quot;index-1-prop_tgt:UNITY_BUILD_MODE&quot;&gt; &lt;code&gt;UNITY_BUILD_MODE&lt;/code&gt; &lt;/a&gt; 가 지정 되지 않은 경우 CMake는 기본적으로 &lt;code&gt;BATCH&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="5cee43e793c33b8fc5ce96b3ab373d44b41a3a7f" translate="yes" xml:space="preserve">
          <source>If no explicit &lt;code&gt;&amp;lt;format string&amp;gt;&lt;/code&gt; is given it will default to:</source>
          <target state="translated">명시적인 &lt;code&gt;&amp;lt;format string&amp;gt;&lt;/code&gt; 이 없으면 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="674cf2c8cb48e088b2e72e10862aafb55095c771" translate="yes" xml:space="preserve">
          <source>If no explicit &lt;code&gt;&amp;lt;format_string&amp;gt;&lt;/code&gt; is given, it will default to:</source>
          <target state="translated">명시 적 &lt;code&gt;&amp;lt;format_string&amp;gt;&lt;/code&gt; 이 지정 되지 않은 경우 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="07cfde79fa51309df3c1c8e13832b49cd36f822c" translate="yes" xml:space="preserve">
          <source>If no tests were found, the default behavior of CTest is to always log an error message but to return an error code in script mode only. This option unifies the behavior of CTest by either returning an error code if no tests were found or by ignoring it.</source>
          <target state="translated">테스트가 발견되지 않은 경우 CTest의 기본 동작은 항상 오류 메시지를 기록하지만 스크립트 모드에서만 오류 코드를 반환하는 것입니다. 이 옵션은 테스트를 찾을 수없는 경우 오류 코드를 반환하거나 무시하여 CTest의 동작을 통합합니다.</target>
        </trans-unit>
        <trans-unit id="b505dd517fb85fe7ea74ba5312f273fa9f6ad9c8" translate="yes" xml:space="preserve">
          <source>If no value is set and if a &lt;code&gt;.int&lt;/code&gt; file is added as a source file to the executable target it will be treated as an &lt;code&gt;Integrity Application&lt;/code&gt;.</source>
          <target state="translated">값을 설정하지 않고 &lt;code&gt;.int&lt;/code&gt; 파일을 실행 파일에 소스 파일로 추가하면 &lt;code&gt;Integrity Application&lt;/code&gt; 으로 취급됩니다 .</target>
        </trans-unit>
        <trans-unit id="d19f4a86a17f0ec822a40563125dd7743176e5e8" translate="yes" xml:space="preserve">
          <source>If no variable name is given, removes exactly one element. Otherwise, assign the first element&amp;rsquo;s value to the given variable and removes it, up to the last variable name given.</source>
          <target state="translated">변수 이름이 없으면 정확히 하나의 요소를 제거합니다. 그렇지 않으면 첫 번째 요소의 값을 주어진 변수에 할당하고 주어진 마지막 변수 이름까지 제거합니다.</target>
        </trans-unit>
        <trans-unit id="f443f9f396a06ee7fd86bc8d99be912f167db686" translate="yes" xml:space="preserve">
          <source>If no variable name is given, removes exactly one element. Otherwise, assign the first element's value to the given variable and removes it, up to the last variable name given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed74f4234a3180de981150cab53a4bf64ae0456" translate="yes" xml:space="preserve">
          <source>If no variable name is given, removes exactly one element. Otherwise, assign the last element&amp;rsquo;s value to the given variable and removes it, up to the last variable name given.</source>
          <target state="translated">변수 이름이 없으면 정확히 하나의 요소를 제거합니다. 그렇지 않으면 마지막 요소의 값을 주어진 변수에 할당하고 주어진 마지막 변수 이름까지 제거합니다.</target>
        </trans-unit>
        <trans-unit id="db8966b58e54ca9a6a2970d842515fb2a5ff9b20" translate="yes" xml:space="preserve">
          <source>If no variable name is given, removes exactly one element. Otherwise, assign the last element's value to the given variable and removes it, up to the last variable name given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de994325bf4c3507d6337d773fbe378097afb001" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;FALSE&lt;/code&gt;, use of deprecated functionality will issue warnings. If this variable is not set, CMake behaves as if it were set to &lt;code&gt;TRUE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FALSE&lt;/code&gt; 가 아닌 경우 , 더 이상 사용되지 않는 기능을 사용하면 경고가 발행됩니다. 이 변수를 설정하지 않으면 CMake는 마치 &lt;code&gt;TRUE&lt;/code&gt; 로 설정된 것처럼 동작 합니다 .</target>
        </trans-unit>
        <trans-unit id="df40a7cf08e816ddb19eced6d55adee232926119" translate="yes" xml:space="preserve">
          <source>If not defined, search for shared libraries and static libraries in that order.</source>
          <target state="translated">정의되지 않은 경우 공유 라이브러리 및 정적 라이브러리를 순서대로 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="da3f1097a123dc3a947e2dee06fc1440a9acfad4" translate="yes" xml:space="preserve">
          <source>If not set explicitly the value is initialized by the &lt;code&gt;CMAKE_MSVCIDE_RUN_PATH&lt;/code&gt; environment variable, if set, and otherwise left empty.</source>
          <target state="translated">명시 적으로 설정하지 않으면 값은 &lt;code&gt;CMAKE_MSVCIDE_RUN_PATH&lt;/code&gt; 환경 변수 (설정된 경우)에 의해 초기화 되고 그렇지 않으면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="23d25baa2dbf6fc969bf8dbcecf42019c2960778" translate="yes" xml:space="preserve">
          <source>If not set explicitly the value is initialized by the &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; environment variable, if set, and otherwise computed based on the host platform.</source>
          <target state="translated">명시 적으로 설정하지 않으면 값은 &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; 환경 변수 (설정된 경우)에 의해 초기화되고 그렇지 않으면 호스트 플랫폼을 기반으로 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="ade365e49df034b291a4e6dd2b70207c6474b2c2" translate="yes" xml:space="preserve">
          <source>If not set explicitly the value is initialized by the &lt;code&gt;SDKROOT&lt;/code&gt; environment variable, if set, and otherwise computed based on the &lt;a href=&quot;cmake_osx_deployment_target#variable:CMAKE_OSX_DEPLOYMENT_TARGET&quot; id=&quot;index-0-variable:CMAKE_OSX_DEPLOYMENT_TARGET&quot;&gt;&lt;code&gt;CMAKE_OSX_DEPLOYMENT_TARGET&lt;/code&gt;&lt;/a&gt; or the host platform.</source>
          <target state="translated">명시 적으로 설정하지 않으면 값은 &lt;code&gt;SDKROOT&lt;/code&gt; 환경 변수에 의해 초기화되고 ( 설정된 경우) &lt;a href=&quot;cmake_osx_deployment_target#variable:CMAKE_OSX_DEPLOYMENT_TARGET&quot; id=&quot;index-0-variable:CMAKE_OSX_DEPLOYMENT_TARGET&quot;&gt; &lt;code&gt;CMAKE_OSX_DEPLOYMENT_TARGET&lt;/code&gt; &lt;/a&gt; 또는 호스트 플랫폼을 기반으로 계산 됩니다.</target>
        </trans-unit>
        <trans-unit id="3b350555ffbfe92a276b57345b8d1dad228c8d82" translate="yes" xml:space="preserve">
          <source>If not set, CMake treats this property as &lt;code&gt;OFF&lt;/code&gt; by default. CMake generators that are capable of organizing into a hierarchy of folders use the values of the &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-1-prop_tgt:FOLDER&quot;&gt;&lt;code&gt;FOLDER&lt;/code&gt;&lt;/a&gt; target property to name those folders. See also the documentation for the &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-2-prop_tgt:FOLDER&quot;&gt;&lt;code&gt;FOLDER&lt;/code&gt;&lt;/a&gt; target property.</source>
          <target state="translated">설정하지 않으면 CMake는이 속성 을 기본적 으로 &lt;code&gt;OFF&lt;/code&gt; 로 취급합니다 . 폴더 계층 구조로 구성 할 수있는 CMake 생성기는 &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-1-prop_tgt:FOLDER&quot;&gt; &lt;code&gt;FOLDER&lt;/code&gt; &lt;/a&gt; 대상 특성 의 값을 사용하여 해당 폴더의 이름을 지정합니다. &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-2-prop_tgt:FOLDER&quot;&gt; &lt;code&gt;FOLDER&lt;/code&gt; &lt;/a&gt; 대상 속성에 대한 설명서도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ed7ab5ab3331c15c2843a4dfc40b87182a2f739" translate="yes" xml:space="preserve">
          <source>If not set, CMake uses &quot;CMakePredefinedTargets&quot; as a default value for this property. Targets such as INSTALL, PACKAGE and RUN_TESTS will be organized into this FOLDER. See also the documentation for the &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-0-prop_tgt:FOLDER&quot;&gt;&lt;code&gt;FOLDER&lt;/code&gt;&lt;/a&gt; target property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb74e6ff4bb1be8aa0a1ebb606bec384f11e8742" translate="yes" xml:space="preserve">
          <source>If not set, CMake uses &amp;ldquo;CMakePredefinedTargets&amp;rdquo; as a default value for this property. Targets such as INSTALL, PACKAGE and RUN_TESTS will be organized into this FOLDER. See also the documentation for the &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-0-prop_tgt:FOLDER&quot;&gt;&lt;code&gt;FOLDER&lt;/code&gt;&lt;/a&gt; target property.</source>
          <target state="translated">설정하지 않으면 CMake는이 속성의 기본값으로 &quot;CMakePredefinedTargets&quot;를 사용합니다. INSTALL, PACKAGE 및 RUN_TESTS와 같은 대상이이 FOLDER로 구성됩니다. &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-0-prop_tgt:FOLDER&quot;&gt; &lt;code&gt;FOLDER&lt;/code&gt; &lt;/a&gt; 대상 속성에 대한 설명서도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9193e511f15947f1228cccdef8e3ebd91a751c55" translate="yes" xml:space="preserve">
          <source>If not set, CMake uses the &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-1-prop_tgt:FOLDER&quot;&gt;&lt;code&gt;FOLDER&lt;/code&gt;&lt;/a&gt; property of the parent target as a default value for this property. See also the documentation for the &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-2-prop_tgt:FOLDER&quot;&gt;&lt;code&gt;FOLDER&lt;/code&gt;&lt;/a&gt; target property and the &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt;&lt;code&gt;AUTOMOC&lt;/code&gt;&lt;/a&gt; target property.</source>
          <target state="translated">설정하지 않으면 CMake는 상위 대상 의 &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-1-prop_tgt:FOLDER&quot;&gt; &lt;code&gt;FOLDER&lt;/code&gt; &lt;/a&gt; 속성을이 속성의 기본값으로 사용합니다. &lt;a href=&quot;../prop_tgt/folder#prop_tgt:FOLDER&quot; id=&quot;index-2-prop_tgt:FOLDER&quot;&gt; &lt;code&gt;FOLDER&lt;/code&gt; &lt;/a&gt; 대상 속성 및 &lt;a href=&quot;../prop_tgt/automoc#prop_tgt:AUTOMOC&quot; id=&quot;index-1-prop_tgt:AUTOMOC&quot;&gt; &lt;code&gt;AUTOMOC&lt;/code&gt; &lt;/a&gt; 대상 속성에 대한 설명서도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3cc41c05c162d52384cb22831f16a00e553508d" translate="yes" xml:space="preserve">
          <source>If not set, the string &quot;&lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; packages&quot; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc0b8dd8779fda12d439f8b008a02d0f194d0ae" translate="yes" xml:space="preserve">
          <source>If not set, the string &amp;ldquo;&lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; packages&amp;rdquo; is used.</source>
          <target state="translated">설정하지 않으면 문자열 &quot; &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; packages&quot;가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c4c910b932becb0586cd772435b7784cb48528dd" translate="yes" xml:space="preserve">
          <source>If not set, this property uses the value of the &lt;a href=&quot;../variable/cmake_job_pools#variable:CMAKE_JOB_POOLS&quot; id=&quot;index-0-variable:CMAKE_JOB_POOLS&quot;&gt;&lt;code&gt;CMAKE_JOB_POOLS&lt;/code&gt;&lt;/a&gt; variable.</source>
          <target state="translated">설정되지 않은 경우이 특성은 &lt;a href=&quot;../variable/cmake_job_pools#variable:CMAKE_JOB_POOLS&quot; id=&quot;index-0-variable:CMAKE_JOB_POOLS&quot;&gt; &lt;code&gt;CMAKE_JOB_POOLS&lt;/code&gt; &lt;/a&gt; 변수 의 값을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="fe79476e1a8a00d4d5090047776246f0935cb077" translate="yes" xml:space="preserve">
          <source>If not specified, CMake checks the &lt;a href=&quot;../envvar/cmake_generator#envvar:CMAKE_GENERATOR&quot; id=&quot;index-0-envvar:CMAKE_GENERATOR&quot;&gt;&lt;code&gt;CMAKE_GENERATOR&lt;/code&gt;&lt;/a&gt; environment variable and otherwise falls back to a builtin default selection.</source>
          <target state="translated">지정하지 않으면 CMake는 &lt;a href=&quot;../envvar/cmake_generator#envvar:CMAKE_GENERATOR&quot; id=&quot;index-0-envvar:CMAKE_GENERATOR&quot;&gt; &lt;code&gt;CMAKE_GENERATOR&lt;/code&gt; &lt;/a&gt; 환경 변수를 확인하고 그렇지 않으면 기본 제공 기본 선택으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="0383a3936dbe01c440196142e58b24182954b1d4" translate="yes" xml:space="preserve">
          <source>If not specified, the default will be &lt;em&gt;false&lt;/em&gt; if using a NDK version that provides the unified headers and &lt;em&gt;true&lt;/em&gt; otherwise.</source>
          <target state="translated">지정하지 않으면 통합 헤더를 제공하는 NDK 버전을 사용하는 경우 기본값은 &lt;em&gt;false&lt;/em&gt; 이고 &lt;em&gt;그렇지&lt;/em&gt; 않으면 &lt;em&gt;true&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8fa2aa5cc02c205b99dc76d79bc8d459f575bffb" translate="yes" xml:space="preserve">
          <source>If not specified, the default will be a value that selects the latest available GCC toolchain.</source>
          <target state="translated">지정하지 않으면 기본값은 사용 가능한 최신 GCC 툴체인을 선택하는 값입니다.</target>
        </trans-unit>
        <trans-unit id="b069f3c1816aa6ea2d4b779547d8e21dc098d457" translate="yes" xml:space="preserve">
          <source>If one or more package in this categories has not been found, CMake will abort when calling &lt;a href=&quot;#command:feature_summary&quot; id=&quot;index-0-command:feature_summary&quot;&gt;&lt;code&gt;feature_summary()&lt;/code&gt;&lt;/a&gt; with the &amp;lsquo;FATAL_ON_MISSING_REQUIRED_PACKAGES&amp;rsquo; option enabled.</source>
          <target state="translated">이 범주에서 하나 이상의 패키지를 찾지 못한 경우 CMFA는 'FATAL_ON_MISSING_REQUIRED_PACKAGES'옵션을 활성화하여 &lt;a href=&quot;#command:feature_summary&quot; id=&quot;index-0-command:feature_summary&quot;&gt; &lt;code&gt;feature_summary()&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 중단됩니다 .</target>
        </trans-unit>
        <trans-unit id="819e487e728e03cd2f000b7fd8b97664a7a97bbc" translate="yes" xml:space="preserve">
          <source>If one or more package in this categories has not been found, CMake will abort when calling &lt;a href=&quot;#command:feature_summary&quot; id=&quot;index-0-command:feature_summary&quot;&gt;&lt;code&gt;feature_summary()&lt;/code&gt;&lt;/a&gt; with the 'FATAL_ON_MISSING_REQUIRED_PACKAGES' option enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2518d614876354e845d92e10ad71efe7209de0f6" translate="yes" xml:space="preserve">
          <source>If only &lt;code&gt;basename_LIBRARY_RELEASE&lt;/code&gt; is defined, &lt;code&gt;basename_LIBRARY&lt;/code&gt; will be set to the release value, and &lt;code&gt;basename_LIBRARY_DEBUG&lt;/code&gt; will be set to &lt;code&gt;basename_LIBRARY_DEBUG-NOTFOUND&lt;/code&gt;. If only &lt;code&gt;basename_LIBRARY_DEBUG&lt;/code&gt; is defined, then &lt;code&gt;basename_LIBRARY&lt;/code&gt; will take the debug value, and &lt;code&gt;basename_LIBRARY_RELEASE&lt;/code&gt; will be set to &lt;code&gt;basename_LIBRARY_RELEASE-NOTFOUND&lt;/code&gt;.</source>
          <target state="translated">경우에만 &lt;code&gt;basename_LIBRARY_RELEASE&lt;/code&gt; 가 정의되고, &lt;code&gt;basename_LIBRARY&lt;/code&gt; 은 릴리스 값으로 설정되며, &lt;code&gt;basename_LIBRARY_DEBUG&lt;/code&gt; 이 설정됩니다 &lt;code&gt;basename_LIBRARY_DEBUG-NOTFOUND&lt;/code&gt; . 경우에만 &lt;code&gt;basename_LIBRARY_DEBUG&lt;/code&gt; 가 정의되고, 다음 &lt;code&gt;basename_LIBRARY&lt;/code&gt; 는 디버그 값을 취할 것이며, &lt;code&gt;basename_LIBRARY_RELEASE&lt;/code&gt; 이 설정됩니다 &lt;code&gt;basename_LIBRARY_RELEASE-NOTFOUND&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ebcbde2218e66c214c9f58a9a93171174de2845a" translate="yes" xml:space="preserve">
          <source>If policy &lt;a href=&quot;../policy/cmp0060#policy:CMP0060&quot; id=&quot;index-0-policy:CMP0060&quot;&gt;&lt;code&gt;CMP0060&lt;/code&gt;&lt;/a&gt; is not set to &lt;code&gt;NEW&lt;/code&gt;, then when a library in one of these directories is given by full path to &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt;&lt;code&gt;target_link_libraries()&lt;/code&gt;&lt;/a&gt; CMake will generate the &lt;code&gt;-l&amp;lt;name&amp;gt;&lt;/code&gt; form on link lines for historical purposes.</source>
          <target state="translated">정책 &lt;a href=&quot;../policy/cmp0060#policy:CMP0060&quot; id=&quot;index-0-policy:CMP0060&quot;&gt; &lt;code&gt;CMP0060&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;NEW&lt;/code&gt; 로 설정되지 않은 경우,이 디렉토리 중 하나의 라이브러리가 &lt;a href=&quot;../command/target_link_libraries#command:target_link_libraries&quot; id=&quot;index-0-command:target_link_libraries&quot;&gt; &lt;code&gt;target_link_libraries()&lt;/code&gt; &lt;/a&gt; 전체 경로로 제공 되면 CMake는 히스토리 목적으로 링크 행에 &lt;code&gt;-l&amp;lt;name&amp;gt;&lt;/code&gt; 양식을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="1adf54f66df93def1552e65b8b1c773994e72024" translate="yes" xml:space="preserve">
          <source>If policy &lt;a href=&quot;../policy/cmp0068#policy:CMP0068&quot; id=&quot;index-0-policy:CMP0068&quot;&gt;&lt;code&gt;CMP0068&lt;/code&gt;&lt;/a&gt; is not &lt;code&gt;NEW&lt;/code&gt;, this property also controls use of &lt;a href=&quot;install_name_dir#prop_tgt:INSTALL_NAME_DIR&quot; id=&quot;index-0-prop_tgt:INSTALL_NAME_DIR&quot;&gt;&lt;code&gt;INSTALL_NAME_DIR&lt;/code&gt;&lt;/a&gt; in the build tree on macOS. Either way, the &lt;a href=&quot;build_with_install_name_dir#prop_tgt:BUILD_WITH_INSTALL_NAME_DIR&quot; id=&quot;index-0-prop_tgt:BUILD_WITH_INSTALL_NAME_DIR&quot;&gt;&lt;code&gt;BUILD_WITH_INSTALL_NAME_DIR&lt;/code&gt;&lt;/a&gt; target property takes precedence.</source>
          <target state="translated">정책 &lt;a href=&quot;../policy/cmp0068#policy:CMP0068&quot; id=&quot;index-0-policy:CMP0068&quot;&gt; &lt;code&gt;CMP0068&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;NEW&lt;/code&gt; 가 아닌 경우이 특성은 macOS의 빌드 트리에서 &lt;a href=&quot;install_name_dir#prop_tgt:INSTALL_NAME_DIR&quot; id=&quot;index-0-prop_tgt:INSTALL_NAME_DIR&quot;&gt; &lt;code&gt;INSTALL_NAME_DIR&lt;/code&gt; &lt;/a&gt; 사용을 제어합니다 . 어느 쪽이든 &lt;a href=&quot;build_with_install_name_dir#prop_tgt:BUILD_WITH_INSTALL_NAME_DIR&quot; id=&quot;index-0-prop_tgt:BUILD_WITH_INSTALL_NAME_DIR&quot;&gt; &lt;code&gt;BUILD_WITH_INSTALL_NAME_DIR&lt;/code&gt; &lt;/a&gt; 대상 속성이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="956833caeba66e8c3b7ef50acbe1706aa405421a" translate="yes" xml:space="preserve">
          <source>If policy &lt;a href=&quot;../policy/cmp0086#policy:CMP0086&quot; id=&quot;index-0-policy:CMP0086&quot;&gt;&lt;code&gt;CMP0086&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;, &lt;code&gt;-module &amp;lt;module_name&amp;gt;&lt;/code&gt; is passed to &lt;code&gt;SWIG&lt;/code&gt; compiler.</source>
          <target state="translated">정책 경우 &lt;a href=&quot;../policy/cmp0086#policy:CMP0086&quot; id=&quot;index-0-policy:CMP0086&quot;&gt; &lt;code&gt;CMP0086&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;code&gt;NEW&lt;/code&gt; , &lt;code&gt;-module &amp;lt;module_name&amp;gt;&lt;/code&gt; 에 전달 &lt;code&gt;SWIG&lt;/code&gt; 컴파일러.</target>
        </trans-unit>
        <trans-unit id="1e020b0c2f005309a323e464c9709aff4ae278f6" translate="yes" xml:space="preserve">
          <source>If possible, the MPI version will be determined by this module. The facilities to detect the MPI version were introduced with MPI-1.2, and therefore cannot be found for older MPI versions.</source>
          <target state="translated">가능하면이 모듈에서 MPI 버전을 결정합니다. MPI 버전을 감지하는 기능은 MPI-1.2에서 도입되었으므로 이전 MPI 버전에서는 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a8521310c7ab6e5e56e009826eabca260d778b45" translate="yes" xml:space="preserve">
          <source>If present and true, this will cause all libraries to be built shared unless the library was explicitly added as a static library. This variable is often added to projects as an &lt;a href=&quot;../command/option#command:option&quot; id=&quot;index-0-command:option&quot;&gt;&lt;code&gt;option()&lt;/code&gt;&lt;/a&gt; so that each user of a project can decide if they want to build the project using shared or static libraries.</source>
          <target state="translated">존재하고 true이면 라이브러리가 정적 라이브러리로 명시 적으로 추가되지 않은 경우 모든 라이브러리가 공유로 빌드됩니다. 이 변수는 종종 프로젝트에 &lt;a href=&quot;../command/option#command:option&quot; id=&quot;index-0-command:option&quot;&gt; &lt;code&gt;option()&lt;/code&gt; &lt;/a&gt; 으로 추가되어 프로젝트의 각 사용자가 공유 또는 정적 라이브러리를 사용하여 프로젝트를 빌드 할 것인지 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46443ef3218d266800ab26081649bb729efa30e5" translate="yes" xml:space="preserve">
          <source>If provided, the optional &lt;code&gt;comment&lt;/code&gt; will be passed as the &lt;code&gt;COMMENT&lt;/code&gt; for the &lt;a href=&quot;../command/add_custom_target#command:add_custom_target&quot; id=&quot;index-0-command:add_custom_target&quot;&gt;&lt;code&gt;add_custom_target()&lt;/code&gt;&lt;/a&gt; command used to create the custom target internally.</source>
          <target state="translated">제공 한 경우, 옵션 &lt;code&gt;comment&lt;/code&gt; 는 AS 전달됩니다 &lt;code&gt;COMMENT&lt;/code&gt; 에 대한 &lt;a href=&quot;../command/add_custom_target#command:add_custom_target&quot; id=&quot;index-0-command:add_custom_target&quot;&gt; &lt;code&gt;add_custom_target()&lt;/code&gt; &lt;/a&gt; 내부적으로 사용자 정의 대상을 만드는 데 사용되는 명령.</target>
        </trans-unit>
        <trans-unit id="ec6bc186ce164c347e9de686a37bf1dd2980360c" translate="yes" xml:space="preserve">
          <source>If required, you may select which files and directories to list or extract from the archive using the specified &lt;code&gt;&amp;lt;patterns&amp;gt;&lt;/code&gt;. Wildcards are supported. If the &lt;code&gt;PATTERNS&lt;/code&gt; option is not given, the entire archive will be listed or extracted.</source>
          <target state="translated">필요한 경우 지정된 &lt;code&gt;&amp;lt;patterns&amp;gt;&lt;/code&gt; 를 사용하여 아카이브에서 나열하거나 추출 할 파일 및 디렉토리를 선택할 수 있습니다 . 와일드 카드가 지원됩니다. 는 IF &lt;code&gt;PATTERNS&lt;/code&gt; 옵션이 제공되지 않으며, 전체 아카이브 목록 또는 추출됩니다.</target>
        </trans-unit>
        <trans-unit id="1d09d0430e79bf59f7b657720c27b472484899c7" translate="yes" xml:space="preserve">
          <source>If set in the cache it is used to initialize the value of the &lt;a href=&quot;../prop_gbl/rule_messages#prop_gbl:RULE_MESSAGES&quot; id=&quot;index-0-prop_gbl:RULE_MESSAGES&quot;&gt;&lt;code&gt;RULE_MESSAGES&lt;/code&gt;&lt;/a&gt; property. Users may disable the option in their local build tree to disable granular messages and report only as each target completes in Makefile builds.</source>
          <target state="translated">캐시에 설정된 경우 &lt;a href=&quot;../prop_gbl/rule_messages#prop_gbl:RULE_MESSAGES&quot; id=&quot;index-0-prop_gbl:RULE_MESSAGES&quot;&gt; &lt;code&gt;RULE_MESSAGES&lt;/code&gt; &lt;/a&gt; 특성 값을 초기화하는 데 사용됩니다 . 사용자는 로컬 빌드 트리에서 옵션을 비활성화하여 세부 메시지를 비활성화하고 각 대상이 Makefile 빌드에서 완료 될 때만보고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="272ec1d6420f5b2744281dbff393f2a7317dff29" translate="yes" xml:space="preserve">
          <source>If set this CMake script will be executed by CPack during its local [CPack-private] installation which is done right before packaging the files. The script is not called by e.g.: &lt;code&gt;make install&lt;/code&gt;.</source>
          <target state="translated">설정하면이 CMake 스크립트는 파일을 패키징하기 직전에 수행되는 로컬 [CPack-private] 설치 중에 CPack에 의해 실행됩니다. 스크립트는 예를 들어 &lt;code&gt;make install&lt;/code&gt; 에 의해 호출되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c1fc101f76be58173fe034af9fb26a060d0a33e9" translate="yes" xml:space="preserve">
          <source>If set this will enable device linking on the library target. Normally device linking is deferred until a shared library or executable is generated, allowing for multiple static libraries to resolve device symbols at the same time when they are used by a shared library or executable.</source>
          <target state="translated">설정하면 라이브러리 대상에서 장치 연결이 활성화됩니다. 일반적으로 장치 링크는 공유 라이브러리 또는 실행 파일이 생성 될 때까지 지연되므로 공유 라이브러리 또는 실행 파일에서 여러 심볼 라이브러리를 사용할 때 여러 정적 라이브러리가 동시에 장치 기호를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="343524f270e356ac04c4117963b1a6c10a95d3ca" translate="yes" xml:space="preserve">
          <source>If set this will enable separable compilation for all CUDA files for the given target.</source>
          <target state="translated">설정하면 주어진 타겟에 대한 모든 CUDA 파일에 대해 분리 가능한 컴파일이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="367b5ceeb90a70e1a3a1a79821debb402eac22a7" translate="yes" xml:space="preserve">
          <source>If set this will enable separable compilation for all CUDA runtime object files. If used outside of &lt;code&gt;cuda_add_executable()&lt;/code&gt; and &lt;code&gt;cuda_add_library()&lt;/code&gt; (e.g. calling &lt;code&gt;cuda_wrap_srcs()&lt;/code&gt; directly), &lt;code&gt;cuda_compute_separable_compilation_object_file_name()&lt;/code&gt; and &lt;code&gt;cuda_link_separable_compilation_objects()&lt;/code&gt; should be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5805ecfd5007b48fdaee93cffbd5e01ccbbc02" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;FALSE&lt;/code&gt; or undefined: Enable multiple version/component requirements.</source>
          <target state="translated">&lt;code&gt;FALSE&lt;/code&gt; 로 설정 하거나 정의되지 않은 경우 : 여러 버전 / 구성 요소 요구 사항을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="2e1923da3a35fe97453420dc041c5d1976347b78" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;OFF&lt;/code&gt; it will never be emitted</source>
          <target state="translated">&lt;code&gt;OFF&lt;/code&gt; 로 설정하면 방출되지 않습니다</target>
        </trans-unit>
        <trans-unit id="6e102b02dc555a53d99c0d8996a336936070f308" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;ON&lt;/code&gt; it will always be emitted</source>
          <target state="translated">&lt;code&gt;ON&lt;/code&gt; 으로 설정 하면 항상 방출됩니다</target>
        </trans-unit>
        <trans-unit id="61c105cb51eaf644ff72e45505b80c22d0725e40" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;ONLY&lt;/code&gt;, then only the roots in &lt;a href=&quot;cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH&quot; id=&quot;index-1-variable:CMAKE_FIND_ROOT_PATH&quot;&gt;&lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt;&lt;/a&gt; will be searched. If set to &lt;code&gt;NEVER&lt;/code&gt;, then the roots in &lt;a href=&quot;cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH&quot; id=&quot;index-2-variable:CMAKE_FIND_ROOT_PATH&quot;&gt;&lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt;&lt;/a&gt; will be ignored and only the host system root will be used. If set to &lt;code&gt;BOTH&lt;/code&gt;, then the host system paths and the paths in &lt;a href=&quot;cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH&quot; id=&quot;index-3-variable:CMAKE_FIND_ROOT_PATH&quot;&gt;&lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt;&lt;/a&gt; will be searched.</source>
          <target state="translated">&lt;code&gt;ONLY&lt;/code&gt; 로 설정하면 &lt;a href=&quot;cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH&quot; id=&quot;index-1-variable:CMAKE_FIND_ROOT_PATH&quot;&gt; &lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt; &lt;/a&gt; 의 루트 만 검색됩니다. &lt;code&gt;NEVER&lt;/code&gt; 로 설정되면 &lt;a href=&quot;cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH&quot; id=&quot;index-2-variable:CMAKE_FIND_ROOT_PATH&quot;&gt; &lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt; &lt;/a&gt; 의 루트는 무시되고 호스트 시스템 루트 만 사용됩니다. &lt;code&gt;BOTH&lt;/code&gt; 로 설정 되면 호스트 시스템 경로 및 &lt;a href=&quot;cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH&quot; id=&quot;index-3-variable:CMAKE_FIND_ROOT_PATH&quot;&gt; &lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt; &lt;/a&gt; 의 경로 가 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="1653dba7defc4aa4365dc4c6b95572e33dd7ac88" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;TRUE&lt;/code&gt;, contents of target property &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-0-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; will be forwarded to &lt;code&gt;SWIG&lt;/code&gt; compiler. If set to &lt;code&gt;FALSE&lt;/code&gt; target property &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-1-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; will be ignored. If not set, target property &lt;code&gt;SWIG_USE_TARGET_INCLUDE_DIRECTORIES&lt;/code&gt; will be considered.</source>
          <target state="translated">&lt;code&gt;TRUE&lt;/code&gt; 로 설정되면 대상 특성 &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-0-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt; 의&lt;/a&gt; 컨텐츠 가 &lt;code&gt;SWIG&lt;/code&gt; 컴파일러 로 전달됩니다 . &lt;code&gt;FALSE&lt;/code&gt; 로 설정하면 &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-1-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; 대상 속성 이 무시됩니다. 설정하지 않으면 대상 특성 &lt;code&gt;SWIG_USE_TARGET_INCLUDE_DIRECTORIES&lt;/code&gt; 가 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="b60b56bd68196a381f3866767bfd11bcbc287868" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;TRUE&lt;/code&gt;, contents of target property &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-3-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; will be forwarded to &lt;code&gt;SWIG&lt;/code&gt; compiler. If set to &lt;code&gt;FALSE&lt;/code&gt; or not defined, target property &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-4-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt;&lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/a&gt; will be ignored. This behavior can be overridden by specifying source property &lt;code&gt;USE_TARGET_INCLUDE_DIRECTORIES&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TRUE&lt;/code&gt; 로 설정되면 대상 특성 &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-3-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt; 의&lt;/a&gt; 컨텐츠 가 &lt;code&gt;SWIG&lt;/code&gt; 컴파일러 로 전달됩니다 . &lt;code&gt;FALSE&lt;/code&gt; 로 설정 되거나 정의되지 않으면 대상 특성 &lt;a href=&quot;../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES&quot; id=&quot;index-4-prop_tgt:INCLUDE_DIRECTORIES&quot;&gt; &lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt; &lt;/a&gt; 가 무시됩니다. 소스 특성 &lt;code&gt;USE_TARGET_INCLUDE_DIRECTORIES&lt;/code&gt; 를 지정 하여이 작동을 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a2ac1de19b483b4df217440e5fc1ba8adbd0ef1c" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;TRUE&lt;/code&gt;, implicit dependencies are generated by the &lt;code&gt;swig&lt;/code&gt; tool itself. This property is only meaningful for &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile&lt;/a&gt; and &lt;a href=&quot;../manual/cmake-generators.7#ninja-generators&quot;&gt;Ninja&lt;/a&gt; generators. Default value is &lt;code&gt;FALSE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5754a3387ef38858ec8c6092013434463093ea" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;TRUE&lt;/code&gt;, values of variables prefixed with &lt;code&gt;CPACK_&lt;/code&gt; will be escaped before being written to the configuration files, so that the cpack program receives them exactly as they were specified. If not, characters like quotes and backslashes can cause parsing errors or alter the value received by the cpack program. Defaults to &lt;code&gt;FALSE&lt;/code&gt; for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;TRUE&lt;/code&gt; 로 설정되면 &lt;code&gt;CPACK_&lt;/code&gt; 이 접두어로 변수의 값을 구성 파일에 기록하기 전에 이스케이프하므로 cpack 프로그램은 지정된대로 정확하게 수신합니다. 그렇지 않은 경우 따옴표 및 백 슬래시와 같은 문자로 인해 구문 분석 오류가 발생하거나 cpack 프로그램이 수신 한 값을 변경할 수 있습니다. 이전 버전과의 호환성을 위해 기본값은 &lt;code&gt;FALSE&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="75aff9a59610f6f48529b4715559de0f345225eb" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;TRUE&lt;/code&gt;: Create CMake cache entries for the above artifact specification variables so that users can edit them interactively. This disables support for multiple version/component requirements.</source>
          <target state="translated">&lt;code&gt;TRUE&lt;/code&gt; 로 설정된 경우 : 사용자가 대화 형으로 편집 할 수 있도록 위의 아티팩트 사양 변수에 대한 CMake 캐시 항목을 만듭니다. 이렇게하면 여러 버전 / 구성 요소 요구 사항에 대한 지원이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="f53525f3d97ca399f00ebd0208aa03b3f0fc33eb" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, the test will be skipped and its status will be &amp;lsquo;Not Run&amp;rsquo;. A &lt;code&gt;DISABLED&lt;/code&gt; test will not be counted in the total number of tests and its completion status will be reported to CDash as &lt;code&gt;Disabled&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 하면 테스트를 건너 뛰고 상태는 'Not Run'이됩니다. &lt;code&gt;DISABLED&lt;/code&gt; 시험은 시험의 총 수에 계산되지 않습니다와 완료 상태로 CDash에보고됩니다 &lt;code&gt;Disabled&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79aa5388da6bae4c061c836c138de0922261f871" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, the test will be skipped and its status will be 'Not Run'. A &lt;code&gt;DISABLED&lt;/code&gt; test will not be counted in the total number of tests and its completion status will be reported to CDash as &lt;code&gt;Disabled&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd857f6dae53345c336a4b22238674cd1770ff33" translate="yes" xml:space="preserve">
          <source>If set to FALSE, search &lt;strong&gt;only&lt;/strong&gt; for shared libraries.</source>
          <target state="translated">FALSE로 설정하면 공유 라이브러리 &lt;strong&gt;만&lt;/strong&gt; 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="d6b905e6d62cbbc469cfc3f9d734dc04122ff5d3" translate="yes" xml:space="preserve">
          <source>If set to TRUE, search &lt;strong&gt;only&lt;/strong&gt; for static libraries.</source>
          <target state="translated">TRUE로 설정되면 정적 라이브러리 &lt;strong&gt;만&lt;/strong&gt; 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="656b07b5d0646a11f05f535fb9f6e26cc13e4ed5" translate="yes" xml:space="preserve">
          <source>If set to a list of arguments those will be added to the scheme.</source>
          <target state="translated">인수 목록으로 설정하면 해당 인수가 체계에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="7e8a371bfae5e6ce9c30aee8a4ac4a49d1660765" translate="yes" xml:space="preserve">
          <source>If set to a list of environment variables and values of the form &lt;code&gt;MYVAR=value&lt;/code&gt; those environment variables will be added to the scheme.</source>
          <target state="translated">환경 변수 및 &lt;code&gt;MYVAR=value&lt;/code&gt; 형식의 값 목록으로 설정하면 해당 환경 변수가 체계에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="9c7cc5d6e6ed2eb1934bf73f5562d4ae46549b95" translate="yes" xml:space="preserve">
          <source>If set to a list of environment variables and values of the form &lt;code&gt;MYVAR=value&lt;/code&gt; those environment variables will be defined while running the test. The environment is restored to its previous state after the test is done.</source>
          <target state="translated">환경 변수 및 &lt;code&gt;MYVAR=value&lt;/code&gt; 형식의 값 목록으로 설정된 경우 해당 환경 변수는 테스트를 실행하는 동안 정의됩니다. 테스트가 완료된 후 환경이 이전 상태로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="3961c65e52c433ace06b0fc5f95f6e64e715ead6" translate="yes" xml:space="preserve">
          <source>If set to a list of files, the test will not be run unless all of the files exist.</source>
          <target state="translated">파일 목록으로 설정하면 모든 파일이 존재하지 않으면 테스트가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e324226d89ff39ffcb6cfaca900000fb561b143d" translate="yes" xml:space="preserve">
          <source>If set to a name then that name will be reported to &lt;code&gt;CDASH&lt;/code&gt; as a named measurement with a value of &lt;code&gt;1&lt;/code&gt;. You may also specify a value by setting &lt;code&gt;MEASUREMENT&lt;/code&gt; to &lt;code&gt;measurement=value&lt;/code&gt;.</source>
          <target state="translated">이름으로 설정된 경우 해당 이름은 &lt;code&gt;1&lt;/code&gt; 값을 가진 명명 된 측정 값으로 &lt;code&gt;CDASH&lt;/code&gt; 에보고 됩니다 . &lt;code&gt;MEASUREMENT&lt;/code&gt; 를 &lt;code&gt;measurement=value&lt;/code&gt; 로 설정하여 값을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="508483b7c2e7e2b9a8c20b7c6ce01623bb6b2036" translate="yes" xml:space="preserve">
          <source>If set to true then this is an object file.</source>
          <target state="translated">true로 설정하면 이것이 오브젝트 파일입니다.</target>
        </trans-unit>
        <trans-unit id="68aeca830ab8d49e7291d649bb0708a8f7d0163e" translate="yes" xml:space="preserve">
          <source>If set to true, enables interprocedural optimizations if they are known &lt;a href=&quot;../module/checkiposupported#module:CheckIPOSupported&quot; id=&quot;index-0-module:CheckIPOSupported&quot;&gt;&lt;code&gt;to be supported&lt;/code&gt;&lt;/a&gt; by the compiler. Depending on value of policy &lt;a href=&quot;../policy/cmp0069#policy:CMP0069&quot; id=&quot;index-0-policy:CMP0069&quot;&gt;&lt;code&gt;CMP0069&lt;/code&gt;&lt;/a&gt;, the error will be reported or ignored, if interprocedural optimization is enabled but not supported.</source>
          <target state="translated">true로 설정하면 프로 시저가 최적화를 컴파일러에서 &lt;a href=&quot;../module/checkiposupported#module:CheckIPOSupported&quot; id=&quot;index-0-module:CheckIPOSupported&quot;&gt; &lt;code&gt;to be supported&lt;/code&gt; &lt;/a&gt; 하는 경우 프로 시저 최적화를 사용합니다 . 정책 &lt;a href=&quot;../policy/cmp0069#policy:CMP0069&quot; id=&quot;index-0-policy:CMP0069&quot;&gt; &lt;code&gt;CMP0069&lt;/code&gt; 의&lt;/a&gt; 값에 따라 프로 시저 간 최적화가 사용 가능하지만 지원되지 않는 경우 오류가보고되거나 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d8cd6cac7b512160799c8a74b37c0affe381073a" translate="yes" xml:space="preserve">
          <source>If set to true, enables interprocedural optimizations if they are known to be supported by the compiler.</source>
          <target state="translated">true로 설정하면 프로 시저가 최적화를 컴파일러에서 지원하는 경우 프로 시저 최적화를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bcd7b6cf97d8e2a0168a26ddd277cfbe0505f12b" translate="yes" xml:space="preserve">
          <source>If set to true, this will invert the pass/fail flag of the test.</source>
          <target state="translated">true로 설정하면 테스트의 합격 / 불합격 플래그가 반전됩니다.</target>
        </trans-unit>
        <trans-unit id="ef1bc4e44565c03abeed25ccd5eb600a62d8250b" translate="yes" xml:space="preserve">
          <source>If set, &lt;code&gt;gdal-config&lt;/code&gt; will not be used. This can be useful if there are GDAL libraries built with autotools (which provide the tool) and CMake (which do not) in the same environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84408a2ba103ae2828cb3568033d31b2933c5a9" translate="yes" xml:space="preserve">
          <source>If set, CTest will update the repository&amp;rsquo;s submodules before updating.</source>
          <target state="translated">설정된 경우 CTest는 업데이트하기 전에 리포지토리의 하위 모듈을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="7de40cb824cc82ffb5f6aafe07a6b9408ace4f76" translate="yes" xml:space="preserve">
          <source>If set, CTest will update the repository's submodules before updating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d920612995f8a0b917b2c1a49b5b76f2e604d3" translate="yes" xml:space="preserve">
          <source>If set, checks only the specified vendor, if not set checks all the possibilities. List of vendors valid in this module:</source>
          <target state="translated">설정 한 경우 지정된 공급 업체 만 확인하고 설정하지 않은 경우 모든 가능성을 확인합니다. 이 모듈에 유효한 공급 업체 목록 :</target>
        </trans-unit>
        <trans-unit id="c823d9115e264ca718c48dba7c4d21c4a0dc6708" translate="yes" xml:space="preserve">
          <source>If set, if the output matches one of specified regular expressions, the test will be marked as skipped. Example:</source>
          <target state="translated">설정된 경우 출력이 지정된 정규식 중 하나와 일치하면 테스트가 건너 뛴 것으로 표시됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="eb25be356f11f13bd96a46fe54f2d93d67e8de75" translate="yes" xml:space="preserve">
          <source>If set, if the output matches one of specified regular expressions, the test will fail. Example:</source>
          <target state="translated">설정된 경우 출력이 지정된 정규식 중 하나와 일치하면 테스트가 실패합니다. 예:</target>
        </trans-unit>
        <trans-unit id="7d59224a9baba3d0037b4d9660d56273a7d1c4bb" translate="yes" xml:space="preserve">
          <source>If set, report any undefined properties to this file.</source>
          <target state="translated">설정된 경우 정의되지 않은 속성을이 파일에보고하십시오.</target>
        </trans-unit>
        <trans-unit id="dbb4e64ce44b0f96f9be8ff420869ebe5a6ea017" translate="yes" xml:space="preserve">
          <source>If set, specifies additional versions of Matlab that may be looked for. The variable should be a list of strings, organised by pairs of release name and versions, such as follows:</source>
          <target state="translated">설정된 경우 찾을 수있는 추가 버전의 Matlab을 지정합니다. 변수는 다음과 같이 릴리스 이름 및 버전 쌍으로 구성된 문자열 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="9c8997cdfecb1cfb937ac71bcd0e98ab20663b90" translate="yes" xml:space="preserve">
          <source>If set, the &lt;a href=&quot;#variable:CPACK_PROJECT_CONFIG_FILE&quot; id=&quot;index-3-variable:CPACK_PROJECT_CONFIG_FILE&quot;&gt;&lt;code&gt;CPACK_PROJECT_CONFIG_FILE&lt;/code&gt;&lt;/a&gt; is included automatically on a per-generator basis. It only need contain overrides.</source>
          <target state="translated">설정되면 &lt;a href=&quot;#variable:CPACK_PROJECT_CONFIG_FILE&quot; id=&quot;index-3-variable:CPACK_PROJECT_CONFIG_FILE&quot;&gt; &lt;code&gt;CPACK_PROJECT_CONFIG_FILE&lt;/code&gt; &lt;/a&gt; 이 생성자별로 자동으로 포함됩니다. 재정의 만 포함하면됩니다.</target>
        </trans-unit>
        <trans-unit id="6f926a3c63300107774698cdf1b2dd1ec46d7225" translate="yes" xml:space="preserve">
          <source>If set, the following variables are passed in to the generated try_compile CMakeLists.txt to initialize compile target properties with default values:</source>
          <target state="translated">설정된 경우 다음 변수가 생성 된 try_compile CMakeLists.txt에 전달되어 기본값으로 컴파일 대상 특성을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="8514d73d44c12bb07d874aaf69a90ad39d7031fe" translate="yes" xml:space="preserve">
          <source>If set, the lookup of Matlab and the intermediate configuration steps are outputted to the console.</source>
          <target state="translated">설정된 경우 Matlab 조회 및 중간 구성 단계가 콘솔에 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="b34bbfeba5b8d0aa737893e1f435919690da6666" translate="yes" xml:space="preserve">
          <source>If set, the test output will be checked against the specified regular expressions and at least one of the regular expressions has to match, otherwise the test will fail. Example:</source>
          <target state="translated">설정하면 테스트 결과가 지정된 정규식에 대해 검사되고 하나 이상의 정규식이 일치해야합니다. 그렇지 않으면 테스트가 실패합니다. 예:</target>
        </trans-unit>
        <trans-unit id="83f095438a33c2e4139501c17adbaa860231f094" translate="yes" xml:space="preserve">
          <source>If set, this causes the output from the custom step to be captured to files in the external project&amp;rsquo;s &lt;code&gt;LOG_DIR&lt;/code&gt; if supplied or &lt;code&gt;STAMP_DIR&lt;/code&gt;.</source>
          <target state="translated">설정되면, 사용자 정의 단계의 출력이 외부 프로젝트의 &lt;code&gt;LOG_DIR&lt;/code&gt; 또는 제공된 경우 &lt;code&gt;STAMP_DIR&lt;/code&gt; 의 파일로 캡처됩니다 .</target>
        </trans-unit>
        <trans-unit id="45d0c1f6bf22a7f7b6d009058743fc52049c8f1f" translate="yes" xml:space="preserve">
          <source>If set, this causes the output from the custom step to be captured to files in the external project's &lt;code&gt;LOG_DIR&lt;/code&gt; if supplied or &lt;code&gt;STAMP_DIR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82972795f71affe19082f745d349524d05f1d948" translate="yes" xml:space="preserve">
          <source>If set, this property completely overrides the generic property for the named configuration.</source>
          <target state="translated">설정된 경우이 특성은 이름 지정된 구성의 일반 특성을 완전히 대체합니다.</target>
        </trans-unit>
        <trans-unit id="2ef098119209ba85d386a15248da3719b9f2f55c" translate="yes" xml:space="preserve">
          <source>If set, this will tell the required compilers to enable device linking on the library target. Device linking is an additional link step required by some CUDA compilers when &lt;a href=&quot;cuda_separable_compilation#prop_tgt:CUDA_SEPARABLE_COMPILATION&quot; id=&quot;index-0-prop_tgt:CUDA_SEPARABLE_COMPILATION&quot;&gt;&lt;code&gt;CUDA_SEPARABLE_COMPILATION&lt;/code&gt;&lt;/a&gt; is enabled. Normally device linking is deferred until a shared library or executable is generated, allowing for multiple static libraries to resolve device symbols at the same time when they are used by a shared library or executable.</source>
          <target state="translated">설정되면 필요한 컴파일러에게 라이브러리 대상에서 장치 링크를 활성화하도록 지시합니다. 장치 연결은 &lt;a href=&quot;cuda_separable_compilation#prop_tgt:CUDA_SEPARABLE_COMPILATION&quot; id=&quot;index-0-prop_tgt:CUDA_SEPARABLE_COMPILATION&quot;&gt; &lt;code&gt;CUDA_SEPARABLE_COMPILATION&lt;/code&gt; &lt;/a&gt; 이 활성화 된 경우 일부 CUDA 컴파일러에 필요한 추가 연결 단계 입니다. 일반적으로 장치 연결은 공유 라이브러리 또는 실행 파일이 생성 될 때까지 연기되므로 여러 정적 라이브러리가 공유 라이브러리 또는 실행 파일에서 사용될 때 동시에 장치 심볼을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0482866b4dde63796f7920f8866b1ca2d2719b60" translate="yes" xml:space="preserve">
          <source>If specified, configuration will error if a suitable CUDA Toolkit is not found.</source>
          <target state="translated">지정된 경우 적합한 CUDA 툴킷을 찾을 수없는 경우 구성 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="74fe61013fc0da2e7e13f2aea36a950a0abe8db1" translate="yes" xml:space="preserve">
          <source>If specified, describes the version of the CUDA Toolkit to search for.</source>
          <target state="translated">지정된 경우 검색 할 CUDA 툴킷의 버전을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="64c88640f9f8518c9809a5716a9881041a27466c" translate="yes" xml:space="preserve">
          <source>If specified, the CUDA Toolkit is considered found only if the exact &lt;code&gt;VERSION&lt;/code&gt; specified is recovered.</source>
          <target state="translated">지정된 경우 CUDA Toolkit은 지정된 정확한 &lt;code&gt;VERSION&lt;/code&gt; 이 복구 된 경우에만 찾은 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="228e18132f5561d618b3af8d81d58a42a727bf08" translate="yes" xml:space="preserve">
          <source>If specified, the parameter is passed along with &lt;code&gt;--gtest_output=xml:&lt;/code&gt; to test executable. The actual file name is the same as the test target, including prefix and suffix. This should be used instead of &lt;code&gt;EXTRA_ARGS --gtest_output=xml&lt;/code&gt; to avoid race conditions writing the XML result output when using parallel test execution.</source>
          <target state="translated">지정된 경우 매개 변수는 &lt;code&gt;--gtest_output=xml:&lt;/code&gt; 과 함께 전달되어 실행 파일을 테스트합니다. 실제 파일 이름은 접두사와 접미사를 포함하여 테스트 대상과 동일합니다. 병렬 테스트 실행을 사용할 때 경쟁 조건이 XML 결과 출력을 작성하지 않도록하려면 &lt;code&gt;EXTRA_ARGS --gtest_output=xml&lt;/code&gt; 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5c8d14636863c3dec3c5b856df68f15342cb2920" translate="yes" xml:space="preserve">
          <source>If specified, the search for a suitable CUDA Toolkit will not produce any messages.</source>
          <target state="translated">지정된 경우 적합한 CUDA 툴킷을 검색해도 메시지가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c7930d04d2f2d1434014d736aa507b2744a7261" translate="yes" xml:space="preserve">
          <source>If such a library target has this property set to &lt;code&gt;TRUE&lt;/code&gt; it will be built as a framework when built on the macOS and iOS. It will have the directory structure required for a framework and will be suitable to be used with the &lt;code&gt;-framework&lt;/code&gt; option. This property is initialized by the value of the &lt;a href=&quot;../variable/cmake_framework#variable:CMAKE_FRAMEWORK&quot; id=&quot;index-0-variable:CMAKE_FRAMEWORK&quot;&gt;&lt;code&gt;CMAKE_FRAMEWORK&lt;/code&gt;&lt;/a&gt; variable if it is set when a target is created.</source>
          <target state="translated">이러한 라이브러리 대상이이 특성을 &lt;code&gt;TRUE&lt;/code&gt; 로 설정 하면 macOS 및 iOS에서 빌드 될 때 프레임 워크로 빌드됩니다. 프레임 워크에 필요한 디렉토리 구조를 &lt;code&gt;-framework&lt;/code&gt; 옵션 과 함께 사용하기에 적합합니다 . 이 특성은 대상을 작성할 때 설정된 경우 &lt;a href=&quot;../variable/cmake_framework#variable:CMAKE_FRAMEWORK&quot; id=&quot;index-0-variable:CMAKE_FRAMEWORK&quot;&gt; &lt;code&gt;CMAKE_FRAMEWORK&lt;/code&gt; &lt;/a&gt; 변수 의 값으로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="af731b6633381becd0cd3ada4b497552d16c5823" translate="yes" xml:space="preserve">
          <source>If that property is not set then CMake uses an appropriate default value based on the compiler to select the CUDA runtime library.</source>
          <target state="translated">해당 속성이 설정되지 않은 경우 CMake는 컴파일러에 따라 적절한 기본값을 사용하여 CUDA 런타임 라이브러리를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="106e236f57f265f5539272df6448eb4f55c60bc0" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../prop_gbl/find_library_use_lib32_paths#prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot; id=&quot;index-1-prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot;&gt;&lt;code&gt;FIND_LIBRARY_USE_LIB32_PATHS&lt;/code&gt;&lt;/a&gt; global property is set all search paths will be tested as normal, with &lt;code&gt;32/&lt;/code&gt; appended, and with all matches of &lt;code&gt;lib/&lt;/code&gt; replaced with &lt;code&gt;lib32/&lt;/code&gt;. This property is automatically set for the platforms that are known to need it if at least one of the languages supported by the &lt;a href=&quot;project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command is enabled.</source>
          <target state="translated">는 IF &lt;a href=&quot;../prop_gbl/find_library_use_lib32_paths#prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot; id=&quot;index-1-prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot;&gt; &lt;code&gt;FIND_LIBRARY_USE_LIB32_PATHS&lt;/code&gt; &lt;/a&gt; 전역 속성이 설정되어 모든 검색 경로로, 정상적으로 테스트됩니다 &lt;code&gt;32/&lt;/code&gt; 추가, 그리고 모든 일치와 &lt;code&gt;lib/&lt;/code&gt; 로 대체 &lt;code&gt;lib32/&lt;/code&gt; . 이 특성은 &lt;a href=&quot;project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령이 지원하는 언어 중 하나 이상 이 사용 가능한 경우 필요한 것으로 알려진 플랫폼에 대해 자동으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="692c2434840c30f4c658bd7821648965c03938b7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../prop_gbl/find_library_use_lib64_paths#prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot; id=&quot;index-1-prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot;&gt;&lt;code&gt;FIND_LIBRARY_USE_LIB64_PATHS&lt;/code&gt;&lt;/a&gt; global property is set all search paths will be tested as normal, with &lt;code&gt;64/&lt;/code&gt; appended, and with all matches of &lt;code&gt;lib/&lt;/code&gt; replaced with &lt;code&gt;lib64/&lt;/code&gt;. This property is automatically set for the platforms that are known to need it if at least one of the languages supported by the &lt;a href=&quot;project#command:project&quot; id=&quot;index-2-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command is enabled.</source>
          <target state="translated">는 IF &lt;a href=&quot;../prop_gbl/find_library_use_lib64_paths#prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot; id=&quot;index-1-prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot;&gt; &lt;code&gt;FIND_LIBRARY_USE_LIB64_PATHS&lt;/code&gt; &lt;/a&gt; 전역 속성이 설정되어 모든 검색 경로로, 정상적으로 테스트됩니다 &lt;code&gt;64/&lt;/code&gt; 추가, 그리고 모든 일치와 &lt;code&gt;lib/&lt;/code&gt; 로 대체 &lt;code&gt;lib64/&lt;/code&gt; . 이 특성은 &lt;a href=&quot;project#command:project&quot; id=&quot;index-2-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령이 지원하는 언어 중 하나 이상 이 사용 가능한 경우 필요한 것으로 알려진 플랫폼에 대해 자동으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="0dc246617e7d654446957c593c9948b9f9c9cd81" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../prop_gbl/find_library_use_libx32_paths#prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot; id=&quot;index-1-prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot;&gt;&lt;code&gt;FIND_LIBRARY_USE_LIBX32_PATHS&lt;/code&gt;&lt;/a&gt; global property is set all search paths will be tested as normal, with &lt;code&gt;x32/&lt;/code&gt; appended, and with all matches of &lt;code&gt;lib/&lt;/code&gt; replaced with &lt;code&gt;libx32/&lt;/code&gt;. This property is automatically set for the platforms that are known to need it if at least one of the languages supported by the &lt;a href=&quot;project#command:project&quot; id=&quot;index-1-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command is enabled.</source>
          <target state="translated">는 IF &lt;a href=&quot;../prop_gbl/find_library_use_libx32_paths#prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot; id=&quot;index-1-prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot;&gt; &lt;code&gt;FIND_LIBRARY_USE_LIBX32_PATHS&lt;/code&gt; &lt;/a&gt; 전역 속성이 설정되어 모든 검색 경로로, 정상적으로 테스트됩니다 &lt;code&gt;x32/&lt;/code&gt; , 그리고 모든 경기가 추가 &lt;code&gt;lib/&lt;/code&gt; 로 대체 &lt;code&gt;libx32/&lt;/code&gt; . 이 특성은 &lt;a href=&quot;project#command:project&quot; id=&quot;index-1-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 명령이 지원하는 언어 중 하나 이상 이 사용 가능한 경우 필요한 것으로 알려진 플랫폼에 대해 자동으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="cd8533fbd3ebe00344ed769b81a2c1910a022ef7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../prop_gbl/job_pools#prop_gbl:JOB_POOLS&quot; id=&quot;index-0-prop_gbl:JOB_POOLS&quot;&gt;&lt;code&gt;JOB_POOLS&lt;/code&gt;&lt;/a&gt; global property is not set, the value of this variable is used in its place. See &lt;a href=&quot;../prop_gbl/job_pools#prop_gbl:JOB_POOLS&quot; id=&quot;index-1-prop_gbl:JOB_POOLS&quot;&gt;&lt;code&gt;JOB_POOLS&lt;/code&gt;&lt;/a&gt; for additional information.</source>
          <target state="translated">는 IF &lt;a href=&quot;../prop_gbl/job_pools#prop_gbl:JOB_POOLS&quot; id=&quot;index-0-prop_gbl:JOB_POOLS&quot;&gt; &lt;code&gt;JOB_POOLS&lt;/code&gt; &lt;/a&gt; 전역 속성이 설정되지 않은,이 변수의 값은 그 자리에 사용됩니다. 추가 정보는 &lt;a href=&quot;../prop_gbl/job_pools#prop_gbl:JOB_POOLS&quot; id=&quot;index-1-prop_gbl:JOB_POOLS&quot;&gt; &lt;code&gt;JOB_POOLS&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="44aae0bd95e4c6909d74d99426e3a6acde8d7129" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL&quot; id=&quot;index-0-prop_tgt:EXCLUDE_FROM_ALL&quot;&gt;&lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt;&lt;/a&gt; target property is set on a target then its value determines whether the target is included in the &quot;all&quot; target of this directory and its ancestors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b775c85f5a15ecdb40ed2fd1db7aa137ad4543" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL&quot; id=&quot;index-0-prop_tgt:EXCLUDE_FROM_ALL&quot;&gt;&lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt;&lt;/a&gt; target property is set on a target then its value determines whether the target is included in the &amp;ldquo;all&amp;rdquo; target of this directory and its ancestors.</source>
          <target state="translated">는 IF &lt;a href=&quot;../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL&quot; id=&quot;index-0-prop_tgt:EXCLUDE_FROM_ALL&quot;&gt; &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; 의&lt;/a&gt; 대상 속성이 대상에 설정되어 그 값이 대상이 디렉토리와 그 조상의 &quot;모든&quot;대상에 포함되는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="2e08d12fdd805bd7f16723cabb549085f5855840" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_android_api#variable:CMAKE_ANDROID_API&quot; id=&quot;index-0-variable:CMAKE_ANDROID_API&quot;&gt;&lt;code&gt;CMAKE_ANDROID_API&lt;/code&gt;&lt;/a&gt; variable is set, its value is used as the API level.</source>
          <target state="translated">는 IF &lt;a href=&quot;../variable/cmake_android_api#variable:CMAKE_ANDROID_API&quot; id=&quot;index-0-variable:CMAKE_ANDROID_API&quot;&gt; &lt;code&gt;CMAKE_ANDROID_API&lt;/code&gt; 의&lt;/a&gt; 변수가 설정되고, 그 값은 API의 레벨로도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1b4a6212c1587b4bffde0ab6297f7a42e07e368c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_android_ndk#variable:CMAKE_ANDROID_NDK&quot; id=&quot;index-0-variable:CMAKE_ANDROID_NDK&quot;&gt;&lt;code&gt;CMAKE_ANDROID_NDK&lt;/code&gt;&lt;/a&gt; variable is set, the NDK at the specified location will be used.</source>
          <target state="translated">경우] &lt;a href=&quot;../variable/cmake_android_ndk#variable:CMAKE_ANDROID_NDK&quot; id=&quot;index-0-variable:CMAKE_ANDROID_NDK&quot;&gt; &lt;code&gt;CMAKE_ANDROID_NDK&lt;/code&gt; 의&lt;/a&gt; 변수가 설정되면, 지정된 위치에 NDK 사용한다.</target>
        </trans-unit>
        <trans-unit id="c5f96a2f65a671e007aa0f113bbcb2405e581932" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_find_library_custom_lib_suffix#variable:CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX&quot; id=&quot;index-0-variable:CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX&quot;&gt;&lt;code&gt;CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX&lt;/code&gt;&lt;/a&gt; variable is set all search paths will be tested as normal, with the suffix appended, and with all matches of &lt;code&gt;lib/&lt;/code&gt; replaced with &lt;code&gt;lib${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}/&lt;/code&gt;. This variable overrides the &lt;a href=&quot;../prop_gbl/find_library_use_lib32_paths#prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot; id=&quot;index-0-prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot;&gt;&lt;code&gt;FIND_LIBRARY_USE_LIB32_PATHS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../prop_gbl/find_library_use_libx32_paths#prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot; id=&quot;index-0-prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot;&gt;&lt;code&gt;FIND_LIBRARY_USE_LIBX32_PATHS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../prop_gbl/find_library_use_lib64_paths#prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot; id=&quot;index-0-prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot;&gt;&lt;code&gt;FIND_LIBRARY_USE_LIB64_PATHS&lt;/code&gt;&lt;/a&gt; global properties.</source>
          <target state="translated">는 IF &lt;a href=&quot;../variable/cmake_find_library_custom_lib_suffix#variable:CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX&quot; id=&quot;index-0-variable:CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX&quot;&gt; &lt;code&gt;CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX&lt;/code&gt; 의&lt;/a&gt; 변수가 설정되어 모든 검색 경로는 접미사가 추가로 정상적으로 시험, 그리고 모든 경기와됩니다 &lt;code&gt;lib/&lt;/code&gt; 로 대체 &lt;code&gt;lib${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}/&lt;/code&gt; . 이 변수는 &lt;a href=&quot;../prop_gbl/find_library_use_lib32_paths#prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot; id=&quot;index-0-prop_gbl:FIND_LIBRARY_USE_LIB32_PATHS&quot;&gt; &lt;code&gt;FIND_LIBRARY_USE_LIB32_PATHS&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../prop_gbl/find_library_use_libx32_paths#prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot; id=&quot;index-0-prop_gbl:FIND_LIBRARY_USE_LIBX32_PATHS&quot;&gt; &lt;code&gt;FIND_LIBRARY_USE_LIBX32_PATHS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../prop_gbl/find_library_use_lib64_paths#prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot; id=&quot;index-0-prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS&quot;&gt; &lt;code&gt;FIND_LIBRARY_USE_LIB64_PATHS&lt;/code&gt; &lt;/a&gt; 글로벌 특성을 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="a6a9453c4ba32452c7432ac067eb4ce832621a60" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_project_include#variable:CMAKE_PROJECT_INCLUDE&quot; id=&quot;index-0-variable:CMAKE_PROJECT_INCLUDE&quot;&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE&lt;/code&gt; variables are set, the files they point to will be included as the last step of the &lt;code&gt;project()&lt;/code&gt; command. If both are set, then &lt;a href=&quot;../variable/cmake_project_include#variable:CMAKE_PROJECT_INCLUDE&quot; id=&quot;index-1-variable:CMAKE_PROJECT_INCLUDE&quot;&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE&lt;/code&gt;&lt;/a&gt; will be included before &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;a href=&quot;../variable/cmake_project_include#variable:CMAKE_PROJECT_INCLUDE&quot; id=&quot;index-0-variable:CMAKE_PROJECT_INCLUDE&quot;&gt; &lt;code&gt;CMAKE_PROJECT_INCLUDE&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE&lt;/code&gt; 변수가 설정되어, 그들이 가리키는 파일의 마지막 단계로 포함됩니다하는 &lt;code&gt;project()&lt;/code&gt; 명령. 모두가 설정되어있는 경우, 다음 &lt;a href=&quot;../variable/cmake_project_include#variable:CMAKE_PROJECT_INCLUDE&quot; id=&quot;index-1-variable:CMAKE_PROJECT_INCLUDE&quot;&gt; &lt;code&gt;CMAKE_PROJECT_INCLUDE&lt;/code&gt; 는&lt;/a&gt; 전에 포함됩니다 &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7061488d89587435e02b5a9e73825410ac8a5d4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_project_include_before#variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot; id=&quot;index-0-variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot;&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE_BEFORE&lt;/code&gt; variables are set, the files they point to will be included as the first step of the &lt;code&gt;project()&lt;/code&gt; command. If both are set, then &lt;a href=&quot;../variable/cmake_project_include_before#variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot; id=&quot;index-1-variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot;&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt;&lt;/a&gt; will be included before &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE_BEFORE&lt;/code&gt;.</source>
          <target state="translated">경우] &lt;a href=&quot;../variable/cmake_project_include_before#variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot; id=&quot;index-0-variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot;&gt; &lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE_BEFORE&lt;/code&gt; 변수가 설정되며, 이들이 가리키는 파일의 첫 번째 단계로서 포함된다하는 &lt;code&gt;project()&lt;/code&gt; 명령. 둘 다 설정하면 &lt;a href=&quot;../variable/cmake_project_include_before#variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot; id=&quot;index-1-variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot;&gt; &lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;CMAKE_PROJECT_&amp;lt;PROJECT-NAME&amp;gt;_INCLUDE_BEFORE&lt;/code&gt; 앞에 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="b42833e1521cd3e5a61b28079b80e0bafe9479d7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_project_include_before#variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot; id=&quot;index-0-variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot;&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt;&lt;/a&gt; variable is set, the file pointed to by that variable will be included as the first step of the &lt;code&gt;project()&lt;/code&gt; command.</source>
          <target state="translated">는 IF &lt;a href=&quot;../variable/cmake_project_include_before#variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot; id=&quot;index-0-variable:CMAKE_PROJECT_INCLUDE_BEFORE&quot;&gt; &lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt; 의&lt;/a&gt; 변수가 설정 파일은 변수의 첫 번째 단계로 포함됩니다 가리키는 &lt;code&gt;project()&lt;/code&gt; 명령.</target>
        </trans-unit>
        <trans-unit id="ea6cb4551f7806bb14f1e3366adb4ac5d36795e5" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/cmake_sysroot#variable:CMAKE_SYSROOT&quot; id=&quot;index-3-variable:CMAKE_SYSROOT&quot;&gt;&lt;code&gt;CMAKE_SYSROOT&lt;/code&gt;&lt;/a&gt; variable is set, the API level is detected from the NDK directory structure containing the sysroot.</source>
          <target state="translated">경우] &lt;a href=&quot;../variable/cmake_sysroot#variable:CMAKE_SYSROOT&quot; id=&quot;index-3-variable:CMAKE_SYSROOT&quot;&gt; &lt;code&gt;CMAKE_SYSROOT&lt;/code&gt; 의&lt;/a&gt; 변수가 설정되면, API 레벨은 SYSROOT 함유 NDK 디렉토리 구조에서 검출된다.</target>
        </trans-unit>
        <trans-unit id="0841bf5b3d471d7eafec2418f248759990deb068" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../variable/ctest_checkout_command#variable:CTEST_CHECKOUT_COMMAND&quot; id=&quot;index-0-variable:CTEST_CHECKOUT_COMMAND&quot;&gt;&lt;code&gt;CTEST_CHECKOUT_COMMAND&lt;/code&gt;&lt;/a&gt; variable (or the &lt;a href=&quot;../variable/ctest_cvs_checkout#variable:CTEST_CVS_CHECKOUT&quot; id=&quot;index-0-variable:CTEST_CVS_CHECKOUT&quot;&gt;&lt;code&gt;CTEST_CVS_CHECKOUT&lt;/code&gt;&lt;/a&gt; variable) is set, its content is treated as command-line. The command is invoked with the current working directory set to the parent of the source directory, even if the source directory already exists. This can be used to create the source tree from a version control repository.</source>
          <target state="translated">경우] &lt;a href=&quot;../variable/ctest_checkout_command#variable:CTEST_CHECKOUT_COMMAND&quot; id=&quot;index-0-variable:CTEST_CHECKOUT_COMMAND&quot;&gt; &lt;code&gt;CTEST_CHECKOUT_COMMAND&lt;/code&gt; 의&lt;/a&gt; 변수 (또는 &lt;a href=&quot;../variable/ctest_cvs_checkout#variable:CTEST_CVS_CHECKOUT&quot; id=&quot;index-0-variable:CTEST_CVS_CHECKOUT&quot;&gt; &lt;code&gt;CTEST_CVS_CHECKOUT&lt;/code&gt; 의&lt;/a&gt; 변수)를 설정하고, 그 내용은 명령 라인으로 간주된다. 소스 디렉토리가 이미 존재하더라도 현재 작업 디렉토리를 소스 디렉토리의 상위로 설정하여 명령을 호출합니다. 버전 관리 저장소에서 소스 트리를 작성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="026ae09c815c0d6fc4b6a3e1c275b8677f7fb941" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&amp;lt;LANG&amp;gt;&lt;/code&gt; compiler passes to the linker an architecture-specific system library search directory such as &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/&amp;lt;arch&amp;gt;&lt;/code&gt; this variable contains the &lt;code&gt;&amp;lt;arch&amp;gt;&lt;/code&gt; name if/as detected by CMake.</source>
          <target state="translated">는 IF &lt;code&gt;&amp;lt;LANG&amp;gt;&lt;/code&gt; 와 같은 컴파일러는 링커에 아키텍처 특정 시스템 라이브러리 검색 디렉토리를 전달 &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/&amp;lt;arch&amp;gt;&lt;/code&gt; 이 변수가 포함 &lt;code&gt;&amp;lt;arch&amp;gt;&lt;/code&gt; CMake에서 감지 경우 / 이름입니다.</target>
        </trans-unit>
        <trans-unit id="c8b6ca35e4389840705d7748f801abbb707b3dc2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; could be built and run successfully, the internal cache variable specified by &lt;code&gt;&amp;lt;resultVar&amp;gt;&lt;/code&gt; will be set to 1, otherwise it will be set to an value that evaluates to boolean false (e.g. an empty string or an error message).</source>
          <target state="translated">는 IF &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 구축하고 성공적으로 실행 될 수있는 내부 캐시 변수에 의해 지정된 &lt;code&gt;&amp;lt;resultVar&amp;gt;&lt;/code&gt; 1로 설정되고, 그렇지 않은 경우가 값으로 설정됩니다 부울 false로 평가 (예 : 빈 문자열 또는 오류 메시지) .</target>
        </trans-unit>
        <trans-unit id="abde6e0d8ce027f57124ce88144da68238b6e41b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&amp;lt;ui_base&amp;gt;.ui&lt;/code&gt; file was found, &lt;code&gt;uic&lt;/code&gt; is called on it to generate &lt;code&gt;ui_&amp;lt;ui_base&amp;gt;.h&lt;/code&gt; in the directory</source>
          <target state="translated">만약 &lt;code&gt;&amp;lt;ui_base&amp;gt;.ui&lt;/code&gt; 파일이 발견, &lt;code&gt;uic&lt;/code&gt; 생성 할 불려 &lt;code&gt;ui_&amp;lt;ui_base&amp;gt;.h&lt;/code&gt; 디렉토리에</target>
        </trans-unit>
        <trans-unit id="0d62d6213c4bb8bc375810a215fedc2d3fffcb40" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;:&amp;lt;type&amp;gt;&lt;/code&gt; portion is given it must be one of the types specified by the &lt;a href=&quot;../command/set#command:set&quot; id=&quot;index-1-command:set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; command documentation for its &lt;code&gt;CACHE&lt;/code&gt; signature. If the &lt;code&gt;:&amp;lt;type&amp;gt;&lt;/code&gt; portion is omitted the entry will be created with no type if it does not exist with a type already. If a command in the project sets the type to &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;FILEPATH&lt;/code&gt; then the &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; will be converted to an absolute path.</source>
          <target state="translated">&lt;code&gt;:&amp;lt;type&amp;gt;&lt;/code&gt; 부분이 제공 되면 해당 부분은 &lt;code&gt;CACHE&lt;/code&gt; 서명에 대해 &lt;a href=&quot;../command/set#command:set&quot; id=&quot;index-1-command:set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt; 명령 문서에 지정된 유형 중 하나 여야합니다 . 경우] &lt;code&gt;:&amp;lt;type&amp;gt;&lt;/code&gt; 부분은 생략 이미 형태로 존재하지 않는 경우의 항목 유형을 더 생성한다. 프로젝트의 명령이 유형을 &lt;code&gt;PATH&lt;/code&gt; 또는 &lt;code&gt;FILEPATH&lt;/code&gt; 로 설정하면 &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; 가 절대 경로로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="18e502ccb5dd261d96c313b282aef2959856381e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;APPEND&lt;/code&gt; option is given the list is appended to any existing property value (except that empty values are ignored and not appended). If the &lt;code&gt;APPEND_STRING&lt;/code&gt; option is given the string is appended to any existing property value as string, i.e. it results in a longer string and not a list of strings. When using &lt;code&gt;APPEND&lt;/code&gt; or &lt;code&gt;APPEND_STRING&lt;/code&gt; with a property defined to support &lt;code&gt;INHERITED&lt;/code&gt; behavior (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;), no inheriting occurs when finding the initial value to append to. If the property is not already directly set in the nominated scope, the command will behave as though &lt;code&gt;APPEND&lt;/code&gt; or &lt;code&gt;APPEND_STRING&lt;/code&gt; had not been given.</source>
          <target state="translated">경우 &lt;code&gt;APPEND&lt;/code&gt; 의 옵션 (즉, 빈 값이 무시됩니다 제외하고는 추가되지 않습니다)리스트는 기존 속성 값에 추가됩니다 주어집니다. 는 IF &lt;code&gt;APPEND_STRING&lt;/code&gt; 의 옵션 문자열이 문자열로 기존 속성 값에 추가됩니다 주어,이 문자열 목록을 더 긴 문자열을 초래하지 즉. 사용하는 경우 &lt;code&gt;APPEND&lt;/code&gt; 또는 &lt;code&gt;APPEND_STRING&lt;/code&gt; 을 지원하기 위해 정의 된 속성을 &lt;code&gt;INHERITED&lt;/code&gt; 동작을 (참조 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 에 추가 할 초기 값을 찾을 때)에는 상속이 발생하지 않습니다. 지정된 범위에서 속성이 아직 직접 설정되지 않은 경우 명령은 &lt;code&gt;APPEND&lt;/code&gt; 또는 &lt;code&gt;APPEND_STRING&lt;/code&gt; 이 제공되지 않은 것처럼 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="92cb4c2b601264f6395c5e6f098dd57e6b88121f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;APPEND&lt;/code&gt; option is given the list is appended to any existing property value. If the &lt;code&gt;APPEND_STRING&lt;/code&gt; option is given the string is appended to any existing property value as string, i.e. it results in a longer string and not a list of strings. When using &lt;code&gt;APPEND&lt;/code&gt; or &lt;code&gt;APPEND_STRING&lt;/code&gt; with a property defined to support &lt;code&gt;INHERITED&lt;/code&gt; behavior (see &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt;), no inheriting occurs when finding the initial value to append to. If the property is not already directly set in the nominated scope, the command will behave as though &lt;code&gt;APPEND&lt;/code&gt; or &lt;code&gt;APPEND_STRING&lt;/code&gt; had not been given.</source>
          <target state="translated">경우 &lt;code&gt;APPEND&lt;/code&gt; 의 옵션이 주어리스트는 기존 속성 값에 추가됩니다. 는 IF &lt;code&gt;APPEND_STRING&lt;/code&gt; 의 옵션 문자열이 문자열로 기존 속성 값에 추가됩니다 주어,이 문자열 목록을 더 긴 문자열을 초래하지 즉. 사용하는 경우 &lt;code&gt;APPEND&lt;/code&gt; 또는 &lt;code&gt;APPEND_STRING&lt;/code&gt; 을 지원하기 위해 정의 된 속성을 &lt;code&gt;INHERITED&lt;/code&gt; 동작을 (참조 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 에 추가 할 초기 값을 찾을 때)에는 상속이 발생하지 않습니다. 속성이 지정된 범위에서 직접 설정되지 않은 경우 명령은 &lt;code&gt;APPEND&lt;/code&gt; 또는 &lt;code&gt;APPEND_STRING&lt;/code&gt; 이 제공되지 않은 것처럼 동작합니다 .</target>
        </trans-unit>
        <trans-unit id="b3c6d194e6610169dd91e505c431088309c1dff5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BUILTIN_TYPES_ONLY&lt;/code&gt; option is not given, the macro checks for headers &lt;code&gt;&amp;lt;sys/types.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;, and saves results in &lt;code&gt;HAVE_SYS_TYPES_H&lt;/code&gt;, &lt;code&gt;HAVE_STDINT_H&lt;/code&gt;, and &lt;code&gt;HAVE_STDDEF_H&lt;/code&gt;. The type size check automatically includes the available headers, thus supporting checks of types defined in the headers.</source>
          <target state="translated">는 IF &lt;code&gt;BUILTIN_TYPES_ONLY&lt;/code&gt; 의 옵션이 주어지지, 헤더에 대한 매크로 검사 &lt;code&gt;&amp;lt;sys/types.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; , 그리고 &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; , 및 결과 저장 &lt;code&gt;HAVE_SYS_TYPES_H&lt;/code&gt; , &lt;code&gt;HAVE_STDINT_H&lt;/code&gt; 및 &lt;code&gt;HAVE_STDDEF_H&lt;/code&gt; 을 . 유형 크기 확인에는 사용 가능한 헤더가 자동으로 포함되므로 헤더에 정의 된 유형 확인이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="87001704a9c9f037372706a35804a957f0758614" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BU_CHMOD_BUNDLE_ITEMS&lt;/code&gt; variable is set then bundle items will be marked writable before &lt;code&gt;install_name_tool&lt;/code&gt; tries to change them.</source>
          <target state="translated">는 IF &lt;code&gt;BU_CHMOD_BUNDLE_ITEMS&lt;/code&gt; 의 변수가 설정되기 전에 번들 항목은 쓰기를 표시됩니다 &lt;code&gt;install_name_tool&lt;/code&gt; 의 시도가이를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d436e35f4ed44e40987df48abb9ca1805145da65" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CONFIGURE_DEPENDS&lt;/code&gt; flag is specified, CMake will add logic to the main build system check target to rerun the flagged &lt;code&gt;GLOB&lt;/code&gt; commands at build time. If any of the outputs change, CMake will regenerate the build system.</source>
          <target state="translated">는 IF &lt;code&gt;CONFIGURE_DEPENDS&lt;/code&gt; 의 플래그가 지정되고, CMake는 플래그가 다시 실행의 주요 빌드 시스템 검사 대상에 로직을 추가합니다 &lt;code&gt;GLOB&lt;/code&gt; 의 빌드 시간에 명령을. 출력이 변경되면 CMake는 빌드 시스템을 재생성합니다.</target>
        </trans-unit>
        <trans-unit id="18451159d1b05ae5672e6e9aa3419b2ef580a3b1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CUDA&lt;/code&gt; language has been enabled we will use the directory containing the compiler as the first search location for &lt;code&gt;nvcc&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;CUDA&lt;/code&gt; 의 언어가 활성화 된 우리의 첫 번째 검색 위치로 컴파일러가 포함 된 디렉토리 사용 &lt;code&gt;nvcc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="17efef13905605a50a8bcb93c18a3796d38051e6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CUDAToolkit_ROOT&lt;/code&gt; cmake configuration variable (e.g., &lt;code&gt;-DCUDAToolkit_ROOT=/some/path&lt;/code&gt;) &lt;em&gt;or&lt;/em&gt; environment variable is defined, it will be searched. If both an environment variable &lt;strong&gt;and&lt;/strong&gt; a configuration variable are specified, the &lt;em&gt;configuration&lt;/em&gt; variable takes precedence.</source>
          <target state="translated">경우] &lt;code&gt;CUDAToolkit_ROOT&lt;/code&gt; 의 cmake 설정 변수 (예 &lt;code&gt;-DCUDAToolkit_ROOT=/some/path&lt;/code&gt; ) &lt;em&gt;또는&lt;/em&gt; 환경 변수를 정의하고,이를 검색한다. 환경 변수 &lt;strong&gt;와&lt;/strong&gt; 구성 변수를 모두 지정하면 &lt;em&gt;구성&lt;/em&gt; 변수가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="aae98b828c863d9f6a4ab587f76831d3b091e9b4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Config.cmake&lt;/code&gt; file is found and the optionally-specified version is satisfied, then the CMake &lt;a href=&quot;../../command/find_package#command:find_package&quot; id=&quot;index-3-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; command considers the package to be found and the entire library package is assumed to be complete as designed.</source>
          <target state="translated">는 IF &lt;code&gt;Config.cmake&lt;/code&gt; 의 파일이 발견되고, 선택적으로 지정된 버전이 만족, 다음 CMake의 &lt;a href=&quot;../../command/find_package#command:find_package&quot; id=&quot;index-3-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; 명령은 패키지를 찾을 수 간주하고 전체 라이브러리 패키지 설계로 완전한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="36ef645431ac06a56a904be0aeb52d0750364741" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;DEPFILE&lt;/code&gt; argument is relative, it should be relative to &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt;&lt;/a&gt;, and any relative paths inside the &lt;code&gt;DEPFILE&lt;/code&gt; should also be relative to &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-1-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt;&lt;/a&gt; (see policy &lt;a href=&quot;../policy/cmp0116#policy:CMP0116&quot; id=&quot;index-0-policy:CMP0116&quot;&gt;&lt;code&gt;CMP0116&lt;/code&gt;&lt;/a&gt;. This policy is always &lt;code&gt;NEW&lt;/code&gt; for &lt;a href=&quot;../manual/cmake-generators.7#makefile-generators&quot;&gt;Makefile Generators&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627cf4bf20c57c39f86cc6bf24d6cbbb67544070" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; argument is provided then targets in the subdirectory will not be included in the &lt;code&gt;ALL&lt;/code&gt; target of the parent directory by default, and will be excluded from IDE project files. Users must explicitly build targets in the subdirectory. This is meant for use when the subdirectory contains a separate part of the project that is useful but not necessary, such as a set of examples. Typically the subdirectory should contain its own &lt;a href=&quot;project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; command invocation so that a full build system will be generated in the subdirectory (such as a VS IDE solution file). Note that inter-target dependencies supersede this exclusion. If a target built by the parent project depends on a target in the subdirectory, the dependee target will be included in the parent project build system to satisfy the dependency.</source>
          <target state="translated">는 IF &lt;code&gt;EXCLUDE_FROM_ALL&lt;/code&gt; 의 인수 후 제공되는 서브 디렉토리의 목표는에 포함되지 않습니다 &lt;code&gt;ALL&lt;/code&gt; 에 기본적으로 상위 디렉토리의 대상 및 IDE 프로젝트 파일에서 제외됩니다. 사용자는 서브 디렉토리에 명시 적으로 대상을 빌드해야합니다. 이는 서브 디렉토리에 예제 세트와 같이 유용하지만 필요하지 않은 별도의 프로젝트 부분이 포함 된 경우에 사용됩니다. 일반적으로 서브 디렉토리는 자체 &lt;a href=&quot;project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 포함해야합니다.전체 빌드 시스템이 서브 디렉토리 (예 : VS IDE 솔루션 파일)에 생성되도록 명령 호출. 대상 간 종속성이이 제외를 대체합니다. 상위 프로젝트가 빌드 한 대상이 서브 디렉토리의 대상에 종속되는 경우 종속 대상을 상위 프로젝트 빌드 시스템에 포함시켜 종속성을 충족시킵니다.</target>
        </trans-unit>
        <trans-unit id="612dfc91330eed12cf8e9c8d4433a2fc59f69112" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;INHERITED&lt;/code&gt; option is given, then the &lt;a href=&quot;get_property#command:get_property&quot; id=&quot;index-3-command:get_property&quot;&gt;&lt;code&gt;get_property()&lt;/code&gt;&lt;/a&gt; command will chain up to the next higher scope when the requested property is not set in the scope given to the command.</source>
          <target state="translated">경우 &lt;code&gt;INHERITED&lt;/code&gt; 옵션이 주어 다음 &lt;a href=&quot;get_property#command:get_property&quot; id=&quot;index-3-command:get_property&quot;&gt; &lt;code&gt;get_property()&lt;/code&gt; &lt;/a&gt; 다음으로 높은 범위에 명령 의지 체인까지가 요청 된 속성은 명령에 주어진 범위에 설정되지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="88ebba1c8ea161fb5d5e2741ab907eb160257684" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;INSTALL_PREFIX&lt;/code&gt; argument is passed, this is used as base path to calculate all the relative paths. The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; argument must be an absolute path. If this argument is not passed, the &lt;a href=&quot;../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-1-variable:CMAKE_INSTALL_PREFIX&quot;&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;&lt;/a&gt; variable will be used instead. The default value is good when generating a FooConfig.cmake file to use your package from the install tree. When generating a FooConfig.cmake file to use your package from the build tree this option should be used.</source>
          <target state="translated">는 IF &lt;code&gt;INSTALL_PREFIX&lt;/code&gt; 의 인수가 전달되고,이 모든 상대 경로를 계산하는 기본 경로로 사용됩니다. &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 인수 절대 경로이어야한다. 이 인수가 전달되지 않으면 &lt;a href=&quot;../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX&quot; id=&quot;index-1-variable:CMAKE_INSTALL_PREFIX&quot;&gt; &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; &lt;/a&gt; 변수가 대신 사용됩니다. 설치 트리에서 패키지를 사용하기 위해 FooConfig.cmake 파일을 생성 할 때 기본값이 좋습니다. 빌드 트리에서 패키지를 사용하기 위해 FooConfig.cmake 파일을 생성 할 때이 옵션을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="64279e21a7d26c7d1e69239ad7f7694b2573dbf6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;MODULE&lt;/code&gt; option is not specfied in the above signature, CMake first searches for the package using Module mode. Then, if the package is not found, it searches again using Config mode. A user may set the variable &lt;a href=&quot;../variable/cmake_find_package_prefer_config#variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot; id=&quot;index-0-variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot;&gt;&lt;code&gt;CMAKE_FIND_PACKAGE_PREFER_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;TRUE&lt;/code&gt; to direct CMake first search using Config mode before falling back to Module mode.</source>
          <target state="translated">는 IF &lt;code&gt;MODULE&lt;/code&gt; 옵션은 위의 서명에 specfied되지 않으며, 패키지 CMake 첫번째 검색 모듈 모드를 사용하여. 그런 다음 패키지를 찾지 못하면 구성 모드를 사용하여 다시 검색합니다. 사용자는 &lt;a href=&quot;../variable/cmake_find_package_prefer_config#variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot; id=&quot;index-0-variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot;&gt; &lt;code&gt;CMAKE_FIND_PACKAGE_PREFER_CONFIG&lt;/code&gt; &lt;/a&gt; 변수 를 &lt;code&gt;TRUE&lt;/code&gt; 로 설정하여 모듈 모드로 돌아 가기 전에 구성 모드를 사용하여 CMake 첫 번째 검색을 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42f6f8b192382b7a7b6cf8792663ac10c34c1a95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;MODULE&lt;/code&gt; option is not specified in the above signature, CMake first searches for the package using Module mode. Then, if the package is not found, it searches again using Config mode. A user may set the variable &lt;a href=&quot;../variable/cmake_find_package_prefer_config#variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot; id=&quot;index-0-variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot;&gt;&lt;code&gt;CMAKE_FIND_PACKAGE_PREFER_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;TRUE&lt;/code&gt; to direct CMake first search using Config mode before falling back to Module mode.</source>
          <target state="translated">는 IF &lt;code&gt;MODULE&lt;/code&gt; 옵션은 위의 서명에 지정되지 않은 패키지에 대한 CMake 첫번째 검색 모듈 모드를 사용하여. 그런 다음 패키지를 찾을 수 없으면 Config 모드를 사용하여 다시 검색합니다. 사용자는 &lt;a href=&quot;../variable/cmake_find_package_prefer_config#variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot; id=&quot;index-0-variable:CMAKE_FIND_PACKAGE_PREFER_CONFIG&quot;&gt; &lt;code&gt;CMAKE_FIND_PACKAGE_PREFER_CONFIG&lt;/code&gt; &lt;/a&gt; 변수 를 &lt;code&gt;TRUE&lt;/code&gt; 로 설정하여 모듈 모드로 돌아 가기 전에 구성 모드를 사용하여 CMake 첫 번째 검색을 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9648b83f1bad51b37424088974b5cbf3e0313f7d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;NO_DEPENDS&lt;/code&gt; option is specified, the step target will not depend on the dependencies of the external project (i.e. on any dependencies of the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; custom target created by &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-3-command:externalproject_add&quot;&gt;&lt;code&gt;ExternalProject_Add()&lt;/code&gt;&lt;/a&gt;). This is usually safe for the &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt; steps, since they do not typically require that the dependencies are updated and built. Using &lt;code&gt;NO_DEPENDS&lt;/code&gt; for any of the other pre-defined steps, however, may break parallel builds. Only use &lt;code&gt;NO_DEPENDS&lt;/code&gt; where it is certain that the named steps genuinely do not have dependencies. For custom steps, consider whether or not the custom commands require the dependencies to be configured, built and installed.</source>
          <target state="translated">는 IF &lt;code&gt;NO_DEPENDS&lt;/code&gt; 의 옵션을 지정, 단계 목표 (의 종속성에 즉, 외부 프로젝트의 의존성에 의존하지 않습니다 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; 에 의해 만들어진 사용자 지정 대상 &lt;a href=&quot;#command:externalproject_add&quot; id=&quot;index-3-command:externalproject_add&quot;&gt; &lt;code&gt;ExternalProject_Add()&lt;/code&gt; &lt;/a&gt; ). 일반적으로 &lt;code&gt;download&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; 및 &lt;code&gt;patch&lt;/code&gt; 단계에서 안전합니다. 일반적으로 종속성을 업데이트하고 빌드 할 필요가 없기 때문입니다. 그러나 다른 사전 정의 된 단계에 &lt;code&gt;NO_DEPENDS&lt;/code&gt; 를 사용하면 병렬 빌드가 중단 될 수 있습니다. &lt;code&gt;NO_DEPENDS&lt;/code&gt; 만 사용여기서 명명 된 단계에 진정으로 의존성이없는 것이 확실합니다. 사용자 정의 단계의 경우 사용자 정의 명령에 종속성을 구성, 빌드 및 설치해야하는지 여부를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="30d2ddbcab2f19a67f471cb639a405b338e0cb82" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PARENT_SCOPE&lt;/code&gt; option is given the variable will be set in the scope above the current scope. Each new directory or function creates a new scope. This command will set the value of a variable into the parent directory or calling function (whichever is applicable to the case at hand). The previous state of the variable&amp;rsquo;s value stays the same in the current scope (e.g., if it was undefined before, it is still undefined and if it had a value, it is still that value).</source>
          <target state="translated">는 IF &lt;code&gt;PARENT_SCOPE&lt;/code&gt; 의 옵션이 주어 변수는 현재 범위 위의 범위에 설정됩니다. 각각의 새로운 디렉토리 또는 함수는 새로운 범위를 만듭니다. 이 명령은 변수의 값을 상위 디렉토리 또는 호출 함수 (현재 상황에 해당하는 것)로 설정합니다. 변수 값의 이전 상태는 현재 범위에서 동일하게 유지됩니다 (예 : 이전에 정의되지 않은 경우 여전히 정의되지 않았으며 값이있는 경우 여전히 해당 값임).</target>
        </trans-unit>
        <trans-unit id="eadf71f4f94b2def350f45bdc7e46e32660a0670" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PARENT_SCOPE&lt;/code&gt; option is given the variable will be set in the scope above the current scope. Each new directory or function creates a new scope. This command will set the value of a variable into the parent directory or calling function (whichever is applicable to the case at hand). The previous state of the variable's value stays the same in the current scope (e.g., if it was undefined before, it is still undefined and if it had a value, it is still that value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afab6f67fc04819ba850074a45b394deefc743e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;QUIET_ON_EMPTY&lt;/code&gt; option is used, if only one type of package was requested, and no packages belonging to that category were found, then no output (including the &lt;code&gt;DESCRIPTION&lt;/code&gt;) is printed or added to the &lt;code&gt;VAR&lt;/code&gt; variable.</source>
          <target state="translated">경우] &lt;code&gt;QUIET_ON_EMPTY&lt;/code&gt; 의 패키지의 하나의 타입이 요청 된 경우 옵션이 이용되고, 그 카테고리에 속하는 어떠한 패키지가 발견되지 않았다 (포함 일절 출력 &lt;code&gt;DESCRIPTION&lt;/code&gt; ) 프린트되지 않거나 추가되는 &lt;code&gt;VAR&lt;/code&gt; 의 변수.</target>
        </trans-unit>
        <trans-unit id="914314f70eac980ec014938b5b8595c651d89dce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SET&lt;/code&gt; option is given the variable is set to a boolean value indicating whether the property has been set. If the &lt;code&gt;DEFINED&lt;/code&gt; option is given the variable is set to a boolean value indicating whether the property has been defined such as with the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">는 IF &lt;code&gt;SET&lt;/code&gt; 의 옵션이 주어 변수는 속성이 설정되어 있는지 여부를 나타내는 부울 값으로 설정된다. 는 IF &lt;code&gt;DEFINED&lt;/code&gt; 옵션은 변수가 건물이와 같은 정의되었는지를 나타내는 부울 값으로 설정된다 주어진다 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-1-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령.</target>
        </trans-unit>
        <trans-unit id="30165bc362af77b1c1f9688b6b04fa5a20876aa2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SOURCE_DATE_EPOCH&lt;/code&gt; environment variable is set, its value will be used instead of the current time. See &lt;a href=&quot;https://reproducible-builds.org/specs/source-date-epoch/&quot;&gt;https://reproducible-builds.org/specs/source-date-epoch/&lt;/a&gt; for details.</source>
          <target state="translated">경우] &lt;code&gt;SOURCE_DATE_EPOCH&lt;/code&gt; 의 환경 변수가 설정되고, 그 값은 현재 시간 대신 사용될 것이다. 자세한 내용은 &lt;a href=&quot;https://reproducible-builds.org/specs/source-date-epoch/&quot;&gt;https://reproducible-builds.org/specs/source-date-epoch/&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4bd6972740f597018508b2c092ce10433e6d5fea" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SYSTEM&lt;/code&gt; option is given, the compiler will be told the directories are meant as system include directories on some platforms. Signalling this setting might achieve effects such as the compiler skipping warnings, or these fixed-install system files not being considered in dependency calculations - see compiler docs.</source>
          <target state="translated">는 IF &lt;code&gt;SYSTEM&lt;/code&gt; 옵션이 주어 컴파일러는 시스템이 일부 플랫폼 디렉토리를 포함로 디렉토리를 의미 말했다됩니다. 이 설정을 알리면 컴파일러 건너 뛰기 경고 또는 종속성 계산에서 고려되지 않는 이러한 고정 설치 시스템 파일과 같은 효과를 얻을 수 있습니다 (컴파일러 문서 참조).</target>
        </trans-unit>
        <trans-unit id="bb665adb57740d6563791f5ce9eb2caf79451b6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;filename&lt;/code&gt; is either &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt;, it has no extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7a98fc24f3b4bb6be9f96344b8c19e843e5ab3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;moc&lt;/code&gt; output file of a header is included by a source, it will be generated in a different location than if it was not included. This is described in the section &lt;a href=&quot;#output-file-location&quot;&gt;Output file location&lt;/a&gt;.</source>
          <target state="translated">헤더 의 &lt;code&gt;moc&lt;/code&gt; 출력 파일이 소스에 포함 된 경우 포함되지 않은 경우와 다른 위치에 생성됩니다. 이에 대한 내용은 &lt;a href=&quot;#output-file-location&quot;&gt;출력 파일 위치&lt;/a&gt; 섹션에 설명되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7bedfd205b0a3f42156b2645185355c17f1155b0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;query.json&lt;/code&gt; file &lt;code&gt;requests&lt;/code&gt; member is missing or invalid, this member is a JSON object with a single &lt;code&gt;error&lt;/code&gt; member containing a string with an error message. Otherwise, this member contains a JSON array with a response for each entry of the &lt;code&gt;requests&lt;/code&gt; array, in the same order. Each response is</source>
          <target state="translated">는 IF &lt;code&gt;query.json&lt;/code&gt; 파일 &lt;code&gt;requests&lt;/code&gt; 구성원이 없거나 잘못이 멤버는 하나와 JSON 객체 인 &lt;code&gt;error&lt;/code&gt; 오류 메시지 문자열을 포함하는 멤버. 그렇지 않으면이 멤버에는 &lt;code&gt;requests&lt;/code&gt; 배열 의 각 항목에 대한 응답 이 동일한 JSON 배열이 포함 됩니다. 각 응답은</target>
        </trans-unit>
        <trans-unit id="cf32e6dced5532dbeb69dc080165053934332908" translate="yes" xml:space="preserve">
          <source>If the CMake generator is the &lt;code&gt;Green Hills MULTI&lt;/code&gt; and not overridden then the orginal projects settings for the GHS toolset and target system customization cache variables are propagated into the external project.</source>
          <target state="translated">CMake 생성기가 &lt;code&gt;Green Hills MULTI&lt;/code&gt; 이고 재정의되지 않은 경우 GHS 도구 세트 및 대상 시스템 사용자 정의 캐시 변수에 대한 원래 프로젝트 설정이 외부 프로젝트로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="7aa02b08f683e3b9754fad40365c97bf16a5ce42" translate="yes" xml:space="preserve">
          <source>If the CMake generator is the &lt;code&gt;Green Hills MULTI&lt;/code&gt; and not overridden then the original project&amp;rsquo;s settings for the GHS toolset and target system customization cache variables are propagated into the external project.</source>
          <target state="translated">CMake 생성기가 &lt;code&gt;Green Hills MULTI&lt;/code&gt; 이고 재정의되지 않은 경우 GHS 도구 집합 및 대상 시스템 사용자 지정 캐시 변수에 대한 원래 프로젝트의 설정이 외부 프로젝트로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="2dda889ff51a8ce1be56bcfb82d179de998a12e3" translate="yes" xml:space="preserve">
          <source>If the CUDA_PATH environment variable is defined, it will be searched for &lt;code&gt;nvcc&lt;/code&gt;.</source>
          <target state="translated">CUDA_PATH 환경 변수가 정의 된 경우 &lt;code&gt;nvcc&lt;/code&gt; 를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="ca9823519421196e081a7b84c806b7ecc94358be" translate="yes" xml:space="preserve">
          <source>If the GLVND OpenGL and GLX libraries are available, prefer them. This forces &lt;code&gt;OPENGL_gl_LIBRARY&lt;/code&gt; to be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce5d569f1d441e714f9fc634e609f93412a8cb0" translate="yes" xml:space="preserve">
          <source>If the GLVND OpenGL and GLX libraries are available, prefer them. This forces &lt;code&gt;OPENGL_gl_LIBRARY&lt;/code&gt; to be empty. This is the default if components were requested (since components correspond to GLVND libraries) or if policy &lt;a href=&quot;../policy/cmp0072#policy:CMP0072&quot; id=&quot;index-0-policy:CMP0072&quot;&gt;&lt;code&gt;CMP0072&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;NEW&lt;/code&gt;.</source>
          <target state="translated">GLVND OpenGL 및 GLX 라이브러리가 사용 가능한 경우 선호합니다. 그러면 &lt;code&gt;OPENGL_gl_LIBRARY&lt;/code&gt; 가 비워집니다. 구성 요소가 요청 된 경우 (구성 요소가 GLVND 라이브러리에 해당하므로) 정책 &lt;a href=&quot;../policy/cmp0072#policy:CMP0072&quot; id=&quot;index-0-policy:CMP0072&quot;&gt; &lt;code&gt;CMP0072&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;NEW&lt;/code&gt; 로 설정된 경우 이것이 기본값 입니다 .</target>
        </trans-unit>
        <trans-unit id="14939988c62a966844fa6c581fe15b05439214db" translate="yes" xml:space="preserve">
          <source>If the argument is a relative path and it exists in the current source directory, a file-level dependency is created on that file in the current source directory.</source>
          <target state="translated">인수가 상대 경로이고 현재 소스 디렉토리에있는 경우 현재 소스 디렉토리의 해당 파일에 파일 수준 종속성이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b33b760f7acd8416cd2c7b6a46f2034fb6702bf9" translate="yes" xml:space="preserve">
          <source>If the argument is an absolute path, a file-level dependency is created on that path.</source>
          <target state="translated">인수가 절대 경로이면 해당 경로에 파일 수준 종속성이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="c9a6f2272461199fd0c5cb8b4362b7cd32d8539c" translate="yes" xml:space="preserve">
          <source>If the argument is the name of a source file that has been added to a target or on which a source file property has been set, a file-level dependency is created on that source file.</source>
          <target state="translated">인수가 대상에 추가되었거나 소스 파일 속성이 설정된 소스 파일의 이름 인 경우 해당 소스 파일에 파일 수준 종속성이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="517435c5456f5797ac46708153a43e71aecc0dd9" translate="yes" xml:space="preserve">
          <source>If the argument is the name of a target (created by the &lt;a href=&quot;add_custom_target#command:add_custom_target&quot; id=&quot;index-1-command:add_custom_target&quot;&gt;&lt;code&gt;add_custom_target()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-1-command:add_executable&quot;&gt;&lt;code&gt;add_executable()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;add_library#command:add_library&quot; id=&quot;index-0-command:add_library&quot;&gt;&lt;code&gt;add_library()&lt;/code&gt;&lt;/a&gt; command) a target-level dependency is created to make sure the target is built before any target using this custom command. Additionally, if the target is an executable or library, a file-level dependency is created to cause the custom command to re-run whenever the target is recompiled.</source>
          <target state="translated">인수가 대상의 이름 ( &lt;a href=&quot;add_custom_target#command:add_custom_target&quot; id=&quot;index-1-command:add_custom_target&quot;&gt; &lt;code&gt;add_custom_target()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;add_executable#command:add_executable&quot; id=&quot;index-1-command:add_executable&quot;&gt; &lt;code&gt;add_executable()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;add_library#command:add_library&quot; id=&quot;index-0-command:add_library&quot;&gt; &lt;code&gt;add_library()&lt;/code&gt; &lt;/a&gt; 명령으로 생성됨 ) 인 경우 대상 수준 종속성이 생성 되어이 사용자 지정 명령을 사용하는 대상보다 먼저 대상이 빌드되었는지 확인합니다. 또한 대상이 실행 파일 또는 라이브러리 인 경우 파일 수준 종속성이 만들어져 대상이 다시 컴파일 될 때마다 사용자 지정 명령이 다시 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="127f440d15138216f83961a135ae42956d155176" translate="yes" xml:space="preserve">
          <source>If the cache entry does not exist prior to the call or the &lt;code&gt;FORCE&lt;/code&gt; option is given then the cache entry will be set to the given value. Furthermore, any normal variable binding in the current scope will be removed to expose the newly cached value to any immediately following evaluation.</source>
          <target state="translated">호출 전에 캐시 항목이 존재하지 않거나 &lt;code&gt;FORCE&lt;/code&gt; 옵션이 제공되면 캐시 항목이 제공된 값으로 설정됩니다. 또한 현재 범위의 모든 일반 변수 바인딩이 제거되어 새로 캐시 된 값이 평가 직후에 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="056a82e56fc2bbae7440dc4c505b10604d660059" translate="yes" xml:space="preserve">
          <source>If the command is unable to obtain a timestamp, the &lt;code&gt;&amp;lt;output_variable&amp;gt;&lt;/code&gt; will be set to the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">명령이 타임 스탬프를 얻을 수없는 경우 &lt;code&gt;&amp;lt;output_variable&amp;gt;&lt;/code&gt; 은 빈 문자열 &lt;code&gt;&quot;&quot;&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="78c30fffd9009e745843799c6fc686e52d950153" translate="yes" xml:space="preserve">
          <source>If the command line client executable is found the following macro is defined:</source>
          <target state="translated">명령 행 클라이언트 실행 파일이 발견되면 다음 매크로가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="8ee68900ff2dd86077ac8e980b9bce723367a651" translate="yes" xml:space="preserve">
          <source>If the command line client executable is found two macros are defined:</source>
          <target state="translated">명령 행 클라이언트 실행 파일이 발견되면 두 개의 매크로가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f2aa3a8ec48e1ef00eb148ee9c39b77423c045ce" translate="yes" xml:space="preserve">
          <source>If the component &lt;code&gt;Development&lt;/code&gt; is requested, it is &lt;strong&gt;strongly&lt;/strong&gt; recommended to also include the component &lt;code&gt;Interpreter&lt;/code&gt; to get expected result.</source>
          <target state="translated">구성 요소 경우 &lt;code&gt;Development&lt;/code&gt; 요구되고,된다 &lt;strong&gt;강하게&lt;/strong&gt; 또한 구성 요소를 포함하도록 권장 &lt;code&gt;Interpreter&lt;/code&gt; 결과를 예상 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0746bb15856aff956a9f8399555685028e89f583" translate="yes" xml:space="preserve">
          <source>If the configuration type is set via &lt;code&gt;-C &amp;lt;cfg&amp;gt;&lt;/code&gt; from the command line then this variable is populated accordingly.</source>
          <target state="translated">구성 유형이 명령 줄에서 &lt;code&gt;-C &amp;lt;cfg&amp;gt;&lt;/code&gt; 를 통해 설정되면 그에 따라이 변수가 채워집니다.</target>
        </trans-unit>
        <trans-unit id="a786d18d9166e14b02a2996c15c4d2de0163d05c" translate="yes" xml:space="preserve">
          <source>If the configure step assumed the external project uses CMake as its build system, the build step will also. Otherwise, the build step will assume a Makefile-based build and simply run &lt;code&gt;make&lt;/code&gt; with no arguments as the default build step. This can be overridden with custom build commands if required.</source>
          <target state="translated">구성 단계에서 외부 프로젝트가 CMake를 빌드 시스템으로 사용한다고 가정하면 빌드 단계도 수행됩니다. 그렇지 않으면, 빌드 단계는 Makefile 기반 빌드를 가정 하고 기본 빌드 단계로 인수없이 &lt;code&gt;make&lt;/code&gt; 를 실행 합니다. 필요한 경우 사용자 정의 빌드 명령으로이를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da9730129890fa0cd9f6e7d2e948b4e5d9e1f010" translate="yes" xml:space="preserve">
          <source>If the configure step assumed the external project uses CMake as its build system, the install step will also. Otherwise, the install step will assume a Makefile-based build and simply run &lt;code&gt;make install&lt;/code&gt; as the default build step. This can be overridden with custom install commands if required.</source>
          <target state="translated">구성 단계에서 외부 프로젝트가 CMake를 빌드 시스템으로 사용한다고 가정하면 설치 단계도 수행됩니다. 그렇지 않으면 설치 단계에서 Makefile 기반 빌드를 가정 하고 기본 빌드 단계로 &lt;code&gt;make install&lt;/code&gt; 을 실행 하면 됩니다. 필요한 경우 사용자 정의 설치 명령으로이를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19b312103b6a0fa603fb35d087009ae86c954f9a" translate="yes" xml:space="preserve">
          <source>If the dependency could not be found it sets an informative diagnostic message and calls &lt;a href=&quot;../command/return#command:return&quot; id=&quot;index-0-command:return&quot;&gt;&lt;code&gt;return()&lt;/code&gt;&lt;/a&gt; to end processing of the calling package configuration file and return to the &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-3-command:find_package&quot;&gt;&lt;code&gt;find_package()&lt;/code&gt;&lt;/a&gt; command that loaded it.</source>
          <target state="translated">종속성을 찾을 수 없으면 정보 진단 메시지를 설정하고 &lt;a href=&quot;../command/return#command:return&quot; id=&quot;index-0-command:return&quot;&gt; &lt;code&gt;return()&lt;/code&gt; &lt;/a&gt; 을 호출하여 호출 패키지 구성 파일의 처리를 종료하고 이를로드 한 &lt;a href=&quot;../command/find_package#command:find_package&quot; id=&quot;index-3-command:find_package&quot;&gt; &lt;code&gt;find_package()&lt;/code&gt; &lt;/a&gt; 명령으로 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="96fae9af91a51f71db660ede5fbb6107ac3c8d2d" translate="yes" xml:space="preserve">
          <source>If the dependency is found, and its full path does not match either &lt;code&gt;POST_INCLUDE_REGEXES&lt;/code&gt; or &lt;code&gt;POST_EXCLUDE_REGEXES&lt;/code&gt;, the full path is added to the resolved dependencies, and &lt;code&gt;file(GET_RUNTIME_DEPENDENCIES)&lt;/code&gt; recursively resolves that library&amp;rsquo;s own dependencies.</source>
          <target state="translated">종속성이 발견되고 전체 경로가 &lt;code&gt;POST_INCLUDE_REGEXES&lt;/code&gt; 또는 &lt;code&gt;POST_EXCLUDE_REGEXES&lt;/code&gt; 와 일치하지 않으면 전체 경로가 확인 된 종속성에 추가되고 &lt;code&gt;file(GET_RUNTIME_DEPENDENCIES)&lt;/code&gt; 은 해당 라이브러리의 자체 종속성을 반복적으로 확인합니다.</target>
        </trans-unit>
        <trans-unit id="011143660e39344732f267c3d51ccc911966b7fe" translate="yes" xml:space="preserve">
          <source>If the dependency is found, and its full path does not match either &lt;code&gt;POST_INCLUDE_REGEXES&lt;/code&gt; or &lt;code&gt;POST_EXCLUDE_REGEXES&lt;/code&gt;, the full path is added to the resolved dependencies, and &lt;code&gt;file(GET_RUNTIME_DEPENDENCIES)&lt;/code&gt; recursively resolves that library's own dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3d2575880313387bb2d12a2352ddada4de6b2c" translate="yes" xml:space="preserve">
          <source>If the dependency is found, and its full path matches one of the &lt;code&gt;POST_INCLUDE_REGEXES&lt;/code&gt;, the full path is added to the resolved dependencies, and &lt;code&gt;file(GET_RUNTIME_DEPENDENCIES)&lt;/code&gt; recursively resolves that library&amp;rsquo;s own dependencies. Otherwise, resolution proceeds to step 6.</source>
          <target state="translated">종속성이 발견되고 전체 경로가 &lt;code&gt;POST_INCLUDE_REGEXES&lt;/code&gt; 중 하나와 일치 하면 전체 경로가 확인 된 종속성에 추가되고 &lt;code&gt;file(GET_RUNTIME_DEPENDENCIES)&lt;/code&gt; 은 해당 라이브러리의 자체 종속성을 반복적으로 확인합니다. 그렇지 않으면 해결이 6 단계로 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="8d9187b8dce2e0248869ac89a3614d9ed097f39a" translate="yes" xml:space="preserve">
          <source>If the dependency is found, and its full path matches one of the &lt;code&gt;POST_INCLUDE_REGEXES&lt;/code&gt;, the full path is added to the resolved dependencies, and &lt;code&gt;file(GET_RUNTIME_DEPENDENCIES)&lt;/code&gt; recursively resolves that library's own dependencies. Otherwise, resolution proceeds to step 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89909557c3e9823498a99f911b0661cff9186cf4" translate="yes" xml:space="preserve">
          <source>If the dependency is found, but its full path matches one of the &lt;code&gt;POST_EXCLUDE_REGEXES&lt;/code&gt;, it is not added to the resolved dependencies, and dependency resolution stops for that dependency.</source>
          <target state="translated">종속성이 발견되었지만 전체 경로가 &lt;code&gt;POST_EXCLUDE_REGEXES&lt;/code&gt; 중 하나와 일치 하면 확인 된 종속성에 추가되지 않고 해당 종속성에 대한 종속성 확인이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="045ccc0597846f5d7d3fa926e21d9f9e8dc6e941" translate="yes" xml:space="preserve">
          <source>If the dependency starts with &lt;code&gt;@executable_path/&lt;/code&gt;, and an &lt;code&gt;EXECUTABLES&lt;/code&gt; argument is in the process of being resolved, and replacing &lt;code&gt;@executable_path/&lt;/code&gt; with the directory of the executable yields an existing file, the dependency is resolved to that file.</source>
          <target state="translated">종속성이 &lt;code&gt;@executable_path/&lt;/code&gt; 시작 하고 &lt;code&gt;EXECUTABLES&lt;/code&gt; 인수가 해결되는 중이고 &lt;code&gt;@executable_path/&lt;/code&gt; 를 실행 파일 의 디렉터리로 바꾸면 기존 파일이 생성되는 경우 종속성이 해당 파일로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="f901bbe545c313c01ae1b78203f0d2794d3c408d" translate="yes" xml:space="preserve">
          <source>If the depending file does not have any &lt;code&gt;RUNPATH&lt;/code&gt; entries, and the library exists in one of the depending file&amp;rsquo;s &lt;code&gt;RPATH&lt;/code&gt; entries, or its parents&amp;rsquo;, in that order, the dependency is resolved to that file.</source>
          <target state="translated">종속 파일에 &lt;code&gt;RUNPATH&lt;/code&gt; 항목 이없고 라이브러리가 종속 파일의 &lt;code&gt;RPATH&lt;/code&gt; 항목 중 하나 또는 상위 항목에 순서대로 존재하는 경우 종속성은 해당 파일로 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="6358d29c1db6a75ec22afec6708a57d39cded0c4" translate="yes" xml:space="preserve">
          <source>If the depending file does not have any &lt;code&gt;RUNPATH&lt;/code&gt; entries, and the library exists in one of the depending file's &lt;code&gt;RPATH&lt;/code&gt; entries, or its parents', in that order, the dependency is resolved to that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2cc8186868c77569de1bc1f17461e52dd033e3" translate="yes" xml:space="preserve">
          <source>If the directory doesn&amp;rsquo;t already exist CMake will make it.</source>
          <target state="translated">디렉토리가 존재하지 않으면 CMake가 디렉토리를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5277051d1b476ee2312d2b4ba60824506f27f58d" translate="yes" xml:space="preserve">
          <source>If the directory doesn't already exist CMake will make it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c31e21e8a219fa31aeaa8c1577f2491c58b1e5e" translate="yes" xml:space="preserve">
          <source>If the file is a build input, use the &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-0-command:configure_file&quot;&gt;&lt;code&gt;configure_file()&lt;/code&gt;&lt;/a&gt; command to update the file only when its content changes.</source>
          <target state="translated">파일이 빌드 입력 인 경우 &lt;a href=&quot;configure_file#command:configure_file&quot; id=&quot;index-0-command:configure_file&quot;&gt; &lt;code&gt;configure_file()&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 내용이 변경 될 때만 파일을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="fee07055472b9e2cc033acb1218d21549d5cc062" translate="yes" xml:space="preserve">
          <source>If the find procedure fails for a variable &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_WORKS&lt;/code&gt;, then the settings detected by or passed to the module did not work and even a simple MPI test program failed to compile.</source>
          <target state="translated">변수 &lt;code&gt;MPI_&amp;lt;lang&amp;gt;_WORKS&lt;/code&gt; 에 대해 찾기 프로 시저가 실패하면 , 모듈에 의해 감지되거나 모듈에 전달 된 설정이 작동하지 않고 간단한 MPI 테스트 프로그램도 컴파일하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="9ff69a696696bf6d47fdc234be9d3e3bc7ad5e81" translate="yes" xml:space="preserve">
          <source>If the first character in the &lt;code&gt;filename&lt;/code&gt; is a period, that period is ignored (i.e. a &lt;code&gt;filename&lt;/code&gt; like &lt;code&gt;&quot;.profile&quot;&lt;/code&gt; is treated as having no extension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4db254792119b926535d35f67a261b159bcc013" translate="yes" xml:space="preserve">
          <source>If the following variables are set to true, the respective search will be performed:</source>
          <target state="translated">다음 변수가 true로 설정되면 해당 검색이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b4c5f8892911b9443b21b3c7da7d01c077944d90" translate="yes" xml:space="preserve">
          <source>If the found thread library is pthread compatible.</source>
          <target state="translated">발견 된 스레드 라이브러리가 pthread와 호환되는 경우.</target>
        </trans-unit>
        <trans-unit id="9d5fe9b452c697badf81668a9efee5c4a2c3abcd" translate="yes" xml:space="preserve">
          <source>If the found thread library is the HP thread library.</source>
          <target state="translated">찾은 스레드 라이브러리가 HP 스레드 라이브러리 인 경우.</target>
        </trans-unit>
        <trans-unit id="55f03b1760a021f61ef39912bc60b9bc89d58ca8" translate="yes" xml:space="preserve">
          <source>If the found thread library is the win32 one.</source>
          <target state="translated">발견 된 스레드 라이브러리가 win32 인 경우.</target>
        </trans-unit>
        <trans-unit id="8afc21ba3b19f5017930dbea305ddfdc14be6e22" translate="yes" xml:space="preserve">
          <source>If the generator supports &lt;a href=&quot;../variable/cmake_generator_platform#variable:CMAKE_GENERATOR_PLATFORM&quot; id=&quot;index-0-variable:CMAKE_GENERATOR_PLATFORM&quot;&gt;&lt;code&gt;CMAKE_GENERATOR_PLATFORM&lt;/code&gt;&lt;/a&gt;, this is a string specifying the generator platform name.</source>
          <target state="translated">생성기가 &lt;a href=&quot;../variable/cmake_generator_platform#variable:CMAKE_GENERATOR_PLATFORM&quot; id=&quot;index-0-variable:CMAKE_GENERATOR_PLATFORM&quot;&gt; &lt;code&gt;CMAKE_GENERATOR_PLATFORM&lt;/code&gt; 을&lt;/a&gt; 지원 하는 경우 생성기 플랫폼 이름을 지정하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="2ac777367b9e5b8ae469973518aacfb56e0a0582" translate="yes" xml:space="preserve">
          <source>If the generator supports configuration types, then &lt;code&gt;basename_LIBRARY&lt;/code&gt; and &lt;code&gt;basename_LIBRARIES&lt;/code&gt; will be set with debug and optimized flags specifying the library to be used for the given configuration. If no build type has been set or the generator in use does not support configuration types, then &lt;code&gt;basename_LIBRARY&lt;/code&gt; and &lt;code&gt;basename_LIBRARIES&lt;/code&gt; will take only the release value, or the debug value if the release one is not set.</source>
          <target state="translated">생성기가 구성 유형을 지원하면 &lt;code&gt;basename_LIBRARY&lt;/code&gt; 및 &lt;code&gt;basename_LIBRARIES&lt;/code&gt; 는 지정된 구성에 사용할 라이브러리를 지정하는 디버그 및 최적화 된 플래그와 함께 설정됩니다. 빌드 유형이 설정되지 않았거나 사용중인 생성기가 구성 유형을 지원하지 않는 경우 &lt;code&gt;basename_LIBRARY&lt;/code&gt; 및 &lt;code&gt;basename_LIBRARIES&lt;/code&gt; 는 릴리스 값만 취하거나 릴리스 값이 설정되지 않은 경우 디버그 값만 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8a825cfea9a15f0e3c5d7b7b6c20bcefb75639c7" translate="yes" xml:space="preserve">
          <source>If the header files define the symbol as a macro it is considered available and assumed to work. If the header files declare the symbol as a function or variable then the symbol must also be available for linking (so intrinsics may not be detected). If the symbol is a type, enum value, or intrinsic it will not be recognized (consider using &lt;a href=&quot;checktypesize#module:CheckTypeSize&quot; id=&quot;index-0-module:CheckTypeSize&quot;&gt;&lt;code&gt;CheckTypeSize&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;checkcsourcecompiles#module:CheckCSourceCompiles&quot; id=&quot;index-0-module:CheckCSourceCompiles&quot;&gt;&lt;code&gt;CheckCSourceCompiles&lt;/code&gt;&lt;/a&gt;). If the check needs to be done in C++, consider using &lt;a href=&quot;checkcxxsymbolexists#module:CheckCXXSymbolExists&quot; id=&quot;index-0-module:CheckCXXSymbolExists&quot;&gt;&lt;code&gt;CheckCXXSymbolExists&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">헤더 파일이 심볼을 매크로로 정의하면 사용 가능한 것으로 간주되고 작동하는 것으로 간주됩니다. 헤더 파일이 심볼을 함수 또는 변수로 선언하는 경우 심볼을 링크에 사용할 수 있어야합니다 (따라서 내장 함수가 감지되지 않을 수 있음). 기호가 유형, 열거 형 값 또는 고유 한 경우 인식되지 않습니다 ( &lt;a href=&quot;checktypesize#module:CheckTypeSize&quot; id=&quot;index-0-module:CheckTypeSize&quot;&gt; &lt;code&gt;CheckTypeSize&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;checkcsourcecompiles#module:CheckCSourceCompiles&quot; id=&quot;index-0-module:CheckCSourceCompiles&quot;&gt; &lt;code&gt;CheckCSourceCompiles&lt;/code&gt; 사용&lt;/a&gt; ). C ++에서 점검이 필요한 경우 &lt;a href=&quot;checkcxxsymbolexists#module:CheckCXXSymbolExists&quot; id=&quot;index-0-module:CheckCXXSymbolExists&quot;&gt; &lt;code&gt;CheckCXXSymbolExists&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b39d20d6c179691c6022701af9ee3dbb591179c6" translate="yes" xml:space="preserve">
          <source>If the header files define the symbol as a macro it is considered available and assumed to work. If the header files declare the symbol as a function or variable then the symbol must also be available for linking. If the symbol is a type or enum value it will not be recognized (consider using &lt;a href=&quot;checktypesize#module:CheckTypeSize&quot; id=&quot;index-0-module:CheckTypeSize&quot;&gt;&lt;code&gt;CheckTypeSize&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;checkcxxsourcecompiles#module:CheckCXXSourceCompiles&quot; id=&quot;index-0-module:CheckCXXSourceCompiles&quot;&gt;&lt;code&gt;CheckCXXSourceCompiles&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">헤더 파일이 심볼을 매크로로 정의하면 사용 가능한 것으로 간주되고 작동하는 것으로 간주됩니다. 헤더 파일이 심볼을 함수 또는 변수로 선언하면 심볼을 링크에 사용할 수 있어야합니다. 기호가 유형 또는 열거 형 값이면 인식되지 않습니다 ( &lt;a href=&quot;checktypesize#module:CheckTypeSize&quot; id=&quot;index-0-module:CheckTypeSize&quot;&gt; &lt;code&gt;CheckTypeSize&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;checkcxxsourcecompiles#module:CheckCXXSourceCompiles&quot; id=&quot;index-0-module:CheckCXXSourceCompiles&quot;&gt; &lt;code&gt;CheckCXXSourceCompiles&lt;/code&gt; 사용&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="0247aaa07bb083238e1b60c52cf5dc6297cbe6d7" translate="yes" xml:space="preserve">
          <source>If the header files define the symbol as a macro it is considered available and assumed to work. If the header files declare the symbol as a function or variable then the symbol must also be available for linking. If the symbol is a type, enum value, or C++ template it will not be recognized: consider using the &lt;a href=&quot;checktypesize#module:CheckTypeSize&quot; id=&quot;index-0-module:CheckTypeSize&quot;&gt;&lt;code&gt;CheckTypeSize&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;checkcxxsourcecompiles#module:CheckCXXSourceCompiles&quot; id=&quot;index-0-module:CheckCXXSourceCompiles&quot;&gt;&lt;code&gt;CheckCXXSourceCompiles&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">헤더 파일이 심볼을 매크로로 정의하면 사용 가능한 것으로 간주되고 작동하는 것으로 간주됩니다. 헤더 파일이 기호를 함수 또는 변수로 선언하는 경우 해당 기호도 링크에 사용할 수 있어야합니다. 기호가 유형, 열거 형 값 또는 C ++ 템플릿이면 인식되지 않습니다 . 대신 &lt;a href=&quot;checktypesize#module:CheckTypeSize&quot; id=&quot;index-0-module:CheckTypeSize&quot;&gt; &lt;code&gt;CheckTypeSize&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;checkcxxsourcecompiles#module:CheckCXXSourceCompiles&quot; id=&quot;index-0-module:CheckCXXSourceCompiles&quot;&gt; &lt;code&gt;CheckCXXSourceCompiles&lt;/code&gt; &lt;/a&gt; 모듈을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7e4bcaa007503c90e98f66c3dcb2f0f1a74bbeb9" translate="yes" xml:space="preserve">
          <source>If the imported project has different configuration names than the current project, set the &lt;code&gt;MAP_IMPORTED_CONFIG_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; target property to specify the mapping.</source>
          <target state="translated">가져온 프로젝트의 구성 이름이 현재 프로젝트와 다른 경우 &lt;code&gt;MAP_IMPORTED_CONFIG_&amp;lt;CONFIG&amp;gt;&lt;/code&gt; 대상 특성을 설정하여 맵핑을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="8ef37225d4c049b47efcf19609de88c0aa83b198" translate="yes" xml:space="preserve">
          <source>If the includer does not define a value the above-shown default will be used and the value will appear in the cache for editing by the user.</source>
          <target state="translated">포함자가 값을 정의하지 않으면 위에 표시된 기본값이 사용되며 값은 사용자가 편집 할 수 있도록 캐시에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="7229063fd8f5d9edc3e5dcf86b3b6c20d714e674" translate="yes" xml:space="preserve">
          <source>If the input file is modified the build system will re-run CMake to re-configure the file and generate the build system again. The generated file is modified and its timestamp updated on subsequent cmake runs only if its content is changed.</source>
          <target state="translated">입력 파일이 수정되면 빌드 시스템은 CMake를 다시 실행하여 파일을 재구성하고 빌드 시스템을 다시 생성합니다. 생성 된 파일이 수정되고 후속 cmake에서 업데이트 된 타임 스탬프는 내용이 변경된 경우에만 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9bd95d4375c3f59407ec5ad3ad61f53d1415f21c" translate="yes" xml:space="preserve">
          <source>If the keyword &lt;code&gt;CLEAR&lt;/code&gt; is given then advanced variables are changed back to unadvanced. If the keyword &lt;code&gt;FORCE&lt;/code&gt; is given then the variables are made advanced. If neither &lt;code&gt;FORCE&lt;/code&gt; nor &lt;code&gt;CLEAR&lt;/code&gt; is specified, new values will be marked as advanced, but if a variable already has an advanced/non-advanced state, it will not be changed.</source>
          <target state="translated">키워드 &lt;code&gt;CLEAR&lt;/code&gt; 가 제공 되면 고급 변수가 다시 고급으로 변경됩니다. 키워드 &lt;code&gt;FORCE&lt;/code&gt; 가 제공되면 변수가 고급화됩니다. &lt;code&gt;FORCE&lt;/code&gt; 또는 &lt;code&gt;CLEAR&lt;/code&gt; 를 지정 하지 않으면 새 값이 고급으로 표시되지만 변수에 이미 고급 / 고급 상태가 아닌 경우에는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="29e13c36e2c661ac9520af9e00d1105c6af56a9f" translate="yes" xml:space="preserve">
          <source>If the last &lt;code&gt;item-name&lt;/code&gt; is &lt;code&gt;..&lt;/code&gt;, remove any trailing &lt;code&gt;directory-separator&lt;/code&gt; (&lt;code&gt;../ --&amp;gt; ..&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa11ec4d2c499822b4a97b8ea66028083c29ce86" translate="yes" xml:space="preserve">
          <source>If the left hand argument to &lt;code&gt;MATCHES&lt;/code&gt; is missing it returns false without error</source>
          <target state="translated">&lt;code&gt;MATCHES&lt;/code&gt; 에 대한 왼쪽 인수 가 없으면 오류없이 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ca976db296b62307634ed55538b2f60d1382ba12" translate="yes" xml:space="preserve">
          <source>If the libexslt library has been found</source>
          <target state="translated">libexslt 라이브러리가 발견 된 경우</target>
        </trans-unit>
        <trans-unit id="c5d69bb2712516e28654ad76b4e35e57ab49a21f" translate="yes" xml:space="preserve">
          <source>If the library file is in a macOS framework, the &lt;code&gt;Headers&lt;/code&gt; directory of the framework will also be processed as a &lt;a href=&quot;../manual/cmake-buildsystem.7#target-usage-requirements&quot;&gt;usage requirement&lt;/a&gt;. This has the same effect as passing the framework directory as an include directory.</source>
          <target state="translated">라이브러리 파일이 macOS 프레임 워크에있는 경우 프레임 워크의 &lt;code&gt;Headers&lt;/code&gt; 디렉토리도 &lt;a href=&quot;../manual/cmake-buildsystem.7#target-usage-requirements&quot;&gt;사용 요구 사항&lt;/a&gt; 으로 처리됩니다 . 이는 프레임 워크 디렉토리를 포함 디렉토리로 전달하는 것과 동일한 효과를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="a6aeaf755f136d2fa24e2f379337a38f35766919" translate="yes" xml:space="preserve">
          <source>If the library found is a framework, then &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; will be set to the full path to the framework &lt;code&gt;&amp;lt;fullPath&amp;gt;/A.framework&lt;/code&gt;. When a full path to a framework is used as a library, CMake will use a &lt;code&gt;-framework A&lt;/code&gt;, and a &lt;code&gt;-F&amp;lt;fullPath&amp;gt;&lt;/code&gt; to link the framework to the target.</source>
          <target state="translated">찾은 라이브러리가 프레임 워크 인 경우 &lt;code&gt;&amp;lt;VAR&amp;gt;&lt;/code&gt; 은 &lt;code&gt;&amp;lt;fullPath&amp;gt;/A.framework&lt;/code&gt; 프레임 워크의 전체 경로로 설정됩니다 . 프레임 워크의 전체 경로가 라이브러리로 사용되면 CMake는 &lt;code&gt;-framework A&lt;/code&gt; 및 &lt;code&gt;-F&amp;lt;fullPath&amp;gt;&lt;/code&gt; 를 사용하여 프레임 워크를 대상에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="480a847a4ec0873d542be0e2f0a384a20681eb86" translate="yes" xml:space="preserve">
          <source>If the library is available with multiple configurations, the &lt;a href=&quot;../prop_tgt/imported_configurations#prop_tgt:IMPORTED_CONFIGURATIONS&quot; id=&quot;index-0-prop_tgt:IMPORTED_CONFIGURATIONS&quot;&gt;&lt;code&gt;IMPORTED_CONFIGURATIONS&lt;/code&gt;&lt;/a&gt; target property should also be populated:</source>
          <target state="translated">라이브러리가 여러 구성으로 사용 가능한 경우 &lt;a href=&quot;../prop_tgt/imported_configurations#prop_tgt:IMPORTED_CONFIGURATIONS&quot; id=&quot;index-0-prop_tgt:IMPORTED_CONFIGURATIONS&quot;&gt; &lt;code&gt;IMPORTED_CONFIGURATIONS&lt;/code&gt; &lt;/a&gt; 대상 특성도 채워야합니다.</target>
        </trans-unit>
        <trans-unit id="18ab6b8361de4008028c2f9094dfd98c10e35918" translate="yes" xml:space="preserve">
          <source>If the library type is not specified, &lt;code&gt;MODULE&lt;/code&gt; is assumed.</source>
          <target state="translated">라이브러리 유형이 지정되지 않은 경우 &lt;code&gt;MODULE&lt;/code&gt; 가 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="663c4b7e7b52b37ae8fb04dd7eeb5e583e7b583f" translate="yes" xml:space="preserve">
          <source>If the libxml2 library has been found</source>
          <target state="translated">libxml2 라이브러리가 발견 된 경우</target>
        </trans-unit>
        <trans-unit id="23c81ae610c85776879a16001183eedc839bc079" translate="yes" xml:space="preserve">
          <source>If the libxslt library has been found</source>
          <target state="translated">libxslt 라이브러리가 발견 된 경우</target>
        </trans-unit>
        <trans-unit id="dddd335c9713542e2b0a86e70bfd6a602fa49036" translate="yes" xml:space="preserve">
          <source>If the local clone already has the commit corresponding to the hash, no &lt;code&gt;git fetch&lt;/code&gt; needs to be performed to check for changes each time CMake is re-run. This can result in a significant speed up if many external projects are being used.</source>
          <target state="translated">로컬 클론에 이미 해시에 해당하는 커밋이있는 경우 CMake를 다시 실행할 때마다 변경 사항을 확인하기 위해 &lt;code&gt;git fetch&lt;/code&gt; 를 수행 할 필요가 없습니다 . 많은 외부 프로젝트를 사용하는 경우 속도가 크게 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dbec8e724da2f9299c8c428ab998999af78c556" translate="yes" xml:space="preserve">
          <source>If the mangling for some symbol is not known then no preprocessor definition is created, and a warning is displayed.</source>
          <target state="translated">일부 기호에 대한 조작을 알 수없는 경우 프리 프로세서 정의가 작성되지 않고 경고가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e16a3a8540faf5f22a60f6df5f8a98d2d6649488" translate="yes" xml:space="preserve">
          <source>If the module provides more than one library or where other modules may also provide a library of the same name, this form is recommended for specifying where to find headers for using library &lt;code&gt;Yy&lt;/code&gt; provided by the module. Again, it would be appropriate to use this as the result variable in a &lt;a href=&quot;../command/find_path#command:find_path&quot; id=&quot;index-2-command:find_path&quot;&gt;&lt;code&gt;find_path()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de117eaafe839a260ce801f2587f20f0632b8a94" translate="yes" xml:space="preserve">
          <source>If the not-yet-resolved dependency matches any of the &lt;code&gt;PRE_EXCLUDE_REGEXES&lt;/code&gt;, dependency resolution stops for that dependency.</source>
          <target state="translated">아직 해결되지 않은 종속성이 &lt;code&gt;PRE_EXCLUDE_REGEXES&lt;/code&gt; 중 하나와 일치하면 해당 종속성에 대한 종속성 확인이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="4c0dca9c10124a53bf5e1c5b382b1989e566c5b5" translate="yes" xml:space="preserve">
          <source>If the not-yet-resolved dependency matches any of the &lt;code&gt;PRE_INCLUDE_REGEXES&lt;/code&gt;, steps 2 and 3 are skipped, and the dependency resolution proceeds to step 4.</source>
          <target state="translated">아직 해결되지 않은 종속성이 &lt;code&gt;PRE_INCLUDE_REGEXES&lt;/code&gt; 중 하나와 일치하면 2 단계와 3 단계를 건너 뛰고 종속성 해결은 4 단계로 진행합니다.</target>
        </trans-unit>
        <trans-unit id="788a913d2f05d89c7266359583c99c4baec074a3" translate="yes" xml:space="preserve">
          <source>If the output matches this regular expression the test will be marked as skipped.</source>
          <target state="translated">출력이이 정규식과 일치하면 테스트는 건너 뛴 것으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c15b6027a33ae314c140c72b5b4f6f0de1e84cb8" translate="yes" xml:space="preserve">
          <source>If the output matches this regular expression the test will fail.</source>
          <target state="translated">출력이이 정규식과 일치하면 테스트가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="7b02991fb310a7ffdd348a7041053c496a66633b" translate="yes" xml:space="preserve">
          <source>If the package configuration file cannot be found CMake will generate an error describing the problem unless the &lt;code&gt;QUIET&lt;/code&gt; argument is specified. If &lt;code&gt;REQUIRED&lt;/code&gt; is specified and the package is not found a fatal error is generated and the configure step stops executing. If &lt;code&gt;&amp;lt;PackageName&amp;gt;_DIR&lt;/code&gt; has been set to a directory not containing a configuration file CMake will ignore it and search from scratch.</source>
          <target state="translated">패키지 구성 파일을 찾을 수 없으면 CMake는 &lt;code&gt;QUIET&lt;/code&gt; 인수를 지정 하지 않으면 문제를 설명하는 오류를 생성 합니다. 경우 &lt;code&gt;REQUIRED&lt;/code&gt; 가 지정되고, 패키지가 발견되지 않은 치명적인 에러가 발생되고, 구성 단계는 실행하지 않습니다. 경우 &lt;code&gt;&amp;lt;PackageName&amp;gt;_DIR&lt;/code&gt; 디렉토리가 CMake 그것을 무시하고 처음부터 검색합니다 구성 파일을 포함하지 않는 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9c8efb888f3779aec23b79c76d6e0ed90e9f5f1" translate="yes" xml:space="preserve">
          <source>If the package provides any macros or functions, they should be listed in an additional section, but can be documented by additional &lt;code&gt;.rst:&lt;/code&gt; comment blocks immediately above where those macros or functions are defined.</source>
          <target state="translated">패키지가 매크로 또는 함수를 제공하는 경우 추가 섹션에 나열되어야하지만 매크로 또는 함수가 정의 된 바로 위의 추가 &lt;code&gt;.rst:&lt;/code&gt; 주석 블록 으로 문서화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5da447f7378b5c78b9155fa0885954bdbecc6b5" translate="yes" xml:space="preserve">
          <source>If the path is empty by this stage, add a &lt;code&gt;dot&lt;/code&gt; (normal form of &lt;code&gt;./&lt;/code&gt; is &lt;code&gt;.&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a368eb4dda2061c977829a0860a7fc373ed50c" translate="yes" xml:space="preserve">
          <source>If the path is empty, stop (the normalized form of an empty path is also an empty path).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba71580ebd5124639976ca18cb302e9953fc28b" translate="yes" xml:space="preserve">
          <source>If the platform has &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; then we will use them to compute the square root in the &lt;code&gt;mysqrt&lt;/code&gt; function. We first test for the availability of these functions using the &lt;a href=&quot;../../module/checksymbolexists#module:CheckSymbolExists&quot; id=&quot;index-0-module:CheckSymbolExists&quot;&gt;&lt;code&gt;CheckSymbolExists&lt;/code&gt;&lt;/a&gt; module in &lt;code&gt;MathFunctions/CMakeLists.txt&lt;/code&gt;. On some platforms, we will need to link to the m library. If &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; are not initially found, require the m library and try again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0bafb9a8d90e13f8a9841521905d961585723f" translate="yes" xml:space="preserve">
          <source>If the platform has &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; then we will use them to compute the square root in the &lt;code&gt;mysqrt&lt;/code&gt; function. We first test for the availability of these functions using the &lt;a href=&quot;../../module/checksymbolexists#module:CheckSymbolExists&quot; id=&quot;index-0-module:CheckSymbolExists&quot;&gt;&lt;code&gt;CheckSymbolExists&lt;/code&gt;&lt;/a&gt; module in the top-level &lt;code&gt;CMakeLists.txt&lt;/code&gt;. On some platforms, we will need to link to the m library. If &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; are not initially found, require the m library and try again.</source>
          <target state="translated">플랫폼에 &lt;code&gt;log&lt;/code&gt; 와 &lt;code&gt;exp&lt;/code&gt; 가 있으면 &lt;code&gt;mysqrt&lt;/code&gt; 함수 에서 제곱근을 계산하는 데 사용합니다 . 설명서에서는 사용하여이 기능의 가용성에 대해 첫 번째 테스트 &lt;a href=&quot;../../module/checksymbolexists#module:CheckSymbolExists&quot; id=&quot;index-0-module:CheckSymbolExists&quot;&gt; &lt;code&gt;CheckSymbolExists&lt;/code&gt; 는&lt;/a&gt; 최상위에 모듈 &lt;code&gt;CMakeLists.txt&lt;/code&gt; . 일부 플랫폼에서는 m 라이브러리에 연결해야합니다. 경우 &lt;code&gt;log&lt;/code&gt; 및 &lt;code&gt;exp&lt;/code&gt; 초기에 발견되지는 m 라이브러리를 필요로하고 다시 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="5e4f083a78b22b131f57c2a24aba53fa73c0ee07" translate="yes" xml:space="preserve">
          <source>If the previous call specified the output via a generator expression, the output specified by the current call must match in at least one configuration after evaluating generator expressions. In this case, the appended commands and dependencies apply to all configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884833f2e8da59fce1382e26656c1379a11b4480" translate="yes" xml:space="preserve">
          <source>If the project code does not set the policy explicitly, users may set it on the command line by defining the &lt;code&gt;CMAKE_POLICY_DEFAULT_CMP0056&lt;/code&gt; variable in the cache.</source>
          <target state="translated">프로젝트 코드가 명시 적으로 정책을 설정하지 않은 경우 사용자는 캐시에서 &lt;code&gt;CMAKE_POLICY_DEFAULT_CMP0056&lt;/code&gt; 변수를 정의하여 명령 줄에서 정책을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26aaad5e3dca4ff8c4c1c8ff6b182a25fb5bc34b" translate="yes" xml:space="preserve">
          <source>If the property is not defined for the nominated directory scope, an empty string is returned. In the case of &lt;code&gt;INHERITED&lt;/code&gt; properties, if the property is not found for the nominated directory scope, the search will chain to a parent scope as described for the &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt;&lt;code&gt;define_property()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">지정된 디렉토리 범위에 대해 특성이 정의되지 않은 경우 빈 문자열이 리턴됩니다. &lt;code&gt;INHERITED&lt;/code&gt; 특성 의 경우 , 지정된 디렉토리 범위에 대한 특성을 찾을 수 없으면 검색은 &lt;a href=&quot;define_property#command:define_property&quot; id=&quot;index-0-command:define_property&quot;&gt; &lt;code&gt;define_property()&lt;/code&gt; &lt;/a&gt; 명령에 설명 된대로 상위 범위로 연결됩니다 .</target>
        </trans-unit>
        <trans-unit id="b53ce9a5cafbc34a35b03719ab7b01640fc0c1c9" translate="yes" xml:space="preserve">
          <source>If the property is not set, CMake will use the value provided by &lt;a href=&quot;../variable/cmake_disable_precompile_headers#variable:CMAKE_DISABLE_PRECOMPILE_HEADERS&quot; id=&quot;index-0-variable:CMAKE_DISABLE_PRECOMPILE_HEADERS&quot;&gt;&lt;code&gt;CMAKE_DISABLE_PRECOMPILE_HEADERS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않은 경우 CMake는 &lt;a href=&quot;../variable/cmake_disable_precompile_headers#variable:CMAKE_DISABLE_PRECOMPILE_HEADERS&quot; id=&quot;index-0-variable:CMAKE_DISABLE_PRECOMPILE_HEADERS&quot;&gt; &lt;code&gt;CMAKE_DISABLE_PRECOMPILE_HEADERS&lt;/code&gt; 에서&lt;/a&gt; 제공하는 값을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8b1dc08fc655babfcf603618c21cde532ece0972" translate="yes" xml:space="preserve">
          <source>If the property is not set, and the project has set the &lt;a href=&quot;c_extensions#prop_tgt:C_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:C_EXTENSIONS&quot;&gt;&lt;code&gt;C_EXTENSIONS&lt;/code&gt;&lt;/a&gt;, the value of &lt;a href=&quot;c_extensions#prop_tgt:C_EXTENSIONS&quot; id=&quot;index-1-prop_tgt:C_EXTENSIONS&quot;&gt;&lt;code&gt;C_EXTENSIONS&lt;/code&gt;&lt;/a&gt; is set for &lt;a href=&quot;#prop_tgt:OBJC_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:OBJC_EXTENSIONS&quot;&gt;&lt;code&gt;OBJC_EXTENSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않으며, 프로젝트가 설정 한 경우 &lt;a href=&quot;c_extensions#prop_tgt:C_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:C_EXTENSIONS&quot;&gt; &lt;code&gt;C_EXTENSIONS&lt;/code&gt; 를&lt;/a&gt; ,의 값 &lt;a href=&quot;c_extensions#prop_tgt:C_EXTENSIONS&quot; id=&quot;index-1-prop_tgt:C_EXTENSIONS&quot;&gt; &lt;code&gt;C_EXTENSIONS&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;a href=&quot;#prop_tgt:OBJC_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:OBJC_EXTENSIONS&quot;&gt; &lt;code&gt;OBJC_EXTENSIONS&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0497532004112f39c7e2b1fd699eb26fe291d825" translate="yes" xml:space="preserve">
          <source>If the property is not set, and the project has set the &lt;a href=&quot;c_standard#prop_tgt:C_STANDARD&quot; id=&quot;index-0-prop_tgt:C_STANDARD&quot;&gt;&lt;code&gt;C_STANDARD&lt;/code&gt;&lt;/a&gt;, the value of &lt;a href=&quot;c_standard#prop_tgt:C_STANDARD&quot; id=&quot;index-1-prop_tgt:C_STANDARD&quot;&gt;&lt;code&gt;C_STANDARD&lt;/code&gt;&lt;/a&gt; is set for &lt;a href=&quot;#prop_tgt:OBJC_STANDARD&quot; id=&quot;index-0-prop_tgt:OBJC_STANDARD&quot;&gt;&lt;code&gt;OBJC_STANDARD&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않으며, 프로젝트가 설정 한 경우 &lt;a href=&quot;c_standard#prop_tgt:C_STANDARD&quot; id=&quot;index-0-prop_tgt:C_STANDARD&quot;&gt; &lt;code&gt;C_STANDARD&lt;/code&gt; 를&lt;/a&gt; ,의 값 &lt;a href=&quot;c_standard#prop_tgt:C_STANDARD&quot; id=&quot;index-1-prop_tgt:C_STANDARD&quot;&gt; &lt;code&gt;C_STANDARD&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;a href=&quot;#prop_tgt:OBJC_STANDARD&quot; id=&quot;index-0-prop_tgt:OBJC_STANDARD&quot;&gt; &lt;code&gt;OBJC_STANDARD&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="049e0ee49f668b6bf9a07fac62a736dfb1807cac" translate="yes" xml:space="preserve">
          <source>If the property is not set, and the project has set the &lt;a href=&quot;c_standard_required#prop_tgt:C_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:C_STANDARD_REQUIRED&quot;&gt;&lt;code&gt;C_STANDARD_REQUIRED&lt;/code&gt;&lt;/a&gt;, the value of &lt;a href=&quot;c_standard_required#prop_tgt:C_STANDARD_REQUIRED&quot; id=&quot;index-1-prop_tgt:C_STANDARD_REQUIRED&quot;&gt;&lt;code&gt;C_STANDARD_REQUIRED&lt;/code&gt;&lt;/a&gt; is set for &lt;a href=&quot;#prop_tgt:OBJC_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:OBJC_STANDARD_REQUIRED&quot;&gt;&lt;code&gt;OBJC_STANDARD_REQUIRED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않으며, 프로젝트가 설정 한 경우 &lt;a href=&quot;c_standard_required#prop_tgt:C_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:C_STANDARD_REQUIRED&quot;&gt; &lt;code&gt;C_STANDARD_REQUIRED&lt;/code&gt; 를&lt;/a&gt; ,의 값 &lt;a href=&quot;c_standard_required#prop_tgt:C_STANDARD_REQUIRED&quot; id=&quot;index-1-prop_tgt:C_STANDARD_REQUIRED&quot;&gt; &lt;code&gt;C_STANDARD_REQUIRED&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;a href=&quot;#prop_tgt:OBJC_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:OBJC_STANDARD_REQUIRED&quot;&gt; &lt;code&gt;OBJC_STANDARD_REQUIRED&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ec42359e90f0b9e4d48ae045be16802a6e5647c8" translate="yes" xml:space="preserve">
          <source>If the property is not set, and the project has set the &lt;a href=&quot;cxx_extensions#prop_tgt:CXX_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:CXX_EXTENSIONS&quot;&gt;&lt;code&gt;CXX_EXTENSIONS&lt;/code&gt;&lt;/a&gt;, the value of &lt;a href=&quot;cxx_extensions#prop_tgt:CXX_EXTENSIONS&quot; id=&quot;index-1-prop_tgt:CXX_EXTENSIONS&quot;&gt;&lt;code&gt;CXX_EXTENSIONS&lt;/code&gt;&lt;/a&gt; is set for &lt;a href=&quot;#prop_tgt:OBJCXX_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:OBJCXX_EXTENSIONS&quot;&gt;&lt;code&gt;OBJCXX_EXTENSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않으며, 프로젝트가 설정 한 경우 &lt;a href=&quot;cxx_extensions#prop_tgt:CXX_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:CXX_EXTENSIONS&quot;&gt; &lt;code&gt;CXX_EXTENSIONS&lt;/code&gt; 를&lt;/a&gt; ,의 값 &lt;a href=&quot;cxx_extensions#prop_tgt:CXX_EXTENSIONS&quot; id=&quot;index-1-prop_tgt:CXX_EXTENSIONS&quot;&gt; &lt;code&gt;CXX_EXTENSIONS&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;a href=&quot;#prop_tgt:OBJCXX_EXTENSIONS&quot; id=&quot;index-0-prop_tgt:OBJCXX_EXTENSIONS&quot;&gt; &lt;code&gt;OBJCXX_EXTENSIONS&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3cd9ccea63d6554bfdb2561bee9408bebb77293e" translate="yes" xml:space="preserve">
          <source>If the property is not set, and the project has set the &lt;a href=&quot;cxx_standard#prop_tgt:CXX_STANDARD&quot; id=&quot;index-0-prop_tgt:CXX_STANDARD&quot;&gt;&lt;code&gt;CXX_STANDARD&lt;/code&gt;&lt;/a&gt;, the value of &lt;a href=&quot;cxx_standard#prop_tgt:CXX_STANDARD&quot; id=&quot;index-1-prop_tgt:CXX_STANDARD&quot;&gt;&lt;code&gt;CXX_STANDARD&lt;/code&gt;&lt;/a&gt; is set for &lt;a href=&quot;#prop_tgt:OBJCXX_STANDARD&quot; id=&quot;index-0-prop_tgt:OBJCXX_STANDARD&quot;&gt;&lt;code&gt;OBJCXX_STANDARD&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않으며, 프로젝트가 설정 한 경우 &lt;a href=&quot;cxx_standard#prop_tgt:CXX_STANDARD&quot; id=&quot;index-0-prop_tgt:CXX_STANDARD&quot;&gt; &lt;code&gt;CXX_STANDARD&lt;/code&gt; 를&lt;/a&gt; ,의 값 &lt;a href=&quot;cxx_standard#prop_tgt:CXX_STANDARD&quot; id=&quot;index-1-prop_tgt:CXX_STANDARD&quot;&gt; &lt;code&gt;CXX_STANDARD&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;a href=&quot;#prop_tgt:OBJCXX_STANDARD&quot; id=&quot;index-0-prop_tgt:OBJCXX_STANDARD&quot;&gt; &lt;code&gt;OBJCXX_STANDARD&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7dfc36642d73a1280da12bf4b91cffcb1a7b74b5" translate="yes" xml:space="preserve">
          <source>If the property is not set, and the project has set the &lt;a href=&quot;cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:CXX_STANDARD_REQUIRED&quot;&gt;&lt;code&gt;CXX_STANDARD_REQUIRED&lt;/code&gt;&lt;/a&gt;, the value of &lt;a href=&quot;cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED&quot; id=&quot;index-1-prop_tgt:CXX_STANDARD_REQUIRED&quot;&gt;&lt;code&gt;CXX_STANDARD_REQUIRED&lt;/code&gt;&lt;/a&gt; is set for &lt;a href=&quot;#prop_tgt:OBJCXX_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:OBJCXX_STANDARD_REQUIRED&quot;&gt;&lt;code&gt;OBJCXX_STANDARD_REQUIRED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성이 설정되지 않으며, 프로젝트가 설정 한 경우 &lt;a href=&quot;cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:CXX_STANDARD_REQUIRED&quot;&gt; &lt;code&gt;CXX_STANDARD_REQUIRED&lt;/code&gt; 를&lt;/a&gt; ,의 값 &lt;a href=&quot;cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED&quot; id=&quot;index-1-prop_tgt:CXX_STANDARD_REQUIRED&quot;&gt; &lt;code&gt;CXX_STANDARD_REQUIRED&lt;/code&gt; 이&lt;/a&gt; 설정되어 &lt;a href=&quot;#prop_tgt:OBJCXX_STANDARD_REQUIRED&quot; id=&quot;index-0-prop_tgt:OBJCXX_STANDARD_REQUIRED&quot;&gt; &lt;code&gt;OBJCXX_STANDARD_REQUIRED&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="32ccf7d9cf41398c264ae645659401c9842ada84" translate="yes" xml:space="preserve">
          <source>If the provided &lt;code&gt;&amp;lt;FileName&amp;gt;&lt;/code&gt; is a relative path, it is evaluated relative to the given base directory &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;. If no base directory is provided, the default base directory will be &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">제공된 &lt;code&gt;&amp;lt;FileName&amp;gt;&lt;/code&gt; 이 상대 경로 인 경우 제공된 기본 디렉토리 &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; 를 기준으로 평가 됩니다. 기본 디렉토리가 제공되지 않으면 기본 기본 디렉토리는 &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cb8106d30205ece490c122f32ea8af6ad8654354" translate="yes" xml:space="preserve">
          <source>If the provided &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; is a relative path, it is evaluated relative to the given base directory &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;. If no base directory is provided, the default base directory will be &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-1-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">제공된 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 가 상대 경로이면 지정된 기본 디렉토리 &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; 에 대해 상대적으로 평가 됩니다. 기본 디렉토리가 제공되지 않은 경우 기본 기본 디렉토리는 &lt;a href=&quot;../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR&quot; id=&quot;index-1-variable:CMAKE_CURRENT_SOURCE_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5b42e5baadb9b450227ed74aa5d54e782655b4fb" translate="yes" xml:space="preserve">
          <source>If the required resource can be controlled by CTest you should use &lt;a href=&quot;resource_lock#prop_test:RESOURCE_LOCK&quot; id=&quot;index-0-prop_test:RESOURCE_LOCK&quot;&gt;&lt;code&gt;RESOURCE_LOCK&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#prop_test:TIMEOUT_AFTER_MATCH&quot; id=&quot;index-2-prop_test:TIMEOUT_AFTER_MATCH&quot;&gt;&lt;code&gt;TIMEOUT_AFTER_MATCH&lt;/code&gt;&lt;/a&gt;. This property should be used when only the test itself can determine when its required resources are available.</source>
          <target state="translated">CTest에서 필요한 자원을 제어 할 수있는 경우 &lt;a href=&quot;#prop_test:TIMEOUT_AFTER_MATCH&quot; id=&quot;index-2-prop_test:TIMEOUT_AFTER_MATCH&quot;&gt; &lt;code&gt;TIMEOUT_AFTER_MATCH&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;resource_lock#prop_test:RESOURCE_LOCK&quot; id=&quot;index-0-prop_test:RESOURCE_LOCK&quot;&gt; &lt;code&gt;RESOURCE_LOCK&lt;/code&gt; &lt;/a&gt; 을 사용해야합니다 . 테스트 자체만으로 필요한 자원이 사용 가능한시기를 판별 할 수있는 경우이 특성을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="8be5e3d26119a719d5d82ac446c736b74f653767" translate="yes" xml:space="preserve">
          <source>If the running version of CMake is lower than the &lt;code&gt;&amp;lt;min&amp;gt;&lt;/code&gt; required version it will stop processing the project and report an error. The optional &lt;code&gt;&amp;lt;max&amp;gt;&lt;/code&gt; version, if specified, must be at least the &lt;code&gt;&amp;lt;min&amp;gt;&lt;/code&gt; version and affects policy settings as described below. If the running version of CMake is older than 3.12, the extra &lt;code&gt;...&lt;/code&gt; dots will be seen as version component separators, resulting in the &lt;code&gt;...&amp;lt;max&amp;gt;&lt;/code&gt; part being ignored and preserving the pre-3.12 behavior of basing policies on &lt;code&gt;&amp;lt;min&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">실행중인 CMake 버전이 &lt;code&gt;&amp;lt;min&amp;gt;&lt;/code&gt; 필수 버전 보다 낮 으면 프로젝트 처리가 중지되고 오류가보고됩니다. 선택적 &lt;code&gt;&amp;lt;max&amp;gt;&lt;/code&gt; 버전은 지정된 경우 &lt;code&gt;&amp;lt;min&amp;gt;&lt;/code&gt; 버전 이상이어야하며 아래 설명 된대로 정책 설정에 영향을줍니다. CMake의 실행 버전이 3.12보다 오래된 경우 추가 &lt;code&gt;...&lt;/code&gt; 도트가 버전 구성 요소 구분 기호로 표시되어 &lt;code&gt;...&amp;lt;max&amp;gt;&lt;/code&gt; 부분이 무시되고 &lt;code&gt;&amp;lt;min&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="207467c7e9547d09795fdda12450ebc1075cbdcb" translate="yes" xml:space="preserve">
          <source>If the same sources are used to create both a shared and a static library, the uppercased symbol &lt;code&gt;${BASE_NAME}_STATIC_DEFINE&lt;/code&gt; should be used when building the static library:</source>
          <target state="translated">동일한 소스를 사용하여 공유 라이브러리와 정적 라이브러리를 모두 작성 하는 경우 정적 라이브러리를 빌드 할 때 대문자 기호 &lt;code&gt;${BASE_NAME}_STATIC_DEFINE&lt;/code&gt; 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="2298d1fe31990959aacf4b9e2c7d2d193e6ed609" translate="yes" xml:space="preserve">
          <source>If the set of inputs includes directories, this variable will specify patterns used to exclude files from them. The following patterns are added by &lt;code&gt;doxygen_add_docs()&lt;/code&gt; to ensure CMake-specific files and directories are not included in the input. If the project sets &lt;code&gt;DOXYGEN_EXCLUDE_PATTERNS&lt;/code&gt;, those contents are merged with these additional patterns rather than replacing them:</source>
          <target state="translated">입력 세트에 디렉토리가 포함 된 경우이 변수는 파일을 제외시키는 데 사용되는 패턴을 지정합니다. CMake 특정 파일 및 디렉토리가 입력에 포함되지 않도록 &lt;code&gt;doxygen_add_docs()&lt;/code&gt; 에 의해 다음 패턴이 추가됩니다 . 프로젝트가 &lt;code&gt;DOXYGEN_EXCLUDE_PATTERNS&lt;/code&gt; 를 설정 하면 해당 컨텐츠는 다음과 같은 추가 패턴과 병합되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="00d7e06570a5af7561acdbf87c2b9cfea40ede92" translate="yes" xml:space="preserve">
          <source>If the specified &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; changes and no &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; is given, a message will be printed to inform about the change.</source>
          <target state="translated">지정된 &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; 변경되고 &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; 가 제공 되지 않으면 변경 사항 을 알리는 메시지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="5bdc76dbc6acd34cdbaf058b7a4e31b4bf743d18" translate="yes" xml:space="preserve">
          <source>If the specified &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; changes, a message will be printed to inform about the change.</source>
          <target state="translated">지정된 &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; 변경되면 변경 내용을 알리는 메시지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="a2ccf9fd78c805bc88c8880bd3e8adfd660d4657" translate="yes" xml:space="preserve">
          <source>If the specified location is equal to &lt;code&gt;Resources&lt;/code&gt;, the resulting location will be the same as if the &lt;a href=&quot;../prop_tgt/resource#prop_tgt:RESOURCE&quot; id=&quot;index-1-prop_tgt:RESOURCE&quot;&gt;&lt;code&gt;RESOURCE&lt;/code&gt;&lt;/a&gt; property had been used. If the specified location is a sub-folder of &lt;code&gt;Resources&lt;/code&gt;, it will be placed into the respective sub-folder. Note: For iOS Apple uses a flat bundle layout where no &lt;code&gt;Resources&lt;/code&gt; folder exist. Therefore CMake strips the &lt;code&gt;Resources&lt;/code&gt; folder name from the specified location.</source>
          <target state="translated">지정된 위치가 &lt;code&gt;Resources&lt;/code&gt; 와 같으면 결과 위치는 &lt;a href=&quot;../prop_tgt/resource#prop_tgt:RESOURCE&quot; id=&quot;index-1-prop_tgt:RESOURCE&quot;&gt; &lt;code&gt;RESOURCE&lt;/code&gt; &lt;/a&gt; 특성이 사용 된 것과 같습니다 . 지정된 위치가 &lt;code&gt;Resources&lt;/code&gt; 의 하위 폴더 인 경우 해당 하위 폴더에 배치됩니다. 참고 : iOS의 경우 Apple은 &lt;code&gt;Resources&lt;/code&gt; 폴더가 없는 플랫 번들 레이아웃을 사용 합니다. 따라서 CMake 는 지정된 위치에서 &lt;code&gt;Resources&lt;/code&gt; 폴더 이름을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="1b3666bf44a169eb8d893fa7a3718ab95d2192cc" translate="yes" xml:space="preserve">
          <source>If the sub-project&amp;rsquo;s &lt;code&gt;CMakeLists.txt&lt;/code&gt; file is not at the top level of its source tree, the &lt;code&gt;SOURCE_SUBDIR&lt;/code&gt; option can be used to tell &lt;code&gt;FetchContent&lt;/code&gt; where to find it. The following example shows how to use that option and it also sets a variable which is meaningful to the subproject before pulling it into the main build:</source>
          <target state="translated">하위 프로젝트의 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일이 소스 트리의 최상위 수준에 있지 않은 경우 &lt;code&gt;SOURCE_SUBDIR&lt;/code&gt; 옵션을 사용하여 &lt;code&gt;FetchContent&lt;/code&gt; 를 찾을 위치를 알릴 수 있습니다. 다음 예제는 해당 옵션을 사용하는 방법을 보여 주며, 기본 빌드로 가져 오기 전에 하위 프로젝트에 의미있는 변수를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="bed2a3c69c34a738e6fc5fbfe12f4244ff139ea2" translate="yes" xml:space="preserve">
          <source>If the sub-project's &lt;code&gt;CMakeLists.txt&lt;/code&gt; file is not at the top level of its source tree, the &lt;code&gt;SOURCE_SUBDIR&lt;/code&gt; option can be used to tell &lt;code&gt;FetchContent&lt;/code&gt; where to find it. The following example shows how to use that option and it also sets a variable which is meaningful to the subproject before pulling it into the main build:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3da126920da25b9730e37e60af1cacc71aa7f8" translate="yes" xml:space="preserve">
          <source>If the target contains Fortran source files that provide modules and the compiler supports a module output directory this specifies the directory in which the modules will be placed. When this property is not set the modules will be placed in the build directory corresponding to the target&amp;rsquo;s source directory. If the variable &lt;a href=&quot;../variable/cmake_fortran_module_directory#variable:CMAKE_Fortran_MODULE_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_Fortran_MODULE_DIRECTORY&quot;&gt;&lt;code&gt;CMAKE_Fortran_MODULE_DIRECTORY&lt;/code&gt;&lt;/a&gt; is set when a target is created its value is used to initialize this property.</source>
          <target state="translated">대상에 모듈을 제공하는 포트란 소스 파일이 포함되어 있고 컴파일러가 모듈 출력 디렉토리를 지원하는 경우 모듈이 배치 될 디렉토리를 지정합니다. 이 특성을 설정하지 않으면 대상 소스 디렉토리에 해당하는 빌드 디렉토리에 모듈이 배치됩니다. 대상이 작성 될 때 변수 &lt;a href=&quot;../variable/cmake_fortran_module_directory#variable:CMAKE_Fortran_MODULE_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_Fortran_MODULE_DIRECTORY&quot;&gt; &lt;code&gt;CMAKE_Fortran_MODULE_DIRECTORY&lt;/code&gt; &lt;/a&gt; 가 설정되면 값이이 특성을 초기화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="420793b75d82cea837f6a169f91beb7fbfe6b3e4" translate="yes" xml:space="preserve">
          <source>If the target contains Fortran source files that provide modules and the compiler supports a module output directory this specifies the directory in which the modules will be placed. When this property is not set the modules will be placed in the build directory corresponding to the target's source directory. If the variable &lt;a href=&quot;../variable/cmake_fortran_module_directory#variable:CMAKE_Fortran_MODULE_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_Fortran_MODULE_DIRECTORY&quot;&gt;&lt;code&gt;CMAKE_Fortran_MODULE_DIRECTORY&lt;/code&gt;&lt;/a&gt; is set when a target is created its value is used to initialize this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9844821a39bedb63cafe3de6279c81b7e3d3637e" translate="yes" xml:space="preserve">
          <source>If the target contains ISPC source files, this specifies the directory in which the generated headers will be placed. Relative paths are treated with respect to the value of &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt;&lt;/a&gt;. When this property is not set, the headers will be placed a generator defined build directory. If the variable &lt;a href=&quot;../variable/cmake_ispc_header_directory#variable:CMAKE_ISPC_HEADER_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_ISPC_HEADER_DIRECTORY&quot;&gt;&lt;code&gt;CMAKE_ISPC_HEADER_DIRECTORY&lt;/code&gt;&lt;/a&gt; is set when a target is created its value is used to initialize this property.</source>
          <target state="translated">대상에 ISPC 소스 파일이 포함 된 경우 생성 된 헤더가 배치 될 디렉토리를 지정합니다. 상대 경로는 &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt; &lt;/a&gt; 값과 관련하여 처리됩니다 . 이 속성이 설정되지 않은 경우 헤더는 생성기 정의 빌드 디렉터리에 배치됩니다. 대상이 생성 될 때 &lt;a href=&quot;../variable/cmake_ispc_header_directory#variable:CMAKE_ISPC_HEADER_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_ISPC_HEADER_DIRECTORY&quot;&gt; &lt;code&gt;CMAKE_ISPC_HEADER_DIRECTORY&lt;/code&gt; &lt;/a&gt; 변수 가 설정되면 해당 값이이 속성을 초기화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4b6bae45b57e8e064a6a0be928bba18ce9b1d71e" translate="yes" xml:space="preserve">
          <source>If the target contains ISPC source files, this specifies the header suffix to be used for the generated headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa6481f338aeb14d63c02c3f44c0c9606ed58b0" translate="yes" xml:space="preserve">
          <source>If the target contains Swift source files, this specifies the directory in which the modules will be placed. When this property is not set, the modules will be placed in the build directory corresponding to the target&amp;rsquo;s source directory. If the variable &lt;a href=&quot;../variable/cmake_swift_module_directory#variable:CMAKE_Swift_MODULE_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_Swift_MODULE_DIRECTORY&quot;&gt;&lt;code&gt;CMAKE_Swift_MODULE_DIRECTORY&lt;/code&gt;&lt;/a&gt; is set when a target is created its value is used to initialise this property.</source>
          <target state="translated">대상에 Swift 소스 파일이 포함되어 있으면 모듈이 배치 될 디렉토리를 지정합니다. 이 특성을 설정하지 않으면 대상 소스 디렉토리에 해당하는 빌드 디렉토리에 모듈이 배치됩니다. 대상이 작성 될 때 변수 &lt;a href=&quot;../variable/cmake_swift_module_directory#variable:CMAKE_Swift_MODULE_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_Swift_MODULE_DIRECTORY&quot;&gt; &lt;code&gt;CMAKE_Swift_MODULE_DIRECTORY&lt;/code&gt; &lt;/a&gt; 가 설정되면 값이이 특성을 초기화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3fbee5a27baf32140eb1e63fac67554cd5e1e51b" translate="yes" xml:space="preserve">
          <source>If the target contains Swift source files, this specifies the directory in which the modules will be placed. When this property is not set, the modules will be placed in the build directory corresponding to the target's source directory. If the variable &lt;a href=&quot;../variable/cmake_swift_module_directory#variable:CMAKE_Swift_MODULE_DIRECTORY&quot; id=&quot;index-0-variable:CMAKE_Swift_MODULE_DIRECTORY&quot;&gt;&lt;code&gt;CMAKE_Swift_MODULE_DIRECTORY&lt;/code&gt;&lt;/a&gt; is set when a target is created its value is used to initialise this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1a7596a56f08cfdb95ae654e69a25397b52100" translate="yes" xml:space="preserve">
          <source>If the target is a JNI library, utilize the following commands to create a JNI symbolic link:</source>
          <target state="translated">대상이 JNI 라이브러리 인 경우 다음 명령을 사용하여 JNI 기호 링크를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="c71f7de5e1a977c08481189823c8eb86e2ad1711" translate="yes" xml:space="preserve">
          <source>If the target platform doesn&amp;rsquo;t support deployment, this property won&amp;rsquo;t have any effect.</source>
          <target state="translated">대상 플랫폼이 배포를 지원하지 않는 경우이 속성은 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a25babdf1b74f51d3bd0b208c83172752d2cd72c" translate="yes" xml:space="preserve">
          <source>If the target platform doesn't support deployment, this property won't have any effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a39c500f09285496f819a8ea4b55310886000f8" translate="yes" xml:space="preserve">
          <source>If the use of the -pthread compiler and linker flag is preferred then the caller can set</source>
          <target state="translated">-pthread 컴파일러 및 링커 플래그 사용이 선호되는 경우 호출자가 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d34dfaaf7fe6d9f0a7d65e18862b94d7c44c5f9" translate="yes" xml:space="preserve">
          <source>If the use of the -pthread compiler and linker flag is preferred then the caller can set this variable to TRUE. The compiler flag can only be used with the imported target. Use of both the imported target as well as this switch is highly recommended for new code.</source>
          <target state="translated">-pthread 컴파일러 및 링커 플래그 사용이 선호되는 경우 호출자는이 변수를 TRUE로 설정할 수 있습니다. 컴파일러 플래그는 가져온 대상에만 사용할 수 있습니다. 새 코드에는 가져온 대상과이 스위치를 모두 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="14e7c7f865a33eeeb669d351cf0a8bc392c36e25" translate="yes" xml:space="preserve">
          <source>If the value requested does not result in a compile flag being added for the compiler in use, a previous standard flag will be added instead. This means that using:</source>
          <target state="translated">요청 된 값으로 인해 사용중인 컴파일러에 대해 컴파일 플래그가 추가되지 않으면 이전 표준 플래그가 대신 추가됩니다. 이것은 다음을 사용하는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="114d2105a920f81751ee48b2fa305a19bdeae44f" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;CMAKE_GNUtoMS&lt;/code&gt; is set when a target is created its value is used to initialize this property. The variable must be set prior to the first command that enables a language such as &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt;&lt;code&gt;project()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../command/enable_language#command:enable_language&quot; id=&quot;index-0-command:enable_language&quot;&gt;&lt;code&gt;enable_language()&lt;/code&gt;&lt;/a&gt;. CMake provides the variable as an option to the user automatically when configuring on Windows with GNU tools.</source>
          <target state="translated">대상이 작성 될 때 변수 &lt;code&gt;CMAKE_GNUtoMS&lt;/code&gt; 가 설정되면 해당 값이이 특성을 초기화하는 데 사용됩니다. &lt;a href=&quot;../command/project#command:project&quot; id=&quot;index-0-command:project&quot;&gt; &lt;code&gt;project()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../command/enable_language#command:enable_language&quot; id=&quot;index-0-command:enable_language&quot;&gt; &lt;code&gt;enable_language()&lt;/code&gt; &lt;/a&gt; 와 같은 언어를 활성화하는 첫 번째 명령 전에 변수를 설정해야합니다 . CMake는 GNU 도구를 사용하여 Windows에서 구성 할 때 사용자에게 자동으로 변수를 옵션으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9d104b425cb6e48eb4e180bf39c26c7f7e32ceb8" translate="yes" xml:space="preserve">
          <source>If the xmllint command-line executable has been found</source>
          <target state="translated">xmllint 명령 줄 실행 파일이 발견 된 경우</target>
        </trans-unit>
        <trans-unit id="7884e3bafb039371675f08ebebfb72cbe801ce39" translate="yes" xml:space="preserve">
          <source>If the xsltproc command-line executable has been found</source>
          <target state="translated">xsltproc 명령 줄 실행 파일이 발견 된 경우</target>
        </trans-unit>
        <trans-unit id="5fb7ffb50594db936c72647917fa4e1929b4c06a" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;root-directory&lt;/code&gt;, remove any &lt;code&gt;..&lt;/code&gt; and any &lt;code&gt;directory-separators&lt;/code&gt; immediately following them. The parent of the root directory is treated as still the root directory (&lt;code&gt;/../a --&amp;gt; /a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad162c06ca8a2bd7caddbaf8ccc9ed92df99495c" translate="yes" xml:space="preserve">
          <source>If this is an &lt;a href=&quot;../manual/cmake-buildsystem.7#alias-targets&quot;&gt;Alias Target&lt;/a&gt;, this property contains the name of the target aliased.</source>
          <target state="translated">이는 경우 &lt;a href=&quot;../manual/cmake-buildsystem.7#alias-targets&quot;&gt;별칭 대상&lt;/a&gt; 이 속성은 별칭 대상의 이름이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f4e35d3ca4120e1451c8ad4af6c52f0fe815b898" translate="yes" xml:space="preserve">
          <source>If this is defined, then no SDL_main will be linked in because only applications need main(). Otherwise, it is assumed you are building an application and this module will attempt to locate and set the proper link flags as part of the returned SDL_LIBRARY variable.</source>
          <target state="translated">이것이 정의되면 응용 프로그램에만 main ()이 필요하기 때문에 SDL_main이 연결되지 않습니다. 그렇지 않으면 응용 프로그램을 빌드하고 있다고 가정하고이 모듈은 반환 된 SDL_LIBRARY 변수의 일부로 적절한 링크 플래그를 찾고 설정하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="c1b9c29febe69f2811dc139ec834f6ae9303348c" translate="yes" xml:space="preserve">
          <source>If this is not set, the test will be run with the working directory set to the binary directory associated with where the test was created (i.e. the &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt;&lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt;&lt;/a&gt; for where &lt;a href=&quot;../command/add_test#command:add_test&quot; id=&quot;index-0-command:add_test&quot;&gt;&lt;code&gt;add_test()&lt;/code&gt;&lt;/a&gt; was called).</source>
          <target state="translated">이 설정되어 있지 않은 경우, 시험은 (즉, 테스트가 생성 된 위치와 관련된 바이너리 디렉토리로 작업 디렉토리 설정과 실행됩니다 &lt;a href=&quot;../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR&quot; id=&quot;index-0-variable:CMAKE_CURRENT_BINARY_DIR&quot;&gt; &lt;code&gt;CMAKE_CURRENT_BINARY_DIR&lt;/code&gt; &lt;/a&gt; 경우에 대한 &lt;a href=&quot;../command/add_test#command:add_test&quot; id=&quot;index-0-command:add_test&quot;&gt; &lt;code&gt;add_test()&lt;/code&gt; &lt;/a&gt; 호출 된).</target>
        </trans-unit>
        <trans-unit id="745c10103d92eb5d1a49a6fd3de949b83bb8284c" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;TRUE&lt;/code&gt;, then the rpath information is not added to compiled executables. The default is to add rpath information if the platform supports it. This allows for easy running from the build tree. To omit RPATH in the install step, but not the build step, use &lt;a href=&quot;cmake_skip_install_rpath#variable:CMAKE_SKIP_INSTALL_RPATH&quot; id=&quot;index-0-variable:CMAKE_SKIP_INSTALL_RPATH&quot;&gt;&lt;code&gt;CMAKE_SKIP_INSTALL_RPATH&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이것이 &lt;code&gt;TRUE&lt;/code&gt; 로 설정 되면 rpath 정보는 컴파일 된 실행 파일에 추가되지 않습니다. 플랫폼이 지원하는 경우 기본값은 rpath 정보를 추가하는 것입니다. 이를 통해 빌드 트리에서 쉽게 실행할 수 있습니다. 설치 단계에서 RPATH를 생략하지만 빌드 단계는 생략하려면 &lt;a href=&quot;cmake_skip_install_rpath#variable:CMAKE_SKIP_INSTALL_RPATH&quot; id=&quot;index-0-variable:CMAKE_SKIP_INSTALL_RPATH&quot;&gt; &lt;code&gt;CMAKE_SKIP_INSTALL_RPATH&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7a6e673595436e0a99cea485ec03f1adeaa4667c" translate="yes" xml:space="preserve">
          <source>If this is set, no download or update steps are performed for the specified content and the &lt;code&gt;&amp;lt;lcName&amp;gt;_SOURCE_DIR&lt;/code&gt; variable returned to the caller is pointed at this location. This gives developers a way to have a separate checkout of the content that they can modify freely without interference from the build. The build simply uses that existing source, but it still defines &lt;code&gt;&amp;lt;lcName&amp;gt;_BINARY_DIR&lt;/code&gt; to point inside its own build area. Developers are strongly encouraged to use this mechanism rather than editing the sources populated in the default location, as changes to sources in the default location can be lost when content population details are changed by the project.</source>
          <target state="translated">이를 설정하면 지정된 컨텐츠에 대해 다운로드 또는 업데이트 단계가 수행되지 않으며 호출자에게 리턴 된 &lt;code&gt;&amp;lt;lcName&amp;gt;_SOURCE_DIR&lt;/code&gt; 변수가이 위치를 가리 킵니다 . 이를 통해 개발자는 빌드의 방해없이 자유롭게 수정할 수있는 컨텐츠를 별도로 체크 아웃 할 수 있습니다. 빌드는 단순히 기존 소스를 사용하지만 여전히 자체 빌드 영역 내부를 가리 &lt;code&gt;&amp;lt;lcName&amp;gt;_BINARY_DIR&lt;/code&gt; 도록 &amp;lt;lcName&amp;gt; _BINARY_DIR 을 정의 합니다. 프로젝트에서 컨텐츠 채우기 세부 사항을 변경하면 기본 위치의 소스에 대한 변경 사항이 유실 될 수 있으므로 개발자는 기본 위치에 채워진 소스를 편집하는 대신이 메커니즘을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="59453de23b218ed0ac388cabb6e9384f17c93393" translate="yes" xml:space="preserve">
          <source>If this module replaces an older version, you should set compatibility variables to cause the least disruption possible.</source>
          <target state="translated">이 모듈이 이전 버전을 대체하는 경우 가능한 최소한의 중단을 유발하도록 호환성 변수를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="d88a3acf88a63b9fc172526711ef1c0d7152f074" translate="yes" xml:space="preserve">
          <source>If this option is specified, any &lt;code&gt;-DLINK_LIBRARIES=...&lt;/code&gt; value given to the &lt;code&gt;CMAKE_FLAGS&lt;/code&gt; option will be ignored.</source>
          <target state="translated">이 옵션을 지정하면 어떤 &lt;code&gt;-DLINK_LIBRARIES=...&lt;/code&gt; 받는 주어진 값 &lt;code&gt;CMAKE_FLAGS&lt;/code&gt; 의 옵션은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="97274455e8968ea5618ce0fc8f030ed428982daf" translate="yes" xml:space="preserve">
          <source>If this property contains a &lt;a href=&quot;../manual/cmake-language.7#cmake-language-lists&quot;&gt;semicolon-separated list&lt;/a&gt;, then the first value is the command and remaining values are its arguments.</source>
          <target state="translated">이 특성에 &lt;a href=&quot;../manual/cmake-language.7#cmake-language-lists&quot;&gt;세미콜론으로 구분 된 list&lt;/a&gt; 가 포함 된 경우 첫 번째 값은 명령이고 나머지 값은 해당 인수입니다.</target>
        </trans-unit>
        <trans-unit id="02268b70ca35116337a6c0574a877c73a06db6d5" translate="yes" xml:space="preserve">
          <source>If this property is not set and policy &lt;a href=&quot;../policy/cmp0068#policy:CMP0068&quot; id=&quot;index-0-policy:CMP0068&quot;&gt;&lt;code&gt;CMP0068&lt;/code&gt;&lt;/a&gt; is not &lt;code&gt;NEW&lt;/code&gt;, the value of &lt;a href=&quot;build_with_install_rpath#prop_tgt:BUILD_WITH_INSTALL_RPATH&quot; id=&quot;index-0-prop_tgt:BUILD_WITH_INSTALL_RPATH&quot;&gt;&lt;code&gt;BUILD_WITH_INSTALL_RPATH&lt;/code&gt;&lt;/a&gt; is used in its place.</source>
          <target state="translated">이 특성이 설정되지 않고 정책 &lt;a href=&quot;../policy/cmp0068#policy:CMP0068&quot; id=&quot;index-0-policy:CMP0068&quot;&gt; &lt;code&gt;CMP0068&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;NEW&lt;/code&gt; 가 아닌 경우 &lt;a href=&quot;build_with_install_rpath#prop_tgt:BUILD_WITH_INSTALL_RPATH&quot; id=&quot;index-0-prop_tgt:BUILD_WITH_INSTALL_RPATH&quot;&gt; &lt;code&gt;BUILD_WITH_INSTALL_RPATH&lt;/code&gt; &lt;/a&gt; 값이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f6caee9db62b40c92a94a92e9c266163861ed210" translate="yes" xml:space="preserve">
          <source>If this property is not set by the user, it will be calculated at generate-time by CMake.</source>
          <target state="translated">이 속성을 사용자가 설정하지 않으면 CMake에 의해 생성시 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="5fb0fd7d35d4bc47da151d89ec484436b9593c41" translate="yes" xml:space="preserve">
          <source>If this property is not set then CMake uses the default value &lt;code&gt;MultiThreaded$&amp;lt;$&amp;lt;CONFIG:Debug&amp;gt;:Debug&amp;gt;DLL&lt;/code&gt; to select a MSVC runtime library.</source>
          <target state="translated">이 속성을 설정하지 않으면 CMake는 기본값 &lt;code&gt;MultiThreaded$&amp;lt;$&amp;lt;CONFIG:Debug&amp;gt;:Debug&amp;gt;DLL&lt;/code&gt; 을 사용하여 MSVC 런타임 라이브러리를 선택합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
