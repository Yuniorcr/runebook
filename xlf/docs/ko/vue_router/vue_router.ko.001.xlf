<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="vue_router">
    <body>
      <group id="vue_router">
        <trans-unit id="bbc943a2e601e6b13b22293e246af47a7e54b1bd" translate="yes" xml:space="preserve">
          <source>$route</source>
          <target state="translated">$route</target>
        </trans-unit>
        <trans-unit id="ae47c41f673b2d58768b8be64b33f63e643a81b0" translate="yes" xml:space="preserve">
          <source>$route.fullPath</source>
          <target state="translated">$route.fullPath</target>
        </trans-unit>
        <trans-unit id="bd933596293770a6a74175a52ae61bad2c0805eb" translate="yes" xml:space="preserve">
          <source>$route.hash</source>
          <target state="translated">$route.hash</target>
        </trans-unit>
        <trans-unit id="1b2f0bcf5085a69565f7f3dd9b2669dccab0aedd" translate="yes" xml:space="preserve">
          <source>$route.matched</source>
          <target state="translated">$route.matched</target>
        </trans-unit>
        <trans-unit id="2dcfeb60738fd374f4147229df77d39ff75b2dee" translate="yes" xml:space="preserve">
          <source>$route.name</source>
          <target state="translated">$route.name</target>
        </trans-unit>
        <trans-unit id="2ef5c591965bcc329c5ebc1dfcb687114f817e1e" translate="yes" xml:space="preserve">
          <source>$route.params</source>
          <target state="translated">$route.params</target>
        </trans-unit>
        <trans-unit id="a32363633914d08a7464643f6fd716fb4787a5a1" translate="yes" xml:space="preserve">
          <source>$route.path</source>
          <target state="translated">$route.path</target>
        </trans-unit>
        <trans-unit id="356305ca6d453ad02b108afe16317e19fef48b63" translate="yes" xml:space="preserve">
          <source>$route.query</source>
          <target state="translated">$route.query</target>
        </trans-unit>
        <trans-unit id="fb7ea86b30882f9789be7514b521bc39b211fc50" translate="yes" xml:space="preserve">
          <source>$route.redirectedFrom</source>
          <target state="translated">$route.redirectedFrom</target>
        </trans-unit>
        <trans-unit id="e2b54aaf637a706167ffdbc58bf59fe6f6ebb14c" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2013&amp;ndash;present Evan You</source>
          <target state="translated">&amp;copy; 2013&amp;ndash; 현재 Evan You</target>
        </trans-unit>
        <trans-unit id="17056c6f3b828e55a0714e10813195205ded5f4a" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt;</source>
          <target state="translated">&amp;lt;router-link&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9e5f35bd4b348475e6427871362480610fedb18d" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `active-class` prop</source>
          <target state="translated">&amp;lt;라우터 링크&amp;gt;`액티브 클래스`소품</target>
        </trans-unit>
        <trans-unit id="0919d275fffa1249415d2c149b2fcf4833a87845" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `append` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt;`append` prop</target>
        </trans-unit>
        <trans-unit id="8e5bcf9a8806af0c5517632e7a22fc8c6b301e4e" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `event` prop</source>
          <target state="translated">&amp;lt;라우터 링크&amp;gt;`이벤트`소품</target>
        </trans-unit>
        <trans-unit id="64256a593489293bc997bac113451c603807527c" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `exact-active-class` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt;`exact-active-class` prop</target>
        </trans-unit>
        <trans-unit id="dcacc42c9c63ee714569aa3e93438661925b20a6" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `exact` prop</source>
          <target state="translated">&amp;lt;라우터 링크&amp;gt;`정확한`소품</target>
        </trans-unit>
        <trans-unit id="62a59864940863d5f5f310c91b2015056dcfe20d" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `replace` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt;`replace` prop</target>
        </trans-unit>
        <trans-unit id="17c934050ccdd19eab898c5be992e0f077075433" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `tag` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt;`tag` prop</target>
        </trans-unit>
        <trans-unit id="62afbd0360009766d040dcd101d2ac55aad87577" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `to` prop</source>
          <target state="translated">&amp;lt;라우터 링크&amp;gt;`to` prop</target>
        </trans-unit>
        <trans-unit id="b717f260fbb5dd71166ff6f87fc04bafa674fdeb" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-view&amp;gt;</source>
          <target state="translated">&amp;lt;router-view&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4917556424377e1bac5bec47f7e51fcce47c92c8" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-view&amp;gt; `name` prop</source>
          <target state="translated">&amp;lt;router-view&amp;gt;`name` prop</target>
        </trans-unit>
        <trans-unit id="d980089e856205bcec5547594f80529b4bb2dbf4" translate="yes" xml:space="preserve">
          <source>/user/:username</source>
          <target state="translated">/user/:username</target>
        </trans-unit>
        <trans-unit id="8e473671079d8bf355ffb5aeaa2520e6e19a39c5" translate="yes" xml:space="preserve">
          <source>/user/:username/post/:post_id</source>
          <target state="translated">/user/:username/post/:post_id</target>
        </trans-unit>
        <trans-unit id="3e68ca614f1e2a458bd8cee024e17ec781d46d7f" translate="yes" xml:space="preserve">
          <source>/user/evan</source>
          <target state="translated">/user/evan</target>
        </trans-unit>
        <trans-unit id="8355ca333b10656272c592da956843def0d8c9b8" translate="yes" xml:space="preserve">
          <source>/user/evan/post/123</source>
          <target state="translated">/user/evan/post/123</target>
        </trans-unit>
        <trans-unit id="9a6d6a7b23103027b10fd0068f6d2895e45a4359" translate="yes" xml:space="preserve">
          <source>/users/:username</source>
          <target state="translated">/users/:username</target>
        </trans-unit>
        <trans-unit id="3116027cc4721833458e85b5ceda4bd49d63aac4" translate="yes" xml:space="preserve">
          <source>/users/:username/posts/:postId</source>
          <target state="translated">/users/:username/posts/:postId</target>
        </trans-unit>
        <trans-unit id="010a5c17cc4ce842791191537d7456653fc56f60" translate="yes" xml:space="preserve">
          <source>/users/eduardo</source>
          <target state="translated">/users/eduardo</target>
        </trans-unit>
        <trans-unit id="752f36f8454e2b9b4da62ac0e4b63fa653f4be60" translate="yes" xml:space="preserve">
          <source>/users/eduardo/posts/123</source>
          <target state="translated">/users/eduardo/posts/123</target>
        </trans-unit>
        <trans-unit id="c97ec024acd0782a5a17e06b51c2599c06c9cc14" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;RouteLocationNormalized&lt;/code&gt;&lt;/a&gt; from - Route location we are navigating from</source>
          <target state="translated">&lt;a href=&quot;#routelocationnormalized&quot;&gt; &lt;code&gt;RouteLocationNormalized&lt;/code&gt; from-&lt;/a&gt; 우리가 탐색하는 경로 위치</target>
        </trans-unit>
        <trans-unit id="140893f30fddd4cc762bab7f8852f42931278a6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;RouteLocationNormalized&lt;/code&gt;&lt;/a&gt; to - Route location we are navigating to</source>
          <target state="translated">&lt;a href=&quot;#routelocationnormalized&quot;&gt; &lt;code&gt;RouteLocationNormalized&lt;/code&gt; to-&lt;/a&gt; 탐색 할 경로 위치</target>
        </trans-unit>
        <trans-unit id="29da293bceafae264ed4012a408da0bae2e0b980" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#routelocationraw&quot;&gt;&lt;code&gt;RouteLocationRaw&lt;/code&gt;&lt;/a&gt;: redirects to a different location</source>
          <target state="translated">&lt;a href=&quot;#routelocationraw&quot;&gt; &lt;code&gt;RouteLocationRaw&lt;/code&gt; &lt;/a&gt; : 다른 위치로 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="9e03929199dbde7bb3976cd68f0e8587dba725c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../api/index#getroutes&quot;&gt;&lt;code&gt;router.getRoutes()&lt;/code&gt;&lt;/a&gt;: get an array with all the route records.</source>
          <target state="translated">&lt;a href=&quot;../../api/index#getroutes&quot;&gt; &lt;code&gt;router.getRoutes()&lt;/code&gt; &lt;/a&gt; : 모든 경로 레코드가있는 배열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="97a5b04aada6b63d96c60fcbdc710cf51666a29d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../api/index#hasroute&quot;&gt;&lt;code&gt;router.hasRoute()&lt;/code&gt;&lt;/a&gt;: check if a route exists</source>
          <target state="translated">&lt;a href=&quot;../../api/index#hasroute&quot;&gt; &lt;code&gt;router.hasRoute()&lt;/code&gt; &lt;/a&gt; : 경로가 있는지 확인</target>
        </trans-unit>
        <trans-unit id="ad0ebedb0d96fa25852a72276465d939abbde65d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;guide/index&quot;&gt;Get started&lt;/a&gt; or play with the &lt;a href=&quot;https://github.com/vuejs/vue-router-next/tree/master/playground&quot;&gt;playground&lt;/a&gt; (see &lt;a href=&quot;https://github.com/vuejs/vue-router-next&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; to run them).</source>
          <target state="translated">&lt;a href=&quot;guide/index&quot;&gt;&lt;/a&gt;플레이 &lt;a href=&quot;https://github.com/vuejs/vue-router-next/tree/master/playground&quot;&gt;그라운드를 &lt;/a&gt;시작 하거나 플레이 하세요 ( 실행 하려면 &lt;a href=&quot;https://github.com/vuejs/vue-router-next&quot;&gt; &lt;code&gt;README.md&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a3c37385e6b17ff0279b3d5ab84993b537814527" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;guide/index&quot;&gt;Get started&lt;/a&gt; or play with the &lt;a href=&quot;https://github.com/vuejs/vue-router/tree/dev/examples&quot;&gt;examples&lt;/a&gt; (see &lt;a href=&quot;https://github.com/vuejs/vue-router/&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; to run them).</source>
          <target state="translated">&lt;a href=&quot;guide/index&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/vuejs/vue-router/tree/dev/examples&quot;&gt;예제를 &lt;/a&gt;시작 하거나 실행 하십시오 ( &lt;a href=&quot;https://github.com/vuejs/vue-router/&quot;&gt; &lt;code&gt;README.md&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="5f568f5d151a701cff64bbb17fc3099dac774ab9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; provides npm-based CDN links. The above link will always point to the latest release on npm. You can also use a specific version/tag via URLs like &lt;code&gt;https://unpkg.com/vue-router@2.0.0/dist/vue-router.js&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; 은 npm 기반 CDN 링크를 제공합니다. 위의 링크는 항상 npm의 최신 릴리스를 가리 킵니다. &lt;code&gt;https://unpkg.com/vue-router@2.0.0/dist/vue-router.js&lt;/code&gt; 와 같은 URL을 통해 특정 버전 / 태그를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="66d06707b682026c1373eb667f9329df647d5a72" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; provides npm-based CDN links. The above link will always point to the latest release on npm. You can also use a specific version/tag via URLs like &lt;code&gt;https://unpkg.com/vue-router@3.0.0/dist/vue-router.js&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; 은 npm 기반 CDN 링크를 제공합니다. 위의 링크는 항상 npm의 최신 릴리스를 가리 킵니다. &lt;code&gt;https://unpkg.com/vue-router@3.0.0/dist/vue-router.js&lt;/code&gt; 와 같은 URL을 통해 특정 버전 / 태그를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="21e43e5aa8d91f7232f080e2aebd6a9aa533d683" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://v3.vuejs.org/guide/transitions-enterleave.html&quot;&gt;All transition APIs&lt;/a&gt; work the same here.</source>
          <target state="translated">&lt;a href=&quot;https://v3.vuejs.org/guide/transitions-enterleave.html&quot;&gt;모든 전환 API&lt;/a&gt; 는 여기서 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="adc059da745e5ec5d6cb942898d0e5f4e41769a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://vuejs.org/guide/transitions.html&quot;&gt;All transition APIs&lt;/a&gt; work the same here.</source>
          <target state="translated">&lt;a href=&quot;https://vuejs.org/guide/transitions.html&quot;&gt;모든 전환 API&lt;/a&gt; 는 여기서 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="1d49455089244dca76c495760fd4f43f0ea96e6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;abstract&quot;&lt;/code&gt;: &lt;code&gt;createMemoryHistory()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;abstract&quot;&lt;/code&gt;: &lt;code&gt;createMemoryHistory()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13599e350671b7c1627bc21f58bd7d02a37c17c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;hash&quot;&lt;/code&gt;: &lt;code&gt;createWebHashHistory()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;hash&quot;&lt;/code&gt;: &lt;code&gt;createWebHashHistory()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5650929476675759ca1403b9c92d6b39b3d5965" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;history&quot;&lt;/code&gt;: &lt;code&gt;createWebHistory()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;history&quot;&lt;/code&gt;: &lt;code&gt;createWebHistory()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f26414a86c1bdbf5af5c50d608525f6f4daf7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$route&lt;/code&gt; properties Encoding</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; 속성 인코딩</target>
        </trans-unit>
        <trans-unit id="ee5023e7150c1db9bd8af9a146a524ca3c97c6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; Props</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 소품</target>
        </trans-unit>
        <trans-unit id="c27f6d9810c248e5339dfcf8978e132d7e8f2b9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; exposes a low level customization through a &lt;a href=&quot;https://v3.vuejs.org/guide/component-slots.html#scoped-slots&quot;&gt;scoped slot&lt;/a&gt;. This is a more advanced API that primarily targets library authors but can come in handy for developers as well, to build a custom component like a &lt;em&gt;NavLink&lt;/em&gt; or other.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 는 &lt;a href=&quot;https://v3.vuejs.org/guide/component-slots.html#scoped-slots&quot;&gt;범위&lt;/a&gt; 가 지정된 슬롯을 통해 낮은 수준의 사용자 지정을 노출 합니다 . 이것은 주로 라이브러리 작성자를 대상으로하지만 개발자가 &lt;em&gt;NavLink&lt;/em&gt; 또는 기타 와 같은 사용자 정의 구성 요소를 빌드하는 데에도 유용 할 수있는 고급 API입니다 .</target>
        </trans-unit>
        <trans-unit id="fcb64e7180cfede93521de20cc5070e7faf2f0d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; is preferred over hard-coded &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; for the following reasons:</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 는 다음과 같은 이유로 하드 코딩 된 &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; 보다 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="391a8cb2c3e0dcdc37873698e88d0be707ba1503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; is the component for enabling user navigation in a router-enabled app. The target location is specified with the &lt;code&gt;to&lt;/code&gt; prop. It renders as an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag with correct &lt;code&gt;href&lt;/code&gt; by default, but can be configured with the &lt;code&gt;tag&lt;/code&gt; prop. In addition, the link automatically gets an active CSS class when the target route is active.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 는 라우터 지원 앱에서 사용자 탐색을 활성화하기위한 구성 요소입니다. 대상 위치는 &lt;code&gt;to&lt;/code&gt; prop으로 지정됩니다 . 기본적 으로 올바른 &lt;code&gt;href&lt;/code&gt; 가 있는 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그로 렌더링 되지만 &lt;code&gt;tag&lt;/code&gt; 소품 으로 구성 할 수 있습니다 . 또한 대상 경로가 활성화되면 링크가 자동으로 활성 CSS 클래스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8048e254d403a196da6e8f0242ac4cdafcbf0c36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;'s &lt;code&gt;v-slot&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 의 &lt;code&gt;v-slot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="751d371787cc9b4f7b424a9cbedecf5d396458eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; Props</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 소품</target>
        </trans-unit>
        <trans-unit id="c0bd2d5da1436a6216321994bb4d448e6bc2cca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; exposes a &lt;code&gt;v-slot&lt;/code&gt; API mainly to wrap your route components with &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 는 주로 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 구성 요소로 경로 구성 요소를 래핑하기 위해 &lt;code&gt;v-slot&lt;/code&gt; API를 노출 합니다 .</target>
        </trans-unit>
        <trans-unit id="df885bc66070f82d978fea287f6e6e20438a2847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;'s &lt;code&gt;v-slot&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 의 &lt;code&gt;v-slot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e0694b3da860a23970d4b5c23750beb4b8c7afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9e7995571aef97f624448d51568b181ad8e0b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(vm: ComponentPublicInstance) =&amp;gt; any&lt;/code&gt;&lt;strong&gt;only for &lt;code&gt;beforeRouteEnter&lt;/code&gt;&lt;/strong&gt;: A callback to be executed once the navigation completes. Receives the route component instance as the parameter.</source>
          <target state="translated">&lt;code&gt;(vm: ComponentPublicInstance) =&amp;gt; any&lt;/code&gt; &lt;strong&gt;only for &lt;code&gt;beforeRouteEnter&lt;/code&gt; &lt;/strong&gt; : 탐색이 완료되면 실행할 콜백입니다. 경로 구성 요소 인스턴스를 매개 변수로받습니다.</target>
        </trans-unit>
        <trans-unit id="da9a61da8d01cc038593feae078e275df4dd15da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/foo(/foo)?/suffix&lt;/code&gt; becomes &lt;code&gt;/foo/:_(foo)?/suffix&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/foo(/foo)?/suffix&lt;/code&gt; 는 &lt;code&gt;/foo/:_(foo)?/suffix&lt;/code&gt; 가됩니다.</target>
        </trans-unit>
        <trans-unit id="e18c42f2ed3cf022191d6bfb310279aeb43075b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/foo(foo)?&lt;/code&gt; becomes &lt;code&gt;/foo:_(foo)?&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/foo(foo)?&lt;/code&gt; 가된다 &lt;code&gt;/foo:_(foo)?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3eb280ad23b158cb4d6103b2a7cd971b3ed8080d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/foo/(.*)&lt;/code&gt; becomes &lt;code&gt;/foo/:_(.*)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/foo/(.*)&lt;/code&gt; 된다 &lt;code&gt;/foo/:_(.*)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="392d3216bfd839329db24a375c347f40a038468c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Component&lt;/code&gt;: VNodes to be passed to a &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;'s &lt;code&gt;is&lt;/code&gt; prop.</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; : v- 노드는 전달되는 &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 의 &lt;code&gt;is&lt;/code&gt; 소품.</target>
        </trans-unit>
        <trans-unit id="0fcb4f3c2b2d6b4db1e76c697c631a4401d87828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; next (Optional) - Callback to validate the navigation</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 다음 기능 (선택 사항)-탐색을 확인하기위한 콜백</target>
        </trans-unit>
        <trans-unit id="aa40192fa2b6ce9811978688ea693865c7a66fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nav&lt;/code&gt; is just a regular component</source>
          <target state="translated">&lt;code&gt;Nav&lt;/code&gt; 는 단지 정규 구성 요소입니다</target>
        </trans-unit>
        <trans-unit id="d4d4da5b1052cfaa8e18ae6636b0a0bdb2226cf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserEmailsSubscriptions&lt;/code&gt;, &lt;code&gt;UserProfile&lt;/code&gt;, &lt;code&gt;UserProfilePreview&lt;/code&gt; are nested view components</source>
          <target state="translated">&lt;code&gt;UserEmailsSubscriptions&lt;/code&gt; , &lt;code&gt;UserProfile&lt;/code&gt; , &lt;code&gt;UserProfilePreview&lt;/code&gt; 는 중첩 된보기 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="f2833ce2bfd0bf668e88aee765843e3b572ff716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSettings&lt;/code&gt; is the parent view component</source>
          <target state="translated">&lt;code&gt;UserSettings&lt;/code&gt; 는 상위보기 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="339bb7bce4bdd7501eede7218e8fffaf06787009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSettings&lt;/code&gt; is the view component</source>
          <target state="translated">&lt;code&gt;UserSettings&lt;/code&gt; 는 뷰 구성 요소입니다</target>
        </trans-unit>
        <trans-unit id="a56de1f1f64b8ea396997a9f32709d577b1fbb45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aborted&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt; was returned inside of a navigation guard to the navigation.</source>
          <target state="translated">&lt;code&gt;aborted&lt;/code&gt; : 내비게이션 가드 내에서 내비게이션에 대한 &lt;code&gt;false&lt;/code&gt; 가 반환되었습니다.</target>
        </trans-unit>
        <trans-unit id="c248d8bb241f09ffb6fbc7f22d684eb0a1d8b67a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abstract&lt;/code&gt;: works in all JavaScript environments, e.g. server-side with Node.js. &lt;strong&gt;The router will automatically be forced into this mode if no browser API is present.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;abstract&lt;/code&gt; : 모든 JavaScript 환경에서 작동합니다 (예 : Node.js가있는 서버 측). &lt;strong&gt;브라우저 API가 없으면 라우터는이 모드로 자동 설정됩니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af3a1eca3ef1a5555c0872eef167faab0dbff5fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; allows you to append the path to the &lt;code&gt;current&lt;/code&gt; route (as with &lt;a href=&quot;#router-link-props&quot;&gt;&lt;code&gt;router-link&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 당신의 경로를 추가 할 수 있도록 &lt;code&gt;current&lt;/code&gt; (와 같은 경로를 &lt;a href=&quot;#router-link-props&quot;&gt; &lt;code&gt;router-link&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="96bff7f6f2a3e47ca24053eedc998ff1287c01cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeEnter&lt;/code&gt; guards &lt;strong&gt;only trigger when entering the route&lt;/strong&gt;, they don't trigger when the &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;hash&lt;/code&gt; change e.g. going from &lt;code&gt;/users/2&lt;/code&gt; to &lt;code&gt;/users/3&lt;/code&gt; or going from &lt;code&gt;/users/2#info&lt;/code&gt; to &lt;code&gt;/users/2#projects&lt;/code&gt;. They are only triggered when navigating &lt;strong&gt;from a different&lt;/strong&gt; route.</source>
          <target state="translated">&lt;code&gt;beforeEnter&lt;/code&gt; 가드 &lt;strong&gt;는 경로를 입력 할 때만 트리거&lt;/strong&gt; 되며 &lt;code&gt;params&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 또는 &lt;code&gt;hash&lt;/code&gt; 변경 될 때 트리거되지 않습니다 ( 예 : &lt;code&gt;/users/2&lt;/code&gt; 에서 &lt;code&gt;/users/3&lt;/code&gt; 로 이동 하거나 &lt;code&gt;/users/2#info&lt;/code&gt; 에서 &lt;code&gt;/users/2#projects&lt;/code&gt; 로 이동). . &lt;strong&gt;다른&lt;/strong&gt; 경로 &lt;strong&gt;에서&lt;/strong&gt; 탐색 할 때만 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="19879dbc4b4c2c9276d88336c28eaf6c690928f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancelled&lt;/code&gt;: A new navigation took place before the current navigation could finish. e.g. &lt;code&gt;router.push&lt;/code&gt; was called while waiting inside of a navigation guard.</source>
          <target state="translated">&lt;code&gt;cancelled&lt;/code&gt; : 현재 탐색이 완료되기 전에 새 탐색이 수행 되었습니다 . 예를 들어 내비게이션 가드 내부에서 기다리는 동안 &lt;code&gt;router.push&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="129408f980a6f71e8252a2b7d310994da58b1f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current&lt;/code&gt; is the current Route by default (most of the time you don't need to change this)</source>
          <target state="translated">&lt;code&gt;current&lt;/code&gt; 는 기본적으로 현재 경로입니다 (대부분 변경하지 않아도 됨)</target>
        </trans-unit>
        <trans-unit id="4cd075448189ead8d3d79777f8c36c42227c0955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duplicated&lt;/code&gt;: The navigation was prevented because we are already at the target location.</source>
          <target state="translated">&lt;code&gt;duplicated&lt;/code&gt; : 이미 대상 위치에 있으므로 내비게이션이 차단되었습니다.</target>
        </trans-unit>
        <trans-unit id="89d2f9ec274350ed210789ebfeb1e80035da1538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;: cancel the current navigation. If the browser URL was changed (either manually by the user or via back button), it will be reset to that of the &lt;code&gt;from&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; : 현재 탐색을 취소합니다. 브라우저 URL이 변경된 경우 (사용자가 수동으로 또는 뒤로 버튼을 통해) &lt;code&gt;from&lt;/code&gt; 경로의 URL로 재설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c2eccb3ab27ad3d3c3b585c39664bcb48cbcff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;: cancels the navigation</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; : 탐색을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="b7901311941adc2e28baff529d7b714b0fefc1c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt; is now decoded, that way it can be copied over: &lt;code&gt;router.push({ hash: $route.hash })&lt;/code&gt; and be used directly in &lt;a href=&quot;../../api/index#scrollbehavior&quot;&gt;scrollBehavior&lt;/a&gt;'s &lt;code&gt;el&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; 는 이제 디코딩되어 다음과 같이 복사 할 수 있습니다. &lt;code&gt;router.push({ hash: $route.hash })&lt;/code&gt; 및 &lt;a href=&quot;../../api/index#scrollbehavior&quot;&gt;scrollBehavior&lt;/a&gt; 의 &lt;code&gt;el&lt;/code&gt; 옵션 에서 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="189c0025be7509058d16e090465cd0385f78be80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt;: uses the URL hash for routing. Works in all Vue-supported browsers, including those that do not support HTML5 History API.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; : 라우팅을 위해 URL 해시를 사용합니다. HTML5 History API를 지원하지 않는 브라우저를 포함하여 모든 Vue 지원 브라우저에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="97eed375fc42f919f4e9b643c4bb1890cb0f7295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;: requires HTML5 History API and server config. See &lt;a href=&quot;../guide/essentials/history-mode&quot;&gt;HTML5 History Mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; : HTML5 History API 및 서버 구성이 필요합니다. &lt;a href=&quot;../guide/essentials/history-mode&quot;&gt;HTML5 히스토리 모드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b103b021b9621de589ce2ae44d1d65b12c99e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt;: resolved url. This would be the &lt;code&gt;href&lt;/code&gt; attribute of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. It contains the &lt;code&gt;base&lt;/code&gt; if any was provided.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; : 해결 된 URL. 이것은 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 요소 의 &lt;code&gt;href&lt;/code&gt; 속성입니다 . 제공된 경우 &lt;code&gt;base&lt;/code&gt; 이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="c58b2dbc0bef12a78d609ec7bf08b4f7f8e93325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt;: resolved url. This would be the &lt;code&gt;href&lt;/code&gt; attribute of an &lt;code&gt;a&lt;/code&gt; element</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; : 해결 된 URL. 이것은 것 &lt;code&gt;href&lt;/code&gt; 의 속성 &lt;code&gt;a&lt;/code&gt; 요소</target>
        </trans-unit>
        <trans-unit id="611ffa6d9619afb4b3249c4b1280720afdac83a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#active-class&quot;&gt;active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class</source>
          <target state="translated">&lt;code&gt;isActive&lt;/code&gt; : &lt;a href=&quot;#active-class&quot;&gt;활성 클래스&lt;/a&gt; 를 적용해야하는 경우 &lt;code&gt;true&lt;/code&gt; 입니다. 임의의 클래스를 적용 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="c9993767989e7bad687499bef48dec8e8dcd1831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#active-class&quot;&gt;active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class.</source>
          <target state="translated">&lt;code&gt;isActive&lt;/code&gt; : &lt;a href=&quot;#active-class&quot;&gt;활성 클래스&lt;/a&gt; 를 적용해야하는 경우 &lt;code&gt;true&lt;/code&gt; 입니다. 임의의 클래스를 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9656f6654118175ebf382e9f9c1431925bcd1855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isExactActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#exact-active-class&quot;&gt;exact active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class</source>
          <target state="translated">&lt;code&gt;isExactActive&lt;/code&gt; : &lt;a href=&quot;#exact-active-class&quot;&gt;정확한 활성 클래스&lt;/a&gt; 를 적용해야하는 경우 &lt;code&gt;true&lt;/code&gt; 입니다. 임의의 클래스를 적용 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="b8387221eaefdadb45e4d925adb2626b1aeb971c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isExactActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#exact-active-class&quot;&gt;exact active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class.</source>
          <target state="translated">&lt;code&gt;isExactActive&lt;/code&gt; : &lt;a href=&quot;#exact-active-class&quot;&gt;정확한 활성 클래스&lt;/a&gt; 를 적용해야하는 경우 &lt;code&gt;true&lt;/code&gt; 입니다. 임의의 클래스를 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2d504eaad212b1e406054d3192107cdebdcc5d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;navigate&lt;/code&gt;: function to trigger the navigation. &lt;strong&gt;It will automatically prevent events when necessary&lt;/strong&gt;, the same way &lt;code&gt;router-link&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;navigate&lt;/code&gt; : 탐색 을 트리거하는 기능입니다. &lt;strong&gt;필요할 때 자동 이벤트를 방지 할 수 있습니다&lt;/strong&gt; , 같은 방식으로 &lt;code&gt;router-link&lt;/code&gt; 않습니다</target>
        </trans-unit>
        <trans-unit id="91af7b938b42ca28c7f8180636eea2188ac32cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;navigate&lt;/code&gt;: function to trigger the navigation. &lt;strong&gt;It will automatically prevent events when necessary&lt;/strong&gt;, the same way &lt;code&gt;router-link&lt;/code&gt; does, e.g. &lt;code&gt;ctrl&lt;/code&gt; or &lt;code&gt;cmd&lt;/code&gt; + click will still be ignored by &lt;code&gt;navigate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;navigate&lt;/code&gt; : 탐색 을 트리거하는 기능입니다. &lt;strong&gt;필요한 경우 자동으로 이벤트를 방지합니다. &lt;/strong&gt; &lt;code&gt;router-link&lt;/code&gt; 와 같은 방식으로 , 예를 들어 &lt;code&gt;ctrl&lt;/code&gt; 또는 &lt;code&gt;cmd&lt;/code&gt; + 클릭은 계속 &lt;code&gt;navigate&lt;/code&gt; 의해 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="14a809e4f08b53da8fd7d37a751468791fa6a8ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized &lt;a href=&quot;#routelocationnormalized&quot;&gt;route location&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; : 정규화 된 &lt;a href=&quot;#routelocationnormalized&quot;&gt;경로 위치를&lt;/a&gt; 해결했습니다 .</target>
        </trans-unit>
        <trans-unit id="f6fbbf7066c3d9354554b2609da08e7517fcebc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized location</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; : 정규화 된 위치 확인</target>
        </trans-unit>
        <trans-unit id="2bf0f15dc1c0a7ea9b093a3c4e405463f52715e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized location.</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; : 정규화 된 위치를 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="ad4ae5a9e39a806af75882e2b086e5d5bfb57f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router-link&lt;/code&gt; exposes a low level customization through a &lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots&quot;&gt;scoped slot&lt;/a&gt;. This is a more advanced API that primarily targets library authors but can come in handy for developers as well, most of the time in a custom component like a &lt;em&gt;NavLink&lt;/em&gt; or other.</source>
          <target state="translated">&lt;code&gt;router-link&lt;/code&gt; 는 &lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots&quot;&gt;범위&lt;/a&gt; 가 지정된 슬롯을 통해 저수준 사용자 정의를 제공 합니다 . 이 라이브러리는 주로 라이브러리 작성자를 대상으로하는 고급 API이지만 대부분 &lt;em&gt;NavLink&lt;/em&gt; 또는 기타 와 같은 사용자 지정 구성 요소에서 개발자에게 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ca04f2e2a14f37a9f04ba3d616c21c1bee36880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router-view&lt;/code&gt; will display the component that corresponds to the url. You can put it anywhere to adapt it to your layout.</source>
          <target state="translated">&lt;code&gt;router-view&lt;/code&gt; 는 URL에 해당하는 구성 요소를 표시합니다. 레이아웃에 맞게 어디에나 배치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5163b9301f6ec898f0ad922c8f4c446f97a1259" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router.app&lt;/code&gt; used to represent the last root component (Vue instance) that injected the router. Vue Router can now be safely used by multiple Vue applications at the same time. You can still add it when using the router:</source>
          <target state="translated">&lt;code&gt;router.app&lt;/code&gt; 라우터를 삽입 한 마지막 루트 구성 요소 (Vue 인스턴스)를 나타내는 데 사용되는 router.app 입니다. Vue Router는 이제 여러 Vue 애플리케이션에서 동시에 안전하게 사용할 수 있습니다. 라우터를 사용할 때 계속 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad00e4ec5139821a57dabec0287d90207dd4c004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router.beforeResolve&lt;/code&gt; is the ideal spot to fetch data or do any other operation that you want to avoid doing if the user cannot enter a page.</source>
          <target state="translated">&lt;code&gt;router.beforeResolve&lt;/code&gt; 는 데이터를 가져 오거나 사용자가 페이지에 들어갈 수없는 경우 수행하지 않으려는 다른 작업을 수행하기에 이상적인 지점입니다.</target>
        </trans-unit>
        <trans-unit id="ede4d0ad8bb2b51b5b2b14261f74e01c4c9c6897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router.push&lt;/code&gt; and all the other navigation methods return a &lt;em&gt;Promise&lt;/em&gt; that allows us to wait til the navigation is finished and to know if it succeeded or failed. We will talk more about that in &lt;a href=&quot;../advanced/navigation-handling&quot;&gt;Navigation Handling&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;router.push&lt;/code&gt; 및 다른 모든 탐색 메서드 는 탐색이 완료 될 때까지 기다릴 수 있고 성공 또는 실패 여부를 알 수 있는 &lt;em&gt;Promise&lt;/em&gt; 를 반환합니다 . 이에 대해서는 &lt;a href=&quot;../advanced/navigation-handling&quot;&gt;탐색 처리&lt;/a&gt; 에서 자세히 설명하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="aa0163f0e8bd3d5e405cdcbe5abad2efecfbc0a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;routes&lt;/code&gt; option is required in &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;routes&lt;/code&gt; 옵션이 필요합니다 &lt;code&gt;options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ca74d03132c6a1c2e870892d63755efb23a225e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scrollBehavior&lt;/code&gt; changes</source>
          <target state="translated">&lt;code&gt;scrollBehavior&lt;/code&gt; 변경</target>
        </trans-unit>
        <trans-unit id="ab7ccceaf6e196c7d1a040849263f9f6c033bcf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transition&lt;/code&gt; and &lt;code&gt;keep-alive&lt;/code&gt; must now be used &lt;strong&gt;inside&lt;/strong&gt; of &lt;code&gt;RouterView&lt;/code&gt; via the &lt;code&gt;v-slot&lt;/code&gt; API:</source>
          <target state="translated">&lt;code&gt;transition&lt;/code&gt; 이제 &lt;code&gt;v-slot&lt;/code&gt; API 를 통해 &lt;code&gt;RouterView&lt;/code&gt; &lt;strong&gt;내&lt;/strong&gt; 에서 전환 및 연결 &lt;code&gt;keep-alive&lt;/code&gt; 사용해야합니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6dc0031606e17ddf411d75acdb1adf87a5780e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined | void | true&lt;/code&gt;: validates the navigation</source>
          <target state="translated">&lt;code&gt;undefined | void | true&lt;/code&gt; : 탐색 유효성을 검사합니다.</target>
        </trans-unit>
        <trans-unit id="1b33026ea8fd215f12d789371dfb8a1ad6610cf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v-slot&lt;/code&gt; API (3.1.0+)</source>
          <target state="translated">&lt;code&gt;v-slot&lt;/code&gt; API (3.1.0+)</target>
        </trans-unit>
        <trans-unit id="105a0b4759b072acbf3f5caad5c732de1378b383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vue-router&lt;/code&gt; uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; as its path matching engine, so it supports many advanced matching patterns such as optional dynamic segments, zero or more / one or more requirements, and even custom regex patterns. Check out its &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot;&gt;documentation&lt;/a&gt; for these advanced patterns, and &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js&quot;&gt;this example&lt;/a&gt; of using them in &lt;code&gt;vue-router&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; 는 &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; 를 경로 일치 엔진으로 사용하므로 선택적 동적 세그먼트, 0 개 이상의 하나 이상의 요구 사항 및 사용자 정의 정규식 패턴과 같은 많은 고급 일치 패턴을 지원합니다. 이러한 고급 패턴 및 &lt;code&gt;vue-router&lt;/code&gt; 에서 패턴 을 사용하는 &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js&quot;&gt;예제&lt;/a&gt; 는 해당 &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot;&gt;문서&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b313cd5c52caaa6485f1073613beebd813f00bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ selector: string, offset? : { x: number, y: number }}&lt;/code&gt; (offset only supported in 2.6.0+)</source>
          <target state="translated">&lt;code&gt;{ selector: string, offset? : { x: number, y: number }}&lt;/code&gt; (2.6.0 이상에서만 오프셋 지원)</target>
        </trans-unit>
        <trans-unit id="c238ca1b115d2cdede402cc33a7431f54e04cc73" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Navigation Failures&lt;/em&gt; are &lt;code&gt;Error&lt;/code&gt; instances with a few extra properties that gives us enough information to know what navigation was prevented and why. To check the nature of a navigation result, use the &lt;code&gt;isNavigationFailure&lt;/code&gt; function:</source>
          <target state="translated">&lt;em&gt;탐색 실패&lt;/em&gt; 는 탐색이 금지 된 이유와 금지 된 이유를 알 수있는 충분한 정보를 제공하는 몇 가지 추가 속성 이있는 &lt;code&gt;Error&lt;/code&gt; 인스턴스입니다. 탐색 결과의 특성을 확인하려면 &lt;code&gt;isNavigationFailure&lt;/code&gt; 함수를 사용하세요 .</target>
        </trans-unit>
        <trans-unit id="2c3a6d8b7355aed0065ffea6c33f58e770dc5d44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Navigation Failures&lt;/em&gt;'s properties</source>
          <target state="translated">&lt;em&gt;탐색 실패&lt;/em&gt; 속성</target>
        </trans-unit>
        <trans-unit id="583cfde09a1360aa77098a06e99e38233ed3cdd8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parameters&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Parameters&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d1dbe6ec2fcc5cc583f066d2d323aa23374ef4ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The nested view components are omitted here but you can find the complete source code for the example above &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;중첩 된 뷰 구성 요소는 여기에서 생략되었지만 &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;여기에서&lt;/a&gt; 위 예제에 대한 전체 소스 코드를 찾을 수 있습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fac0bef8a644d999b3cad91a9f9a5acc91a6ebb" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-fullPath&quot;&gt;$route.fullPath&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-fullPath&quot;&gt;$route.fullPath&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c11e00b2564886e95f2e3e968183b169b9fe441" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-hash&quot;&gt;$route.hash&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-hash&quot;&gt;$route.hash&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b71dfa4baecd89c7ee1f8419263541f945c335dd" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-matched&quot;&gt;$route.matched&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-matched&quot;&gt;$route.matched&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92ef7643f2712e5f5409f9b0a9fc20ea4b43afec" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-name&quot;&gt;$route.name&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-name&quot;&gt;$route.name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96d1157695c4bd399db774e48518889c47570451" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-params&quot;&gt;$route.params&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-params&quot;&gt;$route.params&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a7a8d8937c8e4e28bc63d5b8e6b813189ae0e8c0" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-path&quot;&gt;$route.path&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-path&quot;&gt;$route.path&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6573b6281dec720e4ab3018e24b58c4b5df19e23" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-query&quot;&gt;$route.query&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-query&quot;&gt;$route.query&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc3d56099f87e0d1e43e14294c252e742db988e5" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-redirectedFrom&quot;&gt;$route.redirectedFrom&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-redirectedFrom&quot;&gt;$route.redirectedFrom&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73c15197133db1ce9671a21babe5d55ac33756df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;from: Route&lt;/code&gt;&lt;/strong&gt;: the current route being navigated away from.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;from: Route&lt;/code&gt; &lt;/strong&gt; : 현재 이동중인 경로입니다.</target>
        </trans-unit>
        <trans-unit id="3210f05a704dec4b1c094ea26f578ec5134e258b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;from&lt;/code&gt;&lt;/strong&gt;: the current route location &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;in a normalized format&lt;/a&gt; being navigated away from.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;from&lt;/code&gt; &lt;/strong&gt; :멀리 탐색&lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt; 되는 정규화 된 형식&lt;/a&gt; 의 현재 경로 위치 입니다 .</target>
        </trans-unit>
        <trans-unit id="5d867643772e9ef0f90dca26d991bd61e7d2d09a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next('/')&lt;/code&gt; or &lt;code&gt;next({ path: '/' })&lt;/code&gt;&lt;/strong&gt;: redirect to a different location. The current navigation will be aborted and a new one will be started. You can pass any location object to &lt;code&gt;next&lt;/code&gt;, which allows you to specify options like &lt;code&gt;replace: true&lt;/code&gt;, &lt;code&gt;name: 'home'&lt;/code&gt; and any option used in &lt;a href=&quot;../../api/index#to&quot;&gt;&lt;code&gt;router-link&lt;/code&gt;'s &lt;code&gt;to&lt;/code&gt; prop&lt;/a&gt; or &lt;a href=&quot;../../api/index#router-push&quot;&gt;&lt;code&gt;router.push&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next('/')&lt;/code&gt; 또는 &lt;code&gt;next({ path: '/' })&lt;/code&gt; &lt;/strong&gt; : 다른 위치로 리디렉션합니다. 현재 탐색이 중단되고 새로운 탐색이 시작됩니다. 당신은 어떤 위치에 개체를 전달할 수 있습니다 &lt;code&gt;next&lt;/code&gt; 은 같은 옵션을 지정할 수 있습니다, &lt;code&gt;replace: true&lt;/code&gt; , &lt;code&gt;name: 'home'&lt;/code&gt; 에서 사용하고 옵션&lt;a href=&quot;../../api/index#to&quot;&gt; &lt;code&gt;router-link&lt;/code&gt; 의 &lt;code&gt;to&lt;/code&gt; 소품&lt;/a&gt; 이나&lt;a href=&quot;../../api/index#router-push&quot;&gt; &lt;code&gt;router.push&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d10de2ce08935b888355cfc5209983856ceabc72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/strong&gt;: move on to the next hook in the pipeline. If no hooks are left, the navigation is &lt;strong&gt;confirmed&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/strong&gt; : 파이프 라인의 다음 후크로 이동합니다. 후크가 남아 있지 않으면 탐색이&lt;strong&gt; 확인&lt;/strong&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="bd5f2287807263c04bce722222c123698b327757" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next(error)&lt;/code&gt;&lt;/strong&gt;: (2.4.0+) if the argument passed to &lt;code&gt;next&lt;/code&gt; is an instance of &lt;code&gt;Error&lt;/code&gt;, the navigation will be aborted and the error will be passed to callbacks registered via &lt;a href=&quot;../../api/index#router-onerror&quot;&gt;&lt;code&gt;router.onError()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next(error)&lt;/code&gt; &lt;/strong&gt; : (2.4.0+) &lt;code&gt;next&lt;/code&gt; 에 전달 된 인수가 &lt;code&gt;Error&lt;/code&gt; 인스턴스 인경우 탐색이 중단되고&lt;a href=&quot;../../api/index#router-onerror&quot;&gt; &lt;code&gt;router.onError()&lt;/code&gt; &lt;/a&gt; 를 통해 등록 된 콜백에 오류가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="35a20b24c354c5ad8d363a0a6cc7cbb4955efc25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next(false)&lt;/code&gt;&lt;/strong&gt;: abort the current navigation. If the browser URL was changed (either manually by the user or via back button), it will be reset to that of the &lt;code&gt;from&lt;/code&gt; route.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next(false)&lt;/code&gt; &lt;/strong&gt; : 현재 탐색을 중단합니다. 브라우저의 URL이 (사용자 또는 뒤로 버튼을 통해 수동으로) 변경된 경우, 그 재설정됩니다 &lt;code&gt;from&lt;/code&gt; 경로.</target>
        </trans-unit>
        <trans-unit id="8d4fd6417cf648085f5a319fa87e224269455b3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next: Function&lt;/code&gt;&lt;/strong&gt;: this function must be called to &lt;strong&gt;resolve&lt;/strong&gt; the hook. The action depends on the arguments provided to &lt;code&gt;next&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next: Function&lt;/code&gt; &lt;/strong&gt; :후크를&lt;strong&gt; 해결&lt;/strong&gt; 하려면이 함수를 호출해야합니다. 조치는 &lt;code&gt;next&lt;/code&gt; 제공된 인수에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="692c595e63b46ccc3431b621082e8fa5bef1f3d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;to: Route&lt;/code&gt;&lt;/strong&gt;: the target &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;Route Object&lt;/a&gt; being navigated to.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;to: Route&lt;/code&gt; &lt;/strong&gt; :탐색중인대상&lt;a href=&quot;../../api/index#the-route-object&quot;&gt; Route 객체&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5e4a5d55d9865341dd4dc87493a567c5e45ba29e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;to&lt;/code&gt;&lt;/strong&gt;: the target route location &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;in a normalized format&lt;/a&gt; being navigated to.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;to&lt;/code&gt; &lt;/strong&gt; :탐색중인&lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt; 정규화 된 형식&lt;/a&gt; 의 대상 경로 위치 입니다 .</target>
        </trans-unit>
        <trans-unit id="26e57ea9e639d9c6933741beeeccac340447cde1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; navigations are now always asynchronous</source>
          <target state="translated">&lt;strong&gt;모든&lt;/strong&gt; 탐색은 이제 항상 비동기입니다.</target>
        </trans-unit>
        <trans-unit id="2101bc75b3b803a2712edeb26cd0d04a12fbf812" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An alias of &lt;code&gt;/&lt;/code&gt; as &lt;code&gt;/home&lt;/code&gt; means when the user visits &lt;code&gt;/home&lt;/code&gt;, the URL remains &lt;code&gt;/home&lt;/code&gt;, but it will be matched as if the user is visiting &lt;code&gt;/&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;/&lt;/code&gt; as &lt;code&gt;/home&lt;/code&gt; 별칭은 사용자가 &lt;code&gt;/home&lt;/code&gt; 을 방문 할 때 URL이 &lt;code&gt;/home&lt;/code&gt; 으로 유지 되지만 사용자가 &lt;code&gt;/&lt;/code&gt; 를 방문하는 것처럼 일치 된다는 것을 의미합니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5b7c8ca4a999bad33b5831545e1788c63dc6d8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An alias of &lt;code&gt;/a&lt;/code&gt; as &lt;code&gt;/b&lt;/code&gt; means when the user visits &lt;code&gt;/b&lt;/code&gt;, the URL remains &lt;code&gt;/b&lt;/code&gt;, but it will be matched as if the user is visiting &lt;code&gt;/a&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;/a&lt;/code&gt; 와 &lt;code&gt;/b&lt;/code&gt; 의 별명은 사용자가 &lt;code&gt;/b&lt;/code&gt; 를 방문 할 때 URL이 &lt;code&gt;/b&lt;/code&gt; 로 유지 되지만 사용자가 &lt;code&gt;/a&lt;/code&gt; 를 방문하는 것처럼 일치 한다는 것을 의미 합니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0a205d2b3de2c4f756a0f007ab11b2eb18591c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arguments&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Arguments&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="da8185af2453502d2a6d21a954b64a48f5e8d3af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Decouple it by using &lt;code&gt;props&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;props&lt;/code&gt; 을 사용하여 분리&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1920a86464a80ef8f055ec720a9bbad4335f1b36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;default&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;&quot;default&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="660e6e5069856ed7a471d6a2c39a4f15a0c3efaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;page&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;&quot;page&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b653888ea613af16e3d5419c607dfd2c749d4c43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt; (or global &lt;a href=&quot;#linkactiveclass&quot;&gt;&lt;code&gt;linkActiveClass&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt; (또는 전역 &lt;a href=&quot;#linkactiveclass&quot;&gt; &lt;code&gt;linkActiveClass&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b612e0f47baaa05bd135ae162755d2080de34073" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt; (or global &lt;a href=&quot;#linkexactactiveclass&quot;&gt;&lt;code&gt;linkExactActiveClass&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt; (또는 전역 &lt;a href=&quot;#linkexactactiveclass&quot;&gt; &lt;code&gt;linkExactActiveClass&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="cbaaad54355debb41a165436b930d4d335e6dd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cbd33bccabf4baed11a0e5d64ae015384a797ae7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Details&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Details&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="aec29b6e22750bc511d0ca82430cb4a126753e79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="1bfb124a5c007d689be864e3a2ebd16e3664c182" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fetching After Navigation&lt;/strong&gt;: perform the navigation first, and fetch data in the incoming component's lifecycle hook. Display a loading state while data is being fetched.</source>
          <target state="translated">&lt;strong&gt;탐색 후 가져 오기&lt;/strong&gt; : 먼저 탐색을 수행하고 수신 구성 요소의 수명주기 후크에서 데이터를 가져옵니다. 데이터를 가져 오는 동안로드 상태를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="784e78a4a863c42db56de5d99730217f98191764" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fetching Before Navigation&lt;/strong&gt;: Fetch data before navigation in the route enter guard, and perform the navigation after data has been fetched.</source>
          <target state="translated">&lt;strong&gt;탐색 전&lt;/strong&gt; 페치 : 경로 입력 가드에서 탐색하기 전에 데이터를 페치하고 데이터를 페치 한 후 탐색을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="85aa166ff434e379c8599f4624e12e78defa0f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instead of coupling to &lt;code&gt;$route&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;$route&lt;/code&gt; 에 연결하는 대신 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d0ba4307d3d286e8917735285562ed5f0feb93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make sure to always call the &lt;code&gt;next&lt;/code&gt; function, otherwise the hook will never be resolved.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;항상 &lt;code&gt;next&lt;/code&gt; 함수를 호출하십시오 . 그렇지 않으면 후크가 해결되지 않습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="642101b00ce497cec114f21ff5898e639801ff69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note about SEO&lt;/strong&gt;: when using aliases, make sure to &lt;a href=&quot;https://support.google.com/webmasters/answer/139066?hl=en&quot;&gt;define canonical links&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;SEO 관련 참고 사항&lt;/strong&gt; : 별칭을 사용할 때 &lt;a href=&quot;https://support.google.com/webmasters/answer/139066?hl=en&quot;&gt;표준 링크&lt;/a&gt; 를 정의 해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="fed409cff95e4d497045c8e930679df562a355d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that nested paths that start with &lt;code&gt;/&lt;/code&gt; will be treated as a root path. This allows you to leverage the component nesting without having to use a nested URL.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;/&lt;/code&gt; 로 시작하는 중첩 경로 는 루트 경로로 취급됩니다. 이를 통해 중첩 된 URL을 사용하지 않고도 구성 요소 중첩을 활용할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0aec4cdffd53c36dfc090da8e974a1be937b9a80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: Inside of a Vue instance, you have access to the router instance as &lt;code&gt;$router&lt;/code&gt;. You can therefore call &lt;code&gt;this.$router.push&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;참고 : Vue 인스턴스 내에서 라우터 인스턴스에 &lt;code&gt;$router&lt;/code&gt; 로 액세스 할 수 있습니다 . 그러므로 &lt;code&gt;this.$router.push&lt;/code&gt; 라고 부를 수 있습니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d064eb0fb56e93c57a44a1fe432eca814279295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: this feature only works if the browser supports &lt;code&gt;history.pushState&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :이 기능은 브라우저가 &lt;code&gt;history.pushState&lt;/code&gt; 를 지원하는 경우에만 작동합니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8c987a4ff8744b98065a5eaac261bda80334b61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the destination is the same as the current route and only params are changing (e.g. going from one profile to another &lt;code&gt;/users/1&lt;/code&gt; -&amp;gt; &lt;code&gt;/users/2&lt;/code&gt;), you will have to use &lt;a href=&quot;dynamic-matching#reacting-to-params-changes&quot;&gt;&lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;/a&gt; to react to changes (e.g. fetching the user information).</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 대상이 현재 경로와 동일하고 매개 변수 만 변경되는 경우 (예 : 한 프로필에서 다른 &lt;code&gt;/users/1&lt;/code&gt; - &amp;gt; &lt;code&gt;/users/2&lt;/code&gt; 로 변경 ), &lt;a href=&quot;dynamic-matching#reacting-to-params-changes&quot;&gt; &lt;code&gt;beforeRouteUpdate&lt;/code&gt; &lt;/a&gt; 를 사용 하여 변경에 대응해야합니다 (예 : 가져 오기) 사용자 정보).</target>
        </trans-unit>
        <trans-unit id="f2cd00a05c4e51c80b150666326157914820525e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f731a0483e5d55c7ef53ce77b71cd21cc581fa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;params&lt;/code&gt; are ignored if a &lt;code&gt;path&lt;/code&gt; is provided, which is not the case for &lt;code&gt;query&lt;/code&gt;, as shown in the example above. Instead, you need to provide the &lt;code&gt;name&lt;/code&gt; of the route or manually specify the whole &lt;code&gt;path&lt;/code&gt; with any parameter:</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 위의 예와 같이 &lt;code&gt;path&lt;/code&gt; 가 제공 되면 &lt;code&gt;params&lt;/code&gt; 는 무시 되며 &lt;code&gt;query&lt;/code&gt; 의 경우에는 해당되지 않습니다 . 대신 경로 &lt;code&gt;name&lt;/code&gt; 을 제공 하거나 매개 변수를 사용하여 전체 &lt;code&gt;path&lt;/code&gt; 를 수동으로 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f44bc5cde0a86679734bccf41236b30399e35e60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Let's forget about how the HTML/CSS should look like to represent such layout and focus on the components used.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : &lt;em&gt;HTML / CSS가 어떻게 이러한 레이아웃을 나타내고 사용 된 구성 요소에 초점을 맞추는 것처럼 보이는지 잊어 봅시다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="71d35ee23eb8ebffb9ac3b6f5d61e739a313747f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The following examples assume you are serving your app from the root folder. If you deploy to a subfolder, you should use &lt;a href=&quot;https://cli.vuejs.org/config/#publicpath&quot;&gt;the &lt;code&gt;publicPath&lt;/code&gt; option of Vue CLI&lt;/a&gt; and the related &lt;a href=&quot;../../api/index#createwebhistory&quot;&gt;&lt;code&gt;base&lt;/code&gt; property of the router&lt;/a&gt;. You also need to adjust the examples below to use the subfolder instead of the root folder (e.g. replacing &lt;code&gt;RewriteBase /&lt;/code&gt; with &lt;code&gt;RewriteBase /name-of-your-subfolder/&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 다음 예에서는 루트 폴더에서 앱을 제공한다고 가정합니다. 하위 폴더에 배포하는 경우 &lt;a href=&quot;https://cli.vuejs.org/config/#publicpath&quot;&gt;Vue CLI &lt;/a&gt;의 &lt;code&gt;publicPath&lt;/code&gt; 옵션 과 &lt;a href=&quot;../../api/index#createwebhistory&quot;&gt;라우터&lt;/a&gt; 의 관련 &lt;code&gt;base&lt;/code&gt; 속성을 사용해야 합니다 . 또한 루트 폴더 대신 하위 폴더를 사용하려면 아래 예제를 조정해야합니다 (예 : &lt;code&gt;RewriteBase /&lt;/code&gt; 를 &lt;code&gt;RewriteBase /name-of-your-subfolder/&lt;/code&gt; 대체 ).</target>
        </trans-unit>
        <trans-unit id="13cc20a2aeb890c387a4173ac148be150ce1de73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: &lt;code&gt;append&lt;/code&gt; wasn't used very often, is easy to replicate in user land.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : &lt;code&gt;append&lt;/code&gt; 는 자주 사용되지 않았고 사용자 영역에서 쉽게 복제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64fb152e238b330054139e2b671cf90ce34a08eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Having &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt; creates unnecessary circular references while the properties could be retrieved already through &lt;code&gt;matched&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : &lt;code&gt;parent&lt;/code&gt; 와 &lt;code&gt;children&lt;/code&gt; 이 있으면 불필요한 순환 참조가 생성되지만 &lt;code&gt;matched&lt;/code&gt; 통해 속성을 이미 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="689dbbe16432e67e670d720d3fb05b1825bfeeaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Previously, the router would navigate to &lt;code&gt;/&lt;/code&gt; but display nothing (instead of the home page). Throwing an error makes more sense because we cannot produce a valid URL to navigate to.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 이전에는 라우터가 &lt;code&gt;/&lt;/code&gt; 로 이동 했지만 홈 페이지 대신 아무것도 표시하지 않았습니다. 탐색 할 유효한 URL을 생성 할 수 없기 때문에 오류를 던지는 것이 더 합리적입니다.</target>
        </trans-unit>
        <trans-unit id="b755ba28024ed081f18803f9063e4925a5a99a8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Same as above.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 위와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a1c2185e01f11f6f3843ddd5074de177b2c38b50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: See the &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0028-router-active-link.md#summary&quot;&gt;RFC about active matching&lt;/a&gt; changes for more details.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 자세한 내용 &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0028-router-active-link.md#summary&quot;&gt;은 활성 일치&lt;/a&gt; 변경 사항에 대한 RFC 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3816e18d186d5e5a8242e7d3f508cae66f39d8ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: The router is designed to be created with routes even though you can add them later on. You need at least one route in most scenarios and this is written once per app in general.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 라우터는 나중에 추가 할 수 있지만 경로로 생성되도록 설계되었습니다. 대부분의 시나리오에서 최소한 하나의 경로가 필요하며 일반적으로 앱당 한 번씩 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="def41c5b24e5a8b928ef083fe0bcd3b57bb5b7eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: These props were often used together to use something different from an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag but were introduced before the &lt;code&gt;v-slot&lt;/code&gt; API and are not used enough to justify adding to the bundle size for everybody.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 이러한 소품은 종종 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그 와 다른 것을 사용하기 위해 함께 사용 되었지만 &lt;code&gt;v-slot&lt;/code&gt; API 이전에 도입 되었으며 모두를 위해 번들 크기를 추가하는 것을 정당화 할만큼 충분히 사용되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="52ee74b3bdba36f1127b0f830b114b2602bc31d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This allows to easily copy existing properties of a location when calling &lt;code&gt;router.push()&lt;/code&gt; and &lt;code&gt;router.resolve()&lt;/code&gt;, and make the resulting route location consistent across browsers. &lt;code&gt;router.push()&lt;/code&gt; is now idempotent, meaning that calling &lt;code&gt;router.push(route.fullPath)&lt;/code&gt;, &lt;code&gt;router.push({ hash: route.hash })&lt;/code&gt;, &lt;code&gt;router.push({ query: route.query })&lt;/code&gt;, and &lt;code&gt;router.push({ params: route.params })&lt;/code&gt; will not create extra encoding.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 이는 &lt;code&gt;router.push()&lt;/code&gt; 및 &lt;code&gt;router.resolve()&lt;/code&gt; 호출 할 때 위치의 기존 속성을 쉽게 복사 할 수 있으며, 결과 경로 위치를 브라우저간에 일관되게 만들 수 있습니다. &lt;code&gt;router.push()&lt;/code&gt; 는 이제 멱등 적입니다. 즉, &lt;code&gt;router.push(route.fullPath)&lt;/code&gt; , &lt;code&gt;router.push({ hash: route.hash })&lt;/code&gt; , &lt;code&gt;router.push({ query: route.query })&lt;/code&gt; 및 &lt;code&gt;router.push({ params: route.params })&lt;/code&gt; 는 추가 인코딩을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ae64459913e44b35ea736430b7eccab5a4d4219b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This is to make trailing slash behavior consistent: by default all routes allow a trailing slash. It can be disabled by using the &lt;code&gt;strict&lt;/code&gt; option and manually appending (or not) a slash to the routes.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 이것은 후행 슬래시 동작을 일관되게 만들기위한 것입니다. 기본적으로 모든 경로는 후행 슬래시를 허용합니다. &lt;code&gt;strict&lt;/code&gt; 옵션 을 사용 하고 경로에 슬래시를 수동으로 추가 (또는 추가하지 않음) 하여 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f1dc604fae68f39c4ce150a728ea7398a9b99bd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This method was only used during SSR and is a one liner that can be done by the user.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; :이 방법은 SSR 중에 만 사용되었으며 사용자가 할 수있는 1 개의 라이너입니다.</target>
        </trans-unit>
        <trans-unit id="0b7781bc463238fbcd97f63d8811f2036ebcc876" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This was a necessary change. See the &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0034-router-view-keep-alive-transitions.md&quot;&gt;related RFC&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 이것은 필요한 변경이었습니다. &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0034-router-view-keep-alive-transitions.md&quot;&gt;관련 RFC를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="721d3e2a633603d19dcbce3a10e278e8cca99dd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Uniting multiple methods that were used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 동일한 목적으로 사용 된 여러 방법을 통합합니다.</target>
        </trans-unit>
        <trans-unit id="7bd60388770e3ea8c5b39c1fdc521b348a5ad8f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Vue 3 applications do not exist in Vue 2 and now we property support multiple applications using the same Router instance, so having an &lt;code&gt;app&lt;/code&gt; property would have been misleading because it would have been the application instead of the root instance.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : Vue 3 응용 프로그램은 Vue 2에 존재하지 않으며 이제 동일한 Router 인스턴스를 사용하는 여러 응용 프로그램을 지원하므로 &lt;code&gt;app&lt;/code&gt; 속성이 있으면 루트 인스턴스가 아닌 응용 프로그램 이었기 때문에 오해의 소지가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bde1c69a2bad67935f18e301d0656506143786e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Vue Router doesn't use &lt;code&gt;path-to-regexp&lt;/code&gt; anymore, instead it implements its own parsing system that allows route ranking and enables dynamic routing. Since we usually add one single catch-all route per project, there is no big benefit in supporting a special syntax for &lt;code&gt;*&lt;/code&gt;. The encoding of params is encoding across routes, without exception to make things easier to predict.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : Vue Router는 더 이상 &lt;code&gt;path-to-regexp&lt;/code&gt; 를 사용하지 않고 대신 경로 순위를 허용하고 동적 라우팅을 가능하게하는 자체 파싱 시스템을 구현합니다. 일반적으로 프로젝트 당 하나의 단일 포괄 경로를 추가하므로 &lt;code&gt;*&lt;/code&gt; 에 대한 특수 구문을 지원하는 데 큰 이점이 없습니다 . 매개 변수의 인코딩은 상황을 더 쉽게 예측할 수 있도록 예외없이 여러 경로를 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="f3662d106fb13e96d5956786ebb52dc415f931b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: We use the history state to save information about the navigation like the scroll position, previous location, etc.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 우리는 스크롤 위치, 이전 위치 등과 같은 내비게이션에 대한 정보를 저장하기 위해 히스토리 상태를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7b15dcee6d6cb6a04d06df0828a2789d3fe60e81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: enable tree shaking of non used histories as well as implementing custom histories for advanced use cases like native solutions.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 사용하지 않는 기록의 트리 쉐이킹을 활성화하고 기본 솔루션과 같은 고급 사용 사례에 대한 사용자 정의 기록을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="cde7269e3a948f7f9bae1d5017bd5fdd6d6b69e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: making the object similar to &lt;code&gt;ScrollToOptions&lt;/code&gt; to make it feel more familiar with native JS APIs and potentially enable future new options.</source>
          <target state="translated">&lt;strong&gt;이유&lt;/strong&gt; : 객체를 &lt;code&gt;ScrollToOptions&lt;/code&gt; 와 유사 하게 만들어 네이티브 JS API에 더 친숙하게 느끼고 잠재적으로 향후 새로운 옵션을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="b48635880c8c262599371bbd0bfe133e24a77d7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/meta&quot;&gt;Meta fields&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/advanced/meta&quot;&gt;메타 필드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57503297db731b3460b632720060b5d8be525808" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/navigation-failures&quot;&gt;Navigation Failures&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/advanced/navigation-failures&quot;&gt;탐색 실패&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76abd165efb6cf6bf06a190e3c2fffacb35856d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;내비게이션 가드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e584d17760162b1f4f1cdbfbd749c3b7ca933a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation guards&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;내비게이션 가드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9dac01c9541fb3288b6cc5e8dbb88d09cf9d535d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/dynamic-matching&quot;&gt;Dynamic Route Matching&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/essentials/dynamic-matching&quot;&gt;동적 경로 일치&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d7bb061a72e257430c2a5fcf409d1e6d644e43c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;Named Views&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;명명 된 뷰&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a9b7e5600b906bc7cfb1ba38d9e8dd6c3ec28976" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/nested-routes&quot;&gt;Nested Routes&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/essentials/nested-routes&quot;&gt;중첩 된 경로&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9962f1bcef72e7f141ae772da9a0f68c02293daa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/passing-props&quot;&gt;Passing props to Route Components&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/essentials/passing-props&quot;&gt;Route 컴포넌트에 props 전달하기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b397576126f3b34bb03975aeada27aff281f00ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/meta&quot;&gt;Meta fields&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참조&lt;/strong&gt; : &lt;a href=&quot;../guide/advanced/meta&quot;&gt;메타 필드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad161f00f812acca91de8fc9c23a641f82fe7640" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Signature:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Signature:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49cd92a540f8d5ddaf089011afae080a463c00bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TIP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TIP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16dbebaa7ac8526488dfeec2bc03bc86437d37c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#navigationfailuretype&quot;&gt;&lt;code&gt;NavigationFailureType&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#navigationfailuretype&quot;&gt; &lt;code&gt;NavigationFailureType&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="517584027a38470a5964749a61b6f13b32a4e21e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#navigationguard&quot;&gt;&lt;code&gt;NavigationGuard | NavigationGuard[]&lt;/code&gt;&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#navigationguard&quot;&gt; &lt;code&gt;NavigationGuard | NavigationGuard[]&lt;/code&gt; &lt;/a&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="9e71145ae395881457a2e9506f0d25666136227f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#navigationguard&quot;&gt;&lt;code&gt;NavigationGuard&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#navigationguard&quot;&gt; &lt;code&gt;NavigationGuard&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a038c317b561ff9faf88069f1498d04bbe1e9b92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocation&quot;&gt;&lt;code&gt;RouteLocation&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routelocation&quot;&gt; &lt;code&gt;RouteLocation&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f7d14cd6bdb01d54a5a9e0721309c5d21a8dfa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;Ref&amp;lt;RouteLocationNormalized&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routelocationnormalized&quot;&gt; &lt;code&gt;Ref&amp;lt;RouteLocationNormalized&amp;gt;&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1fd2017851ac0c12f56fb41f651f3d71935552f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;RouteLocationNormalized&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routelocationnormalized&quot;&gt; &lt;code&gt;RouteLocationNormalized&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e671d285fa7d0715a2f8b74af8a853d70891b542" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocationraw&quot;&gt;&lt;code&gt;RouteLocationRaw&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routelocationraw&quot;&gt; &lt;code&gt;RouteLocationRaw&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f382a1e8f1380a7e9a6b41dac409aa6aca95ef60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routemeta&quot;&gt;&lt;code&gt;RouteMeta&lt;/code&gt;&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routemeta&quot;&gt; &lt;code&gt;RouteMeta&lt;/code&gt; &lt;/a&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="5252b2977cee45b2df363dee6df215953fb97361" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routerecordnormalized&quot;&gt;&lt;code&gt;RouteRecordNormalized[]&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routerecordnormalized&quot;&gt; &lt;code&gt;RouteRecordNormalized[]&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e6390b001df8c94c73d38b6e10af8bd7da1f5d34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routeroptions&quot;&gt;&lt;code&gt;RouterOptions&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routeroptions&quot;&gt; &lt;code&gt;RouterOptions&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="230bd8c79a15d5412a276b5bf6f8cb84b1765b68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'&lt;/code&gt; ( &lt;code&gt;string&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b2706bf0b16507535350b2b7763719d3d24235b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Record&amp;lt;string, Component&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;Record&amp;lt;string, Component&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd1d94d8b9434361f4881b0d5132f53789867c47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Record&amp;lt;string, boolean | Function | Record&amp;lt;string, any&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;Record&amp;lt;string, boolean | Function | Record&amp;lt;string, any&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86c541f730a73bf6d02c181923b586e3bff2a560" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Record&amp;lt;string, string | string[]&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;Record&amp;lt;string, string | string[]&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e57714391ff1820ac532ddef88030330b66fcaaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;RouteLocationRaw | (to: RouteLocationNormalized) =&amp;gt; RouteLocationRaw&lt;/code&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;RouteLocationRaw | (to: RouteLocationNormalized) =&amp;gt; RouteLocationRaw&lt;/code&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="74864012032a4647971d4699004e150560309f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;RouteMeta&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;RouteMeta&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2082df5daa3a29ce9db84d01c0c6bf3ecf246a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;RouteRecordNormalized | undefined&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;RouteRecordNormalized | undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2b2b23ba42a024f41ed287836eaa226dc822467" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;boolean | Record&amp;lt;string, any&amp;gt; | (to: RouteLocationNormalized) =&amp;gt; Record&amp;lt;string, any&amp;gt;&lt;/code&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;boolean | Record&amp;lt;string, any&amp;gt; | (to: RouteLocationNormalized) =&amp;gt; Record&amp;lt;string, any&amp;gt;&lt;/code&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="8cdb2ee7923f2f2101b8ecc2e67f1a76cd5e5803" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df45b8ade9225d32f33b1d05656b8381d2fe1efd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | string[]&lt;/code&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;string | string[]&lt;/code&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="a138ac4b22c1c17d17ede29a85486229a389eced" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | symbol | undefined | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;string | symbol | undefined | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3557a23acbfa8cd144f7ecd27c39cf360ca45e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | symbol | undefined&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;string | symbol | undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3fb14a15e130a9f460745859d862e6c3783295f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | symbol&lt;/code&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;string | symbol&lt;/code&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="d36e784330ea0d8fa8e23ea3ba8ecdab78f8ef1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4e70664b82e9285b0e1087d765b689f030f52f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: Array of &lt;a href=&quot;#routerecordraw&quot;&gt;&lt;code&gt;RouteRecordRaw&lt;/code&gt;&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : &lt;a href=&quot;#routerecordraw&quot;&gt; &lt;code&gt;RouteRecordRaw&lt;/code&gt; 의&lt;/a&gt; 배열 (선택 사항)</target>
        </trans-unit>
        <trans-unit id="2c2437843cabebc07eb3904167483e23d95a149f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: Array of normalized &lt;a href=&quot;#routerecordnormalized&quot;&gt;route records&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;유형&lt;/strong&gt; : 정규화 된 &lt;a href=&quot;#routerecordnormalized&quot;&gt;경로 레코드&lt;/a&gt; 배열</target>
        </trans-unit>
        <trans-unit id="2f12251e037ac26f45b1cdd71584a9346e1ac384" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VERSION NOTE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;버전 참고&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56d6254e7cba0f476d3d275412f956128f1ae309" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When using the &lt;code&gt;v-slot&lt;/code&gt; API, it is required to pass one single child to &lt;code&gt;router-link&lt;/code&gt;&lt;/strong&gt;. If you don't, &lt;code&gt;router-link&lt;/code&gt; will wrap its children in a &lt;code&gt;span&lt;/code&gt; element.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;v-slot&lt;/code&gt; API를 사용하는 경우 하나의 하위 항목을 &lt;code&gt;router-link&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 에 전달해야합니다&lt;/strong&gt; . 그렇지 않으면 &lt;code&gt;router-link&lt;/code&gt; 가 하위 요소를 &lt;code&gt;span&lt;/code&gt; 요소로 랩핑합니다 .</target>
        </trans-unit>
        <trans-unit id="6651e38d4a3763e7779e24d7dae0f0aba6d5a8a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteEnter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteEnter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf400eb99af38983093f201712bffd8645fddfaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteLeave&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteLeave&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="61b1e414f09221f5876897f91853a1684f2da844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteUpdate&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteUpdate&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="203651569c6adf2d7bf9feeba3de1e6bf672d10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this.$route&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;this.$route&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6cab0895dec254016a0b4192af900a73d674e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this.$router&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;this.$router&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74e6a0908f8875366c17fcdd1d60fc460ab641c1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../api/index#routelocationraw&quot;&gt;Route Location&lt;/a&gt;: Redirect to a different location by passing a route location as if you were calling &lt;a href=&quot;../../api/index#push&quot;&gt;&lt;code&gt;router.push()&lt;/code&gt;&lt;/a&gt;, which allows you to pass options like &lt;code&gt;replace: true&lt;/code&gt; or &lt;code&gt;name: 'home'&lt;/code&gt;. The current navigation is dropped and a new one is created with the same &lt;code&gt;from&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/index#routelocationraw&quot;&gt;경로 위치&lt;/a&gt; : 다른 위치로 리디렉션 당신이 전화 것처럼 경로 위치를 전달하여 &lt;a href=&quot;../../api/index#push&quot;&gt; &lt;code&gt;router.push()&lt;/code&gt; &lt;/a&gt; , 당신은 같은 옵션을 통과 할 수있는 &lt;code&gt;replace: true&lt;/code&gt; 또는 &lt;code&gt;name: 'home'&lt;/code&gt; . 현재 탐색이 삭제되고에서 동일한 탐색이 만들어 &lt;code&gt;from&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0fa08ab80de675eb3a18676fb5bf0d3a4d028a50" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigation-guards&quot;&gt;navigation guard&lt;/a&gt; aborts the navigation by doing &lt;code&gt;return false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;navigation-guards&quot;&gt;탐색 가드&lt;/a&gt; 수행하여 탐색 중단 &lt;code&gt;return false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c3cfac07709143e09d25b0712eec2bb4b1cc1f0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigation-guards&quot;&gt;navigation guard&lt;/a&gt; redirects somewhere else by returning a new location (e.g. &lt;code&gt;return '/login'&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;navigation-guards&quot;&gt;탐색 가드는&lt;/a&gt; 새로운 위치 (예를 들어 반환하여 다른 곳에서 리디렉션 &lt;code&gt;return '/login'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ae5e4abc951240e67b5bed576fbf917603dcf1ba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigation-guards&quot;&gt;navigation guard&lt;/a&gt; throws an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;navigation-guards&quot;&gt;탐색 가드&lt;/a&gt; 발생 &lt;code&gt;Error&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fffd81cfc65c073e5fd2f99826c0bf891940353d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;param&lt;/em&gt; is denoted by a colon &lt;code&gt;:&lt;/code&gt;. When a route is matched, the value of its &lt;em&gt;params&lt;/em&gt; will be exposed as &lt;code&gt;this.$route.params&lt;/code&gt; in every component. Therefore, we can render the current user ID by updating &lt;code&gt;User&lt;/code&gt;'s template to this:</source>
          <target state="translated">&lt;em&gt;PARAM은&lt;/em&gt; 콜론으로 표시된다 &lt;code&gt;:&lt;/code&gt; . 경로가 일치하면 &lt;em&gt;매개 변수&lt;/em&gt; 값 &lt;code&gt;this.$route.params&lt;/code&gt; 모든 구성 요소에서 this. $ route.params 로 노출됩니다 . 따라서 &lt;code&gt;User&lt;/code&gt; 의 템플릿을 다음과 같이 업데이트하여 현재 사용자 ID를 렌더링 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9880655df0348048352e89351ab27e9a1587740" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;route object&lt;/strong&gt; represents the state of the current active route. It contains parsed information of the current URL and the &lt;strong&gt;route records&lt;/strong&gt; matched by the URL.</source>
          <target state="translated">&lt;strong&gt;경로 객체&lt;/strong&gt; 현재 활성 경로의 상태를 나타낸다. 현재 URL의 구문 분석 된 정보와 URL과 일치 하는 &lt;strong&gt;경로 레코드&lt;/strong&gt; 를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="de326a0c6cfccf38b1552e3f181af23288635b06" translate="yes" xml:space="preserve">
          <source>A cancelled navigation is a navigation that failed because a more recent navigation finished started (not necessarily finished).</source>
          <target state="translated">취소 된 탐색은 더 최근 탐색이 시작 되었기 때문에 실패한 탐색입니다 (반드시 완료되지는 않음).</target>
        </trans-unit>
        <trans-unit id="f7eeed51c310e14e1a74eadd1ccf4fdd2be4c57a" translate="yes" xml:space="preserve">
          <source>A duplicated navigation is a navigation that failed because it was initiated while already being at the exact same location.</source>
          <target state="translated">중복 탐색은 이미 정확히 동일한 위치에있는 동안 시작 되었기 때문에 실패한 탐색입니다.</target>
        </trans-unit>
        <trans-unit id="db78120123d41c4b39ab69d8274419abba6f5c5c" translate="yes" xml:space="preserve">
          <source>A dynamic segment is denoted by a colon &lt;code&gt;:&lt;/code&gt;. When a route is matched, the value of the dynamic segments will be exposed as &lt;code&gt;this.$route.params&lt;/code&gt; in every component. Therefore, we can render the current user ID by updating &lt;code&gt;User&lt;/code&gt;'s template to this:</source>
          <target state="translated">동적 세그먼트는 콜론으로 표시된다 &lt;code&gt;:&lt;/code&gt; . 경로가 일치하면 동적 세그먼트의 값 &lt;code&gt;this.$route.params&lt;/code&gt; 모든 구성 요소에서 this. $ route.params 로 노출됩니다 . 따라서 &lt;code&gt;User&lt;/code&gt; 템플릿을 다음과 같이 업데이트하여 현재 사용자 ID를 렌더링 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a28e6458553bf9dffbc24cf0c5d77829e37c2bb" translate="yes" xml:space="preserve">
          <source>A history object that can be passed to the router constructor</source>
          <target state="translated">라우터 생성자에 전달할 수있는 히스토리 객체</target>
        </trans-unit>
        <trans-unit id="62859e3dd19a85f18cea1734afe33886a4906def" translate="yes" xml:space="preserve">
          <source>A new navigation guard takes place while the previous one not finished.</source>
          <target state="translated">이전 가드가 완료되지 않은 동안 새로운 내비게이션 가드가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f277a8f6ddabd79470c3132948b29ae1868e50ca" translate="yes" xml:space="preserve">
          <source>A raw location can either be a &lt;code&gt;string&lt;/code&gt; like &lt;code&gt;/users/posva#bio&lt;/code&gt; or an object:</source>
          <target state="translated">원시 위치는 &lt;code&gt;/users/posva#bio&lt;/code&gt; 와 같은 &lt;code&gt;string&lt;/code&gt; 이거나 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="156b2b9ae12f81d9512005ec2d0d3037c4a7e252" translate="yes" xml:space="preserve">
          <source>A redirect means when the user visits &lt;code&gt;/a&lt;/code&gt;, the URL will be replaced by &lt;code&gt;/b&lt;/code&gt;, and then matched as &lt;code&gt;/b&lt;/code&gt;. But what is an alias?</source>
          <target state="translated">사용자가 방문 리다이렉트 수단 &lt;code&gt;/a&lt;/code&gt; 상기 URL에 의해 대체 될 것이다 &lt;code&gt;/b&lt;/code&gt; 를 다음과 같이 매칭 &lt;code&gt;/b&lt;/code&gt; . 그러나 별칭은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="f1aa289d4aae14d23521a531c5a44b76bf583cc9" translate="yes" xml:space="preserve">
          <source>A redirect means when the user visits &lt;code&gt;/home&lt;/code&gt;, the URL will be replaced by &lt;code&gt;/&lt;/code&gt;, and then matched as &lt;code&gt;/&lt;/code&gt;. But what is an alias?</source>
          <target state="translated">사용자가 방문 리디렉션 수단 &lt;code&gt;/home&lt;/code&gt; 해당 URL로 대체 될 것이다 &lt;code&gt;/&lt;/code&gt; 다음으로 일치 &lt;code&gt;/&lt;/code&gt; . 하지만 별칭이란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="36ef491cd87b4b8ec5aad0c69a6fdaeff958091d" translate="yes" xml:space="preserve">
          <source>A route location that has all of its component resolved (if any was lazy loaded) so it can be displayed.</source>
          <target state="translated">표시 할 수 있도록 모든 구성 요소가 확인 된 경로 위치입니다 (지연로드 된 경우).</target>
        </trans-unit>
        <trans-unit id="6a97a71775a961a8fa29e1af5fbe06b5cf8aac91" translate="yes" xml:space="preserve">
          <source>A string that equals the path of the current route, always resolved as an absolute path. e.g. &lt;code&gt;&quot;/foo/bar&quot;&lt;/code&gt;.</source>
          <target state="translated">현재 경로의 경로와 동일한 문자열은 항상 절대 경로로 확인됩니다. 예를 들어 &lt;code&gt;&quot;/foo/bar&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="93f1fd81d54664927d097306e9adc4ec82129bf1" translate="yes" xml:space="preserve">
          <source>A view is rendered by using a component, therefore multiple views require multiple components for the same route. Make sure to use the &lt;code&gt;components&lt;/code&gt; (with an &lt;strong&gt;s&lt;/strong&gt;) option:</source>
          <target state="translated">뷰는 구성 요소를 사용하여 렌더링되므로 여러 뷰에는 동일한 경로에 대해 여러 구성 요소가 필요합니다. &lt;code&gt;components&lt;/code&gt; ( &lt;strong&gt;s 사용&lt;/strong&gt; ) 옵션 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3adc69887814392cf8b2d46cce9a44b4e624c105" translate="yes" xml:space="preserve">
          <source>A view is rendered by using a component, therefore multiple views require multiple components for the same route. Make sure to use the &lt;code&gt;components&lt;/code&gt; (with an s) option:</source>
          <target state="translated">뷰는 컴포넌트를 사용하여 렌더링되므로 여러 뷰는 동일한 경로에 대해 여러 컴포넌트가 필요합니다. &lt;code&gt;components&lt;/code&gt; (s) 옵션 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d965ff716dfb5048d05e248f0578ad1b5cdce5e4" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/named-views-vue-router-4-examples-rd20l&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 작동 데모는 &lt;a href=&quot;https://codesandbox.io/s/named-views-vue-router-4-examples-rd20l&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="758a291e7a2a79f8af1c46240ce3c623fad13150" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/nested-named-views-vue-router-4-examples-re9yl?&amp;amp;initialpath=%2Fsettings%2Femails&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 작동 데모는 &lt;a href=&quot;https://codesandbox.io/s/nested-named-views-vue-router-4-examples-re9yl?&amp;amp;initialpath=%2Fsettings%2Femails&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef365ad89dd8092cdb2ccf41dceae9d09a6df4b8" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/nested-views-vue-router-4-examples-hl326?initialpath=%2Fusers%2Feduardo&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 작동 데모는 &lt;a href=&quot;https://codesandbox.io/s/nested-views-vue-router-4-examples-hl326?initialpath=%2Fusers%2Feduardo&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cebf3bc188fb1ae35742e39f148cf47072c3e640" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/route-params-vue-router-examples-mlb14?from-embed&amp;amp;initialpath=%2Fusers%2Feduardo%2Fposts%2F1&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 작동 데모는 &lt;a href=&quot;https://codesandbox.io/s/route-params-vue-router-examples-mlb14?from-embed&amp;amp;initialpath=%2Fusers%2Feduardo%2Fposts%2F1&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11155a31d243422200f48fd2d8cc4952c34d02fe" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 실제 데모는 &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a50bb9b5e99e675cac89d89fca695cf654e6c9a" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 실제 데모는 &lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d676fbfda78cccf76196a5a6fb7ab7d0650c2b1a" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/yyx990803/L7hscd8h/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 예제의 실제 데모는 &lt;a href=&quot;https://jsfiddle.net/yyx990803/L7hscd8h/&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API 참조</target>
        </trans-unit>
        <trans-unit id="db9e4bda64bce6a8af84a56447bcc71aaa2629ab" translate="yes" xml:space="preserve">
          <source>Accessing the Router and current Route inside &lt;code&gt;setup&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 내 라우터 및 현재 경로에 액세스</target>
        </trans-unit>
        <trans-unit id="ee02640af2f71fddb96622160e5693c7ec196627" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that executes before any navigation. Returns a function that removes the registered guard.</source>
          <target state="translated">탐색 전에 실행되는 탐색 가드를 추가하십시오. 등록 된 가드를 제거하는 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="83221a3e5482bf47cc185d6f5d46f8c54191bc3e" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that executes before navigation is about to be resolved. At this state all component have been fetched and other navigation guards have been successful. Returns a function that removes the registered guard.</source>
          <target state="translated">탐색이 해결되기 전에 실행되는 탐색 가드를 추가하십시오. 이 상태에서 모든 구성 요소를 가져 왔고 다른 탐색 가드가 성공했습니다. 등록 된 가드를 제거하는 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e335b7d1ca92a85400e341fbc596010aa5e84e9f" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that triggers whenever the component for the current location is about to be left. Similar to &lt;code&gt;beforeRouteLeave&lt;/code&gt; but can be used in any component. The guard is removed when the component is unmounted.</source>
          <target state="translated">현재 위치에 대한 구성 요소가 남아있을 때마다 트리거되는 내비게이션 가드를 추가합니다. &lt;code&gt;beforeRouteLeave&lt;/code&gt; 와 유사 하지만 모든 구성 요소에서 사용할 수 있습니다. 구성품을 분리하면 가드가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="57d5baf0a17772e91bf9da7187331ff13139dcf1" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that triggers whenever the current location is about to be updated. Similar to &lt;code&gt;beforeRouteUpdate&lt;/code&gt; but can be used in any component. The guard is removed when the component is unmounted.</source>
          <target state="translated">현재 위치가 업데이트 될 때마다 트리거되는 내비게이션 가드를 추가합니다. &lt;code&gt;beforeRouteUpdate&lt;/code&gt; 와 유사 하지만 모든 구성 요소에서 사용할 수 있습니다. 구성품을 분리하면 가드가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="b17ea0a4bf58d3ade24ab5643bf8675fcbc289a9" translate="yes" xml:space="preserve">
          <source>Add a navigation hook that is executed after every navigation. Returns a function that removes the registered hook.</source>
          <target state="translated">모든 탐색 후에 실행되는 탐색 후크를 추가하십시오. 등록 된 후크를 제거하는 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fb6a67441fc47e67f00a242be4570a2b8c2886e1" translate="yes" xml:space="preserve">
          <source>Add a new &lt;a href=&quot;#routerecordraw&quot;&gt;Route Record&lt;/a&gt; as the child of an existing route. If the route has a &lt;code&gt;name&lt;/code&gt; and there is already an existing one with the same one, it removes it first.</source>
          <target state="translated">새 &lt;a href=&quot;#routerecordraw&quot;&gt;경로 레코드&lt;/a&gt; 를 기존 경로의 하위로 추가 합니다. 경로에 &lt;code&gt;name&lt;/code&gt; 있고 동일한 이름을 가진 기존 이름 이 이미있는 경우 먼저 제거합니다.</target>
        </trans-unit>
        <trans-unit id="f58d9bb9c80c3f67de5e8876be47377684ac7178" translate="yes" xml:space="preserve">
          <source>Add a new &lt;a href=&quot;#routerecordraw&quot;&gt;route record&lt;/a&gt; to the router. If the route has a &lt;code&gt;name&lt;/code&gt; and there is already an existing one with the same one, it removes it first.</source>
          <target state="translated">라우터에 새 &lt;a href=&quot;#routerecordraw&quot;&gt;경로 레코드&lt;/a&gt; 를 추가 합니다. 경로에 &lt;code&gt;name&lt;/code&gt; 있고 동일한 이름을 가진 기존 이름 이 이미있는 경우 먼저 제거합니다.</target>
        </trans-unit>
        <trans-unit id="ea2defa3a9b3b8557a3da80eb0d8f457b531b7a4" translate="yes" xml:space="preserve">
          <source>Add global navigation guards. See &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; for more details.</source>
          <target state="translated">글로벌 내비게이션을 추가하십시오. 자세한 내용은 &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="182f7d7f84ac28b85cefada3d8096af7dff435a8" translate="yes" xml:space="preserve">
          <source>Add this to your &lt;code&gt;firebase.json&lt;/code&gt;:</source>
          <target state="translated">이것을 &lt;code&gt;firebase.json&lt;/code&gt; 에 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="68556b52a12d36015cf950a0807a4240b396386b" translate="yes" xml:space="preserve">
          <source>Adding Routes</source>
          <target state="translated">경로 추가</target>
        </trans-unit>
        <trans-unit id="850f83d26ade6869c17e3ce94ebbe500aff92503" translate="yes" xml:space="preserve">
          <source>Adding Routes inside navigation guards</source>
          <target state="translated">내비게이션 가드 내부에 경로 추가</target>
        </trans-unit>
        <trans-unit id="c52b2714ebddf6a873808b29346ef9923c62e08a" translate="yes" xml:space="preserve">
          <source>Adding nested routes</source>
          <target state="translated">중첩 된 경로 추가</target>
        </trans-unit>
        <trans-unit id="48ece44d1ec28254f8ca17100636e79dbda88cf3" translate="yes" xml:space="preserve">
          <source>Adding routes to your router is usually done via the &lt;a href=&quot;../../api/index#routes&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; but in some situations, you might want to add or remove routes while the application is already running. Application with extensible interfaces like &lt;a href=&quot;https://cli.vuejs.org/dev-guide/ui-api.html&quot;&gt;Vue CLI UI&lt;/a&gt; can use this to make the application grow.</source>
          <target state="translated">라우터에 라우트를 추가하는 것은 일반적으로 &lt;a href=&quot;../../api/index#routes&quot;&gt; &lt;code&gt;routes&lt;/code&gt; 옵션을&lt;/a&gt; 통해 수행 되지만 경우에 따라 애플리케이션이 이미 실행중인 동안 라우트를 추가하거나 제거 할 수 있습니다. &lt;a href=&quot;https://cli.vuejs.org/dev-guide/ui-api.html&quot;&gt;Vue CLI UI&lt;/a&gt; 와 같은 확장 가능한 인터페이스 가있는 애플리케이션은이를 사용하여 애플리케이션을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aff10318d6a3ea10c8ed7f1df89afbad435b3c4d" translate="yes" xml:space="preserve">
          <source>Adds an error handler that is called every time a non caught error happens during navigation. This includes errors thrown synchronously and asynchronously, errors returned or passed to &lt;code&gt;next&lt;/code&gt; in any navigation guard, and errors occurred when trying to resolve an async component that is required to render a route.</source>
          <target state="translated">탐색 중에 포착되지 않은 오류가 발생할 때마다 호출되는 오류 처리기를 추가합니다. 여기에는 동기식 및 비동기식으로 발생한 오류, 탐색 가드에서 &lt;code&gt;next&lt;/code&gt; 으로 반환되거나 전달 된 오류, 경로를 렌더링하는 데 필요한 비동기 구성 요소를 해결하려고 할 때 발생한 오류가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="072891203234508378cabfbdc97d9e0e3f7d7693" translate="yes" xml:space="preserve">
          <source>Advanced Matching Patterns</source>
          <target state="translated">고급 매칭 패턴</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="01cdb433901eaed93511bf81b347b962b5de5033" translate="yes" xml:space="preserve">
          <source>Aliases for the route. Allows defining extra paths that will behave like a copy of the record. This enables paths shorthands like &lt;code&gt;/users/:id&lt;/code&gt; and &lt;code&gt;/u/:id&lt;/code&gt;. &lt;strong&gt;All &lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; values must share the same params&lt;/strong&gt;.</source>
          <target state="translated">경로의 별칭입니다. 레코드 사본처럼 작동하는 추가 경로를 정의 할 수 있습니다. 이렇게하면 &lt;code&gt;/users/:id&lt;/code&gt; 및 &lt;code&gt;/u/:id&lt;/code&gt; 와 같은 경로 축약 형을 사용할 수 있습니다 . &lt;strong&gt;모든 &lt;code&gt;alias&lt;/code&gt; 및 &lt;code&gt;path&lt;/code&gt; 값은 동일한 매개 변수를 공유해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a2e81512f2281ef292b1a2eac8152e34ca98905a" translate="yes" xml:space="preserve">
          <source>All navigation failures expose &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; properties to reflect the current location as well as the target location for the navigation that failed:</source>
          <target state="translated">모든 탐색 실패 는 현재 위치와 실패한 탐색의 대상 위치를 반영하기 위해 속성에 노출 되거나 속성 &lt;code&gt;from&lt;/code&gt; 노출 &lt;code&gt;to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d82ffc245f5ae8d4661509267cce6581944eca76" translate="yes" xml:space="preserve">
          <source>All navigations, including the first one, are now asynchronous, meaning that, if you use a &lt;code&gt;transition&lt;/code&gt;, you may need to wait for the router to be &lt;em&gt;ready&lt;/em&gt; before mounting the app:</source>
          <target state="translated">첫 번째 탐색을 포함한 모든 탐색은 이제 비동기식입니다. 즉, &lt;code&gt;transition&lt;/code&gt; 을 사용하는 경우 앱을 마운트하기 전에 라우터가 &lt;em&gt;준비&lt;/em&gt; 될 때까지 기다려야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71ab2fb5ffc2f798f1fd9c600f91a00c36b0858c" translate="yes" xml:space="preserve">
          <source>All of the the things above &lt;strong&gt;work the same way with &lt;code&gt;async&lt;/code&gt; functions&lt;/strong&gt; and Promises:</source>
          <target state="translated">위의 모든 사항은 &lt;strong&gt; &lt;code&gt;async&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 함수&lt;/strong&gt; 및 약속 &lt;strong&gt;에서 동일한 방식으로 작동합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c315b4e50c639fe7a19ef97c5ef2a6fe0f4ddd9b" translate="yes" xml:space="preserve">
          <source>All route records matched by a route are exposed on the &lt;code&gt;$route&lt;/code&gt; object (and also route objects in navigation guards) as the &lt;code&gt;$route.matched&lt;/code&gt; Array. Therefore, we will need to iterate over &lt;code&gt;$route.matched&lt;/code&gt; to check for meta fields in route records.</source>
          <target state="translated">경로와 일치하는 모든 경로 레코드 는 &lt;code&gt;$route.matched&lt;/code&gt; 배열 로 &lt;code&gt;$route&lt;/code&gt; 개체 (및 탐색 가드의 경로 개체)에 노출됩니다 . 따라서 경로 레코드에서 메타 필드를 확인하려면 &lt;code&gt;$route.matched&lt;/code&gt; 를 반복해야 합니다.</target>
        </trans-unit>
        <trans-unit id="428969103a07da9d0757fc0c0e060b02d9171f1f" translate="yes" xml:space="preserve">
          <source>All route records matched by a route are exposed on the &lt;code&gt;$route&lt;/code&gt; object (and also route objects in navigation guards) as the &lt;code&gt;$route.matched&lt;/code&gt; Array. We could loop through that array to check all &lt;code&gt;meta&lt;/code&gt; fields, but Vue Router also provides you a &lt;code&gt;$route.meta&lt;/code&gt; that is a non-recursive merge of &lt;strong&gt;all &lt;code&gt;meta&lt;/code&gt;&lt;/strong&gt; fields from parent to child. Meaning you can simply write</source>
          <target state="translated">경로와 일치하는 모든 경로 레코드는 &lt;code&gt;$route&lt;/code&gt; 개체 (및 내비게이션 가드의 경로 개체)에 &lt;code&gt;$route.matched&lt;/code&gt; 배열 로 노출됩니다 . 모든 &lt;code&gt;meta&lt;/code&gt; 필드 를 확인하기 위해 해당 배열을 반복 할 수 있지만 Vue Router는 부모에서 자식 으로 &lt;strong&gt;모든 &lt;/strong&gt;&lt;strong&gt; &lt;code&gt;meta&lt;/code&gt; &lt;/strong&gt; 필드를 &lt;code&gt;$route.meta&lt;/code&gt; 귀적으로 병합 하는 $ route.meta 도 제공합니다 . 간단히 쓸 수 있다는 의미&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35bc64fe5ce112af8a785974fd7adaceb66968ee" translate="yes" xml:space="preserve">
          <source>All three methods return a function that removes the registered guard/hook.</source>
          <target state="translated">세 가지 방법 모두 등록 된 보호 / 후크를 제거하는 기능을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aca32441641fc332fd67bf08f37b0f8b94b172c5" translate="yes" xml:space="preserve">
          <source>Allows passing down params as props to the component rendered by &lt;code&gt;router-view&lt;/code&gt;. When passed to a &lt;em&gt;multiple views record&lt;/em&gt;, it should be an object with the same keys as &lt;code&gt;components&lt;/code&gt; or a &lt;code&gt;boolean&lt;/code&gt; to be applied to each component. target location.</source>
          <target state="translated">&lt;code&gt;router-view&lt;/code&gt; 에 의해 렌더링 된 컴포넌트에 props로 params를 전달할 수 있습니다 . &lt;em&gt;다중 뷰 레코드에&lt;/em&gt; 전달되면 &lt;code&gt;components&lt;/code&gt; 와 동일한 키를 가진 객체 이거나 각 구성 요소에 적용되는 &lt;code&gt;boolean&lt;/code&gt; 이어야합니다. 타겟 위치.</target>
        </trans-unit>
        <trans-unit id="88b803ac69fdd5698d8172f7ec83f52493666ea8" translate="yes" xml:space="preserve">
          <source>Allows you to move forward or backward through the history.</source>
          <target state="translated">기록을 앞뒤로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be9806804175595dd24e6b4a14d4c81924fc9865" translate="yes" xml:space="preserve">
          <source>Alongside the &lt;code&gt;path&lt;/code&gt;, you can provide a &lt;code&gt;name&lt;/code&gt; to any route. This has the following advantages:</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 와 함께 모든 경로 에 &lt;code&gt;name&lt;/code&gt; 을 제공 할 수 있습니다 . 다음과 같은 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f687baf76efd583ba0ef8e00c797ebd3606ba953" translate="yes" xml:space="preserve">
          <source>Also, all examples will be using the full version of Vue to make on-the-fly template compilation possible. See more details &lt;a href=&quot;https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">또한 모든 예제는 Vue 정식 버전을 사용하여 즉석 템플릿 컴파일이 가능합니다. 자세한 내용은 &lt;a href=&quot;https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&quot;&gt;여기를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d774c1d9d8403ab8fadec6dd85f65a1f6379db5" translate="yes" xml:space="preserve">
          <source>Alternatively, if you are using a Node.js server, you can implement the fallback by using the router on the server side to match the incoming URL and respond with 404 if no route is matched. Check out the &lt;a href=&quot;https://ssr.vuejs.org/en/&quot;&gt;Vue server side rendering documentation&lt;/a&gt; for more information.</source>
          <target state="translated">또는 Node.js 서버를 사용하는 경우 서버 측의 라우터를 사용하여 수신 URL을 일치시키고 경로가 일치하지 않으면 404로 응답하여 대체를 구현할 수 있습니다. 자세한 내용 은 &lt;a href=&quot;https://ssr.vuejs.org/en/&quot;&gt;Vue 서버 측 렌더링 설명서&lt;/a&gt; 를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="bc481c13f192125008dd5b760fe07cb50cef941a" translate="yes" xml:space="preserve">
          <source>An Array containing &lt;strong&gt;route records&lt;/strong&gt; for all nested path segments of the current route. Route records are the copies of the objects in the &lt;code&gt;routes&lt;/code&gt; configuration Array (and in &lt;code&gt;children&lt;/code&gt; Arrays):</source>
          <target state="translated">현재 경로의 모든 중첩 경로 세그먼트에 대한 경로 &lt;strong&gt;레코드&lt;/strong&gt; 를 포함하는 배열 입니다. 경로 레코드는 &lt;code&gt;routes&lt;/code&gt; 구성 배열 및 &lt;code&gt;children&lt;/code&gt; 배열 에있는 객체의 복사본입니다 .</target>
        </trans-unit>
        <trans-unit id="334accf52f5b9ff6ea50d776fd6348da762371a9" translate="yes" xml:space="preserve">
          <source>An aborted navigation is a navigation that failed because a navigation guard returned &lt;code&gt;false&lt;/code&gt; or called &lt;code&gt;next(false)&lt;/code&gt;</source>
          <target state="translated">중단 된 탐색은 탐색 가드가 &lt;code&gt;false&lt;/code&gt; 를 반환 하거나 &lt;code&gt;next(false)&lt;/code&gt; 호출 하여 실패한 탐색입니다.</target>
        </trans-unit>
        <trans-unit id="e258ee9f428616628018a4e303bafec2ed1d1719" translate="yes" xml:space="preserve">
          <source>An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration's nesting structure.</source>
          <target state="translated">별명을 사용하면 구성의 중첩 구조에 의해 제한되지 않고 UI 구조를 임의의 URL에 자유롭게 맵핑 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e61c9116cd1488628ba92a510b3e33cd455e056" translate="yes" xml:space="preserve">
          <source>An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration's nesting structure. Make the alias start with a &lt;code&gt;/&lt;/code&gt; to make the path absolute in nested routes. You can even combine both and provide multiple aliases with an array:</source>
          <target state="translated">별칭을 사용하면 구성의 중첩 구조에 의해 제한되는 대신 UI 구조를 임의의 URL에 자유롭게 매핑 할 수 있습니다. 중첩 된 경로에서 절대 경로를 만들 려면 별칭을 &lt;code&gt;/&lt;/code&gt; 로 시작 합니다. 두 가지를 결합하고 배열에 여러 별칭을 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f3739e791fa19d2d317437f3ee57f9500444cd8" translate="yes" xml:space="preserve">
          <source>An error occurred when trying to resolve an async component that is required to render a route.</source>
          <target state="translated">라우트를 렌더링하는 데 필요한 비동기 구성 요소를 해결하려는 중에 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="d3cc39b59db1700be7d035e2588f46cc66fbf241" translate="yes" xml:space="preserve">
          <source>An example use case is checking for a meta field in the global navigation guard:</source>
          <target state="translated">사용 사례의 예는 전역 탐색 가드에서 메타 필드를 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="71da084f036eb26c37015ce8d4360c5a8d73a895" translate="yes" xml:space="preserve">
          <source>An object that contains key/value pairs of dynamic segments and star segments. If there are no params the value will be an empty object.</source>
          <target state="translated">동적 세그먼트와 스타 세그먼트의 키 / 값 쌍을 포함하는 객체입니다. 매개 변수가 없으면 값은 빈 개체가됩니다.</target>
        </trans-unit>
        <trans-unit id="14a69c21f7224d348475851000b8f3ad2545a273" translate="yes" xml:space="preserve">
          <source>An object that contains key/value pairs of the query string. For example, for a path &lt;code&gt;/foo?user=1&lt;/code&gt;, we get &lt;code&gt;$route.query.user == 1&lt;/code&gt;. If there is no query the value will be an empty object.</source>
          <target state="translated">쿼리 문자열의 키 / 값 쌍을 포함하는 개체입니다. 예를 들어 &lt;code&gt;/foo?user=1&lt;/code&gt; 경로의 경우 &lt;code&gt;$route.query.user == 1&lt;/code&gt; 됩니다. 쿼리가 없으면 값은 빈 개체가됩니다.</target>
        </trans-unit>
        <trans-unit id="70b5b36906d97151e1fdbc7737386f8f8f62f7f0" translate="yes" xml:space="preserve">
          <source>And can optionally return any of the following values:</source>
          <target state="translated">선택적으로 다음 값 중 하나를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9c1de7dc1047d71f67c38a050edbdf38b437ae0" translate="yes" xml:space="preserve">
          <source>Any non-name props will be passed along to the rendered component, however most of the time the per-route data is contained in the route's params.</source>
          <target state="translated">이름이없는 소품은 렌더링 된 구성 요소로 전달되지만 대부분의 경우 경로 별 데이터가 경로의 매개 변수에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="6841cac3c7e190438931bbeb9c4f778e303b8d57" translate="yes" xml:space="preserve">
          <source>Arbitrary data attached to all matched records merged (non recursively) from parent to child.</source>
          <target state="translated">일치하는 모든 레코드에 첨부 된 임의 데이터가 부모에서 자식으로 병합 (비재 귀적으로)됩니다.</target>
        </trans-unit>
        <trans-unit id="1fed9a82f104f7580b9a5e6b4f10de8ea8d75149" translate="yes" xml:space="preserve">
          <source>Arbitrary data attached to the record.</source>
          <target state="translated">기록에 첨부 된 임의의 데이터.</target>
        </trans-unit>
        <trans-unit id="de1bde3fe19a0290e7c25c42c7cba548f289783c" translate="yes" xml:space="preserve">
          <source>Array of &lt;a href=&quot;#routerecord&quot;&gt;normalized route records&lt;/a&gt; that were matched with the given route location.</source>
          <target state="translated">지정된 경로 위치와 일치하는 &lt;a href=&quot;#routerecord&quot;&gt;정규화 된 경로 레코드의&lt;/a&gt; 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="085554440a61484dcc1f7f1b33296afe385a8f75" translate="yes" xml:space="preserve">
          <source>As the name suggests, the navigation guards provided by &lt;code&gt;vue-router&lt;/code&gt; are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</source>
          <target state="translated">이름에서 알 수 있듯이 &lt;code&gt;vue-router&lt;/code&gt; 가 제공하는 내비게이션 가드 는 주로 내비게이션을 리디렉션하거나 취소하여 내비게이션을 보호하는 데 사용됩니다. 경로 탐색 프로세스에 연결하는 방법에는 전역, 경로 또는 구성 요소 등 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6479b2cdcd6bf2273d013335ee1c13d94f38feae" translate="yes" xml:space="preserve">
          <source>As the name suggests, the navigation guards provided by Vue router are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</source>
          <target state="translated">이름에서 알 수 있듯이 Vue 라우터에서 제공하는 내비게이션 가드는 주로 리디렉션하거나 취소하여 내비게이션을 보호하는 데 사용됩니다. 경로 탐색 프로세스에 연결하는 방법에는 전역, 경로 별 또는 구성 요소 내 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f0d70c190fc4a8136b23e7c202d297fe902db8a" translate="yes" xml:space="preserve">
          <source>As the return value of calling &lt;code&gt;router.match(location)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;router.match(location)&lt;/code&gt; 호출의 반환 값으로</target>
        </trans-unit>
        <trans-unit id="2c97a8fd58950f45f4f8b46c796579baae2800de" translate="yes" xml:space="preserve">
          <source>As we said at the beginning, there are different situations aborting a navigation, all of them resulting in different &lt;em&gt;Navigation Failures&lt;/em&gt;. They can be differentiated using the &lt;code&gt;isNavigationFailure&lt;/code&gt; and &lt;code&gt;NavigationFailureType&lt;/code&gt;. There are four different types:</source>
          <target state="translated">처음에 언급했듯이 탐색을 중단하는 여러 상황이 있으며 모두 다른 &lt;em&gt;탐색 실패를&lt;/em&gt; 초래 합니다. &lt;code&gt;isNavigationFailure&lt;/code&gt; 및 &lt;code&gt;NavigationFailureType&lt;/code&gt; 을 사용하여 구분할 수 있습니다 . 네 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7f4dd01c3d7db0526d49b5cbafc444aab559129" translate="yes" xml:space="preserve">
          <source>As you can see the &lt;code&gt;children&lt;/code&gt; option is just another Array of route configuration objects like &lt;code&gt;routes&lt;/code&gt; itself. Therefore, you can keep nesting views as much as you need.</source>
          <target state="translated">보시다시피 &lt;code&gt;children&lt;/code&gt; 옵션은 &lt;code&gt;routes&lt;/code&gt; 자체 와 같은 경로 구성 개체의 또 다른 배열입니다 . 따라서 필요한만큼 중첩 뷰를 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="818bf616731d813da29be2c0bd3f130135b65f56" translate="yes" xml:space="preserve">
          <source>As you can see the &lt;code&gt;children&lt;/code&gt; option is just another Array of routes like &lt;code&gt;routes&lt;/code&gt; itself. Therefore, you can keep nesting views as much as you need.</source>
          <target state="translated">보시다시피 &lt;code&gt;children&lt;/code&gt; 옵션은 &lt;code&gt;routes&lt;/code&gt; 자체 와 같은 또 다른 경로 배열입니다 . 따라서 필요한만큼 중첩 뷰를 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec41d6e2df2143b34eb02cee62d58dd44a178637" translate="yes" xml:space="preserve">
          <source>Aside from using &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to create anchor tags for declarative navigation, we can do this programmatically using the router's instance methods.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 를 사용하여 선언적 탐색을위한 앵커 태그를 만드는 것 외에도 라우터의 인스턴스 메소드를 사용하여 프로그래밍 방식으로이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6892b3141eb3858e6e6734f0568f78454577256f" translate="yes" xml:space="preserve">
          <source>Async Scrolling</source>
          <target state="translated">비동기 스크롤</target>
        </trans-unit>
        <trans-unit id="81602e12367d65ce549e69e1c37235c140ea5133" translate="yes" xml:space="preserve">
          <source>At the moment navigation guards in mixins are not supported. You can track its support at &lt;a href=&quot;https://github.com/vuejs/vue-router-next/issues/454&quot;&gt;vue-router#454&lt;/a&gt;.</source>
          <target state="translated">현재 믹스 인의 내비게이션 가드는 지원되지 않습니다. &lt;a href=&quot;https://github.com/vuejs/vue-router-next/issues/454&quot;&gt;vue-router # 454&lt;/a&gt; 에서 지원을 추적 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7225d2fef206412748c0b12502f4d384c0583fe" translate="yes" xml:space="preserve">
          <source>At this point, with the above configuration, when you visit &lt;code&gt;/user/eduardo&lt;/code&gt;, nothing will be rendered inside &lt;code&gt;User&lt;/code&gt;'s &lt;code&gt;router-view&lt;/code&gt;, because no nested route is matched. Maybe you do want to render something there. In such case you can provide an empty nested path:</source>
          <target state="translated">이 시점에서 위의 구성으로 &lt;code&gt;/user/eduardo&lt;/code&gt; 를 방문하면 중첩 된 경로가 일치하지 않기 때문에 &lt;code&gt;User&lt;/code&gt; 의 &lt;code&gt;router-view&lt;/code&gt; 내부에 아무것도 렌더링 되지 않습니다. 거기에서 무언가를 렌더링하고 싶을 수도 있습니다. 이 경우 빈 중첩 경로를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="560d9ddb225f90c85a47caeebc767f3890a40408" translate="yes" xml:space="preserve">
          <source>At this point, with the above configuration, when you visit &lt;code&gt;/user/foo&lt;/code&gt;, nothing will be rendered inside &lt;code&gt;User&lt;/code&gt;'s outlet, because no sub route is matched. Maybe you do want to render something there. In such case you can provide an empty subroute path:</source>
          <target state="translated">이 시점에서 위의 구성으로 &lt;code&gt;/user/foo&lt;/code&gt; 를 방문하면 하위 경로가 일치하지 않기 때문에 &lt;code&gt;User&lt;/code&gt; 's outlet 안에 아무것도 렌더링 되지 않습니다. 어딘가에 무언가를 렌더링하고 싶을 수도 있습니다. 이 경우 빈 하위 경로 경로를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b03af5b9707cfb00129fce04dcae195f1ab6e14" translate="yes" xml:space="preserve">
          <source>Automatic encoding/decoding of &lt;code&gt;params&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 자동 인코딩 / 디코딩</target>
        </trans-unit>
        <trans-unit id="02a3a0808241d1ddcdd16b4426dad25ca4b30149" translate="yes" xml:space="preserve">
          <source>Base applied to all urls, defaults to '/'</source>
          <target state="translated">모든 URL에 적용되는 기본, 기본값은 '/'</target>
        </trans-unit>
        <trans-unit id="0fd122c84cb00b96ba0c759ebc8ca3844d91ee84" translate="yes" xml:space="preserve">
          <source>Basic Guides</source>
          <target state="translated">기본 안내서</target>
        </trans-unit>
        <trans-unit id="97b04b139822245070b96f3d09cf3f514c27cc3a" translate="yes" xml:space="preserve">
          <source>Because of the introduction of the &lt;code&gt;v-slot&lt;/code&gt; api for &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, you must pass it to the &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; using the &lt;code&gt;v-slot&lt;/code&gt; API:</source>
          <target state="translated">때문에 도입의 &lt;code&gt;v-slot&lt;/code&gt; 에 대한 API를 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; , 당신은 그것을 통과해야 &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 은 Using &lt;code&gt;v-slot&lt;/code&gt; API를 :</target>
        </trans-unit>
        <trans-unit id="8f52362109b1ec051301e606cb5a7ca1723f9d0e" translate="yes" xml:space="preserve">
          <source>Because we are redirecting, we are replacing the ongoing navigation, effectively behaving like the example shown before. In real world scenarios, adding is more likely to happen outside of navigation guards, e.g. when a view component mounts, it register new routes.</source>
          <target state="translated">리디렉션 중이므로 진행중인 탐색을 대체하여 이전에 표시된 예와 같이 효과적으로 작동합니다. 실제 시나리오에서 추가는 내비게이션 가드 외부에서 발생할 가능성이 더 높습니다. 예를 들어보기 구성 요소가 마운트되면 새 경로가 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="cc1cef8f6ff28aefd85a71082156d723f7d14f7d" translate="yes" xml:space="preserve">
          <source>Because we don't have access to &lt;code&gt;this&lt;/code&gt; inside of &lt;code&gt;setup&lt;/code&gt;, we cannot directly access &lt;code&gt;this.$router&lt;/code&gt; or &lt;code&gt;this.$route&lt;/code&gt; anymore. Instead we use the &lt;code&gt;useRouter&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 내 에서 &lt;code&gt;this&lt;/code&gt; 액세스 할 수 없기 때문에 더 이상 &lt;code&gt;this.$router&lt;/code&gt; 또는 &lt;code&gt;this.$route&lt;/code&gt; 직접 액세스 할 수 없습니다 . 대신 &lt;code&gt;useRouter&lt;/code&gt; 함수를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="ecd822da880def873ee94ff5ae2a7680f21c0ffa" translate="yes" xml:space="preserve">
          <source>Become a Sponsor!</source>
          <target state="translated">스폰서가 되십시오!</target>
        </trans-unit>
        <trans-unit id="af937dea18aa986c5f4fc133d29571143e4abfb5" translate="yes" xml:space="preserve">
          <source>Before enter guard specific to this record. Note &lt;code&gt;beforeEnter&lt;/code&gt; has no effect if the record has a &lt;code&gt;redirect&lt;/code&gt; property.</source>
          <target state="translated">이 기록에 특정한 경비를 입력하기 전에. 참고 &lt;code&gt;beforeEnter&lt;/code&gt; 는 기록이있는 경우에는 효과가 없습니다 &lt;code&gt;redirect&lt;/code&gt; 속성을.</target>
        </trans-unit>
        <trans-unit id="27f2c975095b2c670386a2048860d02904b95686" translate="yes" xml:space="preserve">
          <source>Before you could directly pass a template to be rendered by a route components' &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; by nesting it under a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 구성 요소 아래에 중첩 하여 경로 구성 요소의 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 에 의해 렌더링 될 템플릿을 직접 전달하기 전에 :</target>
        </trans-unit>
        <trans-unit id="61e692507c61c133f149855270ff0ed201204f76" translate="yes" xml:space="preserve">
          <source>Boolean mode</source>
          <target state="translated">부울 모드</target>
        </trans-unit>
        <trans-unit id="769de6efcca54a966e32ce1e951115d253ef6e63" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;event&lt;/code&gt;, and &lt;code&gt;tag&lt;/code&gt; props have been removed from &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;. You can use the &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; to fully customize &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;event&lt;/code&gt; 및 &lt;code&gt;tag&lt;/code&gt; props 모두 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 에서 제거되었습니다 . &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt; &lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; 를 사용하여 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 를 완전히 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88e67b4987ae6d22f103ede8e74955a53c30b3ab" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;router.match&lt;/code&gt;, and &lt;code&gt;router.resolve&lt;/code&gt; have been merged together into &lt;code&gt;router.resolve&lt;/code&gt; with a slightly different signature. &lt;a href=&quot;../../api/index#resolve&quot;&gt;Refer to the API&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;router.match&lt;/code&gt; 및 &lt;code&gt;router.resolve&lt;/code&gt; 모두 약간 다른 서명을 사용하여 &lt;code&gt;router.resolve&lt;/code&gt; 로 병합되었습니다 . &lt;a href=&quot;../../api/index#resolve&quot;&gt;자세한 내용은 API&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="8f6f50fe6a684e36f2680d1b1f0d995148104f1b" translate="yes" xml:space="preserve">
          <source>Breaking Changes</source>
          <target state="translated">브레이킹 체인지</target>
        </trans-unit>
        <trans-unit id="ccd6e08a7d72bc51707c83e8345f50df410bd4c7" translate="yes" xml:space="preserve">
          <source>But in some scenarios we don't want to add that static section &lt;code&gt;/o&lt;/code&gt;/&lt;code&gt;p&lt;/code&gt;. However, &lt;code&gt;orderId&lt;/code&gt; is always a number while &lt;code&gt;productName&lt;/code&gt; can be anything, so we can specify a custom regexp for a param in parentheses:</source>
          <target state="translated">그러나 일부 시나리오에서는 정적 섹션 &lt;code&gt;/o&lt;/code&gt; / &lt;code&gt;p&lt;/code&gt; 를 추가하고 싶지 않습니다 . 그러나 &lt;code&gt;orderId&lt;/code&gt; 는 항상 숫자이고 &lt;code&gt;productName&lt;/code&gt; 은 무엇이든 될 수 있으므로 괄호 안에 매개 변수에 대한 사용자 정의 정규식을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9fe7a9c8499f8e70f58beb2e853763dc32cd2e4" translate="yes" xml:space="preserve">
          <source>But this will close the menu right away because &lt;strong&gt;navigations are asynchronous&lt;/strong&gt;, we need to &lt;code&gt;await&lt;/code&gt; the promise returned by &lt;code&gt;router.push&lt;/code&gt;:</source>
          <target state="translated">그러나 이것은 &lt;strong&gt;탐색이 비동기&lt;/strong&gt; 이기 때문에 즉시 메뉴를 닫을 것입니다 . &lt;code&gt;router.push&lt;/code&gt; 에 의해 반환 된 promise 를 &lt;code&gt;await&lt;/code&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="acb908939e94ce057ff8bee886271e8b1037c103" translate="yes" xml:space="preserve">
          <source>By adding a route with a conflicting name. If you add a route that has the same name as an existing route, it will remove the route first and then add the route:</source>
          <target state="translated">이름이 충돌하는 경로를 추가합니다. 기존 경로와 이름이 같은 경로를 추가하면 먼저 경로를 제거한 다음 경로를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1f9fe5e4c895f5acbdfa75e489077b52c71c8a32" translate="yes" xml:space="preserve">
          <source>By calling &lt;code&gt;app.use(router)&lt;/code&gt;, we get access to it as &lt;code&gt;this.$router&lt;/code&gt; as well as the current route as &lt;code&gt;this.$route&lt;/code&gt; inside of any component:</source>
          <target state="translated">&lt;code&gt;app.use(router)&lt;/code&gt; 를 호출 하면 &lt;code&gt;this.$router&lt;/code&gt; 로 액세스 할 수있을 뿐만 아니라 구성 요소 내에서 &lt;code&gt;this.$route&lt;/code&gt; 로 현재 경로에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="afe31676a32b4a35df4e65d446da5590cc794055" translate="yes" xml:space="preserve">
          <source>By calling the callback returned by &lt;code&gt;router.addRoute()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;router.addRoute()&lt;/code&gt; 반환 된 콜백을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="371e23371f040d46377c93e80323577b039227a1" translate="yes" xml:space="preserve">
          <source>By injecting the router, we get access to it as &lt;code&gt;this.$router&lt;/code&gt; as well as the current route as &lt;code&gt;this.$route&lt;/code&gt; inside of any component:</source>
          <target state="translated">라우터를 주입함으로써, 우리는 그것에 접근 얻을 &lt;code&gt;this.$router&lt;/code&gt; 뿐만뿐만 아니라 현재의 노선 &lt;code&gt;this.$route&lt;/code&gt; 구성 요소의 내부를 :</target>
        </trans-unit>
        <trans-unit id="e47f21e291c7d2038443eff51647191eeb1e8b44" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;router.removeRoute()&lt;/code&gt; to remove a route by its name:</source>
          <target state="translated">&lt;code&gt;router.removeRoute()&lt;/code&gt; 를 사용하여 이름으로 경로를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="f2eb76c16d1dbaafeb4edae6f2898624090fd07d" translate="yes" xml:space="preserve">
          <source>Bypassing path ranking (e.g. to display a )</source>
          <target state="translated">경로 순위 우회 (예 :를 표시)</target>
        </trans-unit>
        <trans-unit id="3f503c9d423abd93075704f88db9bb761be6157d" translate="yes" xml:space="preserve">
          <source>Caddy</source>
          <target state="translated">Caddy</target>
        </trans-unit>
        <trans-unit id="634dbb9a22c3a338c47024d7abe85b658ba519d0" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeEnter&lt;/code&gt; in route configs.</source>
          <target state="translated">&lt;code&gt;beforeEnter&lt;/code&gt; 에서 beforeEnter 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4249140880ca52e7ef11d9503d69924589f207c9" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteEnter&lt;/code&gt; in activated components.</source>
          <target state="translated">활성화 된 구성 요소에서 &lt;code&gt;beforeRouteEnter&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f5e8f22fe8e7626c225034bbb0f3238e2e74539" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteLeave&lt;/code&gt; guards in deactivated components.</source>
          <target state="translated">비활성화 된 구성 요소에서 &lt;code&gt;beforeRouteLeave&lt;/code&gt; 가드를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="ff7e90ad58713ac0a25e678176802f3fa200decb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteUpdate&lt;/code&gt; guards in reused components.</source>
          <target state="translated">재사용 된 구성 요소에서 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; 가드를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e5a58466233e6c803ddbe25aba939e739eb3019" translate="yes" xml:space="preserve">
          <source>Call callbacks passed to &lt;code&gt;next&lt;/code&gt; in &lt;code&gt;beforeRouteEnter&lt;/code&gt; guards with instantiated instances.</source>
          <target state="translated">인스턴스 인스턴스가 있는 &lt;code&gt;beforeRouteEnter&lt;/code&gt; 가 &lt;code&gt;next&lt;/code&gt; 에 전달 된 콜백을 보호합니다.</target>
        </trans-unit>
        <trans-unit id="b9a8c6f5621a1b9d78881b4558f1e7afa9d9ea72" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;afterEach&lt;/code&gt; hooks.</source>
          <target state="translated">전 세계의 &lt;code&gt;afterEach&lt;/code&gt; 후크에 전화하십시오 .</target>
        </trans-unit>
        <trans-unit id="637f232310f9b20f4e6cf7008a301ce8a37fc2d2" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;beforeEach&lt;/code&gt; guards.</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt; 경비원 에게 글로벌 전화하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f706c0b8eaadca091201ae841597e18c20f22a2" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;beforeResolve&lt;/code&gt; guards.</source>
          <target state="translated">경비원에게 연락하기 &lt;code&gt;beforeResolve&lt;/code&gt; 전 세계로 전화하십시오 .</target>
        </trans-unit>
        <trans-unit id="05385d5830e5c072c1827ed4365f6efdd71ed73d" translate="yes" xml:space="preserve">
          <source>Call leave guards in deactivated components.</source>
          <target state="translated">비활성화 된 구성 요소에서 방치 경비원에게 전화하십시오.</target>
        </trans-unit>
        <trans-unit id="5bbc0d73488282dd93b70e27cef933e4b1ea6db0" translate="yes" xml:space="preserve">
          <source>Catch all / 404 Not found Route</source>
          <target state="translated">모두 잡기 / 404 찾을 수 없음</target>
        </trans-unit>
        <trans-unit id="60eabda4414994f2e4082faeec38a86e3b44db04" translate="yes" xml:space="preserve">
          <source>Catch all routes (&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt;) must now be defined using a parameter with a custom regex:</source>
          <target state="translated">이제 모든 경로 ( &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/*&lt;/code&gt; )를 사용자 지정 정규식이있는 매개 변수를 사용하여 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="09dbd187de708ee21b01806ae5b0ca883102654a" translate="yes" xml:space="preserve">
          <source>Caveat</source>
          <target state="translated">Caveat</target>
        </trans-unit>
        <trans-unit id="d75ae57b7d1c8c668340ce65ecc96e069036f1c0" translate="yes" xml:space="preserve">
          <source>Changes are ordered by their usage. It is therefore recommended to follow this list in order.</source>
          <target state="translated">변경 사항은 용도별로 정렬됩니다. 따라서이 목록을 순서대로 따르는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c329ed52a2e5ffe770b15cad6d57d47667dc76c8" translate="yes" xml:space="preserve">
          <source>Check out more examples explaining active link class &lt;a href=&quot;https://jsfiddle.net/8xrk1n9f/&quot;&gt;live&lt;/a&gt;.</source>
          <target state="translated">활성 링크 클래스 &lt;a href=&quot;https://jsfiddle.net/8xrk1n9f/&quot;&gt;라이브를&lt;/a&gt; 설명하는 추가 예제를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="0224b758c57bf0aa5fc2d78687f2d063c461ab62" translate="yes" xml:space="preserve">
          <source>Checks if a route with a given name exists</source>
          <target state="translated">주어진 이름의 경로가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5b8c19e6be4fd73475f7c2978538b3cc399dcc54" translate="yes" xml:space="preserve">
          <source>Children route records of the current route. Empty array if none.</source>
          <target state="translated">현재 경로의 하위 경로 기록. 없는 경우 빈 배열입니다.</target>
        </trans-unit>
        <trans-unit id="0a10eac01da6a50d3afadaa4d63223f7dbdcc858" translate="yes" xml:space="preserve">
          <source>Class to apply on the rendered &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; when the link is active.</source>
          <target state="translated">링크가 활성 상태 일 때 렌더링 된 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 에 적용 할 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="3f04a07b6776ab2d39aec7b020b45ac96dbc8bd2" translate="yes" xml:space="preserve">
          <source>Class to apply on the rendered &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; when the link is exact active.</source>
          <target state="translated">링크가 정확히 활성 상태 일 때 렌더링 된 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 에 적용 할 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="be9d53e0a04f1a7d92239dc5d0a8c7339bfa0b13" translate="yes" xml:space="preserve">
          <source>Combining Vue's &lt;a href=&quot;https://vuejs.org/guide/components.html#Async-Components&quot;&gt;async component feature&lt;/a&gt; and webpack's &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/&quot;&gt;code splitting feature&lt;/a&gt;, it's trivially easy to lazy-load route components.</source>
          <target state="translated">Vue의 &lt;a href=&quot;https://vuejs.org/guide/components.html#Async-Components&quot;&gt;비동기 구성 요소 기능&lt;/a&gt; 과 웹팩의 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/&quot;&gt;코드 분할 기능을&lt;/a&gt; 결합하면 라우트 구성 요소를 쉽게로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="538f73ebb0f2283ee510d20e22c8b3dc2611a725" translate="yes" xml:space="preserve">
          <source>Combining the two, this is how to define an async component that will be automatically code-split by webpack:</source>
          <target state="translated">이 두 가지를 결합하여 웹팩에 의해 자동으로 코드 분할되는 비동기 구성 요소를 정의하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="c21b56685e74ee34e112c6265f95d4660855489e" translate="yes" xml:space="preserve">
          <source>Component Enabled Options</source>
          <target state="translated">구성 요소 사용 옵션</target>
        </trans-unit>
        <trans-unit id="6f1e4ac04228a38b2df9f816ebdf9943fc476cbc" translate="yes" xml:space="preserve">
          <source>Component Injected Properties</source>
          <target state="translated">성분 주입 속성</target>
        </trans-unit>
        <trans-unit id="68473142532c241b6b4d87aa608c7dcf5c7b3829" translate="yes" xml:space="preserve">
          <source>Component Injections</source>
          <target state="translated">성분 주입</target>
        </trans-unit>
        <trans-unit id="612f6427c9092a5834602047d990b4384c86915b" translate="yes" xml:space="preserve">
          <source>Composition API</source>
          <target state="translated">구성 API</target>
        </trans-unit>
        <trans-unit id="0e23dedbd12b01ee96ff40a945559ebf3d7f2687" translate="yes" xml:space="preserve">
          <source>Composition API guards can also be used in any component rendered by &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, they don't have to be used directly on the route component like in-component guards.</source>
          <target state="translated">컴포지션 API 가드는 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 로 렌더링 된 모든 구성 요소 에서도 사용할 수 있으며 구성 요소 내 가드와 같이 경로 구성 요소에서 직접 사용할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="447504d07a309bf4f61ba3d1b8acc798c1179562" translate="yes" xml:space="preserve">
          <source>Configure the active CSS class applied when the link is active with exact match. Note the default value can also be configured globally via the &lt;code&gt;linkExactActiveClass&lt;/code&gt; router constructor option.</source>
          <target state="translated">링크가 정확히 일치 할 때 적용되는 활성 CSS 클래스를 구성하십시오. &lt;code&gt;linkExactActiveClass&lt;/code&gt; 라우터 생성자 옵션을 통해 기본값을 전체적으로 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="598c83f3c40328d106949afdf0610e818376f591" translate="yes" xml:space="preserve">
          <source>Configure the active CSS class applied when the link is active. Note the default value can also be configured globally via the &lt;code&gt;linkActiveClass&lt;/code&gt; router constructor option.</source>
          <target state="translated">링크가 활성화 될 때 적용되는 활성 CSS 클래스를 구성하십시오. &lt;code&gt;linkActiveClass&lt;/code&gt; 라우터 생성자 옵션을 통해 기본값을 전체적으로 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="08c47906bf83e39ad87e06aca0fe381d685ab20a" translate="yes" xml:space="preserve">
          <source>Configure the router mode.</source>
          <target state="translated">라우터 모드를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="179589cabbf6e5556838d12a18510a83d0e5840f" translate="yes" xml:space="preserve">
          <source>Controls whether the router should fallback to &lt;code&gt;hash&lt;/code&gt; mode when the browser does not support &lt;code&gt;history.pushState&lt;/code&gt; but mode is set to &lt;code&gt;history&lt;/code&gt;.</source>
          <target state="translated">브라우저가 &lt;code&gt;history.pushState&lt;/code&gt; 를 지원하지 않지만 mode가 &lt;code&gt;history&lt;/code&gt; 로 설정된 경우 라우터가 &lt;code&gt;hash&lt;/code&gt; 모드로 폴백해야하는지 여부를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="dd84a1e60895c6267650c7ed76c93863634a08f7" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;_redirects&lt;/code&gt; file that is included with your deployed files:</source>
          <target state="translated">배포 된 파일에 포함 된 &lt;code&gt;_redirects&lt;/code&gt; 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="604a3713372f436d1cb20925918b04c41010dfd1" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;web.config&lt;/code&gt; file in the root directory of your site with the following:</source>
          <target state="translated">다음 을 사용하여 사이트의 루트 디렉토리에 &lt;code&gt;web.config&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="9868a4a168bb5e4e0cc7bd6735932973b7ab08f9" translate="yes" xml:space="preserve">
          <source>Creates a Router instance that can be used by a Vue app. Check the &lt;a href=&quot;#routeroptions&quot;&gt;&lt;code&gt;RouterOptions&lt;/code&gt;&lt;/a&gt; for a list of all the properties that can be passed.</source>
          <target state="translated">Vue 앱에서 사용할 수있는 Router 인스턴스를 만듭니다. 전달할 수있는 모든 속성 목록은 &lt;a href=&quot;#routeroptions&quot;&gt; &lt;code&gt;RouterOptions&lt;/code&gt; &lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="8205ba954f5fe00a5a35d4aadf28cad8ed6996ce" translate="yes" xml:space="preserve">
          <source>Creates a hash history. Useful for web applications with no host (e.g. &lt;code&gt;file://&lt;/code&gt;) or when configuring a server to handle any URL isn't an option. &lt;strong&gt;Note you should use &lt;a href=&quot;#createwebhistory&quot;&gt;&lt;code&gt;createWebHistory&lt;/code&gt;&lt;/a&gt; if SEO matters to you&lt;/strong&gt;.</source>
          <target state="translated">해시 기록을 생성합니다. 호스트가없는 웹 애플리케이션 (예 : &lt;code&gt;file://&lt;/code&gt; ) 또는 URL을 처리하도록 서버를 구성 할 때 유용합니다. &lt;strong&gt;SEO가 중요하다면 &lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;#createwebhistory&quot;&gt; &lt;code&gt;createWebHistory&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; 를 사용해야 합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c9527cc13bec56fa8bea8551be6135705cde7a94" translate="yes" xml:space="preserve">
          <source>Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere. If the user is not on a browser context, it's up to them to replace that location with the starter location by either calling &lt;code&gt;router.push()&lt;/code&gt; or &lt;code&gt;router.replace()&lt;/code&gt;.</source>
          <target state="translated">인 메모리 기반 히스토리를 생성합니다. 이 역사의 주요 목적은 SSR을 처리하는 것입니다. 그것은 어디에도없는 특별한 위치에서 시작됩니다. 사용자가 브라우저 컨텍스트에 있지 않은 경우 &lt;code&gt;router.push()&lt;/code&gt; 또는 &lt;code&gt;router.replace()&lt;/code&gt; 호출하여 해당 위치를 시작 위치로 바꾸는 것은 사용자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="99d989b2ecb8d8ea27a3e16010096369fc9fc8f3" translate="yes" xml:space="preserve">
          <source>Creates an HTML5 history. Most common history for single page applications. The application must be served through the http protocol.</source>
          <target state="translated">HTML5 기록을 만듭니다. 단일 페이지 애플리케이션에 대한 가장 일반적인 기록. 애플리케이션은 http 프로토콜을 통해 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="23ffccb8bb55835416705cdf732220caea61308d" translate="yes" xml:space="preserve">
          <source>Creating a Single-page Application with Vue + Vue Router feels natural: with Vue.js, we are already composing our application with components. When adding Vue Router to the mix, all we need to do is map our components to the routes and let Vue Router know where to render them. Here's a basic example:</source>
          <target state="translated">Vue + Vue Router로 단일 페이지 애플리케이션을 만드는 것은 자연스럽게 느껴집니다. Vue.js를 사용하면 이미 컴포넌트로 애플리케이션을 구성하고 있습니다. Vue Router를 믹스에 추가 할 때 우리가해야 할 일은 컴포넌트를 경로에 매핑하고 Vue Router에게 렌더링 할 위치를 알려주는 것뿐입니다. 다음은 기본적인 예입니다.</target>
        </trans-unit>
        <trans-unit id="a1b0a80537d0b93c4c92d2861e9bbeb03c1a7f33" translate="yes" xml:space="preserve">
          <source>Creating a Single-page Application with Vue + Vue Router is dead simple. With Vue.js, we are already composing our application with components. When adding Vue Router to the mix, all we need to do is map our components to the routes and let Vue Router know where to render them. Here's a basic example:</source>
          <target state="translated">Vue + Vue 라우터로 단일 페이지 응용 프로그램을 만드는 것은 매우 간단합니다. Vue.js를 사용하면 이미 애플리케이션을 컴포넌트로 구성하고 있습니다. Vue Router를 믹스에 추가 할 때는 컴포넌트를 라우트에 매핑하고 Vue 라우터에 렌더링 할 위치를 알려 주기만하면됩니다. 기본 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f239dc5f61ff2b32c7d339fd4659595ec368c723" translate="yes" xml:space="preserve">
          <source>Current route location. Readonly.</source>
          <target state="translated">현재 경로 위치. 읽기 전용.</target>
        </trans-unit>
        <trans-unit id="3ec019b1e50801a9311096611e9399cf055b455e" translate="yes" xml:space="preserve">
          <source>Custom Regexp in params</source>
          <target state="translated">매개 변수의 사용자 정의 정규식</target>
        </trans-unit>
        <trans-unit id="abf6dde34ecab51035432c1b02fd02044d187a6a" translate="yes" xml:space="preserve">
          <source>Custom data attached to the record.</source>
          <target state="translated">레코드에 첨부 된 사용자 지정 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="db0f0286a1cfb05554016c710e5c948d475c24ac" translate="yes" xml:space="preserve">
          <source>Custom implementation to parse a query. Must decode query keys and values. See its counterpart, &lt;a href=&quot;#stringifyquery&quot;&gt;stringifyQuery&lt;/a&gt;.</source>
          <target state="translated">쿼리를 구문 분석하기위한 사용자 지정 구현입니다. 쿼리 키와 값을 디코딩해야합니다. 대응하는 &lt;a href=&quot;#stringifyquery&quot;&gt;stringifyQuery를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1853793a21dbb0d37c05ea0f0996c76d1b4914c" translate="yes" xml:space="preserve">
          <source>Custom implementation to stringify a query object. Should not prepend a leading &lt;code&gt;?&lt;/code&gt;. Should properly encode query keys and values. &lt;a href=&quot;#parsequery&quot;&gt;parseQuery&lt;/a&gt; counterpart to handle query parsing.</source>
          <target state="translated">쿼리 개체를 문자열 화하는 사용자 지정 구현입니다. 선행을 추가하면 안 &lt;code&gt;?&lt;/code&gt; . 쿼리 키와 값을 올바르게 인코딩해야합니다. &lt;a href=&quot;#parsequery&quot;&gt;parseQuery&lt;/a&gt; 는 쿼리 구문 분석을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="5f31f9c9de48f97cd9f14f9d5e4b1227ebfaf383" translate="yes" xml:space="preserve">
          <source>Customizable Scroll Behavior</source>
          <target state="translated">사용자 정의 가능한 스크롤 동작</target>
        </trans-unit>
        <trans-unit id="126e1bff33bc4a33979dcd9da131a2801aeb7664" translate="yes" xml:space="preserve">
          <source>DOM updates triggered.</source>
          <target state="translated">DOM 업데이트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="890e1257a40dfb0f216d69df75d9cda18023d0bb" translate="yes" xml:space="preserve">
          <source>Data Fetching</source>
          <target state="translated">데이터 가져 오기</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="3484c6fcb53ac09a3fead481f71e452bc3f9e097" translate="yes" xml:space="preserve">
          <source>Declarative</source>
          <target state="translated">Declarative</target>
        </trans-unit>
        <trans-unit id="f65c5596776c06a59d0ce7a69fe222507b9b9a51" translate="yes" xml:space="preserve">
          <source>Decoded &lt;code&gt;hash&lt;/code&gt; section of the URL. Always starts with a &lt;code&gt;#&lt;/code&gt;. Empty string if there is no &lt;code&gt;hash&lt;/code&gt; in the URL.</source>
          <target state="translated">URL의 디코딩 된 &lt;code&gt;hash&lt;/code&gt; 섹션입니다. 항상 &lt;code&gt;#&lt;/code&gt; 로 시작합니다 . URL에 &lt;code&gt;hash&lt;/code&gt; 가 없으면 빈 문자열 입니다.</target>
        </trans-unit>
        <trans-unit id="6ee6558ca9e4f1fc9567275e6b2607489370a9a5" translate="yes" xml:space="preserve">
          <source>Decoded values in &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; are now consistent no matter where the navigation is initiated (older browsers will still produce unencoded &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;fullPath&lt;/code&gt;). The initial navigation should yield the same results as in-app navigations.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;hash&lt;/code&gt; 의 디코딩 된 값 은 이제 탐색이 시작된 위치에 관계없이 일관됩니다 (이전 브라우저는 여전히 인코딩되지 않은 &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;fullPath&lt;/code&gt; 를 생성합니다 ). 초기 탐색은 인앱 탐색과 동일한 결과를 산출해야합니다.</target>
        </trans-unit>
        <trans-unit id="c89764369e0ca3d87f1b4d7b04f366d13ac29694" translate="yes" xml:space="preserve">
          <source>Default class applied to active &lt;a href=&quot;#router-link-props&quot;&gt;RouterLink&lt;/a&gt;. If none is provided, &lt;code&gt;router-link-active&lt;/code&gt; will be applied.</source>
          <target state="translated">활성 &lt;a href=&quot;#router-link-props&quot;&gt;RouterLink에&lt;/a&gt; 적용되는 기본 클래스 입니다. 아무것도 제공되지 않으면 &lt;code&gt;router-link-active&lt;/code&gt; 이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="58474dbda93210588095c9b2218627dabdb261f7" translate="yes" xml:space="preserve">
          <source>Default class applied to exact active &lt;a href=&quot;#router-link-props&quot;&gt;RouterLink&lt;/a&gt;. If none is provided, &lt;code&gt;router-link-exact-active&lt;/code&gt; will be applied.</source>
          <target state="translated">정확한 활성 &lt;a href=&quot;#router-link-props&quot;&gt;RouterLink에&lt;/a&gt; 적용되는 기본 클래스 입니다. 아무것도 제공되지 않으면 &lt;code&gt;router-link-exact-active&lt;/code&gt; 가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="4d3f89814984abd9b96bc69007ca85ae060c9ed5" translate="yes" xml:space="preserve">
          <source>Defines if this record is the alias of another one. This property is &lt;code&gt;undefined&lt;/code&gt; if the record is the original one.</source>
          <target state="translated">이 레코드가 다른 레코드의 별칭인지 정의합니다. 레코드가 원래 레코드 인 경우이 속성은 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a8933bd7033a4306c23c49bb480c49359b7e328" translate="yes" xml:space="preserve">
          <source>Delaying the scroll</source>
          <target state="translated">스크롤 지연</target>
        </trans-unit>
        <trans-unit id="bc2a1f5a91d31ace28961a444d73ff19c7d2bb5f" translate="yes" xml:space="preserve">
          <source>Denotes the target route of the link. When clicked, the value of the &lt;code&gt;to&lt;/code&gt; prop will be passed to &lt;code&gt;router.push()&lt;/code&gt; internally, so it can either be a &lt;code&gt;string&lt;/code&gt; or a &lt;a href=&quot;#routelocationraw&quot;&gt;route location object&lt;/a&gt;.</source>
          <target state="translated">링크의 대상 경로를 나타냅니다. 클릭하면 &lt;code&gt;to&lt;/code&gt; prop 의 값이 내부적 으로 &lt;code&gt;router.push()&lt;/code&gt; 전달 되므로 &lt;code&gt;string&lt;/code&gt; 또는 &lt;a href=&quot;#routelocationraw&quot;&gt;경로 위치 객체가&lt;/a&gt; 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="785cf0391e1a17613040723181ad0242ee7dbb32" translate="yes" xml:space="preserve">
          <source>Denotes the target route of the link. When clicked, the value of the &lt;code&gt;to&lt;/code&gt; prop will be passed to &lt;code&gt;router.push()&lt;/code&gt; internally, so the value can be either a string or a location descriptor object.</source>
          <target state="translated">링크의 대상 경로를 나타냅니다. 클릭하면 &lt;code&gt;to&lt;/code&gt; prop 의 값이 &lt;code&gt;router.push()&lt;/code&gt; 내부적 으로 전달 되므로 값은 문자열 또는 위치 설명자 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="0aee9c3221a3da071a601cb3dd04aa286ee556f6" translate="yes" xml:space="preserve">
          <source>Detecting Navigation Failures</source>
          <target state="translated">탐색 실패 감지</target>
        </trans-unit>
        <trans-unit id="99989607634c22477585715a08209293f2cd2fa5" translate="yes" xml:space="preserve">
          <source>Detecting Redirections</source>
          <target state="translated">리디렉션 감지</target>
        </trans-unit>
        <trans-unit id="40d9b9f619dbd27ad649a2fb2ed512704a8498dc" translate="yes" xml:space="preserve">
          <source>Dev Build</source>
          <target state="translated">개발 빌드</target>
        </trans-unit>
        <trans-unit id="fe58255abc7333a2ab7662b2a089e7fcc7667d00" translate="yes" xml:space="preserve">
          <source>Dictionary of decoded params extracted from &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 에서 추출한 디코딩 된 매개 변수의 사전입니다 .</target>
        </trans-unit>
        <trans-unit id="2a6592593af63523f1ffd40042fab5dd1cc3598e" translate="yes" xml:space="preserve">
          <source>Dictionary of decoded query params extracted from the &lt;code&gt;search&lt;/code&gt; section of the URL.</source>
          <target state="translated">URL 의 &lt;code&gt;search&lt;/code&gt; 섹션 에서 추출 된 디코딩 된 쿼리 매개 변수의 사전입니다 .</target>
        </trans-unit>
        <trans-unit id="b3df214bd255b235c6d782e6b918d71f1c1a2710" translate="yes" xml:space="preserve">
          <source>Dictionary of named views, if none, contains an object with the key &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">명명 된 뷰 사전 (없는 경우)에는 키 &lt;code&gt;default&lt;/code&gt; 를 가진 객체가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="4e9b0210a13988df0a846cc5545d1c32ec191877" translate="yes" xml:space="preserve">
          <source>Dictionary of the &lt;a href=&quot;#props&quot;&gt;&lt;code&gt;props&lt;/code&gt; option&lt;/a&gt; for each named view. If none, it will contain only one property named &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">명명 된 각 뷰에 대한 &lt;a href=&quot;#props&quot;&gt; &lt;code&gt;props&lt;/code&gt; 옵션의&lt;/a&gt; 사전입니다 . 없는 경우 &lt;code&gt;default&lt;/code&gt; 라는 하나의 속성 만 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="23c34a91146af369e3ae2402147c7c1e8625e246" translate="yes" xml:space="preserve">
          <source>Different History modes</source>
          <target state="translated">다양한 히스토리 모드</target>
        </trans-unit>
        <trans-unit id="d74745b615d9f78ad12547f424519672e5eb962d" translate="yes" xml:space="preserve">
          <source>Differentiating Navigation Failures</source>
          <target state="translated">탐색 실패 구별</target>
        </trans-unit>
        <trans-unit id="3802d9202faed1ee478163e33ce9ddf939795ae9" translate="yes" xml:space="preserve">
          <source>Direct Download / CDN</source>
          <target state="translated">직접 다운로드 / CDN</target>
        </trans-unit>
        <trans-unit id="9f900a6b2f910e4862a4828a84b847040342a939" translate="yes" xml:space="preserve">
          <source>Do &lt;strong&gt;not&lt;/strong&gt; use &lt;a href=&quot;https://v3.vuejs.org/guide/component-dynamic-async.html#async-components&quot;&gt;Async components&lt;/a&gt; for routes. Async components can still be used inside route components but route component themselves are just dynamic imports.</source>
          <target state="translated">마십시오 &lt;strong&gt;하지&lt;/strong&gt; 사용하는 &lt;a href=&quot;https://v3.vuejs.org/guide/component-dynamic-async.html#async-components&quot;&gt;비동기 구성 요소를&lt;/a&gt; 경로에 대해. 비동기 구성 요소는 경로 구성 요소 내에서 계속 사용할 수 있지만 경로 구성 요소 자체는 동적 가져 오기 일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="ea81d16e983f772ff8f6e64d4b16ed9e8c6eb715" translate="yes" xml:space="preserve">
          <source>Due to the removal of &lt;code&gt;path-to-regexp&lt;/code&gt;, unnamed parameters are no longer supported:</source>
          <target state="translated">&lt;code&gt;path-to-regexp&lt;/code&gt; 제거로 인해 이름이 지정되지 않은 매개 변수는 더 이상 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ec5741bbff94960e62ed6fcda2ffbc8bf291509f" translate="yes" xml:space="preserve">
          <source>Dynamic Route Matching</source>
          <target state="translated">동적 경로 일치</target>
        </trans-unit>
        <trans-unit id="567610db7d4aa94eecb67255f022fb5959d6a202" translate="yes" xml:space="preserve">
          <source>Dynamic Route Matching with Params</source>
          <target state="translated">매개 변수를 사용한 동적 경로 일치</target>
        </trans-unit>
        <trans-unit id="2546c086cf942a9a9e7934c599acd7a2a13800d1" translate="yes" xml:space="preserve">
          <source>Dynamic Routing</source>
          <target state="translated">동적 라우팅</target>
        </trans-unit>
        <trans-unit id="e2abcad3fc26933b61c23051035b020e60ef7d76" translate="yes" xml:space="preserve">
          <source>Dynamic routing is achieved mainly via two functions: &lt;code&gt;router.addRoute()&lt;/code&gt; and &lt;code&gt;router.removeRoute()&lt;/code&gt;. They &lt;strong&gt;only&lt;/strong&gt; register a new route, meaning that if the newly added route matches the current location, it would require you to &lt;strong&gt;manually navigate&lt;/strong&gt; with &lt;code&gt;router.push()&lt;/code&gt; or &lt;code&gt;router.replace()&lt;/code&gt; to display that new route. Let's take a look at an example:</source>
          <target state="translated">동적 라우팅은 주로 &lt;code&gt;router.addRoute()&lt;/code&gt; 및 &lt;code&gt;router.removeRoute()&lt;/code&gt; 두 가지 함수를 통해 이루어집니다 . 그들은 &lt;strong&gt;단지&lt;/strong&gt; 새로 추가 된 경로가 현재 위치를 일치하는 경우, 그것은 당신을 필요로한다는 것을 의미, 새로운 경로를 등록 &lt;strong&gt;수동 탐색&lt;/strong&gt; 과 &lt;code&gt;router.push()&lt;/code&gt; 또는 &lt;code&gt;router.replace()&lt;/code&gt; 이 새로운 경로를 표시합니다. 예를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="8f3d8ec9f1affbff8f734f537e37271abb248165" translate="yes" xml:space="preserve">
          <source>Dynamically add more routes to the router. The argument must be an Array using the same route config format with the &lt;code&gt;routes&lt;/code&gt; constructor option.</source>
          <target state="translated">라우터에 더 많은 경로를 동적으로 추가하십시오. 인수는 &lt;code&gt;routes&lt;/code&gt; 생성자 옵션 과 동일한 경로 구성 형식을 사용하는 배열이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="c9c97afe5a933e0af40a15a9e24fed6c565e49dd" translate="yes" xml:space="preserve">
          <source>Edit this page</source>
          <target state="translated">이 페이지 편집</target>
        </trans-unit>
        <trans-unit id="ab9381cee168966ec0b5100dc4c624b13de266e6" translate="yes" xml:space="preserve">
          <source>Encoded &lt;code&gt;pathname&lt;/code&gt; section of the URL associated to the route location.</source>
          <target state="translated">경로 위치에 연결된 URL의 인코딩 된 &lt;code&gt;pathname&lt;/code&gt; 섹션입니다.</target>
        </trans-unit>
        <trans-unit id="1da817c6762af0c7f48b86fa472783deb72016b1" translate="yes" xml:space="preserve">
          <source>Encoded URL associated to the route location. Contains &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt;.</source>
          <target state="translated">경로 위치에 연결된 인코딩 된 URL입니다. &lt;code&gt;path&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;hash&lt;/code&gt; 포함 합니다 .</target>
        </trans-unit>
        <trans-unit id="c2321f096c18a699228d5ecc531360c5ee98e45e" translate="yes" xml:space="preserve">
          <source>Enumeration with all possible types for navigation failures. Can be passed to &lt;a href=&quot;#isnavigationfailure&quot;&gt;isNavigationFailure&lt;/a&gt; to check for specific failures. &lt;strong&gt;Never use any of the numerical values&lt;/strong&gt;, always use the variables like &lt;code&gt;NavigationFailureType.aborted&lt;/code&gt;.</source>
          <target state="translated">탐색 실패에 대해 가능한 모든 유형이있는 열거. &lt;a href=&quot;#isnavigationfailure&quot;&gt;isNavigationFailure&lt;/a&gt; 에 전달하여 특정 실패를 확인할 수 있습니다 . &lt;strong&gt;숫자 값을 사용하지 말고&lt;/strong&gt; 항상 &lt;code&gt;NavigationFailureType.aborted&lt;/code&gt; 와 같은 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="24c467ae21d128d7193caebbe399b812abbf159e" translate="yes" xml:space="preserve">
          <source>Every guard function receives three arguments:</source>
          <target state="translated">모든 가드 함수는 세 가지 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="e517f314069424c3e86f4c6d8856cfc3c9966304" translate="yes" xml:space="preserve">
          <source>Every guard function receives two arguments:</source>
          <target state="translated">모든 가드 함수는 두 개의 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="d8bac23f28aec2ade8b77c4f238e7a22aa94fe46" translate="yes" xml:space="preserve">
          <source>Example Server Configurations</source>
          <target state="translated">서버 구성 예</target>
        </trans-unit>
        <trans-unit id="ea90a9028e4260b0b7f6845eac8160877c8ae4dd" translate="yes" xml:space="preserve">
          <source>Example: Applying Active Class to Outer Element</source>
          <target state="translated">예 : 외부 요소에 활성 클래스 적용</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="6ea555d5143dcddf991fec16297649cdb9c9c9e9" translate="yes" xml:space="preserve">
          <source>Express with Node.js</source>
          <target state="translated">Node.js로 표현</target>
        </trans-unit>
        <trans-unit id="60c366a75a5d7cfcf01dfbb8f9a7f61594aa847a" translate="yes" xml:space="preserve">
          <source>Extending RouterLink</source>
          <target state="translated">RouterLink 확장</target>
        </trans-unit>
        <trans-unit id="61cf55a69f4df4c161869ea8e2d7b9a4330c5741" translate="yes" xml:space="preserve">
          <source>Fetching After Navigation</source>
          <target state="translated">탐색 후 가져 오기</target>
        </trans-unit>
        <trans-unit id="d7886fbab1b4f934f0a1de4803c3c7bec7bd522d" translate="yes" xml:space="preserve">
          <source>Fetching Before Navigation</source>
          <target state="translated">탐색 전에 가져 오기</target>
        </trans-unit>
        <trans-unit id="ac4b4cf3c6166e203b8679a9dbb8159d0c81310b" translate="yes" xml:space="preserve">
          <source>Finally, you can directly define route navigation guards inside route components (the ones passed to the router configuration)</source>
          <target state="translated">마지막으로 경로 구성 요소 (라우터 구성에 전달 된 구성 요소) 내에서 경로 탐색 가드를 직접 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12968f6b0d3abadd283ff066759a7b791258a0e4" translate="yes" xml:space="preserve">
          <source>Finally, you can directly define route navigation guards inside route components (the ones passed to the router configuration) with the following options:</source>
          <target state="translated">마지막으로 다음 옵션을 사용하여 경로 구성 요소 (라우터 구성으로 전달 된 구성 요소) 내부에 경로 탐색 가드를 직접 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a01db2ae475f14b70ac1d75463ca58257cfa1529" translate="yes" xml:space="preserve">
          <source>Fine-grained navigation control</source>
          <target state="translated">세분화 된 탐색 컨트롤</target>
        </trans-unit>
        <trans-unit id="5f133c80f125f45ee0dbdf789783d6285b5c326c" translate="yes" xml:space="preserve">
          <source>Firebase hosting</source>
          <target state="translated">Firebase 호스팅</target>
        </trans-unit>
        <trans-unit id="373ebcfb47d28107cdb989722313264dd872952e" translate="yes" xml:space="preserve">
          <source>First, an async component can be defined as a factory function that returns a Promise (which should resolve to the component itself):</source>
          <target state="translated">먼저 비동기 구성 요소를 약속을 반환하는 팩토리 함수로 정의 할 수 있습니다 (구성 요소 자체로 확인해야 함).</target>
        </trans-unit>
        <trans-unit id="df0806b24093e99d864f17e99384efbe1d25e90c" translate="yes" xml:space="preserve">
          <source>First, each route object in the &lt;code&gt;routes&lt;/code&gt; configuration is called a &lt;strong&gt;route record&lt;/strong&gt;. Route records may be nested. Therefore when a route is matched, it can potentially match more than one route record.</source>
          <target state="translated">먼저, &lt;code&gt;routes&lt;/code&gt; 구성 의 각 경로 개체를 &lt;strong&gt;경로 레코드&lt;/strong&gt; 라고 &lt;strong&gt;합니다&lt;/strong&gt; . 경로 레코드가 중첩 될 수 있습니다. 따라서 경로가 일치하면 둘 이상의 경로 레코드와 일치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a65bf6fcf34175ff79aaa50332ab88e3c4fdbde" translate="yes" xml:space="preserve">
          <source>For Node.js/Express, consider using &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallback middleware&lt;/a&gt;.</source>
          <target state="translated">Node.js / Express의 경우 &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallback 미들웨어&lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1e8e9f52767f0036500ce99a480baa669242b2c" translate="yes" xml:space="preserve">
          <source>For TypeScript users, &lt;code&gt;vue-router@3.0+&lt;/code&gt; requires &lt;code&gt;vue@2.5+&lt;/code&gt;, and vice versa.</source>
          <target state="translated">타이프 라이터 사용자의 경우, &lt;code&gt;vue-router@3.0+&lt;/code&gt; 필요 &lt;code&gt;vue@2.5+&lt;/code&gt; 반대, 그리고 그 반대입니다.</target>
        </trans-unit>
        <trans-unit id="b84487772f3e0cb7184255459fbb540893ece7a9" translate="yes" xml:space="preserve">
          <source>For advanced usage, check out the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">고급 사용법은 &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js&quot;&gt;예제를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="489c0c70c863fa104256940ebe3fe288f47435b7" translate="yes" xml:space="preserve">
          <source>For advanced usage, check out the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">고급 사용법은 &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js&quot;&gt;예제를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="57531f3c0d6aa0bea14c7b9b683c5a03f5eb3b51" translate="yes" xml:space="preserve">
          <source>For example, with the above route config, the URL &lt;code&gt;/foo/bar&lt;/code&gt; will match both the parent route record and the child route record.</source>
          <target state="translated">예를 들어, 위의 경로 구성을 사용하면 URL &lt;code&gt;/foo/bar&lt;/code&gt; 는 부모 경로 레코드와 자식 경로 레코드와 모두 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b0570a0839e80d681677ea7396f8d020d3962d64" translate="yes" xml:space="preserve">
          <source>For example, with the above route config, the URL &lt;code&gt;/posts/new&lt;/code&gt; will match both the parent route record (&lt;code&gt;path: '/posts'&lt;/code&gt;) and the child route record (&lt;code&gt;path: 'new'&lt;/code&gt;).</source>
          <target state="translated">예를 들어 위의 경로 구성에서 URL &lt;code&gt;/posts/new&lt;/code&gt; 는 상위 경로 레코드 ( &lt;code&gt;path: '/posts'&lt;/code&gt; ) 및 하위 경로 레코드 ( &lt;code&gt;path: 'new'&lt;/code&gt; ) 와 모두 일치 합니다 .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="036a717afd24a521f1446cb57757a166d602dd99" translate="yes" xml:space="preserve">
          <source>For more details see &lt;a href=&quot;../guide/advanced/scroll-behavior&quot;&gt;Scroll Behavior&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../guide/advanced/scroll-behavior&quot;&gt;스크롤 동작을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac4e81a56cc8dc13ec2ca3b54c9e2e00def537b9" translate="yes" xml:space="preserve">
          <source>For other advanced usage, checkout the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">다른 고급 사용법에 대해서는 &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js&quot;&gt;예제를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="471cdedb60b8fff38528d47b8f0c2597cb9e7860" translate="yes" xml:space="preserve">
          <source>For routes with named views, you have to define the &lt;code&gt;props&lt;/code&gt; option for each named view:</source>
          <target state="translated">명명 된 뷰가있는 경로의 경우 명명 된 각 뷰에 대해 &lt;code&gt;props&lt;/code&gt; 옵션 을 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d8ebdb5c1e02ab14d0abe1c5bd1ae44a255ae404" translate="yes" xml:space="preserve">
          <source>For the sake of simplicity, all, route records &lt;strong&gt;are omitting the &lt;code&gt;component&lt;/code&gt; property&lt;/strong&gt; to focus on the &lt;code&gt;path&lt;/code&gt; value.</source>
          <target state="translated">간단하게하기 위해 경로 레코드 &lt;strong&gt;는 &lt;code&gt;component&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;path&lt;/code&gt; 값 에 초점을 맞추기 &lt;strong&gt;위해 &lt;/strong&gt;&lt;strong&gt;구성 요소&lt;/strong&gt;&lt;strong&gt; 속성&lt;/strong&gt; 을 &lt;strong&gt;생략합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="28f8c3f2cdac27443d5de2aaa51cb565413b312b" translate="yes" xml:space="preserve">
          <source>Full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js&quot;&gt;여기에&lt;/a&gt; 전체 예제가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56e2a78217e3fd68618113a0c15dbe403b951d96" translate="yes" xml:space="preserve">
          <source>Function mode</source>
          <target state="translated">기능 모드</target>
        </trans-unit>
        <trans-unit id="d36c5c0ca26dc8a7f2c4fd3b0df6400fa0b2c109" translate="yes" xml:space="preserve">
          <source>Function that can be passed to control a router navigation. The &lt;code&gt;next&lt;/code&gt; callback can be omitted if you return a value (or a Promise) instead, which is encouraged. Possible return values (and parameters for &lt;code&gt;next&lt;/code&gt;) are:</source>
          <target state="translated">라우터 탐색을 제어하기 위해 전달할 수있는 기능입니다. &lt;code&gt;next&lt;/code&gt; 이 값 (또는 약속) 권장 대신을 반환하는 경우 콜백을 생략 할 수 있습니다. 가능한 반환 값 (및 &lt;code&gt;next&lt;/code&gt; 에 대한 매개 변수 )은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="081e76bebfbb6be2d7926f6cf6cf34a04126c0de" translate="yes" xml:space="preserve">
          <source>Function to control scrolling when navigating between pages. Can return a Promise to delay scrolling. Check .</source>
          <target state="translated">페이지 사이를 이동할 때 스크롤을 제어하는 ​​기능입니다. 스크롤 지연 약속을 반환 할 수 있습니다. 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="2dc5030c9d849d60c4187d48add33340709b3d18" translate="yes" xml:space="preserve">
          <source>Get Started &amp;rarr;</source>
          <target state="translated">시작하기 &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="9d420c70f9cabeb41a82928a0fb24c104d6e992c" translate="yes" xml:space="preserve">
          <source>Get a full list of all the &lt;a href=&quot;#routerecord&quot;&gt;route records&lt;/a&gt;.</source>
          <target state="translated">모든 &lt;a href=&quot;#routerecord&quot;&gt;경로 기록&lt;/a&gt; 의 전체 목록을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="a1bfbb67e361dc39af82afc913bb9934fdd1f0b4" translate="yes" xml:space="preserve">
          <source>Given any &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;normalized route location&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;정규화 된 경로 위치가&lt;/a&gt; 주어지면 :</target>
        </trans-unit>
        <trans-unit id="b62b6898ffa5a5e18fab1b46e9f332358f97378d" translate="yes" xml:space="preserve">
          <source>Given any nested named route with an empty &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 가 비어있는 중첩 된 명명 된 경로가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="4e8ab6c07a3acf4c2204d6b70bcb472586550981" translate="yes" xml:space="preserve">
          <source>Given the app we created in the last chapter:</source>
          <target state="translated">우리가 마지막 장에서 만든 앱이 있다면 :</target>
        </trans-unit>
        <trans-unit id="04b81c50025b47abd4de06d5d2d43a3f431b8b3e" translate="yes" xml:space="preserve">
          <source>Global After Hooks</source>
          <target state="translated">글로벌 애프터 훅</target>
        </trans-unit>
        <trans-unit id="39fe16e37e3132d15e0fbf4f80ae9c736ada4b64" translate="yes" xml:space="preserve">
          <source>Global Before Guards</source>
          <target state="translated">글로벌 사전 경비</target>
        </trans-unit>
        <trans-unit id="c78825b4c48ff8948dc48798ccc5fe8425bd6e4d" translate="yes" xml:space="preserve">
          <source>Global Resolve Guards</source>
          <target state="translated">글로벌 리졸 브 가드</target>
        </trans-unit>
        <trans-unit id="571bfb07cac37435662705c30ebba47b6a968777" translate="yes" xml:space="preserve">
          <source>Global before guards are called in creation order, whenever a navigation is triggered. Guards may be resolved asynchronously, and the navigation is considered &lt;strong&gt;pending&lt;/strong&gt; before all hooks have been resolved.</source>
          <target state="translated">탐색이 트리거 될 때마다 전역 사전 가드가 작성 순서대로 호출됩니다. 가드는 비동기식으로 해결 될 수 있으며 모든 후크가 해결되기 전에 탐색이 &lt;strong&gt;보류중인&lt;/strong&gt; 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="dd9c40ae1404d776848a122807b1c216f9fd4ff8" translate="yes" xml:space="preserve">
          <source>Globally configure &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; default active class for exact matches. Also see &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;.</source>
          <target state="translated">정확히 일치 하도록 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 기본 활성 클래스를 전체적으로 구성하십시오 . &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bad55014845b46b06bee9764378d62ab9c019c1a" translate="yes" xml:space="preserve">
          <source>Globally configure &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; default active class. Also see &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 기본 활성 클래스를 전체적으로 구성하십시오 . &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="641c78159b06984b968d21e7af4bd585d17df31e" translate="yes" xml:space="preserve">
          <source>Go back in history if possible by calling &lt;code&gt;history.back()&lt;/code&gt;. Equivalent to &lt;code&gt;router.go(-1)&lt;/code&gt;.</source>
          <target state="translated">가능한 경우 &lt;code&gt;history.back()&lt;/code&gt; 을 호출하여 기록으로 돌아갑니다 . &lt;code&gt;router.go(-1)&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="179826d589efefeebe70956693777c580ac760fe" translate="yes" xml:space="preserve">
          <source>Go forward in history if possible by calling &lt;code&gt;history.forward()&lt;/code&gt;. Equivalent to &lt;code&gt;router.go(1)&lt;/code&gt;.</source>
          <target state="translated">가능한 경우 &lt;code&gt;history.forward()&lt;/code&gt; 를 호출하여 기록에서 앞으로 이동하십시오 . &lt;code&gt;router.go(1)&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="2cbf6ecd2f8d2909ec7298d8eda3787d8cfb77ff" translate="yes" xml:space="preserve">
          <source>Going to any page, &lt;code&gt;/about&lt;/code&gt;, &lt;code&gt;/store&lt;/code&gt;, or &lt;code&gt;/3-tricks-to-improve-your-routing-code&lt;/code&gt; ends up rendering the &lt;code&gt;Article&lt;/code&gt; component. If we are on &lt;code&gt;/about&lt;/code&gt; and we add a new route:</source>
          <target state="translated">페이지, &lt;code&gt;/about&lt;/code&gt; , &lt;code&gt;/store&lt;/code&gt; 또는 &lt;code&gt;/3-tricks-to-improve-your-routing-code&lt;/code&gt; 로 이동 하면 &lt;code&gt;Article&lt;/code&gt; 구성 요소가 렌더링 됩니다. 우리가하는 경우 &lt;code&gt;/about&lt;/code&gt; 우리는 새로운 경로를 추가 :</target>
        </trans-unit>
        <trans-unit id="e19c13f99632b474452f8a18894c07cd6fa72b4c" translate="yes" xml:space="preserve">
          <source>Gold Sponsors</source>
          <target state="translated">골드 스폰서</target>
        </trans-unit>
        <trans-unit id="ea78ebe08d1386045a768205f28719d8bbea6c68" translate="yes" xml:space="preserve">
          <source>Grouping Components in the Same Chunk</source>
          <target state="translated">동일한 청크에서 구성 요소 그룹화</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="d0af1b42be6477058b4fe3d76bd1657cbdda202b" translate="yes" xml:space="preserve">
          <source>HTML5 History Mode</source>
          <target state="translated">HTML5 기록 모드</target>
        </trans-unit>
        <trans-unit id="ecf58483618c1faa69f05aca8c3f3ddfcd66c14e" translate="yes" xml:space="preserve">
          <source>HTML5 Mode</source>
          <target state="translated">HTML5 모드</target>
        </trans-unit>
        <trans-unit id="26a558985230ac3cb404ec8adf6f468e15eb4eed" translate="yes" xml:space="preserve">
          <source>HTML5 history mode or hash mode</source>
          <target state="translated">HTML5 히스토리 모드 또는 해시 모드</target>
        </trans-unit>
        <trans-unit id="66f998d2f920d7fa8d57fe7e8745ef748da09071" translate="yes" xml:space="preserve">
          <source>HTML5 history mode or hash mode, with auto-fallback in IE9</source>
          <target state="translated">IE9에서 자동 폴백 기능이있는 HTML5 기록 모드 또는 해시 모드</target>
        </trans-unit>
        <trans-unit id="aabb66e03ec10bd67a0272f8819900c8295c109b" translate="yes" xml:space="preserve">
          <source>Hash Mode</source>
          <target state="translated">해시 모드</target>
        </trans-unit>
        <trans-unit id="183d3bda933cac132b1dd21d5834c8786fbca77a" translate="yes" xml:space="preserve">
          <source>Here are some of the interfaces and types used by Vue Router. The documentation references them to give you an idea of the existing properties in objects.</source>
          <target state="translated">다음은 Vue Router에서 사용하는 인터페이스 및 유형 중 일부입니다. 문서는이를 참조하여 객체의 기존 속성에 대한 아이디어를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b0d68b54e7e4109ad893204b6f26e0708c9cc4d6" translate="yes" xml:space="preserve">
          <source>Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; directly in their browser. Now that's ugly.</source>
          <target state="translated">여기에 문제가 있습니다. 앱이 단일 페이지 클라이언트 측 앱이므로 적절한 서버 구성이 없기 때문에 브라우저에서 직접 &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; 에 액세스하면 404 오류가 발생 합니다. 이제는 추악합니다.</target>
        </trans-unit>
        <trans-unit id="ffd24f7c2971cc526929749ddc043643b2eb3399" translate="yes" xml:space="preserve">
          <source>Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access &lt;code&gt;https://example.com/user/id&lt;/code&gt; directly in their browser. Now that's ugly.</source>
          <target state="translated">하지만 여기에 문제가 있습니다. 우리 앱은 적절한 서버 구성이없는 단일 페이지 클라이언트 측 앱이므로 사용자가 브라우저에서 직접 &lt;code&gt;https://example.com/user/id&lt;/code&gt; 에 액세스하면 404 오류가 발생 합니다. 이제는 못 생겼습니다.</target>
        </trans-unit>
        <trans-unit id="44939cb70708e79d998ef17ea4434d07299b80c6" translate="yes" xml:space="preserve">
          <source>Here is a full snippet:</source>
          <target state="translated">다음은 전체 스 니펫입니다.</target>
        </trans-unit>
        <trans-unit id="584deca8320b4a6f87353dfa5f080654c25a2980" translate="yes" xml:space="preserve">
          <source>Here is the correct version:</source>
          <target state="translated">올바른 버전은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a34e0feba7b9eeabcd77ca390cdeaec4a234b764" translate="yes" xml:space="preserve">
          <source>History Manipulation</source>
          <target state="translated">역사 조작</target>
        </trans-unit>
        <trans-unit id="b2d65ae52fd9d9a993eac8f11cfd42d525af8e12" translate="yes" xml:space="preserve">
          <source>History implementation used by the router. Most web applications should use &lt;code&gt;createWebHistory&lt;/code&gt; but it requires the server to be properly configured. You can also use a &lt;em&gt;hash&lt;/em&gt; based history with &lt;code&gt;createWebHashHistory&lt;/code&gt; that does not require any configuration on the server but isn't handled at all by search engines and does poorly on SEO.</source>
          <target state="translated">라우터에서 사용하는 히스토리 구현입니다. 대부분의 웹 응용 프로그램은 &lt;code&gt;createWebHistory&lt;/code&gt; 를 사용해야 하지만 서버를 올바르게 구성해야합니다. 서버에 대한 구성이 필요하지 않지만 검색 엔진에서 전혀 처리하지 않고 SEO에서 제대로 작동하지 않는 &lt;code&gt;createWebHashHistory&lt;/code&gt; 와 함께 &lt;em&gt;해시&lt;/em&gt; 기반 히스토리를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0246196abd9134d11e797df909a2239577c70d5a" translate="yes" xml:space="preserve">
          <source>However, you can access the instance by passing a callback to &lt;code&gt;next&lt;/code&gt;. The callback will be called when the navigation is confirmed, and the component instance will be passed to the callback as the argument:</source>
          <target state="translated">그러나 &lt;code&gt;next&lt;/code&gt; 콜백을 전달하여 인스턴스에 액세스 할 수 있습니다 . 탐색이 확인되면 콜백이 호출되고 구성 요소 인스턴스가 인수로 콜백에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="f7c32e5e91730c7288c256a7228e1273afb0bdd4" translate="yes" xml:space="preserve">
          <source>If a falsy value or an empty object is returned, no scrolling will happen.</source>
          <target state="translated">잘못된 값이나 빈 개체가 반환되면 스크롤이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a0517237d92d5d305cb4a982821ba1e4bc4c1af8" translate="yes" xml:space="preserve">
          <source>If a navigation is prevented, resulting in the user staying on the same page, the resolved value of the &lt;code&gt;Promise&lt;/code&gt; returned by &lt;code&gt;router.push&lt;/code&gt; will be a &lt;em&gt;Navigation Failure&lt;/em&gt;. Otherwise, it will be a &lt;em&gt;falsy&lt;/em&gt; value (usually &lt;code&gt;undefined&lt;/code&gt;). This allows us to differentiate the case where we navigated away from where we are or not:</source>
          <target state="translated">내비게이션이 방지되어있는 경우, 같은 페이지의 사용자 체류의 결과로,의 해결 값 &lt;code&gt;Promise&lt;/code&gt; 에 의해 반환 &lt;code&gt;router.push&lt;/code&gt; 될 것 &lt;em&gt;탐색 실패&lt;/em&gt; . 그렇지 않으면 &lt;em&gt;잘못된&lt;/em&gt; 값 (일반적으로 &lt;code&gt;undefined&lt;/code&gt; )이됩니다. 이를 통해 우리가있는 곳에서 멀어지는 경우를 구별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a91f796ec7bc9d258330e45501d1a3505dd30c6f" translate="yes" xml:space="preserve">
          <source>If nothing, &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; is returned, &lt;strong&gt;the navigation is validated&lt;/strong&gt;, and the next navigation guard is called.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 또는 &lt;code&gt;true&lt;/code&gt; 가 반환 되지 않으면 &lt;strong&gt;탐색이 확인&lt;/strong&gt; 되고 다음 탐색 가드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="11df13ace21b6719040859dbebfe3fd607bb81fd" translate="yes" xml:space="preserve">
          <source>If we want to do something after a navigation is finished, we need a way to wait after calling &lt;code&gt;router.push&lt;/code&gt;. Imagine we have a mobile menu that allows us to go to different pages and we only want to hide the menu once we have navigated to the new page, we might want to do something like this:</source>
          <target state="translated">내비게이션이 끝난 후 무언가를하고 싶다면 &lt;code&gt;router.push&lt;/code&gt; 를 호출 한 후 기다릴 방법이 필요합니다 . 다른 페이지로 이동할 수있는 모바일 메뉴가 있고 새 페이지로 이동 한 후에 만 ​​메뉴를 숨기고 싶은 경우 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49910c5f3a09c1a2a5644b36aaa9d21c610f608b" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; to your &lt;code&gt;a&lt;/code&gt; element, you must omit the &lt;code&gt;@click=&quot;navigate&quot;&lt;/code&gt; handler.</source>
          <target state="translated">당신이 추가하면 &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; 당신에 요소, 당신은 생략합니다 &lt;code&gt;@click=&quot;navigate&quot;&lt;/code&gt; 핸들러를. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8e2cc7d90282df1b84b1e86e1d9f29da65e6728" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;history-mode&quot;&gt;History mode&lt;/a&gt;, make sure to follow the instructions to correctly configure your server as well.</source>
          <target state="translated">&lt;a href=&quot;history-mode&quot;&gt;기록 모드를&lt;/a&gt; 사용하는 경우 지침에 따라 서버를 올바르게 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="ba84b8a4610a4b430c6161f414ad4be1f9ef00f5" translate="yes" xml:space="preserve">
          <source>If you are writing your component using the &lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-setup.html#setup&quot;&gt;composition API and a &lt;code&gt;setup&lt;/code&gt; function&lt;/a&gt;, you can add update and leave guards through &lt;code&gt;onBeforeRouteUpdate&lt;/code&gt; and &lt;code&gt;onBeforeRouteLeave&lt;/code&gt; respectively. Please refer to the &lt;a href=&quot;composition-api#navigation-guards&quot;&gt;Composition API section&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-setup.html#setup&quot;&gt;컴포지션 API 및 &lt;code&gt;setup&lt;/code&gt; 함수를&lt;/a&gt; 사용하여 구성 요소를 작성하는 경우 업데이트를 추가 하고 각각 &lt;code&gt;onBeforeRouteUpdate&lt;/code&gt; 및 &lt;code&gt;onBeforeRouteLeave&lt;/code&gt; 를 통해 가드를 떠날 수 있습니다 . 자세한 내용은 &lt;a href=&quot;composition-api#navigation-guards&quot;&gt;Composition API 섹션&lt;/a&gt; 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="c5d05886797b156f0e09ff5934f45a4acd51828b" translate="yes" xml:space="preserve">
          <source>If you decide to add or remove routes inside of a navigation guard, you should not call &lt;code&gt;router.replace()&lt;/code&gt; but trigger a redirection by returning the new location:</source>
          <target state="translated">내비게이션 가드 내부에 경로를 추가하거나 제거하기로 결정한 경우 &lt;code&gt;router.replace()&lt;/code&gt; 호출하지 말고 새 위치를 반환하여 리디렉션을 트리거 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4138308da253dcef665f1aaad4cc49aa6a42e89c" translate="yes" xml:space="preserve">
          <source>If you need to dig how your routes are transformed into Regexp to understand why a route isn't being matched or, to report a bug, you can use the &lt;a href=&quot;https://paths.esm.dev/?p=AAMeJSyAwR4UbFDAFxAcAGAIJXMAAA..#&quot;&gt;path ranker tool&lt;/a&gt;. It supports sharing your routes through the URL.</source>
          <target state="translated">경로가 일치하지 않는 이유를 이해하기 위해 경로가 Regexp로 변환되는 방법을 파헤쳐 야하거나 버그를보고하기 위해 &lt;a href=&quot;https://paths.esm.dev/?p=AAMeJSyAwR4UbFDAFxAcAGAIJXMAAA..#&quot;&gt;경로 순위 지정 도구를&lt;/a&gt; 사용할 수 있습니다 . URL을 통한 경로 공유를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0d540fc274c9d072c5b4100c098d68002c4e652f" translate="yes" xml:space="preserve">
          <source>If you need to match routes with multiple sections like &lt;code&gt;/first/second/third&lt;/code&gt;, you should mark a param as repeatable with &lt;code&gt;*&lt;/code&gt; (0 or more) and &lt;code&gt;+&lt;/code&gt; (1 or more):</source>
          <target state="translated">&lt;code&gt;/first/second/third&lt;/code&gt; 와 같은 여러 섹션이있는 경로를 일치시켜야하는 경우 &lt;code&gt;*&lt;/code&gt; (0 이상) 및 &lt;code&gt;+&lt;/code&gt; (1 이상)를 사용하여 매개 변수를 반복 가능한 것으로 표시해야합니다 .</target>
        </trans-unit>
        <trans-unit id="97cf2b759f92fcc431463462e3c878ae145ddc19" translate="yes" xml:space="preserve">
          <source>If you omit the second parameter: &lt;code&gt;isNavigationFailure(failure)&lt;/code&gt;, it will only check if &lt;code&gt;failure&lt;/code&gt; is a &lt;em&gt;Navigation Failure&lt;/em&gt;.</source>
          <target state="translated">두 번째 매개 변수 인 &lt;code&gt;isNavigationFailure(failure)&lt;/code&gt; 를 생략 하면 &lt;code&gt;failure&lt;/code&gt; 가 &lt;em&gt;탐색 실패&lt;/em&gt; 인지 여부 만 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="54873f2ce2d40adca068768967316da5c24b973e" translate="yes" xml:space="preserve">
          <source>If you prefer using a render function or create &lt;code&gt;computed&lt;/code&gt; properties, you can use the &lt;code&gt;useLink&lt;/code&gt; from the &lt;a href=&quot;composition-api&quot;&gt;Composition API&lt;/a&gt;:</source>
          <target state="translated">렌더링 함수를 사용하거나 &lt;code&gt;computed&lt;/code&gt; 속성을 만드는 것을 선호하는 경우 &lt;a href=&quot;composition-api&quot;&gt;Composition API&lt;/a&gt; 에서 &lt;code&gt;useLink&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2cf49d509e0a3607c76d7e53f4e62c0f9c2c6cc1" translate="yes" xml:space="preserve">
          <source>If you want to simulate the &quot;scroll to anchor&quot; behavior:</source>
          <target state="translated">&quot;스크롤 고정&quot;동작을 시뮬레이션하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d25c358abf8f92a3c961f2ff25d6053db583fbab" translate="yes" xml:space="preserve">
          <source>If you wish to customize this behavior, e.g. take into account the &lt;code&gt;hash&lt;/code&gt; section, you should use the &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; to extend &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;hash&lt;/code&gt; 섹션 을 고려하여이 동작을 사용자 정의 하려면 &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt; &lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; 를 사용하여 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 를 확장 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="628ec263bf2844b96b116e2c13ebbc75164336c6" translate="yes" xml:space="preserve">
          <source>If your browser supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior&quot;&gt;scroll behavior&lt;/a&gt;, you can make it smooth:</source>
          <target state="translated">브라우저가 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior&quot;&gt;스크롤 동작을&lt;/a&gt; 지원 하는 경우 매끄럽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af121786c707b3ca9ef9605d9fbbc36c7b411ea1" translate="yes" xml:space="preserve">
          <source>If your route has parameters, make sure to include them in any absolute alias:</source>
          <target state="translated">경로에 매개 변수가있는 경우 절대 별칭에 매개 변수를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="cae5537a6af22693e8cc60001bfaf1893dd13eca" translate="yes" xml:space="preserve">
          <source>Imagine having the following router with one single route:</source>
          <target state="translated">단일 경로가있는 다음 라우터가 있다고 상상해보십시오.</target>
        </trans-unit>
        <trans-unit id="8ae10a7d8459debcadacac2bb97288eee8b865ff" translate="yes" xml:space="preserve">
          <source>In 2.2.0+, optionally provide &lt;code&gt;onComplete&lt;/code&gt; and &lt;code&gt;onAbort&lt;/code&gt; callbacks to &lt;code&gt;router.push&lt;/code&gt; or &lt;code&gt;router.replace&lt;/code&gt; as the 2nd and 3rd arguments. These callbacks will be called when the navigation either successfully completed (after all async hooks are resolved), or aborted (navigated to the same route, or to a different route before current navigation has finished), respectively. In 3.1.0+, you can omit the 2nd and 3rd parameter and &lt;code&gt;router.push&lt;/code&gt;/&lt;code&gt;router.replace&lt;/code&gt; will return a promise instead if Promises are supported.</source>
          <target state="translated">2.2.0 이상에서는 선택적으로 &lt;code&gt;onComplete&lt;/code&gt; 및 &lt;code&gt;onAbort&lt;/code&gt; 콜백을 &lt;code&gt;router.push&lt;/code&gt; 또는 &lt;code&gt;router.replace&lt;/code&gt; 에 두 번째 및 세 번째 인수로 제공하십시오. 이 콜백은 각각의 탐색이 성공적으로 완료되거나 (모든 비동기 후크가 해결 된 후) 중단되거나 (동일한 경로로 탐색되거나 현재 탐색이 완료되기 전에 다른 경로로) 호출 될 때 호출됩니다. 3.1.0 이상에서는 2 차 및 3 차 매개 변수를 생략 할 수 있으며 &lt;code&gt;router.push&lt;/code&gt; / &lt;code&gt;router.replace&lt;/code&gt; 는 약속이 지원되는 경우 대신 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed362c80e4a0c1d90cf802b990d676db62248b7d" translate="yes" xml:space="preserve">
          <source>In HTML5 history mode, &lt;code&gt;router-link&lt;/code&gt; will intercept the click event so that the browser doesn't try to reload the page.</source>
          <target state="translated">HTML5 기록 모드에서 &lt;code&gt;router-link&lt;/code&gt; 는 클릭 이벤트를 차단하여 브라우저가 페이지를 다시로드하려고 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0559d066ccf324232d9ddb62fa5276b3390d603" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;$route.params&lt;/code&gt;, the &lt;code&gt;$route&lt;/code&gt; object also exposes other useful information such as &lt;code&gt;$route.query&lt;/code&gt; (if there is a query in the URL), &lt;code&gt;$route.hash&lt;/code&gt;, etc. You can check out the full details in the &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">뿐만 아니라 &lt;code&gt;$route.params&lt;/code&gt; 는 &lt;code&gt;$route&lt;/code&gt; 객체는 같은 기타 유용한 정보를 노출 &lt;code&gt;$route.query&lt;/code&gt; (URL에 쿼리가있는 경우) &lt;code&gt;$route.hash&lt;/code&gt; 당신은에서 자세한 내용을 확인할 수 있습니다, 등 &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;API 참조&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="123c58d7d20c981fdc7b0a2f037f2f3fb1149e14" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;$route.params&lt;/code&gt;, the &lt;code&gt;$route&lt;/code&gt; object also exposes other useful information such as &lt;code&gt;$route.query&lt;/code&gt; (if there is a query in the URL), &lt;code&gt;$route.hash&lt;/code&gt;, etc. You can check out the full details in the &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">뿐만 아니라 &lt;code&gt;$route.params&lt;/code&gt; 는 &lt;code&gt;$route&lt;/code&gt; 객체는 같은 기타 유용한 정보를 노출 &lt;code&gt;$route.query&lt;/code&gt; (URL에 쿼리가있는 경우) &lt;code&gt;$route.hash&lt;/code&gt; 당신은에서 자세한 내용을 확인할 수 있습니다, 등 &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;API 참조&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c091137da9c8bf9dad00a78ac51c44c72c7f1633" translate="yes" xml:space="preserve">
          <source>In all cases, &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; are normalized route locations.</source>
          <target state="translated">모든 경우에, &lt;code&gt;to&lt;/code&gt; 와 &lt;code&gt;from&lt;/code&gt; 정규화 된 경로 위치입니다.</target>
        </trans-unit>
        <trans-unit id="24c9352ede93756918856c618a17b8a9c6356bed" translate="yes" xml:space="preserve">
          <source>In both cases, the router will navigate to the path &lt;code&gt;/user/123&lt;/code&gt;.</source>
          <target state="translated">두 경우 모두, 라우터는 &lt;code&gt;/user/123&lt;/code&gt; 경로로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="be9f04b73f3fd15873ce54f6c3576986215a4ac2" translate="yes" xml:space="preserve">
          <source>In both cases, the router will navigate to the path &lt;code&gt;/user/erina&lt;/code&gt;.</source>
          <target state="translated">두 경우 모두 라우터는 &lt;code&gt;/user/erina&lt;/code&gt; 경로로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="e533914aa31f20a4125d3d149dd7c0f5212753ea" translate="yes" xml:space="preserve">
          <source>In general, it's a good idea &lt;strong&gt;to always use dynamic imports&lt;/strong&gt; for all your routes.</source>
          <target state="translated">일반적으로 모든 경로에 대해 &lt;strong&gt;항상 동적 가져 오기&lt;/strong&gt; 를 &lt;strong&gt;사용&lt;/strong&gt; 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="4e5b361507dc6af09afbce464c84de751e4dc20d" translate="yes" xml:space="preserve">
          <source>In order to use transitions on your route components and animate navigations, you need to use the &lt;a href=&quot;../../api/index#router-view-s-v-slot&quot;&gt;v-slot API&lt;/a&gt;:</source>
          <target state="translated">경로 구성 요소에서 전환을 사용하고 탐색을 애니메이션하려면 &lt;a href=&quot;../../api/index#router-view-s-v-slot&quot;&gt;v-slot API&lt;/a&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4fafdcb96e5bc2be63e1d1c4b79430e604edc5e7" translate="yes" xml:space="preserve">
          <source>In practice, you might want to use your &lt;code&gt;AppLink&lt;/code&gt; component for different parts of your application. e.g. using &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind CSS&lt;/a&gt;, you could create a &lt;code&gt;NavLink.vue&lt;/code&gt; component with all the classes:</source>
          <target state="translated">실제로 애플리케이션의 여러 부분에 &lt;code&gt;AppLink&lt;/code&gt; 구성 요소 를 사용할 수 있습니다. 예를 들어 &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind CSS&lt;/a&gt; 를 사용하면 모든 클래스가 포함 된 &lt;code&gt;NavLink.vue&lt;/code&gt; 구성 요소를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b65707cf85c2823fbbb1f02b766ba87e00e18b6" translate="yes" xml:space="preserve">
          <source>In previous versions of Vue Router, it was also possible to use a &lt;em&gt;third argument&lt;/em&gt;&lt;code&gt;next&lt;/code&gt;, this was a common source of mistakes and went through an &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0037-router-return-guards.md#motivation&quot;&gt;RFC&lt;/a&gt; to remove it. However, it is still supported, meaning you can pass a third argument to any navigation guard. In that case, &lt;strong&gt;you must call &lt;code&gt;next&lt;/code&gt; exactly once&lt;/strong&gt; in any given pass through a navigation guard. It can appear more than once, but only if the logical paths have no overlap, otherwise the hook will never be resolved or produce errors. Here is &lt;strong&gt;a bad example&lt;/strong&gt; of redirecting to user to &lt;code&gt;/login&lt;/code&gt; if they are not authenticated:</source>
          <target state="translated">이전 버전의 Vue Router에서는 &lt;code&gt;next&lt;/code&gt; &lt;em&gt;세 번째 인수&lt;/em&gt; 를 사용할 수도 있었습니다. 이것은 일반적인 실수의 원인이었으며 이를 제거하기 위해 &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0037-router-return-guards.md#motivation&quot;&gt;RFC&lt;/a&gt; 를 거쳤 습니다. 그러나 여전히 지원되므로 모든 내비게이션 가드에 세 번째 인수를 전달할 수 있습니다. 이 경우 내비게이션 가드를 통해 주어진 패스에서 &lt;strong&gt;정확히 한 번 &lt;/strong&gt;&lt;strong&gt; &lt;code&gt;next&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 를 호출해야합니다&lt;/strong&gt; . 두 번 이상 나타날 수 있지만 논리 경로가 겹치지 않는 경우에만 겹치지 않으면 후크가 해결되지 않거나 오류가 발생하지 않습니다. 다음은 사용자가 인증되지 않은 경우 &lt;code&gt;/login&lt;/code&gt; 으로 리디렉션 &lt;strong&gt;하는 잘못된 예&lt;/strong&gt; 입니다 .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="782d7f49a5d72cff3e2f84db10fda99309b5092d" translate="yes" xml:space="preserve">
          <source>In this specific scenario we are using a &lt;a href=&quot;route-matching-syntax#custom-regexp-in-params&quot;&gt;custom regexp&lt;/a&gt; between parentheses and marking the &lt;code&gt;pathMatch&lt;/code&gt; param as &lt;a href=&quot;route-matching-syntax#optional-parameters&quot;&gt;optionally repeatable&lt;/a&gt;. This is to allows us to directly navigate to the route if we need to by splitting the &lt;code&gt;path&lt;/code&gt; into an array:</source>
          <target state="translated">이 특정 시나리오에서는 괄호 사이에 &lt;a href=&quot;route-matching-syntax#custom-regexp-in-params&quot;&gt;사용자 정의 정규식을&lt;/a&gt; 사용 하고 &lt;code&gt;pathMatch&lt;/code&gt; 매개 변수를 &lt;a href=&quot;route-matching-syntax#optional-parameters&quot;&gt;선택적으로 반복 가능&lt;/a&gt; 으로 표시합니다 . 이것은 필요한 경우 &lt;code&gt;path&lt;/code&gt; 를 배열로 분할하여 경로 로 직접 이동할 수 있도록하기위한 것입니다 .</target>
        </trans-unit>
        <trans-unit id="d3ef6b30790e7707505a23e0b38e7700dc2f0d63" translate="yes" xml:space="preserve">
          <source>In vue-cli, nuxt, and vite projects, this file usually goes under a folder named &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="translated">vue-cli, nuxt 및 vite 프로젝트에서이 파일은 일반적으로 &lt;code&gt;static&lt;/code&gt; 또는 &lt;code&gt;public&lt;/code&gt; 이라는 폴더 아래에 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaf00c4093074d65696e6e9ab00bb1db82826baf" translate="yes" xml:space="preserve">
          <source>In-Component Guards</source>
          <target state="translated">부품 내 가드</target>
        </trans-unit>
        <trans-unit id="ab960247ddc5acc97d8c2a113b63893d536bcf7c" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;vue-router&lt;/code&gt; after Vue and it will install itself automatically:</source>
          <target state="translated">Vue 뒤에 &lt;code&gt;vue-router&lt;/code&gt; 를 포함 시키면 자동으로 설치됩니다 :</target>
        </trans-unit>
        <trans-unit id="6ea33ef6479c3bee7cc36716183bc85a1bd20da7" translate="yes" xml:space="preserve">
          <source>Initial list of routes that should be added to the router.</source>
          <target state="translated">라우터에 추가해야하는 경로의 초기 목록입니다.</target>
        </trans-unit>
        <trans-unit id="33644a716b603e6f92424ce605e53778ae79ba3e" translate="yes" xml:space="preserve">
          <source>Initial route location where the router is. Can be used in navigation guards to differentiate the initial navigation.</source>
          <target state="translated">라우터가있는 초기 경로 위치입니다. 내비게이션 가드에서 초기 내비게이션을 구분하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad7ae3fbd0a8cc0491d2e986f5c89a82826853c5" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;$route&lt;/code&gt; watcher callbacks</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; 감시자 콜백 내부</target>
        </trans-unit>
        <trans-unit id="d820495ee5f4040175aec835f4a5b5a33ef1fa06" translate="yes" xml:space="preserve">
          <source>Inside components as &lt;code&gt;this.$route&lt;/code&gt;</source>
          <target state="translated">내부 구성 요소는 &lt;code&gt;this.$route&lt;/code&gt; 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6b74dc7409c8cacfbc49aeb2ec96c522df9be3f7" translate="yes" xml:space="preserve">
          <source>Inside navigation guards as the first two arguments:</source>
          <target state="translated">첫 번째 두 가지 인수로 내부 탐색 가드 :</target>
        </trans-unit>
        <trans-unit id="c876f7b6d25954e644f1c0f79615345a5db0f583" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;scrollBehavior&lt;/code&gt; function as the first two arguments:</source>
          <target state="translated">&lt;code&gt;scrollBehavior&lt;/code&gt; 함수 내부에서 처음 두 인수로</target>
        </trans-unit>
        <trans-unit id="bd040edfed95e6068f33b83c57406115b80d4532" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;IIS UrlRewrite&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;IIS UrlRewrite&lt;/a&gt; 설치</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="91d60654c70276c1f55519257a6b16f94cdd53b8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;mod_rewrite&lt;/code&gt;, you could also use &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource&quot;&gt;&lt;code&gt;FallbackResource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mod_rewrite&lt;/code&gt; 대신 &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource&quot;&gt; &lt;code&gt;FallbackResource&lt;/code&gt; &lt;/a&gt; 를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f2f94321c0c12321807b0fb675d4b99213d9f776" translate="yes" xml:space="preserve">
          <source>Internet Information Services (IIS)</source>
          <target state="translated">인터넷 정보 서비스 (IIS)</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="7b38a0e68956f86b8611c4bc859e451a256e5d62" translate="yes" xml:space="preserve">
          <source>It acts like &lt;code&gt;router.push&lt;/code&gt;, the only difference is that it navigates without pushing a new history entry, as its name suggests - it replaces the current entry.</source>
          <target state="translated">&lt;code&gt;router.push&lt;/code&gt; 와 같이 작동하지만 유일한 차이점은 이름에서 알 수 있듯이 새 기록 항목을 푸시하지 않고 탐색한다는 것입니다. 현재 항목을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="4dd2201f9c96e8fce8de77dad5aaa7b1cd8874e3" translate="yes" xml:space="preserve">
          <source>It is also possible to determine the transition to use dynamically based on the relationship between the target route and current route. Using a very similar snippet to the one just before:</source>
          <target state="translated">대상 경로와 현재 경로 간의 관계를 기반으로 동적으로 사용할 전환을 결정할 수도 있습니다. 직전과 매우 유사한 스 니펫 사용 :</target>
        </trans-unit>
        <trans-unit id="3b0a42d5487908d2325dff65c967d5d5a60b2223" translate="yes" xml:space="preserve">
          <source>It is also possible to determine the transition to use dynamically based on the relationship between the target route and current route:</source>
          <target state="translated">대상 경로와 현재 경로 간의 관계를 기반으로 동적으로 사용할 전환을 결정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b25562a9e1b9df280a5fe2c99faad91421f8e2a" translate="yes" xml:space="preserve">
          <source>It is possible to create complex layouts using named views with nested views. When doing so, you will also need to give nested &lt;code&gt;router-view&lt;/code&gt; a name. Let's take a Settings panel example:</source>
          <target state="translated">중첩 된 뷰가있는 명명 된 뷰를 사용하여 복잡한 레이아웃을 만들 수 있습니다. 그렇게 할 때 중첩 된 &lt;code&gt;router-view&lt;/code&gt; 에 이름을 지정해야합니다. 설정 패널의 예를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="a7b7d69c290b5bd596fb28a4ccea84635c6bdac7" translate="yes" xml:space="preserve">
          <source>It is possible to create complex layouts using named views with nested views. When doing so, you will also need to name nested &lt;code&gt;router-view&lt;/code&gt; components used. Let's take a Settings panel example:</source>
          <target state="translated">중첩 된 뷰가있는 명명 된 뷰를 사용하여 복잡한 레이아웃을 생성 할 수 있습니다. 그렇게 할 때 사용 된 중첩 &lt;code&gt;router-view&lt;/code&gt; 구성 요소의 이름도 지정해야합니다 . 설정 패널 예제를 보자.</target>
        </trans-unit>
        <trans-unit id="81d0e504088dda7cc62b721fb627aa9bee443e41" translate="yes" xml:space="preserve">
          <source>It is possible to type the meta field by extending the &lt;code&gt;RouteMeta&lt;/code&gt; interface:</source>
          <target state="translated">&lt;code&gt;RouteMeta&lt;/code&gt; 인터페이스 를 확장하여 메타 필드를 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd1b5f5c29b6497f61ce7508d8bab18e0dd25a54" translate="yes" xml:space="preserve">
          <source>It is worth mentioning that Vue Router navigation methods (&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;) work consistently in all router modes (&lt;code&gt;history&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;abstract&lt;/code&gt;).</source>
          <target state="translated">Vue Router 탐색 방법 ( &lt;code&gt;push&lt;/code&gt; , &lt;code&gt;replace&lt;/code&gt; , &lt;code&gt;go&lt;/code&gt; )은 모든 라우터 모드 ( &lt;code&gt;history&lt;/code&gt; , &lt;code&gt;hash&lt;/code&gt; 및 &lt;code&gt;abstract&lt;/code&gt; ) 에서 일관되게 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="727fcfe489da6a794c57bd83e62d1074d4cfb953" translate="yes" xml:space="preserve">
          <source>It is worth mentioning that Vue Router navigation methods (&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;) work consistently no matter the kind of &lt;a href=&quot;../../api/index#history&quot;&gt;&lt;code&gt;history&lt;/code&gt; option&lt;/a&gt; is passed when creating the router instance.</source>
          <target state="translated">Vue Router 탐색 방법 ( &lt;code&gt;push&lt;/code&gt; , &lt;code&gt;replace&lt;/code&gt; , &lt;code&gt;go&lt;/code&gt; ) 은 라우터 인스턴스를 만들 때 전달되는 &lt;a href=&quot;../../api/index#history&quot;&gt; &lt;code&gt;history&lt;/code&gt; 옵션&lt;/a&gt; 의 종류에 관계없이 일관되게 작동 한다는 점을 언급 할 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f030b9d9f6ad48cfae5fd8ac9cbb110c6c37c67d" translate="yes" xml:space="preserve">
          <source>It uses a hash character (&lt;code&gt;#&lt;/code&gt;) before the actual URL that is internally passed. Because this section of the URL is never sent to the server, it doesn't require any special treatment on the server level. &lt;strong&gt;It does however have a bad impact in SEO&lt;/strong&gt;. If that's a concern for you, use the HTML5 history mode.</source>
          <target state="translated">내부적으로 전달되는 실제 URL 앞에 해시 문자 ( &lt;code&gt;#&lt;/code&gt; )를 사용합니다. 이 URL 섹션은 서버로 전송되지 않으므로 서버 수준에서 특별한 처리가 필요하지 않습니다. &lt;strong&gt;그러나 그것은 SEO에 나쁜 영향을 미칩니다&lt;/strong&gt; . 이것이 걱정된다면 HTML5 히스토리 모드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3d7b30b16b9eb13c34964f528c2928fc9569c73c" translate="yes" xml:space="preserve">
          <source>It works the same way in both HTML5 history mode and hash mode, so if you ever decide to switch mode, or when the router falls back to hash mode in IE9, nothing needs to be changed.</source>
          <target state="translated">HTML5 히스토리 모드와 해시 모드에서 모두 동일한 방식으로 작동하므로 모드를 전환하기로 결정하거나 라우터가 IE9에서 해시 모드로 돌아갈 때 아무것도 변경할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="95da97951714f8275297cc461ba6368782badc3e" translate="yes" xml:space="preserve">
          <source>It's also possible to directly add a property &lt;code&gt;replace: true&lt;/code&gt; to the &lt;code&gt;routeLocation&lt;/code&gt; that is passed to &lt;code&gt;router.push&lt;/code&gt;:</source>
          <target state="translated">그것은 직접 속성을 추가 할 수도 있습니다 &lt;code&gt;replace: true&lt;/code&gt; 받는 &lt;code&gt;routeLocation&lt;/code&gt; 에 전달됩니다 &lt;code&gt;router.push&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ee098f844094a7c03980d5161149e4ab793d52bd" translate="yes" xml:space="preserve">
          <source>It's also possible to redirect to a relative location:</source>
          <target state="translated">상대 위치로 리디렉션 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a683fb5d21ff64bdb536f3cf69c63824f1405dc5" translate="yes" xml:space="preserve">
          <source>It's also possible to throw an &lt;code&gt;Error&lt;/code&gt; if an unexpected situation was met. This will also cancel the navigation and call any callback registered via &lt;a href=&quot;../../api/index#onerror&quot;&gt;&lt;code&gt;router.onError()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예기치 않은 상황이 발생 하면 &lt;code&gt;Error&lt;/code&gt; 발생할 수도 있습니다 . 이것은 또한 탐색을 취소하고 &lt;a href=&quot;../../api/index#onerror&quot;&gt; &lt;code&gt;router.onError()&lt;/code&gt; &lt;/a&gt; 를 통해 등록 된 모든 콜백을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="ebdf11f436055ccb0f4e6d63818ee613b025039c" translate="yes" xml:space="preserve">
          <source>It's possible to hook this up with events from a page-level transition component to make the scroll behavior play nicely with your page transitions, but due to the possible variance and complexity in use cases, we simply provide this primitive to enable specific userland implementations.</source>
          <target state="translated">이를 페이지 수준 전환 구성 요소의 이벤트와 연결하여 페이지 전환과 함께 스크롤 동작을 훌륭하게 수행 할 수 있지만 사용 사례의 차이와 복잡성으로 인해이 프리미티브를 제공하여 특정 사용자 구현을 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="2023893211646b38329738f0c75758b66f90c972" translate="yes" xml:space="preserve">
          <source>Lazy Loading Routes</source>
          <target state="translated">지연 로딩 경로</target>
        </trans-unit>
        <trans-unit id="82dd054881d919f11b4984e16cd88f149ee21db8" translate="yes" xml:space="preserve">
          <source>Learn more about navigation failures on &lt;a href=&quot;navigation-failures&quot;&gt;its guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;navigation-failures&quot;&gt;가이드&lt;/a&gt; 에서 탐색 실패에 대해 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="960763001b8d9b9065802f6e1547e28eeab1142a" translate="yes" xml:space="preserve">
          <source>Let's assume we have a &lt;code&gt;Post&lt;/code&gt; component that needs to fetch the data for a post based on &lt;code&gt;$route.params.id&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;$route.params.id&lt;/code&gt; 기반으로 한 게시물의 데이터를 가져와야 하는 &lt;code&gt;Post&lt;/code&gt; 컴포넌트 가 있다고 가정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="7d9beb7cfbec11578096c45ff575d51ae36be5be" translate="yes" xml:space="preserve">
          <source>Let's extend RouterLink to handle external links as well and adding a custom &lt;code&gt;inactive-class&lt;/code&gt; in an &lt;code&gt;AppLink.vue&lt;/code&gt; file:</source>
          <target state="translated">RouterLink를 확장하여 외부 링크도 처리 하고 &lt;code&gt;AppLink.vue&lt;/code&gt; 파일 에 사용자 지정 &lt;code&gt;inactive-class&lt;/code&gt; 를 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="6fb99167f96cfad1971c85dcd1d05fa9f2b6b7ab" translate="yes" xml:space="preserve">
          <source>Let's say you want to use the package &lt;a href=&quot;https://github.com/ljharb/qs&quot;&gt;qs&lt;/a&gt; to parse queries, you can provide both &lt;code&gt;parseQuery&lt;/code&gt; and &lt;code&gt;stringifyQuery&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ljharb/qs&quot;&gt;qs&lt;/a&gt; 패키지를 사용하여 쿼리를 구문 분석하고 &lt;code&gt;parseQuery&lt;/code&gt; 와 &lt;code&gt;stringifyQuery&lt;/code&gt; 를 모두 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="4915ca87eec25d13d5ac866672b6c4238dab8b71" translate="yes" xml:space="preserve">
          <source>Links with automatic active CSS classes</source>
          <target state="translated">자동 활성 CSS 클래스와의 링크</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="73577b97f7fb4a49bc08e3c3dacdf5efacd08be5" translate="yes" xml:space="preserve">
          <source>Looking at existing routes</source>
          <target state="translated">기존 경로보기</target>
        </trans-unit>
        <trans-unit id="4e0e0d8f508f5f76e2da4beec76db69b72c0d2ce" translate="yes" xml:space="preserve">
          <source>MIT Licensed | Copyright &amp;copy; 2014-present Evan You, Eduardo San Martin Morote</source>
          <target state="translated">MIT 라이센스 | 저작권 &amp;copy; 2014- 현재 Evan You, Eduardo San Martin Morote</target>
        </trans-unit>
        <trans-unit id="470a58d707562a96dccfe89d233cb39f51ee3b85" translate="yes" xml:space="preserve">
          <source>Make sure to &lt;strong&gt;escape backslashes (&lt;code&gt;\&lt;/code&gt;)&lt;/strong&gt; like we did with &lt;code&gt;\d&lt;/code&gt; (becomes &lt;code&gt;\\d&lt;/code&gt;) to actually pass the backslash character in a string in JavaScript.</source>
          <target state="translated">실제로 JavaScript의 문자열에서 백 슬래시 문자를 전달하려면 &lt;code&gt;\d&lt;/code&gt; ( &lt;code&gt;\\d&lt;/code&gt; )에서 했던 것처럼 &lt;strong&gt;백 슬래시 ( &lt;code&gt;\&lt;/code&gt; )&lt;/strong&gt; 를 &lt;strong&gt;이스케이프&lt;/strong&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="92680ca040170e2f3c165102fde3e8bf6487a0ea" translate="yes" xml:space="preserve">
          <source>Matching Priority</source>
          <target state="translated">일치하는 우선 순위</target>
        </trans-unit>
        <trans-unit id="6853c98a6f4358bbfed1b3b9c81d308649299b0f" translate="yes" xml:space="preserve">
          <source>Member</source>
          <target state="translated">Member</target>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="a818f7755875219fecec57f0a3928722b60eaee4" translate="yes" xml:space="preserve">
          <source>Migrating from Vue 2</source>
          <target state="translated">Vue 2에서 마이그레이션</target>
        </trans-unit>
        <trans-unit id="0cbcf4f06b58b82b0ef4f4ebb7b6bfa25b5455c4" translate="yes" xml:space="preserve">
          <source>Missing required &lt;code&gt;params&lt;/code&gt; on named routes</source>
          <target state="translated">이름이 지정된 경로에 필수 &lt;code&gt;params&lt;/code&gt; 누락되었습니다.</target>
        </trans-unit>
        <trans-unit id="3211dfc6706021083577bbc609b0178a57df986b" translate="yes" xml:space="preserve">
          <source>Modular, component-based router configuration</source>
          <target state="translated">모듈 식 컴포넌트 기반 라우터 구성</target>
        </trans-unit>
        <trans-unit id="f22823a2fd44dbe72abae48bfb0f4aaa1c23b6b0" translate="yes" xml:space="preserve">
          <source>Most applications will use static routes like &lt;code&gt;/about&lt;/code&gt; and dynamic routes like &lt;code&gt;/users/:userId&lt;/code&gt; like we just saw in &lt;a href=&quot;dynamic-matching&quot;&gt;Dynamic Route Matching&lt;/a&gt;, but Vue Router has much more to offer!</source>
          <target state="translated">대부분의 응용 프로그램은 &lt;a href=&quot;dynamic-matching&quot;&gt;Dynamic Route Matching&lt;/a&gt; 에서 방금 본 것처럼 &lt;code&gt;/about&lt;/code&gt; 과 같은 정적 경로와 / &lt;code&gt;/users/:userId&lt;/code&gt; 와 같은 동적 경로 를 사용하지만 Vue Router는 훨씬 더 많은 것을 제공합니다!</target>
        </trans-unit>
        <trans-unit id="90f4b3a2fda0bcb45085fe57c2956f448fc1f4e6" translate="yes" xml:space="preserve">
          <source>Most of Vue Router API has remained unchanged during its rewrite from v3 (for Vue 2) to v4 (for Vue 3) but there are still a few breaking changes that you might encounter while migrating your application. This guide is here to help you understand why these changes happened and how to adapt your application to make it work with Vue Router 4.</source>
          <target state="translated">대부분의 Vue Router API는 v3 (Vue 2의 경우)에서 v4 (Vue 3의 경우)로 재 작성하는 동안 변경되지 않았지만 여전히 애플리케이션을 마이그레이션하는 동안 발생할 수있는 몇 가지 주요 변경 사항이 있습니다. 이 가이드는 이러한 변경 사항이 발생한 이유와 Vue Router 4에서 작동하도록 애플리케이션을 조정하는 방법을 이해하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="357ce8af641ad6024526b4587590a1b5fd5039a8" translate="yes" xml:space="preserve">
          <source>Moved the &lt;code&gt;base&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; 옵션을 이동했습니다.</target>
        </trans-unit>
        <trans-unit id="e3c3100c0ee24cb9d9ea4f0877f0905c1b82d9ba" translate="yes" xml:space="preserve">
          <source>Multiple views records (&lt;a href=&quot;../guide/essentials/named-views&quot;&gt;named views&lt;/a&gt;): have a &lt;code&gt;components&lt;/code&gt; option</source>
          <target state="translated">다중보기 레코드 ( &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;명명 된보기&lt;/a&gt; ) : &lt;code&gt;components&lt;/code&gt; 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="96151afb0ff27ffefdb8a977735f92951b71c0b2" translate="yes" xml:space="preserve">
          <source>Name for the route record. &lt;code&gt;undefined&lt;/code&gt; if none was provided.</source>
          <target state="translated">경로 레코드의 이름입니다. &lt;code&gt;undefined&lt;/code&gt; 경우 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8b2ba2810eca3e2a2e049e5b700a9bc6f49c2eca" translate="yes" xml:space="preserve">
          <source>Name of the route to check</source>
          <target state="translated">확인할 경로의 이름</target>
        </trans-unit>
        <trans-unit id="feb81e7caba6e84aa1708562a1114a1e3142596d" translate="yes" xml:space="preserve">
          <source>Name of the route to remove</source>
          <target state="translated">제거 할 경로의 이름</target>
        </trans-unit>
        <trans-unit id="b33d0a16416aadff4b68e3238fad1ab174a916bb" translate="yes" xml:space="preserve">
          <source>Named Routes</source>
          <target state="translated">명명 된 경로</target>
        </trans-unit>
        <trans-unit id="4b4baaa726aeae2df5efab33c30dccfc59484a03" translate="yes" xml:space="preserve">
          <source>Named Views</source>
          <target state="translated">명명 된 뷰</target>
        </trans-unit>
        <trans-unit id="914b6a22355623df7b5d899294a80c57435831d7" translate="yes" xml:space="preserve">
          <source>Named children routes with an empty &lt;code&gt;path&lt;/code&gt; no longer appends a slash</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 가 비어있는 명명 된 하위 경로 가 더 이상 슬래시를 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="61d331e04fbf14eebc4764009f0446b5379c6b80" translate="yes" xml:space="preserve">
          <source>Named views</source>
          <target state="translated">명명 된 뷰</target>
        </trans-unit>
        <trans-unit id="af41b08c1d868960ee0e9d9af1ed763d0fb61bc6" translate="yes" xml:space="preserve">
          <source>Native Node.js</source>
          <target state="translated">네이티브 Node.js</target>
        </trans-unit>
        <trans-unit id="48b4388ba7a705c5499cb14b885f6877cc0f09d6" translate="yes" xml:space="preserve">
          <source>Navigate to a different location</source>
          <target state="translated">다른 위치로 이동</target>
        </trans-unit>
        <trans-unit id="7a189408428569f56a01ea8a00d8ad2c20ecd6d8" translate="yes" xml:space="preserve">
          <source>Navigating or resolving to the named route &lt;code&gt;dashboard&lt;/code&gt; will now produce a URL &lt;strong&gt;without a trailing slash&lt;/strong&gt;:</source>
          <target state="translated">이제 명명 된 경로 &lt;code&gt;dashboard&lt;/code&gt; 로 이동하거나 확인 &lt;strong&gt;하면 후행 슬래시가없는&lt;/strong&gt; URL이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="0314f151ede8c8503a59cfbfc3523b01d34aecf7" translate="yes" xml:space="preserve">
          <source>Navigation Failures</source>
          <target state="translated">탐색 실패</target>
        </trans-unit>
        <trans-unit id="07230c4db479422597919304a18bd14cae18e95e" translate="yes" xml:space="preserve">
          <source>Navigation Guards</source>
          <target state="translated">네비게이션 가드</target>
        </trans-unit>
        <trans-unit id="ad97c58c21ae3ad462c67b621752398d8cf7de88" translate="yes" xml:space="preserve">
          <source>Navigation confirmed.</source>
          <target state="translated">탐색이 확인되었습니다.</target>
        </trans-unit>
        <trans-unit id="36dce255ed2b66c1383cee16a5b56882628ef880" translate="yes" xml:space="preserve">
          <source>Navigation guard applied when entering this record from somewhere else.</source>
          <target state="translated">다른 곳에서이 레코드를 입력 할 때 내비게이션 가드가 적용되었습니다.</target>
        </trans-unit>
        <trans-unit id="9e5f50ce4cf1f31c2f564fe1c7376dae97b5d9e3" translate="yes" xml:space="preserve">
          <source>Navigation guard to add</source>
          <target state="translated">추가 할 내비게이션 가드</target>
        </trans-unit>
        <trans-unit id="b963954a8eaddaedd87360c2ae706f15babaccc3" translate="yes" xml:space="preserve">
          <source>Navigation guards</source>
          <target state="translated">내비게이션 가드</target>
        </trans-unit>
        <trans-unit id="559d530e63bf6d2141aa81f2bea1bf91ee38f7b8" translate="yes" xml:space="preserve">
          <source>Navigation guards in mixins are ignored</source>
          <target state="translated">믹스 인의 내비게이션 가드는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9f221d368d3114fc49312f46b6d13a34dda2b8f8" translate="yes" xml:space="preserve">
          <source>Navigation is confirmed.</source>
          <target state="translated">내비게이션이 확인되었습니다.</target>
        </trans-unit>
        <trans-unit id="1aaed24547504400177ecf8ccb6c88025b631a06" translate="yes" xml:space="preserve">
          <source>Navigation triggered.</source>
          <target state="translated">탐색이 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="ef7405a3aaf9c9d82e8c0e3630b5b9eeb12a3c33" translate="yes" xml:space="preserve">
          <source>NavigationFailure</source>
          <target state="translated">NavigationFailure</target>
        </trans-unit>
        <trans-unit id="a113caeb70c0c9e88c0d5a791cb8c753474c4b31" translate="yes" xml:space="preserve">
          <source>NavigationFailureType</source>
          <target state="translated">NavigationFailureType</target>
        </trans-unit>
        <trans-unit id="398dc7bfc38c99f2eafd2f16e20e708ba8aa355d" translate="yes" xml:space="preserve">
          <source>NavigationGuard</source>
          <target state="translated">NavigationGuard</target>
        </trans-unit>
        <trans-unit id="645c1a609218a4d27634dfa8ea27c89f5f1ce092" translate="yes" xml:space="preserve">
          <source>NavigationHookAfter</source>
          <target state="translated">NavigationHookAfter</target>
        </trans-unit>
        <trans-unit id="0b5ff356281045481c2265d94104931fc97e4610" translate="yes" xml:space="preserve">
          <source>Nested Named Views</source>
          <target state="translated">중첩 된 명명 된 뷰</target>
        </trans-unit>
        <trans-unit id="bef32b44309c819256ef91505f3ce46153114806" translate="yes" xml:space="preserve">
          <source>Nested Routes</source>
          <target state="translated">중첩 경로</target>
        </trans-unit>
        <trans-unit id="2f30bbc93aff9a021a6bb7d40bb01c7e1a30b727" translate="yes" xml:space="preserve">
          <source>Nested route/view mapping</source>
          <target state="translated">중첩 된 라우트 / 뷰 매핑</target>
        </trans-unit>
        <trans-unit id="0acd1e85a404e5891f604d402741f453222fb1cb" translate="yes" xml:space="preserve">
          <source>Nested routes mapping</source>
          <target state="translated">중첩 된 경로 매핑</target>
        </trans-unit>
        <trans-unit id="7f099e38519c7e17d0bfe72f101c6fc1c48253ab" translate="yes" xml:space="preserve">
          <source>Nested routes of the current record.</source>
          <target state="translated">현재 레코드의 중첩 된 경로입니다.</target>
        </trans-unit>
        <trans-unit id="1bd711a21d476e6fe66700859fd27013606d0d82" translate="yes" xml:space="preserve">
          <source>Netlify</source>
          <target state="translated">Netlify</target>
        </trans-unit>
        <trans-unit id="991811073fa9e43dacc47a3e8d3f151b6f8a5061" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;history&lt;/code&gt; option to replace &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 를 대체하는 새로운 &lt;code&gt;history&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="025519ea3f483eb11a3c8608b8a731eee0947b1b" translate="yes" xml:space="preserve">
          <source>New Features</source>
          <target state="translated">새로운 기능</target>
        </trans-unit>
        <trans-unit id="cfb4b21b400ed7bdabab34b9e79d6404c608dbeb" translate="yes" xml:space="preserve">
          <source>New in 2.8.0</source>
          <target state="translated">2.8.0의 새로운 기능</target>
        </trans-unit>
        <trans-unit id="9e9a067b68d4d9013ce433c5f888f696111a4f9f" translate="yes" xml:space="preserve">
          <source>No hardcoded URLs</source>
          <target state="translated">하드 코딩 된 URL 없음</target>
        </trans-unit>
        <trans-unit id="8a37868af5c11b20e29bb32be6de412ad6ea3aa5" translate="yes" xml:space="preserve">
          <source>Non existent named routes</source>
          <target state="translated">존재하지 않는 명명 된 경로</target>
        </trans-unit>
        <trans-unit id="64975cede4ab166943299cfacf29df64b9b5b32e" translate="yes" xml:space="preserve">
          <source>Normalized path of the record. Includes any parent's &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">레코드의 정규화 된 경로입니다. 부모의 &lt;code&gt;path&lt;/code&gt; 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="1421b5e69d37af4f223d60869150e8ac86c8dee9" translate="yes" xml:space="preserve">
          <source>Normalized route location. Does not have any &lt;a href=&quot;#routerecordraw&quot;&gt;redirect records&lt;/a&gt;. In navigation guards, &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; are always of this type.</source>
          <target state="translated">정규화 된 경로 위치. &lt;a href=&quot;#routerecordraw&quot;&gt;리디렉션 레코드&lt;/a&gt; 가 없습니다 . 탐색 가드에서, &lt;code&gt;to&lt;/code&gt; 그리고 &lt;code&gt;from&lt;/code&gt; 항상 이러한 유형의 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb9428be15ef4072ac82f32f8a16385c5c251696" translate="yes" xml:space="preserve">
          <source>Normalized version of a &lt;a href=&quot;#routerecordraw&quot;&gt;Route Record&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#routerecordraw&quot;&gt;경로 레코드&lt;/a&gt; 의 정규화 된 버전</target>
        </trans-unit>
        <trans-unit id="72a0e8bd8ba8cfc1de48c1ade52eb80e3b492ce5" translate="yes" xml:space="preserve">
          <source>Not to worry: To fix the issue, all you need to do is add a simple catch-all fallback route to your server. If the URL doesn't match any static assets, it should serve the same &lt;code&gt;index.html&lt;/code&gt; page that your app lives in. Beautiful, again!</source>
          <target state="translated">걱정하지 마십시오. 문제를 해결하려면 서버에 간단한 catch-all 폴백 경로를 추가하기 만하면됩니다. URL이 정적 자산과 일치하지 않으면 앱이 있는 것과 동일한 &lt;code&gt;index.html&lt;/code&gt; 페이지를 제공해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f19d6f903ec7fe4c25f4d1bb684621417b47e039" translate="yes" xml:space="preserve">
          <source>Note &lt;code&gt;path&lt;/code&gt; must be provided encoded (e.g. &lt;code&gt;phantom blood&lt;/code&gt; becomes &lt;code&gt;phantom%20blood&lt;/code&gt;) while &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt; must not, they are encoded by the router.</source>
          <target state="translated">참고 &lt;code&gt;path&lt;/code&gt; 는 인코딩되어 제공되어야하며 (예 : &lt;code&gt;phantom blood&lt;/code&gt; 는 &lt;code&gt;phantom%20blood&lt;/code&gt; ) &lt;code&gt;params&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;hash&lt;/code&gt; 는 제공되지 않아야하며 라우터에 의해 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="655de95e7670d92e1754b1a473e042a596c14827" translate="yes" xml:space="preserve">
          <source>Note adding routes does not trigger a new navigation, meaning that the added route will not be displayed unless a new navigation is triggered.</source>
          <target state="translated">경로를 추가해도 새 내비게이션이 트리거되지는 않습니다. 즉, 새 내비게이션이 트리거되지 않는 한 추가 된 경로가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9a6f6ffe9d4ca8311886ca7f613384b026ef4fc5" translate="yes" xml:space="preserve">
          <source>Note how instead of using regular &lt;code&gt;a&lt;/code&gt; tags, we use a custom component &lt;code&gt;router-link&lt;/code&gt; to create links. This allows Vue Router to change the URL without reloading the page, handle URL generation as well as its encoding. We will see later how to benefit from these features.</source>
          <target state="translated">대신 정기적으로 사용하는 방법을 참고 &lt;code&gt;a&lt;/code&gt; 태그를, 우리는 사용자 정의 구성 요소를 사용하는 &lt;code&gt;router-link&lt;/code&gt; 링크를 만들 수 있습니다. 이를 통해 Vue Router는 페이지를 다시로드하지 않고 URL을 변경하고 URL 생성 및 인코딩을 처리 할 수 ​​있습니다. 나중에 이러한 기능을 활용하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="faf231df9872fa9a19e36fceba50ee3b65af6768" translate="yes" xml:space="preserve">
          <source>Note it is possible to achieve a similar behavior by using &lt;a href=&quot;meta&quot;&gt;route meta fields&lt;/a&gt; and &lt;a href=&quot;#global-before-guards&quot;&gt;global navigation guards&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;meta&quot;&gt;경로 메타 필드&lt;/a&gt; 와 &lt;a href=&quot;#global-before-guards&quot;&gt;전역 내비게이션 가드&lt;/a&gt; 를 사용하여 유사한 동작을 달성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="42e1c28f71b271e74095cb412d9718f1a1dd3d89" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; are not applied on the route that redirects, only on its target. In the example below, adding a &lt;code&gt;beforeEnter&lt;/code&gt; or &lt;code&gt;beforeLeave&lt;/code&gt; guard to the &lt;code&gt;/a&lt;/code&gt; route would not have any effect.</source>
          <target state="translated">참고 &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;탐색 가드가&lt;/a&gt; 경로에 적용되지 않습니다 리디렉션 만 목표에 그. 아래 예제에서 &lt;code&gt;beforeEnter&lt;/code&gt; 또는 &lt;code&gt;beforeLeave&lt;/code&gt; 가드를 &lt;code&gt;/a&lt;/code&gt; 경로에 추가 해도 아무런 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac5192d7e15a96da5f2f24339f2563c8a5023ea7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;*&lt;/code&gt; technically also marks a parameter as optional but &lt;code&gt;?&lt;/code&gt; parameters cannot be repeated.</source>
          <target state="translated">참고 &lt;code&gt;*&lt;/code&gt; 마크에게 기술적으로도 선택 사항이지만 같은 매개 변수를 &lt;code&gt;?&lt;/code&gt; 매개 변수는 반복 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b0e81fa927ae576a7a77d7347aa93d6d3b675c08" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;beforeRouteEnter&lt;/code&gt; is the only guard that supports passing a callback to &lt;code&gt;next&lt;/code&gt;. For &lt;code&gt;beforeRouteUpdate&lt;/code&gt; and &lt;code&gt;beforeRouteLeave&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; is already available, so passing a callback is unnecessary and therefore &lt;em&gt;not supported&lt;/em&gt;:</source>
          <target state="translated">참고 &lt;code&gt;beforeRouteEnter&lt;/code&gt; 가 지원하는 콜백을 전달하는 유일한 가드 &lt;code&gt;next&lt;/code&gt; . 들어 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; 및 &lt;code&gt;beforeRouteLeave&lt;/code&gt; , &lt;code&gt;this&lt;/code&gt; 콜백을 통과하는 것은 불필요하기 때문에, 그래서 이미 사용할 &lt;em&gt;수 없습니다&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="11937dfe81e47af091a7a29839fce3ca35342c9c" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; are not applied on the route that redirects, only on its target&lt;/strong&gt;. e.g. In the example below, adding a &lt;code&gt;beforeEnter&lt;/code&gt; guard to the &lt;code&gt;/home&lt;/code&gt; route would not have any effect.</source>
          <target state="translated">참고 &lt;strong&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;탐색 가드가&lt;/a&gt; 경로에 적용되지 않습니다 리디렉션 만 목표에 그&lt;/strong&gt; . 예를 들어 아래 예에서 &lt;code&gt;beforeEnter&lt;/code&gt; 가드를 &lt;code&gt;/home&lt;/code&gt; 경로에 추가 해도 아무런 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d7545486545368445ac1f8b956c66efa2a2254bf" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;if you have navigation guards upon the initial navigation&lt;/strong&gt;, you might not want to block the app render until they are resolved unless you are doing Server Side Rendering. In this scenario, not waiting the router to be ready to mount the app would yield the same result as in Vue 2.</source>
          <target state="translated">참고 &lt;strong&gt;초기 탐색에 탐색 경비원이있는 경우&lt;/strong&gt; , 당신은 그들이 당신이 서버 사이드 렌더링을 수행하지 않는 한 해결 될 때까지 응용 프로그램 렌더링 차단할하지 않을 수 있습니다. 이 시나리오에서 라우터가 앱을 탑재 할 준비가 될 때까지 기다리지 않으면 Vue 2와 동일한 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0d1ae28e911a64fa1c1fa82d09086f2dd4cc59e4" translate="yes" xml:space="preserve">
          <source>Note this will work if &lt;code&gt;path&lt;/code&gt; was &lt;code&gt;/parent/&lt;/code&gt; as the relative location &lt;code&gt;home&lt;/code&gt; to &lt;code&gt;/parent/&lt;/code&gt; is indeed &lt;code&gt;/parent/home&lt;/code&gt; but the relative location of &lt;code&gt;home&lt;/code&gt; to &lt;code&gt;/parent&lt;/code&gt; is &lt;code&gt;/home&lt;/code&gt;.</source>
          <target state="translated">경우이 작동합니다 참고 &lt;code&gt;path&lt;/code&gt; 이었다 &lt;code&gt;/parent/&lt;/code&gt; 상대적인 위치로 &lt;code&gt;home&lt;/code&gt; 에 &lt;code&gt;/parent/&lt;/code&gt; 참 &lt;code&gt;/parent/home&lt;/code&gt; 만의 상대적 위치 &lt;code&gt;home&lt;/code&gt; 에 &lt;code&gt;/parent&lt;/code&gt; 입니다 &lt;code&gt;/home&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="acae5db10be39649ef7b1b8b5e6c79d6bc32c31b" translate="yes" xml:space="preserve">
          <source>Note we still have access to &lt;code&gt;$router&lt;/code&gt; and &lt;code&gt;$route&lt;/code&gt; in templates, so there is no need to return &lt;code&gt;router&lt;/code&gt; or &lt;code&gt;route&lt;/code&gt; inside of &lt;code&gt;setup&lt;/code&gt;.</source>
          <target state="translated">템플릿에서 &lt;code&gt;$router&lt;/code&gt; 및 &lt;code&gt;$route&lt;/code&gt; 에 계속 액세스 할 수 있으므로 &lt;code&gt;setup&lt;/code&gt; 내에서 &lt;code&gt;router&lt;/code&gt; 또는 &lt;code&gt;route&lt;/code&gt; 를 반환 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="da5e955176c936244f35826582ff7f92d57ea138" translate="yes" xml:space="preserve">
          <source>Note you can use &lt;code&gt;Symbol&lt;/code&gt;s for names in routes if you wish to use this function but want to avoid conflicts in names.</source>
          <target state="translated">이 함수를 사용하고 싶지만 이름 충돌을 피하려면 경로의 이름에 &lt;code&gt;Symbol&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="00a01f4b70602dab2d18f8611d2bc76af8c22422" translate="yes" xml:space="preserve">
          <source>Note you can use any name instead of &lt;code&gt;_&lt;/code&gt; for the param. The point is to provide one.</source>
          <target state="translated">매개 변수 에 &lt;code&gt;_&lt;/code&gt; 대신 임의의 이름을 사용할 수 있습니다 . 요점은 하나를 제공하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="66819e4b27a76327ff3f7f1554dfc32762722dc5" translate="yes" xml:space="preserve">
          <source>Nothing needs to change in the route config, just use &lt;code&gt;Foo&lt;/code&gt; as usual:</source>
          <target state="translated">경로 설정에서 아무것도 변경할 필요가 없습니다 . 평소처럼 &lt;code&gt;Foo&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b9854b4ee72e20cf46424b31f8fb60496aa9d57a" translate="yes" xml:space="preserve">
          <source>Notice that a &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; automatically gets the &lt;code&gt;.router-link-active&lt;/code&gt; class when its target route is matched. You can learn more about it in its &lt;a href=&quot;../api/index#router-link&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">유의 사항 있음 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 자동 취득 &lt;code&gt;.router-link-active&lt;/code&gt; 목표 경로가 일치 클래스. &lt;a href=&quot;../api/index#router-link&quot;&gt;API 참조 서&lt;/a&gt; 에서 이에 대해 자세히 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="40eddaef857ef5cfaedb727b42037014203c4199" translate="yes" xml:space="preserve">
          <source>Now URLs like &lt;code&gt;/user/foo&lt;/code&gt; and &lt;code&gt;/user/bar&lt;/code&gt; will both map to the same route.</source>
          <target state="translated">이제 &lt;code&gt;/user/foo&lt;/code&gt; 및 &lt;code&gt;/user/bar&lt;/code&gt; 와 같은 URL 은 모두 동일한 경로에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="d43ae5f8114af27af15f745b265122296a2214ee" translate="yes" xml:space="preserve">
          <source>Now URLs like &lt;code&gt;/users/johnny&lt;/code&gt; and &lt;code&gt;/users/jolyne&lt;/code&gt; will both map to the same route.</source>
          <target state="translated">이제 &lt;code&gt;/users/johnny&lt;/code&gt; 및 &lt;code&gt;/users/jolyne&lt;/code&gt; 과 같은 URL 은 모두 동일한 경로에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="05c463d638e96afc65424ce9cbbd07841457c3d3" translate="yes" xml:space="preserve">
          <source>Now the menu will close once the navigation is finished but it will also close if the navigation was prevented. We need a way to detect if we actually changed the page we are one or not.</source>
          <target state="translated">이제 메뉴는 탐색이 완료되면 닫히지 만 탐색이 금지 된 경우에도 닫힙니다. 실제로 페이지를 변경했는지 여부를 감지하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="cc6ab08cf5a4f5f55b8a12e9df31193335d9975b" translate="yes" xml:space="preserve">
          <source>Now, going to &lt;code&gt;/25&lt;/code&gt; will match &lt;code&gt;/:orderId&lt;/code&gt; while going to anything else will match &lt;code&gt;/:productName&lt;/code&gt;. The order of the &lt;code&gt;routes&lt;/code&gt; array doesn't even matter!</source>
          <target state="translated">이제 &lt;code&gt;/25&lt;/code&gt; 로 이동 하면 &lt;code&gt;/:orderId&lt;/code&gt; 와 일치하고 다른 항목으로 이동하면 &lt;code&gt;/:productName&lt;/code&gt; 과 일치 합니다. &lt;code&gt;routes&lt;/code&gt; 배열 의 순서는 중요하지 않습니다!</target>
        </trans-unit>
        <trans-unit id="7f58022f766261caffba5edc95b9a9f6abe4cafe" translate="yes" xml:space="preserve">
          <source>Object mode</source>
          <target state="translated">객체 모드</target>
        </trans-unit>
        <trans-unit id="9e57c1fa9b77b0d8fd3557e6984a62308d3665cc" translate="yes" xml:space="preserve">
          <source>On SSR, you need to manually pass the appropriate history:</source>
          <target state="translated">SSR에서 적절한 기록을 수동으로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="cbe6bf860b85b361d427ae111c8df54a68d83e74" translate="yes" xml:space="preserve">
          <source>One consequence of this is that &lt;code&gt;&amp;lt;router-link to=&quot;/&quot;&amp;gt;&lt;/code&gt; will be active for every route! To force the link into &quot;exact match mode&quot;, use the &lt;code&gt;exact&lt;/code&gt; prop:</source>
          <target state="translated">그 결과로 &lt;code&gt;&amp;lt;router-link to=&quot;/&quot;&amp;gt;&lt;/code&gt; 가 모든 경로에 대해 활성화됩니다! 링크를 &quot;정확한 일치 모드&quot;로 설정하려면 &lt;code&gt;exact&lt;/code&gt; 소품을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="22cb362145457cd718598c267d42d98d75403097" translate="yes" xml:space="preserve">
          <source>One thing to note when using routes with params is that when the user navigates from &lt;code&gt;/user/foo&lt;/code&gt; to &lt;code&gt;/user/bar&lt;/code&gt;, &lt;strong&gt;the same component instance will be reused&lt;/strong&gt;. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. &lt;strong&gt;However, this also means that the lifecycle hooks of the component will not be called&lt;/strong&gt;.</source>
          <target state="translated">참고로 한 가지 PARAMS과 경로를 사용하는 사용자를 탐색이에서 때 &lt;code&gt;/user/foo&lt;/code&gt; 에 &lt;code&gt;/user/bar&lt;/code&gt; , &lt;strong&gt;동일한 구성 요소 인스턴스를 재사용 할 것이다&lt;/strong&gt; . 두 경로 모두 동일한 구성 요소를 렌더링하므로 이전 인스턴스를 삭제 한 다음 새 인스턴스를 만드는 것보다 효율적입니다. &lt;strong&gt;그러나 이는 구성 요소의 수명주기 후크가 호출되지 않음을 의미합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1bbf55373113eb977393f5dd321f35770e23cfdb" translate="yes" xml:space="preserve">
          <source>One thing to note when using routes with params is that when the user navigates from &lt;code&gt;/users/johnny&lt;/code&gt; to &lt;code&gt;/users/jolyne&lt;/code&gt;, &lt;strong&gt;the same component instance will be reused&lt;/strong&gt;. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. &lt;strong&gt;However, this also means that the lifecycle hooks of the component will not be called&lt;/strong&gt;.</source>
          <target state="translated">참고로 한 가지 PARAMS과 경로를 사용하고에서 사용자의 탐색 할 때 그 &lt;code&gt;/users/johnny&lt;/code&gt; 에 &lt;code&gt;/users/jolyne&lt;/code&gt; , &lt;strong&gt;동일한 구성 요소 인스턴스를 재사용 할 것이다&lt;/strong&gt; . 두 경로 모두 동일한 구성 요소를 렌더링하므로 이전 인스턴스를 삭제 한 다음 새 인스턴스를 만드는 것보다 더 효율적입니다. &lt;strong&gt;그러나 이것은 또한 컴포넌트의 라이프 사이클 후크가 호출되지 않음을 의미합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="91bd7c4c981e70d8a7a07937e2cd9a5d19e4e506" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;path&lt;/code&gt; section is matched, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; aren't taken into account anymore</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 섹션 만 일치하고 &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;hash&lt;/code&gt; 는 더 이상 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ecb266b541e4b08a278d9159821a983ea3b5932f" translate="yes" xml:space="preserve">
          <source>Optional parameters</source>
          <target state="translated">선택적 매개 변수</target>
        </trans-unit>
        <trans-unit id="c65d279781d1c756a1ffe1e390c23f7864590f08" translate="yes" xml:space="preserve">
          <source>Optional third argument &lt;code&gt;next&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 세 번째 인수 (선택 사항)</target>
        </trans-unit>
        <trans-unit id="3caa719a1c46af7afb784dedaa641ce946457ef0" translate="yes" xml:space="preserve">
          <source>Options to initialize the router</source>
          <target state="translated">라우터 초기화 옵션</target>
        </trans-unit>
        <trans-unit id="046793d8826f7ce628a8c0fe40b3cbce54497fb1" translate="yes" xml:space="preserve">
          <source>Or even use a function for dynamic redirecting:</source>
          <target state="translated">또는 동적 리디렉션 기능을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3d1f5ce248d4fbbc0d11f219d548dfc5dd5adf41" translate="yes" xml:space="preserve">
          <source>Or, use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;navigation guard&lt;/a&gt; introduced in 2.2:</source>
          <target state="translated">또는 2.2에 도입 된 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;탐색 가드를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="31f6f604ef5751678a4e76271ea8f836c84336c2" translate="yes" xml:space="preserve">
          <source>Or, use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;navigation guard&lt;/a&gt;, which also allows to cancel the navigation:</source>
          <target state="translated">또는 &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;탐색&lt;/a&gt; 을 취소 할 수 있는 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; 탐색 가드를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="494c0c8a15cd209b328c0aabdbf55374d71cbdb0" translate="yes" xml:space="preserve">
          <source>Original options object passed to create the Router. Readonly.</source>
          <target state="translated">라우터를 만들기 위해 전달 된 원래 옵션 개체입니다. 읽기 전용.</target>
        </trans-unit>
        <trans-unit id="91249dc20c49d676cce833a9923195f2e2d486ef" translate="yes" xml:space="preserve">
          <source>Other Guides</source>
          <target state="translated">기타 안내서</target>
        </trans-unit>
        <trans-unit id="feb887b2f3c99dc56536e908dd8c13c2e6068810" translate="yes" xml:space="preserve">
          <source>Otherwise there will be an initial transition as if you provided the &lt;code&gt;appear&lt;/code&gt; prop to &lt;code&gt;transition&lt;/code&gt; because the router displays its initial location (nothing) and then displays the first location.</source>
          <target state="translated">그렇지 않으면 라우터가 초기 위치 (아무것도 표시하지 않음)를 표시 한 다음 첫 번째 위치를 표시하기 때문에 &lt;code&gt;transition&lt;/code&gt; &lt;code&gt;appear&lt;/code&gt; 소품을 제공 한 것처럼 초기 전환이 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="b4d8e8d1674e7f734cc358fb12f76e2d4b7ca1da" translate="yes" xml:space="preserve">
          <source>Parent Route Record where &lt;code&gt;route&lt;/code&gt; should be appended at</source>
          <target state="translated">부모 경로 기록 &lt;code&gt;route&lt;/code&gt; 에 추가한다</target>
        </trans-unit>
        <trans-unit id="c2019c2002b88d1423b00871a4756c80a3a2781e" translate="yes" xml:space="preserve">
          <source>Passing Props to Route Components</source>
          <target state="translated">구성 요소를 전달하기 위해 소품 전달</target>
        </trans-unit>
        <trans-unit id="1455fd98f6fa17b73d47ef2c5d6a884bebc83fd7" translate="yes" xml:space="preserve">
          <source>Passing content to route components' &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;</source>
          <target state="translated">경로 구성 요소의 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 콘텐츠 전달</target>
        </trans-unit>
        <trans-unit id="d98499c5c8a6f64e0a2f509a8580a20b9e4438e1" translate="yes" xml:space="preserve">
          <source>Path of the record. Should start with &lt;code&gt;/&lt;/code&gt; unless the record is the child of another record. Can define parameters: &lt;code&gt;/users/:id&lt;/code&gt; matches &lt;code&gt;/users/1&lt;/code&gt; as well as &lt;code&gt;/users/posva&lt;/code&gt;.</source>
          <target state="translated">레코드 경로입니다. 레코드가 다른 레코드의 하위가 아닌 경우 &lt;code&gt;/&lt;/code&gt; 로 시작해야합니다 . 매개 변수를 정의 할 수 있습니다. &lt;code&gt;/users/:id&lt;/code&gt; 는 &lt;code&gt;/users/1&lt;/code&gt; 및 &lt;code&gt;/users/posva&lt;/code&gt; 와 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="4b26aba5cee750beb1314811649192d3f41dcc61" translate="yes" xml:space="preserve">
          <source>Per-Route Guard</source>
          <target state="translated">경로 별 가드</target>
        </trans-unit>
        <trans-unit id="9c95ba720f7490c64c5284e62aabf2337f81bd7a" translate="yes" xml:space="preserve">
          <source>Per-Route Transition</source>
          <target state="translated">경로 별 전환</target>
        </trans-unit>
        <trans-unit id="c7086f4a06cd82bf20f266327a0bf4a48f3f850c" translate="yes" xml:space="preserve">
          <source>Prevents you from having a typo in the url</source>
          <target state="translated">URL에 오타가있는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="bc84978ebebfacb7e5a7426cf2bc186f4e115de6" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="translated">Programmatic</target>
        </trans-unit>
        <trans-unit id="6ac41420921db4b82a6fc5a064c1c845ef1ef7bc" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation</source>
          <target state="translated">프로그래밍 방식 탐색</target>
        </trans-unit>
        <trans-unit id="44bb5bfefa4ccff63de0aa433945ea87b01b2b12" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL by pushing an entry in the history stack.</source>
          <target state="translated">기록 스택의 항목을 푸시하여 프로그래밍 방식으로 새 URL로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ef2ee3ed976304543929fa7b0a5365888b10e69a" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL by replacing the current entry in the history stack.</source>
          <target state="translated">기록 스택의 현재 항목을 대체하여 프로그래밍 방식으로 새 URL로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="94ea926127d780e977ef91fb29c2e11e32ef8f1a" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL. See &lt;a href=&quot;../guide/essentials/navigation&quot;&gt;Programmatic Navigation&lt;/a&gt; for more details.</source>
          <target state="translated">프로그래밍 방식으로 새 URL로 이동합니다. 자세한 내용은 &lt;a href=&quot;../guide/essentials/navigation&quot;&gt;프로그래밍 방식 탐색&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3bad3c00666eda3f50844fffd5dc27eff3dd96f0" translate="yes" xml:space="preserve">
          <source>Proper encoding for URLs</source>
          <target state="translated">URL에 대한 적절한 인코딩</target>
        </trans-unit>
        <trans-unit id="fe8d3baced9c5e7884c8c86724de198f8f80e16a" translate="yes" xml:space="preserve">
          <source>Provide custom query string parse / stringify functions. Overrides the default.</source>
          <target state="translated">사용자 정의 쿼리 문자열 구문 분석 / 문자열 화 기능을 제공하십시오. 기본값을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="71475c7492f9919f7120fac0c6529aab177da0a1" translate="yes" xml:space="preserve">
          <source>Pushing or resolving a named route without its required params will throw an error:</source>
          <target state="translated">필수 매개 변수없이 명명 된 경로를 푸시하거나 확인하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7d53bf0e3012da7c289e74ca05b9f82b60e56d89" translate="yes" xml:space="preserve">
          <source>Pushing or resolving a non existent named route throws an error:</source>
          <target state="translated">존재하지 않는 명명 된 경로를 푸시하거나 해결하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="30d498231c446ebbc705277a601f2f6bdcb9863b" translate="yes" xml:space="preserve">
          <source>Raw route location to resolve</source>
          <target state="translated">해결할 원시 경로 위치</target>
        </trans-unit>
        <trans-unit id="bed07d9b64ce0152e500f79bbef89c568b7f1658" translate="yes" xml:space="preserve">
          <source>Raw route locations also support an extra option &lt;code&gt;replace&lt;/code&gt; to call &lt;code&gt;router.replace()&lt;/code&gt; instead of &lt;code&gt;router.push()&lt;/code&gt; in navigation guards. Note this also internally calls &lt;code&gt;router.replace()&lt;/code&gt; even when calling &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="translated">원시 노선 위치도 추가 옵션을 지원하는 &lt;code&gt;replace&lt;/code&gt; 통화로 &lt;code&gt;router.replace()&lt;/code&gt; 대신 &lt;code&gt;router.push()&lt;/code&gt; 탐색 가드에. 이것은 또한 &lt;code&gt;router.push()&lt;/code&gt; 호출 할 때에도 내부적으로 &lt;code&gt;router.replace()&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="96f0529aa6c0b6cd2083e3a6368bba819840a7d7" translate="yes" xml:space="preserve">
          <source>Reacting to Params Changes</source>
          <target state="translated">매개 변수 변경에 반응</target>
        </trans-unit>
        <trans-unit id="526ba9b15d7e0af70c58f07b6eccd992ee1bc4bb" translate="yes" xml:space="preserve">
          <source>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</source>
          <target state="translated">실제 앱 UI는 일반적으로 여러 수준으로 중첩 된 구성 요소로 구성됩니다. URL의 세그먼트가 다음과 같이 중첩 된 구성 요소의 특정 구조에 해당하는 것도 매우 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="58cfcdca5ed542240131e60e7a5af5e83f61e786" translate="yes" xml:space="preserve">
          <source>Redirect</source>
          <target state="translated">Redirect</target>
        </trans-unit>
        <trans-unit id="872a53613a6cd7a171894de65cd005be5a189f12" translate="yes" xml:space="preserve">
          <source>Redirect and Alias</source>
          <target state="translated">리디렉션 및 별칭</target>
        </trans-unit>
        <trans-unit id="c98b4d3308a45834526ce449202848f4eba869a6" translate="yes" xml:space="preserve">
          <source>Redirect records: cannot have &lt;code&gt;component&lt;/code&gt; or &lt;code&gt;components&lt;/code&gt; option because a redirect record is never reached.</source>
          <target state="translated">레코드 리디렉션 : 리디렉션 레코드에 도달하지 않았기 때문에 &lt;code&gt;component&lt;/code&gt; 또는 &lt;code&gt;components&lt;/code&gt; 옵션을 가질 수 없습니다. ㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="05cef8495ed3efecc490bc4d66c9957eb645c538" translate="yes" xml:space="preserve">
          <source>Redirecting is also done in the &lt;code&gt;routes&lt;/code&gt; configuration. To redirect from &lt;code&gt;/a&lt;/code&gt; to &lt;code&gt;/b&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;routes&lt;/code&gt; 구성 에서도 리디렉션이 수행됩니다 . 에서 리디렉션하려면 &lt;code&gt;/a&lt;/code&gt; 로 &lt;code&gt;/b&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5e03acae55c659588b259583338e24a88915601b" translate="yes" xml:space="preserve">
          <source>Register a callback which will be called when an error is caught during a route navigation. Note for an error to be called, it must be one of the following scenarios:</source>
          <target state="translated">경로 탐색 중에 오류가 발생하면 호출 될 콜백을 등록하십시오. 오류를 호출하려면 다음 시나리오 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="6d0bced16bbab5a0c6381837cabc90ac09261c39" translate="yes" xml:space="preserve">
          <source>Regular params will only match characters in between url fragments, separated by &lt;code&gt;/&lt;/code&gt;. If we want to match &lt;strong&gt;anything&lt;/strong&gt;, we can use a custom &lt;em&gt;param&lt;/em&gt; regexp by adding the regexp inside parentheses right after the &lt;em&gt;param&lt;/em&gt;:</source>
          <target state="translated">일반 매개 변수는 &lt;code&gt;/&lt;/code&gt; 로 구분 된 URL 조각 사이의 문자와 만 일치합니다 . 우리가 일치 시키려면 &lt;strong&gt;무엇이든&lt;/strong&gt; , 우리는 사용자 정의 사용할 수 있습니다 &lt;em&gt;PARAM의&lt;/em&gt; 바로 뒤에 괄호 안에있는 정규 표현식을 추가하여 정규 표현식을 &lt;em&gt;PARAM&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="44643ea5c5697be4b30047afe003b8f7dc43c4d9" translate="yes" xml:space="preserve">
          <source>Regular params will only match characters in between url fragments, separated by &lt;code&gt;/&lt;/code&gt;. If we want to match &lt;strong&gt;anything&lt;/strong&gt;, we can use the asterisk (&lt;code&gt;*&lt;/code&gt;):</source>
          <target state="translated">일반 매개 변수는 &lt;code&gt;/&lt;/code&gt; 로 구분 된 URL 조각 사이의 문자 만 일치합니다 . 일치하는 &lt;strong&gt;것을&lt;/strong&gt; 원한다면 별표 ( &lt;code&gt;*&lt;/code&gt; )를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf4c4091520b98eb1b1999bbb53cf35fd417385f" translate="yes" xml:space="preserve">
          <source>Relative redirecting</source>
          <target state="translated">상대 리디렉션</target>
        </trans-unit>
        <trans-unit id="2cb1e457692275b0cbe497b5cdfa463b963b481c" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;params or query changes won't trigger enter/leave navigation guards&lt;/strong&gt;. You can either &lt;a href=&quot;../essentials/dynamic-matching#reacting-to-params-changes&quot;&gt;watch the &lt;code&gt;$route&lt;/code&gt; object&lt;/a&gt; to react to those changes, or use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt; in-component guard.</source>
          <target state="translated">그 기억 &lt;strong&gt;PARAMS 또는 쿼리 변경 / 휴가 탐색 가드를 입력 트리거하지 않습니다&lt;/strong&gt; . 당신도 &lt;a href=&quot;../essentials/dynamic-matching#reacting-to-params-changes&quot;&gt;시계 &lt;code&gt;$route&lt;/code&gt; 객체가&lt;/a&gt; 그 변화에 반응하거나 사용 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; 의 구성 요소 가드.</target>
        </trans-unit>
        <trans-unit id="191829e7b6f10f5436cea9c91b601a048cbca439" translate="yes" xml:space="preserve">
          <source>Remember to pass the &lt;code&gt;custom&lt;/code&gt; option to &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to prevent it from wrapping its content inside of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">통과하는 기억 &lt;code&gt;custom&lt;/code&gt; 하는 옵션 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 의 AN 콘텐츠 안에 배치되는 것을 방지하기 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 소자.</target>
        </trans-unit>
        <trans-unit id="939ae36bbcc73d32b93b93bbc6561786d94895d0" translate="yes" xml:space="preserve">
          <source>Remember you can &lt;code&gt;await router.replace()&lt;/code&gt; if you need to wait for the new route to be displayed.</source>
          <target state="translated">당신이 할 수 기억 &lt;code&gt;await router.replace()&lt;/code&gt; 새 경로를 기다릴 필요가있는 경우 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e00a015eeabefea1b90ea1fac41c07d1489ed07" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;append&lt;/code&gt; prop in &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;append&lt;/code&gt; 소품 제거</target>
        </trans-unit>
        <trans-unit id="3557f48d66187e97b27a8a248133a96fb77304c9" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; props in &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;event&lt;/code&gt; 및 &lt;code&gt;tag&lt;/code&gt; 소품 제거</target>
        </trans-unit>
        <trans-unit id="61822a9b9ff981deb989aabf9b1bfbfd30738825" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;parent&lt;/code&gt; from route locations</source>
          <target state="translated">경로 위치에서 &lt;code&gt;parent&lt;/code&gt; 제거</target>
        </trans-unit>
        <trans-unit id="152d22004c30b3a16f5ab07a204df37eacde4847" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;pathToRegexpOptions&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;pathToRegexpOptions&lt;/code&gt; 제거</target>
        </trans-unit>
        <trans-unit id="44a4b4a1c70861aa9a5fcd4b6caa6820e4178a75" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;router.app&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;router.app&lt;/code&gt; 제거</target>
        </trans-unit>
        <trans-unit id="9f1f47ac88e5282e588aef4e4a2ff6947a67692a" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;router.getMatchedComponents()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;router.getMatchedComponents()&lt;/code&gt; 제거</target>
        </trans-unit>
        <trans-unit id="080dd48e0b36ddc9454a7f3f2cd144064137993c" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;router.match&lt;/code&gt; and changes to &lt;code&gt;router.resolve&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;router.match&lt;/code&gt; 제거 및 &lt;code&gt;router.resolve&lt;/code&gt; 변경</target>
        </trans-unit>
        <trans-unit id="4e651d240bbe84a8df3ccf38f792ed08f46e2a15" translate="yes" xml:space="preserve">
          <source>Removal of the &lt;code&gt;exact&lt;/code&gt; prop in &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;exact&lt;/code&gt; 소품 제거</target>
        </trans-unit>
        <trans-unit id="c052673cfec20fa8525107747967c0ae749968cf" translate="yes" xml:space="preserve">
          <source>Removal of unnamed parameters</source>
          <target state="translated">명명되지 않은 매개 변수 제거</target>
        </trans-unit>
        <trans-unit id="b5f73fb1b2b80f9842b6f4b49a1e2a2ea2861e96" translate="yes" xml:space="preserve">
          <source>Remove an existing route by its name.</source>
          <target state="translated">이름으로 기존 경로를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8e9f34adc79c0356311276378466a5a20effada5" translate="yes" xml:space="preserve">
          <source>Removed &lt;code&gt;*&lt;/code&gt; (star or catch all) routes</source>
          <target state="translated">제거 된 &lt;code&gt;*&lt;/code&gt; (모든 스타 또는 캐치) 경로</target>
        </trans-unit>
        <trans-unit id="cd100b0e6848250c3dd868f0d275ea97db0bb3a4" translate="yes" xml:space="preserve">
          <source>Removing routes</source>
          <target state="translated">경로 제거</target>
        </trans-unit>
        <trans-unit id="bdd4afc569f64890c7549f807d82e970a947910f" translate="yes" xml:space="preserve">
          <source>Renders &lt;code&gt;&amp;lt;a href=&quot;/home&quot;&amp;gt;&amp;lt;span&amp;gt;/home&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a href=&quot;/home&quot;&amp;gt;&amp;lt;span&amp;gt;/home&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="07ef6d589785a493cc5ebbee8f1e59fd279e6918" translate="yes" xml:space="preserve">
          <source>Renders &lt;code&gt;&amp;lt;a href=&quot;/home&quot;&amp;gt;/home&amp;lt;/a&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a href=&quot;/home&quot;&amp;gt;/home&amp;lt;/a&amp;gt;&lt;/code&gt; 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="6a44f4dc77212babb33a99c2238d06f1dfc2f695" translate="yes" xml:space="preserve">
          <source>Repeatable params</source>
          <target state="translated">반복 가능한 매개 변수</target>
        </trans-unit>
        <trans-unit id="c10347b84122f6c923e90b9fdf20fd25fe47636f" translate="yes" xml:space="preserve">
          <source>Replace current location</source>
          <target state="translated">현재 위치 바꾸기</target>
        </trans-unit>
        <trans-unit id="2e1465ea43f024203be3a258e57b095e0b2762e2" translate="yes" xml:space="preserve">
          <source>Replaced &lt;code&gt;onReady&lt;/code&gt; with &lt;code&gt;isReady&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;onReady&lt;/code&gt; 를 &lt;code&gt;isReady&lt;/code&gt; 로 대체했습니다 .</target>
        </trans-unit>
        <trans-unit id="88429579c754b2e4d3683288db9f7a924c0974c7" translate="yes" xml:space="preserve">
          <source>Resolve async route components.</source>
          <target state="translated">비동기 라우트 구성 요소를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="65d0435bc7be76e6e4c3954b758cdcd778d44380" translate="yes" xml:space="preserve">
          <source>Resolved &lt;a href=&quot;#routelocationraw&quot;&gt;RouteLocationRaw&lt;/a&gt; that can contain &lt;a href=&quot;#routerecordraw&quot;&gt;redirect records&lt;/a&gt;. Apart from that it has the same properties as &lt;a href=&quot;#routelocationnormalized&quot;&gt;RouteLocationNormalized&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#routerecordraw&quot;&gt;리디렉션 레코드를&lt;/a&gt; 포함 할 수있는 &lt;a href=&quot;#routelocationraw&quot;&gt;RouteLocationRaw&lt;/a&gt; 가 해결 되었습니다 . 그 외에도 &lt;a href=&quot;#routelocationnormalized&quot;&gt;RouteLocationNormalized&lt;/a&gt; 와 동일한 속성이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e78584839e5838f29b10c37405eaf8a6ac7c76fe" translate="yes" xml:space="preserve">
          <source>Returning the &lt;code&gt;savedPosition&lt;/code&gt; will result in a native-like behavior when navigating with back/forward buttons:</source>
          <target state="translated">&lt;code&gt;savedPosition&lt;/code&gt; 을 반환하면 뒤로 / 앞으로 버튼으로 탐색 할 때 기본적으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="387c217682995e7b70e87fa357eab163296205aa" translate="yes" xml:space="preserve">
          <source>Returns a Promise that resolves when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route. If the initial navigation already happened, the promise resolves immediately.This is useful in server-side rendering to ensure consistent output on both the server and the client. Note that on server side, you need to manually push the initial location while on client side, the router automatically picks it up from the URL.</source>
          <target state="translated">라우터가 초기 탐색을 완료했을 때 해결되는 Promise를 반환합니다. 즉, 초기 경로와 관련된 모든 비동기 입력 후크 및 비동기 구성 요소를 해결했음을 의미합니다. 초기 탐색이 이미 발생한 경우 promise가 즉시 해결됩니다. 이는 서버 측 렌더링에서 서버와 클라이언트 모두에서 일관된 출력을 보장하는 데 유용합니다. 서버 측에서는 초기 위치를 수동으로 푸시해야하는 반면 클라이언트 측에서는 라우터가 URL에서 자동으로 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="cd3ad3cf949ec4b3e1af61f8f3065866b05512ce" translate="yes" xml:space="preserve">
          <source>Returns an Array of the components (definition/constructor, not instances) matched by the provided location or the current route. This is mostly used during server-side rendering to perform data prefetching.</source>
          <target state="translated">제공된 위치 또는 현재 경로와 일치하는 구성 요소 (인스턴스가 아닌 정의 / 생성자)의 배열을 반환합니다. 주로 서버 측 렌더링 중에 데이터 프리 페치를 수행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d7da8ed6e862bf9efd3e9f62643a040e42e8b759" translate="yes" xml:space="preserve">
          <source>Returns everything exposed by the &lt;a href=&quot;#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#router-link-s-v-slot&quot;&gt; &lt;code&gt;v-slot&lt;/code&gt; API에&lt;/a&gt; 의해 노출 된 모든 것을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="78019b4c75245ea7e219b310d9faaf3ed58eefb1" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#routelocation&quot;&gt;normalized version&lt;/a&gt; of a &lt;a href=&quot;#routelocationraw&quot;&gt;route location&lt;/a&gt;. Also includes an &lt;code&gt;href&lt;/code&gt; property that includes any existing &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#routelocationraw&quot;&gt;경로 위치&lt;/a&gt; 의 &lt;a href=&quot;#routelocation&quot;&gt;정규화 된 버전&lt;/a&gt; 을 반환합니다 . 기존 &lt;code&gt;base&lt;/code&gt; 를 포함하는 &lt;code&gt;href&lt;/code&gt; 속성도 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="84c518b782bcd9df8b0339c6f2427a4b47cc60c6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#router-properties&quot;&gt;router&lt;/a&gt; instance. Equivalent to using &lt;code&gt;$router&lt;/code&gt; inside templates. Must be called inside of &lt;code&gt;setup()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#router-properties&quot;&gt;라우터&lt;/a&gt; 인스턴스를 반환합니다 . 템플릿 내에서 &lt;code&gt;$router&lt;/code&gt; 를 사용하는 것과 같습니다 . &lt;code&gt;setup()&lt;/code&gt; 내부에서 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3a36f25b1ebb3aeb1b7dc08727359ec60ea60ee5" translate="yes" xml:space="preserve">
          <source>Returns the current route location. Equivalent to using &lt;code&gt;$route&lt;/code&gt; inside templates. Must be called inside of &lt;code&gt;setup()&lt;/code&gt;.</source>
          <target state="translated">현재 경로 위치를 반환합니다. 템플릿 내에서 &lt;code&gt;$route&lt;/code&gt; 를 사용하는 것과 같습니다 . &lt;code&gt;setup()&lt;/code&gt; 내부에서 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="08f96c7a98ceba257c7a2cba704c62f75cb87b83" translate="yes" xml:space="preserve">
          <source>Reverse URL resolving. Given location in form same as used in &lt;code&gt;&amp;lt;router-link/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">역 URL 해결. &lt;code&gt;&amp;lt;router-link/&amp;gt;&lt;/code&gt; 에서 사용 된 것과 동일한 형식의 위치가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="4999528efe0f94f8f66b1dc05aad8ebaaae7b2be" translate="yes" xml:space="preserve">
          <source>Route</source>
          <target state="translated">Route</target>
        </trans-unit>
        <trans-unit id="f178d9cbdaadbfcdce35cc4e0b16c043f79ef6fd" translate="yes" xml:space="preserve">
          <source>Route Meta Fields</source>
          <target state="translated">메타 필드 라우팅</target>
        </trans-unit>
        <trans-unit id="efaaab5dc398bef87cbcd2fcea3d10d70d8bbd86" translate="yes" xml:space="preserve">
          <source>Route Object Properties</source>
          <target state="translated">배관 객체 속성</target>
        </trans-unit>
        <trans-unit id="ffb101fa1d84f7d4486a4f524c86bd6a14fe62dd" translate="yes" xml:space="preserve">
          <source>Route Record to add</source>
          <target state="translated">추가 할 경로 레코드</target>
        </trans-unit>
        <trans-unit id="dbede324d9a949b9cb463db8af682afac0eb4ae9" translate="yes" xml:space="preserve">
          <source>Route location to navigate to</source>
          <target state="translated">탐색 할 경로 위치</target>
        </trans-unit>
        <trans-unit id="ecf616b4316f6a7792099bbd813bb6efa1d22e76" translate="yes" xml:space="preserve">
          <source>Route location we were initially trying to access before ending up on the current location when a &lt;code&gt;redirect&lt;/code&gt; option was found or a navigation guard called &lt;code&gt;next()&lt;/code&gt; with a route location. &lt;code&gt;undefined&lt;/code&gt; if there was no redirection.</source>
          <target state="translated">&lt;code&gt;redirect&lt;/code&gt; 옵션이 발견 되었을 때 현재 위치에 도달하기 전에 처음에 액세스하려고했던 경로 위치 또는 경로 위치와 함께 &lt;code&gt;next()&lt;/code&gt; 를 호출 한 내비게이션 가드 . 리디렉션이없는 경우 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16df124e1276a966a95a8099bf00120d8c8b591d" translate="yes" xml:space="preserve">
          <source>Route location we were navigating from</source>
          <target state="translated">우리가 탐색했던 경로 위치</target>
        </trans-unit>
        <trans-unit id="faf656900ea53d89bdc87bfa05a3e483ab4da8b0" translate="yes" xml:space="preserve">
          <source>Route location we were navigating to</source>
          <target state="translated">우리가 탐색했던 경로 위치</target>
        </trans-unit>
        <trans-unit id="fdf24b2ac491ab4f0861f5f876118c8447caa002" translate="yes" xml:space="preserve">
          <source>Route params, query, wildcards</source>
          <target state="translated">경로 매개 변수, 쿼리, 와일드 카드</target>
        </trans-unit>
        <trans-unit id="ff676ab351c959b6125a968a740a38d21ccb6b3b" translate="yes" xml:space="preserve">
          <source>Route record that can be provided by the user when adding routes via the &lt;a href=&quot;#routeroptions&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; or via &lt;a href=&quot;#addroutes&quot;&gt;&lt;code&gt;router.addRoutes()&lt;/code&gt;&lt;/a&gt;. There are three different kind of route records:</source>
          <target state="translated">&lt;a href=&quot;#routeroptions&quot;&gt; &lt;code&gt;routes&lt;/code&gt; 옵션&lt;/a&gt; 또는 &lt;a href=&quot;#addroutes&quot;&gt; &lt;code&gt;router.addRoutes()&lt;/code&gt; &lt;/a&gt; 를 통해 경로를 추가 할 때 사용자가 제공 할 수있는 경로 레코드입니다 . 다음과 같은 세 가지 종류의 경로 기록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa1effcfd004511edf487558b241065fd6c6c439" translate="yes" xml:space="preserve">
          <source>Route-Based Dynamic Transition</source>
          <target state="translated">경로 기반 동적 전환</target>
        </trans-unit>
        <trans-unit id="1e4aaf24e8374f5c015dd2ca246a01cf0fc99c22" translate="yes" xml:space="preserve">
          <source>RouteConfig</source>
          <target state="translated">RouteConfig</target>
        </trans-unit>
        <trans-unit id="02d8d17717011d917d90ff83e4a0b3c2209dc327" translate="yes" xml:space="preserve">
          <source>RouteLocation</source>
          <target state="translated">RouteLocation</target>
        </trans-unit>
        <trans-unit id="ea64e8b38c328b9870134a808acc902fa90351ec" translate="yes" xml:space="preserve">
          <source>RouteLocationNormalized</source>
          <target state="translated">RouteLocationNormalized</target>
        </trans-unit>
        <trans-unit id="3284cd4cb1a70c5886036bfb9c2dc4062f0d78c4" translate="yes" xml:space="preserve">
          <source>RouteLocationRaw</source>
          <target state="translated">RouteLocationRaw</target>
        </trans-unit>
        <trans-unit id="91de9466d1ac490af74dc2d9271acabd0bf955e9" translate="yes" xml:space="preserve">
          <source>RouteRecordNormalized</source>
          <target state="translated">RouteRecordNormalized</target>
        </trans-unit>
        <trans-unit id="078dc03920878fc11553f544cdff8a93bfb9dba8" translate="yes" xml:space="preserve">
          <source>RouteRecordRaw</source>
          <target state="translated">RouteRecordRaw</target>
        </trans-unit>
        <trans-unit id="61c1d27f7171536b1ecc5df8e1f3d8c5c9fefc7a" translate="yes" xml:space="preserve">
          <source>Router Construction Options</source>
          <target state="translated">라우터 구성 옵션</target>
        </trans-unit>
        <trans-unit id="2e1838554fec8632f2e27e2232f0a9c553143110" translate="yes" xml:space="preserve">
          <source>Router Instance Methods</source>
          <target state="translated">라우터 인스턴스 방법</target>
        </trans-unit>
        <trans-unit id="e7f39db9665e9e7b15d490cea293333b9ca9f2fb" translate="yes" xml:space="preserve">
          <source>Router Instance Properties</source>
          <target state="translated">라우터 인스턴스 속성</target>
        </trans-unit>
        <trans-unit id="58fd0090c316b7228ec0a56794a878d9bcc74259" translate="yes" xml:space="preserve">
          <source>Router Methods</source>
          <target state="translated">라우터 방법</target>
        </trans-unit>
        <trans-unit id="1faf89e3b623e1a5eaac56215988d24c34c25dac" translate="yes" xml:space="preserve">
          <source>Router Properties</source>
          <target state="translated">라우터 속성</target>
        </trans-unit>
        <trans-unit id="af276ca463048ad6a52d6368324c363f6c636c56" translate="yes" xml:space="preserve">
          <source>RouterLinkOptions</source>
          <target state="translated">RouterLinkOptions</target>
        </trans-unit>
        <trans-unit id="d8e23234343e4a265d4734b56d771102be709c73" translate="yes" xml:space="preserve">
          <source>RouterOptions</source>
          <target state="translated">RouterOptions</target>
        </trans-unit>
        <trans-unit id="833b49319798dd3229365eff801afcd66c753ef8" translate="yes" xml:space="preserve">
          <source>RouterOptions.base</source>
          <target state="translated">RouterOptions.base</target>
        </trans-unit>
        <trans-unit id="5c94ab4afd451a6c75be941ba1a332f700c7b271" translate="yes" xml:space="preserve">
          <source>RouterOptions.fallback</source>
          <target state="translated">RouterOptions.fallback</target>
        </trans-unit>
        <trans-unit id="a6a71a3c615b71fa18dfabe16958efe8a954be43" translate="yes" xml:space="preserve">
          <source>RouterOptions.linkActiveClass</source>
          <target state="translated">RouterOptions.linkActiveClass</target>
        </trans-unit>
        <trans-unit id="a3b414a25a718d66edd0a60b09fe7e8b14feeced" translate="yes" xml:space="preserve">
          <source>RouterOptions.linkExactActiveClass</source>
          <target state="translated">RouterOptions.linkExactActiveClass</target>
        </trans-unit>
        <trans-unit id="b1f3441c2a652d1c9f341126405e100b126d5dda" translate="yes" xml:space="preserve">
          <source>RouterOptions.mode</source>
          <target state="translated">RouterOptions.mode</target>
        </trans-unit>
        <trans-unit id="02a0c6b6ad7ff83236c43f2b27e906e5d1da56b2" translate="yes" xml:space="preserve">
          <source>RouterOptions.parseQuery / stringifyQuery</source>
          <target state="translated">RouterOptions.parseQuery / stringifyQuery</target>
        </trans-unit>
        <trans-unit id="ed78fca5da829ceec546e652b1cb232072966088" translate="yes" xml:space="preserve">
          <source>RouterOptions.routes</source>
          <target state="translated">RouterOptions.routes</target>
        </trans-unit>
        <trans-unit id="2c66f8accea4c1855450a7c83268642fa0656f71" translate="yes" xml:space="preserve">
          <source>RouterOptions.scrollBehavior</source>
          <target state="translated">RouterOptions.scrollBehavior</target>
        </trans-unit>
        <trans-unit id="ccb6ce111ea1ffaae38be4e379a24260845a4cd3" translate="yes" xml:space="preserve">
          <source>Routes are now active based on the route records they represent instead of the generated route location objects and their &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; properties</source>
          <target state="translated">이제 생성 된 경로 위치 개체와 &lt;code&gt;path&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;hash&lt;/code&gt; 속성 대신 해당 경로가 나타내는 경로 레코드를 기반으로 경로가 활성화 됩니다.</target>
        </trans-unit>
        <trans-unit id="558852da778f521dc276064269f9e710ae055025" translate="yes" xml:space="preserve">
          <source>Routes' Matching Syntax</source>
          <target state="translated">경로의 일치 구문</target>
        </trans-unit>
        <trans-unit id="39d66d7d1ff0c6a202bf1133bd5ca283b06c675b" translate="yes" xml:space="preserve">
          <source>START_LOCATION</source>
          <target state="translated">START_LOCATION</target>
        </trans-unit>
        <trans-unit id="e0596a1adc9bfd16283229a08fe714c7f0e636b8" translate="yes" xml:space="preserve">
          <source>Scroll Behavior</source>
          <target state="translated">스크롤 동작</target>
        </trans-unit>
        <trans-unit id="71d0912e026dc7a009be1e6e16b6c856427233a5" translate="yes" xml:space="preserve">
          <source>Second, in webpack 2, we can use the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;dynamic import&lt;/a&gt; syntax to indicate a code-split point:</source>
          <target state="translated">둘째, 웹팩 2에서 &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;동적 가져 오기&lt;/a&gt; 구문을 사용하여 코드 분할 지점을 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="910d9257f1da3a588d7c110055be4d2d58d59a55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guide/advanced/navigation-guards#in-component-guards&quot;&gt;In Component Guards&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/advanced/navigation-guards#in-component-guards&quot;&gt;구성 요소 보호대를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0cdbee57c9d61aea21d3f61df384d5d286dbae09" translate="yes" xml:space="preserve">
          <source>See full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/transitions/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">전체 예를 &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/transitions/app.js&quot;&gt;보려면 여기를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ca3a2a2118f0a9ed97c6e2439ac18302ef8a7ce" translate="yes" xml:space="preserve">
          <source>See more in the &lt;a href=&quot;route-matching-syntax#repeatable-params&quot;&gt;repeated params&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;route-matching-syntax#repeatable-params&quot;&gt;반복되는 매개 변수&lt;/a&gt; 섹션 에서 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c263edad49b6f4c271aeaa49c2421987156874d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;append&lt;/code&gt; prop always appends the relative path to the current path. For example, assuming we are navigating from &lt;code&gt;/a&lt;/code&gt; to a relative link &lt;code&gt;b&lt;/code&gt;, without &lt;code&gt;append&lt;/code&gt; we will end up at &lt;code&gt;/b&lt;/code&gt;, but with &lt;code&gt;append&lt;/code&gt; we will end up at &lt;code&gt;/a/b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; prop을 설정하면 항상 상대 경로가 현재 경로에 추가됩니다. 예를 들어, 우리가 가정에서 탐색되는 &lt;code&gt;/a&lt;/code&gt; 상대 링크에 &lt;code&gt;b&lt;/code&gt; 없이 &lt;code&gt;append&lt;/code&gt; 우리가 끝날 &lt;code&gt;/b&lt;/code&gt; 이지만 함께 &lt;code&gt;append&lt;/code&gt; 우리에서 끝날 &lt;code&gt;/a/b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2df78320bc495352bdf39a1085d854418e6cac2" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;replace&lt;/code&gt; prop will call &lt;code&gt;router.replace()&lt;/code&gt; instead of &lt;code&gt;router.push()&lt;/code&gt; when clicked, so the navigation will not leave a history record.</source>
          <target state="translated">&lt;code&gt;replace&lt;/code&gt; prop을 설정 하면 클릭하면 &lt;code&gt;router.push()&lt;/code&gt; &lt;code&gt;router.replace()&lt;/code&gt; 대신 router.replace () 를 호출 하므로 탐색시 기록 기록 이 남지 않습니다.</target>
        </trans-unit>
        <trans-unit id="46a94dbbd4790f8205b0a817760e72fa622a2361" translate="yes" xml:space="preserve">
          <source>Setting this to &lt;code&gt;false&lt;/code&gt; essentially makes every &lt;code&gt;router-link&lt;/code&gt; navigation a full page refresh in IE9. This is useful when the app is server-rendered and needs to work in IE9, because a hash mode URL does not work with SSR.</source>
          <target state="translated">이것을 &lt;code&gt;false&lt;/code&gt; 로 설정하면 기본적으로 모든 &lt;code&gt;router-link&lt;/code&gt; 탐색이 IE9에서 전체 페이지를 새로 고칩니다. 해시 모드 URL이 SSR에서 작동하지 않기 때문에 앱이 서버 렌더링되어 IE9에서 작동해야 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="671048db110a3469e52979ba873e1f31f52b0adc" translate="yes" xml:space="preserve">
          <source>Signature:</source>
          <target state="translated">Signature:</target>
        </trans-unit>
        <trans-unit id="0a009f19aef724da25b633c4e8ec74c1e6c57a83" translate="yes" xml:space="preserve">
          <source>Signatures:</source>
          <target state="translated">Signatures:</target>
        </trans-unit>
        <trans-unit id="57ec4ee133c6b7e2e92cdcc7b421aa3c5c49414e" translate="yes" xml:space="preserve">
          <source>Silver Sponsors</source>
          <target state="translated">실버 스폰서</target>
        </trans-unit>
        <trans-unit id="073f10cdc3fead341331cedecaaf7b0230d8d4c6" translate="yes" xml:space="preserve">
          <source>Similarly, if you were calling &lt;code&gt;history.replaceState()&lt;/code&gt; without preserving the current state, you will need to pass the current &lt;code&gt;history.state&lt;/code&gt;:</source>
          <target state="translated">마찬가지로 현재 상태를 유지하지 않고 &lt;code&gt;history.replaceState()&lt;/code&gt; 를 호출했다면 현재 &lt;code&gt;history.state&lt;/code&gt; 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b309129b0928ab5637f1329cc9b1622c1899eda7" translate="yes" xml:space="preserve">
          <source>Since it's just a component, it works with &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;. When using the both together, make sure to use &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; inside:</source>
          <target state="translated">구성 요소 일 뿐이므로 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 와 함께 작동합니다 . 둘 다를 함께 사용할 때 내부에 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="67617841112e8fc88adea7ca66ce82c7f040a26e" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; is essentially a dynamic component, we can apply transition effects to it the same way using the &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">때문에 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 동적 구성 요소가 본질적으로, 우리는 그것을 사용하여 동일한 방식으로 전환 효과를 적용 할 수 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 성분 :</target>
        </trans-unit>
        <trans-unit id="0db2742714e1363dd47be494ce93aede5bdae375" translate="yes" xml:space="preserve">
          <source>Since the prop &lt;code&gt;to&lt;/code&gt; accepts the same kind of object as &lt;code&gt;router.push&lt;/code&gt;, the exact same rules apply to both of them.</source>
          <target state="translated">prop 은 &lt;code&gt;router.push&lt;/code&gt; 와 같은 종류의 객체 &lt;code&gt;to&lt;/code&gt; 받아들이 기 때문에 정확히 동일한 규칙이 두 객체 모두에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="b2eab83868cbb2018b1a874390f93826579be7a0" translate="yes" xml:space="preserve">
          <source>Single views records: have a &lt;code&gt;component&lt;/code&gt; option</source>
          <target state="translated">단일보기 레코드 : &lt;code&gt;component&lt;/code&gt; 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="99967819e7c344898b7f5cd24d01b88f4a531300" translate="yes" xml:space="preserve">
          <source>So how do we access this &lt;code&gt;meta&lt;/code&gt; field?</source>
          <target state="translated">그렇다면이 &lt;code&gt;meta&lt;/code&gt; 필드에 어떻게 접근 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="b1af8852b06cff8674f6940a2035acf95c4141bc" translate="yes" xml:space="preserve">
          <source>Some application's UIs are composed of components that are nested multiple levels deep. In this case, it is very common that the segments of a URL corresponds to a certain structure of nested components, for example:</source>
          <target state="translated">일부 응용 프로그램의 UI는 여러 수준으로 중첩 된 구성 요소로 구성됩니다. 이 경우 URL의 세그먼트가 중첩 된 구성 요소의 특정 구조에 해당하는 것은 매우 일반적입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e072c45a56a56cbf99ba402fb4ee27bd1462940d" translate="yes" xml:space="preserve">
          <source>Some of new features to keep an eye on in Vue Router 4 include:</source>
          <target state="translated">Vue Router 4에서 주목해야 할 몇 가지 새로운 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a47509bf5c58ce57a092a288e1bf085394866b2a" translate="yes" xml:space="preserve">
          <source>Sometimes it is more convenient to identify a route with a name, especially when linking to a route or performing navigations. You can give a route a name in the &lt;code&gt;routes&lt;/code&gt; options while creating the Router instance:</source>
          <target state="translated">경로에 연결하거나 탐색을 수행 할 때 이름으로 경로를 식별하는 것이 더 편리한 경우가 있습니다. 라우터 인스턴스를 만드는 동안 &lt;code&gt;routes&lt;/code&gt; 옵션 에 경로 이름을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a6e252d9e94a641f7201be6ee56e2627c06169f7" translate="yes" xml:space="preserve">
          <source>Sometimes the same URL may be matched by multiple routes. In such a case the matching priority is determined by the order of route definition: the earlier a route is defined, the higher priority it gets.</source>
          <target state="translated">때때로 동일한 URL이 여러 경로에 의해 일치 될 수 있습니다. 이 경우 일치하는 우선 순위는 경로 정의 순서에 따라 결정됩니다. 경로가 일찍 정의 될수록 우선 순위가 높아집니다.</target>
        </trans-unit>
        <trans-unit id="881f4003a927ca08b4071cbb3a8888176c11bc1e" translate="yes" xml:space="preserve">
          <source>Sometimes we may want the active class to be applied to an outer element rather than the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element itself, in that case, you can wrap that element inside a &lt;code&gt;router-link&lt;/code&gt; and use the &lt;code&gt;v-slot&lt;/code&gt; properties to create your link:</source>
          <target state="translated">때때로 우리는 활성 클래스가 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 요소 자체가 아닌 외부 요소에 적용되기를 원할 수 있습니다 .이 경우 해당 요소를 &lt;code&gt;router-link&lt;/code&gt; 내부에 래핑 하고 &lt;code&gt;v-slot&lt;/code&gt; 속성을 사용하여 링크를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6c78fa18c05228aa3988fe7758e8dfdfee27b6f" translate="yes" xml:space="preserve">
          <source>Sometimes we may want the active class to be applied to an outer element rather than the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag itself, in that case, you can wrap that element inside a &lt;code&gt;router-link&lt;/code&gt; and use the &lt;code&gt;v-slot&lt;/code&gt; properties to create your link:</source>
          <target state="translated">때때로 우리는 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그가 아닌 외부 요소에 활성 클래스를 적용하기를 원할 수 있습니다 .이 경우 &lt;code&gt;router-link&lt;/code&gt; 내부에서 해당 요소를 래핑 하고 &lt;code&gt;v-slot&lt;/code&gt; 속성을 사용하여 링크를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="332b325341fba64b850ebd8f2eeaa0d19560cae7" translate="yes" xml:space="preserve">
          <source>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/#chunk-names&quot;&gt;named chunks&lt;/a&gt; by providing a chunk name using a special comment syntax (requires webpack &amp;gt; 2.4):</source>
          <target state="translated">때로는 동일한 경로에 중첩 된 모든 구성 요소를 동일한 비동기 청크로 그룹화 할 수 있습니다. 특별한 주석 구문을 사용하여 청크 이름을 제공하여 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/#chunk-names&quot;&gt;명명 된 청크&lt;/a&gt; 를 사용해야 합니다 (웹팩&amp;gt; 2.4 필요).</target>
        </trans-unit>
        <trans-unit id="4d96d49fb7fa8a2fcf329655a48fbcd890920961" translate="yes" xml:space="preserve">
          <source>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#dynamic-imports&quot;&gt;named chunks&lt;/a&gt; by providing a chunk name using a special comment syntax (requires webpack &amp;gt; 2.4):</source>
          <target state="translated">때로는 동일한 경로에 중첩 된 모든 구성 요소를 동일한 비동기 청크로 그룹화 할 수 있습니다. 이를 위해서는 특별한 주석 구문을 사용하여 청크 이름을 제공하여 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#dynamic-imports&quot;&gt;명명 된 청크&lt;/a&gt; 를 사용해야 합니다 (webpack&amp;gt; 2.4 필요).</target>
        </trans-unit>
        <trans-unit id="602969d71302e6b49ad43c1a43ec02daaf9cf2af" translate="yes" xml:space="preserve">
          <source>Sometimes we need to wait a bit before scrolling in the page. For example, when dealing with transitions, we want to wait for the transition to finish before scrolling. To do this you can return a Promise that returns the desired position descriptor. Here is an example where we wait 500ms before scrolling:</source>
          <target state="translated">때로는 페이지를 스크롤하기 전에 잠시 기다려야합니다. 예를 들어 전환을 처리 할 때 스크롤하기 전에 전환이 완료 될 때까지 기다립니다. 이를 위해 원하는 위치 설명자를 반환하는 Promise를 반환 할 수 있습니다. 다음은 스크롤하기 전에 500ms를 기다리는 예입니다.</target>
        </trans-unit>
        <trans-unit id="0b2711d8ebe3a7a6248cdb5416c095b9588b27d5" translate="yes" xml:space="preserve">
          <source>Sometimes we want &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to render as another tag, e.g &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. Then we can use &lt;code&gt;tag&lt;/code&gt; prop to specify which tag to render to, and it will still listen to click events for navigation.</source>
          <target state="translated">때때로 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 가 다른 태그로 렌더링 되기를 원합니다 ( 예 : &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ) . 그런 다음 &lt;code&gt;tag&lt;/code&gt; prop을 사용하여 렌더링 할 태그를 지정할 수 있으며 탐색을위한 클릭 이벤트를 계속 수신합니다.</target>
        </trans-unit>
        <trans-unit id="559e629883f73acac255b3a777bfc5ed36572151" translate="yes" xml:space="preserve">
          <source>Sometimes you need to display multiple views at the same time instead of nesting them, e.g. creating a layout with a &lt;code&gt;sidebar&lt;/code&gt; view and a &lt;code&gt;main&lt;/code&gt; view. This is where named views come in handy. Instead of having one single outlet in your view, you can have multiple and give each of them a name. A &lt;code&gt;router-view&lt;/code&gt; without a name will be given &lt;code&gt;default&lt;/code&gt; as its name.</source>
          <target state="translated">&lt;code&gt;sidebar&lt;/code&gt; 보기와 &lt;code&gt;main&lt;/code&gt; 보기를 사용 하여 레이아웃을 만드는 등 중첩하지 않고 여러보기를 동시에 표시해야하는 경우가 있습니다. 여기에서 명명 된 뷰가 편리합니다. 보기에 하나의 콘센트가있는 대신 여러 콘센트를 사용하여 각각의 이름을 지정할 수 있습니다. &lt;code&gt;router-view&lt;/code&gt; 이름이없는이 주어집니다 &lt;code&gt;default&lt;/code&gt; 의 이름을.</target>
        </trans-unit>
        <trans-unit id="80c22a281f2411a826028def672b188a9db5ba37" translate="yes" xml:space="preserve">
          <source>Sometimes you need to fetch data from the server when a route is activated. For example, before rendering a user profile, you need to fetch the user's data from the server. We can achieve this in two different ways:</source>
          <target state="translated">경로가 활성화 될 때 서버에서 데이터를 가져와야하는 경우가 있습니다. 예를 들어, 사용자 프로필을 렌더링하기 전에 서버에서 사용자 데이터를 가져와야합니다. 우리는 이것을 두 가지 방법으로 달성 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="dbad2511bc05617aaa24b446bac3ec4968f6315e" translate="yes" xml:space="preserve">
          <source>Sometimes, you might want to attach arbitrary information to routes like transition names, who can access the route, etc. This can be achieved through the &lt;code&gt;meta&lt;/code&gt; property which accepts an object of properties and can be accessed on the route location and navigation guards. You can define &lt;code&gt;meta&lt;/code&gt; properties like this:</source>
          <target state="translated">때로는 트랜지션 이름, 경로에 액세스 할 수있는 사람 등과 같은 임의의 정보를 경로에 첨부 할 수 있습니다. 이는 속성 개체를 받아들이고 경로 위치 및 내비게이션 가드에서 액세스 할 수있는 &lt;code&gt;meta&lt;/code&gt; 속성을 통해 수행 할 수 있습니다. 다음 과 같이 &lt;code&gt;meta&lt;/code&gt; 속성을 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05477b7e20cf8c615743b4d1d92c7caf91c8dcd1" translate="yes" xml:space="preserve">
          <source>Specify the event(s) that can trigger the link navigation.</source>
          <target state="translated">링크 탐색을 트리거 할 수있는 이벤트를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="068a22f61f3db94269ab675efff014f3fb75087b" translate="yes" xml:space="preserve">
          <source>Technically, both are valid choices - it ultimately depends on the user experience you are aiming for.</source>
          <target state="translated">기술적으로, 둘 다 유효한 선택입니다. 궁극적으로 원하는 사용자 경험에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="687d29fbc88ced0c0b4cc5e85f3cdff8a6d730b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index#mode&quot;&gt;mode&lt;/a&gt; the router is using.</source>
          <target state="translated">&lt;a href=&quot;index#mode&quot;&gt;모드&lt;/a&gt; 라우터가 사용된다.</target>
        </trans-unit>
        <trans-unit id="04e697c4c0982279fe937992c14787c25b1f00ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; component is a functional component that renders the matched component for the given path. Components rendered in &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; can also contain its own &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, which will render components for nested paths.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 요소는 주어진 경로에 대해 유사한 구성 요소를 표현하는 기능 부품이다. &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 에서 렌더링 된 구성 요소 에는 자체 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 가 포함될 수 있으며 중첩 된 경로에 대한 구성 요소를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="a8cd8048165dbdfdbaf97306eb178bd73657686d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; here is a top-level &lt;code&gt;router-view&lt;/code&gt;. It renders the component matched by a top level route. Similarly, a rendered component can also contain its own, nested &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. For example, if we add one inside the &lt;code&gt;User&lt;/code&gt; component's template:</source>
          <target state="translated">여기서 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 는 최상위 &lt;code&gt;router-view&lt;/code&gt; 입니다. 최상위 경로와 일치하는 구성 요소를 렌더링합니다. 마찬가지로 렌더링 된 구성 요소는 자체 중첩 된 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 를 포함 할 수도 있습니다 . 예를 들어 &lt;code&gt;User&lt;/code&gt; 컴포넌트의 템플릿 안에 하나를 추가하면 :</target>
        </trans-unit>
        <trans-unit id="08608ef6a2b61ff5e3d12ea1a2a5973072989475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; here is a top-level outlet. It renders the component matched by a top level route. Similarly, a rendered component can also contain its own, nested &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. For example, if we add one inside the &lt;code&gt;User&lt;/code&gt; component's template:</source>
          <target state="translated">여기서 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 는 최상위 콘센트입니다. 최상위 경로와 일치하는 구성 요소를 렌더링합니다. 마찬가지로 렌더링 된 구성 요소에는 자체 중첩 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 도 포함될 수 있습니다 . 예를 들어, &lt;code&gt;User&lt;/code&gt; 컴포넌트의 템플릿 안에 하나를 추가하면 :</target>
        </trans-unit>
        <trans-unit id="f1f5eb58ebb5f1684f4b310363e94f6347277589" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; section for &lt;code&gt;UserSettings&lt;/code&gt; component in the above layout would look something like this:</source>
          <target state="translated">위 레이아웃에서 &lt;code&gt;UserSettings&lt;/code&gt; 구성 요소 의 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 섹션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f5efb9ff1c8f67f47685d3f76d3eb9df07a21bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;append&lt;/code&gt; prop has been removed from &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;. You can manually concatenate the value to an existing &lt;code&gt;path&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 소품이 삭제되었습니다 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; . 대신 값을 기존 &lt;code&gt;path&lt;/code&gt; 수동으로 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="016c125eb583531d9538cad319f8a92f4f2039e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base&lt;/code&gt; option is now passed as the first argument to &lt;code&gt;createWebHistory&lt;/code&gt; (and other histories):</source>
          <target state="translated">이제 &lt;code&gt;base&lt;/code&gt; 옵션이 &lt;code&gt;createWebHistory&lt;/code&gt; (및 기타 기록)에 대한 첫 번째 인수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="0ffac73304a3247ab71d5acf0d0089b4643469ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeRouteEnter&lt;/code&gt; guard does &lt;strong&gt;NOT&lt;/strong&gt; have access to &lt;code&gt;this&lt;/code&gt;, because the guard is called before the navigation is confirmed, thus the new entering component has not even been created yet.</source>
          <target state="translated">&lt;code&gt;beforeRouteEnter&lt;/code&gt; 의 가드는 않습니다 &lt;strong&gt;NOT&lt;/strong&gt; 에 액세스 할 수있는 &lt;code&gt;this&lt;/code&gt; 탐색이 확인되기 전에 가드가 이렇게 새로운 진입 구성 요소가 아직 생성되지 않은, 호출되기 때문에.</target>
        </trans-unit>
        <trans-unit id="ae08a38e49be7d56942260c667f2a8e08b4e567a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component&lt;/code&gt; (and &lt;code&gt;components&lt;/code&gt;) option accepts a function that returns a Promise of a component and Vue Router &lt;strong&gt;will only fetch it when entering the page for the first time&lt;/strong&gt;, then use the cached version. Which means you can also have more complex functions as long as they return a Promise:</source>
          <target state="translated">&lt;code&gt;component&lt;/code&gt; (및 &lt;code&gt;components&lt;/code&gt; ) 옵션은 구성 요소의 약속과 뷰 라우터가 반환하는 함수 받아 &lt;strong&gt;처음으로 페이지를 입력 할 경우에만 그것을 가져옵니다&lt;/strong&gt; 다음 캐시 된 버전을 사용하십시오. 즉, Promise를 반환하는 한 더 복잡한 함수를 가질 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3503154108990837b76599d594a8bbb066e5f585" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exact&lt;/code&gt; prop has been removed because the caveat it was fixing is no longer present so you should be able to safely remove it. There are however two things you should be aware of:</source>
          <target state="translated">&lt;code&gt;exact&lt;/code&gt; 안전하게 제거 할 수 있어야하므로이 고정 된주의가 더 이상 존재하기 때문에 소품이 제거되지 않았습니다. 그러나 알아야 할 두 가지 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcfa5993acfcae98efc1bbe4094a09c4ebfbf321" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;history&lt;/code&gt; option when creating the router instance allows us to choose among different history modes.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; 라우터 인스턴스를 생성 옵션은 우리가 서로 다른 역사 모드 중에서 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56bfbd789f64ac906a59c09f45770589f54ff920" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode: 'history'&lt;/code&gt; option has been replaced with a more flexible one named &lt;code&gt;history&lt;/code&gt;. Depending on which mode you were using, you will have to replace it with the appropriate function:</source>
          <target state="translated">&lt;code&gt;mode: 'history'&lt;/code&gt; 옵션은 이름보다 유연한로 교체 된 &lt;code&gt;history&lt;/code&gt; . 사용중인 모드에 따라 적절한 기능으로 교체해야합니다.</target>
        </trans-unit>
        <trans-unit id="35d9fe9e5c84ee70fb4dbc07d406f0311ecd2153" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property has been removed from normalized route locations (&lt;code&gt;this.$route&lt;/code&gt; and object returned by &lt;code&gt;router.resolve&lt;/code&gt;). You can still access it via the &lt;code&gt;matched&lt;/code&gt; array:</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; 속성을 정상화 경로 위치에서 제거되었다 ( &lt;code&gt;this.$route&lt;/code&gt; 및 목적에 의해 반환 &lt;code&gt;router.resolve&lt;/code&gt; ). &lt;code&gt;matched&lt;/code&gt; 배열을 통해 계속 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb351c79c236a2c61a1cbe94ac8065189d958a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathToRegexpOptions&lt;/code&gt; and &lt;code&gt;caseSensitive&lt;/code&gt; properties of route records have been replaced with &lt;code&gt;sensitive&lt;/code&gt; and &lt;code&gt;strict&lt;/code&gt; options for &lt;code&gt;createRouter()&lt;/code&gt;. They can now also be directly passed when creating the router with &lt;code&gt;createRouter()&lt;/code&gt;. Any other option specific to &lt;code&gt;path-to-regexp&lt;/code&gt; has been removed as &lt;code&gt;path-to-regexp&lt;/code&gt; is no longer used to parse paths.</source>
          <target state="translated">경로 레코드 의 &lt;code&gt;pathToRegexpOptions&lt;/code&gt; 및 &lt;code&gt;caseSensitive&lt;/code&gt; 속성이 &lt;code&gt;createRouter()&lt;/code&gt; 대한 &lt;code&gt;sensitive&lt;/code&gt; 하고 &lt;code&gt;strict&lt;/code&gt; 옵션 으로 대체되었습니다 . 이제 &lt;code&gt;createRouter()&lt;/code&gt; 라우터를 만들 때 직접 전달할 수도 있습니다 . &lt;code&gt;path-to-regexp&lt;/code&gt; 와 관련된 다른 모든 옵션 은 &lt;code&gt;path-to-regexp&lt;/code&gt; 가 더 이상 경로를 구문 분석하는 데 사용되지 않으므로 제거되었습니다 .</target>
        </trans-unit>
        <trans-unit id="3f048c701f20717bd450c88548efc68d063e7f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route&lt;/code&gt; object is a reactive object, so any of its properties can be watched and you should &lt;strong&gt;avoid watching the whole &lt;code&gt;route&lt;/code&gt;&lt;/strong&gt; object:</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; 속성 중 하나가 감시 할 수 있으며, 당신이해야하므로 객체는 반응성 목적은 &lt;strong&gt;전체보고 피하기 &lt;code&gt;route&lt;/code&gt; &lt;/strong&gt; 개체를 :</target>
        </trans-unit>
        <trans-unit id="a969c9ecd26cb18544d7ffcc6b09ca6f76a01167" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollBehavior&lt;/code&gt; function receives the &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; route objects, like &lt;a href=&quot;navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt;. The third argument, &lt;code&gt;savedPosition&lt;/code&gt;, is only available if this is a &lt;code&gt;popstate&lt;/code&gt; navigation (triggered by the browser's back/forward buttons).</source>
          <target state="translated">&lt;code&gt;scrollBehavior&lt;/code&gt; 의 기능은 수신 &lt;code&gt;to&lt;/code&gt; 과 &lt;code&gt;from&lt;/code&gt; 추천 경로 물체 &lt;a href=&quot;navigation-guards&quot;&gt;탐색 보호대&lt;/a&gt; . 세 번째 인수 인 &lt;code&gt;savedPosition&lt;/code&gt; 은 이것이 &lt;code&gt;popstate&lt;/code&gt; 탐색 (브라우저의 뒤로 / 앞으로 버튼에 의해 트리거 됨) 인 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e51fe4a377c162aa9aa7660ecf5294ec09a28c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollBehavior&lt;/code&gt; function receives the &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; route objects. The third argument, &lt;code&gt;savedPosition&lt;/code&gt;, is only available if this is a &lt;code&gt;popstate&lt;/code&gt; navigation (triggered by the browser's back/forward buttons).</source>
          <target state="translated">&lt;code&gt;scrollBehavior&lt;/code&gt; 의 기능은 수신 &lt;code&gt;to&lt;/code&gt; 과 &lt;code&gt;from&lt;/code&gt; 라우팅 개체. 세 번째 인수 인 &lt;code&gt;savedPosition&lt;/code&gt; 은 &lt;code&gt;popstate&lt;/code&gt; 탐색 인 경우에만 사용할 수 있습니다 (브라우저의 뒤로 / 앞으로 단추로 트리거 됨).</target>
        </trans-unit>
        <trans-unit id="b201105a82e6b1036d079ab3dadf0d77a44a591c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;leave guard&lt;/strong&gt; is usually used to prevent the user from accidentally leaving the route with unsaved edits. The navigation can be canceled by calling &lt;code&gt;next(false)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;휴가 가드는&lt;/strong&gt; 보통 실수로 저장되지 않은 편집과 함께 길을 떠나는에서 사용자를 방지하기 위해 사용된다. &lt;code&gt;next(false)&lt;/code&gt; 호출하여 탐색을 취소 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd2e60c316c6566a5b3e19411b5d07ab0336af54" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;leave guard&lt;/strong&gt; is usually used to prevent the user from accidentally leaving the route with unsaved edits. The navigation can be canceled by returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;휴가 가드는&lt;/strong&gt; 보통 실수로 저장되지 않은 편집과 함께 길을 떠나는에서 사용자를 방지하기 위해 사용된다. &lt;code&gt;false&lt;/code&gt; 를 반환하여 탐색을 취소 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dab97ce9509d6e41f417491fa98ce232a056e404" translate="yes" xml:space="preserve">
          <source>The Full Navigation Resolution Flow</source>
          <target state="translated">전체 탐색 해상도 흐름</target>
        </trans-unit>
        <trans-unit id="b52528f5ecc7cde98c69b52899cf341c3903825e" translate="yes" xml:space="preserve">
          <source>The HTML5 mode is created with &lt;code&gt;createWebHistory()&lt;/code&gt; and is the recommend mode:</source>
          <target state="translated">HTML5 모드는 &lt;code&gt;createWebHistory()&lt;/code&gt; 생성되며 권장 모드입니다.</target>
        </trans-unit>
        <trans-unit id="2ce5d364b93ce99ee04526a5645a7a0786cdf33e" translate="yes" xml:space="preserve">
          <source>The Route Object</source>
          <target state="translated">경로 객체</target>
        </trans-unit>
        <trans-unit id="9aae68b78cb45f2551e7d818549eb2d0fc6017c4" translate="yes" xml:space="preserve">
          <source>The RouterLink component exposes enough &lt;code&gt;props&lt;/code&gt; to suffice most basic applications but it doesn't try to cover every possible use case and you will likely find yourself using &lt;code&gt;v-slot&lt;/code&gt; for some advanced cases. In most medium to large sized applications, it's worth creating one if not multiple custom RouterLink components to reuse them across your application. Some examples are Links in a Navigation Menu, handling external links, adding an &lt;code&gt;inactive-class&lt;/code&gt;, etc.</source>
          <target state="translated">RouterLink 구성 요소는 대부분의 기본 응용 프로그램을 충족하기에 충분한 &lt;code&gt;props&lt;/code&gt; 를 노출 하지만 가능한 모든 사용 사례를 다루지는 않으며 일부 고급 사례에 대해 &lt;code&gt;v-slot&lt;/code&gt; 을 사용하게 될 것 입니다. 대부분의 중대형 응용 프로그램에서 여러 사용자 지정 RouterLink 구성 요소를 생성하여 응용 프로그램 전체에서 재사용하는 것이 좋습니다. 몇 가지 예로는 탐색 메뉴의 링크, 외부 링크 처리, &lt;code&gt;inactive-class&lt;/code&gt; 추가 등이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a5791c2e4084ff3c184ea22c374183b77459d77" translate="yes" xml:space="preserve">
          <source>The URL &lt;code&gt;/search?q=vue&lt;/code&gt; would pass &lt;code&gt;{query: 'vue'}&lt;/code&gt; as props to the &lt;code&gt;SearchUser&lt;/code&gt; component.</source>
          <target state="translated">URL &lt;code&gt;/search?q=vue&lt;/code&gt; 는 &lt;code&gt;{query: 'vue'}&lt;/code&gt; 를 &lt;code&gt;SearchUser&lt;/code&gt; 구성 요소 에 대한 소품으로 전달 합니다.</target>
        </trans-unit>
        <trans-unit id="555c4d2ce807e9566e32519437eb61e3c547687c" translate="yes" xml:space="preserve">
          <source>The above can be expressed in the route configuration as:</source>
          <target state="translated">위의 경로 구성에서 다음과 같이 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d93da155230aa0a489a38b391d91acc258632b33" translate="yes" xml:space="preserve">
          <source>The above usage will apply the same transition for all routes. If you want each route's component to have different transitions, you can instead combine &lt;a href=&quot;meta&quot;&gt;meta fields&lt;/a&gt; and a dynamic &lt;code&gt;name&lt;/code&gt; on &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">위의 사용법은 모든 경로에 동일한 전환을 적용합니다. 각 경로의 구성 요소가 서로 다른 전환을 갖도록하려면 대신 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 에서 &lt;a href=&quot;meta&quot;&gt;메타 필드&lt;/a&gt; 와 동적 &lt;code&gt;name&lt;/code&gt; 을 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf700d0b596efe64523dfdfd3077fd79cdb6d201" translate="yes" xml:space="preserve">
          <source>The above usage will apply the same transition for all routes. If you want each route's component to have different transitions, you can instead use &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; with different names inside each route component:</source>
          <target state="translated">위의 사용법은 모든 경로에 동일한 전환을 적용합니다. 각 라우트의 구성 요소가 다른 전환을 갖도록하려면 대신 각 라우트 구성 요소 내에서 다른 이름으로 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2082f4f8778f7c6a06e0469829d19c0acde7c5a4" translate="yes" xml:space="preserve">
          <source>The argument can be a string path, or a location descriptor object. Examples:</source>
          <target state="translated">인수는 문자열 경로 또는 위치 설명자 객체 일 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="d51405a3849a5f1aa494f8064229450ca2126ed2" translate="yes" xml:space="preserve">
          <source>The base URL of the app. For example, if the entire single page application is served under &lt;code&gt;/app/&lt;/code&gt;, then &lt;code&gt;base&lt;/code&gt; should use the value &lt;code&gt;&quot;/app/&quot;&lt;/code&gt;.</source>
          <target state="translated">앱의 기본 URL입니다. 예를 들어, 전체 단일 페이지 애플리케이션이 &lt;code&gt;/app/&lt;/code&gt; 아래에 제공되는 경우 &lt;code&gt;base&lt;/code&gt; 는 &lt;code&gt;&quot;/app/&quot;&lt;/code&gt; 값을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c7eb2a366c5fadf10e452d6f7ff2daffd3b2bcb" translate="yes" xml:space="preserve">
          <source>The current active &lt;a href=&quot;#routelocationnormalized&quot;&gt;route location&lt;/a&gt;. This property is read-only and its properties are immutable, but it can be watched.</source>
          <target state="translated">현재 활성 &lt;a href=&quot;#routelocationnormalized&quot;&gt;경로 위치&lt;/a&gt; 입니다. 이 속성은 읽기 전용이며 속성은 변경할 수 없지만 감시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e9b668edfbb90c8dd8566bc19351395810269f0" translate="yes" xml:space="preserve">
          <source>The current active &lt;a href=&quot;#the-route-object&quot;&gt;Route&lt;/a&gt;. This property is read-only and its properties are immutable, but it can be watched.</source>
          <target state="translated">현재 활성 &lt;a href=&quot;#the-route-object&quot;&gt;경로&lt;/a&gt; 입니다. 이 속성은 읽기 전용이며 속성은 변경할 수 없지만 볼 수는 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f7bab8a351710813a1792361d32a5a6df1ae38e" translate="yes" xml:space="preserve">
          <source>The current route represented as a &lt;a href=&quot;#the-route-object&quot;&gt;Route Object&lt;/a&gt;.</source>
          <target state="translated">현재 경로는 &lt;a href=&quot;#the-route-object&quot;&gt;Route Object&lt;/a&gt; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="a4ee70db8e60fe3e3ae0c4e3f48b36f4ea00269d" translate="yes" xml:space="preserve">
          <source>The default active class matching behavior is &lt;strong&gt;inclusive match&lt;/strong&gt;. For example, &lt;code&gt;&amp;lt;router-link to=&quot;/a&quot;&amp;gt;&lt;/code&gt; will get this class applied as long as the current path starts with &lt;code&gt;/a/&lt;/code&gt; or is &lt;code&gt;/a&lt;/code&gt;.</source>
          <target state="translated">기본 활성 클래스 일치 동작은 &lt;strong&gt;포괄적 일치&lt;/strong&gt; 입니다. 예를 들어, &lt;code&gt;&amp;lt;router-link to=&quot;/a&quot;&amp;gt;&lt;/code&gt; 는 현재 경로가 &lt;code&gt;/a/&lt;/code&gt; 로 시작 하거나 / a 인 경우이 클래스를 적용 &lt;code&gt;/a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fc018db58291e889985ef9f6a90a3d9035b1b0e" translate="yes" xml:space="preserve">
          <source>The default mode for &lt;code&gt;vue-router&lt;/code&gt; is &lt;em&gt;hash mode&lt;/em&gt; - it uses the URL hash to simulate a full URL so that the page won't be reloaded when the URL changes.</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; 의 기본 모드 는 &lt;em&gt;해시 모드입니다&lt;/em&gt; . URL 해시를 사용하여 URL이 변경 될 때 페이지가 다시로드되지 않도록 전체 URL을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="9a016caa76d4a05870f99a4eed3dee7033ee46f7" translate="yes" xml:space="preserve">
          <source>The error is caught and asynchronously handled by calling &lt;code&gt;next(err)&lt;/code&gt; inside a route guard function;</source>
          <target state="translated">라우트 가드 함수 내에서 &lt;code&gt;next(err)&lt;/code&gt; 를 호출하여 오류가 포착되고 비동기 적으로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="0f2f86ab65bf1970fdb56cd32d84972e49a6c8f2" translate="yes" xml:space="preserve">
          <source>The error is thrown synchronously inside a route guard function;</source>
          <target state="translated">이 오류는 경로 보호 기능 내에서 동 기적으로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="284f06aba90e4ddb5df25b1f1b9a5198e79522e7" translate="yes" xml:space="preserve">
          <source>The example above assumes two things: first, the newly added route record will match the &lt;code&gt;to&lt;/code&gt; location, effectively resulting in a different location from the one we were trying to access. Second, &lt;code&gt;hasNecessaryRoute()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; after adding the new route to avoid an infinite redirection.</source>
          <target state="translated">위의 예에서는 두 가지를 가정합니다. 먼저 새로 추가 된 경로 레코드가 &lt;code&gt;to&lt;/code&gt; 위치 와 일치하여 실제로 액세스하려는 위치와 다른 위치가됩니다. 둘째, &lt;code&gt;hasNecessaryRoute()&lt;/code&gt; 는 무한 리디렉션을 피하기 위해 새 경로를 추가 한 후 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="04c075159a60e00b34c35411eb16921a443fd961" translate="yes" xml:space="preserve">
          <source>The existing &lt;code&gt;router.onReady()&lt;/code&gt; function has been replaced with &lt;code&gt;router.isReady()&lt;/code&gt; which doesn't take any argument and returns a Promise:</source>
          <target state="translated">기존 &lt;code&gt;router.onReady()&lt;/code&gt; 함수는 어떤 인수도 취하지 않고 Promise를 반환하는 &lt;code&gt;router.isReady()&lt;/code&gt; 로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="61cff4ca13414860678d49874e056e8f8749345f" translate="yes" xml:space="preserve">
          <source>The full resolved URL including query and hash.</source>
          <target state="translated">쿼리 및 해시를 포함한 전체 확인 된 URL</target>
        </trans-unit>
        <trans-unit id="6244b85b86684136a7ed756ed5c84e676b51389b" translate="yes" xml:space="preserve">
          <source>The function can return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions&quot;&gt;&lt;code&gt;ScrollToOptions&lt;/code&gt;&lt;/a&gt; position object:</source>
          <target state="translated">이 함수는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions&quot;&gt; &lt;code&gt;ScrollToOptions&lt;/code&gt; &lt;/a&gt; 위치 객체를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1c04a5b16accbdac8df1dd93e195c169aaf7ac6" translate="yes" xml:space="preserve">
          <source>The function can return a scroll position object. The object could be in the form of:</source>
          <target state="translated">이 함수는 스크롤 위치 객체를 반환 할 수 있습니다. 객체의 형태는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f4cd7e9b6b86b9e5c6185ca441386ebe4a72c908" translate="yes" xml:space="preserve">
          <source>The hash history mode is created with &lt;code&gt;createWebHashHistory()&lt;/code&gt;:</source>
          <target state="translated">해시 히스토리 모드는 &lt;code&gt;createWebHashHistory()&lt;/code&gt; 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="e93691fb604f98a02503f006adee0c664623afde" translate="yes" xml:space="preserve">
          <source>The hash of the current route (with the &lt;code&gt;#&lt;/code&gt;), if it has one. If no hash is present the value will be an empty string.</source>
          <target state="translated">현재 경로의 해시 ( &lt;code&gt;#&lt;/code&gt; 포함 ) (있는 경우) 해시가 없으면 값은 빈 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c95a5a08b02b8c35a7c740f5f3e801d9d440558a" translate="yes" xml:space="preserve">
          <source>The introduction of &lt;code&gt;setup&lt;/code&gt; and Vue's &lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-introduction.html&quot;&gt;Composition API&lt;/a&gt;, open up new possibilities but to be able to get the full potential out of Vue Router, we will need to use a few new functions to replace access to &lt;code&gt;this&lt;/code&gt; and in-component navigation guards.</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 및 Vue의 &lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-introduction.html&quot;&gt;Composition API&lt;/a&gt; 의 도입으로 새로운 가능성이 열리지 만 Vue 라우터의 잠재력을 최대한 활용하려면 &lt;code&gt;this&lt;/code&gt; 및 구성 요소 내 탐색 가드에 대한 액세스를 대체하기 위해 몇 가지 새로운 기능을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9383ecf0e25a97eb42beee9108a618520a4193c8" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;router.getMatchedComponents&lt;/code&gt; is now removed as matched components can be retrieved from &lt;code&gt;router.currentRoute.value.matched&lt;/code&gt;:</source>
          <target state="translated">메소드 &lt;code&gt;router.getMatchedComponents&lt;/code&gt; 는 유사한 구성 요소로부터 검색 될 수 이제 제거 &lt;code&gt;router.currentRoute.value.matched&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="97562970847680561b46ccccb1070fa6a1adf666" translate="yes" xml:space="preserve">
          <source>The name of the current route, if it has one. (See &lt;a href=&quot;../guide/essentials/named-routes&quot;&gt;Named Routes&lt;/a&gt;)</source>
          <target state="translated">현재 경로의 이름입니다 (있는 경우). ( &lt;a href=&quot;../guide/essentials/named-routes&quot;&gt;명명 된 루트&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="5bf899b9e668624d6f5b32ffbaed72a551c9d02d" translate="yes" xml:space="preserve">
          <source>The name of the route being redirected from, if there were one. (See &lt;a href=&quot;../guide/essentials/redirect-and-alias&quot;&gt;Redirect and Alias&lt;/a&gt;)</source>
          <target state="translated">경로가 재 지정된 경로 이름입니다 (있는 경우). ( &lt;a href=&quot;../guide/essentials/redirect-and-alias&quot;&gt;리디렉션 및 별명&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="33becc9dbbac7d5ad3fae4e44690c199bee011fb" translate="yes" xml:space="preserve">
          <source>The object returned in &lt;code&gt;scrollBehavior&lt;/code&gt; is now similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions&quot;&gt;&lt;code&gt;ScrollToOptions&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;x&lt;/code&gt; is renamed to &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is renamed to &lt;code&gt;top&lt;/code&gt;. See &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0035-router-scroll-position.md&quot;&gt;RFC&lt;/a&gt;.</source>
          <target state="translated">에 반환되는 객체 &lt;code&gt;scrollBehavior&lt;/code&gt; 는 지금과 비슷합니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions&quot;&gt; &lt;code&gt;ScrollToOptions&lt;/code&gt; &lt;/a&gt; : &lt;code&gt;x&lt;/code&gt; 가 로 이름이 변경되어 &lt;code&gt;left&lt;/code&gt; 과 &lt;code&gt;y&lt;/code&gt; 는 로 이름이 변경됩니다 &lt;code&gt;top&lt;/code&gt; . &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0035-router-scroll-position.md&quot;&gt;RFC를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e326cc4cc1f95361d7ab1c48db06b9d0eb69df3b" translate="yes" xml:space="preserve">
          <source>The official router for Vue.js.</source>
          <target state="translated">Vue.js의 공식 라우터입니다.</target>
        </trans-unit>
        <trans-unit id="d95d110f1797da4af5385f0a1dc02f740110cda8" translate="yes" xml:space="preserve">
          <source>The page will still show the &lt;code&gt;Article&lt;/code&gt; component, we need to manually call &lt;code&gt;router.replace()&lt;/code&gt; to change the current location and overwrite where we were (instead of pushing a new entry, ending up in the same location twice in our history):</source>
          <target state="translated">페이지에는 여전히 &lt;code&gt;Article&lt;/code&gt; 구성 요소 가 표시됩니다 . 현재 위치를 변경하고 현재 위치를 덮어 &lt;code&gt;router.replace()&lt;/code&gt; 려면 router.replace () 를 수동으로 호출해야합니다 ( 새 항목을 푸시하는 대신 기록에서 동일한 위치에 두 번 끝남).</target>
        </trans-unit>
        <trans-unit id="96eedc52dc9774c9fd0d2c7a415ac78d6b370276" translate="yes" xml:space="preserve">
          <source>The position in the history to which you want to move, relative to the current page</source>
          <target state="translated">현재 페이지를 기준으로 이동하려는 히스토리의 위치</target>
        </trans-unit>
        <trans-unit id="d7596de321e7718793658a9c5a8698a11ec0acec" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;routes&lt;/code&gt; is now required in &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="translated">이제 속성 &lt;code&gt;routes&lt;/code&gt; 가 &lt;code&gt;options&lt;/code&gt; 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="e707eb7100daabaf223a4d0e5e9741dbce85d94a" translate="yes" xml:space="preserve">
          <source>The redirect can also be targeting a named route:</source>
          <target state="translated">리디렉션은 명명 된 경로를 타겟팅 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fbc13eca1bdc9570369c8131c1580d7dac0f41c" translate="yes" xml:space="preserve">
          <source>The root Vue instance the &lt;code&gt;router&lt;/code&gt; was injected into.</source>
          <target state="translated">&lt;code&gt;router&lt;/code&gt; 가 주입 된 루트 Vue 인스턴스 .</target>
        </trans-unit>
        <trans-unit id="9e6a4b5957343fea0ebfd0bd1d19e4759dbd35bf" translate="yes" xml:space="preserve">
          <source>The route object can be found in multiple places:</source>
          <target state="translated">경로 개체는 여러 곳에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="922d7fca7f2e145286ae58b5a3c707147df2c6ec" translate="yes" xml:space="preserve">
          <source>The route object is immutable. Every successful navigation will result in a fresh route object.</source>
          <target state="translated">경로 개체는 변경할 수 없습니다. 성공적으로 탐색 할 때마다 새로운 경로 객체가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="faa4bc3d702668e81503a764428cce9b603c0348" translate="yes" xml:space="preserve">
          <source>The router instance.</source>
          <target state="translated">라우터 인스턴스</target>
        </trans-unit>
        <trans-unit id="9fa790e3bac7002dcf74356b703b8218c4bd2fcc" translate="yes" xml:space="preserve">
          <source>The same rules apply for the &lt;code&gt;to&lt;/code&gt; property of the &lt;code&gt;router-link&lt;/code&gt; component.</source>
          <target state="translated">&lt;code&gt;router-link&lt;/code&gt; 구성 요소 의 &lt;code&gt;to&lt;/code&gt; 속성 에도 동일한 규칙이 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e47ac241f5fdf160dc18347b31d6fb75fc4cab74" translate="yes" xml:space="preserve">
          <source>The second argument &lt;code&gt;errorCallback&lt;/code&gt; is only supported in 2.4+. It will be called when the initial route resolution runs into an error (e.g. failed to resolve an async component).</source>
          <target state="translated">두 번째 인수 &lt;code&gt;errorCallback&lt;/code&gt; 은 2.4 이상에서만 지원됩니다. 초기 경로 확인에 오류가 발생하면 (예 : 비동기 구성 요소를 해결하지 못한 경우) 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="464adc66f5daee42f009a534fcfb5073b5271c4b" translate="yes" xml:space="preserve">
          <source>The slash character (&lt;code&gt;/&lt;/code&gt;) is now properly decoded inside &lt;code&gt;params&lt;/code&gt; while still producing an encoded version on the URL: &lt;code&gt;%2F&lt;/code&gt;.</source>
          <target state="translated">슬래시 문자 ( &lt;code&gt;/&lt;/code&gt; )는 이제 URL : &lt;code&gt;%2F&lt;/code&gt; 에 인코딩 된 버전을 생성하면서 &lt;code&gt;params&lt;/code&gt; 내에서 올바르게 디코딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="f6934271e865a3a534a429938bddac1f8100b037" translate="yes" xml:space="preserve">
          <source>The user will stay on the previous view while the resource is being fetched for the incoming view. It is therefore recommended to display a progress bar or some kind of indicator while the data is being fetched. If the data fetch fails, it's also necessary to display some kind of global warning message.</source>
          <target state="translated">들어오는보기에 대한 리소스를 가져 오는 동안 사용자는 이전보기를 유지합니다. 따라서 데이터를 가져 오는 동안 진행률 표시 줄이나 일종의 표시기를 표시하는 것이 좋습니다. 데이터 반입에 실패하면 일종의 전역 경고 메시지를 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="248801da37f4ea250f622f78c57cb1786b096bd9" translate="yes" xml:space="preserve">
          <source>Then you can achieve the layout above with this route configuration:</source>
          <target state="translated">그런 다음이 경로 구성으로 위의 레이아웃을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62a2319b92e2fba599c6cb6b46590e5e8177fec0" translate="yes" xml:space="preserve">
          <source>There are few different ways to remove existing routes:</source>
          <target state="translated">기존 경로를 제거하는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f584628b0b3a8bd05f38486c74f1e218c10c40f3" translate="yes" xml:space="preserve">
          <source>There is a caveat to this: Your server will no longer report 404 errors as all not-found paths now serve up your &lt;code&gt;index.html&lt;/code&gt; file. To get around the issue, you should implement a catch-all route within your Vue app to show a 404 page:</source>
          <target state="translated">이것에 대한주의 사항이 있습니다 : 모든 찾을 수없는 경로가 이제 &lt;code&gt;index.html&lt;/code&gt; 파일을 제공하므로 서버는 더 이상 404 오류를보고하지 않습니다 . 이 문제를 해결하려면 Vue 앱 내에서 모든 경로를 구현하여 404 페이지를 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="1894f2b9422130da979408591dea6e5ebe3fb654" translate="yes" xml:space="preserve">
          <source>Therefore, if you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;Browser History APIs&lt;/a&gt;, manipulating history will be super easy with Vue Router.</source>
          <target state="translated">따라서 이미 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;브라우저 히스토리 API에&lt;/a&gt; 익숙한 경우 Vue 라우터를 사용하면 히스토리 조작이 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="2d764d562378e228a2d451c5c6b625821795fc9d" translate="yes" xml:space="preserve">
          <source>Therefore, if you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;Browser History APIs&lt;/a&gt;, manipulating history will feel familiar when using Vue Router.</source>
          <target state="translated">따라서 이미 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;Browser History API에&lt;/a&gt; 익숙하다면 Vue Router를 사용할 때 기록을 조작하는 것이 익숙 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="1d950cf3eda5501bc1ccde2caaf1ee1b6e56fcdd" translate="yes" xml:space="preserve">
          <source>These can also be combined with custom Regexp by adding them &lt;strong&gt;after the closing parentheses&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;닫는 괄호 뒤에&lt;/strong&gt; 추가하여 사용자 지정 Regexp와 결합 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3704ec0f80059da1d6bb85860c2e3810beffce8a" translate="yes" xml:space="preserve">
          <source>These guards have the exact same signature as global before guards.</source>
          <target state="translated">이 경비원은 전 세계 경비원과 동일한 서명을 가지고 있습니다</target>
        </trans-unit>
        <trans-unit id="ad8331253cc719148a7ab74e4c86b1f9d2bf6793" translate="yes" xml:space="preserve">
          <source>These properties are injected into every child component by calling &lt;code&gt;app.use(router)&lt;/code&gt;.</source>
          <target state="translated">이러한 속성은 &lt;code&gt;app.use(router)&lt;/code&gt; 호출하여 모든 하위 구성 요소에 삽입됩니다 .</target>
        </trans-unit>
        <trans-unit id="f6ea9002e72e16715aa79b230300c2f7a726c70a" translate="yes" xml:space="preserve">
          <source>These properties are injected into every child component by passing the router instance to the root instance as the &lt;code&gt;router&lt;/code&gt; option.</source>
          <target state="translated">이러한 속성은 라우터 인스턴스를 &lt;code&gt;router&lt;/code&gt; 옵션 으로 루트 인스턴스에 전달하여 모든 하위 구성 요소에 주입됩니다 .</target>
        </trans-unit>
        <trans-unit id="f00f854885caf5311a4b34f89dad7373f6d089c2" translate="yes" xml:space="preserve">
          <source>They also reflect &lt;a href=&quot;navigation-failures&quot;&gt;navigation failures&lt;/a&gt; as the third argument:</source>
          <target state="translated">또한 &lt;a href=&quot;navigation-failures&quot;&gt;탐색 실패&lt;/a&gt; 를 세 번째 인수로 반영합니다 .</target>
        </trans-unit>
        <trans-unit id="7ea83653fde0d9f7ac1885d22979d32e0fa629ef" translate="yes" xml:space="preserve">
          <source>They are useful for analytics, changing the title of the page, accessibility features like announcing the page and many other things.</source>
          <target state="translated">분석, 페이지 제목 변경, 페이지 발표와 같은 접근성 기능 및 기타 여러 가지 작업에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d77b18ab4c745157e070e1084b72b6f83fc376c5" translate="yes" xml:space="preserve">
          <source>This allows you to use the component anywhere, which makes the component easier to reuse and test.</source>
          <target state="translated">따라서 어디서나 구성 요소를 사용할 수 있으므로 구성 요소를보다 쉽게 ​​재사용하고 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30e43d86db0b1c5adcae4d5c945926f7a47409cd" translate="yes" xml:space="preserve">
          <source>This has an important side effect about children &lt;code&gt;redirect&lt;/code&gt; records like these:</source>
          <target state="translated">이것은 다음과 같은 자식 &lt;code&gt;redirect&lt;/code&gt; 레코드 에 대한 중요한 부작용 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">이것은 다음과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="e322a7cbf99e7b1e44e569d75dface178a8d5435" translate="yes" xml:space="preserve">
          <source>This is the exact same object used programatically with &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="translated">이것은 &lt;code&gt;router.push()&lt;/code&gt; 와 함께 프로그래밍 방식으로 사용되는 것과 동일한 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="5a85eb6673a4fc165f9fa27c60128d711cf7122e" translate="yes" xml:space="preserve">
          <source>This is the exact same object used programmatically with &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="translated">이것은 &lt;code&gt;router.push()&lt;/code&gt; 와 함께 프로그래밍 방식으로 사용되는 것과 똑같은 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="884da4433efc5d1a2324d6a582da71f5cc8a01cb" translate="yes" xml:space="preserve">
          <source>This is the method called internally when you click a &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;, so clicking &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt; is the equivalent of calling &lt;code&gt;router.push(...)&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 를 클릭 할 때 내부적으로 호출되는 메소드 이므로 &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt; 를 클릭하는 것은 &lt;code&gt;router.push(...)&lt;/code&gt; 를 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="451711dc47c7c6f517891ef01d44526a904aae93" translate="yes" xml:space="preserve">
          <source>This is useful in server-side rendering to ensure consistent output on both the server and the client.</source>
          <target state="translated">서버와 클라이언트 모두에서 일관된 출력을 보장하기 위해 서버 측 렌더링에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="ee2874bd09832648e927011bc049ef1435d1bcac" translate="yes" xml:space="preserve">
          <source>This is useful when the routes do not have a name</source>
          <target state="translated">경로에 이름이 없을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="35e6ca582a7ffb3b4a27b7a236e09e3c39fedba3" translate="yes" xml:space="preserve">
          <source>This method queues a callback to be called when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route.</source>
          <target state="translated">이 메소드는 라우터가 초기 탐색을 완료 할 때 호출 될 콜백을 대기합니다. 즉, 초기 경로와 연관된 모든 비동기 입력 후크 및 비동기 구성 요소를 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="8f9abf85244867999073e6cdf9a897dd11548ea3" translate="yes" xml:space="preserve">
          <source>This method takes a single integer as parameter that indicates by how many steps to go forward or go backward in the history stack, similar to &lt;code&gt;window.history.go(n)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;window.history.go(n)&lt;/code&gt; 과 유사하게 히스토리 스택에서 앞으로 또는 뒤로 이동할 단계 수를 나타내는 매개 변수로 단일 정수를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="1ae2228ce7503030d2468a6c7972b2ad671c498c" translate="yes" xml:space="preserve">
          <source>This method takes a single integer as parameter that indicates by how many steps to go forwards or go backwards in the history stack, similar to &lt;code&gt;window.history.go(n)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;window.history.go(n)&lt;/code&gt; 과 유사하게 히스토리 스택에서 앞으로 또는 뒤로 이동하는 단계 수를 표시하는 단일 정수를 매개 변수로 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8de516807bb76de74bd492fff1bca2c34d2b4fa7" translate="yes" xml:space="preserve">
          <source>This will give you an array of params instead of a string and will also require you to pass an array when using named routes:</source>
          <target state="translated">이렇게하면 문자열 대신 매개 변수 배열이 제공되며 명명 된 경로를 사용할 때 배열을 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="bbe5d8369ea8f01c36cb95214d652370c92181ae" translate="yes" xml:space="preserve">
          <source>This will simply make the page scroll to top for all route navigations.</source>
          <target state="translated">이렇게하면 모든 경로 탐색에서 페이지가 맨 위로 스크롤됩니다.</target>
        </trans-unit>
        <trans-unit id="11b1e8b431c9e34c7ee34c7c573653195f98f07f" translate="yes" xml:space="preserve">
          <source>Throughout the docs, we will often use the &lt;code&gt;router&lt;/code&gt; instance. Keep in mind that &lt;code&gt;this.$router&lt;/code&gt; is exactly the same as directly using the &lt;code&gt;router&lt;/code&gt; instance created through &lt;code&gt;createRouter&lt;/code&gt;. The reason we use &lt;code&gt;this.$router&lt;/code&gt; is because we don't want to import the router in every single component that needs to manipulate routing.</source>
          <target state="translated">문서 전체에서 우리는 종종 &lt;code&gt;router&lt;/code&gt; 인스턴스를 사용합니다 . 명심 &lt;code&gt;this.$router&lt;/code&gt; 직접 사용하는 것과 완전히 동일 &lt;code&gt;router&lt;/code&gt; 를 통해 생성 된 인스턴스 &lt;code&gt;createRouter&lt;/code&gt; 을 . &lt;code&gt;this.$router&lt;/code&gt; 사용하는 이유는 라우팅을 조작해야하는 모든 단일 구성 요소에서 라우터를 가져오고 싶지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="2f198ff0bc070b0417c58edb952e48f722940e00" translate="yes" xml:space="preserve">
          <source>Throughout the docs, we will often use the &lt;code&gt;router&lt;/code&gt; instance. Keep in mind that &lt;code&gt;this.$router&lt;/code&gt; is exactly the same as using &lt;code&gt;router&lt;/code&gt;. The reason we use &lt;code&gt;this.$router&lt;/code&gt; is because we don't want to import the router in every single component that needs to manipulate routing.</source>
          <target state="translated">문서 전체에서 종종 &lt;code&gt;router&lt;/code&gt; 인스턴스를 사용합니다 . 있다는 사실을 숙지 &lt;code&gt;this.$router&lt;/code&gt; 정확히 사용하는 것과 같습니다 &lt;code&gt;router&lt;/code&gt; . 우리가 &lt;code&gt;this.$router&lt;/code&gt; 사용하는 이유는 라우팅을 조작해야하는 모든 단일 구성 요소에서 라우터를 가져오고 싶지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="bcb03ae78b25c08291ff4165aa2e7fd313fddd4f" translate="yes" xml:space="preserve">
          <source>To access the router or the route inside the &lt;code&gt;setup&lt;/code&gt; function, call the &lt;code&gt;useRouter&lt;/code&gt; or &lt;code&gt;useRoute&lt;/code&gt; functions. We will learn more about this in &lt;a href=&quot;advanced/composition-api#accessing-the-router-and-current-route-inside-setup&quot;&gt;the Composition API&lt;/a&gt;</source>
          <target state="translated">라우터 또는 &lt;code&gt;setup&lt;/code&gt; 함수 내의 경로에 액세스하려면 &lt;code&gt;useRouter&lt;/code&gt; 또는 &lt;code&gt;useRoute&lt;/code&gt; 함수를 호출하십시오 . 이에 &lt;a href=&quot;advanced/composition-api#accessing-the-router-and-current-route-inside-setup&quot;&gt;대해서는 Composition API&lt;/a&gt; 에서 자세히 알아볼 것입니다.</target>
        </trans-unit>
        <trans-unit id="e218c8d751be391c6a069b1c19544f7ae1ba8464" translate="yes" xml:space="preserve">
          <source>To add nested routes to an existing route, you can pass the &lt;em&gt;name&lt;/em&gt; of the route as its first parameter to &lt;code&gt;router.addRoute()&lt;/code&gt;, this will effectively add the route as if it was added through &lt;code&gt;children&lt;/code&gt;:</source>
          <target state="translated">기존 경로에 중첩 된 경로를 추가하려면 경로의 &lt;em&gt;이름&lt;/em&gt; 을 첫 번째 매개 변수로 &lt;code&gt;router.addRoute()&lt;/code&gt; 에 전달할 수 있습니다. 그러면 &lt;code&gt;children&lt;/code&gt; 통해 추가 된 것처럼 경로가 효과적으로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="14b124764e161f705cb1898a04f2d1f2ddffb40e" translate="yes" xml:space="preserve">
          <source>To decouple this component from the router use option &lt;code&gt;props&lt;/code&gt;:</source>
          <target state="translated">이 구성 요소를 라우터에서 분리하려면 옵션 &lt;code&gt;props&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="40a21d40bf366489567fe26e35bb7f8cdb0ea8a6" translate="yes" xml:space="preserve">
          <source>To get rid of the hash, we can use the router's &lt;strong&gt;history mode&lt;/strong&gt;, which leverages the &lt;code&gt;history.pushState&lt;/code&gt; API to achieve URL navigation without a page reload:</source>
          <target state="translated">해시를 없애기 위해 우리는 &lt;code&gt;history.pushState&lt;/code&gt; API를 활용하여 페이지를 다시로드하지 않고 URL 탐색을 수행 하는 라우터의 &lt;strong&gt;기록 모드를&lt;/strong&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f968e79f3bebc79ac6accd649e1b80b5c03e62a5" translate="yes" xml:space="preserve">
          <source>To link to a named route, you can pass an object to the &lt;code&gt;router-link&lt;/code&gt; component's &lt;code&gt;to&lt;/code&gt; prop:</source>
          <target state="translated">명명 된 경로에 링크를, 당신은에 개체를 전달할 수 있습니다 &lt;code&gt;router-link&lt;/code&gt; 구성 요소의 &lt;code&gt;to&lt;/code&gt; 소품 :</target>
        </trans-unit>
        <trans-unit id="f9e41c5cba93beb2ecf29928a19e36e0a4700272" translate="yes" xml:space="preserve">
          <source>To make typings more consistent and expressive, some types have been renamed:</source>
          <target state="translated">보다 일관되고 표현력있는 타이핑을 위해 일부 유형의 이름이 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="8d2ac39b7f1eaeb6260ec962194235aea944d778" translate="yes" xml:space="preserve">
          <source>To navigate to a different URL, use &lt;code&gt;router.push&lt;/code&gt;. This method pushes a new entry into the history stack, so when the user clicks the browser back button they will be taken to the previous URL.</source>
          <target state="translated">다른 URL로 이동하려면 &lt;code&gt;router.push&lt;/code&gt; 를 사용 하십시오 . 이 메소드는 새 항목을 히스토리 스택으로 푸시하므로 사용자가 브라우저 뒤로 단추를 클릭하면 이전 URL로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="d0662adaee77be33943eebd9dcfec1b0c534e241" translate="yes" xml:space="preserve">
          <source>To react to params changes in the same component, you can simply watch anything on the &lt;code&gt;$route&lt;/code&gt; object, in this scenario, the &lt;code&gt;$route.params&lt;/code&gt;:</source>
          <target state="translated">동일한 구성 요소의 매개 변수 변경에 대응하려면 &lt;code&gt;$route&lt;/code&gt; 객체 (이 시나리오에서는 &lt;code&gt;$route.params&lt;/code&gt; 모든 항목을 간단히 관찰 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a814a90fe9d7eb161bb19c80c4d6453392d66e1c" translate="yes" xml:space="preserve">
          <source>To react to params changes in the same component, you can simply watch the &lt;code&gt;$route&lt;/code&gt; object:</source>
          <target state="translated">동일한 구성 요소의 매개 변수 변경 사항에 대응하기 위해 &lt;code&gt;$route&lt;/code&gt; 객체를 간단히 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16973dd0c4af59976d00a672894b991cdd7c9b2" translate="yes" xml:space="preserve">
          <source>To render components into this nested &lt;code&gt;router-view&lt;/code&gt;, we need to use the &lt;code&gt;children&lt;/code&gt; option in any of the routes:</source>
          <target state="translated">이 중첩 된 &lt;code&gt;router-view&lt;/code&gt; 로 컴포넌트를 렌더링하려면 모든 경로에서 &lt;code&gt;children&lt;/code&gt; 옵션 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="deb37c7b821c62ffa66d4da832925e5c201bf1f7" translate="yes" xml:space="preserve">
          <source>To render components into this nested outlet, we need to use the &lt;code&gt;children&lt;/code&gt; option in &lt;code&gt;VueRouter&lt;/code&gt; constructor config:</source>
          <target state="translated">이 중첩 된 콘센트로 컴포넌트를 렌더링하려면 &lt;code&gt;VueRouter&lt;/code&gt; 생성자 구성 에서 &lt;code&gt;children&lt;/code&gt; 옵션 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ab39260fea78bd5cdfde4b98ccfd4bc7bd02a43c" translate="yes" xml:space="preserve">
          <source>Transitions</source>
          <target state="translated">Transitions</target>
        </trans-unit>
        <trans-unit id="a4ac04b1899f80d62fce6ec0d8196f8f6c37bddc" translate="yes" xml:space="preserve">
          <source>Traverse history</source>
          <target state="translated">트래버스 역사</target>
        </trans-unit>
        <trans-unit id="dd4444a66fb6e0b58af45061a5485da34a09bc09" translate="yes" xml:space="preserve">
          <source>Try to keep the &lt;code&gt;props&lt;/code&gt; function stateless, as it's only evaluated on route changes. Use a wrapper component if you need state to define the props, that way vue can react to state changes.</source>
          <target state="translated">경로 변경에 대해서만 평가 되므로 &lt;code&gt;props&lt;/code&gt; 기능을 상태 비 저장 상태 로 유지하십시오 . 소품을 정의하기 위해 상태가 필요한 경우 래퍼 구성 요소를 사용하면 vue가 상태 변경에 반응 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="5855e1223cedf94ad0b6dc47625105b33a541e19" translate="yes" xml:space="preserve">
          <source>Type declaration for &lt;code&gt;RouteConfig&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;RouteConfig&lt;/code&gt; 의 유형 선언 :</target>
        </trans-unit>
        <trans-unit id="09f34b6f04c782293708cb0bd636ff7126c536d7" translate="yes" xml:space="preserve">
          <source>Type of the navigation failure.</source>
          <target state="translated">탐색 실패 유형입니다.</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="20cf00647920860dd64dc8c728fae3029b925844" translate="yes" xml:space="preserve">
          <source>TypeScript changes</source>
          <target state="translated">TypeScript 변경</target>
        </trans-unit>
        <trans-unit id="1e0d48ce614d6cfe5fce5b6f4084a2df409df051" translate="yes" xml:space="preserve">
          <source>Unique name for the route record.</source>
          <target state="translated">경로 레코드의 고유 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7e8286e5a1f395a713e574e6c0b6ec95de663a68" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;history.state&lt;/code&gt;</source>
          <target state="translated">의 사용 &lt;code&gt;history.state&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10799693756047c125932282923d155105c7fe0d" translate="yes" xml:space="preserve">
          <source>User-level route location that can be passed to &lt;code&gt;router.push()&lt;/code&gt;, &lt;code&gt;redirect&lt;/code&gt;, and returned in &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt;.</source>
          <target state="translated">에 전달 될 수있는 사용자 수준 경로 위치 &lt;code&gt;router.push()&lt;/code&gt; , &lt;code&gt;redirect&lt;/code&gt; 및 반환 &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;탐색 가드&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6513128745f1da8beb6400260062b62ac8738bfa" translate="yes" xml:space="preserve">
          <source>Users are already on the page that they are trying to navigate to.</source>
          <target state="translated">사용자는 탐색하려는 페이지에 이미 있습니다.</target>
        </trans-unit>
        <trans-unit id="5751afb337c680e5e84da3851f1bca73258d946a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$route&lt;/code&gt; in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs.</source>
          <target state="translated">사용 &lt;code&gt;$route&lt;/code&gt; 구성 요소로하는 것은에만 특정 URL에서 사용할 수있는 구성 요소의 유연성을 제한하는 경로에 꽉 커플 링을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bd0c6de9e7b95926d53d216217f47b2039c72089" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$route&lt;/code&gt; in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs. While this is not necessarily a bad thing, we can decouple this behavior with a &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">사용 &lt;code&gt;$route&lt;/code&gt; 구성 요소로하는 것은에만 특정 URL에서 사용할 수있는 구성 요소의 유연성을 제한하는 경로에 꽉 커플 링을 만듭니다. 이것이 반드시 나쁜 것은 아니지만 &lt;code&gt;props&lt;/code&gt; 옵션을 사용하여이 동작을 분리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d6aedab66e85d77c129fd23e06af19eb16532db" translate="yes" xml:space="preserve">
          <source>Using the composition API</source>
          <target state="translated">컴포지션 API 사용</target>
        </trans-unit>
        <trans-unit id="0db263ddb8d32a64a0bf38c8cb481ff7dc37d297" translate="yes" xml:space="preserve">
          <source>Using the options API</source>
          <target state="translated">옵션 API 사용</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="8bc235c19fb54fce48db733e0f0fbb119f0ae68f" translate="yes" xml:space="preserve">
          <source>Value passed to the attribute &lt;code&gt;aria-current&lt;/code&gt; when the link is exactly active.</source>
          <target state="translated">링크가 정확히 활성 상태 일 때 &lt;code&gt;aria-current&lt;/code&gt; 속성에 전달되는 값 입니다.</target>
        </trans-unit>
        <trans-unit id="88c52f71c0f3c8b53d7d433eb9091bbf6786b322" translate="yes" xml:space="preserve">
          <source>Values in &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;fullPath&lt;/code&gt; are not decoded anymore. They will appear as provided by the browser (most browsers provide them encoded). e.g. directly writing on the address bar &lt;code&gt;https://example.com/hello world&lt;/code&gt; will yield the encoded version: &lt;code&gt;https://example.com/hello%20world&lt;/code&gt; and both &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;fullPath&lt;/code&gt; will be &lt;code&gt;/hello%20world&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; , &lt;code&gt;fullPath&lt;/code&gt; 의 값은 더 이상 디코딩되지 않습니다. 브라우저에서 제공 한대로 표시됩니다 (대부분의 브라우저는 인코딩을 제공합니다). 예를 들어 주소 표시 줄 &lt;code&gt;https://example.com/hello world&lt;/code&gt; 에 직접 작성하면 &lt;code&gt;https://example.com/hello%20world&lt;/code&gt; 와 같은 인코딩 된 버전이 생성되고 &lt;code&gt;path&lt;/code&gt; 와 &lt;code&gt;fullPath&lt;/code&gt; 는 모두 &lt;code&gt;/hello%20world&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="77d26897a43db04ce923013721681c90785d2c00" translate="yes" xml:space="preserve">
          <source>Very often we will need to map routes with the given pattern to the same component. For example we may have a &lt;code&gt;User&lt;/code&gt; component which should be rendered for all users but with different user IDs. In &lt;code&gt;vue-router&lt;/code&gt; we can use a dynamic segment in the path to achieve that:</source>
          <target state="translated">주어진 패턴을 가진 경로를 동일한 구성 요소에 매핑해야하는 경우가 종종 있습니다. 예를 들어 , 모든 사용자에 대해 렌더링해야하지만 다른 사용자 ID로 렌더링해야하는 &lt;code&gt;User&lt;/code&gt; 구성 요소 가있을 수 있습니다 . 에서는 &lt;code&gt;vue-router&lt;/code&gt; 우리가 동적 경로 세그먼트를 사용할 수를 달성하기 위해 :</target>
        </trans-unit>
        <trans-unit id="cfdc7b3ea1b0c8e8877fda03996c85647e836377" translate="yes" xml:space="preserve">
          <source>Very often we will need to map routes with the given pattern to the same component. For example we may have a &lt;code&gt;User&lt;/code&gt; component which should be rendered for all users but with different user IDs. In Vue Router we can use a dynamic segment in the path to achieve that, we call that a &lt;em&gt;param&lt;/em&gt;:</source>
          <target state="translated">매우 자주 주어진 패턴의 경로를 동일한 구성 요소에 매핑해야합니다. 예를 들어 우리는 할 수 있습니다 &lt;code&gt;User&lt;/code&gt; 모든 사용자에 대해하지만 서로 다른 사용자 ID로 렌더링해야합니다 구성 요소를. 뷰 라우터 우리가 달성하는 경로의 동적 세그먼트를 사용하여, 우리는 것을 호출 &lt;em&gt;PARAM&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="375cf55f91216e77b508717797d05fb22beefd2a" translate="yes" xml:space="preserve">
          <source>View transition effects powered by Vue.js' transition system</source>
          <target state="translated">Vue.js의 전환 시스템으로 구동되는 전환 효과보기</target>
        </trans-unit>
        <trans-unit id="bf53a6c36521f7bfb85181c1e488fc3bdefe2160" translate="yes" xml:space="preserve">
          <source>Vue Router</source>
          <target state="translated">Vue 라우터</target>
        </trans-unit>
        <trans-unit id="5c7fbc25eadec21d8c4f5c4196380aaaee3523e7" translate="yes" xml:space="preserve">
          <source>Vue Router and the Composition API</source>
          <target state="translated">Vue Router 및 Composition API</target>
        </trans-unit>
        <trans-unit id="a64c7f69bf65721a85219ae85bad646e77f641f0" translate="yes" xml:space="preserve">
          <source>Vue Router exposes the internal behavior of RouterLink as a Composition API function. It gives access the same properties as the &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt;:</source>
          <target state="translated">Vue Router는 RouterLink의 내부 동작을 Composition API 함수로 노출합니다. &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt; &lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; 와 동일한 속성에 대한 액세스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="a1a69e98a109edc8870409c04bde6b399d9a3482" translate="yes" xml:space="preserve">
          <source>Vue Router gives you two functions to look at existing routes:</source>
          <target state="translated">Vue Router는 기존 경로를 볼 수있는 두 가지 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1492cdf9423931020a391d91e6dad97c0b5a2737" translate="yes" xml:space="preserve">
          <source>Vue Router is no longer a class but a set of functions. Instead of writing &lt;code&gt;new Router()&lt;/code&gt;, you now have to call &lt;code&gt;createRouter&lt;/code&gt;:</source>
          <target state="translated">Vue Router는 더 이상 클래스가 아니라 기능 집합입니다. &lt;code&gt;new Router()&lt;/code&gt; 작성하는 대신 이제 &lt;code&gt;createRouter&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4d485b5c28c9dd7fdd69a49964755c045a0d8b0d" translate="yes" xml:space="preserve">
          <source>Vue Router is the official router for &lt;a href=&quot;http://v3.vuejs.org&quot;&gt;Vue.js&lt;/a&gt;. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</source>
          <target state="translated">Vue Router는 &lt;a href=&quot;http://v3.vuejs.org&quot;&gt;Vue.js&lt;/a&gt; 의 공식 라우터입니다 . Vue.js 코어와 깊이 통합되어 Vue.js로 단일 페이지 애플리케이션을 쉽게 빌드 할 수 있습니다. 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2ca5266265ed3aea3483c13e9476203377ffc810" translate="yes" xml:space="preserve">
          <source>Vue Router is the official router for &lt;a href=&quot;http://vuejs.org&quot;&gt;Vue.js&lt;/a&gt;. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</source>
          <target state="translated">Vue Router는 &lt;a href=&quot;http://vuejs.org&quot;&gt;Vue.js&lt;/a&gt; 의 공식 라우터입니다 . Vue.js 코어와 긴밀하게 통합되어 Vue.js로 단일 페이지 애플리케이션을 쉽게 구축 할 수 있습니다. 특징은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4fcd1c779b4d20e3689b2448d52ed89e94d5eff3" translate="yes" xml:space="preserve">
          <source>Vue Router saves information on the &lt;code&gt;history.state&lt;/code&gt;. If you have any code manually calling &lt;code&gt;history.pushState()&lt;/code&gt;, you should likely avoid it or refactor it with a regular &lt;code&gt;router.push()&lt;/code&gt; and a &lt;code&gt;history.replaceState()&lt;/code&gt;:</source>
          <target state="translated">Vue Router는 &lt;code&gt;history.state&lt;/code&gt; 에 대한 정보를 저장합니다 . &lt;code&gt;history.pushState()&lt;/code&gt; 수동으로 호출하는 코드가있는 경우 이를 피하거나 일반 &lt;code&gt;router.push()&lt;/code&gt; 및 &lt;code&gt;history.replaceState()&lt;/code&gt; 리팩토링해야합니다 .</target>
        </trans-unit>
        <trans-unit id="893b7bf1204705172e13e9cd704e975b4de8ae93" translate="yes" xml:space="preserve">
          <source>Vue Router supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports&quot;&gt;dynamic imports&lt;/a&gt; out of the box, meaning you can replace static imports with dynamic ones:</source>
          <target state="translated">Vue Router는 기본적으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports&quot;&gt;동적 가져 오기를&lt;/a&gt; 지원하므로 정적 가져 오기를 동적 ​​가져 오기로 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2193c34506d46d84ab96e184d1735cd030a25464" translate="yes" xml:space="preserve">
          <source>Vue Router uses its own path matching syntax, inspired by the one used by &lt;code&gt;express&lt;/code&gt;, so it supports many advanced matching patterns such as optional params, zero or more / one or more requirements, and even custom regex patterns. Please check the &lt;a href=&quot;route-matching-syntax&quot;&gt;Advanced Matching&lt;/a&gt; documentation to explore them.</source>
          <target state="translated">Vue Router는 &lt;code&gt;express&lt;/code&gt; 에서 사용하는 것에서 영감을 얻은 자체 경로 일치 구문을 사용 하므로 선택적 매개 변수, 0 개 이상 / 하나 이상의 요구 사항, 심지어 사용자 지정 정규식 패턴과 같은 많은 고급 일치 패턴을 지원합니다. 이들을 탐색 하려면 &lt;a href=&quot;route-matching-syntax&quot;&gt;고급 매칭&lt;/a&gt; 문서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7bb47c1ebf7881c1dc69c46536df702e895f7c1d" translate="yes" xml:space="preserve">
          <source>Waiting for the result of a Navigation</source>
          <target state="translated">탐색 결과를 기다리는 중</target>
        </trans-unit>
        <trans-unit id="3604acf13128a42d94157cb0c5d8328dbb1a88b5" translate="yes" xml:space="preserve">
          <source>We can add an &lt;a href=&quot;navigation-guards#global-after-hooks&quot;&gt;after navigation hook&lt;/a&gt; to dynamically add information to the &lt;code&gt;meta&lt;/code&gt; field based on the depth of the route</source>
          <target state="translated">&lt;a href=&quot;navigation-guards#global-after-hooks&quot;&gt;탐색 후 후크&lt;/a&gt; 를 추가 하여 경로의 깊이에 따라 &lt;code&gt;meta&lt;/code&gt; 필드에 정보를 동적으로 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6e38605a4a493c27c8a5d6ee9d645fba14a9a9a" translate="yes" xml:space="preserve">
          <source>We can also use &lt;a href=&quot;meta&quot;&gt;route meta fields&lt;/a&gt; to implement fine-grained scroll behavior control. Check out a full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;meta&quot;&gt;경로 메타 필드&lt;/a&gt; 를 사용 하여 세분화 된 스크롤 동작 제어를 구현할 수도 있습니다 . 전체 예를 확인 &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js&quot;&gt;하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04b903f718c55d4f30d5c401c174e57308af95f6" translate="yes" xml:space="preserve">
          <source>We can replace</source>
          <target state="translated">우리는 대체 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="0352badf3e41913c3f3e9620f942cb5077ecbe2c" translate="yes" xml:space="preserve">
          <source>We will be using &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES2015&lt;/a&gt; in the code samples in the guide.</source>
          <target state="translated">우리는 가이드의 코드 샘플에서 &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES2015&lt;/a&gt; 를 사용할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="15b474187c7078074aa9ed72c9112ae1156c52a0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;props&lt;/code&gt; is an object, this will be set as the component props as-is. Useful for when the props are static.</source>
          <target state="translated">경우 &lt;code&gt;props&lt;/code&gt; 객체이며, 이것은 그대로 성분 소품으로 설정 될 것이다. 소품이 정적 일 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d2513a78af894fa1eaf54225e0979827f5c12641" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;props&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;route.params&lt;/code&gt; will be set as the component props.</source>
          <target state="translated">때 &lt;code&gt;props&lt;/code&gt; 설정되어 &lt;code&gt;true&lt;/code&gt; 의 &lt;code&gt;route.params&lt;/code&gt; 는 구성 요소 소품으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="d414b66019d6cf13d6c1114261c9443bce5d8cdd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt;, it will render the component with the corresponding name in the matched route record's &lt;code&gt;components&lt;/code&gt; option.</source>
          <target state="translated">때 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 이 &lt;code&gt;name&lt;/code&gt; , 그것은 일치하는 경로 레코드의에서 해당 이름을 가진 구성 요소 렌더링 &lt;code&gt;components&lt;/code&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="f8ccecf482f54b6d805c179314065a64f0b2d6b9" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; has a name, it will render the component with the corresponding name in the matched route record's &lt;code&gt;components&lt;/code&gt; option. See &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;Named Views&lt;/a&gt; for an example.</source>
          <target state="translated">때 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 이름을 가지고, 그것은 일치하는 경로 레코드의에서 해당 이름을 가진 구성 요소 렌더링 &lt;code&gt;components&lt;/code&gt; 옵션을 선택합니다. 예를 들어 &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;명명 된 뷰&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="370e9eb49967d3c0b483f412401dc604f33c8a96" translate="yes" xml:space="preserve">
          <source>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route's components into a separate chunk, and only load them when the route is visited.</source>
          <target state="translated">번 들러로 앱을 빌드 할 때 JavaScript 번들이 상당히 커져서 페이지로드 시간에 영향을 줄 수 있습니다. 각 경로의 구성 요소를 별도의 청크로 분할하고 경로를 방문 할 때만로드하는 것이 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="ab5b4d6e3d2c05ce1d0075c5d125333116133a1e" translate="yes" xml:space="preserve">
          <source>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route's components into a separate chunks, and only load them when the route is visited.</source>
          <target state="translated">번 들러를 사용하여 앱을 빌드 할 때 자바 스크립트 번들이 상당히 커져 페이지로드 시간에 영향을 미칠 수 있습니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 각 경로의 구성 요소를 별도의 청크로 분할하고 경로를 방문 할 때만로드 할 수 있다면 더 효율적일 것입니다.</target>
        </trans-unit>
        <trans-unit id="9a598ced62d3edd035797f59b8e377213dd56ff0" translate="yes" xml:space="preserve">
          <source>When creating the router instance, you can provide the &lt;code&gt;scrollBehavior&lt;/code&gt; function:</source>
          <target state="translated">라우터 인스턴스를 만들 때 &lt;code&gt;scrollBehavior&lt;/code&gt; 함수를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7de5381460775c8745045dbd13f331c7c88f728" translate="yes" xml:space="preserve">
          <source>When defining a param like &lt;code&gt;:userId&lt;/code&gt;, we internally use the following regexp &lt;code&gt;([^/]+)&lt;/code&gt; (at least one character that isn't a slash &lt;code&gt;/&lt;/code&gt;) to extract params from URLs. This works well unless you need to differentiate two routes based on the param content. Imagine two routes &lt;code&gt;/:orderId&lt;/code&gt; and &lt;code&gt;/:productName&lt;/code&gt;, both would match the exact same URLs, so we need a way to differentiate them. The easiest way would be to add a static section to the path that differentiates them:</source>
          <target state="translated">&lt;code&gt;:userId&lt;/code&gt; 와 같은 매개 변수를 정의 할 때 내부적으로 다음 정규식 &lt;code&gt;([^/]+)&lt;/code&gt; (슬래시 &lt;code&gt;/&lt;/code&gt; 가 아닌 하나 이상의 문자 )을 사용하여 URL에서 매개 변수를 추출합니다. 매개 변수 내용을 기반으로 두 경로를 구별 할 필요가없는 한 이것은 잘 작동합니다. 두 경로 &lt;code&gt;/:orderId&lt;/code&gt; 및 &lt;code&gt;/:productName&lt;/code&gt; 을 상상해보십시오 . 둘 다 정확히 동일한 URL과 일치하므로이를 구별 할 방법이 필요합니다. 가장 쉬운 방법은 경로를 구분하는 정적 섹션을 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6daa58ef55cd1163f43761607b0cdc7228f950b1" translate="yes" xml:space="preserve">
          <source>When returning a new location inside of a Navigation Guard, we are triggering a new navigation that overrides the ongoing one. Differently from other return values, a redirection doesn't prevent a navigation, &lt;strong&gt;it creates a new one&lt;/strong&gt;. It is therefore checked differently, by reading the &lt;code&gt;redirectedFrom&lt;/code&gt; property in a Route Location:</source>
          <target state="translated">내비게이션 가드 내에서 새 위치를 반환 할 때 진행중인 위치를 무시하는 새 내비게이션을 트리거합니다. 다른 반환 값과 달리 리디렉션은 탐색을 방해하지 않고 새 값 &lt;strong&gt;을 만듭니다&lt;/strong&gt; . 따라서 Route Location에서 &lt;code&gt;redirectedFrom&lt;/code&gt; 속성 을 읽어서 다르게 확인 됩니다 .</target>
        </trans-unit>
        <trans-unit id="d1e714346832e17cf65c274f305abc3b1e0ad285" translate="yes" xml:space="preserve">
          <source>When the URL is &lt;code&gt;/foo/bar&lt;/code&gt;, &lt;code&gt;$route.matched&lt;/code&gt; will be an Array containing both objects (cloned), in parent to child order.</source>
          <target state="translated">URL이 &lt;code&gt;/foo/bar&lt;/code&gt; 인 경우 &lt;code&gt;$route.matched&lt;/code&gt; 는 부모에서 자식 순서로 두 개체 (복제)를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="5c2b30c6d5f6b6c51b2aeb5be92ba203bf029dab" translate="yes" xml:space="preserve">
          <source>When used with a module system, you must explicitly install the router via &lt;code&gt;Vue.use()&lt;/code&gt;:</source>
          <target state="translated">모듈 시스템과 함께 사용하는 경우 &lt;code&gt;Vue.use()&lt;/code&gt; 를 통해 라우터를 명시 적으로 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="73ca895563503412ed9e81d2069627e813f48534" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt;, and &lt;code&gt;replace&lt;/code&gt; and providing a &lt;code&gt;string&lt;/code&gt; location or a &lt;code&gt;path&lt;/code&gt; property in an object, &lt;strong&gt;it must be encoded&lt;/strong&gt; (like in the previous version). On the other hand, &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt; must be provided in its unencoded version.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;push&lt;/code&gt; , &lt;code&gt;resolve&lt;/code&gt; 하고, &lt;code&gt;replace&lt;/code&gt; 하고 제공하는 &lt;code&gt;string&lt;/code&gt; 위치 또는 &lt;code&gt;path&lt;/code&gt; 객체에 속성을, &lt;strong&gt;그것은 인코딩해야합니다&lt;/strong&gt; (이전 버전처럼). 반면에 &lt;code&gt;params&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;hash&lt;/code&gt; 는 인코딩되지 않은 버전으로 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="894d4e3c0a1dda761d28d161ed2c31ac0dde23da" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;router-link&lt;/code&gt;, Vue Router calls &lt;code&gt;router.push&lt;/code&gt; to trigger a navigation. While the expected behavior for most links is to navigate a user to a new page, there are a few situations where users will remain on the same page:</source>
          <target state="translated">&lt;code&gt;router-link&lt;/code&gt; 를 사용할 때 Vue Router는 &lt;code&gt;router.push&lt;/code&gt; 를 호출 하여 탐색을 트리거합니다. 대부분의 링크에서 예상되는 동작은 사용자를 새 페이지로 이동하는 것이지만 사용자가 동일한 페이지에 남아있는 몇 가지 상황이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f93aaa65612ef60babed2aa9e05813e5850debcf" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;asterisk&lt;/em&gt; routes, make sure to correctly order your routes so that &lt;em&gt;asterisk&lt;/em&gt; ones are at the end. The route &lt;code&gt;{ path: '*' }&lt;/code&gt; is usually used to 404 client side. If you are using &lt;em&gt;History mode&lt;/em&gt;, make sure to &lt;a href=&quot;history-mode&quot;&gt;correctly configure your server&lt;/a&gt; as well.</source>
          <target state="translated">&lt;em&gt;별표&lt;/em&gt; 경로를 사용 하는 경우 &lt;em&gt;별표&lt;/em&gt; 가 끝에 &lt;em&gt;오도록&lt;/em&gt; 경로를 올바르게 주문해야합니다 . 경로 &lt;code&gt;{ path: '*' }&lt;/code&gt; 는 일반적으로 404 클라이언트쪽에 사용됩니다. 당신이 사용하는 경우 &lt;em&gt;역사 모드&lt;/em&gt; 에 있는지 확인합니다 &lt;a href=&quot;history-mode&quot;&gt;올바르게 서버를 구성 할&lt;/a&gt; 뿐만 아니라.</target>
        </trans-unit>
        <trans-unit id="97b8e721025fa58b91ef960eab5b68bd8381f37f" translate="yes" xml:space="preserve">
          <source>When using Babel, you will need to add the &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import&lt;/a&gt; plugin so that Babel can properly parse the syntax.</source>
          <target state="translated">Babel을 사용할 때 Babel이 &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;구문&lt;/a&gt; 을 올바르게 구문 분석 할 수 있도록 syntax-dynamic-import 플러그인 을 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f19980f29a3a5c0ac4a541612d57660a1818f7d4" translate="yes" xml:space="preserve">
          <source>When using a bundler like webpack, this will automatically benefit from &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;code splitting&lt;/a&gt;</source>
          <target state="translated">웹팩과 같은 번 들러를 사용하면 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;코드 분할의&lt;/a&gt; 이점이 자동으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="d09a113e124c947936cc9ed9cc36a71326cb4a50" translate="yes" xml:space="preserve">
          <source>When using an &lt;em&gt;asterisk&lt;/em&gt;, a param named &lt;code&gt;pathMatch&lt;/code&gt; is automatically added to &lt;code&gt;$route.params&lt;/code&gt;. It contains the rest of the url matched by the &lt;em&gt;asterisk&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;별표를&lt;/em&gt; 사용하면 &lt;code&gt;pathMatch&lt;/code&gt; 라는 매개 변수 가 &lt;code&gt;$route.params&lt;/code&gt; 자동으로 추가됩니다 . &lt;em&gt;별표&lt;/em&gt; 와 일치하는 나머지 URL이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="654d7b5318472e61b7ba9786645ee2ba53c15acf" translate="yes" xml:space="preserve">
          <source>When using client-side routing, we may want to scroll to top when navigating to a new route, or preserve the scrolling position of history entries just like real page reload does. &lt;code&gt;vue-router&lt;/code&gt; allows you to achieve these and even better, allows you to completely customize the scroll behavior on route navigation.</source>
          <target state="translated">클라이언트 쪽 라우팅을 사용할 때 새 경로로 탐색 할 때 맨 위로 스크롤하거나 실제 페이지 다시로드와 마찬가지로 기록 항목의 스크롤 위치를 유지하려고 할 수 있습니다. &lt;code&gt;vue-router&lt;/code&gt; 를 사용하면 경로 탐색에서 스크롤 동작을 완전히 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4877bce231087b8b125642a59163b8ce9eac3862" translate="yes" xml:space="preserve">
          <source>When using client-side routing, we may want to scroll to top when navigating to a new route, or preserve the scrolling position of history entries just like real page reload does. Vue Router allows you to achieve these and even better, allows you to completely customize the scroll behavior on route navigation.</source>
          <target state="translated">클라이언트 측 라우팅을 사용할 때 새 경로를 탐색 할 때 맨 위로 스크롤하거나 실제 페이지 다시로드와 마찬가지로 내역 항목의 스크롤 위치를 유지하려고 할 수 있습니다. Vue Router를 사용하면 이러한 작업을 수행 할 수 있으며 경로 탐색에서 스크롤 동작을 완전히 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a60314411ff9cac02192073319927dc1ca2221dd" translate="yes" xml:space="preserve">
          <source>When using history mode, the URL will look &quot;normal,&quot; e.g. &lt;code&gt;http://oursite.com/user/id&lt;/code&gt;. Beautiful!</source>
          <target state="translated">히스토리 모드를 사용하는 경우 URL은 &quot;정상&quot;으로 표시됩니다 (예 : &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; ) . 아름다운!</target>
        </trans-unit>
        <trans-unit id="76317408e04c432f27553e62930595e45d6e0847" translate="yes" xml:space="preserve">
          <source>When using history mode, the URL will look &quot;normal,&quot; e.g. &lt;code&gt;https://example.com/user/id&lt;/code&gt;. Beautiful!</source>
          <target state="translated">히스토리 모드를 사용할 때 URL은 &quot;정상&quot;으로 보입니다 (예 : &lt;code&gt;https://example.com/user/id&lt;/code&gt; ) . 아름다운!</target>
        </trans-unit>
        <trans-unit id="5cc02aef8c3b391db93840118b90dec2b415d224" translate="yes" xml:space="preserve">
          <source>When using this approach, we navigate and render the incoming component immediately, and fetch data in the component's &lt;code&gt;created&lt;/code&gt; hook. It gives us the opportunity to display a loading state while the data is being fetched over the network, and we can also handle loading differently for each view.</source>
          <target state="translated">이 방법을 사용하면 들어오는 구성 요소를 즉시 탐색하고 렌더링하고 구성 요소가 &lt;code&gt;created&lt;/code&gt; 후크 에서 데이터를 가져옵니다 . 네트워크를 통해 데이터를 가져 오는 동안로드 상태를 표시 할 수있는 기회를 제공하며 각 뷰마다로드를 다르게 처리 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ef4c31bc6df6ea69b26692cb9b125d1cf8d3a93" translate="yes" xml:space="preserve">
          <source>When writing a &lt;code&gt;redirect&lt;/code&gt;, you can omit the &lt;code&gt;component&lt;/code&gt; option because it is never directly reached so there is no component to render. The only exception are &lt;a href=&quot;nested-routes&quot;&gt;nested routes&lt;/a&gt;: if a route record has &lt;code&gt;children&lt;/code&gt; and a &lt;code&gt;redirect&lt;/code&gt; property, it should also have a &lt;code&gt;component&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;redirect&lt;/code&gt; 를 작성할 때 직접 도달하지 않으므로 렌더링 할 구성 요소가 없기 때문에 &lt;code&gt;component&lt;/code&gt; 옵션을 생략 할 수 있습니다 . 유일한 예외는 &lt;a href=&quot;nested-routes&quot;&gt;중첩 된 경로입니다&lt;/a&gt; . 경로 레코드에 &lt;code&gt;children&lt;/code&gt; 과 &lt;code&gt;redirect&lt;/code&gt; 속성이있는 경우 &lt;code&gt;component&lt;/code&gt; 속성 도 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="a7cc117fab6263f7211081d22d65df80783ceb89" translate="yes" xml:space="preserve">
          <source>When you are using the &lt;code&gt;base&lt;/code&gt; option in HTML5 history mode, you don't need to include it in &lt;code&gt;to&lt;/code&gt; prop's URLs.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;base&lt;/code&gt; HTML5 역사 모드에서 옵션을, 당신은에 포함 할 필요가 없습니다 &lt;code&gt;to&lt;/code&gt; 소품의 URL이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9b3b302220b09f0ae598d14b7ae52aeeeae016b6" translate="yes" xml:space="preserve">
          <source>Whenever a route is removed, &lt;strong&gt;all of its aliases and children&lt;/strong&gt; are removed with it.</source>
          <target state="translated">경로가 제거 될 때마다 &lt;strong&gt;모든 별칭과 자식&lt;/strong&gt; 도 함께 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="d194e48a46b26cc7897e6110764ca46b15b9bfdf" translate="yes" xml:space="preserve">
          <source>Where to redirect if the route is directly matched. The redirection happens before any navigation guard and triggers a new navigation with the new target location.</source>
          <target state="translated">경로가 직접 일치하는 경우 리디렉션 할 위치입니다. 리디렉션은 탐색 가드보다 먼저 발생하며 새 대상 위치로 새 탐색을 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="ae9a4268760ee8c03323a48afbec0d7f3f52fc76" translate="yes" xml:space="preserve">
          <source>Where to redirect if the route is directly matched. The redirection happens before any navigation guard and triggers a new navigation with the new target location. Can also be a function that receives the target route location and returns the location we should redirect to.</source>
          <target state="translated">경로가 직접 일치하는 경우 리디렉션 할 위치입니다. 리디렉션은 탐색 가드보다 먼저 발생하며 새 대상 위치로 새 탐색을 트리거합니다. 대상 경로 위치를 수신하고 리디렉션해야하는 위치를 반환하는 함수일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="57b00a86cb820a643fdb9df14e2ff70c640efdbf" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; should not wrap its content in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. Useful when using &lt;a href=&quot;#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt;&lt;/a&gt; to create a custom RouterLink. By default, &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; will render its content wrapped in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, even when using &lt;code&gt;v-slot&lt;/code&gt;. Passing the &lt;code&gt;custom&lt;/code&gt; prop, removes that behavior.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 가 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 요소에 콘텐츠를 래핑하지 않아야 하는지 여부 입니다. &lt;a href=&quot;#router-link-s-v-slot&quot;&gt; &lt;code&gt;v-slot&lt;/code&gt; &lt;/a&gt; 을 사용하여 사용자 지정 RouterLink를 만들 때 유용 합니다. 기본적으로 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 는 &lt;code&gt;v-slot&lt;/code&gt; 을 사용하는 경우에도 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 요소에 래핑 된 콘텐츠를 렌더링 합니다 . &lt;code&gt;custom&lt;/code&gt; 소품을 전달 하면 해당 동작이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="8691ce4b9afdef7a1af9da92eb870add90d6f61c" translate="yes" xml:space="preserve">
          <source>While you can still use in-component navigation guards with a &lt;code&gt;setup&lt;/code&gt; function, Vue Router exposes update and leave guards as Composition API functions:</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 기능 과 함께 컴포넌트 내 탐색 가드를 계속 사용할 수 있지만 Vue Router는 업데이트를 노출하고 가드를 Composition API 함수로 남겨 둡니다.</target>
        </trans-unit>
        <trans-unit id="4446df79d1370319467592e28dbebd4c3d82d6b8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;vue-router&lt;/code&gt;, it is very simple to express this relationship using nested route configurations.</source>
          <target state="translated">함께 &lt;code&gt;vue-router&lt;/code&gt; , 그 중첩 경로 구성을 사용하는이 관계를 표현하는 것은 매우 간단하다.</target>
        </trans-unit>
        <trans-unit id="b598b2534b98ccf2f88f95a53a07b16bd9d630f6" translate="yes" xml:space="preserve">
          <source>With Vue Router, you can express this relationship using nested route configurations.</source>
          <target state="translated">Vue Router를 사용하면 중첩 된 경로 구성을 사용하여이 관계를 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d288e66c2b04e3ae98f5a06ccc29b5c1455471d4" translate="yes" xml:space="preserve">
          <source>With this approach we fetch the data before actually navigating to the new route. We can perform the data fetching in the &lt;code&gt;beforeRouteEnter&lt;/code&gt; guard in the incoming component, and only call &lt;code&gt;next&lt;/code&gt; when the fetch is complete:</source>
          <target state="translated">이 방법을 사용하면 실제로 새 경로로 이동하기 전에 데이터를 가져옵니다. 수신 컴포넌트 의 &lt;code&gt;beforeRouteEnter&lt;/code&gt; 가드에서 데이터 페치를 수행 할 수 있으며 페치가 완료된 후에 만 &lt;code&gt;next&lt;/code&gt; 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="081dedc6227e0e55d23820f47e7e9c896394c5cd" translate="yes" xml:space="preserve">
          <source>You can add the following options to route components:</source>
          <target state="translated">다음 옵션을 추가하여 구성 요소를 라우팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9a994c42f35fd2e9f8464db0415b1e50c5c315d" translate="yes" xml:space="preserve">
          <source>You can also check out this example &lt;a href=&quot;https://jsfiddle.net/yyx990803/xgrjzsup/&quot;&gt;live&lt;/a&gt;.</source>
          <target state="translated">이 예제를 &lt;a href=&quot;https://jsfiddle.net/yyx990803/xgrjzsup/&quot;&gt;라이브로&lt;/a&gt; 확인할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="63df9fae1f760b3e506e42daf53ec463a5e58e27" translate="yes" xml:space="preserve">
          <source>You can also extend the TypeScript definition of the &lt;code&gt;Router&lt;/code&gt; interface to add the &lt;code&gt;app&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;Router&lt;/code&gt; 인터페이스 의 TypeScript 정의를 확장 하여 &lt;code&gt;app&lt;/code&gt; 속성 을 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6764342a7b1534b2cb94118d3b6629fdf077abe" translate="yes" xml:space="preserve">
          <source>You can also mark a parameter as optional by using the &lt;code&gt;?&lt;/code&gt; modifier (0 or 1):</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 를 사용하여 매개 변수를 선택 사항으로 표시 할 수도 있습니다 . 수정 자 (0 또는 1) :</target>
        </trans-unit>
        <trans-unit id="6ea2e03f3bdf48ee303af6134602aab23854aba6" translate="yes" xml:space="preserve">
          <source>You can also pass a CSS selector or a DOM element via &lt;code&gt;el&lt;/code&gt;. In that scenario, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; will be treated as relative offsets to that element.</source>
          <target state="translated">&lt;code&gt;el&lt;/code&gt; 을 통해 CSS 선택기 또는 DOM 요소를 전달할 수도 있습니다 . 이 시나리오에서 &lt;code&gt;top&lt;/code&gt; 과 &lt;code&gt;left&lt;/code&gt; 은 해당 요소에 대한 상대적 오프셋으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="dd42bc16638e567ed6ef48a2b99a6689f0f21322" translate="yes" xml:space="preserve">
          <source>You can also pass an array of functions to &lt;code&gt;beforeEnter&lt;/code&gt;, this is useful when reusing guards for different routes:</source>
          <target state="translated">&lt;code&gt;beforeEnter&lt;/code&gt; 에 함수 배열을 전달할 수도 있습니다 . 이것은 다른 경로에 대해 가드를 재사용 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c2e815d06584fa57837db82d17e57326a9d3123d" translate="yes" xml:space="preserve">
          <source>You can also register global after hooks, however unlike guards, these hooks do not get a &lt;code&gt;next&lt;/code&gt; function and cannot affect the navigation:</source>
          <target state="translated">후크 후 글로벌을 등록 할 수도 있지만 가드와 달리이 후크는 &lt;code&gt;next&lt;/code&gt; 기능을 수행하지 않으며 탐색에 영향을 줄 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dceb3c719a2affde3934cc32a255fb6e8bac211f" translate="yes" xml:space="preserve">
          <source>You can also return a Promise that resolves to the desired position descriptor:</source>
          <target state="translated">원하는 위치 설명 자로 해석되는 약속을 반환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="87372b6a91ff376092ecc00b583afd4e75bf1fef" translate="yes" xml:space="preserve">
          <source>You can check out a live example &lt;a href=&quot;https://jsfiddle.net/yyx990803/4xfa2f19/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://jsfiddle.net/yyx990803/4xfa2f19/&quot;&gt;여기서&lt;/a&gt; 실제 예를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52a45f015af3c7e89ae621b8c057c43ce893c17a" translate="yes" xml:space="preserve">
          <source>You can create a function that returns props. This allows you to cast parameters into other types, combine static values with route-based values, etc.</source>
          <target state="translated">소품을 반환하는 함수를 만들 수 있습니다. 이를 통해 매개 변수를 다른 유형으로 캐스트하고 정적 값을 라우트 기반 값과 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1adba09890f98c1b3ec7486a6a2350042ffe55e" translate="yes" xml:space="preserve">
          <source>You can define &lt;code&gt;beforeEnter&lt;/code&gt; guards directly on a route's configuration object:</source>
          <target state="translated">route의 구성 객체에서 &lt;code&gt;beforeEnter&lt;/code&gt; 가드를 직접 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f9c7573f8d0fd8bb3f874e98560d1ebc3051886f" translate="yes" xml:space="preserve">
          <source>You can have multiple &lt;em&gt;params&lt;/em&gt; in the same route, and they will map to corresponding fields on &lt;code&gt;$route.params&lt;/code&gt;. Examples:</source>
          <target state="translated">동일한 경로에 여러 &lt;em&gt;매개 변수&lt;/em&gt; 가있을 수 있으며 &lt;code&gt;$route.params&lt;/code&gt; 해당 필드에 매핑됩니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="54f861ad07b617f0765fc567107e9e603992caea" translate="yes" xml:space="preserve">
          <source>You can have multiple dynamic segments in the same route, and they will map to corresponding fields on &lt;code&gt;$route.params&lt;/code&gt;. Examples:</source>
          <target state="translated">동일한 경로에 여러 동적 세그먼트를 가질 수 있으며 &lt;code&gt;$route.params&lt;/code&gt; 해당 필드에 매핑됩니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="91c9c8c9c91650676c169a76575a2310ebc323bc" translate="yes" xml:space="preserve">
          <source>You can include a &lt;code&gt;meta&lt;/code&gt; field when defining a route:</source>
          <target state="translated">경로를 정의 할 때 &lt;code&gt;meta&lt;/code&gt; 필드를 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ec3c840ce7353ceb670eb5fdafad625869a7713" translate="yes" xml:space="preserve">
          <source>You can more about the syntax on &lt;a href=&quot;https://docs.netlify.com/routing/redirects/rewrites-proxies/#history-pushstate-and-single-page-apps&quot;&gt;Netlify documentation&lt;/a&gt;. You can also &lt;a href=&quot;https://docs.netlify.com/configure-builds/file-based-configuration/&quot;&gt;create a &lt;code&gt;netlify.toml&lt;/code&gt;&lt;/a&gt; to combine &lt;em&gt;redirections&lt;/em&gt; with other Netlify features.</source>
          <target state="translated">&lt;a href=&quot;https://docs.netlify.com/routing/redirects/rewrites-proxies/#history-pushstate-and-single-page-apps&quot;&gt;Netlify 설명서&lt;/a&gt; 에서 구문에 대해 자세히 알아볼 수 있습니다 . &lt;a href=&quot;https://docs.netlify.com/configure-builds/file-based-configuration/&quot;&gt; &lt;code&gt;netlify.toml&lt;/code&gt; &lt;/a&gt; 을 만들어 다른 Netlify 기능과 &lt;em&gt;리디렉션&lt;/em&gt; 을 결합 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2bc2b7c4e64215b0f6dfda986ae622658ce356bc" translate="yes" xml:space="preserve">
          <source>You can register a global guard with &lt;code&gt;router.beforeResolve&lt;/code&gt;. This is similar to &lt;code&gt;router.beforeEach&lt;/code&gt; because it triggers on &lt;strong&gt;every navigation&lt;/strong&gt;, but resolve guards are called right before the navigation is confirmed, &lt;strong&gt;after all in-component guards and async route components are resolved&lt;/strong&gt;. Here is an example that ensures the user has given access to the Camera for routes that &lt;a href=&quot;meta&quot;&gt;have defined a custom meta&lt;/a&gt; property &lt;code&gt;requiresCamera&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;router.beforeResolve&lt;/code&gt; 로 글로벌 가드를 등록 할 수 있습니다 . 이는 &lt;strong&gt;모든 탐색&lt;/strong&gt; 에서 트리거되기 때문에 &lt;code&gt;router.beforeEach&lt;/code&gt; 와 유사 하지만 탐색이 확인되기 직전에 &lt;strong&gt;모든 구성 요소 가드 및 비동기 경로 구성 요소가 해결 된 후&lt;/strong&gt; 해결 가드가 호출 됩니다. 다음은 사용자 &lt;a href=&quot;meta&quot;&gt;지정 메타&lt;/a&gt; 속성 &lt;code&gt;requiresCamera&lt;/code&gt; 를정의한 경로에 대해 사용자가 카메라에 대한 액세스 권한을 부여했는지 확인하는 예입니다 .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dcaa153c3e42e4b62970046f5ffaf744b8c7954d" translate="yes" xml:space="preserve">
          <source>You can register a global guard with &lt;code&gt;router.beforeResolve&lt;/code&gt;. This is similar to &lt;code&gt;router.beforeEach&lt;/code&gt;, with the difference that resolve guards will be called right before the navigation is confirmed, &lt;strong&gt;after all in-component guards and async route components are resolved&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;router.beforeResolve&lt;/code&gt; 로 전역 가드를 등록 할 수 있습니다 . 이것은 &lt;code&gt;router.beforeEach&lt;/code&gt; 와 유사하며 &lt;strong&gt;모든 컴포넌트 내 가드 및 비동기 라우트 컴포넌트가 해결 된 후&lt;/strong&gt; 탐색이 확인되기 직전에 확인 가드가 호출된다는 차이점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91d70ca0e20247f409fa0d7f3606c443e7d0d92e" translate="yes" xml:space="preserve">
          <source>You can register global before guards using &lt;code&gt;router.beforeEach&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;router.beforeEach&lt;/code&gt; 를 사용하여 경비원 전에 전역을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4e8f1bf1aa4f62da6dd96a5076471808268cf35" translate="yes" xml:space="preserve">
          <source>You don't need to add the &lt;code&gt;*&lt;/code&gt; for repeated params if you don't plan to directly push to the not found route using its name. If you call &lt;code&gt;router.push('/not/found/url')&lt;/code&gt;, it will provide the right &lt;code&gt;pathMatch&lt;/code&gt; param.</source>
          <target state="translated">이름을 사용하여 찾을 수없는 경로로 직접 푸시 할 계획이없는 경우 반복 매개 변수에 &lt;code&gt;*&lt;/code&gt; 를 추가 할 필요가 없습니다. &lt;code&gt;router.push('/not/found/url')&lt;/code&gt; 을 호출 하면 올바른 &lt;code&gt;pathMatch&lt;/code&gt; 매개 변수를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="360fc60f946b0e1fb46441c21ec094cefc382a47" translate="yes" xml:space="preserve">
          <source>You don't need to do this when using global script tags.</source>
          <target state="translated">전역 스크립트 태그를 사용할 때는이 작업을 수행 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="fdc0308691390af461887e831e2f5799b218ef4e" translate="yes" xml:space="preserve">
          <source>You may have noticed that &lt;code&gt;router.push&lt;/code&gt;, &lt;code&gt;router.replace&lt;/code&gt; and &lt;code&gt;router.go&lt;/code&gt; are counterparts of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;&lt;code&gt;window.history.pushState&lt;/code&gt;, &lt;code&gt;window.history.replaceState&lt;/code&gt; and &lt;code&gt;window.history.go&lt;/code&gt;&lt;/a&gt;, and they do imitate the &lt;code&gt;window.history&lt;/code&gt; APIs.</source>
          <target state="translated">당신은 것을 눈치 챘을 수도 &lt;code&gt;router.push&lt;/code&gt; , &lt;code&gt;router.replace&lt;/code&gt; 및 &lt;code&gt;router.go&lt;/code&gt; 이 의 대응이다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt; &lt;code&gt;window.history.pushState&lt;/code&gt; , &lt;code&gt;window.history.replaceState&lt;/code&gt; 및 &lt;code&gt;window.history.go&lt;/code&gt; 는&lt;/a&gt; , 그들은 모방 할 &lt;code&gt;window.history&lt;/code&gt; 실행 API를.</target>
        </trans-unit>
        <trans-unit id="854dba594054d248b54c4e773f248a92460af780" translate="yes" xml:space="preserve">
          <source>You must define a global &lt;code&gt;append&lt;/code&gt; function on your &lt;em&gt;App&lt;/em&gt; instance:</source>
          <target state="translated">&lt;em&gt;앱&lt;/em&gt; 인스턴스 에 전역 &lt;code&gt;append&lt;/code&gt; 함수를 정의해야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="42001955a4630b11faa63d03b789c8381c402c78" translate="yes" xml:space="preserve">
          <source>You will have to clone directly from GitHub and build &lt;code&gt;vue-router&lt;/code&gt; yourself if you want to use the latest dev build.</source>
          <target state="translated">최신 개발자 빌드를 사용하려면 GitHub에서 직접 복제하고 &lt;code&gt;vue-router&lt;/code&gt; 를 직접 빌드해야합니다.</target>
        </trans-unit>
        <trans-unit id="33c7418d4dd301f2ad8592cef6b713a291d5dc4c" translate="yes" xml:space="preserve">
          <source>aborted</source>
          <target state="translated">aborted</target>
        </trans-unit>
        <trans-unit id="22c922a7722e225567a4b9082890a1c0a2a34dc0" translate="yes" xml:space="preserve">
          <source>active-class</source>
          <target state="translated">active-class</target>
        </trans-unit>
        <trans-unit id="cff189789a24d3a0c6568ff793ab307c2f5e703a" translate="yes" xml:space="preserve">
          <source>addRoute</source>
          <target state="translated">addRoute</target>
        </trans-unit>
        <trans-unit id="fde8c600951c09f9872b892841195a7629152e94" translate="yes" xml:space="preserve">
          <source>afterEach</source>
          <target state="translated">afterEach</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="a9a59f26c50e09e9ec16a6e992f5ec9a02ac3329" translate="yes" xml:space="preserve">
          <source>aliasOf</source>
          <target state="translated">aliasOf</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="320eb1bfeaf12fd7419608f4ee7a953270028244" translate="yes" xml:space="preserve">
          <source>aria-current-value</source>
          <target state="translated">aria-current-value</target>
        </trans-unit>
        <trans-unit id="e34aac5c6849fdb3570b660a5e774a81c616a4a9" translate="yes" xml:space="preserve">
          <source>available values: &lt;code&gt;&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;&lt;/code&gt;</source>
          <target state="translated">사용 가능한 값 : &lt;code&gt;&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61bb8d29b5be7db307cb29005bff087ebe300454" translate="yes" xml:space="preserve">
          <source>back</source>
          <target state="translated">back</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="7d99fbf783cfec7f174a35d00957229c4ec49a92" translate="yes" xml:space="preserve">
          <source>beforeEach</source>
          <target state="translated">beforeEach</target>
        </trans-unit>
        <trans-unit id="18ae4457594432e76aaec3b9b9b5a99a5568d980" translate="yes" xml:space="preserve">
          <source>beforeEnter</source>
          <target state="translated">beforeEnter</target>
        </trans-unit>
        <trans-unit id="b53d98f73106bac90f193c697c59ab1dff1901e6" translate="yes" xml:space="preserve">
          <source>beforeResolve</source>
          <target state="translated">beforeResolve</target>
        </trans-unit>
        <trans-unit id="8761d26fb8d6c7853faf7cf13fd3e5471364dc36" translate="yes" xml:space="preserve">
          <source>cancelled</source>
          <target state="translated">cancelled</target>
        </trans-unit>
        <trans-unit id="42685f11da91a55b1f5c5b782edb2f0fc1dd5148" translate="yes" xml:space="preserve">
          <source>children</source>
          <target state="translated">children</target>
        </trans-unit>
        <trans-unit id="c212f08ed1157ae268fd83d142afd5ccd48664b2" translate="yes" xml:space="preserve">
          <source>components</source>
          <target state="translated">components</target>
        </trans-unit>
        <trans-unit id="558d84209fcceec0efc231ef1543c1afb1a3c64a" translate="yes" xml:space="preserve">
          <source>createMemoryHistory</source>
          <target state="translated">createMemoryHistory</target>
        </trans-unit>
        <trans-unit id="e38a0d9db7043da2ea87d722c316f035c30f9c8e" translate="yes" xml:space="preserve">
          <source>createRouter</source>
          <target state="translated">createRouter</target>
        </trans-unit>
        <trans-unit id="7b654c1668d01af4224ff101ff001c879dd9b76d" translate="yes" xml:space="preserve">
          <source>createWebHashHistory</source>
          <target state="translated">createWebHashHistory</target>
        </trans-unit>
        <trans-unit id="71dc391cc883a324ef11e1286677d9d2cd2155c0" translate="yes" xml:space="preserve">
          <source>createWebHistory</source>
          <target state="translated">createWebHistory</target>
        </trans-unit>
        <trans-unit id="f28633e032abfa9a862b7d14478d159c0e2fbe36" translate="yes" xml:space="preserve">
          <source>currentRoute</source>
          <target state="translated">currentRoute</target>
        </trans-unit>
        <trans-unit id="f9ac14b63a75faf57d8db6f919bfabb2502d273c" translate="yes" xml:space="preserve">
          <source>custom</source>
          <target state="translated">custom</target>
        </trans-unit>
        <trans-unit id="99b10c37b942ce1bc4a061b17674e700284477fc" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;/&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5b86475c5ce19d01e0cac89c9799c7283c7d817" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;a&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;a&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32d04dbda316ea929438d99dc5deb9bfed79c294" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;default&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;default&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc7e54a97eb660f817218b1cedc02e8d9e783123" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;hash&quot; (in browser) | &quot;abstract&quot; (in Node.js)&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;hash&quot; (in browser) | &quot;abstract&quot; (in Node.js)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f018a79ddcbe226a0fa236f8257a7f90261a2b33" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a09a446c9b3680978568555d5a02876f163d4278" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c5e5af919de42d74014a2fd8d7af6f3238aba66" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;'click'&lt;/code&gt;</source>
          <target state="translated">기본 : &lt;code&gt;'click'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b853518a7253a67751993712323af2afe8d26a75" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6fd6e8dec26869827df393505cdc6fbe0e5b3f8" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="736fcab46d3c183000b547caa2f1f0abcdcd1c87" translate="yes" xml:space="preserve">
          <source>delta</source>
          <target state="translated">delta</target>
        </trans-unit>
        <trans-unit id="6321b66c3d74f51a3682fe62d6d5f203acb67df4" translate="yes" xml:space="preserve">
          <source>duplicated</source>
          <target state="translated">duplicated</target>
        </trans-unit>
        <trans-unit id="b636d7b90c44146fcdd75dacd33af199ddc37500" translate="yes" xml:space="preserve">
          <source>error handler to register</source>
          <target state="translated">등록 할 오류 처리기</target>
        </trans-unit>
        <trans-unit id="5006ed0248a019713b762563076292379daf07b4" translate="yes" xml:space="preserve">
          <source>event</source>
          <target state="translated">event</target>
        </trans-unit>
        <trans-unit id="b55e22fe7830e8fe49f48f834b913ef8618f0521" translate="yes" xml:space="preserve">
          <source>exact</source>
          <target state="translated">exact</target>
        </trans-unit>
        <trans-unit id="de8dc393f32ea87cda6843c8979f8bc15f115a5a" translate="yes" xml:space="preserve">
          <source>exact-active-class</source>
          <target state="translated">exact-active-class</target>
        </trans-unit>
        <trans-unit id="5d288ad264adcc2a70039c116c397be72c30fe76" translate="yes" xml:space="preserve">
          <source>fallback</source>
          <target state="translated">fallback</target>
        </trans-unit>
        <trans-unit id="ace0c5e90ac07202e99d0186576979bacac854c0" translate="yes" xml:space="preserve">
          <source>forward</source>
          <target state="translated">forward</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="619713ad5afcfe48bd0fd5dbbcac2d33359613f3" translate="yes" xml:space="preserve">
          <source>fullPath</source>
          <target state="translated">fullPath</target>
        </trans-unit>
        <trans-unit id="65d3c70fa485a26386880f5e6296ceb8cfd2ce92" translate="yes" xml:space="preserve">
          <source>getRoutes</source>
          <target state="translated">getRoutes</target>
        </trans-unit>
        <trans-unit id="1ec558a60b5dda24597816c924776716018caf8b" translate="yes" xml:space="preserve">
          <source>go</source>
          <target state="translated">go</target>
        </trans-unit>
        <trans-unit id="c7e42d43b0a326f8979eb4bbeb3655f7deb91f40" translate="yes" xml:space="preserve">
          <source>guard</source>
          <target state="translated">guard</target>
        </trans-unit>
        <trans-unit id="31a81ec93db3740ee3984fc40e34a60b0412643d" translate="yes" xml:space="preserve">
          <source>handler</source>
          <target state="translated">handler</target>
        </trans-unit>
        <trans-unit id="5d0381ac5160e174d6dcbb4ef661b2cbd6d4e574" translate="yes" xml:space="preserve">
          <source>hasRoute</source>
          <target state="translated">hasRoute</target>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="4df0e6a21ec6a23a3721f71c0e947871720c309f" translate="yes" xml:space="preserve">
          <source>if you are using Babel, you will need to add the &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import&lt;/a&gt; plugin so that Babel can properly parse the syntax.</source>
          <target state="translated">Babel을 사용하는 경우 Babel이 &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;구문&lt;/a&gt; 을 올바르게 구문 분석 할 수 있도록 구문 동적 가져 오기 플러그인 을 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="8799419db1a362129b0bb2a9c7c2557c505892b1" translate="yes" xml:space="preserve">
          <source>isReady</source>
          <target state="translated">isReady</target>
        </trans-unit>
        <trans-unit id="b6dd75299d5b83e3df928ca455992bdffdbeedbc" translate="yes" xml:space="preserve">
          <source>leaveGuard</source>
          <target state="translated">leaveGuard</target>
        </trans-unit>
        <trans-unit id="d175db7336b4deaf3b1a69b2f762ee3bed67cb20" translate="yes" xml:space="preserve">
          <source>linkActiveClass</source>
          <target state="translated">linkActiveClass</target>
        </trans-unit>
        <trans-unit id="e41ac53cf69868bc1c3a7ee6ef65c73237c62040" translate="yes" xml:space="preserve">
          <source>linkExactActiveClass</source>
          <target state="translated">linkExactActiveClass</target>
        </trans-unit>
        <trans-unit id="d010685fc836384d78ac35ea6590bf2c53e4247f" translate="yes" xml:space="preserve">
          <source>matched</source>
          <target state="translated">matched</target>
        </trans-unit>
        <trans-unit id="89f41168b29a18bea64d6f6cdc32335cd79cb41b" translate="yes" xml:space="preserve">
          <source>matched path</source>
          <target state="translated">일치하는 경로</target>
        </trans-unit>
        <trans-unit id="cb030491157b26a570b6ee91e5b068d99c3b72f6" translate="yes" xml:space="preserve">
          <source>meta</source>
          <target state="translated">meta</target>
        </trans-unit>
        <trans-unit id="e78fe7049341b36116d8054f5a3e00d01f245fcc" translate="yes" xml:space="preserve">
          <source>mode</source>
          <target state="translated">mode</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="42f887092eed9eed78b5b3dc3472764a43d827ea" translate="yes" xml:space="preserve">
          <source>navigation guard to add</source>
          <target state="translated">추가 할 내비게이션 가드</target>
        </trans-unit>
        <trans-unit id="9afbd3b7cb7f464bb3241a16913e92e2cf6ace45" translate="yes" xml:space="preserve">
          <source>navigation hook to add</source>
          <target state="translated">추가 할 탐색 후크</target>
        </trans-unit>
        <trans-unit id="66ff45f3e30daec8f2c1da3a46cdc95c48025e89" translate="yes" xml:space="preserve">
          <source>new Router becomes createRouter</source>
          <target state="translated">새 라우터가 createRouter가 됨</target>
        </trans-unit>
        <trans-unit id="58a3ed6f2965252c6ac4957d95f7a3bdfca47101" translate="yes" xml:space="preserve">
          <source>nginx</source>
          <target state="translated">nginx</target>
        </trans-unit>
        <trans-unit id="660051d15ac64cec704cfacca2c2eab008f657e8" translate="yes" xml:space="preserve">
          <source>npm</source>
          <target state="translated">npm</target>
        </trans-unit>
        <trans-unit id="62fc756a3de9b9cbb5754dd2da26eccaddc3ea99" translate="yes" xml:space="preserve">
          <source>onBeforeRouteLeave</source>
          <target state="translated">onBeforeRouteLeave</target>
        </trans-unit>
        <trans-unit id="a04113b3891bf9d205bb02ecd867e5f2f318fbbd" translate="yes" xml:space="preserve">
          <source>onBeforeRouteUpdate</source>
          <target state="translated">onBeforeRouteUpdate</target>
        </trans-unit>
        <trans-unit id="34c18e24d1dfbbb529faba38b503601cb512f20e" translate="yes" xml:space="preserve">
          <source>onError</source>
          <target state="translated">onError</target>
        </trans-unit>
        <trans-unit id="ba965fb153711071fe0701d7c93c7d5ec2e10b41" translate="yes" xml:space="preserve">
          <source>optional base to provide. Defaults to &lt;code&gt;location.pathname + location.search&lt;/code&gt;. If there is a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;head&lt;/code&gt;, its value will be ignored in favor of this parameter &lt;strong&gt;but note it affects all the history.pushState() calls&lt;/strong&gt;, meaning that if you use a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag, its &lt;code&gt;href&lt;/code&gt; value &lt;strong&gt;has to match this parameter&lt;/strong&gt; (ignoring anything after the &lt;code&gt;#&lt;/code&gt;)</source>
          <target state="translated">제공 할 선택적베이스. 기본값은 &lt;code&gt;location.pathname + location.search&lt;/code&gt; 입니다. 가있는 경우 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 태그 &lt;code&gt;head&lt;/code&gt; , 그 값은이 매개 변수에 찬성 무시됩니다 &lt;strong&gt;하지만 모든 history.pushState () 호출에 영향을 미치는 유의&lt;/strong&gt; 당신이 사용하는 경우 즉, &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 태그를, 그 &lt;code&gt;href&lt;/code&gt; 값 &lt;strong&gt;이 이 매개 변수와 일치&lt;/strong&gt; 시키려면 ( &lt;code&gt;#&lt;/code&gt; 뒤의 모든 항목 무시 )</target>
        </trans-unit>
        <trans-unit id="301288d463e63a480e550d8a09e43f90f150c861" translate="yes" xml:space="preserve">
          <source>optional base to provide. Useful when the application is hosted inside of a folder like &lt;code&gt;https://example.com/folder/&lt;/code&gt;</source>
          <target state="translated">제공 할 선택적베이스. 애플리케이션이 &lt;code&gt;https://example.com/folder/&lt;/code&gt; 와 같은 폴더 내에서 호스팅 될 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="513f8de9259fe7658fe14d1352c54ccf070e911f" translate="yes" xml:space="preserve">
          <source>options</source>
          <target state="translated">options</target>
        </trans-unit>
        <trans-unit id="fd7b034e09b752c24942cd9b0b20c29db2dc3e90" translate="yes" xml:space="preserve">
          <source>params</source>
          <target state="translated">params</target>
        </trans-unit>
        <trans-unit id="ca0450b471757295fd42518cf19f242cfd3f708d" translate="yes" xml:space="preserve">
          <source>parentName</source>
          <target state="translated">parentName</target>
        </trans-unit>
        <trans-unit id="5ad0ea70e32e296a57cbfa6f96280cbd79caa6b6" translate="yes" xml:space="preserve">
          <source>parseQuery</source>
          <target state="translated">parseQuery</target>
        </trans-unit>
        <trans-unit id="953c0c236f2356b54ee370e347c14c3865381884" translate="yes" xml:space="preserve">
          <source>parseQuery / stringifyQuery</source>
          <target state="translated">parseQuery / stringifyQuery</target>
        </trans-unit>
        <trans-unit id="3150ecd5e0294534a81ae047ddac559de481d774" translate="yes" xml:space="preserve">
          <source>path</source>
          <target state="translated">path</target>
        </trans-unit>
        <trans-unit id="91cc2e927b3bfb1d4477b744f7c70221ddb86ef1" translate="yes" xml:space="preserve">
          <source>pattern</source>
          <target state="translated">pattern</target>
        </trans-unit>
        <trans-unit id="aa60968734f4f4d402439b0e033649c02834cb03" translate="yes" xml:space="preserve">
          <source>props</source>
          <target state="translated">props</target>
        </trans-unit>
        <trans-unit id="fe769bae9076fd096b976fe25deb99259eefb7ef" translate="yes" xml:space="preserve">
          <source>props object that can be passed to &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;. Accepts &lt;code&gt;Ref&lt;/code&gt;s and &lt;code&gt;ComputedRef&lt;/code&gt;s</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 에 전달할 수있는 props 객체입니다 . 수용 &lt;code&gt;Ref&lt;/code&gt; 들과 &lt;code&gt;ComputedRef&lt;/code&gt; 의</target>
        </trans-unit>
        <trans-unit id="dc867c03d6f1f4385a2475b4be1137e585036dd1" translate="yes" xml:space="preserve">
          <source>push</source>
          <target state="translated">push</target>
        </trans-unit>
        <trans-unit id="7cd9148ec5a552dbf68de5a6debcf8e4d974db72" translate="yes" xml:space="preserve">
          <source>query</source>
          <target state="translated">query</target>
        </trans-unit>
        <trans-unit id="fb5ed1e8458cc7da71478ddab87136681cb0179e" translate="yes" xml:space="preserve">
          <source>redirect</source>
          <target state="translated">redirect</target>
        </trans-unit>
        <trans-unit id="28b7fc08d7e7008fe2436d5ee7fb36281bcbea3a" translate="yes" xml:space="preserve">
          <source>redirectedFrom</source>
          <target state="translated">redirectedFrom</target>
        </trans-unit>
        <trans-unit id="88d876f0b2f156496db3da61b113febd8f67f1e3" translate="yes" xml:space="preserve">
          <source>removeRoute</source>
          <target state="translated">removeRoute</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="1a77d416224cbbe77a439cfd6c198030cb522872" translate="yes" xml:space="preserve">
          <source>required</source>
          <target state="translated">required</target>
        </trans-unit>
        <trans-unit id="4e7a20843e2f67b213946ac43a43c4d2ea3a66a3" translate="yes" xml:space="preserve">
          <source>resolve</source>
          <target state="translated">resolve</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
